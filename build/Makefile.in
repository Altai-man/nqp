# Copyright (C) 2006-2009, The Perl Foundation.
# $Id$

PARROT_ARGS      =

# values from parrot_config
PARROT_BIN_DIR     = @bindir@
PARROT_VERSION     = @versiondir@
PARROT_INCLUDE_DIR = @includedir@$(PARROT_VERSION)
PARROT_LIB_DIR     = @libdir@$(PARROT_VERSION)
PARROT_SRC_DIR     = @srcdir@$(PARROT_VERSION)
HAS_ICU            = @has_icu@

CC            = @cc@
CFLAGS        = @ccflags@ @cc_shared@ @cc_debug@ @ccwarn@ @cc_hasjit@ @cg_flag@ @gc_flag@
EXE           = @exe@
LD            = @ld@
LDFLAGS       = @ldflags@ @ld_debug@
LD_LOAD_FLAGS = @ld_load_flags@
LIBPARROT     = @inst_libparrot_ldflags@
O             = @o@
LOAD_EXT      = @load_ext@
PERL          = @perl@
CP            = @cp@
MV            = @mv@
RM_F          = @rm_f@
MKPATH        = $(PERL) -MExtUtils::Command -e mkpath
CHMOD         = $(PERL) -MExtUtils::Command -e chmod

# locations of parrot resources
PARROT           = $(PARROT_BIN_DIR)/parrot$(EXE)
PARROT_NQP       = $(PARROT_BIN_DIR)/parrot_nqp$(EXE)
PBC_TO_EXE       = $(PARROT_BIN_DIR)/pbc_to_exe$(EXE)
PARROT_TOOLS_DIR = $(PARROT_LIB_DIR)/tools
PARROT_PERL_LIB  = $(PARROT_TOOLS_DIR)/lib

NQP_LANG_DIR     = $(PARROT_LIB_DIR)/languages/nqp

P6REGEX_SOURCES = \
  src/Regex/P6Regex.pir \
  src/Regex/P6Regex/Grammar.pm \
  src/Regex/P6Regex/Actions.pm \
  src/cheats/p6regex-grammar.pir \
  src/cheats/hll-compiler.pir \
  src/cheats/regex-cursor-protoregex.pir \
  src/PAST/Regex.pir \
  src/PAST/Compiler-Regex.pir \
  src/Regex/constants.pir \
  src/Regex/Cursor.pir \
  src/Regex/Cursor-builtins.pir \
  src/Regex/Cursor-protoregex-peek.pir \
  src/Regex/Match.pir \
  src/Regex/Dumper.pir \

P6GRAMMAR_SOURCES = \
  src/Regex/P6Grammar.pir \
  src/Regex/P6Grammar/Grammar.pm \
  src/Regex/P6Grammar/Actions.pm \

HLLGRAMMAR_SOURCES = \
  src/HLL/Grammar.pm \
  src/HLL/Actions.pm \
  src/cheats/hll-grammar.pir \

NQP_SOURCES = \
  src/NQP/Grammar.pm \
  src/NQP/Actions.pm \
  src/NQP/Compiler.pir \

STAGE0 = src/stage0
STAGE1 = src/stage1
STAGE2 = src/stage2

P6REGEX_PBC     = P6Regex.pbc
P6REGEX_G       = gen/p6regex-grammar.pir
P6REGEX_A       = gen/p6regex-actions.pir

P6GRAMMAR_PBC   = P6Grammar.pbc
P6GRAMMAR_G     = gen/p6grammar-grammar.pir
P6GRAMMAR_A     = gen/p6grammar-actions.pir

HLLGRAMMAR_PBC  = HLLGrammar.pbc

CLEANUPS = \
  *.manifest \
  *.pdb \
  $(P6REGEX_PBC) \
  $(P6GRAMMAR_PBC) \
  $(HLLGRAMMAR_PBC) \
  nqp.pbc \
  nqp$(EXE) \
  src/stage0/*.pbc \
  src/stage1/gen/* \
  src/stage1/*.pbc \
  src/stage2/gen/* \
  src/stage2/*.pbc \
  src/gen/*.pir \

all: $(P6REGEX_PBC) $(P6GRAMMAR_PBC)
exe: P6Regex$(EXE) P6Grammar$(EXE)

stage0: $(STAGE0)
stage1: $(STAGE1)
stage2: $(STAGE2)

$(STAGE0): $(STAGE0)/$(P6REGEX_PBC) $(STAGE0)/$(P6GRAMMAR_PBC)

$(STAGE0)/$(P6REGEX_PBC): src/stage0/P6Regex-s0.pir
	$(PARROT) -o $(STAGE0)/$(P6REGEX_PBC) src/stage0/P6Regex-s0.pir

$(STAGE0)/$(P6GRAMMAR_PBC): $(STAGE0)/$(P6REGEX_PBC) src/stage0/P6Grammar-s0.pir
	$(PARROT) -o $(STAGE0)/$(P6GRAMMAR_PBC) src/stage0/P6Grammar-s0.pir

$(STAGE1): $(STAGE1)/$(P6REGEX_PBC) $(STAGE1)/$(P6GRAMMAR_PBC)

$(STAGE1)/$(P6REGEX_PBC): $(STAGE0)/$(P6GRAMMAR_PBC) $(P6REGEX_SOURCES)
	$(RM) $(P6REGEX_PBC) $(P6GRAMMAR_PBC)
	$(MKPATH) $(STAGE1)/gen
	$(PARROT) --library=$(STAGE0) $(STAGE0)/$(P6GRAMMAR_PBC) \
	    --target=pir --output=$(STAGE1)/$(P6REGEX_G) \
	    src/Regex/P6Regex/Grammar.pm
	$(PARROT_NQP) \
	    --target=pir --output=$(STAGE1)/$(P6REGEX_A) \
	    src/Regex/P6Regex/Actions.pm
	$(PARROT) --include=$(STAGE1) -o $(STAGE1)/$(P6REGEX_PBC) \
	    src/Regex/P6Regex.pir

$(STAGE1)/$(P6GRAMMAR_PBC): $(STAGE0)/$(P6GRAMMAR_PBC) $(P6GRAMMAR_SOURCES)
	$(RM) $(P6REGEX_PBC) $(P6GRAMMAR_PBC)
	$(MKPATH) $(STAGE1)/gen
	$(PARROT) --library=$(STAGE0) $(STAGE0)/$(P6GRAMMAR_PBC) \
	    --target=pir --output=$(STAGE1)/$(P6GRAMMAR_G) \
	    src/Regex/P6Grammar/Grammar.pm
	$(PARROT_NQP) \
	    --target=pir --output=$(STAGE1)/$(P6GRAMMAR_A) \
	    src/Regex/P6Grammar/Actions.pm
	$(PARROT) --include=$(STAGE1) -o $(STAGE1)/$(P6GRAMMAR_PBC) \
	    src/Regex/P6Grammar.pir

$(STAGE2): $(STAGE2)/$(P6REGEX_PBC) $(STAGE2)/$(P6GRAMMAR_PBC)

$(STAGE2)/$(P6REGEX_PBC): $(STAGE1)/$(P6GRAMMAR_PBC) $(P6REGEX_SOURCES)
	$(RM) $(P6REGEX_PBC) $(P6GRAMMAR_PBC)
	$(MKPATH) $(STAGE2)/gen
	$(PARROT) --library=$(STAGE1) $(STAGE1)/$(P6GRAMMAR_PBC) \
	    --target=pir --output=$(STAGE2)/$(P6REGEX_G) \
	    src/Regex/P6Regex/Grammar.pm
	$(PARROT_NQP) \
	    --target=pir --output=$(STAGE2)/$(P6REGEX_A) \
	    src/Regex/P6Regex/Actions.pm
	$(PARROT) --include=$(STAGE2) -o $(STAGE2)/$(P6REGEX_PBC) \
	    src/Regex/P6Regex.pir

$(STAGE2)/$(P6GRAMMAR_PBC): $(STAGE1)/$(P6GRAMMAR_PBC) $(P6GRAMMAR_SOURCES)
	$(RM) $(P6REGEX_PBC) $(P6GRAMMAR_PBC)
	$(MKPATH) $(STAGE2)/gen
	$(PARROT) --library=$(STAGE1) $(STAGE1)/$(P6GRAMMAR_PBC) \
	    --target=pir --output=$(STAGE2)/$(P6GRAMMAR_G) \
	    src/Regex/P6Grammar/Grammar.pm
	$(PARROT_NQP) \
	    --target=pir --output=$(STAGE2)/$(P6GRAMMAR_A) \
	    src/Regex/P6Grammar/Actions.pm
	$(PARROT) --include=$(STAGE2) -o $(STAGE2)/$(P6GRAMMAR_PBC) \
	    src/Regex/P6Grammar.pir

$(P6REGEX_PBC): $(STAGE2)/$(P6REGEX_PBC)
	$(CP) $(STAGE2)/$(P6REGEX_PBC) $(P6REGEX_PBC)

$(P6GRAMMAR_PBC): $(STAGE2)/$(P6GRAMMAR_PBC)
	$(CP) $(STAGE2)/$(P6GRAMMAR_PBC) $(P6GRAMMAR_PBC)
	
P6Regex$(EXE): $(P6REGEX_PBC) $(PBC_TO_EXE)
	$(PBC_TO_EXE) $(P6REGEX_PBC)

P6Grammar$(EXE): $(P6GRAMMAR_PBC) $(P6REGEX_PBC) $(PBC_TO_EXE)
	$(PBC_TO_EXE) $(P6GRAMMAR_PBC)

$(HLLGRAMMAR_PBC): $(P6GRAMMAR_PBC) $(P6REGEX_PBC) $(HLLGRAMMAR_SOURCES)
	$(PARROT) $(P6GRAMMAR_PBC) --target=pir \
	    src/HLL/Grammar.pm >src/gen/hll-grammar.pir
	$(PARROT_NQP) --target=pir \
	    src/HLL/Actions.pm >src/gen/hll-actions.pir
	$(PARROT) -o HLLGrammar.pbc src/cheats/hll-grammar.pir

nqp$(EXE): $(HLLGRAMMAR_PBC) $(P6GRAMMAR_PBC) $(PARROT_NQP) $(PBC_TO_EXE) $(NQP_SOURCES)
	$(PARROT) $(P6GRAMMAR_PBC) --target=pir \
	    src/NQP/Grammar.pm >src/gen/nqp-grammar.pir
	$(PARROT_NQP) --target=pir \
	    src/NQP/Actions.pm >src/gen/nqp-actions.pir
	$(PARROT) -o nqp.pbc src/NQP/Compiler.pir
	$(PBC_TO_EXE) nqp.pbc


bootstrap: p6grammar
	./p6grammar --target=pir src/Regex/P6Regex/Grammar.pm >p6regex-grammar.pir
	./p6grammar --target=pir src/Regex/P6Grammar/Grammar.pm >p6grammar-grammar.pir

bootstrap-files: src/gen/p6regex-grammar.pir src/gen/p6grammar-grammar.pir
	$(PERL) build/gen_bootstrap.pl src/Regex/P6Regex.pir >src/stage0/P6Regex-s0.pir
	$(PERL) build/gen_bootstrap.pl src/Regex/P6Grammar.pir >src/stage0/P6Grammar-s0.pir
	

## testing

test: p6regex-test nqp-test

test-loud: p6regex-test-loud

p6regex-test: $(P6REGEX_PBC)
	prove -r --exec $(PARROT) t/p6regex

p6regex-test-loud: $(P6REGEX_PBC)
	prove -r -v --exec $(PARROT) t/p6regex

nqp-test: nqp$(EXE)
	prove -r --exec ./nqp$(EXE) t/nqp

## cleaning
clean:
	$(RM_F) $(CLEANUPS)

distclean: realclean

realclean: clean
	$(RM_F) Makefile

testclean:
