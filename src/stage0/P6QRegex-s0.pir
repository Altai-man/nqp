.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'
.include 'libpaths.pasm'
.loadlib "nqp_group"
.loadlib "nqp_ops"
.loadlib "nqp_bigint_ops"
.loadlib "trans_ops"
.loadlib "io_ops"
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_177_1360426899.567") :anon :lex
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc _lex_param_0 :slurpy 
    .const 'Sub' $P5036 = 'cuid_176_1360426899.567' 
    capture_lex $P5036 
    .const 'Sub' $P5036 = 'cuid_179_1360426899.567' 
    capture_lex $P5036 
    .const 'Sub' $P5036 = 'cuid_180_1360426899.567' 
    capture_lex $P5036 
    .const 'Sub' $P5036 = 'cuid_191_1360426899.567' 
    capture_lex $P5036 
    .const 'Sub' $P5036 = 'cuid_230_1360426899.567' 
    capture_lex $P5036 
    .lex "GLOBALish", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "EXPORT", $P103 
    .lex "NQPCursorRole", $P104 
    .lex "$p6regex", $P105 
    .lex "&MAIN", $P106 
    .lex "@ARGS", _lex_param_0 
    .local pmc ctxsave 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P105, $P5001
    .const 'Sub' $P5002 = 'cuid_176_1360426899.567' 
    capture_lex $P5002
    set $P106, $P5002
    find_dynamic_lex $P5003, "$*CTXSAVE"
    set ctxsave, $P5003
    isnull $I5001, ctxsave
    if $I5001 goto unless10_end11 
    can $I5002, ctxsave, "ctxsave"
    box $P5006, $I5002
    set $P5005, $P5006
    unless $I5002 goto if11_end13 
    $P5004 = ctxsave."ctxsave"()
    set $P5005, $P5004
  if11_end13:
  unless10_end11:
.annotate 'line', 1
    .const 'Sub' $P5007 = 'cuid_179_1360426899.567' 
    capture_lex $P5007
    $P5008 = $P5007()
    .const 'Sub' $P5009 = 'cuid_180_1360426899.567' 
    capture_lex $P5009
    $P5010 = $P5009()
    .const 'Sub' $P5011 = 'cuid_191_1360426899.567' 
    capture_lex $P5011
    $P5012 = $P5011()
    .const 'Sub' $P5013 = 'cuid_230_1360426899.567' 
    capture_lex $P5013
    $P5014 = $P5013()
.annotate 'line', 1028
    nqp_get_sc_object $P5019, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5018, $P5019, "QRegex"
    nqp_get_package_through_who $P5017, $P5018, "P6Regex"
    get_who $P5016, $P5017
    set $P5015, $P5016["Compiler"]
    unless_null $P5015, fallback2334
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5015, $P5020
  fallback2334:
    $P5021 = $P5015."new"()
    set $P105, $P5021
.annotate 'line', 1029
    $P105."language"("QRegex::P6Regex")
.annotate 'line', 1030
    nqp_get_sc_object $P5026, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5025, $P5026, "QRegex"
    nqp_get_package_through_who $P5024, $P5025, "P6Regex"
    get_who $P5023, $P5024
    set $P5022, $P5023["Grammar"]
    unless_null $P5022, fallback2335
    nqp_get_sc_object $P5027, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5022, $P5027
  fallback2335:
    $P105."parsegrammar"($P5022)
.annotate 'line', 1031
    nqp_get_sc_object $P5032, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5031, $P5032, "QRegex"
    nqp_get_package_through_who $P5030, $P5031, "P6Regex"
    get_who $P5029, $P5030
    set $P5028, $P5029["Actions"]
    unless_null $P5028, fallback2336
    nqp_get_sc_object $P5033, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5028, $P5033
  fallback2336:
    $P105."parseactions"($P5028)
    unless _lex_param_0 goto if625_end2338 
    .const 'Sub' $P5034 = "cuid_176_1360426899.567" 
    $P5035 = $P5034(_lex_param_0 :flat)
  if625_end2338:
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "MAIN" :subid("cuid_176_1360426899.567") :anon :lex :outer("cuid_177_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 1033
    .param pmc _lex_param_0 
    .lex "@ARGS", _lex_param_0 
.annotate 'line', 1034
    find_lex $P5001, "$p6regex"
    $P5002 = $P5001."command_line"(_lex_param_0, "utf8" :named("encoding"), "ucs4" :named("transcode"))
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_179_1360426899.567") :anon :lex :outer("cuid_177_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 9
    .const 'Sub' $P5002 = 'cuid_1_1360426899.567' 
    capture_lex $P5002 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_1_1360426899.567' 
    capture_lex $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "create_code" :subid("cuid_1_1360426899.567") :anon :lex :outer("cuid_179_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 10
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .const 'Sub' $P5070 = 'cuid_178_1360426899.567' 
    capture_lex $P5070 
    .lex "$dummy", $P101 
    .lex "$code_obj", $P102 
    .lex "$slot", $P103 
    .lex "$fixups", $P104 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    .lex "$name", _lex_param_2 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P104, $P5004
    .const 'Sub' $P5007 = 'cuid_178_1360426899.567' 
    capture_lex $P5007
    newclosure $P5006, $P5007
    nqp_fresh_stub $P5005, $P5006
    set $P101, $P5005
    set $S5001, _lex_param_2
    assign $P101, $S5001
    setprop $P101, "STATIC_CODE_REF", $P101
.annotate 'line', 17
    nqp_decontainerize $P5008, _lex_param_0
    $P5008."add_root_code_ref"($P101, _lex_param_1)
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 9
    repr_instance_of $P5009, $P5010
    set $P102, $P5009
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 9
    setattribute $P102, $P5011, "$!do", $P101
.annotate 'line', 22
    nqp_decontainerize $P5012, _lex_param_0
    $P5013 = $P5012."add_object"($P102)
    set $P103, $P5013
.annotate 'line', 25
    nqp_get_sc_object $P5017, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Stmt"]
    unless_null $P5014, fallback14
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5018
  fallback14:
    $P5019 = $P5014."new"()
    set $P104, $P5019
.annotate 'line', 26
    nqp_get_sc_object $P5023, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback15
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5024
  fallback15:
.annotate 'line', 28
    nqp_get_sc_object $P5028, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["WVal"]
    unless_null $P5025, fallback16
    nqp_get_sc_object $P5029, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5025, $P5029
  fallback16:
    $P5030 = $P5025."new"($P102 :named("value"))
.annotate 'line', 29
    nqp_get_sc_object $P5034, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["WVal"]
    unless_null $P5031, fallback17
    nqp_get_sc_object $P5035, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5031, $P5035
  fallback17:
    nqp_get_sc_object $P5036, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 9
    $P5037 = $P5031."new"($P5036 :named("value"))
.annotate 'line', 30
    nqp_get_sc_object $P5041, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["SVal"]
    unless_null $P5038, fallback18
    nqp_get_sc_object $P5042, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5038, $P5042
  fallback18:
    $P5043 = $P5038."new"("$!do" :named("value"))
.annotate 'line', 31
    nqp_get_sc_object $P5047, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["BVal"]
    unless_null $P5044, fallback19
    nqp_get_sc_object $P5048, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5044, $P5048
  fallback19:
    $P5049 = $P5044."new"(_lex_param_1 :named("value"))
    $P5050 = $P5020."new"($P5030, $P5037, $P5043, $P5049, "bindattr" :named("op"))
    $P104."push"($P5050)
.annotate 'line', 33
    nqp_get_sc_object $P5054, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5053, $P5054, "QAST"
    get_who $P5052, $P5053
    set $P5051, $P5052["Op"]
    unless_null $P5051, fallback20
    nqp_get_sc_object $P5055, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5051, $P5055
  fallback20:
.annotate 'line', 35
    nqp_get_sc_object $P5059, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5058, $P5059, "QAST"
    get_who $P5057, $P5058
    set $P5056, $P5057["BVal"]
    unless_null $P5056, fallback21
    nqp_get_sc_object $P5060, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5056, $P5060
  fallback21:
    $P5061 = $P5056."new"(_lex_param_1 :named("value"))
.annotate 'line', 36
    nqp_get_sc_object $P5065, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5064, $P5065, "QAST"
    get_who $P5063, $P5064
    set $P5062, $P5063["WVal"]
    unless_null $P5062, fallback22
    nqp_get_sc_object $P5066, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5062, $P5066
  fallback22:
    $P5067 = $P5062."new"($P102 :named("value"))
    $P5068 = $P5051."new"($P5061, $P5067, "setcodeobj" :named("op"))
    $P104."push"($P5068)
.annotate 'line', 38
    nqp_decontainerize $P5069, _lex_param_0
    $P5069."add_fixup_task"($P104 :named("fixup_past"))
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_178_1360426899.567") :anon :lex :outer("cuid_1_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 12

    box $P5001, "Uncompiled code executed"
    die $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_180_1360426899.567") :anon :lex :outer("cuid_177_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 44
    .const 'Sub' $P5086 = 'cuid_2_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_3_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_4_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_5_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_6_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_8_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_9_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_10_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_11_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_12_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_14_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_18_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_19_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_20_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_21_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_22_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_23_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_26_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_28_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_29_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_31_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_32_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_33_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_34_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_35_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_39_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_40_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_42_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_43_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_44_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_45_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_46_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_47_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_48_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_49_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_50_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_51_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_52_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_53_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_54_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_55_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_56_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_57_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_58_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_59_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_60_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_61_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_62_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_63_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_64_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_65_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_66_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_67_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_68_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_69_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_70_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_71_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_72_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_73_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_74_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_75_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_76_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_77_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_78_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_79_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_80_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_81_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_82_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_83_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_85_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_86_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_87_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_89_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_91_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_92_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_93_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_95_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_97_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_104_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_106_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_107_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_108_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_109_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_110_1360426899.567' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_111_1360426899.567' 
    capture_lex $P5086 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_2_1360426899.567' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_3_1360426899.567' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_4_1360426899.567' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_5_1360426899.567' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_6_1360426899.567' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_8_1360426899.567' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_9_1360426899.567' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_10_1360426899.567' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_11_1360426899.567' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_12_1360426899.567' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_14_1360426899.567' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_18_1360426899.567' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_19_1360426899.567' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_20_1360426899.567' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_21_1360426899.567' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_22_1360426899.567' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_23_1360426899.567' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_26_1360426899.567' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_28_1360426899.567' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_29_1360426899.567' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_31_1360426899.567' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_32_1360426899.567' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_33_1360426899.567' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_34_1360426899.567' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_35_1360426899.567' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_39_1360426899.567' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_40_1360426899.567' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_42_1360426899.567' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_43_1360426899.567' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_44_1360426899.567' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_45_1360426899.567' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_46_1360426899.567' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_47_1360426899.567' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_48_1360426899.567' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_49_1360426899.567' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_50_1360426899.567' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_51_1360426899.567' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_52_1360426899.567' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_53_1360426899.567' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_54_1360426899.567' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_55_1360426899.567' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_56_1360426899.567' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_57_1360426899.567' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_58_1360426899.567' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_59_1360426899.567' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_60_1360426899.567' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_61_1360426899.567' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_62_1360426899.567' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_63_1360426899.567' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_64_1360426899.567' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_65_1360426899.567' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_66_1360426899.567' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_67_1360426899.567' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_68_1360426899.567' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_69_1360426899.567' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_70_1360426899.567' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_71_1360426899.567' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_72_1360426899.567' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_73_1360426899.567' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_74_1360426899.567' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_75_1360426899.567' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_76_1360426899.567' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_77_1360426899.567' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_78_1360426899.567' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_79_1360426899.567' 
    capture_lex $P5065
    .const 'Sub' $P5066 = 'cuid_80_1360426899.567' 
    capture_lex $P5066
    .const 'Sub' $P5067 = 'cuid_81_1360426899.567' 
    capture_lex $P5067
    .const 'Sub' $P5068 = 'cuid_82_1360426899.567' 
    capture_lex $P5068
    .const 'Sub' $P5069 = 'cuid_83_1360426899.567' 
    capture_lex $P5069
    .const 'Sub' $P5070 = 'cuid_85_1360426899.567' 
    capture_lex $P5070
    .const 'Sub' $P5071 = 'cuid_86_1360426899.567' 
    capture_lex $P5071
    .const 'Sub' $P5072 = 'cuid_87_1360426899.567' 
    capture_lex $P5072
    .const 'Sub' $P5073 = 'cuid_89_1360426899.567' 
    capture_lex $P5073
    .const 'Sub' $P5074 = 'cuid_91_1360426899.567' 
    capture_lex $P5074
    .const 'Sub' $P5075 = 'cuid_92_1360426899.567' 
    capture_lex $P5075
    .const 'Sub' $P5076 = 'cuid_93_1360426899.567' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_95_1360426899.567' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_97_1360426899.567' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_104_1360426899.567' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_106_1360426899.567' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_107_1360426899.567' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_108_1360426899.567' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_109_1360426899.567' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_110_1360426899.567' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_111_1360426899.567' 
    capture_lex $P5085
    .return ($P5085) 
.end
.HLL "nqp"
.namespace []
.sub "obs" :subid("cuid_2_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 46
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 :optional 
    .param int haz_param_1 :opt_flag 
    if haz_param_1, default23
    box $P5003, " in Perl 6"
    set _lex_param_3, $P5003
  default23:
    .lex "self", _lex_param_0 
    .lex "$old", _lex_param_1 
    .lex "$new", _lex_param_2 
    .lex "$when", _lex_param_3 
.annotate 'line', 47
    nqp_decontainerize $P5001, _lex_param_0
    set $S5006, _lex_param_1
    concat $S5005, "Unsupported use of ", $S5006
    concat $S5004, $S5005, ";"
    set $S5007, _lex_param_3
    concat $S5003, $S5004, $S5007
    concat $S5002, $S5003, " please use "
    set $S5008, _lex_param_2
    concat $S5001, $S5002, $S5008
    $P5002 = $P5001."panic"($S5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "throw_unrecognized_metachar" :subid("cuid_3_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 54
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$char", _lex_param_1 
.annotate 'line', 55
    nqp_decontainerize $P5001, _lex_param_0
    set $S5003, _lex_param_1
    concat $S5002, "Unrecognized regex metacharacter ", $S5003
    concat $S5001, $S5002, " (must be quoted to match literally)"
    $P5002 = $P5001."panic"($S5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "throw_null_pattern" :subid("cuid_4_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 58
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 59
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."panic"("Null regex not allowed")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "ws" :subid("cuid_5_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 62
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx12_tgt
    .local int rx12_pos
    .local int rx12_off
    .local int rx12_eos
    .local int rx12_rep
    .local pmc rx12_cur
    .local pmc rx12_curclass
    .local pmc rx12_bstack
    .local pmc rx12_cstack
    (rx12_cur, rx12_tgt, rx12_pos, rx12_curclass, rx12_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx12_cur
    length rx12_eos, rx12_tgt
    eq $I19, 1, rx12_restart26
    gt rx12_pos, rx12_eos, rx12_fail27
    repr_get_attr_int $I11, self, rx12_curclass, "$!from"
    ne $I11, -1, rxscan13_done33
    goto rxscan13_scan32
  rxscan13_loop31:
    inc rx12_pos
    gt rx12_pos, rx12_eos, rx12_fail27
    repr_bind_attr_int rx12_cur, rx12_curclass, "$!from", rx12_pos
  rxscan13_scan32:
    nqp_rxmark rx12_bstack, rxscan13_loop31, rx12_pos, 0
  rxscan13_done33:
    nqp_rxmark rx12_bstack, rxquantr14_done35, rx12_pos, 0
  rxquantr14_loop34:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt15_037
    nqp_push_label $P11, alt15_140
    nqp_rxmark rx12_bstack, alt15_end36, -1, 0
    rx12_cur."!alt"(rx12_pos, "alt_nfa__1_1360426899.713", $P11)
    goto rx12_fail27
  alt15_037:
    nqp_rxmark rx12_bstack, rxquantr16_done39, -1, 0
  rxquantr16_loop38:
    ge rx12_pos, rx12_eos, rx12_fail27
    is_cclass $I11, .CCLASS_WHITESPACE, rx12_tgt, rx12_pos
    unless $I11, rx12_fail27
    add rx12_pos, 1
    nqp_rxpeek $I19, rx12_bstack, rxquantr16_done39
    inc $I19
    inc $I19
    set rx12_rep, rx12_bstack[$I19]
    nqp_rxcommit rx12_bstack, rxquantr16_done39
    inc rx12_rep
    nqp_rxmark rx12_bstack, rxquantr16_done39, rx12_pos, rx12_rep
    goto rxquantr16_loop38
  rxquantr16_done39:
    goto alt15_end36
  alt15_140:
    add $I11, rx12_pos, 1
    gt $I11, rx12_eos, rx12_fail27
    substr $S10, rx12_tgt, rx12_pos, 1
    ne $S10, ucs4:"#", rx12_fail27
    add rx12_pos, 1
    nqp_rxmark rx12_bstack, rxquantr17_done42, rx12_pos, 0
  rxquantr17_loop41:
    ge rx12_pos, rx12_eos, rx12_fail27
    is_cclass $I11, .CCLASS_NEWLINE, rx12_tgt, rx12_pos
    if $I11, rx12_fail27
    add rx12_pos, 1
    nqp_rxpeek $I19, rx12_bstack, rxquantr17_done42
    inc $I19
    inc $I19
    set rx12_rep, rx12_bstack[$I19]
    nqp_rxcommit rx12_bstack, rxquantr17_done42
    inc rx12_rep
    nqp_rxmark rx12_bstack, rxquantr17_done42, rx12_pos, rx12_rep
    goto rxquantr17_loop41
  rxquantr17_done42:
    goto alt15_end36
  alt15_end36:
    nqp_rxpeek $I19, rx12_bstack, rxquantr14_done35
    inc $I19
    inc $I19
    set rx12_rep, rx12_bstack[$I19]
    nqp_rxcommit rx12_bstack, rxquantr14_done35
    inc rx12_rep
    nqp_rxmark rx12_bstack, rxquantr14_done35, rx12_pos, rx12_rep
    goto rxquantr14_loop34
  rxquantr14_done35:
    rx12_cur."!cursor_pass"(rx12_pos, "ws", 'backtrack'=>1)
    .return (rx12_cur)
  rx12_restart26:
    repr_get_attr_obj rx12_cstack, rx12_cur, rx12_curclass, "$!cstack"
  rx12_fail27:
    unless rx12_bstack, rx12_done25
    pop $I19, rx12_bstack
    if_null rx12_cstack, rx12_cstack_done30
    unless rx12_cstack, rx12_cstack_done30
    dec $I19
    set $P11, rx12_cstack[$I19]
  rx12_cstack_done30:
    pop rx12_rep, rx12_bstack
    pop rx12_pos, rx12_bstack
    pop $I19, rx12_bstack
    lt rx12_pos, -1, rx12_done25
    lt rx12_pos, 0, rx12_fail27
    eq $I19, 0, rx12_fail27
    nqp_islist $I20, rx12_cstack
    unless $I20, rx12_jump28
    elements $I18, rx12_bstack
    le $I18, 0, rx12_cut29
    dec $I18
    set $I18, rx12_bstack[$I18]
  rx12_cut29:
    assign rx12_cstack, $I18
  rx12_jump28:
    jump $I19
  rx12_done25:
    rx12_cur."!cursor_fail"()
    .return (rx12_cur) 
.end
.HLL "nqp"
.namespace []
.sub "normspace" :subid("cuid_6_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 64
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_7_1360426899.567' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx18_tgt
    .local int rx18_pos
    .local int rx18_off
    .local int rx18_eos
    .local int rx18_rep
    .local pmc rx18_cur
    .local pmc rx18_curclass
    .local pmc rx18_bstack
    .local pmc rx18_cstack
    (rx18_cur, rx18_tgt, rx18_pos, rx18_curclass, rx18_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx18_cur
    length rx18_eos, rx18_tgt
    eq $I19, 1, rx18_restart45
    gt rx18_pos, rx18_eos, rx18_fail46
    repr_get_attr_int $I11, self, rx18_curclass, "$!from"
    ne $I11, -1, rxscan19_done52
    goto rxscan19_scan51
  rxscan19_loop50:
    inc rx18_pos
    gt rx18_pos, rx18_eos, rx18_fail46
    repr_bind_attr_int rx18_cur, rx18_curclass, "$!from", rx18_pos
  rxscan19_scan51:
    nqp_rxmark rx18_bstack, rxscan19_loop50, rx18_pos, 0
  rxscan19_done52:
    .const 'Sub' $P5001 = 'cuid_7_1360426899.567' 
    capture_lex $P5001
    repr_bind_attr_int rx18_cur, rx18_curclass, "$!pos", rx18_pos
    $P11 = rx18_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx18_curclass, "$!pos"
    lt $I11, 0, rx18_fail46
    repr_bind_attr_int rx18_cur, rx18_curclass, "$!pos", rx18_pos
    $P11 = rx18_cur."ws"()
    repr_get_attr_int $I11, $P11, rx18_curclass, "$!pos"
    lt $I11, 0, rx18_fail46
    repr_get_attr_int rx18_pos, $P11, rx18_curclass, "$!pos"
    rx18_cur."!cursor_pass"(rx18_pos, "normspace", 'backtrack'=>1)
    .return (rx18_cur)
  rx18_restart45:
    repr_get_attr_obj rx18_cstack, rx18_cur, rx18_curclass, "$!cstack"
  rx18_fail46:
    unless rx18_bstack, rx18_done44
    pop $I19, rx18_bstack
    if_null rx18_cstack, rx18_cstack_done49
    unless rx18_cstack, rx18_cstack_done49
    dec $I19
    set $P11, rx18_cstack[$I19]
  rx18_cstack_done49:
    pop rx18_rep, rx18_bstack
    pop rx18_pos, rx18_bstack
    pop $I19, rx18_bstack
    lt rx18_pos, -1, rx18_done44
    lt rx18_pos, 0, rx18_fail46
    eq $I19, 0, rx18_fail46
    nqp_islist $I20, rx18_cstack
    unless $I20, rx18_jump47
    elements $I18, rx18_bstack
    le $I18, 0, rx18_cut48
    dec $I18
    set $I18, rx18_bstack[$I18]
  rx18_cut48:
    assign rx18_cstack, $I18
  rx18_jump47:
    jump $I19
  rx18_done44:
    rx18_cur."!cursor_fail"()
    .return (rx18_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_7_1360426899.567") :anon :lex :outer("cuid_6_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx20_tgt
    .local int rx20_pos
    .local int rx20_off
    .local int rx20_eos
    .local int rx20_rep
    .local pmc rx20_cur
    .local pmc rx20_curclass
    .local pmc rx20_bstack
    .local pmc rx20_cstack
    (rx20_cur, rx20_tgt, rx20_pos, rx20_curclass, rx20_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx20_cur
    length rx20_eos, rx20_tgt
    eq $I19, 1, rx20_restart55
    gt rx20_pos, rx20_eos, rx20_fail56
    repr_get_attr_int $I11, self, rx20_curclass, "$!from"
    ne $I11, -1, rxscan21_done62
    goto rxscan21_scan61
  rxscan21_loop60:
    inc rx20_pos
    gt rx20_pos, rx20_eos, rx20_fail56
    repr_bind_attr_int rx20_cur, rx20_curclass, "$!from", rx20_pos
  rxscan21_scan61:
    nqp_rxmark rx20_bstack, rxscan21_loop60, rx20_pos, 0
  rxscan21_done62:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt22_064
    nqp_push_label $P11, alt22_165
    nqp_rxmark rx20_bstack, alt22_end63, -1, 0
    rx20_cur."!alt"(rx20_pos, "alt_nfa__2_1360426899.719", $P11)
    goto rx20_fail56
  alt22_064:
    ge rx20_pos, rx20_eos, rx20_fail56
    is_cclass $I11, .CCLASS_WHITESPACE, rx20_tgt, rx20_pos
    unless $I11, rx20_fail56
    add rx20_pos, 1
    goto alt22_end63
  alt22_165:
    add $I11, rx20_pos, 1
    gt $I11, rx20_eos, rx20_fail56
    substr $S10, rx20_tgt, rx20_pos, 1
    ne $S10, ucs4:"#", rx20_fail56
    add rx20_pos, 1
    goto alt22_end63
  alt22_end63:
    rx20_cur."!cursor_pass"(rx20_pos, 'backtrack'=>1)
    .return (rx20_cur)
  rx20_restart55:
    repr_get_attr_obj rx20_cstack, rx20_cur, rx20_curclass, "$!cstack"
  rx20_fail56:
    unless rx20_bstack, rx20_done54
    pop $I19, rx20_bstack
    if_null rx20_cstack, rx20_cstack_done59
    unless rx20_cstack, rx20_cstack_done59
    dec $I19
    set $P11, rx20_cstack[$I19]
  rx20_cstack_done59:
    pop rx20_rep, rx20_bstack
    pop rx20_pos, rx20_bstack
    pop $I19, rx20_bstack
    lt rx20_pos, -1, rx20_done54
    lt rx20_pos, 0, rx20_fail56
    eq $I19, 0, rx20_fail56
    nqp_islist $I20, rx20_cstack
    unless $I20, rx20_jump57
    elements $I18, rx20_bstack
    le $I18, 0, rx20_cut58
    dec $I18
    set $I18, rx20_bstack[$I18]
  rx20_cut58:
    assign rx20_cstack, $I18
  rx20_jump57:
    jump $I19
  rx20_done54:
    rx20_cur."!cursor_fail"()
    .return (rx20_cur) 
.end
.HLL "nqp"
.namespace []
.sub "identifier" :subid("cuid_8_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 66
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx24_tgt
    .local int rx24_pos
    .local int rx24_off
    .local int rx24_eos
    .local int rx24_rep
    .local pmc rx24_cur
    .local pmc rx24_curclass
    .local pmc rx24_bstack
    .local pmc rx24_cstack
    (rx24_cur, rx24_tgt, rx24_pos, rx24_curclass, rx24_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx24_cur
    length rx24_eos, rx24_tgt
    eq $I19, 1, rx24_restart69
    gt rx24_pos, rx24_eos, rx24_fail70
    repr_get_attr_int $I11, self, rx24_curclass, "$!from"
    ne $I11, -1, rxscan25_done76
    goto rxscan25_scan75
  rxscan25_loop74:
    inc rx24_pos
    gt rx24_pos, rx24_eos, rx24_fail70
    repr_bind_attr_int rx24_cur, rx24_curclass, "$!from", rx24_pos
  rxscan25_scan75:
    nqp_rxmark rx24_bstack, rxscan25_loop74, rx24_pos, 0
  rxscan25_done76:
    repr_bind_attr_int rx24_cur, rx24_curclass, "$!pos", rx24_pos
    $P11 = rx24_cur."ident"()
    repr_get_attr_int $I11, $P11, rx24_curclass, "$!pos"
    lt $I11, 0, rx24_fail70
    repr_get_attr_int rx24_pos, $P11, rx24_curclass, "$!pos"
    nqp_rxmark rx24_bstack, rxquantr27_done79, rx24_pos, 0
  rxquantr27_loop78:
  alt28_081:
    nqp_rxmark rx24_bstack, alt28_182, rx24_pos, 0
    add $I11, rx24_pos, 1
    gt $I11, rx24_eos, rx24_fail70
    substr $S10, rx24_tgt, rx24_pos, 1
    ne $S10, ucs4:"-", rx24_fail70
    add rx24_pos, 1
    goto alt28_end80
  alt28_182:
    ge rx24_pos, rx24_eos, rx24_fail70
    substr $S11, rx24_tgt, rx24_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx24_fail70
    inc rx24_pos
  alt28_end80:
    repr_bind_attr_int rx24_cur, rx24_curclass, "$!pos", rx24_pos
    $P11 = rx24_cur."ident"()
    repr_get_attr_int $I11, $P11, rx24_curclass, "$!pos"
    lt $I11, 0, rx24_fail70
    repr_get_attr_int rx24_pos, $P11, rx24_curclass, "$!pos"
    nqp_rxpeek $I19, rx24_bstack, rxquantr27_done79
    inc $I19
    inc $I19
    set rx24_rep, rx24_bstack[$I19]
    nqp_rxcommit rx24_bstack, rxquantr27_done79
    inc rx24_rep
    nqp_rxmark rx24_bstack, rxquantr27_done79, rx24_pos, rx24_rep
    goto rxquantr27_loop78
  rxquantr27_done79:
    rx24_cur."!cursor_pass"(rx24_pos, "identifier", 'backtrack'=>1)
    .return (rx24_cur)
  rx24_restart69:
    repr_get_attr_obj rx24_cstack, rx24_cur, rx24_curclass, "$!cstack"
  rx24_fail70:
    unless rx24_bstack, rx24_done68
    pop $I19, rx24_bstack
    if_null rx24_cstack, rx24_cstack_done73
    unless rx24_cstack, rx24_cstack_done73
    dec $I19
    set $P11, rx24_cstack[$I19]
  rx24_cstack_done73:
    pop rx24_rep, rx24_bstack
    pop rx24_pos, rx24_bstack
    pop $I19, rx24_bstack
    lt rx24_pos, -1, rx24_done68
    lt rx24_pos, 0, rx24_fail70
    eq $I19, 0, rx24_fail70
    nqp_islist $I20, rx24_cstack
    unless $I20, rx24_jump71
    elements $I18, rx24_bstack
    le $I18, 0, rx24_cut72
    dec $I18
    set $I18, rx24_bstack[$I18]
  rx24_cut72:
    assign rx24_cstack, $I18
  rx24_jump71:
    jump $I19
  rx24_done68:
    rx24_cur."!cursor_fail"()
    .return (rx24_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_9_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 68
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx30_tgt
    .local int rx30_pos
    .local int rx30_off
    .local int rx30_eos
    .local int rx30_rep
    .local pmc rx30_cur
    .local pmc rx30_curclass
    .local pmc rx30_bstack
    .local pmc rx30_cstack
    (rx30_cur, rx30_tgt, rx30_pos, rx30_curclass, rx30_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx30_cur
    length rx30_eos, rx30_tgt
    eq $I19, 1, rx30_restart86
    gt rx30_pos, rx30_eos, rx30_fail87
    repr_get_attr_int $I11, self, rx30_curclass, "$!from"
    ne $I11, -1, rxscan31_done93
    goto rxscan31_scan92
  rxscan31_loop91:
    inc rx30_pos
    gt rx30_pos, rx30_eos, rx30_fail87
    repr_bind_attr_int rx30_cur, rx30_curclass, "$!from", rx30_pos
  rxscan31_scan92:
    nqp_rxmark rx30_bstack, rxscan31_loop91, rx30_pos, 0
  rxscan31_done93:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt32_095
    nqp_push_label $P11, alt32_197
    nqp_push_label $P11, alt32_299
    nqp_rxmark rx30_bstack, alt32_end94, -1, 0
    rx30_cur."!alt"(rx30_pos, "alt_nfa__3_1360426899.742", $P11)
    goto rx30_fail87
  alt32_095:
    ge rx30_pos, rx30_eos, rx30_fail87
    substr $S11, rx30_tgt, rx30_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx30_fail87
    repr_bind_attr_int rx30_cur, rx30_curclass, "$!pos", rx30_pos
    $P11 = rx30_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx30_curclass, "$!pos"
    lt $I11, 0, rx30_fail87
    nqp_rxmark rx30_bstack, rxsubrule33_pass96, -1, 0
  rxsubrule33_pass96:
    rx30_cstack = rx30_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx30_pos, $P11, rx30_curclass, "$!pos"
    goto alt32_end94
  alt32_197:
    ge rx30_pos, rx30_eos, rx30_fail87
    substr $S11, rx30_tgt, rx30_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx30_fail87
    repr_bind_attr_int rx30_cur, rx30_curclass, "$!pos", rx30_pos
    $P11 = rx30_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx30_curclass, "$!pos"
    lt $I11, 0, rx30_fail87
    nqp_rxmark rx30_bstack, rxsubrule34_pass98, -1, 0
  rxsubrule34_pass98:
    rx30_cstack = rx30_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx30_pos, $P11, rx30_curclass, "$!pos"
    goto alt32_end94
  alt32_299:
    nqp_rxmark rx30_bstack, rxcap35_fail101, rx30_pos, 0
    nqp_rxmark rx30_bstack, rxquantr36_done103, -1, 0
  rxquantr36_loop102:
    ge rx30_pos, rx30_eos, rx30_fail87
    is_cclass $I11, .CCLASS_NUMERIC, rx30_tgt, rx30_pos
    unless $I11, rx30_fail87
    add rx30_pos, 1
    nqp_rxpeek $I19, rx30_bstack, rxquantr36_done103
    inc $I19
    inc $I19
    set rx30_rep, rx30_bstack[$I19]
    nqp_rxcommit rx30_bstack, rxquantr36_done103
    inc rx30_rep
    nqp_rxmark rx30_bstack, rxquantr36_done103, rx30_pos, rx30_rep
    goto rxquantr36_loop102
  rxquantr36_done103:
    nqp_rxpeek $I19, rx30_bstack, rxcap35_fail101
    inc $I19
    set $I11, rx30_bstack[$I19]
    repr_bind_attr_int rx30_cur, rx30_curclass, "$!pos", rx30_pos
    $P11 = rx30_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx30_pos)
    rx30_cstack = rx30_cur."!cursor_capture"($P11, "val")
    goto rxcap35_done100
  rxcap35_fail101:
    goto rx30_fail87
  rxcap35_done100:
    goto alt32_end94
  alt32_end94:
    nqp_rxcommit rx30_bstack, alt32_end94
    rx30_cur."!cursor_pass"(rx30_pos, "arg", 'backtrack'=>1)
    .return (rx30_cur)
  rx30_restart86:
    repr_get_attr_obj rx30_cstack, rx30_cur, rx30_curclass, "$!cstack"
  rx30_fail87:
    unless rx30_bstack, rx30_done85
    pop $I19, rx30_bstack
    if_null rx30_cstack, rx30_cstack_done90
    unless rx30_cstack, rx30_cstack_done90
    dec $I19
    set $P11, rx30_cstack[$I19]
  rx30_cstack_done90:
    pop rx30_rep, rx30_bstack
    pop rx30_pos, rx30_bstack
    pop $I19, rx30_bstack
    lt rx30_pos, -1, rx30_done85
    lt rx30_pos, 0, rx30_fail87
    eq $I19, 0, rx30_fail87
    nqp_islist $I20, rx30_cstack
    unless $I20, rx30_jump88
    elements $I18, rx30_bstack
    le $I18, 0, rx30_cut89
    dec $I18
    set $I18, rx30_bstack[$I18]
  rx30_cut89:
    assign rx30_cstack, $I18
  rx30_jump88:
    jump $I19
  rx30_done85:
    rx30_cur."!cursor_fail"()
    .return (rx30_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_10_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 76
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx37_tgt
    .local int rx37_pos
    .local int rx37_off
    .local int rx37_eos
    .local int rx37_rep
    .local pmc rx37_cur
    .local pmc rx37_curclass
    .local pmc rx37_bstack
    .local pmc rx37_cstack
    (rx37_cur, rx37_tgt, rx37_pos, rx37_curclass, rx37_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx37_cur
    length rx37_eos, rx37_tgt
    eq $I19, 1, rx37_restart106
    gt rx37_pos, rx37_eos, rx37_fail107
    repr_get_attr_int $I11, self, rx37_curclass, "$!from"
    ne $I11, -1, rxscan38_done113
    goto rxscan38_scan112
  rxscan38_loop111:
    inc rx37_pos
    gt rx37_pos, rx37_eos, rx37_fail107
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!from", rx37_pos
  rxscan38_scan112:
    nqp_rxmark rx37_bstack, rxscan38_loop111, rx37_pos, 0
  rxscan38_done113:
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."ws"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail107
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."arg"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail107
    nqp_rxmark rx37_bstack, rxsubrule40_pass115, -1, 0
  rxsubrule40_pass115:
    rx37_cstack = rx37_cur."!cursor_capture"($P11, "arg")
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."ws"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail107
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    nqp_rxmark rx37_bstack, rxquantr42_done118, rx37_pos, 0
  rxquantr42_loop117:
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."ws"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail107
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    add $I11, rx37_pos, 1
    gt $I11, rx37_eos, rx37_fail107
    substr $S10, rx37_tgt, rx37_pos, 1
    ne $S10, ucs4:",", rx37_fail107
    add rx37_pos, 1
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."ws"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail107
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."arg"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail107
    nqp_rxmark rx37_bstack, rxsubrule45_pass121, -1, 0
  rxsubrule45_pass121:
    rx37_cstack = rx37_cur."!cursor_capture"($P11, "arg")
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    nqp_rxpeek $I19, rx37_bstack, rxquantr42_done118
    inc $I19
    inc $I19
    set rx37_rep, rx37_bstack[$I19]
    nqp_rxcommit rx37_bstack, rxquantr42_done118
    inc rx37_rep
    nqp_rxmark rx37_bstack, rxquantr42_done118, rx37_pos, rx37_rep
    goto rxquantr42_loop117
  rxquantr42_done118:
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."ws"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail107
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    rx37_cur."!cursor_pass"(rx37_pos, "arglist", 'backtrack'=>1)
    .return (rx37_cur)
  rx37_restart106:
    repr_get_attr_obj rx37_cstack, rx37_cur, rx37_curclass, "$!cstack"
  rx37_fail107:
    unless rx37_bstack, rx37_done105
    pop $I19, rx37_bstack
    if_null rx37_cstack, rx37_cstack_done110
    unless rx37_cstack, rx37_cstack_done110
    dec $I19
    set $P11, rx37_cstack[$I19]
  rx37_cstack_done110:
    pop rx37_rep, rx37_bstack
    pop rx37_pos, rx37_bstack
    pop $I19, rx37_bstack
    lt rx37_pos, -1, rx37_done105
    lt rx37_pos, 0, rx37_fail107
    eq $I19, 0, rx37_fail107
    nqp_islist $I20, rx37_cstack
    unless $I20, rx37_jump108
    elements $I18, rx37_bstack
    le $I18, 0, rx37_cut109
    dec $I18
    set $I18, rx37_bstack[$I18]
  rx37_cut109:
    assign rx37_cstack, $I18
  rx37_jump108:
    jump $I19
  rx37_done105:
    rx37_cur."!cursor_fail"()
    .return (rx37_cur) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_11_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 78
    .param pmc _lex_param_0 
    .lex "%*RX", $P101 
    .lex "$*W", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx47_tgt
    .local int rx47_pos
    .local int rx47_off
    .local int rx47_eos
    .local int rx47_rep
    .local pmc rx47_cur
    .local pmc rx47_curclass
    .local pmc rx47_bstack
    .local pmc rx47_cstack
    (rx47_cur, rx47_tgt, rx47_pos, rx47_curclass, rx47_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx47_cur
    length rx47_eos, rx47_tgt
    eq $I19, 1, rx47_restart125
    gt rx47_pos, rx47_eos, rx47_fail126
    repr_get_attr_int $I11, self, rx47_curclass, "$!from"
    ne $I11, -1, rxscan48_done132
    goto rxscan48_scan131
  rxscan48_loop130:
    inc rx47_pos
    gt rx47_pos, rx47_eos, rx47_fail126
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!from", rx47_pos
  rxscan48_scan131:
    nqp_rxmark rx47_bstack, rxscan48_loop130, rx47_pos, 0
  rxscan48_done132:
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!pos", rx47_pos
    store_lex unicode:"$\x{a2}", rx47_cur
    unless_null $P101, fallback133
    nqp_get_sc_object $P5005, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["%RX"]
    unless_null $P5003, fallback134
    nqp_get_sc_object $P5007, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5006, $P5007
    new $P5008, 'Hash'
    set $P5006["%RX"], $P5008
    set $P5003, $P5008
  fallback134:
    unless_null $P5003, vivi_49135
    die "Contextual %*RX not found"
    box $P5009, "Contextual %*RX not found"
    set $P5003, $P5009
  vivi_49135:
    set $P101, $P5003
  fallback133:
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!pos", rx47_pos
    store_lex unicode:"$\x{a2}", rx47_cur
.annotate 'line', 80
    nqp_get_sc_object $P5014, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5013, $P5014, "QRegex"
    nqp_get_package_through_who $P5012, $P5013, "P6Regex"
    get_who $P5011, $P5012
    set $P5010, $P5011["World"]
    unless_null $P5010, fallback136
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5015
  fallback136:
    nqp_decontainerize $P5016, _lex_param_0
    $P5017 = $P5016."target"()
    set $S5002, $P5017
    nqp_sha1 $S5001, $S5002
    $P5018 = $P5010."new"($S5001 :named("handle"))
    set $P102, $P5018
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!pos", rx47_pos
    $P11 = rx47_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx47_curclass, "$!pos"
    lt $I11, 0, rx47_fail126
    nqp_rxmark rx47_bstack, rxsubrule50_pass137, -1, 0
  rxsubrule50_pass137:
    rx47_cstack = rx47_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx47_pos, $P11, rx47_curclass, "$!pos"
  alt51_0139:
    nqp_rxmark rx47_bstack, alt51_1141, rx47_pos, 0
    lt rx47_pos, rx47_eos, rx47_fail126
    goto alt51_end138
  alt51_1141:
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!pos", rx47_pos
    $P11 = rx47_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx47_curclass, "$!pos"
    lt $I11, 0, rx47_fail126
    repr_get_attr_int rx47_pos, $P11, rx47_curclass, "$!pos"
  alt51_end138:
    rx47_cur."!cursor_pass"(rx47_pos, "TOP", 'backtrack'=>1)
    .return (rx47_cur)
  rx47_restart125:
    repr_get_attr_obj rx47_cstack, rx47_cur, rx47_curclass, "$!cstack"
  rx47_fail126:
    unless rx47_bstack, rx47_done124
    pop $I19, rx47_bstack
    if_null rx47_cstack, rx47_cstack_done129
    unless rx47_cstack, rx47_cstack_done129
    dec $I19
    set $P11, rx47_cstack[$I19]
  rx47_cstack_done129:
    pop rx47_rep, rx47_bstack
    pop rx47_pos, rx47_bstack
    pop $I19, rx47_bstack
    lt rx47_pos, -1, rx47_done124
    lt rx47_pos, 0, rx47_fail126
    eq $I19, 0, rx47_fail126
    nqp_islist $I20, rx47_cstack
    unless $I20, rx47_jump127
    elements $I18, rx47_bstack
    le $I18, 0, rx47_cut128
    dec $I18
    set $I18, rx47_bstack[$I18]
  rx47_cut128:
    assign rx47_cstack, $I18
  rx47_jump127:
    jump $I19
  rx47_done124:
    rx47_cur."!cursor_fail"()
    .return (rx47_cur) 
.end
.HLL "nqp"
.namespace []
.sub "nibbler" :subid("cuid_12_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 85
    .param pmc _lex_param_0 
    .const 'Sub' $P5018 = 'cuid_182_1360426899.567' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_13_1360426899.567' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_183_1360426899.567' 
    capture_lex $P5018 
    .lex "$OLDRX", $P101 
    .lex "%*RX", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx54_tgt
    .local int rx54_pos
    .local int rx54_off
    .local int rx54_eos
    .local int rx54_rep
    .local pmc rx54_cur
    .local pmc rx54_curclass
    .local pmc rx54_bstack
    .local pmc rx54_cstack
    (rx54_cur, rx54_tgt, rx54_pos, rx54_curclass, rx54_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx54_cur
    length rx54_eos, rx54_tgt
    eq $I19, 1, rx54_restart145
    gt rx54_pos, rx54_eos, rx54_fail146
    repr_get_attr_int $I11, self, rx54_curclass, "$!from"
    ne $I11, -1, rxscan55_done152
    goto rxscan55_scan151
  rxscan55_loop150:
    inc rx54_pos
    gt rx54_pos, rx54_eos, rx54_fail146
    repr_bind_attr_int rx54_cur, rx54_curclass, "$!from", rx54_pos
  rxscan55_scan151:
    nqp_rxmark rx54_bstack, rxscan55_loop150, rx54_pos, 0
  rxscan55_done152:
    repr_bind_attr_int rx54_cur, rx54_curclass, "$!pos", rx54_pos
    store_lex unicode:"$\x{a2}", rx54_cur
    find_dynamic_lex $P5003, "%*RX"
    set $P101, $P5003
    repr_bind_attr_int rx54_cur, rx54_curclass, "$!pos", rx54_pos
    store_lex unicode:"$\x{a2}", rx54_cur
    unless_null $P102, fallback153
    nqp_get_sc_object $P5006, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%RX"]
    unless_null $P5004, fallback154
    nqp_get_sc_object $P5008, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%RX"], $P5009
    set $P5004, $P5009
  fallback154:
    unless_null $P5004, vivi_56155
    die "Contextual %*RX not found"
    box $P5010, "Contextual %*RX not found"
    set $P5004, $P5010
  vivi_56155:
    set $P102, $P5004
  fallback153:
    repr_bind_attr_int rx54_cur, rx54_curclass, "$!pos", rx54_pos
    store_lex unicode:"$\x{a2}", rx54_cur
    $P5011 = $P103."MATCH"()
    set $P104, $P5011
    .const 'Sub' $P5012 = 'cuid_182_1360426899.567' 
    capture_lex $P5012
    $P5013 = $P5012()
    nqp_rxmark rx54_bstack, rxquantr58_done163, rx54_pos, 0
  rxquantr58_loop162:
    repr_bind_attr_int rx54_cur, rx54_curclass, "$!pos", rx54_pos
    $P11 = rx54_cur."ws"()
    repr_get_attr_int $I11, $P11, rx54_curclass, "$!pos"
    lt $I11, 0, rx54_fail146
    repr_get_attr_int rx54_pos, $P11, rx54_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt60_0166
    nqp_push_label $P11, alt60_1167
    nqp_push_label $P11, alt60_2168
    nqp_push_label $P11, alt60_3169
    nqp_rxmark rx54_bstack, alt60_end165, -1, 0
    rx54_cur."!alt"(rx54_pos, "alt_nfa__4_1360426899.803", $P11)
    goto rx54_fail146
  alt60_0166:
    add $I11, rx54_pos, 2
    gt $I11, rx54_eos, rx54_fail146
    substr $S10, rx54_tgt, rx54_pos, 2
    ne $S10, ucs4:"||", rx54_fail146
    add rx54_pos, 2
    goto alt60_end165
  alt60_1167:
    add $I11, rx54_pos, 1
    gt $I11, rx54_eos, rx54_fail146
    substr $S10, rx54_tgt, rx54_pos, 1
    ne $S10, ucs4:"|", rx54_fail146
    add rx54_pos, 1
    goto alt60_end165
  alt60_2168:
    add $I11, rx54_pos, 2
    gt $I11, rx54_eos, rx54_fail146
    substr $S10, rx54_tgt, rx54_pos, 2
    ne $S10, ucs4:"&&", rx54_fail146
    add rx54_pos, 2
    goto alt60_end165
  alt60_3169:
    add $I11, rx54_pos, 1
    gt $I11, rx54_eos, rx54_fail146
    substr $S10, rx54_tgt, rx54_pos, 1
    ne $S10, ucs4:"&", rx54_fail146
    add rx54_pos, 1
    goto alt60_end165
  alt60_end165:
    nqp_rxcommit rx54_bstack, alt60_end165
    nqp_rxpeek $I19, rx54_bstack, rxquantr58_done163
    inc $I19
    inc $I19
    set rx54_rep, rx54_bstack[$I19]
    nqp_rxcommit rx54_bstack, rxquantr58_done163
    inc rx54_rep
  rxquantr58_done163:
    repr_bind_attr_int rx54_cur, rx54_curclass, "$!pos", rx54_pos
    $P11 = rx54_cur."termaltseq"()
    repr_get_attr_int $I11, $P11, rx54_curclass, "$!pos"
    lt $I11, 0, rx54_fail146
    nqp_rxmark rx54_bstack, rxsubrule61_pass170, -1, 0
  rxsubrule61_pass170:
    rx54_cstack = rx54_cur."!cursor_capture"($P11, "termaltseq")
    repr_get_attr_int rx54_pos, $P11, rx54_curclass, "$!pos"
    repr_bind_attr_int rx54_cur, rx54_curclass, "$!pos", rx54_pos
    $P11 = rx54_cur."ws"()
    repr_get_attr_int $I11, $P11, rx54_curclass, "$!pos"
    lt $I11, 0, rx54_fail146
    repr_get_attr_int rx54_pos, $P11, rx54_curclass, "$!pos"
  alt63_0173:
    nqp_rxmark rx54_bstack, alt63_1174, rx54_pos, 0
    repr_bind_attr_int rx54_cur, rx54_curclass, "$!pos", rx54_pos
    $P11 = rx54_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx54_curclass, "$!pos"
    lt $I11, 0, rx54_fail146
    goto alt63_end172
  alt63_1174:
    nqp_rxmark rx54_bstack, alt63_2177, rx54_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx54_tgt, rx54_pos
    if $I11, rxanchor64_done175
    ne rx54_pos, rx54_eos, rx54_fail146
    eq rx54_pos, 0, rxanchor64_done175
    sub $I11, rx54_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx54_tgt, $I11
    if $I11, rx54_fail146
  rxanchor64_done175:
    repr_bind_attr_int rx54_cur, rx54_curclass, "$!pos", rx54_pos
    $P11 = rx54_cur."panic"("Regex not terminated")
    repr_get_attr_int $I11, $P11, rx54_curclass, "$!pos"
    lt $I11, 0, rx54_fail146
    repr_get_attr_int rx54_pos, $P11, rx54_curclass, "$!pos"
    goto alt63_end172
  alt63_2177:
    nqp_rxmark rx54_bstack, alt63_3190, rx54_pos, 0
    .const 'Sub' $P5014 = 'cuid_13_1360426899.567' 
    capture_lex $P5014
    repr_bind_attr_int rx54_cur, rx54_curclass, "$!pos", rx54_pos
    $P11 = rx54_cur.$P5014()
    repr_get_attr_int $I11, $P11, rx54_curclass, "$!pos"
    lt $I11, 0, rx54_fail146
    nqp_rxmark rx54_bstack, rxsubrule68_pass188, -1, 0
  rxsubrule68_pass188:
    rx54_cstack = rx54_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx54_pos, $P11, rx54_curclass, "$!pos"
    repr_bind_attr_int rx54_cur, rx54_curclass, "$!pos", rx54_pos
    store_lex unicode:"$\x{a2}", rx54_cur
    $P5015 = $P103."MATCH"()
    set $P104, $P5015
    .const 'Sub' $P5016 = 'cuid_183_1360426899.567' 
    capture_lex $P5016
    $P5017 = $P5016()
    goto alt63_end172
  alt63_3190:
    repr_bind_attr_int rx54_cur, rx54_curclass, "$!pos", rx54_pos
    $P11 = rx54_cur."panic"("Regex not terminated")
    repr_get_attr_int $I11, $P11, rx54_curclass, "$!pos"
    lt $I11, 0, rx54_fail146
    repr_get_attr_int rx54_pos, $P11, rx54_curclass, "$!pos"
  alt63_end172:
    rx54_cur."!cursor_pass"(rx54_pos, "nibbler", 'backtrack'=>1)
    .return (rx54_cur)
  rx54_restart145:
    repr_get_attr_obj rx54_cstack, rx54_cur, rx54_curclass, "$!cstack"
  rx54_fail146:
    unless rx54_bstack, rx54_done144
    pop $I19, rx54_bstack
    if_null rx54_cstack, rx54_cstack_done149
    unless rx54_cstack, rx54_cstack_done149
    dec $I19
    set $P11, rx54_cstack[$I19]
  rx54_cstack_done149:
    pop rx54_rep, rx54_bstack
    pop rx54_pos, rx54_bstack
    pop $I19, rx54_bstack
    lt rx54_pos, -1, rx54_done144
    lt rx54_pos, 0, rx54_fail146
    eq $I19, 0, rx54_fail146
    nqp_islist $I20, rx54_cstack
    unless $I20, rx54_jump147
    elements $I18, rx54_bstack
    le $I18, 0, rx54_cut148
    dec $I18
    set $I18, rx54_bstack[$I18]
  rx54_cut148:
    assign rx54_cstack, $I18
  rx54_jump147:
    jump $I19
  rx54_done144:
    rx54_cur."!cursor_fail"()
    .return (rx54_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_182_1360426899.567") :anon :lex :outer("cuid_12_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 88
    .const 'Sub' $P5007 = 'cuid_181_1360426899.567' 
    capture_lex $P5007 
    find_lex $P5004, "$OLDRX"
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next159:
    unless $P5003, for_done161
    shift $P5006, $P5003
  for_redo160:
    .const 'Sub' $P5005 = 'cuid_181_1360426899.567' 
    capture_lex $P5005
    $P5001 = $P5005($P5006)
    goto for_next159
  for_done161:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_181_1360426899.567") :anon :lex :outer("cuid_182_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 89
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_dynamic_lex $P5001, "%*RX"
    unless_null $P5001, fallback156
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback157
    nqp_get_sc_object $P5006, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback157:
    unless_null $P5002, vivi_57158
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_57158:
    set $P5001, $P5002
  fallback156:
    $P5009 = _lex_param_0."key"()
    set $S5001, $P5009
    $P5010 = _lex_param_0."value"()
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_13_1360426899.567") :anon :lex :outer("cuid_12_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx66_tgt
    .local int rx66_pos
    .local int rx66_off
    .local int rx66_eos
    .local int rx66_rep
    .local pmc rx66_cur
    .local pmc rx66_curclass
    .local pmc rx66_bstack
    .local pmc rx66_cstack
    (rx66_cur, rx66_tgt, rx66_pos, rx66_curclass, rx66_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx66_cur
    length rx66_eos, rx66_tgt
    eq $I19, 1, rx66_restart180
    gt rx66_pos, rx66_eos, rx66_fail181
    repr_get_attr_int $I11, self, rx66_curclass, "$!from"
    ne $I11, -1, rxscan67_done187
    goto rxscan67_scan186
  rxscan67_loop185:
    inc rx66_pos
    gt rx66_pos, rx66_eos, rx66_fail181
    repr_bind_attr_int rx66_cur, rx66_curclass, "$!from", rx66_pos
  rxscan67_scan186:
    nqp_rxmark rx66_bstack, rxscan67_loop185, rx66_pos, 0
  rxscan67_done187:
    ge rx66_pos, rx66_eos, rx66_fail181
    is_cclass $I11, .CCLASS_WORD, rx66_tgt, rx66_pos
    if $I11, rx66_fail181
    add rx66_pos, 1
    rx66_cur."!cursor_pass"(rx66_pos, 'backtrack'=>1)
    .return (rx66_cur)
  rx66_restart180:
    repr_get_attr_obj rx66_cstack, rx66_cur, rx66_curclass, "$!cstack"
  rx66_fail181:
    unless rx66_bstack, rx66_done179
    pop $I19, rx66_bstack
    if_null rx66_cstack, rx66_cstack_done184
    unless rx66_cstack, rx66_cstack_done184
    dec $I19
    set $P11, rx66_cstack[$I19]
  rx66_cstack_done184:
    pop rx66_rep, rx66_bstack
    pop rx66_pos, rx66_bstack
    pop $I19, rx66_bstack
    lt rx66_pos, -1, rx66_done179
    lt rx66_pos, 0, rx66_fail181
    eq $I19, 0, rx66_fail181
    nqp_islist $I20, rx66_cstack
    unless $I20, rx66_jump182
    elements $I18, rx66_bstack
    le $I18, 0, rx66_cut183
    dec $I18
    set $I18, rx66_bstack[$I18]
  rx66_cut183:
    assign rx66_cstack, $I18
  rx66_jump182:
    jump $I19
  rx66_done179:
    rx66_cur."!cursor_fail"()
    .return (rx66_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_183_1360426899.567") :anon :lex :outer("cuid_12_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 96

    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5004, "$/"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback189
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5005
  fallback189:
    set $S5001, $P5003
    $P5006 = $P5001."throw_unrecognized_metachar"($S5001)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "infixstopper" :subid("cuid_14_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 101
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_15_1360426899.567' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_16_1360426899.567' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_17_1360426899.567' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx70_tgt
    .local int rx70_pos
    .local int rx70_off
    .local int rx70_eos
    .local int rx70_rep
    .local pmc rx70_cur
    .local pmc rx70_curclass
    .local pmc rx70_bstack
    .local pmc rx70_cstack
    (rx70_cur, rx70_tgt, rx70_pos, rx70_curclass, rx70_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx70_cur
    length rx70_eos, rx70_tgt
    eq $I19, 1, rx70_restart194
    gt rx70_pos, rx70_eos, rx70_fail195
    repr_get_attr_int $I11, self, rx70_curclass, "$!from"
    ne $I11, -1, rxscan71_done201
    goto rxscan71_scan200
  rxscan71_loop199:
    inc rx70_pos
    gt rx70_pos, rx70_eos, rx70_fail195
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!from", rx70_pos
  rxscan71_scan200:
    nqp_rxmark rx70_bstack, rxscan71_loop199, rx70_pos, 0
  rxscan71_done201:
    rx70_cur."!dba"(rx70_pos, "infix stopper")
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt72_0203
    nqp_push_label $P11, alt72_1218
    nqp_push_label $P11, alt72_2229
    nqp_rxmark rx70_bstack, alt72_end202, -1, 0
    rx70_cur."!alt"(rx70_pos, "alt_nfa__5_1360426899.819", $P11)
    goto rx70_fail195
  alt72_0203:
    .const 'Sub' $P5001 = 'cuid_15_1360426899.567' 
    capture_lex $P5001
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!pos", rx70_pos
    $P11 = rx70_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx70_curclass, "$!pos"
    lt $I11, 0, rx70_fail195
    goto alt72_end202
  alt72_1218:
    .const 'Sub' $P5002 = 'cuid_16_1360426899.567' 
    capture_lex $P5002
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!pos", rx70_pos
    $P11 = rx70_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx70_curclass, "$!pos"
    lt $I11, 0, rx70_fail195
    goto alt72_end202
  alt72_2229:
    .const 'Sub' $P5003 = 'cuid_17_1360426899.567' 
    capture_lex $P5003
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!pos", rx70_pos
    $P11 = rx70_cur."before"($P5003)
    repr_get_attr_int $I11, $P11, rx70_curclass, "$!pos"
    lt $I11, 0, rx70_fail195
    goto alt72_end202
  alt72_end202:
    rx70_cur."!cursor_pass"(rx70_pos, "infixstopper", 'backtrack'=>1)
    .return (rx70_cur)
  rx70_restart194:
    repr_get_attr_obj rx70_cstack, rx70_cur, rx70_curclass, "$!cstack"
  rx70_fail195:
    unless rx70_bstack, rx70_done193
    pop $I19, rx70_bstack
    if_null rx70_cstack, rx70_cstack_done198
    unless rx70_cstack, rx70_cstack_done198
    dec $I19
    set $P11, rx70_cstack[$I19]
  rx70_cstack_done198:
    pop rx70_rep, rx70_bstack
    pop rx70_pos, rx70_bstack
    pop $I19, rx70_bstack
    lt rx70_pos, -1, rx70_done193
    lt rx70_pos, 0, rx70_fail195
    eq $I19, 0, rx70_fail195
    nqp_islist $I20, rx70_cstack
    unless $I20, rx70_jump196
    elements $I18, rx70_bstack
    le $I18, 0, rx70_cut197
    dec $I18
    set $I18, rx70_bstack[$I18]
  rx70_cut197:
    assign rx70_cstack, $I18
  rx70_jump196:
    jump $I19
  rx70_done193:
    rx70_cur."!cursor_fail"()
    .return (rx70_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_15_1360426899.567") :anon :lex :outer("cuid_14_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx73_tgt
    .local int rx73_pos
    .local int rx73_off
    .local int rx73_eos
    .local int rx73_rep
    .local pmc rx73_cur
    .local pmc rx73_curclass
    .local pmc rx73_bstack
    .local pmc rx73_cstack
    (rx73_cur, rx73_tgt, rx73_pos, rx73_curclass, rx73_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx73_cur
    length rx73_eos, rx73_tgt
    eq $I19, 1, rx73_restart206
    gt rx73_pos, rx73_eos, rx73_fail207
    repr_get_attr_int $I11, self, rx73_curclass, "$!from"
    ne $I11, -1, rxscan74_done213
    goto rxscan74_scan212
  rxscan74_loop211:
    inc rx73_pos
    gt rx73_pos, rx73_eos, rx73_fail207
    repr_bind_attr_int rx73_cur, rx73_curclass, "$!from", rx73_pos
  rxscan74_scan212:
    nqp_rxmark rx73_bstack, rxscan74_loop211, rx73_pos, 0
  rxscan74_done213:
  alt75_0215:
    nqp_rxmark rx73_bstack, alt75_1216, rx73_pos, 0
    add $I11, rx73_pos, 1
    gt $I11, rx73_eos, rx73_fail207
    substr $S10, rx73_tgt, rx73_pos, 1
    ne $S10, ucs4:")", rx73_fail207
    add rx73_pos, 1
    goto alt75_end214
  alt75_1216:
    nqp_rxmark rx73_bstack, alt75_2217, rx73_pos, 0
    add $I11, rx73_pos, 1
    gt $I11, rx73_eos, rx73_fail207
    substr $S10, rx73_tgt, rx73_pos, 1
    ne $S10, ucs4:"}", rx73_fail207
    add rx73_pos, 1
    goto alt75_end214
  alt75_2217:
    add $I11, rx73_pos, 1
    gt $I11, rx73_eos, rx73_fail207
    substr $S10, rx73_tgt, rx73_pos, 1
    ne $S10, ucs4:"]", rx73_fail207
    add rx73_pos, 1
  alt75_end214:
    rx73_cur."!cursor_pass"(rx73_pos, 'backtrack'=>1)
    .return (rx73_cur)
  rx73_restart206:
    repr_get_attr_obj rx73_cstack, rx73_cur, rx73_curclass, "$!cstack"
  rx73_fail207:
    unless rx73_bstack, rx73_done205
    pop $I19, rx73_bstack
    if_null rx73_cstack, rx73_cstack_done210
    unless rx73_cstack, rx73_cstack_done210
    dec $I19
    set $P11, rx73_cstack[$I19]
  rx73_cstack_done210:
    pop rx73_rep, rx73_bstack
    pop rx73_pos, rx73_bstack
    pop $I19, rx73_bstack
    lt rx73_pos, -1, rx73_done205
    lt rx73_pos, 0, rx73_fail207
    eq $I19, 0, rx73_fail207
    nqp_islist $I20, rx73_cstack
    unless $I20, rx73_jump208
    elements $I18, rx73_bstack
    le $I18, 0, rx73_cut209
    dec $I18
    set $I18, rx73_bstack[$I18]
  rx73_cut209:
    assign rx73_cstack, $I18
  rx73_jump208:
    jump $I19
  rx73_done205:
    rx73_cur."!cursor_fail"()
    .return (rx73_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_16_1360426899.567") :anon :lex :outer("cuid_14_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx76_tgt
    .local int rx76_pos
    .local int rx76_off
    .local int rx76_eos
    .local int rx76_rep
    .local pmc rx76_cur
    .local pmc rx76_curclass
    .local pmc rx76_bstack
    .local pmc rx76_cstack
    (rx76_cur, rx76_tgt, rx76_pos, rx76_curclass, rx76_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx76_cur
    length rx76_eos, rx76_tgt
    eq $I19, 1, rx76_restart221
    gt rx76_pos, rx76_eos, rx76_fail222
    repr_get_attr_int $I11, self, rx76_curclass, "$!from"
    ne $I11, -1, rxscan77_done228
    goto rxscan77_scan227
  rxscan77_loop226:
    inc rx76_pos
    gt rx76_pos, rx76_eos, rx76_fail222
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!from", rx76_pos
  rxscan77_scan227:
    nqp_rxmark rx76_bstack, rxscan77_loop226, rx76_pos, 0
  rxscan77_done228:
    add $I11, rx76_pos, 1
    gt $I11, rx76_eos, rx76_fail222
    substr $S10, rx76_tgt, rx76_pos, 1
    ne $S10, ucs4:">", rx76_fail222
    add rx76_pos, 1
    ge rx76_pos, rx76_eos, rx76_fail222
    substr $S11, rx76_tgt, rx76_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx76_fail222
    inc rx76_pos
    rx76_cur."!cursor_pass"(rx76_pos, 'backtrack'=>1)
    .return (rx76_cur)
  rx76_restart221:
    repr_get_attr_obj rx76_cstack, rx76_cur, rx76_curclass, "$!cstack"
  rx76_fail222:
    unless rx76_bstack, rx76_done220
    pop $I19, rx76_bstack
    if_null rx76_cstack, rx76_cstack_done225
    unless rx76_cstack, rx76_cstack_done225
    dec $I19
    set $P11, rx76_cstack[$I19]
  rx76_cstack_done225:
    pop rx76_rep, rx76_bstack
    pop rx76_pos, rx76_bstack
    pop $I19, rx76_bstack
    lt rx76_pos, -1, rx76_done220
    lt rx76_pos, 0, rx76_fail222
    eq $I19, 0, rx76_fail222
    nqp_islist $I20, rx76_cstack
    unless $I20, rx76_jump223
    elements $I18, rx76_bstack
    le $I18, 0, rx76_cut224
    dec $I18
    set $I18, rx76_bstack[$I18]
  rx76_cut224:
    assign rx76_cstack, $I18
  rx76_jump223:
    jump $I19
  rx76_done220:
    rx76_cur."!cursor_fail"()
    .return (rx76_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_17_1360426899.567") :anon :lex :outer("cuid_14_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx78_tgt
    .local int rx78_pos
    .local int rx78_off
    .local int rx78_eos
    .local int rx78_rep
    .local pmc rx78_cur
    .local pmc rx78_curclass
    .local pmc rx78_bstack
    .local pmc rx78_cstack
    (rx78_cur, rx78_tgt, rx78_pos, rx78_curclass, rx78_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx78_cur
    length rx78_eos, rx78_tgt
    eq $I19, 1, rx78_restart232
    gt rx78_pos, rx78_eos, rx78_fail233
    repr_get_attr_int $I11, self, rx78_curclass, "$!from"
    ne $I11, -1, rxscan79_done239
    goto rxscan79_scan238
  rxscan79_loop237:
    inc rx78_pos
    gt rx78_pos, rx78_eos, rx78_fail233
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!from", rx78_pos
  rxscan79_scan238:
    nqp_rxmark rx78_bstack, rxscan79_loop237, rx78_pos, 0
  rxscan79_done239:
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!pos", rx78_pos
    $P11 = rx78_cur."rxstopper"()
    repr_get_attr_int $I11, $P11, rx78_curclass, "$!pos"
    lt $I11, 0, rx78_fail233
    goto rxsubrule80_pass240
  rxsubrule80_back241:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx78_curclass, "$!pos"
    lt $I11, 0, rx78_fail233
  rxsubrule80_pass240:
    rx78_cstack = rx78_cur."!cursor_capture"($P11, "rxstopper")
    set_addr $I11, rxsubrule80_back241
    push rx78_bstack, $I11
    push rx78_bstack, 0
    push rx78_bstack, rx78_pos
    elements $I11, rx78_cstack
    push rx78_bstack, $I11
    repr_get_attr_int rx78_pos, $P11, rx78_curclass, "$!pos"
    rx78_cur."!cursor_pass"(rx78_pos, 'backtrack'=>1)
    .return (rx78_cur)
  rx78_restart232:
    repr_get_attr_obj rx78_cstack, rx78_cur, rx78_curclass, "$!cstack"
  rx78_fail233:
    unless rx78_bstack, rx78_done231
    pop $I19, rx78_bstack
    if_null rx78_cstack, rx78_cstack_done236
    unless rx78_cstack, rx78_cstack_done236
    dec $I19
    set $P11, rx78_cstack[$I19]
  rx78_cstack_done236:
    pop rx78_rep, rx78_bstack
    pop rx78_pos, rx78_bstack
    pop $I19, rx78_bstack
    lt rx78_pos, -1, rx78_done231
    lt rx78_pos, 0, rx78_fail233
    eq $I19, 0, rx78_fail233
    nqp_islist $I20, rx78_cstack
    unless $I20, rx78_jump234
    elements $I18, rx78_bstack
    le $I18, 0, rx78_cut235
    dec $I18
    set $I18, rx78_bstack[$I18]
  rx78_cut235:
    assign rx78_cstack, $I18
  rx78_jump234:
    jump $I19
  rx78_done231:
    rx78_cur."!cursor_fail"()
    .return (rx78_cur) 
.end
.HLL "nqp"
.namespace []
.sub "rxstopper" :subid("cuid_18_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 110
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx81_tgt
    .local int rx81_pos
    .local int rx81_off
    .local int rx81_eos
    .local int rx81_rep
    .local pmc rx81_cur
    .local pmc rx81_curclass
    .local pmc rx81_bstack
    .local pmc rx81_cstack
    (rx81_cur, rx81_tgt, rx81_pos, rx81_curclass, rx81_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx81_cur
    length rx81_eos, rx81_tgt
    eq $I19, 1, rx81_restart244
    gt rx81_pos, rx81_eos, rx81_fail245
    repr_get_attr_int $I11, self, rx81_curclass, "$!from"
    ne $I11, -1, rxscan82_done251
    goto rxscan82_scan250
  rxscan82_loop249:
    inc rx81_pos
    gt rx81_pos, rx81_eos, rx81_fail245
    repr_bind_attr_int rx81_cur, rx81_curclass, "$!from", rx81_pos
  rxscan82_scan250:
    nqp_rxmark rx81_bstack, rxscan82_loop249, rx81_pos, 0
  rxscan82_done251:
    lt rx81_pos, rx81_eos, rx81_fail245
    rx81_cur."!cursor_pass"(rx81_pos, "rxstopper", 'backtrack'=>1)
    .return (rx81_cur)
  rx81_restart244:
    repr_get_attr_obj rx81_cstack, rx81_cur, rx81_curclass, "$!cstack"
  rx81_fail245:
    unless rx81_bstack, rx81_done243
    pop $I19, rx81_bstack
    if_null rx81_cstack, rx81_cstack_done248
    unless rx81_cstack, rx81_cstack_done248
    dec $I19
    set $P11, rx81_cstack[$I19]
  rx81_cstack_done248:
    pop rx81_rep, rx81_bstack
    pop rx81_pos, rx81_bstack
    pop $I19, rx81_bstack
    lt rx81_pos, -1, rx81_done243
    lt rx81_pos, 0, rx81_fail245
    eq $I19, 0, rx81_fail245
    nqp_islist $I20, rx81_cstack
    unless $I20, rx81_jump246
    elements $I18, rx81_bstack
    le $I18, 0, rx81_cut247
    dec $I18
    set $I18, rx81_bstack[$I18]
  rx81_cut247:
    assign rx81_cstack, $I18
  rx81_jump246:
    jump $I19
  rx81_done243:
    rx81_cur."!cursor_fail"()
    .return (rx81_cur) 
.end
.HLL "nqp"
.namespace []
.sub "termaltseq" :subid("cuid_19_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 112
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx84_tgt
    .local int rx84_pos
    .local int rx84_off
    .local int rx84_eos
    .local int rx84_rep
    .local pmc rx84_cur
    .local pmc rx84_curclass
    .local pmc rx84_bstack
    .local pmc rx84_cstack
    (rx84_cur, rx84_tgt, rx84_pos, rx84_curclass, rx84_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx84_cur
    length rx84_eos, rx84_tgt
    eq $I19, 1, rx84_restart255
    gt rx84_pos, rx84_eos, rx84_fail256
    repr_get_attr_int $I11, self, rx84_curclass, "$!from"
    ne $I11, -1, rxscan85_done262
    goto rxscan85_scan261
  rxscan85_loop260:
    inc rx84_pos
    gt rx84_pos, rx84_eos, rx84_fail256
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!from", rx84_pos
  rxscan85_scan261:
    nqp_rxmark rx84_bstack, rxscan85_loop260, rx84_pos, 0
  rxscan85_done262:
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."termconjseq"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail256
    nqp_rxmark rx84_bstack, rxsubrule86_pass263, -1, 0
  rxsubrule86_pass263:
    rx84_cstack = rx84_cur."!cursor_capture"($P11, "termconjseq")
    repr_get_attr_int rx84_pos, $P11, rx84_curclass, "$!pos"
    nqp_rxmark rx84_bstack, rxquantr87_done265, rx84_pos, 0
  rxquantr87_loop264:
    add $I11, rx84_pos, 2
    gt $I11, rx84_eos, rx84_fail256
    substr $S10, rx84_tgt, rx84_pos, 2
    ne $S10, ucs4:"||", rx84_fail256
    add rx84_pos, 2
  alt88_0267:
    nqp_rxmark rx84_bstack, alt88_1269, rx84_pos, 0
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."termconjseq"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail256
    nqp_rxmark rx84_bstack, rxsubrule89_pass268, -1, 0
  rxsubrule89_pass268:
    rx84_cstack = rx84_cur."!cursor_capture"($P11, "termconjseq")
    repr_get_attr_int rx84_pos, $P11, rx84_curclass, "$!pos"
    goto alt88_end266
  alt88_1269:
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail256
    repr_get_attr_int rx84_pos, $P11, rx84_curclass, "$!pos"
  alt88_end266:
    nqp_rxpeek $I19, rx84_bstack, rxquantr87_done265
    inc $I19
    inc $I19
    set rx84_rep, rx84_bstack[$I19]
    nqp_rxcommit rx84_bstack, rxquantr87_done265
    inc rx84_rep
    nqp_rxmark rx84_bstack, rxquantr87_done265, rx84_pos, rx84_rep
    goto rxquantr87_loop264
  rxquantr87_done265:
    rx84_cur."!cursor_pass"(rx84_pos, "termaltseq", 'backtrack'=>1)
    .return (rx84_cur)
  rx84_restart255:
    repr_get_attr_obj rx84_cstack, rx84_cur, rx84_curclass, "$!cstack"
  rx84_fail256:
    unless rx84_bstack, rx84_done254
    pop $I19, rx84_bstack
    if_null rx84_cstack, rx84_cstack_done259
    unless rx84_cstack, rx84_cstack_done259
    dec $I19
    set $P11, rx84_cstack[$I19]
  rx84_cstack_done259:
    pop rx84_rep, rx84_bstack
    pop rx84_pos, rx84_bstack
    pop $I19, rx84_bstack
    lt rx84_pos, -1, rx84_done254
    lt rx84_pos, 0, rx84_fail256
    eq $I19, 0, rx84_fail256
    nqp_islist $I20, rx84_cstack
    unless $I20, rx84_jump257
    elements $I18, rx84_bstack
    le $I18, 0, rx84_cut258
    dec $I18
    set $I18, rx84_bstack[$I18]
  rx84_cut258:
    assign rx84_cstack, $I18
  rx84_jump257:
    jump $I19
  rx84_done254:
    rx84_cur."!cursor_fail"()
    .return (rx84_cur) 
.end
.HLL "nqp"
.namespace []
.sub "termconjseq" :subid("cuid_20_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 117
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx91_tgt
    .local int rx91_pos
    .local int rx91_off
    .local int rx91_eos
    .local int rx91_rep
    .local pmc rx91_cur
    .local pmc rx91_curclass
    .local pmc rx91_bstack
    .local pmc rx91_cstack
    (rx91_cur, rx91_tgt, rx91_pos, rx91_curclass, rx91_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx91_cur
    length rx91_eos, rx91_tgt
    eq $I19, 1, rx91_restart273
    gt rx91_pos, rx91_eos, rx91_fail274
    repr_get_attr_int $I11, self, rx91_curclass, "$!from"
    ne $I11, -1, rxscan92_done280
    goto rxscan92_scan279
  rxscan92_loop278:
    inc rx91_pos
    gt rx91_pos, rx91_eos, rx91_fail274
    repr_bind_attr_int rx91_cur, rx91_curclass, "$!from", rx91_pos
  rxscan92_scan279:
    nqp_rxmark rx91_bstack, rxscan92_loop278, rx91_pos, 0
  rxscan92_done280:
    repr_bind_attr_int rx91_cur, rx91_curclass, "$!pos", rx91_pos
    $P11 = rx91_cur."termalt"()
    repr_get_attr_int $I11, $P11, rx91_curclass, "$!pos"
    lt $I11, 0, rx91_fail274
    nqp_rxmark rx91_bstack, rxsubrule93_pass281, -1, 0
  rxsubrule93_pass281:
    rx91_cstack = rx91_cur."!cursor_capture"($P11, "termalt")
    repr_get_attr_int rx91_pos, $P11, rx91_curclass, "$!pos"
    nqp_rxmark rx91_bstack, rxquantr94_done283, rx91_pos, 0
  rxquantr94_loop282:
    add $I11, rx91_pos, 2
    gt $I11, rx91_eos, rx91_fail274
    substr $S10, rx91_tgt, rx91_pos, 2
    ne $S10, ucs4:"&&", rx91_fail274
    add rx91_pos, 2
  alt95_0285:
    nqp_rxmark rx91_bstack, alt95_1287, rx91_pos, 0
    repr_bind_attr_int rx91_cur, rx91_curclass, "$!pos", rx91_pos
    $P11 = rx91_cur."termalt"()
    repr_get_attr_int $I11, $P11, rx91_curclass, "$!pos"
    lt $I11, 0, rx91_fail274
    nqp_rxmark rx91_bstack, rxsubrule96_pass286, -1, 0
  rxsubrule96_pass286:
    rx91_cstack = rx91_cur."!cursor_capture"($P11, "termalt")
    repr_get_attr_int rx91_pos, $P11, rx91_curclass, "$!pos"
    goto alt95_end284
  alt95_1287:
    repr_bind_attr_int rx91_cur, rx91_curclass, "$!pos", rx91_pos
    $P11 = rx91_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx91_curclass, "$!pos"
    lt $I11, 0, rx91_fail274
    repr_get_attr_int rx91_pos, $P11, rx91_curclass, "$!pos"
  alt95_end284:
    nqp_rxpeek $I19, rx91_bstack, rxquantr94_done283
    inc $I19
    inc $I19
    set rx91_rep, rx91_bstack[$I19]
    nqp_rxcommit rx91_bstack, rxquantr94_done283
    inc rx91_rep
    nqp_rxmark rx91_bstack, rxquantr94_done283, rx91_pos, rx91_rep
    goto rxquantr94_loop282
  rxquantr94_done283:
    rx91_cur."!cursor_pass"(rx91_pos, "termconjseq", 'backtrack'=>1)
    .return (rx91_cur)
  rx91_restart273:
    repr_get_attr_obj rx91_cstack, rx91_cur, rx91_curclass, "$!cstack"
  rx91_fail274:
    unless rx91_bstack, rx91_done272
    pop $I19, rx91_bstack
    if_null rx91_cstack, rx91_cstack_done277
    unless rx91_cstack, rx91_cstack_done277
    dec $I19
    set $P11, rx91_cstack[$I19]
  rx91_cstack_done277:
    pop rx91_rep, rx91_bstack
    pop rx91_pos, rx91_bstack
    pop $I19, rx91_bstack
    lt rx91_pos, -1, rx91_done272
    lt rx91_pos, 0, rx91_fail274
    eq $I19, 0, rx91_fail274
    nqp_islist $I20, rx91_cstack
    unless $I20, rx91_jump275
    elements $I18, rx91_bstack
    le $I18, 0, rx91_cut276
    dec $I18
    set $I18, rx91_bstack[$I18]
  rx91_cut276:
    assign rx91_cstack, $I18
  rx91_jump275:
    jump $I19
  rx91_done272:
    rx91_cur."!cursor_fail"()
    .return (rx91_cur) 
.end
.HLL "nqp"
.namespace []
.sub "termalt" :subid("cuid_21_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 122
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx98_tgt
    .local int rx98_pos
    .local int rx98_off
    .local int rx98_eos
    .local int rx98_rep
    .local pmc rx98_cur
    .local pmc rx98_curclass
    .local pmc rx98_bstack
    .local pmc rx98_cstack
    (rx98_cur, rx98_tgt, rx98_pos, rx98_curclass, rx98_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx98_cur
    length rx98_eos, rx98_tgt
    eq $I19, 1, rx98_restart291
    gt rx98_pos, rx98_eos, rx98_fail292
    repr_get_attr_int $I11, self, rx98_curclass, "$!from"
    ne $I11, -1, rxscan99_done298
    goto rxscan99_scan297
  rxscan99_loop296:
    inc rx98_pos
    gt rx98_pos, rx98_eos, rx98_fail292
    repr_bind_attr_int rx98_cur, rx98_curclass, "$!from", rx98_pos
  rxscan99_scan297:
    nqp_rxmark rx98_bstack, rxscan99_loop296, rx98_pos, 0
  rxscan99_done298:
    repr_bind_attr_int rx98_cur, rx98_curclass, "$!pos", rx98_pos
    $P11 = rx98_cur."termconj"()
    repr_get_attr_int $I11, $P11, rx98_curclass, "$!pos"
    lt $I11, 0, rx98_fail292
    nqp_rxmark rx98_bstack, rxsubrule100_pass299, -1, 0
  rxsubrule100_pass299:
    rx98_cstack = rx98_cur."!cursor_capture"($P11, "termconj")
    repr_get_attr_int rx98_pos, $P11, rx98_curclass, "$!pos"
    nqp_rxmark rx98_bstack, rxquantr101_done301, rx98_pos, 0
  rxquantr101_loop300:
    add $I11, rx98_pos, 1
    gt $I11, rx98_eos, rx98_fail292
    substr $S10, rx98_tgt, rx98_pos, 1
    ne $S10, ucs4:"|", rx98_fail292
    add rx98_pos, 1
    ge rx98_pos, rx98_eos, rx98_fail292
    substr $S11, rx98_tgt, rx98_pos, 1
    index $I11, ucs4:"|", $S11
    ge $I11, 0, rx98_fail292
  alt102_0303:
    nqp_rxmark rx98_bstack, alt102_1305, rx98_pos, 0
    repr_bind_attr_int rx98_cur, rx98_curclass, "$!pos", rx98_pos
    $P11 = rx98_cur."termconj"()
    repr_get_attr_int $I11, $P11, rx98_curclass, "$!pos"
    lt $I11, 0, rx98_fail292
    nqp_rxmark rx98_bstack, rxsubrule103_pass304, -1, 0
  rxsubrule103_pass304:
    rx98_cstack = rx98_cur."!cursor_capture"($P11, "termconj")
    repr_get_attr_int rx98_pos, $P11, rx98_curclass, "$!pos"
    goto alt102_end302
  alt102_1305:
    repr_bind_attr_int rx98_cur, rx98_curclass, "$!pos", rx98_pos
    $P11 = rx98_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx98_curclass, "$!pos"
    lt $I11, 0, rx98_fail292
    repr_get_attr_int rx98_pos, $P11, rx98_curclass, "$!pos"
  alt102_end302:
    nqp_rxpeek $I19, rx98_bstack, rxquantr101_done301
    inc $I19
    inc $I19
    set rx98_rep, rx98_bstack[$I19]
    nqp_rxcommit rx98_bstack, rxquantr101_done301
    inc rx98_rep
    nqp_rxmark rx98_bstack, rxquantr101_done301, rx98_pos, rx98_rep
    goto rxquantr101_loop300
  rxquantr101_done301:
    rx98_cur."!cursor_pass"(rx98_pos, "termalt", 'backtrack'=>1)
    .return (rx98_cur)
  rx98_restart291:
    repr_get_attr_obj rx98_cstack, rx98_cur, rx98_curclass, "$!cstack"
  rx98_fail292:
    unless rx98_bstack, rx98_done290
    pop $I19, rx98_bstack
    if_null rx98_cstack, rx98_cstack_done295
    unless rx98_cstack, rx98_cstack_done295
    dec $I19
    set $P11, rx98_cstack[$I19]
  rx98_cstack_done295:
    pop rx98_rep, rx98_bstack
    pop rx98_pos, rx98_bstack
    pop $I19, rx98_bstack
    lt rx98_pos, -1, rx98_done290
    lt rx98_pos, 0, rx98_fail292
    eq $I19, 0, rx98_fail292
    nqp_islist $I20, rx98_cstack
    unless $I20, rx98_jump293
    elements $I18, rx98_bstack
    le $I18, 0, rx98_cut294
    dec $I18
    set $I18, rx98_bstack[$I18]
  rx98_cut294:
    assign rx98_cstack, $I18
  rx98_jump293:
    jump $I19
  rx98_done290:
    rx98_cur."!cursor_fail"()
    .return (rx98_cur) 
.end
.HLL "nqp"
.namespace []
.sub "termconj" :subid("cuid_22_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 127
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx105_tgt
    .local int rx105_pos
    .local int rx105_off
    .local int rx105_eos
    .local int rx105_rep
    .local pmc rx105_cur
    .local pmc rx105_curclass
    .local pmc rx105_bstack
    .local pmc rx105_cstack
    (rx105_cur, rx105_tgt, rx105_pos, rx105_curclass, rx105_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx105_cur
    length rx105_eos, rx105_tgt
    eq $I19, 1, rx105_restart309
    gt rx105_pos, rx105_eos, rx105_fail310
    repr_get_attr_int $I11, self, rx105_curclass, "$!from"
    ne $I11, -1, rxscan106_done316
    goto rxscan106_scan315
  rxscan106_loop314:
    inc rx105_pos
    gt rx105_pos, rx105_eos, rx105_fail310
    repr_bind_attr_int rx105_cur, rx105_curclass, "$!from", rx105_pos
  rxscan106_scan315:
    nqp_rxmark rx105_bstack, rxscan106_loop314, rx105_pos, 0
  rxscan106_done316:
    repr_bind_attr_int rx105_cur, rx105_curclass, "$!pos", rx105_pos
    $P11 = rx105_cur."termish"()
    repr_get_attr_int $I11, $P11, rx105_curclass, "$!pos"
    lt $I11, 0, rx105_fail310
    nqp_rxmark rx105_bstack, rxsubrule107_pass317, -1, 0
  rxsubrule107_pass317:
    rx105_cstack = rx105_cur."!cursor_capture"($P11, "termish")
    repr_get_attr_int rx105_pos, $P11, rx105_curclass, "$!pos"
    nqp_rxmark rx105_bstack, rxquantr108_done319, rx105_pos, 0
  rxquantr108_loop318:
    add $I11, rx105_pos, 1
    gt $I11, rx105_eos, rx105_fail310
    substr $S10, rx105_tgt, rx105_pos, 1
    ne $S10, ucs4:"&", rx105_fail310
    add rx105_pos, 1
    ge rx105_pos, rx105_eos, rx105_fail310
    substr $S11, rx105_tgt, rx105_pos, 1
    index $I11, ucs4:"&", $S11
    ge $I11, 0, rx105_fail310
  alt109_0321:
    nqp_rxmark rx105_bstack, alt109_1323, rx105_pos, 0
    repr_bind_attr_int rx105_cur, rx105_curclass, "$!pos", rx105_pos
    $P11 = rx105_cur."termish"()
    repr_get_attr_int $I11, $P11, rx105_curclass, "$!pos"
    lt $I11, 0, rx105_fail310
    nqp_rxmark rx105_bstack, rxsubrule110_pass322, -1, 0
  rxsubrule110_pass322:
    rx105_cstack = rx105_cur."!cursor_capture"($P11, "termish")
    repr_get_attr_int rx105_pos, $P11, rx105_curclass, "$!pos"
    goto alt109_end320
  alt109_1323:
    repr_bind_attr_int rx105_cur, rx105_curclass, "$!pos", rx105_pos
    $P11 = rx105_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx105_curclass, "$!pos"
    lt $I11, 0, rx105_fail310
    repr_get_attr_int rx105_pos, $P11, rx105_curclass, "$!pos"
  alt109_end320:
    nqp_rxpeek $I19, rx105_bstack, rxquantr108_done319
    inc $I19
    inc $I19
    set rx105_rep, rx105_bstack[$I19]
    nqp_rxcommit rx105_bstack, rxquantr108_done319
    inc rx105_rep
    nqp_rxmark rx105_bstack, rxquantr108_done319, rx105_pos, rx105_rep
    goto rxquantr108_loop318
  rxquantr108_done319:
    rx105_cur."!cursor_pass"(rx105_pos, "termconj", 'backtrack'=>1)
    .return (rx105_cur)
  rx105_restart309:
    repr_get_attr_obj rx105_cstack, rx105_cur, rx105_curclass, "$!cstack"
  rx105_fail310:
    unless rx105_bstack, rx105_done308
    pop $I19, rx105_bstack
    if_null rx105_cstack, rx105_cstack_done313
    unless rx105_cstack, rx105_cstack_done313
    dec $I19
    set $P11, rx105_cstack[$I19]
  rx105_cstack_done313:
    pop rx105_rep, rx105_bstack
    pop rx105_pos, rx105_bstack
    pop $I19, rx105_bstack
    lt rx105_pos, -1, rx105_done308
    lt rx105_pos, 0, rx105_fail310
    eq $I19, 0, rx105_fail310
    nqp_islist $I20, rx105_cstack
    unless $I20, rx105_jump311
    elements $I18, rx105_bstack
    le $I18, 0, rx105_cut312
    dec $I18
    set $I18, rx105_bstack[$I18]
  rx105_cut312:
    assign rx105_cstack, $I18
  rx105_jump311:
    jump $I19
  rx105_done308:
    rx105_cur."!cursor_fail"()
    .return (rx105_cur) 
.end
.HLL "nqp"
.namespace []
.sub "termish" :subid("cuid_23_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 132
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_24_1360426899.567' 
    capture_lex $P5006 
    .const 'Sub' $P5006 = 'cuid_25_1360426899.567' 
    capture_lex $P5006 
    .const 'Sub' $P5006 = 'cuid_184_1360426899.567' 
    capture_lex $P5006 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx112_tgt
    .local int rx112_pos
    .local int rx112_off
    .local int rx112_eos
    .local int rx112_rep
    .local pmc rx112_cur
    .local pmc rx112_curclass
    .local pmc rx112_bstack
    .local pmc rx112_cstack
    (rx112_cur, rx112_tgt, rx112_pos, rx112_curclass, rx112_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx112_cur
    length rx112_eos, rx112_tgt
    eq $I19, 1, rx112_restart327
    gt rx112_pos, rx112_eos, rx112_fail328
    repr_get_attr_int $I11, self, rx112_curclass, "$!from"
    ne $I11, -1, rxscan113_done334
    goto rxscan113_scan333
  rxscan113_loop332:
    inc rx112_pos
    gt rx112_pos, rx112_eos, rx112_fail328
    repr_bind_attr_int rx112_cur, rx112_curclass, "$!from", rx112_pos
  rxscan113_scan333:
    nqp_rxmark rx112_bstack, rxscan113_loop332, rx112_pos, 0
  rxscan113_done334:
  alt114_0336:
    nqp_rxmark rx112_bstack, alt114_1341, rx112_pos, 0
    nqp_rxmark rx112_bstack, rxquantr115_done338, -1, 0
  rxquantr115_loop337:
    repr_bind_attr_int rx112_cur, rx112_curclass, "$!pos", rx112_pos
    $P11 = rx112_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx112_curclass, "$!pos"
    lt $I11, 0, rx112_fail328
    goto rxsubrule116_pass339
  rxsubrule116_back340:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx112_curclass, "$!pos"
    lt $I11, 0, rx112_fail328
  rxsubrule116_pass339:
    rx112_cstack = rx112_cur."!cursor_capture"($P11, "noun")
    set_addr $I11, rxsubrule116_back340
    push rx112_bstack, $I11
    push rx112_bstack, 0
    push rx112_bstack, rx112_pos
    elements $I11, rx112_cstack
    push rx112_bstack, $I11
    repr_get_attr_int rx112_pos, $P11, rx112_curclass, "$!pos"
    nqp_rxpeek $I19, rx112_bstack, rxquantr115_done338
    inc $I19
    inc $I19
    set rx112_rep, rx112_bstack[$I19]
    nqp_rxcommit rx112_bstack, rxquantr115_done338
    inc rx112_rep
    nqp_rxmark rx112_bstack, rxquantr115_done338, rx112_pos, rx112_rep
    goto rxquantr115_loop337
  rxquantr115_done338:
    goto alt114_end335
  alt114_1341:
    nqp_rxmark rx112_bstack, alt114_2357, rx112_pos, 0
    .const 'Sub' $P5001 = 'cuid_24_1360426899.567' 
    capture_lex $P5001
    repr_bind_attr_int rx112_cur, rx112_curclass, "$!pos", rx112_pos
    $P11 = rx112_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx112_curclass, "$!pos"
    lt $I11, 0, rx112_fail328
    repr_bind_attr_int rx112_cur, rx112_curclass, "$!pos", rx112_pos
    $P11 = rx112_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx112_curclass, "$!pos"
    lt $I11, 0, rx112_fail328
    repr_get_attr_int rx112_pos, $P11, rx112_curclass, "$!pos"
    goto alt114_end335
  alt114_2357:
    .const 'Sub' $P5002 = 'cuid_25_1360426899.567' 
    capture_lex $P5002
    repr_bind_attr_int rx112_cur, rx112_curclass, "$!pos", rx112_pos
    $P11 = rx112_cur.$P5002()
    repr_get_attr_int $I11, $P11, rx112_curclass, "$!pos"
    lt $I11, 0, rx112_fail328
    nqp_rxmark rx112_bstack, rxsubrule124_pass368, -1, 0
  rxsubrule124_pass368:
    rx112_cstack = rx112_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx112_pos, $P11, rx112_curclass, "$!pos"
    repr_bind_attr_int rx112_cur, rx112_curclass, "$!pos", rx112_pos
    store_lex unicode:"$\x{a2}", rx112_cur
    $P5003 = $P101."MATCH"()
    set $P102, $P5003
    .const 'Sub' $P5004 = 'cuid_184_1360426899.567' 
    capture_lex $P5004
    $P5005 = $P5004()
  alt114_end335:
    rx112_cur."!cursor_pass"(rx112_pos, "termish", 'backtrack'=>1)
    .return (rx112_cur)
  rx112_restart327:
    repr_get_attr_obj rx112_cstack, rx112_cur, rx112_curclass, "$!cstack"
  rx112_fail328:
    unless rx112_bstack, rx112_done326
    pop $I19, rx112_bstack
    if_null rx112_cstack, rx112_cstack_done331
    unless rx112_cstack, rx112_cstack_done331
    dec $I19
    set $P11, rx112_cstack[$I19]
  rx112_cstack_done331:
    pop rx112_rep, rx112_bstack
    pop rx112_pos, rx112_bstack
    pop $I19, rx112_bstack
    lt rx112_pos, -1, rx112_done326
    lt rx112_pos, 0, rx112_fail328
    eq $I19, 0, rx112_fail328
    nqp_islist $I20, rx112_cstack
    unless $I20, rx112_jump329
    elements $I18, rx112_bstack
    le $I18, 0, rx112_cut330
    dec $I18
    set $I18, rx112_bstack[$I18]
  rx112_cut330:
    assign rx112_cstack, $I18
  rx112_jump329:
    jump $I19
  rx112_done326:
    rx112_cur."!cursor_fail"()
    .return (rx112_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_24_1360426899.567") :anon :lex :outer("cuid_23_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx117_tgt
    .local int rx117_pos
    .local int rx117_off
    .local int rx117_eos
    .local int rx117_rep
    .local pmc rx117_cur
    .local pmc rx117_curclass
    .local pmc rx117_bstack
    .local pmc rx117_cstack
    (rx117_cur, rx117_tgt, rx117_pos, rx117_curclass, rx117_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx117_cur
    length rx117_eos, rx117_tgt
    eq $I19, 1, rx117_restart344
    gt rx117_pos, rx117_eos, rx117_fail345
    repr_get_attr_int $I11, self, rx117_curclass, "$!from"
    ne $I11, -1, rxscan118_done351
    goto rxscan118_scan350
  rxscan118_loop349:
    inc rx117_pos
    gt rx117_pos, rx117_eos, rx117_fail345
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!from", rx117_pos
  rxscan118_scan350:
    nqp_rxmark rx117_bstack, rxscan118_loop349, rx117_pos, 0
  rxscan118_done351:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt119_0353
    nqp_push_label $P11, alt119_1355
    nqp_rxmark rx117_bstack, alt119_end352, -1, 0
    rx117_cur."!alt"(rx117_pos, "alt_nfa__6_1360426899.872", $P11)
    goto rx117_fail345
  alt119_0353:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."stopper"()
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail345
    nqp_rxmark rx117_bstack, rxsubrule120_pass354, -1, 0
  rxsubrule120_pass354:
    rx117_cstack = rx117_cur."!cursor_capture"($P11, "stopper")
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
    goto alt119_end352
  alt119_1355:
    ge rx117_pos, rx117_eos, rx117_fail345
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"&|~", $S11
    lt $I11, 0, rx117_fail345
    inc rx117_pos
    goto alt119_end352
  alt119_end352:
    rx117_cur."!cursor_pass"(rx117_pos, 'backtrack'=>1)
    .return (rx117_cur)
  rx117_restart344:
    repr_get_attr_obj rx117_cstack, rx117_cur, rx117_curclass, "$!cstack"
  rx117_fail345:
    unless rx117_bstack, rx117_done343
    pop $I19, rx117_bstack
    if_null rx117_cstack, rx117_cstack_done348
    unless rx117_cstack, rx117_cstack_done348
    dec $I19
    set $P11, rx117_cstack[$I19]
  rx117_cstack_done348:
    pop rx117_rep, rx117_bstack
    pop rx117_pos, rx117_bstack
    pop $I19, rx117_bstack
    lt rx117_pos, -1, rx117_done343
    lt rx117_pos, 0, rx117_fail345
    eq $I19, 0, rx117_fail345
    nqp_islist $I20, rx117_cstack
    unless $I20, rx117_jump346
    elements $I18, rx117_bstack
    le $I18, 0, rx117_cut347
    dec $I18
    set $I18, rx117_bstack[$I18]
  rx117_cut347:
    assign rx117_cstack, $I18
  rx117_jump346:
    jump $I19
  rx117_done343:
    rx117_cur."!cursor_fail"()
    .return (rx117_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_25_1360426899.567") :anon :lex :outer("cuid_23_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx122_tgt
    .local int rx122_pos
    .local int rx122_off
    .local int rx122_eos
    .local int rx122_rep
    .local pmc rx122_cur
    .local pmc rx122_curclass
    .local pmc rx122_bstack
    .local pmc rx122_cstack
    (rx122_cur, rx122_tgt, rx122_pos, rx122_curclass, rx122_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx122_cur
    length rx122_eos, rx122_tgt
    eq $I19, 1, rx122_restart360
    gt rx122_pos, rx122_eos, rx122_fail361
    repr_get_attr_int $I11, self, rx122_curclass, "$!from"
    ne $I11, -1, rxscan123_done367
    goto rxscan123_scan366
  rxscan123_loop365:
    inc rx122_pos
    gt rx122_pos, rx122_eos, rx122_fail361
    repr_bind_attr_int rx122_cur, rx122_curclass, "$!from", rx122_pos
  rxscan123_scan366:
    nqp_rxmark rx122_bstack, rxscan123_loop365, rx122_pos, 0
  rxscan123_done367:
    ge rx122_pos, rx122_eos, rx122_fail361
    is_cclass $I11, .CCLASS_WORD, rx122_tgt, rx122_pos
    if $I11, rx122_fail361
    add rx122_pos, 1
    rx122_cur."!cursor_pass"(rx122_pos, 'backtrack'=>1)
    .return (rx122_cur)
  rx122_restart360:
    repr_get_attr_obj rx122_cstack, rx122_cur, rx122_curclass, "$!cstack"
  rx122_fail361:
    unless rx122_bstack, rx122_done359
    pop $I19, rx122_bstack
    if_null rx122_cstack, rx122_cstack_done364
    unless rx122_cstack, rx122_cstack_done364
    dec $I19
    set $P11, rx122_cstack[$I19]
  rx122_cstack_done364:
    pop rx122_rep, rx122_bstack
    pop rx122_pos, rx122_bstack
    pop $I19, rx122_bstack
    lt rx122_pos, -1, rx122_done359
    lt rx122_pos, 0, rx122_fail361
    eq $I19, 0, rx122_fail361
    nqp_islist $I20, rx122_cstack
    unless $I20, rx122_jump362
    elements $I18, rx122_bstack
    le $I18, 0, rx122_cut363
    dec $I18
    set $I18, rx122_bstack[$I18]
  rx122_cut363:
    assign rx122_cstack, $I18
  rx122_jump362:
    jump $I19
  rx122_done359:
    rx122_cur."!cursor_fail"()
    .return (rx122_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_184_1360426899.567") :anon :lex :outer("cuid_23_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 135

    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5004, "$/"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback369
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5005
  fallback369:
    set $S5001, $P5003
    $P5006 = $P5001."throw_unrecognized_metachar"($S5001)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "quantified_atom" :subid("cuid_26_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 138
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_27_1360426899.567' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx125_tgt
    .local int rx125_pos
    .local int rx125_off
    .local int rx125_eos
    .local int rx125_rep
    .local pmc rx125_cur
    .local pmc rx125_curclass
    .local pmc rx125_bstack
    .local pmc rx125_cstack
    (rx125_cur, rx125_tgt, rx125_pos, rx125_curclass, rx125_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx125_cur
    length rx125_eos, rx125_tgt
    eq $I19, 1, rx125_restart372
    gt rx125_pos, rx125_eos, rx125_fail373
    repr_get_attr_int $I11, self, rx125_curclass, "$!from"
    ne $I11, -1, rxscan126_done379
    goto rxscan126_scan378
  rxscan126_loop377:
    inc rx125_pos
    gt rx125_pos, rx125_eos, rx125_fail373
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!from", rx125_pos
  rxscan126_scan378:
    nqp_rxmark rx125_bstack, rxscan126_loop377, rx125_pos, 0
  rxscan126_done379:
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!pos", rx125_pos
    $P11 = rx125_cur."atom"()
    repr_get_attr_int $I11, $P11, rx125_curclass, "$!pos"
    lt $I11, 0, rx125_fail373
    nqp_rxmark rx125_bstack, rxsubrule127_pass380, -1, 0
  rxsubrule127_pass380:
    rx125_cstack = rx125_cur."!cursor_capture"($P11, "atom")
    repr_get_attr_int rx125_pos, $P11, rx125_curclass, "$!pos"
    nqp_rxmark rx125_bstack, rxquantr128_done382, rx125_pos, 0
  rxquantr128_loop381:
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!pos", rx125_pos
    $P11 = rx125_cur."ws"()
    repr_get_attr_int $I11, $P11, rx125_curclass, "$!pos"
    lt $I11, 0, rx125_fail373
    repr_get_attr_int rx125_pos, $P11, rx125_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt130_0385
    nqp_push_label $P11, alt130_1387
    nqp_rxmark rx125_bstack, alt130_end384, -1, 0
    rx125_cur."!alt"(rx125_pos, "alt_nfa__7_1360426899.896", $P11)
    goto rx125_fail373
  alt130_0385:
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!pos", rx125_pos
    $P11 = rx125_cur."quantifier"()
    repr_get_attr_int $I11, $P11, rx125_curclass, "$!pos"
    lt $I11, 0, rx125_fail373
    nqp_rxmark rx125_bstack, rxsubrule131_pass386, -1, 0
  rxsubrule131_pass386:
    rx125_cstack = rx125_cur."!cursor_capture"($P11, "quantifier")
    repr_get_attr_int rx125_pos, $P11, rx125_curclass, "$!pos"
    goto alt130_end384
  alt130_1387:
    .const 'Sub' $P5001 = 'cuid_27_1360426899.567' 
    capture_lex $P5001
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!pos", rx125_pos
    $P11 = rx125_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx125_curclass, "$!pos"
    lt $I11, 0, rx125_fail373
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!pos", rx125_pos
    $P11 = rx125_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx125_curclass, "$!pos"
    lt $I11, 0, rx125_fail373
    nqp_rxmark rx125_bstack, rxsubrule134_pass398, -1, 0
  rxsubrule134_pass398:
    rx125_cstack = rx125_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx125_pos, $P11, rx125_curclass, "$!pos"
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!pos", rx125_pos
    $P11 = rx125_cur."alpha"()
    repr_get_attr_int $I11, $P11, rx125_curclass, "$!pos"
    ge $I11, 0, rx125_fail373
    goto alt130_end384
  alt130_end384:
    nqp_rxcommit rx125_bstack, alt130_end384
    nqp_rxmark rx125_bstack, rxquantr135_done400, rx125_pos, 0
  rxquantr135_loop399:
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!pos", rx125_pos
    $P11 = rx125_cur."ws"()
    repr_get_attr_int $I11, $P11, rx125_curclass, "$!pos"
    lt $I11, 0, rx125_fail373
    repr_get_attr_int rx125_pos, $P11, rx125_curclass, "$!pos"
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!pos", rx125_pos
    $P11 = rx125_cur."separator"()
    repr_get_attr_int $I11, $P11, rx125_curclass, "$!pos"
    lt $I11, 0, rx125_fail373
    nqp_rxmark rx125_bstack, rxsubrule137_pass402, -1, 0
  rxsubrule137_pass402:
    rx125_cstack = rx125_cur."!cursor_capture"($P11, "separator")
    repr_get_attr_int rx125_pos, $P11, rx125_curclass, "$!pos"
    nqp_rxpeek $I19, rx125_bstack, rxquantr135_done400
    inc $I19
    inc $I19
    set rx125_rep, rx125_bstack[$I19]
    nqp_rxcommit rx125_bstack, rxquantr135_done400
    inc rx125_rep
  rxquantr135_done400:
    nqp_rxpeek $I19, rx125_bstack, rxquantr128_done382
    inc $I19
    inc $I19
    set rx125_rep, rx125_bstack[$I19]
    nqp_rxcommit rx125_bstack, rxquantr128_done382
    inc rx125_rep
  rxquantr128_done382:
    rx125_cur."!cursor_pass"(rx125_pos, "quantified_atom", 'backtrack'=>1)
    .return (rx125_cur)
  rx125_restart372:
    repr_get_attr_obj rx125_cstack, rx125_cur, rx125_curclass, "$!cstack"
  rx125_fail373:
    unless rx125_bstack, rx125_done371
    pop $I19, rx125_bstack
    if_null rx125_cstack, rx125_cstack_done376
    unless rx125_cstack, rx125_cstack_done376
    dec $I19
    set $P11, rx125_cstack[$I19]
  rx125_cstack_done376:
    pop rx125_rep, rx125_bstack
    pop rx125_pos, rx125_bstack
    pop $I19, rx125_bstack
    lt rx125_pos, -1, rx125_done371
    lt rx125_pos, 0, rx125_fail373
    eq $I19, 0, rx125_fail373
    nqp_islist $I20, rx125_cstack
    unless $I20, rx125_jump374
    elements $I18, rx125_bstack
    le $I18, 0, rx125_cut375
    dec $I18
    set $I18, rx125_bstack[$I18]
  rx125_cut375:
    assign rx125_cstack, $I18
  rx125_jump374:
    jump $I19
  rx125_done371:
    rx125_cur."!cursor_fail"()
    .return (rx125_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_27_1360426899.567") :anon :lex :outer("cuid_26_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx132_tgt
    .local int rx132_pos
    .local int rx132_off
    .local int rx132_eos
    .local int rx132_rep
    .local pmc rx132_cur
    .local pmc rx132_curclass
    .local pmc rx132_bstack
    .local pmc rx132_cstack
    (rx132_cur, rx132_tgt, rx132_pos, rx132_curclass, rx132_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx132_cur
    length rx132_eos, rx132_tgt
    eq $I19, 1, rx132_restart390
    gt rx132_pos, rx132_eos, rx132_fail391
    repr_get_attr_int $I11, self, rx132_curclass, "$!from"
    ne $I11, -1, rxscan133_done397
    goto rxscan133_scan396
  rxscan133_loop395:
    inc rx132_pos
    gt rx132_pos, rx132_eos, rx132_fail391
    repr_bind_attr_int rx132_cur, rx132_curclass, "$!from", rx132_pos
  rxscan133_scan396:
    nqp_rxmark rx132_bstack, rxscan133_loop395, rx132_pos, 0
  rxscan133_done397:
    add $I11, rx132_pos, 1
    gt $I11, rx132_eos, rx132_fail391
    substr $S10, rx132_tgt, rx132_pos, 1
    ne $S10, ucs4:":", rx132_fail391
    add rx132_pos, 1
    rx132_cur."!cursor_pass"(rx132_pos, 'backtrack'=>1)
    .return (rx132_cur)
  rx132_restart390:
    repr_get_attr_obj rx132_cstack, rx132_cur, rx132_curclass, "$!cstack"
  rx132_fail391:
    unless rx132_bstack, rx132_done389
    pop $I19, rx132_bstack
    if_null rx132_cstack, rx132_cstack_done394
    unless rx132_cstack, rx132_cstack_done394
    dec $I19
    set $P11, rx132_cstack[$I19]
  rx132_cstack_done394:
    pop rx132_rep, rx132_bstack
    pop rx132_pos, rx132_bstack
    pop $I19, rx132_bstack
    lt rx132_pos, -1, rx132_done389
    lt rx132_pos, 0, rx132_fail391
    eq $I19, 0, rx132_fail391
    nqp_islist $I20, rx132_cstack
    unless $I20, rx132_jump392
    elements $I18, rx132_bstack
    le $I18, 0, rx132_cut393
    dec $I18
    set $I18, rx132_bstack[$I18]
  rx132_cut393:
    assign rx132_cstack, $I18
  rx132_jump392:
    jump $I19
  rx132_done389:
    rx132_cur."!cursor_fail"()
    .return (rx132_cur) 
.end
.HLL "nqp"
.namespace []
.sub "separator" :subid("cuid_28_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 146
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx138_tgt
    .local int rx138_pos
    .local int rx138_off
    .local int rx138_eos
    .local int rx138_rep
    .local pmc rx138_cur
    .local pmc rx138_curclass
    .local pmc rx138_bstack
    .local pmc rx138_cstack
    (rx138_cur, rx138_tgt, rx138_pos, rx138_curclass, rx138_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx138_cur
    length rx138_eos, rx138_tgt
    eq $I19, 1, rx138_restart405
    gt rx138_pos, rx138_eos, rx138_fail406
    repr_get_attr_int $I11, self, rx138_curclass, "$!from"
    ne $I11, -1, rxscan139_done412
    goto rxscan139_scan411
  rxscan139_loop410:
    inc rx138_pos
    gt rx138_pos, rx138_eos, rx138_fail406
    repr_bind_attr_int rx138_cur, rx138_curclass, "$!from", rx138_pos
  rxscan139_scan411:
    nqp_rxmark rx138_bstack, rxscan139_loop410, rx138_pos, 0
  rxscan139_done412:
    nqp_rxmark rx138_bstack, rxcap140_fail414, rx138_pos, 0
    add $I11, rx138_pos, 1
    gt $I11, rx138_eos, rx138_fail406
    substr $S10, rx138_tgt, rx138_pos, 1
    ne $S10, ucs4:"%", rx138_fail406
    add rx138_pos, 1
    nqp_rxmark rx138_bstack, rxquantr141_done416, rx138_pos, 0
  rxquantr141_loop415:
    add $I11, rx138_pos, 1
    gt $I11, rx138_eos, rx138_fail406
    substr $S10, rx138_tgt, rx138_pos, 1
    ne $S10, ucs4:"%", rx138_fail406
    add rx138_pos, 1
    nqp_rxpeek $I19, rx138_bstack, rxquantr141_done416
    inc $I19
    inc $I19
    set rx138_rep, rx138_bstack[$I19]
    nqp_rxcommit rx138_bstack, rxquantr141_done416
    inc rx138_rep
  rxquantr141_done416:
    nqp_rxpeek $I19, rx138_bstack, rxcap140_fail414
    inc $I19
    set $I11, rx138_bstack[$I19]
    repr_bind_attr_int rx138_cur, rx138_curclass, "$!pos", rx138_pos
    $P11 = rx138_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx138_pos)
    rx138_cstack = rx138_cur."!cursor_capture"($P11, "septype")
    goto rxcap140_done413
  rxcap140_fail414:
    goto rx138_fail406
  rxcap140_done413:
    nqp_rxmark rx138_bstack, rxquantr142_done418, rx138_pos, 0
  rxquantr142_loop417:
    repr_bind_attr_int rx138_cur, rx138_curclass, "$!pos", rx138_pos
    $P11 = rx138_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx138_curclass, "$!pos"
    lt $I11, 0, rx138_fail406
    goto rxsubrule143_pass419
  rxsubrule143_back420:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx138_curclass, "$!pos"
    lt $I11, 0, rx138_fail406
  rxsubrule143_pass419:
    rx138_cstack = rx138_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule143_back420
    push rx138_bstack, $I11
    push rx138_bstack, 0
    push rx138_bstack, rx138_pos
    elements $I11, rx138_cstack
    push rx138_bstack, $I11
    repr_get_attr_int rx138_pos, $P11, rx138_curclass, "$!pos"
    nqp_rxpeek $I19, rx138_bstack, rxquantr142_done418
    inc $I19
    inc $I19
    set rx138_rep, rx138_bstack[$I19]
    nqp_rxcommit rx138_bstack, rxquantr142_done418
    inc rx138_rep
  rxquantr142_done418:
    repr_bind_attr_int rx138_cur, rx138_curclass, "$!pos", rx138_pos
    $P11 = rx138_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx138_curclass, "$!pos"
    lt $I11, 0, rx138_fail406
    nqp_rxmark rx138_bstack, rxsubrule144_pass421, -1, 0
  rxsubrule144_pass421:
    rx138_cstack = rx138_cur."!cursor_capture"($P11, "quantified_atom")
    repr_get_attr_int rx138_pos, $P11, rx138_curclass, "$!pos"
    rx138_cur."!cursor_pass"(rx138_pos, "separator", 'backtrack'=>1)
    .return (rx138_cur)
  rx138_restart405:
    repr_get_attr_obj rx138_cstack, rx138_cur, rx138_curclass, "$!cstack"
  rx138_fail406:
    unless rx138_bstack, rx138_done404
    pop $I19, rx138_bstack
    if_null rx138_cstack, rx138_cstack_done409
    unless rx138_cstack, rx138_cstack_done409
    dec $I19
    set $P11, rx138_cstack[$I19]
  rx138_cstack_done409:
    pop rx138_rep, rx138_bstack
    pop rx138_pos, rx138_bstack
    pop $I19, rx138_bstack
    lt rx138_pos, -1, rx138_done404
    lt rx138_pos, 0, rx138_fail406
    eq $I19, 0, rx138_fail406
    nqp_islist $I20, rx138_cstack
    unless $I20, rx138_jump407
    elements $I18, rx138_bstack
    le $I18, 0, rx138_cut408
    dec $I18
    set $I18, rx138_bstack[$I18]
  rx138_cut408:
    assign rx138_cstack, $I18
  rx138_jump407:
    jump $I19
  rx138_done404:
    rx138_cur."!cursor_fail"()
    .return (rx138_cur) 
.end
.HLL "nqp"
.namespace []
.sub "atom" :subid("cuid_29_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 150
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_30_1360426899.567' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx145_tgt
    .local int rx145_pos
    .local int rx145_off
    .local int rx145_eos
    .local int rx145_rep
    .local pmc rx145_cur
    .local pmc rx145_curclass
    .local pmc rx145_bstack
    .local pmc rx145_cstack
    (rx145_cur, rx145_tgt, rx145_pos, rx145_curclass, rx145_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx145_cur
    length rx145_eos, rx145_tgt
    eq $I19, 1, rx145_restart424
    gt rx145_pos, rx145_eos, rx145_fail425
    repr_get_attr_int $I11, self, rx145_curclass, "$!from"
    ne $I11, -1, rxscan146_done431
    goto rxscan146_scan430
  rxscan146_loop429:
    inc rx145_pos
    gt rx145_pos, rx145_eos, rx145_fail425
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!from", rx145_pos
  rxscan146_scan430:
    nqp_rxmark rx145_bstack, rxscan146_loop429, rx145_pos, 0
  rxscan146_done431:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt147_0433
    nqp_push_label $P11, alt147_1448
    nqp_rxmark rx145_bstack, alt147_end432, -1, 0
    rx145_cur."!alt"(rx145_pos, "alt_nfa__8_1360426899.914", $P11)
    goto rx145_fail425
  alt147_0433:
    ge rx145_pos, rx145_eos, rx145_fail425
    is_cclass $I11, .CCLASS_WORD, rx145_tgt, rx145_pos
    unless $I11, rx145_fail425
    add rx145_pos, 1
    nqp_rxmark rx145_bstack, rxquantr148_done435, rx145_pos, 0
  rxquantr148_loop434:
  rxquantg149_loop436:
    ge rx145_pos, rx145_eos, rx145_fail425
    is_cclass $I11, .CCLASS_WORD, rx145_tgt, rx145_pos
    unless $I11, rx145_fail425
    add rx145_pos, 1
    nqp_rxmark rx145_bstack, rxquantg149_done437, rx145_pos, rx145_rep
    goto rxquantg149_loop436
  rxquantg149_done437:
    .const 'Sub' $P5001 = 'cuid_30_1360426899.567' 
    capture_lex $P5001
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    lt $I11, 0, rx145_fail425
    nqp_rxpeek $I19, rx145_bstack, rxquantr148_done435
    inc $I19
    inc $I19
    set rx145_rep, rx145_bstack[$I19]
    nqp_rxcommit rx145_bstack, rxquantr148_done435
    inc rx145_rep
  rxquantr148_done435:
    goto alt147_end432
  alt147_1448:
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."metachar"()
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    lt $I11, 0, rx145_fail425
    nqp_rxmark rx145_bstack, rxsubrule152_pass449, -1, 0
  rxsubrule152_pass449:
    rx145_cstack = rx145_cur."!cursor_capture"($P11, "metachar")
    repr_get_attr_int rx145_pos, $P11, rx145_curclass, "$!pos"
    goto alt147_end432
  alt147_end432:
    nqp_rxcommit rx145_bstack, alt147_end432
    rx145_cur."!cursor_pass"(rx145_pos, "atom", 'backtrack'=>1)
    .return (rx145_cur)
  rx145_restart424:
    repr_get_attr_obj rx145_cstack, rx145_cur, rx145_curclass, "$!cstack"
  rx145_fail425:
    unless rx145_bstack, rx145_done423
    pop $I19, rx145_bstack
    if_null rx145_cstack, rx145_cstack_done428
    unless rx145_cstack, rx145_cstack_done428
    dec $I19
    set $P11, rx145_cstack[$I19]
  rx145_cstack_done428:
    pop rx145_rep, rx145_bstack
    pop rx145_pos, rx145_bstack
    pop $I19, rx145_bstack
    lt rx145_pos, -1, rx145_done423
    lt rx145_pos, 0, rx145_fail425
    eq $I19, 0, rx145_fail425
    nqp_islist $I20, rx145_cstack
    unless $I20, rx145_jump426
    elements $I18, rx145_bstack
    le $I18, 0, rx145_cut427
    dec $I18
    set $I18, rx145_bstack[$I18]
  rx145_cut427:
    assign rx145_cstack, $I18
  rx145_jump426:
    jump $I19
  rx145_done423:
    rx145_cur."!cursor_fail"()
    .return (rx145_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_30_1360426899.567") :anon :lex :outer("cuid_29_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx150_tgt
    .local int rx150_pos
    .local int rx150_off
    .local int rx150_eos
    .local int rx150_rep
    .local pmc rx150_cur
    .local pmc rx150_curclass
    .local pmc rx150_bstack
    .local pmc rx150_cstack
    (rx150_cur, rx150_tgt, rx150_pos, rx150_curclass, rx150_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx150_cur
    length rx150_eos, rx150_tgt
    eq $I19, 1, rx150_restart440
    gt rx150_pos, rx150_eos, rx150_fail441
    repr_get_attr_int $I11, self, rx150_curclass, "$!from"
    ne $I11, -1, rxscan151_done447
    goto rxscan151_scan446
  rxscan151_loop445:
    inc rx150_pos
    gt rx150_pos, rx150_eos, rx150_fail441
    repr_bind_attr_int rx150_cur, rx150_curclass, "$!from", rx150_pos
  rxscan151_scan446:
    nqp_rxmark rx150_bstack, rxscan151_loop445, rx150_pos, 0
  rxscan151_done447:
    ge rx150_pos, rx150_eos, rx150_fail441
    is_cclass $I11, .CCLASS_WORD, rx150_tgt, rx150_pos
    unless $I11, rx150_fail441
    add rx150_pos, 1
    rx150_cur."!cursor_pass"(rx150_pos, 'backtrack'=>1)
    .return (rx150_cur)
  rx150_restart440:
    repr_get_attr_obj rx150_cstack, rx150_cur, rx150_curclass, "$!cstack"
  rx150_fail441:
    unless rx150_bstack, rx150_done439
    pop $I19, rx150_bstack
    if_null rx150_cstack, rx150_cstack_done444
    unless rx150_cstack, rx150_cstack_done444
    dec $I19
    set $P11, rx150_cstack[$I19]
  rx150_cstack_done444:
    pop rx150_rep, rx150_bstack
    pop rx150_pos, rx150_bstack
    pop $I19, rx150_bstack
    lt rx150_pos, -1, rx150_done439
    lt rx150_pos, 0, rx150_fail441
    eq $I19, 0, rx150_fail441
    nqp_islist $I20, rx150_cstack
    unless $I20, rx150_jump442
    elements $I18, rx150_bstack
    le $I18, 0, rx150_cut443
    dec $I18
    set $I18, rx150_bstack[$I18]
  rx150_cut443:
    assign rx150_cstack, $I18
  rx150_jump442:
    jump $I19
  rx150_done439:
    rx150_cur."!cursor_fail"()
    .return (rx150_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier" :subid("cuid_31_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 158
    .param pmc self 
    $P5001 = self."!protoregex"("quantifier")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<*>" :subid("cuid_32_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 159
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx153_tgt
    .local int rx153_pos
    .local int rx153_off
    .local int rx153_eos
    .local int rx153_rep
    .local pmc rx153_cur
    .local pmc rx153_curclass
    .local pmc rx153_bstack
    .local pmc rx153_cstack
    (rx153_cur, rx153_tgt, rx153_pos, rx153_curclass, rx153_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx153_cur
    length rx153_eos, rx153_tgt
    eq $I19, 1, rx153_restart452
    gt rx153_pos, rx153_eos, rx153_fail453
    repr_get_attr_int $I11, self, rx153_curclass, "$!from"
    ne $I11, -1, rxscan154_done459
    goto rxscan154_scan458
  rxscan154_loop457:
    inc rx153_pos
    gt rx153_pos, rx153_eos, rx153_fail453
    repr_bind_attr_int rx153_cur, rx153_curclass, "$!from", rx153_pos
  rxscan154_scan458:
    nqp_rxmark rx153_bstack, rxscan154_loop457, rx153_pos, 0
  rxscan154_done459:
    nqp_rxmark rx153_bstack, rxcap155_fail461, rx153_pos, 0
    add $I11, rx153_pos, 1
    gt $I11, rx153_eos, rx153_fail453
    substr $S10, rx153_tgt, rx153_pos, 1
    ne $S10, ucs4:"*", rx153_fail453
    add rx153_pos, 1
    nqp_rxpeek $I19, rx153_bstack, rxcap155_fail461
    inc $I19
    set $I11, rx153_bstack[$I19]
    repr_bind_attr_int rx153_cur, rx153_curclass, "$!pos", rx153_pos
    $P11 = rx153_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx153_pos)
    rx153_cstack = rx153_cur."!cursor_capture"($P11, "sym")
    goto rxcap155_done460
  rxcap155_fail461:
    goto rx153_fail453
  rxcap155_done460:
    repr_bind_attr_int rx153_cur, rx153_curclass, "$!pos", rx153_pos
    $P11 = rx153_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx153_curclass, "$!pos"
    lt $I11, 0, rx153_fail453
    nqp_rxmark rx153_bstack, rxsubrule156_pass462, -1, 0
  rxsubrule156_pass462:
    rx153_cstack = rx153_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx153_pos, $P11, rx153_curclass, "$!pos"
    rx153_cur."!cursor_pass"(rx153_pos, "quantifier:sym<*>", 'backtrack'=>1)
    .return (rx153_cur)
  rx153_restart452:
    repr_get_attr_obj rx153_cstack, rx153_cur, rx153_curclass, "$!cstack"
  rx153_fail453:
    unless rx153_bstack, rx153_done451
    pop $I19, rx153_bstack
    if_null rx153_cstack, rx153_cstack_done456
    unless rx153_cstack, rx153_cstack_done456
    dec $I19
    set $P11, rx153_cstack[$I19]
  rx153_cstack_done456:
    pop rx153_rep, rx153_bstack
    pop rx153_pos, rx153_bstack
    pop $I19, rx153_bstack
    lt rx153_pos, -1, rx153_done451
    lt rx153_pos, 0, rx153_fail453
    eq $I19, 0, rx153_fail453
    nqp_islist $I20, rx153_cstack
    unless $I20, rx153_jump454
    elements $I18, rx153_bstack
    le $I18, 0, rx153_cut455
    dec $I18
    set $I18, rx153_bstack[$I18]
  rx153_cut455:
    assign rx153_cstack, $I18
  rx153_jump454:
    jump $I19
  rx153_done451:
    rx153_cur."!cursor_fail"()
    .return (rx153_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<+>" :subid("cuid_33_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 160
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx157_tgt
    .local int rx157_pos
    .local int rx157_off
    .local int rx157_eos
    .local int rx157_rep
    .local pmc rx157_cur
    .local pmc rx157_curclass
    .local pmc rx157_bstack
    .local pmc rx157_cstack
    (rx157_cur, rx157_tgt, rx157_pos, rx157_curclass, rx157_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx157_cur
    length rx157_eos, rx157_tgt
    eq $I19, 1, rx157_restart465
    gt rx157_pos, rx157_eos, rx157_fail466
    repr_get_attr_int $I11, self, rx157_curclass, "$!from"
    ne $I11, -1, rxscan158_done472
    goto rxscan158_scan471
  rxscan158_loop470:
    inc rx157_pos
    gt rx157_pos, rx157_eos, rx157_fail466
    repr_bind_attr_int rx157_cur, rx157_curclass, "$!from", rx157_pos
  rxscan158_scan471:
    nqp_rxmark rx157_bstack, rxscan158_loop470, rx157_pos, 0
  rxscan158_done472:
    nqp_rxmark rx157_bstack, rxcap159_fail474, rx157_pos, 0
    add $I11, rx157_pos, 1
    gt $I11, rx157_eos, rx157_fail466
    substr $S10, rx157_tgt, rx157_pos, 1
    ne $S10, ucs4:"+", rx157_fail466
    add rx157_pos, 1
    nqp_rxpeek $I19, rx157_bstack, rxcap159_fail474
    inc $I19
    set $I11, rx157_bstack[$I19]
    repr_bind_attr_int rx157_cur, rx157_curclass, "$!pos", rx157_pos
    $P11 = rx157_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx157_pos)
    rx157_cstack = rx157_cur."!cursor_capture"($P11, "sym")
    goto rxcap159_done473
  rxcap159_fail474:
    goto rx157_fail466
  rxcap159_done473:
    repr_bind_attr_int rx157_cur, rx157_curclass, "$!pos", rx157_pos
    $P11 = rx157_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx157_curclass, "$!pos"
    lt $I11, 0, rx157_fail466
    nqp_rxmark rx157_bstack, rxsubrule160_pass475, -1, 0
  rxsubrule160_pass475:
    rx157_cstack = rx157_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx157_pos, $P11, rx157_curclass, "$!pos"
    rx157_cur."!cursor_pass"(rx157_pos, "quantifier:sym<+>", 'backtrack'=>1)
    .return (rx157_cur)
  rx157_restart465:
    repr_get_attr_obj rx157_cstack, rx157_cur, rx157_curclass, "$!cstack"
  rx157_fail466:
    unless rx157_bstack, rx157_done464
    pop $I19, rx157_bstack
    if_null rx157_cstack, rx157_cstack_done469
    unless rx157_cstack, rx157_cstack_done469
    dec $I19
    set $P11, rx157_cstack[$I19]
  rx157_cstack_done469:
    pop rx157_rep, rx157_bstack
    pop rx157_pos, rx157_bstack
    pop $I19, rx157_bstack
    lt rx157_pos, -1, rx157_done464
    lt rx157_pos, 0, rx157_fail466
    eq $I19, 0, rx157_fail466
    nqp_islist $I20, rx157_cstack
    unless $I20, rx157_jump467
    elements $I18, rx157_bstack
    le $I18, 0, rx157_cut468
    dec $I18
    set $I18, rx157_bstack[$I18]
  rx157_cut468:
    assign rx157_cstack, $I18
  rx157_jump467:
    jump $I19
  rx157_done464:
    rx157_cur."!cursor_fail"()
    .return (rx157_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<?>" :subid("cuid_34_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 161
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx161_tgt
    .local int rx161_pos
    .local int rx161_off
    .local int rx161_eos
    .local int rx161_rep
    .local pmc rx161_cur
    .local pmc rx161_curclass
    .local pmc rx161_bstack
    .local pmc rx161_cstack
    (rx161_cur, rx161_tgt, rx161_pos, rx161_curclass, rx161_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx161_cur
    length rx161_eos, rx161_tgt
    eq $I19, 1, rx161_restart478
    gt rx161_pos, rx161_eos, rx161_fail479
    repr_get_attr_int $I11, self, rx161_curclass, "$!from"
    ne $I11, -1, rxscan162_done485
    goto rxscan162_scan484
  rxscan162_loop483:
    inc rx161_pos
    gt rx161_pos, rx161_eos, rx161_fail479
    repr_bind_attr_int rx161_cur, rx161_curclass, "$!from", rx161_pos
  rxscan162_scan484:
    nqp_rxmark rx161_bstack, rxscan162_loop483, rx161_pos, 0
  rxscan162_done485:
    nqp_rxmark rx161_bstack, rxcap163_fail487, rx161_pos, 0
    add $I11, rx161_pos, 1
    gt $I11, rx161_eos, rx161_fail479
    substr $S10, rx161_tgt, rx161_pos, 1
    ne $S10, ucs4:"?", rx161_fail479
    add rx161_pos, 1
    nqp_rxpeek $I19, rx161_bstack, rxcap163_fail487
    inc $I19
    set $I11, rx161_bstack[$I19]
    repr_bind_attr_int rx161_cur, rx161_curclass, "$!pos", rx161_pos
    $P11 = rx161_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx161_pos)
    rx161_cstack = rx161_cur."!cursor_capture"($P11, "sym")
    goto rxcap163_done486
  rxcap163_fail487:
    goto rx161_fail479
  rxcap163_done486:
    repr_bind_attr_int rx161_cur, rx161_curclass, "$!pos", rx161_pos
    $P11 = rx161_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx161_curclass, "$!pos"
    lt $I11, 0, rx161_fail479
    nqp_rxmark rx161_bstack, rxsubrule164_pass488, -1, 0
  rxsubrule164_pass488:
    rx161_cstack = rx161_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx161_pos, $P11, rx161_curclass, "$!pos"
    rx161_cur."!cursor_pass"(rx161_pos, "quantifier:sym<?>", 'backtrack'=>1)
    .return (rx161_cur)
  rx161_restart478:
    repr_get_attr_obj rx161_cstack, rx161_cur, rx161_curclass, "$!cstack"
  rx161_fail479:
    unless rx161_bstack, rx161_done477
    pop $I19, rx161_bstack
    if_null rx161_cstack, rx161_cstack_done482
    unless rx161_cstack, rx161_cstack_done482
    dec $I19
    set $P11, rx161_cstack[$I19]
  rx161_cstack_done482:
    pop rx161_rep, rx161_bstack
    pop rx161_pos, rx161_bstack
    pop $I19, rx161_bstack
    lt rx161_pos, -1, rx161_done477
    lt rx161_pos, 0, rx161_fail479
    eq $I19, 0, rx161_fail479
    nqp_islist $I20, rx161_cstack
    unless $I20, rx161_jump480
    elements $I18, rx161_bstack
    le $I18, 0, rx161_cut481
    dec $I18
    set $I18, rx161_bstack[$I18]
  rx161_cut481:
    assign rx161_cstack, $I18
  rx161_jump480:
    jump $I19
  rx161_done477:
    rx161_cur."!cursor_fail"()
    .return (rx161_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<{N,M}>" :subid("cuid_35_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 162
    .param pmc _lex_param_0 
    .const 'Sub' $P5007 = 'cuid_185_1360426899.567' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_36_1360426899.567' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_37_1360426899.567' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_38_1360426899.567' 
    capture_lex $P5007 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx165_tgt
    .local int rx165_pos
    .local int rx165_off
    .local int rx165_eos
    .local int rx165_rep
    .local pmc rx165_cur
    .local pmc rx165_curclass
    .local pmc rx165_bstack
    .local pmc rx165_cstack
    (rx165_cur, rx165_tgt, rx165_pos, rx165_curclass, rx165_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx165_cur
    length rx165_eos, rx165_tgt
    eq $I19, 1, rx165_restart491
    gt rx165_pos, rx165_eos, rx165_fail492
    repr_get_attr_int $I11, self, rx165_curclass, "$!from"
    ne $I11, -1, rxscan166_done498
    goto rxscan166_scan497
  rxscan166_loop496:
    inc rx165_pos
    gt rx165_pos, rx165_eos, rx165_fail492
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!from", rx165_pos
  rxscan166_scan497:
    nqp_rxmark rx165_bstack, rxscan166_loop496, rx165_pos, 0
  rxscan166_done498:
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_185_1360426899.567' 
    capture_lex $P5002
    $P5003 = $P5002()
    add $I11, rx165_pos, 1
    gt $I11, rx165_eos, rx165_fail492
    substr $S10, rx165_tgt, rx165_pos, 1
    ne $S10, ucs4:"{", rx165_fail492
    add rx165_pos, 1
    .const 'Sub' $P5004 = 'cuid_36_1360426899.567' 
    capture_lex $P5004
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    $P11 = rx165_cur.$P5004()
    repr_get_attr_int $I11, $P11, rx165_curclass, "$!pos"
    lt $I11, 0, rx165_fail492
    nqp_rxmark rx165_bstack, rxsubrule170_pass511, -1, 0
  rxsubrule170_pass511:
    rx165_cstack = rx165_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx165_pos, $P11, rx165_curclass, "$!pos"
    .const 'Sub' $P5005 = 'cuid_37_1360426899.567' 
    capture_lex $P5005
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    $P11 = rx165_cur.$P5005()
    repr_get_attr_int $I11, $P11, rx165_curclass, "$!pos"
    lt $I11, 0, rx165_fail492
    nqp_rxmark rx165_bstack, rxsubrule174_pass524, -1, 0
  rxsubrule174_pass524:
    rx165_cstack = rx165_cur."!cursor_capture"($P11, "1")
    repr_get_attr_int rx165_pos, $P11, rx165_curclass, "$!pos"
    .const 'Sub' $P5006 = 'cuid_38_1360426899.567' 
    capture_lex $P5006
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    $P11 = rx165_cur.$P5006()
    repr_get_attr_int $I11, $P11, rx165_curclass, "$!pos"
    lt $I11, 0, rx165_fail492
    nqp_rxmark rx165_bstack, rxsubrule178_pass537, -1, 0
  rxsubrule178_pass537:
    rx165_cstack = rx165_cur."!cursor_capture"($P11, "2")
    repr_get_attr_int rx165_pos, $P11, rx165_curclass, "$!pos"
    add $I11, rx165_pos, 1
    gt $I11, rx165_eos, rx165_fail492
    substr $S10, rx165_tgt, rx165_pos, 1
    ne $S10, ucs4:"}", rx165_fail492
    add rx165_pos, 1
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    $P11 = rx165_cur."obs"("{N,M} as general quantifier", "** N..M (or ** N..*)")
    repr_get_attr_int $I11, $P11, rx165_curclass, "$!pos"
    lt $I11, 0, rx165_fail492
    repr_get_attr_int rx165_pos, $P11, rx165_curclass, "$!pos"
    rx165_cur."!cursor_pass"(rx165_pos, "quantifier:sym<{N,M}>", 'backtrack'=>1)
    .return (rx165_cur)
  rx165_restart491:
    repr_get_attr_obj rx165_cstack, rx165_cur, rx165_curclass, "$!cstack"
  rx165_fail492:
    unless rx165_bstack, rx165_done490
    pop $I19, rx165_bstack
    if_null rx165_cstack, rx165_cstack_done495
    unless rx165_cstack, rx165_cstack_done495
    dec $I19
    set $P11, rx165_cstack[$I19]
  rx165_cstack_done495:
    pop rx165_rep, rx165_bstack
    pop rx165_pos, rx165_bstack
    pop $I19, rx165_bstack
    lt rx165_pos, -1, rx165_done490
    lt rx165_pos, 0, rx165_fail492
    eq $I19, 0, rx165_fail492
    nqp_islist $I20, rx165_cstack
    unless $I20, rx165_jump493
    elements $I18, rx165_bstack
    le $I18, 0, rx165_cut494
    dec $I18
    set $I18, rx165_bstack[$I18]
  rx165_cut494:
    assign rx165_cstack, $I18
  rx165_jump493:
    jump $I19
  rx165_done490:
    rx165_cur."!cursor_fail"()
    .return (rx165_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_185_1360426899.567") :anon :lex :outer("cuid_35_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 162

    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_36_1360426899.567") :anon :lex :outer("cuid_35_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx167_tgt
    .local int rx167_pos
    .local int rx167_off
    .local int rx167_eos
    .local int rx167_rep
    .local pmc rx167_cur
    .local pmc rx167_curclass
    .local pmc rx167_bstack
    .local pmc rx167_cstack
    (rx167_cur, rx167_tgt, rx167_pos, rx167_curclass, rx167_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx167_cur
    length rx167_eos, rx167_tgt
    eq $I19, 1, rx167_restart501
    gt rx167_pos, rx167_eos, rx167_fail502
    repr_get_attr_int $I11, self, rx167_curclass, "$!from"
    ne $I11, -1, rxscan168_done508
    goto rxscan168_scan507
  rxscan168_loop506:
    inc rx167_pos
    gt rx167_pos, rx167_eos, rx167_fail502
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!from", rx167_pos
  rxscan168_scan507:
    nqp_rxmark rx167_bstack, rxscan168_loop506, rx167_pos, 0
  rxscan168_done508:
    nqp_rxmark rx167_bstack, rxquantr169_done510, -1, 0
  rxquantr169_loop509:
    ge rx167_pos, rx167_eos, rx167_fail502
    is_cclass $I11, .CCLASS_NUMERIC, rx167_tgt, rx167_pos
    unless $I11, rx167_fail502
    add rx167_pos, 1
    nqp_rxpeek $I19, rx167_bstack, rxquantr169_done510
    inc $I19
    inc $I19
    set rx167_rep, rx167_bstack[$I19]
    nqp_rxcommit rx167_bstack, rxquantr169_done510
    inc rx167_rep
    nqp_rxmark rx167_bstack, rxquantr169_done510, rx167_pos, rx167_rep
    goto rxquantr169_loop509
  rxquantr169_done510:
    rx167_cur."!cursor_pass"(rx167_pos, 'backtrack'=>1)
    .return (rx167_cur)
  rx167_restart501:
    repr_get_attr_obj rx167_cstack, rx167_cur, rx167_curclass, "$!cstack"
  rx167_fail502:
    unless rx167_bstack, rx167_done500
    pop $I19, rx167_bstack
    if_null rx167_cstack, rx167_cstack_done505
    unless rx167_cstack, rx167_cstack_done505
    dec $I19
    set $P11, rx167_cstack[$I19]
  rx167_cstack_done505:
    pop rx167_rep, rx167_bstack
    pop rx167_pos, rx167_bstack
    pop $I19, rx167_bstack
    lt rx167_pos, -1, rx167_done500
    lt rx167_pos, 0, rx167_fail502
    eq $I19, 0, rx167_fail502
    nqp_islist $I20, rx167_cstack
    unless $I20, rx167_jump503
    elements $I18, rx167_bstack
    le $I18, 0, rx167_cut504
    dec $I18
    set $I18, rx167_bstack[$I18]
  rx167_cut504:
    assign rx167_cstack, $I18
  rx167_jump503:
    jump $I19
  rx167_done500:
    rx167_cur."!cursor_fail"()
    .return (rx167_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_37_1360426899.567") :anon :lex :outer("cuid_35_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx171_tgt
    .local int rx171_pos
    .local int rx171_off
    .local int rx171_eos
    .local int rx171_rep
    .local pmc rx171_cur
    .local pmc rx171_curclass
    .local pmc rx171_bstack
    .local pmc rx171_cstack
    (rx171_cur, rx171_tgt, rx171_pos, rx171_curclass, rx171_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx171_cur
    length rx171_eos, rx171_tgt
    eq $I19, 1, rx171_restart514
    gt rx171_pos, rx171_eos, rx171_fail515
    repr_get_attr_int $I11, self, rx171_curclass, "$!from"
    ne $I11, -1, rxscan172_done521
    goto rxscan172_scan520
  rxscan172_loop519:
    inc rx171_pos
    gt rx171_pos, rx171_eos, rx171_fail515
    repr_bind_attr_int rx171_cur, rx171_curclass, "$!from", rx171_pos
  rxscan172_scan520:
    nqp_rxmark rx171_bstack, rxscan172_loop519, rx171_pos, 0
  rxscan172_done521:
    nqp_rxmark rx171_bstack, rxquantr173_done523, rx171_pos, 0
  rxquantr173_loop522:
    add $I11, rx171_pos, 1
    gt $I11, rx171_eos, rx171_fail515
    substr $S10, rx171_tgt, rx171_pos, 1
    ne $S10, ucs4:",", rx171_fail515
    add rx171_pos, 1
    nqp_rxpeek $I19, rx171_bstack, rxquantr173_done523
    inc $I19
    inc $I19
    set rx171_rep, rx171_bstack[$I19]
    nqp_rxcommit rx171_bstack, rxquantr173_done523
    inc rx171_rep
  rxquantr173_done523:
    rx171_cur."!cursor_pass"(rx171_pos, 'backtrack'=>1)
    .return (rx171_cur)
  rx171_restart514:
    repr_get_attr_obj rx171_cstack, rx171_cur, rx171_curclass, "$!cstack"
  rx171_fail515:
    unless rx171_bstack, rx171_done513
    pop $I19, rx171_bstack
    if_null rx171_cstack, rx171_cstack_done518
    unless rx171_cstack, rx171_cstack_done518
    dec $I19
    set $P11, rx171_cstack[$I19]
  rx171_cstack_done518:
    pop rx171_rep, rx171_bstack
    pop rx171_pos, rx171_bstack
    pop $I19, rx171_bstack
    lt rx171_pos, -1, rx171_done513
    lt rx171_pos, 0, rx171_fail515
    eq $I19, 0, rx171_fail515
    nqp_islist $I20, rx171_cstack
    unless $I20, rx171_jump516
    elements $I18, rx171_bstack
    le $I18, 0, rx171_cut517
    dec $I18
    set $I18, rx171_bstack[$I18]
  rx171_cut517:
    assign rx171_cstack, $I18
  rx171_jump516:
    jump $I19
  rx171_done513:
    rx171_cur."!cursor_fail"()
    .return (rx171_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_38_1360426899.567") :anon :lex :outer("cuid_35_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx175_tgt
    .local int rx175_pos
    .local int rx175_off
    .local int rx175_eos
    .local int rx175_rep
    .local pmc rx175_cur
    .local pmc rx175_curclass
    .local pmc rx175_bstack
    .local pmc rx175_cstack
    (rx175_cur, rx175_tgt, rx175_pos, rx175_curclass, rx175_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx175_cur
    length rx175_eos, rx175_tgt
    eq $I19, 1, rx175_restart527
    gt rx175_pos, rx175_eos, rx175_fail528
    repr_get_attr_int $I11, self, rx175_curclass, "$!from"
    ne $I11, -1, rxscan176_done534
    goto rxscan176_scan533
  rxscan176_loop532:
    inc rx175_pos
    gt rx175_pos, rx175_eos, rx175_fail528
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!from", rx175_pos
  rxscan176_scan533:
    nqp_rxmark rx175_bstack, rxscan176_loop532, rx175_pos, 0
  rxscan176_done534:
    nqp_rxmark rx175_bstack, rxquantr177_done536, rx175_pos, 0
  rxquantr177_loop535:
    ge rx175_pos, rx175_eos, rx175_fail528
    is_cclass $I11, .CCLASS_NUMERIC, rx175_tgt, rx175_pos
    unless $I11, rx175_fail528
    add rx175_pos, 1
    nqp_rxpeek $I19, rx175_bstack, rxquantr177_done536
    inc $I19
    inc $I19
    set rx175_rep, rx175_bstack[$I19]
    nqp_rxcommit rx175_bstack, rxquantr177_done536
    inc rx175_rep
    nqp_rxmark rx175_bstack, rxquantr177_done536, rx175_pos, rx175_rep
    goto rxquantr177_loop535
  rxquantr177_done536:
    rx175_cur."!cursor_pass"(rx175_pos, 'backtrack'=>1)
    .return (rx175_cur)
  rx175_restart527:
    repr_get_attr_obj rx175_cstack, rx175_cur, rx175_curclass, "$!cstack"
  rx175_fail528:
    unless rx175_bstack, rx175_done526
    pop $I19, rx175_bstack
    if_null rx175_cstack, rx175_cstack_done531
    unless rx175_cstack, rx175_cstack_done531
    dec $I19
    set $P11, rx175_cstack[$I19]
  rx175_cstack_done531:
    pop rx175_rep, rx175_bstack
    pop rx175_pos, rx175_bstack
    pop $I19, rx175_bstack
    lt rx175_pos, -1, rx175_done526
    lt rx175_pos, 0, rx175_fail528
    eq $I19, 0, rx175_fail528
    nqp_islist $I20, rx175_cstack
    unless $I20, rx175_jump529
    elements $I18, rx175_bstack
    le $I18, 0, rx175_cut530
    dec $I18
    set $I18, rx175_bstack[$I18]
  rx175_cut530:
    assign rx175_cstack, $I18
  rx175_jump529:
    jump $I19
  rx175_done526:
    rx175_cur."!cursor_fail"()
    .return (rx175_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<**>" :subid("cuid_39_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 165
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx180_tgt
    .local int rx180_pos
    .local int rx180_off
    .local int rx180_eos
    .local int rx180_rep
    .local pmc rx180_cur
    .local pmc rx180_curclass
    .local pmc rx180_bstack
    .local pmc rx180_cstack
    (rx180_cur, rx180_tgt, rx180_pos, rx180_curclass, rx180_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx180_cur
    length rx180_eos, rx180_tgt
    eq $I19, 1, rx180_restart541
    gt rx180_pos, rx180_eos, rx180_fail542
    repr_get_attr_int $I11, self, rx180_curclass, "$!from"
    ne $I11, -1, rxscan181_done548
    goto rxscan181_scan547
  rxscan181_loop546:
    inc rx180_pos
    gt rx180_pos, rx180_eos, rx180_fail542
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!from", rx180_pos
  rxscan181_scan547:
    nqp_rxmark rx180_bstack, rxscan181_loop546, rx180_pos, 0
  rxscan181_done548:
    nqp_rxmark rx180_bstack, rxcap182_fail550, rx180_pos, 0
    add $I11, rx180_pos, 2
    gt $I11, rx180_eos, rx180_fail542
    substr $S10, rx180_tgt, rx180_pos, 2
    ne $S10, ucs4:"**", rx180_fail542
    add rx180_pos, 2
    nqp_rxpeek $I19, rx180_bstack, rxcap182_fail550
    inc $I19
    set $I11, rx180_bstack[$I19]
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx180_pos)
    rx180_cstack = rx180_cur."!cursor_capture"($P11, "sym")
    goto rxcap182_done549
  rxcap182_fail550:
    goto rx180_fail542
  rxcap182_done549:
    nqp_rxmark rx180_bstack, rxquantr183_done552, rx180_pos, 0
  rxquantr183_loop551:
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail542
    goto rxsubrule184_pass553
  rxsubrule184_back554:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail542
  rxsubrule184_pass553:
    rx180_cstack = rx180_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule184_back554
    push rx180_bstack, $I11
    push rx180_bstack, 0
    push rx180_bstack, rx180_pos
    elements $I11, rx180_cstack
    push rx180_bstack, $I11
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    nqp_rxpeek $I19, rx180_bstack, rxquantr183_done552
    inc $I19
    inc $I19
    set rx180_rep, rx180_bstack[$I19]
    nqp_rxcommit rx180_bstack, rxquantr183_done552
    inc rx180_rep
  rxquantr183_done552:
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail542
    nqp_rxmark rx180_bstack, rxsubrule185_pass555, -1, 0
  rxsubrule185_pass555:
    rx180_cstack = rx180_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    nqp_rxmark rx180_bstack, rxquantr186_done557, rx180_pos, 0
  rxquantr186_loop556:
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail542
    goto rxsubrule187_pass558
  rxsubrule187_back559:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail542
  rxsubrule187_pass558:
    rx180_cstack = rx180_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule187_back559
    push rx180_bstack, $I11
    push rx180_bstack, 0
    push rx180_bstack, rx180_pos
    elements $I11, rx180_cstack
    push rx180_bstack, $I11
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    nqp_rxpeek $I19, rx180_bstack, rxquantr186_done557
    inc $I19
    inc $I19
    set rx180_rep, rx180_bstack[$I19]
    nqp_rxcommit rx180_bstack, rxquantr186_done557
    inc rx180_rep
  rxquantr186_done557:
    nqp_rxmark rx180_bstack, rxcap188_fail561, rx180_pos, 0
    nqp_rxmark rx180_bstack, rxquantr189_done563, -1, 0
  rxquantr189_loop562:
    ge rx180_pos, rx180_eos, rx180_fail542
    is_cclass $I11, .CCLASS_NUMERIC, rx180_tgt, rx180_pos
    unless $I11, rx180_fail542
    add rx180_pos, 1
    nqp_rxpeek $I19, rx180_bstack, rxquantr189_done563
    inc $I19
    inc $I19
    set rx180_rep, rx180_bstack[$I19]
    nqp_rxcommit rx180_bstack, rxquantr189_done563
    inc rx180_rep
    nqp_rxmark rx180_bstack, rxquantr189_done563, rx180_pos, rx180_rep
    goto rxquantr189_loop562
  rxquantr189_done563:
    nqp_rxpeek $I19, rx180_bstack, rxcap188_fail561
    inc $I19
    set $I11, rx180_bstack[$I19]
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx180_pos)
    rx180_cstack = rx180_cur."!cursor_capture"($P11, "min")
    goto rxcap188_done560
  rxcap188_fail561:
    goto rx180_fail542
  rxcap188_done560:
    nqp_rxmark rx180_bstack, rxquantr190_done565, rx180_pos, 0
  rxquantr190_loop564:
    add $I11, rx180_pos, 2
    gt $I11, rx180_eos, rx180_fail542
    substr $S10, rx180_tgt, rx180_pos, 2
    ne $S10, ucs4:"..", rx180_fail542
    add rx180_pos, 2
    nqp_rxmark rx180_bstack, rxcap191_fail567, rx180_pos, 0
  alt192_0569:
    nqp_rxmark rx180_bstack, alt192_1572, rx180_pos, 0
    nqp_rxmark rx180_bstack, rxquantr193_done571, -1, 0
  rxquantr193_loop570:
    ge rx180_pos, rx180_eos, rx180_fail542
    is_cclass $I11, .CCLASS_NUMERIC, rx180_tgt, rx180_pos
    unless $I11, rx180_fail542
    add rx180_pos, 1
    nqp_rxpeek $I19, rx180_bstack, rxquantr193_done571
    inc $I19
    inc $I19
    set rx180_rep, rx180_bstack[$I19]
    nqp_rxcommit rx180_bstack, rxquantr193_done571
    inc rx180_rep
    nqp_rxmark rx180_bstack, rxquantr193_done571, rx180_pos, rx180_rep
    goto rxquantr193_loop570
  rxquantr193_done571:
    goto alt192_end568
  alt192_1572:
    nqp_rxmark rx180_bstack, alt192_2573, rx180_pos, 0
    add $I11, rx180_pos, 1
    gt $I11, rx180_eos, rx180_fail542
    substr $S10, rx180_tgt, rx180_pos, 1
    ne $S10, ucs4:"*", rx180_fail542
    add rx180_pos, 1
    goto alt192_end568
  alt192_2573:
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."panic"("Only integers or '*' allowed as range quantifier endpoint")
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail542
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
  alt192_end568:
    nqp_rxpeek $I19, rx180_bstack, rxcap191_fail567
    inc $I19
    set $I11, rx180_bstack[$I19]
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx180_pos)
    rx180_cstack = rx180_cur."!cursor_capture"($P11, "max")
    goto rxcap191_done566
  rxcap191_fail567:
    goto rx180_fail542
  rxcap191_done566:
    nqp_rxpeek $I19, rx180_bstack, rxquantr190_done565
    inc $I19
    inc $I19
    set rx180_rep, rx180_bstack[$I19]
    nqp_rxcommit rx180_bstack, rxquantr190_done565
    inc rx180_rep
  rxquantr190_done565:
    rx180_cur."!cursor_pass"(rx180_pos, "quantifier:sym<**>", 'backtrack'=>1)
    .return (rx180_cur)
  rx180_restart541:
    repr_get_attr_obj rx180_cstack, rx180_cur, rx180_curclass, "$!cstack"
  rx180_fail542:
    unless rx180_bstack, rx180_done540
    pop $I19, rx180_bstack
    if_null rx180_cstack, rx180_cstack_done545
    unless rx180_cstack, rx180_cstack_done545
    dec $I19
    set $P11, rx180_cstack[$I19]
  rx180_cstack_done545:
    pop rx180_rep, rx180_bstack
    pop rx180_pos, rx180_bstack
    pop $I19, rx180_bstack
    lt rx180_pos, -1, rx180_done540
    lt rx180_pos, 0, rx180_fail542
    eq $I19, 0, rx180_fail542
    nqp_islist $I20, rx180_cstack
    unless $I20, rx180_jump543
    elements $I18, rx180_bstack
    le $I18, 0, rx180_cut544
    dec $I18
    set $I18, rx180_bstack[$I18]
  rx180_cut544:
    assign rx180_cstack, $I18
  rx180_jump543:
    jump $I19
  rx180_done540:
    rx180_cur."!cursor_fail"()
    .return (rx180_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backmod" :subid("cuid_40_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 179
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_41_1360426899.567' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx195_tgt
    .local int rx195_pos
    .local int rx195_off
    .local int rx195_eos
    .local int rx195_rep
    .local pmc rx195_cur
    .local pmc rx195_curclass
    .local pmc rx195_bstack
    .local pmc rx195_cstack
    (rx195_cur, rx195_tgt, rx195_pos, rx195_curclass, rx195_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx195_cur
    length rx195_eos, rx195_tgt
    eq $I19, 1, rx195_restart577
    gt rx195_pos, rx195_eos, rx195_fail578
    repr_get_attr_int $I11, self, rx195_curclass, "$!from"
    ne $I11, -1, rxscan196_done584
    goto rxscan196_scan583
  rxscan196_loop582:
    inc rx195_pos
    gt rx195_pos, rx195_eos, rx195_fail578
    repr_bind_attr_int rx195_cur, rx195_curclass, "$!from", rx195_pos
  rxscan196_scan583:
    nqp_rxmark rx195_bstack, rxscan196_loop582, rx195_pos, 0
  rxscan196_done584:
    nqp_rxmark rx195_bstack, rxquantr197_done586, rx195_pos, 0
  rxquantr197_loop585:
    add $I11, rx195_pos, 1
    gt $I11, rx195_eos, rx195_fail578
    substr $S10, rx195_tgt, rx195_pos, 1
    ne $S10, ucs4:":", rx195_fail578
    add rx195_pos, 1
    nqp_rxpeek $I19, rx195_bstack, rxquantr197_done586
    inc $I19
    inc $I19
    set rx195_rep, rx195_bstack[$I19]
    nqp_rxcommit rx195_bstack, rxquantr197_done586
    inc rx195_rep
  rxquantr197_done586:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt198_0588
    nqp_push_label $P11, alt198_1589
    nqp_push_label $P11, alt198_2590
    nqp_rxmark rx195_bstack, alt198_end587, -1, 0
    rx195_cur."!alt"(rx195_pos, "alt_nfa__9_1360426899.98", $P11)
    goto rx195_fail578
  alt198_0588:
    add $I11, rx195_pos, 1
    gt $I11, rx195_eos, rx195_fail578
    substr $S10, rx195_tgt, rx195_pos, 1
    ne $S10, ucs4:"?", rx195_fail578
    add rx195_pos, 1
    goto alt198_end587
  alt198_1589:
    add $I11, rx195_pos, 1
    gt $I11, rx195_eos, rx195_fail578
    substr $S10, rx195_tgt, rx195_pos, 1
    ne $S10, ucs4:"!", rx195_fail578
    add rx195_pos, 1
    goto alt198_end587
  alt198_2590:
    .const 'Sub' $P5001 = 'cuid_41_1360426899.567' 
    capture_lex $P5001
    repr_bind_attr_int rx195_cur, rx195_curclass, "$!pos", rx195_pos
    $P11 = rx195_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx195_curclass, "$!pos"
    ge $I11, 0, rx195_fail578
    goto alt198_end587
  alt198_end587:
    nqp_rxcommit rx195_bstack, alt198_end587
    rx195_cur."!cursor_pass"(rx195_pos, "backmod", 'backtrack'=>1)
    .return (rx195_cur)
  rx195_restart577:
    repr_get_attr_obj rx195_cstack, rx195_cur, rx195_curclass, "$!cstack"
  rx195_fail578:
    unless rx195_bstack, rx195_done576
    pop $I19, rx195_bstack
    if_null rx195_cstack, rx195_cstack_done581
    unless rx195_cstack, rx195_cstack_done581
    dec $I19
    set $P11, rx195_cstack[$I19]
  rx195_cstack_done581:
    pop rx195_rep, rx195_bstack
    pop rx195_pos, rx195_bstack
    pop $I19, rx195_bstack
    lt rx195_pos, -1, rx195_done576
    lt rx195_pos, 0, rx195_fail578
    eq $I19, 0, rx195_fail578
    nqp_islist $I20, rx195_cstack
    unless $I20, rx195_jump579
    elements $I18, rx195_bstack
    le $I18, 0, rx195_cut580
    dec $I18
    set $I18, rx195_bstack[$I18]
  rx195_cut580:
    assign rx195_cstack, $I18
  rx195_jump579:
    jump $I19
  rx195_done576:
    rx195_cur."!cursor_fail"()
    .return (rx195_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_41_1360426899.567") :anon :lex :outer("cuid_40_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx199_tgt
    .local int rx199_pos
    .local int rx199_off
    .local int rx199_eos
    .local int rx199_rep
    .local pmc rx199_cur
    .local pmc rx199_curclass
    .local pmc rx199_bstack
    .local pmc rx199_cstack
    (rx199_cur, rx199_tgt, rx199_pos, rx199_curclass, rx199_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx199_cur
    length rx199_eos, rx199_tgt
    eq $I19, 1, rx199_restart593
    gt rx199_pos, rx199_eos, rx199_fail594
    repr_get_attr_int $I11, self, rx199_curclass, "$!from"
    ne $I11, -1, rxscan200_done600
    goto rxscan200_scan599
  rxscan200_loop598:
    inc rx199_pos
    gt rx199_pos, rx199_eos, rx199_fail594
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!from", rx199_pos
  rxscan200_scan599:
    nqp_rxmark rx199_bstack, rxscan200_loop598, rx199_pos, 0
  rxscan200_done600:
    add $I11, rx199_pos, 1
    gt $I11, rx199_eos, rx199_fail594
    substr $S10, rx199_tgt, rx199_pos, 1
    ne $S10, ucs4:":", rx199_fail594
    add rx199_pos, 1
    rx199_cur."!cursor_pass"(rx199_pos, 'backtrack'=>1)
    .return (rx199_cur)
  rx199_restart593:
    repr_get_attr_obj rx199_cstack, rx199_cur, rx199_curclass, "$!cstack"
  rx199_fail594:
    unless rx199_bstack, rx199_done592
    pop $I19, rx199_bstack
    if_null rx199_cstack, rx199_cstack_done597
    unless rx199_cstack, rx199_cstack_done597
    dec $I19
    set $P11, rx199_cstack[$I19]
  rx199_cstack_done597:
    pop rx199_rep, rx199_bstack
    pop rx199_pos, rx199_bstack
    pop $I19, rx199_bstack
    lt rx199_pos, -1, rx199_done592
    lt rx199_pos, 0, rx199_fail594
    eq $I19, 0, rx199_fail594
    nqp_islist $I20, rx199_cstack
    unless $I20, rx199_jump595
    elements $I18, rx199_bstack
    le $I18, 0, rx199_cut596
    dec $I18
    set $I18, rx199_bstack[$I18]
  rx199_cut596:
    assign rx199_cstack, $I18
  rx199_jump595:
    jump $I19
  rx199_done592:
    rx199_cur."!cursor_fail"()
    .return (rx199_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar" :subid("cuid_42_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 181
    .param pmc self 
    $P5001 = self."!protoregex"("metachar")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<ws>" :subid("cuid_43_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 182
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx201_tgt
    .local int rx201_pos
    .local int rx201_off
    .local int rx201_eos
    .local int rx201_rep
    .local pmc rx201_cur
    .local pmc rx201_curclass
    .local pmc rx201_bstack
    .local pmc rx201_cstack
    (rx201_cur, rx201_tgt, rx201_pos, rx201_curclass, rx201_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx201_cur
    length rx201_eos, rx201_tgt
    eq $I19, 1, rx201_restart603
    gt rx201_pos, rx201_eos, rx201_fail604
    repr_get_attr_int $I11, self, rx201_curclass, "$!from"
    ne $I11, -1, rxscan202_done610
    goto rxscan202_scan609
  rxscan202_loop608:
    inc rx201_pos
    gt rx201_pos, rx201_eos, rx201_fail604
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!from", rx201_pos
  rxscan202_scan609:
    nqp_rxmark rx201_bstack, rxscan202_loop608, rx201_pos, 0
  rxscan202_done610:
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail604
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    rx201_cur."!cursor_pass"(rx201_pos, "metachar:sym<ws>", 'backtrack'=>1)
    .return (rx201_cur)
  rx201_restart603:
    repr_get_attr_obj rx201_cstack, rx201_cur, rx201_curclass, "$!cstack"
  rx201_fail604:
    unless rx201_bstack, rx201_done602
    pop $I19, rx201_bstack
    if_null rx201_cstack, rx201_cstack_done607
    unless rx201_cstack, rx201_cstack_done607
    dec $I19
    set $P11, rx201_cstack[$I19]
  rx201_cstack_done607:
    pop rx201_rep, rx201_bstack
    pop rx201_pos, rx201_bstack
    pop $I19, rx201_bstack
    lt rx201_pos, -1, rx201_done602
    lt rx201_pos, 0, rx201_fail604
    eq $I19, 0, rx201_fail604
    nqp_islist $I20, rx201_cstack
    unless $I20, rx201_jump605
    elements $I18, rx201_bstack
    le $I18, 0, rx201_cut606
    dec $I18
    set $I18, rx201_bstack[$I18]
  rx201_cut606:
    assign rx201_cstack, $I18
  rx201_jump605:
    jump $I19
  rx201_done602:
    rx201_cur."!cursor_fail"()
    .return (rx201_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<[ ]>" :subid("cuid_44_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 183
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx204_tgt
    .local int rx204_pos
    .local int rx204_off
    .local int rx204_eos
    .local int rx204_rep
    .local pmc rx204_cur
    .local pmc rx204_curclass
    .local pmc rx204_bstack
    .local pmc rx204_cstack
    (rx204_cur, rx204_tgt, rx204_pos, rx204_curclass, rx204_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx204_cur
    length rx204_eos, rx204_tgt
    eq $I19, 1, rx204_restart614
    gt rx204_pos, rx204_eos, rx204_fail615
    repr_get_attr_int $I11, self, rx204_curclass, "$!from"
    ne $I11, -1, rxscan205_done621
    goto rxscan205_scan620
  rxscan205_loop619:
    inc rx204_pos
    gt rx204_pos, rx204_eos, rx204_fail615
    repr_bind_attr_int rx204_cur, rx204_curclass, "$!from", rx204_pos
  rxscan205_scan620:
    nqp_rxmark rx204_bstack, rxscan205_loop619, rx204_pos, 0
  rxscan205_done621:
    add $I11, rx204_pos, 1
    gt $I11, rx204_eos, rx204_fail615
    substr $S10, rx204_tgt, rx204_pos, 1
    ne $S10, ucs4:"[", rx204_fail615
    add rx204_pos, 1
    repr_bind_attr_int rx204_cur, rx204_curclass, "$!pos", rx204_pos
    $P11 = rx204_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx204_curclass, "$!pos"
    lt $I11, 0, rx204_fail615
    nqp_rxmark rx204_bstack, rxsubrule206_pass622, -1, 0
  rxsubrule206_pass622:
    rx204_cstack = rx204_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx204_pos, $P11, rx204_curclass, "$!pos"
    add $I11, rx204_pos, 1
    gt $I11, rx204_eos, rx204_fail615
    substr $S10, rx204_tgt, rx204_pos, 1
    ne $S10, ucs4:"]", rx204_fail615
    add rx204_pos, 1
    rx204_cur."!cursor_pass"(rx204_pos, "metachar:sym<[ ]>", 'backtrack'=>1)
    .return (rx204_cur)
  rx204_restart614:
    repr_get_attr_obj rx204_cstack, rx204_cur, rx204_curclass, "$!cstack"
  rx204_fail615:
    unless rx204_bstack, rx204_done613
    pop $I19, rx204_bstack
    if_null rx204_cstack, rx204_cstack_done618
    unless rx204_cstack, rx204_cstack_done618
    dec $I19
    set $P11, rx204_cstack[$I19]
  rx204_cstack_done618:
    pop rx204_rep, rx204_bstack
    pop rx204_pos, rx204_bstack
    pop $I19, rx204_bstack
    lt rx204_pos, -1, rx204_done613
    lt rx204_pos, 0, rx204_fail615
    eq $I19, 0, rx204_fail615
    nqp_islist $I20, rx204_cstack
    unless $I20, rx204_jump616
    elements $I18, rx204_bstack
    le $I18, 0, rx204_cut617
    dec $I18
    set $I18, rx204_bstack[$I18]
  rx204_cut617:
    assign rx204_cstack, $I18
  rx204_jump616:
    jump $I19
  rx204_done613:
    rx204_cur."!cursor_fail"()
    .return (rx204_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<( )>" :subid("cuid_45_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 184
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx207_tgt
    .local int rx207_pos
    .local int rx207_off
    .local int rx207_eos
    .local int rx207_rep
    .local pmc rx207_cur
    .local pmc rx207_curclass
    .local pmc rx207_bstack
    .local pmc rx207_cstack
    (rx207_cur, rx207_tgt, rx207_pos, rx207_curclass, rx207_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx207_cur
    length rx207_eos, rx207_tgt
    eq $I19, 1, rx207_restart625
    gt rx207_pos, rx207_eos, rx207_fail626
    repr_get_attr_int $I11, self, rx207_curclass, "$!from"
    ne $I11, -1, rxscan208_done632
    goto rxscan208_scan631
  rxscan208_loop630:
    inc rx207_pos
    gt rx207_pos, rx207_eos, rx207_fail626
    repr_bind_attr_int rx207_cur, rx207_curclass, "$!from", rx207_pos
  rxscan208_scan631:
    nqp_rxmark rx207_bstack, rxscan208_loop630, rx207_pos, 0
  rxscan208_done632:
    add $I11, rx207_pos, 1
    gt $I11, rx207_eos, rx207_fail626
    substr $S10, rx207_tgt, rx207_pos, 1
    ne $S10, ucs4:"(", rx207_fail626
    add rx207_pos, 1
    repr_bind_attr_int rx207_cur, rx207_curclass, "$!pos", rx207_pos
    $P11 = rx207_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx207_curclass, "$!pos"
    lt $I11, 0, rx207_fail626
    nqp_rxmark rx207_bstack, rxsubrule209_pass633, -1, 0
  rxsubrule209_pass633:
    rx207_cstack = rx207_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx207_pos, $P11, rx207_curclass, "$!pos"
    add $I11, rx207_pos, 1
    gt $I11, rx207_eos, rx207_fail626
    substr $S10, rx207_tgt, rx207_pos, 1
    ne $S10, ucs4:")", rx207_fail626
    add rx207_pos, 1
    rx207_cur."!cursor_pass"(rx207_pos, "metachar:sym<( )>", 'backtrack'=>1)
    .return (rx207_cur)
  rx207_restart625:
    repr_get_attr_obj rx207_cstack, rx207_cur, rx207_curclass, "$!cstack"
  rx207_fail626:
    unless rx207_bstack, rx207_done624
    pop $I19, rx207_bstack
    if_null rx207_cstack, rx207_cstack_done629
    unless rx207_cstack, rx207_cstack_done629
    dec $I19
    set $P11, rx207_cstack[$I19]
  rx207_cstack_done629:
    pop rx207_rep, rx207_bstack
    pop rx207_pos, rx207_bstack
    pop $I19, rx207_bstack
    lt rx207_pos, -1, rx207_done624
    lt rx207_pos, 0, rx207_fail626
    eq $I19, 0, rx207_fail626
    nqp_islist $I20, rx207_cstack
    unless $I20, rx207_jump627
    elements $I18, rx207_bstack
    le $I18, 0, rx207_cut628
    dec $I18
    set $I18, rx207_bstack[$I18]
  rx207_cut628:
    assign rx207_cstack, $I18
  rx207_jump627:
    jump $I19
  rx207_done624:
    rx207_cur."!cursor_fail"()
    .return (rx207_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<'>" :subid("cuid_46_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 185
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx210_tgt
    .local int rx210_pos
    .local int rx210_off
    .local int rx210_eos
    .local int rx210_rep
    .local pmc rx210_cur
    .local pmc rx210_curclass
    .local pmc rx210_bstack
    .local pmc rx210_cstack
    (rx210_cur, rx210_tgt, rx210_pos, rx210_curclass, rx210_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx210_cur
    length rx210_eos, rx210_tgt
    eq $I19, 1, rx210_restart636
    gt rx210_pos, rx210_eos, rx210_fail637
    repr_get_attr_int $I11, self, rx210_curclass, "$!from"
    ne $I11, -1, rxscan211_done643
    goto rxscan211_scan642
  rxscan211_loop641:
    inc rx210_pos
    gt rx210_pos, rx210_eos, rx210_fail637
    repr_bind_attr_int rx210_cur, rx210_curclass, "$!from", rx210_pos
  rxscan211_scan642:
    nqp_rxmark rx210_bstack, rxscan211_loop641, rx210_pos, 0
  rxscan211_done643:
    ge rx210_pos, rx210_eos, rx210_fail637
    substr $S11, rx210_tgt, rx210_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx210_fail637
    repr_bind_attr_int rx210_cur, rx210_curclass, "$!pos", rx210_pos
    $P11 = rx210_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx210_curclass, "$!pos"
    lt $I11, 0, rx210_fail637
    nqp_rxmark rx210_bstack, rxsubrule212_pass644, -1, 0
  rxsubrule212_pass644:
    rx210_cstack = rx210_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx210_pos, $P11, rx210_curclass, "$!pos"
    rx210_cur."!cursor_pass"(rx210_pos, "metachar:sym<'>", 'backtrack'=>1)
    .return (rx210_cur)
  rx210_restart636:
    repr_get_attr_obj rx210_cstack, rx210_cur, rx210_curclass, "$!cstack"
  rx210_fail637:
    unless rx210_bstack, rx210_done635
    pop $I19, rx210_bstack
    if_null rx210_cstack, rx210_cstack_done640
    unless rx210_cstack, rx210_cstack_done640
    dec $I19
    set $P11, rx210_cstack[$I19]
  rx210_cstack_done640:
    pop rx210_rep, rx210_bstack
    pop rx210_pos, rx210_bstack
    pop $I19, rx210_bstack
    lt rx210_pos, -1, rx210_done635
    lt rx210_pos, 0, rx210_fail637
    eq $I19, 0, rx210_fail637
    nqp_islist $I20, rx210_cstack
    unless $I20, rx210_jump638
    elements $I18, rx210_bstack
    le $I18, 0, rx210_cut639
    dec $I18
    set $I18, rx210_bstack[$I18]
  rx210_cut639:
    assign rx210_cstack, $I18
  rx210_jump638:
    jump $I19
  rx210_done635:
    rx210_cur."!cursor_fail"()
    .return (rx210_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<\">" :subid("cuid_47_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 186
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx213_tgt
    .local int rx213_pos
    .local int rx213_off
    .local int rx213_eos
    .local int rx213_rep
    .local pmc rx213_cur
    .local pmc rx213_curclass
    .local pmc rx213_bstack
    .local pmc rx213_cstack
    (rx213_cur, rx213_tgt, rx213_pos, rx213_curclass, rx213_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx213_cur
    length rx213_eos, rx213_tgt
    eq $I19, 1, rx213_restart647
    gt rx213_pos, rx213_eos, rx213_fail648
    repr_get_attr_int $I11, self, rx213_curclass, "$!from"
    ne $I11, -1, rxscan214_done654
    goto rxscan214_scan653
  rxscan214_loop652:
    inc rx213_pos
    gt rx213_pos, rx213_eos, rx213_fail648
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!from", rx213_pos
  rxscan214_scan653:
    nqp_rxmark rx213_bstack, rxscan214_loop652, rx213_pos, 0
  rxscan214_done654:
    ge rx213_pos, rx213_eos, rx213_fail648
    substr $S11, rx213_tgt, rx213_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx213_fail648
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail648
    nqp_rxmark rx213_bstack, rxsubrule215_pass655, -1, 0
  rxsubrule215_pass655:
    rx213_cstack = rx213_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    rx213_cur."!cursor_pass"(rx213_pos, "metachar:sym<\">", 'backtrack'=>1)
    .return (rx213_cur)
  rx213_restart647:
    repr_get_attr_obj rx213_cstack, rx213_cur, rx213_curclass, "$!cstack"
  rx213_fail648:
    unless rx213_bstack, rx213_done646
    pop $I19, rx213_bstack
    if_null rx213_cstack, rx213_cstack_done651
    unless rx213_cstack, rx213_cstack_done651
    dec $I19
    set $P11, rx213_cstack[$I19]
  rx213_cstack_done651:
    pop rx213_rep, rx213_bstack
    pop rx213_pos, rx213_bstack
    pop $I19, rx213_bstack
    lt rx213_pos, -1, rx213_done646
    lt rx213_pos, 0, rx213_fail648
    eq $I19, 0, rx213_fail648
    nqp_islist $I20, rx213_cstack
    unless $I20, rx213_jump649
    elements $I18, rx213_bstack
    le $I18, 0, rx213_cut650
    dec $I18
    set $I18, rx213_bstack[$I18]
  rx213_cut650:
    assign rx213_cstack, $I18
  rx213_jump649:
    jump $I19
  rx213_done646:
    rx213_cur."!cursor_fail"()
    .return (rx213_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<.>" :subid("cuid_48_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 187
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx216_tgt
    .local int rx216_pos
    .local int rx216_off
    .local int rx216_eos
    .local int rx216_rep
    .local pmc rx216_cur
    .local pmc rx216_curclass
    .local pmc rx216_bstack
    .local pmc rx216_cstack
    (rx216_cur, rx216_tgt, rx216_pos, rx216_curclass, rx216_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx216_cur
    length rx216_eos, rx216_tgt
    eq $I19, 1, rx216_restart658
    gt rx216_pos, rx216_eos, rx216_fail659
    repr_get_attr_int $I11, self, rx216_curclass, "$!from"
    ne $I11, -1, rxscan217_done665
    goto rxscan217_scan664
  rxscan217_loop663:
    inc rx216_pos
    gt rx216_pos, rx216_eos, rx216_fail659
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!from", rx216_pos
  rxscan217_scan664:
    nqp_rxmark rx216_bstack, rxscan217_loop663, rx216_pos, 0
  rxscan217_done665:
    nqp_rxmark rx216_bstack, rxcap218_fail667, rx216_pos, 0
    add $I11, rx216_pos, 1
    gt $I11, rx216_eos, rx216_fail659
    substr $S10, rx216_tgt, rx216_pos, 1
    ne $S10, ucs4:".", rx216_fail659
    add rx216_pos, 1
    nqp_rxpeek $I19, rx216_bstack, rxcap218_fail667
    inc $I19
    set $I11, rx216_bstack[$I19]
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!pos", rx216_pos
    $P11 = rx216_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx216_pos)
    rx216_cstack = rx216_cur."!cursor_capture"($P11, "sym")
    goto rxcap218_done666
  rxcap218_fail667:
    goto rx216_fail659
  rxcap218_done666:
    rx216_cur."!cursor_pass"(rx216_pos, "metachar:sym<.>", 'backtrack'=>1)
    .return (rx216_cur)
  rx216_restart658:
    repr_get_attr_obj rx216_cstack, rx216_cur, rx216_curclass, "$!cstack"
  rx216_fail659:
    unless rx216_bstack, rx216_done657
    pop $I19, rx216_bstack
    if_null rx216_cstack, rx216_cstack_done662
    unless rx216_cstack, rx216_cstack_done662
    dec $I19
    set $P11, rx216_cstack[$I19]
  rx216_cstack_done662:
    pop rx216_rep, rx216_bstack
    pop rx216_pos, rx216_bstack
    pop $I19, rx216_bstack
    lt rx216_pos, -1, rx216_done657
    lt rx216_pos, 0, rx216_fail659
    eq $I19, 0, rx216_fail659
    nqp_islist $I20, rx216_cstack
    unless $I20, rx216_jump660
    elements $I18, rx216_bstack
    le $I18, 0, rx216_cut661
    dec $I18
    set $I18, rx216_bstack[$I18]
  rx216_cut661:
    assign rx216_cstack, $I18
  rx216_jump660:
    jump $I19
  rx216_done657:
    rx216_cur."!cursor_fail"()
    .return (rx216_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^>" :subid("cuid_49_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 188
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx219_tgt
    .local int rx219_pos
    .local int rx219_off
    .local int rx219_eos
    .local int rx219_rep
    .local pmc rx219_cur
    .local pmc rx219_curclass
    .local pmc rx219_bstack
    .local pmc rx219_cstack
    (rx219_cur, rx219_tgt, rx219_pos, rx219_curclass, rx219_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx219_cur
    length rx219_eos, rx219_tgt
    eq $I19, 1, rx219_restart670
    gt rx219_pos, rx219_eos, rx219_fail671
    repr_get_attr_int $I11, self, rx219_curclass, "$!from"
    ne $I11, -1, rxscan220_done677
    goto rxscan220_scan676
  rxscan220_loop675:
    inc rx219_pos
    gt rx219_pos, rx219_eos, rx219_fail671
    repr_bind_attr_int rx219_cur, rx219_curclass, "$!from", rx219_pos
  rxscan220_scan676:
    nqp_rxmark rx219_bstack, rxscan220_loop675, rx219_pos, 0
  rxscan220_done677:
    nqp_rxmark rx219_bstack, rxcap221_fail679, rx219_pos, 0
    add $I11, rx219_pos, 1
    gt $I11, rx219_eos, rx219_fail671
    substr $S10, rx219_tgt, rx219_pos, 1
    ne $S10, ucs4:"^", rx219_fail671
    add rx219_pos, 1
    nqp_rxpeek $I19, rx219_bstack, rxcap221_fail679
    inc $I19
    set $I11, rx219_bstack[$I19]
    repr_bind_attr_int rx219_cur, rx219_curclass, "$!pos", rx219_pos
    $P11 = rx219_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx219_pos)
    rx219_cstack = rx219_cur."!cursor_capture"($P11, "sym")
    goto rxcap221_done678
  rxcap221_fail679:
    goto rx219_fail671
  rxcap221_done678:
    rx219_cur."!cursor_pass"(rx219_pos, "metachar:sym<^>", 'backtrack'=>1)
    .return (rx219_cur)
  rx219_restart670:
    repr_get_attr_obj rx219_cstack, rx219_cur, rx219_curclass, "$!cstack"
  rx219_fail671:
    unless rx219_bstack, rx219_done669
    pop $I19, rx219_bstack
    if_null rx219_cstack, rx219_cstack_done674
    unless rx219_cstack, rx219_cstack_done674
    dec $I19
    set $P11, rx219_cstack[$I19]
  rx219_cstack_done674:
    pop rx219_rep, rx219_bstack
    pop rx219_pos, rx219_bstack
    pop $I19, rx219_bstack
    lt rx219_pos, -1, rx219_done669
    lt rx219_pos, 0, rx219_fail671
    eq $I19, 0, rx219_fail671
    nqp_islist $I20, rx219_cstack
    unless $I20, rx219_jump672
    elements $I18, rx219_bstack
    le $I18, 0, rx219_cut673
    dec $I18
    set $I18, rx219_bstack[$I18]
  rx219_cut673:
    assign rx219_cstack, $I18
  rx219_jump672:
    jump $I19
  rx219_done669:
    rx219_cur."!cursor_fail"()
    .return (rx219_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^^>" :subid("cuid_50_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 189
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx222_tgt
    .local int rx222_pos
    .local int rx222_off
    .local int rx222_eos
    .local int rx222_rep
    .local pmc rx222_cur
    .local pmc rx222_curclass
    .local pmc rx222_bstack
    .local pmc rx222_cstack
    (rx222_cur, rx222_tgt, rx222_pos, rx222_curclass, rx222_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx222_cur
    length rx222_eos, rx222_tgt
    eq $I19, 1, rx222_restart682
    gt rx222_pos, rx222_eos, rx222_fail683
    repr_get_attr_int $I11, self, rx222_curclass, "$!from"
    ne $I11, -1, rxscan223_done689
    goto rxscan223_scan688
  rxscan223_loop687:
    inc rx222_pos
    gt rx222_pos, rx222_eos, rx222_fail683
    repr_bind_attr_int rx222_cur, rx222_curclass, "$!from", rx222_pos
  rxscan223_scan688:
    nqp_rxmark rx222_bstack, rxscan223_loop687, rx222_pos, 0
  rxscan223_done689:
    nqp_rxmark rx222_bstack, rxcap224_fail691, rx222_pos, 0
    add $I11, rx222_pos, 2
    gt $I11, rx222_eos, rx222_fail683
    substr $S10, rx222_tgt, rx222_pos, 2
    ne $S10, ucs4:"^^", rx222_fail683
    add rx222_pos, 2
    nqp_rxpeek $I19, rx222_bstack, rxcap224_fail691
    inc $I19
    set $I11, rx222_bstack[$I19]
    repr_bind_attr_int rx222_cur, rx222_curclass, "$!pos", rx222_pos
    $P11 = rx222_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx222_pos)
    rx222_cstack = rx222_cur."!cursor_capture"($P11, "sym")
    goto rxcap224_done690
  rxcap224_fail691:
    goto rx222_fail683
  rxcap224_done690:
    rx222_cur."!cursor_pass"(rx222_pos, "metachar:sym<^^>", 'backtrack'=>1)
    .return (rx222_cur)
  rx222_restart682:
    repr_get_attr_obj rx222_cstack, rx222_cur, rx222_curclass, "$!cstack"
  rx222_fail683:
    unless rx222_bstack, rx222_done681
    pop $I19, rx222_bstack
    if_null rx222_cstack, rx222_cstack_done686
    unless rx222_cstack, rx222_cstack_done686
    dec $I19
    set $P11, rx222_cstack[$I19]
  rx222_cstack_done686:
    pop rx222_rep, rx222_bstack
    pop rx222_pos, rx222_bstack
    pop $I19, rx222_bstack
    lt rx222_pos, -1, rx222_done681
    lt rx222_pos, 0, rx222_fail683
    eq $I19, 0, rx222_fail683
    nqp_islist $I20, rx222_cstack
    unless $I20, rx222_jump684
    elements $I18, rx222_bstack
    le $I18, 0, rx222_cut685
    dec $I18
    set $I18, rx222_bstack[$I18]
  rx222_cut685:
    assign rx222_cstack, $I18
  rx222_jump684:
    jump $I19
  rx222_done681:
    rx222_cur."!cursor_fail"()
    .return (rx222_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$>" :subid("cuid_51_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 190
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx225_tgt
    .local int rx225_pos
    .local int rx225_off
    .local int rx225_eos
    .local int rx225_rep
    .local pmc rx225_cur
    .local pmc rx225_curclass
    .local pmc rx225_bstack
    .local pmc rx225_cstack
    (rx225_cur, rx225_tgt, rx225_pos, rx225_curclass, rx225_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx225_cur
    length rx225_eos, rx225_tgt
    eq $I19, 1, rx225_restart694
    gt rx225_pos, rx225_eos, rx225_fail695
    repr_get_attr_int $I11, self, rx225_curclass, "$!from"
    ne $I11, -1, rxscan226_done701
    goto rxscan226_scan700
  rxscan226_loop699:
    inc rx225_pos
    gt rx225_pos, rx225_eos, rx225_fail695
    repr_bind_attr_int rx225_cur, rx225_curclass, "$!from", rx225_pos
  rxscan226_scan700:
    nqp_rxmark rx225_bstack, rxscan226_loop699, rx225_pos, 0
  rxscan226_done701:
    nqp_rxmark rx225_bstack, rxcap227_fail703, rx225_pos, 0
    add $I11, rx225_pos, 1
    gt $I11, rx225_eos, rx225_fail695
    substr $S10, rx225_tgt, rx225_pos, 1
    ne $S10, ucs4:"$", rx225_fail695
    add rx225_pos, 1
    nqp_rxpeek $I19, rx225_bstack, rxcap227_fail703
    inc $I19
    set $I11, rx225_bstack[$I19]
    repr_bind_attr_int rx225_cur, rx225_curclass, "$!pos", rx225_pos
    $P11 = rx225_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx225_pos)
    rx225_cstack = rx225_cur."!cursor_capture"($P11, "sym")
    goto rxcap227_done702
  rxcap227_fail703:
    goto rx225_fail695
  rxcap227_done702:
    rx225_cur."!cursor_pass"(rx225_pos, "metachar:sym<$>", 'backtrack'=>1)
    .return (rx225_cur)
  rx225_restart694:
    repr_get_attr_obj rx225_cstack, rx225_cur, rx225_curclass, "$!cstack"
  rx225_fail695:
    unless rx225_bstack, rx225_done693
    pop $I19, rx225_bstack
    if_null rx225_cstack, rx225_cstack_done698
    unless rx225_cstack, rx225_cstack_done698
    dec $I19
    set $P11, rx225_cstack[$I19]
  rx225_cstack_done698:
    pop rx225_rep, rx225_bstack
    pop rx225_pos, rx225_bstack
    pop $I19, rx225_bstack
    lt rx225_pos, -1, rx225_done693
    lt rx225_pos, 0, rx225_fail695
    eq $I19, 0, rx225_fail695
    nqp_islist $I20, rx225_cstack
    unless $I20, rx225_jump696
    elements $I18, rx225_bstack
    le $I18, 0, rx225_cut697
    dec $I18
    set $I18, rx225_bstack[$I18]
  rx225_cut697:
    assign rx225_cstack, $I18
  rx225_jump696:
    jump $I19
  rx225_done693:
    rx225_cur."!cursor_fail"()
    .return (rx225_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$$>" :subid("cuid_52_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 191
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx228_tgt
    .local int rx228_pos
    .local int rx228_off
    .local int rx228_eos
    .local int rx228_rep
    .local pmc rx228_cur
    .local pmc rx228_curclass
    .local pmc rx228_bstack
    .local pmc rx228_cstack
    (rx228_cur, rx228_tgt, rx228_pos, rx228_curclass, rx228_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx228_cur
    length rx228_eos, rx228_tgt
    eq $I19, 1, rx228_restart706
    gt rx228_pos, rx228_eos, rx228_fail707
    repr_get_attr_int $I11, self, rx228_curclass, "$!from"
    ne $I11, -1, rxscan229_done713
    goto rxscan229_scan712
  rxscan229_loop711:
    inc rx228_pos
    gt rx228_pos, rx228_eos, rx228_fail707
    repr_bind_attr_int rx228_cur, rx228_curclass, "$!from", rx228_pos
  rxscan229_scan712:
    nqp_rxmark rx228_bstack, rxscan229_loop711, rx228_pos, 0
  rxscan229_done713:
    nqp_rxmark rx228_bstack, rxcap230_fail715, rx228_pos, 0
    add $I11, rx228_pos, 2
    gt $I11, rx228_eos, rx228_fail707
    substr $S10, rx228_tgt, rx228_pos, 2
    ne $S10, ucs4:"$$", rx228_fail707
    add rx228_pos, 2
    nqp_rxpeek $I19, rx228_bstack, rxcap230_fail715
    inc $I19
    set $I11, rx228_bstack[$I19]
    repr_bind_attr_int rx228_cur, rx228_curclass, "$!pos", rx228_pos
    $P11 = rx228_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx228_pos)
    rx228_cstack = rx228_cur."!cursor_capture"($P11, "sym")
    goto rxcap230_done714
  rxcap230_fail715:
    goto rx228_fail707
  rxcap230_done714:
    rx228_cur."!cursor_pass"(rx228_pos, "metachar:sym<$$>", 'backtrack'=>1)
    .return (rx228_cur)
  rx228_restart706:
    repr_get_attr_obj rx228_cstack, rx228_cur, rx228_curclass, "$!cstack"
  rx228_fail707:
    unless rx228_bstack, rx228_done705
    pop $I19, rx228_bstack
    if_null rx228_cstack, rx228_cstack_done710
    unless rx228_cstack, rx228_cstack_done710
    dec $I19
    set $P11, rx228_cstack[$I19]
  rx228_cstack_done710:
    pop rx228_rep, rx228_bstack
    pop rx228_pos, rx228_bstack
    pop $I19, rx228_bstack
    lt rx228_pos, -1, rx228_done705
    lt rx228_pos, 0, rx228_fail707
    eq $I19, 0, rx228_fail707
    nqp_islist $I20, rx228_cstack
    unless $I20, rx228_jump708
    elements $I18, rx228_bstack
    le $I18, 0, rx228_cut709
    dec $I18
    set $I18, rx228_bstack[$I18]
  rx228_cut709:
    assign rx228_cstack, $I18
  rx228_jump708:
    jump $I19
  rx228_done705:
    rx228_cur."!cursor_fail"()
    .return (rx228_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:::>" :subid("cuid_53_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 192
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx231_tgt
    .local int rx231_pos
    .local int rx231_off
    .local int rx231_eos
    .local int rx231_rep
    .local pmc rx231_cur
    .local pmc rx231_curclass
    .local pmc rx231_bstack
    .local pmc rx231_cstack
    (rx231_cur, rx231_tgt, rx231_pos, rx231_curclass, rx231_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx231_cur
    length rx231_eos, rx231_tgt
    eq $I19, 1, rx231_restart718
    gt rx231_pos, rx231_eos, rx231_fail719
    repr_get_attr_int $I11, self, rx231_curclass, "$!from"
    ne $I11, -1, rxscan232_done725
    goto rxscan232_scan724
  rxscan232_loop723:
    inc rx231_pos
    gt rx231_pos, rx231_eos, rx231_fail719
    repr_bind_attr_int rx231_cur, rx231_curclass, "$!from", rx231_pos
  rxscan232_scan724:
    nqp_rxmark rx231_bstack, rxscan232_loop723, rx231_pos, 0
  rxscan232_done725:
    nqp_rxmark rx231_bstack, rxcap233_fail727, rx231_pos, 0
    add $I11, rx231_pos, 3
    gt $I11, rx231_eos, rx231_fail719
    substr $S10, rx231_tgt, rx231_pos, 3
    ne $S10, ucs4:":::", rx231_fail719
    add rx231_pos, 3
    nqp_rxpeek $I19, rx231_bstack, rxcap233_fail727
    inc $I19
    set $I11, rx231_bstack[$I19]
    repr_bind_attr_int rx231_cur, rx231_curclass, "$!pos", rx231_pos
    $P11 = rx231_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx231_pos)
    rx231_cstack = rx231_cur."!cursor_capture"($P11, "sym")
    goto rxcap233_done726
  rxcap233_fail727:
    goto rx231_fail719
  rxcap233_done726:
    repr_bind_attr_int rx231_cur, rx231_curclass, "$!pos", rx231_pos
    $P11 = rx231_cur."panic"("::: not yet implemented")
    repr_get_attr_int $I11, $P11, rx231_curclass, "$!pos"
    lt $I11, 0, rx231_fail719
    repr_get_attr_int rx231_pos, $P11, rx231_curclass, "$!pos"
    rx231_cur."!cursor_pass"(rx231_pos, "metachar:sym<:::>", 'backtrack'=>1)
    .return (rx231_cur)
  rx231_restart718:
    repr_get_attr_obj rx231_cstack, rx231_cur, rx231_curclass, "$!cstack"
  rx231_fail719:
    unless rx231_bstack, rx231_done717
    pop $I19, rx231_bstack
    if_null rx231_cstack, rx231_cstack_done722
    unless rx231_cstack, rx231_cstack_done722
    dec $I19
    set $P11, rx231_cstack[$I19]
  rx231_cstack_done722:
    pop rx231_rep, rx231_bstack
    pop rx231_pos, rx231_bstack
    pop $I19, rx231_bstack
    lt rx231_pos, -1, rx231_done717
    lt rx231_pos, 0, rx231_fail719
    eq $I19, 0, rx231_fail719
    nqp_islist $I20, rx231_cstack
    unless $I20, rx231_jump720
    elements $I18, rx231_bstack
    le $I18, 0, rx231_cut721
    dec $I18
    set $I18, rx231_bstack[$I18]
  rx231_cut721:
    assign rx231_cstack, $I18
  rx231_jump720:
    jump $I19
  rx231_done717:
    rx231_cur."!cursor_fail"()
    .return (rx231_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<::>" :subid("cuid_54_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 193
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx235_tgt
    .local int rx235_pos
    .local int rx235_off
    .local int rx235_eos
    .local int rx235_rep
    .local pmc rx235_cur
    .local pmc rx235_curclass
    .local pmc rx235_bstack
    .local pmc rx235_cstack
    (rx235_cur, rx235_tgt, rx235_pos, rx235_curclass, rx235_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx235_cur
    length rx235_eos, rx235_tgt
    eq $I19, 1, rx235_restart731
    gt rx235_pos, rx235_eos, rx235_fail732
    repr_get_attr_int $I11, self, rx235_curclass, "$!from"
    ne $I11, -1, rxscan236_done738
    goto rxscan236_scan737
  rxscan236_loop736:
    inc rx235_pos
    gt rx235_pos, rx235_eos, rx235_fail732
    repr_bind_attr_int rx235_cur, rx235_curclass, "$!from", rx235_pos
  rxscan236_scan737:
    nqp_rxmark rx235_bstack, rxscan236_loop736, rx235_pos, 0
  rxscan236_done738:
    nqp_rxmark rx235_bstack, rxcap237_fail740, rx235_pos, 0
    add $I11, rx235_pos, 2
    gt $I11, rx235_eos, rx235_fail732
    substr $S10, rx235_tgt, rx235_pos, 2
    ne $S10, ucs4:"::", rx235_fail732
    add rx235_pos, 2
    nqp_rxpeek $I19, rx235_bstack, rxcap237_fail740
    inc $I19
    set $I11, rx235_bstack[$I19]
    repr_bind_attr_int rx235_cur, rx235_curclass, "$!pos", rx235_pos
    $P11 = rx235_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx235_pos)
    rx235_cstack = rx235_cur."!cursor_capture"($P11, "sym")
    goto rxcap237_done739
  rxcap237_fail740:
    goto rx235_fail732
  rxcap237_done739:
    repr_bind_attr_int rx235_cur, rx235_curclass, "$!pos", rx235_pos
    $P11 = rx235_cur."panic"(":: not yet implemented")
    repr_get_attr_int $I11, $P11, rx235_curclass, "$!pos"
    lt $I11, 0, rx235_fail732
    repr_get_attr_int rx235_pos, $P11, rx235_curclass, "$!pos"
    rx235_cur."!cursor_pass"(rx235_pos, "metachar:sym<::>", 'backtrack'=>1)
    .return (rx235_cur)
  rx235_restart731:
    repr_get_attr_obj rx235_cstack, rx235_cur, rx235_curclass, "$!cstack"
  rx235_fail732:
    unless rx235_bstack, rx235_done730
    pop $I19, rx235_bstack
    if_null rx235_cstack, rx235_cstack_done735
    unless rx235_cstack, rx235_cstack_done735
    dec $I19
    set $P11, rx235_cstack[$I19]
  rx235_cstack_done735:
    pop rx235_rep, rx235_bstack
    pop rx235_pos, rx235_bstack
    pop $I19, rx235_bstack
    lt rx235_pos, -1, rx235_done730
    lt rx235_pos, 0, rx235_fail732
    eq $I19, 0, rx235_fail732
    nqp_islist $I20, rx235_cstack
    unless $I20, rx235_jump733
    elements $I18, rx235_bstack
    le $I18, 0, rx235_cut734
    dec $I18
    set $I18, rx235_bstack[$I18]
  rx235_cut734:
    assign rx235_cstack, $I18
  rx235_jump733:
    jump $I19
  rx235_done730:
    rx235_cur."!cursor_fail"()
    .return (rx235_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<lwb>" :subid("cuid_55_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 194
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx239_tgt
    .local int rx239_pos
    .local int rx239_off
    .local int rx239_eos
    .local int rx239_rep
    .local pmc rx239_cur
    .local pmc rx239_curclass
    .local pmc rx239_bstack
    .local pmc rx239_cstack
    (rx239_cur, rx239_tgt, rx239_pos, rx239_curclass, rx239_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx239_cur
    length rx239_eos, rx239_tgt
    eq $I19, 1, rx239_restart744
    gt rx239_pos, rx239_eos, rx239_fail745
    repr_get_attr_int $I11, self, rx239_curclass, "$!from"
    ne $I11, -1, rxscan240_done751
    goto rxscan240_scan750
  rxscan240_loop749:
    inc rx239_pos
    gt rx239_pos, rx239_eos, rx239_fail745
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!from", rx239_pos
  rxscan240_scan750:
    nqp_rxmark rx239_bstack, rxscan240_loop749, rx239_pos, 0
  rxscan240_done751:
    nqp_rxmark rx239_bstack, rxcap241_fail753, rx239_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt242_0755
    nqp_push_label $P11, alt242_1756
    nqp_rxmark rx239_bstack, alt242_end754, -1, 0
    rx239_cur."!alt"(rx239_pos, "alt_nfa__10_1360426900.048", $P11)
    goto rx239_fail745
  alt242_0755:
    add $I11, rx239_pos, 2
    gt $I11, rx239_eos, rx239_fail745
    substr $S10, rx239_tgt, rx239_pos, 2
    ne $S10, ucs4:"<<", rx239_fail745
    add rx239_pos, 2
    goto alt242_end754
  alt242_1756:
    add $I11, rx239_pos, 1
    gt $I11, rx239_eos, rx239_fail745
    substr $S10, rx239_tgt, rx239_pos, 1
    ne $S10, ucs4:"\x{ab}", rx239_fail745
    add rx239_pos, 1
    goto alt242_end754
  alt242_end754:
    nqp_rxcommit rx239_bstack, alt242_end754
    nqp_rxpeek $I19, rx239_bstack, rxcap241_fail753
    inc $I19
    set $I11, rx239_bstack[$I19]
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx239_pos)
    rx239_cstack = rx239_cur."!cursor_capture"($P11, "sym")
    goto rxcap241_done752
  rxcap241_fail753:
    goto rx239_fail745
  rxcap241_done752:
    rx239_cur."!cursor_pass"(rx239_pos, "metachar:sym<lwb>", 'backtrack'=>1)
    .return (rx239_cur)
  rx239_restart744:
    repr_get_attr_obj rx239_cstack, rx239_cur, rx239_curclass, "$!cstack"
  rx239_fail745:
    unless rx239_bstack, rx239_done743
    pop $I19, rx239_bstack
    if_null rx239_cstack, rx239_cstack_done748
    unless rx239_cstack, rx239_cstack_done748
    dec $I19
    set $P11, rx239_cstack[$I19]
  rx239_cstack_done748:
    pop rx239_rep, rx239_bstack
    pop rx239_pos, rx239_bstack
    pop $I19, rx239_bstack
    lt rx239_pos, -1, rx239_done743
    lt rx239_pos, 0, rx239_fail745
    eq $I19, 0, rx239_fail745
    nqp_islist $I20, rx239_cstack
    unless $I20, rx239_jump746
    elements $I18, rx239_bstack
    le $I18, 0, rx239_cut747
    dec $I18
    set $I18, rx239_bstack[$I18]
  rx239_cut747:
    assign rx239_cstack, $I18
  rx239_jump746:
    jump $I19
  rx239_done743:
    rx239_cur."!cursor_fail"()
    .return (rx239_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<rwb>" :subid("cuid_56_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 195
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx243_tgt
    .local int rx243_pos
    .local int rx243_off
    .local int rx243_eos
    .local int rx243_rep
    .local pmc rx243_cur
    .local pmc rx243_curclass
    .local pmc rx243_bstack
    .local pmc rx243_cstack
    (rx243_cur, rx243_tgt, rx243_pos, rx243_curclass, rx243_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx243_cur
    length rx243_eos, rx243_tgt
    eq $I19, 1, rx243_restart759
    gt rx243_pos, rx243_eos, rx243_fail760
    repr_get_attr_int $I11, self, rx243_curclass, "$!from"
    ne $I11, -1, rxscan244_done766
    goto rxscan244_scan765
  rxscan244_loop764:
    inc rx243_pos
    gt rx243_pos, rx243_eos, rx243_fail760
    repr_bind_attr_int rx243_cur, rx243_curclass, "$!from", rx243_pos
  rxscan244_scan765:
    nqp_rxmark rx243_bstack, rxscan244_loop764, rx243_pos, 0
  rxscan244_done766:
    nqp_rxmark rx243_bstack, rxcap245_fail768, rx243_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt246_0770
    nqp_push_label $P11, alt246_1771
    nqp_rxmark rx243_bstack, alt246_end769, -1, 0
    rx243_cur."!alt"(rx243_pos, "alt_nfa__11_1360426900.055", $P11)
    goto rx243_fail760
  alt246_0770:
    add $I11, rx243_pos, 2
    gt $I11, rx243_eos, rx243_fail760
    substr $S10, rx243_tgt, rx243_pos, 2
    ne $S10, ucs4:">>", rx243_fail760
    add rx243_pos, 2
    goto alt246_end769
  alt246_1771:
    add $I11, rx243_pos, 1
    gt $I11, rx243_eos, rx243_fail760
    substr $S10, rx243_tgt, rx243_pos, 1
    ne $S10, ucs4:"\x{bb}", rx243_fail760
    add rx243_pos, 1
    goto alt246_end769
  alt246_end769:
    nqp_rxcommit rx243_bstack, alt246_end769
    nqp_rxpeek $I19, rx243_bstack, rxcap245_fail768
    inc $I19
    set $I11, rx243_bstack[$I19]
    repr_bind_attr_int rx243_cur, rx243_curclass, "$!pos", rx243_pos
    $P11 = rx243_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx243_pos)
    rx243_cstack = rx243_cur."!cursor_capture"($P11, "sym")
    goto rxcap245_done767
  rxcap245_fail768:
    goto rx243_fail760
  rxcap245_done767:
    rx243_cur."!cursor_pass"(rx243_pos, "metachar:sym<rwb>", 'backtrack'=>1)
    .return (rx243_cur)
  rx243_restart759:
    repr_get_attr_obj rx243_cstack, rx243_cur, rx243_curclass, "$!cstack"
  rx243_fail760:
    unless rx243_bstack, rx243_done758
    pop $I19, rx243_bstack
    if_null rx243_cstack, rx243_cstack_done763
    unless rx243_cstack, rx243_cstack_done763
    dec $I19
    set $P11, rx243_cstack[$I19]
  rx243_cstack_done763:
    pop rx243_rep, rx243_bstack
    pop rx243_pos, rx243_bstack
    pop $I19, rx243_bstack
    lt rx243_pos, -1, rx243_done758
    lt rx243_pos, 0, rx243_fail760
    eq $I19, 0, rx243_fail760
    nqp_islist $I20, rx243_cstack
    unless $I20, rx243_jump761
    elements $I18, rx243_bstack
    le $I18, 0, rx243_cut762
    dec $I18
    set $I18, rx243_bstack[$I18]
  rx243_cut762:
    assign rx243_cstack, $I18
  rx243_jump761:
    jump $I19
  rx243_done758:
    rx243_cur."!cursor_fail"()
    .return (rx243_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<from>" :subid("cuid_57_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 196
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx247_tgt
    .local int rx247_pos
    .local int rx247_off
    .local int rx247_eos
    .local int rx247_rep
    .local pmc rx247_cur
    .local pmc rx247_curclass
    .local pmc rx247_bstack
    .local pmc rx247_cstack
    (rx247_cur, rx247_tgt, rx247_pos, rx247_curclass, rx247_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx247_cur
    length rx247_eos, rx247_tgt
    eq $I19, 1, rx247_restart774
    gt rx247_pos, rx247_eos, rx247_fail775
    repr_get_attr_int $I11, self, rx247_curclass, "$!from"
    ne $I11, -1, rxscan248_done781
    goto rxscan248_scan780
  rxscan248_loop779:
    inc rx247_pos
    gt rx247_pos, rx247_eos, rx247_fail775
    repr_bind_attr_int rx247_cur, rx247_curclass, "$!from", rx247_pos
  rxscan248_scan780:
    nqp_rxmark rx247_bstack, rxscan248_loop779, rx247_pos, 0
  rxscan248_done781:
    add $I11, rx247_pos, 2
    gt $I11, rx247_eos, rx247_fail775
    substr $S10, rx247_tgt, rx247_pos, 2
    ne $S10, ucs4:"<(", rx247_fail775
    add rx247_pos, 2
    rx247_cur."!cursor_pass"(rx247_pos, "metachar:sym<from>", 'backtrack'=>1)
    .return (rx247_cur)
  rx247_restart774:
    repr_get_attr_obj rx247_cstack, rx247_cur, rx247_curclass, "$!cstack"
  rx247_fail775:
    unless rx247_bstack, rx247_done773
    pop $I19, rx247_bstack
    if_null rx247_cstack, rx247_cstack_done778
    unless rx247_cstack, rx247_cstack_done778
    dec $I19
    set $P11, rx247_cstack[$I19]
  rx247_cstack_done778:
    pop rx247_rep, rx247_bstack
    pop rx247_pos, rx247_bstack
    pop $I19, rx247_bstack
    lt rx247_pos, -1, rx247_done773
    lt rx247_pos, 0, rx247_fail775
    eq $I19, 0, rx247_fail775
    nqp_islist $I20, rx247_cstack
    unless $I20, rx247_jump776
    elements $I18, rx247_bstack
    le $I18, 0, rx247_cut777
    dec $I18
    set $I18, rx247_bstack[$I18]
  rx247_cut777:
    assign rx247_cstack, $I18
  rx247_jump776:
    jump $I19
  rx247_done773:
    rx247_cur."!cursor_fail"()
    .return (rx247_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<to>" :subid("cuid_58_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 197
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx249_tgt
    .local int rx249_pos
    .local int rx249_off
    .local int rx249_eos
    .local int rx249_rep
    .local pmc rx249_cur
    .local pmc rx249_curclass
    .local pmc rx249_bstack
    .local pmc rx249_cstack
    (rx249_cur, rx249_tgt, rx249_pos, rx249_curclass, rx249_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx249_cur
    length rx249_eos, rx249_tgt
    eq $I19, 1, rx249_restart784
    gt rx249_pos, rx249_eos, rx249_fail785
    repr_get_attr_int $I11, self, rx249_curclass, "$!from"
    ne $I11, -1, rxscan250_done791
    goto rxscan250_scan790
  rxscan250_loop789:
    inc rx249_pos
    gt rx249_pos, rx249_eos, rx249_fail785
    repr_bind_attr_int rx249_cur, rx249_curclass, "$!from", rx249_pos
  rxscan250_scan790:
    nqp_rxmark rx249_bstack, rxscan250_loop789, rx249_pos, 0
  rxscan250_done791:
    add $I11, rx249_pos, 2
    gt $I11, rx249_eos, rx249_fail785
    substr $S10, rx249_tgt, rx249_pos, 2
    ne $S10, ucs4:")>", rx249_fail785
    add rx249_pos, 2
    rx249_cur."!cursor_pass"(rx249_pos, "metachar:sym<to>", 'backtrack'=>1)
    .return (rx249_cur)
  rx249_restart784:
    repr_get_attr_obj rx249_cstack, rx249_cur, rx249_curclass, "$!cstack"
  rx249_fail785:
    unless rx249_bstack, rx249_done783
    pop $I19, rx249_bstack
    if_null rx249_cstack, rx249_cstack_done788
    unless rx249_cstack, rx249_cstack_done788
    dec $I19
    set $P11, rx249_cstack[$I19]
  rx249_cstack_done788:
    pop rx249_rep, rx249_bstack
    pop rx249_pos, rx249_bstack
    pop $I19, rx249_bstack
    lt rx249_pos, -1, rx249_done783
    lt rx249_pos, 0, rx249_fail785
    eq $I19, 0, rx249_fail785
    nqp_islist $I20, rx249_cstack
    unless $I20, rx249_jump786
    elements $I18, rx249_bstack
    le $I18, 0, rx249_cut787
    dec $I18
    set $I18, rx249_bstack[$I18]
  rx249_cut787:
    assign rx249_cstack, $I18
  rx249_jump786:
    jump $I19
  rx249_done783:
    rx249_cur."!cursor_fail"()
    .return (rx249_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<bs>" :subid("cuid_59_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 198
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx251_tgt
    .local int rx251_pos
    .local int rx251_off
    .local int rx251_eos
    .local int rx251_rep
    .local pmc rx251_cur
    .local pmc rx251_curclass
    .local pmc rx251_bstack
    .local pmc rx251_cstack
    (rx251_cur, rx251_tgt, rx251_pos, rx251_curclass, rx251_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx251_cur
    length rx251_eos, rx251_tgt
    eq $I19, 1, rx251_restart794
    gt rx251_pos, rx251_eos, rx251_fail795
    repr_get_attr_int $I11, self, rx251_curclass, "$!from"
    ne $I11, -1, rxscan252_done801
    goto rxscan252_scan800
  rxscan252_loop799:
    inc rx251_pos
    gt rx251_pos, rx251_eos, rx251_fail795
    repr_bind_attr_int rx251_cur, rx251_curclass, "$!from", rx251_pos
  rxscan252_scan800:
    nqp_rxmark rx251_bstack, rxscan252_loop799, rx251_pos, 0
  rxscan252_done801:
    add $I11, rx251_pos, 1
    gt $I11, rx251_eos, rx251_fail795
    substr $S10, rx251_tgt, rx251_pos, 1
    ne $S10, ucs4:"\\", rx251_fail795
    add rx251_pos, 1
    repr_bind_attr_int rx251_cur, rx251_curclass, "$!pos", rx251_pos
    $P11 = rx251_cur."backslash"()
    repr_get_attr_int $I11, $P11, rx251_curclass, "$!pos"
    lt $I11, 0, rx251_fail795
    nqp_rxmark rx251_bstack, rxsubrule253_pass802, -1, 0
  rxsubrule253_pass802:
    rx251_cstack = rx251_cur."!cursor_capture"($P11, "backslash")
    repr_get_attr_int rx251_pos, $P11, rx251_curclass, "$!pos"
    rx251_cur."!cursor_pass"(rx251_pos, "metachar:sym<bs>", 'backtrack'=>1)
    .return (rx251_cur)
  rx251_restart794:
    repr_get_attr_obj rx251_cstack, rx251_cur, rx251_curclass, "$!cstack"
  rx251_fail795:
    unless rx251_bstack, rx251_done793
    pop $I19, rx251_bstack
    if_null rx251_cstack, rx251_cstack_done798
    unless rx251_cstack, rx251_cstack_done798
    dec $I19
    set $P11, rx251_cstack[$I19]
  rx251_cstack_done798:
    pop rx251_rep, rx251_bstack
    pop rx251_pos, rx251_bstack
    pop $I19, rx251_bstack
    lt rx251_pos, -1, rx251_done793
    lt rx251_pos, 0, rx251_fail795
    eq $I19, 0, rx251_fail795
    nqp_islist $I20, rx251_cstack
    unless $I20, rx251_jump796
    elements $I18, rx251_bstack
    le $I18, 0, rx251_cut797
    dec $I18
    set $I18, rx251_bstack[$I18]
  rx251_cut797:
    assign rx251_cstack, $I18
  rx251_jump796:
    jump $I19
  rx251_done793:
    rx251_cur."!cursor_fail"()
    .return (rx251_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<mod>" :subid("cuid_60_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 199
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx254_tgt
    .local int rx254_pos
    .local int rx254_off
    .local int rx254_eos
    .local int rx254_rep
    .local pmc rx254_cur
    .local pmc rx254_curclass
    .local pmc rx254_bstack
    .local pmc rx254_cstack
    (rx254_cur, rx254_tgt, rx254_pos, rx254_curclass, rx254_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx254_cur
    length rx254_eos, rx254_tgt
    eq $I19, 1, rx254_restart805
    gt rx254_pos, rx254_eos, rx254_fail806
    repr_get_attr_int $I11, self, rx254_curclass, "$!from"
    ne $I11, -1, rxscan255_done812
    goto rxscan255_scan811
  rxscan255_loop810:
    inc rx254_pos
    gt rx254_pos, rx254_eos, rx254_fail806
    repr_bind_attr_int rx254_cur, rx254_curclass, "$!from", rx254_pos
  rxscan255_scan811:
    nqp_rxmark rx254_bstack, rxscan255_loop810, rx254_pos, 0
  rxscan255_done812:
    repr_bind_attr_int rx254_cur, rx254_curclass, "$!pos", rx254_pos
    $P11 = rx254_cur."mod_internal"()
    repr_get_attr_int $I11, $P11, rx254_curclass, "$!pos"
    lt $I11, 0, rx254_fail806
    nqp_rxmark rx254_bstack, rxsubrule256_pass813, -1, 0
  rxsubrule256_pass813:
    rx254_cstack = rx254_cur."!cursor_capture"($P11, "mod_internal")
    repr_get_attr_int rx254_pos, $P11, rx254_curclass, "$!pos"
    rx254_cur."!cursor_pass"(rx254_pos, "metachar:sym<mod>", 'backtrack'=>1)
    .return (rx254_cur)
  rx254_restart805:
    repr_get_attr_obj rx254_cstack, rx254_cur, rx254_curclass, "$!cstack"
  rx254_fail806:
    unless rx254_bstack, rx254_done804
    pop $I19, rx254_bstack
    if_null rx254_cstack, rx254_cstack_done809
    unless rx254_cstack, rx254_cstack_done809
    dec $I19
    set $P11, rx254_cstack[$I19]
  rx254_cstack_done809:
    pop rx254_rep, rx254_bstack
    pop rx254_pos, rx254_bstack
    pop $I19, rx254_bstack
    lt rx254_pos, -1, rx254_done804
    lt rx254_pos, 0, rx254_fail806
    eq $I19, 0, rx254_fail806
    nqp_islist $I20, rx254_cstack
    unless $I20, rx254_jump807
    elements $I18, rx254_bstack
    le $I18, 0, rx254_cut808
    dec $I18
    set $I18, rx254_bstack[$I18]
  rx254_cut808:
    assign rx254_cstack, $I18
  rx254_jump807:
    jump $I19
  rx254_done804:
    rx254_cur."!cursor_fail"()
    .return (rx254_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<quantifier>" :subid("cuid_61_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 200
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx257_tgt
    .local int rx257_pos
    .local int rx257_off
    .local int rx257_eos
    .local int rx257_rep
    .local pmc rx257_cur
    .local pmc rx257_curclass
    .local pmc rx257_bstack
    .local pmc rx257_cstack
    (rx257_cur, rx257_tgt, rx257_pos, rx257_curclass, rx257_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx257_cur
    length rx257_eos, rx257_tgt
    eq $I19, 1, rx257_restart816
    gt rx257_pos, rx257_eos, rx257_fail817
    repr_get_attr_int $I11, self, rx257_curclass, "$!from"
    ne $I11, -1, rxscan258_done823
    goto rxscan258_scan822
  rxscan258_loop821:
    inc rx257_pos
    gt rx257_pos, rx257_eos, rx257_fail817
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!from", rx257_pos
  rxscan258_scan822:
    nqp_rxmark rx257_bstack, rxscan258_loop821, rx257_pos, 0
  rxscan258_done823:
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!pos", rx257_pos
    $P11 = rx257_cur."quantifier"()
    repr_get_attr_int $I11, $P11, rx257_curclass, "$!pos"
    lt $I11, 0, rx257_fail817
    nqp_rxmark rx257_bstack, rxsubrule259_pass824, -1, 0
  rxsubrule259_pass824:
    rx257_cstack = rx257_cur."!cursor_capture"($P11, "quantifier")
    repr_get_attr_int rx257_pos, $P11, rx257_curclass, "$!pos"
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!pos", rx257_pos
    $P11 = rx257_cur."panic"("Quantifier quantifies nothing")
    repr_get_attr_int $I11, $P11, rx257_curclass, "$!pos"
    lt $I11, 0, rx257_fail817
    repr_get_attr_int rx257_pos, $P11, rx257_curclass, "$!pos"
    rx257_cur."!cursor_pass"(rx257_pos, "metachar:sym<quantifier>", 'backtrack'=>1)
    .return (rx257_cur)
  rx257_restart816:
    repr_get_attr_obj rx257_cstack, rx257_cur, rx257_curclass, "$!cstack"
  rx257_fail817:
    unless rx257_bstack, rx257_done815
    pop $I19, rx257_bstack
    if_null rx257_cstack, rx257_cstack_done820
    unless rx257_cstack, rx257_cstack_done820
    dec $I19
    set $P11, rx257_cstack[$I19]
  rx257_cstack_done820:
    pop rx257_rep, rx257_bstack
    pop rx257_pos, rx257_bstack
    pop $I19, rx257_bstack
    lt rx257_pos, -1, rx257_done815
    lt rx257_pos, 0, rx257_fail817
    eq $I19, 0, rx257_fail817
    nqp_islist $I20, rx257_cstack
    unless $I20, rx257_jump818
    elements $I18, rx257_bstack
    le $I18, 0, rx257_cut819
    dec $I18
    set $I18, rx257_bstack[$I18]
  rx257_cut819:
    assign rx257_cstack, $I18
  rx257_jump818:
    jump $I19
  rx257_done815:
    rx257_cur."!cursor_fail"()
    .return (rx257_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<~>" :subid("cuid_62_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 205
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx261_tgt
    .local int rx261_pos
    .local int rx261_off
    .local int rx261_eos
    .local int rx261_rep
    .local pmc rx261_cur
    .local pmc rx261_curclass
    .local pmc rx261_bstack
    .local pmc rx261_cstack
    (rx261_cur, rx261_tgt, rx261_pos, rx261_curclass, rx261_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx261_cur
    length rx261_eos, rx261_tgt
    eq $I19, 1, rx261_restart828
    gt rx261_pos, rx261_eos, rx261_fail829
    repr_get_attr_int $I11, self, rx261_curclass, "$!from"
    ne $I11, -1, rxscan262_done835
    goto rxscan262_scan834
  rxscan262_loop833:
    inc rx261_pos
    gt rx261_pos, rx261_eos, rx261_fail829
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!from", rx261_pos
  rxscan262_scan834:
    nqp_rxmark rx261_bstack, rxscan262_loop833, rx261_pos, 0
  rxscan262_done835:
    nqp_rxmark rx261_bstack, rxcap263_fail837, rx261_pos, 0
    add $I11, rx261_pos, 1
    gt $I11, rx261_eos, rx261_fail829
    substr $S10, rx261_tgt, rx261_pos, 1
    ne $S10, ucs4:"~", rx261_fail829
    add rx261_pos, 1
    nqp_rxpeek $I19, rx261_bstack, rxcap263_fail837
    inc $I19
    set $I11, rx261_bstack[$I19]
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx261_pos)
    rx261_cstack = rx261_cur."!cursor_capture"($P11, "sym")
    goto rxcap263_done836
  rxcap263_fail837:
    goto rx261_fail829
  rxcap263_done836:
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."ws"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail829
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail829
    nqp_rxmark rx261_bstack, rxsubrule265_pass839, -1, 0
  rxsubrule265_pass839:
    rx261_cstack = rx261_cur."!cursor_capture"($P11, "GOAL")
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."ws"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail829
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail829
    nqp_rxmark rx261_bstack, rxsubrule267_pass841, -1, 0
  rxsubrule267_pass841:
    rx261_cstack = rx261_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
    rx261_cur."!cursor_pass"(rx261_pos, "metachar:sym<~>", 'backtrack'=>1)
    .return (rx261_cur)
  rx261_restart828:
    repr_get_attr_obj rx261_cstack, rx261_cur, rx261_curclass, "$!cstack"
  rx261_fail829:
    unless rx261_bstack, rx261_done827
    pop $I19, rx261_bstack
    if_null rx261_cstack, rx261_cstack_done832
    unless rx261_cstack, rx261_cstack_done832
    dec $I19
    set $P11, rx261_cstack[$I19]
  rx261_cstack_done832:
    pop rx261_rep, rx261_bstack
    pop rx261_pos, rx261_bstack
    pop $I19, rx261_bstack
    lt rx261_pos, -1, rx261_done827
    lt rx261_pos, 0, rx261_fail829
    eq $I19, 0, rx261_fail829
    nqp_islist $I20, rx261_cstack
    unless $I20, rx261_jump830
    elements $I18, rx261_bstack
    le $I18, 0, rx261_cut831
    dec $I18
    set $I18, rx261_bstack[$I18]
  rx261_cut831:
    assign rx261_cstack, $I18
  rx261_jump830:
    jump $I19
  rx261_done827:
    rx261_cur."!cursor_fail"()
    .return (rx261_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{*}>" :subid("cuid_63_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 211
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx268_tgt
    .local int rx268_pos
    .local int rx268_off
    .local int rx268_eos
    .local int rx268_rep
    .local pmc rx268_cur
    .local pmc rx268_curclass
    .local pmc rx268_bstack
    .local pmc rx268_cstack
    (rx268_cur, rx268_tgt, rx268_pos, rx268_curclass, rx268_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx268_cur
    length rx268_eos, rx268_tgt
    eq $I19, 1, rx268_restart844
    gt rx268_pos, rx268_eos, rx268_fail845
    repr_get_attr_int $I11, self, rx268_curclass, "$!from"
    ne $I11, -1, rxscan269_done851
    goto rxscan269_scan850
  rxscan269_loop849:
    inc rx268_pos
    gt rx268_pos, rx268_eos, rx268_fail845
    repr_bind_attr_int rx268_cur, rx268_curclass, "$!from", rx268_pos
  rxscan269_scan850:
    nqp_rxmark rx268_bstack, rxscan269_loop849, rx268_pos, 0
  rxscan269_done851:
    nqp_rxmark rx268_bstack, rxcap270_fail853, rx268_pos, 0
    add $I11, rx268_pos, 3
    gt $I11, rx268_eos, rx268_fail845
    substr $S10, rx268_tgt, rx268_pos, 3
    ne $S10, ucs4:"{*}", rx268_fail845
    add rx268_pos, 3
    nqp_rxpeek $I19, rx268_bstack, rxcap270_fail853
    inc $I19
    set $I11, rx268_bstack[$I19]
    repr_bind_attr_int rx268_cur, rx268_curclass, "$!pos", rx268_pos
    $P11 = rx268_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx268_pos)
    rx268_cstack = rx268_cur."!cursor_capture"($P11, "sym")
    goto rxcap270_done852
  rxcap270_fail853:
    goto rx268_fail845
  rxcap270_done852:
    nqp_rxmark rx268_bstack, rxquantr271_done855, rx268_pos, 0
  rxquantr271_loop854:
    nqp_rxmark rx268_bstack, rxquantr272_done857, rx268_pos, 0
  rxquantr272_loop856:
    ge rx268_pos, rx268_eos, rx268_fail845
    substr $S11, rx268_tgt, rx268_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx268_fail845
    inc rx268_pos
    nqp_rxpeek $I19, rx268_bstack, rxquantr272_done857
    inc $I19
    inc $I19
    set rx268_rep, rx268_bstack[$I19]
    nqp_rxcommit rx268_bstack, rxquantr272_done857
    inc rx268_rep
    nqp_rxmark rx268_bstack, rxquantr272_done857, rx268_pos, rx268_rep
    goto rxquantr272_loop856
  rxquantr272_done857:
    add $I11, rx268_pos, 3
    gt $I11, rx268_eos, rx268_fail845
    substr $S10, rx268_tgt, rx268_pos, 3
    ne $S10, ucs4:"#= ", rx268_fail845
    add rx268_pos, 3
    nqp_rxmark rx268_bstack, rxquantr273_done859, rx268_pos, 0
  rxquantr273_loop858:
    ge rx268_pos, rx268_eos, rx268_fail845
    substr $S11, rx268_tgt, rx268_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx268_fail845
    inc rx268_pos
    nqp_rxpeek $I19, rx268_bstack, rxquantr273_done859
    inc $I19
    inc $I19
    set rx268_rep, rx268_bstack[$I19]
    nqp_rxcommit rx268_bstack, rxquantr273_done859
    inc rx268_rep
    nqp_rxmark rx268_bstack, rxquantr273_done859, rx268_pos, rx268_rep
    goto rxquantr273_loop858
  rxquantr273_done859:
    nqp_rxmark rx268_bstack, rxcap274_fail861, rx268_pos, 0
    nqp_rxmark rx268_bstack, rxquantr275_done863, -1, 0
  rxquantr275_loop862:
    ge rx268_pos, rx268_eos, rx268_fail845
    is_cclass $I11, .CCLASS_WHITESPACE, rx268_tgt, rx268_pos
    if $I11, rx268_fail845
    add rx268_pos, 1
    nqp_rxpeek $I19, rx268_bstack, rxquantr275_done863
    inc $I19
    inc $I19
    set rx268_rep, rx268_bstack[$I19]
    nqp_rxcommit rx268_bstack, rxquantr275_done863
    inc rx268_rep
    nqp_rxmark rx268_bstack, rxquantr275_done863, rx268_pos, rx268_rep
    goto rxquantr275_loop862
  rxquantr275_done863:
    nqp_rxmark rx268_bstack, rxquantr276_done865, rx268_pos, 0
  rxquantr276_loop864:
    nqp_rxmark rx268_bstack, rxquantr277_done867, -1, 0
  rxquantr277_loop866:
    ge rx268_pos, rx268_eos, rx268_fail845
    substr $S11, rx268_tgt, rx268_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx268_fail845
    inc rx268_pos
    nqp_rxpeek $I19, rx268_bstack, rxquantr277_done867
    inc $I19
    inc $I19
    set rx268_rep, rx268_bstack[$I19]
    nqp_rxcommit rx268_bstack, rxquantr277_done867
    inc rx268_rep
    nqp_rxmark rx268_bstack, rxquantr277_done867, rx268_pos, rx268_rep
    goto rxquantr277_loop866
  rxquantr277_done867:
    nqp_rxmark rx268_bstack, rxquantr278_done869, -1, 0
  rxquantr278_loop868:
    ge rx268_pos, rx268_eos, rx268_fail845
    is_cclass $I11, .CCLASS_WHITESPACE, rx268_tgt, rx268_pos
    if $I11, rx268_fail845
    add rx268_pos, 1
    nqp_rxpeek $I19, rx268_bstack, rxquantr278_done869
    inc $I19
    inc $I19
    set rx268_rep, rx268_bstack[$I19]
    nqp_rxcommit rx268_bstack, rxquantr278_done869
    inc rx268_rep
    nqp_rxmark rx268_bstack, rxquantr278_done869, rx268_pos, rx268_rep
    goto rxquantr278_loop868
  rxquantr278_done869:
    nqp_rxpeek $I19, rx268_bstack, rxquantr276_done865
    inc $I19
    inc $I19
    set rx268_rep, rx268_bstack[$I19]
    nqp_rxcommit rx268_bstack, rxquantr276_done865
    inc rx268_rep
    nqp_rxmark rx268_bstack, rxquantr276_done865, rx268_pos, rx268_rep
    goto rxquantr276_loop864
  rxquantr276_done865:
    nqp_rxpeek $I19, rx268_bstack, rxcap274_fail861
    inc $I19
    set $I11, rx268_bstack[$I19]
    repr_bind_attr_int rx268_cur, rx268_curclass, "$!pos", rx268_pos
    $P11 = rx268_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx268_pos)
    rx268_cstack = rx268_cur."!cursor_capture"($P11, "key")
    goto rxcap274_done860
  rxcap274_fail861:
    goto rx268_fail845
  rxcap274_done860:
    nqp_rxpeek $I19, rx268_bstack, rxquantr271_done855
    inc $I19
    inc $I19
    set rx268_rep, rx268_bstack[$I19]
    nqp_rxcommit rx268_bstack, rxquantr271_done855
    inc rx268_rep
  rxquantr271_done855:
    rx268_cur."!cursor_pass"(rx268_pos, "metachar:sym<{*}>", 'backtrack'=>1)
    .return (rx268_cur)
  rx268_restart844:
    repr_get_attr_obj rx268_cstack, rx268_cur, rx268_curclass, "$!cstack"
  rx268_fail845:
    unless rx268_bstack, rx268_done843
    pop $I19, rx268_bstack
    if_null rx268_cstack, rx268_cstack_done848
    unless rx268_cstack, rx268_cstack_done848
    dec $I19
    set $P11, rx268_cstack[$I19]
  rx268_cstack_done848:
    pop rx268_rep, rx268_bstack
    pop rx268_pos, rx268_bstack
    pop $I19, rx268_bstack
    lt rx268_pos, -1, rx268_done843
    lt rx268_pos, 0, rx268_fail845
    eq $I19, 0, rx268_fail845
    nqp_islist $I20, rx268_cstack
    unless $I20, rx268_jump846
    elements $I18, rx268_bstack
    le $I18, 0, rx268_cut847
    dec $I18
    set $I18, rx268_bstack[$I18]
  rx268_cut847:
    assign rx268_cstack, $I18
  rx268_jump846:
    jump $I19
  rx268_done843:
    rx268_cur."!cursor_fail"()
    .return (rx268_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<assert>" :subid("cuid_64_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 215
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx279_tgt
    .local int rx279_pos
    .local int rx279_off
    .local int rx279_eos
    .local int rx279_rep
    .local pmc rx279_cur
    .local pmc rx279_curclass
    .local pmc rx279_bstack
    .local pmc rx279_cstack
    (rx279_cur, rx279_tgt, rx279_pos, rx279_curclass, rx279_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx279_cur
    length rx279_eos, rx279_tgt
    eq $I19, 1, rx279_restart872
    gt rx279_pos, rx279_eos, rx279_fail873
    repr_get_attr_int $I11, self, rx279_curclass, "$!from"
    ne $I11, -1, rxscan280_done879
    goto rxscan280_scan878
  rxscan280_loop877:
    inc rx279_pos
    gt rx279_pos, rx279_eos, rx279_fail873
    repr_bind_attr_int rx279_cur, rx279_curclass, "$!from", rx279_pos
  rxscan280_scan878:
    nqp_rxmark rx279_bstack, rxscan280_loop877, rx279_pos, 0
  rxscan280_done879:
    add $I11, rx279_pos, 1
    gt $I11, rx279_eos, rx279_fail873
    substr $S10, rx279_tgt, rx279_pos, 1
    ne $S10, ucs4:"<", rx279_fail873
    add rx279_pos, 1
    repr_bind_attr_int rx279_cur, rx279_curclass, "$!pos", rx279_pos
    $P11 = rx279_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx279_curclass, "$!pos"
    lt $I11, 0, rx279_fail873
    nqp_rxmark rx279_bstack, rxsubrule281_pass880, -1, 0
  rxsubrule281_pass880:
    rx279_cstack = rx279_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx279_pos, $P11, rx279_curclass, "$!pos"
  alt282_0882:
    nqp_rxmark rx279_bstack, alt282_1883, rx279_pos, 0
    add $I11, rx279_pos, 1
    gt $I11, rx279_eos, rx279_fail873
    substr $S10, rx279_tgt, rx279_pos, 1
    ne $S10, ucs4:">", rx279_fail873
    add rx279_pos, 1
    goto alt282_end881
  alt282_1883:
    repr_bind_attr_int rx279_cur, rx279_curclass, "$!pos", rx279_pos
    $P11 = rx279_cur."panic"("regex assertion not terminated by angle bracket")
    repr_get_attr_int $I11, $P11, rx279_curclass, "$!pos"
    lt $I11, 0, rx279_fail873
    repr_get_attr_int rx279_pos, $P11, rx279_curclass, "$!pos"
  alt282_end881:
    rx279_cur."!cursor_pass"(rx279_pos, "metachar:sym<assert>", 'backtrack'=>1)
    .return (rx279_cur)
  rx279_restart872:
    repr_get_attr_obj rx279_cstack, rx279_cur, rx279_curclass, "$!cstack"
  rx279_fail873:
    unless rx279_bstack, rx279_done871
    pop $I19, rx279_bstack
    if_null rx279_cstack, rx279_cstack_done876
    unless rx279_cstack, rx279_cstack_done876
    dec $I19
    set $P11, rx279_cstack[$I19]
  rx279_cstack_done876:
    pop rx279_rep, rx279_bstack
    pop rx279_pos, rx279_bstack
    pop $I19, rx279_bstack
    lt rx279_pos, -1, rx279_done871
    lt rx279_pos, 0, rx279_fail873
    eq $I19, 0, rx279_fail873
    nqp_islist $I20, rx279_cstack
    unless $I20, rx279_jump874
    elements $I18, rx279_bstack
    le $I18, 0, rx279_cut875
    dec $I18
    set $I18, rx279_bstack[$I18]
  rx279_cut875:
    assign rx279_cstack, $I18
  rx279_jump874:
    jump $I19
  rx279_done871:
    rx279_cur."!cursor_fail"()
    .return (rx279_cur) 
.end
.HLL "nqp"
.namespace []
.sub "sigil" :subid("cuid_65_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 220
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx284_tgt
    .local int rx284_pos
    .local int rx284_off
    .local int rx284_eos
    .local int rx284_rep
    .local pmc rx284_cur
    .local pmc rx284_curclass
    .local pmc rx284_bstack
    .local pmc rx284_cstack
    (rx284_cur, rx284_tgt, rx284_pos, rx284_curclass, rx284_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx284_cur
    length rx284_eos, rx284_tgt
    eq $I19, 1, rx284_restart887
    gt rx284_pos, rx284_eos, rx284_fail888
    repr_get_attr_int $I11, self, rx284_curclass, "$!from"
    ne $I11, -1, rxscan285_done894
    goto rxscan285_scan893
  rxscan285_loop892:
    inc rx284_pos
    gt rx284_pos, rx284_eos, rx284_fail888
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!from", rx284_pos
  rxscan285_scan893:
    nqp_rxmark rx284_bstack, rxscan285_loop892, rx284_pos, 0
  rxscan285_done894:
    ge rx284_pos, rx284_eos, rx284_fail888
    substr $S11, rx284_tgt, rx284_pos, 1
    index $I11, ucs4:"$@%&", $S11
    lt $I11, 0, rx284_fail888
    inc rx284_pos
    rx284_cur."!cursor_pass"(rx284_pos, "sigil", 'backtrack'=>1)
    .return (rx284_cur)
  rx284_restart887:
    repr_get_attr_obj rx284_cstack, rx284_cur, rx284_curclass, "$!cstack"
  rx284_fail888:
    unless rx284_bstack, rx284_done886
    pop $I19, rx284_bstack
    if_null rx284_cstack, rx284_cstack_done891
    unless rx284_cstack, rx284_cstack_done891
    dec $I19
    set $P11, rx284_cstack[$I19]
  rx284_cstack_done891:
    pop rx284_rep, rx284_bstack
    pop rx284_pos, rx284_bstack
    pop $I19, rx284_bstack
    lt rx284_pos, -1, rx284_done886
    lt rx284_pos, 0, rx284_fail888
    eq $I19, 0, rx284_fail888
    nqp_islist $I20, rx284_cstack
    unless $I20, rx284_jump889
    elements $I18, rx284_bstack
    le $I18, 0, rx284_cut890
    dec $I18
    set $I18, rx284_bstack[$I18]
  rx284_cut890:
    assign rx284_cstack, $I18
  rx284_jump889:
    jump $I19
  rx284_done886:
    rx284_cur."!cursor_fail"()
    .return (rx284_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<var>" :subid("cuid_66_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 222
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx286_tgt
    .local int rx286_pos
    .local int rx286_off
    .local int rx286_eos
    .local int rx286_rep
    .local pmc rx286_cur
    .local pmc rx286_curclass
    .local pmc rx286_bstack
    .local pmc rx286_cstack
    (rx286_cur, rx286_tgt, rx286_pos, rx286_curclass, rx286_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx286_cur
    length rx286_eos, rx286_tgt
    eq $I19, 1, rx286_restart897
    gt rx286_pos, rx286_eos, rx286_fail898
    repr_get_attr_int $I11, self, rx286_curclass, "$!from"
    ne $I11, -1, rxscan287_done904
    goto rxscan287_scan903
  rxscan287_loop902:
    inc rx286_pos
    gt rx286_pos, rx286_eos, rx286_fail898
    repr_bind_attr_int rx286_cur, rx286_curclass, "$!from", rx286_pos
  rxscan287_scan903:
    nqp_rxmark rx286_bstack, rxscan287_loop902, rx286_pos, 0
  rxscan287_done904:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt288_0906
    nqp_push_label $P11, alt288_1911
    nqp_rxmark rx286_bstack, alt288_end905, -1, 0
    rx286_cur."!alt"(rx286_pos, "alt_nfa__12_1360426900.135", $P11)
    goto rx286_fail898
  alt288_0906:
    add $I11, rx286_pos, 2
    gt $I11, rx286_eos, rx286_fail898
    substr $S10, rx286_tgt, rx286_pos, 2
    ne $S10, ucs4:"$<", rx286_fail898
    add rx286_pos, 2
    nqp_rxmark rx286_bstack, rxcap289_fail908, rx286_pos, 0
    nqp_rxmark rx286_bstack, rxquantr290_done910, -1, 0
  rxquantr290_loop909:
    ge rx286_pos, rx286_eos, rx286_fail898
    substr $S11, rx286_tgt, rx286_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx286_fail898
    inc rx286_pos
    nqp_rxpeek $I19, rx286_bstack, rxquantr290_done910
    inc $I19
    inc $I19
    set rx286_rep, rx286_bstack[$I19]
    nqp_rxcommit rx286_bstack, rxquantr290_done910
    inc rx286_rep
    nqp_rxmark rx286_bstack, rxquantr290_done910, rx286_pos, rx286_rep
    goto rxquantr290_loop909
  rxquantr290_done910:
    nqp_rxpeek $I19, rx286_bstack, rxcap289_fail908
    inc $I19
    set $I11, rx286_bstack[$I19]
    repr_bind_attr_int rx286_cur, rx286_curclass, "$!pos", rx286_pos
    $P11 = rx286_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx286_pos)
    rx286_cstack = rx286_cur."!cursor_capture"($P11, "name")
    goto rxcap289_done907
  rxcap289_fail908:
    goto rx286_fail898
  rxcap289_done907:
    add $I11, rx286_pos, 1
    gt $I11, rx286_eos, rx286_fail898
    substr $S10, rx286_tgt, rx286_pos, 1
    ne $S10, ucs4:">", rx286_fail898
    add rx286_pos, 1
    goto alt288_end905
  alt288_1911:
    add $I11, rx286_pos, 1
    gt $I11, rx286_eos, rx286_fail898
    substr $S10, rx286_tgt, rx286_pos, 1
    ne $S10, ucs4:"$", rx286_fail898
    add rx286_pos, 1
    nqp_rxmark rx286_bstack, rxcap291_fail913, rx286_pos, 0
    nqp_rxmark rx286_bstack, rxquantr292_done915, -1, 0
  rxquantr292_loop914:
    ge rx286_pos, rx286_eos, rx286_fail898
    is_cclass $I11, .CCLASS_NUMERIC, rx286_tgt, rx286_pos
    unless $I11, rx286_fail898
    add rx286_pos, 1
    nqp_rxpeek $I19, rx286_bstack, rxquantr292_done915
    inc $I19
    inc $I19
    set rx286_rep, rx286_bstack[$I19]
    nqp_rxcommit rx286_bstack, rxquantr292_done915
    inc rx286_rep
    nqp_rxmark rx286_bstack, rxquantr292_done915, rx286_pos, rx286_rep
    goto rxquantr292_loop914
  rxquantr292_done915:
    nqp_rxpeek $I19, rx286_bstack, rxcap291_fail913
    inc $I19
    set $I11, rx286_bstack[$I19]
    repr_bind_attr_int rx286_cur, rx286_curclass, "$!pos", rx286_pos
    $P11 = rx286_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx286_pos)
    rx286_cstack = rx286_cur."!cursor_capture"($P11, "pos")
    goto rxcap291_done912
  rxcap291_fail913:
    goto rx286_fail898
  rxcap291_done912:
    goto alt288_end905
  alt288_end905:
    nqp_rxcommit rx286_bstack, alt288_end905
    nqp_rxmark rx286_bstack, rxquantr293_done917, rx286_pos, 0
  rxquantr293_loop916:
    repr_bind_attr_int rx286_cur, rx286_curclass, "$!pos", rx286_pos
    $P11 = rx286_cur."ws"()
    repr_get_attr_int $I11, $P11, rx286_curclass, "$!pos"
    lt $I11, 0, rx286_fail898
    repr_get_attr_int rx286_pos, $P11, rx286_curclass, "$!pos"
    add $I11, rx286_pos, 1
    gt $I11, rx286_eos, rx286_fail898
    substr $S10, rx286_tgt, rx286_pos, 1
    ne $S10, ucs4:"=", rx286_fail898
    add rx286_pos, 1
    repr_bind_attr_int rx286_cur, rx286_curclass, "$!pos", rx286_pos
    $P11 = rx286_cur."ws"()
    repr_get_attr_int $I11, $P11, rx286_curclass, "$!pos"
    lt $I11, 0, rx286_fail898
    repr_get_attr_int rx286_pos, $P11, rx286_curclass, "$!pos"
    repr_bind_attr_int rx286_cur, rx286_curclass, "$!pos", rx286_pos
    $P11 = rx286_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx286_curclass, "$!pos"
    lt $I11, 0, rx286_fail898
    nqp_rxmark rx286_bstack, rxsubrule296_pass920, -1, 0
  rxsubrule296_pass920:
    rx286_cstack = rx286_cur."!cursor_capture"($P11, "quantified_atom")
    repr_get_attr_int rx286_pos, $P11, rx286_curclass, "$!pos"
    nqp_rxpeek $I19, rx286_bstack, rxquantr293_done917
    inc $I19
    inc $I19
    set rx286_rep, rx286_bstack[$I19]
    nqp_rxcommit rx286_bstack, rxquantr293_done917
    inc rx286_rep
  rxquantr293_done917:
    rx286_cur."!cursor_pass"(rx286_pos, "metachar:sym<var>", 'backtrack'=>1)
    .return (rx286_cur)
  rx286_restart897:
    repr_get_attr_obj rx286_cstack, rx286_cur, rx286_curclass, "$!cstack"
  rx286_fail898:
    unless rx286_bstack, rx286_done896
    pop $I19, rx286_bstack
    if_null rx286_cstack, rx286_cstack_done901
    unless rx286_cstack, rx286_cstack_done901
    dec $I19
    set $P11, rx286_cstack[$I19]
  rx286_cstack_done901:
    pop rx286_rep, rx286_bstack
    pop rx286_pos, rx286_bstack
    pop $I19, rx286_bstack
    lt rx286_pos, -1, rx286_done896
    lt rx286_pos, 0, rx286_fail898
    eq $I19, 0, rx286_fail898
    nqp_islist $I20, rx286_cstack
    unless $I20, rx286_jump899
    elements $I18, rx286_bstack
    le $I18, 0, rx286_cut900
    dec $I18
    set $I18, rx286_bstack[$I18]
  rx286_cut900:
    assign rx286_cstack, $I18
  rx286_jump899:
    jump $I19
  rx286_done896:
    rx286_cur."!cursor_fail"()
    .return (rx286_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash" :subid("cuid_67_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 231
    .param pmc self 
    $P5001 = self."!protoregex"("backslash")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<s>" :subid("cuid_68_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 232
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx297_tgt
    .local int rx297_pos
    .local int rx297_off
    .local int rx297_eos
    .local int rx297_rep
    .local pmc rx297_cur
    .local pmc rx297_curclass
    .local pmc rx297_bstack
    .local pmc rx297_cstack
    (rx297_cur, rx297_tgt, rx297_pos, rx297_curclass, rx297_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx297_cur
    length rx297_eos, rx297_tgt
    eq $I19, 1, rx297_restart923
    gt rx297_pos, rx297_eos, rx297_fail924
    repr_get_attr_int $I11, self, rx297_curclass, "$!from"
    ne $I11, -1, rxscan298_done930
    goto rxscan298_scan929
  rxscan298_loop928:
    inc rx297_pos
    gt rx297_pos, rx297_eos, rx297_fail924
    repr_bind_attr_int rx297_cur, rx297_curclass, "$!from", rx297_pos
  rxscan298_scan929:
    nqp_rxmark rx297_bstack, rxscan298_loop928, rx297_pos, 0
  rxscan298_done930:
    nqp_rxmark rx297_bstack, rxcap299_fail932, rx297_pos, 0
    ge rx297_pos, rx297_eos, rx297_fail924
    substr $S11, rx297_tgt, rx297_pos, 1
    index $I11, ucs4:"dDnNsSwW", $S11
    lt $I11, 0, rx297_fail924
    inc rx297_pos
    nqp_rxpeek $I19, rx297_bstack, rxcap299_fail932
    inc $I19
    set $I11, rx297_bstack[$I19]
    repr_bind_attr_int rx297_cur, rx297_curclass, "$!pos", rx297_pos
    $P11 = rx297_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx297_pos)
    rx297_cstack = rx297_cur."!cursor_capture"($P11, "sym")
    goto rxcap299_done931
  rxcap299_fail932:
    goto rx297_fail924
  rxcap299_done931:
    rx297_cur."!cursor_pass"(rx297_pos, "backslash:sym<s>", 'backtrack'=>1)
    .return (rx297_cur)
  rx297_restart923:
    repr_get_attr_obj rx297_cstack, rx297_cur, rx297_curclass, "$!cstack"
  rx297_fail924:
    unless rx297_bstack, rx297_done922
    pop $I19, rx297_bstack
    if_null rx297_cstack, rx297_cstack_done927
    unless rx297_cstack, rx297_cstack_done927
    dec $I19
    set $P11, rx297_cstack[$I19]
  rx297_cstack_done927:
    pop rx297_rep, rx297_bstack
    pop rx297_pos, rx297_bstack
    pop $I19, rx297_bstack
    lt rx297_pos, -1, rx297_done922
    lt rx297_pos, 0, rx297_fail924
    eq $I19, 0, rx297_fail924
    nqp_islist $I20, rx297_cstack
    unless $I20, rx297_jump925
    elements $I18, rx297_bstack
    le $I18, 0, rx297_cut926
    dec $I18
    set $I18, rx297_bstack[$I18]
  rx297_cut926:
    assign rx297_cstack, $I18
  rx297_jump925:
    jump $I19
  rx297_done922:
    rx297_cur."!cursor_fail"()
    .return (rx297_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<b>" :subid("cuid_69_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 233
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx300_tgt
    .local int rx300_pos
    .local int rx300_off
    .local int rx300_eos
    .local int rx300_rep
    .local pmc rx300_cur
    .local pmc rx300_curclass
    .local pmc rx300_bstack
    .local pmc rx300_cstack
    (rx300_cur, rx300_tgt, rx300_pos, rx300_curclass, rx300_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx300_cur
    length rx300_eos, rx300_tgt
    eq $I19, 1, rx300_restart935
    gt rx300_pos, rx300_eos, rx300_fail936
    repr_get_attr_int $I11, self, rx300_curclass, "$!from"
    ne $I11, -1, rxscan301_done942
    goto rxscan301_scan941
  rxscan301_loop940:
    inc rx300_pos
    gt rx300_pos, rx300_eos, rx300_fail936
    repr_bind_attr_int rx300_cur, rx300_curclass, "$!from", rx300_pos
  rxscan301_scan941:
    nqp_rxmark rx300_bstack, rxscan301_loop940, rx300_pos, 0
  rxscan301_done942:
    nqp_rxmark rx300_bstack, rxcap302_fail944, rx300_pos, 0
    ge rx300_pos, rx300_eos, rx300_fail936
    substr $S11, rx300_tgt, rx300_pos, 1
    index $I11, ucs4:"bB", $S11
    lt $I11, 0, rx300_fail936
    inc rx300_pos
    nqp_rxpeek $I19, rx300_bstack, rxcap302_fail944
    inc $I19
    set $I11, rx300_bstack[$I19]
    repr_bind_attr_int rx300_cur, rx300_curclass, "$!pos", rx300_pos
    $P11 = rx300_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx300_pos)
    rx300_cstack = rx300_cur."!cursor_capture"($P11, "sym")
    goto rxcap302_done943
  rxcap302_fail944:
    goto rx300_fail936
  rxcap302_done943:
    rx300_cur."!cursor_pass"(rx300_pos, "backslash:sym<b>", 'backtrack'=>1)
    .return (rx300_cur)
  rx300_restart935:
    repr_get_attr_obj rx300_cstack, rx300_cur, rx300_curclass, "$!cstack"
  rx300_fail936:
    unless rx300_bstack, rx300_done934
    pop $I19, rx300_bstack
    if_null rx300_cstack, rx300_cstack_done939
    unless rx300_cstack, rx300_cstack_done939
    dec $I19
    set $P11, rx300_cstack[$I19]
  rx300_cstack_done939:
    pop rx300_rep, rx300_bstack
    pop rx300_pos, rx300_bstack
    pop $I19, rx300_bstack
    lt rx300_pos, -1, rx300_done934
    lt rx300_pos, 0, rx300_fail936
    eq $I19, 0, rx300_fail936
    nqp_islist $I20, rx300_cstack
    unless $I20, rx300_jump937
    elements $I18, rx300_bstack
    le $I18, 0, rx300_cut938
    dec $I18
    set $I18, rx300_bstack[$I18]
  rx300_cut938:
    assign rx300_cstack, $I18
  rx300_jump937:
    jump $I19
  rx300_done934:
    rx300_cur."!cursor_fail"()
    .return (rx300_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<e>" :subid("cuid_70_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 234
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx303_tgt
    .local int rx303_pos
    .local int rx303_off
    .local int rx303_eos
    .local int rx303_rep
    .local pmc rx303_cur
    .local pmc rx303_curclass
    .local pmc rx303_bstack
    .local pmc rx303_cstack
    (rx303_cur, rx303_tgt, rx303_pos, rx303_curclass, rx303_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx303_cur
    length rx303_eos, rx303_tgt
    eq $I19, 1, rx303_restart947
    gt rx303_pos, rx303_eos, rx303_fail948
    repr_get_attr_int $I11, self, rx303_curclass, "$!from"
    ne $I11, -1, rxscan304_done954
    goto rxscan304_scan953
  rxscan304_loop952:
    inc rx303_pos
    gt rx303_pos, rx303_eos, rx303_fail948
    repr_bind_attr_int rx303_cur, rx303_curclass, "$!from", rx303_pos
  rxscan304_scan953:
    nqp_rxmark rx303_bstack, rxscan304_loop952, rx303_pos, 0
  rxscan304_done954:
    nqp_rxmark rx303_bstack, rxcap305_fail956, rx303_pos, 0
    ge rx303_pos, rx303_eos, rx303_fail948
    substr $S11, rx303_tgt, rx303_pos, 1
    index $I11, ucs4:"eE", $S11
    lt $I11, 0, rx303_fail948
    inc rx303_pos
    nqp_rxpeek $I19, rx303_bstack, rxcap305_fail956
    inc $I19
    set $I11, rx303_bstack[$I19]
    repr_bind_attr_int rx303_cur, rx303_curclass, "$!pos", rx303_pos
    $P11 = rx303_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx303_pos)
    rx303_cstack = rx303_cur."!cursor_capture"($P11, "sym")
    goto rxcap305_done955
  rxcap305_fail956:
    goto rx303_fail948
  rxcap305_done955:
    rx303_cur."!cursor_pass"(rx303_pos, "backslash:sym<e>", 'backtrack'=>1)
    .return (rx303_cur)
  rx303_restart947:
    repr_get_attr_obj rx303_cstack, rx303_cur, rx303_curclass, "$!cstack"
  rx303_fail948:
    unless rx303_bstack, rx303_done946
    pop $I19, rx303_bstack
    if_null rx303_cstack, rx303_cstack_done951
    unless rx303_cstack, rx303_cstack_done951
    dec $I19
    set $P11, rx303_cstack[$I19]
  rx303_cstack_done951:
    pop rx303_rep, rx303_bstack
    pop rx303_pos, rx303_bstack
    pop $I19, rx303_bstack
    lt rx303_pos, -1, rx303_done946
    lt rx303_pos, 0, rx303_fail948
    eq $I19, 0, rx303_fail948
    nqp_islist $I20, rx303_cstack
    unless $I20, rx303_jump949
    elements $I18, rx303_bstack
    le $I18, 0, rx303_cut950
    dec $I18
    set $I18, rx303_bstack[$I18]
  rx303_cut950:
    assign rx303_cstack, $I18
  rx303_jump949:
    jump $I19
  rx303_done946:
    rx303_cur."!cursor_fail"()
    .return (rx303_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<f>" :subid("cuid_71_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 235
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx306_tgt
    .local int rx306_pos
    .local int rx306_off
    .local int rx306_eos
    .local int rx306_rep
    .local pmc rx306_cur
    .local pmc rx306_curclass
    .local pmc rx306_bstack
    .local pmc rx306_cstack
    (rx306_cur, rx306_tgt, rx306_pos, rx306_curclass, rx306_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx306_cur
    length rx306_eos, rx306_tgt
    eq $I19, 1, rx306_restart959
    gt rx306_pos, rx306_eos, rx306_fail960
    repr_get_attr_int $I11, self, rx306_curclass, "$!from"
    ne $I11, -1, rxscan307_done966
    goto rxscan307_scan965
  rxscan307_loop964:
    inc rx306_pos
    gt rx306_pos, rx306_eos, rx306_fail960
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!from", rx306_pos
  rxscan307_scan965:
    nqp_rxmark rx306_bstack, rxscan307_loop964, rx306_pos, 0
  rxscan307_done966:
    nqp_rxmark rx306_bstack, rxcap308_fail968, rx306_pos, 0
    ge rx306_pos, rx306_eos, rx306_fail960
    substr $S11, rx306_tgt, rx306_pos, 1
    index $I11, ucs4:"fF", $S11
    lt $I11, 0, rx306_fail960
    inc rx306_pos
    nqp_rxpeek $I19, rx306_bstack, rxcap308_fail968
    inc $I19
    set $I11, rx306_bstack[$I19]
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx306_pos)
    rx306_cstack = rx306_cur."!cursor_capture"($P11, "sym")
    goto rxcap308_done967
  rxcap308_fail968:
    goto rx306_fail960
  rxcap308_done967:
    rx306_cur."!cursor_pass"(rx306_pos, "backslash:sym<f>", 'backtrack'=>1)
    .return (rx306_cur)
  rx306_restart959:
    repr_get_attr_obj rx306_cstack, rx306_cur, rx306_curclass, "$!cstack"
  rx306_fail960:
    unless rx306_bstack, rx306_done958
    pop $I19, rx306_bstack
    if_null rx306_cstack, rx306_cstack_done963
    unless rx306_cstack, rx306_cstack_done963
    dec $I19
    set $P11, rx306_cstack[$I19]
  rx306_cstack_done963:
    pop rx306_rep, rx306_bstack
    pop rx306_pos, rx306_bstack
    pop $I19, rx306_bstack
    lt rx306_pos, -1, rx306_done958
    lt rx306_pos, 0, rx306_fail960
    eq $I19, 0, rx306_fail960
    nqp_islist $I20, rx306_cstack
    unless $I20, rx306_jump961
    elements $I18, rx306_bstack
    le $I18, 0, rx306_cut962
    dec $I18
    set $I18, rx306_bstack[$I18]
  rx306_cut962:
    assign rx306_cstack, $I18
  rx306_jump961:
    jump $I19
  rx306_done958:
    rx306_cur."!cursor_fail"()
    .return (rx306_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<h>" :subid("cuid_72_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 236
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx309_tgt
    .local int rx309_pos
    .local int rx309_off
    .local int rx309_eos
    .local int rx309_rep
    .local pmc rx309_cur
    .local pmc rx309_curclass
    .local pmc rx309_bstack
    .local pmc rx309_cstack
    (rx309_cur, rx309_tgt, rx309_pos, rx309_curclass, rx309_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx309_cur
    length rx309_eos, rx309_tgt
    eq $I19, 1, rx309_restart971
    gt rx309_pos, rx309_eos, rx309_fail972
    repr_get_attr_int $I11, self, rx309_curclass, "$!from"
    ne $I11, -1, rxscan310_done978
    goto rxscan310_scan977
  rxscan310_loop976:
    inc rx309_pos
    gt rx309_pos, rx309_eos, rx309_fail972
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!from", rx309_pos
  rxscan310_scan977:
    nqp_rxmark rx309_bstack, rxscan310_loop976, rx309_pos, 0
  rxscan310_done978:
    nqp_rxmark rx309_bstack, rxcap311_fail980, rx309_pos, 0
    ge rx309_pos, rx309_eos, rx309_fail972
    substr $S11, rx309_tgt, rx309_pos, 1
    index $I11, ucs4:"hH", $S11
    lt $I11, 0, rx309_fail972
    inc rx309_pos
    nqp_rxpeek $I19, rx309_bstack, rxcap311_fail980
    inc $I19
    set $I11, rx309_bstack[$I19]
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!pos", rx309_pos
    $P11 = rx309_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx309_pos)
    rx309_cstack = rx309_cur."!cursor_capture"($P11, "sym")
    goto rxcap311_done979
  rxcap311_fail980:
    goto rx309_fail972
  rxcap311_done979:
    rx309_cur."!cursor_pass"(rx309_pos, "backslash:sym<h>", 'backtrack'=>1)
    .return (rx309_cur)
  rx309_restart971:
    repr_get_attr_obj rx309_cstack, rx309_cur, rx309_curclass, "$!cstack"
  rx309_fail972:
    unless rx309_bstack, rx309_done970
    pop $I19, rx309_bstack
    if_null rx309_cstack, rx309_cstack_done975
    unless rx309_cstack, rx309_cstack_done975
    dec $I19
    set $P11, rx309_cstack[$I19]
  rx309_cstack_done975:
    pop rx309_rep, rx309_bstack
    pop rx309_pos, rx309_bstack
    pop $I19, rx309_bstack
    lt rx309_pos, -1, rx309_done970
    lt rx309_pos, 0, rx309_fail972
    eq $I19, 0, rx309_fail972
    nqp_islist $I20, rx309_cstack
    unless $I20, rx309_jump973
    elements $I18, rx309_bstack
    le $I18, 0, rx309_cut974
    dec $I18
    set $I18, rx309_bstack[$I18]
  rx309_cut974:
    assign rx309_cstack, $I18
  rx309_jump973:
    jump $I19
  rx309_done970:
    rx309_cur."!cursor_fail"()
    .return (rx309_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<r>" :subid("cuid_73_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 237
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx312_tgt
    .local int rx312_pos
    .local int rx312_off
    .local int rx312_eos
    .local int rx312_rep
    .local pmc rx312_cur
    .local pmc rx312_curclass
    .local pmc rx312_bstack
    .local pmc rx312_cstack
    (rx312_cur, rx312_tgt, rx312_pos, rx312_curclass, rx312_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx312_cur
    length rx312_eos, rx312_tgt
    eq $I19, 1, rx312_restart983
    gt rx312_pos, rx312_eos, rx312_fail984
    repr_get_attr_int $I11, self, rx312_curclass, "$!from"
    ne $I11, -1, rxscan313_done990
    goto rxscan313_scan989
  rxscan313_loop988:
    inc rx312_pos
    gt rx312_pos, rx312_eos, rx312_fail984
    repr_bind_attr_int rx312_cur, rx312_curclass, "$!from", rx312_pos
  rxscan313_scan989:
    nqp_rxmark rx312_bstack, rxscan313_loop988, rx312_pos, 0
  rxscan313_done990:
    nqp_rxmark rx312_bstack, rxcap314_fail992, rx312_pos, 0
    ge rx312_pos, rx312_eos, rx312_fail984
    substr $S11, rx312_tgt, rx312_pos, 1
    index $I11, ucs4:"rR", $S11
    lt $I11, 0, rx312_fail984
    inc rx312_pos
    nqp_rxpeek $I19, rx312_bstack, rxcap314_fail992
    inc $I19
    set $I11, rx312_bstack[$I19]
    repr_bind_attr_int rx312_cur, rx312_curclass, "$!pos", rx312_pos
    $P11 = rx312_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx312_pos)
    rx312_cstack = rx312_cur."!cursor_capture"($P11, "sym")
    goto rxcap314_done991
  rxcap314_fail992:
    goto rx312_fail984
  rxcap314_done991:
    rx312_cur."!cursor_pass"(rx312_pos, "backslash:sym<r>", 'backtrack'=>1)
    .return (rx312_cur)
  rx312_restart983:
    repr_get_attr_obj rx312_cstack, rx312_cur, rx312_curclass, "$!cstack"
  rx312_fail984:
    unless rx312_bstack, rx312_done982
    pop $I19, rx312_bstack
    if_null rx312_cstack, rx312_cstack_done987
    unless rx312_cstack, rx312_cstack_done987
    dec $I19
    set $P11, rx312_cstack[$I19]
  rx312_cstack_done987:
    pop rx312_rep, rx312_bstack
    pop rx312_pos, rx312_bstack
    pop $I19, rx312_bstack
    lt rx312_pos, -1, rx312_done982
    lt rx312_pos, 0, rx312_fail984
    eq $I19, 0, rx312_fail984
    nqp_islist $I20, rx312_cstack
    unless $I20, rx312_jump985
    elements $I18, rx312_bstack
    le $I18, 0, rx312_cut986
    dec $I18
    set $I18, rx312_bstack[$I18]
  rx312_cut986:
    assign rx312_cstack, $I18
  rx312_jump985:
    jump $I19
  rx312_done982:
    rx312_cur."!cursor_fail"()
    .return (rx312_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<t>" :subid("cuid_74_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 238
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx315_tgt
    .local int rx315_pos
    .local int rx315_off
    .local int rx315_eos
    .local int rx315_rep
    .local pmc rx315_cur
    .local pmc rx315_curclass
    .local pmc rx315_bstack
    .local pmc rx315_cstack
    (rx315_cur, rx315_tgt, rx315_pos, rx315_curclass, rx315_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx315_cur
    length rx315_eos, rx315_tgt
    eq $I19, 1, rx315_restart995
    gt rx315_pos, rx315_eos, rx315_fail996
    repr_get_attr_int $I11, self, rx315_curclass, "$!from"
    ne $I11, -1, rxscan316_done1002
    goto rxscan316_scan1001
  rxscan316_loop1000:
    inc rx315_pos
    gt rx315_pos, rx315_eos, rx315_fail996
    repr_bind_attr_int rx315_cur, rx315_curclass, "$!from", rx315_pos
  rxscan316_scan1001:
    nqp_rxmark rx315_bstack, rxscan316_loop1000, rx315_pos, 0
  rxscan316_done1002:
    nqp_rxmark rx315_bstack, rxcap317_fail1004, rx315_pos, 0
    ge rx315_pos, rx315_eos, rx315_fail996
    substr $S11, rx315_tgt, rx315_pos, 1
    index $I11, ucs4:"tT", $S11
    lt $I11, 0, rx315_fail996
    inc rx315_pos
    nqp_rxpeek $I19, rx315_bstack, rxcap317_fail1004
    inc $I19
    set $I11, rx315_bstack[$I19]
    repr_bind_attr_int rx315_cur, rx315_curclass, "$!pos", rx315_pos
    $P11 = rx315_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx315_pos)
    rx315_cstack = rx315_cur."!cursor_capture"($P11, "sym")
    goto rxcap317_done1003
  rxcap317_fail1004:
    goto rx315_fail996
  rxcap317_done1003:
    rx315_cur."!cursor_pass"(rx315_pos, "backslash:sym<t>", 'backtrack'=>1)
    .return (rx315_cur)
  rx315_restart995:
    repr_get_attr_obj rx315_cstack, rx315_cur, rx315_curclass, "$!cstack"
  rx315_fail996:
    unless rx315_bstack, rx315_done994
    pop $I19, rx315_bstack
    if_null rx315_cstack, rx315_cstack_done999
    unless rx315_cstack, rx315_cstack_done999
    dec $I19
    set $P11, rx315_cstack[$I19]
  rx315_cstack_done999:
    pop rx315_rep, rx315_bstack
    pop rx315_pos, rx315_bstack
    pop $I19, rx315_bstack
    lt rx315_pos, -1, rx315_done994
    lt rx315_pos, 0, rx315_fail996
    eq $I19, 0, rx315_fail996
    nqp_islist $I20, rx315_cstack
    unless $I20, rx315_jump997
    elements $I18, rx315_bstack
    le $I18, 0, rx315_cut998
    dec $I18
    set $I18, rx315_bstack[$I18]
  rx315_cut998:
    assign rx315_cstack, $I18
  rx315_jump997:
    jump $I19
  rx315_done994:
    rx315_cur."!cursor_fail"()
    .return (rx315_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<v>" :subid("cuid_75_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 239
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx318_tgt
    .local int rx318_pos
    .local int rx318_off
    .local int rx318_eos
    .local int rx318_rep
    .local pmc rx318_cur
    .local pmc rx318_curclass
    .local pmc rx318_bstack
    .local pmc rx318_cstack
    (rx318_cur, rx318_tgt, rx318_pos, rx318_curclass, rx318_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx318_cur
    length rx318_eos, rx318_tgt
    eq $I19, 1, rx318_restart1007
    gt rx318_pos, rx318_eos, rx318_fail1008
    repr_get_attr_int $I11, self, rx318_curclass, "$!from"
    ne $I11, -1, rxscan319_done1014
    goto rxscan319_scan1013
  rxscan319_loop1012:
    inc rx318_pos
    gt rx318_pos, rx318_eos, rx318_fail1008
    repr_bind_attr_int rx318_cur, rx318_curclass, "$!from", rx318_pos
  rxscan319_scan1013:
    nqp_rxmark rx318_bstack, rxscan319_loop1012, rx318_pos, 0
  rxscan319_done1014:
    nqp_rxmark rx318_bstack, rxcap320_fail1016, rx318_pos, 0
    ge rx318_pos, rx318_eos, rx318_fail1008
    substr $S11, rx318_tgt, rx318_pos, 1
    index $I11, ucs4:"vV", $S11
    lt $I11, 0, rx318_fail1008
    inc rx318_pos
    nqp_rxpeek $I19, rx318_bstack, rxcap320_fail1016
    inc $I19
    set $I11, rx318_bstack[$I19]
    repr_bind_attr_int rx318_cur, rx318_curclass, "$!pos", rx318_pos
    $P11 = rx318_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx318_pos)
    rx318_cstack = rx318_cur."!cursor_capture"($P11, "sym")
    goto rxcap320_done1015
  rxcap320_fail1016:
    goto rx318_fail1008
  rxcap320_done1015:
    rx318_cur."!cursor_pass"(rx318_pos, "backslash:sym<v>", 'backtrack'=>1)
    .return (rx318_cur)
  rx318_restart1007:
    repr_get_attr_obj rx318_cstack, rx318_cur, rx318_curclass, "$!cstack"
  rx318_fail1008:
    unless rx318_bstack, rx318_done1006
    pop $I19, rx318_bstack
    if_null rx318_cstack, rx318_cstack_done1011
    unless rx318_cstack, rx318_cstack_done1011
    dec $I19
    set $P11, rx318_cstack[$I19]
  rx318_cstack_done1011:
    pop rx318_rep, rx318_bstack
    pop rx318_pos, rx318_bstack
    pop $I19, rx318_bstack
    lt rx318_pos, -1, rx318_done1006
    lt rx318_pos, 0, rx318_fail1008
    eq $I19, 0, rx318_fail1008
    nqp_islist $I20, rx318_cstack
    unless $I20, rx318_jump1009
    elements $I18, rx318_bstack
    le $I18, 0, rx318_cut1010
    dec $I18
    set $I18, rx318_bstack[$I18]
  rx318_cut1010:
    assign rx318_cstack, $I18
  rx318_jump1009:
    jump $I19
  rx318_done1006:
    rx318_cur."!cursor_fail"()
    .return (rx318_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<o>" :subid("cuid_76_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 240
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx321_tgt
    .local int rx321_pos
    .local int rx321_off
    .local int rx321_eos
    .local int rx321_rep
    .local pmc rx321_cur
    .local pmc rx321_curclass
    .local pmc rx321_bstack
    .local pmc rx321_cstack
    (rx321_cur, rx321_tgt, rx321_pos, rx321_curclass, rx321_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx321_cur
    length rx321_eos, rx321_tgt
    eq $I19, 1, rx321_restart1019
    gt rx321_pos, rx321_eos, rx321_fail1020
    repr_get_attr_int $I11, self, rx321_curclass, "$!from"
    ne $I11, -1, rxscan322_done1026
    goto rxscan322_scan1025
  rxscan322_loop1024:
    inc rx321_pos
    gt rx321_pos, rx321_eos, rx321_fail1020
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!from", rx321_pos
  rxscan322_scan1025:
    nqp_rxmark rx321_bstack, rxscan322_loop1024, rx321_pos, 0
  rxscan322_done1026:
    nqp_rxmark rx321_bstack, rxcap323_fail1028, rx321_pos, 0
    ge rx321_pos, rx321_eos, rx321_fail1020
    substr $S11, rx321_tgt, rx321_pos, 1
    index $I11, ucs4:"oO", $S11
    lt $I11, 0, rx321_fail1020
    inc rx321_pos
    nqp_rxpeek $I19, rx321_bstack, rxcap323_fail1028
    inc $I19
    set $I11, rx321_bstack[$I19]
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!pos", rx321_pos
    $P11 = rx321_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx321_pos)
    rx321_cstack = rx321_cur."!cursor_capture"($P11, "sym")
    goto rxcap323_done1027
  rxcap323_fail1028:
    goto rx321_fail1020
  rxcap323_done1027:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt324_01030
    nqp_push_label $P11, alt324_11032
    nqp_rxmark rx321_bstack, alt324_end1029, -1, 0
    rx321_cur."!alt"(rx321_pos, "alt_nfa__13_1360426900.192", $P11)
    goto rx321_fail1020
  alt324_01030:
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!pos", rx321_pos
    $P11 = rx321_cur."octint"()
    repr_get_attr_int $I11, $P11, rx321_curclass, "$!pos"
    lt $I11, 0, rx321_fail1020
    nqp_rxmark rx321_bstack, rxsubrule325_pass1031, -1, 0
  rxsubrule325_pass1031:
    rx321_cstack = rx321_cur."!cursor_capture"($P11, "octint")
    repr_get_attr_int rx321_pos, $P11, rx321_curclass, "$!pos"
    goto alt324_end1029
  alt324_11032:
    add $I11, rx321_pos, 1
    gt $I11, rx321_eos, rx321_fail1020
    substr $S10, rx321_tgt, rx321_pos, 1
    ne $S10, ucs4:"[", rx321_fail1020
    add rx321_pos, 1
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!pos", rx321_pos
    $P11 = rx321_cur."octints"()
    repr_get_attr_int $I11, $P11, rx321_curclass, "$!pos"
    lt $I11, 0, rx321_fail1020
    nqp_rxmark rx321_bstack, rxsubrule326_pass1033, -1, 0
  rxsubrule326_pass1033:
    rx321_cstack = rx321_cur."!cursor_capture"($P11, "octints")
    repr_get_attr_int rx321_pos, $P11, rx321_curclass, "$!pos"
    add $I11, rx321_pos, 1
    gt $I11, rx321_eos, rx321_fail1020
    substr $S10, rx321_tgt, rx321_pos, 1
    ne $S10, ucs4:"]", rx321_fail1020
    add rx321_pos, 1
    goto alt324_end1029
  alt324_end1029:
    nqp_rxcommit rx321_bstack, alt324_end1029
    rx321_cur."!cursor_pass"(rx321_pos, "backslash:sym<o>", 'backtrack'=>1)
    .return (rx321_cur)
  rx321_restart1019:
    repr_get_attr_obj rx321_cstack, rx321_cur, rx321_curclass, "$!cstack"
  rx321_fail1020:
    unless rx321_bstack, rx321_done1018
    pop $I19, rx321_bstack
    if_null rx321_cstack, rx321_cstack_done1023
    unless rx321_cstack, rx321_cstack_done1023
    dec $I19
    set $P11, rx321_cstack[$I19]
  rx321_cstack_done1023:
    pop rx321_rep, rx321_bstack
    pop rx321_pos, rx321_bstack
    pop $I19, rx321_bstack
    lt rx321_pos, -1, rx321_done1018
    lt rx321_pos, 0, rx321_fail1020
    eq $I19, 0, rx321_fail1020
    nqp_islist $I20, rx321_cstack
    unless $I20, rx321_jump1021
    elements $I18, rx321_bstack
    le $I18, 0, rx321_cut1022
    dec $I18
    set $I18, rx321_bstack[$I18]
  rx321_cut1022:
    assign rx321_cstack, $I18
  rx321_jump1021:
    jump $I19
  rx321_done1018:
    rx321_cur."!cursor_fail"()
    .return (rx321_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<x>" :subid("cuid_77_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 241
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx327_tgt
    .local int rx327_pos
    .local int rx327_off
    .local int rx327_eos
    .local int rx327_rep
    .local pmc rx327_cur
    .local pmc rx327_curclass
    .local pmc rx327_bstack
    .local pmc rx327_cstack
    (rx327_cur, rx327_tgt, rx327_pos, rx327_curclass, rx327_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx327_cur
    length rx327_eos, rx327_tgt
    eq $I19, 1, rx327_restart1036
    gt rx327_pos, rx327_eos, rx327_fail1037
    repr_get_attr_int $I11, self, rx327_curclass, "$!from"
    ne $I11, -1, rxscan328_done1043
    goto rxscan328_scan1042
  rxscan328_loop1041:
    inc rx327_pos
    gt rx327_pos, rx327_eos, rx327_fail1037
    repr_bind_attr_int rx327_cur, rx327_curclass, "$!from", rx327_pos
  rxscan328_scan1042:
    nqp_rxmark rx327_bstack, rxscan328_loop1041, rx327_pos, 0
  rxscan328_done1043:
    nqp_rxmark rx327_bstack, rxcap329_fail1045, rx327_pos, 0
    ge rx327_pos, rx327_eos, rx327_fail1037
    substr $S11, rx327_tgt, rx327_pos, 1
    index $I11, ucs4:"xX", $S11
    lt $I11, 0, rx327_fail1037
    inc rx327_pos
    nqp_rxpeek $I19, rx327_bstack, rxcap329_fail1045
    inc $I19
    set $I11, rx327_bstack[$I19]
    repr_bind_attr_int rx327_cur, rx327_curclass, "$!pos", rx327_pos
    $P11 = rx327_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx327_pos)
    rx327_cstack = rx327_cur."!cursor_capture"($P11, "sym")
    goto rxcap329_done1044
  rxcap329_fail1045:
    goto rx327_fail1037
  rxcap329_done1044:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt330_01047
    nqp_push_label $P11, alt330_11049
    nqp_rxmark rx327_bstack, alt330_end1046, -1, 0
    rx327_cur."!alt"(rx327_pos, "alt_nfa__14_1360426900.203", $P11)
    goto rx327_fail1037
  alt330_01047:
    repr_bind_attr_int rx327_cur, rx327_curclass, "$!pos", rx327_pos
    $P11 = rx327_cur."hexint"()
    repr_get_attr_int $I11, $P11, rx327_curclass, "$!pos"
    lt $I11, 0, rx327_fail1037
    nqp_rxmark rx327_bstack, rxsubrule331_pass1048, -1, 0
  rxsubrule331_pass1048:
    rx327_cstack = rx327_cur."!cursor_capture"($P11, "hexint")
    repr_get_attr_int rx327_pos, $P11, rx327_curclass, "$!pos"
    goto alt330_end1046
  alt330_11049:
    add $I11, rx327_pos, 1
    gt $I11, rx327_eos, rx327_fail1037
    substr $S10, rx327_tgt, rx327_pos, 1
    ne $S10, ucs4:"[", rx327_fail1037
    add rx327_pos, 1
    repr_bind_attr_int rx327_cur, rx327_curclass, "$!pos", rx327_pos
    $P11 = rx327_cur."hexints"()
    repr_get_attr_int $I11, $P11, rx327_curclass, "$!pos"
    lt $I11, 0, rx327_fail1037
    nqp_rxmark rx327_bstack, rxsubrule332_pass1050, -1, 0
  rxsubrule332_pass1050:
    rx327_cstack = rx327_cur."!cursor_capture"($P11, "hexints")
    repr_get_attr_int rx327_pos, $P11, rx327_curclass, "$!pos"
    add $I11, rx327_pos, 1
    gt $I11, rx327_eos, rx327_fail1037
    substr $S10, rx327_tgt, rx327_pos, 1
    ne $S10, ucs4:"]", rx327_fail1037
    add rx327_pos, 1
    goto alt330_end1046
  alt330_end1046:
    nqp_rxcommit rx327_bstack, alt330_end1046
    rx327_cur."!cursor_pass"(rx327_pos, "backslash:sym<x>", 'backtrack'=>1)
    .return (rx327_cur)
  rx327_restart1036:
    repr_get_attr_obj rx327_cstack, rx327_cur, rx327_curclass, "$!cstack"
  rx327_fail1037:
    unless rx327_bstack, rx327_done1035
    pop $I19, rx327_bstack
    if_null rx327_cstack, rx327_cstack_done1040
    unless rx327_cstack, rx327_cstack_done1040
    dec $I19
    set $P11, rx327_cstack[$I19]
  rx327_cstack_done1040:
    pop rx327_rep, rx327_bstack
    pop rx327_pos, rx327_bstack
    pop $I19, rx327_bstack
    lt rx327_pos, -1, rx327_done1035
    lt rx327_pos, 0, rx327_fail1037
    eq $I19, 0, rx327_fail1037
    nqp_islist $I20, rx327_cstack
    unless $I20, rx327_jump1038
    elements $I18, rx327_bstack
    le $I18, 0, rx327_cut1039
    dec $I18
    set $I18, rx327_bstack[$I18]
  rx327_cut1039:
    assign rx327_cstack, $I18
  rx327_jump1038:
    jump $I19
  rx327_done1035:
    rx327_cur."!cursor_fail"()
    .return (rx327_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<c>" :subid("cuid_78_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 242
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx333_tgt
    .local int rx333_pos
    .local int rx333_off
    .local int rx333_eos
    .local int rx333_rep
    .local pmc rx333_cur
    .local pmc rx333_curclass
    .local pmc rx333_bstack
    .local pmc rx333_cstack
    (rx333_cur, rx333_tgt, rx333_pos, rx333_curclass, rx333_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx333_cur
    length rx333_eos, rx333_tgt
    eq $I19, 1, rx333_restart1053
    gt rx333_pos, rx333_eos, rx333_fail1054
    repr_get_attr_int $I11, self, rx333_curclass, "$!from"
    ne $I11, -1, rxscan334_done1060
    goto rxscan334_scan1059
  rxscan334_loop1058:
    inc rx333_pos
    gt rx333_pos, rx333_eos, rx333_fail1054
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!from", rx333_pos
  rxscan334_scan1059:
    nqp_rxmark rx333_bstack, rxscan334_loop1058, rx333_pos, 0
  rxscan334_done1060:
    nqp_rxmark rx333_bstack, rxcap335_fail1062, rx333_pos, 0
    ge rx333_pos, rx333_eos, rx333_fail1054
    substr $S11, rx333_tgt, rx333_pos, 1
    index $I11, ucs4:"cC", $S11
    lt $I11, 0, rx333_fail1054
    inc rx333_pos
    nqp_rxpeek $I19, rx333_bstack, rxcap335_fail1062
    inc $I19
    set $I11, rx333_bstack[$I19]
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!pos", rx333_pos
    $P11 = rx333_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx333_pos)
    rx333_cstack = rx333_cur."!cursor_capture"($P11, "sym")
    goto rxcap335_done1061
  rxcap335_fail1062:
    goto rx333_fail1054
  rxcap335_done1061:
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!pos", rx333_pos
    $P11 = rx333_cur."charspec"()
    repr_get_attr_int $I11, $P11, rx333_curclass, "$!pos"
    lt $I11, 0, rx333_fail1054
    nqp_rxmark rx333_bstack, rxsubrule336_pass1063, -1, 0
  rxsubrule336_pass1063:
    rx333_cstack = rx333_cur."!cursor_capture"($P11, "charspec")
    repr_get_attr_int rx333_pos, $P11, rx333_curclass, "$!pos"
    rx333_cur."!cursor_pass"(rx333_pos, "backslash:sym<c>", 'backtrack'=>1)
    .return (rx333_cur)
  rx333_restart1053:
    repr_get_attr_obj rx333_cstack, rx333_cur, rx333_curclass, "$!cstack"
  rx333_fail1054:
    unless rx333_bstack, rx333_done1052
    pop $I19, rx333_bstack
    if_null rx333_cstack, rx333_cstack_done1057
    unless rx333_cstack, rx333_cstack_done1057
    dec $I19
    set $P11, rx333_cstack[$I19]
  rx333_cstack_done1057:
    pop rx333_rep, rx333_bstack
    pop rx333_pos, rx333_bstack
    pop $I19, rx333_bstack
    lt rx333_pos, -1, rx333_done1052
    lt rx333_pos, 0, rx333_fail1054
    eq $I19, 0, rx333_fail1054
    nqp_islist $I20, rx333_cstack
    unless $I20, rx333_jump1055
    elements $I18, rx333_bstack
    le $I18, 0, rx333_cut1056
    dec $I18
    set $I18, rx333_bstack[$I18]
  rx333_cut1056:
    assign rx333_cstack, $I18
  rx333_jump1055:
    jump $I19
  rx333_done1052:
    rx333_cur."!cursor_fail"()
    .return (rx333_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<A>" :subid("cuid_79_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 243
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx337_tgt
    .local int rx337_pos
    .local int rx337_off
    .local int rx337_eos
    .local int rx337_rep
    .local pmc rx337_cur
    .local pmc rx337_curclass
    .local pmc rx337_bstack
    .local pmc rx337_cstack
    (rx337_cur, rx337_tgt, rx337_pos, rx337_curclass, rx337_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx337_cur
    length rx337_eos, rx337_tgt
    eq $I19, 1, rx337_restart1066
    gt rx337_pos, rx337_eos, rx337_fail1067
    repr_get_attr_int $I11, self, rx337_curclass, "$!from"
    ne $I11, -1, rxscan338_done1073
    goto rxscan338_scan1072
  rxscan338_loop1071:
    inc rx337_pos
    gt rx337_pos, rx337_eos, rx337_fail1067
    repr_bind_attr_int rx337_cur, rx337_curclass, "$!from", rx337_pos
  rxscan338_scan1072:
    nqp_rxmark rx337_bstack, rxscan338_loop1071, rx337_pos, 0
  rxscan338_done1073:
    add $I11, rx337_pos, 1
    gt $I11, rx337_eos, rx337_fail1067
    substr $S10, rx337_tgt, rx337_pos, 1
    ne $S10, ucs4:"A", rx337_fail1067
    add rx337_pos, 1
    repr_bind_attr_int rx337_cur, rx337_curclass, "$!pos", rx337_pos
    $P11 = rx337_cur."obs"("\\\\A as beginning-of-string matcher", "^")
    repr_get_attr_int $I11, $P11, rx337_curclass, "$!pos"
    lt $I11, 0, rx337_fail1067
    repr_get_attr_int rx337_pos, $P11, rx337_curclass, "$!pos"
    rx337_cur."!cursor_pass"(rx337_pos, "backslash:sym<A>", 'backtrack'=>1)
    .return (rx337_cur)
  rx337_restart1066:
    repr_get_attr_obj rx337_cstack, rx337_cur, rx337_curclass, "$!cstack"
  rx337_fail1067:
    unless rx337_bstack, rx337_done1065
    pop $I19, rx337_bstack
    if_null rx337_cstack, rx337_cstack_done1070
    unless rx337_cstack, rx337_cstack_done1070
    dec $I19
    set $P11, rx337_cstack[$I19]
  rx337_cstack_done1070:
    pop rx337_rep, rx337_bstack
    pop rx337_pos, rx337_bstack
    pop $I19, rx337_bstack
    lt rx337_pos, -1, rx337_done1065
    lt rx337_pos, 0, rx337_fail1067
    eq $I19, 0, rx337_fail1067
    nqp_islist $I20, rx337_cstack
    unless $I20, rx337_jump1068
    elements $I18, rx337_bstack
    le $I18, 0, rx337_cut1069
    dec $I18
    set $I18, rx337_bstack[$I18]
  rx337_cut1069:
    assign rx337_cstack, $I18
  rx337_jump1068:
    jump $I19
  rx337_done1065:
    rx337_cur."!cursor_fail"()
    .return (rx337_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<z>" :subid("cuid_80_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 244
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx340_tgt
    .local int rx340_pos
    .local int rx340_off
    .local int rx340_eos
    .local int rx340_rep
    .local pmc rx340_cur
    .local pmc rx340_curclass
    .local pmc rx340_bstack
    .local pmc rx340_cstack
    (rx340_cur, rx340_tgt, rx340_pos, rx340_curclass, rx340_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx340_cur
    length rx340_eos, rx340_tgt
    eq $I19, 1, rx340_restart1077
    gt rx340_pos, rx340_eos, rx340_fail1078
    repr_get_attr_int $I11, self, rx340_curclass, "$!from"
    ne $I11, -1, rxscan341_done1084
    goto rxscan341_scan1083
  rxscan341_loop1082:
    inc rx340_pos
    gt rx340_pos, rx340_eos, rx340_fail1078
    repr_bind_attr_int rx340_cur, rx340_curclass, "$!from", rx340_pos
  rxscan341_scan1083:
    nqp_rxmark rx340_bstack, rxscan341_loop1082, rx340_pos, 0
  rxscan341_done1084:
    add $I11, rx340_pos, 1
    gt $I11, rx340_eos, rx340_fail1078
    substr $S10, rx340_tgt, rx340_pos, 1
    ne $S10, ucs4:"z", rx340_fail1078
    add rx340_pos, 1
    repr_bind_attr_int rx340_cur, rx340_curclass, "$!pos", rx340_pos
    $P11 = rx340_cur."obs"("\\\\z as end-of-string matcher", "$")
    repr_get_attr_int $I11, $P11, rx340_curclass, "$!pos"
    lt $I11, 0, rx340_fail1078
    repr_get_attr_int rx340_pos, $P11, rx340_curclass, "$!pos"
    rx340_cur."!cursor_pass"(rx340_pos, "backslash:sym<z>", 'backtrack'=>1)
    .return (rx340_cur)
  rx340_restart1077:
    repr_get_attr_obj rx340_cstack, rx340_cur, rx340_curclass, "$!cstack"
  rx340_fail1078:
    unless rx340_bstack, rx340_done1076
    pop $I19, rx340_bstack
    if_null rx340_cstack, rx340_cstack_done1081
    unless rx340_cstack, rx340_cstack_done1081
    dec $I19
    set $P11, rx340_cstack[$I19]
  rx340_cstack_done1081:
    pop rx340_rep, rx340_bstack
    pop rx340_pos, rx340_bstack
    pop $I19, rx340_bstack
    lt rx340_pos, -1, rx340_done1076
    lt rx340_pos, 0, rx340_fail1078
    eq $I19, 0, rx340_fail1078
    nqp_islist $I20, rx340_cstack
    unless $I20, rx340_jump1079
    elements $I18, rx340_bstack
    le $I18, 0, rx340_cut1080
    dec $I18
    set $I18, rx340_bstack[$I18]
  rx340_cut1080:
    assign rx340_cstack, $I18
  rx340_jump1079:
    jump $I19
  rx340_done1076:
    rx340_cur."!cursor_fail"()
    .return (rx340_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<Z>" :subid("cuid_81_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 245
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx343_tgt
    .local int rx343_pos
    .local int rx343_off
    .local int rx343_eos
    .local int rx343_rep
    .local pmc rx343_cur
    .local pmc rx343_curclass
    .local pmc rx343_bstack
    .local pmc rx343_cstack
    (rx343_cur, rx343_tgt, rx343_pos, rx343_curclass, rx343_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx343_cur
    length rx343_eos, rx343_tgt
    eq $I19, 1, rx343_restart1088
    gt rx343_pos, rx343_eos, rx343_fail1089
    repr_get_attr_int $I11, self, rx343_curclass, "$!from"
    ne $I11, -1, rxscan344_done1095
    goto rxscan344_scan1094
  rxscan344_loop1093:
    inc rx343_pos
    gt rx343_pos, rx343_eos, rx343_fail1089
    repr_bind_attr_int rx343_cur, rx343_curclass, "$!from", rx343_pos
  rxscan344_scan1094:
    nqp_rxmark rx343_bstack, rxscan344_loop1093, rx343_pos, 0
  rxscan344_done1095:
    add $I11, rx343_pos, 1
    gt $I11, rx343_eos, rx343_fail1089
    substr $S10, rx343_tgt, rx343_pos, 1
    ne $S10, ucs4:"Z", rx343_fail1089
    add rx343_pos, 1
    repr_bind_attr_int rx343_cur, rx343_curclass, "$!pos", rx343_pos
    $P11 = rx343_cur."obs"("\\\\Z as end-of-string matcher", "\\\\n?$")
    repr_get_attr_int $I11, $P11, rx343_curclass, "$!pos"
    lt $I11, 0, rx343_fail1089
    repr_get_attr_int rx343_pos, $P11, rx343_curclass, "$!pos"
    rx343_cur."!cursor_pass"(rx343_pos, "backslash:sym<Z>", 'backtrack'=>1)
    .return (rx343_cur)
  rx343_restart1088:
    repr_get_attr_obj rx343_cstack, rx343_cur, rx343_curclass, "$!cstack"
  rx343_fail1089:
    unless rx343_bstack, rx343_done1087
    pop $I19, rx343_bstack
    if_null rx343_cstack, rx343_cstack_done1092
    unless rx343_cstack, rx343_cstack_done1092
    dec $I19
    set $P11, rx343_cstack[$I19]
  rx343_cstack_done1092:
    pop rx343_rep, rx343_bstack
    pop rx343_pos, rx343_bstack
    pop $I19, rx343_bstack
    lt rx343_pos, -1, rx343_done1087
    lt rx343_pos, 0, rx343_fail1089
    eq $I19, 0, rx343_fail1089
    nqp_islist $I20, rx343_cstack
    unless $I20, rx343_jump1090
    elements $I18, rx343_bstack
    le $I18, 0, rx343_cut1091
    dec $I18
    set $I18, rx343_bstack[$I18]
  rx343_cut1091:
    assign rx343_cstack, $I18
  rx343_jump1090:
    jump $I19
  rx343_done1087:
    rx343_cur."!cursor_fail"()
    .return (rx343_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<Q>" :subid("cuid_82_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 246
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx346_tgt
    .local int rx346_pos
    .local int rx346_off
    .local int rx346_eos
    .local int rx346_rep
    .local pmc rx346_cur
    .local pmc rx346_curclass
    .local pmc rx346_bstack
    .local pmc rx346_cstack
    (rx346_cur, rx346_tgt, rx346_pos, rx346_curclass, rx346_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx346_cur
    length rx346_eos, rx346_tgt
    eq $I19, 1, rx346_restart1099
    gt rx346_pos, rx346_eos, rx346_fail1100
    repr_get_attr_int $I11, self, rx346_curclass, "$!from"
    ne $I11, -1, rxscan347_done1106
    goto rxscan347_scan1105
  rxscan347_loop1104:
    inc rx346_pos
    gt rx346_pos, rx346_eos, rx346_fail1100
    repr_bind_attr_int rx346_cur, rx346_curclass, "$!from", rx346_pos
  rxscan347_scan1105:
    nqp_rxmark rx346_bstack, rxscan347_loop1104, rx346_pos, 0
  rxscan347_done1106:
    add $I11, rx346_pos, 1
    gt $I11, rx346_eos, rx346_fail1100
    substr $S10, rx346_tgt, rx346_pos, 1
    ne $S10, ucs4:"Q", rx346_fail1100
    add rx346_pos, 1
    repr_bind_attr_int rx346_cur, rx346_curclass, "$!pos", rx346_pos
    $P11 = rx346_cur."obs"("\\\\Q as quotemeta", "quotes or literal variable match")
    repr_get_attr_int $I11, $P11, rx346_curclass, "$!pos"
    lt $I11, 0, rx346_fail1100
    repr_get_attr_int rx346_pos, $P11, rx346_curclass, "$!pos"
    rx346_cur."!cursor_pass"(rx346_pos, "backslash:sym<Q>", 'backtrack'=>1)
    .return (rx346_cur)
  rx346_restart1099:
    repr_get_attr_obj rx346_cstack, rx346_cur, rx346_curclass, "$!cstack"
  rx346_fail1100:
    unless rx346_bstack, rx346_done1098
    pop $I19, rx346_bstack
    if_null rx346_cstack, rx346_cstack_done1103
    unless rx346_cstack, rx346_cstack_done1103
    dec $I19
    set $P11, rx346_cstack[$I19]
  rx346_cstack_done1103:
    pop rx346_rep, rx346_bstack
    pop rx346_pos, rx346_bstack
    pop $I19, rx346_bstack
    lt rx346_pos, -1, rx346_done1098
    lt rx346_pos, 0, rx346_fail1100
    eq $I19, 0, rx346_fail1100
    nqp_islist $I20, rx346_cstack
    unless $I20, rx346_jump1101
    elements $I18, rx346_bstack
    le $I18, 0, rx346_cut1102
    dec $I18
    set $I18, rx346_bstack[$I18]
  rx346_cut1102:
    assign rx346_cstack, $I18
  rx346_jump1101:
    jump $I19
  rx346_done1098:
    rx346_cur."!cursor_fail"()
    .return (rx346_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<unrec>" :subid("cuid_83_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 247
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_186_1360426899.567' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_84_1360426899.567' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_187_1360426899.567' 
    capture_lex $P5008 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx349_tgt
    .local int rx349_pos
    .local int rx349_off
    .local int rx349_eos
    .local int rx349_rep
    .local pmc rx349_cur
    .local pmc rx349_curclass
    .local pmc rx349_bstack
    .local pmc rx349_cstack
    (rx349_cur, rx349_tgt, rx349_pos, rx349_curclass, rx349_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx349_cur
    length rx349_eos, rx349_tgt
    eq $I19, 1, rx349_restart1110
    gt rx349_pos, rx349_eos, rx349_fail1111
    repr_get_attr_int $I11, self, rx349_curclass, "$!from"
    ne $I11, -1, rxscan350_done1117
    goto rxscan350_scan1116
  rxscan350_loop1115:
    inc rx349_pos
    gt rx349_pos, rx349_eos, rx349_fail1111
    repr_bind_attr_int rx349_cur, rx349_curclass, "$!from", rx349_pos
  rxscan350_scan1116:
    nqp_rxmark rx349_bstack, rxscan350_loop1115, rx349_pos, 0
  rxscan350_done1117:
    repr_bind_attr_int rx349_cur, rx349_curclass, "$!pos", rx349_pos
    store_lex unicode:"$\x{a2}", rx349_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_186_1360426899.567' 
    capture_lex $P5002
    $P5003 = $P5002()
    .const 'Sub' $P5004 = 'cuid_84_1360426899.567' 
    capture_lex $P5004
    repr_bind_attr_int rx349_cur, rx349_curclass, "$!pos", rx349_pos
    $P11 = rx349_cur.$P5004()
    repr_get_attr_int $I11, $P11, rx349_curclass, "$!pos"
    lt $I11, 0, rx349_fail1111
    nqp_rxmark rx349_bstack, rxsubrule353_pass1128, -1, 0
  rxsubrule353_pass1128:
    rx349_cstack = rx349_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx349_pos, $P11, rx349_curclass, "$!pos"
    repr_bind_attr_int rx349_cur, rx349_curclass, "$!pos", rx349_pos
    store_lex unicode:"$\x{a2}", rx349_cur
    $P5005 = $P101."MATCH"()
    set $P102, $P5005
    .const 'Sub' $P5006 = 'cuid_187_1360426899.567' 
    capture_lex $P5006
    $P5007 = $P5006()
    rx349_cur."!cursor_pass"(rx349_pos, "backslash:sym<unrec>", 'backtrack'=>1)
    .return (rx349_cur)
  rx349_restart1110:
    repr_get_attr_obj rx349_cstack, rx349_cur, rx349_curclass, "$!cstack"
  rx349_fail1111:
    unless rx349_bstack, rx349_done1109
    pop $I19, rx349_bstack
    if_null rx349_cstack, rx349_cstack_done1114
    unless rx349_cstack, rx349_cstack_done1114
    dec $I19
    set $P11, rx349_cstack[$I19]
  rx349_cstack_done1114:
    pop rx349_rep, rx349_bstack
    pop rx349_pos, rx349_bstack
    pop $I19, rx349_bstack
    lt rx349_pos, -1, rx349_done1109
    lt rx349_pos, 0, rx349_fail1111
    eq $I19, 0, rx349_fail1111
    nqp_islist $I20, rx349_cstack
    unless $I20, rx349_jump1112
    elements $I18, rx349_bstack
    le $I18, 0, rx349_cut1113
    dec $I18
    set $I18, rx349_bstack[$I18]
  rx349_cut1113:
    assign rx349_cstack, $I18
  rx349_jump1112:
    jump $I19
  rx349_done1109:
    rx349_cur."!cursor_fail"()
    .return (rx349_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_186_1360426899.567") :anon :lex :outer("cuid_83_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 247

    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_84_1360426899.567") :anon :lex :outer("cuid_83_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx351_tgt
    .local int rx351_pos
    .local int rx351_off
    .local int rx351_eos
    .local int rx351_rep
    .local pmc rx351_cur
    .local pmc rx351_curclass
    .local pmc rx351_bstack
    .local pmc rx351_cstack
    (rx351_cur, rx351_tgt, rx351_pos, rx351_curclass, rx351_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx351_cur
    length rx351_eos, rx351_tgt
    eq $I19, 1, rx351_restart1120
    gt rx351_pos, rx351_eos, rx351_fail1121
    repr_get_attr_int $I11, self, rx351_curclass, "$!from"
    ne $I11, -1, rxscan352_done1127
    goto rxscan352_scan1126
  rxscan352_loop1125:
    inc rx351_pos
    gt rx351_pos, rx351_eos, rx351_fail1121
    repr_bind_attr_int rx351_cur, rx351_curclass, "$!from", rx351_pos
  rxscan352_scan1126:
    nqp_rxmark rx351_bstack, rxscan352_loop1125, rx351_pos, 0
  rxscan352_done1127:
    ge rx351_pos, rx351_eos, rx351_fail1121
    is_cclass $I11, .CCLASS_WORD, rx351_tgt, rx351_pos
    unless $I11, rx351_fail1121
    add rx351_pos, 1
    rx351_cur."!cursor_pass"(rx351_pos, 'backtrack'=>1)
    .return (rx351_cur)
  rx351_restart1120:
    repr_get_attr_obj rx351_cstack, rx351_cur, rx351_curclass, "$!cstack"
  rx351_fail1121:
    unless rx351_bstack, rx351_done1119
    pop $I19, rx351_bstack
    if_null rx351_cstack, rx351_cstack_done1124
    unless rx351_cstack, rx351_cstack_done1124
    dec $I19
    set $P11, rx351_cstack[$I19]
  rx351_cstack_done1124:
    pop rx351_rep, rx351_bstack
    pop rx351_pos, rx351_bstack
    pop $I19, rx351_bstack
    lt rx351_pos, -1, rx351_done1119
    lt rx351_pos, 0, rx351_fail1121
    eq $I19, 0, rx351_fail1121
    nqp_islist $I20, rx351_cstack
    unless $I20, rx351_jump1122
    elements $I18, rx351_bstack
    le $I18, 0, rx351_cut1123
    dec $I18
    set $I18, rx351_bstack[$I18]
  rx351_cut1123:
    assign rx351_cstack, $I18
  rx351_jump1122:
    jump $I19
  rx351_done1119:
    rx351_cur."!cursor_fail"()
    .return (rx351_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_187_1360426899.567") :anon :lex :outer("cuid_83_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 247

    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5004, "$/"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback1129
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5005
  fallback1129:
    $P5006 = $P5003."Str"()
    $P5007 = $P5001."throw_unrecog_backslash_seq"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<misc>" :subid("cuid_85_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 248
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx354_tgt
    .local int rx354_pos
    .local int rx354_off
    .local int rx354_eos
    .local int rx354_rep
    .local pmc rx354_cur
    .local pmc rx354_curclass
    .local pmc rx354_bstack
    .local pmc rx354_cstack
    (rx354_cur, rx354_tgt, rx354_pos, rx354_curclass, rx354_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx354_cur
    length rx354_eos, rx354_tgt
    eq $I19, 1, rx354_restart1132
    gt rx354_pos, rx354_eos, rx354_fail1133
    repr_get_attr_int $I11, self, rx354_curclass, "$!from"
    ne $I11, -1, rxscan355_done1139
    goto rxscan355_scan1138
  rxscan355_loop1137:
    inc rx354_pos
    gt rx354_pos, rx354_eos, rx354_fail1133
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!from", rx354_pos
  rxscan355_scan1138:
    nqp_rxmark rx354_bstack, rxscan355_loop1137, rx354_pos, 0
  rxscan355_done1139:
    ge rx354_pos, rx354_eos, rx354_fail1133
    is_cclass $I11, .CCLASS_WORD, rx354_tgt, rx354_pos
    if $I11, rx354_fail1133
    add rx354_pos, 1
    rx354_cur."!cursor_pass"(rx354_pos, "backslash:sym<misc>", 'backtrack'=>1)
    .return (rx354_cur)
  rx354_restart1132:
    repr_get_attr_obj rx354_cstack, rx354_cur, rx354_curclass, "$!cstack"
  rx354_fail1133:
    unless rx354_bstack, rx354_done1131
    pop $I19, rx354_bstack
    if_null rx354_cstack, rx354_cstack_done1136
    unless rx354_cstack, rx354_cstack_done1136
    dec $I19
    set $P11, rx354_cstack[$I19]
  rx354_cstack_done1136:
    pop rx354_rep, rx354_bstack
    pop rx354_pos, rx354_bstack
    pop $I19, rx354_bstack
    lt rx354_pos, -1, rx354_done1131
    lt rx354_pos, 0, rx354_fail1133
    eq $I19, 0, rx354_fail1133
    nqp_islist $I20, rx354_cstack
    unless $I20, rx354_jump1134
    elements $I18, rx354_bstack
    le $I18, 0, rx354_cut1135
    dec $I18
    set $I18, rx354_bstack[$I18]
  rx354_cut1135:
    assign rx354_cstack, $I18
  rx354_jump1134:
    jump $I19
  rx354_done1131:
    rx354_cur."!cursor_fail"()
    .return (rx354_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion" :subid("cuid_86_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 250
    .param pmc self 
    $P5001 = self."!protoregex"("assertion")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_87_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 252
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_88_1360426899.567' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx356_tgt
    .local int rx356_pos
    .local int rx356_off
    .local int rx356_eos
    .local int rx356_rep
    .local pmc rx356_cur
    .local pmc rx356_curclass
    .local pmc rx356_bstack
    .local pmc rx356_cstack
    (rx356_cur, rx356_tgt, rx356_pos, rx356_curclass, rx356_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx356_cur
    length rx356_eos, rx356_tgt
    eq $I19, 1, rx356_restart1142
    gt rx356_pos, rx356_eos, rx356_fail1143
    repr_get_attr_int $I11, self, rx356_curclass, "$!from"
    ne $I11, -1, rxscan357_done1149
    goto rxscan357_scan1148
  rxscan357_loop1147:
    inc rx356_pos
    gt rx356_pos, rx356_eos, rx356_fail1143
    repr_bind_attr_int rx356_cur, rx356_curclass, "$!from", rx356_pos
  rxscan357_scan1148:
    nqp_rxmark rx356_bstack, rxscan357_loop1147, rx356_pos, 0
  rxscan357_done1149:
    add $I11, rx356_pos, 1
    gt $I11, rx356_eos, rx356_fail1143
    substr $S10, rx356_tgt, rx356_pos, 1
    ne $S10, ucs4:"?", rx356_fail1143
    add rx356_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt358_01151
    nqp_push_label $P11, alt358_11162
    nqp_rxmark rx356_bstack, alt358_end1150, -1, 0
    rx356_cur."!alt"(rx356_pos, "alt_nfa__15_1360426900.267", $P11)
    goto rx356_fail1143
  alt358_01151:
    .const 'Sub' $P5001 = 'cuid_88_1360426899.567' 
    capture_lex $P5001
    repr_bind_attr_int rx356_cur, rx356_curclass, "$!pos", rx356_pos
    $P11 = rx356_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx356_curclass, "$!pos"
    lt $I11, 0, rx356_fail1143
    goto alt358_end1150
  alt358_11162:
    repr_bind_attr_int rx356_cur, rx356_curclass, "$!pos", rx356_pos
    $P11 = rx356_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx356_curclass, "$!pos"
    lt $I11, 0, rx356_fail1143
    nqp_rxmark rx356_bstack, rxsubrule361_pass1163, -1, 0
  rxsubrule361_pass1163:
    rx356_cstack = rx356_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx356_pos, $P11, rx356_curclass, "$!pos"
    goto alt358_end1150
  alt358_end1150:
    nqp_rxcommit rx356_bstack, alt358_end1150
    rx356_cur."!cursor_pass"(rx356_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx356_cur)
  rx356_restart1142:
    repr_get_attr_obj rx356_cstack, rx356_cur, rx356_curclass, "$!cstack"
  rx356_fail1143:
    unless rx356_bstack, rx356_done1141
    pop $I19, rx356_bstack
    if_null rx356_cstack, rx356_cstack_done1146
    unless rx356_cstack, rx356_cstack_done1146
    dec $I19
    set $P11, rx356_cstack[$I19]
  rx356_cstack_done1146:
    pop rx356_rep, rx356_bstack
    pop rx356_pos, rx356_bstack
    pop $I19, rx356_bstack
    lt rx356_pos, -1, rx356_done1141
    lt rx356_pos, 0, rx356_fail1143
    eq $I19, 0, rx356_fail1143
    nqp_islist $I20, rx356_cstack
    unless $I20, rx356_jump1144
    elements $I18, rx356_bstack
    le $I18, 0, rx356_cut1145
    dec $I18
    set $I18, rx356_bstack[$I18]
  rx356_cut1145:
    assign rx356_cstack, $I18
  rx356_jump1144:
    jump $I19
  rx356_done1141:
    rx356_cur."!cursor_fail"()
    .return (rx356_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_88_1360426899.567") :anon :lex :outer("cuid_87_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx359_tgt
    .local int rx359_pos
    .local int rx359_off
    .local int rx359_eos
    .local int rx359_rep
    .local pmc rx359_cur
    .local pmc rx359_curclass
    .local pmc rx359_bstack
    .local pmc rx359_cstack
    (rx359_cur, rx359_tgt, rx359_pos, rx359_curclass, rx359_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx359_cur
    length rx359_eos, rx359_tgt
    eq $I19, 1, rx359_restart1154
    gt rx359_pos, rx359_eos, rx359_fail1155
    repr_get_attr_int $I11, self, rx359_curclass, "$!from"
    ne $I11, -1, rxscan360_done1161
    goto rxscan360_scan1160
  rxscan360_loop1159:
    inc rx359_pos
    gt rx359_pos, rx359_eos, rx359_fail1155
    repr_bind_attr_int rx359_cur, rx359_curclass, "$!from", rx359_pos
  rxscan360_scan1160:
    nqp_rxmark rx359_bstack, rxscan360_loop1159, rx359_pos, 0
  rxscan360_done1161:
    add $I11, rx359_pos, 1
    gt $I11, rx359_eos, rx359_fail1155
    substr $S10, rx359_tgt, rx359_pos, 1
    ne $S10, ucs4:">", rx359_fail1155
    add rx359_pos, 1
    rx359_cur."!cursor_pass"(rx359_pos, 'backtrack'=>1)
    .return (rx359_cur)
  rx359_restart1154:
    repr_get_attr_obj rx359_cstack, rx359_cur, rx359_curclass, "$!cstack"
  rx359_fail1155:
    unless rx359_bstack, rx359_done1153
    pop $I19, rx359_bstack
    if_null rx359_cstack, rx359_cstack_done1158
    unless rx359_cstack, rx359_cstack_done1158
    dec $I19
    set $P11, rx359_cstack[$I19]
  rx359_cstack_done1158:
    pop rx359_rep, rx359_bstack
    pop rx359_pos, rx359_bstack
    pop $I19, rx359_bstack
    lt rx359_pos, -1, rx359_done1153
    lt rx359_pos, 0, rx359_fail1155
    eq $I19, 0, rx359_fail1155
    nqp_islist $I20, rx359_cstack
    unless $I20, rx359_jump1156
    elements $I18, rx359_bstack
    le $I18, 0, rx359_cut1157
    dec $I18
    set $I18, rx359_bstack[$I18]
  rx359_cut1157:
    assign rx359_cstack, $I18
  rx359_jump1156:
    jump $I19
  rx359_done1153:
    rx359_cur."!cursor_fail"()
    .return (rx359_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_89_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 253
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_90_1360426899.567' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx362_tgt
    .local int rx362_pos
    .local int rx362_off
    .local int rx362_eos
    .local int rx362_rep
    .local pmc rx362_cur
    .local pmc rx362_curclass
    .local pmc rx362_bstack
    .local pmc rx362_cstack
    (rx362_cur, rx362_tgt, rx362_pos, rx362_curclass, rx362_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx362_cur
    length rx362_eos, rx362_tgt
    eq $I19, 1, rx362_restart1166
    gt rx362_pos, rx362_eos, rx362_fail1167
    repr_get_attr_int $I11, self, rx362_curclass, "$!from"
    ne $I11, -1, rxscan363_done1173
    goto rxscan363_scan1172
  rxscan363_loop1171:
    inc rx362_pos
    gt rx362_pos, rx362_eos, rx362_fail1167
    repr_bind_attr_int rx362_cur, rx362_curclass, "$!from", rx362_pos
  rxscan363_scan1172:
    nqp_rxmark rx362_bstack, rxscan363_loop1171, rx362_pos, 0
  rxscan363_done1173:
    add $I11, rx362_pos, 1
    gt $I11, rx362_eos, rx362_fail1167
    substr $S10, rx362_tgt, rx362_pos, 1
    ne $S10, ucs4:"!", rx362_fail1167
    add rx362_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt364_01175
    nqp_push_label $P11, alt364_11186
    nqp_rxmark rx362_bstack, alt364_end1174, -1, 0
    rx362_cur."!alt"(rx362_pos, "alt_nfa__16_1360426900.278", $P11)
    goto rx362_fail1167
  alt364_01175:
    .const 'Sub' $P5001 = 'cuid_90_1360426899.567' 
    capture_lex $P5001
    repr_bind_attr_int rx362_cur, rx362_curclass, "$!pos", rx362_pos
    $P11 = rx362_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx362_curclass, "$!pos"
    lt $I11, 0, rx362_fail1167
    goto alt364_end1174
  alt364_11186:
    repr_bind_attr_int rx362_cur, rx362_curclass, "$!pos", rx362_pos
    $P11 = rx362_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx362_curclass, "$!pos"
    lt $I11, 0, rx362_fail1167
    nqp_rxmark rx362_bstack, rxsubrule367_pass1187, -1, 0
  rxsubrule367_pass1187:
    rx362_cstack = rx362_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx362_pos, $P11, rx362_curclass, "$!pos"
    goto alt364_end1174
  alt364_end1174:
    nqp_rxcommit rx362_bstack, alt364_end1174
    rx362_cur."!cursor_pass"(rx362_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx362_cur)
  rx362_restart1166:
    repr_get_attr_obj rx362_cstack, rx362_cur, rx362_curclass, "$!cstack"
  rx362_fail1167:
    unless rx362_bstack, rx362_done1165
    pop $I19, rx362_bstack
    if_null rx362_cstack, rx362_cstack_done1170
    unless rx362_cstack, rx362_cstack_done1170
    dec $I19
    set $P11, rx362_cstack[$I19]
  rx362_cstack_done1170:
    pop rx362_rep, rx362_bstack
    pop rx362_pos, rx362_bstack
    pop $I19, rx362_bstack
    lt rx362_pos, -1, rx362_done1165
    lt rx362_pos, 0, rx362_fail1167
    eq $I19, 0, rx362_fail1167
    nqp_islist $I20, rx362_cstack
    unless $I20, rx362_jump1168
    elements $I18, rx362_bstack
    le $I18, 0, rx362_cut1169
    dec $I18
    set $I18, rx362_bstack[$I18]
  rx362_cut1169:
    assign rx362_cstack, $I18
  rx362_jump1168:
    jump $I19
  rx362_done1165:
    rx362_cur."!cursor_fail"()
    .return (rx362_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_90_1360426899.567") :anon :lex :outer("cuid_89_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx365_tgt
    .local int rx365_pos
    .local int rx365_off
    .local int rx365_eos
    .local int rx365_rep
    .local pmc rx365_cur
    .local pmc rx365_curclass
    .local pmc rx365_bstack
    .local pmc rx365_cstack
    (rx365_cur, rx365_tgt, rx365_pos, rx365_curclass, rx365_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx365_cur
    length rx365_eos, rx365_tgt
    eq $I19, 1, rx365_restart1178
    gt rx365_pos, rx365_eos, rx365_fail1179
    repr_get_attr_int $I11, self, rx365_curclass, "$!from"
    ne $I11, -1, rxscan366_done1185
    goto rxscan366_scan1184
  rxscan366_loop1183:
    inc rx365_pos
    gt rx365_pos, rx365_eos, rx365_fail1179
    repr_bind_attr_int rx365_cur, rx365_curclass, "$!from", rx365_pos
  rxscan366_scan1184:
    nqp_rxmark rx365_bstack, rxscan366_loop1183, rx365_pos, 0
  rxscan366_done1185:
    add $I11, rx365_pos, 1
    gt $I11, rx365_eos, rx365_fail1179
    substr $S10, rx365_tgt, rx365_pos, 1
    ne $S10, ucs4:">", rx365_fail1179
    add rx365_pos, 1
    rx365_cur."!cursor_pass"(rx365_pos, 'backtrack'=>1)
    .return (rx365_cur)
  rx365_restart1178:
    repr_get_attr_obj rx365_cstack, rx365_cur, rx365_curclass, "$!cstack"
  rx365_fail1179:
    unless rx365_bstack, rx365_done1177
    pop $I19, rx365_bstack
    if_null rx365_cstack, rx365_cstack_done1182
    unless rx365_cstack, rx365_cstack_done1182
    dec $I19
    set $P11, rx365_cstack[$I19]
  rx365_cstack_done1182:
    pop rx365_rep, rx365_bstack
    pop rx365_pos, rx365_bstack
    pop $I19, rx365_bstack
    lt rx365_pos, -1, rx365_done1177
    lt rx365_pos, 0, rx365_fail1179
    eq $I19, 0, rx365_fail1179
    nqp_islist $I20, rx365_cstack
    unless $I20, rx365_jump1180
    elements $I18, rx365_bstack
    le $I18, 0, rx365_cut1181
    dec $I18
    set $I18, rx365_bstack[$I18]
  rx365_cut1181:
    assign rx365_cstack, $I18
  rx365_jump1180:
    jump $I19
  rx365_done1177:
    rx365_cur."!cursor_fail"()
    .return (rx365_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<|>" :subid("cuid_91_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 254
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx368_tgt
    .local int rx368_pos
    .local int rx368_off
    .local int rx368_eos
    .local int rx368_rep
    .local pmc rx368_cur
    .local pmc rx368_curclass
    .local pmc rx368_bstack
    .local pmc rx368_cstack
    (rx368_cur, rx368_tgt, rx368_pos, rx368_curclass, rx368_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx368_cur
    length rx368_eos, rx368_tgt
    eq $I19, 1, rx368_restart1190
    gt rx368_pos, rx368_eos, rx368_fail1191
    repr_get_attr_int $I11, self, rx368_curclass, "$!from"
    ne $I11, -1, rxscan369_done1197
    goto rxscan369_scan1196
  rxscan369_loop1195:
    inc rx368_pos
    gt rx368_pos, rx368_eos, rx368_fail1191
    repr_bind_attr_int rx368_cur, rx368_curclass, "$!from", rx368_pos
  rxscan369_scan1196:
    nqp_rxmark rx368_bstack, rxscan369_loop1195, rx368_pos, 0
  rxscan369_done1197:
    add $I11, rx368_pos, 1
    gt $I11, rx368_eos, rx368_fail1191
    substr $S10, rx368_tgt, rx368_pos, 1
    ne $S10, ucs4:"|", rx368_fail1191
    add rx368_pos, 1
    repr_bind_attr_int rx368_cur, rx368_curclass, "$!pos", rx368_pos
    $P11 = rx368_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx368_curclass, "$!pos"
    lt $I11, 0, rx368_fail1191
    nqp_rxmark rx368_bstack, rxsubrule370_pass1198, -1, 0
  rxsubrule370_pass1198:
    rx368_cstack = rx368_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx368_pos, $P11, rx368_curclass, "$!pos"
    rx368_cur."!cursor_pass"(rx368_pos, "assertion:sym<|>", 'backtrack'=>1)
    .return (rx368_cur)
  rx368_restart1190:
    repr_get_attr_obj rx368_cstack, rx368_cur, rx368_curclass, "$!cstack"
  rx368_fail1191:
    unless rx368_bstack, rx368_done1189
    pop $I19, rx368_bstack
    if_null rx368_cstack, rx368_cstack_done1194
    unless rx368_cstack, rx368_cstack_done1194
    dec $I19
    set $P11, rx368_cstack[$I19]
  rx368_cstack_done1194:
    pop rx368_rep, rx368_bstack
    pop rx368_pos, rx368_bstack
    pop $I19, rx368_bstack
    lt rx368_pos, -1, rx368_done1189
    lt rx368_pos, 0, rx368_fail1191
    eq $I19, 0, rx368_fail1191
    nqp_islist $I20, rx368_cstack
    unless $I20, rx368_jump1192
    elements $I18, rx368_bstack
    le $I18, 0, rx368_cut1193
    dec $I18
    set $I18, rx368_bstack[$I18]
  rx368_cut1193:
    assign rx368_cstack, $I18
  rx368_jump1192:
    jump $I19
  rx368_done1189:
    rx368_cur."!cursor_fail"()
    .return (rx368_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<method>" :subid("cuid_92_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 256
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx371_tgt
    .local int rx371_pos
    .local int rx371_off
    .local int rx371_eos
    .local int rx371_rep
    .local pmc rx371_cur
    .local pmc rx371_curclass
    .local pmc rx371_bstack
    .local pmc rx371_cstack
    (rx371_cur, rx371_tgt, rx371_pos, rx371_curclass, rx371_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx371_cur
    length rx371_eos, rx371_tgt
    eq $I19, 1, rx371_restart1201
    gt rx371_pos, rx371_eos, rx371_fail1202
    repr_get_attr_int $I11, self, rx371_curclass, "$!from"
    ne $I11, -1, rxscan372_done1208
    goto rxscan372_scan1207
  rxscan372_loop1206:
    inc rx371_pos
    gt rx371_pos, rx371_eos, rx371_fail1202
    repr_bind_attr_int rx371_cur, rx371_curclass, "$!from", rx371_pos
  rxscan372_scan1207:
    nqp_rxmark rx371_bstack, rxscan372_loop1206, rx371_pos, 0
  rxscan372_done1208:
    add $I11, rx371_pos, 1
    gt $I11, rx371_eos, rx371_fail1202
    substr $S10, rx371_tgt, rx371_pos, 1
    ne $S10, ucs4:".", rx371_fail1202
    add rx371_pos, 1
    repr_bind_attr_int rx371_cur, rx371_curclass, "$!pos", rx371_pos
    $P11 = rx371_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx371_curclass, "$!pos"
    lt $I11, 0, rx371_fail1202
    nqp_rxmark rx371_bstack, rxsubrule373_pass1209, -1, 0
  rxsubrule373_pass1209:
    rx371_cstack = rx371_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx371_pos, $P11, rx371_curclass, "$!pos"
    rx371_cur."!cursor_pass"(rx371_pos, "assertion:sym<method>", 'backtrack'=>1)
    .return (rx371_cur)
  rx371_restart1201:
    repr_get_attr_obj rx371_cstack, rx371_cur, rx371_curclass, "$!cstack"
  rx371_fail1202:
    unless rx371_bstack, rx371_done1200
    pop $I19, rx371_bstack
    if_null rx371_cstack, rx371_cstack_done1205
    unless rx371_cstack, rx371_cstack_done1205
    dec $I19
    set $P11, rx371_cstack[$I19]
  rx371_cstack_done1205:
    pop rx371_rep, rx371_bstack
    pop rx371_pos, rx371_bstack
    pop $I19, rx371_bstack
    lt rx371_pos, -1, rx371_done1200
    lt rx371_pos, 0, rx371_fail1202
    eq $I19, 0, rx371_fail1202
    nqp_islist $I20, rx371_cstack
    unless $I20, rx371_jump1203
    elements $I18, rx371_bstack
    le $I18, 0, rx371_cut1204
    dec $I18
    set $I18, rx371_bstack[$I18]
  rx371_cut1204:
    assign rx371_cstack, $I18
  rx371_jump1203:
    jump $I19
  rx371_done1200:
    rx371_cur."!cursor_fail"()
    .return (rx371_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_93_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 260
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_94_1360426899.567' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx374_tgt
    .local int rx374_pos
    .local int rx374_off
    .local int rx374_eos
    .local int rx374_rep
    .local pmc rx374_cur
    .local pmc rx374_curclass
    .local pmc rx374_bstack
    .local pmc rx374_cstack
    (rx374_cur, rx374_tgt, rx374_pos, rx374_curclass, rx374_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx374_cur
    length rx374_eos, rx374_tgt
    eq $I19, 1, rx374_restart1212
    gt rx374_pos, rx374_eos, rx374_fail1213
    repr_get_attr_int $I11, self, rx374_curclass, "$!from"
    ne $I11, -1, rxscan375_done1219
    goto rxscan375_scan1218
  rxscan375_loop1217:
    inc rx374_pos
    gt rx374_pos, rx374_eos, rx374_fail1213
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!from", rx374_pos
  rxscan375_scan1218:
    nqp_rxmark rx374_bstack, rxscan375_loop1217, rx374_pos, 0
  rxscan375_done1219:
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!pos", rx374_pos
    $P11 = rx374_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx374_curclass, "$!pos"
    lt $I11, 0, rx374_fail1213
    nqp_rxmark rx374_bstack, rxsubrule376_pass1220, -1, 0
  rxsubrule376_pass1220:
    rx374_cstack = rx374_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx374_pos, $P11, rx374_curclass, "$!pos"
    nqp_rxmark rx374_bstack, rxquantr377_done1222, rx374_pos, 0
  rxquantr377_loop1221:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt378_01224
    nqp_push_label $P11, alt378_11235
    nqp_push_label $P11, alt378_21237
    nqp_push_label $P11, alt378_31239
    nqp_push_label $P11, alt378_41241
    nqp_rxmark rx374_bstack, alt378_end1223, -1, 0
    rx374_cur."!alt"(rx374_pos, "alt_nfa__17_1360426900.309", $P11)
    goto rx374_fail1213
  alt378_01224:
    .const 'Sub' $P5001 = 'cuid_94_1360426899.567' 
    capture_lex $P5001
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!pos", rx374_pos
    $P11 = rx374_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx374_curclass, "$!pos"
    lt $I11, 0, rx374_fail1213
    goto alt378_end1223
  alt378_11235:
    add $I11, rx374_pos, 1
    gt $I11, rx374_eos, rx374_fail1213
    substr $S10, rx374_tgt, rx374_pos, 1
    ne $S10, ucs4:"=", rx374_fail1213
    add rx374_pos, 1
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!pos", rx374_pos
    $P11 = rx374_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx374_curclass, "$!pos"
    lt $I11, 0, rx374_fail1213
    nqp_rxmark rx374_bstack, rxsubrule381_pass1236, -1, 0
  rxsubrule381_pass1236:
    rx374_cstack = rx374_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx374_pos, $P11, rx374_curclass, "$!pos"
    goto alt378_end1223
  alt378_21237:
    add $I11, rx374_pos, 1
    gt $I11, rx374_eos, rx374_fail1213
    substr $S10, rx374_tgt, rx374_pos, 1
    ne $S10, ucs4:":", rx374_fail1213
    add rx374_pos, 1
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!pos", rx374_pos
    $P11 = rx374_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx374_curclass, "$!pos"
    lt $I11, 0, rx374_fail1213
    nqp_rxmark rx374_bstack, rxsubrule382_pass1238, -1, 0
  rxsubrule382_pass1238:
    rx374_cstack = rx374_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx374_pos, $P11, rx374_curclass, "$!pos"
    goto alt378_end1223
  alt378_31239:
    add $I11, rx374_pos, 1
    gt $I11, rx374_eos, rx374_fail1213
    substr $S10, rx374_tgt, rx374_pos, 1
    ne $S10, ucs4:"(", rx374_fail1213
    add rx374_pos, 1
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!pos", rx374_pos
    $P11 = rx374_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx374_curclass, "$!pos"
    lt $I11, 0, rx374_fail1213
    nqp_rxmark rx374_bstack, rxsubrule383_pass1240, -1, 0
  rxsubrule383_pass1240:
    rx374_cstack = rx374_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx374_pos, $P11, rx374_curclass, "$!pos"
    add $I11, rx374_pos, 1
    gt $I11, rx374_eos, rx374_fail1213
    substr $S10, rx374_tgt, rx374_pos, 1
    ne $S10, ucs4:")", rx374_fail1213
    add rx374_pos, 1
    goto alt378_end1223
  alt378_41241:
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!pos", rx374_pos
    $P11 = rx374_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx374_curclass, "$!pos"
    lt $I11, 0, rx374_fail1213
    repr_get_attr_int rx374_pos, $P11, rx374_curclass, "$!pos"
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!pos", rx374_pos
    $P11 = rx374_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx374_curclass, "$!pos"
    lt $I11, 0, rx374_fail1213
    nqp_rxmark rx374_bstack, rxsubrule385_pass1243, -1, 0
  rxsubrule385_pass1243:
    rx374_cstack = rx374_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx374_pos, $P11, rx374_curclass, "$!pos"
    goto alt378_end1223
  alt378_end1223:
    nqp_rxpeek $I19, rx374_bstack, rxquantr377_done1222
    inc $I19
    inc $I19
    set rx374_rep, rx374_bstack[$I19]
    nqp_rxcommit rx374_bstack, rxquantr377_done1222
    inc rx374_rep
  rxquantr377_done1222:
    rx374_cur."!cursor_pass"(rx374_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx374_cur)
  rx374_restart1212:
    repr_get_attr_obj rx374_cstack, rx374_cur, rx374_curclass, "$!cstack"
  rx374_fail1213:
    unless rx374_bstack, rx374_done1211
    pop $I19, rx374_bstack
    if_null rx374_cstack, rx374_cstack_done1216
    unless rx374_cstack, rx374_cstack_done1216
    dec $I19
    set $P11, rx374_cstack[$I19]
  rx374_cstack_done1216:
    pop rx374_rep, rx374_bstack
    pop rx374_pos, rx374_bstack
    pop $I19, rx374_bstack
    lt rx374_pos, -1, rx374_done1211
    lt rx374_pos, 0, rx374_fail1213
    eq $I19, 0, rx374_fail1213
    nqp_islist $I20, rx374_cstack
    unless $I20, rx374_jump1214
    elements $I18, rx374_bstack
    le $I18, 0, rx374_cut1215
    dec $I18
    set $I18, rx374_bstack[$I18]
  rx374_cut1215:
    assign rx374_cstack, $I18
  rx374_jump1214:
    jump $I19
  rx374_done1211:
    rx374_cur."!cursor_fail"()
    .return (rx374_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_94_1360426899.567") :anon :lex :outer("cuid_93_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx379_tgt
    .local int rx379_pos
    .local int rx379_off
    .local int rx379_eos
    .local int rx379_rep
    .local pmc rx379_cur
    .local pmc rx379_curclass
    .local pmc rx379_bstack
    .local pmc rx379_cstack
    (rx379_cur, rx379_tgt, rx379_pos, rx379_curclass, rx379_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx379_cur
    length rx379_eos, rx379_tgt
    eq $I19, 1, rx379_restart1227
    gt rx379_pos, rx379_eos, rx379_fail1228
    repr_get_attr_int $I11, self, rx379_curclass, "$!from"
    ne $I11, -1, rxscan380_done1234
    goto rxscan380_scan1233
  rxscan380_loop1232:
    inc rx379_pos
    gt rx379_pos, rx379_eos, rx379_fail1228
    repr_bind_attr_int rx379_cur, rx379_curclass, "$!from", rx379_pos
  rxscan380_scan1233:
    nqp_rxmark rx379_bstack, rxscan380_loop1232, rx379_pos, 0
  rxscan380_done1234:
    add $I11, rx379_pos, 1
    gt $I11, rx379_eos, rx379_fail1228
    substr $S10, rx379_tgt, rx379_pos, 1
    ne $S10, ucs4:">", rx379_fail1228
    add rx379_pos, 1
    rx379_cur."!cursor_pass"(rx379_pos, 'backtrack'=>1)
    .return (rx379_cur)
  rx379_restart1227:
    repr_get_attr_obj rx379_cstack, rx379_cur, rx379_curclass, "$!cstack"
  rx379_fail1228:
    unless rx379_bstack, rx379_done1226
    pop $I19, rx379_bstack
    if_null rx379_cstack, rx379_cstack_done1231
    unless rx379_cstack, rx379_cstack_done1231
    dec $I19
    set $P11, rx379_cstack[$I19]
  rx379_cstack_done1231:
    pop rx379_rep, rx379_bstack
    pop rx379_pos, rx379_bstack
    pop $I19, rx379_bstack
    lt rx379_pos, -1, rx379_done1226
    lt rx379_pos, 0, rx379_fail1228
    eq $I19, 0, rx379_fail1228
    nqp_islist $I20, rx379_cstack
    unless $I20, rx379_jump1229
    elements $I18, rx379_bstack
    le $I18, 0, rx379_cut1230
    dec $I18
    set $I18, rx379_bstack[$I18]
  rx379_cut1230:
    assign rx379_cstack, $I18
  rx379_jump1229:
    jump $I19
  rx379_done1226:
    rx379_cur."!cursor_fail"()
    .return (rx379_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<[>" :subid("cuid_95_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 271
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_96_1360426899.567' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx386_tgt
    .local int rx386_pos
    .local int rx386_off
    .local int rx386_eos
    .local int rx386_rep
    .local pmc rx386_cur
    .local pmc rx386_curclass
    .local pmc rx386_bstack
    .local pmc rx386_cstack
    (rx386_cur, rx386_tgt, rx386_pos, rx386_curclass, rx386_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx386_cur
    length rx386_eos, rx386_tgt
    eq $I19, 1, rx386_restart1246
    gt rx386_pos, rx386_eos, rx386_fail1247
    repr_get_attr_int $I11, self, rx386_curclass, "$!from"
    ne $I11, -1, rxscan387_done1253
    goto rxscan387_scan1252
  rxscan387_loop1251:
    inc rx386_pos
    gt rx386_pos, rx386_eos, rx386_fail1247
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!from", rx386_pos
  rxscan387_scan1252:
    nqp_rxmark rx386_bstack, rxscan387_loop1251, rx386_pos, 0
  rxscan387_done1253:
    .const 'Sub' $P5001 = 'cuid_96_1360426899.567' 
    capture_lex $P5001
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!pos", rx386_pos
    $P11 = rx386_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx386_curclass, "$!pos"
    lt $I11, 0, rx386_fail1247
    nqp_rxmark rx386_bstack, rxquantr391_done1270, -1, 0
  rxquantr391_loop1269:
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!pos", rx386_pos
    $P11 = rx386_cur."cclass_elem"()
    repr_get_attr_int $I11, $P11, rx386_curclass, "$!pos"
    lt $I11, 0, rx386_fail1247
    goto rxsubrule392_pass1271
  rxsubrule392_back1272:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx386_curclass, "$!pos"
    lt $I11, 0, rx386_fail1247
  rxsubrule392_pass1271:
    rx386_cstack = rx386_cur."!cursor_capture"($P11, "cclass_elem")
    set_addr $I11, rxsubrule392_back1272
    push rx386_bstack, $I11
    push rx386_bstack, 0
    push rx386_bstack, rx386_pos
    elements $I11, rx386_cstack
    push rx386_bstack, $I11
    repr_get_attr_int rx386_pos, $P11, rx386_curclass, "$!pos"
    nqp_rxpeek $I19, rx386_bstack, rxquantr391_done1270
    inc $I19
    inc $I19
    set rx386_rep, rx386_bstack[$I19]
    nqp_rxcommit rx386_bstack, rxquantr391_done1270
    inc rx386_rep
    nqp_rxmark rx386_bstack, rxquantr391_done1270, rx386_pos, rx386_rep
    goto rxquantr391_loop1269
  rxquantr391_done1270:
    rx386_cur."!cursor_pass"(rx386_pos, "assertion:sym<[>", 'backtrack'=>1)
    .return (rx386_cur)
  rx386_restart1246:
    repr_get_attr_obj rx386_cstack, rx386_cur, rx386_curclass, "$!cstack"
  rx386_fail1247:
    unless rx386_bstack, rx386_done1245
    pop $I19, rx386_bstack
    if_null rx386_cstack, rx386_cstack_done1250
    unless rx386_cstack, rx386_cstack_done1250
    dec $I19
    set $P11, rx386_cstack[$I19]
  rx386_cstack_done1250:
    pop rx386_rep, rx386_bstack
    pop rx386_pos, rx386_bstack
    pop $I19, rx386_bstack
    lt rx386_pos, -1, rx386_done1245
    lt rx386_pos, 0, rx386_fail1247
    eq $I19, 0, rx386_fail1247
    nqp_islist $I20, rx386_cstack
    unless $I20, rx386_jump1248
    elements $I18, rx386_bstack
    le $I18, 0, rx386_cut1249
    dec $I18
    set $I18, rx386_bstack[$I18]
  rx386_cut1249:
    assign rx386_cstack, $I18
  rx386_jump1248:
    jump $I19
  rx386_done1245:
    rx386_cur."!cursor_fail"()
    .return (rx386_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_96_1360426899.567") :anon :lex :outer("cuid_95_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx388_tgt
    .local int rx388_pos
    .local int rx388_off
    .local int rx388_eos
    .local int rx388_rep
    .local pmc rx388_cur
    .local pmc rx388_curclass
    .local pmc rx388_bstack
    .local pmc rx388_cstack
    (rx388_cur, rx388_tgt, rx388_pos, rx388_curclass, rx388_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx388_cur
    length rx388_eos, rx388_tgt
    eq $I19, 1, rx388_restart1256
    gt rx388_pos, rx388_eos, rx388_fail1257
    repr_get_attr_int $I11, self, rx388_curclass, "$!from"
    ne $I11, -1, rxscan389_done1263
    goto rxscan389_scan1262
  rxscan389_loop1261:
    inc rx388_pos
    gt rx388_pos, rx388_eos, rx388_fail1257
    repr_bind_attr_int rx388_cur, rx388_curclass, "$!from", rx388_pos
  rxscan389_scan1262:
    nqp_rxmark rx388_bstack, rxscan389_loop1261, rx388_pos, 0
  rxscan389_done1263:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt390_01265
    nqp_push_label $P11, alt390_11266
    nqp_push_label $P11, alt390_21267
    nqp_push_label $P11, alt390_31268
    nqp_rxmark rx388_bstack, alt390_end1264, -1, 0
    rx388_cur."!alt"(rx388_pos, "alt_nfa__18_1360426900.317", $P11)
    goto rx388_fail1257
  alt390_01265:
    add $I11, rx388_pos, 1
    gt $I11, rx388_eos, rx388_fail1257
    substr $S10, rx388_tgt, rx388_pos, 1
    ne $S10, ucs4:"[", rx388_fail1257
    add rx388_pos, 1
    goto alt390_end1264
  alt390_11266:
    add $I11, rx388_pos, 1
    gt $I11, rx388_eos, rx388_fail1257
    substr $S10, rx388_tgt, rx388_pos, 1
    ne $S10, ucs4:"+", rx388_fail1257
    add rx388_pos, 1
    goto alt390_end1264
  alt390_21267:
    add $I11, rx388_pos, 1
    gt $I11, rx388_eos, rx388_fail1257
    substr $S10, rx388_tgt, rx388_pos, 1
    ne $S10, ucs4:"-", rx388_fail1257
    add rx388_pos, 1
    goto alt390_end1264
  alt390_31268:
    add $I11, rx388_pos, 1
    gt $I11, rx388_eos, rx388_fail1257
    substr $S10, rx388_tgt, rx388_pos, 1
    ne $S10, ucs4:":", rx388_fail1257
    add rx388_pos, 1
    goto alt390_end1264
  alt390_end1264:
    rx388_cur."!cursor_pass"(rx388_pos, 'backtrack'=>1)
    .return (rx388_cur)
  rx388_restart1256:
    repr_get_attr_obj rx388_cstack, rx388_cur, rx388_curclass, "$!cstack"
  rx388_fail1257:
    unless rx388_bstack, rx388_done1255
    pop $I19, rx388_bstack
    if_null rx388_cstack, rx388_cstack_done1260
    unless rx388_cstack, rx388_cstack_done1260
    dec $I19
    set $P11, rx388_cstack[$I19]
  rx388_cstack_done1260:
    pop rx388_rep, rx388_bstack
    pop rx388_pos, rx388_bstack
    pop $I19, rx388_bstack
    lt rx388_pos, -1, rx388_done1255
    lt rx388_pos, 0, rx388_fail1257
    eq $I19, 0, rx388_fail1257
    nqp_islist $I20, rx388_cstack
    unless $I20, rx388_jump1258
    elements $I18, rx388_bstack
    le $I18, 0, rx388_cut1259
    dec $I18
    set $I18, rx388_bstack[$I18]
  rx388_cut1259:
    assign rx388_cstack, $I18
  rx388_jump1258:
    jump $I19
  rx388_done1255:
    rx388_cur."!cursor_fail"()
    .return (rx388_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_elem" :subid("cuid_97_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 273
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_103_1360426899.567' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx393_tgt
    .local int rx393_pos
    .local int rx393_off
    .local int rx393_eos
    .local int rx393_rep
    .local pmc rx393_cur
    .local pmc rx393_curclass
    .local pmc rx393_bstack
    .local pmc rx393_cstack
    (rx393_cur, rx393_tgt, rx393_pos, rx393_curclass, rx393_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx393_cur
    length rx393_eos, rx393_tgt
    eq $I19, 1, rx393_restart1275
    gt rx393_pos, rx393_eos, rx393_fail1276
    repr_get_attr_int $I11, self, rx393_curclass, "$!from"
    ne $I11, -1, rxscan394_done1282
    goto rxscan394_scan1281
  rxscan394_loop1280:
    inc rx393_pos
    gt rx393_pos, rx393_eos, rx393_fail1276
    repr_bind_attr_int rx393_cur, rx393_curclass, "$!from", rx393_pos
  rxscan394_scan1281:
    nqp_rxmark rx393_bstack, rxscan394_loop1280, rx393_pos, 0
  rxscan394_done1282:
    nqp_rxmark rx393_bstack, rxcap395_fail1284, rx393_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt396_01286
    nqp_push_label $P11, alt396_11287
    nqp_push_label $P11, alt396_21288
    nqp_rxmark rx393_bstack, alt396_end1285, -1, 0
    rx393_cur."!alt"(rx393_pos, "alt_nfa__19_1360426900.377", $P11)
    goto rx393_fail1276
  alt396_01286:
    add $I11, rx393_pos, 1
    gt $I11, rx393_eos, rx393_fail1276
    substr $S10, rx393_tgt, rx393_pos, 1
    ne $S10, ucs4:"+", rx393_fail1276
    add rx393_pos, 1
    goto alt396_end1285
  alt396_11287:
    add $I11, rx393_pos, 1
    gt $I11, rx393_eos, rx393_fail1276
    substr $S10, rx393_tgt, rx393_pos, 1
    ne $S10, ucs4:"-", rx393_fail1276
    add rx393_pos, 1
    goto alt396_end1285
  alt396_21288:
    goto alt396_end1285
  alt396_end1285:
    nqp_rxcommit rx393_bstack, alt396_end1285
    nqp_rxpeek $I19, rx393_bstack, rxcap395_fail1284
    inc $I19
    set $I11, rx393_bstack[$I19]
    repr_bind_attr_int rx393_cur, rx393_curclass, "$!pos", rx393_pos
    $P11 = rx393_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx393_pos)
    rx393_cstack = rx393_cur."!cursor_capture"($P11, "sign")
    goto rxcap395_done1283
  rxcap395_fail1284:
    goto rx393_fail1276
  rxcap395_done1283:
    nqp_rxmark rx393_bstack, rxquantr398_done1291, rx393_pos, 0
  rxquantr398_loop1290:
    repr_bind_attr_int rx393_cur, rx393_curclass, "$!pos", rx393_pos
    $P11 = rx393_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx393_curclass, "$!pos"
    lt $I11, 0, rx393_fail1276
    goto rxsubrule399_pass1292
  rxsubrule399_back1293:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx393_curclass, "$!pos"
    lt $I11, 0, rx393_fail1276
  rxsubrule399_pass1292:
    rx393_cstack = rx393_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule399_back1293
    push rx393_bstack, $I11
    push rx393_bstack, 0
    push rx393_bstack, rx393_pos
    elements $I11, rx393_cstack
    push rx393_bstack, $I11
    repr_get_attr_int rx393_pos, $P11, rx393_curclass, "$!pos"
    nqp_rxpeek $I19, rx393_bstack, rxquantr398_done1291
    inc $I19
    inc $I19
    set rx393_rep, rx393_bstack[$I19]
    nqp_rxcommit rx393_bstack, rxquantr398_done1291
    inc rx393_rep
  rxquantr398_done1291:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt400_01295
    nqp_push_label $P11, alt400_11394
    nqp_push_label $P11, alt400_21399
    nqp_rxmark rx393_bstack, alt400_end1294, -1, 0
    rx393_cur."!alt"(rx393_pos, "alt_nfa__21_1360426900.377", $P11)
    goto rx393_fail1276
  alt400_01295:
    add $I11, rx393_pos, 1
    gt $I11, rx393_eos, rx393_fail1276
    substr $S10, rx393_tgt, rx393_pos, 1
    ne $S10, ucs4:"[", rx393_fail1276
    add rx393_pos, 1
    nqp_rxmark rx393_bstack, rxquantr401_done1297, rx393_pos, 0
  rxquantr401_loop1296:
    .const 'Sub' $P5001 = 'cuid_103_1360426899.567' 
    capture_lex $P5001
    repr_bind_attr_int rx393_cur, rx393_curclass, "$!pos", rx393_pos
    $P11 = rx393_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx393_curclass, "$!pos"
    lt $I11, 0, rx393_fail1276
    goto rxsubrule432_pass1390
  rxsubrule432_back1391:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx393_curclass, "$!pos"
    lt $I11, 0, rx393_fail1276
  rxsubrule432_pass1390:
    rx393_cstack = rx393_cur."!cursor_capture"($P11, "charspec")
    set_addr $I11, rxsubrule432_back1391
    push rx393_bstack, $I11
    push rx393_bstack, 0
    push rx393_bstack, rx393_pos
    elements $I11, rx393_cstack
    push rx393_bstack, $I11
    repr_get_attr_int rx393_pos, $P11, rx393_curclass, "$!pos"
    nqp_rxpeek $I19, rx393_bstack, rxquantr401_done1297
    inc $I19
    inc $I19
    set rx393_rep, rx393_bstack[$I19]
    nqp_rxcommit rx393_bstack, rxquantr401_done1297
    inc rx393_rep
    nqp_rxmark rx393_bstack, rxquantr401_done1297, rx393_pos, rx393_rep
    goto rxquantr401_loop1296
  rxquantr401_done1297:
    nqp_rxmark rx393_bstack, rxquantr433_done1393, rx393_pos, 0
  rxquantr433_loop1392:
    ge rx393_pos, rx393_eos, rx393_fail1276
    is_cclass $I11, .CCLASS_WHITESPACE, rx393_tgt, rx393_pos
    unless $I11, rx393_fail1276
    add rx393_pos, 1
    nqp_rxpeek $I19, rx393_bstack, rxquantr433_done1393
    inc $I19
    inc $I19
    set rx393_rep, rx393_bstack[$I19]
    nqp_rxcommit rx393_bstack, rxquantr433_done1393
    inc rx393_rep
    nqp_rxmark rx393_bstack, rxquantr433_done1393, rx393_pos, rx393_rep
    goto rxquantr433_loop1392
  rxquantr433_done1393:
    add $I11, rx393_pos, 1
    gt $I11, rx393_eos, rx393_fail1276
    substr $S10, rx393_tgt, rx393_pos, 1
    ne $S10, ucs4:"]", rx393_fail1276
    add rx393_pos, 1
    goto alt400_end1294
  alt400_11394:
    nqp_rxmark rx393_bstack, rxcap434_fail1396, rx393_pos, 0
    nqp_rxmark rx393_bstack, rxquantr435_done1398, -1, 0
  rxquantr435_loop1397:
    ge rx393_pos, rx393_eos, rx393_fail1276
    is_cclass $I11, .CCLASS_WORD, rx393_tgt, rx393_pos
    unless $I11, rx393_fail1276
    add rx393_pos, 1
    nqp_rxpeek $I19, rx393_bstack, rxquantr435_done1398
    inc $I19
    inc $I19
    set rx393_rep, rx393_bstack[$I19]
    nqp_rxcommit rx393_bstack, rxquantr435_done1398
    inc rx393_rep
    nqp_rxmark rx393_bstack, rxquantr435_done1398, rx393_pos, rx393_rep
    goto rxquantr435_loop1397
  rxquantr435_done1398:
    nqp_rxpeek $I19, rx393_bstack, rxcap434_fail1396
    inc $I19
    set $I11, rx393_bstack[$I19]
    repr_bind_attr_int rx393_cur, rx393_curclass, "$!pos", rx393_pos
    $P11 = rx393_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx393_pos)
    rx393_cstack = rx393_cur."!cursor_capture"($P11, "name")
    goto rxcap434_done1395
  rxcap434_fail1396:
    goto rx393_fail1276
  rxcap434_done1395:
    goto alt400_end1294
  alt400_21399:
    add $I11, rx393_pos, 1
    gt $I11, rx393_eos, rx393_fail1276
    substr $S10, rx393_tgt, rx393_pos, 1
    ne $S10, ucs4:":", rx393_fail1276
    add rx393_pos, 1
    nqp_rxmark rx393_bstack, rxcap436_fail1401, rx393_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt437_01403
    nqp_push_label $P11, alt437_11404
    nqp_rxmark rx393_bstack, alt437_end1402, -1, 0
    rx393_cur."!alt"(rx393_pos, "alt_nfa__20_1360426900.377", $P11)
    goto rx393_fail1276
  alt437_01403:
    add $I11, rx393_pos, 1
    gt $I11, rx393_eos, rx393_fail1276
    substr $S10, rx393_tgt, rx393_pos, 1
    ne $S10, ucs4:"!", rx393_fail1276
    add rx393_pos, 1
    goto alt437_end1402
  alt437_11404:
    goto alt437_end1402
  alt437_end1402:
    nqp_rxcommit rx393_bstack, alt437_end1402
    nqp_rxpeek $I19, rx393_bstack, rxcap436_fail1401
    inc $I19
    set $I11, rx393_bstack[$I19]
    repr_bind_attr_int rx393_cur, rx393_curclass, "$!pos", rx393_pos
    $P11 = rx393_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx393_pos)
    rx393_cstack = rx393_cur."!cursor_capture"($P11, "invert")
    goto rxcap436_done1400
  rxcap436_fail1401:
    goto rx393_fail1276
  rxcap436_done1400:
    nqp_rxmark rx393_bstack, rxcap439_fail1407, rx393_pos, 0
    nqp_rxmark rx393_bstack, rxquantr440_done1409, -1, 0
  rxquantr440_loop1408:
    ge rx393_pos, rx393_eos, rx393_fail1276
    is_cclass $I11, .CCLASS_WORD, rx393_tgt, rx393_pos
    unless $I11, rx393_fail1276
    add rx393_pos, 1
    nqp_rxpeek $I19, rx393_bstack, rxquantr440_done1409
    inc $I19
    inc $I19
    set rx393_rep, rx393_bstack[$I19]
    nqp_rxcommit rx393_bstack, rxquantr440_done1409
    inc rx393_rep
    nqp_rxmark rx393_bstack, rxquantr440_done1409, rx393_pos, rx393_rep
    goto rxquantr440_loop1408
  rxquantr440_done1409:
    nqp_rxpeek $I19, rx393_bstack, rxcap439_fail1407
    inc $I19
    set $I11, rx393_bstack[$I19]
    repr_bind_attr_int rx393_cur, rx393_curclass, "$!pos", rx393_pos
    $P11 = rx393_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx393_pos)
    rx393_cstack = rx393_cur."!cursor_capture"($P11, "uniprop")
    goto rxcap439_done1406
  rxcap439_fail1407:
    goto rx393_fail1276
  rxcap439_done1406:
    goto alt400_end1294
  alt400_end1294:
    nqp_rxcommit rx393_bstack, alt400_end1294
    nqp_rxmark rx393_bstack, rxquantr441_done1411, rx393_pos, 0
  rxquantr441_loop1410:
    repr_bind_attr_int rx393_cur, rx393_curclass, "$!pos", rx393_pos
    $P11 = rx393_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx393_curclass, "$!pos"
    lt $I11, 0, rx393_fail1276
    goto rxsubrule442_pass1412
  rxsubrule442_back1413:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx393_curclass, "$!pos"
    lt $I11, 0, rx393_fail1276
  rxsubrule442_pass1412:
    rx393_cstack = rx393_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule442_back1413
    push rx393_bstack, $I11
    push rx393_bstack, 0
    push rx393_bstack, rx393_pos
    elements $I11, rx393_cstack
    push rx393_bstack, $I11
    repr_get_attr_int rx393_pos, $P11, rx393_curclass, "$!pos"
    nqp_rxpeek $I19, rx393_bstack, rxquantr441_done1411
    inc $I19
    inc $I19
    set rx393_rep, rx393_bstack[$I19]
    nqp_rxcommit rx393_bstack, rxquantr441_done1411
    inc rx393_rep
  rxquantr441_done1411:
    rx393_cur."!cursor_pass"(rx393_pos, "cclass_elem", 'backtrack'=>1)
    .return (rx393_cur)
  rx393_restart1275:
    repr_get_attr_obj rx393_cstack, rx393_cur, rx393_curclass, "$!cstack"
  rx393_fail1276:
    unless rx393_bstack, rx393_done1274
    pop $I19, rx393_bstack
    if_null rx393_cstack, rx393_cstack_done1279
    unless rx393_cstack, rx393_cstack_done1279
    dec $I19
    set $P11, rx393_cstack[$I19]
  rx393_cstack_done1279:
    pop rx393_rep, rx393_bstack
    pop rx393_pos, rx393_bstack
    pop $I19, rx393_bstack
    lt rx393_pos, -1, rx393_done1274
    lt rx393_pos, 0, rx393_fail1276
    eq $I19, 0, rx393_fail1276
    nqp_islist $I20, rx393_cstack
    unless $I20, rx393_jump1277
    elements $I18, rx393_bstack
    le $I18, 0, rx393_cut1278
    dec $I18
    set $I18, rx393_bstack[$I18]
  rx393_cut1278:
    assign rx393_cstack, $I18
  rx393_jump1277:
    jump $I19
  rx393_done1274:
    rx393_cur."!cursor_fail"()
    .return (rx393_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_103_1360426899.567") :anon :lex :outer("cuid_97_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .const 'Sub' $P5004 = 'cuid_98_1360426899.567' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_100_1360426899.567' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_102_1360426899.567' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx402_tgt
    .local int rx402_pos
    .local int rx402_off
    .local int rx402_eos
    .local int rx402_rep
    .local pmc rx402_cur
    .local pmc rx402_curclass
    .local pmc rx402_bstack
    .local pmc rx402_cstack
    (rx402_cur, rx402_tgt, rx402_pos, rx402_curclass, rx402_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx402_cur
    length rx402_eos, rx402_tgt
    eq $I19, 1, rx402_restart1300
    gt rx402_pos, rx402_eos, rx402_fail1301
    repr_get_attr_int $I11, self, rx402_curclass, "$!from"
    ne $I11, -1, rxscan403_done1307
    goto rxscan403_scan1306
  rxscan403_loop1305:
    inc rx402_pos
    gt rx402_pos, rx402_eos, rx402_fail1301
    repr_bind_attr_int rx402_cur, rx402_curclass, "$!from", rx402_pos
  rxscan403_scan1306:
    nqp_rxmark rx402_bstack, rxscan403_loop1305, rx402_pos, 0
  rxscan403_done1307:
  alt404_01309:
    nqp_rxmark rx402_bstack, alt404_11325, rx402_pos, 0
    nqp_rxmark rx402_bstack, rxquantr405_done1311, rx402_pos, 0
  rxquantr405_loop1310:
    ge rx402_pos, rx402_eos, rx402_fail1301
    is_cclass $I11, .CCLASS_WHITESPACE, rx402_tgt, rx402_pos
    unless $I11, rx402_fail1301
    add rx402_pos, 1
    nqp_rxpeek $I19, rx402_bstack, rxquantr405_done1311
    inc $I19
    inc $I19
    set rx402_rep, rx402_bstack[$I19]
    nqp_rxcommit rx402_bstack, rxquantr405_done1311
    inc rx402_rep
    nqp_rxmark rx402_bstack, rxquantr405_done1311, rx402_pos, rx402_rep
    goto rxquantr405_loop1310
  rxquantr405_done1311:
    add $I11, rx402_pos, 1
    gt $I11, rx402_eos, rx402_fail1301
    substr $S10, rx402_tgt, rx402_pos, 1
    ne $S10, ucs4:"-", rx402_fail1301
    add rx402_pos, 1
    .const 'Sub' $P5001 = 'cuid_98_1360426899.567' 
    capture_lex $P5001
    repr_bind_attr_int rx402_cur, rx402_curclass, "$!pos", rx402_pos
    $P11 = rx402_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx402_curclass, "$!pos"
    ge $I11, 0, rx402_fail1301
    repr_bind_attr_int rx402_cur, rx402_curclass, "$!pos", rx402_pos
    $P11 = rx402_cur."obs"("- as character range", ".. for range, for explicit - in character class, escape it or place as last thing")
    repr_get_attr_int $I11, $P11, rx402_curclass, "$!pos"
    lt $I11, 0, rx402_fail1301
    repr_get_attr_int rx402_pos, $P11, rx402_curclass, "$!pos"
    goto alt404_end1308
  alt404_11325:
    nqp_rxmark rx402_bstack, rxquantr410_done1327, rx402_pos, 0
  rxquantr410_loop1326:
    ge rx402_pos, rx402_eos, rx402_fail1301
    is_cclass $I11, .CCLASS_WHITESPACE, rx402_tgt, rx402_pos
    unless $I11, rx402_fail1301
    add rx402_pos, 1
    nqp_rxpeek $I19, rx402_bstack, rxquantr410_done1327
    inc $I19
    inc $I19
    set rx402_rep, rx402_bstack[$I19]
    nqp_rxcommit rx402_bstack, rxquantr410_done1327
    inc rx402_rep
    nqp_rxmark rx402_bstack, rxquantr410_done1327, rx402_pos, rx402_rep
    goto rxquantr410_loop1326
  rxquantr410_done1327:
    .const 'Sub' $P5002 = 'cuid_100_1360426899.567' 
    capture_lex $P5002
    repr_bind_attr_int rx402_cur, rx402_curclass, "$!pos", rx402_pos
    $P11 = rx402_cur.$P5002()
    repr_get_attr_int $I11, $P11, rx402_curclass, "$!pos"
    lt $I11, 0, rx402_fail1301
    nqp_rxmark rx402_bstack, rxsubrule419_pass1355, -1, 0
  rxsubrule419_pass1355:
    rx402_cstack = rx402_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx402_pos, $P11, rx402_curclass, "$!pos"
    nqp_rxmark rx402_bstack, rxquantr420_done1357, rx402_pos, 0
  rxquantr420_loop1356:
    nqp_rxmark rx402_bstack, rxquantr421_done1359, rx402_pos, 0
  rxquantr421_loop1358:
    ge rx402_pos, rx402_eos, rx402_fail1301
    is_cclass $I11, .CCLASS_WHITESPACE, rx402_tgt, rx402_pos
    unless $I11, rx402_fail1301
    add rx402_pos, 1
    nqp_rxpeek $I19, rx402_bstack, rxquantr421_done1359
    inc $I19
    inc $I19
    set rx402_rep, rx402_bstack[$I19]
    nqp_rxcommit rx402_bstack, rxquantr421_done1359
    inc rx402_rep
    nqp_rxmark rx402_bstack, rxquantr421_done1359, rx402_pos, rx402_rep
    goto rxquantr421_loop1358
  rxquantr421_done1359:
    add $I11, rx402_pos, 2
    gt $I11, rx402_eos, rx402_fail1301
    substr $S10, rx402_tgt, rx402_pos, 2
    ne $S10, ucs4:"..", rx402_fail1301
    add rx402_pos, 2
    nqp_rxmark rx402_bstack, rxquantr422_done1361, rx402_pos, 0
  rxquantr422_loop1360:
    ge rx402_pos, rx402_eos, rx402_fail1301
    is_cclass $I11, .CCLASS_WHITESPACE, rx402_tgt, rx402_pos
    unless $I11, rx402_fail1301
    add rx402_pos, 1
    nqp_rxpeek $I19, rx402_bstack, rxquantr422_done1361
    inc $I19
    inc $I19
    set rx402_rep, rx402_bstack[$I19]
    nqp_rxcommit rx402_bstack, rxquantr422_done1361
    inc rx402_rep
    nqp_rxmark rx402_bstack, rxquantr422_done1361, rx402_pos, rx402_rep
    goto rxquantr422_loop1360
  rxquantr422_done1361:
    .const 'Sub' $P5003 = 'cuid_102_1360426899.567' 
    capture_lex $P5003
    repr_bind_attr_int rx402_cur, rx402_curclass, "$!pos", rx402_pos
    $P11 = rx402_cur.$P5003()
    repr_get_attr_int $I11, $P11, rx402_curclass, "$!pos"
    lt $I11, 0, rx402_fail1301
    nqp_rxmark rx402_bstack, rxsubrule431_pass1389, -1, 0
  rxsubrule431_pass1389:
    rx402_cstack = rx402_cur."!cursor_capture"($P11, "1")
    repr_get_attr_int rx402_pos, $P11, rx402_curclass, "$!pos"
    nqp_rxpeek $I19, rx402_bstack, rxquantr420_done1357
    inc $I19
    inc $I19
    set rx402_rep, rx402_bstack[$I19]
    nqp_rxcommit rx402_bstack, rxquantr420_done1357
    inc rx402_rep
  rxquantr420_done1357:
  alt404_end1308:
    rx402_cur."!cursor_pass"(rx402_pos, 'backtrack'=>1)
    .return (rx402_cur)
  rx402_restart1300:
    repr_get_attr_obj rx402_cstack, rx402_cur, rx402_curclass, "$!cstack"
  rx402_fail1301:
    unless rx402_bstack, rx402_done1299
    pop $I19, rx402_bstack
    if_null rx402_cstack, rx402_cstack_done1304
    unless rx402_cstack, rx402_cstack_done1304
    dec $I19
    set $P11, rx402_cstack[$I19]
  rx402_cstack_done1304:
    pop rx402_rep, rx402_bstack
    pop rx402_pos, rx402_bstack
    pop $I19, rx402_bstack
    lt rx402_pos, -1, rx402_done1299
    lt rx402_pos, 0, rx402_fail1301
    eq $I19, 0, rx402_fail1301
    nqp_islist $I20, rx402_cstack
    unless $I20, rx402_jump1302
    elements $I18, rx402_bstack
    le $I18, 0, rx402_cut1303
    dec $I18
    set $I18, rx402_bstack[$I18]
  rx402_cut1303:
    assign rx402_cstack, $I18
  rx402_jump1302:
    jump $I19
  rx402_done1299:
    rx402_cur."!cursor_fail"()
    .return (rx402_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_98_1360426899.567") :anon :lex :outer("cuid_103_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx406_tgt
    .local int rx406_pos
    .local int rx406_off
    .local int rx406_eos
    .local int rx406_rep
    .local pmc rx406_cur
    .local pmc rx406_curclass
    .local pmc rx406_bstack
    .local pmc rx406_cstack
    (rx406_cur, rx406_tgt, rx406_pos, rx406_curclass, rx406_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx406_cur
    length rx406_eos, rx406_tgt
    eq $I19, 1, rx406_restart1314
    gt rx406_pos, rx406_eos, rx406_fail1315
    repr_get_attr_int $I11, self, rx406_curclass, "$!from"
    ne $I11, -1, rxscan407_done1321
    goto rxscan407_scan1320
  rxscan407_loop1319:
    inc rx406_pos
    gt rx406_pos, rx406_eos, rx406_fail1315
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!from", rx406_pos
  rxscan407_scan1320:
    nqp_rxmark rx406_bstack, rxscan407_loop1319, rx406_pos, 0
  rxscan407_done1321:
    nqp_rxmark rx406_bstack, rxquantr408_done1323, rx406_pos, 0
  rxquantr408_loop1322:
    ge rx406_pos, rx406_eos, rx406_fail1315
    is_cclass $I11, .CCLASS_WHITESPACE, rx406_tgt, rx406_pos
    unless $I11, rx406_fail1315
    add rx406_pos, 1
    nqp_rxpeek $I19, rx406_bstack, rxquantr408_done1323
    inc $I19
    inc $I19
    set rx406_rep, rx406_bstack[$I19]
    nqp_rxcommit rx406_bstack, rxquantr408_done1323
    inc rx406_rep
    nqp_rxmark rx406_bstack, rxquantr408_done1323, rx406_pos, rx406_rep
    goto rxquantr408_loop1322
  rxquantr408_done1323:
    add $I11, rx406_pos, 1
    gt $I11, rx406_eos, rx406_fail1315
    substr $S10, rx406_tgt, rx406_pos, 1
    ne $S10, ucs4:"]", rx406_fail1315
    add rx406_pos, 1
    rx406_cur."!cursor_pass"(rx406_pos, 'backtrack'=>1)
    .return (rx406_cur)
  rx406_restart1314:
    repr_get_attr_obj rx406_cstack, rx406_cur, rx406_curclass, "$!cstack"
  rx406_fail1315:
    unless rx406_bstack, rx406_done1313
    pop $I19, rx406_bstack
    if_null rx406_cstack, rx406_cstack_done1318
    unless rx406_cstack, rx406_cstack_done1318
    dec $I19
    set $P11, rx406_cstack[$I19]
  rx406_cstack_done1318:
    pop rx406_rep, rx406_bstack
    pop rx406_pos, rx406_bstack
    pop $I19, rx406_bstack
    lt rx406_pos, -1, rx406_done1313
    lt rx406_pos, 0, rx406_fail1315
    eq $I19, 0, rx406_fail1315
    nqp_islist $I20, rx406_cstack
    unless $I20, rx406_jump1316
    elements $I18, rx406_bstack
    le $I18, 0, rx406_cut1317
    dec $I18
    set $I18, rx406_bstack[$I18]
  rx406_cut1317:
    assign rx406_cstack, $I18
  rx406_jump1316:
    jump $I19
  rx406_done1313:
    rx406_cur."!cursor_fail"()
    .return (rx406_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_100_1360426899.567") :anon :lex :outer("cuid_103_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .const 'Sub' $P5002 = 'cuid_99_1360426899.567' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx411_tgt
    .local int rx411_pos
    .local int rx411_off
    .local int rx411_eos
    .local int rx411_rep
    .local pmc rx411_cur
    .local pmc rx411_curclass
    .local pmc rx411_bstack
    .local pmc rx411_cstack
    (rx411_cur, rx411_tgt, rx411_pos, rx411_curclass, rx411_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx411_cur
    length rx411_eos, rx411_tgt
    eq $I19, 1, rx411_restart1330
    gt rx411_pos, rx411_eos, rx411_fail1331
    repr_get_attr_int $I11, self, rx411_curclass, "$!from"
    ne $I11, -1, rxscan412_done1337
    goto rxscan412_scan1336
  rxscan412_loop1335:
    inc rx411_pos
    gt rx411_pos, rx411_eos, rx411_fail1331
    repr_bind_attr_int rx411_cur, rx411_curclass, "$!from", rx411_pos
  rxscan412_scan1336:
    nqp_rxmark rx411_bstack, rxscan412_loop1335, rx411_pos, 0
  rxscan412_done1337:
  alt413_01339:
    nqp_rxmark rx411_bstack, alt413_11341, rx411_pos, 0
    add $I11, rx411_pos, 1
    gt $I11, rx411_eos, rx411_fail1331
    substr $S10, rx411_tgt, rx411_pos, 1
    ne $S10, ucs4:"\\", rx411_fail1331
    add rx411_pos, 1
    repr_bind_attr_int rx411_cur, rx411_curclass, "$!pos", rx411_pos
    $P11 = rx411_cur."backslash"()
    repr_get_attr_int $I11, $P11, rx411_curclass, "$!pos"
    lt $I11, 0, rx411_fail1331
    nqp_rxmark rx411_bstack, rxsubrule414_pass1340, -1, 0
  rxsubrule414_pass1340:
    rx411_cstack = rx411_cur."!cursor_capture"($P11, "backslash")
    repr_get_attr_int rx411_pos, $P11, rx411_curclass, "$!pos"
    goto alt413_end1338
  alt413_11341:
    .const 'Sub' $P5001 = 'cuid_99_1360426899.567' 
    capture_lex $P5001
    repr_bind_attr_int rx411_cur, rx411_curclass, "$!pos", rx411_pos
    $P11 = rx411_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx411_curclass, "$!pos"
    lt $I11, 0, rx411_fail1331
    nqp_rxmark rx411_bstack, rxsubrule418_pass1354, -1, 0
  rxsubrule418_pass1354:
    rx411_cstack = rx411_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx411_pos, $P11, rx411_curclass, "$!pos"
  alt413_end1338:
    rx411_cur."!cursor_pass"(rx411_pos, 'backtrack'=>1)
    .return (rx411_cur)
  rx411_restart1330:
    repr_get_attr_obj rx411_cstack, rx411_cur, rx411_curclass, "$!cstack"
  rx411_fail1331:
    unless rx411_bstack, rx411_done1329
    pop $I19, rx411_bstack
    if_null rx411_cstack, rx411_cstack_done1334
    unless rx411_cstack, rx411_cstack_done1334
    dec $I19
    set $P11, rx411_cstack[$I19]
  rx411_cstack_done1334:
    pop rx411_rep, rx411_bstack
    pop rx411_pos, rx411_bstack
    pop $I19, rx411_bstack
    lt rx411_pos, -1, rx411_done1329
    lt rx411_pos, 0, rx411_fail1331
    eq $I19, 0, rx411_fail1331
    nqp_islist $I20, rx411_cstack
    unless $I20, rx411_jump1332
    elements $I18, rx411_bstack
    le $I18, 0, rx411_cut1333
    dec $I18
    set $I18, rx411_bstack[$I18]
  rx411_cut1333:
    assign rx411_cstack, $I18
  rx411_jump1332:
    jump $I19
  rx411_done1329:
    rx411_cur."!cursor_fail"()
    .return (rx411_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_99_1360426899.567") :anon :lex :outer("cuid_100_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx415_tgt
    .local int rx415_pos
    .local int rx415_off
    .local int rx415_eos
    .local int rx415_rep
    .local pmc rx415_cur
    .local pmc rx415_curclass
    .local pmc rx415_bstack
    .local pmc rx415_cstack
    (rx415_cur, rx415_tgt, rx415_pos, rx415_curclass, rx415_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx415_cur
    length rx415_eos, rx415_tgt
    eq $I19, 1, rx415_restart1344
    gt rx415_pos, rx415_eos, rx415_fail1345
    repr_get_attr_int $I11, self, rx415_curclass, "$!from"
    ne $I11, -1, rxscan416_done1351
    goto rxscan416_scan1350
  rxscan416_loop1349:
    inc rx415_pos
    gt rx415_pos, rx415_eos, rx415_fail1345
    repr_bind_attr_int rx415_cur, rx415_curclass, "$!from", rx415_pos
  rxscan416_scan1350:
    nqp_rxmark rx415_bstack, rxscan416_loop1349, rx415_pos, 0
  rxscan416_done1351:
    nqp_rxmark rx415_bstack, rxconj417_fail1352, rx415_pos, 0
    goto rxconj417_first1353
  rxconj417_fail1352:
    goto rx415_fail1345
  rxconj417_first1353:
    add $I11, rx415_pos, 1
    gt $I11, rx415_eos, rx415_fail1345
    substr $S10, rx415_tgt, rx415_pos, 1
    eq $S10, ucs4:"]", rx415_fail1345
    add rx415_pos, 1
    nqp_rxpeek $I19, rx415_bstack, rxconj417_fail1352
    inc $I19
    set $I11, rx415_bstack[$I19]
    nqp_rxmark rx415_bstack, rxconj417_fail1352, $I11, rx415_pos
    set rx415_pos, $I11
    add $I11, rx415_pos, 1
    gt $I11, rx415_eos, rx415_fail1345
    substr $S10, rx415_tgt, rx415_pos, 1
    eq $S10, ucs4:"\\", rx415_fail1345
    add rx415_pos, 1
    nqp_rxpeek $I19, rx415_bstack, rxconj417_fail1352
    inc $I19
    set $I11, rx415_bstack[$I19]
    inc $I19
    set $I12, rx415_bstack[$I19]
    ne rx415_pos, $I12, rx415_fail1345
    set rx415_pos, $I11
    ge rx415_pos, rx415_eos, rx415_fail1345
    add rx415_pos, 1
    rx415_cur."!cursor_pass"(rx415_pos, 'backtrack'=>1)
    .return (rx415_cur)
  rx415_restart1344:
    repr_get_attr_obj rx415_cstack, rx415_cur, rx415_curclass, "$!cstack"
  rx415_fail1345:
    unless rx415_bstack, rx415_done1343
    pop $I19, rx415_bstack
    if_null rx415_cstack, rx415_cstack_done1348
    unless rx415_cstack, rx415_cstack_done1348
    dec $I19
    set $P11, rx415_cstack[$I19]
  rx415_cstack_done1348:
    pop rx415_rep, rx415_bstack
    pop rx415_pos, rx415_bstack
    pop $I19, rx415_bstack
    lt rx415_pos, -1, rx415_done1343
    lt rx415_pos, 0, rx415_fail1345
    eq $I19, 0, rx415_fail1345
    nqp_islist $I20, rx415_cstack
    unless $I20, rx415_jump1346
    elements $I18, rx415_bstack
    le $I18, 0, rx415_cut1347
    dec $I18
    set $I18, rx415_bstack[$I18]
  rx415_cut1347:
    assign rx415_cstack, $I18
  rx415_jump1346:
    jump $I19
  rx415_done1343:
    rx415_cur."!cursor_fail"()
    .return (rx415_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_102_1360426899.567") :anon :lex :outer("cuid_103_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .const 'Sub' $P5002 = 'cuid_101_1360426899.567' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx423_tgt
    .local int rx423_pos
    .local int rx423_off
    .local int rx423_eos
    .local int rx423_rep
    .local pmc rx423_cur
    .local pmc rx423_curclass
    .local pmc rx423_bstack
    .local pmc rx423_cstack
    (rx423_cur, rx423_tgt, rx423_pos, rx423_curclass, rx423_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx423_cur
    length rx423_eos, rx423_tgt
    eq $I19, 1, rx423_restart1364
    gt rx423_pos, rx423_eos, rx423_fail1365
    repr_get_attr_int $I11, self, rx423_curclass, "$!from"
    ne $I11, -1, rxscan424_done1371
    goto rxscan424_scan1370
  rxscan424_loop1369:
    inc rx423_pos
    gt rx423_pos, rx423_eos, rx423_fail1365
    repr_bind_attr_int rx423_cur, rx423_curclass, "$!from", rx423_pos
  rxscan424_scan1370:
    nqp_rxmark rx423_bstack, rxscan424_loop1369, rx423_pos, 0
  rxscan424_done1371:
  alt425_01373:
    nqp_rxmark rx423_bstack, alt425_11375, rx423_pos, 0
    add $I11, rx423_pos, 1
    gt $I11, rx423_eos, rx423_fail1365
    substr $S10, rx423_tgt, rx423_pos, 1
    ne $S10, ucs4:"\\", rx423_fail1365
    add rx423_pos, 1
    repr_bind_attr_int rx423_cur, rx423_curclass, "$!pos", rx423_pos
    $P11 = rx423_cur."backslash"()
    repr_get_attr_int $I11, $P11, rx423_curclass, "$!pos"
    lt $I11, 0, rx423_fail1365
    nqp_rxmark rx423_bstack, rxsubrule426_pass1374, -1, 0
  rxsubrule426_pass1374:
    rx423_cstack = rx423_cur."!cursor_capture"($P11, "backslash")
    repr_get_attr_int rx423_pos, $P11, rx423_curclass, "$!pos"
    goto alt425_end1372
  alt425_11375:
    .const 'Sub' $P5001 = 'cuid_101_1360426899.567' 
    capture_lex $P5001
    repr_bind_attr_int rx423_cur, rx423_curclass, "$!pos", rx423_pos
    $P11 = rx423_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx423_curclass, "$!pos"
    lt $I11, 0, rx423_fail1365
    nqp_rxmark rx423_bstack, rxsubrule430_pass1388, -1, 0
  rxsubrule430_pass1388:
    rx423_cstack = rx423_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx423_pos, $P11, rx423_curclass, "$!pos"
  alt425_end1372:
    rx423_cur."!cursor_pass"(rx423_pos, 'backtrack'=>1)
    .return (rx423_cur)
  rx423_restart1364:
    repr_get_attr_obj rx423_cstack, rx423_cur, rx423_curclass, "$!cstack"
  rx423_fail1365:
    unless rx423_bstack, rx423_done1363
    pop $I19, rx423_bstack
    if_null rx423_cstack, rx423_cstack_done1368
    unless rx423_cstack, rx423_cstack_done1368
    dec $I19
    set $P11, rx423_cstack[$I19]
  rx423_cstack_done1368:
    pop rx423_rep, rx423_bstack
    pop rx423_pos, rx423_bstack
    pop $I19, rx423_bstack
    lt rx423_pos, -1, rx423_done1363
    lt rx423_pos, 0, rx423_fail1365
    eq $I19, 0, rx423_fail1365
    nqp_islist $I20, rx423_cstack
    unless $I20, rx423_jump1366
    elements $I18, rx423_bstack
    le $I18, 0, rx423_cut1367
    dec $I18
    set $I18, rx423_bstack[$I18]
  rx423_cut1367:
    assign rx423_cstack, $I18
  rx423_jump1366:
    jump $I19
  rx423_done1363:
    rx423_cur."!cursor_fail"()
    .return (rx423_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_101_1360426899.567") :anon :lex :outer("cuid_102_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx427_tgt
    .local int rx427_pos
    .local int rx427_off
    .local int rx427_eos
    .local int rx427_rep
    .local pmc rx427_cur
    .local pmc rx427_curclass
    .local pmc rx427_bstack
    .local pmc rx427_cstack
    (rx427_cur, rx427_tgt, rx427_pos, rx427_curclass, rx427_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx427_cur
    length rx427_eos, rx427_tgt
    eq $I19, 1, rx427_restart1378
    gt rx427_pos, rx427_eos, rx427_fail1379
    repr_get_attr_int $I11, self, rx427_curclass, "$!from"
    ne $I11, -1, rxscan428_done1385
    goto rxscan428_scan1384
  rxscan428_loop1383:
    inc rx427_pos
    gt rx427_pos, rx427_eos, rx427_fail1379
    repr_bind_attr_int rx427_cur, rx427_curclass, "$!from", rx427_pos
  rxscan428_scan1384:
    nqp_rxmark rx427_bstack, rxscan428_loop1383, rx427_pos, 0
  rxscan428_done1385:
    nqp_rxmark rx427_bstack, rxconj429_fail1386, rx427_pos, 0
    goto rxconj429_first1387
  rxconj429_fail1386:
    goto rx427_fail1379
  rxconj429_first1387:
    add $I11, rx427_pos, 1
    gt $I11, rx427_eos, rx427_fail1379
    substr $S10, rx427_tgt, rx427_pos, 1
    eq $S10, ucs4:"]", rx427_fail1379
    add rx427_pos, 1
    nqp_rxpeek $I19, rx427_bstack, rxconj429_fail1386
    inc $I19
    set $I11, rx427_bstack[$I19]
    nqp_rxmark rx427_bstack, rxconj429_fail1386, $I11, rx427_pos
    set rx427_pos, $I11
    add $I11, rx427_pos, 1
    gt $I11, rx427_eos, rx427_fail1379
    substr $S10, rx427_tgt, rx427_pos, 1
    eq $S10, ucs4:"\\", rx427_fail1379
    add rx427_pos, 1
    nqp_rxpeek $I19, rx427_bstack, rxconj429_fail1386
    inc $I19
    set $I11, rx427_bstack[$I19]
    inc $I19
    set $I12, rx427_bstack[$I19]
    ne rx427_pos, $I12, rx427_fail1379
    set rx427_pos, $I11
    ge rx427_pos, rx427_eos, rx427_fail1379
    add rx427_pos, 1
    rx427_cur."!cursor_pass"(rx427_pos, 'backtrack'=>1)
    .return (rx427_cur)
  rx427_restart1378:
    repr_get_attr_obj rx427_cstack, rx427_cur, rx427_curclass, "$!cstack"
  rx427_fail1379:
    unless rx427_bstack, rx427_done1377
    pop $I19, rx427_bstack
    if_null rx427_cstack, rx427_cstack_done1382
    unless rx427_cstack, rx427_cstack_done1382
    dec $I19
    set $P11, rx427_cstack[$I19]
  rx427_cstack_done1382:
    pop rx427_rep, rx427_bstack
    pop rx427_pos, rx427_bstack
    pop $I19, rx427_bstack
    lt rx427_pos, -1, rx427_done1377
    lt rx427_pos, 0, rx427_fail1379
    eq $I19, 0, rx427_fail1379
    nqp_islist $I20, rx427_cstack
    unless $I20, rx427_jump1380
    elements $I18, rx427_bstack
    le $I18, 0, rx427_cut1381
    dec $I18
    set $I18, rx427_bstack[$I18]
  rx427_cut1381:
    assign rx427_cstack, $I18
  rx427_jump1380:
    jump $I19
  rx427_done1377:
    rx427_cur."!cursor_fail"()
    .return (rx427_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_internal" :subid("cuid_104_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 292
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_105_1360426899.567' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx443_tgt
    .local int rx443_pos
    .local int rx443_off
    .local int rx443_eos
    .local int rx443_rep
    .local pmc rx443_cur
    .local pmc rx443_curclass
    .local pmc rx443_bstack
    .local pmc rx443_cstack
    (rx443_cur, rx443_tgt, rx443_pos, rx443_curclass, rx443_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx443_cur
    length rx443_eos, rx443_tgt
    eq $I19, 1, rx443_restart1416
    gt rx443_pos, rx443_eos, rx443_fail1417
    repr_get_attr_int $I11, self, rx443_curclass, "$!from"
    ne $I11, -1, rxscan444_done1423
    goto rxscan444_scan1422
  rxscan444_loop1421:
    inc rx443_pos
    gt rx443_pos, rx443_eos, rx443_fail1417
    repr_bind_attr_int rx443_cur, rx443_curclass, "$!from", rx443_pos
  rxscan444_scan1422:
    nqp_rxmark rx443_bstack, rxscan444_loop1421, rx443_pos, 0
  rxscan444_done1423:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt445_01425
    nqp_push_label $P11, alt445_11447
    nqp_rxmark rx443_bstack, alt445_end1424, -1, 0
    rx443_cur."!alt"(rx443_pos, "alt_nfa__24_1360426900.405", $P11)
    goto rx443_fail1417
  alt445_01425:
    add $I11, rx443_pos, 1
    gt $I11, rx443_eos, rx443_fail1417
    substr $S10, rx443_tgt, rx443_pos, 1
    ne $S10, ucs4:":", rx443_fail1417
    add rx443_pos, 1
    nqp_rxmark rx443_bstack, rxquantr446_done1427, -1, 0
  rxquantr446_loop1426:
    .const 'Sub' $P5001 = 'cuid_105_1360426899.567' 
    capture_lex $P5001
    repr_bind_attr_int rx443_cur, rx443_curclass, "$!pos", rx443_pos
    $P11 = rx443_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx443_curclass, "$!pos"
    lt $I11, 0, rx443_fail1417
    goto rxsubrule451_pass1443
  rxsubrule451_back1444:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx443_curclass, "$!pos"
    lt $I11, 0, rx443_fail1417
  rxsubrule451_pass1443:
    rx443_cstack = rx443_cur."!cursor_capture"($P11, "n")
    set_addr $I11, rxsubrule451_back1444
    push rx443_bstack, $I11
    push rx443_bstack, 0
    push rx443_bstack, rx443_pos
    elements $I11, rx443_cstack
    push rx443_bstack, $I11
    repr_get_attr_int rx443_pos, $P11, rx443_curclass, "$!pos"
    nqp_rxpeek $I19, rx443_bstack, rxquantr446_done1427
    inc $I19
    inc $I19
    set rx443_rep, rx443_bstack[$I19]
    nqp_rxcommit rx443_bstack, rxquantr446_done1427
    inc rx443_rep
  rxquantr446_done1427:
    repr_bind_attr_int rx443_cur, rx443_curclass, "$!pos", rx443_pos
    $P11 = rx443_cur."mod_ident"()
    repr_get_attr_int $I11, $P11, rx443_curclass, "$!pos"
    lt $I11, 0, rx443_fail1417
    nqp_rxmark rx443_bstack, rxsubrule452_pass1445, -1, 0
  rxsubrule452_pass1445:
    rx443_cstack = rx443_cur."!cursor_capture"($P11, "mod_ident")
    repr_get_attr_int rx443_pos, $P11, rx443_curclass, "$!pos"
    le rx443_pos, 0, rx443_fail1417
    is_cclass $I11, .CCLASS_WORD, rx443_tgt, rx443_pos
    if $I11, rx443_fail1417
    sub $I11, rx443_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx443_tgt, $I11
    unless $I11, rx443_fail1417
    goto alt445_end1424
  alt445_11447:
    add $I11, rx443_pos, 1
    gt $I11, rx443_eos, rx443_fail1417
    substr $S10, rx443_tgt, rx443_pos, 1
    ne $S10, ucs4:":", rx443_fail1417
    add rx443_pos, 1
    repr_bind_attr_int rx443_cur, rx443_curclass, "$!pos", rx443_pos
    $P11 = rx443_cur."mod_ident"()
    repr_get_attr_int $I11, $P11, rx443_curclass, "$!pos"
    lt $I11, 0, rx443_fail1417
    nqp_rxmark rx443_bstack, rxsubrule454_pass1448, -1, 0
  rxsubrule454_pass1448:
    rx443_cstack = rx443_cur."!cursor_capture"($P11, "mod_ident")
    repr_get_attr_int rx443_pos, $P11, rx443_curclass, "$!pos"
    nqp_rxmark rx443_bstack, rxquantr455_done1450, rx443_pos, 0
  rxquantr455_loop1449:
    add $I11, rx443_pos, 1
    gt $I11, rx443_eos, rx443_fail1417
    substr $S10, rx443_tgt, rx443_pos, 1
    ne $S10, ucs4:"(", rx443_fail1417
    add rx443_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt456_01452
    nqp_push_label $P11, alt456_11457
    nqp_push_label $P11, alt456_21459
    nqp_rxmark rx443_bstack, alt456_end1451, -1, 0
    rx443_cur."!alt"(rx443_pos, "alt_nfa__23_1360426900.404", $P11)
    goto rx443_fail1417
  alt456_01452:
    nqp_rxmark rx443_bstack, rxcap457_fail1454, rx443_pos, 0
    nqp_rxmark rx443_bstack, rxquantr458_done1456, -1, 0
  rxquantr458_loop1455:
    ge rx443_pos, rx443_eos, rx443_fail1417
    is_cclass $I11, .CCLASS_NUMERIC, rx443_tgt, rx443_pos
    unless $I11, rx443_fail1417
    add rx443_pos, 1
    nqp_rxpeek $I19, rx443_bstack, rxquantr458_done1456
    inc $I19
    inc $I19
    set rx443_rep, rx443_bstack[$I19]
    nqp_rxcommit rx443_bstack, rxquantr458_done1456
    inc rx443_rep
    nqp_rxmark rx443_bstack, rxquantr458_done1456, rx443_pos, rx443_rep
    goto rxquantr458_loop1455
  rxquantr458_done1456:
    nqp_rxpeek $I19, rx443_bstack, rxcap457_fail1454
    inc $I19
    set $I11, rx443_bstack[$I19]
    repr_bind_attr_int rx443_cur, rx443_curclass, "$!pos", rx443_pos
    $P11 = rx443_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx443_pos)
    rx443_cstack = rx443_cur."!cursor_capture"($P11, "n")
    goto rxcap457_done1453
  rxcap457_fail1454:
    goto rx443_fail1417
  rxcap457_done1453:
    goto alt456_end1451
  alt456_11457:
    ge rx443_pos, rx443_eos, rx443_fail1417
    substr $S11, rx443_tgt, rx443_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx443_fail1417
    repr_bind_attr_int rx443_cur, rx443_curclass, "$!pos", rx443_pos
    $P11 = rx443_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx443_curclass, "$!pos"
    lt $I11, 0, rx443_fail1417
    nqp_rxmark rx443_bstack, rxsubrule459_pass1458, -1, 0
  rxsubrule459_pass1458:
    rx443_cstack = rx443_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx443_pos, $P11, rx443_curclass, "$!pos"
    goto alt456_end1451
  alt456_21459:
    ge rx443_pos, rx443_eos, rx443_fail1417
    substr $S11, rx443_tgt, rx443_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx443_fail1417
    repr_bind_attr_int rx443_cur, rx443_curclass, "$!pos", rx443_pos
    $P11 = rx443_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx443_curclass, "$!pos"
    lt $I11, 0, rx443_fail1417
    nqp_rxmark rx443_bstack, rxsubrule460_pass1460, -1, 0
  rxsubrule460_pass1460:
    rx443_cstack = rx443_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx443_pos, $P11, rx443_curclass, "$!pos"
    goto alt456_end1451
  alt456_end1451:
    nqp_rxcommit rx443_bstack, alt456_end1451
    add $I11, rx443_pos, 1
    gt $I11, rx443_eos, rx443_fail1417
    substr $S10, rx443_tgt, rx443_pos, 1
    ne $S10, ucs4:")", rx443_fail1417
    add rx443_pos, 1
    nqp_rxpeek $I19, rx443_bstack, rxquantr455_done1450
    inc $I19
    inc $I19
    set rx443_rep, rx443_bstack[$I19]
    nqp_rxcommit rx443_bstack, rxquantr455_done1450
    inc rx443_rep
  rxquantr455_done1450:
    goto alt445_end1424
  alt445_end1424:
    nqp_rxcommit rx443_bstack, alt445_end1424
    rx443_cur."!cursor_pass"(rx443_pos, "mod_internal", 'backtrack'=>1)
    .return (rx443_cur)
  rx443_restart1416:
    repr_get_attr_obj rx443_cstack, rx443_cur, rx443_curclass, "$!cstack"
  rx443_fail1417:
    unless rx443_bstack, rx443_done1415
    pop $I19, rx443_bstack
    if_null rx443_cstack, rx443_cstack_done1420
    unless rx443_cstack, rx443_cstack_done1420
    dec $I19
    set $P11, rx443_cstack[$I19]
  rx443_cstack_done1420:
    pop rx443_rep, rx443_bstack
    pop rx443_pos, rx443_bstack
    pop $I19, rx443_bstack
    lt rx443_pos, -1, rx443_done1415
    lt rx443_pos, 0, rx443_fail1417
    eq $I19, 0, rx443_fail1417
    nqp_islist $I20, rx443_cstack
    unless $I20, rx443_jump1418
    elements $I18, rx443_bstack
    le $I18, 0, rx443_cut1419
    dec $I18
    set $I18, rx443_bstack[$I18]
  rx443_cut1419:
    assign rx443_cstack, $I18
  rx443_jump1418:
    jump $I19
  rx443_done1415:
    rx443_cur."!cursor_fail"()
    .return (rx443_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_105_1360426899.567") :anon :lex :outer("cuid_104_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx447_tgt
    .local int rx447_pos
    .local int rx447_off
    .local int rx447_eos
    .local int rx447_rep
    .local pmc rx447_cur
    .local pmc rx447_curclass
    .local pmc rx447_bstack
    .local pmc rx447_cstack
    (rx447_cur, rx447_tgt, rx447_pos, rx447_curclass, rx447_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx447_cur
    length rx447_eos, rx447_tgt
    eq $I19, 1, rx447_restart1430
    gt rx447_pos, rx447_eos, rx447_fail1431
    repr_get_attr_int $I11, self, rx447_curclass, "$!from"
    ne $I11, -1, rxscan448_done1437
    goto rxscan448_scan1436
  rxscan448_loop1435:
    inc rx447_pos
    gt rx447_pos, rx447_eos, rx447_fail1431
    repr_bind_attr_int rx447_cur, rx447_curclass, "$!from", rx447_pos
  rxscan448_scan1436:
    nqp_rxmark rx447_bstack, rxscan448_loop1435, rx447_pos, 0
  rxscan448_done1437:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt449_01439
    nqp_push_label $P11, alt449_11440
    nqp_rxmark rx447_bstack, alt449_end1438, -1, 0
    rx447_cur."!alt"(rx447_pos, "alt_nfa__22_1360426900.384", $P11)
    goto rx447_fail1431
  alt449_01439:
    add $I11, rx447_pos, 1
    gt $I11, rx447_eos, rx447_fail1431
    substr $S10, rx447_tgt, rx447_pos, 1
    ne $S10, ucs4:"!", rx447_fail1431
    add rx447_pos, 1
    goto alt449_end1438
  alt449_11440:
    nqp_rxmark rx447_bstack, rxquantr450_done1442, -1, 0
  rxquantr450_loop1441:
    ge rx447_pos, rx447_eos, rx447_fail1431
    is_cclass $I11, .CCLASS_NUMERIC, rx447_tgt, rx447_pos
    unless $I11, rx447_fail1431
    add rx447_pos, 1
    nqp_rxpeek $I19, rx447_bstack, rxquantr450_done1442
    inc $I19
    inc $I19
    set rx447_rep, rx447_bstack[$I19]
    nqp_rxcommit rx447_bstack, rxquantr450_done1442
    inc rx447_rep
    nqp_rxmark rx447_bstack, rxquantr450_done1442, rx447_pos, rx447_rep
    goto rxquantr450_loop1441
  rxquantr450_done1442:
    goto alt449_end1438
  alt449_end1438:
    rx447_cur."!cursor_pass"(rx447_pos, 'backtrack'=>1)
    .return (rx447_cur)
  rx447_restart1430:
    repr_get_attr_obj rx447_cstack, rx447_cur, rx447_curclass, "$!cstack"
  rx447_fail1431:
    unless rx447_bstack, rx447_done1429
    pop $I19, rx447_bstack
    if_null rx447_cstack, rx447_cstack_done1434
    unless rx447_cstack, rx447_cstack_done1434
    dec $I19
    set $P11, rx447_cstack[$I19]
  rx447_cstack_done1434:
    pop rx447_rep, rx447_bstack
    pop rx447_pos, rx447_bstack
    pop $I19, rx447_bstack
    lt rx447_pos, -1, rx447_done1429
    lt rx447_pos, 0, rx447_fail1431
    eq $I19, 0, rx447_fail1431
    nqp_islist $I20, rx447_cstack
    unless $I20, rx447_jump1432
    elements $I18, rx447_bstack
    le $I18, 0, rx447_cut1433
    dec $I18
    set $I18, rx447_bstack[$I18]
  rx447_cut1433:
    assign rx447_cstack, $I18
  rx447_jump1432:
    jump $I19
  rx447_done1429:
    rx447_cur."!cursor_fail"()
    .return (rx447_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident" :subid("cuid_106_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 308
    .param pmc self 
    $P5001 = self."!protoregex"("mod_ident")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<ignorecase>" :subid("cuid_107_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 309
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx461_tgt
    .local int rx461_pos
    .local int rx461_off
    .local int rx461_eos
    .local int rx461_rep
    .local pmc rx461_cur
    .local pmc rx461_curclass
    .local pmc rx461_bstack
    .local pmc rx461_cstack
    (rx461_cur, rx461_tgt, rx461_pos, rx461_curclass, rx461_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx461_cur
    length rx461_eos, rx461_tgt
    eq $I19, 1, rx461_restart1463
    gt rx461_pos, rx461_eos, rx461_fail1464
    repr_get_attr_int $I11, self, rx461_curclass, "$!from"
    ne $I11, -1, rxscan462_done1470
    goto rxscan462_scan1469
  rxscan462_loop1468:
    inc rx461_pos
    gt rx461_pos, rx461_eos, rx461_fail1464
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!from", rx461_pos
  rxscan462_scan1469:
    nqp_rxmark rx461_bstack, rxscan462_loop1468, rx461_pos, 0
  rxscan462_done1470:
    nqp_rxmark rx461_bstack, rxcap463_fail1472, rx461_pos, 0
    add $I11, rx461_pos, 1
    gt $I11, rx461_eos, rx461_fail1464
    substr $S10, rx461_tgt, rx461_pos, 1
    ne $S10, ucs4:"i", rx461_fail1464
    add rx461_pos, 1
    nqp_rxpeek $I19, rx461_bstack, rxcap463_fail1472
    inc $I19
    set $I11, rx461_bstack[$I19]
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!pos", rx461_pos
    $P11 = rx461_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx461_pos)
    rx461_cstack = rx461_cur."!cursor_capture"($P11, "sym")
    goto rxcap463_done1471
  rxcap463_fail1472:
    goto rx461_fail1464
  rxcap463_done1471:
    nqp_rxmark rx461_bstack, rxquantr464_done1474, rx461_pos, 0
  rxquantr464_loop1473:
    add $I11, rx461_pos, 9
    gt $I11, rx461_eos, rx461_fail1464
    substr $S10, rx461_tgt, rx461_pos, 9
    ne $S10, ucs4:"gnorecase", rx461_fail1464
    add rx461_pos, 9
    nqp_rxpeek $I19, rx461_bstack, rxquantr464_done1474
    inc $I19
    inc $I19
    set rx461_rep, rx461_bstack[$I19]
    nqp_rxcommit rx461_bstack, rxquantr464_done1474
    inc rx461_rep
  rxquantr464_done1474:
    le rx461_pos, 0, rx461_fail1464
    is_cclass $I11, .CCLASS_WORD, rx461_tgt, rx461_pos
    if $I11, rx461_fail1464
    sub $I11, rx461_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx461_tgt, $I11
    unless $I11, rx461_fail1464
    rx461_cur."!cursor_pass"(rx461_pos, "mod_ident:sym<ignorecase>", 'backtrack'=>1)
    .return (rx461_cur)
  rx461_restart1463:
    repr_get_attr_obj rx461_cstack, rx461_cur, rx461_curclass, "$!cstack"
  rx461_fail1464:
    unless rx461_bstack, rx461_done1462
    pop $I19, rx461_bstack
    if_null rx461_cstack, rx461_cstack_done1467
    unless rx461_cstack, rx461_cstack_done1467
    dec $I19
    set $P11, rx461_cstack[$I19]
  rx461_cstack_done1467:
    pop rx461_rep, rx461_bstack
    pop rx461_pos, rx461_bstack
    pop $I19, rx461_bstack
    lt rx461_pos, -1, rx461_done1462
    lt rx461_pos, 0, rx461_fail1464
    eq $I19, 0, rx461_fail1464
    nqp_islist $I20, rx461_cstack
    unless $I20, rx461_jump1465
    elements $I18, rx461_bstack
    le $I18, 0, rx461_cut1466
    dec $I18
    set $I18, rx461_bstack[$I18]
  rx461_cut1466:
    assign rx461_cstack, $I18
  rx461_jump1465:
    jump $I19
  rx461_done1462:
    rx461_cur."!cursor_fail"()
    .return (rx461_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<ratchet>" :subid("cuid_108_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 310
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx466_tgt
    .local int rx466_pos
    .local int rx466_off
    .local int rx466_eos
    .local int rx466_rep
    .local pmc rx466_cur
    .local pmc rx466_curclass
    .local pmc rx466_bstack
    .local pmc rx466_cstack
    (rx466_cur, rx466_tgt, rx466_pos, rx466_curclass, rx466_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx466_cur
    length rx466_eos, rx466_tgt
    eq $I19, 1, rx466_restart1478
    gt rx466_pos, rx466_eos, rx466_fail1479
    repr_get_attr_int $I11, self, rx466_curclass, "$!from"
    ne $I11, -1, rxscan467_done1485
    goto rxscan467_scan1484
  rxscan467_loop1483:
    inc rx466_pos
    gt rx466_pos, rx466_eos, rx466_fail1479
    repr_bind_attr_int rx466_cur, rx466_curclass, "$!from", rx466_pos
  rxscan467_scan1484:
    nqp_rxmark rx466_bstack, rxscan467_loop1483, rx466_pos, 0
  rxscan467_done1485:
    nqp_rxmark rx466_bstack, rxcap468_fail1487, rx466_pos, 0
    add $I11, rx466_pos, 1
    gt $I11, rx466_eos, rx466_fail1479
    substr $S10, rx466_tgt, rx466_pos, 1
    ne $S10, ucs4:"r", rx466_fail1479
    add rx466_pos, 1
    nqp_rxpeek $I19, rx466_bstack, rxcap468_fail1487
    inc $I19
    set $I11, rx466_bstack[$I19]
    repr_bind_attr_int rx466_cur, rx466_curclass, "$!pos", rx466_pos
    $P11 = rx466_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx466_pos)
    rx466_cstack = rx466_cur."!cursor_capture"($P11, "sym")
    goto rxcap468_done1486
  rxcap468_fail1487:
    goto rx466_fail1479
  rxcap468_done1486:
    nqp_rxmark rx466_bstack, rxquantr469_done1489, rx466_pos, 0
  rxquantr469_loop1488:
    add $I11, rx466_pos, 6
    gt $I11, rx466_eos, rx466_fail1479
    substr $S10, rx466_tgt, rx466_pos, 6
    ne $S10, ucs4:"atchet", rx466_fail1479
    add rx466_pos, 6
    nqp_rxpeek $I19, rx466_bstack, rxquantr469_done1489
    inc $I19
    inc $I19
    set rx466_rep, rx466_bstack[$I19]
    nqp_rxcommit rx466_bstack, rxquantr469_done1489
    inc rx466_rep
  rxquantr469_done1489:
    le rx466_pos, 0, rx466_fail1479
    is_cclass $I11, .CCLASS_WORD, rx466_tgt, rx466_pos
    if $I11, rx466_fail1479
    sub $I11, rx466_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx466_tgt, $I11
    unless $I11, rx466_fail1479
    rx466_cur."!cursor_pass"(rx466_pos, "mod_ident:sym<ratchet>", 'backtrack'=>1)
    .return (rx466_cur)
  rx466_restart1478:
    repr_get_attr_obj rx466_cstack, rx466_cur, rx466_curclass, "$!cstack"
  rx466_fail1479:
    unless rx466_bstack, rx466_done1477
    pop $I19, rx466_bstack
    if_null rx466_cstack, rx466_cstack_done1482
    unless rx466_cstack, rx466_cstack_done1482
    dec $I19
    set $P11, rx466_cstack[$I19]
  rx466_cstack_done1482:
    pop rx466_rep, rx466_bstack
    pop rx466_pos, rx466_bstack
    pop $I19, rx466_bstack
    lt rx466_pos, -1, rx466_done1477
    lt rx466_pos, 0, rx466_fail1479
    eq $I19, 0, rx466_fail1479
    nqp_islist $I20, rx466_cstack
    unless $I20, rx466_jump1480
    elements $I18, rx466_bstack
    le $I18, 0, rx466_cut1481
    dec $I18
    set $I18, rx466_bstack[$I18]
  rx466_cut1481:
    assign rx466_cstack, $I18
  rx466_jump1480:
    jump $I19
  rx466_done1477:
    rx466_cur."!cursor_fail"()
    .return (rx466_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<sigspace>" :subid("cuid_109_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 311
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx471_tgt
    .local int rx471_pos
    .local int rx471_off
    .local int rx471_eos
    .local int rx471_rep
    .local pmc rx471_cur
    .local pmc rx471_curclass
    .local pmc rx471_bstack
    .local pmc rx471_cstack
    (rx471_cur, rx471_tgt, rx471_pos, rx471_curclass, rx471_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx471_cur
    length rx471_eos, rx471_tgt
    eq $I19, 1, rx471_restart1493
    gt rx471_pos, rx471_eos, rx471_fail1494
    repr_get_attr_int $I11, self, rx471_curclass, "$!from"
    ne $I11, -1, rxscan472_done1500
    goto rxscan472_scan1499
  rxscan472_loop1498:
    inc rx471_pos
    gt rx471_pos, rx471_eos, rx471_fail1494
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!from", rx471_pos
  rxscan472_scan1499:
    nqp_rxmark rx471_bstack, rxscan472_loop1498, rx471_pos, 0
  rxscan472_done1500:
    nqp_rxmark rx471_bstack, rxcap473_fail1502, rx471_pos, 0
    add $I11, rx471_pos, 1
    gt $I11, rx471_eos, rx471_fail1494
    substr $S10, rx471_tgt, rx471_pos, 1
    ne $S10, ucs4:"s", rx471_fail1494
    add rx471_pos, 1
    nqp_rxpeek $I19, rx471_bstack, rxcap473_fail1502
    inc $I19
    set $I11, rx471_bstack[$I19]
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx471_pos)
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "sym")
    goto rxcap473_done1501
  rxcap473_fail1502:
    goto rx471_fail1494
  rxcap473_done1501:
    nqp_rxmark rx471_bstack, rxquantr474_done1504, rx471_pos, 0
  rxquantr474_loop1503:
    add $I11, rx471_pos, 7
    gt $I11, rx471_eos, rx471_fail1494
    substr $S10, rx471_tgt, rx471_pos, 7
    ne $S10, ucs4:"igspace", rx471_fail1494
    add rx471_pos, 7
    nqp_rxpeek $I19, rx471_bstack, rxquantr474_done1504
    inc $I19
    inc $I19
    set rx471_rep, rx471_bstack[$I19]
    nqp_rxcommit rx471_bstack, rxquantr474_done1504
    inc rx471_rep
  rxquantr474_done1504:
    le rx471_pos, 0, rx471_fail1494
    is_cclass $I11, .CCLASS_WORD, rx471_tgt, rx471_pos
    if $I11, rx471_fail1494
    sub $I11, rx471_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx471_tgt, $I11
    unless $I11, rx471_fail1494
    rx471_cur."!cursor_pass"(rx471_pos, "mod_ident:sym<sigspace>", 'backtrack'=>1)
    .return (rx471_cur)
  rx471_restart1493:
    repr_get_attr_obj rx471_cstack, rx471_cur, rx471_curclass, "$!cstack"
  rx471_fail1494:
    unless rx471_bstack, rx471_done1492
    pop $I19, rx471_bstack
    if_null rx471_cstack, rx471_cstack_done1497
    unless rx471_cstack, rx471_cstack_done1497
    dec $I19
    set $P11, rx471_cstack[$I19]
  rx471_cstack_done1497:
    pop rx471_rep, rx471_bstack
    pop rx471_pos, rx471_bstack
    pop $I19, rx471_bstack
    lt rx471_pos, -1, rx471_done1492
    lt rx471_pos, 0, rx471_fail1494
    eq $I19, 0, rx471_fail1494
    nqp_islist $I20, rx471_cstack
    unless $I20, rx471_jump1495
    elements $I18, rx471_bstack
    le $I18, 0, rx471_cut1496
    dec $I18
    set $I18, rx471_bstack[$I18]
  rx471_cut1496:
    assign rx471_cstack, $I18
  rx471_jump1495:
    jump $I19
  rx471_done1492:
    rx471_cur."!cursor_fail"()
    .return (rx471_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<dba>" :subid("cuid_110_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 312
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx476_tgt
    .local int rx476_pos
    .local int rx476_off
    .local int rx476_eos
    .local int rx476_rep
    .local pmc rx476_cur
    .local pmc rx476_curclass
    .local pmc rx476_bstack
    .local pmc rx476_cstack
    (rx476_cur, rx476_tgt, rx476_pos, rx476_curclass, rx476_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx476_cur
    length rx476_eos, rx476_tgt
    eq $I19, 1, rx476_restart1508
    gt rx476_pos, rx476_eos, rx476_fail1509
    repr_get_attr_int $I11, self, rx476_curclass, "$!from"
    ne $I11, -1, rxscan477_done1515
    goto rxscan477_scan1514
  rxscan477_loop1513:
    inc rx476_pos
    gt rx476_pos, rx476_eos, rx476_fail1509
    repr_bind_attr_int rx476_cur, rx476_curclass, "$!from", rx476_pos
  rxscan477_scan1514:
    nqp_rxmark rx476_bstack, rxscan477_loop1513, rx476_pos, 0
  rxscan477_done1515:
    nqp_rxmark rx476_bstack, rxcap478_fail1517, rx476_pos, 0
    add $I11, rx476_pos, 3
    gt $I11, rx476_eos, rx476_fail1509
    substr $S10, rx476_tgt, rx476_pos, 3
    ne $S10, ucs4:"dba", rx476_fail1509
    add rx476_pos, 3
    nqp_rxpeek $I19, rx476_bstack, rxcap478_fail1517
    inc $I19
    set $I11, rx476_bstack[$I19]
    repr_bind_attr_int rx476_cur, rx476_curclass, "$!pos", rx476_pos
    $P11 = rx476_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx476_pos)
    rx476_cstack = rx476_cur."!cursor_capture"($P11, "sym")
    goto rxcap478_done1516
  rxcap478_fail1517:
    goto rx476_fail1509
  rxcap478_done1516:
    le rx476_pos, 0, rx476_fail1509
    is_cclass $I11, .CCLASS_WORD, rx476_tgt, rx476_pos
    if $I11, rx476_fail1509
    sub $I11, rx476_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx476_tgt, $I11
    unless $I11, rx476_fail1509
    rx476_cur."!cursor_pass"(rx476_pos, "mod_ident:sym<dba>", 'backtrack'=>1)
    .return (rx476_cur)
  rx476_restart1508:
    repr_get_attr_obj rx476_cstack, rx476_cur, rx476_curclass, "$!cstack"
  rx476_fail1509:
    unless rx476_bstack, rx476_done1507
    pop $I19, rx476_bstack
    if_null rx476_cstack, rx476_cstack_done1512
    unless rx476_cstack, rx476_cstack_done1512
    dec $I19
    set $P11, rx476_cstack[$I19]
  rx476_cstack_done1512:
    pop rx476_rep, rx476_bstack
    pop rx476_pos, rx476_bstack
    pop $I19, rx476_bstack
    lt rx476_pos, -1, rx476_done1507
    lt rx476_pos, 0, rx476_fail1509
    eq $I19, 0, rx476_fail1509
    nqp_islist $I20, rx476_cstack
    unless $I20, rx476_jump1510
    elements $I18, rx476_bstack
    le $I18, 0, rx476_cut1511
    dec $I18
    set $I18, rx476_bstack[$I18]
  rx476_cut1511:
    assign rx476_cstack, $I18
  rx476_jump1510:
    jump $I19
  rx476_done1507:
    rx476_cur."!cursor_fail"()
    .return (rx476_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<oops>" :subid("cuid_111_1360426899.567") :anon :lex :outer("cuid_180_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 313
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_188_1360426899.567' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_112_1360426899.567' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_189_1360426899.567' 
    capture_lex $P5008 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx480_tgt
    .local int rx480_pos
    .local int rx480_off
    .local int rx480_eos
    .local int rx480_rep
    .local pmc rx480_cur
    .local pmc rx480_curclass
    .local pmc rx480_bstack
    .local pmc rx480_cstack
    (rx480_cur, rx480_tgt, rx480_pos, rx480_curclass, rx480_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx480_cur
    length rx480_eos, rx480_tgt
    eq $I19, 1, rx480_restart1521
    gt rx480_pos, rx480_eos, rx480_fail1522
    repr_get_attr_int $I11, self, rx480_curclass, "$!from"
    ne $I11, -1, rxscan481_done1528
    goto rxscan481_scan1527
  rxscan481_loop1526:
    inc rx480_pos
    gt rx480_pos, rx480_eos, rx480_fail1522
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!from", rx480_pos
  rxscan481_scan1527:
    nqp_rxmark rx480_bstack, rxscan481_loop1526, rx480_pos, 0
  rxscan481_done1528:
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!pos", rx480_pos
    store_lex unicode:"$\x{a2}", rx480_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_188_1360426899.567' 
    capture_lex $P5002
    $P5003 = $P5002()
    .const 'Sub' $P5004 = 'cuid_112_1360426899.567' 
    capture_lex $P5004
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!pos", rx480_pos
    $P11 = rx480_cur.$P5004()
    repr_get_attr_int $I11, $P11, rx480_curclass, "$!pos"
    lt $I11, 0, rx480_fail1522
    nqp_rxmark rx480_bstack, rxsubrule485_pass1541, -1, 0
  rxsubrule485_pass1541:
    rx480_cstack = rx480_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx480_pos, $P11, rx480_curclass, "$!pos"
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!pos", rx480_pos
    store_lex unicode:"$\x{a2}", rx480_cur
    $P5005 = $P101."MATCH"()
    set $P102, $P5005
    .const 'Sub' $P5006 = 'cuid_189_1360426899.567' 
    capture_lex $P5006
    $P5007 = $P5006()
    rx480_cur."!cursor_pass"(rx480_pos, "mod_ident:sym<oops>", 'backtrack'=>1)
    .return (rx480_cur)
  rx480_restart1521:
    repr_get_attr_obj rx480_cstack, rx480_cur, rx480_curclass, "$!cstack"
  rx480_fail1522:
    unless rx480_bstack, rx480_done1520
    pop $I19, rx480_bstack
    if_null rx480_cstack, rx480_cstack_done1525
    unless rx480_cstack, rx480_cstack_done1525
    dec $I19
    set $P11, rx480_cstack[$I19]
  rx480_cstack_done1525:
    pop rx480_rep, rx480_bstack
    pop rx480_pos, rx480_bstack
    pop $I19, rx480_bstack
    lt rx480_pos, -1, rx480_done1520
    lt rx480_pos, 0, rx480_fail1522
    eq $I19, 0, rx480_fail1522
    nqp_islist $I20, rx480_cstack
    unless $I20, rx480_jump1523
    elements $I18, rx480_bstack
    le $I18, 0, rx480_cut1524
    dec $I18
    set $I18, rx480_bstack[$I18]
  rx480_cut1524:
    assign rx480_cstack, $I18
  rx480_jump1523:
    jump $I19
  rx480_done1520:
    rx480_cur."!cursor_fail"()
    .return (rx480_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_188_1360426899.567") :anon :lex :outer("cuid_111_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 313

    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_112_1360426899.567") :anon :lex :outer("cuid_111_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx482_tgt
    .local int rx482_pos
    .local int rx482_off
    .local int rx482_eos
    .local int rx482_rep
    .local pmc rx482_cur
    .local pmc rx482_curclass
    .local pmc rx482_bstack
    .local pmc rx482_cstack
    (rx482_cur, rx482_tgt, rx482_pos, rx482_curclass, rx482_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx482_cur
    length rx482_eos, rx482_tgt
    eq $I19, 1, rx482_restart1531
    gt rx482_pos, rx482_eos, rx482_fail1532
    repr_get_attr_int $I11, self, rx482_curclass, "$!from"
    ne $I11, -1, rxscan483_done1538
    goto rxscan483_scan1537
  rxscan483_loop1536:
    inc rx482_pos
    gt rx482_pos, rx482_eos, rx482_fail1532
    repr_bind_attr_int rx482_cur, rx482_curclass, "$!from", rx482_pos
  rxscan483_scan1537:
    nqp_rxmark rx482_bstack, rxscan483_loop1536, rx482_pos, 0
  rxscan483_done1538:
    nqp_rxmark rx482_bstack, rxquantr484_done1540, -1, 0
  rxquantr484_loop1539:
    ge rx482_pos, rx482_eos, rx482_fail1532
    is_cclass $I11, .CCLASS_WORD, rx482_tgt, rx482_pos
    unless $I11, rx482_fail1532
    add rx482_pos, 1
    nqp_rxpeek $I19, rx482_bstack, rxquantr484_done1540
    inc $I19
    inc $I19
    set rx482_rep, rx482_bstack[$I19]
    nqp_rxcommit rx482_bstack, rxquantr484_done1540
    inc rx482_rep
    nqp_rxmark rx482_bstack, rxquantr484_done1540, rx482_pos, rx482_rep
    goto rxquantr484_loop1539
  rxquantr484_done1540:
    rx482_cur."!cursor_pass"(rx482_pos, 'backtrack'=>1)
    .return (rx482_cur)
  rx482_restart1531:
    repr_get_attr_obj rx482_cstack, rx482_cur, rx482_curclass, "$!cstack"
  rx482_fail1532:
    unless rx482_bstack, rx482_done1530
    pop $I19, rx482_bstack
    if_null rx482_cstack, rx482_cstack_done1535
    unless rx482_cstack, rx482_cstack_done1535
    dec $I19
    set $P11, rx482_cstack[$I19]
  rx482_cstack_done1535:
    pop rx482_rep, rx482_bstack
    pop rx482_pos, rx482_bstack
    pop $I19, rx482_bstack
    lt rx482_pos, -1, rx482_done1530
    lt rx482_pos, 0, rx482_fail1532
    eq $I19, 0, rx482_fail1532
    nqp_islist $I20, rx482_cstack
    unless $I20, rx482_jump1533
    elements $I18, rx482_bstack
    le $I18, 0, rx482_cut1534
    dec $I18
    set $I18, rx482_bstack[$I18]
  rx482_cut1534:
    assign rx482_cstack, $I18
  rx482_jump1533:
    jump $I19
  rx482_done1530:
    rx482_cur."!cursor_fail"()
    .return (rx482_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_189_1360426899.567") :anon :lex :outer("cuid_111_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 313

    find_lex $P5001, "$/"
    $P5002 = $P5001."CURSOR"()
    find_lex $P5004, "$/"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback1542
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5005
  fallback1542:
    $P5006 = $P5003."Str"()
    set $S5002, $P5006
    concat $S5001, "Unrecognized regex modifier :", $S5002
    $P5007 = $P5002."panic"($S5001)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_191_1360426899.567") :anon :lex :outer("cuid_177_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 317
    .const 'Sub' $P5066 = 'cuid_190_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_194_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_113_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_114_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_115_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_116_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_117_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_118_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_119_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_120_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_121_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_122_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_123_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_124_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_125_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_126_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_127_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_128_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_129_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_130_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_131_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_132_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_133_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_134_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_135_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_136_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_137_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_138_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_139_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_140_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_141_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_142_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_143_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_144_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_145_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_146_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_147_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_148_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_149_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_150_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_151_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_152_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_153_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_154_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_155_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_156_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_157_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_158_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_159_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_160_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_161_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_162_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_163_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_164_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_165_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_166_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_167_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_168_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_169_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_170_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_171_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_172_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_173_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_174_1360426899.567' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_175_1360426899.567' 
    capture_lex $P5066 
    .lex "&backmod", $P101 
    .lex "&capnames", $P102 
    .lex "$?PACKAGE", $P103 
    .lex "$?CLASS", $P104 
    .const 'Sub' $P5001 = 'cuid_190_1360426899.567' 
    capture_lex $P5001
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_194_1360426899.567' 
    capture_lex $P5002
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_113_1360426899.567' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_114_1360426899.567' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_115_1360426899.567' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_116_1360426899.567' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_117_1360426899.567' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_118_1360426899.567' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_119_1360426899.567' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_120_1360426899.567' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_121_1360426899.567' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_122_1360426899.567' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_123_1360426899.567' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_124_1360426899.567' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_125_1360426899.567' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_126_1360426899.567' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_127_1360426899.567' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_128_1360426899.567' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_129_1360426899.567' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_130_1360426899.567' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_131_1360426899.567' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_132_1360426899.567' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_133_1360426899.567' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_134_1360426899.567' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_135_1360426899.567' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_136_1360426899.567' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_137_1360426899.567' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_138_1360426899.567' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_139_1360426899.567' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_140_1360426899.567' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_141_1360426899.567' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_142_1360426899.567' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_143_1360426899.567' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_144_1360426899.567' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_145_1360426899.567' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_146_1360426899.567' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_147_1360426899.567' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_148_1360426899.567' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_149_1360426899.567' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_150_1360426899.567' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_151_1360426899.567' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_152_1360426899.567' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_153_1360426899.567' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_154_1360426899.567' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_155_1360426899.567' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_156_1360426899.567' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_157_1360426899.567' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_158_1360426899.567' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_159_1360426899.567' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_160_1360426899.567' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_161_1360426899.567' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_162_1360426899.567' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_163_1360426899.567' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_164_1360426899.567' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_165_1360426899.567' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_166_1360426899.567' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_167_1360426899.567' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_168_1360426899.567' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_169_1360426899.567' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_170_1360426899.567' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_171_1360426899.567' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_172_1360426899.567' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_173_1360426899.567' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_174_1360426899.567' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_175_1360426899.567' 
    capture_lex $P5065
    .return ($P5065) 
.end
.HLL "nqp"
.namespace []
.sub "backmod" :subid("cuid_190_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 863
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$ast", _lex_param_0 
    .lex "$backmod", _lex_param_1 
    set $S5001, _lex_param_1
    iseq $I5001, $S5001, ":"
    unless $I5001 goto if486_else1543 
.annotate 'line', 864
    $P5001 = _lex_param_0."backtrack"("r")
    goto if486_end1544
  if486_else1543:
    set $S5002, _lex_param_1
    iseq $I5002, $S5002, ":?"
    set $I5004, $I5002
    if $I5002 goto unless488_end1548 
    set $S5003, _lex_param_1
    iseq $I5003, $S5003, "?"
    set $I5004, $I5003
  unless488_end1548:
    unless $I5004 goto if487_else1545 
.annotate 'line', 865
    $P5002 = _lex_param_0."backtrack"("f")
    set $P5006, $P5002
    goto if487_end1546
  if487_else1545:
    set $S5004, _lex_param_1
    iseq $I5005, $S5004, ":!"
    set $I5007, $I5005
    if $I5005 goto unless490_end1552 
    set $S5005, _lex_param_1
    iseq $I5006, $S5005, "!"
    set $I5007, $I5006
  unless490_end1552:
    box $P5005, $I5007
    set $P5004, $P5005
    unless $I5007 goto if489_end1550 
.annotate 'line', 866
    $P5003 = _lex_param_0."backtrack"("g")
    set $P5004, $P5003
  if489_end1550:
    set $P5006, $P5004
  if487_end1546:
  if486_end1544:
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "capnames" :subid("cuid_194_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 907
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_193_1360426899.567' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_197_1360426899.567' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_199_1360426899.567' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_201_1360426899.567' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_204_1360426899.567' 
    capture_lex $P5024 
    .lex "%capnames", $P101 
    .lex "$rxtype", $P102 
    .lex "$ast", _lex_param_0 
    .lex "$count", _lex_param_1 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
.annotate 'line', 909
    $P5003 = _lex_param_0."rxtype"()
    set $P102, $P5003
    set $S5001, $P102
    iseq $I5001, $S5001, "concat"
    unless $I5001 goto if491_else1553 
.annotate 'line', 910
.annotate 'line', 911
    $P5007 = _lex_param_0."list"()
    set $P5004, $P5007
    iter $P5006, $P5007
  for_next1560:
    unless $P5006, for_done1562
    shift $P5009, $P5006
  for_redo1561:
    .const 'Sub' $P5008 = 'cuid_193_1360426899.567' 
    capture_lex $P5008
    $P5004 = $P5008($P5009)
    goto for_next1560
  for_done1562:
    goto if491_end1554
  if491_else1553:
    set $S5002, $P102
    iseq $I5002, $S5002, "altseq"
    set $I5004, $I5002
    if $I5002 goto unless493_end1566 
    set $S5003, $P102
    iseq $I5003, $S5003, "alt"
    set $I5004, $I5003
  unless493_end1566:
    unless $I5004 goto if492_else1563 
    .const 'Sub' $P5010 = 'cuid_197_1360426899.567' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5023, $P5011
    goto if492_end1564
  if492_else1563:
    set $S5004, $P102
    iseq $I5005, $S5004, "subrule"
    set $I5007, $I5005
    unless $I5005 goto if498_end1586 
.annotate 'line', 928
    $P5012 = _lex_param_0."subtype"()
    set $S5005, $P5012
    iseq $I5006, $S5005, "capture"
    set $I5007, $I5006
  if498_end1586:
    unless $I5007 goto if497_else1583 
    .const 'Sub' $P5013 = 'cuid_199_1360426899.567' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5022, $P5014
    goto if497_end1584
  if497_else1583:
    set $S5006, $P102
    iseq $I5008, $S5006, "subcapture"
    unless $I5008 goto if502_else1596 
    .const 'Sub' $P5015 = 'cuid_201_1360426899.567' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5021, $P5016
    goto if502_end1597
  if502_else1596:
    set $S5007, $P102
    iseq $I5009, $S5007, "quant"
    box $P5020, $I5009
    set $P5019, $P5020
    unless $I5009 goto if505_end1613 
    .const 'Sub' $P5017 = 'cuid_204_1360426899.567' 
    capture_lex $P5017
    $P5018 = $P5017()
    set $P5019, $P5018
  if505_end1613:
    set $P5021, $P5019
  if502_end1597:
    set $P5022, $P5021
  if497_end1584:
    set $P5023, $P5022
  if492_end1564:
  if491_end1554:
    set $P101[""], _lex_param_1
    delete $P101["$!from"]
    delete $P101["$!to"]
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_193_1360426899.567") :anon :lex :outer("cuid_194_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 911
    .param pmc _lex_param_0 
    .const 'Sub' $P5011 = 'cuid_192_1360426899.567' 
    capture_lex $P5011 
    .lex "%x", $P101 
    .lex "$_", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 912
    find_lex $P5002, "$count"
    $P5003 = "&capnames"(_lex_param_0, $P5002)
    set $P101, $P5003
    set $P5004, $P101
    iter $P5006, $P101
  for_next1556:
    unless $P5006, for_done1558
    shift $P5008, $P5006
  for_redo1557:
    .const 'Sub' $P5007 = 'cuid_192_1360426899.567' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next1556
  for_done1558:
    set $P5009, $P101[""]
    unless_null $P5009, fallback1559
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5010
  fallback1559:
    store_lex "$count", $P5009
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_192_1360426899.567") :anon :lex :outer("cuid_193_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 913
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "%capnames"
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5004, "%capnames"
    $P5005 = _lex_param_0."key"()
    set $S5002, $P5005
    set $P5003, $P5004[$S5002]
    unless_null $P5003, fallback1555
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5006
  fallback1555:
    set $N5002, $P5003
    $P5007 = _lex_param_0."value"()
    set $N5003, $P5007
    add $N5001, $N5002, $N5003
    box $P5008, $N5001
    set $P5001[$S5001], $P5008
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_197_1360426899.567") :anon :lex :outer("cuid_194_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 917
    .const 'Sub' $P5010 = 'cuid_196_1360426899.567' 
    capture_lex $P5010 
    .lex "$max", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    find_lex $P5002, "$count"
    set $P101, $P5002
.annotate 'line', 919
    find_lex $P5006, "$ast"
    $P5007 = $P5006."list"()
    set $P5003, $P5007
    iter $P5005, $P5007
  for_next1580:
    unless $P5005, for_done1582
    shift $P5009, $P5005
  for_redo1581:
    .const 'Sub' $P5008 = 'cuid_196_1360426899.567' 
    capture_lex $P5008
    $P5003 = $P5008($P5009)
    goto for_next1580
  for_done1582:
    store_lex "$count", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_196_1360426899.567") :anon :lex :outer("cuid_197_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 919
    .param pmc _lex_param_0 
    .const 'Sub' $P5016 = 'cuid_195_1360426899.567' 
    capture_lex $P5016 
    .lex "%x", $P101 
    .lex "$_", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 920
    find_lex $P5002, "$count"
    $P5003 = "&capnames"(_lex_param_0, $P5002)
    set $P101, $P5003
    set $P5004, $P101
    iter $P5006, $P101
  for_next1573:
    unless $P5006, for_done1575
    shift $P5008, $P5006
  for_redo1574:
    .const 'Sub' $P5007 = 'cuid_195_1360426899.567' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next1573
  for_done1575:
    set $P5009, $P101[""]
    unless_null $P5009, fallback1578
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5010
  fallback1578:
    set $N5001, $P5009
    find_lex $P5011, "$max"
    set $N5002, $P5011
    isgt $I5001, $N5001, $N5002
    box $P5015, $I5001
    set $P5014, $P5015
    unless $I5001 goto if496_end1577 
    set $P5012, $P101[""]
    unless_null $P5012, fallback1579
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5013
  fallback1579:
    store_lex "$max", $P5012
    set $P5014, $P5012
  if496_end1577:
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_195_1360426899.567") :anon :lex :outer("cuid_196_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 921
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "%capnames"
.annotate 'line', 922
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5004, "%capnames"
    $P5005 = _lex_param_0."key"()
    set $S5002, $P5005
    set $P5003, $P5004[$S5002]
    unless_null $P5003, fallback1571
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5006
  fallback1571:
    set $N5001, $P5003
    set $N5002, 2
    islt $I5001, $N5001, $N5002
    set $I5003, $I5001
    unless $I5001 goto if495_end1570 
    find_lex $P5008, "%x"
    $P5009 = _lex_param_0."key"()
    set $S5003, $P5009
    set $P5007, $P5008[$S5003]
    unless_null $P5007, fallback1572
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5010
  fallback1572:
    set $N5003, $P5007
    set $N5004, 1
    iseq $I5002, $N5003, $N5004
    set $I5003, $I5002
  if495_end1570:
    unless $I5003 goto if494_else1567 
    set $I5004, 1
    goto if494_end1568
  if494_else1567:
    set $I5004, 2
  if494_end1568:
    box $P5011, $I5004
    set $P5001[$S5001], $P5011
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_199_1360426899.567") :anon :lex :outer("cuid_194_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 928
    .const 'Sub' $P5014 = 'cuid_198_1360426899.567' 
    capture_lex $P5014 
    .lex "$name", $P101 
    .lex "@names", $P102 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
.annotate 'line', 929
    find_lex $P5003, "$ast"
    $P5004 = $P5003."name"()
    set $P101, $P5004
    set $S5001, $P101
    iseq $I5001, $S5001, ""
    unless $I5001 goto if499_end1588 
.annotate 'line', 930
    find_lex $P5005, "$count"
    set $P101, $P5005
    find_lex $P5006, "$ast"
    $P5007 = $P5006."name"($P101)
  if499_end1588:
    set $S5002, $P101
    split $P5008, "=", $S5002
    set $P102, $P5008
    set $P5009, $P102
    iter $P5011, $P102
  for_next1593:
    unless $P5011, for_done1595
    shift $P5013, $P5011
  for_redo1594:
    .const 'Sub' $P5012 = 'cuid_198_1360426899.567' 
    capture_lex $P5012
    $P5009 = $P5012($P5013)
    goto for_next1593
  for_done1595:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_198_1360426899.567") :anon :lex :outer("cuid_199_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 932
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "0"
    set $I5003, $I5001
    if $I5001 goto unless501_end1592 
    set $N5001, _lex_param_0
    set $N5002, 0
    isgt $I5002, $N5001, $N5002
    set $I5003, $I5002
  unless501_end1592:
    unless $I5003 goto if500_end1590 
.annotate 'line', 933
    set $N5004, _lex_param_0
    set $N5005, 1
    add $N5003, $N5004, $N5005
    box $P5001, $N5003
    store_lex "$count", $P5001
  if500_end1590:
    find_lex $P5002, "%capnames"
    set $S5002, _lex_param_0
    box $P5003, 1
    set $P5002[$S5002], $P5003
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_201_1360426899.567") :anon :lex :outer("cuid_194_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 937
    .const 'Sub' $P5022 = 'cuid_200_1360426899.567' 
    capture_lex $P5022 
    .const 'Sub' $P5022 = 'cuid_202_1360426899.567' 
    capture_lex $P5022 
    .lex "%x", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 938
    find_lex $P5006, "$ast"
    $P5007 = $P5006."name"()
    set $S5001, $P5007
    split $P5005, " ", $S5001
    set $P5002, $P5005
    iter $P5004, $P5005
  for_next1602:
    unless $P5004, for_done1604
    shift $P5009, $P5004
  for_redo1603:
    .const 'Sub' $P5008 = 'cuid_200_1360426899.567' 
    capture_lex $P5008
    $P5002 = $P5008($P5009)
    goto for_next1602
  for_done1604:
.annotate 'line', 942
    find_lex $P5011, "$ast"
    set $P5010, $P5011[0]
    unless_null $P5010, fallback1605
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5012
  fallback1605:
    find_lex $P5013, "$count"
    $P5014 = "&capnames"($P5010, $P5013)
    set $P101, $P5014
    set $P5015, $P101
    iter $P5017, $P101
  for_next1608:
    unless $P5017, for_done1610
    shift $P5019, $P5017
  for_redo1609:
    .const 'Sub' $P5018 = 'cuid_202_1360426899.567' 
    capture_lex $P5018
    $P5015 = $P5018($P5019)
    goto for_next1608
  for_done1610:
    set $P5020, $P101[""]
    unless_null $P5020, fallback1611
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5021
  fallback1611:
    store_lex "$count", $P5020
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_200_1360426899.567") :anon :lex :outer("cuid_201_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 938
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "0"
    set $I5003, $I5001
    if $I5001 goto unless504_end1601 
    set $N5001, _lex_param_0
    set $N5002, 0
    isgt $I5002, $N5001, $N5002
    set $I5003, $I5002
  unless504_end1601:
    unless $I5003 goto if503_end1599 
.annotate 'line', 939
    set $N5004, _lex_param_0
    set $N5005, 1
    add $N5003, $N5004, $N5005
    box $P5001, $N5003
    store_lex "$count", $P5001
  if503_end1599:
    find_lex $P5002, "%capnames"
    set $S5002, _lex_param_0
    box $P5003, 1
    set $P5002[$S5002], $P5003
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_202_1360426899.567") :anon :lex :outer("cuid_201_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 943
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "%capnames"
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5004, "%capnames"
    $P5005 = _lex_param_0."key"()
    set $S5002, $P5005
    set $P5003, $P5004[$S5002]
    unless_null $P5003, fallback1606
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5006
  fallback1606:
    set $N5002, $P5003
    find_lex $P5008, "%x"
    $P5009 = _lex_param_0."key"()
    set $S5003, $P5009
    set $P5007, $P5008[$S5003]
    unless_null $P5007, fallback1607
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5010
  fallback1607:
    set $N5003, $P5007
    add $N5001, $N5002, $N5003
    box $P5011, $N5001
    set $P5001[$S5001], $P5011
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_204_1360426899.567") :anon :lex :outer("cuid_194_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 946
    .const 'Sub' $P5014 = 'cuid_203_1360426899.567' 
    capture_lex $P5014 
    .lex "%astcap", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 947
    find_lex $P5003, "$ast"
    set $P5002, $P5003[0]
    unless_null $P5002, fallback1614
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5004
  fallback1614:
    find_lex $P5005, "$count"
    $P5006 = "&capnames"($P5002, $P5005)
    set $P101, $P5006
    set $P5007, $P101
    iter $P5009, $P101
  for_next1615:
    unless $P5009, for_done1617
    shift $P5011, $P5009
  for_redo1616:
    .const 'Sub' $P5010 = 'cuid_203_1360426899.567' 
    capture_lex $P5010
    $P5007 = $P5010($P5011)
    goto for_next1615
  for_done1617:
    set $P5012, $P101[""]
    unless_null $P5012, fallback1618
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5013
  fallback1618:
    store_lex "$count", $P5012
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_203_1360426899.567") :anon :lex :outer("cuid_204_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 948
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "%capnames"
    set $S5001, _lex_param_0
    box $P5002, 2
    set $P5001[$S5001], $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_113_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 318
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 319
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["CompUnit"]
    unless_null $P5001, fallback1619
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback1619:
.annotate 'line', 321
    find_dynamic_lex $P5006, "$*W"
    unless_null $P5006, fallback1620
    nqp_get_sc_object $P5009, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$W"]
    unless_null $P5007, fallback1621
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5010
  fallback1621:
    unless_null $P5007, vivi_5061622
    die "Contextual $*W not found"
    box $P5011, "Contextual $*W not found"
    set $P5007, $P5011
  vivi_5061622:
    set $P5006, $P5007
  fallback1620:
    $P5012 = $P5006."sc"()
.annotate 'line', 322
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback1623
    nqp_get_sc_object $P5016, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback1624
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5017
  fallback1624:
    unless_null $P5014, vivi_5071625
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_5071625:
    set $P5013, $P5014
  fallback1623:
    $P5019 = $P5013."code_ref_blocks"()
.annotate 'line', 324
    find_dynamic_lex $P5020, "$*W"
    unless_null $P5020, fallback1626
    nqp_get_sc_object $P5023, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$W"]
    unless_null $P5021, fallback1627
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5021, $P5024
  fallback1627:
    unless_null $P5021, vivi_5081628
    die "Contextual $*W not found"
    box $P5025, "Contextual $*W not found"
    set $P5021, $P5025
  vivi_5081628:
    set $P5020, $P5021
  fallback1626:
    $P5026 = $P5020."load_dependency_tasks"()
.annotate 'line', 325
    find_dynamic_lex $P5027, "$*W"
    unless_null $P5027, fallback1629
    nqp_get_sc_object $P5030, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["$W"]
    unless_null $P5028, fallback1630
    nqp_get_sc_object $P5031, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5028, $P5031
  fallback1630:
    unless_null $P5028, vivi_5091631
    die "Contextual $*W not found"
    box $P5032, "Contextual $*W not found"
    set $P5028, $P5032
  vivi_5091631:
    set $P5027, $P5028
  fallback1629:
    $P5033 = $P5027."fixup_tasks"()
.annotate 'line', 326
    nqp_decontainerize $P5034, _lex_param_0
    unless_null _lex_param_1, fallback1632
    nqp_get_sc_object $P5036, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5036
  fallback1632:
    set $P5035, _lex_param_1["nibbler"]
    unless_null $P5035, fallback1633
    nqp_get_sc_object $P5037, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5035, $P5037
  fallback1633:
    $P5038 = $P5035."ast"()
    $P5039 = $P5034."qbuildsub"($P5038, 1 :named("anon"), 1 :named("addself"))
    $P5040 = $P5001."new"($P5039, "P6Regex" :named("hll"), $P5012 :named("sc"), $P5019 :named("code_ref_blocks"), 0 :named("compilation_mode"), $P5026 :named("pre_deserialize"), $P5033 :named("post_deserialize"))
    $P5041 = _lex_param_1."!make"($P5040)
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "nibbler" :subid("cuid_114_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 330
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback1634
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback1634:
    set $P5001, _lex_param_1["termaltseq"]
    unless_null $P5001, fallback1635
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback1635:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "termaltseq" :subid("cuid_115_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 332
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5026 = 'cuid_205_1360426899.567' 
    capture_lex $P5026 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 333
    unless_null _lex_param_1, fallback1636
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5004
  fallback1636:
    set $P5003, _lex_param_1["termconjseq"]
    unless_null $P5003, fallback1637
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5005
  fallback1637:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback1638
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback1638:
    $P5007 = $P5002."ast"()
    set $P101, $P5007
    unless_null _lex_param_1, fallback1641
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5009
  fallback1641:
    set $P5008, _lex_param_1["termconjseq"]
    unless_null $P5008, fallback1642
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5010
  fallback1642:
    set $N5001, $P5008
    set $N5002, 1
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if510_end1640 
.annotate 'line', 334
.annotate 'line', 335
    nqp_get_sc_object $P5014, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Regex"]
    unless_null $P5011, fallback1643
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback1643:
    $P5016 = $P5011."new"("altseq" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5016
    unless_null _lex_param_1, fallback1644
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5021
  fallback1644:
    set $P5020, _lex_param_1["termconjseq"]
    unless_null $P5020, fallback1645
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5022
  fallback1645:
    set $P5017, $P5020
    iter $P5019, $P5020
  for_next1646:
    unless $P5019, for_done1648
    shift $P5024, $P5019
  for_redo1647:
    .const 'Sub' $P5023 = 'cuid_205_1360426899.567' 
    capture_lex $P5023
    $P5017 = $P5023($P5024)
    goto for_next1646
  for_done1648:
  if510_end1640:
.annotate 'line', 338
    $P5025 = _lex_param_1."!make"($P101)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_205_1360426899.567") :anon :lex :outer("cuid_115_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 336
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termconjseq" :subid("cuid_116_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 341
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5026 = 'cuid_206_1360426899.567' 
    capture_lex $P5026 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 342
    unless_null _lex_param_1, fallback1649
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5004
  fallback1649:
    set $P5003, _lex_param_1["termalt"]
    unless_null $P5003, fallback1650
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5005
  fallback1650:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback1651
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback1651:
    $P5007 = $P5002."ast"()
    set $P101, $P5007
    unless_null _lex_param_1, fallback1654
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5009
  fallback1654:
    set $P5008, _lex_param_1["termalt"]
    unless_null $P5008, fallback1655
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5010
  fallback1655:
    set $N5001, $P5008
    set $N5002, 1
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if511_end1653 
.annotate 'line', 343
.annotate 'line', 344
    nqp_get_sc_object $P5014, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Regex"]
    unless_null $P5011, fallback1656
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback1656:
    $P5016 = $P5011."new"("conjseq" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5016
    unless_null _lex_param_1, fallback1657
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5021
  fallback1657:
    set $P5020, _lex_param_1["termalt"]
    unless_null $P5020, fallback1658
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5022
  fallback1658:
    set $P5017, $P5020
    iter $P5019, $P5020
  for_next1659:
    unless $P5019, for_done1661
    shift $P5024, $P5019
  for_redo1660:
    .const 'Sub' $P5023 = 'cuid_206_1360426899.567' 
    capture_lex $P5023
    $P5017 = $P5023($P5024)
    goto for_next1659
  for_done1661:
  if511_end1653:
.annotate 'line', 347
    $P5025 = _lex_param_1."!make"($P101)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_206_1360426899.567") :anon :lex :outer("cuid_116_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 345
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termalt" :subid("cuid_117_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 350
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5026 = 'cuid_207_1360426899.567' 
    capture_lex $P5026 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 351
    unless_null _lex_param_1, fallback1662
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5004
  fallback1662:
    set $P5003, _lex_param_1["termconj"]
    unless_null $P5003, fallback1663
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5005
  fallback1663:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback1664
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback1664:
    $P5007 = $P5002."ast"()
    set $P101, $P5007
    unless_null _lex_param_1, fallback1667
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5009
  fallback1667:
    set $P5008, _lex_param_1["termconj"]
    unless_null $P5008, fallback1668
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5010
  fallback1668:
    set $N5001, $P5008
    set $N5002, 1
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if512_end1666 
.annotate 'line', 352
.annotate 'line', 353
    nqp_get_sc_object $P5014, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Regex"]
    unless_null $P5011, fallback1669
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback1669:
    $P5016 = $P5011."new"("alt" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5016
    unless_null _lex_param_1, fallback1670
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5021
  fallback1670:
    set $P5020, _lex_param_1["termconj"]
    unless_null $P5020, fallback1671
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5022
  fallback1671:
    set $P5017, $P5020
    iter $P5019, $P5020
  for_next1672:
    unless $P5019, for_done1674
    shift $P5024, $P5019
  for_redo1673:
    .const 'Sub' $P5023 = 'cuid_207_1360426899.567' 
    capture_lex $P5023
    $P5017 = $P5023($P5024)
    goto for_next1672
  for_done1674:
  if512_end1666:
.annotate 'line', 356
    $P5025 = _lex_param_1."!make"($P101)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_207_1360426899.567") :anon :lex :outer("cuid_117_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 354
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termconj" :subid("cuid_118_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 359
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5026 = 'cuid_208_1360426899.567' 
    capture_lex $P5026 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 360
    unless_null _lex_param_1, fallback1675
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5004
  fallback1675:
    set $P5003, _lex_param_1["termish"]
    unless_null $P5003, fallback1676
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5005
  fallback1676:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback1677
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback1677:
    $P5007 = $P5002."ast"()
    set $P101, $P5007
    unless_null _lex_param_1, fallback1680
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5009
  fallback1680:
    set $P5008, _lex_param_1["termish"]
    unless_null $P5008, fallback1681
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5010
  fallback1681:
    set $N5001, $P5008
    set $N5002, 1
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if513_end1679 
.annotate 'line', 361
.annotate 'line', 362
    nqp_get_sc_object $P5014, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Regex"]
    unless_null $P5011, fallback1682
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback1682:
    $P5016 = $P5011."new"("conj" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5016
    unless_null _lex_param_1, fallback1683
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5021
  fallback1683:
    set $P5020, _lex_param_1["termish"]
    unless_null $P5020, fallback1684
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5022
  fallback1684:
    set $P5017, $P5020
    iter $P5019, $P5020
  for_next1685:
    unless $P5019, for_done1687
    shift $P5024, $P5019
  for_redo1686:
    .const 'Sub' $P5023 = 'cuid_208_1360426899.567' 
    capture_lex $P5023
    $P5017 = $P5023($P5024)
    goto for_next1685
  for_done1687:
  if513_end1679:
.annotate 'line', 365
    $P5025 = _lex_param_1."!make"($P101)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_208_1360426899.567") :anon :lex :outer("cuid_118_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 363
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termish" :subid("cuid_119_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 368
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5019 = 'cuid_209_1360426899.567' 
    capture_lex $P5019 
    .lex "$qast", $P101 
    .lex "$lastlit", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
.annotate 'line', 369
    nqp_get_sc_object $P5006, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5005, $P5006, "QAST"
    get_who $P5004, $P5005
    set $P5003, $P5004["Regex"]
    unless_null $P5003, fallback1688
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5007
  fallback1688:
    $P5008 = $P5003."new"("concat" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5008
    box $P5009, 0
    set $P102, $P5009
    unless_null _lex_param_1, fallback1689
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5014
  fallback1689:
    set $P5013, _lex_param_1["noun"]
    unless_null $P5013, fallback1690
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5015
  fallback1690:
    set $P5010, $P5013
    iter $P5012, $P5013
  for_next1709:
    unless $P5012, for_done1711
    shift $P5017, $P5012
  for_redo1710:
    .const 'Sub' $P5016 = 'cuid_209_1360426899.567' 
    capture_lex $P5016
    $P5010 = $P5016($P5017)
    goto for_next1709
  for_done1711:
.annotate 'line', 386
    $P5018 = _lex_param_1."!make"($P101)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_209_1360426899.567") :anon :lex :outer("cuid_119_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 371
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 372
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
    set $P5038, $P101
    unless $P101 goto if514_end1692 
.annotate 'line', 373
    find_lex $P5003, "$lastlit"
    set $P5005, $P5003
    unless $P5003 goto if517_end1698 
.annotate 'line', 374
    $P5004 = $P101."rxtype"()
    set $S5001, $P5004
    iseq $I5001, $S5001, "literal"
    box $P5006, $I5001
    set $P5005, $P5006
  if517_end1698:
    set $P5015, $P5005
    unless $P5005 goto if516_end1696 
.annotate 'line', 375
    nqp_get_sc_object $P5010, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Node"]
    unless_null $P5007, fallback1699
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5011
  fallback1699:
    set $P5012, $P101[0]
    unless_null $P5012, fallback1700
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5013
  fallback1700:
    $P5014 = $P5007."ACCEPTS"($P5012)
    isfalse $I5002, $P5014
    box $P5016, $I5002
    set $P5015, $P5016
  if516_end1696:
    unless $P5015 goto if515_else1693 
    find_lex $P5017, "$lastlit"
    find_lex $P5019, "$lastlit"
    set $P5018, $P5019[0]
    unless_null $P5018, fallback1701
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5018, $P5020
  fallback1701:
    set $S5003, $P5018
    set $P5021, $P101[0]
    unless_null $P5021, fallback1702
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5021, $P5022
  fallback1702:
    set $S5004, $P5021
    concat $S5002, $S5003, $S5004
    box $P5023, $S5002
    set $P5017[0], $P5023
    set $P5037, $P5023
    goto if515_end1694
  if515_else1693:
.annotate 'line', 378
.annotate 'line', 379
    find_lex $P5024, "$qast"
    $P5025 = _lex_param_0."ast"()
    $P5024."push"($P5025)
.annotate 'line', 380
    $P5026 = $P101."rxtype"()
    set $S5005, $P5026
    iseq $I5003, $S5005, "literal"
    set $I5005, $I5003
    unless $I5003 goto if519_end1706 
.annotate 'line', 381
    nqp_get_sc_object $P5030, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Node"]
    unless_null $P5027, fallback1707
    nqp_get_sc_object $P5031, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5027, $P5031
  fallback1707:
    set $P5032, $P101[0]
    unless_null $P5032, fallback1708
    nqp_get_sc_object $P5033, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5032, $P5033
  fallback1708:
    $P5034 = $P5027."ACCEPTS"($P5032)
    isfalse $I5004, $P5034
    set $I5005, $I5004
  if519_end1706:
    unless $I5005 goto if518_else1703 
    set $P5035, $P101
    goto if518_end1704
  if518_else1703:
    box $P5036, 0
    set $P5035, $P5036
  if518_end1704:
    store_lex "$lastlit", $P5035
    set $P5037, $P5035
  if515_end1694:
    set $P5038, $P5037
  if514_end1692:
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "quantified_atom" :subid("cuid_120_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 389
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5084 = 'cuid_210_1360426899.567' 
    capture_lex $P5084 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 390
    unless_null _lex_param_1, fallback1712
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5003
  fallback1712:
    set $P5002, _lex_param_1["atom"]
    unless_null $P5002, fallback1713
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5004
  fallback1713:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
    unless_null _lex_param_1, fallback1716
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5007
  fallback1716:
    set $P5006, _lex_param_1["quantifier"]
    unless_null $P5006, fallback1717
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5008
  fallback1717:
    unless $P5006 goto if520_end1715 
    .const 'Sub' $P5009 = 'cuid_210_1360426899.567' 
    capture_lex $P5009
    $P5010 = $P5009()
  if520_end1715:
    unless_null _lex_param_1, fallback1723
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5012
  fallback1723:
    set $P5011, _lex_param_1["separator"]
    unless_null $P5011, fallback1724
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5013
  fallback1724:
    unless $P5011 goto if521_end1722 
.annotate 'line', 396
.annotate 'line', 397
    $P5014 = $P101."rxtype"()
    set $S5001, $P5014
    iseq $I5001, $S5001, "quant"
    if $I5001 goto unless522_end1726 
.annotate 'line', 398
    $P5015 = _lex_param_1."CURSOR"()
    unless_null _lex_param_1, fallback1727
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5019
  fallback1727:
    set $P5018, _lex_param_1["separator"]
    unless_null $P5018, fallback1728
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5018, $P5020
  fallback1728:
    set $P5017, $P5018[0]
    unless_null $P5017, fallback1729
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5021
  fallback1729:
    set $P5016, $P5017["septype"]
    unless_null $P5016, fallback1730
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5016, $P5022
  fallback1730:
    set $S5004, $P5016
    concat $S5003, "'", $S5004
    concat $S5002, $S5003, "' many only be used immediately following a quantifier"
    $P5023 = $P5015."panic"($S5002)
  unless522_end1726:
.annotate 'line', 401
    unless_null _lex_param_1, fallback1731
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5026
  fallback1731:
    set $P5025, _lex_param_1["separator"]
    unless_null $P5025, fallback1732
    nqp_get_sc_object $P5027, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5025, $P5027
  fallback1732:
    set $P5024, $P5025[0]
    unless_null $P5024, fallback1733
    nqp_get_sc_object $P5028, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5024, $P5028
  fallback1733:
    $P5029 = $P5024."ast"()
    $P101."push"($P5029)
    unless_null _lex_param_1, fallback1736
    nqp_get_sc_object $P5033, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5033
  fallback1736:
    set $P5032, _lex_param_1["separator"]
    unless_null $P5032, fallback1737
    nqp_get_sc_object $P5034, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5032, $P5034
  fallback1737:
    set $P5031, $P5032[0]
    unless_null $P5031, fallback1738
    nqp_get_sc_object $P5035, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5031, $P5035
  fallback1738:
    set $P5030, $P5031["septype"]
    unless_null $P5030, fallback1739
    nqp_get_sc_object $P5036, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5030, $P5036
  fallback1739:
    set $S5005, $P5030
    iseq $I5002, $S5005, "%%"
    box $P5056, $I5002
    set $P5055, $P5056
    unless $I5002 goto if523_end1735 
.annotate 'line', 402
.annotate 'line', 403
    nqp_get_sc_object $P5040, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Regex"]
    unless_null $P5037, fallback1740
    nqp_get_sc_object $P5041, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5037, $P5041
  fallback1740:
.annotate 'line', 404
    nqp_get_sc_object $P5045, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Regex"]
    unless_null $P5042, fallback1741
    nqp_get_sc_object $P5046, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5042, $P5046
  fallback1741:
    unless_null _lex_param_1, fallback1742
    nqp_get_sc_object $P5049, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5049
  fallback1742:
    set $P5048, _lex_param_1["separator"]
    unless_null $P5048, fallback1743
    nqp_get_sc_object $P5050, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5048, $P5050
  fallback1743:
    set $P5047, $P5048[0]
    unless_null $P5047, fallback1744
    nqp_get_sc_object $P5051, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5047, $P5051
  fallback1744:
    $P5052 = $P5047."ast"()
    $P5053 = $P5042."new"($P5052, "quant" :named("rxtype"), 0 :named("min"), 1 :named("max"))
    $P5054 = $P5037."new"($P101, $P5053, "concat" :named("rxtype"))
    set $P101, $P5054
    set $P5055, $P101
  if523_end1735:
  if521_end1722:
    set $P5058, $P101
    unless $P101 goto if526_end1750 
.annotate 'line', 407
    $P5057 = $P101."backtrack"()
    isfalse $I5003, $P5057
    box $P5059, $I5003
    set $P5058, $P5059
  if526_end1750:
    set $P5081, $P5058
    unless $P5058 goto if525_end1748 
    find_dynamic_lex $P5061, "%*RX"
    unless_null $P5061, fallback1753
    nqp_get_sc_object $P5064, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5063, $P5064
    set $P5062, $P5063["%RX"]
    unless_null $P5062, fallback1754
    nqp_get_sc_object $P5066, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5065, $P5066
    new $P5067, 'Hash'
    set $P5065["%RX"], $P5067
    set $P5062, $P5067
  fallback1754:
    unless_null $P5062, vivi_5281755
    die "Contextual %*RX not found"
    box $P5068, "Contextual %*RX not found"
    set $P5062, $P5068
  vivi_5281755:
    set $P5061, $P5062
  fallback1753:
    set $P5060, $P5061["r"]
    unless_null $P5060, fallback1756
    nqp_get_sc_object $P5069, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5060, $P5069
  fallback1756:
    set $P5080, $P5060
    if $P5060 goto unless527_end1752 
    unless_null _lex_param_1, fallback1759
    nqp_get_sc_object $P5071, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5071
  fallback1759:
    set $P5070, _lex_param_1["backmod"]
    unless_null $P5070, fallback1760
    nqp_get_sc_object $P5072, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5070, $P5072
  fallback1760:
    set $P5078, $P5070
    unless $P5070 goto if529_end1758 
    unless_null _lex_param_1, fallback1761
    nqp_get_sc_object $P5075, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5075
  fallback1761:
    set $P5074, _lex_param_1["backmod"]
    unless_null $P5074, fallback1762
    nqp_get_sc_object $P5076, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5074, $P5076
  fallback1762:
    set $P5073, $P5074[0]
    unless_null $P5073, fallback1763
    nqp_get_sc_object $P5077, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5073, $P5077
  fallback1763:
    set $S5006, $P5073
    iseq $I5004, $S5006, ":"
    box $P5079, $I5004
    set $P5078, $P5079
  if529_end1758:
    set $P5080, $P5078
  unless527_end1752:
    set $P5081, $P5080
  if525_end1748:
    unless $P5081 goto if524_end1746 
    $P5082 = $P101."backtrack"("r")
  if524_end1746:
.annotate 'line', 409
    $P5083 = _lex_param_1."!make"($P101)
    .return ($P5083) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_210_1360426899.567") :anon :lex :outer("cuid_120_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 391
    .lex "$ast", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 392
    find_lex $P5004, "$/"
    unless_null $P5004, fallback1718
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5005
  fallback1718:
    set $P5003, $P5004["quantifier"]
    unless_null $P5003, fallback1719
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5006
  fallback1719:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback1720
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5007
  fallback1720:
    $P5008 = $P5002."ast"()
    set $P101, $P5008
.annotate 'line', 393
    find_lex $P5009, "$qast"
    $P101."unshift"($P5009)
    store_lex "$qast", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "separator" :subid("cuid_121_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 412
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 413
    unless_null _lex_param_1, fallback1764
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback1764:
    set $P5001, _lex_param_1["quantified_atom"]
    unless_null $P5001, fallback1765
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback1765:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "atom" :subid("cuid_122_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 416
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5012 = 'cuid_211_1360426899.567' 
    capture_lex $P5012 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback1768
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback1768:
    set $P5001, _lex_param_1["metachar"]
    unless_null $P5001, fallback1769
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback1769:
    unless $P5001 goto if530_else1766 
.annotate 'line', 417
.annotate 'line', 418
    unless_null _lex_param_1, fallback1770
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5005
  fallback1770:
    set $P5004, _lex_param_1["metachar"]
    unless_null $P5004, fallback1771
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5006
  fallback1771:
    $P5007 = $P5004."ast"()
    $P5008 = _lex_param_1."!make"($P5007)
    set $P5011, $P5008
    goto if530_end1767
  if530_else1766:
    .const 'Sub' $P5009 = 'cuid_211_1360426899.567' 
    capture_lex $P5009
    $P5010 = $P5009()
    set $P5011, $P5010
  if530_end1767:
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_211_1360426899.567") :anon :lex :outer("cuid_122_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 420
    .lex "$qast", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 421
    nqp_get_sc_object $P5005, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1772
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback1772:
    find_lex $P5007, "$/"
    set $S5001, $P5007
    find_lex $P5008, "$/"
    $P5009 = $P5002."new"($S5001, "literal" :named("rxtype"), $P5008 :named("node"))
    set $P101, $P5009
    find_dynamic_lex $P5011, "%*RX"
    unless_null $P5011, fallback1775
    nqp_get_sc_object $P5014, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["%RX"]
    unless_null $P5012, fallback1776
    nqp_get_sc_object $P5016, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5015, $P5016
    new $P5017, 'Hash'
    set $P5015["%RX"], $P5017
    set $P5012, $P5017
  fallback1776:
    unless_null $P5012, vivi_5321777
    die "Contextual %*RX not found"
    box $P5018, "Contextual %*RX not found"
    set $P5012, $P5018
  vivi_5321777:
    set $P5011, $P5012
  fallback1775:
    set $P5010, $P5011["i"]
    unless_null $P5010, fallback1778
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5019
  fallback1778:
    unless $P5010 goto if531_end1774 
.annotate 'line', 422
    $P5020 = $P101."subtype"("ignorecase")
  if531_end1774:
.annotate 'line', 423
    find_dynamic_lex $P5021, "$/"
    $P5022 = $P5021."!make"($P101)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<*>" :subid("cuid_123_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 427
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 428
    nqp_get_sc_object $P5005, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1779
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback1779:
    $P5007 = $P5002."new"("quant" :named("rxtype"), 0 :named("min"), -1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5007
.annotate 'line', 429
    unless_null _lex_param_1, fallback1780
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5009
  fallback1780:
    set $P5008, _lex_param_1["backmod"]
    unless_null $P5008, fallback1781
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5010
  fallback1781:
    $P5011 = "&backmod"($P101, $P5008)
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<+>" :subid("cuid_124_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 432
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 433
    nqp_get_sc_object $P5005, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1782
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback1782:
    $P5007 = $P5002."new"("quant" :named("rxtype"), 1 :named("min"), -1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5007
.annotate 'line', 434
    unless_null _lex_param_1, fallback1783
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5009
  fallback1783:
    set $P5008, _lex_param_1["backmod"]
    unless_null $P5008, fallback1784
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5010
  fallback1784:
    $P5011 = "&backmod"($P101, $P5008)
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<?>" :subid("cuid_125_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 437
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 438
    nqp_get_sc_object $P5005, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1785
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback1785:
    $P5007 = $P5002."new"("quant" :named("rxtype"), 0 :named("min"), 1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5007
.annotate 'line', 439
    unless_null _lex_param_1, fallback1786
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5009
  fallback1786:
    set $P5008, _lex_param_1["backmod"]
    unless_null $P5008, fallback1787
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5010
  fallback1787:
    $P5011 = "&backmod"($P101, $P5008)
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<**>" :subid("cuid_126_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 442
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 444
    nqp_get_sc_object $P5005, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1788
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback1788:
    unless_null _lex_param_1, fallback1789
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5008
  fallback1789:
    set $P5007, _lex_param_1["min"]
    unless_null $P5007, fallback1790
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5009
  fallback1790:
    set $N5001, $P5007
    $P5010 = $P5002."new"("quant" :named("rxtype"), $N5001 :named("min"), -1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5010
    unless_null _lex_param_1, fallback1793
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5012
  fallback1793:
    set $P5011, _lex_param_1["max"]
    unless_null $P5011, fallback1794
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5013
  fallback1794:
    isfalse $I5001, $P5011
    unless $I5001 goto if533_else1791 
.annotate 'line', 445
    unless_null _lex_param_1, fallback1795
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5015
  fallback1795:
    set $P5014, _lex_param_1["min"]
    unless_null $P5014, fallback1796
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5016
  fallback1796:
    set $N5002, $P5014
    $P5017 = $P101."max"($N5002)
    goto if533_end1792
  if533_else1791:
    unless_null _lex_param_1, fallback1799
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5020
  fallback1799:
    set $P5019, _lex_param_1["max"]
    unless_null $P5019, fallback1800
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5019, $P5021
  fallback1800:
    set $P5018, $P5019[0]
    unless_null $P5018, fallback1801
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5018, $P5022
  fallback1801:
    set $S5001, $P5018
    isne $I5002, $S5001, "*"
    box $P5030, $I5002
    set $P5029, $P5030
    unless $I5002 goto if534_end1798 
.annotate 'line', 446
    unless_null _lex_param_1, fallback1802
    nqp_get_sc_object $P5025, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5025
  fallback1802:
    set $P5024, _lex_param_1["max"]
    unless_null $P5024, fallback1803
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5024, $P5026
  fallback1803:
    set $P5023, $P5024[0]
    unless_null $P5023, fallback1804
    nqp_get_sc_object $P5027, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5023, $P5027
  fallback1804:
    set $N5003, $P5023
    $P5028 = $P101."max"($N5003)
    set $P5029, $P5028
  if534_end1798:
  if533_end1792:
.annotate 'line', 447
    unless_null _lex_param_1, fallback1805
    nqp_get_sc_object $P5032, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5032
  fallback1805:
    set $P5031, _lex_param_1["backmod"]
    unless_null $P5031, fallback1806
    nqp_get_sc_object $P5033, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5031, $P5033
  fallback1806:
    $P5034 = "&backmod"($P101, $P5031)
    $P5035 = _lex_param_1."!make"($P5034)
    .return ($P5035) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<ws>" :subid("cuid_127_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 450
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    find_dynamic_lex $P5003, "%*RX"
    unless_null $P5003, fallback1809
    nqp_get_sc_object $P5006, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%RX"]
    unless_null $P5004, fallback1810
    nqp_get_sc_object $P5008, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%RX"], $P5009
    set $P5004, $P5009
  fallback1810:
    unless_null $P5004, vivi_5361811
    die "Contextual %*RX not found"
    box $P5010, "Contextual %*RX not found"
    set $P5004, $P5010
  vivi_5361811:
    set $P5003, $P5004
  fallback1809:
    set $P5002, $P5003["s"]
    unless_null $P5002, fallback1812
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5011
  fallback1812:
    unless $P5002 goto if535_else1807 
.annotate 'line', 452
    nqp_get_sc_object $P5015, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Regex"]
    unless_null $P5012, fallback1813
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5016
  fallback1813:
.annotate 'line', 453
    nqp_get_sc_object $P5020, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Node"]
    unless_null $P5017, fallback1814
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5021
  fallback1814:
    nqp_get_sc_object $P5025, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["SVal"]
    unless_null $P5022, fallback1815
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5022, $P5026
  fallback1815:
    $P5027 = $P5022."new"("ws" :named("value"))
    $P5028 = $P5017."new"($P5027)
    $P5029 = $P5012."new"($P5028, "ws" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    set $P5030, $P5029
    goto if535_end1808
  if535_else1807:
    box $P5031, 0
    set $P5030, $P5031
  if535_end1808:
    set $P101, $P5030
.annotate 'line', 455
    $P5032 = _lex_param_1."!make"($P101)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<[ ]>" :subid("cuid_128_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 458
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 459
    unless_null _lex_param_1, fallback1816
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback1816:
    set $P5001, _lex_param_1["nibbler"]
    unless_null $P5001, fallback1817
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback1817:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<( )>" :subid("cuid_129_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 462
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$subpast", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
.annotate 'line', 463
    nqp_get_sc_object $P5006, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5005, $P5006, "QAST"
    get_who $P5004, $P5005
    set $P5003, $P5004["Node"]
    unless_null $P5003, fallback1818
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5007
  fallback1818:
    nqp_decontainerize $P5008, _lex_param_0
    unless_null _lex_param_1, fallback1819
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5010
  fallback1819:
    set $P5009, _lex_param_1["nibbler"]
    unless_null $P5009, fallback1820
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5011
  fallback1820:
    $P5012 = $P5009."ast"()
    $P5013 = $P5008."qbuildsub"($P5012, 1 :named("anon"), 1 :named("addself"))
    $P5014 = $P5003."new"($P5013)
    set $P101, $P5014
.annotate 'line', 464
    nqp_get_sc_object $P5018, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Regex"]
    unless_null $P5015, fallback1821
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5015, $P5019
  fallback1821:
    unless_null _lex_param_1, fallback1822
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5021
  fallback1822:
    set $P5020, _lex_param_1["nibbler"]
    unless_null $P5020, fallback1823
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5022
  fallback1823:
    $P5023 = $P5020."ast"()
    $P5024 = $P5015."new"($P101, $P5023, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"))
    set $P102, $P5024
.annotate 'line', 466
    $P5025 = _lex_param_1."!make"($P102)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<'>" :subid("cuid_130_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 469
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$quote", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
.annotate 'line', 470
    unless_null _lex_param_1, fallback1824
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5004
  fallback1824:
    set $P5003, _lex_param_1["quote_EXPR"]
    unless_null $P5003, fallback1825
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5005
  fallback1825:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 471
    nqp_get_sc_object $P5010, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["SVal"]
    unless_null $P5007, fallback1828
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5011
  fallback1828:
    $P5012 = $P5007."ACCEPTS"($P101)
    unless $P5012 goto if537_end1827 
    $P5013 = $P101."value"()
    set $P101, $P5013
  if537_end1827:
.annotate 'line', 472
    nqp_get_sc_object $P5017, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Regex"]
    unless_null $P5014, fallback1829
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5018
  fallback1829:
    $P5019 = $P5014."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P102, $P5019
    find_dynamic_lex $P5021, "%*RX"
    unless_null $P5021, fallback1832
    nqp_get_sc_object $P5024, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["%RX"]
    unless_null $P5022, fallback1833
    nqp_get_sc_object $P5026, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5025, $P5026
    new $P5027, 'Hash'
    set $P5025["%RX"], $P5027
    set $P5022, $P5027
  fallback1833:
    unless_null $P5022, vivi_5391834
    die "Contextual %*RX not found"
    box $P5028, "Contextual %*RX not found"
    set $P5022, $P5028
  vivi_5391834:
    set $P5021, $P5022
  fallback1832:
    set $P5020, $P5021["i"]
    unless_null $P5020, fallback1835
    nqp_get_sc_object $P5029, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5029
  fallback1835:
    unless $P5020 goto if538_end1831 
.annotate 'line', 473
    $P5030 = $P102."subtype"("ignorecase")
  if538_end1831:
.annotate 'line', 474
    $P5031 = _lex_param_1."!make"($P102)
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<\">" :subid("cuid_131_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 477
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$quote", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
.annotate 'line', 478
    unless_null _lex_param_1, fallback1836
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5004
  fallback1836:
    set $P5003, _lex_param_1["quote_EXPR"]
    unless_null $P5003, fallback1837
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5005
  fallback1837:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 479
    nqp_get_sc_object $P5010, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["SVal"]
    unless_null $P5007, fallback1840
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5011
  fallback1840:
    $P5012 = $P5007."ACCEPTS"($P101)
    unless $P5012 goto if540_end1839 
    $P5013 = $P101."value"()
    set $P101, $P5013
  if540_end1839:
.annotate 'line', 480
    nqp_get_sc_object $P5017, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Regex"]
    unless_null $P5014, fallback1841
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5018
  fallback1841:
    $P5019 = $P5014."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P102, $P5019
    find_dynamic_lex $P5021, "%*RX"
    unless_null $P5021, fallback1844
    nqp_get_sc_object $P5024, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["%RX"]
    unless_null $P5022, fallback1845
    nqp_get_sc_object $P5026, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5025, $P5026
    new $P5027, 'Hash'
    set $P5025["%RX"], $P5027
    set $P5022, $P5027
  fallback1845:
    unless_null $P5022, vivi_5421846
    die "Contextual %*RX not found"
    box $P5028, "Contextual %*RX not found"
    set $P5022, $P5028
  vivi_5421846:
    set $P5021, $P5022
  fallback1844:
    set $P5020, $P5021["i"]
    unless_null $P5020, fallback1847
    nqp_get_sc_object $P5029, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5029
  fallback1847:
    unless $P5020 goto if541_end1843 
.annotate 'line', 481
    $P5030 = $P102."subtype"("ignorecase")
  if541_end1843:
.annotate 'line', 482
    $P5031 = _lex_param_1."!make"($P102)
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<.>" :subid("cuid_132_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 485
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 486
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback1848
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback1848:
    $P5006 = $P5001."new"("cclass" :named("rxtype"), "." :named("subtype"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^>" :subid("cuid_133_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 489
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 490
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback1849
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback1849:
    $P5006 = $P5001."new"("anchor" :named("rxtype"), "bos" :named("subtype"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^^>" :subid("cuid_134_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 493
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 494
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback1850
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback1850:
    $P5006 = $P5001."new"("anchor" :named("rxtype"), "bol" :named("subtype"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$>" :subid("cuid_135_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 497
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 498
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback1851
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback1851:
    $P5006 = $P5001."new"("anchor" :named("rxtype"), "eos" :named("subtype"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$$>" :subid("cuid_136_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 501
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 502
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback1852
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback1852:
    $P5006 = $P5001."new"("anchor" :named("rxtype"), "eol" :named("subtype"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<lwb>" :subid("cuid_137_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 505
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 506
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback1853
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback1853:
    $P5006 = $P5001."new"("anchor" :named("rxtype"), "lwb" :named("subtype"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<rwb>" :subid("cuid_138_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 509
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 510
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback1854
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback1854:
    $P5006 = $P5001."new"("anchor" :named("rxtype"), "rwb" :named("subtype"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<from>" :subid("cuid_139_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 513
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 514
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback1855
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback1855:
.annotate 'line', 516
    nqp_get_sc_object $P5009, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback1856
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5010
  fallback1856:
.annotate 'line', 517
    nqp_get_sc_object $P5014, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback1857
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback1857:
    $P5016 = $P5011."new"("!LITERAL" :named("value"))
.annotate 'line', 518
    nqp_get_sc_object $P5020, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["SVal"]
    unless_null $P5017, fallback1858
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5021
  fallback1858:
    $P5022 = $P5017."new"("" :named("value"))
    $P5023 = $P5006."new"($P5016, $P5022)
    $P5024 = $P5001."new"($P5023, "subrule" :named("rxtype"), "capture" :named("subtype"), "r" :named("backtrack"), "$!from" :named("name"), _lex_param_1 :named("node"))
    $P5025 = _lex_param_1."!make"($P5024)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<to>" :subid("cuid_140_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 521
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 522
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback1859
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback1859:
.annotate 'line', 524
    nqp_get_sc_object $P5009, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback1860
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5010
  fallback1860:
.annotate 'line', 525
    nqp_get_sc_object $P5014, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback1861
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback1861:
    $P5016 = $P5011."new"("!LITERAL" :named("value"))
.annotate 'line', 526
    nqp_get_sc_object $P5020, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["SVal"]
    unless_null $P5017, fallback1862
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5021
  fallback1862:
    $P5022 = $P5017."new"("" :named("value"))
    $P5023 = $P5006."new"($P5016, $P5022)
    $P5024 = $P5001."new"($P5023, "subrule" :named("rxtype"), "capture" :named("subtype"), "r" :named("backtrack"), "$!to" :named("name"), _lex_param_1 :named("node"))
    $P5025 = _lex_param_1."!make"($P5024)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<bs>" :subid("cuid_141_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 529
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 530
    unless_null _lex_param_1, fallback1863
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback1863:
    set $P5001, _lex_param_1["backslash"]
    unless_null $P5001, fallback1864
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback1864:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<assert>" :subid("cuid_142_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 533
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 534
    unless_null _lex_param_1, fallback1865
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback1865:
    set $P5001, _lex_param_1["assertion"]
    unless_null $P5001, fallback1866
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback1866:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<var>" :subid("cuid_143_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 537
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "$name", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback1869
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5004
  fallback1869:
    set $P5003, _lex_param_1["pos"]
    unless_null $P5003, fallback1870
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5005
  fallback1870:
    unless $P5003 goto if543_else1867 
    unless_null _lex_param_1, fallback1871
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5007
  fallback1871:
    set $P5006, _lex_param_1["pos"]
    unless_null $P5006, fallback1872
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5008
  fallback1872:
    set $N5001, $P5006
    box $P5013, $N5001
    set $P5012, $P5013
    goto if543_end1868
  if543_else1867:
    unless_null _lex_param_1, fallback1873
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5010
  fallback1873:
    set $P5009, _lex_param_1["name"]
    unless_null $P5009, fallback1874
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5011
  fallback1874:
    set $S5001, $P5009
    box $P5014, $S5001
    set $P5012, $P5014
  if543_end1868:
    set $P102, $P5012
    unless_null _lex_param_1, fallback1877
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5016
  fallback1877:
    set $P5015, _lex_param_1["quantified_atom"]
    unless_null $P5015, fallback1878
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5015, $P5017
  fallback1878:
    unless $P5015 goto if544_else1875 
.annotate 'line', 540
.annotate 'line', 541
    unless_null _lex_param_1, fallback1879
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5020
  fallback1879:
    set $P5019, _lex_param_1["quantified_atom"]
    unless_null $P5019, fallback1880
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5019, $P5021
  fallback1880:
    set $P5018, $P5019[0]
    unless_null $P5018, fallback1881
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5018, $P5022
  fallback1881:
    $P5023 = $P5018."ast"()
    set $P101, $P5023
.annotate 'line', 542
    $P5024 = $P101."rxtype"()
    set $S5002, $P5024
    iseq $I5001, $S5002, "quant"
    set $I5003, $I5001
    unless $I5001 goto if546_end1885 
    set $P5025, $P101[0]
    unless_null $P5025, fallback1886
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5025, $P5026
  fallback1886:
    $P5027 = $P5025."rxtype"()
    set $S5003, $P5027
    iseq $I5002, $S5003, "subrule"
    set $I5003, $I5002
  if546_end1885:
    unless $I5003 goto if545_else1882 
.annotate 'line', 543
    nqp_decontainerize $P5028, _lex_param_0
    set $P5029, $P101[0]
    unless_null $P5029, fallback1887
    nqp_get_sc_object $P5030, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5029, $P5030
  fallback1887:
    $P5031 = $P5028."subrule_alias"($P5029, $P102)
    set $P5042, $P5031
    goto if545_end1883
  if545_else1882:
.annotate 'line', 545
    $P5032 = $P101."rxtype"()
    set $S5004, $P5032
    iseq $I5004, $S5004, "subrule"
    unless $I5004 goto if547_else1888 
.annotate 'line', 546
    nqp_decontainerize $P5033, _lex_param_0
    $P5034 = $P5033."subrule_alias"($P101, $P102)
    set $P5041, $P5034
    goto if547_end1889
  if547_else1888:
.annotate 'line', 548
.annotate 'line', 549
    nqp_get_sc_object $P5038, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Regex"]
    unless_null $P5035, fallback1890
    nqp_get_sc_object $P5039, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5035, $P5039
  fallback1890:
    $P5040 = $P5035."new"($P101, $P102 :named("name"), "subcapture" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5040
    set $P5041, $P101
  if547_end1889:
    set $P5042, $P5041
  if545_end1883:
    goto if544_end1876
  if544_else1875:
.annotate 'line', 553
.annotate 'line', 554
    nqp_get_sc_object $P5046, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Regex"]
    unless_null $P5043, fallback1891
    nqp_get_sc_object $P5047, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5043, $P5047
  fallback1891:
.annotate 'line', 555
    nqp_get_sc_object $P5051, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Node"]
    unless_null $P5048, fallback1892
    nqp_get_sc_object $P5052, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5048, $P5052
  fallback1892:
.annotate 'line', 556
    nqp_get_sc_object $P5056, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["SVal"]
    unless_null $P5053, fallback1893
    nqp_get_sc_object $P5057, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5053, $P5057
  fallback1893:
    $P5058 = $P5053."new"("!BACKREF" :named("value"))
.annotate 'line', 557
    nqp_get_sc_object $P5062, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5061, $P5062, "QAST"
    get_who $P5060, $P5061
    set $P5059, $P5060["SVal"]
    unless_null $P5059, fallback1894
    nqp_get_sc_object $P5063, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5059, $P5063
  fallback1894:
    $P5064 = $P5059."new"($P102 :named("value"))
    $P5065 = $P5048."new"($P5058, $P5064)
    $P5066 = $P5043."new"($P5065, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    set $P101, $P5066
  if544_end1876:
.annotate 'line', 559
    $P5067 = _lex_param_1."!make"($P101)
    .return ($P5067) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<~>" :subid("cuid_144_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 562
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@dba", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_dynamic_lex $P5002, "%*RX"
    unless_null $P5002, fallback1897
    nqp_get_sc_object $P5005, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["%RX"]
    unless_null $P5003, fallback1898
    nqp_get_sc_object $P5007, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5006, $P5007
    new $P5008, 'Hash'
    set $P5006["%RX"], $P5008
    set $P5003, $P5008
  fallback1898:
    unless_null $P5003, vivi_5491899
    die "Contextual %*RX not found"
    box $P5009, "Contextual %*RX not found"
    set $P5003, $P5009
  vivi_5491899:
    set $P5002, $P5003
  fallback1897:
    exists $I5001, $P5002["dba"]
    unless $I5001 goto if548_end1896 
    new $P5010, 'ResizablePMCArray'
.annotate 'line', 563
    nqp_get_sc_object $P5014, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback1900
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback1900:
    find_dynamic_lex $P5017, "%*RX"
    unless_null $P5017, fallback1901
    nqp_get_sc_object $P5020, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5019, $P5020
    set $P5018, $P5019["%RX"]
    unless_null $P5018, fallback1902
    nqp_get_sc_object $P5022, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5021, $P5022
    new $P5023, 'Hash'
    set $P5021["%RX"], $P5023
    set $P5018, $P5023
  fallback1902:
    unless_null $P5018, vivi_5501903
    die "Contextual %*RX not found"
    box $P5024, "Contextual %*RX not found"
    set $P5018, $P5024
  vivi_5501903:
    set $P5017, $P5018
  fallback1901:
    set $P5016, $P5017["dba"]
    unless_null $P5016, fallback1904
    nqp_get_sc_object $P5025, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5016, $P5025
  fallback1904:
    $P5026 = $P5011."new"($P5016 :named("value"))
    push $P5010, $P5026
    set $P101, $P5010
  if548_end1896:
.annotate 'line', 564
    nqp_get_sc_object $P5030, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Regex"]
    unless_null $P5027, fallback1905
    nqp_get_sc_object $P5031, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5027, $P5031
  fallback1905:
.annotate 'line', 565
    unless_null _lex_param_1, fallback1906
    nqp_get_sc_object $P5033, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5033
  fallback1906:
    set $P5032, _lex_param_1["EXPR"]
    unless_null $P5032, fallback1907
    nqp_get_sc_object $P5034, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5032, $P5034
  fallback1907:
    $P5035 = $P5032."ast"()
.annotate 'line', 566
    nqp_get_sc_object $P5039, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Regex"]
    unless_null $P5036, fallback1908
    nqp_get_sc_object $P5040, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5036, $P5040
  fallback1908:
.annotate 'line', 567
    unless_null _lex_param_1, fallback1909
    nqp_get_sc_object $P5042, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5042
  fallback1909:
    set $P5041, _lex_param_1["GOAL"]
    unless_null $P5041, fallback1910
    nqp_get_sc_object $P5043, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5041, $P5043
  fallback1910:
    $P5044 = $P5041."ast"()
.annotate 'line', 568
    nqp_get_sc_object $P5048, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["Regex"]
    unless_null $P5045, fallback1911
    nqp_get_sc_object $P5049, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5045, $P5049
  fallback1911:
.annotate 'line', 569
    nqp_get_sc_object $P5053, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["Node"]
    unless_null $P5050, fallback1912
    nqp_get_sc_object $P5054, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5050, $P5054
  fallback1912:
.annotate 'line', 570
    nqp_get_sc_object $P5058, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5057, $P5058, "QAST"
    get_who $P5056, $P5057
    set $P5055, $P5056["SVal"]
    unless_null $P5055, fallback1913
    nqp_get_sc_object $P5059, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5055, $P5059
  fallback1913:
    $P5060 = $P5055."new"("FAILGOAL" :named("value"))
.annotate 'line', 571
    nqp_get_sc_object $P5064, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["SVal"]
    unless_null $P5061, fallback1914
    nqp_get_sc_object $P5065, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5061, $P5065
  fallback1914:
    unless_null _lex_param_1, fallback1915
    nqp_get_sc_object $P5067, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5067
  fallback1915:
    set $P5066, _lex_param_1["GOAL"]
    unless_null $P5066, fallback1916
    nqp_get_sc_object $P5068, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5066, $P5068
  fallback1916:
    set $S5001, $P5066
    $P5069 = $P5061."new"($S5001 :named("value"))
    $P5070 = $P5050."new"($P5060, $P5069, $P101 :flat)
    $P5071 = $P5045."new"($P5070, "subrule" :named("rxtype"), "method" :named("subtype"))
    $P5072 = $P5036."new"($P5044, $P5071, "altseq" :named("rxtype"))
    $P5073 = $P5027."new"($P5035, $P5072, "concat" :named("rxtype"))
    $P5074 = _lex_param_1."!make"($P5073)
    .return ($P5074) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<mod>" :subid("cuid_145_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 579
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback1917
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback1917:
    set $P5001, _lex_param_1["mod_internal"]
    unless_null $P5001, fallback1918
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback1918:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<s>" :subid("cuid_146_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 581
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 582
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback1919
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback1919:
    unless_null _lex_param_1, fallback1922
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5007
  fallback1922:
    set $P5006, _lex_param_1["sym"]
    unless_null $P5006, fallback1923
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5008
  fallback1923:
    set $S5001, $P5006
    iseq $I5001, $S5001, "n"
    unless $I5001 goto if551_else1920 
    set $S5003, "nl"
    goto if551_end1921
  if551_else1920:
    unless_null _lex_param_1, fallback1924
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5010
  fallback1924:
    set $P5009, _lex_param_1["sym"]
    unless_null $P5009, fallback1925
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5011
  fallback1925:
    set $S5002, $P5009
    set $S5003, $S5002
  if551_end1921:
    unless_null _lex_param_1, fallback1926
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5013
  fallback1926:
    set $P5012, _lex_param_1["sym"]
    unless_null $P5012, fallback1927
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5014
  fallback1927:
    set $S5004, $P5012
    isle $I5002, $S5004, "Z"
    $P5015 = $P5001."new"(".CCLASS_WHITESPACE", "cclass" :named("rxtype"), $S5003 :named("subtype"), $I5002 :named("negate"), _lex_param_1 :named("node"))
    $P5016 = _lex_param_1."!make"($P5015)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<b>" :subid("cuid_147_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 587
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 588
    nqp_get_sc_object $P5005, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1928
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback1928:
    unless_null _lex_param_1, fallback1929
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5008
  fallback1929:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback1930
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5009
  fallback1930:
    set $S5001, $P5007
    iseq $I5001, $S5001, "B"
    $P5010 = $P5002."new"("\b", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5010
.annotate 'line', 590
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<e>" :subid("cuid_148_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 593
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 594
    nqp_get_sc_object $P5005, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1931
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback1931:
    unless_null _lex_param_1, fallback1932
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5008
  fallback1932:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback1933
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5009
  fallback1933:
    set $S5001, $P5007
    iseq $I5001, $S5001, "E"
    $P5010 = $P5002."new"("\e", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5010
.annotate 'line', 596
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<f>" :subid("cuid_149_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 599
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 600
    nqp_get_sc_object $P5005, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1934
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback1934:
    unless_null _lex_param_1, fallback1935
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5008
  fallback1935:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback1936
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5009
  fallback1936:
    set $S5001, $P5007
    iseq $I5001, $S5001, "F"
    $P5010 = $P5002."new"("\f", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5010
.annotate 'line', 602
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<h>" :subid("cuid_150_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 605
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 606
    nqp_get_sc_object $P5005, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1937
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback1937:
    unless_null _lex_param_1, fallback1938
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5008
  fallback1938:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback1939
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5009
  fallback1939:
    set $S5001, $P5007
    iseq $I5001, $S5001, "H"
    $P5010 = $P5002."new"(utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5010
.annotate 'line', 608
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<r>" :subid("cuid_151_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 611
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 612
    nqp_get_sc_object $P5005, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1940
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback1940:
    unless_null _lex_param_1, fallback1941
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5008
  fallback1941:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback1942
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5009
  fallback1942:
    set $S5001, $P5007
    iseq $I5001, $S5001, "R"
    $P5010 = $P5002."new"("\r", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5010
.annotate 'line', 614
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<t>" :subid("cuid_152_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 617
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 618
    nqp_get_sc_object $P5005, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1943
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback1943:
    unless_null _lex_param_1, fallback1944
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5008
  fallback1944:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback1945
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5009
  fallback1945:
    set $S5001, $P5007
    iseq $I5001, $S5001, "T"
    $P5010 = $P5002."new"("\t", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5010
.annotate 'line', 620
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<v>" :subid("cuid_153_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 623
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 624
    nqp_get_sc_object $P5005, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1946
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback1946:
    unless_null _lex_param_1, fallback1947
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5008
  fallback1947:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback1948
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5009
  fallback1948:
    set $S5001, $P5007
    iseq $I5001, $S5001, "V"
    $P5010 = $P5002."new"(utf8:"\n\x{b}\f\r\x{85}\u2028\u2029", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5010
.annotate 'line', 627
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<o>" :subid("cuid_154_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 630
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$octlit", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 632
    nqp_get_sc_object $P5005, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5004, $P5005, "HLL"
    get_who $P5003, $P5004
    set $P5002, $P5003["Actions"]
    unless_null $P5002, fallback1949
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback1949:
    unless_null _lex_param_1, fallback1952
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5008
  fallback1952:
    set $P5007, _lex_param_1["octint"]
    unless_null $P5007, fallback1953
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5009
  fallback1953:
    set $P5015, $P5007
    if $P5007 goto unless552_end1951 
    unless_null _lex_param_1, fallback1954
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5012
  fallback1954:
    set $P5011, _lex_param_1["octints"]
    unless_null $P5011, fallback1955
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5013
  fallback1955:
    set $P5010, $P5011["octint"]
    unless_null $P5010, fallback1956
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5014
  fallback1956:
    set $P5015, $P5010
  unless552_end1951:
    $P5016 = $P5002."ints_to_string"($P5015)
    set $P101, $P5016
.annotate 'line', 633
    unless_null _lex_param_1, fallback1959
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5018
  fallback1959:
    set $P5017, _lex_param_1["sym"]
    unless_null $P5017, fallback1960
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5019
  fallback1960:
    set $S5001, $P5017
    iseq $I5001, $S5001, "O"
    unless $I5001 goto if553_else1957 
.annotate 'line', 634
    nqp_get_sc_object $P5023, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Regex"]
    unless_null $P5020, fallback1961
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5024
  fallback1961:
    $P5025 = $P5020."new"($P101, "enumcharlist" :named("rxtype"), 1 :named("negate"), _lex_param_1 :named("node"))
    set $P5032, $P5025
    goto if553_end1958
  if553_else1957:
.annotate 'line', 636
    nqp_get_sc_object $P5029, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Regex"]
    unless_null $P5026, fallback1962
    nqp_get_sc_object $P5030, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5026, $P5030
  fallback1962:
    $P5031 = $P5026."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P5032, $P5031
  if553_end1958:
    $P5033 = _lex_param_1."!make"($P5032)
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<x>" :subid("cuid_155_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 639
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$hexlit", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 641
    nqp_get_sc_object $P5005, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5004, $P5005, "HLL"
    get_who $P5003, $P5004
    set $P5002, $P5003["Actions"]
    unless_null $P5002, fallback1963
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback1963:
    unless_null _lex_param_1, fallback1966
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5008
  fallback1966:
    set $P5007, _lex_param_1["hexint"]
    unless_null $P5007, fallback1967
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5009
  fallback1967:
    set $P5015, $P5007
    if $P5007 goto unless554_end1965 
    unless_null _lex_param_1, fallback1968
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5012
  fallback1968:
    set $P5011, _lex_param_1["hexints"]
    unless_null $P5011, fallback1969
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5013
  fallback1969:
    set $P5010, $P5011["hexint"]
    unless_null $P5010, fallback1970
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5014
  fallback1970:
    set $P5015, $P5010
  unless554_end1965:
    $P5016 = $P5002."ints_to_string"($P5015)
    set $P101, $P5016
.annotate 'line', 642
    unless_null _lex_param_1, fallback1973
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5018
  fallback1973:
    set $P5017, _lex_param_1["sym"]
    unless_null $P5017, fallback1974
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5019
  fallback1974:
    set $S5001, $P5017
    iseq $I5001, $S5001, "X"
    unless $I5001 goto if555_else1971 
.annotate 'line', 643
    nqp_get_sc_object $P5023, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Regex"]
    unless_null $P5020, fallback1975
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5024
  fallback1975:
    $P5025 = $P5020."new"($P101, "enumcharlist" :named("rxtype"), 1 :named("negate"), _lex_param_1 :named("node"))
    set $P5032, $P5025
    goto if555_end1972
  if555_else1971:
.annotate 'line', 645
    nqp_get_sc_object $P5029, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Regex"]
    unless_null $P5026, fallback1976
    nqp_get_sc_object $P5030, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5026, $P5030
  fallback1976:
    $P5031 = $P5026."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P5032, $P5031
  if555_end1972:
    $P5033 = _lex_param_1."!make"($P5032)
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<c>" :subid("cuid_156_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 648
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 649
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback1977
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback1977:
    unless_null _lex_param_1, fallback1978
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5007
  fallback1978:
    set $P5006, _lex_param_1["charspec"]
    unless_null $P5006, fallback1979
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5008
  fallback1979:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<misc>" :subid("cuid_157_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 652
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 653
    nqp_get_sc_object $P5005, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1980
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback1980:
    set $S5001, _lex_param_1
    $P5007 = $P5002."new"($S5001, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5007
.annotate 'line', 654
    $P5008 = _lex_param_1."!make"($P101)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_158_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 657
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    unless_null _lex_param_1, fallback1983
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5003
  fallback1983:
    set $P5002, _lex_param_1["assertion"]
    unless_null $P5002, fallback1984
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5004
  fallback1984:
    unless $P5002 goto if556_else1981 
.annotate 'line', 659
.annotate 'line', 660
    unless_null _lex_param_1, fallback1985
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5006
  fallback1985:
    set $P5005, _lex_param_1["assertion"]
    unless_null $P5005, fallback1986
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5005, $P5007
  fallback1986:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
.annotate 'line', 661
    $P5009 = $P101."subtype"("zerowidth")
    goto if556_end1982
  if556_else1981:
.annotate 'line', 663
.annotate 'line', 664
    nqp_get_sc_object $P5013, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Regex"]
    unless_null $P5010, fallback1987
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5014
  fallback1987:
    $P5015 = $P5010."new"("anchor" :named("rxtype"), "pass" :named("subtype"), _lex_param_1 :named("node"))
    set $P101, $P5015
  if556_end1982:
.annotate 'line', 666
    $P5016 = _lex_param_1."!make"($P101)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_159_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 669
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    unless_null _lex_param_1, fallback1990
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5003
  fallback1990:
    set $P5002, _lex_param_1["assertion"]
    unless_null $P5002, fallback1991
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5004
  fallback1991:
    unless $P5002 goto if557_else1988 
.annotate 'line', 671
.annotate 'line', 672
    unless_null _lex_param_1, fallback1992
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5006
  fallback1992:
    set $P5005, _lex_param_1["assertion"]
    unless_null $P5005, fallback1993
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5005, $P5007
  fallback1993:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
.annotate 'line', 673
    $P5009 = $P101."negate"()
    isfalse $I5001, $P5009
    $P101."negate"($I5001)
.annotate 'line', 674
    $P5010 = $P101."subtype"("zerowidth")
    goto if557_end1989
  if557_else1988:
.annotate 'line', 676
.annotate 'line', 677
    nqp_get_sc_object $P5014, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Regex"]
    unless_null $P5011, fallback1994
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback1994:
    $P5016 = $P5011."new"("anchor" :named("rxtype"), "fail" :named("subtype"), _lex_param_1 :named("node"))
    set $P101, $P5016
  if557_end1989:
.annotate 'line', 679
    $P5017 = _lex_param_1."!make"($P101)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<|>" :subid("cuid_160_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 682
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "$name", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback1995
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5004
  fallback1995:
    set $P5003, _lex_param_1["identifier"]
    unless_null $P5003, fallback1996
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5005
  fallback1996:
    set $S5001, $P5003
    box $P5006, $S5001
    set $P102, $P5006
    set $S5002, $P102
    iseq $I5001, $S5002, "c"
    unless $I5001 goto if558_else1997 
.annotate 'line', 685
    box $P5007, 0
    set $P101, $P5007
    goto if558_end1998
  if558_else1997:
    set $S5003, $P102
    iseq $I5002, $S5003, "w"
    box $P5027, $I5002
    set $P5026, $P5027
    unless $I5002 goto if559_end2000 
.annotate 'line', 690
.annotate 'line', 691
    nqp_get_sc_object $P5011, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["Regex"]
    unless_null $P5008, fallback2001
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5012
  fallback2001:
.annotate 'line', 693
    nqp_get_sc_object $P5016, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Node"]
    unless_null $P5013, fallback2002
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5017
  fallback2002:
    nqp_get_sc_object $P5021, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["SVal"]
    unless_null $P5018, fallback2003
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5018, $P5022
  fallback2003:
    $P5023 = $P5018."new"("wb" :named("value"))
    $P5024 = $P5013."new"($P5023)
    $P5025 = $P5008."new"($P5024, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"), "" :named("name"))
    set $P101, $P5025
    set $P5026, $P101
  if559_end2000:
  if558_end1998:
.annotate 'line', 695
    $P5028 = _lex_param_1."!make"($P101)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<method>" :subid("cuid_161_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 698
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 699
    unless_null _lex_param_1, fallback2004
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5003
  fallback2004:
    set $P5002, _lex_param_1["assertion"]
    unless_null $P5002, fallback2005
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5004
  fallback2005:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 700
    $P101."subtype"("method")
.annotate 'line', 701
    $P101."name"("")
.annotate 'line', 702
    $P5006 = _lex_param_1."!make"($P101)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_162_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 705
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5085 = 'cuid_212_1360426899.567' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_213_1360426899.567' 
    capture_lex $P5085 
    .lex "$name", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback2006
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5004
  fallback2006:
    set $P5003, _lex_param_1["longname"]
    unless_null $P5003, fallback2007
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5005
  fallback2007:
    set $S5001, $P5003
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback2010
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5008
  fallback2010:
    set $P5007, _lex_param_1["assertion"]
    unless_null $P5007, fallback2011
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5009
  fallback2011:
    unless $P5007 goto if560_else2008 
.annotate 'line', 708
.annotate 'line', 709
    unless_null _lex_param_1, fallback2012
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5012
  fallback2012:
    set $P5011, _lex_param_1["assertion"]
    unless_null $P5011, fallback2013
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5013
  fallback2013:
    set $P5010, $P5011[0]
    unless_null $P5010, fallback2014
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5014
  fallback2014:
    $P5015 = $P5010."ast"()
    set $P102, $P5015
.annotate 'line', 710
    nqp_decontainerize $P5016, _lex_param_0
    $P5017 = $P5016."subrule_alias"($P102, $P101)
    goto if560_end2009
  if560_else2008:
    set $S5002, $P101
    iseq $I5001, $S5002, "sym"
    unless $I5001 goto if561_else2015 
    .const 'Sub' $P5018 = 'cuid_212_1360426899.567' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5083, $P5019
    goto if561_end2016
  if561_else2015:
.annotate 'line', 721
.annotate 'line', 722
    nqp_get_sc_object $P5023, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Regex"]
    unless_null $P5020, fallback2033
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5024
  fallback2033:
.annotate 'line', 724
    nqp_get_sc_object $P5028, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Node"]
    unless_null $P5025, fallback2034
    nqp_get_sc_object $P5029, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5025, $P5029
  fallback2034:
    nqp_get_sc_object $P5033, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["SVal"]
    unless_null $P5030, fallback2035
    nqp_get_sc_object $P5034, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5030, $P5034
  fallback2035:
    $P5035 = $P5030."new"($P101 :named("value"))
    $P5036 = $P5025."new"($P5035)
    $P5037 = $P5020."new"($P5036, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"), $P101 :named("name"))
    set $P102, $P5037
    unless_null _lex_param_1, fallback2038
    nqp_get_sc_object $P5039, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5039
  fallback2038:
    set $P5038, _lex_param_1["arglist"]
    unless_null $P5038, fallback2039
    nqp_get_sc_object $P5040, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5038, $P5040
  fallback2039:
    unless $P5038 goto if566_else2036 
.annotate 'line', 725
.annotate 'line', 726
    unless_null _lex_param_1, fallback2040
    nqp_get_sc_object $P5046, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5046
  fallback2040:
    set $P5045, _lex_param_1["arglist"]
    unless_null $P5045, fallback2041
    nqp_get_sc_object $P5047, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5045, $P5047
  fallback2041:
    set $P5044, $P5045[0]
    unless_null $P5044, fallback2042
    nqp_get_sc_object $P5048, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5044, $P5048
  fallback2042:
    $P5049 = $P5044."ast"()
    $P5050 = $P5049."list"()
    set $P5041, $P5050
    iter $P5043, $P5050
  for_next2044:
    unless $P5043, for_done2046
    shift $P5052, $P5043
  for_redo2045:
    .const 'Sub' $P5051 = 'cuid_213_1360426899.567' 
    capture_lex $P5051
    $P5041 = $P5051($P5052)
    goto for_next2044
  for_done2046:
    set $P5082, $P5041
    goto if566_end2037
  if566_else2036:
    unless_null _lex_param_1, fallback2049
    nqp_get_sc_object $P5054, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5054
  fallback2049:
    set $P5053, _lex_param_1["nibbler"]
    unless_null $P5053, fallback2050
    nqp_get_sc_object $P5055, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5053, $P5055
  fallback2050:
    set $P5081, $P5053
    unless $P5053 goto if567_end2048 
.annotate 'line', 728
    set $S5003, $P101
    iseq $I5002, $S5003, "after"
    unless $I5002 goto if568_else2051 
.annotate 'line', 730
    set $P5056, $P102[0]
    unless_null $P5056, fallback2053
    nqp_get_sc_object $P5057, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5056, $P5057
  fallback2053:
    nqp_decontainerize $P5058, _lex_param_0
    nqp_decontainerize $P5059, _lex_param_0
    unless_null _lex_param_1, fallback2054
    nqp_get_sc_object $P5062, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5062
  fallback2054:
    set $P5061, _lex_param_1["nibbler"]
    unless_null $P5061, fallback2055
    nqp_get_sc_object $P5063, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5061, $P5063
  fallback2055:
    set $P5060, $P5061[0]
    unless_null $P5060, fallback2056
    nqp_get_sc_object $P5064, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5060, $P5064
  fallback2056:
    $P5065 = $P5060."ast"()
    $P5066 = $P5059."flip_ast"($P5065)
    $P5067 = $P5058."qbuildsub"($P5066, 1 :named("anon"), 1 :named("addself"))
    $P5068 = $P5056."push"($P5067)
    set $P5080, $P5068
    goto if568_end2052
  if568_else2051:
.annotate 'line', 731
    set $P5069, $P102[0]
    unless_null $P5069, fallback2057
    nqp_get_sc_object $P5070, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5069, $P5070
  fallback2057:
    nqp_decontainerize $P5071, _lex_param_0
    unless_null _lex_param_1, fallback2058
    nqp_get_sc_object $P5074, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5074
  fallback2058:
    set $P5073, _lex_param_1["nibbler"]
    unless_null $P5073, fallback2059
    nqp_get_sc_object $P5075, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5073, $P5075
  fallback2059:
    set $P5072, $P5073[0]
    unless_null $P5072, fallback2060
    nqp_get_sc_object $P5076, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5072, $P5076
  fallback2060:
    $P5077 = $P5072."ast"()
    $P5078 = $P5071."qbuildsub"($P5077, 1 :named("anon"), 1 :named("addself"))
    $P5079 = $P5069."push"($P5078)
    set $P5080, $P5079
  if568_end2052:
    set $P5081, $P5080
  if567_end2048:
    set $P5082, $P5081
  if566_end2037:
    set $P5083, $P5082
  if561_end2016:
  if560_end2009:
.annotate 'line', 734
    $P5084 = _lex_param_1."!make"($P102)
    .return ($P5084) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_212_1360426899.567") :anon :lex :outer("cuid_162_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 712
    .lex "$loc", $P101 
    .lex "$rxname", $P102 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    find_dynamic_lex $P5004, "%*RX"
    unless_null $P5004, fallback2017
    nqp_get_sc_object $P5007, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["%RX"]
    unless_null $P5005, fallback2018
    nqp_get_sc_object $P5009, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%RX"], $P5010
    set $P5005, $P5010
  fallback2018:
    unless_null $P5005, vivi_5622019
    die "Contextual %*RX not found"
    box $P5011, "Contextual %*RX not found"
    set $P5005, $P5011
  vivi_5622019:
    set $P5004, $P5005
  fallback2017:
    set $P5003, $P5004["name"]
    unless_null $P5003, fallback2020
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5012
  fallback2020:
    set $S5001, $P5003
    index $I5001, $S5001, ":sym<", 0
    box $P5013, $I5001
    set $P101, $P5013
    set $N5001, $P101
    set $N5002, 0
    islt $I5002, $N5001, $N5002
    unless $I5002 goto if563_end2022 
    find_dynamic_lex $P5015, "%*RX"
    unless_null $P5015, fallback2023
    nqp_get_sc_object $P5018, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["%RX"]
    unless_null $P5016, fallback2024
    nqp_get_sc_object $P5020, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5019, $P5020
    new $P5021, 'Hash'
    set $P5019["%RX"], $P5021
    set $P5016, $P5021
  fallback2024:
    unless_null $P5016, vivi_5642025
    die "Contextual %*RX not found"
    box $P5022, "Contextual %*RX not found"
    set $P5016, $P5022
  vivi_5642025:
    set $P5015, $P5016
  fallback2023:
    set $P5014, $P5015["name"]
    unless_null $P5014, fallback2026
    nqp_get_sc_object $P5023, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5023
  fallback2026:
    set $S5002, $P5014
    index $I5003, $S5002, utf8:":sym\x{ab}", 0
    box $P5024, $I5003
    set $P101, $P5024
  if563_end2022:
    find_dynamic_lex $P5026, "%*RX"
    unless_null $P5026, fallback2027
    nqp_get_sc_object $P5029, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["%RX"]
    unless_null $P5027, fallback2028
    nqp_get_sc_object $P5031, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5030, $P5031
    new $P5032, 'Hash'
    set $P5030["%RX"], $P5032
    set $P5027, $P5032
  fallback2028:
    unless_null $P5027, vivi_5652029
    die "Contextual %*RX not found"
    box $P5033, "Contextual %*RX not found"
    set $P5027, $P5033
  vivi_5652029:
    set $P5026, $P5027
  fallback2027:
    set $P5025, $P5026["name"]
    unless_null $P5025, fallback2030
    nqp_get_sc_object $P5034, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5025, $P5034
  fallback2030:
    set $S5004, $P5025
    set $N5004, $P101
    set $N5005, 5
    add $N5003, $N5004, $N5005
    set $I5004, $N5003
    substr $S5003, $S5004, $I5004
    box $P5035, $S5003
    set $P102, $P5035
    set $S5006, $P102
    set $S5007, $P102
    length $I5005, $S5007
    set $N5007, $I5005
    set $N5008, 1
    sub $N5006, $N5007, $N5008
    set $I5006, $N5006
    substr $S5005, $S5006, 0, $I5006
    box $P5036, $S5005
    set $P102, $P5036
.annotate 'line', 718
    nqp_get_sc_object $P5040, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Regex"]
    unless_null $P5037, fallback2031
    nqp_get_sc_object $P5041, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5037, $P5041
  fallback2031:
    find_lex $P5042, "$/"
.annotate 'line', 719
    nqp_get_sc_object $P5046, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Regex"]
    unless_null $P5043, fallback2032
    nqp_get_sc_object $P5047, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5043, $P5047
  fallback2032:
    find_lex $P5048, "$/"
    $P5049 = $P5043."new"($P102, "literal" :named("rxtype"), $P5048 :named("node"))
    $P5050 = $P5037."new"($P5049, "sym" :named("name"), "subcapture" :named("rxtype"), $P5042 :named("node"))
    store_lex "$qast", $P5050
    .return ($P5050) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_213_1360426899.567") :anon :lex :outer("cuid_162_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 726
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$qast"
    set $P5001, $P5002[0]
    unless_null $P5001, fallback2043
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback2043:
    $P5004 = $P5001."push"(_lex_param_0)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<[>" :subid("cuid_163_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 737
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5034 = 'cuid_214_1360426899.567' 
    capture_lex $P5034 
    .lex "$clist", $P101 
    .lex "$qast", $P102 
    .lex "$i", $P103 
    .lex "$n", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P104, $P5004
    unless_null _lex_param_1, fallback2061
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5006
  fallback2061:
    set $P5005, _lex_param_1["cclass_elem"]
    unless_null $P5005, fallback2062
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5005, $P5007
  fallback2062:
    set $P101, $P5005
.annotate 'line', 739
    set $P5008, $P101[0]
    unless_null $P5008, fallback2063
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5009
  fallback2063:
    $P5010 = $P5008."ast"()
    set $P102, $P5010
.annotate 'line', 740
    $P5011 = $P102."negate"()
    set $P5013, $P5011
    unless $P5011 goto if570_end2067 
    $P5012 = $P102."rxtype"()
    set $S5001, $P5012
    iseq $I5001, $S5001, "subrule"
    box $P5014, $I5001
    set $P5013, $P5014
  if570_end2067:
    unless $P5013 goto if569_end2065 
.annotate 'line', 741
    $P102."subtype"("zerowidth")
.annotate 'line', 742
    nqp_get_sc_object $P5018, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Regex"]
    unless_null $P5015, fallback2068
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5015, $P5019
  fallback2068:
.annotate 'line', 744
    nqp_get_sc_object $P5023, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Regex"]
    unless_null $P5020, fallback2069
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5024
  fallback2069:
    $P5025 = $P5020."new"("cclass" :named("rxtype"), "." :named("subtype"))
    $P5026 = $P5015."new"($P102, $P5025, "concat" :named("rxtype"), _lex_param_1 :named("node"))
    set $P102, $P5026
  if569_end2065:
    box $P5027, 1
    set $P103, $P5027
    set $N5001, $P101
    box $P5028, $N5001
    set $P104, $P5028
  while571_test2070:
    set $N5002, $P103
    set $N5003, $P104
    islt $I5002, $N5002, $N5003
    box $P5032, $I5002
    set $P5031, $P5032
    unless $I5002 goto while571_done2074 
  while571_redo2072:
    .const 'Sub' $P5029 = 'cuid_214_1360426899.567' 
    capture_lex $P5029
    $P5030 = $P5029()
    set $P5031, $P5030
    goto while571_test2070 
  while571_done2074:
.annotate 'line', 759
    $P5033 = _lex_param_1."!make"($P102)
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_214_1360426899.567") :anon :lex :outer("cuid_163_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 748
    .lex "$ast", $P101 
    .local pmc tmp_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 749
    find_lex $P5003, "$clist"
    find_lex $P5004, "$i"
    set $I5001, $P5004
    set $P5002, $P5003[$I5001]
    unless_null $P5002, fallback2075
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback2075:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
.annotate 'line', 750
    $P5007 = $P101."negate"()
    unless $P5007 goto if572_else2076 
.annotate 'line', 751
    $P101."subtype"("zerowidth")
.annotate 'line', 752
    nqp_get_sc_object $P5011, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["Regex"]
    unless_null $P5008, fallback2078
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5012
  fallback2078:
    find_lex $P5013, "$qast"
    find_lex $P5014, "$/"
    $P5015 = $P5008."new"($P101, $P5013, "concat" :named("rxtype"), $P5014 :named("node"))
    store_lex "$qast", $P5015
    goto if572_end2077
  if572_else2076:
.annotate 'line', 754
.annotate 'line', 755
    nqp_get_sc_object $P5019, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Regex"]
    unless_null $P5016, fallback2079
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5016, $P5020
  fallback2079:
    find_lex $P5021, "$qast"
    find_lex $P5022, "$/"
    $P5023 = $P5016."new"($P5021, $P101, "altseq" :named("rxtype"), $P5022 :named("node"))
    store_lex "$qast", $P5023
  if572_end2077:
    find_lex $P5024, "$i"
    set tmp_1, $P5024
    set $N5002, tmp_1
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5025, $N5001
    store_lex "$i", $P5025
    .return (tmp_1) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_164_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 762
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 763
    unless_null _lex_param_1, fallback2082
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback2082:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback2083
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback2083:
    unless $P5001 goto if573_else2080 
.annotate 'line', 764
    unless_null _lex_param_1, fallback2084
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5005
  fallback2084:
    set $P5004, _lex_param_1["quote_EXPR"]
    unless_null $P5004, fallback2085
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5006
  fallback2085:
    $P5007 = $P5004."ast"()
    set $P5017, $P5007
    goto if573_end2081
  if573_else2080:
.annotate 'line', 765
    nqp_get_sc_object $P5011, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["NVal"]
    unless_null $P5008, fallback2086
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5012
  fallback2086:
    unless_null _lex_param_1, fallback2087
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5014
  fallback2087:
    set $P5013, _lex_param_1["val"]
    unless_null $P5013, fallback2088
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5015
  fallback2088:
    set $N5001, $P5013
    $P5016 = $P5008."new"($N5001 :named("value"))
    set $P5017, $P5016
  if573_end2081:
    $P5018 = _lex_param_1."!make"($P5017)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_165_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 768
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5017 = 'cuid_215_1360426899.567' 
    capture_lex $P5017 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 769
    nqp_get_sc_object $P5005, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback2089
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback2089:
    $P5007 = $P5002."new"("list" :named("op"))
    set $P101, $P5007
    unless_null _lex_param_1, fallback2090
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5012
  fallback2090:
    set $P5011, _lex_param_1["arg"]
    unless_null $P5011, fallback2091
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5013
  fallback2091:
    set $P5008, $P5011
    iter $P5010, $P5011
  for_next2092:
    unless $P5010, for_done2094
    shift $P5015, $P5010
  for_redo2093:
    .const 'Sub' $P5014 = 'cuid_215_1360426899.567' 
    capture_lex $P5014
    $P5008 = $P5014($P5015)
    goto for_next2092
  for_done2094:
.annotate 'line', 771
    $P5016 = _lex_param_1."!make"($P101)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_215_1360426899.567") :anon :lex :outer("cuid_165_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 770
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$past"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_elem" :subid("cuid_166_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 774
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5018 = 'cuid_216_1360426899.567' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_217_1360426899.567' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_221_1360426899.567' 
    capture_lex $P5018 
    .lex "$str", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    box $P5003, ""
    set $P101, $P5003
    unless_null _lex_param_1, fallback2097
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5005
  fallback2097:
    set $P5004, _lex_param_1["name"]
    unless_null $P5004, fallback2098
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5006
  fallback2098:
    unless $P5004 goto if574_else2095 
    .const 'Sub' $P5007 = 'cuid_216_1360426899.567' 
    capture_lex $P5007
    $P5008 = $P5007()
    goto if574_end2096
  if574_else2095:
    unless_null _lex_param_1, fallback2108
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5010
  fallback2108:
    set $P5009, _lex_param_1["uniprop"]
    unless_null $P5009, fallback2109
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5011
  fallback2109:
    unless $P5009 goto if575_else2106 
    .const 'Sub' $P5012 = 'cuid_217_1360426899.567' 
    capture_lex $P5012
    $P5013 = $P5012()
    set $P5016, $P5013
    goto if575_end2107
  if575_else2106:
    .const 'Sub' $P5014 = 'cuid_221_1360426899.567' 
    capture_lex $P5014
    $P5015 = $P5014()
    set $P5016, $P5015
  if575_end2107:
  if574_end2096:
.annotate 'line', 839
    $P5017 = _lex_param_1."!make"($P102)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_216_1360426899.567") :anon :lex :outer("cuid_166_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 777
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback2099
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5004
  fallback2099:
    set $P5002, $P5003["name"]
    unless_null $P5002, fallback2100
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback2100:
    set $S5001, $P5002
    box $P5006, $S5001
    set $P101, $P5006
.annotate 'line', 779
    nqp_get_sc_object $P5010, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Regex"]
    unless_null $P5007, fallback2101
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5011
  fallback2101:
    find_lex $P5013, "$/"
    unless_null $P5013, fallback2102
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5014
  fallback2102:
    set $P5012, $P5013["sign"]
    unless_null $P5012, fallback2103
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5015
  fallback2103:
    set $S5002, $P5012
    iseq $I5001, $S5002, "-"
    find_lex $P5016, "$/"
.annotate 'line', 781
    nqp_get_sc_object $P5020, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Node"]
    unless_null $P5017, fallback2104
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5021
  fallback2104:
    nqp_get_sc_object $P5025, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["SVal"]
    unless_null $P5022, fallback2105
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5022, $P5026
  fallback2105:
    $P5027 = $P5022."new"($P101 :named("value"))
    $P5028 = $P5017."new"($P5027)
    $P5029 = $P5007."new"($P5028, "subrule" :named("rxtype"), "method" :named("subtype"), $I5001 :named("negate"), $P5016 :named("node"))
    store_lex "$qast", $P5029
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_217_1360426899.567") :anon :lex :outer("cuid_166_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 783
    .lex "$uniprop", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback2110
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5004
  fallback2110:
    set $P5002, $P5003["uniprop"]
    unless_null $P5002, fallback2111
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback2111:
    set $S5001, $P5002
    box $P5006, $S5001
    set $P101, $P5006
.annotate 'line', 785
    nqp_get_sc_object $P5010, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Regex"]
    unless_null $P5007, fallback2112
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5011
  fallback2112:
    find_lex $P5013, "$/"
    unless_null $P5013, fallback2117
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5014
  fallback2117:
    set $P5012, $P5013["sign"]
    unless_null $P5012, fallback2118
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5015
  fallback2118:
    set $S5002, $P5012
    iseq $I5001, $S5002, "-"
    set $I5003, $I5001
    unless $I5001 goto if577_end2116 
    find_lex $P5017, "$/"
    unless_null $P5017, fallback2119
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5018
  fallback2119:
    set $P5016, $P5017["invert"]
    unless_null $P5016, fallback2120
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5016, $P5019
  fallback2120:
    set $S5003, $P5016
    isne $I5002, $S5003, "!"
    set $I5003, $I5002
  if577_end2116:
    set $I5007, $I5003
    if $I5003 goto unless576_end2114 
    find_lex $P5021, "$/"
    unless_null $P5021, fallback2123
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5021, $P5022
  fallback2123:
    set $P5020, $P5021["sign"]
    unless_null $P5020, fallback2124
    nqp_get_sc_object $P5023, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5023
  fallback2124:
    set $S5004, $P5020
    isne $I5004, $S5004, "-"
    set $I5006, $I5004
    unless $I5004 goto if578_end2122 
    find_lex $P5025, "$/"
    unless_null $P5025, fallback2125
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5025, $P5026
  fallback2125:
    set $P5024, $P5025["invert"]
    unless_null $P5024, fallback2126
    nqp_get_sc_object $P5027, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5024, $P5027
  fallback2126:
    set $S5005, $P5024
    iseq $I5005, $S5005, "!"
    set $I5006, $I5005
  if578_end2122:
    set $I5007, $I5006
  unless576_end2114:
    find_lex $P5028, "$/"
    $P5029 = $P5007."new"($P101, "uniprop" :named("rxtype"), $I5007 :named("negate"), $P5028 :named("node"))
    store_lex "$qast", $P5029
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_221_1360426899.567") :anon :lex :outer("cuid_166_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 789
    .const 'Sub' $P5058 = 'cuid_219_1360426899.567' 
    capture_lex $P5058 
    .lex "@alts", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_lex $P5006, "$/"
    unless_null $P5006, fallback2127
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5007
  fallback2127:
    set $P5005, $P5006["charspec"]
    unless_null $P5005, fallback2128
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5005, $P5008
  fallback2128:
    set $P5002, $P5005
    iter $P5004, $P5005
  for_next2189:
    unless $P5004, for_done2191
    shift $P5010, $P5004
  for_redo2190:
    .const 'Sub' $P5009 = 'cuid_219_1360426899.567' 
    capture_lex $P5009
    $P5002 = $P5009($P5010)
    goto for_next2189
  for_done2191:
    find_lex $P5011, "$str"
    set $S5001, $P5011
    length $I5001, $S5001
    unless $I5001 goto if594_end2193 
.annotate 'line', 829
    nqp_get_sc_object $P5015, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Regex"]
    unless_null $P5012, fallback2194
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5016
  fallback2194:
    find_lex $P5017, "$str"
    find_lex $P5018, "$/"
    find_lex $P5020, "$/"
    unless_null $P5020, fallback2195
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5021
  fallback2195:
    set $P5019, $P5020["sign"]
    unless_null $P5019, fallback2196
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5019, $P5022
  fallback2196:
    set $S5002, $P5019
    iseq $I5002, $S5002, "-"
    $P5023 = $P5012."new"($P5017, "enumcharlist" :named("rxtype"), $P5018 :named("node"), $I5002 :named("negate"))
    $P5024 = $P101."push"($P5023)
  if594_end2193:
    set $N5001, $P101
    set $N5002, 1
    iseq $I5003, $N5001, $N5002
    unless $I5003 goto if595_else2197 
    set $P5025, $P101[0]
    unless_null $P5025, fallback2199
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5025, $P5026
  fallback2199:
    set $P5057, $P5025
    goto if595_end2198
  if595_else2197:
    find_lex $P5028, "$/"
    unless_null $P5028, fallback2202
    nqp_get_sc_object $P5029, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5028, $P5029
  fallback2202:
    set $P5027, $P5028["sign"]
    unless_null $P5027, fallback2203
    nqp_get_sc_object $P5030, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5027, $P5030
  fallback2203:
    set $S5003, $P5027
    iseq $I5004, $S5003, "-"
    unless $I5004 goto if596_else2200 
.annotate 'line', 833
    nqp_get_sc_object $P5034, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Regex"]
    unless_null $P5031, fallback2204
    nqp_get_sc_object $P5035, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5031, $P5035
  fallback2204:
    find_lex $P5036, "$/"
.annotate 'line', 834
    nqp_get_sc_object $P5040, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Regex"]
    unless_null $P5037, fallback2205
    nqp_get_sc_object $P5041, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5037, $P5041
  fallback2205:
    $P5042 = $P5037."new"($P101 :flat, "conj" :named("rxtype"), "zerowidth" :named("subtype"))
.annotate 'line', 835
    nqp_get_sc_object $P5046, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Regex"]
    unless_null $P5043, fallback2206
    nqp_get_sc_object $P5047, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5043, $P5047
  fallback2206:
    $P5048 = $P5043."new"("cclass" :named("rxtype"), "." :named("subtype"))
    $P5049 = $P5031."new"($P5042, $P5048, "concat" :named("rxtype"), $P5036 :named("node"))
    set $P5056, $P5049
    goto if596_end2201
  if596_else2200:
.annotate 'line', 836
    nqp_get_sc_object $P5053, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["Regex"]
    unless_null $P5050, fallback2207
    nqp_get_sc_object $P5054, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5050, $P5054
  fallback2207:
    $P5055 = $P5050."new"($P101 :flat, "altseq" :named("rxtype"))
    set $P5056, $P5055
  if596_end2201:
    set $P5057, $P5056
  if595_end2198:
    store_lex "$qast", $P5057
    .return ($P5057) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_219_1360426899.567") :anon :lex :outer("cuid_221_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 791
    .param pmc _lex_param_0 
    .const 'Sub' $P5017 = 'cuid_218_1360426899.567' 
    capture_lex $P5017 
    .const 'Sub' $P5017 = 'cuid_220_1360426899.567' 
    capture_lex $P5017 
    .lex "$_", _lex_param_0 
    set $P5001, _lex_param_0[1]
    unless_null $P5001, fallback2131
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5002
  fallback2131:
    unless $P5001 goto if579_else2129 
    .const 'Sub' $P5003 = 'cuid_218_1360426899.567' 
    capture_lex $P5003
    $P5004 = $P5003()
    set $P5016, $P5004
    goto if579_end2130
  if579_else2129:
    set $P5006, _lex_param_0[0]
    unless_null $P5006, fallback2180
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5007
  fallback2180:
    set $P5005, $P5006["backslash"]
    unless_null $P5005, fallback2181
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5005, $P5008
  fallback2181:
    unless $P5005 goto if592_else2178 
    .const 'Sub' $P5009 = 'cuid_220_1360426899.567' 
    capture_lex $P5009
    $P5010 = $P5009()
    set $P5015, $P5010
    goto if592_end2179
  if592_else2178:
.annotate 'line', 827
    find_lex $P5011, "$str"
    set $S5002, $P5011
    set $P5012, _lex_param_0[0]
    unless_null $P5012, fallback2188
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5013
  fallback2188:
    set $S5003, $P5012
    concat $S5001, $S5002, $S5003
    box $P5014, $S5001
    store_lex "$str", $P5014
    set $P5015, $P5014
  if592_end2179:
    set $P5016, $P5015
  if579_end2130:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_218_1360426899.567") :anon :lex :outer("cuid_219_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 792
    .lex "$node", $P101 
    .lex "$lhs", $P102 
    .lex "$rhs", $P103 
    .lex "$ord0", $P104 
    .lex "$ord1", $P105 
    .local pmc tmp_2 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P104, $P5004
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P105, $P5005
    find_lex $P5008, "$_"
    set $P5007, $P5008[0]
    unless_null $P5007, fallback2134
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5009
  fallback2134:
    set $P5006, $P5007["backslash"]
    unless_null $P5006, fallback2135
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5010
  fallback2135:
    unless $P5006 goto if580_else2132 
.annotate 'line', 796
.annotate 'line', 797
    find_lex $P5013, "$_"
    set $P5012, $P5013[0]
    unless_null $P5012, fallback2136
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5014
  fallback2136:
    set $P5011, $P5012["backslash"]
    unless_null $P5011, fallback2137
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback2137:
    $P5016 = $P5011."ast"()
    set $P101, $P5016
.annotate 'line', 799
    $P5017 = $P101."rxtype"()
    set $S5001, $P5017
    isne $I5001, $S5001, "literal"
    set $I5003, $I5001
    unless $I5001 goto if584_end2145 
    $P5018 = $P101."rxtype"()
    set $S5002, $P5018
    isne $I5002, $S5002, "enumcharlist"
    set $I5003, $I5002
  if584_end2145:
    box $P5021, $I5003
    set $P5020, $P5021
    if $I5003 goto unless583_end2143 
.annotate 'line', 800
    $P5019 = $P101."negate"()
    set $P5020, $P5019
  unless583_end2143:
    set $P5024, $P5020
    if $P5020 goto unless582_end2141 
    set $P5022, $P101[0]
    unless_null $P5022, fallback2146
    nqp_get_sc_object $P5023, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5022, $P5023
  fallback2146:
    set $S5003, $P5022
    length $I5005, $S5003
    set $N5001, $I5005
    set $N5002, 1
    isne $I5004, $N5001, $N5002
    box $P5025, $I5004
    set $P5024, $P5025
  unless582_end2141:
    unless $P5024 goto if581_end2139 
.annotate 'line', 798
    find_lex $P5026, "$/"
    $P5027 = $P5026."CURSOR"()
    find_lex $P5028, "$_"
    set $S5005, $P5028
    concat $S5004, "Illegal range endpoint in regex: ", $S5005
    $P5029 = $P5027."panic"($S5004)
  if581_end2139:
    set $P5030, $P101[0]
    unless_null $P5030, fallback2147
    nqp_get_sc_object $P5031, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5030, $P5031
  fallback2147:
    set $P102, $P5030
    goto if580_end2133
  if580_else2132:
.annotate 'line', 803
    find_lex $P5034, "$_"
    set $P5033, $P5034[0]
    unless_null $P5033, fallback2148
    nqp_get_sc_object $P5035, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5033, $P5035
  fallback2148:
    set $P5032, $P5033[0]
    unless_null $P5032, fallback2149
    nqp_get_sc_object $P5036, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5032, $P5036
  fallback2149:
    set $S5006, $P5032
    box $P5037, $S5006
    set $P102, $P5037
  if580_end2133:
    find_lex $P5041, "$_"
    set $P5040, $P5041[1]
    unless_null $P5040, fallback2152
    nqp_get_sc_object $P5042, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5040, $P5042
  fallback2152:
    set $P5039, $P5040[0]
    unless_null $P5039, fallback2153
    nqp_get_sc_object $P5043, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5039, $P5043
  fallback2153:
    set $P5038, $P5039["backslash"]
    unless_null $P5038, fallback2154
    nqp_get_sc_object $P5044, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5038, $P5044
  fallback2154:
    unless $P5038 goto if585_else2150 
.annotate 'line', 806
.annotate 'line', 807
    find_lex $P5048, "$_"
    set $P5047, $P5048[1]
    unless_null $P5047, fallback2155
    nqp_get_sc_object $P5049, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5047, $P5049
  fallback2155:
    set $P5046, $P5047[0]
    unless_null $P5046, fallback2156
    nqp_get_sc_object $P5050, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5046, $P5050
  fallback2156:
    set $P5045, $P5046["backslash"]
    unless_null $P5045, fallback2157
    nqp_get_sc_object $P5051, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5045, $P5051
  fallback2157:
    $P5052 = $P5045."ast"()
    set $P101, $P5052
.annotate 'line', 809
    $P5053 = $P101."rxtype"()
    set $S5007, $P5053
    isne $I5006, $S5007, "literal"
    set $I5008, $I5006
    unless $I5006 goto if589_end2165 
    $P5054 = $P101."rxtype"()
    set $S5008, $P5054
    isne $I5007, $S5008, "enumcharlist"
    set $I5008, $I5007
  if589_end2165:
    box $P5057, $I5008
    set $P5056, $P5057
    if $I5008 goto unless588_end2163 
.annotate 'line', 810
    $P5055 = $P101."negate"()
    set $P5056, $P5055
  unless588_end2163:
    set $P5060, $P5056
    if $P5056 goto unless587_end2161 
    set $P5058, $P101[0]
    unless_null $P5058, fallback2166
    nqp_get_sc_object $P5059, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5058, $P5059
  fallback2166:
    set $S5009, $P5058
    length $I5010, $S5009
    set $N5003, $I5010
    set $N5004, 1
    isne $I5009, $N5003, $N5004
    box $P5061, $I5009
    set $P5060, $P5061
  unless587_end2161:
    unless $P5060 goto if586_end2159 
.annotate 'line', 808
    find_lex $P5062, "$/"
    $P5063 = $P5062."CURSOR"()
    find_lex $P5064, "$_"
    set $S5011, $P5064
    concat $S5010, "Illegal range endpoint in regex: ", $S5011
    $P5065 = $P5063."panic"($S5010)
  if586_end2159:
    set $P5066, $P101[0]
    unless_null $P5066, fallback2167
    nqp_get_sc_object $P5067, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5066, $P5067
  fallback2167:
    set $P103, $P5066
    goto if585_end2151
  if585_else2150:
.annotate 'line', 813
    find_lex $P5071, "$_"
    set $P5070, $P5071[1]
    unless_null $P5070, fallback2168
    nqp_get_sc_object $P5072, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5070, $P5072
  fallback2168:
    set $P5069, $P5070[0]
    unless_null $P5069, fallback2169
    nqp_get_sc_object $P5073, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5069, $P5073
  fallback2169:
    set $P5068, $P5069[0]
    unless_null $P5068, fallback2170
    nqp_get_sc_object $P5074, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5068, $P5074
  fallback2170:
    set $S5012, $P5068
    box $P5075, $S5012
    set $P103, $P5075
  if585_end2151:
    set $S5013, $P102
    ord $I5011, $S5013
    box $P5076, $I5011
    set $P104, $P5076
    set $S5014, $P103
    ord $I5012, $S5014
    box $P5077, $I5012
    set $P105, $P5077
    set $N5005, $P104
    set $N5006, $P105
    isgt $I5013, $N5005, $N5006
    unless $I5013 goto if590_end2172 
.annotate 'line', 818
    find_lex $P5078, "$/"
    $P5079 = $P5078."CURSOR"()
    find_lex $P5080, "$_"
    set $S5016, $P5080
    concat $S5015, "Illegal reversed character range in regex: ", $S5016
    $P5081 = $P5079."panic"($S5015)
  if590_end2172:
    new $P5085, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5085, while591_handlers2176
    push_eh $P5085
  while591_test2173:
    set $N5007, $P104
    set $N5008, $P105
    isle $I5014, $N5007, $N5008
    box $P5086, $I5014
    set $P5084, $P5086
    unless $I5014 goto while591_done2177 
  while591_redo2175:
    find_lex $P5082, "$str"
    set $S5018, $P5082
    set tmp_2, $P104
    set $N5010, tmp_2
    set $N5011, 1
    add $N5009, $N5010, $N5011
    box $P5083, $N5009
    set $P104, $P5083
    set $I5015, tmp_2
    chr $S5019, $I5015
    concat $S5017, $S5018, $S5019
    box $P5083, $S5017
    store_lex "$str", $P5083
    set $P5084, $P5083
    goto while591_test2173 
  while591_handlers2176:
    .get_results ($P5085)
    pop_upto_eh $P5085
    getattribute $P5085, $P5085, 'type'
    eq $P5085, .CONTROL_LOOP_NEXT, while591_test2173
    eq $P5085, .CONTROL_LOOP_REDO, while591_redo2175
  while591_done2177:
    pop_eh 
    .return ($P5084) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_220_1360426899.567") :anon :lex :outer("cuid_219_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 822
    .lex "$bs", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 823
    find_lex $P5004, "$_"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback2182
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5005
  fallback2182:
    set $P5002, $P5003["backslash"]
    unless_null $P5002, fallback2183
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback2183:
    $P5007 = $P5002."ast"()
    set $P101, $P5007
    find_lex $P5009, "$/"
    unless_null $P5009, fallback2186
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5010
  fallback2186:
    set $P5008, $P5009["sign"]
    unless_null $P5008, fallback2187
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5011
  fallback2187:
    set $S5001, $P5008
    iseq $I5001, $S5001, "-"
    unless $I5001 goto if593_end2185 
.annotate 'line', 824
    $P5012 = $P101."negate"()
    isfalse $I5002, $P5012
    $P5013 = $P101."negate"($I5002)
  if593_end2185:
.annotate 'line', 825
    find_lex $P5014, "@alts"
    $P5015 = $P5014."push"($P101)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "mod_internal" :subid("cuid_167_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 842
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_222_1360426899.567' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_223_1360426899.567' 
    capture_lex $P5024 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback2210
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback2210:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback2211
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback2211:
    unless $P5001 goto if597_else2208 
.annotate 'line', 843
.annotate 'line', 844
    nqp_get_sc_object $P5007, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["SVal"]
    unless_null $P5004, fallback2214
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5008
  fallback2214:
    unless_null _lex_param_1, fallback2215
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5011
  fallback2215:
    set $P5010, _lex_param_1["quote_EXPR"]
    unless_null $P5010, fallback2216
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5012
  fallback2216:
    set $P5009, $P5010[0]
    unless_null $P5009, fallback2217
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5013
  fallback2217:
    $P5014 = $P5009."ast"()
    $P5015 = $P5004."ACCEPTS"($P5014)
    unless $P5015 goto if598_else2212 
    .const 'Sub' $P5016 = 'cuid_222_1360426899.567' 
    capture_lex $P5016
    $P5017 = $P5016()
    set $P5020, $P5017
    goto if598_end2213
  if598_else2212:
.annotate 'line', 852
.annotate 'line', 853
    $P5018 = _lex_param_1."CURSOR"()
    $P5019 = $P5018."panic"("Internal modifier strings must be literals")
    set $P5020, $P5019
  if598_end2213:
    set $P5023, $P5020
    goto if597_end2209
  if597_else2208:
    .const 'Sub' $P5021 = 'cuid_223_1360426899.567' 
    capture_lex $P5021
    $P5022 = $P5021()
    set $P5023, $P5022
  if597_end2209:
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_222_1360426899.567") :anon :lex :outer("cuid_167_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 844
    .lex "$key", $P101 
    .lex "$val", $P102 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    find_lex $P5005, "$/"
    unless_null $P5005, fallback2218
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5005, $P5006
  fallback2218:
    set $P5004, $P5005["mod_ident"]
    unless_null $P5004, fallback2219
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5007
  fallback2219:
    set $P5003, $P5004["sym"]
    unless_null $P5003, fallback2220
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5008
  fallback2220:
    set $S5001, $P5003
    box $P5009, $S5001
    set $P101, $P5009
.annotate 'line', 846
    find_lex $P5012, "$/"
    unless_null $P5012, fallback2221
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5013
  fallback2221:
    set $P5011, $P5012["quote_EXPR"]
    unless_null $P5011, fallback2222
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5014
  fallback2222:
    set $P5010, $P5011[0]
    unless_null $P5010, fallback2223
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5015
  fallback2223:
    $P5016 = $P5010."ast"()
    $P5017 = $P5016."value"()
    set $P102, $P5017
    find_dynamic_lex $P5018, "%*RX"
    unless_null $P5018, fallback2224
    nqp_get_sc_object $P5021, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["%RX"]
    unless_null $P5019, fallback2225
    nqp_get_sc_object $P5023, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5022, $P5023
    new $P5024, 'Hash'
    set $P5022["%RX"], $P5024
    set $P5019, $P5024
  fallback2225:
    unless_null $P5019, vivi_5992226
    die "Contextual %*RX not found"
    box $P5025, "Contextual %*RX not found"
    set $P5019, $P5025
  vivi_5992226:
    set $P5018, $P5019
  fallback2224:
    set $S5002, $P101
    set $P5018[$S5002], $P102
.annotate 'line', 848
    find_dynamic_lex $P5026, "$/"
    set $S5003, $P101
    iseq $I5001, $S5003, "dba"
    unless $I5001 goto if600_else2227 
.annotate 'line', 849
    nqp_get_sc_object $P5030, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Regex"]
    unless_null $P5027, fallback2229
    nqp_get_sc_object $P5031, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5027, $P5031
  fallback2229:
    $P5032 = $P5027."new"("dba" :named("rxtype"), $P102 :named("name"))
    set $P5033, $P5032
    goto if600_end2228
  if600_else2227:
    box $P5034, 0
    set $P5033, $P5034
  if600_end2228:
    $P5035 = $P5026."!make"($P5033)
    .return ($P5035) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_223_1360426899.567") :anon :lex :outer("cuid_167_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 856
    .lex "$n", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    find_lex $P5004, "$/"
    unless_null $P5004, fallback2232
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5005
  fallback2232:
    set $P5003, $P5004["n"]
    unless_null $P5003, fallback2233
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5006
  fallback2233:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback2234
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5007
  fallback2234:
    set $S5001, $P5002
    isgt $I5001, $S5001, ""
    unless $I5001 goto if601_else2230 
    find_lex $P5010, "$/"
    unless_null $P5010, fallback2235
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5011
  fallback2235:
    set $P5009, $P5010["n"]
    unless_null $P5009, fallback2236
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5012
  fallback2236:
    set $P5008, $P5009[0]
    unless_null $P5008, fallback2237
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5013
  fallback2237:
    set $N5001, $P5008
    box $P5015, $N5001
    set $P5014, $P5015
    goto if601_end2231
  if601_else2230:
    box $P5016, 1
    set $P5014, $P5016
  if601_end2231:
    set $P101, $P5014
    find_dynamic_lex $P5017, "%*RX"
    unless_null $P5017, fallback2238
    nqp_get_sc_object $P5020, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5019, $P5020
    set $P5018, $P5019["%RX"]
    unless_null $P5018, fallback2239
    nqp_get_sc_object $P5022, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5021, $P5022
    new $P5023, 'Hash'
    set $P5021["%RX"], $P5023
    set $P5018, $P5023
  fallback2239:
    unless_null $P5018, vivi_6022240
    die "Contextual %*RX not found"
    box $P5024, "Contextual %*RX not found"
    set $P5018, $P5024
  vivi_6022240:
    set $P5017, $P5018
  fallback2238:
    find_lex $P5027, "$/"
    unless_null $P5027, fallback2241
    nqp_get_sc_object $P5028, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5027, $P5028
  fallback2241:
    set $P5026, $P5027["mod_ident"]
    unless_null $P5026, fallback2242
    nqp_get_sc_object $P5029, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5026, $P5029
  fallback2242:
    set $P5025, $P5026["sym"]
    unless_null $P5025, fallback2243
    nqp_get_sc_object $P5030, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5025, $P5030
  fallback2243:
    set $S5002, $P5025
    set $P5017[$S5002], $P101
.annotate 'line', 859
    find_dynamic_lex $P5031, "$/"
    $P5032 = $P5031."!make"(0)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "qbuildsub" :subid("cuid_168_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 870
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_2 :opt_flag 
    .param pmc _lex_param_3 :named("anon") :optional 
    .param int haz_param_3 :opt_flag 
    .param pmc _lex_param_4 :named("addself") :optional 
    .param int haz_param_4 :opt_flag 
    .param pmc _lex_param_5 :slurpy :named 
    if haz_param_2, default2276
    nqp_get_sc_object $P5104, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5103, $P5104, "QAST"
    get_who $P5102, $P5103
    set $P5101, $P5102["Block"]
    unless_null $P5101, fallback2277
    nqp_get_sc_object $P5105, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5101, $P5105
  fallback2277:
    $P5106 = $P5101."new"()
    set _lex_param_2, $P5106
  default2276:
    if haz_param_3, default2278
    nqp_get_sc_object $P5107, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_3, $P5107
  default2278:
    if haz_param_4, default2279
    nqp_get_sc_object $P5108, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_4, $P5108
  default2279:
    .lex "$code_obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$qast", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$anon", _lex_param_3 
    .lex "$addself", _lex_param_4 
    .lex "%rest", _lex_param_5 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    exists $I5001, _lex_param_5["code_obj"]
    unless $I5001 goto if603_else2244 
    set $P5002, _lex_param_5["code_obj"]
    unless_null $P5002, fallback2246
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5003
  fallback2246:
    set $P5006, $P5002
    goto if603_end2245
  if603_else2244:
.annotate 'line', 873
    nqp_decontainerize $P5004, _lex_param_0
    $P5005 = $P5004."create_regex_code_object"(_lex_param_2)
    set $P5006, $P5005
  if603_end2245:
    set $P101, $P5006
    unless _lex_param_4 goto if604_end2248 
.annotate 'line', 875
.annotate 'line', 876
    nqp_get_sc_object $P5010, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Var"]
    unless_null $P5007, fallback2249
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5011
  fallback2249:
    $P5012 = $P5007."new"("self" :named("name"), "local" :named("scope"), "param" :named("decl"))
    $P5013 = _lex_param_2."push"($P5012)
  if604_end2248:
.annotate 'line', 878
    $P5014 = _lex_param_2."symbol"(utf8:"$\x{a2}")
    if $P5014 goto unless605_end2251 
.annotate 'line', 879
    nqp_get_sc_object $P5018, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Var"]
    unless_null $P5015, fallback2252
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5015, $P5019
  fallback2252:
    $P5020 = $P5015."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    _lex_param_2."push"($P5020)
.annotate 'line', 880
    $P5021 = _lex_param_2."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
  unless605_end2251:
.annotate 'line', 883
    nqp_decontainerize $P5022, _lex_param_0
    $P5023 = "&capnames"(_lex_param_1, 0)
    $P5022."store_regex_caps"($P101, _lex_param_2, $P5023)
.annotate 'line', 884
    nqp_decontainerize $P5024, _lex_param_0
    nqp_get_sc_object $P5028, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5027, $P5028, "QRegex"
    get_who $P5026, $P5027
    set $P5025, $P5026["NFA"]
    unless_null $P5025, fallback2253
    nqp_get_sc_object $P5029, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5025, $P5029
  fallback2253:
    $P5030 = $P5025."new"()
    $P5031 = $P5030."addnode"(_lex_param_1)
    $P5024."store_regex_nfa"($P101, _lex_param_2, $P5031)
.annotate 'line', 885
    nqp_decontainerize $P5032, _lex_param_0
    $P5032."alt_nfas"($P101, _lex_param_2, _lex_param_1)
    set _lex_param_2["orig_qast"], _lex_param_1
.annotate 'line', 888
    nqp_get_sc_object $P5036, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Regex"]
    unless_null $P5033, fallback2254
    nqp_get_sc_object $P5037, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5033, $P5037
  fallback2254:
.annotate 'line', 889
    nqp_get_sc_object $P5041, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Regex"]
    unless_null $P5038, fallback2255
    nqp_get_sc_object $P5042, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5038, $P5042
  fallback2255:
    $P5043 = $P5038."new"("scan" :named("rxtype"))
    unless _lex_param_3 goto if606_else2256 
.annotate 'line', 892
    nqp_get_sc_object $P5047, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["Regex"]
    unless_null $P5044, fallback2258
    nqp_get_sc_object $P5048, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5044, $P5048
  fallback2258:
    $P5049 = $P5044."new"("pass" :named("rxtype"))
    set $P5099, $P5049
    goto if606_end2257
  if606_else2256:
    find_dynamic_lex $P5051, "%*RX"
    unless_null $P5051, fallback2261
    nqp_get_sc_object $P5054, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5053, $P5054
    set $P5052, $P5053["%RX"]
    unless_null $P5052, fallback2262
    nqp_get_sc_object $P5056, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5055, $P5056
    new $P5057, 'Hash'
    set $P5055["%RX"], $P5057
    set $P5052, $P5057
  fallback2262:
    unless_null $P5052, vivi_6082263
    die "Contextual %*RX not found"
    box $P5058, "Contextual %*RX not found"
    set $P5052, $P5058
  vivi_6082263:
    set $P5051, $P5052
  fallback2261:
    set $P5050, $P5051["name"]
    unless_null $P5050, fallback2264
    nqp_get_sc_object $P5059, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5050, $P5059
  fallback2264:
    set $S5002, $P5050
    substr $S5001, $S5002, 0, 12
    isne $I5002, $S5001, "!!LATENAME!!"
    unless $I5002 goto if607_else2259 
.annotate 'line', 894
    nqp_get_sc_object $P5063, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5062, $P5063, "QAST"
    get_who $P5061, $P5062
    set $P5060, $P5061["Regex"]
    unless_null $P5060, fallback2265
    nqp_get_sc_object $P5064, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5060, $P5064
  fallback2265:
    find_dynamic_lex $P5066, "%*RX"
    unless_null $P5066, fallback2266
    nqp_get_sc_object $P5069, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5068, $P5069
    set $P5067, $P5068["%RX"]
    unless_null $P5067, fallback2267
    nqp_get_sc_object $P5071, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5070, $P5071
    new $P5072, 'Hash'
    set $P5070["%RX"], $P5072
    set $P5067, $P5072
  fallback2267:
    unless_null $P5067, vivi_6092268
    die "Contextual %*RX not found"
    box $P5073, "Contextual %*RX not found"
    set $P5067, $P5073
  vivi_6092268:
    set $P5066, $P5067
  fallback2266:
    set $P5065, $P5066["name"]
    unless_null $P5065, fallback2269
    nqp_get_sc_object $P5074, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5065, $P5074
  fallback2269:
    $P5075 = $P5060."new"("pass" :named("rxtype"), $P5065 :named("name"))
    set $P5098, $P5075
    goto if607_end2260
  if607_else2259:
.annotate 'line', 895
    nqp_get_sc_object $P5079, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5078, $P5079, "QAST"
    get_who $P5077, $P5078
    set $P5076, $P5077["Regex"]
    unless_null $P5076, fallback2270
    nqp_get_sc_object $P5080, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5076, $P5080
  fallback2270:
.annotate 'line', 896
    nqp_get_sc_object $P5084, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5083, $P5084, "QAST"
    get_who $P5082, $P5083
    set $P5081, $P5082["Var"]
    unless_null $P5081, fallback2271
    nqp_get_sc_object $P5085, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5081, $P5085
  fallback2271:
    find_dynamic_lex $P5087, "%*RX"
    unless_null $P5087, fallback2272
    nqp_get_sc_object $P5090, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5089, $P5090
    set $P5088, $P5089["%RX"]
    unless_null $P5088, fallback2273
    nqp_get_sc_object $P5092, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5091, $P5092
    new $P5093, 'Hash'
    set $P5091["%RX"], $P5093
    set $P5088, $P5093
  fallback2273:
    unless_null $P5088, vivi_6102274
    die "Contextual %*RX not found"
    box $P5094, "Contextual %*RX not found"
    set $P5088, $P5094
  vivi_6102274:
    set $P5087, $P5088
  fallback2272:
    set $P5086, $P5087["name"]
    unless_null $P5086, fallback2275
    nqp_get_sc_object $P5095, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5086, $P5095
  fallback2275:
    set $S5004, $P5086
    substr $S5003, $S5004, 12
    $P5096 = $P5081."new"($S5003 :named("name"), "lexical" :named("scope"))
    $P5097 = $P5076."new"($P5096, "pass" :named("rxtype"))
    set $P5098, $P5097
  if607_end2260:
    set $P5099, $P5098
  if606_end2257:
    $P5100 = $P5033."new"($P5043, _lex_param_1, $P5099, "concat" :named("rxtype"))
    set _lex_param_1, $P5100
.annotate 'line', 902
    _lex_param_2."push"(_lex_param_1)
    .return (_lex_param_2) 
.end
.HLL "nqp"
.namespace []
.sub "alt_nfas" :subid("cuid_169_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 957
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5019 = 'cuid_225_1360426899.567' 
    capture_lex $P5019 
    .const 'Sub' $P5019 = 'cuid_226_1360426899.567' 
    capture_lex $P5019 
    .lex "$rxtype", $P101 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$ast", _lex_param_3 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 958
    $P5002 = _lex_param_3."rxtype"()
    set $P101, $P5002
    set $S5001, $P101
    iseq $I5001, $S5001, "alt"
    unless $I5001 goto if611_else2280 
    .const 'Sub' $P5003 = 'cuid_225_1360426899.567' 
    capture_lex $P5003
    $P5004 = $P5003()
    set $P5018, $P5004
    goto if611_end2281
  if611_else2280:
    set $S5002, $P101
    iseq $I5002, $S5002, "subcapture"
    set $I5004, $I5002
    if $I5002 goto unless613_end2290 
    set $S5003, $P101
    iseq $I5003, $S5003, "quant"
    set $I5004, $I5003
  unless613_end2290:
    unless $I5004 goto if612_else2287 
.annotate 'line', 968
.annotate 'line', 969
    nqp_decontainerize $P5005, _lex_param_0
    set $P5006, _lex_param_3[0]
    unless_null $P5006, fallback2291
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5007
  fallback2291:
    $P5008 = $P5005."alt_nfas"(_lex_param_1, _lex_param_2, $P5006)
    set $P5017, $P5008
    goto if612_end2288
  if612_else2287:
    set $S5004, $P101
    iseq $I5005, $S5004, "concat"
    set $I5007, $I5005
    if $I5005 goto unless617_end2299 
    set $S5005, $P101
    iseq $I5006, $S5005, "altseq"
    set $I5007, $I5006
  unless617_end2299:
    set $I5009, $I5007
    if $I5007 goto unless616_end2297 
    set $S5006, $P101
    iseq $I5008, $S5006, "conj"
    set $I5009, $I5008
  unless616_end2297:
    set $I5011, $I5009
    if $I5009 goto unless615_end2295 
    set $S5007, $P101
    iseq $I5010, $S5007, "conjseq"
    set $I5011, $I5010
  unless615_end2295:
    box $P5016, $I5011
    set $P5015, $P5016
    unless $I5011 goto if614_end2293 
.annotate 'line', 971
.annotate 'line', 972
    $P5012 = _lex_param_3."list"()
    set $P5009, $P5012
    iter $P5011, $P5012
  for_next2300:
    unless $P5011, for_done2302
    shift $P5014, $P5011
  for_redo2301:
    .const 'Sub' $P5013 = 'cuid_226_1360426899.567' 
    capture_lex $P5013
    $P5009 = $P5013($P5014)
    goto for_next2300
  for_done2302:
    set $P5015, $P5009
  if614_end2293:
    set $P5017, $P5015
  if612_end2288:
    set $P5018, $P5017
  if611_end2281:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_225_1360426899.567") :anon :lex :outer("cuid_169_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 959
    .const 'Sub' $P5023 = 'cuid_224_1360426899.567' 
    capture_lex $P5023 
    .lex "@alternatives", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 961
    find_lex $P5005, "$ast"
    $P5006 = $P5005."list"()
    set $P5002, $P5006
    iter $P5004, $P5006
  for_next2283:
    unless $P5004, for_done2285
    shift $P5008, $P5004
  for_redo2284:
    .const 'Sub' $P5007 = 'cuid_224_1360426899.567' 
    capture_lex $P5007
    $P5002 = $P5007($P5008)
    goto for_next2283
  for_done2285:
.annotate 'line', 965
    find_lex $P5009, "$ast"
    nqp_get_sc_object $P5013, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Node"]
    unless_null $P5010, fallback2286
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5014
  fallback2286:
    $P5015 = $P5010."unique"("alt_nfa_")
    set $S5003, $P5015
    concat $S5002, $S5003, "_"
    time $N5001
    set $S5004, $N5001
    concat $S5001, $S5002, $S5004
    $P5009."name"($S5001)
.annotate 'line', 966
    find_lex $P5017, "self"
    nqp_decontainerize $P5016, $P5017
    find_lex $P5018, "$code_obj"
    find_lex $P5019, "$block"
    find_lex $P5020, "$ast"
    $P5021 = $P5020."name"()
    $P5022 = $P5016."store_regex_alt_nfa"($P5018, $P5019, $P5021, $P101)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_224_1360426899.567") :anon :lex :outer("cuid_225_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 961
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 962
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$code_obj"
    find_lex $P5004, "$block"
    $P5001."alt_nfas"($P5003, $P5004, _lex_param_0)
    find_lex $P5005, "@alternatives"
.annotate 'line', 963
    nqp_get_sc_object $P5009, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5008, $P5009, "QRegex"
    get_who $P5007, $P5008
    set $P5006, $P5007["NFA"]
    unless_null $P5006, fallback2282
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5010
  fallback2282:
    $P5011 = $P5006."new"()
    $P5012 = $P5011."addnode"(_lex_param_0)
    push $P5005, $P5012
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_226_1360426899.567") :anon :lex :outer("cuid_169_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 972
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$code_obj"
    find_lex $P5004, "$block"
    $P5005 = $P5001."alt_nfas"($P5003, $P5004, _lex_param_0)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "subrule_alias" :subid("cuid_170_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 976
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "self", _lex_param_0 
    .lex "$ast", _lex_param_1 
    .lex "$name", _lex_param_2 
.annotate 'line', 977
    $P5001 = _lex_param_1."name"()
    set $S5001, $P5001
    isgt $I5001, $S5001, ""
    unless $I5001 goto if618_else2303 
    set $S5004, _lex_param_2
    concat $S5003, $S5004, "="
    $P5002 = _lex_param_1."name"()
    set $S5005, $P5002
    concat $S5002, $S5003, $S5005
    $P5003 = _lex_param_1."name"($S5002)
    goto if618_end2304
  if618_else2303:
.annotate 'line', 978
    $P5004 = _lex_param_1."name"(_lex_param_2)
  if618_end2304:
.annotate 'line', 979
    $P5005 = _lex_param_1."subtype"("capture")
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "flip_ast" :subid("cuid_171_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 982
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_227_1360426899.567' 
    capture_lex $P5022 
    .const 'Sub' $P5022 = 'cuid_228_1360426899.567' 
    capture_lex $P5022 
    .lex "self", _lex_param_0 
    .lex "$qast", _lex_param_1 
    root_new $P101, ['parrot';'Continuation']
    set_label $P101, lexotic_2305
    .lex "RETURN", $P101
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback2309
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback2309:
    type_check $I5001, _lex_param_1, $P5001
    if $I5001 goto unless619_end2308 
    find_lex $P5006, "RETURN"
    $P5007 = $P5006(_lex_param_1)
  unless619_end2308:
.annotate 'line', 984
    $P5008 = _lex_param_1."rxtype"()
    set $S5001, $P5008
    iseq $I5002, $S5001, "literal"
    unless $I5002 goto if620_else2310 
.annotate 'line', 985
    set $P5009, _lex_param_1[0]
    unless_null $P5009, fallback2312
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5010
  fallback2312:
    $P5011 = $P5009."reverse"()
    set _lex_param_1[0], $P5011
    goto if620_end2311
  if620_else2310:
.annotate 'line', 987
    $P5012 = _lex_param_1."rxtype"()
    set $S5002, $P5012
    iseq $I5003, $S5002, "concat"
    unless $I5003 goto if621_else2313 
    .const 'Sub' $P5013 = 'cuid_227_1360426899.567' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5021, $P5014
    goto if621_end2314
  if621_else2313:
.annotate 'line', 992
    $P5018 = _lex_param_1."list"()
    set $P5015, $P5018
    iter $P5017, $P5018
  for_next2325:
    unless $P5017, for_done2327
    shift $P5020, $P5017
  for_redo2326:
    .const 'Sub' $P5019 = 'cuid_228_1360426899.567' 
    capture_lex $P5019
    $P5015 = $P5019($P5020)
    goto for_next2325
  for_done2327:
    set $P5021, $P5015
  if621_end2314:
  if620_end2311:
    goto lexotic_2306
  lexotic_2305:
    .get_results (_lex_param_1)
  lexotic_2306:
    .return (_lex_param_1) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_227_1360426899.567") :anon :lex :outer("cuid_171_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 987
    .lex "@tmp", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
  while622_test2315:
    find_lex $P5002, "$qast"
    $P5003 = $P5002."list"()
    set $N5001, $P5003
    box $P5009, $N5001
    set $P5008, $P5009
    unless $N5001 goto while622_done2319 
  while622_redo2317:
.annotate 'line', 989
    find_lex $P5004, "$qast"
    $P5005 = $P5004."list"()
    $P5006 = $P5005."shift"()
    $P5007 = $P101."push"($P5006)
    set $P5008, $P5007
    goto while622_test2315 
  while622_done2319:
  while623_test2320:
    set $P5017, $P101
    unless $P101 goto while623_done2324 
  while623_redo2322:
.annotate 'line', 990
    find_lex $P5010, "$qast"
    $P5011 = $P5010."list"()
    find_lex $P5013, "self"
    nqp_decontainerize $P5012, $P5013
    $P5014 = $P101."pop"()
    $P5015 = $P5012."flip_ast"($P5014)
    $P5016 = $P5011."push"($P5015)
    set $P5017, $P5016
    goto while623_test2320 
  while623_done2324:
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_228_1360426899.567") :anon :lex :outer("cuid_171_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 993
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    $P5003 = $P5001."flip_ast"(_lex_param_0)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "create_regex_code_object" :subid("cuid_172_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 1000
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
.annotate 'line', 1001
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback2328
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback2329
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback2329:
    unless_null $P5002, vivi_6242330
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_6242330:
    set $P5001, $P5002
  fallback2328:
    $P5007 = _lex_param_1."name"()
    $P5008 = $P5001."create_code"(_lex_param_1, $P5007)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_caps" :subid("cuid_173_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 1005
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "%caps", _lex_param_3 
.annotate 'line', 1006
    $P5001 = _lex_param_1."SET_CAPS"(_lex_param_3)
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_nfa" :subid("cuid_174_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 1010
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$nfa", _lex_param_3 
.annotate 'line', 1011
    $P5001 = _lex_param_3."save"()
    $P5002 = _lex_param_1."SET_NFA"($P5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_alt_nfa" :subid("cuid_175_1360426899.567") :anon :lex :outer("cuid_191_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 1015
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .const 'Sub' $P5008 = 'cuid_229_1360426899.567' 
    capture_lex $P5008 
    .lex "@saved", $P101 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$key", _lex_param_3 
    .lex "@alternatives", _lex_param_4 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    set $P5002, _lex_param_4
    iter $P5004, _lex_param_4
  for_next2331:
    unless $P5004, for_done2333
    shift $P5006, $P5004
  for_redo2332:
    .const 'Sub' $P5005 = 'cuid_229_1360426899.567' 
    capture_lex $P5005
    $P5002 = $P5005($P5006)
    goto for_next2331
  for_done2333:
.annotate 'line', 1020
    $P5007 = _lex_param_1."SET_ALT_NFA"(_lex_param_3, $P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_229_1360426899.567") :anon :lex :outer("cuid_175_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 1017
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1018
    find_lex $P5001, "@saved"
    $P5002 = _lex_param_0."save"(1 :named("non_empty"))
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_230_1360426899.567") :anon :lex :outer("cuid_177_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 1025
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_232_1360426899.567") :load :init
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .const 'Sub' $P5001 = 'cuid_231_1360426899.567' 
    capture_lex $P5001 
    .local pmc cur_sc 
    .local pmc conflicts 
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P5001
    get_class $P5002, "LexPad"
    get_class $P5003, "NQPLexPad"
    $P5004 = $P5001."hll_map"($P5002, $P5003)
    load_bytecode "ModuleLoader.pbc"
    .const 'Sub' $P5001 = "cuid_177_1360426899.567" 
    get_hll_global $P5002, "ModuleLoader"
    $P5003 = $P5002."load_setting"("NQPCORE")
    $P5004 = $P5001."set_outer_ctx"($P5003)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPHLL")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QAST")
    nqp_create_sc $P5001, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592"
    set cur_sc, $P5001
    $P5002 = cur_sc."set_description"("src\\stage2\\gen\\NQPP6QRegex.pm")
    new $P5003, 'ResizablePMCArray'
    set conflicts, $P5003
    new $P5004, 'ResizableStringArray'
    null $S5001
    push $P5004, $S5001
    push $P5004, "P6opaque"
    push $P5004, "QAST"
    push $P5004, "QRegex"
    push $P5004, "NQPCursorRole"
    push $P5004, "5AB04DFAFFF209D71179F6DD66C39F5290FAF9C0-1360426879.021"
    push $P5004, "src\\stage2\\QRegex.nqp"
    push $P5004, "NQPMatch"
    push $P5004, "NQPCursor"
    push $P5004, "NQPRegexMethod"
    push $P5004, "NQPRegex"
    push $P5004, "HLL"
    push $P5004, "PIRT"
    push $P5004, "DEFAULT"
    push $P5004, "CREATE"
    push $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54"
    push $P5004, "src\\stage2\\NQPCORE.setting"
    push $P5004, "bless"
    push $P5004, "BUILDALL"
    push $P5004, "new"
    push $P5004, "Str"
    push $P5004, "Numeric"
    push $P5004, "Int"
    push $P5004, "at_pos"
    push $P5004, "at_key"
    push $P5004, "defined"
    push $P5004, "ACCEPTS"
    push $P5004, "isa"
    push $P5004, "__dump"
    push $P5004, "BUILD"
    push $P5004, "72EB0CEEE110B04F66601526175C9117F069D82E-1360426882.856"
    push $P5004, "src\\stage2\\gen\\NQPHLL.pm"
    push $P5004, "slot_for_object"
    push $P5004, "add_object"
    push $P5004, "add_root_code_ref"
    push $P5004, "update_root_code_ref"
    push $P5004, "is_precompilation_mode"
    push $P5004, "add_load_dependency_task"
    push $P5004, "add_fixup_task"
    push $P5004, "sc"
    push $P5004, "handle"
    push $P5004, "code_ref_blocks"
    push $P5004, "load_dependency_tasks"
    push $P5004, "fixup_tasks"
    push $P5004, "create_code"
    push $P5004, "$!sc"
    push $P5004, "$!handle"
    push $P5004, "$!precomp_mode"
    push $P5004, "$!num_code_refs"
    push $P5004, "$!code_ref_blocks"
    push $P5004, "@!load_dependency_tasks"
    push $P5004, "@!fixup_tasks"
    push $P5004, "%!addr_to_slot"
    push $P5004, "MATCH"
    push $P5004, "Bool"
    push $P5004, "parse"
    push $P5004, "!INTERPOLATE"
    push $P5004, "!INTERPOLATE_REGEX"
    push $P5004, "orig"
    push $P5004, "target"
    push $P5004, "from"
    push $P5004, "pos"
    push $P5004, "CAPHASH"
    push $P5004, "!cursor_init"
    push $P5004, "!cursor_start"
    push $P5004, "!cursor_start_subcapture"
    push $P5004, "!cursor_capture"
    push $P5004, "!cursor_push_cstack"
    push $P5004, "!cursor_pass"
    push $P5004, "!cursor_fail"
    push $P5004, "!cursor_pos"
    push $P5004, "!cursor_next"
    push $P5004, "!cursor_more"
    push $P5004, "!reduce"
    push $P5004, "!reduce_with_match"
    push $P5004, "!shared"
    push $P5004, "!protoregex"
    push $P5004, "!protoregex_nfa"
    push $P5004, "!protoregex_table"
    push $P5004, "!alt"
    push $P5004, "!alt_nfa"
    push $P5004, "!precompute_nfas"
    push $P5004, "!dba"
    push $P5004, "!highwater"
    push $P5004, "!highexpect"
    push $P5004, "!fresh_highexpect"
    push $P5004, "!set_highexpect"
    push $P5004, "!clear_highwater"
    push $P5004, "!BACKREF"
    push $P5004, "!LITERAL"
    push $P5004, "at"
    push $P5004, "before"
    push $P5004, "after"
    push $P5004, "ws"
    push $P5004, "ww"
    push $P5004, "wb"
    push $P5004, "ident"
    push $P5004, "alpha"
    push $P5004, "alnum"
    push $P5004, "upper"
    push $P5004, "lower"
    push $P5004, "digit"
    push $P5004, "xdigit"
    push $P5004, "space"
    push $P5004, "blank"
    push $P5004, "cntrl"
    push $P5004, "punct"
    push $P5004, "FAILGOAL"
    push $P5004, "throw_unrecog_backslash_seq"
    push $P5004, "termish"
    push $P5004, "term"
    push $P5004, "infix"
    push $P5004, "prefix"
    push $P5004, "postfix"
    push $P5004, "circumfix"
    push $P5004, "postcircumfix"
    push $P5004, "term:sym<circumfix>"
    push $P5004, "infixish"
    push $P5004, "prefixish"
    push $P5004, "postfixish"
    push $P5004, "nullterm"
    push $P5004, "nullterm_alt"
    push $P5004, "nulltermish"
    push $P5004, "quote_delimited"
    push $P5004, "quote_atom"
    push $P5004, "decint"
    push $P5004, "decints"
    push $P5004, "hexint"
    push $P5004, "hexints"
    push $P5004, "octint"
    push $P5004, "octints"
    push $P5004, "binint"
    push $P5004, "binints"
    push $P5004, "integer"
    push $P5004, "dec_number"
    push $P5004, "escale"
    push $P5004, "quote_escape"
    push $P5004, "quote_escape:sym<backslash>"
    push $P5004, "quote_escape:sym<stopper>"
    push $P5004, "quote_escape:sym<bs>"
    push $P5004, "quote_escape:sym<nl>"
    push $P5004, "quote_escape:sym<cr>"
    push $P5004, "quote_escape:sym<tab>"
    push $P5004, "quote_escape:sym<ff>"
    push $P5004, "quote_escape:sym<esc>"
    push $P5004, "quote_escape:sym<hex>"
    push $P5004, "quote_escape:sym<oct>"
    push $P5004, "quote_escape:sym<chr>"
    push $P5004, "quote_escape:sym<0>"
    push $P5004, "quote_escape:sym<misc>"
    push $P5004, "charname"
    push $P5004, "charnames"
    push $P5004, "charspec"
    push $P5004, "O"
    push $P5004, "panic"
    push $P5004, "peek_delimiters"
    push $P5004, "quote_EXPR"
    push $P5004, "quotemod_check"
    push $P5004, "starter"
    push $P5004, "stopper"
    push $P5004, "split_words"
    push $P5004, "EXPR"
    push $P5004, "EXPR_reduce"
    push $P5004, "EXPR_nonassoc"
    push $P5004, "ternary"
    push $P5004, "MARKER"
    push $P5004, "MARKED"
    push $P5004, "LANG"
    push $P5004, "obs"
    push $P5004, "throw_unrecognized_metachar"
    push $P5004, "throw_null_pattern"
    push $P5004, "normspace"
    push $P5004, "identifier"
    push $P5004, "arg"
    push $P5004, "arglist"
    push $P5004, "TOP"
    push $P5004, "nibbler"
    push $P5004, "infixstopper"
    push $P5004, "rxstopper"
    push $P5004, "termaltseq"
    push $P5004, "termconjseq"
    push $P5004, "termalt"
    push $P5004, "termconj"
    push $P5004, "quantified_atom"
    push $P5004, "separator"
    push $P5004, "atom"
    push $P5004, "quantifier"
    push $P5004, "quantifier:sym<*>"
    push $P5004, "quantifier:sym<+>"
    push $P5004, "quantifier:sym<?>"
    push $P5004, "quantifier:sym<{N,M}>"
    push $P5004, "quantifier:sym<**>"
    push $P5004, "backmod"
    push $P5004, "metachar"
    push $P5004, "metachar:sym<ws>"
    push $P5004, "metachar:sym<[ ]>"
    push $P5004, "metachar:sym<( )>"
    push $P5004, "metachar:sym<'>"
    push $P5004, "metachar:sym<\">"
    push $P5004, "metachar:sym<.>"
    push $P5004, "metachar:sym<^>"
    push $P5004, "metachar:sym<^^>"
    push $P5004, "metachar:sym<$>"
    push $P5004, "metachar:sym<$$>"
    push $P5004, "metachar:sym<:::>"
    push $P5004, "metachar:sym<::>"
    push $P5004, "metachar:sym<lwb>"
    push $P5004, "metachar:sym<rwb>"
    push $P5004, "metachar:sym<from>"
    push $P5004, "metachar:sym<to>"
    push $P5004, "metachar:sym<bs>"
    push $P5004, "metachar:sym<mod>"
    push $P5004, "metachar:sym<quantifier>"
    push $P5004, "metachar:sym<~>"
    push $P5004, "metachar:sym<{*}>"
    push $P5004, "metachar:sym<assert>"
    push $P5004, "sigil"
    push $P5004, "metachar:sym<var>"
    push $P5004, "backslash"
    push $P5004, "backslash:sym<s>"
    push $P5004, "backslash:sym<b>"
    push $P5004, "backslash:sym<e>"
    push $P5004, "backslash:sym<f>"
    push $P5004, "backslash:sym<h>"
    push $P5004, "backslash:sym<r>"
    push $P5004, "backslash:sym<t>"
    push $P5004, "backslash:sym<v>"
    push $P5004, "backslash:sym<o>"
    push $P5004, "backslash:sym<x>"
    push $P5004, "backslash:sym<c>"
    push $P5004, "backslash:sym<A>"
    push $P5004, "backslash:sym<z>"
    push $P5004, "backslash:sym<Z>"
    push $P5004, "backslash:sym<Q>"
    push $P5004, "backslash:sym<unrec>"
    push $P5004, "backslash:sym<misc>"
    push $P5004, "assertion"
    push $P5004, "assertion:sym<?>"
    push $P5004, "assertion:sym<!>"
    push $P5004, "assertion:sym<|>"
    push $P5004, "assertion:sym<method>"
    push $P5004, "assertion:sym<name>"
    push $P5004, "assertion:sym<[>"
    push $P5004, "cclass_elem"
    push $P5004, "mod_internal"
    push $P5004, "mod_ident"
    push $P5004, "mod_ident:sym<ignorecase>"
    push $P5004, "mod_ident:sym<ratchet>"
    push $P5004, "mod_ident:sym<sigspace>"
    push $P5004, "mod_ident:sym<dba>"
    push $P5004, "mod_ident:sym<oops>"
    push $P5004, "$!shared"
    push $P5004, "$!from"
    push $P5004, "$!pos"
    push $P5004, "$!match"
    push $P5004, "$!name"
    push $P5004, "$!bstack"
    push $P5004, "$!cstack"
    push $P5004, "$!regexsub"
    push $P5004, "$!restart"
    push $P5004, "ints_to_string"
    push $P5004, "CTXSAVE"
    push $P5004, "SET_BLOCK_OUTER_CTX"
    push $P5004, "qbuildsub"
    push $P5004, "alt_nfas"
    push $P5004, "subrule_alias"
    push $P5004, "flip_ast"
    push $P5004, "create_regex_code_object"
    push $P5004, "store_regex_caps"
    push $P5004, "store_regex_nfa"
    push $P5004, "store_regex_alt_nfa"
    push $P5004, "language"
    push $P5004, "compiler"
    push $P5004, "config"
    push $P5004, "load_module"
    push $P5004, "autoprint"
    push $P5004, "interactive"
    push $P5004, "interactive_result"
    push $P5004, "interactive_exception"
    push $P5004, "eval"
    push $P5004, "ctxsave"
    push $P5004, "stages"
    push $P5004, "parsegrammar"
    push $P5004, "parseactions"
    push $P5004, "interactive_banner"
    push $P5004, "interactive_prompt"
    push $P5004, "compiler_progname"
    push $P5004, "commandline_options"
    push $P5004, "command_line"
    push $P5004, "command_eval"
    push $P5004, "process_args"
    push $P5004, "evalfiles"
    push $P5004, "compile"
    push $P5004, "start"
    push $P5004, "past"
    push $P5004, "post"
    push $P5004, "pirbegin"
    push $P5004, "pir"
    push $P5004, "evalpmc"
    push $P5004, "dumper"
    push $P5004, "usage"
    push $P5004, "version"
    push $P5004, "show-config"
    push $P5004, "verbose-config"
    push $P5004, "vmstat"
    push $P5004, "nqpevent"
    push $P5004, "removestage"
    push $P5004, "addstage"
    push $P5004, "parse_name"
    push $P5004, "lineof"
    push $P5004, "user-progname"
    push $P5004, "cli-options"
    push $P5004, "cli-arguments"
    push $P5004, "@!stages"
    push $P5004, "$!parsegrammar"
    push $P5004, "$!parseactions"
    push $P5004, "@!cmdoptions"
    push $P5004, "$!usage"
    push $P5004, "$!compiler_progname"
    push $P5004, "$!language"
    push $P5004, "%!config"
    push $P5004, "$!user_progname"
    push $P5004, "@!cli-arguments"
    push $P5004, "%!cli-options"
    push $P5004, ""
    push $P5004, "alt_nfa__1_1360426899.713"
    push $P5004, "alt_nfa__2_1360426899.719"
    push $P5004, "val"
    push $P5004, "'"
    push $P5004, "\""
    push $P5004, "alt_nfa__3_1360426899.742"
    push $P5004, "0"
    push $P5004, "alt_nfa__4_1360426899.803"
    push $P5004, ">"
    push $P5004, "alt_nfa__5_1360426899.819"
    push $P5004, "|"
    push $P5004, "&"
    push $P5004, "noun"
    push $P5004, "&|~"
    push $P5004, "alt_nfa__6_1360426899.872"
    push $P5004, "alt_nfa__7_1360426899.896"
    push $P5004, "septype"
    push $P5004, "alt_nfa__8_1360426899.914"
    push $P5004, "sym"
    push $P5004, "1"
    push $P5004, "2"
    push $P5004, "min"
    push $P5004, "max"
    push $P5004, "alt_nfa__9_1360426899.98"
    push $P5004, "alt_nfa__10_1360426900.048"
    push $P5004, "alt_nfa__11_1360426900.055"
    push $P5004, "GOAL"
    push $P5004, "key"
    push $P5004, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5004, "$@%&"
    push $P5004, "name"
    push $P5004, "alt_nfa__12_1360426900.135"
    push $P5004, "dDnNsSwW"
    push $P5004, "bB"
    push $P5004, "eE"
    push $P5004, "fF"
    push $P5004, "hH"
    push $P5004, "rR"
    push $P5004, "tT"
    push $P5004, "vV"
    push $P5004, "oO"
    push $P5004, "alt_nfa__13_1360426900.192"
    push $P5004, "xX"
    push $P5004, "alt_nfa__14_1360426900.203"
    push $P5004, "cC"
    push $P5004, "alt_nfa__15_1360426900.267"
    push $P5004, "alt_nfa__16_1360426900.278"
    push $P5004, "longname"
    push $P5004, "alt_nfa__17_1360426900.309"
    push $P5004, "alt_nfa__18_1360426900.317"
    push $P5004, "sign"
    push $P5004, "invert"
    push $P5004, "uniprop"
    push $P5004, "alt_nfa__19_1360426900.377"
    push $P5004, "alt_nfa__20_1360426900.377"
    push $P5004, "alt_nfa__21_1360426900.377"
    push $P5004, "n"
    push $P5004, "alt_nfa__23_1360426900.404"
    push $P5004, "alt_nfa__24_1360426900.405"
    push $P5004, "alt_nfa__22_1360426900.384"
    push $P5004, "__6MODEL_CORE__"
    push $P5004, "GLOBALish"
    push $P5004, "EXPORT"
    push $P5004, "46A27B8E73DBD8EFB3FE1AA531DA4577B21729DD-1360426872.168"
    push $P5004, "src\\stage2\\gen\\nqp-mo.pm"
    push $P5004, "QRegex::P6Regex::World"
    push $P5004, "QRegex::P6Regex::Grammar"
    push $P5004, "alt_nfa__1_1360426882.957"
    push $P5004, "alt_nfa__2_1360426882.986"
    push $P5004, "alt_nfa__3_1360426883.049"
    push $P5004, "alt_nfa__4_1360426883.049"
    push $P5004, "alt_nfa__5_1360426883.067"
    push $P5004, "alt_nfa__6_1360426883.137"
    push $P5004, "alt_nfa__7_1360426883.149"
    push $P5004, "alt_nfa__8_1360426883.184"
    push $P5004, "alt_nfa__9_1360426883.221"
    push $P5004, "shared"
    push $P5004, "match"
    push $P5004, "bstack"
    push $P5004, "cstack"
    push $P5004, "regexsub"
    push $P5004, "restart"
    push $P5004, "QRegex::P6Regex::Actions"
    push $P5004, "QRegex::P6Regex::Compiler"
    push $P5004, "CompileTimeValue"
    push $P5004, "A30E853E22E2B1259976A8228F13C253B666CE13-1360426877.356"
    push $P5004, "src\\stage2\\QASTNode.nqp"
    push $P5004, "SpecialArg"
    push $P5004, "Node"
    push $P5004, "Regex"
    push $P5004, "IVal"
    push $P5004, "NVal"
    push $P5004, "SVal"
    push $P5004, "BVal"
    push $P5004, "WVal"
    push $P5004, "Want"
    push $P5004, "Var"
    push $P5004, "VarWithFallback"
    push $P5004, "Op"
    push $P5004, "VM"
    push $P5004, "Stmts"
    push $P5004, "Stmt"
    push $P5004, "Block"
    push $P5004, "Unquote"
    push $P5004, "CompUnit"
    push $P5004, "InlinePlaceholder"
    push $P5004, "Operations"
    push $P5004, "39F39657838AC815989B5881161D3952D9694BB1-1360426887.497"
    push $P5004, "src\\stage2\\QAST.nqp"
    push $P5004, "Compiler"
    push $P5004, "NFA"
    push $P5004, "P6Regex"
    push $P5004, "Grammar"
    push $P5004, "Actions"
    push $P5004, "CommandLine"
    push $P5004, "World"
    push $P5004, "CallResult"
    push $P5004, "Sub"
    push $P5004, "Ops"
    push $P5004, "Label"
    push $P5004, "01234567"
    push $P5004, "0123456789abcdefABCDEF"
    push $P5004, "?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    push $P5004, "01"
    push $P5004, "Ee"
    .const 'Sub' $P5005 = 'cuid_231_1360426899.567' 
    capture_lex $P5005
    $P5006 = $P5005()
    nqp_deserialize_sc "", cur_sc, $P5004, $P5006, conflicts
    unless conflicts goto if626_end2340 
    die "Repossession conflicts occurred during deserialization"
  if626_end2340:
    .const "LexInfo" $P5001 = "cuid_177_1360426899.567"
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    $P5001."set_static_lexpad_value"("GLOBALish", $P5002)
    .const "LexInfo" $P5003 = "cuid_177_1360426899.567"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_177_1360426899.567"
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 0
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_177_1360426899.567"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_177_1360426899.567"
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 1
    $P5001."set_static_lexpad_value"("EXPORT", $P5002)
    .const "LexInfo" $P5003 = "cuid_177_1360426899.567"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_177_1360426899.567"
    nqp_get_sc_object $P5002, "5AB04DFAFFF209D71179F6DD66C39F5290FAF9C0-1360426879.021", 32
    $P5001."set_static_lexpad_value"("NQPCursorRole", $P5002)
    .const "LexInfo" $P5003 = "cuid_177_1360426899.567"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_1_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 4
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_179_1360426899.567"
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 3
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_179_1360426899.567"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_179_1360426899.567"
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 3
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_179_1360426899.567"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_2_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 6
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_3_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 7
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_4_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 8
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_5_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 9
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_6_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 10
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_7_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 11
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_8_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 12
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_9_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 13
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_10_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 14
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_11_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 15
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_12_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 16
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_13_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 17
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_14_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 18
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_15_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 19
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_16_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 20
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_17_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 21
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_18_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 22
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_19_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 23
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_20_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 24
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_21_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 25
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_22_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 26
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_23_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 27
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_24_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 28
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_25_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 29
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_26_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 30
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_27_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 31
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_28_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 32
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_29_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 33
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_30_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 34
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_31_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 35
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_32_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 36
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_33_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 37
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_34_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 38
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_35_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 39
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_36_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 40
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_37_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 41
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_38_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 42
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_39_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 43
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_40_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 44
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_41_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 45
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_42_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 46
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_43_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 47
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_44_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 48
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_45_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 49
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_46_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 50
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_47_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 51
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_48_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 52
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_49_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 53
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_50_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 54
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_51_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 55
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_52_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 56
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_53_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 57
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_54_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 58
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_55_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 59
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_56_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 60
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_57_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 61
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_58_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 62
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_59_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 63
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_60_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 64
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_61_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 65
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_62_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 66
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_63_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 67
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_64_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 68
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_65_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 69
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_66_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 70
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_67_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 71
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_68_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 72
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_69_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 73
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_70_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 74
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_71_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 75
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_72_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 76
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_73_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 77
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_74_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 78
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_75_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 79
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_76_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 80
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_77_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 81
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_78_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 82
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_79_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 83
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_80_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 84
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_81_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 85
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_82_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 86
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_83_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 87
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_84_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 88
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_85_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 89
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_86_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 90
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_87_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 91
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_88_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 92
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_89_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 93
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_90_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 94
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_91_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 95
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_92_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 96
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_93_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 97
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_94_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 98
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_95_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 99
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_96_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 100
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_97_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 101
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_98_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 102
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_99_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 103
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_100_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 104
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_101_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 105
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_102_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 106
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_103_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 107
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_104_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 108
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_105_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 109
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_106_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 110
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_107_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 111
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_108_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 112
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_109_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 113
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_110_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 114
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_111_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 115
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_112_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 116
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_180_1360426899.567"
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 5
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_180_1360426899.567"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_180_1360426899.567"
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 5
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_180_1360426899.567"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_113_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 118
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_114_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 119
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_115_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 120
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_116_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 121
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_117_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 122
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_118_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 123
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_119_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 124
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_120_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 125
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_121_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 126
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_122_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 127
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_123_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 128
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_124_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 129
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_125_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 130
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_126_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 131
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_127_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 132
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_128_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 133
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_129_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 134
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_130_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 135
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_131_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 136
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_132_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 137
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_133_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 138
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_134_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 139
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_135_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 140
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_136_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 141
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_137_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 142
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_138_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 143
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_139_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 144
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_140_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 145
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_141_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 146
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_142_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 147
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_143_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 148
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_144_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 149
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_145_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 150
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_146_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 151
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_147_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 152
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_148_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 153
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_149_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 154
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_150_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 155
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_151_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 156
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_152_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 157
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_153_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 158
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_154_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 159
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_155_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 160
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_156_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 161
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_157_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 162
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_158_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 163
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_159_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 164
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_160_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 165
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_161_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 166
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_162_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 167
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_163_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 168
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_164_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 169
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_165_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 170
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_166_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 171
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_167_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 172
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_168_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 173
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_169_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 174
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_170_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 175
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_171_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 176
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_172_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 177
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_173_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 178
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_174_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 179
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_175_1360426899.567" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 180
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_191_1360426899.567"
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 117
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_191_1360426899.567"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_191_1360426899.567"
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 117
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_191_1360426899.567"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_230_1360426899.567"
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 181
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_230_1360426899.567"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_230_1360426899.567"
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592", 181
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_230_1360426899.567"
    $P5004 = $P5003."finish_static_lexpad"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_231_1360426899.567") :anon :lex :outer("cuid_232_1360426899.567")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    new $P5001, 'ResizablePMCArray'
    .const 'Sub' $P5002 = "cuid_1_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_2_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_3_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_4_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_5_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_6_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_7_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_8_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_9_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_10_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_11_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_12_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_13_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_14_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_15_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_16_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_17_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_18_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_19_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_20_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_21_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_22_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_23_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_24_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_25_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_26_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_27_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_28_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_29_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_30_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_31_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_32_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_33_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_34_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_35_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_36_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_37_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_38_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_39_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_40_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_41_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_42_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_43_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_44_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_45_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_46_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_47_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_48_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_49_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_50_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_51_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_52_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_53_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_54_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_55_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_56_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_57_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_58_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_59_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_60_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_61_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_62_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_63_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_64_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_65_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_66_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_67_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_68_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_69_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_70_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_71_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_72_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_73_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_74_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_75_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_76_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_77_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_78_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_79_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_80_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_81_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_82_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_83_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_84_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_85_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_86_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_87_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_88_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_89_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_90_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_91_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_92_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_93_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_94_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_95_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_96_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_97_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_98_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_99_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_100_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_101_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_102_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_103_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_104_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_105_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_106_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_107_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_108_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_109_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_110_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_111_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_112_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_113_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_114_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_115_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_116_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_117_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_118_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_119_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_120_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_121_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_122_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_123_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_124_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_125_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_126_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_127_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_128_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_129_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_130_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_131_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_132_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_133_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_134_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_135_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_136_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_137_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_138_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_139_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_140_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_141_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_142_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_143_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_144_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_145_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_146_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_147_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_148_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_149_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_150_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_151_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_152_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_153_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_154_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_155_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_156_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_157_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_158_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_159_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_160_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_161_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_162_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_163_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_164_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_165_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_166_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_167_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_168_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_169_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_170_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_171_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_172_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_173_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_174_1360426899.567" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_175_1360426899.567" 
    push $P5001, $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_233_1360426899.567") :load
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .const 'Sub' $P5001 = "cuid_177_1360426899.567" 
    $P5002 = $P5001()
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_234_1360426899.567") :main
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc ARGS :slurpy 
    .const 'Sub' $P5001 = "cuid_177_1360426899.567" 
    $P5002 = $P5001(ARGS :flat)
    .return ($P5002) 
.end