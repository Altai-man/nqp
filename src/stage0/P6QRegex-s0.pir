.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'
.include 'libpaths.pasm'
.loadlib "nqp_group"
.loadlib "nqp_ops"
.loadlib "nqp_bigint_ops"
.loadlib "trans_ops"
.loadlib "io_ops"
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_177_1361734134.987") :anon :lex
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc _lex_param_0 :slurpy 
    .const 'Sub' $P5021 = 'cuid_176_1361734134.987' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_179_1361734134.987' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_180_1361734134.987' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_196_1361734134.987' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_235_1361734134.987' 
    capture_lex $P5021 
    .lex "GLOBALish", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "EXPORT", $P103 
    .lex "ParseShared", $P104 
    .lex "NQPCursorRole", $P105 
    .lex "$p6regex", $P106 
    .lex "&MAIN", $P107 
    .lex "@ARGS", _lex_param_0 
    .local pmc ctxsave 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P106, $P5001
    .const 'Sub' $P5002 = 'cuid_176_1361734134.987' 
    capture_lex $P5002
    set $P107, $P5002
    find_dynamic_lex $P5003, "$*CTXSAVE"
    set ctxsave, $P5003
    isnull $I5001, ctxsave
    if $I5001 goto unless10_end11 
    can $I5002, ctxsave, "ctxsave"
    box $P5006, $I5002
    set $P5005, $P5006
    unless $I5002 goto if11_end13 
    $P5004 = ctxsave."ctxsave"()
    set $P5005, $P5004
  if11_end13:
  unless10_end11:
.annotate 'line', 1
    .const 'Sub' $P5007 = 'cuid_179_1361734134.987' 
    capture_lex $P5007
    $P5008 = $P5007()
    .const 'Sub' $P5009 = 'cuid_180_1361734134.987' 
    capture_lex $P5009
    $P5010 = $P5009()
    .const 'Sub' $P5011 = 'cuid_196_1361734134.987' 
    capture_lex $P5011
    $P5012 = $P5011()
    .const 'Sub' $P5013 = 'cuid_235_1361734134.987' 
    capture_lex $P5013
    $P5014 = $P5013()
.annotate 'line', 1039
    nqp_get_sc_object $P5015, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 181
    $P5016 = $P5015."new"()
    set $P106, $P5016
.annotate 'line', 1040
    $P106."language"("QRegex::P6Regex")
.annotate 'line', 1041
    nqp_get_sc_object $P5017, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 5
    $P106."parsegrammar"($P5017)
.annotate 'line', 1042
    nqp_get_sc_object $P5018, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 117
    $P106."parseactions"($P5018)
    unless _lex_param_0 goto if1080_end2674 
    .const 'Sub' $P5019 = "cuid_176_1361734134.987" 
    $P5020 = $P5019(_lex_param_0 :flat)
  if1080_end2674:
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "MAIN" :subid("cuid_176_1361734134.987") :anon :lex :outer("cuid_177_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 1044
    .param pmc _lex_param_0 
    .lex "@ARGS", _lex_param_0 
.annotate 'line', 1045
    find_lex $P5001, "$p6regex"
    $P5002 = $P5001."command_line"(_lex_param_0, "utf8" :named("encoding"), "ucs4" :named("transcode"))
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_179_1361734134.987") :anon :lex :outer("cuid_177_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 9
    .const 'Sub' $P5002 = 'cuid_1_1361734134.987' 
    capture_lex $P5002 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_1_1361734134.987' 
    capture_lex $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "create_code" :subid("cuid_1_1361734134.987") :anon :lex :outer("cuid_179_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 10
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .const 'Sub' $P5034 = 'cuid_178_1361734134.987' 
    capture_lex $P5034 
    .lex "$dummy", $P101 
    .lex "$code_obj", $P102 
    .lex "$slot", $P103 
    .lex "$fixups", $P104 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    .lex "$name", _lex_param_2 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P104, $P5004
    .const 'Sub' $P5007 = 'cuid_178_1361734134.987' 
    capture_lex $P5007
    newclosure $P5006, $P5007
    nqp_fresh_stub $P5005, $P5006
    set $P101, $P5005
    set $S5001, _lex_param_2
    assign $P101, $S5001
    setprop $P101, "STATIC_CODE_REF", $P101
.annotate 'line', 17
    nqp_decontainerize $P5008, _lex_param_0
    $P5008."add_root_code_ref"($P101, _lex_param_1)
    nqp_get_sc_object $P5010, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 9
    repr_instance_of $P5009, $P5010
    set $P102, $P5009
    nqp_get_sc_object $P5011, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 9
    setattribute $P102, $P5011, "$!do", $P101
.annotate 'line', 22
    nqp_decontainerize $P5012, _lex_param_0
    $P5013 = $P5012."add_object"($P102)
    set $P103, $P5013
.annotate 'line', 25
    nqp_get_sc_object $P5014, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 98
    $P5015 = $P5014."new"()
    set $P104, $P5015
.annotate 'line', 26
    nqp_get_sc_object $P5016, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 82
.annotate 'line', 28
    nqp_get_sc_object $P5017, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 61
    $P5018 = $P5017."new"($P102 :named("value"))
.annotate 'line', 29
    nqp_get_sc_object $P5019, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 61
    nqp_get_sc_object $P5020, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 9
    $P5021 = $P5019."new"($P5020 :named("value"))
.annotate 'line', 30
    nqp_get_sc_object $P5022, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 52
    $P5023 = $P5022."new"("$!do" :named("value"))
.annotate 'line', 31
    nqp_get_sc_object $P5024, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 57
    $P5025 = $P5024."new"(_lex_param_1 :named("value"))
    $P5026 = $P5016."new"($P5018, $P5021, $P5023, $P5025, "bindattr" :named("op"))
    $P104."push"($P5026)
.annotate 'line', 33
    nqp_get_sc_object $P5027, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 82
.annotate 'line', 35
    nqp_get_sc_object $P5028, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 57
    $P5029 = $P5028."new"(_lex_param_1 :named("value"))
.annotate 'line', 36
    nqp_get_sc_object $P5030, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 61
    $P5031 = $P5030."new"($P102 :named("value"))
    $P5032 = $P5027."new"($P5029, $P5031, "setcodeobj" :named("op"))
    $P104."push"($P5032)
.annotate 'line', 38
    nqp_decontainerize $P5033, _lex_param_0
    $P5033."add_fixup_task"($P104 :named("fixup_past"))
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_178_1361734134.987") :anon :lex :outer("cuid_1_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 12

    box $P5001, "Uncompiled code executed"
    die $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_180_1361734134.987") :anon :lex :outer("cuid_177_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 44
    .const 'Sub' $P5086 = 'cuid_2_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_3_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_4_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_5_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_6_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_8_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_9_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_10_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_11_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_12_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_14_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_18_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_19_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_20_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_21_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_22_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_23_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_26_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_28_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_29_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_31_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_32_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_33_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_34_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_35_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_39_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_40_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_42_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_43_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_44_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_45_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_46_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_47_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_48_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_49_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_50_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_51_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_52_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_53_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_54_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_55_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_56_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_57_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_58_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_59_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_60_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_61_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_62_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_63_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_64_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_65_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_66_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_67_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_68_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_69_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_70_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_71_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_72_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_73_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_74_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_75_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_76_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_77_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_78_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_79_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_80_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_81_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_82_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_83_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_85_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_86_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_87_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_89_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_91_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_92_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_93_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_95_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_97_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_104_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_106_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_107_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_108_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_109_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_110_1361734134.987' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_111_1361734134.987' 
    capture_lex $P5086 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_2_1361734134.987' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_3_1361734134.987' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_4_1361734134.987' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_5_1361734134.987' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_6_1361734134.987' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_8_1361734134.987' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_9_1361734134.987' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_10_1361734134.987' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_11_1361734134.987' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_12_1361734134.987' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_14_1361734134.987' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_18_1361734134.987' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_19_1361734134.987' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_20_1361734134.987' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_21_1361734134.987' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_22_1361734134.987' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_23_1361734134.987' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_26_1361734134.987' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_28_1361734134.987' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_29_1361734134.987' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_31_1361734134.987' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_32_1361734134.987' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_33_1361734134.987' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_34_1361734134.987' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_35_1361734134.987' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_39_1361734134.987' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_40_1361734134.987' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_42_1361734134.987' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_43_1361734134.987' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_44_1361734134.987' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_45_1361734134.987' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_46_1361734134.987' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_47_1361734134.987' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_48_1361734134.987' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_49_1361734134.987' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_50_1361734134.987' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_51_1361734134.987' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_52_1361734134.987' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_53_1361734134.987' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_54_1361734134.987' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_55_1361734134.987' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_56_1361734134.987' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_57_1361734134.987' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_58_1361734134.987' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_59_1361734134.987' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_60_1361734134.987' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_61_1361734134.987' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_62_1361734134.987' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_63_1361734134.987' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_64_1361734134.987' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_65_1361734134.987' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_66_1361734134.987' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_67_1361734134.987' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_68_1361734134.987' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_69_1361734134.987' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_70_1361734134.987' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_71_1361734134.987' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_72_1361734134.987' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_73_1361734134.987' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_74_1361734134.987' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_75_1361734134.987' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_76_1361734134.987' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_77_1361734134.987' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_78_1361734134.987' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_79_1361734134.987' 
    capture_lex $P5065
    .const 'Sub' $P5066 = 'cuid_80_1361734134.987' 
    capture_lex $P5066
    .const 'Sub' $P5067 = 'cuid_81_1361734134.987' 
    capture_lex $P5067
    .const 'Sub' $P5068 = 'cuid_82_1361734134.987' 
    capture_lex $P5068
    .const 'Sub' $P5069 = 'cuid_83_1361734134.987' 
    capture_lex $P5069
    .const 'Sub' $P5070 = 'cuid_85_1361734134.987' 
    capture_lex $P5070
    .const 'Sub' $P5071 = 'cuid_86_1361734134.987' 
    capture_lex $P5071
    .const 'Sub' $P5072 = 'cuid_87_1361734134.987' 
    capture_lex $P5072
    .const 'Sub' $P5073 = 'cuid_89_1361734134.987' 
    capture_lex $P5073
    .const 'Sub' $P5074 = 'cuid_91_1361734134.987' 
    capture_lex $P5074
    .const 'Sub' $P5075 = 'cuid_92_1361734134.987' 
    capture_lex $P5075
    .const 'Sub' $P5076 = 'cuid_93_1361734134.987' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_95_1361734134.987' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_97_1361734134.987' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_104_1361734134.987' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_106_1361734134.987' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_107_1361734134.987' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_108_1361734134.987' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_109_1361734134.987' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_110_1361734134.987' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_111_1361734134.987' 
    capture_lex $P5085
    .return ($P5085) 
.end
.HLL "nqp"
.namespace []
.sub "obs" :subid("cuid_2_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 46
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 :optional 
    .param int haz_param_1 :opt_flag 
    .lex "self", _lex_param_0 
    .lex "$old", _lex_param_1 
    .lex "$new", _lex_param_2 
    .lex "$when", _lex_param_3 
    if haz_param_1, default14
    box $P5003, " in Perl 6"
    set _lex_param_3, $P5003
  default14:
.annotate 'line', 47
    nqp_decontainerize $P5001, _lex_param_0
    set $S5006, _lex_param_1
    concat $S5005, "Unsupported use of ", $S5006
    concat $S5004, $S5005, ";"
    set $S5007, _lex_param_3
    concat $S5003, $S5004, $S5007
    concat $S5002, $S5003, " please use "
    set $S5008, _lex_param_2
    concat $S5001, $S5002, $S5008
    $P5002 = $P5001."panic"($S5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "throw_unrecognized_metachar" :subid("cuid_3_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 54
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$char", _lex_param_1 
.annotate 'line', 55
    nqp_decontainerize $P5001, _lex_param_0
    set $S5003, _lex_param_1
    concat $S5002, "Unrecognized regex metacharacter ", $S5003
    concat $S5001, $S5002, " (must be quoted to match literally)"
    $P5002 = $P5001."panic"($S5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "throw_null_pattern" :subid("cuid_4_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 58
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 59
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."panic"("Null regex not allowed")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "ws" :subid("cuid_5_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 62
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx12_start
    .local string rx12_tgt
    .local int rx12_pos
    .local int rx12_off
    .local int rx12_eos
    .local int rx12_rep
    .local pmc rx12_cur
    .local pmc rx12_curclass
    .local pmc rx12_bstack
    .local pmc rx12_cstack
    rx12_start = self."!cursor_start_all"()
    set rx12_cur, rx12_start[0]
    set rx12_tgt, rx12_start[1]
    set rx12_pos, rx12_start[2]
    set rx12_curclass, rx12_start[3]
    set rx12_bstack, rx12_start[4]
    set $I19, rx12_start[5]
    store_lex unicode:"$\x{a2}", rx12_cur
    length rx12_eos, rx12_tgt
    eq $I19, 1, rx12_restart17
    gt rx12_pos, rx12_eos, rx12_fail18
    repr_get_attr_int $I11, self, rx12_curclass, "$!from"
    ne $I11, -1, rxscan13_done24
    goto rxscan13_scan23
  rxscan13_loop22:
    inc rx12_pos
    gt rx12_pos, rx12_eos, rx12_fail18
    repr_bind_attr_int rx12_cur, rx12_curclass, "$!from", rx12_pos
  rxscan13_scan23:
    nqp_rxmark rx12_bstack, rxscan13_loop22, rx12_pos, 0
  rxscan13_done24:
    nqp_rxmark rx12_bstack, rxquantr14_done26, rx12_pos, 0
  rxquantr14_loop25:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt15_028
    nqp_push_label $P11, alt15_131
    nqp_rxmark rx12_bstack, alt15_end27, -1, 0
    rx12_cur."!alt"(rx12_pos, "alt_nfa__1_1361734135.136", $P11)
    goto rx12_fail18
  alt15_028:
    nqp_rxmark rx12_bstack, rxquantr16_done30, -1, 0
  rxquantr16_loop29:
    ge rx12_pos, rx12_eos, rx12_fail18
    is_cclass $I11, .CCLASS_WHITESPACE, rx12_tgt, rx12_pos
    unless $I11, rx12_fail18
    add rx12_pos, 1
    nqp_rxpeek $I19, rx12_bstack, rxquantr16_done30
    inc $I19
    inc $I19
    set rx12_rep, rx12_bstack[$I19]
    nqp_rxcommit rx12_bstack, rxquantr16_done30
    inc rx12_rep
    nqp_rxmark rx12_bstack, rxquantr16_done30, rx12_pos, rx12_rep
    goto rxquantr16_loop29
  rxquantr16_done30:
    goto alt15_end27
  alt15_131:
    add $I11, rx12_pos, 1
    gt $I11, rx12_eos, rx12_fail18
    substr $S10, rx12_tgt, rx12_pos, 1
    ne $S10, ucs4:"#", rx12_fail18
    add rx12_pos, 1
    nqp_rxmark rx12_bstack, rxquantr17_done33, rx12_pos, 0
  rxquantr17_loop32:
    ge rx12_pos, rx12_eos, rx12_fail18
    is_cclass $I11, .CCLASS_NEWLINE, rx12_tgt, rx12_pos
    if $I11, rx12_fail18
    add rx12_pos, 1
    nqp_rxpeek $I19, rx12_bstack, rxquantr17_done33
    inc $I19
    inc $I19
    set rx12_rep, rx12_bstack[$I19]
    nqp_rxcommit rx12_bstack, rxquantr17_done33
    inc rx12_rep
    nqp_rxmark rx12_bstack, rxquantr17_done33, rx12_pos, rx12_rep
    goto rxquantr17_loop32
  rxquantr17_done33:
    goto alt15_end27
  alt15_end27:
    nqp_rxpeek $I19, rx12_bstack, rxquantr14_done26
    inc $I19
    inc $I19
    set rx12_rep, rx12_bstack[$I19]
    nqp_rxcommit rx12_bstack, rxquantr14_done26
    inc rx12_rep
    nqp_rxmark rx12_bstack, rxquantr14_done26, rx12_pos, rx12_rep
    goto rxquantr14_loop25
  rxquantr14_done26:
    rx12_cur."!cursor_pass"(rx12_pos, "ws", 'backtrack'=>1)
    .return (rx12_cur)
  rx12_restart17:
    repr_get_attr_obj rx12_cstack, rx12_cur, rx12_curclass, "$!cstack"
  rx12_fail18:
    unless rx12_bstack, rx12_done16
    pop $I19, rx12_bstack
    if_null rx12_cstack, rx12_cstack_done21
    unless rx12_cstack, rx12_cstack_done21
    dec $I19
    set $P11, rx12_cstack[$I19]
  rx12_cstack_done21:
    pop rx12_rep, rx12_bstack
    pop rx12_pos, rx12_bstack
    pop $I19, rx12_bstack
    lt rx12_pos, -1, rx12_done16
    lt rx12_pos, 0, rx12_fail18
    eq $I19, 0, rx12_fail18
    nqp_islist $I20, rx12_cstack
    unless $I20, rx12_jump19
    elements $I18, rx12_bstack
    le $I18, 0, rx12_cut20
    dec $I18
    set $I18, rx12_bstack[$I18]
  rx12_cut20:
    assign rx12_cstack, $I18
  rx12_jump19:
    jump $I19
  rx12_done16:
    rx12_cur."!cursor_fail"()
    .return (rx12_cur) 
.end
.HLL "nqp"
.namespace []
.sub "normspace" :subid("cuid_6_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 64
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_7_1361734134.987' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx18_start
    .local string rx18_tgt
    .local int rx18_pos
    .local int rx18_off
    .local int rx18_eos
    .local int rx18_rep
    .local pmc rx18_cur
    .local pmc rx18_curclass
    .local pmc rx18_bstack
    .local pmc rx18_cstack
    rx18_start = self."!cursor_start_all"()
    set rx18_cur, rx18_start[0]
    set rx18_tgt, rx18_start[1]
    set rx18_pos, rx18_start[2]
    set rx18_curclass, rx18_start[3]
    set rx18_bstack, rx18_start[4]
    set $I19, rx18_start[5]
    store_lex unicode:"$\x{a2}", rx18_cur
    length rx18_eos, rx18_tgt
    eq $I19, 1, rx18_restart36
    gt rx18_pos, rx18_eos, rx18_fail37
    repr_get_attr_int $I11, self, rx18_curclass, "$!from"
    ne $I11, -1, rxscan19_done43
    goto rxscan19_scan42
  rxscan19_loop41:
    inc rx18_pos
    gt rx18_pos, rx18_eos, rx18_fail37
    repr_bind_attr_int rx18_cur, rx18_curclass, "$!from", rx18_pos
  rxscan19_scan42:
    nqp_rxmark rx18_bstack, rxscan19_loop41, rx18_pos, 0
  rxscan19_done43:
    .const 'Sub' $P5001 = 'cuid_7_1361734134.987' 
    capture_lex $P5001
    repr_bind_attr_int rx18_cur, rx18_curclass, "$!pos", rx18_pos
    $P11 = rx18_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx18_curclass, "$!pos"
    lt $I11, 0, rx18_fail37
    repr_bind_attr_int rx18_cur, rx18_curclass, "$!pos", rx18_pos
    $P11 = rx18_cur."ws"()
    repr_get_attr_int $I11, $P11, rx18_curclass, "$!pos"
    lt $I11, 0, rx18_fail37
    repr_get_attr_int rx18_pos, $P11, rx18_curclass, "$!pos"
    rx18_cur."!cursor_pass"(rx18_pos, "normspace", 'backtrack'=>1)
    .return (rx18_cur)
  rx18_restart36:
    repr_get_attr_obj rx18_cstack, rx18_cur, rx18_curclass, "$!cstack"
  rx18_fail37:
    unless rx18_bstack, rx18_done35
    pop $I19, rx18_bstack
    if_null rx18_cstack, rx18_cstack_done40
    unless rx18_cstack, rx18_cstack_done40
    dec $I19
    set $P11, rx18_cstack[$I19]
  rx18_cstack_done40:
    pop rx18_rep, rx18_bstack
    pop rx18_pos, rx18_bstack
    pop $I19, rx18_bstack
    lt rx18_pos, -1, rx18_done35
    lt rx18_pos, 0, rx18_fail37
    eq $I19, 0, rx18_fail37
    nqp_islist $I20, rx18_cstack
    unless $I20, rx18_jump38
    elements $I18, rx18_bstack
    le $I18, 0, rx18_cut39
    dec $I18
    set $I18, rx18_bstack[$I18]
  rx18_cut39:
    assign rx18_cstack, $I18
  rx18_jump38:
    jump $I19
  rx18_done35:
    rx18_cur."!cursor_fail"()
    .return (rx18_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_7_1361734134.987") :anon :lex :outer("cuid_6_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx20_start
    .local string rx20_tgt
    .local int rx20_pos
    .local int rx20_off
    .local int rx20_eos
    .local int rx20_rep
    .local pmc rx20_cur
    .local pmc rx20_curclass
    .local pmc rx20_bstack
    .local pmc rx20_cstack
    rx20_start = self."!cursor_start_all"()
    set rx20_cur, rx20_start[0]
    set rx20_tgt, rx20_start[1]
    set rx20_pos, rx20_start[2]
    set rx20_curclass, rx20_start[3]
    set rx20_bstack, rx20_start[4]
    set $I19, rx20_start[5]
    store_lex unicode:"$\x{a2}", rx20_cur
    length rx20_eos, rx20_tgt
    eq $I19, 1, rx20_restart46
    gt rx20_pos, rx20_eos, rx20_fail47
    repr_get_attr_int $I11, self, rx20_curclass, "$!from"
    ne $I11, -1, rxscan21_done53
    goto rxscan21_scan52
  rxscan21_loop51:
    inc rx20_pos
    gt rx20_pos, rx20_eos, rx20_fail47
    repr_bind_attr_int rx20_cur, rx20_curclass, "$!from", rx20_pos
  rxscan21_scan52:
    nqp_rxmark rx20_bstack, rxscan21_loop51, rx20_pos, 0
  rxscan21_done53:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt22_055
    nqp_push_label $P11, alt22_156
    nqp_rxmark rx20_bstack, alt22_end54, -1, 0
    rx20_cur."!alt"(rx20_pos, "alt_nfa__2_1361734135.142", $P11)
    goto rx20_fail47
  alt22_055:
    ge rx20_pos, rx20_eos, rx20_fail47
    is_cclass $I11, .CCLASS_WHITESPACE, rx20_tgt, rx20_pos
    unless $I11, rx20_fail47
    add rx20_pos, 1
    goto alt22_end54
  alt22_156:
    add $I11, rx20_pos, 1
    gt $I11, rx20_eos, rx20_fail47
    substr $S10, rx20_tgt, rx20_pos, 1
    ne $S10, ucs4:"#", rx20_fail47
    add rx20_pos, 1
    goto alt22_end54
  alt22_end54:
    rx20_cur."!cursor_pass"(rx20_pos, 'backtrack'=>1)
    .return (rx20_cur)
  rx20_restart46:
    repr_get_attr_obj rx20_cstack, rx20_cur, rx20_curclass, "$!cstack"
  rx20_fail47:
    unless rx20_bstack, rx20_done45
    pop $I19, rx20_bstack
    if_null rx20_cstack, rx20_cstack_done50
    unless rx20_cstack, rx20_cstack_done50
    dec $I19
    set $P11, rx20_cstack[$I19]
  rx20_cstack_done50:
    pop rx20_rep, rx20_bstack
    pop rx20_pos, rx20_bstack
    pop $I19, rx20_bstack
    lt rx20_pos, -1, rx20_done45
    lt rx20_pos, 0, rx20_fail47
    eq $I19, 0, rx20_fail47
    nqp_islist $I20, rx20_cstack
    unless $I20, rx20_jump48
    elements $I18, rx20_bstack
    le $I18, 0, rx20_cut49
    dec $I18
    set $I18, rx20_bstack[$I18]
  rx20_cut49:
    assign rx20_cstack, $I18
  rx20_jump48:
    jump $I19
  rx20_done45:
    rx20_cur."!cursor_fail"()
    .return (rx20_cur) 
.end
.HLL "nqp"
.namespace []
.sub "identifier" :subid("cuid_8_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 66
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx24_start
    .local string rx24_tgt
    .local int rx24_pos
    .local int rx24_off
    .local int rx24_eos
    .local int rx24_rep
    .local pmc rx24_cur
    .local pmc rx24_curclass
    .local pmc rx24_bstack
    .local pmc rx24_cstack
    rx24_start = self."!cursor_start_all"()
    set rx24_cur, rx24_start[0]
    set rx24_tgt, rx24_start[1]
    set rx24_pos, rx24_start[2]
    set rx24_curclass, rx24_start[3]
    set rx24_bstack, rx24_start[4]
    set $I19, rx24_start[5]
    store_lex unicode:"$\x{a2}", rx24_cur
    length rx24_eos, rx24_tgt
    eq $I19, 1, rx24_restart60
    gt rx24_pos, rx24_eos, rx24_fail61
    repr_get_attr_int $I11, self, rx24_curclass, "$!from"
    ne $I11, -1, rxscan25_done67
    goto rxscan25_scan66
  rxscan25_loop65:
    inc rx24_pos
    gt rx24_pos, rx24_eos, rx24_fail61
    repr_bind_attr_int rx24_cur, rx24_curclass, "$!from", rx24_pos
  rxscan25_scan66:
    nqp_rxmark rx24_bstack, rxscan25_loop65, rx24_pos, 0
  rxscan25_done67:
    repr_bind_attr_int rx24_cur, rx24_curclass, "$!pos", rx24_pos
    $P11 = rx24_cur."ident"()
    repr_get_attr_int $I11, $P11, rx24_curclass, "$!pos"
    lt $I11, 0, rx24_fail61
    repr_get_attr_int rx24_pos, $P11, rx24_curclass, "$!pos"
    nqp_rxmark rx24_bstack, rxquantr27_done70, rx24_pos, 0
  rxquantr27_loop69:
  alt28_072:
    nqp_rxmark rx24_bstack, alt28_173, rx24_pos, 0
    add $I11, rx24_pos, 1
    gt $I11, rx24_eos, rx24_fail61
    substr $S10, rx24_tgt, rx24_pos, 1
    ne $S10, ucs4:"-", rx24_fail61
    add rx24_pos, 1
    goto alt28_end71
  alt28_173:
    ge rx24_pos, rx24_eos, rx24_fail61
    substr $S11, rx24_tgt, rx24_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx24_fail61
    inc rx24_pos
  alt28_end71:
    repr_bind_attr_int rx24_cur, rx24_curclass, "$!pos", rx24_pos
    $P11 = rx24_cur."ident"()
    repr_get_attr_int $I11, $P11, rx24_curclass, "$!pos"
    lt $I11, 0, rx24_fail61
    repr_get_attr_int rx24_pos, $P11, rx24_curclass, "$!pos"
    nqp_rxpeek $I19, rx24_bstack, rxquantr27_done70
    inc $I19
    inc $I19
    set rx24_rep, rx24_bstack[$I19]
    nqp_rxcommit rx24_bstack, rxquantr27_done70
    inc rx24_rep
    nqp_rxmark rx24_bstack, rxquantr27_done70, rx24_pos, rx24_rep
    goto rxquantr27_loop69
  rxquantr27_done70:
    rx24_cur."!cursor_pass"(rx24_pos, "identifier", 'backtrack'=>1)
    .return (rx24_cur)
  rx24_restart60:
    repr_get_attr_obj rx24_cstack, rx24_cur, rx24_curclass, "$!cstack"
  rx24_fail61:
    unless rx24_bstack, rx24_done59
    pop $I19, rx24_bstack
    if_null rx24_cstack, rx24_cstack_done64
    unless rx24_cstack, rx24_cstack_done64
    dec $I19
    set $P11, rx24_cstack[$I19]
  rx24_cstack_done64:
    pop rx24_rep, rx24_bstack
    pop rx24_pos, rx24_bstack
    pop $I19, rx24_bstack
    lt rx24_pos, -1, rx24_done59
    lt rx24_pos, 0, rx24_fail61
    eq $I19, 0, rx24_fail61
    nqp_islist $I20, rx24_cstack
    unless $I20, rx24_jump62
    elements $I18, rx24_bstack
    le $I18, 0, rx24_cut63
    dec $I18
    set $I18, rx24_bstack[$I18]
  rx24_cut63:
    assign rx24_cstack, $I18
  rx24_jump62:
    jump $I19
  rx24_done59:
    rx24_cur."!cursor_fail"()
    .return (rx24_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_9_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 68
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx30_start
    .local string rx30_tgt
    .local int rx30_pos
    .local int rx30_off
    .local int rx30_eos
    .local int rx30_rep
    .local pmc rx30_cur
    .local pmc rx30_curclass
    .local pmc rx30_bstack
    .local pmc rx30_cstack
    rx30_start = self."!cursor_start_all"()
    set rx30_cur, rx30_start[0]
    set rx30_tgt, rx30_start[1]
    set rx30_pos, rx30_start[2]
    set rx30_curclass, rx30_start[3]
    set rx30_bstack, rx30_start[4]
    set $I19, rx30_start[5]
    store_lex unicode:"$\x{a2}", rx30_cur
    length rx30_eos, rx30_tgt
    eq $I19, 1, rx30_restart77
    gt rx30_pos, rx30_eos, rx30_fail78
    repr_get_attr_int $I11, self, rx30_curclass, "$!from"
    ne $I11, -1, rxscan31_done84
    goto rxscan31_scan83
  rxscan31_loop82:
    inc rx30_pos
    gt rx30_pos, rx30_eos, rx30_fail78
    repr_bind_attr_int rx30_cur, rx30_curclass, "$!from", rx30_pos
  rxscan31_scan83:
    nqp_rxmark rx30_bstack, rxscan31_loop82, rx30_pos, 0
  rxscan31_done84:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt32_086
    nqp_push_label $P11, alt32_188
    nqp_push_label $P11, alt32_290
    nqp_rxmark rx30_bstack, alt32_end85, -1, 0
    rx30_cur."!alt"(rx30_pos, "alt_nfa__3_1361734135.165", $P11)
    goto rx30_fail78
  alt32_086:
    ge rx30_pos, rx30_eos, rx30_fail78
    substr $S11, rx30_tgt, rx30_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx30_fail78
    repr_bind_attr_int rx30_cur, rx30_curclass, "$!pos", rx30_pos
    $P11 = rx30_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx30_curclass, "$!pos"
    lt $I11, 0, rx30_fail78
    nqp_rxmark rx30_bstack, rxsubrule33_pass87, -1, 0
  rxsubrule33_pass87:
    rx30_cstack = rx30_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx30_pos, $P11, rx30_curclass, "$!pos"
    goto alt32_end85
  alt32_188:
    ge rx30_pos, rx30_eos, rx30_fail78
    substr $S11, rx30_tgt, rx30_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx30_fail78
    repr_bind_attr_int rx30_cur, rx30_curclass, "$!pos", rx30_pos
    $P11 = rx30_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx30_curclass, "$!pos"
    lt $I11, 0, rx30_fail78
    nqp_rxmark rx30_bstack, rxsubrule34_pass89, -1, 0
  rxsubrule34_pass89:
    rx30_cstack = rx30_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx30_pos, $P11, rx30_curclass, "$!pos"
    goto alt32_end85
  alt32_290:
    nqp_rxmark rx30_bstack, rxcap35_fail92, rx30_pos, 0
    nqp_rxmark rx30_bstack, rxquantr36_done94, -1, 0
  rxquantr36_loop93:
    ge rx30_pos, rx30_eos, rx30_fail78
    is_cclass $I11, .CCLASS_NUMERIC, rx30_tgt, rx30_pos
    unless $I11, rx30_fail78
    add rx30_pos, 1
    nqp_rxpeek $I19, rx30_bstack, rxquantr36_done94
    inc $I19
    inc $I19
    set rx30_rep, rx30_bstack[$I19]
    nqp_rxcommit rx30_bstack, rxquantr36_done94
    inc rx30_rep
    nqp_rxmark rx30_bstack, rxquantr36_done94, rx30_pos, rx30_rep
    goto rxquantr36_loop93
  rxquantr36_done94:
    nqp_rxpeek $I19, rx30_bstack, rxcap35_fail92
    inc $I19
    set $I11, rx30_bstack[$I19]
    repr_bind_attr_int rx30_cur, rx30_curclass, "$!pos", rx30_pos
    $P11 = rx30_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx30_pos)
    rx30_cstack = rx30_cur."!cursor_capture"($P11, "val")
    goto rxcap35_done91
  rxcap35_fail92:
    goto rx30_fail78
  rxcap35_done91:
    goto alt32_end85
  alt32_end85:
    nqp_rxcommit rx30_bstack, alt32_end85
    rx30_cur."!cursor_pass"(rx30_pos, "arg", 'backtrack'=>1)
    .return (rx30_cur)
  rx30_restart77:
    repr_get_attr_obj rx30_cstack, rx30_cur, rx30_curclass, "$!cstack"
  rx30_fail78:
    unless rx30_bstack, rx30_done76
    pop $I19, rx30_bstack
    if_null rx30_cstack, rx30_cstack_done81
    unless rx30_cstack, rx30_cstack_done81
    dec $I19
    set $P11, rx30_cstack[$I19]
  rx30_cstack_done81:
    pop rx30_rep, rx30_bstack
    pop rx30_pos, rx30_bstack
    pop $I19, rx30_bstack
    lt rx30_pos, -1, rx30_done76
    lt rx30_pos, 0, rx30_fail78
    eq $I19, 0, rx30_fail78
    nqp_islist $I20, rx30_cstack
    unless $I20, rx30_jump79
    elements $I18, rx30_bstack
    le $I18, 0, rx30_cut80
    dec $I18
    set $I18, rx30_bstack[$I18]
  rx30_cut80:
    assign rx30_cstack, $I18
  rx30_jump79:
    jump $I19
  rx30_done76:
    rx30_cur."!cursor_fail"()
    .return (rx30_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_10_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 76
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx37_start
    .local string rx37_tgt
    .local int rx37_pos
    .local int rx37_off
    .local int rx37_eos
    .local int rx37_rep
    .local pmc rx37_cur
    .local pmc rx37_curclass
    .local pmc rx37_bstack
    .local pmc rx37_cstack
    rx37_start = self."!cursor_start_all"()
    set rx37_cur, rx37_start[0]
    set rx37_tgt, rx37_start[1]
    set rx37_pos, rx37_start[2]
    set rx37_curclass, rx37_start[3]
    set rx37_bstack, rx37_start[4]
    set $I19, rx37_start[5]
    store_lex unicode:"$\x{a2}", rx37_cur
    length rx37_eos, rx37_tgt
    eq $I19, 1, rx37_restart97
    gt rx37_pos, rx37_eos, rx37_fail98
    repr_get_attr_int $I11, self, rx37_curclass, "$!from"
    ne $I11, -1, rxscan38_done104
    goto rxscan38_scan103
  rxscan38_loop102:
    inc rx37_pos
    gt rx37_pos, rx37_eos, rx37_fail98
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!from", rx37_pos
  rxscan38_scan103:
    nqp_rxmark rx37_bstack, rxscan38_loop102, rx37_pos, 0
  rxscan38_done104:
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."ws"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail98
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."arg"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail98
    nqp_rxmark rx37_bstack, rxsubrule40_pass106, -1, 0
  rxsubrule40_pass106:
    rx37_cstack = rx37_cur."!cursor_capture"($P11, "arg")
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."ws"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail98
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    nqp_rxmark rx37_bstack, rxquantr42_done109, rx37_pos, 0
  rxquantr42_loop108:
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."ws"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail98
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    add $I11, rx37_pos, 1
    gt $I11, rx37_eos, rx37_fail98
    substr $S10, rx37_tgt, rx37_pos, 1
    ne $S10, ucs4:",", rx37_fail98
    add rx37_pos, 1
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."ws"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail98
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."arg"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail98
    nqp_rxmark rx37_bstack, rxsubrule45_pass112, -1, 0
  rxsubrule45_pass112:
    rx37_cstack = rx37_cur."!cursor_capture"($P11, "arg")
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    nqp_rxpeek $I19, rx37_bstack, rxquantr42_done109
    inc $I19
    inc $I19
    set rx37_rep, rx37_bstack[$I19]
    nqp_rxcommit rx37_bstack, rxquantr42_done109
    inc rx37_rep
    nqp_rxmark rx37_bstack, rxquantr42_done109, rx37_pos, rx37_rep
    goto rxquantr42_loop108
  rxquantr42_done109:
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."ws"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail98
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    rx37_cur."!cursor_pass"(rx37_pos, "arglist", 'backtrack'=>1)
    .return (rx37_cur)
  rx37_restart97:
    repr_get_attr_obj rx37_cstack, rx37_cur, rx37_curclass, "$!cstack"
  rx37_fail98:
    unless rx37_bstack, rx37_done96
    pop $I19, rx37_bstack
    if_null rx37_cstack, rx37_cstack_done101
    unless rx37_cstack, rx37_cstack_done101
    dec $I19
    set $P11, rx37_cstack[$I19]
  rx37_cstack_done101:
    pop rx37_rep, rx37_bstack
    pop rx37_pos, rx37_bstack
    pop $I19, rx37_bstack
    lt rx37_pos, -1, rx37_done96
    lt rx37_pos, 0, rx37_fail98
    eq $I19, 0, rx37_fail98
    nqp_islist $I20, rx37_cstack
    unless $I20, rx37_jump99
    elements $I18, rx37_bstack
    le $I18, 0, rx37_cut100
    dec $I18
    set $I18, rx37_bstack[$I18]
  rx37_cut100:
    assign rx37_cstack, $I18
  rx37_jump99:
    jump $I19
  rx37_done96:
    rx37_cur."!cursor_fail"()
    .return (rx37_cur) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_11_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 78
    .param pmc _lex_param_0 
    .lex "%*RX", $P101 
    .lex "$*W", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    .local pmc fb_tmp_1 
    .local pmc pkg_viv_tmp_1 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local pmc rx47_start
    .local string rx47_tgt
    .local int rx47_pos
    .local int rx47_off
    .local int rx47_eos
    .local int rx47_rep
    .local pmc rx47_cur
    .local pmc rx47_curclass
    .local pmc rx47_bstack
    .local pmc rx47_cstack
    rx47_start = self."!cursor_start_all"()
    set rx47_cur, rx47_start[0]
    set rx47_tgt, rx47_start[1]
    set rx47_pos, rx47_start[2]
    set rx47_curclass, rx47_start[3]
    set rx47_bstack, rx47_start[4]
    set $I19, rx47_start[5]
    store_lex unicode:"$\x{a2}", rx47_cur
    length rx47_eos, rx47_tgt
    eq $I19, 1, rx47_restart116
    gt rx47_pos, rx47_eos, rx47_fail117
    repr_get_attr_int $I11, self, rx47_curclass, "$!from"
    ne $I11, -1, rxscan48_done123
    goto rxscan48_scan122
  rxscan48_loop121:
    inc rx47_pos
    gt rx47_pos, rx47_eos, rx47_fail117
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!from", rx47_pos
  rxscan48_scan122:
    nqp_rxmark rx47_bstack, rxscan48_loop121, rx47_pos, 0
  rxscan48_done123:
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!pos", rx47_pos
    store_lex unicode:"$\x{a2}", rx47_cur
    unless_null $P101, fallback124
    nqp_get_sc_object $P5004, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    get_who $P5003, $P5004
    set pkg_viv_tmp_1, $P5003
    set fb_tmp_1, pkg_viv_tmp_1
    repr_defined $I5001, fb_tmp_1
    unless $I5001 goto if49_else125 
    set $P5005, fb_tmp_1["%RX"]
    set $P5007, $P5005
    goto if49_end126
  if49_else125:
    null $P5006
    set $P5007, $P5006
  if49_end126:
    unless_null $P5007, vivi_50127
    new $P5008, 'Hash'
    set pkg_viv_tmp_1["%RX"], $P5008
    set $P5007, $P5008
  vivi_50127:
    unless_null $P5007, vivi_51128
    die "Contextual %*RX not found"
    box $P5009, "Contextual %*RX not found"
    set $P5007, $P5009
  vivi_51128:
    set $P101, $P5007
  fallback124:
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!pos", rx47_pos
    store_lex unicode:"$\x{a2}", rx47_cur
.annotate 'line', 80
    nqp_get_sc_object $P5010, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 3
    nqp_decontainerize $P5011, _lex_param_0
    $P5012 = $P5011."target"()
    set $S5002, $P5012
    nqp_sha1 $S5001, $S5002
    $P5013 = $P5010."new"($S5001 :named("handle"))
    set $P102, $P5013
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!pos", rx47_pos
    $P11 = rx47_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx47_curclass, "$!pos"
    lt $I11, 0, rx47_fail117
    nqp_rxmark rx47_bstack, rxsubrule52_pass129, -1, 0
  rxsubrule52_pass129:
    rx47_cstack = rx47_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx47_pos, $P11, rx47_curclass, "$!pos"
  alt53_0131:
    nqp_rxmark rx47_bstack, alt53_1133, rx47_pos, 0
    lt rx47_pos, rx47_eos, rx47_fail117
    goto alt53_end130
  alt53_1133:
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!pos", rx47_pos
    $P11 = rx47_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx47_curclass, "$!pos"
    lt $I11, 0, rx47_fail117
    repr_get_attr_int rx47_pos, $P11, rx47_curclass, "$!pos"
  alt53_end130:
    rx47_cur."!cursor_pass"(rx47_pos, "TOP", 'backtrack'=>1)
    .return (rx47_cur)
  rx47_restart116:
    repr_get_attr_obj rx47_cstack, rx47_cur, rx47_curclass, "$!cstack"
  rx47_fail117:
    unless rx47_bstack, rx47_done115
    pop $I19, rx47_bstack
    if_null rx47_cstack, rx47_cstack_done120
    unless rx47_cstack, rx47_cstack_done120
    dec $I19
    set $P11, rx47_cstack[$I19]
  rx47_cstack_done120:
    pop rx47_rep, rx47_bstack
    pop rx47_pos, rx47_bstack
    pop $I19, rx47_bstack
    lt rx47_pos, -1, rx47_done115
    lt rx47_pos, 0, rx47_fail117
    eq $I19, 0, rx47_fail117
    nqp_islist $I20, rx47_cstack
    unless $I20, rx47_jump118
    elements $I18, rx47_bstack
    le $I18, 0, rx47_cut119
    dec $I18
    set $I18, rx47_bstack[$I18]
  rx47_cut119:
    assign rx47_cstack, $I18
  rx47_jump118:
    jump $I19
  rx47_done115:
    rx47_cur."!cursor_fail"()
    .return (rx47_cur) 
.end
.HLL "nqp"
.namespace []
.sub "nibbler" :subid("cuid_12_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 85
    .param pmc _lex_param_0 
    .const 'Sub' $P5023 = 'cuid_182_1361734134.987' 
    capture_lex $P5023 
    .const 'Sub' $P5023 = 'cuid_183_1361734134.987' 
    capture_lex $P5023 
    .const 'Sub' $P5023 = 'cuid_13_1361734134.987' 
    capture_lex $P5023 
    .const 'Sub' $P5023 = 'cuid_184_1361734134.987' 
    capture_lex $P5023 
    .lex "$OLDRX", $P101 
    .lex "%*RX", $P102 
    .lex "$*SEQ", $P103 
    .lex utf8:"$\x{a2}", $P104 
    .lex "$/", $P105 
    .lex "self", _lex_param_0 
    .local pmc self 
    .local pmc fb_tmp_2 
    .local pmc pkg_viv_tmp_2 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P103, $P5003
    set self, _lex_param_0
    .local pmc rx56_start
    .local string rx56_tgt
    .local int rx56_pos
    .local int rx56_off
    .local int rx56_eos
    .local int rx56_rep
    .local pmc rx56_cur
    .local pmc rx56_curclass
    .local pmc rx56_bstack
    .local pmc rx56_cstack
    rx56_start = self."!cursor_start_all"()
    set rx56_cur, rx56_start[0]
    set rx56_tgt, rx56_start[1]
    set rx56_pos, rx56_start[2]
    set rx56_curclass, rx56_start[3]
    set rx56_bstack, rx56_start[4]
    set $I19, rx56_start[5]
    store_lex unicode:"$\x{a2}", rx56_cur
    length rx56_eos, rx56_tgt
    eq $I19, 1, rx56_restart137
    gt rx56_pos, rx56_eos, rx56_fail138
    repr_get_attr_int $I11, self, rx56_curclass, "$!from"
    ne $I11, -1, rxscan57_done144
    goto rxscan57_scan143
  rxscan57_loop142:
    inc rx56_pos
    gt rx56_pos, rx56_eos, rx56_fail138
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!from", rx56_pos
  rxscan57_scan143:
    nqp_rxmark rx56_bstack, rxscan57_loop142, rx56_pos, 0
  rxscan57_done144:
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    store_lex unicode:"$\x{a2}", rx56_cur
    find_dynamic_lex $P5004, "%*RX"
    set $P101, $P5004
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    store_lex unicode:"$\x{a2}", rx56_cur
    unless_null $P102, fallback145
    nqp_get_sc_object $P5006, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    get_who $P5005, $P5006
    set pkg_viv_tmp_2, $P5005
    set fb_tmp_2, pkg_viv_tmp_2
    repr_defined $I5001, fb_tmp_2
    unless $I5001 goto if58_else146 
    set $P5007, fb_tmp_2["%RX"]
    set $P5009, $P5007
    goto if58_end147
  if58_else146:
    null $P5008
    set $P5009, $P5008
  if58_end147:
    unless_null $P5009, vivi_59148
    new $P5010, 'Hash'
    set pkg_viv_tmp_2["%RX"], $P5010
    set $P5009, $P5010
  vivi_59148:
    unless_null $P5009, vivi_60149
    die "Contextual %*RX not found"
    box $P5011, "Contextual %*RX not found"
    set $P5009, $P5011
  vivi_60149:
    set $P102, $P5009
  fallback145:
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    store_lex unicode:"$\x{a2}", rx56_cur
    box $P5012, 0
    set $P103, $P5012
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    store_lex unicode:"$\x{a2}", rx56_cur
    $P5013 = $P104."MATCH"()
    set $P105, $P5013
    .const 'Sub' $P5014 = 'cuid_182_1361734134.987' 
    capture_lex $P5014
    $P5015 = $P5014()
    nqp_rxmark rx56_bstack, rxquantr64_done159, rx56_pos, 0
  rxquantr64_loop158:
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    $P11 = rx56_cur."ws"()
    repr_get_attr_int $I11, $P11, rx56_curclass, "$!pos"
    lt $I11, 0, rx56_fail138
    repr_get_attr_int rx56_pos, $P11, rx56_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt66_0162
    nqp_push_label $P11, alt66_1163
    nqp_push_label $P11, alt66_2164
    nqp_push_label $P11, alt66_3165
    nqp_rxmark rx56_bstack, alt66_end161, -1, 0
    rx56_cur."!alt"(rx56_pos, "alt_nfa__4_1361734135.241", $P11)
    goto rx56_fail138
  alt66_0162:
    add $I11, rx56_pos, 2
    gt $I11, rx56_eos, rx56_fail138
    substr $S10, rx56_tgt, rx56_pos, 2
    ne $S10, ucs4:"||", rx56_fail138
    add rx56_pos, 2
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    store_lex unicode:"$\x{a2}", rx56_cur
    $P5016 = $P104."MATCH"()
    set $P105, $P5016
    .const 'Sub' $P5017 = 'cuid_183_1361734134.987' 
    capture_lex $P5017
    $P5018 = $P5017()
    goto alt66_end161
  alt66_1163:
    add $I11, rx56_pos, 1
    gt $I11, rx56_eos, rx56_fail138
    substr $S10, rx56_tgt, rx56_pos, 1
    ne $S10, ucs4:"|", rx56_fail138
    add rx56_pos, 1
    goto alt66_end161
  alt66_2164:
    add $I11, rx56_pos, 2
    gt $I11, rx56_eos, rx56_fail138
    substr $S10, rx56_tgt, rx56_pos, 2
    ne $S10, ucs4:"&&", rx56_fail138
    add rx56_pos, 2
    goto alt66_end161
  alt66_3165:
    add $I11, rx56_pos, 1
    gt $I11, rx56_eos, rx56_fail138
    substr $S10, rx56_tgt, rx56_pos, 1
    ne $S10, ucs4:"&", rx56_fail138
    add rx56_pos, 1
    goto alt66_end161
  alt66_end161:
    nqp_rxcommit rx56_bstack, alt66_end161
    nqp_rxpeek $I19, rx56_bstack, rxquantr64_done159
    inc $I19
    inc $I19
    set rx56_rep, rx56_bstack[$I19]
    nqp_rxcommit rx56_bstack, rxquantr64_done159
    inc rx56_rep
  rxquantr64_done159:
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    $P11 = rx56_cur."termaltseq"()
    repr_get_attr_int $I11, $P11, rx56_curclass, "$!pos"
    lt $I11, 0, rx56_fail138
    nqp_rxmark rx56_bstack, rxsubrule67_pass166, -1, 0
  rxsubrule67_pass166:
    rx56_cstack = rx56_cur."!cursor_capture"($P11, "termaltseq")
    repr_get_attr_int rx56_pos, $P11, rx56_curclass, "$!pos"
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    $P11 = rx56_cur."ws"()
    repr_get_attr_int $I11, $P11, rx56_curclass, "$!pos"
    lt $I11, 0, rx56_fail138
    repr_get_attr_int rx56_pos, $P11, rx56_curclass, "$!pos"
  alt69_0169:
    nqp_rxmark rx56_bstack, alt69_1170, rx56_pos, 0
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    $P11 = rx56_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx56_curclass, "$!pos"
    lt $I11, 0, rx56_fail138
    goto alt69_end168
  alt69_1170:
    nqp_rxmark rx56_bstack, alt69_2173, rx56_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx56_tgt, rx56_pos
    if $I11, rxanchor70_done171
    ne rx56_pos, rx56_eos, rx56_fail138
    eq rx56_pos, 0, rxanchor70_done171
    sub $I11, rx56_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx56_tgt, $I11
    if $I11, rx56_fail138
  rxanchor70_done171:
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    $P11 = rx56_cur."panic"("Regex not terminated")
    repr_get_attr_int $I11, $P11, rx56_curclass, "$!pos"
    lt $I11, 0, rx56_fail138
    repr_get_attr_int rx56_pos, $P11, rx56_curclass, "$!pos"
    goto alt69_end168
  alt69_2173:
    nqp_rxmark rx56_bstack, alt69_3188, rx56_pos, 0
    .const 'Sub' $P5019 = 'cuid_13_1361734134.987' 
    capture_lex $P5019
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    $P11 = rx56_cur.$P5019()
    repr_get_attr_int $I11, $P11, rx56_curclass, "$!pos"
    lt $I11, 0, rx56_fail138
    nqp_rxmark rx56_bstack, rxsubrule74_pass184, -1, 0
  rxsubrule74_pass184:
    rx56_cstack = rx56_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx56_pos, $P11, rx56_curclass, "$!pos"
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    store_lex unicode:"$\x{a2}", rx56_cur
    $P5020 = $P104."MATCH"()
    set $P105, $P5020
    .const 'Sub' $P5021 = 'cuid_184_1361734134.987' 
    capture_lex $P5021
    $P5022 = $P5021()
    goto alt69_end168
  alt69_3188:
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    $P11 = rx56_cur."panic"("Regex not terminated")
    repr_get_attr_int $I11, $P11, rx56_curclass, "$!pos"
    lt $I11, 0, rx56_fail138
    repr_get_attr_int rx56_pos, $P11, rx56_curclass, "$!pos"
  alt69_end168:
    rx56_cur."!cursor_pass"(rx56_pos, "nibbler", 'backtrack'=>1)
    .return (rx56_cur)
  rx56_restart137:
    repr_get_attr_obj rx56_cstack, rx56_cur, rx56_curclass, "$!cstack"
  rx56_fail138:
    unless rx56_bstack, rx56_done136
    pop $I19, rx56_bstack
    if_null rx56_cstack, rx56_cstack_done141
    unless rx56_cstack, rx56_cstack_done141
    dec $I19
    set $P11, rx56_cstack[$I19]
  rx56_cstack_done141:
    pop rx56_rep, rx56_bstack
    pop rx56_pos, rx56_bstack
    pop $I19, rx56_bstack
    lt rx56_pos, -1, rx56_done136
    lt rx56_pos, 0, rx56_fail138
    eq $I19, 0, rx56_fail138
    nqp_islist $I20, rx56_cstack
    unless $I20, rx56_jump139
    elements $I18, rx56_bstack
    le $I18, 0, rx56_cut140
    dec $I18
    set $I18, rx56_bstack[$I18]
  rx56_cut140:
    assign rx56_cstack, $I18
  rx56_jump139:
    jump $I19
  rx56_done136:
    rx56_cur."!cursor_fail"()
    .return (rx56_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_182_1361734134.987") :anon :lex :outer("cuid_12_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 89
    .const 'Sub' $P5007 = 'cuid_181_1361734134.987' 
    capture_lex $P5007 
    find_lex $P5004, "$OLDRX"
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next155:
    unless $P5003, for_done157
    shift $P5006, $P5003
  for_redo156:
    .const 'Sub' $P5005 = 'cuid_181_1361734134.987' 
    capture_lex $P5005
    $P5001 = $P5005($P5006)
    goto for_next155
  for_done157:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_181_1361734134.987") :anon :lex :outer("cuid_182_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 90
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_3 
    .local pmc pkg_viv_tmp_3 
    find_dynamic_lex $P5001, "%*RX"
    unless_null $P5001, fallback150
    nqp_get_sc_object $P5003, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    get_who $P5002, $P5003
    set pkg_viv_tmp_3, $P5002
    set fb_tmp_3, pkg_viv_tmp_3
    repr_defined $I5001, fb_tmp_3
    unless $I5001 goto if61_else151 
    set $P5004, fb_tmp_3["%RX"]
    set $P5006, $P5004
    goto if61_end152
  if61_else151:
    null $P5005
    set $P5006, $P5005
  if61_end152:
    unless_null $P5006, vivi_62153
    new $P5007, 'Hash'
    set pkg_viv_tmp_3["%RX"], $P5007
    set $P5006, $P5007
  vivi_62153:
    unless_null $P5006, vivi_63154
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5006, $P5008
  vivi_63154:
    set $P5001, $P5006
  fallback150:
    $P5009 = _lex_param_0."key"()
    set $S5001, $P5009
    $P5010 = _lex_param_0."value"()
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_183_1361734134.987") :anon :lex :outer("cuid_12_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 93

    box $P5001, 1
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_13_1361734134.987") :anon :lex :outer("cuid_12_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx72_start
    .local string rx72_tgt
    .local int rx72_pos
    .local int rx72_off
    .local int rx72_eos
    .local int rx72_rep
    .local pmc rx72_cur
    .local pmc rx72_curclass
    .local pmc rx72_bstack
    .local pmc rx72_cstack
    rx72_start = self."!cursor_start_all"()
    set rx72_cur, rx72_start[0]
    set rx72_tgt, rx72_start[1]
    set rx72_pos, rx72_start[2]
    set rx72_curclass, rx72_start[3]
    set rx72_bstack, rx72_start[4]
    set $I19, rx72_start[5]
    store_lex unicode:"$\x{a2}", rx72_cur
    length rx72_eos, rx72_tgt
    eq $I19, 1, rx72_restart176
    gt rx72_pos, rx72_eos, rx72_fail177
    repr_get_attr_int $I11, self, rx72_curclass, "$!from"
    ne $I11, -1, rxscan73_done183
    goto rxscan73_scan182
  rxscan73_loop181:
    inc rx72_pos
    gt rx72_pos, rx72_eos, rx72_fail177
    repr_bind_attr_int rx72_cur, rx72_curclass, "$!from", rx72_pos
  rxscan73_scan182:
    nqp_rxmark rx72_bstack, rxscan73_loop181, rx72_pos, 0
  rxscan73_done183:
    ge rx72_pos, rx72_eos, rx72_fail177
    is_cclass $I11, .CCLASS_WORD, rx72_tgt, rx72_pos
    if $I11, rx72_fail177
    add rx72_pos, 1
    rx72_cur."!cursor_pass"(rx72_pos, 'backtrack'=>1)
    .return (rx72_cur)
  rx72_restart176:
    repr_get_attr_obj rx72_cstack, rx72_cur, rx72_curclass, "$!cstack"
  rx72_fail177:
    unless rx72_bstack, rx72_done175
    pop $I19, rx72_bstack
    if_null rx72_cstack, rx72_cstack_done180
    unless rx72_cstack, rx72_cstack_done180
    dec $I19
    set $P11, rx72_cstack[$I19]
  rx72_cstack_done180:
    pop rx72_rep, rx72_bstack
    pop rx72_pos, rx72_bstack
    pop $I19, rx72_bstack
    lt rx72_pos, -1, rx72_done175
    lt rx72_pos, 0, rx72_fail177
    eq $I19, 0, rx72_fail177
    nqp_islist $I20, rx72_cstack
    unless $I20, rx72_jump178
    elements $I18, rx72_bstack
    le $I18, 0, rx72_cut179
    dec $I18
    set $I18, rx72_bstack[$I18]
  rx72_cut179:
    assign rx72_cstack, $I18
  rx72_jump178:
    jump $I19
  rx72_done175:
    rx72_cur."!cursor_fail"()
    .return (rx72_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_184_1361734134.987") :anon :lex :outer("cuid_12_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 102
    .local pmc fb_tmp_4 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$/"
    set fb_tmp_4, $P5003
    repr_defined $I5001, fb_tmp_4
    unless $I5001 goto if75_else185 
    set $P5004, fb_tmp_4[0]
    set $P5006, $P5004
    goto if75_end186
  if75_else185:
    null $P5005
    set $P5006, $P5005
  if75_end186:
    unless_null $P5006, vivi_76187
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_76187:
    set $S5001, $P5006
    $P5008 = $P5001."throw_unrecognized_metachar"($S5001)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "infixstopper" :subid("cuid_14_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 107
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_15_1361734134.987' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_16_1361734134.987' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_17_1361734134.987' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx78_start
    .local string rx78_tgt
    .local int rx78_pos
    .local int rx78_off
    .local int rx78_eos
    .local int rx78_rep
    .local pmc rx78_cur
    .local pmc rx78_curclass
    .local pmc rx78_bstack
    .local pmc rx78_cstack
    rx78_start = self."!cursor_start_all"()
    set rx78_cur, rx78_start[0]
    set rx78_tgt, rx78_start[1]
    set rx78_pos, rx78_start[2]
    set rx78_curclass, rx78_start[3]
    set rx78_bstack, rx78_start[4]
    set $I19, rx78_start[5]
    store_lex unicode:"$\x{a2}", rx78_cur
    length rx78_eos, rx78_tgt
    eq $I19, 1, rx78_restart192
    gt rx78_pos, rx78_eos, rx78_fail193
    repr_get_attr_int $I11, self, rx78_curclass, "$!from"
    ne $I11, -1, rxscan79_done199
    goto rxscan79_scan198
  rxscan79_loop197:
    inc rx78_pos
    gt rx78_pos, rx78_eos, rx78_fail193
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!from", rx78_pos
  rxscan79_scan198:
    nqp_rxmark rx78_bstack, rxscan79_loop197, rx78_pos, 0
  rxscan79_done199:
    rx78_cur."!dba"(rx78_pos, "infix stopper")
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt80_0201
    nqp_push_label $P11, alt80_1216
    nqp_push_label $P11, alt80_2227
    nqp_rxmark rx78_bstack, alt80_end200, -1, 0
    rx78_cur."!alt"(rx78_pos, "alt_nfa__5_1361734135.26", $P11)
    goto rx78_fail193
  alt80_0201:
    .const 'Sub' $P5001 = 'cuid_15_1361734134.987' 
    capture_lex $P5001
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!pos", rx78_pos
    $P11 = rx78_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx78_curclass, "$!pos"
    lt $I11, 0, rx78_fail193
    goto alt80_end200
  alt80_1216:
    .const 'Sub' $P5002 = 'cuid_16_1361734134.987' 
    capture_lex $P5002
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!pos", rx78_pos
    $P11 = rx78_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx78_curclass, "$!pos"
    lt $I11, 0, rx78_fail193
    goto alt80_end200
  alt80_2227:
    .const 'Sub' $P5003 = 'cuid_17_1361734134.987' 
    capture_lex $P5003
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!pos", rx78_pos
    $P11 = rx78_cur."before"($P5003)
    repr_get_attr_int $I11, $P11, rx78_curclass, "$!pos"
    lt $I11, 0, rx78_fail193
    goto alt80_end200
  alt80_end200:
    rx78_cur."!cursor_pass"(rx78_pos, "infixstopper", 'backtrack'=>1)
    .return (rx78_cur)
  rx78_restart192:
    repr_get_attr_obj rx78_cstack, rx78_cur, rx78_curclass, "$!cstack"
  rx78_fail193:
    unless rx78_bstack, rx78_done191
    pop $I19, rx78_bstack
    if_null rx78_cstack, rx78_cstack_done196
    unless rx78_cstack, rx78_cstack_done196
    dec $I19
    set $P11, rx78_cstack[$I19]
  rx78_cstack_done196:
    pop rx78_rep, rx78_bstack
    pop rx78_pos, rx78_bstack
    pop $I19, rx78_bstack
    lt rx78_pos, -1, rx78_done191
    lt rx78_pos, 0, rx78_fail193
    eq $I19, 0, rx78_fail193
    nqp_islist $I20, rx78_cstack
    unless $I20, rx78_jump194
    elements $I18, rx78_bstack
    le $I18, 0, rx78_cut195
    dec $I18
    set $I18, rx78_bstack[$I18]
  rx78_cut195:
    assign rx78_cstack, $I18
  rx78_jump194:
    jump $I19
  rx78_done191:
    rx78_cur."!cursor_fail"()
    .return (rx78_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_15_1361734134.987") :anon :lex :outer("cuid_14_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx81_start
    .local string rx81_tgt
    .local int rx81_pos
    .local int rx81_off
    .local int rx81_eos
    .local int rx81_rep
    .local pmc rx81_cur
    .local pmc rx81_curclass
    .local pmc rx81_bstack
    .local pmc rx81_cstack
    rx81_start = self."!cursor_start_all"()
    set rx81_cur, rx81_start[0]
    set rx81_tgt, rx81_start[1]
    set rx81_pos, rx81_start[2]
    set rx81_curclass, rx81_start[3]
    set rx81_bstack, rx81_start[4]
    set $I19, rx81_start[5]
    store_lex unicode:"$\x{a2}", rx81_cur
    length rx81_eos, rx81_tgt
    eq $I19, 1, rx81_restart204
    gt rx81_pos, rx81_eos, rx81_fail205
    repr_get_attr_int $I11, self, rx81_curclass, "$!from"
    ne $I11, -1, rxscan82_done211
    goto rxscan82_scan210
  rxscan82_loop209:
    inc rx81_pos
    gt rx81_pos, rx81_eos, rx81_fail205
    repr_bind_attr_int rx81_cur, rx81_curclass, "$!from", rx81_pos
  rxscan82_scan210:
    nqp_rxmark rx81_bstack, rxscan82_loop209, rx81_pos, 0
  rxscan82_done211:
  alt83_0213:
    nqp_rxmark rx81_bstack, alt83_1214, rx81_pos, 0
    add $I11, rx81_pos, 1
    gt $I11, rx81_eos, rx81_fail205
    substr $S10, rx81_tgt, rx81_pos, 1
    ne $S10, ucs4:")", rx81_fail205
    add rx81_pos, 1
    goto alt83_end212
  alt83_1214:
    nqp_rxmark rx81_bstack, alt83_2215, rx81_pos, 0
    add $I11, rx81_pos, 1
    gt $I11, rx81_eos, rx81_fail205
    substr $S10, rx81_tgt, rx81_pos, 1
    ne $S10, ucs4:"}", rx81_fail205
    add rx81_pos, 1
    goto alt83_end212
  alt83_2215:
    add $I11, rx81_pos, 1
    gt $I11, rx81_eos, rx81_fail205
    substr $S10, rx81_tgt, rx81_pos, 1
    ne $S10, ucs4:"]", rx81_fail205
    add rx81_pos, 1
  alt83_end212:
    rx81_cur."!cursor_pass"(rx81_pos, 'backtrack'=>1)
    .return (rx81_cur)
  rx81_restart204:
    repr_get_attr_obj rx81_cstack, rx81_cur, rx81_curclass, "$!cstack"
  rx81_fail205:
    unless rx81_bstack, rx81_done203
    pop $I19, rx81_bstack
    if_null rx81_cstack, rx81_cstack_done208
    unless rx81_cstack, rx81_cstack_done208
    dec $I19
    set $P11, rx81_cstack[$I19]
  rx81_cstack_done208:
    pop rx81_rep, rx81_bstack
    pop rx81_pos, rx81_bstack
    pop $I19, rx81_bstack
    lt rx81_pos, -1, rx81_done203
    lt rx81_pos, 0, rx81_fail205
    eq $I19, 0, rx81_fail205
    nqp_islist $I20, rx81_cstack
    unless $I20, rx81_jump206
    elements $I18, rx81_bstack
    le $I18, 0, rx81_cut207
    dec $I18
    set $I18, rx81_bstack[$I18]
  rx81_cut207:
    assign rx81_cstack, $I18
  rx81_jump206:
    jump $I19
  rx81_done203:
    rx81_cur."!cursor_fail"()
    .return (rx81_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_16_1361734134.987") :anon :lex :outer("cuid_14_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx84_start
    .local string rx84_tgt
    .local int rx84_pos
    .local int rx84_off
    .local int rx84_eos
    .local int rx84_rep
    .local pmc rx84_cur
    .local pmc rx84_curclass
    .local pmc rx84_bstack
    .local pmc rx84_cstack
    rx84_start = self."!cursor_start_all"()
    set rx84_cur, rx84_start[0]
    set rx84_tgt, rx84_start[1]
    set rx84_pos, rx84_start[2]
    set rx84_curclass, rx84_start[3]
    set rx84_bstack, rx84_start[4]
    set $I19, rx84_start[5]
    store_lex unicode:"$\x{a2}", rx84_cur
    length rx84_eos, rx84_tgt
    eq $I19, 1, rx84_restart219
    gt rx84_pos, rx84_eos, rx84_fail220
    repr_get_attr_int $I11, self, rx84_curclass, "$!from"
    ne $I11, -1, rxscan85_done226
    goto rxscan85_scan225
  rxscan85_loop224:
    inc rx84_pos
    gt rx84_pos, rx84_eos, rx84_fail220
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!from", rx84_pos
  rxscan85_scan225:
    nqp_rxmark rx84_bstack, rxscan85_loop224, rx84_pos, 0
  rxscan85_done226:
    add $I11, rx84_pos, 1
    gt $I11, rx84_eos, rx84_fail220
    substr $S10, rx84_tgt, rx84_pos, 1
    ne $S10, ucs4:">", rx84_fail220
    add rx84_pos, 1
    ge rx84_pos, rx84_eos, rx84_fail220
    substr $S11, rx84_tgt, rx84_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx84_fail220
    inc rx84_pos
    rx84_cur."!cursor_pass"(rx84_pos, 'backtrack'=>1)
    .return (rx84_cur)
  rx84_restart219:
    repr_get_attr_obj rx84_cstack, rx84_cur, rx84_curclass, "$!cstack"
  rx84_fail220:
    unless rx84_bstack, rx84_done218
    pop $I19, rx84_bstack
    if_null rx84_cstack, rx84_cstack_done223
    unless rx84_cstack, rx84_cstack_done223
    dec $I19
    set $P11, rx84_cstack[$I19]
  rx84_cstack_done223:
    pop rx84_rep, rx84_bstack
    pop rx84_pos, rx84_bstack
    pop $I19, rx84_bstack
    lt rx84_pos, -1, rx84_done218
    lt rx84_pos, 0, rx84_fail220
    eq $I19, 0, rx84_fail220
    nqp_islist $I20, rx84_cstack
    unless $I20, rx84_jump221
    elements $I18, rx84_bstack
    le $I18, 0, rx84_cut222
    dec $I18
    set $I18, rx84_bstack[$I18]
  rx84_cut222:
    assign rx84_cstack, $I18
  rx84_jump221:
    jump $I19
  rx84_done218:
    rx84_cur."!cursor_fail"()
    .return (rx84_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_17_1361734134.987") :anon :lex :outer("cuid_14_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx86_start
    .local string rx86_tgt
    .local int rx86_pos
    .local int rx86_off
    .local int rx86_eos
    .local int rx86_rep
    .local pmc rx86_cur
    .local pmc rx86_curclass
    .local pmc rx86_bstack
    .local pmc rx86_cstack
    rx86_start = self."!cursor_start_all"()
    set rx86_cur, rx86_start[0]
    set rx86_tgt, rx86_start[1]
    set rx86_pos, rx86_start[2]
    set rx86_curclass, rx86_start[3]
    set rx86_bstack, rx86_start[4]
    set $I19, rx86_start[5]
    store_lex unicode:"$\x{a2}", rx86_cur
    length rx86_eos, rx86_tgt
    eq $I19, 1, rx86_restart230
    gt rx86_pos, rx86_eos, rx86_fail231
    repr_get_attr_int $I11, self, rx86_curclass, "$!from"
    ne $I11, -1, rxscan87_done237
    goto rxscan87_scan236
  rxscan87_loop235:
    inc rx86_pos
    gt rx86_pos, rx86_eos, rx86_fail231
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!from", rx86_pos
  rxscan87_scan236:
    nqp_rxmark rx86_bstack, rxscan87_loop235, rx86_pos, 0
  rxscan87_done237:
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."rxstopper"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail231
    goto rxsubrule88_pass238
  rxsubrule88_back239:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail231
  rxsubrule88_pass238:
    rx86_cstack = rx86_cur."!cursor_capture"($P11, "rxstopper")
    set_addr $I11, rxsubrule88_back239
    push rx86_bstack, $I11
    push rx86_bstack, 0
    push rx86_bstack, rx86_pos
    elements $I11, rx86_cstack
    push rx86_bstack, $I11
    repr_get_attr_int rx86_pos, $P11, rx86_curclass, "$!pos"
    rx86_cur."!cursor_pass"(rx86_pos, 'backtrack'=>1)
    .return (rx86_cur)
  rx86_restart230:
    repr_get_attr_obj rx86_cstack, rx86_cur, rx86_curclass, "$!cstack"
  rx86_fail231:
    unless rx86_bstack, rx86_done229
    pop $I19, rx86_bstack
    if_null rx86_cstack, rx86_cstack_done234
    unless rx86_cstack, rx86_cstack_done234
    dec $I19
    set $P11, rx86_cstack[$I19]
  rx86_cstack_done234:
    pop rx86_rep, rx86_bstack
    pop rx86_pos, rx86_bstack
    pop $I19, rx86_bstack
    lt rx86_pos, -1, rx86_done229
    lt rx86_pos, 0, rx86_fail231
    eq $I19, 0, rx86_fail231
    nqp_islist $I20, rx86_cstack
    unless $I20, rx86_jump232
    elements $I18, rx86_bstack
    le $I18, 0, rx86_cut233
    dec $I18
    set $I18, rx86_bstack[$I18]
  rx86_cut233:
    assign rx86_cstack, $I18
  rx86_jump232:
    jump $I19
  rx86_done229:
    rx86_cur."!cursor_fail"()
    .return (rx86_cur) 
.end
.HLL "nqp"
.namespace []
.sub "rxstopper" :subid("cuid_18_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 116
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx89_start
    .local string rx89_tgt
    .local int rx89_pos
    .local int rx89_off
    .local int rx89_eos
    .local int rx89_rep
    .local pmc rx89_cur
    .local pmc rx89_curclass
    .local pmc rx89_bstack
    .local pmc rx89_cstack
    rx89_start = self."!cursor_start_all"()
    set rx89_cur, rx89_start[0]
    set rx89_tgt, rx89_start[1]
    set rx89_pos, rx89_start[2]
    set rx89_curclass, rx89_start[3]
    set rx89_bstack, rx89_start[4]
    set $I19, rx89_start[5]
    store_lex unicode:"$\x{a2}", rx89_cur
    length rx89_eos, rx89_tgt
    eq $I19, 1, rx89_restart242
    gt rx89_pos, rx89_eos, rx89_fail243
    repr_get_attr_int $I11, self, rx89_curclass, "$!from"
    ne $I11, -1, rxscan90_done249
    goto rxscan90_scan248
  rxscan90_loop247:
    inc rx89_pos
    gt rx89_pos, rx89_eos, rx89_fail243
    repr_bind_attr_int rx89_cur, rx89_curclass, "$!from", rx89_pos
  rxscan90_scan248:
    nqp_rxmark rx89_bstack, rxscan90_loop247, rx89_pos, 0
  rxscan90_done249:
    lt rx89_pos, rx89_eos, rx89_fail243
    rx89_cur."!cursor_pass"(rx89_pos, "rxstopper", 'backtrack'=>1)
    .return (rx89_cur)
  rx89_restart242:
    repr_get_attr_obj rx89_cstack, rx89_cur, rx89_curclass, "$!cstack"
  rx89_fail243:
    unless rx89_bstack, rx89_done241
    pop $I19, rx89_bstack
    if_null rx89_cstack, rx89_cstack_done246
    unless rx89_cstack, rx89_cstack_done246
    dec $I19
    set $P11, rx89_cstack[$I19]
  rx89_cstack_done246:
    pop rx89_rep, rx89_bstack
    pop rx89_pos, rx89_bstack
    pop $I19, rx89_bstack
    lt rx89_pos, -1, rx89_done241
    lt rx89_pos, 0, rx89_fail243
    eq $I19, 0, rx89_fail243
    nqp_islist $I20, rx89_cstack
    unless $I20, rx89_jump244
    elements $I18, rx89_bstack
    le $I18, 0, rx89_cut245
    dec $I18
    set $I18, rx89_bstack[$I18]
  rx89_cut245:
    assign rx89_cstack, $I18
  rx89_jump244:
    jump $I19
  rx89_done241:
    rx89_cur."!cursor_fail"()
    .return (rx89_cur) 
.end
.HLL "nqp"
.namespace []
.sub "termaltseq" :subid("cuid_19_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 118
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_185_1361734134.987' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx92_start
    .local string rx92_tgt
    .local int rx92_pos
    .local int rx92_off
    .local int rx92_eos
    .local int rx92_rep
    .local pmc rx92_cur
    .local pmc rx92_curclass
    .local pmc rx92_bstack
    .local pmc rx92_cstack
    rx92_start = self."!cursor_start_all"()
    set rx92_cur, rx92_start[0]
    set rx92_tgt, rx92_start[1]
    set rx92_pos, rx92_start[2]
    set rx92_curclass, rx92_start[3]
    set rx92_bstack, rx92_start[4]
    set $I19, rx92_start[5]
    store_lex unicode:"$\x{a2}", rx92_cur
    length rx92_eos, rx92_tgt
    eq $I19, 1, rx92_restart253
    gt rx92_pos, rx92_eos, rx92_fail254
    repr_get_attr_int $I11, self, rx92_curclass, "$!from"
    ne $I11, -1, rxscan93_done260
    goto rxscan93_scan259
  rxscan93_loop258:
    inc rx92_pos
    gt rx92_pos, rx92_eos, rx92_fail254
    repr_bind_attr_int rx92_cur, rx92_curclass, "$!from", rx92_pos
  rxscan93_scan259:
    nqp_rxmark rx92_bstack, rxscan93_loop258, rx92_pos, 0
  rxscan93_done260:
    repr_bind_attr_int rx92_cur, rx92_curclass, "$!pos", rx92_pos
    $P11 = rx92_cur."termconjseq"()
    repr_get_attr_int $I11, $P11, rx92_curclass, "$!pos"
    lt $I11, 0, rx92_fail254
    nqp_rxmark rx92_bstack, rxsubrule94_pass261, -1, 0
  rxsubrule94_pass261:
    rx92_cstack = rx92_cur."!cursor_capture"($P11, "termconjseq")
    repr_get_attr_int rx92_pos, $P11, rx92_curclass, "$!pos"
    nqp_rxmark rx92_bstack, rxquantr95_done263, rx92_pos, 0
  rxquantr95_loop262:
    add $I11, rx92_pos, 2
    gt $I11, rx92_eos, rx92_fail254
    substr $S10, rx92_tgt, rx92_pos, 2
    ne $S10, ucs4:"||", rx92_fail254
    add rx92_pos, 2
  alt96_0265:
    nqp_rxmark rx92_bstack, alt96_1267, rx92_pos, 0
    repr_bind_attr_int rx92_cur, rx92_curclass, "$!pos", rx92_pos
    store_lex unicode:"$\x{a2}", rx92_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_185_1361734134.987' 
    capture_lex $P5002
    $P5003 = $P5002()
    repr_bind_attr_int rx92_cur, rx92_curclass, "$!pos", rx92_pos
    $P11 = rx92_cur."termconjseq"()
    repr_get_attr_int $I11, $P11, rx92_curclass, "$!pos"
    lt $I11, 0, rx92_fail254
    nqp_rxmark rx92_bstack, rxsubrule97_pass266, -1, 0
  rxsubrule97_pass266:
    rx92_cstack = rx92_cur."!cursor_capture"($P11, "termconjseq")
    repr_get_attr_int rx92_pos, $P11, rx92_curclass, "$!pos"
    goto alt96_end264
  alt96_1267:
    repr_bind_attr_int rx92_cur, rx92_curclass, "$!pos", rx92_pos
    $P11 = rx92_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx92_curclass, "$!pos"
    lt $I11, 0, rx92_fail254
    repr_get_attr_int rx92_pos, $P11, rx92_curclass, "$!pos"
  alt96_end264:
    nqp_rxpeek $I19, rx92_bstack, rxquantr95_done263
    inc $I19
    inc $I19
    set rx92_rep, rx92_bstack[$I19]
    nqp_rxcommit rx92_bstack, rxquantr95_done263
    inc rx92_rep
    nqp_rxmark rx92_bstack, rxquantr95_done263, rx92_pos, rx92_rep
    goto rxquantr95_loop262
  rxquantr95_done263:
    rx92_cur."!cursor_pass"(rx92_pos, "termaltseq", 'backtrack'=>1)
    .return (rx92_cur)
  rx92_restart253:
    repr_get_attr_obj rx92_cstack, rx92_cur, rx92_curclass, "$!cstack"
  rx92_fail254:
    unless rx92_bstack, rx92_done252
    pop $I19, rx92_bstack
    if_null rx92_cstack, rx92_cstack_done257
    unless rx92_cstack, rx92_cstack_done257
    dec $I19
    set $P11, rx92_cstack[$I19]
  rx92_cstack_done257:
    pop rx92_rep, rx92_bstack
    pop rx92_pos, rx92_bstack
    pop $I19, rx92_bstack
    lt rx92_pos, -1, rx92_done252
    lt rx92_pos, 0, rx92_fail254
    eq $I19, 0, rx92_fail254
    nqp_islist $I20, rx92_cstack
    unless $I20, rx92_jump255
    elements $I18, rx92_bstack
    le $I18, 0, rx92_cut256
    dec $I18
    set $I18, rx92_bstack[$I18]
  rx92_cut256:
    assign rx92_cstack, $I18
  rx92_jump255:
    jump $I19
  rx92_done252:
    rx92_cur."!cursor_fail"()
    .return (rx92_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_185_1361734134.987") :anon :lex :outer("cuid_19_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 120

    box $P5001, 1
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "termconjseq" :subid("cuid_20_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 123
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_186_1361734134.987' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx99_start
    .local string rx99_tgt
    .local int rx99_pos
    .local int rx99_off
    .local int rx99_eos
    .local int rx99_rep
    .local pmc rx99_cur
    .local pmc rx99_curclass
    .local pmc rx99_bstack
    .local pmc rx99_cstack
    rx99_start = self."!cursor_start_all"()
    set rx99_cur, rx99_start[0]
    set rx99_tgt, rx99_start[1]
    set rx99_pos, rx99_start[2]
    set rx99_curclass, rx99_start[3]
    set rx99_bstack, rx99_start[4]
    set $I19, rx99_start[5]
    store_lex unicode:"$\x{a2}", rx99_cur
    length rx99_eos, rx99_tgt
    eq $I19, 1, rx99_restart271
    gt rx99_pos, rx99_eos, rx99_fail272
    repr_get_attr_int $I11, self, rx99_curclass, "$!from"
    ne $I11, -1, rxscan100_done278
    goto rxscan100_scan277
  rxscan100_loop276:
    inc rx99_pos
    gt rx99_pos, rx99_eos, rx99_fail272
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!from", rx99_pos
  rxscan100_scan277:
    nqp_rxmark rx99_bstack, rxscan100_loop276, rx99_pos, 0
  rxscan100_done278:
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    $P11 = rx99_cur."termalt"()
    repr_get_attr_int $I11, $P11, rx99_curclass, "$!pos"
    lt $I11, 0, rx99_fail272
    nqp_rxmark rx99_bstack, rxsubrule101_pass279, -1, 0
  rxsubrule101_pass279:
    rx99_cstack = rx99_cur."!cursor_capture"($P11, "termalt")
    repr_get_attr_int rx99_pos, $P11, rx99_curclass, "$!pos"
    nqp_rxmark rx99_bstack, rxquantr102_done281, rx99_pos, 0
  rxquantr102_loop280:
    add $I11, rx99_pos, 2
    gt $I11, rx99_eos, rx99_fail272
    substr $S10, rx99_tgt, rx99_pos, 2
    ne $S10, ucs4:"&&", rx99_fail272
    add rx99_pos, 2
  alt103_0283:
    nqp_rxmark rx99_bstack, alt103_1285, rx99_pos, 0
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    store_lex unicode:"$\x{a2}", rx99_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_186_1361734134.987' 
    capture_lex $P5002
    $P5003 = $P5002()
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    $P11 = rx99_cur."termalt"()
    repr_get_attr_int $I11, $P11, rx99_curclass, "$!pos"
    lt $I11, 0, rx99_fail272
    nqp_rxmark rx99_bstack, rxsubrule104_pass284, -1, 0
  rxsubrule104_pass284:
    rx99_cstack = rx99_cur."!cursor_capture"($P11, "termalt")
    repr_get_attr_int rx99_pos, $P11, rx99_curclass, "$!pos"
    goto alt103_end282
  alt103_1285:
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    $P11 = rx99_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx99_curclass, "$!pos"
    lt $I11, 0, rx99_fail272
    repr_get_attr_int rx99_pos, $P11, rx99_curclass, "$!pos"
  alt103_end282:
    nqp_rxpeek $I19, rx99_bstack, rxquantr102_done281
    inc $I19
    inc $I19
    set rx99_rep, rx99_bstack[$I19]
    nqp_rxcommit rx99_bstack, rxquantr102_done281
    inc rx99_rep
    nqp_rxmark rx99_bstack, rxquantr102_done281, rx99_pos, rx99_rep
    goto rxquantr102_loop280
  rxquantr102_done281:
    rx99_cur."!cursor_pass"(rx99_pos, "termconjseq", 'backtrack'=>1)
    .return (rx99_cur)
  rx99_restart271:
    repr_get_attr_obj rx99_cstack, rx99_cur, rx99_curclass, "$!cstack"
  rx99_fail272:
    unless rx99_bstack, rx99_done270
    pop $I19, rx99_bstack
    if_null rx99_cstack, rx99_cstack_done275
    unless rx99_cstack, rx99_cstack_done275
    dec $I19
    set $P11, rx99_cstack[$I19]
  rx99_cstack_done275:
    pop rx99_rep, rx99_bstack
    pop rx99_pos, rx99_bstack
    pop $I19, rx99_bstack
    lt rx99_pos, -1, rx99_done270
    lt rx99_pos, 0, rx99_fail272
    eq $I19, 0, rx99_fail272
    nqp_islist $I20, rx99_cstack
    unless $I20, rx99_jump273
    elements $I18, rx99_bstack
    le $I18, 0, rx99_cut274
    dec $I18
    set $I18, rx99_bstack[$I18]
  rx99_cut274:
    assign rx99_cstack, $I18
  rx99_jump273:
    jump $I19
  rx99_done270:
    rx99_cur."!cursor_fail"()
    .return (rx99_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_186_1361734134.987") :anon :lex :outer("cuid_20_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 125

    box $P5001, 0
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "termalt" :subid("cuid_21_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 128
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_187_1361734134.987' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx106_start
    .local string rx106_tgt
    .local int rx106_pos
    .local int rx106_off
    .local int rx106_eos
    .local int rx106_rep
    .local pmc rx106_cur
    .local pmc rx106_curclass
    .local pmc rx106_bstack
    .local pmc rx106_cstack
    rx106_start = self."!cursor_start_all"()
    set rx106_cur, rx106_start[0]
    set rx106_tgt, rx106_start[1]
    set rx106_pos, rx106_start[2]
    set rx106_curclass, rx106_start[3]
    set rx106_bstack, rx106_start[4]
    set $I19, rx106_start[5]
    store_lex unicode:"$\x{a2}", rx106_cur
    length rx106_eos, rx106_tgt
    eq $I19, 1, rx106_restart289
    gt rx106_pos, rx106_eos, rx106_fail290
    repr_get_attr_int $I11, self, rx106_curclass, "$!from"
    ne $I11, -1, rxscan107_done296
    goto rxscan107_scan295
  rxscan107_loop294:
    inc rx106_pos
    gt rx106_pos, rx106_eos, rx106_fail290
    repr_bind_attr_int rx106_cur, rx106_curclass, "$!from", rx106_pos
  rxscan107_scan295:
    nqp_rxmark rx106_bstack, rxscan107_loop294, rx106_pos, 0
  rxscan107_done296:
    repr_bind_attr_int rx106_cur, rx106_curclass, "$!pos", rx106_pos
    $P11 = rx106_cur."termconj"()
    repr_get_attr_int $I11, $P11, rx106_curclass, "$!pos"
    lt $I11, 0, rx106_fail290
    nqp_rxmark rx106_bstack, rxsubrule108_pass297, -1, 0
  rxsubrule108_pass297:
    rx106_cstack = rx106_cur."!cursor_capture"($P11, "termconj")
    repr_get_attr_int rx106_pos, $P11, rx106_curclass, "$!pos"
    nqp_rxmark rx106_bstack, rxquantr109_done299, rx106_pos, 0
  rxquantr109_loop298:
    add $I11, rx106_pos, 1
    gt $I11, rx106_eos, rx106_fail290
    substr $S10, rx106_tgt, rx106_pos, 1
    ne $S10, ucs4:"|", rx106_fail290
    add rx106_pos, 1
    ge rx106_pos, rx106_eos, rx106_fail290
    substr $S11, rx106_tgt, rx106_pos, 1
    index $I11, ucs4:"|", $S11
    ge $I11, 0, rx106_fail290
  alt110_0301:
    nqp_rxmark rx106_bstack, alt110_1303, rx106_pos, 0
    repr_bind_attr_int rx106_cur, rx106_curclass, "$!pos", rx106_pos
    store_lex unicode:"$\x{a2}", rx106_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_187_1361734134.987' 
    capture_lex $P5002
    $P5003 = $P5002()
    repr_bind_attr_int rx106_cur, rx106_curclass, "$!pos", rx106_pos
    $P11 = rx106_cur."termconj"()
    repr_get_attr_int $I11, $P11, rx106_curclass, "$!pos"
    lt $I11, 0, rx106_fail290
    nqp_rxmark rx106_bstack, rxsubrule111_pass302, -1, 0
  rxsubrule111_pass302:
    rx106_cstack = rx106_cur."!cursor_capture"($P11, "termconj")
    repr_get_attr_int rx106_pos, $P11, rx106_curclass, "$!pos"
    goto alt110_end300
  alt110_1303:
    repr_bind_attr_int rx106_cur, rx106_curclass, "$!pos", rx106_pos
    $P11 = rx106_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx106_curclass, "$!pos"
    lt $I11, 0, rx106_fail290
    repr_get_attr_int rx106_pos, $P11, rx106_curclass, "$!pos"
  alt110_end300:
    nqp_rxpeek $I19, rx106_bstack, rxquantr109_done299
    inc $I19
    inc $I19
    set rx106_rep, rx106_bstack[$I19]
    nqp_rxcommit rx106_bstack, rxquantr109_done299
    inc rx106_rep
    nqp_rxmark rx106_bstack, rxquantr109_done299, rx106_pos, rx106_rep
    goto rxquantr109_loop298
  rxquantr109_done299:
    rx106_cur."!cursor_pass"(rx106_pos, "termalt", 'backtrack'=>1)
    .return (rx106_cur)
  rx106_restart289:
    repr_get_attr_obj rx106_cstack, rx106_cur, rx106_curclass, "$!cstack"
  rx106_fail290:
    unless rx106_bstack, rx106_done288
    pop $I19, rx106_bstack
    if_null rx106_cstack, rx106_cstack_done293
    unless rx106_cstack, rx106_cstack_done293
    dec $I19
    set $P11, rx106_cstack[$I19]
  rx106_cstack_done293:
    pop rx106_rep, rx106_bstack
    pop rx106_pos, rx106_bstack
    pop $I19, rx106_bstack
    lt rx106_pos, -1, rx106_done288
    lt rx106_pos, 0, rx106_fail290
    eq $I19, 0, rx106_fail290
    nqp_islist $I20, rx106_cstack
    unless $I20, rx106_jump291
    elements $I18, rx106_bstack
    le $I18, 0, rx106_cut292
    dec $I18
    set $I18, rx106_bstack[$I18]
  rx106_cut292:
    assign rx106_cstack, $I18
  rx106_jump291:
    jump $I19
  rx106_done288:
    rx106_cur."!cursor_fail"()
    .return (rx106_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_187_1361734134.987") :anon :lex :outer("cuid_21_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 130

    box $P5001, 0
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "termconj" :subid("cuid_22_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 133
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_188_1361734134.987' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx113_start
    .local string rx113_tgt
    .local int rx113_pos
    .local int rx113_off
    .local int rx113_eos
    .local int rx113_rep
    .local pmc rx113_cur
    .local pmc rx113_curclass
    .local pmc rx113_bstack
    .local pmc rx113_cstack
    rx113_start = self."!cursor_start_all"()
    set rx113_cur, rx113_start[0]
    set rx113_tgt, rx113_start[1]
    set rx113_pos, rx113_start[2]
    set rx113_curclass, rx113_start[3]
    set rx113_bstack, rx113_start[4]
    set $I19, rx113_start[5]
    store_lex unicode:"$\x{a2}", rx113_cur
    length rx113_eos, rx113_tgt
    eq $I19, 1, rx113_restart307
    gt rx113_pos, rx113_eos, rx113_fail308
    repr_get_attr_int $I11, self, rx113_curclass, "$!from"
    ne $I11, -1, rxscan114_done314
    goto rxscan114_scan313
  rxscan114_loop312:
    inc rx113_pos
    gt rx113_pos, rx113_eos, rx113_fail308
    repr_bind_attr_int rx113_cur, rx113_curclass, "$!from", rx113_pos
  rxscan114_scan313:
    nqp_rxmark rx113_bstack, rxscan114_loop312, rx113_pos, 0
  rxscan114_done314:
    repr_bind_attr_int rx113_cur, rx113_curclass, "$!pos", rx113_pos
    $P11 = rx113_cur."termish"()
    repr_get_attr_int $I11, $P11, rx113_curclass, "$!pos"
    lt $I11, 0, rx113_fail308
    nqp_rxmark rx113_bstack, rxsubrule115_pass315, -1, 0
  rxsubrule115_pass315:
    rx113_cstack = rx113_cur."!cursor_capture"($P11, "termish")
    repr_get_attr_int rx113_pos, $P11, rx113_curclass, "$!pos"
    nqp_rxmark rx113_bstack, rxquantr116_done317, rx113_pos, 0
  rxquantr116_loop316:
    add $I11, rx113_pos, 1
    gt $I11, rx113_eos, rx113_fail308
    substr $S10, rx113_tgt, rx113_pos, 1
    ne $S10, ucs4:"&", rx113_fail308
    add rx113_pos, 1
    ge rx113_pos, rx113_eos, rx113_fail308
    substr $S11, rx113_tgt, rx113_pos, 1
    index $I11, ucs4:"&", $S11
    ge $I11, 0, rx113_fail308
  alt117_0319:
    nqp_rxmark rx113_bstack, alt117_1321, rx113_pos, 0
    repr_bind_attr_int rx113_cur, rx113_curclass, "$!pos", rx113_pos
    store_lex unicode:"$\x{a2}", rx113_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_188_1361734134.987' 
    capture_lex $P5002
    $P5003 = $P5002()
    repr_bind_attr_int rx113_cur, rx113_curclass, "$!pos", rx113_pos
    $P11 = rx113_cur."termish"()
    repr_get_attr_int $I11, $P11, rx113_curclass, "$!pos"
    lt $I11, 0, rx113_fail308
    nqp_rxmark rx113_bstack, rxsubrule118_pass320, -1, 0
  rxsubrule118_pass320:
    rx113_cstack = rx113_cur."!cursor_capture"($P11, "termish")
    repr_get_attr_int rx113_pos, $P11, rx113_curclass, "$!pos"
    goto alt117_end318
  alt117_1321:
    repr_bind_attr_int rx113_cur, rx113_curclass, "$!pos", rx113_pos
    $P11 = rx113_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx113_curclass, "$!pos"
    lt $I11, 0, rx113_fail308
    repr_get_attr_int rx113_pos, $P11, rx113_curclass, "$!pos"
  alt117_end318:
    nqp_rxpeek $I19, rx113_bstack, rxquantr116_done317
    inc $I19
    inc $I19
    set rx113_rep, rx113_bstack[$I19]
    nqp_rxcommit rx113_bstack, rxquantr116_done317
    inc rx113_rep
    nqp_rxmark rx113_bstack, rxquantr116_done317, rx113_pos, rx113_rep
    goto rxquantr116_loop316
  rxquantr116_done317:
    rx113_cur."!cursor_pass"(rx113_pos, "termconj", 'backtrack'=>1)
    .return (rx113_cur)
  rx113_restart307:
    repr_get_attr_obj rx113_cstack, rx113_cur, rx113_curclass, "$!cstack"
  rx113_fail308:
    unless rx113_bstack, rx113_done306
    pop $I19, rx113_bstack
    if_null rx113_cstack, rx113_cstack_done311
    unless rx113_cstack, rx113_cstack_done311
    dec $I19
    set $P11, rx113_cstack[$I19]
  rx113_cstack_done311:
    pop rx113_rep, rx113_bstack
    pop rx113_pos, rx113_bstack
    pop $I19, rx113_bstack
    lt rx113_pos, -1, rx113_done306
    lt rx113_pos, 0, rx113_fail308
    eq $I19, 0, rx113_fail308
    nqp_islist $I20, rx113_cstack
    unless $I20, rx113_jump309
    elements $I18, rx113_bstack
    le $I18, 0, rx113_cut310
    dec $I18
    set $I18, rx113_bstack[$I18]
  rx113_cut310:
    assign rx113_cstack, $I18
  rx113_jump309:
    jump $I19
  rx113_done306:
    rx113_cur."!cursor_fail"()
    .return (rx113_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_188_1361734134.987") :anon :lex :outer("cuid_22_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 135

    box $P5001, 0
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "termish" :subid("cuid_23_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 138
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_24_1361734134.987' 
    capture_lex $P5006 
    .const 'Sub' $P5006 = 'cuid_25_1361734134.987' 
    capture_lex $P5006 
    .const 'Sub' $P5006 = 'cuid_189_1361734134.987' 
    capture_lex $P5006 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx120_start
    .local string rx120_tgt
    .local int rx120_pos
    .local int rx120_off
    .local int rx120_eos
    .local int rx120_rep
    .local pmc rx120_cur
    .local pmc rx120_curclass
    .local pmc rx120_bstack
    .local pmc rx120_cstack
    rx120_start = self."!cursor_start_all"()
    set rx120_cur, rx120_start[0]
    set rx120_tgt, rx120_start[1]
    set rx120_pos, rx120_start[2]
    set rx120_curclass, rx120_start[3]
    set rx120_bstack, rx120_start[4]
    set $I19, rx120_start[5]
    store_lex unicode:"$\x{a2}", rx120_cur
    length rx120_eos, rx120_tgt
    eq $I19, 1, rx120_restart325
    gt rx120_pos, rx120_eos, rx120_fail326
    repr_get_attr_int $I11, self, rx120_curclass, "$!from"
    ne $I11, -1, rxscan121_done332
    goto rxscan121_scan331
  rxscan121_loop330:
    inc rx120_pos
    gt rx120_pos, rx120_eos, rx120_fail326
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!from", rx120_pos
  rxscan121_scan331:
    nqp_rxmark rx120_bstack, rxscan121_loop330, rx120_pos, 0
  rxscan121_done332:
  alt122_0334:
    nqp_rxmark rx120_bstack, alt122_1339, rx120_pos, 0
    nqp_rxmark rx120_bstack, rxquantr123_done336, -1, 0
  rxquantr123_loop335:
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!pos", rx120_pos
    $P11 = rx120_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx120_curclass, "$!pos"
    lt $I11, 0, rx120_fail326
    goto rxsubrule124_pass337
  rxsubrule124_back338:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx120_curclass, "$!pos"
    lt $I11, 0, rx120_fail326
  rxsubrule124_pass337:
    rx120_cstack = rx120_cur."!cursor_capture"($P11, "noun")
    set_addr $I11, rxsubrule124_back338
    push rx120_bstack, $I11
    push rx120_bstack, 0
    push rx120_bstack, rx120_pos
    elements $I11, rx120_cstack
    push rx120_bstack, $I11
    repr_get_attr_int rx120_pos, $P11, rx120_curclass, "$!pos"
    nqp_rxpeek $I19, rx120_bstack, rxquantr123_done336
    inc $I19
    inc $I19
    set rx120_rep, rx120_bstack[$I19]
    nqp_rxcommit rx120_bstack, rxquantr123_done336
    inc rx120_rep
    nqp_rxmark rx120_bstack, rxquantr123_done336, rx120_pos, rx120_rep
    goto rxquantr123_loop335
  rxquantr123_done336:
    goto alt122_end333
  alt122_1339:
    nqp_rxmark rx120_bstack, alt122_2355, rx120_pos, 0
    .const 'Sub' $P5001 = 'cuid_24_1361734134.987' 
    capture_lex $P5001
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!pos", rx120_pos
    $P11 = rx120_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx120_curclass, "$!pos"
    lt $I11, 0, rx120_fail326
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!pos", rx120_pos
    $P11 = rx120_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx120_curclass, "$!pos"
    lt $I11, 0, rx120_fail326
    repr_get_attr_int rx120_pos, $P11, rx120_curclass, "$!pos"
    goto alt122_end333
  alt122_2355:
    .const 'Sub' $P5002 = 'cuid_25_1361734134.987' 
    capture_lex $P5002
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!pos", rx120_pos
    $P11 = rx120_cur.$P5002()
    repr_get_attr_int $I11, $P11, rx120_curclass, "$!pos"
    lt $I11, 0, rx120_fail326
    nqp_rxmark rx120_bstack, rxsubrule132_pass366, -1, 0
  rxsubrule132_pass366:
    rx120_cstack = rx120_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx120_pos, $P11, rx120_curclass, "$!pos"
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!pos", rx120_pos
    store_lex unicode:"$\x{a2}", rx120_cur
    $P5003 = $P101."MATCH"()
    set $P102, $P5003
    .const 'Sub' $P5004 = 'cuid_189_1361734134.987' 
    capture_lex $P5004
    $P5005 = $P5004()
  alt122_end333:
    rx120_cur."!cursor_pass"(rx120_pos, "termish", 'backtrack'=>1)
    .return (rx120_cur)
  rx120_restart325:
    repr_get_attr_obj rx120_cstack, rx120_cur, rx120_curclass, "$!cstack"
  rx120_fail326:
    unless rx120_bstack, rx120_done324
    pop $I19, rx120_bstack
    if_null rx120_cstack, rx120_cstack_done329
    unless rx120_cstack, rx120_cstack_done329
    dec $I19
    set $P11, rx120_cstack[$I19]
  rx120_cstack_done329:
    pop rx120_rep, rx120_bstack
    pop rx120_pos, rx120_bstack
    pop $I19, rx120_bstack
    lt rx120_pos, -1, rx120_done324
    lt rx120_pos, 0, rx120_fail326
    eq $I19, 0, rx120_fail326
    nqp_islist $I20, rx120_cstack
    unless $I20, rx120_jump327
    elements $I18, rx120_bstack
    le $I18, 0, rx120_cut328
    dec $I18
    set $I18, rx120_bstack[$I18]
  rx120_cut328:
    assign rx120_cstack, $I18
  rx120_jump327:
    jump $I19
  rx120_done324:
    rx120_cur."!cursor_fail"()
    .return (rx120_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_24_1361734134.987") :anon :lex :outer("cuid_23_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx125_start
    .local string rx125_tgt
    .local int rx125_pos
    .local int rx125_off
    .local int rx125_eos
    .local int rx125_rep
    .local pmc rx125_cur
    .local pmc rx125_curclass
    .local pmc rx125_bstack
    .local pmc rx125_cstack
    rx125_start = self."!cursor_start_all"()
    set rx125_cur, rx125_start[0]
    set rx125_tgt, rx125_start[1]
    set rx125_pos, rx125_start[2]
    set rx125_curclass, rx125_start[3]
    set rx125_bstack, rx125_start[4]
    set $I19, rx125_start[5]
    store_lex unicode:"$\x{a2}", rx125_cur
    length rx125_eos, rx125_tgt
    eq $I19, 1, rx125_restart342
    gt rx125_pos, rx125_eos, rx125_fail343
    repr_get_attr_int $I11, self, rx125_curclass, "$!from"
    ne $I11, -1, rxscan126_done349
    goto rxscan126_scan348
  rxscan126_loop347:
    inc rx125_pos
    gt rx125_pos, rx125_eos, rx125_fail343
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!from", rx125_pos
  rxscan126_scan348:
    nqp_rxmark rx125_bstack, rxscan126_loop347, rx125_pos, 0
  rxscan126_done349:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt127_0351
    nqp_push_label $P11, alt127_1353
    nqp_rxmark rx125_bstack, alt127_end350, -1, 0
    rx125_cur."!alt"(rx125_pos, "alt_nfa__6_1361734135.326", $P11)
    goto rx125_fail343
  alt127_0351:
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!pos", rx125_pos
    $P11 = rx125_cur."stopper"()
    repr_get_attr_int $I11, $P11, rx125_curclass, "$!pos"
    lt $I11, 0, rx125_fail343
    nqp_rxmark rx125_bstack, rxsubrule128_pass352, -1, 0
  rxsubrule128_pass352:
    rx125_cstack = rx125_cur."!cursor_capture"($P11, "stopper")
    repr_get_attr_int rx125_pos, $P11, rx125_curclass, "$!pos"
    goto alt127_end350
  alt127_1353:
    ge rx125_pos, rx125_eos, rx125_fail343
    substr $S11, rx125_tgt, rx125_pos, 1
    index $I11, ucs4:"&|~", $S11
    lt $I11, 0, rx125_fail343
    inc rx125_pos
    goto alt127_end350
  alt127_end350:
    rx125_cur."!cursor_pass"(rx125_pos, 'backtrack'=>1)
    .return (rx125_cur)
  rx125_restart342:
    repr_get_attr_obj rx125_cstack, rx125_cur, rx125_curclass, "$!cstack"
  rx125_fail343:
    unless rx125_bstack, rx125_done341
    pop $I19, rx125_bstack
    if_null rx125_cstack, rx125_cstack_done346
    unless rx125_cstack, rx125_cstack_done346
    dec $I19
    set $P11, rx125_cstack[$I19]
  rx125_cstack_done346:
    pop rx125_rep, rx125_bstack
    pop rx125_pos, rx125_bstack
    pop $I19, rx125_bstack
    lt rx125_pos, -1, rx125_done341
    lt rx125_pos, 0, rx125_fail343
    eq $I19, 0, rx125_fail343
    nqp_islist $I20, rx125_cstack
    unless $I20, rx125_jump344
    elements $I18, rx125_bstack
    le $I18, 0, rx125_cut345
    dec $I18
    set $I18, rx125_bstack[$I18]
  rx125_cut345:
    assign rx125_cstack, $I18
  rx125_jump344:
    jump $I19
  rx125_done341:
    rx125_cur."!cursor_fail"()
    .return (rx125_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_25_1361734134.987") :anon :lex :outer("cuid_23_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx130_start
    .local string rx130_tgt
    .local int rx130_pos
    .local int rx130_off
    .local int rx130_eos
    .local int rx130_rep
    .local pmc rx130_cur
    .local pmc rx130_curclass
    .local pmc rx130_bstack
    .local pmc rx130_cstack
    rx130_start = self."!cursor_start_all"()
    set rx130_cur, rx130_start[0]
    set rx130_tgt, rx130_start[1]
    set rx130_pos, rx130_start[2]
    set rx130_curclass, rx130_start[3]
    set rx130_bstack, rx130_start[4]
    set $I19, rx130_start[5]
    store_lex unicode:"$\x{a2}", rx130_cur
    length rx130_eos, rx130_tgt
    eq $I19, 1, rx130_restart358
    gt rx130_pos, rx130_eos, rx130_fail359
    repr_get_attr_int $I11, self, rx130_curclass, "$!from"
    ne $I11, -1, rxscan131_done365
    goto rxscan131_scan364
  rxscan131_loop363:
    inc rx130_pos
    gt rx130_pos, rx130_eos, rx130_fail359
    repr_bind_attr_int rx130_cur, rx130_curclass, "$!from", rx130_pos
  rxscan131_scan364:
    nqp_rxmark rx130_bstack, rxscan131_loop363, rx130_pos, 0
  rxscan131_done365:
    ge rx130_pos, rx130_eos, rx130_fail359
    is_cclass $I11, .CCLASS_WORD, rx130_tgt, rx130_pos
    if $I11, rx130_fail359
    add rx130_pos, 1
    rx130_cur."!cursor_pass"(rx130_pos, 'backtrack'=>1)
    .return (rx130_cur)
  rx130_restart358:
    repr_get_attr_obj rx130_cstack, rx130_cur, rx130_curclass, "$!cstack"
  rx130_fail359:
    unless rx130_bstack, rx130_done357
    pop $I19, rx130_bstack
    if_null rx130_cstack, rx130_cstack_done362
    unless rx130_cstack, rx130_cstack_done362
    dec $I19
    set $P11, rx130_cstack[$I19]
  rx130_cstack_done362:
    pop rx130_rep, rx130_bstack
    pop rx130_pos, rx130_bstack
    pop $I19, rx130_bstack
    lt rx130_pos, -1, rx130_done357
    lt rx130_pos, 0, rx130_fail359
    eq $I19, 0, rx130_fail359
    nqp_islist $I20, rx130_cstack
    unless $I20, rx130_jump360
    elements $I18, rx130_bstack
    le $I18, 0, rx130_cut361
    dec $I18
    set $I18, rx130_bstack[$I18]
  rx130_cut361:
    assign rx130_cstack, $I18
  rx130_jump360:
    jump $I19
  rx130_done357:
    rx130_cur."!cursor_fail"()
    .return (rx130_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_189_1361734134.987") :anon :lex :outer("cuid_23_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 141
    .local pmc fb_tmp_5 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$/"
    set fb_tmp_5, $P5003
    repr_defined $I5001, fb_tmp_5
    unless $I5001 goto if133_else367 
    set $P5004, fb_tmp_5[0]
    set $P5006, $P5004
    goto if133_end368
  if133_else367:
    null $P5005
    set $P5006, $P5005
  if133_end368:
    unless_null $P5006, vivi_134369
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_134369:
    set $S5001, $P5006
    $P5008 = $P5001."throw_unrecognized_metachar"($S5001)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "quantified_atom" :subid("cuid_26_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 144
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_27_1361734134.987' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx135_start
    .local string rx135_tgt
    .local int rx135_pos
    .local int rx135_off
    .local int rx135_eos
    .local int rx135_rep
    .local pmc rx135_cur
    .local pmc rx135_curclass
    .local pmc rx135_bstack
    .local pmc rx135_cstack
    rx135_start = self."!cursor_start_all"()
    set rx135_cur, rx135_start[0]
    set rx135_tgt, rx135_start[1]
    set rx135_pos, rx135_start[2]
    set rx135_curclass, rx135_start[3]
    set rx135_bstack, rx135_start[4]
    set $I19, rx135_start[5]
    store_lex unicode:"$\x{a2}", rx135_cur
    length rx135_eos, rx135_tgt
    eq $I19, 1, rx135_restart372
    gt rx135_pos, rx135_eos, rx135_fail373
    repr_get_attr_int $I11, self, rx135_curclass, "$!from"
    ne $I11, -1, rxscan136_done379
    goto rxscan136_scan378
  rxscan136_loop377:
    inc rx135_pos
    gt rx135_pos, rx135_eos, rx135_fail373
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!from", rx135_pos
  rxscan136_scan378:
    nqp_rxmark rx135_bstack, rxscan136_loop377, rx135_pos, 0
  rxscan136_done379:
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!pos", rx135_pos
    $P11 = rx135_cur."atom"()
    repr_get_attr_int $I11, $P11, rx135_curclass, "$!pos"
    lt $I11, 0, rx135_fail373
    nqp_rxmark rx135_bstack, rxsubrule137_pass380, -1, 0
  rxsubrule137_pass380:
    rx135_cstack = rx135_cur."!cursor_capture"($P11, "atom")
    repr_get_attr_int rx135_pos, $P11, rx135_curclass, "$!pos"
    nqp_rxmark rx135_bstack, rxquantr138_done382, rx135_pos, 0
  rxquantr138_loop381:
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!pos", rx135_pos
    $P11 = rx135_cur."ws"()
    repr_get_attr_int $I11, $P11, rx135_curclass, "$!pos"
    lt $I11, 0, rx135_fail373
    repr_get_attr_int rx135_pos, $P11, rx135_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt140_0385
    nqp_push_label $P11, alt140_1387
    nqp_rxmark rx135_bstack, alt140_end384, -1, 0
    rx135_cur."!alt"(rx135_pos, "alt_nfa__7_1361734135.352", $P11)
    goto rx135_fail373
  alt140_0385:
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!pos", rx135_pos
    $P11 = rx135_cur."quantifier"()
    repr_get_attr_int $I11, $P11, rx135_curclass, "$!pos"
    lt $I11, 0, rx135_fail373
    nqp_rxmark rx135_bstack, rxsubrule141_pass386, -1, 0
  rxsubrule141_pass386:
    rx135_cstack = rx135_cur."!cursor_capture"($P11, "quantifier")
    repr_get_attr_int rx135_pos, $P11, rx135_curclass, "$!pos"
    goto alt140_end384
  alt140_1387:
    .const 'Sub' $P5001 = 'cuid_27_1361734134.987' 
    capture_lex $P5001
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!pos", rx135_pos
    $P11 = rx135_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx135_curclass, "$!pos"
    lt $I11, 0, rx135_fail373
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!pos", rx135_pos
    $P11 = rx135_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx135_curclass, "$!pos"
    lt $I11, 0, rx135_fail373
    nqp_rxmark rx135_bstack, rxsubrule144_pass398, -1, 0
  rxsubrule144_pass398:
    rx135_cstack = rx135_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx135_pos, $P11, rx135_curclass, "$!pos"
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!pos", rx135_pos
    $P11 = rx135_cur."alpha"()
    repr_get_attr_int $I11, $P11, rx135_curclass, "$!pos"
    ge $I11, 0, rx135_fail373
    goto alt140_end384
  alt140_end384:
    nqp_rxcommit rx135_bstack, alt140_end384
    nqp_rxmark rx135_bstack, rxquantr145_done400, rx135_pos, 0
  rxquantr145_loop399:
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!pos", rx135_pos
    $P11 = rx135_cur."ws"()
    repr_get_attr_int $I11, $P11, rx135_curclass, "$!pos"
    lt $I11, 0, rx135_fail373
    repr_get_attr_int rx135_pos, $P11, rx135_curclass, "$!pos"
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!pos", rx135_pos
    $P11 = rx135_cur."separator"()
    repr_get_attr_int $I11, $P11, rx135_curclass, "$!pos"
    lt $I11, 0, rx135_fail373
    nqp_rxmark rx135_bstack, rxsubrule147_pass402, -1, 0
  rxsubrule147_pass402:
    rx135_cstack = rx135_cur."!cursor_capture"($P11, "separator")
    repr_get_attr_int rx135_pos, $P11, rx135_curclass, "$!pos"
    nqp_rxpeek $I19, rx135_bstack, rxquantr145_done400
    inc $I19
    inc $I19
    set rx135_rep, rx135_bstack[$I19]
    nqp_rxcommit rx135_bstack, rxquantr145_done400
    inc rx135_rep
  rxquantr145_done400:
    nqp_rxpeek $I19, rx135_bstack, rxquantr138_done382
    inc $I19
    inc $I19
    set rx135_rep, rx135_bstack[$I19]
    nqp_rxcommit rx135_bstack, rxquantr138_done382
    inc rx135_rep
  rxquantr138_done382:
    rx135_cur."!cursor_pass"(rx135_pos, "quantified_atom", 'backtrack'=>1)
    .return (rx135_cur)
  rx135_restart372:
    repr_get_attr_obj rx135_cstack, rx135_cur, rx135_curclass, "$!cstack"
  rx135_fail373:
    unless rx135_bstack, rx135_done371
    pop $I19, rx135_bstack
    if_null rx135_cstack, rx135_cstack_done376
    unless rx135_cstack, rx135_cstack_done376
    dec $I19
    set $P11, rx135_cstack[$I19]
  rx135_cstack_done376:
    pop rx135_rep, rx135_bstack
    pop rx135_pos, rx135_bstack
    pop $I19, rx135_bstack
    lt rx135_pos, -1, rx135_done371
    lt rx135_pos, 0, rx135_fail373
    eq $I19, 0, rx135_fail373
    nqp_islist $I20, rx135_cstack
    unless $I20, rx135_jump374
    elements $I18, rx135_bstack
    le $I18, 0, rx135_cut375
    dec $I18
    set $I18, rx135_bstack[$I18]
  rx135_cut375:
    assign rx135_cstack, $I18
  rx135_jump374:
    jump $I19
  rx135_done371:
    rx135_cur."!cursor_fail"()
    .return (rx135_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_27_1361734134.987") :anon :lex :outer("cuid_26_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx142_start
    .local string rx142_tgt
    .local int rx142_pos
    .local int rx142_off
    .local int rx142_eos
    .local int rx142_rep
    .local pmc rx142_cur
    .local pmc rx142_curclass
    .local pmc rx142_bstack
    .local pmc rx142_cstack
    rx142_start = self."!cursor_start_all"()
    set rx142_cur, rx142_start[0]
    set rx142_tgt, rx142_start[1]
    set rx142_pos, rx142_start[2]
    set rx142_curclass, rx142_start[3]
    set rx142_bstack, rx142_start[4]
    set $I19, rx142_start[5]
    store_lex unicode:"$\x{a2}", rx142_cur
    length rx142_eos, rx142_tgt
    eq $I19, 1, rx142_restart390
    gt rx142_pos, rx142_eos, rx142_fail391
    repr_get_attr_int $I11, self, rx142_curclass, "$!from"
    ne $I11, -1, rxscan143_done397
    goto rxscan143_scan396
  rxscan143_loop395:
    inc rx142_pos
    gt rx142_pos, rx142_eos, rx142_fail391
    repr_bind_attr_int rx142_cur, rx142_curclass, "$!from", rx142_pos
  rxscan143_scan396:
    nqp_rxmark rx142_bstack, rxscan143_loop395, rx142_pos, 0
  rxscan143_done397:
    add $I11, rx142_pos, 1
    gt $I11, rx142_eos, rx142_fail391
    substr $S10, rx142_tgt, rx142_pos, 1
    ne $S10, ucs4:":", rx142_fail391
    add rx142_pos, 1
    rx142_cur."!cursor_pass"(rx142_pos, 'backtrack'=>1)
    .return (rx142_cur)
  rx142_restart390:
    repr_get_attr_obj rx142_cstack, rx142_cur, rx142_curclass, "$!cstack"
  rx142_fail391:
    unless rx142_bstack, rx142_done389
    pop $I19, rx142_bstack
    if_null rx142_cstack, rx142_cstack_done394
    unless rx142_cstack, rx142_cstack_done394
    dec $I19
    set $P11, rx142_cstack[$I19]
  rx142_cstack_done394:
    pop rx142_rep, rx142_bstack
    pop rx142_pos, rx142_bstack
    pop $I19, rx142_bstack
    lt rx142_pos, -1, rx142_done389
    lt rx142_pos, 0, rx142_fail391
    eq $I19, 0, rx142_fail391
    nqp_islist $I20, rx142_cstack
    unless $I20, rx142_jump392
    elements $I18, rx142_bstack
    le $I18, 0, rx142_cut393
    dec $I18
    set $I18, rx142_bstack[$I18]
  rx142_cut393:
    assign rx142_cstack, $I18
  rx142_jump392:
    jump $I19
  rx142_done389:
    rx142_cur."!cursor_fail"()
    .return (rx142_cur) 
.end
.HLL "nqp"
.namespace []
.sub "separator" :subid("cuid_28_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 152
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx148_start
    .local string rx148_tgt
    .local int rx148_pos
    .local int rx148_off
    .local int rx148_eos
    .local int rx148_rep
    .local pmc rx148_cur
    .local pmc rx148_curclass
    .local pmc rx148_bstack
    .local pmc rx148_cstack
    rx148_start = self."!cursor_start_all"()
    set rx148_cur, rx148_start[0]
    set rx148_tgt, rx148_start[1]
    set rx148_pos, rx148_start[2]
    set rx148_curclass, rx148_start[3]
    set rx148_bstack, rx148_start[4]
    set $I19, rx148_start[5]
    store_lex unicode:"$\x{a2}", rx148_cur
    length rx148_eos, rx148_tgt
    eq $I19, 1, rx148_restart405
    gt rx148_pos, rx148_eos, rx148_fail406
    repr_get_attr_int $I11, self, rx148_curclass, "$!from"
    ne $I11, -1, rxscan149_done412
    goto rxscan149_scan411
  rxscan149_loop410:
    inc rx148_pos
    gt rx148_pos, rx148_eos, rx148_fail406
    repr_bind_attr_int rx148_cur, rx148_curclass, "$!from", rx148_pos
  rxscan149_scan411:
    nqp_rxmark rx148_bstack, rxscan149_loop410, rx148_pos, 0
  rxscan149_done412:
    nqp_rxmark rx148_bstack, rxcap150_fail414, rx148_pos, 0
    add $I11, rx148_pos, 1
    gt $I11, rx148_eos, rx148_fail406
    substr $S10, rx148_tgt, rx148_pos, 1
    ne $S10, ucs4:"%", rx148_fail406
    add rx148_pos, 1
    nqp_rxmark rx148_bstack, rxquantr151_done416, rx148_pos, 0
  rxquantr151_loop415:
    add $I11, rx148_pos, 1
    gt $I11, rx148_eos, rx148_fail406
    substr $S10, rx148_tgt, rx148_pos, 1
    ne $S10, ucs4:"%", rx148_fail406
    add rx148_pos, 1
    nqp_rxpeek $I19, rx148_bstack, rxquantr151_done416
    inc $I19
    inc $I19
    set rx148_rep, rx148_bstack[$I19]
    nqp_rxcommit rx148_bstack, rxquantr151_done416
    inc rx148_rep
  rxquantr151_done416:
    nqp_rxpeek $I19, rx148_bstack, rxcap150_fail414
    inc $I19
    set $I11, rx148_bstack[$I19]
    repr_bind_attr_int rx148_cur, rx148_curclass, "$!pos", rx148_pos
    $P11 = rx148_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx148_pos)
    rx148_cstack = rx148_cur."!cursor_capture"($P11, "septype")
    goto rxcap150_done413
  rxcap150_fail414:
    goto rx148_fail406
  rxcap150_done413:
    nqp_rxmark rx148_bstack, rxquantr152_done418, rx148_pos, 0
  rxquantr152_loop417:
    repr_bind_attr_int rx148_cur, rx148_curclass, "$!pos", rx148_pos
    $P11 = rx148_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx148_curclass, "$!pos"
    lt $I11, 0, rx148_fail406
    goto rxsubrule153_pass419
  rxsubrule153_back420:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx148_curclass, "$!pos"
    lt $I11, 0, rx148_fail406
  rxsubrule153_pass419:
    rx148_cstack = rx148_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule153_back420
    push rx148_bstack, $I11
    push rx148_bstack, 0
    push rx148_bstack, rx148_pos
    elements $I11, rx148_cstack
    push rx148_bstack, $I11
    repr_get_attr_int rx148_pos, $P11, rx148_curclass, "$!pos"
    nqp_rxpeek $I19, rx148_bstack, rxquantr152_done418
    inc $I19
    inc $I19
    set rx148_rep, rx148_bstack[$I19]
    nqp_rxcommit rx148_bstack, rxquantr152_done418
    inc rx148_rep
  rxquantr152_done418:
    repr_bind_attr_int rx148_cur, rx148_curclass, "$!pos", rx148_pos
    $P11 = rx148_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx148_curclass, "$!pos"
    lt $I11, 0, rx148_fail406
    nqp_rxmark rx148_bstack, rxsubrule154_pass421, -1, 0
  rxsubrule154_pass421:
    rx148_cstack = rx148_cur."!cursor_capture"($P11, "quantified_atom")
    repr_get_attr_int rx148_pos, $P11, rx148_curclass, "$!pos"
    rx148_cur."!cursor_pass"(rx148_pos, "separator", 'backtrack'=>1)
    .return (rx148_cur)
  rx148_restart405:
    repr_get_attr_obj rx148_cstack, rx148_cur, rx148_curclass, "$!cstack"
  rx148_fail406:
    unless rx148_bstack, rx148_done404
    pop $I19, rx148_bstack
    if_null rx148_cstack, rx148_cstack_done409
    unless rx148_cstack, rx148_cstack_done409
    dec $I19
    set $P11, rx148_cstack[$I19]
  rx148_cstack_done409:
    pop rx148_rep, rx148_bstack
    pop rx148_pos, rx148_bstack
    pop $I19, rx148_bstack
    lt rx148_pos, -1, rx148_done404
    lt rx148_pos, 0, rx148_fail406
    eq $I19, 0, rx148_fail406
    nqp_islist $I20, rx148_cstack
    unless $I20, rx148_jump407
    elements $I18, rx148_bstack
    le $I18, 0, rx148_cut408
    dec $I18
    set $I18, rx148_bstack[$I18]
  rx148_cut408:
    assign rx148_cstack, $I18
  rx148_jump407:
    jump $I19
  rx148_done404:
    rx148_cur."!cursor_fail"()
    .return (rx148_cur) 
.end
.HLL "nqp"
.namespace []
.sub "atom" :subid("cuid_29_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 156
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_30_1361734134.987' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx155_start
    .local string rx155_tgt
    .local int rx155_pos
    .local int rx155_off
    .local int rx155_eos
    .local int rx155_rep
    .local pmc rx155_cur
    .local pmc rx155_curclass
    .local pmc rx155_bstack
    .local pmc rx155_cstack
    rx155_start = self."!cursor_start_all"()
    set rx155_cur, rx155_start[0]
    set rx155_tgt, rx155_start[1]
    set rx155_pos, rx155_start[2]
    set rx155_curclass, rx155_start[3]
    set rx155_bstack, rx155_start[4]
    set $I19, rx155_start[5]
    store_lex unicode:"$\x{a2}", rx155_cur
    length rx155_eos, rx155_tgt
    eq $I19, 1, rx155_restart424
    gt rx155_pos, rx155_eos, rx155_fail425
    repr_get_attr_int $I11, self, rx155_curclass, "$!from"
    ne $I11, -1, rxscan156_done431
    goto rxscan156_scan430
  rxscan156_loop429:
    inc rx155_pos
    gt rx155_pos, rx155_eos, rx155_fail425
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!from", rx155_pos
  rxscan156_scan430:
    nqp_rxmark rx155_bstack, rxscan156_loop429, rx155_pos, 0
  rxscan156_done431:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt157_0433
    nqp_push_label $P11, alt157_1448
    nqp_rxmark rx155_bstack, alt157_end432, -1, 0
    rx155_cur."!alt"(rx155_pos, "alt_nfa__8_1361734135.372", $P11)
    goto rx155_fail425
  alt157_0433:
    ge rx155_pos, rx155_eos, rx155_fail425
    is_cclass $I11, .CCLASS_WORD, rx155_tgt, rx155_pos
    unless $I11, rx155_fail425
    add rx155_pos, 1
    nqp_rxmark rx155_bstack, rxquantr158_done435, rx155_pos, 0
  rxquantr158_loop434:
  rxquantg159_loop436:
    ge rx155_pos, rx155_eos, rx155_fail425
    is_cclass $I11, .CCLASS_WORD, rx155_tgt, rx155_pos
    unless $I11, rx155_fail425
    add rx155_pos, 1
    nqp_rxmark rx155_bstack, rxquantg159_done437, rx155_pos, rx155_rep
    goto rxquantg159_loop436
  rxquantg159_done437:
    .const 'Sub' $P5001 = 'cuid_30_1361734134.987' 
    capture_lex $P5001
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!pos", rx155_pos
    $P11 = rx155_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx155_curclass, "$!pos"
    lt $I11, 0, rx155_fail425
    nqp_rxpeek $I19, rx155_bstack, rxquantr158_done435
    inc $I19
    inc $I19
    set rx155_rep, rx155_bstack[$I19]
    nqp_rxcommit rx155_bstack, rxquantr158_done435
    inc rx155_rep
  rxquantr158_done435:
    goto alt157_end432
  alt157_1448:
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!pos", rx155_pos
    $P11 = rx155_cur."metachar"()
    repr_get_attr_int $I11, $P11, rx155_curclass, "$!pos"
    lt $I11, 0, rx155_fail425
    nqp_rxmark rx155_bstack, rxsubrule162_pass449, -1, 0
  rxsubrule162_pass449:
    rx155_cstack = rx155_cur."!cursor_capture"($P11, "metachar")
    repr_get_attr_int rx155_pos, $P11, rx155_curclass, "$!pos"
    goto alt157_end432
  alt157_end432:
    nqp_rxcommit rx155_bstack, alt157_end432
    rx155_cur."!cursor_pass"(rx155_pos, "atom", 'backtrack'=>1)
    .return (rx155_cur)
  rx155_restart424:
    repr_get_attr_obj rx155_cstack, rx155_cur, rx155_curclass, "$!cstack"
  rx155_fail425:
    unless rx155_bstack, rx155_done423
    pop $I19, rx155_bstack
    if_null rx155_cstack, rx155_cstack_done428
    unless rx155_cstack, rx155_cstack_done428
    dec $I19
    set $P11, rx155_cstack[$I19]
  rx155_cstack_done428:
    pop rx155_rep, rx155_bstack
    pop rx155_pos, rx155_bstack
    pop $I19, rx155_bstack
    lt rx155_pos, -1, rx155_done423
    lt rx155_pos, 0, rx155_fail425
    eq $I19, 0, rx155_fail425
    nqp_islist $I20, rx155_cstack
    unless $I20, rx155_jump426
    elements $I18, rx155_bstack
    le $I18, 0, rx155_cut427
    dec $I18
    set $I18, rx155_bstack[$I18]
  rx155_cut427:
    assign rx155_cstack, $I18
  rx155_jump426:
    jump $I19
  rx155_done423:
    rx155_cur."!cursor_fail"()
    .return (rx155_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_30_1361734134.987") :anon :lex :outer("cuid_29_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx160_start
    .local string rx160_tgt
    .local int rx160_pos
    .local int rx160_off
    .local int rx160_eos
    .local int rx160_rep
    .local pmc rx160_cur
    .local pmc rx160_curclass
    .local pmc rx160_bstack
    .local pmc rx160_cstack
    rx160_start = self."!cursor_start_all"()
    set rx160_cur, rx160_start[0]
    set rx160_tgt, rx160_start[1]
    set rx160_pos, rx160_start[2]
    set rx160_curclass, rx160_start[3]
    set rx160_bstack, rx160_start[4]
    set $I19, rx160_start[5]
    store_lex unicode:"$\x{a2}", rx160_cur
    length rx160_eos, rx160_tgt
    eq $I19, 1, rx160_restart440
    gt rx160_pos, rx160_eos, rx160_fail441
    repr_get_attr_int $I11, self, rx160_curclass, "$!from"
    ne $I11, -1, rxscan161_done447
    goto rxscan161_scan446
  rxscan161_loop445:
    inc rx160_pos
    gt rx160_pos, rx160_eos, rx160_fail441
    repr_bind_attr_int rx160_cur, rx160_curclass, "$!from", rx160_pos
  rxscan161_scan446:
    nqp_rxmark rx160_bstack, rxscan161_loop445, rx160_pos, 0
  rxscan161_done447:
    ge rx160_pos, rx160_eos, rx160_fail441
    is_cclass $I11, .CCLASS_WORD, rx160_tgt, rx160_pos
    unless $I11, rx160_fail441
    add rx160_pos, 1
    rx160_cur."!cursor_pass"(rx160_pos, 'backtrack'=>1)
    .return (rx160_cur)
  rx160_restart440:
    repr_get_attr_obj rx160_cstack, rx160_cur, rx160_curclass, "$!cstack"
  rx160_fail441:
    unless rx160_bstack, rx160_done439
    pop $I19, rx160_bstack
    if_null rx160_cstack, rx160_cstack_done444
    unless rx160_cstack, rx160_cstack_done444
    dec $I19
    set $P11, rx160_cstack[$I19]
  rx160_cstack_done444:
    pop rx160_rep, rx160_bstack
    pop rx160_pos, rx160_bstack
    pop $I19, rx160_bstack
    lt rx160_pos, -1, rx160_done439
    lt rx160_pos, 0, rx160_fail441
    eq $I19, 0, rx160_fail441
    nqp_islist $I20, rx160_cstack
    unless $I20, rx160_jump442
    elements $I18, rx160_bstack
    le $I18, 0, rx160_cut443
    dec $I18
    set $I18, rx160_bstack[$I18]
  rx160_cut443:
    assign rx160_cstack, $I18
  rx160_jump442:
    jump $I19
  rx160_done439:
    rx160_cur."!cursor_fail"()
    .return (rx160_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier" :subid("cuid_31_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 164
    .param pmc self 
    $P5001 = self."!protoregex"("quantifier")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<*>" :subid("cuid_32_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 165
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx163_start
    .local string rx163_tgt
    .local int rx163_pos
    .local int rx163_off
    .local int rx163_eos
    .local int rx163_rep
    .local pmc rx163_cur
    .local pmc rx163_curclass
    .local pmc rx163_bstack
    .local pmc rx163_cstack
    rx163_start = self."!cursor_start_all"()
    set rx163_cur, rx163_start[0]
    set rx163_tgt, rx163_start[1]
    set rx163_pos, rx163_start[2]
    set rx163_curclass, rx163_start[3]
    set rx163_bstack, rx163_start[4]
    set $I19, rx163_start[5]
    store_lex unicode:"$\x{a2}", rx163_cur
    length rx163_eos, rx163_tgt
    eq $I19, 1, rx163_restart452
    gt rx163_pos, rx163_eos, rx163_fail453
    repr_get_attr_int $I11, self, rx163_curclass, "$!from"
    ne $I11, -1, rxscan164_done459
    goto rxscan164_scan458
  rxscan164_loop457:
    inc rx163_pos
    gt rx163_pos, rx163_eos, rx163_fail453
    repr_bind_attr_int rx163_cur, rx163_curclass, "$!from", rx163_pos
  rxscan164_scan458:
    nqp_rxmark rx163_bstack, rxscan164_loop457, rx163_pos, 0
  rxscan164_done459:
    nqp_rxmark rx163_bstack, rxcap165_fail461, rx163_pos, 0
    add $I11, rx163_pos, 1
    gt $I11, rx163_eos, rx163_fail453
    substr $S10, rx163_tgt, rx163_pos, 1
    ne $S10, ucs4:"*", rx163_fail453
    add rx163_pos, 1
    nqp_rxpeek $I19, rx163_bstack, rxcap165_fail461
    inc $I19
    set $I11, rx163_bstack[$I19]
    repr_bind_attr_int rx163_cur, rx163_curclass, "$!pos", rx163_pos
    $P11 = rx163_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx163_pos)
    rx163_cstack = rx163_cur."!cursor_capture"($P11, "sym")
    goto rxcap165_done460
  rxcap165_fail461:
    goto rx163_fail453
  rxcap165_done460:
    repr_bind_attr_int rx163_cur, rx163_curclass, "$!pos", rx163_pos
    $P11 = rx163_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx163_curclass, "$!pos"
    lt $I11, 0, rx163_fail453
    nqp_rxmark rx163_bstack, rxsubrule166_pass462, -1, 0
  rxsubrule166_pass462:
    rx163_cstack = rx163_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx163_pos, $P11, rx163_curclass, "$!pos"
    rx163_cur."!cursor_pass"(rx163_pos, "quantifier:sym<*>", 'backtrack'=>1)
    .return (rx163_cur)
  rx163_restart452:
    repr_get_attr_obj rx163_cstack, rx163_cur, rx163_curclass, "$!cstack"
  rx163_fail453:
    unless rx163_bstack, rx163_done451
    pop $I19, rx163_bstack
    if_null rx163_cstack, rx163_cstack_done456
    unless rx163_cstack, rx163_cstack_done456
    dec $I19
    set $P11, rx163_cstack[$I19]
  rx163_cstack_done456:
    pop rx163_rep, rx163_bstack
    pop rx163_pos, rx163_bstack
    pop $I19, rx163_bstack
    lt rx163_pos, -1, rx163_done451
    lt rx163_pos, 0, rx163_fail453
    eq $I19, 0, rx163_fail453
    nqp_islist $I20, rx163_cstack
    unless $I20, rx163_jump454
    elements $I18, rx163_bstack
    le $I18, 0, rx163_cut455
    dec $I18
    set $I18, rx163_bstack[$I18]
  rx163_cut455:
    assign rx163_cstack, $I18
  rx163_jump454:
    jump $I19
  rx163_done451:
    rx163_cur."!cursor_fail"()
    .return (rx163_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<+>" :subid("cuid_33_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 166
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx167_start
    .local string rx167_tgt
    .local int rx167_pos
    .local int rx167_off
    .local int rx167_eos
    .local int rx167_rep
    .local pmc rx167_cur
    .local pmc rx167_curclass
    .local pmc rx167_bstack
    .local pmc rx167_cstack
    rx167_start = self."!cursor_start_all"()
    set rx167_cur, rx167_start[0]
    set rx167_tgt, rx167_start[1]
    set rx167_pos, rx167_start[2]
    set rx167_curclass, rx167_start[3]
    set rx167_bstack, rx167_start[4]
    set $I19, rx167_start[5]
    store_lex unicode:"$\x{a2}", rx167_cur
    length rx167_eos, rx167_tgt
    eq $I19, 1, rx167_restart465
    gt rx167_pos, rx167_eos, rx167_fail466
    repr_get_attr_int $I11, self, rx167_curclass, "$!from"
    ne $I11, -1, rxscan168_done472
    goto rxscan168_scan471
  rxscan168_loop470:
    inc rx167_pos
    gt rx167_pos, rx167_eos, rx167_fail466
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!from", rx167_pos
  rxscan168_scan471:
    nqp_rxmark rx167_bstack, rxscan168_loop470, rx167_pos, 0
  rxscan168_done472:
    nqp_rxmark rx167_bstack, rxcap169_fail474, rx167_pos, 0
    add $I11, rx167_pos, 1
    gt $I11, rx167_eos, rx167_fail466
    substr $S10, rx167_tgt, rx167_pos, 1
    ne $S10, ucs4:"+", rx167_fail466
    add rx167_pos, 1
    nqp_rxpeek $I19, rx167_bstack, rxcap169_fail474
    inc $I19
    set $I11, rx167_bstack[$I19]
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx167_pos)
    rx167_cstack = rx167_cur."!cursor_capture"($P11, "sym")
    goto rxcap169_done473
  rxcap169_fail474:
    goto rx167_fail466
  rxcap169_done473:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail466
    nqp_rxmark rx167_bstack, rxsubrule170_pass475, -1, 0
  rxsubrule170_pass475:
    rx167_cstack = rx167_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
    rx167_cur."!cursor_pass"(rx167_pos, "quantifier:sym<+>", 'backtrack'=>1)
    .return (rx167_cur)
  rx167_restart465:
    repr_get_attr_obj rx167_cstack, rx167_cur, rx167_curclass, "$!cstack"
  rx167_fail466:
    unless rx167_bstack, rx167_done464
    pop $I19, rx167_bstack
    if_null rx167_cstack, rx167_cstack_done469
    unless rx167_cstack, rx167_cstack_done469
    dec $I19
    set $P11, rx167_cstack[$I19]
  rx167_cstack_done469:
    pop rx167_rep, rx167_bstack
    pop rx167_pos, rx167_bstack
    pop $I19, rx167_bstack
    lt rx167_pos, -1, rx167_done464
    lt rx167_pos, 0, rx167_fail466
    eq $I19, 0, rx167_fail466
    nqp_islist $I20, rx167_cstack
    unless $I20, rx167_jump467
    elements $I18, rx167_bstack
    le $I18, 0, rx167_cut468
    dec $I18
    set $I18, rx167_bstack[$I18]
  rx167_cut468:
    assign rx167_cstack, $I18
  rx167_jump467:
    jump $I19
  rx167_done464:
    rx167_cur."!cursor_fail"()
    .return (rx167_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<?>" :subid("cuid_34_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 167
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx171_start
    .local string rx171_tgt
    .local int rx171_pos
    .local int rx171_off
    .local int rx171_eos
    .local int rx171_rep
    .local pmc rx171_cur
    .local pmc rx171_curclass
    .local pmc rx171_bstack
    .local pmc rx171_cstack
    rx171_start = self."!cursor_start_all"()
    set rx171_cur, rx171_start[0]
    set rx171_tgt, rx171_start[1]
    set rx171_pos, rx171_start[2]
    set rx171_curclass, rx171_start[3]
    set rx171_bstack, rx171_start[4]
    set $I19, rx171_start[5]
    store_lex unicode:"$\x{a2}", rx171_cur
    length rx171_eos, rx171_tgt
    eq $I19, 1, rx171_restart478
    gt rx171_pos, rx171_eos, rx171_fail479
    repr_get_attr_int $I11, self, rx171_curclass, "$!from"
    ne $I11, -1, rxscan172_done485
    goto rxscan172_scan484
  rxscan172_loop483:
    inc rx171_pos
    gt rx171_pos, rx171_eos, rx171_fail479
    repr_bind_attr_int rx171_cur, rx171_curclass, "$!from", rx171_pos
  rxscan172_scan484:
    nqp_rxmark rx171_bstack, rxscan172_loop483, rx171_pos, 0
  rxscan172_done485:
    nqp_rxmark rx171_bstack, rxcap173_fail487, rx171_pos, 0
    add $I11, rx171_pos, 1
    gt $I11, rx171_eos, rx171_fail479
    substr $S10, rx171_tgt, rx171_pos, 1
    ne $S10, ucs4:"?", rx171_fail479
    add rx171_pos, 1
    nqp_rxpeek $I19, rx171_bstack, rxcap173_fail487
    inc $I19
    set $I11, rx171_bstack[$I19]
    repr_bind_attr_int rx171_cur, rx171_curclass, "$!pos", rx171_pos
    $P11 = rx171_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx171_pos)
    rx171_cstack = rx171_cur."!cursor_capture"($P11, "sym")
    goto rxcap173_done486
  rxcap173_fail487:
    goto rx171_fail479
  rxcap173_done486:
    repr_bind_attr_int rx171_cur, rx171_curclass, "$!pos", rx171_pos
    $P11 = rx171_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx171_curclass, "$!pos"
    lt $I11, 0, rx171_fail479
    nqp_rxmark rx171_bstack, rxsubrule174_pass488, -1, 0
  rxsubrule174_pass488:
    rx171_cstack = rx171_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx171_pos, $P11, rx171_curclass, "$!pos"
    rx171_cur."!cursor_pass"(rx171_pos, "quantifier:sym<?>", 'backtrack'=>1)
    .return (rx171_cur)
  rx171_restart478:
    repr_get_attr_obj rx171_cstack, rx171_cur, rx171_curclass, "$!cstack"
  rx171_fail479:
    unless rx171_bstack, rx171_done477
    pop $I19, rx171_bstack
    if_null rx171_cstack, rx171_cstack_done482
    unless rx171_cstack, rx171_cstack_done482
    dec $I19
    set $P11, rx171_cstack[$I19]
  rx171_cstack_done482:
    pop rx171_rep, rx171_bstack
    pop rx171_pos, rx171_bstack
    pop $I19, rx171_bstack
    lt rx171_pos, -1, rx171_done477
    lt rx171_pos, 0, rx171_fail479
    eq $I19, 0, rx171_fail479
    nqp_islist $I20, rx171_cstack
    unless $I20, rx171_jump480
    elements $I18, rx171_bstack
    le $I18, 0, rx171_cut481
    dec $I18
    set $I18, rx171_bstack[$I18]
  rx171_cut481:
    assign rx171_cstack, $I18
  rx171_jump480:
    jump $I19
  rx171_done477:
    rx171_cur."!cursor_fail"()
    .return (rx171_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<{N,M}>" :subid("cuid_35_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 168
    .param pmc _lex_param_0 
    .const 'Sub' $P5007 = 'cuid_190_1361734134.987' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_36_1361734134.987' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_37_1361734134.987' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_38_1361734134.987' 
    capture_lex $P5007 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx175_start
    .local string rx175_tgt
    .local int rx175_pos
    .local int rx175_off
    .local int rx175_eos
    .local int rx175_rep
    .local pmc rx175_cur
    .local pmc rx175_curclass
    .local pmc rx175_bstack
    .local pmc rx175_cstack
    rx175_start = self."!cursor_start_all"()
    set rx175_cur, rx175_start[0]
    set rx175_tgt, rx175_start[1]
    set rx175_pos, rx175_start[2]
    set rx175_curclass, rx175_start[3]
    set rx175_bstack, rx175_start[4]
    set $I19, rx175_start[5]
    store_lex unicode:"$\x{a2}", rx175_cur
    length rx175_eos, rx175_tgt
    eq $I19, 1, rx175_restart491
    gt rx175_pos, rx175_eos, rx175_fail492
    repr_get_attr_int $I11, self, rx175_curclass, "$!from"
    ne $I11, -1, rxscan176_done498
    goto rxscan176_scan497
  rxscan176_loop496:
    inc rx175_pos
    gt rx175_pos, rx175_eos, rx175_fail492
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!from", rx175_pos
  rxscan176_scan497:
    nqp_rxmark rx175_bstack, rxscan176_loop496, rx175_pos, 0
  rxscan176_done498:
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!pos", rx175_pos
    store_lex unicode:"$\x{a2}", rx175_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_190_1361734134.987' 
    capture_lex $P5002
    $P5003 = $P5002()
    add $I11, rx175_pos, 1
    gt $I11, rx175_eos, rx175_fail492
    substr $S10, rx175_tgt, rx175_pos, 1
    ne $S10, ucs4:"{", rx175_fail492
    add rx175_pos, 1
    .const 'Sub' $P5004 = 'cuid_36_1361734134.987' 
    capture_lex $P5004
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!pos", rx175_pos
    $P11 = rx175_cur.$P5004()
    repr_get_attr_int $I11, $P11, rx175_curclass, "$!pos"
    lt $I11, 0, rx175_fail492
    nqp_rxmark rx175_bstack, rxsubrule180_pass511, -1, 0
  rxsubrule180_pass511:
    rx175_cstack = rx175_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx175_pos, $P11, rx175_curclass, "$!pos"
    .const 'Sub' $P5005 = 'cuid_37_1361734134.987' 
    capture_lex $P5005
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!pos", rx175_pos
    $P11 = rx175_cur.$P5005()
    repr_get_attr_int $I11, $P11, rx175_curclass, "$!pos"
    lt $I11, 0, rx175_fail492
    nqp_rxmark rx175_bstack, rxsubrule184_pass524, -1, 0
  rxsubrule184_pass524:
    rx175_cstack = rx175_cur."!cursor_capture"($P11, "1")
    repr_get_attr_int rx175_pos, $P11, rx175_curclass, "$!pos"
    .const 'Sub' $P5006 = 'cuid_38_1361734134.987' 
    capture_lex $P5006
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!pos", rx175_pos
    $P11 = rx175_cur.$P5006()
    repr_get_attr_int $I11, $P11, rx175_curclass, "$!pos"
    lt $I11, 0, rx175_fail492
    nqp_rxmark rx175_bstack, rxsubrule188_pass537, -1, 0
  rxsubrule188_pass537:
    rx175_cstack = rx175_cur."!cursor_capture"($P11, "2")
    repr_get_attr_int rx175_pos, $P11, rx175_curclass, "$!pos"
    add $I11, rx175_pos, 1
    gt $I11, rx175_eos, rx175_fail492
    substr $S10, rx175_tgt, rx175_pos, 1
    ne $S10, ucs4:"}", rx175_fail492
    add rx175_pos, 1
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!pos", rx175_pos
    $P11 = rx175_cur."obs"("{N,M} as general quantifier", "** N..M (or ** N..*)")
    repr_get_attr_int $I11, $P11, rx175_curclass, "$!pos"
    lt $I11, 0, rx175_fail492
    repr_get_attr_int rx175_pos, $P11, rx175_curclass, "$!pos"
    rx175_cur."!cursor_pass"(rx175_pos, "quantifier:sym<{N,M}>", 'backtrack'=>1)
    .return (rx175_cur)
  rx175_restart491:
    repr_get_attr_obj rx175_cstack, rx175_cur, rx175_curclass, "$!cstack"
  rx175_fail492:
    unless rx175_bstack, rx175_done490
    pop $I19, rx175_bstack
    if_null rx175_cstack, rx175_cstack_done495
    unless rx175_cstack, rx175_cstack_done495
    dec $I19
    set $P11, rx175_cstack[$I19]
  rx175_cstack_done495:
    pop rx175_rep, rx175_bstack
    pop rx175_pos, rx175_bstack
    pop $I19, rx175_bstack
    lt rx175_pos, -1, rx175_done490
    lt rx175_pos, 0, rx175_fail492
    eq $I19, 0, rx175_fail492
    nqp_islist $I20, rx175_cstack
    unless $I20, rx175_jump493
    elements $I18, rx175_bstack
    le $I18, 0, rx175_cut494
    dec $I18
    set $I18, rx175_bstack[$I18]
  rx175_cut494:
    assign rx175_cstack, $I18
  rx175_jump493:
    jump $I19
  rx175_done490:
    rx175_cur."!cursor_fail"()
    .return (rx175_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_190_1361734134.987") :anon :lex :outer("cuid_35_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 168

    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_36_1361734134.987") :anon :lex :outer("cuid_35_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx177_start
    .local string rx177_tgt
    .local int rx177_pos
    .local int rx177_off
    .local int rx177_eos
    .local int rx177_rep
    .local pmc rx177_cur
    .local pmc rx177_curclass
    .local pmc rx177_bstack
    .local pmc rx177_cstack
    rx177_start = self."!cursor_start_all"()
    set rx177_cur, rx177_start[0]
    set rx177_tgt, rx177_start[1]
    set rx177_pos, rx177_start[2]
    set rx177_curclass, rx177_start[3]
    set rx177_bstack, rx177_start[4]
    set $I19, rx177_start[5]
    store_lex unicode:"$\x{a2}", rx177_cur
    length rx177_eos, rx177_tgt
    eq $I19, 1, rx177_restart501
    gt rx177_pos, rx177_eos, rx177_fail502
    repr_get_attr_int $I11, self, rx177_curclass, "$!from"
    ne $I11, -1, rxscan178_done508
    goto rxscan178_scan507
  rxscan178_loop506:
    inc rx177_pos
    gt rx177_pos, rx177_eos, rx177_fail502
    repr_bind_attr_int rx177_cur, rx177_curclass, "$!from", rx177_pos
  rxscan178_scan507:
    nqp_rxmark rx177_bstack, rxscan178_loop506, rx177_pos, 0
  rxscan178_done508:
    nqp_rxmark rx177_bstack, rxquantr179_done510, -1, 0
  rxquantr179_loop509:
    ge rx177_pos, rx177_eos, rx177_fail502
    is_cclass $I11, .CCLASS_NUMERIC, rx177_tgt, rx177_pos
    unless $I11, rx177_fail502
    add rx177_pos, 1
    nqp_rxpeek $I19, rx177_bstack, rxquantr179_done510
    inc $I19
    inc $I19
    set rx177_rep, rx177_bstack[$I19]
    nqp_rxcommit rx177_bstack, rxquantr179_done510
    inc rx177_rep
    nqp_rxmark rx177_bstack, rxquantr179_done510, rx177_pos, rx177_rep
    goto rxquantr179_loop509
  rxquantr179_done510:
    rx177_cur."!cursor_pass"(rx177_pos, 'backtrack'=>1)
    .return (rx177_cur)
  rx177_restart501:
    repr_get_attr_obj rx177_cstack, rx177_cur, rx177_curclass, "$!cstack"
  rx177_fail502:
    unless rx177_bstack, rx177_done500
    pop $I19, rx177_bstack
    if_null rx177_cstack, rx177_cstack_done505
    unless rx177_cstack, rx177_cstack_done505
    dec $I19
    set $P11, rx177_cstack[$I19]
  rx177_cstack_done505:
    pop rx177_rep, rx177_bstack
    pop rx177_pos, rx177_bstack
    pop $I19, rx177_bstack
    lt rx177_pos, -1, rx177_done500
    lt rx177_pos, 0, rx177_fail502
    eq $I19, 0, rx177_fail502
    nqp_islist $I20, rx177_cstack
    unless $I20, rx177_jump503
    elements $I18, rx177_bstack
    le $I18, 0, rx177_cut504
    dec $I18
    set $I18, rx177_bstack[$I18]
  rx177_cut504:
    assign rx177_cstack, $I18
  rx177_jump503:
    jump $I19
  rx177_done500:
    rx177_cur."!cursor_fail"()
    .return (rx177_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_37_1361734134.987") :anon :lex :outer("cuid_35_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx181_start
    .local string rx181_tgt
    .local int rx181_pos
    .local int rx181_off
    .local int rx181_eos
    .local int rx181_rep
    .local pmc rx181_cur
    .local pmc rx181_curclass
    .local pmc rx181_bstack
    .local pmc rx181_cstack
    rx181_start = self."!cursor_start_all"()
    set rx181_cur, rx181_start[0]
    set rx181_tgt, rx181_start[1]
    set rx181_pos, rx181_start[2]
    set rx181_curclass, rx181_start[3]
    set rx181_bstack, rx181_start[4]
    set $I19, rx181_start[5]
    store_lex unicode:"$\x{a2}", rx181_cur
    length rx181_eos, rx181_tgt
    eq $I19, 1, rx181_restart514
    gt rx181_pos, rx181_eos, rx181_fail515
    repr_get_attr_int $I11, self, rx181_curclass, "$!from"
    ne $I11, -1, rxscan182_done521
    goto rxscan182_scan520
  rxscan182_loop519:
    inc rx181_pos
    gt rx181_pos, rx181_eos, rx181_fail515
    repr_bind_attr_int rx181_cur, rx181_curclass, "$!from", rx181_pos
  rxscan182_scan520:
    nqp_rxmark rx181_bstack, rxscan182_loop519, rx181_pos, 0
  rxscan182_done521:
    nqp_rxmark rx181_bstack, rxquantr183_done523, rx181_pos, 0
  rxquantr183_loop522:
    add $I11, rx181_pos, 1
    gt $I11, rx181_eos, rx181_fail515
    substr $S10, rx181_tgt, rx181_pos, 1
    ne $S10, ucs4:",", rx181_fail515
    add rx181_pos, 1
    nqp_rxpeek $I19, rx181_bstack, rxquantr183_done523
    inc $I19
    inc $I19
    set rx181_rep, rx181_bstack[$I19]
    nqp_rxcommit rx181_bstack, rxquantr183_done523
    inc rx181_rep
  rxquantr183_done523:
    rx181_cur."!cursor_pass"(rx181_pos, 'backtrack'=>1)
    .return (rx181_cur)
  rx181_restart514:
    repr_get_attr_obj rx181_cstack, rx181_cur, rx181_curclass, "$!cstack"
  rx181_fail515:
    unless rx181_bstack, rx181_done513
    pop $I19, rx181_bstack
    if_null rx181_cstack, rx181_cstack_done518
    unless rx181_cstack, rx181_cstack_done518
    dec $I19
    set $P11, rx181_cstack[$I19]
  rx181_cstack_done518:
    pop rx181_rep, rx181_bstack
    pop rx181_pos, rx181_bstack
    pop $I19, rx181_bstack
    lt rx181_pos, -1, rx181_done513
    lt rx181_pos, 0, rx181_fail515
    eq $I19, 0, rx181_fail515
    nqp_islist $I20, rx181_cstack
    unless $I20, rx181_jump516
    elements $I18, rx181_bstack
    le $I18, 0, rx181_cut517
    dec $I18
    set $I18, rx181_bstack[$I18]
  rx181_cut517:
    assign rx181_cstack, $I18
  rx181_jump516:
    jump $I19
  rx181_done513:
    rx181_cur."!cursor_fail"()
    .return (rx181_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_38_1361734134.987") :anon :lex :outer("cuid_35_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx185_start
    .local string rx185_tgt
    .local int rx185_pos
    .local int rx185_off
    .local int rx185_eos
    .local int rx185_rep
    .local pmc rx185_cur
    .local pmc rx185_curclass
    .local pmc rx185_bstack
    .local pmc rx185_cstack
    rx185_start = self."!cursor_start_all"()
    set rx185_cur, rx185_start[0]
    set rx185_tgt, rx185_start[1]
    set rx185_pos, rx185_start[2]
    set rx185_curclass, rx185_start[3]
    set rx185_bstack, rx185_start[4]
    set $I19, rx185_start[5]
    store_lex unicode:"$\x{a2}", rx185_cur
    length rx185_eos, rx185_tgt
    eq $I19, 1, rx185_restart527
    gt rx185_pos, rx185_eos, rx185_fail528
    repr_get_attr_int $I11, self, rx185_curclass, "$!from"
    ne $I11, -1, rxscan186_done534
    goto rxscan186_scan533
  rxscan186_loop532:
    inc rx185_pos
    gt rx185_pos, rx185_eos, rx185_fail528
    repr_bind_attr_int rx185_cur, rx185_curclass, "$!from", rx185_pos
  rxscan186_scan533:
    nqp_rxmark rx185_bstack, rxscan186_loop532, rx185_pos, 0
  rxscan186_done534:
    nqp_rxmark rx185_bstack, rxquantr187_done536, rx185_pos, 0
  rxquantr187_loop535:
    ge rx185_pos, rx185_eos, rx185_fail528
    is_cclass $I11, .CCLASS_NUMERIC, rx185_tgt, rx185_pos
    unless $I11, rx185_fail528
    add rx185_pos, 1
    nqp_rxpeek $I19, rx185_bstack, rxquantr187_done536
    inc $I19
    inc $I19
    set rx185_rep, rx185_bstack[$I19]
    nqp_rxcommit rx185_bstack, rxquantr187_done536
    inc rx185_rep
    nqp_rxmark rx185_bstack, rxquantr187_done536, rx185_pos, rx185_rep
    goto rxquantr187_loop535
  rxquantr187_done536:
    rx185_cur."!cursor_pass"(rx185_pos, 'backtrack'=>1)
    .return (rx185_cur)
  rx185_restart527:
    repr_get_attr_obj rx185_cstack, rx185_cur, rx185_curclass, "$!cstack"
  rx185_fail528:
    unless rx185_bstack, rx185_done526
    pop $I19, rx185_bstack
    if_null rx185_cstack, rx185_cstack_done531
    unless rx185_cstack, rx185_cstack_done531
    dec $I19
    set $P11, rx185_cstack[$I19]
  rx185_cstack_done531:
    pop rx185_rep, rx185_bstack
    pop rx185_pos, rx185_bstack
    pop $I19, rx185_bstack
    lt rx185_pos, -1, rx185_done526
    lt rx185_pos, 0, rx185_fail528
    eq $I19, 0, rx185_fail528
    nqp_islist $I20, rx185_cstack
    unless $I20, rx185_jump529
    elements $I18, rx185_bstack
    le $I18, 0, rx185_cut530
    dec $I18
    set $I18, rx185_bstack[$I18]
  rx185_cut530:
    assign rx185_cstack, $I18
  rx185_jump529:
    jump $I19
  rx185_done526:
    rx185_cur."!cursor_fail"()
    .return (rx185_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<**>" :subid("cuid_39_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 171
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx190_start
    .local string rx190_tgt
    .local int rx190_pos
    .local int rx190_off
    .local int rx190_eos
    .local int rx190_rep
    .local pmc rx190_cur
    .local pmc rx190_curclass
    .local pmc rx190_bstack
    .local pmc rx190_cstack
    rx190_start = self."!cursor_start_all"()
    set rx190_cur, rx190_start[0]
    set rx190_tgt, rx190_start[1]
    set rx190_pos, rx190_start[2]
    set rx190_curclass, rx190_start[3]
    set rx190_bstack, rx190_start[4]
    set $I19, rx190_start[5]
    store_lex unicode:"$\x{a2}", rx190_cur
    length rx190_eos, rx190_tgt
    eq $I19, 1, rx190_restart541
    gt rx190_pos, rx190_eos, rx190_fail542
    repr_get_attr_int $I11, self, rx190_curclass, "$!from"
    ne $I11, -1, rxscan191_done548
    goto rxscan191_scan547
  rxscan191_loop546:
    inc rx190_pos
    gt rx190_pos, rx190_eos, rx190_fail542
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!from", rx190_pos
  rxscan191_scan547:
    nqp_rxmark rx190_bstack, rxscan191_loop546, rx190_pos, 0
  rxscan191_done548:
    nqp_rxmark rx190_bstack, rxcap192_fail550, rx190_pos, 0
    add $I11, rx190_pos, 2
    gt $I11, rx190_eos, rx190_fail542
    substr $S10, rx190_tgt, rx190_pos, 2
    ne $S10, ucs4:"**", rx190_fail542
    add rx190_pos, 2
    nqp_rxpeek $I19, rx190_bstack, rxcap192_fail550
    inc $I19
    set $I11, rx190_bstack[$I19]
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx190_pos)
    rx190_cstack = rx190_cur."!cursor_capture"($P11, "sym")
    goto rxcap192_done549
  rxcap192_fail550:
    goto rx190_fail542
  rxcap192_done549:
    nqp_rxmark rx190_bstack, rxquantr193_done552, rx190_pos, 0
  rxquantr193_loop551:
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx190_curclass, "$!pos"
    lt $I11, 0, rx190_fail542
    goto rxsubrule194_pass553
  rxsubrule194_back554:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx190_curclass, "$!pos"
    lt $I11, 0, rx190_fail542
  rxsubrule194_pass553:
    rx190_cstack = rx190_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule194_back554
    push rx190_bstack, $I11
    push rx190_bstack, 0
    push rx190_bstack, rx190_pos
    elements $I11, rx190_cstack
    push rx190_bstack, $I11
    repr_get_attr_int rx190_pos, $P11, rx190_curclass, "$!pos"
    nqp_rxpeek $I19, rx190_bstack, rxquantr193_done552
    inc $I19
    inc $I19
    set rx190_rep, rx190_bstack[$I19]
    nqp_rxcommit rx190_bstack, rxquantr193_done552
    inc rx190_rep
  rxquantr193_done552:
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx190_curclass, "$!pos"
    lt $I11, 0, rx190_fail542
    nqp_rxmark rx190_bstack, rxsubrule195_pass555, -1, 0
  rxsubrule195_pass555:
    rx190_cstack = rx190_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx190_pos, $P11, rx190_curclass, "$!pos"
    nqp_rxmark rx190_bstack, rxquantr196_done557, rx190_pos, 0
  rxquantr196_loop556:
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx190_curclass, "$!pos"
    lt $I11, 0, rx190_fail542
    goto rxsubrule197_pass558
  rxsubrule197_back559:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx190_curclass, "$!pos"
    lt $I11, 0, rx190_fail542
  rxsubrule197_pass558:
    rx190_cstack = rx190_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule197_back559
    push rx190_bstack, $I11
    push rx190_bstack, 0
    push rx190_bstack, rx190_pos
    elements $I11, rx190_cstack
    push rx190_bstack, $I11
    repr_get_attr_int rx190_pos, $P11, rx190_curclass, "$!pos"
    nqp_rxpeek $I19, rx190_bstack, rxquantr196_done557
    inc $I19
    inc $I19
    set rx190_rep, rx190_bstack[$I19]
    nqp_rxcommit rx190_bstack, rxquantr196_done557
    inc rx190_rep
  rxquantr196_done557:
    nqp_rxmark rx190_bstack, rxcap198_fail561, rx190_pos, 0
    nqp_rxmark rx190_bstack, rxquantr199_done563, -1, 0
  rxquantr199_loop562:
    ge rx190_pos, rx190_eos, rx190_fail542
    is_cclass $I11, .CCLASS_NUMERIC, rx190_tgt, rx190_pos
    unless $I11, rx190_fail542
    add rx190_pos, 1
    nqp_rxpeek $I19, rx190_bstack, rxquantr199_done563
    inc $I19
    inc $I19
    set rx190_rep, rx190_bstack[$I19]
    nqp_rxcommit rx190_bstack, rxquantr199_done563
    inc rx190_rep
    nqp_rxmark rx190_bstack, rxquantr199_done563, rx190_pos, rx190_rep
    goto rxquantr199_loop562
  rxquantr199_done563:
    nqp_rxpeek $I19, rx190_bstack, rxcap198_fail561
    inc $I19
    set $I11, rx190_bstack[$I19]
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx190_pos)
    rx190_cstack = rx190_cur."!cursor_capture"($P11, "min")
    goto rxcap198_done560
  rxcap198_fail561:
    goto rx190_fail542
  rxcap198_done560:
    nqp_rxmark rx190_bstack, rxquantr200_done565, rx190_pos, 0
  rxquantr200_loop564:
    add $I11, rx190_pos, 2
    gt $I11, rx190_eos, rx190_fail542
    substr $S10, rx190_tgt, rx190_pos, 2
    ne $S10, ucs4:"..", rx190_fail542
    add rx190_pos, 2
    nqp_rxmark rx190_bstack, rxcap201_fail567, rx190_pos, 0
  alt202_0569:
    nqp_rxmark rx190_bstack, alt202_1572, rx190_pos, 0
    nqp_rxmark rx190_bstack, rxquantr203_done571, -1, 0
  rxquantr203_loop570:
    ge rx190_pos, rx190_eos, rx190_fail542
    is_cclass $I11, .CCLASS_NUMERIC, rx190_tgt, rx190_pos
    unless $I11, rx190_fail542
    add rx190_pos, 1
    nqp_rxpeek $I19, rx190_bstack, rxquantr203_done571
    inc $I19
    inc $I19
    set rx190_rep, rx190_bstack[$I19]
    nqp_rxcommit rx190_bstack, rxquantr203_done571
    inc rx190_rep
    nqp_rxmark rx190_bstack, rxquantr203_done571, rx190_pos, rx190_rep
    goto rxquantr203_loop570
  rxquantr203_done571:
    goto alt202_end568
  alt202_1572:
    nqp_rxmark rx190_bstack, alt202_2573, rx190_pos, 0
    add $I11, rx190_pos, 1
    gt $I11, rx190_eos, rx190_fail542
    substr $S10, rx190_tgt, rx190_pos, 1
    ne $S10, ucs4:"*", rx190_fail542
    add rx190_pos, 1
    goto alt202_end568
  alt202_2573:
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."panic"("Only integers or '*' allowed as range quantifier endpoint")
    repr_get_attr_int $I11, $P11, rx190_curclass, "$!pos"
    lt $I11, 0, rx190_fail542
    repr_get_attr_int rx190_pos, $P11, rx190_curclass, "$!pos"
  alt202_end568:
    nqp_rxpeek $I19, rx190_bstack, rxcap201_fail567
    inc $I19
    set $I11, rx190_bstack[$I19]
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx190_pos)
    rx190_cstack = rx190_cur."!cursor_capture"($P11, "max")
    goto rxcap201_done566
  rxcap201_fail567:
    goto rx190_fail542
  rxcap201_done566:
    nqp_rxpeek $I19, rx190_bstack, rxquantr200_done565
    inc $I19
    inc $I19
    set rx190_rep, rx190_bstack[$I19]
    nqp_rxcommit rx190_bstack, rxquantr200_done565
    inc rx190_rep
  rxquantr200_done565:
    rx190_cur."!cursor_pass"(rx190_pos, "quantifier:sym<**>", 'backtrack'=>1)
    .return (rx190_cur)
  rx190_restart541:
    repr_get_attr_obj rx190_cstack, rx190_cur, rx190_curclass, "$!cstack"
  rx190_fail542:
    unless rx190_bstack, rx190_done540
    pop $I19, rx190_bstack
    if_null rx190_cstack, rx190_cstack_done545
    unless rx190_cstack, rx190_cstack_done545
    dec $I19
    set $P11, rx190_cstack[$I19]
  rx190_cstack_done545:
    pop rx190_rep, rx190_bstack
    pop rx190_pos, rx190_bstack
    pop $I19, rx190_bstack
    lt rx190_pos, -1, rx190_done540
    lt rx190_pos, 0, rx190_fail542
    eq $I19, 0, rx190_fail542
    nqp_islist $I20, rx190_cstack
    unless $I20, rx190_jump543
    elements $I18, rx190_bstack
    le $I18, 0, rx190_cut544
    dec $I18
    set $I18, rx190_bstack[$I18]
  rx190_cut544:
    assign rx190_cstack, $I18
  rx190_jump543:
    jump $I19
  rx190_done540:
    rx190_cur."!cursor_fail"()
    .return (rx190_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backmod" :subid("cuid_40_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 185
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_41_1361734134.987' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx205_start
    .local string rx205_tgt
    .local int rx205_pos
    .local int rx205_off
    .local int rx205_eos
    .local int rx205_rep
    .local pmc rx205_cur
    .local pmc rx205_curclass
    .local pmc rx205_bstack
    .local pmc rx205_cstack
    rx205_start = self."!cursor_start_all"()
    set rx205_cur, rx205_start[0]
    set rx205_tgt, rx205_start[1]
    set rx205_pos, rx205_start[2]
    set rx205_curclass, rx205_start[3]
    set rx205_bstack, rx205_start[4]
    set $I19, rx205_start[5]
    store_lex unicode:"$\x{a2}", rx205_cur
    length rx205_eos, rx205_tgt
    eq $I19, 1, rx205_restart577
    gt rx205_pos, rx205_eos, rx205_fail578
    repr_get_attr_int $I11, self, rx205_curclass, "$!from"
    ne $I11, -1, rxscan206_done584
    goto rxscan206_scan583
  rxscan206_loop582:
    inc rx205_pos
    gt rx205_pos, rx205_eos, rx205_fail578
    repr_bind_attr_int rx205_cur, rx205_curclass, "$!from", rx205_pos
  rxscan206_scan583:
    nqp_rxmark rx205_bstack, rxscan206_loop582, rx205_pos, 0
  rxscan206_done584:
    nqp_rxmark rx205_bstack, rxquantr207_done586, rx205_pos, 0
  rxquantr207_loop585:
    add $I11, rx205_pos, 1
    gt $I11, rx205_eos, rx205_fail578
    substr $S10, rx205_tgt, rx205_pos, 1
    ne $S10, ucs4:":", rx205_fail578
    add rx205_pos, 1
    nqp_rxpeek $I19, rx205_bstack, rxquantr207_done586
    inc $I19
    inc $I19
    set rx205_rep, rx205_bstack[$I19]
    nqp_rxcommit rx205_bstack, rxquantr207_done586
    inc rx205_rep
  rxquantr207_done586:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt208_0588
    nqp_push_label $P11, alt208_1589
    nqp_push_label $P11, alt208_2590
    nqp_rxmark rx205_bstack, alt208_end587, -1, 0
    rx205_cur."!alt"(rx205_pos, "alt_nfa__9_1361734135.443", $P11)
    goto rx205_fail578
  alt208_0588:
    add $I11, rx205_pos, 1
    gt $I11, rx205_eos, rx205_fail578
    substr $S10, rx205_tgt, rx205_pos, 1
    ne $S10, ucs4:"?", rx205_fail578
    add rx205_pos, 1
    goto alt208_end587
  alt208_1589:
    add $I11, rx205_pos, 1
    gt $I11, rx205_eos, rx205_fail578
    substr $S10, rx205_tgt, rx205_pos, 1
    ne $S10, ucs4:"!", rx205_fail578
    add rx205_pos, 1
    goto alt208_end587
  alt208_2590:
    .const 'Sub' $P5001 = 'cuid_41_1361734134.987' 
    capture_lex $P5001
    repr_bind_attr_int rx205_cur, rx205_curclass, "$!pos", rx205_pos
    $P11 = rx205_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx205_curclass, "$!pos"
    ge $I11, 0, rx205_fail578
    goto alt208_end587
  alt208_end587:
    nqp_rxcommit rx205_bstack, alt208_end587
    rx205_cur."!cursor_pass"(rx205_pos, "backmod", 'backtrack'=>1)
    .return (rx205_cur)
  rx205_restart577:
    repr_get_attr_obj rx205_cstack, rx205_cur, rx205_curclass, "$!cstack"
  rx205_fail578:
    unless rx205_bstack, rx205_done576
    pop $I19, rx205_bstack
    if_null rx205_cstack, rx205_cstack_done581
    unless rx205_cstack, rx205_cstack_done581
    dec $I19
    set $P11, rx205_cstack[$I19]
  rx205_cstack_done581:
    pop rx205_rep, rx205_bstack
    pop rx205_pos, rx205_bstack
    pop $I19, rx205_bstack
    lt rx205_pos, -1, rx205_done576
    lt rx205_pos, 0, rx205_fail578
    eq $I19, 0, rx205_fail578
    nqp_islist $I20, rx205_cstack
    unless $I20, rx205_jump579
    elements $I18, rx205_bstack
    le $I18, 0, rx205_cut580
    dec $I18
    set $I18, rx205_bstack[$I18]
  rx205_cut580:
    assign rx205_cstack, $I18
  rx205_jump579:
    jump $I19
  rx205_done576:
    rx205_cur."!cursor_fail"()
    .return (rx205_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_41_1361734134.987") :anon :lex :outer("cuid_40_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx209_start
    .local string rx209_tgt
    .local int rx209_pos
    .local int rx209_off
    .local int rx209_eos
    .local int rx209_rep
    .local pmc rx209_cur
    .local pmc rx209_curclass
    .local pmc rx209_bstack
    .local pmc rx209_cstack
    rx209_start = self."!cursor_start_all"()
    set rx209_cur, rx209_start[0]
    set rx209_tgt, rx209_start[1]
    set rx209_pos, rx209_start[2]
    set rx209_curclass, rx209_start[3]
    set rx209_bstack, rx209_start[4]
    set $I19, rx209_start[5]
    store_lex unicode:"$\x{a2}", rx209_cur
    length rx209_eos, rx209_tgt
    eq $I19, 1, rx209_restart593
    gt rx209_pos, rx209_eos, rx209_fail594
    repr_get_attr_int $I11, self, rx209_curclass, "$!from"
    ne $I11, -1, rxscan210_done600
    goto rxscan210_scan599
  rxscan210_loop598:
    inc rx209_pos
    gt rx209_pos, rx209_eos, rx209_fail594
    repr_bind_attr_int rx209_cur, rx209_curclass, "$!from", rx209_pos
  rxscan210_scan599:
    nqp_rxmark rx209_bstack, rxscan210_loop598, rx209_pos, 0
  rxscan210_done600:
    add $I11, rx209_pos, 1
    gt $I11, rx209_eos, rx209_fail594
    substr $S10, rx209_tgt, rx209_pos, 1
    ne $S10, ucs4:":", rx209_fail594
    add rx209_pos, 1
    rx209_cur."!cursor_pass"(rx209_pos, 'backtrack'=>1)
    .return (rx209_cur)
  rx209_restart593:
    repr_get_attr_obj rx209_cstack, rx209_cur, rx209_curclass, "$!cstack"
  rx209_fail594:
    unless rx209_bstack, rx209_done592
    pop $I19, rx209_bstack
    if_null rx209_cstack, rx209_cstack_done597
    unless rx209_cstack, rx209_cstack_done597
    dec $I19
    set $P11, rx209_cstack[$I19]
  rx209_cstack_done597:
    pop rx209_rep, rx209_bstack
    pop rx209_pos, rx209_bstack
    pop $I19, rx209_bstack
    lt rx209_pos, -1, rx209_done592
    lt rx209_pos, 0, rx209_fail594
    eq $I19, 0, rx209_fail594
    nqp_islist $I20, rx209_cstack
    unless $I20, rx209_jump595
    elements $I18, rx209_bstack
    le $I18, 0, rx209_cut596
    dec $I18
    set $I18, rx209_bstack[$I18]
  rx209_cut596:
    assign rx209_cstack, $I18
  rx209_jump595:
    jump $I19
  rx209_done592:
    rx209_cur."!cursor_fail"()
    .return (rx209_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar" :subid("cuid_42_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 187
    .param pmc self 
    $P5001 = self."!protoregex"("metachar")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<ws>" :subid("cuid_43_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 188
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx211_start
    .local string rx211_tgt
    .local int rx211_pos
    .local int rx211_off
    .local int rx211_eos
    .local int rx211_rep
    .local pmc rx211_cur
    .local pmc rx211_curclass
    .local pmc rx211_bstack
    .local pmc rx211_cstack
    rx211_start = self."!cursor_start_all"()
    set rx211_cur, rx211_start[0]
    set rx211_tgt, rx211_start[1]
    set rx211_pos, rx211_start[2]
    set rx211_curclass, rx211_start[3]
    set rx211_bstack, rx211_start[4]
    set $I19, rx211_start[5]
    store_lex unicode:"$\x{a2}", rx211_cur
    length rx211_eos, rx211_tgt
    eq $I19, 1, rx211_restart603
    gt rx211_pos, rx211_eos, rx211_fail604
    repr_get_attr_int $I11, self, rx211_curclass, "$!from"
    ne $I11, -1, rxscan212_done610
    goto rxscan212_scan609
  rxscan212_loop608:
    inc rx211_pos
    gt rx211_pos, rx211_eos, rx211_fail604
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!from", rx211_pos
  rxscan212_scan609:
    nqp_rxmark rx211_bstack, rxscan212_loop608, rx211_pos, 0
  rxscan212_done610:
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail604
    repr_get_attr_int rx211_pos, $P11, rx211_curclass, "$!pos"
    rx211_cur."!cursor_pass"(rx211_pos, "metachar:sym<ws>", 'backtrack'=>1)
    .return (rx211_cur)
  rx211_restart603:
    repr_get_attr_obj rx211_cstack, rx211_cur, rx211_curclass, "$!cstack"
  rx211_fail604:
    unless rx211_bstack, rx211_done602
    pop $I19, rx211_bstack
    if_null rx211_cstack, rx211_cstack_done607
    unless rx211_cstack, rx211_cstack_done607
    dec $I19
    set $P11, rx211_cstack[$I19]
  rx211_cstack_done607:
    pop rx211_rep, rx211_bstack
    pop rx211_pos, rx211_bstack
    pop $I19, rx211_bstack
    lt rx211_pos, -1, rx211_done602
    lt rx211_pos, 0, rx211_fail604
    eq $I19, 0, rx211_fail604
    nqp_islist $I20, rx211_cstack
    unless $I20, rx211_jump605
    elements $I18, rx211_bstack
    le $I18, 0, rx211_cut606
    dec $I18
    set $I18, rx211_bstack[$I18]
  rx211_cut606:
    assign rx211_cstack, $I18
  rx211_jump605:
    jump $I19
  rx211_done602:
    rx211_cur."!cursor_fail"()
    .return (rx211_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<[ ]>" :subid("cuid_44_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 189
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx214_start
    .local string rx214_tgt
    .local int rx214_pos
    .local int rx214_off
    .local int rx214_eos
    .local int rx214_rep
    .local pmc rx214_cur
    .local pmc rx214_curclass
    .local pmc rx214_bstack
    .local pmc rx214_cstack
    rx214_start = self."!cursor_start_all"()
    set rx214_cur, rx214_start[0]
    set rx214_tgt, rx214_start[1]
    set rx214_pos, rx214_start[2]
    set rx214_curclass, rx214_start[3]
    set rx214_bstack, rx214_start[4]
    set $I19, rx214_start[5]
    store_lex unicode:"$\x{a2}", rx214_cur
    length rx214_eos, rx214_tgt
    eq $I19, 1, rx214_restart614
    gt rx214_pos, rx214_eos, rx214_fail615
    repr_get_attr_int $I11, self, rx214_curclass, "$!from"
    ne $I11, -1, rxscan215_done621
    goto rxscan215_scan620
  rxscan215_loop619:
    inc rx214_pos
    gt rx214_pos, rx214_eos, rx214_fail615
    repr_bind_attr_int rx214_cur, rx214_curclass, "$!from", rx214_pos
  rxscan215_scan620:
    nqp_rxmark rx214_bstack, rxscan215_loop619, rx214_pos, 0
  rxscan215_done621:
    add $I11, rx214_pos, 1
    gt $I11, rx214_eos, rx214_fail615
    substr $S10, rx214_tgt, rx214_pos, 1
    ne $S10, ucs4:"[", rx214_fail615
    add rx214_pos, 1
    repr_bind_attr_int rx214_cur, rx214_curclass, "$!pos", rx214_pos
    $P11 = rx214_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx214_curclass, "$!pos"
    lt $I11, 0, rx214_fail615
    nqp_rxmark rx214_bstack, rxsubrule216_pass622, -1, 0
  rxsubrule216_pass622:
    rx214_cstack = rx214_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx214_pos, $P11, rx214_curclass, "$!pos"
    add $I11, rx214_pos, 1
    gt $I11, rx214_eos, rx214_fail615
    substr $S10, rx214_tgt, rx214_pos, 1
    ne $S10, ucs4:"]", rx214_fail615
    add rx214_pos, 1
    rx214_cur."!cursor_pass"(rx214_pos, "metachar:sym<[ ]>", 'backtrack'=>1)
    .return (rx214_cur)
  rx214_restart614:
    repr_get_attr_obj rx214_cstack, rx214_cur, rx214_curclass, "$!cstack"
  rx214_fail615:
    unless rx214_bstack, rx214_done613
    pop $I19, rx214_bstack
    if_null rx214_cstack, rx214_cstack_done618
    unless rx214_cstack, rx214_cstack_done618
    dec $I19
    set $P11, rx214_cstack[$I19]
  rx214_cstack_done618:
    pop rx214_rep, rx214_bstack
    pop rx214_pos, rx214_bstack
    pop $I19, rx214_bstack
    lt rx214_pos, -1, rx214_done613
    lt rx214_pos, 0, rx214_fail615
    eq $I19, 0, rx214_fail615
    nqp_islist $I20, rx214_cstack
    unless $I20, rx214_jump616
    elements $I18, rx214_bstack
    le $I18, 0, rx214_cut617
    dec $I18
    set $I18, rx214_bstack[$I18]
  rx214_cut617:
    assign rx214_cstack, $I18
  rx214_jump616:
    jump $I19
  rx214_done613:
    rx214_cur."!cursor_fail"()
    .return (rx214_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<( )>" :subid("cuid_45_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 190
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx217_start
    .local string rx217_tgt
    .local int rx217_pos
    .local int rx217_off
    .local int rx217_eos
    .local int rx217_rep
    .local pmc rx217_cur
    .local pmc rx217_curclass
    .local pmc rx217_bstack
    .local pmc rx217_cstack
    rx217_start = self."!cursor_start_all"()
    set rx217_cur, rx217_start[0]
    set rx217_tgt, rx217_start[1]
    set rx217_pos, rx217_start[2]
    set rx217_curclass, rx217_start[3]
    set rx217_bstack, rx217_start[4]
    set $I19, rx217_start[5]
    store_lex unicode:"$\x{a2}", rx217_cur
    length rx217_eos, rx217_tgt
    eq $I19, 1, rx217_restart625
    gt rx217_pos, rx217_eos, rx217_fail626
    repr_get_attr_int $I11, self, rx217_curclass, "$!from"
    ne $I11, -1, rxscan218_done632
    goto rxscan218_scan631
  rxscan218_loop630:
    inc rx217_pos
    gt rx217_pos, rx217_eos, rx217_fail626
    repr_bind_attr_int rx217_cur, rx217_curclass, "$!from", rx217_pos
  rxscan218_scan631:
    nqp_rxmark rx217_bstack, rxscan218_loop630, rx217_pos, 0
  rxscan218_done632:
    add $I11, rx217_pos, 1
    gt $I11, rx217_eos, rx217_fail626
    substr $S10, rx217_tgt, rx217_pos, 1
    ne $S10, ucs4:"(", rx217_fail626
    add rx217_pos, 1
    repr_bind_attr_int rx217_cur, rx217_curclass, "$!pos", rx217_pos
    $P11 = rx217_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx217_curclass, "$!pos"
    lt $I11, 0, rx217_fail626
    nqp_rxmark rx217_bstack, rxsubrule219_pass633, -1, 0
  rxsubrule219_pass633:
    rx217_cstack = rx217_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx217_pos, $P11, rx217_curclass, "$!pos"
    add $I11, rx217_pos, 1
    gt $I11, rx217_eos, rx217_fail626
    substr $S10, rx217_tgt, rx217_pos, 1
    ne $S10, ucs4:")", rx217_fail626
    add rx217_pos, 1
    rx217_cur."!cursor_pass"(rx217_pos, "metachar:sym<( )>", 'backtrack'=>1)
    .return (rx217_cur)
  rx217_restart625:
    repr_get_attr_obj rx217_cstack, rx217_cur, rx217_curclass, "$!cstack"
  rx217_fail626:
    unless rx217_bstack, rx217_done624
    pop $I19, rx217_bstack
    if_null rx217_cstack, rx217_cstack_done629
    unless rx217_cstack, rx217_cstack_done629
    dec $I19
    set $P11, rx217_cstack[$I19]
  rx217_cstack_done629:
    pop rx217_rep, rx217_bstack
    pop rx217_pos, rx217_bstack
    pop $I19, rx217_bstack
    lt rx217_pos, -1, rx217_done624
    lt rx217_pos, 0, rx217_fail626
    eq $I19, 0, rx217_fail626
    nqp_islist $I20, rx217_cstack
    unless $I20, rx217_jump627
    elements $I18, rx217_bstack
    le $I18, 0, rx217_cut628
    dec $I18
    set $I18, rx217_bstack[$I18]
  rx217_cut628:
    assign rx217_cstack, $I18
  rx217_jump627:
    jump $I19
  rx217_done624:
    rx217_cur."!cursor_fail"()
    .return (rx217_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<'>" :subid("cuid_46_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 191
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx220_start
    .local string rx220_tgt
    .local int rx220_pos
    .local int rx220_off
    .local int rx220_eos
    .local int rx220_rep
    .local pmc rx220_cur
    .local pmc rx220_curclass
    .local pmc rx220_bstack
    .local pmc rx220_cstack
    rx220_start = self."!cursor_start_all"()
    set rx220_cur, rx220_start[0]
    set rx220_tgt, rx220_start[1]
    set rx220_pos, rx220_start[2]
    set rx220_curclass, rx220_start[3]
    set rx220_bstack, rx220_start[4]
    set $I19, rx220_start[5]
    store_lex unicode:"$\x{a2}", rx220_cur
    length rx220_eos, rx220_tgt
    eq $I19, 1, rx220_restart636
    gt rx220_pos, rx220_eos, rx220_fail637
    repr_get_attr_int $I11, self, rx220_curclass, "$!from"
    ne $I11, -1, rxscan221_done643
    goto rxscan221_scan642
  rxscan221_loop641:
    inc rx220_pos
    gt rx220_pos, rx220_eos, rx220_fail637
    repr_bind_attr_int rx220_cur, rx220_curclass, "$!from", rx220_pos
  rxscan221_scan642:
    nqp_rxmark rx220_bstack, rxscan221_loop641, rx220_pos, 0
  rxscan221_done643:
    ge rx220_pos, rx220_eos, rx220_fail637
    substr $S11, rx220_tgt, rx220_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx220_fail637
    repr_bind_attr_int rx220_cur, rx220_curclass, "$!pos", rx220_pos
    $P11 = rx220_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx220_curclass, "$!pos"
    lt $I11, 0, rx220_fail637
    nqp_rxmark rx220_bstack, rxsubrule222_pass644, -1, 0
  rxsubrule222_pass644:
    rx220_cstack = rx220_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx220_pos, $P11, rx220_curclass, "$!pos"
    rx220_cur."!cursor_pass"(rx220_pos, "metachar:sym<'>", 'backtrack'=>1)
    .return (rx220_cur)
  rx220_restart636:
    repr_get_attr_obj rx220_cstack, rx220_cur, rx220_curclass, "$!cstack"
  rx220_fail637:
    unless rx220_bstack, rx220_done635
    pop $I19, rx220_bstack
    if_null rx220_cstack, rx220_cstack_done640
    unless rx220_cstack, rx220_cstack_done640
    dec $I19
    set $P11, rx220_cstack[$I19]
  rx220_cstack_done640:
    pop rx220_rep, rx220_bstack
    pop rx220_pos, rx220_bstack
    pop $I19, rx220_bstack
    lt rx220_pos, -1, rx220_done635
    lt rx220_pos, 0, rx220_fail637
    eq $I19, 0, rx220_fail637
    nqp_islist $I20, rx220_cstack
    unless $I20, rx220_jump638
    elements $I18, rx220_bstack
    le $I18, 0, rx220_cut639
    dec $I18
    set $I18, rx220_bstack[$I18]
  rx220_cut639:
    assign rx220_cstack, $I18
  rx220_jump638:
    jump $I19
  rx220_done635:
    rx220_cur."!cursor_fail"()
    .return (rx220_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<\">" :subid("cuid_47_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 192
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx223_start
    .local string rx223_tgt
    .local int rx223_pos
    .local int rx223_off
    .local int rx223_eos
    .local int rx223_rep
    .local pmc rx223_cur
    .local pmc rx223_curclass
    .local pmc rx223_bstack
    .local pmc rx223_cstack
    rx223_start = self."!cursor_start_all"()
    set rx223_cur, rx223_start[0]
    set rx223_tgt, rx223_start[1]
    set rx223_pos, rx223_start[2]
    set rx223_curclass, rx223_start[3]
    set rx223_bstack, rx223_start[4]
    set $I19, rx223_start[5]
    store_lex unicode:"$\x{a2}", rx223_cur
    length rx223_eos, rx223_tgt
    eq $I19, 1, rx223_restart647
    gt rx223_pos, rx223_eos, rx223_fail648
    repr_get_attr_int $I11, self, rx223_curclass, "$!from"
    ne $I11, -1, rxscan224_done654
    goto rxscan224_scan653
  rxscan224_loop652:
    inc rx223_pos
    gt rx223_pos, rx223_eos, rx223_fail648
    repr_bind_attr_int rx223_cur, rx223_curclass, "$!from", rx223_pos
  rxscan224_scan653:
    nqp_rxmark rx223_bstack, rxscan224_loop652, rx223_pos, 0
  rxscan224_done654:
    ge rx223_pos, rx223_eos, rx223_fail648
    substr $S11, rx223_tgt, rx223_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx223_fail648
    repr_bind_attr_int rx223_cur, rx223_curclass, "$!pos", rx223_pos
    $P11 = rx223_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx223_curclass, "$!pos"
    lt $I11, 0, rx223_fail648
    nqp_rxmark rx223_bstack, rxsubrule225_pass655, -1, 0
  rxsubrule225_pass655:
    rx223_cstack = rx223_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx223_pos, $P11, rx223_curclass, "$!pos"
    rx223_cur."!cursor_pass"(rx223_pos, "metachar:sym<\">", 'backtrack'=>1)
    .return (rx223_cur)
  rx223_restart647:
    repr_get_attr_obj rx223_cstack, rx223_cur, rx223_curclass, "$!cstack"
  rx223_fail648:
    unless rx223_bstack, rx223_done646
    pop $I19, rx223_bstack
    if_null rx223_cstack, rx223_cstack_done651
    unless rx223_cstack, rx223_cstack_done651
    dec $I19
    set $P11, rx223_cstack[$I19]
  rx223_cstack_done651:
    pop rx223_rep, rx223_bstack
    pop rx223_pos, rx223_bstack
    pop $I19, rx223_bstack
    lt rx223_pos, -1, rx223_done646
    lt rx223_pos, 0, rx223_fail648
    eq $I19, 0, rx223_fail648
    nqp_islist $I20, rx223_cstack
    unless $I20, rx223_jump649
    elements $I18, rx223_bstack
    le $I18, 0, rx223_cut650
    dec $I18
    set $I18, rx223_bstack[$I18]
  rx223_cut650:
    assign rx223_cstack, $I18
  rx223_jump649:
    jump $I19
  rx223_done646:
    rx223_cur."!cursor_fail"()
    .return (rx223_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<.>" :subid("cuid_48_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 193
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx226_start
    .local string rx226_tgt
    .local int rx226_pos
    .local int rx226_off
    .local int rx226_eos
    .local int rx226_rep
    .local pmc rx226_cur
    .local pmc rx226_curclass
    .local pmc rx226_bstack
    .local pmc rx226_cstack
    rx226_start = self."!cursor_start_all"()
    set rx226_cur, rx226_start[0]
    set rx226_tgt, rx226_start[1]
    set rx226_pos, rx226_start[2]
    set rx226_curclass, rx226_start[3]
    set rx226_bstack, rx226_start[4]
    set $I19, rx226_start[5]
    store_lex unicode:"$\x{a2}", rx226_cur
    length rx226_eos, rx226_tgt
    eq $I19, 1, rx226_restart658
    gt rx226_pos, rx226_eos, rx226_fail659
    repr_get_attr_int $I11, self, rx226_curclass, "$!from"
    ne $I11, -1, rxscan227_done665
    goto rxscan227_scan664
  rxscan227_loop663:
    inc rx226_pos
    gt rx226_pos, rx226_eos, rx226_fail659
    repr_bind_attr_int rx226_cur, rx226_curclass, "$!from", rx226_pos
  rxscan227_scan664:
    nqp_rxmark rx226_bstack, rxscan227_loop663, rx226_pos, 0
  rxscan227_done665:
    nqp_rxmark rx226_bstack, rxcap228_fail667, rx226_pos, 0
    add $I11, rx226_pos, 1
    gt $I11, rx226_eos, rx226_fail659
    substr $S10, rx226_tgt, rx226_pos, 1
    ne $S10, ucs4:".", rx226_fail659
    add rx226_pos, 1
    nqp_rxpeek $I19, rx226_bstack, rxcap228_fail667
    inc $I19
    set $I11, rx226_bstack[$I19]
    repr_bind_attr_int rx226_cur, rx226_curclass, "$!pos", rx226_pos
    $P11 = rx226_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx226_pos)
    rx226_cstack = rx226_cur."!cursor_capture"($P11, "sym")
    goto rxcap228_done666
  rxcap228_fail667:
    goto rx226_fail659
  rxcap228_done666:
    rx226_cur."!cursor_pass"(rx226_pos, "metachar:sym<.>", 'backtrack'=>1)
    .return (rx226_cur)
  rx226_restart658:
    repr_get_attr_obj rx226_cstack, rx226_cur, rx226_curclass, "$!cstack"
  rx226_fail659:
    unless rx226_bstack, rx226_done657
    pop $I19, rx226_bstack
    if_null rx226_cstack, rx226_cstack_done662
    unless rx226_cstack, rx226_cstack_done662
    dec $I19
    set $P11, rx226_cstack[$I19]
  rx226_cstack_done662:
    pop rx226_rep, rx226_bstack
    pop rx226_pos, rx226_bstack
    pop $I19, rx226_bstack
    lt rx226_pos, -1, rx226_done657
    lt rx226_pos, 0, rx226_fail659
    eq $I19, 0, rx226_fail659
    nqp_islist $I20, rx226_cstack
    unless $I20, rx226_jump660
    elements $I18, rx226_bstack
    le $I18, 0, rx226_cut661
    dec $I18
    set $I18, rx226_bstack[$I18]
  rx226_cut661:
    assign rx226_cstack, $I18
  rx226_jump660:
    jump $I19
  rx226_done657:
    rx226_cur."!cursor_fail"()
    .return (rx226_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^>" :subid("cuid_49_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 194
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx229_start
    .local string rx229_tgt
    .local int rx229_pos
    .local int rx229_off
    .local int rx229_eos
    .local int rx229_rep
    .local pmc rx229_cur
    .local pmc rx229_curclass
    .local pmc rx229_bstack
    .local pmc rx229_cstack
    rx229_start = self."!cursor_start_all"()
    set rx229_cur, rx229_start[0]
    set rx229_tgt, rx229_start[1]
    set rx229_pos, rx229_start[2]
    set rx229_curclass, rx229_start[3]
    set rx229_bstack, rx229_start[4]
    set $I19, rx229_start[5]
    store_lex unicode:"$\x{a2}", rx229_cur
    length rx229_eos, rx229_tgt
    eq $I19, 1, rx229_restart670
    gt rx229_pos, rx229_eos, rx229_fail671
    repr_get_attr_int $I11, self, rx229_curclass, "$!from"
    ne $I11, -1, rxscan230_done677
    goto rxscan230_scan676
  rxscan230_loop675:
    inc rx229_pos
    gt rx229_pos, rx229_eos, rx229_fail671
    repr_bind_attr_int rx229_cur, rx229_curclass, "$!from", rx229_pos
  rxscan230_scan676:
    nqp_rxmark rx229_bstack, rxscan230_loop675, rx229_pos, 0
  rxscan230_done677:
    nqp_rxmark rx229_bstack, rxcap231_fail679, rx229_pos, 0
    add $I11, rx229_pos, 1
    gt $I11, rx229_eos, rx229_fail671
    substr $S10, rx229_tgt, rx229_pos, 1
    ne $S10, ucs4:"^", rx229_fail671
    add rx229_pos, 1
    nqp_rxpeek $I19, rx229_bstack, rxcap231_fail679
    inc $I19
    set $I11, rx229_bstack[$I19]
    repr_bind_attr_int rx229_cur, rx229_curclass, "$!pos", rx229_pos
    $P11 = rx229_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx229_pos)
    rx229_cstack = rx229_cur."!cursor_capture"($P11, "sym")
    goto rxcap231_done678
  rxcap231_fail679:
    goto rx229_fail671
  rxcap231_done678:
    rx229_cur."!cursor_pass"(rx229_pos, "metachar:sym<^>", 'backtrack'=>1)
    .return (rx229_cur)
  rx229_restart670:
    repr_get_attr_obj rx229_cstack, rx229_cur, rx229_curclass, "$!cstack"
  rx229_fail671:
    unless rx229_bstack, rx229_done669
    pop $I19, rx229_bstack
    if_null rx229_cstack, rx229_cstack_done674
    unless rx229_cstack, rx229_cstack_done674
    dec $I19
    set $P11, rx229_cstack[$I19]
  rx229_cstack_done674:
    pop rx229_rep, rx229_bstack
    pop rx229_pos, rx229_bstack
    pop $I19, rx229_bstack
    lt rx229_pos, -1, rx229_done669
    lt rx229_pos, 0, rx229_fail671
    eq $I19, 0, rx229_fail671
    nqp_islist $I20, rx229_cstack
    unless $I20, rx229_jump672
    elements $I18, rx229_bstack
    le $I18, 0, rx229_cut673
    dec $I18
    set $I18, rx229_bstack[$I18]
  rx229_cut673:
    assign rx229_cstack, $I18
  rx229_jump672:
    jump $I19
  rx229_done669:
    rx229_cur."!cursor_fail"()
    .return (rx229_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^^>" :subid("cuid_50_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 195
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx232_start
    .local string rx232_tgt
    .local int rx232_pos
    .local int rx232_off
    .local int rx232_eos
    .local int rx232_rep
    .local pmc rx232_cur
    .local pmc rx232_curclass
    .local pmc rx232_bstack
    .local pmc rx232_cstack
    rx232_start = self."!cursor_start_all"()
    set rx232_cur, rx232_start[0]
    set rx232_tgt, rx232_start[1]
    set rx232_pos, rx232_start[2]
    set rx232_curclass, rx232_start[3]
    set rx232_bstack, rx232_start[4]
    set $I19, rx232_start[5]
    store_lex unicode:"$\x{a2}", rx232_cur
    length rx232_eos, rx232_tgt
    eq $I19, 1, rx232_restart682
    gt rx232_pos, rx232_eos, rx232_fail683
    repr_get_attr_int $I11, self, rx232_curclass, "$!from"
    ne $I11, -1, rxscan233_done689
    goto rxscan233_scan688
  rxscan233_loop687:
    inc rx232_pos
    gt rx232_pos, rx232_eos, rx232_fail683
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!from", rx232_pos
  rxscan233_scan688:
    nqp_rxmark rx232_bstack, rxscan233_loop687, rx232_pos, 0
  rxscan233_done689:
    nqp_rxmark rx232_bstack, rxcap234_fail691, rx232_pos, 0
    add $I11, rx232_pos, 2
    gt $I11, rx232_eos, rx232_fail683
    substr $S10, rx232_tgt, rx232_pos, 2
    ne $S10, ucs4:"^^", rx232_fail683
    add rx232_pos, 2
    nqp_rxpeek $I19, rx232_bstack, rxcap234_fail691
    inc $I19
    set $I11, rx232_bstack[$I19]
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!pos", rx232_pos
    $P11 = rx232_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx232_pos)
    rx232_cstack = rx232_cur."!cursor_capture"($P11, "sym")
    goto rxcap234_done690
  rxcap234_fail691:
    goto rx232_fail683
  rxcap234_done690:
    rx232_cur."!cursor_pass"(rx232_pos, "metachar:sym<^^>", 'backtrack'=>1)
    .return (rx232_cur)
  rx232_restart682:
    repr_get_attr_obj rx232_cstack, rx232_cur, rx232_curclass, "$!cstack"
  rx232_fail683:
    unless rx232_bstack, rx232_done681
    pop $I19, rx232_bstack
    if_null rx232_cstack, rx232_cstack_done686
    unless rx232_cstack, rx232_cstack_done686
    dec $I19
    set $P11, rx232_cstack[$I19]
  rx232_cstack_done686:
    pop rx232_rep, rx232_bstack
    pop rx232_pos, rx232_bstack
    pop $I19, rx232_bstack
    lt rx232_pos, -1, rx232_done681
    lt rx232_pos, 0, rx232_fail683
    eq $I19, 0, rx232_fail683
    nqp_islist $I20, rx232_cstack
    unless $I20, rx232_jump684
    elements $I18, rx232_bstack
    le $I18, 0, rx232_cut685
    dec $I18
    set $I18, rx232_bstack[$I18]
  rx232_cut685:
    assign rx232_cstack, $I18
  rx232_jump684:
    jump $I19
  rx232_done681:
    rx232_cur."!cursor_fail"()
    .return (rx232_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$>" :subid("cuid_51_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 196
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx235_start
    .local string rx235_tgt
    .local int rx235_pos
    .local int rx235_off
    .local int rx235_eos
    .local int rx235_rep
    .local pmc rx235_cur
    .local pmc rx235_curclass
    .local pmc rx235_bstack
    .local pmc rx235_cstack
    rx235_start = self."!cursor_start_all"()
    set rx235_cur, rx235_start[0]
    set rx235_tgt, rx235_start[1]
    set rx235_pos, rx235_start[2]
    set rx235_curclass, rx235_start[3]
    set rx235_bstack, rx235_start[4]
    set $I19, rx235_start[5]
    store_lex unicode:"$\x{a2}", rx235_cur
    length rx235_eos, rx235_tgt
    eq $I19, 1, rx235_restart694
    gt rx235_pos, rx235_eos, rx235_fail695
    repr_get_attr_int $I11, self, rx235_curclass, "$!from"
    ne $I11, -1, rxscan236_done701
    goto rxscan236_scan700
  rxscan236_loop699:
    inc rx235_pos
    gt rx235_pos, rx235_eos, rx235_fail695
    repr_bind_attr_int rx235_cur, rx235_curclass, "$!from", rx235_pos
  rxscan236_scan700:
    nqp_rxmark rx235_bstack, rxscan236_loop699, rx235_pos, 0
  rxscan236_done701:
    nqp_rxmark rx235_bstack, rxcap237_fail703, rx235_pos, 0
    add $I11, rx235_pos, 1
    gt $I11, rx235_eos, rx235_fail695
    substr $S10, rx235_tgt, rx235_pos, 1
    ne $S10, ucs4:"$", rx235_fail695
    add rx235_pos, 1
    nqp_rxpeek $I19, rx235_bstack, rxcap237_fail703
    inc $I19
    set $I11, rx235_bstack[$I19]
    repr_bind_attr_int rx235_cur, rx235_curclass, "$!pos", rx235_pos
    $P11 = rx235_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx235_pos)
    rx235_cstack = rx235_cur."!cursor_capture"($P11, "sym")
    goto rxcap237_done702
  rxcap237_fail703:
    goto rx235_fail695
  rxcap237_done702:
    rx235_cur."!cursor_pass"(rx235_pos, "metachar:sym<$>", 'backtrack'=>1)
    .return (rx235_cur)
  rx235_restart694:
    repr_get_attr_obj rx235_cstack, rx235_cur, rx235_curclass, "$!cstack"
  rx235_fail695:
    unless rx235_bstack, rx235_done693
    pop $I19, rx235_bstack
    if_null rx235_cstack, rx235_cstack_done698
    unless rx235_cstack, rx235_cstack_done698
    dec $I19
    set $P11, rx235_cstack[$I19]
  rx235_cstack_done698:
    pop rx235_rep, rx235_bstack
    pop rx235_pos, rx235_bstack
    pop $I19, rx235_bstack
    lt rx235_pos, -1, rx235_done693
    lt rx235_pos, 0, rx235_fail695
    eq $I19, 0, rx235_fail695
    nqp_islist $I20, rx235_cstack
    unless $I20, rx235_jump696
    elements $I18, rx235_bstack
    le $I18, 0, rx235_cut697
    dec $I18
    set $I18, rx235_bstack[$I18]
  rx235_cut697:
    assign rx235_cstack, $I18
  rx235_jump696:
    jump $I19
  rx235_done693:
    rx235_cur."!cursor_fail"()
    .return (rx235_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$$>" :subid("cuid_52_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 197
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx238_start
    .local string rx238_tgt
    .local int rx238_pos
    .local int rx238_off
    .local int rx238_eos
    .local int rx238_rep
    .local pmc rx238_cur
    .local pmc rx238_curclass
    .local pmc rx238_bstack
    .local pmc rx238_cstack
    rx238_start = self."!cursor_start_all"()
    set rx238_cur, rx238_start[0]
    set rx238_tgt, rx238_start[1]
    set rx238_pos, rx238_start[2]
    set rx238_curclass, rx238_start[3]
    set rx238_bstack, rx238_start[4]
    set $I19, rx238_start[5]
    store_lex unicode:"$\x{a2}", rx238_cur
    length rx238_eos, rx238_tgt
    eq $I19, 1, rx238_restart706
    gt rx238_pos, rx238_eos, rx238_fail707
    repr_get_attr_int $I11, self, rx238_curclass, "$!from"
    ne $I11, -1, rxscan239_done713
    goto rxscan239_scan712
  rxscan239_loop711:
    inc rx238_pos
    gt rx238_pos, rx238_eos, rx238_fail707
    repr_bind_attr_int rx238_cur, rx238_curclass, "$!from", rx238_pos
  rxscan239_scan712:
    nqp_rxmark rx238_bstack, rxscan239_loop711, rx238_pos, 0
  rxscan239_done713:
    nqp_rxmark rx238_bstack, rxcap240_fail715, rx238_pos, 0
    add $I11, rx238_pos, 2
    gt $I11, rx238_eos, rx238_fail707
    substr $S10, rx238_tgt, rx238_pos, 2
    ne $S10, ucs4:"$$", rx238_fail707
    add rx238_pos, 2
    nqp_rxpeek $I19, rx238_bstack, rxcap240_fail715
    inc $I19
    set $I11, rx238_bstack[$I19]
    repr_bind_attr_int rx238_cur, rx238_curclass, "$!pos", rx238_pos
    $P11 = rx238_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx238_pos)
    rx238_cstack = rx238_cur."!cursor_capture"($P11, "sym")
    goto rxcap240_done714
  rxcap240_fail715:
    goto rx238_fail707
  rxcap240_done714:
    rx238_cur."!cursor_pass"(rx238_pos, "metachar:sym<$$>", 'backtrack'=>1)
    .return (rx238_cur)
  rx238_restart706:
    repr_get_attr_obj rx238_cstack, rx238_cur, rx238_curclass, "$!cstack"
  rx238_fail707:
    unless rx238_bstack, rx238_done705
    pop $I19, rx238_bstack
    if_null rx238_cstack, rx238_cstack_done710
    unless rx238_cstack, rx238_cstack_done710
    dec $I19
    set $P11, rx238_cstack[$I19]
  rx238_cstack_done710:
    pop rx238_rep, rx238_bstack
    pop rx238_pos, rx238_bstack
    pop $I19, rx238_bstack
    lt rx238_pos, -1, rx238_done705
    lt rx238_pos, 0, rx238_fail707
    eq $I19, 0, rx238_fail707
    nqp_islist $I20, rx238_cstack
    unless $I20, rx238_jump708
    elements $I18, rx238_bstack
    le $I18, 0, rx238_cut709
    dec $I18
    set $I18, rx238_bstack[$I18]
  rx238_cut709:
    assign rx238_cstack, $I18
  rx238_jump708:
    jump $I19
  rx238_done705:
    rx238_cur."!cursor_fail"()
    .return (rx238_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:::>" :subid("cuid_53_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 198
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx241_start
    .local string rx241_tgt
    .local int rx241_pos
    .local int rx241_off
    .local int rx241_eos
    .local int rx241_rep
    .local pmc rx241_cur
    .local pmc rx241_curclass
    .local pmc rx241_bstack
    .local pmc rx241_cstack
    rx241_start = self."!cursor_start_all"()
    set rx241_cur, rx241_start[0]
    set rx241_tgt, rx241_start[1]
    set rx241_pos, rx241_start[2]
    set rx241_curclass, rx241_start[3]
    set rx241_bstack, rx241_start[4]
    set $I19, rx241_start[5]
    store_lex unicode:"$\x{a2}", rx241_cur
    length rx241_eos, rx241_tgt
    eq $I19, 1, rx241_restart718
    gt rx241_pos, rx241_eos, rx241_fail719
    repr_get_attr_int $I11, self, rx241_curclass, "$!from"
    ne $I11, -1, rxscan242_done725
    goto rxscan242_scan724
  rxscan242_loop723:
    inc rx241_pos
    gt rx241_pos, rx241_eos, rx241_fail719
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!from", rx241_pos
  rxscan242_scan724:
    nqp_rxmark rx241_bstack, rxscan242_loop723, rx241_pos, 0
  rxscan242_done725:
    nqp_rxmark rx241_bstack, rxcap243_fail727, rx241_pos, 0
    add $I11, rx241_pos, 3
    gt $I11, rx241_eos, rx241_fail719
    substr $S10, rx241_tgt, rx241_pos, 3
    ne $S10, ucs4:":::", rx241_fail719
    add rx241_pos, 3
    nqp_rxpeek $I19, rx241_bstack, rxcap243_fail727
    inc $I19
    set $I11, rx241_bstack[$I19]
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx241_pos)
    rx241_cstack = rx241_cur."!cursor_capture"($P11, "sym")
    goto rxcap243_done726
  rxcap243_fail727:
    goto rx241_fail719
  rxcap243_done726:
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."panic"("::: not yet implemented")
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail719
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    rx241_cur."!cursor_pass"(rx241_pos, "metachar:sym<:::>", 'backtrack'=>1)
    .return (rx241_cur)
  rx241_restart718:
    repr_get_attr_obj rx241_cstack, rx241_cur, rx241_curclass, "$!cstack"
  rx241_fail719:
    unless rx241_bstack, rx241_done717
    pop $I19, rx241_bstack
    if_null rx241_cstack, rx241_cstack_done722
    unless rx241_cstack, rx241_cstack_done722
    dec $I19
    set $P11, rx241_cstack[$I19]
  rx241_cstack_done722:
    pop rx241_rep, rx241_bstack
    pop rx241_pos, rx241_bstack
    pop $I19, rx241_bstack
    lt rx241_pos, -1, rx241_done717
    lt rx241_pos, 0, rx241_fail719
    eq $I19, 0, rx241_fail719
    nqp_islist $I20, rx241_cstack
    unless $I20, rx241_jump720
    elements $I18, rx241_bstack
    le $I18, 0, rx241_cut721
    dec $I18
    set $I18, rx241_bstack[$I18]
  rx241_cut721:
    assign rx241_cstack, $I18
  rx241_jump720:
    jump $I19
  rx241_done717:
    rx241_cur."!cursor_fail"()
    .return (rx241_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<::>" :subid("cuid_54_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 199
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx245_start
    .local string rx245_tgt
    .local int rx245_pos
    .local int rx245_off
    .local int rx245_eos
    .local int rx245_rep
    .local pmc rx245_cur
    .local pmc rx245_curclass
    .local pmc rx245_bstack
    .local pmc rx245_cstack
    rx245_start = self."!cursor_start_all"()
    set rx245_cur, rx245_start[0]
    set rx245_tgt, rx245_start[1]
    set rx245_pos, rx245_start[2]
    set rx245_curclass, rx245_start[3]
    set rx245_bstack, rx245_start[4]
    set $I19, rx245_start[5]
    store_lex unicode:"$\x{a2}", rx245_cur
    length rx245_eos, rx245_tgt
    eq $I19, 1, rx245_restart731
    gt rx245_pos, rx245_eos, rx245_fail732
    repr_get_attr_int $I11, self, rx245_curclass, "$!from"
    ne $I11, -1, rxscan246_done738
    goto rxscan246_scan737
  rxscan246_loop736:
    inc rx245_pos
    gt rx245_pos, rx245_eos, rx245_fail732
    repr_bind_attr_int rx245_cur, rx245_curclass, "$!from", rx245_pos
  rxscan246_scan737:
    nqp_rxmark rx245_bstack, rxscan246_loop736, rx245_pos, 0
  rxscan246_done738:
    nqp_rxmark rx245_bstack, rxcap247_fail740, rx245_pos, 0
    add $I11, rx245_pos, 2
    gt $I11, rx245_eos, rx245_fail732
    substr $S10, rx245_tgt, rx245_pos, 2
    ne $S10, ucs4:"::", rx245_fail732
    add rx245_pos, 2
    nqp_rxpeek $I19, rx245_bstack, rxcap247_fail740
    inc $I19
    set $I11, rx245_bstack[$I19]
    repr_bind_attr_int rx245_cur, rx245_curclass, "$!pos", rx245_pos
    $P11 = rx245_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx245_pos)
    rx245_cstack = rx245_cur."!cursor_capture"($P11, "sym")
    goto rxcap247_done739
  rxcap247_fail740:
    goto rx245_fail732
  rxcap247_done739:
    repr_bind_attr_int rx245_cur, rx245_curclass, "$!pos", rx245_pos
    $P11 = rx245_cur."panic"(":: not yet implemented")
    repr_get_attr_int $I11, $P11, rx245_curclass, "$!pos"
    lt $I11, 0, rx245_fail732
    repr_get_attr_int rx245_pos, $P11, rx245_curclass, "$!pos"
    rx245_cur."!cursor_pass"(rx245_pos, "metachar:sym<::>", 'backtrack'=>1)
    .return (rx245_cur)
  rx245_restart731:
    repr_get_attr_obj rx245_cstack, rx245_cur, rx245_curclass, "$!cstack"
  rx245_fail732:
    unless rx245_bstack, rx245_done730
    pop $I19, rx245_bstack
    if_null rx245_cstack, rx245_cstack_done735
    unless rx245_cstack, rx245_cstack_done735
    dec $I19
    set $P11, rx245_cstack[$I19]
  rx245_cstack_done735:
    pop rx245_rep, rx245_bstack
    pop rx245_pos, rx245_bstack
    pop $I19, rx245_bstack
    lt rx245_pos, -1, rx245_done730
    lt rx245_pos, 0, rx245_fail732
    eq $I19, 0, rx245_fail732
    nqp_islist $I20, rx245_cstack
    unless $I20, rx245_jump733
    elements $I18, rx245_bstack
    le $I18, 0, rx245_cut734
    dec $I18
    set $I18, rx245_bstack[$I18]
  rx245_cut734:
    assign rx245_cstack, $I18
  rx245_jump733:
    jump $I19
  rx245_done730:
    rx245_cur."!cursor_fail"()
    .return (rx245_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<lwb>" :subid("cuid_55_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 200
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx249_start
    .local string rx249_tgt
    .local int rx249_pos
    .local int rx249_off
    .local int rx249_eos
    .local int rx249_rep
    .local pmc rx249_cur
    .local pmc rx249_curclass
    .local pmc rx249_bstack
    .local pmc rx249_cstack
    rx249_start = self."!cursor_start_all"()
    set rx249_cur, rx249_start[0]
    set rx249_tgt, rx249_start[1]
    set rx249_pos, rx249_start[2]
    set rx249_curclass, rx249_start[3]
    set rx249_bstack, rx249_start[4]
    set $I19, rx249_start[5]
    store_lex unicode:"$\x{a2}", rx249_cur
    length rx249_eos, rx249_tgt
    eq $I19, 1, rx249_restart744
    gt rx249_pos, rx249_eos, rx249_fail745
    repr_get_attr_int $I11, self, rx249_curclass, "$!from"
    ne $I11, -1, rxscan250_done751
    goto rxscan250_scan750
  rxscan250_loop749:
    inc rx249_pos
    gt rx249_pos, rx249_eos, rx249_fail745
    repr_bind_attr_int rx249_cur, rx249_curclass, "$!from", rx249_pos
  rxscan250_scan750:
    nqp_rxmark rx249_bstack, rxscan250_loop749, rx249_pos, 0
  rxscan250_done751:
    nqp_rxmark rx249_bstack, rxcap251_fail753, rx249_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt252_0755
    nqp_push_label $P11, alt252_1756
    nqp_rxmark rx249_bstack, alt252_end754, -1, 0
    rx249_cur."!alt"(rx249_pos, "alt_nfa__10_1361734135.517", $P11)
    goto rx249_fail745
  alt252_0755:
    add $I11, rx249_pos, 2
    gt $I11, rx249_eos, rx249_fail745
    substr $S10, rx249_tgt, rx249_pos, 2
    ne $S10, ucs4:"<<", rx249_fail745
    add rx249_pos, 2
    goto alt252_end754
  alt252_1756:
    add $I11, rx249_pos, 1
    gt $I11, rx249_eos, rx249_fail745
    substr $S10, rx249_tgt, rx249_pos, 1
    ne $S10, ucs4:"\x{ab}", rx249_fail745
    add rx249_pos, 1
    goto alt252_end754
  alt252_end754:
    nqp_rxcommit rx249_bstack, alt252_end754
    nqp_rxpeek $I19, rx249_bstack, rxcap251_fail753
    inc $I19
    set $I11, rx249_bstack[$I19]
    repr_bind_attr_int rx249_cur, rx249_curclass, "$!pos", rx249_pos
    $P11 = rx249_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx249_pos)
    rx249_cstack = rx249_cur."!cursor_capture"($P11, "sym")
    goto rxcap251_done752
  rxcap251_fail753:
    goto rx249_fail745
  rxcap251_done752:
    rx249_cur."!cursor_pass"(rx249_pos, "metachar:sym<lwb>", 'backtrack'=>1)
    .return (rx249_cur)
  rx249_restart744:
    repr_get_attr_obj rx249_cstack, rx249_cur, rx249_curclass, "$!cstack"
  rx249_fail745:
    unless rx249_bstack, rx249_done743
    pop $I19, rx249_bstack
    if_null rx249_cstack, rx249_cstack_done748
    unless rx249_cstack, rx249_cstack_done748
    dec $I19
    set $P11, rx249_cstack[$I19]
  rx249_cstack_done748:
    pop rx249_rep, rx249_bstack
    pop rx249_pos, rx249_bstack
    pop $I19, rx249_bstack
    lt rx249_pos, -1, rx249_done743
    lt rx249_pos, 0, rx249_fail745
    eq $I19, 0, rx249_fail745
    nqp_islist $I20, rx249_cstack
    unless $I20, rx249_jump746
    elements $I18, rx249_bstack
    le $I18, 0, rx249_cut747
    dec $I18
    set $I18, rx249_bstack[$I18]
  rx249_cut747:
    assign rx249_cstack, $I18
  rx249_jump746:
    jump $I19
  rx249_done743:
    rx249_cur."!cursor_fail"()
    .return (rx249_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<rwb>" :subid("cuid_56_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 201
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx253_start
    .local string rx253_tgt
    .local int rx253_pos
    .local int rx253_off
    .local int rx253_eos
    .local int rx253_rep
    .local pmc rx253_cur
    .local pmc rx253_curclass
    .local pmc rx253_bstack
    .local pmc rx253_cstack
    rx253_start = self."!cursor_start_all"()
    set rx253_cur, rx253_start[0]
    set rx253_tgt, rx253_start[1]
    set rx253_pos, rx253_start[2]
    set rx253_curclass, rx253_start[3]
    set rx253_bstack, rx253_start[4]
    set $I19, rx253_start[5]
    store_lex unicode:"$\x{a2}", rx253_cur
    length rx253_eos, rx253_tgt
    eq $I19, 1, rx253_restart759
    gt rx253_pos, rx253_eos, rx253_fail760
    repr_get_attr_int $I11, self, rx253_curclass, "$!from"
    ne $I11, -1, rxscan254_done766
    goto rxscan254_scan765
  rxscan254_loop764:
    inc rx253_pos
    gt rx253_pos, rx253_eos, rx253_fail760
    repr_bind_attr_int rx253_cur, rx253_curclass, "$!from", rx253_pos
  rxscan254_scan765:
    nqp_rxmark rx253_bstack, rxscan254_loop764, rx253_pos, 0
  rxscan254_done766:
    nqp_rxmark rx253_bstack, rxcap255_fail768, rx253_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt256_0770
    nqp_push_label $P11, alt256_1771
    nqp_rxmark rx253_bstack, alt256_end769, -1, 0
    rx253_cur."!alt"(rx253_pos, "alt_nfa__11_1361734135.524", $P11)
    goto rx253_fail760
  alt256_0770:
    add $I11, rx253_pos, 2
    gt $I11, rx253_eos, rx253_fail760
    substr $S10, rx253_tgt, rx253_pos, 2
    ne $S10, ucs4:">>", rx253_fail760
    add rx253_pos, 2
    goto alt256_end769
  alt256_1771:
    add $I11, rx253_pos, 1
    gt $I11, rx253_eos, rx253_fail760
    substr $S10, rx253_tgt, rx253_pos, 1
    ne $S10, ucs4:"\x{bb}", rx253_fail760
    add rx253_pos, 1
    goto alt256_end769
  alt256_end769:
    nqp_rxcommit rx253_bstack, alt256_end769
    nqp_rxpeek $I19, rx253_bstack, rxcap255_fail768
    inc $I19
    set $I11, rx253_bstack[$I19]
    repr_bind_attr_int rx253_cur, rx253_curclass, "$!pos", rx253_pos
    $P11 = rx253_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx253_pos)
    rx253_cstack = rx253_cur."!cursor_capture"($P11, "sym")
    goto rxcap255_done767
  rxcap255_fail768:
    goto rx253_fail760
  rxcap255_done767:
    rx253_cur."!cursor_pass"(rx253_pos, "metachar:sym<rwb>", 'backtrack'=>1)
    .return (rx253_cur)
  rx253_restart759:
    repr_get_attr_obj rx253_cstack, rx253_cur, rx253_curclass, "$!cstack"
  rx253_fail760:
    unless rx253_bstack, rx253_done758
    pop $I19, rx253_bstack
    if_null rx253_cstack, rx253_cstack_done763
    unless rx253_cstack, rx253_cstack_done763
    dec $I19
    set $P11, rx253_cstack[$I19]
  rx253_cstack_done763:
    pop rx253_rep, rx253_bstack
    pop rx253_pos, rx253_bstack
    pop $I19, rx253_bstack
    lt rx253_pos, -1, rx253_done758
    lt rx253_pos, 0, rx253_fail760
    eq $I19, 0, rx253_fail760
    nqp_islist $I20, rx253_cstack
    unless $I20, rx253_jump761
    elements $I18, rx253_bstack
    le $I18, 0, rx253_cut762
    dec $I18
    set $I18, rx253_bstack[$I18]
  rx253_cut762:
    assign rx253_cstack, $I18
  rx253_jump761:
    jump $I19
  rx253_done758:
    rx253_cur."!cursor_fail"()
    .return (rx253_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<from>" :subid("cuid_57_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 202
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx257_start
    .local string rx257_tgt
    .local int rx257_pos
    .local int rx257_off
    .local int rx257_eos
    .local int rx257_rep
    .local pmc rx257_cur
    .local pmc rx257_curclass
    .local pmc rx257_bstack
    .local pmc rx257_cstack
    rx257_start = self."!cursor_start_all"()
    set rx257_cur, rx257_start[0]
    set rx257_tgt, rx257_start[1]
    set rx257_pos, rx257_start[2]
    set rx257_curclass, rx257_start[3]
    set rx257_bstack, rx257_start[4]
    set $I19, rx257_start[5]
    store_lex unicode:"$\x{a2}", rx257_cur
    length rx257_eos, rx257_tgt
    eq $I19, 1, rx257_restart774
    gt rx257_pos, rx257_eos, rx257_fail775
    repr_get_attr_int $I11, self, rx257_curclass, "$!from"
    ne $I11, -1, rxscan258_done781
    goto rxscan258_scan780
  rxscan258_loop779:
    inc rx257_pos
    gt rx257_pos, rx257_eos, rx257_fail775
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!from", rx257_pos
  rxscan258_scan780:
    nqp_rxmark rx257_bstack, rxscan258_loop779, rx257_pos, 0
  rxscan258_done781:
    add $I11, rx257_pos, 2
    gt $I11, rx257_eos, rx257_fail775
    substr $S10, rx257_tgt, rx257_pos, 2
    ne $S10, ucs4:"<(", rx257_fail775
    add rx257_pos, 2
    rx257_cur."!cursor_pass"(rx257_pos, "metachar:sym<from>", 'backtrack'=>1)
    .return (rx257_cur)
  rx257_restart774:
    repr_get_attr_obj rx257_cstack, rx257_cur, rx257_curclass, "$!cstack"
  rx257_fail775:
    unless rx257_bstack, rx257_done773
    pop $I19, rx257_bstack
    if_null rx257_cstack, rx257_cstack_done778
    unless rx257_cstack, rx257_cstack_done778
    dec $I19
    set $P11, rx257_cstack[$I19]
  rx257_cstack_done778:
    pop rx257_rep, rx257_bstack
    pop rx257_pos, rx257_bstack
    pop $I19, rx257_bstack
    lt rx257_pos, -1, rx257_done773
    lt rx257_pos, 0, rx257_fail775
    eq $I19, 0, rx257_fail775
    nqp_islist $I20, rx257_cstack
    unless $I20, rx257_jump776
    elements $I18, rx257_bstack
    le $I18, 0, rx257_cut777
    dec $I18
    set $I18, rx257_bstack[$I18]
  rx257_cut777:
    assign rx257_cstack, $I18
  rx257_jump776:
    jump $I19
  rx257_done773:
    rx257_cur."!cursor_fail"()
    .return (rx257_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<to>" :subid("cuid_58_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 203
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx259_start
    .local string rx259_tgt
    .local int rx259_pos
    .local int rx259_off
    .local int rx259_eos
    .local int rx259_rep
    .local pmc rx259_cur
    .local pmc rx259_curclass
    .local pmc rx259_bstack
    .local pmc rx259_cstack
    rx259_start = self."!cursor_start_all"()
    set rx259_cur, rx259_start[0]
    set rx259_tgt, rx259_start[1]
    set rx259_pos, rx259_start[2]
    set rx259_curclass, rx259_start[3]
    set rx259_bstack, rx259_start[4]
    set $I19, rx259_start[5]
    store_lex unicode:"$\x{a2}", rx259_cur
    length rx259_eos, rx259_tgt
    eq $I19, 1, rx259_restart784
    gt rx259_pos, rx259_eos, rx259_fail785
    repr_get_attr_int $I11, self, rx259_curclass, "$!from"
    ne $I11, -1, rxscan260_done791
    goto rxscan260_scan790
  rxscan260_loop789:
    inc rx259_pos
    gt rx259_pos, rx259_eos, rx259_fail785
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!from", rx259_pos
  rxscan260_scan790:
    nqp_rxmark rx259_bstack, rxscan260_loop789, rx259_pos, 0
  rxscan260_done791:
    add $I11, rx259_pos, 2
    gt $I11, rx259_eos, rx259_fail785
    substr $S10, rx259_tgt, rx259_pos, 2
    ne $S10, ucs4:")>", rx259_fail785
    add rx259_pos, 2
    rx259_cur."!cursor_pass"(rx259_pos, "metachar:sym<to>", 'backtrack'=>1)
    .return (rx259_cur)
  rx259_restart784:
    repr_get_attr_obj rx259_cstack, rx259_cur, rx259_curclass, "$!cstack"
  rx259_fail785:
    unless rx259_bstack, rx259_done783
    pop $I19, rx259_bstack
    if_null rx259_cstack, rx259_cstack_done788
    unless rx259_cstack, rx259_cstack_done788
    dec $I19
    set $P11, rx259_cstack[$I19]
  rx259_cstack_done788:
    pop rx259_rep, rx259_bstack
    pop rx259_pos, rx259_bstack
    pop $I19, rx259_bstack
    lt rx259_pos, -1, rx259_done783
    lt rx259_pos, 0, rx259_fail785
    eq $I19, 0, rx259_fail785
    nqp_islist $I20, rx259_cstack
    unless $I20, rx259_jump786
    elements $I18, rx259_bstack
    le $I18, 0, rx259_cut787
    dec $I18
    set $I18, rx259_bstack[$I18]
  rx259_cut787:
    assign rx259_cstack, $I18
  rx259_jump786:
    jump $I19
  rx259_done783:
    rx259_cur."!cursor_fail"()
    .return (rx259_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<bs>" :subid("cuid_59_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 204
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx261_start
    .local string rx261_tgt
    .local int rx261_pos
    .local int rx261_off
    .local int rx261_eos
    .local int rx261_rep
    .local pmc rx261_cur
    .local pmc rx261_curclass
    .local pmc rx261_bstack
    .local pmc rx261_cstack
    rx261_start = self."!cursor_start_all"()
    set rx261_cur, rx261_start[0]
    set rx261_tgt, rx261_start[1]
    set rx261_pos, rx261_start[2]
    set rx261_curclass, rx261_start[3]
    set rx261_bstack, rx261_start[4]
    set $I19, rx261_start[5]
    store_lex unicode:"$\x{a2}", rx261_cur
    length rx261_eos, rx261_tgt
    eq $I19, 1, rx261_restart794
    gt rx261_pos, rx261_eos, rx261_fail795
    repr_get_attr_int $I11, self, rx261_curclass, "$!from"
    ne $I11, -1, rxscan262_done801
    goto rxscan262_scan800
  rxscan262_loop799:
    inc rx261_pos
    gt rx261_pos, rx261_eos, rx261_fail795
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!from", rx261_pos
  rxscan262_scan800:
    nqp_rxmark rx261_bstack, rxscan262_loop799, rx261_pos, 0
  rxscan262_done801:
    add $I11, rx261_pos, 1
    gt $I11, rx261_eos, rx261_fail795
    substr $S10, rx261_tgt, rx261_pos, 1
    ne $S10, ucs4:"\\", rx261_fail795
    add rx261_pos, 1
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."backslash"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail795
    nqp_rxmark rx261_bstack, rxsubrule263_pass802, -1, 0
  rxsubrule263_pass802:
    rx261_cstack = rx261_cur."!cursor_capture"($P11, "backslash")
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
    rx261_cur."!cursor_pass"(rx261_pos, "metachar:sym<bs>", 'backtrack'=>1)
    .return (rx261_cur)
  rx261_restart794:
    repr_get_attr_obj rx261_cstack, rx261_cur, rx261_curclass, "$!cstack"
  rx261_fail795:
    unless rx261_bstack, rx261_done793
    pop $I19, rx261_bstack
    if_null rx261_cstack, rx261_cstack_done798
    unless rx261_cstack, rx261_cstack_done798
    dec $I19
    set $P11, rx261_cstack[$I19]
  rx261_cstack_done798:
    pop rx261_rep, rx261_bstack
    pop rx261_pos, rx261_bstack
    pop $I19, rx261_bstack
    lt rx261_pos, -1, rx261_done793
    lt rx261_pos, 0, rx261_fail795
    eq $I19, 0, rx261_fail795
    nqp_islist $I20, rx261_cstack
    unless $I20, rx261_jump796
    elements $I18, rx261_bstack
    le $I18, 0, rx261_cut797
    dec $I18
    set $I18, rx261_bstack[$I18]
  rx261_cut797:
    assign rx261_cstack, $I18
  rx261_jump796:
    jump $I19
  rx261_done793:
    rx261_cur."!cursor_fail"()
    .return (rx261_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<mod>" :subid("cuid_60_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 205
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx264_start
    .local string rx264_tgt
    .local int rx264_pos
    .local int rx264_off
    .local int rx264_eos
    .local int rx264_rep
    .local pmc rx264_cur
    .local pmc rx264_curclass
    .local pmc rx264_bstack
    .local pmc rx264_cstack
    rx264_start = self."!cursor_start_all"()
    set rx264_cur, rx264_start[0]
    set rx264_tgt, rx264_start[1]
    set rx264_pos, rx264_start[2]
    set rx264_curclass, rx264_start[3]
    set rx264_bstack, rx264_start[4]
    set $I19, rx264_start[5]
    store_lex unicode:"$\x{a2}", rx264_cur
    length rx264_eos, rx264_tgt
    eq $I19, 1, rx264_restart805
    gt rx264_pos, rx264_eos, rx264_fail806
    repr_get_attr_int $I11, self, rx264_curclass, "$!from"
    ne $I11, -1, rxscan265_done812
    goto rxscan265_scan811
  rxscan265_loop810:
    inc rx264_pos
    gt rx264_pos, rx264_eos, rx264_fail806
    repr_bind_attr_int rx264_cur, rx264_curclass, "$!from", rx264_pos
  rxscan265_scan811:
    nqp_rxmark rx264_bstack, rxscan265_loop810, rx264_pos, 0
  rxscan265_done812:
    repr_bind_attr_int rx264_cur, rx264_curclass, "$!pos", rx264_pos
    $P11 = rx264_cur."mod_internal"()
    repr_get_attr_int $I11, $P11, rx264_curclass, "$!pos"
    lt $I11, 0, rx264_fail806
    nqp_rxmark rx264_bstack, rxsubrule266_pass813, -1, 0
  rxsubrule266_pass813:
    rx264_cstack = rx264_cur."!cursor_capture"($P11, "mod_internal")
    repr_get_attr_int rx264_pos, $P11, rx264_curclass, "$!pos"
    rx264_cur."!cursor_pass"(rx264_pos, "metachar:sym<mod>", 'backtrack'=>1)
    .return (rx264_cur)
  rx264_restart805:
    repr_get_attr_obj rx264_cstack, rx264_cur, rx264_curclass, "$!cstack"
  rx264_fail806:
    unless rx264_bstack, rx264_done804
    pop $I19, rx264_bstack
    if_null rx264_cstack, rx264_cstack_done809
    unless rx264_cstack, rx264_cstack_done809
    dec $I19
    set $P11, rx264_cstack[$I19]
  rx264_cstack_done809:
    pop rx264_rep, rx264_bstack
    pop rx264_pos, rx264_bstack
    pop $I19, rx264_bstack
    lt rx264_pos, -1, rx264_done804
    lt rx264_pos, 0, rx264_fail806
    eq $I19, 0, rx264_fail806
    nqp_islist $I20, rx264_cstack
    unless $I20, rx264_jump807
    elements $I18, rx264_bstack
    le $I18, 0, rx264_cut808
    dec $I18
    set $I18, rx264_bstack[$I18]
  rx264_cut808:
    assign rx264_cstack, $I18
  rx264_jump807:
    jump $I19
  rx264_done804:
    rx264_cur."!cursor_fail"()
    .return (rx264_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<quantifier>" :subid("cuid_61_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 206
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx267_start
    .local string rx267_tgt
    .local int rx267_pos
    .local int rx267_off
    .local int rx267_eos
    .local int rx267_rep
    .local pmc rx267_cur
    .local pmc rx267_curclass
    .local pmc rx267_bstack
    .local pmc rx267_cstack
    rx267_start = self."!cursor_start_all"()
    set rx267_cur, rx267_start[0]
    set rx267_tgt, rx267_start[1]
    set rx267_pos, rx267_start[2]
    set rx267_curclass, rx267_start[3]
    set rx267_bstack, rx267_start[4]
    set $I19, rx267_start[5]
    store_lex unicode:"$\x{a2}", rx267_cur
    length rx267_eos, rx267_tgt
    eq $I19, 1, rx267_restart816
    gt rx267_pos, rx267_eos, rx267_fail817
    repr_get_attr_int $I11, self, rx267_curclass, "$!from"
    ne $I11, -1, rxscan268_done823
    goto rxscan268_scan822
  rxscan268_loop821:
    inc rx267_pos
    gt rx267_pos, rx267_eos, rx267_fail817
    repr_bind_attr_int rx267_cur, rx267_curclass, "$!from", rx267_pos
  rxscan268_scan822:
    nqp_rxmark rx267_bstack, rxscan268_loop821, rx267_pos, 0
  rxscan268_done823:
    repr_bind_attr_int rx267_cur, rx267_curclass, "$!pos", rx267_pos
    $P11 = rx267_cur."quantifier"()
    repr_get_attr_int $I11, $P11, rx267_curclass, "$!pos"
    lt $I11, 0, rx267_fail817
    nqp_rxmark rx267_bstack, rxsubrule269_pass824, -1, 0
  rxsubrule269_pass824:
    rx267_cstack = rx267_cur."!cursor_capture"($P11, "quantifier")
    repr_get_attr_int rx267_pos, $P11, rx267_curclass, "$!pos"
    repr_bind_attr_int rx267_cur, rx267_curclass, "$!pos", rx267_pos
    $P11 = rx267_cur."panic"("Quantifier quantifies nothing")
    repr_get_attr_int $I11, $P11, rx267_curclass, "$!pos"
    lt $I11, 0, rx267_fail817
    repr_get_attr_int rx267_pos, $P11, rx267_curclass, "$!pos"
    rx267_cur."!cursor_pass"(rx267_pos, "metachar:sym<quantifier>", 'backtrack'=>1)
    .return (rx267_cur)
  rx267_restart816:
    repr_get_attr_obj rx267_cstack, rx267_cur, rx267_curclass, "$!cstack"
  rx267_fail817:
    unless rx267_bstack, rx267_done815
    pop $I19, rx267_bstack
    if_null rx267_cstack, rx267_cstack_done820
    unless rx267_cstack, rx267_cstack_done820
    dec $I19
    set $P11, rx267_cstack[$I19]
  rx267_cstack_done820:
    pop rx267_rep, rx267_bstack
    pop rx267_pos, rx267_bstack
    pop $I19, rx267_bstack
    lt rx267_pos, -1, rx267_done815
    lt rx267_pos, 0, rx267_fail817
    eq $I19, 0, rx267_fail817
    nqp_islist $I20, rx267_cstack
    unless $I20, rx267_jump818
    elements $I18, rx267_bstack
    le $I18, 0, rx267_cut819
    dec $I18
    set $I18, rx267_bstack[$I18]
  rx267_cut819:
    assign rx267_cstack, $I18
  rx267_jump818:
    jump $I19
  rx267_done815:
    rx267_cur."!cursor_fail"()
    .return (rx267_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<~>" :subid("cuid_62_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 211
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx271_start
    .local string rx271_tgt
    .local int rx271_pos
    .local int rx271_off
    .local int rx271_eos
    .local int rx271_rep
    .local pmc rx271_cur
    .local pmc rx271_curclass
    .local pmc rx271_bstack
    .local pmc rx271_cstack
    rx271_start = self."!cursor_start_all"()
    set rx271_cur, rx271_start[0]
    set rx271_tgt, rx271_start[1]
    set rx271_pos, rx271_start[2]
    set rx271_curclass, rx271_start[3]
    set rx271_bstack, rx271_start[4]
    set $I19, rx271_start[5]
    store_lex unicode:"$\x{a2}", rx271_cur
    length rx271_eos, rx271_tgt
    eq $I19, 1, rx271_restart828
    gt rx271_pos, rx271_eos, rx271_fail829
    repr_get_attr_int $I11, self, rx271_curclass, "$!from"
    ne $I11, -1, rxscan272_done835
    goto rxscan272_scan834
  rxscan272_loop833:
    inc rx271_pos
    gt rx271_pos, rx271_eos, rx271_fail829
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!from", rx271_pos
  rxscan272_scan834:
    nqp_rxmark rx271_bstack, rxscan272_loop833, rx271_pos, 0
  rxscan272_done835:
    nqp_rxmark rx271_bstack, rxcap273_fail837, rx271_pos, 0
    add $I11, rx271_pos, 1
    gt $I11, rx271_eos, rx271_fail829
    substr $S10, rx271_tgt, rx271_pos, 1
    ne $S10, ucs4:"~", rx271_fail829
    add rx271_pos, 1
    nqp_rxpeek $I19, rx271_bstack, rxcap273_fail837
    inc $I19
    set $I11, rx271_bstack[$I19]
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx271_pos)
    rx271_cstack = rx271_cur."!cursor_capture"($P11, "sym")
    goto rxcap273_done836
  rxcap273_fail837:
    goto rx271_fail829
  rxcap273_done836:
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail829
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail829
    nqp_rxmark rx271_bstack, rxsubrule275_pass839, -1, 0
  rxsubrule275_pass839:
    rx271_cstack = rx271_cur."!cursor_capture"($P11, "GOAL")
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail829
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail829
    nqp_rxmark rx271_bstack, rxsubrule277_pass841, -1, 0
  rxsubrule277_pass841:
    rx271_cstack = rx271_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    rx271_cur."!cursor_pass"(rx271_pos, "metachar:sym<~>", 'backtrack'=>1)
    .return (rx271_cur)
  rx271_restart828:
    repr_get_attr_obj rx271_cstack, rx271_cur, rx271_curclass, "$!cstack"
  rx271_fail829:
    unless rx271_bstack, rx271_done827
    pop $I19, rx271_bstack
    if_null rx271_cstack, rx271_cstack_done832
    unless rx271_cstack, rx271_cstack_done832
    dec $I19
    set $P11, rx271_cstack[$I19]
  rx271_cstack_done832:
    pop rx271_rep, rx271_bstack
    pop rx271_pos, rx271_bstack
    pop $I19, rx271_bstack
    lt rx271_pos, -1, rx271_done827
    lt rx271_pos, 0, rx271_fail829
    eq $I19, 0, rx271_fail829
    nqp_islist $I20, rx271_cstack
    unless $I20, rx271_jump830
    elements $I18, rx271_bstack
    le $I18, 0, rx271_cut831
    dec $I18
    set $I18, rx271_bstack[$I18]
  rx271_cut831:
    assign rx271_cstack, $I18
  rx271_jump830:
    jump $I19
  rx271_done827:
    rx271_cur."!cursor_fail"()
    .return (rx271_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{*}>" :subid("cuid_63_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 217
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx278_start
    .local string rx278_tgt
    .local int rx278_pos
    .local int rx278_off
    .local int rx278_eos
    .local int rx278_rep
    .local pmc rx278_cur
    .local pmc rx278_curclass
    .local pmc rx278_bstack
    .local pmc rx278_cstack
    rx278_start = self."!cursor_start_all"()
    set rx278_cur, rx278_start[0]
    set rx278_tgt, rx278_start[1]
    set rx278_pos, rx278_start[2]
    set rx278_curclass, rx278_start[3]
    set rx278_bstack, rx278_start[4]
    set $I19, rx278_start[5]
    store_lex unicode:"$\x{a2}", rx278_cur
    length rx278_eos, rx278_tgt
    eq $I19, 1, rx278_restart844
    gt rx278_pos, rx278_eos, rx278_fail845
    repr_get_attr_int $I11, self, rx278_curclass, "$!from"
    ne $I11, -1, rxscan279_done851
    goto rxscan279_scan850
  rxscan279_loop849:
    inc rx278_pos
    gt rx278_pos, rx278_eos, rx278_fail845
    repr_bind_attr_int rx278_cur, rx278_curclass, "$!from", rx278_pos
  rxscan279_scan850:
    nqp_rxmark rx278_bstack, rxscan279_loop849, rx278_pos, 0
  rxscan279_done851:
    nqp_rxmark rx278_bstack, rxcap280_fail853, rx278_pos, 0
    add $I11, rx278_pos, 3
    gt $I11, rx278_eos, rx278_fail845
    substr $S10, rx278_tgt, rx278_pos, 3
    ne $S10, ucs4:"{*}", rx278_fail845
    add rx278_pos, 3
    nqp_rxpeek $I19, rx278_bstack, rxcap280_fail853
    inc $I19
    set $I11, rx278_bstack[$I19]
    repr_bind_attr_int rx278_cur, rx278_curclass, "$!pos", rx278_pos
    $P11 = rx278_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx278_pos)
    rx278_cstack = rx278_cur."!cursor_capture"($P11, "sym")
    goto rxcap280_done852
  rxcap280_fail853:
    goto rx278_fail845
  rxcap280_done852:
    nqp_rxmark rx278_bstack, rxquantr281_done855, rx278_pos, 0
  rxquantr281_loop854:
    nqp_rxmark rx278_bstack, rxquantr282_done857, rx278_pos, 0
  rxquantr282_loop856:
    ge rx278_pos, rx278_eos, rx278_fail845
    substr $S11, rx278_tgt, rx278_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx278_fail845
    inc rx278_pos
    nqp_rxpeek $I19, rx278_bstack, rxquantr282_done857
    inc $I19
    inc $I19
    set rx278_rep, rx278_bstack[$I19]
    nqp_rxcommit rx278_bstack, rxquantr282_done857
    inc rx278_rep
    nqp_rxmark rx278_bstack, rxquantr282_done857, rx278_pos, rx278_rep
    goto rxquantr282_loop856
  rxquantr282_done857:
    add $I11, rx278_pos, 3
    gt $I11, rx278_eos, rx278_fail845
    substr $S10, rx278_tgt, rx278_pos, 3
    ne $S10, ucs4:"#= ", rx278_fail845
    add rx278_pos, 3
    nqp_rxmark rx278_bstack, rxquantr283_done859, rx278_pos, 0
  rxquantr283_loop858:
    ge rx278_pos, rx278_eos, rx278_fail845
    substr $S11, rx278_tgt, rx278_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx278_fail845
    inc rx278_pos
    nqp_rxpeek $I19, rx278_bstack, rxquantr283_done859
    inc $I19
    inc $I19
    set rx278_rep, rx278_bstack[$I19]
    nqp_rxcommit rx278_bstack, rxquantr283_done859
    inc rx278_rep
    nqp_rxmark rx278_bstack, rxquantr283_done859, rx278_pos, rx278_rep
    goto rxquantr283_loop858
  rxquantr283_done859:
    nqp_rxmark rx278_bstack, rxcap284_fail861, rx278_pos, 0
    nqp_rxmark rx278_bstack, rxquantr285_done863, -1, 0
  rxquantr285_loop862:
    ge rx278_pos, rx278_eos, rx278_fail845
    is_cclass $I11, .CCLASS_WHITESPACE, rx278_tgt, rx278_pos
    if $I11, rx278_fail845
    add rx278_pos, 1
    nqp_rxpeek $I19, rx278_bstack, rxquantr285_done863
    inc $I19
    inc $I19
    set rx278_rep, rx278_bstack[$I19]
    nqp_rxcommit rx278_bstack, rxquantr285_done863
    inc rx278_rep
    nqp_rxmark rx278_bstack, rxquantr285_done863, rx278_pos, rx278_rep
    goto rxquantr285_loop862
  rxquantr285_done863:
    nqp_rxmark rx278_bstack, rxquantr286_done865, rx278_pos, 0
  rxquantr286_loop864:
    nqp_rxmark rx278_bstack, rxquantr287_done867, -1, 0
  rxquantr287_loop866:
    ge rx278_pos, rx278_eos, rx278_fail845
    substr $S11, rx278_tgt, rx278_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx278_fail845
    inc rx278_pos
    nqp_rxpeek $I19, rx278_bstack, rxquantr287_done867
    inc $I19
    inc $I19
    set rx278_rep, rx278_bstack[$I19]
    nqp_rxcommit rx278_bstack, rxquantr287_done867
    inc rx278_rep
    nqp_rxmark rx278_bstack, rxquantr287_done867, rx278_pos, rx278_rep
    goto rxquantr287_loop866
  rxquantr287_done867:
    nqp_rxmark rx278_bstack, rxquantr288_done869, -1, 0
  rxquantr288_loop868:
    ge rx278_pos, rx278_eos, rx278_fail845
    is_cclass $I11, .CCLASS_WHITESPACE, rx278_tgt, rx278_pos
    if $I11, rx278_fail845
    add rx278_pos, 1
    nqp_rxpeek $I19, rx278_bstack, rxquantr288_done869
    inc $I19
    inc $I19
    set rx278_rep, rx278_bstack[$I19]
    nqp_rxcommit rx278_bstack, rxquantr288_done869
    inc rx278_rep
    nqp_rxmark rx278_bstack, rxquantr288_done869, rx278_pos, rx278_rep
    goto rxquantr288_loop868
  rxquantr288_done869:
    nqp_rxpeek $I19, rx278_bstack, rxquantr286_done865
    inc $I19
    inc $I19
    set rx278_rep, rx278_bstack[$I19]
    nqp_rxcommit rx278_bstack, rxquantr286_done865
    inc rx278_rep
    nqp_rxmark rx278_bstack, rxquantr286_done865, rx278_pos, rx278_rep
    goto rxquantr286_loop864
  rxquantr286_done865:
    nqp_rxpeek $I19, rx278_bstack, rxcap284_fail861
    inc $I19
    set $I11, rx278_bstack[$I19]
    repr_bind_attr_int rx278_cur, rx278_curclass, "$!pos", rx278_pos
    $P11 = rx278_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx278_pos)
    rx278_cstack = rx278_cur."!cursor_capture"($P11, "key")
    goto rxcap284_done860
  rxcap284_fail861:
    goto rx278_fail845
  rxcap284_done860:
    nqp_rxpeek $I19, rx278_bstack, rxquantr281_done855
    inc $I19
    inc $I19
    set rx278_rep, rx278_bstack[$I19]
    nqp_rxcommit rx278_bstack, rxquantr281_done855
    inc rx278_rep
  rxquantr281_done855:
    rx278_cur."!cursor_pass"(rx278_pos, "metachar:sym<{*}>", 'backtrack'=>1)
    .return (rx278_cur)
  rx278_restart844:
    repr_get_attr_obj rx278_cstack, rx278_cur, rx278_curclass, "$!cstack"
  rx278_fail845:
    unless rx278_bstack, rx278_done843
    pop $I19, rx278_bstack
    if_null rx278_cstack, rx278_cstack_done848
    unless rx278_cstack, rx278_cstack_done848
    dec $I19
    set $P11, rx278_cstack[$I19]
  rx278_cstack_done848:
    pop rx278_rep, rx278_bstack
    pop rx278_pos, rx278_bstack
    pop $I19, rx278_bstack
    lt rx278_pos, -1, rx278_done843
    lt rx278_pos, 0, rx278_fail845
    eq $I19, 0, rx278_fail845
    nqp_islist $I20, rx278_cstack
    unless $I20, rx278_jump846
    elements $I18, rx278_bstack
    le $I18, 0, rx278_cut847
    dec $I18
    set $I18, rx278_bstack[$I18]
  rx278_cut847:
    assign rx278_cstack, $I18
  rx278_jump846:
    jump $I19
  rx278_done843:
    rx278_cur."!cursor_fail"()
    .return (rx278_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<assert>" :subid("cuid_64_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 221
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx289_start
    .local string rx289_tgt
    .local int rx289_pos
    .local int rx289_off
    .local int rx289_eos
    .local int rx289_rep
    .local pmc rx289_cur
    .local pmc rx289_curclass
    .local pmc rx289_bstack
    .local pmc rx289_cstack
    rx289_start = self."!cursor_start_all"()
    set rx289_cur, rx289_start[0]
    set rx289_tgt, rx289_start[1]
    set rx289_pos, rx289_start[2]
    set rx289_curclass, rx289_start[3]
    set rx289_bstack, rx289_start[4]
    set $I19, rx289_start[5]
    store_lex unicode:"$\x{a2}", rx289_cur
    length rx289_eos, rx289_tgt
    eq $I19, 1, rx289_restart872
    gt rx289_pos, rx289_eos, rx289_fail873
    repr_get_attr_int $I11, self, rx289_curclass, "$!from"
    ne $I11, -1, rxscan290_done879
    goto rxscan290_scan878
  rxscan290_loop877:
    inc rx289_pos
    gt rx289_pos, rx289_eos, rx289_fail873
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!from", rx289_pos
  rxscan290_scan878:
    nqp_rxmark rx289_bstack, rxscan290_loop877, rx289_pos, 0
  rxscan290_done879:
    add $I11, rx289_pos, 1
    gt $I11, rx289_eos, rx289_fail873
    substr $S10, rx289_tgt, rx289_pos, 1
    ne $S10, ucs4:"<", rx289_fail873
    add rx289_pos, 1
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail873
    nqp_rxmark rx289_bstack, rxsubrule291_pass880, -1, 0
  rxsubrule291_pass880:
    rx289_cstack = rx289_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
  alt292_0882:
    nqp_rxmark rx289_bstack, alt292_1883, rx289_pos, 0
    add $I11, rx289_pos, 1
    gt $I11, rx289_eos, rx289_fail873
    substr $S10, rx289_tgt, rx289_pos, 1
    ne $S10, ucs4:">", rx289_fail873
    add rx289_pos, 1
    goto alt292_end881
  alt292_1883:
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."panic"("regex assertion not terminated by angle bracket")
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail873
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
  alt292_end881:
    rx289_cur."!cursor_pass"(rx289_pos, "metachar:sym<assert>", 'backtrack'=>1)
    .return (rx289_cur)
  rx289_restart872:
    repr_get_attr_obj rx289_cstack, rx289_cur, rx289_curclass, "$!cstack"
  rx289_fail873:
    unless rx289_bstack, rx289_done871
    pop $I19, rx289_bstack
    if_null rx289_cstack, rx289_cstack_done876
    unless rx289_cstack, rx289_cstack_done876
    dec $I19
    set $P11, rx289_cstack[$I19]
  rx289_cstack_done876:
    pop rx289_rep, rx289_bstack
    pop rx289_pos, rx289_bstack
    pop $I19, rx289_bstack
    lt rx289_pos, -1, rx289_done871
    lt rx289_pos, 0, rx289_fail873
    eq $I19, 0, rx289_fail873
    nqp_islist $I20, rx289_cstack
    unless $I20, rx289_jump874
    elements $I18, rx289_bstack
    le $I18, 0, rx289_cut875
    dec $I18
    set $I18, rx289_bstack[$I18]
  rx289_cut875:
    assign rx289_cstack, $I18
  rx289_jump874:
    jump $I19
  rx289_done871:
    rx289_cur."!cursor_fail"()
    .return (rx289_cur) 
.end
.HLL "nqp"
.namespace []
.sub "sigil" :subid("cuid_65_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 226
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx294_start
    .local string rx294_tgt
    .local int rx294_pos
    .local int rx294_off
    .local int rx294_eos
    .local int rx294_rep
    .local pmc rx294_cur
    .local pmc rx294_curclass
    .local pmc rx294_bstack
    .local pmc rx294_cstack
    rx294_start = self."!cursor_start_all"()
    set rx294_cur, rx294_start[0]
    set rx294_tgt, rx294_start[1]
    set rx294_pos, rx294_start[2]
    set rx294_curclass, rx294_start[3]
    set rx294_bstack, rx294_start[4]
    set $I19, rx294_start[5]
    store_lex unicode:"$\x{a2}", rx294_cur
    length rx294_eos, rx294_tgt
    eq $I19, 1, rx294_restart887
    gt rx294_pos, rx294_eos, rx294_fail888
    repr_get_attr_int $I11, self, rx294_curclass, "$!from"
    ne $I11, -1, rxscan295_done894
    goto rxscan295_scan893
  rxscan295_loop892:
    inc rx294_pos
    gt rx294_pos, rx294_eos, rx294_fail888
    repr_bind_attr_int rx294_cur, rx294_curclass, "$!from", rx294_pos
  rxscan295_scan893:
    nqp_rxmark rx294_bstack, rxscan295_loop892, rx294_pos, 0
  rxscan295_done894:
    ge rx294_pos, rx294_eos, rx294_fail888
    substr $S11, rx294_tgt, rx294_pos, 1
    index $I11, ucs4:"$@%&", $S11
    lt $I11, 0, rx294_fail888
    inc rx294_pos
    rx294_cur."!cursor_pass"(rx294_pos, "sigil", 'backtrack'=>1)
    .return (rx294_cur)
  rx294_restart887:
    repr_get_attr_obj rx294_cstack, rx294_cur, rx294_curclass, "$!cstack"
  rx294_fail888:
    unless rx294_bstack, rx294_done886
    pop $I19, rx294_bstack
    if_null rx294_cstack, rx294_cstack_done891
    unless rx294_cstack, rx294_cstack_done891
    dec $I19
    set $P11, rx294_cstack[$I19]
  rx294_cstack_done891:
    pop rx294_rep, rx294_bstack
    pop rx294_pos, rx294_bstack
    pop $I19, rx294_bstack
    lt rx294_pos, -1, rx294_done886
    lt rx294_pos, 0, rx294_fail888
    eq $I19, 0, rx294_fail888
    nqp_islist $I20, rx294_cstack
    unless $I20, rx294_jump889
    elements $I18, rx294_bstack
    le $I18, 0, rx294_cut890
    dec $I18
    set $I18, rx294_bstack[$I18]
  rx294_cut890:
    assign rx294_cstack, $I18
  rx294_jump889:
    jump $I19
  rx294_done886:
    rx294_cur."!cursor_fail"()
    .return (rx294_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<var>" :subid("cuid_66_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 228
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx296_start
    .local string rx296_tgt
    .local int rx296_pos
    .local int rx296_off
    .local int rx296_eos
    .local int rx296_rep
    .local pmc rx296_cur
    .local pmc rx296_curclass
    .local pmc rx296_bstack
    .local pmc rx296_cstack
    rx296_start = self."!cursor_start_all"()
    set rx296_cur, rx296_start[0]
    set rx296_tgt, rx296_start[1]
    set rx296_pos, rx296_start[2]
    set rx296_curclass, rx296_start[3]
    set rx296_bstack, rx296_start[4]
    set $I19, rx296_start[5]
    store_lex unicode:"$\x{a2}", rx296_cur
    length rx296_eos, rx296_tgt
    eq $I19, 1, rx296_restart897
    gt rx296_pos, rx296_eos, rx296_fail898
    repr_get_attr_int $I11, self, rx296_curclass, "$!from"
    ne $I11, -1, rxscan297_done904
    goto rxscan297_scan903
  rxscan297_loop902:
    inc rx296_pos
    gt rx296_pos, rx296_eos, rx296_fail898
    repr_bind_attr_int rx296_cur, rx296_curclass, "$!from", rx296_pos
  rxscan297_scan903:
    nqp_rxmark rx296_bstack, rxscan297_loop902, rx296_pos, 0
  rxscan297_done904:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt298_0906
    nqp_push_label $P11, alt298_1911
    nqp_rxmark rx296_bstack, alt298_end905, -1, 0
    rx296_cur."!alt"(rx296_pos, "alt_nfa__12_1361734135.611", $P11)
    goto rx296_fail898
  alt298_0906:
    add $I11, rx296_pos, 2
    gt $I11, rx296_eos, rx296_fail898
    substr $S10, rx296_tgt, rx296_pos, 2
    ne $S10, ucs4:"$<", rx296_fail898
    add rx296_pos, 2
    nqp_rxmark rx296_bstack, rxcap299_fail908, rx296_pos, 0
    nqp_rxmark rx296_bstack, rxquantr300_done910, -1, 0
  rxquantr300_loop909:
    ge rx296_pos, rx296_eos, rx296_fail898
    substr $S11, rx296_tgt, rx296_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx296_fail898
    inc rx296_pos
    nqp_rxpeek $I19, rx296_bstack, rxquantr300_done910
    inc $I19
    inc $I19
    set rx296_rep, rx296_bstack[$I19]
    nqp_rxcommit rx296_bstack, rxquantr300_done910
    inc rx296_rep
    nqp_rxmark rx296_bstack, rxquantr300_done910, rx296_pos, rx296_rep
    goto rxquantr300_loop909
  rxquantr300_done910:
    nqp_rxpeek $I19, rx296_bstack, rxcap299_fail908
    inc $I19
    set $I11, rx296_bstack[$I19]
    repr_bind_attr_int rx296_cur, rx296_curclass, "$!pos", rx296_pos
    $P11 = rx296_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx296_pos)
    rx296_cstack = rx296_cur."!cursor_capture"($P11, "name")
    goto rxcap299_done907
  rxcap299_fail908:
    goto rx296_fail898
  rxcap299_done907:
    add $I11, rx296_pos, 1
    gt $I11, rx296_eos, rx296_fail898
    substr $S10, rx296_tgt, rx296_pos, 1
    ne $S10, ucs4:">", rx296_fail898
    add rx296_pos, 1
    goto alt298_end905
  alt298_1911:
    add $I11, rx296_pos, 1
    gt $I11, rx296_eos, rx296_fail898
    substr $S10, rx296_tgt, rx296_pos, 1
    ne $S10, ucs4:"$", rx296_fail898
    add rx296_pos, 1
    nqp_rxmark rx296_bstack, rxcap301_fail913, rx296_pos, 0
    nqp_rxmark rx296_bstack, rxquantr302_done915, -1, 0
  rxquantr302_loop914:
    ge rx296_pos, rx296_eos, rx296_fail898
    is_cclass $I11, .CCLASS_NUMERIC, rx296_tgt, rx296_pos
    unless $I11, rx296_fail898
    add rx296_pos, 1
    nqp_rxpeek $I19, rx296_bstack, rxquantr302_done915
    inc $I19
    inc $I19
    set rx296_rep, rx296_bstack[$I19]
    nqp_rxcommit rx296_bstack, rxquantr302_done915
    inc rx296_rep
    nqp_rxmark rx296_bstack, rxquantr302_done915, rx296_pos, rx296_rep
    goto rxquantr302_loop914
  rxquantr302_done915:
    nqp_rxpeek $I19, rx296_bstack, rxcap301_fail913
    inc $I19
    set $I11, rx296_bstack[$I19]
    repr_bind_attr_int rx296_cur, rx296_curclass, "$!pos", rx296_pos
    $P11 = rx296_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx296_pos)
    rx296_cstack = rx296_cur."!cursor_capture"($P11, "pos")
    goto rxcap301_done912
  rxcap301_fail913:
    goto rx296_fail898
  rxcap301_done912:
    goto alt298_end905
  alt298_end905:
    nqp_rxcommit rx296_bstack, alt298_end905
    nqp_rxmark rx296_bstack, rxquantr303_done917, rx296_pos, 0
  rxquantr303_loop916:
    repr_bind_attr_int rx296_cur, rx296_curclass, "$!pos", rx296_pos
    $P11 = rx296_cur."ws"()
    repr_get_attr_int $I11, $P11, rx296_curclass, "$!pos"
    lt $I11, 0, rx296_fail898
    repr_get_attr_int rx296_pos, $P11, rx296_curclass, "$!pos"
    add $I11, rx296_pos, 1
    gt $I11, rx296_eos, rx296_fail898
    substr $S10, rx296_tgt, rx296_pos, 1
    ne $S10, ucs4:"=", rx296_fail898
    add rx296_pos, 1
    repr_bind_attr_int rx296_cur, rx296_curclass, "$!pos", rx296_pos
    $P11 = rx296_cur."ws"()
    repr_get_attr_int $I11, $P11, rx296_curclass, "$!pos"
    lt $I11, 0, rx296_fail898
    repr_get_attr_int rx296_pos, $P11, rx296_curclass, "$!pos"
    repr_bind_attr_int rx296_cur, rx296_curclass, "$!pos", rx296_pos
    $P11 = rx296_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx296_curclass, "$!pos"
    lt $I11, 0, rx296_fail898
    nqp_rxmark rx296_bstack, rxsubrule306_pass920, -1, 0
  rxsubrule306_pass920:
    rx296_cstack = rx296_cur."!cursor_capture"($P11, "quantified_atom")
    repr_get_attr_int rx296_pos, $P11, rx296_curclass, "$!pos"
    nqp_rxpeek $I19, rx296_bstack, rxquantr303_done917
    inc $I19
    inc $I19
    set rx296_rep, rx296_bstack[$I19]
    nqp_rxcommit rx296_bstack, rxquantr303_done917
    inc rx296_rep
  rxquantr303_done917:
    rx296_cur."!cursor_pass"(rx296_pos, "metachar:sym<var>", 'backtrack'=>1)
    .return (rx296_cur)
  rx296_restart897:
    repr_get_attr_obj rx296_cstack, rx296_cur, rx296_curclass, "$!cstack"
  rx296_fail898:
    unless rx296_bstack, rx296_done896
    pop $I19, rx296_bstack
    if_null rx296_cstack, rx296_cstack_done901
    unless rx296_cstack, rx296_cstack_done901
    dec $I19
    set $P11, rx296_cstack[$I19]
  rx296_cstack_done901:
    pop rx296_rep, rx296_bstack
    pop rx296_pos, rx296_bstack
    pop $I19, rx296_bstack
    lt rx296_pos, -1, rx296_done896
    lt rx296_pos, 0, rx296_fail898
    eq $I19, 0, rx296_fail898
    nqp_islist $I20, rx296_cstack
    unless $I20, rx296_jump899
    elements $I18, rx296_bstack
    le $I18, 0, rx296_cut900
    dec $I18
    set $I18, rx296_bstack[$I18]
  rx296_cut900:
    assign rx296_cstack, $I18
  rx296_jump899:
    jump $I19
  rx296_done896:
    rx296_cur."!cursor_fail"()
    .return (rx296_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash" :subid("cuid_67_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 237
    .param pmc self 
    $P5001 = self."!protoregex"("backslash")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<s>" :subid("cuid_68_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 238
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx307_start
    .local string rx307_tgt
    .local int rx307_pos
    .local int rx307_off
    .local int rx307_eos
    .local int rx307_rep
    .local pmc rx307_cur
    .local pmc rx307_curclass
    .local pmc rx307_bstack
    .local pmc rx307_cstack
    rx307_start = self."!cursor_start_all"()
    set rx307_cur, rx307_start[0]
    set rx307_tgt, rx307_start[1]
    set rx307_pos, rx307_start[2]
    set rx307_curclass, rx307_start[3]
    set rx307_bstack, rx307_start[4]
    set $I19, rx307_start[5]
    store_lex unicode:"$\x{a2}", rx307_cur
    length rx307_eos, rx307_tgt
    eq $I19, 1, rx307_restart923
    gt rx307_pos, rx307_eos, rx307_fail924
    repr_get_attr_int $I11, self, rx307_curclass, "$!from"
    ne $I11, -1, rxscan308_done930
    goto rxscan308_scan929
  rxscan308_loop928:
    inc rx307_pos
    gt rx307_pos, rx307_eos, rx307_fail924
    repr_bind_attr_int rx307_cur, rx307_curclass, "$!from", rx307_pos
  rxscan308_scan929:
    nqp_rxmark rx307_bstack, rxscan308_loop928, rx307_pos, 0
  rxscan308_done930:
    nqp_rxmark rx307_bstack, rxcap309_fail932, rx307_pos, 0
    ge rx307_pos, rx307_eos, rx307_fail924
    substr $S11, rx307_tgt, rx307_pos, 1
    index $I11, ucs4:"dDnNsSwW", $S11
    lt $I11, 0, rx307_fail924
    inc rx307_pos
    nqp_rxpeek $I19, rx307_bstack, rxcap309_fail932
    inc $I19
    set $I11, rx307_bstack[$I19]
    repr_bind_attr_int rx307_cur, rx307_curclass, "$!pos", rx307_pos
    $P11 = rx307_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx307_pos)
    rx307_cstack = rx307_cur."!cursor_capture"($P11, "sym")
    goto rxcap309_done931
  rxcap309_fail932:
    goto rx307_fail924
  rxcap309_done931:
    rx307_cur."!cursor_pass"(rx307_pos, "backslash:sym<s>", 'backtrack'=>1)
    .return (rx307_cur)
  rx307_restart923:
    repr_get_attr_obj rx307_cstack, rx307_cur, rx307_curclass, "$!cstack"
  rx307_fail924:
    unless rx307_bstack, rx307_done922
    pop $I19, rx307_bstack
    if_null rx307_cstack, rx307_cstack_done927
    unless rx307_cstack, rx307_cstack_done927
    dec $I19
    set $P11, rx307_cstack[$I19]
  rx307_cstack_done927:
    pop rx307_rep, rx307_bstack
    pop rx307_pos, rx307_bstack
    pop $I19, rx307_bstack
    lt rx307_pos, -1, rx307_done922
    lt rx307_pos, 0, rx307_fail924
    eq $I19, 0, rx307_fail924
    nqp_islist $I20, rx307_cstack
    unless $I20, rx307_jump925
    elements $I18, rx307_bstack
    le $I18, 0, rx307_cut926
    dec $I18
    set $I18, rx307_bstack[$I18]
  rx307_cut926:
    assign rx307_cstack, $I18
  rx307_jump925:
    jump $I19
  rx307_done922:
    rx307_cur."!cursor_fail"()
    .return (rx307_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<b>" :subid("cuid_69_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 239
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx310_start
    .local string rx310_tgt
    .local int rx310_pos
    .local int rx310_off
    .local int rx310_eos
    .local int rx310_rep
    .local pmc rx310_cur
    .local pmc rx310_curclass
    .local pmc rx310_bstack
    .local pmc rx310_cstack
    rx310_start = self."!cursor_start_all"()
    set rx310_cur, rx310_start[0]
    set rx310_tgt, rx310_start[1]
    set rx310_pos, rx310_start[2]
    set rx310_curclass, rx310_start[3]
    set rx310_bstack, rx310_start[4]
    set $I19, rx310_start[5]
    store_lex unicode:"$\x{a2}", rx310_cur
    length rx310_eos, rx310_tgt
    eq $I19, 1, rx310_restart935
    gt rx310_pos, rx310_eos, rx310_fail936
    repr_get_attr_int $I11, self, rx310_curclass, "$!from"
    ne $I11, -1, rxscan311_done942
    goto rxscan311_scan941
  rxscan311_loop940:
    inc rx310_pos
    gt rx310_pos, rx310_eos, rx310_fail936
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!from", rx310_pos
  rxscan311_scan941:
    nqp_rxmark rx310_bstack, rxscan311_loop940, rx310_pos, 0
  rxscan311_done942:
    nqp_rxmark rx310_bstack, rxcap312_fail944, rx310_pos, 0
    ge rx310_pos, rx310_eos, rx310_fail936
    substr $S11, rx310_tgt, rx310_pos, 1
    index $I11, ucs4:"bB", $S11
    lt $I11, 0, rx310_fail936
    inc rx310_pos
    nqp_rxpeek $I19, rx310_bstack, rxcap312_fail944
    inc $I19
    set $I11, rx310_bstack[$I19]
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx310_pos)
    rx310_cstack = rx310_cur."!cursor_capture"($P11, "sym")
    goto rxcap312_done943
  rxcap312_fail944:
    goto rx310_fail936
  rxcap312_done943:
    rx310_cur."!cursor_pass"(rx310_pos, "backslash:sym<b>", 'backtrack'=>1)
    .return (rx310_cur)
  rx310_restart935:
    repr_get_attr_obj rx310_cstack, rx310_cur, rx310_curclass, "$!cstack"
  rx310_fail936:
    unless rx310_bstack, rx310_done934
    pop $I19, rx310_bstack
    if_null rx310_cstack, rx310_cstack_done939
    unless rx310_cstack, rx310_cstack_done939
    dec $I19
    set $P11, rx310_cstack[$I19]
  rx310_cstack_done939:
    pop rx310_rep, rx310_bstack
    pop rx310_pos, rx310_bstack
    pop $I19, rx310_bstack
    lt rx310_pos, -1, rx310_done934
    lt rx310_pos, 0, rx310_fail936
    eq $I19, 0, rx310_fail936
    nqp_islist $I20, rx310_cstack
    unless $I20, rx310_jump937
    elements $I18, rx310_bstack
    le $I18, 0, rx310_cut938
    dec $I18
    set $I18, rx310_bstack[$I18]
  rx310_cut938:
    assign rx310_cstack, $I18
  rx310_jump937:
    jump $I19
  rx310_done934:
    rx310_cur."!cursor_fail"()
    .return (rx310_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<e>" :subid("cuid_70_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 240
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx313_start
    .local string rx313_tgt
    .local int rx313_pos
    .local int rx313_off
    .local int rx313_eos
    .local int rx313_rep
    .local pmc rx313_cur
    .local pmc rx313_curclass
    .local pmc rx313_bstack
    .local pmc rx313_cstack
    rx313_start = self."!cursor_start_all"()
    set rx313_cur, rx313_start[0]
    set rx313_tgt, rx313_start[1]
    set rx313_pos, rx313_start[2]
    set rx313_curclass, rx313_start[3]
    set rx313_bstack, rx313_start[4]
    set $I19, rx313_start[5]
    store_lex unicode:"$\x{a2}", rx313_cur
    length rx313_eos, rx313_tgt
    eq $I19, 1, rx313_restart947
    gt rx313_pos, rx313_eos, rx313_fail948
    repr_get_attr_int $I11, self, rx313_curclass, "$!from"
    ne $I11, -1, rxscan314_done954
    goto rxscan314_scan953
  rxscan314_loop952:
    inc rx313_pos
    gt rx313_pos, rx313_eos, rx313_fail948
    repr_bind_attr_int rx313_cur, rx313_curclass, "$!from", rx313_pos
  rxscan314_scan953:
    nqp_rxmark rx313_bstack, rxscan314_loop952, rx313_pos, 0
  rxscan314_done954:
    nqp_rxmark rx313_bstack, rxcap315_fail956, rx313_pos, 0
    ge rx313_pos, rx313_eos, rx313_fail948
    substr $S11, rx313_tgt, rx313_pos, 1
    index $I11, ucs4:"eE", $S11
    lt $I11, 0, rx313_fail948
    inc rx313_pos
    nqp_rxpeek $I19, rx313_bstack, rxcap315_fail956
    inc $I19
    set $I11, rx313_bstack[$I19]
    repr_bind_attr_int rx313_cur, rx313_curclass, "$!pos", rx313_pos
    $P11 = rx313_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx313_pos)
    rx313_cstack = rx313_cur."!cursor_capture"($P11, "sym")
    goto rxcap315_done955
  rxcap315_fail956:
    goto rx313_fail948
  rxcap315_done955:
    rx313_cur."!cursor_pass"(rx313_pos, "backslash:sym<e>", 'backtrack'=>1)
    .return (rx313_cur)
  rx313_restart947:
    repr_get_attr_obj rx313_cstack, rx313_cur, rx313_curclass, "$!cstack"
  rx313_fail948:
    unless rx313_bstack, rx313_done946
    pop $I19, rx313_bstack
    if_null rx313_cstack, rx313_cstack_done951
    unless rx313_cstack, rx313_cstack_done951
    dec $I19
    set $P11, rx313_cstack[$I19]
  rx313_cstack_done951:
    pop rx313_rep, rx313_bstack
    pop rx313_pos, rx313_bstack
    pop $I19, rx313_bstack
    lt rx313_pos, -1, rx313_done946
    lt rx313_pos, 0, rx313_fail948
    eq $I19, 0, rx313_fail948
    nqp_islist $I20, rx313_cstack
    unless $I20, rx313_jump949
    elements $I18, rx313_bstack
    le $I18, 0, rx313_cut950
    dec $I18
    set $I18, rx313_bstack[$I18]
  rx313_cut950:
    assign rx313_cstack, $I18
  rx313_jump949:
    jump $I19
  rx313_done946:
    rx313_cur."!cursor_fail"()
    .return (rx313_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<f>" :subid("cuid_71_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 241
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx316_start
    .local string rx316_tgt
    .local int rx316_pos
    .local int rx316_off
    .local int rx316_eos
    .local int rx316_rep
    .local pmc rx316_cur
    .local pmc rx316_curclass
    .local pmc rx316_bstack
    .local pmc rx316_cstack
    rx316_start = self."!cursor_start_all"()
    set rx316_cur, rx316_start[0]
    set rx316_tgt, rx316_start[1]
    set rx316_pos, rx316_start[2]
    set rx316_curclass, rx316_start[3]
    set rx316_bstack, rx316_start[4]
    set $I19, rx316_start[5]
    store_lex unicode:"$\x{a2}", rx316_cur
    length rx316_eos, rx316_tgt
    eq $I19, 1, rx316_restart959
    gt rx316_pos, rx316_eos, rx316_fail960
    repr_get_attr_int $I11, self, rx316_curclass, "$!from"
    ne $I11, -1, rxscan317_done966
    goto rxscan317_scan965
  rxscan317_loop964:
    inc rx316_pos
    gt rx316_pos, rx316_eos, rx316_fail960
    repr_bind_attr_int rx316_cur, rx316_curclass, "$!from", rx316_pos
  rxscan317_scan965:
    nqp_rxmark rx316_bstack, rxscan317_loop964, rx316_pos, 0
  rxscan317_done966:
    nqp_rxmark rx316_bstack, rxcap318_fail968, rx316_pos, 0
    ge rx316_pos, rx316_eos, rx316_fail960
    substr $S11, rx316_tgt, rx316_pos, 1
    index $I11, ucs4:"fF", $S11
    lt $I11, 0, rx316_fail960
    inc rx316_pos
    nqp_rxpeek $I19, rx316_bstack, rxcap318_fail968
    inc $I19
    set $I11, rx316_bstack[$I19]
    repr_bind_attr_int rx316_cur, rx316_curclass, "$!pos", rx316_pos
    $P11 = rx316_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx316_pos)
    rx316_cstack = rx316_cur."!cursor_capture"($P11, "sym")
    goto rxcap318_done967
  rxcap318_fail968:
    goto rx316_fail960
  rxcap318_done967:
    rx316_cur."!cursor_pass"(rx316_pos, "backslash:sym<f>", 'backtrack'=>1)
    .return (rx316_cur)
  rx316_restart959:
    repr_get_attr_obj rx316_cstack, rx316_cur, rx316_curclass, "$!cstack"
  rx316_fail960:
    unless rx316_bstack, rx316_done958
    pop $I19, rx316_bstack
    if_null rx316_cstack, rx316_cstack_done963
    unless rx316_cstack, rx316_cstack_done963
    dec $I19
    set $P11, rx316_cstack[$I19]
  rx316_cstack_done963:
    pop rx316_rep, rx316_bstack
    pop rx316_pos, rx316_bstack
    pop $I19, rx316_bstack
    lt rx316_pos, -1, rx316_done958
    lt rx316_pos, 0, rx316_fail960
    eq $I19, 0, rx316_fail960
    nqp_islist $I20, rx316_cstack
    unless $I20, rx316_jump961
    elements $I18, rx316_bstack
    le $I18, 0, rx316_cut962
    dec $I18
    set $I18, rx316_bstack[$I18]
  rx316_cut962:
    assign rx316_cstack, $I18
  rx316_jump961:
    jump $I19
  rx316_done958:
    rx316_cur."!cursor_fail"()
    .return (rx316_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<h>" :subid("cuid_72_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 242
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx319_start
    .local string rx319_tgt
    .local int rx319_pos
    .local int rx319_off
    .local int rx319_eos
    .local int rx319_rep
    .local pmc rx319_cur
    .local pmc rx319_curclass
    .local pmc rx319_bstack
    .local pmc rx319_cstack
    rx319_start = self."!cursor_start_all"()
    set rx319_cur, rx319_start[0]
    set rx319_tgt, rx319_start[1]
    set rx319_pos, rx319_start[2]
    set rx319_curclass, rx319_start[3]
    set rx319_bstack, rx319_start[4]
    set $I19, rx319_start[5]
    store_lex unicode:"$\x{a2}", rx319_cur
    length rx319_eos, rx319_tgt
    eq $I19, 1, rx319_restart971
    gt rx319_pos, rx319_eos, rx319_fail972
    repr_get_attr_int $I11, self, rx319_curclass, "$!from"
    ne $I11, -1, rxscan320_done978
    goto rxscan320_scan977
  rxscan320_loop976:
    inc rx319_pos
    gt rx319_pos, rx319_eos, rx319_fail972
    repr_bind_attr_int rx319_cur, rx319_curclass, "$!from", rx319_pos
  rxscan320_scan977:
    nqp_rxmark rx319_bstack, rxscan320_loop976, rx319_pos, 0
  rxscan320_done978:
    nqp_rxmark rx319_bstack, rxcap321_fail980, rx319_pos, 0
    ge rx319_pos, rx319_eos, rx319_fail972
    substr $S11, rx319_tgt, rx319_pos, 1
    index $I11, ucs4:"hH", $S11
    lt $I11, 0, rx319_fail972
    inc rx319_pos
    nqp_rxpeek $I19, rx319_bstack, rxcap321_fail980
    inc $I19
    set $I11, rx319_bstack[$I19]
    repr_bind_attr_int rx319_cur, rx319_curclass, "$!pos", rx319_pos
    $P11 = rx319_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx319_pos)
    rx319_cstack = rx319_cur."!cursor_capture"($P11, "sym")
    goto rxcap321_done979
  rxcap321_fail980:
    goto rx319_fail972
  rxcap321_done979:
    rx319_cur."!cursor_pass"(rx319_pos, "backslash:sym<h>", 'backtrack'=>1)
    .return (rx319_cur)
  rx319_restart971:
    repr_get_attr_obj rx319_cstack, rx319_cur, rx319_curclass, "$!cstack"
  rx319_fail972:
    unless rx319_bstack, rx319_done970
    pop $I19, rx319_bstack
    if_null rx319_cstack, rx319_cstack_done975
    unless rx319_cstack, rx319_cstack_done975
    dec $I19
    set $P11, rx319_cstack[$I19]
  rx319_cstack_done975:
    pop rx319_rep, rx319_bstack
    pop rx319_pos, rx319_bstack
    pop $I19, rx319_bstack
    lt rx319_pos, -1, rx319_done970
    lt rx319_pos, 0, rx319_fail972
    eq $I19, 0, rx319_fail972
    nqp_islist $I20, rx319_cstack
    unless $I20, rx319_jump973
    elements $I18, rx319_bstack
    le $I18, 0, rx319_cut974
    dec $I18
    set $I18, rx319_bstack[$I18]
  rx319_cut974:
    assign rx319_cstack, $I18
  rx319_jump973:
    jump $I19
  rx319_done970:
    rx319_cur."!cursor_fail"()
    .return (rx319_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<r>" :subid("cuid_73_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 243
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx322_start
    .local string rx322_tgt
    .local int rx322_pos
    .local int rx322_off
    .local int rx322_eos
    .local int rx322_rep
    .local pmc rx322_cur
    .local pmc rx322_curclass
    .local pmc rx322_bstack
    .local pmc rx322_cstack
    rx322_start = self."!cursor_start_all"()
    set rx322_cur, rx322_start[0]
    set rx322_tgt, rx322_start[1]
    set rx322_pos, rx322_start[2]
    set rx322_curclass, rx322_start[3]
    set rx322_bstack, rx322_start[4]
    set $I19, rx322_start[5]
    store_lex unicode:"$\x{a2}", rx322_cur
    length rx322_eos, rx322_tgt
    eq $I19, 1, rx322_restart983
    gt rx322_pos, rx322_eos, rx322_fail984
    repr_get_attr_int $I11, self, rx322_curclass, "$!from"
    ne $I11, -1, rxscan323_done990
    goto rxscan323_scan989
  rxscan323_loop988:
    inc rx322_pos
    gt rx322_pos, rx322_eos, rx322_fail984
    repr_bind_attr_int rx322_cur, rx322_curclass, "$!from", rx322_pos
  rxscan323_scan989:
    nqp_rxmark rx322_bstack, rxscan323_loop988, rx322_pos, 0
  rxscan323_done990:
    nqp_rxmark rx322_bstack, rxcap324_fail992, rx322_pos, 0
    ge rx322_pos, rx322_eos, rx322_fail984
    substr $S11, rx322_tgt, rx322_pos, 1
    index $I11, ucs4:"rR", $S11
    lt $I11, 0, rx322_fail984
    inc rx322_pos
    nqp_rxpeek $I19, rx322_bstack, rxcap324_fail992
    inc $I19
    set $I11, rx322_bstack[$I19]
    repr_bind_attr_int rx322_cur, rx322_curclass, "$!pos", rx322_pos
    $P11 = rx322_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx322_pos)
    rx322_cstack = rx322_cur."!cursor_capture"($P11, "sym")
    goto rxcap324_done991
  rxcap324_fail992:
    goto rx322_fail984
  rxcap324_done991:
    rx322_cur."!cursor_pass"(rx322_pos, "backslash:sym<r>", 'backtrack'=>1)
    .return (rx322_cur)
  rx322_restart983:
    repr_get_attr_obj rx322_cstack, rx322_cur, rx322_curclass, "$!cstack"
  rx322_fail984:
    unless rx322_bstack, rx322_done982
    pop $I19, rx322_bstack
    if_null rx322_cstack, rx322_cstack_done987
    unless rx322_cstack, rx322_cstack_done987
    dec $I19
    set $P11, rx322_cstack[$I19]
  rx322_cstack_done987:
    pop rx322_rep, rx322_bstack
    pop rx322_pos, rx322_bstack
    pop $I19, rx322_bstack
    lt rx322_pos, -1, rx322_done982
    lt rx322_pos, 0, rx322_fail984
    eq $I19, 0, rx322_fail984
    nqp_islist $I20, rx322_cstack
    unless $I20, rx322_jump985
    elements $I18, rx322_bstack
    le $I18, 0, rx322_cut986
    dec $I18
    set $I18, rx322_bstack[$I18]
  rx322_cut986:
    assign rx322_cstack, $I18
  rx322_jump985:
    jump $I19
  rx322_done982:
    rx322_cur."!cursor_fail"()
    .return (rx322_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<t>" :subid("cuid_74_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 244
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx325_start
    .local string rx325_tgt
    .local int rx325_pos
    .local int rx325_off
    .local int rx325_eos
    .local int rx325_rep
    .local pmc rx325_cur
    .local pmc rx325_curclass
    .local pmc rx325_bstack
    .local pmc rx325_cstack
    rx325_start = self."!cursor_start_all"()
    set rx325_cur, rx325_start[0]
    set rx325_tgt, rx325_start[1]
    set rx325_pos, rx325_start[2]
    set rx325_curclass, rx325_start[3]
    set rx325_bstack, rx325_start[4]
    set $I19, rx325_start[5]
    store_lex unicode:"$\x{a2}", rx325_cur
    length rx325_eos, rx325_tgt
    eq $I19, 1, rx325_restart995
    gt rx325_pos, rx325_eos, rx325_fail996
    repr_get_attr_int $I11, self, rx325_curclass, "$!from"
    ne $I11, -1, rxscan326_done1002
    goto rxscan326_scan1001
  rxscan326_loop1000:
    inc rx325_pos
    gt rx325_pos, rx325_eos, rx325_fail996
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!from", rx325_pos
  rxscan326_scan1001:
    nqp_rxmark rx325_bstack, rxscan326_loop1000, rx325_pos, 0
  rxscan326_done1002:
    nqp_rxmark rx325_bstack, rxcap327_fail1004, rx325_pos, 0
    ge rx325_pos, rx325_eos, rx325_fail996
    substr $S11, rx325_tgt, rx325_pos, 1
    index $I11, ucs4:"tT", $S11
    lt $I11, 0, rx325_fail996
    inc rx325_pos
    nqp_rxpeek $I19, rx325_bstack, rxcap327_fail1004
    inc $I19
    set $I11, rx325_bstack[$I19]
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!pos", rx325_pos
    $P11 = rx325_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx325_pos)
    rx325_cstack = rx325_cur."!cursor_capture"($P11, "sym")
    goto rxcap327_done1003
  rxcap327_fail1004:
    goto rx325_fail996
  rxcap327_done1003:
    rx325_cur."!cursor_pass"(rx325_pos, "backslash:sym<t>", 'backtrack'=>1)
    .return (rx325_cur)
  rx325_restart995:
    repr_get_attr_obj rx325_cstack, rx325_cur, rx325_curclass, "$!cstack"
  rx325_fail996:
    unless rx325_bstack, rx325_done994
    pop $I19, rx325_bstack
    if_null rx325_cstack, rx325_cstack_done999
    unless rx325_cstack, rx325_cstack_done999
    dec $I19
    set $P11, rx325_cstack[$I19]
  rx325_cstack_done999:
    pop rx325_rep, rx325_bstack
    pop rx325_pos, rx325_bstack
    pop $I19, rx325_bstack
    lt rx325_pos, -1, rx325_done994
    lt rx325_pos, 0, rx325_fail996
    eq $I19, 0, rx325_fail996
    nqp_islist $I20, rx325_cstack
    unless $I20, rx325_jump997
    elements $I18, rx325_bstack
    le $I18, 0, rx325_cut998
    dec $I18
    set $I18, rx325_bstack[$I18]
  rx325_cut998:
    assign rx325_cstack, $I18
  rx325_jump997:
    jump $I19
  rx325_done994:
    rx325_cur."!cursor_fail"()
    .return (rx325_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<v>" :subid("cuid_75_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 245
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx328_start
    .local string rx328_tgt
    .local int rx328_pos
    .local int rx328_off
    .local int rx328_eos
    .local int rx328_rep
    .local pmc rx328_cur
    .local pmc rx328_curclass
    .local pmc rx328_bstack
    .local pmc rx328_cstack
    rx328_start = self."!cursor_start_all"()
    set rx328_cur, rx328_start[0]
    set rx328_tgt, rx328_start[1]
    set rx328_pos, rx328_start[2]
    set rx328_curclass, rx328_start[3]
    set rx328_bstack, rx328_start[4]
    set $I19, rx328_start[5]
    store_lex unicode:"$\x{a2}", rx328_cur
    length rx328_eos, rx328_tgt
    eq $I19, 1, rx328_restart1007
    gt rx328_pos, rx328_eos, rx328_fail1008
    repr_get_attr_int $I11, self, rx328_curclass, "$!from"
    ne $I11, -1, rxscan329_done1014
    goto rxscan329_scan1013
  rxscan329_loop1012:
    inc rx328_pos
    gt rx328_pos, rx328_eos, rx328_fail1008
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!from", rx328_pos
  rxscan329_scan1013:
    nqp_rxmark rx328_bstack, rxscan329_loop1012, rx328_pos, 0
  rxscan329_done1014:
    nqp_rxmark rx328_bstack, rxcap330_fail1016, rx328_pos, 0
    ge rx328_pos, rx328_eos, rx328_fail1008
    substr $S11, rx328_tgt, rx328_pos, 1
    index $I11, ucs4:"vV", $S11
    lt $I11, 0, rx328_fail1008
    inc rx328_pos
    nqp_rxpeek $I19, rx328_bstack, rxcap330_fail1016
    inc $I19
    set $I11, rx328_bstack[$I19]
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx328_pos)
    rx328_cstack = rx328_cur."!cursor_capture"($P11, "sym")
    goto rxcap330_done1015
  rxcap330_fail1016:
    goto rx328_fail1008
  rxcap330_done1015:
    rx328_cur."!cursor_pass"(rx328_pos, "backslash:sym<v>", 'backtrack'=>1)
    .return (rx328_cur)
  rx328_restart1007:
    repr_get_attr_obj rx328_cstack, rx328_cur, rx328_curclass, "$!cstack"
  rx328_fail1008:
    unless rx328_bstack, rx328_done1006
    pop $I19, rx328_bstack
    if_null rx328_cstack, rx328_cstack_done1011
    unless rx328_cstack, rx328_cstack_done1011
    dec $I19
    set $P11, rx328_cstack[$I19]
  rx328_cstack_done1011:
    pop rx328_rep, rx328_bstack
    pop rx328_pos, rx328_bstack
    pop $I19, rx328_bstack
    lt rx328_pos, -1, rx328_done1006
    lt rx328_pos, 0, rx328_fail1008
    eq $I19, 0, rx328_fail1008
    nqp_islist $I20, rx328_cstack
    unless $I20, rx328_jump1009
    elements $I18, rx328_bstack
    le $I18, 0, rx328_cut1010
    dec $I18
    set $I18, rx328_bstack[$I18]
  rx328_cut1010:
    assign rx328_cstack, $I18
  rx328_jump1009:
    jump $I19
  rx328_done1006:
    rx328_cur."!cursor_fail"()
    .return (rx328_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<o>" :subid("cuid_76_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 246
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx331_start
    .local string rx331_tgt
    .local int rx331_pos
    .local int rx331_off
    .local int rx331_eos
    .local int rx331_rep
    .local pmc rx331_cur
    .local pmc rx331_curclass
    .local pmc rx331_bstack
    .local pmc rx331_cstack
    rx331_start = self."!cursor_start_all"()
    set rx331_cur, rx331_start[0]
    set rx331_tgt, rx331_start[1]
    set rx331_pos, rx331_start[2]
    set rx331_curclass, rx331_start[3]
    set rx331_bstack, rx331_start[4]
    set $I19, rx331_start[5]
    store_lex unicode:"$\x{a2}", rx331_cur
    length rx331_eos, rx331_tgt
    eq $I19, 1, rx331_restart1019
    gt rx331_pos, rx331_eos, rx331_fail1020
    repr_get_attr_int $I11, self, rx331_curclass, "$!from"
    ne $I11, -1, rxscan332_done1026
    goto rxscan332_scan1025
  rxscan332_loop1024:
    inc rx331_pos
    gt rx331_pos, rx331_eos, rx331_fail1020
    repr_bind_attr_int rx331_cur, rx331_curclass, "$!from", rx331_pos
  rxscan332_scan1025:
    nqp_rxmark rx331_bstack, rxscan332_loop1024, rx331_pos, 0
  rxscan332_done1026:
    nqp_rxmark rx331_bstack, rxcap333_fail1028, rx331_pos, 0
    ge rx331_pos, rx331_eos, rx331_fail1020
    substr $S11, rx331_tgt, rx331_pos, 1
    index $I11, ucs4:"oO", $S11
    lt $I11, 0, rx331_fail1020
    inc rx331_pos
    nqp_rxpeek $I19, rx331_bstack, rxcap333_fail1028
    inc $I19
    set $I11, rx331_bstack[$I19]
    repr_bind_attr_int rx331_cur, rx331_curclass, "$!pos", rx331_pos
    $P11 = rx331_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx331_pos)
    rx331_cstack = rx331_cur."!cursor_capture"($P11, "sym")
    goto rxcap333_done1027
  rxcap333_fail1028:
    goto rx331_fail1020
  rxcap333_done1027:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt334_01030
    nqp_push_label $P11, alt334_11032
    nqp_rxmark rx331_bstack, alt334_end1029, -1, 0
    rx331_cur."!alt"(rx331_pos, "alt_nfa__13_1361734135.673", $P11)
    goto rx331_fail1020
  alt334_01030:
    repr_bind_attr_int rx331_cur, rx331_curclass, "$!pos", rx331_pos
    $P11 = rx331_cur."octint"()
    repr_get_attr_int $I11, $P11, rx331_curclass, "$!pos"
    lt $I11, 0, rx331_fail1020
    nqp_rxmark rx331_bstack, rxsubrule335_pass1031, -1, 0
  rxsubrule335_pass1031:
    rx331_cstack = rx331_cur."!cursor_capture"($P11, "octint")
    repr_get_attr_int rx331_pos, $P11, rx331_curclass, "$!pos"
    goto alt334_end1029
  alt334_11032:
    add $I11, rx331_pos, 1
    gt $I11, rx331_eos, rx331_fail1020
    substr $S10, rx331_tgt, rx331_pos, 1
    ne $S10, ucs4:"[", rx331_fail1020
    add rx331_pos, 1
    repr_bind_attr_int rx331_cur, rx331_curclass, "$!pos", rx331_pos
    $P11 = rx331_cur."octints"()
    repr_get_attr_int $I11, $P11, rx331_curclass, "$!pos"
    lt $I11, 0, rx331_fail1020
    nqp_rxmark rx331_bstack, rxsubrule336_pass1033, -1, 0
  rxsubrule336_pass1033:
    rx331_cstack = rx331_cur."!cursor_capture"($P11, "octints")
    repr_get_attr_int rx331_pos, $P11, rx331_curclass, "$!pos"
    add $I11, rx331_pos, 1
    gt $I11, rx331_eos, rx331_fail1020
    substr $S10, rx331_tgt, rx331_pos, 1
    ne $S10, ucs4:"]", rx331_fail1020
    add rx331_pos, 1
    goto alt334_end1029
  alt334_end1029:
    nqp_rxcommit rx331_bstack, alt334_end1029
    rx331_cur."!cursor_pass"(rx331_pos, "backslash:sym<o>", 'backtrack'=>1)
    .return (rx331_cur)
  rx331_restart1019:
    repr_get_attr_obj rx331_cstack, rx331_cur, rx331_curclass, "$!cstack"
  rx331_fail1020:
    unless rx331_bstack, rx331_done1018
    pop $I19, rx331_bstack
    if_null rx331_cstack, rx331_cstack_done1023
    unless rx331_cstack, rx331_cstack_done1023
    dec $I19
    set $P11, rx331_cstack[$I19]
  rx331_cstack_done1023:
    pop rx331_rep, rx331_bstack
    pop rx331_pos, rx331_bstack
    pop $I19, rx331_bstack
    lt rx331_pos, -1, rx331_done1018
    lt rx331_pos, 0, rx331_fail1020
    eq $I19, 0, rx331_fail1020
    nqp_islist $I20, rx331_cstack
    unless $I20, rx331_jump1021
    elements $I18, rx331_bstack
    le $I18, 0, rx331_cut1022
    dec $I18
    set $I18, rx331_bstack[$I18]
  rx331_cut1022:
    assign rx331_cstack, $I18
  rx331_jump1021:
    jump $I19
  rx331_done1018:
    rx331_cur."!cursor_fail"()
    .return (rx331_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<x>" :subid("cuid_77_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 247
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx337_start
    .local string rx337_tgt
    .local int rx337_pos
    .local int rx337_off
    .local int rx337_eos
    .local int rx337_rep
    .local pmc rx337_cur
    .local pmc rx337_curclass
    .local pmc rx337_bstack
    .local pmc rx337_cstack
    rx337_start = self."!cursor_start_all"()
    set rx337_cur, rx337_start[0]
    set rx337_tgt, rx337_start[1]
    set rx337_pos, rx337_start[2]
    set rx337_curclass, rx337_start[3]
    set rx337_bstack, rx337_start[4]
    set $I19, rx337_start[5]
    store_lex unicode:"$\x{a2}", rx337_cur
    length rx337_eos, rx337_tgt
    eq $I19, 1, rx337_restart1036
    gt rx337_pos, rx337_eos, rx337_fail1037
    repr_get_attr_int $I11, self, rx337_curclass, "$!from"
    ne $I11, -1, rxscan338_done1043
    goto rxscan338_scan1042
  rxscan338_loop1041:
    inc rx337_pos
    gt rx337_pos, rx337_eos, rx337_fail1037
    repr_bind_attr_int rx337_cur, rx337_curclass, "$!from", rx337_pos
  rxscan338_scan1042:
    nqp_rxmark rx337_bstack, rxscan338_loop1041, rx337_pos, 0
  rxscan338_done1043:
    nqp_rxmark rx337_bstack, rxcap339_fail1045, rx337_pos, 0
    ge rx337_pos, rx337_eos, rx337_fail1037
    substr $S11, rx337_tgt, rx337_pos, 1
    index $I11, ucs4:"xX", $S11
    lt $I11, 0, rx337_fail1037
    inc rx337_pos
    nqp_rxpeek $I19, rx337_bstack, rxcap339_fail1045
    inc $I19
    set $I11, rx337_bstack[$I19]
    repr_bind_attr_int rx337_cur, rx337_curclass, "$!pos", rx337_pos
    $P11 = rx337_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx337_pos)
    rx337_cstack = rx337_cur."!cursor_capture"($P11, "sym")
    goto rxcap339_done1044
  rxcap339_fail1045:
    goto rx337_fail1037
  rxcap339_done1044:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt340_01047
    nqp_push_label $P11, alt340_11049
    nqp_rxmark rx337_bstack, alt340_end1046, -1, 0
    rx337_cur."!alt"(rx337_pos, "alt_nfa__14_1361734135.685", $P11)
    goto rx337_fail1037
  alt340_01047:
    repr_bind_attr_int rx337_cur, rx337_curclass, "$!pos", rx337_pos
    $P11 = rx337_cur."hexint"()
    repr_get_attr_int $I11, $P11, rx337_curclass, "$!pos"
    lt $I11, 0, rx337_fail1037
    nqp_rxmark rx337_bstack, rxsubrule341_pass1048, -1, 0
  rxsubrule341_pass1048:
    rx337_cstack = rx337_cur."!cursor_capture"($P11, "hexint")
    repr_get_attr_int rx337_pos, $P11, rx337_curclass, "$!pos"
    goto alt340_end1046
  alt340_11049:
    add $I11, rx337_pos, 1
    gt $I11, rx337_eos, rx337_fail1037
    substr $S10, rx337_tgt, rx337_pos, 1
    ne $S10, ucs4:"[", rx337_fail1037
    add rx337_pos, 1
    repr_bind_attr_int rx337_cur, rx337_curclass, "$!pos", rx337_pos
    $P11 = rx337_cur."hexints"()
    repr_get_attr_int $I11, $P11, rx337_curclass, "$!pos"
    lt $I11, 0, rx337_fail1037
    nqp_rxmark rx337_bstack, rxsubrule342_pass1050, -1, 0
  rxsubrule342_pass1050:
    rx337_cstack = rx337_cur."!cursor_capture"($P11, "hexints")
    repr_get_attr_int rx337_pos, $P11, rx337_curclass, "$!pos"
    add $I11, rx337_pos, 1
    gt $I11, rx337_eos, rx337_fail1037
    substr $S10, rx337_tgt, rx337_pos, 1
    ne $S10, ucs4:"]", rx337_fail1037
    add rx337_pos, 1
    goto alt340_end1046
  alt340_end1046:
    nqp_rxcommit rx337_bstack, alt340_end1046
    rx337_cur."!cursor_pass"(rx337_pos, "backslash:sym<x>", 'backtrack'=>1)
    .return (rx337_cur)
  rx337_restart1036:
    repr_get_attr_obj rx337_cstack, rx337_cur, rx337_curclass, "$!cstack"
  rx337_fail1037:
    unless rx337_bstack, rx337_done1035
    pop $I19, rx337_bstack
    if_null rx337_cstack, rx337_cstack_done1040
    unless rx337_cstack, rx337_cstack_done1040
    dec $I19
    set $P11, rx337_cstack[$I19]
  rx337_cstack_done1040:
    pop rx337_rep, rx337_bstack
    pop rx337_pos, rx337_bstack
    pop $I19, rx337_bstack
    lt rx337_pos, -1, rx337_done1035
    lt rx337_pos, 0, rx337_fail1037
    eq $I19, 0, rx337_fail1037
    nqp_islist $I20, rx337_cstack
    unless $I20, rx337_jump1038
    elements $I18, rx337_bstack
    le $I18, 0, rx337_cut1039
    dec $I18
    set $I18, rx337_bstack[$I18]
  rx337_cut1039:
    assign rx337_cstack, $I18
  rx337_jump1038:
    jump $I19
  rx337_done1035:
    rx337_cur."!cursor_fail"()
    .return (rx337_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<c>" :subid("cuid_78_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 248
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx343_start
    .local string rx343_tgt
    .local int rx343_pos
    .local int rx343_off
    .local int rx343_eos
    .local int rx343_rep
    .local pmc rx343_cur
    .local pmc rx343_curclass
    .local pmc rx343_bstack
    .local pmc rx343_cstack
    rx343_start = self."!cursor_start_all"()
    set rx343_cur, rx343_start[0]
    set rx343_tgt, rx343_start[1]
    set rx343_pos, rx343_start[2]
    set rx343_curclass, rx343_start[3]
    set rx343_bstack, rx343_start[4]
    set $I19, rx343_start[5]
    store_lex unicode:"$\x{a2}", rx343_cur
    length rx343_eos, rx343_tgt
    eq $I19, 1, rx343_restart1053
    gt rx343_pos, rx343_eos, rx343_fail1054
    repr_get_attr_int $I11, self, rx343_curclass, "$!from"
    ne $I11, -1, rxscan344_done1060
    goto rxscan344_scan1059
  rxscan344_loop1058:
    inc rx343_pos
    gt rx343_pos, rx343_eos, rx343_fail1054
    repr_bind_attr_int rx343_cur, rx343_curclass, "$!from", rx343_pos
  rxscan344_scan1059:
    nqp_rxmark rx343_bstack, rxscan344_loop1058, rx343_pos, 0
  rxscan344_done1060:
    nqp_rxmark rx343_bstack, rxcap345_fail1062, rx343_pos, 0
    ge rx343_pos, rx343_eos, rx343_fail1054
    substr $S11, rx343_tgt, rx343_pos, 1
    index $I11, ucs4:"cC", $S11
    lt $I11, 0, rx343_fail1054
    inc rx343_pos
    nqp_rxpeek $I19, rx343_bstack, rxcap345_fail1062
    inc $I19
    set $I11, rx343_bstack[$I19]
    repr_bind_attr_int rx343_cur, rx343_curclass, "$!pos", rx343_pos
    $P11 = rx343_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx343_pos)
    rx343_cstack = rx343_cur."!cursor_capture"($P11, "sym")
    goto rxcap345_done1061
  rxcap345_fail1062:
    goto rx343_fail1054
  rxcap345_done1061:
    repr_bind_attr_int rx343_cur, rx343_curclass, "$!pos", rx343_pos
    $P11 = rx343_cur."charspec"()
    repr_get_attr_int $I11, $P11, rx343_curclass, "$!pos"
    lt $I11, 0, rx343_fail1054
    nqp_rxmark rx343_bstack, rxsubrule346_pass1063, -1, 0
  rxsubrule346_pass1063:
    rx343_cstack = rx343_cur."!cursor_capture"($P11, "charspec")
    repr_get_attr_int rx343_pos, $P11, rx343_curclass, "$!pos"
    rx343_cur."!cursor_pass"(rx343_pos, "backslash:sym<c>", 'backtrack'=>1)
    .return (rx343_cur)
  rx343_restart1053:
    repr_get_attr_obj rx343_cstack, rx343_cur, rx343_curclass, "$!cstack"
  rx343_fail1054:
    unless rx343_bstack, rx343_done1052
    pop $I19, rx343_bstack
    if_null rx343_cstack, rx343_cstack_done1057
    unless rx343_cstack, rx343_cstack_done1057
    dec $I19
    set $P11, rx343_cstack[$I19]
  rx343_cstack_done1057:
    pop rx343_rep, rx343_bstack
    pop rx343_pos, rx343_bstack
    pop $I19, rx343_bstack
    lt rx343_pos, -1, rx343_done1052
    lt rx343_pos, 0, rx343_fail1054
    eq $I19, 0, rx343_fail1054
    nqp_islist $I20, rx343_cstack
    unless $I20, rx343_jump1055
    elements $I18, rx343_bstack
    le $I18, 0, rx343_cut1056
    dec $I18
    set $I18, rx343_bstack[$I18]
  rx343_cut1056:
    assign rx343_cstack, $I18
  rx343_jump1055:
    jump $I19
  rx343_done1052:
    rx343_cur."!cursor_fail"()
    .return (rx343_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<A>" :subid("cuid_79_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 249
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx347_start
    .local string rx347_tgt
    .local int rx347_pos
    .local int rx347_off
    .local int rx347_eos
    .local int rx347_rep
    .local pmc rx347_cur
    .local pmc rx347_curclass
    .local pmc rx347_bstack
    .local pmc rx347_cstack
    rx347_start = self."!cursor_start_all"()
    set rx347_cur, rx347_start[0]
    set rx347_tgt, rx347_start[1]
    set rx347_pos, rx347_start[2]
    set rx347_curclass, rx347_start[3]
    set rx347_bstack, rx347_start[4]
    set $I19, rx347_start[5]
    store_lex unicode:"$\x{a2}", rx347_cur
    length rx347_eos, rx347_tgt
    eq $I19, 1, rx347_restart1066
    gt rx347_pos, rx347_eos, rx347_fail1067
    repr_get_attr_int $I11, self, rx347_curclass, "$!from"
    ne $I11, -1, rxscan348_done1073
    goto rxscan348_scan1072
  rxscan348_loop1071:
    inc rx347_pos
    gt rx347_pos, rx347_eos, rx347_fail1067
    repr_bind_attr_int rx347_cur, rx347_curclass, "$!from", rx347_pos
  rxscan348_scan1072:
    nqp_rxmark rx347_bstack, rxscan348_loop1071, rx347_pos, 0
  rxscan348_done1073:
    add $I11, rx347_pos, 1
    gt $I11, rx347_eos, rx347_fail1067
    substr $S10, rx347_tgt, rx347_pos, 1
    ne $S10, ucs4:"A", rx347_fail1067
    add rx347_pos, 1
    repr_bind_attr_int rx347_cur, rx347_curclass, "$!pos", rx347_pos
    $P11 = rx347_cur."obs"("\\\\A as beginning-of-string matcher", "^")
    repr_get_attr_int $I11, $P11, rx347_curclass, "$!pos"
    lt $I11, 0, rx347_fail1067
    repr_get_attr_int rx347_pos, $P11, rx347_curclass, "$!pos"
    rx347_cur."!cursor_pass"(rx347_pos, "backslash:sym<A>", 'backtrack'=>1)
    .return (rx347_cur)
  rx347_restart1066:
    repr_get_attr_obj rx347_cstack, rx347_cur, rx347_curclass, "$!cstack"
  rx347_fail1067:
    unless rx347_bstack, rx347_done1065
    pop $I19, rx347_bstack
    if_null rx347_cstack, rx347_cstack_done1070
    unless rx347_cstack, rx347_cstack_done1070
    dec $I19
    set $P11, rx347_cstack[$I19]
  rx347_cstack_done1070:
    pop rx347_rep, rx347_bstack
    pop rx347_pos, rx347_bstack
    pop $I19, rx347_bstack
    lt rx347_pos, -1, rx347_done1065
    lt rx347_pos, 0, rx347_fail1067
    eq $I19, 0, rx347_fail1067
    nqp_islist $I20, rx347_cstack
    unless $I20, rx347_jump1068
    elements $I18, rx347_bstack
    le $I18, 0, rx347_cut1069
    dec $I18
    set $I18, rx347_bstack[$I18]
  rx347_cut1069:
    assign rx347_cstack, $I18
  rx347_jump1068:
    jump $I19
  rx347_done1065:
    rx347_cur."!cursor_fail"()
    .return (rx347_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<z>" :subid("cuid_80_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 250
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx350_start
    .local string rx350_tgt
    .local int rx350_pos
    .local int rx350_off
    .local int rx350_eos
    .local int rx350_rep
    .local pmc rx350_cur
    .local pmc rx350_curclass
    .local pmc rx350_bstack
    .local pmc rx350_cstack
    rx350_start = self."!cursor_start_all"()
    set rx350_cur, rx350_start[0]
    set rx350_tgt, rx350_start[1]
    set rx350_pos, rx350_start[2]
    set rx350_curclass, rx350_start[3]
    set rx350_bstack, rx350_start[4]
    set $I19, rx350_start[5]
    store_lex unicode:"$\x{a2}", rx350_cur
    length rx350_eos, rx350_tgt
    eq $I19, 1, rx350_restart1077
    gt rx350_pos, rx350_eos, rx350_fail1078
    repr_get_attr_int $I11, self, rx350_curclass, "$!from"
    ne $I11, -1, rxscan351_done1084
    goto rxscan351_scan1083
  rxscan351_loop1082:
    inc rx350_pos
    gt rx350_pos, rx350_eos, rx350_fail1078
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!from", rx350_pos
  rxscan351_scan1083:
    nqp_rxmark rx350_bstack, rxscan351_loop1082, rx350_pos, 0
  rxscan351_done1084:
    add $I11, rx350_pos, 1
    gt $I11, rx350_eos, rx350_fail1078
    substr $S10, rx350_tgt, rx350_pos, 1
    ne $S10, ucs4:"z", rx350_fail1078
    add rx350_pos, 1
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!pos", rx350_pos
    $P11 = rx350_cur."obs"("\\\\z as end-of-string matcher", "$")
    repr_get_attr_int $I11, $P11, rx350_curclass, "$!pos"
    lt $I11, 0, rx350_fail1078
    repr_get_attr_int rx350_pos, $P11, rx350_curclass, "$!pos"
    rx350_cur."!cursor_pass"(rx350_pos, "backslash:sym<z>", 'backtrack'=>1)
    .return (rx350_cur)
  rx350_restart1077:
    repr_get_attr_obj rx350_cstack, rx350_cur, rx350_curclass, "$!cstack"
  rx350_fail1078:
    unless rx350_bstack, rx350_done1076
    pop $I19, rx350_bstack
    if_null rx350_cstack, rx350_cstack_done1081
    unless rx350_cstack, rx350_cstack_done1081
    dec $I19
    set $P11, rx350_cstack[$I19]
  rx350_cstack_done1081:
    pop rx350_rep, rx350_bstack
    pop rx350_pos, rx350_bstack
    pop $I19, rx350_bstack
    lt rx350_pos, -1, rx350_done1076
    lt rx350_pos, 0, rx350_fail1078
    eq $I19, 0, rx350_fail1078
    nqp_islist $I20, rx350_cstack
    unless $I20, rx350_jump1079
    elements $I18, rx350_bstack
    le $I18, 0, rx350_cut1080
    dec $I18
    set $I18, rx350_bstack[$I18]
  rx350_cut1080:
    assign rx350_cstack, $I18
  rx350_jump1079:
    jump $I19
  rx350_done1076:
    rx350_cur."!cursor_fail"()
    .return (rx350_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<Z>" :subid("cuid_81_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 251
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx353_start
    .local string rx353_tgt
    .local int rx353_pos
    .local int rx353_off
    .local int rx353_eos
    .local int rx353_rep
    .local pmc rx353_cur
    .local pmc rx353_curclass
    .local pmc rx353_bstack
    .local pmc rx353_cstack
    rx353_start = self."!cursor_start_all"()
    set rx353_cur, rx353_start[0]
    set rx353_tgt, rx353_start[1]
    set rx353_pos, rx353_start[2]
    set rx353_curclass, rx353_start[3]
    set rx353_bstack, rx353_start[4]
    set $I19, rx353_start[5]
    store_lex unicode:"$\x{a2}", rx353_cur
    length rx353_eos, rx353_tgt
    eq $I19, 1, rx353_restart1088
    gt rx353_pos, rx353_eos, rx353_fail1089
    repr_get_attr_int $I11, self, rx353_curclass, "$!from"
    ne $I11, -1, rxscan354_done1095
    goto rxscan354_scan1094
  rxscan354_loop1093:
    inc rx353_pos
    gt rx353_pos, rx353_eos, rx353_fail1089
    repr_bind_attr_int rx353_cur, rx353_curclass, "$!from", rx353_pos
  rxscan354_scan1094:
    nqp_rxmark rx353_bstack, rxscan354_loop1093, rx353_pos, 0
  rxscan354_done1095:
    add $I11, rx353_pos, 1
    gt $I11, rx353_eos, rx353_fail1089
    substr $S10, rx353_tgt, rx353_pos, 1
    ne $S10, ucs4:"Z", rx353_fail1089
    add rx353_pos, 1
    repr_bind_attr_int rx353_cur, rx353_curclass, "$!pos", rx353_pos
    $P11 = rx353_cur."obs"("\\\\Z as end-of-string matcher", "\\\\n?$")
    repr_get_attr_int $I11, $P11, rx353_curclass, "$!pos"
    lt $I11, 0, rx353_fail1089
    repr_get_attr_int rx353_pos, $P11, rx353_curclass, "$!pos"
    rx353_cur."!cursor_pass"(rx353_pos, "backslash:sym<Z>", 'backtrack'=>1)
    .return (rx353_cur)
  rx353_restart1088:
    repr_get_attr_obj rx353_cstack, rx353_cur, rx353_curclass, "$!cstack"
  rx353_fail1089:
    unless rx353_bstack, rx353_done1087
    pop $I19, rx353_bstack
    if_null rx353_cstack, rx353_cstack_done1092
    unless rx353_cstack, rx353_cstack_done1092
    dec $I19
    set $P11, rx353_cstack[$I19]
  rx353_cstack_done1092:
    pop rx353_rep, rx353_bstack
    pop rx353_pos, rx353_bstack
    pop $I19, rx353_bstack
    lt rx353_pos, -1, rx353_done1087
    lt rx353_pos, 0, rx353_fail1089
    eq $I19, 0, rx353_fail1089
    nqp_islist $I20, rx353_cstack
    unless $I20, rx353_jump1090
    elements $I18, rx353_bstack
    le $I18, 0, rx353_cut1091
    dec $I18
    set $I18, rx353_bstack[$I18]
  rx353_cut1091:
    assign rx353_cstack, $I18
  rx353_jump1090:
    jump $I19
  rx353_done1087:
    rx353_cur."!cursor_fail"()
    .return (rx353_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<Q>" :subid("cuid_82_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 252
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx356_start
    .local string rx356_tgt
    .local int rx356_pos
    .local int rx356_off
    .local int rx356_eos
    .local int rx356_rep
    .local pmc rx356_cur
    .local pmc rx356_curclass
    .local pmc rx356_bstack
    .local pmc rx356_cstack
    rx356_start = self."!cursor_start_all"()
    set rx356_cur, rx356_start[0]
    set rx356_tgt, rx356_start[1]
    set rx356_pos, rx356_start[2]
    set rx356_curclass, rx356_start[3]
    set rx356_bstack, rx356_start[4]
    set $I19, rx356_start[5]
    store_lex unicode:"$\x{a2}", rx356_cur
    length rx356_eos, rx356_tgt
    eq $I19, 1, rx356_restart1099
    gt rx356_pos, rx356_eos, rx356_fail1100
    repr_get_attr_int $I11, self, rx356_curclass, "$!from"
    ne $I11, -1, rxscan357_done1106
    goto rxscan357_scan1105
  rxscan357_loop1104:
    inc rx356_pos
    gt rx356_pos, rx356_eos, rx356_fail1100
    repr_bind_attr_int rx356_cur, rx356_curclass, "$!from", rx356_pos
  rxscan357_scan1105:
    nqp_rxmark rx356_bstack, rxscan357_loop1104, rx356_pos, 0
  rxscan357_done1106:
    add $I11, rx356_pos, 1
    gt $I11, rx356_eos, rx356_fail1100
    substr $S10, rx356_tgt, rx356_pos, 1
    ne $S10, ucs4:"Q", rx356_fail1100
    add rx356_pos, 1
    repr_bind_attr_int rx356_cur, rx356_curclass, "$!pos", rx356_pos
    $P11 = rx356_cur."obs"("\\\\Q as quotemeta", "quotes or literal variable match")
    repr_get_attr_int $I11, $P11, rx356_curclass, "$!pos"
    lt $I11, 0, rx356_fail1100
    repr_get_attr_int rx356_pos, $P11, rx356_curclass, "$!pos"
    rx356_cur."!cursor_pass"(rx356_pos, "backslash:sym<Q>", 'backtrack'=>1)
    .return (rx356_cur)
  rx356_restart1099:
    repr_get_attr_obj rx356_cstack, rx356_cur, rx356_curclass, "$!cstack"
  rx356_fail1100:
    unless rx356_bstack, rx356_done1098
    pop $I19, rx356_bstack
    if_null rx356_cstack, rx356_cstack_done1103
    unless rx356_cstack, rx356_cstack_done1103
    dec $I19
    set $P11, rx356_cstack[$I19]
  rx356_cstack_done1103:
    pop rx356_rep, rx356_bstack
    pop rx356_pos, rx356_bstack
    pop $I19, rx356_bstack
    lt rx356_pos, -1, rx356_done1098
    lt rx356_pos, 0, rx356_fail1100
    eq $I19, 0, rx356_fail1100
    nqp_islist $I20, rx356_cstack
    unless $I20, rx356_jump1101
    elements $I18, rx356_bstack
    le $I18, 0, rx356_cut1102
    dec $I18
    set $I18, rx356_bstack[$I18]
  rx356_cut1102:
    assign rx356_cstack, $I18
  rx356_jump1101:
    jump $I19
  rx356_done1098:
    rx356_cur."!cursor_fail"()
    .return (rx356_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<unrec>" :subid("cuid_83_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 253
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_191_1361734134.987' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_84_1361734134.987' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_192_1361734134.987' 
    capture_lex $P5008 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx359_start
    .local string rx359_tgt
    .local int rx359_pos
    .local int rx359_off
    .local int rx359_eos
    .local int rx359_rep
    .local pmc rx359_cur
    .local pmc rx359_curclass
    .local pmc rx359_bstack
    .local pmc rx359_cstack
    rx359_start = self."!cursor_start_all"()
    set rx359_cur, rx359_start[0]
    set rx359_tgt, rx359_start[1]
    set rx359_pos, rx359_start[2]
    set rx359_curclass, rx359_start[3]
    set rx359_bstack, rx359_start[4]
    set $I19, rx359_start[5]
    store_lex unicode:"$\x{a2}", rx359_cur
    length rx359_eos, rx359_tgt
    eq $I19, 1, rx359_restart1110
    gt rx359_pos, rx359_eos, rx359_fail1111
    repr_get_attr_int $I11, self, rx359_curclass, "$!from"
    ne $I11, -1, rxscan360_done1117
    goto rxscan360_scan1116
  rxscan360_loop1115:
    inc rx359_pos
    gt rx359_pos, rx359_eos, rx359_fail1111
    repr_bind_attr_int rx359_cur, rx359_curclass, "$!from", rx359_pos
  rxscan360_scan1116:
    nqp_rxmark rx359_bstack, rxscan360_loop1115, rx359_pos, 0
  rxscan360_done1117:
    repr_bind_attr_int rx359_cur, rx359_curclass, "$!pos", rx359_pos
    store_lex unicode:"$\x{a2}", rx359_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_191_1361734134.987' 
    capture_lex $P5002
    $P5003 = $P5002()
    .const 'Sub' $P5004 = 'cuid_84_1361734134.987' 
    capture_lex $P5004
    repr_bind_attr_int rx359_cur, rx359_curclass, "$!pos", rx359_pos
    $P11 = rx359_cur.$P5004()
    repr_get_attr_int $I11, $P11, rx359_curclass, "$!pos"
    lt $I11, 0, rx359_fail1111
    nqp_rxmark rx359_bstack, rxsubrule363_pass1128, -1, 0
  rxsubrule363_pass1128:
    rx359_cstack = rx359_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx359_pos, $P11, rx359_curclass, "$!pos"
    repr_bind_attr_int rx359_cur, rx359_curclass, "$!pos", rx359_pos
    store_lex unicode:"$\x{a2}", rx359_cur
    $P5005 = $P101."MATCH"()
    set $P102, $P5005
    .const 'Sub' $P5006 = 'cuid_192_1361734134.987' 
    capture_lex $P5006
    $P5007 = $P5006()
    rx359_cur."!cursor_pass"(rx359_pos, "backslash:sym<unrec>", 'backtrack'=>1)
    .return (rx359_cur)
  rx359_restart1110:
    repr_get_attr_obj rx359_cstack, rx359_cur, rx359_curclass, "$!cstack"
  rx359_fail1111:
    unless rx359_bstack, rx359_done1109
    pop $I19, rx359_bstack
    if_null rx359_cstack, rx359_cstack_done1114
    unless rx359_cstack, rx359_cstack_done1114
    dec $I19
    set $P11, rx359_cstack[$I19]
  rx359_cstack_done1114:
    pop rx359_rep, rx359_bstack
    pop rx359_pos, rx359_bstack
    pop $I19, rx359_bstack
    lt rx359_pos, -1, rx359_done1109
    lt rx359_pos, 0, rx359_fail1111
    eq $I19, 0, rx359_fail1111
    nqp_islist $I20, rx359_cstack
    unless $I20, rx359_jump1112
    elements $I18, rx359_bstack
    le $I18, 0, rx359_cut1113
    dec $I18
    set $I18, rx359_bstack[$I18]
  rx359_cut1113:
    assign rx359_cstack, $I18
  rx359_jump1112:
    jump $I19
  rx359_done1109:
    rx359_cur."!cursor_fail"()
    .return (rx359_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_191_1361734134.987") :anon :lex :outer("cuid_83_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 253

    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_84_1361734134.987") :anon :lex :outer("cuid_83_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx361_start
    .local string rx361_tgt
    .local int rx361_pos
    .local int rx361_off
    .local int rx361_eos
    .local int rx361_rep
    .local pmc rx361_cur
    .local pmc rx361_curclass
    .local pmc rx361_bstack
    .local pmc rx361_cstack
    rx361_start = self."!cursor_start_all"()
    set rx361_cur, rx361_start[0]
    set rx361_tgt, rx361_start[1]
    set rx361_pos, rx361_start[2]
    set rx361_curclass, rx361_start[3]
    set rx361_bstack, rx361_start[4]
    set $I19, rx361_start[5]
    store_lex unicode:"$\x{a2}", rx361_cur
    length rx361_eos, rx361_tgt
    eq $I19, 1, rx361_restart1120
    gt rx361_pos, rx361_eos, rx361_fail1121
    repr_get_attr_int $I11, self, rx361_curclass, "$!from"
    ne $I11, -1, rxscan362_done1127
    goto rxscan362_scan1126
  rxscan362_loop1125:
    inc rx361_pos
    gt rx361_pos, rx361_eos, rx361_fail1121
    repr_bind_attr_int rx361_cur, rx361_curclass, "$!from", rx361_pos
  rxscan362_scan1126:
    nqp_rxmark rx361_bstack, rxscan362_loop1125, rx361_pos, 0
  rxscan362_done1127:
    ge rx361_pos, rx361_eos, rx361_fail1121
    is_cclass $I11, .CCLASS_WORD, rx361_tgt, rx361_pos
    unless $I11, rx361_fail1121
    add rx361_pos, 1
    rx361_cur."!cursor_pass"(rx361_pos, 'backtrack'=>1)
    .return (rx361_cur)
  rx361_restart1120:
    repr_get_attr_obj rx361_cstack, rx361_cur, rx361_curclass, "$!cstack"
  rx361_fail1121:
    unless rx361_bstack, rx361_done1119
    pop $I19, rx361_bstack
    if_null rx361_cstack, rx361_cstack_done1124
    unless rx361_cstack, rx361_cstack_done1124
    dec $I19
    set $P11, rx361_cstack[$I19]
  rx361_cstack_done1124:
    pop rx361_rep, rx361_bstack
    pop rx361_pos, rx361_bstack
    pop $I19, rx361_bstack
    lt rx361_pos, -1, rx361_done1119
    lt rx361_pos, 0, rx361_fail1121
    eq $I19, 0, rx361_fail1121
    nqp_islist $I20, rx361_cstack
    unless $I20, rx361_jump1122
    elements $I18, rx361_bstack
    le $I18, 0, rx361_cut1123
    dec $I18
    set $I18, rx361_bstack[$I18]
  rx361_cut1123:
    assign rx361_cstack, $I18
  rx361_jump1122:
    jump $I19
  rx361_done1119:
    rx361_cur."!cursor_fail"()
    .return (rx361_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_192_1361734134.987") :anon :lex :outer("cuid_83_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 253
    .local pmc fb_tmp_6 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$/"
    set fb_tmp_6, $P5003
    repr_defined $I5001, fb_tmp_6
    unless $I5001 goto if364_else1129 
    set $P5004, fb_tmp_6[0]
    set $P5006, $P5004
    goto if364_end1130
  if364_else1129:
    null $P5005
    set $P5006, $P5005
  if364_end1130:
    unless_null $P5006, vivi_3651131
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_3651131:
    $P5008 = $P5006."Str"()
    $P5009 = $P5001."throw_unrecog_backslash_seq"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<misc>" :subid("cuid_85_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 254
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx366_start
    .local string rx366_tgt
    .local int rx366_pos
    .local int rx366_off
    .local int rx366_eos
    .local int rx366_rep
    .local pmc rx366_cur
    .local pmc rx366_curclass
    .local pmc rx366_bstack
    .local pmc rx366_cstack
    rx366_start = self."!cursor_start_all"()
    set rx366_cur, rx366_start[0]
    set rx366_tgt, rx366_start[1]
    set rx366_pos, rx366_start[2]
    set rx366_curclass, rx366_start[3]
    set rx366_bstack, rx366_start[4]
    set $I19, rx366_start[5]
    store_lex unicode:"$\x{a2}", rx366_cur
    length rx366_eos, rx366_tgt
    eq $I19, 1, rx366_restart1134
    gt rx366_pos, rx366_eos, rx366_fail1135
    repr_get_attr_int $I11, self, rx366_curclass, "$!from"
    ne $I11, -1, rxscan367_done1141
    goto rxscan367_scan1140
  rxscan367_loop1139:
    inc rx366_pos
    gt rx366_pos, rx366_eos, rx366_fail1135
    repr_bind_attr_int rx366_cur, rx366_curclass, "$!from", rx366_pos
  rxscan367_scan1140:
    nqp_rxmark rx366_bstack, rxscan367_loop1139, rx366_pos, 0
  rxscan367_done1141:
    ge rx366_pos, rx366_eos, rx366_fail1135
    is_cclass $I11, .CCLASS_WORD, rx366_tgt, rx366_pos
    if $I11, rx366_fail1135
    add rx366_pos, 1
    rx366_cur."!cursor_pass"(rx366_pos, "backslash:sym<misc>", 'backtrack'=>1)
    .return (rx366_cur)
  rx366_restart1134:
    repr_get_attr_obj rx366_cstack, rx366_cur, rx366_curclass, "$!cstack"
  rx366_fail1135:
    unless rx366_bstack, rx366_done1133
    pop $I19, rx366_bstack
    if_null rx366_cstack, rx366_cstack_done1138
    unless rx366_cstack, rx366_cstack_done1138
    dec $I19
    set $P11, rx366_cstack[$I19]
  rx366_cstack_done1138:
    pop rx366_rep, rx366_bstack
    pop rx366_pos, rx366_bstack
    pop $I19, rx366_bstack
    lt rx366_pos, -1, rx366_done1133
    lt rx366_pos, 0, rx366_fail1135
    eq $I19, 0, rx366_fail1135
    nqp_islist $I20, rx366_cstack
    unless $I20, rx366_jump1136
    elements $I18, rx366_bstack
    le $I18, 0, rx366_cut1137
    dec $I18
    set $I18, rx366_bstack[$I18]
  rx366_cut1137:
    assign rx366_cstack, $I18
  rx366_jump1136:
    jump $I19
  rx366_done1133:
    rx366_cur."!cursor_fail"()
    .return (rx366_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion" :subid("cuid_86_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 256
    .param pmc self 
    $P5001 = self."!protoregex"("assertion")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_87_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 258
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_88_1361734134.987' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx368_start
    .local string rx368_tgt
    .local int rx368_pos
    .local int rx368_off
    .local int rx368_eos
    .local int rx368_rep
    .local pmc rx368_cur
    .local pmc rx368_curclass
    .local pmc rx368_bstack
    .local pmc rx368_cstack
    rx368_start = self."!cursor_start_all"()
    set rx368_cur, rx368_start[0]
    set rx368_tgt, rx368_start[1]
    set rx368_pos, rx368_start[2]
    set rx368_curclass, rx368_start[3]
    set rx368_bstack, rx368_start[4]
    set $I19, rx368_start[5]
    store_lex unicode:"$\x{a2}", rx368_cur
    length rx368_eos, rx368_tgt
    eq $I19, 1, rx368_restart1144
    gt rx368_pos, rx368_eos, rx368_fail1145
    repr_get_attr_int $I11, self, rx368_curclass, "$!from"
    ne $I11, -1, rxscan369_done1151
    goto rxscan369_scan1150
  rxscan369_loop1149:
    inc rx368_pos
    gt rx368_pos, rx368_eos, rx368_fail1145
    repr_bind_attr_int rx368_cur, rx368_curclass, "$!from", rx368_pos
  rxscan369_scan1150:
    nqp_rxmark rx368_bstack, rxscan369_loop1149, rx368_pos, 0
  rxscan369_done1151:
    add $I11, rx368_pos, 1
    gt $I11, rx368_eos, rx368_fail1145
    substr $S10, rx368_tgt, rx368_pos, 1
    ne $S10, ucs4:"?", rx368_fail1145
    add rx368_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt370_01153
    nqp_push_label $P11, alt370_11164
    nqp_rxmark rx368_bstack, alt370_end1152, -1, 0
    rx368_cur."!alt"(rx368_pos, "alt_nfa__15_1361734135.754", $P11)
    goto rx368_fail1145
  alt370_01153:
    .const 'Sub' $P5001 = 'cuid_88_1361734134.987' 
    capture_lex $P5001
    repr_bind_attr_int rx368_cur, rx368_curclass, "$!pos", rx368_pos
    $P11 = rx368_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx368_curclass, "$!pos"
    lt $I11, 0, rx368_fail1145
    goto alt370_end1152
  alt370_11164:
    repr_bind_attr_int rx368_cur, rx368_curclass, "$!pos", rx368_pos
    $P11 = rx368_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx368_curclass, "$!pos"
    lt $I11, 0, rx368_fail1145
    nqp_rxmark rx368_bstack, rxsubrule373_pass1165, -1, 0
  rxsubrule373_pass1165:
    rx368_cstack = rx368_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx368_pos, $P11, rx368_curclass, "$!pos"
    goto alt370_end1152
  alt370_end1152:
    nqp_rxcommit rx368_bstack, alt370_end1152
    rx368_cur."!cursor_pass"(rx368_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx368_cur)
  rx368_restart1144:
    repr_get_attr_obj rx368_cstack, rx368_cur, rx368_curclass, "$!cstack"
  rx368_fail1145:
    unless rx368_bstack, rx368_done1143
    pop $I19, rx368_bstack
    if_null rx368_cstack, rx368_cstack_done1148
    unless rx368_cstack, rx368_cstack_done1148
    dec $I19
    set $P11, rx368_cstack[$I19]
  rx368_cstack_done1148:
    pop rx368_rep, rx368_bstack
    pop rx368_pos, rx368_bstack
    pop $I19, rx368_bstack
    lt rx368_pos, -1, rx368_done1143
    lt rx368_pos, 0, rx368_fail1145
    eq $I19, 0, rx368_fail1145
    nqp_islist $I20, rx368_cstack
    unless $I20, rx368_jump1146
    elements $I18, rx368_bstack
    le $I18, 0, rx368_cut1147
    dec $I18
    set $I18, rx368_bstack[$I18]
  rx368_cut1147:
    assign rx368_cstack, $I18
  rx368_jump1146:
    jump $I19
  rx368_done1143:
    rx368_cur."!cursor_fail"()
    .return (rx368_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_88_1361734134.987") :anon :lex :outer("cuid_87_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx371_start
    .local string rx371_tgt
    .local int rx371_pos
    .local int rx371_off
    .local int rx371_eos
    .local int rx371_rep
    .local pmc rx371_cur
    .local pmc rx371_curclass
    .local pmc rx371_bstack
    .local pmc rx371_cstack
    rx371_start = self."!cursor_start_all"()
    set rx371_cur, rx371_start[0]
    set rx371_tgt, rx371_start[1]
    set rx371_pos, rx371_start[2]
    set rx371_curclass, rx371_start[3]
    set rx371_bstack, rx371_start[4]
    set $I19, rx371_start[5]
    store_lex unicode:"$\x{a2}", rx371_cur
    length rx371_eos, rx371_tgt
    eq $I19, 1, rx371_restart1156
    gt rx371_pos, rx371_eos, rx371_fail1157
    repr_get_attr_int $I11, self, rx371_curclass, "$!from"
    ne $I11, -1, rxscan372_done1163
    goto rxscan372_scan1162
  rxscan372_loop1161:
    inc rx371_pos
    gt rx371_pos, rx371_eos, rx371_fail1157
    repr_bind_attr_int rx371_cur, rx371_curclass, "$!from", rx371_pos
  rxscan372_scan1162:
    nqp_rxmark rx371_bstack, rxscan372_loop1161, rx371_pos, 0
  rxscan372_done1163:
    add $I11, rx371_pos, 1
    gt $I11, rx371_eos, rx371_fail1157
    substr $S10, rx371_tgt, rx371_pos, 1
    ne $S10, ucs4:">", rx371_fail1157
    add rx371_pos, 1
    rx371_cur."!cursor_pass"(rx371_pos, 'backtrack'=>1)
    .return (rx371_cur)
  rx371_restart1156:
    repr_get_attr_obj rx371_cstack, rx371_cur, rx371_curclass, "$!cstack"
  rx371_fail1157:
    unless rx371_bstack, rx371_done1155
    pop $I19, rx371_bstack
    if_null rx371_cstack, rx371_cstack_done1160
    unless rx371_cstack, rx371_cstack_done1160
    dec $I19
    set $P11, rx371_cstack[$I19]
  rx371_cstack_done1160:
    pop rx371_rep, rx371_bstack
    pop rx371_pos, rx371_bstack
    pop $I19, rx371_bstack
    lt rx371_pos, -1, rx371_done1155
    lt rx371_pos, 0, rx371_fail1157
    eq $I19, 0, rx371_fail1157
    nqp_islist $I20, rx371_cstack
    unless $I20, rx371_jump1158
    elements $I18, rx371_bstack
    le $I18, 0, rx371_cut1159
    dec $I18
    set $I18, rx371_bstack[$I18]
  rx371_cut1159:
    assign rx371_cstack, $I18
  rx371_jump1158:
    jump $I19
  rx371_done1155:
    rx371_cur."!cursor_fail"()
    .return (rx371_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_89_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 259
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_90_1361734134.987' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx374_start
    .local string rx374_tgt
    .local int rx374_pos
    .local int rx374_off
    .local int rx374_eos
    .local int rx374_rep
    .local pmc rx374_cur
    .local pmc rx374_curclass
    .local pmc rx374_bstack
    .local pmc rx374_cstack
    rx374_start = self."!cursor_start_all"()
    set rx374_cur, rx374_start[0]
    set rx374_tgt, rx374_start[1]
    set rx374_pos, rx374_start[2]
    set rx374_curclass, rx374_start[3]
    set rx374_bstack, rx374_start[4]
    set $I19, rx374_start[5]
    store_lex unicode:"$\x{a2}", rx374_cur
    length rx374_eos, rx374_tgt
    eq $I19, 1, rx374_restart1168
    gt rx374_pos, rx374_eos, rx374_fail1169
    repr_get_attr_int $I11, self, rx374_curclass, "$!from"
    ne $I11, -1, rxscan375_done1175
    goto rxscan375_scan1174
  rxscan375_loop1173:
    inc rx374_pos
    gt rx374_pos, rx374_eos, rx374_fail1169
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!from", rx374_pos
  rxscan375_scan1174:
    nqp_rxmark rx374_bstack, rxscan375_loop1173, rx374_pos, 0
  rxscan375_done1175:
    add $I11, rx374_pos, 1
    gt $I11, rx374_eos, rx374_fail1169
    substr $S10, rx374_tgt, rx374_pos, 1
    ne $S10, ucs4:"!", rx374_fail1169
    add rx374_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt376_01177
    nqp_push_label $P11, alt376_11188
    nqp_rxmark rx374_bstack, alt376_end1176, -1, 0
    rx374_cur."!alt"(rx374_pos, "alt_nfa__16_1361734135.764", $P11)
    goto rx374_fail1169
  alt376_01177:
    .const 'Sub' $P5001 = 'cuid_90_1361734134.987' 
    capture_lex $P5001
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!pos", rx374_pos
    $P11 = rx374_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx374_curclass, "$!pos"
    lt $I11, 0, rx374_fail1169
    goto alt376_end1176
  alt376_11188:
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!pos", rx374_pos
    $P11 = rx374_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx374_curclass, "$!pos"
    lt $I11, 0, rx374_fail1169
    nqp_rxmark rx374_bstack, rxsubrule379_pass1189, -1, 0
  rxsubrule379_pass1189:
    rx374_cstack = rx374_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx374_pos, $P11, rx374_curclass, "$!pos"
    goto alt376_end1176
  alt376_end1176:
    nqp_rxcommit rx374_bstack, alt376_end1176
    rx374_cur."!cursor_pass"(rx374_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx374_cur)
  rx374_restart1168:
    repr_get_attr_obj rx374_cstack, rx374_cur, rx374_curclass, "$!cstack"
  rx374_fail1169:
    unless rx374_bstack, rx374_done1167
    pop $I19, rx374_bstack
    if_null rx374_cstack, rx374_cstack_done1172
    unless rx374_cstack, rx374_cstack_done1172
    dec $I19
    set $P11, rx374_cstack[$I19]
  rx374_cstack_done1172:
    pop rx374_rep, rx374_bstack
    pop rx374_pos, rx374_bstack
    pop $I19, rx374_bstack
    lt rx374_pos, -1, rx374_done1167
    lt rx374_pos, 0, rx374_fail1169
    eq $I19, 0, rx374_fail1169
    nqp_islist $I20, rx374_cstack
    unless $I20, rx374_jump1170
    elements $I18, rx374_bstack
    le $I18, 0, rx374_cut1171
    dec $I18
    set $I18, rx374_bstack[$I18]
  rx374_cut1171:
    assign rx374_cstack, $I18
  rx374_jump1170:
    jump $I19
  rx374_done1167:
    rx374_cur."!cursor_fail"()
    .return (rx374_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_90_1361734134.987") :anon :lex :outer("cuid_89_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx377_start
    .local string rx377_tgt
    .local int rx377_pos
    .local int rx377_off
    .local int rx377_eos
    .local int rx377_rep
    .local pmc rx377_cur
    .local pmc rx377_curclass
    .local pmc rx377_bstack
    .local pmc rx377_cstack
    rx377_start = self."!cursor_start_all"()
    set rx377_cur, rx377_start[0]
    set rx377_tgt, rx377_start[1]
    set rx377_pos, rx377_start[2]
    set rx377_curclass, rx377_start[3]
    set rx377_bstack, rx377_start[4]
    set $I19, rx377_start[5]
    store_lex unicode:"$\x{a2}", rx377_cur
    length rx377_eos, rx377_tgt
    eq $I19, 1, rx377_restart1180
    gt rx377_pos, rx377_eos, rx377_fail1181
    repr_get_attr_int $I11, self, rx377_curclass, "$!from"
    ne $I11, -1, rxscan378_done1187
    goto rxscan378_scan1186
  rxscan378_loop1185:
    inc rx377_pos
    gt rx377_pos, rx377_eos, rx377_fail1181
    repr_bind_attr_int rx377_cur, rx377_curclass, "$!from", rx377_pos
  rxscan378_scan1186:
    nqp_rxmark rx377_bstack, rxscan378_loop1185, rx377_pos, 0
  rxscan378_done1187:
    add $I11, rx377_pos, 1
    gt $I11, rx377_eos, rx377_fail1181
    substr $S10, rx377_tgt, rx377_pos, 1
    ne $S10, ucs4:">", rx377_fail1181
    add rx377_pos, 1
    rx377_cur."!cursor_pass"(rx377_pos, 'backtrack'=>1)
    .return (rx377_cur)
  rx377_restart1180:
    repr_get_attr_obj rx377_cstack, rx377_cur, rx377_curclass, "$!cstack"
  rx377_fail1181:
    unless rx377_bstack, rx377_done1179
    pop $I19, rx377_bstack
    if_null rx377_cstack, rx377_cstack_done1184
    unless rx377_cstack, rx377_cstack_done1184
    dec $I19
    set $P11, rx377_cstack[$I19]
  rx377_cstack_done1184:
    pop rx377_rep, rx377_bstack
    pop rx377_pos, rx377_bstack
    pop $I19, rx377_bstack
    lt rx377_pos, -1, rx377_done1179
    lt rx377_pos, 0, rx377_fail1181
    eq $I19, 0, rx377_fail1181
    nqp_islist $I20, rx377_cstack
    unless $I20, rx377_jump1182
    elements $I18, rx377_bstack
    le $I18, 0, rx377_cut1183
    dec $I18
    set $I18, rx377_bstack[$I18]
  rx377_cut1183:
    assign rx377_cstack, $I18
  rx377_jump1182:
    jump $I19
  rx377_done1179:
    rx377_cur."!cursor_fail"()
    .return (rx377_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<|>" :subid("cuid_91_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 260
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx380_start
    .local string rx380_tgt
    .local int rx380_pos
    .local int rx380_off
    .local int rx380_eos
    .local int rx380_rep
    .local pmc rx380_cur
    .local pmc rx380_curclass
    .local pmc rx380_bstack
    .local pmc rx380_cstack
    rx380_start = self."!cursor_start_all"()
    set rx380_cur, rx380_start[0]
    set rx380_tgt, rx380_start[1]
    set rx380_pos, rx380_start[2]
    set rx380_curclass, rx380_start[3]
    set rx380_bstack, rx380_start[4]
    set $I19, rx380_start[5]
    store_lex unicode:"$\x{a2}", rx380_cur
    length rx380_eos, rx380_tgt
    eq $I19, 1, rx380_restart1192
    gt rx380_pos, rx380_eos, rx380_fail1193
    repr_get_attr_int $I11, self, rx380_curclass, "$!from"
    ne $I11, -1, rxscan381_done1199
    goto rxscan381_scan1198
  rxscan381_loop1197:
    inc rx380_pos
    gt rx380_pos, rx380_eos, rx380_fail1193
    repr_bind_attr_int rx380_cur, rx380_curclass, "$!from", rx380_pos
  rxscan381_scan1198:
    nqp_rxmark rx380_bstack, rxscan381_loop1197, rx380_pos, 0
  rxscan381_done1199:
    add $I11, rx380_pos, 1
    gt $I11, rx380_eos, rx380_fail1193
    substr $S10, rx380_tgt, rx380_pos, 1
    ne $S10, ucs4:"|", rx380_fail1193
    add rx380_pos, 1
    repr_bind_attr_int rx380_cur, rx380_curclass, "$!pos", rx380_pos
    $P11 = rx380_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx380_curclass, "$!pos"
    lt $I11, 0, rx380_fail1193
    nqp_rxmark rx380_bstack, rxsubrule382_pass1200, -1, 0
  rxsubrule382_pass1200:
    rx380_cstack = rx380_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx380_pos, $P11, rx380_curclass, "$!pos"
    rx380_cur."!cursor_pass"(rx380_pos, "assertion:sym<|>", 'backtrack'=>1)
    .return (rx380_cur)
  rx380_restart1192:
    repr_get_attr_obj rx380_cstack, rx380_cur, rx380_curclass, "$!cstack"
  rx380_fail1193:
    unless rx380_bstack, rx380_done1191
    pop $I19, rx380_bstack
    if_null rx380_cstack, rx380_cstack_done1196
    unless rx380_cstack, rx380_cstack_done1196
    dec $I19
    set $P11, rx380_cstack[$I19]
  rx380_cstack_done1196:
    pop rx380_rep, rx380_bstack
    pop rx380_pos, rx380_bstack
    pop $I19, rx380_bstack
    lt rx380_pos, -1, rx380_done1191
    lt rx380_pos, 0, rx380_fail1193
    eq $I19, 0, rx380_fail1193
    nqp_islist $I20, rx380_cstack
    unless $I20, rx380_jump1194
    elements $I18, rx380_bstack
    le $I18, 0, rx380_cut1195
    dec $I18
    set $I18, rx380_bstack[$I18]
  rx380_cut1195:
    assign rx380_cstack, $I18
  rx380_jump1194:
    jump $I19
  rx380_done1191:
    rx380_cur."!cursor_fail"()
    .return (rx380_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<method>" :subid("cuid_92_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 262
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx383_start
    .local string rx383_tgt
    .local int rx383_pos
    .local int rx383_off
    .local int rx383_eos
    .local int rx383_rep
    .local pmc rx383_cur
    .local pmc rx383_curclass
    .local pmc rx383_bstack
    .local pmc rx383_cstack
    rx383_start = self."!cursor_start_all"()
    set rx383_cur, rx383_start[0]
    set rx383_tgt, rx383_start[1]
    set rx383_pos, rx383_start[2]
    set rx383_curclass, rx383_start[3]
    set rx383_bstack, rx383_start[4]
    set $I19, rx383_start[5]
    store_lex unicode:"$\x{a2}", rx383_cur
    length rx383_eos, rx383_tgt
    eq $I19, 1, rx383_restart1203
    gt rx383_pos, rx383_eos, rx383_fail1204
    repr_get_attr_int $I11, self, rx383_curclass, "$!from"
    ne $I11, -1, rxscan384_done1210
    goto rxscan384_scan1209
  rxscan384_loop1208:
    inc rx383_pos
    gt rx383_pos, rx383_eos, rx383_fail1204
    repr_bind_attr_int rx383_cur, rx383_curclass, "$!from", rx383_pos
  rxscan384_scan1209:
    nqp_rxmark rx383_bstack, rxscan384_loop1208, rx383_pos, 0
  rxscan384_done1210:
    add $I11, rx383_pos, 1
    gt $I11, rx383_eos, rx383_fail1204
    substr $S10, rx383_tgt, rx383_pos, 1
    ne $S10, ucs4:".", rx383_fail1204
    add rx383_pos, 1
    repr_bind_attr_int rx383_cur, rx383_curclass, "$!pos", rx383_pos
    $P11 = rx383_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx383_curclass, "$!pos"
    lt $I11, 0, rx383_fail1204
    nqp_rxmark rx383_bstack, rxsubrule385_pass1211, -1, 0
  rxsubrule385_pass1211:
    rx383_cstack = rx383_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx383_pos, $P11, rx383_curclass, "$!pos"
    rx383_cur."!cursor_pass"(rx383_pos, "assertion:sym<method>", 'backtrack'=>1)
    .return (rx383_cur)
  rx383_restart1203:
    repr_get_attr_obj rx383_cstack, rx383_cur, rx383_curclass, "$!cstack"
  rx383_fail1204:
    unless rx383_bstack, rx383_done1202
    pop $I19, rx383_bstack
    if_null rx383_cstack, rx383_cstack_done1207
    unless rx383_cstack, rx383_cstack_done1207
    dec $I19
    set $P11, rx383_cstack[$I19]
  rx383_cstack_done1207:
    pop rx383_rep, rx383_bstack
    pop rx383_pos, rx383_bstack
    pop $I19, rx383_bstack
    lt rx383_pos, -1, rx383_done1202
    lt rx383_pos, 0, rx383_fail1204
    eq $I19, 0, rx383_fail1204
    nqp_islist $I20, rx383_cstack
    unless $I20, rx383_jump1205
    elements $I18, rx383_bstack
    le $I18, 0, rx383_cut1206
    dec $I18
    set $I18, rx383_bstack[$I18]
  rx383_cut1206:
    assign rx383_cstack, $I18
  rx383_jump1205:
    jump $I19
  rx383_done1202:
    rx383_cur."!cursor_fail"()
    .return (rx383_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_93_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 266
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_94_1361734134.987' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx386_start
    .local string rx386_tgt
    .local int rx386_pos
    .local int rx386_off
    .local int rx386_eos
    .local int rx386_rep
    .local pmc rx386_cur
    .local pmc rx386_curclass
    .local pmc rx386_bstack
    .local pmc rx386_cstack
    rx386_start = self."!cursor_start_all"()
    set rx386_cur, rx386_start[0]
    set rx386_tgt, rx386_start[1]
    set rx386_pos, rx386_start[2]
    set rx386_curclass, rx386_start[3]
    set rx386_bstack, rx386_start[4]
    set $I19, rx386_start[5]
    store_lex unicode:"$\x{a2}", rx386_cur
    length rx386_eos, rx386_tgt
    eq $I19, 1, rx386_restart1214
    gt rx386_pos, rx386_eos, rx386_fail1215
    repr_get_attr_int $I11, self, rx386_curclass, "$!from"
    ne $I11, -1, rxscan387_done1221
    goto rxscan387_scan1220
  rxscan387_loop1219:
    inc rx386_pos
    gt rx386_pos, rx386_eos, rx386_fail1215
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!from", rx386_pos
  rxscan387_scan1220:
    nqp_rxmark rx386_bstack, rxscan387_loop1219, rx386_pos, 0
  rxscan387_done1221:
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!pos", rx386_pos
    $P11 = rx386_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx386_curclass, "$!pos"
    lt $I11, 0, rx386_fail1215
    nqp_rxmark rx386_bstack, rxsubrule388_pass1222, -1, 0
  rxsubrule388_pass1222:
    rx386_cstack = rx386_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx386_pos, $P11, rx386_curclass, "$!pos"
    nqp_rxmark rx386_bstack, rxquantr389_done1224, rx386_pos, 0
  rxquantr389_loop1223:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt390_01226
    nqp_push_label $P11, alt390_11237
    nqp_push_label $P11, alt390_21239
    nqp_push_label $P11, alt390_31241
    nqp_push_label $P11, alt390_41243
    nqp_rxmark rx386_bstack, alt390_end1225, -1, 0
    rx386_cur."!alt"(rx386_pos, "alt_nfa__17_1361734135.796", $P11)
    goto rx386_fail1215
  alt390_01226:
    .const 'Sub' $P5001 = 'cuid_94_1361734134.987' 
    capture_lex $P5001
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!pos", rx386_pos
    $P11 = rx386_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx386_curclass, "$!pos"
    lt $I11, 0, rx386_fail1215
    goto alt390_end1225
  alt390_11237:
    add $I11, rx386_pos, 1
    gt $I11, rx386_eos, rx386_fail1215
    substr $S10, rx386_tgt, rx386_pos, 1
    ne $S10, ucs4:"=", rx386_fail1215
    add rx386_pos, 1
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!pos", rx386_pos
    $P11 = rx386_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx386_curclass, "$!pos"
    lt $I11, 0, rx386_fail1215
    nqp_rxmark rx386_bstack, rxsubrule393_pass1238, -1, 0
  rxsubrule393_pass1238:
    rx386_cstack = rx386_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx386_pos, $P11, rx386_curclass, "$!pos"
    goto alt390_end1225
  alt390_21239:
    add $I11, rx386_pos, 1
    gt $I11, rx386_eos, rx386_fail1215
    substr $S10, rx386_tgt, rx386_pos, 1
    ne $S10, ucs4:":", rx386_fail1215
    add rx386_pos, 1
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!pos", rx386_pos
    $P11 = rx386_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx386_curclass, "$!pos"
    lt $I11, 0, rx386_fail1215
    nqp_rxmark rx386_bstack, rxsubrule394_pass1240, -1, 0
  rxsubrule394_pass1240:
    rx386_cstack = rx386_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx386_pos, $P11, rx386_curclass, "$!pos"
    goto alt390_end1225
  alt390_31241:
    add $I11, rx386_pos, 1
    gt $I11, rx386_eos, rx386_fail1215
    substr $S10, rx386_tgt, rx386_pos, 1
    ne $S10, ucs4:"(", rx386_fail1215
    add rx386_pos, 1
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!pos", rx386_pos
    $P11 = rx386_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx386_curclass, "$!pos"
    lt $I11, 0, rx386_fail1215
    nqp_rxmark rx386_bstack, rxsubrule395_pass1242, -1, 0
  rxsubrule395_pass1242:
    rx386_cstack = rx386_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx386_pos, $P11, rx386_curclass, "$!pos"
    add $I11, rx386_pos, 1
    gt $I11, rx386_eos, rx386_fail1215
    substr $S10, rx386_tgt, rx386_pos, 1
    ne $S10, ucs4:")", rx386_fail1215
    add rx386_pos, 1
    goto alt390_end1225
  alt390_41243:
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!pos", rx386_pos
    $P11 = rx386_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx386_curclass, "$!pos"
    lt $I11, 0, rx386_fail1215
    repr_get_attr_int rx386_pos, $P11, rx386_curclass, "$!pos"
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!pos", rx386_pos
    $P11 = rx386_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx386_curclass, "$!pos"
    lt $I11, 0, rx386_fail1215
    nqp_rxmark rx386_bstack, rxsubrule397_pass1245, -1, 0
  rxsubrule397_pass1245:
    rx386_cstack = rx386_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx386_pos, $P11, rx386_curclass, "$!pos"
    goto alt390_end1225
  alt390_end1225:
    nqp_rxpeek $I19, rx386_bstack, rxquantr389_done1224
    inc $I19
    inc $I19
    set rx386_rep, rx386_bstack[$I19]
    nqp_rxcommit rx386_bstack, rxquantr389_done1224
    inc rx386_rep
  rxquantr389_done1224:
    rx386_cur."!cursor_pass"(rx386_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx386_cur)
  rx386_restart1214:
    repr_get_attr_obj rx386_cstack, rx386_cur, rx386_curclass, "$!cstack"
  rx386_fail1215:
    unless rx386_bstack, rx386_done1213
    pop $I19, rx386_bstack
    if_null rx386_cstack, rx386_cstack_done1218
    unless rx386_cstack, rx386_cstack_done1218
    dec $I19
    set $P11, rx386_cstack[$I19]
  rx386_cstack_done1218:
    pop rx386_rep, rx386_bstack
    pop rx386_pos, rx386_bstack
    pop $I19, rx386_bstack
    lt rx386_pos, -1, rx386_done1213
    lt rx386_pos, 0, rx386_fail1215
    eq $I19, 0, rx386_fail1215
    nqp_islist $I20, rx386_cstack
    unless $I20, rx386_jump1216
    elements $I18, rx386_bstack
    le $I18, 0, rx386_cut1217
    dec $I18
    set $I18, rx386_bstack[$I18]
  rx386_cut1217:
    assign rx386_cstack, $I18
  rx386_jump1216:
    jump $I19
  rx386_done1213:
    rx386_cur."!cursor_fail"()
    .return (rx386_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_94_1361734134.987") :anon :lex :outer("cuid_93_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx391_start
    .local string rx391_tgt
    .local int rx391_pos
    .local int rx391_off
    .local int rx391_eos
    .local int rx391_rep
    .local pmc rx391_cur
    .local pmc rx391_curclass
    .local pmc rx391_bstack
    .local pmc rx391_cstack
    rx391_start = self."!cursor_start_all"()
    set rx391_cur, rx391_start[0]
    set rx391_tgt, rx391_start[1]
    set rx391_pos, rx391_start[2]
    set rx391_curclass, rx391_start[3]
    set rx391_bstack, rx391_start[4]
    set $I19, rx391_start[5]
    store_lex unicode:"$\x{a2}", rx391_cur
    length rx391_eos, rx391_tgt
    eq $I19, 1, rx391_restart1229
    gt rx391_pos, rx391_eos, rx391_fail1230
    repr_get_attr_int $I11, self, rx391_curclass, "$!from"
    ne $I11, -1, rxscan392_done1236
    goto rxscan392_scan1235
  rxscan392_loop1234:
    inc rx391_pos
    gt rx391_pos, rx391_eos, rx391_fail1230
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!from", rx391_pos
  rxscan392_scan1235:
    nqp_rxmark rx391_bstack, rxscan392_loop1234, rx391_pos, 0
  rxscan392_done1236:
    add $I11, rx391_pos, 1
    gt $I11, rx391_eos, rx391_fail1230
    substr $S10, rx391_tgt, rx391_pos, 1
    ne $S10, ucs4:">", rx391_fail1230
    add rx391_pos, 1
    rx391_cur."!cursor_pass"(rx391_pos, 'backtrack'=>1)
    .return (rx391_cur)
  rx391_restart1229:
    repr_get_attr_obj rx391_cstack, rx391_cur, rx391_curclass, "$!cstack"
  rx391_fail1230:
    unless rx391_bstack, rx391_done1228
    pop $I19, rx391_bstack
    if_null rx391_cstack, rx391_cstack_done1233
    unless rx391_cstack, rx391_cstack_done1233
    dec $I19
    set $P11, rx391_cstack[$I19]
  rx391_cstack_done1233:
    pop rx391_rep, rx391_bstack
    pop rx391_pos, rx391_bstack
    pop $I19, rx391_bstack
    lt rx391_pos, -1, rx391_done1228
    lt rx391_pos, 0, rx391_fail1230
    eq $I19, 0, rx391_fail1230
    nqp_islist $I20, rx391_cstack
    unless $I20, rx391_jump1231
    elements $I18, rx391_bstack
    le $I18, 0, rx391_cut1232
    dec $I18
    set $I18, rx391_bstack[$I18]
  rx391_cut1232:
    assign rx391_cstack, $I18
  rx391_jump1231:
    jump $I19
  rx391_done1228:
    rx391_cur."!cursor_fail"()
    .return (rx391_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<[>" :subid("cuid_95_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 277
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_96_1361734134.987' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx398_start
    .local string rx398_tgt
    .local int rx398_pos
    .local int rx398_off
    .local int rx398_eos
    .local int rx398_rep
    .local pmc rx398_cur
    .local pmc rx398_curclass
    .local pmc rx398_bstack
    .local pmc rx398_cstack
    rx398_start = self."!cursor_start_all"()
    set rx398_cur, rx398_start[0]
    set rx398_tgt, rx398_start[1]
    set rx398_pos, rx398_start[2]
    set rx398_curclass, rx398_start[3]
    set rx398_bstack, rx398_start[4]
    set $I19, rx398_start[5]
    store_lex unicode:"$\x{a2}", rx398_cur
    length rx398_eos, rx398_tgt
    eq $I19, 1, rx398_restart1248
    gt rx398_pos, rx398_eos, rx398_fail1249
    repr_get_attr_int $I11, self, rx398_curclass, "$!from"
    ne $I11, -1, rxscan399_done1255
    goto rxscan399_scan1254
  rxscan399_loop1253:
    inc rx398_pos
    gt rx398_pos, rx398_eos, rx398_fail1249
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!from", rx398_pos
  rxscan399_scan1254:
    nqp_rxmark rx398_bstack, rxscan399_loop1253, rx398_pos, 0
  rxscan399_done1255:
    .const 'Sub' $P5001 = 'cuid_96_1361734134.987' 
    capture_lex $P5001
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!pos", rx398_pos
    $P11 = rx398_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx398_curclass, "$!pos"
    lt $I11, 0, rx398_fail1249
    nqp_rxmark rx398_bstack, rxquantr403_done1272, -1, 0
  rxquantr403_loop1271:
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!pos", rx398_pos
    $P11 = rx398_cur."cclass_elem"()
    repr_get_attr_int $I11, $P11, rx398_curclass, "$!pos"
    lt $I11, 0, rx398_fail1249
    goto rxsubrule404_pass1273
  rxsubrule404_back1274:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx398_curclass, "$!pos"
    lt $I11, 0, rx398_fail1249
  rxsubrule404_pass1273:
    rx398_cstack = rx398_cur."!cursor_capture"($P11, "cclass_elem")
    set_addr $I11, rxsubrule404_back1274
    push rx398_bstack, $I11
    push rx398_bstack, 0
    push rx398_bstack, rx398_pos
    elements $I11, rx398_cstack
    push rx398_bstack, $I11
    repr_get_attr_int rx398_pos, $P11, rx398_curclass, "$!pos"
    nqp_rxpeek $I19, rx398_bstack, rxquantr403_done1272
    inc $I19
    inc $I19
    set rx398_rep, rx398_bstack[$I19]
    nqp_rxcommit rx398_bstack, rxquantr403_done1272
    inc rx398_rep
    nqp_rxmark rx398_bstack, rxquantr403_done1272, rx398_pos, rx398_rep
    goto rxquantr403_loop1271
  rxquantr403_done1272:
    rx398_cur."!cursor_pass"(rx398_pos, "assertion:sym<[>", 'backtrack'=>1)
    .return (rx398_cur)
  rx398_restart1248:
    repr_get_attr_obj rx398_cstack, rx398_cur, rx398_curclass, "$!cstack"
  rx398_fail1249:
    unless rx398_bstack, rx398_done1247
    pop $I19, rx398_bstack
    if_null rx398_cstack, rx398_cstack_done1252
    unless rx398_cstack, rx398_cstack_done1252
    dec $I19
    set $P11, rx398_cstack[$I19]
  rx398_cstack_done1252:
    pop rx398_rep, rx398_bstack
    pop rx398_pos, rx398_bstack
    pop $I19, rx398_bstack
    lt rx398_pos, -1, rx398_done1247
    lt rx398_pos, 0, rx398_fail1249
    eq $I19, 0, rx398_fail1249
    nqp_islist $I20, rx398_cstack
    unless $I20, rx398_jump1250
    elements $I18, rx398_bstack
    le $I18, 0, rx398_cut1251
    dec $I18
    set $I18, rx398_bstack[$I18]
  rx398_cut1251:
    assign rx398_cstack, $I18
  rx398_jump1250:
    jump $I19
  rx398_done1247:
    rx398_cur."!cursor_fail"()
    .return (rx398_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_96_1361734134.987") :anon :lex :outer("cuid_95_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx400_start
    .local string rx400_tgt
    .local int rx400_pos
    .local int rx400_off
    .local int rx400_eos
    .local int rx400_rep
    .local pmc rx400_cur
    .local pmc rx400_curclass
    .local pmc rx400_bstack
    .local pmc rx400_cstack
    rx400_start = self."!cursor_start_all"()
    set rx400_cur, rx400_start[0]
    set rx400_tgt, rx400_start[1]
    set rx400_pos, rx400_start[2]
    set rx400_curclass, rx400_start[3]
    set rx400_bstack, rx400_start[4]
    set $I19, rx400_start[5]
    store_lex unicode:"$\x{a2}", rx400_cur
    length rx400_eos, rx400_tgt
    eq $I19, 1, rx400_restart1258
    gt rx400_pos, rx400_eos, rx400_fail1259
    repr_get_attr_int $I11, self, rx400_curclass, "$!from"
    ne $I11, -1, rxscan401_done1265
    goto rxscan401_scan1264
  rxscan401_loop1263:
    inc rx400_pos
    gt rx400_pos, rx400_eos, rx400_fail1259
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!from", rx400_pos
  rxscan401_scan1264:
    nqp_rxmark rx400_bstack, rxscan401_loop1263, rx400_pos, 0
  rxscan401_done1265:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt402_01267
    nqp_push_label $P11, alt402_11268
    nqp_push_label $P11, alt402_21269
    nqp_push_label $P11, alt402_31270
    nqp_rxmark rx400_bstack, alt402_end1266, -1, 0
    rx400_cur."!alt"(rx400_pos, "alt_nfa__18_1361734135.804", $P11)
    goto rx400_fail1259
  alt402_01267:
    add $I11, rx400_pos, 1
    gt $I11, rx400_eos, rx400_fail1259
    substr $S10, rx400_tgt, rx400_pos, 1
    ne $S10, ucs4:"[", rx400_fail1259
    add rx400_pos, 1
    goto alt402_end1266
  alt402_11268:
    add $I11, rx400_pos, 1
    gt $I11, rx400_eos, rx400_fail1259
    substr $S10, rx400_tgt, rx400_pos, 1
    ne $S10, ucs4:"+", rx400_fail1259
    add rx400_pos, 1
    goto alt402_end1266
  alt402_21269:
    add $I11, rx400_pos, 1
    gt $I11, rx400_eos, rx400_fail1259
    substr $S10, rx400_tgt, rx400_pos, 1
    ne $S10, ucs4:"-", rx400_fail1259
    add rx400_pos, 1
    goto alt402_end1266
  alt402_31270:
    add $I11, rx400_pos, 1
    gt $I11, rx400_eos, rx400_fail1259
    substr $S10, rx400_tgt, rx400_pos, 1
    ne $S10, ucs4:":", rx400_fail1259
    add rx400_pos, 1
    goto alt402_end1266
  alt402_end1266:
    rx400_cur."!cursor_pass"(rx400_pos, 'backtrack'=>1)
    .return (rx400_cur)
  rx400_restart1258:
    repr_get_attr_obj rx400_cstack, rx400_cur, rx400_curclass, "$!cstack"
  rx400_fail1259:
    unless rx400_bstack, rx400_done1257
    pop $I19, rx400_bstack
    if_null rx400_cstack, rx400_cstack_done1262
    unless rx400_cstack, rx400_cstack_done1262
    dec $I19
    set $P11, rx400_cstack[$I19]
  rx400_cstack_done1262:
    pop rx400_rep, rx400_bstack
    pop rx400_pos, rx400_bstack
    pop $I19, rx400_bstack
    lt rx400_pos, -1, rx400_done1257
    lt rx400_pos, 0, rx400_fail1259
    eq $I19, 0, rx400_fail1259
    nqp_islist $I20, rx400_cstack
    unless $I20, rx400_jump1260
    elements $I18, rx400_bstack
    le $I18, 0, rx400_cut1261
    dec $I18
    set $I18, rx400_bstack[$I18]
  rx400_cut1261:
    assign rx400_cstack, $I18
  rx400_jump1260:
    jump $I19
  rx400_done1257:
    rx400_cur."!cursor_fail"()
    .return (rx400_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_elem" :subid("cuid_97_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 279
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_103_1361734134.987' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx405_start
    .local string rx405_tgt
    .local int rx405_pos
    .local int rx405_off
    .local int rx405_eos
    .local int rx405_rep
    .local pmc rx405_cur
    .local pmc rx405_curclass
    .local pmc rx405_bstack
    .local pmc rx405_cstack
    rx405_start = self."!cursor_start_all"()
    set rx405_cur, rx405_start[0]
    set rx405_tgt, rx405_start[1]
    set rx405_pos, rx405_start[2]
    set rx405_curclass, rx405_start[3]
    set rx405_bstack, rx405_start[4]
    set $I19, rx405_start[5]
    store_lex unicode:"$\x{a2}", rx405_cur
    length rx405_eos, rx405_tgt
    eq $I19, 1, rx405_restart1277
    gt rx405_pos, rx405_eos, rx405_fail1278
    repr_get_attr_int $I11, self, rx405_curclass, "$!from"
    ne $I11, -1, rxscan406_done1284
    goto rxscan406_scan1283
  rxscan406_loop1282:
    inc rx405_pos
    gt rx405_pos, rx405_eos, rx405_fail1278
    repr_bind_attr_int rx405_cur, rx405_curclass, "$!from", rx405_pos
  rxscan406_scan1283:
    nqp_rxmark rx405_bstack, rxscan406_loop1282, rx405_pos, 0
  rxscan406_done1284:
    nqp_rxmark rx405_bstack, rxcap407_fail1286, rx405_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt408_01288
    nqp_push_label $P11, alt408_11289
    nqp_push_label $P11, alt408_21290
    nqp_rxmark rx405_bstack, alt408_end1287, -1, 0
    rx405_cur."!alt"(rx405_pos, "alt_nfa__19_1361734135.966", $P11)
    goto rx405_fail1278
  alt408_01288:
    add $I11, rx405_pos, 1
    gt $I11, rx405_eos, rx405_fail1278
    substr $S10, rx405_tgt, rx405_pos, 1
    ne $S10, ucs4:"+", rx405_fail1278
    add rx405_pos, 1
    goto alt408_end1287
  alt408_11289:
    add $I11, rx405_pos, 1
    gt $I11, rx405_eos, rx405_fail1278
    substr $S10, rx405_tgt, rx405_pos, 1
    ne $S10, ucs4:"-", rx405_fail1278
    add rx405_pos, 1
    goto alt408_end1287
  alt408_21290:
    goto alt408_end1287
  alt408_end1287:
    nqp_rxcommit rx405_bstack, alt408_end1287
    nqp_rxpeek $I19, rx405_bstack, rxcap407_fail1286
    inc $I19
    set $I11, rx405_bstack[$I19]
    repr_bind_attr_int rx405_cur, rx405_curclass, "$!pos", rx405_pos
    $P11 = rx405_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx405_pos)
    rx405_cstack = rx405_cur."!cursor_capture"($P11, "sign")
    goto rxcap407_done1285
  rxcap407_fail1286:
    goto rx405_fail1278
  rxcap407_done1285:
    nqp_rxmark rx405_bstack, rxquantr410_done1293, rx405_pos, 0
  rxquantr410_loop1292:
    repr_bind_attr_int rx405_cur, rx405_curclass, "$!pos", rx405_pos
    $P11 = rx405_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx405_curclass, "$!pos"
    lt $I11, 0, rx405_fail1278
    goto rxsubrule411_pass1294
  rxsubrule411_back1295:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx405_curclass, "$!pos"
    lt $I11, 0, rx405_fail1278
  rxsubrule411_pass1294:
    rx405_cstack = rx405_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule411_back1295
    push rx405_bstack, $I11
    push rx405_bstack, 0
    push rx405_bstack, rx405_pos
    elements $I11, rx405_cstack
    push rx405_bstack, $I11
    repr_get_attr_int rx405_pos, $P11, rx405_curclass, "$!pos"
    nqp_rxpeek $I19, rx405_bstack, rxquantr410_done1293
    inc $I19
    inc $I19
    set rx405_rep, rx405_bstack[$I19]
    nqp_rxcommit rx405_bstack, rxquantr410_done1293
    inc rx405_rep
  rxquantr410_done1293:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt412_01297
    nqp_push_label $P11, alt412_11396
    nqp_push_label $P11, alt412_21401
    nqp_rxmark rx405_bstack, alt412_end1296, -1, 0
    rx405_cur."!alt"(rx405_pos, "alt_nfa__21_1361734135.967", $P11)
    goto rx405_fail1278
  alt412_01297:
    add $I11, rx405_pos, 1
    gt $I11, rx405_eos, rx405_fail1278
    substr $S10, rx405_tgt, rx405_pos, 1
    ne $S10, ucs4:"[", rx405_fail1278
    add rx405_pos, 1
    nqp_rxmark rx405_bstack, rxquantr413_done1299, rx405_pos, 0
  rxquantr413_loop1298:
    .const 'Sub' $P5001 = 'cuid_103_1361734134.987' 
    capture_lex $P5001
    repr_bind_attr_int rx405_cur, rx405_curclass, "$!pos", rx405_pos
    $P11 = rx405_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx405_curclass, "$!pos"
    lt $I11, 0, rx405_fail1278
    goto rxsubrule444_pass1392
  rxsubrule444_back1393:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx405_curclass, "$!pos"
    lt $I11, 0, rx405_fail1278
  rxsubrule444_pass1392:
    rx405_cstack = rx405_cur."!cursor_capture"($P11, "charspec")
    set_addr $I11, rxsubrule444_back1393
    push rx405_bstack, $I11
    push rx405_bstack, 0
    push rx405_bstack, rx405_pos
    elements $I11, rx405_cstack
    push rx405_bstack, $I11
    repr_get_attr_int rx405_pos, $P11, rx405_curclass, "$!pos"
    nqp_rxpeek $I19, rx405_bstack, rxquantr413_done1299
    inc $I19
    inc $I19
    set rx405_rep, rx405_bstack[$I19]
    nqp_rxcommit rx405_bstack, rxquantr413_done1299
    inc rx405_rep
    nqp_rxmark rx405_bstack, rxquantr413_done1299, rx405_pos, rx405_rep
    goto rxquantr413_loop1298
  rxquantr413_done1299:
    nqp_rxmark rx405_bstack, rxquantr445_done1395, rx405_pos, 0
  rxquantr445_loop1394:
    ge rx405_pos, rx405_eos, rx405_fail1278
    is_cclass $I11, .CCLASS_WHITESPACE, rx405_tgt, rx405_pos
    unless $I11, rx405_fail1278
    add rx405_pos, 1
    nqp_rxpeek $I19, rx405_bstack, rxquantr445_done1395
    inc $I19
    inc $I19
    set rx405_rep, rx405_bstack[$I19]
    nqp_rxcommit rx405_bstack, rxquantr445_done1395
    inc rx405_rep
    nqp_rxmark rx405_bstack, rxquantr445_done1395, rx405_pos, rx405_rep
    goto rxquantr445_loop1394
  rxquantr445_done1395:
    add $I11, rx405_pos, 1
    gt $I11, rx405_eos, rx405_fail1278
    substr $S10, rx405_tgt, rx405_pos, 1
    ne $S10, ucs4:"]", rx405_fail1278
    add rx405_pos, 1
    goto alt412_end1296
  alt412_11396:
    nqp_rxmark rx405_bstack, rxcap446_fail1398, rx405_pos, 0
    nqp_rxmark rx405_bstack, rxquantr447_done1400, -1, 0
  rxquantr447_loop1399:
    ge rx405_pos, rx405_eos, rx405_fail1278
    is_cclass $I11, .CCLASS_WORD, rx405_tgt, rx405_pos
    unless $I11, rx405_fail1278
    add rx405_pos, 1
    nqp_rxpeek $I19, rx405_bstack, rxquantr447_done1400
    inc $I19
    inc $I19
    set rx405_rep, rx405_bstack[$I19]
    nqp_rxcommit rx405_bstack, rxquantr447_done1400
    inc rx405_rep
    nqp_rxmark rx405_bstack, rxquantr447_done1400, rx405_pos, rx405_rep
    goto rxquantr447_loop1399
  rxquantr447_done1400:
    nqp_rxpeek $I19, rx405_bstack, rxcap446_fail1398
    inc $I19
    set $I11, rx405_bstack[$I19]
    repr_bind_attr_int rx405_cur, rx405_curclass, "$!pos", rx405_pos
    $P11 = rx405_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx405_pos)
    rx405_cstack = rx405_cur."!cursor_capture"($P11, "name")
    goto rxcap446_done1397
  rxcap446_fail1398:
    goto rx405_fail1278
  rxcap446_done1397:
    goto alt412_end1296
  alt412_21401:
    add $I11, rx405_pos, 1
    gt $I11, rx405_eos, rx405_fail1278
    substr $S10, rx405_tgt, rx405_pos, 1
    ne $S10, ucs4:":", rx405_fail1278
    add rx405_pos, 1
    nqp_rxmark rx405_bstack, rxcap448_fail1403, rx405_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt449_01405
    nqp_push_label $P11, alt449_11406
    nqp_rxmark rx405_bstack, alt449_end1404, -1, 0
    rx405_cur."!alt"(rx405_pos, "alt_nfa__20_1361734135.967", $P11)
    goto rx405_fail1278
  alt449_01405:
    add $I11, rx405_pos, 1
    gt $I11, rx405_eos, rx405_fail1278
    substr $S10, rx405_tgt, rx405_pos, 1
    ne $S10, ucs4:"!", rx405_fail1278
    add rx405_pos, 1
    goto alt449_end1404
  alt449_11406:
    goto alt449_end1404
  alt449_end1404:
    nqp_rxcommit rx405_bstack, alt449_end1404
    nqp_rxpeek $I19, rx405_bstack, rxcap448_fail1403
    inc $I19
    set $I11, rx405_bstack[$I19]
    repr_bind_attr_int rx405_cur, rx405_curclass, "$!pos", rx405_pos
    $P11 = rx405_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx405_pos)
    rx405_cstack = rx405_cur."!cursor_capture"($P11, "invert")
    goto rxcap448_done1402
  rxcap448_fail1403:
    goto rx405_fail1278
  rxcap448_done1402:
    nqp_rxmark rx405_bstack, rxcap451_fail1409, rx405_pos, 0
    nqp_rxmark rx405_bstack, rxquantr452_done1411, -1, 0
  rxquantr452_loop1410:
    ge rx405_pos, rx405_eos, rx405_fail1278
    is_cclass $I11, .CCLASS_WORD, rx405_tgt, rx405_pos
    unless $I11, rx405_fail1278
    add rx405_pos, 1
    nqp_rxpeek $I19, rx405_bstack, rxquantr452_done1411
    inc $I19
    inc $I19
    set rx405_rep, rx405_bstack[$I19]
    nqp_rxcommit rx405_bstack, rxquantr452_done1411
    inc rx405_rep
    nqp_rxmark rx405_bstack, rxquantr452_done1411, rx405_pos, rx405_rep
    goto rxquantr452_loop1410
  rxquantr452_done1411:
    nqp_rxpeek $I19, rx405_bstack, rxcap451_fail1409
    inc $I19
    set $I11, rx405_bstack[$I19]
    repr_bind_attr_int rx405_cur, rx405_curclass, "$!pos", rx405_pos
    $P11 = rx405_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx405_pos)
    rx405_cstack = rx405_cur."!cursor_capture"($P11, "uniprop")
    goto rxcap451_done1408
  rxcap451_fail1409:
    goto rx405_fail1278
  rxcap451_done1408:
    goto alt412_end1296
  alt412_end1296:
    nqp_rxcommit rx405_bstack, alt412_end1296
    nqp_rxmark rx405_bstack, rxquantr453_done1413, rx405_pos, 0
  rxquantr453_loop1412:
    repr_bind_attr_int rx405_cur, rx405_curclass, "$!pos", rx405_pos
    $P11 = rx405_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx405_curclass, "$!pos"
    lt $I11, 0, rx405_fail1278
    goto rxsubrule454_pass1414
  rxsubrule454_back1415:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx405_curclass, "$!pos"
    lt $I11, 0, rx405_fail1278
  rxsubrule454_pass1414:
    rx405_cstack = rx405_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule454_back1415
    push rx405_bstack, $I11
    push rx405_bstack, 0
    push rx405_bstack, rx405_pos
    elements $I11, rx405_cstack
    push rx405_bstack, $I11
    repr_get_attr_int rx405_pos, $P11, rx405_curclass, "$!pos"
    nqp_rxpeek $I19, rx405_bstack, rxquantr453_done1413
    inc $I19
    inc $I19
    set rx405_rep, rx405_bstack[$I19]
    nqp_rxcommit rx405_bstack, rxquantr453_done1413
    inc rx405_rep
  rxquantr453_done1413:
    rx405_cur."!cursor_pass"(rx405_pos, "cclass_elem", 'backtrack'=>1)
    .return (rx405_cur)
  rx405_restart1277:
    repr_get_attr_obj rx405_cstack, rx405_cur, rx405_curclass, "$!cstack"
  rx405_fail1278:
    unless rx405_bstack, rx405_done1276
    pop $I19, rx405_bstack
    if_null rx405_cstack, rx405_cstack_done1281
    unless rx405_cstack, rx405_cstack_done1281
    dec $I19
    set $P11, rx405_cstack[$I19]
  rx405_cstack_done1281:
    pop rx405_rep, rx405_bstack
    pop rx405_pos, rx405_bstack
    pop $I19, rx405_bstack
    lt rx405_pos, -1, rx405_done1276
    lt rx405_pos, 0, rx405_fail1278
    eq $I19, 0, rx405_fail1278
    nqp_islist $I20, rx405_cstack
    unless $I20, rx405_jump1279
    elements $I18, rx405_bstack
    le $I18, 0, rx405_cut1280
    dec $I18
    set $I18, rx405_bstack[$I18]
  rx405_cut1280:
    assign rx405_cstack, $I18
  rx405_jump1279:
    jump $I19
  rx405_done1276:
    rx405_cur."!cursor_fail"()
    .return (rx405_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_103_1361734134.987") :anon :lex :outer("cuid_97_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .const 'Sub' $P5004 = 'cuid_98_1361734134.987' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_100_1361734134.987' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_102_1361734134.987' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx414_start
    .local string rx414_tgt
    .local int rx414_pos
    .local int rx414_off
    .local int rx414_eos
    .local int rx414_rep
    .local pmc rx414_cur
    .local pmc rx414_curclass
    .local pmc rx414_bstack
    .local pmc rx414_cstack
    rx414_start = self."!cursor_start_all"()
    set rx414_cur, rx414_start[0]
    set rx414_tgt, rx414_start[1]
    set rx414_pos, rx414_start[2]
    set rx414_curclass, rx414_start[3]
    set rx414_bstack, rx414_start[4]
    set $I19, rx414_start[5]
    store_lex unicode:"$\x{a2}", rx414_cur
    length rx414_eos, rx414_tgt
    eq $I19, 1, rx414_restart1302
    gt rx414_pos, rx414_eos, rx414_fail1303
    repr_get_attr_int $I11, self, rx414_curclass, "$!from"
    ne $I11, -1, rxscan415_done1309
    goto rxscan415_scan1308
  rxscan415_loop1307:
    inc rx414_pos
    gt rx414_pos, rx414_eos, rx414_fail1303
    repr_bind_attr_int rx414_cur, rx414_curclass, "$!from", rx414_pos
  rxscan415_scan1308:
    nqp_rxmark rx414_bstack, rxscan415_loop1307, rx414_pos, 0
  rxscan415_done1309:
  alt416_01311:
    nqp_rxmark rx414_bstack, alt416_11327, rx414_pos, 0
    nqp_rxmark rx414_bstack, rxquantr417_done1313, rx414_pos, 0
  rxquantr417_loop1312:
    ge rx414_pos, rx414_eos, rx414_fail1303
    is_cclass $I11, .CCLASS_WHITESPACE, rx414_tgt, rx414_pos
    unless $I11, rx414_fail1303
    add rx414_pos, 1
    nqp_rxpeek $I19, rx414_bstack, rxquantr417_done1313
    inc $I19
    inc $I19
    set rx414_rep, rx414_bstack[$I19]
    nqp_rxcommit rx414_bstack, rxquantr417_done1313
    inc rx414_rep
    nqp_rxmark rx414_bstack, rxquantr417_done1313, rx414_pos, rx414_rep
    goto rxquantr417_loop1312
  rxquantr417_done1313:
    add $I11, rx414_pos, 1
    gt $I11, rx414_eos, rx414_fail1303
    substr $S10, rx414_tgt, rx414_pos, 1
    ne $S10, ucs4:"-", rx414_fail1303
    add rx414_pos, 1
    .const 'Sub' $P5001 = 'cuid_98_1361734134.987' 
    capture_lex $P5001
    repr_bind_attr_int rx414_cur, rx414_curclass, "$!pos", rx414_pos
    $P11 = rx414_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx414_curclass, "$!pos"
    ge $I11, 0, rx414_fail1303
    repr_bind_attr_int rx414_cur, rx414_curclass, "$!pos", rx414_pos
    $P11 = rx414_cur."obs"("- as character range", ".. for range, for explicit - in character class, escape it or place as last thing")
    repr_get_attr_int $I11, $P11, rx414_curclass, "$!pos"
    lt $I11, 0, rx414_fail1303
    repr_get_attr_int rx414_pos, $P11, rx414_curclass, "$!pos"
    goto alt416_end1310
  alt416_11327:
    nqp_rxmark rx414_bstack, rxquantr422_done1329, rx414_pos, 0
  rxquantr422_loop1328:
    ge rx414_pos, rx414_eos, rx414_fail1303
    is_cclass $I11, .CCLASS_WHITESPACE, rx414_tgt, rx414_pos
    unless $I11, rx414_fail1303
    add rx414_pos, 1
    nqp_rxpeek $I19, rx414_bstack, rxquantr422_done1329
    inc $I19
    inc $I19
    set rx414_rep, rx414_bstack[$I19]
    nqp_rxcommit rx414_bstack, rxquantr422_done1329
    inc rx414_rep
    nqp_rxmark rx414_bstack, rxquantr422_done1329, rx414_pos, rx414_rep
    goto rxquantr422_loop1328
  rxquantr422_done1329:
    .const 'Sub' $P5002 = 'cuid_100_1361734134.987' 
    capture_lex $P5002
    repr_bind_attr_int rx414_cur, rx414_curclass, "$!pos", rx414_pos
    $P11 = rx414_cur.$P5002()
    repr_get_attr_int $I11, $P11, rx414_curclass, "$!pos"
    lt $I11, 0, rx414_fail1303
    nqp_rxmark rx414_bstack, rxsubrule431_pass1357, -1, 0
  rxsubrule431_pass1357:
    rx414_cstack = rx414_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx414_pos, $P11, rx414_curclass, "$!pos"
    nqp_rxmark rx414_bstack, rxquantr432_done1359, rx414_pos, 0
  rxquantr432_loop1358:
    nqp_rxmark rx414_bstack, rxquantr433_done1361, rx414_pos, 0
  rxquantr433_loop1360:
    ge rx414_pos, rx414_eos, rx414_fail1303
    is_cclass $I11, .CCLASS_WHITESPACE, rx414_tgt, rx414_pos
    unless $I11, rx414_fail1303
    add rx414_pos, 1
    nqp_rxpeek $I19, rx414_bstack, rxquantr433_done1361
    inc $I19
    inc $I19
    set rx414_rep, rx414_bstack[$I19]
    nqp_rxcommit rx414_bstack, rxquantr433_done1361
    inc rx414_rep
    nqp_rxmark rx414_bstack, rxquantr433_done1361, rx414_pos, rx414_rep
    goto rxquantr433_loop1360
  rxquantr433_done1361:
    add $I11, rx414_pos, 2
    gt $I11, rx414_eos, rx414_fail1303
    substr $S10, rx414_tgt, rx414_pos, 2
    ne $S10, ucs4:"..", rx414_fail1303
    add rx414_pos, 2
    nqp_rxmark rx414_bstack, rxquantr434_done1363, rx414_pos, 0
  rxquantr434_loop1362:
    ge rx414_pos, rx414_eos, rx414_fail1303
    is_cclass $I11, .CCLASS_WHITESPACE, rx414_tgt, rx414_pos
    unless $I11, rx414_fail1303
    add rx414_pos, 1
    nqp_rxpeek $I19, rx414_bstack, rxquantr434_done1363
    inc $I19
    inc $I19
    set rx414_rep, rx414_bstack[$I19]
    nqp_rxcommit rx414_bstack, rxquantr434_done1363
    inc rx414_rep
    nqp_rxmark rx414_bstack, rxquantr434_done1363, rx414_pos, rx414_rep
    goto rxquantr434_loop1362
  rxquantr434_done1363:
    .const 'Sub' $P5003 = 'cuid_102_1361734134.987' 
    capture_lex $P5003
    repr_bind_attr_int rx414_cur, rx414_curclass, "$!pos", rx414_pos
    $P11 = rx414_cur.$P5003()
    repr_get_attr_int $I11, $P11, rx414_curclass, "$!pos"
    lt $I11, 0, rx414_fail1303
    nqp_rxmark rx414_bstack, rxsubrule443_pass1391, -1, 0
  rxsubrule443_pass1391:
    rx414_cstack = rx414_cur."!cursor_capture"($P11, "1")
    repr_get_attr_int rx414_pos, $P11, rx414_curclass, "$!pos"
    nqp_rxpeek $I19, rx414_bstack, rxquantr432_done1359
    inc $I19
    inc $I19
    set rx414_rep, rx414_bstack[$I19]
    nqp_rxcommit rx414_bstack, rxquantr432_done1359
    inc rx414_rep
  rxquantr432_done1359:
  alt416_end1310:
    rx414_cur."!cursor_pass"(rx414_pos, 'backtrack'=>1)
    .return (rx414_cur)
  rx414_restart1302:
    repr_get_attr_obj rx414_cstack, rx414_cur, rx414_curclass, "$!cstack"
  rx414_fail1303:
    unless rx414_bstack, rx414_done1301
    pop $I19, rx414_bstack
    if_null rx414_cstack, rx414_cstack_done1306
    unless rx414_cstack, rx414_cstack_done1306
    dec $I19
    set $P11, rx414_cstack[$I19]
  rx414_cstack_done1306:
    pop rx414_rep, rx414_bstack
    pop rx414_pos, rx414_bstack
    pop $I19, rx414_bstack
    lt rx414_pos, -1, rx414_done1301
    lt rx414_pos, 0, rx414_fail1303
    eq $I19, 0, rx414_fail1303
    nqp_islist $I20, rx414_cstack
    unless $I20, rx414_jump1304
    elements $I18, rx414_bstack
    le $I18, 0, rx414_cut1305
    dec $I18
    set $I18, rx414_bstack[$I18]
  rx414_cut1305:
    assign rx414_cstack, $I18
  rx414_jump1304:
    jump $I19
  rx414_done1301:
    rx414_cur."!cursor_fail"()
    .return (rx414_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_98_1361734134.987") :anon :lex :outer("cuid_103_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx418_start
    .local string rx418_tgt
    .local int rx418_pos
    .local int rx418_off
    .local int rx418_eos
    .local int rx418_rep
    .local pmc rx418_cur
    .local pmc rx418_curclass
    .local pmc rx418_bstack
    .local pmc rx418_cstack
    rx418_start = self."!cursor_start_all"()
    set rx418_cur, rx418_start[0]
    set rx418_tgt, rx418_start[1]
    set rx418_pos, rx418_start[2]
    set rx418_curclass, rx418_start[3]
    set rx418_bstack, rx418_start[4]
    set $I19, rx418_start[5]
    store_lex unicode:"$\x{a2}", rx418_cur
    length rx418_eos, rx418_tgt
    eq $I19, 1, rx418_restart1316
    gt rx418_pos, rx418_eos, rx418_fail1317
    repr_get_attr_int $I11, self, rx418_curclass, "$!from"
    ne $I11, -1, rxscan419_done1323
    goto rxscan419_scan1322
  rxscan419_loop1321:
    inc rx418_pos
    gt rx418_pos, rx418_eos, rx418_fail1317
    repr_bind_attr_int rx418_cur, rx418_curclass, "$!from", rx418_pos
  rxscan419_scan1322:
    nqp_rxmark rx418_bstack, rxscan419_loop1321, rx418_pos, 0
  rxscan419_done1323:
    nqp_rxmark rx418_bstack, rxquantr420_done1325, rx418_pos, 0
  rxquantr420_loop1324:
    ge rx418_pos, rx418_eos, rx418_fail1317
    is_cclass $I11, .CCLASS_WHITESPACE, rx418_tgt, rx418_pos
    unless $I11, rx418_fail1317
    add rx418_pos, 1
    nqp_rxpeek $I19, rx418_bstack, rxquantr420_done1325
    inc $I19
    inc $I19
    set rx418_rep, rx418_bstack[$I19]
    nqp_rxcommit rx418_bstack, rxquantr420_done1325
    inc rx418_rep
    nqp_rxmark rx418_bstack, rxquantr420_done1325, rx418_pos, rx418_rep
    goto rxquantr420_loop1324
  rxquantr420_done1325:
    add $I11, rx418_pos, 1
    gt $I11, rx418_eos, rx418_fail1317
    substr $S10, rx418_tgt, rx418_pos, 1
    ne $S10, ucs4:"]", rx418_fail1317
    add rx418_pos, 1
    rx418_cur."!cursor_pass"(rx418_pos, 'backtrack'=>1)
    .return (rx418_cur)
  rx418_restart1316:
    repr_get_attr_obj rx418_cstack, rx418_cur, rx418_curclass, "$!cstack"
  rx418_fail1317:
    unless rx418_bstack, rx418_done1315
    pop $I19, rx418_bstack
    if_null rx418_cstack, rx418_cstack_done1320
    unless rx418_cstack, rx418_cstack_done1320
    dec $I19
    set $P11, rx418_cstack[$I19]
  rx418_cstack_done1320:
    pop rx418_rep, rx418_bstack
    pop rx418_pos, rx418_bstack
    pop $I19, rx418_bstack
    lt rx418_pos, -1, rx418_done1315
    lt rx418_pos, 0, rx418_fail1317
    eq $I19, 0, rx418_fail1317
    nqp_islist $I20, rx418_cstack
    unless $I20, rx418_jump1318
    elements $I18, rx418_bstack
    le $I18, 0, rx418_cut1319
    dec $I18
    set $I18, rx418_bstack[$I18]
  rx418_cut1319:
    assign rx418_cstack, $I18
  rx418_jump1318:
    jump $I19
  rx418_done1315:
    rx418_cur."!cursor_fail"()
    .return (rx418_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_100_1361734134.987") :anon :lex :outer("cuid_103_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .const 'Sub' $P5002 = 'cuid_99_1361734134.987' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx423_start
    .local string rx423_tgt
    .local int rx423_pos
    .local int rx423_off
    .local int rx423_eos
    .local int rx423_rep
    .local pmc rx423_cur
    .local pmc rx423_curclass
    .local pmc rx423_bstack
    .local pmc rx423_cstack
    rx423_start = self."!cursor_start_all"()
    set rx423_cur, rx423_start[0]
    set rx423_tgt, rx423_start[1]
    set rx423_pos, rx423_start[2]
    set rx423_curclass, rx423_start[3]
    set rx423_bstack, rx423_start[4]
    set $I19, rx423_start[5]
    store_lex unicode:"$\x{a2}", rx423_cur
    length rx423_eos, rx423_tgt
    eq $I19, 1, rx423_restart1332
    gt rx423_pos, rx423_eos, rx423_fail1333
    repr_get_attr_int $I11, self, rx423_curclass, "$!from"
    ne $I11, -1, rxscan424_done1339
    goto rxscan424_scan1338
  rxscan424_loop1337:
    inc rx423_pos
    gt rx423_pos, rx423_eos, rx423_fail1333
    repr_bind_attr_int rx423_cur, rx423_curclass, "$!from", rx423_pos
  rxscan424_scan1338:
    nqp_rxmark rx423_bstack, rxscan424_loop1337, rx423_pos, 0
  rxscan424_done1339:
  alt425_01341:
    nqp_rxmark rx423_bstack, alt425_11343, rx423_pos, 0
    add $I11, rx423_pos, 1
    gt $I11, rx423_eos, rx423_fail1333
    substr $S10, rx423_tgt, rx423_pos, 1
    ne $S10, ucs4:"\\", rx423_fail1333
    add rx423_pos, 1
    repr_bind_attr_int rx423_cur, rx423_curclass, "$!pos", rx423_pos
    $P11 = rx423_cur."backslash"()
    repr_get_attr_int $I11, $P11, rx423_curclass, "$!pos"
    lt $I11, 0, rx423_fail1333
    nqp_rxmark rx423_bstack, rxsubrule426_pass1342, -1, 0
  rxsubrule426_pass1342:
    rx423_cstack = rx423_cur."!cursor_capture"($P11, "backslash")
    repr_get_attr_int rx423_pos, $P11, rx423_curclass, "$!pos"
    goto alt425_end1340
  alt425_11343:
    .const 'Sub' $P5001 = 'cuid_99_1361734134.987' 
    capture_lex $P5001
    repr_bind_attr_int rx423_cur, rx423_curclass, "$!pos", rx423_pos
    $P11 = rx423_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx423_curclass, "$!pos"
    lt $I11, 0, rx423_fail1333
    nqp_rxmark rx423_bstack, rxsubrule430_pass1356, -1, 0
  rxsubrule430_pass1356:
    rx423_cstack = rx423_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx423_pos, $P11, rx423_curclass, "$!pos"
  alt425_end1340:
    rx423_cur."!cursor_pass"(rx423_pos, 'backtrack'=>1)
    .return (rx423_cur)
  rx423_restart1332:
    repr_get_attr_obj rx423_cstack, rx423_cur, rx423_curclass, "$!cstack"
  rx423_fail1333:
    unless rx423_bstack, rx423_done1331
    pop $I19, rx423_bstack
    if_null rx423_cstack, rx423_cstack_done1336
    unless rx423_cstack, rx423_cstack_done1336
    dec $I19
    set $P11, rx423_cstack[$I19]
  rx423_cstack_done1336:
    pop rx423_rep, rx423_bstack
    pop rx423_pos, rx423_bstack
    pop $I19, rx423_bstack
    lt rx423_pos, -1, rx423_done1331
    lt rx423_pos, 0, rx423_fail1333
    eq $I19, 0, rx423_fail1333
    nqp_islist $I20, rx423_cstack
    unless $I20, rx423_jump1334
    elements $I18, rx423_bstack
    le $I18, 0, rx423_cut1335
    dec $I18
    set $I18, rx423_bstack[$I18]
  rx423_cut1335:
    assign rx423_cstack, $I18
  rx423_jump1334:
    jump $I19
  rx423_done1331:
    rx423_cur."!cursor_fail"()
    .return (rx423_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_99_1361734134.987") :anon :lex :outer("cuid_100_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx427_start
    .local string rx427_tgt
    .local int rx427_pos
    .local int rx427_off
    .local int rx427_eos
    .local int rx427_rep
    .local pmc rx427_cur
    .local pmc rx427_curclass
    .local pmc rx427_bstack
    .local pmc rx427_cstack
    rx427_start = self."!cursor_start_all"()
    set rx427_cur, rx427_start[0]
    set rx427_tgt, rx427_start[1]
    set rx427_pos, rx427_start[2]
    set rx427_curclass, rx427_start[3]
    set rx427_bstack, rx427_start[4]
    set $I19, rx427_start[5]
    store_lex unicode:"$\x{a2}", rx427_cur
    length rx427_eos, rx427_tgt
    eq $I19, 1, rx427_restart1346
    gt rx427_pos, rx427_eos, rx427_fail1347
    repr_get_attr_int $I11, self, rx427_curclass, "$!from"
    ne $I11, -1, rxscan428_done1353
    goto rxscan428_scan1352
  rxscan428_loop1351:
    inc rx427_pos
    gt rx427_pos, rx427_eos, rx427_fail1347
    repr_bind_attr_int rx427_cur, rx427_curclass, "$!from", rx427_pos
  rxscan428_scan1352:
    nqp_rxmark rx427_bstack, rxscan428_loop1351, rx427_pos, 0
  rxscan428_done1353:
    nqp_rxmark rx427_bstack, rxconj429_fail1354, rx427_pos, 0
    goto rxconj429_first1355
  rxconj429_fail1354:
    goto rx427_fail1347
  rxconj429_first1355:
    add $I11, rx427_pos, 1
    gt $I11, rx427_eos, rx427_fail1347
    substr $S10, rx427_tgt, rx427_pos, 1
    eq $S10, ucs4:"]", rx427_fail1347
    add rx427_pos, 1
    nqp_rxpeek $I19, rx427_bstack, rxconj429_fail1354
    inc $I19
    set $I11, rx427_bstack[$I19]
    nqp_rxmark rx427_bstack, rxconj429_fail1354, $I11, rx427_pos
    set rx427_pos, $I11
    add $I11, rx427_pos, 1
    gt $I11, rx427_eos, rx427_fail1347
    substr $S10, rx427_tgt, rx427_pos, 1
    eq $S10, ucs4:"\\", rx427_fail1347
    add rx427_pos, 1
    nqp_rxpeek $I19, rx427_bstack, rxconj429_fail1354
    inc $I19
    set $I11, rx427_bstack[$I19]
    inc $I19
    set $I12, rx427_bstack[$I19]
    ne rx427_pos, $I12, rx427_fail1347
    set rx427_pos, $I11
    ge rx427_pos, rx427_eos, rx427_fail1347
    add rx427_pos, 1
    rx427_cur."!cursor_pass"(rx427_pos, 'backtrack'=>1)
    .return (rx427_cur)
  rx427_restart1346:
    repr_get_attr_obj rx427_cstack, rx427_cur, rx427_curclass, "$!cstack"
  rx427_fail1347:
    unless rx427_bstack, rx427_done1345
    pop $I19, rx427_bstack
    if_null rx427_cstack, rx427_cstack_done1350
    unless rx427_cstack, rx427_cstack_done1350
    dec $I19
    set $P11, rx427_cstack[$I19]
  rx427_cstack_done1350:
    pop rx427_rep, rx427_bstack
    pop rx427_pos, rx427_bstack
    pop $I19, rx427_bstack
    lt rx427_pos, -1, rx427_done1345
    lt rx427_pos, 0, rx427_fail1347
    eq $I19, 0, rx427_fail1347
    nqp_islist $I20, rx427_cstack
    unless $I20, rx427_jump1348
    elements $I18, rx427_bstack
    le $I18, 0, rx427_cut1349
    dec $I18
    set $I18, rx427_bstack[$I18]
  rx427_cut1349:
    assign rx427_cstack, $I18
  rx427_jump1348:
    jump $I19
  rx427_done1345:
    rx427_cur."!cursor_fail"()
    .return (rx427_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_102_1361734134.987") :anon :lex :outer("cuid_103_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .const 'Sub' $P5002 = 'cuid_101_1361734134.987' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx435_start
    .local string rx435_tgt
    .local int rx435_pos
    .local int rx435_off
    .local int rx435_eos
    .local int rx435_rep
    .local pmc rx435_cur
    .local pmc rx435_curclass
    .local pmc rx435_bstack
    .local pmc rx435_cstack
    rx435_start = self."!cursor_start_all"()
    set rx435_cur, rx435_start[0]
    set rx435_tgt, rx435_start[1]
    set rx435_pos, rx435_start[2]
    set rx435_curclass, rx435_start[3]
    set rx435_bstack, rx435_start[4]
    set $I19, rx435_start[5]
    store_lex unicode:"$\x{a2}", rx435_cur
    length rx435_eos, rx435_tgt
    eq $I19, 1, rx435_restart1366
    gt rx435_pos, rx435_eos, rx435_fail1367
    repr_get_attr_int $I11, self, rx435_curclass, "$!from"
    ne $I11, -1, rxscan436_done1373
    goto rxscan436_scan1372
  rxscan436_loop1371:
    inc rx435_pos
    gt rx435_pos, rx435_eos, rx435_fail1367
    repr_bind_attr_int rx435_cur, rx435_curclass, "$!from", rx435_pos
  rxscan436_scan1372:
    nqp_rxmark rx435_bstack, rxscan436_loop1371, rx435_pos, 0
  rxscan436_done1373:
  alt437_01375:
    nqp_rxmark rx435_bstack, alt437_11377, rx435_pos, 0
    add $I11, rx435_pos, 1
    gt $I11, rx435_eos, rx435_fail1367
    substr $S10, rx435_tgt, rx435_pos, 1
    ne $S10, ucs4:"\\", rx435_fail1367
    add rx435_pos, 1
    repr_bind_attr_int rx435_cur, rx435_curclass, "$!pos", rx435_pos
    $P11 = rx435_cur."backslash"()
    repr_get_attr_int $I11, $P11, rx435_curclass, "$!pos"
    lt $I11, 0, rx435_fail1367
    nqp_rxmark rx435_bstack, rxsubrule438_pass1376, -1, 0
  rxsubrule438_pass1376:
    rx435_cstack = rx435_cur."!cursor_capture"($P11, "backslash")
    repr_get_attr_int rx435_pos, $P11, rx435_curclass, "$!pos"
    goto alt437_end1374
  alt437_11377:
    .const 'Sub' $P5001 = 'cuid_101_1361734134.987' 
    capture_lex $P5001
    repr_bind_attr_int rx435_cur, rx435_curclass, "$!pos", rx435_pos
    $P11 = rx435_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx435_curclass, "$!pos"
    lt $I11, 0, rx435_fail1367
    nqp_rxmark rx435_bstack, rxsubrule442_pass1390, -1, 0
  rxsubrule442_pass1390:
    rx435_cstack = rx435_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx435_pos, $P11, rx435_curclass, "$!pos"
  alt437_end1374:
    rx435_cur."!cursor_pass"(rx435_pos, 'backtrack'=>1)
    .return (rx435_cur)
  rx435_restart1366:
    repr_get_attr_obj rx435_cstack, rx435_cur, rx435_curclass, "$!cstack"
  rx435_fail1367:
    unless rx435_bstack, rx435_done1365
    pop $I19, rx435_bstack
    if_null rx435_cstack, rx435_cstack_done1370
    unless rx435_cstack, rx435_cstack_done1370
    dec $I19
    set $P11, rx435_cstack[$I19]
  rx435_cstack_done1370:
    pop rx435_rep, rx435_bstack
    pop rx435_pos, rx435_bstack
    pop $I19, rx435_bstack
    lt rx435_pos, -1, rx435_done1365
    lt rx435_pos, 0, rx435_fail1367
    eq $I19, 0, rx435_fail1367
    nqp_islist $I20, rx435_cstack
    unless $I20, rx435_jump1368
    elements $I18, rx435_bstack
    le $I18, 0, rx435_cut1369
    dec $I18
    set $I18, rx435_bstack[$I18]
  rx435_cut1369:
    assign rx435_cstack, $I18
  rx435_jump1368:
    jump $I19
  rx435_done1365:
    rx435_cur."!cursor_fail"()
    .return (rx435_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_101_1361734134.987") :anon :lex :outer("cuid_102_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx439_start
    .local string rx439_tgt
    .local int rx439_pos
    .local int rx439_off
    .local int rx439_eos
    .local int rx439_rep
    .local pmc rx439_cur
    .local pmc rx439_curclass
    .local pmc rx439_bstack
    .local pmc rx439_cstack
    rx439_start = self."!cursor_start_all"()
    set rx439_cur, rx439_start[0]
    set rx439_tgt, rx439_start[1]
    set rx439_pos, rx439_start[2]
    set rx439_curclass, rx439_start[3]
    set rx439_bstack, rx439_start[4]
    set $I19, rx439_start[5]
    store_lex unicode:"$\x{a2}", rx439_cur
    length rx439_eos, rx439_tgt
    eq $I19, 1, rx439_restart1380
    gt rx439_pos, rx439_eos, rx439_fail1381
    repr_get_attr_int $I11, self, rx439_curclass, "$!from"
    ne $I11, -1, rxscan440_done1387
    goto rxscan440_scan1386
  rxscan440_loop1385:
    inc rx439_pos
    gt rx439_pos, rx439_eos, rx439_fail1381
    repr_bind_attr_int rx439_cur, rx439_curclass, "$!from", rx439_pos
  rxscan440_scan1386:
    nqp_rxmark rx439_bstack, rxscan440_loop1385, rx439_pos, 0
  rxscan440_done1387:
    nqp_rxmark rx439_bstack, rxconj441_fail1388, rx439_pos, 0
    goto rxconj441_first1389
  rxconj441_fail1388:
    goto rx439_fail1381
  rxconj441_first1389:
    add $I11, rx439_pos, 1
    gt $I11, rx439_eos, rx439_fail1381
    substr $S10, rx439_tgt, rx439_pos, 1
    eq $S10, ucs4:"]", rx439_fail1381
    add rx439_pos, 1
    nqp_rxpeek $I19, rx439_bstack, rxconj441_fail1388
    inc $I19
    set $I11, rx439_bstack[$I19]
    nqp_rxmark rx439_bstack, rxconj441_fail1388, $I11, rx439_pos
    set rx439_pos, $I11
    add $I11, rx439_pos, 1
    gt $I11, rx439_eos, rx439_fail1381
    substr $S10, rx439_tgt, rx439_pos, 1
    eq $S10, ucs4:"\\", rx439_fail1381
    add rx439_pos, 1
    nqp_rxpeek $I19, rx439_bstack, rxconj441_fail1388
    inc $I19
    set $I11, rx439_bstack[$I19]
    inc $I19
    set $I12, rx439_bstack[$I19]
    ne rx439_pos, $I12, rx439_fail1381
    set rx439_pos, $I11
    ge rx439_pos, rx439_eos, rx439_fail1381
    add rx439_pos, 1
    rx439_cur."!cursor_pass"(rx439_pos, 'backtrack'=>1)
    .return (rx439_cur)
  rx439_restart1380:
    repr_get_attr_obj rx439_cstack, rx439_cur, rx439_curclass, "$!cstack"
  rx439_fail1381:
    unless rx439_bstack, rx439_done1379
    pop $I19, rx439_bstack
    if_null rx439_cstack, rx439_cstack_done1384
    unless rx439_cstack, rx439_cstack_done1384
    dec $I19
    set $P11, rx439_cstack[$I19]
  rx439_cstack_done1384:
    pop rx439_rep, rx439_bstack
    pop rx439_pos, rx439_bstack
    pop $I19, rx439_bstack
    lt rx439_pos, -1, rx439_done1379
    lt rx439_pos, 0, rx439_fail1381
    eq $I19, 0, rx439_fail1381
    nqp_islist $I20, rx439_cstack
    unless $I20, rx439_jump1382
    elements $I18, rx439_bstack
    le $I18, 0, rx439_cut1383
    dec $I18
    set $I18, rx439_bstack[$I18]
  rx439_cut1383:
    assign rx439_cstack, $I18
  rx439_jump1382:
    jump $I19
  rx439_done1379:
    rx439_cur."!cursor_fail"()
    .return (rx439_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_internal" :subid("cuid_104_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 298
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_105_1361734134.987' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx455_start
    .local string rx455_tgt
    .local int rx455_pos
    .local int rx455_off
    .local int rx455_eos
    .local int rx455_rep
    .local pmc rx455_cur
    .local pmc rx455_curclass
    .local pmc rx455_bstack
    .local pmc rx455_cstack
    rx455_start = self."!cursor_start_all"()
    set rx455_cur, rx455_start[0]
    set rx455_tgt, rx455_start[1]
    set rx455_pos, rx455_start[2]
    set rx455_curclass, rx455_start[3]
    set rx455_bstack, rx455_start[4]
    set $I19, rx455_start[5]
    store_lex unicode:"$\x{a2}", rx455_cur
    length rx455_eos, rx455_tgt
    eq $I19, 1, rx455_restart1418
    gt rx455_pos, rx455_eos, rx455_fail1419
    repr_get_attr_int $I11, self, rx455_curclass, "$!from"
    ne $I11, -1, rxscan456_done1425
    goto rxscan456_scan1424
  rxscan456_loop1423:
    inc rx455_pos
    gt rx455_pos, rx455_eos, rx455_fail1419
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!from", rx455_pos
  rxscan456_scan1424:
    nqp_rxmark rx455_bstack, rxscan456_loop1423, rx455_pos, 0
  rxscan456_done1425:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt457_01427
    nqp_push_label $P11, alt457_11449
    nqp_rxmark rx455_bstack, alt457_end1426, -1, 0
    rx455_cur."!alt"(rx455_pos, "alt_nfa__24_1361734135.995", $P11)
    goto rx455_fail1419
  alt457_01427:
    add $I11, rx455_pos, 1
    gt $I11, rx455_eos, rx455_fail1419
    substr $S10, rx455_tgt, rx455_pos, 1
    ne $S10, ucs4:":", rx455_fail1419
    add rx455_pos, 1
    nqp_rxmark rx455_bstack, rxquantr458_done1429, -1, 0
  rxquantr458_loop1428:
    .const 'Sub' $P5001 = 'cuid_105_1361734134.987' 
    capture_lex $P5001
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!pos", rx455_pos
    $P11 = rx455_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx455_curclass, "$!pos"
    lt $I11, 0, rx455_fail1419
    goto rxsubrule463_pass1445
  rxsubrule463_back1446:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx455_curclass, "$!pos"
    lt $I11, 0, rx455_fail1419
  rxsubrule463_pass1445:
    rx455_cstack = rx455_cur."!cursor_capture"($P11, "n")
    set_addr $I11, rxsubrule463_back1446
    push rx455_bstack, $I11
    push rx455_bstack, 0
    push rx455_bstack, rx455_pos
    elements $I11, rx455_cstack
    push rx455_bstack, $I11
    repr_get_attr_int rx455_pos, $P11, rx455_curclass, "$!pos"
    nqp_rxpeek $I19, rx455_bstack, rxquantr458_done1429
    inc $I19
    inc $I19
    set rx455_rep, rx455_bstack[$I19]
    nqp_rxcommit rx455_bstack, rxquantr458_done1429
    inc rx455_rep
  rxquantr458_done1429:
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!pos", rx455_pos
    $P11 = rx455_cur."mod_ident"()
    repr_get_attr_int $I11, $P11, rx455_curclass, "$!pos"
    lt $I11, 0, rx455_fail1419
    nqp_rxmark rx455_bstack, rxsubrule464_pass1447, -1, 0
  rxsubrule464_pass1447:
    rx455_cstack = rx455_cur."!cursor_capture"($P11, "mod_ident")
    repr_get_attr_int rx455_pos, $P11, rx455_curclass, "$!pos"
    le rx455_pos, 0, rx455_fail1419
    is_cclass $I11, .CCLASS_WORD, rx455_tgt, rx455_pos
    if $I11, rx455_fail1419
    sub $I11, rx455_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx455_tgt, $I11
    unless $I11, rx455_fail1419
    goto alt457_end1426
  alt457_11449:
    add $I11, rx455_pos, 1
    gt $I11, rx455_eos, rx455_fail1419
    substr $S10, rx455_tgt, rx455_pos, 1
    ne $S10, ucs4:":", rx455_fail1419
    add rx455_pos, 1
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!pos", rx455_pos
    $P11 = rx455_cur."mod_ident"()
    repr_get_attr_int $I11, $P11, rx455_curclass, "$!pos"
    lt $I11, 0, rx455_fail1419
    nqp_rxmark rx455_bstack, rxsubrule466_pass1450, -1, 0
  rxsubrule466_pass1450:
    rx455_cstack = rx455_cur."!cursor_capture"($P11, "mod_ident")
    repr_get_attr_int rx455_pos, $P11, rx455_curclass, "$!pos"
    nqp_rxmark rx455_bstack, rxquantr467_done1452, rx455_pos, 0
  rxquantr467_loop1451:
    add $I11, rx455_pos, 1
    gt $I11, rx455_eos, rx455_fail1419
    substr $S10, rx455_tgt, rx455_pos, 1
    ne $S10, ucs4:"(", rx455_fail1419
    add rx455_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt468_01454
    nqp_push_label $P11, alt468_11459
    nqp_push_label $P11, alt468_21461
    nqp_rxmark rx455_bstack, alt468_end1453, -1, 0
    rx455_cur."!alt"(rx455_pos, "alt_nfa__23_1361734135.995", $P11)
    goto rx455_fail1419
  alt468_01454:
    nqp_rxmark rx455_bstack, rxcap469_fail1456, rx455_pos, 0
    nqp_rxmark rx455_bstack, rxquantr470_done1458, -1, 0
  rxquantr470_loop1457:
    ge rx455_pos, rx455_eos, rx455_fail1419
    is_cclass $I11, .CCLASS_NUMERIC, rx455_tgt, rx455_pos
    unless $I11, rx455_fail1419
    add rx455_pos, 1
    nqp_rxpeek $I19, rx455_bstack, rxquantr470_done1458
    inc $I19
    inc $I19
    set rx455_rep, rx455_bstack[$I19]
    nqp_rxcommit rx455_bstack, rxquantr470_done1458
    inc rx455_rep
    nqp_rxmark rx455_bstack, rxquantr470_done1458, rx455_pos, rx455_rep
    goto rxquantr470_loop1457
  rxquantr470_done1458:
    nqp_rxpeek $I19, rx455_bstack, rxcap469_fail1456
    inc $I19
    set $I11, rx455_bstack[$I19]
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!pos", rx455_pos
    $P11 = rx455_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx455_pos)
    rx455_cstack = rx455_cur."!cursor_capture"($P11, "n")
    goto rxcap469_done1455
  rxcap469_fail1456:
    goto rx455_fail1419
  rxcap469_done1455:
    goto alt468_end1453
  alt468_11459:
    ge rx455_pos, rx455_eos, rx455_fail1419
    substr $S11, rx455_tgt, rx455_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx455_fail1419
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!pos", rx455_pos
    $P11 = rx455_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx455_curclass, "$!pos"
    lt $I11, 0, rx455_fail1419
    nqp_rxmark rx455_bstack, rxsubrule471_pass1460, -1, 0
  rxsubrule471_pass1460:
    rx455_cstack = rx455_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx455_pos, $P11, rx455_curclass, "$!pos"
    goto alt468_end1453
  alt468_21461:
    ge rx455_pos, rx455_eos, rx455_fail1419
    substr $S11, rx455_tgt, rx455_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx455_fail1419
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!pos", rx455_pos
    $P11 = rx455_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx455_curclass, "$!pos"
    lt $I11, 0, rx455_fail1419
    nqp_rxmark rx455_bstack, rxsubrule472_pass1462, -1, 0
  rxsubrule472_pass1462:
    rx455_cstack = rx455_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx455_pos, $P11, rx455_curclass, "$!pos"
    goto alt468_end1453
  alt468_end1453:
    nqp_rxcommit rx455_bstack, alt468_end1453
    add $I11, rx455_pos, 1
    gt $I11, rx455_eos, rx455_fail1419
    substr $S10, rx455_tgt, rx455_pos, 1
    ne $S10, ucs4:")", rx455_fail1419
    add rx455_pos, 1
    nqp_rxpeek $I19, rx455_bstack, rxquantr467_done1452
    inc $I19
    inc $I19
    set rx455_rep, rx455_bstack[$I19]
    nqp_rxcommit rx455_bstack, rxquantr467_done1452
    inc rx455_rep
  rxquantr467_done1452:
    goto alt457_end1426
  alt457_end1426:
    nqp_rxcommit rx455_bstack, alt457_end1426
    rx455_cur."!cursor_pass"(rx455_pos, "mod_internal", 'backtrack'=>1)
    .return (rx455_cur)
  rx455_restart1418:
    repr_get_attr_obj rx455_cstack, rx455_cur, rx455_curclass, "$!cstack"
  rx455_fail1419:
    unless rx455_bstack, rx455_done1417
    pop $I19, rx455_bstack
    if_null rx455_cstack, rx455_cstack_done1422
    unless rx455_cstack, rx455_cstack_done1422
    dec $I19
    set $P11, rx455_cstack[$I19]
  rx455_cstack_done1422:
    pop rx455_rep, rx455_bstack
    pop rx455_pos, rx455_bstack
    pop $I19, rx455_bstack
    lt rx455_pos, -1, rx455_done1417
    lt rx455_pos, 0, rx455_fail1419
    eq $I19, 0, rx455_fail1419
    nqp_islist $I20, rx455_cstack
    unless $I20, rx455_jump1420
    elements $I18, rx455_bstack
    le $I18, 0, rx455_cut1421
    dec $I18
    set $I18, rx455_bstack[$I18]
  rx455_cut1421:
    assign rx455_cstack, $I18
  rx455_jump1420:
    jump $I19
  rx455_done1417:
    rx455_cur."!cursor_fail"()
    .return (rx455_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_105_1361734134.987") :anon :lex :outer("cuid_104_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx459_start
    .local string rx459_tgt
    .local int rx459_pos
    .local int rx459_off
    .local int rx459_eos
    .local int rx459_rep
    .local pmc rx459_cur
    .local pmc rx459_curclass
    .local pmc rx459_bstack
    .local pmc rx459_cstack
    rx459_start = self."!cursor_start_all"()
    set rx459_cur, rx459_start[0]
    set rx459_tgt, rx459_start[1]
    set rx459_pos, rx459_start[2]
    set rx459_curclass, rx459_start[3]
    set rx459_bstack, rx459_start[4]
    set $I19, rx459_start[5]
    store_lex unicode:"$\x{a2}", rx459_cur
    length rx459_eos, rx459_tgt
    eq $I19, 1, rx459_restart1432
    gt rx459_pos, rx459_eos, rx459_fail1433
    repr_get_attr_int $I11, self, rx459_curclass, "$!from"
    ne $I11, -1, rxscan460_done1439
    goto rxscan460_scan1438
  rxscan460_loop1437:
    inc rx459_pos
    gt rx459_pos, rx459_eos, rx459_fail1433
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!from", rx459_pos
  rxscan460_scan1438:
    nqp_rxmark rx459_bstack, rxscan460_loop1437, rx459_pos, 0
  rxscan460_done1439:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt461_01441
    nqp_push_label $P11, alt461_11442
    nqp_rxmark rx459_bstack, alt461_end1440, -1, 0
    rx459_cur."!alt"(rx459_pos, "alt_nfa__22_1361734135.974", $P11)
    goto rx459_fail1433
  alt461_01441:
    add $I11, rx459_pos, 1
    gt $I11, rx459_eos, rx459_fail1433
    substr $S10, rx459_tgt, rx459_pos, 1
    ne $S10, ucs4:"!", rx459_fail1433
    add rx459_pos, 1
    goto alt461_end1440
  alt461_11442:
    nqp_rxmark rx459_bstack, rxquantr462_done1444, -1, 0
  rxquantr462_loop1443:
    ge rx459_pos, rx459_eos, rx459_fail1433
    is_cclass $I11, .CCLASS_NUMERIC, rx459_tgt, rx459_pos
    unless $I11, rx459_fail1433
    add rx459_pos, 1
    nqp_rxpeek $I19, rx459_bstack, rxquantr462_done1444
    inc $I19
    inc $I19
    set rx459_rep, rx459_bstack[$I19]
    nqp_rxcommit rx459_bstack, rxquantr462_done1444
    inc rx459_rep
    nqp_rxmark rx459_bstack, rxquantr462_done1444, rx459_pos, rx459_rep
    goto rxquantr462_loop1443
  rxquantr462_done1444:
    goto alt461_end1440
  alt461_end1440:
    rx459_cur."!cursor_pass"(rx459_pos, 'backtrack'=>1)
    .return (rx459_cur)
  rx459_restart1432:
    repr_get_attr_obj rx459_cstack, rx459_cur, rx459_curclass, "$!cstack"
  rx459_fail1433:
    unless rx459_bstack, rx459_done1431
    pop $I19, rx459_bstack
    if_null rx459_cstack, rx459_cstack_done1436
    unless rx459_cstack, rx459_cstack_done1436
    dec $I19
    set $P11, rx459_cstack[$I19]
  rx459_cstack_done1436:
    pop rx459_rep, rx459_bstack
    pop rx459_pos, rx459_bstack
    pop $I19, rx459_bstack
    lt rx459_pos, -1, rx459_done1431
    lt rx459_pos, 0, rx459_fail1433
    eq $I19, 0, rx459_fail1433
    nqp_islist $I20, rx459_cstack
    unless $I20, rx459_jump1434
    elements $I18, rx459_bstack
    le $I18, 0, rx459_cut1435
    dec $I18
    set $I18, rx459_bstack[$I18]
  rx459_cut1435:
    assign rx459_cstack, $I18
  rx459_jump1434:
    jump $I19
  rx459_done1431:
    rx459_cur."!cursor_fail"()
    .return (rx459_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident" :subid("cuid_106_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 314
    .param pmc self 
    $P5001 = self."!protoregex"("mod_ident")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<ignorecase>" :subid("cuid_107_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 315
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx473_start
    .local string rx473_tgt
    .local int rx473_pos
    .local int rx473_off
    .local int rx473_eos
    .local int rx473_rep
    .local pmc rx473_cur
    .local pmc rx473_curclass
    .local pmc rx473_bstack
    .local pmc rx473_cstack
    rx473_start = self."!cursor_start_all"()
    set rx473_cur, rx473_start[0]
    set rx473_tgt, rx473_start[1]
    set rx473_pos, rx473_start[2]
    set rx473_curclass, rx473_start[3]
    set rx473_bstack, rx473_start[4]
    set $I19, rx473_start[5]
    store_lex unicode:"$\x{a2}", rx473_cur
    length rx473_eos, rx473_tgt
    eq $I19, 1, rx473_restart1465
    gt rx473_pos, rx473_eos, rx473_fail1466
    repr_get_attr_int $I11, self, rx473_curclass, "$!from"
    ne $I11, -1, rxscan474_done1472
    goto rxscan474_scan1471
  rxscan474_loop1470:
    inc rx473_pos
    gt rx473_pos, rx473_eos, rx473_fail1466
    repr_bind_attr_int rx473_cur, rx473_curclass, "$!from", rx473_pos
  rxscan474_scan1471:
    nqp_rxmark rx473_bstack, rxscan474_loop1470, rx473_pos, 0
  rxscan474_done1472:
    nqp_rxmark rx473_bstack, rxcap475_fail1474, rx473_pos, 0
    add $I11, rx473_pos, 1
    gt $I11, rx473_eos, rx473_fail1466
    substr $S10, rx473_tgt, rx473_pos, 1
    ne $S10, ucs4:"i", rx473_fail1466
    add rx473_pos, 1
    nqp_rxpeek $I19, rx473_bstack, rxcap475_fail1474
    inc $I19
    set $I11, rx473_bstack[$I19]
    repr_bind_attr_int rx473_cur, rx473_curclass, "$!pos", rx473_pos
    $P11 = rx473_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx473_pos)
    rx473_cstack = rx473_cur."!cursor_capture"($P11, "sym")
    goto rxcap475_done1473
  rxcap475_fail1474:
    goto rx473_fail1466
  rxcap475_done1473:
    nqp_rxmark rx473_bstack, rxquantr476_done1476, rx473_pos, 0
  rxquantr476_loop1475:
    add $I11, rx473_pos, 9
    gt $I11, rx473_eos, rx473_fail1466
    substr $S10, rx473_tgt, rx473_pos, 9
    ne $S10, ucs4:"gnorecase", rx473_fail1466
    add rx473_pos, 9
    nqp_rxpeek $I19, rx473_bstack, rxquantr476_done1476
    inc $I19
    inc $I19
    set rx473_rep, rx473_bstack[$I19]
    nqp_rxcommit rx473_bstack, rxquantr476_done1476
    inc rx473_rep
  rxquantr476_done1476:
    le rx473_pos, 0, rx473_fail1466
    is_cclass $I11, .CCLASS_WORD, rx473_tgt, rx473_pos
    if $I11, rx473_fail1466
    sub $I11, rx473_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx473_tgt, $I11
    unless $I11, rx473_fail1466
    rx473_cur."!cursor_pass"(rx473_pos, "mod_ident:sym<ignorecase>", 'backtrack'=>1)
    .return (rx473_cur)
  rx473_restart1465:
    repr_get_attr_obj rx473_cstack, rx473_cur, rx473_curclass, "$!cstack"
  rx473_fail1466:
    unless rx473_bstack, rx473_done1464
    pop $I19, rx473_bstack
    if_null rx473_cstack, rx473_cstack_done1469
    unless rx473_cstack, rx473_cstack_done1469
    dec $I19
    set $P11, rx473_cstack[$I19]
  rx473_cstack_done1469:
    pop rx473_rep, rx473_bstack
    pop rx473_pos, rx473_bstack
    pop $I19, rx473_bstack
    lt rx473_pos, -1, rx473_done1464
    lt rx473_pos, 0, rx473_fail1466
    eq $I19, 0, rx473_fail1466
    nqp_islist $I20, rx473_cstack
    unless $I20, rx473_jump1467
    elements $I18, rx473_bstack
    le $I18, 0, rx473_cut1468
    dec $I18
    set $I18, rx473_bstack[$I18]
  rx473_cut1468:
    assign rx473_cstack, $I18
  rx473_jump1467:
    jump $I19
  rx473_done1464:
    rx473_cur."!cursor_fail"()
    .return (rx473_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<ratchet>" :subid("cuid_108_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 316
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx478_start
    .local string rx478_tgt
    .local int rx478_pos
    .local int rx478_off
    .local int rx478_eos
    .local int rx478_rep
    .local pmc rx478_cur
    .local pmc rx478_curclass
    .local pmc rx478_bstack
    .local pmc rx478_cstack
    rx478_start = self."!cursor_start_all"()
    set rx478_cur, rx478_start[0]
    set rx478_tgt, rx478_start[1]
    set rx478_pos, rx478_start[2]
    set rx478_curclass, rx478_start[3]
    set rx478_bstack, rx478_start[4]
    set $I19, rx478_start[5]
    store_lex unicode:"$\x{a2}", rx478_cur
    length rx478_eos, rx478_tgt
    eq $I19, 1, rx478_restart1480
    gt rx478_pos, rx478_eos, rx478_fail1481
    repr_get_attr_int $I11, self, rx478_curclass, "$!from"
    ne $I11, -1, rxscan479_done1487
    goto rxscan479_scan1486
  rxscan479_loop1485:
    inc rx478_pos
    gt rx478_pos, rx478_eos, rx478_fail1481
    repr_bind_attr_int rx478_cur, rx478_curclass, "$!from", rx478_pos
  rxscan479_scan1486:
    nqp_rxmark rx478_bstack, rxscan479_loop1485, rx478_pos, 0
  rxscan479_done1487:
    nqp_rxmark rx478_bstack, rxcap480_fail1489, rx478_pos, 0
    add $I11, rx478_pos, 1
    gt $I11, rx478_eos, rx478_fail1481
    substr $S10, rx478_tgt, rx478_pos, 1
    ne $S10, ucs4:"r", rx478_fail1481
    add rx478_pos, 1
    nqp_rxpeek $I19, rx478_bstack, rxcap480_fail1489
    inc $I19
    set $I11, rx478_bstack[$I19]
    repr_bind_attr_int rx478_cur, rx478_curclass, "$!pos", rx478_pos
    $P11 = rx478_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx478_pos)
    rx478_cstack = rx478_cur."!cursor_capture"($P11, "sym")
    goto rxcap480_done1488
  rxcap480_fail1489:
    goto rx478_fail1481
  rxcap480_done1488:
    nqp_rxmark rx478_bstack, rxquantr481_done1491, rx478_pos, 0
  rxquantr481_loop1490:
    add $I11, rx478_pos, 6
    gt $I11, rx478_eos, rx478_fail1481
    substr $S10, rx478_tgt, rx478_pos, 6
    ne $S10, ucs4:"atchet", rx478_fail1481
    add rx478_pos, 6
    nqp_rxpeek $I19, rx478_bstack, rxquantr481_done1491
    inc $I19
    inc $I19
    set rx478_rep, rx478_bstack[$I19]
    nqp_rxcommit rx478_bstack, rxquantr481_done1491
    inc rx478_rep
  rxquantr481_done1491:
    le rx478_pos, 0, rx478_fail1481
    is_cclass $I11, .CCLASS_WORD, rx478_tgt, rx478_pos
    if $I11, rx478_fail1481
    sub $I11, rx478_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx478_tgt, $I11
    unless $I11, rx478_fail1481
    rx478_cur."!cursor_pass"(rx478_pos, "mod_ident:sym<ratchet>", 'backtrack'=>1)
    .return (rx478_cur)
  rx478_restart1480:
    repr_get_attr_obj rx478_cstack, rx478_cur, rx478_curclass, "$!cstack"
  rx478_fail1481:
    unless rx478_bstack, rx478_done1479
    pop $I19, rx478_bstack
    if_null rx478_cstack, rx478_cstack_done1484
    unless rx478_cstack, rx478_cstack_done1484
    dec $I19
    set $P11, rx478_cstack[$I19]
  rx478_cstack_done1484:
    pop rx478_rep, rx478_bstack
    pop rx478_pos, rx478_bstack
    pop $I19, rx478_bstack
    lt rx478_pos, -1, rx478_done1479
    lt rx478_pos, 0, rx478_fail1481
    eq $I19, 0, rx478_fail1481
    nqp_islist $I20, rx478_cstack
    unless $I20, rx478_jump1482
    elements $I18, rx478_bstack
    le $I18, 0, rx478_cut1483
    dec $I18
    set $I18, rx478_bstack[$I18]
  rx478_cut1483:
    assign rx478_cstack, $I18
  rx478_jump1482:
    jump $I19
  rx478_done1479:
    rx478_cur."!cursor_fail"()
    .return (rx478_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<sigspace>" :subid("cuid_109_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 317
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx483_start
    .local string rx483_tgt
    .local int rx483_pos
    .local int rx483_off
    .local int rx483_eos
    .local int rx483_rep
    .local pmc rx483_cur
    .local pmc rx483_curclass
    .local pmc rx483_bstack
    .local pmc rx483_cstack
    rx483_start = self."!cursor_start_all"()
    set rx483_cur, rx483_start[0]
    set rx483_tgt, rx483_start[1]
    set rx483_pos, rx483_start[2]
    set rx483_curclass, rx483_start[3]
    set rx483_bstack, rx483_start[4]
    set $I19, rx483_start[5]
    store_lex unicode:"$\x{a2}", rx483_cur
    length rx483_eos, rx483_tgt
    eq $I19, 1, rx483_restart1495
    gt rx483_pos, rx483_eos, rx483_fail1496
    repr_get_attr_int $I11, self, rx483_curclass, "$!from"
    ne $I11, -1, rxscan484_done1502
    goto rxscan484_scan1501
  rxscan484_loop1500:
    inc rx483_pos
    gt rx483_pos, rx483_eos, rx483_fail1496
    repr_bind_attr_int rx483_cur, rx483_curclass, "$!from", rx483_pos
  rxscan484_scan1501:
    nqp_rxmark rx483_bstack, rxscan484_loop1500, rx483_pos, 0
  rxscan484_done1502:
    nqp_rxmark rx483_bstack, rxcap485_fail1504, rx483_pos, 0
    add $I11, rx483_pos, 1
    gt $I11, rx483_eos, rx483_fail1496
    substr $S10, rx483_tgt, rx483_pos, 1
    ne $S10, ucs4:"s", rx483_fail1496
    add rx483_pos, 1
    nqp_rxpeek $I19, rx483_bstack, rxcap485_fail1504
    inc $I19
    set $I11, rx483_bstack[$I19]
    repr_bind_attr_int rx483_cur, rx483_curclass, "$!pos", rx483_pos
    $P11 = rx483_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx483_pos)
    rx483_cstack = rx483_cur."!cursor_capture"($P11, "sym")
    goto rxcap485_done1503
  rxcap485_fail1504:
    goto rx483_fail1496
  rxcap485_done1503:
    nqp_rxmark rx483_bstack, rxquantr486_done1506, rx483_pos, 0
  rxquantr486_loop1505:
    add $I11, rx483_pos, 7
    gt $I11, rx483_eos, rx483_fail1496
    substr $S10, rx483_tgt, rx483_pos, 7
    ne $S10, ucs4:"igspace", rx483_fail1496
    add rx483_pos, 7
    nqp_rxpeek $I19, rx483_bstack, rxquantr486_done1506
    inc $I19
    inc $I19
    set rx483_rep, rx483_bstack[$I19]
    nqp_rxcommit rx483_bstack, rxquantr486_done1506
    inc rx483_rep
  rxquantr486_done1506:
    le rx483_pos, 0, rx483_fail1496
    is_cclass $I11, .CCLASS_WORD, rx483_tgt, rx483_pos
    if $I11, rx483_fail1496
    sub $I11, rx483_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx483_tgt, $I11
    unless $I11, rx483_fail1496
    rx483_cur."!cursor_pass"(rx483_pos, "mod_ident:sym<sigspace>", 'backtrack'=>1)
    .return (rx483_cur)
  rx483_restart1495:
    repr_get_attr_obj rx483_cstack, rx483_cur, rx483_curclass, "$!cstack"
  rx483_fail1496:
    unless rx483_bstack, rx483_done1494
    pop $I19, rx483_bstack
    if_null rx483_cstack, rx483_cstack_done1499
    unless rx483_cstack, rx483_cstack_done1499
    dec $I19
    set $P11, rx483_cstack[$I19]
  rx483_cstack_done1499:
    pop rx483_rep, rx483_bstack
    pop rx483_pos, rx483_bstack
    pop $I19, rx483_bstack
    lt rx483_pos, -1, rx483_done1494
    lt rx483_pos, 0, rx483_fail1496
    eq $I19, 0, rx483_fail1496
    nqp_islist $I20, rx483_cstack
    unless $I20, rx483_jump1497
    elements $I18, rx483_bstack
    le $I18, 0, rx483_cut1498
    dec $I18
    set $I18, rx483_bstack[$I18]
  rx483_cut1498:
    assign rx483_cstack, $I18
  rx483_jump1497:
    jump $I19
  rx483_done1494:
    rx483_cur."!cursor_fail"()
    .return (rx483_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<dba>" :subid("cuid_110_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 318
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx488_start
    .local string rx488_tgt
    .local int rx488_pos
    .local int rx488_off
    .local int rx488_eos
    .local int rx488_rep
    .local pmc rx488_cur
    .local pmc rx488_curclass
    .local pmc rx488_bstack
    .local pmc rx488_cstack
    rx488_start = self."!cursor_start_all"()
    set rx488_cur, rx488_start[0]
    set rx488_tgt, rx488_start[1]
    set rx488_pos, rx488_start[2]
    set rx488_curclass, rx488_start[3]
    set rx488_bstack, rx488_start[4]
    set $I19, rx488_start[5]
    store_lex unicode:"$\x{a2}", rx488_cur
    length rx488_eos, rx488_tgt
    eq $I19, 1, rx488_restart1510
    gt rx488_pos, rx488_eos, rx488_fail1511
    repr_get_attr_int $I11, self, rx488_curclass, "$!from"
    ne $I11, -1, rxscan489_done1517
    goto rxscan489_scan1516
  rxscan489_loop1515:
    inc rx488_pos
    gt rx488_pos, rx488_eos, rx488_fail1511
    repr_bind_attr_int rx488_cur, rx488_curclass, "$!from", rx488_pos
  rxscan489_scan1516:
    nqp_rxmark rx488_bstack, rxscan489_loop1515, rx488_pos, 0
  rxscan489_done1517:
    nqp_rxmark rx488_bstack, rxcap490_fail1519, rx488_pos, 0
    add $I11, rx488_pos, 3
    gt $I11, rx488_eos, rx488_fail1511
    substr $S10, rx488_tgt, rx488_pos, 3
    ne $S10, ucs4:"dba", rx488_fail1511
    add rx488_pos, 3
    nqp_rxpeek $I19, rx488_bstack, rxcap490_fail1519
    inc $I19
    set $I11, rx488_bstack[$I19]
    repr_bind_attr_int rx488_cur, rx488_curclass, "$!pos", rx488_pos
    $P11 = rx488_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx488_pos)
    rx488_cstack = rx488_cur."!cursor_capture"($P11, "sym")
    goto rxcap490_done1518
  rxcap490_fail1519:
    goto rx488_fail1511
  rxcap490_done1518:
    le rx488_pos, 0, rx488_fail1511
    is_cclass $I11, .CCLASS_WORD, rx488_tgt, rx488_pos
    if $I11, rx488_fail1511
    sub $I11, rx488_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx488_tgt, $I11
    unless $I11, rx488_fail1511
    rx488_cur."!cursor_pass"(rx488_pos, "mod_ident:sym<dba>", 'backtrack'=>1)
    .return (rx488_cur)
  rx488_restart1510:
    repr_get_attr_obj rx488_cstack, rx488_cur, rx488_curclass, "$!cstack"
  rx488_fail1511:
    unless rx488_bstack, rx488_done1509
    pop $I19, rx488_bstack
    if_null rx488_cstack, rx488_cstack_done1514
    unless rx488_cstack, rx488_cstack_done1514
    dec $I19
    set $P11, rx488_cstack[$I19]
  rx488_cstack_done1514:
    pop rx488_rep, rx488_bstack
    pop rx488_pos, rx488_bstack
    pop $I19, rx488_bstack
    lt rx488_pos, -1, rx488_done1509
    lt rx488_pos, 0, rx488_fail1511
    eq $I19, 0, rx488_fail1511
    nqp_islist $I20, rx488_cstack
    unless $I20, rx488_jump1512
    elements $I18, rx488_bstack
    le $I18, 0, rx488_cut1513
    dec $I18
    set $I18, rx488_bstack[$I18]
  rx488_cut1513:
    assign rx488_cstack, $I18
  rx488_jump1512:
    jump $I19
  rx488_done1509:
    rx488_cur."!cursor_fail"()
    .return (rx488_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<oops>" :subid("cuid_111_1361734134.987") :anon :lex :outer("cuid_180_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 319
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_193_1361734134.987' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_112_1361734134.987' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_194_1361734134.987' 
    capture_lex $P5008 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx492_start
    .local string rx492_tgt
    .local int rx492_pos
    .local int rx492_off
    .local int rx492_eos
    .local int rx492_rep
    .local pmc rx492_cur
    .local pmc rx492_curclass
    .local pmc rx492_bstack
    .local pmc rx492_cstack
    rx492_start = self."!cursor_start_all"()
    set rx492_cur, rx492_start[0]
    set rx492_tgt, rx492_start[1]
    set rx492_pos, rx492_start[2]
    set rx492_curclass, rx492_start[3]
    set rx492_bstack, rx492_start[4]
    set $I19, rx492_start[5]
    store_lex unicode:"$\x{a2}", rx492_cur
    length rx492_eos, rx492_tgt
    eq $I19, 1, rx492_restart1523
    gt rx492_pos, rx492_eos, rx492_fail1524
    repr_get_attr_int $I11, self, rx492_curclass, "$!from"
    ne $I11, -1, rxscan493_done1530
    goto rxscan493_scan1529
  rxscan493_loop1528:
    inc rx492_pos
    gt rx492_pos, rx492_eos, rx492_fail1524
    repr_bind_attr_int rx492_cur, rx492_curclass, "$!from", rx492_pos
  rxscan493_scan1529:
    nqp_rxmark rx492_bstack, rxscan493_loop1528, rx492_pos, 0
  rxscan493_done1530:
    repr_bind_attr_int rx492_cur, rx492_curclass, "$!pos", rx492_pos
    store_lex unicode:"$\x{a2}", rx492_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_193_1361734134.987' 
    capture_lex $P5002
    $P5003 = $P5002()
    .const 'Sub' $P5004 = 'cuid_112_1361734134.987' 
    capture_lex $P5004
    repr_bind_attr_int rx492_cur, rx492_curclass, "$!pos", rx492_pos
    $P11 = rx492_cur.$P5004()
    repr_get_attr_int $I11, $P11, rx492_curclass, "$!pos"
    lt $I11, 0, rx492_fail1524
    nqp_rxmark rx492_bstack, rxsubrule497_pass1543, -1, 0
  rxsubrule497_pass1543:
    rx492_cstack = rx492_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx492_pos, $P11, rx492_curclass, "$!pos"
    repr_bind_attr_int rx492_cur, rx492_curclass, "$!pos", rx492_pos
    store_lex unicode:"$\x{a2}", rx492_cur
    $P5005 = $P101."MATCH"()
    set $P102, $P5005
    .const 'Sub' $P5006 = 'cuid_194_1361734134.987' 
    capture_lex $P5006
    $P5007 = $P5006()
    rx492_cur."!cursor_pass"(rx492_pos, "mod_ident:sym<oops>", 'backtrack'=>1)
    .return (rx492_cur)
  rx492_restart1523:
    repr_get_attr_obj rx492_cstack, rx492_cur, rx492_curclass, "$!cstack"
  rx492_fail1524:
    unless rx492_bstack, rx492_done1522
    pop $I19, rx492_bstack
    if_null rx492_cstack, rx492_cstack_done1527
    unless rx492_cstack, rx492_cstack_done1527
    dec $I19
    set $P11, rx492_cstack[$I19]
  rx492_cstack_done1527:
    pop rx492_rep, rx492_bstack
    pop rx492_pos, rx492_bstack
    pop $I19, rx492_bstack
    lt rx492_pos, -1, rx492_done1522
    lt rx492_pos, 0, rx492_fail1524
    eq $I19, 0, rx492_fail1524
    nqp_islist $I20, rx492_cstack
    unless $I20, rx492_jump1525
    elements $I18, rx492_bstack
    le $I18, 0, rx492_cut1526
    dec $I18
    set $I18, rx492_bstack[$I18]
  rx492_cut1526:
    assign rx492_cstack, $I18
  rx492_jump1525:
    jump $I19
  rx492_done1522:
    rx492_cur."!cursor_fail"()
    .return (rx492_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_193_1361734134.987") :anon :lex :outer("cuid_111_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 319

    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_112_1361734134.987") :anon :lex :outer("cuid_111_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx494_start
    .local string rx494_tgt
    .local int rx494_pos
    .local int rx494_off
    .local int rx494_eos
    .local int rx494_rep
    .local pmc rx494_cur
    .local pmc rx494_curclass
    .local pmc rx494_bstack
    .local pmc rx494_cstack
    rx494_start = self."!cursor_start_all"()
    set rx494_cur, rx494_start[0]
    set rx494_tgt, rx494_start[1]
    set rx494_pos, rx494_start[2]
    set rx494_curclass, rx494_start[3]
    set rx494_bstack, rx494_start[4]
    set $I19, rx494_start[5]
    store_lex unicode:"$\x{a2}", rx494_cur
    length rx494_eos, rx494_tgt
    eq $I19, 1, rx494_restart1533
    gt rx494_pos, rx494_eos, rx494_fail1534
    repr_get_attr_int $I11, self, rx494_curclass, "$!from"
    ne $I11, -1, rxscan495_done1540
    goto rxscan495_scan1539
  rxscan495_loop1538:
    inc rx494_pos
    gt rx494_pos, rx494_eos, rx494_fail1534
    repr_bind_attr_int rx494_cur, rx494_curclass, "$!from", rx494_pos
  rxscan495_scan1539:
    nqp_rxmark rx494_bstack, rxscan495_loop1538, rx494_pos, 0
  rxscan495_done1540:
    nqp_rxmark rx494_bstack, rxquantr496_done1542, -1, 0
  rxquantr496_loop1541:
    ge rx494_pos, rx494_eos, rx494_fail1534
    is_cclass $I11, .CCLASS_WORD, rx494_tgt, rx494_pos
    unless $I11, rx494_fail1534
    add rx494_pos, 1
    nqp_rxpeek $I19, rx494_bstack, rxquantr496_done1542
    inc $I19
    inc $I19
    set rx494_rep, rx494_bstack[$I19]
    nqp_rxcommit rx494_bstack, rxquantr496_done1542
    inc rx494_rep
    nqp_rxmark rx494_bstack, rxquantr496_done1542, rx494_pos, rx494_rep
    goto rxquantr496_loop1541
  rxquantr496_done1542:
    rx494_cur."!cursor_pass"(rx494_pos, 'backtrack'=>1)
    .return (rx494_cur)
  rx494_restart1533:
    repr_get_attr_obj rx494_cstack, rx494_cur, rx494_curclass, "$!cstack"
  rx494_fail1534:
    unless rx494_bstack, rx494_done1532
    pop $I19, rx494_bstack
    if_null rx494_cstack, rx494_cstack_done1537
    unless rx494_cstack, rx494_cstack_done1537
    dec $I19
    set $P11, rx494_cstack[$I19]
  rx494_cstack_done1537:
    pop rx494_rep, rx494_bstack
    pop rx494_pos, rx494_bstack
    pop $I19, rx494_bstack
    lt rx494_pos, -1, rx494_done1532
    lt rx494_pos, 0, rx494_fail1534
    eq $I19, 0, rx494_fail1534
    nqp_islist $I20, rx494_cstack
    unless $I20, rx494_jump1535
    elements $I18, rx494_bstack
    le $I18, 0, rx494_cut1536
    dec $I18
    set $I18, rx494_bstack[$I18]
  rx494_cut1536:
    assign rx494_cstack, $I18
  rx494_jump1535:
    jump $I19
  rx494_done1532:
    rx494_cur."!cursor_fail"()
    .return (rx494_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_194_1361734134.987") :anon :lex :outer("cuid_111_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 319
    .local pmc fb_tmp_7 
    find_lex $P5001, "$/"
    $P5002 = $P5001."CURSOR"()
    find_lex $P5003, "$/"
    set fb_tmp_7, $P5003
    repr_defined $I5001, fb_tmp_7
    unless $I5001 goto if498_else1544 
    set $P5004, fb_tmp_7[0]
    set $P5006, $P5004
    goto if498_end1545
  if498_else1544:
    null $P5005
    set $P5006, $P5005
  if498_end1545:
    unless_null $P5006, vivi_4991546
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_4991546:
    $P5008 = $P5006."Str"()
    set $S5002, $P5008
    concat $S5001, "Unrecognized regex modifier :", $S5002
    $P5009 = $P5002."panic"($S5001)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_196_1361734134.987") :anon :lex :outer("cuid_177_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 323
    .const 'Sub' $P5066 = 'cuid_195_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_199_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_113_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_114_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_115_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_116_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_117_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_118_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_119_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_120_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_121_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_122_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_123_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_124_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_125_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_126_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_127_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_128_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_129_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_130_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_131_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_132_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_133_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_134_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_135_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_136_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_137_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_138_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_139_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_140_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_141_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_142_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_143_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_144_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_145_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_146_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_147_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_148_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_149_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_150_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_151_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_152_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_153_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_154_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_155_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_156_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_157_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_158_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_159_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_160_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_161_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_162_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_163_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_164_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_165_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_166_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_167_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_168_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_169_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_170_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_171_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_172_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_173_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_174_1361734134.987' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_175_1361734134.987' 
    capture_lex $P5066 
    .lex "&backmod", $P101 
    .lex "&capnames", $P102 
    .lex "$?PACKAGE", $P103 
    .lex "$?CLASS", $P104 
    .const 'Sub' $P5001 = 'cuid_195_1361734134.987' 
    capture_lex $P5001
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_199_1361734134.987' 
    capture_lex $P5002
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_113_1361734134.987' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_114_1361734134.987' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_115_1361734134.987' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_116_1361734134.987' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_117_1361734134.987' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_118_1361734134.987' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_119_1361734134.987' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_120_1361734134.987' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_121_1361734134.987' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_122_1361734134.987' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_123_1361734134.987' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_124_1361734134.987' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_125_1361734134.987' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_126_1361734134.987' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_127_1361734134.987' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_128_1361734134.987' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_129_1361734134.987' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_130_1361734134.987' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_131_1361734134.987' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_132_1361734134.987' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_133_1361734134.987' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_134_1361734134.987' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_135_1361734134.987' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_136_1361734134.987' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_137_1361734134.987' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_138_1361734134.987' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_139_1361734134.987' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_140_1361734134.987' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_141_1361734134.987' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_142_1361734134.987' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_143_1361734134.987' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_144_1361734134.987' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_145_1361734134.987' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_146_1361734134.987' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_147_1361734134.987' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_148_1361734134.987' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_149_1361734134.987' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_150_1361734134.987' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_151_1361734134.987' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_152_1361734134.987' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_153_1361734134.987' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_154_1361734134.987' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_155_1361734134.987' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_156_1361734134.987' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_157_1361734134.987' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_158_1361734134.987' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_159_1361734134.987' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_160_1361734134.987' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_161_1361734134.987' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_162_1361734134.987' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_163_1361734134.987' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_164_1361734134.987' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_165_1361734134.987' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_166_1361734134.987' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_167_1361734134.987' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_168_1361734134.987' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_169_1361734134.987' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_170_1361734134.987' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_171_1361734134.987' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_172_1361734134.987' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_173_1361734134.987' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_174_1361734134.987' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_175_1361734134.987' 
    capture_lex $P5065
    .return ($P5065) 
.end
.HLL "nqp"
.namespace []
.sub "backmod" :subid("cuid_195_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 874
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$ast", _lex_param_0 
    .lex "$backmod", _lex_param_1 
    set $S5001, _lex_param_1
    iseq $I5001, $S5001, ":"
    unless $I5001 goto if500_else1547 
.annotate 'line', 875
    $P5001 = _lex_param_0."backtrack"("r")
    goto if500_end1548
  if500_else1547:
    set $S5002, _lex_param_1
    iseq $I5002, $S5002, ":?"
    set $I5004, $I5002
    if $I5002 goto unless502_end1552 
    set $S5003, _lex_param_1
    iseq $I5003, $S5003, "?"
    set $I5004, $I5003
  unless502_end1552:
    unless $I5004 goto if501_else1549 
.annotate 'line', 876
    $P5002 = _lex_param_0."backtrack"("f")
    set $P5006, $P5002
    goto if501_end1550
  if501_else1549:
    set $S5004, _lex_param_1
    iseq $I5005, $S5004, ":!"
    set $I5007, $I5005
    if $I5005 goto unless504_end1556 
    set $S5005, _lex_param_1
    iseq $I5006, $S5005, "!"
    set $I5007, $I5006
  unless504_end1556:
    box $P5005, $I5007
    set $P5004, $P5005
    unless $I5007 goto if503_end1554 
.annotate 'line', 877
    $P5003 = _lex_param_0."backtrack"("g")
    set $P5004, $P5003
  if503_end1554:
    set $P5006, $P5004
  if501_end1550:
  if500_end1548:
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "capnames" :subid("cuid_199_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 918
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_198_1361734134.987' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_202_1361734134.987' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_204_1361734134.987' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_206_1361734134.987' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_209_1361734134.987' 
    capture_lex $P5024 
    .lex "%capnames", $P101 
    .lex "$rxtype", $P102 
    .lex "$ast", _lex_param_0 
    .lex "$count", _lex_param_1 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P102, $P5002
.annotate 'line', 920
    $P5003 = _lex_param_0."rxtype"()
    set $P102, $P5003
    set $S5001, $P102
    iseq $I5001, $S5001, "concat"
    unless $I5001 goto if505_else1557 
.annotate 'line', 921
.annotate 'line', 922
    $P5007 = _lex_param_0."list"()
    set $P5004, $P5007
    iter $P5006, $P5007
  for_next1568:
    unless $P5006, for_done1570
    shift $P5009, $P5006
  for_redo1569:
    .const 'Sub' $P5008 = 'cuid_198_1361734134.987' 
    capture_lex $P5008
    $P5004 = $P5008($P5009)
    goto for_next1568
  for_done1570:
    goto if505_end1558
  if505_else1557:
    set $S5002, $P102
    iseq $I5002, $S5002, "altseq"
    set $I5004, $I5002
    if $I5002 goto unless511_end1574 
    set $S5003, $P102
    iseq $I5003, $S5003, "alt"
    set $I5004, $I5003
  unless511_end1574:
    unless $I5004 goto if510_else1571 
    .const 'Sub' $P5010 = 'cuid_202_1361734134.987' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5023, $P5011
    goto if510_end1572
  if510_else1571:
    set $S5004, $P102
    iseq $I5005, $S5004, "subrule"
    set $I5007, $I5005
    unless $I5005 goto if524_end1602 
.annotate 'line', 939
    $P5012 = _lex_param_0."subtype"()
    set $S5005, $P5012
    iseq $I5006, $S5005, "capture"
    set $I5007, $I5006
  if524_end1602:
    unless $I5007 goto if523_else1599 
    .const 'Sub' $P5013 = 'cuid_204_1361734134.987' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5022, $P5014
    goto if523_end1600
  if523_else1599:
    set $S5006, $P102
    iseq $I5008, $S5006, "subcapture"
    unless $I5008 goto if528_else1612 
    .const 'Sub' $P5015 = 'cuid_206_1361734134.987' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5021, $P5016
    goto if528_end1613
  if528_else1612:
    set $S5007, $P102
    iseq $I5009, $S5007, "quant"
    box $P5020, $I5009
    set $P5019, $P5020
    unless $I5009 goto if539_end1637 
    .const 'Sub' $P5017 = 'cuid_209_1361734134.987' 
    capture_lex $P5017
    $P5018 = $P5017()
    set $P5019, $P5018
  if539_end1637:
    set $P5021, $P5019
  if528_end1613:
    set $P5022, $P5021
  if523_end1600:
    set $P5023, $P5022
  if510_end1572:
  if505_end1558:
    set $P101[""], _lex_param_1
    delete $P101["$!from"]
    delete $P101["$!to"]
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_198_1361734134.987") :anon :lex :outer("cuid_199_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 922
    .param pmc _lex_param_0 
    .const 'Sub' $P5013 = 'cuid_197_1361734134.987' 
    capture_lex $P5013 
    .lex "%x", $P101 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_9 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 923
    find_lex $P5002, "$count"
    $P5003 = "&capnames"(_lex_param_0, $P5002)
    set $P101, $P5003
    set $P5004, $P101
    iter $P5006, $P101
  for_next1562:
    unless $P5006, for_done1564
    shift $P5008, $P5006
  for_redo1563:
    .const 'Sub' $P5007 = 'cuid_197_1361734134.987' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next1562
  for_done1564:
    set fb_tmp_9, $P101
    repr_defined $I5001, fb_tmp_9
    unless $I5001 goto if508_else1565 
    set $P5009, fb_tmp_9[""]
    set $P5011, $P5009
    goto if508_end1566
  if508_else1565:
    null $P5010
    set $P5011, $P5010
  if508_end1566:
    unless_null $P5011, vivi_5091567
    nqp_get_sc_object $P5012, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5011, $P5012
  vivi_5091567:
    store_lex "$count", $P5011
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_197_1361734134.987") :anon :lex :outer("cuid_198_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 924
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_8 
    find_lex $P5001, "%capnames"
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5003, "%capnames"
    set fb_tmp_8, $P5003
    repr_defined $I5001, fb_tmp_8
    unless $I5001 goto if506_else1559 
    $P5005 = _lex_param_0."key"()
    set $S5002, $P5005
    set $P5004, fb_tmp_8[$S5002]
    set $P5007, $P5004
    goto if506_end1560
  if506_else1559:
    null $P5006
    set $P5007, $P5006
  if506_end1560:
    unless_null $P5007, vivi_5071561
    nqp_get_sc_object $P5008, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5007, $P5008
  vivi_5071561:
    set $N5002, $P5007
    $P5009 = _lex_param_0."value"()
    set $N5003, $P5009
    add $N5001, $N5002, $N5003
    box $P5010, $N5001
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_202_1361734134.987") :anon :lex :outer("cuid_199_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 928
    .const 'Sub' $P5010 = 'cuid_201_1361734134.987' 
    capture_lex $P5010 
    .lex "$max", $P101 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
    find_lex $P5002, "$count"
    set $P101, $P5002
.annotate 'line', 930
    find_lex $P5006, "$ast"
    $P5007 = $P5006."list"()
    set $P5003, $P5007
    iter $P5005, $P5007
  for_next1596:
    unless $P5005, for_done1598
    shift $P5009, $P5005
  for_redo1597:
    .const 'Sub' $P5008 = 'cuid_201_1361734134.987' 
    capture_lex $P5008
    $P5003 = $P5008($P5009)
    goto for_next1596
  for_done1598:
    store_lex "$count", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_201_1361734134.987") :anon :lex :outer("cuid_202_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 930
    .param pmc _lex_param_0 
    .const 'Sub' $P5020 = 'cuid_200_1361734134.987' 
    capture_lex $P5020 
    .lex "%x", $P101 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_12 
    .local pmc fb_tmp_13 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 931
    find_lex $P5002, "$count"
    $P5003 = "&capnames"(_lex_param_0, $P5002)
    set $P101, $P5003
    set $P5004, $P101
    iter $P5006, $P101
  for_next1585:
    unless $P5006, for_done1587
    shift $P5008, $P5006
  for_redo1586:
    .const 'Sub' $P5007 = 'cuid_200_1361734134.987' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next1585
  for_done1587:
    set fb_tmp_12, $P101
    repr_defined $I5002, fb_tmp_12
    unless $I5002 goto if519_else1590 
    set $P5009, fb_tmp_12[""]
    set $P5011, $P5009
    goto if519_end1591
  if519_else1590:
    null $P5010
    set $P5011, $P5010
  if519_end1591:
    unless_null $P5011, vivi_5201592
    nqp_get_sc_object $P5012, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5011, $P5012
  vivi_5201592:
    set $N5001, $P5011
    find_lex $P5013, "$max"
    set $N5002, $P5013
    isgt $I5001, $N5001, $N5002
    box $P5019, $I5001
    set $P5018, $P5019
    unless $I5001 goto if518_end1589 
    set fb_tmp_13, $P101
    repr_defined $I5003, fb_tmp_13
    unless $I5003 goto if521_else1593 
    set $P5014, fb_tmp_13[""]
    set $P5016, $P5014
    goto if521_end1594
  if521_else1593:
    null $P5015
    set $P5016, $P5015
  if521_end1594:
    unless_null $P5016, vivi_5221595
    nqp_get_sc_object $P5017, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5016, $P5017
  vivi_5221595:
    store_lex "$max", $P5016
    set $P5018, $P5016
  if518_end1589:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_200_1361734134.987") :anon :lex :outer("cuid_201_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 932
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_10 
    .local pmc fb_tmp_11 
    find_lex $P5001, "%capnames"
.annotate 'line', 933
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5003, "%capnames"
    set fb_tmp_10, $P5003
    repr_defined $I5002, fb_tmp_10
    unless $I5002 goto if514_else1579 
    $P5005 = _lex_param_0."key"()
    set $S5002, $P5005
    set $P5004, fb_tmp_10[$S5002]
    set $P5007, $P5004
    goto if514_end1580
  if514_else1579:
    null $P5006
    set $P5007, $P5006
  if514_end1580:
    unless_null $P5007, vivi_5151581
    nqp_get_sc_object $P5008, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5007, $P5008
  vivi_5151581:
    set $N5001, $P5007
    set $N5002, 2
    islt $I5001, $N5001, $N5002
    set $I5005, $I5001
    unless $I5001 goto if513_end1578 
    find_lex $P5009, "%x"
    set fb_tmp_11, $P5009
    repr_defined $I5004, fb_tmp_11
    unless $I5004 goto if516_else1582 
    $P5011 = _lex_param_0."key"()
    set $S5003, $P5011
    set $P5010, fb_tmp_11[$S5003]
    set $P5013, $P5010
    goto if516_end1583
  if516_else1582:
    null $P5012
    set $P5013, $P5012
  if516_end1583:
    unless_null $P5013, vivi_5171584
    nqp_get_sc_object $P5014, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5013, $P5014
  vivi_5171584:
    set $N5003, $P5013
    set $N5004, 1
    iseq $I5003, $N5003, $N5004
    set $I5005, $I5003
  if513_end1578:
    unless $I5005 goto if512_else1575 
    set $I5006, 1
    goto if512_end1576
  if512_else1575:
    set $I5006, 2
  if512_end1576:
    box $P5015, $I5006
    set $P5001[$S5001], $P5015
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_204_1361734134.987") :anon :lex :outer("cuid_199_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 939
    .const 'Sub' $P5014 = 'cuid_203_1361734134.987' 
    capture_lex $P5014 
    .lex "$name", $P101 
    .lex "@names", $P102 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
.annotate 'line', 940
    find_lex $P5003, "$ast"
    $P5004 = $P5003."name"()
    set $P101, $P5004
    set $S5001, $P101
    iseq $I5001, $S5001, ""
    unless $I5001 goto if525_end1604 
.annotate 'line', 941
    find_lex $P5005, "$count"
    set $P101, $P5005
    find_lex $P5006, "$ast"
    $P5007 = $P5006."name"($P101)
  if525_end1604:
    set $S5002, $P101
    split $P5008, "=", $S5002
    set $P102, $P5008
    set $P5009, $P102
    iter $P5011, $P102
  for_next1609:
    unless $P5011, for_done1611
    shift $P5013, $P5011
  for_redo1610:
    .const 'Sub' $P5012 = 'cuid_203_1361734134.987' 
    capture_lex $P5012
    $P5009 = $P5012($P5013)
    goto for_next1609
  for_done1611:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_203_1361734134.987") :anon :lex :outer("cuid_204_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 943
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "0"
    set $I5003, $I5001
    if $I5001 goto unless527_end1608 
    set $N5001, _lex_param_0
    set $N5002, 0
    isgt $I5002, $N5001, $N5002
    set $I5003, $I5002
  unless527_end1608:
    unless $I5003 goto if526_end1606 
.annotate 'line', 944
    set $N5004, _lex_param_0
    set $N5005, 1
    add $N5003, $N5004, $N5005
    box $P5001, $N5003
    store_lex "$count", $P5001
  if526_end1606:
    find_lex $P5002, "%capnames"
    set $S5002, _lex_param_0
    box $P5003, 1
    set $P5002[$S5002], $P5003
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_206_1361734134.987") :anon :lex :outer("cuid_199_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 948
    .const 'Sub' $P5026 = 'cuid_205_1361734134.987' 
    capture_lex $P5026 
    .const 'Sub' $P5026 = 'cuid_207_1361734134.987' 
    capture_lex $P5026 
    .lex "%x", $P101 
    .local pmc fb_tmp_14 
    .local pmc fb_tmp_17 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 949
    find_lex $P5006, "$ast"
    $P5007 = $P5006."name"()
    set $S5001, $P5007
    split $P5005, " ", $S5001
    set $P5002, $P5005
    iter $P5004, $P5005
  for_next1618:
    unless $P5004, for_done1620
    shift $P5009, $P5004
  for_redo1619:
    .const 'Sub' $P5008 = 'cuid_205_1361734134.987' 
    capture_lex $P5008
    $P5002 = $P5008($P5009)
    goto for_next1618
  for_done1620:
.annotate 'line', 953
    find_lex $P5010, "$ast"
    set fb_tmp_14, $P5010
    repr_defined $I5001, fb_tmp_14
    unless $I5001 goto if531_else1621 
    set $P5011, fb_tmp_14[0]
    set $P5013, $P5011
    goto if531_end1622
  if531_else1621:
    null $P5012
    set $P5013, $P5012
  if531_end1622:
    unless_null $P5013, vivi_5321623
    nqp_get_sc_object $P5014, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5013, $P5014
  vivi_5321623:
    find_lex $P5015, "$count"
    $P5016 = "&capnames"($P5013, $P5015)
    set $P101, $P5016
    set $P5017, $P101
    iter $P5019, $P101
  for_next1630:
    unless $P5019, for_done1632
    shift $P5021, $P5019
  for_redo1631:
    .const 'Sub' $P5020 = 'cuid_207_1361734134.987' 
    capture_lex $P5020
    $P5017 = $P5020($P5021)
    goto for_next1630
  for_done1632:
    set fb_tmp_17, $P101
    repr_defined $I5002, fb_tmp_17
    unless $I5002 goto if537_else1633 
    set $P5022, fb_tmp_17[""]
    set $P5024, $P5022
    goto if537_end1634
  if537_else1633:
    null $P5023
    set $P5024, $P5023
  if537_end1634:
    unless_null $P5024, vivi_5381635
    nqp_get_sc_object $P5025, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5024, $P5025
  vivi_5381635:
    store_lex "$count", $P5024
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_205_1361734134.987") :anon :lex :outer("cuid_206_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 949
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "0"
    set $I5003, $I5001
    if $I5001 goto unless530_end1617 
    set $N5001, _lex_param_0
    set $N5002, 0
    isgt $I5002, $N5001, $N5002
    set $I5003, $I5002
  unless530_end1617:
    unless $I5003 goto if529_end1615 
.annotate 'line', 950
    set $N5004, _lex_param_0
    set $N5005, 1
    add $N5003, $N5004, $N5005
    box $P5001, $N5003
    store_lex "$count", $P5001
  if529_end1615:
    find_lex $P5002, "%capnames"
    set $S5002, _lex_param_0
    box $P5003, 1
    set $P5002[$S5002], $P5003
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_207_1361734134.987") :anon :lex :outer("cuid_206_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 954
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_15 
    .local pmc fb_tmp_16 
    find_lex $P5001, "%capnames"
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5003, "%capnames"
    set fb_tmp_15, $P5003
    repr_defined $I5001, fb_tmp_15
    unless $I5001 goto if533_else1624 
    $P5005 = _lex_param_0."key"()
    set $S5002, $P5005
    set $P5004, fb_tmp_15[$S5002]
    set $P5007, $P5004
    goto if533_end1625
  if533_else1624:
    null $P5006
    set $P5007, $P5006
  if533_end1625:
    unless_null $P5007, vivi_5341626
    nqp_get_sc_object $P5008, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5007, $P5008
  vivi_5341626:
    set $N5002, $P5007
    find_lex $P5009, "%x"
    set fb_tmp_16, $P5009
    repr_defined $I5002, fb_tmp_16
    unless $I5002 goto if535_else1627 
    $P5011 = _lex_param_0."key"()
    set $S5003, $P5011
    set $P5010, fb_tmp_16[$S5003]
    set $P5013, $P5010
    goto if535_end1628
  if535_else1627:
    null $P5012
    set $P5013, $P5012
  if535_end1628:
    unless_null $P5013, vivi_5361629
    nqp_get_sc_object $P5014, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5013, $P5014
  vivi_5361629:
    set $N5003, $P5013
    add $N5001, $N5002, $N5003
    box $P5015, $N5001
    set $P5001[$S5001], $P5015
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_209_1361734134.987") :anon :lex :outer("cuid_199_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 957
    .const 'Sub' $P5018 = 'cuid_208_1361734134.987' 
    capture_lex $P5018 
    .lex "%astcap", $P101 
    .local pmc fb_tmp_18 
    .local pmc fb_tmp_19 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 958
    find_lex $P5002, "$ast"
    set fb_tmp_18, $P5002
    repr_defined $I5001, fb_tmp_18
    unless $I5001 goto if540_else1638 
    set $P5003, fb_tmp_18[0]
    set $P5005, $P5003
    goto if540_end1639
  if540_else1638:
    null $P5004
    set $P5005, $P5004
  if540_end1639:
    unless_null $P5005, vivi_5411640
    nqp_get_sc_object $P5006, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5005, $P5006
  vivi_5411640:
    find_lex $P5007, "$count"
    $P5008 = "&capnames"($P5005, $P5007)
    set $P101, $P5008
    set $P5009, $P101
    iter $P5011, $P101
  for_next1641:
    unless $P5011, for_done1643
    shift $P5013, $P5011
  for_redo1642:
    .const 'Sub' $P5012 = 'cuid_208_1361734134.987' 
    capture_lex $P5012
    $P5009 = $P5012($P5013)
    goto for_next1641
  for_done1643:
    set fb_tmp_19, $P101
    repr_defined $I5002, fb_tmp_19
    unless $I5002 goto if542_else1644 
    set $P5014, fb_tmp_19[""]
    set $P5016, $P5014
    goto if542_end1645
  if542_else1644:
    null $P5015
    set $P5016, $P5015
  if542_end1645:
    unless_null $P5016, vivi_5431646
    nqp_get_sc_object $P5017, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5016, $P5017
  vivi_5431646:
    store_lex "$count", $P5016
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_208_1361734134.987") :anon :lex :outer("cuid_209_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 959
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "%capnames"
    set $S5001, _lex_param_0
    box $P5002, 2
    set $P5001[$S5001], $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_113_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 324
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_20 
    .local pmc fb_tmp_21 
    .local pmc fb_tmp_22 
    .local pmc fb_tmp_23 
    .local pmc fb_tmp_24 
.annotate 'line', 325
    nqp_get_sc_object $P5001, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 114
.annotate 'line', 327
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback1647
    nqp_get_sc_object $P5004, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    get_who $P5003, $P5004
    set fb_tmp_20, $P5003
    repr_defined $I5001, fb_tmp_20
    unless $I5001 goto if544_else1648 
    set $P5005, fb_tmp_20["$W"]
    set $P5007, $P5005
    goto if544_end1649
  if544_else1648:
    null $P5006
    set $P5007, $P5006
  if544_end1649:
    unless_null $P5007, vivi_5451650
    nqp_get_sc_object $P5008, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5007, $P5008
  vivi_5451650:
    unless_null $P5007, vivi_5461651
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5007, $P5009
  vivi_5461651:
    set $P5002, $P5007
  fallback1647:
    $P5010 = $P5002."sc"()
.annotate 'line', 328
    find_dynamic_lex $P5011, "$*W"
    unless_null $P5011, fallback1652
    nqp_get_sc_object $P5013, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    get_who $P5012, $P5013
    set fb_tmp_21, $P5012
    repr_defined $I5002, fb_tmp_21
    unless $I5002 goto if547_else1653 
    set $P5014, fb_tmp_21["$W"]
    set $P5016, $P5014
    goto if547_end1654
  if547_else1653:
    null $P5015
    set $P5016, $P5015
  if547_end1654:
    unless_null $P5016, vivi_5481655
    nqp_get_sc_object $P5017, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5016, $P5017
  vivi_5481655:
    unless_null $P5016, vivi_5491656
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5016, $P5018
  vivi_5491656:
    set $P5011, $P5016
  fallback1652:
    $P5019 = $P5011."code_ref_blocks"()
.annotate 'line', 330
    find_dynamic_lex $P5020, "$*W"
    unless_null $P5020, fallback1657
    nqp_get_sc_object $P5022, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    get_who $P5021, $P5022
    set fb_tmp_22, $P5021
    repr_defined $I5003, fb_tmp_22
    unless $I5003 goto if550_else1658 
    set $P5023, fb_tmp_22["$W"]
    set $P5025, $P5023
    goto if550_end1659
  if550_else1658:
    null $P5024
    set $P5025, $P5024
  if550_end1659:
    unless_null $P5025, vivi_5511660
    nqp_get_sc_object $P5026, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5025, $P5026
  vivi_5511660:
    unless_null $P5025, vivi_5521661
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5025, $P5027
  vivi_5521661:
    set $P5020, $P5025
  fallback1657:
    $P5028 = $P5020."load_dependency_tasks"()
.annotate 'line', 331
    find_dynamic_lex $P5029, "$*W"
    unless_null $P5029, fallback1662
    nqp_get_sc_object $P5031, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    get_who $P5030, $P5031
    set fb_tmp_23, $P5030
    repr_defined $I5004, fb_tmp_23
    unless $I5004 goto if553_else1663 
    set $P5032, fb_tmp_23["$W"]
    set $P5034, $P5032
    goto if553_end1664
  if553_else1663:
    null $P5033
    set $P5034, $P5033
  if553_end1664:
    unless_null $P5034, vivi_5541665
    nqp_get_sc_object $P5035, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5034, $P5035
  vivi_5541665:
    unless_null $P5034, vivi_5551666
    die "Contextual $*W not found"
    box $P5036, "Contextual $*W not found"
    set $P5034, $P5036
  vivi_5551666:
    set $P5029, $P5034
  fallback1662:
    $P5037 = $P5029."fixup_tasks"()
.annotate 'line', 332
    nqp_decontainerize $P5038, _lex_param_0
    unless_null _lex_param_1, fallback1669
    nqp_get_sc_object $P5039, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5039
  fallback1669:
    set fb_tmp_24, _lex_param_1
    repr_defined $I5005, fb_tmp_24
    unless $I5005 goto if556_else1667 
    set $P5040, fb_tmp_24["nibbler"]
    set $P5042, $P5040
    goto if556_end1668
  if556_else1667:
    null $P5041
    set $P5042, $P5041
  if556_end1668:
    unless_null $P5042, vivi_5571670
    nqp_get_sc_object $P5043, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5042, $P5043
  vivi_5571670:
    $P5044 = $P5042."ast"()
    $P5045 = $P5038."qbuildsub"($P5044, 1 :named("anon"), 1 :named("addself"))
    $P5046 = $P5001."new"($P5045, "P6Regex" :named("hll"), $P5010 :named("sc"), $P5019 :named("code_ref_blocks"), 0 :named("compilation_mode"), $P5028 :named("pre_deserialize"), $P5037 :named("post_deserialize"))
    $P5047 = _lex_param_1."!make"($P5046)
    .return ($P5047) 
.end
.HLL "nqp"
.namespace []
.sub "nibbler" :subid("cuid_114_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 336
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_25 
    unless_null _lex_param_1, fallback1673
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5001
  fallback1673:
    set fb_tmp_25, _lex_param_1
    repr_defined $I5001, fb_tmp_25
    unless $I5001 goto if558_else1671 
    set $P5002, fb_tmp_25["termaltseq"]
    set $P5004, $P5002
    goto if558_end1672
  if558_else1671:
    null $P5003
    set $P5004, $P5003
  if558_end1672:
    unless_null $P5004, vivi_5591674
    nqp_get_sc_object $P5005, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5004, $P5005
  vivi_5591674:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "termaltseq" :subid("cuid_115_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 338
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_210_1361734134.987' 
    capture_lex $P5030 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_26 
    .local pmc fb_tmp_27 
    .local pmc fb_tmp_28 
    .local pmc fb_tmp_29 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 339
    unless_null _lex_param_1, fallback1679
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5002
  fallback1679:
    set fb_tmp_27, _lex_param_1
    repr_defined $I5002, fb_tmp_27
    unless $I5002 goto if561_else1677 
    set $P5003, fb_tmp_27["termconjseq"]
    set $P5005, $P5003
    goto if561_end1678
  if561_else1677:
    null $P5004
    set $P5005, $P5004
  if561_end1678:
    unless_null $P5005, vivi_5621680
    nqp_get_sc_object $P5006, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5005, $P5006
  vivi_5621680:
    set fb_tmp_26, $P5005
    repr_defined $I5001, fb_tmp_26
    unless $I5001 goto if560_else1675 
    set $P5007, fb_tmp_26[0]
    set $P5009, $P5007
    goto if560_end1676
  if560_else1675:
    null $P5008
    set $P5009, $P5008
  if560_end1676:
    unless_null $P5009, vivi_5631681
    nqp_get_sc_object $P5010, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5009, $P5010
  vivi_5631681:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    unless_null _lex_param_1, fallback1686
    nqp_get_sc_object $P5012, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5012
  fallback1686:
    set fb_tmp_28, _lex_param_1
    repr_defined $I5004, fb_tmp_28
    unless $I5004 goto if565_else1684 
    set $P5013, fb_tmp_28["termconjseq"]
    set $P5015, $P5013
    goto if565_end1685
  if565_else1684:
    null $P5014
    set $P5015, $P5014
  if565_end1685:
    unless_null $P5015, vivi_5661687
    nqp_get_sc_object $P5016, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5015, $P5016
  vivi_5661687:
    set $N5001, $P5015
    set $N5002, 1
    isgt $I5003, $N5001, $N5002
    unless $I5003 goto if564_end1683 
.annotate 'line', 340
.annotate 'line', 341
    nqp_get_sc_object $P5017, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5018 = $P5017."new"("altseq" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5018
    unless_null _lex_param_1, fallback1690
    nqp_get_sc_object $P5022, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5022
  fallback1690:
    set fb_tmp_29, _lex_param_1
    repr_defined $I5005, fb_tmp_29
    unless $I5005 goto if567_else1688 
    set $P5023, fb_tmp_29["termconjseq"]
    set $P5025, $P5023
    goto if567_end1689
  if567_else1688:
    null $P5024
    set $P5025, $P5024
  if567_end1689:
    unless_null $P5025, vivi_5681691
    nqp_get_sc_object $P5026, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5025, $P5026
  vivi_5681691:
    set $P5019, $P5025
    iter $P5021, $P5025
  for_next1692:
    unless $P5021, for_done1694
    shift $P5028, $P5021
  for_redo1693:
    .const 'Sub' $P5027 = 'cuid_210_1361734134.987' 
    capture_lex $P5027
    $P5019 = $P5027($P5028)
    goto for_next1692
  for_done1694:
  if564_end1683:
.annotate 'line', 344
    $P5029 = _lex_param_1."!make"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_210_1361734134.987") :anon :lex :outer("cuid_115_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 342
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termconjseq" :subid("cuid_116_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 347
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_211_1361734134.987' 
    capture_lex $P5030 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_30 
    .local pmc fb_tmp_31 
    .local pmc fb_tmp_32 
    .local pmc fb_tmp_33 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 348
    unless_null _lex_param_1, fallback1699
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5002
  fallback1699:
    set fb_tmp_31, _lex_param_1
    repr_defined $I5002, fb_tmp_31
    unless $I5002 goto if570_else1697 
    set $P5003, fb_tmp_31["termalt"]
    set $P5005, $P5003
    goto if570_end1698
  if570_else1697:
    null $P5004
    set $P5005, $P5004
  if570_end1698:
    unless_null $P5005, vivi_5711700
    nqp_get_sc_object $P5006, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5005, $P5006
  vivi_5711700:
    set fb_tmp_30, $P5005
    repr_defined $I5001, fb_tmp_30
    unless $I5001 goto if569_else1695 
    set $P5007, fb_tmp_30[0]
    set $P5009, $P5007
    goto if569_end1696
  if569_else1695:
    null $P5008
    set $P5009, $P5008
  if569_end1696:
    unless_null $P5009, vivi_5721701
    nqp_get_sc_object $P5010, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5009, $P5010
  vivi_5721701:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    unless_null _lex_param_1, fallback1706
    nqp_get_sc_object $P5012, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5012
  fallback1706:
    set fb_tmp_32, _lex_param_1
    repr_defined $I5004, fb_tmp_32
    unless $I5004 goto if574_else1704 
    set $P5013, fb_tmp_32["termalt"]
    set $P5015, $P5013
    goto if574_end1705
  if574_else1704:
    null $P5014
    set $P5015, $P5014
  if574_end1705:
    unless_null $P5015, vivi_5751707
    nqp_get_sc_object $P5016, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5015, $P5016
  vivi_5751707:
    set $N5001, $P5015
    set $N5002, 1
    isgt $I5003, $N5001, $N5002
    unless $I5003 goto if573_end1703 
.annotate 'line', 349
.annotate 'line', 350
    nqp_get_sc_object $P5017, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5018 = $P5017."new"("conjseq" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5018
    unless_null _lex_param_1, fallback1710
    nqp_get_sc_object $P5022, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5022
  fallback1710:
    set fb_tmp_33, _lex_param_1
    repr_defined $I5005, fb_tmp_33
    unless $I5005 goto if576_else1708 
    set $P5023, fb_tmp_33["termalt"]
    set $P5025, $P5023
    goto if576_end1709
  if576_else1708:
    null $P5024
    set $P5025, $P5024
  if576_end1709:
    unless_null $P5025, vivi_5771711
    nqp_get_sc_object $P5026, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5025, $P5026
  vivi_5771711:
    set $P5019, $P5025
    iter $P5021, $P5025
  for_next1712:
    unless $P5021, for_done1714
    shift $P5028, $P5021
  for_redo1713:
    .const 'Sub' $P5027 = 'cuid_211_1361734134.987' 
    capture_lex $P5027
    $P5019 = $P5027($P5028)
    goto for_next1712
  for_done1714:
  if573_end1703:
.annotate 'line', 353
    $P5029 = _lex_param_1."!make"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_211_1361734134.987") :anon :lex :outer("cuid_116_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 351
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termalt" :subid("cuid_117_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 356
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_212_1361734134.987' 
    capture_lex $P5030 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_34 
    .local pmc fb_tmp_35 
    .local pmc fb_tmp_36 
    .local pmc fb_tmp_37 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 357
    unless_null _lex_param_1, fallback1719
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5002
  fallback1719:
    set fb_tmp_35, _lex_param_1
    repr_defined $I5002, fb_tmp_35
    unless $I5002 goto if579_else1717 
    set $P5003, fb_tmp_35["termconj"]
    set $P5005, $P5003
    goto if579_end1718
  if579_else1717:
    null $P5004
    set $P5005, $P5004
  if579_end1718:
    unless_null $P5005, vivi_5801720
    nqp_get_sc_object $P5006, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5005, $P5006
  vivi_5801720:
    set fb_tmp_34, $P5005
    repr_defined $I5001, fb_tmp_34
    unless $I5001 goto if578_else1715 
    set $P5007, fb_tmp_34[0]
    set $P5009, $P5007
    goto if578_end1716
  if578_else1715:
    null $P5008
    set $P5009, $P5008
  if578_end1716:
    unless_null $P5009, vivi_5811721
    nqp_get_sc_object $P5010, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5009, $P5010
  vivi_5811721:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    unless_null _lex_param_1, fallback1726
    nqp_get_sc_object $P5012, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5012
  fallback1726:
    set fb_tmp_36, _lex_param_1
    repr_defined $I5004, fb_tmp_36
    unless $I5004 goto if583_else1724 
    set $P5013, fb_tmp_36["termconj"]
    set $P5015, $P5013
    goto if583_end1725
  if583_else1724:
    null $P5014
    set $P5015, $P5014
  if583_end1725:
    unless_null $P5015, vivi_5841727
    nqp_get_sc_object $P5016, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5015, $P5016
  vivi_5841727:
    set $N5001, $P5015
    set $N5002, 1
    isgt $I5003, $N5001, $N5002
    unless $I5003 goto if582_end1723 
.annotate 'line', 358
.annotate 'line', 359
    nqp_get_sc_object $P5017, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5018 = $P5017."new"("alt" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5018
    unless_null _lex_param_1, fallback1730
    nqp_get_sc_object $P5022, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5022
  fallback1730:
    set fb_tmp_37, _lex_param_1
    repr_defined $I5005, fb_tmp_37
    unless $I5005 goto if585_else1728 
    set $P5023, fb_tmp_37["termconj"]
    set $P5025, $P5023
    goto if585_end1729
  if585_else1728:
    null $P5024
    set $P5025, $P5024
  if585_end1729:
    unless_null $P5025, vivi_5861731
    nqp_get_sc_object $P5026, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5025, $P5026
  vivi_5861731:
    set $P5019, $P5025
    iter $P5021, $P5025
  for_next1732:
    unless $P5021, for_done1734
    shift $P5028, $P5021
  for_redo1733:
    .const 'Sub' $P5027 = 'cuid_212_1361734134.987' 
    capture_lex $P5027
    $P5019 = $P5027($P5028)
    goto for_next1732
  for_done1734:
  if582_end1723:
.annotate 'line', 362
    $P5029 = _lex_param_1."!make"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_212_1361734134.987") :anon :lex :outer("cuid_117_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 360
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termconj" :subid("cuid_118_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 365
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_213_1361734134.987' 
    capture_lex $P5030 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_38 
    .local pmc fb_tmp_39 
    .local pmc fb_tmp_40 
    .local pmc fb_tmp_41 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 366
    unless_null _lex_param_1, fallback1739
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5002
  fallback1739:
    set fb_tmp_39, _lex_param_1
    repr_defined $I5002, fb_tmp_39
    unless $I5002 goto if588_else1737 
    set $P5003, fb_tmp_39["termish"]
    set $P5005, $P5003
    goto if588_end1738
  if588_else1737:
    null $P5004
    set $P5005, $P5004
  if588_end1738:
    unless_null $P5005, vivi_5891740
    nqp_get_sc_object $P5006, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5005, $P5006
  vivi_5891740:
    set fb_tmp_38, $P5005
    repr_defined $I5001, fb_tmp_38
    unless $I5001 goto if587_else1735 
    set $P5007, fb_tmp_38[0]
    set $P5009, $P5007
    goto if587_end1736
  if587_else1735:
    null $P5008
    set $P5009, $P5008
  if587_end1736:
    unless_null $P5009, vivi_5901741
    nqp_get_sc_object $P5010, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5009, $P5010
  vivi_5901741:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    unless_null _lex_param_1, fallback1746
    nqp_get_sc_object $P5012, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5012
  fallback1746:
    set fb_tmp_40, _lex_param_1
    repr_defined $I5004, fb_tmp_40
    unless $I5004 goto if592_else1744 
    set $P5013, fb_tmp_40["termish"]
    set $P5015, $P5013
    goto if592_end1745
  if592_else1744:
    null $P5014
    set $P5015, $P5014
  if592_end1745:
    unless_null $P5015, vivi_5931747
    nqp_get_sc_object $P5016, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5015, $P5016
  vivi_5931747:
    set $N5001, $P5015
    set $N5002, 1
    isgt $I5003, $N5001, $N5002
    unless $I5003 goto if591_end1743 
.annotate 'line', 367
.annotate 'line', 368
    nqp_get_sc_object $P5017, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5018 = $P5017."new"("conj" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5018
    unless_null _lex_param_1, fallback1750
    nqp_get_sc_object $P5022, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5022
  fallback1750:
    set fb_tmp_41, _lex_param_1
    repr_defined $I5005, fb_tmp_41
    unless $I5005 goto if594_else1748 
    set $P5023, fb_tmp_41["termish"]
    set $P5025, $P5023
    goto if594_end1749
  if594_else1748:
    null $P5024
    set $P5025, $P5024
  if594_end1749:
    unless_null $P5025, vivi_5951751
    nqp_get_sc_object $P5026, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5025, $P5026
  vivi_5951751:
    set $P5019, $P5025
    iter $P5021, $P5025
  for_next1752:
    unless $P5021, for_done1754
    shift $P5028, $P5021
  for_redo1753:
    .const 'Sub' $P5027 = 'cuid_213_1361734134.987' 
    capture_lex $P5027
    $P5019 = $P5027($P5028)
    goto for_next1752
  for_done1754:
  if591_end1743:
.annotate 'line', 371
    $P5029 = _lex_param_1."!make"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_213_1361734134.987") :anon :lex :outer("cuid_118_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 369
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termish" :subid("cuid_119_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 374
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5017 = 'cuid_214_1361734134.987' 
    capture_lex $P5017 
    .lex "$qast", $P101 
    .lex "$lastlit", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_42 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P102, $P5002
.annotate 'line', 375
    nqp_get_sc_object $P5003, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5004 = $P5003."new"("concat" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5004
    box $P5005, 0
    set $P102, $P5005
    unless_null _lex_param_1, fallback1757
    nqp_get_sc_object $P5009, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5009
  fallback1757:
    set fb_tmp_42, _lex_param_1
    repr_defined $I5001, fb_tmp_42
    unless $I5001 goto if596_else1755 
    set $P5010, fb_tmp_42["noun"]
    set $P5012, $P5010
    goto if596_end1756
  if596_else1755:
    null $P5011
    set $P5012, $P5011
  if596_end1756:
    unless_null $P5012, vivi_5971758
    nqp_get_sc_object $P5013, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5012, $P5013
  vivi_5971758:
    set $P5006, $P5012
    iter $P5008, $P5012
  for_next1783:
    unless $P5008, for_done1785
    shift $P5015, $P5008
  for_redo1784:
    .const 'Sub' $P5014 = 'cuid_214_1361734134.987' 
    capture_lex $P5014
    $P5006 = $P5014($P5015)
    goto for_next1783
  for_done1785:
.annotate 'line', 392
    $P5016 = _lex_param_1."!make"($P101)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_214_1361734134.987") :anon :lex :outer("cuid_119_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 377
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_43 
    .local pmc fb_tmp_44 
    .local pmc fb_tmp_45 
    .local pmc fb_tmp_46 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 378
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
    set $P5038, $P101
    unless $P101 goto if598_end1760 
.annotate 'line', 379
    find_lex $P5003, "$lastlit"
    set $P5005, $P5003
    unless $P5003 goto if601_end1766 
.annotate 'line', 380
    $P5004 = $P101."rxtype"()
    set $S5001, $P5004
    iseq $I5001, $S5001, "literal"
    box $P5006, $I5001
    set $P5005, $P5006
  if601_end1766:
    set $P5013, $P5005
    unless $P5005 goto if600_end1764 
.annotate 'line', 381
    nqp_get_sc_object $P5007, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 12
    set fb_tmp_43, $P101
    repr_defined $I5003, fb_tmp_43
    unless $I5003 goto if602_else1767 
    set $P5008, fb_tmp_43[0]
    set $P5010, $P5008
    goto if602_end1768
  if602_else1767:
    null $P5009
    set $P5010, $P5009
  if602_end1768:
    unless_null $P5010, vivi_6031769
    nqp_get_sc_object $P5011, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5010, $P5011
  vivi_6031769:
    $P5012 = $P5007."ACCEPTS"($P5010)
    isfalse $I5002, $P5012
    box $P5014, $I5002
    set $P5013, $P5014
  if600_end1764:
    unless $P5013 goto if599_else1761 
    find_lex $P5015, "$lastlit"
    find_lex $P5016, "$lastlit"
    set fb_tmp_44, $P5016
    repr_defined $I5004, fb_tmp_44
    unless $I5004 goto if604_else1770 
    set $P5017, fb_tmp_44[0]
    set $P5019, $P5017
    goto if604_end1771
  if604_else1770:
    null $P5018
    set $P5019, $P5018
  if604_end1771:
    unless_null $P5019, vivi_6051772
    nqp_get_sc_object $P5020, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5019, $P5020
  vivi_6051772:
    set $S5003, $P5019
    set fb_tmp_45, $P101
    repr_defined $I5005, fb_tmp_45
    unless $I5005 goto if606_else1773 
    set $P5021, fb_tmp_45[0]
    set $P5023, $P5021
    goto if606_end1774
  if606_else1773:
    null $P5022
    set $P5023, $P5022
  if606_end1774:
    unless_null $P5023, vivi_6071775
    nqp_get_sc_object $P5024, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5023, $P5024
  vivi_6071775:
    set $S5004, $P5023
    concat $S5002, $S5003, $S5004
    box $P5025, $S5002
    set $P5015[0], $P5025
    set $P5037, $P5025
    goto if599_end1762
  if599_else1761:
.annotate 'line', 384
.annotate 'line', 385
    find_lex $P5026, "$qast"
    $P5027 = _lex_param_0."ast"()
    $P5026."push"($P5027)
.annotate 'line', 386
    $P5028 = $P101."rxtype"()
    set $S5005, $P5028
    iseq $I5006, $S5005, "literal"
    set $I5009, $I5006
    unless $I5006 goto if609_end1779 
.annotate 'line', 387
    nqp_get_sc_object $P5029, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 12
    set fb_tmp_46, $P101
    repr_defined $I5008, fb_tmp_46
    unless $I5008 goto if610_else1780 
    set $P5030, fb_tmp_46[0]
    set $P5032, $P5030
    goto if610_end1781
  if610_else1780:
    null $P5031
    set $P5032, $P5031
  if610_end1781:
    unless_null $P5032, vivi_6111782
    nqp_get_sc_object $P5033, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5032, $P5033
  vivi_6111782:
    $P5034 = $P5029."ACCEPTS"($P5032)
    isfalse $I5007, $P5034
    set $I5009, $I5007
  if609_end1779:
    unless $I5009 goto if608_else1776 
    set $P5035, $P101
    goto if608_end1777
  if608_else1776:
    box $P5036, 0
    set $P5035, $P5036
  if608_end1777:
    store_lex "$lastlit", $P5035
    set $P5037, $P5035
  if599_end1762:
    set $P5038, $P5037
  if598_end1760:
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "quantified_atom" :subid("cuid_120_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 395
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5110 = 'cuid_215_1361734134.987' 
    capture_lex $P5110 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_47 
    .local pmc fb_tmp_48 
    .local pmc fb_tmp_51 
    .local pmc fb_tmp_52 
    .local pmc fb_tmp_53 
    .local pmc fb_tmp_54 
    .local pmc fb_tmp_55 
    .local pmc fb_tmp_56 
    .local pmc fb_tmp_57 
    .local pmc fb_tmp_58 
    .local pmc fb_tmp_59 
    .local pmc fb_tmp_60 
    .local pmc fb_tmp_61 
    .local pmc fb_tmp_62 
    .local pmc fb_tmp_63 
    .local pmc pkg_viv_tmp_4 
    .local pmc fb_tmp_64 
    .local pmc fb_tmp_65 
    .local pmc fb_tmp_66 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 396
    unless_null _lex_param_1, fallback1788
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5002
  fallback1788:
    set fb_tmp_47, _lex_param_1
    repr_defined $I5001, fb_tmp_47
    unless $I5001 goto if612_else1786 
    set $P5003, fb_tmp_47["atom"]
    set $P5005, $P5003
    goto if612_end1787
  if612_else1786:
    null $P5004
    set $P5005, $P5004
  if612_end1787:
    unless_null $P5005, vivi_6131789
    nqp_get_sc_object $P5006, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5005, $P5006
  vivi_6131789:
    $P5007 = $P5005."ast"()
    set $P101, $P5007
    unless_null _lex_param_1, fallback1794
    nqp_get_sc_object $P5008, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5008
  fallback1794:
    set fb_tmp_48, _lex_param_1
    repr_defined $I5002, fb_tmp_48
    unless $I5002 goto if615_else1792 
    set $P5009, fb_tmp_48["quantifier"]
    set $P5011, $P5009
    goto if615_end1793
  if615_else1792:
    null $P5010
    set $P5011, $P5010
  if615_end1793:
    unless_null $P5011, vivi_6161795
    nqp_get_sc_object $P5012, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5011, $P5012
  vivi_6161795:
    unless $P5011 goto if614_end1791 
    .const 'Sub' $P5013 = 'cuid_215_1361734134.987' 
    capture_lex $P5013
    $P5014 = $P5013()
  if614_end1791:
    unless_null _lex_param_1, fallback1807
    nqp_get_sc_object $P5015, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5015
  fallback1807:
    set fb_tmp_51, _lex_param_1
    repr_defined $I5003, fb_tmp_51
    unless $I5003 goto if622_else1805 
    set $P5016, fb_tmp_51["separator"]
    set $P5018, $P5016
    goto if622_end1806
  if622_else1805:
    null $P5017
    set $P5018, $P5017
  if622_end1806:
    unless_null $P5018, vivi_6231808
    nqp_get_sc_object $P5019, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5018, $P5019
  vivi_6231808:
    unless $P5018 goto if621_end1804 
.annotate 'line', 402
.annotate 'line', 403
    $P5020 = $P101."rxtype"()
    set $S5001, $P5020
    iseq $I5004, $S5001, "quant"
    if $I5004 goto unless624_end1810 
.annotate 'line', 404
    $P5021 = _lex_param_1."CURSOR"()
    unless_null _lex_param_1, fallback1817
    nqp_get_sc_object $P5022, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5022
  fallback1817:
    set fb_tmp_54, _lex_param_1
    repr_defined $I5007, fb_tmp_54
    unless $I5007 goto if627_else1815 
    set $P5023, fb_tmp_54["separator"]
    set $P5025, $P5023
    goto if627_end1816
  if627_else1815:
    null $P5024
    set $P5025, $P5024
  if627_end1816:
    unless_null $P5025, vivi_6281818
    nqp_get_sc_object $P5026, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5025, $P5026
  vivi_6281818:
    set fb_tmp_53, $P5025
    repr_defined $I5006, fb_tmp_53
    unless $I5006 goto if626_else1813 
    set $P5027, fb_tmp_53[0]
    set $P5029, $P5027
    goto if626_end1814
  if626_else1813:
    null $P5028
    set $P5029, $P5028
  if626_end1814:
    unless_null $P5029, vivi_6291819
    nqp_get_sc_object $P5030, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5029, $P5030
  vivi_6291819:
    set fb_tmp_52, $P5029
    repr_defined $I5005, fb_tmp_52
    unless $I5005 goto if625_else1811 
    set $P5031, fb_tmp_52["septype"]
    set $P5033, $P5031
    goto if625_end1812
  if625_else1811:
    null $P5032
    set $P5033, $P5032
  if625_end1812:
    unless_null $P5033, vivi_6301820
    nqp_get_sc_object $P5034, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5033, $P5034
  vivi_6301820:
    set $S5004, $P5033
    concat $S5003, "'", $S5004
    concat $S5002, $S5003, "' many only be used immediately following a quantifier"
    $P5035 = $P5021."panic"($S5002)
  unless624_end1810:
.annotate 'line', 407
    unless_null _lex_param_1, fallback1825
    nqp_get_sc_object $P5036, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5036
  fallback1825:
    set fb_tmp_56, _lex_param_1
    repr_defined $I5009, fb_tmp_56
    unless $I5009 goto if632_else1823 
    set $P5037, fb_tmp_56["separator"]
    set $P5039, $P5037
    goto if632_end1824
  if632_else1823:
    null $P5038
    set $P5039, $P5038
  if632_end1824:
    unless_null $P5039, vivi_6331826
    nqp_get_sc_object $P5040, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5039, $P5040
  vivi_6331826:
    set fb_tmp_55, $P5039
    repr_defined $I5008, fb_tmp_55
    unless $I5008 goto if631_else1821 
    set $P5041, fb_tmp_55[0]
    set $P5043, $P5041
    goto if631_end1822
  if631_else1821:
    null $P5042
    set $P5043, $P5042
  if631_end1822:
    unless_null $P5043, vivi_6341827
    nqp_get_sc_object $P5044, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5043, $P5044
  vivi_6341827:
    $P5045 = $P5043."ast"()
    $P101."push"($P5045)
    unless_null _lex_param_1, fallback1836
    nqp_get_sc_object $P5046, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5046
  fallback1836:
    set fb_tmp_59, _lex_param_1
    repr_defined $I5013, fb_tmp_59
    unless $I5013 goto if638_else1834 
    set $P5047, fb_tmp_59["separator"]
    set $P5049, $P5047
    goto if638_end1835
  if638_else1834:
    null $P5048
    set $P5049, $P5048
  if638_end1835:
    unless_null $P5049, vivi_6391837
    nqp_get_sc_object $P5050, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5049, $P5050
  vivi_6391837:
    set fb_tmp_58, $P5049
    repr_defined $I5012, fb_tmp_58
    unless $I5012 goto if637_else1832 
    set $P5051, fb_tmp_58[0]
    set $P5053, $P5051
    goto if637_end1833
  if637_else1832:
    null $P5052
    set $P5053, $P5052
  if637_end1833:
    unless_null $P5053, vivi_6401838
    nqp_get_sc_object $P5054, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5053, $P5054
  vivi_6401838:
    set fb_tmp_57, $P5053
    repr_defined $I5011, fb_tmp_57
    unless $I5011 goto if636_else1830 
    set $P5055, fb_tmp_57["septype"]
    set $P5057, $P5055
    goto if636_end1831
  if636_else1830:
    null $P5056
    set $P5057, $P5056
  if636_end1831:
    unless_null $P5057, vivi_6411839
    nqp_get_sc_object $P5058, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5057, $P5058
  vivi_6411839:
    set $S5005, $P5057
    iseq $I5010, $S5005, "%%"
    box $P5074, $I5010
    set $P5073, $P5074
    unless $I5010 goto if635_end1829 
.annotate 'line', 408
.annotate 'line', 409
    nqp_get_sc_object $P5059, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
.annotate 'line', 410
    nqp_get_sc_object $P5060, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    unless_null _lex_param_1, fallback1844
    nqp_get_sc_object $P5061, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5061
  fallback1844:
    set fb_tmp_61, _lex_param_1
    repr_defined $I5015, fb_tmp_61
    unless $I5015 goto if643_else1842 
    set $P5062, fb_tmp_61["separator"]
    set $P5064, $P5062
    goto if643_end1843
  if643_else1842:
    null $P5063
    set $P5064, $P5063
  if643_end1843:
    unless_null $P5064, vivi_6441845
    nqp_get_sc_object $P5065, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5064, $P5065
  vivi_6441845:
    set fb_tmp_60, $P5064
    repr_defined $I5014, fb_tmp_60
    unless $I5014 goto if642_else1840 
    set $P5066, fb_tmp_60[0]
    set $P5068, $P5066
    goto if642_end1841
  if642_else1840:
    null $P5067
    set $P5068, $P5067
  if642_end1841:
    unless_null $P5068, vivi_6451846
    nqp_get_sc_object $P5069, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5068, $P5069
  vivi_6451846:
    $P5070 = $P5068."ast"()
    $P5071 = $P5060."new"($P5070, "quant" :named("rxtype"), 0 :named("min"), 1 :named("max"))
    $P5072 = $P5059."new"($P101, $P5071, "concat" :named("rxtype"))
    set $P101, $P5072
    set $P5073, $P101
  if635_end1829:
  if621_end1804:
    set $P5076, $P101
    unless $P101 goto if648_end1852 
.annotate 'line', 413
    $P5075 = $P101."backtrack"()
    isfalse $I5016, $P5075
    box $P5077, $I5016
    set $P5076, $P5077
  if648_end1852:
    set $P5107, $P5076
    unless $P5076 goto if647_end1850 
    find_dynamic_lex $P5078, "%*RX"
    unless_null $P5078, fallback1857
    nqp_get_sc_object $P5080, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    get_who $P5079, $P5080
    set pkg_viv_tmp_4, $P5079
    set fb_tmp_63, pkg_viv_tmp_4
    repr_defined $I5018, fb_tmp_63
    unless $I5018 goto if651_else1858 
    set $P5081, fb_tmp_63["%RX"]
    set $P5083, $P5081
    goto if651_end1859
  if651_else1858:
    null $P5082
    set $P5083, $P5082
  if651_end1859:
    unless_null $P5083, vivi_6521860
    new $P5084, 'Hash'
    set pkg_viv_tmp_4["%RX"], $P5084
    set $P5083, $P5084
  vivi_6521860:
    unless_null $P5083, vivi_6531861
    die "Contextual %*RX not found"
    box $P5085, "Contextual %*RX not found"
    set $P5083, $P5085
  vivi_6531861:
    set $P5078, $P5083
  fallback1857:
    set fb_tmp_62, $P5078
    repr_defined $I5017, fb_tmp_62
    unless $I5017 goto if650_else1855 
    set $P5086, fb_tmp_62["r"]
    set $P5088, $P5086
    goto if650_end1856
  if650_else1855:
    null $P5087
    set $P5088, $P5087
  if650_end1856:
    unless_null $P5088, vivi_6541862
    nqp_get_sc_object $P5089, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5088, $P5089
  vivi_6541862:
    set $P5106, $P5088
    if $P5088 goto unless649_end1854 
    unless_null _lex_param_1, fallback1867
    nqp_get_sc_object $P5090, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5090
  fallback1867:
    set fb_tmp_64, _lex_param_1
    repr_defined $I5019, fb_tmp_64
    unless $I5019 goto if656_else1865 
    set $P5091, fb_tmp_64["backmod"]
    set $P5093, $P5091
    goto if656_end1866
  if656_else1865:
    null $P5092
    set $P5093, $P5092
  if656_end1866:
    unless_null $P5093, vivi_6571868
    nqp_get_sc_object $P5094, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5093, $P5094
  vivi_6571868:
    set $P5104, $P5093
    unless $P5093 goto if655_end1864 
    unless_null _lex_param_1, fallback1873
    nqp_get_sc_object $P5095, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5095
  fallback1873:
    set fb_tmp_66, _lex_param_1
    repr_defined $I5022, fb_tmp_66
    unless $I5022 goto if659_else1871 
    set $P5096, fb_tmp_66["backmod"]
    set $P5098, $P5096
    goto if659_end1872
  if659_else1871:
    null $P5097
    set $P5098, $P5097
  if659_end1872:
    unless_null $P5098, vivi_6601874
    nqp_get_sc_object $P5099, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5098, $P5099
  vivi_6601874:
    set fb_tmp_65, $P5098
    repr_defined $I5021, fb_tmp_65
    unless $I5021 goto if658_else1869 
    set $P5100, fb_tmp_65[0]
    set $P5102, $P5100
    goto if658_end1870
  if658_else1869:
    null $P5101
    set $P5102, $P5101
  if658_end1870:
    unless_null $P5102, vivi_6611875
    nqp_get_sc_object $P5103, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5102, $P5103
  vivi_6611875:
    set $S5006, $P5102
    iseq $I5020, $S5006, ":"
    box $P5105, $I5020
    set $P5104, $P5105
  if655_end1864:
    set $P5106, $P5104
  unless649_end1854:
    set $P5107, $P5106
  if647_end1850:
    unless $P5107 goto if646_end1848 
    $P5108 = $P101."backtrack"("r")
  if646_end1848:
.annotate 'line', 415
    $P5109 = _lex_param_1."!make"($P101)
    .return ($P5109) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_215_1361734134.987") :anon :lex :outer("cuid_120_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 397
    .lex "$ast", $P101 
    .local pmc fb_tmp_49 
    .local pmc fb_tmp_50 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 398
    find_lex $P5002, "$/"
    unless_null $P5002, fallback1800
    nqp_get_sc_object $P5003, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5002, $P5003
  fallback1800:
    set fb_tmp_50, $P5002
    repr_defined $I5002, fb_tmp_50
    unless $I5002 goto if618_else1798 
    set $P5004, fb_tmp_50["quantifier"]
    set $P5006, $P5004
    goto if618_end1799
  if618_else1798:
    null $P5005
    set $P5006, $P5005
  if618_end1799:
    unless_null $P5006, vivi_6191801
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_6191801:
    set fb_tmp_49, $P5006
    repr_defined $I5001, fb_tmp_49
    unless $I5001 goto if617_else1796 
    set $P5008, fb_tmp_49[0]
    set $P5010, $P5008
    goto if617_end1797
  if617_else1796:
    null $P5009
    set $P5010, $P5009
  if617_end1797:
    unless_null $P5010, vivi_6201802
    nqp_get_sc_object $P5011, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5010, $P5011
  vivi_6201802:
    $P5012 = $P5010."ast"()
    set $P101, $P5012
.annotate 'line', 399
    find_lex $P5013, "$qast"
    $P101."unshift"($P5013)
    store_lex "$qast", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "separator" :subid("cuid_121_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 418
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_67 
.annotate 'line', 419
    unless_null _lex_param_1, fallback1878
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5001
  fallback1878:
    set fb_tmp_67, _lex_param_1
    repr_defined $I5001, fb_tmp_67
    unless $I5001 goto if662_else1876 
    set $P5002, fb_tmp_67["quantified_atom"]
    set $P5004, $P5002
    goto if662_end1877
  if662_else1876:
    null $P5003
    set $P5004, $P5003
  if662_end1877:
    unless_null $P5004, vivi_6631879
    nqp_get_sc_object $P5005, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5004, $P5005
  vivi_6631879:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "atom" :subid("cuid_122_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 422
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5016 = 'cuid_216_1361734134.987' 
    capture_lex $P5016 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_68 
    .local pmc fb_tmp_69 
    unless_null _lex_param_1, fallback1884
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5001
  fallback1884:
    set fb_tmp_68, _lex_param_1
    repr_defined $I5001, fb_tmp_68
    unless $I5001 goto if665_else1882 
    set $P5002, fb_tmp_68["metachar"]
    set $P5004, $P5002
    goto if665_end1883
  if665_else1882:
    null $P5003
    set $P5004, $P5003
  if665_end1883:
    unless_null $P5004, vivi_6661885
    nqp_get_sc_object $P5005, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5004, $P5005
  vivi_6661885:
    unless $P5004 goto if664_else1880 
.annotate 'line', 423
.annotate 'line', 424
    unless_null _lex_param_1, fallback1888
    nqp_get_sc_object $P5006, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5006
  fallback1888:
    set fb_tmp_69, _lex_param_1
    repr_defined $I5002, fb_tmp_69
    unless $I5002 goto if667_else1886 
    set $P5007, fb_tmp_69["metachar"]
    set $P5009, $P5007
    goto if667_end1887
  if667_else1886:
    null $P5008
    set $P5009, $P5008
  if667_end1887:
    unless_null $P5009, vivi_6681889
    nqp_get_sc_object $P5010, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5009, $P5010
  vivi_6681889:
    $P5011 = $P5009."ast"()
    $P5012 = _lex_param_1."!make"($P5011)
    set $P5015, $P5012
    goto if664_end1881
  if664_else1880:
    .const 'Sub' $P5013 = 'cuid_216_1361734134.987' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  if664_end1881:
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_216_1361734134.987") :anon :lex :outer("cuid_122_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 426
    .lex "$qast", $P101 
    .local pmc fb_tmp_70 
    .local pmc fb_tmp_71 
    .local pmc pkg_viv_tmp_5 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 427
    nqp_get_sc_object $P5002, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    find_lex $P5003, "$/"
    set $S5001, $P5003
    find_lex $P5004, "$/"
    $P5005 = $P5002."new"($S5001, "literal" :named("rxtype"), $P5004 :named("node"))
    set $P101, $P5005
    find_dynamic_lex $P5006, "%*RX"
    unless_null $P5006, fallback1894
    nqp_get_sc_object $P5008, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    get_who $P5007, $P5008
    set pkg_viv_tmp_5, $P5007
    set fb_tmp_71, pkg_viv_tmp_5
    repr_defined $I5002, fb_tmp_71
    unless $I5002 goto if671_else1895 
    set $P5009, fb_tmp_71["%RX"]
    set $P5011, $P5009
    goto if671_end1896
  if671_else1895:
    null $P5010
    set $P5011, $P5010
  if671_end1896:
    unless_null $P5011, vivi_6721897
    new $P5012, 'Hash'
    set pkg_viv_tmp_5["%RX"], $P5012
    set $P5011, $P5012
  vivi_6721897:
    unless_null $P5011, vivi_6731898
    die "Contextual %*RX not found"
    box $P5013, "Contextual %*RX not found"
    set $P5011, $P5013
  vivi_6731898:
    set $P5006, $P5011
  fallback1894:
    set fb_tmp_70, $P5006
    repr_defined $I5001, fb_tmp_70
    unless $I5001 goto if670_else1892 
    set $P5014, fb_tmp_70["i"]
    set $P5016, $P5014
    goto if670_end1893
  if670_else1892:
    null $P5015
    set $P5016, $P5015
  if670_end1893:
    unless_null $P5016, vivi_6741899
    nqp_get_sc_object $P5017, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5016, $P5017
  vivi_6741899:
    unless $P5016 goto if669_end1891 
.annotate 'line', 428
    $P5018 = $P101."subtype"("ignorecase")
  if669_end1891:
.annotate 'line', 429
    find_dynamic_lex $P5019, "$/"
    $P5020 = $P5019."!make"($P101)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<*>" :subid("cuid_123_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 433
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_72 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 434
    nqp_get_sc_object $P5002, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5003 = $P5002."new"("quant" :named("rxtype"), 0 :named("min"), -1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5003
.annotate 'line', 435
    unless_null _lex_param_1, fallback1902
    nqp_get_sc_object $P5004, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5004
  fallback1902:
    set fb_tmp_72, _lex_param_1
    repr_defined $I5001, fb_tmp_72
    unless $I5001 goto if675_else1900 
    set $P5005, fb_tmp_72["backmod"]
    set $P5007, $P5005
    goto if675_end1901
  if675_else1900:
    null $P5006
    set $P5007, $P5006
  if675_end1901:
    unless_null $P5007, vivi_6761903
    nqp_get_sc_object $P5008, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5007, $P5008
  vivi_6761903:
    $P5009 = "&backmod"($P101, $P5007)
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<+>" :subid("cuid_124_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 438
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_73 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 439
    nqp_get_sc_object $P5002, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5003 = $P5002."new"("quant" :named("rxtype"), 1 :named("min"), -1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5003
.annotate 'line', 440
    unless_null _lex_param_1, fallback1906
    nqp_get_sc_object $P5004, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5004
  fallback1906:
    set fb_tmp_73, _lex_param_1
    repr_defined $I5001, fb_tmp_73
    unless $I5001 goto if677_else1904 
    set $P5005, fb_tmp_73["backmod"]
    set $P5007, $P5005
    goto if677_end1905
  if677_else1904:
    null $P5006
    set $P5007, $P5006
  if677_end1905:
    unless_null $P5007, vivi_6781907
    nqp_get_sc_object $P5008, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5007, $P5008
  vivi_6781907:
    $P5009 = "&backmod"($P101, $P5007)
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<?>" :subid("cuid_125_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 443
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_74 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 444
    nqp_get_sc_object $P5002, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5003 = $P5002."new"("quant" :named("rxtype"), 0 :named("min"), 1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5003
.annotate 'line', 445
    unless_null _lex_param_1, fallback1910
    nqp_get_sc_object $P5004, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5004
  fallback1910:
    set fb_tmp_74, _lex_param_1
    repr_defined $I5001, fb_tmp_74
    unless $I5001 goto if679_else1908 
    set $P5005, fb_tmp_74["backmod"]
    set $P5007, $P5005
    goto if679_end1909
  if679_else1908:
    null $P5006
    set $P5007, $P5006
  if679_end1909:
    unless_null $P5007, vivi_6801911
    nqp_get_sc_object $P5008, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5007, $P5008
  vivi_6801911:
    $P5009 = "&backmod"($P101, $P5007)
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<**>" :subid("cuid_126_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 448
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_75 
    .local pmc fb_tmp_76 
    .local pmc fb_tmp_77 
    .local pmc fb_tmp_78 
    .local pmc fb_tmp_79 
    .local pmc fb_tmp_80 
    .local pmc fb_tmp_81 
    .local pmc fb_tmp_82 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 450
    nqp_get_sc_object $P5002, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    unless_null _lex_param_1, fallback1914
    nqp_get_sc_object $P5003, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5003
  fallback1914:
    set fb_tmp_75, _lex_param_1
    repr_defined $I5001, fb_tmp_75
    unless $I5001 goto if681_else1912 
    set $P5004, fb_tmp_75["min"]
    set $P5006, $P5004
    goto if681_end1913
  if681_else1912:
    null $P5005
    set $P5006, $P5005
  if681_end1913:
    unless_null $P5006, vivi_6821915
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_6821915:
    set $N5001, $P5006
    $P5008 = $P5002."new"("quant" :named("rxtype"), $N5001 :named("min"), -1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5008
    unless_null _lex_param_1, fallback1920
    nqp_get_sc_object $P5009, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5009
  fallback1920:
    set fb_tmp_76, _lex_param_1
    repr_defined $I5003, fb_tmp_76
    unless $I5003 goto if684_else1918 
    set $P5010, fb_tmp_76["max"]
    set $P5012, $P5010
    goto if684_end1919
  if684_else1918:
    null $P5011
    set $P5012, $P5011
  if684_end1919:
    unless_null $P5012, vivi_6851921
    nqp_get_sc_object $P5013, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5012, $P5013
  vivi_6851921:
    isfalse $I5002, $P5012
    unless $I5002 goto if683_else1916 
.annotate 'line', 451
    unless_null _lex_param_1, fallback1924
    nqp_get_sc_object $P5014, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5014
  fallback1924:
    set fb_tmp_77, _lex_param_1
    repr_defined $I5004, fb_tmp_77
    unless $I5004 goto if686_else1922 
    set $P5015, fb_tmp_77["min"]
    set $P5017, $P5015
    goto if686_end1923
  if686_else1922:
    null $P5016
    set $P5017, $P5016
  if686_end1923:
    unless_null $P5017, vivi_6871925
    nqp_get_sc_object $P5018, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5017, $P5018
  vivi_6871925:
    set $N5002, $P5017
    $P5019 = $P101."max"($N5002)
    goto if683_end1917
  if683_else1916:
    unless_null _lex_param_1, fallback1932
    nqp_get_sc_object $P5020, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5020
  fallback1932:
    set fb_tmp_79, _lex_param_1
    repr_defined $I5007, fb_tmp_79
    unless $I5007 goto if690_else1930 
    set $P5021, fb_tmp_79["max"]
    set $P5023, $P5021
    goto if690_end1931
  if690_else1930:
    null $P5022
    set $P5023, $P5022
  if690_end1931:
    unless_null $P5023, vivi_6911933
    nqp_get_sc_object $P5024, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5023, $P5024
  vivi_6911933:
    set fb_tmp_78, $P5023
    repr_defined $I5006, fb_tmp_78
    unless $I5006 goto if689_else1928 
    set $P5025, fb_tmp_78[0]
    set $P5027, $P5025
    goto if689_end1929
  if689_else1928:
    null $P5026
    set $P5027, $P5026
  if689_end1929:
    unless_null $P5027, vivi_6921934
    nqp_get_sc_object $P5028, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5027, $P5028
  vivi_6921934:
    set $S5001, $P5027
    isne $I5005, $S5001, "*"
    box $P5040, $I5005
    set $P5039, $P5040
    unless $I5005 goto if688_end1927 
.annotate 'line', 452
    unless_null _lex_param_1, fallback1939
    nqp_get_sc_object $P5029, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5029
  fallback1939:
    set fb_tmp_81, _lex_param_1
    repr_defined $I5009, fb_tmp_81
    unless $I5009 goto if694_else1937 
    set $P5030, fb_tmp_81["max"]
    set $P5032, $P5030
    goto if694_end1938
  if694_else1937:
    null $P5031
    set $P5032, $P5031
  if694_end1938:
    unless_null $P5032, vivi_6951940
    nqp_get_sc_object $P5033, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5032, $P5033
  vivi_6951940:
    set fb_tmp_80, $P5032
    repr_defined $I5008, fb_tmp_80
    unless $I5008 goto if693_else1935 
    set $P5034, fb_tmp_80[0]
    set $P5036, $P5034
    goto if693_end1936
  if693_else1935:
    null $P5035
    set $P5036, $P5035
  if693_end1936:
    unless_null $P5036, vivi_6961941
    nqp_get_sc_object $P5037, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5036, $P5037
  vivi_6961941:
    set $N5003, $P5036
    $P5038 = $P101."max"($N5003)
    set $P5039, $P5038
  if688_end1927:
  if683_end1917:
.annotate 'line', 453
    unless_null _lex_param_1, fallback1944
    nqp_get_sc_object $P5041, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5041
  fallback1944:
    set fb_tmp_82, _lex_param_1
    repr_defined $I5010, fb_tmp_82
    unless $I5010 goto if697_else1942 
    set $P5042, fb_tmp_82["backmod"]
    set $P5044, $P5042
    goto if697_end1943
  if697_else1942:
    null $P5043
    set $P5044, $P5043
  if697_end1943:
    unless_null $P5044, vivi_6981945
    nqp_get_sc_object $P5045, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5044, $P5045
  vivi_6981945:
    $P5046 = "&backmod"($P101, $P5044)
    $P5047 = _lex_param_1."!make"($P5046)
    .return ($P5047) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<ws>" :subid("cuid_127_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 456
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_83 
    .local pmc fb_tmp_84 
    .local pmc pkg_viv_tmp_6 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
    find_dynamic_lex $P5002, "%*RX"
    unless_null $P5002, fallback1950
    nqp_get_sc_object $P5004, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    get_who $P5003, $P5004
    set pkg_viv_tmp_6, $P5003
    set fb_tmp_84, pkg_viv_tmp_6
    repr_defined $I5002, fb_tmp_84
    unless $I5002 goto if701_else1951 
    set $P5005, fb_tmp_84["%RX"]
    set $P5007, $P5005
    goto if701_end1952
  if701_else1951:
    null $P5006
    set $P5007, $P5006
  if701_end1952:
    unless_null $P5007, vivi_7021953
    new $P5008, 'Hash'
    set pkg_viv_tmp_6["%RX"], $P5008
    set $P5007, $P5008
  vivi_7021953:
    unless_null $P5007, vivi_7031954
    die "Contextual %*RX not found"
    box $P5009, "Contextual %*RX not found"
    set $P5007, $P5009
  vivi_7031954:
    set $P5002, $P5007
  fallback1950:
    set fb_tmp_83, $P5002
    repr_defined $I5001, fb_tmp_83
    unless $I5001 goto if700_else1948 
    set $P5010, fb_tmp_83["s"]
    set $P5012, $P5010
    goto if700_end1949
  if700_else1948:
    null $P5011
    set $P5012, $P5011
  if700_end1949:
    unless_null $P5012, vivi_7041955
    nqp_get_sc_object $P5013, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5012, $P5013
  vivi_7041955:
    unless $P5012 goto if699_else1946 
.annotate 'line', 458
    nqp_get_sc_object $P5014, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
.annotate 'line', 459
    nqp_get_sc_object $P5015, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 12
    nqp_get_sc_object $P5016, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 52
    $P5017 = $P5016."new"("ws" :named("value"))
    $P5018 = $P5015."new"($P5017)
    $P5019 = $P5014."new"($P5018, "ws" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    set $P5020, $P5019
    goto if699_end1947
  if699_else1946:
    box $P5021, 0
    set $P5020, $P5021
  if699_end1947:
    set $P101, $P5020
.annotate 'line', 461
    $P5022 = _lex_param_1."!make"($P101)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<[ ]>" :subid("cuid_128_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 464
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_85 
.annotate 'line', 465
    unless_null _lex_param_1, fallback1958
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5001
  fallback1958:
    set fb_tmp_85, _lex_param_1
    repr_defined $I5001, fb_tmp_85
    unless $I5001 goto if705_else1956 
    set $P5002, fb_tmp_85["nibbler"]
    set $P5004, $P5002
    goto if705_end1957
  if705_else1956:
    null $P5003
    set $P5004, $P5003
  if705_end1957:
    unless_null $P5004, vivi_7061959
    nqp_get_sc_object $P5005, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5004, $P5005
  vivi_7061959:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<( )>" :subid("cuid_129_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 468
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$subpast", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_86 
    .local pmc fb_tmp_87 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P102, $P5002
.annotate 'line', 469
    nqp_get_sc_object $P5003, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 12
    nqp_decontainerize $P5004, _lex_param_0
    unless_null _lex_param_1, fallback1962
    nqp_get_sc_object $P5005, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5005
  fallback1962:
    set fb_tmp_86, _lex_param_1
    repr_defined $I5001, fb_tmp_86
    unless $I5001 goto if707_else1960 
    set $P5006, fb_tmp_86["nibbler"]
    set $P5008, $P5006
    goto if707_end1961
  if707_else1960:
    null $P5007
    set $P5008, $P5007
  if707_end1961:
    unless_null $P5008, vivi_7081963
    nqp_get_sc_object $P5009, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5008, $P5009
  vivi_7081963:
    $P5010 = $P5008."ast"()
    $P5011 = $P5004."qbuildsub"($P5010, 1 :named("anon"), 1 :named("addself"))
    $P5012 = $P5003."new"($P5011)
    set $P101, $P5012
.annotate 'line', 470
    nqp_get_sc_object $P5013, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    unless_null _lex_param_1, fallback1966
    nqp_get_sc_object $P5014, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5014
  fallback1966:
    set fb_tmp_87, _lex_param_1
    repr_defined $I5002, fb_tmp_87
    unless $I5002 goto if709_else1964 
    set $P5015, fb_tmp_87["nibbler"]
    set $P5017, $P5015
    goto if709_end1965
  if709_else1964:
    null $P5016
    set $P5017, $P5016
  if709_end1965:
    unless_null $P5017, vivi_7101967
    nqp_get_sc_object $P5018, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5017, $P5018
  vivi_7101967:
    $P5019 = $P5017."ast"()
    $P5020 = $P5013."new"($P101, $P5019, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"))
    set $P102, $P5020
.annotate 'line', 472
    $P5021 = _lex_param_1."!make"($P102)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<'>" :subid("cuid_130_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 475
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$quote", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_88 
    .local pmc fb_tmp_89 
    .local pmc fb_tmp_90 
    .local pmc pkg_viv_tmp_7 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P102, $P5002
.annotate 'line', 476
    unless_null _lex_param_1, fallback1970
    nqp_get_sc_object $P5003, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5003
  fallback1970:
    set fb_tmp_88, _lex_param_1
    repr_defined $I5001, fb_tmp_88
    unless $I5001 goto if711_else1968 
    set $P5004, fb_tmp_88["quote_EXPR"]
    set $P5006, $P5004
    goto if711_end1969
  if711_else1968:
    null $P5005
    set $P5006, $P5005
  if711_end1969:
    unless_null $P5006, vivi_7121971
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_7121971:
    $P5008 = $P5006."ast"()
    set $P101, $P5008
.annotate 'line', 477
    nqp_get_sc_object $P5009, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 52
    $P5010 = $P5009."ACCEPTS"($P101)
    unless $P5010 goto if713_end1973 
    $P5011 = $P101."value"()
    set $P101, $P5011
  if713_end1973:
.annotate 'line', 478
    nqp_get_sc_object $P5012, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5013 = $P5012."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P102, $P5013
    find_dynamic_lex $P5014, "%*RX"
    unless_null $P5014, fallback1978
    nqp_get_sc_object $P5016, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    get_who $P5015, $P5016
    set pkg_viv_tmp_7, $P5015
    set fb_tmp_90, pkg_viv_tmp_7
    repr_defined $I5003, fb_tmp_90
    unless $I5003 goto if716_else1979 
    set $P5017, fb_tmp_90["%RX"]
    set $P5019, $P5017
    goto if716_end1980
  if716_else1979:
    null $P5018
    set $P5019, $P5018
  if716_end1980:
    unless_null $P5019, vivi_7171981
    new $P5020, 'Hash'
    set pkg_viv_tmp_7["%RX"], $P5020
    set $P5019, $P5020
  vivi_7171981:
    unless_null $P5019, vivi_7181982
    die "Contextual %*RX not found"
    box $P5021, "Contextual %*RX not found"
    set $P5019, $P5021
  vivi_7181982:
    set $P5014, $P5019
  fallback1978:
    set fb_tmp_89, $P5014
    repr_defined $I5002, fb_tmp_89
    unless $I5002 goto if715_else1976 
    set $P5022, fb_tmp_89["i"]
    set $P5024, $P5022
    goto if715_end1977
  if715_else1976:
    null $P5023
    set $P5024, $P5023
  if715_end1977:
    unless_null $P5024, vivi_7191983
    nqp_get_sc_object $P5025, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5024, $P5025
  vivi_7191983:
    unless $P5024 goto if714_end1975 
.annotate 'line', 479
    $P5026 = $P102."subtype"("ignorecase")
  if714_end1975:
.annotate 'line', 480
    $P5027 = _lex_param_1."!make"($P102)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<\">" :subid("cuid_131_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 483
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$quote", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_91 
    .local pmc fb_tmp_92 
    .local pmc fb_tmp_93 
    .local pmc pkg_viv_tmp_8 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P102, $P5002
.annotate 'line', 484
    unless_null _lex_param_1, fallback1986
    nqp_get_sc_object $P5003, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5003
  fallback1986:
    set fb_tmp_91, _lex_param_1
    repr_defined $I5001, fb_tmp_91
    unless $I5001 goto if720_else1984 
    set $P5004, fb_tmp_91["quote_EXPR"]
    set $P5006, $P5004
    goto if720_end1985
  if720_else1984:
    null $P5005
    set $P5006, $P5005
  if720_end1985:
    unless_null $P5006, vivi_7211987
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_7211987:
    $P5008 = $P5006."ast"()
    set $P101, $P5008
.annotate 'line', 485
    nqp_get_sc_object $P5009, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 52
    $P5010 = $P5009."ACCEPTS"($P101)
    unless $P5010 goto if722_end1989 
    $P5011 = $P101."value"()
    set $P101, $P5011
  if722_end1989:
.annotate 'line', 486
    nqp_get_sc_object $P5012, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5013 = $P5012."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P102, $P5013
    find_dynamic_lex $P5014, "%*RX"
    unless_null $P5014, fallback1994
    nqp_get_sc_object $P5016, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    get_who $P5015, $P5016
    set pkg_viv_tmp_8, $P5015
    set fb_tmp_93, pkg_viv_tmp_8
    repr_defined $I5003, fb_tmp_93
    unless $I5003 goto if725_else1995 
    set $P5017, fb_tmp_93["%RX"]
    set $P5019, $P5017
    goto if725_end1996
  if725_else1995:
    null $P5018
    set $P5019, $P5018
  if725_end1996:
    unless_null $P5019, vivi_7261997
    new $P5020, 'Hash'
    set pkg_viv_tmp_8["%RX"], $P5020
    set $P5019, $P5020
  vivi_7261997:
    unless_null $P5019, vivi_7271998
    die "Contextual %*RX not found"
    box $P5021, "Contextual %*RX not found"
    set $P5019, $P5021
  vivi_7271998:
    set $P5014, $P5019
  fallback1994:
    set fb_tmp_92, $P5014
    repr_defined $I5002, fb_tmp_92
    unless $I5002 goto if724_else1992 
    set $P5022, fb_tmp_92["i"]
    set $P5024, $P5022
    goto if724_end1993
  if724_else1992:
    null $P5023
    set $P5024, $P5023
  if724_end1993:
    unless_null $P5024, vivi_7281999
    nqp_get_sc_object $P5025, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5024, $P5025
  vivi_7281999:
    unless $P5024 goto if723_end1991 
.annotate 'line', 487
    $P5026 = $P102."subtype"("ignorecase")
  if723_end1991:
.annotate 'line', 488
    $P5027 = _lex_param_1."!make"($P102)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<.>" :subid("cuid_132_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 491
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 492
    nqp_get_sc_object $P5001, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5002 = $P5001."new"("cclass" :named("rxtype"), "." :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^>" :subid("cuid_133_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 495
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 496
    nqp_get_sc_object $P5001, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5002 = $P5001."new"("anchor" :named("rxtype"), "bos" :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^^>" :subid("cuid_134_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 499
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 500
    nqp_get_sc_object $P5001, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5002 = $P5001."new"("anchor" :named("rxtype"), "bol" :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$>" :subid("cuid_135_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 503
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 504
    nqp_get_sc_object $P5001, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5002 = $P5001."new"("anchor" :named("rxtype"), "eos" :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$$>" :subid("cuid_136_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 507
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 508
    nqp_get_sc_object $P5001, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5002 = $P5001."new"("anchor" :named("rxtype"), "eol" :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<lwb>" :subid("cuid_137_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 511
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 512
    nqp_get_sc_object $P5001, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5002 = $P5001."new"("anchor" :named("rxtype"), "lwb" :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<rwb>" :subid("cuid_138_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 515
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 516
    nqp_get_sc_object $P5001, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5002 = $P5001."new"("anchor" :named("rxtype"), "rwb" :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<from>" :subid("cuid_139_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 519
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 520
    nqp_get_sc_object $P5001, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
.annotate 'line', 522
    nqp_get_sc_object $P5002, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 12
.annotate 'line', 523
    nqp_get_sc_object $P5003, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 52
    $P5004 = $P5003."new"("!LITERAL" :named("value"))
.annotate 'line', 524
    nqp_get_sc_object $P5005, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 52
    $P5006 = $P5005."new"("" :named("value"))
    $P5007 = $P5002."new"($P5004, $P5006)
    $P5008 = $P5001."new"($P5007, "subrule" :named("rxtype"), "capture" :named("subtype"), "r" :named("backtrack"), "$!from" :named("name"), _lex_param_1 :named("node"))
    $P5009 = _lex_param_1."!make"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<to>" :subid("cuid_140_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 527
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 528
    nqp_get_sc_object $P5001, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
.annotate 'line', 530
    nqp_get_sc_object $P5002, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 12
.annotate 'line', 531
    nqp_get_sc_object $P5003, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 52
    $P5004 = $P5003."new"("!LITERAL" :named("value"))
.annotate 'line', 532
    nqp_get_sc_object $P5005, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 52
    $P5006 = $P5005."new"("" :named("value"))
    $P5007 = $P5002."new"($P5004, $P5006)
    $P5008 = $P5001."new"($P5007, "subrule" :named("rxtype"), "capture" :named("subtype"), "r" :named("backtrack"), "$!to" :named("name"), _lex_param_1 :named("node"))
    $P5009 = _lex_param_1."!make"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<bs>" :subid("cuid_141_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 535
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_94 
.annotate 'line', 536
    unless_null _lex_param_1, fallback2002
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5001
  fallback2002:
    set fb_tmp_94, _lex_param_1
    repr_defined $I5001, fb_tmp_94
    unless $I5001 goto if729_else2000 
    set $P5002, fb_tmp_94["backslash"]
    set $P5004, $P5002
    goto if729_end2001
  if729_else2000:
    null $P5003
    set $P5004, $P5003
  if729_end2001:
    unless_null $P5004, vivi_7302003
    nqp_get_sc_object $P5005, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5004, $P5005
  vivi_7302003:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<assert>" :subid("cuid_142_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 539
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_95 
.annotate 'line', 540
    unless_null _lex_param_1, fallback2006
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5001
  fallback2006:
    set fb_tmp_95, _lex_param_1
    repr_defined $I5001, fb_tmp_95
    unless $I5001 goto if731_else2004 
    set $P5002, fb_tmp_95["assertion"]
    set $P5004, $P5002
    goto if731_end2005
  if731_else2004:
    null $P5003
    set $P5004, $P5003
  if731_end2005:
    unless_null $P5004, vivi_7322007
    nqp_get_sc_object $P5005, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5004, $P5005
  vivi_7322007:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<var>" :subid("cuid_143_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 543
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "$name", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_96 
    .local pmc fb_tmp_97 
    .local pmc fb_tmp_98 
    .local pmc fb_tmp_99 
    .local pmc fb_tmp_100 
    .local pmc fb_tmp_101 
    .local pmc fb_tmp_102 
    .local pmc fb_tmp_103 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback2012
    nqp_get_sc_object $P5003, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5003
  fallback2012:
    set fb_tmp_96, _lex_param_1
    repr_defined $I5001, fb_tmp_96
    unless $I5001 goto if734_else2010 
    set $P5004, fb_tmp_96["pos"]
    set $P5006, $P5004
    goto if734_end2011
  if734_else2010:
    null $P5005
    set $P5006, $P5005
  if734_end2011:
    unless_null $P5006, vivi_7352013
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_7352013:
    unless $P5006 goto if733_else2008 
    unless_null _lex_param_1, fallback2016
    nqp_get_sc_object $P5008, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5008
  fallback2016:
    set fb_tmp_97, _lex_param_1
    repr_defined $I5002, fb_tmp_97
    unless $I5002 goto if736_else2014 
    set $P5009, fb_tmp_97["pos"]
    set $P5011, $P5009
    goto if736_end2015
  if736_else2014:
    null $P5010
    set $P5011, $P5010
  if736_end2015:
    unless_null $P5011, vivi_7372017
    nqp_get_sc_object $P5012, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5011, $P5012
  vivi_7372017:
    set $N5001, $P5011
    box $P5019, $N5001
    set $P5018, $P5019
    goto if733_end2009
  if733_else2008:
    unless_null _lex_param_1, fallback2020
    nqp_get_sc_object $P5013, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5013
  fallback2020:
    set fb_tmp_98, _lex_param_1
    repr_defined $I5003, fb_tmp_98
    unless $I5003 goto if738_else2018 
    set $P5014, fb_tmp_98["name"]
    set $P5016, $P5014
    goto if738_end2019
  if738_else2018:
    null $P5015
    set $P5016, $P5015
  if738_end2019:
    unless_null $P5016, vivi_7392021
    nqp_get_sc_object $P5017, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5016, $P5017
  vivi_7392021:
    set $S5001, $P5016
    box $P5020, $S5001
    set $P5018, $P5020
  if733_end2009:
    set $P102, $P5018
    unless_null _lex_param_1, fallback2026
    nqp_get_sc_object $P5021, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5021
  fallback2026:
    set fb_tmp_99, _lex_param_1
    repr_defined $I5004, fb_tmp_99
    unless $I5004 goto if741_else2024 
    set $P5022, fb_tmp_99["quantified_atom"]
    set $P5024, $P5022
    goto if741_end2025
  if741_else2024:
    null $P5023
    set $P5024, $P5023
  if741_end2025:
    unless_null $P5024, vivi_7422027
    nqp_get_sc_object $P5025, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5024, $P5025
  vivi_7422027:
    unless $P5024 goto if740_else2022 
.annotate 'line', 546
.annotate 'line', 547
    unless_null _lex_param_1, fallback2032
    nqp_get_sc_object $P5026, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5026
  fallback2032:
    set fb_tmp_101, _lex_param_1
    repr_defined $I5006, fb_tmp_101
    unless $I5006 goto if744_else2030 
    set $P5027, fb_tmp_101["quantified_atom"]
    set $P5029, $P5027
    goto if744_end2031
  if744_else2030:
    null $P5028
    set $P5029, $P5028
  if744_end2031:
    unless_null $P5029, vivi_7452033
    nqp_get_sc_object $P5030, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5029, $P5030
  vivi_7452033:
    set fb_tmp_100, $P5029
    repr_defined $I5005, fb_tmp_100
    unless $I5005 goto if743_else2028 
    set $P5031, fb_tmp_100[0]
    set $P5033, $P5031
    goto if743_end2029
  if743_else2028:
    null $P5032
    set $P5033, $P5032
  if743_end2029:
    unless_null $P5033, vivi_7462034
    nqp_get_sc_object $P5034, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5033, $P5034
  vivi_7462034:
    $P5035 = $P5033."ast"()
    set $P101, $P5035
.annotate 'line', 548
    $P5036 = $P101."rxtype"()
    set $S5002, $P5036
    iseq $I5007, $S5002, "quant"
    set $I5010, $I5007
    unless $I5007 goto if748_end2038 
    set fb_tmp_102, $P101
    repr_defined $I5009, fb_tmp_102
    unless $I5009 goto if749_else2039 
    set $P5037, fb_tmp_102[0]
    set $P5039, $P5037
    goto if749_end2040
  if749_else2039:
    null $P5038
    set $P5039, $P5038
  if749_end2040:
    unless_null $P5039, vivi_7502041
    nqp_get_sc_object $P5040, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5039, $P5040
  vivi_7502041:
    $P5041 = $P5039."rxtype"()
    set $S5003, $P5041
    iseq $I5008, $S5003, "subrule"
    set $I5010, $I5008
  if748_end2038:
    unless $I5010 goto if747_else2035 
.annotate 'line', 549
    nqp_decontainerize $P5042, _lex_param_0
    set fb_tmp_103, $P101
    repr_defined $I5011, fb_tmp_103
    unless $I5011 goto if751_else2042 
    set $P5043, fb_tmp_103[0]
    set $P5045, $P5043
    goto if751_end2043
  if751_else2042:
    null $P5044
    set $P5045, $P5044
  if751_end2043:
    unless_null $P5045, vivi_7522044
    nqp_get_sc_object $P5046, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5045, $P5046
  vivi_7522044:
    $P5047 = $P5042."subrule_alias"($P5045, $P102)
    set $P5054, $P5047
    goto if747_end2036
  if747_else2035:
.annotate 'line', 551
    $P5048 = $P101."rxtype"()
    set $S5004, $P5048
    iseq $I5012, $S5004, "subrule"
    unless $I5012 goto if753_else2045 
.annotate 'line', 552
    nqp_decontainerize $P5049, _lex_param_0
    $P5050 = $P5049."subrule_alias"($P101, $P102)
    set $P5053, $P5050
    goto if753_end2046
  if753_else2045:
.annotate 'line', 554
.annotate 'line', 555
    nqp_get_sc_object $P5051, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5052 = $P5051."new"($P101, $P102 :named("name"), "subcapture" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5052
    set $P5053, $P101
  if753_end2046:
    set $P5054, $P5053
  if747_end2036:
    goto if740_end2023
  if740_else2022:
.annotate 'line', 559
.annotate 'line', 560
    nqp_get_sc_object $P5055, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
.annotate 'line', 561
    nqp_get_sc_object $P5056, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 12
.annotate 'line', 562
    nqp_get_sc_object $P5057, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 52
    $P5058 = $P5057."new"("!BACKREF" :named("value"))
.annotate 'line', 563
    nqp_get_sc_object $P5059, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 52
    $P5060 = $P5059."new"($P102 :named("value"))
    $P5061 = $P5056."new"($P5058, $P5060)
    $P5062 = $P5055."new"($P5061, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    set $P101, $P5062
  if740_end2023:
.annotate 'line', 565
    $P5063 = _lex_param_1."!make"($P101)
    .return ($P5063) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<~>" :subid("cuid_144_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 568
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@dba", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_104 
    .local pmc pkg_viv_tmp_10 
    .local pmc fb_tmp_105 
    .local pmc fb_tmp_106 
    .local pmc pkg_viv_tmp_9 
    .local pmc fb_tmp_107 
    .local pmc fb_tmp_108 
    .local pmc fb_tmp_109 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_dynamic_lex $P5002, "%*RX"
    unless_null $P5002, fallback2049
    nqp_get_sc_object $P5004, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    get_who $P5003, $P5004
    set pkg_viv_tmp_10, $P5003
    set fb_tmp_104, pkg_viv_tmp_10
    repr_defined $I5002, fb_tmp_104
    unless $I5002 goto if755_else2050 
    set $P5005, fb_tmp_104["%RX"]
    set $P5007, $P5005
    goto if755_end2051
  if755_else2050:
    null $P5006
    set $P5007, $P5006
  if755_end2051:
    unless_null $P5007, vivi_7562052
    new $P5008, 'Hash'
    set pkg_viv_tmp_10["%RX"], $P5008
    set $P5007, $P5008
  vivi_7562052:
    unless_null $P5007, vivi_7572053
    die "Contextual %*RX not found"
    box $P5009, "Contextual %*RX not found"
    set $P5007, $P5009
  vivi_7572053:
    set $P5002, $P5007
  fallback2049:
    exists $I5001, $P5002["dba"]
    unless $I5001 goto if754_end2048 
    new $P5010, 'ResizablePMCArray'
.annotate 'line', 569
    nqp_get_sc_object $P5011, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 52
    find_dynamic_lex $P5012, "%*RX"
    unless_null $P5012, fallback2056
    nqp_get_sc_object $P5014, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    get_who $P5013, $P5014
    set pkg_viv_tmp_9, $P5013
    set fb_tmp_106, pkg_viv_tmp_9
    repr_defined $I5004, fb_tmp_106
    unless $I5004 goto if759_else2057 
    set $P5015, fb_tmp_106["%RX"]
    set $P5017, $P5015
    goto if759_end2058
  if759_else2057:
    null $P5016
    set $P5017, $P5016
  if759_end2058:
    unless_null $P5017, vivi_7602059
    new $P5018, 'Hash'
    set pkg_viv_tmp_9["%RX"], $P5018
    set $P5017, $P5018
  vivi_7602059:
    unless_null $P5017, vivi_7612060
    die "Contextual %*RX not found"
    box $P5019, "Contextual %*RX not found"
    set $P5017, $P5019
  vivi_7612060:
    set $P5012, $P5017
  fallback2056:
    set fb_tmp_105, $P5012
    repr_defined $I5003, fb_tmp_105
    unless $I5003 goto if758_else2054 
    set $P5020, fb_tmp_105["dba"]
    set $P5022, $P5020
    goto if758_end2055
  if758_else2054:
    null $P5021
    set $P5022, $P5021
  if758_end2055:
    unless_null $P5022, vivi_7622061
    nqp_get_sc_object $P5023, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5022, $P5023
  vivi_7622061:
    $P5024 = $P5011."new"($P5022 :named("value"))
    push $P5010, $P5024
    set $P101, $P5010
  if754_end2048:
.annotate 'line', 570
    nqp_get_sc_object $P5025, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
.annotate 'line', 571
    unless_null _lex_param_1, fallback2064
    nqp_get_sc_object $P5026, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5026
  fallback2064:
    set fb_tmp_107, _lex_param_1
    repr_defined $I5005, fb_tmp_107
    unless $I5005 goto if763_else2062 
    set $P5027, fb_tmp_107["EXPR"]
    set $P5029, $P5027
    goto if763_end2063
  if763_else2062:
    null $P5028
    set $P5029, $P5028
  if763_end2063:
    unless_null $P5029, vivi_7642065
    nqp_get_sc_object $P5030, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5029, $P5030
  vivi_7642065:
    $P5031 = $P5029."ast"()
.annotate 'line', 572
    nqp_get_sc_object $P5032, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
.annotate 'line', 573
    unless_null _lex_param_1, fallback2068
    nqp_get_sc_object $P5033, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5033
  fallback2068:
    set fb_tmp_108, _lex_param_1
    repr_defined $I5006, fb_tmp_108
    unless $I5006 goto if765_else2066 
    set $P5034, fb_tmp_108["GOAL"]
    set $P5036, $P5034
    goto if765_end2067
  if765_else2066:
    null $P5035
    set $P5036, $P5035
  if765_end2067:
    unless_null $P5036, vivi_7662069
    nqp_get_sc_object $P5037, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5036, $P5037
  vivi_7662069:
    $P5038 = $P5036."ast"()
.annotate 'line', 574
    nqp_get_sc_object $P5039, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
.annotate 'line', 575
    nqp_get_sc_object $P5040, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 12
.annotate 'line', 576
    nqp_get_sc_object $P5041, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 52
    $P5042 = $P5041."new"("FAILGOAL" :named("value"))
.annotate 'line', 577
    nqp_get_sc_object $P5043, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 52
    unless_null _lex_param_1, fallback2072
    nqp_get_sc_object $P5044, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5044
  fallback2072:
    set fb_tmp_109, _lex_param_1
    repr_defined $I5007, fb_tmp_109
    unless $I5007 goto if767_else2070 
    set $P5045, fb_tmp_109["GOAL"]
    set $P5047, $P5045
    goto if767_end2071
  if767_else2070:
    null $P5046
    set $P5047, $P5046
  if767_end2071:
    unless_null $P5047, vivi_7682073
    nqp_get_sc_object $P5048, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5047, $P5048
  vivi_7682073:
    set $S5001, $P5047
    $P5049 = $P5043."new"($S5001 :named("value"))
    $P5050 = $P5040."new"($P5042, $P5049, $P101 :flat)
    $P5051 = $P5039."new"($P5050, "subrule" :named("rxtype"), "method" :named("subtype"))
    $P5052 = $P5032."new"($P5038, $P5051, "altseq" :named("rxtype"))
    $P5053 = $P5025."new"($P5031, $P5052, "concat" :named("rxtype"))
    $P5054 = _lex_param_1."!make"($P5053)
    .return ($P5054) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<mod>" :subid("cuid_145_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 585
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_110 
    unless_null _lex_param_1, fallback2076
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5001
  fallback2076:
    set fb_tmp_110, _lex_param_1
    repr_defined $I5001, fb_tmp_110
    unless $I5001 goto if769_else2074 
    set $P5002, fb_tmp_110["mod_internal"]
    set $P5004, $P5002
    goto if769_end2075
  if769_else2074:
    null $P5003
    set $P5004, $P5003
  if769_end2075:
    unless_null $P5004, vivi_7702077
    nqp_get_sc_object $P5005, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5004, $P5005
  vivi_7702077:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<s>" :subid("cuid_146_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 587
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_111 
    .local pmc fb_tmp_112 
    .local pmc fb_tmp_113 
.annotate 'line', 588
    nqp_get_sc_object $P5001, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    unless_null _lex_param_1, fallback2082
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5002
  fallback2082:
    set fb_tmp_111, _lex_param_1
    repr_defined $I5002, fb_tmp_111
    unless $I5002 goto if772_else2080 
    set $P5003, fb_tmp_111["sym"]
    set $P5005, $P5003
    goto if772_end2081
  if772_else2080:
    null $P5004
    set $P5005, $P5004
  if772_end2081:
    unless_null $P5005, vivi_7732083
    nqp_get_sc_object $P5006, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5005, $P5006
  vivi_7732083:
    set $S5001, $P5005
    iseq $I5001, $S5001, "n"
    unless $I5001 goto if771_else2078 
    set $S5003, "nl"
    goto if771_end2079
  if771_else2078:
    unless_null _lex_param_1, fallback2086
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5007
  fallback2086:
    set fb_tmp_112, _lex_param_1
    repr_defined $I5003, fb_tmp_112
    unless $I5003 goto if774_else2084 
    set $P5008, fb_tmp_112["sym"]
    set $P5010, $P5008
    goto if774_end2085
  if774_else2084:
    null $P5009
    set $P5010, $P5009
  if774_end2085:
    unless_null $P5010, vivi_7752087
    nqp_get_sc_object $P5011, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5010, $P5011
  vivi_7752087:
    set $S5002, $P5010
    set $S5003, $S5002
  if771_end2079:
    unless_null _lex_param_1, fallback2090
    nqp_get_sc_object $P5012, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5012
  fallback2090:
    set fb_tmp_113, _lex_param_1
    repr_defined $I5005, fb_tmp_113
    unless $I5005 goto if776_else2088 
    set $P5013, fb_tmp_113["sym"]
    set $P5015, $P5013
    goto if776_end2089
  if776_else2088:
    null $P5014
    set $P5015, $P5014
  if776_end2089:
    unless_null $P5015, vivi_7772091
    nqp_get_sc_object $P5016, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5015, $P5016
  vivi_7772091:
    set $S5004, $P5015
    isle $I5004, $S5004, "Z"
    $P5017 = $P5001."new"(".CCLASS_WHITESPACE", "cclass" :named("rxtype"), $S5003 :named("subtype"), $I5004 :named("negate"), _lex_param_1 :named("node"))
    $P5018 = _lex_param_1."!make"($P5017)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<b>" :subid("cuid_147_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 593
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_114 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 594
    nqp_get_sc_object $P5002, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    unless_null _lex_param_1, fallback2094
    nqp_get_sc_object $P5003, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5003
  fallback2094:
    set fb_tmp_114, _lex_param_1
    repr_defined $I5002, fb_tmp_114
    unless $I5002 goto if778_else2092 
    set $P5004, fb_tmp_114["sym"]
    set $P5006, $P5004
    goto if778_end2093
  if778_else2092:
    null $P5005
    set $P5006, $P5005
  if778_end2093:
    unless_null $P5006, vivi_7792095
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_7792095:
    set $S5001, $P5006
    iseq $I5001, $S5001, "B"
    $P5008 = $P5002."new"("\b", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 596
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<e>" :subid("cuid_148_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 599
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_115 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 600
    nqp_get_sc_object $P5002, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    unless_null _lex_param_1, fallback2098
    nqp_get_sc_object $P5003, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5003
  fallback2098:
    set fb_tmp_115, _lex_param_1
    repr_defined $I5002, fb_tmp_115
    unless $I5002 goto if780_else2096 
    set $P5004, fb_tmp_115["sym"]
    set $P5006, $P5004
    goto if780_end2097
  if780_else2096:
    null $P5005
    set $P5006, $P5005
  if780_end2097:
    unless_null $P5006, vivi_7812099
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_7812099:
    set $S5001, $P5006
    iseq $I5001, $S5001, "E"
    $P5008 = $P5002."new"("\e", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 602
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<f>" :subid("cuid_149_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 605
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_116 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 606
    nqp_get_sc_object $P5002, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    unless_null _lex_param_1, fallback2102
    nqp_get_sc_object $P5003, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5003
  fallback2102:
    set fb_tmp_116, _lex_param_1
    repr_defined $I5002, fb_tmp_116
    unless $I5002 goto if782_else2100 
    set $P5004, fb_tmp_116["sym"]
    set $P5006, $P5004
    goto if782_end2101
  if782_else2100:
    null $P5005
    set $P5006, $P5005
  if782_end2101:
    unless_null $P5006, vivi_7832103
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_7832103:
    set $S5001, $P5006
    iseq $I5001, $S5001, "F"
    $P5008 = $P5002."new"("\f", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 608
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<h>" :subid("cuid_150_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 611
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_117 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 612
    nqp_get_sc_object $P5002, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    unless_null _lex_param_1, fallback2106
    nqp_get_sc_object $P5003, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5003
  fallback2106:
    set fb_tmp_117, _lex_param_1
    repr_defined $I5002, fb_tmp_117
    unless $I5002 goto if784_else2104 
    set $P5004, fb_tmp_117["sym"]
    set $P5006, $P5004
    goto if784_end2105
  if784_else2104:
    null $P5005
    set $P5006, $P5005
  if784_end2105:
    unless_null $P5006, vivi_7852107
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_7852107:
    set $S5001, $P5006
    iseq $I5001, $S5001, "H"
    $P5008 = $P5002."new"(utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 614
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<r>" :subid("cuid_151_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 617
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_118 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 618
    nqp_get_sc_object $P5002, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    unless_null _lex_param_1, fallback2110
    nqp_get_sc_object $P5003, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5003
  fallback2110:
    set fb_tmp_118, _lex_param_1
    repr_defined $I5002, fb_tmp_118
    unless $I5002 goto if786_else2108 
    set $P5004, fb_tmp_118["sym"]
    set $P5006, $P5004
    goto if786_end2109
  if786_else2108:
    null $P5005
    set $P5006, $P5005
  if786_end2109:
    unless_null $P5006, vivi_7872111
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_7872111:
    set $S5001, $P5006
    iseq $I5001, $S5001, "R"
    $P5008 = $P5002."new"("\r", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 620
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<t>" :subid("cuid_152_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 623
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_119 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 624
    nqp_get_sc_object $P5002, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    unless_null _lex_param_1, fallback2114
    nqp_get_sc_object $P5003, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5003
  fallback2114:
    set fb_tmp_119, _lex_param_1
    repr_defined $I5002, fb_tmp_119
    unless $I5002 goto if788_else2112 
    set $P5004, fb_tmp_119["sym"]
    set $P5006, $P5004
    goto if788_end2113
  if788_else2112:
    null $P5005
    set $P5006, $P5005
  if788_end2113:
    unless_null $P5006, vivi_7892115
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_7892115:
    set $S5001, $P5006
    iseq $I5001, $S5001, "T"
    $P5008 = $P5002."new"("\t", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 626
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<v>" :subid("cuid_153_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 629
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_120 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 630
    nqp_get_sc_object $P5002, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    unless_null _lex_param_1, fallback2118
    nqp_get_sc_object $P5003, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5003
  fallback2118:
    set fb_tmp_120, _lex_param_1
    repr_defined $I5002, fb_tmp_120
    unless $I5002 goto if790_else2116 
    set $P5004, fb_tmp_120["sym"]
    set $P5006, $P5004
    goto if790_end2117
  if790_else2116:
    null $P5005
    set $P5006, $P5005
  if790_end2117:
    unless_null $P5006, vivi_7912119
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_7912119:
    set $S5001, $P5006
    iseq $I5001, $S5001, "V"
    $P5008 = $P5002."new"(utf8:"\n\x{b}\f\r\x{85}\u2028\u2029", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 633
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<o>" :subid("cuid_154_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 636
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$octlit", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_121 
    .local pmc fb_tmp_122 
    .local pmc fb_tmp_123 
    .local pmc fb_tmp_124 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 638
    nqp_get_sc_object $P5002, "F31909CE26533F17A86F2092D09E004F0E94FA0C-1361734116.632", 68
    unless_null _lex_param_1, fallback2124
    nqp_get_sc_object $P5003, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5003
  fallback2124:
    set fb_tmp_121, _lex_param_1
    repr_defined $I5001, fb_tmp_121
    unless $I5001 goto if793_else2122 
    set $P5004, fb_tmp_121["octint"]
    set $P5006, $P5004
    goto if793_end2123
  if793_else2122:
    null $P5005
    set $P5006, $P5005
  if793_end2123:
    unless_null $P5006, vivi_7942125
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_7942125:
    set $P5017, $P5006
    if $P5006 goto unless792_end2121 
    unless_null _lex_param_1, fallback2130
    nqp_get_sc_object $P5008, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5008
  fallback2130:
    set fb_tmp_123, _lex_param_1
    repr_defined $I5003, fb_tmp_123
    unless $I5003 goto if796_else2128 
    set $P5009, fb_tmp_123["octints"]
    set $P5011, $P5009
    goto if796_end2129
  if796_else2128:
    null $P5010
    set $P5011, $P5010
  if796_end2129:
    unless_null $P5011, vivi_7972131
    nqp_get_sc_object $P5012, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5011, $P5012
  vivi_7972131:
    set fb_tmp_122, $P5011
    repr_defined $I5002, fb_tmp_122
    unless $I5002 goto if795_else2126 
    set $P5013, fb_tmp_122["octint"]
    set $P5015, $P5013
    goto if795_end2127
  if795_else2126:
    null $P5014
    set $P5015, $P5014
  if795_end2127:
    unless_null $P5015, vivi_7982132
    nqp_get_sc_object $P5016, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5015, $P5016
  vivi_7982132:
    set $P5017, $P5015
  unless792_end2121:
    $P5018 = $P5002."ints_to_string"($P5017)
    set $P101, $P5018
.annotate 'line', 639
    unless_null _lex_param_1, fallback2137
    nqp_get_sc_object $P5019, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5019
  fallback2137:
    set fb_tmp_124, _lex_param_1
    repr_defined $I5005, fb_tmp_124
    unless $I5005 goto if800_else2135 
    set $P5020, fb_tmp_124["sym"]
    set $P5022, $P5020
    goto if800_end2136
  if800_else2135:
    null $P5021
    set $P5022, $P5021
  if800_end2136:
    unless_null $P5022, vivi_8012138
    nqp_get_sc_object $P5023, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5022, $P5023
  vivi_8012138:
    set $S5001, $P5022
    iseq $I5004, $S5001, "O"
    unless $I5004 goto if799_else2133 
.annotate 'line', 640
    nqp_get_sc_object $P5024, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5025 = $P5024."new"($P101, "enumcharlist" :named("rxtype"), 1 :named("negate"), _lex_param_1 :named("node"))
    set $P5028, $P5025
    goto if799_end2134
  if799_else2133:
.annotate 'line', 642
    nqp_get_sc_object $P5026, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5027 = $P5026."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P5028, $P5027
  if799_end2134:
    $P5029 = _lex_param_1."!make"($P5028)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<x>" :subid("cuid_155_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 645
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$hexlit", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_125 
    .local pmc fb_tmp_126 
    .local pmc fb_tmp_127 
    .local pmc fb_tmp_128 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 647
    nqp_get_sc_object $P5002, "F31909CE26533F17A86F2092D09E004F0E94FA0C-1361734116.632", 68
    unless_null _lex_param_1, fallback2143
    nqp_get_sc_object $P5003, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5003
  fallback2143:
    set fb_tmp_125, _lex_param_1
    repr_defined $I5001, fb_tmp_125
    unless $I5001 goto if803_else2141 
    set $P5004, fb_tmp_125["hexint"]
    set $P5006, $P5004
    goto if803_end2142
  if803_else2141:
    null $P5005
    set $P5006, $P5005
  if803_end2142:
    unless_null $P5006, vivi_8042144
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_8042144:
    set $P5017, $P5006
    if $P5006 goto unless802_end2140 
    unless_null _lex_param_1, fallback2149
    nqp_get_sc_object $P5008, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5008
  fallback2149:
    set fb_tmp_127, _lex_param_1
    repr_defined $I5003, fb_tmp_127
    unless $I5003 goto if806_else2147 
    set $P5009, fb_tmp_127["hexints"]
    set $P5011, $P5009
    goto if806_end2148
  if806_else2147:
    null $P5010
    set $P5011, $P5010
  if806_end2148:
    unless_null $P5011, vivi_8072150
    nqp_get_sc_object $P5012, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5011, $P5012
  vivi_8072150:
    set fb_tmp_126, $P5011
    repr_defined $I5002, fb_tmp_126
    unless $I5002 goto if805_else2145 
    set $P5013, fb_tmp_126["hexint"]
    set $P5015, $P5013
    goto if805_end2146
  if805_else2145:
    null $P5014
    set $P5015, $P5014
  if805_end2146:
    unless_null $P5015, vivi_8082151
    nqp_get_sc_object $P5016, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5015, $P5016
  vivi_8082151:
    set $P5017, $P5015
  unless802_end2140:
    $P5018 = $P5002."ints_to_string"($P5017)
    set $P101, $P5018
.annotate 'line', 648
    unless_null _lex_param_1, fallback2156
    nqp_get_sc_object $P5019, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5019
  fallback2156:
    set fb_tmp_128, _lex_param_1
    repr_defined $I5005, fb_tmp_128
    unless $I5005 goto if810_else2154 
    set $P5020, fb_tmp_128["sym"]
    set $P5022, $P5020
    goto if810_end2155
  if810_else2154:
    null $P5021
    set $P5022, $P5021
  if810_end2155:
    unless_null $P5022, vivi_8112157
    nqp_get_sc_object $P5023, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5022, $P5023
  vivi_8112157:
    set $S5001, $P5022
    iseq $I5004, $S5001, "X"
    unless $I5004 goto if809_else2152 
.annotate 'line', 649
    nqp_get_sc_object $P5024, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5025 = $P5024."new"($P101, "enumcharlist" :named("rxtype"), 1 :named("negate"), _lex_param_1 :named("node"))
    set $P5028, $P5025
    goto if809_end2153
  if809_else2152:
.annotate 'line', 651
    nqp_get_sc_object $P5026, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5027 = $P5026."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P5028, $P5027
  if809_end2153:
    $P5029 = _lex_param_1."!make"($P5028)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<c>" :subid("cuid_156_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 654
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_129 
.annotate 'line', 655
    nqp_get_sc_object $P5001, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    unless_null _lex_param_1, fallback2160
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5002
  fallback2160:
    set fb_tmp_129, _lex_param_1
    repr_defined $I5001, fb_tmp_129
    unless $I5001 goto if812_else2158 
    set $P5003, fb_tmp_129["charspec"]
    set $P5005, $P5003
    goto if812_end2159
  if812_else2158:
    null $P5004
    set $P5005, $P5004
  if812_end2159:
    unless_null $P5005, vivi_8132161
    nqp_get_sc_object $P5006, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5005, $P5006
  vivi_8132161:
    $P5007 = $P5005."ast"()
    $P5008 = $P5001."new"($P5007, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    $P5009 = _lex_param_1."!make"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<misc>" :subid("cuid_157_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 658
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 659
    nqp_get_sc_object $P5002, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    set $S5001, _lex_param_1
    $P5003 = $P5002."new"($S5001, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5003
.annotate 'line', 660
    $P5004 = _lex_param_1."!make"($P101)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_158_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 663
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_130 
    .local pmc fb_tmp_131 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
    unless_null _lex_param_1, fallback2166
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5002
  fallback2166:
    set fb_tmp_130, _lex_param_1
    repr_defined $I5001, fb_tmp_130
    unless $I5001 goto if815_else2164 
    set $P5003, fb_tmp_130["assertion"]
    set $P5005, $P5003
    goto if815_end2165
  if815_else2164:
    null $P5004
    set $P5005, $P5004
  if815_end2165:
    unless_null $P5005, vivi_8162167
    nqp_get_sc_object $P5006, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5005, $P5006
  vivi_8162167:
    unless $P5005 goto if814_else2162 
.annotate 'line', 665
.annotate 'line', 666
    unless_null _lex_param_1, fallback2170
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5007
  fallback2170:
    set fb_tmp_131, _lex_param_1
    repr_defined $I5002, fb_tmp_131
    unless $I5002 goto if817_else2168 
    set $P5008, fb_tmp_131["assertion"]
    set $P5010, $P5008
    goto if817_end2169
  if817_else2168:
    null $P5009
    set $P5010, $P5009
  if817_end2169:
    unless_null $P5010, vivi_8182171
    nqp_get_sc_object $P5011, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5010, $P5011
  vivi_8182171:
    $P5012 = $P5010."ast"()
    set $P101, $P5012
.annotate 'line', 667
    $P5013 = $P101."subtype"("zerowidth")
    goto if814_end2163
  if814_else2162:
.annotate 'line', 669
.annotate 'line', 670
    nqp_get_sc_object $P5014, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5015 = $P5014."new"("anchor" :named("rxtype"), "pass" :named("subtype"), _lex_param_1 :named("node"))
    set $P101, $P5015
  if814_end2163:
.annotate 'line', 672
    $P5016 = _lex_param_1."!make"($P101)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_159_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 675
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_132 
    .local pmc fb_tmp_133 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
    unless_null _lex_param_1, fallback2176
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5002
  fallback2176:
    set fb_tmp_132, _lex_param_1
    repr_defined $I5001, fb_tmp_132
    unless $I5001 goto if820_else2174 
    set $P5003, fb_tmp_132["assertion"]
    set $P5005, $P5003
    goto if820_end2175
  if820_else2174:
    null $P5004
    set $P5005, $P5004
  if820_end2175:
    unless_null $P5005, vivi_8212177
    nqp_get_sc_object $P5006, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5005, $P5006
  vivi_8212177:
    unless $P5005 goto if819_else2172 
.annotate 'line', 677
.annotate 'line', 678
    unless_null _lex_param_1, fallback2180
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5007
  fallback2180:
    set fb_tmp_133, _lex_param_1
    repr_defined $I5002, fb_tmp_133
    unless $I5002 goto if822_else2178 
    set $P5008, fb_tmp_133["assertion"]
    set $P5010, $P5008
    goto if822_end2179
  if822_else2178:
    null $P5009
    set $P5010, $P5009
  if822_end2179:
    unless_null $P5010, vivi_8232181
    nqp_get_sc_object $P5011, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5010, $P5011
  vivi_8232181:
    $P5012 = $P5010."ast"()
    set $P101, $P5012
.annotate 'line', 679
    $P5013 = $P101."negate"()
    isfalse $I5003, $P5013
    $P101."negate"($I5003)
.annotate 'line', 680
    $P5014 = $P101."subtype"("zerowidth")
    goto if819_end2173
  if819_else2172:
.annotate 'line', 682
.annotate 'line', 683
    nqp_get_sc_object $P5015, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5016 = $P5015."new"("anchor" :named("rxtype"), "fail" :named("subtype"), _lex_param_1 :named("node"))
    set $P101, $P5016
  if819_end2173:
.annotate 'line', 685
    $P5017 = _lex_param_1."!make"($P101)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<|>" :subid("cuid_160_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 688
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "$name", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_134 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback2184
    nqp_get_sc_object $P5003, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5003
  fallback2184:
    set fb_tmp_134, _lex_param_1
    repr_defined $I5001, fb_tmp_134
    unless $I5001 goto if824_else2182 
    set $P5004, fb_tmp_134["identifier"]
    set $P5006, $P5004
    goto if824_end2183
  if824_else2182:
    null $P5005
    set $P5006, $P5005
  if824_end2183:
    unless_null $P5006, vivi_8252185
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_8252185:
    set $S5001, $P5006
    box $P5008, $S5001
    set $P102, $P5008
    set $S5002, $P102
    iseq $I5002, $S5002, "c"
    unless $I5002 goto if826_else2186 
.annotate 'line', 691
    box $P5009, 0
    set $P101, $P5009
    goto if826_end2187
  if826_else2186:
    set $S5003, $P102
    iseq $I5003, $S5003, "w"
    box $P5017, $I5003
    set $P5016, $P5017
    unless $I5003 goto if827_end2189 
.annotate 'line', 696
.annotate 'line', 697
    nqp_get_sc_object $P5010, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
.annotate 'line', 699
    nqp_get_sc_object $P5011, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 12
    nqp_get_sc_object $P5012, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 52
    $P5013 = $P5012."new"("wb" :named("value"))
    $P5014 = $P5011."new"($P5013)
    $P5015 = $P5010."new"($P5014, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"), "" :named("name"))
    set $P101, $P5015
    set $P5016, $P101
  if827_end2189:
  if826_end2187:
.annotate 'line', 701
    $P5018 = _lex_param_1."!make"($P101)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<method>" :subid("cuid_161_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 704
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_135 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 705
    unless_null _lex_param_1, fallback2192
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5002
  fallback2192:
    set fb_tmp_135, _lex_param_1
    repr_defined $I5001, fb_tmp_135
    unless $I5001 goto if828_else2190 
    set $P5003, fb_tmp_135["assertion"]
    set $P5005, $P5003
    goto if828_end2191
  if828_else2190:
    null $P5004
    set $P5005, $P5004
  if828_end2191:
    unless_null $P5005, vivi_8292193
    nqp_get_sc_object $P5006, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5005, $P5006
  vivi_8292193:
    $P5007 = $P5005."ast"()
    set $P101, $P5007
.annotate 'line', 706
    $P101."subtype"("method")
.annotate 'line', 707
    $P101."name"("")
.annotate 'line', 708
    $P5008 = _lex_param_1."!make"($P101)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_162_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 711
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5101 = 'cuid_217_1361734134.987' 
    capture_lex $P5101 
    .const 'Sub' $P5101 = 'cuid_218_1361734134.987' 
    capture_lex $P5101 
    .lex "$name", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_136 
    .local pmc fb_tmp_137 
    .local pmc fb_tmp_138 
    .local pmc fb_tmp_139 
    .local pmc fb_tmp_146 
    .local pmc fb_tmp_147 
    .local pmc fb_tmp_148 
    .local pmc fb_tmp_150 
    .local pmc fb_tmp_151 
    .local pmc fb_tmp_152 
    .local pmc fb_tmp_153 
    .local pmc fb_tmp_154 
    .local pmc fb_tmp_155 
    .local pmc fb_tmp_156 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback2196
    nqp_get_sc_object $P5003, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5003
  fallback2196:
    set fb_tmp_136, _lex_param_1
    repr_defined $I5001, fb_tmp_136
    unless $I5001 goto if830_else2194 
    set $P5004, fb_tmp_136["longname"]
    set $P5006, $P5004
    goto if830_end2195
  if830_else2194:
    null $P5005
    set $P5006, $P5005
  if830_end2195:
    unless_null $P5006, vivi_8312197
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_8312197:
    set $S5001, $P5006
    box $P5008, $S5001
    set $P101, $P5008
    unless_null _lex_param_1, fallback2202
    nqp_get_sc_object $P5009, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5009
  fallback2202:
    set fb_tmp_137, _lex_param_1
    repr_defined $I5002, fb_tmp_137
    unless $I5002 goto if833_else2200 
    set $P5010, fb_tmp_137["assertion"]
    set $P5012, $P5010
    goto if833_end2201
  if833_else2200:
    null $P5011
    set $P5012, $P5011
  if833_end2201:
    unless_null $P5012, vivi_8342203
    nqp_get_sc_object $P5013, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5012, $P5013
  vivi_8342203:
    unless $P5012 goto if832_else2198 
.annotate 'line', 714
.annotate 'line', 715
    unless_null _lex_param_1, fallback2208
    nqp_get_sc_object $P5014, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5014
  fallback2208:
    set fb_tmp_139, _lex_param_1
    repr_defined $I5004, fb_tmp_139
    unless $I5004 goto if836_else2206 
    set $P5015, fb_tmp_139["assertion"]
    set $P5017, $P5015
    goto if836_end2207
  if836_else2206:
    null $P5016
    set $P5017, $P5016
  if836_end2207:
    unless_null $P5017, vivi_8372209
    nqp_get_sc_object $P5018, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5017, $P5018
  vivi_8372209:
    set fb_tmp_138, $P5017
    repr_defined $I5003, fb_tmp_138
    unless $I5003 goto if835_else2204 
    set $P5019, fb_tmp_138[0]
    set $P5021, $P5019
    goto if835_end2205
  if835_else2204:
    null $P5020
    set $P5021, $P5020
  if835_end2205:
    unless_null $P5021, vivi_8382210
    nqp_get_sc_object $P5022, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5021, $P5022
  vivi_8382210:
    $P5023 = $P5021."ast"()
    set $P102, $P5023
.annotate 'line', 716
    nqp_decontainerize $P5024, _lex_param_0
    $P5025 = $P5024."subrule_alias"($P102, $P101)
    goto if832_end2199
  if832_else2198:
    set $S5002, $P101
    iseq $I5005, $S5002, "sym"
    unless $I5005 goto if839_else2211 
    .const 'Sub' $P5026 = 'cuid_217_1361734134.987' 
    capture_lex $P5026
    $P5027 = $P5026()
    set $P5099, $P5027
    goto if839_end2212
  if839_else2211:
.annotate 'line', 727
.annotate 'line', 728
    nqp_get_sc_object $P5028, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
.annotate 'line', 730
    nqp_get_sc_object $P5029, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 12
    nqp_get_sc_object $P5030, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 52
    $P5031 = $P5030."new"($P101 :named("value"))
    $P5032 = $P5029."new"($P5031)
    $P5033 = $P5028."new"($P5032, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"), $P101 :named("name"))
    set $P102, $P5033
    unless_null _lex_param_1, fallback2243
    nqp_get_sc_object $P5034, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5034
  fallback2243:
    set fb_tmp_146, _lex_param_1
    repr_defined $I5006, fb_tmp_146
    unless $I5006 goto if857_else2241 
    set $P5035, fb_tmp_146["arglist"]
    set $P5037, $P5035
    goto if857_end2242
  if857_else2241:
    null $P5036
    set $P5037, $P5036
  if857_end2242:
    unless_null $P5037, vivi_8582244
    nqp_get_sc_object $P5038, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5037, $P5038
  vivi_8582244:
    unless $P5037 goto if856_else2239 
.annotate 'line', 731
.annotate 'line', 732
    unless_null _lex_param_1, fallback2249
    nqp_get_sc_object $P5042, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5042
  fallback2249:
    set fb_tmp_148, _lex_param_1
    repr_defined $I5008, fb_tmp_148
    unless $I5008 goto if860_else2247 
    set $P5043, fb_tmp_148["arglist"]
    set $P5045, $P5043
    goto if860_end2248
  if860_else2247:
    null $P5044
    set $P5045, $P5044
  if860_end2248:
    unless_null $P5045, vivi_8612250
    nqp_get_sc_object $P5046, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5045, $P5046
  vivi_8612250:
    set fb_tmp_147, $P5045
    repr_defined $I5007, fb_tmp_147
    unless $I5007 goto if859_else2245 
    set $P5047, fb_tmp_147[0]
    set $P5049, $P5047
    goto if859_end2246
  if859_else2245:
    null $P5048
    set $P5049, $P5048
  if859_end2246:
    unless_null $P5049, vivi_8622251
    nqp_get_sc_object $P5050, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5049, $P5050
  vivi_8622251:
    $P5051 = $P5049."ast"()
    $P5052 = $P5051."list"()
    set $P5039, $P5052
    iter $P5041, $P5052
  for_next2255:
    unless $P5041, for_done2257
    shift $P5054, $P5041
  for_redo2256:
    .const 'Sub' $P5053 = 'cuid_218_1361734134.987' 
    capture_lex $P5053
    $P5039 = $P5053($P5054)
    goto for_next2255
  for_done2257:
    set $P5098, $P5039
    goto if856_end2240
  if856_else2239:
    unless_null _lex_param_1, fallback2262
    nqp_get_sc_object $P5055, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5055
  fallback2262:
    set fb_tmp_150, _lex_param_1
    repr_defined $I5009, fb_tmp_150
    unless $I5009 goto if866_else2260 
    set $P5056, fb_tmp_150["nibbler"]
    set $P5058, $P5056
    goto if866_end2261
  if866_else2260:
    null $P5057
    set $P5058, $P5057
  if866_end2261:
    unless_null $P5058, vivi_8672263
    nqp_get_sc_object $P5059, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5058, $P5059
  vivi_8672263:
    set $P5097, $P5058
    unless $P5058 goto if865_end2259 
.annotate 'line', 734
    set $S5003, $P101
    iseq $I5010, $S5003, "after"
    unless $I5010 goto if868_else2264 
.annotate 'line', 736
    set fb_tmp_151, $P102
    repr_defined $I5011, fb_tmp_151
    unless $I5011 goto if869_else2266 
    set $P5060, fb_tmp_151[0]
    set $P5062, $P5060
    goto if869_end2267
  if869_else2266:
    null $P5061
    set $P5062, $P5061
  if869_end2267:
    unless_null $P5062, vivi_8702268
    nqp_get_sc_object $P5063, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5062, $P5063
  vivi_8702268:
    nqp_decontainerize $P5064, _lex_param_0
    nqp_decontainerize $P5065, _lex_param_0
    unless_null _lex_param_1, fallback2273
    nqp_get_sc_object $P5066, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5066
  fallback2273:
    set fb_tmp_153, _lex_param_1
    repr_defined $I5013, fb_tmp_153
    unless $I5013 goto if872_else2271 
    set $P5067, fb_tmp_153["nibbler"]
    set $P5069, $P5067
    goto if872_end2272
  if872_else2271:
    null $P5068
    set $P5069, $P5068
  if872_end2272:
    unless_null $P5069, vivi_8732274
    nqp_get_sc_object $P5070, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5069, $P5070
  vivi_8732274:
    set fb_tmp_152, $P5069
    repr_defined $I5012, fb_tmp_152
    unless $I5012 goto if871_else2269 
    set $P5071, fb_tmp_152[0]
    set $P5073, $P5071
    goto if871_end2270
  if871_else2269:
    null $P5072
    set $P5073, $P5072
  if871_end2270:
    unless_null $P5073, vivi_8742275
    nqp_get_sc_object $P5074, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5073, $P5074
  vivi_8742275:
    $P5075 = $P5073."ast"()
    $P5076 = $P5065."flip_ast"($P5075)
    $P5077 = $P5064."qbuildsub"($P5076, 1 :named("anon"), 1 :named("addself"))
    $P5078 = $P5062."push"($P5077)
    set $P5096, $P5078
    goto if868_end2265
  if868_else2264:
.annotate 'line', 737
    set fb_tmp_154, $P102
    repr_defined $I5014, fb_tmp_154
    unless $I5014 goto if875_else2276 
    set $P5079, fb_tmp_154[0]
    set $P5081, $P5079
    goto if875_end2277
  if875_else2276:
    null $P5080
    set $P5081, $P5080
  if875_end2277:
    unless_null $P5081, vivi_8762278
    nqp_get_sc_object $P5082, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5081, $P5082
  vivi_8762278:
    nqp_decontainerize $P5083, _lex_param_0
    unless_null _lex_param_1, fallback2283
    nqp_get_sc_object $P5084, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5084
  fallback2283:
    set fb_tmp_156, _lex_param_1
    repr_defined $I5016, fb_tmp_156
    unless $I5016 goto if878_else2281 
    set $P5085, fb_tmp_156["nibbler"]
    set $P5087, $P5085
    goto if878_end2282
  if878_else2281:
    null $P5086
    set $P5087, $P5086
  if878_end2282:
    unless_null $P5087, vivi_8792284
    nqp_get_sc_object $P5088, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5087, $P5088
  vivi_8792284:
    set fb_tmp_155, $P5087
    repr_defined $I5015, fb_tmp_155
    unless $I5015 goto if877_else2279 
    set $P5089, fb_tmp_155[0]
    set $P5091, $P5089
    goto if877_end2280
  if877_else2279:
    null $P5090
    set $P5091, $P5090
  if877_end2280:
    unless_null $P5091, vivi_8802285
    nqp_get_sc_object $P5092, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5091, $P5092
  vivi_8802285:
    $P5093 = $P5091."ast"()
    $P5094 = $P5083."qbuildsub"($P5093, 1 :named("anon"), 1 :named("addself"))
    $P5095 = $P5081."push"($P5094)
    set $P5096, $P5095
  if868_end2265:
    set $P5097, $P5096
  if865_end2259:
    set $P5098, $P5097
  if856_end2240:
    set $P5099, $P5098
  if839_end2212:
  if832_end2199:
.annotate 'line', 740
    $P5100 = _lex_param_1."!make"($P102)
    .return ($P5100) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_217_1361734134.987") :anon :lex :outer("cuid_162_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 718
    .lex "$loc", $P101 
    .lex "$rxname", $P102 
    .local pmc fb_tmp_140 
    .local pmc fb_tmp_141 
    .local pmc pkg_viv_tmp_11 
    .local pmc fb_tmp_142 
    .local pmc fb_tmp_143 
    .local pmc pkg_viv_tmp_12 
    .local pmc fb_tmp_144 
    .local pmc fb_tmp_145 
    .local pmc pkg_viv_tmp_13 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P102, $P5002
    find_dynamic_lex $P5003, "%*RX"
    unless_null $P5003, fallback2215
    nqp_get_sc_object $P5005, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    get_who $P5004, $P5005
    set pkg_viv_tmp_11, $P5004
    set fb_tmp_141, pkg_viv_tmp_11
    repr_defined $I5003, fb_tmp_141
    unless $I5003 goto if841_else2216 
    set $P5006, fb_tmp_141["%RX"]
    set $P5008, $P5006
    goto if841_end2217
  if841_else2216:
    null $P5007
    set $P5008, $P5007
  if841_end2217:
    unless_null $P5008, vivi_8422218
    new $P5009, 'Hash'
    set pkg_viv_tmp_11["%RX"], $P5009
    set $P5008, $P5009
  vivi_8422218:
    unless_null $P5008, vivi_8432219
    die "Contextual %*RX not found"
    box $P5010, "Contextual %*RX not found"
    set $P5008, $P5010
  vivi_8432219:
    set $P5003, $P5008
  fallback2215:
    set fb_tmp_140, $P5003
    repr_defined $I5002, fb_tmp_140
    unless $I5002 goto if840_else2213 
    set $P5011, fb_tmp_140["name"]
    set $P5013, $P5011
    goto if840_end2214
  if840_else2213:
    null $P5012
    set $P5013, $P5012
  if840_end2214:
    unless_null $P5013, vivi_8442220
    nqp_get_sc_object $P5014, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5013, $P5014
  vivi_8442220:
    set $S5001, $P5013
    index $I5001, $S5001, ":sym<", 0
    box $P5015, $I5001
    set $P101, $P5015
    set $N5001, $P101
    set $N5002, 0
    islt $I5004, $N5001, $N5002
    unless $I5004 goto if845_end2222 
    find_dynamic_lex $P5016, "%*RX"
    unless_null $P5016, fallback2225
    nqp_get_sc_object $P5018, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    get_who $P5017, $P5018
    set pkg_viv_tmp_12, $P5017
    set fb_tmp_143, pkg_viv_tmp_12
    repr_defined $I5007, fb_tmp_143
    unless $I5007 goto if847_else2226 
    set $P5019, fb_tmp_143["%RX"]
    set $P5021, $P5019
    goto if847_end2227
  if847_else2226:
    null $P5020
    set $P5021, $P5020
  if847_end2227:
    unless_null $P5021, vivi_8482228
    new $P5022, 'Hash'
    set pkg_viv_tmp_12["%RX"], $P5022
    set $P5021, $P5022
  vivi_8482228:
    unless_null $P5021, vivi_8492229
    die "Contextual %*RX not found"
    box $P5023, "Contextual %*RX not found"
    set $P5021, $P5023
  vivi_8492229:
    set $P5016, $P5021
  fallback2225:
    set fb_tmp_142, $P5016
    repr_defined $I5006, fb_tmp_142
    unless $I5006 goto if846_else2223 
    set $P5024, fb_tmp_142["name"]
    set $P5026, $P5024
    goto if846_end2224
  if846_else2223:
    null $P5025
    set $P5026, $P5025
  if846_end2224:
    unless_null $P5026, vivi_8502230
    nqp_get_sc_object $P5027, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5026, $P5027
  vivi_8502230:
    set $S5002, $P5026
    index $I5005, $S5002, utf8:":sym\x{ab}", 0
    box $P5028, $I5005
    set $P101, $P5028
  if845_end2222:
    find_dynamic_lex $P5029, "%*RX"
    unless_null $P5029, fallback2233
    nqp_get_sc_object $P5031, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    get_who $P5030, $P5031
    set pkg_viv_tmp_13, $P5030
    set fb_tmp_145, pkg_viv_tmp_13
    repr_defined $I5009, fb_tmp_145
    unless $I5009 goto if852_else2234 
    set $P5032, fb_tmp_145["%RX"]
    set $P5034, $P5032
    goto if852_end2235
  if852_else2234:
    null $P5033
    set $P5034, $P5033
  if852_end2235:
    unless_null $P5034, vivi_8532236
    new $P5035, 'Hash'
    set pkg_viv_tmp_13["%RX"], $P5035
    set $P5034, $P5035
  vivi_8532236:
    unless_null $P5034, vivi_8542237
    die "Contextual %*RX not found"
    box $P5036, "Contextual %*RX not found"
    set $P5034, $P5036
  vivi_8542237:
    set $P5029, $P5034
  fallback2233:
    set fb_tmp_144, $P5029
    repr_defined $I5008, fb_tmp_144
    unless $I5008 goto if851_else2231 
    set $P5037, fb_tmp_144["name"]
    set $P5039, $P5037
    goto if851_end2232
  if851_else2231:
    null $P5038
    set $P5039, $P5038
  if851_end2232:
    unless_null $P5039, vivi_8552238
    nqp_get_sc_object $P5040, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5039, $P5040
  vivi_8552238:
    set $S5004, $P5039
    set $N5004, $P101
    set $N5005, 5
    add $N5003, $N5004, $N5005
    set $I5010, $N5003
    substr $S5003, $S5004, $I5010
    box $P5041, $S5003
    set $P102, $P5041
    set $S5006, $P102
    set $S5007, $P102
    length $I5011, $S5007
    set $N5007, $I5011
    set $N5008, 1
    sub $N5006, $N5007, $N5008
    set $I5012, $N5006
    substr $S5005, $S5006, 0, $I5012
    box $P5042, $S5005
    set $P102, $P5042
.annotate 'line', 724
    nqp_get_sc_object $P5043, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    find_lex $P5044, "$/"
.annotate 'line', 725
    nqp_get_sc_object $P5045, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    find_lex $P5046, "$/"
    $P5047 = $P5045."new"($P102, "literal" :named("rxtype"), $P5046 :named("node"))
    $P5048 = $P5043."new"($P5047, "sym" :named("name"), "subcapture" :named("rxtype"), $P5044 :named("node"))
    store_lex "$qast", $P5048
    .return ($P5048) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_218_1361734134.987") :anon :lex :outer("cuid_162_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 732
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_149 
    find_lex $P5001, "$qast"
    set fb_tmp_149, $P5001
    repr_defined $I5001, fb_tmp_149
    unless $I5001 goto if863_else2252 
    set $P5002, fb_tmp_149[0]
    set $P5004, $P5002
    goto if863_end2253
  if863_else2252:
    null $P5003
    set $P5004, $P5003
  if863_end2253:
    unless_null $P5004, vivi_8642254
    nqp_get_sc_object $P5005, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5004, $P5005
  vivi_8642254:
    $P5006 = $P5004."push"(_lex_param_0)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<[>" :subid("cuid_163_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 743
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_219_1361734134.987' 
    capture_lex $P5030 
    .lex "$clist", $P101 
    .lex "$qast", $P102 
    .lex "$i", $P103 
    .lex "$n", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_157 
    .local pmc fb_tmp_158 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P104, $P5004
    unless_null _lex_param_1, fallback2288
    nqp_get_sc_object $P5005, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5005
  fallback2288:
    set fb_tmp_157, _lex_param_1
    repr_defined $I5001, fb_tmp_157
    unless $I5001 goto if881_else2286 
    set $P5006, fb_tmp_157["cclass_elem"]
    set $P5008, $P5006
    goto if881_end2287
  if881_else2286:
    null $P5007
    set $P5008, $P5007
  if881_end2287:
    unless_null $P5008, vivi_8822289
    nqp_get_sc_object $P5009, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5008, $P5009
  vivi_8822289:
    set $P101, $P5008
.annotate 'line', 745
    set fb_tmp_158, $P101
    repr_defined $I5002, fb_tmp_158
    unless $I5002 goto if883_else2290 
    set $P5010, fb_tmp_158[0]
    set $P5012, $P5010
    goto if883_end2291
  if883_else2290:
    null $P5011
    set $P5012, $P5011
  if883_end2291:
    unless_null $P5012, vivi_8842292
    nqp_get_sc_object $P5013, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5012, $P5013
  vivi_8842292:
    $P5014 = $P5012."ast"()
    set $P102, $P5014
.annotate 'line', 746
    $P5015 = $P102."negate"()
    set $P5017, $P5015
    unless $P5015 goto if886_end2296 
    $P5016 = $P102."rxtype"()
    set $S5001, $P5016
    iseq $I5003, $S5001, "subrule"
    box $P5018, $I5003
    set $P5017, $P5018
  if886_end2296:
    unless $P5017 goto if885_end2294 
.annotate 'line', 747
    $P102."subtype"("zerowidth")
.annotate 'line', 748
    nqp_get_sc_object $P5019, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
.annotate 'line', 750
    nqp_get_sc_object $P5020, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5021 = $P5020."new"("cclass" :named("rxtype"), "." :named("subtype"))
    $P5022 = $P5019."new"($P102, $P5021, "concat" :named("rxtype"), _lex_param_1 :named("node"))
    set $P102, $P5022
  if885_end2294:
    box $P5023, 1
    set $P103, $P5023
    set $N5001, $P101
    box $P5024, $N5001
    set $P104, $P5024
  while887_test2297:
    set $N5002, $P103
    set $N5003, $P104
    islt $I5004, $N5002, $N5003
    box $P5028, $I5004
    set $P5027, $P5028
    unless $I5004 goto while887_done2301 
  while887_redo2299:
    .const 'Sub' $P5025 = 'cuid_219_1361734134.987' 
    capture_lex $P5025
    $P5026 = $P5025()
    set $P5027, $P5026
    goto while887_test2297 
  while887_done2301:
.annotate 'line', 770
    $P5029 = _lex_param_1."!make"($P102)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_219_1361734134.987") :anon :lex :outer("cuid_163_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 754
    .lex "$ast", $P101 
    .local pmc fb_tmp_159 
    .local pmc tmp_1 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 755
    find_lex $P5002, "$clist"
    set fb_tmp_159, $P5002
    repr_defined $I5001, fb_tmp_159
    unless $I5001 goto if888_else2302 
    find_lex $P5004, "$i"
    set $I5002, $P5004
    set $P5003, fb_tmp_159[$I5002]
    set $P5006, $P5003
    goto if888_end2303
  if888_else2302:
    null $P5005
    set $P5006, $P5005
  if888_end2303:
    unless_null $P5006, vivi_8892304
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_8892304:
    $P5008 = $P5006."ast"()
    set $P101, $P5008
.annotate 'line', 756
    $P5009 = $P101."negate"()
    unless $P5009 goto if890_else2305 
.annotate 'line', 757
    $P5010 = $P101."rxtype"()
    set $S5001, $P5010
    iseq $I5003, $S5001, "cclass"
    unless $I5003 goto if891_else2307 
.annotate 'line', 758
    nqp_get_sc_object $P5011, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5012 = $P5011."new"($P101, "conj" :named("rxtype"), "zerowidth" :named("subtype"))
    set $P101, $P5012
    goto if891_end2308
  if891_else2307:
.annotate 'line', 760
.annotate 'line', 761
    $P5013 = $P101."subtype"("zerowidth")
  if891_end2308:
.annotate 'line', 763
    nqp_get_sc_object $P5014, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    find_lex $P5015, "$qast"
    find_lex $P5016, "$/"
    $P5017 = $P5014."new"($P101, $P5015, "concat" :named("rxtype"), $P5016 :named("node"))
    store_lex "$qast", $P5017
    goto if890_end2306
  if890_else2305:
.annotate 'line', 765
.annotate 'line', 766
    nqp_get_sc_object $P5018, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    find_lex $P5019, "$qast"
    find_lex $P5020, "$/"
    $P5021 = $P5018."new"($P5019, $P101, "altseq" :named("rxtype"), $P5020 :named("node"))
    store_lex "$qast", $P5021
  if890_end2306:
    find_lex $P5022, "$i"
    set tmp_1, $P5022
    set $N5002, tmp_1
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5023, $N5001
    store_lex "$i", $P5023
    .return (tmp_1) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_164_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 773
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_160 
    .local pmc fb_tmp_161 
    .local pmc fb_tmp_162 
.annotate 'line', 774
    unless_null _lex_param_1, fallback2313
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5001
  fallback2313:
    set fb_tmp_160, _lex_param_1
    repr_defined $I5001, fb_tmp_160
    unless $I5001 goto if893_else2311 
    set $P5002, fb_tmp_160["quote_EXPR"]
    set $P5004, $P5002
    goto if893_end2312
  if893_else2311:
    null $P5003
    set $P5004, $P5003
  if893_end2312:
    unless_null $P5004, vivi_8942314
    nqp_get_sc_object $P5005, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5004, $P5005
  vivi_8942314:
    unless $P5004 goto if892_else2309 
.annotate 'line', 775
    unless_null _lex_param_1, fallback2317
    nqp_get_sc_object $P5006, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5006
  fallback2317:
    set fb_tmp_161, _lex_param_1
    repr_defined $I5002, fb_tmp_161
    unless $I5002 goto if895_else2315 
    set $P5007, fb_tmp_161["quote_EXPR"]
    set $P5009, $P5007
    goto if895_end2316
  if895_else2315:
    null $P5008
    set $P5009, $P5008
  if895_end2316:
    unless_null $P5009, vivi_8962318
    nqp_get_sc_object $P5010, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5009, $P5010
  vivi_8962318:
    $P5011 = $P5009."ast"()
    set $P5019, $P5011
    goto if892_end2310
  if892_else2309:
.annotate 'line', 776
    nqp_get_sc_object $P5012, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 47
    unless_null _lex_param_1, fallback2321
    nqp_get_sc_object $P5013, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5013
  fallback2321:
    set fb_tmp_162, _lex_param_1
    repr_defined $I5003, fb_tmp_162
    unless $I5003 goto if897_else2319 
    set $P5014, fb_tmp_162["val"]
    set $P5016, $P5014
    goto if897_end2320
  if897_else2319:
    null $P5015
    set $P5016, $P5015
  if897_end2320:
    unless_null $P5016, vivi_8982322
    nqp_get_sc_object $P5017, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5016, $P5017
  vivi_8982322:
    set $N5001, $P5016
    $P5018 = $P5012."new"($N5001 :named("value"))
    set $P5019, $P5018
  if892_end2310:
    $P5020 = _lex_param_1."!make"($P5019)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_165_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 779
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5015 = 'cuid_220_1361734134.987' 
    capture_lex $P5015 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_163 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 780
    nqp_get_sc_object $P5002, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 82
    $P5003 = $P5002."new"("list" :named("op"))
    set $P101, $P5003
    unless_null _lex_param_1, fallback2325
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5007
  fallback2325:
    set fb_tmp_163, _lex_param_1
    repr_defined $I5001, fb_tmp_163
    unless $I5001 goto if899_else2323 
    set $P5008, fb_tmp_163["arg"]
    set $P5010, $P5008
    goto if899_end2324
  if899_else2323:
    null $P5009
    set $P5010, $P5009
  if899_end2324:
    unless_null $P5010, vivi_9002326
    nqp_get_sc_object $P5011, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5010, $P5011
  vivi_9002326:
    set $P5004, $P5010
    iter $P5006, $P5010
  for_next2327:
    unless $P5006, for_done2329
    shift $P5013, $P5006
  for_redo2328:
    .const 'Sub' $P5012 = 'cuid_220_1361734134.987' 
    capture_lex $P5012
    $P5004 = $P5012($P5013)
    goto for_next2327
  for_done2329:
.annotate 'line', 782
    $P5014 = _lex_param_1."!make"($P101)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_220_1361734134.987") :anon :lex :outer("cuid_165_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 781
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$past"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_elem" :subid("cuid_166_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 785
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_221_1361734134.987' 
    capture_lex $P5022 
    .const 'Sub' $P5022 = 'cuid_222_1361734134.987' 
    capture_lex $P5022 
    .const 'Sub' $P5022 = 'cuid_226_1361734134.987' 
    capture_lex $P5022 
    .lex "$str", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_164 
    .local pmc fb_tmp_167 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P102, $P5002
    box $P5003, ""
    set $P101, $P5003
    unless_null _lex_param_1, fallback2334
    nqp_get_sc_object $P5004, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5004
  fallback2334:
    set fb_tmp_164, _lex_param_1
    repr_defined $I5001, fb_tmp_164
    unless $I5001 goto if902_else2332 
    set $P5005, fb_tmp_164["name"]
    set $P5007, $P5005
    goto if902_end2333
  if902_else2332:
    null $P5006
    set $P5007, $P5006
  if902_end2333:
    unless_null $P5007, vivi_9032335
    nqp_get_sc_object $P5008, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5007, $P5008
  vivi_9032335:
    unless $P5007 goto if901_else2330 
    .const 'Sub' $P5009 = 'cuid_221_1361734134.987' 
    capture_lex $P5009
    $P5010 = $P5009()
    goto if901_end2331
  if901_else2330:
    unless_null _lex_param_1, fallback2348
    nqp_get_sc_object $P5011, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5011
  fallback2348:
    set fb_tmp_167, _lex_param_1
    repr_defined $I5002, fb_tmp_167
    unless $I5002 goto if909_else2346 
    set $P5012, fb_tmp_167["uniprop"]
    set $P5014, $P5012
    goto if909_end2347
  if909_else2346:
    null $P5013
    set $P5014, $P5013
  if909_end2347:
    unless_null $P5014, vivi_9102349
    nqp_get_sc_object $P5015, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5014, $P5015
  vivi_9102349:
    unless $P5014 goto if908_else2344 
    .const 'Sub' $P5016 = 'cuid_222_1361734134.987' 
    capture_lex $P5016
    $P5017 = $P5016()
    set $P5020, $P5017
    goto if908_end2345
  if908_else2344:
    .const 'Sub' $P5018 = 'cuid_226_1361734134.987' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5020, $P5019
  if908_end2345:
  if901_end2331:
.annotate 'line', 850
    $P5021 = _lex_param_1."!make"($P102)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_221_1361734134.987") :anon :lex :outer("cuid_166_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 788
    .lex "$name", $P101 
    .local pmc fb_tmp_165 
    .local pmc fb_tmp_166 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
    find_lex $P5002, "$/"
    unless_null $P5002, fallback2338
    nqp_get_sc_object $P5003, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5002, $P5003
  fallback2338:
    set fb_tmp_165, $P5002
    repr_defined $I5001, fb_tmp_165
    unless $I5001 goto if904_else2336 
    set $P5004, fb_tmp_165["name"]
    set $P5006, $P5004
    goto if904_end2337
  if904_else2336:
    null $P5005
    set $P5006, $P5005
  if904_end2337:
    unless_null $P5006, vivi_9052339
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_9052339:
    set $S5001, $P5006
    box $P5008, $S5001
    set $P101, $P5008
.annotate 'line', 790
    nqp_get_sc_object $P5009, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    find_lex $P5010, "$/"
    unless_null $P5010, fallback2342
    nqp_get_sc_object $P5011, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5010, $P5011
  fallback2342:
    set fb_tmp_166, $P5010
    repr_defined $I5003, fb_tmp_166
    unless $I5003 goto if906_else2340 
    set $P5012, fb_tmp_166["sign"]
    set $P5014, $P5012
    goto if906_end2341
  if906_else2340:
    null $P5013
    set $P5014, $P5013
  if906_end2341:
    unless_null $P5014, vivi_9072343
    nqp_get_sc_object $P5015, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5014, $P5015
  vivi_9072343:
    set $S5002, $P5014
    iseq $I5002, $S5002, "-"
    find_lex $P5016, "$/"
.annotate 'line', 792
    nqp_get_sc_object $P5017, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 12
    nqp_get_sc_object $P5018, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 52
    $P5019 = $P5018."new"($P101 :named("value"))
    $P5020 = $P5017."new"($P5019)
    $P5021 = $P5009."new"($P5020, "subrule" :named("rxtype"), "method" :named("subtype"), $I5002 :named("negate"), $P5016 :named("node"))
    store_lex "$qast", $P5021
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_222_1361734134.987") :anon :lex :outer("cuid_166_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 794
    .lex "$uniprop", $P101 
    .local pmc fb_tmp_168 
    .local pmc fb_tmp_169 
    .local pmc fb_tmp_170 
    .local pmc fb_tmp_171 
    .local pmc fb_tmp_172 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
    find_lex $P5002, "$/"
    unless_null $P5002, fallback2352
    nqp_get_sc_object $P5003, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5002, $P5003
  fallback2352:
    set fb_tmp_168, $P5002
    repr_defined $I5001, fb_tmp_168
    unless $I5001 goto if911_else2350 
    set $P5004, fb_tmp_168["uniprop"]
    set $P5006, $P5004
    goto if911_end2351
  if911_else2350:
    null $P5005
    set $P5006, $P5005
  if911_end2351:
    unless_null $P5006, vivi_9122353
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_9122353:
    set $S5001, $P5006
    box $P5008, $S5001
    set $P101, $P5008
.annotate 'line', 796
    nqp_get_sc_object $P5009, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    find_lex $P5010, "$/"
    unless_null $P5010, fallback2360
    nqp_get_sc_object $P5011, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5010, $P5011
  fallback2360:
    set fb_tmp_169, $P5010
    repr_defined $I5003, fb_tmp_169
    unless $I5003 goto if915_else2358 
    set $P5012, fb_tmp_169["sign"]
    set $P5014, $P5012
    goto if915_end2359
  if915_else2358:
    null $P5013
    set $P5014, $P5013
  if915_end2359:
    unless_null $P5014, vivi_9162361
    nqp_get_sc_object $P5015, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5014, $P5015
  vivi_9162361:
    set $S5002, $P5014
    iseq $I5002, $S5002, "-"
    set $I5006, $I5002
    unless $I5002 goto if914_end2357 
    find_lex $P5016, "$/"
    unless_null $P5016, fallback2364
    nqp_get_sc_object $P5017, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5016, $P5017
  fallback2364:
    set fb_tmp_170, $P5016
    repr_defined $I5005, fb_tmp_170
    unless $I5005 goto if917_else2362 
    set $P5018, fb_tmp_170["invert"]
    set $P5020, $P5018
    goto if917_end2363
  if917_else2362:
    null $P5019
    set $P5020, $P5019
  if917_end2363:
    unless_null $P5020, vivi_9182365
    nqp_get_sc_object $P5021, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5020, $P5021
  vivi_9182365:
    set $S5003, $P5020
    isne $I5004, $S5003, "!"
    set $I5006, $I5004
  if914_end2357:
    set $I5012, $I5006
    if $I5006 goto unless913_end2355 
    find_lex $P5022, "$/"
    unless_null $P5022, fallback2370
    nqp_get_sc_object $P5023, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5022, $P5023
  fallback2370:
    set fb_tmp_171, $P5022
    repr_defined $I5008, fb_tmp_171
    unless $I5008 goto if920_else2368 
    set $P5024, fb_tmp_171["sign"]
    set $P5026, $P5024
    goto if920_end2369
  if920_else2368:
    null $P5025
    set $P5026, $P5025
  if920_end2369:
    unless_null $P5026, vivi_9212371
    nqp_get_sc_object $P5027, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5026, $P5027
  vivi_9212371:
    set $S5004, $P5026
    isne $I5007, $S5004, "-"
    set $I5011, $I5007
    unless $I5007 goto if919_end2367 
    find_lex $P5028, "$/"
    unless_null $P5028, fallback2374
    nqp_get_sc_object $P5029, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5028, $P5029
  fallback2374:
    set fb_tmp_172, $P5028
    repr_defined $I5010, fb_tmp_172
    unless $I5010 goto if922_else2372 
    set $P5030, fb_tmp_172["invert"]
    set $P5032, $P5030
    goto if922_end2373
  if922_else2372:
    null $P5031
    set $P5032, $P5031
  if922_end2373:
    unless_null $P5032, vivi_9232375
    nqp_get_sc_object $P5033, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5032, $P5033
  vivi_9232375:
    set $S5005, $P5032
    iseq $I5009, $S5005, "!"
    set $I5011, $I5009
  if919_end2367:
    set $I5012, $I5011
  unless913_end2355:
    find_lex $P5034, "$/"
    $P5035 = $P5009."new"($P101, "uniprop" :named("rxtype"), $I5012 :named("negate"), $P5034 :named("node"))
    store_lex "$qast", $P5035
    .return ($P5035) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_226_1361734134.987") :anon :lex :outer("cuid_166_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 800
    .const 'Sub' $P5046 = 'cuid_224_1361734134.987' 
    capture_lex $P5046 
    .lex "@alts", $P101 
    .local pmc fb_tmp_173 
    .local pmc fb_tmp_200 
    .local pmc fb_tmp_201 
    .local pmc fb_tmp_202 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_lex $P5005, "$/"
    unless_null $P5005, fallback2378
    nqp_get_sc_object $P5006, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5005, $P5006
  fallback2378:
    set fb_tmp_173, $P5005
    repr_defined $I5001, fb_tmp_173
    unless $I5001 goto if924_else2376 
    set $P5007, fb_tmp_173["charspec"]
    set $P5009, $P5007
    goto if924_end2377
  if924_else2376:
    null $P5008
    set $P5009, $P5008
  if924_end2377:
    unless_null $P5009, vivi_9252379
    nqp_get_sc_object $P5010, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5009, $P5010
  vivi_9252379:
    set $P5002, $P5009
    iter $P5004, $P5009
  for_next2492:
    unless $P5004, for_done2494
    shift $P5012, $P5004
  for_redo2493:
    .const 'Sub' $P5011 = 'cuid_224_1361734134.987' 
    capture_lex $P5011
    $P5002 = $P5011($P5012)
    goto for_next2492
  for_done2494:
    find_lex $P5013, "$str"
    set $S5001, $P5013
    length $I5002, $S5001
    unless $I5002 goto if993_end2496 
.annotate 'line', 840
    nqp_get_sc_object $P5014, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    find_lex $P5015, "$str"
    find_lex $P5016, "$/"
    find_lex $P5017, "$/"
    unless_null $P5017, fallback2499
    nqp_get_sc_object $P5018, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5017, $P5018
  fallback2499:
    set fb_tmp_200, $P5017
    repr_defined $I5004, fb_tmp_200
    unless $I5004 goto if994_else2497 
    set $P5019, fb_tmp_200["sign"]
    set $P5021, $P5019
    goto if994_end2498
  if994_else2497:
    null $P5020
    set $P5021, $P5020
  if994_end2498:
    unless_null $P5021, vivi_9952500
    nqp_get_sc_object $P5022, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5021, $P5022
  vivi_9952500:
    set $S5002, $P5021
    iseq $I5003, $S5002, "-"
    $P5023 = $P5014."new"($P5015, "enumcharlist" :named("rxtype"), $P5016 :named("node"), $I5003 :named("negate"))
    $P5024 = $P101."push"($P5023)
  if993_end2496:
    set $N5001, $P101
    set $N5002, 1
    iseq $I5005, $N5001, $N5002
    unless $I5005 goto if996_else2501 
    set fb_tmp_201, $P101
    repr_defined $I5006, fb_tmp_201
    unless $I5006 goto if997_else2503 
    set $P5025, fb_tmp_201[0]
    set $P5027, $P5025
    goto if997_end2504
  if997_else2503:
    null $P5026
    set $P5027, $P5026
  if997_end2504:
    unless_null $P5027, vivi_9982505
    nqp_get_sc_object $P5028, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5027, $P5028
  vivi_9982505:
    set $P5045, $P5027
    goto if996_end2502
  if996_else2501:
    find_lex $P5029, "$/"
    unless_null $P5029, fallback2510
    nqp_get_sc_object $P5030, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5029, $P5030
  fallback2510:
    set fb_tmp_202, $P5029
    repr_defined $I5008, fb_tmp_202
    unless $I5008 goto if1000_else2508 
    set $P5031, fb_tmp_202["sign"]
    set $P5033, $P5031
    goto if1000_end2509
  if1000_else2508:
    null $P5032
    set $P5033, $P5032
  if1000_end2509:
    unless_null $P5033, vivi_10012511
    nqp_get_sc_object $P5034, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5033, $P5034
  vivi_10012511:
    set $S5003, $P5033
    iseq $I5007, $S5003, "-"
    unless $I5007 goto if999_else2506 
.annotate 'line', 844
    nqp_get_sc_object $P5035, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    find_lex $P5036, "$/"
.annotate 'line', 845
    nqp_get_sc_object $P5037, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5038 = $P5037."new"($P101 :flat, "conj" :named("rxtype"), "zerowidth" :named("subtype"))
.annotate 'line', 846
    nqp_get_sc_object $P5039, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5040 = $P5039."new"("cclass" :named("rxtype"), "." :named("subtype"))
    $P5041 = $P5035."new"($P5038, $P5040, "concat" :named("rxtype"), $P5036 :named("node"))
    set $P5044, $P5041
    goto if999_end2507
  if999_else2506:
.annotate 'line', 847
    nqp_get_sc_object $P5042, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5043 = $P5042."new"($P101 :flat, "altseq" :named("rxtype"))
    set $P5044, $P5043
  if999_end2507:
    set $P5045, $P5044
  if996_end2502:
    store_lex "$qast", $P5045
    .return ($P5045) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_224_1361734134.987") :anon :lex :outer("cuid_226_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 802
    .param pmc _lex_param_0 
    .const 'Sub' $P5025 = 'cuid_223_1361734134.987' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_225_1361734134.987' 
    capture_lex $P5025 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_174 
    .local pmc fb_tmp_194 
    .local pmc fb_tmp_195 
    .local pmc fb_tmp_199 
    set fb_tmp_174, _lex_param_0
    repr_defined $I5001, fb_tmp_174
    unless $I5001 goto if927_else2382 
    set $P5001, fb_tmp_174[1]
    set $P5003, $P5001
    goto if927_end2383
  if927_else2382:
    null $P5002
    set $P5003, $P5002
  if927_end2383:
    unless_null $P5003, vivi_9282384
    nqp_get_sc_object $P5004, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5003, $P5004
  vivi_9282384:
    unless $P5003 goto if926_else2380 
    .const 'Sub' $P5005 = 'cuid_223_1361734134.987' 
    capture_lex $P5005
    $P5006 = $P5005()
    set $P5024, $P5006
    goto if926_end2381
  if926_else2380:
    set fb_tmp_195, _lex_param_0
    repr_defined $I5003, fb_tmp_195
    unless $I5003 goto if981_else2473 
    set $P5007, fb_tmp_195[0]
    set $P5009, $P5007
    goto if981_end2474
  if981_else2473:
    null $P5008
    set $P5009, $P5008
  if981_end2474:
    unless_null $P5009, vivi_9822475
    nqp_get_sc_object $P5010, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5009, $P5010
  vivi_9822475:
    set fb_tmp_194, $P5009
    repr_defined $I5002, fb_tmp_194
    unless $I5002 goto if980_else2471 
    set $P5011, fb_tmp_194["backslash"]
    set $P5013, $P5011
    goto if980_end2472
  if980_else2471:
    null $P5012
    set $P5013, $P5012
  if980_end2472:
    unless_null $P5013, vivi_9832476
    nqp_get_sc_object $P5014, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5013, $P5014
  vivi_9832476:
    unless $P5013 goto if979_else2469 
    .const 'Sub' $P5015 = 'cuid_225_1361734134.987' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5023, $P5016
    goto if979_end2470
  if979_else2469:
.annotate 'line', 838
    find_lex $P5017, "$str"
    set $S5002, $P5017
    set fb_tmp_199, _lex_param_0
    repr_defined $I5004, fb_tmp_199
    unless $I5004 goto if991_else2489 
    set $P5018, fb_tmp_199[0]
    set $P5020, $P5018
    goto if991_end2490
  if991_else2489:
    null $P5019
    set $P5020, $P5019
  if991_end2490:
    unless_null $P5020, vivi_9922491
    nqp_get_sc_object $P5021, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5020, $P5021
  vivi_9922491:
    set $S5003, $P5020
    concat $S5001, $S5002, $S5003
    box $P5022, $S5001
    store_lex "$str", $P5022
    set $P5023, $P5022
  if979_end2470:
    set $P5024, $P5023
  if926_end2381:
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_223_1361734134.987") :anon :lex :outer("cuid_224_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 803
    .lex "$node", $P101 
    .lex "$lhs", $P102 
    .lex "$rhs", $P103 
    .lex "$ord0", $P104 
    .lex "$ord1", $P105 
    .local pmc fb_tmp_175 
    .local pmc fb_tmp_176 
    .local pmc fb_tmp_177 
    .local pmc fb_tmp_178 
    .local pmc fb_tmp_179 
    .local pmc fb_tmp_180 
    .local pmc fb_tmp_181 
    .local pmc fb_tmp_182 
    .local pmc fb_tmp_183 
    .local pmc fb_tmp_184 
    .local pmc fb_tmp_185 
    .local pmc fb_tmp_186 
    .local pmc fb_tmp_187 
    .local pmc fb_tmp_188 
    .local pmc fb_tmp_189 
    .local pmc fb_tmp_190 
    .local pmc fb_tmp_191 
    .local pmc fb_tmp_192 
    .local pmc fb_tmp_193 
    .local pmc tmp_2 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P105, $P5005
    find_lex $P5006, "$_"
    set fb_tmp_176, $P5006
    repr_defined $I5002, fb_tmp_176
    unless $I5002 goto if931_else2389 
    set $P5007, fb_tmp_176[0]
    set $P5009, $P5007
    goto if931_end2390
  if931_else2389:
    null $P5008
    set $P5009, $P5008
  if931_end2390:
    unless_null $P5009, vivi_9322391
    nqp_get_sc_object $P5010, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5009, $P5010
  vivi_9322391:
    set fb_tmp_175, $P5009
    repr_defined $I5001, fb_tmp_175
    unless $I5001 goto if930_else2387 
    set $P5011, fb_tmp_175["backslash"]
    set $P5013, $P5011
    goto if930_end2388
  if930_else2387:
    null $P5012
    set $P5013, $P5012
  if930_end2388:
    unless_null $P5013, vivi_9332392
    nqp_get_sc_object $P5014, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5013, $P5014
  vivi_9332392:
    unless $P5013 goto if929_else2385 
.annotate 'line', 807
.annotate 'line', 808
    find_lex $P5015, "$_"
    set fb_tmp_178, $P5015
    repr_defined $I5004, fb_tmp_178
    unless $I5004 goto if935_else2395 
    set $P5016, fb_tmp_178[0]
    set $P5018, $P5016
    goto if935_end2396
  if935_else2395:
    null $P5017
    set $P5018, $P5017
  if935_end2396:
    unless_null $P5018, vivi_9362397
    nqp_get_sc_object $P5019, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5018, $P5019
  vivi_9362397:
    set fb_tmp_177, $P5018
    repr_defined $I5003, fb_tmp_177
    unless $I5003 goto if934_else2393 
    set $P5020, fb_tmp_177["backslash"]
    set $P5022, $P5020
    goto if934_end2394
  if934_else2393:
    null $P5021
    set $P5022, $P5021
  if934_end2394:
    unless_null $P5022, vivi_9372398
    nqp_get_sc_object $P5023, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5022, $P5023
  vivi_9372398:
    $P5024 = $P5022."ast"()
    set $P101, $P5024
.annotate 'line', 810
    $P5025 = $P101."rxtype"()
    set $S5001, $P5025
    isne $I5005, $S5001, "literal"
    set $I5007, $I5005
    unless $I5005 goto if941_end2406 
    $P5026 = $P101."rxtype"()
    set $S5002, $P5026
    isne $I5006, $S5002, "enumcharlist"
    set $I5007, $I5006
  if941_end2406:
    box $P5029, $I5007
    set $P5028, $P5029
    if $I5007 goto unless940_end2404 
.annotate 'line', 811
    $P5027 = $P101."negate"()
    set $P5028, $P5027
  unless940_end2404:
    set $P5034, $P5028
    if $P5028 goto unless939_end2402 
    set fb_tmp_179, $P101
    repr_defined $I5010, fb_tmp_179
    unless $I5010 goto if942_else2407 
    set $P5030, fb_tmp_179[0]
    set $P5032, $P5030
    goto if942_end2408
  if942_else2407:
    null $P5031
    set $P5032, $P5031
  if942_end2408:
    unless_null $P5032, vivi_9432409
    nqp_get_sc_object $P5033, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5032, $P5033
  vivi_9432409:
    set $S5003, $P5032
    length $I5009, $S5003
    set $N5001, $I5009
    set $N5002, 1
    isne $I5008, $N5001, $N5002
    box $P5035, $I5008
    set $P5034, $P5035
  unless939_end2402:
    unless $P5034 goto if938_end2400 
.annotate 'line', 809
    find_lex $P5036, "$/"
    $P5037 = $P5036."CURSOR"()
    find_lex $P5038, "$_"
    set $S5005, $P5038
    concat $S5004, "Illegal range endpoint in regex: ", $S5005
    $P5039 = $P5037."panic"($S5004)
  if938_end2400:
    set fb_tmp_180, $P101
    repr_defined $I5011, fb_tmp_180
    unless $I5011 goto if944_else2410 
    set $P5040, fb_tmp_180[0]
    set $P5042, $P5040
    goto if944_end2411
  if944_else2410:
    null $P5041
    set $P5042, $P5041
  if944_end2411:
    unless_null $P5042, vivi_9452412
    nqp_get_sc_object $P5043, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5042, $P5043
  vivi_9452412:
    set $P102, $P5042
    goto if929_end2386
  if929_else2385:
.annotate 'line', 814
    find_lex $P5044, "$_"
    set fb_tmp_182, $P5044
    repr_defined $I5013, fb_tmp_182
    unless $I5013 goto if947_else2415 
    set $P5045, fb_tmp_182[0]
    set $P5047, $P5045
    goto if947_end2416
  if947_else2415:
    null $P5046
    set $P5047, $P5046
  if947_end2416:
    unless_null $P5047, vivi_9482417
    nqp_get_sc_object $P5048, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5047, $P5048
  vivi_9482417:
    set fb_tmp_181, $P5047
    repr_defined $I5012, fb_tmp_181
    unless $I5012 goto if946_else2413 
    set $P5049, fb_tmp_181[0]
    set $P5051, $P5049
    goto if946_end2414
  if946_else2413:
    null $P5050
    set $P5051, $P5050
  if946_end2414:
    unless_null $P5051, vivi_9492418
    nqp_get_sc_object $P5052, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5051, $P5052
  vivi_9492418:
    set $S5006, $P5051
    box $P5053, $S5006
    set $P102, $P5053
  if929_end2386:
    find_lex $P5054, "$_"
    set fb_tmp_185, $P5054
    repr_defined $I5016, fb_tmp_185
    unless $I5016 goto if953_else2425 
    set $P5055, fb_tmp_185[1]
    set $P5057, $P5055
    goto if953_end2426
  if953_else2425:
    null $P5056
    set $P5057, $P5056
  if953_end2426:
    unless_null $P5057, vivi_9542427
    nqp_get_sc_object $P5058, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5057, $P5058
  vivi_9542427:
    set fb_tmp_184, $P5057
    repr_defined $I5015, fb_tmp_184
    unless $I5015 goto if952_else2423 
    set $P5059, fb_tmp_184[0]
    set $P5061, $P5059
    goto if952_end2424
  if952_else2423:
    null $P5060
    set $P5061, $P5060
  if952_end2424:
    unless_null $P5061, vivi_9552428
    nqp_get_sc_object $P5062, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5061, $P5062
  vivi_9552428:
    set fb_tmp_183, $P5061
    repr_defined $I5014, fb_tmp_183
    unless $I5014 goto if951_else2421 
    set $P5063, fb_tmp_183["backslash"]
    set $P5065, $P5063
    goto if951_end2422
  if951_else2421:
    null $P5064
    set $P5065, $P5064
  if951_end2422:
    unless_null $P5065, vivi_9562429
    nqp_get_sc_object $P5066, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5065, $P5066
  vivi_9562429:
    unless $P5065 goto if950_else2419 
.annotate 'line', 817
.annotate 'line', 818
    find_lex $P5067, "$_"
    set fb_tmp_188, $P5067
    repr_defined $I5019, fb_tmp_188
    unless $I5019 goto if959_else2434 
    set $P5068, fb_tmp_188[1]
    set $P5070, $P5068
    goto if959_end2435
  if959_else2434:
    null $P5069
    set $P5070, $P5069
  if959_end2435:
    unless_null $P5070, vivi_9602436
    nqp_get_sc_object $P5071, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5070, $P5071
  vivi_9602436:
    set fb_tmp_187, $P5070
    repr_defined $I5018, fb_tmp_187
    unless $I5018 goto if958_else2432 
    set $P5072, fb_tmp_187[0]
    set $P5074, $P5072
    goto if958_end2433
  if958_else2432:
    null $P5073
    set $P5074, $P5073
  if958_end2433:
    unless_null $P5074, vivi_9612437
    nqp_get_sc_object $P5075, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5074, $P5075
  vivi_9612437:
    set fb_tmp_186, $P5074
    repr_defined $I5017, fb_tmp_186
    unless $I5017 goto if957_else2430 
    set $P5076, fb_tmp_186["backslash"]
    set $P5078, $P5076
    goto if957_end2431
  if957_else2430:
    null $P5077
    set $P5078, $P5077
  if957_end2431:
    unless_null $P5078, vivi_9622438
    nqp_get_sc_object $P5079, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5078, $P5079
  vivi_9622438:
    $P5080 = $P5078."ast"()
    set $P101, $P5080
.annotate 'line', 820
    $P5081 = $P101."rxtype"()
    set $S5007, $P5081
    isne $I5020, $S5007, "literal"
    set $I5022, $I5020
    unless $I5020 goto if966_end2446 
    $P5082 = $P101."rxtype"()
    set $S5008, $P5082
    isne $I5021, $S5008, "enumcharlist"
    set $I5022, $I5021
  if966_end2446:
    box $P5085, $I5022
    set $P5084, $P5085
    if $I5022 goto unless965_end2444 
.annotate 'line', 821
    $P5083 = $P101."negate"()
    set $P5084, $P5083
  unless965_end2444:
    set $P5090, $P5084
    if $P5084 goto unless964_end2442 
    set fb_tmp_189, $P101
    repr_defined $I5025, fb_tmp_189
    unless $I5025 goto if967_else2447 
    set $P5086, fb_tmp_189[0]
    set $P5088, $P5086
    goto if967_end2448
  if967_else2447:
    null $P5087
    set $P5088, $P5087
  if967_end2448:
    unless_null $P5088, vivi_9682449
    nqp_get_sc_object $P5089, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5088, $P5089
  vivi_9682449:
    set $S5009, $P5088
    length $I5024, $S5009
    set $N5003, $I5024
    set $N5004, 1
    isne $I5023, $N5003, $N5004
    box $P5091, $I5023
    set $P5090, $P5091
  unless964_end2442:
    unless $P5090 goto if963_end2440 
.annotate 'line', 819
    find_lex $P5092, "$/"
    $P5093 = $P5092."CURSOR"()
    find_lex $P5094, "$_"
    set $S5011, $P5094
    concat $S5010, "Illegal range endpoint in regex: ", $S5011
    $P5095 = $P5093."panic"($S5010)
  if963_end2440:
    set fb_tmp_190, $P101
    repr_defined $I5026, fb_tmp_190
    unless $I5026 goto if969_else2450 
    set $P5096, fb_tmp_190[0]
    set $P5098, $P5096
    goto if969_end2451
  if969_else2450:
    null $P5097
    set $P5098, $P5097
  if969_end2451:
    unless_null $P5098, vivi_9702452
    nqp_get_sc_object $P5099, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5098, $P5099
  vivi_9702452:
    set $P103, $P5098
    goto if950_end2420
  if950_else2419:
.annotate 'line', 824
    find_lex $P5100, "$_"
    set fb_tmp_193, $P5100
    repr_defined $I5029, fb_tmp_193
    unless $I5029 goto if973_else2457 
    set $P5101, fb_tmp_193[1]
    set $P5103, $P5101
    goto if973_end2458
  if973_else2457:
    null $P5102
    set $P5103, $P5102
  if973_end2458:
    unless_null $P5103, vivi_9742459
    nqp_get_sc_object $P5104, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5103, $P5104
  vivi_9742459:
    set fb_tmp_192, $P5103
    repr_defined $I5028, fb_tmp_192
    unless $I5028 goto if972_else2455 
    set $P5105, fb_tmp_192[0]
    set $P5107, $P5105
    goto if972_end2456
  if972_else2455:
    null $P5106
    set $P5107, $P5106
  if972_end2456:
    unless_null $P5107, vivi_9752460
    nqp_get_sc_object $P5108, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5107, $P5108
  vivi_9752460:
    set fb_tmp_191, $P5107
    repr_defined $I5027, fb_tmp_191
    unless $I5027 goto if971_else2453 
    set $P5109, fb_tmp_191[0]
    set $P5111, $P5109
    goto if971_end2454
  if971_else2453:
    null $P5110
    set $P5111, $P5110
  if971_end2454:
    unless_null $P5111, vivi_9762461
    nqp_get_sc_object $P5112, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5111, $P5112
  vivi_9762461:
    set $S5012, $P5111
    box $P5113, $S5012
    set $P103, $P5113
  if950_end2420:
    set $S5013, $P102
    ord $I5030, $S5013
    box $P5114, $I5030
    set $P104, $P5114
    set $S5014, $P103
    ord $I5031, $S5014
    box $P5115, $I5031
    set $P105, $P5115
    set $N5005, $P104
    set $N5006, $P105
    isgt $I5032, $N5005, $N5006
    unless $I5032 goto if977_end2463 
.annotate 'line', 829
    find_lex $P5116, "$/"
    $P5117 = $P5116."CURSOR"()
    find_lex $P5118, "$_"
    set $S5016, $P5118
    concat $S5015, "Illegal reversed character range in regex: ", $S5016
    $P5119 = $P5117."panic"($S5015)
  if977_end2463:
    new $P5123, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5123, while978_handlers2467
    push_eh $P5123
  while978_test2464:
    set $N5007, $P104
    set $N5008, $P105
    isle $I5033, $N5007, $N5008
    box $P5124, $I5033
    set $P5122, $P5124
    unless $I5033 goto while978_done2468 
  while978_redo2466:
    find_lex $P5120, "$str"
    set $S5018, $P5120
    set tmp_2, $P104
    set $N5010, tmp_2
    set $N5011, 1
    add $N5009, $N5010, $N5011
    box $P5121, $N5009
    set $P104, $P5121
    set $I5034, tmp_2
    chr $S5019, $I5034
    concat $S5017, $S5018, $S5019
    box $P5121, $S5017
    store_lex "$str", $P5121
    set $P5122, $P5121
    goto while978_test2464 
  while978_handlers2467:
    .get_results ($P5123)
    pop_upto_eh $P5123
    getattribute $P5123, $P5123, 'type'
    eq $P5123, .CONTROL_LOOP_NEXT, while978_test2464
    eq $P5123, .CONTROL_LOOP_REDO, while978_redo2466
  while978_done2468:
    pop_eh 
    .return ($P5122) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_225_1361734134.987") :anon :lex :outer("cuid_224_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 833
    .lex "$bs", $P101 
    .local pmc fb_tmp_196 
    .local pmc fb_tmp_197 
    .local pmc fb_tmp_198 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 834
    find_lex $P5002, "$_"
    set fb_tmp_197, $P5002
    repr_defined $I5002, fb_tmp_197
    unless $I5002 goto if985_else2479 
    set $P5003, fb_tmp_197[0]
    set $P5005, $P5003
    goto if985_end2480
  if985_else2479:
    null $P5004
    set $P5005, $P5004
  if985_end2480:
    unless_null $P5005, vivi_9862481
    nqp_get_sc_object $P5006, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5005, $P5006
  vivi_9862481:
    set fb_tmp_196, $P5005
    repr_defined $I5001, fb_tmp_196
    unless $I5001 goto if984_else2477 
    set $P5007, fb_tmp_196["backslash"]
    set $P5009, $P5007
    goto if984_end2478
  if984_else2477:
    null $P5008
    set $P5009, $P5008
  if984_end2478:
    unless_null $P5009, vivi_9872482
    nqp_get_sc_object $P5010, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5009, $P5010
  vivi_9872482:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    find_lex $P5012, "$/"
    unless_null $P5012, fallback2487
    nqp_get_sc_object $P5013, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5012, $P5013
  fallback2487:
    set fb_tmp_198, $P5012
    repr_defined $I5004, fb_tmp_198
    unless $I5004 goto if989_else2485 
    set $P5014, fb_tmp_198["sign"]
    set $P5016, $P5014
    goto if989_end2486
  if989_else2485:
    null $P5015
    set $P5016, $P5015
  if989_end2486:
    unless_null $P5016, vivi_9902488
    nqp_get_sc_object $P5017, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5016, $P5017
  vivi_9902488:
    set $S5001, $P5016
    iseq $I5003, $S5001, "-"
    unless $I5003 goto if988_end2484 
.annotate 'line', 835
    $P5018 = $P101."negate"()
    isfalse $I5005, $P5018
    $P5019 = $P101."negate"($I5005)
  if988_end2484:
.annotate 'line', 836
    find_lex $P5020, "@alts"
    $P5021 = $P5020."push"($P101)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "mod_internal" :subid("cuid_167_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 853
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5026 = 'cuid_227_1361734134.987' 
    capture_lex $P5026 
    .const 'Sub' $P5026 = 'cuid_228_1361734134.987' 
    capture_lex $P5026 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_203 
    .local pmc fb_tmp_204 
    .local pmc fb_tmp_205 
    unless_null _lex_param_1, fallback2516
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5001
  fallback2516:
    set fb_tmp_203, _lex_param_1
    repr_defined $I5001, fb_tmp_203
    unless $I5001 goto if1003_else2514 
    set $P5002, fb_tmp_203["quote_EXPR"]
    set $P5004, $P5002
    goto if1003_end2515
  if1003_else2514:
    null $P5003
    set $P5004, $P5003
  if1003_end2515:
    unless_null $P5004, vivi_10042517
    nqp_get_sc_object $P5005, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5004, $P5005
  vivi_10042517:
    unless $P5004 goto if1002_else2512 
.annotate 'line', 854
.annotate 'line', 855
    nqp_get_sc_object $P5006, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 52
    unless_null _lex_param_1, fallback2524
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_1, $P5007
  fallback2524:
    set fb_tmp_205, _lex_param_1
    repr_defined $I5003, fb_tmp_205
    unless $I5003 goto if1007_else2522 
    set $P5008, fb_tmp_205["quote_EXPR"]
    set $P5010, $P5008
    goto if1007_end2523
  if1007_else2522:
    null $P5009
    set $P5010, $P5009
  if1007_end2523:
    unless_null $P5010, vivi_10082525
    nqp_get_sc_object $P5011, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5010, $P5011
  vivi_10082525:
    set fb_tmp_204, $P5010
    repr_defined $I5002, fb_tmp_204
    unless $I5002 goto if1006_else2520 
    set $P5012, fb_tmp_204[0]
    set $P5014, $P5012
    goto if1006_end2521
  if1006_else2520:
    null $P5013
    set $P5014, $P5013
  if1006_end2521:
    unless_null $P5014, vivi_10092526
    nqp_get_sc_object $P5015, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5014, $P5015
  vivi_10092526:
    $P5016 = $P5014."ast"()
    $P5017 = $P5006."ACCEPTS"($P5016)
    unless $P5017 goto if1005_else2518 
    .const 'Sub' $P5018 = 'cuid_227_1361734134.987' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5022, $P5019
    goto if1005_end2519
  if1005_else2518:
.annotate 'line', 863
.annotate 'line', 864
    $P5020 = _lex_param_1."CURSOR"()
    $P5021 = $P5020."panic"("Internal modifier strings must be literals")
    set $P5022, $P5021
  if1005_end2519:
    set $P5025, $P5022
    goto if1002_end2513
  if1002_else2512:
    .const 'Sub' $P5023 = 'cuid_228_1361734134.987' 
    capture_lex $P5023
    $P5024 = $P5023()
    set $P5025, $P5024
  if1002_end2513:
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_227_1361734134.987") :anon :lex :outer("cuid_167_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 855
    .lex "$key", $P101 
    .lex "$val", $P102 
    .local pmc fb_tmp_206 
    .local pmc fb_tmp_207 
    .local pmc fb_tmp_208 
    .local pmc fb_tmp_209 
    .local pmc fb_tmp_210 
    .local pmc pkg_viv_tmp_14 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P102, $P5002
    find_lex $P5003, "$/"
    unless_null $P5003, fallback2531
    nqp_get_sc_object $P5004, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5003, $P5004
  fallback2531:
    set fb_tmp_207, $P5003
    repr_defined $I5002, fb_tmp_207
    unless $I5002 goto if1011_else2529 
    set $P5005, fb_tmp_207["mod_ident"]
    set $P5007, $P5005
    goto if1011_end2530
  if1011_else2529:
    null $P5006
    set $P5007, $P5006
  if1011_end2530:
    unless_null $P5007, vivi_10122532
    nqp_get_sc_object $P5008, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5007, $P5008
  vivi_10122532:
    set fb_tmp_206, $P5007
    repr_defined $I5001, fb_tmp_206
    unless $I5001 goto if1010_else2527 
    set $P5009, fb_tmp_206["sym"]
    set $P5011, $P5009
    goto if1010_end2528
  if1010_else2527:
    null $P5010
    set $P5011, $P5010
  if1010_end2528:
    unless_null $P5011, vivi_10132533
    nqp_get_sc_object $P5012, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5011, $P5012
  vivi_10132533:
    set $S5001, $P5011
    box $P5013, $S5001
    set $P101, $P5013
.annotate 'line', 857
    find_lex $P5014, "$/"
    unless_null $P5014, fallback2538
    nqp_get_sc_object $P5015, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5014, $P5015
  fallback2538:
    set fb_tmp_209, $P5014
    repr_defined $I5004, fb_tmp_209
    unless $I5004 goto if1015_else2536 
    set $P5016, fb_tmp_209["quote_EXPR"]
    set $P5018, $P5016
    goto if1015_end2537
  if1015_else2536:
    null $P5017
    set $P5018, $P5017
  if1015_end2537:
    unless_null $P5018, vivi_10162539
    nqp_get_sc_object $P5019, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5018, $P5019
  vivi_10162539:
    set fb_tmp_208, $P5018
    repr_defined $I5003, fb_tmp_208
    unless $I5003 goto if1014_else2534 
    set $P5020, fb_tmp_208[0]
    set $P5022, $P5020
    goto if1014_end2535
  if1014_else2534:
    null $P5021
    set $P5022, $P5021
  if1014_end2535:
    unless_null $P5022, vivi_10172540
    nqp_get_sc_object $P5023, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5022, $P5023
  vivi_10172540:
    $P5024 = $P5022."ast"()
    $P5025 = $P5024."value"()
    set $P102, $P5025
    find_dynamic_lex $P5026, "%*RX"
    unless_null $P5026, fallback2541
    nqp_get_sc_object $P5028, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    get_who $P5027, $P5028
    set pkg_viv_tmp_14, $P5027
    set fb_tmp_210, pkg_viv_tmp_14
    repr_defined $I5005, fb_tmp_210
    unless $I5005 goto if1018_else2542 
    set $P5029, fb_tmp_210["%RX"]
    set $P5031, $P5029
    goto if1018_end2543
  if1018_else2542:
    null $P5030
    set $P5031, $P5030
  if1018_end2543:
    unless_null $P5031, vivi_10192544
    new $P5032, 'Hash'
    set pkg_viv_tmp_14["%RX"], $P5032
    set $P5031, $P5032
  vivi_10192544:
    unless_null $P5031, vivi_10202545
    die "Contextual %*RX not found"
    box $P5033, "Contextual %*RX not found"
    set $P5031, $P5033
  vivi_10202545:
    set $P5026, $P5031
  fallback2541:
    set $S5002, $P101
    set $P5026[$S5002], $P102
.annotate 'line', 859
    find_dynamic_lex $P5034, "$/"
    set $S5003, $P101
    iseq $I5006, $S5003, "dba"
    unless $I5006 goto if1021_else2546 
.annotate 'line', 860
    nqp_get_sc_object $P5035, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5036 = $P5035."new"("dba" :named("rxtype"), $P102 :named("name"))
    set $P5037, $P5036
    goto if1021_end2547
  if1021_else2546:
    box $P5038, 0
    set $P5037, $P5038
  if1021_end2547:
    $P5039 = $P5034."!make"($P5037)
    .return ($P5039) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_228_1361734134.987") :anon :lex :outer("cuid_167_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 867
    .lex "$n", $P101 
    .local pmc fb_tmp_211 
    .local pmc fb_tmp_212 
    .local pmc fb_tmp_213 
    .local pmc fb_tmp_214 
    .local pmc fb_tmp_215 
    .local pmc pkg_viv_tmp_15 
    .local pmc fb_tmp_216 
    .local pmc fb_tmp_217 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
    find_lex $P5002, "$/"
    unless_null $P5002, fallback2554
    nqp_get_sc_object $P5003, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5002, $P5003
  fallback2554:
    set fb_tmp_212, $P5002
    repr_defined $I5003, fb_tmp_212
    unless $I5003 goto if1024_else2552 
    set $P5004, fb_tmp_212["n"]
    set $P5006, $P5004
    goto if1024_end2553
  if1024_else2552:
    null $P5005
    set $P5006, $P5005
  if1024_end2553:
    unless_null $P5006, vivi_10252555
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_10252555:
    set fb_tmp_211, $P5006
    repr_defined $I5002, fb_tmp_211
    unless $I5002 goto if1023_else2550 
    set $P5008, fb_tmp_211[0]
    set $P5010, $P5008
    goto if1023_end2551
  if1023_else2550:
    null $P5009
    set $P5010, $P5009
  if1023_end2551:
    unless_null $P5010, vivi_10262556
    nqp_get_sc_object $P5011, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5010, $P5011
  vivi_10262556:
    set $S5001, $P5010
    isgt $I5001, $S5001, ""
    unless $I5001 goto if1022_else2548 
    find_lex $P5012, "$/"
    unless_null $P5012, fallback2561
    nqp_get_sc_object $P5013, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5012, $P5013
  fallback2561:
    set fb_tmp_214, $P5012
    repr_defined $I5005, fb_tmp_214
    unless $I5005 goto if1028_else2559 
    set $P5014, fb_tmp_214["n"]
    set $P5016, $P5014
    goto if1028_end2560
  if1028_else2559:
    null $P5015
    set $P5016, $P5015
  if1028_end2560:
    unless_null $P5016, vivi_10292562
    nqp_get_sc_object $P5017, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5016, $P5017
  vivi_10292562:
    set fb_tmp_213, $P5016
    repr_defined $I5004, fb_tmp_213
    unless $I5004 goto if1027_else2557 
    set $P5018, fb_tmp_213[0]
    set $P5020, $P5018
    goto if1027_end2558
  if1027_else2557:
    null $P5019
    set $P5020, $P5019
  if1027_end2558:
    unless_null $P5020, vivi_10302563
    nqp_get_sc_object $P5021, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5020, $P5021
  vivi_10302563:
    set $N5001, $P5020
    box $P5023, $N5001
    set $P5022, $P5023
    goto if1022_end2549
  if1022_else2548:
    box $P5024, 1
    set $P5022, $P5024
  if1022_end2549:
    set $P101, $P5022
    find_dynamic_lex $P5025, "%*RX"
    unless_null $P5025, fallback2564
    nqp_get_sc_object $P5027, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    get_who $P5026, $P5027
    set pkg_viv_tmp_15, $P5026
    set fb_tmp_215, pkg_viv_tmp_15
    repr_defined $I5006, fb_tmp_215
    unless $I5006 goto if1031_else2565 
    set $P5028, fb_tmp_215["%RX"]
    set $P5030, $P5028
    goto if1031_end2566
  if1031_else2565:
    null $P5029
    set $P5030, $P5029
  if1031_end2566:
    unless_null $P5030, vivi_10322567
    new $P5031, 'Hash'
    set pkg_viv_tmp_15["%RX"], $P5031
    set $P5030, $P5031
  vivi_10322567:
    unless_null $P5030, vivi_10332568
    die "Contextual %*RX not found"
    box $P5032, "Contextual %*RX not found"
    set $P5030, $P5032
  vivi_10332568:
    set $P5025, $P5030
  fallback2564:
    find_lex $P5033, "$/"
    unless_null $P5033, fallback2573
    nqp_get_sc_object $P5034, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5033, $P5034
  fallback2573:
    set fb_tmp_217, $P5033
    repr_defined $I5008, fb_tmp_217
    unless $I5008 goto if1035_else2571 
    set $P5035, fb_tmp_217["mod_ident"]
    set $P5037, $P5035
    goto if1035_end2572
  if1035_else2571:
    null $P5036
    set $P5037, $P5036
  if1035_end2572:
    unless_null $P5037, vivi_10362574
    nqp_get_sc_object $P5038, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5037, $P5038
  vivi_10362574:
    set fb_tmp_216, $P5037
    repr_defined $I5007, fb_tmp_216
    unless $I5007 goto if1034_else2569 
    set $P5039, fb_tmp_216["sym"]
    set $P5041, $P5039
    goto if1034_end2570
  if1034_else2569:
    null $P5040
    set $P5041, $P5040
  if1034_end2570:
    unless_null $P5041, vivi_10372575
    nqp_get_sc_object $P5042, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5041, $P5042
  vivi_10372575:
    set $S5002, $P5041
    set $P5025[$S5002], $P101
.annotate 'line', 870
    find_dynamic_lex $P5043, "$/"
    $P5044 = $P5043."!make"(0)
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "qbuildsub" :subid("cuid_168_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 881
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_2 :opt_flag 
    .param pmc _lex_param_3 :named("anon") :optional 
    .param int haz_param_3 :opt_flag 
    .param pmc _lex_param_4 :named("addself") :optional 
    .param int haz_param_4 :opt_flag 
    .param pmc _lex_param_5 :slurpy :named 
    .lex "$code_obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$qast", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$anon", _lex_param_3 
    .lex "$addself", _lex_param_4 
    .lex "%rest", _lex_param_5 
    .local pmc fb_tmp_218 
    .local pmc fb_tmp_219 
    .local pmc fb_tmp_220 
    .local pmc pkg_viv_tmp_16 
    .local pmc fb_tmp_221 
    .local pmc fb_tmp_222 
    .local pmc pkg_viv_tmp_17 
    .local pmc fb_tmp_223 
    .local pmc fb_tmp_224 
    .local pmc pkg_viv_tmp_18 
    if haz_param_2, default2613
    nqp_get_sc_object $P5073, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 103
    $P5074 = $P5073."new"()
    set _lex_param_2, $P5074
  default2613:
    if haz_param_3, default2614
    nqp_get_sc_object $P5075, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_3, $P5075
  default2614:
    if haz_param_4, default2615
    nqp_get_sc_object $P5076, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set _lex_param_4, $P5076
  default2615:
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
    exists $I5001, _lex_param_5["code_obj"]
    unless $I5001 goto if1038_else2576 
    set fb_tmp_218, _lex_param_5
    repr_defined $I5002, fb_tmp_218
    unless $I5002 goto if1039_else2578 
    set $P5002, fb_tmp_218["code_obj"]
    set $P5004, $P5002
    goto if1039_end2579
  if1039_else2578:
    null $P5003
    set $P5004, $P5003
  if1039_end2579:
    unless_null $P5004, vivi_10402580
    nqp_get_sc_object $P5005, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5004, $P5005
  vivi_10402580:
    set $P5008, $P5004
    goto if1038_end2577
  if1038_else2576:
.annotate 'line', 884
    nqp_decontainerize $P5006, _lex_param_0
    $P5007 = $P5006."create_regex_code_object"(_lex_param_2)
    set $P5008, $P5007
  if1038_end2577:
    set $P101, $P5008
    unless _lex_param_4 goto if1041_end2582 
.annotate 'line', 886
.annotate 'line', 887
    nqp_get_sc_object $P5009, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 71
    $P5010 = $P5009."new"("self" :named("name"), "local" :named("scope"), "param" :named("decl"))
    $P5011 = _lex_param_2."push"($P5010)
  if1041_end2582:
.annotate 'line', 889
    $P5012 = _lex_param_2."symbol"(utf8:"$\x{a2}")
    if $P5012 goto unless1042_end2584 
.annotate 'line', 890
    nqp_get_sc_object $P5013, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 71
    $P5014 = $P5013."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    _lex_param_2."push"($P5014)
.annotate 'line', 891
    $P5015 = _lex_param_2."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
  unless1042_end2584:
.annotate 'line', 894
    nqp_decontainerize $P5016, _lex_param_0
    $P5017 = "&capnames"(_lex_param_1, 0)
    $P5016."store_regex_caps"($P101, _lex_param_2, $P5017)
.annotate 'line', 895
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "5C3E4C1FCD8659050D16E0C0EEB21CECC0CE7086-1361734112.314", 3
    $P5020 = $P5019."new"()
    $P5021 = $P5020."addnode"(_lex_param_1)
    $P5018."store_regex_nfa"($P101, _lex_param_2, $P5021)
.annotate 'line', 896
    nqp_decontainerize $P5022, _lex_param_0
    $P5022."alt_nfas"($P101, _lex_param_2, _lex_param_1)
    set _lex_param_2["orig_qast"], _lex_param_1
.annotate 'line', 899
    nqp_get_sc_object $P5023, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
.annotate 'line', 900
    nqp_get_sc_object $P5024, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5025 = $P5024."new"("scan" :named("rxtype"))
    unless _lex_param_3 goto if1043_else2585 
.annotate 'line', 903
    nqp_get_sc_object $P5026, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    $P5027 = $P5026."new"("pass" :named("rxtype"))
    set $P5071, $P5027
    goto if1043_end2586
  if1043_else2585:
    find_dynamic_lex $P5028, "%*RX"
    unless_null $P5028, fallback2591
    nqp_get_sc_object $P5030, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    get_who $P5029, $P5030
    set pkg_viv_tmp_16, $P5029
    set fb_tmp_220, pkg_viv_tmp_16
    repr_defined $I5005, fb_tmp_220
    unless $I5005 goto if1046_else2592 
    set $P5031, fb_tmp_220["%RX"]
    set $P5033, $P5031
    goto if1046_end2593
  if1046_else2592:
    null $P5032
    set $P5033, $P5032
  if1046_end2593:
    unless_null $P5033, vivi_10472594
    new $P5034, 'Hash'
    set pkg_viv_tmp_16["%RX"], $P5034
    set $P5033, $P5034
  vivi_10472594:
    unless_null $P5033, vivi_10482595
    die "Contextual %*RX not found"
    box $P5035, "Contextual %*RX not found"
    set $P5033, $P5035
  vivi_10482595:
    set $P5028, $P5033
  fallback2591:
    set fb_tmp_219, $P5028
    repr_defined $I5004, fb_tmp_219
    unless $I5004 goto if1045_else2589 
    set $P5036, fb_tmp_219["name"]
    set $P5038, $P5036
    goto if1045_end2590
  if1045_else2589:
    null $P5037
    set $P5038, $P5037
  if1045_end2590:
    unless_null $P5038, vivi_10492596
    nqp_get_sc_object $P5039, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5038, $P5039
  vivi_10492596:
    set $S5002, $P5038
    substr $S5001, $S5002, 0, 12
    isne $I5003, $S5001, "!!LATENAME!!"
    unless $I5003 goto if1044_else2587 
.annotate 'line', 905
    nqp_get_sc_object $P5040, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    find_dynamic_lex $P5041, "%*RX"
    unless_null $P5041, fallback2599
    nqp_get_sc_object $P5043, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    get_who $P5042, $P5043
    set pkg_viv_tmp_17, $P5042
    set fb_tmp_222, pkg_viv_tmp_17
    repr_defined $I5007, fb_tmp_222
    unless $I5007 goto if1051_else2600 
    set $P5044, fb_tmp_222["%RX"]
    set $P5046, $P5044
    goto if1051_end2601
  if1051_else2600:
    null $P5045
    set $P5046, $P5045
  if1051_end2601:
    unless_null $P5046, vivi_10522602
    new $P5047, 'Hash'
    set pkg_viv_tmp_17["%RX"], $P5047
    set $P5046, $P5047
  vivi_10522602:
    unless_null $P5046, vivi_10532603
    die "Contextual %*RX not found"
    box $P5048, "Contextual %*RX not found"
    set $P5046, $P5048
  vivi_10532603:
    set $P5041, $P5046
  fallback2599:
    set fb_tmp_221, $P5041
    repr_defined $I5006, fb_tmp_221
    unless $I5006 goto if1050_else2597 
    set $P5049, fb_tmp_221["name"]
    set $P5051, $P5049
    goto if1050_end2598
  if1050_else2597:
    null $P5050
    set $P5051, $P5050
  if1050_end2598:
    unless_null $P5051, vivi_10542604
    nqp_get_sc_object $P5052, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5051, $P5052
  vivi_10542604:
    $P5053 = $P5040."new"("pass" :named("rxtype"), $P5051 :named("name"))
    set $P5070, $P5053
    goto if1044_end2588
  if1044_else2587:
.annotate 'line', 906
    nqp_get_sc_object $P5054, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
.annotate 'line', 907
    nqp_get_sc_object $P5055, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 71
    find_dynamic_lex $P5056, "%*RX"
    unless_null $P5056, fallback2607
    nqp_get_sc_object $P5058, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    get_who $P5057, $P5058
    set pkg_viv_tmp_18, $P5057
    set fb_tmp_224, pkg_viv_tmp_18
    repr_defined $I5009, fb_tmp_224
    unless $I5009 goto if1056_else2608 
    set $P5059, fb_tmp_224["%RX"]
    set $P5061, $P5059
    goto if1056_end2609
  if1056_else2608:
    null $P5060
    set $P5061, $P5060
  if1056_end2609:
    unless_null $P5061, vivi_10572610
    new $P5062, 'Hash'
    set pkg_viv_tmp_18["%RX"], $P5062
    set $P5061, $P5062
  vivi_10572610:
    unless_null $P5061, vivi_10582611
    die "Contextual %*RX not found"
    box $P5063, "Contextual %*RX not found"
    set $P5061, $P5063
  vivi_10582611:
    set $P5056, $P5061
  fallback2607:
    set fb_tmp_223, $P5056
    repr_defined $I5008, fb_tmp_223
    unless $I5008 goto if1055_else2605 
    set $P5064, fb_tmp_223["name"]
    set $P5066, $P5064
    goto if1055_end2606
  if1055_else2605:
    null $P5065
    set $P5066, $P5065
  if1055_end2606:
    unless_null $P5066, vivi_10592612
    nqp_get_sc_object $P5067, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5066, $P5067
  vivi_10592612:
    set $S5004, $P5066
    substr $S5003, $S5004, 12
    $P5068 = $P5055."new"($S5003 :named("name"), "lexical" :named("scope"))
    $P5069 = $P5054."new"($P5068, "pass" :named("rxtype"))
    set $P5070, $P5069
  if1044_end2588:
    set $P5071, $P5070
  if1043_end2586:
    $P5072 = $P5023."new"($P5025, _lex_param_1, $P5071, "concat" :named("rxtype"))
    set _lex_param_1, $P5072
.annotate 'line', 913
    _lex_param_2."push"(_lex_param_1)
    .return (_lex_param_2) 
.end
.HLL "nqp"
.namespace []
.sub "alt_nfas" :subid("cuid_169_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 968
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5021 = 'cuid_230_1361734134.987' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_231_1361734134.987' 
    capture_lex $P5021 
    .lex "$rxtype", $P101 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$ast", _lex_param_3 
    .local pmc fb_tmp_225 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P101, $P5001
.annotate 'line', 969
    $P5002 = _lex_param_3."rxtype"()
    set $P101, $P5002
    set $S5001, $P101
    iseq $I5001, $S5001, "alt"
    unless $I5001 goto if1060_else2616 
    .const 'Sub' $P5003 = 'cuid_230_1361734134.987' 
    capture_lex $P5003
    $P5004 = $P5003()
    set $P5020, $P5004
    goto if1060_end2617
  if1060_else2616:
    set $S5002, $P101
    iseq $I5002, $S5002, "subcapture"
    set $I5004, $I5002
    if $I5002 goto unless1062_end2624 
    set $S5003, $P101
    iseq $I5003, $S5003, "quant"
    set $I5004, $I5003
  unless1062_end2624:
    unless $I5004 goto if1061_else2621 
.annotate 'line', 979
.annotate 'line', 980
    nqp_decontainerize $P5005, _lex_param_0
    set fb_tmp_225, _lex_param_3
    repr_defined $I5005, fb_tmp_225
    unless $I5005 goto if1063_else2625 
    set $P5006, fb_tmp_225[0]
    set $P5008, $P5006
    goto if1063_end2626
  if1063_else2625:
    null $P5007
    set $P5008, $P5007
  if1063_end2626:
    unless_null $P5008, vivi_10642627
    nqp_get_sc_object $P5009, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5008, $P5009
  vivi_10642627:
    $P5010 = $P5005."alt_nfas"(_lex_param_1, _lex_param_2, $P5008)
    set $P5019, $P5010
    goto if1061_end2622
  if1061_else2621:
    set $S5004, $P101
    iseq $I5006, $S5004, "concat"
    set $I5008, $I5006
    if $I5006 goto unless1068_end2635 
    set $S5005, $P101
    iseq $I5007, $S5005, "altseq"
    set $I5008, $I5007
  unless1068_end2635:
    set $I5010, $I5008
    if $I5008 goto unless1067_end2633 
    set $S5006, $P101
    iseq $I5009, $S5006, "conj"
    set $I5010, $I5009
  unless1067_end2633:
    set $I5012, $I5010
    if $I5010 goto unless1066_end2631 
    set $S5007, $P101
    iseq $I5011, $S5007, "conjseq"
    set $I5012, $I5011
  unless1066_end2631:
    box $P5018, $I5012
    set $P5017, $P5018
    unless $I5012 goto if1065_end2629 
.annotate 'line', 982
.annotate 'line', 983
    $P5014 = _lex_param_3."list"()
    set $P5011, $P5014
    iter $P5013, $P5014
  for_next2636:
    unless $P5013, for_done2638
    shift $P5016, $P5013
  for_redo2637:
    .const 'Sub' $P5015 = 'cuid_231_1361734134.987' 
    capture_lex $P5015
    $P5011 = $P5015($P5016)
    goto for_next2636
  for_done2638:
    set $P5017, $P5011
  if1065_end2629:
    set $P5019, $P5017
  if1061_end2622:
    set $P5020, $P5019
  if1060_end2617:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_230_1361734134.987") :anon :lex :outer("cuid_169_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 970
    .const 'Sub' $P5019 = 'cuid_229_1361734134.987' 
    capture_lex $P5019 
    .lex "@alternatives", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 972
    find_lex $P5005, "$ast"
    $P5006 = $P5005."list"()
    set $P5002, $P5006
    iter $P5004, $P5006
  for_next2618:
    unless $P5004, for_done2620
    shift $P5008, $P5004
  for_redo2619:
    .const 'Sub' $P5007 = 'cuid_229_1361734134.987' 
    capture_lex $P5007
    $P5002 = $P5007($P5008)
    goto for_next2618
  for_done2620:
.annotate 'line', 976
    find_lex $P5009, "$ast"
    nqp_get_sc_object $P5010, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 12
    $P5011 = $P5010."unique"("alt_nfa_")
    set $S5003, $P5011
    concat $S5002, $S5003, "_"
    time $N5001
    set $S5004, $N5001
    concat $S5001, $S5002, $S5004
    $P5009."name"($S5001)
.annotate 'line', 977
    find_lex $P5013, "self"
    nqp_decontainerize $P5012, $P5013
    find_lex $P5014, "$code_obj"
    find_lex $P5015, "$block"
    find_lex $P5016, "$ast"
    $P5017 = $P5016."name"()
    $P5018 = $P5012."store_regex_alt_nfa"($P5014, $P5015, $P5017, $P101)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_229_1361734134.987") :anon :lex :outer("cuid_230_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 972
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 973
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$code_obj"
    find_lex $P5004, "$block"
    $P5001."alt_nfas"($P5003, $P5004, _lex_param_0)
    find_lex $P5005, "@alternatives"
.annotate 'line', 974
    nqp_get_sc_object $P5006, "5C3E4C1FCD8659050D16E0C0EEB21CECC0CE7086-1361734112.314", 3
    $P5007 = $P5006."new"()
    $P5008 = $P5007."addnode"(_lex_param_0)
    push $P5005, $P5008
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_231_1361734134.987") :anon :lex :outer("cuid_169_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 983
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$code_obj"
    find_lex $P5004, "$block"
    $P5005 = $P5001."alt_nfas"($P5003, $P5004, _lex_param_0)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "subrule_alias" :subid("cuid_170_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 987
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "self", _lex_param_0 
    .lex "$ast", _lex_param_1 
    .lex "$name", _lex_param_2 
.annotate 'line', 988
    $P5001 = _lex_param_1."name"()
    set $S5001, $P5001
    isgt $I5001, $S5001, ""
    unless $I5001 goto if1069_else2639 
    set $S5004, _lex_param_2
    concat $S5003, $S5004, "="
    $P5002 = _lex_param_1."name"()
    set $S5005, $P5002
    concat $S5002, $S5003, $S5005
    $P5003 = _lex_param_1."name"($S5002)
    goto if1069_end2640
  if1069_else2639:
.annotate 'line', 989
    $P5004 = _lex_param_1."name"(_lex_param_2)
  if1069_end2640:
.annotate 'line', 990
    $P5005 = _lex_param_1."subtype"("capture")
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "flip_ast" :subid("cuid_171_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 993
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5020 = 'cuid_232_1361734134.987' 
    capture_lex $P5020 
    .const 'Sub' $P5020 = 'cuid_233_1361734134.987' 
    capture_lex $P5020 
    .lex "self", _lex_param_0 
    .lex "$qast", _lex_param_1 
    .local pmc fb_tmp_226 
    root_new $P101, ['parrot';'Continuation']
    set_label $P101, lexotic_2641
    .lex "RETURN", $P101
    nqp_get_sc_object $P5001, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609", 34
    type_check $I5001, _lex_param_1, $P5001
    if $I5001 goto unless1070_end2644 
    find_lex $P5002, "RETURN"
    $P5003 = $P5002(_lex_param_1)
  unless1070_end2644:
.annotate 'line', 995
    $P5004 = _lex_param_1."rxtype"()
    set $S5001, $P5004
    iseq $I5002, $S5001, "literal"
    unless $I5002 goto if1071_else2645 
.annotate 'line', 996
    set fb_tmp_226, _lex_param_1
    repr_defined $I5003, fb_tmp_226
    unless $I5003 goto if1072_else2647 
    set $P5005, fb_tmp_226[0]
    set $P5007, $P5005
    goto if1072_end2648
  if1072_else2647:
    null $P5006
    set $P5007, $P5006
  if1072_end2648:
    unless_null $P5007, vivi_10732649
    nqp_get_sc_object $P5008, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5007, $P5008
  vivi_10732649:
    $P5009 = $P5007."reverse"()
    set _lex_param_1[0], $P5009
    goto if1071_end2646
  if1071_else2645:
.annotate 'line', 998
    $P5010 = _lex_param_1."rxtype"()
    set $S5002, $P5010
    iseq $I5004, $S5002, "concat"
    unless $I5004 goto if1074_else2650 
    .const 'Sub' $P5011 = 'cuid_232_1361734134.987' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5019, $P5012
    goto if1074_end2651
  if1074_else2650:
.annotate 'line', 1003
    $P5016 = _lex_param_1."list"()
    set $P5013, $P5016
    iter $P5015, $P5016
  for_next2662:
    unless $P5015, for_done2664
    shift $P5018, $P5015
  for_redo2663:
    .const 'Sub' $P5017 = 'cuid_233_1361734134.987' 
    capture_lex $P5017
    $P5013 = $P5017($P5018)
    goto for_next2662
  for_done2664:
    set $P5019, $P5013
  if1074_end2651:
  if1071_end2646:
    goto lexotic_2642
  lexotic_2641:
    .get_results (_lex_param_1)
  lexotic_2642:
    .return (_lex_param_1) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_232_1361734134.987") :anon :lex :outer("cuid_171_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 998
    .lex "@tmp", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
  while1075_test2652:
    find_lex $P5002, "$qast"
    $P5003 = $P5002."list"()
    set $N5001, $P5003
    box $P5009, $N5001
    set $P5008, $P5009
    unless $N5001 goto while1075_done2656 
  while1075_redo2654:
.annotate 'line', 1000
    find_lex $P5004, "$qast"
    $P5005 = $P5004."list"()
    $P5006 = $P5005."shift"()
    $P5007 = $P101."push"($P5006)
    set $P5008, $P5007
    goto while1075_test2652 
  while1075_done2656:
  while1076_test2657:
    set $P5017, $P101
    unless $P101 goto while1076_done2661 
  while1076_redo2659:
.annotate 'line', 1001
    find_lex $P5010, "$qast"
    $P5011 = $P5010."list"()
    find_lex $P5013, "self"
    nqp_decontainerize $P5012, $P5013
    $P5014 = $P101."pop"()
    $P5015 = $P5012."flip_ast"($P5014)
    $P5016 = $P5011."push"($P5015)
    set $P5017, $P5016
    goto while1076_test2657 
  while1076_done2661:
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_233_1361734134.987") :anon :lex :outer("cuid_171_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 1004
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    $P5003 = $P5001."flip_ast"(_lex_param_0)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "create_regex_code_object" :subid("cuid_172_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 1011
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    .local pmc fb_tmp_227 
.annotate 'line', 1012
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback2665
    nqp_get_sc_object $P5003, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    get_who $P5002, $P5003
    set fb_tmp_227, $P5002
    repr_defined $I5001, fb_tmp_227
    unless $I5001 goto if1077_else2666 
    set $P5004, fb_tmp_227["$W"]
    set $P5006, $P5004
    goto if1077_end2667
  if1077_else2666:
    null $P5005
    set $P5006, $P5005
  if1077_end2667:
    unless_null $P5006, vivi_10782668
    nqp_get_sc_object $P5007, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    set $P5006, $P5007
  vivi_10782668:
    unless_null $P5006, vivi_10792669
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5006, $P5008
  vivi_10792669:
    set $P5001, $P5006
  fallback2665:
    $P5009 = _lex_param_1."name"()
    $P5010 = $P5001."create_code"(_lex_param_1, $P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_caps" :subid("cuid_173_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 1016
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "%caps", _lex_param_3 
.annotate 'line', 1017
    $P5001 = _lex_param_1."SET_CAPS"(_lex_param_3)
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_nfa" :subid("cuid_174_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 1021
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$nfa", _lex_param_3 
.annotate 'line', 1022
    $P5001 = _lex_param_3."save"()
    $P5002 = _lex_param_1."SET_NFA"($P5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_alt_nfa" :subid("cuid_175_1361734134.987") :anon :lex :outer("cuid_196_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 1026
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .const 'Sub' $P5008 = 'cuid_234_1361734134.987' 
    capture_lex $P5008 
    .lex "@saved", $P101 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$key", _lex_param_3 
    .lex "@alternatives", _lex_param_4 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    set $P5002, _lex_param_4
    iter $P5004, _lex_param_4
  for_next2670:
    unless $P5004, for_done2672
    shift $P5006, $P5004
  for_redo2671:
    .const 'Sub' $P5005 = 'cuid_234_1361734134.987' 
    capture_lex $P5005
    $P5002 = $P5005($P5006)
    goto for_next2670
  for_done2672:
.annotate 'line', 1031
    $P5007 = _lex_param_1."SET_ALT_NFA"(_lex_param_3, $P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_234_1361734134.987") :anon :lex :outer("cuid_175_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 1028
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1029
    find_lex $P5001, "@saved"
    $P5002 = _lex_param_0."save"(1 :named("non_empty"))
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_235_1361734134.987") :anon :lex :outer("cuid_177_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 1036
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    nqp_get_sc_object $P5001, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676", 25
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_237_1361734134.987") :load :init
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .const 'Sub' $P5001 = 'cuid_236_1361734134.987' 
    capture_lex $P5001 
    .local pmc cur_sc 
    .local pmc conflicts 
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P5001
    get_class $P5002, "LexPad"
    get_class $P5003, "NQPLexPad"
    $P5004 = $P5001."hll_map"($P5002, $P5003)
    load_bytecode "ModuleLoader.pbc"
    .const 'Sub' $P5001 = "cuid_177_1361734134.987" 
    get_hll_global $P5002, "ModuleLoader"
    $P5003 = $P5002."load_setting"("NQPCORE")
    $P5004 = $P5001."set_outer_ctx"($P5003)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPHLL")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QAST")
    nqp_create_sc $P5001, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011"
    set cur_sc, $P5001
    $P5002 = cur_sc."set_description"("src\\stage2\\gen\\NQPP6QRegex.pm")
    new $P5003, 'ResizablePMCArray'
    set conflicts, $P5003
    new $P5004, 'ResizableStringArray'
    null $S5001
    push $P5004, $S5001
    push $P5004, "P6opaque"
    push $P5004, "QAST"
    push $P5004, "QRegex"
    push $P5004, "NQPCursorRole"
    push $P5004, "5C3E4C1FCD8659050D16E0C0EEB21CECC0CE7086-1361734112.314"
    push $P5004, "src\\stage2\\QRegex.nqp"
    push $P5004, "NQPMatch"
    push $P5004, "NQPCursor"
    push $P5004, "NQPRegexMethod"
    push $P5004, "NQPRegex"
    push $P5004, "HLL"
    push $P5004, "PIRT"
    push $P5004, "DEFAULT"
    push $P5004, "CREATE"
    push $P5004, "1257622A8BE01376CD78513B390E6A7986C55701-1361734108.676"
    push $P5004, "src\\stage2\\NQPCORE.setting"
    push $P5004, "bless"
    push $P5004, "BUILDALL"
    push $P5004, "new"
    push $P5004, "Str"
    push $P5004, "Numeric"
    push $P5004, "Int"
    push $P5004, "defined"
    push $P5004, "ACCEPTS"
    push $P5004, "isa"
    push $P5004, "__dump"
    push $P5004, "BUILD"
    push $P5004, "F31909CE26533F17A86F2092D09E004F0E94FA0C-1361734116.632"
    push $P5004, "src\\stage2\\gen\\NQPHLL.pm"
    push $P5004, "slot_for_object"
    push $P5004, "add_object"
    push $P5004, "add_root_code_ref"
    push $P5004, "update_root_code_ref"
    push $P5004, "is_precompilation_mode"
    push $P5004, "add_load_dependency_task"
    push $P5004, "add_fixup_task"
    push $P5004, "sc"
    push $P5004, "handle"
    push $P5004, "code_ref_blocks"
    push $P5004, "load_dependency_tasks"
    push $P5004, "fixup_tasks"
    push $P5004, "create_code"
    push $P5004, "$!sc"
    push $P5004, "$!handle"
    push $P5004, "$!precomp_mode"
    push $P5004, "$!num_code_refs"
    push $P5004, "$!code_ref_blocks"
    push $P5004, "@!load_dependency_tasks"
    push $P5004, "@!fixup_tasks"
    push $P5004, "%!addr_to_slot"
    push $P5004, "MATCH"
    push $P5004, "Bool"
    push $P5004, "parse"
    push $P5004, "!INTERPOLATE"
    push $P5004, "!INTERPOLATE_REGEX"
    push $P5004, "orig"
    push $P5004, "target"
    push $P5004, "from"
    push $P5004, "pos"
    push $P5004, "CAPHASH"
    push $P5004, "!cursor_init"
    push $P5004, "!cursor_start_all"
    push $P5004, "!cursor_start_cur"
    push $P5004, "!cursor_start_subcapture"
    push $P5004, "!cursor_capture"
    push $P5004, "!cursor_push_cstack"
    push $P5004, "!cursor_pass"
    push $P5004, "!cursor_fail"
    push $P5004, "!cursor_pos"
    push $P5004, "!cursor_next"
    push $P5004, "!cursor_more"
    push $P5004, "!reduce"
    push $P5004, "!reduce_with_match"
    push $P5004, "!shared"
    push $P5004, "!protoregex"
    push $P5004, "!protoregex_nfa"
    push $P5004, "!protoregex_table"
    push $P5004, "!alt"
    push $P5004, "!alt_nfa"
    push $P5004, "!precompute_nfas"
    push $P5004, "!dba"
    push $P5004, "!highwater"
    push $P5004, "!highexpect"
    push $P5004, "!fresh_highexpect"
    push $P5004, "!set_highexpect"
    push $P5004, "!clear_highwater"
    push $P5004, "!BACKREF"
    push $P5004, "!LITERAL"
    push $P5004, "at"
    push $P5004, "before"
    push $P5004, "after"
    push $P5004, "ws"
    push $P5004, "ww"
    push $P5004, "wb"
    push $P5004, "ident"
    push $P5004, "alpha"
    push $P5004, "alnum"
    push $P5004, "upper"
    push $P5004, "lower"
    push $P5004, "digit"
    push $P5004, "xdigit"
    push $P5004, "space"
    push $P5004, "blank"
    push $P5004, "cntrl"
    push $P5004, "punct"
    push $P5004, "FAILGOAL"
    push $P5004, "throw_unrecog_backslash_seq"
    push $P5004, "termish"
    push $P5004, "term"
    push $P5004, "infix"
    push $P5004, "prefix"
    push $P5004, "postfix"
    push $P5004, "circumfix"
    push $P5004, "postcircumfix"
    push $P5004, "term:sym<circumfix>"
    push $P5004, "infixish"
    push $P5004, "prefixish"
    push $P5004, "postfixish"
    push $P5004, "nullterm"
    push $P5004, "nullterm_alt"
    push $P5004, "nulltermish"
    push $P5004, "quote_delimited"
    push $P5004, "quote_atom"
    push $P5004, "decint"
    push $P5004, "decints"
    push $P5004, "hexint"
    push $P5004, "hexints"
    push $P5004, "octint"
    push $P5004, "octints"
    push $P5004, "binint"
    push $P5004, "binints"
    push $P5004, "integer"
    push $P5004, "dec_number"
    push $P5004, "escale"
    push $P5004, "quote_escape"
    push $P5004, "quote_escape:sym<backslash>"
    push $P5004, "quote_escape:sym<stopper>"
    push $P5004, "quote_escape:sym<bs>"
    push $P5004, "quote_escape:sym<nl>"
    push $P5004, "quote_escape:sym<cr>"
    push $P5004, "quote_escape:sym<tab>"
    push $P5004, "quote_escape:sym<ff>"
    push $P5004, "quote_escape:sym<esc>"
    push $P5004, "quote_escape:sym<hex>"
    push $P5004, "quote_escape:sym<oct>"
    push $P5004, "quote_escape:sym<chr>"
    push $P5004, "quote_escape:sym<0>"
    push $P5004, "quote_escape:sym<misc>"
    push $P5004, "charname"
    push $P5004, "charnames"
    push $P5004, "charspec"
    push $P5004, "O"
    push $P5004, "panic"
    push $P5004, "peek_delimiters"
    push $P5004, "quote_EXPR"
    push $P5004, "quotemod_check"
    push $P5004, "starter"
    push $P5004, "stopper"
    push $P5004, "split_words"
    push $P5004, "EXPR"
    push $P5004, "EXPR_reduce"
    push $P5004, "EXPR_nonassoc"
    push $P5004, "ternary"
    push $P5004, "MARKER"
    push $P5004, "MARKED"
    push $P5004, "LANG"
    push $P5004, "obs"
    push $P5004, "throw_unrecognized_metachar"
    push $P5004, "throw_null_pattern"
    push $P5004, "normspace"
    push $P5004, "identifier"
    push $P5004, "arg"
    push $P5004, "arglist"
    push $P5004, "TOP"
    push $P5004, "nibbler"
    push $P5004, "infixstopper"
    push $P5004, "rxstopper"
    push $P5004, "termaltseq"
    push $P5004, "termconjseq"
    push $P5004, "termalt"
    push $P5004, "termconj"
    push $P5004, "quantified_atom"
    push $P5004, "separator"
    push $P5004, "atom"
    push $P5004, "quantifier"
    push $P5004, "quantifier:sym<*>"
    push $P5004, "quantifier:sym<+>"
    push $P5004, "quantifier:sym<?>"
    push $P5004, "quantifier:sym<{N,M}>"
    push $P5004, "quantifier:sym<**>"
    push $P5004, "backmod"
    push $P5004, "metachar"
    push $P5004, "metachar:sym<ws>"
    push $P5004, "metachar:sym<[ ]>"
    push $P5004, "metachar:sym<( )>"
    push $P5004, "metachar:sym<'>"
    push $P5004, "metachar:sym<\">"
    push $P5004, "metachar:sym<.>"
    push $P5004, "metachar:sym<^>"
    push $P5004, "metachar:sym<^^>"
    push $P5004, "metachar:sym<$>"
    push $P5004, "metachar:sym<$$>"
    push $P5004, "metachar:sym<:::>"
    push $P5004, "metachar:sym<::>"
    push $P5004, "metachar:sym<lwb>"
    push $P5004, "metachar:sym<rwb>"
    push $P5004, "metachar:sym<from>"
    push $P5004, "metachar:sym<to>"
    push $P5004, "metachar:sym<bs>"
    push $P5004, "metachar:sym<mod>"
    push $P5004, "metachar:sym<quantifier>"
    push $P5004, "metachar:sym<~>"
    push $P5004, "metachar:sym<{*}>"
    push $P5004, "metachar:sym<assert>"
    push $P5004, "sigil"
    push $P5004, "metachar:sym<var>"
    push $P5004, "backslash"
    push $P5004, "backslash:sym<s>"
    push $P5004, "backslash:sym<b>"
    push $P5004, "backslash:sym<e>"
    push $P5004, "backslash:sym<f>"
    push $P5004, "backslash:sym<h>"
    push $P5004, "backslash:sym<r>"
    push $P5004, "backslash:sym<t>"
    push $P5004, "backslash:sym<v>"
    push $P5004, "backslash:sym<o>"
    push $P5004, "backslash:sym<x>"
    push $P5004, "backslash:sym<c>"
    push $P5004, "backslash:sym<A>"
    push $P5004, "backslash:sym<z>"
    push $P5004, "backslash:sym<Z>"
    push $P5004, "backslash:sym<Q>"
    push $P5004, "backslash:sym<unrec>"
    push $P5004, "backslash:sym<misc>"
    push $P5004, "assertion"
    push $P5004, "assertion:sym<?>"
    push $P5004, "assertion:sym<!>"
    push $P5004, "assertion:sym<|>"
    push $P5004, "assertion:sym<method>"
    push $P5004, "assertion:sym<name>"
    push $P5004, "assertion:sym<[>"
    push $P5004, "cclass_elem"
    push $P5004, "mod_internal"
    push $P5004, "mod_ident"
    push $P5004, "mod_ident:sym<ignorecase>"
    push $P5004, "mod_ident:sym<ratchet>"
    push $P5004, "mod_ident:sym<sigspace>"
    push $P5004, "mod_ident:sym<dba>"
    push $P5004, "mod_ident:sym<oops>"
    push $P5004, "$!shared"
    push $P5004, "$!from"
    push $P5004, "$!pos"
    push $P5004, "$!match"
    push $P5004, "$!name"
    push $P5004, "$!bstack"
    push $P5004, "$!cstack"
    push $P5004, "$!regexsub"
    push $P5004, "$!restart"
    push $P5004, "ints_to_string"
    push $P5004, "CTXSAVE"
    push $P5004, "SET_BLOCK_OUTER_CTX"
    push $P5004, "qbuildsub"
    push $P5004, "alt_nfas"
    push $P5004, "subrule_alias"
    push $P5004, "flip_ast"
    push $P5004, "create_regex_code_object"
    push $P5004, "store_regex_caps"
    push $P5004, "store_regex_nfa"
    push $P5004, "store_regex_alt_nfa"
    push $P5004, "language"
    push $P5004, "compiler"
    push $P5004, "config"
    push $P5004, "load_module"
    push $P5004, "autoprint"
    push $P5004, "interactive"
    push $P5004, "interactive_result"
    push $P5004, "interactive_exception"
    push $P5004, "eval"
    push $P5004, "ctxsave"
    push $P5004, "stages"
    push $P5004, "parsegrammar"
    push $P5004, "parseactions"
    push $P5004, "interactive_banner"
    push $P5004, "interactive_prompt"
    push $P5004, "compiler_progname"
    push $P5004, "commandline_options"
    push $P5004, "command_line"
    push $P5004, "command_eval"
    push $P5004, "process_args"
    push $P5004, "evalfiles"
    push $P5004, "compile"
    push $P5004, "start"
    push $P5004, "past"
    push $P5004, "post"
    push $P5004, "pirbegin"
    push $P5004, "pir"
    push $P5004, "evalpmc"
    push $P5004, "dumper"
    push $P5004, "usage"
    push $P5004, "version"
    push $P5004, "show-config"
    push $P5004, "verbose-config"
    push $P5004, "vmstat"
    push $P5004, "nqpevent"
    push $P5004, "removestage"
    push $P5004, "addstage"
    push $P5004, "parse_name"
    push $P5004, "lineof"
    push $P5004, "user-progname"
    push $P5004, "cli-options"
    push $P5004, "cli-arguments"
    push $P5004, "@!stages"
    push $P5004, "$!parsegrammar"
    push $P5004, "$!parseactions"
    push $P5004, "@!cmdoptions"
    push $P5004, "$!usage"
    push $P5004, "$!compiler_progname"
    push $P5004, "$!language"
    push $P5004, "%!config"
    push $P5004, "$!user_progname"
    push $P5004, "@!cli-arguments"
    push $P5004, "%!cli-options"
    push $P5004, ""
    push $P5004, "alt_nfa__1_1361734135.136"
    push $P5004, "alt_nfa__2_1361734135.142"
    push $P5004, "val"
    push $P5004, "'"
    push $P5004, "\""
    push $P5004, "alt_nfa__3_1361734135.165"
    push $P5004, "0"
    push $P5004, "alt_nfa__4_1361734135.241"
    push $P5004, ">"
    push $P5004, "alt_nfa__5_1361734135.26"
    push $P5004, "|"
    push $P5004, "&"
    push $P5004, "noun"
    push $P5004, "&|~"
    push $P5004, "alt_nfa__6_1361734135.326"
    push $P5004, "alt_nfa__7_1361734135.352"
    push $P5004, "septype"
    push $P5004, "alt_nfa__8_1361734135.372"
    push $P5004, "sym"
    push $P5004, "1"
    push $P5004, "2"
    push $P5004, "min"
    push $P5004, "max"
    push $P5004, "alt_nfa__9_1361734135.443"
    push $P5004, "alt_nfa__10_1361734135.517"
    push $P5004, "alt_nfa__11_1361734135.524"
    push $P5004, "GOAL"
    push $P5004, "key"
    push $P5004, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5004, "$@%&"
    push $P5004, "name"
    push $P5004, "alt_nfa__12_1361734135.611"
    push $P5004, "dDnNsSwW"
    push $P5004, "bB"
    push $P5004, "eE"
    push $P5004, "fF"
    push $P5004, "hH"
    push $P5004, "rR"
    push $P5004, "tT"
    push $P5004, "vV"
    push $P5004, "oO"
    push $P5004, "alt_nfa__13_1361734135.673"
    push $P5004, "xX"
    push $P5004, "alt_nfa__14_1361734135.685"
    push $P5004, "cC"
    push $P5004, "alt_nfa__15_1361734135.754"
    push $P5004, "alt_nfa__16_1361734135.764"
    push $P5004, "longname"
    push $P5004, "alt_nfa__17_1361734135.796"
    push $P5004, "alt_nfa__18_1361734135.804"
    push $P5004, "sign"
    push $P5004, "invert"
    push $P5004, "uniprop"
    push $P5004, "alt_nfa__19_1361734135.966"
    push $P5004, "alt_nfa__20_1361734135.967"
    push $P5004, "alt_nfa__21_1361734135.967"
    push $P5004, "n"
    push $P5004, "alt_nfa__23_1361734135.995"
    push $P5004, "alt_nfa__24_1361734135.995"
    push $P5004, "alt_nfa__22_1361734135.974"
    push $P5004, "__6MODEL_CORE__"
    push $P5004, "GLOBALish"
    push $P5004, "EXPORT"
    push $P5004, "5E1A9226ADF1F89B3A6172DD75C456ECBCF40100-1361734105.006"
    push $P5004, "src\\stage2\\gen\\nqp-mo.pm"
    push $P5004, "QRegex::P6Regex::World"
    push $P5004, "QRegex::P6Regex::Grammar"
    push $P5004, "alt_nfa__1_1361734116.737"
    push $P5004, "alt_nfa__2_1361734116.769"
    push $P5004, "alt_nfa__3_1361734116.841"
    push $P5004, "alt_nfa__4_1361734116.841"
    push $P5004, "alt_nfa__5_1361734116.864"
    push $P5004, "alt_nfa__6_1361734116.941"
    push $P5004, "alt_nfa__7_1361734116.954"
    push $P5004, "alt_nfa__8_1361734116.993"
    push $P5004, "alt_nfa__9_1361734117.033"
    push $P5004, "shared"
    push $P5004, "match"
    push $P5004, "bstack"
    push $P5004, "cstack"
    push $P5004, "regexsub"
    push $P5004, "restart"
    push $P5004, "QRegex::P6Regex::Actions"
    push $P5004, "QRegex::P6Regex::Compiler"
    push $P5004, "CompileTimeValue"
    push $P5004, "8690B5CE9C56656BB436D83B9433E5C60A9D8366-1361734110.609"
    push $P5004, "src\\stage2\\QASTNode.nqp"
    push $P5004, "SpecialArg"
    push $P5004, "Node"
    push $P5004, "Regex"
    push $P5004, "IVal"
    push $P5004, "NVal"
    push $P5004, "SVal"
    push $P5004, "BVal"
    push $P5004, "WVal"
    push $P5004, "Want"
    push $P5004, "Var"
    push $P5004, "VarWithFallback"
    push $P5004, "Op"
    push $P5004, "VM"
    push $P5004, "Stmts"
    push $P5004, "Stmt"
    push $P5004, "Block"
    push $P5004, "Unquote"
    push $P5004, "CompUnit"
    push $P5004, "InlinePlaceholder"
    push $P5004, "Operations"
    push $P5004, "8401C578AB7B881D927A9D59824BE7FD2532AA0E-1361734121.453"
    push $P5004, "src\\stage2\\QAST.nqp"
    push $P5004, "Compiler"
    push $P5004, "NFA"
    push $P5004, "P6Regex"
    push $P5004, "Grammar"
    push $P5004, "Actions"
    push $P5004, "CommandLine"
    push $P5004, "World"
    push $P5004, "CallResult"
    push $P5004, "Sub"
    push $P5004, "Ops"
    push $P5004, "Label"
    push $P5004, "01234567"
    push $P5004, "0123456789abcdefABCDEF"
    push $P5004, "?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    push $P5004, "01"
    push $P5004, "Ee"
    .const 'Sub' $P5005 = 'cuid_236_1361734134.987' 
    capture_lex $P5005
    $P5006 = $P5005()
    nqp_deserialize_sc "", cur_sc, $P5004, $P5006, conflicts
    unless conflicts goto if1081_end2676 
    die "Repossession conflicts occurred during deserialization"
  if1081_end2676:
    .const "LexInfo" $P5001 = "cuid_177_1361734134.987"
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    $P5001."set_static_lexpad_value"("GLOBALish", $P5002)
    .const "LexInfo" $P5003 = "cuid_177_1361734134.987"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_177_1361734134.987"
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 0
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_177_1361734134.987"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_177_1361734134.987"
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 1
    $P5001."set_static_lexpad_value"("EXPORT", $P5002)
    .const "LexInfo" $P5003 = "cuid_177_1361734134.987"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_177_1361734134.987"
    nqp_get_sc_object $P5002, "5C3E4C1FCD8659050D16E0C0EEB21CECC0CE7086-1361734112.314", 32
    $P5001."set_static_lexpad_value"("ParseShared", $P5002)
    .const "LexInfo" $P5003 = "cuid_177_1361734134.987"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_177_1361734134.987"
    nqp_get_sc_object $P5002, "5C3E4C1FCD8659050D16E0C0EEB21CECC0CE7086-1361734112.314", 33
    $P5001."set_static_lexpad_value"("NQPCursorRole", $P5002)
    .const "LexInfo" $P5003 = "cuid_177_1361734134.987"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_1_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 4
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_179_1361734134.987"
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 3
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_179_1361734134.987"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_179_1361734134.987"
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 3
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_179_1361734134.987"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_2_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 6
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_3_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 7
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_4_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 8
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_5_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 9
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_6_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 10
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_7_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 11
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_8_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 12
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_9_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 13
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_10_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 14
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_11_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 15
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_12_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 16
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_13_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 17
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_14_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 18
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_15_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 19
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_16_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 20
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_17_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 21
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_18_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 22
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_19_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 23
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_20_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 24
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_21_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 25
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_22_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 26
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_23_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 27
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_24_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 28
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_25_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 29
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_26_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 30
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_27_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 31
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_28_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 32
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_29_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 33
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_30_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 34
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_31_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 35
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_32_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 36
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_33_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 37
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_34_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 38
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_35_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 39
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_36_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 40
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_37_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 41
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_38_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 42
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_39_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 43
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_40_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 44
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_41_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 45
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_42_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 46
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_43_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 47
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_44_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 48
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_45_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 49
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_46_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 50
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_47_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 51
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_48_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 52
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_49_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 53
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_50_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 54
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_51_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 55
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_52_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 56
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_53_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 57
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_54_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 58
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_55_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 59
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_56_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 60
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_57_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 61
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_58_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 62
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_59_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 63
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_60_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 64
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_61_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 65
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_62_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 66
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_63_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 67
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_64_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 68
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_65_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 69
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_66_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 70
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_67_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 71
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_68_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 72
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_69_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 73
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_70_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 74
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_71_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 75
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_72_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 76
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_73_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 77
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_74_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 78
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_75_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 79
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_76_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 80
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_77_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 81
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_78_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 82
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_79_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 83
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_80_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 84
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_81_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 85
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_82_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 86
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_83_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 87
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_84_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 88
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_85_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 89
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_86_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 90
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_87_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 91
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_88_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 92
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_89_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 93
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_90_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 94
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_91_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 95
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_92_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 96
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_93_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 97
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_94_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 98
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_95_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 99
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_96_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 100
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_97_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 101
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_98_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 102
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_99_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 103
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_100_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 104
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_101_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 105
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_102_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 106
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_103_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 107
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_104_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 108
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_105_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 109
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_106_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 110
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_107_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 111
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_108_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 112
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_109_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 113
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_110_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 114
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_111_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 115
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_112_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 116
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_180_1361734134.987"
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 5
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_180_1361734134.987"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_180_1361734134.987"
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 5
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_180_1361734134.987"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_113_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 118
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_114_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 119
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_115_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 120
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_116_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 121
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_117_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 122
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_118_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 123
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_119_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 124
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_120_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 125
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_121_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 126
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_122_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 127
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_123_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 128
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_124_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 129
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_125_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 130
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_126_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 131
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_127_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 132
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_128_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 133
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_129_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 134
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_130_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 135
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_131_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 136
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_132_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 137
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_133_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 138
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_134_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 139
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_135_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 140
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_136_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 141
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_137_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 142
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_138_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 143
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_139_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 144
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_140_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 145
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_141_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 146
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_142_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 147
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_143_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 148
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_144_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 149
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_145_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 150
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_146_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 151
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_147_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 152
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_148_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 153
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_149_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 154
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_150_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 155
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_151_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 156
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_152_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 157
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_153_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 158
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_154_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 159
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_155_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 160
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_156_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 161
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_157_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 162
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_158_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 163
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_159_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 164
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_160_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 165
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_161_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 166
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_162_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 167
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_163_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 168
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_164_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 169
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_165_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 170
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_166_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 171
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_167_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 172
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_168_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 173
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_169_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 174
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_170_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 175
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_171_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 176
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_172_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 177
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_173_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 178
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_174_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 179
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_175_1361734134.987" 
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 180
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_196_1361734134.987"
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 117
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_196_1361734134.987"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_196_1361734134.987"
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 117
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_196_1361734134.987"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_235_1361734134.987"
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 181
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_235_1361734134.987"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_235_1361734134.987"
    nqp_get_sc_object $P5002, "82953FABFDD9ED3A9360DB6B7DA3EFCD15C2E42E-1361734135.011", 181
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_235_1361734134.987"
    $P5004 = $P5003."finish_static_lexpad"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_236_1361734134.987") :anon :lex :outer("cuid_237_1361734134.987")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    new $P5001, 'ResizablePMCArray'
    .const 'Sub' $P5002 = "cuid_1_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_2_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_3_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_4_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_5_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_6_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_7_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_8_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_9_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_10_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_11_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_12_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_13_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_14_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_15_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_16_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_17_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_18_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_19_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_20_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_21_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_22_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_23_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_24_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_25_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_26_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_27_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_28_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_29_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_30_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_31_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_32_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_33_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_34_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_35_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_36_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_37_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_38_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_39_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_40_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_41_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_42_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_43_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_44_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_45_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_46_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_47_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_48_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_49_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_50_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_51_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_52_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_53_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_54_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_55_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_56_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_57_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_58_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_59_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_60_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_61_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_62_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_63_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_64_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_65_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_66_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_67_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_68_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_69_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_70_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_71_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_72_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_73_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_74_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_75_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_76_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_77_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_78_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_79_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_80_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_81_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_82_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_83_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_84_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_85_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_86_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_87_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_88_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_89_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_90_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_91_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_92_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_93_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_94_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_95_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_96_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_97_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_98_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_99_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_100_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_101_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_102_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_103_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_104_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_105_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_106_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_107_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_108_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_109_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_110_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_111_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_112_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_113_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_114_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_115_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_116_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_117_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_118_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_119_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_120_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_121_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_122_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_123_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_124_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_125_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_126_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_127_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_128_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_129_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_130_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_131_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_132_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_133_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_134_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_135_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_136_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_137_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_138_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_139_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_140_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_141_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_142_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_143_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_144_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_145_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_146_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_147_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_148_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_149_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_150_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_151_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_152_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_153_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_154_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_155_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_156_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_157_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_158_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_159_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_160_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_161_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_162_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_163_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_164_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_165_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_166_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_167_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_168_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_169_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_170_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_171_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_172_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_173_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_174_1361734134.987" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_175_1361734134.987" 
    push $P5001, $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_238_1361734134.987") :load
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .const 'Sub' $P5001 = "cuid_177_1361734134.987" 
    $P5002 = $P5001()
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_239_1361734134.987") :main
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc ARGS :slurpy 
    .const 'Sub' $P5001 = "cuid_177_1361734134.987" 
    $P5002 = $P5001(ARGS :flat)
    .return ($P5002) 
.end