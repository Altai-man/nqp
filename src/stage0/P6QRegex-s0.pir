.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'
.include 'libpaths.pasm'
.loadlib "nqp_group"
.loadlib "nqp_ops"
.loadlib "nqp_bigint_ops"
.loadlib "trans_ops"
.loadlib "io_ops"
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_177_1360623852.546") :anon :lex
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc _lex_param_0 :slurpy 
    .const 'Sub' $P5042 = 'cuid_176_1360623852.546' 
    capture_lex $P5042 
    .const 'Sub' $P5042 = 'cuid_179_1360623852.546' 
    capture_lex $P5042 
    .const 'Sub' $P5042 = 'cuid_180_1360623852.546' 
    capture_lex $P5042 
    .const 'Sub' $P5042 = 'cuid_191_1360623852.546' 
    capture_lex $P5042 
    .const 'Sub' $P5042 = 'cuid_230_1360623852.546' 
    capture_lex $P5042 
    .lex "GLOBALish", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "EXPORT", $P103 
    .lex "NQPCursorRole", $P104 
    .lex "$p6regex", $P105 
    .lex "&MAIN", $P106 
    .lex "@ARGS", _lex_param_0 
    .local pmc ctxsave 
    .local pmc fb_tmp_345 
    .local pmc fb_tmp_346 
    .local pmc fb_tmp_347 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P105, $P5001
    .const 'Sub' $P5002 = 'cuid_176_1360623852.546' 
    capture_lex $P5002
    set $P106, $P5002
    find_dynamic_lex $P5003, "$*CTXSAVE"
    set ctxsave, $P5003
    isnull $I5001, ctxsave
    if $I5001 goto unless10_end11 
    can $I5002, ctxsave, "ctxsave"
    box $P5006, $I5002
    set $P5005, $P5006
    unless $I5002 goto if11_end13 
    $P5004 = ctxsave."ctxsave"()
    set $P5005, $P5004
  if11_end13:
  unless10_end11:
.annotate 'line', 1
    .const 'Sub' $P5007 = 'cuid_179_1360623852.546' 
    capture_lex $P5007
    $P5008 = $P5007()
    .const 'Sub' $P5009 = 'cuid_180_1360623852.546' 
    capture_lex $P5009
    $P5010 = $P5009()
    .const 'Sub' $P5011 = 'cuid_191_1360623852.546' 
    capture_lex $P5011
    $P5012 = $P5011()
    .const 'Sub' $P5013 = 'cuid_230_1360623852.546' 
    capture_lex $P5013
    $P5014 = $P5013()
.annotate 'line', 1028
    nqp_get_sc_object $P5018, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5017, $P5018, "QRegex"
    nqp_get_package_through_who $P5016, $P5017, "P6Regex"
    get_who $P5015, $P5016
    set fb_tmp_345, $P5015
    repr_defined $I5003, fb_tmp_345
    unless $I5003 goto if1313_else3022 
    set $P5019, fb_tmp_345["Compiler"]
    set $P5021, $P5019
    goto if1313_end3023
  if1313_else3022:
    null $P5020
    set $P5021, $P5020
  if1313_end3023:
    unless_null $P5021, vivi_13143024
    nqp_get_sc_object $P5022, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5021, $P5022
  vivi_13143024:
    $P5023 = $P5021."new"()
    set $P105, $P5023
.annotate 'line', 1029
    $P105."language"("QRegex::P6Regex")
.annotate 'line', 1030
    nqp_get_sc_object $P5027, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5026, $P5027, "QRegex"
    nqp_get_package_through_who $P5025, $P5026, "P6Regex"
    get_who $P5024, $P5025
    set fb_tmp_346, $P5024
    repr_defined $I5004, fb_tmp_346
    unless $I5004 goto if1315_else3025 
    set $P5028, fb_tmp_346["Grammar"]
    set $P5030, $P5028
    goto if1315_end3026
  if1315_else3025:
    null $P5029
    set $P5030, $P5029
  if1315_end3026:
    unless_null $P5030, vivi_13163027
    nqp_get_sc_object $P5031, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5030, $P5031
  vivi_13163027:
    $P105."parsegrammar"($P5030)
.annotate 'line', 1031
    nqp_get_sc_object $P5035, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5034, $P5035, "QRegex"
    nqp_get_package_through_who $P5033, $P5034, "P6Regex"
    get_who $P5032, $P5033
    set fb_tmp_347, $P5032
    repr_defined $I5005, fb_tmp_347
    unless $I5005 goto if1317_else3028 
    set $P5036, fb_tmp_347["Actions"]
    set $P5038, $P5036
    goto if1317_end3029
  if1317_else3028:
    null $P5037
    set $P5038, $P5037
  if1317_end3029:
    unless_null $P5038, vivi_13183030
    nqp_get_sc_object $P5039, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5038, $P5039
  vivi_13183030:
    $P105."parseactions"($P5038)
    unless _lex_param_0 goto if1319_end3032 
    .const 'Sub' $P5040 = "cuid_176_1360623852.546" 
    $P5041 = $P5040(_lex_param_0 :flat)
  if1319_end3032:
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "MAIN" :subid("cuid_176_1360623852.546") :anon :lex :outer("cuid_177_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 1033
    .param pmc _lex_param_0 
    .lex "@ARGS", _lex_param_0 
.annotate 'line', 1034
    find_lex $P5001, "$p6regex"
    $P5002 = $P5001."command_line"(_lex_param_0, "utf8" :named("encoding"), "ucs4" :named("transcode"))
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_179_1360623852.546") :anon :lex :outer("cuid_177_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 9
    .const 'Sub' $P5002 = 'cuid_1_1360623852.546' 
    capture_lex $P5002 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_1_1360623852.546' 
    capture_lex $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "create_code" :subid("cuid_1_1360623852.546") :anon :lex :outer("cuid_179_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 10
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .const 'Sub' $P5088 = 'cuid_178_1360623852.546' 
    capture_lex $P5088 
    .lex "$dummy", $P101 
    .lex "$code_obj", $P102 
    .lex "$slot", $P103 
    .lex "$fixups", $P104 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    .lex "$name", _lex_param_2 
    .local pmc fb_tmp_1 
    .local pmc fb_tmp_2 
    .local pmc fb_tmp_3 
    .local pmc fb_tmp_4 
    .local pmc fb_tmp_5 
    .local pmc fb_tmp_6 
    .local pmc fb_tmp_7 
    .local pmc fb_tmp_8 
    .local pmc fb_tmp_9 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P104, $P5004
    .const 'Sub' $P5007 = 'cuid_178_1360623852.546' 
    capture_lex $P5007
    newclosure $P5006, $P5007
    nqp_fresh_stub $P5005, $P5006
    set $P101, $P5005
    set $S5001, _lex_param_2
    assign $P101, $S5001
    setprop $P101, "STATIC_CODE_REF", $P101
.annotate 'line', 17
    nqp_decontainerize $P5008, _lex_param_0
    $P5008."add_root_code_ref"($P101, _lex_param_1)
    nqp_get_sc_object $P5010, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 9
    repr_instance_of $P5009, $P5010
    set $P102, $P5009
    nqp_get_sc_object $P5011, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 9
    setattribute $P102, $P5011, "$!do", $P101
.annotate 'line', 22
    nqp_decontainerize $P5012, _lex_param_0
    $P5013 = $P5012."add_object"($P102)
    set $P103, $P5013
.annotate 'line', 25
    nqp_get_sc_object $P5016, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set fb_tmp_1, $P5014
    repr_defined $I5001, fb_tmp_1
    unless $I5001 goto if12_else14 
    set $P5017, fb_tmp_1["Stmt"]
    set $P5019, $P5017
    goto if12_end15
  if12_else14:
    null $P5018
    set $P5019, $P5018
  if12_end15:
    unless_null $P5019, vivi_1316
    nqp_get_sc_object $P5020, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5019, $P5020
  vivi_1316:
    $P5021 = $P5019."new"()
    set $P104, $P5021
.annotate 'line', 26
    nqp_get_sc_object $P5024, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set fb_tmp_2, $P5022
    repr_defined $I5002, fb_tmp_2
    unless $I5002 goto if14_else17 
    set $P5025, fb_tmp_2["Op"]
    set $P5027, $P5025
    goto if14_end18
  if14_else17:
    null $P5026
    set $P5027, $P5026
  if14_end18:
    unless_null $P5027, vivi_1519
    nqp_get_sc_object $P5028, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5027, $P5028
  vivi_1519:
.annotate 'line', 28
    nqp_get_sc_object $P5031, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set fb_tmp_3, $P5029
    repr_defined $I5003, fb_tmp_3
    unless $I5003 goto if16_else20 
    set $P5032, fb_tmp_3["WVal"]
    set $P5034, $P5032
    goto if16_end21
  if16_else20:
    null $P5033
    set $P5034, $P5033
  if16_end21:
    unless_null $P5034, vivi_1722
    nqp_get_sc_object $P5035, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5034, $P5035
  vivi_1722:
    $P5036 = $P5034."new"($P102 :named("value"))
.annotate 'line', 29
    nqp_get_sc_object $P5039, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set fb_tmp_4, $P5037
    repr_defined $I5004, fb_tmp_4
    unless $I5004 goto if18_else23 
    set $P5040, fb_tmp_4["WVal"]
    set $P5042, $P5040
    goto if18_end24
  if18_else23:
    null $P5041
    set $P5042, $P5041
  if18_end24:
    unless_null $P5042, vivi_1925
    nqp_get_sc_object $P5043, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5042, $P5043
  vivi_1925:
    nqp_get_sc_object $P5044, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 9
    $P5045 = $P5042."new"($P5044 :named("value"))
.annotate 'line', 30
    nqp_get_sc_object $P5048, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set fb_tmp_5, $P5046
    repr_defined $I5005, fb_tmp_5
    unless $I5005 goto if20_else26 
    set $P5049, fb_tmp_5["SVal"]
    set $P5051, $P5049
    goto if20_end27
  if20_else26:
    null $P5050
    set $P5051, $P5050
  if20_end27:
    unless_null $P5051, vivi_2128
    nqp_get_sc_object $P5052, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5051, $P5052
  vivi_2128:
    $P5053 = $P5051."new"("$!do" :named("value"))
.annotate 'line', 31
    nqp_get_sc_object $P5056, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set fb_tmp_6, $P5054
    repr_defined $I5006, fb_tmp_6
    unless $I5006 goto if22_else29 
    set $P5057, fb_tmp_6["BVal"]
    set $P5059, $P5057
    goto if22_end30
  if22_else29:
    null $P5058
    set $P5059, $P5058
  if22_end30:
    unless_null $P5059, vivi_2331
    nqp_get_sc_object $P5060, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5059, $P5060
  vivi_2331:
    $P5061 = $P5059."new"(_lex_param_1 :named("value"))
    $P5062 = $P5027."new"($P5036, $P5045, $P5053, $P5061, "bindattr" :named("op"))
    $P104."push"($P5062)
.annotate 'line', 33
    nqp_get_sc_object $P5065, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5064, $P5065, "QAST"
    get_who $P5063, $P5064
    set fb_tmp_7, $P5063
    repr_defined $I5007, fb_tmp_7
    unless $I5007 goto if24_else32 
    set $P5066, fb_tmp_7["Op"]
    set $P5068, $P5066
    goto if24_end33
  if24_else32:
    null $P5067
    set $P5068, $P5067
  if24_end33:
    unless_null $P5068, vivi_2534
    nqp_get_sc_object $P5069, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5068, $P5069
  vivi_2534:
.annotate 'line', 35
    nqp_get_sc_object $P5072, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5071, $P5072, "QAST"
    get_who $P5070, $P5071
    set fb_tmp_8, $P5070
    repr_defined $I5008, fb_tmp_8
    unless $I5008 goto if26_else35 
    set $P5073, fb_tmp_8["BVal"]
    set $P5075, $P5073
    goto if26_end36
  if26_else35:
    null $P5074
    set $P5075, $P5074
  if26_end36:
    unless_null $P5075, vivi_2737
    nqp_get_sc_object $P5076, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5075, $P5076
  vivi_2737:
    $P5077 = $P5075."new"(_lex_param_1 :named("value"))
.annotate 'line', 36
    nqp_get_sc_object $P5080, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5079, $P5080, "QAST"
    get_who $P5078, $P5079
    set fb_tmp_9, $P5078
    repr_defined $I5009, fb_tmp_9
    unless $I5009 goto if28_else38 
    set $P5081, fb_tmp_9["WVal"]
    set $P5083, $P5081
    goto if28_end39
  if28_else38:
    null $P5082
    set $P5083, $P5082
  if28_end39:
    unless_null $P5083, vivi_2940
    nqp_get_sc_object $P5084, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5083, $P5084
  vivi_2940:
    $P5085 = $P5083."new"($P102 :named("value"))
    $P5086 = $P5068."new"($P5077, $P5085, "setcodeobj" :named("op"))
    $P104."push"($P5086)
.annotate 'line', 38
    nqp_decontainerize $P5087, _lex_param_0
    $P5087."add_fixup_task"($P104 :named("fixup_past"))
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_178_1360623852.546") :anon :lex :outer("cuid_1_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 12

    box $P5001, "Uncompiled code executed"
    die $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_180_1360623852.546") :anon :lex :outer("cuid_177_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 44
    .const 'Sub' $P5086 = 'cuid_2_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_3_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_4_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_5_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_6_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_8_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_9_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_10_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_11_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_12_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_14_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_18_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_19_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_20_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_21_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_22_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_23_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_26_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_28_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_29_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_31_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_32_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_33_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_34_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_35_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_39_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_40_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_42_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_43_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_44_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_45_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_46_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_47_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_48_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_49_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_50_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_51_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_52_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_53_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_54_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_55_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_56_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_57_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_58_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_59_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_60_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_61_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_62_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_63_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_64_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_65_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_66_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_67_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_68_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_69_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_70_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_71_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_72_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_73_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_74_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_75_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_76_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_77_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_78_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_79_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_80_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_81_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_82_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_83_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_85_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_86_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_87_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_89_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_91_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_92_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_93_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_95_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_97_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_104_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_106_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_107_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_108_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_109_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_110_1360623852.546' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_111_1360623852.546' 
    capture_lex $P5086 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_2_1360623852.546' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_3_1360623852.546' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_4_1360623852.546' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_5_1360623852.546' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_6_1360623852.546' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_8_1360623852.546' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_9_1360623852.546' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_10_1360623852.546' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_11_1360623852.546' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_12_1360623852.546' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_14_1360623852.546' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_18_1360623852.546' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_19_1360623852.546' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_20_1360623852.546' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_21_1360623852.546' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_22_1360623852.546' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_23_1360623852.546' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_26_1360623852.546' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_28_1360623852.546' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_29_1360623852.546' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_31_1360623852.546' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_32_1360623852.546' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_33_1360623852.546' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_34_1360623852.546' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_35_1360623852.546' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_39_1360623852.546' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_40_1360623852.546' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_42_1360623852.546' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_43_1360623852.546' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_44_1360623852.546' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_45_1360623852.546' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_46_1360623852.546' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_47_1360623852.546' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_48_1360623852.546' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_49_1360623852.546' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_50_1360623852.546' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_51_1360623852.546' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_52_1360623852.546' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_53_1360623852.546' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_54_1360623852.546' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_55_1360623852.546' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_56_1360623852.546' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_57_1360623852.546' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_58_1360623852.546' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_59_1360623852.546' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_60_1360623852.546' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_61_1360623852.546' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_62_1360623852.546' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_63_1360623852.546' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_64_1360623852.546' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_65_1360623852.546' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_66_1360623852.546' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_67_1360623852.546' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_68_1360623852.546' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_69_1360623852.546' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_70_1360623852.546' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_71_1360623852.546' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_72_1360623852.546' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_73_1360623852.546' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_74_1360623852.546' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_75_1360623852.546' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_76_1360623852.546' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_77_1360623852.546' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_78_1360623852.546' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_79_1360623852.546' 
    capture_lex $P5065
    .const 'Sub' $P5066 = 'cuid_80_1360623852.546' 
    capture_lex $P5066
    .const 'Sub' $P5067 = 'cuid_81_1360623852.546' 
    capture_lex $P5067
    .const 'Sub' $P5068 = 'cuid_82_1360623852.546' 
    capture_lex $P5068
    .const 'Sub' $P5069 = 'cuid_83_1360623852.546' 
    capture_lex $P5069
    .const 'Sub' $P5070 = 'cuid_85_1360623852.546' 
    capture_lex $P5070
    .const 'Sub' $P5071 = 'cuid_86_1360623852.546' 
    capture_lex $P5071
    .const 'Sub' $P5072 = 'cuid_87_1360623852.546' 
    capture_lex $P5072
    .const 'Sub' $P5073 = 'cuid_89_1360623852.546' 
    capture_lex $P5073
    .const 'Sub' $P5074 = 'cuid_91_1360623852.546' 
    capture_lex $P5074
    .const 'Sub' $P5075 = 'cuid_92_1360623852.546' 
    capture_lex $P5075
    .const 'Sub' $P5076 = 'cuid_93_1360623852.546' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_95_1360623852.546' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_97_1360623852.546' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_104_1360623852.546' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_106_1360623852.546' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_107_1360623852.546' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_108_1360623852.546' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_109_1360623852.546' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_110_1360623852.546' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_111_1360623852.546' 
    capture_lex $P5085
    .return ($P5085) 
.end
.HLL "nqp"
.namespace []
.sub "obs" :subid("cuid_2_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 46
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 :optional 
    .param int haz_param_1 :opt_flag 
    .lex "self", _lex_param_0 
    .lex "$old", _lex_param_1 
    .lex "$new", _lex_param_2 
    .lex "$when", _lex_param_3 
    if haz_param_1, default41
    box $P5003, " in Perl 6"
    set _lex_param_3, $P5003
  default41:
.annotate 'line', 47
    nqp_decontainerize $P5001, _lex_param_0
    set $S5006, _lex_param_1
    concat $S5005, "Unsupported use of ", $S5006
    concat $S5004, $S5005, ";"
    set $S5007, _lex_param_3
    concat $S5003, $S5004, $S5007
    concat $S5002, $S5003, " please use "
    set $S5008, _lex_param_2
    concat $S5001, $S5002, $S5008
    $P5002 = $P5001."panic"($S5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "throw_unrecognized_metachar" :subid("cuid_3_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 54
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$char", _lex_param_1 
.annotate 'line', 55
    nqp_decontainerize $P5001, _lex_param_0
    set $S5003, _lex_param_1
    concat $S5002, "Unrecognized regex metacharacter ", $S5003
    concat $S5001, $S5002, " (must be quoted to match literally)"
    $P5002 = $P5001."panic"($S5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "throw_null_pattern" :subid("cuid_4_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 58
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 59
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."panic"("Null regex not allowed")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "ws" :subid("cuid_5_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 62
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx30_start
    .local string rx30_tgt
    .local int rx30_pos
    .local int rx30_off
    .local int rx30_eos
    .local int rx30_rep
    .local pmc rx30_cur
    .local pmc rx30_curclass
    .local pmc rx30_bstack
    .local pmc rx30_cstack
    rx30_start = self."!cursor_start_all"()
    set rx30_cur, rx30_start[0]
    set rx30_tgt, rx30_start[1]
    set rx30_pos, rx30_start[2]
    set rx30_curclass, rx30_start[3]
    set rx30_bstack, rx30_start[4]
    set $I19, rx30_start[5]
    store_lex unicode:"$\x{a2}", rx30_cur
    length rx30_eos, rx30_tgt
    eq $I19, 1, rx30_restart44
    gt rx30_pos, rx30_eos, rx30_fail45
    repr_get_attr_int $I11, self, rx30_curclass, "$!from"
    ne $I11, -1, rxscan31_done51
    goto rxscan31_scan50
  rxscan31_loop49:
    inc rx30_pos
    gt rx30_pos, rx30_eos, rx30_fail45
    repr_bind_attr_int rx30_cur, rx30_curclass, "$!from", rx30_pos
  rxscan31_scan50:
    nqp_rxmark rx30_bstack, rxscan31_loop49, rx30_pos, 0
  rxscan31_done51:
    nqp_rxmark rx30_bstack, rxquantr32_done53, rx30_pos, 0
  rxquantr32_loop52:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt33_055
    nqp_push_label $P11, alt33_158
    nqp_rxmark rx30_bstack, alt33_end54, -1, 0
    rx30_cur."!alt"(rx30_pos, "alt_nfa__1_1360623852.686", $P11)
    goto rx30_fail45
  alt33_055:
    nqp_rxmark rx30_bstack, rxquantr34_done57, -1, 0
  rxquantr34_loop56:
    ge rx30_pos, rx30_eos, rx30_fail45
    is_cclass $I11, .CCLASS_WHITESPACE, rx30_tgt, rx30_pos
    unless $I11, rx30_fail45
    add rx30_pos, 1
    nqp_rxpeek $I19, rx30_bstack, rxquantr34_done57
    inc $I19
    inc $I19
    set rx30_rep, rx30_bstack[$I19]
    nqp_rxcommit rx30_bstack, rxquantr34_done57
    inc rx30_rep
    nqp_rxmark rx30_bstack, rxquantr34_done57, rx30_pos, rx30_rep
    goto rxquantr34_loop56
  rxquantr34_done57:
    goto alt33_end54
  alt33_158:
    add $I11, rx30_pos, 1
    gt $I11, rx30_eos, rx30_fail45
    substr $S10, rx30_tgt, rx30_pos, 1
    ne $S10, ucs4:"#", rx30_fail45
    add rx30_pos, 1
    nqp_rxmark rx30_bstack, rxquantr35_done60, rx30_pos, 0
  rxquantr35_loop59:
    ge rx30_pos, rx30_eos, rx30_fail45
    is_cclass $I11, .CCLASS_NEWLINE, rx30_tgt, rx30_pos
    if $I11, rx30_fail45
    add rx30_pos, 1
    nqp_rxpeek $I19, rx30_bstack, rxquantr35_done60
    inc $I19
    inc $I19
    set rx30_rep, rx30_bstack[$I19]
    nqp_rxcommit rx30_bstack, rxquantr35_done60
    inc rx30_rep
    nqp_rxmark rx30_bstack, rxquantr35_done60, rx30_pos, rx30_rep
    goto rxquantr35_loop59
  rxquantr35_done60:
    goto alt33_end54
  alt33_end54:
    nqp_rxpeek $I19, rx30_bstack, rxquantr32_done53
    inc $I19
    inc $I19
    set rx30_rep, rx30_bstack[$I19]
    nqp_rxcommit rx30_bstack, rxquantr32_done53
    inc rx30_rep
    nqp_rxmark rx30_bstack, rxquantr32_done53, rx30_pos, rx30_rep
    goto rxquantr32_loop52
  rxquantr32_done53:
    rx30_cur."!cursor_pass"(rx30_pos, "ws", 'backtrack'=>1)
    .return (rx30_cur)
  rx30_restart44:
    repr_get_attr_obj rx30_cstack, rx30_cur, rx30_curclass, "$!cstack"
  rx30_fail45:
    unless rx30_bstack, rx30_done43
    pop $I19, rx30_bstack
    if_null rx30_cstack, rx30_cstack_done48
    unless rx30_cstack, rx30_cstack_done48
    dec $I19
    set $P11, rx30_cstack[$I19]
  rx30_cstack_done48:
    pop rx30_rep, rx30_bstack
    pop rx30_pos, rx30_bstack
    pop $I19, rx30_bstack
    lt rx30_pos, -1, rx30_done43
    lt rx30_pos, 0, rx30_fail45
    eq $I19, 0, rx30_fail45
    nqp_islist $I20, rx30_cstack
    unless $I20, rx30_jump46
    elements $I18, rx30_bstack
    le $I18, 0, rx30_cut47
    dec $I18
    set $I18, rx30_bstack[$I18]
  rx30_cut47:
    assign rx30_cstack, $I18
  rx30_jump46:
    jump $I19
  rx30_done43:
    rx30_cur."!cursor_fail"()
    .return (rx30_cur) 
.end
.HLL "nqp"
.namespace []
.sub "normspace" :subid("cuid_6_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 64
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_7_1360623852.546' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx36_start
    .local string rx36_tgt
    .local int rx36_pos
    .local int rx36_off
    .local int rx36_eos
    .local int rx36_rep
    .local pmc rx36_cur
    .local pmc rx36_curclass
    .local pmc rx36_bstack
    .local pmc rx36_cstack
    rx36_start = self."!cursor_start_all"()
    set rx36_cur, rx36_start[0]
    set rx36_tgt, rx36_start[1]
    set rx36_pos, rx36_start[2]
    set rx36_curclass, rx36_start[3]
    set rx36_bstack, rx36_start[4]
    set $I19, rx36_start[5]
    store_lex unicode:"$\x{a2}", rx36_cur
    length rx36_eos, rx36_tgt
    eq $I19, 1, rx36_restart63
    gt rx36_pos, rx36_eos, rx36_fail64
    repr_get_attr_int $I11, self, rx36_curclass, "$!from"
    ne $I11, -1, rxscan37_done70
    goto rxscan37_scan69
  rxscan37_loop68:
    inc rx36_pos
    gt rx36_pos, rx36_eos, rx36_fail64
    repr_bind_attr_int rx36_cur, rx36_curclass, "$!from", rx36_pos
  rxscan37_scan69:
    nqp_rxmark rx36_bstack, rxscan37_loop68, rx36_pos, 0
  rxscan37_done70:
    .const 'Sub' $P5001 = 'cuid_7_1360623852.546' 
    capture_lex $P5001
    repr_bind_attr_int rx36_cur, rx36_curclass, "$!pos", rx36_pos
    $P11 = rx36_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx36_curclass, "$!pos"
    lt $I11, 0, rx36_fail64
    repr_bind_attr_int rx36_cur, rx36_curclass, "$!pos", rx36_pos
    $P11 = rx36_cur."ws"()
    repr_get_attr_int $I11, $P11, rx36_curclass, "$!pos"
    lt $I11, 0, rx36_fail64
    repr_get_attr_int rx36_pos, $P11, rx36_curclass, "$!pos"
    rx36_cur."!cursor_pass"(rx36_pos, "normspace", 'backtrack'=>1)
    .return (rx36_cur)
  rx36_restart63:
    repr_get_attr_obj rx36_cstack, rx36_cur, rx36_curclass, "$!cstack"
  rx36_fail64:
    unless rx36_bstack, rx36_done62
    pop $I19, rx36_bstack
    if_null rx36_cstack, rx36_cstack_done67
    unless rx36_cstack, rx36_cstack_done67
    dec $I19
    set $P11, rx36_cstack[$I19]
  rx36_cstack_done67:
    pop rx36_rep, rx36_bstack
    pop rx36_pos, rx36_bstack
    pop $I19, rx36_bstack
    lt rx36_pos, -1, rx36_done62
    lt rx36_pos, 0, rx36_fail64
    eq $I19, 0, rx36_fail64
    nqp_islist $I20, rx36_cstack
    unless $I20, rx36_jump65
    elements $I18, rx36_bstack
    le $I18, 0, rx36_cut66
    dec $I18
    set $I18, rx36_bstack[$I18]
  rx36_cut66:
    assign rx36_cstack, $I18
  rx36_jump65:
    jump $I19
  rx36_done62:
    rx36_cur."!cursor_fail"()
    .return (rx36_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_7_1360623852.546") :anon :lex :outer("cuid_6_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx38_start
    .local string rx38_tgt
    .local int rx38_pos
    .local int rx38_off
    .local int rx38_eos
    .local int rx38_rep
    .local pmc rx38_cur
    .local pmc rx38_curclass
    .local pmc rx38_bstack
    .local pmc rx38_cstack
    rx38_start = self."!cursor_start_all"()
    set rx38_cur, rx38_start[0]
    set rx38_tgt, rx38_start[1]
    set rx38_pos, rx38_start[2]
    set rx38_curclass, rx38_start[3]
    set rx38_bstack, rx38_start[4]
    set $I19, rx38_start[5]
    store_lex unicode:"$\x{a2}", rx38_cur
    length rx38_eos, rx38_tgt
    eq $I19, 1, rx38_restart73
    gt rx38_pos, rx38_eos, rx38_fail74
    repr_get_attr_int $I11, self, rx38_curclass, "$!from"
    ne $I11, -1, rxscan39_done80
    goto rxscan39_scan79
  rxscan39_loop78:
    inc rx38_pos
    gt rx38_pos, rx38_eos, rx38_fail74
    repr_bind_attr_int rx38_cur, rx38_curclass, "$!from", rx38_pos
  rxscan39_scan79:
    nqp_rxmark rx38_bstack, rxscan39_loop78, rx38_pos, 0
  rxscan39_done80:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt40_082
    nqp_push_label $P11, alt40_183
    nqp_rxmark rx38_bstack, alt40_end81, -1, 0
    rx38_cur."!alt"(rx38_pos, "alt_nfa__2_1360623852.692", $P11)
    goto rx38_fail74
  alt40_082:
    ge rx38_pos, rx38_eos, rx38_fail74
    is_cclass $I11, .CCLASS_WHITESPACE, rx38_tgt, rx38_pos
    unless $I11, rx38_fail74
    add rx38_pos, 1
    goto alt40_end81
  alt40_183:
    add $I11, rx38_pos, 1
    gt $I11, rx38_eos, rx38_fail74
    substr $S10, rx38_tgt, rx38_pos, 1
    ne $S10, ucs4:"#", rx38_fail74
    add rx38_pos, 1
    goto alt40_end81
  alt40_end81:
    rx38_cur."!cursor_pass"(rx38_pos, 'backtrack'=>1)
    .return (rx38_cur)
  rx38_restart73:
    repr_get_attr_obj rx38_cstack, rx38_cur, rx38_curclass, "$!cstack"
  rx38_fail74:
    unless rx38_bstack, rx38_done72
    pop $I19, rx38_bstack
    if_null rx38_cstack, rx38_cstack_done77
    unless rx38_cstack, rx38_cstack_done77
    dec $I19
    set $P11, rx38_cstack[$I19]
  rx38_cstack_done77:
    pop rx38_rep, rx38_bstack
    pop rx38_pos, rx38_bstack
    pop $I19, rx38_bstack
    lt rx38_pos, -1, rx38_done72
    lt rx38_pos, 0, rx38_fail74
    eq $I19, 0, rx38_fail74
    nqp_islist $I20, rx38_cstack
    unless $I20, rx38_jump75
    elements $I18, rx38_bstack
    le $I18, 0, rx38_cut76
    dec $I18
    set $I18, rx38_bstack[$I18]
  rx38_cut76:
    assign rx38_cstack, $I18
  rx38_jump75:
    jump $I19
  rx38_done72:
    rx38_cur."!cursor_fail"()
    .return (rx38_cur) 
.end
.HLL "nqp"
.namespace []
.sub "identifier" :subid("cuid_8_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 66
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx42_start
    .local string rx42_tgt
    .local int rx42_pos
    .local int rx42_off
    .local int rx42_eos
    .local int rx42_rep
    .local pmc rx42_cur
    .local pmc rx42_curclass
    .local pmc rx42_bstack
    .local pmc rx42_cstack
    rx42_start = self."!cursor_start_all"()
    set rx42_cur, rx42_start[0]
    set rx42_tgt, rx42_start[1]
    set rx42_pos, rx42_start[2]
    set rx42_curclass, rx42_start[3]
    set rx42_bstack, rx42_start[4]
    set $I19, rx42_start[5]
    store_lex unicode:"$\x{a2}", rx42_cur
    length rx42_eos, rx42_tgt
    eq $I19, 1, rx42_restart87
    gt rx42_pos, rx42_eos, rx42_fail88
    repr_get_attr_int $I11, self, rx42_curclass, "$!from"
    ne $I11, -1, rxscan43_done94
    goto rxscan43_scan93
  rxscan43_loop92:
    inc rx42_pos
    gt rx42_pos, rx42_eos, rx42_fail88
    repr_bind_attr_int rx42_cur, rx42_curclass, "$!from", rx42_pos
  rxscan43_scan93:
    nqp_rxmark rx42_bstack, rxscan43_loop92, rx42_pos, 0
  rxscan43_done94:
    repr_bind_attr_int rx42_cur, rx42_curclass, "$!pos", rx42_pos
    $P11 = rx42_cur."ident"()
    repr_get_attr_int $I11, $P11, rx42_curclass, "$!pos"
    lt $I11, 0, rx42_fail88
    repr_get_attr_int rx42_pos, $P11, rx42_curclass, "$!pos"
    nqp_rxmark rx42_bstack, rxquantr45_done97, rx42_pos, 0
  rxquantr45_loop96:
  alt46_099:
    nqp_rxmark rx42_bstack, alt46_1100, rx42_pos, 0
    add $I11, rx42_pos, 1
    gt $I11, rx42_eos, rx42_fail88
    substr $S10, rx42_tgt, rx42_pos, 1
    ne $S10, ucs4:"-", rx42_fail88
    add rx42_pos, 1
    goto alt46_end98
  alt46_1100:
    ge rx42_pos, rx42_eos, rx42_fail88
    substr $S11, rx42_tgt, rx42_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx42_fail88
    inc rx42_pos
  alt46_end98:
    repr_bind_attr_int rx42_cur, rx42_curclass, "$!pos", rx42_pos
    $P11 = rx42_cur."ident"()
    repr_get_attr_int $I11, $P11, rx42_curclass, "$!pos"
    lt $I11, 0, rx42_fail88
    repr_get_attr_int rx42_pos, $P11, rx42_curclass, "$!pos"
    nqp_rxpeek $I19, rx42_bstack, rxquantr45_done97
    inc $I19
    inc $I19
    set rx42_rep, rx42_bstack[$I19]
    nqp_rxcommit rx42_bstack, rxquantr45_done97
    inc rx42_rep
    nqp_rxmark rx42_bstack, rxquantr45_done97, rx42_pos, rx42_rep
    goto rxquantr45_loop96
  rxquantr45_done97:
    rx42_cur."!cursor_pass"(rx42_pos, "identifier", 'backtrack'=>1)
    .return (rx42_cur)
  rx42_restart87:
    repr_get_attr_obj rx42_cstack, rx42_cur, rx42_curclass, "$!cstack"
  rx42_fail88:
    unless rx42_bstack, rx42_done86
    pop $I19, rx42_bstack
    if_null rx42_cstack, rx42_cstack_done91
    unless rx42_cstack, rx42_cstack_done91
    dec $I19
    set $P11, rx42_cstack[$I19]
  rx42_cstack_done91:
    pop rx42_rep, rx42_bstack
    pop rx42_pos, rx42_bstack
    pop $I19, rx42_bstack
    lt rx42_pos, -1, rx42_done86
    lt rx42_pos, 0, rx42_fail88
    eq $I19, 0, rx42_fail88
    nqp_islist $I20, rx42_cstack
    unless $I20, rx42_jump89
    elements $I18, rx42_bstack
    le $I18, 0, rx42_cut90
    dec $I18
    set $I18, rx42_bstack[$I18]
  rx42_cut90:
    assign rx42_cstack, $I18
  rx42_jump89:
    jump $I19
  rx42_done86:
    rx42_cur."!cursor_fail"()
    .return (rx42_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_9_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 68
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx48_start
    .local string rx48_tgt
    .local int rx48_pos
    .local int rx48_off
    .local int rx48_eos
    .local int rx48_rep
    .local pmc rx48_cur
    .local pmc rx48_curclass
    .local pmc rx48_bstack
    .local pmc rx48_cstack
    rx48_start = self."!cursor_start_all"()
    set rx48_cur, rx48_start[0]
    set rx48_tgt, rx48_start[1]
    set rx48_pos, rx48_start[2]
    set rx48_curclass, rx48_start[3]
    set rx48_bstack, rx48_start[4]
    set $I19, rx48_start[5]
    store_lex unicode:"$\x{a2}", rx48_cur
    length rx48_eos, rx48_tgt
    eq $I19, 1, rx48_restart104
    gt rx48_pos, rx48_eos, rx48_fail105
    repr_get_attr_int $I11, self, rx48_curclass, "$!from"
    ne $I11, -1, rxscan49_done111
    goto rxscan49_scan110
  rxscan49_loop109:
    inc rx48_pos
    gt rx48_pos, rx48_eos, rx48_fail105
    repr_bind_attr_int rx48_cur, rx48_curclass, "$!from", rx48_pos
  rxscan49_scan110:
    nqp_rxmark rx48_bstack, rxscan49_loop109, rx48_pos, 0
  rxscan49_done111:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt50_0113
    nqp_push_label $P11, alt50_1115
    nqp_push_label $P11, alt50_2117
    nqp_rxmark rx48_bstack, alt50_end112, -1, 0
    rx48_cur."!alt"(rx48_pos, "alt_nfa__3_1360623852.714", $P11)
    goto rx48_fail105
  alt50_0113:
    ge rx48_pos, rx48_eos, rx48_fail105
    substr $S11, rx48_tgt, rx48_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx48_fail105
    repr_bind_attr_int rx48_cur, rx48_curclass, "$!pos", rx48_pos
    $P11 = rx48_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx48_curclass, "$!pos"
    lt $I11, 0, rx48_fail105
    nqp_rxmark rx48_bstack, rxsubrule51_pass114, -1, 0
  rxsubrule51_pass114:
    rx48_cstack = rx48_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx48_pos, $P11, rx48_curclass, "$!pos"
    goto alt50_end112
  alt50_1115:
    ge rx48_pos, rx48_eos, rx48_fail105
    substr $S11, rx48_tgt, rx48_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx48_fail105
    repr_bind_attr_int rx48_cur, rx48_curclass, "$!pos", rx48_pos
    $P11 = rx48_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx48_curclass, "$!pos"
    lt $I11, 0, rx48_fail105
    nqp_rxmark rx48_bstack, rxsubrule52_pass116, -1, 0
  rxsubrule52_pass116:
    rx48_cstack = rx48_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx48_pos, $P11, rx48_curclass, "$!pos"
    goto alt50_end112
  alt50_2117:
    nqp_rxmark rx48_bstack, rxcap53_fail119, rx48_pos, 0
    nqp_rxmark rx48_bstack, rxquantr54_done121, -1, 0
  rxquantr54_loop120:
    ge rx48_pos, rx48_eos, rx48_fail105
    is_cclass $I11, .CCLASS_NUMERIC, rx48_tgt, rx48_pos
    unless $I11, rx48_fail105
    add rx48_pos, 1
    nqp_rxpeek $I19, rx48_bstack, rxquantr54_done121
    inc $I19
    inc $I19
    set rx48_rep, rx48_bstack[$I19]
    nqp_rxcommit rx48_bstack, rxquantr54_done121
    inc rx48_rep
    nqp_rxmark rx48_bstack, rxquantr54_done121, rx48_pos, rx48_rep
    goto rxquantr54_loop120
  rxquantr54_done121:
    nqp_rxpeek $I19, rx48_bstack, rxcap53_fail119
    inc $I19
    set $I11, rx48_bstack[$I19]
    repr_bind_attr_int rx48_cur, rx48_curclass, "$!pos", rx48_pos
    $P11 = rx48_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx48_pos)
    rx48_cstack = rx48_cur."!cursor_capture"($P11, "val")
    goto rxcap53_done118
  rxcap53_fail119:
    goto rx48_fail105
  rxcap53_done118:
    goto alt50_end112
  alt50_end112:
    nqp_rxcommit rx48_bstack, alt50_end112
    rx48_cur."!cursor_pass"(rx48_pos, "arg", 'backtrack'=>1)
    .return (rx48_cur)
  rx48_restart104:
    repr_get_attr_obj rx48_cstack, rx48_cur, rx48_curclass, "$!cstack"
  rx48_fail105:
    unless rx48_bstack, rx48_done103
    pop $I19, rx48_bstack
    if_null rx48_cstack, rx48_cstack_done108
    unless rx48_cstack, rx48_cstack_done108
    dec $I19
    set $P11, rx48_cstack[$I19]
  rx48_cstack_done108:
    pop rx48_rep, rx48_bstack
    pop rx48_pos, rx48_bstack
    pop $I19, rx48_bstack
    lt rx48_pos, -1, rx48_done103
    lt rx48_pos, 0, rx48_fail105
    eq $I19, 0, rx48_fail105
    nqp_islist $I20, rx48_cstack
    unless $I20, rx48_jump106
    elements $I18, rx48_bstack
    le $I18, 0, rx48_cut107
    dec $I18
    set $I18, rx48_bstack[$I18]
  rx48_cut107:
    assign rx48_cstack, $I18
  rx48_jump106:
    jump $I19
  rx48_done103:
    rx48_cur."!cursor_fail"()
    .return (rx48_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_10_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 76
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx55_start
    .local string rx55_tgt
    .local int rx55_pos
    .local int rx55_off
    .local int rx55_eos
    .local int rx55_rep
    .local pmc rx55_cur
    .local pmc rx55_curclass
    .local pmc rx55_bstack
    .local pmc rx55_cstack
    rx55_start = self."!cursor_start_all"()
    set rx55_cur, rx55_start[0]
    set rx55_tgt, rx55_start[1]
    set rx55_pos, rx55_start[2]
    set rx55_curclass, rx55_start[3]
    set rx55_bstack, rx55_start[4]
    set $I19, rx55_start[5]
    store_lex unicode:"$\x{a2}", rx55_cur
    length rx55_eos, rx55_tgt
    eq $I19, 1, rx55_restart124
    gt rx55_pos, rx55_eos, rx55_fail125
    repr_get_attr_int $I11, self, rx55_curclass, "$!from"
    ne $I11, -1, rxscan56_done131
    goto rxscan56_scan130
  rxscan56_loop129:
    inc rx55_pos
    gt rx55_pos, rx55_eos, rx55_fail125
    repr_bind_attr_int rx55_cur, rx55_curclass, "$!from", rx55_pos
  rxscan56_scan130:
    nqp_rxmark rx55_bstack, rxscan56_loop129, rx55_pos, 0
  rxscan56_done131:
    repr_bind_attr_int rx55_cur, rx55_curclass, "$!pos", rx55_pos
    $P11 = rx55_cur."ws"()
    repr_get_attr_int $I11, $P11, rx55_curclass, "$!pos"
    lt $I11, 0, rx55_fail125
    repr_get_attr_int rx55_pos, $P11, rx55_curclass, "$!pos"
    repr_bind_attr_int rx55_cur, rx55_curclass, "$!pos", rx55_pos
    $P11 = rx55_cur."arg"()
    repr_get_attr_int $I11, $P11, rx55_curclass, "$!pos"
    lt $I11, 0, rx55_fail125
    nqp_rxmark rx55_bstack, rxsubrule58_pass133, -1, 0
  rxsubrule58_pass133:
    rx55_cstack = rx55_cur."!cursor_capture"($P11, "arg")
    repr_get_attr_int rx55_pos, $P11, rx55_curclass, "$!pos"
    repr_bind_attr_int rx55_cur, rx55_curclass, "$!pos", rx55_pos
    $P11 = rx55_cur."ws"()
    repr_get_attr_int $I11, $P11, rx55_curclass, "$!pos"
    lt $I11, 0, rx55_fail125
    repr_get_attr_int rx55_pos, $P11, rx55_curclass, "$!pos"
    nqp_rxmark rx55_bstack, rxquantr60_done136, rx55_pos, 0
  rxquantr60_loop135:
    repr_bind_attr_int rx55_cur, rx55_curclass, "$!pos", rx55_pos
    $P11 = rx55_cur."ws"()
    repr_get_attr_int $I11, $P11, rx55_curclass, "$!pos"
    lt $I11, 0, rx55_fail125
    repr_get_attr_int rx55_pos, $P11, rx55_curclass, "$!pos"
    add $I11, rx55_pos, 1
    gt $I11, rx55_eos, rx55_fail125
    substr $S10, rx55_tgt, rx55_pos, 1
    ne $S10, ucs4:",", rx55_fail125
    add rx55_pos, 1
    repr_bind_attr_int rx55_cur, rx55_curclass, "$!pos", rx55_pos
    $P11 = rx55_cur."ws"()
    repr_get_attr_int $I11, $P11, rx55_curclass, "$!pos"
    lt $I11, 0, rx55_fail125
    repr_get_attr_int rx55_pos, $P11, rx55_curclass, "$!pos"
    repr_bind_attr_int rx55_cur, rx55_curclass, "$!pos", rx55_pos
    $P11 = rx55_cur."arg"()
    repr_get_attr_int $I11, $P11, rx55_curclass, "$!pos"
    lt $I11, 0, rx55_fail125
    nqp_rxmark rx55_bstack, rxsubrule63_pass139, -1, 0
  rxsubrule63_pass139:
    rx55_cstack = rx55_cur."!cursor_capture"($P11, "arg")
    repr_get_attr_int rx55_pos, $P11, rx55_curclass, "$!pos"
    nqp_rxpeek $I19, rx55_bstack, rxquantr60_done136
    inc $I19
    inc $I19
    set rx55_rep, rx55_bstack[$I19]
    nqp_rxcommit rx55_bstack, rxquantr60_done136
    inc rx55_rep
    nqp_rxmark rx55_bstack, rxquantr60_done136, rx55_pos, rx55_rep
    goto rxquantr60_loop135
  rxquantr60_done136:
    repr_bind_attr_int rx55_cur, rx55_curclass, "$!pos", rx55_pos
    $P11 = rx55_cur."ws"()
    repr_get_attr_int $I11, $P11, rx55_curclass, "$!pos"
    lt $I11, 0, rx55_fail125
    repr_get_attr_int rx55_pos, $P11, rx55_curclass, "$!pos"
    rx55_cur."!cursor_pass"(rx55_pos, "arglist", 'backtrack'=>1)
    .return (rx55_cur)
  rx55_restart124:
    repr_get_attr_obj rx55_cstack, rx55_cur, rx55_curclass, "$!cstack"
  rx55_fail125:
    unless rx55_bstack, rx55_done123
    pop $I19, rx55_bstack
    if_null rx55_cstack, rx55_cstack_done128
    unless rx55_cstack, rx55_cstack_done128
    dec $I19
    set $P11, rx55_cstack[$I19]
  rx55_cstack_done128:
    pop rx55_rep, rx55_bstack
    pop rx55_pos, rx55_bstack
    pop $I19, rx55_bstack
    lt rx55_pos, -1, rx55_done123
    lt rx55_pos, 0, rx55_fail125
    eq $I19, 0, rx55_fail125
    nqp_islist $I20, rx55_cstack
    unless $I20, rx55_jump126
    elements $I18, rx55_bstack
    le $I18, 0, rx55_cut127
    dec $I18
    set $I18, rx55_bstack[$I18]
  rx55_cut127:
    assign rx55_cstack, $I18
  rx55_jump126:
    jump $I19
  rx55_done123:
    rx55_cur."!cursor_fail"()
    .return (rx55_cur) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_11_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 78
    .param pmc _lex_param_0 
    .lex "%*RX", $P101 
    .lex "$*W", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    .local pmc fb_tmp_10 
    .local pmc fb_tmp_11 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local pmc rx65_start
    .local string rx65_tgt
    .local int rx65_pos
    .local int rx65_off
    .local int rx65_eos
    .local int rx65_rep
    .local pmc rx65_cur
    .local pmc rx65_curclass
    .local pmc rx65_bstack
    .local pmc rx65_cstack
    rx65_start = self."!cursor_start_all"()
    set rx65_cur, rx65_start[0]
    set rx65_tgt, rx65_start[1]
    set rx65_pos, rx65_start[2]
    set rx65_curclass, rx65_start[3]
    set rx65_bstack, rx65_start[4]
    set $I19, rx65_start[5]
    store_lex unicode:"$\x{a2}", rx65_cur
    length rx65_eos, rx65_tgt
    eq $I19, 1, rx65_restart143
    gt rx65_pos, rx65_eos, rx65_fail144
    repr_get_attr_int $I11, self, rx65_curclass, "$!from"
    ne $I11, -1, rxscan66_done150
    goto rxscan66_scan149
  rxscan66_loop148:
    inc rx65_pos
    gt rx65_pos, rx65_eos, rx65_fail144
    repr_bind_attr_int rx65_cur, rx65_curclass, "$!from", rx65_pos
  rxscan66_scan149:
    nqp_rxmark rx65_bstack, rxscan66_loop148, rx65_pos, 0
  rxscan66_done150:
    repr_bind_attr_int rx65_cur, rx65_curclass, "$!pos", rx65_pos
    store_lex unicode:"$\x{a2}", rx65_cur
    unless_null $P101, fallback151
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5003, $P5004
    set fb_tmp_10, $P5003
    repr_defined $I5001, fb_tmp_10
    unless $I5001 goto if67_else152 
    set $P5005, fb_tmp_10["%RX"]
    set $P5007, $P5005
    goto if67_end153
  if67_else152:
    null $P5006
    set $P5007, $P5006
  if67_end153:
    unless_null $P5007, vivi_68154
    nqp_get_sc_object $P5009, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%RX"], $P5010
    set $P5007, $P5010
  vivi_68154:
    unless_null $P5007, vivi_69155
    die "Contextual %*RX not found"
    box $P5011, "Contextual %*RX not found"
    set $P5007, $P5011
  vivi_69155:
    set $P101, $P5007
  fallback151:
    repr_bind_attr_int rx65_cur, rx65_curclass, "$!pos", rx65_pos
    store_lex unicode:"$\x{a2}", rx65_cur
.annotate 'line', 80
    nqp_get_sc_object $P5015, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5014, $P5015, "QRegex"
    nqp_get_package_through_who $P5013, $P5014, "P6Regex"
    get_who $P5012, $P5013
    set fb_tmp_11, $P5012
    repr_defined $I5002, fb_tmp_11
    unless $I5002 goto if70_else156 
    set $P5016, fb_tmp_11["World"]
    set $P5018, $P5016
    goto if70_end157
  if70_else156:
    null $P5017
    set $P5018, $P5017
  if70_end157:
    unless_null $P5018, vivi_71158
    nqp_get_sc_object $P5019, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5018, $P5019
  vivi_71158:
    nqp_decontainerize $P5020, _lex_param_0
    $P5021 = $P5020."target"()
    set $S5002, $P5021
    nqp_sha1 $S5001, $S5002
    $P5022 = $P5018."new"($S5001 :named("handle"))
    set $P102, $P5022
    repr_bind_attr_int rx65_cur, rx65_curclass, "$!pos", rx65_pos
    $P11 = rx65_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx65_curclass, "$!pos"
    lt $I11, 0, rx65_fail144
    nqp_rxmark rx65_bstack, rxsubrule72_pass159, -1, 0
  rxsubrule72_pass159:
    rx65_cstack = rx65_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx65_pos, $P11, rx65_curclass, "$!pos"
  alt73_0161:
    nqp_rxmark rx65_bstack, alt73_1163, rx65_pos, 0
    lt rx65_pos, rx65_eos, rx65_fail144
    goto alt73_end160
  alt73_1163:
    repr_bind_attr_int rx65_cur, rx65_curclass, "$!pos", rx65_pos
    $P11 = rx65_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx65_curclass, "$!pos"
    lt $I11, 0, rx65_fail144
    repr_get_attr_int rx65_pos, $P11, rx65_curclass, "$!pos"
  alt73_end160:
    rx65_cur."!cursor_pass"(rx65_pos, "TOP", 'backtrack'=>1)
    .return (rx65_cur)
  rx65_restart143:
    repr_get_attr_obj rx65_cstack, rx65_cur, rx65_curclass, "$!cstack"
  rx65_fail144:
    unless rx65_bstack, rx65_done142
    pop $I19, rx65_bstack
    if_null rx65_cstack, rx65_cstack_done147
    unless rx65_cstack, rx65_cstack_done147
    dec $I19
    set $P11, rx65_cstack[$I19]
  rx65_cstack_done147:
    pop rx65_rep, rx65_bstack
    pop rx65_pos, rx65_bstack
    pop $I19, rx65_bstack
    lt rx65_pos, -1, rx65_done142
    lt rx65_pos, 0, rx65_fail144
    eq $I19, 0, rx65_fail144
    nqp_islist $I20, rx65_cstack
    unless $I20, rx65_jump145
    elements $I18, rx65_bstack
    le $I18, 0, rx65_cut146
    dec $I18
    set $I18, rx65_bstack[$I18]
  rx65_cut146:
    assign rx65_cstack, $I18
  rx65_jump145:
    jump $I19
  rx65_done142:
    rx65_cur."!cursor_fail"()
    .return (rx65_cur) 
.end
.HLL "nqp"
.namespace []
.sub "nibbler" :subid("cuid_12_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 85
    .param pmc _lex_param_0 
    .const 'Sub' $P5020 = 'cuid_182_1360623852.546' 
    capture_lex $P5020 
    .const 'Sub' $P5020 = 'cuid_13_1360623852.546' 
    capture_lex $P5020 
    .const 'Sub' $P5020 = 'cuid_183_1360623852.546' 
    capture_lex $P5020 
    .lex "$OLDRX", $P101 
    .lex "%*RX", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    .local pmc fb_tmp_12 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    set self, _lex_param_0
    .local pmc rx76_start
    .local string rx76_tgt
    .local int rx76_pos
    .local int rx76_off
    .local int rx76_eos
    .local int rx76_rep
    .local pmc rx76_cur
    .local pmc rx76_curclass
    .local pmc rx76_bstack
    .local pmc rx76_cstack
    rx76_start = self."!cursor_start_all"()
    set rx76_cur, rx76_start[0]
    set rx76_tgt, rx76_start[1]
    set rx76_pos, rx76_start[2]
    set rx76_curclass, rx76_start[3]
    set rx76_bstack, rx76_start[4]
    set $I19, rx76_start[5]
    store_lex unicode:"$\x{a2}", rx76_cur
    length rx76_eos, rx76_tgt
    eq $I19, 1, rx76_restart167
    gt rx76_pos, rx76_eos, rx76_fail168
    repr_get_attr_int $I11, self, rx76_curclass, "$!from"
    ne $I11, -1, rxscan77_done174
    goto rxscan77_scan173
  rxscan77_loop172:
    inc rx76_pos
    gt rx76_pos, rx76_eos, rx76_fail168
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!from", rx76_pos
  rxscan77_scan173:
    nqp_rxmark rx76_bstack, rxscan77_loop172, rx76_pos, 0
  rxscan77_done174:
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!pos", rx76_pos
    store_lex unicode:"$\x{a2}", rx76_cur
    find_dynamic_lex $P5003, "%*RX"
    set $P101, $P5003
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!pos", rx76_pos
    store_lex unicode:"$\x{a2}", rx76_cur
    unless_null $P102, fallback175
    nqp_get_sc_object $P5005, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5004, $P5005
    set fb_tmp_12, $P5004
    repr_defined $I5001, fb_tmp_12
    unless $I5001 goto if78_else176 
    set $P5006, fb_tmp_12["%RX"]
    set $P5008, $P5006
    goto if78_end177
  if78_else176:
    null $P5007
    set $P5008, $P5007
  if78_end177:
    unless_null $P5008, vivi_79178
    nqp_get_sc_object $P5010, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5009, $P5010
    new $P5011, 'Hash'
    set $P5009["%RX"], $P5011
    set $P5008, $P5011
  vivi_79178:
    unless_null $P5008, vivi_80179
    die "Contextual %*RX not found"
    box $P5012, "Contextual %*RX not found"
    set $P5008, $P5012
  vivi_80179:
    set $P102, $P5008
  fallback175:
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!pos", rx76_pos
    store_lex unicode:"$\x{a2}", rx76_cur
    $P5013 = $P103."MATCH"()
    set $P104, $P5013
    .const 'Sub' $P5014 = 'cuid_182_1360623852.546' 
    capture_lex $P5014
    $P5015 = $P5014()
    nqp_rxmark rx76_bstack, rxquantr84_done189, rx76_pos, 0
  rxquantr84_loop188:
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!pos", rx76_pos
    $P11 = rx76_cur."ws"()
    repr_get_attr_int $I11, $P11, rx76_curclass, "$!pos"
    lt $I11, 0, rx76_fail168
    repr_get_attr_int rx76_pos, $P11, rx76_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt86_0192
    nqp_push_label $P11, alt86_1193
    nqp_push_label $P11, alt86_2194
    nqp_push_label $P11, alt86_3195
    nqp_rxmark rx76_bstack, alt86_end191, -1, 0
    rx76_cur."!alt"(rx76_pos, "alt_nfa__4_1360623852.773", $P11)
    goto rx76_fail168
  alt86_0192:
    add $I11, rx76_pos, 2
    gt $I11, rx76_eos, rx76_fail168
    substr $S10, rx76_tgt, rx76_pos, 2
    ne $S10, ucs4:"||", rx76_fail168
    add rx76_pos, 2
    goto alt86_end191
  alt86_1193:
    add $I11, rx76_pos, 1
    gt $I11, rx76_eos, rx76_fail168
    substr $S10, rx76_tgt, rx76_pos, 1
    ne $S10, ucs4:"|", rx76_fail168
    add rx76_pos, 1
    goto alt86_end191
  alt86_2194:
    add $I11, rx76_pos, 2
    gt $I11, rx76_eos, rx76_fail168
    substr $S10, rx76_tgt, rx76_pos, 2
    ne $S10, ucs4:"&&", rx76_fail168
    add rx76_pos, 2
    goto alt86_end191
  alt86_3195:
    add $I11, rx76_pos, 1
    gt $I11, rx76_eos, rx76_fail168
    substr $S10, rx76_tgt, rx76_pos, 1
    ne $S10, ucs4:"&", rx76_fail168
    add rx76_pos, 1
    goto alt86_end191
  alt86_end191:
    nqp_rxcommit rx76_bstack, alt86_end191
    nqp_rxpeek $I19, rx76_bstack, rxquantr84_done189
    inc $I19
    inc $I19
    set rx76_rep, rx76_bstack[$I19]
    nqp_rxcommit rx76_bstack, rxquantr84_done189
    inc rx76_rep
  rxquantr84_done189:
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!pos", rx76_pos
    $P11 = rx76_cur."termaltseq"()
    repr_get_attr_int $I11, $P11, rx76_curclass, "$!pos"
    lt $I11, 0, rx76_fail168
    nqp_rxmark rx76_bstack, rxsubrule87_pass196, -1, 0
  rxsubrule87_pass196:
    rx76_cstack = rx76_cur."!cursor_capture"($P11, "termaltseq")
    repr_get_attr_int rx76_pos, $P11, rx76_curclass, "$!pos"
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!pos", rx76_pos
    $P11 = rx76_cur."ws"()
    repr_get_attr_int $I11, $P11, rx76_curclass, "$!pos"
    lt $I11, 0, rx76_fail168
    repr_get_attr_int rx76_pos, $P11, rx76_curclass, "$!pos"
  alt89_0199:
    nqp_rxmark rx76_bstack, alt89_1200, rx76_pos, 0
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!pos", rx76_pos
    $P11 = rx76_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx76_curclass, "$!pos"
    lt $I11, 0, rx76_fail168
    goto alt89_end198
  alt89_1200:
    nqp_rxmark rx76_bstack, alt89_2203, rx76_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx76_tgt, rx76_pos
    if $I11, rxanchor90_done201
    ne rx76_pos, rx76_eos, rx76_fail168
    eq rx76_pos, 0, rxanchor90_done201
    sub $I11, rx76_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx76_tgt, $I11
    if $I11, rx76_fail168
  rxanchor90_done201:
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!pos", rx76_pos
    $P11 = rx76_cur."panic"("Regex not terminated")
    repr_get_attr_int $I11, $P11, rx76_curclass, "$!pos"
    lt $I11, 0, rx76_fail168
    repr_get_attr_int rx76_pos, $P11, rx76_curclass, "$!pos"
    goto alt89_end198
  alt89_2203:
    nqp_rxmark rx76_bstack, alt89_3218, rx76_pos, 0
    .const 'Sub' $P5016 = 'cuid_13_1360623852.546' 
    capture_lex $P5016
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!pos", rx76_pos
    $P11 = rx76_cur.$P5016()
    repr_get_attr_int $I11, $P11, rx76_curclass, "$!pos"
    lt $I11, 0, rx76_fail168
    nqp_rxmark rx76_bstack, rxsubrule94_pass214, -1, 0
  rxsubrule94_pass214:
    rx76_cstack = rx76_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx76_pos, $P11, rx76_curclass, "$!pos"
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!pos", rx76_pos
    store_lex unicode:"$\x{a2}", rx76_cur
    $P5017 = $P103."MATCH"()
    set $P104, $P5017
    .const 'Sub' $P5018 = 'cuid_183_1360623852.546' 
    capture_lex $P5018
    $P5019 = $P5018()
    goto alt89_end198
  alt89_3218:
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!pos", rx76_pos
    $P11 = rx76_cur."panic"("Regex not terminated")
    repr_get_attr_int $I11, $P11, rx76_curclass, "$!pos"
    lt $I11, 0, rx76_fail168
    repr_get_attr_int rx76_pos, $P11, rx76_curclass, "$!pos"
  alt89_end198:
    rx76_cur."!cursor_pass"(rx76_pos, "nibbler", 'backtrack'=>1)
    .return (rx76_cur)
  rx76_restart167:
    repr_get_attr_obj rx76_cstack, rx76_cur, rx76_curclass, "$!cstack"
  rx76_fail168:
    unless rx76_bstack, rx76_done166
    pop $I19, rx76_bstack
    if_null rx76_cstack, rx76_cstack_done171
    unless rx76_cstack, rx76_cstack_done171
    dec $I19
    set $P11, rx76_cstack[$I19]
  rx76_cstack_done171:
    pop rx76_rep, rx76_bstack
    pop rx76_pos, rx76_bstack
    pop $I19, rx76_bstack
    lt rx76_pos, -1, rx76_done166
    lt rx76_pos, 0, rx76_fail168
    eq $I19, 0, rx76_fail168
    nqp_islist $I20, rx76_cstack
    unless $I20, rx76_jump169
    elements $I18, rx76_bstack
    le $I18, 0, rx76_cut170
    dec $I18
    set $I18, rx76_bstack[$I18]
  rx76_cut170:
    assign rx76_cstack, $I18
  rx76_jump169:
    jump $I19
  rx76_done166:
    rx76_cur."!cursor_fail"()
    .return (rx76_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_182_1360623852.546") :anon :lex :outer("cuid_12_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 88
    .const 'Sub' $P5007 = 'cuid_181_1360623852.546' 
    capture_lex $P5007 
    find_lex $P5004, "$OLDRX"
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next185:
    unless $P5003, for_done187
    shift $P5006, $P5003
  for_redo186:
    .const 'Sub' $P5005 = 'cuid_181_1360623852.546' 
    capture_lex $P5005
    $P5001 = $P5005($P5006)
    goto for_next185
  for_done187:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_181_1360623852.546") :anon :lex :outer("cuid_182_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 89
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_13 
    find_dynamic_lex $P5001, "%*RX"
    unless_null $P5001, fallback180
    nqp_get_sc_object $P5003, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5002, $P5003
    set fb_tmp_13, $P5002
    repr_defined $I5001, fb_tmp_13
    unless $I5001 goto if81_else181 
    set $P5004, fb_tmp_13["%RX"]
    set $P5006, $P5004
    goto if81_end182
  if81_else181:
    null $P5005
    set $P5006, $P5005
  if81_end182:
    unless_null $P5006, vivi_82183
    nqp_get_sc_object $P5008, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%RX"], $P5009
    set $P5006, $P5009
  vivi_82183:
    unless_null $P5006, vivi_83184
    die "Contextual %*RX not found"
    box $P5010, "Contextual %*RX not found"
    set $P5006, $P5010
  vivi_83184:
    set $P5001, $P5006
  fallback180:
    $P5011 = _lex_param_0."key"()
    set $S5001, $P5011
    $P5012 = _lex_param_0."value"()
    set $P5001[$S5001], $P5012
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_13_1360623852.546") :anon :lex :outer("cuid_12_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx92_start
    .local string rx92_tgt
    .local int rx92_pos
    .local int rx92_off
    .local int rx92_eos
    .local int rx92_rep
    .local pmc rx92_cur
    .local pmc rx92_curclass
    .local pmc rx92_bstack
    .local pmc rx92_cstack
    rx92_start = self."!cursor_start_all"()
    set rx92_cur, rx92_start[0]
    set rx92_tgt, rx92_start[1]
    set rx92_pos, rx92_start[2]
    set rx92_curclass, rx92_start[3]
    set rx92_bstack, rx92_start[4]
    set $I19, rx92_start[5]
    store_lex unicode:"$\x{a2}", rx92_cur
    length rx92_eos, rx92_tgt
    eq $I19, 1, rx92_restart206
    gt rx92_pos, rx92_eos, rx92_fail207
    repr_get_attr_int $I11, self, rx92_curclass, "$!from"
    ne $I11, -1, rxscan93_done213
    goto rxscan93_scan212
  rxscan93_loop211:
    inc rx92_pos
    gt rx92_pos, rx92_eos, rx92_fail207
    repr_bind_attr_int rx92_cur, rx92_curclass, "$!from", rx92_pos
  rxscan93_scan212:
    nqp_rxmark rx92_bstack, rxscan93_loop211, rx92_pos, 0
  rxscan93_done213:
    ge rx92_pos, rx92_eos, rx92_fail207
    is_cclass $I11, .CCLASS_WORD, rx92_tgt, rx92_pos
    if $I11, rx92_fail207
    add rx92_pos, 1
    rx92_cur."!cursor_pass"(rx92_pos, 'backtrack'=>1)
    .return (rx92_cur)
  rx92_restart206:
    repr_get_attr_obj rx92_cstack, rx92_cur, rx92_curclass, "$!cstack"
  rx92_fail207:
    unless rx92_bstack, rx92_done205
    pop $I19, rx92_bstack
    if_null rx92_cstack, rx92_cstack_done210
    unless rx92_cstack, rx92_cstack_done210
    dec $I19
    set $P11, rx92_cstack[$I19]
  rx92_cstack_done210:
    pop rx92_rep, rx92_bstack
    pop rx92_pos, rx92_bstack
    pop $I19, rx92_bstack
    lt rx92_pos, -1, rx92_done205
    lt rx92_pos, 0, rx92_fail207
    eq $I19, 0, rx92_fail207
    nqp_islist $I20, rx92_cstack
    unless $I20, rx92_jump208
    elements $I18, rx92_bstack
    le $I18, 0, rx92_cut209
    dec $I18
    set $I18, rx92_bstack[$I18]
  rx92_cut209:
    assign rx92_cstack, $I18
  rx92_jump208:
    jump $I19
  rx92_done205:
    rx92_cur."!cursor_fail"()
    .return (rx92_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_183_1360623852.546") :anon :lex :outer("cuid_12_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 96
    .local pmc fb_tmp_14 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$/"
    set fb_tmp_14, $P5003
    repr_defined $I5001, fb_tmp_14
    unless $I5001 goto if95_else215 
    set $P5004, fb_tmp_14[0]
    set $P5006, $P5004
    goto if95_end216
  if95_else215:
    null $P5005
    set $P5006, $P5005
  if95_end216:
    unless_null $P5006, vivi_96217
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_96217:
    set $S5001, $P5006
    $P5008 = $P5001."throw_unrecognized_metachar"($S5001)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "infixstopper" :subid("cuid_14_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 101
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_15_1360623852.546' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_16_1360623852.546' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_17_1360623852.546' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx98_start
    .local string rx98_tgt
    .local int rx98_pos
    .local int rx98_off
    .local int rx98_eos
    .local int rx98_rep
    .local pmc rx98_cur
    .local pmc rx98_curclass
    .local pmc rx98_bstack
    .local pmc rx98_cstack
    rx98_start = self."!cursor_start_all"()
    set rx98_cur, rx98_start[0]
    set rx98_tgt, rx98_start[1]
    set rx98_pos, rx98_start[2]
    set rx98_curclass, rx98_start[3]
    set rx98_bstack, rx98_start[4]
    set $I19, rx98_start[5]
    store_lex unicode:"$\x{a2}", rx98_cur
    length rx98_eos, rx98_tgt
    eq $I19, 1, rx98_restart222
    gt rx98_pos, rx98_eos, rx98_fail223
    repr_get_attr_int $I11, self, rx98_curclass, "$!from"
    ne $I11, -1, rxscan99_done229
    goto rxscan99_scan228
  rxscan99_loop227:
    inc rx98_pos
    gt rx98_pos, rx98_eos, rx98_fail223
    repr_bind_attr_int rx98_cur, rx98_curclass, "$!from", rx98_pos
  rxscan99_scan228:
    nqp_rxmark rx98_bstack, rxscan99_loop227, rx98_pos, 0
  rxscan99_done229:
    rx98_cur."!dba"(rx98_pos, "infix stopper")
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt100_0231
    nqp_push_label $P11, alt100_1246
    nqp_push_label $P11, alt100_2257
    nqp_rxmark rx98_bstack, alt100_end230, -1, 0
    rx98_cur."!alt"(rx98_pos, "alt_nfa__5_1360623852.79", $P11)
    goto rx98_fail223
  alt100_0231:
    .const 'Sub' $P5001 = 'cuid_15_1360623852.546' 
    capture_lex $P5001
    repr_bind_attr_int rx98_cur, rx98_curclass, "$!pos", rx98_pos
    $P11 = rx98_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx98_curclass, "$!pos"
    lt $I11, 0, rx98_fail223
    goto alt100_end230
  alt100_1246:
    .const 'Sub' $P5002 = 'cuid_16_1360623852.546' 
    capture_lex $P5002
    repr_bind_attr_int rx98_cur, rx98_curclass, "$!pos", rx98_pos
    $P11 = rx98_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx98_curclass, "$!pos"
    lt $I11, 0, rx98_fail223
    goto alt100_end230
  alt100_2257:
    .const 'Sub' $P5003 = 'cuid_17_1360623852.546' 
    capture_lex $P5003
    repr_bind_attr_int rx98_cur, rx98_curclass, "$!pos", rx98_pos
    $P11 = rx98_cur."before"($P5003)
    repr_get_attr_int $I11, $P11, rx98_curclass, "$!pos"
    lt $I11, 0, rx98_fail223
    goto alt100_end230
  alt100_end230:
    rx98_cur."!cursor_pass"(rx98_pos, "infixstopper", 'backtrack'=>1)
    .return (rx98_cur)
  rx98_restart222:
    repr_get_attr_obj rx98_cstack, rx98_cur, rx98_curclass, "$!cstack"
  rx98_fail223:
    unless rx98_bstack, rx98_done221
    pop $I19, rx98_bstack
    if_null rx98_cstack, rx98_cstack_done226
    unless rx98_cstack, rx98_cstack_done226
    dec $I19
    set $P11, rx98_cstack[$I19]
  rx98_cstack_done226:
    pop rx98_rep, rx98_bstack
    pop rx98_pos, rx98_bstack
    pop $I19, rx98_bstack
    lt rx98_pos, -1, rx98_done221
    lt rx98_pos, 0, rx98_fail223
    eq $I19, 0, rx98_fail223
    nqp_islist $I20, rx98_cstack
    unless $I20, rx98_jump224
    elements $I18, rx98_bstack
    le $I18, 0, rx98_cut225
    dec $I18
    set $I18, rx98_bstack[$I18]
  rx98_cut225:
    assign rx98_cstack, $I18
  rx98_jump224:
    jump $I19
  rx98_done221:
    rx98_cur."!cursor_fail"()
    .return (rx98_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_15_1360623852.546") :anon :lex :outer("cuid_14_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx101_start
    .local string rx101_tgt
    .local int rx101_pos
    .local int rx101_off
    .local int rx101_eos
    .local int rx101_rep
    .local pmc rx101_cur
    .local pmc rx101_curclass
    .local pmc rx101_bstack
    .local pmc rx101_cstack
    rx101_start = self."!cursor_start_all"()
    set rx101_cur, rx101_start[0]
    set rx101_tgt, rx101_start[1]
    set rx101_pos, rx101_start[2]
    set rx101_curclass, rx101_start[3]
    set rx101_bstack, rx101_start[4]
    set $I19, rx101_start[5]
    store_lex unicode:"$\x{a2}", rx101_cur
    length rx101_eos, rx101_tgt
    eq $I19, 1, rx101_restart234
    gt rx101_pos, rx101_eos, rx101_fail235
    repr_get_attr_int $I11, self, rx101_curclass, "$!from"
    ne $I11, -1, rxscan102_done241
    goto rxscan102_scan240
  rxscan102_loop239:
    inc rx101_pos
    gt rx101_pos, rx101_eos, rx101_fail235
    repr_bind_attr_int rx101_cur, rx101_curclass, "$!from", rx101_pos
  rxscan102_scan240:
    nqp_rxmark rx101_bstack, rxscan102_loop239, rx101_pos, 0
  rxscan102_done241:
  alt103_0243:
    nqp_rxmark rx101_bstack, alt103_1244, rx101_pos, 0
    add $I11, rx101_pos, 1
    gt $I11, rx101_eos, rx101_fail235
    substr $S10, rx101_tgt, rx101_pos, 1
    ne $S10, ucs4:")", rx101_fail235
    add rx101_pos, 1
    goto alt103_end242
  alt103_1244:
    nqp_rxmark rx101_bstack, alt103_2245, rx101_pos, 0
    add $I11, rx101_pos, 1
    gt $I11, rx101_eos, rx101_fail235
    substr $S10, rx101_tgt, rx101_pos, 1
    ne $S10, ucs4:"}", rx101_fail235
    add rx101_pos, 1
    goto alt103_end242
  alt103_2245:
    add $I11, rx101_pos, 1
    gt $I11, rx101_eos, rx101_fail235
    substr $S10, rx101_tgt, rx101_pos, 1
    ne $S10, ucs4:"]", rx101_fail235
    add rx101_pos, 1
  alt103_end242:
    rx101_cur."!cursor_pass"(rx101_pos, 'backtrack'=>1)
    .return (rx101_cur)
  rx101_restart234:
    repr_get_attr_obj rx101_cstack, rx101_cur, rx101_curclass, "$!cstack"
  rx101_fail235:
    unless rx101_bstack, rx101_done233
    pop $I19, rx101_bstack
    if_null rx101_cstack, rx101_cstack_done238
    unless rx101_cstack, rx101_cstack_done238
    dec $I19
    set $P11, rx101_cstack[$I19]
  rx101_cstack_done238:
    pop rx101_rep, rx101_bstack
    pop rx101_pos, rx101_bstack
    pop $I19, rx101_bstack
    lt rx101_pos, -1, rx101_done233
    lt rx101_pos, 0, rx101_fail235
    eq $I19, 0, rx101_fail235
    nqp_islist $I20, rx101_cstack
    unless $I20, rx101_jump236
    elements $I18, rx101_bstack
    le $I18, 0, rx101_cut237
    dec $I18
    set $I18, rx101_bstack[$I18]
  rx101_cut237:
    assign rx101_cstack, $I18
  rx101_jump236:
    jump $I19
  rx101_done233:
    rx101_cur."!cursor_fail"()
    .return (rx101_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_16_1360623852.546") :anon :lex :outer("cuid_14_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx104_start
    .local string rx104_tgt
    .local int rx104_pos
    .local int rx104_off
    .local int rx104_eos
    .local int rx104_rep
    .local pmc rx104_cur
    .local pmc rx104_curclass
    .local pmc rx104_bstack
    .local pmc rx104_cstack
    rx104_start = self."!cursor_start_all"()
    set rx104_cur, rx104_start[0]
    set rx104_tgt, rx104_start[1]
    set rx104_pos, rx104_start[2]
    set rx104_curclass, rx104_start[3]
    set rx104_bstack, rx104_start[4]
    set $I19, rx104_start[5]
    store_lex unicode:"$\x{a2}", rx104_cur
    length rx104_eos, rx104_tgt
    eq $I19, 1, rx104_restart249
    gt rx104_pos, rx104_eos, rx104_fail250
    repr_get_attr_int $I11, self, rx104_curclass, "$!from"
    ne $I11, -1, rxscan105_done256
    goto rxscan105_scan255
  rxscan105_loop254:
    inc rx104_pos
    gt rx104_pos, rx104_eos, rx104_fail250
    repr_bind_attr_int rx104_cur, rx104_curclass, "$!from", rx104_pos
  rxscan105_scan255:
    nqp_rxmark rx104_bstack, rxscan105_loop254, rx104_pos, 0
  rxscan105_done256:
    add $I11, rx104_pos, 1
    gt $I11, rx104_eos, rx104_fail250
    substr $S10, rx104_tgt, rx104_pos, 1
    ne $S10, ucs4:">", rx104_fail250
    add rx104_pos, 1
    ge rx104_pos, rx104_eos, rx104_fail250
    substr $S11, rx104_tgt, rx104_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx104_fail250
    inc rx104_pos
    rx104_cur."!cursor_pass"(rx104_pos, 'backtrack'=>1)
    .return (rx104_cur)
  rx104_restart249:
    repr_get_attr_obj rx104_cstack, rx104_cur, rx104_curclass, "$!cstack"
  rx104_fail250:
    unless rx104_bstack, rx104_done248
    pop $I19, rx104_bstack
    if_null rx104_cstack, rx104_cstack_done253
    unless rx104_cstack, rx104_cstack_done253
    dec $I19
    set $P11, rx104_cstack[$I19]
  rx104_cstack_done253:
    pop rx104_rep, rx104_bstack
    pop rx104_pos, rx104_bstack
    pop $I19, rx104_bstack
    lt rx104_pos, -1, rx104_done248
    lt rx104_pos, 0, rx104_fail250
    eq $I19, 0, rx104_fail250
    nqp_islist $I20, rx104_cstack
    unless $I20, rx104_jump251
    elements $I18, rx104_bstack
    le $I18, 0, rx104_cut252
    dec $I18
    set $I18, rx104_bstack[$I18]
  rx104_cut252:
    assign rx104_cstack, $I18
  rx104_jump251:
    jump $I19
  rx104_done248:
    rx104_cur."!cursor_fail"()
    .return (rx104_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_17_1360623852.546") :anon :lex :outer("cuid_14_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx106_start
    .local string rx106_tgt
    .local int rx106_pos
    .local int rx106_off
    .local int rx106_eos
    .local int rx106_rep
    .local pmc rx106_cur
    .local pmc rx106_curclass
    .local pmc rx106_bstack
    .local pmc rx106_cstack
    rx106_start = self."!cursor_start_all"()
    set rx106_cur, rx106_start[0]
    set rx106_tgt, rx106_start[1]
    set rx106_pos, rx106_start[2]
    set rx106_curclass, rx106_start[3]
    set rx106_bstack, rx106_start[4]
    set $I19, rx106_start[5]
    store_lex unicode:"$\x{a2}", rx106_cur
    length rx106_eos, rx106_tgt
    eq $I19, 1, rx106_restart260
    gt rx106_pos, rx106_eos, rx106_fail261
    repr_get_attr_int $I11, self, rx106_curclass, "$!from"
    ne $I11, -1, rxscan107_done267
    goto rxscan107_scan266
  rxscan107_loop265:
    inc rx106_pos
    gt rx106_pos, rx106_eos, rx106_fail261
    repr_bind_attr_int rx106_cur, rx106_curclass, "$!from", rx106_pos
  rxscan107_scan266:
    nqp_rxmark rx106_bstack, rxscan107_loop265, rx106_pos, 0
  rxscan107_done267:
    repr_bind_attr_int rx106_cur, rx106_curclass, "$!pos", rx106_pos
    $P11 = rx106_cur."rxstopper"()
    repr_get_attr_int $I11, $P11, rx106_curclass, "$!pos"
    lt $I11, 0, rx106_fail261
    goto rxsubrule108_pass268
  rxsubrule108_back269:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx106_curclass, "$!pos"
    lt $I11, 0, rx106_fail261
  rxsubrule108_pass268:
    rx106_cstack = rx106_cur."!cursor_capture"($P11, "rxstopper")
    set_addr $I11, rxsubrule108_back269
    push rx106_bstack, $I11
    push rx106_bstack, 0
    push rx106_bstack, rx106_pos
    elements $I11, rx106_cstack
    push rx106_bstack, $I11
    repr_get_attr_int rx106_pos, $P11, rx106_curclass, "$!pos"
    rx106_cur."!cursor_pass"(rx106_pos, 'backtrack'=>1)
    .return (rx106_cur)
  rx106_restart260:
    repr_get_attr_obj rx106_cstack, rx106_cur, rx106_curclass, "$!cstack"
  rx106_fail261:
    unless rx106_bstack, rx106_done259
    pop $I19, rx106_bstack
    if_null rx106_cstack, rx106_cstack_done264
    unless rx106_cstack, rx106_cstack_done264
    dec $I19
    set $P11, rx106_cstack[$I19]
  rx106_cstack_done264:
    pop rx106_rep, rx106_bstack
    pop rx106_pos, rx106_bstack
    pop $I19, rx106_bstack
    lt rx106_pos, -1, rx106_done259
    lt rx106_pos, 0, rx106_fail261
    eq $I19, 0, rx106_fail261
    nqp_islist $I20, rx106_cstack
    unless $I20, rx106_jump262
    elements $I18, rx106_bstack
    le $I18, 0, rx106_cut263
    dec $I18
    set $I18, rx106_bstack[$I18]
  rx106_cut263:
    assign rx106_cstack, $I18
  rx106_jump262:
    jump $I19
  rx106_done259:
    rx106_cur."!cursor_fail"()
    .return (rx106_cur) 
.end
.HLL "nqp"
.namespace []
.sub "rxstopper" :subid("cuid_18_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 110
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx109_start
    .local string rx109_tgt
    .local int rx109_pos
    .local int rx109_off
    .local int rx109_eos
    .local int rx109_rep
    .local pmc rx109_cur
    .local pmc rx109_curclass
    .local pmc rx109_bstack
    .local pmc rx109_cstack
    rx109_start = self."!cursor_start_all"()
    set rx109_cur, rx109_start[0]
    set rx109_tgt, rx109_start[1]
    set rx109_pos, rx109_start[2]
    set rx109_curclass, rx109_start[3]
    set rx109_bstack, rx109_start[4]
    set $I19, rx109_start[5]
    store_lex unicode:"$\x{a2}", rx109_cur
    length rx109_eos, rx109_tgt
    eq $I19, 1, rx109_restart272
    gt rx109_pos, rx109_eos, rx109_fail273
    repr_get_attr_int $I11, self, rx109_curclass, "$!from"
    ne $I11, -1, rxscan110_done279
    goto rxscan110_scan278
  rxscan110_loop277:
    inc rx109_pos
    gt rx109_pos, rx109_eos, rx109_fail273
    repr_bind_attr_int rx109_cur, rx109_curclass, "$!from", rx109_pos
  rxscan110_scan278:
    nqp_rxmark rx109_bstack, rxscan110_loop277, rx109_pos, 0
  rxscan110_done279:
    lt rx109_pos, rx109_eos, rx109_fail273
    rx109_cur."!cursor_pass"(rx109_pos, "rxstopper", 'backtrack'=>1)
    .return (rx109_cur)
  rx109_restart272:
    repr_get_attr_obj rx109_cstack, rx109_cur, rx109_curclass, "$!cstack"
  rx109_fail273:
    unless rx109_bstack, rx109_done271
    pop $I19, rx109_bstack
    if_null rx109_cstack, rx109_cstack_done276
    unless rx109_cstack, rx109_cstack_done276
    dec $I19
    set $P11, rx109_cstack[$I19]
  rx109_cstack_done276:
    pop rx109_rep, rx109_bstack
    pop rx109_pos, rx109_bstack
    pop $I19, rx109_bstack
    lt rx109_pos, -1, rx109_done271
    lt rx109_pos, 0, rx109_fail273
    eq $I19, 0, rx109_fail273
    nqp_islist $I20, rx109_cstack
    unless $I20, rx109_jump274
    elements $I18, rx109_bstack
    le $I18, 0, rx109_cut275
    dec $I18
    set $I18, rx109_bstack[$I18]
  rx109_cut275:
    assign rx109_cstack, $I18
  rx109_jump274:
    jump $I19
  rx109_done271:
    rx109_cur."!cursor_fail"()
    .return (rx109_cur) 
.end
.HLL "nqp"
.namespace []
.sub "termaltseq" :subid("cuid_19_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 112
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx112_start
    .local string rx112_tgt
    .local int rx112_pos
    .local int rx112_off
    .local int rx112_eos
    .local int rx112_rep
    .local pmc rx112_cur
    .local pmc rx112_curclass
    .local pmc rx112_bstack
    .local pmc rx112_cstack
    rx112_start = self."!cursor_start_all"()
    set rx112_cur, rx112_start[0]
    set rx112_tgt, rx112_start[1]
    set rx112_pos, rx112_start[2]
    set rx112_curclass, rx112_start[3]
    set rx112_bstack, rx112_start[4]
    set $I19, rx112_start[5]
    store_lex unicode:"$\x{a2}", rx112_cur
    length rx112_eos, rx112_tgt
    eq $I19, 1, rx112_restart283
    gt rx112_pos, rx112_eos, rx112_fail284
    repr_get_attr_int $I11, self, rx112_curclass, "$!from"
    ne $I11, -1, rxscan113_done290
    goto rxscan113_scan289
  rxscan113_loop288:
    inc rx112_pos
    gt rx112_pos, rx112_eos, rx112_fail284
    repr_bind_attr_int rx112_cur, rx112_curclass, "$!from", rx112_pos
  rxscan113_scan289:
    nqp_rxmark rx112_bstack, rxscan113_loop288, rx112_pos, 0
  rxscan113_done290:
    repr_bind_attr_int rx112_cur, rx112_curclass, "$!pos", rx112_pos
    $P11 = rx112_cur."termconjseq"()
    repr_get_attr_int $I11, $P11, rx112_curclass, "$!pos"
    lt $I11, 0, rx112_fail284
    nqp_rxmark rx112_bstack, rxsubrule114_pass291, -1, 0
  rxsubrule114_pass291:
    rx112_cstack = rx112_cur."!cursor_capture"($P11, "termconjseq")
    repr_get_attr_int rx112_pos, $P11, rx112_curclass, "$!pos"
    nqp_rxmark rx112_bstack, rxquantr115_done293, rx112_pos, 0
  rxquantr115_loop292:
    add $I11, rx112_pos, 2
    gt $I11, rx112_eos, rx112_fail284
    substr $S10, rx112_tgt, rx112_pos, 2
    ne $S10, ucs4:"||", rx112_fail284
    add rx112_pos, 2
  alt116_0295:
    nqp_rxmark rx112_bstack, alt116_1297, rx112_pos, 0
    repr_bind_attr_int rx112_cur, rx112_curclass, "$!pos", rx112_pos
    $P11 = rx112_cur."termconjseq"()
    repr_get_attr_int $I11, $P11, rx112_curclass, "$!pos"
    lt $I11, 0, rx112_fail284
    nqp_rxmark rx112_bstack, rxsubrule117_pass296, -1, 0
  rxsubrule117_pass296:
    rx112_cstack = rx112_cur."!cursor_capture"($P11, "termconjseq")
    repr_get_attr_int rx112_pos, $P11, rx112_curclass, "$!pos"
    goto alt116_end294
  alt116_1297:
    repr_bind_attr_int rx112_cur, rx112_curclass, "$!pos", rx112_pos
    $P11 = rx112_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx112_curclass, "$!pos"
    lt $I11, 0, rx112_fail284
    repr_get_attr_int rx112_pos, $P11, rx112_curclass, "$!pos"
  alt116_end294:
    nqp_rxpeek $I19, rx112_bstack, rxquantr115_done293
    inc $I19
    inc $I19
    set rx112_rep, rx112_bstack[$I19]
    nqp_rxcommit rx112_bstack, rxquantr115_done293
    inc rx112_rep
    nqp_rxmark rx112_bstack, rxquantr115_done293, rx112_pos, rx112_rep
    goto rxquantr115_loop292
  rxquantr115_done293:
    rx112_cur."!cursor_pass"(rx112_pos, "termaltseq", 'backtrack'=>1)
    .return (rx112_cur)
  rx112_restart283:
    repr_get_attr_obj rx112_cstack, rx112_cur, rx112_curclass, "$!cstack"
  rx112_fail284:
    unless rx112_bstack, rx112_done282
    pop $I19, rx112_bstack
    if_null rx112_cstack, rx112_cstack_done287
    unless rx112_cstack, rx112_cstack_done287
    dec $I19
    set $P11, rx112_cstack[$I19]
  rx112_cstack_done287:
    pop rx112_rep, rx112_bstack
    pop rx112_pos, rx112_bstack
    pop $I19, rx112_bstack
    lt rx112_pos, -1, rx112_done282
    lt rx112_pos, 0, rx112_fail284
    eq $I19, 0, rx112_fail284
    nqp_islist $I20, rx112_cstack
    unless $I20, rx112_jump285
    elements $I18, rx112_bstack
    le $I18, 0, rx112_cut286
    dec $I18
    set $I18, rx112_bstack[$I18]
  rx112_cut286:
    assign rx112_cstack, $I18
  rx112_jump285:
    jump $I19
  rx112_done282:
    rx112_cur."!cursor_fail"()
    .return (rx112_cur) 
.end
.HLL "nqp"
.namespace []
.sub "termconjseq" :subid("cuid_20_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 117
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx119_start
    .local string rx119_tgt
    .local int rx119_pos
    .local int rx119_off
    .local int rx119_eos
    .local int rx119_rep
    .local pmc rx119_cur
    .local pmc rx119_curclass
    .local pmc rx119_bstack
    .local pmc rx119_cstack
    rx119_start = self."!cursor_start_all"()
    set rx119_cur, rx119_start[0]
    set rx119_tgt, rx119_start[1]
    set rx119_pos, rx119_start[2]
    set rx119_curclass, rx119_start[3]
    set rx119_bstack, rx119_start[4]
    set $I19, rx119_start[5]
    store_lex unicode:"$\x{a2}", rx119_cur
    length rx119_eos, rx119_tgt
    eq $I19, 1, rx119_restart301
    gt rx119_pos, rx119_eos, rx119_fail302
    repr_get_attr_int $I11, self, rx119_curclass, "$!from"
    ne $I11, -1, rxscan120_done308
    goto rxscan120_scan307
  rxscan120_loop306:
    inc rx119_pos
    gt rx119_pos, rx119_eos, rx119_fail302
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!from", rx119_pos
  rxscan120_scan307:
    nqp_rxmark rx119_bstack, rxscan120_loop306, rx119_pos, 0
  rxscan120_done308:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."termalt"()
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail302
    nqp_rxmark rx119_bstack, rxsubrule121_pass309, -1, 0
  rxsubrule121_pass309:
    rx119_cstack = rx119_cur."!cursor_capture"($P11, "termalt")
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
    nqp_rxmark rx119_bstack, rxquantr122_done311, rx119_pos, 0
  rxquantr122_loop310:
    add $I11, rx119_pos, 2
    gt $I11, rx119_eos, rx119_fail302
    substr $S10, rx119_tgt, rx119_pos, 2
    ne $S10, ucs4:"&&", rx119_fail302
    add rx119_pos, 2
  alt123_0313:
    nqp_rxmark rx119_bstack, alt123_1315, rx119_pos, 0
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."termalt"()
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail302
    nqp_rxmark rx119_bstack, rxsubrule124_pass314, -1, 0
  rxsubrule124_pass314:
    rx119_cstack = rx119_cur."!cursor_capture"($P11, "termalt")
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
    goto alt123_end312
  alt123_1315:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail302
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt123_end312:
    nqp_rxpeek $I19, rx119_bstack, rxquantr122_done311
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr122_done311
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr122_done311, rx119_pos, rx119_rep
    goto rxquantr122_loop310
  rxquantr122_done311:
    rx119_cur."!cursor_pass"(rx119_pos, "termconjseq", 'backtrack'=>1)
    .return (rx119_cur)
  rx119_restart301:
    repr_get_attr_obj rx119_cstack, rx119_cur, rx119_curclass, "$!cstack"
  rx119_fail302:
    unless rx119_bstack, rx119_done300
    pop $I19, rx119_bstack
    if_null rx119_cstack, rx119_cstack_done305
    unless rx119_cstack, rx119_cstack_done305
    dec $I19
    set $P11, rx119_cstack[$I19]
  rx119_cstack_done305:
    pop rx119_rep, rx119_bstack
    pop rx119_pos, rx119_bstack
    pop $I19, rx119_bstack
    lt rx119_pos, -1, rx119_done300
    lt rx119_pos, 0, rx119_fail302
    eq $I19, 0, rx119_fail302
    nqp_islist $I20, rx119_cstack
    unless $I20, rx119_jump303
    elements $I18, rx119_bstack
    le $I18, 0, rx119_cut304
    dec $I18
    set $I18, rx119_bstack[$I18]
  rx119_cut304:
    assign rx119_cstack, $I18
  rx119_jump303:
    jump $I19
  rx119_done300:
    rx119_cur."!cursor_fail"()
    .return (rx119_cur) 
.end
.HLL "nqp"
.namespace []
.sub "termalt" :subid("cuid_21_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 122
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx126_start
    .local string rx126_tgt
    .local int rx126_pos
    .local int rx126_off
    .local int rx126_eos
    .local int rx126_rep
    .local pmc rx126_cur
    .local pmc rx126_curclass
    .local pmc rx126_bstack
    .local pmc rx126_cstack
    rx126_start = self."!cursor_start_all"()
    set rx126_cur, rx126_start[0]
    set rx126_tgt, rx126_start[1]
    set rx126_pos, rx126_start[2]
    set rx126_curclass, rx126_start[3]
    set rx126_bstack, rx126_start[4]
    set $I19, rx126_start[5]
    store_lex unicode:"$\x{a2}", rx126_cur
    length rx126_eos, rx126_tgt
    eq $I19, 1, rx126_restart319
    gt rx126_pos, rx126_eos, rx126_fail320
    repr_get_attr_int $I11, self, rx126_curclass, "$!from"
    ne $I11, -1, rxscan127_done326
    goto rxscan127_scan325
  rxscan127_loop324:
    inc rx126_pos
    gt rx126_pos, rx126_eos, rx126_fail320
    repr_bind_attr_int rx126_cur, rx126_curclass, "$!from", rx126_pos
  rxscan127_scan325:
    nqp_rxmark rx126_bstack, rxscan127_loop324, rx126_pos, 0
  rxscan127_done326:
    repr_bind_attr_int rx126_cur, rx126_curclass, "$!pos", rx126_pos
    $P11 = rx126_cur."termconj"()
    repr_get_attr_int $I11, $P11, rx126_curclass, "$!pos"
    lt $I11, 0, rx126_fail320
    nqp_rxmark rx126_bstack, rxsubrule128_pass327, -1, 0
  rxsubrule128_pass327:
    rx126_cstack = rx126_cur."!cursor_capture"($P11, "termconj")
    repr_get_attr_int rx126_pos, $P11, rx126_curclass, "$!pos"
    nqp_rxmark rx126_bstack, rxquantr129_done329, rx126_pos, 0
  rxquantr129_loop328:
    add $I11, rx126_pos, 1
    gt $I11, rx126_eos, rx126_fail320
    substr $S10, rx126_tgt, rx126_pos, 1
    ne $S10, ucs4:"|", rx126_fail320
    add rx126_pos, 1
    ge rx126_pos, rx126_eos, rx126_fail320
    substr $S11, rx126_tgt, rx126_pos, 1
    index $I11, ucs4:"|", $S11
    ge $I11, 0, rx126_fail320
  alt130_0331:
    nqp_rxmark rx126_bstack, alt130_1333, rx126_pos, 0
    repr_bind_attr_int rx126_cur, rx126_curclass, "$!pos", rx126_pos
    $P11 = rx126_cur."termconj"()
    repr_get_attr_int $I11, $P11, rx126_curclass, "$!pos"
    lt $I11, 0, rx126_fail320
    nqp_rxmark rx126_bstack, rxsubrule131_pass332, -1, 0
  rxsubrule131_pass332:
    rx126_cstack = rx126_cur."!cursor_capture"($P11, "termconj")
    repr_get_attr_int rx126_pos, $P11, rx126_curclass, "$!pos"
    goto alt130_end330
  alt130_1333:
    repr_bind_attr_int rx126_cur, rx126_curclass, "$!pos", rx126_pos
    $P11 = rx126_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx126_curclass, "$!pos"
    lt $I11, 0, rx126_fail320
    repr_get_attr_int rx126_pos, $P11, rx126_curclass, "$!pos"
  alt130_end330:
    nqp_rxpeek $I19, rx126_bstack, rxquantr129_done329
    inc $I19
    inc $I19
    set rx126_rep, rx126_bstack[$I19]
    nqp_rxcommit rx126_bstack, rxquantr129_done329
    inc rx126_rep
    nqp_rxmark rx126_bstack, rxquantr129_done329, rx126_pos, rx126_rep
    goto rxquantr129_loop328
  rxquantr129_done329:
    rx126_cur."!cursor_pass"(rx126_pos, "termalt", 'backtrack'=>1)
    .return (rx126_cur)
  rx126_restart319:
    repr_get_attr_obj rx126_cstack, rx126_cur, rx126_curclass, "$!cstack"
  rx126_fail320:
    unless rx126_bstack, rx126_done318
    pop $I19, rx126_bstack
    if_null rx126_cstack, rx126_cstack_done323
    unless rx126_cstack, rx126_cstack_done323
    dec $I19
    set $P11, rx126_cstack[$I19]
  rx126_cstack_done323:
    pop rx126_rep, rx126_bstack
    pop rx126_pos, rx126_bstack
    pop $I19, rx126_bstack
    lt rx126_pos, -1, rx126_done318
    lt rx126_pos, 0, rx126_fail320
    eq $I19, 0, rx126_fail320
    nqp_islist $I20, rx126_cstack
    unless $I20, rx126_jump321
    elements $I18, rx126_bstack
    le $I18, 0, rx126_cut322
    dec $I18
    set $I18, rx126_bstack[$I18]
  rx126_cut322:
    assign rx126_cstack, $I18
  rx126_jump321:
    jump $I19
  rx126_done318:
    rx126_cur."!cursor_fail"()
    .return (rx126_cur) 
.end
.HLL "nqp"
.namespace []
.sub "termconj" :subid("cuid_22_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 127
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx133_start
    .local string rx133_tgt
    .local int rx133_pos
    .local int rx133_off
    .local int rx133_eos
    .local int rx133_rep
    .local pmc rx133_cur
    .local pmc rx133_curclass
    .local pmc rx133_bstack
    .local pmc rx133_cstack
    rx133_start = self."!cursor_start_all"()
    set rx133_cur, rx133_start[0]
    set rx133_tgt, rx133_start[1]
    set rx133_pos, rx133_start[2]
    set rx133_curclass, rx133_start[3]
    set rx133_bstack, rx133_start[4]
    set $I19, rx133_start[5]
    store_lex unicode:"$\x{a2}", rx133_cur
    length rx133_eos, rx133_tgt
    eq $I19, 1, rx133_restart337
    gt rx133_pos, rx133_eos, rx133_fail338
    repr_get_attr_int $I11, self, rx133_curclass, "$!from"
    ne $I11, -1, rxscan134_done344
    goto rxscan134_scan343
  rxscan134_loop342:
    inc rx133_pos
    gt rx133_pos, rx133_eos, rx133_fail338
    repr_bind_attr_int rx133_cur, rx133_curclass, "$!from", rx133_pos
  rxscan134_scan343:
    nqp_rxmark rx133_bstack, rxscan134_loop342, rx133_pos, 0
  rxscan134_done344:
    repr_bind_attr_int rx133_cur, rx133_curclass, "$!pos", rx133_pos
    $P11 = rx133_cur."termish"()
    repr_get_attr_int $I11, $P11, rx133_curclass, "$!pos"
    lt $I11, 0, rx133_fail338
    nqp_rxmark rx133_bstack, rxsubrule135_pass345, -1, 0
  rxsubrule135_pass345:
    rx133_cstack = rx133_cur."!cursor_capture"($P11, "termish")
    repr_get_attr_int rx133_pos, $P11, rx133_curclass, "$!pos"
    nqp_rxmark rx133_bstack, rxquantr136_done347, rx133_pos, 0
  rxquantr136_loop346:
    add $I11, rx133_pos, 1
    gt $I11, rx133_eos, rx133_fail338
    substr $S10, rx133_tgt, rx133_pos, 1
    ne $S10, ucs4:"&", rx133_fail338
    add rx133_pos, 1
    ge rx133_pos, rx133_eos, rx133_fail338
    substr $S11, rx133_tgt, rx133_pos, 1
    index $I11, ucs4:"&", $S11
    ge $I11, 0, rx133_fail338
  alt137_0349:
    nqp_rxmark rx133_bstack, alt137_1351, rx133_pos, 0
    repr_bind_attr_int rx133_cur, rx133_curclass, "$!pos", rx133_pos
    $P11 = rx133_cur."termish"()
    repr_get_attr_int $I11, $P11, rx133_curclass, "$!pos"
    lt $I11, 0, rx133_fail338
    nqp_rxmark rx133_bstack, rxsubrule138_pass350, -1, 0
  rxsubrule138_pass350:
    rx133_cstack = rx133_cur."!cursor_capture"($P11, "termish")
    repr_get_attr_int rx133_pos, $P11, rx133_curclass, "$!pos"
    goto alt137_end348
  alt137_1351:
    repr_bind_attr_int rx133_cur, rx133_curclass, "$!pos", rx133_pos
    $P11 = rx133_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx133_curclass, "$!pos"
    lt $I11, 0, rx133_fail338
    repr_get_attr_int rx133_pos, $P11, rx133_curclass, "$!pos"
  alt137_end348:
    nqp_rxpeek $I19, rx133_bstack, rxquantr136_done347
    inc $I19
    inc $I19
    set rx133_rep, rx133_bstack[$I19]
    nqp_rxcommit rx133_bstack, rxquantr136_done347
    inc rx133_rep
    nqp_rxmark rx133_bstack, rxquantr136_done347, rx133_pos, rx133_rep
    goto rxquantr136_loop346
  rxquantr136_done347:
    rx133_cur."!cursor_pass"(rx133_pos, "termconj", 'backtrack'=>1)
    .return (rx133_cur)
  rx133_restart337:
    repr_get_attr_obj rx133_cstack, rx133_cur, rx133_curclass, "$!cstack"
  rx133_fail338:
    unless rx133_bstack, rx133_done336
    pop $I19, rx133_bstack
    if_null rx133_cstack, rx133_cstack_done341
    unless rx133_cstack, rx133_cstack_done341
    dec $I19
    set $P11, rx133_cstack[$I19]
  rx133_cstack_done341:
    pop rx133_rep, rx133_bstack
    pop rx133_pos, rx133_bstack
    pop $I19, rx133_bstack
    lt rx133_pos, -1, rx133_done336
    lt rx133_pos, 0, rx133_fail338
    eq $I19, 0, rx133_fail338
    nqp_islist $I20, rx133_cstack
    unless $I20, rx133_jump339
    elements $I18, rx133_bstack
    le $I18, 0, rx133_cut340
    dec $I18
    set $I18, rx133_bstack[$I18]
  rx133_cut340:
    assign rx133_cstack, $I18
  rx133_jump339:
    jump $I19
  rx133_done336:
    rx133_cur."!cursor_fail"()
    .return (rx133_cur) 
.end
.HLL "nqp"
.namespace []
.sub "termish" :subid("cuid_23_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 132
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_24_1360623852.546' 
    capture_lex $P5006 
    .const 'Sub' $P5006 = 'cuid_25_1360623852.546' 
    capture_lex $P5006 
    .const 'Sub' $P5006 = 'cuid_184_1360623852.546' 
    capture_lex $P5006 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx140_start
    .local string rx140_tgt
    .local int rx140_pos
    .local int rx140_off
    .local int rx140_eos
    .local int rx140_rep
    .local pmc rx140_cur
    .local pmc rx140_curclass
    .local pmc rx140_bstack
    .local pmc rx140_cstack
    rx140_start = self."!cursor_start_all"()
    set rx140_cur, rx140_start[0]
    set rx140_tgt, rx140_start[1]
    set rx140_pos, rx140_start[2]
    set rx140_curclass, rx140_start[3]
    set rx140_bstack, rx140_start[4]
    set $I19, rx140_start[5]
    store_lex unicode:"$\x{a2}", rx140_cur
    length rx140_eos, rx140_tgt
    eq $I19, 1, rx140_restart355
    gt rx140_pos, rx140_eos, rx140_fail356
    repr_get_attr_int $I11, self, rx140_curclass, "$!from"
    ne $I11, -1, rxscan141_done362
    goto rxscan141_scan361
  rxscan141_loop360:
    inc rx140_pos
    gt rx140_pos, rx140_eos, rx140_fail356
    repr_bind_attr_int rx140_cur, rx140_curclass, "$!from", rx140_pos
  rxscan141_scan361:
    nqp_rxmark rx140_bstack, rxscan141_loop360, rx140_pos, 0
  rxscan141_done362:
  alt142_0364:
    nqp_rxmark rx140_bstack, alt142_1369, rx140_pos, 0
    nqp_rxmark rx140_bstack, rxquantr143_done366, -1, 0
  rxquantr143_loop365:
    repr_bind_attr_int rx140_cur, rx140_curclass, "$!pos", rx140_pos
    $P11 = rx140_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx140_curclass, "$!pos"
    lt $I11, 0, rx140_fail356
    goto rxsubrule144_pass367
  rxsubrule144_back368:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx140_curclass, "$!pos"
    lt $I11, 0, rx140_fail356
  rxsubrule144_pass367:
    rx140_cstack = rx140_cur."!cursor_capture"($P11, "noun")
    set_addr $I11, rxsubrule144_back368
    push rx140_bstack, $I11
    push rx140_bstack, 0
    push rx140_bstack, rx140_pos
    elements $I11, rx140_cstack
    push rx140_bstack, $I11
    repr_get_attr_int rx140_pos, $P11, rx140_curclass, "$!pos"
    nqp_rxpeek $I19, rx140_bstack, rxquantr143_done366
    inc $I19
    inc $I19
    set rx140_rep, rx140_bstack[$I19]
    nqp_rxcommit rx140_bstack, rxquantr143_done366
    inc rx140_rep
    nqp_rxmark rx140_bstack, rxquantr143_done366, rx140_pos, rx140_rep
    goto rxquantr143_loop365
  rxquantr143_done366:
    goto alt142_end363
  alt142_1369:
    nqp_rxmark rx140_bstack, alt142_2385, rx140_pos, 0
    .const 'Sub' $P5001 = 'cuid_24_1360623852.546' 
    capture_lex $P5001
    repr_bind_attr_int rx140_cur, rx140_curclass, "$!pos", rx140_pos
    $P11 = rx140_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx140_curclass, "$!pos"
    lt $I11, 0, rx140_fail356
    repr_bind_attr_int rx140_cur, rx140_curclass, "$!pos", rx140_pos
    $P11 = rx140_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx140_curclass, "$!pos"
    lt $I11, 0, rx140_fail356
    repr_get_attr_int rx140_pos, $P11, rx140_curclass, "$!pos"
    goto alt142_end363
  alt142_2385:
    .const 'Sub' $P5002 = 'cuid_25_1360623852.546' 
    capture_lex $P5002
    repr_bind_attr_int rx140_cur, rx140_curclass, "$!pos", rx140_pos
    $P11 = rx140_cur.$P5002()
    repr_get_attr_int $I11, $P11, rx140_curclass, "$!pos"
    lt $I11, 0, rx140_fail356
    nqp_rxmark rx140_bstack, rxsubrule152_pass396, -1, 0
  rxsubrule152_pass396:
    rx140_cstack = rx140_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx140_pos, $P11, rx140_curclass, "$!pos"
    repr_bind_attr_int rx140_cur, rx140_curclass, "$!pos", rx140_pos
    store_lex unicode:"$\x{a2}", rx140_cur
    $P5003 = $P101."MATCH"()
    set $P102, $P5003
    .const 'Sub' $P5004 = 'cuid_184_1360623852.546' 
    capture_lex $P5004
    $P5005 = $P5004()
  alt142_end363:
    rx140_cur."!cursor_pass"(rx140_pos, "termish", 'backtrack'=>1)
    .return (rx140_cur)
  rx140_restart355:
    repr_get_attr_obj rx140_cstack, rx140_cur, rx140_curclass, "$!cstack"
  rx140_fail356:
    unless rx140_bstack, rx140_done354
    pop $I19, rx140_bstack
    if_null rx140_cstack, rx140_cstack_done359
    unless rx140_cstack, rx140_cstack_done359
    dec $I19
    set $P11, rx140_cstack[$I19]
  rx140_cstack_done359:
    pop rx140_rep, rx140_bstack
    pop rx140_pos, rx140_bstack
    pop $I19, rx140_bstack
    lt rx140_pos, -1, rx140_done354
    lt rx140_pos, 0, rx140_fail356
    eq $I19, 0, rx140_fail356
    nqp_islist $I20, rx140_cstack
    unless $I20, rx140_jump357
    elements $I18, rx140_bstack
    le $I18, 0, rx140_cut358
    dec $I18
    set $I18, rx140_bstack[$I18]
  rx140_cut358:
    assign rx140_cstack, $I18
  rx140_jump357:
    jump $I19
  rx140_done354:
    rx140_cur."!cursor_fail"()
    .return (rx140_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_24_1360623852.546") :anon :lex :outer("cuid_23_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx145_start
    .local string rx145_tgt
    .local int rx145_pos
    .local int rx145_off
    .local int rx145_eos
    .local int rx145_rep
    .local pmc rx145_cur
    .local pmc rx145_curclass
    .local pmc rx145_bstack
    .local pmc rx145_cstack
    rx145_start = self."!cursor_start_all"()
    set rx145_cur, rx145_start[0]
    set rx145_tgt, rx145_start[1]
    set rx145_pos, rx145_start[2]
    set rx145_curclass, rx145_start[3]
    set rx145_bstack, rx145_start[4]
    set $I19, rx145_start[5]
    store_lex unicode:"$\x{a2}", rx145_cur
    length rx145_eos, rx145_tgt
    eq $I19, 1, rx145_restart372
    gt rx145_pos, rx145_eos, rx145_fail373
    repr_get_attr_int $I11, self, rx145_curclass, "$!from"
    ne $I11, -1, rxscan146_done379
    goto rxscan146_scan378
  rxscan146_loop377:
    inc rx145_pos
    gt rx145_pos, rx145_eos, rx145_fail373
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!from", rx145_pos
  rxscan146_scan378:
    nqp_rxmark rx145_bstack, rxscan146_loop377, rx145_pos, 0
  rxscan146_done379:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt147_0381
    nqp_push_label $P11, alt147_1383
    nqp_rxmark rx145_bstack, alt147_end380, -1, 0
    rx145_cur."!alt"(rx145_pos, "alt_nfa__6_1360623852.839", $P11)
    goto rx145_fail373
  alt147_0381:
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."stopper"()
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    lt $I11, 0, rx145_fail373
    nqp_rxmark rx145_bstack, rxsubrule148_pass382, -1, 0
  rxsubrule148_pass382:
    rx145_cstack = rx145_cur."!cursor_capture"($P11, "stopper")
    repr_get_attr_int rx145_pos, $P11, rx145_curclass, "$!pos"
    goto alt147_end380
  alt147_1383:
    ge rx145_pos, rx145_eos, rx145_fail373
    substr $S11, rx145_tgt, rx145_pos, 1
    index $I11, ucs4:"&|~", $S11
    lt $I11, 0, rx145_fail373
    inc rx145_pos
    goto alt147_end380
  alt147_end380:
    rx145_cur."!cursor_pass"(rx145_pos, 'backtrack'=>1)
    .return (rx145_cur)
  rx145_restart372:
    repr_get_attr_obj rx145_cstack, rx145_cur, rx145_curclass, "$!cstack"
  rx145_fail373:
    unless rx145_bstack, rx145_done371
    pop $I19, rx145_bstack
    if_null rx145_cstack, rx145_cstack_done376
    unless rx145_cstack, rx145_cstack_done376
    dec $I19
    set $P11, rx145_cstack[$I19]
  rx145_cstack_done376:
    pop rx145_rep, rx145_bstack
    pop rx145_pos, rx145_bstack
    pop $I19, rx145_bstack
    lt rx145_pos, -1, rx145_done371
    lt rx145_pos, 0, rx145_fail373
    eq $I19, 0, rx145_fail373
    nqp_islist $I20, rx145_cstack
    unless $I20, rx145_jump374
    elements $I18, rx145_bstack
    le $I18, 0, rx145_cut375
    dec $I18
    set $I18, rx145_bstack[$I18]
  rx145_cut375:
    assign rx145_cstack, $I18
  rx145_jump374:
    jump $I19
  rx145_done371:
    rx145_cur."!cursor_fail"()
    .return (rx145_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_25_1360623852.546") :anon :lex :outer("cuid_23_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx150_start
    .local string rx150_tgt
    .local int rx150_pos
    .local int rx150_off
    .local int rx150_eos
    .local int rx150_rep
    .local pmc rx150_cur
    .local pmc rx150_curclass
    .local pmc rx150_bstack
    .local pmc rx150_cstack
    rx150_start = self."!cursor_start_all"()
    set rx150_cur, rx150_start[0]
    set rx150_tgt, rx150_start[1]
    set rx150_pos, rx150_start[2]
    set rx150_curclass, rx150_start[3]
    set rx150_bstack, rx150_start[4]
    set $I19, rx150_start[5]
    store_lex unicode:"$\x{a2}", rx150_cur
    length rx150_eos, rx150_tgt
    eq $I19, 1, rx150_restart388
    gt rx150_pos, rx150_eos, rx150_fail389
    repr_get_attr_int $I11, self, rx150_curclass, "$!from"
    ne $I11, -1, rxscan151_done395
    goto rxscan151_scan394
  rxscan151_loop393:
    inc rx150_pos
    gt rx150_pos, rx150_eos, rx150_fail389
    repr_bind_attr_int rx150_cur, rx150_curclass, "$!from", rx150_pos
  rxscan151_scan394:
    nqp_rxmark rx150_bstack, rxscan151_loop393, rx150_pos, 0
  rxscan151_done395:
    ge rx150_pos, rx150_eos, rx150_fail389
    is_cclass $I11, .CCLASS_WORD, rx150_tgt, rx150_pos
    if $I11, rx150_fail389
    add rx150_pos, 1
    rx150_cur."!cursor_pass"(rx150_pos, 'backtrack'=>1)
    .return (rx150_cur)
  rx150_restart388:
    repr_get_attr_obj rx150_cstack, rx150_cur, rx150_curclass, "$!cstack"
  rx150_fail389:
    unless rx150_bstack, rx150_done387
    pop $I19, rx150_bstack
    if_null rx150_cstack, rx150_cstack_done392
    unless rx150_cstack, rx150_cstack_done392
    dec $I19
    set $P11, rx150_cstack[$I19]
  rx150_cstack_done392:
    pop rx150_rep, rx150_bstack
    pop rx150_pos, rx150_bstack
    pop $I19, rx150_bstack
    lt rx150_pos, -1, rx150_done387
    lt rx150_pos, 0, rx150_fail389
    eq $I19, 0, rx150_fail389
    nqp_islist $I20, rx150_cstack
    unless $I20, rx150_jump390
    elements $I18, rx150_bstack
    le $I18, 0, rx150_cut391
    dec $I18
    set $I18, rx150_bstack[$I18]
  rx150_cut391:
    assign rx150_cstack, $I18
  rx150_jump390:
    jump $I19
  rx150_done387:
    rx150_cur."!cursor_fail"()
    .return (rx150_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_184_1360623852.546") :anon :lex :outer("cuid_23_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 135
    .local pmc fb_tmp_15 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$/"
    set fb_tmp_15, $P5003
    repr_defined $I5001, fb_tmp_15
    unless $I5001 goto if153_else397 
    set $P5004, fb_tmp_15[0]
    set $P5006, $P5004
    goto if153_end398
  if153_else397:
    null $P5005
    set $P5006, $P5005
  if153_end398:
    unless_null $P5006, vivi_154399
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_154399:
    set $S5001, $P5006
    $P5008 = $P5001."throw_unrecognized_metachar"($S5001)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "quantified_atom" :subid("cuid_26_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 138
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_27_1360623852.546' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx155_start
    .local string rx155_tgt
    .local int rx155_pos
    .local int rx155_off
    .local int rx155_eos
    .local int rx155_rep
    .local pmc rx155_cur
    .local pmc rx155_curclass
    .local pmc rx155_bstack
    .local pmc rx155_cstack
    rx155_start = self."!cursor_start_all"()
    set rx155_cur, rx155_start[0]
    set rx155_tgt, rx155_start[1]
    set rx155_pos, rx155_start[2]
    set rx155_curclass, rx155_start[3]
    set rx155_bstack, rx155_start[4]
    set $I19, rx155_start[5]
    store_lex unicode:"$\x{a2}", rx155_cur
    length rx155_eos, rx155_tgt
    eq $I19, 1, rx155_restart402
    gt rx155_pos, rx155_eos, rx155_fail403
    repr_get_attr_int $I11, self, rx155_curclass, "$!from"
    ne $I11, -1, rxscan156_done409
    goto rxscan156_scan408
  rxscan156_loop407:
    inc rx155_pos
    gt rx155_pos, rx155_eos, rx155_fail403
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!from", rx155_pos
  rxscan156_scan408:
    nqp_rxmark rx155_bstack, rxscan156_loop407, rx155_pos, 0
  rxscan156_done409:
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!pos", rx155_pos
    $P11 = rx155_cur."atom"()
    repr_get_attr_int $I11, $P11, rx155_curclass, "$!pos"
    lt $I11, 0, rx155_fail403
    nqp_rxmark rx155_bstack, rxsubrule157_pass410, -1, 0
  rxsubrule157_pass410:
    rx155_cstack = rx155_cur."!cursor_capture"($P11, "atom")
    repr_get_attr_int rx155_pos, $P11, rx155_curclass, "$!pos"
    nqp_rxmark rx155_bstack, rxquantr158_done412, rx155_pos, 0
  rxquantr158_loop411:
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!pos", rx155_pos
    $P11 = rx155_cur."ws"()
    repr_get_attr_int $I11, $P11, rx155_curclass, "$!pos"
    lt $I11, 0, rx155_fail403
    repr_get_attr_int rx155_pos, $P11, rx155_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt160_0415
    nqp_push_label $P11, alt160_1417
    nqp_rxmark rx155_bstack, alt160_end414, -1, 0
    rx155_cur."!alt"(rx155_pos, "alt_nfa__7_1360623852.863", $P11)
    goto rx155_fail403
  alt160_0415:
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!pos", rx155_pos
    $P11 = rx155_cur."quantifier"()
    repr_get_attr_int $I11, $P11, rx155_curclass, "$!pos"
    lt $I11, 0, rx155_fail403
    nqp_rxmark rx155_bstack, rxsubrule161_pass416, -1, 0
  rxsubrule161_pass416:
    rx155_cstack = rx155_cur."!cursor_capture"($P11, "quantifier")
    repr_get_attr_int rx155_pos, $P11, rx155_curclass, "$!pos"
    goto alt160_end414
  alt160_1417:
    .const 'Sub' $P5001 = 'cuid_27_1360623852.546' 
    capture_lex $P5001
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!pos", rx155_pos
    $P11 = rx155_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx155_curclass, "$!pos"
    lt $I11, 0, rx155_fail403
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!pos", rx155_pos
    $P11 = rx155_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx155_curclass, "$!pos"
    lt $I11, 0, rx155_fail403
    nqp_rxmark rx155_bstack, rxsubrule164_pass428, -1, 0
  rxsubrule164_pass428:
    rx155_cstack = rx155_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx155_pos, $P11, rx155_curclass, "$!pos"
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!pos", rx155_pos
    $P11 = rx155_cur."alpha"()
    repr_get_attr_int $I11, $P11, rx155_curclass, "$!pos"
    ge $I11, 0, rx155_fail403
    goto alt160_end414
  alt160_end414:
    nqp_rxcommit rx155_bstack, alt160_end414
    nqp_rxmark rx155_bstack, rxquantr165_done430, rx155_pos, 0
  rxquantr165_loop429:
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!pos", rx155_pos
    $P11 = rx155_cur."ws"()
    repr_get_attr_int $I11, $P11, rx155_curclass, "$!pos"
    lt $I11, 0, rx155_fail403
    repr_get_attr_int rx155_pos, $P11, rx155_curclass, "$!pos"
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!pos", rx155_pos
    $P11 = rx155_cur."separator"()
    repr_get_attr_int $I11, $P11, rx155_curclass, "$!pos"
    lt $I11, 0, rx155_fail403
    nqp_rxmark rx155_bstack, rxsubrule167_pass432, -1, 0
  rxsubrule167_pass432:
    rx155_cstack = rx155_cur."!cursor_capture"($P11, "separator")
    repr_get_attr_int rx155_pos, $P11, rx155_curclass, "$!pos"
    nqp_rxpeek $I19, rx155_bstack, rxquantr165_done430
    inc $I19
    inc $I19
    set rx155_rep, rx155_bstack[$I19]
    nqp_rxcommit rx155_bstack, rxquantr165_done430
    inc rx155_rep
  rxquantr165_done430:
    nqp_rxpeek $I19, rx155_bstack, rxquantr158_done412
    inc $I19
    inc $I19
    set rx155_rep, rx155_bstack[$I19]
    nqp_rxcommit rx155_bstack, rxquantr158_done412
    inc rx155_rep
  rxquantr158_done412:
    rx155_cur."!cursor_pass"(rx155_pos, "quantified_atom", 'backtrack'=>1)
    .return (rx155_cur)
  rx155_restart402:
    repr_get_attr_obj rx155_cstack, rx155_cur, rx155_curclass, "$!cstack"
  rx155_fail403:
    unless rx155_bstack, rx155_done401
    pop $I19, rx155_bstack
    if_null rx155_cstack, rx155_cstack_done406
    unless rx155_cstack, rx155_cstack_done406
    dec $I19
    set $P11, rx155_cstack[$I19]
  rx155_cstack_done406:
    pop rx155_rep, rx155_bstack
    pop rx155_pos, rx155_bstack
    pop $I19, rx155_bstack
    lt rx155_pos, -1, rx155_done401
    lt rx155_pos, 0, rx155_fail403
    eq $I19, 0, rx155_fail403
    nqp_islist $I20, rx155_cstack
    unless $I20, rx155_jump404
    elements $I18, rx155_bstack
    le $I18, 0, rx155_cut405
    dec $I18
    set $I18, rx155_bstack[$I18]
  rx155_cut405:
    assign rx155_cstack, $I18
  rx155_jump404:
    jump $I19
  rx155_done401:
    rx155_cur."!cursor_fail"()
    .return (rx155_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_27_1360623852.546") :anon :lex :outer("cuid_26_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx162_start
    .local string rx162_tgt
    .local int rx162_pos
    .local int rx162_off
    .local int rx162_eos
    .local int rx162_rep
    .local pmc rx162_cur
    .local pmc rx162_curclass
    .local pmc rx162_bstack
    .local pmc rx162_cstack
    rx162_start = self."!cursor_start_all"()
    set rx162_cur, rx162_start[0]
    set rx162_tgt, rx162_start[1]
    set rx162_pos, rx162_start[2]
    set rx162_curclass, rx162_start[3]
    set rx162_bstack, rx162_start[4]
    set $I19, rx162_start[5]
    store_lex unicode:"$\x{a2}", rx162_cur
    length rx162_eos, rx162_tgt
    eq $I19, 1, rx162_restart420
    gt rx162_pos, rx162_eos, rx162_fail421
    repr_get_attr_int $I11, self, rx162_curclass, "$!from"
    ne $I11, -1, rxscan163_done427
    goto rxscan163_scan426
  rxscan163_loop425:
    inc rx162_pos
    gt rx162_pos, rx162_eos, rx162_fail421
    repr_bind_attr_int rx162_cur, rx162_curclass, "$!from", rx162_pos
  rxscan163_scan426:
    nqp_rxmark rx162_bstack, rxscan163_loop425, rx162_pos, 0
  rxscan163_done427:
    add $I11, rx162_pos, 1
    gt $I11, rx162_eos, rx162_fail421
    substr $S10, rx162_tgt, rx162_pos, 1
    ne $S10, ucs4:":", rx162_fail421
    add rx162_pos, 1
    rx162_cur."!cursor_pass"(rx162_pos, 'backtrack'=>1)
    .return (rx162_cur)
  rx162_restart420:
    repr_get_attr_obj rx162_cstack, rx162_cur, rx162_curclass, "$!cstack"
  rx162_fail421:
    unless rx162_bstack, rx162_done419
    pop $I19, rx162_bstack
    if_null rx162_cstack, rx162_cstack_done424
    unless rx162_cstack, rx162_cstack_done424
    dec $I19
    set $P11, rx162_cstack[$I19]
  rx162_cstack_done424:
    pop rx162_rep, rx162_bstack
    pop rx162_pos, rx162_bstack
    pop $I19, rx162_bstack
    lt rx162_pos, -1, rx162_done419
    lt rx162_pos, 0, rx162_fail421
    eq $I19, 0, rx162_fail421
    nqp_islist $I20, rx162_cstack
    unless $I20, rx162_jump422
    elements $I18, rx162_bstack
    le $I18, 0, rx162_cut423
    dec $I18
    set $I18, rx162_bstack[$I18]
  rx162_cut423:
    assign rx162_cstack, $I18
  rx162_jump422:
    jump $I19
  rx162_done419:
    rx162_cur."!cursor_fail"()
    .return (rx162_cur) 
.end
.HLL "nqp"
.namespace []
.sub "separator" :subid("cuid_28_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 146
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx168_start
    .local string rx168_tgt
    .local int rx168_pos
    .local int rx168_off
    .local int rx168_eos
    .local int rx168_rep
    .local pmc rx168_cur
    .local pmc rx168_curclass
    .local pmc rx168_bstack
    .local pmc rx168_cstack
    rx168_start = self."!cursor_start_all"()
    set rx168_cur, rx168_start[0]
    set rx168_tgt, rx168_start[1]
    set rx168_pos, rx168_start[2]
    set rx168_curclass, rx168_start[3]
    set rx168_bstack, rx168_start[4]
    set $I19, rx168_start[5]
    store_lex unicode:"$\x{a2}", rx168_cur
    length rx168_eos, rx168_tgt
    eq $I19, 1, rx168_restart435
    gt rx168_pos, rx168_eos, rx168_fail436
    repr_get_attr_int $I11, self, rx168_curclass, "$!from"
    ne $I11, -1, rxscan169_done442
    goto rxscan169_scan441
  rxscan169_loop440:
    inc rx168_pos
    gt rx168_pos, rx168_eos, rx168_fail436
    repr_bind_attr_int rx168_cur, rx168_curclass, "$!from", rx168_pos
  rxscan169_scan441:
    nqp_rxmark rx168_bstack, rxscan169_loop440, rx168_pos, 0
  rxscan169_done442:
    nqp_rxmark rx168_bstack, rxcap170_fail444, rx168_pos, 0
    add $I11, rx168_pos, 1
    gt $I11, rx168_eos, rx168_fail436
    substr $S10, rx168_tgt, rx168_pos, 1
    ne $S10, ucs4:"%", rx168_fail436
    add rx168_pos, 1
    nqp_rxmark rx168_bstack, rxquantr171_done446, rx168_pos, 0
  rxquantr171_loop445:
    add $I11, rx168_pos, 1
    gt $I11, rx168_eos, rx168_fail436
    substr $S10, rx168_tgt, rx168_pos, 1
    ne $S10, ucs4:"%", rx168_fail436
    add rx168_pos, 1
    nqp_rxpeek $I19, rx168_bstack, rxquantr171_done446
    inc $I19
    inc $I19
    set rx168_rep, rx168_bstack[$I19]
    nqp_rxcommit rx168_bstack, rxquantr171_done446
    inc rx168_rep
  rxquantr171_done446:
    nqp_rxpeek $I19, rx168_bstack, rxcap170_fail444
    inc $I19
    set $I11, rx168_bstack[$I19]
    repr_bind_attr_int rx168_cur, rx168_curclass, "$!pos", rx168_pos
    $P11 = rx168_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx168_pos)
    rx168_cstack = rx168_cur."!cursor_capture"($P11, "septype")
    goto rxcap170_done443
  rxcap170_fail444:
    goto rx168_fail436
  rxcap170_done443:
    nqp_rxmark rx168_bstack, rxquantr172_done448, rx168_pos, 0
  rxquantr172_loop447:
    repr_bind_attr_int rx168_cur, rx168_curclass, "$!pos", rx168_pos
    $P11 = rx168_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx168_curclass, "$!pos"
    lt $I11, 0, rx168_fail436
    goto rxsubrule173_pass449
  rxsubrule173_back450:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx168_curclass, "$!pos"
    lt $I11, 0, rx168_fail436
  rxsubrule173_pass449:
    rx168_cstack = rx168_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule173_back450
    push rx168_bstack, $I11
    push rx168_bstack, 0
    push rx168_bstack, rx168_pos
    elements $I11, rx168_cstack
    push rx168_bstack, $I11
    repr_get_attr_int rx168_pos, $P11, rx168_curclass, "$!pos"
    nqp_rxpeek $I19, rx168_bstack, rxquantr172_done448
    inc $I19
    inc $I19
    set rx168_rep, rx168_bstack[$I19]
    nqp_rxcommit rx168_bstack, rxquantr172_done448
    inc rx168_rep
  rxquantr172_done448:
    repr_bind_attr_int rx168_cur, rx168_curclass, "$!pos", rx168_pos
    $P11 = rx168_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx168_curclass, "$!pos"
    lt $I11, 0, rx168_fail436
    nqp_rxmark rx168_bstack, rxsubrule174_pass451, -1, 0
  rxsubrule174_pass451:
    rx168_cstack = rx168_cur."!cursor_capture"($P11, "quantified_atom")
    repr_get_attr_int rx168_pos, $P11, rx168_curclass, "$!pos"
    rx168_cur."!cursor_pass"(rx168_pos, "separator", 'backtrack'=>1)
    .return (rx168_cur)
  rx168_restart435:
    repr_get_attr_obj rx168_cstack, rx168_cur, rx168_curclass, "$!cstack"
  rx168_fail436:
    unless rx168_bstack, rx168_done434
    pop $I19, rx168_bstack
    if_null rx168_cstack, rx168_cstack_done439
    unless rx168_cstack, rx168_cstack_done439
    dec $I19
    set $P11, rx168_cstack[$I19]
  rx168_cstack_done439:
    pop rx168_rep, rx168_bstack
    pop rx168_pos, rx168_bstack
    pop $I19, rx168_bstack
    lt rx168_pos, -1, rx168_done434
    lt rx168_pos, 0, rx168_fail436
    eq $I19, 0, rx168_fail436
    nqp_islist $I20, rx168_cstack
    unless $I20, rx168_jump437
    elements $I18, rx168_bstack
    le $I18, 0, rx168_cut438
    dec $I18
    set $I18, rx168_bstack[$I18]
  rx168_cut438:
    assign rx168_cstack, $I18
  rx168_jump437:
    jump $I19
  rx168_done434:
    rx168_cur."!cursor_fail"()
    .return (rx168_cur) 
.end
.HLL "nqp"
.namespace []
.sub "atom" :subid("cuid_29_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 150
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_30_1360623852.546' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx175_start
    .local string rx175_tgt
    .local int rx175_pos
    .local int rx175_off
    .local int rx175_eos
    .local int rx175_rep
    .local pmc rx175_cur
    .local pmc rx175_curclass
    .local pmc rx175_bstack
    .local pmc rx175_cstack
    rx175_start = self."!cursor_start_all"()
    set rx175_cur, rx175_start[0]
    set rx175_tgt, rx175_start[1]
    set rx175_pos, rx175_start[2]
    set rx175_curclass, rx175_start[3]
    set rx175_bstack, rx175_start[4]
    set $I19, rx175_start[5]
    store_lex unicode:"$\x{a2}", rx175_cur
    length rx175_eos, rx175_tgt
    eq $I19, 1, rx175_restart454
    gt rx175_pos, rx175_eos, rx175_fail455
    repr_get_attr_int $I11, self, rx175_curclass, "$!from"
    ne $I11, -1, rxscan176_done461
    goto rxscan176_scan460
  rxscan176_loop459:
    inc rx175_pos
    gt rx175_pos, rx175_eos, rx175_fail455
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!from", rx175_pos
  rxscan176_scan460:
    nqp_rxmark rx175_bstack, rxscan176_loop459, rx175_pos, 0
  rxscan176_done461:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt177_0463
    nqp_push_label $P11, alt177_1478
    nqp_rxmark rx175_bstack, alt177_end462, -1, 0
    rx175_cur."!alt"(rx175_pos, "alt_nfa__8_1360623852.881", $P11)
    goto rx175_fail455
  alt177_0463:
    ge rx175_pos, rx175_eos, rx175_fail455
    is_cclass $I11, .CCLASS_WORD, rx175_tgt, rx175_pos
    unless $I11, rx175_fail455
    add rx175_pos, 1
    nqp_rxmark rx175_bstack, rxquantr178_done465, rx175_pos, 0
  rxquantr178_loop464:
  rxquantg179_loop466:
    ge rx175_pos, rx175_eos, rx175_fail455
    is_cclass $I11, .CCLASS_WORD, rx175_tgt, rx175_pos
    unless $I11, rx175_fail455
    add rx175_pos, 1
    nqp_rxmark rx175_bstack, rxquantg179_done467, rx175_pos, rx175_rep
    goto rxquantg179_loop466
  rxquantg179_done467:
    .const 'Sub' $P5001 = 'cuid_30_1360623852.546' 
    capture_lex $P5001
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!pos", rx175_pos
    $P11 = rx175_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx175_curclass, "$!pos"
    lt $I11, 0, rx175_fail455
    nqp_rxpeek $I19, rx175_bstack, rxquantr178_done465
    inc $I19
    inc $I19
    set rx175_rep, rx175_bstack[$I19]
    nqp_rxcommit rx175_bstack, rxquantr178_done465
    inc rx175_rep
  rxquantr178_done465:
    goto alt177_end462
  alt177_1478:
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!pos", rx175_pos
    $P11 = rx175_cur."metachar"()
    repr_get_attr_int $I11, $P11, rx175_curclass, "$!pos"
    lt $I11, 0, rx175_fail455
    nqp_rxmark rx175_bstack, rxsubrule182_pass479, -1, 0
  rxsubrule182_pass479:
    rx175_cstack = rx175_cur."!cursor_capture"($P11, "metachar")
    repr_get_attr_int rx175_pos, $P11, rx175_curclass, "$!pos"
    goto alt177_end462
  alt177_end462:
    nqp_rxcommit rx175_bstack, alt177_end462
    rx175_cur."!cursor_pass"(rx175_pos, "atom", 'backtrack'=>1)
    .return (rx175_cur)
  rx175_restart454:
    repr_get_attr_obj rx175_cstack, rx175_cur, rx175_curclass, "$!cstack"
  rx175_fail455:
    unless rx175_bstack, rx175_done453
    pop $I19, rx175_bstack
    if_null rx175_cstack, rx175_cstack_done458
    unless rx175_cstack, rx175_cstack_done458
    dec $I19
    set $P11, rx175_cstack[$I19]
  rx175_cstack_done458:
    pop rx175_rep, rx175_bstack
    pop rx175_pos, rx175_bstack
    pop $I19, rx175_bstack
    lt rx175_pos, -1, rx175_done453
    lt rx175_pos, 0, rx175_fail455
    eq $I19, 0, rx175_fail455
    nqp_islist $I20, rx175_cstack
    unless $I20, rx175_jump456
    elements $I18, rx175_bstack
    le $I18, 0, rx175_cut457
    dec $I18
    set $I18, rx175_bstack[$I18]
  rx175_cut457:
    assign rx175_cstack, $I18
  rx175_jump456:
    jump $I19
  rx175_done453:
    rx175_cur."!cursor_fail"()
    .return (rx175_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_30_1360623852.546") :anon :lex :outer("cuid_29_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx180_start
    .local string rx180_tgt
    .local int rx180_pos
    .local int rx180_off
    .local int rx180_eos
    .local int rx180_rep
    .local pmc rx180_cur
    .local pmc rx180_curclass
    .local pmc rx180_bstack
    .local pmc rx180_cstack
    rx180_start = self."!cursor_start_all"()
    set rx180_cur, rx180_start[0]
    set rx180_tgt, rx180_start[1]
    set rx180_pos, rx180_start[2]
    set rx180_curclass, rx180_start[3]
    set rx180_bstack, rx180_start[4]
    set $I19, rx180_start[5]
    store_lex unicode:"$\x{a2}", rx180_cur
    length rx180_eos, rx180_tgt
    eq $I19, 1, rx180_restart470
    gt rx180_pos, rx180_eos, rx180_fail471
    repr_get_attr_int $I11, self, rx180_curclass, "$!from"
    ne $I11, -1, rxscan181_done477
    goto rxscan181_scan476
  rxscan181_loop475:
    inc rx180_pos
    gt rx180_pos, rx180_eos, rx180_fail471
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!from", rx180_pos
  rxscan181_scan476:
    nqp_rxmark rx180_bstack, rxscan181_loop475, rx180_pos, 0
  rxscan181_done477:
    ge rx180_pos, rx180_eos, rx180_fail471
    is_cclass $I11, .CCLASS_WORD, rx180_tgt, rx180_pos
    unless $I11, rx180_fail471
    add rx180_pos, 1
    rx180_cur."!cursor_pass"(rx180_pos, 'backtrack'=>1)
    .return (rx180_cur)
  rx180_restart470:
    repr_get_attr_obj rx180_cstack, rx180_cur, rx180_curclass, "$!cstack"
  rx180_fail471:
    unless rx180_bstack, rx180_done469
    pop $I19, rx180_bstack
    if_null rx180_cstack, rx180_cstack_done474
    unless rx180_cstack, rx180_cstack_done474
    dec $I19
    set $P11, rx180_cstack[$I19]
  rx180_cstack_done474:
    pop rx180_rep, rx180_bstack
    pop rx180_pos, rx180_bstack
    pop $I19, rx180_bstack
    lt rx180_pos, -1, rx180_done469
    lt rx180_pos, 0, rx180_fail471
    eq $I19, 0, rx180_fail471
    nqp_islist $I20, rx180_cstack
    unless $I20, rx180_jump472
    elements $I18, rx180_bstack
    le $I18, 0, rx180_cut473
    dec $I18
    set $I18, rx180_bstack[$I18]
  rx180_cut473:
    assign rx180_cstack, $I18
  rx180_jump472:
    jump $I19
  rx180_done469:
    rx180_cur."!cursor_fail"()
    .return (rx180_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier" :subid("cuid_31_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 158
    .param pmc self 
    $P5001 = self."!protoregex"("quantifier")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<*>" :subid("cuid_32_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 159
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx183_start
    .local string rx183_tgt
    .local int rx183_pos
    .local int rx183_off
    .local int rx183_eos
    .local int rx183_rep
    .local pmc rx183_cur
    .local pmc rx183_curclass
    .local pmc rx183_bstack
    .local pmc rx183_cstack
    rx183_start = self."!cursor_start_all"()
    set rx183_cur, rx183_start[0]
    set rx183_tgt, rx183_start[1]
    set rx183_pos, rx183_start[2]
    set rx183_curclass, rx183_start[3]
    set rx183_bstack, rx183_start[4]
    set $I19, rx183_start[5]
    store_lex unicode:"$\x{a2}", rx183_cur
    length rx183_eos, rx183_tgt
    eq $I19, 1, rx183_restart482
    gt rx183_pos, rx183_eos, rx183_fail483
    repr_get_attr_int $I11, self, rx183_curclass, "$!from"
    ne $I11, -1, rxscan184_done489
    goto rxscan184_scan488
  rxscan184_loop487:
    inc rx183_pos
    gt rx183_pos, rx183_eos, rx183_fail483
    repr_bind_attr_int rx183_cur, rx183_curclass, "$!from", rx183_pos
  rxscan184_scan488:
    nqp_rxmark rx183_bstack, rxscan184_loop487, rx183_pos, 0
  rxscan184_done489:
    nqp_rxmark rx183_bstack, rxcap185_fail491, rx183_pos, 0
    add $I11, rx183_pos, 1
    gt $I11, rx183_eos, rx183_fail483
    substr $S10, rx183_tgt, rx183_pos, 1
    ne $S10, ucs4:"*", rx183_fail483
    add rx183_pos, 1
    nqp_rxpeek $I19, rx183_bstack, rxcap185_fail491
    inc $I19
    set $I11, rx183_bstack[$I19]
    repr_bind_attr_int rx183_cur, rx183_curclass, "$!pos", rx183_pos
    $P11 = rx183_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx183_pos)
    rx183_cstack = rx183_cur."!cursor_capture"($P11, "sym")
    goto rxcap185_done490
  rxcap185_fail491:
    goto rx183_fail483
  rxcap185_done490:
    repr_bind_attr_int rx183_cur, rx183_curclass, "$!pos", rx183_pos
    $P11 = rx183_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx183_curclass, "$!pos"
    lt $I11, 0, rx183_fail483
    nqp_rxmark rx183_bstack, rxsubrule186_pass492, -1, 0
  rxsubrule186_pass492:
    rx183_cstack = rx183_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx183_pos, $P11, rx183_curclass, "$!pos"
    rx183_cur."!cursor_pass"(rx183_pos, "quantifier:sym<*>", 'backtrack'=>1)
    .return (rx183_cur)
  rx183_restart482:
    repr_get_attr_obj rx183_cstack, rx183_cur, rx183_curclass, "$!cstack"
  rx183_fail483:
    unless rx183_bstack, rx183_done481
    pop $I19, rx183_bstack
    if_null rx183_cstack, rx183_cstack_done486
    unless rx183_cstack, rx183_cstack_done486
    dec $I19
    set $P11, rx183_cstack[$I19]
  rx183_cstack_done486:
    pop rx183_rep, rx183_bstack
    pop rx183_pos, rx183_bstack
    pop $I19, rx183_bstack
    lt rx183_pos, -1, rx183_done481
    lt rx183_pos, 0, rx183_fail483
    eq $I19, 0, rx183_fail483
    nqp_islist $I20, rx183_cstack
    unless $I20, rx183_jump484
    elements $I18, rx183_bstack
    le $I18, 0, rx183_cut485
    dec $I18
    set $I18, rx183_bstack[$I18]
  rx183_cut485:
    assign rx183_cstack, $I18
  rx183_jump484:
    jump $I19
  rx183_done481:
    rx183_cur."!cursor_fail"()
    .return (rx183_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<+>" :subid("cuid_33_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 160
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx187_start
    .local string rx187_tgt
    .local int rx187_pos
    .local int rx187_off
    .local int rx187_eos
    .local int rx187_rep
    .local pmc rx187_cur
    .local pmc rx187_curclass
    .local pmc rx187_bstack
    .local pmc rx187_cstack
    rx187_start = self."!cursor_start_all"()
    set rx187_cur, rx187_start[0]
    set rx187_tgt, rx187_start[1]
    set rx187_pos, rx187_start[2]
    set rx187_curclass, rx187_start[3]
    set rx187_bstack, rx187_start[4]
    set $I19, rx187_start[5]
    store_lex unicode:"$\x{a2}", rx187_cur
    length rx187_eos, rx187_tgt
    eq $I19, 1, rx187_restart495
    gt rx187_pos, rx187_eos, rx187_fail496
    repr_get_attr_int $I11, self, rx187_curclass, "$!from"
    ne $I11, -1, rxscan188_done502
    goto rxscan188_scan501
  rxscan188_loop500:
    inc rx187_pos
    gt rx187_pos, rx187_eos, rx187_fail496
    repr_bind_attr_int rx187_cur, rx187_curclass, "$!from", rx187_pos
  rxscan188_scan501:
    nqp_rxmark rx187_bstack, rxscan188_loop500, rx187_pos, 0
  rxscan188_done502:
    nqp_rxmark rx187_bstack, rxcap189_fail504, rx187_pos, 0
    add $I11, rx187_pos, 1
    gt $I11, rx187_eos, rx187_fail496
    substr $S10, rx187_tgt, rx187_pos, 1
    ne $S10, ucs4:"+", rx187_fail496
    add rx187_pos, 1
    nqp_rxpeek $I19, rx187_bstack, rxcap189_fail504
    inc $I19
    set $I11, rx187_bstack[$I19]
    repr_bind_attr_int rx187_cur, rx187_curclass, "$!pos", rx187_pos
    $P11 = rx187_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx187_pos)
    rx187_cstack = rx187_cur."!cursor_capture"($P11, "sym")
    goto rxcap189_done503
  rxcap189_fail504:
    goto rx187_fail496
  rxcap189_done503:
    repr_bind_attr_int rx187_cur, rx187_curclass, "$!pos", rx187_pos
    $P11 = rx187_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx187_curclass, "$!pos"
    lt $I11, 0, rx187_fail496
    nqp_rxmark rx187_bstack, rxsubrule190_pass505, -1, 0
  rxsubrule190_pass505:
    rx187_cstack = rx187_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx187_pos, $P11, rx187_curclass, "$!pos"
    rx187_cur."!cursor_pass"(rx187_pos, "quantifier:sym<+>", 'backtrack'=>1)
    .return (rx187_cur)
  rx187_restart495:
    repr_get_attr_obj rx187_cstack, rx187_cur, rx187_curclass, "$!cstack"
  rx187_fail496:
    unless rx187_bstack, rx187_done494
    pop $I19, rx187_bstack
    if_null rx187_cstack, rx187_cstack_done499
    unless rx187_cstack, rx187_cstack_done499
    dec $I19
    set $P11, rx187_cstack[$I19]
  rx187_cstack_done499:
    pop rx187_rep, rx187_bstack
    pop rx187_pos, rx187_bstack
    pop $I19, rx187_bstack
    lt rx187_pos, -1, rx187_done494
    lt rx187_pos, 0, rx187_fail496
    eq $I19, 0, rx187_fail496
    nqp_islist $I20, rx187_cstack
    unless $I20, rx187_jump497
    elements $I18, rx187_bstack
    le $I18, 0, rx187_cut498
    dec $I18
    set $I18, rx187_bstack[$I18]
  rx187_cut498:
    assign rx187_cstack, $I18
  rx187_jump497:
    jump $I19
  rx187_done494:
    rx187_cur."!cursor_fail"()
    .return (rx187_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<?>" :subid("cuid_34_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 161
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx191_start
    .local string rx191_tgt
    .local int rx191_pos
    .local int rx191_off
    .local int rx191_eos
    .local int rx191_rep
    .local pmc rx191_cur
    .local pmc rx191_curclass
    .local pmc rx191_bstack
    .local pmc rx191_cstack
    rx191_start = self."!cursor_start_all"()
    set rx191_cur, rx191_start[0]
    set rx191_tgt, rx191_start[1]
    set rx191_pos, rx191_start[2]
    set rx191_curclass, rx191_start[3]
    set rx191_bstack, rx191_start[4]
    set $I19, rx191_start[5]
    store_lex unicode:"$\x{a2}", rx191_cur
    length rx191_eos, rx191_tgt
    eq $I19, 1, rx191_restart508
    gt rx191_pos, rx191_eos, rx191_fail509
    repr_get_attr_int $I11, self, rx191_curclass, "$!from"
    ne $I11, -1, rxscan192_done515
    goto rxscan192_scan514
  rxscan192_loop513:
    inc rx191_pos
    gt rx191_pos, rx191_eos, rx191_fail509
    repr_bind_attr_int rx191_cur, rx191_curclass, "$!from", rx191_pos
  rxscan192_scan514:
    nqp_rxmark rx191_bstack, rxscan192_loop513, rx191_pos, 0
  rxscan192_done515:
    nqp_rxmark rx191_bstack, rxcap193_fail517, rx191_pos, 0
    add $I11, rx191_pos, 1
    gt $I11, rx191_eos, rx191_fail509
    substr $S10, rx191_tgt, rx191_pos, 1
    ne $S10, ucs4:"?", rx191_fail509
    add rx191_pos, 1
    nqp_rxpeek $I19, rx191_bstack, rxcap193_fail517
    inc $I19
    set $I11, rx191_bstack[$I19]
    repr_bind_attr_int rx191_cur, rx191_curclass, "$!pos", rx191_pos
    $P11 = rx191_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx191_pos)
    rx191_cstack = rx191_cur."!cursor_capture"($P11, "sym")
    goto rxcap193_done516
  rxcap193_fail517:
    goto rx191_fail509
  rxcap193_done516:
    repr_bind_attr_int rx191_cur, rx191_curclass, "$!pos", rx191_pos
    $P11 = rx191_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx191_curclass, "$!pos"
    lt $I11, 0, rx191_fail509
    nqp_rxmark rx191_bstack, rxsubrule194_pass518, -1, 0
  rxsubrule194_pass518:
    rx191_cstack = rx191_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx191_pos, $P11, rx191_curclass, "$!pos"
    rx191_cur."!cursor_pass"(rx191_pos, "quantifier:sym<?>", 'backtrack'=>1)
    .return (rx191_cur)
  rx191_restart508:
    repr_get_attr_obj rx191_cstack, rx191_cur, rx191_curclass, "$!cstack"
  rx191_fail509:
    unless rx191_bstack, rx191_done507
    pop $I19, rx191_bstack
    if_null rx191_cstack, rx191_cstack_done512
    unless rx191_cstack, rx191_cstack_done512
    dec $I19
    set $P11, rx191_cstack[$I19]
  rx191_cstack_done512:
    pop rx191_rep, rx191_bstack
    pop rx191_pos, rx191_bstack
    pop $I19, rx191_bstack
    lt rx191_pos, -1, rx191_done507
    lt rx191_pos, 0, rx191_fail509
    eq $I19, 0, rx191_fail509
    nqp_islist $I20, rx191_cstack
    unless $I20, rx191_jump510
    elements $I18, rx191_bstack
    le $I18, 0, rx191_cut511
    dec $I18
    set $I18, rx191_bstack[$I18]
  rx191_cut511:
    assign rx191_cstack, $I18
  rx191_jump510:
    jump $I19
  rx191_done507:
    rx191_cur."!cursor_fail"()
    .return (rx191_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<{N,M}>" :subid("cuid_35_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 162
    .param pmc _lex_param_0 
    .const 'Sub' $P5007 = 'cuid_185_1360623852.546' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_36_1360623852.546' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_37_1360623852.546' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_38_1360623852.546' 
    capture_lex $P5007 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx195_start
    .local string rx195_tgt
    .local int rx195_pos
    .local int rx195_off
    .local int rx195_eos
    .local int rx195_rep
    .local pmc rx195_cur
    .local pmc rx195_curclass
    .local pmc rx195_bstack
    .local pmc rx195_cstack
    rx195_start = self."!cursor_start_all"()
    set rx195_cur, rx195_start[0]
    set rx195_tgt, rx195_start[1]
    set rx195_pos, rx195_start[2]
    set rx195_curclass, rx195_start[3]
    set rx195_bstack, rx195_start[4]
    set $I19, rx195_start[5]
    store_lex unicode:"$\x{a2}", rx195_cur
    length rx195_eos, rx195_tgt
    eq $I19, 1, rx195_restart521
    gt rx195_pos, rx195_eos, rx195_fail522
    repr_get_attr_int $I11, self, rx195_curclass, "$!from"
    ne $I11, -1, rxscan196_done528
    goto rxscan196_scan527
  rxscan196_loop526:
    inc rx195_pos
    gt rx195_pos, rx195_eos, rx195_fail522
    repr_bind_attr_int rx195_cur, rx195_curclass, "$!from", rx195_pos
  rxscan196_scan527:
    nqp_rxmark rx195_bstack, rxscan196_loop526, rx195_pos, 0
  rxscan196_done528:
    repr_bind_attr_int rx195_cur, rx195_curclass, "$!pos", rx195_pos
    store_lex unicode:"$\x{a2}", rx195_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_185_1360623852.546' 
    capture_lex $P5002
    $P5003 = $P5002()
    add $I11, rx195_pos, 1
    gt $I11, rx195_eos, rx195_fail522
    substr $S10, rx195_tgt, rx195_pos, 1
    ne $S10, ucs4:"{", rx195_fail522
    add rx195_pos, 1
    .const 'Sub' $P5004 = 'cuid_36_1360623852.546' 
    capture_lex $P5004
    repr_bind_attr_int rx195_cur, rx195_curclass, "$!pos", rx195_pos
    $P11 = rx195_cur.$P5004()
    repr_get_attr_int $I11, $P11, rx195_curclass, "$!pos"
    lt $I11, 0, rx195_fail522
    nqp_rxmark rx195_bstack, rxsubrule200_pass541, -1, 0
  rxsubrule200_pass541:
    rx195_cstack = rx195_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx195_pos, $P11, rx195_curclass, "$!pos"
    .const 'Sub' $P5005 = 'cuid_37_1360623852.546' 
    capture_lex $P5005
    repr_bind_attr_int rx195_cur, rx195_curclass, "$!pos", rx195_pos
    $P11 = rx195_cur.$P5005()
    repr_get_attr_int $I11, $P11, rx195_curclass, "$!pos"
    lt $I11, 0, rx195_fail522
    nqp_rxmark rx195_bstack, rxsubrule204_pass554, -1, 0
  rxsubrule204_pass554:
    rx195_cstack = rx195_cur."!cursor_capture"($P11, "1")
    repr_get_attr_int rx195_pos, $P11, rx195_curclass, "$!pos"
    .const 'Sub' $P5006 = 'cuid_38_1360623852.546' 
    capture_lex $P5006
    repr_bind_attr_int rx195_cur, rx195_curclass, "$!pos", rx195_pos
    $P11 = rx195_cur.$P5006()
    repr_get_attr_int $I11, $P11, rx195_curclass, "$!pos"
    lt $I11, 0, rx195_fail522
    nqp_rxmark rx195_bstack, rxsubrule208_pass567, -1, 0
  rxsubrule208_pass567:
    rx195_cstack = rx195_cur."!cursor_capture"($P11, "2")
    repr_get_attr_int rx195_pos, $P11, rx195_curclass, "$!pos"
    add $I11, rx195_pos, 1
    gt $I11, rx195_eos, rx195_fail522
    substr $S10, rx195_tgt, rx195_pos, 1
    ne $S10, ucs4:"}", rx195_fail522
    add rx195_pos, 1
    repr_bind_attr_int rx195_cur, rx195_curclass, "$!pos", rx195_pos
    $P11 = rx195_cur."obs"("{N,M} as general quantifier", "** N..M (or ** N..*)")
    repr_get_attr_int $I11, $P11, rx195_curclass, "$!pos"
    lt $I11, 0, rx195_fail522
    repr_get_attr_int rx195_pos, $P11, rx195_curclass, "$!pos"
    rx195_cur."!cursor_pass"(rx195_pos, "quantifier:sym<{N,M}>", 'backtrack'=>1)
    .return (rx195_cur)
  rx195_restart521:
    repr_get_attr_obj rx195_cstack, rx195_cur, rx195_curclass, "$!cstack"
  rx195_fail522:
    unless rx195_bstack, rx195_done520
    pop $I19, rx195_bstack
    if_null rx195_cstack, rx195_cstack_done525
    unless rx195_cstack, rx195_cstack_done525
    dec $I19
    set $P11, rx195_cstack[$I19]
  rx195_cstack_done525:
    pop rx195_rep, rx195_bstack
    pop rx195_pos, rx195_bstack
    pop $I19, rx195_bstack
    lt rx195_pos, -1, rx195_done520
    lt rx195_pos, 0, rx195_fail522
    eq $I19, 0, rx195_fail522
    nqp_islist $I20, rx195_cstack
    unless $I20, rx195_jump523
    elements $I18, rx195_bstack
    le $I18, 0, rx195_cut524
    dec $I18
    set $I18, rx195_bstack[$I18]
  rx195_cut524:
    assign rx195_cstack, $I18
  rx195_jump523:
    jump $I19
  rx195_done520:
    rx195_cur."!cursor_fail"()
    .return (rx195_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_185_1360623852.546") :anon :lex :outer("cuid_35_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 162

    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_36_1360623852.546") :anon :lex :outer("cuid_35_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx197_start
    .local string rx197_tgt
    .local int rx197_pos
    .local int rx197_off
    .local int rx197_eos
    .local int rx197_rep
    .local pmc rx197_cur
    .local pmc rx197_curclass
    .local pmc rx197_bstack
    .local pmc rx197_cstack
    rx197_start = self."!cursor_start_all"()
    set rx197_cur, rx197_start[0]
    set rx197_tgt, rx197_start[1]
    set rx197_pos, rx197_start[2]
    set rx197_curclass, rx197_start[3]
    set rx197_bstack, rx197_start[4]
    set $I19, rx197_start[5]
    store_lex unicode:"$\x{a2}", rx197_cur
    length rx197_eos, rx197_tgt
    eq $I19, 1, rx197_restart531
    gt rx197_pos, rx197_eos, rx197_fail532
    repr_get_attr_int $I11, self, rx197_curclass, "$!from"
    ne $I11, -1, rxscan198_done538
    goto rxscan198_scan537
  rxscan198_loop536:
    inc rx197_pos
    gt rx197_pos, rx197_eos, rx197_fail532
    repr_bind_attr_int rx197_cur, rx197_curclass, "$!from", rx197_pos
  rxscan198_scan537:
    nqp_rxmark rx197_bstack, rxscan198_loop536, rx197_pos, 0
  rxscan198_done538:
    nqp_rxmark rx197_bstack, rxquantr199_done540, -1, 0
  rxquantr199_loop539:
    ge rx197_pos, rx197_eos, rx197_fail532
    is_cclass $I11, .CCLASS_NUMERIC, rx197_tgt, rx197_pos
    unless $I11, rx197_fail532
    add rx197_pos, 1
    nqp_rxpeek $I19, rx197_bstack, rxquantr199_done540
    inc $I19
    inc $I19
    set rx197_rep, rx197_bstack[$I19]
    nqp_rxcommit rx197_bstack, rxquantr199_done540
    inc rx197_rep
    nqp_rxmark rx197_bstack, rxquantr199_done540, rx197_pos, rx197_rep
    goto rxquantr199_loop539
  rxquantr199_done540:
    rx197_cur."!cursor_pass"(rx197_pos, 'backtrack'=>1)
    .return (rx197_cur)
  rx197_restart531:
    repr_get_attr_obj rx197_cstack, rx197_cur, rx197_curclass, "$!cstack"
  rx197_fail532:
    unless rx197_bstack, rx197_done530
    pop $I19, rx197_bstack
    if_null rx197_cstack, rx197_cstack_done535
    unless rx197_cstack, rx197_cstack_done535
    dec $I19
    set $P11, rx197_cstack[$I19]
  rx197_cstack_done535:
    pop rx197_rep, rx197_bstack
    pop rx197_pos, rx197_bstack
    pop $I19, rx197_bstack
    lt rx197_pos, -1, rx197_done530
    lt rx197_pos, 0, rx197_fail532
    eq $I19, 0, rx197_fail532
    nqp_islist $I20, rx197_cstack
    unless $I20, rx197_jump533
    elements $I18, rx197_bstack
    le $I18, 0, rx197_cut534
    dec $I18
    set $I18, rx197_bstack[$I18]
  rx197_cut534:
    assign rx197_cstack, $I18
  rx197_jump533:
    jump $I19
  rx197_done530:
    rx197_cur."!cursor_fail"()
    .return (rx197_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_37_1360623852.546") :anon :lex :outer("cuid_35_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx201_start
    .local string rx201_tgt
    .local int rx201_pos
    .local int rx201_off
    .local int rx201_eos
    .local int rx201_rep
    .local pmc rx201_cur
    .local pmc rx201_curclass
    .local pmc rx201_bstack
    .local pmc rx201_cstack
    rx201_start = self."!cursor_start_all"()
    set rx201_cur, rx201_start[0]
    set rx201_tgt, rx201_start[1]
    set rx201_pos, rx201_start[2]
    set rx201_curclass, rx201_start[3]
    set rx201_bstack, rx201_start[4]
    set $I19, rx201_start[5]
    store_lex unicode:"$\x{a2}", rx201_cur
    length rx201_eos, rx201_tgt
    eq $I19, 1, rx201_restart544
    gt rx201_pos, rx201_eos, rx201_fail545
    repr_get_attr_int $I11, self, rx201_curclass, "$!from"
    ne $I11, -1, rxscan202_done551
    goto rxscan202_scan550
  rxscan202_loop549:
    inc rx201_pos
    gt rx201_pos, rx201_eos, rx201_fail545
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!from", rx201_pos
  rxscan202_scan550:
    nqp_rxmark rx201_bstack, rxscan202_loop549, rx201_pos, 0
  rxscan202_done551:
    nqp_rxmark rx201_bstack, rxquantr203_done553, rx201_pos, 0
  rxquantr203_loop552:
    add $I11, rx201_pos, 1
    gt $I11, rx201_eos, rx201_fail545
    substr $S10, rx201_tgt, rx201_pos, 1
    ne $S10, ucs4:",", rx201_fail545
    add rx201_pos, 1
    nqp_rxpeek $I19, rx201_bstack, rxquantr203_done553
    inc $I19
    inc $I19
    set rx201_rep, rx201_bstack[$I19]
    nqp_rxcommit rx201_bstack, rxquantr203_done553
    inc rx201_rep
  rxquantr203_done553:
    rx201_cur."!cursor_pass"(rx201_pos, 'backtrack'=>1)
    .return (rx201_cur)
  rx201_restart544:
    repr_get_attr_obj rx201_cstack, rx201_cur, rx201_curclass, "$!cstack"
  rx201_fail545:
    unless rx201_bstack, rx201_done543
    pop $I19, rx201_bstack
    if_null rx201_cstack, rx201_cstack_done548
    unless rx201_cstack, rx201_cstack_done548
    dec $I19
    set $P11, rx201_cstack[$I19]
  rx201_cstack_done548:
    pop rx201_rep, rx201_bstack
    pop rx201_pos, rx201_bstack
    pop $I19, rx201_bstack
    lt rx201_pos, -1, rx201_done543
    lt rx201_pos, 0, rx201_fail545
    eq $I19, 0, rx201_fail545
    nqp_islist $I20, rx201_cstack
    unless $I20, rx201_jump546
    elements $I18, rx201_bstack
    le $I18, 0, rx201_cut547
    dec $I18
    set $I18, rx201_bstack[$I18]
  rx201_cut547:
    assign rx201_cstack, $I18
  rx201_jump546:
    jump $I19
  rx201_done543:
    rx201_cur."!cursor_fail"()
    .return (rx201_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_38_1360623852.546") :anon :lex :outer("cuid_35_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx205_start
    .local string rx205_tgt
    .local int rx205_pos
    .local int rx205_off
    .local int rx205_eos
    .local int rx205_rep
    .local pmc rx205_cur
    .local pmc rx205_curclass
    .local pmc rx205_bstack
    .local pmc rx205_cstack
    rx205_start = self."!cursor_start_all"()
    set rx205_cur, rx205_start[0]
    set rx205_tgt, rx205_start[1]
    set rx205_pos, rx205_start[2]
    set rx205_curclass, rx205_start[3]
    set rx205_bstack, rx205_start[4]
    set $I19, rx205_start[5]
    store_lex unicode:"$\x{a2}", rx205_cur
    length rx205_eos, rx205_tgt
    eq $I19, 1, rx205_restart557
    gt rx205_pos, rx205_eos, rx205_fail558
    repr_get_attr_int $I11, self, rx205_curclass, "$!from"
    ne $I11, -1, rxscan206_done564
    goto rxscan206_scan563
  rxscan206_loop562:
    inc rx205_pos
    gt rx205_pos, rx205_eos, rx205_fail558
    repr_bind_attr_int rx205_cur, rx205_curclass, "$!from", rx205_pos
  rxscan206_scan563:
    nqp_rxmark rx205_bstack, rxscan206_loop562, rx205_pos, 0
  rxscan206_done564:
    nqp_rxmark rx205_bstack, rxquantr207_done566, rx205_pos, 0
  rxquantr207_loop565:
    ge rx205_pos, rx205_eos, rx205_fail558
    is_cclass $I11, .CCLASS_NUMERIC, rx205_tgt, rx205_pos
    unless $I11, rx205_fail558
    add rx205_pos, 1
    nqp_rxpeek $I19, rx205_bstack, rxquantr207_done566
    inc $I19
    inc $I19
    set rx205_rep, rx205_bstack[$I19]
    nqp_rxcommit rx205_bstack, rxquantr207_done566
    inc rx205_rep
    nqp_rxmark rx205_bstack, rxquantr207_done566, rx205_pos, rx205_rep
    goto rxquantr207_loop565
  rxquantr207_done566:
    rx205_cur."!cursor_pass"(rx205_pos, 'backtrack'=>1)
    .return (rx205_cur)
  rx205_restart557:
    repr_get_attr_obj rx205_cstack, rx205_cur, rx205_curclass, "$!cstack"
  rx205_fail558:
    unless rx205_bstack, rx205_done556
    pop $I19, rx205_bstack
    if_null rx205_cstack, rx205_cstack_done561
    unless rx205_cstack, rx205_cstack_done561
    dec $I19
    set $P11, rx205_cstack[$I19]
  rx205_cstack_done561:
    pop rx205_rep, rx205_bstack
    pop rx205_pos, rx205_bstack
    pop $I19, rx205_bstack
    lt rx205_pos, -1, rx205_done556
    lt rx205_pos, 0, rx205_fail558
    eq $I19, 0, rx205_fail558
    nqp_islist $I20, rx205_cstack
    unless $I20, rx205_jump559
    elements $I18, rx205_bstack
    le $I18, 0, rx205_cut560
    dec $I18
    set $I18, rx205_bstack[$I18]
  rx205_cut560:
    assign rx205_cstack, $I18
  rx205_jump559:
    jump $I19
  rx205_done556:
    rx205_cur."!cursor_fail"()
    .return (rx205_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<**>" :subid("cuid_39_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 165
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx210_start
    .local string rx210_tgt
    .local int rx210_pos
    .local int rx210_off
    .local int rx210_eos
    .local int rx210_rep
    .local pmc rx210_cur
    .local pmc rx210_curclass
    .local pmc rx210_bstack
    .local pmc rx210_cstack
    rx210_start = self."!cursor_start_all"()
    set rx210_cur, rx210_start[0]
    set rx210_tgt, rx210_start[1]
    set rx210_pos, rx210_start[2]
    set rx210_curclass, rx210_start[3]
    set rx210_bstack, rx210_start[4]
    set $I19, rx210_start[5]
    store_lex unicode:"$\x{a2}", rx210_cur
    length rx210_eos, rx210_tgt
    eq $I19, 1, rx210_restart571
    gt rx210_pos, rx210_eos, rx210_fail572
    repr_get_attr_int $I11, self, rx210_curclass, "$!from"
    ne $I11, -1, rxscan211_done578
    goto rxscan211_scan577
  rxscan211_loop576:
    inc rx210_pos
    gt rx210_pos, rx210_eos, rx210_fail572
    repr_bind_attr_int rx210_cur, rx210_curclass, "$!from", rx210_pos
  rxscan211_scan577:
    nqp_rxmark rx210_bstack, rxscan211_loop576, rx210_pos, 0
  rxscan211_done578:
    nqp_rxmark rx210_bstack, rxcap212_fail580, rx210_pos, 0
    add $I11, rx210_pos, 2
    gt $I11, rx210_eos, rx210_fail572
    substr $S10, rx210_tgt, rx210_pos, 2
    ne $S10, ucs4:"**", rx210_fail572
    add rx210_pos, 2
    nqp_rxpeek $I19, rx210_bstack, rxcap212_fail580
    inc $I19
    set $I11, rx210_bstack[$I19]
    repr_bind_attr_int rx210_cur, rx210_curclass, "$!pos", rx210_pos
    $P11 = rx210_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx210_pos)
    rx210_cstack = rx210_cur."!cursor_capture"($P11, "sym")
    goto rxcap212_done579
  rxcap212_fail580:
    goto rx210_fail572
  rxcap212_done579:
    nqp_rxmark rx210_bstack, rxquantr213_done582, rx210_pos, 0
  rxquantr213_loop581:
    repr_bind_attr_int rx210_cur, rx210_curclass, "$!pos", rx210_pos
    $P11 = rx210_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx210_curclass, "$!pos"
    lt $I11, 0, rx210_fail572
    goto rxsubrule214_pass583
  rxsubrule214_back584:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx210_curclass, "$!pos"
    lt $I11, 0, rx210_fail572
  rxsubrule214_pass583:
    rx210_cstack = rx210_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule214_back584
    push rx210_bstack, $I11
    push rx210_bstack, 0
    push rx210_bstack, rx210_pos
    elements $I11, rx210_cstack
    push rx210_bstack, $I11
    repr_get_attr_int rx210_pos, $P11, rx210_curclass, "$!pos"
    nqp_rxpeek $I19, rx210_bstack, rxquantr213_done582
    inc $I19
    inc $I19
    set rx210_rep, rx210_bstack[$I19]
    nqp_rxcommit rx210_bstack, rxquantr213_done582
    inc rx210_rep
  rxquantr213_done582:
    repr_bind_attr_int rx210_cur, rx210_curclass, "$!pos", rx210_pos
    $P11 = rx210_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx210_curclass, "$!pos"
    lt $I11, 0, rx210_fail572
    nqp_rxmark rx210_bstack, rxsubrule215_pass585, -1, 0
  rxsubrule215_pass585:
    rx210_cstack = rx210_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx210_pos, $P11, rx210_curclass, "$!pos"
    nqp_rxmark rx210_bstack, rxquantr216_done587, rx210_pos, 0
  rxquantr216_loop586:
    repr_bind_attr_int rx210_cur, rx210_curclass, "$!pos", rx210_pos
    $P11 = rx210_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx210_curclass, "$!pos"
    lt $I11, 0, rx210_fail572
    goto rxsubrule217_pass588
  rxsubrule217_back589:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx210_curclass, "$!pos"
    lt $I11, 0, rx210_fail572
  rxsubrule217_pass588:
    rx210_cstack = rx210_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule217_back589
    push rx210_bstack, $I11
    push rx210_bstack, 0
    push rx210_bstack, rx210_pos
    elements $I11, rx210_cstack
    push rx210_bstack, $I11
    repr_get_attr_int rx210_pos, $P11, rx210_curclass, "$!pos"
    nqp_rxpeek $I19, rx210_bstack, rxquantr216_done587
    inc $I19
    inc $I19
    set rx210_rep, rx210_bstack[$I19]
    nqp_rxcommit rx210_bstack, rxquantr216_done587
    inc rx210_rep
  rxquantr216_done587:
    nqp_rxmark rx210_bstack, rxcap218_fail591, rx210_pos, 0
    nqp_rxmark rx210_bstack, rxquantr219_done593, -1, 0
  rxquantr219_loop592:
    ge rx210_pos, rx210_eos, rx210_fail572
    is_cclass $I11, .CCLASS_NUMERIC, rx210_tgt, rx210_pos
    unless $I11, rx210_fail572
    add rx210_pos, 1
    nqp_rxpeek $I19, rx210_bstack, rxquantr219_done593
    inc $I19
    inc $I19
    set rx210_rep, rx210_bstack[$I19]
    nqp_rxcommit rx210_bstack, rxquantr219_done593
    inc rx210_rep
    nqp_rxmark rx210_bstack, rxquantr219_done593, rx210_pos, rx210_rep
    goto rxquantr219_loop592
  rxquantr219_done593:
    nqp_rxpeek $I19, rx210_bstack, rxcap218_fail591
    inc $I19
    set $I11, rx210_bstack[$I19]
    repr_bind_attr_int rx210_cur, rx210_curclass, "$!pos", rx210_pos
    $P11 = rx210_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx210_pos)
    rx210_cstack = rx210_cur."!cursor_capture"($P11, "min")
    goto rxcap218_done590
  rxcap218_fail591:
    goto rx210_fail572
  rxcap218_done590:
    nqp_rxmark rx210_bstack, rxquantr220_done595, rx210_pos, 0
  rxquantr220_loop594:
    add $I11, rx210_pos, 2
    gt $I11, rx210_eos, rx210_fail572
    substr $S10, rx210_tgt, rx210_pos, 2
    ne $S10, ucs4:"..", rx210_fail572
    add rx210_pos, 2
    nqp_rxmark rx210_bstack, rxcap221_fail597, rx210_pos, 0
  alt222_0599:
    nqp_rxmark rx210_bstack, alt222_1602, rx210_pos, 0
    nqp_rxmark rx210_bstack, rxquantr223_done601, -1, 0
  rxquantr223_loop600:
    ge rx210_pos, rx210_eos, rx210_fail572
    is_cclass $I11, .CCLASS_NUMERIC, rx210_tgt, rx210_pos
    unless $I11, rx210_fail572
    add rx210_pos, 1
    nqp_rxpeek $I19, rx210_bstack, rxquantr223_done601
    inc $I19
    inc $I19
    set rx210_rep, rx210_bstack[$I19]
    nqp_rxcommit rx210_bstack, rxquantr223_done601
    inc rx210_rep
    nqp_rxmark rx210_bstack, rxquantr223_done601, rx210_pos, rx210_rep
    goto rxquantr223_loop600
  rxquantr223_done601:
    goto alt222_end598
  alt222_1602:
    nqp_rxmark rx210_bstack, alt222_2603, rx210_pos, 0
    add $I11, rx210_pos, 1
    gt $I11, rx210_eos, rx210_fail572
    substr $S10, rx210_tgt, rx210_pos, 1
    ne $S10, ucs4:"*", rx210_fail572
    add rx210_pos, 1
    goto alt222_end598
  alt222_2603:
    repr_bind_attr_int rx210_cur, rx210_curclass, "$!pos", rx210_pos
    $P11 = rx210_cur."panic"("Only integers or '*' allowed as range quantifier endpoint")
    repr_get_attr_int $I11, $P11, rx210_curclass, "$!pos"
    lt $I11, 0, rx210_fail572
    repr_get_attr_int rx210_pos, $P11, rx210_curclass, "$!pos"
  alt222_end598:
    nqp_rxpeek $I19, rx210_bstack, rxcap221_fail597
    inc $I19
    set $I11, rx210_bstack[$I19]
    repr_bind_attr_int rx210_cur, rx210_curclass, "$!pos", rx210_pos
    $P11 = rx210_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx210_pos)
    rx210_cstack = rx210_cur."!cursor_capture"($P11, "max")
    goto rxcap221_done596
  rxcap221_fail597:
    goto rx210_fail572
  rxcap221_done596:
    nqp_rxpeek $I19, rx210_bstack, rxquantr220_done595
    inc $I19
    inc $I19
    set rx210_rep, rx210_bstack[$I19]
    nqp_rxcommit rx210_bstack, rxquantr220_done595
    inc rx210_rep
  rxquantr220_done595:
    rx210_cur."!cursor_pass"(rx210_pos, "quantifier:sym<**>", 'backtrack'=>1)
    .return (rx210_cur)
  rx210_restart571:
    repr_get_attr_obj rx210_cstack, rx210_cur, rx210_curclass, "$!cstack"
  rx210_fail572:
    unless rx210_bstack, rx210_done570
    pop $I19, rx210_bstack
    if_null rx210_cstack, rx210_cstack_done575
    unless rx210_cstack, rx210_cstack_done575
    dec $I19
    set $P11, rx210_cstack[$I19]
  rx210_cstack_done575:
    pop rx210_rep, rx210_bstack
    pop rx210_pos, rx210_bstack
    pop $I19, rx210_bstack
    lt rx210_pos, -1, rx210_done570
    lt rx210_pos, 0, rx210_fail572
    eq $I19, 0, rx210_fail572
    nqp_islist $I20, rx210_cstack
    unless $I20, rx210_jump573
    elements $I18, rx210_bstack
    le $I18, 0, rx210_cut574
    dec $I18
    set $I18, rx210_bstack[$I18]
  rx210_cut574:
    assign rx210_cstack, $I18
  rx210_jump573:
    jump $I19
  rx210_done570:
    rx210_cur."!cursor_fail"()
    .return (rx210_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backmod" :subid("cuid_40_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 179
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_41_1360623852.546' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx225_start
    .local string rx225_tgt
    .local int rx225_pos
    .local int rx225_off
    .local int rx225_eos
    .local int rx225_rep
    .local pmc rx225_cur
    .local pmc rx225_curclass
    .local pmc rx225_bstack
    .local pmc rx225_cstack
    rx225_start = self."!cursor_start_all"()
    set rx225_cur, rx225_start[0]
    set rx225_tgt, rx225_start[1]
    set rx225_pos, rx225_start[2]
    set rx225_curclass, rx225_start[3]
    set rx225_bstack, rx225_start[4]
    set $I19, rx225_start[5]
    store_lex unicode:"$\x{a2}", rx225_cur
    length rx225_eos, rx225_tgt
    eq $I19, 1, rx225_restart607
    gt rx225_pos, rx225_eos, rx225_fail608
    repr_get_attr_int $I11, self, rx225_curclass, "$!from"
    ne $I11, -1, rxscan226_done614
    goto rxscan226_scan613
  rxscan226_loop612:
    inc rx225_pos
    gt rx225_pos, rx225_eos, rx225_fail608
    repr_bind_attr_int rx225_cur, rx225_curclass, "$!from", rx225_pos
  rxscan226_scan613:
    nqp_rxmark rx225_bstack, rxscan226_loop612, rx225_pos, 0
  rxscan226_done614:
    nqp_rxmark rx225_bstack, rxquantr227_done616, rx225_pos, 0
  rxquantr227_loop615:
    add $I11, rx225_pos, 1
    gt $I11, rx225_eos, rx225_fail608
    substr $S10, rx225_tgt, rx225_pos, 1
    ne $S10, ucs4:":", rx225_fail608
    add rx225_pos, 1
    nqp_rxpeek $I19, rx225_bstack, rxquantr227_done616
    inc $I19
    inc $I19
    set rx225_rep, rx225_bstack[$I19]
    nqp_rxcommit rx225_bstack, rxquantr227_done616
    inc rx225_rep
  rxquantr227_done616:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt228_0618
    nqp_push_label $P11, alt228_1619
    nqp_push_label $P11, alt228_2620
    nqp_rxmark rx225_bstack, alt228_end617, -1, 0
    rx225_cur."!alt"(rx225_pos, "alt_nfa__9_1360623852.946", $P11)
    goto rx225_fail608
  alt228_0618:
    add $I11, rx225_pos, 1
    gt $I11, rx225_eos, rx225_fail608
    substr $S10, rx225_tgt, rx225_pos, 1
    ne $S10, ucs4:"?", rx225_fail608
    add rx225_pos, 1
    goto alt228_end617
  alt228_1619:
    add $I11, rx225_pos, 1
    gt $I11, rx225_eos, rx225_fail608
    substr $S10, rx225_tgt, rx225_pos, 1
    ne $S10, ucs4:"!", rx225_fail608
    add rx225_pos, 1
    goto alt228_end617
  alt228_2620:
    .const 'Sub' $P5001 = 'cuid_41_1360623852.546' 
    capture_lex $P5001
    repr_bind_attr_int rx225_cur, rx225_curclass, "$!pos", rx225_pos
    $P11 = rx225_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx225_curclass, "$!pos"
    ge $I11, 0, rx225_fail608
    goto alt228_end617
  alt228_end617:
    nqp_rxcommit rx225_bstack, alt228_end617
    rx225_cur."!cursor_pass"(rx225_pos, "backmod", 'backtrack'=>1)
    .return (rx225_cur)
  rx225_restart607:
    repr_get_attr_obj rx225_cstack, rx225_cur, rx225_curclass, "$!cstack"
  rx225_fail608:
    unless rx225_bstack, rx225_done606
    pop $I19, rx225_bstack
    if_null rx225_cstack, rx225_cstack_done611
    unless rx225_cstack, rx225_cstack_done611
    dec $I19
    set $P11, rx225_cstack[$I19]
  rx225_cstack_done611:
    pop rx225_rep, rx225_bstack
    pop rx225_pos, rx225_bstack
    pop $I19, rx225_bstack
    lt rx225_pos, -1, rx225_done606
    lt rx225_pos, 0, rx225_fail608
    eq $I19, 0, rx225_fail608
    nqp_islist $I20, rx225_cstack
    unless $I20, rx225_jump609
    elements $I18, rx225_bstack
    le $I18, 0, rx225_cut610
    dec $I18
    set $I18, rx225_bstack[$I18]
  rx225_cut610:
    assign rx225_cstack, $I18
  rx225_jump609:
    jump $I19
  rx225_done606:
    rx225_cur."!cursor_fail"()
    .return (rx225_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_41_1360623852.546") :anon :lex :outer("cuid_40_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx229_start
    .local string rx229_tgt
    .local int rx229_pos
    .local int rx229_off
    .local int rx229_eos
    .local int rx229_rep
    .local pmc rx229_cur
    .local pmc rx229_curclass
    .local pmc rx229_bstack
    .local pmc rx229_cstack
    rx229_start = self."!cursor_start_all"()
    set rx229_cur, rx229_start[0]
    set rx229_tgt, rx229_start[1]
    set rx229_pos, rx229_start[2]
    set rx229_curclass, rx229_start[3]
    set rx229_bstack, rx229_start[4]
    set $I19, rx229_start[5]
    store_lex unicode:"$\x{a2}", rx229_cur
    length rx229_eos, rx229_tgt
    eq $I19, 1, rx229_restart623
    gt rx229_pos, rx229_eos, rx229_fail624
    repr_get_attr_int $I11, self, rx229_curclass, "$!from"
    ne $I11, -1, rxscan230_done630
    goto rxscan230_scan629
  rxscan230_loop628:
    inc rx229_pos
    gt rx229_pos, rx229_eos, rx229_fail624
    repr_bind_attr_int rx229_cur, rx229_curclass, "$!from", rx229_pos
  rxscan230_scan629:
    nqp_rxmark rx229_bstack, rxscan230_loop628, rx229_pos, 0
  rxscan230_done630:
    add $I11, rx229_pos, 1
    gt $I11, rx229_eos, rx229_fail624
    substr $S10, rx229_tgt, rx229_pos, 1
    ne $S10, ucs4:":", rx229_fail624
    add rx229_pos, 1
    rx229_cur."!cursor_pass"(rx229_pos, 'backtrack'=>1)
    .return (rx229_cur)
  rx229_restart623:
    repr_get_attr_obj rx229_cstack, rx229_cur, rx229_curclass, "$!cstack"
  rx229_fail624:
    unless rx229_bstack, rx229_done622
    pop $I19, rx229_bstack
    if_null rx229_cstack, rx229_cstack_done627
    unless rx229_cstack, rx229_cstack_done627
    dec $I19
    set $P11, rx229_cstack[$I19]
  rx229_cstack_done627:
    pop rx229_rep, rx229_bstack
    pop rx229_pos, rx229_bstack
    pop $I19, rx229_bstack
    lt rx229_pos, -1, rx229_done622
    lt rx229_pos, 0, rx229_fail624
    eq $I19, 0, rx229_fail624
    nqp_islist $I20, rx229_cstack
    unless $I20, rx229_jump625
    elements $I18, rx229_bstack
    le $I18, 0, rx229_cut626
    dec $I18
    set $I18, rx229_bstack[$I18]
  rx229_cut626:
    assign rx229_cstack, $I18
  rx229_jump625:
    jump $I19
  rx229_done622:
    rx229_cur."!cursor_fail"()
    .return (rx229_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar" :subid("cuid_42_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 181
    .param pmc self 
    $P5001 = self."!protoregex"("metachar")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<ws>" :subid("cuid_43_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 182
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx231_start
    .local string rx231_tgt
    .local int rx231_pos
    .local int rx231_off
    .local int rx231_eos
    .local int rx231_rep
    .local pmc rx231_cur
    .local pmc rx231_curclass
    .local pmc rx231_bstack
    .local pmc rx231_cstack
    rx231_start = self."!cursor_start_all"()
    set rx231_cur, rx231_start[0]
    set rx231_tgt, rx231_start[1]
    set rx231_pos, rx231_start[2]
    set rx231_curclass, rx231_start[3]
    set rx231_bstack, rx231_start[4]
    set $I19, rx231_start[5]
    store_lex unicode:"$\x{a2}", rx231_cur
    length rx231_eos, rx231_tgt
    eq $I19, 1, rx231_restart633
    gt rx231_pos, rx231_eos, rx231_fail634
    repr_get_attr_int $I11, self, rx231_curclass, "$!from"
    ne $I11, -1, rxscan232_done640
    goto rxscan232_scan639
  rxscan232_loop638:
    inc rx231_pos
    gt rx231_pos, rx231_eos, rx231_fail634
    repr_bind_attr_int rx231_cur, rx231_curclass, "$!from", rx231_pos
  rxscan232_scan639:
    nqp_rxmark rx231_bstack, rxscan232_loop638, rx231_pos, 0
  rxscan232_done640:
    repr_bind_attr_int rx231_cur, rx231_curclass, "$!pos", rx231_pos
    $P11 = rx231_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx231_curclass, "$!pos"
    lt $I11, 0, rx231_fail634
    repr_get_attr_int rx231_pos, $P11, rx231_curclass, "$!pos"
    rx231_cur."!cursor_pass"(rx231_pos, "metachar:sym<ws>", 'backtrack'=>1)
    .return (rx231_cur)
  rx231_restart633:
    repr_get_attr_obj rx231_cstack, rx231_cur, rx231_curclass, "$!cstack"
  rx231_fail634:
    unless rx231_bstack, rx231_done632
    pop $I19, rx231_bstack
    if_null rx231_cstack, rx231_cstack_done637
    unless rx231_cstack, rx231_cstack_done637
    dec $I19
    set $P11, rx231_cstack[$I19]
  rx231_cstack_done637:
    pop rx231_rep, rx231_bstack
    pop rx231_pos, rx231_bstack
    pop $I19, rx231_bstack
    lt rx231_pos, -1, rx231_done632
    lt rx231_pos, 0, rx231_fail634
    eq $I19, 0, rx231_fail634
    nqp_islist $I20, rx231_cstack
    unless $I20, rx231_jump635
    elements $I18, rx231_bstack
    le $I18, 0, rx231_cut636
    dec $I18
    set $I18, rx231_bstack[$I18]
  rx231_cut636:
    assign rx231_cstack, $I18
  rx231_jump635:
    jump $I19
  rx231_done632:
    rx231_cur."!cursor_fail"()
    .return (rx231_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<[ ]>" :subid("cuid_44_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 183
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx234_start
    .local string rx234_tgt
    .local int rx234_pos
    .local int rx234_off
    .local int rx234_eos
    .local int rx234_rep
    .local pmc rx234_cur
    .local pmc rx234_curclass
    .local pmc rx234_bstack
    .local pmc rx234_cstack
    rx234_start = self."!cursor_start_all"()
    set rx234_cur, rx234_start[0]
    set rx234_tgt, rx234_start[1]
    set rx234_pos, rx234_start[2]
    set rx234_curclass, rx234_start[3]
    set rx234_bstack, rx234_start[4]
    set $I19, rx234_start[5]
    store_lex unicode:"$\x{a2}", rx234_cur
    length rx234_eos, rx234_tgt
    eq $I19, 1, rx234_restart644
    gt rx234_pos, rx234_eos, rx234_fail645
    repr_get_attr_int $I11, self, rx234_curclass, "$!from"
    ne $I11, -1, rxscan235_done651
    goto rxscan235_scan650
  rxscan235_loop649:
    inc rx234_pos
    gt rx234_pos, rx234_eos, rx234_fail645
    repr_bind_attr_int rx234_cur, rx234_curclass, "$!from", rx234_pos
  rxscan235_scan650:
    nqp_rxmark rx234_bstack, rxscan235_loop649, rx234_pos, 0
  rxscan235_done651:
    add $I11, rx234_pos, 1
    gt $I11, rx234_eos, rx234_fail645
    substr $S10, rx234_tgt, rx234_pos, 1
    ne $S10, ucs4:"[", rx234_fail645
    add rx234_pos, 1
    repr_bind_attr_int rx234_cur, rx234_curclass, "$!pos", rx234_pos
    $P11 = rx234_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx234_curclass, "$!pos"
    lt $I11, 0, rx234_fail645
    nqp_rxmark rx234_bstack, rxsubrule236_pass652, -1, 0
  rxsubrule236_pass652:
    rx234_cstack = rx234_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx234_pos, $P11, rx234_curclass, "$!pos"
    add $I11, rx234_pos, 1
    gt $I11, rx234_eos, rx234_fail645
    substr $S10, rx234_tgt, rx234_pos, 1
    ne $S10, ucs4:"]", rx234_fail645
    add rx234_pos, 1
    rx234_cur."!cursor_pass"(rx234_pos, "metachar:sym<[ ]>", 'backtrack'=>1)
    .return (rx234_cur)
  rx234_restart644:
    repr_get_attr_obj rx234_cstack, rx234_cur, rx234_curclass, "$!cstack"
  rx234_fail645:
    unless rx234_bstack, rx234_done643
    pop $I19, rx234_bstack
    if_null rx234_cstack, rx234_cstack_done648
    unless rx234_cstack, rx234_cstack_done648
    dec $I19
    set $P11, rx234_cstack[$I19]
  rx234_cstack_done648:
    pop rx234_rep, rx234_bstack
    pop rx234_pos, rx234_bstack
    pop $I19, rx234_bstack
    lt rx234_pos, -1, rx234_done643
    lt rx234_pos, 0, rx234_fail645
    eq $I19, 0, rx234_fail645
    nqp_islist $I20, rx234_cstack
    unless $I20, rx234_jump646
    elements $I18, rx234_bstack
    le $I18, 0, rx234_cut647
    dec $I18
    set $I18, rx234_bstack[$I18]
  rx234_cut647:
    assign rx234_cstack, $I18
  rx234_jump646:
    jump $I19
  rx234_done643:
    rx234_cur."!cursor_fail"()
    .return (rx234_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<( )>" :subid("cuid_45_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 184
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx237_start
    .local string rx237_tgt
    .local int rx237_pos
    .local int rx237_off
    .local int rx237_eos
    .local int rx237_rep
    .local pmc rx237_cur
    .local pmc rx237_curclass
    .local pmc rx237_bstack
    .local pmc rx237_cstack
    rx237_start = self."!cursor_start_all"()
    set rx237_cur, rx237_start[0]
    set rx237_tgt, rx237_start[1]
    set rx237_pos, rx237_start[2]
    set rx237_curclass, rx237_start[3]
    set rx237_bstack, rx237_start[4]
    set $I19, rx237_start[5]
    store_lex unicode:"$\x{a2}", rx237_cur
    length rx237_eos, rx237_tgt
    eq $I19, 1, rx237_restart655
    gt rx237_pos, rx237_eos, rx237_fail656
    repr_get_attr_int $I11, self, rx237_curclass, "$!from"
    ne $I11, -1, rxscan238_done662
    goto rxscan238_scan661
  rxscan238_loop660:
    inc rx237_pos
    gt rx237_pos, rx237_eos, rx237_fail656
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!from", rx237_pos
  rxscan238_scan661:
    nqp_rxmark rx237_bstack, rxscan238_loop660, rx237_pos, 0
  rxscan238_done662:
    add $I11, rx237_pos, 1
    gt $I11, rx237_eos, rx237_fail656
    substr $S10, rx237_tgt, rx237_pos, 1
    ne $S10, ucs4:"(", rx237_fail656
    add rx237_pos, 1
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail656
    nqp_rxmark rx237_bstack, rxsubrule239_pass663, -1, 0
  rxsubrule239_pass663:
    rx237_cstack = rx237_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    add $I11, rx237_pos, 1
    gt $I11, rx237_eos, rx237_fail656
    substr $S10, rx237_tgt, rx237_pos, 1
    ne $S10, ucs4:")", rx237_fail656
    add rx237_pos, 1
    rx237_cur."!cursor_pass"(rx237_pos, "metachar:sym<( )>", 'backtrack'=>1)
    .return (rx237_cur)
  rx237_restart655:
    repr_get_attr_obj rx237_cstack, rx237_cur, rx237_curclass, "$!cstack"
  rx237_fail656:
    unless rx237_bstack, rx237_done654
    pop $I19, rx237_bstack
    if_null rx237_cstack, rx237_cstack_done659
    unless rx237_cstack, rx237_cstack_done659
    dec $I19
    set $P11, rx237_cstack[$I19]
  rx237_cstack_done659:
    pop rx237_rep, rx237_bstack
    pop rx237_pos, rx237_bstack
    pop $I19, rx237_bstack
    lt rx237_pos, -1, rx237_done654
    lt rx237_pos, 0, rx237_fail656
    eq $I19, 0, rx237_fail656
    nqp_islist $I20, rx237_cstack
    unless $I20, rx237_jump657
    elements $I18, rx237_bstack
    le $I18, 0, rx237_cut658
    dec $I18
    set $I18, rx237_bstack[$I18]
  rx237_cut658:
    assign rx237_cstack, $I18
  rx237_jump657:
    jump $I19
  rx237_done654:
    rx237_cur."!cursor_fail"()
    .return (rx237_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<'>" :subid("cuid_46_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 185
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx240_start
    .local string rx240_tgt
    .local int rx240_pos
    .local int rx240_off
    .local int rx240_eos
    .local int rx240_rep
    .local pmc rx240_cur
    .local pmc rx240_curclass
    .local pmc rx240_bstack
    .local pmc rx240_cstack
    rx240_start = self."!cursor_start_all"()
    set rx240_cur, rx240_start[0]
    set rx240_tgt, rx240_start[1]
    set rx240_pos, rx240_start[2]
    set rx240_curclass, rx240_start[3]
    set rx240_bstack, rx240_start[4]
    set $I19, rx240_start[5]
    store_lex unicode:"$\x{a2}", rx240_cur
    length rx240_eos, rx240_tgt
    eq $I19, 1, rx240_restart666
    gt rx240_pos, rx240_eos, rx240_fail667
    repr_get_attr_int $I11, self, rx240_curclass, "$!from"
    ne $I11, -1, rxscan241_done673
    goto rxscan241_scan672
  rxscan241_loop671:
    inc rx240_pos
    gt rx240_pos, rx240_eos, rx240_fail667
    repr_bind_attr_int rx240_cur, rx240_curclass, "$!from", rx240_pos
  rxscan241_scan672:
    nqp_rxmark rx240_bstack, rxscan241_loop671, rx240_pos, 0
  rxscan241_done673:
    ge rx240_pos, rx240_eos, rx240_fail667
    substr $S11, rx240_tgt, rx240_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx240_fail667
    repr_bind_attr_int rx240_cur, rx240_curclass, "$!pos", rx240_pos
    $P11 = rx240_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx240_curclass, "$!pos"
    lt $I11, 0, rx240_fail667
    nqp_rxmark rx240_bstack, rxsubrule242_pass674, -1, 0
  rxsubrule242_pass674:
    rx240_cstack = rx240_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx240_pos, $P11, rx240_curclass, "$!pos"
    rx240_cur."!cursor_pass"(rx240_pos, "metachar:sym<'>", 'backtrack'=>1)
    .return (rx240_cur)
  rx240_restart666:
    repr_get_attr_obj rx240_cstack, rx240_cur, rx240_curclass, "$!cstack"
  rx240_fail667:
    unless rx240_bstack, rx240_done665
    pop $I19, rx240_bstack
    if_null rx240_cstack, rx240_cstack_done670
    unless rx240_cstack, rx240_cstack_done670
    dec $I19
    set $P11, rx240_cstack[$I19]
  rx240_cstack_done670:
    pop rx240_rep, rx240_bstack
    pop rx240_pos, rx240_bstack
    pop $I19, rx240_bstack
    lt rx240_pos, -1, rx240_done665
    lt rx240_pos, 0, rx240_fail667
    eq $I19, 0, rx240_fail667
    nqp_islist $I20, rx240_cstack
    unless $I20, rx240_jump668
    elements $I18, rx240_bstack
    le $I18, 0, rx240_cut669
    dec $I18
    set $I18, rx240_bstack[$I18]
  rx240_cut669:
    assign rx240_cstack, $I18
  rx240_jump668:
    jump $I19
  rx240_done665:
    rx240_cur."!cursor_fail"()
    .return (rx240_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<\">" :subid("cuid_47_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 186
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx243_start
    .local string rx243_tgt
    .local int rx243_pos
    .local int rx243_off
    .local int rx243_eos
    .local int rx243_rep
    .local pmc rx243_cur
    .local pmc rx243_curclass
    .local pmc rx243_bstack
    .local pmc rx243_cstack
    rx243_start = self."!cursor_start_all"()
    set rx243_cur, rx243_start[0]
    set rx243_tgt, rx243_start[1]
    set rx243_pos, rx243_start[2]
    set rx243_curclass, rx243_start[3]
    set rx243_bstack, rx243_start[4]
    set $I19, rx243_start[5]
    store_lex unicode:"$\x{a2}", rx243_cur
    length rx243_eos, rx243_tgt
    eq $I19, 1, rx243_restart677
    gt rx243_pos, rx243_eos, rx243_fail678
    repr_get_attr_int $I11, self, rx243_curclass, "$!from"
    ne $I11, -1, rxscan244_done684
    goto rxscan244_scan683
  rxscan244_loop682:
    inc rx243_pos
    gt rx243_pos, rx243_eos, rx243_fail678
    repr_bind_attr_int rx243_cur, rx243_curclass, "$!from", rx243_pos
  rxscan244_scan683:
    nqp_rxmark rx243_bstack, rxscan244_loop682, rx243_pos, 0
  rxscan244_done684:
    ge rx243_pos, rx243_eos, rx243_fail678
    substr $S11, rx243_tgt, rx243_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx243_fail678
    repr_bind_attr_int rx243_cur, rx243_curclass, "$!pos", rx243_pos
    $P11 = rx243_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx243_curclass, "$!pos"
    lt $I11, 0, rx243_fail678
    nqp_rxmark rx243_bstack, rxsubrule245_pass685, -1, 0
  rxsubrule245_pass685:
    rx243_cstack = rx243_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx243_pos, $P11, rx243_curclass, "$!pos"
    rx243_cur."!cursor_pass"(rx243_pos, "metachar:sym<\">", 'backtrack'=>1)
    .return (rx243_cur)
  rx243_restart677:
    repr_get_attr_obj rx243_cstack, rx243_cur, rx243_curclass, "$!cstack"
  rx243_fail678:
    unless rx243_bstack, rx243_done676
    pop $I19, rx243_bstack
    if_null rx243_cstack, rx243_cstack_done681
    unless rx243_cstack, rx243_cstack_done681
    dec $I19
    set $P11, rx243_cstack[$I19]
  rx243_cstack_done681:
    pop rx243_rep, rx243_bstack
    pop rx243_pos, rx243_bstack
    pop $I19, rx243_bstack
    lt rx243_pos, -1, rx243_done676
    lt rx243_pos, 0, rx243_fail678
    eq $I19, 0, rx243_fail678
    nqp_islist $I20, rx243_cstack
    unless $I20, rx243_jump679
    elements $I18, rx243_bstack
    le $I18, 0, rx243_cut680
    dec $I18
    set $I18, rx243_bstack[$I18]
  rx243_cut680:
    assign rx243_cstack, $I18
  rx243_jump679:
    jump $I19
  rx243_done676:
    rx243_cur."!cursor_fail"()
    .return (rx243_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<.>" :subid("cuid_48_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 187
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx246_start
    .local string rx246_tgt
    .local int rx246_pos
    .local int rx246_off
    .local int rx246_eos
    .local int rx246_rep
    .local pmc rx246_cur
    .local pmc rx246_curclass
    .local pmc rx246_bstack
    .local pmc rx246_cstack
    rx246_start = self."!cursor_start_all"()
    set rx246_cur, rx246_start[0]
    set rx246_tgt, rx246_start[1]
    set rx246_pos, rx246_start[2]
    set rx246_curclass, rx246_start[3]
    set rx246_bstack, rx246_start[4]
    set $I19, rx246_start[5]
    store_lex unicode:"$\x{a2}", rx246_cur
    length rx246_eos, rx246_tgt
    eq $I19, 1, rx246_restart688
    gt rx246_pos, rx246_eos, rx246_fail689
    repr_get_attr_int $I11, self, rx246_curclass, "$!from"
    ne $I11, -1, rxscan247_done695
    goto rxscan247_scan694
  rxscan247_loop693:
    inc rx246_pos
    gt rx246_pos, rx246_eos, rx246_fail689
    repr_bind_attr_int rx246_cur, rx246_curclass, "$!from", rx246_pos
  rxscan247_scan694:
    nqp_rxmark rx246_bstack, rxscan247_loop693, rx246_pos, 0
  rxscan247_done695:
    nqp_rxmark rx246_bstack, rxcap248_fail697, rx246_pos, 0
    add $I11, rx246_pos, 1
    gt $I11, rx246_eos, rx246_fail689
    substr $S10, rx246_tgt, rx246_pos, 1
    ne $S10, ucs4:".", rx246_fail689
    add rx246_pos, 1
    nqp_rxpeek $I19, rx246_bstack, rxcap248_fail697
    inc $I19
    set $I11, rx246_bstack[$I19]
    repr_bind_attr_int rx246_cur, rx246_curclass, "$!pos", rx246_pos
    $P11 = rx246_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx246_pos)
    rx246_cstack = rx246_cur."!cursor_capture"($P11, "sym")
    goto rxcap248_done696
  rxcap248_fail697:
    goto rx246_fail689
  rxcap248_done696:
    rx246_cur."!cursor_pass"(rx246_pos, "metachar:sym<.>", 'backtrack'=>1)
    .return (rx246_cur)
  rx246_restart688:
    repr_get_attr_obj rx246_cstack, rx246_cur, rx246_curclass, "$!cstack"
  rx246_fail689:
    unless rx246_bstack, rx246_done687
    pop $I19, rx246_bstack
    if_null rx246_cstack, rx246_cstack_done692
    unless rx246_cstack, rx246_cstack_done692
    dec $I19
    set $P11, rx246_cstack[$I19]
  rx246_cstack_done692:
    pop rx246_rep, rx246_bstack
    pop rx246_pos, rx246_bstack
    pop $I19, rx246_bstack
    lt rx246_pos, -1, rx246_done687
    lt rx246_pos, 0, rx246_fail689
    eq $I19, 0, rx246_fail689
    nqp_islist $I20, rx246_cstack
    unless $I20, rx246_jump690
    elements $I18, rx246_bstack
    le $I18, 0, rx246_cut691
    dec $I18
    set $I18, rx246_bstack[$I18]
  rx246_cut691:
    assign rx246_cstack, $I18
  rx246_jump690:
    jump $I19
  rx246_done687:
    rx246_cur."!cursor_fail"()
    .return (rx246_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^>" :subid("cuid_49_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 188
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx249_start
    .local string rx249_tgt
    .local int rx249_pos
    .local int rx249_off
    .local int rx249_eos
    .local int rx249_rep
    .local pmc rx249_cur
    .local pmc rx249_curclass
    .local pmc rx249_bstack
    .local pmc rx249_cstack
    rx249_start = self."!cursor_start_all"()
    set rx249_cur, rx249_start[0]
    set rx249_tgt, rx249_start[1]
    set rx249_pos, rx249_start[2]
    set rx249_curclass, rx249_start[3]
    set rx249_bstack, rx249_start[4]
    set $I19, rx249_start[5]
    store_lex unicode:"$\x{a2}", rx249_cur
    length rx249_eos, rx249_tgt
    eq $I19, 1, rx249_restart700
    gt rx249_pos, rx249_eos, rx249_fail701
    repr_get_attr_int $I11, self, rx249_curclass, "$!from"
    ne $I11, -1, rxscan250_done707
    goto rxscan250_scan706
  rxscan250_loop705:
    inc rx249_pos
    gt rx249_pos, rx249_eos, rx249_fail701
    repr_bind_attr_int rx249_cur, rx249_curclass, "$!from", rx249_pos
  rxscan250_scan706:
    nqp_rxmark rx249_bstack, rxscan250_loop705, rx249_pos, 0
  rxscan250_done707:
    nqp_rxmark rx249_bstack, rxcap251_fail709, rx249_pos, 0
    add $I11, rx249_pos, 1
    gt $I11, rx249_eos, rx249_fail701
    substr $S10, rx249_tgt, rx249_pos, 1
    ne $S10, ucs4:"^", rx249_fail701
    add rx249_pos, 1
    nqp_rxpeek $I19, rx249_bstack, rxcap251_fail709
    inc $I19
    set $I11, rx249_bstack[$I19]
    repr_bind_attr_int rx249_cur, rx249_curclass, "$!pos", rx249_pos
    $P11 = rx249_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx249_pos)
    rx249_cstack = rx249_cur."!cursor_capture"($P11, "sym")
    goto rxcap251_done708
  rxcap251_fail709:
    goto rx249_fail701
  rxcap251_done708:
    rx249_cur."!cursor_pass"(rx249_pos, "metachar:sym<^>", 'backtrack'=>1)
    .return (rx249_cur)
  rx249_restart700:
    repr_get_attr_obj rx249_cstack, rx249_cur, rx249_curclass, "$!cstack"
  rx249_fail701:
    unless rx249_bstack, rx249_done699
    pop $I19, rx249_bstack
    if_null rx249_cstack, rx249_cstack_done704
    unless rx249_cstack, rx249_cstack_done704
    dec $I19
    set $P11, rx249_cstack[$I19]
  rx249_cstack_done704:
    pop rx249_rep, rx249_bstack
    pop rx249_pos, rx249_bstack
    pop $I19, rx249_bstack
    lt rx249_pos, -1, rx249_done699
    lt rx249_pos, 0, rx249_fail701
    eq $I19, 0, rx249_fail701
    nqp_islist $I20, rx249_cstack
    unless $I20, rx249_jump702
    elements $I18, rx249_bstack
    le $I18, 0, rx249_cut703
    dec $I18
    set $I18, rx249_bstack[$I18]
  rx249_cut703:
    assign rx249_cstack, $I18
  rx249_jump702:
    jump $I19
  rx249_done699:
    rx249_cur."!cursor_fail"()
    .return (rx249_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^^>" :subid("cuid_50_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 189
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx252_start
    .local string rx252_tgt
    .local int rx252_pos
    .local int rx252_off
    .local int rx252_eos
    .local int rx252_rep
    .local pmc rx252_cur
    .local pmc rx252_curclass
    .local pmc rx252_bstack
    .local pmc rx252_cstack
    rx252_start = self."!cursor_start_all"()
    set rx252_cur, rx252_start[0]
    set rx252_tgt, rx252_start[1]
    set rx252_pos, rx252_start[2]
    set rx252_curclass, rx252_start[3]
    set rx252_bstack, rx252_start[4]
    set $I19, rx252_start[5]
    store_lex unicode:"$\x{a2}", rx252_cur
    length rx252_eos, rx252_tgt
    eq $I19, 1, rx252_restart712
    gt rx252_pos, rx252_eos, rx252_fail713
    repr_get_attr_int $I11, self, rx252_curclass, "$!from"
    ne $I11, -1, rxscan253_done719
    goto rxscan253_scan718
  rxscan253_loop717:
    inc rx252_pos
    gt rx252_pos, rx252_eos, rx252_fail713
    repr_bind_attr_int rx252_cur, rx252_curclass, "$!from", rx252_pos
  rxscan253_scan718:
    nqp_rxmark rx252_bstack, rxscan253_loop717, rx252_pos, 0
  rxscan253_done719:
    nqp_rxmark rx252_bstack, rxcap254_fail721, rx252_pos, 0
    add $I11, rx252_pos, 2
    gt $I11, rx252_eos, rx252_fail713
    substr $S10, rx252_tgt, rx252_pos, 2
    ne $S10, ucs4:"^^", rx252_fail713
    add rx252_pos, 2
    nqp_rxpeek $I19, rx252_bstack, rxcap254_fail721
    inc $I19
    set $I11, rx252_bstack[$I19]
    repr_bind_attr_int rx252_cur, rx252_curclass, "$!pos", rx252_pos
    $P11 = rx252_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx252_pos)
    rx252_cstack = rx252_cur."!cursor_capture"($P11, "sym")
    goto rxcap254_done720
  rxcap254_fail721:
    goto rx252_fail713
  rxcap254_done720:
    rx252_cur."!cursor_pass"(rx252_pos, "metachar:sym<^^>", 'backtrack'=>1)
    .return (rx252_cur)
  rx252_restart712:
    repr_get_attr_obj rx252_cstack, rx252_cur, rx252_curclass, "$!cstack"
  rx252_fail713:
    unless rx252_bstack, rx252_done711
    pop $I19, rx252_bstack
    if_null rx252_cstack, rx252_cstack_done716
    unless rx252_cstack, rx252_cstack_done716
    dec $I19
    set $P11, rx252_cstack[$I19]
  rx252_cstack_done716:
    pop rx252_rep, rx252_bstack
    pop rx252_pos, rx252_bstack
    pop $I19, rx252_bstack
    lt rx252_pos, -1, rx252_done711
    lt rx252_pos, 0, rx252_fail713
    eq $I19, 0, rx252_fail713
    nqp_islist $I20, rx252_cstack
    unless $I20, rx252_jump714
    elements $I18, rx252_bstack
    le $I18, 0, rx252_cut715
    dec $I18
    set $I18, rx252_bstack[$I18]
  rx252_cut715:
    assign rx252_cstack, $I18
  rx252_jump714:
    jump $I19
  rx252_done711:
    rx252_cur."!cursor_fail"()
    .return (rx252_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$>" :subid("cuid_51_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 190
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx255_start
    .local string rx255_tgt
    .local int rx255_pos
    .local int rx255_off
    .local int rx255_eos
    .local int rx255_rep
    .local pmc rx255_cur
    .local pmc rx255_curclass
    .local pmc rx255_bstack
    .local pmc rx255_cstack
    rx255_start = self."!cursor_start_all"()
    set rx255_cur, rx255_start[0]
    set rx255_tgt, rx255_start[1]
    set rx255_pos, rx255_start[2]
    set rx255_curclass, rx255_start[3]
    set rx255_bstack, rx255_start[4]
    set $I19, rx255_start[5]
    store_lex unicode:"$\x{a2}", rx255_cur
    length rx255_eos, rx255_tgt
    eq $I19, 1, rx255_restart724
    gt rx255_pos, rx255_eos, rx255_fail725
    repr_get_attr_int $I11, self, rx255_curclass, "$!from"
    ne $I11, -1, rxscan256_done731
    goto rxscan256_scan730
  rxscan256_loop729:
    inc rx255_pos
    gt rx255_pos, rx255_eos, rx255_fail725
    repr_bind_attr_int rx255_cur, rx255_curclass, "$!from", rx255_pos
  rxscan256_scan730:
    nqp_rxmark rx255_bstack, rxscan256_loop729, rx255_pos, 0
  rxscan256_done731:
    nqp_rxmark rx255_bstack, rxcap257_fail733, rx255_pos, 0
    add $I11, rx255_pos, 1
    gt $I11, rx255_eos, rx255_fail725
    substr $S10, rx255_tgt, rx255_pos, 1
    ne $S10, ucs4:"$", rx255_fail725
    add rx255_pos, 1
    nqp_rxpeek $I19, rx255_bstack, rxcap257_fail733
    inc $I19
    set $I11, rx255_bstack[$I19]
    repr_bind_attr_int rx255_cur, rx255_curclass, "$!pos", rx255_pos
    $P11 = rx255_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx255_pos)
    rx255_cstack = rx255_cur."!cursor_capture"($P11, "sym")
    goto rxcap257_done732
  rxcap257_fail733:
    goto rx255_fail725
  rxcap257_done732:
    rx255_cur."!cursor_pass"(rx255_pos, "metachar:sym<$>", 'backtrack'=>1)
    .return (rx255_cur)
  rx255_restart724:
    repr_get_attr_obj rx255_cstack, rx255_cur, rx255_curclass, "$!cstack"
  rx255_fail725:
    unless rx255_bstack, rx255_done723
    pop $I19, rx255_bstack
    if_null rx255_cstack, rx255_cstack_done728
    unless rx255_cstack, rx255_cstack_done728
    dec $I19
    set $P11, rx255_cstack[$I19]
  rx255_cstack_done728:
    pop rx255_rep, rx255_bstack
    pop rx255_pos, rx255_bstack
    pop $I19, rx255_bstack
    lt rx255_pos, -1, rx255_done723
    lt rx255_pos, 0, rx255_fail725
    eq $I19, 0, rx255_fail725
    nqp_islist $I20, rx255_cstack
    unless $I20, rx255_jump726
    elements $I18, rx255_bstack
    le $I18, 0, rx255_cut727
    dec $I18
    set $I18, rx255_bstack[$I18]
  rx255_cut727:
    assign rx255_cstack, $I18
  rx255_jump726:
    jump $I19
  rx255_done723:
    rx255_cur."!cursor_fail"()
    .return (rx255_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$$>" :subid("cuid_52_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 191
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx258_start
    .local string rx258_tgt
    .local int rx258_pos
    .local int rx258_off
    .local int rx258_eos
    .local int rx258_rep
    .local pmc rx258_cur
    .local pmc rx258_curclass
    .local pmc rx258_bstack
    .local pmc rx258_cstack
    rx258_start = self."!cursor_start_all"()
    set rx258_cur, rx258_start[0]
    set rx258_tgt, rx258_start[1]
    set rx258_pos, rx258_start[2]
    set rx258_curclass, rx258_start[3]
    set rx258_bstack, rx258_start[4]
    set $I19, rx258_start[5]
    store_lex unicode:"$\x{a2}", rx258_cur
    length rx258_eos, rx258_tgt
    eq $I19, 1, rx258_restart736
    gt rx258_pos, rx258_eos, rx258_fail737
    repr_get_attr_int $I11, self, rx258_curclass, "$!from"
    ne $I11, -1, rxscan259_done743
    goto rxscan259_scan742
  rxscan259_loop741:
    inc rx258_pos
    gt rx258_pos, rx258_eos, rx258_fail737
    repr_bind_attr_int rx258_cur, rx258_curclass, "$!from", rx258_pos
  rxscan259_scan742:
    nqp_rxmark rx258_bstack, rxscan259_loop741, rx258_pos, 0
  rxscan259_done743:
    nqp_rxmark rx258_bstack, rxcap260_fail745, rx258_pos, 0
    add $I11, rx258_pos, 2
    gt $I11, rx258_eos, rx258_fail737
    substr $S10, rx258_tgt, rx258_pos, 2
    ne $S10, ucs4:"$$", rx258_fail737
    add rx258_pos, 2
    nqp_rxpeek $I19, rx258_bstack, rxcap260_fail745
    inc $I19
    set $I11, rx258_bstack[$I19]
    repr_bind_attr_int rx258_cur, rx258_curclass, "$!pos", rx258_pos
    $P11 = rx258_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx258_pos)
    rx258_cstack = rx258_cur."!cursor_capture"($P11, "sym")
    goto rxcap260_done744
  rxcap260_fail745:
    goto rx258_fail737
  rxcap260_done744:
    rx258_cur."!cursor_pass"(rx258_pos, "metachar:sym<$$>", 'backtrack'=>1)
    .return (rx258_cur)
  rx258_restart736:
    repr_get_attr_obj rx258_cstack, rx258_cur, rx258_curclass, "$!cstack"
  rx258_fail737:
    unless rx258_bstack, rx258_done735
    pop $I19, rx258_bstack
    if_null rx258_cstack, rx258_cstack_done740
    unless rx258_cstack, rx258_cstack_done740
    dec $I19
    set $P11, rx258_cstack[$I19]
  rx258_cstack_done740:
    pop rx258_rep, rx258_bstack
    pop rx258_pos, rx258_bstack
    pop $I19, rx258_bstack
    lt rx258_pos, -1, rx258_done735
    lt rx258_pos, 0, rx258_fail737
    eq $I19, 0, rx258_fail737
    nqp_islist $I20, rx258_cstack
    unless $I20, rx258_jump738
    elements $I18, rx258_bstack
    le $I18, 0, rx258_cut739
    dec $I18
    set $I18, rx258_bstack[$I18]
  rx258_cut739:
    assign rx258_cstack, $I18
  rx258_jump738:
    jump $I19
  rx258_done735:
    rx258_cur."!cursor_fail"()
    .return (rx258_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:::>" :subid("cuid_53_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 192
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx261_start
    .local string rx261_tgt
    .local int rx261_pos
    .local int rx261_off
    .local int rx261_eos
    .local int rx261_rep
    .local pmc rx261_cur
    .local pmc rx261_curclass
    .local pmc rx261_bstack
    .local pmc rx261_cstack
    rx261_start = self."!cursor_start_all"()
    set rx261_cur, rx261_start[0]
    set rx261_tgt, rx261_start[1]
    set rx261_pos, rx261_start[2]
    set rx261_curclass, rx261_start[3]
    set rx261_bstack, rx261_start[4]
    set $I19, rx261_start[5]
    store_lex unicode:"$\x{a2}", rx261_cur
    length rx261_eos, rx261_tgt
    eq $I19, 1, rx261_restart748
    gt rx261_pos, rx261_eos, rx261_fail749
    repr_get_attr_int $I11, self, rx261_curclass, "$!from"
    ne $I11, -1, rxscan262_done755
    goto rxscan262_scan754
  rxscan262_loop753:
    inc rx261_pos
    gt rx261_pos, rx261_eos, rx261_fail749
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!from", rx261_pos
  rxscan262_scan754:
    nqp_rxmark rx261_bstack, rxscan262_loop753, rx261_pos, 0
  rxscan262_done755:
    nqp_rxmark rx261_bstack, rxcap263_fail757, rx261_pos, 0
    add $I11, rx261_pos, 3
    gt $I11, rx261_eos, rx261_fail749
    substr $S10, rx261_tgt, rx261_pos, 3
    ne $S10, ucs4:":::", rx261_fail749
    add rx261_pos, 3
    nqp_rxpeek $I19, rx261_bstack, rxcap263_fail757
    inc $I19
    set $I11, rx261_bstack[$I19]
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx261_pos)
    rx261_cstack = rx261_cur."!cursor_capture"($P11, "sym")
    goto rxcap263_done756
  rxcap263_fail757:
    goto rx261_fail749
  rxcap263_done756:
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."panic"("::: not yet implemented")
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail749
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
    rx261_cur."!cursor_pass"(rx261_pos, "metachar:sym<:::>", 'backtrack'=>1)
    .return (rx261_cur)
  rx261_restart748:
    repr_get_attr_obj rx261_cstack, rx261_cur, rx261_curclass, "$!cstack"
  rx261_fail749:
    unless rx261_bstack, rx261_done747
    pop $I19, rx261_bstack
    if_null rx261_cstack, rx261_cstack_done752
    unless rx261_cstack, rx261_cstack_done752
    dec $I19
    set $P11, rx261_cstack[$I19]
  rx261_cstack_done752:
    pop rx261_rep, rx261_bstack
    pop rx261_pos, rx261_bstack
    pop $I19, rx261_bstack
    lt rx261_pos, -1, rx261_done747
    lt rx261_pos, 0, rx261_fail749
    eq $I19, 0, rx261_fail749
    nqp_islist $I20, rx261_cstack
    unless $I20, rx261_jump750
    elements $I18, rx261_bstack
    le $I18, 0, rx261_cut751
    dec $I18
    set $I18, rx261_bstack[$I18]
  rx261_cut751:
    assign rx261_cstack, $I18
  rx261_jump750:
    jump $I19
  rx261_done747:
    rx261_cur."!cursor_fail"()
    .return (rx261_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<::>" :subid("cuid_54_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 193
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx265_start
    .local string rx265_tgt
    .local int rx265_pos
    .local int rx265_off
    .local int rx265_eos
    .local int rx265_rep
    .local pmc rx265_cur
    .local pmc rx265_curclass
    .local pmc rx265_bstack
    .local pmc rx265_cstack
    rx265_start = self."!cursor_start_all"()
    set rx265_cur, rx265_start[0]
    set rx265_tgt, rx265_start[1]
    set rx265_pos, rx265_start[2]
    set rx265_curclass, rx265_start[3]
    set rx265_bstack, rx265_start[4]
    set $I19, rx265_start[5]
    store_lex unicode:"$\x{a2}", rx265_cur
    length rx265_eos, rx265_tgt
    eq $I19, 1, rx265_restart761
    gt rx265_pos, rx265_eos, rx265_fail762
    repr_get_attr_int $I11, self, rx265_curclass, "$!from"
    ne $I11, -1, rxscan266_done768
    goto rxscan266_scan767
  rxscan266_loop766:
    inc rx265_pos
    gt rx265_pos, rx265_eos, rx265_fail762
    repr_bind_attr_int rx265_cur, rx265_curclass, "$!from", rx265_pos
  rxscan266_scan767:
    nqp_rxmark rx265_bstack, rxscan266_loop766, rx265_pos, 0
  rxscan266_done768:
    nqp_rxmark rx265_bstack, rxcap267_fail770, rx265_pos, 0
    add $I11, rx265_pos, 2
    gt $I11, rx265_eos, rx265_fail762
    substr $S10, rx265_tgt, rx265_pos, 2
    ne $S10, ucs4:"::", rx265_fail762
    add rx265_pos, 2
    nqp_rxpeek $I19, rx265_bstack, rxcap267_fail770
    inc $I19
    set $I11, rx265_bstack[$I19]
    repr_bind_attr_int rx265_cur, rx265_curclass, "$!pos", rx265_pos
    $P11 = rx265_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx265_pos)
    rx265_cstack = rx265_cur."!cursor_capture"($P11, "sym")
    goto rxcap267_done769
  rxcap267_fail770:
    goto rx265_fail762
  rxcap267_done769:
    repr_bind_attr_int rx265_cur, rx265_curclass, "$!pos", rx265_pos
    $P11 = rx265_cur."panic"(":: not yet implemented")
    repr_get_attr_int $I11, $P11, rx265_curclass, "$!pos"
    lt $I11, 0, rx265_fail762
    repr_get_attr_int rx265_pos, $P11, rx265_curclass, "$!pos"
    rx265_cur."!cursor_pass"(rx265_pos, "metachar:sym<::>", 'backtrack'=>1)
    .return (rx265_cur)
  rx265_restart761:
    repr_get_attr_obj rx265_cstack, rx265_cur, rx265_curclass, "$!cstack"
  rx265_fail762:
    unless rx265_bstack, rx265_done760
    pop $I19, rx265_bstack
    if_null rx265_cstack, rx265_cstack_done765
    unless rx265_cstack, rx265_cstack_done765
    dec $I19
    set $P11, rx265_cstack[$I19]
  rx265_cstack_done765:
    pop rx265_rep, rx265_bstack
    pop rx265_pos, rx265_bstack
    pop $I19, rx265_bstack
    lt rx265_pos, -1, rx265_done760
    lt rx265_pos, 0, rx265_fail762
    eq $I19, 0, rx265_fail762
    nqp_islist $I20, rx265_cstack
    unless $I20, rx265_jump763
    elements $I18, rx265_bstack
    le $I18, 0, rx265_cut764
    dec $I18
    set $I18, rx265_bstack[$I18]
  rx265_cut764:
    assign rx265_cstack, $I18
  rx265_jump763:
    jump $I19
  rx265_done760:
    rx265_cur."!cursor_fail"()
    .return (rx265_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<lwb>" :subid("cuid_55_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 194
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx269_start
    .local string rx269_tgt
    .local int rx269_pos
    .local int rx269_off
    .local int rx269_eos
    .local int rx269_rep
    .local pmc rx269_cur
    .local pmc rx269_curclass
    .local pmc rx269_bstack
    .local pmc rx269_cstack
    rx269_start = self."!cursor_start_all"()
    set rx269_cur, rx269_start[0]
    set rx269_tgt, rx269_start[1]
    set rx269_pos, rx269_start[2]
    set rx269_curclass, rx269_start[3]
    set rx269_bstack, rx269_start[4]
    set $I19, rx269_start[5]
    store_lex unicode:"$\x{a2}", rx269_cur
    length rx269_eos, rx269_tgt
    eq $I19, 1, rx269_restart774
    gt rx269_pos, rx269_eos, rx269_fail775
    repr_get_attr_int $I11, self, rx269_curclass, "$!from"
    ne $I11, -1, rxscan270_done781
    goto rxscan270_scan780
  rxscan270_loop779:
    inc rx269_pos
    gt rx269_pos, rx269_eos, rx269_fail775
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!from", rx269_pos
  rxscan270_scan780:
    nqp_rxmark rx269_bstack, rxscan270_loop779, rx269_pos, 0
  rxscan270_done781:
    nqp_rxmark rx269_bstack, rxcap271_fail783, rx269_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt272_0785
    nqp_push_label $P11, alt272_1786
    nqp_rxmark rx269_bstack, alt272_end784, -1, 0
    rx269_cur."!alt"(rx269_pos, "alt_nfa__10_1360623853.014", $P11)
    goto rx269_fail775
  alt272_0785:
    add $I11, rx269_pos, 2
    gt $I11, rx269_eos, rx269_fail775
    substr $S10, rx269_tgt, rx269_pos, 2
    ne $S10, ucs4:"<<", rx269_fail775
    add rx269_pos, 2
    goto alt272_end784
  alt272_1786:
    add $I11, rx269_pos, 1
    gt $I11, rx269_eos, rx269_fail775
    substr $S10, rx269_tgt, rx269_pos, 1
    ne $S10, ucs4:"\x{ab}", rx269_fail775
    add rx269_pos, 1
    goto alt272_end784
  alt272_end784:
    nqp_rxcommit rx269_bstack, alt272_end784
    nqp_rxpeek $I19, rx269_bstack, rxcap271_fail783
    inc $I19
    set $I11, rx269_bstack[$I19]
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!pos", rx269_pos
    $P11 = rx269_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx269_pos)
    rx269_cstack = rx269_cur."!cursor_capture"($P11, "sym")
    goto rxcap271_done782
  rxcap271_fail783:
    goto rx269_fail775
  rxcap271_done782:
    rx269_cur."!cursor_pass"(rx269_pos, "metachar:sym<lwb>", 'backtrack'=>1)
    .return (rx269_cur)
  rx269_restart774:
    repr_get_attr_obj rx269_cstack, rx269_cur, rx269_curclass, "$!cstack"
  rx269_fail775:
    unless rx269_bstack, rx269_done773
    pop $I19, rx269_bstack
    if_null rx269_cstack, rx269_cstack_done778
    unless rx269_cstack, rx269_cstack_done778
    dec $I19
    set $P11, rx269_cstack[$I19]
  rx269_cstack_done778:
    pop rx269_rep, rx269_bstack
    pop rx269_pos, rx269_bstack
    pop $I19, rx269_bstack
    lt rx269_pos, -1, rx269_done773
    lt rx269_pos, 0, rx269_fail775
    eq $I19, 0, rx269_fail775
    nqp_islist $I20, rx269_cstack
    unless $I20, rx269_jump776
    elements $I18, rx269_bstack
    le $I18, 0, rx269_cut777
    dec $I18
    set $I18, rx269_bstack[$I18]
  rx269_cut777:
    assign rx269_cstack, $I18
  rx269_jump776:
    jump $I19
  rx269_done773:
    rx269_cur."!cursor_fail"()
    .return (rx269_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<rwb>" :subid("cuid_56_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 195
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx273_start
    .local string rx273_tgt
    .local int rx273_pos
    .local int rx273_off
    .local int rx273_eos
    .local int rx273_rep
    .local pmc rx273_cur
    .local pmc rx273_curclass
    .local pmc rx273_bstack
    .local pmc rx273_cstack
    rx273_start = self."!cursor_start_all"()
    set rx273_cur, rx273_start[0]
    set rx273_tgt, rx273_start[1]
    set rx273_pos, rx273_start[2]
    set rx273_curclass, rx273_start[3]
    set rx273_bstack, rx273_start[4]
    set $I19, rx273_start[5]
    store_lex unicode:"$\x{a2}", rx273_cur
    length rx273_eos, rx273_tgt
    eq $I19, 1, rx273_restart789
    gt rx273_pos, rx273_eos, rx273_fail790
    repr_get_attr_int $I11, self, rx273_curclass, "$!from"
    ne $I11, -1, rxscan274_done796
    goto rxscan274_scan795
  rxscan274_loop794:
    inc rx273_pos
    gt rx273_pos, rx273_eos, rx273_fail790
    repr_bind_attr_int rx273_cur, rx273_curclass, "$!from", rx273_pos
  rxscan274_scan795:
    nqp_rxmark rx273_bstack, rxscan274_loop794, rx273_pos, 0
  rxscan274_done796:
    nqp_rxmark rx273_bstack, rxcap275_fail798, rx273_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt276_0800
    nqp_push_label $P11, alt276_1801
    nqp_rxmark rx273_bstack, alt276_end799, -1, 0
    rx273_cur."!alt"(rx273_pos, "alt_nfa__11_1360623853.02", $P11)
    goto rx273_fail790
  alt276_0800:
    add $I11, rx273_pos, 2
    gt $I11, rx273_eos, rx273_fail790
    substr $S10, rx273_tgt, rx273_pos, 2
    ne $S10, ucs4:">>", rx273_fail790
    add rx273_pos, 2
    goto alt276_end799
  alt276_1801:
    add $I11, rx273_pos, 1
    gt $I11, rx273_eos, rx273_fail790
    substr $S10, rx273_tgt, rx273_pos, 1
    ne $S10, ucs4:"\x{bb}", rx273_fail790
    add rx273_pos, 1
    goto alt276_end799
  alt276_end799:
    nqp_rxcommit rx273_bstack, alt276_end799
    nqp_rxpeek $I19, rx273_bstack, rxcap275_fail798
    inc $I19
    set $I11, rx273_bstack[$I19]
    repr_bind_attr_int rx273_cur, rx273_curclass, "$!pos", rx273_pos
    $P11 = rx273_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx273_pos)
    rx273_cstack = rx273_cur."!cursor_capture"($P11, "sym")
    goto rxcap275_done797
  rxcap275_fail798:
    goto rx273_fail790
  rxcap275_done797:
    rx273_cur."!cursor_pass"(rx273_pos, "metachar:sym<rwb>", 'backtrack'=>1)
    .return (rx273_cur)
  rx273_restart789:
    repr_get_attr_obj rx273_cstack, rx273_cur, rx273_curclass, "$!cstack"
  rx273_fail790:
    unless rx273_bstack, rx273_done788
    pop $I19, rx273_bstack
    if_null rx273_cstack, rx273_cstack_done793
    unless rx273_cstack, rx273_cstack_done793
    dec $I19
    set $P11, rx273_cstack[$I19]
  rx273_cstack_done793:
    pop rx273_rep, rx273_bstack
    pop rx273_pos, rx273_bstack
    pop $I19, rx273_bstack
    lt rx273_pos, -1, rx273_done788
    lt rx273_pos, 0, rx273_fail790
    eq $I19, 0, rx273_fail790
    nqp_islist $I20, rx273_cstack
    unless $I20, rx273_jump791
    elements $I18, rx273_bstack
    le $I18, 0, rx273_cut792
    dec $I18
    set $I18, rx273_bstack[$I18]
  rx273_cut792:
    assign rx273_cstack, $I18
  rx273_jump791:
    jump $I19
  rx273_done788:
    rx273_cur."!cursor_fail"()
    .return (rx273_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<from>" :subid("cuid_57_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 196
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx277_start
    .local string rx277_tgt
    .local int rx277_pos
    .local int rx277_off
    .local int rx277_eos
    .local int rx277_rep
    .local pmc rx277_cur
    .local pmc rx277_curclass
    .local pmc rx277_bstack
    .local pmc rx277_cstack
    rx277_start = self."!cursor_start_all"()
    set rx277_cur, rx277_start[0]
    set rx277_tgt, rx277_start[1]
    set rx277_pos, rx277_start[2]
    set rx277_curclass, rx277_start[3]
    set rx277_bstack, rx277_start[4]
    set $I19, rx277_start[5]
    store_lex unicode:"$\x{a2}", rx277_cur
    length rx277_eos, rx277_tgt
    eq $I19, 1, rx277_restart804
    gt rx277_pos, rx277_eos, rx277_fail805
    repr_get_attr_int $I11, self, rx277_curclass, "$!from"
    ne $I11, -1, rxscan278_done811
    goto rxscan278_scan810
  rxscan278_loop809:
    inc rx277_pos
    gt rx277_pos, rx277_eos, rx277_fail805
    repr_bind_attr_int rx277_cur, rx277_curclass, "$!from", rx277_pos
  rxscan278_scan810:
    nqp_rxmark rx277_bstack, rxscan278_loop809, rx277_pos, 0
  rxscan278_done811:
    add $I11, rx277_pos, 2
    gt $I11, rx277_eos, rx277_fail805
    substr $S10, rx277_tgt, rx277_pos, 2
    ne $S10, ucs4:"<(", rx277_fail805
    add rx277_pos, 2
    rx277_cur."!cursor_pass"(rx277_pos, "metachar:sym<from>", 'backtrack'=>1)
    .return (rx277_cur)
  rx277_restart804:
    repr_get_attr_obj rx277_cstack, rx277_cur, rx277_curclass, "$!cstack"
  rx277_fail805:
    unless rx277_bstack, rx277_done803
    pop $I19, rx277_bstack
    if_null rx277_cstack, rx277_cstack_done808
    unless rx277_cstack, rx277_cstack_done808
    dec $I19
    set $P11, rx277_cstack[$I19]
  rx277_cstack_done808:
    pop rx277_rep, rx277_bstack
    pop rx277_pos, rx277_bstack
    pop $I19, rx277_bstack
    lt rx277_pos, -1, rx277_done803
    lt rx277_pos, 0, rx277_fail805
    eq $I19, 0, rx277_fail805
    nqp_islist $I20, rx277_cstack
    unless $I20, rx277_jump806
    elements $I18, rx277_bstack
    le $I18, 0, rx277_cut807
    dec $I18
    set $I18, rx277_bstack[$I18]
  rx277_cut807:
    assign rx277_cstack, $I18
  rx277_jump806:
    jump $I19
  rx277_done803:
    rx277_cur."!cursor_fail"()
    .return (rx277_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<to>" :subid("cuid_58_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 197
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx279_start
    .local string rx279_tgt
    .local int rx279_pos
    .local int rx279_off
    .local int rx279_eos
    .local int rx279_rep
    .local pmc rx279_cur
    .local pmc rx279_curclass
    .local pmc rx279_bstack
    .local pmc rx279_cstack
    rx279_start = self."!cursor_start_all"()
    set rx279_cur, rx279_start[0]
    set rx279_tgt, rx279_start[1]
    set rx279_pos, rx279_start[2]
    set rx279_curclass, rx279_start[3]
    set rx279_bstack, rx279_start[4]
    set $I19, rx279_start[5]
    store_lex unicode:"$\x{a2}", rx279_cur
    length rx279_eos, rx279_tgt
    eq $I19, 1, rx279_restart814
    gt rx279_pos, rx279_eos, rx279_fail815
    repr_get_attr_int $I11, self, rx279_curclass, "$!from"
    ne $I11, -1, rxscan280_done821
    goto rxscan280_scan820
  rxscan280_loop819:
    inc rx279_pos
    gt rx279_pos, rx279_eos, rx279_fail815
    repr_bind_attr_int rx279_cur, rx279_curclass, "$!from", rx279_pos
  rxscan280_scan820:
    nqp_rxmark rx279_bstack, rxscan280_loop819, rx279_pos, 0
  rxscan280_done821:
    add $I11, rx279_pos, 2
    gt $I11, rx279_eos, rx279_fail815
    substr $S10, rx279_tgt, rx279_pos, 2
    ne $S10, ucs4:")>", rx279_fail815
    add rx279_pos, 2
    rx279_cur."!cursor_pass"(rx279_pos, "metachar:sym<to>", 'backtrack'=>1)
    .return (rx279_cur)
  rx279_restart814:
    repr_get_attr_obj rx279_cstack, rx279_cur, rx279_curclass, "$!cstack"
  rx279_fail815:
    unless rx279_bstack, rx279_done813
    pop $I19, rx279_bstack
    if_null rx279_cstack, rx279_cstack_done818
    unless rx279_cstack, rx279_cstack_done818
    dec $I19
    set $P11, rx279_cstack[$I19]
  rx279_cstack_done818:
    pop rx279_rep, rx279_bstack
    pop rx279_pos, rx279_bstack
    pop $I19, rx279_bstack
    lt rx279_pos, -1, rx279_done813
    lt rx279_pos, 0, rx279_fail815
    eq $I19, 0, rx279_fail815
    nqp_islist $I20, rx279_cstack
    unless $I20, rx279_jump816
    elements $I18, rx279_bstack
    le $I18, 0, rx279_cut817
    dec $I18
    set $I18, rx279_bstack[$I18]
  rx279_cut817:
    assign rx279_cstack, $I18
  rx279_jump816:
    jump $I19
  rx279_done813:
    rx279_cur."!cursor_fail"()
    .return (rx279_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<bs>" :subid("cuid_59_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 198
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx281_start
    .local string rx281_tgt
    .local int rx281_pos
    .local int rx281_off
    .local int rx281_eos
    .local int rx281_rep
    .local pmc rx281_cur
    .local pmc rx281_curclass
    .local pmc rx281_bstack
    .local pmc rx281_cstack
    rx281_start = self."!cursor_start_all"()
    set rx281_cur, rx281_start[0]
    set rx281_tgt, rx281_start[1]
    set rx281_pos, rx281_start[2]
    set rx281_curclass, rx281_start[3]
    set rx281_bstack, rx281_start[4]
    set $I19, rx281_start[5]
    store_lex unicode:"$\x{a2}", rx281_cur
    length rx281_eos, rx281_tgt
    eq $I19, 1, rx281_restart824
    gt rx281_pos, rx281_eos, rx281_fail825
    repr_get_attr_int $I11, self, rx281_curclass, "$!from"
    ne $I11, -1, rxscan282_done831
    goto rxscan282_scan830
  rxscan282_loop829:
    inc rx281_pos
    gt rx281_pos, rx281_eos, rx281_fail825
    repr_bind_attr_int rx281_cur, rx281_curclass, "$!from", rx281_pos
  rxscan282_scan830:
    nqp_rxmark rx281_bstack, rxscan282_loop829, rx281_pos, 0
  rxscan282_done831:
    add $I11, rx281_pos, 1
    gt $I11, rx281_eos, rx281_fail825
    substr $S10, rx281_tgt, rx281_pos, 1
    ne $S10, ucs4:"\\", rx281_fail825
    add rx281_pos, 1
    repr_bind_attr_int rx281_cur, rx281_curclass, "$!pos", rx281_pos
    $P11 = rx281_cur."backslash"()
    repr_get_attr_int $I11, $P11, rx281_curclass, "$!pos"
    lt $I11, 0, rx281_fail825
    nqp_rxmark rx281_bstack, rxsubrule283_pass832, -1, 0
  rxsubrule283_pass832:
    rx281_cstack = rx281_cur."!cursor_capture"($P11, "backslash")
    repr_get_attr_int rx281_pos, $P11, rx281_curclass, "$!pos"
    rx281_cur."!cursor_pass"(rx281_pos, "metachar:sym<bs>", 'backtrack'=>1)
    .return (rx281_cur)
  rx281_restart824:
    repr_get_attr_obj rx281_cstack, rx281_cur, rx281_curclass, "$!cstack"
  rx281_fail825:
    unless rx281_bstack, rx281_done823
    pop $I19, rx281_bstack
    if_null rx281_cstack, rx281_cstack_done828
    unless rx281_cstack, rx281_cstack_done828
    dec $I19
    set $P11, rx281_cstack[$I19]
  rx281_cstack_done828:
    pop rx281_rep, rx281_bstack
    pop rx281_pos, rx281_bstack
    pop $I19, rx281_bstack
    lt rx281_pos, -1, rx281_done823
    lt rx281_pos, 0, rx281_fail825
    eq $I19, 0, rx281_fail825
    nqp_islist $I20, rx281_cstack
    unless $I20, rx281_jump826
    elements $I18, rx281_bstack
    le $I18, 0, rx281_cut827
    dec $I18
    set $I18, rx281_bstack[$I18]
  rx281_cut827:
    assign rx281_cstack, $I18
  rx281_jump826:
    jump $I19
  rx281_done823:
    rx281_cur."!cursor_fail"()
    .return (rx281_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<mod>" :subid("cuid_60_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 199
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx284_start
    .local string rx284_tgt
    .local int rx284_pos
    .local int rx284_off
    .local int rx284_eos
    .local int rx284_rep
    .local pmc rx284_cur
    .local pmc rx284_curclass
    .local pmc rx284_bstack
    .local pmc rx284_cstack
    rx284_start = self."!cursor_start_all"()
    set rx284_cur, rx284_start[0]
    set rx284_tgt, rx284_start[1]
    set rx284_pos, rx284_start[2]
    set rx284_curclass, rx284_start[3]
    set rx284_bstack, rx284_start[4]
    set $I19, rx284_start[5]
    store_lex unicode:"$\x{a2}", rx284_cur
    length rx284_eos, rx284_tgt
    eq $I19, 1, rx284_restart835
    gt rx284_pos, rx284_eos, rx284_fail836
    repr_get_attr_int $I11, self, rx284_curclass, "$!from"
    ne $I11, -1, rxscan285_done842
    goto rxscan285_scan841
  rxscan285_loop840:
    inc rx284_pos
    gt rx284_pos, rx284_eos, rx284_fail836
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!from", rx284_pos
  rxscan285_scan841:
    nqp_rxmark rx284_bstack, rxscan285_loop840, rx284_pos, 0
  rxscan285_done842:
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!pos", rx284_pos
    $P11 = rx284_cur."mod_internal"()
    repr_get_attr_int $I11, $P11, rx284_curclass, "$!pos"
    lt $I11, 0, rx284_fail836
    nqp_rxmark rx284_bstack, rxsubrule286_pass843, -1, 0
  rxsubrule286_pass843:
    rx284_cstack = rx284_cur."!cursor_capture"($P11, "mod_internal")
    repr_get_attr_int rx284_pos, $P11, rx284_curclass, "$!pos"
    rx284_cur."!cursor_pass"(rx284_pos, "metachar:sym<mod>", 'backtrack'=>1)
    .return (rx284_cur)
  rx284_restart835:
    repr_get_attr_obj rx284_cstack, rx284_cur, rx284_curclass, "$!cstack"
  rx284_fail836:
    unless rx284_bstack, rx284_done834
    pop $I19, rx284_bstack
    if_null rx284_cstack, rx284_cstack_done839
    unless rx284_cstack, rx284_cstack_done839
    dec $I19
    set $P11, rx284_cstack[$I19]
  rx284_cstack_done839:
    pop rx284_rep, rx284_bstack
    pop rx284_pos, rx284_bstack
    pop $I19, rx284_bstack
    lt rx284_pos, -1, rx284_done834
    lt rx284_pos, 0, rx284_fail836
    eq $I19, 0, rx284_fail836
    nqp_islist $I20, rx284_cstack
    unless $I20, rx284_jump837
    elements $I18, rx284_bstack
    le $I18, 0, rx284_cut838
    dec $I18
    set $I18, rx284_bstack[$I18]
  rx284_cut838:
    assign rx284_cstack, $I18
  rx284_jump837:
    jump $I19
  rx284_done834:
    rx284_cur."!cursor_fail"()
    .return (rx284_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<quantifier>" :subid("cuid_61_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 200
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx287_start
    .local string rx287_tgt
    .local int rx287_pos
    .local int rx287_off
    .local int rx287_eos
    .local int rx287_rep
    .local pmc rx287_cur
    .local pmc rx287_curclass
    .local pmc rx287_bstack
    .local pmc rx287_cstack
    rx287_start = self."!cursor_start_all"()
    set rx287_cur, rx287_start[0]
    set rx287_tgt, rx287_start[1]
    set rx287_pos, rx287_start[2]
    set rx287_curclass, rx287_start[3]
    set rx287_bstack, rx287_start[4]
    set $I19, rx287_start[5]
    store_lex unicode:"$\x{a2}", rx287_cur
    length rx287_eos, rx287_tgt
    eq $I19, 1, rx287_restart846
    gt rx287_pos, rx287_eos, rx287_fail847
    repr_get_attr_int $I11, self, rx287_curclass, "$!from"
    ne $I11, -1, rxscan288_done853
    goto rxscan288_scan852
  rxscan288_loop851:
    inc rx287_pos
    gt rx287_pos, rx287_eos, rx287_fail847
    repr_bind_attr_int rx287_cur, rx287_curclass, "$!from", rx287_pos
  rxscan288_scan852:
    nqp_rxmark rx287_bstack, rxscan288_loop851, rx287_pos, 0
  rxscan288_done853:
    repr_bind_attr_int rx287_cur, rx287_curclass, "$!pos", rx287_pos
    $P11 = rx287_cur."quantifier"()
    repr_get_attr_int $I11, $P11, rx287_curclass, "$!pos"
    lt $I11, 0, rx287_fail847
    nqp_rxmark rx287_bstack, rxsubrule289_pass854, -1, 0
  rxsubrule289_pass854:
    rx287_cstack = rx287_cur."!cursor_capture"($P11, "quantifier")
    repr_get_attr_int rx287_pos, $P11, rx287_curclass, "$!pos"
    repr_bind_attr_int rx287_cur, rx287_curclass, "$!pos", rx287_pos
    $P11 = rx287_cur."panic"("Quantifier quantifies nothing")
    repr_get_attr_int $I11, $P11, rx287_curclass, "$!pos"
    lt $I11, 0, rx287_fail847
    repr_get_attr_int rx287_pos, $P11, rx287_curclass, "$!pos"
    rx287_cur."!cursor_pass"(rx287_pos, "metachar:sym<quantifier>", 'backtrack'=>1)
    .return (rx287_cur)
  rx287_restart846:
    repr_get_attr_obj rx287_cstack, rx287_cur, rx287_curclass, "$!cstack"
  rx287_fail847:
    unless rx287_bstack, rx287_done845
    pop $I19, rx287_bstack
    if_null rx287_cstack, rx287_cstack_done850
    unless rx287_cstack, rx287_cstack_done850
    dec $I19
    set $P11, rx287_cstack[$I19]
  rx287_cstack_done850:
    pop rx287_rep, rx287_bstack
    pop rx287_pos, rx287_bstack
    pop $I19, rx287_bstack
    lt rx287_pos, -1, rx287_done845
    lt rx287_pos, 0, rx287_fail847
    eq $I19, 0, rx287_fail847
    nqp_islist $I20, rx287_cstack
    unless $I20, rx287_jump848
    elements $I18, rx287_bstack
    le $I18, 0, rx287_cut849
    dec $I18
    set $I18, rx287_bstack[$I18]
  rx287_cut849:
    assign rx287_cstack, $I18
  rx287_jump848:
    jump $I19
  rx287_done845:
    rx287_cur."!cursor_fail"()
    .return (rx287_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<~>" :subid("cuid_62_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 205
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx291_start
    .local string rx291_tgt
    .local int rx291_pos
    .local int rx291_off
    .local int rx291_eos
    .local int rx291_rep
    .local pmc rx291_cur
    .local pmc rx291_curclass
    .local pmc rx291_bstack
    .local pmc rx291_cstack
    rx291_start = self."!cursor_start_all"()
    set rx291_cur, rx291_start[0]
    set rx291_tgt, rx291_start[1]
    set rx291_pos, rx291_start[2]
    set rx291_curclass, rx291_start[3]
    set rx291_bstack, rx291_start[4]
    set $I19, rx291_start[5]
    store_lex unicode:"$\x{a2}", rx291_cur
    length rx291_eos, rx291_tgt
    eq $I19, 1, rx291_restart858
    gt rx291_pos, rx291_eos, rx291_fail859
    repr_get_attr_int $I11, self, rx291_curclass, "$!from"
    ne $I11, -1, rxscan292_done865
    goto rxscan292_scan864
  rxscan292_loop863:
    inc rx291_pos
    gt rx291_pos, rx291_eos, rx291_fail859
    repr_bind_attr_int rx291_cur, rx291_curclass, "$!from", rx291_pos
  rxscan292_scan864:
    nqp_rxmark rx291_bstack, rxscan292_loop863, rx291_pos, 0
  rxscan292_done865:
    nqp_rxmark rx291_bstack, rxcap293_fail867, rx291_pos, 0
    add $I11, rx291_pos, 1
    gt $I11, rx291_eos, rx291_fail859
    substr $S10, rx291_tgt, rx291_pos, 1
    ne $S10, ucs4:"~", rx291_fail859
    add rx291_pos, 1
    nqp_rxpeek $I19, rx291_bstack, rxcap293_fail867
    inc $I19
    set $I11, rx291_bstack[$I19]
    repr_bind_attr_int rx291_cur, rx291_curclass, "$!pos", rx291_pos
    $P11 = rx291_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx291_pos)
    rx291_cstack = rx291_cur."!cursor_capture"($P11, "sym")
    goto rxcap293_done866
  rxcap293_fail867:
    goto rx291_fail859
  rxcap293_done866:
    repr_bind_attr_int rx291_cur, rx291_curclass, "$!pos", rx291_pos
    $P11 = rx291_cur."ws"()
    repr_get_attr_int $I11, $P11, rx291_curclass, "$!pos"
    lt $I11, 0, rx291_fail859
    repr_get_attr_int rx291_pos, $P11, rx291_curclass, "$!pos"
    repr_bind_attr_int rx291_cur, rx291_curclass, "$!pos", rx291_pos
    $P11 = rx291_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx291_curclass, "$!pos"
    lt $I11, 0, rx291_fail859
    nqp_rxmark rx291_bstack, rxsubrule295_pass869, -1, 0
  rxsubrule295_pass869:
    rx291_cstack = rx291_cur."!cursor_capture"($P11, "GOAL")
    repr_get_attr_int rx291_pos, $P11, rx291_curclass, "$!pos"
    repr_bind_attr_int rx291_cur, rx291_curclass, "$!pos", rx291_pos
    $P11 = rx291_cur."ws"()
    repr_get_attr_int $I11, $P11, rx291_curclass, "$!pos"
    lt $I11, 0, rx291_fail859
    repr_get_attr_int rx291_pos, $P11, rx291_curclass, "$!pos"
    repr_bind_attr_int rx291_cur, rx291_curclass, "$!pos", rx291_pos
    $P11 = rx291_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx291_curclass, "$!pos"
    lt $I11, 0, rx291_fail859
    nqp_rxmark rx291_bstack, rxsubrule297_pass871, -1, 0
  rxsubrule297_pass871:
    rx291_cstack = rx291_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx291_pos, $P11, rx291_curclass, "$!pos"
    rx291_cur."!cursor_pass"(rx291_pos, "metachar:sym<~>", 'backtrack'=>1)
    .return (rx291_cur)
  rx291_restart858:
    repr_get_attr_obj rx291_cstack, rx291_cur, rx291_curclass, "$!cstack"
  rx291_fail859:
    unless rx291_bstack, rx291_done857
    pop $I19, rx291_bstack
    if_null rx291_cstack, rx291_cstack_done862
    unless rx291_cstack, rx291_cstack_done862
    dec $I19
    set $P11, rx291_cstack[$I19]
  rx291_cstack_done862:
    pop rx291_rep, rx291_bstack
    pop rx291_pos, rx291_bstack
    pop $I19, rx291_bstack
    lt rx291_pos, -1, rx291_done857
    lt rx291_pos, 0, rx291_fail859
    eq $I19, 0, rx291_fail859
    nqp_islist $I20, rx291_cstack
    unless $I20, rx291_jump860
    elements $I18, rx291_bstack
    le $I18, 0, rx291_cut861
    dec $I18
    set $I18, rx291_bstack[$I18]
  rx291_cut861:
    assign rx291_cstack, $I18
  rx291_jump860:
    jump $I19
  rx291_done857:
    rx291_cur."!cursor_fail"()
    .return (rx291_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{*}>" :subid("cuid_63_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 211
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx298_start
    .local string rx298_tgt
    .local int rx298_pos
    .local int rx298_off
    .local int rx298_eos
    .local int rx298_rep
    .local pmc rx298_cur
    .local pmc rx298_curclass
    .local pmc rx298_bstack
    .local pmc rx298_cstack
    rx298_start = self."!cursor_start_all"()
    set rx298_cur, rx298_start[0]
    set rx298_tgt, rx298_start[1]
    set rx298_pos, rx298_start[2]
    set rx298_curclass, rx298_start[3]
    set rx298_bstack, rx298_start[4]
    set $I19, rx298_start[5]
    store_lex unicode:"$\x{a2}", rx298_cur
    length rx298_eos, rx298_tgt
    eq $I19, 1, rx298_restart874
    gt rx298_pos, rx298_eos, rx298_fail875
    repr_get_attr_int $I11, self, rx298_curclass, "$!from"
    ne $I11, -1, rxscan299_done881
    goto rxscan299_scan880
  rxscan299_loop879:
    inc rx298_pos
    gt rx298_pos, rx298_eos, rx298_fail875
    repr_bind_attr_int rx298_cur, rx298_curclass, "$!from", rx298_pos
  rxscan299_scan880:
    nqp_rxmark rx298_bstack, rxscan299_loop879, rx298_pos, 0
  rxscan299_done881:
    nqp_rxmark rx298_bstack, rxcap300_fail883, rx298_pos, 0
    add $I11, rx298_pos, 3
    gt $I11, rx298_eos, rx298_fail875
    substr $S10, rx298_tgt, rx298_pos, 3
    ne $S10, ucs4:"{*}", rx298_fail875
    add rx298_pos, 3
    nqp_rxpeek $I19, rx298_bstack, rxcap300_fail883
    inc $I19
    set $I11, rx298_bstack[$I19]
    repr_bind_attr_int rx298_cur, rx298_curclass, "$!pos", rx298_pos
    $P11 = rx298_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx298_pos)
    rx298_cstack = rx298_cur."!cursor_capture"($P11, "sym")
    goto rxcap300_done882
  rxcap300_fail883:
    goto rx298_fail875
  rxcap300_done882:
    nqp_rxmark rx298_bstack, rxquantr301_done885, rx298_pos, 0
  rxquantr301_loop884:
    nqp_rxmark rx298_bstack, rxquantr302_done887, rx298_pos, 0
  rxquantr302_loop886:
    ge rx298_pos, rx298_eos, rx298_fail875
    substr $S11, rx298_tgt, rx298_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx298_fail875
    inc rx298_pos
    nqp_rxpeek $I19, rx298_bstack, rxquantr302_done887
    inc $I19
    inc $I19
    set rx298_rep, rx298_bstack[$I19]
    nqp_rxcommit rx298_bstack, rxquantr302_done887
    inc rx298_rep
    nqp_rxmark rx298_bstack, rxquantr302_done887, rx298_pos, rx298_rep
    goto rxquantr302_loop886
  rxquantr302_done887:
    add $I11, rx298_pos, 3
    gt $I11, rx298_eos, rx298_fail875
    substr $S10, rx298_tgt, rx298_pos, 3
    ne $S10, ucs4:"#= ", rx298_fail875
    add rx298_pos, 3
    nqp_rxmark rx298_bstack, rxquantr303_done889, rx298_pos, 0
  rxquantr303_loop888:
    ge rx298_pos, rx298_eos, rx298_fail875
    substr $S11, rx298_tgt, rx298_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx298_fail875
    inc rx298_pos
    nqp_rxpeek $I19, rx298_bstack, rxquantr303_done889
    inc $I19
    inc $I19
    set rx298_rep, rx298_bstack[$I19]
    nqp_rxcommit rx298_bstack, rxquantr303_done889
    inc rx298_rep
    nqp_rxmark rx298_bstack, rxquantr303_done889, rx298_pos, rx298_rep
    goto rxquantr303_loop888
  rxquantr303_done889:
    nqp_rxmark rx298_bstack, rxcap304_fail891, rx298_pos, 0
    nqp_rxmark rx298_bstack, rxquantr305_done893, -1, 0
  rxquantr305_loop892:
    ge rx298_pos, rx298_eos, rx298_fail875
    is_cclass $I11, .CCLASS_WHITESPACE, rx298_tgt, rx298_pos
    if $I11, rx298_fail875
    add rx298_pos, 1
    nqp_rxpeek $I19, rx298_bstack, rxquantr305_done893
    inc $I19
    inc $I19
    set rx298_rep, rx298_bstack[$I19]
    nqp_rxcommit rx298_bstack, rxquantr305_done893
    inc rx298_rep
    nqp_rxmark rx298_bstack, rxquantr305_done893, rx298_pos, rx298_rep
    goto rxquantr305_loop892
  rxquantr305_done893:
    nqp_rxmark rx298_bstack, rxquantr306_done895, rx298_pos, 0
  rxquantr306_loop894:
    nqp_rxmark rx298_bstack, rxquantr307_done897, -1, 0
  rxquantr307_loop896:
    ge rx298_pos, rx298_eos, rx298_fail875
    substr $S11, rx298_tgt, rx298_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx298_fail875
    inc rx298_pos
    nqp_rxpeek $I19, rx298_bstack, rxquantr307_done897
    inc $I19
    inc $I19
    set rx298_rep, rx298_bstack[$I19]
    nqp_rxcommit rx298_bstack, rxquantr307_done897
    inc rx298_rep
    nqp_rxmark rx298_bstack, rxquantr307_done897, rx298_pos, rx298_rep
    goto rxquantr307_loop896
  rxquantr307_done897:
    nqp_rxmark rx298_bstack, rxquantr308_done899, -1, 0
  rxquantr308_loop898:
    ge rx298_pos, rx298_eos, rx298_fail875
    is_cclass $I11, .CCLASS_WHITESPACE, rx298_tgt, rx298_pos
    if $I11, rx298_fail875
    add rx298_pos, 1
    nqp_rxpeek $I19, rx298_bstack, rxquantr308_done899
    inc $I19
    inc $I19
    set rx298_rep, rx298_bstack[$I19]
    nqp_rxcommit rx298_bstack, rxquantr308_done899
    inc rx298_rep
    nqp_rxmark rx298_bstack, rxquantr308_done899, rx298_pos, rx298_rep
    goto rxquantr308_loop898
  rxquantr308_done899:
    nqp_rxpeek $I19, rx298_bstack, rxquantr306_done895
    inc $I19
    inc $I19
    set rx298_rep, rx298_bstack[$I19]
    nqp_rxcommit rx298_bstack, rxquantr306_done895
    inc rx298_rep
    nqp_rxmark rx298_bstack, rxquantr306_done895, rx298_pos, rx298_rep
    goto rxquantr306_loop894
  rxquantr306_done895:
    nqp_rxpeek $I19, rx298_bstack, rxcap304_fail891
    inc $I19
    set $I11, rx298_bstack[$I19]
    repr_bind_attr_int rx298_cur, rx298_curclass, "$!pos", rx298_pos
    $P11 = rx298_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx298_pos)
    rx298_cstack = rx298_cur."!cursor_capture"($P11, "key")
    goto rxcap304_done890
  rxcap304_fail891:
    goto rx298_fail875
  rxcap304_done890:
    nqp_rxpeek $I19, rx298_bstack, rxquantr301_done885
    inc $I19
    inc $I19
    set rx298_rep, rx298_bstack[$I19]
    nqp_rxcommit rx298_bstack, rxquantr301_done885
    inc rx298_rep
  rxquantr301_done885:
    rx298_cur."!cursor_pass"(rx298_pos, "metachar:sym<{*}>", 'backtrack'=>1)
    .return (rx298_cur)
  rx298_restart874:
    repr_get_attr_obj rx298_cstack, rx298_cur, rx298_curclass, "$!cstack"
  rx298_fail875:
    unless rx298_bstack, rx298_done873
    pop $I19, rx298_bstack
    if_null rx298_cstack, rx298_cstack_done878
    unless rx298_cstack, rx298_cstack_done878
    dec $I19
    set $P11, rx298_cstack[$I19]
  rx298_cstack_done878:
    pop rx298_rep, rx298_bstack
    pop rx298_pos, rx298_bstack
    pop $I19, rx298_bstack
    lt rx298_pos, -1, rx298_done873
    lt rx298_pos, 0, rx298_fail875
    eq $I19, 0, rx298_fail875
    nqp_islist $I20, rx298_cstack
    unless $I20, rx298_jump876
    elements $I18, rx298_bstack
    le $I18, 0, rx298_cut877
    dec $I18
    set $I18, rx298_bstack[$I18]
  rx298_cut877:
    assign rx298_cstack, $I18
  rx298_jump876:
    jump $I19
  rx298_done873:
    rx298_cur."!cursor_fail"()
    .return (rx298_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<assert>" :subid("cuid_64_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 215
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx309_start
    .local string rx309_tgt
    .local int rx309_pos
    .local int rx309_off
    .local int rx309_eos
    .local int rx309_rep
    .local pmc rx309_cur
    .local pmc rx309_curclass
    .local pmc rx309_bstack
    .local pmc rx309_cstack
    rx309_start = self."!cursor_start_all"()
    set rx309_cur, rx309_start[0]
    set rx309_tgt, rx309_start[1]
    set rx309_pos, rx309_start[2]
    set rx309_curclass, rx309_start[3]
    set rx309_bstack, rx309_start[4]
    set $I19, rx309_start[5]
    store_lex unicode:"$\x{a2}", rx309_cur
    length rx309_eos, rx309_tgt
    eq $I19, 1, rx309_restart902
    gt rx309_pos, rx309_eos, rx309_fail903
    repr_get_attr_int $I11, self, rx309_curclass, "$!from"
    ne $I11, -1, rxscan310_done909
    goto rxscan310_scan908
  rxscan310_loop907:
    inc rx309_pos
    gt rx309_pos, rx309_eos, rx309_fail903
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!from", rx309_pos
  rxscan310_scan908:
    nqp_rxmark rx309_bstack, rxscan310_loop907, rx309_pos, 0
  rxscan310_done909:
    add $I11, rx309_pos, 1
    gt $I11, rx309_eos, rx309_fail903
    substr $S10, rx309_tgt, rx309_pos, 1
    ne $S10, ucs4:"<", rx309_fail903
    add rx309_pos, 1
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!pos", rx309_pos
    $P11 = rx309_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx309_curclass, "$!pos"
    lt $I11, 0, rx309_fail903
    nqp_rxmark rx309_bstack, rxsubrule311_pass910, -1, 0
  rxsubrule311_pass910:
    rx309_cstack = rx309_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx309_pos, $P11, rx309_curclass, "$!pos"
  alt312_0912:
    nqp_rxmark rx309_bstack, alt312_1913, rx309_pos, 0
    add $I11, rx309_pos, 1
    gt $I11, rx309_eos, rx309_fail903
    substr $S10, rx309_tgt, rx309_pos, 1
    ne $S10, ucs4:">", rx309_fail903
    add rx309_pos, 1
    goto alt312_end911
  alt312_1913:
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!pos", rx309_pos
    $P11 = rx309_cur."panic"("regex assertion not terminated by angle bracket")
    repr_get_attr_int $I11, $P11, rx309_curclass, "$!pos"
    lt $I11, 0, rx309_fail903
    repr_get_attr_int rx309_pos, $P11, rx309_curclass, "$!pos"
  alt312_end911:
    rx309_cur."!cursor_pass"(rx309_pos, "metachar:sym<assert>", 'backtrack'=>1)
    .return (rx309_cur)
  rx309_restart902:
    repr_get_attr_obj rx309_cstack, rx309_cur, rx309_curclass, "$!cstack"
  rx309_fail903:
    unless rx309_bstack, rx309_done901
    pop $I19, rx309_bstack
    if_null rx309_cstack, rx309_cstack_done906
    unless rx309_cstack, rx309_cstack_done906
    dec $I19
    set $P11, rx309_cstack[$I19]
  rx309_cstack_done906:
    pop rx309_rep, rx309_bstack
    pop rx309_pos, rx309_bstack
    pop $I19, rx309_bstack
    lt rx309_pos, -1, rx309_done901
    lt rx309_pos, 0, rx309_fail903
    eq $I19, 0, rx309_fail903
    nqp_islist $I20, rx309_cstack
    unless $I20, rx309_jump904
    elements $I18, rx309_bstack
    le $I18, 0, rx309_cut905
    dec $I18
    set $I18, rx309_bstack[$I18]
  rx309_cut905:
    assign rx309_cstack, $I18
  rx309_jump904:
    jump $I19
  rx309_done901:
    rx309_cur."!cursor_fail"()
    .return (rx309_cur) 
.end
.HLL "nqp"
.namespace []
.sub "sigil" :subid("cuid_65_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 220
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx314_start
    .local string rx314_tgt
    .local int rx314_pos
    .local int rx314_off
    .local int rx314_eos
    .local int rx314_rep
    .local pmc rx314_cur
    .local pmc rx314_curclass
    .local pmc rx314_bstack
    .local pmc rx314_cstack
    rx314_start = self."!cursor_start_all"()
    set rx314_cur, rx314_start[0]
    set rx314_tgt, rx314_start[1]
    set rx314_pos, rx314_start[2]
    set rx314_curclass, rx314_start[3]
    set rx314_bstack, rx314_start[4]
    set $I19, rx314_start[5]
    store_lex unicode:"$\x{a2}", rx314_cur
    length rx314_eos, rx314_tgt
    eq $I19, 1, rx314_restart917
    gt rx314_pos, rx314_eos, rx314_fail918
    repr_get_attr_int $I11, self, rx314_curclass, "$!from"
    ne $I11, -1, rxscan315_done924
    goto rxscan315_scan923
  rxscan315_loop922:
    inc rx314_pos
    gt rx314_pos, rx314_eos, rx314_fail918
    repr_bind_attr_int rx314_cur, rx314_curclass, "$!from", rx314_pos
  rxscan315_scan923:
    nqp_rxmark rx314_bstack, rxscan315_loop922, rx314_pos, 0
  rxscan315_done924:
    ge rx314_pos, rx314_eos, rx314_fail918
    substr $S11, rx314_tgt, rx314_pos, 1
    index $I11, ucs4:"$@%&", $S11
    lt $I11, 0, rx314_fail918
    inc rx314_pos
    rx314_cur."!cursor_pass"(rx314_pos, "sigil", 'backtrack'=>1)
    .return (rx314_cur)
  rx314_restart917:
    repr_get_attr_obj rx314_cstack, rx314_cur, rx314_curclass, "$!cstack"
  rx314_fail918:
    unless rx314_bstack, rx314_done916
    pop $I19, rx314_bstack
    if_null rx314_cstack, rx314_cstack_done921
    unless rx314_cstack, rx314_cstack_done921
    dec $I19
    set $P11, rx314_cstack[$I19]
  rx314_cstack_done921:
    pop rx314_rep, rx314_bstack
    pop rx314_pos, rx314_bstack
    pop $I19, rx314_bstack
    lt rx314_pos, -1, rx314_done916
    lt rx314_pos, 0, rx314_fail918
    eq $I19, 0, rx314_fail918
    nqp_islist $I20, rx314_cstack
    unless $I20, rx314_jump919
    elements $I18, rx314_bstack
    le $I18, 0, rx314_cut920
    dec $I18
    set $I18, rx314_bstack[$I18]
  rx314_cut920:
    assign rx314_cstack, $I18
  rx314_jump919:
    jump $I19
  rx314_done916:
    rx314_cur."!cursor_fail"()
    .return (rx314_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<var>" :subid("cuid_66_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 222
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx316_start
    .local string rx316_tgt
    .local int rx316_pos
    .local int rx316_off
    .local int rx316_eos
    .local int rx316_rep
    .local pmc rx316_cur
    .local pmc rx316_curclass
    .local pmc rx316_bstack
    .local pmc rx316_cstack
    rx316_start = self."!cursor_start_all"()
    set rx316_cur, rx316_start[0]
    set rx316_tgt, rx316_start[1]
    set rx316_pos, rx316_start[2]
    set rx316_curclass, rx316_start[3]
    set rx316_bstack, rx316_start[4]
    set $I19, rx316_start[5]
    store_lex unicode:"$\x{a2}", rx316_cur
    length rx316_eos, rx316_tgt
    eq $I19, 1, rx316_restart927
    gt rx316_pos, rx316_eos, rx316_fail928
    repr_get_attr_int $I11, self, rx316_curclass, "$!from"
    ne $I11, -1, rxscan317_done934
    goto rxscan317_scan933
  rxscan317_loop932:
    inc rx316_pos
    gt rx316_pos, rx316_eos, rx316_fail928
    repr_bind_attr_int rx316_cur, rx316_curclass, "$!from", rx316_pos
  rxscan317_scan933:
    nqp_rxmark rx316_bstack, rxscan317_loop932, rx316_pos, 0
  rxscan317_done934:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt318_0936
    nqp_push_label $P11, alt318_1941
    nqp_rxmark rx316_bstack, alt318_end935, -1, 0
    rx316_cur."!alt"(rx316_pos, "alt_nfa__12_1360623853.1", $P11)
    goto rx316_fail928
  alt318_0936:
    add $I11, rx316_pos, 2
    gt $I11, rx316_eos, rx316_fail928
    substr $S10, rx316_tgt, rx316_pos, 2
    ne $S10, ucs4:"$<", rx316_fail928
    add rx316_pos, 2
    nqp_rxmark rx316_bstack, rxcap319_fail938, rx316_pos, 0
    nqp_rxmark rx316_bstack, rxquantr320_done940, -1, 0
  rxquantr320_loop939:
    ge rx316_pos, rx316_eos, rx316_fail928
    substr $S11, rx316_tgt, rx316_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx316_fail928
    inc rx316_pos
    nqp_rxpeek $I19, rx316_bstack, rxquantr320_done940
    inc $I19
    inc $I19
    set rx316_rep, rx316_bstack[$I19]
    nqp_rxcommit rx316_bstack, rxquantr320_done940
    inc rx316_rep
    nqp_rxmark rx316_bstack, rxquantr320_done940, rx316_pos, rx316_rep
    goto rxquantr320_loop939
  rxquantr320_done940:
    nqp_rxpeek $I19, rx316_bstack, rxcap319_fail938
    inc $I19
    set $I11, rx316_bstack[$I19]
    repr_bind_attr_int rx316_cur, rx316_curclass, "$!pos", rx316_pos
    $P11 = rx316_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx316_pos)
    rx316_cstack = rx316_cur."!cursor_capture"($P11, "name")
    goto rxcap319_done937
  rxcap319_fail938:
    goto rx316_fail928
  rxcap319_done937:
    add $I11, rx316_pos, 1
    gt $I11, rx316_eos, rx316_fail928
    substr $S10, rx316_tgt, rx316_pos, 1
    ne $S10, ucs4:">", rx316_fail928
    add rx316_pos, 1
    goto alt318_end935
  alt318_1941:
    add $I11, rx316_pos, 1
    gt $I11, rx316_eos, rx316_fail928
    substr $S10, rx316_tgt, rx316_pos, 1
    ne $S10, ucs4:"$", rx316_fail928
    add rx316_pos, 1
    nqp_rxmark rx316_bstack, rxcap321_fail943, rx316_pos, 0
    nqp_rxmark rx316_bstack, rxquantr322_done945, -1, 0
  rxquantr322_loop944:
    ge rx316_pos, rx316_eos, rx316_fail928
    is_cclass $I11, .CCLASS_NUMERIC, rx316_tgt, rx316_pos
    unless $I11, rx316_fail928
    add rx316_pos, 1
    nqp_rxpeek $I19, rx316_bstack, rxquantr322_done945
    inc $I19
    inc $I19
    set rx316_rep, rx316_bstack[$I19]
    nqp_rxcommit rx316_bstack, rxquantr322_done945
    inc rx316_rep
    nqp_rxmark rx316_bstack, rxquantr322_done945, rx316_pos, rx316_rep
    goto rxquantr322_loop944
  rxquantr322_done945:
    nqp_rxpeek $I19, rx316_bstack, rxcap321_fail943
    inc $I19
    set $I11, rx316_bstack[$I19]
    repr_bind_attr_int rx316_cur, rx316_curclass, "$!pos", rx316_pos
    $P11 = rx316_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx316_pos)
    rx316_cstack = rx316_cur."!cursor_capture"($P11, "pos")
    goto rxcap321_done942
  rxcap321_fail943:
    goto rx316_fail928
  rxcap321_done942:
    goto alt318_end935
  alt318_end935:
    nqp_rxcommit rx316_bstack, alt318_end935
    nqp_rxmark rx316_bstack, rxquantr323_done947, rx316_pos, 0
  rxquantr323_loop946:
    repr_bind_attr_int rx316_cur, rx316_curclass, "$!pos", rx316_pos
    $P11 = rx316_cur."ws"()
    repr_get_attr_int $I11, $P11, rx316_curclass, "$!pos"
    lt $I11, 0, rx316_fail928
    repr_get_attr_int rx316_pos, $P11, rx316_curclass, "$!pos"
    add $I11, rx316_pos, 1
    gt $I11, rx316_eos, rx316_fail928
    substr $S10, rx316_tgt, rx316_pos, 1
    ne $S10, ucs4:"=", rx316_fail928
    add rx316_pos, 1
    repr_bind_attr_int rx316_cur, rx316_curclass, "$!pos", rx316_pos
    $P11 = rx316_cur."ws"()
    repr_get_attr_int $I11, $P11, rx316_curclass, "$!pos"
    lt $I11, 0, rx316_fail928
    repr_get_attr_int rx316_pos, $P11, rx316_curclass, "$!pos"
    repr_bind_attr_int rx316_cur, rx316_curclass, "$!pos", rx316_pos
    $P11 = rx316_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx316_curclass, "$!pos"
    lt $I11, 0, rx316_fail928
    nqp_rxmark rx316_bstack, rxsubrule326_pass950, -1, 0
  rxsubrule326_pass950:
    rx316_cstack = rx316_cur."!cursor_capture"($P11, "quantified_atom")
    repr_get_attr_int rx316_pos, $P11, rx316_curclass, "$!pos"
    nqp_rxpeek $I19, rx316_bstack, rxquantr323_done947
    inc $I19
    inc $I19
    set rx316_rep, rx316_bstack[$I19]
    nqp_rxcommit rx316_bstack, rxquantr323_done947
    inc rx316_rep
  rxquantr323_done947:
    rx316_cur."!cursor_pass"(rx316_pos, "metachar:sym<var>", 'backtrack'=>1)
    .return (rx316_cur)
  rx316_restart927:
    repr_get_attr_obj rx316_cstack, rx316_cur, rx316_curclass, "$!cstack"
  rx316_fail928:
    unless rx316_bstack, rx316_done926
    pop $I19, rx316_bstack
    if_null rx316_cstack, rx316_cstack_done931
    unless rx316_cstack, rx316_cstack_done931
    dec $I19
    set $P11, rx316_cstack[$I19]
  rx316_cstack_done931:
    pop rx316_rep, rx316_bstack
    pop rx316_pos, rx316_bstack
    pop $I19, rx316_bstack
    lt rx316_pos, -1, rx316_done926
    lt rx316_pos, 0, rx316_fail928
    eq $I19, 0, rx316_fail928
    nqp_islist $I20, rx316_cstack
    unless $I20, rx316_jump929
    elements $I18, rx316_bstack
    le $I18, 0, rx316_cut930
    dec $I18
    set $I18, rx316_bstack[$I18]
  rx316_cut930:
    assign rx316_cstack, $I18
  rx316_jump929:
    jump $I19
  rx316_done926:
    rx316_cur."!cursor_fail"()
    .return (rx316_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash" :subid("cuid_67_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 231
    .param pmc self 
    $P5001 = self."!protoregex"("backslash")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<s>" :subid("cuid_68_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 232
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx327_start
    .local string rx327_tgt
    .local int rx327_pos
    .local int rx327_off
    .local int rx327_eos
    .local int rx327_rep
    .local pmc rx327_cur
    .local pmc rx327_curclass
    .local pmc rx327_bstack
    .local pmc rx327_cstack
    rx327_start = self."!cursor_start_all"()
    set rx327_cur, rx327_start[0]
    set rx327_tgt, rx327_start[1]
    set rx327_pos, rx327_start[2]
    set rx327_curclass, rx327_start[3]
    set rx327_bstack, rx327_start[4]
    set $I19, rx327_start[5]
    store_lex unicode:"$\x{a2}", rx327_cur
    length rx327_eos, rx327_tgt
    eq $I19, 1, rx327_restart953
    gt rx327_pos, rx327_eos, rx327_fail954
    repr_get_attr_int $I11, self, rx327_curclass, "$!from"
    ne $I11, -1, rxscan328_done960
    goto rxscan328_scan959
  rxscan328_loop958:
    inc rx327_pos
    gt rx327_pos, rx327_eos, rx327_fail954
    repr_bind_attr_int rx327_cur, rx327_curclass, "$!from", rx327_pos
  rxscan328_scan959:
    nqp_rxmark rx327_bstack, rxscan328_loop958, rx327_pos, 0
  rxscan328_done960:
    nqp_rxmark rx327_bstack, rxcap329_fail962, rx327_pos, 0
    ge rx327_pos, rx327_eos, rx327_fail954
    substr $S11, rx327_tgt, rx327_pos, 1
    index $I11, ucs4:"dDnNsSwW", $S11
    lt $I11, 0, rx327_fail954
    inc rx327_pos
    nqp_rxpeek $I19, rx327_bstack, rxcap329_fail962
    inc $I19
    set $I11, rx327_bstack[$I19]
    repr_bind_attr_int rx327_cur, rx327_curclass, "$!pos", rx327_pos
    $P11 = rx327_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx327_pos)
    rx327_cstack = rx327_cur."!cursor_capture"($P11, "sym")
    goto rxcap329_done961
  rxcap329_fail962:
    goto rx327_fail954
  rxcap329_done961:
    rx327_cur."!cursor_pass"(rx327_pos, "backslash:sym<s>", 'backtrack'=>1)
    .return (rx327_cur)
  rx327_restart953:
    repr_get_attr_obj rx327_cstack, rx327_cur, rx327_curclass, "$!cstack"
  rx327_fail954:
    unless rx327_bstack, rx327_done952
    pop $I19, rx327_bstack
    if_null rx327_cstack, rx327_cstack_done957
    unless rx327_cstack, rx327_cstack_done957
    dec $I19
    set $P11, rx327_cstack[$I19]
  rx327_cstack_done957:
    pop rx327_rep, rx327_bstack
    pop rx327_pos, rx327_bstack
    pop $I19, rx327_bstack
    lt rx327_pos, -1, rx327_done952
    lt rx327_pos, 0, rx327_fail954
    eq $I19, 0, rx327_fail954
    nqp_islist $I20, rx327_cstack
    unless $I20, rx327_jump955
    elements $I18, rx327_bstack
    le $I18, 0, rx327_cut956
    dec $I18
    set $I18, rx327_bstack[$I18]
  rx327_cut956:
    assign rx327_cstack, $I18
  rx327_jump955:
    jump $I19
  rx327_done952:
    rx327_cur."!cursor_fail"()
    .return (rx327_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<b>" :subid("cuid_69_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 233
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx330_start
    .local string rx330_tgt
    .local int rx330_pos
    .local int rx330_off
    .local int rx330_eos
    .local int rx330_rep
    .local pmc rx330_cur
    .local pmc rx330_curclass
    .local pmc rx330_bstack
    .local pmc rx330_cstack
    rx330_start = self."!cursor_start_all"()
    set rx330_cur, rx330_start[0]
    set rx330_tgt, rx330_start[1]
    set rx330_pos, rx330_start[2]
    set rx330_curclass, rx330_start[3]
    set rx330_bstack, rx330_start[4]
    set $I19, rx330_start[5]
    store_lex unicode:"$\x{a2}", rx330_cur
    length rx330_eos, rx330_tgt
    eq $I19, 1, rx330_restart965
    gt rx330_pos, rx330_eos, rx330_fail966
    repr_get_attr_int $I11, self, rx330_curclass, "$!from"
    ne $I11, -1, rxscan331_done972
    goto rxscan331_scan971
  rxscan331_loop970:
    inc rx330_pos
    gt rx330_pos, rx330_eos, rx330_fail966
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!from", rx330_pos
  rxscan331_scan971:
    nqp_rxmark rx330_bstack, rxscan331_loop970, rx330_pos, 0
  rxscan331_done972:
    nqp_rxmark rx330_bstack, rxcap332_fail974, rx330_pos, 0
    ge rx330_pos, rx330_eos, rx330_fail966
    substr $S11, rx330_tgt, rx330_pos, 1
    index $I11, ucs4:"bB", $S11
    lt $I11, 0, rx330_fail966
    inc rx330_pos
    nqp_rxpeek $I19, rx330_bstack, rxcap332_fail974
    inc $I19
    set $I11, rx330_bstack[$I19]
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx330_pos)
    rx330_cstack = rx330_cur."!cursor_capture"($P11, "sym")
    goto rxcap332_done973
  rxcap332_fail974:
    goto rx330_fail966
  rxcap332_done973:
    rx330_cur."!cursor_pass"(rx330_pos, "backslash:sym<b>", 'backtrack'=>1)
    .return (rx330_cur)
  rx330_restart965:
    repr_get_attr_obj rx330_cstack, rx330_cur, rx330_curclass, "$!cstack"
  rx330_fail966:
    unless rx330_bstack, rx330_done964
    pop $I19, rx330_bstack
    if_null rx330_cstack, rx330_cstack_done969
    unless rx330_cstack, rx330_cstack_done969
    dec $I19
    set $P11, rx330_cstack[$I19]
  rx330_cstack_done969:
    pop rx330_rep, rx330_bstack
    pop rx330_pos, rx330_bstack
    pop $I19, rx330_bstack
    lt rx330_pos, -1, rx330_done964
    lt rx330_pos, 0, rx330_fail966
    eq $I19, 0, rx330_fail966
    nqp_islist $I20, rx330_cstack
    unless $I20, rx330_jump967
    elements $I18, rx330_bstack
    le $I18, 0, rx330_cut968
    dec $I18
    set $I18, rx330_bstack[$I18]
  rx330_cut968:
    assign rx330_cstack, $I18
  rx330_jump967:
    jump $I19
  rx330_done964:
    rx330_cur."!cursor_fail"()
    .return (rx330_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<e>" :subid("cuid_70_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 234
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx333_start
    .local string rx333_tgt
    .local int rx333_pos
    .local int rx333_off
    .local int rx333_eos
    .local int rx333_rep
    .local pmc rx333_cur
    .local pmc rx333_curclass
    .local pmc rx333_bstack
    .local pmc rx333_cstack
    rx333_start = self."!cursor_start_all"()
    set rx333_cur, rx333_start[0]
    set rx333_tgt, rx333_start[1]
    set rx333_pos, rx333_start[2]
    set rx333_curclass, rx333_start[3]
    set rx333_bstack, rx333_start[4]
    set $I19, rx333_start[5]
    store_lex unicode:"$\x{a2}", rx333_cur
    length rx333_eos, rx333_tgt
    eq $I19, 1, rx333_restart977
    gt rx333_pos, rx333_eos, rx333_fail978
    repr_get_attr_int $I11, self, rx333_curclass, "$!from"
    ne $I11, -1, rxscan334_done984
    goto rxscan334_scan983
  rxscan334_loop982:
    inc rx333_pos
    gt rx333_pos, rx333_eos, rx333_fail978
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!from", rx333_pos
  rxscan334_scan983:
    nqp_rxmark rx333_bstack, rxscan334_loop982, rx333_pos, 0
  rxscan334_done984:
    nqp_rxmark rx333_bstack, rxcap335_fail986, rx333_pos, 0
    ge rx333_pos, rx333_eos, rx333_fail978
    substr $S11, rx333_tgt, rx333_pos, 1
    index $I11, ucs4:"eE", $S11
    lt $I11, 0, rx333_fail978
    inc rx333_pos
    nqp_rxpeek $I19, rx333_bstack, rxcap335_fail986
    inc $I19
    set $I11, rx333_bstack[$I19]
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!pos", rx333_pos
    $P11 = rx333_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx333_pos)
    rx333_cstack = rx333_cur."!cursor_capture"($P11, "sym")
    goto rxcap335_done985
  rxcap335_fail986:
    goto rx333_fail978
  rxcap335_done985:
    rx333_cur."!cursor_pass"(rx333_pos, "backslash:sym<e>", 'backtrack'=>1)
    .return (rx333_cur)
  rx333_restart977:
    repr_get_attr_obj rx333_cstack, rx333_cur, rx333_curclass, "$!cstack"
  rx333_fail978:
    unless rx333_bstack, rx333_done976
    pop $I19, rx333_bstack
    if_null rx333_cstack, rx333_cstack_done981
    unless rx333_cstack, rx333_cstack_done981
    dec $I19
    set $P11, rx333_cstack[$I19]
  rx333_cstack_done981:
    pop rx333_rep, rx333_bstack
    pop rx333_pos, rx333_bstack
    pop $I19, rx333_bstack
    lt rx333_pos, -1, rx333_done976
    lt rx333_pos, 0, rx333_fail978
    eq $I19, 0, rx333_fail978
    nqp_islist $I20, rx333_cstack
    unless $I20, rx333_jump979
    elements $I18, rx333_bstack
    le $I18, 0, rx333_cut980
    dec $I18
    set $I18, rx333_bstack[$I18]
  rx333_cut980:
    assign rx333_cstack, $I18
  rx333_jump979:
    jump $I19
  rx333_done976:
    rx333_cur."!cursor_fail"()
    .return (rx333_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<f>" :subid("cuid_71_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 235
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx336_start
    .local string rx336_tgt
    .local int rx336_pos
    .local int rx336_off
    .local int rx336_eos
    .local int rx336_rep
    .local pmc rx336_cur
    .local pmc rx336_curclass
    .local pmc rx336_bstack
    .local pmc rx336_cstack
    rx336_start = self."!cursor_start_all"()
    set rx336_cur, rx336_start[0]
    set rx336_tgt, rx336_start[1]
    set rx336_pos, rx336_start[2]
    set rx336_curclass, rx336_start[3]
    set rx336_bstack, rx336_start[4]
    set $I19, rx336_start[5]
    store_lex unicode:"$\x{a2}", rx336_cur
    length rx336_eos, rx336_tgt
    eq $I19, 1, rx336_restart989
    gt rx336_pos, rx336_eos, rx336_fail990
    repr_get_attr_int $I11, self, rx336_curclass, "$!from"
    ne $I11, -1, rxscan337_done996
    goto rxscan337_scan995
  rxscan337_loop994:
    inc rx336_pos
    gt rx336_pos, rx336_eos, rx336_fail990
    repr_bind_attr_int rx336_cur, rx336_curclass, "$!from", rx336_pos
  rxscan337_scan995:
    nqp_rxmark rx336_bstack, rxscan337_loop994, rx336_pos, 0
  rxscan337_done996:
    nqp_rxmark rx336_bstack, rxcap338_fail998, rx336_pos, 0
    ge rx336_pos, rx336_eos, rx336_fail990
    substr $S11, rx336_tgt, rx336_pos, 1
    index $I11, ucs4:"fF", $S11
    lt $I11, 0, rx336_fail990
    inc rx336_pos
    nqp_rxpeek $I19, rx336_bstack, rxcap338_fail998
    inc $I19
    set $I11, rx336_bstack[$I19]
    repr_bind_attr_int rx336_cur, rx336_curclass, "$!pos", rx336_pos
    $P11 = rx336_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx336_pos)
    rx336_cstack = rx336_cur."!cursor_capture"($P11, "sym")
    goto rxcap338_done997
  rxcap338_fail998:
    goto rx336_fail990
  rxcap338_done997:
    rx336_cur."!cursor_pass"(rx336_pos, "backslash:sym<f>", 'backtrack'=>1)
    .return (rx336_cur)
  rx336_restart989:
    repr_get_attr_obj rx336_cstack, rx336_cur, rx336_curclass, "$!cstack"
  rx336_fail990:
    unless rx336_bstack, rx336_done988
    pop $I19, rx336_bstack
    if_null rx336_cstack, rx336_cstack_done993
    unless rx336_cstack, rx336_cstack_done993
    dec $I19
    set $P11, rx336_cstack[$I19]
  rx336_cstack_done993:
    pop rx336_rep, rx336_bstack
    pop rx336_pos, rx336_bstack
    pop $I19, rx336_bstack
    lt rx336_pos, -1, rx336_done988
    lt rx336_pos, 0, rx336_fail990
    eq $I19, 0, rx336_fail990
    nqp_islist $I20, rx336_cstack
    unless $I20, rx336_jump991
    elements $I18, rx336_bstack
    le $I18, 0, rx336_cut992
    dec $I18
    set $I18, rx336_bstack[$I18]
  rx336_cut992:
    assign rx336_cstack, $I18
  rx336_jump991:
    jump $I19
  rx336_done988:
    rx336_cur."!cursor_fail"()
    .return (rx336_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<h>" :subid("cuid_72_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 236
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx339_start
    .local string rx339_tgt
    .local int rx339_pos
    .local int rx339_off
    .local int rx339_eos
    .local int rx339_rep
    .local pmc rx339_cur
    .local pmc rx339_curclass
    .local pmc rx339_bstack
    .local pmc rx339_cstack
    rx339_start = self."!cursor_start_all"()
    set rx339_cur, rx339_start[0]
    set rx339_tgt, rx339_start[1]
    set rx339_pos, rx339_start[2]
    set rx339_curclass, rx339_start[3]
    set rx339_bstack, rx339_start[4]
    set $I19, rx339_start[5]
    store_lex unicode:"$\x{a2}", rx339_cur
    length rx339_eos, rx339_tgt
    eq $I19, 1, rx339_restart1001
    gt rx339_pos, rx339_eos, rx339_fail1002
    repr_get_attr_int $I11, self, rx339_curclass, "$!from"
    ne $I11, -1, rxscan340_done1008
    goto rxscan340_scan1007
  rxscan340_loop1006:
    inc rx339_pos
    gt rx339_pos, rx339_eos, rx339_fail1002
    repr_bind_attr_int rx339_cur, rx339_curclass, "$!from", rx339_pos
  rxscan340_scan1007:
    nqp_rxmark rx339_bstack, rxscan340_loop1006, rx339_pos, 0
  rxscan340_done1008:
    nqp_rxmark rx339_bstack, rxcap341_fail1010, rx339_pos, 0
    ge rx339_pos, rx339_eos, rx339_fail1002
    substr $S11, rx339_tgt, rx339_pos, 1
    index $I11, ucs4:"hH", $S11
    lt $I11, 0, rx339_fail1002
    inc rx339_pos
    nqp_rxpeek $I19, rx339_bstack, rxcap341_fail1010
    inc $I19
    set $I11, rx339_bstack[$I19]
    repr_bind_attr_int rx339_cur, rx339_curclass, "$!pos", rx339_pos
    $P11 = rx339_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx339_pos)
    rx339_cstack = rx339_cur."!cursor_capture"($P11, "sym")
    goto rxcap341_done1009
  rxcap341_fail1010:
    goto rx339_fail1002
  rxcap341_done1009:
    rx339_cur."!cursor_pass"(rx339_pos, "backslash:sym<h>", 'backtrack'=>1)
    .return (rx339_cur)
  rx339_restart1001:
    repr_get_attr_obj rx339_cstack, rx339_cur, rx339_curclass, "$!cstack"
  rx339_fail1002:
    unless rx339_bstack, rx339_done1000
    pop $I19, rx339_bstack
    if_null rx339_cstack, rx339_cstack_done1005
    unless rx339_cstack, rx339_cstack_done1005
    dec $I19
    set $P11, rx339_cstack[$I19]
  rx339_cstack_done1005:
    pop rx339_rep, rx339_bstack
    pop rx339_pos, rx339_bstack
    pop $I19, rx339_bstack
    lt rx339_pos, -1, rx339_done1000
    lt rx339_pos, 0, rx339_fail1002
    eq $I19, 0, rx339_fail1002
    nqp_islist $I20, rx339_cstack
    unless $I20, rx339_jump1003
    elements $I18, rx339_bstack
    le $I18, 0, rx339_cut1004
    dec $I18
    set $I18, rx339_bstack[$I18]
  rx339_cut1004:
    assign rx339_cstack, $I18
  rx339_jump1003:
    jump $I19
  rx339_done1000:
    rx339_cur."!cursor_fail"()
    .return (rx339_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<r>" :subid("cuid_73_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 237
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx342_start
    .local string rx342_tgt
    .local int rx342_pos
    .local int rx342_off
    .local int rx342_eos
    .local int rx342_rep
    .local pmc rx342_cur
    .local pmc rx342_curclass
    .local pmc rx342_bstack
    .local pmc rx342_cstack
    rx342_start = self."!cursor_start_all"()
    set rx342_cur, rx342_start[0]
    set rx342_tgt, rx342_start[1]
    set rx342_pos, rx342_start[2]
    set rx342_curclass, rx342_start[3]
    set rx342_bstack, rx342_start[4]
    set $I19, rx342_start[5]
    store_lex unicode:"$\x{a2}", rx342_cur
    length rx342_eos, rx342_tgt
    eq $I19, 1, rx342_restart1013
    gt rx342_pos, rx342_eos, rx342_fail1014
    repr_get_attr_int $I11, self, rx342_curclass, "$!from"
    ne $I11, -1, rxscan343_done1020
    goto rxscan343_scan1019
  rxscan343_loop1018:
    inc rx342_pos
    gt rx342_pos, rx342_eos, rx342_fail1014
    repr_bind_attr_int rx342_cur, rx342_curclass, "$!from", rx342_pos
  rxscan343_scan1019:
    nqp_rxmark rx342_bstack, rxscan343_loop1018, rx342_pos, 0
  rxscan343_done1020:
    nqp_rxmark rx342_bstack, rxcap344_fail1022, rx342_pos, 0
    ge rx342_pos, rx342_eos, rx342_fail1014
    substr $S11, rx342_tgt, rx342_pos, 1
    index $I11, ucs4:"rR", $S11
    lt $I11, 0, rx342_fail1014
    inc rx342_pos
    nqp_rxpeek $I19, rx342_bstack, rxcap344_fail1022
    inc $I19
    set $I11, rx342_bstack[$I19]
    repr_bind_attr_int rx342_cur, rx342_curclass, "$!pos", rx342_pos
    $P11 = rx342_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx342_pos)
    rx342_cstack = rx342_cur."!cursor_capture"($P11, "sym")
    goto rxcap344_done1021
  rxcap344_fail1022:
    goto rx342_fail1014
  rxcap344_done1021:
    rx342_cur."!cursor_pass"(rx342_pos, "backslash:sym<r>", 'backtrack'=>1)
    .return (rx342_cur)
  rx342_restart1013:
    repr_get_attr_obj rx342_cstack, rx342_cur, rx342_curclass, "$!cstack"
  rx342_fail1014:
    unless rx342_bstack, rx342_done1012
    pop $I19, rx342_bstack
    if_null rx342_cstack, rx342_cstack_done1017
    unless rx342_cstack, rx342_cstack_done1017
    dec $I19
    set $P11, rx342_cstack[$I19]
  rx342_cstack_done1017:
    pop rx342_rep, rx342_bstack
    pop rx342_pos, rx342_bstack
    pop $I19, rx342_bstack
    lt rx342_pos, -1, rx342_done1012
    lt rx342_pos, 0, rx342_fail1014
    eq $I19, 0, rx342_fail1014
    nqp_islist $I20, rx342_cstack
    unless $I20, rx342_jump1015
    elements $I18, rx342_bstack
    le $I18, 0, rx342_cut1016
    dec $I18
    set $I18, rx342_bstack[$I18]
  rx342_cut1016:
    assign rx342_cstack, $I18
  rx342_jump1015:
    jump $I19
  rx342_done1012:
    rx342_cur."!cursor_fail"()
    .return (rx342_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<t>" :subid("cuid_74_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 238
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx345_start
    .local string rx345_tgt
    .local int rx345_pos
    .local int rx345_off
    .local int rx345_eos
    .local int rx345_rep
    .local pmc rx345_cur
    .local pmc rx345_curclass
    .local pmc rx345_bstack
    .local pmc rx345_cstack
    rx345_start = self."!cursor_start_all"()
    set rx345_cur, rx345_start[0]
    set rx345_tgt, rx345_start[1]
    set rx345_pos, rx345_start[2]
    set rx345_curclass, rx345_start[3]
    set rx345_bstack, rx345_start[4]
    set $I19, rx345_start[5]
    store_lex unicode:"$\x{a2}", rx345_cur
    length rx345_eos, rx345_tgt
    eq $I19, 1, rx345_restart1025
    gt rx345_pos, rx345_eos, rx345_fail1026
    repr_get_attr_int $I11, self, rx345_curclass, "$!from"
    ne $I11, -1, rxscan346_done1032
    goto rxscan346_scan1031
  rxscan346_loop1030:
    inc rx345_pos
    gt rx345_pos, rx345_eos, rx345_fail1026
    repr_bind_attr_int rx345_cur, rx345_curclass, "$!from", rx345_pos
  rxscan346_scan1031:
    nqp_rxmark rx345_bstack, rxscan346_loop1030, rx345_pos, 0
  rxscan346_done1032:
    nqp_rxmark rx345_bstack, rxcap347_fail1034, rx345_pos, 0
    ge rx345_pos, rx345_eos, rx345_fail1026
    substr $S11, rx345_tgt, rx345_pos, 1
    index $I11, ucs4:"tT", $S11
    lt $I11, 0, rx345_fail1026
    inc rx345_pos
    nqp_rxpeek $I19, rx345_bstack, rxcap347_fail1034
    inc $I19
    set $I11, rx345_bstack[$I19]
    repr_bind_attr_int rx345_cur, rx345_curclass, "$!pos", rx345_pos
    $P11 = rx345_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx345_pos)
    rx345_cstack = rx345_cur."!cursor_capture"($P11, "sym")
    goto rxcap347_done1033
  rxcap347_fail1034:
    goto rx345_fail1026
  rxcap347_done1033:
    rx345_cur."!cursor_pass"(rx345_pos, "backslash:sym<t>", 'backtrack'=>1)
    .return (rx345_cur)
  rx345_restart1025:
    repr_get_attr_obj rx345_cstack, rx345_cur, rx345_curclass, "$!cstack"
  rx345_fail1026:
    unless rx345_bstack, rx345_done1024
    pop $I19, rx345_bstack
    if_null rx345_cstack, rx345_cstack_done1029
    unless rx345_cstack, rx345_cstack_done1029
    dec $I19
    set $P11, rx345_cstack[$I19]
  rx345_cstack_done1029:
    pop rx345_rep, rx345_bstack
    pop rx345_pos, rx345_bstack
    pop $I19, rx345_bstack
    lt rx345_pos, -1, rx345_done1024
    lt rx345_pos, 0, rx345_fail1026
    eq $I19, 0, rx345_fail1026
    nqp_islist $I20, rx345_cstack
    unless $I20, rx345_jump1027
    elements $I18, rx345_bstack
    le $I18, 0, rx345_cut1028
    dec $I18
    set $I18, rx345_bstack[$I18]
  rx345_cut1028:
    assign rx345_cstack, $I18
  rx345_jump1027:
    jump $I19
  rx345_done1024:
    rx345_cur."!cursor_fail"()
    .return (rx345_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<v>" :subid("cuid_75_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 239
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx348_start
    .local string rx348_tgt
    .local int rx348_pos
    .local int rx348_off
    .local int rx348_eos
    .local int rx348_rep
    .local pmc rx348_cur
    .local pmc rx348_curclass
    .local pmc rx348_bstack
    .local pmc rx348_cstack
    rx348_start = self."!cursor_start_all"()
    set rx348_cur, rx348_start[0]
    set rx348_tgt, rx348_start[1]
    set rx348_pos, rx348_start[2]
    set rx348_curclass, rx348_start[3]
    set rx348_bstack, rx348_start[4]
    set $I19, rx348_start[5]
    store_lex unicode:"$\x{a2}", rx348_cur
    length rx348_eos, rx348_tgt
    eq $I19, 1, rx348_restart1037
    gt rx348_pos, rx348_eos, rx348_fail1038
    repr_get_attr_int $I11, self, rx348_curclass, "$!from"
    ne $I11, -1, rxscan349_done1044
    goto rxscan349_scan1043
  rxscan349_loop1042:
    inc rx348_pos
    gt rx348_pos, rx348_eos, rx348_fail1038
    repr_bind_attr_int rx348_cur, rx348_curclass, "$!from", rx348_pos
  rxscan349_scan1043:
    nqp_rxmark rx348_bstack, rxscan349_loop1042, rx348_pos, 0
  rxscan349_done1044:
    nqp_rxmark rx348_bstack, rxcap350_fail1046, rx348_pos, 0
    ge rx348_pos, rx348_eos, rx348_fail1038
    substr $S11, rx348_tgt, rx348_pos, 1
    index $I11, ucs4:"vV", $S11
    lt $I11, 0, rx348_fail1038
    inc rx348_pos
    nqp_rxpeek $I19, rx348_bstack, rxcap350_fail1046
    inc $I19
    set $I11, rx348_bstack[$I19]
    repr_bind_attr_int rx348_cur, rx348_curclass, "$!pos", rx348_pos
    $P11 = rx348_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx348_pos)
    rx348_cstack = rx348_cur."!cursor_capture"($P11, "sym")
    goto rxcap350_done1045
  rxcap350_fail1046:
    goto rx348_fail1038
  rxcap350_done1045:
    rx348_cur."!cursor_pass"(rx348_pos, "backslash:sym<v>", 'backtrack'=>1)
    .return (rx348_cur)
  rx348_restart1037:
    repr_get_attr_obj rx348_cstack, rx348_cur, rx348_curclass, "$!cstack"
  rx348_fail1038:
    unless rx348_bstack, rx348_done1036
    pop $I19, rx348_bstack
    if_null rx348_cstack, rx348_cstack_done1041
    unless rx348_cstack, rx348_cstack_done1041
    dec $I19
    set $P11, rx348_cstack[$I19]
  rx348_cstack_done1041:
    pop rx348_rep, rx348_bstack
    pop rx348_pos, rx348_bstack
    pop $I19, rx348_bstack
    lt rx348_pos, -1, rx348_done1036
    lt rx348_pos, 0, rx348_fail1038
    eq $I19, 0, rx348_fail1038
    nqp_islist $I20, rx348_cstack
    unless $I20, rx348_jump1039
    elements $I18, rx348_bstack
    le $I18, 0, rx348_cut1040
    dec $I18
    set $I18, rx348_bstack[$I18]
  rx348_cut1040:
    assign rx348_cstack, $I18
  rx348_jump1039:
    jump $I19
  rx348_done1036:
    rx348_cur."!cursor_fail"()
    .return (rx348_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<o>" :subid("cuid_76_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 240
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx351_start
    .local string rx351_tgt
    .local int rx351_pos
    .local int rx351_off
    .local int rx351_eos
    .local int rx351_rep
    .local pmc rx351_cur
    .local pmc rx351_curclass
    .local pmc rx351_bstack
    .local pmc rx351_cstack
    rx351_start = self."!cursor_start_all"()
    set rx351_cur, rx351_start[0]
    set rx351_tgt, rx351_start[1]
    set rx351_pos, rx351_start[2]
    set rx351_curclass, rx351_start[3]
    set rx351_bstack, rx351_start[4]
    set $I19, rx351_start[5]
    store_lex unicode:"$\x{a2}", rx351_cur
    length rx351_eos, rx351_tgt
    eq $I19, 1, rx351_restart1049
    gt rx351_pos, rx351_eos, rx351_fail1050
    repr_get_attr_int $I11, self, rx351_curclass, "$!from"
    ne $I11, -1, rxscan352_done1056
    goto rxscan352_scan1055
  rxscan352_loop1054:
    inc rx351_pos
    gt rx351_pos, rx351_eos, rx351_fail1050
    repr_bind_attr_int rx351_cur, rx351_curclass, "$!from", rx351_pos
  rxscan352_scan1055:
    nqp_rxmark rx351_bstack, rxscan352_loop1054, rx351_pos, 0
  rxscan352_done1056:
    nqp_rxmark rx351_bstack, rxcap353_fail1058, rx351_pos, 0
    ge rx351_pos, rx351_eos, rx351_fail1050
    substr $S11, rx351_tgt, rx351_pos, 1
    index $I11, ucs4:"oO", $S11
    lt $I11, 0, rx351_fail1050
    inc rx351_pos
    nqp_rxpeek $I19, rx351_bstack, rxcap353_fail1058
    inc $I19
    set $I11, rx351_bstack[$I19]
    repr_bind_attr_int rx351_cur, rx351_curclass, "$!pos", rx351_pos
    $P11 = rx351_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx351_pos)
    rx351_cstack = rx351_cur."!cursor_capture"($P11, "sym")
    goto rxcap353_done1057
  rxcap353_fail1058:
    goto rx351_fail1050
  rxcap353_done1057:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt354_01060
    nqp_push_label $P11, alt354_11062
    nqp_rxmark rx351_bstack, alt354_end1059, -1, 0
    rx351_cur."!alt"(rx351_pos, "alt_nfa__13_1360623853.156", $P11)
    goto rx351_fail1050
  alt354_01060:
    repr_bind_attr_int rx351_cur, rx351_curclass, "$!pos", rx351_pos
    $P11 = rx351_cur."octint"()
    repr_get_attr_int $I11, $P11, rx351_curclass, "$!pos"
    lt $I11, 0, rx351_fail1050
    nqp_rxmark rx351_bstack, rxsubrule355_pass1061, -1, 0
  rxsubrule355_pass1061:
    rx351_cstack = rx351_cur."!cursor_capture"($P11, "octint")
    repr_get_attr_int rx351_pos, $P11, rx351_curclass, "$!pos"
    goto alt354_end1059
  alt354_11062:
    add $I11, rx351_pos, 1
    gt $I11, rx351_eos, rx351_fail1050
    substr $S10, rx351_tgt, rx351_pos, 1
    ne $S10, ucs4:"[", rx351_fail1050
    add rx351_pos, 1
    repr_bind_attr_int rx351_cur, rx351_curclass, "$!pos", rx351_pos
    $P11 = rx351_cur."octints"()
    repr_get_attr_int $I11, $P11, rx351_curclass, "$!pos"
    lt $I11, 0, rx351_fail1050
    nqp_rxmark rx351_bstack, rxsubrule356_pass1063, -1, 0
  rxsubrule356_pass1063:
    rx351_cstack = rx351_cur."!cursor_capture"($P11, "octints")
    repr_get_attr_int rx351_pos, $P11, rx351_curclass, "$!pos"
    add $I11, rx351_pos, 1
    gt $I11, rx351_eos, rx351_fail1050
    substr $S10, rx351_tgt, rx351_pos, 1
    ne $S10, ucs4:"]", rx351_fail1050
    add rx351_pos, 1
    goto alt354_end1059
  alt354_end1059:
    nqp_rxcommit rx351_bstack, alt354_end1059
    rx351_cur."!cursor_pass"(rx351_pos, "backslash:sym<o>", 'backtrack'=>1)
    .return (rx351_cur)
  rx351_restart1049:
    repr_get_attr_obj rx351_cstack, rx351_cur, rx351_curclass, "$!cstack"
  rx351_fail1050:
    unless rx351_bstack, rx351_done1048
    pop $I19, rx351_bstack
    if_null rx351_cstack, rx351_cstack_done1053
    unless rx351_cstack, rx351_cstack_done1053
    dec $I19
    set $P11, rx351_cstack[$I19]
  rx351_cstack_done1053:
    pop rx351_rep, rx351_bstack
    pop rx351_pos, rx351_bstack
    pop $I19, rx351_bstack
    lt rx351_pos, -1, rx351_done1048
    lt rx351_pos, 0, rx351_fail1050
    eq $I19, 0, rx351_fail1050
    nqp_islist $I20, rx351_cstack
    unless $I20, rx351_jump1051
    elements $I18, rx351_bstack
    le $I18, 0, rx351_cut1052
    dec $I18
    set $I18, rx351_bstack[$I18]
  rx351_cut1052:
    assign rx351_cstack, $I18
  rx351_jump1051:
    jump $I19
  rx351_done1048:
    rx351_cur."!cursor_fail"()
    .return (rx351_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<x>" :subid("cuid_77_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 241
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx357_start
    .local string rx357_tgt
    .local int rx357_pos
    .local int rx357_off
    .local int rx357_eos
    .local int rx357_rep
    .local pmc rx357_cur
    .local pmc rx357_curclass
    .local pmc rx357_bstack
    .local pmc rx357_cstack
    rx357_start = self."!cursor_start_all"()
    set rx357_cur, rx357_start[0]
    set rx357_tgt, rx357_start[1]
    set rx357_pos, rx357_start[2]
    set rx357_curclass, rx357_start[3]
    set rx357_bstack, rx357_start[4]
    set $I19, rx357_start[5]
    store_lex unicode:"$\x{a2}", rx357_cur
    length rx357_eos, rx357_tgt
    eq $I19, 1, rx357_restart1066
    gt rx357_pos, rx357_eos, rx357_fail1067
    repr_get_attr_int $I11, self, rx357_curclass, "$!from"
    ne $I11, -1, rxscan358_done1073
    goto rxscan358_scan1072
  rxscan358_loop1071:
    inc rx357_pos
    gt rx357_pos, rx357_eos, rx357_fail1067
    repr_bind_attr_int rx357_cur, rx357_curclass, "$!from", rx357_pos
  rxscan358_scan1072:
    nqp_rxmark rx357_bstack, rxscan358_loop1071, rx357_pos, 0
  rxscan358_done1073:
    nqp_rxmark rx357_bstack, rxcap359_fail1075, rx357_pos, 0
    ge rx357_pos, rx357_eos, rx357_fail1067
    substr $S11, rx357_tgt, rx357_pos, 1
    index $I11, ucs4:"xX", $S11
    lt $I11, 0, rx357_fail1067
    inc rx357_pos
    nqp_rxpeek $I19, rx357_bstack, rxcap359_fail1075
    inc $I19
    set $I11, rx357_bstack[$I19]
    repr_bind_attr_int rx357_cur, rx357_curclass, "$!pos", rx357_pos
    $P11 = rx357_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx357_pos)
    rx357_cstack = rx357_cur."!cursor_capture"($P11, "sym")
    goto rxcap359_done1074
  rxcap359_fail1075:
    goto rx357_fail1067
  rxcap359_done1074:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt360_01077
    nqp_push_label $P11, alt360_11079
    nqp_rxmark rx357_bstack, alt360_end1076, -1, 0
    rx357_cur."!alt"(rx357_pos, "alt_nfa__14_1360623853.167", $P11)
    goto rx357_fail1067
  alt360_01077:
    repr_bind_attr_int rx357_cur, rx357_curclass, "$!pos", rx357_pos
    $P11 = rx357_cur."hexint"()
    repr_get_attr_int $I11, $P11, rx357_curclass, "$!pos"
    lt $I11, 0, rx357_fail1067
    nqp_rxmark rx357_bstack, rxsubrule361_pass1078, -1, 0
  rxsubrule361_pass1078:
    rx357_cstack = rx357_cur."!cursor_capture"($P11, "hexint")
    repr_get_attr_int rx357_pos, $P11, rx357_curclass, "$!pos"
    goto alt360_end1076
  alt360_11079:
    add $I11, rx357_pos, 1
    gt $I11, rx357_eos, rx357_fail1067
    substr $S10, rx357_tgt, rx357_pos, 1
    ne $S10, ucs4:"[", rx357_fail1067
    add rx357_pos, 1
    repr_bind_attr_int rx357_cur, rx357_curclass, "$!pos", rx357_pos
    $P11 = rx357_cur."hexints"()
    repr_get_attr_int $I11, $P11, rx357_curclass, "$!pos"
    lt $I11, 0, rx357_fail1067
    nqp_rxmark rx357_bstack, rxsubrule362_pass1080, -1, 0
  rxsubrule362_pass1080:
    rx357_cstack = rx357_cur."!cursor_capture"($P11, "hexints")
    repr_get_attr_int rx357_pos, $P11, rx357_curclass, "$!pos"
    add $I11, rx357_pos, 1
    gt $I11, rx357_eos, rx357_fail1067
    substr $S10, rx357_tgt, rx357_pos, 1
    ne $S10, ucs4:"]", rx357_fail1067
    add rx357_pos, 1
    goto alt360_end1076
  alt360_end1076:
    nqp_rxcommit rx357_bstack, alt360_end1076
    rx357_cur."!cursor_pass"(rx357_pos, "backslash:sym<x>", 'backtrack'=>1)
    .return (rx357_cur)
  rx357_restart1066:
    repr_get_attr_obj rx357_cstack, rx357_cur, rx357_curclass, "$!cstack"
  rx357_fail1067:
    unless rx357_bstack, rx357_done1065
    pop $I19, rx357_bstack
    if_null rx357_cstack, rx357_cstack_done1070
    unless rx357_cstack, rx357_cstack_done1070
    dec $I19
    set $P11, rx357_cstack[$I19]
  rx357_cstack_done1070:
    pop rx357_rep, rx357_bstack
    pop rx357_pos, rx357_bstack
    pop $I19, rx357_bstack
    lt rx357_pos, -1, rx357_done1065
    lt rx357_pos, 0, rx357_fail1067
    eq $I19, 0, rx357_fail1067
    nqp_islist $I20, rx357_cstack
    unless $I20, rx357_jump1068
    elements $I18, rx357_bstack
    le $I18, 0, rx357_cut1069
    dec $I18
    set $I18, rx357_bstack[$I18]
  rx357_cut1069:
    assign rx357_cstack, $I18
  rx357_jump1068:
    jump $I19
  rx357_done1065:
    rx357_cur."!cursor_fail"()
    .return (rx357_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<c>" :subid("cuid_78_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 242
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx363_start
    .local string rx363_tgt
    .local int rx363_pos
    .local int rx363_off
    .local int rx363_eos
    .local int rx363_rep
    .local pmc rx363_cur
    .local pmc rx363_curclass
    .local pmc rx363_bstack
    .local pmc rx363_cstack
    rx363_start = self."!cursor_start_all"()
    set rx363_cur, rx363_start[0]
    set rx363_tgt, rx363_start[1]
    set rx363_pos, rx363_start[2]
    set rx363_curclass, rx363_start[3]
    set rx363_bstack, rx363_start[4]
    set $I19, rx363_start[5]
    store_lex unicode:"$\x{a2}", rx363_cur
    length rx363_eos, rx363_tgt
    eq $I19, 1, rx363_restart1083
    gt rx363_pos, rx363_eos, rx363_fail1084
    repr_get_attr_int $I11, self, rx363_curclass, "$!from"
    ne $I11, -1, rxscan364_done1090
    goto rxscan364_scan1089
  rxscan364_loop1088:
    inc rx363_pos
    gt rx363_pos, rx363_eos, rx363_fail1084
    repr_bind_attr_int rx363_cur, rx363_curclass, "$!from", rx363_pos
  rxscan364_scan1089:
    nqp_rxmark rx363_bstack, rxscan364_loop1088, rx363_pos, 0
  rxscan364_done1090:
    nqp_rxmark rx363_bstack, rxcap365_fail1092, rx363_pos, 0
    ge rx363_pos, rx363_eos, rx363_fail1084
    substr $S11, rx363_tgt, rx363_pos, 1
    index $I11, ucs4:"cC", $S11
    lt $I11, 0, rx363_fail1084
    inc rx363_pos
    nqp_rxpeek $I19, rx363_bstack, rxcap365_fail1092
    inc $I19
    set $I11, rx363_bstack[$I19]
    repr_bind_attr_int rx363_cur, rx363_curclass, "$!pos", rx363_pos
    $P11 = rx363_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx363_pos)
    rx363_cstack = rx363_cur."!cursor_capture"($P11, "sym")
    goto rxcap365_done1091
  rxcap365_fail1092:
    goto rx363_fail1084
  rxcap365_done1091:
    repr_bind_attr_int rx363_cur, rx363_curclass, "$!pos", rx363_pos
    $P11 = rx363_cur."charspec"()
    repr_get_attr_int $I11, $P11, rx363_curclass, "$!pos"
    lt $I11, 0, rx363_fail1084
    nqp_rxmark rx363_bstack, rxsubrule366_pass1093, -1, 0
  rxsubrule366_pass1093:
    rx363_cstack = rx363_cur."!cursor_capture"($P11, "charspec")
    repr_get_attr_int rx363_pos, $P11, rx363_curclass, "$!pos"
    rx363_cur."!cursor_pass"(rx363_pos, "backslash:sym<c>", 'backtrack'=>1)
    .return (rx363_cur)
  rx363_restart1083:
    repr_get_attr_obj rx363_cstack, rx363_cur, rx363_curclass, "$!cstack"
  rx363_fail1084:
    unless rx363_bstack, rx363_done1082
    pop $I19, rx363_bstack
    if_null rx363_cstack, rx363_cstack_done1087
    unless rx363_cstack, rx363_cstack_done1087
    dec $I19
    set $P11, rx363_cstack[$I19]
  rx363_cstack_done1087:
    pop rx363_rep, rx363_bstack
    pop rx363_pos, rx363_bstack
    pop $I19, rx363_bstack
    lt rx363_pos, -1, rx363_done1082
    lt rx363_pos, 0, rx363_fail1084
    eq $I19, 0, rx363_fail1084
    nqp_islist $I20, rx363_cstack
    unless $I20, rx363_jump1085
    elements $I18, rx363_bstack
    le $I18, 0, rx363_cut1086
    dec $I18
    set $I18, rx363_bstack[$I18]
  rx363_cut1086:
    assign rx363_cstack, $I18
  rx363_jump1085:
    jump $I19
  rx363_done1082:
    rx363_cur."!cursor_fail"()
    .return (rx363_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<A>" :subid("cuid_79_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 243
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx367_start
    .local string rx367_tgt
    .local int rx367_pos
    .local int rx367_off
    .local int rx367_eos
    .local int rx367_rep
    .local pmc rx367_cur
    .local pmc rx367_curclass
    .local pmc rx367_bstack
    .local pmc rx367_cstack
    rx367_start = self."!cursor_start_all"()
    set rx367_cur, rx367_start[0]
    set rx367_tgt, rx367_start[1]
    set rx367_pos, rx367_start[2]
    set rx367_curclass, rx367_start[3]
    set rx367_bstack, rx367_start[4]
    set $I19, rx367_start[5]
    store_lex unicode:"$\x{a2}", rx367_cur
    length rx367_eos, rx367_tgt
    eq $I19, 1, rx367_restart1096
    gt rx367_pos, rx367_eos, rx367_fail1097
    repr_get_attr_int $I11, self, rx367_curclass, "$!from"
    ne $I11, -1, rxscan368_done1103
    goto rxscan368_scan1102
  rxscan368_loop1101:
    inc rx367_pos
    gt rx367_pos, rx367_eos, rx367_fail1097
    repr_bind_attr_int rx367_cur, rx367_curclass, "$!from", rx367_pos
  rxscan368_scan1102:
    nqp_rxmark rx367_bstack, rxscan368_loop1101, rx367_pos, 0
  rxscan368_done1103:
    add $I11, rx367_pos, 1
    gt $I11, rx367_eos, rx367_fail1097
    substr $S10, rx367_tgt, rx367_pos, 1
    ne $S10, ucs4:"A", rx367_fail1097
    add rx367_pos, 1
    repr_bind_attr_int rx367_cur, rx367_curclass, "$!pos", rx367_pos
    $P11 = rx367_cur."obs"("\\\\A as beginning-of-string matcher", "^")
    repr_get_attr_int $I11, $P11, rx367_curclass, "$!pos"
    lt $I11, 0, rx367_fail1097
    repr_get_attr_int rx367_pos, $P11, rx367_curclass, "$!pos"
    rx367_cur."!cursor_pass"(rx367_pos, "backslash:sym<A>", 'backtrack'=>1)
    .return (rx367_cur)
  rx367_restart1096:
    repr_get_attr_obj rx367_cstack, rx367_cur, rx367_curclass, "$!cstack"
  rx367_fail1097:
    unless rx367_bstack, rx367_done1095
    pop $I19, rx367_bstack
    if_null rx367_cstack, rx367_cstack_done1100
    unless rx367_cstack, rx367_cstack_done1100
    dec $I19
    set $P11, rx367_cstack[$I19]
  rx367_cstack_done1100:
    pop rx367_rep, rx367_bstack
    pop rx367_pos, rx367_bstack
    pop $I19, rx367_bstack
    lt rx367_pos, -1, rx367_done1095
    lt rx367_pos, 0, rx367_fail1097
    eq $I19, 0, rx367_fail1097
    nqp_islist $I20, rx367_cstack
    unless $I20, rx367_jump1098
    elements $I18, rx367_bstack
    le $I18, 0, rx367_cut1099
    dec $I18
    set $I18, rx367_bstack[$I18]
  rx367_cut1099:
    assign rx367_cstack, $I18
  rx367_jump1098:
    jump $I19
  rx367_done1095:
    rx367_cur."!cursor_fail"()
    .return (rx367_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<z>" :subid("cuid_80_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 244
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx370_start
    .local string rx370_tgt
    .local int rx370_pos
    .local int rx370_off
    .local int rx370_eos
    .local int rx370_rep
    .local pmc rx370_cur
    .local pmc rx370_curclass
    .local pmc rx370_bstack
    .local pmc rx370_cstack
    rx370_start = self."!cursor_start_all"()
    set rx370_cur, rx370_start[0]
    set rx370_tgt, rx370_start[1]
    set rx370_pos, rx370_start[2]
    set rx370_curclass, rx370_start[3]
    set rx370_bstack, rx370_start[4]
    set $I19, rx370_start[5]
    store_lex unicode:"$\x{a2}", rx370_cur
    length rx370_eos, rx370_tgt
    eq $I19, 1, rx370_restart1107
    gt rx370_pos, rx370_eos, rx370_fail1108
    repr_get_attr_int $I11, self, rx370_curclass, "$!from"
    ne $I11, -1, rxscan371_done1114
    goto rxscan371_scan1113
  rxscan371_loop1112:
    inc rx370_pos
    gt rx370_pos, rx370_eos, rx370_fail1108
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!from", rx370_pos
  rxscan371_scan1113:
    nqp_rxmark rx370_bstack, rxscan371_loop1112, rx370_pos, 0
  rxscan371_done1114:
    add $I11, rx370_pos, 1
    gt $I11, rx370_eos, rx370_fail1108
    substr $S10, rx370_tgt, rx370_pos, 1
    ne $S10, ucs4:"z", rx370_fail1108
    add rx370_pos, 1
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!pos", rx370_pos
    $P11 = rx370_cur."obs"("\\\\z as end-of-string matcher", "$")
    repr_get_attr_int $I11, $P11, rx370_curclass, "$!pos"
    lt $I11, 0, rx370_fail1108
    repr_get_attr_int rx370_pos, $P11, rx370_curclass, "$!pos"
    rx370_cur."!cursor_pass"(rx370_pos, "backslash:sym<z>", 'backtrack'=>1)
    .return (rx370_cur)
  rx370_restart1107:
    repr_get_attr_obj rx370_cstack, rx370_cur, rx370_curclass, "$!cstack"
  rx370_fail1108:
    unless rx370_bstack, rx370_done1106
    pop $I19, rx370_bstack
    if_null rx370_cstack, rx370_cstack_done1111
    unless rx370_cstack, rx370_cstack_done1111
    dec $I19
    set $P11, rx370_cstack[$I19]
  rx370_cstack_done1111:
    pop rx370_rep, rx370_bstack
    pop rx370_pos, rx370_bstack
    pop $I19, rx370_bstack
    lt rx370_pos, -1, rx370_done1106
    lt rx370_pos, 0, rx370_fail1108
    eq $I19, 0, rx370_fail1108
    nqp_islist $I20, rx370_cstack
    unless $I20, rx370_jump1109
    elements $I18, rx370_bstack
    le $I18, 0, rx370_cut1110
    dec $I18
    set $I18, rx370_bstack[$I18]
  rx370_cut1110:
    assign rx370_cstack, $I18
  rx370_jump1109:
    jump $I19
  rx370_done1106:
    rx370_cur."!cursor_fail"()
    .return (rx370_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<Z>" :subid("cuid_81_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 245
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx373_start
    .local string rx373_tgt
    .local int rx373_pos
    .local int rx373_off
    .local int rx373_eos
    .local int rx373_rep
    .local pmc rx373_cur
    .local pmc rx373_curclass
    .local pmc rx373_bstack
    .local pmc rx373_cstack
    rx373_start = self."!cursor_start_all"()
    set rx373_cur, rx373_start[0]
    set rx373_tgt, rx373_start[1]
    set rx373_pos, rx373_start[2]
    set rx373_curclass, rx373_start[3]
    set rx373_bstack, rx373_start[4]
    set $I19, rx373_start[5]
    store_lex unicode:"$\x{a2}", rx373_cur
    length rx373_eos, rx373_tgt
    eq $I19, 1, rx373_restart1118
    gt rx373_pos, rx373_eos, rx373_fail1119
    repr_get_attr_int $I11, self, rx373_curclass, "$!from"
    ne $I11, -1, rxscan374_done1125
    goto rxscan374_scan1124
  rxscan374_loop1123:
    inc rx373_pos
    gt rx373_pos, rx373_eos, rx373_fail1119
    repr_bind_attr_int rx373_cur, rx373_curclass, "$!from", rx373_pos
  rxscan374_scan1124:
    nqp_rxmark rx373_bstack, rxscan374_loop1123, rx373_pos, 0
  rxscan374_done1125:
    add $I11, rx373_pos, 1
    gt $I11, rx373_eos, rx373_fail1119
    substr $S10, rx373_tgt, rx373_pos, 1
    ne $S10, ucs4:"Z", rx373_fail1119
    add rx373_pos, 1
    repr_bind_attr_int rx373_cur, rx373_curclass, "$!pos", rx373_pos
    $P11 = rx373_cur."obs"("\\\\Z as end-of-string matcher", "\\\\n?$")
    repr_get_attr_int $I11, $P11, rx373_curclass, "$!pos"
    lt $I11, 0, rx373_fail1119
    repr_get_attr_int rx373_pos, $P11, rx373_curclass, "$!pos"
    rx373_cur."!cursor_pass"(rx373_pos, "backslash:sym<Z>", 'backtrack'=>1)
    .return (rx373_cur)
  rx373_restart1118:
    repr_get_attr_obj rx373_cstack, rx373_cur, rx373_curclass, "$!cstack"
  rx373_fail1119:
    unless rx373_bstack, rx373_done1117
    pop $I19, rx373_bstack
    if_null rx373_cstack, rx373_cstack_done1122
    unless rx373_cstack, rx373_cstack_done1122
    dec $I19
    set $P11, rx373_cstack[$I19]
  rx373_cstack_done1122:
    pop rx373_rep, rx373_bstack
    pop rx373_pos, rx373_bstack
    pop $I19, rx373_bstack
    lt rx373_pos, -1, rx373_done1117
    lt rx373_pos, 0, rx373_fail1119
    eq $I19, 0, rx373_fail1119
    nqp_islist $I20, rx373_cstack
    unless $I20, rx373_jump1120
    elements $I18, rx373_bstack
    le $I18, 0, rx373_cut1121
    dec $I18
    set $I18, rx373_bstack[$I18]
  rx373_cut1121:
    assign rx373_cstack, $I18
  rx373_jump1120:
    jump $I19
  rx373_done1117:
    rx373_cur."!cursor_fail"()
    .return (rx373_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<Q>" :subid("cuid_82_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 246
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx376_start
    .local string rx376_tgt
    .local int rx376_pos
    .local int rx376_off
    .local int rx376_eos
    .local int rx376_rep
    .local pmc rx376_cur
    .local pmc rx376_curclass
    .local pmc rx376_bstack
    .local pmc rx376_cstack
    rx376_start = self."!cursor_start_all"()
    set rx376_cur, rx376_start[0]
    set rx376_tgt, rx376_start[1]
    set rx376_pos, rx376_start[2]
    set rx376_curclass, rx376_start[3]
    set rx376_bstack, rx376_start[4]
    set $I19, rx376_start[5]
    store_lex unicode:"$\x{a2}", rx376_cur
    length rx376_eos, rx376_tgt
    eq $I19, 1, rx376_restart1129
    gt rx376_pos, rx376_eos, rx376_fail1130
    repr_get_attr_int $I11, self, rx376_curclass, "$!from"
    ne $I11, -1, rxscan377_done1136
    goto rxscan377_scan1135
  rxscan377_loop1134:
    inc rx376_pos
    gt rx376_pos, rx376_eos, rx376_fail1130
    repr_bind_attr_int rx376_cur, rx376_curclass, "$!from", rx376_pos
  rxscan377_scan1135:
    nqp_rxmark rx376_bstack, rxscan377_loop1134, rx376_pos, 0
  rxscan377_done1136:
    add $I11, rx376_pos, 1
    gt $I11, rx376_eos, rx376_fail1130
    substr $S10, rx376_tgt, rx376_pos, 1
    ne $S10, ucs4:"Q", rx376_fail1130
    add rx376_pos, 1
    repr_bind_attr_int rx376_cur, rx376_curclass, "$!pos", rx376_pos
    $P11 = rx376_cur."obs"("\\\\Q as quotemeta", "quotes or literal variable match")
    repr_get_attr_int $I11, $P11, rx376_curclass, "$!pos"
    lt $I11, 0, rx376_fail1130
    repr_get_attr_int rx376_pos, $P11, rx376_curclass, "$!pos"
    rx376_cur."!cursor_pass"(rx376_pos, "backslash:sym<Q>", 'backtrack'=>1)
    .return (rx376_cur)
  rx376_restart1129:
    repr_get_attr_obj rx376_cstack, rx376_cur, rx376_curclass, "$!cstack"
  rx376_fail1130:
    unless rx376_bstack, rx376_done1128
    pop $I19, rx376_bstack
    if_null rx376_cstack, rx376_cstack_done1133
    unless rx376_cstack, rx376_cstack_done1133
    dec $I19
    set $P11, rx376_cstack[$I19]
  rx376_cstack_done1133:
    pop rx376_rep, rx376_bstack
    pop rx376_pos, rx376_bstack
    pop $I19, rx376_bstack
    lt rx376_pos, -1, rx376_done1128
    lt rx376_pos, 0, rx376_fail1130
    eq $I19, 0, rx376_fail1130
    nqp_islist $I20, rx376_cstack
    unless $I20, rx376_jump1131
    elements $I18, rx376_bstack
    le $I18, 0, rx376_cut1132
    dec $I18
    set $I18, rx376_bstack[$I18]
  rx376_cut1132:
    assign rx376_cstack, $I18
  rx376_jump1131:
    jump $I19
  rx376_done1128:
    rx376_cur."!cursor_fail"()
    .return (rx376_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<unrec>" :subid("cuid_83_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 247
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_186_1360623852.546' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_84_1360623852.546' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_187_1360623852.546' 
    capture_lex $P5008 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx379_start
    .local string rx379_tgt
    .local int rx379_pos
    .local int rx379_off
    .local int rx379_eos
    .local int rx379_rep
    .local pmc rx379_cur
    .local pmc rx379_curclass
    .local pmc rx379_bstack
    .local pmc rx379_cstack
    rx379_start = self."!cursor_start_all"()
    set rx379_cur, rx379_start[0]
    set rx379_tgt, rx379_start[1]
    set rx379_pos, rx379_start[2]
    set rx379_curclass, rx379_start[3]
    set rx379_bstack, rx379_start[4]
    set $I19, rx379_start[5]
    store_lex unicode:"$\x{a2}", rx379_cur
    length rx379_eos, rx379_tgt
    eq $I19, 1, rx379_restart1140
    gt rx379_pos, rx379_eos, rx379_fail1141
    repr_get_attr_int $I11, self, rx379_curclass, "$!from"
    ne $I11, -1, rxscan380_done1147
    goto rxscan380_scan1146
  rxscan380_loop1145:
    inc rx379_pos
    gt rx379_pos, rx379_eos, rx379_fail1141
    repr_bind_attr_int rx379_cur, rx379_curclass, "$!from", rx379_pos
  rxscan380_scan1146:
    nqp_rxmark rx379_bstack, rxscan380_loop1145, rx379_pos, 0
  rxscan380_done1147:
    repr_bind_attr_int rx379_cur, rx379_curclass, "$!pos", rx379_pos
    store_lex unicode:"$\x{a2}", rx379_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_186_1360623852.546' 
    capture_lex $P5002
    $P5003 = $P5002()
    .const 'Sub' $P5004 = 'cuid_84_1360623852.546' 
    capture_lex $P5004
    repr_bind_attr_int rx379_cur, rx379_curclass, "$!pos", rx379_pos
    $P11 = rx379_cur.$P5004()
    repr_get_attr_int $I11, $P11, rx379_curclass, "$!pos"
    lt $I11, 0, rx379_fail1141
    nqp_rxmark rx379_bstack, rxsubrule383_pass1158, -1, 0
  rxsubrule383_pass1158:
    rx379_cstack = rx379_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx379_pos, $P11, rx379_curclass, "$!pos"
    repr_bind_attr_int rx379_cur, rx379_curclass, "$!pos", rx379_pos
    store_lex unicode:"$\x{a2}", rx379_cur
    $P5005 = $P101."MATCH"()
    set $P102, $P5005
    .const 'Sub' $P5006 = 'cuid_187_1360623852.546' 
    capture_lex $P5006
    $P5007 = $P5006()
    rx379_cur."!cursor_pass"(rx379_pos, "backslash:sym<unrec>", 'backtrack'=>1)
    .return (rx379_cur)
  rx379_restart1140:
    repr_get_attr_obj rx379_cstack, rx379_cur, rx379_curclass, "$!cstack"
  rx379_fail1141:
    unless rx379_bstack, rx379_done1139
    pop $I19, rx379_bstack
    if_null rx379_cstack, rx379_cstack_done1144
    unless rx379_cstack, rx379_cstack_done1144
    dec $I19
    set $P11, rx379_cstack[$I19]
  rx379_cstack_done1144:
    pop rx379_rep, rx379_bstack
    pop rx379_pos, rx379_bstack
    pop $I19, rx379_bstack
    lt rx379_pos, -1, rx379_done1139
    lt rx379_pos, 0, rx379_fail1141
    eq $I19, 0, rx379_fail1141
    nqp_islist $I20, rx379_cstack
    unless $I20, rx379_jump1142
    elements $I18, rx379_bstack
    le $I18, 0, rx379_cut1143
    dec $I18
    set $I18, rx379_bstack[$I18]
  rx379_cut1143:
    assign rx379_cstack, $I18
  rx379_jump1142:
    jump $I19
  rx379_done1139:
    rx379_cur."!cursor_fail"()
    .return (rx379_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_186_1360623852.546") :anon :lex :outer("cuid_83_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 247

    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_84_1360623852.546") :anon :lex :outer("cuid_83_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx381_start
    .local string rx381_tgt
    .local int rx381_pos
    .local int rx381_off
    .local int rx381_eos
    .local int rx381_rep
    .local pmc rx381_cur
    .local pmc rx381_curclass
    .local pmc rx381_bstack
    .local pmc rx381_cstack
    rx381_start = self."!cursor_start_all"()
    set rx381_cur, rx381_start[0]
    set rx381_tgt, rx381_start[1]
    set rx381_pos, rx381_start[2]
    set rx381_curclass, rx381_start[3]
    set rx381_bstack, rx381_start[4]
    set $I19, rx381_start[5]
    store_lex unicode:"$\x{a2}", rx381_cur
    length rx381_eos, rx381_tgt
    eq $I19, 1, rx381_restart1150
    gt rx381_pos, rx381_eos, rx381_fail1151
    repr_get_attr_int $I11, self, rx381_curclass, "$!from"
    ne $I11, -1, rxscan382_done1157
    goto rxscan382_scan1156
  rxscan382_loop1155:
    inc rx381_pos
    gt rx381_pos, rx381_eos, rx381_fail1151
    repr_bind_attr_int rx381_cur, rx381_curclass, "$!from", rx381_pos
  rxscan382_scan1156:
    nqp_rxmark rx381_bstack, rxscan382_loop1155, rx381_pos, 0
  rxscan382_done1157:
    ge rx381_pos, rx381_eos, rx381_fail1151
    is_cclass $I11, .CCLASS_WORD, rx381_tgt, rx381_pos
    unless $I11, rx381_fail1151
    add rx381_pos, 1
    rx381_cur."!cursor_pass"(rx381_pos, 'backtrack'=>1)
    .return (rx381_cur)
  rx381_restart1150:
    repr_get_attr_obj rx381_cstack, rx381_cur, rx381_curclass, "$!cstack"
  rx381_fail1151:
    unless rx381_bstack, rx381_done1149
    pop $I19, rx381_bstack
    if_null rx381_cstack, rx381_cstack_done1154
    unless rx381_cstack, rx381_cstack_done1154
    dec $I19
    set $P11, rx381_cstack[$I19]
  rx381_cstack_done1154:
    pop rx381_rep, rx381_bstack
    pop rx381_pos, rx381_bstack
    pop $I19, rx381_bstack
    lt rx381_pos, -1, rx381_done1149
    lt rx381_pos, 0, rx381_fail1151
    eq $I19, 0, rx381_fail1151
    nqp_islist $I20, rx381_cstack
    unless $I20, rx381_jump1152
    elements $I18, rx381_bstack
    le $I18, 0, rx381_cut1153
    dec $I18
    set $I18, rx381_bstack[$I18]
  rx381_cut1153:
    assign rx381_cstack, $I18
  rx381_jump1152:
    jump $I19
  rx381_done1149:
    rx381_cur."!cursor_fail"()
    .return (rx381_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_187_1360623852.546") :anon :lex :outer("cuid_83_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 247
    .local pmc fb_tmp_16 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$/"
    set fb_tmp_16, $P5003
    repr_defined $I5001, fb_tmp_16
    unless $I5001 goto if384_else1159 
    set $P5004, fb_tmp_16[0]
    set $P5006, $P5004
    goto if384_end1160
  if384_else1159:
    null $P5005
    set $P5006, $P5005
  if384_end1160:
    unless_null $P5006, vivi_3851161
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_3851161:
    $P5008 = $P5006."Str"()
    $P5009 = $P5001."throw_unrecog_backslash_seq"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<misc>" :subid("cuid_85_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 248
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx386_start
    .local string rx386_tgt
    .local int rx386_pos
    .local int rx386_off
    .local int rx386_eos
    .local int rx386_rep
    .local pmc rx386_cur
    .local pmc rx386_curclass
    .local pmc rx386_bstack
    .local pmc rx386_cstack
    rx386_start = self."!cursor_start_all"()
    set rx386_cur, rx386_start[0]
    set rx386_tgt, rx386_start[1]
    set rx386_pos, rx386_start[2]
    set rx386_curclass, rx386_start[3]
    set rx386_bstack, rx386_start[4]
    set $I19, rx386_start[5]
    store_lex unicode:"$\x{a2}", rx386_cur
    length rx386_eos, rx386_tgt
    eq $I19, 1, rx386_restart1164
    gt rx386_pos, rx386_eos, rx386_fail1165
    repr_get_attr_int $I11, self, rx386_curclass, "$!from"
    ne $I11, -1, rxscan387_done1171
    goto rxscan387_scan1170
  rxscan387_loop1169:
    inc rx386_pos
    gt rx386_pos, rx386_eos, rx386_fail1165
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!from", rx386_pos
  rxscan387_scan1170:
    nqp_rxmark rx386_bstack, rxscan387_loop1169, rx386_pos, 0
  rxscan387_done1171:
    ge rx386_pos, rx386_eos, rx386_fail1165
    is_cclass $I11, .CCLASS_WORD, rx386_tgt, rx386_pos
    if $I11, rx386_fail1165
    add rx386_pos, 1
    rx386_cur."!cursor_pass"(rx386_pos, "backslash:sym<misc>", 'backtrack'=>1)
    .return (rx386_cur)
  rx386_restart1164:
    repr_get_attr_obj rx386_cstack, rx386_cur, rx386_curclass, "$!cstack"
  rx386_fail1165:
    unless rx386_bstack, rx386_done1163
    pop $I19, rx386_bstack
    if_null rx386_cstack, rx386_cstack_done1168
    unless rx386_cstack, rx386_cstack_done1168
    dec $I19
    set $P11, rx386_cstack[$I19]
  rx386_cstack_done1168:
    pop rx386_rep, rx386_bstack
    pop rx386_pos, rx386_bstack
    pop $I19, rx386_bstack
    lt rx386_pos, -1, rx386_done1163
    lt rx386_pos, 0, rx386_fail1165
    eq $I19, 0, rx386_fail1165
    nqp_islist $I20, rx386_cstack
    unless $I20, rx386_jump1166
    elements $I18, rx386_bstack
    le $I18, 0, rx386_cut1167
    dec $I18
    set $I18, rx386_bstack[$I18]
  rx386_cut1167:
    assign rx386_cstack, $I18
  rx386_jump1166:
    jump $I19
  rx386_done1163:
    rx386_cur."!cursor_fail"()
    .return (rx386_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion" :subid("cuid_86_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 250
    .param pmc self 
    $P5001 = self."!protoregex"("assertion")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_87_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 252
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_88_1360623852.546' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx388_start
    .local string rx388_tgt
    .local int rx388_pos
    .local int rx388_off
    .local int rx388_eos
    .local int rx388_rep
    .local pmc rx388_cur
    .local pmc rx388_curclass
    .local pmc rx388_bstack
    .local pmc rx388_cstack
    rx388_start = self."!cursor_start_all"()
    set rx388_cur, rx388_start[0]
    set rx388_tgt, rx388_start[1]
    set rx388_pos, rx388_start[2]
    set rx388_curclass, rx388_start[3]
    set rx388_bstack, rx388_start[4]
    set $I19, rx388_start[5]
    store_lex unicode:"$\x{a2}", rx388_cur
    length rx388_eos, rx388_tgt
    eq $I19, 1, rx388_restart1174
    gt rx388_pos, rx388_eos, rx388_fail1175
    repr_get_attr_int $I11, self, rx388_curclass, "$!from"
    ne $I11, -1, rxscan389_done1181
    goto rxscan389_scan1180
  rxscan389_loop1179:
    inc rx388_pos
    gt rx388_pos, rx388_eos, rx388_fail1175
    repr_bind_attr_int rx388_cur, rx388_curclass, "$!from", rx388_pos
  rxscan389_scan1180:
    nqp_rxmark rx388_bstack, rxscan389_loop1179, rx388_pos, 0
  rxscan389_done1181:
    add $I11, rx388_pos, 1
    gt $I11, rx388_eos, rx388_fail1175
    substr $S10, rx388_tgt, rx388_pos, 1
    ne $S10, ucs4:"?", rx388_fail1175
    add rx388_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt390_01183
    nqp_push_label $P11, alt390_11194
    nqp_rxmark rx388_bstack, alt390_end1182, -1, 0
    rx388_cur."!alt"(rx388_pos, "alt_nfa__15_1360623853.23", $P11)
    goto rx388_fail1175
  alt390_01183:
    .const 'Sub' $P5001 = 'cuid_88_1360623852.546' 
    capture_lex $P5001
    repr_bind_attr_int rx388_cur, rx388_curclass, "$!pos", rx388_pos
    $P11 = rx388_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx388_curclass, "$!pos"
    lt $I11, 0, rx388_fail1175
    goto alt390_end1182
  alt390_11194:
    repr_bind_attr_int rx388_cur, rx388_curclass, "$!pos", rx388_pos
    $P11 = rx388_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx388_curclass, "$!pos"
    lt $I11, 0, rx388_fail1175
    nqp_rxmark rx388_bstack, rxsubrule393_pass1195, -1, 0
  rxsubrule393_pass1195:
    rx388_cstack = rx388_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx388_pos, $P11, rx388_curclass, "$!pos"
    goto alt390_end1182
  alt390_end1182:
    nqp_rxcommit rx388_bstack, alt390_end1182
    rx388_cur."!cursor_pass"(rx388_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx388_cur)
  rx388_restart1174:
    repr_get_attr_obj rx388_cstack, rx388_cur, rx388_curclass, "$!cstack"
  rx388_fail1175:
    unless rx388_bstack, rx388_done1173
    pop $I19, rx388_bstack
    if_null rx388_cstack, rx388_cstack_done1178
    unless rx388_cstack, rx388_cstack_done1178
    dec $I19
    set $P11, rx388_cstack[$I19]
  rx388_cstack_done1178:
    pop rx388_rep, rx388_bstack
    pop rx388_pos, rx388_bstack
    pop $I19, rx388_bstack
    lt rx388_pos, -1, rx388_done1173
    lt rx388_pos, 0, rx388_fail1175
    eq $I19, 0, rx388_fail1175
    nqp_islist $I20, rx388_cstack
    unless $I20, rx388_jump1176
    elements $I18, rx388_bstack
    le $I18, 0, rx388_cut1177
    dec $I18
    set $I18, rx388_bstack[$I18]
  rx388_cut1177:
    assign rx388_cstack, $I18
  rx388_jump1176:
    jump $I19
  rx388_done1173:
    rx388_cur."!cursor_fail"()
    .return (rx388_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_88_1360623852.546") :anon :lex :outer("cuid_87_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx391_start
    .local string rx391_tgt
    .local int rx391_pos
    .local int rx391_off
    .local int rx391_eos
    .local int rx391_rep
    .local pmc rx391_cur
    .local pmc rx391_curclass
    .local pmc rx391_bstack
    .local pmc rx391_cstack
    rx391_start = self."!cursor_start_all"()
    set rx391_cur, rx391_start[0]
    set rx391_tgt, rx391_start[1]
    set rx391_pos, rx391_start[2]
    set rx391_curclass, rx391_start[3]
    set rx391_bstack, rx391_start[4]
    set $I19, rx391_start[5]
    store_lex unicode:"$\x{a2}", rx391_cur
    length rx391_eos, rx391_tgt
    eq $I19, 1, rx391_restart1186
    gt rx391_pos, rx391_eos, rx391_fail1187
    repr_get_attr_int $I11, self, rx391_curclass, "$!from"
    ne $I11, -1, rxscan392_done1193
    goto rxscan392_scan1192
  rxscan392_loop1191:
    inc rx391_pos
    gt rx391_pos, rx391_eos, rx391_fail1187
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!from", rx391_pos
  rxscan392_scan1192:
    nqp_rxmark rx391_bstack, rxscan392_loop1191, rx391_pos, 0
  rxscan392_done1193:
    add $I11, rx391_pos, 1
    gt $I11, rx391_eos, rx391_fail1187
    substr $S10, rx391_tgt, rx391_pos, 1
    ne $S10, ucs4:">", rx391_fail1187
    add rx391_pos, 1
    rx391_cur."!cursor_pass"(rx391_pos, 'backtrack'=>1)
    .return (rx391_cur)
  rx391_restart1186:
    repr_get_attr_obj rx391_cstack, rx391_cur, rx391_curclass, "$!cstack"
  rx391_fail1187:
    unless rx391_bstack, rx391_done1185
    pop $I19, rx391_bstack
    if_null rx391_cstack, rx391_cstack_done1190
    unless rx391_cstack, rx391_cstack_done1190
    dec $I19
    set $P11, rx391_cstack[$I19]
  rx391_cstack_done1190:
    pop rx391_rep, rx391_bstack
    pop rx391_pos, rx391_bstack
    pop $I19, rx391_bstack
    lt rx391_pos, -1, rx391_done1185
    lt rx391_pos, 0, rx391_fail1187
    eq $I19, 0, rx391_fail1187
    nqp_islist $I20, rx391_cstack
    unless $I20, rx391_jump1188
    elements $I18, rx391_bstack
    le $I18, 0, rx391_cut1189
    dec $I18
    set $I18, rx391_bstack[$I18]
  rx391_cut1189:
    assign rx391_cstack, $I18
  rx391_jump1188:
    jump $I19
  rx391_done1185:
    rx391_cur."!cursor_fail"()
    .return (rx391_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_89_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 253
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_90_1360623852.546' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx394_start
    .local string rx394_tgt
    .local int rx394_pos
    .local int rx394_off
    .local int rx394_eos
    .local int rx394_rep
    .local pmc rx394_cur
    .local pmc rx394_curclass
    .local pmc rx394_bstack
    .local pmc rx394_cstack
    rx394_start = self."!cursor_start_all"()
    set rx394_cur, rx394_start[0]
    set rx394_tgt, rx394_start[1]
    set rx394_pos, rx394_start[2]
    set rx394_curclass, rx394_start[3]
    set rx394_bstack, rx394_start[4]
    set $I19, rx394_start[5]
    store_lex unicode:"$\x{a2}", rx394_cur
    length rx394_eos, rx394_tgt
    eq $I19, 1, rx394_restart1198
    gt rx394_pos, rx394_eos, rx394_fail1199
    repr_get_attr_int $I11, self, rx394_curclass, "$!from"
    ne $I11, -1, rxscan395_done1205
    goto rxscan395_scan1204
  rxscan395_loop1203:
    inc rx394_pos
    gt rx394_pos, rx394_eos, rx394_fail1199
    repr_bind_attr_int rx394_cur, rx394_curclass, "$!from", rx394_pos
  rxscan395_scan1204:
    nqp_rxmark rx394_bstack, rxscan395_loop1203, rx394_pos, 0
  rxscan395_done1205:
    add $I11, rx394_pos, 1
    gt $I11, rx394_eos, rx394_fail1199
    substr $S10, rx394_tgt, rx394_pos, 1
    ne $S10, ucs4:"!", rx394_fail1199
    add rx394_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt396_01207
    nqp_push_label $P11, alt396_11218
    nqp_rxmark rx394_bstack, alt396_end1206, -1, 0
    rx394_cur."!alt"(rx394_pos, "alt_nfa__16_1360623853.24", $P11)
    goto rx394_fail1199
  alt396_01207:
    .const 'Sub' $P5001 = 'cuid_90_1360623852.546' 
    capture_lex $P5001
    repr_bind_attr_int rx394_cur, rx394_curclass, "$!pos", rx394_pos
    $P11 = rx394_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx394_curclass, "$!pos"
    lt $I11, 0, rx394_fail1199
    goto alt396_end1206
  alt396_11218:
    repr_bind_attr_int rx394_cur, rx394_curclass, "$!pos", rx394_pos
    $P11 = rx394_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx394_curclass, "$!pos"
    lt $I11, 0, rx394_fail1199
    nqp_rxmark rx394_bstack, rxsubrule399_pass1219, -1, 0
  rxsubrule399_pass1219:
    rx394_cstack = rx394_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx394_pos, $P11, rx394_curclass, "$!pos"
    goto alt396_end1206
  alt396_end1206:
    nqp_rxcommit rx394_bstack, alt396_end1206
    rx394_cur."!cursor_pass"(rx394_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx394_cur)
  rx394_restart1198:
    repr_get_attr_obj rx394_cstack, rx394_cur, rx394_curclass, "$!cstack"
  rx394_fail1199:
    unless rx394_bstack, rx394_done1197
    pop $I19, rx394_bstack
    if_null rx394_cstack, rx394_cstack_done1202
    unless rx394_cstack, rx394_cstack_done1202
    dec $I19
    set $P11, rx394_cstack[$I19]
  rx394_cstack_done1202:
    pop rx394_rep, rx394_bstack
    pop rx394_pos, rx394_bstack
    pop $I19, rx394_bstack
    lt rx394_pos, -1, rx394_done1197
    lt rx394_pos, 0, rx394_fail1199
    eq $I19, 0, rx394_fail1199
    nqp_islist $I20, rx394_cstack
    unless $I20, rx394_jump1200
    elements $I18, rx394_bstack
    le $I18, 0, rx394_cut1201
    dec $I18
    set $I18, rx394_bstack[$I18]
  rx394_cut1201:
    assign rx394_cstack, $I18
  rx394_jump1200:
    jump $I19
  rx394_done1197:
    rx394_cur."!cursor_fail"()
    .return (rx394_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_90_1360623852.546") :anon :lex :outer("cuid_89_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx397_start
    .local string rx397_tgt
    .local int rx397_pos
    .local int rx397_off
    .local int rx397_eos
    .local int rx397_rep
    .local pmc rx397_cur
    .local pmc rx397_curclass
    .local pmc rx397_bstack
    .local pmc rx397_cstack
    rx397_start = self."!cursor_start_all"()
    set rx397_cur, rx397_start[0]
    set rx397_tgt, rx397_start[1]
    set rx397_pos, rx397_start[2]
    set rx397_curclass, rx397_start[3]
    set rx397_bstack, rx397_start[4]
    set $I19, rx397_start[5]
    store_lex unicode:"$\x{a2}", rx397_cur
    length rx397_eos, rx397_tgt
    eq $I19, 1, rx397_restart1210
    gt rx397_pos, rx397_eos, rx397_fail1211
    repr_get_attr_int $I11, self, rx397_curclass, "$!from"
    ne $I11, -1, rxscan398_done1217
    goto rxscan398_scan1216
  rxscan398_loop1215:
    inc rx397_pos
    gt rx397_pos, rx397_eos, rx397_fail1211
    repr_bind_attr_int rx397_cur, rx397_curclass, "$!from", rx397_pos
  rxscan398_scan1216:
    nqp_rxmark rx397_bstack, rxscan398_loop1215, rx397_pos, 0
  rxscan398_done1217:
    add $I11, rx397_pos, 1
    gt $I11, rx397_eos, rx397_fail1211
    substr $S10, rx397_tgt, rx397_pos, 1
    ne $S10, ucs4:">", rx397_fail1211
    add rx397_pos, 1
    rx397_cur."!cursor_pass"(rx397_pos, 'backtrack'=>1)
    .return (rx397_cur)
  rx397_restart1210:
    repr_get_attr_obj rx397_cstack, rx397_cur, rx397_curclass, "$!cstack"
  rx397_fail1211:
    unless rx397_bstack, rx397_done1209
    pop $I19, rx397_bstack
    if_null rx397_cstack, rx397_cstack_done1214
    unless rx397_cstack, rx397_cstack_done1214
    dec $I19
    set $P11, rx397_cstack[$I19]
  rx397_cstack_done1214:
    pop rx397_rep, rx397_bstack
    pop rx397_pos, rx397_bstack
    pop $I19, rx397_bstack
    lt rx397_pos, -1, rx397_done1209
    lt rx397_pos, 0, rx397_fail1211
    eq $I19, 0, rx397_fail1211
    nqp_islist $I20, rx397_cstack
    unless $I20, rx397_jump1212
    elements $I18, rx397_bstack
    le $I18, 0, rx397_cut1213
    dec $I18
    set $I18, rx397_bstack[$I18]
  rx397_cut1213:
    assign rx397_cstack, $I18
  rx397_jump1212:
    jump $I19
  rx397_done1209:
    rx397_cur."!cursor_fail"()
    .return (rx397_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<|>" :subid("cuid_91_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 254
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx400_start
    .local string rx400_tgt
    .local int rx400_pos
    .local int rx400_off
    .local int rx400_eos
    .local int rx400_rep
    .local pmc rx400_cur
    .local pmc rx400_curclass
    .local pmc rx400_bstack
    .local pmc rx400_cstack
    rx400_start = self."!cursor_start_all"()
    set rx400_cur, rx400_start[0]
    set rx400_tgt, rx400_start[1]
    set rx400_pos, rx400_start[2]
    set rx400_curclass, rx400_start[3]
    set rx400_bstack, rx400_start[4]
    set $I19, rx400_start[5]
    store_lex unicode:"$\x{a2}", rx400_cur
    length rx400_eos, rx400_tgt
    eq $I19, 1, rx400_restart1222
    gt rx400_pos, rx400_eos, rx400_fail1223
    repr_get_attr_int $I11, self, rx400_curclass, "$!from"
    ne $I11, -1, rxscan401_done1229
    goto rxscan401_scan1228
  rxscan401_loop1227:
    inc rx400_pos
    gt rx400_pos, rx400_eos, rx400_fail1223
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!from", rx400_pos
  rxscan401_scan1228:
    nqp_rxmark rx400_bstack, rxscan401_loop1227, rx400_pos, 0
  rxscan401_done1229:
    add $I11, rx400_pos, 1
    gt $I11, rx400_eos, rx400_fail1223
    substr $S10, rx400_tgt, rx400_pos, 1
    ne $S10, ucs4:"|", rx400_fail1223
    add rx400_pos, 1
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!pos", rx400_pos
    $P11 = rx400_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx400_curclass, "$!pos"
    lt $I11, 0, rx400_fail1223
    nqp_rxmark rx400_bstack, rxsubrule402_pass1230, -1, 0
  rxsubrule402_pass1230:
    rx400_cstack = rx400_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx400_pos, $P11, rx400_curclass, "$!pos"
    rx400_cur."!cursor_pass"(rx400_pos, "assertion:sym<|>", 'backtrack'=>1)
    .return (rx400_cur)
  rx400_restart1222:
    repr_get_attr_obj rx400_cstack, rx400_cur, rx400_curclass, "$!cstack"
  rx400_fail1223:
    unless rx400_bstack, rx400_done1221
    pop $I19, rx400_bstack
    if_null rx400_cstack, rx400_cstack_done1226
    unless rx400_cstack, rx400_cstack_done1226
    dec $I19
    set $P11, rx400_cstack[$I19]
  rx400_cstack_done1226:
    pop rx400_rep, rx400_bstack
    pop rx400_pos, rx400_bstack
    pop $I19, rx400_bstack
    lt rx400_pos, -1, rx400_done1221
    lt rx400_pos, 0, rx400_fail1223
    eq $I19, 0, rx400_fail1223
    nqp_islist $I20, rx400_cstack
    unless $I20, rx400_jump1224
    elements $I18, rx400_bstack
    le $I18, 0, rx400_cut1225
    dec $I18
    set $I18, rx400_bstack[$I18]
  rx400_cut1225:
    assign rx400_cstack, $I18
  rx400_jump1224:
    jump $I19
  rx400_done1221:
    rx400_cur."!cursor_fail"()
    .return (rx400_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<method>" :subid("cuid_92_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 256
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx403_start
    .local string rx403_tgt
    .local int rx403_pos
    .local int rx403_off
    .local int rx403_eos
    .local int rx403_rep
    .local pmc rx403_cur
    .local pmc rx403_curclass
    .local pmc rx403_bstack
    .local pmc rx403_cstack
    rx403_start = self."!cursor_start_all"()
    set rx403_cur, rx403_start[0]
    set rx403_tgt, rx403_start[1]
    set rx403_pos, rx403_start[2]
    set rx403_curclass, rx403_start[3]
    set rx403_bstack, rx403_start[4]
    set $I19, rx403_start[5]
    store_lex unicode:"$\x{a2}", rx403_cur
    length rx403_eos, rx403_tgt
    eq $I19, 1, rx403_restart1233
    gt rx403_pos, rx403_eos, rx403_fail1234
    repr_get_attr_int $I11, self, rx403_curclass, "$!from"
    ne $I11, -1, rxscan404_done1240
    goto rxscan404_scan1239
  rxscan404_loop1238:
    inc rx403_pos
    gt rx403_pos, rx403_eos, rx403_fail1234
    repr_bind_attr_int rx403_cur, rx403_curclass, "$!from", rx403_pos
  rxscan404_scan1239:
    nqp_rxmark rx403_bstack, rxscan404_loop1238, rx403_pos, 0
  rxscan404_done1240:
    add $I11, rx403_pos, 1
    gt $I11, rx403_eos, rx403_fail1234
    substr $S10, rx403_tgt, rx403_pos, 1
    ne $S10, ucs4:".", rx403_fail1234
    add rx403_pos, 1
    repr_bind_attr_int rx403_cur, rx403_curclass, "$!pos", rx403_pos
    $P11 = rx403_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx403_curclass, "$!pos"
    lt $I11, 0, rx403_fail1234
    nqp_rxmark rx403_bstack, rxsubrule405_pass1241, -1, 0
  rxsubrule405_pass1241:
    rx403_cstack = rx403_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx403_pos, $P11, rx403_curclass, "$!pos"
    rx403_cur."!cursor_pass"(rx403_pos, "assertion:sym<method>", 'backtrack'=>1)
    .return (rx403_cur)
  rx403_restart1233:
    repr_get_attr_obj rx403_cstack, rx403_cur, rx403_curclass, "$!cstack"
  rx403_fail1234:
    unless rx403_bstack, rx403_done1232
    pop $I19, rx403_bstack
    if_null rx403_cstack, rx403_cstack_done1237
    unless rx403_cstack, rx403_cstack_done1237
    dec $I19
    set $P11, rx403_cstack[$I19]
  rx403_cstack_done1237:
    pop rx403_rep, rx403_bstack
    pop rx403_pos, rx403_bstack
    pop $I19, rx403_bstack
    lt rx403_pos, -1, rx403_done1232
    lt rx403_pos, 0, rx403_fail1234
    eq $I19, 0, rx403_fail1234
    nqp_islist $I20, rx403_cstack
    unless $I20, rx403_jump1235
    elements $I18, rx403_bstack
    le $I18, 0, rx403_cut1236
    dec $I18
    set $I18, rx403_bstack[$I18]
  rx403_cut1236:
    assign rx403_cstack, $I18
  rx403_jump1235:
    jump $I19
  rx403_done1232:
    rx403_cur."!cursor_fail"()
    .return (rx403_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_93_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 260
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_94_1360623852.546' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx406_start
    .local string rx406_tgt
    .local int rx406_pos
    .local int rx406_off
    .local int rx406_eos
    .local int rx406_rep
    .local pmc rx406_cur
    .local pmc rx406_curclass
    .local pmc rx406_bstack
    .local pmc rx406_cstack
    rx406_start = self."!cursor_start_all"()
    set rx406_cur, rx406_start[0]
    set rx406_tgt, rx406_start[1]
    set rx406_pos, rx406_start[2]
    set rx406_curclass, rx406_start[3]
    set rx406_bstack, rx406_start[4]
    set $I19, rx406_start[5]
    store_lex unicode:"$\x{a2}", rx406_cur
    length rx406_eos, rx406_tgt
    eq $I19, 1, rx406_restart1244
    gt rx406_pos, rx406_eos, rx406_fail1245
    repr_get_attr_int $I11, self, rx406_curclass, "$!from"
    ne $I11, -1, rxscan407_done1251
    goto rxscan407_scan1250
  rxscan407_loop1249:
    inc rx406_pos
    gt rx406_pos, rx406_eos, rx406_fail1245
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!from", rx406_pos
  rxscan407_scan1250:
    nqp_rxmark rx406_bstack, rxscan407_loop1249, rx406_pos, 0
  rxscan407_done1251:
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!pos", rx406_pos
    $P11 = rx406_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx406_curclass, "$!pos"
    lt $I11, 0, rx406_fail1245
    nqp_rxmark rx406_bstack, rxsubrule408_pass1252, -1, 0
  rxsubrule408_pass1252:
    rx406_cstack = rx406_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx406_pos, $P11, rx406_curclass, "$!pos"
    nqp_rxmark rx406_bstack, rxquantr409_done1254, rx406_pos, 0
  rxquantr409_loop1253:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt410_01256
    nqp_push_label $P11, alt410_11267
    nqp_push_label $P11, alt410_21269
    nqp_push_label $P11, alt410_31271
    nqp_push_label $P11, alt410_41273
    nqp_rxmark rx406_bstack, alt410_end1255, -1, 0
    rx406_cur."!alt"(rx406_pos, "alt_nfa__17_1360623853.269", $P11)
    goto rx406_fail1245
  alt410_01256:
    .const 'Sub' $P5001 = 'cuid_94_1360623852.546' 
    capture_lex $P5001
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!pos", rx406_pos
    $P11 = rx406_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx406_curclass, "$!pos"
    lt $I11, 0, rx406_fail1245
    goto alt410_end1255
  alt410_11267:
    add $I11, rx406_pos, 1
    gt $I11, rx406_eos, rx406_fail1245
    substr $S10, rx406_tgt, rx406_pos, 1
    ne $S10, ucs4:"=", rx406_fail1245
    add rx406_pos, 1
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!pos", rx406_pos
    $P11 = rx406_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx406_curclass, "$!pos"
    lt $I11, 0, rx406_fail1245
    nqp_rxmark rx406_bstack, rxsubrule413_pass1268, -1, 0
  rxsubrule413_pass1268:
    rx406_cstack = rx406_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx406_pos, $P11, rx406_curclass, "$!pos"
    goto alt410_end1255
  alt410_21269:
    add $I11, rx406_pos, 1
    gt $I11, rx406_eos, rx406_fail1245
    substr $S10, rx406_tgt, rx406_pos, 1
    ne $S10, ucs4:":", rx406_fail1245
    add rx406_pos, 1
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!pos", rx406_pos
    $P11 = rx406_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx406_curclass, "$!pos"
    lt $I11, 0, rx406_fail1245
    nqp_rxmark rx406_bstack, rxsubrule414_pass1270, -1, 0
  rxsubrule414_pass1270:
    rx406_cstack = rx406_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx406_pos, $P11, rx406_curclass, "$!pos"
    goto alt410_end1255
  alt410_31271:
    add $I11, rx406_pos, 1
    gt $I11, rx406_eos, rx406_fail1245
    substr $S10, rx406_tgt, rx406_pos, 1
    ne $S10, ucs4:"(", rx406_fail1245
    add rx406_pos, 1
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!pos", rx406_pos
    $P11 = rx406_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx406_curclass, "$!pos"
    lt $I11, 0, rx406_fail1245
    nqp_rxmark rx406_bstack, rxsubrule415_pass1272, -1, 0
  rxsubrule415_pass1272:
    rx406_cstack = rx406_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx406_pos, $P11, rx406_curclass, "$!pos"
    add $I11, rx406_pos, 1
    gt $I11, rx406_eos, rx406_fail1245
    substr $S10, rx406_tgt, rx406_pos, 1
    ne $S10, ucs4:")", rx406_fail1245
    add rx406_pos, 1
    goto alt410_end1255
  alt410_41273:
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!pos", rx406_pos
    $P11 = rx406_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx406_curclass, "$!pos"
    lt $I11, 0, rx406_fail1245
    repr_get_attr_int rx406_pos, $P11, rx406_curclass, "$!pos"
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!pos", rx406_pos
    $P11 = rx406_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx406_curclass, "$!pos"
    lt $I11, 0, rx406_fail1245
    nqp_rxmark rx406_bstack, rxsubrule417_pass1275, -1, 0
  rxsubrule417_pass1275:
    rx406_cstack = rx406_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx406_pos, $P11, rx406_curclass, "$!pos"
    goto alt410_end1255
  alt410_end1255:
    nqp_rxpeek $I19, rx406_bstack, rxquantr409_done1254
    inc $I19
    inc $I19
    set rx406_rep, rx406_bstack[$I19]
    nqp_rxcommit rx406_bstack, rxquantr409_done1254
    inc rx406_rep
  rxquantr409_done1254:
    rx406_cur."!cursor_pass"(rx406_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx406_cur)
  rx406_restart1244:
    repr_get_attr_obj rx406_cstack, rx406_cur, rx406_curclass, "$!cstack"
  rx406_fail1245:
    unless rx406_bstack, rx406_done1243
    pop $I19, rx406_bstack
    if_null rx406_cstack, rx406_cstack_done1248
    unless rx406_cstack, rx406_cstack_done1248
    dec $I19
    set $P11, rx406_cstack[$I19]
  rx406_cstack_done1248:
    pop rx406_rep, rx406_bstack
    pop rx406_pos, rx406_bstack
    pop $I19, rx406_bstack
    lt rx406_pos, -1, rx406_done1243
    lt rx406_pos, 0, rx406_fail1245
    eq $I19, 0, rx406_fail1245
    nqp_islist $I20, rx406_cstack
    unless $I20, rx406_jump1246
    elements $I18, rx406_bstack
    le $I18, 0, rx406_cut1247
    dec $I18
    set $I18, rx406_bstack[$I18]
  rx406_cut1247:
    assign rx406_cstack, $I18
  rx406_jump1246:
    jump $I19
  rx406_done1243:
    rx406_cur."!cursor_fail"()
    .return (rx406_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_94_1360623852.546") :anon :lex :outer("cuid_93_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx411_start
    .local string rx411_tgt
    .local int rx411_pos
    .local int rx411_off
    .local int rx411_eos
    .local int rx411_rep
    .local pmc rx411_cur
    .local pmc rx411_curclass
    .local pmc rx411_bstack
    .local pmc rx411_cstack
    rx411_start = self."!cursor_start_all"()
    set rx411_cur, rx411_start[0]
    set rx411_tgt, rx411_start[1]
    set rx411_pos, rx411_start[2]
    set rx411_curclass, rx411_start[3]
    set rx411_bstack, rx411_start[4]
    set $I19, rx411_start[5]
    store_lex unicode:"$\x{a2}", rx411_cur
    length rx411_eos, rx411_tgt
    eq $I19, 1, rx411_restart1259
    gt rx411_pos, rx411_eos, rx411_fail1260
    repr_get_attr_int $I11, self, rx411_curclass, "$!from"
    ne $I11, -1, rxscan412_done1266
    goto rxscan412_scan1265
  rxscan412_loop1264:
    inc rx411_pos
    gt rx411_pos, rx411_eos, rx411_fail1260
    repr_bind_attr_int rx411_cur, rx411_curclass, "$!from", rx411_pos
  rxscan412_scan1265:
    nqp_rxmark rx411_bstack, rxscan412_loop1264, rx411_pos, 0
  rxscan412_done1266:
    add $I11, rx411_pos, 1
    gt $I11, rx411_eos, rx411_fail1260
    substr $S10, rx411_tgt, rx411_pos, 1
    ne $S10, ucs4:">", rx411_fail1260
    add rx411_pos, 1
    rx411_cur."!cursor_pass"(rx411_pos, 'backtrack'=>1)
    .return (rx411_cur)
  rx411_restart1259:
    repr_get_attr_obj rx411_cstack, rx411_cur, rx411_curclass, "$!cstack"
  rx411_fail1260:
    unless rx411_bstack, rx411_done1258
    pop $I19, rx411_bstack
    if_null rx411_cstack, rx411_cstack_done1263
    unless rx411_cstack, rx411_cstack_done1263
    dec $I19
    set $P11, rx411_cstack[$I19]
  rx411_cstack_done1263:
    pop rx411_rep, rx411_bstack
    pop rx411_pos, rx411_bstack
    pop $I19, rx411_bstack
    lt rx411_pos, -1, rx411_done1258
    lt rx411_pos, 0, rx411_fail1260
    eq $I19, 0, rx411_fail1260
    nqp_islist $I20, rx411_cstack
    unless $I20, rx411_jump1261
    elements $I18, rx411_bstack
    le $I18, 0, rx411_cut1262
    dec $I18
    set $I18, rx411_bstack[$I18]
  rx411_cut1262:
    assign rx411_cstack, $I18
  rx411_jump1261:
    jump $I19
  rx411_done1258:
    rx411_cur."!cursor_fail"()
    .return (rx411_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<[>" :subid("cuid_95_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 271
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_96_1360623852.546' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx418_start
    .local string rx418_tgt
    .local int rx418_pos
    .local int rx418_off
    .local int rx418_eos
    .local int rx418_rep
    .local pmc rx418_cur
    .local pmc rx418_curclass
    .local pmc rx418_bstack
    .local pmc rx418_cstack
    rx418_start = self."!cursor_start_all"()
    set rx418_cur, rx418_start[0]
    set rx418_tgt, rx418_start[1]
    set rx418_pos, rx418_start[2]
    set rx418_curclass, rx418_start[3]
    set rx418_bstack, rx418_start[4]
    set $I19, rx418_start[5]
    store_lex unicode:"$\x{a2}", rx418_cur
    length rx418_eos, rx418_tgt
    eq $I19, 1, rx418_restart1278
    gt rx418_pos, rx418_eos, rx418_fail1279
    repr_get_attr_int $I11, self, rx418_curclass, "$!from"
    ne $I11, -1, rxscan419_done1285
    goto rxscan419_scan1284
  rxscan419_loop1283:
    inc rx418_pos
    gt rx418_pos, rx418_eos, rx418_fail1279
    repr_bind_attr_int rx418_cur, rx418_curclass, "$!from", rx418_pos
  rxscan419_scan1284:
    nqp_rxmark rx418_bstack, rxscan419_loop1283, rx418_pos, 0
  rxscan419_done1285:
    .const 'Sub' $P5001 = 'cuid_96_1360623852.546' 
    capture_lex $P5001
    repr_bind_attr_int rx418_cur, rx418_curclass, "$!pos", rx418_pos
    $P11 = rx418_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx418_curclass, "$!pos"
    lt $I11, 0, rx418_fail1279
    nqp_rxmark rx418_bstack, rxquantr423_done1302, -1, 0
  rxquantr423_loop1301:
    repr_bind_attr_int rx418_cur, rx418_curclass, "$!pos", rx418_pos
    $P11 = rx418_cur."cclass_elem"()
    repr_get_attr_int $I11, $P11, rx418_curclass, "$!pos"
    lt $I11, 0, rx418_fail1279
    goto rxsubrule424_pass1303
  rxsubrule424_back1304:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx418_curclass, "$!pos"
    lt $I11, 0, rx418_fail1279
  rxsubrule424_pass1303:
    rx418_cstack = rx418_cur."!cursor_capture"($P11, "cclass_elem")
    set_addr $I11, rxsubrule424_back1304
    push rx418_bstack, $I11
    push rx418_bstack, 0
    push rx418_bstack, rx418_pos
    elements $I11, rx418_cstack
    push rx418_bstack, $I11
    repr_get_attr_int rx418_pos, $P11, rx418_curclass, "$!pos"
    nqp_rxpeek $I19, rx418_bstack, rxquantr423_done1302
    inc $I19
    inc $I19
    set rx418_rep, rx418_bstack[$I19]
    nqp_rxcommit rx418_bstack, rxquantr423_done1302
    inc rx418_rep
    nqp_rxmark rx418_bstack, rxquantr423_done1302, rx418_pos, rx418_rep
    goto rxquantr423_loop1301
  rxquantr423_done1302:
    rx418_cur."!cursor_pass"(rx418_pos, "assertion:sym<[>", 'backtrack'=>1)
    .return (rx418_cur)
  rx418_restart1278:
    repr_get_attr_obj rx418_cstack, rx418_cur, rx418_curclass, "$!cstack"
  rx418_fail1279:
    unless rx418_bstack, rx418_done1277
    pop $I19, rx418_bstack
    if_null rx418_cstack, rx418_cstack_done1282
    unless rx418_cstack, rx418_cstack_done1282
    dec $I19
    set $P11, rx418_cstack[$I19]
  rx418_cstack_done1282:
    pop rx418_rep, rx418_bstack
    pop rx418_pos, rx418_bstack
    pop $I19, rx418_bstack
    lt rx418_pos, -1, rx418_done1277
    lt rx418_pos, 0, rx418_fail1279
    eq $I19, 0, rx418_fail1279
    nqp_islist $I20, rx418_cstack
    unless $I20, rx418_jump1280
    elements $I18, rx418_bstack
    le $I18, 0, rx418_cut1281
    dec $I18
    set $I18, rx418_bstack[$I18]
  rx418_cut1281:
    assign rx418_cstack, $I18
  rx418_jump1280:
    jump $I19
  rx418_done1277:
    rx418_cur."!cursor_fail"()
    .return (rx418_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_96_1360623852.546") :anon :lex :outer("cuid_95_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx420_start
    .local string rx420_tgt
    .local int rx420_pos
    .local int rx420_off
    .local int rx420_eos
    .local int rx420_rep
    .local pmc rx420_cur
    .local pmc rx420_curclass
    .local pmc rx420_bstack
    .local pmc rx420_cstack
    rx420_start = self."!cursor_start_all"()
    set rx420_cur, rx420_start[0]
    set rx420_tgt, rx420_start[1]
    set rx420_pos, rx420_start[2]
    set rx420_curclass, rx420_start[3]
    set rx420_bstack, rx420_start[4]
    set $I19, rx420_start[5]
    store_lex unicode:"$\x{a2}", rx420_cur
    length rx420_eos, rx420_tgt
    eq $I19, 1, rx420_restart1288
    gt rx420_pos, rx420_eos, rx420_fail1289
    repr_get_attr_int $I11, self, rx420_curclass, "$!from"
    ne $I11, -1, rxscan421_done1295
    goto rxscan421_scan1294
  rxscan421_loop1293:
    inc rx420_pos
    gt rx420_pos, rx420_eos, rx420_fail1289
    repr_bind_attr_int rx420_cur, rx420_curclass, "$!from", rx420_pos
  rxscan421_scan1294:
    nqp_rxmark rx420_bstack, rxscan421_loop1293, rx420_pos, 0
  rxscan421_done1295:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt422_01297
    nqp_push_label $P11, alt422_11298
    nqp_push_label $P11, alt422_21299
    nqp_push_label $P11, alt422_31300
    nqp_rxmark rx420_bstack, alt422_end1296, -1, 0
    rx420_cur."!alt"(rx420_pos, "alt_nfa__18_1360623853.276", $P11)
    goto rx420_fail1289
  alt422_01297:
    add $I11, rx420_pos, 1
    gt $I11, rx420_eos, rx420_fail1289
    substr $S10, rx420_tgt, rx420_pos, 1
    ne $S10, ucs4:"[", rx420_fail1289
    add rx420_pos, 1
    goto alt422_end1296
  alt422_11298:
    add $I11, rx420_pos, 1
    gt $I11, rx420_eos, rx420_fail1289
    substr $S10, rx420_tgt, rx420_pos, 1
    ne $S10, ucs4:"+", rx420_fail1289
    add rx420_pos, 1
    goto alt422_end1296
  alt422_21299:
    add $I11, rx420_pos, 1
    gt $I11, rx420_eos, rx420_fail1289
    substr $S10, rx420_tgt, rx420_pos, 1
    ne $S10, ucs4:"-", rx420_fail1289
    add rx420_pos, 1
    goto alt422_end1296
  alt422_31300:
    add $I11, rx420_pos, 1
    gt $I11, rx420_eos, rx420_fail1289
    substr $S10, rx420_tgt, rx420_pos, 1
    ne $S10, ucs4:":", rx420_fail1289
    add rx420_pos, 1
    goto alt422_end1296
  alt422_end1296:
    rx420_cur."!cursor_pass"(rx420_pos, 'backtrack'=>1)
    .return (rx420_cur)
  rx420_restart1288:
    repr_get_attr_obj rx420_cstack, rx420_cur, rx420_curclass, "$!cstack"
  rx420_fail1289:
    unless rx420_bstack, rx420_done1287
    pop $I19, rx420_bstack
    if_null rx420_cstack, rx420_cstack_done1292
    unless rx420_cstack, rx420_cstack_done1292
    dec $I19
    set $P11, rx420_cstack[$I19]
  rx420_cstack_done1292:
    pop rx420_rep, rx420_bstack
    pop rx420_pos, rx420_bstack
    pop $I19, rx420_bstack
    lt rx420_pos, -1, rx420_done1287
    lt rx420_pos, 0, rx420_fail1289
    eq $I19, 0, rx420_fail1289
    nqp_islist $I20, rx420_cstack
    unless $I20, rx420_jump1290
    elements $I18, rx420_bstack
    le $I18, 0, rx420_cut1291
    dec $I18
    set $I18, rx420_bstack[$I18]
  rx420_cut1291:
    assign rx420_cstack, $I18
  rx420_jump1290:
    jump $I19
  rx420_done1287:
    rx420_cur."!cursor_fail"()
    .return (rx420_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_elem" :subid("cuid_97_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 273
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_103_1360623852.546' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx425_start
    .local string rx425_tgt
    .local int rx425_pos
    .local int rx425_off
    .local int rx425_eos
    .local int rx425_rep
    .local pmc rx425_cur
    .local pmc rx425_curclass
    .local pmc rx425_bstack
    .local pmc rx425_cstack
    rx425_start = self."!cursor_start_all"()
    set rx425_cur, rx425_start[0]
    set rx425_tgt, rx425_start[1]
    set rx425_pos, rx425_start[2]
    set rx425_curclass, rx425_start[3]
    set rx425_bstack, rx425_start[4]
    set $I19, rx425_start[5]
    store_lex unicode:"$\x{a2}", rx425_cur
    length rx425_eos, rx425_tgt
    eq $I19, 1, rx425_restart1307
    gt rx425_pos, rx425_eos, rx425_fail1308
    repr_get_attr_int $I11, self, rx425_curclass, "$!from"
    ne $I11, -1, rxscan426_done1314
    goto rxscan426_scan1313
  rxscan426_loop1312:
    inc rx425_pos
    gt rx425_pos, rx425_eos, rx425_fail1308
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!from", rx425_pos
  rxscan426_scan1313:
    nqp_rxmark rx425_bstack, rxscan426_loop1312, rx425_pos, 0
  rxscan426_done1314:
    nqp_rxmark rx425_bstack, rxcap427_fail1316, rx425_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt428_01318
    nqp_push_label $P11, alt428_11319
    nqp_push_label $P11, alt428_21320
    nqp_rxmark rx425_bstack, alt428_end1317, -1, 0
    rx425_cur."!alt"(rx425_pos, "alt_nfa__19_1360623853.334", $P11)
    goto rx425_fail1308
  alt428_01318:
    add $I11, rx425_pos, 1
    gt $I11, rx425_eos, rx425_fail1308
    substr $S10, rx425_tgt, rx425_pos, 1
    ne $S10, ucs4:"+", rx425_fail1308
    add rx425_pos, 1
    goto alt428_end1317
  alt428_11319:
    add $I11, rx425_pos, 1
    gt $I11, rx425_eos, rx425_fail1308
    substr $S10, rx425_tgt, rx425_pos, 1
    ne $S10, ucs4:"-", rx425_fail1308
    add rx425_pos, 1
    goto alt428_end1317
  alt428_21320:
    goto alt428_end1317
  alt428_end1317:
    nqp_rxcommit rx425_bstack, alt428_end1317
    nqp_rxpeek $I19, rx425_bstack, rxcap427_fail1316
    inc $I19
    set $I11, rx425_bstack[$I19]
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!pos", rx425_pos
    $P11 = rx425_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx425_pos)
    rx425_cstack = rx425_cur."!cursor_capture"($P11, "sign")
    goto rxcap427_done1315
  rxcap427_fail1316:
    goto rx425_fail1308
  rxcap427_done1315:
    nqp_rxmark rx425_bstack, rxquantr430_done1323, rx425_pos, 0
  rxquantr430_loop1322:
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!pos", rx425_pos
    $P11 = rx425_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx425_curclass, "$!pos"
    lt $I11, 0, rx425_fail1308
    goto rxsubrule431_pass1324
  rxsubrule431_back1325:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx425_curclass, "$!pos"
    lt $I11, 0, rx425_fail1308
  rxsubrule431_pass1324:
    rx425_cstack = rx425_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule431_back1325
    push rx425_bstack, $I11
    push rx425_bstack, 0
    push rx425_bstack, rx425_pos
    elements $I11, rx425_cstack
    push rx425_bstack, $I11
    repr_get_attr_int rx425_pos, $P11, rx425_curclass, "$!pos"
    nqp_rxpeek $I19, rx425_bstack, rxquantr430_done1323
    inc $I19
    inc $I19
    set rx425_rep, rx425_bstack[$I19]
    nqp_rxcommit rx425_bstack, rxquantr430_done1323
    inc rx425_rep
  rxquantr430_done1323:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt432_01327
    nqp_push_label $P11, alt432_11426
    nqp_push_label $P11, alt432_21431
    nqp_rxmark rx425_bstack, alt432_end1326, -1, 0
    rx425_cur."!alt"(rx425_pos, "alt_nfa__21_1360623853.334", $P11)
    goto rx425_fail1308
  alt432_01327:
    add $I11, rx425_pos, 1
    gt $I11, rx425_eos, rx425_fail1308
    substr $S10, rx425_tgt, rx425_pos, 1
    ne $S10, ucs4:"[", rx425_fail1308
    add rx425_pos, 1
    nqp_rxmark rx425_bstack, rxquantr433_done1329, rx425_pos, 0
  rxquantr433_loop1328:
    .const 'Sub' $P5001 = 'cuid_103_1360623852.546' 
    capture_lex $P5001
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!pos", rx425_pos
    $P11 = rx425_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx425_curclass, "$!pos"
    lt $I11, 0, rx425_fail1308
    goto rxsubrule464_pass1422
  rxsubrule464_back1423:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx425_curclass, "$!pos"
    lt $I11, 0, rx425_fail1308
  rxsubrule464_pass1422:
    rx425_cstack = rx425_cur."!cursor_capture"($P11, "charspec")
    set_addr $I11, rxsubrule464_back1423
    push rx425_bstack, $I11
    push rx425_bstack, 0
    push rx425_bstack, rx425_pos
    elements $I11, rx425_cstack
    push rx425_bstack, $I11
    repr_get_attr_int rx425_pos, $P11, rx425_curclass, "$!pos"
    nqp_rxpeek $I19, rx425_bstack, rxquantr433_done1329
    inc $I19
    inc $I19
    set rx425_rep, rx425_bstack[$I19]
    nqp_rxcommit rx425_bstack, rxquantr433_done1329
    inc rx425_rep
    nqp_rxmark rx425_bstack, rxquantr433_done1329, rx425_pos, rx425_rep
    goto rxquantr433_loop1328
  rxquantr433_done1329:
    nqp_rxmark rx425_bstack, rxquantr465_done1425, rx425_pos, 0
  rxquantr465_loop1424:
    ge rx425_pos, rx425_eos, rx425_fail1308
    is_cclass $I11, .CCLASS_WHITESPACE, rx425_tgt, rx425_pos
    unless $I11, rx425_fail1308
    add rx425_pos, 1
    nqp_rxpeek $I19, rx425_bstack, rxquantr465_done1425
    inc $I19
    inc $I19
    set rx425_rep, rx425_bstack[$I19]
    nqp_rxcommit rx425_bstack, rxquantr465_done1425
    inc rx425_rep
    nqp_rxmark rx425_bstack, rxquantr465_done1425, rx425_pos, rx425_rep
    goto rxquantr465_loop1424
  rxquantr465_done1425:
    add $I11, rx425_pos, 1
    gt $I11, rx425_eos, rx425_fail1308
    substr $S10, rx425_tgt, rx425_pos, 1
    ne $S10, ucs4:"]", rx425_fail1308
    add rx425_pos, 1
    goto alt432_end1326
  alt432_11426:
    nqp_rxmark rx425_bstack, rxcap466_fail1428, rx425_pos, 0
    nqp_rxmark rx425_bstack, rxquantr467_done1430, -1, 0
  rxquantr467_loop1429:
    ge rx425_pos, rx425_eos, rx425_fail1308
    is_cclass $I11, .CCLASS_WORD, rx425_tgt, rx425_pos
    unless $I11, rx425_fail1308
    add rx425_pos, 1
    nqp_rxpeek $I19, rx425_bstack, rxquantr467_done1430
    inc $I19
    inc $I19
    set rx425_rep, rx425_bstack[$I19]
    nqp_rxcommit rx425_bstack, rxquantr467_done1430
    inc rx425_rep
    nqp_rxmark rx425_bstack, rxquantr467_done1430, rx425_pos, rx425_rep
    goto rxquantr467_loop1429
  rxquantr467_done1430:
    nqp_rxpeek $I19, rx425_bstack, rxcap466_fail1428
    inc $I19
    set $I11, rx425_bstack[$I19]
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!pos", rx425_pos
    $P11 = rx425_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx425_pos)
    rx425_cstack = rx425_cur."!cursor_capture"($P11, "name")
    goto rxcap466_done1427
  rxcap466_fail1428:
    goto rx425_fail1308
  rxcap466_done1427:
    goto alt432_end1326
  alt432_21431:
    add $I11, rx425_pos, 1
    gt $I11, rx425_eos, rx425_fail1308
    substr $S10, rx425_tgt, rx425_pos, 1
    ne $S10, ucs4:":", rx425_fail1308
    add rx425_pos, 1
    nqp_rxmark rx425_bstack, rxcap468_fail1433, rx425_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt469_01435
    nqp_push_label $P11, alt469_11436
    nqp_rxmark rx425_bstack, alt469_end1434, -1, 0
    rx425_cur."!alt"(rx425_pos, "alt_nfa__20_1360623853.334", $P11)
    goto rx425_fail1308
  alt469_01435:
    add $I11, rx425_pos, 1
    gt $I11, rx425_eos, rx425_fail1308
    substr $S10, rx425_tgt, rx425_pos, 1
    ne $S10, ucs4:"!", rx425_fail1308
    add rx425_pos, 1
    goto alt469_end1434
  alt469_11436:
    goto alt469_end1434
  alt469_end1434:
    nqp_rxcommit rx425_bstack, alt469_end1434
    nqp_rxpeek $I19, rx425_bstack, rxcap468_fail1433
    inc $I19
    set $I11, rx425_bstack[$I19]
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!pos", rx425_pos
    $P11 = rx425_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx425_pos)
    rx425_cstack = rx425_cur."!cursor_capture"($P11, "invert")
    goto rxcap468_done1432
  rxcap468_fail1433:
    goto rx425_fail1308
  rxcap468_done1432:
    nqp_rxmark rx425_bstack, rxcap471_fail1439, rx425_pos, 0
    nqp_rxmark rx425_bstack, rxquantr472_done1441, -1, 0
  rxquantr472_loop1440:
    ge rx425_pos, rx425_eos, rx425_fail1308
    is_cclass $I11, .CCLASS_WORD, rx425_tgt, rx425_pos
    unless $I11, rx425_fail1308
    add rx425_pos, 1
    nqp_rxpeek $I19, rx425_bstack, rxquantr472_done1441
    inc $I19
    inc $I19
    set rx425_rep, rx425_bstack[$I19]
    nqp_rxcommit rx425_bstack, rxquantr472_done1441
    inc rx425_rep
    nqp_rxmark rx425_bstack, rxquantr472_done1441, rx425_pos, rx425_rep
    goto rxquantr472_loop1440
  rxquantr472_done1441:
    nqp_rxpeek $I19, rx425_bstack, rxcap471_fail1439
    inc $I19
    set $I11, rx425_bstack[$I19]
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!pos", rx425_pos
    $P11 = rx425_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx425_pos)
    rx425_cstack = rx425_cur."!cursor_capture"($P11, "uniprop")
    goto rxcap471_done1438
  rxcap471_fail1439:
    goto rx425_fail1308
  rxcap471_done1438:
    goto alt432_end1326
  alt432_end1326:
    nqp_rxcommit rx425_bstack, alt432_end1326
    nqp_rxmark rx425_bstack, rxquantr473_done1443, rx425_pos, 0
  rxquantr473_loop1442:
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!pos", rx425_pos
    $P11 = rx425_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx425_curclass, "$!pos"
    lt $I11, 0, rx425_fail1308
    goto rxsubrule474_pass1444
  rxsubrule474_back1445:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx425_curclass, "$!pos"
    lt $I11, 0, rx425_fail1308
  rxsubrule474_pass1444:
    rx425_cstack = rx425_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule474_back1445
    push rx425_bstack, $I11
    push rx425_bstack, 0
    push rx425_bstack, rx425_pos
    elements $I11, rx425_cstack
    push rx425_bstack, $I11
    repr_get_attr_int rx425_pos, $P11, rx425_curclass, "$!pos"
    nqp_rxpeek $I19, rx425_bstack, rxquantr473_done1443
    inc $I19
    inc $I19
    set rx425_rep, rx425_bstack[$I19]
    nqp_rxcommit rx425_bstack, rxquantr473_done1443
    inc rx425_rep
  rxquantr473_done1443:
    rx425_cur."!cursor_pass"(rx425_pos, "cclass_elem", 'backtrack'=>1)
    .return (rx425_cur)
  rx425_restart1307:
    repr_get_attr_obj rx425_cstack, rx425_cur, rx425_curclass, "$!cstack"
  rx425_fail1308:
    unless rx425_bstack, rx425_done1306
    pop $I19, rx425_bstack
    if_null rx425_cstack, rx425_cstack_done1311
    unless rx425_cstack, rx425_cstack_done1311
    dec $I19
    set $P11, rx425_cstack[$I19]
  rx425_cstack_done1311:
    pop rx425_rep, rx425_bstack
    pop rx425_pos, rx425_bstack
    pop $I19, rx425_bstack
    lt rx425_pos, -1, rx425_done1306
    lt rx425_pos, 0, rx425_fail1308
    eq $I19, 0, rx425_fail1308
    nqp_islist $I20, rx425_cstack
    unless $I20, rx425_jump1309
    elements $I18, rx425_bstack
    le $I18, 0, rx425_cut1310
    dec $I18
    set $I18, rx425_bstack[$I18]
  rx425_cut1310:
    assign rx425_cstack, $I18
  rx425_jump1309:
    jump $I19
  rx425_done1306:
    rx425_cur."!cursor_fail"()
    .return (rx425_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_103_1360623852.546") :anon :lex :outer("cuid_97_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .const 'Sub' $P5004 = 'cuid_98_1360623852.546' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_100_1360623852.546' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_102_1360623852.546' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx434_start
    .local string rx434_tgt
    .local int rx434_pos
    .local int rx434_off
    .local int rx434_eos
    .local int rx434_rep
    .local pmc rx434_cur
    .local pmc rx434_curclass
    .local pmc rx434_bstack
    .local pmc rx434_cstack
    rx434_start = self."!cursor_start_all"()
    set rx434_cur, rx434_start[0]
    set rx434_tgt, rx434_start[1]
    set rx434_pos, rx434_start[2]
    set rx434_curclass, rx434_start[3]
    set rx434_bstack, rx434_start[4]
    set $I19, rx434_start[5]
    store_lex unicode:"$\x{a2}", rx434_cur
    length rx434_eos, rx434_tgt
    eq $I19, 1, rx434_restart1332
    gt rx434_pos, rx434_eos, rx434_fail1333
    repr_get_attr_int $I11, self, rx434_curclass, "$!from"
    ne $I11, -1, rxscan435_done1339
    goto rxscan435_scan1338
  rxscan435_loop1337:
    inc rx434_pos
    gt rx434_pos, rx434_eos, rx434_fail1333
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!from", rx434_pos
  rxscan435_scan1338:
    nqp_rxmark rx434_bstack, rxscan435_loop1337, rx434_pos, 0
  rxscan435_done1339:
  alt436_01341:
    nqp_rxmark rx434_bstack, alt436_11357, rx434_pos, 0
    nqp_rxmark rx434_bstack, rxquantr437_done1343, rx434_pos, 0
  rxquantr437_loop1342:
    ge rx434_pos, rx434_eos, rx434_fail1333
    is_cclass $I11, .CCLASS_WHITESPACE, rx434_tgt, rx434_pos
    unless $I11, rx434_fail1333
    add rx434_pos, 1
    nqp_rxpeek $I19, rx434_bstack, rxquantr437_done1343
    inc $I19
    inc $I19
    set rx434_rep, rx434_bstack[$I19]
    nqp_rxcommit rx434_bstack, rxquantr437_done1343
    inc rx434_rep
    nqp_rxmark rx434_bstack, rxquantr437_done1343, rx434_pos, rx434_rep
    goto rxquantr437_loop1342
  rxquantr437_done1343:
    add $I11, rx434_pos, 1
    gt $I11, rx434_eos, rx434_fail1333
    substr $S10, rx434_tgt, rx434_pos, 1
    ne $S10, ucs4:"-", rx434_fail1333
    add rx434_pos, 1
    .const 'Sub' $P5001 = 'cuid_98_1360623852.546' 
    capture_lex $P5001
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    ge $I11, 0, rx434_fail1333
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."obs"("- as character range", ".. for range, for explicit - in character class, escape it or place as last thing")
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1333
    repr_get_attr_int rx434_pos, $P11, rx434_curclass, "$!pos"
    goto alt436_end1340
  alt436_11357:
    nqp_rxmark rx434_bstack, rxquantr442_done1359, rx434_pos, 0
  rxquantr442_loop1358:
    ge rx434_pos, rx434_eos, rx434_fail1333
    is_cclass $I11, .CCLASS_WHITESPACE, rx434_tgt, rx434_pos
    unless $I11, rx434_fail1333
    add rx434_pos, 1
    nqp_rxpeek $I19, rx434_bstack, rxquantr442_done1359
    inc $I19
    inc $I19
    set rx434_rep, rx434_bstack[$I19]
    nqp_rxcommit rx434_bstack, rxquantr442_done1359
    inc rx434_rep
    nqp_rxmark rx434_bstack, rxquantr442_done1359, rx434_pos, rx434_rep
    goto rxquantr442_loop1358
  rxquantr442_done1359:
    .const 'Sub' $P5002 = 'cuid_100_1360623852.546' 
    capture_lex $P5002
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur.$P5002()
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1333
    nqp_rxmark rx434_bstack, rxsubrule451_pass1387, -1, 0
  rxsubrule451_pass1387:
    rx434_cstack = rx434_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx434_pos, $P11, rx434_curclass, "$!pos"
    nqp_rxmark rx434_bstack, rxquantr452_done1389, rx434_pos, 0
  rxquantr452_loop1388:
    nqp_rxmark rx434_bstack, rxquantr453_done1391, rx434_pos, 0
  rxquantr453_loop1390:
    ge rx434_pos, rx434_eos, rx434_fail1333
    is_cclass $I11, .CCLASS_WHITESPACE, rx434_tgt, rx434_pos
    unless $I11, rx434_fail1333
    add rx434_pos, 1
    nqp_rxpeek $I19, rx434_bstack, rxquantr453_done1391
    inc $I19
    inc $I19
    set rx434_rep, rx434_bstack[$I19]
    nqp_rxcommit rx434_bstack, rxquantr453_done1391
    inc rx434_rep
    nqp_rxmark rx434_bstack, rxquantr453_done1391, rx434_pos, rx434_rep
    goto rxquantr453_loop1390
  rxquantr453_done1391:
    add $I11, rx434_pos, 2
    gt $I11, rx434_eos, rx434_fail1333
    substr $S10, rx434_tgt, rx434_pos, 2
    ne $S10, ucs4:"..", rx434_fail1333
    add rx434_pos, 2
    nqp_rxmark rx434_bstack, rxquantr454_done1393, rx434_pos, 0
  rxquantr454_loop1392:
    ge rx434_pos, rx434_eos, rx434_fail1333
    is_cclass $I11, .CCLASS_WHITESPACE, rx434_tgt, rx434_pos
    unless $I11, rx434_fail1333
    add rx434_pos, 1
    nqp_rxpeek $I19, rx434_bstack, rxquantr454_done1393
    inc $I19
    inc $I19
    set rx434_rep, rx434_bstack[$I19]
    nqp_rxcommit rx434_bstack, rxquantr454_done1393
    inc rx434_rep
    nqp_rxmark rx434_bstack, rxquantr454_done1393, rx434_pos, rx434_rep
    goto rxquantr454_loop1392
  rxquantr454_done1393:
    .const 'Sub' $P5003 = 'cuid_102_1360623852.546' 
    capture_lex $P5003
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur.$P5003()
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1333
    nqp_rxmark rx434_bstack, rxsubrule463_pass1421, -1, 0
  rxsubrule463_pass1421:
    rx434_cstack = rx434_cur."!cursor_capture"($P11, "1")
    repr_get_attr_int rx434_pos, $P11, rx434_curclass, "$!pos"
    nqp_rxpeek $I19, rx434_bstack, rxquantr452_done1389
    inc $I19
    inc $I19
    set rx434_rep, rx434_bstack[$I19]
    nqp_rxcommit rx434_bstack, rxquantr452_done1389
    inc rx434_rep
  rxquantr452_done1389:
  alt436_end1340:
    rx434_cur."!cursor_pass"(rx434_pos, 'backtrack'=>1)
    .return (rx434_cur)
  rx434_restart1332:
    repr_get_attr_obj rx434_cstack, rx434_cur, rx434_curclass, "$!cstack"
  rx434_fail1333:
    unless rx434_bstack, rx434_done1331
    pop $I19, rx434_bstack
    if_null rx434_cstack, rx434_cstack_done1336
    unless rx434_cstack, rx434_cstack_done1336
    dec $I19
    set $P11, rx434_cstack[$I19]
  rx434_cstack_done1336:
    pop rx434_rep, rx434_bstack
    pop rx434_pos, rx434_bstack
    pop $I19, rx434_bstack
    lt rx434_pos, -1, rx434_done1331
    lt rx434_pos, 0, rx434_fail1333
    eq $I19, 0, rx434_fail1333
    nqp_islist $I20, rx434_cstack
    unless $I20, rx434_jump1334
    elements $I18, rx434_bstack
    le $I18, 0, rx434_cut1335
    dec $I18
    set $I18, rx434_bstack[$I18]
  rx434_cut1335:
    assign rx434_cstack, $I18
  rx434_jump1334:
    jump $I19
  rx434_done1331:
    rx434_cur."!cursor_fail"()
    .return (rx434_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_98_1360623852.546") :anon :lex :outer("cuid_103_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx438_start
    .local string rx438_tgt
    .local int rx438_pos
    .local int rx438_off
    .local int rx438_eos
    .local int rx438_rep
    .local pmc rx438_cur
    .local pmc rx438_curclass
    .local pmc rx438_bstack
    .local pmc rx438_cstack
    rx438_start = self."!cursor_start_all"()
    set rx438_cur, rx438_start[0]
    set rx438_tgt, rx438_start[1]
    set rx438_pos, rx438_start[2]
    set rx438_curclass, rx438_start[3]
    set rx438_bstack, rx438_start[4]
    set $I19, rx438_start[5]
    store_lex unicode:"$\x{a2}", rx438_cur
    length rx438_eos, rx438_tgt
    eq $I19, 1, rx438_restart1346
    gt rx438_pos, rx438_eos, rx438_fail1347
    repr_get_attr_int $I11, self, rx438_curclass, "$!from"
    ne $I11, -1, rxscan439_done1353
    goto rxscan439_scan1352
  rxscan439_loop1351:
    inc rx438_pos
    gt rx438_pos, rx438_eos, rx438_fail1347
    repr_bind_attr_int rx438_cur, rx438_curclass, "$!from", rx438_pos
  rxscan439_scan1352:
    nqp_rxmark rx438_bstack, rxscan439_loop1351, rx438_pos, 0
  rxscan439_done1353:
    nqp_rxmark rx438_bstack, rxquantr440_done1355, rx438_pos, 0
  rxquantr440_loop1354:
    ge rx438_pos, rx438_eos, rx438_fail1347
    is_cclass $I11, .CCLASS_WHITESPACE, rx438_tgt, rx438_pos
    unless $I11, rx438_fail1347
    add rx438_pos, 1
    nqp_rxpeek $I19, rx438_bstack, rxquantr440_done1355
    inc $I19
    inc $I19
    set rx438_rep, rx438_bstack[$I19]
    nqp_rxcommit rx438_bstack, rxquantr440_done1355
    inc rx438_rep
    nqp_rxmark rx438_bstack, rxquantr440_done1355, rx438_pos, rx438_rep
    goto rxquantr440_loop1354
  rxquantr440_done1355:
    add $I11, rx438_pos, 1
    gt $I11, rx438_eos, rx438_fail1347
    substr $S10, rx438_tgt, rx438_pos, 1
    ne $S10, ucs4:"]", rx438_fail1347
    add rx438_pos, 1
    rx438_cur."!cursor_pass"(rx438_pos, 'backtrack'=>1)
    .return (rx438_cur)
  rx438_restart1346:
    repr_get_attr_obj rx438_cstack, rx438_cur, rx438_curclass, "$!cstack"
  rx438_fail1347:
    unless rx438_bstack, rx438_done1345
    pop $I19, rx438_bstack
    if_null rx438_cstack, rx438_cstack_done1350
    unless rx438_cstack, rx438_cstack_done1350
    dec $I19
    set $P11, rx438_cstack[$I19]
  rx438_cstack_done1350:
    pop rx438_rep, rx438_bstack
    pop rx438_pos, rx438_bstack
    pop $I19, rx438_bstack
    lt rx438_pos, -1, rx438_done1345
    lt rx438_pos, 0, rx438_fail1347
    eq $I19, 0, rx438_fail1347
    nqp_islist $I20, rx438_cstack
    unless $I20, rx438_jump1348
    elements $I18, rx438_bstack
    le $I18, 0, rx438_cut1349
    dec $I18
    set $I18, rx438_bstack[$I18]
  rx438_cut1349:
    assign rx438_cstack, $I18
  rx438_jump1348:
    jump $I19
  rx438_done1345:
    rx438_cur."!cursor_fail"()
    .return (rx438_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_100_1360623852.546") :anon :lex :outer("cuid_103_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .const 'Sub' $P5002 = 'cuid_99_1360623852.546' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx443_start
    .local string rx443_tgt
    .local int rx443_pos
    .local int rx443_off
    .local int rx443_eos
    .local int rx443_rep
    .local pmc rx443_cur
    .local pmc rx443_curclass
    .local pmc rx443_bstack
    .local pmc rx443_cstack
    rx443_start = self."!cursor_start_all"()
    set rx443_cur, rx443_start[0]
    set rx443_tgt, rx443_start[1]
    set rx443_pos, rx443_start[2]
    set rx443_curclass, rx443_start[3]
    set rx443_bstack, rx443_start[4]
    set $I19, rx443_start[5]
    store_lex unicode:"$\x{a2}", rx443_cur
    length rx443_eos, rx443_tgt
    eq $I19, 1, rx443_restart1362
    gt rx443_pos, rx443_eos, rx443_fail1363
    repr_get_attr_int $I11, self, rx443_curclass, "$!from"
    ne $I11, -1, rxscan444_done1369
    goto rxscan444_scan1368
  rxscan444_loop1367:
    inc rx443_pos
    gt rx443_pos, rx443_eos, rx443_fail1363
    repr_bind_attr_int rx443_cur, rx443_curclass, "$!from", rx443_pos
  rxscan444_scan1368:
    nqp_rxmark rx443_bstack, rxscan444_loop1367, rx443_pos, 0
  rxscan444_done1369:
  alt445_01371:
    nqp_rxmark rx443_bstack, alt445_11373, rx443_pos, 0
    add $I11, rx443_pos, 1
    gt $I11, rx443_eos, rx443_fail1363
    substr $S10, rx443_tgt, rx443_pos, 1
    ne $S10, ucs4:"\\", rx443_fail1363
    add rx443_pos, 1
    repr_bind_attr_int rx443_cur, rx443_curclass, "$!pos", rx443_pos
    $P11 = rx443_cur."backslash"()
    repr_get_attr_int $I11, $P11, rx443_curclass, "$!pos"
    lt $I11, 0, rx443_fail1363
    nqp_rxmark rx443_bstack, rxsubrule446_pass1372, -1, 0
  rxsubrule446_pass1372:
    rx443_cstack = rx443_cur."!cursor_capture"($P11, "backslash")
    repr_get_attr_int rx443_pos, $P11, rx443_curclass, "$!pos"
    goto alt445_end1370
  alt445_11373:
    .const 'Sub' $P5001 = 'cuid_99_1360623852.546' 
    capture_lex $P5001
    repr_bind_attr_int rx443_cur, rx443_curclass, "$!pos", rx443_pos
    $P11 = rx443_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx443_curclass, "$!pos"
    lt $I11, 0, rx443_fail1363
    nqp_rxmark rx443_bstack, rxsubrule450_pass1386, -1, 0
  rxsubrule450_pass1386:
    rx443_cstack = rx443_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx443_pos, $P11, rx443_curclass, "$!pos"
  alt445_end1370:
    rx443_cur."!cursor_pass"(rx443_pos, 'backtrack'=>1)
    .return (rx443_cur)
  rx443_restart1362:
    repr_get_attr_obj rx443_cstack, rx443_cur, rx443_curclass, "$!cstack"
  rx443_fail1363:
    unless rx443_bstack, rx443_done1361
    pop $I19, rx443_bstack
    if_null rx443_cstack, rx443_cstack_done1366
    unless rx443_cstack, rx443_cstack_done1366
    dec $I19
    set $P11, rx443_cstack[$I19]
  rx443_cstack_done1366:
    pop rx443_rep, rx443_bstack
    pop rx443_pos, rx443_bstack
    pop $I19, rx443_bstack
    lt rx443_pos, -1, rx443_done1361
    lt rx443_pos, 0, rx443_fail1363
    eq $I19, 0, rx443_fail1363
    nqp_islist $I20, rx443_cstack
    unless $I20, rx443_jump1364
    elements $I18, rx443_bstack
    le $I18, 0, rx443_cut1365
    dec $I18
    set $I18, rx443_bstack[$I18]
  rx443_cut1365:
    assign rx443_cstack, $I18
  rx443_jump1364:
    jump $I19
  rx443_done1361:
    rx443_cur."!cursor_fail"()
    .return (rx443_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_99_1360623852.546") :anon :lex :outer("cuid_100_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx447_start
    .local string rx447_tgt
    .local int rx447_pos
    .local int rx447_off
    .local int rx447_eos
    .local int rx447_rep
    .local pmc rx447_cur
    .local pmc rx447_curclass
    .local pmc rx447_bstack
    .local pmc rx447_cstack
    rx447_start = self."!cursor_start_all"()
    set rx447_cur, rx447_start[0]
    set rx447_tgt, rx447_start[1]
    set rx447_pos, rx447_start[2]
    set rx447_curclass, rx447_start[3]
    set rx447_bstack, rx447_start[4]
    set $I19, rx447_start[5]
    store_lex unicode:"$\x{a2}", rx447_cur
    length rx447_eos, rx447_tgt
    eq $I19, 1, rx447_restart1376
    gt rx447_pos, rx447_eos, rx447_fail1377
    repr_get_attr_int $I11, self, rx447_curclass, "$!from"
    ne $I11, -1, rxscan448_done1383
    goto rxscan448_scan1382
  rxscan448_loop1381:
    inc rx447_pos
    gt rx447_pos, rx447_eos, rx447_fail1377
    repr_bind_attr_int rx447_cur, rx447_curclass, "$!from", rx447_pos
  rxscan448_scan1382:
    nqp_rxmark rx447_bstack, rxscan448_loop1381, rx447_pos, 0
  rxscan448_done1383:
    nqp_rxmark rx447_bstack, rxconj449_fail1384, rx447_pos, 0
    goto rxconj449_first1385
  rxconj449_fail1384:
    goto rx447_fail1377
  rxconj449_first1385:
    add $I11, rx447_pos, 1
    gt $I11, rx447_eos, rx447_fail1377
    substr $S10, rx447_tgt, rx447_pos, 1
    eq $S10, ucs4:"]", rx447_fail1377
    add rx447_pos, 1
    nqp_rxpeek $I19, rx447_bstack, rxconj449_fail1384
    inc $I19
    set $I11, rx447_bstack[$I19]
    nqp_rxmark rx447_bstack, rxconj449_fail1384, $I11, rx447_pos
    set rx447_pos, $I11
    add $I11, rx447_pos, 1
    gt $I11, rx447_eos, rx447_fail1377
    substr $S10, rx447_tgt, rx447_pos, 1
    eq $S10, ucs4:"\\", rx447_fail1377
    add rx447_pos, 1
    nqp_rxpeek $I19, rx447_bstack, rxconj449_fail1384
    inc $I19
    set $I11, rx447_bstack[$I19]
    inc $I19
    set $I12, rx447_bstack[$I19]
    ne rx447_pos, $I12, rx447_fail1377
    set rx447_pos, $I11
    ge rx447_pos, rx447_eos, rx447_fail1377
    add rx447_pos, 1
    rx447_cur."!cursor_pass"(rx447_pos, 'backtrack'=>1)
    .return (rx447_cur)
  rx447_restart1376:
    repr_get_attr_obj rx447_cstack, rx447_cur, rx447_curclass, "$!cstack"
  rx447_fail1377:
    unless rx447_bstack, rx447_done1375
    pop $I19, rx447_bstack
    if_null rx447_cstack, rx447_cstack_done1380
    unless rx447_cstack, rx447_cstack_done1380
    dec $I19
    set $P11, rx447_cstack[$I19]
  rx447_cstack_done1380:
    pop rx447_rep, rx447_bstack
    pop rx447_pos, rx447_bstack
    pop $I19, rx447_bstack
    lt rx447_pos, -1, rx447_done1375
    lt rx447_pos, 0, rx447_fail1377
    eq $I19, 0, rx447_fail1377
    nqp_islist $I20, rx447_cstack
    unless $I20, rx447_jump1378
    elements $I18, rx447_bstack
    le $I18, 0, rx447_cut1379
    dec $I18
    set $I18, rx447_bstack[$I18]
  rx447_cut1379:
    assign rx447_cstack, $I18
  rx447_jump1378:
    jump $I19
  rx447_done1375:
    rx447_cur."!cursor_fail"()
    .return (rx447_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_102_1360623852.546") :anon :lex :outer("cuid_103_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .const 'Sub' $P5002 = 'cuid_101_1360623852.546' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx455_start
    .local string rx455_tgt
    .local int rx455_pos
    .local int rx455_off
    .local int rx455_eos
    .local int rx455_rep
    .local pmc rx455_cur
    .local pmc rx455_curclass
    .local pmc rx455_bstack
    .local pmc rx455_cstack
    rx455_start = self."!cursor_start_all"()
    set rx455_cur, rx455_start[0]
    set rx455_tgt, rx455_start[1]
    set rx455_pos, rx455_start[2]
    set rx455_curclass, rx455_start[3]
    set rx455_bstack, rx455_start[4]
    set $I19, rx455_start[5]
    store_lex unicode:"$\x{a2}", rx455_cur
    length rx455_eos, rx455_tgt
    eq $I19, 1, rx455_restart1396
    gt rx455_pos, rx455_eos, rx455_fail1397
    repr_get_attr_int $I11, self, rx455_curclass, "$!from"
    ne $I11, -1, rxscan456_done1403
    goto rxscan456_scan1402
  rxscan456_loop1401:
    inc rx455_pos
    gt rx455_pos, rx455_eos, rx455_fail1397
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!from", rx455_pos
  rxscan456_scan1402:
    nqp_rxmark rx455_bstack, rxscan456_loop1401, rx455_pos, 0
  rxscan456_done1403:
  alt457_01405:
    nqp_rxmark rx455_bstack, alt457_11407, rx455_pos, 0
    add $I11, rx455_pos, 1
    gt $I11, rx455_eos, rx455_fail1397
    substr $S10, rx455_tgt, rx455_pos, 1
    ne $S10, ucs4:"\\", rx455_fail1397
    add rx455_pos, 1
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!pos", rx455_pos
    $P11 = rx455_cur."backslash"()
    repr_get_attr_int $I11, $P11, rx455_curclass, "$!pos"
    lt $I11, 0, rx455_fail1397
    nqp_rxmark rx455_bstack, rxsubrule458_pass1406, -1, 0
  rxsubrule458_pass1406:
    rx455_cstack = rx455_cur."!cursor_capture"($P11, "backslash")
    repr_get_attr_int rx455_pos, $P11, rx455_curclass, "$!pos"
    goto alt457_end1404
  alt457_11407:
    .const 'Sub' $P5001 = 'cuid_101_1360623852.546' 
    capture_lex $P5001
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!pos", rx455_pos
    $P11 = rx455_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx455_curclass, "$!pos"
    lt $I11, 0, rx455_fail1397
    nqp_rxmark rx455_bstack, rxsubrule462_pass1420, -1, 0
  rxsubrule462_pass1420:
    rx455_cstack = rx455_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx455_pos, $P11, rx455_curclass, "$!pos"
  alt457_end1404:
    rx455_cur."!cursor_pass"(rx455_pos, 'backtrack'=>1)
    .return (rx455_cur)
  rx455_restart1396:
    repr_get_attr_obj rx455_cstack, rx455_cur, rx455_curclass, "$!cstack"
  rx455_fail1397:
    unless rx455_bstack, rx455_done1395
    pop $I19, rx455_bstack
    if_null rx455_cstack, rx455_cstack_done1400
    unless rx455_cstack, rx455_cstack_done1400
    dec $I19
    set $P11, rx455_cstack[$I19]
  rx455_cstack_done1400:
    pop rx455_rep, rx455_bstack
    pop rx455_pos, rx455_bstack
    pop $I19, rx455_bstack
    lt rx455_pos, -1, rx455_done1395
    lt rx455_pos, 0, rx455_fail1397
    eq $I19, 0, rx455_fail1397
    nqp_islist $I20, rx455_cstack
    unless $I20, rx455_jump1398
    elements $I18, rx455_bstack
    le $I18, 0, rx455_cut1399
    dec $I18
    set $I18, rx455_bstack[$I18]
  rx455_cut1399:
    assign rx455_cstack, $I18
  rx455_jump1398:
    jump $I19
  rx455_done1395:
    rx455_cur."!cursor_fail"()
    .return (rx455_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_101_1360623852.546") :anon :lex :outer("cuid_102_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx459_start
    .local string rx459_tgt
    .local int rx459_pos
    .local int rx459_off
    .local int rx459_eos
    .local int rx459_rep
    .local pmc rx459_cur
    .local pmc rx459_curclass
    .local pmc rx459_bstack
    .local pmc rx459_cstack
    rx459_start = self."!cursor_start_all"()
    set rx459_cur, rx459_start[0]
    set rx459_tgt, rx459_start[1]
    set rx459_pos, rx459_start[2]
    set rx459_curclass, rx459_start[3]
    set rx459_bstack, rx459_start[4]
    set $I19, rx459_start[5]
    store_lex unicode:"$\x{a2}", rx459_cur
    length rx459_eos, rx459_tgt
    eq $I19, 1, rx459_restart1410
    gt rx459_pos, rx459_eos, rx459_fail1411
    repr_get_attr_int $I11, self, rx459_curclass, "$!from"
    ne $I11, -1, rxscan460_done1417
    goto rxscan460_scan1416
  rxscan460_loop1415:
    inc rx459_pos
    gt rx459_pos, rx459_eos, rx459_fail1411
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!from", rx459_pos
  rxscan460_scan1416:
    nqp_rxmark rx459_bstack, rxscan460_loop1415, rx459_pos, 0
  rxscan460_done1417:
    nqp_rxmark rx459_bstack, rxconj461_fail1418, rx459_pos, 0
    goto rxconj461_first1419
  rxconj461_fail1418:
    goto rx459_fail1411
  rxconj461_first1419:
    add $I11, rx459_pos, 1
    gt $I11, rx459_eos, rx459_fail1411
    substr $S10, rx459_tgt, rx459_pos, 1
    eq $S10, ucs4:"]", rx459_fail1411
    add rx459_pos, 1
    nqp_rxpeek $I19, rx459_bstack, rxconj461_fail1418
    inc $I19
    set $I11, rx459_bstack[$I19]
    nqp_rxmark rx459_bstack, rxconj461_fail1418, $I11, rx459_pos
    set rx459_pos, $I11
    add $I11, rx459_pos, 1
    gt $I11, rx459_eos, rx459_fail1411
    substr $S10, rx459_tgt, rx459_pos, 1
    eq $S10, ucs4:"\\", rx459_fail1411
    add rx459_pos, 1
    nqp_rxpeek $I19, rx459_bstack, rxconj461_fail1418
    inc $I19
    set $I11, rx459_bstack[$I19]
    inc $I19
    set $I12, rx459_bstack[$I19]
    ne rx459_pos, $I12, rx459_fail1411
    set rx459_pos, $I11
    ge rx459_pos, rx459_eos, rx459_fail1411
    add rx459_pos, 1
    rx459_cur."!cursor_pass"(rx459_pos, 'backtrack'=>1)
    .return (rx459_cur)
  rx459_restart1410:
    repr_get_attr_obj rx459_cstack, rx459_cur, rx459_curclass, "$!cstack"
  rx459_fail1411:
    unless rx459_bstack, rx459_done1409
    pop $I19, rx459_bstack
    if_null rx459_cstack, rx459_cstack_done1414
    unless rx459_cstack, rx459_cstack_done1414
    dec $I19
    set $P11, rx459_cstack[$I19]
  rx459_cstack_done1414:
    pop rx459_rep, rx459_bstack
    pop rx459_pos, rx459_bstack
    pop $I19, rx459_bstack
    lt rx459_pos, -1, rx459_done1409
    lt rx459_pos, 0, rx459_fail1411
    eq $I19, 0, rx459_fail1411
    nqp_islist $I20, rx459_cstack
    unless $I20, rx459_jump1412
    elements $I18, rx459_bstack
    le $I18, 0, rx459_cut1413
    dec $I18
    set $I18, rx459_bstack[$I18]
  rx459_cut1413:
    assign rx459_cstack, $I18
  rx459_jump1412:
    jump $I19
  rx459_done1409:
    rx459_cur."!cursor_fail"()
    .return (rx459_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_internal" :subid("cuid_104_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 292
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_105_1360623852.546' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx475_start
    .local string rx475_tgt
    .local int rx475_pos
    .local int rx475_off
    .local int rx475_eos
    .local int rx475_rep
    .local pmc rx475_cur
    .local pmc rx475_curclass
    .local pmc rx475_bstack
    .local pmc rx475_cstack
    rx475_start = self."!cursor_start_all"()
    set rx475_cur, rx475_start[0]
    set rx475_tgt, rx475_start[1]
    set rx475_pos, rx475_start[2]
    set rx475_curclass, rx475_start[3]
    set rx475_bstack, rx475_start[4]
    set $I19, rx475_start[5]
    store_lex unicode:"$\x{a2}", rx475_cur
    length rx475_eos, rx475_tgt
    eq $I19, 1, rx475_restart1448
    gt rx475_pos, rx475_eos, rx475_fail1449
    repr_get_attr_int $I11, self, rx475_curclass, "$!from"
    ne $I11, -1, rxscan476_done1455
    goto rxscan476_scan1454
  rxscan476_loop1453:
    inc rx475_pos
    gt rx475_pos, rx475_eos, rx475_fail1449
    repr_bind_attr_int rx475_cur, rx475_curclass, "$!from", rx475_pos
  rxscan476_scan1454:
    nqp_rxmark rx475_bstack, rxscan476_loop1453, rx475_pos, 0
  rxscan476_done1455:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt477_01457
    nqp_push_label $P11, alt477_11479
    nqp_rxmark rx475_bstack, alt477_end1456, -1, 0
    rx475_cur."!alt"(rx475_pos, "alt_nfa__24_1360623853.362", $P11)
    goto rx475_fail1449
  alt477_01457:
    add $I11, rx475_pos, 1
    gt $I11, rx475_eos, rx475_fail1449
    substr $S10, rx475_tgt, rx475_pos, 1
    ne $S10, ucs4:":", rx475_fail1449
    add rx475_pos, 1
    nqp_rxmark rx475_bstack, rxquantr478_done1459, -1, 0
  rxquantr478_loop1458:
    .const 'Sub' $P5001 = 'cuid_105_1360623852.546' 
    capture_lex $P5001
    repr_bind_attr_int rx475_cur, rx475_curclass, "$!pos", rx475_pos
    $P11 = rx475_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx475_curclass, "$!pos"
    lt $I11, 0, rx475_fail1449
    goto rxsubrule483_pass1475
  rxsubrule483_back1476:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx475_curclass, "$!pos"
    lt $I11, 0, rx475_fail1449
  rxsubrule483_pass1475:
    rx475_cstack = rx475_cur."!cursor_capture"($P11, "n")
    set_addr $I11, rxsubrule483_back1476
    push rx475_bstack, $I11
    push rx475_bstack, 0
    push rx475_bstack, rx475_pos
    elements $I11, rx475_cstack
    push rx475_bstack, $I11
    repr_get_attr_int rx475_pos, $P11, rx475_curclass, "$!pos"
    nqp_rxpeek $I19, rx475_bstack, rxquantr478_done1459
    inc $I19
    inc $I19
    set rx475_rep, rx475_bstack[$I19]
    nqp_rxcommit rx475_bstack, rxquantr478_done1459
    inc rx475_rep
  rxquantr478_done1459:
    repr_bind_attr_int rx475_cur, rx475_curclass, "$!pos", rx475_pos
    $P11 = rx475_cur."mod_ident"()
    repr_get_attr_int $I11, $P11, rx475_curclass, "$!pos"
    lt $I11, 0, rx475_fail1449
    nqp_rxmark rx475_bstack, rxsubrule484_pass1477, -1, 0
  rxsubrule484_pass1477:
    rx475_cstack = rx475_cur."!cursor_capture"($P11, "mod_ident")
    repr_get_attr_int rx475_pos, $P11, rx475_curclass, "$!pos"
    le rx475_pos, 0, rx475_fail1449
    is_cclass $I11, .CCLASS_WORD, rx475_tgt, rx475_pos
    if $I11, rx475_fail1449
    sub $I11, rx475_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx475_tgt, $I11
    unless $I11, rx475_fail1449
    goto alt477_end1456
  alt477_11479:
    add $I11, rx475_pos, 1
    gt $I11, rx475_eos, rx475_fail1449
    substr $S10, rx475_tgt, rx475_pos, 1
    ne $S10, ucs4:":", rx475_fail1449
    add rx475_pos, 1
    repr_bind_attr_int rx475_cur, rx475_curclass, "$!pos", rx475_pos
    $P11 = rx475_cur."mod_ident"()
    repr_get_attr_int $I11, $P11, rx475_curclass, "$!pos"
    lt $I11, 0, rx475_fail1449
    nqp_rxmark rx475_bstack, rxsubrule486_pass1480, -1, 0
  rxsubrule486_pass1480:
    rx475_cstack = rx475_cur."!cursor_capture"($P11, "mod_ident")
    repr_get_attr_int rx475_pos, $P11, rx475_curclass, "$!pos"
    nqp_rxmark rx475_bstack, rxquantr487_done1482, rx475_pos, 0
  rxquantr487_loop1481:
    add $I11, rx475_pos, 1
    gt $I11, rx475_eos, rx475_fail1449
    substr $S10, rx475_tgt, rx475_pos, 1
    ne $S10, ucs4:"(", rx475_fail1449
    add rx475_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt488_01484
    nqp_push_label $P11, alt488_11489
    nqp_push_label $P11, alt488_21491
    nqp_rxmark rx475_bstack, alt488_end1483, -1, 0
    rx475_cur."!alt"(rx475_pos, "alt_nfa__23_1360623853.362", $P11)
    goto rx475_fail1449
  alt488_01484:
    nqp_rxmark rx475_bstack, rxcap489_fail1486, rx475_pos, 0
    nqp_rxmark rx475_bstack, rxquantr490_done1488, -1, 0
  rxquantr490_loop1487:
    ge rx475_pos, rx475_eos, rx475_fail1449
    is_cclass $I11, .CCLASS_NUMERIC, rx475_tgt, rx475_pos
    unless $I11, rx475_fail1449
    add rx475_pos, 1
    nqp_rxpeek $I19, rx475_bstack, rxquantr490_done1488
    inc $I19
    inc $I19
    set rx475_rep, rx475_bstack[$I19]
    nqp_rxcommit rx475_bstack, rxquantr490_done1488
    inc rx475_rep
    nqp_rxmark rx475_bstack, rxquantr490_done1488, rx475_pos, rx475_rep
    goto rxquantr490_loop1487
  rxquantr490_done1488:
    nqp_rxpeek $I19, rx475_bstack, rxcap489_fail1486
    inc $I19
    set $I11, rx475_bstack[$I19]
    repr_bind_attr_int rx475_cur, rx475_curclass, "$!pos", rx475_pos
    $P11 = rx475_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx475_pos)
    rx475_cstack = rx475_cur."!cursor_capture"($P11, "n")
    goto rxcap489_done1485
  rxcap489_fail1486:
    goto rx475_fail1449
  rxcap489_done1485:
    goto alt488_end1483
  alt488_11489:
    ge rx475_pos, rx475_eos, rx475_fail1449
    substr $S11, rx475_tgt, rx475_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx475_fail1449
    repr_bind_attr_int rx475_cur, rx475_curclass, "$!pos", rx475_pos
    $P11 = rx475_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx475_curclass, "$!pos"
    lt $I11, 0, rx475_fail1449
    nqp_rxmark rx475_bstack, rxsubrule491_pass1490, -1, 0
  rxsubrule491_pass1490:
    rx475_cstack = rx475_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx475_pos, $P11, rx475_curclass, "$!pos"
    goto alt488_end1483
  alt488_21491:
    ge rx475_pos, rx475_eos, rx475_fail1449
    substr $S11, rx475_tgt, rx475_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx475_fail1449
    repr_bind_attr_int rx475_cur, rx475_curclass, "$!pos", rx475_pos
    $P11 = rx475_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx475_curclass, "$!pos"
    lt $I11, 0, rx475_fail1449
    nqp_rxmark rx475_bstack, rxsubrule492_pass1492, -1, 0
  rxsubrule492_pass1492:
    rx475_cstack = rx475_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx475_pos, $P11, rx475_curclass, "$!pos"
    goto alt488_end1483
  alt488_end1483:
    nqp_rxcommit rx475_bstack, alt488_end1483
    add $I11, rx475_pos, 1
    gt $I11, rx475_eos, rx475_fail1449
    substr $S10, rx475_tgt, rx475_pos, 1
    ne $S10, ucs4:")", rx475_fail1449
    add rx475_pos, 1
    nqp_rxpeek $I19, rx475_bstack, rxquantr487_done1482
    inc $I19
    inc $I19
    set rx475_rep, rx475_bstack[$I19]
    nqp_rxcommit rx475_bstack, rxquantr487_done1482
    inc rx475_rep
  rxquantr487_done1482:
    goto alt477_end1456
  alt477_end1456:
    nqp_rxcommit rx475_bstack, alt477_end1456
    rx475_cur."!cursor_pass"(rx475_pos, "mod_internal", 'backtrack'=>1)
    .return (rx475_cur)
  rx475_restart1448:
    repr_get_attr_obj rx475_cstack, rx475_cur, rx475_curclass, "$!cstack"
  rx475_fail1449:
    unless rx475_bstack, rx475_done1447
    pop $I19, rx475_bstack
    if_null rx475_cstack, rx475_cstack_done1452
    unless rx475_cstack, rx475_cstack_done1452
    dec $I19
    set $P11, rx475_cstack[$I19]
  rx475_cstack_done1452:
    pop rx475_rep, rx475_bstack
    pop rx475_pos, rx475_bstack
    pop $I19, rx475_bstack
    lt rx475_pos, -1, rx475_done1447
    lt rx475_pos, 0, rx475_fail1449
    eq $I19, 0, rx475_fail1449
    nqp_islist $I20, rx475_cstack
    unless $I20, rx475_jump1450
    elements $I18, rx475_bstack
    le $I18, 0, rx475_cut1451
    dec $I18
    set $I18, rx475_bstack[$I18]
  rx475_cut1451:
    assign rx475_cstack, $I18
  rx475_jump1450:
    jump $I19
  rx475_done1447:
    rx475_cur."!cursor_fail"()
    .return (rx475_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_105_1360623852.546") :anon :lex :outer("cuid_104_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx479_start
    .local string rx479_tgt
    .local int rx479_pos
    .local int rx479_off
    .local int rx479_eos
    .local int rx479_rep
    .local pmc rx479_cur
    .local pmc rx479_curclass
    .local pmc rx479_bstack
    .local pmc rx479_cstack
    rx479_start = self."!cursor_start_all"()
    set rx479_cur, rx479_start[0]
    set rx479_tgt, rx479_start[1]
    set rx479_pos, rx479_start[2]
    set rx479_curclass, rx479_start[3]
    set rx479_bstack, rx479_start[4]
    set $I19, rx479_start[5]
    store_lex unicode:"$\x{a2}", rx479_cur
    length rx479_eos, rx479_tgt
    eq $I19, 1, rx479_restart1462
    gt rx479_pos, rx479_eos, rx479_fail1463
    repr_get_attr_int $I11, self, rx479_curclass, "$!from"
    ne $I11, -1, rxscan480_done1469
    goto rxscan480_scan1468
  rxscan480_loop1467:
    inc rx479_pos
    gt rx479_pos, rx479_eos, rx479_fail1463
    repr_bind_attr_int rx479_cur, rx479_curclass, "$!from", rx479_pos
  rxscan480_scan1468:
    nqp_rxmark rx479_bstack, rxscan480_loop1467, rx479_pos, 0
  rxscan480_done1469:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt481_01471
    nqp_push_label $P11, alt481_11472
    nqp_rxmark rx479_bstack, alt481_end1470, -1, 0
    rx479_cur."!alt"(rx479_pos, "alt_nfa__22_1360623853.341", $P11)
    goto rx479_fail1463
  alt481_01471:
    add $I11, rx479_pos, 1
    gt $I11, rx479_eos, rx479_fail1463
    substr $S10, rx479_tgt, rx479_pos, 1
    ne $S10, ucs4:"!", rx479_fail1463
    add rx479_pos, 1
    goto alt481_end1470
  alt481_11472:
    nqp_rxmark rx479_bstack, rxquantr482_done1474, -1, 0
  rxquantr482_loop1473:
    ge rx479_pos, rx479_eos, rx479_fail1463
    is_cclass $I11, .CCLASS_NUMERIC, rx479_tgt, rx479_pos
    unless $I11, rx479_fail1463
    add rx479_pos, 1
    nqp_rxpeek $I19, rx479_bstack, rxquantr482_done1474
    inc $I19
    inc $I19
    set rx479_rep, rx479_bstack[$I19]
    nqp_rxcommit rx479_bstack, rxquantr482_done1474
    inc rx479_rep
    nqp_rxmark rx479_bstack, rxquantr482_done1474, rx479_pos, rx479_rep
    goto rxquantr482_loop1473
  rxquantr482_done1474:
    goto alt481_end1470
  alt481_end1470:
    rx479_cur."!cursor_pass"(rx479_pos, 'backtrack'=>1)
    .return (rx479_cur)
  rx479_restart1462:
    repr_get_attr_obj rx479_cstack, rx479_cur, rx479_curclass, "$!cstack"
  rx479_fail1463:
    unless rx479_bstack, rx479_done1461
    pop $I19, rx479_bstack
    if_null rx479_cstack, rx479_cstack_done1466
    unless rx479_cstack, rx479_cstack_done1466
    dec $I19
    set $P11, rx479_cstack[$I19]
  rx479_cstack_done1466:
    pop rx479_rep, rx479_bstack
    pop rx479_pos, rx479_bstack
    pop $I19, rx479_bstack
    lt rx479_pos, -1, rx479_done1461
    lt rx479_pos, 0, rx479_fail1463
    eq $I19, 0, rx479_fail1463
    nqp_islist $I20, rx479_cstack
    unless $I20, rx479_jump1464
    elements $I18, rx479_bstack
    le $I18, 0, rx479_cut1465
    dec $I18
    set $I18, rx479_bstack[$I18]
  rx479_cut1465:
    assign rx479_cstack, $I18
  rx479_jump1464:
    jump $I19
  rx479_done1461:
    rx479_cur."!cursor_fail"()
    .return (rx479_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident" :subid("cuid_106_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 308
    .param pmc self 
    $P5001 = self."!protoregex"("mod_ident")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<ignorecase>" :subid("cuid_107_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 309
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx493_start
    .local string rx493_tgt
    .local int rx493_pos
    .local int rx493_off
    .local int rx493_eos
    .local int rx493_rep
    .local pmc rx493_cur
    .local pmc rx493_curclass
    .local pmc rx493_bstack
    .local pmc rx493_cstack
    rx493_start = self."!cursor_start_all"()
    set rx493_cur, rx493_start[0]
    set rx493_tgt, rx493_start[1]
    set rx493_pos, rx493_start[2]
    set rx493_curclass, rx493_start[3]
    set rx493_bstack, rx493_start[4]
    set $I19, rx493_start[5]
    store_lex unicode:"$\x{a2}", rx493_cur
    length rx493_eos, rx493_tgt
    eq $I19, 1, rx493_restart1495
    gt rx493_pos, rx493_eos, rx493_fail1496
    repr_get_attr_int $I11, self, rx493_curclass, "$!from"
    ne $I11, -1, rxscan494_done1502
    goto rxscan494_scan1501
  rxscan494_loop1500:
    inc rx493_pos
    gt rx493_pos, rx493_eos, rx493_fail1496
    repr_bind_attr_int rx493_cur, rx493_curclass, "$!from", rx493_pos
  rxscan494_scan1501:
    nqp_rxmark rx493_bstack, rxscan494_loop1500, rx493_pos, 0
  rxscan494_done1502:
    nqp_rxmark rx493_bstack, rxcap495_fail1504, rx493_pos, 0
    add $I11, rx493_pos, 1
    gt $I11, rx493_eos, rx493_fail1496
    substr $S10, rx493_tgt, rx493_pos, 1
    ne $S10, ucs4:"i", rx493_fail1496
    add rx493_pos, 1
    nqp_rxpeek $I19, rx493_bstack, rxcap495_fail1504
    inc $I19
    set $I11, rx493_bstack[$I19]
    repr_bind_attr_int rx493_cur, rx493_curclass, "$!pos", rx493_pos
    $P11 = rx493_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx493_pos)
    rx493_cstack = rx493_cur."!cursor_capture"($P11, "sym")
    goto rxcap495_done1503
  rxcap495_fail1504:
    goto rx493_fail1496
  rxcap495_done1503:
    nqp_rxmark rx493_bstack, rxquantr496_done1506, rx493_pos, 0
  rxquantr496_loop1505:
    add $I11, rx493_pos, 9
    gt $I11, rx493_eos, rx493_fail1496
    substr $S10, rx493_tgt, rx493_pos, 9
    ne $S10, ucs4:"gnorecase", rx493_fail1496
    add rx493_pos, 9
    nqp_rxpeek $I19, rx493_bstack, rxquantr496_done1506
    inc $I19
    inc $I19
    set rx493_rep, rx493_bstack[$I19]
    nqp_rxcommit rx493_bstack, rxquantr496_done1506
    inc rx493_rep
  rxquantr496_done1506:
    le rx493_pos, 0, rx493_fail1496
    is_cclass $I11, .CCLASS_WORD, rx493_tgt, rx493_pos
    if $I11, rx493_fail1496
    sub $I11, rx493_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx493_tgt, $I11
    unless $I11, rx493_fail1496
    rx493_cur."!cursor_pass"(rx493_pos, "mod_ident:sym<ignorecase>", 'backtrack'=>1)
    .return (rx493_cur)
  rx493_restart1495:
    repr_get_attr_obj rx493_cstack, rx493_cur, rx493_curclass, "$!cstack"
  rx493_fail1496:
    unless rx493_bstack, rx493_done1494
    pop $I19, rx493_bstack
    if_null rx493_cstack, rx493_cstack_done1499
    unless rx493_cstack, rx493_cstack_done1499
    dec $I19
    set $P11, rx493_cstack[$I19]
  rx493_cstack_done1499:
    pop rx493_rep, rx493_bstack
    pop rx493_pos, rx493_bstack
    pop $I19, rx493_bstack
    lt rx493_pos, -1, rx493_done1494
    lt rx493_pos, 0, rx493_fail1496
    eq $I19, 0, rx493_fail1496
    nqp_islist $I20, rx493_cstack
    unless $I20, rx493_jump1497
    elements $I18, rx493_bstack
    le $I18, 0, rx493_cut1498
    dec $I18
    set $I18, rx493_bstack[$I18]
  rx493_cut1498:
    assign rx493_cstack, $I18
  rx493_jump1497:
    jump $I19
  rx493_done1494:
    rx493_cur."!cursor_fail"()
    .return (rx493_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<ratchet>" :subid("cuid_108_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 310
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx498_start
    .local string rx498_tgt
    .local int rx498_pos
    .local int rx498_off
    .local int rx498_eos
    .local int rx498_rep
    .local pmc rx498_cur
    .local pmc rx498_curclass
    .local pmc rx498_bstack
    .local pmc rx498_cstack
    rx498_start = self."!cursor_start_all"()
    set rx498_cur, rx498_start[0]
    set rx498_tgt, rx498_start[1]
    set rx498_pos, rx498_start[2]
    set rx498_curclass, rx498_start[3]
    set rx498_bstack, rx498_start[4]
    set $I19, rx498_start[5]
    store_lex unicode:"$\x{a2}", rx498_cur
    length rx498_eos, rx498_tgt
    eq $I19, 1, rx498_restart1510
    gt rx498_pos, rx498_eos, rx498_fail1511
    repr_get_attr_int $I11, self, rx498_curclass, "$!from"
    ne $I11, -1, rxscan499_done1517
    goto rxscan499_scan1516
  rxscan499_loop1515:
    inc rx498_pos
    gt rx498_pos, rx498_eos, rx498_fail1511
    repr_bind_attr_int rx498_cur, rx498_curclass, "$!from", rx498_pos
  rxscan499_scan1516:
    nqp_rxmark rx498_bstack, rxscan499_loop1515, rx498_pos, 0
  rxscan499_done1517:
    nqp_rxmark rx498_bstack, rxcap500_fail1519, rx498_pos, 0
    add $I11, rx498_pos, 1
    gt $I11, rx498_eos, rx498_fail1511
    substr $S10, rx498_tgt, rx498_pos, 1
    ne $S10, ucs4:"r", rx498_fail1511
    add rx498_pos, 1
    nqp_rxpeek $I19, rx498_bstack, rxcap500_fail1519
    inc $I19
    set $I11, rx498_bstack[$I19]
    repr_bind_attr_int rx498_cur, rx498_curclass, "$!pos", rx498_pos
    $P11 = rx498_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx498_pos)
    rx498_cstack = rx498_cur."!cursor_capture"($P11, "sym")
    goto rxcap500_done1518
  rxcap500_fail1519:
    goto rx498_fail1511
  rxcap500_done1518:
    nqp_rxmark rx498_bstack, rxquantr501_done1521, rx498_pos, 0
  rxquantr501_loop1520:
    add $I11, rx498_pos, 6
    gt $I11, rx498_eos, rx498_fail1511
    substr $S10, rx498_tgt, rx498_pos, 6
    ne $S10, ucs4:"atchet", rx498_fail1511
    add rx498_pos, 6
    nqp_rxpeek $I19, rx498_bstack, rxquantr501_done1521
    inc $I19
    inc $I19
    set rx498_rep, rx498_bstack[$I19]
    nqp_rxcommit rx498_bstack, rxquantr501_done1521
    inc rx498_rep
  rxquantr501_done1521:
    le rx498_pos, 0, rx498_fail1511
    is_cclass $I11, .CCLASS_WORD, rx498_tgt, rx498_pos
    if $I11, rx498_fail1511
    sub $I11, rx498_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx498_tgt, $I11
    unless $I11, rx498_fail1511
    rx498_cur."!cursor_pass"(rx498_pos, "mod_ident:sym<ratchet>", 'backtrack'=>1)
    .return (rx498_cur)
  rx498_restart1510:
    repr_get_attr_obj rx498_cstack, rx498_cur, rx498_curclass, "$!cstack"
  rx498_fail1511:
    unless rx498_bstack, rx498_done1509
    pop $I19, rx498_bstack
    if_null rx498_cstack, rx498_cstack_done1514
    unless rx498_cstack, rx498_cstack_done1514
    dec $I19
    set $P11, rx498_cstack[$I19]
  rx498_cstack_done1514:
    pop rx498_rep, rx498_bstack
    pop rx498_pos, rx498_bstack
    pop $I19, rx498_bstack
    lt rx498_pos, -1, rx498_done1509
    lt rx498_pos, 0, rx498_fail1511
    eq $I19, 0, rx498_fail1511
    nqp_islist $I20, rx498_cstack
    unless $I20, rx498_jump1512
    elements $I18, rx498_bstack
    le $I18, 0, rx498_cut1513
    dec $I18
    set $I18, rx498_bstack[$I18]
  rx498_cut1513:
    assign rx498_cstack, $I18
  rx498_jump1512:
    jump $I19
  rx498_done1509:
    rx498_cur."!cursor_fail"()
    .return (rx498_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<sigspace>" :subid("cuid_109_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 311
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx503_start
    .local string rx503_tgt
    .local int rx503_pos
    .local int rx503_off
    .local int rx503_eos
    .local int rx503_rep
    .local pmc rx503_cur
    .local pmc rx503_curclass
    .local pmc rx503_bstack
    .local pmc rx503_cstack
    rx503_start = self."!cursor_start_all"()
    set rx503_cur, rx503_start[0]
    set rx503_tgt, rx503_start[1]
    set rx503_pos, rx503_start[2]
    set rx503_curclass, rx503_start[3]
    set rx503_bstack, rx503_start[4]
    set $I19, rx503_start[5]
    store_lex unicode:"$\x{a2}", rx503_cur
    length rx503_eos, rx503_tgt
    eq $I19, 1, rx503_restart1525
    gt rx503_pos, rx503_eos, rx503_fail1526
    repr_get_attr_int $I11, self, rx503_curclass, "$!from"
    ne $I11, -1, rxscan504_done1532
    goto rxscan504_scan1531
  rxscan504_loop1530:
    inc rx503_pos
    gt rx503_pos, rx503_eos, rx503_fail1526
    repr_bind_attr_int rx503_cur, rx503_curclass, "$!from", rx503_pos
  rxscan504_scan1531:
    nqp_rxmark rx503_bstack, rxscan504_loop1530, rx503_pos, 0
  rxscan504_done1532:
    nqp_rxmark rx503_bstack, rxcap505_fail1534, rx503_pos, 0
    add $I11, rx503_pos, 1
    gt $I11, rx503_eos, rx503_fail1526
    substr $S10, rx503_tgt, rx503_pos, 1
    ne $S10, ucs4:"s", rx503_fail1526
    add rx503_pos, 1
    nqp_rxpeek $I19, rx503_bstack, rxcap505_fail1534
    inc $I19
    set $I11, rx503_bstack[$I19]
    repr_bind_attr_int rx503_cur, rx503_curclass, "$!pos", rx503_pos
    $P11 = rx503_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx503_pos)
    rx503_cstack = rx503_cur."!cursor_capture"($P11, "sym")
    goto rxcap505_done1533
  rxcap505_fail1534:
    goto rx503_fail1526
  rxcap505_done1533:
    nqp_rxmark rx503_bstack, rxquantr506_done1536, rx503_pos, 0
  rxquantr506_loop1535:
    add $I11, rx503_pos, 7
    gt $I11, rx503_eos, rx503_fail1526
    substr $S10, rx503_tgt, rx503_pos, 7
    ne $S10, ucs4:"igspace", rx503_fail1526
    add rx503_pos, 7
    nqp_rxpeek $I19, rx503_bstack, rxquantr506_done1536
    inc $I19
    inc $I19
    set rx503_rep, rx503_bstack[$I19]
    nqp_rxcommit rx503_bstack, rxquantr506_done1536
    inc rx503_rep
  rxquantr506_done1536:
    le rx503_pos, 0, rx503_fail1526
    is_cclass $I11, .CCLASS_WORD, rx503_tgt, rx503_pos
    if $I11, rx503_fail1526
    sub $I11, rx503_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx503_tgt, $I11
    unless $I11, rx503_fail1526
    rx503_cur."!cursor_pass"(rx503_pos, "mod_ident:sym<sigspace>", 'backtrack'=>1)
    .return (rx503_cur)
  rx503_restart1525:
    repr_get_attr_obj rx503_cstack, rx503_cur, rx503_curclass, "$!cstack"
  rx503_fail1526:
    unless rx503_bstack, rx503_done1524
    pop $I19, rx503_bstack
    if_null rx503_cstack, rx503_cstack_done1529
    unless rx503_cstack, rx503_cstack_done1529
    dec $I19
    set $P11, rx503_cstack[$I19]
  rx503_cstack_done1529:
    pop rx503_rep, rx503_bstack
    pop rx503_pos, rx503_bstack
    pop $I19, rx503_bstack
    lt rx503_pos, -1, rx503_done1524
    lt rx503_pos, 0, rx503_fail1526
    eq $I19, 0, rx503_fail1526
    nqp_islist $I20, rx503_cstack
    unless $I20, rx503_jump1527
    elements $I18, rx503_bstack
    le $I18, 0, rx503_cut1528
    dec $I18
    set $I18, rx503_bstack[$I18]
  rx503_cut1528:
    assign rx503_cstack, $I18
  rx503_jump1527:
    jump $I19
  rx503_done1524:
    rx503_cur."!cursor_fail"()
    .return (rx503_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<dba>" :subid("cuid_110_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 312
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx508_start
    .local string rx508_tgt
    .local int rx508_pos
    .local int rx508_off
    .local int rx508_eos
    .local int rx508_rep
    .local pmc rx508_cur
    .local pmc rx508_curclass
    .local pmc rx508_bstack
    .local pmc rx508_cstack
    rx508_start = self."!cursor_start_all"()
    set rx508_cur, rx508_start[0]
    set rx508_tgt, rx508_start[1]
    set rx508_pos, rx508_start[2]
    set rx508_curclass, rx508_start[3]
    set rx508_bstack, rx508_start[4]
    set $I19, rx508_start[5]
    store_lex unicode:"$\x{a2}", rx508_cur
    length rx508_eos, rx508_tgt
    eq $I19, 1, rx508_restart1540
    gt rx508_pos, rx508_eos, rx508_fail1541
    repr_get_attr_int $I11, self, rx508_curclass, "$!from"
    ne $I11, -1, rxscan509_done1547
    goto rxscan509_scan1546
  rxscan509_loop1545:
    inc rx508_pos
    gt rx508_pos, rx508_eos, rx508_fail1541
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!from", rx508_pos
  rxscan509_scan1546:
    nqp_rxmark rx508_bstack, rxscan509_loop1545, rx508_pos, 0
  rxscan509_done1547:
    nqp_rxmark rx508_bstack, rxcap510_fail1549, rx508_pos, 0
    add $I11, rx508_pos, 3
    gt $I11, rx508_eos, rx508_fail1541
    substr $S10, rx508_tgt, rx508_pos, 3
    ne $S10, ucs4:"dba", rx508_fail1541
    add rx508_pos, 3
    nqp_rxpeek $I19, rx508_bstack, rxcap510_fail1549
    inc $I19
    set $I11, rx508_bstack[$I19]
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx508_pos)
    rx508_cstack = rx508_cur."!cursor_capture"($P11, "sym")
    goto rxcap510_done1548
  rxcap510_fail1549:
    goto rx508_fail1541
  rxcap510_done1548:
    le rx508_pos, 0, rx508_fail1541
    is_cclass $I11, .CCLASS_WORD, rx508_tgt, rx508_pos
    if $I11, rx508_fail1541
    sub $I11, rx508_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx508_tgt, $I11
    unless $I11, rx508_fail1541
    rx508_cur."!cursor_pass"(rx508_pos, "mod_ident:sym<dba>", 'backtrack'=>1)
    .return (rx508_cur)
  rx508_restart1540:
    repr_get_attr_obj rx508_cstack, rx508_cur, rx508_curclass, "$!cstack"
  rx508_fail1541:
    unless rx508_bstack, rx508_done1539
    pop $I19, rx508_bstack
    if_null rx508_cstack, rx508_cstack_done1544
    unless rx508_cstack, rx508_cstack_done1544
    dec $I19
    set $P11, rx508_cstack[$I19]
  rx508_cstack_done1544:
    pop rx508_rep, rx508_bstack
    pop rx508_pos, rx508_bstack
    pop $I19, rx508_bstack
    lt rx508_pos, -1, rx508_done1539
    lt rx508_pos, 0, rx508_fail1541
    eq $I19, 0, rx508_fail1541
    nqp_islist $I20, rx508_cstack
    unless $I20, rx508_jump1542
    elements $I18, rx508_bstack
    le $I18, 0, rx508_cut1543
    dec $I18
    set $I18, rx508_bstack[$I18]
  rx508_cut1543:
    assign rx508_cstack, $I18
  rx508_jump1542:
    jump $I19
  rx508_done1539:
    rx508_cur."!cursor_fail"()
    .return (rx508_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<oops>" :subid("cuid_111_1360623852.546") :anon :lex :outer("cuid_180_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 313
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_188_1360623852.546' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_112_1360623852.546' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_189_1360623852.546' 
    capture_lex $P5008 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx512_start
    .local string rx512_tgt
    .local int rx512_pos
    .local int rx512_off
    .local int rx512_eos
    .local int rx512_rep
    .local pmc rx512_cur
    .local pmc rx512_curclass
    .local pmc rx512_bstack
    .local pmc rx512_cstack
    rx512_start = self."!cursor_start_all"()
    set rx512_cur, rx512_start[0]
    set rx512_tgt, rx512_start[1]
    set rx512_pos, rx512_start[2]
    set rx512_curclass, rx512_start[3]
    set rx512_bstack, rx512_start[4]
    set $I19, rx512_start[5]
    store_lex unicode:"$\x{a2}", rx512_cur
    length rx512_eos, rx512_tgt
    eq $I19, 1, rx512_restart1553
    gt rx512_pos, rx512_eos, rx512_fail1554
    repr_get_attr_int $I11, self, rx512_curclass, "$!from"
    ne $I11, -1, rxscan513_done1560
    goto rxscan513_scan1559
  rxscan513_loop1558:
    inc rx512_pos
    gt rx512_pos, rx512_eos, rx512_fail1554
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!from", rx512_pos
  rxscan513_scan1559:
    nqp_rxmark rx512_bstack, rxscan513_loop1558, rx512_pos, 0
  rxscan513_done1560:
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    store_lex unicode:"$\x{a2}", rx512_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_188_1360623852.546' 
    capture_lex $P5002
    $P5003 = $P5002()
    .const 'Sub' $P5004 = 'cuid_112_1360623852.546' 
    capture_lex $P5004
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur.$P5004()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1554
    nqp_rxmark rx512_bstack, rxsubrule517_pass1573, -1, 0
  rxsubrule517_pass1573:
    rx512_cstack = rx512_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    store_lex unicode:"$\x{a2}", rx512_cur
    $P5005 = $P101."MATCH"()
    set $P102, $P5005
    .const 'Sub' $P5006 = 'cuid_189_1360623852.546' 
    capture_lex $P5006
    $P5007 = $P5006()
    rx512_cur."!cursor_pass"(rx512_pos, "mod_ident:sym<oops>", 'backtrack'=>1)
    .return (rx512_cur)
  rx512_restart1553:
    repr_get_attr_obj rx512_cstack, rx512_cur, rx512_curclass, "$!cstack"
  rx512_fail1554:
    unless rx512_bstack, rx512_done1552
    pop $I19, rx512_bstack
    if_null rx512_cstack, rx512_cstack_done1557
    unless rx512_cstack, rx512_cstack_done1557
    dec $I19
    set $P11, rx512_cstack[$I19]
  rx512_cstack_done1557:
    pop rx512_rep, rx512_bstack
    pop rx512_pos, rx512_bstack
    pop $I19, rx512_bstack
    lt rx512_pos, -1, rx512_done1552
    lt rx512_pos, 0, rx512_fail1554
    eq $I19, 0, rx512_fail1554
    nqp_islist $I20, rx512_cstack
    unless $I20, rx512_jump1555
    elements $I18, rx512_bstack
    le $I18, 0, rx512_cut1556
    dec $I18
    set $I18, rx512_bstack[$I18]
  rx512_cut1556:
    assign rx512_cstack, $I18
  rx512_jump1555:
    jump $I19
  rx512_done1552:
    rx512_cur."!cursor_fail"()
    .return (rx512_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_188_1360623852.546") :anon :lex :outer("cuid_111_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 313

    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_112_1360623852.546") :anon :lex :outer("cuid_111_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx514_start
    .local string rx514_tgt
    .local int rx514_pos
    .local int rx514_off
    .local int rx514_eos
    .local int rx514_rep
    .local pmc rx514_cur
    .local pmc rx514_curclass
    .local pmc rx514_bstack
    .local pmc rx514_cstack
    rx514_start = self."!cursor_start_all"()
    set rx514_cur, rx514_start[0]
    set rx514_tgt, rx514_start[1]
    set rx514_pos, rx514_start[2]
    set rx514_curclass, rx514_start[3]
    set rx514_bstack, rx514_start[4]
    set $I19, rx514_start[5]
    store_lex unicode:"$\x{a2}", rx514_cur
    length rx514_eos, rx514_tgt
    eq $I19, 1, rx514_restart1563
    gt rx514_pos, rx514_eos, rx514_fail1564
    repr_get_attr_int $I11, self, rx514_curclass, "$!from"
    ne $I11, -1, rxscan515_done1570
    goto rxscan515_scan1569
  rxscan515_loop1568:
    inc rx514_pos
    gt rx514_pos, rx514_eos, rx514_fail1564
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!from", rx514_pos
  rxscan515_scan1569:
    nqp_rxmark rx514_bstack, rxscan515_loop1568, rx514_pos, 0
  rxscan515_done1570:
    nqp_rxmark rx514_bstack, rxquantr516_done1572, -1, 0
  rxquantr516_loop1571:
    ge rx514_pos, rx514_eos, rx514_fail1564
    is_cclass $I11, .CCLASS_WORD, rx514_tgt, rx514_pos
    unless $I11, rx514_fail1564
    add rx514_pos, 1
    nqp_rxpeek $I19, rx514_bstack, rxquantr516_done1572
    inc $I19
    inc $I19
    set rx514_rep, rx514_bstack[$I19]
    nqp_rxcommit rx514_bstack, rxquantr516_done1572
    inc rx514_rep
    nqp_rxmark rx514_bstack, rxquantr516_done1572, rx514_pos, rx514_rep
    goto rxquantr516_loop1571
  rxquantr516_done1572:
    rx514_cur."!cursor_pass"(rx514_pos, 'backtrack'=>1)
    .return (rx514_cur)
  rx514_restart1563:
    repr_get_attr_obj rx514_cstack, rx514_cur, rx514_curclass, "$!cstack"
  rx514_fail1564:
    unless rx514_bstack, rx514_done1562
    pop $I19, rx514_bstack
    if_null rx514_cstack, rx514_cstack_done1567
    unless rx514_cstack, rx514_cstack_done1567
    dec $I19
    set $P11, rx514_cstack[$I19]
  rx514_cstack_done1567:
    pop rx514_rep, rx514_bstack
    pop rx514_pos, rx514_bstack
    pop $I19, rx514_bstack
    lt rx514_pos, -1, rx514_done1562
    lt rx514_pos, 0, rx514_fail1564
    eq $I19, 0, rx514_fail1564
    nqp_islist $I20, rx514_cstack
    unless $I20, rx514_jump1565
    elements $I18, rx514_bstack
    le $I18, 0, rx514_cut1566
    dec $I18
    set $I18, rx514_bstack[$I18]
  rx514_cut1566:
    assign rx514_cstack, $I18
  rx514_jump1565:
    jump $I19
  rx514_done1562:
    rx514_cur."!cursor_fail"()
    .return (rx514_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_189_1360623852.546") :anon :lex :outer("cuid_111_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 313
    .local pmc fb_tmp_17 
    find_lex $P5001, "$/"
    $P5002 = $P5001."CURSOR"()
    find_lex $P5003, "$/"
    set fb_tmp_17, $P5003
    repr_defined $I5001, fb_tmp_17
    unless $I5001 goto if518_else1574 
    set $P5004, fb_tmp_17[0]
    set $P5006, $P5004
    goto if518_end1575
  if518_else1574:
    null $P5005
    set $P5006, $P5005
  if518_end1575:
    unless_null $P5006, vivi_5191576
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_5191576:
    $P5008 = $P5006."Str"()
    set $S5002, $P5008
    concat $S5001, "Unrecognized regex modifier :", $S5002
    $P5009 = $P5002."panic"($S5001)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_191_1360623852.546") :anon :lex :outer("cuid_177_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 317
    .const 'Sub' $P5066 = 'cuid_190_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_194_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_113_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_114_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_115_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_116_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_117_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_118_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_119_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_120_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_121_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_122_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_123_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_124_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_125_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_126_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_127_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_128_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_129_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_130_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_131_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_132_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_133_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_134_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_135_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_136_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_137_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_138_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_139_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_140_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_141_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_142_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_143_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_144_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_145_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_146_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_147_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_148_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_149_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_150_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_151_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_152_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_153_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_154_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_155_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_156_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_157_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_158_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_159_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_160_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_161_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_162_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_163_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_164_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_165_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_166_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_167_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_168_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_169_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_170_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_171_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_172_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_173_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_174_1360623852.546' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_175_1360623852.546' 
    capture_lex $P5066 
    .lex "&backmod", $P101 
    .lex "&capnames", $P102 
    .lex "$?PACKAGE", $P103 
    .lex "$?CLASS", $P104 
    .const 'Sub' $P5001 = 'cuid_190_1360623852.546' 
    capture_lex $P5001
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_194_1360623852.546' 
    capture_lex $P5002
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_113_1360623852.546' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_114_1360623852.546' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_115_1360623852.546' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_116_1360623852.546' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_117_1360623852.546' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_118_1360623852.546' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_119_1360623852.546' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_120_1360623852.546' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_121_1360623852.546' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_122_1360623852.546' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_123_1360623852.546' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_124_1360623852.546' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_125_1360623852.546' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_126_1360623852.546' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_127_1360623852.546' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_128_1360623852.546' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_129_1360623852.546' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_130_1360623852.546' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_131_1360623852.546' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_132_1360623852.546' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_133_1360623852.546' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_134_1360623852.546' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_135_1360623852.546' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_136_1360623852.546' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_137_1360623852.546' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_138_1360623852.546' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_139_1360623852.546' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_140_1360623852.546' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_141_1360623852.546' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_142_1360623852.546' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_143_1360623852.546' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_144_1360623852.546' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_145_1360623852.546' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_146_1360623852.546' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_147_1360623852.546' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_148_1360623852.546' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_149_1360623852.546' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_150_1360623852.546' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_151_1360623852.546' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_152_1360623852.546' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_153_1360623852.546' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_154_1360623852.546' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_155_1360623852.546' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_156_1360623852.546' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_157_1360623852.546' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_158_1360623852.546' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_159_1360623852.546' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_160_1360623852.546' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_161_1360623852.546' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_162_1360623852.546' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_163_1360623852.546' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_164_1360623852.546' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_165_1360623852.546' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_166_1360623852.546' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_167_1360623852.546' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_168_1360623852.546' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_169_1360623852.546' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_170_1360623852.546' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_171_1360623852.546' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_172_1360623852.546' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_173_1360623852.546' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_174_1360623852.546' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_175_1360623852.546' 
    capture_lex $P5065
    .return ($P5065) 
.end
.HLL "nqp"
.namespace []
.sub "backmod" :subid("cuid_190_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 863
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$ast", _lex_param_0 
    .lex "$backmod", _lex_param_1 
    set $S5001, _lex_param_1
    iseq $I5001, $S5001, ":"
    unless $I5001 goto if520_else1577 
.annotate 'line', 864
    $P5001 = _lex_param_0."backtrack"("r")
    goto if520_end1578
  if520_else1577:
    set $S5002, _lex_param_1
    iseq $I5002, $S5002, ":?"
    set $I5004, $I5002
    if $I5002 goto unless522_end1582 
    set $S5003, _lex_param_1
    iseq $I5003, $S5003, "?"
    set $I5004, $I5003
  unless522_end1582:
    unless $I5004 goto if521_else1579 
.annotate 'line', 865
    $P5002 = _lex_param_0."backtrack"("f")
    set $P5006, $P5002
    goto if521_end1580
  if521_else1579:
    set $S5004, _lex_param_1
    iseq $I5005, $S5004, ":!"
    set $I5007, $I5005
    if $I5005 goto unless524_end1586 
    set $S5005, _lex_param_1
    iseq $I5006, $S5005, "!"
    set $I5007, $I5006
  unless524_end1586:
    box $P5005, $I5007
    set $P5004, $P5005
    unless $I5007 goto if523_end1584 
.annotate 'line', 866
    $P5003 = _lex_param_0."backtrack"("g")
    set $P5004, $P5003
  if523_end1584:
    set $P5006, $P5004
  if521_end1580:
  if520_end1578:
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "capnames" :subid("cuid_194_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 907
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_193_1360623852.546' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_197_1360623852.546' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_199_1360623852.546' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_201_1360623852.546' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_204_1360623852.546' 
    capture_lex $P5024 
    .lex "%capnames", $P101 
    .lex "$rxtype", $P102 
    .lex "$ast", _lex_param_0 
    .lex "$count", _lex_param_1 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P102, $P5002
.annotate 'line', 909
    $P5003 = _lex_param_0."rxtype"()
    set $P102, $P5003
    set $S5001, $P102
    iseq $I5001, $S5001, "concat"
    unless $I5001 goto if525_else1587 
.annotate 'line', 910
.annotate 'line', 911
    $P5007 = _lex_param_0."list"()
    set $P5004, $P5007
    iter $P5006, $P5007
  for_next1598:
    unless $P5006, for_done1600
    shift $P5009, $P5006
  for_redo1599:
    .const 'Sub' $P5008 = 'cuid_193_1360623852.546' 
    capture_lex $P5008
    $P5004 = $P5008($P5009)
    goto for_next1598
  for_done1600:
    goto if525_end1588
  if525_else1587:
    set $S5002, $P102
    iseq $I5002, $S5002, "altseq"
    set $I5004, $I5002
    if $I5002 goto unless531_end1604 
    set $S5003, $P102
    iseq $I5003, $S5003, "alt"
    set $I5004, $I5003
  unless531_end1604:
    unless $I5004 goto if530_else1601 
    .const 'Sub' $P5010 = 'cuid_197_1360623852.546' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5023, $P5011
    goto if530_end1602
  if530_else1601:
    set $S5004, $P102
    iseq $I5005, $S5004, "subrule"
    set $I5007, $I5005
    unless $I5005 goto if544_end1632 
.annotate 'line', 928
    $P5012 = _lex_param_0."subtype"()
    set $S5005, $P5012
    iseq $I5006, $S5005, "capture"
    set $I5007, $I5006
  if544_end1632:
    unless $I5007 goto if543_else1629 
    .const 'Sub' $P5013 = 'cuid_199_1360623852.546' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5022, $P5014
    goto if543_end1630
  if543_else1629:
    set $S5006, $P102
    iseq $I5008, $S5006, "subcapture"
    unless $I5008 goto if548_else1642 
    .const 'Sub' $P5015 = 'cuid_201_1360623852.546' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5021, $P5016
    goto if548_end1643
  if548_else1642:
    set $S5007, $P102
    iseq $I5009, $S5007, "quant"
    box $P5020, $I5009
    set $P5019, $P5020
    unless $I5009 goto if559_end1667 
    .const 'Sub' $P5017 = 'cuid_204_1360623852.546' 
    capture_lex $P5017
    $P5018 = $P5017()
    set $P5019, $P5018
  if559_end1667:
    set $P5021, $P5019
  if548_end1643:
    set $P5022, $P5021
  if543_end1630:
    set $P5023, $P5022
  if530_end1602:
  if525_end1588:
    set $P101[""], _lex_param_1
    delete $P101["$!from"]
    delete $P101["$!to"]
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_193_1360623852.546") :anon :lex :outer("cuid_194_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 911
    .param pmc _lex_param_0 
    .const 'Sub' $P5013 = 'cuid_192_1360623852.546' 
    capture_lex $P5013 
    .lex "%x", $P101 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_19 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 912
    find_lex $P5002, "$count"
    $P5003 = "&capnames"(_lex_param_0, $P5002)
    set $P101, $P5003
    set $P5004, $P101
    iter $P5006, $P101
  for_next1592:
    unless $P5006, for_done1594
    shift $P5008, $P5006
  for_redo1593:
    .const 'Sub' $P5007 = 'cuid_192_1360623852.546' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next1592
  for_done1594:
    set fb_tmp_19, $P101
    repr_defined $I5001, fb_tmp_19
    unless $I5001 goto if528_else1595 
    set $P5009, fb_tmp_19[""]
    set $P5011, $P5009
    goto if528_end1596
  if528_else1595:
    null $P5010
    set $P5011, $P5010
  if528_end1596:
    unless_null $P5011, vivi_5291597
    nqp_get_sc_object $P5012, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5011, $P5012
  vivi_5291597:
    store_lex "$count", $P5011
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_192_1360623852.546") :anon :lex :outer("cuid_193_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 913
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_18 
    find_lex $P5001, "%capnames"
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5003, "%capnames"
    set fb_tmp_18, $P5003
    repr_defined $I5001, fb_tmp_18
    unless $I5001 goto if526_else1589 
    $P5005 = _lex_param_0."key"()
    set $S5002, $P5005
    set $P5004, fb_tmp_18[$S5002]
    set $P5007, $P5004
    goto if526_end1590
  if526_else1589:
    null $P5006
    set $P5007, $P5006
  if526_end1590:
    unless_null $P5007, vivi_5271591
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5007, $P5008
  vivi_5271591:
    set $N5002, $P5007
    $P5009 = _lex_param_0."value"()
    set $N5003, $P5009
    add $N5001, $N5002, $N5003
    box $P5010, $N5001
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_197_1360623852.546") :anon :lex :outer("cuid_194_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 917
    .const 'Sub' $P5010 = 'cuid_196_1360623852.546' 
    capture_lex $P5010 
    .lex "$max", $P101 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
    find_lex $P5002, "$count"
    set $P101, $P5002
.annotate 'line', 919
    find_lex $P5006, "$ast"
    $P5007 = $P5006."list"()
    set $P5003, $P5007
    iter $P5005, $P5007
  for_next1626:
    unless $P5005, for_done1628
    shift $P5009, $P5005
  for_redo1627:
    .const 'Sub' $P5008 = 'cuid_196_1360623852.546' 
    capture_lex $P5008
    $P5003 = $P5008($P5009)
    goto for_next1626
  for_done1628:
    store_lex "$count", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_196_1360623852.546") :anon :lex :outer("cuid_197_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 919
    .param pmc _lex_param_0 
    .const 'Sub' $P5020 = 'cuid_195_1360623852.546' 
    capture_lex $P5020 
    .lex "%x", $P101 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_22 
    .local pmc fb_tmp_23 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 920
    find_lex $P5002, "$count"
    $P5003 = "&capnames"(_lex_param_0, $P5002)
    set $P101, $P5003
    set $P5004, $P101
    iter $P5006, $P101
  for_next1615:
    unless $P5006, for_done1617
    shift $P5008, $P5006
  for_redo1616:
    .const 'Sub' $P5007 = 'cuid_195_1360623852.546' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next1615
  for_done1617:
    set fb_tmp_22, $P101
    repr_defined $I5002, fb_tmp_22
    unless $I5002 goto if539_else1620 
    set $P5009, fb_tmp_22[""]
    set $P5011, $P5009
    goto if539_end1621
  if539_else1620:
    null $P5010
    set $P5011, $P5010
  if539_end1621:
    unless_null $P5011, vivi_5401622
    nqp_get_sc_object $P5012, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5011, $P5012
  vivi_5401622:
    set $N5001, $P5011
    find_lex $P5013, "$max"
    set $N5002, $P5013
    isgt $I5001, $N5001, $N5002
    box $P5019, $I5001
    set $P5018, $P5019
    unless $I5001 goto if538_end1619 
    set fb_tmp_23, $P101
    repr_defined $I5003, fb_tmp_23
    unless $I5003 goto if541_else1623 
    set $P5014, fb_tmp_23[""]
    set $P5016, $P5014
    goto if541_end1624
  if541_else1623:
    null $P5015
    set $P5016, $P5015
  if541_end1624:
    unless_null $P5016, vivi_5421625
    nqp_get_sc_object $P5017, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5016, $P5017
  vivi_5421625:
    store_lex "$max", $P5016
    set $P5018, $P5016
  if538_end1619:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_195_1360623852.546") :anon :lex :outer("cuid_196_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 921
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_20 
    .local pmc fb_tmp_21 
    find_lex $P5001, "%capnames"
.annotate 'line', 922
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5003, "%capnames"
    set fb_tmp_20, $P5003
    repr_defined $I5002, fb_tmp_20
    unless $I5002 goto if534_else1609 
    $P5005 = _lex_param_0."key"()
    set $S5002, $P5005
    set $P5004, fb_tmp_20[$S5002]
    set $P5007, $P5004
    goto if534_end1610
  if534_else1609:
    null $P5006
    set $P5007, $P5006
  if534_end1610:
    unless_null $P5007, vivi_5351611
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5007, $P5008
  vivi_5351611:
    set $N5001, $P5007
    set $N5002, 2
    islt $I5001, $N5001, $N5002
    set $I5005, $I5001
    unless $I5001 goto if533_end1608 
    find_lex $P5009, "%x"
    set fb_tmp_21, $P5009
    repr_defined $I5004, fb_tmp_21
    unless $I5004 goto if536_else1612 
    $P5011 = _lex_param_0."key"()
    set $S5003, $P5011
    set $P5010, fb_tmp_21[$S5003]
    set $P5013, $P5010
    goto if536_end1613
  if536_else1612:
    null $P5012
    set $P5013, $P5012
  if536_end1613:
    unless_null $P5013, vivi_5371614
    nqp_get_sc_object $P5014, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5013, $P5014
  vivi_5371614:
    set $N5003, $P5013
    set $N5004, 1
    iseq $I5003, $N5003, $N5004
    set $I5005, $I5003
  if533_end1608:
    unless $I5005 goto if532_else1605 
    set $I5006, 1
    goto if532_end1606
  if532_else1605:
    set $I5006, 2
  if532_end1606:
    box $P5015, $I5006
    set $P5001[$S5001], $P5015
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_199_1360623852.546") :anon :lex :outer("cuid_194_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 928
    .const 'Sub' $P5014 = 'cuid_198_1360623852.546' 
    capture_lex $P5014 
    .lex "$name", $P101 
    .lex "@names", $P102 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
.annotate 'line', 929
    find_lex $P5003, "$ast"
    $P5004 = $P5003."name"()
    set $P101, $P5004
    set $S5001, $P101
    iseq $I5001, $S5001, ""
    unless $I5001 goto if545_end1634 
.annotate 'line', 930
    find_lex $P5005, "$count"
    set $P101, $P5005
    find_lex $P5006, "$ast"
    $P5007 = $P5006."name"($P101)
  if545_end1634:
    set $S5002, $P101
    split $P5008, "=", $S5002
    set $P102, $P5008
    set $P5009, $P102
    iter $P5011, $P102
  for_next1639:
    unless $P5011, for_done1641
    shift $P5013, $P5011
  for_redo1640:
    .const 'Sub' $P5012 = 'cuid_198_1360623852.546' 
    capture_lex $P5012
    $P5009 = $P5012($P5013)
    goto for_next1639
  for_done1641:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_198_1360623852.546") :anon :lex :outer("cuid_199_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 932
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "0"
    set $I5003, $I5001
    if $I5001 goto unless547_end1638 
    set $N5001, _lex_param_0
    set $N5002, 0
    isgt $I5002, $N5001, $N5002
    set $I5003, $I5002
  unless547_end1638:
    unless $I5003 goto if546_end1636 
.annotate 'line', 933
    set $N5004, _lex_param_0
    set $N5005, 1
    add $N5003, $N5004, $N5005
    box $P5001, $N5003
    store_lex "$count", $P5001
  if546_end1636:
    find_lex $P5002, "%capnames"
    set $S5002, _lex_param_0
    box $P5003, 1
    set $P5002[$S5002], $P5003
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_201_1360623852.546") :anon :lex :outer("cuid_194_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 937
    .const 'Sub' $P5026 = 'cuid_200_1360623852.546' 
    capture_lex $P5026 
    .const 'Sub' $P5026 = 'cuid_202_1360623852.546' 
    capture_lex $P5026 
    .lex "%x", $P101 
    .local pmc fb_tmp_24 
    .local pmc fb_tmp_27 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 938
    find_lex $P5006, "$ast"
    $P5007 = $P5006."name"()
    set $S5001, $P5007
    split $P5005, " ", $S5001
    set $P5002, $P5005
    iter $P5004, $P5005
  for_next1648:
    unless $P5004, for_done1650
    shift $P5009, $P5004
  for_redo1649:
    .const 'Sub' $P5008 = 'cuid_200_1360623852.546' 
    capture_lex $P5008
    $P5002 = $P5008($P5009)
    goto for_next1648
  for_done1650:
.annotate 'line', 942
    find_lex $P5010, "$ast"
    set fb_tmp_24, $P5010
    repr_defined $I5001, fb_tmp_24
    unless $I5001 goto if551_else1651 
    set $P5011, fb_tmp_24[0]
    set $P5013, $P5011
    goto if551_end1652
  if551_else1651:
    null $P5012
    set $P5013, $P5012
  if551_end1652:
    unless_null $P5013, vivi_5521653
    nqp_get_sc_object $P5014, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5013, $P5014
  vivi_5521653:
    find_lex $P5015, "$count"
    $P5016 = "&capnames"($P5013, $P5015)
    set $P101, $P5016
    set $P5017, $P101
    iter $P5019, $P101
  for_next1660:
    unless $P5019, for_done1662
    shift $P5021, $P5019
  for_redo1661:
    .const 'Sub' $P5020 = 'cuid_202_1360623852.546' 
    capture_lex $P5020
    $P5017 = $P5020($P5021)
    goto for_next1660
  for_done1662:
    set fb_tmp_27, $P101
    repr_defined $I5002, fb_tmp_27
    unless $I5002 goto if557_else1663 
    set $P5022, fb_tmp_27[""]
    set $P5024, $P5022
    goto if557_end1664
  if557_else1663:
    null $P5023
    set $P5024, $P5023
  if557_end1664:
    unless_null $P5024, vivi_5581665
    nqp_get_sc_object $P5025, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5024, $P5025
  vivi_5581665:
    store_lex "$count", $P5024
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_200_1360623852.546") :anon :lex :outer("cuid_201_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 938
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "0"
    set $I5003, $I5001
    if $I5001 goto unless550_end1647 
    set $N5001, _lex_param_0
    set $N5002, 0
    isgt $I5002, $N5001, $N5002
    set $I5003, $I5002
  unless550_end1647:
    unless $I5003 goto if549_end1645 
.annotate 'line', 939
    set $N5004, _lex_param_0
    set $N5005, 1
    add $N5003, $N5004, $N5005
    box $P5001, $N5003
    store_lex "$count", $P5001
  if549_end1645:
    find_lex $P5002, "%capnames"
    set $S5002, _lex_param_0
    box $P5003, 1
    set $P5002[$S5002], $P5003
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_202_1360623852.546") :anon :lex :outer("cuid_201_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 943
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_25 
    .local pmc fb_tmp_26 
    find_lex $P5001, "%capnames"
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5003, "%capnames"
    set fb_tmp_25, $P5003
    repr_defined $I5001, fb_tmp_25
    unless $I5001 goto if553_else1654 
    $P5005 = _lex_param_0."key"()
    set $S5002, $P5005
    set $P5004, fb_tmp_25[$S5002]
    set $P5007, $P5004
    goto if553_end1655
  if553_else1654:
    null $P5006
    set $P5007, $P5006
  if553_end1655:
    unless_null $P5007, vivi_5541656
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5007, $P5008
  vivi_5541656:
    set $N5002, $P5007
    find_lex $P5009, "%x"
    set fb_tmp_26, $P5009
    repr_defined $I5002, fb_tmp_26
    unless $I5002 goto if555_else1657 
    $P5011 = _lex_param_0."key"()
    set $S5003, $P5011
    set $P5010, fb_tmp_26[$S5003]
    set $P5013, $P5010
    goto if555_end1658
  if555_else1657:
    null $P5012
    set $P5013, $P5012
  if555_end1658:
    unless_null $P5013, vivi_5561659
    nqp_get_sc_object $P5014, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5013, $P5014
  vivi_5561659:
    set $N5003, $P5013
    add $N5001, $N5002, $N5003
    box $P5015, $N5001
    set $P5001[$S5001], $P5015
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_204_1360623852.546") :anon :lex :outer("cuid_194_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 946
    .const 'Sub' $P5018 = 'cuid_203_1360623852.546' 
    capture_lex $P5018 
    .lex "%astcap", $P101 
    .local pmc fb_tmp_28 
    .local pmc fb_tmp_29 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 947
    find_lex $P5002, "$ast"
    set fb_tmp_28, $P5002
    repr_defined $I5001, fb_tmp_28
    unless $I5001 goto if560_else1668 
    set $P5003, fb_tmp_28[0]
    set $P5005, $P5003
    goto if560_end1669
  if560_else1668:
    null $P5004
    set $P5005, $P5004
  if560_end1669:
    unless_null $P5005, vivi_5611670
    nqp_get_sc_object $P5006, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5005, $P5006
  vivi_5611670:
    find_lex $P5007, "$count"
    $P5008 = "&capnames"($P5005, $P5007)
    set $P101, $P5008
    set $P5009, $P101
    iter $P5011, $P101
  for_next1671:
    unless $P5011, for_done1673
    shift $P5013, $P5011
  for_redo1672:
    .const 'Sub' $P5012 = 'cuid_203_1360623852.546' 
    capture_lex $P5012
    $P5009 = $P5012($P5013)
    goto for_next1671
  for_done1673:
    set fb_tmp_29, $P101
    repr_defined $I5002, fb_tmp_29
    unless $I5002 goto if562_else1674 
    set $P5014, fb_tmp_29[""]
    set $P5016, $P5014
    goto if562_end1675
  if562_else1674:
    null $P5015
    set $P5016, $P5015
  if562_end1675:
    unless_null $P5016, vivi_5631676
    nqp_get_sc_object $P5017, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5016, $P5017
  vivi_5631676:
    store_lex "$count", $P5016
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_203_1360623852.546") :anon :lex :outer("cuid_204_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 948
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "%capnames"
    set $S5001, _lex_param_0
    box $P5002, 2
    set $P5001[$S5001], $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_113_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 318
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_30 
    .local pmc fb_tmp_31 
    .local pmc fb_tmp_32 
    .local pmc fb_tmp_33 
    .local pmc fb_tmp_34 
    .local pmc fb_tmp_35 
.annotate 'line', 319
    nqp_get_sc_object $P5003, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5002, $P5003, "QAST"
    get_who $P5001, $P5002
    set fb_tmp_30, $P5001
    repr_defined $I5001, fb_tmp_30
    unless $I5001 goto if564_else1677 
    set $P5004, fb_tmp_30["CompUnit"]
    set $P5006, $P5004
    goto if564_end1678
  if564_else1677:
    null $P5005
    set $P5006, $P5005
  if564_end1678:
    unless_null $P5006, vivi_5651679
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_5651679:
.annotate 'line', 321
    find_dynamic_lex $P5008, "$*W"
    unless_null $P5008, fallback1680
    nqp_get_sc_object $P5010, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5009, $P5010
    set fb_tmp_31, $P5009
    repr_defined $I5002, fb_tmp_31
    unless $I5002 goto if566_else1681 
    set $P5011, fb_tmp_31["$W"]
    set $P5013, $P5011
    goto if566_end1682
  if566_else1681:
    null $P5012
    set $P5013, $P5012
  if566_end1682:
    unless_null $P5013, vivi_5671683
    nqp_get_sc_object $P5014, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5013, $P5014
  vivi_5671683:
    unless_null $P5013, vivi_5681684
    die "Contextual $*W not found"
    box $P5015, "Contextual $*W not found"
    set $P5013, $P5015
  vivi_5681684:
    set $P5008, $P5013
  fallback1680:
    $P5016 = $P5008."sc"()
.annotate 'line', 322
    find_dynamic_lex $P5017, "$*W"
    unless_null $P5017, fallback1685
    nqp_get_sc_object $P5019, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5018, $P5019
    set fb_tmp_32, $P5018
    repr_defined $I5003, fb_tmp_32
    unless $I5003 goto if569_else1686 
    set $P5020, fb_tmp_32["$W"]
    set $P5022, $P5020
    goto if569_end1687
  if569_else1686:
    null $P5021
    set $P5022, $P5021
  if569_end1687:
    unless_null $P5022, vivi_5701688
    nqp_get_sc_object $P5023, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5022, $P5023
  vivi_5701688:
    unless_null $P5022, vivi_5711689
    die "Contextual $*W not found"
    box $P5024, "Contextual $*W not found"
    set $P5022, $P5024
  vivi_5711689:
    set $P5017, $P5022
  fallback1685:
    $P5025 = $P5017."code_ref_blocks"()
.annotate 'line', 324
    find_dynamic_lex $P5026, "$*W"
    unless_null $P5026, fallback1690
    nqp_get_sc_object $P5028, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5027, $P5028
    set fb_tmp_33, $P5027
    repr_defined $I5004, fb_tmp_33
    unless $I5004 goto if572_else1691 
    set $P5029, fb_tmp_33["$W"]
    set $P5031, $P5029
    goto if572_end1692
  if572_else1691:
    null $P5030
    set $P5031, $P5030
  if572_end1692:
    unless_null $P5031, vivi_5731693
    nqp_get_sc_object $P5032, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5031, $P5032
  vivi_5731693:
    unless_null $P5031, vivi_5741694
    die "Contextual $*W not found"
    box $P5033, "Contextual $*W not found"
    set $P5031, $P5033
  vivi_5741694:
    set $P5026, $P5031
  fallback1690:
    $P5034 = $P5026."load_dependency_tasks"()
.annotate 'line', 325
    find_dynamic_lex $P5035, "$*W"
    unless_null $P5035, fallback1695
    nqp_get_sc_object $P5037, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5036, $P5037
    set fb_tmp_34, $P5036
    repr_defined $I5005, fb_tmp_34
    unless $I5005 goto if575_else1696 
    set $P5038, fb_tmp_34["$W"]
    set $P5040, $P5038
    goto if575_end1697
  if575_else1696:
    null $P5039
    set $P5040, $P5039
  if575_end1697:
    unless_null $P5040, vivi_5761698
    nqp_get_sc_object $P5041, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5040, $P5041
  vivi_5761698:
    unless_null $P5040, vivi_5771699
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5040, $P5042
  vivi_5771699:
    set $P5035, $P5040
  fallback1695:
    $P5043 = $P5035."fixup_tasks"()
.annotate 'line', 326
    nqp_decontainerize $P5044, _lex_param_0
    unless_null _lex_param_1, fallback1702
    nqp_get_sc_object $P5045, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5045
  fallback1702:
    set fb_tmp_35, _lex_param_1
    repr_defined $I5006, fb_tmp_35
    unless $I5006 goto if578_else1700 
    set $P5046, fb_tmp_35["nibbler"]
    set $P5048, $P5046
    goto if578_end1701
  if578_else1700:
    null $P5047
    set $P5048, $P5047
  if578_end1701:
    unless_null $P5048, vivi_5791703
    nqp_get_sc_object $P5049, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5048, $P5049
  vivi_5791703:
    $P5050 = $P5048."ast"()
    $P5051 = $P5044."qbuildsub"($P5050, 1 :named("anon"), 1 :named("addself"))
    $P5052 = $P5006."new"($P5051, "P6Regex" :named("hll"), $P5016 :named("sc"), $P5025 :named("code_ref_blocks"), 0 :named("compilation_mode"), $P5034 :named("pre_deserialize"), $P5043 :named("post_deserialize"))
    $P5053 = _lex_param_1."!make"($P5052)
    .return ($P5053) 
.end
.HLL "nqp"
.namespace []
.sub "nibbler" :subid("cuid_114_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 330
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_36 
    unless_null _lex_param_1, fallback1706
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5001
  fallback1706:
    set fb_tmp_36, _lex_param_1
    repr_defined $I5001, fb_tmp_36
    unless $I5001 goto if580_else1704 
    set $P5002, fb_tmp_36["termaltseq"]
    set $P5004, $P5002
    goto if580_end1705
  if580_else1704:
    null $P5003
    set $P5004, $P5003
  if580_end1705:
    unless_null $P5004, vivi_5811707
    nqp_get_sc_object $P5005, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5004, $P5005
  vivi_5811707:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "termaltseq" :subid("cuid_115_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 332
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5036 = 'cuid_205_1360623852.546' 
    capture_lex $P5036 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_37 
    .local pmc fb_tmp_38 
    .local pmc fb_tmp_39 
    .local pmc fb_tmp_40 
    .local pmc fb_tmp_41 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 333
    unless_null _lex_param_1, fallback1712
    nqp_get_sc_object $P5002, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5002
  fallback1712:
    set fb_tmp_38, _lex_param_1
    repr_defined $I5002, fb_tmp_38
    unless $I5002 goto if583_else1710 
    set $P5003, fb_tmp_38["termconjseq"]
    set $P5005, $P5003
    goto if583_end1711
  if583_else1710:
    null $P5004
    set $P5005, $P5004
  if583_end1711:
    unless_null $P5005, vivi_5841713
    nqp_get_sc_object $P5006, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5005, $P5006
  vivi_5841713:
    set fb_tmp_37, $P5005
    repr_defined $I5001, fb_tmp_37
    unless $I5001 goto if582_else1708 
    set $P5007, fb_tmp_37[0]
    set $P5009, $P5007
    goto if582_end1709
  if582_else1708:
    null $P5008
    set $P5009, $P5008
  if582_end1709:
    unless_null $P5009, vivi_5851714
    nqp_get_sc_object $P5010, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5009, $P5010
  vivi_5851714:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    unless_null _lex_param_1, fallback1719
    nqp_get_sc_object $P5012, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5012
  fallback1719:
    set fb_tmp_39, _lex_param_1
    repr_defined $I5004, fb_tmp_39
    unless $I5004 goto if587_else1717 
    set $P5013, fb_tmp_39["termconjseq"]
    set $P5015, $P5013
    goto if587_end1718
  if587_else1717:
    null $P5014
    set $P5015, $P5014
  if587_end1718:
    unless_null $P5015, vivi_5881720
    nqp_get_sc_object $P5016, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5015, $P5016
  vivi_5881720:
    set $N5001, $P5015
    set $N5002, 1
    isgt $I5003, $N5001, $N5002
    unless $I5003 goto if586_end1716 
.annotate 'line', 334
.annotate 'line', 335
    nqp_get_sc_object $P5019, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set fb_tmp_40, $P5017
    repr_defined $I5005, fb_tmp_40
    unless $I5005 goto if589_else1721 
    set $P5020, fb_tmp_40["Regex"]
    set $P5022, $P5020
    goto if589_end1722
  if589_else1721:
    null $P5021
    set $P5022, $P5021
  if589_end1722:
    unless_null $P5022, vivi_5901723
    nqp_get_sc_object $P5023, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5022, $P5023
  vivi_5901723:
    $P5024 = $P5022."new"("altseq" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5024
    unless_null _lex_param_1, fallback1726
    nqp_get_sc_object $P5028, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5028
  fallback1726:
    set fb_tmp_41, _lex_param_1
    repr_defined $I5006, fb_tmp_41
    unless $I5006 goto if591_else1724 
    set $P5029, fb_tmp_41["termconjseq"]
    set $P5031, $P5029
    goto if591_end1725
  if591_else1724:
    null $P5030
    set $P5031, $P5030
  if591_end1725:
    unless_null $P5031, vivi_5921727
    nqp_get_sc_object $P5032, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5031, $P5032
  vivi_5921727:
    set $P5025, $P5031
    iter $P5027, $P5031
  for_next1728:
    unless $P5027, for_done1730
    shift $P5034, $P5027
  for_redo1729:
    .const 'Sub' $P5033 = 'cuid_205_1360623852.546' 
    capture_lex $P5033
    $P5025 = $P5033($P5034)
    goto for_next1728
  for_done1730:
  if586_end1716:
.annotate 'line', 338
    $P5035 = _lex_param_1."!make"($P101)
    .return ($P5035) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_205_1360623852.546") :anon :lex :outer("cuid_115_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 336
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termconjseq" :subid("cuid_116_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 341
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5036 = 'cuid_206_1360623852.546' 
    capture_lex $P5036 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_42 
    .local pmc fb_tmp_43 
    .local pmc fb_tmp_44 
    .local pmc fb_tmp_45 
    .local pmc fb_tmp_46 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 342
    unless_null _lex_param_1, fallback1735
    nqp_get_sc_object $P5002, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5002
  fallback1735:
    set fb_tmp_43, _lex_param_1
    repr_defined $I5002, fb_tmp_43
    unless $I5002 goto if594_else1733 
    set $P5003, fb_tmp_43["termalt"]
    set $P5005, $P5003
    goto if594_end1734
  if594_else1733:
    null $P5004
    set $P5005, $P5004
  if594_end1734:
    unless_null $P5005, vivi_5951736
    nqp_get_sc_object $P5006, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5005, $P5006
  vivi_5951736:
    set fb_tmp_42, $P5005
    repr_defined $I5001, fb_tmp_42
    unless $I5001 goto if593_else1731 
    set $P5007, fb_tmp_42[0]
    set $P5009, $P5007
    goto if593_end1732
  if593_else1731:
    null $P5008
    set $P5009, $P5008
  if593_end1732:
    unless_null $P5009, vivi_5961737
    nqp_get_sc_object $P5010, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5009, $P5010
  vivi_5961737:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    unless_null _lex_param_1, fallback1742
    nqp_get_sc_object $P5012, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5012
  fallback1742:
    set fb_tmp_44, _lex_param_1
    repr_defined $I5004, fb_tmp_44
    unless $I5004 goto if598_else1740 
    set $P5013, fb_tmp_44["termalt"]
    set $P5015, $P5013
    goto if598_end1741
  if598_else1740:
    null $P5014
    set $P5015, $P5014
  if598_end1741:
    unless_null $P5015, vivi_5991743
    nqp_get_sc_object $P5016, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5015, $P5016
  vivi_5991743:
    set $N5001, $P5015
    set $N5002, 1
    isgt $I5003, $N5001, $N5002
    unless $I5003 goto if597_end1739 
.annotate 'line', 343
.annotate 'line', 344
    nqp_get_sc_object $P5019, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set fb_tmp_45, $P5017
    repr_defined $I5005, fb_tmp_45
    unless $I5005 goto if600_else1744 
    set $P5020, fb_tmp_45["Regex"]
    set $P5022, $P5020
    goto if600_end1745
  if600_else1744:
    null $P5021
    set $P5022, $P5021
  if600_end1745:
    unless_null $P5022, vivi_6011746
    nqp_get_sc_object $P5023, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5022, $P5023
  vivi_6011746:
    $P5024 = $P5022."new"("conjseq" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5024
    unless_null _lex_param_1, fallback1749
    nqp_get_sc_object $P5028, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5028
  fallback1749:
    set fb_tmp_46, _lex_param_1
    repr_defined $I5006, fb_tmp_46
    unless $I5006 goto if602_else1747 
    set $P5029, fb_tmp_46["termalt"]
    set $P5031, $P5029
    goto if602_end1748
  if602_else1747:
    null $P5030
    set $P5031, $P5030
  if602_end1748:
    unless_null $P5031, vivi_6031750
    nqp_get_sc_object $P5032, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5031, $P5032
  vivi_6031750:
    set $P5025, $P5031
    iter $P5027, $P5031
  for_next1751:
    unless $P5027, for_done1753
    shift $P5034, $P5027
  for_redo1752:
    .const 'Sub' $P5033 = 'cuid_206_1360623852.546' 
    capture_lex $P5033
    $P5025 = $P5033($P5034)
    goto for_next1751
  for_done1753:
  if597_end1739:
.annotate 'line', 347
    $P5035 = _lex_param_1."!make"($P101)
    .return ($P5035) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_206_1360623852.546") :anon :lex :outer("cuid_116_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 345
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termalt" :subid("cuid_117_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 350
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5036 = 'cuid_207_1360623852.546' 
    capture_lex $P5036 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_47 
    .local pmc fb_tmp_48 
    .local pmc fb_tmp_49 
    .local pmc fb_tmp_50 
    .local pmc fb_tmp_51 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 351
    unless_null _lex_param_1, fallback1758
    nqp_get_sc_object $P5002, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5002
  fallback1758:
    set fb_tmp_48, _lex_param_1
    repr_defined $I5002, fb_tmp_48
    unless $I5002 goto if605_else1756 
    set $P5003, fb_tmp_48["termconj"]
    set $P5005, $P5003
    goto if605_end1757
  if605_else1756:
    null $P5004
    set $P5005, $P5004
  if605_end1757:
    unless_null $P5005, vivi_6061759
    nqp_get_sc_object $P5006, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5005, $P5006
  vivi_6061759:
    set fb_tmp_47, $P5005
    repr_defined $I5001, fb_tmp_47
    unless $I5001 goto if604_else1754 
    set $P5007, fb_tmp_47[0]
    set $P5009, $P5007
    goto if604_end1755
  if604_else1754:
    null $P5008
    set $P5009, $P5008
  if604_end1755:
    unless_null $P5009, vivi_6071760
    nqp_get_sc_object $P5010, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5009, $P5010
  vivi_6071760:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    unless_null _lex_param_1, fallback1765
    nqp_get_sc_object $P5012, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5012
  fallback1765:
    set fb_tmp_49, _lex_param_1
    repr_defined $I5004, fb_tmp_49
    unless $I5004 goto if609_else1763 
    set $P5013, fb_tmp_49["termconj"]
    set $P5015, $P5013
    goto if609_end1764
  if609_else1763:
    null $P5014
    set $P5015, $P5014
  if609_end1764:
    unless_null $P5015, vivi_6101766
    nqp_get_sc_object $P5016, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5015, $P5016
  vivi_6101766:
    set $N5001, $P5015
    set $N5002, 1
    isgt $I5003, $N5001, $N5002
    unless $I5003 goto if608_end1762 
.annotate 'line', 352
.annotate 'line', 353
    nqp_get_sc_object $P5019, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set fb_tmp_50, $P5017
    repr_defined $I5005, fb_tmp_50
    unless $I5005 goto if611_else1767 
    set $P5020, fb_tmp_50["Regex"]
    set $P5022, $P5020
    goto if611_end1768
  if611_else1767:
    null $P5021
    set $P5022, $P5021
  if611_end1768:
    unless_null $P5022, vivi_6121769
    nqp_get_sc_object $P5023, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5022, $P5023
  vivi_6121769:
    $P5024 = $P5022."new"("alt" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5024
    unless_null _lex_param_1, fallback1772
    nqp_get_sc_object $P5028, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5028
  fallback1772:
    set fb_tmp_51, _lex_param_1
    repr_defined $I5006, fb_tmp_51
    unless $I5006 goto if613_else1770 
    set $P5029, fb_tmp_51["termconj"]
    set $P5031, $P5029
    goto if613_end1771
  if613_else1770:
    null $P5030
    set $P5031, $P5030
  if613_end1771:
    unless_null $P5031, vivi_6141773
    nqp_get_sc_object $P5032, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5031, $P5032
  vivi_6141773:
    set $P5025, $P5031
    iter $P5027, $P5031
  for_next1774:
    unless $P5027, for_done1776
    shift $P5034, $P5027
  for_redo1775:
    .const 'Sub' $P5033 = 'cuid_207_1360623852.546' 
    capture_lex $P5033
    $P5025 = $P5033($P5034)
    goto for_next1774
  for_done1776:
  if608_end1762:
.annotate 'line', 356
    $P5035 = _lex_param_1."!make"($P101)
    .return ($P5035) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_207_1360623852.546") :anon :lex :outer("cuid_117_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 354
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termconj" :subid("cuid_118_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 359
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5036 = 'cuid_208_1360623852.546' 
    capture_lex $P5036 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_52 
    .local pmc fb_tmp_53 
    .local pmc fb_tmp_54 
    .local pmc fb_tmp_55 
    .local pmc fb_tmp_56 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 360
    unless_null _lex_param_1, fallback1781
    nqp_get_sc_object $P5002, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5002
  fallback1781:
    set fb_tmp_53, _lex_param_1
    repr_defined $I5002, fb_tmp_53
    unless $I5002 goto if616_else1779 
    set $P5003, fb_tmp_53["termish"]
    set $P5005, $P5003
    goto if616_end1780
  if616_else1779:
    null $P5004
    set $P5005, $P5004
  if616_end1780:
    unless_null $P5005, vivi_6171782
    nqp_get_sc_object $P5006, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5005, $P5006
  vivi_6171782:
    set fb_tmp_52, $P5005
    repr_defined $I5001, fb_tmp_52
    unless $I5001 goto if615_else1777 
    set $P5007, fb_tmp_52[0]
    set $P5009, $P5007
    goto if615_end1778
  if615_else1777:
    null $P5008
    set $P5009, $P5008
  if615_end1778:
    unless_null $P5009, vivi_6181783
    nqp_get_sc_object $P5010, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5009, $P5010
  vivi_6181783:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    unless_null _lex_param_1, fallback1788
    nqp_get_sc_object $P5012, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5012
  fallback1788:
    set fb_tmp_54, _lex_param_1
    repr_defined $I5004, fb_tmp_54
    unless $I5004 goto if620_else1786 
    set $P5013, fb_tmp_54["termish"]
    set $P5015, $P5013
    goto if620_end1787
  if620_else1786:
    null $P5014
    set $P5015, $P5014
  if620_end1787:
    unless_null $P5015, vivi_6211789
    nqp_get_sc_object $P5016, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5015, $P5016
  vivi_6211789:
    set $N5001, $P5015
    set $N5002, 1
    isgt $I5003, $N5001, $N5002
    unless $I5003 goto if619_end1785 
.annotate 'line', 361
.annotate 'line', 362
    nqp_get_sc_object $P5019, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set fb_tmp_55, $P5017
    repr_defined $I5005, fb_tmp_55
    unless $I5005 goto if622_else1790 
    set $P5020, fb_tmp_55["Regex"]
    set $P5022, $P5020
    goto if622_end1791
  if622_else1790:
    null $P5021
    set $P5022, $P5021
  if622_end1791:
    unless_null $P5022, vivi_6231792
    nqp_get_sc_object $P5023, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5022, $P5023
  vivi_6231792:
    $P5024 = $P5022."new"("conj" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5024
    unless_null _lex_param_1, fallback1795
    nqp_get_sc_object $P5028, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5028
  fallback1795:
    set fb_tmp_56, _lex_param_1
    repr_defined $I5006, fb_tmp_56
    unless $I5006 goto if624_else1793 
    set $P5029, fb_tmp_56["termish"]
    set $P5031, $P5029
    goto if624_end1794
  if624_else1793:
    null $P5030
    set $P5031, $P5030
  if624_end1794:
    unless_null $P5031, vivi_6251796
    nqp_get_sc_object $P5032, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5031, $P5032
  vivi_6251796:
    set $P5025, $P5031
    iter $P5027, $P5031
  for_next1797:
    unless $P5027, for_done1799
    shift $P5034, $P5027
  for_redo1798:
    .const 'Sub' $P5033 = 'cuid_208_1360623852.546' 
    capture_lex $P5033
    $P5025 = $P5033($P5034)
    goto for_next1797
  for_done1799:
  if619_end1785:
.annotate 'line', 365
    $P5035 = _lex_param_1."!make"($P101)
    .return ($P5035) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_208_1360623852.546") :anon :lex :outer("cuid_118_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 363
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termish" :subid("cuid_119_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 368
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5023 = 'cuid_209_1360623852.546' 
    capture_lex $P5023 
    .lex "$qast", $P101 
    .lex "$lastlit", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_57 
    .local pmc fb_tmp_58 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P102, $P5002
.annotate 'line', 369
    nqp_get_sc_object $P5005, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set fb_tmp_57, $P5003
    repr_defined $I5001, fb_tmp_57
    unless $I5001 goto if626_else1800 
    set $P5006, fb_tmp_57["Regex"]
    set $P5008, $P5006
    goto if626_end1801
  if626_else1800:
    null $P5007
    set $P5008, $P5007
  if626_end1801:
    unless_null $P5008, vivi_6271802
    nqp_get_sc_object $P5009, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5008, $P5009
  vivi_6271802:
    $P5010 = $P5008."new"("concat" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5010
    box $P5011, 0
    set $P102, $P5011
    unless_null _lex_param_1, fallback1805
    nqp_get_sc_object $P5015, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5015
  fallback1805:
    set fb_tmp_58, _lex_param_1
    repr_defined $I5002, fb_tmp_58
    unless $I5002 goto if628_else1803 
    set $P5016, fb_tmp_58["noun"]
    set $P5018, $P5016
    goto if628_end1804
  if628_else1803:
    null $P5017
    set $P5018, $P5017
  if628_end1804:
    unless_null $P5018, vivi_6291806
    nqp_get_sc_object $P5019, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5018, $P5019
  vivi_6291806:
    set $P5012, $P5018
    iter $P5014, $P5018
  for_next1837:
    unless $P5014, for_done1839
    shift $P5021, $P5014
  for_redo1838:
    .const 'Sub' $P5020 = 'cuid_209_1360623852.546' 
    capture_lex $P5020
    $P5012 = $P5020($P5021)
    goto for_next1837
  for_done1839:
.annotate 'line', 386
    $P5022 = _lex_param_1."!make"($P101)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_209_1360623852.546") :anon :lex :outer("cuid_119_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 371
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_59 
    .local pmc fb_tmp_60 
    .local pmc fb_tmp_61 
    .local pmc fb_tmp_62 
    .local pmc fb_tmp_63 
    .local pmc fb_tmp_64 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 372
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
    set $P5050, $P101
    unless $P101 goto if630_end1808 
.annotate 'line', 373
    find_lex $P5003, "$lastlit"
    set $P5005, $P5003
    unless $P5003 goto if633_end1814 
.annotate 'line', 374
    $P5004 = $P101."rxtype"()
    set $S5001, $P5004
    iseq $I5001, $S5001, "literal"
    box $P5006, $I5001
    set $P5005, $P5006
  if633_end1814:
    set $P5019, $P5005
    unless $P5005 goto if632_end1812 
.annotate 'line', 375
    nqp_get_sc_object $P5009, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set fb_tmp_59, $P5007
    repr_defined $I5003, fb_tmp_59
    unless $I5003 goto if634_else1815 
    set $P5010, fb_tmp_59["Node"]
    set $P5012, $P5010
    goto if634_end1816
  if634_else1815:
    null $P5011
    set $P5012, $P5011
  if634_end1816:
    unless_null $P5012, vivi_6351817
    nqp_get_sc_object $P5013, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5012, $P5013
  vivi_6351817:
    set fb_tmp_60, $P101
    repr_defined $I5004, fb_tmp_60
    unless $I5004 goto if636_else1818 
    set $P5014, fb_tmp_60[0]
    set $P5016, $P5014
    goto if636_end1819
  if636_else1818:
    null $P5015
    set $P5016, $P5015
  if636_end1819:
    unless_null $P5016, vivi_6371820
    nqp_get_sc_object $P5017, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5016, $P5017
  vivi_6371820:
    $P5018 = $P5012."ACCEPTS"($P5016)
    isfalse $I5002, $P5018
    box $P5020, $I5002
    set $P5019, $P5020
  if632_end1812:
    unless $P5019 goto if631_else1809 
    find_lex $P5021, "$lastlit"
    find_lex $P5022, "$lastlit"
    set fb_tmp_61, $P5022
    repr_defined $I5005, fb_tmp_61
    unless $I5005 goto if638_else1821 
    set $P5023, fb_tmp_61[0]
    set $P5025, $P5023
    goto if638_end1822
  if638_else1821:
    null $P5024
    set $P5025, $P5024
  if638_end1822:
    unless_null $P5025, vivi_6391823
    nqp_get_sc_object $P5026, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5025, $P5026
  vivi_6391823:
    set $S5003, $P5025
    set fb_tmp_62, $P101
    repr_defined $I5006, fb_tmp_62
    unless $I5006 goto if640_else1824 
    set $P5027, fb_tmp_62[0]
    set $P5029, $P5027
    goto if640_end1825
  if640_else1824:
    null $P5028
    set $P5029, $P5028
  if640_end1825:
    unless_null $P5029, vivi_6411826
    nqp_get_sc_object $P5030, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5029, $P5030
  vivi_6411826:
    set $S5004, $P5029
    concat $S5002, $S5003, $S5004
    box $P5031, $S5002
    set $P5021[0], $P5031
    set $P5049, $P5031
    goto if631_end1810
  if631_else1809:
.annotate 'line', 378
.annotate 'line', 379
    find_lex $P5032, "$qast"
    $P5033 = _lex_param_0."ast"()
    $P5032."push"($P5033)
.annotate 'line', 380
    $P5034 = $P101."rxtype"()
    set $S5005, $P5034
    iseq $I5007, $S5005, "literal"
    set $I5011, $I5007
    unless $I5007 goto if643_end1830 
.annotate 'line', 381
    nqp_get_sc_object $P5037, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set fb_tmp_63, $P5035
    repr_defined $I5009, fb_tmp_63
    unless $I5009 goto if644_else1831 
    set $P5038, fb_tmp_63["Node"]
    set $P5040, $P5038
    goto if644_end1832
  if644_else1831:
    null $P5039
    set $P5040, $P5039
  if644_end1832:
    unless_null $P5040, vivi_6451833
    nqp_get_sc_object $P5041, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5040, $P5041
  vivi_6451833:
    set fb_tmp_64, $P101
    repr_defined $I5010, fb_tmp_64
    unless $I5010 goto if646_else1834 
    set $P5042, fb_tmp_64[0]
    set $P5044, $P5042
    goto if646_end1835
  if646_else1834:
    null $P5043
    set $P5044, $P5043
  if646_end1835:
    unless_null $P5044, vivi_6471836
    nqp_get_sc_object $P5045, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5044, $P5045
  vivi_6471836:
    $P5046 = $P5040."ACCEPTS"($P5044)
    isfalse $I5008, $P5046
    set $I5011, $I5008
  if643_end1830:
    unless $I5011 goto if642_else1827 
    set $P5047, $P101
    goto if642_end1828
  if642_else1827:
    box $P5048, 0
    set $P5047, $P5048
  if642_end1828:
    store_lex "$lastlit", $P5047
    set $P5049, $P5047
  if631_end1810:
    set $P5050, $P5049
  if630_end1808:
    .return ($P5050) 
.end
.HLL "nqp"
.namespace []
.sub "quantified_atom" :subid("cuid_120_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 389
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5124 = 'cuid_210_1360623852.546' 
    capture_lex $P5124 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_65 
    .local pmc fb_tmp_66 
    .local pmc fb_tmp_69 
    .local pmc fb_tmp_70 
    .local pmc fb_tmp_71 
    .local pmc fb_tmp_72 
    .local pmc fb_tmp_73 
    .local pmc fb_tmp_74 
    .local pmc fb_tmp_75 
    .local pmc fb_tmp_76 
    .local pmc fb_tmp_77 
    .local pmc fb_tmp_78 
    .local pmc fb_tmp_79 
    .local pmc fb_tmp_80 
    .local pmc fb_tmp_81 
    .local pmc fb_tmp_82 
    .local pmc fb_tmp_83 
    .local pmc fb_tmp_84 
    .local pmc fb_tmp_85 
    .local pmc fb_tmp_86 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 390
    unless_null _lex_param_1, fallback1842
    nqp_get_sc_object $P5002, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5002
  fallback1842:
    set fb_tmp_65, _lex_param_1
    repr_defined $I5001, fb_tmp_65
    unless $I5001 goto if648_else1840 
    set $P5003, fb_tmp_65["atom"]
    set $P5005, $P5003
    goto if648_end1841
  if648_else1840:
    null $P5004
    set $P5005, $P5004
  if648_end1841:
    unless_null $P5005, vivi_6491843
    nqp_get_sc_object $P5006, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5005, $P5006
  vivi_6491843:
    $P5007 = $P5005."ast"()
    set $P101, $P5007
    unless_null _lex_param_1, fallback1848
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5008
  fallback1848:
    set fb_tmp_66, _lex_param_1
    repr_defined $I5002, fb_tmp_66
    unless $I5002 goto if651_else1846 
    set $P5009, fb_tmp_66["quantifier"]
    set $P5011, $P5009
    goto if651_end1847
  if651_else1846:
    null $P5010
    set $P5011, $P5010
  if651_end1847:
    unless_null $P5011, vivi_6521849
    nqp_get_sc_object $P5012, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5011, $P5012
  vivi_6521849:
    unless $P5011 goto if650_end1845 
    .const 'Sub' $P5013 = 'cuid_210_1360623852.546' 
    capture_lex $P5013
    $P5014 = $P5013()
  if650_end1845:
    unless_null _lex_param_1, fallback1861
    nqp_get_sc_object $P5015, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5015
  fallback1861:
    set fb_tmp_69, _lex_param_1
    repr_defined $I5003, fb_tmp_69
    unless $I5003 goto if658_else1859 
    set $P5016, fb_tmp_69["separator"]
    set $P5018, $P5016
    goto if658_end1860
  if658_else1859:
    null $P5017
    set $P5018, $P5017
  if658_end1860:
    unless_null $P5018, vivi_6591862
    nqp_get_sc_object $P5019, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5018, $P5019
  vivi_6591862:
    unless $P5018 goto if657_end1858 
.annotate 'line', 396
.annotate 'line', 397
    $P5020 = $P101."rxtype"()
    set $S5001, $P5020
    iseq $I5004, $S5001, "quant"
    if $I5004 goto unless660_end1864 
.annotate 'line', 398
    $P5021 = _lex_param_1."CURSOR"()
    unless_null _lex_param_1, fallback1871
    nqp_get_sc_object $P5022, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5022
  fallback1871:
    set fb_tmp_72, _lex_param_1
    repr_defined $I5007, fb_tmp_72
    unless $I5007 goto if663_else1869 
    set $P5023, fb_tmp_72["separator"]
    set $P5025, $P5023
    goto if663_end1870
  if663_else1869:
    null $P5024
    set $P5025, $P5024
  if663_end1870:
    unless_null $P5025, vivi_6641872
    nqp_get_sc_object $P5026, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5025, $P5026
  vivi_6641872:
    set fb_tmp_71, $P5025
    repr_defined $I5006, fb_tmp_71
    unless $I5006 goto if662_else1867 
    set $P5027, fb_tmp_71[0]
    set $P5029, $P5027
    goto if662_end1868
  if662_else1867:
    null $P5028
    set $P5029, $P5028
  if662_end1868:
    unless_null $P5029, vivi_6651873
    nqp_get_sc_object $P5030, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5029, $P5030
  vivi_6651873:
    set fb_tmp_70, $P5029
    repr_defined $I5005, fb_tmp_70
    unless $I5005 goto if661_else1865 
    set $P5031, fb_tmp_70["septype"]
    set $P5033, $P5031
    goto if661_end1866
  if661_else1865:
    null $P5032
    set $P5033, $P5032
  if661_end1866:
    unless_null $P5033, vivi_6661874
    nqp_get_sc_object $P5034, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5033, $P5034
  vivi_6661874:
    set $S5004, $P5033
    concat $S5003, "'", $S5004
    concat $S5002, $S5003, "' many only be used immediately following a quantifier"
    $P5035 = $P5021."panic"($S5002)
  unless660_end1864:
.annotate 'line', 401
    unless_null _lex_param_1, fallback1879
    nqp_get_sc_object $P5036, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5036
  fallback1879:
    set fb_tmp_74, _lex_param_1
    repr_defined $I5009, fb_tmp_74
    unless $I5009 goto if668_else1877 
    set $P5037, fb_tmp_74["separator"]
    set $P5039, $P5037
    goto if668_end1878
  if668_else1877:
    null $P5038
    set $P5039, $P5038
  if668_end1878:
    unless_null $P5039, vivi_6691880
    nqp_get_sc_object $P5040, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5039, $P5040
  vivi_6691880:
    set fb_tmp_73, $P5039
    repr_defined $I5008, fb_tmp_73
    unless $I5008 goto if667_else1875 
    set $P5041, fb_tmp_73[0]
    set $P5043, $P5041
    goto if667_end1876
  if667_else1875:
    null $P5042
    set $P5043, $P5042
  if667_end1876:
    unless_null $P5043, vivi_6701881
    nqp_get_sc_object $P5044, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5043, $P5044
  vivi_6701881:
    $P5045 = $P5043."ast"()
    $P101."push"($P5045)
    unless_null _lex_param_1, fallback1890
    nqp_get_sc_object $P5046, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5046
  fallback1890:
    set fb_tmp_77, _lex_param_1
    repr_defined $I5013, fb_tmp_77
    unless $I5013 goto if674_else1888 
    set $P5047, fb_tmp_77["separator"]
    set $P5049, $P5047
    goto if674_end1889
  if674_else1888:
    null $P5048
    set $P5049, $P5048
  if674_end1889:
    unless_null $P5049, vivi_6751891
    nqp_get_sc_object $P5050, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5049, $P5050
  vivi_6751891:
    set fb_tmp_76, $P5049
    repr_defined $I5012, fb_tmp_76
    unless $I5012 goto if673_else1886 
    set $P5051, fb_tmp_76[0]
    set $P5053, $P5051
    goto if673_end1887
  if673_else1886:
    null $P5052
    set $P5053, $P5052
  if673_end1887:
    unless_null $P5053, vivi_6761892
    nqp_get_sc_object $P5054, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5053, $P5054
  vivi_6761892:
    set fb_tmp_75, $P5053
    repr_defined $I5011, fb_tmp_75
    unless $I5011 goto if672_else1884 
    set $P5055, fb_tmp_75["septype"]
    set $P5057, $P5055
    goto if672_end1885
  if672_else1884:
    null $P5056
    set $P5057, $P5056
  if672_end1885:
    unless_null $P5057, vivi_6771893
    nqp_get_sc_object $P5058, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5057, $P5058
  vivi_6771893:
    set $S5005, $P5057
    iseq $I5010, $S5005, "%%"
    box $P5086, $I5010
    set $P5085, $P5086
    unless $I5010 goto if671_end1883 
.annotate 'line', 402
.annotate 'line', 403
    nqp_get_sc_object $P5061, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5060, $P5061, "QAST"
    get_who $P5059, $P5060
    set fb_tmp_78, $P5059
    repr_defined $I5014, fb_tmp_78
    unless $I5014 goto if678_else1894 
    set $P5062, fb_tmp_78["Regex"]
    set $P5064, $P5062
    goto if678_end1895
  if678_else1894:
    null $P5063
    set $P5064, $P5063
  if678_end1895:
    unless_null $P5064, vivi_6791896
    nqp_get_sc_object $P5065, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5064, $P5065
  vivi_6791896:
.annotate 'line', 404
    nqp_get_sc_object $P5068, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5067, $P5068, "QAST"
    get_who $P5066, $P5067
    set fb_tmp_79, $P5066
    repr_defined $I5015, fb_tmp_79
    unless $I5015 goto if680_else1897 
    set $P5069, fb_tmp_79["Regex"]
    set $P5071, $P5069
    goto if680_end1898
  if680_else1897:
    null $P5070
    set $P5071, $P5070
  if680_end1898:
    unless_null $P5071, vivi_6811899
    nqp_get_sc_object $P5072, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5071, $P5072
  vivi_6811899:
    unless_null _lex_param_1, fallback1904
    nqp_get_sc_object $P5073, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5073
  fallback1904:
    set fb_tmp_81, _lex_param_1
    repr_defined $I5017, fb_tmp_81
    unless $I5017 goto if683_else1902 
    set $P5074, fb_tmp_81["separator"]
    set $P5076, $P5074
    goto if683_end1903
  if683_else1902:
    null $P5075
    set $P5076, $P5075
  if683_end1903:
    unless_null $P5076, vivi_6841905
    nqp_get_sc_object $P5077, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5076, $P5077
  vivi_6841905:
    set fb_tmp_80, $P5076
    repr_defined $I5016, fb_tmp_80
    unless $I5016 goto if682_else1900 
    set $P5078, fb_tmp_80[0]
    set $P5080, $P5078
    goto if682_end1901
  if682_else1900:
    null $P5079
    set $P5080, $P5079
  if682_end1901:
    unless_null $P5080, vivi_6851906
    nqp_get_sc_object $P5081, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5080, $P5081
  vivi_6851906:
    $P5082 = $P5080."ast"()
    $P5083 = $P5071."new"($P5082, "quant" :named("rxtype"), 0 :named("min"), 1 :named("max"))
    $P5084 = $P5064."new"($P101, $P5083, "concat" :named("rxtype"))
    set $P101, $P5084
    set $P5085, $P101
  if671_end1883:
  if657_end1858:
    set $P5088, $P101
    unless $P101 goto if688_end1912 
.annotate 'line', 407
    $P5087 = $P101."backtrack"()
    isfalse $I5018, $P5087
    box $P5089, $I5018
    set $P5088, $P5089
  if688_end1912:
    set $P5121, $P5088
    unless $P5088 goto if687_end1910 
    find_dynamic_lex $P5090, "%*RX"
    unless_null $P5090, fallback1917
    nqp_get_sc_object $P5092, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5091, $P5092
    set fb_tmp_83, $P5091
    repr_defined $I5020, fb_tmp_83
    unless $I5020 goto if691_else1918 
    set $P5093, fb_tmp_83["%RX"]
    set $P5095, $P5093
    goto if691_end1919
  if691_else1918:
    null $P5094
    set $P5095, $P5094
  if691_end1919:
    unless_null $P5095, vivi_6921920
    nqp_get_sc_object $P5097, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5096, $P5097
    new $P5098, 'Hash'
    set $P5096["%RX"], $P5098
    set $P5095, $P5098
  vivi_6921920:
    unless_null $P5095, vivi_6931921
    die "Contextual %*RX not found"
    box $P5099, "Contextual %*RX not found"
    set $P5095, $P5099
  vivi_6931921:
    set $P5090, $P5095
  fallback1917:
    set fb_tmp_82, $P5090
    repr_defined $I5019, fb_tmp_82
    unless $I5019 goto if690_else1915 
    set $P5100, fb_tmp_82["r"]
    set $P5102, $P5100
    goto if690_end1916
  if690_else1915:
    null $P5101
    set $P5102, $P5101
  if690_end1916:
    unless_null $P5102, vivi_6941922
    nqp_get_sc_object $P5103, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5102, $P5103
  vivi_6941922:
    set $P5120, $P5102
    if $P5102 goto unless689_end1914 
    unless_null _lex_param_1, fallback1927
    nqp_get_sc_object $P5104, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5104
  fallback1927:
    set fb_tmp_84, _lex_param_1
    repr_defined $I5021, fb_tmp_84
    unless $I5021 goto if696_else1925 
    set $P5105, fb_tmp_84["backmod"]
    set $P5107, $P5105
    goto if696_end1926
  if696_else1925:
    null $P5106
    set $P5107, $P5106
  if696_end1926:
    unless_null $P5107, vivi_6971928
    nqp_get_sc_object $P5108, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5107, $P5108
  vivi_6971928:
    set $P5118, $P5107
    unless $P5107 goto if695_end1924 
    unless_null _lex_param_1, fallback1933
    nqp_get_sc_object $P5109, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5109
  fallback1933:
    set fb_tmp_86, _lex_param_1
    repr_defined $I5024, fb_tmp_86
    unless $I5024 goto if699_else1931 
    set $P5110, fb_tmp_86["backmod"]
    set $P5112, $P5110
    goto if699_end1932
  if699_else1931:
    null $P5111
    set $P5112, $P5111
  if699_end1932:
    unless_null $P5112, vivi_7001934
    nqp_get_sc_object $P5113, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5112, $P5113
  vivi_7001934:
    set fb_tmp_85, $P5112
    repr_defined $I5023, fb_tmp_85
    unless $I5023 goto if698_else1929 
    set $P5114, fb_tmp_85[0]
    set $P5116, $P5114
    goto if698_end1930
  if698_else1929:
    null $P5115
    set $P5116, $P5115
  if698_end1930:
    unless_null $P5116, vivi_7011935
    nqp_get_sc_object $P5117, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5116, $P5117
  vivi_7011935:
    set $S5006, $P5116
    iseq $I5022, $S5006, ":"
    box $P5119, $I5022
    set $P5118, $P5119
  if695_end1924:
    set $P5120, $P5118
  unless689_end1914:
    set $P5121, $P5120
  if687_end1910:
    unless $P5121 goto if686_end1908 
    $P5122 = $P101."backtrack"("r")
  if686_end1908:
.annotate 'line', 409
    $P5123 = _lex_param_1."!make"($P101)
    .return ($P5123) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_210_1360623852.546") :anon :lex :outer("cuid_120_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 391
    .lex "$ast", $P101 
    .local pmc fb_tmp_67 
    .local pmc fb_tmp_68 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 392
    find_lex $P5002, "$/"
    unless_null $P5002, fallback1854
    nqp_get_sc_object $P5003, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5002, $P5003
  fallback1854:
    set fb_tmp_68, $P5002
    repr_defined $I5002, fb_tmp_68
    unless $I5002 goto if654_else1852 
    set $P5004, fb_tmp_68["quantifier"]
    set $P5006, $P5004
    goto if654_end1853
  if654_else1852:
    null $P5005
    set $P5006, $P5005
  if654_end1853:
    unless_null $P5006, vivi_6551855
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_6551855:
    set fb_tmp_67, $P5006
    repr_defined $I5001, fb_tmp_67
    unless $I5001 goto if653_else1850 
    set $P5008, fb_tmp_67[0]
    set $P5010, $P5008
    goto if653_end1851
  if653_else1850:
    null $P5009
    set $P5010, $P5009
  if653_end1851:
    unless_null $P5010, vivi_6561856
    nqp_get_sc_object $P5011, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5010, $P5011
  vivi_6561856:
    $P5012 = $P5010."ast"()
    set $P101, $P5012
.annotate 'line', 393
    find_lex $P5013, "$qast"
    $P101."unshift"($P5013)
    store_lex "$qast", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "separator" :subid("cuid_121_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 412
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_87 
.annotate 'line', 413
    unless_null _lex_param_1, fallback1938
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5001
  fallback1938:
    set fb_tmp_87, _lex_param_1
    repr_defined $I5001, fb_tmp_87
    unless $I5001 goto if702_else1936 
    set $P5002, fb_tmp_87["quantified_atom"]
    set $P5004, $P5002
    goto if702_end1937
  if702_else1936:
    null $P5003
    set $P5004, $P5003
  if702_end1937:
    unless_null $P5004, vivi_7031939
    nqp_get_sc_object $P5005, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5004, $P5005
  vivi_7031939:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "atom" :subid("cuid_122_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 416
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5016 = 'cuid_211_1360623852.546' 
    capture_lex $P5016 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_88 
    .local pmc fb_tmp_89 
    unless_null _lex_param_1, fallback1944
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5001
  fallback1944:
    set fb_tmp_88, _lex_param_1
    repr_defined $I5001, fb_tmp_88
    unless $I5001 goto if705_else1942 
    set $P5002, fb_tmp_88["metachar"]
    set $P5004, $P5002
    goto if705_end1943
  if705_else1942:
    null $P5003
    set $P5004, $P5003
  if705_end1943:
    unless_null $P5004, vivi_7061945
    nqp_get_sc_object $P5005, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5004, $P5005
  vivi_7061945:
    unless $P5004 goto if704_else1940 
.annotate 'line', 417
.annotate 'line', 418
    unless_null _lex_param_1, fallback1948
    nqp_get_sc_object $P5006, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5006
  fallback1948:
    set fb_tmp_89, _lex_param_1
    repr_defined $I5002, fb_tmp_89
    unless $I5002 goto if707_else1946 
    set $P5007, fb_tmp_89["metachar"]
    set $P5009, $P5007
    goto if707_end1947
  if707_else1946:
    null $P5008
    set $P5009, $P5008
  if707_end1947:
    unless_null $P5009, vivi_7081949
    nqp_get_sc_object $P5010, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5009, $P5010
  vivi_7081949:
    $P5011 = $P5009."ast"()
    $P5012 = _lex_param_1."!make"($P5011)
    set $P5015, $P5012
    goto if704_end1941
  if704_else1940:
    .const 'Sub' $P5013 = 'cuid_211_1360623852.546' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  if704_end1941:
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_211_1360623852.546") :anon :lex :outer("cuid_122_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 420
    .lex "$qast", $P101 
    .local pmc fb_tmp_90 
    .local pmc fb_tmp_91 
    .local pmc fb_tmp_92 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 421
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set fb_tmp_90, $P5002
    repr_defined $I5001, fb_tmp_90
    unless $I5001 goto if709_else1950 
    set $P5005, fb_tmp_90["Regex"]
    set $P5007, $P5005
    goto if709_end1951
  if709_else1950:
    null $P5006
    set $P5007, $P5006
  if709_end1951:
    unless_null $P5007, vivi_7101952
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5007, $P5008
  vivi_7101952:
    find_lex $P5009, "$/"
    set $S5001, $P5009
    find_lex $P5010, "$/"
    $P5011 = $P5007."new"($S5001, "literal" :named("rxtype"), $P5010 :named("node"))
    set $P101, $P5011
    find_dynamic_lex $P5012, "%*RX"
    unless_null $P5012, fallback1957
    nqp_get_sc_object $P5014, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5013, $P5014
    set fb_tmp_92, $P5013
    repr_defined $I5003, fb_tmp_92
    unless $I5003 goto if713_else1958 
    set $P5015, fb_tmp_92["%RX"]
    set $P5017, $P5015
    goto if713_end1959
  if713_else1958:
    null $P5016
    set $P5017, $P5016
  if713_end1959:
    unless_null $P5017, vivi_7141960
    nqp_get_sc_object $P5019, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%RX"], $P5020
    set $P5017, $P5020
  vivi_7141960:
    unless_null $P5017, vivi_7151961
    die "Contextual %*RX not found"
    box $P5021, "Contextual %*RX not found"
    set $P5017, $P5021
  vivi_7151961:
    set $P5012, $P5017
  fallback1957:
    set fb_tmp_91, $P5012
    repr_defined $I5002, fb_tmp_91
    unless $I5002 goto if712_else1955 
    set $P5022, fb_tmp_91["i"]
    set $P5024, $P5022
    goto if712_end1956
  if712_else1955:
    null $P5023
    set $P5024, $P5023
  if712_end1956:
    unless_null $P5024, vivi_7161962
    nqp_get_sc_object $P5025, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5024, $P5025
  vivi_7161962:
    unless $P5024 goto if711_end1954 
.annotate 'line', 422
    $P5026 = $P101."subtype"("ignorecase")
  if711_end1954:
.annotate 'line', 423
    find_dynamic_lex $P5027, "$/"
    $P5028 = $P5027."!make"($P101)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<*>" :subid("cuid_123_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 427
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_93 
    .local pmc fb_tmp_94 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 428
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set fb_tmp_93, $P5002
    repr_defined $I5001, fb_tmp_93
    unless $I5001 goto if717_else1963 
    set $P5005, fb_tmp_93["Regex"]
    set $P5007, $P5005
    goto if717_end1964
  if717_else1963:
    null $P5006
    set $P5007, $P5006
  if717_end1964:
    unless_null $P5007, vivi_7181965
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5007, $P5008
  vivi_7181965:
    $P5009 = $P5007."new"("quant" :named("rxtype"), 0 :named("min"), -1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5009
.annotate 'line', 429
    unless_null _lex_param_1, fallback1968
    nqp_get_sc_object $P5010, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5010
  fallback1968:
    set fb_tmp_94, _lex_param_1
    repr_defined $I5002, fb_tmp_94
    unless $I5002 goto if719_else1966 
    set $P5011, fb_tmp_94["backmod"]
    set $P5013, $P5011
    goto if719_end1967
  if719_else1966:
    null $P5012
    set $P5013, $P5012
  if719_end1967:
    unless_null $P5013, vivi_7201969
    nqp_get_sc_object $P5014, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5013, $P5014
  vivi_7201969:
    $P5015 = "&backmod"($P101, $P5013)
    $P5016 = _lex_param_1."!make"($P5015)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<+>" :subid("cuid_124_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 432
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_95 
    .local pmc fb_tmp_96 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 433
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set fb_tmp_95, $P5002
    repr_defined $I5001, fb_tmp_95
    unless $I5001 goto if721_else1970 
    set $P5005, fb_tmp_95["Regex"]
    set $P5007, $P5005
    goto if721_end1971
  if721_else1970:
    null $P5006
    set $P5007, $P5006
  if721_end1971:
    unless_null $P5007, vivi_7221972
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5007, $P5008
  vivi_7221972:
    $P5009 = $P5007."new"("quant" :named("rxtype"), 1 :named("min"), -1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5009
.annotate 'line', 434
    unless_null _lex_param_1, fallback1975
    nqp_get_sc_object $P5010, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5010
  fallback1975:
    set fb_tmp_96, _lex_param_1
    repr_defined $I5002, fb_tmp_96
    unless $I5002 goto if723_else1973 
    set $P5011, fb_tmp_96["backmod"]
    set $P5013, $P5011
    goto if723_end1974
  if723_else1973:
    null $P5012
    set $P5013, $P5012
  if723_end1974:
    unless_null $P5013, vivi_7241976
    nqp_get_sc_object $P5014, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5013, $P5014
  vivi_7241976:
    $P5015 = "&backmod"($P101, $P5013)
    $P5016 = _lex_param_1."!make"($P5015)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<?>" :subid("cuid_125_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 437
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_97 
    .local pmc fb_tmp_98 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 438
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set fb_tmp_97, $P5002
    repr_defined $I5001, fb_tmp_97
    unless $I5001 goto if725_else1977 
    set $P5005, fb_tmp_97["Regex"]
    set $P5007, $P5005
    goto if725_end1978
  if725_else1977:
    null $P5006
    set $P5007, $P5006
  if725_end1978:
    unless_null $P5007, vivi_7261979
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5007, $P5008
  vivi_7261979:
    $P5009 = $P5007."new"("quant" :named("rxtype"), 0 :named("min"), 1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5009
.annotate 'line', 439
    unless_null _lex_param_1, fallback1982
    nqp_get_sc_object $P5010, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5010
  fallback1982:
    set fb_tmp_98, _lex_param_1
    repr_defined $I5002, fb_tmp_98
    unless $I5002 goto if727_else1980 
    set $P5011, fb_tmp_98["backmod"]
    set $P5013, $P5011
    goto if727_end1981
  if727_else1980:
    null $P5012
    set $P5013, $P5012
  if727_end1981:
    unless_null $P5013, vivi_7281983
    nqp_get_sc_object $P5014, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5013, $P5014
  vivi_7281983:
    $P5015 = "&backmod"($P101, $P5013)
    $P5016 = _lex_param_1."!make"($P5015)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<**>" :subid("cuid_126_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 442
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_99 
    .local pmc fb_tmp_100 
    .local pmc fb_tmp_101 
    .local pmc fb_tmp_102 
    .local pmc fb_tmp_103 
    .local pmc fb_tmp_104 
    .local pmc fb_tmp_105 
    .local pmc fb_tmp_106 
    .local pmc fb_tmp_107 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 444
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set fb_tmp_99, $P5002
    repr_defined $I5001, fb_tmp_99
    unless $I5001 goto if729_else1984 
    set $P5005, fb_tmp_99["Regex"]
    set $P5007, $P5005
    goto if729_end1985
  if729_else1984:
    null $P5006
    set $P5007, $P5006
  if729_end1985:
    unless_null $P5007, vivi_7301986
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5007, $P5008
  vivi_7301986:
    unless_null _lex_param_1, fallback1989
    nqp_get_sc_object $P5009, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5009
  fallback1989:
    set fb_tmp_100, _lex_param_1
    repr_defined $I5002, fb_tmp_100
    unless $I5002 goto if731_else1987 
    set $P5010, fb_tmp_100["min"]
    set $P5012, $P5010
    goto if731_end1988
  if731_else1987:
    null $P5011
    set $P5012, $P5011
  if731_end1988:
    unless_null $P5012, vivi_7321990
    nqp_get_sc_object $P5013, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5012, $P5013
  vivi_7321990:
    set $N5001, $P5012
    $P5014 = $P5007."new"("quant" :named("rxtype"), $N5001 :named("min"), -1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5014
    unless_null _lex_param_1, fallback1995
    nqp_get_sc_object $P5015, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5015
  fallback1995:
    set fb_tmp_101, _lex_param_1
    repr_defined $I5004, fb_tmp_101
    unless $I5004 goto if734_else1993 
    set $P5016, fb_tmp_101["max"]
    set $P5018, $P5016
    goto if734_end1994
  if734_else1993:
    null $P5017
    set $P5018, $P5017
  if734_end1994:
    unless_null $P5018, vivi_7351996
    nqp_get_sc_object $P5019, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5018, $P5019
  vivi_7351996:
    isfalse $I5003, $P5018
    unless $I5003 goto if733_else1991 
.annotate 'line', 445
    unless_null _lex_param_1, fallback1999
    nqp_get_sc_object $P5020, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5020
  fallback1999:
    set fb_tmp_102, _lex_param_1
    repr_defined $I5005, fb_tmp_102
    unless $I5005 goto if736_else1997 
    set $P5021, fb_tmp_102["min"]
    set $P5023, $P5021
    goto if736_end1998
  if736_else1997:
    null $P5022
    set $P5023, $P5022
  if736_end1998:
    unless_null $P5023, vivi_7372000
    nqp_get_sc_object $P5024, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5023, $P5024
  vivi_7372000:
    set $N5002, $P5023
    $P5025 = $P101."max"($N5002)
    goto if733_end1992
  if733_else1991:
    unless_null _lex_param_1, fallback2007
    nqp_get_sc_object $P5026, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5026
  fallback2007:
    set fb_tmp_104, _lex_param_1
    repr_defined $I5008, fb_tmp_104
    unless $I5008 goto if740_else2005 
    set $P5027, fb_tmp_104["max"]
    set $P5029, $P5027
    goto if740_end2006
  if740_else2005:
    null $P5028
    set $P5029, $P5028
  if740_end2006:
    unless_null $P5029, vivi_7412008
    nqp_get_sc_object $P5030, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5029, $P5030
  vivi_7412008:
    set fb_tmp_103, $P5029
    repr_defined $I5007, fb_tmp_103
    unless $I5007 goto if739_else2003 
    set $P5031, fb_tmp_103[0]
    set $P5033, $P5031
    goto if739_end2004
  if739_else2003:
    null $P5032
    set $P5033, $P5032
  if739_end2004:
    unless_null $P5033, vivi_7422009
    nqp_get_sc_object $P5034, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5033, $P5034
  vivi_7422009:
    set $S5001, $P5033
    isne $I5006, $S5001, "*"
    box $P5046, $I5006
    set $P5045, $P5046
    unless $I5006 goto if738_end2002 
.annotate 'line', 446
    unless_null _lex_param_1, fallback2014
    nqp_get_sc_object $P5035, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5035
  fallback2014:
    set fb_tmp_106, _lex_param_1
    repr_defined $I5010, fb_tmp_106
    unless $I5010 goto if744_else2012 
    set $P5036, fb_tmp_106["max"]
    set $P5038, $P5036
    goto if744_end2013
  if744_else2012:
    null $P5037
    set $P5038, $P5037
  if744_end2013:
    unless_null $P5038, vivi_7452015
    nqp_get_sc_object $P5039, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5038, $P5039
  vivi_7452015:
    set fb_tmp_105, $P5038
    repr_defined $I5009, fb_tmp_105
    unless $I5009 goto if743_else2010 
    set $P5040, fb_tmp_105[0]
    set $P5042, $P5040
    goto if743_end2011
  if743_else2010:
    null $P5041
    set $P5042, $P5041
  if743_end2011:
    unless_null $P5042, vivi_7462016
    nqp_get_sc_object $P5043, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5042, $P5043
  vivi_7462016:
    set $N5003, $P5042
    $P5044 = $P101."max"($N5003)
    set $P5045, $P5044
  if738_end2002:
  if733_end1992:
.annotate 'line', 447
    unless_null _lex_param_1, fallback2019
    nqp_get_sc_object $P5047, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5047
  fallback2019:
    set fb_tmp_107, _lex_param_1
    repr_defined $I5011, fb_tmp_107
    unless $I5011 goto if747_else2017 
    set $P5048, fb_tmp_107["backmod"]
    set $P5050, $P5048
    goto if747_end2018
  if747_else2017:
    null $P5049
    set $P5050, $P5049
  if747_end2018:
    unless_null $P5050, vivi_7482020
    nqp_get_sc_object $P5051, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5050, $P5051
  vivi_7482020:
    $P5052 = "&backmod"($P101, $P5050)
    $P5053 = _lex_param_1."!make"($P5052)
    .return ($P5053) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<ws>" :subid("cuid_127_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 450
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_108 
    .local pmc fb_tmp_109 
    .local pmc fb_tmp_110 
    .local pmc fb_tmp_111 
    .local pmc fb_tmp_112 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
    find_dynamic_lex $P5002, "%*RX"
    unless_null $P5002, fallback2025
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5003, $P5004
    set fb_tmp_109, $P5003
    repr_defined $I5002, fb_tmp_109
    unless $I5002 goto if751_else2026 
    set $P5005, fb_tmp_109["%RX"]
    set $P5007, $P5005
    goto if751_end2027
  if751_else2026:
    null $P5006
    set $P5007, $P5006
  if751_end2027:
    unless_null $P5007, vivi_7522028
    nqp_get_sc_object $P5009, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%RX"], $P5010
    set $P5007, $P5010
  vivi_7522028:
    unless_null $P5007, vivi_7532029
    die "Contextual %*RX not found"
    box $P5011, "Contextual %*RX not found"
    set $P5007, $P5011
  vivi_7532029:
    set $P5002, $P5007
  fallback2025:
    set fb_tmp_108, $P5002
    repr_defined $I5001, fb_tmp_108
    unless $I5001 goto if750_else2023 
    set $P5012, fb_tmp_108["s"]
    set $P5014, $P5012
    goto if750_end2024
  if750_else2023:
    null $P5013
    set $P5014, $P5013
  if750_end2024:
    unless_null $P5014, vivi_7542030
    nqp_get_sc_object $P5015, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5014, $P5015
  vivi_7542030:
    unless $P5014 goto if749_else2021 
.annotate 'line', 452
    nqp_get_sc_object $P5018, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set fb_tmp_110, $P5016
    repr_defined $I5003, fb_tmp_110
    unless $I5003 goto if755_else2031 
    set $P5019, fb_tmp_110["Regex"]
    set $P5021, $P5019
    goto if755_end2032
  if755_else2031:
    null $P5020
    set $P5021, $P5020
  if755_end2032:
    unless_null $P5021, vivi_7562033
    nqp_get_sc_object $P5022, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5021, $P5022
  vivi_7562033:
.annotate 'line', 453
    nqp_get_sc_object $P5025, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set fb_tmp_111, $P5023
    repr_defined $I5004, fb_tmp_111
    unless $I5004 goto if757_else2034 
    set $P5026, fb_tmp_111["Node"]
    set $P5028, $P5026
    goto if757_end2035
  if757_else2034:
    null $P5027
    set $P5028, $P5027
  if757_end2035:
    unless_null $P5028, vivi_7582036
    nqp_get_sc_object $P5029, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5028, $P5029
  vivi_7582036:
    nqp_get_sc_object $P5032, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set fb_tmp_112, $P5030
    repr_defined $I5005, fb_tmp_112
    unless $I5005 goto if759_else2037 
    set $P5033, fb_tmp_112["SVal"]
    set $P5035, $P5033
    goto if759_end2038
  if759_else2037:
    null $P5034
    set $P5035, $P5034
  if759_end2038:
    unless_null $P5035, vivi_7602039
    nqp_get_sc_object $P5036, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5035, $P5036
  vivi_7602039:
    $P5037 = $P5035."new"("ws" :named("value"))
    $P5038 = $P5028."new"($P5037)
    $P5039 = $P5021."new"($P5038, "ws" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    set $P5040, $P5039
    goto if749_end2022
  if749_else2021:
    box $P5041, 0
    set $P5040, $P5041
  if749_end2022:
    set $P101, $P5040
.annotate 'line', 455
    $P5042 = _lex_param_1."!make"($P101)
    .return ($P5042) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<[ ]>" :subid("cuid_128_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 458
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_113 
.annotate 'line', 459
    unless_null _lex_param_1, fallback2042
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5001
  fallback2042:
    set fb_tmp_113, _lex_param_1
    repr_defined $I5001, fb_tmp_113
    unless $I5001 goto if761_else2040 
    set $P5002, fb_tmp_113["nibbler"]
    set $P5004, $P5002
    goto if761_end2041
  if761_else2040:
    null $P5003
    set $P5004, $P5003
  if761_end2041:
    unless_null $P5004, vivi_7622043
    nqp_get_sc_object $P5005, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5004, $P5005
  vivi_7622043:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<( )>" :subid("cuid_129_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 462
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$subpast", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_114 
    .local pmc fb_tmp_115 
    .local pmc fb_tmp_116 
    .local pmc fb_tmp_117 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P102, $P5002
.annotate 'line', 463
    nqp_get_sc_object $P5005, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set fb_tmp_114, $P5003
    repr_defined $I5001, fb_tmp_114
    unless $I5001 goto if763_else2044 
    set $P5006, fb_tmp_114["Node"]
    set $P5008, $P5006
    goto if763_end2045
  if763_else2044:
    null $P5007
    set $P5008, $P5007
  if763_end2045:
    unless_null $P5008, vivi_7642046
    nqp_get_sc_object $P5009, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5008, $P5009
  vivi_7642046:
    nqp_decontainerize $P5010, _lex_param_0
    unless_null _lex_param_1, fallback2049
    nqp_get_sc_object $P5011, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5011
  fallback2049:
    set fb_tmp_115, _lex_param_1
    repr_defined $I5002, fb_tmp_115
    unless $I5002 goto if765_else2047 
    set $P5012, fb_tmp_115["nibbler"]
    set $P5014, $P5012
    goto if765_end2048
  if765_else2047:
    null $P5013
    set $P5014, $P5013
  if765_end2048:
    unless_null $P5014, vivi_7662050
    nqp_get_sc_object $P5015, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5014, $P5015
  vivi_7662050:
    $P5016 = $P5014."ast"()
    $P5017 = $P5010."qbuildsub"($P5016, 1 :named("anon"), 1 :named("addself"))
    $P5018 = $P5008."new"($P5017)
    set $P101, $P5018
.annotate 'line', 464
    nqp_get_sc_object $P5021, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set fb_tmp_116, $P5019
    repr_defined $I5003, fb_tmp_116
    unless $I5003 goto if767_else2051 
    set $P5022, fb_tmp_116["Regex"]
    set $P5024, $P5022
    goto if767_end2052
  if767_else2051:
    null $P5023
    set $P5024, $P5023
  if767_end2052:
    unless_null $P5024, vivi_7682053
    nqp_get_sc_object $P5025, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5024, $P5025
  vivi_7682053:
    unless_null _lex_param_1, fallback2056
    nqp_get_sc_object $P5026, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5026
  fallback2056:
    set fb_tmp_117, _lex_param_1
    repr_defined $I5004, fb_tmp_117
    unless $I5004 goto if769_else2054 
    set $P5027, fb_tmp_117["nibbler"]
    set $P5029, $P5027
    goto if769_end2055
  if769_else2054:
    null $P5028
    set $P5029, $P5028
  if769_end2055:
    unless_null $P5029, vivi_7702057
    nqp_get_sc_object $P5030, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5029, $P5030
  vivi_7702057:
    $P5031 = $P5029."ast"()
    $P5032 = $P5024."new"($P101, $P5031, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"))
    set $P102, $P5032
.annotate 'line', 466
    $P5033 = _lex_param_1."!make"($P102)
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<'>" :subid("cuid_130_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 469
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$quote", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_118 
    .local pmc fb_tmp_119 
    .local pmc fb_tmp_120 
    .local pmc fb_tmp_121 
    .local pmc fb_tmp_122 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P102, $P5002
.annotate 'line', 470
    unless_null _lex_param_1, fallback2060
    nqp_get_sc_object $P5003, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5003
  fallback2060:
    set fb_tmp_118, _lex_param_1
    repr_defined $I5001, fb_tmp_118
    unless $I5001 goto if771_else2058 
    set $P5004, fb_tmp_118["quote_EXPR"]
    set $P5006, $P5004
    goto if771_end2059
  if771_else2058:
    null $P5005
    set $P5006, $P5005
  if771_end2059:
    unless_null $P5006, vivi_7722061
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_7722061:
    $P5008 = $P5006."ast"()
    set $P101, $P5008
.annotate 'line', 471
    nqp_get_sc_object $P5011, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set fb_tmp_119, $P5009
    repr_defined $I5002, fb_tmp_119
    unless $I5002 goto if774_else2064 
    set $P5012, fb_tmp_119["SVal"]
    set $P5014, $P5012
    goto if774_end2065
  if774_else2064:
    null $P5013
    set $P5014, $P5013
  if774_end2065:
    unless_null $P5014, vivi_7752066
    nqp_get_sc_object $P5015, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5014, $P5015
  vivi_7752066:
    $P5016 = $P5014."ACCEPTS"($P101)
    unless $P5016 goto if773_end2063 
    $P5017 = $P101."value"()
    set $P101, $P5017
  if773_end2063:
.annotate 'line', 472
    nqp_get_sc_object $P5020, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set fb_tmp_120, $P5018
    repr_defined $I5003, fb_tmp_120
    unless $I5003 goto if776_else2067 
    set $P5021, fb_tmp_120["Regex"]
    set $P5023, $P5021
    goto if776_end2068
  if776_else2067:
    null $P5022
    set $P5023, $P5022
  if776_end2068:
    unless_null $P5023, vivi_7772069
    nqp_get_sc_object $P5024, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5023, $P5024
  vivi_7772069:
    $P5025 = $P5023."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P102, $P5025
    find_dynamic_lex $P5026, "%*RX"
    unless_null $P5026, fallback2074
    nqp_get_sc_object $P5028, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5027, $P5028
    set fb_tmp_122, $P5027
    repr_defined $I5005, fb_tmp_122
    unless $I5005 goto if780_else2075 
    set $P5029, fb_tmp_122["%RX"]
    set $P5031, $P5029
    goto if780_end2076
  if780_else2075:
    null $P5030
    set $P5031, $P5030
  if780_end2076:
    unless_null $P5031, vivi_7812077
    nqp_get_sc_object $P5033, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5032, $P5033
    new $P5034, 'Hash'
    set $P5032["%RX"], $P5034
    set $P5031, $P5034
  vivi_7812077:
    unless_null $P5031, vivi_7822078
    die "Contextual %*RX not found"
    box $P5035, "Contextual %*RX not found"
    set $P5031, $P5035
  vivi_7822078:
    set $P5026, $P5031
  fallback2074:
    set fb_tmp_121, $P5026
    repr_defined $I5004, fb_tmp_121
    unless $I5004 goto if779_else2072 
    set $P5036, fb_tmp_121["i"]
    set $P5038, $P5036
    goto if779_end2073
  if779_else2072:
    null $P5037
    set $P5038, $P5037
  if779_end2073:
    unless_null $P5038, vivi_7832079
    nqp_get_sc_object $P5039, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5038, $P5039
  vivi_7832079:
    unless $P5038 goto if778_end2071 
.annotate 'line', 473
    $P5040 = $P102."subtype"("ignorecase")
  if778_end2071:
.annotate 'line', 474
    $P5041 = _lex_param_1."!make"($P102)
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<\">" :subid("cuid_131_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 477
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$quote", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_123 
    .local pmc fb_tmp_124 
    .local pmc fb_tmp_125 
    .local pmc fb_tmp_126 
    .local pmc fb_tmp_127 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P102, $P5002
.annotate 'line', 478
    unless_null _lex_param_1, fallback2082
    nqp_get_sc_object $P5003, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5003
  fallback2082:
    set fb_tmp_123, _lex_param_1
    repr_defined $I5001, fb_tmp_123
    unless $I5001 goto if784_else2080 
    set $P5004, fb_tmp_123["quote_EXPR"]
    set $P5006, $P5004
    goto if784_end2081
  if784_else2080:
    null $P5005
    set $P5006, $P5005
  if784_end2081:
    unless_null $P5006, vivi_7852083
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_7852083:
    $P5008 = $P5006."ast"()
    set $P101, $P5008
.annotate 'line', 479
    nqp_get_sc_object $P5011, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set fb_tmp_124, $P5009
    repr_defined $I5002, fb_tmp_124
    unless $I5002 goto if787_else2086 
    set $P5012, fb_tmp_124["SVal"]
    set $P5014, $P5012
    goto if787_end2087
  if787_else2086:
    null $P5013
    set $P5014, $P5013
  if787_end2087:
    unless_null $P5014, vivi_7882088
    nqp_get_sc_object $P5015, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5014, $P5015
  vivi_7882088:
    $P5016 = $P5014."ACCEPTS"($P101)
    unless $P5016 goto if786_end2085 
    $P5017 = $P101."value"()
    set $P101, $P5017
  if786_end2085:
.annotate 'line', 480
    nqp_get_sc_object $P5020, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set fb_tmp_125, $P5018
    repr_defined $I5003, fb_tmp_125
    unless $I5003 goto if789_else2089 
    set $P5021, fb_tmp_125["Regex"]
    set $P5023, $P5021
    goto if789_end2090
  if789_else2089:
    null $P5022
    set $P5023, $P5022
  if789_end2090:
    unless_null $P5023, vivi_7902091
    nqp_get_sc_object $P5024, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5023, $P5024
  vivi_7902091:
    $P5025 = $P5023."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P102, $P5025
    find_dynamic_lex $P5026, "%*RX"
    unless_null $P5026, fallback2096
    nqp_get_sc_object $P5028, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5027, $P5028
    set fb_tmp_127, $P5027
    repr_defined $I5005, fb_tmp_127
    unless $I5005 goto if793_else2097 
    set $P5029, fb_tmp_127["%RX"]
    set $P5031, $P5029
    goto if793_end2098
  if793_else2097:
    null $P5030
    set $P5031, $P5030
  if793_end2098:
    unless_null $P5031, vivi_7942099
    nqp_get_sc_object $P5033, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5032, $P5033
    new $P5034, 'Hash'
    set $P5032["%RX"], $P5034
    set $P5031, $P5034
  vivi_7942099:
    unless_null $P5031, vivi_7952100
    die "Contextual %*RX not found"
    box $P5035, "Contextual %*RX not found"
    set $P5031, $P5035
  vivi_7952100:
    set $P5026, $P5031
  fallback2096:
    set fb_tmp_126, $P5026
    repr_defined $I5004, fb_tmp_126
    unless $I5004 goto if792_else2094 
    set $P5036, fb_tmp_126["i"]
    set $P5038, $P5036
    goto if792_end2095
  if792_else2094:
    null $P5037
    set $P5038, $P5037
  if792_end2095:
    unless_null $P5038, vivi_7962101
    nqp_get_sc_object $P5039, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5038, $P5039
  vivi_7962101:
    unless $P5038 goto if791_end2093 
.annotate 'line', 481
    $P5040 = $P102."subtype"("ignorecase")
  if791_end2093:
.annotate 'line', 482
    $P5041 = _lex_param_1."!make"($P102)
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<.>" :subid("cuid_132_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 485
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_128 
.annotate 'line', 486
    nqp_get_sc_object $P5003, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5002, $P5003, "QAST"
    get_who $P5001, $P5002
    set fb_tmp_128, $P5001
    repr_defined $I5001, fb_tmp_128
    unless $I5001 goto if797_else2102 
    set $P5004, fb_tmp_128["Regex"]
    set $P5006, $P5004
    goto if797_end2103
  if797_else2102:
    null $P5005
    set $P5006, $P5005
  if797_end2103:
    unless_null $P5006, vivi_7982104
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_7982104:
    $P5008 = $P5006."new"("cclass" :named("rxtype"), "." :named("subtype"), _lex_param_1 :named("node"))
    $P5009 = _lex_param_1."!make"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^>" :subid("cuid_133_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 489
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_129 
.annotate 'line', 490
    nqp_get_sc_object $P5003, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5002, $P5003, "QAST"
    get_who $P5001, $P5002
    set fb_tmp_129, $P5001
    repr_defined $I5001, fb_tmp_129
    unless $I5001 goto if799_else2105 
    set $P5004, fb_tmp_129["Regex"]
    set $P5006, $P5004
    goto if799_end2106
  if799_else2105:
    null $P5005
    set $P5006, $P5005
  if799_end2106:
    unless_null $P5006, vivi_8002107
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_8002107:
    $P5008 = $P5006."new"("anchor" :named("rxtype"), "bos" :named("subtype"), _lex_param_1 :named("node"))
    $P5009 = _lex_param_1."!make"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^^>" :subid("cuid_134_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 493
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_130 
.annotate 'line', 494
    nqp_get_sc_object $P5003, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5002, $P5003, "QAST"
    get_who $P5001, $P5002
    set fb_tmp_130, $P5001
    repr_defined $I5001, fb_tmp_130
    unless $I5001 goto if801_else2108 
    set $P5004, fb_tmp_130["Regex"]
    set $P5006, $P5004
    goto if801_end2109
  if801_else2108:
    null $P5005
    set $P5006, $P5005
  if801_end2109:
    unless_null $P5006, vivi_8022110
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_8022110:
    $P5008 = $P5006."new"("anchor" :named("rxtype"), "bol" :named("subtype"), _lex_param_1 :named("node"))
    $P5009 = _lex_param_1."!make"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$>" :subid("cuid_135_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 497
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_131 
.annotate 'line', 498
    nqp_get_sc_object $P5003, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5002, $P5003, "QAST"
    get_who $P5001, $P5002
    set fb_tmp_131, $P5001
    repr_defined $I5001, fb_tmp_131
    unless $I5001 goto if803_else2111 
    set $P5004, fb_tmp_131["Regex"]
    set $P5006, $P5004
    goto if803_end2112
  if803_else2111:
    null $P5005
    set $P5006, $P5005
  if803_end2112:
    unless_null $P5006, vivi_8042113
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_8042113:
    $P5008 = $P5006."new"("anchor" :named("rxtype"), "eos" :named("subtype"), _lex_param_1 :named("node"))
    $P5009 = _lex_param_1."!make"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$$>" :subid("cuid_136_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 501
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_132 
.annotate 'line', 502
    nqp_get_sc_object $P5003, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5002, $P5003, "QAST"
    get_who $P5001, $P5002
    set fb_tmp_132, $P5001
    repr_defined $I5001, fb_tmp_132
    unless $I5001 goto if805_else2114 
    set $P5004, fb_tmp_132["Regex"]
    set $P5006, $P5004
    goto if805_end2115
  if805_else2114:
    null $P5005
    set $P5006, $P5005
  if805_end2115:
    unless_null $P5006, vivi_8062116
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_8062116:
    $P5008 = $P5006."new"("anchor" :named("rxtype"), "eol" :named("subtype"), _lex_param_1 :named("node"))
    $P5009 = _lex_param_1."!make"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<lwb>" :subid("cuid_137_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 505
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_133 
.annotate 'line', 506
    nqp_get_sc_object $P5003, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5002, $P5003, "QAST"
    get_who $P5001, $P5002
    set fb_tmp_133, $P5001
    repr_defined $I5001, fb_tmp_133
    unless $I5001 goto if807_else2117 
    set $P5004, fb_tmp_133["Regex"]
    set $P5006, $P5004
    goto if807_end2118
  if807_else2117:
    null $P5005
    set $P5006, $P5005
  if807_end2118:
    unless_null $P5006, vivi_8082119
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_8082119:
    $P5008 = $P5006."new"("anchor" :named("rxtype"), "lwb" :named("subtype"), _lex_param_1 :named("node"))
    $P5009 = _lex_param_1."!make"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<rwb>" :subid("cuid_138_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 509
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_134 
.annotate 'line', 510
    nqp_get_sc_object $P5003, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5002, $P5003, "QAST"
    get_who $P5001, $P5002
    set fb_tmp_134, $P5001
    repr_defined $I5001, fb_tmp_134
    unless $I5001 goto if809_else2120 
    set $P5004, fb_tmp_134["Regex"]
    set $P5006, $P5004
    goto if809_end2121
  if809_else2120:
    null $P5005
    set $P5006, $P5005
  if809_end2121:
    unless_null $P5006, vivi_8102122
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_8102122:
    $P5008 = $P5006."new"("anchor" :named("rxtype"), "rwb" :named("subtype"), _lex_param_1 :named("node"))
    $P5009 = _lex_param_1."!make"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<from>" :subid("cuid_139_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 513
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_135 
    .local pmc fb_tmp_136 
    .local pmc fb_tmp_137 
    .local pmc fb_tmp_138 
.annotate 'line', 514
    nqp_get_sc_object $P5003, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5002, $P5003, "QAST"
    get_who $P5001, $P5002
    set fb_tmp_135, $P5001
    repr_defined $I5001, fb_tmp_135
    unless $I5001 goto if811_else2123 
    set $P5004, fb_tmp_135["Regex"]
    set $P5006, $P5004
    goto if811_end2124
  if811_else2123:
    null $P5005
    set $P5006, $P5005
  if811_end2124:
    unless_null $P5006, vivi_8122125
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_8122125:
.annotate 'line', 516
    nqp_get_sc_object $P5010, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set fb_tmp_136, $P5008
    repr_defined $I5002, fb_tmp_136
    unless $I5002 goto if813_else2126 
    set $P5011, fb_tmp_136["Node"]
    set $P5013, $P5011
    goto if813_end2127
  if813_else2126:
    null $P5012
    set $P5013, $P5012
  if813_end2127:
    unless_null $P5013, vivi_8142128
    nqp_get_sc_object $P5014, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5013, $P5014
  vivi_8142128:
.annotate 'line', 517
    nqp_get_sc_object $P5017, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set fb_tmp_137, $P5015
    repr_defined $I5003, fb_tmp_137
    unless $I5003 goto if815_else2129 
    set $P5018, fb_tmp_137["SVal"]
    set $P5020, $P5018
    goto if815_end2130
  if815_else2129:
    null $P5019
    set $P5020, $P5019
  if815_end2130:
    unless_null $P5020, vivi_8162131
    nqp_get_sc_object $P5021, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5020, $P5021
  vivi_8162131:
    $P5022 = $P5020."new"("!LITERAL" :named("value"))
.annotate 'line', 518
    nqp_get_sc_object $P5025, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set fb_tmp_138, $P5023
    repr_defined $I5004, fb_tmp_138
    unless $I5004 goto if817_else2132 
    set $P5026, fb_tmp_138["SVal"]
    set $P5028, $P5026
    goto if817_end2133
  if817_else2132:
    null $P5027
    set $P5028, $P5027
  if817_end2133:
    unless_null $P5028, vivi_8182134
    nqp_get_sc_object $P5029, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5028, $P5029
  vivi_8182134:
    $P5030 = $P5028."new"("" :named("value"))
    $P5031 = $P5013."new"($P5022, $P5030)
    $P5032 = $P5006."new"($P5031, "subrule" :named("rxtype"), "capture" :named("subtype"), "r" :named("backtrack"), "$!from" :named("name"), _lex_param_1 :named("node"))
    $P5033 = _lex_param_1."!make"($P5032)
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<to>" :subid("cuid_140_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 521
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_139 
    .local pmc fb_tmp_140 
    .local pmc fb_tmp_141 
    .local pmc fb_tmp_142 
.annotate 'line', 522
    nqp_get_sc_object $P5003, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5002, $P5003, "QAST"
    get_who $P5001, $P5002
    set fb_tmp_139, $P5001
    repr_defined $I5001, fb_tmp_139
    unless $I5001 goto if819_else2135 
    set $P5004, fb_tmp_139["Regex"]
    set $P5006, $P5004
    goto if819_end2136
  if819_else2135:
    null $P5005
    set $P5006, $P5005
  if819_end2136:
    unless_null $P5006, vivi_8202137
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_8202137:
.annotate 'line', 524
    nqp_get_sc_object $P5010, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set fb_tmp_140, $P5008
    repr_defined $I5002, fb_tmp_140
    unless $I5002 goto if821_else2138 
    set $P5011, fb_tmp_140["Node"]
    set $P5013, $P5011
    goto if821_end2139
  if821_else2138:
    null $P5012
    set $P5013, $P5012
  if821_end2139:
    unless_null $P5013, vivi_8222140
    nqp_get_sc_object $P5014, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5013, $P5014
  vivi_8222140:
.annotate 'line', 525
    nqp_get_sc_object $P5017, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set fb_tmp_141, $P5015
    repr_defined $I5003, fb_tmp_141
    unless $I5003 goto if823_else2141 
    set $P5018, fb_tmp_141["SVal"]
    set $P5020, $P5018
    goto if823_end2142
  if823_else2141:
    null $P5019
    set $P5020, $P5019
  if823_end2142:
    unless_null $P5020, vivi_8242143
    nqp_get_sc_object $P5021, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5020, $P5021
  vivi_8242143:
    $P5022 = $P5020."new"("!LITERAL" :named("value"))
.annotate 'line', 526
    nqp_get_sc_object $P5025, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set fb_tmp_142, $P5023
    repr_defined $I5004, fb_tmp_142
    unless $I5004 goto if825_else2144 
    set $P5026, fb_tmp_142["SVal"]
    set $P5028, $P5026
    goto if825_end2145
  if825_else2144:
    null $P5027
    set $P5028, $P5027
  if825_end2145:
    unless_null $P5028, vivi_8262146
    nqp_get_sc_object $P5029, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5028, $P5029
  vivi_8262146:
    $P5030 = $P5028."new"("" :named("value"))
    $P5031 = $P5013."new"($P5022, $P5030)
    $P5032 = $P5006."new"($P5031, "subrule" :named("rxtype"), "capture" :named("subtype"), "r" :named("backtrack"), "$!to" :named("name"), _lex_param_1 :named("node"))
    $P5033 = _lex_param_1."!make"($P5032)
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<bs>" :subid("cuid_141_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 529
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_143 
.annotate 'line', 530
    unless_null _lex_param_1, fallback2149
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5001
  fallback2149:
    set fb_tmp_143, _lex_param_1
    repr_defined $I5001, fb_tmp_143
    unless $I5001 goto if827_else2147 
    set $P5002, fb_tmp_143["backslash"]
    set $P5004, $P5002
    goto if827_end2148
  if827_else2147:
    null $P5003
    set $P5004, $P5003
  if827_end2148:
    unless_null $P5004, vivi_8282150
    nqp_get_sc_object $P5005, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5004, $P5005
  vivi_8282150:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<assert>" :subid("cuid_142_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 533
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_144 
.annotate 'line', 534
    unless_null _lex_param_1, fallback2153
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5001
  fallback2153:
    set fb_tmp_144, _lex_param_1
    repr_defined $I5001, fb_tmp_144
    unless $I5001 goto if829_else2151 
    set $P5002, fb_tmp_144["assertion"]
    set $P5004, $P5002
    goto if829_end2152
  if829_else2151:
    null $P5003
    set $P5004, $P5003
  if829_end2152:
    unless_null $P5004, vivi_8302154
    nqp_get_sc_object $P5005, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5004, $P5005
  vivi_8302154:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<var>" :subid("cuid_143_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 537
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "$name", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_145 
    .local pmc fb_tmp_146 
    .local pmc fb_tmp_147 
    .local pmc fb_tmp_148 
    .local pmc fb_tmp_149 
    .local pmc fb_tmp_150 
    .local pmc fb_tmp_151 
    .local pmc fb_tmp_152 
    .local pmc fb_tmp_153 
    .local pmc fb_tmp_154 
    .local pmc fb_tmp_155 
    .local pmc fb_tmp_156 
    .local pmc fb_tmp_157 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback2159
    nqp_get_sc_object $P5003, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5003
  fallback2159:
    set fb_tmp_145, _lex_param_1
    repr_defined $I5001, fb_tmp_145
    unless $I5001 goto if832_else2157 
    set $P5004, fb_tmp_145["pos"]
    set $P5006, $P5004
    goto if832_end2158
  if832_else2157:
    null $P5005
    set $P5006, $P5005
  if832_end2158:
    unless_null $P5006, vivi_8332160
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_8332160:
    unless $P5006 goto if831_else2155 
    unless_null _lex_param_1, fallback2163
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5008
  fallback2163:
    set fb_tmp_146, _lex_param_1
    repr_defined $I5002, fb_tmp_146
    unless $I5002 goto if834_else2161 
    set $P5009, fb_tmp_146["pos"]
    set $P5011, $P5009
    goto if834_end2162
  if834_else2161:
    null $P5010
    set $P5011, $P5010
  if834_end2162:
    unless_null $P5011, vivi_8352164
    nqp_get_sc_object $P5012, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5011, $P5012
  vivi_8352164:
    set $N5001, $P5011
    box $P5019, $N5001
    set $P5018, $P5019
    goto if831_end2156
  if831_else2155:
    unless_null _lex_param_1, fallback2167
    nqp_get_sc_object $P5013, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5013
  fallback2167:
    set fb_tmp_147, _lex_param_1
    repr_defined $I5003, fb_tmp_147
    unless $I5003 goto if836_else2165 
    set $P5014, fb_tmp_147["name"]
    set $P5016, $P5014
    goto if836_end2166
  if836_else2165:
    null $P5015
    set $P5016, $P5015
  if836_end2166:
    unless_null $P5016, vivi_8372168
    nqp_get_sc_object $P5017, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5016, $P5017
  vivi_8372168:
    set $S5001, $P5016
    box $P5020, $S5001
    set $P5018, $P5020
  if831_end2156:
    set $P102, $P5018
    unless_null _lex_param_1, fallback2173
    nqp_get_sc_object $P5021, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5021
  fallback2173:
    set fb_tmp_148, _lex_param_1
    repr_defined $I5004, fb_tmp_148
    unless $I5004 goto if839_else2171 
    set $P5022, fb_tmp_148["quantified_atom"]
    set $P5024, $P5022
    goto if839_end2172
  if839_else2171:
    null $P5023
    set $P5024, $P5023
  if839_end2172:
    unless_null $P5024, vivi_8402174
    nqp_get_sc_object $P5025, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5024, $P5025
  vivi_8402174:
    unless $P5024 goto if838_else2169 
.annotate 'line', 540
.annotate 'line', 541
    unless_null _lex_param_1, fallback2179
    nqp_get_sc_object $P5026, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5026
  fallback2179:
    set fb_tmp_150, _lex_param_1
    repr_defined $I5006, fb_tmp_150
    unless $I5006 goto if842_else2177 
    set $P5027, fb_tmp_150["quantified_atom"]
    set $P5029, $P5027
    goto if842_end2178
  if842_else2177:
    null $P5028
    set $P5029, $P5028
  if842_end2178:
    unless_null $P5029, vivi_8432180
    nqp_get_sc_object $P5030, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5029, $P5030
  vivi_8432180:
    set fb_tmp_149, $P5029
    repr_defined $I5005, fb_tmp_149
    unless $I5005 goto if841_else2175 
    set $P5031, fb_tmp_149[0]
    set $P5033, $P5031
    goto if841_end2176
  if841_else2175:
    null $P5032
    set $P5033, $P5032
  if841_end2176:
    unless_null $P5033, vivi_8442181
    nqp_get_sc_object $P5034, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5033, $P5034
  vivi_8442181:
    $P5035 = $P5033."ast"()
    set $P101, $P5035
.annotate 'line', 542
    $P5036 = $P101."rxtype"()
    set $S5002, $P5036
    iseq $I5007, $S5002, "quant"
    set $I5010, $I5007
    unless $I5007 goto if846_end2185 
    set fb_tmp_151, $P101
    repr_defined $I5009, fb_tmp_151
    unless $I5009 goto if847_else2186 
    set $P5037, fb_tmp_151[0]
    set $P5039, $P5037
    goto if847_end2187
  if847_else2186:
    null $P5038
    set $P5039, $P5038
  if847_end2187:
    unless_null $P5039, vivi_8482188
    nqp_get_sc_object $P5040, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5039, $P5040
  vivi_8482188:
    $P5041 = $P5039."rxtype"()
    set $S5003, $P5041
    iseq $I5008, $S5003, "subrule"
    set $I5010, $I5008
  if846_end2185:
    unless $I5010 goto if845_else2182 
.annotate 'line', 543
    nqp_decontainerize $P5042, _lex_param_0
    set fb_tmp_152, $P101
    repr_defined $I5011, fb_tmp_152
    unless $I5011 goto if849_else2189 
    set $P5043, fb_tmp_152[0]
    set $P5045, $P5043
    goto if849_end2190
  if849_else2189:
    null $P5044
    set $P5045, $P5044
  if849_end2190:
    unless_null $P5045, vivi_8502191
    nqp_get_sc_object $P5046, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5045, $P5046
  vivi_8502191:
    $P5047 = $P5042."subrule_alias"($P5045, $P102)
    set $P5060, $P5047
    goto if845_end2183
  if845_else2182:
.annotate 'line', 545
    $P5048 = $P101."rxtype"()
    set $S5004, $P5048
    iseq $I5012, $S5004, "subrule"
    unless $I5012 goto if851_else2192 
.annotate 'line', 546
    nqp_decontainerize $P5049, _lex_param_0
    $P5050 = $P5049."subrule_alias"($P101, $P102)
    set $P5059, $P5050
    goto if851_end2193
  if851_else2192:
.annotate 'line', 548
.annotate 'line', 549
    nqp_get_sc_object $P5053, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set fb_tmp_153, $P5051
    repr_defined $I5013, fb_tmp_153
    unless $I5013 goto if852_else2194 
    set $P5054, fb_tmp_153["Regex"]
    set $P5056, $P5054
    goto if852_end2195
  if852_else2194:
    null $P5055
    set $P5056, $P5055
  if852_end2195:
    unless_null $P5056, vivi_8532196
    nqp_get_sc_object $P5057, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5056, $P5057
  vivi_8532196:
    $P5058 = $P5056."new"($P101, $P102 :named("name"), "subcapture" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5058
    set $P5059, $P101
  if851_end2193:
    set $P5060, $P5059
  if845_end2183:
    goto if838_end2170
  if838_else2169:
.annotate 'line', 553
.annotate 'line', 554
    nqp_get_sc_object $P5063, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5062, $P5063, "QAST"
    get_who $P5061, $P5062
    set fb_tmp_154, $P5061
    repr_defined $I5014, fb_tmp_154
    unless $I5014 goto if854_else2197 
    set $P5064, fb_tmp_154["Regex"]
    set $P5066, $P5064
    goto if854_end2198
  if854_else2197:
    null $P5065
    set $P5066, $P5065
  if854_end2198:
    unless_null $P5066, vivi_8552199
    nqp_get_sc_object $P5067, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5066, $P5067
  vivi_8552199:
.annotate 'line', 555
    nqp_get_sc_object $P5070, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5069, $P5070, "QAST"
    get_who $P5068, $P5069
    set fb_tmp_155, $P5068
    repr_defined $I5015, fb_tmp_155
    unless $I5015 goto if856_else2200 
    set $P5071, fb_tmp_155["Node"]
    set $P5073, $P5071
    goto if856_end2201
  if856_else2200:
    null $P5072
    set $P5073, $P5072
  if856_end2201:
    unless_null $P5073, vivi_8572202
    nqp_get_sc_object $P5074, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5073, $P5074
  vivi_8572202:
.annotate 'line', 556
    nqp_get_sc_object $P5077, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5076, $P5077, "QAST"
    get_who $P5075, $P5076
    set fb_tmp_156, $P5075
    repr_defined $I5016, fb_tmp_156
    unless $I5016 goto if858_else2203 
    set $P5078, fb_tmp_156["SVal"]
    set $P5080, $P5078
    goto if858_end2204
  if858_else2203:
    null $P5079
    set $P5080, $P5079
  if858_end2204:
    unless_null $P5080, vivi_8592205
    nqp_get_sc_object $P5081, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5080, $P5081
  vivi_8592205:
    $P5082 = $P5080."new"("!BACKREF" :named("value"))
.annotate 'line', 557
    nqp_get_sc_object $P5085, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5084, $P5085, "QAST"
    get_who $P5083, $P5084
    set fb_tmp_157, $P5083
    repr_defined $I5017, fb_tmp_157
    unless $I5017 goto if860_else2206 
    set $P5086, fb_tmp_157["SVal"]
    set $P5088, $P5086
    goto if860_end2207
  if860_else2206:
    null $P5087
    set $P5088, $P5087
  if860_end2207:
    unless_null $P5088, vivi_8612208
    nqp_get_sc_object $P5089, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5088, $P5089
  vivi_8612208:
    $P5090 = $P5088."new"($P102 :named("value"))
    $P5091 = $P5073."new"($P5082, $P5090)
    $P5092 = $P5066."new"($P5091, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    set $P101, $P5092
  if838_end2170:
.annotate 'line', 559
    $P5093 = _lex_param_1."!make"($P101)
    .return ($P5093) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<~>" :subid("cuid_144_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 562
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@dba", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_158 
    .local pmc fb_tmp_159 
    .local pmc fb_tmp_160 
    .local pmc fb_tmp_161 
    .local pmc fb_tmp_162 
    .local pmc fb_tmp_163 
    .local pmc fb_tmp_164 
    .local pmc fb_tmp_165 
    .local pmc fb_tmp_166 
    .local pmc fb_tmp_167 
    .local pmc fb_tmp_168 
    .local pmc fb_tmp_169 
    .local pmc fb_tmp_170 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_dynamic_lex $P5002, "%*RX"
    unless_null $P5002, fallback2211
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5003, $P5004
    set fb_tmp_158, $P5003
    repr_defined $I5002, fb_tmp_158
    unless $I5002 goto if863_else2212 
    set $P5005, fb_tmp_158["%RX"]
    set $P5007, $P5005
    goto if863_end2213
  if863_else2212:
    null $P5006
    set $P5007, $P5006
  if863_end2213:
    unless_null $P5007, vivi_8642214
    nqp_get_sc_object $P5009, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%RX"], $P5010
    set $P5007, $P5010
  vivi_8642214:
    unless_null $P5007, vivi_8652215
    die "Contextual %*RX not found"
    box $P5011, "Contextual %*RX not found"
    set $P5007, $P5011
  vivi_8652215:
    set $P5002, $P5007
  fallback2211:
    exists $I5001, $P5002["dba"]
    unless $I5001 goto if862_end2210 
    new $P5012, 'ResizablePMCArray'
.annotate 'line', 563
    nqp_get_sc_object $P5015, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set fb_tmp_159, $P5013
    repr_defined $I5003, fb_tmp_159
    unless $I5003 goto if866_else2216 
    set $P5016, fb_tmp_159["SVal"]
    set $P5018, $P5016
    goto if866_end2217
  if866_else2216:
    null $P5017
    set $P5018, $P5017
  if866_end2217:
    unless_null $P5018, vivi_8672218
    nqp_get_sc_object $P5019, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5018, $P5019
  vivi_8672218:
    find_dynamic_lex $P5020, "%*RX"
    unless_null $P5020, fallback2221
    nqp_get_sc_object $P5022, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5021, $P5022
    set fb_tmp_161, $P5021
    repr_defined $I5005, fb_tmp_161
    unless $I5005 goto if869_else2222 
    set $P5023, fb_tmp_161["%RX"]
    set $P5025, $P5023
    goto if869_end2223
  if869_else2222:
    null $P5024
    set $P5025, $P5024
  if869_end2223:
    unless_null $P5025, vivi_8702224
    nqp_get_sc_object $P5027, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5026, $P5027
    new $P5028, 'Hash'
    set $P5026["%RX"], $P5028
    set $P5025, $P5028
  vivi_8702224:
    unless_null $P5025, vivi_8712225
    die "Contextual %*RX not found"
    box $P5029, "Contextual %*RX not found"
    set $P5025, $P5029
  vivi_8712225:
    set $P5020, $P5025
  fallback2221:
    set fb_tmp_160, $P5020
    repr_defined $I5004, fb_tmp_160
    unless $I5004 goto if868_else2219 
    set $P5030, fb_tmp_160["dba"]
    set $P5032, $P5030
    goto if868_end2220
  if868_else2219:
    null $P5031
    set $P5032, $P5031
  if868_end2220:
    unless_null $P5032, vivi_8722226
    nqp_get_sc_object $P5033, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5032, $P5033
  vivi_8722226:
    $P5034 = $P5018."new"($P5032 :named("value"))
    push $P5012, $P5034
    set $P101, $P5012
  if862_end2210:
.annotate 'line', 564
    nqp_get_sc_object $P5037, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set fb_tmp_162, $P5035
    repr_defined $I5006, fb_tmp_162
    unless $I5006 goto if873_else2227 
    set $P5038, fb_tmp_162["Regex"]
    set $P5040, $P5038
    goto if873_end2228
  if873_else2227:
    null $P5039
    set $P5040, $P5039
  if873_end2228:
    unless_null $P5040, vivi_8742229
    nqp_get_sc_object $P5041, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5040, $P5041
  vivi_8742229:
.annotate 'line', 565
    unless_null _lex_param_1, fallback2232
    nqp_get_sc_object $P5042, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5042
  fallback2232:
    set fb_tmp_163, _lex_param_1
    repr_defined $I5007, fb_tmp_163
    unless $I5007 goto if875_else2230 
    set $P5043, fb_tmp_163["EXPR"]
    set $P5045, $P5043
    goto if875_end2231
  if875_else2230:
    null $P5044
    set $P5045, $P5044
  if875_end2231:
    unless_null $P5045, vivi_8762233
    nqp_get_sc_object $P5046, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5045, $P5046
  vivi_8762233:
    $P5047 = $P5045."ast"()
.annotate 'line', 566
    nqp_get_sc_object $P5050, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set fb_tmp_164, $P5048
    repr_defined $I5008, fb_tmp_164
    unless $I5008 goto if877_else2234 
    set $P5051, fb_tmp_164["Regex"]
    set $P5053, $P5051
    goto if877_end2235
  if877_else2234:
    null $P5052
    set $P5053, $P5052
  if877_end2235:
    unless_null $P5053, vivi_8782236
    nqp_get_sc_object $P5054, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5053, $P5054
  vivi_8782236:
.annotate 'line', 567
    unless_null _lex_param_1, fallback2239
    nqp_get_sc_object $P5055, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5055
  fallback2239:
    set fb_tmp_165, _lex_param_1
    repr_defined $I5009, fb_tmp_165
    unless $I5009 goto if879_else2237 
    set $P5056, fb_tmp_165["GOAL"]
    set $P5058, $P5056
    goto if879_end2238
  if879_else2237:
    null $P5057
    set $P5058, $P5057
  if879_end2238:
    unless_null $P5058, vivi_8802240
    nqp_get_sc_object $P5059, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5058, $P5059
  vivi_8802240:
    $P5060 = $P5058."ast"()
.annotate 'line', 568
    nqp_get_sc_object $P5063, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5062, $P5063, "QAST"
    get_who $P5061, $P5062
    set fb_tmp_166, $P5061
    repr_defined $I5010, fb_tmp_166
    unless $I5010 goto if881_else2241 
    set $P5064, fb_tmp_166["Regex"]
    set $P5066, $P5064
    goto if881_end2242
  if881_else2241:
    null $P5065
    set $P5066, $P5065
  if881_end2242:
    unless_null $P5066, vivi_8822243
    nqp_get_sc_object $P5067, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5066, $P5067
  vivi_8822243:
.annotate 'line', 569
    nqp_get_sc_object $P5070, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5069, $P5070, "QAST"
    get_who $P5068, $P5069
    set fb_tmp_167, $P5068
    repr_defined $I5011, fb_tmp_167
    unless $I5011 goto if883_else2244 
    set $P5071, fb_tmp_167["Node"]
    set $P5073, $P5071
    goto if883_end2245
  if883_else2244:
    null $P5072
    set $P5073, $P5072
  if883_end2245:
    unless_null $P5073, vivi_8842246
    nqp_get_sc_object $P5074, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5073, $P5074
  vivi_8842246:
.annotate 'line', 570
    nqp_get_sc_object $P5077, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5076, $P5077, "QAST"
    get_who $P5075, $P5076
    set fb_tmp_168, $P5075
    repr_defined $I5012, fb_tmp_168
    unless $I5012 goto if885_else2247 
    set $P5078, fb_tmp_168["SVal"]
    set $P5080, $P5078
    goto if885_end2248
  if885_else2247:
    null $P5079
    set $P5080, $P5079
  if885_end2248:
    unless_null $P5080, vivi_8862249
    nqp_get_sc_object $P5081, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5080, $P5081
  vivi_8862249:
    $P5082 = $P5080."new"("FAILGOAL" :named("value"))
.annotate 'line', 571
    nqp_get_sc_object $P5085, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5084, $P5085, "QAST"
    get_who $P5083, $P5084
    set fb_tmp_169, $P5083
    repr_defined $I5013, fb_tmp_169
    unless $I5013 goto if887_else2250 
    set $P5086, fb_tmp_169["SVal"]
    set $P5088, $P5086
    goto if887_end2251
  if887_else2250:
    null $P5087
    set $P5088, $P5087
  if887_end2251:
    unless_null $P5088, vivi_8882252
    nqp_get_sc_object $P5089, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5088, $P5089
  vivi_8882252:
    unless_null _lex_param_1, fallback2255
    nqp_get_sc_object $P5090, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5090
  fallback2255:
    set fb_tmp_170, _lex_param_1
    repr_defined $I5014, fb_tmp_170
    unless $I5014 goto if889_else2253 
    set $P5091, fb_tmp_170["GOAL"]
    set $P5093, $P5091
    goto if889_end2254
  if889_else2253:
    null $P5092
    set $P5093, $P5092
  if889_end2254:
    unless_null $P5093, vivi_8902256
    nqp_get_sc_object $P5094, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5093, $P5094
  vivi_8902256:
    set $S5001, $P5093
    $P5095 = $P5088."new"($S5001 :named("value"))
    $P5096 = $P5073."new"($P5082, $P5095, $P101 :flat)
    $P5097 = $P5066."new"($P5096, "subrule" :named("rxtype"), "method" :named("subtype"))
    $P5098 = $P5053."new"($P5060, $P5097, "altseq" :named("rxtype"))
    $P5099 = $P5040."new"($P5047, $P5098, "concat" :named("rxtype"))
    $P5100 = _lex_param_1."!make"($P5099)
    .return ($P5100) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<mod>" :subid("cuid_145_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 579
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_171 
    unless_null _lex_param_1, fallback2259
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5001
  fallback2259:
    set fb_tmp_171, _lex_param_1
    repr_defined $I5001, fb_tmp_171
    unless $I5001 goto if891_else2257 
    set $P5002, fb_tmp_171["mod_internal"]
    set $P5004, $P5002
    goto if891_end2258
  if891_else2257:
    null $P5003
    set $P5004, $P5003
  if891_end2258:
    unless_null $P5004, vivi_8922260
    nqp_get_sc_object $P5005, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5004, $P5005
  vivi_8922260:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<s>" :subid("cuid_146_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 581
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_172 
    .local pmc fb_tmp_173 
    .local pmc fb_tmp_174 
    .local pmc fb_tmp_175 
.annotate 'line', 582
    nqp_get_sc_object $P5003, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5002, $P5003, "QAST"
    get_who $P5001, $P5002
    set fb_tmp_172, $P5001
    repr_defined $I5001, fb_tmp_172
    unless $I5001 goto if893_else2261 
    set $P5004, fb_tmp_172["Regex"]
    set $P5006, $P5004
    goto if893_end2262
  if893_else2261:
    null $P5005
    set $P5006, $P5005
  if893_end2262:
    unless_null $P5006, vivi_8942263
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_8942263:
    unless_null _lex_param_1, fallback2268
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5008
  fallback2268:
    set fb_tmp_173, _lex_param_1
    repr_defined $I5003, fb_tmp_173
    unless $I5003 goto if896_else2266 
    set $P5009, fb_tmp_173["sym"]
    set $P5011, $P5009
    goto if896_end2267
  if896_else2266:
    null $P5010
    set $P5011, $P5010
  if896_end2267:
    unless_null $P5011, vivi_8972269
    nqp_get_sc_object $P5012, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5011, $P5012
  vivi_8972269:
    set $S5001, $P5011
    iseq $I5002, $S5001, "n"
    unless $I5002 goto if895_else2264 
    set $S5003, "nl"
    goto if895_end2265
  if895_else2264:
    unless_null _lex_param_1, fallback2272
    nqp_get_sc_object $P5013, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5013
  fallback2272:
    set fb_tmp_174, _lex_param_1
    repr_defined $I5004, fb_tmp_174
    unless $I5004 goto if898_else2270 
    set $P5014, fb_tmp_174["sym"]
    set $P5016, $P5014
    goto if898_end2271
  if898_else2270:
    null $P5015
    set $P5016, $P5015
  if898_end2271:
    unless_null $P5016, vivi_8992273
    nqp_get_sc_object $P5017, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5016, $P5017
  vivi_8992273:
    set $S5002, $P5016
    set $S5003, $S5002
  if895_end2265:
    unless_null _lex_param_1, fallback2276
    nqp_get_sc_object $P5018, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5018
  fallback2276:
    set fb_tmp_175, _lex_param_1
    repr_defined $I5006, fb_tmp_175
    unless $I5006 goto if900_else2274 
    set $P5019, fb_tmp_175["sym"]
    set $P5021, $P5019
    goto if900_end2275
  if900_else2274:
    null $P5020
    set $P5021, $P5020
  if900_end2275:
    unless_null $P5021, vivi_9012277
    nqp_get_sc_object $P5022, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5021, $P5022
  vivi_9012277:
    set $S5004, $P5021
    isle $I5005, $S5004, "Z"
    $P5023 = $P5006."new"(".CCLASS_WHITESPACE", "cclass" :named("rxtype"), $S5003 :named("subtype"), $I5005 :named("negate"), _lex_param_1 :named("node"))
    $P5024 = _lex_param_1."!make"($P5023)
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<b>" :subid("cuid_147_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 587
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_176 
    .local pmc fb_tmp_177 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 588
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set fb_tmp_176, $P5002
    repr_defined $I5001, fb_tmp_176
    unless $I5001 goto if902_else2278 
    set $P5005, fb_tmp_176["Regex"]
    set $P5007, $P5005
    goto if902_end2279
  if902_else2278:
    null $P5006
    set $P5007, $P5006
  if902_end2279:
    unless_null $P5007, vivi_9032280
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5007, $P5008
  vivi_9032280:
    unless_null _lex_param_1, fallback2283
    nqp_get_sc_object $P5009, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5009
  fallback2283:
    set fb_tmp_177, _lex_param_1
    repr_defined $I5003, fb_tmp_177
    unless $I5003 goto if904_else2281 
    set $P5010, fb_tmp_177["sym"]
    set $P5012, $P5010
    goto if904_end2282
  if904_else2281:
    null $P5011
    set $P5012, $P5011
  if904_end2282:
    unless_null $P5012, vivi_9052284
    nqp_get_sc_object $P5013, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5012, $P5013
  vivi_9052284:
    set $S5001, $P5012
    iseq $I5002, $S5001, "B"
    $P5014 = $P5007."new"("\b", "enumcharlist" :named("rxtype"), $I5002 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5014
.annotate 'line', 590
    $P5015 = _lex_param_1."!make"($P101)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<e>" :subid("cuid_148_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 593
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_178 
    .local pmc fb_tmp_179 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 594
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set fb_tmp_178, $P5002
    repr_defined $I5001, fb_tmp_178
    unless $I5001 goto if906_else2285 
    set $P5005, fb_tmp_178["Regex"]
    set $P5007, $P5005
    goto if906_end2286
  if906_else2285:
    null $P5006
    set $P5007, $P5006
  if906_end2286:
    unless_null $P5007, vivi_9072287
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5007, $P5008
  vivi_9072287:
    unless_null _lex_param_1, fallback2290
    nqp_get_sc_object $P5009, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5009
  fallback2290:
    set fb_tmp_179, _lex_param_1
    repr_defined $I5003, fb_tmp_179
    unless $I5003 goto if908_else2288 
    set $P5010, fb_tmp_179["sym"]
    set $P5012, $P5010
    goto if908_end2289
  if908_else2288:
    null $P5011
    set $P5012, $P5011
  if908_end2289:
    unless_null $P5012, vivi_9092291
    nqp_get_sc_object $P5013, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5012, $P5013
  vivi_9092291:
    set $S5001, $P5012
    iseq $I5002, $S5001, "E"
    $P5014 = $P5007."new"("\e", "enumcharlist" :named("rxtype"), $I5002 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5014
.annotate 'line', 596
    $P5015 = _lex_param_1."!make"($P101)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<f>" :subid("cuid_149_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 599
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_180 
    .local pmc fb_tmp_181 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 600
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set fb_tmp_180, $P5002
    repr_defined $I5001, fb_tmp_180
    unless $I5001 goto if910_else2292 
    set $P5005, fb_tmp_180["Regex"]
    set $P5007, $P5005
    goto if910_end2293
  if910_else2292:
    null $P5006
    set $P5007, $P5006
  if910_end2293:
    unless_null $P5007, vivi_9112294
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5007, $P5008
  vivi_9112294:
    unless_null _lex_param_1, fallback2297
    nqp_get_sc_object $P5009, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5009
  fallback2297:
    set fb_tmp_181, _lex_param_1
    repr_defined $I5003, fb_tmp_181
    unless $I5003 goto if912_else2295 
    set $P5010, fb_tmp_181["sym"]
    set $P5012, $P5010
    goto if912_end2296
  if912_else2295:
    null $P5011
    set $P5012, $P5011
  if912_end2296:
    unless_null $P5012, vivi_9132298
    nqp_get_sc_object $P5013, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5012, $P5013
  vivi_9132298:
    set $S5001, $P5012
    iseq $I5002, $S5001, "F"
    $P5014 = $P5007."new"("\f", "enumcharlist" :named("rxtype"), $I5002 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5014
.annotate 'line', 602
    $P5015 = _lex_param_1."!make"($P101)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<h>" :subid("cuid_150_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 605
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_182 
    .local pmc fb_tmp_183 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 606
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set fb_tmp_182, $P5002
    repr_defined $I5001, fb_tmp_182
    unless $I5001 goto if914_else2299 
    set $P5005, fb_tmp_182["Regex"]
    set $P5007, $P5005
    goto if914_end2300
  if914_else2299:
    null $P5006
    set $P5007, $P5006
  if914_end2300:
    unless_null $P5007, vivi_9152301
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5007, $P5008
  vivi_9152301:
    unless_null _lex_param_1, fallback2304
    nqp_get_sc_object $P5009, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5009
  fallback2304:
    set fb_tmp_183, _lex_param_1
    repr_defined $I5003, fb_tmp_183
    unless $I5003 goto if916_else2302 
    set $P5010, fb_tmp_183["sym"]
    set $P5012, $P5010
    goto if916_end2303
  if916_else2302:
    null $P5011
    set $P5012, $P5011
  if916_end2303:
    unless_null $P5012, vivi_9172305
    nqp_get_sc_object $P5013, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5012, $P5013
  vivi_9172305:
    set $S5001, $P5012
    iseq $I5002, $S5001, "H"
    $P5014 = $P5007."new"(utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", "enumcharlist" :named("rxtype"), $I5002 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5014
.annotate 'line', 608
    $P5015 = _lex_param_1."!make"($P101)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<r>" :subid("cuid_151_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 611
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_184 
    .local pmc fb_tmp_185 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 612
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set fb_tmp_184, $P5002
    repr_defined $I5001, fb_tmp_184
    unless $I5001 goto if918_else2306 
    set $P5005, fb_tmp_184["Regex"]
    set $P5007, $P5005
    goto if918_end2307
  if918_else2306:
    null $P5006
    set $P5007, $P5006
  if918_end2307:
    unless_null $P5007, vivi_9192308
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5007, $P5008
  vivi_9192308:
    unless_null _lex_param_1, fallback2311
    nqp_get_sc_object $P5009, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5009
  fallback2311:
    set fb_tmp_185, _lex_param_1
    repr_defined $I5003, fb_tmp_185
    unless $I5003 goto if920_else2309 
    set $P5010, fb_tmp_185["sym"]
    set $P5012, $P5010
    goto if920_end2310
  if920_else2309:
    null $P5011
    set $P5012, $P5011
  if920_end2310:
    unless_null $P5012, vivi_9212312
    nqp_get_sc_object $P5013, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5012, $P5013
  vivi_9212312:
    set $S5001, $P5012
    iseq $I5002, $S5001, "R"
    $P5014 = $P5007."new"("\r", "enumcharlist" :named("rxtype"), $I5002 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5014
.annotate 'line', 614
    $P5015 = _lex_param_1."!make"($P101)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<t>" :subid("cuid_152_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 617
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_186 
    .local pmc fb_tmp_187 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 618
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set fb_tmp_186, $P5002
    repr_defined $I5001, fb_tmp_186
    unless $I5001 goto if922_else2313 
    set $P5005, fb_tmp_186["Regex"]
    set $P5007, $P5005
    goto if922_end2314
  if922_else2313:
    null $P5006
    set $P5007, $P5006
  if922_end2314:
    unless_null $P5007, vivi_9232315
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5007, $P5008
  vivi_9232315:
    unless_null _lex_param_1, fallback2318
    nqp_get_sc_object $P5009, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5009
  fallback2318:
    set fb_tmp_187, _lex_param_1
    repr_defined $I5003, fb_tmp_187
    unless $I5003 goto if924_else2316 
    set $P5010, fb_tmp_187["sym"]
    set $P5012, $P5010
    goto if924_end2317
  if924_else2316:
    null $P5011
    set $P5012, $P5011
  if924_end2317:
    unless_null $P5012, vivi_9252319
    nqp_get_sc_object $P5013, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5012, $P5013
  vivi_9252319:
    set $S5001, $P5012
    iseq $I5002, $S5001, "T"
    $P5014 = $P5007."new"("\t", "enumcharlist" :named("rxtype"), $I5002 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5014
.annotate 'line', 620
    $P5015 = _lex_param_1."!make"($P101)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<v>" :subid("cuid_153_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 623
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_188 
    .local pmc fb_tmp_189 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 624
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set fb_tmp_188, $P5002
    repr_defined $I5001, fb_tmp_188
    unless $I5001 goto if926_else2320 
    set $P5005, fb_tmp_188["Regex"]
    set $P5007, $P5005
    goto if926_end2321
  if926_else2320:
    null $P5006
    set $P5007, $P5006
  if926_end2321:
    unless_null $P5007, vivi_9272322
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5007, $P5008
  vivi_9272322:
    unless_null _lex_param_1, fallback2325
    nqp_get_sc_object $P5009, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5009
  fallback2325:
    set fb_tmp_189, _lex_param_1
    repr_defined $I5003, fb_tmp_189
    unless $I5003 goto if928_else2323 
    set $P5010, fb_tmp_189["sym"]
    set $P5012, $P5010
    goto if928_end2324
  if928_else2323:
    null $P5011
    set $P5012, $P5011
  if928_end2324:
    unless_null $P5012, vivi_9292326
    nqp_get_sc_object $P5013, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5012, $P5013
  vivi_9292326:
    set $S5001, $P5012
    iseq $I5002, $S5001, "V"
    $P5014 = $P5007."new"(utf8:"\n\x{b}\f\r\x{85}\u2028\u2029", "enumcharlist" :named("rxtype"), $I5002 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5014
.annotate 'line', 627
    $P5015 = _lex_param_1."!make"($P101)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<o>" :subid("cuid_154_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 630
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$octlit", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_190 
    .local pmc fb_tmp_191 
    .local pmc fb_tmp_192 
    .local pmc fb_tmp_193 
    .local pmc fb_tmp_194 
    .local pmc fb_tmp_195 
    .local pmc fb_tmp_196 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 632
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5003, $P5004, "HLL"
    get_who $P5002, $P5003
    set fb_tmp_190, $P5002
    repr_defined $I5001, fb_tmp_190
    unless $I5001 goto if930_else2327 
    set $P5005, fb_tmp_190["Actions"]
    set $P5007, $P5005
    goto if930_end2328
  if930_else2327:
    null $P5006
    set $P5007, $P5006
  if930_end2328:
    unless_null $P5007, vivi_9312329
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5007, $P5008
  vivi_9312329:
    unless_null _lex_param_1, fallback2334
    nqp_get_sc_object $P5009, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5009
  fallback2334:
    set fb_tmp_191, _lex_param_1
    repr_defined $I5002, fb_tmp_191
    unless $I5002 goto if933_else2332 
    set $P5010, fb_tmp_191["octint"]
    set $P5012, $P5010
    goto if933_end2333
  if933_else2332:
    null $P5011
    set $P5012, $P5011
  if933_end2333:
    unless_null $P5012, vivi_9342335
    nqp_get_sc_object $P5013, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5012, $P5013
  vivi_9342335:
    set $P5023, $P5012
    if $P5012 goto unless932_end2331 
    unless_null _lex_param_1, fallback2340
    nqp_get_sc_object $P5014, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5014
  fallback2340:
    set fb_tmp_193, _lex_param_1
    repr_defined $I5004, fb_tmp_193
    unless $I5004 goto if936_else2338 
    set $P5015, fb_tmp_193["octints"]
    set $P5017, $P5015
    goto if936_end2339
  if936_else2338:
    null $P5016
    set $P5017, $P5016
  if936_end2339:
    unless_null $P5017, vivi_9372341
    nqp_get_sc_object $P5018, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5017, $P5018
  vivi_9372341:
    set fb_tmp_192, $P5017
    repr_defined $I5003, fb_tmp_192
    unless $I5003 goto if935_else2336 
    set $P5019, fb_tmp_192["octint"]
    set $P5021, $P5019
    goto if935_end2337
  if935_else2336:
    null $P5020
    set $P5021, $P5020
  if935_end2337:
    unless_null $P5021, vivi_9382342
    nqp_get_sc_object $P5022, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5021, $P5022
  vivi_9382342:
    set $P5023, $P5021
  unless932_end2331:
    $P5024 = $P5007."ints_to_string"($P5023)
    set $P101, $P5024
.annotate 'line', 633
    unless_null _lex_param_1, fallback2347
    nqp_get_sc_object $P5025, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5025
  fallback2347:
    set fb_tmp_194, _lex_param_1
    repr_defined $I5006, fb_tmp_194
    unless $I5006 goto if940_else2345 
    set $P5026, fb_tmp_194["sym"]
    set $P5028, $P5026
    goto if940_end2346
  if940_else2345:
    null $P5027
    set $P5028, $P5027
  if940_end2346:
    unless_null $P5028, vivi_9412348
    nqp_get_sc_object $P5029, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5028, $P5029
  vivi_9412348:
    set $S5001, $P5028
    iseq $I5005, $S5001, "O"
    unless $I5005 goto if939_else2343 
.annotate 'line', 634
    nqp_get_sc_object $P5032, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set fb_tmp_195, $P5030
    repr_defined $I5007, fb_tmp_195
    unless $I5007 goto if942_else2349 
    set $P5033, fb_tmp_195["Regex"]
    set $P5035, $P5033
    goto if942_end2350
  if942_else2349:
    null $P5034
    set $P5035, $P5034
  if942_end2350:
    unless_null $P5035, vivi_9432351
    nqp_get_sc_object $P5036, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5035, $P5036
  vivi_9432351:
    $P5037 = $P5035."new"($P101, "enumcharlist" :named("rxtype"), 1 :named("negate"), _lex_param_1 :named("node"))
    set $P5046, $P5037
    goto if939_end2344
  if939_else2343:
.annotate 'line', 636
    nqp_get_sc_object $P5040, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set fb_tmp_196, $P5038
    repr_defined $I5008, fb_tmp_196
    unless $I5008 goto if944_else2352 
    set $P5041, fb_tmp_196["Regex"]
    set $P5043, $P5041
    goto if944_end2353
  if944_else2352:
    null $P5042
    set $P5043, $P5042
  if944_end2353:
    unless_null $P5043, vivi_9452354
    nqp_get_sc_object $P5044, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5043, $P5044
  vivi_9452354:
    $P5045 = $P5043."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P5046, $P5045
  if939_end2344:
    $P5047 = _lex_param_1."!make"($P5046)
    .return ($P5047) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<x>" :subid("cuid_155_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 639
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$hexlit", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_197 
    .local pmc fb_tmp_198 
    .local pmc fb_tmp_199 
    .local pmc fb_tmp_200 
    .local pmc fb_tmp_201 
    .local pmc fb_tmp_202 
    .local pmc fb_tmp_203 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 641
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5003, $P5004, "HLL"
    get_who $P5002, $P5003
    set fb_tmp_197, $P5002
    repr_defined $I5001, fb_tmp_197
    unless $I5001 goto if946_else2355 
    set $P5005, fb_tmp_197["Actions"]
    set $P5007, $P5005
    goto if946_end2356
  if946_else2355:
    null $P5006
    set $P5007, $P5006
  if946_end2356:
    unless_null $P5007, vivi_9472357
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5007, $P5008
  vivi_9472357:
    unless_null _lex_param_1, fallback2362
    nqp_get_sc_object $P5009, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5009
  fallback2362:
    set fb_tmp_198, _lex_param_1
    repr_defined $I5002, fb_tmp_198
    unless $I5002 goto if949_else2360 
    set $P5010, fb_tmp_198["hexint"]
    set $P5012, $P5010
    goto if949_end2361
  if949_else2360:
    null $P5011
    set $P5012, $P5011
  if949_end2361:
    unless_null $P5012, vivi_9502363
    nqp_get_sc_object $P5013, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5012, $P5013
  vivi_9502363:
    set $P5023, $P5012
    if $P5012 goto unless948_end2359 
    unless_null _lex_param_1, fallback2368
    nqp_get_sc_object $P5014, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5014
  fallback2368:
    set fb_tmp_200, _lex_param_1
    repr_defined $I5004, fb_tmp_200
    unless $I5004 goto if952_else2366 
    set $P5015, fb_tmp_200["hexints"]
    set $P5017, $P5015
    goto if952_end2367
  if952_else2366:
    null $P5016
    set $P5017, $P5016
  if952_end2367:
    unless_null $P5017, vivi_9532369
    nqp_get_sc_object $P5018, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5017, $P5018
  vivi_9532369:
    set fb_tmp_199, $P5017
    repr_defined $I5003, fb_tmp_199
    unless $I5003 goto if951_else2364 
    set $P5019, fb_tmp_199["hexint"]
    set $P5021, $P5019
    goto if951_end2365
  if951_else2364:
    null $P5020
    set $P5021, $P5020
  if951_end2365:
    unless_null $P5021, vivi_9542370
    nqp_get_sc_object $P5022, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5021, $P5022
  vivi_9542370:
    set $P5023, $P5021
  unless948_end2359:
    $P5024 = $P5007."ints_to_string"($P5023)
    set $P101, $P5024
.annotate 'line', 642
    unless_null _lex_param_1, fallback2375
    nqp_get_sc_object $P5025, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5025
  fallback2375:
    set fb_tmp_201, _lex_param_1
    repr_defined $I5006, fb_tmp_201
    unless $I5006 goto if956_else2373 
    set $P5026, fb_tmp_201["sym"]
    set $P5028, $P5026
    goto if956_end2374
  if956_else2373:
    null $P5027
    set $P5028, $P5027
  if956_end2374:
    unless_null $P5028, vivi_9572376
    nqp_get_sc_object $P5029, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5028, $P5029
  vivi_9572376:
    set $S5001, $P5028
    iseq $I5005, $S5001, "X"
    unless $I5005 goto if955_else2371 
.annotate 'line', 643
    nqp_get_sc_object $P5032, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set fb_tmp_202, $P5030
    repr_defined $I5007, fb_tmp_202
    unless $I5007 goto if958_else2377 
    set $P5033, fb_tmp_202["Regex"]
    set $P5035, $P5033
    goto if958_end2378
  if958_else2377:
    null $P5034
    set $P5035, $P5034
  if958_end2378:
    unless_null $P5035, vivi_9592379
    nqp_get_sc_object $P5036, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5035, $P5036
  vivi_9592379:
    $P5037 = $P5035."new"($P101, "enumcharlist" :named("rxtype"), 1 :named("negate"), _lex_param_1 :named("node"))
    set $P5046, $P5037
    goto if955_end2372
  if955_else2371:
.annotate 'line', 645
    nqp_get_sc_object $P5040, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set fb_tmp_203, $P5038
    repr_defined $I5008, fb_tmp_203
    unless $I5008 goto if960_else2380 
    set $P5041, fb_tmp_203["Regex"]
    set $P5043, $P5041
    goto if960_end2381
  if960_else2380:
    null $P5042
    set $P5043, $P5042
  if960_end2381:
    unless_null $P5043, vivi_9612382
    nqp_get_sc_object $P5044, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5043, $P5044
  vivi_9612382:
    $P5045 = $P5043."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P5046, $P5045
  if955_end2372:
    $P5047 = _lex_param_1."!make"($P5046)
    .return ($P5047) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<c>" :subid("cuid_156_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 648
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_204 
    .local pmc fb_tmp_205 
.annotate 'line', 649
    nqp_get_sc_object $P5003, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5002, $P5003, "QAST"
    get_who $P5001, $P5002
    set fb_tmp_204, $P5001
    repr_defined $I5001, fb_tmp_204
    unless $I5001 goto if962_else2383 
    set $P5004, fb_tmp_204["Regex"]
    set $P5006, $P5004
    goto if962_end2384
  if962_else2383:
    null $P5005
    set $P5006, $P5005
  if962_end2384:
    unless_null $P5006, vivi_9632385
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_9632385:
    unless_null _lex_param_1, fallback2388
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5008
  fallback2388:
    set fb_tmp_205, _lex_param_1
    repr_defined $I5002, fb_tmp_205
    unless $I5002 goto if964_else2386 
    set $P5009, fb_tmp_205["charspec"]
    set $P5011, $P5009
    goto if964_end2387
  if964_else2386:
    null $P5010
    set $P5011, $P5010
  if964_end2387:
    unless_null $P5011, vivi_9652389
    nqp_get_sc_object $P5012, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5011, $P5012
  vivi_9652389:
    $P5013 = $P5011."ast"()
    $P5014 = $P5006."new"($P5013, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    $P5015 = _lex_param_1."!make"($P5014)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<misc>" :subid("cuid_157_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 652
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_206 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 653
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set fb_tmp_206, $P5002
    repr_defined $I5001, fb_tmp_206
    unless $I5001 goto if966_else2390 
    set $P5005, fb_tmp_206["Regex"]
    set $P5007, $P5005
    goto if966_end2391
  if966_else2390:
    null $P5006
    set $P5007, $P5006
  if966_end2391:
    unless_null $P5007, vivi_9672392
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5007, $P5008
  vivi_9672392:
    set $S5001, _lex_param_1
    $P5009 = $P5007."new"($S5001, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5009
.annotate 'line', 654
    $P5010 = _lex_param_1."!make"($P101)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_158_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 657
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_207 
    .local pmc fb_tmp_208 
    .local pmc fb_tmp_209 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
    unless_null _lex_param_1, fallback2397
    nqp_get_sc_object $P5002, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5002
  fallback2397:
    set fb_tmp_207, _lex_param_1
    repr_defined $I5001, fb_tmp_207
    unless $I5001 goto if969_else2395 
    set $P5003, fb_tmp_207["assertion"]
    set $P5005, $P5003
    goto if969_end2396
  if969_else2395:
    null $P5004
    set $P5005, $P5004
  if969_end2396:
    unless_null $P5005, vivi_9702398
    nqp_get_sc_object $P5006, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5005, $P5006
  vivi_9702398:
    unless $P5005 goto if968_else2393 
.annotate 'line', 659
.annotate 'line', 660
    unless_null _lex_param_1, fallback2401
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5007
  fallback2401:
    set fb_tmp_208, _lex_param_1
    repr_defined $I5002, fb_tmp_208
    unless $I5002 goto if971_else2399 
    set $P5008, fb_tmp_208["assertion"]
    set $P5010, $P5008
    goto if971_end2400
  if971_else2399:
    null $P5009
    set $P5010, $P5009
  if971_end2400:
    unless_null $P5010, vivi_9722402
    nqp_get_sc_object $P5011, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5010, $P5011
  vivi_9722402:
    $P5012 = $P5010."ast"()
    set $P101, $P5012
.annotate 'line', 661
    $P5013 = $P101."subtype"("zerowidth")
    goto if968_end2394
  if968_else2393:
.annotate 'line', 663
.annotate 'line', 664
    nqp_get_sc_object $P5016, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set fb_tmp_209, $P5014
    repr_defined $I5003, fb_tmp_209
    unless $I5003 goto if973_else2403 
    set $P5017, fb_tmp_209["Regex"]
    set $P5019, $P5017
    goto if973_end2404
  if973_else2403:
    null $P5018
    set $P5019, $P5018
  if973_end2404:
    unless_null $P5019, vivi_9742405
    nqp_get_sc_object $P5020, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5019, $P5020
  vivi_9742405:
    $P5021 = $P5019."new"("anchor" :named("rxtype"), "pass" :named("subtype"), _lex_param_1 :named("node"))
    set $P101, $P5021
  if968_end2394:
.annotate 'line', 666
    $P5022 = _lex_param_1."!make"($P101)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_159_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 669
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_210 
    .local pmc fb_tmp_211 
    .local pmc fb_tmp_212 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
    unless_null _lex_param_1, fallback2410
    nqp_get_sc_object $P5002, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5002
  fallback2410:
    set fb_tmp_210, _lex_param_1
    repr_defined $I5001, fb_tmp_210
    unless $I5001 goto if976_else2408 
    set $P5003, fb_tmp_210["assertion"]
    set $P5005, $P5003
    goto if976_end2409
  if976_else2408:
    null $P5004
    set $P5005, $P5004
  if976_end2409:
    unless_null $P5005, vivi_9772411
    nqp_get_sc_object $P5006, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5005, $P5006
  vivi_9772411:
    unless $P5005 goto if975_else2406 
.annotate 'line', 671
.annotate 'line', 672
    unless_null _lex_param_1, fallback2414
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5007
  fallback2414:
    set fb_tmp_211, _lex_param_1
    repr_defined $I5002, fb_tmp_211
    unless $I5002 goto if978_else2412 
    set $P5008, fb_tmp_211["assertion"]
    set $P5010, $P5008
    goto if978_end2413
  if978_else2412:
    null $P5009
    set $P5010, $P5009
  if978_end2413:
    unless_null $P5010, vivi_9792415
    nqp_get_sc_object $P5011, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5010, $P5011
  vivi_9792415:
    $P5012 = $P5010."ast"()
    set $P101, $P5012
.annotate 'line', 673
    $P5013 = $P101."negate"()
    isfalse $I5003, $P5013
    $P101."negate"($I5003)
.annotate 'line', 674
    $P5014 = $P101."subtype"("zerowidth")
    goto if975_end2407
  if975_else2406:
.annotate 'line', 676
.annotate 'line', 677
    nqp_get_sc_object $P5017, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set fb_tmp_212, $P5015
    repr_defined $I5004, fb_tmp_212
    unless $I5004 goto if980_else2416 
    set $P5018, fb_tmp_212["Regex"]
    set $P5020, $P5018
    goto if980_end2417
  if980_else2416:
    null $P5019
    set $P5020, $P5019
  if980_end2417:
    unless_null $P5020, vivi_9812418
    nqp_get_sc_object $P5021, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5020, $P5021
  vivi_9812418:
    $P5022 = $P5020."new"("anchor" :named("rxtype"), "fail" :named("subtype"), _lex_param_1 :named("node"))
    set $P101, $P5022
  if975_end2407:
.annotate 'line', 679
    $P5023 = _lex_param_1."!make"($P101)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<|>" :subid("cuid_160_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 682
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "$name", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_213 
    .local pmc fb_tmp_214 
    .local pmc fb_tmp_215 
    .local pmc fb_tmp_216 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback2421
    nqp_get_sc_object $P5003, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5003
  fallback2421:
    set fb_tmp_213, _lex_param_1
    repr_defined $I5001, fb_tmp_213
    unless $I5001 goto if982_else2419 
    set $P5004, fb_tmp_213["identifier"]
    set $P5006, $P5004
    goto if982_end2420
  if982_else2419:
    null $P5005
    set $P5006, $P5005
  if982_end2420:
    unless_null $P5006, vivi_9832422
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_9832422:
    set $S5001, $P5006
    box $P5008, $S5001
    set $P102, $P5008
    set $S5002, $P102
    iseq $I5002, $S5002, "c"
    unless $I5002 goto if984_else2423 
.annotate 'line', 685
    box $P5009, 0
    set $P101, $P5009
    goto if984_end2424
  if984_else2423:
    set $S5003, $P102
    iseq $I5003, $S5003, "w"
    box $P5035, $I5003
    set $P5034, $P5035
    unless $I5003 goto if985_end2426 
.annotate 'line', 690
.annotate 'line', 691
    nqp_get_sc_object $P5012, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set fb_tmp_214, $P5010
    repr_defined $I5004, fb_tmp_214
    unless $I5004 goto if986_else2427 
    set $P5013, fb_tmp_214["Regex"]
    set $P5015, $P5013
    goto if986_end2428
  if986_else2427:
    null $P5014
    set $P5015, $P5014
  if986_end2428:
    unless_null $P5015, vivi_9872429
    nqp_get_sc_object $P5016, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5015, $P5016
  vivi_9872429:
.annotate 'line', 693
    nqp_get_sc_object $P5019, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set fb_tmp_215, $P5017
    repr_defined $I5005, fb_tmp_215
    unless $I5005 goto if988_else2430 
    set $P5020, fb_tmp_215["Node"]
    set $P5022, $P5020
    goto if988_end2431
  if988_else2430:
    null $P5021
    set $P5022, $P5021
  if988_end2431:
    unless_null $P5022, vivi_9892432
    nqp_get_sc_object $P5023, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5022, $P5023
  vivi_9892432:
    nqp_get_sc_object $P5026, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set fb_tmp_216, $P5024
    repr_defined $I5006, fb_tmp_216
    unless $I5006 goto if990_else2433 
    set $P5027, fb_tmp_216["SVal"]
    set $P5029, $P5027
    goto if990_end2434
  if990_else2433:
    null $P5028
    set $P5029, $P5028
  if990_end2434:
    unless_null $P5029, vivi_9912435
    nqp_get_sc_object $P5030, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5029, $P5030
  vivi_9912435:
    $P5031 = $P5029."new"("wb" :named("value"))
    $P5032 = $P5022."new"($P5031)
    $P5033 = $P5015."new"($P5032, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"), "" :named("name"))
    set $P101, $P5033
    set $P5034, $P101
  if985_end2426:
  if984_end2424:
.annotate 'line', 695
    $P5036 = _lex_param_1."!make"($P101)
    .return ($P5036) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<method>" :subid("cuid_161_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 698
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_217 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 699
    unless_null _lex_param_1, fallback2438
    nqp_get_sc_object $P5002, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5002
  fallback2438:
    set fb_tmp_217, _lex_param_1
    repr_defined $I5001, fb_tmp_217
    unless $I5001 goto if992_else2436 
    set $P5003, fb_tmp_217["assertion"]
    set $P5005, $P5003
    goto if992_end2437
  if992_else2436:
    null $P5004
    set $P5005, $P5004
  if992_end2437:
    unless_null $P5005, vivi_9932439
    nqp_get_sc_object $P5006, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5005, $P5006
  vivi_9932439:
    $P5007 = $P5005."ast"()
    set $P101, $P5007
.annotate 'line', 700
    $P101."subtype"("method")
.annotate 'line', 701
    $P101."name"("")
.annotate 'line', 702
    $P5008 = _lex_param_1."!make"($P101)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_162_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 705
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5119 = 'cuid_212_1360623852.546' 
    capture_lex $P5119 
    .const 'Sub' $P5119 = 'cuid_213_1360623852.546' 
    capture_lex $P5119 
    .lex "$name", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_218 
    .local pmc fb_tmp_219 
    .local pmc fb_tmp_220 
    .local pmc fb_tmp_221 
    .local pmc fb_tmp_230 
    .local pmc fb_tmp_231 
    .local pmc fb_tmp_232 
    .local pmc fb_tmp_233 
    .local pmc fb_tmp_234 
    .local pmc fb_tmp_235 
    .local pmc fb_tmp_237 
    .local pmc fb_tmp_238 
    .local pmc fb_tmp_239 
    .local pmc fb_tmp_240 
    .local pmc fb_tmp_241 
    .local pmc fb_tmp_242 
    .local pmc fb_tmp_243 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback2442
    nqp_get_sc_object $P5003, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5003
  fallback2442:
    set fb_tmp_218, _lex_param_1
    repr_defined $I5001, fb_tmp_218
    unless $I5001 goto if994_else2440 
    set $P5004, fb_tmp_218["longname"]
    set $P5006, $P5004
    goto if994_end2441
  if994_else2440:
    null $P5005
    set $P5006, $P5005
  if994_end2441:
    unless_null $P5006, vivi_9952443
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_9952443:
    set $S5001, $P5006
    box $P5008, $S5001
    set $P101, $P5008
    unless_null _lex_param_1, fallback2448
    nqp_get_sc_object $P5009, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5009
  fallback2448:
    set fb_tmp_219, _lex_param_1
    repr_defined $I5002, fb_tmp_219
    unless $I5002 goto if997_else2446 
    set $P5010, fb_tmp_219["assertion"]
    set $P5012, $P5010
    goto if997_end2447
  if997_else2446:
    null $P5011
    set $P5012, $P5011
  if997_end2447:
    unless_null $P5012, vivi_9982449
    nqp_get_sc_object $P5013, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5012, $P5013
  vivi_9982449:
    unless $P5012 goto if996_else2444 
.annotate 'line', 708
.annotate 'line', 709
    unless_null _lex_param_1, fallback2454
    nqp_get_sc_object $P5014, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5014
  fallback2454:
    set fb_tmp_221, _lex_param_1
    repr_defined $I5004, fb_tmp_221
    unless $I5004 goto if1000_else2452 
    set $P5015, fb_tmp_221["assertion"]
    set $P5017, $P5015
    goto if1000_end2453
  if1000_else2452:
    null $P5016
    set $P5017, $P5016
  if1000_end2453:
    unless_null $P5017, vivi_10012455
    nqp_get_sc_object $P5018, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5017, $P5018
  vivi_10012455:
    set fb_tmp_220, $P5017
    repr_defined $I5003, fb_tmp_220
    unless $I5003 goto if999_else2450 
    set $P5019, fb_tmp_220[0]
    set $P5021, $P5019
    goto if999_end2451
  if999_else2450:
    null $P5020
    set $P5021, $P5020
  if999_end2451:
    unless_null $P5021, vivi_10022456
    nqp_get_sc_object $P5022, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5021, $P5022
  vivi_10022456:
    $P5023 = $P5021."ast"()
    set $P102, $P5023
.annotate 'line', 710
    nqp_decontainerize $P5024, _lex_param_0
    $P5025 = $P5024."subrule_alias"($P102, $P101)
    goto if996_end2445
  if996_else2444:
    set $S5002, $P101
    iseq $I5005, $S5002, "sym"
    unless $I5005 goto if1003_else2457 
    .const 'Sub' $P5026 = 'cuid_212_1360623852.546' 
    capture_lex $P5026
    $P5027 = $P5026()
    set $P5117, $P5027
    goto if1003_end2458
  if1003_else2457:
.annotate 'line', 721
.annotate 'line', 722
    nqp_get_sc_object $P5030, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set fb_tmp_230, $P5028
    repr_defined $I5006, fb_tmp_230
    unless $I5006 goto if1024_else2491 
    set $P5031, fb_tmp_230["Regex"]
    set $P5033, $P5031
    goto if1024_end2492
  if1024_else2491:
    null $P5032
    set $P5033, $P5032
  if1024_end2492:
    unless_null $P5033, vivi_10252493
    nqp_get_sc_object $P5034, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5033, $P5034
  vivi_10252493:
.annotate 'line', 724
    nqp_get_sc_object $P5037, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set fb_tmp_231, $P5035
    repr_defined $I5007, fb_tmp_231
    unless $I5007 goto if1026_else2494 
    set $P5038, fb_tmp_231["Node"]
    set $P5040, $P5038
    goto if1026_end2495
  if1026_else2494:
    null $P5039
    set $P5040, $P5039
  if1026_end2495:
    unless_null $P5040, vivi_10272496
    nqp_get_sc_object $P5041, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5040, $P5041
  vivi_10272496:
    nqp_get_sc_object $P5044, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set fb_tmp_232, $P5042
    repr_defined $I5008, fb_tmp_232
    unless $I5008 goto if1028_else2497 
    set $P5045, fb_tmp_232["SVal"]
    set $P5047, $P5045
    goto if1028_end2498
  if1028_else2497:
    null $P5046
    set $P5047, $P5046
  if1028_end2498:
    unless_null $P5047, vivi_10292499
    nqp_get_sc_object $P5048, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5047, $P5048
  vivi_10292499:
    $P5049 = $P5047."new"($P101 :named("value"))
    $P5050 = $P5040."new"($P5049)
    $P5051 = $P5033."new"($P5050, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"), $P101 :named("name"))
    set $P102, $P5051
    unless_null _lex_param_1, fallback2504
    nqp_get_sc_object $P5052, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5052
  fallback2504:
    set fb_tmp_233, _lex_param_1
    repr_defined $I5009, fb_tmp_233
    unless $I5009 goto if1031_else2502 
    set $P5053, fb_tmp_233["arglist"]
    set $P5055, $P5053
    goto if1031_end2503
  if1031_else2502:
    null $P5054
    set $P5055, $P5054
  if1031_end2503:
    unless_null $P5055, vivi_10322505
    nqp_get_sc_object $P5056, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5055, $P5056
  vivi_10322505:
    unless $P5055 goto if1030_else2500 
.annotate 'line', 725
.annotate 'line', 726
    unless_null _lex_param_1, fallback2510
    nqp_get_sc_object $P5060, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5060
  fallback2510:
    set fb_tmp_235, _lex_param_1
    repr_defined $I5011, fb_tmp_235
    unless $I5011 goto if1034_else2508 
    set $P5061, fb_tmp_235["arglist"]
    set $P5063, $P5061
    goto if1034_end2509
  if1034_else2508:
    null $P5062
    set $P5063, $P5062
  if1034_end2509:
    unless_null $P5063, vivi_10352511
    nqp_get_sc_object $P5064, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5063, $P5064
  vivi_10352511:
    set fb_tmp_234, $P5063
    repr_defined $I5010, fb_tmp_234
    unless $I5010 goto if1033_else2506 
    set $P5065, fb_tmp_234[0]
    set $P5067, $P5065
    goto if1033_end2507
  if1033_else2506:
    null $P5066
    set $P5067, $P5066
  if1033_end2507:
    unless_null $P5067, vivi_10362512
    nqp_get_sc_object $P5068, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5067, $P5068
  vivi_10362512:
    $P5069 = $P5067."ast"()
    $P5070 = $P5069."list"()
    set $P5057, $P5070
    iter $P5059, $P5070
  for_next2516:
    unless $P5059, for_done2518
    shift $P5072, $P5059
  for_redo2517:
    .const 'Sub' $P5071 = 'cuid_213_1360623852.546' 
    capture_lex $P5071
    $P5057 = $P5071($P5072)
    goto for_next2516
  for_done2518:
    set $P5116, $P5057
    goto if1030_end2501
  if1030_else2500:
    unless_null _lex_param_1, fallback2523
    nqp_get_sc_object $P5073, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5073
  fallback2523:
    set fb_tmp_237, _lex_param_1
    repr_defined $I5012, fb_tmp_237
    unless $I5012 goto if1040_else2521 
    set $P5074, fb_tmp_237["nibbler"]
    set $P5076, $P5074
    goto if1040_end2522
  if1040_else2521:
    null $P5075
    set $P5076, $P5075
  if1040_end2522:
    unless_null $P5076, vivi_10412524
    nqp_get_sc_object $P5077, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5076, $P5077
  vivi_10412524:
    set $P5115, $P5076
    unless $P5076 goto if1039_end2520 
.annotate 'line', 728
    set $S5003, $P101
    iseq $I5013, $S5003, "after"
    unless $I5013 goto if1042_else2525 
.annotate 'line', 730
    set fb_tmp_238, $P102
    repr_defined $I5014, fb_tmp_238
    unless $I5014 goto if1043_else2527 
    set $P5078, fb_tmp_238[0]
    set $P5080, $P5078
    goto if1043_end2528
  if1043_else2527:
    null $P5079
    set $P5080, $P5079
  if1043_end2528:
    unless_null $P5080, vivi_10442529
    nqp_get_sc_object $P5081, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5080, $P5081
  vivi_10442529:
    nqp_decontainerize $P5082, _lex_param_0
    nqp_decontainerize $P5083, _lex_param_0
    unless_null _lex_param_1, fallback2534
    nqp_get_sc_object $P5084, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5084
  fallback2534:
    set fb_tmp_240, _lex_param_1
    repr_defined $I5016, fb_tmp_240
    unless $I5016 goto if1046_else2532 
    set $P5085, fb_tmp_240["nibbler"]
    set $P5087, $P5085
    goto if1046_end2533
  if1046_else2532:
    null $P5086
    set $P5087, $P5086
  if1046_end2533:
    unless_null $P5087, vivi_10472535
    nqp_get_sc_object $P5088, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5087, $P5088
  vivi_10472535:
    set fb_tmp_239, $P5087
    repr_defined $I5015, fb_tmp_239
    unless $I5015 goto if1045_else2530 
    set $P5089, fb_tmp_239[0]
    set $P5091, $P5089
    goto if1045_end2531
  if1045_else2530:
    null $P5090
    set $P5091, $P5090
  if1045_end2531:
    unless_null $P5091, vivi_10482536
    nqp_get_sc_object $P5092, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5091, $P5092
  vivi_10482536:
    $P5093 = $P5091."ast"()
    $P5094 = $P5083."flip_ast"($P5093)
    $P5095 = $P5082."qbuildsub"($P5094, 1 :named("anon"), 1 :named("addself"))
    $P5096 = $P5080."push"($P5095)
    set $P5114, $P5096
    goto if1042_end2526
  if1042_else2525:
.annotate 'line', 731
    set fb_tmp_241, $P102
    repr_defined $I5017, fb_tmp_241
    unless $I5017 goto if1049_else2537 
    set $P5097, fb_tmp_241[0]
    set $P5099, $P5097
    goto if1049_end2538
  if1049_else2537:
    null $P5098
    set $P5099, $P5098
  if1049_end2538:
    unless_null $P5099, vivi_10502539
    nqp_get_sc_object $P5100, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5099, $P5100
  vivi_10502539:
    nqp_decontainerize $P5101, _lex_param_0
    unless_null _lex_param_1, fallback2544
    nqp_get_sc_object $P5102, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5102
  fallback2544:
    set fb_tmp_243, _lex_param_1
    repr_defined $I5019, fb_tmp_243
    unless $I5019 goto if1052_else2542 
    set $P5103, fb_tmp_243["nibbler"]
    set $P5105, $P5103
    goto if1052_end2543
  if1052_else2542:
    null $P5104
    set $P5105, $P5104
  if1052_end2543:
    unless_null $P5105, vivi_10532545
    nqp_get_sc_object $P5106, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5105, $P5106
  vivi_10532545:
    set fb_tmp_242, $P5105
    repr_defined $I5018, fb_tmp_242
    unless $I5018 goto if1051_else2540 
    set $P5107, fb_tmp_242[0]
    set $P5109, $P5107
    goto if1051_end2541
  if1051_else2540:
    null $P5108
    set $P5109, $P5108
  if1051_end2541:
    unless_null $P5109, vivi_10542546
    nqp_get_sc_object $P5110, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5109, $P5110
  vivi_10542546:
    $P5111 = $P5109."ast"()
    $P5112 = $P5101."qbuildsub"($P5111, 1 :named("anon"), 1 :named("addself"))
    $P5113 = $P5099."push"($P5112)
    set $P5114, $P5113
  if1042_end2526:
    set $P5115, $P5114
  if1039_end2520:
    set $P5116, $P5115
  if1030_end2501:
    set $P5117, $P5116
  if1003_end2458:
  if996_end2445:
.annotate 'line', 734
    $P5118 = _lex_param_1."!make"($P102)
    .return ($P5118) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_212_1360623852.546") :anon :lex :outer("cuid_162_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 712
    .lex "$loc", $P101 
    .lex "$rxname", $P102 
    .local pmc fb_tmp_222 
    .local pmc fb_tmp_223 
    .local pmc fb_tmp_224 
    .local pmc fb_tmp_225 
    .local pmc fb_tmp_226 
    .local pmc fb_tmp_227 
    .local pmc fb_tmp_228 
    .local pmc fb_tmp_229 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P102, $P5002
    find_dynamic_lex $P5003, "%*RX"
    unless_null $P5003, fallback2461
    nqp_get_sc_object $P5005, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5004, $P5005
    set fb_tmp_223, $P5004
    repr_defined $I5003, fb_tmp_223
    unless $I5003 goto if1005_else2462 
    set $P5006, fb_tmp_223["%RX"]
    set $P5008, $P5006
    goto if1005_end2463
  if1005_else2462:
    null $P5007
    set $P5008, $P5007
  if1005_end2463:
    unless_null $P5008, vivi_10062464
    nqp_get_sc_object $P5010, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5009, $P5010
    new $P5011, 'Hash'
    set $P5009["%RX"], $P5011
    set $P5008, $P5011
  vivi_10062464:
    unless_null $P5008, vivi_10072465
    die "Contextual %*RX not found"
    box $P5012, "Contextual %*RX not found"
    set $P5008, $P5012
  vivi_10072465:
    set $P5003, $P5008
  fallback2461:
    set fb_tmp_222, $P5003
    repr_defined $I5002, fb_tmp_222
    unless $I5002 goto if1004_else2459 
    set $P5013, fb_tmp_222["name"]
    set $P5015, $P5013
    goto if1004_end2460
  if1004_else2459:
    null $P5014
    set $P5015, $P5014
  if1004_end2460:
    unless_null $P5015, vivi_10082466
    nqp_get_sc_object $P5016, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5015, $P5016
  vivi_10082466:
    set $S5001, $P5015
    index $I5001, $S5001, ":sym<", 0
    box $P5017, $I5001
    set $P101, $P5017
    set $N5001, $P101
    set $N5002, 0
    islt $I5004, $N5001, $N5002
    unless $I5004 goto if1009_end2468 
    find_dynamic_lex $P5018, "%*RX"
    unless_null $P5018, fallback2471
    nqp_get_sc_object $P5020, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5019, $P5020
    set fb_tmp_225, $P5019
    repr_defined $I5007, fb_tmp_225
    unless $I5007 goto if1011_else2472 
    set $P5021, fb_tmp_225["%RX"]
    set $P5023, $P5021
    goto if1011_end2473
  if1011_else2472:
    null $P5022
    set $P5023, $P5022
  if1011_end2473:
    unless_null $P5023, vivi_10122474
    nqp_get_sc_object $P5025, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5024, $P5025
    new $P5026, 'Hash'
    set $P5024["%RX"], $P5026
    set $P5023, $P5026
  vivi_10122474:
    unless_null $P5023, vivi_10132475
    die "Contextual %*RX not found"
    box $P5027, "Contextual %*RX not found"
    set $P5023, $P5027
  vivi_10132475:
    set $P5018, $P5023
  fallback2471:
    set fb_tmp_224, $P5018
    repr_defined $I5006, fb_tmp_224
    unless $I5006 goto if1010_else2469 
    set $P5028, fb_tmp_224["name"]
    set $P5030, $P5028
    goto if1010_end2470
  if1010_else2469:
    null $P5029
    set $P5030, $P5029
  if1010_end2470:
    unless_null $P5030, vivi_10142476
    nqp_get_sc_object $P5031, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5030, $P5031
  vivi_10142476:
    set $S5002, $P5030
    index $I5005, $S5002, utf8:":sym\x{ab}", 0
    box $P5032, $I5005
    set $P101, $P5032
  if1009_end2468:
    find_dynamic_lex $P5033, "%*RX"
    unless_null $P5033, fallback2479
    nqp_get_sc_object $P5035, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5034, $P5035
    set fb_tmp_227, $P5034
    repr_defined $I5009, fb_tmp_227
    unless $I5009 goto if1016_else2480 
    set $P5036, fb_tmp_227["%RX"]
    set $P5038, $P5036
    goto if1016_end2481
  if1016_else2480:
    null $P5037
    set $P5038, $P5037
  if1016_end2481:
    unless_null $P5038, vivi_10172482
    nqp_get_sc_object $P5040, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5039, $P5040
    new $P5041, 'Hash'
    set $P5039["%RX"], $P5041
    set $P5038, $P5041
  vivi_10172482:
    unless_null $P5038, vivi_10182483
    die "Contextual %*RX not found"
    box $P5042, "Contextual %*RX not found"
    set $P5038, $P5042
  vivi_10182483:
    set $P5033, $P5038
  fallback2479:
    set fb_tmp_226, $P5033
    repr_defined $I5008, fb_tmp_226
    unless $I5008 goto if1015_else2477 
    set $P5043, fb_tmp_226["name"]
    set $P5045, $P5043
    goto if1015_end2478
  if1015_else2477:
    null $P5044
    set $P5045, $P5044
  if1015_end2478:
    unless_null $P5045, vivi_10192484
    nqp_get_sc_object $P5046, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5045, $P5046
  vivi_10192484:
    set $S5004, $P5045
    set $N5004, $P101
    set $N5005, 5
    add $N5003, $N5004, $N5005
    set $I5010, $N5003
    substr $S5003, $S5004, $I5010
    box $P5047, $S5003
    set $P102, $P5047
    set $S5006, $P102
    set $S5007, $P102
    length $I5011, $S5007
    set $N5007, $I5011
    set $N5008, 1
    sub $N5006, $N5007, $N5008
    set $I5012, $N5006
    substr $S5005, $S5006, 0, $I5012
    box $P5048, $S5005
    set $P102, $P5048
.annotate 'line', 718
    nqp_get_sc_object $P5051, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set fb_tmp_228, $P5049
    repr_defined $I5013, fb_tmp_228
    unless $I5013 goto if1020_else2485 
    set $P5052, fb_tmp_228["Regex"]
    set $P5054, $P5052
    goto if1020_end2486
  if1020_else2485:
    null $P5053
    set $P5054, $P5053
  if1020_end2486:
    unless_null $P5054, vivi_10212487
    nqp_get_sc_object $P5055, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5054, $P5055
  vivi_10212487:
    find_lex $P5056, "$/"
.annotate 'line', 719
    nqp_get_sc_object $P5059, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5058, $P5059, "QAST"
    get_who $P5057, $P5058
    set fb_tmp_229, $P5057
    repr_defined $I5014, fb_tmp_229
    unless $I5014 goto if1022_else2488 
    set $P5060, fb_tmp_229["Regex"]
    set $P5062, $P5060
    goto if1022_end2489
  if1022_else2488:
    null $P5061
    set $P5062, $P5061
  if1022_end2489:
    unless_null $P5062, vivi_10232490
    nqp_get_sc_object $P5063, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5062, $P5063
  vivi_10232490:
    find_lex $P5064, "$/"
    $P5065 = $P5062."new"($P102, "literal" :named("rxtype"), $P5064 :named("node"))
    $P5066 = $P5054."new"($P5065, "sym" :named("name"), "subcapture" :named("rxtype"), $P5056 :named("node"))
    store_lex "$qast", $P5066
    .return ($P5066) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_213_1360623852.546") :anon :lex :outer("cuid_162_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 726
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_236 
    find_lex $P5001, "$qast"
    set fb_tmp_236, $P5001
    repr_defined $I5001, fb_tmp_236
    unless $I5001 goto if1037_else2513 
    set $P5002, fb_tmp_236[0]
    set $P5004, $P5002
    goto if1037_end2514
  if1037_else2513:
    null $P5003
    set $P5004, $P5003
  if1037_end2514:
    unless_null $P5004, vivi_10382515
    nqp_get_sc_object $P5005, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5004, $P5005
  vivi_10382515:
    $P5006 = $P5004."push"(_lex_param_0)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<[>" :subid("cuid_163_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 737
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5042 = 'cuid_214_1360623852.546' 
    capture_lex $P5042 
    .lex "$clist", $P101 
    .lex "$qast", $P102 
    .lex "$i", $P103 
    .lex "$n", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_244 
    .local pmc fb_tmp_245 
    .local pmc fb_tmp_246 
    .local pmc fb_tmp_247 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P104, $P5004
    unless_null _lex_param_1, fallback2549
    nqp_get_sc_object $P5005, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5005
  fallback2549:
    set fb_tmp_244, _lex_param_1
    repr_defined $I5001, fb_tmp_244
    unless $I5001 goto if1055_else2547 
    set $P5006, fb_tmp_244["cclass_elem"]
    set $P5008, $P5006
    goto if1055_end2548
  if1055_else2547:
    null $P5007
    set $P5008, $P5007
  if1055_end2548:
    unless_null $P5008, vivi_10562550
    nqp_get_sc_object $P5009, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5008, $P5009
  vivi_10562550:
    set $P101, $P5008
.annotate 'line', 739
    set fb_tmp_245, $P101
    repr_defined $I5002, fb_tmp_245
    unless $I5002 goto if1057_else2551 
    set $P5010, fb_tmp_245[0]
    set $P5012, $P5010
    goto if1057_end2552
  if1057_else2551:
    null $P5011
    set $P5012, $P5011
  if1057_end2552:
    unless_null $P5012, vivi_10582553
    nqp_get_sc_object $P5013, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5012, $P5013
  vivi_10582553:
    $P5014 = $P5012."ast"()
    set $P102, $P5014
.annotate 'line', 740
    $P5015 = $P102."negate"()
    set $P5017, $P5015
    unless $P5015 goto if1060_end2557 
    $P5016 = $P102."rxtype"()
    set $S5001, $P5016
    iseq $I5003, $S5001, "subrule"
    box $P5018, $I5003
    set $P5017, $P5018
  if1060_end2557:
    unless $P5017 goto if1059_end2555 
.annotate 'line', 741
    $P102."subtype"("zerowidth")
.annotate 'line', 742
    nqp_get_sc_object $P5021, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set fb_tmp_246, $P5019
    repr_defined $I5004, fb_tmp_246
    unless $I5004 goto if1061_else2558 
    set $P5022, fb_tmp_246["Regex"]
    set $P5024, $P5022
    goto if1061_end2559
  if1061_else2558:
    null $P5023
    set $P5024, $P5023
  if1061_end2559:
    unless_null $P5024, vivi_10622560
    nqp_get_sc_object $P5025, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5024, $P5025
  vivi_10622560:
.annotate 'line', 744
    nqp_get_sc_object $P5028, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set fb_tmp_247, $P5026
    repr_defined $I5005, fb_tmp_247
    unless $I5005 goto if1063_else2561 
    set $P5029, fb_tmp_247["Regex"]
    set $P5031, $P5029
    goto if1063_end2562
  if1063_else2561:
    null $P5030
    set $P5031, $P5030
  if1063_end2562:
    unless_null $P5031, vivi_10642563
    nqp_get_sc_object $P5032, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5031, $P5032
  vivi_10642563:
    $P5033 = $P5031."new"("cclass" :named("rxtype"), "." :named("subtype"))
    $P5034 = $P5024."new"($P102, $P5033, "concat" :named("rxtype"), _lex_param_1 :named("node"))
    set $P102, $P5034
  if1059_end2555:
    box $P5035, 1
    set $P103, $P5035
    set $N5001, $P101
    box $P5036, $N5001
    set $P104, $P5036
  while1065_test2564:
    set $N5002, $P103
    set $N5003, $P104
    islt $I5006, $N5002, $N5003
    box $P5040, $I5006
    set $P5039, $P5040
    unless $I5006 goto while1065_done2568 
  while1065_redo2566:
    .const 'Sub' $P5037 = 'cuid_214_1360623852.546' 
    capture_lex $P5037
    $P5038 = $P5037()
    set $P5039, $P5038
    goto while1065_test2564 
  while1065_done2568:
.annotate 'line', 759
    $P5041 = _lex_param_1."!make"($P102)
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_214_1360623852.546") :anon :lex :outer("cuid_163_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 748
    .lex "$ast", $P101 
    .local pmc fb_tmp_248 
    .local pmc fb_tmp_249 
    .local pmc fb_tmp_250 
    .local pmc tmp_1 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 749
    find_lex $P5002, "$clist"
    set fb_tmp_248, $P5002
    repr_defined $I5001, fb_tmp_248
    unless $I5001 goto if1066_else2569 
    find_lex $P5004, "$i"
    set $I5002, $P5004
    set $P5003, fb_tmp_248[$I5002]
    set $P5006, $P5003
    goto if1066_end2570
  if1066_else2569:
    null $P5005
    set $P5006, $P5005
  if1066_end2570:
    unless_null $P5006, vivi_10672571
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_10672571:
    $P5008 = $P5006."ast"()
    set $P101, $P5008
.annotate 'line', 750
    $P5009 = $P101."negate"()
    unless $P5009 goto if1068_else2572 
.annotate 'line', 751
    $P101."subtype"("zerowidth")
.annotate 'line', 752
    nqp_get_sc_object $P5012, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set fb_tmp_249, $P5010
    repr_defined $I5003, fb_tmp_249
    unless $I5003 goto if1069_else2574 
    set $P5013, fb_tmp_249["Regex"]
    set $P5015, $P5013
    goto if1069_end2575
  if1069_else2574:
    null $P5014
    set $P5015, $P5014
  if1069_end2575:
    unless_null $P5015, vivi_10702576
    nqp_get_sc_object $P5016, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5015, $P5016
  vivi_10702576:
    find_lex $P5017, "$qast"
    find_lex $P5018, "$/"
    $P5019 = $P5015."new"($P101, $P5017, "concat" :named("rxtype"), $P5018 :named("node"))
    store_lex "$qast", $P5019
    goto if1068_end2573
  if1068_else2572:
.annotate 'line', 754
.annotate 'line', 755
    nqp_get_sc_object $P5022, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set fb_tmp_250, $P5020
    repr_defined $I5004, fb_tmp_250
    unless $I5004 goto if1071_else2577 
    set $P5023, fb_tmp_250["Regex"]
    set $P5025, $P5023
    goto if1071_end2578
  if1071_else2577:
    null $P5024
    set $P5025, $P5024
  if1071_end2578:
    unless_null $P5025, vivi_10722579
    nqp_get_sc_object $P5026, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5025, $P5026
  vivi_10722579:
    find_lex $P5027, "$qast"
    find_lex $P5028, "$/"
    $P5029 = $P5025."new"($P5027, $P101, "altseq" :named("rxtype"), $P5028 :named("node"))
    store_lex "$qast", $P5029
  if1068_end2573:
    find_lex $P5030, "$i"
    set tmp_1, $P5030
    set $N5002, tmp_1
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5031, $N5001
    store_lex "$i", $P5031
    .return (tmp_1) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_164_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 762
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_251 
    .local pmc fb_tmp_252 
    .local pmc fb_tmp_253 
    .local pmc fb_tmp_254 
.annotate 'line', 763
    unless_null _lex_param_1, fallback2584
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5001
  fallback2584:
    set fb_tmp_251, _lex_param_1
    repr_defined $I5001, fb_tmp_251
    unless $I5001 goto if1074_else2582 
    set $P5002, fb_tmp_251["quote_EXPR"]
    set $P5004, $P5002
    goto if1074_end2583
  if1074_else2582:
    null $P5003
    set $P5004, $P5003
  if1074_end2583:
    unless_null $P5004, vivi_10752585
    nqp_get_sc_object $P5005, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5004, $P5005
  vivi_10752585:
    unless $P5004 goto if1073_else2580 
.annotate 'line', 764
    unless_null _lex_param_1, fallback2588
    nqp_get_sc_object $P5006, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5006
  fallback2588:
    set fb_tmp_252, _lex_param_1
    repr_defined $I5002, fb_tmp_252
    unless $I5002 goto if1076_else2586 
    set $P5007, fb_tmp_252["quote_EXPR"]
    set $P5009, $P5007
    goto if1076_end2587
  if1076_else2586:
    null $P5008
    set $P5009, $P5008
  if1076_end2587:
    unless_null $P5009, vivi_10772589
    nqp_get_sc_object $P5010, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5009, $P5010
  vivi_10772589:
    $P5011 = $P5009."ast"()
    set $P5025, $P5011
    goto if1073_end2581
  if1073_else2580:
.annotate 'line', 765
    nqp_get_sc_object $P5014, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set fb_tmp_253, $P5012
    repr_defined $I5003, fb_tmp_253
    unless $I5003 goto if1078_else2590 
    set $P5015, fb_tmp_253["NVal"]
    set $P5017, $P5015
    goto if1078_end2591
  if1078_else2590:
    null $P5016
    set $P5017, $P5016
  if1078_end2591:
    unless_null $P5017, vivi_10792592
    nqp_get_sc_object $P5018, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5017, $P5018
  vivi_10792592:
    unless_null _lex_param_1, fallback2595
    nqp_get_sc_object $P5019, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5019
  fallback2595:
    set fb_tmp_254, _lex_param_1
    repr_defined $I5004, fb_tmp_254
    unless $I5004 goto if1080_else2593 
    set $P5020, fb_tmp_254["val"]
    set $P5022, $P5020
    goto if1080_end2594
  if1080_else2593:
    null $P5021
    set $P5022, $P5021
  if1080_end2594:
    unless_null $P5022, vivi_10812596
    nqp_get_sc_object $P5023, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5022, $P5023
  vivi_10812596:
    set $N5001, $P5022
    $P5024 = $P5017."new"($N5001 :named("value"))
    set $P5025, $P5024
  if1073_end2581:
    $P5026 = _lex_param_1."!make"($P5025)
    .return ($P5026) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_165_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 768
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5021 = 'cuid_215_1360623852.546' 
    capture_lex $P5021 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_255 
    .local pmc fb_tmp_256 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 769
    nqp_get_sc_object $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set fb_tmp_255, $P5002
    repr_defined $I5001, fb_tmp_255
    unless $I5001 goto if1082_else2597 
    set $P5005, fb_tmp_255["Op"]
    set $P5007, $P5005
    goto if1082_end2598
  if1082_else2597:
    null $P5006
    set $P5007, $P5006
  if1082_end2598:
    unless_null $P5007, vivi_10832599
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5007, $P5008
  vivi_10832599:
    $P5009 = $P5007."new"("list" :named("op"))
    set $P101, $P5009
    unless_null _lex_param_1, fallback2602
    nqp_get_sc_object $P5013, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5013
  fallback2602:
    set fb_tmp_256, _lex_param_1
    repr_defined $I5002, fb_tmp_256
    unless $I5002 goto if1084_else2600 
    set $P5014, fb_tmp_256["arg"]
    set $P5016, $P5014
    goto if1084_end2601
  if1084_else2600:
    null $P5015
    set $P5016, $P5015
  if1084_end2601:
    unless_null $P5016, vivi_10852603
    nqp_get_sc_object $P5017, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5016, $P5017
  vivi_10852603:
    set $P5010, $P5016
    iter $P5012, $P5016
  for_next2604:
    unless $P5012, for_done2606
    shift $P5019, $P5012
  for_redo2605:
    .const 'Sub' $P5018 = 'cuid_215_1360623852.546' 
    capture_lex $P5018
    $P5010 = $P5018($P5019)
    goto for_next2604
  for_done2606:
.annotate 'line', 771
    $P5020 = _lex_param_1."!make"($P101)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_215_1360623852.546") :anon :lex :outer("cuid_165_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 770
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$past"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_elem" :subid("cuid_166_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 774
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_216_1360623852.546' 
    capture_lex $P5022 
    .const 'Sub' $P5022 = 'cuid_217_1360623852.546' 
    capture_lex $P5022 
    .const 'Sub' $P5022 = 'cuid_221_1360623852.546' 
    capture_lex $P5022 
    .lex "$str", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_257 
    .local pmc fb_tmp_263 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P102, $P5002
    box $P5003, ""
    set $P101, $P5003
    unless_null _lex_param_1, fallback2611
    nqp_get_sc_object $P5004, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5004
  fallback2611:
    set fb_tmp_257, _lex_param_1
    repr_defined $I5001, fb_tmp_257
    unless $I5001 goto if1087_else2609 
    set $P5005, fb_tmp_257["name"]
    set $P5007, $P5005
    goto if1087_end2610
  if1087_else2609:
    null $P5006
    set $P5007, $P5006
  if1087_end2610:
    unless_null $P5007, vivi_10882612
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5007, $P5008
  vivi_10882612:
    unless $P5007 goto if1086_else2607 
    .const 'Sub' $P5009 = 'cuid_216_1360623852.546' 
    capture_lex $P5009
    $P5010 = $P5009()
    goto if1086_end2608
  if1086_else2607:
    unless_null _lex_param_1, fallback2634
    nqp_get_sc_object $P5011, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5011
  fallback2634:
    set fb_tmp_263, _lex_param_1
    repr_defined $I5002, fb_tmp_263
    unless $I5002 goto if1100_else2632 
    set $P5012, fb_tmp_263["uniprop"]
    set $P5014, $P5012
    goto if1100_end2633
  if1100_else2632:
    null $P5013
    set $P5014, $P5013
  if1100_end2633:
    unless_null $P5014, vivi_11012635
    nqp_get_sc_object $P5015, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5014, $P5015
  vivi_11012635:
    unless $P5014 goto if1099_else2630 
    .const 'Sub' $P5016 = 'cuid_217_1360623852.546' 
    capture_lex $P5016
    $P5017 = $P5016()
    set $P5020, $P5017
    goto if1099_end2631
  if1099_else2630:
    .const 'Sub' $P5018 = 'cuid_221_1360623852.546' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5020, $P5019
  if1099_end2631:
  if1086_end2608:
.annotate 'line', 839
    $P5021 = _lex_param_1."!make"($P102)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_216_1360623852.546") :anon :lex :outer("cuid_166_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 777
    .lex "$name", $P101 
    .local pmc fb_tmp_258 
    .local pmc fb_tmp_259 
    .local pmc fb_tmp_260 
    .local pmc fb_tmp_261 
    .local pmc fb_tmp_262 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
    find_lex $P5002, "$/"
    unless_null $P5002, fallback2615
    nqp_get_sc_object $P5003, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5002, $P5003
  fallback2615:
    set fb_tmp_258, $P5002
    repr_defined $I5001, fb_tmp_258
    unless $I5001 goto if1089_else2613 
    set $P5004, fb_tmp_258["name"]
    set $P5006, $P5004
    goto if1089_end2614
  if1089_else2613:
    null $P5005
    set $P5006, $P5005
  if1089_end2614:
    unless_null $P5006, vivi_10902616
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_10902616:
    set $S5001, $P5006
    box $P5008, $S5001
    set $P101, $P5008
.annotate 'line', 779
    nqp_get_sc_object $P5011, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set fb_tmp_259, $P5009
    repr_defined $I5002, fb_tmp_259
    unless $I5002 goto if1091_else2617 
    set $P5012, fb_tmp_259["Regex"]
    set $P5014, $P5012
    goto if1091_end2618
  if1091_else2617:
    null $P5013
    set $P5014, $P5013
  if1091_end2618:
    unless_null $P5014, vivi_10922619
    nqp_get_sc_object $P5015, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5014, $P5015
  vivi_10922619:
    find_lex $P5016, "$/"
    unless_null $P5016, fallback2622
    nqp_get_sc_object $P5017, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5016, $P5017
  fallback2622:
    set fb_tmp_260, $P5016
    repr_defined $I5004, fb_tmp_260
    unless $I5004 goto if1093_else2620 
    set $P5018, fb_tmp_260["sign"]
    set $P5020, $P5018
    goto if1093_end2621
  if1093_else2620:
    null $P5019
    set $P5020, $P5019
  if1093_end2621:
    unless_null $P5020, vivi_10942623
    nqp_get_sc_object $P5021, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5020, $P5021
  vivi_10942623:
    set $S5002, $P5020
    iseq $I5003, $S5002, "-"
    find_lex $P5022, "$/"
.annotate 'line', 781
    nqp_get_sc_object $P5025, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set fb_tmp_261, $P5023
    repr_defined $I5005, fb_tmp_261
    unless $I5005 goto if1095_else2624 
    set $P5026, fb_tmp_261["Node"]
    set $P5028, $P5026
    goto if1095_end2625
  if1095_else2624:
    null $P5027
    set $P5028, $P5027
  if1095_end2625:
    unless_null $P5028, vivi_10962626
    nqp_get_sc_object $P5029, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5028, $P5029
  vivi_10962626:
    nqp_get_sc_object $P5032, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set fb_tmp_262, $P5030
    repr_defined $I5006, fb_tmp_262
    unless $I5006 goto if1097_else2627 
    set $P5033, fb_tmp_262["SVal"]
    set $P5035, $P5033
    goto if1097_end2628
  if1097_else2627:
    null $P5034
    set $P5035, $P5034
  if1097_end2628:
    unless_null $P5035, vivi_10982629
    nqp_get_sc_object $P5036, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5035, $P5036
  vivi_10982629:
    $P5037 = $P5035."new"($P101 :named("value"))
    $P5038 = $P5028."new"($P5037)
    $P5039 = $P5014."new"($P5038, "subrule" :named("rxtype"), "method" :named("subtype"), $I5003 :named("negate"), $P5022 :named("node"))
    store_lex "$qast", $P5039
    .return ($P5039) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_217_1360623852.546") :anon :lex :outer("cuid_166_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 783
    .lex "$uniprop", $P101 
    .local pmc fb_tmp_264 
    .local pmc fb_tmp_265 
    .local pmc fb_tmp_266 
    .local pmc fb_tmp_267 
    .local pmc fb_tmp_268 
    .local pmc fb_tmp_269 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
    find_lex $P5002, "$/"
    unless_null $P5002, fallback2638
    nqp_get_sc_object $P5003, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5002, $P5003
  fallback2638:
    set fb_tmp_264, $P5002
    repr_defined $I5001, fb_tmp_264
    unless $I5001 goto if1102_else2636 
    set $P5004, fb_tmp_264["uniprop"]
    set $P5006, $P5004
    goto if1102_end2637
  if1102_else2636:
    null $P5005
    set $P5006, $P5005
  if1102_end2637:
    unless_null $P5006, vivi_11032639
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_11032639:
    set $S5001, $P5006
    box $P5008, $S5001
    set $P101, $P5008
.annotate 'line', 785
    nqp_get_sc_object $P5011, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set fb_tmp_265, $P5009
    repr_defined $I5002, fb_tmp_265
    unless $I5002 goto if1104_else2640 
    set $P5012, fb_tmp_265["Regex"]
    set $P5014, $P5012
    goto if1104_end2641
  if1104_else2640:
    null $P5013
    set $P5014, $P5013
  if1104_end2641:
    unless_null $P5014, vivi_11052642
    nqp_get_sc_object $P5015, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5014, $P5015
  vivi_11052642:
    find_lex $P5016, "$/"
    unless_null $P5016, fallback2649
    nqp_get_sc_object $P5017, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5016, $P5017
  fallback2649:
    set fb_tmp_266, $P5016
    repr_defined $I5004, fb_tmp_266
    unless $I5004 goto if1108_else2647 
    set $P5018, fb_tmp_266["sign"]
    set $P5020, $P5018
    goto if1108_end2648
  if1108_else2647:
    null $P5019
    set $P5020, $P5019
  if1108_end2648:
    unless_null $P5020, vivi_11092650
    nqp_get_sc_object $P5021, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5020, $P5021
  vivi_11092650:
    set $S5002, $P5020
    iseq $I5003, $S5002, "-"
    set $I5007, $I5003
    unless $I5003 goto if1107_end2646 
    find_lex $P5022, "$/"
    unless_null $P5022, fallback2653
    nqp_get_sc_object $P5023, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5022, $P5023
  fallback2653:
    set fb_tmp_267, $P5022
    repr_defined $I5006, fb_tmp_267
    unless $I5006 goto if1110_else2651 
    set $P5024, fb_tmp_267["invert"]
    set $P5026, $P5024
    goto if1110_end2652
  if1110_else2651:
    null $P5025
    set $P5026, $P5025
  if1110_end2652:
    unless_null $P5026, vivi_11112654
    nqp_get_sc_object $P5027, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5026, $P5027
  vivi_11112654:
    set $S5003, $P5026
    isne $I5005, $S5003, "!"
    set $I5007, $I5005
  if1107_end2646:
    set $I5013, $I5007
    if $I5007 goto unless1106_end2644 
    find_lex $P5028, "$/"
    unless_null $P5028, fallback2659
    nqp_get_sc_object $P5029, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5028, $P5029
  fallback2659:
    set fb_tmp_268, $P5028
    repr_defined $I5009, fb_tmp_268
    unless $I5009 goto if1113_else2657 
    set $P5030, fb_tmp_268["sign"]
    set $P5032, $P5030
    goto if1113_end2658
  if1113_else2657:
    null $P5031
    set $P5032, $P5031
  if1113_end2658:
    unless_null $P5032, vivi_11142660
    nqp_get_sc_object $P5033, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5032, $P5033
  vivi_11142660:
    set $S5004, $P5032
    isne $I5008, $S5004, "-"
    set $I5012, $I5008
    unless $I5008 goto if1112_end2656 
    find_lex $P5034, "$/"
    unless_null $P5034, fallback2663
    nqp_get_sc_object $P5035, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5034, $P5035
  fallback2663:
    set fb_tmp_269, $P5034
    repr_defined $I5011, fb_tmp_269
    unless $I5011 goto if1115_else2661 
    set $P5036, fb_tmp_269["invert"]
    set $P5038, $P5036
    goto if1115_end2662
  if1115_else2661:
    null $P5037
    set $P5038, $P5037
  if1115_end2662:
    unless_null $P5038, vivi_11162664
    nqp_get_sc_object $P5039, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5038, $P5039
  vivi_11162664:
    set $S5005, $P5038
    iseq $I5010, $S5005, "!"
    set $I5012, $I5010
  if1112_end2656:
    set $I5013, $I5012
  unless1106_end2644:
    find_lex $P5040, "$/"
    $P5041 = $P5014."new"($P101, "uniprop" :named("rxtype"), $I5013 :named("negate"), $P5040 :named("node"))
    store_lex "$qast", $P5041
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_221_1360623852.546") :anon :lex :outer("cuid_166_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 789
    .const 'Sub' $P5076 = 'cuid_219_1360623852.546' 
    capture_lex $P5076 
    .lex "@alts", $P101 
    .local pmc fb_tmp_270 
    .local pmc fb_tmp_297 
    .local pmc fb_tmp_298 
    .local pmc fb_tmp_299 
    .local pmc fb_tmp_300 
    .local pmc fb_tmp_301 
    .local pmc fb_tmp_302 
    .local pmc fb_tmp_303 
    .local pmc fb_tmp_304 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_lex $P5005, "$/"
    unless_null $P5005, fallback2667
    nqp_get_sc_object $P5006, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5005, $P5006
  fallback2667:
    set fb_tmp_270, $P5005
    repr_defined $I5001, fb_tmp_270
    unless $I5001 goto if1117_else2665 
    set $P5007, fb_tmp_270["charspec"]
    set $P5009, $P5007
    goto if1117_end2666
  if1117_else2665:
    null $P5008
    set $P5009, $P5008
  if1117_end2666:
    unless_null $P5009, vivi_11182668
    nqp_get_sc_object $P5010, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5009, $P5010
  vivi_11182668:
    set $P5002, $P5009
    iter $P5004, $P5009
  for_next2781:
    unless $P5004, for_done2783
    shift $P5012, $P5004
  for_redo2782:
    .const 'Sub' $P5011 = 'cuid_219_1360623852.546' 
    capture_lex $P5011
    $P5002 = $P5011($P5012)
    goto for_next2781
  for_done2783:
    find_lex $P5013, "$str"
    set $S5001, $P5013
    length $I5002, $S5001
    unless $I5002 goto if1186_end2785 
.annotate 'line', 829
    nqp_get_sc_object $P5016, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set fb_tmp_297, $P5014
    repr_defined $I5003, fb_tmp_297
    unless $I5003 goto if1187_else2786 
    set $P5017, fb_tmp_297["Regex"]
    set $P5019, $P5017
    goto if1187_end2787
  if1187_else2786:
    null $P5018
    set $P5019, $P5018
  if1187_end2787:
    unless_null $P5019, vivi_11882788
    nqp_get_sc_object $P5020, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5019, $P5020
  vivi_11882788:
    find_lex $P5021, "$str"
    find_lex $P5022, "$/"
    find_lex $P5023, "$/"
    unless_null $P5023, fallback2791
    nqp_get_sc_object $P5024, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5023, $P5024
  fallback2791:
    set fb_tmp_298, $P5023
    repr_defined $I5005, fb_tmp_298
    unless $I5005 goto if1189_else2789 
    set $P5025, fb_tmp_298["sign"]
    set $P5027, $P5025
    goto if1189_end2790
  if1189_else2789:
    null $P5026
    set $P5027, $P5026
  if1189_end2790:
    unless_null $P5027, vivi_11902792
    nqp_get_sc_object $P5028, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5027, $P5028
  vivi_11902792:
    set $S5002, $P5027
    iseq $I5004, $S5002, "-"
    $P5029 = $P5019."new"($P5021, "enumcharlist" :named("rxtype"), $P5022 :named("node"), $I5004 :named("negate"))
    $P5030 = $P101."push"($P5029)
  if1186_end2785:
    set $N5001, $P101
    set $N5002, 1
    iseq $I5006, $N5001, $N5002
    unless $I5006 goto if1191_else2793 
    set fb_tmp_299, $P101
    repr_defined $I5007, fb_tmp_299
    unless $I5007 goto if1192_else2795 
    set $P5031, fb_tmp_299[0]
    set $P5033, $P5031
    goto if1192_end2796
  if1192_else2795:
    null $P5032
    set $P5033, $P5032
  if1192_end2796:
    unless_null $P5033, vivi_11932797
    nqp_get_sc_object $P5034, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5033, $P5034
  vivi_11932797:
    set $P5075, $P5033
    goto if1191_end2794
  if1191_else2793:
    find_lex $P5035, "$/"
    unless_null $P5035, fallback2802
    nqp_get_sc_object $P5036, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5035, $P5036
  fallback2802:
    set fb_tmp_300, $P5035
    repr_defined $I5009, fb_tmp_300
    unless $I5009 goto if1195_else2800 
    set $P5037, fb_tmp_300["sign"]
    set $P5039, $P5037
    goto if1195_end2801
  if1195_else2800:
    null $P5038
    set $P5039, $P5038
  if1195_end2801:
    unless_null $P5039, vivi_11962803
    nqp_get_sc_object $P5040, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5039, $P5040
  vivi_11962803:
    set $S5003, $P5039
    iseq $I5008, $S5003, "-"
    unless $I5008 goto if1194_else2798 
.annotate 'line', 833
    nqp_get_sc_object $P5043, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set fb_tmp_301, $P5041
    repr_defined $I5010, fb_tmp_301
    unless $I5010 goto if1197_else2804 
    set $P5044, fb_tmp_301["Regex"]
    set $P5046, $P5044
    goto if1197_end2805
  if1197_else2804:
    null $P5045
    set $P5046, $P5045
  if1197_end2805:
    unless_null $P5046, vivi_11982806
    nqp_get_sc_object $P5047, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5046, $P5047
  vivi_11982806:
    find_lex $P5048, "$/"
.annotate 'line', 834
    nqp_get_sc_object $P5051, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set fb_tmp_302, $P5049
    repr_defined $I5011, fb_tmp_302
    unless $I5011 goto if1199_else2807 
    set $P5052, fb_tmp_302["Regex"]
    set $P5054, $P5052
    goto if1199_end2808
  if1199_else2807:
    null $P5053
    set $P5054, $P5053
  if1199_end2808:
    unless_null $P5054, vivi_12002809
    nqp_get_sc_object $P5055, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5054, $P5055
  vivi_12002809:
    $P5056 = $P5054."new"($P101 :flat, "conj" :named("rxtype"), "zerowidth" :named("subtype"))
.annotate 'line', 835
    nqp_get_sc_object $P5059, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5058, $P5059, "QAST"
    get_who $P5057, $P5058
    set fb_tmp_303, $P5057
    repr_defined $I5012, fb_tmp_303
    unless $I5012 goto if1201_else2810 
    set $P5060, fb_tmp_303["Regex"]
    set $P5062, $P5060
    goto if1201_end2811
  if1201_else2810:
    null $P5061
    set $P5062, $P5061
  if1201_end2811:
    unless_null $P5062, vivi_12022812
    nqp_get_sc_object $P5063, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5062, $P5063
  vivi_12022812:
    $P5064 = $P5062."new"("cclass" :named("rxtype"), "." :named("subtype"))
    $P5065 = $P5046."new"($P5056, $P5064, "concat" :named("rxtype"), $P5048 :named("node"))
    set $P5074, $P5065
    goto if1194_end2799
  if1194_else2798:
.annotate 'line', 836
    nqp_get_sc_object $P5068, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5067, $P5068, "QAST"
    get_who $P5066, $P5067
    set fb_tmp_304, $P5066
    repr_defined $I5013, fb_tmp_304
    unless $I5013 goto if1203_else2813 
    set $P5069, fb_tmp_304["Regex"]
    set $P5071, $P5069
    goto if1203_end2814
  if1203_else2813:
    null $P5070
    set $P5071, $P5070
  if1203_end2814:
    unless_null $P5071, vivi_12042815
    nqp_get_sc_object $P5072, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5071, $P5072
  vivi_12042815:
    $P5073 = $P5071."new"($P101 :flat, "altseq" :named("rxtype"))
    set $P5074, $P5073
  if1194_end2799:
    set $P5075, $P5074
  if1191_end2794:
    store_lex "$qast", $P5075
    .return ($P5075) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_219_1360623852.546") :anon :lex :outer("cuid_221_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 791
    .param pmc _lex_param_0 
    .const 'Sub' $P5025 = 'cuid_218_1360623852.546' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_220_1360623852.546' 
    capture_lex $P5025 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_271 
    .local pmc fb_tmp_291 
    .local pmc fb_tmp_292 
    .local pmc fb_tmp_296 
    set fb_tmp_271, _lex_param_0
    repr_defined $I5001, fb_tmp_271
    unless $I5001 goto if1120_else2671 
    set $P5001, fb_tmp_271[1]
    set $P5003, $P5001
    goto if1120_end2672
  if1120_else2671:
    null $P5002
    set $P5003, $P5002
  if1120_end2672:
    unless_null $P5003, vivi_11212673
    nqp_get_sc_object $P5004, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5003, $P5004
  vivi_11212673:
    unless $P5003 goto if1119_else2669 
    .const 'Sub' $P5005 = 'cuid_218_1360623852.546' 
    capture_lex $P5005
    $P5006 = $P5005()
    set $P5024, $P5006
    goto if1119_end2670
  if1119_else2669:
    set fb_tmp_292, _lex_param_0
    repr_defined $I5003, fb_tmp_292
    unless $I5003 goto if1174_else2762 
    set $P5007, fb_tmp_292[0]
    set $P5009, $P5007
    goto if1174_end2763
  if1174_else2762:
    null $P5008
    set $P5009, $P5008
  if1174_end2763:
    unless_null $P5009, vivi_11752764
    nqp_get_sc_object $P5010, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5009, $P5010
  vivi_11752764:
    set fb_tmp_291, $P5009
    repr_defined $I5002, fb_tmp_291
    unless $I5002 goto if1173_else2760 
    set $P5011, fb_tmp_291["backslash"]
    set $P5013, $P5011
    goto if1173_end2761
  if1173_else2760:
    null $P5012
    set $P5013, $P5012
  if1173_end2761:
    unless_null $P5013, vivi_11762765
    nqp_get_sc_object $P5014, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5013, $P5014
  vivi_11762765:
    unless $P5013 goto if1172_else2758 
    .const 'Sub' $P5015 = 'cuid_220_1360623852.546' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5023, $P5016
    goto if1172_end2759
  if1172_else2758:
.annotate 'line', 827
    find_lex $P5017, "$str"
    set $S5002, $P5017
    set fb_tmp_296, _lex_param_0
    repr_defined $I5004, fb_tmp_296
    unless $I5004 goto if1184_else2778 
    set $P5018, fb_tmp_296[0]
    set $P5020, $P5018
    goto if1184_end2779
  if1184_else2778:
    null $P5019
    set $P5020, $P5019
  if1184_end2779:
    unless_null $P5020, vivi_11852780
    nqp_get_sc_object $P5021, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5020, $P5021
  vivi_11852780:
    set $S5003, $P5020
    concat $S5001, $S5002, $S5003
    box $P5022, $S5001
    store_lex "$str", $P5022
    set $P5023, $P5022
  if1172_end2759:
    set $P5024, $P5023
  if1119_end2670:
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_218_1360623852.546") :anon :lex :outer("cuid_219_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 792
    .lex "$node", $P101 
    .lex "$lhs", $P102 
    .lex "$rhs", $P103 
    .lex "$ord0", $P104 
    .lex "$ord1", $P105 
    .local pmc fb_tmp_272 
    .local pmc fb_tmp_273 
    .local pmc fb_tmp_274 
    .local pmc fb_tmp_275 
    .local pmc fb_tmp_276 
    .local pmc fb_tmp_277 
    .local pmc fb_tmp_278 
    .local pmc fb_tmp_279 
    .local pmc fb_tmp_280 
    .local pmc fb_tmp_281 
    .local pmc fb_tmp_282 
    .local pmc fb_tmp_283 
    .local pmc fb_tmp_284 
    .local pmc fb_tmp_285 
    .local pmc fb_tmp_286 
    .local pmc fb_tmp_287 
    .local pmc fb_tmp_288 
    .local pmc fb_tmp_289 
    .local pmc fb_tmp_290 
    .local pmc tmp_2 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P104, $P5004
    nqp_get_sc_object $P5005, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P105, $P5005
    find_lex $P5006, "$_"
    set fb_tmp_273, $P5006
    repr_defined $I5002, fb_tmp_273
    unless $I5002 goto if1124_else2678 
    set $P5007, fb_tmp_273[0]
    set $P5009, $P5007
    goto if1124_end2679
  if1124_else2678:
    null $P5008
    set $P5009, $P5008
  if1124_end2679:
    unless_null $P5009, vivi_11252680
    nqp_get_sc_object $P5010, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5009, $P5010
  vivi_11252680:
    set fb_tmp_272, $P5009
    repr_defined $I5001, fb_tmp_272
    unless $I5001 goto if1123_else2676 
    set $P5011, fb_tmp_272["backslash"]
    set $P5013, $P5011
    goto if1123_end2677
  if1123_else2676:
    null $P5012
    set $P5013, $P5012
  if1123_end2677:
    unless_null $P5013, vivi_11262681
    nqp_get_sc_object $P5014, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5013, $P5014
  vivi_11262681:
    unless $P5013 goto if1122_else2674 
.annotate 'line', 796
.annotate 'line', 797
    find_lex $P5015, "$_"
    set fb_tmp_275, $P5015
    repr_defined $I5004, fb_tmp_275
    unless $I5004 goto if1128_else2684 
    set $P5016, fb_tmp_275[0]
    set $P5018, $P5016
    goto if1128_end2685
  if1128_else2684:
    null $P5017
    set $P5018, $P5017
  if1128_end2685:
    unless_null $P5018, vivi_11292686
    nqp_get_sc_object $P5019, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5018, $P5019
  vivi_11292686:
    set fb_tmp_274, $P5018
    repr_defined $I5003, fb_tmp_274
    unless $I5003 goto if1127_else2682 
    set $P5020, fb_tmp_274["backslash"]
    set $P5022, $P5020
    goto if1127_end2683
  if1127_else2682:
    null $P5021
    set $P5022, $P5021
  if1127_end2683:
    unless_null $P5022, vivi_11302687
    nqp_get_sc_object $P5023, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5022, $P5023
  vivi_11302687:
    $P5024 = $P5022."ast"()
    set $P101, $P5024
.annotate 'line', 799
    $P5025 = $P101."rxtype"()
    set $S5001, $P5025
    isne $I5005, $S5001, "literal"
    set $I5007, $I5005
    unless $I5005 goto if1134_end2695 
    $P5026 = $P101."rxtype"()
    set $S5002, $P5026
    isne $I5006, $S5002, "enumcharlist"
    set $I5007, $I5006
  if1134_end2695:
    box $P5029, $I5007
    set $P5028, $P5029
    if $I5007 goto unless1133_end2693 
.annotate 'line', 800
    $P5027 = $P101."negate"()
    set $P5028, $P5027
  unless1133_end2693:
    set $P5034, $P5028
    if $P5028 goto unless1132_end2691 
    set fb_tmp_276, $P101
    repr_defined $I5010, fb_tmp_276
    unless $I5010 goto if1135_else2696 
    set $P5030, fb_tmp_276[0]
    set $P5032, $P5030
    goto if1135_end2697
  if1135_else2696:
    null $P5031
    set $P5032, $P5031
  if1135_end2697:
    unless_null $P5032, vivi_11362698
    nqp_get_sc_object $P5033, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5032, $P5033
  vivi_11362698:
    set $S5003, $P5032
    length $I5009, $S5003
    set $N5001, $I5009
    set $N5002, 1
    isne $I5008, $N5001, $N5002
    box $P5035, $I5008
    set $P5034, $P5035
  unless1132_end2691:
    unless $P5034 goto if1131_end2689 
.annotate 'line', 798
    find_lex $P5036, "$/"
    $P5037 = $P5036."CURSOR"()
    find_lex $P5038, "$_"
    set $S5005, $P5038
    concat $S5004, "Illegal range endpoint in regex: ", $S5005
    $P5039 = $P5037."panic"($S5004)
  if1131_end2689:
    set fb_tmp_277, $P101
    repr_defined $I5011, fb_tmp_277
    unless $I5011 goto if1137_else2699 
    set $P5040, fb_tmp_277[0]
    set $P5042, $P5040
    goto if1137_end2700
  if1137_else2699:
    null $P5041
    set $P5042, $P5041
  if1137_end2700:
    unless_null $P5042, vivi_11382701
    nqp_get_sc_object $P5043, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5042, $P5043
  vivi_11382701:
    set $P102, $P5042
    goto if1122_end2675
  if1122_else2674:
.annotate 'line', 803
    find_lex $P5044, "$_"
    set fb_tmp_279, $P5044
    repr_defined $I5013, fb_tmp_279
    unless $I5013 goto if1140_else2704 
    set $P5045, fb_tmp_279[0]
    set $P5047, $P5045
    goto if1140_end2705
  if1140_else2704:
    null $P5046
    set $P5047, $P5046
  if1140_end2705:
    unless_null $P5047, vivi_11412706
    nqp_get_sc_object $P5048, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5047, $P5048
  vivi_11412706:
    set fb_tmp_278, $P5047
    repr_defined $I5012, fb_tmp_278
    unless $I5012 goto if1139_else2702 
    set $P5049, fb_tmp_278[0]
    set $P5051, $P5049
    goto if1139_end2703
  if1139_else2702:
    null $P5050
    set $P5051, $P5050
  if1139_end2703:
    unless_null $P5051, vivi_11422707
    nqp_get_sc_object $P5052, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5051, $P5052
  vivi_11422707:
    set $S5006, $P5051
    box $P5053, $S5006
    set $P102, $P5053
  if1122_end2675:
    find_lex $P5054, "$_"
    set fb_tmp_282, $P5054
    repr_defined $I5016, fb_tmp_282
    unless $I5016 goto if1146_else2714 
    set $P5055, fb_tmp_282[1]
    set $P5057, $P5055
    goto if1146_end2715
  if1146_else2714:
    null $P5056
    set $P5057, $P5056
  if1146_end2715:
    unless_null $P5057, vivi_11472716
    nqp_get_sc_object $P5058, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5057, $P5058
  vivi_11472716:
    set fb_tmp_281, $P5057
    repr_defined $I5015, fb_tmp_281
    unless $I5015 goto if1145_else2712 
    set $P5059, fb_tmp_281[0]
    set $P5061, $P5059
    goto if1145_end2713
  if1145_else2712:
    null $P5060
    set $P5061, $P5060
  if1145_end2713:
    unless_null $P5061, vivi_11482717
    nqp_get_sc_object $P5062, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5061, $P5062
  vivi_11482717:
    set fb_tmp_280, $P5061
    repr_defined $I5014, fb_tmp_280
    unless $I5014 goto if1144_else2710 
    set $P5063, fb_tmp_280["backslash"]
    set $P5065, $P5063
    goto if1144_end2711
  if1144_else2710:
    null $P5064
    set $P5065, $P5064
  if1144_end2711:
    unless_null $P5065, vivi_11492718
    nqp_get_sc_object $P5066, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5065, $P5066
  vivi_11492718:
    unless $P5065 goto if1143_else2708 
.annotate 'line', 806
.annotate 'line', 807
    find_lex $P5067, "$_"
    set fb_tmp_285, $P5067
    repr_defined $I5019, fb_tmp_285
    unless $I5019 goto if1152_else2723 
    set $P5068, fb_tmp_285[1]
    set $P5070, $P5068
    goto if1152_end2724
  if1152_else2723:
    null $P5069
    set $P5070, $P5069
  if1152_end2724:
    unless_null $P5070, vivi_11532725
    nqp_get_sc_object $P5071, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5070, $P5071
  vivi_11532725:
    set fb_tmp_284, $P5070
    repr_defined $I5018, fb_tmp_284
    unless $I5018 goto if1151_else2721 
    set $P5072, fb_tmp_284[0]
    set $P5074, $P5072
    goto if1151_end2722
  if1151_else2721:
    null $P5073
    set $P5074, $P5073
  if1151_end2722:
    unless_null $P5074, vivi_11542726
    nqp_get_sc_object $P5075, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5074, $P5075
  vivi_11542726:
    set fb_tmp_283, $P5074
    repr_defined $I5017, fb_tmp_283
    unless $I5017 goto if1150_else2719 
    set $P5076, fb_tmp_283["backslash"]
    set $P5078, $P5076
    goto if1150_end2720
  if1150_else2719:
    null $P5077
    set $P5078, $P5077
  if1150_end2720:
    unless_null $P5078, vivi_11552727
    nqp_get_sc_object $P5079, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5078, $P5079
  vivi_11552727:
    $P5080 = $P5078."ast"()
    set $P101, $P5080
.annotate 'line', 809
    $P5081 = $P101."rxtype"()
    set $S5007, $P5081
    isne $I5020, $S5007, "literal"
    set $I5022, $I5020
    unless $I5020 goto if1159_end2735 
    $P5082 = $P101."rxtype"()
    set $S5008, $P5082
    isne $I5021, $S5008, "enumcharlist"
    set $I5022, $I5021
  if1159_end2735:
    box $P5085, $I5022
    set $P5084, $P5085
    if $I5022 goto unless1158_end2733 
.annotate 'line', 810
    $P5083 = $P101."negate"()
    set $P5084, $P5083
  unless1158_end2733:
    set $P5090, $P5084
    if $P5084 goto unless1157_end2731 
    set fb_tmp_286, $P101
    repr_defined $I5025, fb_tmp_286
    unless $I5025 goto if1160_else2736 
    set $P5086, fb_tmp_286[0]
    set $P5088, $P5086
    goto if1160_end2737
  if1160_else2736:
    null $P5087
    set $P5088, $P5087
  if1160_end2737:
    unless_null $P5088, vivi_11612738
    nqp_get_sc_object $P5089, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5088, $P5089
  vivi_11612738:
    set $S5009, $P5088
    length $I5024, $S5009
    set $N5003, $I5024
    set $N5004, 1
    isne $I5023, $N5003, $N5004
    box $P5091, $I5023
    set $P5090, $P5091
  unless1157_end2731:
    unless $P5090 goto if1156_end2729 
.annotate 'line', 808
    find_lex $P5092, "$/"
    $P5093 = $P5092."CURSOR"()
    find_lex $P5094, "$_"
    set $S5011, $P5094
    concat $S5010, "Illegal range endpoint in regex: ", $S5011
    $P5095 = $P5093."panic"($S5010)
  if1156_end2729:
    set fb_tmp_287, $P101
    repr_defined $I5026, fb_tmp_287
    unless $I5026 goto if1162_else2739 
    set $P5096, fb_tmp_287[0]
    set $P5098, $P5096
    goto if1162_end2740
  if1162_else2739:
    null $P5097
    set $P5098, $P5097
  if1162_end2740:
    unless_null $P5098, vivi_11632741
    nqp_get_sc_object $P5099, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5098, $P5099
  vivi_11632741:
    set $P103, $P5098
    goto if1143_end2709
  if1143_else2708:
.annotate 'line', 813
    find_lex $P5100, "$_"
    set fb_tmp_290, $P5100
    repr_defined $I5029, fb_tmp_290
    unless $I5029 goto if1166_else2746 
    set $P5101, fb_tmp_290[1]
    set $P5103, $P5101
    goto if1166_end2747
  if1166_else2746:
    null $P5102
    set $P5103, $P5102
  if1166_end2747:
    unless_null $P5103, vivi_11672748
    nqp_get_sc_object $P5104, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5103, $P5104
  vivi_11672748:
    set fb_tmp_289, $P5103
    repr_defined $I5028, fb_tmp_289
    unless $I5028 goto if1165_else2744 
    set $P5105, fb_tmp_289[0]
    set $P5107, $P5105
    goto if1165_end2745
  if1165_else2744:
    null $P5106
    set $P5107, $P5106
  if1165_end2745:
    unless_null $P5107, vivi_11682749
    nqp_get_sc_object $P5108, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5107, $P5108
  vivi_11682749:
    set fb_tmp_288, $P5107
    repr_defined $I5027, fb_tmp_288
    unless $I5027 goto if1164_else2742 
    set $P5109, fb_tmp_288[0]
    set $P5111, $P5109
    goto if1164_end2743
  if1164_else2742:
    null $P5110
    set $P5111, $P5110
  if1164_end2743:
    unless_null $P5111, vivi_11692750
    nqp_get_sc_object $P5112, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5111, $P5112
  vivi_11692750:
    set $S5012, $P5111
    box $P5113, $S5012
    set $P103, $P5113
  if1143_end2709:
    set $S5013, $P102
    ord $I5030, $S5013
    box $P5114, $I5030
    set $P104, $P5114
    set $S5014, $P103
    ord $I5031, $S5014
    box $P5115, $I5031
    set $P105, $P5115
    set $N5005, $P104
    set $N5006, $P105
    isgt $I5032, $N5005, $N5006
    unless $I5032 goto if1170_end2752 
.annotate 'line', 818
    find_lex $P5116, "$/"
    $P5117 = $P5116."CURSOR"()
    find_lex $P5118, "$_"
    set $S5016, $P5118
    concat $S5015, "Illegal reversed character range in regex: ", $S5016
    $P5119 = $P5117."panic"($S5015)
  if1170_end2752:
    new $P5123, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5123, while1171_handlers2756
    push_eh $P5123
  while1171_test2753:
    set $N5007, $P104
    set $N5008, $P105
    isle $I5033, $N5007, $N5008
    box $P5124, $I5033
    set $P5122, $P5124
    unless $I5033 goto while1171_done2757 
  while1171_redo2755:
    find_lex $P5120, "$str"
    set $S5018, $P5120
    set tmp_2, $P104
    set $N5010, tmp_2
    set $N5011, 1
    add $N5009, $N5010, $N5011
    box $P5121, $N5009
    set $P104, $P5121
    set $I5034, tmp_2
    chr $S5019, $I5034
    concat $S5017, $S5018, $S5019
    box $P5121, $S5017
    store_lex "$str", $P5121
    set $P5122, $P5121
    goto while1171_test2753 
  while1171_handlers2756:
    .get_results ($P5123)
    pop_upto_eh $P5123
    getattribute $P5123, $P5123, 'type'
    eq $P5123, .CONTROL_LOOP_NEXT, while1171_test2753
    eq $P5123, .CONTROL_LOOP_REDO, while1171_redo2755
  while1171_done2757:
    pop_eh 
    .return ($P5122) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_220_1360623852.546") :anon :lex :outer("cuid_219_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 822
    .lex "$bs", $P101 
    .local pmc fb_tmp_293 
    .local pmc fb_tmp_294 
    .local pmc fb_tmp_295 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 823
    find_lex $P5002, "$_"
    set fb_tmp_294, $P5002
    repr_defined $I5002, fb_tmp_294
    unless $I5002 goto if1178_else2768 
    set $P5003, fb_tmp_294[0]
    set $P5005, $P5003
    goto if1178_end2769
  if1178_else2768:
    null $P5004
    set $P5005, $P5004
  if1178_end2769:
    unless_null $P5005, vivi_11792770
    nqp_get_sc_object $P5006, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5005, $P5006
  vivi_11792770:
    set fb_tmp_293, $P5005
    repr_defined $I5001, fb_tmp_293
    unless $I5001 goto if1177_else2766 
    set $P5007, fb_tmp_293["backslash"]
    set $P5009, $P5007
    goto if1177_end2767
  if1177_else2766:
    null $P5008
    set $P5009, $P5008
  if1177_end2767:
    unless_null $P5009, vivi_11802771
    nqp_get_sc_object $P5010, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5009, $P5010
  vivi_11802771:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    find_lex $P5012, "$/"
    unless_null $P5012, fallback2776
    nqp_get_sc_object $P5013, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5012, $P5013
  fallback2776:
    set fb_tmp_295, $P5012
    repr_defined $I5004, fb_tmp_295
    unless $I5004 goto if1182_else2774 
    set $P5014, fb_tmp_295["sign"]
    set $P5016, $P5014
    goto if1182_end2775
  if1182_else2774:
    null $P5015
    set $P5016, $P5015
  if1182_end2775:
    unless_null $P5016, vivi_11832777
    nqp_get_sc_object $P5017, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5016, $P5017
  vivi_11832777:
    set $S5001, $P5016
    iseq $I5003, $S5001, "-"
    unless $I5003 goto if1181_end2773 
.annotate 'line', 824
    $P5018 = $P101."negate"()
    isfalse $I5005, $P5018
    $P5019 = $P101."negate"($I5005)
  if1181_end2773:
.annotate 'line', 825
    find_lex $P5020, "@alts"
    $P5021 = $P5020."push"($P101)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "mod_internal" :subid("cuid_167_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 842
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5032 = 'cuid_222_1360623852.546' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_223_1360623852.546' 
    capture_lex $P5032 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_305 
    .local pmc fb_tmp_306 
    .local pmc fb_tmp_307 
    .local pmc fb_tmp_308 
    unless_null _lex_param_1, fallback2820
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5001
  fallback2820:
    set fb_tmp_305, _lex_param_1
    repr_defined $I5001, fb_tmp_305
    unless $I5001 goto if1206_else2818 
    set $P5002, fb_tmp_305["quote_EXPR"]
    set $P5004, $P5002
    goto if1206_end2819
  if1206_else2818:
    null $P5003
    set $P5004, $P5003
  if1206_end2819:
    unless_null $P5004, vivi_12072821
    nqp_get_sc_object $P5005, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5004, $P5005
  vivi_12072821:
    unless $P5004 goto if1205_else2816 
.annotate 'line', 843
.annotate 'line', 844
    nqp_get_sc_object $P5008, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set fb_tmp_306, $P5006
    repr_defined $I5002, fb_tmp_306
    unless $I5002 goto if1209_else2824 
    set $P5009, fb_tmp_306["SVal"]
    set $P5011, $P5009
    goto if1209_end2825
  if1209_else2824:
    null $P5010
    set $P5011, $P5010
  if1209_end2825:
    unless_null $P5011, vivi_12102826
    nqp_get_sc_object $P5012, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5011, $P5012
  vivi_12102826:
    unless_null _lex_param_1, fallback2831
    nqp_get_sc_object $P5013, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_1, $P5013
  fallback2831:
    set fb_tmp_308, _lex_param_1
    repr_defined $I5004, fb_tmp_308
    unless $I5004 goto if1212_else2829 
    set $P5014, fb_tmp_308["quote_EXPR"]
    set $P5016, $P5014
    goto if1212_end2830
  if1212_else2829:
    null $P5015
    set $P5016, $P5015
  if1212_end2830:
    unless_null $P5016, vivi_12132832
    nqp_get_sc_object $P5017, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5016, $P5017
  vivi_12132832:
    set fb_tmp_307, $P5016
    repr_defined $I5003, fb_tmp_307
    unless $I5003 goto if1211_else2827 
    set $P5018, fb_tmp_307[0]
    set $P5020, $P5018
    goto if1211_end2828
  if1211_else2827:
    null $P5019
    set $P5020, $P5019
  if1211_end2828:
    unless_null $P5020, vivi_12142833
    nqp_get_sc_object $P5021, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5020, $P5021
  vivi_12142833:
    $P5022 = $P5020."ast"()
    $P5023 = $P5011."ACCEPTS"($P5022)
    unless $P5023 goto if1208_else2822 
    .const 'Sub' $P5024 = 'cuid_222_1360623852.546' 
    capture_lex $P5024
    $P5025 = $P5024()
    set $P5028, $P5025
    goto if1208_end2823
  if1208_else2822:
.annotate 'line', 852
.annotate 'line', 853
    $P5026 = _lex_param_1."CURSOR"()
    $P5027 = $P5026."panic"("Internal modifier strings must be literals")
    set $P5028, $P5027
  if1208_end2823:
    set $P5031, $P5028
    goto if1205_end2817
  if1205_else2816:
    .const 'Sub' $P5029 = 'cuid_223_1360623852.546' 
    capture_lex $P5029
    $P5030 = $P5029()
    set $P5031, $P5030
  if1205_end2817:
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_222_1360623852.546") :anon :lex :outer("cuid_167_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 844
    .lex "$key", $P101 
    .lex "$val", $P102 
    .local pmc fb_tmp_309 
    .local pmc fb_tmp_310 
    .local pmc fb_tmp_311 
    .local pmc fb_tmp_312 
    .local pmc fb_tmp_313 
    .local pmc fb_tmp_314 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P102, $P5002
    find_lex $P5003, "$/"
    unless_null $P5003, fallback2838
    nqp_get_sc_object $P5004, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5003, $P5004
  fallback2838:
    set fb_tmp_310, $P5003
    repr_defined $I5002, fb_tmp_310
    unless $I5002 goto if1216_else2836 
    set $P5005, fb_tmp_310["mod_ident"]
    set $P5007, $P5005
    goto if1216_end2837
  if1216_else2836:
    null $P5006
    set $P5007, $P5006
  if1216_end2837:
    unless_null $P5007, vivi_12172839
    nqp_get_sc_object $P5008, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5007, $P5008
  vivi_12172839:
    set fb_tmp_309, $P5007
    repr_defined $I5001, fb_tmp_309
    unless $I5001 goto if1215_else2834 
    set $P5009, fb_tmp_309["sym"]
    set $P5011, $P5009
    goto if1215_end2835
  if1215_else2834:
    null $P5010
    set $P5011, $P5010
  if1215_end2835:
    unless_null $P5011, vivi_12182840
    nqp_get_sc_object $P5012, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5011, $P5012
  vivi_12182840:
    set $S5001, $P5011
    box $P5013, $S5001
    set $P101, $P5013
.annotate 'line', 846
    find_lex $P5014, "$/"
    unless_null $P5014, fallback2845
    nqp_get_sc_object $P5015, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5014, $P5015
  fallback2845:
    set fb_tmp_312, $P5014
    repr_defined $I5004, fb_tmp_312
    unless $I5004 goto if1220_else2843 
    set $P5016, fb_tmp_312["quote_EXPR"]
    set $P5018, $P5016
    goto if1220_end2844
  if1220_else2843:
    null $P5017
    set $P5018, $P5017
  if1220_end2844:
    unless_null $P5018, vivi_12212846
    nqp_get_sc_object $P5019, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5018, $P5019
  vivi_12212846:
    set fb_tmp_311, $P5018
    repr_defined $I5003, fb_tmp_311
    unless $I5003 goto if1219_else2841 
    set $P5020, fb_tmp_311[0]
    set $P5022, $P5020
    goto if1219_end2842
  if1219_else2841:
    null $P5021
    set $P5022, $P5021
  if1219_end2842:
    unless_null $P5022, vivi_12222847
    nqp_get_sc_object $P5023, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5022, $P5023
  vivi_12222847:
    $P5024 = $P5022."ast"()
    $P5025 = $P5024."value"()
    set $P102, $P5025
    find_dynamic_lex $P5026, "%*RX"
    unless_null $P5026, fallback2848
    nqp_get_sc_object $P5028, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5027, $P5028
    set fb_tmp_313, $P5027
    repr_defined $I5005, fb_tmp_313
    unless $I5005 goto if1223_else2849 
    set $P5029, fb_tmp_313["%RX"]
    set $P5031, $P5029
    goto if1223_end2850
  if1223_else2849:
    null $P5030
    set $P5031, $P5030
  if1223_end2850:
    unless_null $P5031, vivi_12242851
    nqp_get_sc_object $P5033, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5032, $P5033
    new $P5034, 'Hash'
    set $P5032["%RX"], $P5034
    set $P5031, $P5034
  vivi_12242851:
    unless_null $P5031, vivi_12252852
    die "Contextual %*RX not found"
    box $P5035, "Contextual %*RX not found"
    set $P5031, $P5035
  vivi_12252852:
    set $P5026, $P5031
  fallback2848:
    set $S5002, $P101
    set $P5026[$S5002], $P102
.annotate 'line', 848
    find_dynamic_lex $P5036, "$/"
    set $S5003, $P101
    iseq $I5006, $S5003, "dba"
    unless $I5006 goto if1226_else2853 
.annotate 'line', 849
    nqp_get_sc_object $P5039, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set fb_tmp_314, $P5037
    repr_defined $I5007, fb_tmp_314
    unless $I5007 goto if1227_else2855 
    set $P5040, fb_tmp_314["Regex"]
    set $P5042, $P5040
    goto if1227_end2856
  if1227_else2855:
    null $P5041
    set $P5042, $P5041
  if1227_end2856:
    unless_null $P5042, vivi_12282857
    nqp_get_sc_object $P5043, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5042, $P5043
  vivi_12282857:
    $P5044 = $P5042."new"("dba" :named("rxtype"), $P102 :named("name"))
    set $P5045, $P5044
    goto if1226_end2854
  if1226_else2853:
    box $P5046, 0
    set $P5045, $P5046
  if1226_end2854:
    $P5047 = $P5036."!make"($P5045)
    .return ($P5047) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_223_1360623852.546") :anon :lex :outer("cuid_167_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 856
    .lex "$n", $P101 
    .local pmc fb_tmp_315 
    .local pmc fb_tmp_316 
    .local pmc fb_tmp_317 
    .local pmc fb_tmp_318 
    .local pmc fb_tmp_319 
    .local pmc fb_tmp_320 
    .local pmc fb_tmp_321 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
    find_lex $P5002, "$/"
    unless_null $P5002, fallback2864
    nqp_get_sc_object $P5003, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5002, $P5003
  fallback2864:
    set fb_tmp_316, $P5002
    repr_defined $I5003, fb_tmp_316
    unless $I5003 goto if1231_else2862 
    set $P5004, fb_tmp_316["n"]
    set $P5006, $P5004
    goto if1231_end2863
  if1231_else2862:
    null $P5005
    set $P5006, $P5005
  if1231_end2863:
    unless_null $P5006, vivi_12322865
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_12322865:
    set fb_tmp_315, $P5006
    repr_defined $I5002, fb_tmp_315
    unless $I5002 goto if1230_else2860 
    set $P5008, fb_tmp_315[0]
    set $P5010, $P5008
    goto if1230_end2861
  if1230_else2860:
    null $P5009
    set $P5010, $P5009
  if1230_end2861:
    unless_null $P5010, vivi_12332866
    nqp_get_sc_object $P5011, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5010, $P5011
  vivi_12332866:
    set $S5001, $P5010
    isgt $I5001, $S5001, ""
    unless $I5001 goto if1229_else2858 
    find_lex $P5012, "$/"
    unless_null $P5012, fallback2871
    nqp_get_sc_object $P5013, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5012, $P5013
  fallback2871:
    set fb_tmp_318, $P5012
    repr_defined $I5005, fb_tmp_318
    unless $I5005 goto if1235_else2869 
    set $P5014, fb_tmp_318["n"]
    set $P5016, $P5014
    goto if1235_end2870
  if1235_else2869:
    null $P5015
    set $P5016, $P5015
  if1235_end2870:
    unless_null $P5016, vivi_12362872
    nqp_get_sc_object $P5017, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5016, $P5017
  vivi_12362872:
    set fb_tmp_317, $P5016
    repr_defined $I5004, fb_tmp_317
    unless $I5004 goto if1234_else2867 
    set $P5018, fb_tmp_317[0]
    set $P5020, $P5018
    goto if1234_end2868
  if1234_else2867:
    null $P5019
    set $P5020, $P5019
  if1234_end2868:
    unless_null $P5020, vivi_12372873
    nqp_get_sc_object $P5021, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5020, $P5021
  vivi_12372873:
    set $N5001, $P5020
    box $P5023, $N5001
    set $P5022, $P5023
    goto if1229_end2859
  if1229_else2858:
    box $P5024, 1
    set $P5022, $P5024
  if1229_end2859:
    set $P101, $P5022
    find_dynamic_lex $P5025, "%*RX"
    unless_null $P5025, fallback2874
    nqp_get_sc_object $P5027, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5026, $P5027
    set fb_tmp_319, $P5026
    repr_defined $I5006, fb_tmp_319
    unless $I5006 goto if1238_else2875 
    set $P5028, fb_tmp_319["%RX"]
    set $P5030, $P5028
    goto if1238_end2876
  if1238_else2875:
    null $P5029
    set $P5030, $P5029
  if1238_end2876:
    unless_null $P5030, vivi_12392877
    nqp_get_sc_object $P5032, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5031, $P5032
    new $P5033, 'Hash'
    set $P5031["%RX"], $P5033
    set $P5030, $P5033
  vivi_12392877:
    unless_null $P5030, vivi_12402878
    die "Contextual %*RX not found"
    box $P5034, "Contextual %*RX not found"
    set $P5030, $P5034
  vivi_12402878:
    set $P5025, $P5030
  fallback2874:
    find_lex $P5035, "$/"
    unless_null $P5035, fallback2883
    nqp_get_sc_object $P5036, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5035, $P5036
  fallback2883:
    set fb_tmp_321, $P5035
    repr_defined $I5008, fb_tmp_321
    unless $I5008 goto if1242_else2881 
    set $P5037, fb_tmp_321["mod_ident"]
    set $P5039, $P5037
    goto if1242_end2882
  if1242_else2881:
    null $P5038
    set $P5039, $P5038
  if1242_end2882:
    unless_null $P5039, vivi_12432884
    nqp_get_sc_object $P5040, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5039, $P5040
  vivi_12432884:
    set fb_tmp_320, $P5039
    repr_defined $I5007, fb_tmp_320
    unless $I5007 goto if1241_else2879 
    set $P5041, fb_tmp_320["sym"]
    set $P5043, $P5041
    goto if1241_end2880
  if1241_else2879:
    null $P5042
    set $P5043, $P5042
  if1241_end2880:
    unless_null $P5043, vivi_12442885
    nqp_get_sc_object $P5044, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5043, $P5044
  vivi_12442885:
    set $S5002, $P5043
    set $P5025[$S5002], $P101
.annotate 'line', 859
    find_dynamic_lex $P5045, "$/"
    $P5046 = $P5045."!make"(0)
    .return ($P5046) 
.end
.HLL "nqp"
.namespace []
.sub "qbuildsub" :subid("cuid_168_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 870
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_2 :opt_flag 
    .param pmc _lex_param_3 :named("anon") :optional 
    .param int haz_param_3 :opt_flag 
    .param pmc _lex_param_4 :named("addself") :optional 
    .param int haz_param_4 :opt_flag 
    .param pmc _lex_param_5 :slurpy :named 
    .lex "$code_obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$qast", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$anon", _lex_param_3 
    .lex "$addself", _lex_param_4 
    .lex "%rest", _lex_param_5 
    .local pmc fb_tmp_322 
    .local pmc fb_tmp_323 
    .local pmc fb_tmp_324 
    .local pmc fb_tmp_325 
    .local pmc fb_tmp_326 
    .local pmc fb_tmp_327 
    .local pmc fb_tmp_328 
    .local pmc fb_tmp_329 
    .local pmc fb_tmp_330 
    .local pmc fb_tmp_331 
    .local pmc fb_tmp_332 
    .local pmc fb_tmp_333 
    .local pmc fb_tmp_334 
    .local pmc fb_tmp_335 
    .local pmc fb_tmp_336 
    .local pmc fb_tmp_337 
    .local pmc fb_tmp_338 
    if haz_param_2, default2950
    nqp_get_sc_object $P5135, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5134, $P5135, "QAST"
    get_who $P5133, $P5134
    set fb_tmp_338, $P5133
    repr_defined $I5019, fb_tmp_338
    unless $I5019 goto if1285_else2951 
    set $P5136, fb_tmp_338["Block"]
    set $P5138, $P5136
    goto if1285_end2952
  if1285_else2951:
    null $P5137
    set $P5138, $P5137
  if1285_end2952:
    unless_null $P5138, vivi_12862953
    nqp_get_sc_object $P5139, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5138, $P5139
  vivi_12862953:
    $P5140 = $P5138."new"()
    set _lex_param_2, $P5140
  default2950:
    if haz_param_3, default2954
    nqp_get_sc_object $P5141, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_3, $P5141
  default2954:
    if haz_param_4, default2955
    nqp_get_sc_object $P5142, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set _lex_param_4, $P5142
  default2955:
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
    exists $I5001, _lex_param_5["code_obj"]
    unless $I5001 goto if1245_else2886 
    set fb_tmp_322, _lex_param_5
    repr_defined $I5002, fb_tmp_322
    unless $I5002 goto if1246_else2888 
    set $P5002, fb_tmp_322["code_obj"]
    set $P5004, $P5002
    goto if1246_end2889
  if1246_else2888:
    null $P5003
    set $P5004, $P5003
  if1246_end2889:
    unless_null $P5004, vivi_12472890
    nqp_get_sc_object $P5005, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5004, $P5005
  vivi_12472890:
    set $P5008, $P5004
    goto if1245_end2887
  if1245_else2886:
.annotate 'line', 873
    nqp_decontainerize $P5006, _lex_param_0
    $P5007 = $P5006."create_regex_code_object"(_lex_param_2)
    set $P5008, $P5007
  if1245_end2887:
    set $P101, $P5008
    unless _lex_param_4 goto if1248_end2892 
.annotate 'line', 875
.annotate 'line', 876
    nqp_get_sc_object $P5011, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set fb_tmp_323, $P5009
    repr_defined $I5003, fb_tmp_323
    unless $I5003 goto if1249_else2893 
    set $P5012, fb_tmp_323["Var"]
    set $P5014, $P5012
    goto if1249_end2894
  if1249_else2893:
    null $P5013
    set $P5014, $P5013
  if1249_end2894:
    unless_null $P5014, vivi_12502895
    nqp_get_sc_object $P5015, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5014, $P5015
  vivi_12502895:
    $P5016 = $P5014."new"("self" :named("name"), "local" :named("scope"), "param" :named("decl"))
    $P5017 = _lex_param_2."push"($P5016)
  if1248_end2892:
.annotate 'line', 878
    $P5018 = _lex_param_2."symbol"(utf8:"$\x{a2}")
    if $P5018 goto unless1251_end2897 
.annotate 'line', 879
    nqp_get_sc_object $P5021, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set fb_tmp_324, $P5019
    repr_defined $I5004, fb_tmp_324
    unless $I5004 goto if1252_else2898 
    set $P5022, fb_tmp_324["Var"]
    set $P5024, $P5022
    goto if1252_end2899
  if1252_else2898:
    null $P5023
    set $P5024, $P5023
  if1252_end2899:
    unless_null $P5024, vivi_12532900
    nqp_get_sc_object $P5025, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5024, $P5025
  vivi_12532900:
    $P5026 = $P5024."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    _lex_param_2."push"($P5026)
.annotate 'line', 880
    $P5027 = _lex_param_2."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
  unless1251_end2897:
.annotate 'line', 883
    nqp_decontainerize $P5028, _lex_param_0
    $P5029 = "&capnames"(_lex_param_1, 0)
    $P5028."store_regex_caps"($P101, _lex_param_2, $P5029)
.annotate 'line', 884
    nqp_decontainerize $P5030, _lex_param_0
    nqp_get_sc_object $P5033, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5032, $P5033, "QRegex"
    get_who $P5031, $P5032
    set fb_tmp_325, $P5031
    repr_defined $I5005, fb_tmp_325
    unless $I5005 goto if1254_else2901 
    set $P5034, fb_tmp_325["NFA"]
    set $P5036, $P5034
    goto if1254_end2902
  if1254_else2901:
    null $P5035
    set $P5036, $P5035
  if1254_end2902:
    unless_null $P5036, vivi_12552903
    nqp_get_sc_object $P5037, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5036, $P5037
  vivi_12552903:
    $P5038 = $P5036."new"()
    $P5039 = $P5038."addnode"(_lex_param_1)
    $P5030."store_regex_nfa"($P101, _lex_param_2, $P5039)
.annotate 'line', 885
    nqp_decontainerize $P5040, _lex_param_0
    $P5040."alt_nfas"($P101, _lex_param_2, _lex_param_1)
    set _lex_param_2["orig_qast"], _lex_param_1
.annotate 'line', 888
    nqp_get_sc_object $P5043, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set fb_tmp_326, $P5041
    repr_defined $I5006, fb_tmp_326
    unless $I5006 goto if1256_else2904 
    set $P5044, fb_tmp_326["Regex"]
    set $P5046, $P5044
    goto if1256_end2905
  if1256_else2904:
    null $P5045
    set $P5046, $P5045
  if1256_end2905:
    unless_null $P5046, vivi_12572906
    nqp_get_sc_object $P5047, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5046, $P5047
  vivi_12572906:
.annotate 'line', 889
    nqp_get_sc_object $P5050, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set fb_tmp_327, $P5048
    repr_defined $I5007, fb_tmp_327
    unless $I5007 goto if1258_else2907 
    set $P5051, fb_tmp_327["Regex"]
    set $P5053, $P5051
    goto if1258_end2908
  if1258_else2907:
    null $P5052
    set $P5053, $P5052
  if1258_end2908:
    unless_null $P5053, vivi_12592909
    nqp_get_sc_object $P5054, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5053, $P5054
  vivi_12592909:
    $P5055 = $P5053."new"("scan" :named("rxtype"))
    unless _lex_param_3 goto if1260_else2910 
.annotate 'line', 892
    nqp_get_sc_object $P5058, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5057, $P5058, "QAST"
    get_who $P5056, $P5057
    set fb_tmp_328, $P5056
    repr_defined $I5008, fb_tmp_328
    unless $I5008 goto if1261_else2912 
    set $P5059, fb_tmp_328["Regex"]
    set $P5061, $P5059
    goto if1261_end2913
  if1261_else2912:
    null $P5060
    set $P5061, $P5060
  if1261_end2913:
    unless_null $P5061, vivi_12622914
    nqp_get_sc_object $P5062, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5061, $P5062
  vivi_12622914:
    $P5063 = $P5061."new"("pass" :named("rxtype"))
    set $P5131, $P5063
    goto if1260_end2911
  if1260_else2910:
    find_dynamic_lex $P5064, "%*RX"
    unless_null $P5064, fallback2919
    nqp_get_sc_object $P5066, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5065, $P5066
    set fb_tmp_330, $P5065
    repr_defined $I5011, fb_tmp_330
    unless $I5011 goto if1265_else2920 
    set $P5067, fb_tmp_330["%RX"]
    set $P5069, $P5067
    goto if1265_end2921
  if1265_else2920:
    null $P5068
    set $P5069, $P5068
  if1265_end2921:
    unless_null $P5069, vivi_12662922
    nqp_get_sc_object $P5071, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5070, $P5071
    new $P5072, 'Hash'
    set $P5070["%RX"], $P5072
    set $P5069, $P5072
  vivi_12662922:
    unless_null $P5069, vivi_12672923
    die "Contextual %*RX not found"
    box $P5073, "Contextual %*RX not found"
    set $P5069, $P5073
  vivi_12672923:
    set $P5064, $P5069
  fallback2919:
    set fb_tmp_329, $P5064
    repr_defined $I5010, fb_tmp_329
    unless $I5010 goto if1264_else2917 
    set $P5074, fb_tmp_329["name"]
    set $P5076, $P5074
    goto if1264_end2918
  if1264_else2917:
    null $P5075
    set $P5076, $P5075
  if1264_end2918:
    unless_null $P5076, vivi_12682924
    nqp_get_sc_object $P5077, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5076, $P5077
  vivi_12682924:
    set $S5002, $P5076
    substr $S5001, $S5002, 0, 12
    isne $I5009, $S5001, "!!LATENAME!!"
    unless $I5009 goto if1263_else2915 
.annotate 'line', 894
    nqp_get_sc_object $P5080, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5079, $P5080, "QAST"
    get_who $P5078, $P5079
    set fb_tmp_331, $P5078
    repr_defined $I5012, fb_tmp_331
    unless $I5012 goto if1269_else2925 
    set $P5081, fb_tmp_331["Regex"]
    set $P5083, $P5081
    goto if1269_end2926
  if1269_else2925:
    null $P5082
    set $P5083, $P5082
  if1269_end2926:
    unless_null $P5083, vivi_12702927
    nqp_get_sc_object $P5084, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5083, $P5084
  vivi_12702927:
    find_dynamic_lex $P5085, "%*RX"
    unless_null $P5085, fallback2930
    nqp_get_sc_object $P5087, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5086, $P5087
    set fb_tmp_333, $P5086
    repr_defined $I5014, fb_tmp_333
    unless $I5014 goto if1272_else2931 
    set $P5088, fb_tmp_333["%RX"]
    set $P5090, $P5088
    goto if1272_end2932
  if1272_else2931:
    null $P5089
    set $P5090, $P5089
  if1272_end2932:
    unless_null $P5090, vivi_12732933
    nqp_get_sc_object $P5092, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5091, $P5092
    new $P5093, 'Hash'
    set $P5091["%RX"], $P5093
    set $P5090, $P5093
  vivi_12732933:
    unless_null $P5090, vivi_12742934
    die "Contextual %*RX not found"
    box $P5094, "Contextual %*RX not found"
    set $P5090, $P5094
  vivi_12742934:
    set $P5085, $P5090
  fallback2930:
    set fb_tmp_332, $P5085
    repr_defined $I5013, fb_tmp_332
    unless $I5013 goto if1271_else2928 
    set $P5095, fb_tmp_332["name"]
    set $P5097, $P5095
    goto if1271_end2929
  if1271_else2928:
    null $P5096
    set $P5097, $P5096
  if1271_end2929:
    unless_null $P5097, vivi_12752935
    nqp_get_sc_object $P5098, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5097, $P5098
  vivi_12752935:
    $P5099 = $P5083."new"("pass" :named("rxtype"), $P5097 :named("name"))
    set $P5130, $P5099
    goto if1263_end2916
  if1263_else2915:
.annotate 'line', 895
    nqp_get_sc_object $P5102, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5101, $P5102, "QAST"
    get_who $P5100, $P5101
    set fb_tmp_334, $P5100
    repr_defined $I5015, fb_tmp_334
    unless $I5015 goto if1276_else2936 
    set $P5103, fb_tmp_334["Regex"]
    set $P5105, $P5103
    goto if1276_end2937
  if1276_else2936:
    null $P5104
    set $P5105, $P5104
  if1276_end2937:
    unless_null $P5105, vivi_12772938
    nqp_get_sc_object $P5106, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5105, $P5106
  vivi_12772938:
.annotate 'line', 896
    nqp_get_sc_object $P5109, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5108, $P5109, "QAST"
    get_who $P5107, $P5108
    set fb_tmp_335, $P5107
    repr_defined $I5016, fb_tmp_335
    unless $I5016 goto if1278_else2939 
    set $P5110, fb_tmp_335["Var"]
    set $P5112, $P5110
    goto if1278_end2940
  if1278_else2939:
    null $P5111
    set $P5112, $P5111
  if1278_end2940:
    unless_null $P5112, vivi_12792941
    nqp_get_sc_object $P5113, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5112, $P5113
  vivi_12792941:
    find_dynamic_lex $P5114, "%*RX"
    unless_null $P5114, fallback2944
    nqp_get_sc_object $P5116, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5115, $P5116
    set fb_tmp_337, $P5115
    repr_defined $I5018, fb_tmp_337
    unless $I5018 goto if1281_else2945 
    set $P5117, fb_tmp_337["%RX"]
    set $P5119, $P5117
    goto if1281_end2946
  if1281_else2945:
    null $P5118
    set $P5119, $P5118
  if1281_end2946:
    unless_null $P5119, vivi_12822947
    nqp_get_sc_object $P5121, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5120, $P5121
    new $P5122, 'Hash'
    set $P5120["%RX"], $P5122
    set $P5119, $P5122
  vivi_12822947:
    unless_null $P5119, vivi_12832948
    die "Contextual %*RX not found"
    box $P5123, "Contextual %*RX not found"
    set $P5119, $P5123
  vivi_12832948:
    set $P5114, $P5119
  fallback2944:
    set fb_tmp_336, $P5114
    repr_defined $I5017, fb_tmp_336
    unless $I5017 goto if1280_else2942 
    set $P5124, fb_tmp_336["name"]
    set $P5126, $P5124
    goto if1280_end2943
  if1280_else2942:
    null $P5125
    set $P5126, $P5125
  if1280_end2943:
    unless_null $P5126, vivi_12842949
    nqp_get_sc_object $P5127, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5126, $P5127
  vivi_12842949:
    set $S5004, $P5126
    substr $S5003, $S5004, 12
    $P5128 = $P5112."new"($S5003 :named("name"), "lexical" :named("scope"))
    $P5129 = $P5105."new"($P5128, "pass" :named("rxtype"))
    set $P5130, $P5129
  if1263_end2916:
    set $P5131, $P5130
  if1260_end2911:
    $P5132 = $P5046."new"($P5055, _lex_param_1, $P5131, "concat" :named("rxtype"))
    set _lex_param_1, $P5132
.annotate 'line', 902
    _lex_param_2."push"(_lex_param_1)
    .return (_lex_param_2) 
.end
.HLL "nqp"
.namespace []
.sub "alt_nfas" :subid("cuid_169_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 957
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5021 = 'cuid_225_1360623852.546' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_226_1360623852.546' 
    capture_lex $P5021 
    .lex "$rxtype", $P101 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$ast", _lex_param_3 
    .local pmc fb_tmp_341 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P101, $P5001
.annotate 'line', 958
    $P5002 = _lex_param_3."rxtype"()
    set $P101, $P5002
    set $S5001, $P101
    iseq $I5001, $S5001, "alt"
    unless $I5001 goto if1287_else2956 
    .const 'Sub' $P5003 = 'cuid_225_1360623852.546' 
    capture_lex $P5003
    $P5004 = $P5003()
    set $P5020, $P5004
    goto if1287_end2957
  if1287_else2956:
    set $S5002, $P101
    iseq $I5002, $S5002, "subcapture"
    set $I5004, $I5002
    if $I5002 goto unless1293_end2970 
    set $S5003, $P101
    iseq $I5003, $S5003, "quant"
    set $I5004, $I5003
  unless1293_end2970:
    unless $I5004 goto if1292_else2967 
.annotate 'line', 968
.annotate 'line', 969
    nqp_decontainerize $P5005, _lex_param_0
    set fb_tmp_341, _lex_param_3
    repr_defined $I5005, fb_tmp_341
    unless $I5005 goto if1294_else2971 
    set $P5006, fb_tmp_341[0]
    set $P5008, $P5006
    goto if1294_end2972
  if1294_else2971:
    null $P5007
    set $P5008, $P5007
  if1294_end2972:
    unless_null $P5008, vivi_12952973
    nqp_get_sc_object $P5009, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5008, $P5009
  vivi_12952973:
    $P5010 = $P5005."alt_nfas"(_lex_param_1, _lex_param_2, $P5008)
    set $P5019, $P5010
    goto if1292_end2968
  if1292_else2967:
    set $S5004, $P101
    iseq $I5006, $S5004, "concat"
    set $I5008, $I5006
    if $I5006 goto unless1299_end2981 
    set $S5005, $P101
    iseq $I5007, $S5005, "altseq"
    set $I5008, $I5007
  unless1299_end2981:
    set $I5010, $I5008
    if $I5008 goto unless1298_end2979 
    set $S5006, $P101
    iseq $I5009, $S5006, "conj"
    set $I5010, $I5009
  unless1298_end2979:
    set $I5012, $I5010
    if $I5010 goto unless1297_end2977 
    set $S5007, $P101
    iseq $I5011, $S5007, "conjseq"
    set $I5012, $I5011
  unless1297_end2977:
    box $P5018, $I5012
    set $P5017, $P5018
    unless $I5012 goto if1296_end2975 
.annotate 'line', 971
.annotate 'line', 972
    $P5014 = _lex_param_3."list"()
    set $P5011, $P5014
    iter $P5013, $P5014
  for_next2982:
    unless $P5013, for_done2984
    shift $P5016, $P5013
  for_redo2983:
    .const 'Sub' $P5015 = 'cuid_226_1360623852.546' 
    capture_lex $P5015
    $P5011 = $P5015($P5016)
    goto for_next2982
  for_done2984:
    set $P5017, $P5011
  if1296_end2975:
    set $P5019, $P5017
  if1292_end2968:
    set $P5020, $P5019
  if1287_end2957:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_225_1360623852.546") :anon :lex :outer("cuid_169_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 959
    .const 'Sub' $P5025 = 'cuid_224_1360623852.546' 
    capture_lex $P5025 
    .lex "@alternatives", $P101 
    .local pmc fb_tmp_340 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 961
    find_lex $P5005, "$ast"
    $P5006 = $P5005."list"()
    set $P5002, $P5006
    iter $P5004, $P5006
  for_next2961:
    unless $P5004, for_done2963
    shift $P5008, $P5004
  for_redo2962:
    .const 'Sub' $P5007 = 'cuid_224_1360623852.546' 
    capture_lex $P5007
    $P5002 = $P5007($P5008)
    goto for_next2961
  for_done2963:
.annotate 'line', 965
    find_lex $P5009, "$ast"
    nqp_get_sc_object $P5012, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set fb_tmp_340, $P5010
    repr_defined $I5001, fb_tmp_340
    unless $I5001 goto if1290_else2964 
    set $P5013, fb_tmp_340["Node"]
    set $P5015, $P5013
    goto if1290_end2965
  if1290_else2964:
    null $P5014
    set $P5015, $P5014
  if1290_end2965:
    unless_null $P5015, vivi_12912966
    nqp_get_sc_object $P5016, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5015, $P5016
  vivi_12912966:
    $P5017 = $P5015."unique"("alt_nfa_")
    set $S5003, $P5017
    concat $S5002, $S5003, "_"
    time $N5001
    set $S5004, $N5001
    concat $S5001, $S5002, $S5004
    $P5009."name"($S5001)
.annotate 'line', 966
    find_lex $P5019, "self"
    nqp_decontainerize $P5018, $P5019
    find_lex $P5020, "$code_obj"
    find_lex $P5021, "$block"
    find_lex $P5022, "$ast"
    $P5023 = $P5022."name"()
    $P5024 = $P5018."store_regex_alt_nfa"($P5020, $P5021, $P5023, $P101)
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_224_1360623852.546") :anon :lex :outer("cuid_225_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 961
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_339 
.annotate 'line', 962
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$code_obj"
    find_lex $P5004, "$block"
    $P5001."alt_nfas"($P5003, $P5004, _lex_param_0)
    find_lex $P5005, "@alternatives"
.annotate 'line', 963
    nqp_get_sc_object $P5008, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5007, $P5008, "QRegex"
    get_who $P5006, $P5007
    set fb_tmp_339, $P5006
    repr_defined $I5001, fb_tmp_339
    unless $I5001 goto if1288_else2958 
    set $P5009, fb_tmp_339["NFA"]
    set $P5011, $P5009
    goto if1288_end2959
  if1288_else2958:
    null $P5010
    set $P5011, $P5010
  if1288_end2959:
    unless_null $P5011, vivi_12892960
    nqp_get_sc_object $P5012, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5011, $P5012
  vivi_12892960:
    $P5013 = $P5011."new"()
    $P5014 = $P5013."addnode"(_lex_param_0)
    push $P5005, $P5014
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_226_1360623852.546") :anon :lex :outer("cuid_169_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 972
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$code_obj"
    find_lex $P5004, "$block"
    $P5005 = $P5001."alt_nfas"($P5003, $P5004, _lex_param_0)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "subrule_alias" :subid("cuid_170_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 976
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "self", _lex_param_0 
    .lex "$ast", _lex_param_1 
    .lex "$name", _lex_param_2 
.annotate 'line', 977
    $P5001 = _lex_param_1."name"()
    set $S5001, $P5001
    isgt $I5001, $S5001, ""
    unless $I5001 goto if1300_else2985 
    set $S5004, _lex_param_2
    concat $S5003, $S5004, "="
    $P5002 = _lex_param_1."name"()
    set $S5005, $P5002
    concat $S5002, $S5003, $S5005
    $P5003 = _lex_param_1."name"($S5002)
    goto if1300_end2986
  if1300_else2985:
.annotate 'line', 978
    $P5004 = _lex_param_1."name"(_lex_param_2)
  if1300_end2986:
.annotate 'line', 979
    $P5005 = _lex_param_1."subtype"("capture")
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "flip_ast" :subid("cuid_171_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 982
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5026 = 'cuid_227_1360623852.546' 
    capture_lex $P5026 
    .const 'Sub' $P5026 = 'cuid_228_1360623852.546' 
    capture_lex $P5026 
    .lex "self", _lex_param_0 
    .lex "$qast", _lex_param_1 
    .local pmc fb_tmp_342 
    .local pmc fb_tmp_343 
    root_new $P101, ['parrot';'Continuation']
    set_label $P101, lexotic_2987
    .lex "RETURN", $P101
    nqp_get_sc_object $P5003, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    nqp_get_package_through_who $P5002, $P5003, "QAST"
    get_who $P5001, $P5002
    set fb_tmp_342, $P5001
    repr_defined $I5002, fb_tmp_342
    unless $I5002 goto if1302_else2991 
    set $P5004, fb_tmp_342["Regex"]
    set $P5006, $P5004
    goto if1302_end2992
  if1302_else2991:
    null $P5005
    set $P5006, $P5005
  if1302_end2992:
    unless_null $P5006, vivi_13032993
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_13032993:
    type_check $I5001, _lex_param_1, $P5006
    if $I5001 goto unless1301_end2990 
    find_lex $P5008, "RETURN"
    $P5009 = $P5008(_lex_param_1)
  unless1301_end2990:
.annotate 'line', 984
    $P5010 = _lex_param_1."rxtype"()
    set $S5001, $P5010
    iseq $I5003, $S5001, "literal"
    unless $I5003 goto if1304_else2994 
.annotate 'line', 985
    set fb_tmp_343, _lex_param_1
    repr_defined $I5004, fb_tmp_343
    unless $I5004 goto if1305_else2996 
    set $P5011, fb_tmp_343[0]
    set $P5013, $P5011
    goto if1305_end2997
  if1305_else2996:
    null $P5012
    set $P5013, $P5012
  if1305_end2997:
    unless_null $P5013, vivi_13062998
    nqp_get_sc_object $P5014, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5013, $P5014
  vivi_13062998:
    $P5015 = $P5013."reverse"()
    set _lex_param_1[0], $P5015
    goto if1304_end2995
  if1304_else2994:
.annotate 'line', 987
    $P5016 = _lex_param_1."rxtype"()
    set $S5002, $P5016
    iseq $I5005, $S5002, "concat"
    unless $I5005 goto if1307_else2999 
    .const 'Sub' $P5017 = 'cuid_227_1360623852.546' 
    capture_lex $P5017
    $P5018 = $P5017()
    set $P5025, $P5018
    goto if1307_end3000
  if1307_else2999:
.annotate 'line', 992
    $P5022 = _lex_param_1."list"()
    set $P5019, $P5022
    iter $P5021, $P5022
  for_next3011:
    unless $P5021, for_done3013
    shift $P5024, $P5021
  for_redo3012:
    .const 'Sub' $P5023 = 'cuid_228_1360623852.546' 
    capture_lex $P5023
    $P5019 = $P5023($P5024)
    goto for_next3011
  for_done3013:
    set $P5025, $P5019
  if1307_end3000:
  if1304_end2995:
    goto lexotic_2988
  lexotic_2987:
    .get_results (_lex_param_1)
  lexotic_2988:
    .return (_lex_param_1) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_227_1360623852.546") :anon :lex :outer("cuid_171_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 987
    .lex "@tmp", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
  while1308_test3001:
    find_lex $P5002, "$qast"
    $P5003 = $P5002."list"()
    set $N5001, $P5003
    box $P5009, $N5001
    set $P5008, $P5009
    unless $N5001 goto while1308_done3005 
  while1308_redo3003:
.annotate 'line', 989
    find_lex $P5004, "$qast"
    $P5005 = $P5004."list"()
    $P5006 = $P5005."shift"()
    $P5007 = $P101."push"($P5006)
    set $P5008, $P5007
    goto while1308_test3001 
  while1308_done3005:
  while1309_test3006:
    set $P5017, $P101
    unless $P101 goto while1309_done3010 
  while1309_redo3008:
.annotate 'line', 990
    find_lex $P5010, "$qast"
    $P5011 = $P5010."list"()
    find_lex $P5013, "self"
    nqp_decontainerize $P5012, $P5013
    $P5014 = $P101."pop"()
    $P5015 = $P5012."flip_ast"($P5014)
    $P5016 = $P5011."push"($P5015)
    set $P5017, $P5016
    goto while1309_test3006 
  while1309_done3010:
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_228_1360623852.546") :anon :lex :outer("cuid_171_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 993
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    $P5003 = $P5001."flip_ast"(_lex_param_0)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "create_regex_code_object" :subid("cuid_172_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 1000
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    .local pmc fb_tmp_344 
.annotate 'line', 1001
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback3014
    nqp_get_sc_object $P5003, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    get_who $P5002, $P5003
    set fb_tmp_344, $P5002
    repr_defined $I5001, fb_tmp_344
    unless $I5001 goto if1310_else3015 
    set $P5004, fb_tmp_344["$W"]
    set $P5006, $P5004
    goto if1310_end3016
  if1310_else3015:
    null $P5005
    set $P5006, $P5005
  if1310_end3016:
    unless_null $P5006, vivi_13113017
    nqp_get_sc_object $P5007, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    set $P5006, $P5007
  vivi_13113017:
    unless_null $P5006, vivi_13123018
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5006, $P5008
  vivi_13123018:
    set $P5001, $P5006
  fallback3014:
    $P5009 = _lex_param_1."name"()
    $P5010 = $P5001."create_code"(_lex_param_1, $P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_caps" :subid("cuid_173_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 1005
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "%caps", _lex_param_3 
.annotate 'line', 1006
    $P5001 = _lex_param_1."SET_CAPS"(_lex_param_3)
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_nfa" :subid("cuid_174_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 1010
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$nfa", _lex_param_3 
.annotate 'line', 1011
    $P5001 = _lex_param_3."save"()
    $P5002 = _lex_param_1."SET_NFA"($P5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_alt_nfa" :subid("cuid_175_1360623852.546") :anon :lex :outer("cuid_191_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 1015
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .const 'Sub' $P5008 = 'cuid_229_1360623852.546' 
    capture_lex $P5008 
    .lex "@saved", $P101 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$key", _lex_param_3 
    .lex "@alternatives", _lex_param_4 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    set $P5002, _lex_param_4
    iter $P5004, _lex_param_4
  for_next3019:
    unless $P5004, for_done3021
    shift $P5006, $P5004
  for_redo3020:
    .const 'Sub' $P5005 = 'cuid_229_1360623852.546' 
    capture_lex $P5005
    $P5002 = $P5005($P5006)
    goto for_next3019
  for_done3021:
.annotate 'line', 1020
    $P5007 = _lex_param_1."SET_ALT_NFA"(_lex_param_3, $P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_229_1360623852.546") :anon :lex :outer("cuid_175_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 1017
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1018
    find_lex $P5001, "@saved"
    $P5002 = _lex_param_0."save"(1 :named("non_empty"))
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_230_1360623852.546") :anon :lex :outer("cuid_177_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 1025
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    nqp_get_sc_object $P5001, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213", 25
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_232_1360623852.546") :load :init
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .const 'Sub' $P5001 = 'cuid_231_1360623852.546' 
    capture_lex $P5001 
    .local pmc cur_sc 
    .local pmc conflicts 
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P5001
    get_class $P5002, "LexPad"
    get_class $P5003, "NQPLexPad"
    $P5004 = $P5001."hll_map"($P5002, $P5003)
    load_bytecode "ModuleLoader.pbc"
    .const 'Sub' $P5001 = "cuid_177_1360623852.546" 
    get_hll_global $P5002, "ModuleLoader"
    $P5003 = $P5002."load_setting"("NQPCORE")
    $P5004 = $P5001."set_outer_ctx"($P5003)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPHLL")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QAST")
    nqp_create_sc $P5001, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571"
    set cur_sc, $P5001
    $P5002 = cur_sc."set_description"("src\\stage2\\gen\\NQPP6QRegex.pm")
    new $P5003, 'ResizablePMCArray'
    set conflicts, $P5003
    new $P5004, 'ResizableStringArray'
    null $S5001
    push $P5004, $S5001
    push $P5004, "P6opaque"
    push $P5004, "QAST"
    push $P5004, "QRegex"
    push $P5004, "NQPCursorRole"
    push $P5004, "665045AF806B9CD2501FCBA6F06D94BEA1925B5C-1360623830.578"
    push $P5004, "src\\stage2\\QRegex.nqp"
    push $P5004, "NQPMatch"
    push $P5004, "NQPCursor"
    push $P5004, "NQPRegexMethod"
    push $P5004, "NQPRegex"
    push $P5004, "HLL"
    push $P5004, "PIRT"
    push $P5004, "DEFAULT"
    push $P5004, "CREATE"
    push $P5004, "87903807ADF71CDA74CDCE8869B95A330377DD41-1360623827.213"
    push $P5004, "src\\stage2\\NQPCORE.setting"
    push $P5004, "bless"
    push $P5004, "BUILDALL"
    push $P5004, "new"
    push $P5004, "Str"
    push $P5004, "Numeric"
    push $P5004, "Int"
    push $P5004, "defined"
    push $P5004, "ACCEPTS"
    push $P5004, "isa"
    push $P5004, "__dump"
    push $P5004, "BUILD"
    push $P5004, "2DB3D36DA056732D47EE6E9E7C410867ACFEB60B-1360623834.771"
    push $P5004, "src\\stage2\\gen\\NQPHLL.pm"
    push $P5004, "slot_for_object"
    push $P5004, "add_object"
    push $P5004, "add_root_code_ref"
    push $P5004, "update_root_code_ref"
    push $P5004, "is_precompilation_mode"
    push $P5004, "add_load_dependency_task"
    push $P5004, "add_fixup_task"
    push $P5004, "sc"
    push $P5004, "handle"
    push $P5004, "code_ref_blocks"
    push $P5004, "load_dependency_tasks"
    push $P5004, "fixup_tasks"
    push $P5004, "create_code"
    push $P5004, "$!sc"
    push $P5004, "$!handle"
    push $P5004, "$!precomp_mode"
    push $P5004, "$!num_code_refs"
    push $P5004, "$!code_ref_blocks"
    push $P5004, "@!load_dependency_tasks"
    push $P5004, "@!fixup_tasks"
    push $P5004, "%!addr_to_slot"
    push $P5004, "MATCH"
    push $P5004, "Bool"
    push $P5004, "parse"
    push $P5004, "!INTERPOLATE"
    push $P5004, "!INTERPOLATE_REGEX"
    push $P5004, "orig"
    push $P5004, "target"
    push $P5004, "from"
    push $P5004, "pos"
    push $P5004, "CAPHASH"
    push $P5004, "!cursor_init"
    push $P5004, "!cursor_start"
    push $P5004, "!cursor_start_all"
    push $P5004, "!cursor_start_cur"
    push $P5004, "!cursor_start_subcapture"
    push $P5004, "!cursor_capture"
    push $P5004, "!cursor_push_cstack"
    push $P5004, "!cursor_pass"
    push $P5004, "!cursor_fail"
    push $P5004, "!cursor_pos"
    push $P5004, "!cursor_next"
    push $P5004, "!cursor_more"
    push $P5004, "!reduce"
    push $P5004, "!reduce_with_match"
    push $P5004, "!shared"
    push $P5004, "!protoregex"
    push $P5004, "!protoregex_nfa"
    push $P5004, "!protoregex_table"
    push $P5004, "!alt"
    push $P5004, "!alt_nfa"
    push $P5004, "!precompute_nfas"
    push $P5004, "!dba"
    push $P5004, "!highwater"
    push $P5004, "!highexpect"
    push $P5004, "!fresh_highexpect"
    push $P5004, "!set_highexpect"
    push $P5004, "!clear_highwater"
    push $P5004, "!BACKREF"
    push $P5004, "!LITERAL"
    push $P5004, "at"
    push $P5004, "before"
    push $P5004, "after"
    push $P5004, "ws"
    push $P5004, "ww"
    push $P5004, "wb"
    push $P5004, "ident"
    push $P5004, "alpha"
    push $P5004, "alnum"
    push $P5004, "upper"
    push $P5004, "lower"
    push $P5004, "digit"
    push $P5004, "xdigit"
    push $P5004, "space"
    push $P5004, "blank"
    push $P5004, "cntrl"
    push $P5004, "punct"
    push $P5004, "FAILGOAL"
    push $P5004, "throw_unrecog_backslash_seq"
    push $P5004, "termish"
    push $P5004, "term"
    push $P5004, "infix"
    push $P5004, "prefix"
    push $P5004, "postfix"
    push $P5004, "circumfix"
    push $P5004, "postcircumfix"
    push $P5004, "term:sym<circumfix>"
    push $P5004, "infixish"
    push $P5004, "prefixish"
    push $P5004, "postfixish"
    push $P5004, "nullterm"
    push $P5004, "nullterm_alt"
    push $P5004, "nulltermish"
    push $P5004, "quote_delimited"
    push $P5004, "quote_atom"
    push $P5004, "decint"
    push $P5004, "decints"
    push $P5004, "hexint"
    push $P5004, "hexints"
    push $P5004, "octint"
    push $P5004, "octints"
    push $P5004, "binint"
    push $P5004, "binints"
    push $P5004, "integer"
    push $P5004, "dec_number"
    push $P5004, "escale"
    push $P5004, "quote_escape"
    push $P5004, "quote_escape:sym<backslash>"
    push $P5004, "quote_escape:sym<stopper>"
    push $P5004, "quote_escape:sym<bs>"
    push $P5004, "quote_escape:sym<nl>"
    push $P5004, "quote_escape:sym<cr>"
    push $P5004, "quote_escape:sym<tab>"
    push $P5004, "quote_escape:sym<ff>"
    push $P5004, "quote_escape:sym<esc>"
    push $P5004, "quote_escape:sym<hex>"
    push $P5004, "quote_escape:sym<oct>"
    push $P5004, "quote_escape:sym<chr>"
    push $P5004, "quote_escape:sym<0>"
    push $P5004, "quote_escape:sym<misc>"
    push $P5004, "charname"
    push $P5004, "charnames"
    push $P5004, "charspec"
    push $P5004, "O"
    push $P5004, "panic"
    push $P5004, "peek_delimiters"
    push $P5004, "quote_EXPR"
    push $P5004, "quotemod_check"
    push $P5004, "starter"
    push $P5004, "stopper"
    push $P5004, "split_words"
    push $P5004, "EXPR"
    push $P5004, "EXPR_reduce"
    push $P5004, "EXPR_nonassoc"
    push $P5004, "ternary"
    push $P5004, "MARKER"
    push $P5004, "MARKED"
    push $P5004, "LANG"
    push $P5004, "obs"
    push $P5004, "throw_unrecognized_metachar"
    push $P5004, "throw_null_pattern"
    push $P5004, "normspace"
    push $P5004, "identifier"
    push $P5004, "arg"
    push $P5004, "arglist"
    push $P5004, "TOP"
    push $P5004, "nibbler"
    push $P5004, "infixstopper"
    push $P5004, "rxstopper"
    push $P5004, "termaltseq"
    push $P5004, "termconjseq"
    push $P5004, "termalt"
    push $P5004, "termconj"
    push $P5004, "quantified_atom"
    push $P5004, "separator"
    push $P5004, "atom"
    push $P5004, "quantifier"
    push $P5004, "quantifier:sym<*>"
    push $P5004, "quantifier:sym<+>"
    push $P5004, "quantifier:sym<?>"
    push $P5004, "quantifier:sym<{N,M}>"
    push $P5004, "quantifier:sym<**>"
    push $P5004, "backmod"
    push $P5004, "metachar"
    push $P5004, "metachar:sym<ws>"
    push $P5004, "metachar:sym<[ ]>"
    push $P5004, "metachar:sym<( )>"
    push $P5004, "metachar:sym<'>"
    push $P5004, "metachar:sym<\">"
    push $P5004, "metachar:sym<.>"
    push $P5004, "metachar:sym<^>"
    push $P5004, "metachar:sym<^^>"
    push $P5004, "metachar:sym<$>"
    push $P5004, "metachar:sym<$$>"
    push $P5004, "metachar:sym<:::>"
    push $P5004, "metachar:sym<::>"
    push $P5004, "metachar:sym<lwb>"
    push $P5004, "metachar:sym<rwb>"
    push $P5004, "metachar:sym<from>"
    push $P5004, "metachar:sym<to>"
    push $P5004, "metachar:sym<bs>"
    push $P5004, "metachar:sym<mod>"
    push $P5004, "metachar:sym<quantifier>"
    push $P5004, "metachar:sym<~>"
    push $P5004, "metachar:sym<{*}>"
    push $P5004, "metachar:sym<assert>"
    push $P5004, "sigil"
    push $P5004, "metachar:sym<var>"
    push $P5004, "backslash"
    push $P5004, "backslash:sym<s>"
    push $P5004, "backslash:sym<b>"
    push $P5004, "backslash:sym<e>"
    push $P5004, "backslash:sym<f>"
    push $P5004, "backslash:sym<h>"
    push $P5004, "backslash:sym<r>"
    push $P5004, "backslash:sym<t>"
    push $P5004, "backslash:sym<v>"
    push $P5004, "backslash:sym<o>"
    push $P5004, "backslash:sym<x>"
    push $P5004, "backslash:sym<c>"
    push $P5004, "backslash:sym<A>"
    push $P5004, "backslash:sym<z>"
    push $P5004, "backslash:sym<Z>"
    push $P5004, "backslash:sym<Q>"
    push $P5004, "backslash:sym<unrec>"
    push $P5004, "backslash:sym<misc>"
    push $P5004, "assertion"
    push $P5004, "assertion:sym<?>"
    push $P5004, "assertion:sym<!>"
    push $P5004, "assertion:sym<|>"
    push $P5004, "assertion:sym<method>"
    push $P5004, "assertion:sym<name>"
    push $P5004, "assertion:sym<[>"
    push $P5004, "cclass_elem"
    push $P5004, "mod_internal"
    push $P5004, "mod_ident"
    push $P5004, "mod_ident:sym<ignorecase>"
    push $P5004, "mod_ident:sym<ratchet>"
    push $P5004, "mod_ident:sym<sigspace>"
    push $P5004, "mod_ident:sym<dba>"
    push $P5004, "mod_ident:sym<oops>"
    push $P5004, "$!shared"
    push $P5004, "$!from"
    push $P5004, "$!pos"
    push $P5004, "$!match"
    push $P5004, "$!name"
    push $P5004, "$!bstack"
    push $P5004, "$!cstack"
    push $P5004, "$!regexsub"
    push $P5004, "$!restart"
    push $P5004, "ints_to_string"
    push $P5004, "CTXSAVE"
    push $P5004, "SET_BLOCK_OUTER_CTX"
    push $P5004, "qbuildsub"
    push $P5004, "alt_nfas"
    push $P5004, "subrule_alias"
    push $P5004, "flip_ast"
    push $P5004, "create_regex_code_object"
    push $P5004, "store_regex_caps"
    push $P5004, "store_regex_nfa"
    push $P5004, "store_regex_alt_nfa"
    push $P5004, "language"
    push $P5004, "compiler"
    push $P5004, "config"
    push $P5004, "load_module"
    push $P5004, "autoprint"
    push $P5004, "interactive"
    push $P5004, "interactive_result"
    push $P5004, "interactive_exception"
    push $P5004, "eval"
    push $P5004, "ctxsave"
    push $P5004, "stages"
    push $P5004, "parsegrammar"
    push $P5004, "parseactions"
    push $P5004, "interactive_banner"
    push $P5004, "interactive_prompt"
    push $P5004, "compiler_progname"
    push $P5004, "commandline_options"
    push $P5004, "command_line"
    push $P5004, "command_eval"
    push $P5004, "process_args"
    push $P5004, "evalfiles"
    push $P5004, "compile"
    push $P5004, "start"
    push $P5004, "past"
    push $P5004, "post"
    push $P5004, "pirbegin"
    push $P5004, "pir"
    push $P5004, "evalpmc"
    push $P5004, "dumper"
    push $P5004, "usage"
    push $P5004, "version"
    push $P5004, "show-config"
    push $P5004, "verbose-config"
    push $P5004, "vmstat"
    push $P5004, "nqpevent"
    push $P5004, "removestage"
    push $P5004, "addstage"
    push $P5004, "parse_name"
    push $P5004, "lineof"
    push $P5004, "user-progname"
    push $P5004, "cli-options"
    push $P5004, "cli-arguments"
    push $P5004, "@!stages"
    push $P5004, "$!parsegrammar"
    push $P5004, "$!parseactions"
    push $P5004, "@!cmdoptions"
    push $P5004, "$!usage"
    push $P5004, "$!compiler_progname"
    push $P5004, "$!language"
    push $P5004, "%!config"
    push $P5004, "$!user_progname"
    push $P5004, "@!cli-arguments"
    push $P5004, "%!cli-options"
    push $P5004, ""
    push $P5004, "alt_nfa__1_1360623852.686"
    push $P5004, "alt_nfa__2_1360623852.692"
    push $P5004, "val"
    push $P5004, "'"
    push $P5004, "\""
    push $P5004, "alt_nfa__3_1360623852.714"
    push $P5004, "0"
    push $P5004, "alt_nfa__4_1360623852.773"
    push $P5004, ">"
    push $P5004, "alt_nfa__5_1360623852.79"
    push $P5004, "|"
    push $P5004, "&"
    push $P5004, "noun"
    push $P5004, "&|~"
    push $P5004, "alt_nfa__6_1360623852.839"
    push $P5004, "alt_nfa__7_1360623852.863"
    push $P5004, "septype"
    push $P5004, "alt_nfa__8_1360623852.881"
    push $P5004, "sym"
    push $P5004, "1"
    push $P5004, "2"
    push $P5004, "min"
    push $P5004, "max"
    push $P5004, "alt_nfa__9_1360623852.946"
    push $P5004, "alt_nfa__10_1360623853.014"
    push $P5004, "alt_nfa__11_1360623853.02"
    push $P5004, "GOAL"
    push $P5004, "key"
    push $P5004, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5004, "$@%&"
    push $P5004, "name"
    push $P5004, "alt_nfa__12_1360623853.1"
    push $P5004, "dDnNsSwW"
    push $P5004, "bB"
    push $P5004, "eE"
    push $P5004, "fF"
    push $P5004, "hH"
    push $P5004, "rR"
    push $P5004, "tT"
    push $P5004, "vV"
    push $P5004, "oO"
    push $P5004, "alt_nfa__13_1360623853.156"
    push $P5004, "xX"
    push $P5004, "alt_nfa__14_1360623853.167"
    push $P5004, "cC"
    push $P5004, "alt_nfa__15_1360623853.23"
    push $P5004, "alt_nfa__16_1360623853.24"
    push $P5004, "longname"
    push $P5004, "alt_nfa__17_1360623853.269"
    push $P5004, "alt_nfa__18_1360623853.276"
    push $P5004, "sign"
    push $P5004, "invert"
    push $P5004, "uniprop"
    push $P5004, "alt_nfa__19_1360623853.334"
    push $P5004, "alt_nfa__20_1360623853.334"
    push $P5004, "alt_nfa__21_1360623853.334"
    push $P5004, "n"
    push $P5004, "alt_nfa__23_1360623853.362"
    push $P5004, "alt_nfa__24_1360623853.362"
    push $P5004, "alt_nfa__22_1360623853.341"
    push $P5004, "__6MODEL_CORE__"
    push $P5004, "GLOBALish"
    push $P5004, "EXPORT"
    push $P5004, "46A27B8E73DBD8EFB3FE1AA531DA4577B21729DD-1360623823.905"
    push $P5004, "src\\stage2\\gen\\nqp-mo.pm"
    push $P5004, "QRegex::P6Regex::World"
    push $P5004, "QRegex::P6Regex::Grammar"
    push $P5004, "alt_nfa__1_1360623834.868"
    push $P5004, "alt_nfa__2_1360623834.896"
    push $P5004, "alt_nfa__3_1360623834.957"
    push $P5004, "alt_nfa__4_1360623834.958"
    push $P5004, "alt_nfa__5_1360623834.975"
    push $P5004, "alt_nfa__6_1360623835.043"
    push $P5004, "alt_nfa__7_1360623835.054"
    push $P5004, "alt_nfa__8_1360623835.088"
    push $P5004, "alt_nfa__9_1360623835.123"
    push $P5004, "shared"
    push $P5004, "match"
    push $P5004, "bstack"
    push $P5004, "cstack"
    push $P5004, "regexsub"
    push $P5004, "restart"
    push $P5004, "QRegex::P6Regex::Actions"
    push $P5004, "QRegex::P6Regex::Compiler"
    push $P5004, "CompileTimeValue"
    push $P5004, "6A529C03C57FF1539F71263163E1D04547746F2E-1360623828.987"
    push $P5004, "src\\stage2\\QASTNode.nqp"
    push $P5004, "SpecialArg"
    push $P5004, "Node"
    push $P5004, "Regex"
    push $P5004, "IVal"
    push $P5004, "NVal"
    push $P5004, "SVal"
    push $P5004, "BVal"
    push $P5004, "WVal"
    push $P5004, "Want"
    push $P5004, "Var"
    push $P5004, "VarWithFallback"
    push $P5004, "Op"
    push $P5004, "VM"
    push $P5004, "Stmts"
    push $P5004, "Stmt"
    push $P5004, "Block"
    push $P5004, "Unquote"
    push $P5004, "CompUnit"
    push $P5004, "InlinePlaceholder"
    push $P5004, "Operations"
    push $P5004, "7FFCB7640B24640E90F9FEFBA4D2852179876F76-1360623839.469"
    push $P5004, "src\\stage2\\QAST.nqp"
    push $P5004, "Compiler"
    push $P5004, "NFA"
    push $P5004, "P6Regex"
    push $P5004, "Grammar"
    push $P5004, "Actions"
    push $P5004, "CommandLine"
    push $P5004, "World"
    push $P5004, "CallResult"
    push $P5004, "Sub"
    push $P5004, "Ops"
    push $P5004, "Label"
    push $P5004, "01234567"
    push $P5004, "0123456789abcdefABCDEF"
    push $P5004, "?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    push $P5004, "01"
    push $P5004, "Ee"
    .const 'Sub' $P5005 = 'cuid_231_1360623852.546' 
    capture_lex $P5005
    $P5006 = $P5005()
    nqp_deserialize_sc "", cur_sc, $P5004, $P5006, conflicts
    unless conflicts goto if1320_end3034 
    die "Repossession conflicts occurred during deserialization"
  if1320_end3034:
    .const "LexInfo" $P5001 = "cuid_177_1360623852.546"
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    $P5001."set_static_lexpad_value"("GLOBALish", $P5002)
    .const "LexInfo" $P5003 = "cuid_177_1360623852.546"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_177_1360623852.546"
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 0
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_177_1360623852.546"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_177_1360623852.546"
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 1
    $P5001."set_static_lexpad_value"("EXPORT", $P5002)
    .const "LexInfo" $P5003 = "cuid_177_1360623852.546"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_177_1360623852.546"
    nqp_get_sc_object $P5002, "665045AF806B9CD2501FCBA6F06D94BEA1925B5C-1360623830.578", 33
    $P5001."set_static_lexpad_value"("NQPCursorRole", $P5002)
    .const "LexInfo" $P5003 = "cuid_177_1360623852.546"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_1_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 4
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_179_1360623852.546"
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 3
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_179_1360623852.546"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_179_1360623852.546"
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 3
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_179_1360623852.546"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_2_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 6
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_3_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 7
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_4_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 8
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_5_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 9
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_6_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 10
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_7_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 11
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_8_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 12
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_9_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 13
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_10_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 14
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_11_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 15
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_12_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 16
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_13_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 17
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_14_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 18
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_15_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 19
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_16_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 20
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_17_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 21
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_18_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 22
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_19_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 23
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_20_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 24
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_21_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 25
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_22_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 26
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_23_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 27
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_24_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 28
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_25_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 29
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_26_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 30
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_27_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 31
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_28_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 32
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_29_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 33
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_30_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 34
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_31_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 35
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_32_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 36
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_33_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 37
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_34_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 38
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_35_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 39
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_36_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 40
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_37_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 41
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_38_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 42
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_39_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 43
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_40_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 44
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_41_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 45
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_42_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 46
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_43_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 47
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_44_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 48
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_45_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 49
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_46_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 50
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_47_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 51
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_48_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 52
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_49_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 53
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_50_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 54
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_51_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 55
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_52_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 56
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_53_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 57
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_54_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 58
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_55_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 59
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_56_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 60
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_57_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 61
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_58_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 62
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_59_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 63
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_60_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 64
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_61_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 65
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_62_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 66
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_63_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 67
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_64_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 68
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_65_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 69
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_66_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 70
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_67_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 71
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_68_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 72
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_69_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 73
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_70_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 74
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_71_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 75
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_72_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 76
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_73_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 77
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_74_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 78
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_75_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 79
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_76_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 80
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_77_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 81
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_78_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 82
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_79_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 83
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_80_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 84
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_81_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 85
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_82_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 86
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_83_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 87
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_84_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 88
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_85_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 89
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_86_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 90
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_87_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 91
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_88_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 92
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_89_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 93
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_90_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 94
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_91_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 95
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_92_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 96
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_93_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 97
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_94_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 98
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_95_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 99
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_96_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 100
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_97_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 101
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_98_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 102
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_99_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 103
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_100_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 104
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_101_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 105
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_102_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 106
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_103_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 107
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_104_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 108
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_105_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 109
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_106_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 110
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_107_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 111
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_108_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 112
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_109_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 113
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_110_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 114
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_111_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 115
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_112_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 116
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_180_1360623852.546"
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 5
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_180_1360623852.546"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_180_1360623852.546"
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 5
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_180_1360623852.546"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_113_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 118
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_114_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 119
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_115_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 120
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_116_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 121
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_117_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 122
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_118_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 123
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_119_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 124
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_120_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 125
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_121_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 126
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_122_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 127
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_123_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 128
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_124_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 129
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_125_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 130
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_126_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 131
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_127_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 132
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_128_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 133
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_129_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 134
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_130_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 135
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_131_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 136
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_132_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 137
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_133_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 138
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_134_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 139
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_135_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 140
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_136_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 141
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_137_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 142
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_138_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 143
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_139_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 144
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_140_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 145
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_141_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 146
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_142_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 147
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_143_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 148
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_144_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 149
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_145_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 150
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_146_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 151
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_147_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 152
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_148_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 153
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_149_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 154
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_150_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 155
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_151_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 156
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_152_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 157
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_153_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 158
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_154_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 159
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_155_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 160
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_156_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 161
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_157_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 162
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_158_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 163
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_159_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 164
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_160_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 165
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_161_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 166
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_162_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 167
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_163_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 168
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_164_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 169
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_165_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 170
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_166_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 171
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_167_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 172
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_168_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 173
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_169_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 174
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_170_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 175
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_171_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 176
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_172_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 177
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_173_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 178
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_174_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 179
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_175_1360623852.546" 
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 180
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_191_1360623852.546"
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 117
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_191_1360623852.546"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_191_1360623852.546"
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 117
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_191_1360623852.546"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_230_1360623852.546"
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 181
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_230_1360623852.546"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_230_1360623852.546"
    nqp_get_sc_object $P5002, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360623852.571", 181
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_230_1360623852.546"
    $P5004 = $P5003."finish_static_lexpad"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_231_1360623852.546") :anon :lex :outer("cuid_232_1360623852.546")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    new $P5001, 'ResizablePMCArray'
    .const 'Sub' $P5002 = "cuid_1_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_2_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_3_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_4_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_5_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_6_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_7_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_8_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_9_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_10_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_11_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_12_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_13_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_14_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_15_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_16_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_17_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_18_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_19_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_20_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_21_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_22_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_23_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_24_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_25_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_26_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_27_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_28_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_29_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_30_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_31_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_32_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_33_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_34_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_35_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_36_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_37_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_38_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_39_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_40_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_41_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_42_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_43_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_44_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_45_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_46_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_47_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_48_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_49_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_50_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_51_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_52_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_53_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_54_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_55_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_56_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_57_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_58_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_59_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_60_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_61_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_62_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_63_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_64_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_65_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_66_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_67_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_68_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_69_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_70_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_71_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_72_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_73_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_74_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_75_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_76_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_77_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_78_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_79_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_80_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_81_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_82_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_83_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_84_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_85_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_86_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_87_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_88_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_89_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_90_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_91_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_92_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_93_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_94_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_95_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_96_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_97_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_98_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_99_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_100_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_101_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_102_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_103_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_104_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_105_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_106_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_107_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_108_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_109_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_110_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_111_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_112_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_113_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_114_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_115_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_116_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_117_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_118_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_119_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_120_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_121_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_122_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_123_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_124_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_125_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_126_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_127_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_128_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_129_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_130_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_131_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_132_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_133_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_134_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_135_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_136_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_137_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_138_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_139_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_140_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_141_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_142_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_143_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_144_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_145_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_146_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_147_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_148_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_149_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_150_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_151_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_152_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_153_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_154_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_155_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_156_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_157_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_158_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_159_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_160_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_161_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_162_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_163_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_164_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_165_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_166_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_167_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_168_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_169_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_170_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_171_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_172_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_173_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_174_1360623852.546" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_175_1360623852.546" 
    push $P5001, $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_233_1360623852.546") :load
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .const 'Sub' $P5001 = "cuid_177_1360623852.546" 
    $P5002 = $P5001()
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_234_1360623852.546") :main
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
    .param pmc ARGS :slurpy 
    .const 'Sub' $P5001 = "cuid_177_1360623852.546" 
    $P5002 = $P5001(ARGS :flat)
    .return ($P5002) 
.end