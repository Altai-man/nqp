.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'

.HLL "nqp"

.loadlib "nqp_group"

.loadlib "nqp_ops"

.loadlib "nqp_bigint_ops"

.loadlib "trans_ops"

.loadlib "io_ops"

.namespace []
.sub "_block1000"  :anon :subid("179_1337966785.387")
    .param pmc param_1002 :slurpy
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 0
    .const 'Sub' $P2548 = "328_1337966785.387" 
    capture_lex $P2548
    .const 'Sub' $P2426 = "324_1337966785.387" 
    capture_lex $P2426
    .const 'Sub' $P2286 = "314_1337966785.387" 
    capture_lex $P2286
    .const 'Sub' $P2257 = "313_1337966785.387" 
    capture_lex $P2257
    .const 'Sub' $P1587 = "273_1337966785.387" 
    capture_lex $P1587
    .const 'Sub' $P1340 = "261_1337966785.387" 
    capture_lex $P1340
    .const 'Sub' $P1007 = "180_1337966785.387" 
    capture_lex $P1007
.annotate 'line', 1
    .lex "@ARGS", param_1002
    .lex "GLOBALish", $P1003
    .lex "$?PACKAGE", $P1004
.annotate 'line', 1699
    new $P100, "Undef"
    set $P1005, $P100
    .lex "$compiler", $P1005
.annotate 'line', 1031
    load_bytecode "Parrot/Exception.pbc"
.annotate 'line', 1030
    $P0 = find_dynamic_lex "$*CTXSAVE"
    if null $P0 goto ctxsave_done
    $I0 = can $P0, "ctxsave"
    unless $I0 goto ctxsave_done
    $P0."ctxsave"()
  ctxsave_done:
.annotate 'line', 7
    .const 'Sub' $P1007 = "180_1337966785.387" 
    capture_lex $P1007
    $P1007()
.annotate 'line', 845
    .const 'Sub' $P1340 = "261_1337966785.387" 
    capture_lex $P1340
    $P1340()
.annotate 'line', 1038
    .const 'Sub' $P1587 = "273_1337966785.387" 
    capture_lex $P1587
    $P1587()
.annotate 'line', 1699
    get_hll_global $P101, "GLOBAL"
    nqp_get_package_through_who $P102, $P101, "HLL"
    get_who $P103, $P102
    set $P104, $P103["Compiler"]
    $P105 = $P104."new"()
    set $P1005, $P105
.annotate 'line', 1700
    set $P101, $P1005
    unless_null $P101, vivify_1004
    new $P101, "Undef"
  vivify_1004:
    $P101."language"("parrot")
.annotate 'line', 1794
    .const 'Sub' $P2257 = "313_1337966785.387" 
    capture_lex $P2257
    $P2257()
.annotate 'line', 1825
    .const 'Sub' $P2286 = "314_1337966785.387" 
    capture_lex $P2286
    $P2286()
.annotate 'line', 2016
    .const 'Sub' $P2426 = "324_1337966785.387" 
    capture_lex $P2426
    $P2426()
.annotate 'line', 1
    set $P102, param_1002
    if $P102, if_2543
    set $P101, $P102
    goto if_2543_end
  if_2543:
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P103, "ModuleLoader"
    getinterp $P104
    set $P105, $P104["context"]
    $P106 = $P103."set_mainline_module"($P105)
    set $P101, $P106
  if_2543_end:
    .return ($P101)
.annotate 'line', 1030
    .const 'Sub' $P2545 = "327_1337966785.387" 
.annotate 'line', 1
    .return ($P2545)
.end


.HLL "nqp"

.namespace []
.sub "" :load :init :subid("post329") :outer("179_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 0
    .const 'Sub' $P1001 = "179_1337966785.387" 
    .local pmc block
    set block, $P1001
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P108
    get_class $P109, "LexPad"
    get_class $P110, "NQPLexPad"
    $P108."hll_map"($P109, $P110)
    nqp_create_sc $P111, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134"
    .local pmc cur_sc
    set cur_sc, $P111
    cur_sc."set_description"("src\\stage2\\gen\\NQPHLL.pm")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P112, "ModuleLoader"
    $P113 = $P112."load_setting"("NQPCORE")
    block."set_outer_ctx"($P113)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P112, "ModuleLoader"
    $P112."load_module"("QRegex")
    set $S100, ""
    new $P112, "ResizableStringArray"
    .local pmc string_heap
    set string_heap, $P112
    null $S101
    push string_heap, $S101
    push string_heap, "P6opaque"
    push string_heap, "QRegex"
    push string_heap, "NQPCursorRole"
    push string_heap, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337966781.579"
    push string_heap, "src\\stage2\\QRegex.nqp"
    push string_heap, "NQPMatch"
    push string_heap, "NQPCursor"
    push string_heap, "NQPRegexMethod"
    push string_heap, "NQPRegex"
    push string_heap, "HLL"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "2DEE75AFD50ED67BDF162F6BA56A80FA8956D48C-1337966780.537"
    push string_heap, "src\\stage2\\NQPCORE.setting"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "MATCH"
    push string_heap, "Bool"
    push string_heap, "parse"
    push string_heap, "!INTERPOLATE"
    push string_heap, "!INTERPOLATE_REGEX"
    push string_heap, "target"
    push string_heap, "from"
    push string_heap, "pos"
    push string_heap, "CAPHASH"
    push string_heap, "!cursor_init"
    push string_heap, "!cursor_start"
    push string_heap, "!cursor_start_subcapture"
    push string_heap, "!cursor_capture"
    push string_heap, "!cursor_push_cstack"
    push string_heap, "!cursor_pass"
    push string_heap, "!cursor_fail"
    push string_heap, "!cursor_next"
    push string_heap, "!reduce"
    push string_heap, "!reduce_with_match"
    push string_heap, "!protoregex"
    push string_heap, "!protoregex_nfa"
    push string_heap, "!protoregex_table"
    push string_heap, "!BACKREF"
    push string_heap, "!LITERAL"
    push string_heap, "at"
    push string_heap, "before"
    push string_heap, "after"
    push string_heap, "ws"
    push string_heap, "ww"
    push string_heap, "wb"
    push string_heap, "ident"
    push string_heap, "alpha"
    push string_heap, "alnum"
    push string_heap, "upper"
    push string_heap, "lower"
    push string_heap, "digit"
    push string_heap, "xdigit"
    push string_heap, "space"
    push string_heap, "blank"
    push string_heap, "cntrl"
    push string_heap, "punct"
    push string_heap, "FAILGOAL"
    push string_heap, "termish"
    push string_heap, "term"
    push string_heap, "infix"
    push string_heap, "prefix"
    push string_heap, "postfix"
    push string_heap, "circumfix"
    push string_heap, "postcircumfix"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "infixish"
    push string_heap, "prefixish"
    push string_heap, "postfixish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "nulltermish"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "decint"
    push string_heap, "decints"
    push string_heap, "hexint"
    push string_heap, "hexints"
    push string_heap, "octint"
    push string_heap, "octints"
    push string_heap, "binint"
    push string_heap, "binints"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "escale"
    push string_heap, "quote_escape"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "O"
    push string_heap, "panic"
    push string_heap, "peek_delimiters"
    push string_heap, "quote_EXPR"
    push string_heap, "quotemod_check"
    push string_heap, "starter"
    push string_heap, "stopper"
    push string_heap, "split_words"
    push string_heap, "EXPR"
    push string_heap, "EXPR_reduce"
    push string_heap, "ternary"
    push string_heap, "MARKER"
    push string_heap, "MARKED"
    push string_heap, "LANG"
    push string_heap, "$!orig"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!name"
    push string_heap, "$!bstack"
    push string_heap, "$!cstack"
    push string_heap, "$!regexsub"
    push string_heap, "$!restart"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "ints_to_string"
    push string_heap, "CTXSAVE"
    push string_heap, "SET_BLOCK_OUTER_CTX"
    push string_heap, "EXPR"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "termish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "decint"
    push string_heap, "hexint"
    push string_heap, "octint"
    push string_heap, "binint"
    push string_heap, "quote_EXPR"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "BUILD"
    push string_heap, "get_exports"
    push string_heap, "get_module"
    push string_heap, "language"
    push string_heap, "compiler"
    push string_heap, "config"
    push string_heap, "load_module"
    push string_heap, "import"
    push string_heap, "autoprint"
    push string_heap, "interactive"
    push string_heap, "eval"
    push string_heap, "ctxsave"
    push string_heap, "panic"
    push string_heap, "stages"
    push string_heap, "parsegrammar"
    push string_heap, "parseactions"
    push string_heap, "interactive_banner"
    push string_heap, "interactive_prompt"
    push string_heap, "compiler_progname"
    push string_heap, "commandline_options"
    push string_heap, "command_line"
    push string_heap, "command_eval"
    push string_heap, "process_args"
    push string_heap, "evalfiles"
    push string_heap, "compile"
    push string_heap, "parse"
    push string_heap, "past"
    push string_heap, "post"
    push string_heap, "pirbegin"
    push string_heap, "pir"
    push string_heap, "evalpmc"
    push string_heap, "dumper"
    push string_heap, "usage"
    push string_heap, "version"
    push string_heap, "show-config"
    push string_heap, "nqpevent"
    push string_heap, "removestage"
    push string_heap, "addstage"
    push string_heap, "parse_name"
    push string_heap, "lineof"
    push string_heap, "@!stages"
    push string_heap, "$!parsegrammar"
    push string_heap, "$!parseactions"
    push string_heap, "@!cmdoptions"
    push string_heap, "$!usage"
    push string_heap, "$!compiler_progname"
    push string_heap, "$!language"
    push string_heap, "%!config"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "init"
    push string_heap, "arguments"
    push string_heap, "options"
    push string_heap, "add-argument"
    push string_heap, "add-option"
    push string_heap, "@!arguments"
    push string_heap, "%!options"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "stop-after-first-arg"
    push string_heap, "BUILD"
    push string_heap, "add-stopper"
    push string_heap, "split-option-aliases"
    push string_heap, "add-spec"
    push string_heap, "is-option"
    push string_heap, "wants-value"
    push string_heap, "optional-value"
    push string_heap, "parse"
    push string_heap, "@!specs"
    push string_heap, "%!options"
    push string_heap, "%!stopper"
    push string_heap, "$!stop-after-first-arg"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "BUILD"
    push string_heap, "slot_for_object"
    push string_heap, "get_slot_past_for_object"
    push string_heap, "get_slot_past_for_code_ref_at"
    push string_heap, "set_slot_past"
    push string_heap, "set_cur_sc"
    push string_heap, "add_object_to_cur_sc_past"
    push string_heap, "add_object"
    push string_heap, "add_root_code_ref"
    push string_heap, "update_root_code_ref"
    push string_heap, "is_precompilation_mode"
    push string_heap, "add_load_dependency_task"
    push string_heap, "add_fixup_task"
    push string_heap, "get_ref"
    push string_heap, "sc"
    push string_heap, "handle"
    push string_heap, "load_dependency_tasks"
    push string_heap, "fixup_tasks"
    push string_heap, "serialize_and_produce_deserialization_past"
    push string_heap, "$!sc"
    push string_heap, "$!handle"
    push string_heap, "$!precomp_mode"
    push string_heap, "$!num_code_refs"
    push string_heap, "$!code_ref_blocks"
    push string_heap, "@!load_dependency_tasks"
    push string_heap, "@!fixup_tasks"
    push string_heap, "%!addr_to_slot"
    push string_heap, "__6MODEL_CORE__"
    push string_heap, "GLOBALish"
    push string_heap, "5B6BCDEB97207A8A1AF979F9510A88333D9459D9-1337966776.937"
    push string_heap, "src\\stage2\\gen\\nqp-mo.pm"
    push string_heap, "HLL::Grammar"
    push string_heap, "termish"
    push string_heap, "term"
    push string_heap, "infix"
    push string_heap, "prefix"
    push string_heap, "postfix"
    push string_heap, "circumfix"
    push string_heap, "postcircumfix"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "infixish"
    push string_heap, "prefixish"
    push string_heap, "postfixish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "nulltermish"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "decint"
    push string_heap, "decints"
    push string_heap, "hexint"
    push string_heap, "hexints"
    push string_heap, "octint"
    push string_heap, "octints"
    push string_heap, "binint"
    push string_heap, "binints"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "escale"
    push string_heap, "quote_escape"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "O"
    push string_heap, "panic"
    push string_heap, "peek_delimiters"
    push string_heap, "quote_EXPR"
    push string_heap, "quotemod_check"
    push string_heap, "starter"
    push string_heap, "stopper"
    push string_heap, "split_words"
    push string_heap, "EXPR"
    push string_heap, "EXPR_reduce"
    push string_heap, "ternary"
    push string_heap, "MARKER"
    push string_heap, "MARKED"
    push string_heap, "LANG"
    push string_heap, "HLL::Actions"
    push string_heap, "ints_to_string"
    push string_heap, "CTXSAVE"
    push string_heap, "SET_BLOCK_OUTER_CTX"
    push string_heap, "EXPR"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "termish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "decint"
    push string_heap, "hexint"
    push string_heap, "octint"
    push string_heap, "binint"
    push string_heap, "quote_EXPR"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "HLL::Compiler"
    push string_heap, "@!stages"
    push string_heap, "$!parsegrammar"
    push string_heap, "$!parseactions"
    push string_heap, "@!cmdoptions"
    push string_heap, "$!usage"
    push string_heap, "$!compiler_progname"
    push string_heap, "$!language"
    push string_heap, "%!config"
    push string_heap, "new"
    push string_heap, "BUILD"
    push string_heap, "get_exports"
    push string_heap, "get_module"
    push string_heap, "language"
    push string_heap, "compiler"
    push string_heap, "config"
    push string_heap, "load_module"
    push string_heap, "import"
    push string_heap, "autoprint"
    push string_heap, "interactive"
    push string_heap, "eval"
    push string_heap, "ctxsave"
    push string_heap, "panic"
    push string_heap, "stages"
    push string_heap, "parsegrammar"
    push string_heap, "parseactions"
    push string_heap, "interactive_banner"
    push string_heap, "interactive_prompt"
    push string_heap, "compiler_progname"
    push string_heap, "commandline_options"
    push string_heap, "command_line"
    push string_heap, "command_eval"
    push string_heap, "process_args"
    push string_heap, "evalfiles"
    push string_heap, "compile"
    push string_heap, "parse"
    push string_heap, "past"
    push string_heap, "post"
    push string_heap, "pirbegin"
    push string_heap, "pir"
    push string_heap, "evalpmc"
    push string_heap, "dumper"
    push string_heap, "usage"
    push string_heap, "version"
    push string_heap, "show-config"
    push string_heap, "nqpevent"
    push string_heap, "removestage"
    push string_heap, "addstage"
    push string_heap, "parse_name"
    push string_heap, "lineof"
    push string_heap, "HLL::CommandLine::Result"
    push string_heap, "@!arguments"
    push string_heap, "%!options"
    push string_heap, "init"
    push string_heap, "arguments"
    push string_heap, "options"
    push string_heap, "add-argument"
    push string_heap, "add-option"
    push string_heap, "HLL::CommandLine::Parser"
    push string_heap, "@!specs"
    push string_heap, "%!options"
    push string_heap, "%!stopper"
    push string_heap, "$!stop-after-first-arg"
    push string_heap, "new"
    push string_heap, "stop-after-first-arg"
    push string_heap, "BUILD"
    push string_heap, "add-stopper"
    push string_heap, "split-option-aliases"
    push string_heap, "add-spec"
    push string_heap, "is-option"
    push string_heap, "wants-value"
    push string_heap, "optional-value"
    push string_heap, "parse"
    push string_heap, "HLL::World"
    push string_heap, "$!sc"
    push string_heap, "$!handle"
    push string_heap, "$!precomp_mode"
    push string_heap, "$!num_code_refs"
    push string_heap, "$!code_ref_blocks"
    push string_heap, "@!load_dependency_tasks"
    push string_heap, "@!fixup_tasks"
    push string_heap, "%!addr_to_slot"
    push string_heap, "new"
    push string_heap, "BUILD"
    push string_heap, "slot_for_object"
    push string_heap, "get_slot_past_for_object"
    push string_heap, "get_slot_past_for_code_ref_at"
    push string_heap, "set_slot_past"
    push string_heap, "set_cur_sc"
    push string_heap, "add_object_to_cur_sc_past"
    push string_heap, "add_object"
    push string_heap, "add_root_code_ref"
    push string_heap, "update_root_code_ref"
    push string_heap, "is_precompilation_mode"
    push string_heap, "add_load_dependency_task"
    push string_heap, "add_fixup_task"
    push string_heap, "get_ref"
    push string_heap, "sc"
    push string_heap, "handle"
    push string_heap, "load_dependency_tasks"
    push string_heap, "fixup_tasks"
    push string_heap, "serialize_and_produce_deserialization_past"
    push string_heap, "P6opaque"
    push string_heap, "NFA"
    push string_heap, "P6opaque"
    push string_heap, "Grammar"
    push string_heap, "Actions"
    push string_heap, "Compiler"
    push string_heap, "CommandLine"
    push string_heap, "World"
    push string_heap, "@!stages"
    push string_heap, "$!parsegrammar"
    push string_heap, "$!parseactions"
    push string_heap, "@!cmdoptions"
    push string_heap, "$!usage"
    push string_heap, "$!compiler_progname"
    push string_heap, "$!language"
    push string_heap, "%!config"
    push string_heap, "@!arguments"
    push string_heap, "%!options"
    push string_heap, "@!specs"
    push string_heap, "%!options"
    push string_heap, "%!stopper"
    push string_heap, "$!stop-after-first-arg"
    push string_heap, "$!sc"
    push string_heap, "$!handle"
    push string_heap, "$!precomp_mode"
    push string_heap, "$!num_code_refs"
    push string_heap, "$!code_ref_blocks"
    push string_heap, "@!load_dependency_tasks"
    push string_heap, "@!fixup_tasks"
    push string_heap, "%!addr_to_slot"
    push string_heap, "QRegex"
    push string_heap, "HLL"
    push string_heap, "P6opaque"
    push string_heap, "Result"
    push string_heap, "Parser"
    push string_heap, "CommandLine"
    .const 'Sub' $P2548 = "328_1337966785.387" 
    capture_lex $P2548
    $P114 = $P2548()
    nqp_deserialize_sc $S100, cur_sc, string_heap, $P114
    .const 'LexInfo' $P2716 = "179_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 0
    $P2716."set_static_lexpad_value"("GLOBALish", $P115)
    .const 'LexInfo' $P2717 = "179_1337966785.387" 
    $P2717."finish_static_lexpad"()
    .const 'LexInfo' $P2718 = "179_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 0
    $P2718."set_static_lexpad_value"("$?PACKAGE", $P115)
    .const 'LexInfo' $P2719 = "179_1337966785.387" 
    $P2719."finish_static_lexpad"()
    .const '' $P2720 = "10_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 2
    set_sub_code_object $P2720, $P115
    .const '' $P2721 = "11_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 3
    set_sub_code_object $P2721, $P115
    .const '' $P2722 = "12_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 4
    set_sub_code_object $P2722, $P115
    .const '' $P2723 = "13_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 5
    set_sub_code_object $P2723, $P115
    .const '' $P2724 = "14_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 6
    set_sub_code_object $P2724, $P115
    .const '' $P2725 = "15_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 7
    set_sub_code_object $P2725, $P115
    .const '' $P2726 = "16_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 8
    set_sub_code_object $P2726, $P115
    .const '' $P2727 = "17_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 9
    set_sub_code_object $P2727, $P115
    .const '' $P2728 = "18_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 10
    set_sub_code_object $P2728, $P115
    .const '' $P2729 = "19_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 11
    set_sub_code_object $P2729, $P115
    .const '' $P2730 = "20_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 12
    set_sub_code_object $P2730, $P115
    .const '' $P2731 = "21_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 13
    set_sub_code_object $P2731, $P115
    .const '' $P2732 = "22_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 14
    set_sub_code_object $P2732, $P115
    .const '' $P2733 = "23_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 15
    set_sub_code_object $P2733, $P115
    .const '' $P2734 = "24_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 16
    set_sub_code_object $P2734, $P115
    .const '' $P2735 = "25_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 17
    set_sub_code_object $P2735, $P115
    .const '' $P2736 = "26_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 18
    set_sub_code_object $P2736, $P115
    .const '' $P2737 = "27_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 19
    set_sub_code_object $P2737, $P115
    .const '' $P2738 = "28_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 20
    set_sub_code_object $P2738, $P115
    .const '' $P2739 = "29_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 21
    set_sub_code_object $P2739, $P115
    .const '' $P2740 = "30_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 22
    set_sub_code_object $P2740, $P115
    .const '' $P2741 = "31_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 23
    set_sub_code_object $P2741, $P115
    .const '' $P2742 = "32_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 24
    set_sub_code_object $P2742, $P115
    .const '' $P2743 = "33_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 25
    set_sub_code_object $P2743, $P115
    .const '' $P2744 = "34_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 26
    set_sub_code_object $P2744, $P115
    .const '' $P2745 = "35_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 27
    set_sub_code_object $P2745, $P115
    .const '' $P2746 = "36_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 28
    set_sub_code_object $P2746, $P115
    .const '' $P2747 = "37_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 29
    set_sub_code_object $P2747, $P115
    .const '' $P2748 = "38_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 30
    set_sub_code_object $P2748, $P115
    .const '' $P2749 = "39_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 31
    set_sub_code_object $P2749, $P115
    .const '' $P2750 = "40_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 32
    set_sub_code_object $P2750, $P115
    .const '' $P2751 = "41_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 33
    set_sub_code_object $P2751, $P115
    .const '' $P2752 = "42_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 34
    set_sub_code_object $P2752, $P115
    .const '' $P2753 = "43_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 35
    set_sub_code_object $P2753, $P115
    .const '' $P2754 = "44_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 36
    set_sub_code_object $P2754, $P115
    .const '' $P2755 = "45_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 37
    set_sub_code_object $P2755, $P115
    .const '' $P2756 = "46_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 38
    set_sub_code_object $P2756, $P115
    .const '' $P2757 = "47_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 39
    set_sub_code_object $P2757, $P115
    .const '' $P2758 = "48_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 40
    set_sub_code_object $P2758, $P115
    .const '' $P2759 = "49_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 41
    set_sub_code_object $P2759, $P115
    .const '' $P2760 = "51_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 42
    set_sub_code_object $P2760, $P115
    .const '' $P2761 = "53_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 43
    set_sub_code_object $P2761, $P115
    .const '' $P2762 = "54_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 44
    set_sub_code_object $P2762, $P115
    .const '' $P2763 = "55_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 45
    set_sub_code_object $P2763, $P115
    .const '' $P2764 = "56_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 46
    set_sub_code_object $P2764, $P115
    .const '' $P2765 = "57_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 47
    set_sub_code_object $P2765, $P115
    .const '' $P2766 = "58_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 48
    set_sub_code_object $P2766, $P115
    .const '' $P2767 = "59_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 49
    set_sub_code_object $P2767, $P115
    .const '' $P2768 = "60_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 50
    set_sub_code_object $P2768, $P115
    .const '' $P2769 = "61_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 51
    set_sub_code_object $P2769, $P115
    .const '' $P2770 = "62_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 52
    set_sub_code_object $P2770, $P115
    .const '' $P2771 = "63_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 53
    set_sub_code_object $P2771, $P115
    .const '' $P2772 = "63_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 1
    get_who $P116, $P115
    set $P116["split_words"], $P2772
    .const '' $P2773 = "64_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 54
    set_sub_code_object $P2773, $P115
    .const '' $P2774 = "65_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 55
    set_sub_code_object $P2774, $P115
    .const '' $P2775 = "66_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 56
    set_sub_code_object $P2775, $P115
    .const '' $P2776 = "67_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 57
    set_sub_code_object $P2776, $P115
    .const '' $P2777 = "68_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 58
    set_sub_code_object $P2777, $P115
    .const '' $P2778 = "69_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 59
    set_sub_code_object $P2778, $P115
    .const 'LexInfo' $P2779 = "180_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 1
    $P2779."set_static_lexpad_value"("$?PACKAGE", $P115)
    .const 'LexInfo' $P2780 = "180_1337966785.387" 
    $P2780."finish_static_lexpad"()
    .const 'LexInfo' $P2781 = "180_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 1
    $P2781."set_static_lexpad_value"("$?CLASS", $P115)
    .const 'LexInfo' $P2782 = "180_1337966785.387" 
    $P2782."finish_static_lexpad"()
    .const '' $P2783 = "262_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 60
    get_who $P116, $P115
    set $P116["string_to_int"], $P2783
    .const '' $P2784 = "70_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 61
    set_sub_code_object $P2784, $P115
    .const '' $P2785 = "71_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 62
    set_sub_code_object $P2785, $P115
    .const '' $P2786 = "72_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 63
    set_sub_code_object $P2786, $P115
    .const '' $P2787 = "73_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 64
    set_sub_code_object $P2787, $P115
    .const '' $P2788 = "74_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 65
    set_sub_code_object $P2788, $P115
    .const '' $P2789 = "75_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 66
    set_sub_code_object $P2789, $P115
    .const '' $P2790 = "76_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 67
    set_sub_code_object $P2790, $P115
    .const '' $P2791 = "77_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 68
    set_sub_code_object $P2791, $P115
    .const '' $P2792 = "78_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 69
    set_sub_code_object $P2792, $P115
    .const '' $P2793 = "79_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 70
    set_sub_code_object $P2793, $P115
    .const '' $P2794 = "80_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 71
    set_sub_code_object $P2794, $P115
    .const '' $P2795 = "81_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 72
    set_sub_code_object $P2795, $P115
    .const '' $P2796 = "82_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 73
    set_sub_code_object $P2796, $P115
    .const '' $P2797 = "83_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 74
    set_sub_code_object $P2797, $P115
    .const '' $P2798 = "84_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 75
    set_sub_code_object $P2798, $P115
    .const '' $P2799 = "85_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 76
    set_sub_code_object $P2799, $P115
    .const '' $P2800 = "86_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 77
    set_sub_code_object $P2800, $P115
    .const '' $P2801 = "87_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 78
    set_sub_code_object $P2801, $P115
    .const '' $P2802 = "88_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 79
    set_sub_code_object $P2802, $P115
    .const '' $P2803 = "89_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 80
    set_sub_code_object $P2803, $P115
    .const '' $P2804 = "90_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 81
    set_sub_code_object $P2804, $P115
    .const '' $P2805 = "91_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 82
    set_sub_code_object $P2805, $P115
    .const '' $P2806 = "92_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 83
    set_sub_code_object $P2806, $P115
    .const '' $P2807 = "93_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 84
    set_sub_code_object $P2807, $P115
    .const '' $P2808 = "94_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 85
    set_sub_code_object $P2808, $P115
    .const '' $P2809 = "95_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 86
    set_sub_code_object $P2809, $P115
    .const '' $P2810 = "96_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 87
    set_sub_code_object $P2810, $P115
    .const '' $P2811 = "97_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 88
    set_sub_code_object $P2811, $P115
    .const '' $P2812 = "98_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 89
    set_sub_code_object $P2812, $P115
    .const '' $P2813 = "99_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 90
    set_sub_code_object $P2813, $P115
    .const '' $P2814 = "100_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 91
    set_sub_code_object $P2814, $P115
    .const '' $P2815 = "101_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 92
    set_sub_code_object $P2815, $P115
    .const '' $P2816 = "102_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 93
    set_sub_code_object $P2816, $P115
    .const 'LexInfo' $P2817 = "261_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 60
    $P2817."set_static_lexpad_value"("$?PACKAGE", $P115)
    .const 'LexInfo' $P2818 = "261_1337966785.387" 
    $P2818."finish_static_lexpad"()
    .const 'LexInfo' $P2819 = "261_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 60
    $P2819."set_static_lexpad_value"("$?CLASS", $P115)
    .const 'LexInfo' $P2820 = "261_1337966785.387" 
    $P2820."finish_static_lexpad"()
    .const '' $P2821 = "103_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 95
    set_sub_code_object $P2821, $P115
    .const '' $P2822 = "104_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 96
    set_sub_code_object $P2822, $P115
    .const '' $P2823 = "105_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 97
    set_sub_code_object $P2823, $P115
    .const '' $P2824 = "106_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 98
    set_sub_code_object $P2824, $P115
    .const '' $P2825 = "107_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 99
    set_sub_code_object $P2825, $P115
    .const '' $P2826 = "108_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 100
    set_sub_code_object $P2826, $P115
    .const '' $P2827 = "109_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 101
    set_sub_code_object $P2827, $P115
    .const '' $P2828 = "110_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 102
    set_sub_code_object $P2828, $P115
    .const '' $P2829 = "111_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 103
    set_sub_code_object $P2829, $P115
    .const '' $P2830 = "112_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 104
    set_sub_code_object $P2830, $P115
    .const '' $P2831 = "113_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 105
    set_sub_code_object $P2831, $P115
    .const '' $P2832 = "114_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 106
    set_sub_code_object $P2832, $P115
    .const '' $P2833 = "115_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 107
    set_sub_code_object $P2833, $P115
    .const '' $P2834 = "116_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 108
    set_sub_code_object $P2834, $P115
    .const '' $P2835 = "117_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 109
    set_sub_code_object $P2835, $P115
    .const '' $P2836 = "118_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 110
    set_sub_code_object $P2836, $P115
    .const '' $P2837 = "119_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 111
    set_sub_code_object $P2837, $P115
    .const '' $P2838 = "120_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 112
    set_sub_code_object $P2838, $P115
    .const '' $P2839 = "121_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 113
    set_sub_code_object $P2839, $P115
    .const '' $P2840 = "122_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 114
    set_sub_code_object $P2840, $P115
    .const '' $P2841 = "123_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 115
    set_sub_code_object $P2841, $P115
    .const '' $P2842 = "124_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 116
    set_sub_code_object $P2842, $P115
    .const '' $P2843 = "125_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 117
    set_sub_code_object $P2843, $P115
    .const '' $P2844 = "126_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 118
    set_sub_code_object $P2844, $P115
    .const '' $P2845 = "127_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 119
    set_sub_code_object $P2845, $P115
    .const '' $P2846 = "128_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 120
    set_sub_code_object $P2846, $P115
    .const '' $P2847 = "129_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 121
    set_sub_code_object $P2847, $P115
    .const '' $P2848 = "130_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 122
    set_sub_code_object $P2848, $P115
    .const '' $P2849 = "131_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 123
    set_sub_code_object $P2849, $P115
    .const '' $P2850 = "132_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 124
    set_sub_code_object $P2850, $P115
    .const '' $P2851 = "133_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 125
    set_sub_code_object $P2851, $P115
    .const '' $P2852 = "134_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 126
    set_sub_code_object $P2852, $P115
    .const '' $P2853 = "135_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 127
    set_sub_code_object $P2853, $P115
    .const '' $P2854 = "136_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 128
    set_sub_code_object $P2854, $P115
    .const '' $P2855 = "137_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 129
    set_sub_code_object $P2855, $P115
    .const '' $P2856 = "138_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 130
    set_sub_code_object $P2856, $P115
    .const '' $P2857 = "139_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 131
    set_sub_code_object $P2857, $P115
    .const '' $P2858 = "140_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 132
    set_sub_code_object $P2858, $P115
    .const '' $P2859 = "141_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 133
    set_sub_code_object $P2859, $P115
    .const '' $P2860 = "142_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 134
    set_sub_code_object $P2860, $P115
    .const '' $P2861 = "143_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 135
    set_sub_code_object $P2861, $P115
    .const 'LexInfo' $P2862 = "273_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    $P2862."set_static_lexpad_value"("$?PACKAGE", $P115)
    .const 'LexInfo' $P2863 = "273_1337966785.387" 
    $P2863."finish_static_lexpad"()
    .const 'LexInfo' $P2864 = "273_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    $P2864."set_static_lexpad_value"("$?CLASS", $P115)
    .const 'LexInfo' $P2865 = "273_1337966785.387" 
    $P2865."finish_static_lexpad"()
    .const '' $P2866 = "144_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 137
    set_sub_code_object $P2866, $P115
    .const '' $P2867 = "145_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 138
    set_sub_code_object $P2867, $P115
    .const '' $P2868 = "146_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 139
    set_sub_code_object $P2868, $P115
    .const '' $P2869 = "147_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 140
    set_sub_code_object $P2869, $P115
    .const '' $P2870 = "148_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 141
    set_sub_code_object $P2870, $P115
    .const 'LexInfo' $P2871 = "313_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 136
    $P2871."set_static_lexpad_value"("$?PACKAGE", $P115)
    .const 'LexInfo' $P2872 = "313_1337966785.387" 
    $P2872."finish_static_lexpad"()
    .const 'LexInfo' $P2873 = "313_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 136
    $P2873."set_static_lexpad_value"("$?CLASS", $P115)
    .const 'LexInfo' $P2874 = "313_1337966785.387" 
    $P2874."finish_static_lexpad"()
    .const '' $P2875 = "149_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 143
    set_sub_code_object $P2875, $P115
    .const '' $P2876 = "150_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 144
    set_sub_code_object $P2876, $P115
    .const '' $P2877 = "151_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 145
    set_sub_code_object $P2877, $P115
    .const '' $P2878 = "152_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 146
    set_sub_code_object $P2878, $P115
    .const '' $P2879 = "153_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 147
    set_sub_code_object $P2879, $P115
    .const '' $P2880 = "154_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 148
    set_sub_code_object $P2880, $P115
    .const '' $P2881 = "155_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 149
    set_sub_code_object $P2881, $P115
    .const '' $P2882 = "156_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 150
    set_sub_code_object $P2882, $P115
    .const '' $P2883 = "157_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 151
    set_sub_code_object $P2883, $P115
    .const '' $P2884 = "158_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 152
    set_sub_code_object $P2884, $P115
    .const 'LexInfo' $P2885 = "314_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 142
    $P2885."set_static_lexpad_value"("$?PACKAGE", $P115)
    .const 'LexInfo' $P2886 = "314_1337966785.387" 
    $P2886."finish_static_lexpad"()
    .const 'LexInfo' $P2887 = "314_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 142
    $P2887."set_static_lexpad_value"("$?CLASS", $P115)
    .const 'LexInfo' $P2888 = "314_1337966785.387" 
    $P2888."finish_static_lexpad"()
    .const '' $P2889 = "159_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 154
    set_sub_code_object $P2889, $P115
    .const '' $P2890 = "160_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 155
    set_sub_code_object $P2890, $P115
    .const '' $P2891 = "161_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 156
    set_sub_code_object $P2891, $P115
    .const '' $P2892 = "162_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 157
    set_sub_code_object $P2892, $P115
    .const '' $P2893 = "163_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 158
    set_sub_code_object $P2893, $P115
    .const '' $P2894 = "164_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 159
    set_sub_code_object $P2894, $P115
    .const '' $P2895 = "165_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 160
    set_sub_code_object $P2895, $P115
    .const '' $P2896 = "166_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 161
    set_sub_code_object $P2896, $P115
    .const '' $P2897 = "167_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 162
    set_sub_code_object $P2897, $P115
    .const '' $P2898 = "168_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 163
    set_sub_code_object $P2898, $P115
    .const '' $P2899 = "169_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 164
    set_sub_code_object $P2899, $P115
    .const '' $P2900 = "170_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 165
    set_sub_code_object $P2900, $P115
    .const '' $P2901 = "171_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 166
    set_sub_code_object $P2901, $P115
    .const '' $P2902 = "172_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 167
    set_sub_code_object $P2902, $P115
    .const '' $P2903 = "173_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 168
    set_sub_code_object $P2903, $P115
    .const '' $P2904 = "174_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 169
    set_sub_code_object $P2904, $P115
    .const '' $P2905 = "175_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 170
    set_sub_code_object $P2905, $P115
    .const '' $P2906 = "176_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 171
    set_sub_code_object $P2906, $P115
    .const '' $P2907 = "177_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 172
    set_sub_code_object $P2907, $P115
    .const '' $P2908 = "178_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 173
    set_sub_code_object $P2908, $P115
    .const 'LexInfo' $P2909 = "324_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    $P2909."set_static_lexpad_value"("$?PACKAGE", $P115)
    .const 'LexInfo' $P2910 = "324_1337966785.387" 
    $P2910."finish_static_lexpad"()
    .const 'LexInfo' $P2911 = "324_1337966785.387" 
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    $P2911."set_static_lexpad_value"("$?CLASS", $P115)
    .const 'LexInfo' $P2912 = "324_1337966785.387" 
    $P2912."finish_static_lexpad"()
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 0
    set_hll_global "GLOBAL", $P115
.end


.HLL "nqp"

.namespace []
.sub "_block2547"  :anon :subid("328_1337966785.387") :outer("179_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 0
    .const 'Sub' $P2549 = "10_1337966785.387" 
    .const 'Sub' $P2550 = "11_1337966785.387" 
    .const 'Sub' $P2551 = "12_1337966785.387" 
    .const 'Sub' $P2552 = "13_1337966785.387" 
    .const 'Sub' $P2553 = "14_1337966785.387" 
    .const 'Sub' $P2554 = "15_1337966785.387" 
    .const 'Sub' $P2555 = "16_1337966785.387" 
    .const 'Sub' $P2556 = "17_1337966785.387" 
    .const 'Sub' $P2557 = "18_1337966785.387" 
    .const 'Sub' $P2558 = "19_1337966785.387" 
    .const 'Sub' $P2559 = "20_1337966785.387" 
    .const 'Sub' $P2560 = "21_1337966785.387" 
    .const 'Sub' $P2561 = "22_1337966785.387" 
    .const 'Sub' $P2562 = "23_1337966785.387" 
    .const 'Sub' $P2563 = "24_1337966785.387" 
    .const 'Sub' $P2564 = "25_1337966785.387" 
    .const 'Sub' $P2565 = "26_1337966785.387" 
    .const 'Sub' $P2566 = "27_1337966785.387" 
    .const 'Sub' $P2567 = "28_1337966785.387" 
    .const 'Sub' $P2568 = "29_1337966785.387" 
    .const 'Sub' $P2569 = "30_1337966785.387" 
    .const 'Sub' $P2570 = "31_1337966785.387" 
    .const 'Sub' $P2571 = "32_1337966785.387" 
    .const 'Sub' $P2572 = "33_1337966785.387" 
    .const 'Sub' $P2573 = "34_1337966785.387" 
    .const 'Sub' $P2574 = "35_1337966785.387" 
    .const 'Sub' $P2575 = "36_1337966785.387" 
    .const 'Sub' $P2576 = "37_1337966785.387" 
    .const 'Sub' $P2577 = "38_1337966785.387" 
    .const 'Sub' $P2578 = "39_1337966785.387" 
    .const 'Sub' $P2579 = "40_1337966785.387" 
    .const 'Sub' $P2580 = "41_1337966785.387" 
    .const 'Sub' $P2581 = "42_1337966785.387" 
    .const 'Sub' $P2582 = "43_1337966785.387" 
    .const 'Sub' $P2583 = "44_1337966785.387" 
    .const 'Sub' $P2584 = "45_1337966785.387" 
    .const 'Sub' $P2585 = "46_1337966785.387" 
    .const 'Sub' $P2586 = "47_1337966785.387" 
    .const 'Sub' $P2587 = "48_1337966785.387" 
    .const 'Sub' $P2588 = "49_1337966785.387" 
    .const 'Sub' $P2589 = "51_1337966785.387" 
    .const 'Sub' $P2590 = "53_1337966785.387" 
    .const 'Sub' $P2591 = "54_1337966785.387" 
    .const 'Sub' $P2592 = "55_1337966785.387" 
    .const 'Sub' $P2593 = "56_1337966785.387" 
    .const 'Sub' $P2594 = "57_1337966785.387" 
    .const 'Sub' $P2595 = "58_1337966785.387" 
    .const 'Sub' $P2596 = "59_1337966785.387" 
    .const 'Sub' $P2597 = "60_1337966785.387" 
    .const 'Sub' $P2598 = "61_1337966785.387" 
    .const 'Sub' $P2599 = "62_1337966785.387" 
    .const 'Sub' $P2600 = "63_1337966785.387" 
    .const 'Sub' $P2601 = "64_1337966785.387" 
    .const 'Sub' $P2602 = "65_1337966785.387" 
    .const 'Sub' $P2603 = "66_1337966785.387" 
    .const 'Sub' $P2604 = "67_1337966785.387" 
    .const 'Sub' $P2605 = "68_1337966785.387" 
    .const 'Sub' $P2606 = "69_1337966785.387" 
    .const 'Sub' $P2607 = "70_1337966785.387" 
    .const 'Sub' $P2608 = "71_1337966785.387" 
    .const 'Sub' $P2609 = "72_1337966785.387" 
    .const 'Sub' $P2610 = "73_1337966785.387" 
    .const 'Sub' $P2611 = "74_1337966785.387" 
    .const 'Sub' $P2612 = "75_1337966785.387" 
    .const 'Sub' $P2613 = "76_1337966785.387" 
    .const 'Sub' $P2614 = "77_1337966785.387" 
    .const 'Sub' $P2615 = "78_1337966785.387" 
    .const 'Sub' $P2616 = "79_1337966785.387" 
    .const 'Sub' $P2617 = "80_1337966785.387" 
    .const 'Sub' $P2618 = "81_1337966785.387" 
    .const 'Sub' $P2619 = "82_1337966785.387" 
    .const 'Sub' $P2620 = "83_1337966785.387" 
    .const 'Sub' $P2621 = "84_1337966785.387" 
    .const 'Sub' $P2622 = "85_1337966785.387" 
    .const 'Sub' $P2623 = "86_1337966785.387" 
    .const 'Sub' $P2624 = "87_1337966785.387" 
    .const 'Sub' $P2625 = "88_1337966785.387" 
    .const 'Sub' $P2626 = "89_1337966785.387" 
    .const 'Sub' $P2627 = "90_1337966785.387" 
    .const 'Sub' $P2628 = "91_1337966785.387" 
    .const 'Sub' $P2629 = "92_1337966785.387" 
    .const 'Sub' $P2630 = "93_1337966785.387" 
    .const 'Sub' $P2631 = "94_1337966785.387" 
    .const 'Sub' $P2632 = "95_1337966785.387" 
    .const 'Sub' $P2633 = "96_1337966785.387" 
    .const 'Sub' $P2634 = "97_1337966785.387" 
    .const 'Sub' $P2635 = "98_1337966785.387" 
    .const 'Sub' $P2636 = "99_1337966785.387" 
    .const 'Sub' $P2637 = "100_1337966785.387" 
    .const 'Sub' $P2638 = "101_1337966785.387" 
    .const 'Sub' $P2639 = "102_1337966785.387" 
    .const 'Sub' $P2640 = "103_1337966785.387" 
    .const 'Sub' $P2641 = "104_1337966785.387" 
    .const 'Sub' $P2642 = "105_1337966785.387" 
    .const 'Sub' $P2643 = "106_1337966785.387" 
    .const 'Sub' $P2644 = "107_1337966785.387" 
    .const 'Sub' $P2645 = "108_1337966785.387" 
    .const 'Sub' $P2646 = "109_1337966785.387" 
    .const 'Sub' $P2647 = "110_1337966785.387" 
    .const 'Sub' $P2648 = "111_1337966785.387" 
    .const 'Sub' $P2649 = "112_1337966785.387" 
    .const 'Sub' $P2650 = "113_1337966785.387" 
    .const 'Sub' $P2651 = "114_1337966785.387" 
    .const 'Sub' $P2652 = "115_1337966785.387" 
    .const 'Sub' $P2653 = "116_1337966785.387" 
    .const 'Sub' $P2654 = "117_1337966785.387" 
    .const 'Sub' $P2655 = "118_1337966785.387" 
    .const 'Sub' $P2656 = "119_1337966785.387" 
    .const 'Sub' $P2657 = "120_1337966785.387" 
    .const 'Sub' $P2658 = "121_1337966785.387" 
    .const 'Sub' $P2659 = "122_1337966785.387" 
    .const 'Sub' $P2660 = "123_1337966785.387" 
    .const 'Sub' $P2661 = "124_1337966785.387" 
    .const 'Sub' $P2662 = "125_1337966785.387" 
    .const 'Sub' $P2663 = "126_1337966785.387" 
    .const 'Sub' $P2664 = "127_1337966785.387" 
    .const 'Sub' $P2665 = "128_1337966785.387" 
    .const 'Sub' $P2666 = "129_1337966785.387" 
    .const 'Sub' $P2667 = "130_1337966785.387" 
    .const 'Sub' $P2668 = "131_1337966785.387" 
    .const 'Sub' $P2669 = "132_1337966785.387" 
    .const 'Sub' $P2670 = "133_1337966785.387" 
    .const 'Sub' $P2671 = "134_1337966785.387" 
    .const 'Sub' $P2672 = "135_1337966785.387" 
    .const 'Sub' $P2673 = "136_1337966785.387" 
    .const 'Sub' $P2674 = "137_1337966785.387" 
    .const 'Sub' $P2675 = "138_1337966785.387" 
    .const 'Sub' $P2676 = "139_1337966785.387" 
    .const 'Sub' $P2677 = "140_1337966785.387" 
    .const 'Sub' $P2678 = "141_1337966785.387" 
    .const 'Sub' $P2679 = "142_1337966785.387" 
    .const 'Sub' $P2680 = "143_1337966785.387" 
    .const 'Sub' $P2681 = "144_1337966785.387" 
    .const 'Sub' $P2682 = "145_1337966785.387" 
    .const 'Sub' $P2683 = "146_1337966785.387" 
    .const 'Sub' $P2684 = "147_1337966785.387" 
    .const 'Sub' $P2685 = "148_1337966785.387" 
    .const 'Sub' $P2686 = "149_1337966785.387" 
    .const 'Sub' $P2687 = "150_1337966785.387" 
    .const 'Sub' $P2688 = "151_1337966785.387" 
    .const 'Sub' $P2689 = "152_1337966785.387" 
    .const 'Sub' $P2690 = "153_1337966785.387" 
    .const 'Sub' $P2691 = "154_1337966785.387" 
    .const 'Sub' $P2692 = "155_1337966785.387" 
    .const 'Sub' $P2693 = "156_1337966785.387" 
    .const 'Sub' $P2694 = "157_1337966785.387" 
    .const 'Sub' $P2695 = "158_1337966785.387" 
    .const 'Sub' $P2696 = "159_1337966785.387" 
    .const 'Sub' $P2697 = "160_1337966785.387" 
    .const 'Sub' $P2698 = "161_1337966785.387" 
    .const 'Sub' $P2699 = "162_1337966785.387" 
    .const 'Sub' $P2700 = "163_1337966785.387" 
    .const 'Sub' $P2701 = "164_1337966785.387" 
    .const 'Sub' $P2702 = "165_1337966785.387" 
    .const 'Sub' $P2703 = "166_1337966785.387" 
    .const 'Sub' $P2704 = "167_1337966785.387" 
    .const 'Sub' $P2705 = "168_1337966785.387" 
    .const 'Sub' $P2706 = "169_1337966785.387" 
    .const 'Sub' $P2707 = "170_1337966785.387" 
    .const 'Sub' $P2708 = "171_1337966785.387" 
    .const 'Sub' $P2709 = "172_1337966785.387" 
    .const 'Sub' $P2710 = "173_1337966785.387" 
    .const 'Sub' $P2711 = "174_1337966785.387" 
    .const 'Sub' $P2712 = "175_1337966785.387" 
    .const 'Sub' $P2713 = "176_1337966785.387" 
    .const 'Sub' $P2714 = "177_1337966785.387" 
    .const 'Sub' $P2715 = "178_1337966785.387" 
    new $P113, "ResizablePMCArray"
    push $P113, $P2549
    push $P113, $P2550
    push $P113, $P2551
    push $P113, $P2552
    push $P113, $P2553
    push $P113, $P2554
    push $P113, $P2555
    push $P113, $P2556
    push $P113, $P2557
    push $P113, $P2558
    push $P113, $P2559
    push $P113, $P2560
    push $P113, $P2561
    push $P113, $P2562
    push $P113, $P2563
    push $P113, $P2564
    push $P113, $P2565
    push $P113, $P2566
    push $P113, $P2567
    push $P113, $P2568
    push $P113, $P2569
    push $P113, $P2570
    push $P113, $P2571
    push $P113, $P2572
    push $P113, $P2573
    push $P113, $P2574
    push $P113, $P2575
    push $P113, $P2576
    push $P113, $P2577
    push $P113, $P2578
    push $P113, $P2579
    push $P113, $P2580
    push $P113, $P2581
    push $P113, $P2582
    push $P113, $P2583
    push $P113, $P2584
    push $P113, $P2585
    push $P113, $P2586
    push $P113, $P2587
    push $P113, $P2588
    push $P113, $P2589
    push $P113, $P2590
    push $P113, $P2591
    push $P113, $P2592
    push $P113, $P2593
    push $P113, $P2594
    push $P113, $P2595
    push $P113, $P2596
    push $P113, $P2597
    push $P113, $P2598
    push $P113, $P2599
    push $P113, $P2600
    push $P113, $P2601
    push $P113, $P2602
    push $P113, $P2603
    push $P113, $P2604
    push $P113, $P2605
    push $P113, $P2606
    push $P113, $P2607
    push $P113, $P2608
    push $P113, $P2609
    push $P113, $P2610
    push $P113, $P2611
    push $P113, $P2612
    push $P113, $P2613
    push $P113, $P2614
    push $P113, $P2615
    push $P113, $P2616
    push $P113, $P2617
    push $P113, $P2618
    push $P113, $P2619
    push $P113, $P2620
    push $P113, $P2621
    push $P113, $P2622
    push $P113, $P2623
    push $P113, $P2624
    push $P113, $P2625
    push $P113, $P2626
    push $P113, $P2627
    push $P113, $P2628
    push $P113, $P2629
    push $P113, $P2630
    push $P113, $P2631
    push $P113, $P2632
    push $P113, $P2633
    push $P113, $P2634
    push $P113, $P2635
    push $P113, $P2636
    push $P113, $P2637
    push $P113, $P2638
    push $P113, $P2639
    push $P113, $P2640
    push $P113, $P2641
    push $P113, $P2642
    push $P113, $P2643
    push $P113, $P2644
    push $P113, $P2645
    push $P113, $P2646
    push $P113, $P2647
    push $P113, $P2648
    push $P113, $P2649
    push $P113, $P2650
    push $P113, $P2651
    push $P113, $P2652
    push $P113, $P2653
    push $P113, $P2654
    push $P113, $P2655
    push $P113, $P2656
    push $P113, $P2657
    push $P113, $P2658
    push $P113, $P2659
    push $P113, $P2660
    push $P113, $P2661
    push $P113, $P2662
    push $P113, $P2663
    push $P113, $P2664
    push $P113, $P2665
    push $P113, $P2666
    push $P113, $P2667
    push $P113, $P2668
    push $P113, $P2669
    push $P113, $P2670
    push $P113, $P2671
    push $P113, $P2672
    push $P113, $P2673
    push $P113, $P2674
    push $P113, $P2675
    push $P113, $P2676
    push $P113, $P2677
    push $P113, $P2678
    push $P113, $P2679
    push $P113, $P2680
    push $P113, $P2681
    push $P113, $P2682
    push $P113, $P2683
    push $P113, $P2684
    push $P113, $P2685
    push $P113, $P2686
    push $P113, $P2687
    push $P113, $P2688
    push $P113, $P2689
    push $P113, $P2690
    push $P113, $P2691
    push $P113, $P2692
    push $P113, $P2693
    push $P113, $P2694
    push $P113, $P2695
    push $P113, $P2696
    push $P113, $P2697
    push $P113, $P2698
    push $P113, $P2699
    push $P113, $P2700
    push $P113, $P2701
    push $P113, $P2702
    push $P113, $P2703
    push $P113, $P2704
    push $P113, $P2705
    push $P113, $P2706
    push $P113, $P2707
    push $P113, $P2708
    push $P113, $P2709
    push $P113, $P2710
    push $P113, $P2711
    push $P113, $P2712
    push $P113, $P2713
    push $P113, $P2714
    push $P113, $P2715
    .return ($P113)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "_block1006"  :subid("180_1337966785.387") :outer("179_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 7
    .const 'Sub' $P1332 = "69_1337966785.387" 
    capture_lex $P1332
    .const 'Sub' $P1328 = "68_1337966785.387" 
    capture_lex $P1328
    .const 'Sub' $P1319 = "67_1337966785.387" 
    capture_lex $P1319
    .const 'Sub' $P1311 = "66_1337966785.387" 
    capture_lex $P1311
    .const 'Sub' $P1307 = "65_1337966785.387" 
    capture_lex $P1307
    .const 'Sub' $P1304 = "64_1337966785.387" 
    capture_lex $P1304
    .const 'Sub' $P1301 = "63_1337966785.387" 
    capture_lex $P1301
    .const 'Sub' $P1299 = "62_1337966785.387" 
    capture_lex $P1299
    .const 'Sub' $P1297 = "61_1337966785.387" 
    capture_lex $P1297
    .const 'Sub' $P1288 = "60_1337966785.387" 
    capture_lex $P1288
    .const 'Sub' $P1275 = "59_1337966785.387" 
    capture_lex $P1275
    .const 'Sub' $P1271 = "58_1337966785.387" 
    capture_lex $P1271
    .const 'Sub' $P1260 = "57_1337966785.387" 
    capture_lex $P1260
    .const 'Sub' $P1256 = "56_1337966785.387" 
    capture_lex $P1256
    .const 'Sub' $P1250 = "55_1337966785.387" 
    capture_lex $P1250
    .const 'Sub' $P1244 = "54_1337966785.387" 
    capture_lex $P1244
    .const 'Sub' $P1234 = "53_1337966785.387" 
    capture_lex $P1234
    .const 'Sub' $P1219 = "51_1337966785.387" 
    capture_lex $P1219
    .const 'Sub' $P1213 = "49_1337966785.387" 
    capture_lex $P1213
    .const 'Sub' $P1207 = "48_1337966785.387" 
    capture_lex $P1207
    .const 'Sub' $P1201 = "47_1337966785.387" 
    capture_lex $P1201
    .const 'Sub' $P1195 = "46_1337966785.387" 
    capture_lex $P1195
    .const 'Sub' $P1189 = "45_1337966785.387" 
    capture_lex $P1189
    .const 'Sub' $P1183 = "44_1337966785.387" 
    capture_lex $P1183
    .const 'Sub' $P1177 = "43_1337966785.387" 
    capture_lex $P1177
    .const 'Sub' $P1171 = "42_1337966785.387" 
    capture_lex $P1171
    .const 'Sub' $P1165 = "41_1337966785.387" 
    capture_lex $P1165
    .const 'Sub' $P1159 = "40_1337966785.387" 
    capture_lex $P1159
    .const 'Sub' $P1153 = "39_1337966785.387" 
    capture_lex $P1153
    .const 'Sub' $P1147 = "38_1337966785.387" 
    capture_lex $P1147
    .const 'Sub' $P1139 = "36_1337966785.387" 
    capture_lex $P1139
    .const 'Sub' $P1133 = "35_1337966785.387" 
    capture_lex $P1133
    .const 'Sub' $P1127 = "34_1337966785.387" 
    capture_lex $P1127
    .const 'Sub' $P1121 = "33_1337966785.387" 
    capture_lex $P1121
    .const 'Sub' $P1115 = "32_1337966785.387" 
    capture_lex $P1115
    .const 'Sub' $P1109 = "31_1337966785.387" 
    capture_lex $P1109
    .const 'Sub' $P1103 = "30_1337966785.387" 
    capture_lex $P1103
    .const 'Sub' $P1097 = "29_1337966785.387" 
    capture_lex $P1097
    .const 'Sub' $P1091 = "28_1337966785.387" 
    capture_lex $P1091
    .const 'Sub' $P1085 = "27_1337966785.387" 
    capture_lex $P1085
    .const 'Sub' $P1079 = "26_1337966785.387" 
    capture_lex $P1079
    .const 'Sub' $P1074 = "25_1337966785.387" 
    capture_lex $P1074
    .const 'Sub' $P1068 = "24_1337966785.387" 
    capture_lex $P1068
    .const 'Sub' $P1065 = "23_1337966785.387" 
    capture_lex $P1065
    .const 'Sub' $P1059 = "22_1337966785.387" 
    capture_lex $P1059
    .const 'Sub' $P1054 = "21_1337966785.387" 
    capture_lex $P1054
    .const 'Sub' $P1048 = "20_1337966785.387" 
    capture_lex $P1048
    .const 'Sub' $P1042 = "19_1337966785.387" 
    capture_lex $P1042
    .const 'Sub' $P1036 = "18_1337966785.387" 
    capture_lex $P1036
    .const 'Sub' $P1030 = "17_1337966785.387" 
    capture_lex $P1030
    .const 'Sub' $P1012 = "10_1337966785.387" 
    capture_lex $P1012
.annotate 'line', 8
    new $P101, "Undef"
    set $P1008, $P101
    .lex "$brackets", $P1008
.annotate 'line', 9
    new $P102, "Undef"
    set $P1009, $P102
    .lex "$cursor_class", $P1009
    .lex "$?PACKAGE", $P1010
    .lex "$?CLASS", $P1011
.annotate 'line', 8
    new $P103, "String"
    assign $P103, unicode:"<>[](){}\x{ab}\x{bb}\u0f3a\u0f3b\u0f3c\u0f3d\u169b\u169c\u2045\u2046\u207d\u207e\u208d\u208e\u2329\u232a\u2768\u2769\u276a\u276b\u276c\u276d\u276e\u276f\u2770\u2771\u2772\u2773\u2774\u2775\u27c5\u27c6\u27e6\u27e7\u27e8\u27e9\u27ea\u27eb\u2983\u2984\u2985\u2986\u2987\u2988\u2989\u298a\u298b\u298c\u298d\u298e\u298f\u2990\u2991\u2992\u2993\u2994\u2995\u2996\u2997\u2998\u29d8\u29d9\u29da\u29db\u29fc\u29fd\u3008\u3009\u300a\u300b\u300c\u300d\u300e\u300f\u3010\u3011\u3014\u3015\u3016\u3017\u3018\u3019\u301a\u301b\u301d\u301e\ufd3e\ufd3f\ufe17\ufe18\ufe35\ufe36\ufe37\ufe38\ufe39\ufe3a\ufe3b\ufe3c\ufe3d\ufe3e\ufe3f\ufe40\ufe41\ufe42\ufe43\ufe44\ufe47\ufe48\ufe59\ufe5a\ufe5b\ufe5c\ufe5d\ufe5e\uff08\uff09\uff3b\uff3d\uff5b\uff5d\uff5f\uff60\uff62\uff63"
    set $P1008, $P103
.annotate 'line', 9
    set $P103, $P1010
    get_who $P104, $P103
    set $P107, $P104["NQPCursor"]
    unless_null $P107, vivify_330
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["NQPCursor"]
  vivify_330:
    set $P1009, $P107
.annotate 'line', 837
    .const 'Sub' $P1332 = "69_1337966785.387" 
    newclosure $P1338, $P1332
.annotate 'line', 7
    .return ($P1338)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "termish"  :subid("10_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1013
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 11
    .lex "self", param_1013
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1014
    .lex "$/", $P1015
    .local string rx10_tgt
    .local int rx10_pos
    .local int rx10_off
    .local int rx10_eos
    .local int rx10_rep
    .local pmc rx10_cur
    .local pmc rx10_curclass
    .local pmc rx10_bstack
    .local pmc rx10_cstack
    (rx10_cur, rx10_tgt, rx10_pos, rx10_curclass, rx10_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx10_cur
    length rx10_eos, rx10_tgt
    eq $I19, 1, rx10_restart
    repr_get_attr_int $I11, self, rx10_curclass, "$!from"
    ne $I11, -1, rxscan11_done
    goto rxscan11_scan
  rxscan11_loop:
    inc rx10_pos
    gt rx10_pos, rx10_eos, rx10_fail
    repr_bind_attr_int rx10_cur, rx10_curclass, "$!from", rx10_pos
  rxscan11_scan:
    nqp_rxmark rx10_bstack, rxscan11_loop, rx10_pos, 0
  rxscan11_done:
  # rx rxquantr12 ** 0..-1
    nqp_rxmark rx10_bstack, rxquantr12_done, rx10_pos, 0
  rxquantr12_loop:
    repr_bind_attr_int rx10_cur, rx10_curclass, "$!pos", rx10_pos
    $P11 = rx10_cur."prefixish"()
    repr_get_attr_int $I11, $P11, rx10_curclass, "$!pos"
    lt $I11, 0, rx10_fail
    goto rxsubrule13_pass
  rxsubrule13_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx10_curclass, "$!pos"
    lt $I11, 0, rx10_fail
  rxsubrule13_pass:
    rx10_cstack = rx10_cur."!cursor_capture"($P11, "prefixish")
    set_addr $I11, rxsubrule13_back
    push rx10_bstack, $I11
    push rx10_bstack, 0
    push rx10_bstack, rx10_pos
    elements $I11, rx10_cstack
    push rx10_bstack, $I11
    repr_get_attr_int rx10_pos, $P11, rx10_curclass, "$!pos"
    nqp_rxpeek $I19, rx10_bstack, rxquantr12_done
    inc $I19
    inc $I19
    set rx10_rep, rx10_bstack[$I19]
    nqp_rxcommit rx10_bstack, rxquantr12_done
    inc rx10_rep
    nqp_rxmark rx10_bstack, rxquantr12_done, rx10_pos, rx10_rep
    goto rxquantr12_loop
  rxquantr12_done:
    repr_bind_attr_int rx10_cur, rx10_curclass, "$!pos", rx10_pos
    $P11 = rx10_cur."term"()
    repr_get_attr_int $I11, $P11, rx10_curclass, "$!pos"
    lt $I11, 0, rx10_fail
    nqp_rxmark rx10_bstack, rxsubrule14_pass, -1, 0
  rxsubrule14_pass:
    rx10_cstack = rx10_cur."!cursor_capture"($P11, "term")
    repr_get_attr_int rx10_pos, $P11, rx10_curclass, "$!pos"
  # rx rxquantr15 ** 0..-1
    nqp_rxmark rx10_bstack, rxquantr15_done, rx10_pos, 0
  rxquantr15_loop:
    repr_bind_attr_int rx10_cur, rx10_curclass, "$!pos", rx10_pos
    $P11 = rx10_cur."postfixish"()
    repr_get_attr_int $I11, $P11, rx10_curclass, "$!pos"
    lt $I11, 0, rx10_fail
    goto rxsubrule16_pass
  rxsubrule16_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx10_curclass, "$!pos"
    lt $I11, 0, rx10_fail
  rxsubrule16_pass:
    rx10_cstack = rx10_cur."!cursor_capture"($P11, "postfixish")
    set_addr $I11, rxsubrule16_back
    push rx10_bstack, $I11
    push rx10_bstack, 0
    push rx10_bstack, rx10_pos
    elements $I11, rx10_cstack
    push rx10_bstack, $I11
    repr_get_attr_int rx10_pos, $P11, rx10_curclass, "$!pos"
    nqp_rxpeek $I19, rx10_bstack, rxquantr15_done
    inc $I19
    inc $I19
    set rx10_rep, rx10_bstack[$I19]
    nqp_rxcommit rx10_bstack, rxquantr15_done
    inc rx10_rep
    nqp_rxmark rx10_bstack, rxquantr15_done, rx10_pos, rx10_rep
    goto rxquantr15_loop
  rxquantr15_done:
    rx10_cur."!cursor_pass"(rx10_pos, "termish", 'backtrack'=>1)
    .return (rx10_cur)
  rx10_restart:
    repr_get_attr_obj rx10_cstack, rx10_cur, rx10_curclass, "$!cstack"
  rx10_fail:
    unless rx10_bstack, rx10_done
    pop $I19, rx10_bstack
    if_null rx10_cstack, rx10_cstack_done
    unless rx10_cstack, rx10_cstack_done
    dec $I19
    set $P11, rx10_cstack[$I19]
  rx10_cstack_done:
    pop rx10_rep, rx10_bstack
    pop rx10_pos, rx10_bstack
    pop $I19, rx10_bstack
    lt rx10_pos, -1, rx10_done
    lt rx10_pos, 0, rx10_fail
    eq $I19, 0, rx10_fail
    if_null rx10_cstack, rx10_jump
    elements $I18, rx10_bstack
    le $I18, 0, rx10_cut
    dec $I18
    set $I18, rx10_bstack[$I18]
  rx10_cut:
    assign rx10_cstack, $I18
  rx10_jump:
    jump $I19
  rx10_done:
    rx10_cur."!cursor_fail"()
    .return (rx10_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "10_1337966785.387_caps"  :subid("181_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 11
    new $P104, "Hash"
    set $P104["prefixish"], 2
    set $P104["term"], 0
    set $P104["postfixish"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "10_1337966785.387_nfa"  :subid("182_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 11
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "prefixish"
    push $P105, 1
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "term"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "postfixish"
    push $P107, 3
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "term"  :subid("11_1337966785.387")
    .param pmc param_1019
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 17
    .lex "self", param_1019
    $P103 = param_1019."!protoregex"("term")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "infix"  :subid("12_1337966785.387")
    .param pmc param_1021
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 18
    .lex "self", param_1021
    $P103 = param_1021."!protoregex"("infix")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "prefix"  :subid("13_1337966785.387")
    .param pmc param_1023
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 19
    .lex "self", param_1023
    $P103 = param_1023."!protoregex"("prefix")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "postfix"  :subid("14_1337966785.387")
    .param pmc param_1025
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 20
    .lex "self", param_1025
    $P103 = param_1025."!protoregex"("postfix")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "circumfix"  :subid("15_1337966785.387")
    .param pmc param_1027
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 21
    .lex "self", param_1027
    $P103 = param_1027."!protoregex"("circumfix")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "postcircumfix"  :subid("16_1337966785.387")
    .param pmc param_1029
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 22
    .lex "self", param_1029
    $P103 = param_1029."!protoregex"("postcircumfix")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "term:sym<circumfix>"  :subid("17_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1031
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 24
    .lex "self", param_1031
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1032
    .lex "$/", $P1033
    .local string rx17_tgt
    .local int rx17_pos
    .local int rx17_off
    .local int rx17_eos
    .local int rx17_rep
    .local pmc rx17_cur
    .local pmc rx17_curclass
    .local pmc rx17_bstack
    .local pmc rx17_cstack
    (rx17_cur, rx17_tgt, rx17_pos, rx17_curclass, rx17_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx17_cur
    length rx17_eos, rx17_tgt
    eq $I19, 1, rx17_restart
    repr_get_attr_int $I11, self, rx17_curclass, "$!from"
    ne $I11, -1, rxscan18_done
    goto rxscan18_scan
  rxscan18_loop:
    inc rx17_pos
    gt rx17_pos, rx17_eos, rx17_fail
    repr_bind_attr_int rx17_cur, rx17_curclass, "$!from", rx17_pos
  rxscan18_scan:
    nqp_rxmark rx17_bstack, rxscan18_loop, rx17_pos, 0
  rxscan18_done:
    repr_bind_attr_int rx17_cur, rx17_curclass, "$!pos", rx17_pos
    $P11 = rx17_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx17_curclass, "$!pos"
    lt $I11, 0, rx17_fail
    nqp_rxmark rx17_bstack, rxsubrule19_pass, -1, 0
  rxsubrule19_pass:
    rx17_cstack = rx17_cur."!cursor_capture"($P11, "circumfix")
    repr_get_attr_int rx17_pos, $P11, rx17_curclass, "$!pos"
    rx17_cur."!cursor_pass"(rx17_pos, "term:sym<circumfix>", 'backtrack'=>1)
    .return (rx17_cur)
  rx17_restart:
    repr_get_attr_obj rx17_cstack, rx17_cur, rx17_curclass, "$!cstack"
  rx17_fail:
    unless rx17_bstack, rx17_done
    pop $I19, rx17_bstack
    if_null rx17_cstack, rx17_cstack_done
    unless rx17_cstack, rx17_cstack_done
    dec $I19
    set $P11, rx17_cstack[$I19]
  rx17_cstack_done:
    pop rx17_rep, rx17_bstack
    pop rx17_pos, rx17_bstack
    pop $I19, rx17_bstack
    lt rx17_pos, -1, rx17_done
    lt rx17_pos, 0, rx17_fail
    eq $I19, 0, rx17_fail
    if_null rx17_cstack, rx17_jump
    elements $I18, rx17_bstack
    le $I18, 0, rx17_cut
    dec $I18
    set $I18, rx17_bstack[$I18]
  rx17_cut:
    assign rx17_cstack, $I18
  rx17_jump:
    jump $I19
  rx17_done:
    rx17_cur."!cursor_fail"()
    .return (rx17_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "17_1337966785.387_caps"  :subid("183_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 24
    new $P104, "Hash"
    set $P104["circumfix"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "17_1337966785.387_nfa"  :subid("184_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 24
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "circumfix"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "infixish"  :subid("18_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1037
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 26
    .lex "self", param_1037
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1038
    .lex "$/", $P1039
    .local string rx20_tgt
    .local int rx20_pos
    .local int rx20_off
    .local int rx20_eos
    .local int rx20_rep
    .local pmc rx20_cur
    .local pmc rx20_curclass
    .local pmc rx20_bstack
    .local pmc rx20_cstack
    (rx20_cur, rx20_tgt, rx20_pos, rx20_curclass, rx20_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx20_cur
    length rx20_eos, rx20_tgt
    eq $I19, 1, rx20_restart
    repr_get_attr_int $I11, self, rx20_curclass, "$!from"
    ne $I11, -1, rxscan21_done
    goto rxscan21_scan
  rxscan21_loop:
    inc rx20_pos
    gt rx20_pos, rx20_eos, rx20_fail
    repr_bind_attr_int rx20_cur, rx20_curclass, "$!from", rx20_pos
  rxscan21_scan:
    nqp_rxmark rx20_bstack, rxscan21_loop, rx20_pos, 0
  rxscan21_done:
    repr_bind_attr_int rx20_cur, rx20_curclass, "$!pos", rx20_pos
    $P11 = rx20_cur."infix"()
    repr_get_attr_int $I11, $P11, rx20_curclass, "$!pos"
    lt $I11, 0, rx20_fail
    nqp_rxmark rx20_bstack, rxsubrule22_pass, -1, 0
  rxsubrule22_pass:
    rx20_cstack = rx20_cur."!cursor_capture"($P11, "OPER=infix")
    repr_get_attr_int rx20_pos, $P11, rx20_curclass, "$!pos"
    rx20_cur."!cursor_pass"(rx20_pos, "infixish", 'backtrack'=>1)
    .return (rx20_cur)
  rx20_restart:
    repr_get_attr_obj rx20_cstack, rx20_cur, rx20_curclass, "$!cstack"
  rx20_fail:
    unless rx20_bstack, rx20_done
    pop $I19, rx20_bstack
    if_null rx20_cstack, rx20_cstack_done
    unless rx20_cstack, rx20_cstack_done
    dec $I19
    set $P11, rx20_cstack[$I19]
  rx20_cstack_done:
    pop rx20_rep, rx20_bstack
    pop rx20_pos, rx20_bstack
    pop $I19, rx20_bstack
    lt rx20_pos, -1, rx20_done
    lt rx20_pos, 0, rx20_fail
    eq $I19, 0, rx20_fail
    if_null rx20_cstack, rx20_jump
    elements $I18, rx20_bstack
    le $I18, 0, rx20_cut
    dec $I18
    set $I18, rx20_bstack[$I18]
  rx20_cut:
    assign rx20_cstack, $I18
  rx20_jump:
    jump $I19
  rx20_done:
    rx20_cur."!cursor_fail"()
    .return (rx20_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "18_1337966785.387_caps"  :subid("185_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 26
    new $P104, "Hash"
    set $P104["OPER"], 0
    set $P104["infix"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "18_1337966785.387_nfa"  :subid("186_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 26
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "infix"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "prefixish"  :subid("19_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1043
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 27
    .lex "self", param_1043
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1044
    .lex "$/", $P1045
    .local string rx23_tgt
    .local int rx23_pos
    .local int rx23_off
    .local int rx23_eos
    .local int rx23_rep
    .local pmc rx23_cur
    .local pmc rx23_curclass
    .local pmc rx23_bstack
    .local pmc rx23_cstack
    (rx23_cur, rx23_tgt, rx23_pos, rx23_curclass, rx23_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx23_cur
    length rx23_eos, rx23_tgt
    eq $I19, 1, rx23_restart
    repr_get_attr_int $I11, self, rx23_curclass, "$!from"
    ne $I11, -1, rxscan24_done
    goto rxscan24_scan
  rxscan24_loop:
    inc rx23_pos
    gt rx23_pos, rx23_eos, rx23_fail
    repr_bind_attr_int rx23_cur, rx23_curclass, "$!from", rx23_pos
  rxscan24_scan:
    nqp_rxmark rx23_bstack, rxscan24_loop, rx23_pos, 0
  rxscan24_done:
    repr_bind_attr_int rx23_cur, rx23_curclass, "$!pos", rx23_pos
    $P11 = rx23_cur."prefix"()
    repr_get_attr_int $I11, $P11, rx23_curclass, "$!pos"
    lt $I11, 0, rx23_fail
    nqp_rxmark rx23_bstack, rxsubrule25_pass, -1, 0
  rxsubrule25_pass:
    rx23_cstack = rx23_cur."!cursor_capture"($P11, "OPER=prefix")
    repr_get_attr_int rx23_pos, $P11, rx23_curclass, "$!pos"
    repr_bind_attr_int rx23_cur, rx23_curclass, "$!pos", rx23_pos
    $P11 = rx23_cur."ws"()
    repr_get_attr_int $I11, $P11, rx23_curclass, "$!pos"
    lt $I11, 0, rx23_fail
    repr_get_attr_int rx23_pos, $P11, rx23_curclass, "$!pos"
    rx23_cur."!cursor_pass"(rx23_pos, "prefixish", 'backtrack'=>1)
    .return (rx23_cur)
  rx23_restart:
    repr_get_attr_obj rx23_cstack, rx23_cur, rx23_curclass, "$!cstack"
  rx23_fail:
    unless rx23_bstack, rx23_done
    pop $I19, rx23_bstack
    if_null rx23_cstack, rx23_cstack_done
    unless rx23_cstack, rx23_cstack_done
    dec $I19
    set $P11, rx23_cstack[$I19]
  rx23_cstack_done:
    pop rx23_rep, rx23_bstack
    pop rx23_pos, rx23_bstack
    pop $I19, rx23_bstack
    lt rx23_pos, -1, rx23_done
    lt rx23_pos, 0, rx23_fail
    eq $I19, 0, rx23_fail
    if_null rx23_cstack, rx23_jump
    elements $I18, rx23_bstack
    le $I18, 0, rx23_cut
    dec $I18
    set $I18, rx23_bstack[$I18]
  rx23_cut:
    assign rx23_cstack, $I18
  rx23_jump:
    jump $I19
  rx23_done:
    rx23_cur."!cursor_fail"()
    .return (rx23_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "19_1337966785.387_caps"  :subid("187_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 27
    new $P104, "Hash"
    set $P104["OPER"], 0
    set $P104["prefix"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "19_1337966785.387_nfa"  :subid("188_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 27
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "prefix"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "postfixish"  :subid("20_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1049
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 28
    .lex "self", param_1049
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1050
    .lex "$/", $P1051
    .local string rx27_tgt
    .local int rx27_pos
    .local int rx27_off
    .local int rx27_eos
    .local int rx27_rep
    .local pmc rx27_cur
    .local pmc rx27_curclass
    .local pmc rx27_bstack
    .local pmc rx27_cstack
    (rx27_cur, rx27_tgt, rx27_pos, rx27_curclass, rx27_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx27_cur
    length rx27_eos, rx27_tgt
    eq $I19, 1, rx27_restart
    repr_get_attr_int $I11, self, rx27_curclass, "$!from"
    ne $I11, -1, rxscan28_done
    goto rxscan28_scan
  rxscan28_loop:
    inc rx27_pos
    gt rx27_pos, rx27_eos, rx27_fail
    repr_bind_attr_int rx27_cur, rx27_curclass, "$!from", rx27_pos
  rxscan28_scan:
    nqp_rxmark rx27_bstack, rxscan28_loop, rx27_pos, 0
  rxscan28_done:
  alt29_0:
    nqp_rxmark rx27_bstack, alt29_1, rx27_pos, 0
    repr_bind_attr_int rx27_cur, rx27_curclass, "$!pos", rx27_pos
    $P11 = rx27_cur."postfix"()
    repr_get_attr_int $I11, $P11, rx27_curclass, "$!pos"
    lt $I11, 0, rx27_fail
    nqp_rxmark rx27_bstack, rxsubrule30_pass, -1, 0
  rxsubrule30_pass:
    rx27_cstack = rx27_cur."!cursor_capture"($P11, "OPER=postfix")
    repr_get_attr_int rx27_pos, $P11, rx27_curclass, "$!pos"
    goto alt29_end
  alt29_1:
    repr_bind_attr_int rx27_cur, rx27_curclass, "$!pos", rx27_pos
    $P11 = rx27_cur."postcircumfix"()
    repr_get_attr_int $I11, $P11, rx27_curclass, "$!pos"
    lt $I11, 0, rx27_fail
    nqp_rxmark rx27_bstack, rxsubrule31_pass, -1, 0
  rxsubrule31_pass:
    rx27_cstack = rx27_cur."!cursor_capture"($P11, "OPER=postcircumfix")
    repr_get_attr_int rx27_pos, $P11, rx27_curclass, "$!pos"
  alt29_end:
    rx27_cur."!cursor_pass"(rx27_pos, "postfixish", 'backtrack'=>1)
    .return (rx27_cur)
  rx27_restart:
    repr_get_attr_obj rx27_cstack, rx27_cur, rx27_curclass, "$!cstack"
  rx27_fail:
    unless rx27_bstack, rx27_done
    pop $I19, rx27_bstack
    if_null rx27_cstack, rx27_cstack_done
    unless rx27_cstack, rx27_cstack_done
    dec $I19
    set $P11, rx27_cstack[$I19]
  rx27_cstack_done:
    pop rx27_rep, rx27_bstack
    pop rx27_pos, rx27_bstack
    pop $I19, rx27_bstack
    lt rx27_pos, -1, rx27_done
    lt rx27_pos, 0, rx27_fail
    eq $I19, 0, rx27_fail
    if_null rx27_cstack, rx27_jump
    elements $I18, rx27_bstack
    le $I18, 0, rx27_cut
    dec $I18
    set $I18, rx27_bstack[$I18]
  rx27_cut:
    assign rx27_cstack, $I18
  rx27_jump:
    jump $I19
  rx27_done:
    rx27_cur."!cursor_fail"()
    .return (rx27_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "20_1337966785.387_caps"  :subid("189_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 28
    new $P104, "Hash"
    set $P104["OPER"], 0
    set $P104["postfix"], 0
    set $P104["postcircumfix"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "20_1337966785.387_nfa"  :subid("190_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 28
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "postfix"
    push $P105, 0
    push $P105, 8
    push $P105, "postcircumfix"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "nullterm"  :subid("21_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1055
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 33
    .lex "self", param_1055
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1056
    .lex "$/", $P1057
    .local string rx32_tgt
    .local int rx32_pos
    .local int rx32_off
    .local int rx32_eos
    .local int rx32_rep
    .local pmc rx32_cur
    .local pmc rx32_curclass
    .local pmc rx32_bstack
    .local pmc rx32_cstack
    (rx32_cur, rx32_tgt, rx32_pos, rx32_curclass, rx32_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx32_cur
    length rx32_eos, rx32_tgt
    eq $I19, 1, rx32_restart
    repr_get_attr_int $I11, self, rx32_curclass, "$!from"
    ne $I11, -1, rxscan33_done
    goto rxscan33_scan
  rxscan33_loop:
    inc rx32_pos
    gt rx32_pos, rx32_eos, rx32_fail
    repr_bind_attr_int rx32_cur, rx32_curclass, "$!from", rx32_pos
  rxscan33_scan:
    nqp_rxmark rx32_bstack, rxscan33_loop, rx32_pos, 0
  rxscan33_done:
    rx32_cur."!cursor_pass"(rx32_pos, "nullterm", 'backtrack'=>1)
    .return (rx32_cur)
  rx32_restart:
    repr_get_attr_obj rx32_cstack, rx32_cur, rx32_curclass, "$!cstack"
  rx32_fail:
    unless rx32_bstack, rx32_done
    pop $I19, rx32_bstack
    if_null rx32_cstack, rx32_cstack_done
    unless rx32_cstack, rx32_cstack_done
    dec $I19
    set $P11, rx32_cstack[$I19]
  rx32_cstack_done:
    pop rx32_rep, rx32_bstack
    pop rx32_pos, rx32_bstack
    pop $I19, rx32_bstack
    lt rx32_pos, -1, rx32_done
    lt rx32_pos, 0, rx32_fail
    eq $I19, 0, rx32_fail
    if_null rx32_cstack, rx32_jump
    elements $I18, rx32_bstack
    le $I18, 0, rx32_cut
    dec $I18
    set $I18, rx32_bstack[$I18]
  rx32_cut:
    assign rx32_cstack, $I18
  rx32_jump:
    jump $I19
  rx32_done:
    rx32_cur."!cursor_fail"()
    .return (rx32_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "21_1337966785.387_caps"  :subid("191_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 33
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "nullterm_alt"  :subid("22_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1060
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 34
    .lex "self", param_1060
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1061
    .lex "$/", $P1062
    .local string rx34_tgt
    .local int rx34_pos
    .local int rx34_off
    .local int rx34_eos
    .local int rx34_rep
    .local pmc rx34_cur
    .local pmc rx34_curclass
    .local pmc rx34_bstack
    .local pmc rx34_cstack
    (rx34_cur, rx34_tgt, rx34_pos, rx34_curclass, rx34_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx34_cur
    length rx34_eos, rx34_tgt
    eq $I19, 1, rx34_restart
    repr_get_attr_int $I11, self, rx34_curclass, "$!from"
    ne $I11, -1, rxscan35_done
    goto rxscan35_scan
  rxscan35_loop:
    inc rx34_pos
    gt rx34_pos, rx34_eos, rx34_fail
    repr_bind_attr_int rx34_cur, rx34_curclass, "$!from", rx34_pos
  rxscan35_scan:
    nqp_rxmark rx34_bstack, rxscan35_loop, rx34_pos, 0
  rxscan35_done:
    repr_bind_attr_int rx34_cur, rx34_curclass, "$!pos", rx34_pos
    $P11 = rx34_cur."nullterm"()
    repr_get_attr_int $I11, $P11, rx34_curclass, "$!pos"
    lt $I11, 0, rx34_fail
    nqp_rxmark rx34_bstack, rxsubrule36_pass, -1, 0
  rxsubrule36_pass:
    rx34_cstack = rx34_cur."!cursor_capture"($P11, "term")
    repr_get_attr_int rx34_pos, $P11, rx34_curclass, "$!pos"
    rx34_cur."!cursor_pass"(rx34_pos, "nullterm_alt", 'backtrack'=>1)
    .return (rx34_cur)
  rx34_restart:
    repr_get_attr_obj rx34_cstack, rx34_cur, rx34_curclass, "$!cstack"
  rx34_fail:
    unless rx34_bstack, rx34_done
    pop $I19, rx34_bstack
    if_null rx34_cstack, rx34_cstack_done
    unless rx34_cstack, rx34_cstack_done
    dec $I19
    set $P11, rx34_cstack[$I19]
  rx34_cstack_done:
    pop rx34_rep, rx34_bstack
    pop rx34_pos, rx34_bstack
    pop $I19, rx34_bstack
    lt rx34_pos, -1, rx34_done
    lt rx34_pos, 0, rx34_fail
    eq $I19, 0, rx34_fail
    if_null rx34_cstack, rx34_jump
    elements $I18, rx34_bstack
    le $I18, 0, rx34_cut
    dec $I18
    set $I18, rx34_bstack[$I18]
  rx34_cut:
    assign rx34_cstack, $I18
  rx34_jump:
    jump $I19
  rx34_done:
    rx34_cur."!cursor_fail"()
    .return (rx34_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "22_1337966785.387_caps"  :subid("192_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 34
    new $P104, "Hash"
    set $P104["term"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "22_1337966785.387_nfa"  :subid("193_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 34
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "nullterm"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "nulltermish" :anon :subid("23_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1066
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 37
    .lex "self", param_1066
    set $P104, param_1066
    nqp_decontainerize $P105, $P104
    $P106 = $P105."termish"()
    unless $P106, unless_1067
    set $P103, $P106
    goto unless_1067_end
  unless_1067:
    set $P107, param_1066
    nqp_decontainerize $P108, $P107
    $P109 = $P108."nullterm_alt"()
    set $P103, $P109
  unless_1067_end:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_delimited"  :subid("24_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1069
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 40
    .lex "self", param_1069
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1070
    .lex "$/", $P1071
    .local string rx37_tgt
    .local int rx37_pos
    .local int rx37_off
    .local int rx37_eos
    .local int rx37_rep
    .local pmc rx37_cur
    .local pmc rx37_curclass
    .local pmc rx37_bstack
    .local pmc rx37_cstack
    (rx37_cur, rx37_tgt, rx37_pos, rx37_curclass, rx37_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx37_cur
    length rx37_eos, rx37_tgt
    eq $I19, 1, rx37_restart
    repr_get_attr_int $I11, self, rx37_curclass, "$!from"
    ne $I11, -1, rxscan38_done
    goto rxscan38_scan
  rxscan38_loop:
    inc rx37_pos
    gt rx37_pos, rx37_eos, rx37_fail
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!from", rx37_pos
  rxscan38_scan:
    nqp_rxmark rx37_bstack, rxscan38_loop, rx37_pos, 0
  rxscan38_done:
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."starter"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail
    nqp_rxmark rx37_bstack, rxsubrule39_pass, -1, 0
  rxsubrule39_pass:
    rx37_cstack = rx37_cur."!cursor_capture"($P11, "starter")
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
  # rx rxquantr40 ** 0..-1
    nqp_rxmark rx37_bstack, rxquantr40_done, rx37_pos, 0
  rxquantr40_loop:
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."quote_atom"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail
    goto rxsubrule41_pass
  rxsubrule41_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail
  rxsubrule41_pass:
    rx37_cstack = rx37_cur."!cursor_capture"($P11, "quote_atom")
    set_addr $I11, rxsubrule41_back
    push rx37_bstack, $I11
    push rx37_bstack, 0
    push rx37_bstack, rx37_pos
    elements $I11, rx37_cstack
    push rx37_bstack, $I11
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    nqp_rxpeek $I19, rx37_bstack, rxquantr40_done
    inc $I19
    inc $I19
    set rx37_rep, rx37_bstack[$I19]
    nqp_rxcommit rx37_bstack, rxquantr40_done
    inc rx37_rep
    nqp_rxmark rx37_bstack, rxquantr40_done, rx37_pos, rx37_rep
    goto rxquantr40_loop
  rxquantr40_done:
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."stopper"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail
    nqp_rxmark rx37_bstack, rxsubrule42_pass, -1, 0
  rxsubrule42_pass:
    rx37_cstack = rx37_cur."!cursor_capture"($P11, "stopper")
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    rx37_cur."!cursor_pass"(rx37_pos, "quote_delimited", 'backtrack'=>1)
    .return (rx37_cur)
  rx37_restart:
    repr_get_attr_obj rx37_cstack, rx37_cur, rx37_curclass, "$!cstack"
  rx37_fail:
    unless rx37_bstack, rx37_done
    pop $I19, rx37_bstack
    if_null rx37_cstack, rx37_cstack_done
    unless rx37_cstack, rx37_cstack_done
    dec $I19
    set $P11, rx37_cstack[$I19]
  rx37_cstack_done:
    pop rx37_rep, rx37_bstack
    pop rx37_pos, rx37_bstack
    pop $I19, rx37_bstack
    lt rx37_pos, -1, rx37_done
    lt rx37_pos, 0, rx37_fail
    eq $I19, 0, rx37_fail
    if_null rx37_cstack, rx37_jump
    elements $I18, rx37_bstack
    le $I18, 0, rx37_cut
    dec $I18
    set $I18, rx37_bstack[$I18]
  rx37_cut:
    assign rx37_cstack, $I18
  rx37_jump:
    jump $I19
  rx37_done:
    rx37_cur."!cursor_fail"()
    .return (rx37_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "24_1337966785.387_caps"  :subid("194_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 40
    new $P104, "Hash"
    set $P104["starter"], 0
    set $P104["quote_atom"], 2
    set $P104["stopper"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "24_1337966785.387_nfa"  :subid("195_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 40
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "starter"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "quote_atom"
    push $P106, 2
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "stopper"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_atom"  :subid("25_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1075
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 44
    .lex "self", param_1075
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1076
    .lex "$/", $P1077
    .local string rx43_tgt
    .local int rx43_pos
    .local int rx43_off
    .local int rx43_eos
    .local int rx43_rep
    .local pmc rx43_cur
    .local pmc rx43_curclass
    .local pmc rx43_bstack
    .local pmc rx43_cstack
    (rx43_cur, rx43_tgt, rx43_pos, rx43_curclass, rx43_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx43_cur
    length rx43_eos, rx43_tgt
    eq $I19, 1, rx43_restart
    repr_get_attr_int $I11, self, rx43_curclass, "$!from"
    ne $I11, -1, rxscan44_done
    goto rxscan44_scan
  rxscan44_loop:
    inc rx43_pos
    gt rx43_pos, rx43_eos, rx43_fail
    repr_bind_attr_int rx43_cur, rx43_curclass, "$!from", rx43_pos
  rxscan44_scan:
    nqp_rxmark rx43_bstack, rxscan44_loop, rx43_pos, 0
  rxscan44_done:
    repr_bind_attr_int rx43_cur, rx43_curclass, "$!pos", rx43_pos
    $P11 = rx43_cur."stopper"()
    repr_get_attr_int $I11, $P11, rx43_curclass, "$!pos"
    ge $I11, 0, rx43_fail
  alt45_0:
    nqp_rxmark rx43_bstack, alt45_1, rx43_pos, 0
    repr_bind_attr_int rx43_cur, rx43_curclass, "$!pos", rx43_pos
    $P11 = rx43_cur."quote_escape"()
    repr_get_attr_int $I11, $P11, rx43_curclass, "$!pos"
    lt $I11, 0, rx43_fail
    nqp_rxmark rx43_bstack, rxsubrule46_pass, -1, 0
  rxsubrule46_pass:
    rx43_cstack = rx43_cur."!cursor_capture"($P11, "quote_escape")
    repr_get_attr_int rx43_pos, $P11, rx43_curclass, "$!pos"
    goto alt45_end
  alt45_1:
  # rx rxquantr47 ** 1..-1
    nqp_rxmark rx43_bstack, rxquantr47_done, -1, 0
  rxquantr47_loop:
    repr_bind_attr_int rx43_cur, rx43_curclass, "$!pos", rx43_pos
    $P11 = rx43_cur."stopper"()
    repr_get_attr_int $I11, $P11, rx43_curclass, "$!pos"
    ge $I11, 0, rx43_fail
    repr_bind_attr_int rx43_cur, rx43_curclass, "$!pos", rx43_pos
    $P11 = rx43_cur."quote_escape"()
    repr_get_attr_int $I11, $P11, rx43_curclass, "$!pos"
    ge $I11, 0, rx43_fail
    ge rx43_pos, rx43_eos, rx43_fail
    add rx43_pos, 1
    nqp_rxpeek $I19, rx43_bstack, rxquantr47_done
    inc $I19
    inc $I19
    set rx43_rep, rx43_bstack[$I19]
    nqp_rxcommit rx43_bstack, rxquantr47_done
    inc rx43_rep
    nqp_rxmark rx43_bstack, rxquantr47_done, rx43_pos, rx43_rep
    goto rxquantr47_loop
  rxquantr47_done:
  alt45_end:
    rx43_cur."!cursor_pass"(rx43_pos, "quote_atom", 'backtrack'=>1)
    .return (rx43_cur)
  rx43_restart:
    repr_get_attr_obj rx43_cstack, rx43_cur, rx43_curclass, "$!cstack"
  rx43_fail:
    unless rx43_bstack, rx43_done
    pop $I19, rx43_bstack
    if_null rx43_cstack, rx43_cstack_done
    unless rx43_cstack, rx43_cstack_done
    dec $I19
    set $P11, rx43_cstack[$I19]
  rx43_cstack_done:
    pop rx43_rep, rx43_bstack
    pop rx43_pos, rx43_bstack
    pop $I19, rx43_bstack
    lt rx43_pos, -1, rx43_done
    lt rx43_pos, 0, rx43_fail
    eq $I19, 0, rx43_fail
    if_null rx43_cstack, rx43_jump
    elements $I18, rx43_bstack
    le $I18, 0, rx43_cut
    dec $I18
    set $I18, rx43_bstack[$I18]
  rx43_cut:
    assign rx43_cstack, $I18
  rx43_jump:
    jump $I19
  rx43_done:
    rx43_cur."!cursor_fail"()
    .return (rx43_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "25_1337966785.387_caps"  :subid("196_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 44
    new $P104, "Hash"
    set $P104["quote_escape"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "decint"  :subid("26_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1080
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 52
    .lex "self", param_1080
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1081
    .lex "$/", $P1082
    .local string rx48_tgt
    .local int rx48_pos
    .local int rx48_off
    .local int rx48_eos
    .local int rx48_rep
    .local pmc rx48_cur
    .local pmc rx48_curclass
    .local pmc rx48_bstack
    .local pmc rx48_cstack
    (rx48_cur, rx48_tgt, rx48_pos, rx48_curclass, rx48_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx48_cur
    length rx48_eos, rx48_tgt
    eq $I19, 1, rx48_restart
    repr_get_attr_int $I11, self, rx48_curclass, "$!from"
    ne $I11, -1, rxscan49_done
    goto rxscan49_scan
  rxscan49_loop:
    inc rx48_pos
    gt rx48_pos, rx48_eos, rx48_fail
    repr_bind_attr_int rx48_cur, rx48_curclass, "$!from", rx48_pos
  rxscan49_scan:
    nqp_rxmark rx48_bstack, rxscan49_loop, rx48_pos, 0
  rxscan49_done:
  # rx rxquantr50 ** 1..-1
    nqp_rxmark rx48_bstack, rxquantr50_done, -1, 0
  rxquantr50_loop:
  # rx rxquantr51 ** 1..-1
    nqp_rxmark rx48_bstack, rxquantr51_done, -1, 0
  rxquantr51_loop:
    ge rx48_pos, rx48_eos, rx48_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx48_tgt, rx48_pos
    unless $I11, rx48_fail
    add rx48_pos, 1
    nqp_rxpeek $I19, rx48_bstack, rxquantr51_done
    inc $I19
    inc $I19
    set rx48_rep, rx48_bstack[$I19]
    nqp_rxcommit rx48_bstack, rxquantr51_done
    inc rx48_rep
    nqp_rxmark rx48_bstack, rxquantr51_done, rx48_pos, rx48_rep
    goto rxquantr51_loop
  rxquantr51_done:
    nqp_rxpeek $I19, rx48_bstack, rxquantr50_done
    inc $I19
    inc $I19
    set rx48_rep, rx48_bstack[$I19]
    nqp_rxcommit rx48_bstack, rxquantr50_done
    inc rx48_rep
    nqp_rxmark rx48_bstack, rxquantr50_done, rx48_pos, rx48_rep
    add $I11, rx48_pos, 1
    gt $I11, rx48_eos, rx48_fail
    substr $S10, rx48_tgt, rx48_pos, 1
    ne $S10, ucs4:"_", rx48_fail
    add rx48_pos, 1
    goto rxquantr50_loop
  rxquantr50_done:
    rx48_cur."!cursor_pass"(rx48_pos, "decint", 'backtrack'=>1)
    .return (rx48_cur)
  rx48_restart:
    repr_get_attr_obj rx48_cstack, rx48_cur, rx48_curclass, "$!cstack"
  rx48_fail:
    unless rx48_bstack, rx48_done
    pop $I19, rx48_bstack
    if_null rx48_cstack, rx48_cstack_done
    unless rx48_cstack, rx48_cstack_done
    dec $I19
    set $P11, rx48_cstack[$I19]
  rx48_cstack_done:
    pop rx48_rep, rx48_bstack
    pop rx48_pos, rx48_bstack
    pop $I19, rx48_bstack
    lt rx48_pos, -1, rx48_done
    lt rx48_pos, 0, rx48_fail
    eq $I19, 0, rx48_fail
    if_null rx48_cstack, rx48_jump
    elements $I18, rx48_bstack
    le $I18, 0, rx48_cut
    dec $I18
    set $I18, rx48_bstack[$I18]
  rx48_cut:
    assign rx48_cstack, $I18
  rx48_jump:
    jump $I19
  rx48_done:
    rx48_cur."!cursor_fail"()
    .return (rx48_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "26_1337966785.387_caps"  :subid("197_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 52
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "26_1337966785.387_nfa"  :subid("198_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 52
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 4
    push $P108, 8
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 4
    push $P109, 1
    push $P109, 0
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "decints"  :subid("27_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1086
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 53
    .lex "self", param_1086
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1087
    .lex "$/", $P1088
    .local string rx52_tgt
    .local int rx52_pos
    .local int rx52_off
    .local int rx52_eos
    .local int rx52_rep
    .local pmc rx52_cur
    .local pmc rx52_curclass
    .local pmc rx52_bstack
    .local pmc rx52_cstack
    (rx52_cur, rx52_tgt, rx52_pos, rx52_curclass, rx52_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx52_cur
    length rx52_eos, rx52_tgt
    eq $I19, 1, rx52_restart
    repr_get_attr_int $I11, self, rx52_curclass, "$!from"
    ne $I11, -1, rxscan53_done
    goto rxscan53_scan
  rxscan53_loop:
    inc rx52_pos
    gt rx52_pos, rx52_eos, rx52_fail
    repr_bind_attr_int rx52_cur, rx52_curclass, "$!from", rx52_pos
  rxscan53_scan:
    nqp_rxmark rx52_bstack, rxscan53_loop, rx52_pos, 0
  rxscan53_done:
  # rx rxquantr54 ** 1..-1
    nqp_rxmark rx52_bstack, rxquantr54_done, -1, 0
  rxquantr54_loop:
    repr_bind_attr_int rx52_cur, rx52_curclass, "$!pos", rx52_pos
    $P11 = rx52_cur."ws"()
    repr_get_attr_int $I11, $P11, rx52_curclass, "$!pos"
    lt $I11, 0, rx52_fail
    repr_get_attr_int rx52_pos, $P11, rx52_curclass, "$!pos"
    repr_bind_attr_int rx52_cur, rx52_curclass, "$!pos", rx52_pos
    $P11 = rx52_cur."decint"()
    repr_get_attr_int $I11, $P11, rx52_curclass, "$!pos"
    lt $I11, 0, rx52_fail
    nqp_rxmark rx52_bstack, rxsubrule56_pass, -1, 0
  rxsubrule56_pass:
    rx52_cstack = rx52_cur."!cursor_capture"($P11, "decint")
    repr_get_attr_int rx52_pos, $P11, rx52_curclass, "$!pos"
    repr_bind_attr_int rx52_cur, rx52_curclass, "$!pos", rx52_pos
    $P11 = rx52_cur."ws"()
    repr_get_attr_int $I11, $P11, rx52_curclass, "$!pos"
    lt $I11, 0, rx52_fail
    repr_get_attr_int rx52_pos, $P11, rx52_curclass, "$!pos"
    nqp_rxpeek $I19, rx52_bstack, rxquantr54_done
    inc $I19
    inc $I19
    set rx52_rep, rx52_bstack[$I19]
    nqp_rxcommit rx52_bstack, rxquantr54_done
    inc rx52_rep
    nqp_rxmark rx52_bstack, rxquantr54_done, rx52_pos, rx52_rep
    add $I11, rx52_pos, 1
    gt $I11, rx52_eos, rx52_fail
    substr $S10, rx52_tgt, rx52_pos, 1
    ne $S10, ucs4:",", rx52_fail
    add rx52_pos, 1
    goto rxquantr54_loop
  rxquantr54_done:
    rx52_cur."!cursor_pass"(rx52_pos, "decints", 'backtrack'=>1)
    .return (rx52_cur)
  rx52_restart:
    repr_get_attr_obj rx52_cstack, rx52_cur, rx52_curclass, "$!cstack"
  rx52_fail:
    unless rx52_bstack, rx52_done
    pop $I19, rx52_bstack
    if_null rx52_cstack, rx52_cstack_done
    unless rx52_cstack, rx52_cstack_done
    dec $I19
    set $P11, rx52_cstack[$I19]
  rx52_cstack_done:
    pop rx52_rep, rx52_bstack
    pop rx52_pos, rx52_bstack
    pop $I19, rx52_bstack
    lt rx52_pos, -1, rx52_done
    lt rx52_pos, 0, rx52_fail
    eq $I19, 0, rx52_fail
    if_null rx52_cstack, rx52_jump
    elements $I18, rx52_bstack
    le $I18, 0, rx52_cut
    dec $I18
    set $I18, rx52_bstack[$I18]
  rx52_cut:
    assign rx52_cstack, $I18
  rx52_jump:
    jump $I19
  rx52_done:
    rx52_cur."!cursor_fail"()
    .return (rx52_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "27_1337966785.387_caps"  :subid("199_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 53
    new $P104, "Hash"
    set $P104["decint"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "27_1337966785.387_nfa"  :subid("200_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 53
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "decint"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "ws"
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "hexint"  :subid("28_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1092
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 55
    .lex "self", param_1092
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1093
    .lex "$/", $P1094
    .local string rx58_tgt
    .local int rx58_pos
    .local int rx58_off
    .local int rx58_eos
    .local int rx58_rep
    .local pmc rx58_cur
    .local pmc rx58_curclass
    .local pmc rx58_bstack
    .local pmc rx58_cstack
    (rx58_cur, rx58_tgt, rx58_pos, rx58_curclass, rx58_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx58_cur
    length rx58_eos, rx58_tgt
    eq $I19, 1, rx58_restart
    repr_get_attr_int $I11, self, rx58_curclass, "$!from"
    ne $I11, -1, rxscan59_done
    goto rxscan59_scan
  rxscan59_loop:
    inc rx58_pos
    gt rx58_pos, rx58_eos, rx58_fail
    repr_bind_attr_int rx58_cur, rx58_curclass, "$!from", rx58_pos
  rxscan59_scan:
    nqp_rxmark rx58_bstack, rxscan59_loop, rx58_pos, 0
  rxscan59_done:
  # rx rxquantr60 ** 1..-1
    nqp_rxmark rx58_bstack, rxquantr60_done, -1, 0
  rxquantr60_loop:
  # rx rxquantr61 ** 1..-1
    nqp_rxmark rx58_bstack, rxquantr61_done, -1, 0
  rxquantr61_loop:
    ge rx58_pos, rx58_eos, rx58_fail
    substr $S11, rx58_tgt, rx58_pos, 1
    index $I11, ucs4:"0123456789abcdefABCDEF", $S11
    lt $I11, 0, rx58_fail
    inc rx58_pos
    nqp_rxpeek $I19, rx58_bstack, rxquantr61_done
    inc $I19
    inc $I19
    set rx58_rep, rx58_bstack[$I19]
    nqp_rxcommit rx58_bstack, rxquantr61_done
    inc rx58_rep
    nqp_rxmark rx58_bstack, rxquantr61_done, rx58_pos, rx58_rep
    goto rxquantr61_loop
  rxquantr61_done:
    nqp_rxpeek $I19, rx58_bstack, rxquantr60_done
    inc $I19
    inc $I19
    set rx58_rep, rx58_bstack[$I19]
    nqp_rxcommit rx58_bstack, rxquantr60_done
    inc rx58_rep
    nqp_rxmark rx58_bstack, rxquantr60_done, rx58_pos, rx58_rep
    add $I11, rx58_pos, 1
    gt $I11, rx58_eos, rx58_fail
    substr $S10, rx58_tgt, rx58_pos, 1
    ne $S10, ucs4:"_", rx58_fail
    add rx58_pos, 1
    goto rxquantr60_loop
  rxquantr60_done:
    rx58_cur."!cursor_pass"(rx58_pos, "hexint", 'backtrack'=>1)
    .return (rx58_cur)
  rx58_restart:
    repr_get_attr_obj rx58_cstack, rx58_cur, rx58_curclass, "$!cstack"
  rx58_fail:
    unless rx58_bstack, rx58_done
    pop $I19, rx58_bstack
    if_null rx58_cstack, rx58_cstack_done
    unless rx58_cstack, rx58_cstack_done
    dec $I19
    set $P11, rx58_cstack[$I19]
  rx58_cstack_done:
    pop rx58_rep, rx58_bstack
    pop rx58_pos, rx58_bstack
    pop $I19, rx58_bstack
    lt rx58_pos, -1, rx58_done
    lt rx58_pos, 0, rx58_fail
    eq $I19, 0, rx58_fail
    if_null rx58_cstack, rx58_jump
    elements $I18, rx58_bstack
    le $I18, 0, rx58_cut
    dec $I18
    set $I18, rx58_bstack[$I18]
  rx58_cut:
    assign rx58_cstack, $I18
  rx58_jump:
    jump $I19
  rx58_done:
    rx58_cur."!cursor_fail"()
    .return (rx58_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "28_1337966785.387_caps"  :subid("201_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 55
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "28_1337966785.387_nfa"  :subid("202_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 55
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 6
    push $P108, "0123456789abcdefABCDEF"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 4
    push $P109, 1
    push $P109, 0
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "hexints"  :subid("29_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1098
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 56
    .lex "self", param_1098
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1099
    .lex "$/", $P1100
    .local string rx62_tgt
    .local int rx62_pos
    .local int rx62_off
    .local int rx62_eos
    .local int rx62_rep
    .local pmc rx62_cur
    .local pmc rx62_curclass
    .local pmc rx62_bstack
    .local pmc rx62_cstack
    (rx62_cur, rx62_tgt, rx62_pos, rx62_curclass, rx62_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx62_cur
    length rx62_eos, rx62_tgt
    eq $I19, 1, rx62_restart
    repr_get_attr_int $I11, self, rx62_curclass, "$!from"
    ne $I11, -1, rxscan63_done
    goto rxscan63_scan
  rxscan63_loop:
    inc rx62_pos
    gt rx62_pos, rx62_eos, rx62_fail
    repr_bind_attr_int rx62_cur, rx62_curclass, "$!from", rx62_pos
  rxscan63_scan:
    nqp_rxmark rx62_bstack, rxscan63_loop, rx62_pos, 0
  rxscan63_done:
  # rx rxquantr64 ** 1..-1
    nqp_rxmark rx62_bstack, rxquantr64_done, -1, 0
  rxquantr64_loop:
    repr_bind_attr_int rx62_cur, rx62_curclass, "$!pos", rx62_pos
    $P11 = rx62_cur."ws"()
    repr_get_attr_int $I11, $P11, rx62_curclass, "$!pos"
    lt $I11, 0, rx62_fail
    repr_get_attr_int rx62_pos, $P11, rx62_curclass, "$!pos"
    repr_bind_attr_int rx62_cur, rx62_curclass, "$!pos", rx62_pos
    $P11 = rx62_cur."hexint"()
    repr_get_attr_int $I11, $P11, rx62_curclass, "$!pos"
    lt $I11, 0, rx62_fail
    nqp_rxmark rx62_bstack, rxsubrule66_pass, -1, 0
  rxsubrule66_pass:
    rx62_cstack = rx62_cur."!cursor_capture"($P11, "hexint")
    repr_get_attr_int rx62_pos, $P11, rx62_curclass, "$!pos"
    repr_bind_attr_int rx62_cur, rx62_curclass, "$!pos", rx62_pos
    $P11 = rx62_cur."ws"()
    repr_get_attr_int $I11, $P11, rx62_curclass, "$!pos"
    lt $I11, 0, rx62_fail
    repr_get_attr_int rx62_pos, $P11, rx62_curclass, "$!pos"
    nqp_rxpeek $I19, rx62_bstack, rxquantr64_done
    inc $I19
    inc $I19
    set rx62_rep, rx62_bstack[$I19]
    nqp_rxcommit rx62_bstack, rxquantr64_done
    inc rx62_rep
    nqp_rxmark rx62_bstack, rxquantr64_done, rx62_pos, rx62_rep
    add $I11, rx62_pos, 1
    gt $I11, rx62_eos, rx62_fail
    substr $S10, rx62_tgt, rx62_pos, 1
    ne $S10, ucs4:",", rx62_fail
    add rx62_pos, 1
    goto rxquantr64_loop
  rxquantr64_done:
    rx62_cur."!cursor_pass"(rx62_pos, "hexints", 'backtrack'=>1)
    .return (rx62_cur)
  rx62_restart:
    repr_get_attr_obj rx62_cstack, rx62_cur, rx62_curclass, "$!cstack"
  rx62_fail:
    unless rx62_bstack, rx62_done
    pop $I19, rx62_bstack
    if_null rx62_cstack, rx62_cstack_done
    unless rx62_cstack, rx62_cstack_done
    dec $I19
    set $P11, rx62_cstack[$I19]
  rx62_cstack_done:
    pop rx62_rep, rx62_bstack
    pop rx62_pos, rx62_bstack
    pop $I19, rx62_bstack
    lt rx62_pos, -1, rx62_done
    lt rx62_pos, 0, rx62_fail
    eq $I19, 0, rx62_fail
    if_null rx62_cstack, rx62_jump
    elements $I18, rx62_bstack
    le $I18, 0, rx62_cut
    dec $I18
    set $I18, rx62_bstack[$I18]
  rx62_cut:
    assign rx62_cstack, $I18
  rx62_jump:
    jump $I19
  rx62_done:
    rx62_cur."!cursor_fail"()
    .return (rx62_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "29_1337966785.387_caps"  :subid("203_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 56
    new $P104, "Hash"
    set $P104["hexint"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "29_1337966785.387_nfa"  :subid("204_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 56
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "hexint"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "ws"
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "octint"  :subid("30_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1104
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 58
    .lex "self", param_1104
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1105
    .lex "$/", $P1106
    .local string rx68_tgt
    .local int rx68_pos
    .local int rx68_off
    .local int rx68_eos
    .local int rx68_rep
    .local pmc rx68_cur
    .local pmc rx68_curclass
    .local pmc rx68_bstack
    .local pmc rx68_cstack
    (rx68_cur, rx68_tgt, rx68_pos, rx68_curclass, rx68_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx68_cur
    length rx68_eos, rx68_tgt
    eq $I19, 1, rx68_restart
    repr_get_attr_int $I11, self, rx68_curclass, "$!from"
    ne $I11, -1, rxscan69_done
    goto rxscan69_scan
  rxscan69_loop:
    inc rx68_pos
    gt rx68_pos, rx68_eos, rx68_fail
    repr_bind_attr_int rx68_cur, rx68_curclass, "$!from", rx68_pos
  rxscan69_scan:
    nqp_rxmark rx68_bstack, rxscan69_loop, rx68_pos, 0
  rxscan69_done:
  # rx rxquantr70 ** 1..-1
    nqp_rxmark rx68_bstack, rxquantr70_done, -1, 0
  rxquantr70_loop:
  # rx rxquantr71 ** 1..-1
    nqp_rxmark rx68_bstack, rxquantr71_done, -1, 0
  rxquantr71_loop:
    ge rx68_pos, rx68_eos, rx68_fail
    substr $S11, rx68_tgt, rx68_pos, 1
    index $I11, ucs4:"01234567", $S11
    lt $I11, 0, rx68_fail
    inc rx68_pos
    nqp_rxpeek $I19, rx68_bstack, rxquantr71_done
    inc $I19
    inc $I19
    set rx68_rep, rx68_bstack[$I19]
    nqp_rxcommit rx68_bstack, rxquantr71_done
    inc rx68_rep
    nqp_rxmark rx68_bstack, rxquantr71_done, rx68_pos, rx68_rep
    goto rxquantr71_loop
  rxquantr71_done:
    nqp_rxpeek $I19, rx68_bstack, rxquantr70_done
    inc $I19
    inc $I19
    set rx68_rep, rx68_bstack[$I19]
    nqp_rxcommit rx68_bstack, rxquantr70_done
    inc rx68_rep
    nqp_rxmark rx68_bstack, rxquantr70_done, rx68_pos, rx68_rep
    add $I11, rx68_pos, 1
    gt $I11, rx68_eos, rx68_fail
    substr $S10, rx68_tgt, rx68_pos, 1
    ne $S10, ucs4:"_", rx68_fail
    add rx68_pos, 1
    goto rxquantr70_loop
  rxquantr70_done:
    rx68_cur."!cursor_pass"(rx68_pos, "octint", 'backtrack'=>1)
    .return (rx68_cur)
  rx68_restart:
    repr_get_attr_obj rx68_cstack, rx68_cur, rx68_curclass, "$!cstack"
  rx68_fail:
    unless rx68_bstack, rx68_done
    pop $I19, rx68_bstack
    if_null rx68_cstack, rx68_cstack_done
    unless rx68_cstack, rx68_cstack_done
    dec $I19
    set $P11, rx68_cstack[$I19]
  rx68_cstack_done:
    pop rx68_rep, rx68_bstack
    pop rx68_pos, rx68_bstack
    pop $I19, rx68_bstack
    lt rx68_pos, -1, rx68_done
    lt rx68_pos, 0, rx68_fail
    eq $I19, 0, rx68_fail
    if_null rx68_cstack, rx68_jump
    elements $I18, rx68_bstack
    le $I18, 0, rx68_cut
    dec $I18
    set $I18, rx68_bstack[$I18]
  rx68_cut:
    assign rx68_cstack, $I18
  rx68_jump:
    jump $I19
  rx68_done:
    rx68_cur."!cursor_fail"()
    .return (rx68_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "30_1337966785.387_caps"  :subid("205_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 58
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "30_1337966785.387_nfa"  :subid("206_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 58
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 6
    push $P108, "01234567"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 4
    push $P109, 1
    push $P109, 0
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "octints"  :subid("31_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1110
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 59
    .lex "self", param_1110
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1111
    .lex "$/", $P1112
    .local string rx72_tgt
    .local int rx72_pos
    .local int rx72_off
    .local int rx72_eos
    .local int rx72_rep
    .local pmc rx72_cur
    .local pmc rx72_curclass
    .local pmc rx72_bstack
    .local pmc rx72_cstack
    (rx72_cur, rx72_tgt, rx72_pos, rx72_curclass, rx72_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx72_cur
    length rx72_eos, rx72_tgt
    eq $I19, 1, rx72_restart
    repr_get_attr_int $I11, self, rx72_curclass, "$!from"
    ne $I11, -1, rxscan73_done
    goto rxscan73_scan
  rxscan73_loop:
    inc rx72_pos
    gt rx72_pos, rx72_eos, rx72_fail
    repr_bind_attr_int rx72_cur, rx72_curclass, "$!from", rx72_pos
  rxscan73_scan:
    nqp_rxmark rx72_bstack, rxscan73_loop, rx72_pos, 0
  rxscan73_done:
  # rx rxquantr74 ** 1..-1
    nqp_rxmark rx72_bstack, rxquantr74_done, -1, 0
  rxquantr74_loop:
    repr_bind_attr_int rx72_cur, rx72_curclass, "$!pos", rx72_pos
    $P11 = rx72_cur."ws"()
    repr_get_attr_int $I11, $P11, rx72_curclass, "$!pos"
    lt $I11, 0, rx72_fail
    repr_get_attr_int rx72_pos, $P11, rx72_curclass, "$!pos"
    repr_bind_attr_int rx72_cur, rx72_curclass, "$!pos", rx72_pos
    $P11 = rx72_cur."octint"()
    repr_get_attr_int $I11, $P11, rx72_curclass, "$!pos"
    lt $I11, 0, rx72_fail
    nqp_rxmark rx72_bstack, rxsubrule76_pass, -1, 0
  rxsubrule76_pass:
    rx72_cstack = rx72_cur."!cursor_capture"($P11, "octint")
    repr_get_attr_int rx72_pos, $P11, rx72_curclass, "$!pos"
    repr_bind_attr_int rx72_cur, rx72_curclass, "$!pos", rx72_pos
    $P11 = rx72_cur."ws"()
    repr_get_attr_int $I11, $P11, rx72_curclass, "$!pos"
    lt $I11, 0, rx72_fail
    repr_get_attr_int rx72_pos, $P11, rx72_curclass, "$!pos"
    nqp_rxpeek $I19, rx72_bstack, rxquantr74_done
    inc $I19
    inc $I19
    set rx72_rep, rx72_bstack[$I19]
    nqp_rxcommit rx72_bstack, rxquantr74_done
    inc rx72_rep
    nqp_rxmark rx72_bstack, rxquantr74_done, rx72_pos, rx72_rep
    add $I11, rx72_pos, 1
    gt $I11, rx72_eos, rx72_fail
    substr $S10, rx72_tgt, rx72_pos, 1
    ne $S10, ucs4:",", rx72_fail
    add rx72_pos, 1
    goto rxquantr74_loop
  rxquantr74_done:
    rx72_cur."!cursor_pass"(rx72_pos, "octints", 'backtrack'=>1)
    .return (rx72_cur)
  rx72_restart:
    repr_get_attr_obj rx72_cstack, rx72_cur, rx72_curclass, "$!cstack"
  rx72_fail:
    unless rx72_bstack, rx72_done
    pop $I19, rx72_bstack
    if_null rx72_cstack, rx72_cstack_done
    unless rx72_cstack, rx72_cstack_done
    dec $I19
    set $P11, rx72_cstack[$I19]
  rx72_cstack_done:
    pop rx72_rep, rx72_bstack
    pop rx72_pos, rx72_bstack
    pop $I19, rx72_bstack
    lt rx72_pos, -1, rx72_done
    lt rx72_pos, 0, rx72_fail
    eq $I19, 0, rx72_fail
    if_null rx72_cstack, rx72_jump
    elements $I18, rx72_bstack
    le $I18, 0, rx72_cut
    dec $I18
    set $I18, rx72_bstack[$I18]
  rx72_cut:
    assign rx72_cstack, $I18
  rx72_jump:
    jump $I19
  rx72_done:
    rx72_cur."!cursor_fail"()
    .return (rx72_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "31_1337966785.387_caps"  :subid("207_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 59
    new $P104, "Hash"
    set $P104["octint"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "31_1337966785.387_nfa"  :subid("208_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 59
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "octint"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "ws"
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "binint"  :subid("32_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1116
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 61
    .lex "self", param_1116
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1117
    .lex "$/", $P1118
    .local string rx78_tgt
    .local int rx78_pos
    .local int rx78_off
    .local int rx78_eos
    .local int rx78_rep
    .local pmc rx78_cur
    .local pmc rx78_curclass
    .local pmc rx78_bstack
    .local pmc rx78_cstack
    (rx78_cur, rx78_tgt, rx78_pos, rx78_curclass, rx78_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx78_cur
    length rx78_eos, rx78_tgt
    eq $I19, 1, rx78_restart
    repr_get_attr_int $I11, self, rx78_curclass, "$!from"
    ne $I11, -1, rxscan79_done
    goto rxscan79_scan
  rxscan79_loop:
    inc rx78_pos
    gt rx78_pos, rx78_eos, rx78_fail
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!from", rx78_pos
  rxscan79_scan:
    nqp_rxmark rx78_bstack, rxscan79_loop, rx78_pos, 0
  rxscan79_done:
  # rx rxquantr80 ** 1..-1
    nqp_rxmark rx78_bstack, rxquantr80_done, -1, 0
  rxquantr80_loop:
  # rx rxquantr81 ** 1..-1
    nqp_rxmark rx78_bstack, rxquantr81_done, -1, 0
  rxquantr81_loop:
    ge rx78_pos, rx78_eos, rx78_fail
    substr $S11, rx78_tgt, rx78_pos, 1
    index $I11, ucs4:"01", $S11
    lt $I11, 0, rx78_fail
    inc rx78_pos
    nqp_rxpeek $I19, rx78_bstack, rxquantr81_done
    inc $I19
    inc $I19
    set rx78_rep, rx78_bstack[$I19]
    nqp_rxcommit rx78_bstack, rxquantr81_done
    inc rx78_rep
    nqp_rxmark rx78_bstack, rxquantr81_done, rx78_pos, rx78_rep
    goto rxquantr81_loop
  rxquantr81_done:
    nqp_rxpeek $I19, rx78_bstack, rxquantr80_done
    inc $I19
    inc $I19
    set rx78_rep, rx78_bstack[$I19]
    nqp_rxcommit rx78_bstack, rxquantr80_done
    inc rx78_rep
    nqp_rxmark rx78_bstack, rxquantr80_done, rx78_pos, rx78_rep
    add $I11, rx78_pos, 1
    gt $I11, rx78_eos, rx78_fail
    substr $S10, rx78_tgt, rx78_pos, 1
    ne $S10, ucs4:"_", rx78_fail
    add rx78_pos, 1
    goto rxquantr80_loop
  rxquantr80_done:
    rx78_cur."!cursor_pass"(rx78_pos, "binint", 'backtrack'=>1)
    .return (rx78_cur)
  rx78_restart:
    repr_get_attr_obj rx78_cstack, rx78_cur, rx78_curclass, "$!cstack"
  rx78_fail:
    unless rx78_bstack, rx78_done
    pop $I19, rx78_bstack
    if_null rx78_cstack, rx78_cstack_done
    unless rx78_cstack, rx78_cstack_done
    dec $I19
    set $P11, rx78_cstack[$I19]
  rx78_cstack_done:
    pop rx78_rep, rx78_bstack
    pop rx78_pos, rx78_bstack
    pop $I19, rx78_bstack
    lt rx78_pos, -1, rx78_done
    lt rx78_pos, 0, rx78_fail
    eq $I19, 0, rx78_fail
    if_null rx78_cstack, rx78_jump
    elements $I18, rx78_bstack
    le $I18, 0, rx78_cut
    dec $I18
    set $I18, rx78_bstack[$I18]
  rx78_cut:
    assign rx78_cstack, $I18
  rx78_jump:
    jump $I19
  rx78_done:
    rx78_cur."!cursor_fail"()
    .return (rx78_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "32_1337966785.387_caps"  :subid("209_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 61
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "32_1337966785.387_nfa"  :subid("210_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 61
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 6
    push $P108, "01"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 4
    push $P109, 1
    push $P109, 0
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "binints"  :subid("33_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1122
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 62
    .lex "self", param_1122
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1123
    .lex "$/", $P1124
    .local string rx82_tgt
    .local int rx82_pos
    .local int rx82_off
    .local int rx82_eos
    .local int rx82_rep
    .local pmc rx82_cur
    .local pmc rx82_curclass
    .local pmc rx82_bstack
    .local pmc rx82_cstack
    (rx82_cur, rx82_tgt, rx82_pos, rx82_curclass, rx82_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx82_cur
    length rx82_eos, rx82_tgt
    eq $I19, 1, rx82_restart
    repr_get_attr_int $I11, self, rx82_curclass, "$!from"
    ne $I11, -1, rxscan83_done
    goto rxscan83_scan
  rxscan83_loop:
    inc rx82_pos
    gt rx82_pos, rx82_eos, rx82_fail
    repr_bind_attr_int rx82_cur, rx82_curclass, "$!from", rx82_pos
  rxscan83_scan:
    nqp_rxmark rx82_bstack, rxscan83_loop, rx82_pos, 0
  rxscan83_done:
  # rx rxquantr84 ** 1..-1
    nqp_rxmark rx82_bstack, rxquantr84_done, -1, 0
  rxquantr84_loop:
    repr_bind_attr_int rx82_cur, rx82_curclass, "$!pos", rx82_pos
    $P11 = rx82_cur."ws"()
    repr_get_attr_int $I11, $P11, rx82_curclass, "$!pos"
    lt $I11, 0, rx82_fail
    repr_get_attr_int rx82_pos, $P11, rx82_curclass, "$!pos"
    repr_bind_attr_int rx82_cur, rx82_curclass, "$!pos", rx82_pos
    $P11 = rx82_cur."binint"()
    repr_get_attr_int $I11, $P11, rx82_curclass, "$!pos"
    lt $I11, 0, rx82_fail
    nqp_rxmark rx82_bstack, rxsubrule86_pass, -1, 0
  rxsubrule86_pass:
    rx82_cstack = rx82_cur."!cursor_capture"($P11, "binint")
    repr_get_attr_int rx82_pos, $P11, rx82_curclass, "$!pos"
    repr_bind_attr_int rx82_cur, rx82_curclass, "$!pos", rx82_pos
    $P11 = rx82_cur."ws"()
    repr_get_attr_int $I11, $P11, rx82_curclass, "$!pos"
    lt $I11, 0, rx82_fail
    repr_get_attr_int rx82_pos, $P11, rx82_curclass, "$!pos"
    nqp_rxpeek $I19, rx82_bstack, rxquantr84_done
    inc $I19
    inc $I19
    set rx82_rep, rx82_bstack[$I19]
    nqp_rxcommit rx82_bstack, rxquantr84_done
    inc rx82_rep
    nqp_rxmark rx82_bstack, rxquantr84_done, rx82_pos, rx82_rep
    add $I11, rx82_pos, 1
    gt $I11, rx82_eos, rx82_fail
    substr $S10, rx82_tgt, rx82_pos, 1
    ne $S10, ucs4:",", rx82_fail
    add rx82_pos, 1
    goto rxquantr84_loop
  rxquantr84_done:
    rx82_cur."!cursor_pass"(rx82_pos, "binints", 'backtrack'=>1)
    .return (rx82_cur)
  rx82_restart:
    repr_get_attr_obj rx82_cstack, rx82_cur, rx82_curclass, "$!cstack"
  rx82_fail:
    unless rx82_bstack, rx82_done
    pop $I19, rx82_bstack
    if_null rx82_cstack, rx82_cstack_done
    unless rx82_cstack, rx82_cstack_done
    dec $I19
    set $P11, rx82_cstack[$I19]
  rx82_cstack_done:
    pop rx82_rep, rx82_bstack
    pop rx82_pos, rx82_bstack
    pop $I19, rx82_bstack
    lt rx82_pos, -1, rx82_done
    lt rx82_pos, 0, rx82_fail
    eq $I19, 0, rx82_fail
    if_null rx82_cstack, rx82_jump
    elements $I18, rx82_bstack
    le $I18, 0, rx82_cut
    dec $I18
    set $I18, rx82_bstack[$I18]
  rx82_cut:
    assign rx82_cstack, $I18
  rx82_jump:
    jump $I19
  rx82_done:
    rx82_cur."!cursor_fail"()
    .return (rx82_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "33_1337966785.387_caps"  :subid("211_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 62
    new $P104, "Hash"
    set $P104["binint"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "33_1337966785.387_nfa"  :subid("212_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 62
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "binint"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "ws"
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "integer"  :subid("34_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1128
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 64
    .lex "self", param_1128
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1129
    .lex "$/", $P1130
    .local string rx88_tgt
    .local int rx88_pos
    .local int rx88_off
    .local int rx88_eos
    .local int rx88_rep
    .local pmc rx88_cur
    .local pmc rx88_curclass
    .local pmc rx88_bstack
    .local pmc rx88_cstack
    (rx88_cur, rx88_tgt, rx88_pos, rx88_curclass, rx88_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx88_cur
    length rx88_eos, rx88_tgt
    eq $I19, 1, rx88_restart
    repr_get_attr_int $I11, self, rx88_curclass, "$!from"
    ne $I11, -1, rxscan89_done
    goto rxscan89_scan
  rxscan89_loop:
    inc rx88_pos
    gt rx88_pos, rx88_eos, rx88_fail
    repr_bind_attr_int rx88_cur, rx88_curclass, "$!from", rx88_pos
  rxscan89_scan:
    nqp_rxmark rx88_bstack, rxscan89_loop, rx88_pos, 0
  rxscan89_done:
  alt90_0:
    nqp_rxmark rx88_bstack, alt90_1, rx88_pos, 0
    add $I11, rx88_pos, 1
    gt $I11, rx88_eos, rx88_fail
    substr $S10, rx88_tgt, rx88_pos, 1
    ne $S10, ucs4:"0", rx88_fail
    add rx88_pos, 1
  alt91_0:
    nqp_rxmark rx88_bstack, alt91_1, rx88_pos, 0
    add $I11, rx88_pos, 1
    gt $I11, rx88_eos, rx88_fail
    substr $S10, rx88_tgt, rx88_pos, 1
    ne $S10, ucs4:"b", rx88_fail
    add rx88_pos, 1
    repr_bind_attr_int rx88_cur, rx88_curclass, "$!pos", rx88_pos
    $P11 = rx88_cur."binint"()
    repr_get_attr_int $I11, $P11, rx88_curclass, "$!pos"
    lt $I11, 0, rx88_fail
    nqp_rxmark rx88_bstack, rxsubrule92_pass, -1, 0
  rxsubrule92_pass:
    rx88_cstack = rx88_cur."!cursor_capture"($P11, "VALUE=binint")
    repr_get_attr_int rx88_pos, $P11, rx88_curclass, "$!pos"
    goto alt91_end
  alt91_1:
    nqp_rxmark rx88_bstack, alt91_2, rx88_pos, 0
    add $I11, rx88_pos, 1
    gt $I11, rx88_eos, rx88_fail
    substr $S10, rx88_tgt, rx88_pos, 1
    ne $S10, ucs4:"o", rx88_fail
    add rx88_pos, 1
    repr_bind_attr_int rx88_cur, rx88_curclass, "$!pos", rx88_pos
    $P11 = rx88_cur."octint"()
    repr_get_attr_int $I11, $P11, rx88_curclass, "$!pos"
    lt $I11, 0, rx88_fail
    nqp_rxmark rx88_bstack, rxsubrule93_pass, -1, 0
  rxsubrule93_pass:
    rx88_cstack = rx88_cur."!cursor_capture"($P11, "VALUE=octint")
    repr_get_attr_int rx88_pos, $P11, rx88_curclass, "$!pos"
    goto alt91_end
  alt91_2:
    nqp_rxmark rx88_bstack, alt91_3, rx88_pos, 0
    add $I11, rx88_pos, 1
    gt $I11, rx88_eos, rx88_fail
    substr $S10, rx88_tgt, rx88_pos, 1
    ne $S10, ucs4:"x", rx88_fail
    add rx88_pos, 1
    repr_bind_attr_int rx88_cur, rx88_curclass, "$!pos", rx88_pos
    $P11 = rx88_cur."hexint"()
    repr_get_attr_int $I11, $P11, rx88_curclass, "$!pos"
    lt $I11, 0, rx88_fail
    nqp_rxmark rx88_bstack, rxsubrule94_pass, -1, 0
  rxsubrule94_pass:
    rx88_cstack = rx88_cur."!cursor_capture"($P11, "VALUE=hexint")
    repr_get_attr_int rx88_pos, $P11, rx88_curclass, "$!pos"
    goto alt91_end
  alt91_3:
    add $I11, rx88_pos, 1
    gt $I11, rx88_eos, rx88_fail
    substr $S10, rx88_tgt, rx88_pos, 1
    ne $S10, ucs4:"d", rx88_fail
    add rx88_pos, 1
    repr_bind_attr_int rx88_cur, rx88_curclass, "$!pos", rx88_pos
    $P11 = rx88_cur."decint"()
    repr_get_attr_int $I11, $P11, rx88_curclass, "$!pos"
    lt $I11, 0, rx88_fail
    nqp_rxmark rx88_bstack, rxsubrule95_pass, -1, 0
  rxsubrule95_pass:
    rx88_cstack = rx88_cur."!cursor_capture"($P11, "VALUE=decint")
    repr_get_attr_int rx88_pos, $P11, rx88_curclass, "$!pos"
  alt91_end:
    goto alt90_end
  alt90_1:
    repr_bind_attr_int rx88_cur, rx88_curclass, "$!pos", rx88_pos
    $P11 = rx88_cur."decint"()
    repr_get_attr_int $I11, $P11, rx88_curclass, "$!pos"
    lt $I11, 0, rx88_fail
    nqp_rxmark rx88_bstack, rxsubrule96_pass, -1, 0
  rxsubrule96_pass:
    rx88_cstack = rx88_cur."!cursor_capture"($P11, "VALUE=decint")
    repr_get_attr_int rx88_pos, $P11, rx88_curclass, "$!pos"
  alt90_end:
    rx88_cur."!cursor_pass"(rx88_pos, "integer", 'backtrack'=>1)
    .return (rx88_cur)
  rx88_restart:
    repr_get_attr_obj rx88_cstack, rx88_cur, rx88_curclass, "$!cstack"
  rx88_fail:
    unless rx88_bstack, rx88_done
    pop $I19, rx88_bstack
    if_null rx88_cstack, rx88_cstack_done
    unless rx88_cstack, rx88_cstack_done
    dec $I19
    set $P11, rx88_cstack[$I19]
  rx88_cstack_done:
    pop rx88_rep, rx88_bstack
    pop rx88_pos, rx88_bstack
    pop $I19, rx88_bstack
    lt rx88_pos, -1, rx88_done
    lt rx88_pos, 0, rx88_fail
    eq $I19, 0, rx88_fail
    if_null rx88_cstack, rx88_jump
    elements $I18, rx88_bstack
    le $I18, 0, rx88_cut
    dec $I18
    set $I18, rx88_bstack[$I18]
  rx88_cut:
    assign rx88_cstack, $I18
  rx88_jump:
    jump $I19
  rx88_done:
    rx88_cur."!cursor_fail"()
    .return (rx88_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "34_1337966785.387_caps"  :subid("213_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 64
    new $P104, "Hash"
    set $P104["VALUE"], 0
    set $P104["binint"], 0
    set $P104["octint"], 0
    set $P104["hexint"], 0
    set $P104["decint"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "34_1337966785.387_nfa"  :subid("214_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 64
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 48
    push $P105, 2
    push $P105, 8
    push $P105, "decint"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 98
    push $P106, 3
    push $P106, 2
    push $P106, 111
    push $P106, 4
    push $P106, 2
    push $P106, 120
    push $P106, 5
    push $P106, 2
    push $P106, 100
    push $P106, 6
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "binint"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "octint"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "hexint"
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, 8
    push $P110, "decint"
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P104
    push $P111, $P105
    push $P111, $P106
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "dec_number"  :subid("35_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1134
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 75
    .lex "self", param_1134
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1135
    .lex "$/", $P1136
    .local string rx97_tgt
    .local int rx97_pos
    .local int rx97_off
    .local int rx97_eos
    .local int rx97_rep
    .local pmc rx97_cur
    .local pmc rx97_curclass
    .local pmc rx97_bstack
    .local pmc rx97_cstack
    (rx97_cur, rx97_tgt, rx97_pos, rx97_curclass, rx97_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx97_cur
    length rx97_eos, rx97_tgt
    eq $I19, 1, rx97_restart
    repr_get_attr_int $I11, self, rx97_curclass, "$!from"
    ne $I11, -1, rxscan98_done
    goto rxscan98_scan
  rxscan98_loop:
    inc rx97_pos
    gt rx97_pos, rx97_eos, rx97_fail
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!from", rx97_pos
  rxscan98_scan:
    nqp_rxmark rx97_bstack, rxscan98_loop, rx97_pos, 0
  rxscan98_done:
  alt99_0:
    nqp_rxmark rx97_bstack, alt99_1, rx97_pos, 0
    nqp_rxmark rx97_bstack, rxcap100_fail, rx97_pos, 0
    add $I11, rx97_pos, 1
    gt $I11, rx97_eos, rx97_fail
    substr $S10, rx97_tgt, rx97_pos, 1
    ne $S10, ucs4:".", rx97_fail
    add rx97_pos, 1
  # rx rxquantr101 ** 1..-1
    nqp_rxmark rx97_bstack, rxquantr101_done, -1, 0
  rxquantr101_loop:
    ge rx97_pos, rx97_eos, rx97_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx97_tgt, rx97_pos
    unless $I11, rx97_fail
    add rx97_pos, 1
    nqp_rxpeek $I19, rx97_bstack, rxquantr101_done
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr101_done
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr101_done, rx97_pos, rx97_rep
    goto rxquantr101_loop
  rxquantr101_done:
    nqp_rxpeek $I19, rx97_bstack, rxcap100_fail
    inc $I19
    set $I11, rx97_bstack[$I19]
    $P11 = rx97_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx97_pos)
    rx97_cstack = rx97_cur."!cursor_capture"($P11, "coeff")
    goto rxcap100_done
  rxcap100_fail:
    goto rx97_fail
  rxcap100_done:
  # rx rxquantr102 ** 0..1
    nqp_rxmark rx97_bstack, rxquantr102_done, rx97_pos, 0
  rxquantr102_loop:
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."escale"()
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail
    goto rxsubrule103_pass
  rxsubrule103_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail
  rxsubrule103_pass:
    rx97_cstack = rx97_cur."!cursor_capture"($P11, "escale")
    set_addr $I11, rxsubrule103_back
    push rx97_bstack, $I11
    push rx97_bstack, 0
    push rx97_bstack, rx97_pos
    elements $I11, rx97_cstack
    push rx97_bstack, $I11
    repr_get_attr_int rx97_pos, $P11, rx97_curclass, "$!pos"
    nqp_rxpeek $I19, rx97_bstack, rxquantr102_done
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr102_done
    inc rx97_rep
  rxquantr102_done:
    goto alt99_end
  alt99_1:
    nqp_rxmark rx97_bstack, alt99_2, rx97_pos, 0
    nqp_rxmark rx97_bstack, rxcap104_fail, rx97_pos, 0
  # rx rxquantr105 ** 1..-1
    nqp_rxmark rx97_bstack, rxquantr105_done, -1, 0
  rxquantr105_loop:
    ge rx97_pos, rx97_eos, rx97_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx97_tgt, rx97_pos
    unless $I11, rx97_fail
    add rx97_pos, 1
    nqp_rxpeek $I19, rx97_bstack, rxquantr105_done
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr105_done
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr105_done, rx97_pos, rx97_rep
    goto rxquantr105_loop
  rxquantr105_done:
    add $I11, rx97_pos, 1
    gt $I11, rx97_eos, rx97_fail
    substr $S10, rx97_tgt, rx97_pos, 1
    ne $S10, ucs4:".", rx97_fail
    add rx97_pos, 1
  # rx rxquantr106 ** 1..-1
    nqp_rxmark rx97_bstack, rxquantr106_done, -1, 0
  rxquantr106_loop:
    ge rx97_pos, rx97_eos, rx97_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx97_tgt, rx97_pos
    unless $I11, rx97_fail
    add rx97_pos, 1
    nqp_rxpeek $I19, rx97_bstack, rxquantr106_done
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr106_done
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr106_done, rx97_pos, rx97_rep
    goto rxquantr106_loop
  rxquantr106_done:
    nqp_rxpeek $I19, rx97_bstack, rxcap104_fail
    inc $I19
    set $I11, rx97_bstack[$I19]
    $P11 = rx97_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx97_pos)
    rx97_cstack = rx97_cur."!cursor_capture"($P11, "coeff")
    goto rxcap104_done
  rxcap104_fail:
    goto rx97_fail
  rxcap104_done:
  # rx rxquantr107 ** 0..1
    nqp_rxmark rx97_bstack, rxquantr107_done, rx97_pos, 0
  rxquantr107_loop:
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."escale"()
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail
    goto rxsubrule108_pass
  rxsubrule108_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail
  rxsubrule108_pass:
    rx97_cstack = rx97_cur."!cursor_capture"($P11, "escale")
    set_addr $I11, rxsubrule108_back
    push rx97_bstack, $I11
    push rx97_bstack, 0
    push rx97_bstack, rx97_pos
    elements $I11, rx97_cstack
    push rx97_bstack, $I11
    repr_get_attr_int rx97_pos, $P11, rx97_curclass, "$!pos"
    nqp_rxpeek $I19, rx97_bstack, rxquantr107_done
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr107_done
    inc rx97_rep
  rxquantr107_done:
    goto alt99_end
  alt99_2:
    nqp_rxmark rx97_bstack, rxcap109_fail, rx97_pos, 0
  # rx rxquantr110 ** 1..-1
    nqp_rxmark rx97_bstack, rxquantr110_done, -1, 0
  rxquantr110_loop:
    ge rx97_pos, rx97_eos, rx97_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx97_tgt, rx97_pos
    unless $I11, rx97_fail
    add rx97_pos, 1
    nqp_rxpeek $I19, rx97_bstack, rxquantr110_done
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr110_done
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr110_done, rx97_pos, rx97_rep
    goto rxquantr110_loop
  rxquantr110_done:
    nqp_rxpeek $I19, rx97_bstack, rxcap109_fail
    inc $I19
    set $I11, rx97_bstack[$I19]
    $P11 = rx97_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx97_pos)
    rx97_cstack = rx97_cur."!cursor_capture"($P11, "coeff")
    goto rxcap109_done
  rxcap109_fail:
    goto rx97_fail
  rxcap109_done:
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."escale"()
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail
    nqp_rxmark rx97_bstack, rxsubrule111_pass, -1, 0
  rxsubrule111_pass:
    rx97_cstack = rx97_cur."!cursor_capture"($P11, "escale")
    repr_get_attr_int rx97_pos, $P11, rx97_curclass, "$!pos"
  alt99_end:
    rx97_cur."!cursor_pass"(rx97_pos, "dec_number", 'backtrack'=>1)
    .return (rx97_cur)
  rx97_restart:
    repr_get_attr_obj rx97_cstack, rx97_cur, rx97_curclass, "$!cstack"
  rx97_fail:
    unless rx97_bstack, rx97_done
    pop $I19, rx97_bstack
    if_null rx97_cstack, rx97_cstack_done
    unless rx97_cstack, rx97_cstack_done
    dec $I19
    set $P11, rx97_cstack[$I19]
  rx97_cstack_done:
    pop rx97_rep, rx97_bstack
    pop rx97_pos, rx97_bstack
    pop $I19, rx97_bstack
    lt rx97_pos, -1, rx97_done
    lt rx97_pos, 0, rx97_fail
    eq $I19, 0, rx97_fail
    if_null rx97_cstack, rx97_jump
    elements $I18, rx97_bstack
    le $I18, 0, rx97_cut
    dec $I18
    set $I18, rx97_bstack[$I18]
  rx97_cut:
    assign rx97_cstack, $I18
  rx97_jump:
    jump $I19
  rx97_done:
    rx97_cur."!cursor_fail"()
    .return (rx97_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "35_1337966785.387_caps"  :subid("215_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 75
    new $P104, "Hash"
    set $P104["coeff"], 0
    set $P104["escale"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "35_1337966785.387_nfa"  :subid("216_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 75
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 46
    push $P105, 2
    push $P105, 1
    push $P105, 0
    push $P105, 6
    push $P105, 1
    push $P105, 0
    push $P105, 13
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 4
    push $P107, 8
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 3
    push $P108, 1
    push $P108, 0
    push $P108, 5
    push $P108, 8
    push $P108, "escale"
    push $P108, 0
    push $P108, 1
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    new $P110, "ResizablePMCArray"
    push $P110, 4
    push $P110, 8
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 1
    push $P111, 0
    push $P111, 6
    push $P111, 1
    push $P111, 0
    push $P111, 8
    push $P111, 2
    push $P111, 46
    push $P111, 9
    new $P112, "ResizablePMCArray"
    new $P113, "ResizablePMCArray"
    push $P113, 1
    push $P113, 0
    push $P113, 10
    new $P114, "ResizablePMCArray"
    push $P114, 4
    push $P114, 8
    push $P114, 11
    new $P115, "ResizablePMCArray"
    push $P115, 1
    push $P115, 0
    push $P115, 10
    push $P115, 1
    push $P115, 0
    push $P115, 12
    push $P115, 8
    push $P115, "escale"
    push $P115, 0
    push $P115, 1
    push $P115, 0
    push $P115, 0
    new $P116, "ResizablePMCArray"
    new $P117, "ResizablePMCArray"
    push $P117, 4
    push $P117, 8
    push $P117, 14
    new $P118, "ResizablePMCArray"
    push $P118, 1
    push $P118, 0
    push $P118, 13
    push $P118, 1
    push $P118, 0
    push $P118, 15
    push $P118, 8
    push $P118, "escale"
    push $P118, 0
    new $P119, "ResizablePMCArray"
    new $P120, "ResizablePMCArray"
    push $P120, $P104
    push $P120, $P105
    push $P120, $P106
    push $P120, $P107
    push $P120, $P108
    push $P120, $P109
    push $P120, $P110
    push $P120, $P111
    push $P120, $P112
    push $P120, $P113
    push $P120, $P114
    push $P120, $P115
    push $P120, $P116
    push $P120, $P117
    push $P120, $P118
    push $P120, $P119
    .return ($P120)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "escale"  :subid("36_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1140
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 81
    .lex "self", param_1140
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1141
    .lex "$/", $P1142
    .local string rx112_tgt
    .local int rx112_pos
    .local int rx112_off
    .local int rx112_eos
    .local int rx112_rep
    .local pmc rx112_cur
    .local pmc rx112_curclass
    .local pmc rx112_bstack
    .local pmc rx112_cstack
    (rx112_cur, rx112_tgt, rx112_pos, rx112_curclass, rx112_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx112_cur
    length rx112_eos, rx112_tgt
    eq $I19, 1, rx112_restart
    repr_get_attr_int $I11, self, rx112_curclass, "$!from"
    ne $I11, -1, rxscan113_done
    goto rxscan113_scan
  rxscan113_loop:
    inc rx112_pos
    gt rx112_pos, rx112_eos, rx112_fail
    repr_bind_attr_int rx112_cur, rx112_curclass, "$!from", rx112_pos
  rxscan113_scan:
    nqp_rxmark rx112_bstack, rxscan113_loop, rx112_pos, 0
  rxscan113_done:
    ge rx112_pos, rx112_eos, rx112_fail
    substr $S11, rx112_tgt, rx112_pos, 1
    index $I11, ucs4:"Ee", $S11
    lt $I11, 0, rx112_fail
    inc rx112_pos
  # rx rxquantr114 ** 0..1
    nqp_rxmark rx112_bstack, rxquantr114_done, rx112_pos, 0
  rxquantr114_loop:
  alt115_0:
    nqp_rxmark rx112_bstack, alt115_1, rx112_pos, 0
    add $I11, rx112_pos, 1
    gt $I11, rx112_eos, rx112_fail
    substr $S10, rx112_tgt, rx112_pos, 1
    ne $S10, ucs4:"-", rx112_fail
    add rx112_pos, 1
    goto alt115_end
  alt115_1:
    ge rx112_pos, rx112_eos, rx112_fail
    substr $S11, rx112_tgt, rx112_pos, 1
    index $I11, ucs4:"+", $S11
    lt $I11, 0, rx112_fail
    inc rx112_pos
  alt115_end:
    nqp_rxpeek $I19, rx112_bstack, rxquantr114_done
    inc $I19
    inc $I19
    set rx112_rep, rx112_bstack[$I19]
    nqp_rxcommit rx112_bstack, rxquantr114_done
    inc rx112_rep
  rxquantr114_done:
  # rx rxquantr116 ** 1..-1
    nqp_rxmark rx112_bstack, rxquantr116_done, -1, 0
  rxquantr116_loop:
    ge rx112_pos, rx112_eos, rx112_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx112_tgt, rx112_pos
    unless $I11, rx112_fail
    add rx112_pos, 1
    nqp_rxpeek $I19, rx112_bstack, rxquantr116_done
    inc $I19
    inc $I19
    set rx112_rep, rx112_bstack[$I19]
    nqp_rxcommit rx112_bstack, rxquantr116_done
    inc rx112_rep
    nqp_rxmark rx112_bstack, rxquantr116_done, rx112_pos, rx112_rep
    goto rxquantr116_loop
  rxquantr116_done:
    rx112_cur."!cursor_pass"(rx112_pos, "escale", 'backtrack'=>1)
    .return (rx112_cur)
  rx112_restart:
    repr_get_attr_obj rx112_cstack, rx112_cur, rx112_curclass, "$!cstack"
  rx112_fail:
    unless rx112_bstack, rx112_done
    pop $I19, rx112_bstack
    if_null rx112_cstack, rx112_cstack_done
    unless rx112_cstack, rx112_cstack_done
    dec $I19
    set $P11, rx112_cstack[$I19]
  rx112_cstack_done:
    pop rx112_rep, rx112_bstack
    pop rx112_pos, rx112_bstack
    pop $I19, rx112_bstack
    lt rx112_pos, -1, rx112_done
    lt rx112_pos, 0, rx112_fail
    eq $I19, 0, rx112_fail
    if_null rx112_cstack, rx112_jump
    elements $I18, rx112_bstack
    le $I18, 0, rx112_cut
    dec $I18
    set $I18, rx112_bstack[$I18]
  rx112_cut:
    assign rx112_cstack, $I18
  rx112_jump:
    jump $I19
  rx112_done:
    rx112_cur."!cursor_fail"()
    .return (rx112_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "36_1337966785.387_caps"  :subid("217_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 81
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "36_1337966785.387_nfa"  :subid("218_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 81
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "Ee"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 45
    push $P106, 3
    push $P106, 6
    push $P106, "+"
    push $P106, 3
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 4
    push $P108, 8
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 4
    push $P109, 1
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape"  :subid("37_1337966785.387")
    .param pmc param_1146
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 83
    .lex "self", param_1146
    $P103 = param_1146."!protoregex"("quote_escape")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<backslash>"  :subid("38_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1148
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 84
    .lex "self", param_1148
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1149
    .lex "$/", $P1150
    .local string rx117_tgt
    .local int rx117_pos
    .local int rx117_off
    .local int rx117_eos
    .local int rx117_rep
    .local pmc rx117_cur
    .local pmc rx117_curclass
    .local pmc rx117_bstack
    .local pmc rx117_cstack
    (rx117_cur, rx117_tgt, rx117_pos, rx117_curclass, rx117_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx117_cur
    length rx117_eos, rx117_tgt
    eq $I19, 1, rx117_restart
    repr_get_attr_int $I11, self, rx117_curclass, "$!from"
    ne $I11, -1, rxscan118_done
    goto rxscan118_scan
  rxscan118_loop:
    inc rx117_pos
    gt rx117_pos, rx117_eos, rx117_fail
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!from", rx117_pos
  rxscan118_scan:
    nqp_rxmark rx117_bstack, rxscan118_loop, rx117_pos, 0
  rxscan118_done:
    add $I11, rx117_pos, 2
    gt $I11, rx117_eos, rx117_fail
    substr $S10, rx117_tgt, rx117_pos, 2
    ne $S10, ucs4:"\\\\", rx117_fail
    add rx117_pos, 2
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."quotemod_check"("q")
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail
    rx117_cur."!cursor_pass"(rx117_pos, "quote_escape:sym<backslash>", 'backtrack'=>1)
    .return (rx117_cur)
  rx117_restart:
    repr_get_attr_obj rx117_cstack, rx117_cur, rx117_curclass, "$!cstack"
  rx117_fail:
    unless rx117_bstack, rx117_done
    pop $I19, rx117_bstack
    if_null rx117_cstack, rx117_cstack_done
    unless rx117_cstack, rx117_cstack_done
    dec $I19
    set $P11, rx117_cstack[$I19]
  rx117_cstack_done:
    pop rx117_rep, rx117_bstack
    pop rx117_pos, rx117_bstack
    pop $I19, rx117_bstack
    lt rx117_pos, -1, rx117_done
    lt rx117_pos, 0, rx117_fail
    eq $I19, 0, rx117_fail
    if_null rx117_cstack, rx117_jump
    elements $I18, rx117_bstack
    le $I18, 0, rx117_cut
    dec $I18
    set $I18, rx117_bstack[$I18]
  rx117_cut:
    assign rx117_cstack, $I18
  rx117_jump:
    jump $I19
  rx117_done:
    rx117_cur."!cursor_fail"()
    .return (rx117_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "38_1337966785.387_caps"  :subid("219_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 84
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "38_1337966785.387_nfa"  :subid("220_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 84
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 92
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<stopper>"  :subid("39_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1154
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 85
    .lex "self", param_1154
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1155
    .lex "$/", $P1156
    .local string rx119_tgt
    .local int rx119_pos
    .local int rx119_off
    .local int rx119_eos
    .local int rx119_rep
    .local pmc rx119_cur
    .local pmc rx119_curclass
    .local pmc rx119_bstack
    .local pmc rx119_cstack
    (rx119_cur, rx119_tgt, rx119_pos, rx119_curclass, rx119_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx119_cur
    length rx119_eos, rx119_tgt
    eq $I19, 1, rx119_restart
    repr_get_attr_int $I11, self, rx119_curclass, "$!from"
    ne $I11, -1, rxscan120_done
    goto rxscan120_scan
  rxscan120_loop:
    inc rx119_pos
    gt rx119_pos, rx119_eos, rx119_fail
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!from", rx119_pos
  rxscan120_scan:
    nqp_rxmark rx119_bstack, rxscan120_loop, rx119_pos, 0
  rxscan120_done:
    add $I11, rx119_pos, 1
    gt $I11, rx119_eos, rx119_fail
    substr $S10, rx119_tgt, rx119_pos, 1
    ne $S10, ucs4:"\\", rx119_fail
    add rx119_pos, 1
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."quotemod_check"("q")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."stopper"()
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail
    nqp_rxmark rx119_bstack, rxsubrule121_pass, -1, 0
  rxsubrule121_pass:
    rx119_cstack = rx119_cur."!cursor_capture"($P11, "stopper")
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
    rx119_cur."!cursor_pass"(rx119_pos, "quote_escape:sym<stopper>", 'backtrack'=>1)
    .return (rx119_cur)
  rx119_restart:
    repr_get_attr_obj rx119_cstack, rx119_cur, rx119_curclass, "$!cstack"
  rx119_fail:
    unless rx119_bstack, rx119_done
    pop $I19, rx119_bstack
    if_null rx119_cstack, rx119_cstack_done
    unless rx119_cstack, rx119_cstack_done
    dec $I19
    set $P11, rx119_cstack[$I19]
  rx119_cstack_done:
    pop rx119_rep, rx119_bstack
    pop rx119_pos, rx119_bstack
    pop $I19, rx119_bstack
    lt rx119_pos, -1, rx119_done
    lt rx119_pos, 0, rx119_fail
    eq $I19, 0, rx119_fail
    if_null rx119_cstack, rx119_jump
    elements $I18, rx119_bstack
    le $I18, 0, rx119_cut
    dec $I18
    set $I18, rx119_bstack[$I18]
  rx119_cut:
    assign rx119_cstack, $I18
  rx119_jump:
    jump $I19
  rx119_done:
    rx119_cur."!cursor_fail"()
    .return (rx119_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "39_1337966785.387_caps"  :subid("221_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 85
    new $P104, "Hash"
    set $P104["stopper"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "39_1337966785.387_nfa"  :subid("222_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 85
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "quotemod_check"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<bs>"  :subid("40_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1160
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 87
    .lex "self", param_1160
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1161
    .lex "$/", $P1162
    .local string rx122_tgt
    .local int rx122_pos
    .local int rx122_off
    .local int rx122_eos
    .local int rx122_rep
    .local pmc rx122_cur
    .local pmc rx122_curclass
    .local pmc rx122_bstack
    .local pmc rx122_cstack
    (rx122_cur, rx122_tgt, rx122_pos, rx122_curclass, rx122_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx122_cur
    length rx122_eos, rx122_tgt
    eq $I19, 1, rx122_restart
    repr_get_attr_int $I11, self, rx122_curclass, "$!from"
    ne $I11, -1, rxscan123_done
    goto rxscan123_scan
  rxscan123_loop:
    inc rx122_pos
    gt rx122_pos, rx122_eos, rx122_fail
    repr_bind_attr_int rx122_cur, rx122_curclass, "$!from", rx122_pos
  rxscan123_scan:
    nqp_rxmark rx122_bstack, rxscan123_loop, rx122_pos, 0
  rxscan123_done:
    add $I11, rx122_pos, 2
    gt $I11, rx122_eos, rx122_fail
    substr $S10, rx122_tgt, rx122_pos, 2
    ne $S10, ucs4:"\\b", rx122_fail
    add rx122_pos, 2
    repr_bind_attr_int rx122_cur, rx122_curclass, "$!pos", rx122_pos
    $P11 = rx122_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx122_curclass, "$!pos"
    lt $I11, 0, rx122_fail
    rx122_cur."!cursor_pass"(rx122_pos, "quote_escape:sym<bs>", 'backtrack'=>1)
    .return (rx122_cur)
  rx122_restart:
    repr_get_attr_obj rx122_cstack, rx122_cur, rx122_curclass, "$!cstack"
  rx122_fail:
    unless rx122_bstack, rx122_done
    pop $I19, rx122_bstack
    if_null rx122_cstack, rx122_cstack_done
    unless rx122_cstack, rx122_cstack_done
    dec $I19
    set $P11, rx122_cstack[$I19]
  rx122_cstack_done:
    pop rx122_rep, rx122_bstack
    pop rx122_pos, rx122_bstack
    pop $I19, rx122_bstack
    lt rx122_pos, -1, rx122_done
    lt rx122_pos, 0, rx122_fail
    eq $I19, 0, rx122_fail
    if_null rx122_cstack, rx122_jump
    elements $I18, rx122_bstack
    le $I18, 0, rx122_cut
    dec $I18
    set $I18, rx122_bstack[$I18]
  rx122_cut:
    assign rx122_cstack, $I18
  rx122_jump:
    jump $I19
  rx122_done:
    rx122_cur."!cursor_fail"()
    .return (rx122_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "40_1337966785.387_caps"  :subid("223_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 87
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "40_1337966785.387_nfa"  :subid("224_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 87
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 98
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<nl>"  :subid("41_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1166
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 88
    .lex "self", param_1166
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1167
    .lex "$/", $P1168
    .local string rx124_tgt
    .local int rx124_pos
    .local int rx124_off
    .local int rx124_eos
    .local int rx124_rep
    .local pmc rx124_cur
    .local pmc rx124_curclass
    .local pmc rx124_bstack
    .local pmc rx124_cstack
    (rx124_cur, rx124_tgt, rx124_pos, rx124_curclass, rx124_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx124_cur
    length rx124_eos, rx124_tgt
    eq $I19, 1, rx124_restart
    repr_get_attr_int $I11, self, rx124_curclass, "$!from"
    ne $I11, -1, rxscan125_done
    goto rxscan125_scan
  rxscan125_loop:
    inc rx124_pos
    gt rx124_pos, rx124_eos, rx124_fail
    repr_bind_attr_int rx124_cur, rx124_curclass, "$!from", rx124_pos
  rxscan125_scan:
    nqp_rxmark rx124_bstack, rxscan125_loop, rx124_pos, 0
  rxscan125_done:
    add $I11, rx124_pos, 2
    gt $I11, rx124_eos, rx124_fail
    substr $S10, rx124_tgt, rx124_pos, 2
    ne $S10, ucs4:"\\n", rx124_fail
    add rx124_pos, 2
    repr_bind_attr_int rx124_cur, rx124_curclass, "$!pos", rx124_pos
    $P11 = rx124_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx124_curclass, "$!pos"
    lt $I11, 0, rx124_fail
    rx124_cur."!cursor_pass"(rx124_pos, "quote_escape:sym<nl>", 'backtrack'=>1)
    .return (rx124_cur)
  rx124_restart:
    repr_get_attr_obj rx124_cstack, rx124_cur, rx124_curclass, "$!cstack"
  rx124_fail:
    unless rx124_bstack, rx124_done
    pop $I19, rx124_bstack
    if_null rx124_cstack, rx124_cstack_done
    unless rx124_cstack, rx124_cstack_done
    dec $I19
    set $P11, rx124_cstack[$I19]
  rx124_cstack_done:
    pop rx124_rep, rx124_bstack
    pop rx124_pos, rx124_bstack
    pop $I19, rx124_bstack
    lt rx124_pos, -1, rx124_done
    lt rx124_pos, 0, rx124_fail
    eq $I19, 0, rx124_fail
    if_null rx124_cstack, rx124_jump
    elements $I18, rx124_bstack
    le $I18, 0, rx124_cut
    dec $I18
    set $I18, rx124_bstack[$I18]
  rx124_cut:
    assign rx124_cstack, $I18
  rx124_jump:
    jump $I19
  rx124_done:
    rx124_cur."!cursor_fail"()
    .return (rx124_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "41_1337966785.387_caps"  :subid("225_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 88
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "41_1337966785.387_nfa"  :subid("226_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 88
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 110
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<cr>"  :subid("42_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1172
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 89
    .lex "self", param_1172
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1173
    .lex "$/", $P1174
    .local string rx126_tgt
    .local int rx126_pos
    .local int rx126_off
    .local int rx126_eos
    .local int rx126_rep
    .local pmc rx126_cur
    .local pmc rx126_curclass
    .local pmc rx126_bstack
    .local pmc rx126_cstack
    (rx126_cur, rx126_tgt, rx126_pos, rx126_curclass, rx126_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx126_cur
    length rx126_eos, rx126_tgt
    eq $I19, 1, rx126_restart
    repr_get_attr_int $I11, self, rx126_curclass, "$!from"
    ne $I11, -1, rxscan127_done
    goto rxscan127_scan
  rxscan127_loop:
    inc rx126_pos
    gt rx126_pos, rx126_eos, rx126_fail
    repr_bind_attr_int rx126_cur, rx126_curclass, "$!from", rx126_pos
  rxscan127_scan:
    nqp_rxmark rx126_bstack, rxscan127_loop, rx126_pos, 0
  rxscan127_done:
    add $I11, rx126_pos, 2
    gt $I11, rx126_eos, rx126_fail
    substr $S10, rx126_tgt, rx126_pos, 2
    ne $S10, ucs4:"\\r", rx126_fail
    add rx126_pos, 2
    repr_bind_attr_int rx126_cur, rx126_curclass, "$!pos", rx126_pos
    $P11 = rx126_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx126_curclass, "$!pos"
    lt $I11, 0, rx126_fail
    rx126_cur."!cursor_pass"(rx126_pos, "quote_escape:sym<cr>", 'backtrack'=>1)
    .return (rx126_cur)
  rx126_restart:
    repr_get_attr_obj rx126_cstack, rx126_cur, rx126_curclass, "$!cstack"
  rx126_fail:
    unless rx126_bstack, rx126_done
    pop $I19, rx126_bstack
    if_null rx126_cstack, rx126_cstack_done
    unless rx126_cstack, rx126_cstack_done
    dec $I19
    set $P11, rx126_cstack[$I19]
  rx126_cstack_done:
    pop rx126_rep, rx126_bstack
    pop rx126_pos, rx126_bstack
    pop $I19, rx126_bstack
    lt rx126_pos, -1, rx126_done
    lt rx126_pos, 0, rx126_fail
    eq $I19, 0, rx126_fail
    if_null rx126_cstack, rx126_jump
    elements $I18, rx126_bstack
    le $I18, 0, rx126_cut
    dec $I18
    set $I18, rx126_bstack[$I18]
  rx126_cut:
    assign rx126_cstack, $I18
  rx126_jump:
    jump $I19
  rx126_done:
    rx126_cur."!cursor_fail"()
    .return (rx126_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "42_1337966785.387_caps"  :subid("227_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 89
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "42_1337966785.387_nfa"  :subid("228_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 89
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 114
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<tab>"  :subid("43_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1178
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 90
    .lex "self", param_1178
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1179
    .lex "$/", $P1180
    .local string rx128_tgt
    .local int rx128_pos
    .local int rx128_off
    .local int rx128_eos
    .local int rx128_rep
    .local pmc rx128_cur
    .local pmc rx128_curclass
    .local pmc rx128_bstack
    .local pmc rx128_cstack
    (rx128_cur, rx128_tgt, rx128_pos, rx128_curclass, rx128_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx128_cur
    length rx128_eos, rx128_tgt
    eq $I19, 1, rx128_restart
    repr_get_attr_int $I11, self, rx128_curclass, "$!from"
    ne $I11, -1, rxscan129_done
    goto rxscan129_scan
  rxscan129_loop:
    inc rx128_pos
    gt rx128_pos, rx128_eos, rx128_fail
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!from", rx128_pos
  rxscan129_scan:
    nqp_rxmark rx128_bstack, rxscan129_loop, rx128_pos, 0
  rxscan129_done:
    add $I11, rx128_pos, 2
    gt $I11, rx128_eos, rx128_fail
    substr $S10, rx128_tgt, rx128_pos, 2
    ne $S10, ucs4:"\\t", rx128_fail
    add rx128_pos, 2
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail
    rx128_cur."!cursor_pass"(rx128_pos, "quote_escape:sym<tab>", 'backtrack'=>1)
    .return (rx128_cur)
  rx128_restart:
    repr_get_attr_obj rx128_cstack, rx128_cur, rx128_curclass, "$!cstack"
  rx128_fail:
    unless rx128_bstack, rx128_done
    pop $I19, rx128_bstack
    if_null rx128_cstack, rx128_cstack_done
    unless rx128_cstack, rx128_cstack_done
    dec $I19
    set $P11, rx128_cstack[$I19]
  rx128_cstack_done:
    pop rx128_rep, rx128_bstack
    pop rx128_pos, rx128_bstack
    pop $I19, rx128_bstack
    lt rx128_pos, -1, rx128_done
    lt rx128_pos, 0, rx128_fail
    eq $I19, 0, rx128_fail
    if_null rx128_cstack, rx128_jump
    elements $I18, rx128_bstack
    le $I18, 0, rx128_cut
    dec $I18
    set $I18, rx128_bstack[$I18]
  rx128_cut:
    assign rx128_cstack, $I18
  rx128_jump:
    jump $I19
  rx128_done:
    rx128_cur."!cursor_fail"()
    .return (rx128_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "43_1337966785.387_caps"  :subid("229_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 90
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "43_1337966785.387_nfa"  :subid("230_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 90
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 116
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<ff>"  :subid("44_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1184
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 91
    .lex "self", param_1184
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1185
    .lex "$/", $P1186
    .local string rx130_tgt
    .local int rx130_pos
    .local int rx130_off
    .local int rx130_eos
    .local int rx130_rep
    .local pmc rx130_cur
    .local pmc rx130_curclass
    .local pmc rx130_bstack
    .local pmc rx130_cstack
    (rx130_cur, rx130_tgt, rx130_pos, rx130_curclass, rx130_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx130_cur
    length rx130_eos, rx130_tgt
    eq $I19, 1, rx130_restart
    repr_get_attr_int $I11, self, rx130_curclass, "$!from"
    ne $I11, -1, rxscan131_done
    goto rxscan131_scan
  rxscan131_loop:
    inc rx130_pos
    gt rx130_pos, rx130_eos, rx130_fail
    repr_bind_attr_int rx130_cur, rx130_curclass, "$!from", rx130_pos
  rxscan131_scan:
    nqp_rxmark rx130_bstack, rxscan131_loop, rx130_pos, 0
  rxscan131_done:
    add $I11, rx130_pos, 2
    gt $I11, rx130_eos, rx130_fail
    substr $S10, rx130_tgt, rx130_pos, 2
    ne $S10, ucs4:"\\f", rx130_fail
    add rx130_pos, 2
    repr_bind_attr_int rx130_cur, rx130_curclass, "$!pos", rx130_pos
    $P11 = rx130_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx130_curclass, "$!pos"
    lt $I11, 0, rx130_fail
    rx130_cur."!cursor_pass"(rx130_pos, "quote_escape:sym<ff>", 'backtrack'=>1)
    .return (rx130_cur)
  rx130_restart:
    repr_get_attr_obj rx130_cstack, rx130_cur, rx130_curclass, "$!cstack"
  rx130_fail:
    unless rx130_bstack, rx130_done
    pop $I19, rx130_bstack
    if_null rx130_cstack, rx130_cstack_done
    unless rx130_cstack, rx130_cstack_done
    dec $I19
    set $P11, rx130_cstack[$I19]
  rx130_cstack_done:
    pop rx130_rep, rx130_bstack
    pop rx130_pos, rx130_bstack
    pop $I19, rx130_bstack
    lt rx130_pos, -1, rx130_done
    lt rx130_pos, 0, rx130_fail
    eq $I19, 0, rx130_fail
    if_null rx130_cstack, rx130_jump
    elements $I18, rx130_bstack
    le $I18, 0, rx130_cut
    dec $I18
    set $I18, rx130_bstack[$I18]
  rx130_cut:
    assign rx130_cstack, $I18
  rx130_jump:
    jump $I19
  rx130_done:
    rx130_cur."!cursor_fail"()
    .return (rx130_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "44_1337966785.387_caps"  :subid("231_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 91
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "44_1337966785.387_nfa"  :subid("232_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 91
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 102
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<esc>"  :subid("45_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1190
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 92
    .lex "self", param_1190
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1191
    .lex "$/", $P1192
    .local string rx132_tgt
    .local int rx132_pos
    .local int rx132_off
    .local int rx132_eos
    .local int rx132_rep
    .local pmc rx132_cur
    .local pmc rx132_curclass
    .local pmc rx132_bstack
    .local pmc rx132_cstack
    (rx132_cur, rx132_tgt, rx132_pos, rx132_curclass, rx132_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx132_cur
    length rx132_eos, rx132_tgt
    eq $I19, 1, rx132_restart
    repr_get_attr_int $I11, self, rx132_curclass, "$!from"
    ne $I11, -1, rxscan133_done
    goto rxscan133_scan
  rxscan133_loop:
    inc rx132_pos
    gt rx132_pos, rx132_eos, rx132_fail
    repr_bind_attr_int rx132_cur, rx132_curclass, "$!from", rx132_pos
  rxscan133_scan:
    nqp_rxmark rx132_bstack, rxscan133_loop, rx132_pos, 0
  rxscan133_done:
    add $I11, rx132_pos, 2
    gt $I11, rx132_eos, rx132_fail
    substr $S10, rx132_tgt, rx132_pos, 2
    ne $S10, ucs4:"\\e", rx132_fail
    add rx132_pos, 2
    repr_bind_attr_int rx132_cur, rx132_curclass, "$!pos", rx132_pos
    $P11 = rx132_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx132_curclass, "$!pos"
    lt $I11, 0, rx132_fail
    rx132_cur."!cursor_pass"(rx132_pos, "quote_escape:sym<esc>", 'backtrack'=>1)
    .return (rx132_cur)
  rx132_restart:
    repr_get_attr_obj rx132_cstack, rx132_cur, rx132_curclass, "$!cstack"
  rx132_fail:
    unless rx132_bstack, rx132_done
    pop $I19, rx132_bstack
    if_null rx132_cstack, rx132_cstack_done
    unless rx132_cstack, rx132_cstack_done
    dec $I19
    set $P11, rx132_cstack[$I19]
  rx132_cstack_done:
    pop rx132_rep, rx132_bstack
    pop rx132_pos, rx132_bstack
    pop $I19, rx132_bstack
    lt rx132_pos, -1, rx132_done
    lt rx132_pos, 0, rx132_fail
    eq $I19, 0, rx132_fail
    if_null rx132_cstack, rx132_jump
    elements $I18, rx132_bstack
    le $I18, 0, rx132_cut
    dec $I18
    set $I18, rx132_bstack[$I18]
  rx132_cut:
    assign rx132_cstack, $I18
  rx132_jump:
    jump $I19
  rx132_done:
    rx132_cur."!cursor_fail"()
    .return (rx132_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "45_1337966785.387_caps"  :subid("233_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 92
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "45_1337966785.387_nfa"  :subid("234_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 92
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 101
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<hex>"  :subid("46_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1196
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 93
    .lex "self", param_1196
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1197
    .lex "$/", $P1198
    .local string rx134_tgt
    .local int rx134_pos
    .local int rx134_off
    .local int rx134_eos
    .local int rx134_rep
    .local pmc rx134_cur
    .local pmc rx134_curclass
    .local pmc rx134_bstack
    .local pmc rx134_cstack
    (rx134_cur, rx134_tgt, rx134_pos, rx134_curclass, rx134_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx134_cur
    length rx134_eos, rx134_tgt
    eq $I19, 1, rx134_restart
    repr_get_attr_int $I11, self, rx134_curclass, "$!from"
    ne $I11, -1, rxscan135_done
    goto rxscan135_scan
  rxscan135_loop:
    inc rx134_pos
    gt rx134_pos, rx134_eos, rx134_fail
    repr_bind_attr_int rx134_cur, rx134_curclass, "$!from", rx134_pos
  rxscan135_scan:
    nqp_rxmark rx134_bstack, rxscan135_loop, rx134_pos, 0
  rxscan135_done:
    add $I11, rx134_pos, 2
    gt $I11, rx134_eos, rx134_fail
    substr $S10, rx134_tgt, rx134_pos, 2
    ne $S10, ucs4:"\\x", rx134_fail
    add rx134_pos, 2
    repr_bind_attr_int rx134_cur, rx134_curclass, "$!pos", rx134_pos
    $P11 = rx134_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx134_curclass, "$!pos"
    lt $I11, 0, rx134_fail
  alt136_0:
    nqp_rxmark rx134_bstack, alt136_1, rx134_pos, 0
    repr_bind_attr_int rx134_cur, rx134_curclass, "$!pos", rx134_pos
    $P11 = rx134_cur."hexint"()
    repr_get_attr_int $I11, $P11, rx134_curclass, "$!pos"
    lt $I11, 0, rx134_fail
    nqp_rxmark rx134_bstack, rxsubrule137_pass, -1, 0
  rxsubrule137_pass:
    rx134_cstack = rx134_cur."!cursor_capture"($P11, "hexint")
    repr_get_attr_int rx134_pos, $P11, rx134_curclass, "$!pos"
    goto alt136_end
  alt136_1:
    add $I11, rx134_pos, 1
    gt $I11, rx134_eos, rx134_fail
    substr $S10, rx134_tgt, rx134_pos, 1
    ne $S10, ucs4:"[", rx134_fail
    add rx134_pos, 1
    repr_bind_attr_int rx134_cur, rx134_curclass, "$!pos", rx134_pos
    $P11 = rx134_cur."hexints"()
    repr_get_attr_int $I11, $P11, rx134_curclass, "$!pos"
    lt $I11, 0, rx134_fail
    nqp_rxmark rx134_bstack, rxsubrule138_pass, -1, 0
  rxsubrule138_pass:
    rx134_cstack = rx134_cur."!cursor_capture"($P11, "hexints")
    repr_get_attr_int rx134_pos, $P11, rx134_curclass, "$!pos"
    add $I11, rx134_pos, 1
    gt $I11, rx134_eos, rx134_fail
    substr $S10, rx134_tgt, rx134_pos, 1
    ne $S10, ucs4:"]", rx134_fail
    add rx134_pos, 1
  alt136_end:
    rx134_cur."!cursor_pass"(rx134_pos, "quote_escape:sym<hex>", 'backtrack'=>1)
    .return (rx134_cur)
  rx134_restart:
    repr_get_attr_obj rx134_cstack, rx134_cur, rx134_curclass, "$!cstack"
  rx134_fail:
    unless rx134_bstack, rx134_done
    pop $I19, rx134_bstack
    if_null rx134_cstack, rx134_cstack_done
    unless rx134_cstack, rx134_cstack_done
    dec $I19
    set $P11, rx134_cstack[$I19]
  rx134_cstack_done:
    pop rx134_rep, rx134_bstack
    pop rx134_pos, rx134_bstack
    pop $I19, rx134_bstack
    lt rx134_pos, -1, rx134_done
    lt rx134_pos, 0, rx134_fail
    eq $I19, 0, rx134_fail
    if_null rx134_cstack, rx134_jump
    elements $I18, rx134_bstack
    le $I18, 0, rx134_cut
    dec $I18
    set $I18, rx134_bstack[$I18]
  rx134_cut:
    assign rx134_cstack, $I18
  rx134_jump:
    jump $I19
  rx134_done:
    rx134_cur."!cursor_fail"()
    .return (rx134_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "46_1337966785.387_caps"  :subid("235_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 93
    new $P104, "Hash"
    set $P104["hexint"], 0
    set $P104["hexints"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "46_1337966785.387_nfa"  :subid("236_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 93
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 120
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<oct>"  :subid("47_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1202
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 97
    .lex "self", param_1202
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1203
    .lex "$/", $P1204
    .local string rx139_tgt
    .local int rx139_pos
    .local int rx139_off
    .local int rx139_eos
    .local int rx139_rep
    .local pmc rx139_cur
    .local pmc rx139_curclass
    .local pmc rx139_bstack
    .local pmc rx139_cstack
    (rx139_cur, rx139_tgt, rx139_pos, rx139_curclass, rx139_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx139_cur
    length rx139_eos, rx139_tgt
    eq $I19, 1, rx139_restart
    repr_get_attr_int $I11, self, rx139_curclass, "$!from"
    ne $I11, -1, rxscan140_done
    goto rxscan140_scan
  rxscan140_loop:
    inc rx139_pos
    gt rx139_pos, rx139_eos, rx139_fail
    repr_bind_attr_int rx139_cur, rx139_curclass, "$!from", rx139_pos
  rxscan140_scan:
    nqp_rxmark rx139_bstack, rxscan140_loop, rx139_pos, 0
  rxscan140_done:
    add $I11, rx139_pos, 2
    gt $I11, rx139_eos, rx139_fail
    substr $S10, rx139_tgt, rx139_pos, 2
    ne $S10, ucs4:"\\o", rx139_fail
    add rx139_pos, 2
    repr_bind_attr_int rx139_cur, rx139_curclass, "$!pos", rx139_pos
    $P11 = rx139_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx139_curclass, "$!pos"
    lt $I11, 0, rx139_fail
  alt141_0:
    nqp_rxmark rx139_bstack, alt141_1, rx139_pos, 0
    repr_bind_attr_int rx139_cur, rx139_curclass, "$!pos", rx139_pos
    $P11 = rx139_cur."octint"()
    repr_get_attr_int $I11, $P11, rx139_curclass, "$!pos"
    lt $I11, 0, rx139_fail
    nqp_rxmark rx139_bstack, rxsubrule142_pass, -1, 0
  rxsubrule142_pass:
    rx139_cstack = rx139_cur."!cursor_capture"($P11, "octint")
    repr_get_attr_int rx139_pos, $P11, rx139_curclass, "$!pos"
    goto alt141_end
  alt141_1:
    add $I11, rx139_pos, 1
    gt $I11, rx139_eos, rx139_fail
    substr $S10, rx139_tgt, rx139_pos, 1
    ne $S10, ucs4:"[", rx139_fail
    add rx139_pos, 1
    repr_bind_attr_int rx139_cur, rx139_curclass, "$!pos", rx139_pos
    $P11 = rx139_cur."octints"()
    repr_get_attr_int $I11, $P11, rx139_curclass, "$!pos"
    lt $I11, 0, rx139_fail
    nqp_rxmark rx139_bstack, rxsubrule143_pass, -1, 0
  rxsubrule143_pass:
    rx139_cstack = rx139_cur."!cursor_capture"($P11, "octints")
    repr_get_attr_int rx139_pos, $P11, rx139_curclass, "$!pos"
    add $I11, rx139_pos, 1
    gt $I11, rx139_eos, rx139_fail
    substr $S10, rx139_tgt, rx139_pos, 1
    ne $S10, ucs4:"]", rx139_fail
    add rx139_pos, 1
  alt141_end:
    rx139_cur."!cursor_pass"(rx139_pos, "quote_escape:sym<oct>", 'backtrack'=>1)
    .return (rx139_cur)
  rx139_restart:
    repr_get_attr_obj rx139_cstack, rx139_cur, rx139_curclass, "$!cstack"
  rx139_fail:
    unless rx139_bstack, rx139_done
    pop $I19, rx139_bstack
    if_null rx139_cstack, rx139_cstack_done
    unless rx139_cstack, rx139_cstack_done
    dec $I19
    set $P11, rx139_cstack[$I19]
  rx139_cstack_done:
    pop rx139_rep, rx139_bstack
    pop rx139_pos, rx139_bstack
    pop $I19, rx139_bstack
    lt rx139_pos, -1, rx139_done
    lt rx139_pos, 0, rx139_fail
    eq $I19, 0, rx139_fail
    if_null rx139_cstack, rx139_jump
    elements $I18, rx139_bstack
    le $I18, 0, rx139_cut
    dec $I18
    set $I18, rx139_bstack[$I18]
  rx139_cut:
    assign rx139_cstack, $I18
  rx139_jump:
    jump $I19
  rx139_done:
    rx139_cur."!cursor_fail"()
    .return (rx139_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "47_1337966785.387_caps"  :subid("237_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 97
    new $P104, "Hash"
    set $P104["octint"], 0
    set $P104["octints"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "47_1337966785.387_nfa"  :subid("238_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 97
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 111
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<chr>"  :subid("48_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1208
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 101
    .lex "self", param_1208
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1209
    .lex "$/", $P1210
    .local string rx144_tgt
    .local int rx144_pos
    .local int rx144_off
    .local int rx144_eos
    .local int rx144_rep
    .local pmc rx144_cur
    .local pmc rx144_curclass
    .local pmc rx144_bstack
    .local pmc rx144_cstack
    (rx144_cur, rx144_tgt, rx144_pos, rx144_curclass, rx144_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx144_cur
    length rx144_eos, rx144_tgt
    eq $I19, 1, rx144_restart
    repr_get_attr_int $I11, self, rx144_curclass, "$!from"
    ne $I11, -1, rxscan145_done
    goto rxscan145_scan
  rxscan145_loop:
    inc rx144_pos
    gt rx144_pos, rx144_eos, rx144_fail
    repr_bind_attr_int rx144_cur, rx144_curclass, "$!from", rx144_pos
  rxscan145_scan:
    nqp_rxmark rx144_bstack, rxscan145_loop, rx144_pos, 0
  rxscan145_done:
    add $I11, rx144_pos, 2
    gt $I11, rx144_eos, rx144_fail
    substr $S10, rx144_tgt, rx144_pos, 2
    ne $S10, ucs4:"\\c", rx144_fail
    add rx144_pos, 2
    repr_bind_attr_int rx144_cur, rx144_curclass, "$!pos", rx144_pos
    $P11 = rx144_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx144_curclass, "$!pos"
    lt $I11, 0, rx144_fail
    repr_bind_attr_int rx144_cur, rx144_curclass, "$!pos", rx144_pos
    $P11 = rx144_cur."charspec"()
    repr_get_attr_int $I11, $P11, rx144_curclass, "$!pos"
    lt $I11, 0, rx144_fail
    nqp_rxmark rx144_bstack, rxsubrule146_pass, -1, 0
  rxsubrule146_pass:
    rx144_cstack = rx144_cur."!cursor_capture"($P11, "charspec")
    repr_get_attr_int rx144_pos, $P11, rx144_curclass, "$!pos"
    rx144_cur."!cursor_pass"(rx144_pos, "quote_escape:sym<chr>", 'backtrack'=>1)
    .return (rx144_cur)
  rx144_restart:
    repr_get_attr_obj rx144_cstack, rx144_cur, rx144_curclass, "$!cstack"
  rx144_fail:
    unless rx144_bstack, rx144_done
    pop $I19, rx144_bstack
    if_null rx144_cstack, rx144_cstack_done
    unless rx144_cstack, rx144_cstack_done
    dec $I19
    set $P11, rx144_cstack[$I19]
  rx144_cstack_done:
    pop rx144_rep, rx144_bstack
    pop rx144_pos, rx144_bstack
    pop $I19, rx144_bstack
    lt rx144_pos, -1, rx144_done
    lt rx144_pos, 0, rx144_fail
    eq $I19, 0, rx144_fail
    if_null rx144_cstack, rx144_jump
    elements $I18, rx144_bstack
    le $I18, 0, rx144_cut
    dec $I18
    set $I18, rx144_bstack[$I18]
  rx144_cut:
    assign rx144_cstack, $I18
  rx144_jump:
    jump $I19
  rx144_done:
    rx144_cur."!cursor_fail"()
    .return (rx144_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "48_1337966785.387_caps"  :subid("239_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 101
    new $P104, "Hash"
    set $P104["charspec"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "48_1337966785.387_nfa"  :subid("240_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 101
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 99
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<0>"  :subid("49_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1214
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 102
    .lex "self", param_1214
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1215
    .lex "$/", $P1216
    .local string rx147_tgt
    .local int rx147_pos
    .local int rx147_off
    .local int rx147_eos
    .local int rx147_rep
    .local pmc rx147_cur
    .local pmc rx147_curclass
    .local pmc rx147_bstack
    .local pmc rx147_cstack
    (rx147_cur, rx147_tgt, rx147_pos, rx147_curclass, rx147_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx147_cur
    length rx147_eos, rx147_tgt
    eq $I19, 1, rx147_restart
    repr_get_attr_int $I11, self, rx147_curclass, "$!from"
    ne $I11, -1, rxscan148_done
    goto rxscan148_scan
  rxscan148_loop:
    inc rx147_pos
    gt rx147_pos, rx147_eos, rx147_fail
    repr_bind_attr_int rx147_cur, rx147_curclass, "$!from", rx147_pos
  rxscan148_scan:
    nqp_rxmark rx147_bstack, rxscan148_loop, rx147_pos, 0
  rxscan148_done:
    add $I11, rx147_pos, 1
    gt $I11, rx147_eos, rx147_fail
    substr $S10, rx147_tgt, rx147_pos, 1
    ne $S10, ucs4:"\\", rx147_fail
    add rx147_pos, 1
    nqp_rxmark rx147_bstack, rxcap149_fail, rx147_pos, 0
    add $I11, rx147_pos, 1
    gt $I11, rx147_eos, rx147_fail
    substr $S10, rx147_tgt, rx147_pos, 1
    ne $S10, ucs4:"0", rx147_fail
    add rx147_pos, 1
    nqp_rxpeek $I19, rx147_bstack, rxcap149_fail
    inc $I19
    set $I11, rx147_bstack[$I19]
    $P11 = rx147_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx147_pos)
    rx147_cstack = rx147_cur."!cursor_capture"($P11, "sym")
    goto rxcap149_done
  rxcap149_fail:
    goto rx147_fail
  rxcap149_done:
    repr_bind_attr_int rx147_cur, rx147_curclass, "$!pos", rx147_pos
    $P11 = rx147_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx147_curclass, "$!pos"
    lt $I11, 0, rx147_fail
    rx147_cur."!cursor_pass"(rx147_pos, "quote_escape:sym<0>", 'backtrack'=>1)
    .return (rx147_cur)
  rx147_restart:
    repr_get_attr_obj rx147_cstack, rx147_cur, rx147_curclass, "$!cstack"
  rx147_fail:
    unless rx147_bstack, rx147_done
    pop $I19, rx147_bstack
    if_null rx147_cstack, rx147_cstack_done
    unless rx147_cstack, rx147_cstack_done
    dec $I19
    set $P11, rx147_cstack[$I19]
  rx147_cstack_done:
    pop rx147_rep, rx147_bstack
    pop rx147_pos, rx147_bstack
    pop $I19, rx147_bstack
    lt rx147_pos, -1, rx147_done
    lt rx147_pos, 0, rx147_fail
    eq $I19, 0, rx147_fail
    if_null rx147_cstack, rx147_jump
    elements $I18, rx147_bstack
    le $I18, 0, rx147_cut
    dec $I18
    set $I18, rx147_bstack[$I18]
  rx147_cut:
    assign rx147_cstack, $I18
  rx147_jump:
    jump $I19
  rx147_done:
    rx147_cur."!cursor_fail"()
    .return (rx147_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "49_1337966785.387_caps"  :subid("241_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 102
    new $P104, "Hash"
    set $P104["sym"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "49_1337966785.387_nfa"  :subid("242_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 102
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 48
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<misc>"  :subid("51_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1220
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 103
    .const 'Sub' $P1232 = "247_1337966785.387" 
    capture_lex $P1232
    .const 'Sub' $P1227 = "50_1337966785.387" 
    capture_lex $P1227
    .const 'Sub' $P1225 = "244_1337966785.387" 
    capture_lex $P1225
    .lex "self", param_1220
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1221
    .lex "$/", $P1222
    .local string rx150_tgt
    .local int rx150_pos
    .local int rx150_off
    .local int rx150_eos
    .local int rx150_rep
    .local pmc rx150_cur
    .local pmc rx150_curclass
    .local pmc rx150_bstack
    .local pmc rx150_cstack
    (rx150_cur, rx150_tgt, rx150_pos, rx150_curclass, rx150_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx150_cur
    length rx150_eos, rx150_tgt
    eq $I19, 1, rx150_restart
    repr_get_attr_int $I11, self, rx150_curclass, "$!from"
    ne $I11, -1, rxscan151_done
    goto rxscan151_scan
  rxscan151_loop:
    inc rx150_pos
    gt rx150_pos, rx150_eos, rx150_fail
    repr_bind_attr_int rx150_cur, rx150_curclass, "$!from", rx150_pos
  rxscan151_scan:
    nqp_rxmark rx150_bstack, rxscan151_loop, rx150_pos, 0
  rxscan151_done:
    repr_bind_attr_int rx150_cur, rx150_curclass, "$!pos", rx150_pos
    store_lex unicode:"$\x{a2}", rx150_cur
    find_lex $P104, unicode:"$\x{a2}"
    $P105 = $P104."MATCH"()
    store_lex "$/", $P105
.annotate 'line', 104
    .const 'Sub' $P1225 = "244_1337966785.387" 
    capture_lex $P1225
    $P106 = $P1225()
.annotate 'line', 103
    add $I11, rx150_pos, 1
    gt $I11, rx150_eos, rx150_fail
    substr $S10, rx150_tgt, rx150_pos, 1
    ne $S10, ucs4:"\\", rx150_fail
    add rx150_pos, 1
  alt152_0:
    nqp_rxmark rx150_bstack, alt152_1, rx150_pos, 0
    repr_bind_attr_int rx150_cur, rx150_curclass, "$!pos", rx150_pos
    $P11 = rx150_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx150_curclass, "$!pos"
    lt $I11, 0, rx150_fail
  alt153_0:
    nqp_rxmark rx150_bstack, alt153_1, rx150_pos, 0
    .const 'Sub' $P1227 = "50_1337966785.387" 
    capture_lex $P1227
    repr_bind_attr_int rx150_cur, rx150_curclass, "$!pos", rx150_pos
    $P11 = rx150_cur.$P1227()
    repr_get_attr_int $I11, $P11, rx150_curclass, "$!pos"
    lt $I11, 0, rx150_fail
    nqp_rxmark rx150_bstack, rxsubrule156_pass, -1, 0
  rxsubrule156_pass:
    rx150_cstack = rx150_cur."!cursor_capture"($P11, "textqq")
    repr_get_attr_int rx150_pos, $P11, rx150_curclass, "$!pos"
    goto alt153_end
  alt153_1:
    nqp_rxmark rx150_bstack, rxcap157_fail, rx150_pos, 0
    ge rx150_pos, rx150_eos, rx150_fail
    is_cclass $I11, .CCLASS_WORD, rx150_tgt, rx150_pos
    unless $I11, rx150_fail
    add rx150_pos, 1
    nqp_rxpeek $I19, rx150_bstack, rxcap157_fail
    inc $I19
    set $I11, rx150_bstack[$I19]
    $P11 = rx150_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx150_pos)
    rx150_cstack = rx150_cur."!cursor_capture"($P11, "x")
    goto rxcap157_done
  rxcap157_fail:
    goto rx150_fail
  rxcap157_done:
    repr_bind_attr_int rx150_cur, rx150_curclass, "$!pos", rx150_pos
    store_lex unicode:"$\x{a2}", rx150_cur
    find_lex $P107, unicode:"$\x{a2}"
    $P108 = $P107."MATCH"()
    store_lex "$/", $P108
.annotate 'line', 109
    .const 'Sub' $P1232 = "247_1337966785.387" 
    capture_lex $P1232
    $P109 = $P1232()
  alt153_end:
.annotate 'line', 103
    goto alt152_end
  alt152_1:
    nqp_rxmark rx150_bstack, rxcap158_fail, rx150_pos, 0
    ge rx150_pos, rx150_eos, rx150_fail
    add rx150_pos, 1
    nqp_rxpeek $I19, rx150_bstack, rxcap158_fail
    inc $I19
    set $I11, rx150_bstack[$I19]
    $P11 = rx150_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx150_pos)
    rx150_cstack = rx150_cur."!cursor_capture"($P11, "textq")
    goto rxcap158_done
  rxcap158_fail:
    goto rx150_fail
  rxcap158_done:
  alt152_end:
    rx150_cur."!cursor_pass"(rx150_pos, "quote_escape:sym<misc>", 'backtrack'=>1)
    .return (rx150_cur)
  rx150_restart:
    repr_get_attr_obj rx150_cstack, rx150_cur, rx150_curclass, "$!cstack"
  rx150_fail:
    unless rx150_bstack, rx150_done
    pop $I19, rx150_bstack
    if_null rx150_cstack, rx150_cstack_done
    unless rx150_cstack, rx150_cstack_done
    dec $I19
    set $P11, rx150_cstack[$I19]
  rx150_cstack_done:
    pop rx150_rep, rx150_bstack
    pop rx150_pos, rx150_bstack
    pop $I19, rx150_bstack
    lt rx150_pos, -1, rx150_done
    lt rx150_pos, 0, rx150_fail
    eq $I19, 0, rx150_fail
    if_null rx150_cstack, rx150_jump
    elements $I18, rx150_bstack
    le $I18, 0, rx150_cut
    dec $I18
    set $I18, rx150_bstack[$I18]
  rx150_cut:
    assign rx150_cstack, $I18
  rx150_jump:
    jump $I19
  rx150_done:
    rx150_cur."!cursor_fail"()
    .return (rx150_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "51_1337966785.387_caps"  :subid("243_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 103
    new $P104, "Hash"
    set $P104["textqq"], 0
    set $P104["x"], 0
    set $P104["textq"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "_block1224"  :anon :subid("244_1337966785.387") :outer("51_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 104
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "_block1226"  :anon :subid("50_1337966785.387") :method :outer("51_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 103
    .lex unicode:"$\x{a2}", $P1230
    .local string rx154_tgt
    .local int rx154_pos
    .local int rx154_off
    .local int rx154_eos
    .local int rx154_rep
    .local pmc rx154_cur
    .local pmc rx154_curclass
    .local pmc rx154_bstack
    .local pmc rx154_cstack
    (rx154_cur, rx154_tgt, rx154_pos, rx154_curclass, rx154_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx154_cur
    length rx154_eos, rx154_tgt
    eq $I19, 1, rx154_restart
    repr_get_attr_int $I11, self, rx154_curclass, "$!from"
    ne $I11, -1, rxscan155_done
    goto rxscan155_scan
  rxscan155_loop:
    inc rx154_pos
    gt rx154_pos, rx154_eos, rx154_fail
    repr_bind_attr_int rx154_cur, rx154_curclass, "$!from", rx154_pos
  rxscan155_scan:
    nqp_rxmark rx154_bstack, rxscan155_loop, rx154_pos, 0
  rxscan155_done:
    ge rx154_pos, rx154_eos, rx154_fail
    is_cclass $I11, .CCLASS_WORD, rx154_tgt, rx154_pos
    if $I11, rx154_fail
    add rx154_pos, 1
    rx154_cur."!cursor_pass"(rx154_pos, 'backtrack'=>1)
    .return (rx154_cur)
  rx154_restart:
    repr_get_attr_obj rx154_cstack, rx154_cur, rx154_curclass, "$!cstack"
  rx154_fail:
    unless rx154_bstack, rx154_done
    pop $I19, rx154_bstack
    if_null rx154_cstack, rx154_cstack_done
    unless rx154_cstack, rx154_cstack_done
    dec $I19
    set $P11, rx154_cstack[$I19]
  rx154_cstack_done:
    pop rx154_rep, rx154_bstack
    pop rx154_pos, rx154_bstack
    pop $I19, rx154_bstack
    lt rx154_pos, -1, rx154_done
    lt rx154_pos, 0, rx154_fail
    eq $I19, 0, rx154_fail
    if_null rx154_cstack, rx154_jump
    elements $I18, rx154_bstack
    le $I18, 0, rx154_cut
    dec $I18
    set $I18, rx154_bstack[$I18]
  rx154_cut:
    assign rx154_cstack, $I18
  rx154_jump:
    jump $I19
  rx154_done:
    rx154_cur."!cursor_fail"()
    .return (rx154_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "50_1337966785.387_caps"  :subid("245_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 103
    new $P107, "Hash"
    .return ($P107)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "50_1337966785.387_nfa"  :subid("246_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 103
    new $P107, "ResizablePMCArray"
    new $P108, "ResizablePMCArray"
    push $P108, 5
    push $P108, 8192
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "_block1231"  :anon :subid("247_1337966785.387") :outer("51_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 109
    find_lex $P109, "$/"
    unless_null $P109, vivify_331
    new $P109, "Undef"
  vivify_331:
    $P110 = $P109."CURSOR"()
    new $P111, "String"
    assign $P111, "Unrecognized backslash sequence: '\\"
    find_lex $P1233, "$/"
    unless_null $P1233, vivify_332
    $P1233 = root_new ['parrot';'Hash']
  vivify_332:
    set $P112, $P1233["x"]
    unless_null $P112, vivify_333
    new $P112, "Undef"
  vivify_333:
    $S100 = $P112."Str"()
    concat $P113, $P111, $S100
    concat $P114, $P113, "'"
    $P115 = $P110."panic"($P114)
    .return ($P115)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "charname"  :subid("53_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1235
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 115
    .const 'Sub' $P1240 = "52_1337966785.387" 
    capture_lex $P1240
    .lex "self", param_1235
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1236
    .lex "$/", $P1237
    .local string rx159_tgt
    .local int rx159_pos
    .local int rx159_off
    .local int rx159_eos
    .local int rx159_rep
    .local pmc rx159_cur
    .local pmc rx159_curclass
    .local pmc rx159_bstack
    .local pmc rx159_cstack
    (rx159_cur, rx159_tgt, rx159_pos, rx159_curclass, rx159_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx159_cur
    length rx159_eos, rx159_tgt
    eq $I19, 1, rx159_restart
    repr_get_attr_int $I11, self, rx159_curclass, "$!from"
    ne $I11, -1, rxscan160_done
    goto rxscan160_scan
  rxscan160_loop:
    inc rx159_pos
    gt rx159_pos, rx159_eos, rx159_fail
    repr_bind_attr_int rx159_cur, rx159_curclass, "$!from", rx159_pos
  rxscan160_scan:
    nqp_rxmark rx159_bstack, rxscan160_loop, rx159_pos, 0
  rxscan160_done:
  alt161_0:
    nqp_rxmark rx159_bstack, alt161_1, rx159_pos, 0
    repr_bind_attr_int rx159_cur, rx159_curclass, "$!pos", rx159_pos
    $P11 = rx159_cur."integer"()
    repr_get_attr_int $I11, $P11, rx159_curclass, "$!pos"
    lt $I11, 0, rx159_fail
    nqp_rxmark rx159_bstack, rxsubrule162_pass, -1, 0
  rxsubrule162_pass:
    rx159_cstack = rx159_cur."!cursor_capture"($P11, "integer")
    repr_get_attr_int rx159_pos, $P11, rx159_curclass, "$!pos"
    goto alt161_end
  alt161_1:
    ge rx159_pos, rx159_eos, rx159_fail
    substr $S11, rx159_tgt, rx159_pos, 1
    index $I11, ucs4:"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", $S11
    lt $I11, 0, rx159_fail
    inc rx159_pos
  # rx rxquantf163 ** 0..-1
    set rx159_rep, 0
    nqp_rxmark rx159_bstack, rxquantf163_loop, rx159_pos, rx159_rep
    goto rxquantf163_done
  rxquantf163_loop:
    set $I12, rx159_rep
    nqp_rxmark rx159_bstack, rxconj164_fail, rx159_pos, 0
    goto rxconj164_first
  rxconj164_fail:
    goto rx159_fail
  rxconj164_first:
    add $I11, rx159_pos, 1
    gt $I11, rx159_eos, rx159_fail
    substr $S10, rx159_tgt, rx159_pos, 1
    eq $S10, ucs4:"]", rx159_fail
    add rx159_pos, 1
    nqp_rxpeek $I19, rx159_bstack, rxconj164_fail
    inc $I19
    set $I11, rx159_bstack[$I19]
    nqp_rxmark rx159_bstack, rxconj164_fail, $I11, rx159_pos
    set rx159_pos, $I11
    ge rx159_pos, rx159_eos, rx159_fail
    substr $S11, rx159_tgt, rx159_pos, 1
    index $I11, ucs4:",#", $S11
    ge $I11, 0, rx159_fail
    inc rx159_pos
    nqp_rxpeek $I19, rx159_bstack, rxconj164_fail
    inc $I19
    set $I11, rx159_bstack[$I19]
    inc $I19
    set $I12, rx159_bstack[$I19]
    ne rx159_pos, $I12, rx159_fail
    set rx159_pos, $I11
    ge rx159_pos, rx159_eos, rx159_fail
    add rx159_pos, 1
    set rx159_rep, $I12
    inc rx159_rep
    nqp_rxmark rx159_bstack, rxquantf163_loop, rx159_pos, rx159_rep
  rxquantf163_done:
    ge rx159_pos, rx159_eos, rx159_fail
    substr $S11, rx159_tgt, rx159_pos, 1
    index $I11, ucs4:"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ)", $S11
    lt $I11, 0, rx159_fail
    inc rx159_pos
    .const 'Sub' $P1240 = "52_1337966785.387" 
    capture_lex $P1240
    repr_bind_attr_int rx159_cur, rx159_curclass, "$!pos", rx159_pos
    $P11 = rx159_cur."before"($P1240)
    repr_get_attr_int $I11, $P11, rx159_curclass, "$!pos"
    lt $I11, 0, rx159_fail
  alt161_end:
    rx159_cur."!cursor_pass"(rx159_pos, "charname", 'backtrack'=>1)
    .return (rx159_cur)
  rx159_restart:
    repr_get_attr_obj rx159_cstack, rx159_cur, rx159_curclass, "$!cstack"
  rx159_fail:
    unless rx159_bstack, rx159_done
    pop $I19, rx159_bstack
    if_null rx159_cstack, rx159_cstack_done
    unless rx159_cstack, rx159_cstack_done
    dec $I19
    set $P11, rx159_cstack[$I19]
  rx159_cstack_done:
    pop rx159_rep, rx159_bstack
    pop rx159_pos, rx159_bstack
    pop $I19, rx159_bstack
    lt rx159_pos, -1, rx159_done
    lt rx159_pos, 0, rx159_fail
    eq $I19, 0, rx159_fail
    if_null rx159_cstack, rx159_jump
    elements $I18, rx159_bstack
    le $I18, 0, rx159_cut
    dec $I18
    set $I18, rx159_bstack[$I18]
  rx159_cut:
    assign rx159_cstack, $I18
  rx159_jump:
    jump $I19
  rx159_done:
    rx159_cur."!cursor_fail"()
    .return (rx159_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "53_1337966785.387_caps"  :subid("248_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 115
    new $P104, "Hash"
    set $P104["integer"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "_block1239"  :anon :subid("52_1337966785.387") :method :outer("53_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 115
    .lex unicode:"$\x{a2}", $P1243
    .local string rx165_tgt
    .local int rx165_pos
    .local int rx165_off
    .local int rx165_eos
    .local int rx165_rep
    .local pmc rx165_cur
    .local pmc rx165_curclass
    .local pmc rx165_bstack
    .local pmc rx165_cstack
    (rx165_cur, rx165_tgt, rx165_pos, rx165_curclass, rx165_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx165_cur
    length rx165_eos, rx165_tgt
    eq $I19, 1, rx165_restart
    repr_get_attr_int $I11, self, rx165_curclass, "$!from"
    ne $I11, -1, rxscan166_done
    goto rxscan166_scan
  rxscan166_loop:
    inc rx165_pos
    gt rx165_pos, rx165_eos, rx165_fail
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!from", rx165_pos
  rxscan166_scan:
    nqp_rxmark rx165_bstack, rxscan166_loop, rx165_pos, 0
  rxscan166_done:
  # rx rxquantr167 ** 0..-1
    nqp_rxmark rx165_bstack, rxquantr167_done, rx165_pos, 0
  rxquantr167_loop:
    ge rx165_pos, rx165_eos, rx165_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx165_tgt, rx165_pos
    unless $I11, rx165_fail
    add rx165_pos, 1
    nqp_rxpeek $I19, rx165_bstack, rxquantr167_done
    inc $I19
    inc $I19
    set rx165_rep, rx165_bstack[$I19]
    nqp_rxcommit rx165_bstack, rxquantr167_done
    inc rx165_rep
    nqp_rxmark rx165_bstack, rxquantr167_done, rx165_pos, rx165_rep
    goto rxquantr167_loop
  rxquantr167_done:
  alt168_0:
    nqp_rxmark rx165_bstack, alt168_1, rx165_pos, 0
    add $I11, rx165_pos, 1
    gt $I11, rx165_eos, rx165_fail
    substr $S10, rx165_tgt, rx165_pos, 1
    ne $S10, ucs4:"]", rx165_fail
    add rx165_pos, 1
    goto alt168_end
  alt168_1:
    ge rx165_pos, rx165_eos, rx165_fail
    substr $S11, rx165_tgt, rx165_pos, 1
    index $I11, ucs4:",#", $S11
    lt $I11, 0, rx165_fail
    inc rx165_pos
  alt168_end:
    rx165_cur."!cursor_pass"(rx165_pos, 'backtrack'=>1)
    .return (rx165_cur)
  rx165_restart:
    repr_get_attr_obj rx165_cstack, rx165_cur, rx165_curclass, "$!cstack"
  rx165_fail:
    unless rx165_bstack, rx165_done
    pop $I19, rx165_bstack
    if_null rx165_cstack, rx165_cstack_done
    unless rx165_cstack, rx165_cstack_done
    dec $I19
    set $P11, rx165_cstack[$I19]
  rx165_cstack_done:
    pop rx165_rep, rx165_bstack
    pop rx165_pos, rx165_bstack
    pop $I19, rx165_bstack
    lt rx165_pos, -1, rx165_done
    lt rx165_pos, 0, rx165_fail
    eq $I19, 0, rx165_fail
    if_null rx165_cstack, rx165_jump
    elements $I18, rx165_bstack
    le $I18, 0, rx165_cut
    dec $I18
    set $I18, rx165_bstack[$I18]
  rx165_cut:
    assign rx165_cstack, $I18
  rx165_jump:
    jump $I19
  rx165_done:
    rx165_cur."!cursor_fail"()
    .return (rx165_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "52_1337966785.387_caps"  :subid("249_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 115
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "52_1337966785.387_nfa"  :subid("250_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 115
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 4
    push $P105, 32
    push $P105, 1
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 93
    push $P106, 0
    push $P106, 6
    push $P106, ",#"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "charnames"  :subid("54_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1245
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 120
    .lex "self", param_1245
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1246
    .lex "$/", $P1247
    .local string rx169_tgt
    .local int rx169_pos
    .local int rx169_off
    .local int rx169_eos
    .local int rx169_rep
    .local pmc rx169_cur
    .local pmc rx169_curclass
    .local pmc rx169_bstack
    .local pmc rx169_cstack
    (rx169_cur, rx169_tgt, rx169_pos, rx169_curclass, rx169_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx169_cur
    length rx169_eos, rx169_tgt
    eq $I19, 1, rx169_restart
    repr_get_attr_int $I11, self, rx169_curclass, "$!from"
    ne $I11, -1, rxscan170_done
    goto rxscan170_scan
  rxscan170_loop:
    inc rx169_pos
    gt rx169_pos, rx169_eos, rx169_fail
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!from", rx169_pos
  rxscan170_scan:
    nqp_rxmark rx169_bstack, rxscan170_loop, rx169_pos, 0
  rxscan170_done:
  # rx rxquantr171 ** 1..-1
    nqp_rxmark rx169_bstack, rxquantr171_done, -1, 0
  rxquantr171_loop:
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    $P11 = rx169_cur."ws"()
    repr_get_attr_int $I11, $P11, rx169_curclass, "$!pos"
    lt $I11, 0, rx169_fail
    repr_get_attr_int rx169_pos, $P11, rx169_curclass, "$!pos"
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    $P11 = rx169_cur."charname"()
    repr_get_attr_int $I11, $P11, rx169_curclass, "$!pos"
    lt $I11, 0, rx169_fail
    nqp_rxmark rx169_bstack, rxsubrule173_pass, -1, 0
  rxsubrule173_pass:
    rx169_cstack = rx169_cur."!cursor_capture"($P11, "charname")
    repr_get_attr_int rx169_pos, $P11, rx169_curclass, "$!pos"
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    $P11 = rx169_cur."ws"()
    repr_get_attr_int $I11, $P11, rx169_curclass, "$!pos"
    lt $I11, 0, rx169_fail
    repr_get_attr_int rx169_pos, $P11, rx169_curclass, "$!pos"
    nqp_rxpeek $I19, rx169_bstack, rxquantr171_done
    inc $I19
    inc $I19
    set rx169_rep, rx169_bstack[$I19]
    nqp_rxcommit rx169_bstack, rxquantr171_done
    inc rx169_rep
    nqp_rxmark rx169_bstack, rxquantr171_done, rx169_pos, rx169_rep
    add $I11, rx169_pos, 1
    gt $I11, rx169_eos, rx169_fail
    substr $S10, rx169_tgt, rx169_pos, 1
    ne $S10, ucs4:",", rx169_fail
    add rx169_pos, 1
    goto rxquantr171_loop
  rxquantr171_done:
    rx169_cur."!cursor_pass"(rx169_pos, "charnames", 'backtrack'=>1)
    .return (rx169_cur)
  rx169_restart:
    repr_get_attr_obj rx169_cstack, rx169_cur, rx169_curclass, "$!cstack"
  rx169_fail:
    unless rx169_bstack, rx169_done
    pop $I19, rx169_bstack
    if_null rx169_cstack, rx169_cstack_done
    unless rx169_cstack, rx169_cstack_done
    dec $I19
    set $P11, rx169_cstack[$I19]
  rx169_cstack_done:
    pop rx169_rep, rx169_bstack
    pop rx169_pos, rx169_bstack
    pop $I19, rx169_bstack
    lt rx169_pos, -1, rx169_done
    lt rx169_pos, 0, rx169_fail
    eq $I19, 0, rx169_fail
    if_null rx169_cstack, rx169_jump
    elements $I18, rx169_bstack
    le $I18, 0, rx169_cut
    dec $I18
    set $I18, rx169_bstack[$I18]
  rx169_cut:
    assign rx169_cstack, $I18
  rx169_jump:
    jump $I19
  rx169_done:
    rx169_cur."!cursor_fail"()
    .return (rx169_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "54_1337966785.387_caps"  :subid("251_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 120
    new $P104, "Hash"
    set $P104["charname"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "54_1337966785.387_nfa"  :subid("252_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 120
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "charname"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "ws"
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "charspec"  :subid("55_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1251
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 121
    .lex "self", param_1251
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1252
    .lex "$/", $P1253
    .local string rx175_tgt
    .local int rx175_pos
    .local int rx175_off
    .local int rx175_eos
    .local int rx175_rep
    .local pmc rx175_cur
    .local pmc rx175_curclass
    .local pmc rx175_bstack
    .local pmc rx175_cstack
    (rx175_cur, rx175_tgt, rx175_pos, rx175_curclass, rx175_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx175_cur
    length rx175_eos, rx175_tgt
    eq $I19, 1, rx175_restart
    repr_get_attr_int $I11, self, rx175_curclass, "$!from"
    ne $I11, -1, rxscan176_done
    goto rxscan176_scan
  rxscan176_loop:
    inc rx175_pos
    gt rx175_pos, rx175_eos, rx175_fail
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!from", rx175_pos
  rxscan176_scan:
    nqp_rxmark rx175_bstack, rxscan176_loop, rx175_pos, 0
  rxscan176_done:
  alt177_0:
    nqp_rxmark rx175_bstack, alt177_1, rx175_pos, 0
    add $I11, rx175_pos, 1
    gt $I11, rx175_eos, rx175_fail
    substr $S10, rx175_tgt, rx175_pos, 1
    ne $S10, ucs4:"[", rx175_fail
    add rx175_pos, 1
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!pos", rx175_pos
    $P11 = rx175_cur."charnames"()
    repr_get_attr_int $I11, $P11, rx175_curclass, "$!pos"
    lt $I11, 0, rx175_fail
    nqp_rxmark rx175_bstack, rxsubrule178_pass, -1, 0
  rxsubrule178_pass:
    rx175_cstack = rx175_cur."!cursor_capture"($P11, "charnames")
    repr_get_attr_int rx175_pos, $P11, rx175_curclass, "$!pos"
    add $I11, rx175_pos, 1
    gt $I11, rx175_eos, rx175_fail
    substr $S10, rx175_tgt, rx175_pos, 1
    ne $S10, ucs4:"]", rx175_fail
    add rx175_pos, 1
    goto alt177_end
  alt177_1:
    nqp_rxmark rx175_bstack, alt177_2, rx175_pos, 0
  # rx rxquantr179 ** 1..-1
    nqp_rxmark rx175_bstack, rxquantr179_done, -1, 0
  rxquantr179_loop:
    ge rx175_pos, rx175_eos, rx175_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx175_tgt, rx175_pos
    unless $I11, rx175_fail
    add rx175_pos, 1
    nqp_rxpeek $I19, rx175_bstack, rxquantr179_done
    inc $I19
    inc $I19
    set rx175_rep, rx175_bstack[$I19]
    nqp_rxcommit rx175_bstack, rxquantr179_done
    inc rx175_rep
    nqp_rxmark rx175_bstack, rxquantr179_done, rx175_pos, rx175_rep
    goto rxquantr179_loop
  rxquantr179_done:
  # rx rxquantr180 ** 0..-1
    nqp_rxmark rx175_bstack, rxquantr180_done, rx175_pos, 0
  rxquantr180_loop:
    add $I11, rx175_pos, 1
    gt $I11, rx175_eos, rx175_fail
    substr $S10, rx175_tgt, rx175_pos, 1
    ne $S10, ucs4:"_", rx175_fail
    add rx175_pos, 1
  # rx rxquantr181 ** 1..-1
    nqp_rxmark rx175_bstack, rxquantr181_done, -1, 0
  rxquantr181_loop:
    ge rx175_pos, rx175_eos, rx175_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx175_tgt, rx175_pos
    unless $I11, rx175_fail
    add rx175_pos, 1
    nqp_rxpeek $I19, rx175_bstack, rxquantr181_done
    inc $I19
    inc $I19
    set rx175_rep, rx175_bstack[$I19]
    nqp_rxcommit rx175_bstack, rxquantr181_done
    inc rx175_rep
    nqp_rxmark rx175_bstack, rxquantr181_done, rx175_pos, rx175_rep
    goto rxquantr181_loop
  rxquantr181_done:
    nqp_rxpeek $I19, rx175_bstack, rxquantr180_done
    inc $I19
    inc $I19
    set rx175_rep, rx175_bstack[$I19]
    nqp_rxcommit rx175_bstack, rxquantr180_done
    inc rx175_rep
    nqp_rxmark rx175_bstack, rxquantr180_done, rx175_pos, rx175_rep
    goto rxquantr180_loop
  rxquantr180_done:
    goto alt177_end
  alt177_2:
    nqp_rxmark rx175_bstack, alt177_3, rx175_pos, 0
    ge rx175_pos, rx175_eos, rx175_fail
    substr $S11, rx175_tgt, rx175_pos, 1
    index $I11, ucs4:"?@ABCDEFGHIJKLMNOPQRSTUVWXYZ", $S11
    lt $I11, 0, rx175_fail
    inc rx175_pos
    goto alt177_end
  alt177_3:
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!pos", rx175_pos
    $P11 = rx175_cur."panic"("Unrecognized \\c character")
    repr_get_attr_int $I11, $P11, rx175_curclass, "$!pos"
    lt $I11, 0, rx175_fail
    repr_get_attr_int rx175_pos, $P11, rx175_curclass, "$!pos"
  alt177_end:
    rx175_cur."!cursor_pass"(rx175_pos, "charspec", 'backtrack'=>1)
    .return (rx175_cur)
  rx175_restart:
    repr_get_attr_obj rx175_cstack, rx175_cur, rx175_curclass, "$!cstack"
  rx175_fail:
    unless rx175_bstack, rx175_done
    pop $I19, rx175_bstack
    if_null rx175_cstack, rx175_cstack_done
    unless rx175_cstack, rx175_cstack_done
    dec $I19
    set $P11, rx175_cstack[$I19]
  rx175_cstack_done:
    pop rx175_rep, rx175_bstack
    pop rx175_pos, rx175_bstack
    pop $I19, rx175_bstack
    lt rx175_pos, -1, rx175_done
    lt rx175_pos, 0, rx175_fail
    eq $I19, 0, rx175_fail
    if_null rx175_cstack, rx175_jump
    elements $I18, rx175_bstack
    le $I18, 0, rx175_cut
    dec $I18
    set $I18, rx175_bstack[$I18]
  rx175_cut:
    assign rx175_cstack, $I18
  rx175_jump:
    jump $I19
  rx175_done:
    rx175_cur."!cursor_fail"()
    .return (rx175_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "55_1337966785.387_caps"  :subid("253_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 121
    new $P104, "Hash"
    set $P104["charnames"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "55_1337966785.387_nfa"  :subid("254_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 121
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 91
    push $P105, 2
    push $P105, 1
    push $P105, 0
    push $P105, 4
    push $P105, 6
    push $P105, "?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    push $P105, 0
    push $P105, 8
    push $P105, "panic"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "charnames"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 93
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 4
    push $P108, 8
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 4
    push $P109, 1
    push $P109, 0
    push $P109, 6
    push $P109, 2
    push $P109, 95
    push $P109, 7
    push $P109, 1
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    new $P111, "ResizablePMCArray"
    push $P111, 1
    push $P111, 0
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 4
    push $P112, 8
    push $P112, 9
    new $P113, "ResizablePMCArray"
    push $P113, 1
    push $P113, 0
    push $P113, 8
    push $P113, 1
    push $P113, 0
    push $P113, 5
    new $P114, "ResizablePMCArray"
    push $P114, $P104
    push $P114, $P105
    push $P114, $P106
    push $P114, $P107
    push $P114, $P108
    push $P114, $P109
    push $P114, $P110
    push $P114, $P111
    push $P114, $P112
    push $P114, $P113
    .return ($P114)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "O" :anon :subid("56_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1257
    .param pmc param_1258
    .param pmc param_1259 :optional
    .param int has_param_1259 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 172
    .lex "self", param_1257
    .lex "$spec", param_1258
    if has_param_1259, optparam_334
    new $P103, "Undef"
    set param_1259, $P103
  optparam_334:
    .lex "$save", param_1259
.annotate 'line', 173

            .local pmc self, cur_class
            .local string spec, save
            .local int has_save
            self = find_lex 'self'
            cur_class = find_lex '$cursor_class'
            $P0 = find_lex '$spec'
            spec = $P0
            has_save = 0
            $P0 = find_lex '$save'
            unless $P0 goto no_save
            save = $P0
            has_save = 1
          no_save:

            # First, get the hash cache.  Right now we have one
            # cache for all grammars; eventually we may need a way to
            # separate them out by cursor type.
            .local pmc ohash
            ohash = get_global '%!ohash'
            unless null ohash goto have_ohash
            ohash = new ['Hash']
            set_global '%!ohash', ohash
          have_ohash:

            # See if we've already created a Hash for the current
            # specification string -- if so, use that.
            .local pmc hash
            hash = ohash[spec]
            unless null hash goto hash_done

            # Otherwise, we need to build a new one.
            hash = new ['Hash']
            .local int pos, eos
            pos = 0
            eos = length spec
          spec_loop:
            pos = find_not_cclass .CCLASS_WHITESPACE, spec, pos, eos
            if pos >= eos goto spec_done
            $S0 = substr spec, pos, 1
            if $S0 == ',' goto spec_comma
            if $S0 == ':' goto spec_pair

            # If whatever we found doesn't start with a colon, treat it
            # as a lookup of a previously saved hash to be merged in.
            .local string lookup
            .local int lpos
            # Find the first whitespace or comma
            lpos = find_cclass .CCLASS_WHITESPACE, spec, pos, eos
            $I0 = index spec, ',', pos
            if $I0 < 0 goto have_lookup_lpos
            if $I0 >= lpos goto have_lookup_lpos
            lpos = $I0
          have_lookup_lpos:
            $I0 = lpos - pos
            lookup = substr spec, pos, $I0
            .local pmc lhash, lhash_it
            lhash = ohash[lookup]
            if null lhash goto err_lookup
            lhash_it = iter lhash
          lhash_loop:
            unless lhash_it goto lhash_done
            $S0 = shift lhash_it
            $P0 = lhash[$S0]
            hash[$S0] = $P0
            goto lhash_loop
          lhash_done:
            pos = lpos
            goto spec_loop

            # We just ignore commas between elements for now.
          spec_comma:
            inc pos
            goto spec_loop

            # If we see a colon, then we want to parse whatever
            # comes next like a pair.
          spec_pair:
            # eat colon
            inc pos
            .local string name
            .local pmc value
            value = new ['Boolean']

            # If the pair is of the form :!name, then reverse the value
            # and skip the colon.
            $S0 = substr spec, pos, 1
            $I0 = iseq $S0, '!'
            pos += $I0
            $I0 = not $I0
            value = $I0

            # Get the name of the pair.
            lpos = find_not_cclass .CCLASS_WORD, spec, pos, eos
            $I0 = lpos - pos
            name = substr spec, pos, $I0
            pos = lpos

            # Look for a <...> that follows.
            $S0 = substr spec, pos, 1
            unless $S0 == '<' goto have_value
            inc pos
            lpos = index spec, '>', pos
            $I0 = lpos - pos
            $S0 = substr spec, pos, $I0
            value = box $S0
            pos = lpos + 1
          have_value:
            # Done processing the pair, store it in the hash.
            hash[name] = value
            goto spec_loop
          spec_done:
            # Done processing the spec string, cache the hash for later.
            ohash[spec] = hash
          hash_done:

            # If we've been called as a subrule, then build a pass-cursor
            # to indicate success and set the hash as the subrule's match object.
            if has_save goto save_hash
            ($P0, $S0, $I0) = self.'!cursor_start'()
            $P0.'!cursor_pass'($I0, '')
            setattribute $P0, cur_class, '$!match', hash
            .return ($P0)

            # save the hash under a new entry
          save_hash:
            ohash[save] = hash
            .return (self)

          err_lookup:
            self.'panic'('Unknown operator precedence specification "', lookup, '"')
        
.annotate 'line', 172
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "panic" :anon :subid("57_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1261
    .param pmc param_1262 :slurpy
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 318
    .lex "self", param_1261
    .lex "@args", param_1262
.annotate 'line', 319
    new $P103, "Undef"
    set $P1263, $P103
    .lex "$pos", $P1263
.annotate 'line', 320
    new $P104, "Undef"
    set $P1264, $P104
    .lex "$target", $P1264
.annotate 'line', 319
    set $P105, param_1261
    nqp_decontainerize $P106, $P105
    $P107 = $P106."pos"()
    set $P1263, $P107
.annotate 'line', 320
    set $P105, param_1261
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?PACKAGE"
    get_who $P108, $P107
    set $P111, $P108["NQPCursor"]
    unless_null $P111, vivify_335
    get_hll_global $P109, "GLOBAL"
    get_who $P110, $P109
    set $P111, $P110["NQPCursor"]
  vivify_335:
    repr_get_attr_str $S100, $P106, $P111, "$!target"
    new $P112, 'String'
    set $P112, $S100
    set $P1264, $P112
.annotate 'line', 321
    set $P1265, param_1262
    unless_null $P1265, vivify_336
    $P1265 = root_new ['parrot';'ResizablePMCArray']
  vivify_336:
    $P1265."push"(" at line ")
.annotate 'line', 322
    set $P1266, param_1262
    unless_null $P1266, vivify_337
    $P1266 = root_new ['parrot';'ResizablePMCArray']
  vivify_337:
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "HLL"
    get_who $P107, $P106
    set $P108, $P107["Compiler"]
    set $P109, $P1264
    unless_null $P109, vivify_338
    new $P109, "Undef"
  vivify_338:
    set $P110, $P1263
    unless_null $P110, vivify_339
    new $P110, "Undef"
  vivify_339:
    $P111 = $P108."lineof"($P109, $P110)
    add $P112, $P111, 1
    $P1266."push"($P112)
.annotate 'line', 323
    set $P1267, param_1262
    unless_null $P1267, vivify_340
    $P1267 = root_new ['parrot';'ResizablePMCArray']
  vivify_340:
    $P1267."push"(", near \"")
.annotate 'line', 324
    set $P1268, param_1262
    unless_null $P1268, vivify_341
    $P1268 = root_new ['parrot';'ResizablePMCArray']
  vivify_341:
    set $P105, $P1264
    unless_null $P105, vivify_342
    new $P105, "Undef"
  vivify_342:
    set $S100, $P105
    set $P106, $P1263
    unless_null $P106, vivify_343
    new $P106, "Undef"
  vivify_343:
    set $I100, $P106
    substr $S101, $S100, $I100, 10
    escape $S102, $S101
    $P1268."push"($S102)
.annotate 'line', 325
    set $P1269, param_1262
    unless_null $P1269, vivify_344
    $P1269 = root_new ['parrot';'ResizablePMCArray']
  vivify_344:
    $P1269."push"("\"")
.annotate 'line', 326
    set $P1270, param_1262
    unless_null $P1270, vivify_345
    $P1270 = root_new ['parrot';'ResizablePMCArray']
  vivify_345:
    join $S100, "", $P1270
    die $S100
.annotate 'line', 318
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "peek_delimiters" :anon :subid("58_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1272
    .param pmc param_1273
    .param pmc param_1274
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 339
    .lex "self", param_1272
    .lex "$target", param_1273
    .lex "$pos", param_1274
.annotate 'line', 340

            .local pmc self
            self = find_lex 'self'
            .local string target
            $P0 = find_lex '$target'
            target = $P0
            .local int pos
            $P0 = find_lex '$pos'
            pos = $P0

            .local string brackets, start, stop
            $P0 = find_lex '$brackets'
            brackets = $P0

            # peek at the next character
            start = substr target, pos, 1
            # colon and word characters aren't valid delimiters
            if start == ':' goto err_colon_delim
            $I0 = is_cclass .CCLASS_WORD, start, 0
            if $I0 goto err_word_delim
            $I0 = is_cclass .CCLASS_WHITESPACE, start, 0
            if $I0 goto err_ws_delim

            # assume stop delim is same as start, for the moment
            stop = start

            # see if we have an opener or closer
            $I0 = index brackets, start
            if $I0 < 0 goto bracket_end
            # if it's a closing bracket, that's an error also
            $I1 = $I0 % 2
            if $I1 goto err_close
            # it's an opener, so get the closing bracket
            inc $I0
            stop = substr brackets, $I0, 1

            # see if the opening bracket is repeated
            .local int len
            len = 0
          bracket_loop:
            inc pos
            inc len
            $S0 = substr target, pos, 1
            if $S0 == start goto bracket_loop
            if len == 1 goto bracket_end
            start = repeat start, len
            stop = repeat stop, len
          bracket_end:
            .return (start, stop, pos)

          err_colon_delim:
            self.'panic'('Colons may not be used to delimit quoting constructs')
          err_word_delim:
            self.'panic'('Alphanumeric character is not allowed as a delimiter')
          err_ws_delim:
            self.'panic'('Whitespace character is not allowed as a delimiter')
          err_close:
            self.'panic'('Use of a closing delimiter for an opener is reserved')
        
.annotate 'line', 339
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_EXPR"  :subid("59_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1276
    .param pmc param_1277 :slurpy
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 401
    .const 'Sub' $P1287 = "257_1337966785.387" 
    capture_lex $P1287
    .lex "self", param_1276
    .lex "@args", param_1277
.annotate 'line', 402
    $P1279 = root_new ['parrot';'Hash']
    set $P1278, $P1279
    .lex "%*QUOTEMOD", $P1278
.annotate 'line', 403
    new $P103, "Undef"
    set $P1280, $P103
    .lex "$*QUOTE_START", $P1280
.annotate 'line', 404
    new $P104, "Undef"
    set $P1281, $P104
    .lex "$*QUOTE_STOP", $P1281
    .local pmc self
    find_lex $P105, "self"
    set self, $P105
    .lex unicode:"$\x{a2}", $P1282
    .lex "$/", $P1283
.annotate 'line', 401
    .local string rx183_tgt
    .local int rx183_pos
    .local int rx183_off
    .local int rx183_eos
    .local int rx183_rep
    .local pmc rx183_cur
    .local pmc rx183_curclass
    .local pmc rx183_bstack
    .local pmc rx183_cstack
    (rx183_cur, rx183_tgt, rx183_pos, rx183_curclass, rx183_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx183_cur
    length rx183_eos, rx183_tgt
    eq $I19, 1, rx183_restart
    repr_get_attr_int $I11, self, rx183_curclass, "$!from"
    ne $I11, -1, rxscan184_done
    goto rxscan184_scan
  rxscan184_loop:
    inc rx183_pos
    gt rx183_pos, rx183_eos, rx183_fail
    repr_bind_attr_int rx183_cur, rx183_curclass, "$!from", rx183_pos
  rxscan184_scan:
    nqp_rxmark rx183_bstack, rxscan184_loop, rx183_pos, 0
  rxscan184_done:
    repr_bind_attr_int rx183_cur, rx183_curclass, "$!pos", rx183_pos
    store_lex unicode:"$\x{a2}", rx183_cur
    set $P108, $P1278
    unless_null $P108, vivify_346
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["%QUOTEMOD"]
    unless_null $P108, vivify_347
    die "Contextual %*QUOTEMOD not found"
  vivify_347:
  vivify_346:
    repr_bind_attr_int rx183_cur, rx183_curclass, "$!pos", rx183_pos
    store_lex unicode:"$\x{a2}", rx183_cur
    set $P111, $P1280
    unless_null $P111, vivify_348
    get_hll_global $P109, "GLOBAL"
    get_who $P110, $P109
    set $P111, $P110["$QUOTE_START"]
    unless_null $P111, vivify_349
    die "Contextual $*QUOTE_START not found"
  vivify_349:
  vivify_348:
    repr_bind_attr_int rx183_cur, rx183_curclass, "$!pos", rx183_pos
    store_lex unicode:"$\x{a2}", rx183_cur
    set $P114, $P1281
    unless_null $P114, vivify_350
    get_hll_global $P112, "GLOBAL"
    get_who $P113, $P112
    set $P114, $P113["$QUOTE_STOP"]
    unless_null $P114, vivify_351
    die "Contextual $*QUOTE_STOP not found"
  vivify_351:
  vivify_350:
    repr_bind_attr_int rx183_cur, rx183_curclass, "$!pos", rx183_pos
    store_lex unicode:"$\x{a2}", rx183_cur
    find_lex $P115, unicode:"$\x{a2}"
    $P116 = $P115."MATCH"()
    store_lex "$/", $P116
.annotate 'line', 405
    .const 'Sub' $P1287 = "257_1337966785.387" 
    capture_lex $P1287
    $P117 = $P1287()
.annotate 'line', 401
    repr_bind_attr_int rx183_cur, rx183_curclass, "$!pos", rx183_pos
    $P11 = rx183_cur."quote_delimited"()
    repr_get_attr_int $I11, $P11, rx183_curclass, "$!pos"
    lt $I11, 0, rx183_fail
    nqp_rxmark rx183_bstack, rxsubrule185_pass, -1, 0
  rxsubrule185_pass:
    rx183_cstack = rx183_cur."!cursor_capture"($P11, "quote_delimited")
    repr_get_attr_int rx183_pos, $P11, rx183_curclass, "$!pos"
    rx183_cur."!cursor_pass"(rx183_pos, "quote_EXPR", 'backtrack'=>1)
    .return (rx183_cur)
  rx183_restart:
    repr_get_attr_obj rx183_cstack, rx183_cur, rx183_curclass, "$!cstack"
  rx183_fail:
    unless rx183_bstack, rx183_done
    pop $I19, rx183_bstack
    if_null rx183_cstack, rx183_cstack_done
    unless rx183_cstack, rx183_cstack_done
    dec $I19
    set $P11, rx183_cstack[$I19]
  rx183_cstack_done:
    pop rx183_rep, rx183_bstack
    pop rx183_pos, rx183_bstack
    pop $I19, rx183_bstack
    lt rx183_pos, -1, rx183_done
    lt rx183_pos, 0, rx183_fail
    eq $I19, 0, rx183_fail
    if_null rx183_cstack, rx183_jump
    elements $I18, rx183_bstack
    le $I18, 0, rx183_cut
    dec $I18
    set $I18, rx183_bstack[$I18]
  rx183_cut:
    assign rx183_cstack, $I18
  rx183_jump:
    jump $I19
  rx183_done:
    rx183_cur."!cursor_fail"()
    .return (rx183_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "59_1337966785.387_caps"  :subid("255_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 401
    new $P106, "Hash"
    set $P106["quote_delimited"], 0
    .return ($P106)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "59_1337966785.387_nfa"  :subid("256_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 401
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 3
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 4
    new $P110, "ResizablePMCArray"
    push $P110, 0
    push $P110, 0
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P106
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "_block1286"  :anon :subid("257_1337966785.387") :outer("59_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 406
            
                .local pmc self, cur_class, args
                self = find_lex 'self'
                cur_class = find_lex '$cursor_class'
                args = find_lex '@args'

                .local pmc quotemod, true
                quotemod = find_lex '%*QUOTEMOD'
                true = box 1

              args_loop:
                unless args goto args_done
                .local string mod
                mod = shift args
                mod = substr mod, 1
                quotemod[mod] = true
                if mod == 'qq' goto opt_qq
                if mod == 'b' goto opt_b
                goto args_loop
              opt_qq:
                quotemod['s'] = true
                quotemod['a'] = true
                quotemod['h'] = true
                quotemod['f'] = true
                quotemod['c'] = true
                quotemod['b'] = true
              opt_b:
                quotemod['q'] = true
                goto args_loop
              args_done:

                .local pmc start, stop
                .local string target
                .local int pos
                target = repr_get_attr_str self, cur_class, '$!target'
                pos = repr_get_attr_int self, cur_class, '$!pos'
                (start, stop) = self.'peek_delimiters'(target, pos)
                store_lex '$*QUOTE_START', start
                store_lex '$*QUOTE_STOP', stop
            
.annotate 'line', 405
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quotemod_check"  :subid("60_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1289
    .param pmc param_1290
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 450
    .const 'Sub' $P1296 = "260_1337966785.387" 
    capture_lex $P1296
    .lex "self", param_1289
    .lex "$mod", param_1290
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1291
    .lex "$/", $P1292
    .local string rx186_tgt
    .local int rx186_pos
    .local int rx186_off
    .local int rx186_eos
    .local int rx186_rep
    .local pmc rx186_cur
    .local pmc rx186_curclass
    .local pmc rx186_bstack
    .local pmc rx186_cstack
    (rx186_cur, rx186_tgt, rx186_pos, rx186_curclass, rx186_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx186_cur
    length rx186_eos, rx186_tgt
    eq $I19, 1, rx186_restart
    repr_get_attr_int $I11, self, rx186_curclass, "$!from"
    ne $I11, -1, rxscan187_done
    goto rxscan187_scan
  rxscan187_loop:
    inc rx186_pos
    gt rx186_pos, rx186_eos, rx186_fail
    repr_bind_attr_int rx186_cur, rx186_curclass, "$!from", rx186_pos
  rxscan187_scan:
    nqp_rxmark rx186_bstack, rxscan187_loop, rx186_pos, 0
  rxscan187_done:
    repr_bind_attr_int rx186_cur, rx186_curclass, "$!pos", rx186_pos
    store_lex unicode:"$\x{a2}", rx186_cur
    find_lex $P104, unicode:"$\x{a2}"
    $P105 = $P104."MATCH"()
    store_lex "$/", $P105
.annotate 'line', 451
    .const 'Sub' $P1296 = "260_1337966785.387" 
    capture_lex $P1296
    $P106 = $P1296()
.annotate 'line', 450
    unless $P106, rx186_fail
    rx186_cur."!cursor_pass"(rx186_pos, "quotemod_check", 'backtrack'=>1)
    .return (rx186_cur)
  rx186_restart:
    repr_get_attr_obj rx186_cstack, rx186_cur, rx186_curclass, "$!cstack"
  rx186_fail:
    unless rx186_bstack, rx186_done
    pop $I19, rx186_bstack
    if_null rx186_cstack, rx186_cstack_done
    unless rx186_cstack, rx186_cstack_done
    dec $I19
    set $P11, rx186_cstack[$I19]
  rx186_cstack_done:
    pop rx186_rep, rx186_bstack
    pop rx186_pos, rx186_bstack
    pop $I19, rx186_bstack
    lt rx186_pos, -1, rx186_done
    lt rx186_pos, 0, rx186_fail
    eq $I19, 0, rx186_fail
    if_null rx186_cstack, rx186_jump
    elements $I18, rx186_bstack
    le $I18, 0, rx186_cut
    dec $I18
    set $I18, rx186_bstack[$I18]
  rx186_cut:
    assign rx186_cstack, $I18
  rx186_jump:
    jump $I19
  rx186_done:
    rx186_cur."!cursor_fail"()
    .return (rx186_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "60_1337966785.387_caps"  :subid("258_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 450
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "60_1337966785.387_nfa"  :subid("259_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 450
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "_block1295"  :anon :subid("260_1337966785.387") :outer("60_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 451
    find_lex $P106, "$mod"
    unless_null $P106, vivify_352
    new $P106, "Undef"
  vivify_352:
    find_dynamic_lex $P109, "%*QUOTEMOD"
    unless_null $P109, vivify_353
    get_hll_global $P107, "GLOBAL"
    get_who $P108, $P107
    set $P109, $P108["%QUOTEMOD"]
    unless_null $P109, vivify_354
    die "Contextual %*QUOTEMOD not found"
  vivify_354:
  vivify_353:
    set $P110, $P109[$P106]
    unless_null $P110, vivify_355
    new $P110, "Undef"
  vivify_355:
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "starter" :anon :subid("61_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1298
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 454
    .lex "self", param_1298
.annotate 'line', 455

            .local pmc self, cur
            .local string target, start
            .local int pos
            self = find_lex 'self'

            (cur, target, pos) = self.'!cursor_start'()

            $P0 = find_dynamic_lex '$*QUOTE_START'
            if null $P0 goto fail
            start = $P0

            $I0 = length start
            $S0 = substr target, pos, $I0
            unless $S0 == start goto fail
            pos += $I0
            cur.'!cursor_pass'(pos, 'starter')
          fail:
            .return (cur)
        
.annotate 'line', 454
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "stopper" :anon :subid("62_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1300
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 477
    .lex "self", param_1300
.annotate 'line', 478

            .local pmc self, cur
            .local string target, stop
            .local int pos
            self = find_lex 'self'

            (cur, target, pos) = self.'!cursor_start'()

            $P0 = find_dynamic_lex '$*QUOTE_STOP'
            if null $P0 goto fail
            stop = $P0

            $I0 = length stop
            $S0 = substr target, pos, $I0
            unless $S0 == stop goto fail
            pos += $I0
            cur.'!cursor_pass'(pos, 'stopper')
          fail:
            .return (cur)
        
.annotate 'line', 477
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "split_words"  :subid("63_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1302
    .param pmc param_1303
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 500
    .lex "self", param_1302
    .lex "$words", param_1303
.annotate 'line', 501

            .include 'src/Regex/constants.pir'
            .local string words
            $P0 = find_lex '$words'
            words = $P0
            .local int pos, eos
            .local pmc result
            pos = 0
            eos = length words
            result = new ['ResizablePMCArray']
          split_loop:
            pos = find_not_cclass .CCLASS_WHITESPACE, words, pos, eos
            unless pos < eos goto split_done
            $I0 = find_cclass .CCLASS_WHITESPACE, words, pos, eos
            $I1 = $I0 - pos
            $S0 = substr words, pos, $I1
            push result, $S0
            pos = $I0
            goto split_loop
          split_done:
            .return (result)
        
.annotate 'line', 500
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "EXPR" :anon :subid("64_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1305
    .param pmc param_1306 :optional
    .param int has_param_1306 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 533
    .lex "self", param_1305
    if has_param_1306, optparam_356
    new $P103, "String"
    assign $P103, ""
    set param_1306, $P103
  optparam_356:
    .lex "$preclim", param_1306
.annotate 'line', 534

            .local pmc self, cur_class
            self = find_lex 'self'
            cur_class = find_lex '$cursor_class'

            .local string preclim
            $P0 = find_lex '$preclim'
            preclim = $P0
            
            .local pmc here
            .local string tgt
            .local int pos
            (here, tgt, pos) = self.'!cursor_start'()

            .local string termishrx
            termishrx = 'termish'

            .local pmc opstack, termstack
            opstack = new ['ResizablePMCArray']
            .lex '@opstack', opstack
            termstack = new ['ResizablePMCArray']
            .lex '@termstack', termstack

          term_loop:
            .local pmc termcur
            repr_bind_attr_int here, cur_class, "$!pos", pos
            termcur = here.termishrx()
            pos = repr_get_attr_int termcur, cur_class, "$!pos"
            repr_bind_attr_int here, cur_class, "$!pos", pos
            if pos < 0 goto fail
            .local pmc termish
            termish = termcur.'MATCH'()

            # interleave any prefix/postfix we might have found
            .local pmc termOPER, prefixish, postfixish
            termOPER = termish
          termOPER_loop:
            $I0 = exists termOPER['OPER']
            unless $I0 goto termOPER_done
            termOPER = termOPER['OPER']
            goto termOPER_loop
          termOPER_done:
            prefixish = termOPER['prefixish']
            postfixish = termOPER['postfixish']
            if null prefixish goto prefix_done

          prepostfix_loop:
            unless prefixish goto prepostfix_done
            unless postfixish goto prepostfix_done
            .local pmc preO, postO
            .local string preprec, postprec
            $P0 = prefixish[0]
            $P0 = $P0['OPER']
            preO = $P0['O']
            preprec = preO['prec']
            $P0 = postfixish[-1]
            $P0 = $P0['OPER']
            postO = $P0['O']
            postprec = postO['prec']
            if postprec < preprec goto post_shift
            if postprec > preprec goto pre_shift
            $S0 = postO['uassoc']
            if $S0 == 'right' goto pre_shift
          post_shift:
            $P0 = pop postfixish
            push opstack, $P0
            goto prepostfix_loop
          pre_shift:
            $P0 = shift prefixish
            push opstack, $P0
            goto prepostfix_loop
          prepostfix_done:

          prefix_loop:
            unless prefixish goto prefix_done
            $P0 = shift prefixish
            push opstack, $P0
            goto prefix_loop
          prefix_done:
            delete termish['prefixish']

          postfix_loop:
            if null postfixish goto postfix_done
            unless postfixish goto postfix_done
            $P0 = pop postfixish
            push opstack, $P0
            goto postfix_loop
          postfix_done:
            delete termish['postfixish']

            $P0 = termish['term']
            push termstack, $P0

            # Now see if we can fetch an infix operator
            .local pmc wscur, infixcur, infix
            
            # First, we need ws to match.
            repr_bind_attr_int here, cur_class, "$!pos", pos
            wscur = here.'ws'()
            pos = repr_get_attr_int wscur, cur_class, '$!pos'
            if pos < 0 goto term_done
            repr_bind_attr_int here, cur_class, "$!pos", pos
            
            # Next, try the infix itself.
            infixcur = here.'infixish'()
            pos = repr_get_attr_int infixcur, cur_class, '$!pos'
            if pos < 0 goto term_done
            infix = infixcur.'MATCH'()

            # We got an infix.
            .local pmc inO
            $P0 = infix['OPER']
            inO = $P0['O']
            termishrx = inO['nextterm']
            if termishrx goto have_termishrx
          nonextterm:
            termishrx = 'termish'
          have_termishrx:

            .local string inprec, inassoc, opprec
            inprec = inO['prec']
            unless inprec goto err_inprec
            if inprec <= preclim goto term_done
            inassoc = inO['assoc']

            $P0 = inO['sub']
            if null $P0 goto subprec_done
            inO['prec'] = $P0
          subprec_done:

          reduce_loop:
            unless opstack goto reduce_done
            $P0 = opstack[-1]
            $P0 = $P0['OPER']
            $P0 = $P0['O']
            opprec = $P0['prec']
            unless opprec > inprec goto reduce_gt_done
            self.'EXPR_reduce'(termstack, opstack)
            goto reduce_loop
          reduce_gt_done:

            unless opprec == inprec goto reduce_done
            # equal precedence, use associativity to decide
            unless inassoc == 'left' goto reduce_done
            # left associative, reduce immediately
            self.'EXPR_reduce'(termstack, opstack)
          reduce_done:

            push opstack, infix        # The Shift
            repr_bind_attr_int here, cur_class, "$!pos", pos
            wscur = here.'ws'()
            pos = repr_get_attr_int wscur, cur_class, '$!pos'
            repr_bind_attr_int here, cur_class, "$!pos", pos
            if pos < 0 goto fail
            goto term_loop
          term_done:

          opstack_loop:
            unless opstack goto opstack_done
            self.'EXPR_reduce'(termstack, opstack)
            goto opstack_loop
          opstack_done:

          expr_done:
            .local pmc term
            term = pop termstack
            pos = here.'pos'()
            here = self.'!cursor_start'()
            here.'!cursor_pass'(pos)
            repr_bind_attr_int here, cur_class, '$!pos', pos
            setattribute here, cur_class, '$!match', term
            here.'!reduce'('EXPR')
            goto done

          fail:
          done:
            .return (here)

          err_internal:
            $I0 = termstack
            here.'panic'('Internal operator parser error, @termstack == ', $I0)
          err_inprec:
            infixcur.'panic'('Missing infixish operator precedence')
        
.annotate 'line', 533
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "EXPR_reduce" :anon :subid("65_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1308
    .param pmc param_1309
    .param pmc param_1310
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 720
    .lex "self", param_1308
    .lex "$termstack", param_1309
    .lex "$opstack", param_1310
.annotate 'line', 721

            .local pmc self, termstack, opstack
            self = find_lex 'self'
            termstack = find_lex '$termstack'
            opstack = find_lex '$opstack'

            .local pmc op, opOPER, opO
            .local string opassoc
            op = pop opstack
            opOPER = op['OPER']
            opO = opOPER['O']
            $P0 = opO['assoc']
            opassoc = $P0
            if opassoc == 'unary' goto op_unary
            if opassoc == 'list' goto op_list
          op_infix:
            .local pmc right, left
            right = pop termstack
            left = pop termstack
            op[0] = left
            op[1] = right
            $P0 = opO['reducecheck']
            if null $P0 goto op_infix_1
            $S0 = $P0
            self.$S0(op)
          op_infix_1:
            self.'!reduce_with_match'('EXPR', 'INFIX', op)
            goto done

          op_unary:
            .local pmc arg, afrom, ofrom
            arg = pop termstack
            op[0] = arg
            afrom = arg.'from'()
            ofrom = op.'from'()
            if afrom < ofrom goto op_postfix
          op_prefix:
            self.'!reduce_with_match'('EXPR', 'PREFIX', op)
            goto done
          op_postfix:
            self.'!reduce_with_match'('EXPR', 'POSTFIX', op)
            goto done

          op_list:
            .local string sym
            sym = ''
            $P0 = opOPER['sym']
            if null $P0 goto op_list_1
            sym = $P0
          op_list_1:
            arg = pop termstack
            unshift op, arg
          op_sym_loop:
            unless opstack goto op_sym_done
            $S0 = ''
            $P0 = opstack[-1]
            $P0 = $P0['OPER']
            $P0 = $P0['sym']
            if null $P0 goto op_sym_1
            $S0 = $P0
          op_sym_1:
            if sym != $S0 goto op_sym_done
            arg = pop termstack
            unshift op, arg
            $P0 = pop opstack
            goto op_sym_loop
          op_sym_done:
            arg = pop termstack
            unshift op, arg
            self.'!reduce_with_match'('EXPR', 'LIST', op)
            goto done

          done:
            push termstack, op
        
.annotate 'line', 720
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "ternary" :anon :subid("66_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1312
    .param pmc param_1313
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 798
    .lex "self", param_1312
    .lex "$match", param_1313
.annotate 'line', 799
    set $P1314, param_1313
    unless_null $P1314, vivify_357
    $P1314 = root_new ['parrot';'ResizablePMCArray']
  vivify_357:
    set $P103, $P1314[1]
    unless_null $P103, vivify_358
    new $P103, "Undef"
  vivify_358:
    set $P1315, param_1313
    unless_null $P1315, vivify_359
    $P1315 = root_new ['parrot';'ResizablePMCArray']
    set param_1313, $P1315
  vivify_359:
    set $P1315[2], $P103
.annotate 'line', 800
    set $P1316, param_1313
    unless_null $P1316, vivify_360
    $P1316 = root_new ['parrot';'Hash']
  vivify_360:
    set $P1317, $P1316["infix"]
    unless_null $P1317, vivify_361
    $P1317 = root_new ['parrot';'Hash']
  vivify_361:
    set $P103, $P1317["EXPR"]
    unless_null $P103, vivify_362
    new $P103, "Undef"
  vivify_362:
    set $P1318, param_1313
    unless_null $P1318, vivify_363
    $P1318 = root_new ['parrot';'ResizablePMCArray']
    set param_1313, $P1318
  vivify_363:
    set $P1318[1], $P103
.annotate 'line', 798
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "MARKER" :anon :subid("67_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1320
    .param pmc param_1321
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 803
    .lex "self", param_1320
    .lex "$markname", param_1321
.annotate 'line', 804
    new $P103, "Undef"
    set $P1322, $P103
    .lex "$pos", $P1322
.annotate 'line', 805
    $P1324 = root_new ['parrot';'Hash']
    set $P1323, $P1324
    .lex "%markhash", $P1323
.annotate 'line', 813
    new $P104, "Undef"
    set $P1325, $P104
    .lex "$cur", $P1325
.annotate 'line', 804
    set $P105, param_1320
    nqp_decontainerize $P106, $P105
    $P107 = $P106."pos"()
    set $P1322, $P107
.annotate 'line', 805

            $P1326 = get_global '%!MARKHASH'
            unless null $P1326 goto have_markhash
            $P1326 = new ['Hash']
            set_global '%!MARKHASH', $P1326
          have_markhash:
        
    set $P1323, $P1326
.annotate 'line', 812
    set $P105, $P1322
    unless_null $P105, vivify_364
    new $P105, "Undef"
  vivify_364:
    set $P106, param_1321
    unless_null $P106, vivify_365
    new $P106, "Undef"
  vivify_365:
    set $P1327, $P1323
    unless_null $P1327, vivify_366
    $P1327 = root_new ['parrot';'Hash']
    set $P1323, $P1327
  vivify_366:
    set $P1327[$P106], $P105
.annotate 'line', 813
    set $P105, param_1320
    nqp_decontainerize $P106, $P105
    $P107 = $P106."!cursor_start"()
    set $P1325, $P107
.annotate 'line', 814
    set $P105, $P1325
    unless_null $P105, vivify_367
    new $P105, "Undef"
  vivify_367:
    set $P106, $P1322
    unless_null $P106, vivify_368
    new $P106, "Undef"
  vivify_368:
    $P105."!cursor_pass"($P106)
.annotate 'line', 803
    set $P105, $P1325
    unless_null $P105, vivify_369
    new $P105, "Undef"
  vivify_369:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "MARKED" :anon :subid("68_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1329
    .param pmc param_1330
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 818
    .lex "self", param_1329
    .lex "$markname", param_1330
.annotate 'line', 819
    new $P103, "Undef"
    set $P1331, $P103
    .lex "$cur", $P1331
    set $P104, param_1329
    nqp_decontainerize $P105, $P104
    $P106 = $P105."!cursor_start"()
    set $P1331, $P106
.annotate 'line', 820

            .local pmc self, markname, markhash
            self = find_lex 'self'
            markname = find_lex '$markname'
            markhash = get_global '%!MARKHASH'
            if null markhash goto fail
            $P0 = markhash[markname]
            if null $P0 goto fail
            $P1 = self.'pos'()
            unless $P0 == $P1 goto fail
            $P2 = find_lex '$cur'
            $P2."!cursor_pass"($P1)
          fail:
        
.annotate 'line', 818
    set $P104, $P1331
    unless_null $P104, vivify_370
    new $P104, "Undef"
  vivify_370:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "LANG" :anon :subid("69_1337966785.387") :outer("180_1337966785.387")
    .param pmc param_1333
    .param pmc param_1334
    .param pmc param_1335
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 837
    .lex "self", param_1333
    .lex "$lang", param_1334
    .lex "$regex", param_1335
.annotate 'line', 838
    new $P103, "Undef"
    set $P1336, $P103
    .lex "$lang_cursor", $P1336
.annotate 'line', 839
    new $P104, "Undef"
    set $P1337, $P104
    .lex "$*ACTIONS", $P1337
.annotate 'line', 838
    set $P105, param_1334
    unless_null $P105, vivify_371
    new $P105, "Undef"
  vivify_371:
    find_dynamic_lex $P108, "%*LANG"
    unless_null $P108, vivify_372
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["%LANG"]
    unless_null $P108, vivify_373
    die "Contextual %*LANG not found"
  vivify_373:
  vivify_372:
    set $P109, $P108[$P105]
    unless_null $P109, vivify_374
    new $P109, "Undef"
  vivify_374:
    set $P110, param_1333
    nqp_decontainerize $P111, $P110
    $P112 = $P111."target"()
    set $P113, param_1333
    nqp_decontainerize $P114, $P113
    $P115 = $P114."pos"()
    $P116 = $P109."!cursor_init"($P112, $P115 :named("p"))
    set $P1336, $P116
.annotate 'line', 839
    set $P105, param_1334
    unless_null $P105, vivify_375
    new $P105, "Undef"
  vivify_375:
    concat $P106, $P105, "-actions"
    find_dynamic_lex $P109, "%*LANG"
    unless_null $P109, vivify_376
    get_hll_global $P107, "GLOBAL"
    get_who $P108, $P107
    set $P109, $P108["%LANG"]
    unless_null $P109, vivify_377
    die "Contextual %*LANG not found"
  vivify_377:
  vivify_376:
    set $P110, $P109[$P106]
    unless_null $P110, vivify_378
    new $P110, "Undef"
  vivify_378:
    set $P1337, $P110
.annotate 'line', 840
    set $P105, $P1336
    unless_null $P105, vivify_379
    new $P105, "Undef"
  vivify_379:
    set $P106, param_1335
    unless_null $P106, vivify_380
    new $P106, "Undef"
  vivify_380:
    set $S100, $P106
    $P107 = $P105.$S100()
.annotate 'line', 837
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "_block1339"  :subid("261_1337966785.387") :outer("179_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 845
    .const 'Sub' $P1579 = "102_1337966785.387" 
    capture_lex $P1579
    .const 'Sub' $P1570 = "101_1337966785.387" 
    capture_lex $P1570
    .const 'Sub' $P1562 = "100_1337966785.387" 
    capture_lex $P1562
    .const 'Sub' $P1555 = "99_1337966785.387" 
    capture_lex $P1555
    .const 'Sub' $P1552 = "98_1337966785.387" 
    capture_lex $P1552
    .const 'Sub' $P1548 = "97_1337966785.387" 
    capture_lex $P1548
    .const 'Sub' $P1540 = "96_1337966785.387" 
    capture_lex $P1540
    .const 'Sub' $P1532 = "95_1337966785.387" 
    capture_lex $P1532
    .const 'Sub' $P1529 = "94_1337966785.387" 
    capture_lex $P1529
    .const 'Sub' $P1526 = "93_1337966785.387" 
    capture_lex $P1526
    .const 'Sub' $P1523 = "92_1337966785.387" 
    capture_lex $P1523
    .const 'Sub' $P1520 = "91_1337966785.387" 
    capture_lex $P1520
    .const 'Sub' $P1517 = "90_1337966785.387" 
    capture_lex $P1517
    .const 'Sub' $P1514 = "89_1337966785.387" 
    capture_lex $P1514
    .const 'Sub' $P1510 = "88_1337966785.387" 
    capture_lex $P1510
    .const 'Sub' $P1507 = "87_1337966785.387" 
    capture_lex $P1507
    .const 'Sub' $P1501 = "86_1337966785.387" 
    capture_lex $P1501
    .const 'Sub' $P1474 = "85_1337966785.387" 
    capture_lex $P1474
    .const 'Sub' $P1454 = "84_1337966785.387" 
    capture_lex $P1454
    .const 'Sub' $P1451 = "83_1337966785.387" 
    capture_lex $P1451
    .const 'Sub' $P1448 = "82_1337966785.387" 
    capture_lex $P1448
    .const 'Sub' $P1445 = "81_1337966785.387" 
    capture_lex $P1445
    .const 'Sub' $P1442 = "80_1337966785.387" 
    capture_lex $P1442
    .const 'Sub' $P1439 = "79_1337966785.387" 
    capture_lex $P1439
    .const 'Sub' $P1435 = "78_1337966785.387" 
    capture_lex $P1435
    .const 'Sub' $P1431 = "77_1337966785.387" 
    capture_lex $P1431
    .const 'Sub' $P1428 = "76_1337966785.387" 
    capture_lex $P1428
    .const 'Sub' $P1424 = "75_1337966785.387" 
    capture_lex $P1424
    .const 'Sub' $P1420 = "74_1337966785.387" 
    capture_lex $P1420
    .const 'Sub' $P1379 = "73_1337966785.387" 
    capture_lex $P1379
    .const 'Sub' $P1363 = "72_1337966785.387" 
    capture_lex $P1363
    .const 'Sub' $P1361 = "71_1337966785.387" 
    capture_lex $P1361
    .const 'Sub' $P1350 = "70_1337966785.387" 
    capture_lex $P1350
    .const 'Sub' $P1342 = "262_1337966785.387" 
    capture_lex $P1342
.annotate 'line', 846
    .const 'Sub' $P1342 = "262_1337966785.387" 
    newclosure $P1347, $P1342
    set $P1341, $P1347
    .lex "string_to_int", $P1341
.annotate 'line', 845
    set $P102, $P1341
    find_lex $P103, "$?PACKAGE"
    get_who $P105, $P103
    set $P105["string_to_int"], $P102
    .lex "$?PACKAGE", $P1348
    .lex "$?CLASS", $P1349
    set $P106, $P1341
.annotate 'line', 1024
    .const 'Sub' $P1579 = "102_1337966785.387" 
    newclosure $P1585, $P1579
.annotate 'line', 845
    .return ($P1585)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "string_to_int"  :subid("262_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1343
    .param pmc param_1344
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 846
    .lex "$src", param_1343
    .lex "$base", param_1344
.annotate 'line', 847
    new $P101, "Undef"
    set $P1345, $P101
    .lex "$res", $P1345
    set $P102, param_1344
    unless_null $P102, vivify_381
    new $P102, "Undef"
  vivify_381:
    set $I100, $P102
    set $P103, param_1343
    unless_null $P103, vivify_382
    new $P103, "Undef"
  vivify_382:
    set $S100, $P103
    nqp_radix $P104, $I100, $S100, 0, 2
    set $P1345, $P104
.annotate 'line', 849
    new $P103, "Float"
    assign $P103, 2
    set $S100, $P103
    set $P102, $P1345
    unless_null $P102, vivify_383
    new $P102, "Undef"
  vivify_383:
    set $P104, $P102[$S100]
    set $N100, $P104
    set $P105, param_1343
    unless_null $P105, vivify_384
    new $P105, "Undef"
  vivify_384:
    set $S101, $P105
    length $I100, $S101
    set $N101, $I100
    iseq $I101, $N100, $N101
    if $I101, unless_1346_end
.annotate 'line', 848
    set $P106, param_1343
    unless_null $P106, vivify_385
    new $P106, "Undef"
  vivify_385:
    $P107 = $P106."CURSOR"()
    new $P108, 'String'
    set $P108, "'"
    set $P109, param_1343
    unless_null $P109, vivify_386
    new $P109, "Undef"
  vivify_386:
    concat $P110, $P108, $P109
    concat $P111, $P110, "' is not a valid number"
    $P107."panic"($P111)
  unless_1346_end:
.annotate 'line', 850
    new $P103, "Float"
    assign $P103, 0
    set $S100, $P103
    set $P102, $P1345
    unless_null $P102, vivify_387
    new $P102, "Undef"
  vivify_387:
    set $P104, $P102[$S100]
.annotate 'line', 846
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "ints_to_string" :anon :subid("70_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1351
    .param pmc param_1352
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 853
    .const 'Sub' $P1355 = "263_1337966785.387" 
    capture_lex $P1355
    .lex "self", param_1351
    .lex "$ints", param_1352
.annotate 'line', 854
    set $P107, param_1352
    unless_null $P107, vivify_388
    new $P107, "Undef"
  vivify_388:
    does $I100, $P107, "array"
    if $I100, if_1353
.annotate 'line', 861
    set $P111, param_1352
    unless_null $P111, vivify_389
    new $P111, "Undef"
  vivify_389:
    $I101 = $P111."ast"()
    chr $S100, $I101
    new $P112, 'String'
    set $P112, $S100
.annotate 'line', 860
    set $P106, $P112
.annotate 'line', 854
    goto if_1353_end
  if_1353:
    .const 'Sub' $P1355 = "263_1337966785.387" 
    capture_lex $P1355
    $P110 = $P1355()
    set $P106, $P110
  if_1353_end:
.annotate 'line', 853
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.include "except_types.pasm"
.sub "_block1354"  :anon :subid("263_1337966785.387") :outer("70_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 854
    .const 'Sub' $P1358 = "264_1337966785.387" 
    capture_lex $P1358
.annotate 'line', 855
    new $P108, "Undef"
    set $P1356, $P108
    .lex "$result", $P1356
    new $P109, "String"
    assign $P109, ""
    set $P1356, $P109
.annotate 'line', 856
    find_lex $P110, "$ints"
    unless_null $P110, vivify_390
    new $P110, "Undef"
  vivify_390:
    defined $I101, $P110
    unless $I101, for_undef_391
    iter $P109, $P110
    new $P112, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P112, loop1360_handler
    push_eh $P112
  loop1360_test:
    unless $P109, loop1360_done
    shift $P111, $P109
  loop1360_redo:
    .const 'Sub' $P1358 = "264_1337966785.387" 
    capture_lex $P1358
    $P1358($P111)
  loop1360_next:
    goto loop1360_test
  loop1360_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P113, exception, 'type'
    eq $P113, .CONTROL_LOOP_NEXT, loop1360_next
    eq $P113, .CONTROL_LOOP_REDO, loop1360_redo
  loop1360_done:
    pop_eh 
  for_undef_391:
.annotate 'line', 854
    set $P109, $P1356
    unless_null $P109, vivify_394
    new $P109, "Undef"
  vivify_394:
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "_block1357"  :anon :subid("264_1337966785.387") :outer("263_1337966785.387")
    .param pmc param_1359
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 856
    .lex "$_", param_1359
.annotate 'line', 857
    find_lex $P112, "$result"
    unless_null $P112, vivify_392
    new $P112, "Undef"
  vivify_392:
    find_lex $P113, "$_"
    unless_null $P113, vivify_393
    new $P113, "Undef"
  vivify_393:
    $I102 = $P113."ast"()
    chr $S100, $I102
    concat $P114, $P112, $S100
    store_lex "$result", $P114
.annotate 'line', 856
    .return ($P114)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "CTXSAVE" :anon :subid("71_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1362
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 866
    .lex "self", param_1362
.annotate 'line', 867
    get_hll_global $P106, "GLOBAL"
    nqp_get_package_through_who $P107, $P106, "PAST"
    get_who $P108, $P107
    set $P109, $P108["Op"]
.annotate 'line', 873
    new $P110, "ResizablePMCArray"
    push $P110, "    $P0 = find_dynamic_lex \"$*CTXSAVE\""
    push $P110, "    if null $P0 goto ctxsave_done"
    push $P110, "    $I0 = can $P0, \"ctxsave\""
    push $P110, "    unless $I0 goto ctxsave_done"
    push $P110, "    $P0.\"ctxsave\"()"
    push $P110, "  ctxsave_done:"
.annotate 'line', 867
    $P111 = $P109."new"($P110 :named("inline"))
.annotate 'line', 866
    .return ($P111)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "SET_BLOCK_OUTER_CTX" :anon :subid("72_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1364
    .param pmc param_1365
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 880
    .const 'Sub' $P1370 = "265_1337966785.387" 
    capture_lex $P1370
    .lex "self", param_1364
    .lex "$block", param_1365
.annotate 'line', 881
    new $P106, "Undef"
    set $P1366, $P106
    .lex "$outer_ctx", $P1366
    find_dynamic_lex $P109, "%*COMPILING"
    unless_null $P109, vivify_395
    get_hll_global $P107, "GLOBAL"
    get_who $P108, $P107
    set $P109, $P108["%COMPILING"]
    unless_null $P109, vivify_396
    die "Contextual %*COMPILING not found"
  vivify_396:
  vivify_395:
    set $P1367, $P109["%?OPTIONS"]
    unless_null $P1367, vivify_397
    $P1367 = root_new ['parrot';'Hash']
  vivify_397:
    set $P110, $P1367["outer_ctx"]
    unless_null $P110, vivify_398
    new $P110, "Undef"
  vivify_398:
    set $P1366, $P110
.annotate 'line', 882
    set $P108, $P1366
    unless_null $P108, vivify_399
    new $P108, "Undef"
  vivify_399:
    defined $I100, $P108
    if $I100, if_1368
    new $P107, 'Integer'
    set $P107, $I100
    goto if_1368_end
  if_1368:
    .const 'Sub' $P1370 = "265_1337966785.387" 
    capture_lex $P1370
    $P110 = $P1370()
    set $P107, $P110
  if_1368_end:
.annotate 'line', 880
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.include "except_types.pasm"
.sub "_block1369"  :anon :subid("265_1337966785.387") :outer("72_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 882
    .const 'Sub' $P1376 = "266_1337966785.387" 
    capture_lex $P1376
.annotate 'line', 883
    $P1372 = root_new ['parrot';'ResizablePMCArray']
    set $P1371, $P1372
    .lex "@ns", $P1371
    find_lex $P109, "$outer_ctx"
    unless_null $P109, vivify_400
    new $P109, "Undef"
  vivify_400:
    getattribute $P110, $P109, "current_namespace"
    $P111 = $P110."get_name"()
    set $P1371, $P111
.annotate 'line', 884
    set $P1373, $P1371
    unless_null $P1373, vivify_401
    $P1373 = root_new ['parrot';'ResizablePMCArray']
  vivify_401:
    $P1373."shift"()
.annotate 'line', 885
    find_lex $P109, "$block"
    unless_null $P109, vivify_402
    new $P109, "Undef"
  vivify_402:
    set $P1374, $P1371
    unless_null $P1374, vivify_403
    $P1374 = root_new ['parrot';'ResizablePMCArray']
  vivify_403:
    $P109."namespace"($P1374)
.annotate 'line', 886
    find_lex $P110, "$outer_ctx"
    unless_null $P110, vivify_404
    new $P110, "Undef"
  vivify_404:
    $P111 = $P110."lexpad_full"()
    defined $I101, $P111
    unless $I101, for_undef_405
    iter $P109, $P111
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop1378_handler
    push_eh $P113
  loop1378_test:
    unless $P109, loop1378_done
    shift $P112, $P109
  loop1378_redo:
    .const 'Sub' $P1376 = "266_1337966785.387" 
    capture_lex $P1376
    $P1376($P112)
  loop1378_next:
    goto loop1378_test
  loop1378_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop1378_next
    eq $P114, .CONTROL_LOOP_REDO, loop1378_redo
  loop1378_done:
    pop_eh 
  for_undef_405:
.annotate 'line', 882
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "_block1375"  :anon :subid("266_1337966785.387") :outer("265_1337966785.387")
    .param pmc param_1377
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 886
    .lex "$_", param_1377
.annotate 'line', 887
    find_lex $P113, "$block"
    unless_null $P113, vivify_406
    new $P113, "Undef"
  vivify_406:
    find_lex $P114, "$_"
    unless_null $P114, vivify_407
    new $P114, "Undef"
  vivify_407:
    $P115 = $P114."key"()
    find_lex $P116, "$_"
    unless_null $P116, vivify_408
    new $P116, "Undef"
  vivify_408:
    $P117 = $P116."value"()
    $P118 = $P113."symbol"($P115, "lexical" :named("scope"), $P117 :named("value"))
.annotate 'line', 886
    .return ($P118)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.include "except_types.pasm"
.sub "EXPR" :anon :subid("73_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1382
    .param pmc param_1383
    .param pmc param_1384 :optional
    .param int has_param_1384 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 893
    .const 'Sub' $P1416 = "268_1337966785.387" 
    capture_lex $P1416
    .const 'Sub' $P1408 = "267_1337966785.387" 
    capture_lex $P1408
    new $P1381, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1381, control_1380
    push_eh $P1381
    .lex "self", param_1382
    .lex "$/", param_1383
    if has_param_1384, optparam_409
    new $P106, "Undef"
    set param_1384, $P106
  optparam_409:
    .lex "$key", param_1384
.annotate 'line', 895
    new $P107, "Undef"
    set $P1385, $P107
    .lex "$past", $P1385
.annotate 'line', 894
    set $P108, param_1384
    unless_null $P108, vivify_410
    new $P108, "Undef"
  vivify_410:
    if $P108, unless_1386_end
    new $P109, "Exception"
    set $P109['type'], .CONTROL_RETURN
    new $P110, "Float"
    assign $P110, 0
    setattribute $P109, 'payload', $P110
    throw $P109
  unless_1386_end:
.annotate 'line', 895
    set $P108, param_1383
    unless_null $P108, vivify_411
    new $P108, "Undef"
  vivify_411:
    $P109 = $P108."ast"()
    set $P1387, $P109
    defined $I1389, $P1387
    if $I1389, default_1388
    set $P1390, param_1383
    unless_null $P1390, vivify_412
    $P1390 = root_new ['parrot';'Hash']
  vivify_412:
    set $P110, $P1390["OPER"]
    unless_null $P110, vivify_413
    new $P110, "Undef"
  vivify_413:
    $P111 = $P110."ast"()
    set $P1387, $P111
  default_1388:
    set $P1385, $P1387
.annotate 'line', 896
    set $P108, $P1385
    unless_null $P108, vivify_414
    new $P108, "Undef"
  vivify_414:
    if $P108, unless_1391_end
.annotate 'line', 897
    get_hll_global $P109, "GLOBAL"
    nqp_get_package_through_who $P110, $P109, "PAST"
    get_who $P111, $P110
    set $P112, $P111["Op"]
    set $P113, param_1383
    unless_null $P113, vivify_415
    new $P113, "Undef"
  vivify_415:
    $P114 = $P112."new"($P113 :named("node"))
    set $P1385, $P114
.annotate 'line', 898
    set $P1393, param_1383
    unless_null $P1393, vivify_416
    $P1393 = root_new ['parrot';'Hash']
  vivify_416:
    set $P1394, $P1393["OPER"]
    unless_null $P1394, vivify_417
    $P1394 = root_new ['parrot';'Hash']
  vivify_417:
    set $P1395, $P1394["O"]
    unless_null $P1395, vivify_418
    $P1395 = root_new ['parrot';'Hash']
  vivify_418:
    set $P109, $P1395["pasttype"]
    unless_null $P109, vivify_419
    new $P109, "Undef"
  vivify_419:
    if $P109, if_1392
.annotate 'line', 899
    set $P1400, param_1383
    unless_null $P1400, vivify_420
    $P1400 = root_new ['parrot';'Hash']
  vivify_420:
    set $P1401, $P1400["OPER"]
    unless_null $P1401, vivify_421
    $P1401 = root_new ['parrot';'Hash']
  vivify_421:
    set $P1402, $P1401["O"]
    unless_null $P1402, vivify_422
    $P1402 = root_new ['parrot';'Hash']
  vivify_422:
    set $P110, $P1402["pirop"]
    unless_null $P110, vivify_423
    new $P110, "Undef"
  vivify_423:
    unless $P110, if_1399_end
    set $P111, $P1385
    unless_null $P111, vivify_424
    new $P111, "Undef"
  vivify_424:
    set $P1403, param_1383
    unless_null $P1403, vivify_425
    $P1403 = root_new ['parrot';'Hash']
  vivify_425:
    set $P1404, $P1403["OPER"]
    unless_null $P1404, vivify_426
    $P1404 = root_new ['parrot';'Hash']
  vivify_426:
    set $P1405, $P1404["O"]
    unless_null $P1405, vivify_427
    $P1405 = root_new ['parrot';'Hash']
  vivify_427:
    set $P112, $P1405["pirop"]
    unless_null $P112, vivify_428
    new $P112, "Undef"
  vivify_428:
    set $S100, $P112
    $P111."pirop"($S100)
  if_1399_end:
    goto if_1392_end
  if_1392:
.annotate 'line', 898
    set $P110, $P1385
    unless_null $P110, vivify_429
    new $P110, "Undef"
  vivify_429:
    set $P1396, param_1383
    unless_null $P1396, vivify_430
    $P1396 = root_new ['parrot';'Hash']
  vivify_430:
    set $P1397, $P1396["OPER"]
    unless_null $P1397, vivify_431
    $P1397 = root_new ['parrot';'Hash']
  vivify_431:
    set $P1398, $P1397["O"]
    unless_null $P1398, vivify_432
    $P1398 = root_new ['parrot';'Hash']
  vivify_432:
    set $P111, $P1398["pasttype"]
    unless_null $P111, vivify_433
    new $P111, "Undef"
  vivify_433:
    set $S100, $P111
    $P110."pasttype"($S100)
  if_1392_end:
.annotate 'line', 900
    set $P109, $P1385
    unless_null $P109, vivify_434
    new $P109, "Undef"
  vivify_434:
    $P110 = $P109."name"()
    if $P110, unless_1406_end
    .const 'Sub' $P1408 = "267_1337966785.387" 
    capture_lex $P1408
    $P1408()
  unless_1406_end:
  unless_1391_end:
.annotate 'line', 906
    set $P108, param_1384
    unless_null $P108, vivify_442
    new $P108, "Undef"
  vivify_442:
    set $S100, $P108
    iseq $I100, $S100, "POSTFIX"
    if $I100, if_1413
.annotate 'line', 908
    set $P110, param_1383
    unless_null $P110, vivify_443
    new $P110, "Undef"
  vivify_443:
    $P111 = $P110."list"()
    defined $I101, $P111
    unless $I101, for_undef_444
    iter $P109, $P111
    new $P114, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P114, loop1419_handler
    push_eh $P114
  loop1419_test:
    unless $P109, loop1419_done
    shift $P112, $P109
  loop1419_redo:
    .const 'Sub' $P1416 = "268_1337966785.387" 
    capture_lex $P1416
    $P1416($P112)
  loop1419_next:
    goto loop1419_test
  loop1419_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P115, exception, 'type'
    eq $P115, .CONTROL_LOOP_NEXT, loop1419_next
    eq $P115, .CONTROL_LOOP_REDO, loop1419_redo
  loop1419_done:
    pop_eh 
  for_undef_444:
.annotate 'line', 907
    goto if_1413_end
  if_1413:
.annotate 'line', 906
    set $P109, $P1385
    unless_null $P109, vivify_448
    new $P109, "Undef"
  vivify_448:
    set $P1414, param_1383
    unless_null $P1414, vivify_449
    $P1414 = root_new ['parrot';'ResizablePMCArray']
  vivify_449:
    set $P110, $P1414[0]
    unless_null $P110, vivify_450
    new $P110, "Undef"
  vivify_450:
    $P111 = $P110."ast"()
    $P109."unshift"($P111)
  if_1413_end:
.annotate 'line', 910
    set $P108, param_1383
    set $P109, $P1385
    unless_null $P109, vivify_451
    new $P109, "Undef"
  vivify_451:
    $P110 = $P108."!make"($P109)
.annotate 'line', 893
    .return ($P110)
  control_1380:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P108, exception, "payload"
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "_block1407"  :anon :subid("267_1337966785.387") :outer("73_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 902
    new $P111, "Undef"
    set $P1409, $P111
    .lex "$name", $P1409
.annotate 'line', 901
    find_lex $P112, "$key"
    unless_null $P112, vivify_435
    new $P112, "Undef"
  vivify_435:
    set $S100, $P112
    iseq $I100, $S100, "LIST"
    unless $I100, if_1410_end
    new $P113, "String"
    assign $P113, "infix"
    store_lex "$key", $P113
  if_1410_end:
.annotate 'line', 902
    find_lex $P112, "$key"
    unless_null $P112, vivify_436
    new $P112, "Undef"
  vivify_436:
    set $S100, $P112
    downcase $S101, $S100
    new $P113, 'String'
    set $P113, $S101
    concat $P114, $P113, ":<"
    find_lex $P1411, "$/"
    unless_null $P1411, vivify_437
    $P1411 = root_new ['parrot';'Hash']
  vivify_437:
    set $P1412, $P1411["OPER"]
    unless_null $P1412, vivify_438
    $P1412 = root_new ['parrot';'Hash']
  vivify_438:
    set $P115, $P1412["sym"]
    unless_null $P115, vivify_439
    new $P115, "Undef"
  vivify_439:
    concat $P116, $P114, $P115
    concat $P117, $P116, ">"
    set $P1409, $P117
.annotate 'line', 903
    find_lex $P112, "$past"
    unless_null $P112, vivify_440
    new $P112, "Undef"
  vivify_440:
    new $P113, "String"
    assign $P113, "&"
    set $P114, $P1409
    unless_null $P114, vivify_441
    new $P114, "Undef"
  vivify_441:
    concat $P115, $P113, $P114
    $P116 = $P112."name"($P115)
.annotate 'line', 900
    .return ($P116)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "_block1415"  :anon :subid("268_1337966785.387") :outer("73_1337966785.387")
    .param pmc param_1417
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 908
    .lex "$_", param_1417
    find_lex $P114, "$_"
    unless_null $P114, vivify_445
    new $P114, "Undef"
  vivify_445:
    $P115 = $P114."ast"()
    defined $I102, $P115
    if $I102, if_1418
    new $P113, 'Integer'
    set $P113, $I102
    goto if_1418_end
  if_1418:
    find_lex $P116, "$past"
    unless_null $P116, vivify_446
    new $P116, "Undef"
  vivify_446:
    find_lex $P117, "$_"
    unless_null $P117, vivify_447
    new $P117, "Undef"
  vivify_447:
    $P118 = $P117."ast"()
    $P119 = $P116."push"($P118)
    set $P113, $P119
  if_1418_end:
    .return ($P113)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "term:sym<circumfix>" :anon :subid("74_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1421
    .param pmc param_1422
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 913
    .lex "self", param_1421
    .lex "$/", param_1422
    set $P106, param_1422
    set $P1423, param_1422
    unless_null $P1423, vivify_452
    $P1423 = root_new ['parrot';'Hash']
  vivify_452:
    set $P107, $P1423["circumfix"]
    unless_null $P107, vivify_453
    new $P107, "Undef"
  vivify_453:
    $P108 = $P107."ast"()
    $P109 = $P106."!make"($P108)
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "termish" :anon :subid("75_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1425
    .param pmc param_1426
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 915
    .lex "self", param_1425
    .lex "$/", param_1426
    set $P106, param_1426
    set $P1427, param_1426
    unless_null $P1427, vivify_454
    $P1427 = root_new ['parrot';'Hash']
  vivify_454:
    set $P107, $P1427["term"]
    unless_null $P107, vivify_455
    new $P107, "Undef"
  vivify_455:
    $P108 = $P107."ast"()
    $P109 = $P106."!make"($P108)
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "nullterm" :anon :subid("76_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1429
    .param pmc param_1430
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 916
    .lex "self", param_1429
    .lex "$/", param_1430
    set $P106, param_1430
    new $P107, "Undef"
    $P108 = $P106."!make"($P107)
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "nullterm_alt" :anon :subid("77_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1432
    .param pmc param_1433
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 917
    .lex "self", param_1432
    .lex "$/", param_1433
    set $P106, param_1433
    set $P1434, param_1433
    unless_null $P1434, vivify_456
    $P1434 = root_new ['parrot';'Hash']
  vivify_456:
    set $P107, $P1434["term"]
    unless_null $P107, vivify_457
    new $P107, "Undef"
  vivify_457:
    $P108 = $P107."ast"()
    $P109 = $P106."!make"($P108)
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "integer" :anon :subid("78_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1436
    .param pmc param_1437
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 919
    .lex "self", param_1436
    .lex "$/", param_1437
    set $P106, param_1437
    set $P1438, param_1437
    unless_null $P1438, vivify_458
    $P1438 = root_new ['parrot';'Hash']
  vivify_458:
    set $P107, $P1438["VALUE"]
    unless_null $P107, vivify_459
    new $P107, "Undef"
  vivify_459:
    $P108 = $P107."ast"()
    $P109 = $P106."!make"($P108)
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "dec_number" :anon :subid("79_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1440
    .param pmc param_1441
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 921
    .lex "self", param_1440
    .lex "$/", param_1441
    set $P106, param_1441
    set $P107, param_1441
    unless_null $P107, vivify_460
    new $P107, "Undef"
  vivify_460:
    set $N100, $P107
    $P108 = $P106."!make"($N100)
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "decint" :anon :subid("80_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1443
    .param pmc param_1444
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 923
    .lex "self", param_1443
    .lex "$/", param_1444
    set $P106, param_1444
    set $P107, param_1444
    unless_null $P107, vivify_461
    new $P107, "Undef"
  vivify_461:
    $P108 = "string_to_int"($P107, 10)
    $P109 = $P106."!make"($P108)
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "hexint" :anon :subid("81_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1446
    .param pmc param_1447
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 924
    .lex "self", param_1446
    .lex "$/", param_1447
    set $P106, param_1447
    set $P107, param_1447
    unless_null $P107, vivify_462
    new $P107, "Undef"
  vivify_462:
    $P108 = "string_to_int"($P107, 16)
    $P109 = $P106."!make"($P108)
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "octint" :anon :subid("82_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1449
    .param pmc param_1450
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 925
    .lex "self", param_1449
    .lex "$/", param_1450
    set $P106, param_1450
    set $P107, param_1450
    unless_null $P107, vivify_463
    new $P107, "Undef"
  vivify_463:
    $P108 = "string_to_int"($P107, 8)
    $P109 = $P106."!make"($P108)
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "binint" :anon :subid("83_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1452
    .param pmc param_1453
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 926
    .lex "self", param_1452
    .lex "$/", param_1453
    set $P106, param_1453
    set $P107, param_1453
    unless_null $P107, vivify_464
    new $P107, "Undef"
  vivify_464:
    $P108 = "string_to_int"($P107, 2)
    $P109 = $P106."!make"($P108)
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_EXPR" :anon :subid("84_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1455
    .param pmc param_1456
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 928
    .const 'Sub' $P1462 = "269_1337966785.387" 
    capture_lex $P1462
    .lex "self", param_1455
    .lex "$/", param_1456
.annotate 'line', 929
    new $P106, "Undef"
    set $P1457, $P106
    .lex "$past", $P1457
    set $P1458, param_1456
    unless_null $P1458, vivify_465
    $P1458 = root_new ['parrot';'Hash']
  vivify_465:
    set $P107, $P1458["quote_delimited"]
    unless_null $P107, vivify_466
    new $P107, "Undef"
  vivify_466:
    $P108 = $P107."ast"()
    set $P1457, $P108
.annotate 'line', 930
    find_dynamic_lex $P109, "%*QUOTEMOD"
    unless_null $P109, vivify_467
    get_hll_global $P107, "GLOBAL"
    get_who $P108, $P107
    set $P109, $P108["%QUOTEMOD"]
    unless_null $P109, vivify_468
    die "Contextual %*QUOTEMOD not found"
  vivify_468:
  vivify_467:
    set $P110, $P109["w"]
    unless_null $P110, vivify_469
    new $P110, "Undef"
  vivify_469:
    unless $P110, if_1459_end
.annotate 'line', 931
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "PAST"
    get_who $P113, $P112
    set $P114, $P113["Node"]
    set $P115, $P1457
    unless_null $P115, vivify_470
    new $P115, "Undef"
  vivify_470:
    $P116 = $P114."ACCEPTS"($P115)
    if $P116, if_1460
.annotate 'line', 934
    .const 'Sub' $P1462 = "269_1337966785.387" 
    capture_lex $P1462
    $P1462()
    goto if_1460_end
  if_1460:
.annotate 'line', 932
    set $P117, param_1456
    unless_null $P117, vivify_481
    new $P117, "Undef"
  vivify_481:
    $P118 = $P117."CURSOR"()
    $P118."panic"("Can't form :w list from non-constant strings (yet)")
  if_1460_end:
  if_1459_end:
.annotate 'line', 945
    get_hll_global $P107, "GLOBAL"
    nqp_get_package_through_who $P108, $P107, "PAST"
    get_who $P109, $P108
    set $P110, $P109["Node"]
    set $P111, $P1457
    unless_null $P111, vivify_482
    new $P111, "Undef"
  vivify_482:
    $P112 = $P110."ACCEPTS"($P111)
    isfalse $I100, $P112
    unless $I100, if_1473_end
.annotate 'line', 946
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Val"]
    set $P117, $P1457
    unless_null $P117, vivify_483
    new $P117, "Undef"
  vivify_483:
    set $S100, $P117
    $P118 = $P116."new"($S100 :named("value"))
    set $P1457, $P118
  if_1473_end:
.annotate 'line', 948
    set $P107, param_1456
    set $P108, $P1457
    unless_null $P108, vivify_484
    new $P108, "Undef"
  vivify_484:
    $P109 = $P107."!make"($P108)
.annotate 'line', 928
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.include "except_types.pasm"
.sub "_block1461"  :anon :subid("269_1337966785.387") :outer("84_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 934
    .const 'Sub' $P1469 = "270_1337966785.387" 
    capture_lex $P1469
.annotate 'line', 935
    $P1464 = root_new ['parrot';'ResizablePMCArray']
    set $P1463, $P1464
    .lex "@words", $P1463
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "HLL"
    nqp_get_package_through_who $P119, $P118, "Grammar"
    get_who $P120, $P119
    set $P121, $P120["split_words"]
    find_lex $P122, "$/"
    unless_null $P122, vivify_471
    new $P122, "Undef"
  vivify_471:
    find_lex $P123, "$past"
    unless_null $P123, vivify_472
    new $P123, "Undef"
  vivify_472:
    $P124 = $P121($P122, $P123)
    set $P1463, $P124
.annotate 'line', 936
    set $P1466, $P1463
    unless_null $P1466, vivify_473
    $P1466 = root_new ['parrot';'ResizablePMCArray']
  vivify_473:
    set $N100, $P1466
    set $N101, 1
    isne $I100, $N100, $N101
    if $I100, if_1465
.annotate 'line', 941
    set $P1472, $P1463
    unless_null $P1472, vivify_474
    $P1472 = root_new ['parrot';'ResizablePMCArray']
  vivify_474:
    set $P119, $P1472[0]
    unless_null $P119, vivify_475
    new $P119, "Undef"
  vivify_475:
    set $S100, $P119
    new $P120, 'String'
    set $P120, $S100
    store_lex "$past", $P120
.annotate 'line', 940
    set $P117, $P120
.annotate 'line', 936
    goto if_1465_end
  if_1465:
.annotate 'line', 937
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P120, $P119
    set $P121, $P120["Op"]
    find_lex $P122, "$/"
    unless_null $P122, vivify_476
    new $P122, "Undef"
  vivify_476:
    $P123 = $P121."new"("list" :named("pasttype"), $P122 :named("node"))
    store_lex "$past", $P123
.annotate 'line', 938
    set $P1467, $P1463
    unless_null $P1467, vivify_477
    $P1467 = root_new ['parrot';'ResizablePMCArray']
  vivify_477:
    defined $I101, $P1467
    unless $I101, for_undef_478
    iter $P118, $P1467
    new $P120, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P120, loop1471_handler
    push_eh $P120
  loop1471_test:
    unless $P118, loop1471_done
    shift $P119, $P118
  loop1471_redo:
    .const 'Sub' $P1469 = "270_1337966785.387" 
    capture_lex $P1469
    $P1469($P119)
  loop1471_next:
    goto loop1471_test
  loop1471_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P121, exception, 'type'
    eq $P121, .CONTROL_LOOP_NEXT, loop1471_next
    eq $P121, .CONTROL_LOOP_REDO, loop1471_redo
  loop1471_done:
    pop_eh 
  for_undef_478:
.annotate 'line', 936
    set $P117, $P118
  if_1465_end:
.annotate 'line', 934
    .return ($P117)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "_block1468"  :anon :subid("270_1337966785.387") :outer("269_1337966785.387")
    .param pmc param_1470
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 938
    .lex "$_", param_1470
    find_lex $P120, "$past"
    unless_null $P120, vivify_479
    new $P120, "Undef"
  vivify_479:
    find_lex $P121, "$_"
    unless_null $P121, vivify_480
    new $P121, "Undef"
  vivify_480:
    $P122 = $P120."push"($P121)
    .return ($P122)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.include "except_types.pasm"
.sub "quote_delimited" :anon :subid("85_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1475
    .param pmc param_1476
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 951
    .const 'Sub' $P1484 = "271_1337966785.387" 
    capture_lex $P1484
    .lex "self", param_1475
    .lex "$/", param_1476
.annotate 'line', 952
    $P1478 = root_new ['parrot';'ResizablePMCArray']
    set $P1477, $P1478
    .lex "@parts", $P1477
.annotate 'line', 953
    new $P106, "Undef"
    set $P1479, $P106
    .lex "$lastlit", $P1479
.annotate 'line', 969
    new $P107, "Undef"
    set $P1480, $P107
    .lex "$past", $P1480
.annotate 'line', 951
    set $P1481, $P1477
    unless_null $P1481, vivify_485
    $P1481 = root_new ['parrot';'ResizablePMCArray']
  vivify_485:
.annotate 'line', 953
    new $P108, "String"
    assign $P108, ""
    set $P1479, $P108
.annotate 'line', 954
    set $P1482, param_1476
    unless_null $P1482, vivify_486
    $P1482 = root_new ['parrot';'Hash']
  vivify_486:
    set $P109, $P1482["quote_atom"]
    unless_null $P109, vivify_487
    new $P109, "Undef"
  vivify_487:
    defined $I100, $P109
    unless $I100, for_undef_488
    iter $P108, $P109
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop1492_handler
    push_eh $P113
  loop1492_test:
    unless $P108, loop1492_done
    shift $P110, $P108
  loop1492_redo:
    .const 'Sub' $P1484 = "271_1337966785.387" 
    capture_lex $P1484
    $P1484($P110)
  loop1492_next:
    goto loop1492_test
  loop1492_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop1492_next
    eq $P114, .CONTROL_LOOP_REDO, loop1492_redo
  loop1492_done:
    pop_eh 
  for_undef_488:
.annotate 'line', 968
    set $P108, $P1479
    unless_null $P108, vivify_501
    new $P108, "Undef"
  vivify_501:
    set $S100, $P108
    isgt $I100, $S100, ""
    unless $I100, if_1493_end
    set $P1494, $P1477
    unless_null $P1494, vivify_502
    $P1494 = root_new ['parrot';'ResizablePMCArray']
  vivify_502:
    set $P109, $P1479
    unless_null $P109, vivify_503
    new $P109, "Undef"
  vivify_503:
    $P1494."push"($P109)
  if_1493_end:
.annotate 'line', 969
    set $P1496, $P1477
    unless_null $P1496, vivify_504
    $P1496 = root_new ['parrot';'ResizablePMCArray']
  vivify_504:
    if $P1496, if_1495
    new $P110, "String"
    assign $P110, ""
    set $P108, $P110
    goto if_1495_end
  if_1495:
    set $P1497, $P1477
    unless_null $P1497, vivify_505
    $P1497 = root_new ['parrot';'ResizablePMCArray']
  vivify_505:
    $P109 = $P1497."shift"()
    set $P108, $P109
  if_1495_end:
    set $P1480, $P108
.annotate 'line', 970
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop1500_handler
    push_eh $P108
  loop1500_test:
    set $P1498, $P1477
    unless_null $P1498, vivify_506
    $P1498 = root_new ['parrot';'ResizablePMCArray']
  vivify_506:
    unless $P1498, loop1500_done
  loop1500_redo:
.annotate 'line', 971
    get_hll_global $P108, "GLOBAL"
    nqp_get_package_through_who $P109, $P108, "PAST"
    get_who $P110, $P109
    set $P111, $P110["Op"]
    set $P112, $P1480
    unless_null $P112, vivify_507
    new $P112, "Undef"
  vivify_507:
    set $P1499, $P1477
    unless_null $P1499, vivify_508
    $P1499 = root_new ['parrot';'ResizablePMCArray']
  vivify_508:
    $P113 = $P1499."shift"()
    $P114 = $P111."new"($P112, $P113, "concat" :named("pirop"))
    set $P1480, $P114
  loop1500_next:
.annotate 'line', 970
    goto loop1500_test
  loop1500_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop1500_next
    eq $P109, .CONTROL_LOOP_REDO, loop1500_redo
  loop1500_done:
    pop_eh 
.annotate 'line', 973
    set $P108, param_1476
    set $P109, $P1480
    unless_null $P109, vivify_509
    new $P109, "Undef"
  vivify_509:
    $P110 = $P108."!make"($P109)
.annotate 'line', 951
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "_block1483"  :anon :subid("271_1337966785.387") :outer("85_1337966785.387")
    .param pmc param_1486
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 955
    new $P111, "Undef"
    set $P1485, $P111
    .lex "$ast", $P1485
    .lex "$_", param_1486
    find_lex $P112, "$_"
    unless_null $P112, vivify_489
    new $P112, "Undef"
  vivify_489:
    $P113 = $P112."ast"()
    set $P1485, $P113
.annotate 'line', 956
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Node"]
    set $P117, $P1485
    unless_null $P117, vivify_490
    new $P117, "Undef"
  vivify_490:
    $P118 = $P116."ACCEPTS"($P117)
    isfalse $I101, $P118
    if $I101, if_1487
.annotate 'line', 959
    set $P120, $P1485
    unless_null $P120, vivify_491
    new $P120, "Undef"
  vivify_491:
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Val"]
    $P126 = $P120."isa"($P125)
    if $P126, if_1488
.annotate 'line', 963
    find_lex $P127, "$lastlit"
    unless_null $P127, vivify_492
    new $P127, "Undef"
  vivify_492:
    set $S100, $P127
    isgt $I102, $S100, ""
    unless $I102, if_1489_end
    find_lex $P1490, "@parts"
    unless_null $P1490, vivify_493
    $P1490 = root_new ['parrot';'ResizablePMCArray']
  vivify_493:
    find_lex $P128, "$lastlit"
    unless_null $P128, vivify_494
    new $P128, "Undef"
  vivify_494:
    $P1490."push"($P128)
  if_1489_end:
.annotate 'line', 964
    find_lex $P1491, "@parts"
    unless_null $P1491, vivify_495
    $P1491 = root_new ['parrot';'ResizablePMCArray']
  vivify_495:
    set $P127, $P1485
    unless_null $P127, vivify_496
    new $P127, "Undef"
  vivify_496:
    $P1491."push"($P127)
.annotate 'line', 965
    new $P127, "String"
    assign $P127, ""
    store_lex "$lastlit", $P127
.annotate 'line', 962
    set $P119, $P127
.annotate 'line', 959
    goto if_1488_end
  if_1488:
.annotate 'line', 960
    find_lex $P127, "$lastlit"
    unless_null $P127, vivify_497
    new $P127, "Undef"
  vivify_497:
    set $P128, $P1485
    unless_null $P128, vivify_498
    new $P128, "Undef"
  vivify_498:
    $S100 = $P128."value"()
    concat $P129, $P127, $S100
    store_lex "$lastlit", $P129
.annotate 'line', 959
    set $P119, $P129
  if_1488_end:
    set $P112, $P119
.annotate 'line', 956
    goto if_1487_end
  if_1487:
.annotate 'line', 957
    find_lex $P119, "$lastlit"
    unless_null $P119, vivify_499
    new $P119, "Undef"
  vivify_499:
    set $P120, $P1485
    unless_null $P120, vivify_500
    new $P120, "Undef"
  vivify_500:
    concat $P121, $P119, $P120
    store_lex "$lastlit", $P121
.annotate 'line', 956
    set $P112, $P121
  if_1487_end:
.annotate 'line', 954
    .return ($P112)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_atom" :anon :subid("86_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1502
    .param pmc param_1503
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 976
    .lex "self", param_1502
    .lex "$/", param_1503
.annotate 'line', 977
    set $P106, param_1503
    set $P1505, param_1503
    unless_null $P1505, vivify_510
    $P1505 = root_new ['parrot';'Hash']
  vivify_510:
    set $P108, $P1505["quote_escape"]
    unless_null $P108, vivify_511
    new $P108, "Undef"
  vivify_511:
    if $P108, if_1504
    set $P111, param_1503
    unless_null $P111, vivify_512
    new $P111, "Undef"
  vivify_512:
    set $S100, $P111
    new $P107, 'String'
    set $P107, $S100
    goto if_1504_end
  if_1504:
    set $P1506, param_1503
    unless_null $P1506, vivify_513
    $P1506 = root_new ['parrot';'Hash']
  vivify_513:
    set $P109, $P1506["quote_escape"]
    unless_null $P109, vivify_514
    new $P109, "Undef"
  vivify_514:
    $P110 = $P109."ast"()
    set $P107, $P110
  if_1504_end:
    $P112 = $P106."!make"($P107)
.annotate 'line', 976
    .return ($P112)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<backslash>" :anon :subid("87_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1508
    .param pmc param_1509
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 980
    .lex "self", param_1508
    .lex "$/", param_1509
    set $P106, param_1509
    $P107 = $P106."!make"("\\")
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<stopper>" :anon :subid("88_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1511
    .param pmc param_1512
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 981
    .lex "self", param_1511
    .lex "$/", param_1512
    set $P106, param_1512
    set $P1513, param_1512
    unless_null $P1513, vivify_515
    $P1513 = root_new ['parrot';'Hash']
  vivify_515:
    set $P107, $P1513["stopper"]
    unless_null $P107, vivify_516
    new $P107, "Undef"
  vivify_516:
    set $S100, $P107
    $P108 = $P106."!make"($S100)
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<bs>" :anon :subid("89_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1515
    .param pmc param_1516
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 983
    .lex "self", param_1515
    .lex "$/", param_1516
    set $P106, param_1516
    $P107 = $P106."!make"("\b")
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<nl>" :anon :subid("90_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1518
    .param pmc param_1519
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 984
    .lex "self", param_1518
    .lex "$/", param_1519
    set $P106, param_1519
    $P107 = $P106."!make"("\n")
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<cr>" :anon :subid("91_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1521
    .param pmc param_1522
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 985
    .lex "self", param_1521
    .lex "$/", param_1522
    set $P106, param_1522
    $P107 = $P106."!make"("\r")
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<tab>" :anon :subid("92_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1524
    .param pmc param_1525
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 986
    .lex "self", param_1524
    .lex "$/", param_1525
    set $P106, param_1525
    $P107 = $P106."!make"("\t")
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<ff>" :anon :subid("93_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1527
    .param pmc param_1528
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 987
    .lex "self", param_1527
    .lex "$/", param_1528
    set $P106, param_1528
    $P107 = $P106."!make"("\f")
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<esc>" :anon :subid("94_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1530
    .param pmc param_1531
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 988
    .lex "self", param_1530
    .lex "$/", param_1531
    set $P106, param_1531
    $P107 = $P106."!make"("\e")
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<hex>" :anon :subid("95_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1533
    .param pmc param_1534
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 990
    .lex "self", param_1533
    .lex "$/", param_1534
.annotate 'line', 991
    set $P106, param_1534
    set $P107, param_1533
    nqp_decontainerize $P108, $P107
    set $P1536, param_1534
    unless_null $P1536, vivify_517
    $P1536 = root_new ['parrot';'Hash']
  vivify_517:
    set $P110, $P1536["hexint"]
    unless_null $P110, vivify_518
    new $P110, "Undef"
  vivify_518:
    if $P110, if_1535
    set $P1538, param_1534
    unless_null $P1538, vivify_519
    $P1538 = root_new ['parrot';'Hash']
  vivify_519:
    set $P1539, $P1538["hexints"]
    unless_null $P1539, vivify_520
    $P1539 = root_new ['parrot';'Hash']
  vivify_520:
    set $P112, $P1539["hexint"]
    unless_null $P112, vivify_521
    new $P112, "Undef"
  vivify_521:
    set $P109, $P112
    goto if_1535_end
  if_1535:
    set $P1537, param_1534
    unless_null $P1537, vivify_522
    $P1537 = root_new ['parrot';'Hash']
  vivify_522:
    set $P111, $P1537["hexint"]
    unless_null $P111, vivify_523
    new $P111, "Undef"
  vivify_523:
    set $P109, $P111
  if_1535_end:
    $P113 = $P108."ints_to_string"($P109)
    $P114 = $P106."!make"($P113)
.annotate 'line', 990
    .return ($P114)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<oct>" :anon :subid("96_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1541
    .param pmc param_1542
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 994
    .lex "self", param_1541
    .lex "$/", param_1542
.annotate 'line', 995
    set $P106, param_1542
    set $P107, param_1541
    nqp_decontainerize $P108, $P107
    set $P1544, param_1542
    unless_null $P1544, vivify_524
    $P1544 = root_new ['parrot';'Hash']
  vivify_524:
    set $P110, $P1544["octint"]
    unless_null $P110, vivify_525
    new $P110, "Undef"
  vivify_525:
    if $P110, if_1543
    set $P1546, param_1542
    unless_null $P1546, vivify_526
    $P1546 = root_new ['parrot';'Hash']
  vivify_526:
    set $P1547, $P1546["octints"]
    unless_null $P1547, vivify_527
    $P1547 = root_new ['parrot';'Hash']
  vivify_527:
    set $P112, $P1547["octint"]
    unless_null $P112, vivify_528
    new $P112, "Undef"
  vivify_528:
    set $P109, $P112
    goto if_1543_end
  if_1543:
    set $P1545, param_1542
    unless_null $P1545, vivify_529
    $P1545 = root_new ['parrot';'Hash']
  vivify_529:
    set $P111, $P1545["octint"]
    unless_null $P111, vivify_530
    new $P111, "Undef"
  vivify_530:
    set $P109, $P111
  if_1543_end:
    $P113 = $P108."ints_to_string"($P109)
    $P114 = $P106."!make"($P113)
.annotate 'line', 994
    .return ($P114)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<chr>" :anon :subid("97_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1549
    .param pmc param_1550
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 998
    .lex "self", param_1549
    .lex "$/", param_1550
.annotate 'line', 999
    set $P106, param_1550
    set $P1551, param_1550
    unless_null $P1551, vivify_531
    $P1551 = root_new ['parrot';'Hash']
  vivify_531:
    set $P107, $P1551["charspec"]
    unless_null $P107, vivify_532
    new $P107, "Undef"
  vivify_532:
    $P108 = $P107."ast"()
    $P109 = $P106."!make"($P108)
.annotate 'line', 998
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<0>" :anon :subid("98_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1553
    .param pmc param_1554
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1002
    .lex "self", param_1553
    .lex "$/", param_1554
.annotate 'line', 1003
    set $P106, param_1554
    $P107 = $P106."!make"(unicode:"\x{0}")
.annotate 'line', 1002
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<misc>" :anon :subid("99_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1556
    .param pmc param_1557
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1006
    .lex "self", param_1556
    .lex "$/", param_1557
.annotate 'line', 1007
    set $P106, param_1557
    set $P1559, param_1557
    unless_null $P1559, vivify_533
    $P1559 = root_new ['parrot';'Hash']
  vivify_533:
    set $P108, $P1559["textq"]
    unless_null $P108, vivify_534
    new $P108, "Undef"
  vivify_534:
    if $P108, if_1558
    set $P1561, param_1557
    unless_null $P1561, vivify_535
    $P1561 = root_new ['parrot';'Hash']
  vivify_535:
    set $P112, $P1561["textqq"]
    unless_null $P112, vivify_536
    new $P112, "Undef"
  vivify_536:
    $P113 = $P112."Str"()
    set $P107, $P113
    goto if_1558_end
  if_1558:
    new $P109, "String"
    assign $P109, "\\"
    set $P1560, param_1557
    unless_null $P1560, vivify_537
    $P1560 = root_new ['parrot';'Hash']
  vivify_537:
    set $P110, $P1560["textq"]
    unless_null $P110, vivify_538
    new $P110, "Undef"
  vivify_538:
    $S100 = $P110."Str"()
    concat $P111, $P109, $S100
    set $P107, $P111
  if_1558_end:
    $P114 = $P106."!make"($P107)
.annotate 'line', 1006
    .return ($P114)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "charname" :anon :subid("100_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1563
    .param pmc param_1564
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1010
    .lex "self", param_1563
    .lex "$/", param_1564
.annotate 'line', 1011
    new $P106, "Undef"
    set $P1565, $P106
    .lex "$codepoint", $P1565
.annotate 'line', 1012
    set $P1567, param_1564
    unless_null $P1567, vivify_539
    $P1567 = root_new ['parrot';'Hash']
  vivify_539:
    set $P108, $P1567["integer"]
    unless_null $P108, vivify_540
    new $P108, "Undef"
  vivify_540:
    if $P108, if_1566
.annotate 'line', 1013
    set $P111, param_1564
    unless_null $P111, vivify_541
    new $P111, "Undef"
  vivify_541:
    set $S100, $P111
    find_codepoint $I100, $S100
    new $P107, 'Integer'
    set $P107, $I100
.annotate 'line', 1012
    goto if_1566_end
  if_1566:
    set $P1568, param_1564
    unless_null $P1568, vivify_542
    $P1568 = root_new ['parrot';'Hash']
  vivify_542:
    set $P109, $P1568["integer"]
    unless_null $P109, vivify_543
    new $P109, "Undef"
  vivify_543:
    $P110 = $P109."ast"()
    set $P107, $P110
  if_1566_end:
    set $P1565, $P107
.annotate 'line', 1014
    set $P107, $P1565
    unless_null $P107, vivify_544
    new $P107, "Undef"
  vivify_544:
    set $N100, $P107
    set $N101, 0
    islt $I100, $N100, $N101
    unless $I100, if_1569_end
    set $P108, param_1564
    unless_null $P108, vivify_545
    new $P108, "Undef"
  vivify_545:
    $P109 = $P108."CURSOR"()
    new $P110, 'String'
    set $P110, "Unrecognized character name "
    set $P111, param_1564
    unless_null $P111, vivify_546
    new $P111, "Undef"
  vivify_546:
    concat $P112, $P110, $P111
    $P109."panic"($P112)
  if_1569_end:
.annotate 'line', 1015
    set $P107, param_1564
    set $P108, $P1565
    unless_null $P108, vivify_547
    new $P108, "Undef"
  vivify_547:
    set $I100, $P108
    chr $S100, $I100
    $P109 = $P107."!make"($S100)
.annotate 'line', 1010
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.include "except_types.pasm"
.sub "charnames" :anon :subid("101_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1571
    .param pmc param_1572
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1018
    .const 'Sub' $P1576 = "272_1337966785.387" 
    capture_lex $P1576
    .lex "self", param_1571
    .lex "$/", param_1572
.annotate 'line', 1019
    new $P106, "Undef"
    set $P1573, $P106
    .lex "$str", $P1573
    new $P107, "String"
    assign $P107, ""
    set $P1573, $P107
.annotate 'line', 1020
    set $P1574, param_1572
    unless_null $P1574, vivify_548
    $P1574 = root_new ['parrot';'Hash']
  vivify_548:
    set $P108, $P1574["charname"]
    unless_null $P108, vivify_549
    new $P108, "Undef"
  vivify_549:
    defined $I100, $P108
    unless $I100, for_undef_550
    iter $P107, $P108
    new $P110, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P110, loop1578_handler
    push_eh $P110
  loop1578_test:
    unless $P107, loop1578_done
    shift $P109, $P107
  loop1578_redo:
    .const 'Sub' $P1576 = "272_1337966785.387" 
    capture_lex $P1576
    $P1576($P109)
  loop1578_next:
    goto loop1578_test
  loop1578_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P111, exception, 'type'
    eq $P111, .CONTROL_LOOP_NEXT, loop1578_next
    eq $P111, .CONTROL_LOOP_REDO, loop1578_redo
  loop1578_done:
    pop_eh 
  for_undef_550:
.annotate 'line', 1021
    set $P107, param_1572
    set $P108, $P1573
    unless_null $P108, vivify_553
    new $P108, "Undef"
  vivify_553:
    $P109 = $P107."!make"($P108)
.annotate 'line', 1018
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "_block1575"  :anon :subid("272_1337966785.387") :outer("101_1337966785.387")
    .param pmc param_1577
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1020
    .lex "$_", param_1577
    find_lex $P110, "$str"
    unless_null $P110, vivify_551
    new $P110, "Undef"
  vivify_551:
    find_lex $P111, "$_"
    unless_null $P111, vivify_552
    new $P111, "Undef"
  vivify_552:
    $S100 = $P111."ast"()
    concat $P112, $P110, $S100
    store_lex "$str", $P112
    .return ($P112)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "charspec" :anon :subid("102_1337966785.387") :outer("261_1337966785.387")
    .param pmc param_1580
    .param pmc param_1581
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1024
    .lex "self", param_1580
    .lex "$/", param_1581
.annotate 'line', 1025
    set $P106, param_1581
    set $P1583, param_1581
    unless_null $P1583, vivify_554
    $P1583 = root_new ['parrot';'Hash']
  vivify_554:
    set $P108, $P1583["charnames"]
    unless_null $P108, vivify_555
    new $P108, "Undef"
  vivify_555:
    if $P108, if_1582
    set $P111, param_1581
    unless_null $P111, vivify_556
    new $P111, "Undef"
  vivify_556:
    $I100 = "string_to_int"($P111, 10)
    chr $S100, $I100
    new $P107, 'String'
    set $P107, $S100
    goto if_1582_end
  if_1582:
    set $P1584, param_1581
    unless_null $P1584, vivify_557
    $P1584 = root_new ['parrot';'Hash']
  vivify_557:
    set $P109, $P1584["charnames"]
    unless_null $P109, vivify_558
    new $P109, "Undef"
  vivify_558:
    $P110 = $P109."ast"()
    set $P107, $P110
  if_1582_end:
    $P112 = $P106."!make"($P107)
.annotate 'line', 1024
    .return ($P112)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1586"  :subid("273_1337966785.387") :outer("179_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1038
    .const 'Sub' $P2250 = "143_1337966785.387" 
    capture_lex $P2250
    .const 'Sub' $P2226 = "142_1337966785.387" 
    capture_lex $P2226
    .const 'Sub' $P2192 = "141_1337966785.387" 
    capture_lex $P2192
    .const 'Sub' $P2179 = "140_1337966785.387" 
    capture_lex $P2179
    .const 'Sub' $P2161 = "139_1337966785.387" 
    capture_lex $P2161
    .const 'Sub' $P2149 = "138_1337966785.387" 
    capture_lex $P2149
    .const 'Sub' $P2138 = "137_1337966785.387" 
    capture_lex $P2138
    .const 'Sub' $P2134 = "136_1337966785.387" 
    capture_lex $P2134
    .const 'Sub' $P2122 = "135_1337966785.387" 
    capture_lex $P2122
    .const 'Sub' $P2117 = "134_1337966785.387" 
    capture_lex $P2117
    .const 'Sub' $P2112 = "133_1337966785.387" 
    capture_lex $P2112
    .const 'Sub' $P2110 = "132_1337966785.387" 
    capture_lex $P2110
    .const 'Sub' $P2105 = "131_1337966785.387" 
    capture_lex $P2105
    .const 'Sub' $P2099 = "130_1337966785.387" 
    capture_lex $P2099
    .const 'Sub' $P2066 = "129_1337966785.387" 
    capture_lex $P2066
    .const 'Sub' $P2040 = "128_1337966785.387" 
    capture_lex $P2040
    .const 'Sub' $P1986 = "127_1337966785.387" 
    capture_lex $P1986
    .const 'Sub' $P1960 = "126_1337966785.387" 
    capture_lex $P1960
    .const 'Sub' $P1870 = "125_1337966785.387" 
    capture_lex $P1870
    .const 'Sub' $P1850 = "124_1337966785.387" 
    capture_lex $P1850
    .const 'Sub' $P1842 = "123_1337966785.387" 
    capture_lex $P1842
    .const 'Sub' $P1838 = "122_1337966785.387" 
    capture_lex $P1838
    .const 'Sub' $P1836 = "121_1337966785.387" 
    capture_lex $P1836
    .const 'Sub' $P1834 = "120_1337966785.387" 
    capture_lex $P1834
    .const 'Sub' $P1828 = "119_1337966785.387" 
    capture_lex $P1828
    .const 'Sub' $P1822 = "118_1337966785.387" 
    capture_lex $P1822
    .const 'Sub' $P1814 = "117_1337966785.387" 
    capture_lex $P1814
    .const 'Sub' $P1810 = "116_1337966785.387" 
    capture_lex $P1810
    .const 'Sub' $P1807 = "115_1337966785.387" 
    capture_lex $P1807
    .const 'Sub' $P1784 = "114_1337966785.387" 
    capture_lex $P1784
    .const 'Sub' $P1715 = "113_1337966785.387" 
    capture_lex $P1715
    .const 'Sub' $P1711 = "112_1337966785.387" 
    capture_lex $P1711
    .const 'Sub' $P1681 = "111_1337966785.387" 
    capture_lex $P1681
    .const 'Sub' $P1666 = "110_1337966785.387" 
    capture_lex $P1666
    .const 'Sub' $P1663 = "109_1337966785.387" 
    capture_lex $P1663
    .const 'Sub' $P1660 = "108_1337966785.387" 
    capture_lex $P1660
    .const 'Sub' $P1656 = "107_1337966785.387" 
    capture_lex $P1656
    .const 'Sub' $P1649 = "106_1337966785.387" 
    capture_lex $P1649
    .const 'Sub' $P1607 = "105_1337966785.387" 
    capture_lex $P1607
    .const 'Sub' $P1600 = "104_1337966785.387" 
    capture_lex $P1600
    .const 'Sub' $P1597 = "103_1337966785.387" 
    capture_lex $P1597
    .const 'Sub' $P1589 = "274_1337966785.387" 
    capture_lex $P1589
.annotate 'line', 1071
    .const 'Sub' $P1589 = "274_1337966785.387" 
    newclosure $P1593, $P1589
    set $P1588, $P1593
    .lex "value_type", $P1588
.annotate 'line', 1038
    .lex "$?PACKAGE", $P1594
    .lex "$?CLASS", $P1595
    set $P102, $P1594
    get_who $P103, $P102
    set $P1596, $P103["%parrot_config"]
    unless_null $P1596, vivify_561
    $P1596 = root_new ['parrot';'Hash']
  vivify_561:
    set $P102, $P1588
.annotate 'line', 1638
    .const 'Sub' $P2250 = "143_1337966785.387" 
    newclosure $P2255, $P2250
.annotate 'line', 1038
    .return ($P2255)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "value_type"  :subid("274_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1590
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1071
    .lex "$value", param_1590
.annotate 'line', 1072
    set $P102, param_1590
    unless_null $P102, vivify_559
    new $P102, "Undef"
  vivify_559:
    isa $I100, $P102, "NameSpace"
    if $I100, if_1591
.annotate 'line', 1074
    set $P105, param_1590
    unless_null $P105, vivify_560
    new $P105, "Undef"
  vivify_560:
    isa $I101, $P105, "Sub"
    if $I101, if_1592
    new $P107, "String"
    assign $P107, "var"
    set $P104, $P107
    goto if_1592_end
  if_1592:
    new $P106, "String"
    assign $P106, "sub"
    set $P104, $P106
  if_1592_end:
    set $P101, $P104
.annotate 'line', 1072
    goto if_1591_end
  if_1591:
    new $P103, "String"
    assign $P103, "namespace"
    set $P101, $P103
  if_1591_end:
.annotate 'line', 1071
    .return ($P101)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "new" :anon :subid("103_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1598
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1051
    .lex "self", param_1598
.annotate 'line', 1052
    new $P102, "Undef"
    set $P1599, $P102
    .lex "$obj", $P1599
    set $P103, param_1598
    nqp_decontainerize $P104, $P103
    repr_instance_of $P105, $P104
    set $P1599, $P105
.annotate 'line', 1053
    set $P103, $P1599
    unless_null $P103, vivify_562
    new $P103, "Undef"
  vivify_562:
    $P103."BUILD"()
.annotate 'line', 1051
    set $P103, $P1599
    unless_null $P103, vivify_563
    new $P103, "Undef"
  vivify_563:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "BUILD" :anon :subid("104_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1601
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1057
    .const 'Sub' $P1604 = "275_1337966785.387" 
    capture_lex $P1604
    .lex "self", param_1601
.annotate 'line', 1059
    split $P102, " ", "parse past post pir evalpmc"
    set $P103, param_1601
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_bind_attr_obj $P104, $P105, "@!stages", 0, $P102
.annotate 'line', 1062
    split $P102, " ", "e=s help|h target=s dumper=s trace|t=s encoding=s output|o=s combine version|v show-config stagestats ll-exception rxtrace nqpevent=s profile profile-compile"
    set $P103, param_1601
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_bind_attr_obj $P104, $P105, "@!cmdoptions", 3, $P102
.annotate 'line', 1063
    new $P102, "String"
    assign $P102, "This compiler is based on HLL::Compiler.\n\nOptions:\n"
    set $P103, param_1601
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_bind_attr_obj $P104, $P105, "$!usage", 4, $P102
.annotate 'line', 1064
    set $P103, param_1601
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_get_attr_obj $P1602, $P104, $P105, "@!cmdoptions", 3
    unless_null $P1602, vivify_564
    $P1602 = root_new ['parrot';'ResizablePMCArray']
  vivify_564:
    defined $I100, $P1602
    unless $I100, for_undef_565
    iter $P102, $P1602
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop1606_handler
    push_eh $P107
  loop1606_test:
    unless $P102, loop1606_done
    shift $P106, $P102
  loop1606_redo:
    .const 'Sub' $P1604 = "275_1337966785.387" 
    capture_lex $P1604
    $P1604($P106)
  loop1606_next:
    goto loop1606_test
  loop1606_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop1606_next
    eq $P108, .CONTROL_LOOP_REDO, loop1606_redo
  loop1606_done:
    pop_eh 
  for_undef_565:
.annotate 'line', 1067
    getinterp $P102
    set $P103, $P102[.IGLOBALS_CONFIG_HASH]
    unless_null $P103, vivify_568
    new $P103, "Undef"
  vivify_568:
    find_lex $P104, "$?PACKAGE"
    get_who $P105, $P104
    set $P105["%parrot_config"], $P103
.annotate 'line', 1068
    new $P102, "Hash"
    set $P103, param_1601
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_bind_attr_obj $P104, $P105, "%!config", 7, $P102
.annotate 'line', 1057
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1603"  :anon :subid("275_1337966785.387") :outer("104_1337966785.387")
    .param pmc param_1605
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1064
    .lex "$_", param_1605
.annotate 'line', 1065
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_get_attr_obj $P110, $P108, $P109, "$!usage", 4
    unless_null $P110, vivify_566
    new $P110, "Undef"
  vivify_566:
    new $P111, 'String'
    set $P111, "    "
    find_lex $P112, "$_"
    unless_null $P112, vivify_567
    new $P112, "Undef"
  vivify_567:
    concat $P113, $P111, $P112
    concat $P114, $P113, "\n"
    concat $P115, $P110, $P114
    find_lex $P116, "self"
    nqp_decontainerize $P117, $P116
    nqp_get_sc_object $P118, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_bind_attr_obj $P117, $P118, "$!usage", 4, $P115
.annotate 'line', 1064
    .return ($P115)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "get_exports" :anon :subid("105_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1608
    .param pmc param_1609
    .param pmc param_1611 :slurpy
    .param pmc param_1610 :optional :named("tagset")
    .param int has_param_1610 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1077
    .const 'Sub' $P1642 = "277_1337966785.387" 
    capture_lex $P1642
    .const 'Sub' $P1633 = "276_1337966785.387" 
    capture_lex $P1633
    .lex "self", param_1608
    .lex "$module", param_1609
    if has_param_1610, optparam_569
    new $P102, "Undef"
    set param_1610, $P102
  optparam_569:
    .lex "$tagset", param_1610
    .lex "@symbols", param_1611
.annotate 'line', 1084
    $P1613 = root_new ['parrot';'Hash']
    set $P1612, $P1613
    .lex "%exports", $P1612
.annotate 'line', 1085
    $P1615 = root_new ['parrot';'Hash']
    set $P1614, $P1615
    .lex "%source", $P1614
.annotate 'line', 1079
    set $P103, param_1609
    unless_null $P103, vivify_570
    new $P103, "Undef"
  vivify_570:
    does $I100, $P103, "hash"
    new $P104, 'Integer'
    set $P104, $I100
    isfalse $I101, $P104
    unless $I101, if_1616_end
.annotate 'line', 1080
    set $P105, param_1608
    nqp_decontainerize $P106, $P105
    set $P107, param_1609
    unless_null $P107, vivify_571
    new $P107, "Undef"
  vivify_571:
    $P108 = $P106."get_module"($P107)
    set param_1609, $P108
  if_1616_end:
.annotate 'line', 1083
    set $P103, param_1610
    unless_null $P103, vivify_572
    new $P103, "Undef"
  vivify_572:
    set $P1617, $P103
    defined $I1619, $P1617
    if $I1619, default_1618
    set $P1621, param_1611
    unless_null $P1621, vivify_573
    $P1621 = root_new ['parrot';'ResizablePMCArray']
  vivify_573:
    if $P1621, if_1620
    new $P106, "String"
    assign $P106, "DEFAULT"
    set $P104, $P106
    goto if_1620_end
  if_1620:
    new $P105, "String"
    assign $P105, "ALL"
    set $P104, $P105
  if_1620_end:
    set $P1617, $P104
  default_1618:
    set param_1610, $P1617
.annotate 'line', 1077
    set $P1622, $P1612
    unless_null $P1622, vivify_574
    $P1622 = root_new ['parrot';'Hash']
  vivify_574:
.annotate 'line', 1085
    set $P103, param_1610
    unless_null $P103, vivify_575
    new $P103, "Undef"
  vivify_575:
    set $S100, $P103
    set $P1623, param_1609
    unless_null $P1623, vivify_576
    $P1623 = root_new ['parrot';'Hash']
  vivify_576:
    set $P1624, $P1623["EXPORT"]
    unless_null $P1624, vivify_577
    $P1624 = root_new ['parrot';'Hash']
  vivify_577:
    set $P104, $P1624[$S100]
    unless_null $P104, vivify_578
    new $P104, "Undef"
  vivify_578:
    set $P1614, $P104
.annotate 'line', 1086
    set $P1626, $P1614
    unless_null $P1626, vivify_579
    $P1626 = root_new ['parrot';'Hash']
  vivify_579:
    defined $I100, $P1626
    new $P103, 'Integer'
    set $P103, $I100
    isfalse $I101, $P103
    unless $I101, if_1625_end
.annotate 'line', 1087
    set $P105, param_1610
    unless_null $P105, vivify_580
    new $P105, "Undef"
  vivify_580:
    set $S100, $P105
    iseq $I102, $S100, "ALL"
    if $I102, if_1627
    $P1628 = root_new ['parrot';'Hash']
    set $P104, $P1628
    goto if_1627_end
  if_1627:
    set $P106, param_1609
    unless_null $P106, vivify_581
    new $P106, "Undef"
  vivify_581:
    set $P104, $P106
  if_1627_end:
    set $P1614, $P104
  if_1625_end:
.annotate 'line', 1089
    set $P1630, param_1611
    unless_null $P1630, vivify_582
    $P1630 = root_new ['parrot';'ResizablePMCArray']
  vivify_582:
    if $P1630, if_1629
.annotate 'line', 1096
    set $P1640, $P1614
    unless_null $P1640, vivify_583
    $P1640 = root_new ['parrot';'Hash']
  vivify_583:
    defined $I100, $P1640
    unless $I100, for_undef_584
    iter $P103, $P1640
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop1647_handler
    push_eh $P107
  loop1647_test:
    unless $P103, loop1647_done
    shift $P104, $P103
  loop1647_redo:
    .const 'Sub' $P1642 = "277_1337966785.387" 
    capture_lex $P1642
    $P1642($P104)
  loop1647_next:
    goto loop1647_test
  loop1647_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop1647_next
    eq $P108, .CONTROL_LOOP_REDO, loop1647_redo
  loop1647_done:
    pop_eh 
  for_undef_584:
.annotate 'line', 1095
    goto if_1629_end
  if_1629:
.annotate 'line', 1090
    set $P1631, param_1611
    unless_null $P1631, vivify_591
    $P1631 = root_new ['parrot';'ResizablePMCArray']
  vivify_591:
    defined $I100, $P1631
    unless $I100, for_undef_592
    iter $P103, $P1631
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop1639_handler
    push_eh $P107
  loop1639_test:
    unless $P103, loop1639_done
    shift $P104, $P103
  loop1639_redo:
    .const 'Sub' $P1633 = "276_1337966785.387" 
    capture_lex $P1633
    $P1633($P104)
  loop1639_next:
    goto loop1639_test
  loop1639_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop1639_next
    eq $P108, .CONTROL_LOOP_REDO, loop1639_redo
  loop1639_done:
    pop_eh 
  for_undef_592:
  if_1629_end:
.annotate 'line', 1077
    set $P1648, $P1612
    unless_null $P1648, vivify_601
    $P1648 = root_new ['parrot';'Hash']
  vivify_601:
    .return ($P1648)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1641"  :anon :subid("277_1337966785.387") :outer("105_1337966785.387")
    .param pmc param_1644
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1097
    new $P105, "Undef"
    set $P1643, $P105
    .lex "$value", $P1643
    .lex "$_", param_1644
    find_lex $P106, "$_"
    unless_null $P106, vivify_585
    new $P106, "Undef"
  vivify_585:
    $P107 = $P106."value"()
    set $P1643, $P107
.annotate 'line', 1098
    set $P106, $P1643
    unless_null $P106, vivify_586
    new $P106, "Undef"
  vivify_586:
    find_lex $P107, "$_"
    unless_null $P107, vivify_587
    new $P107, "Undef"
  vivify_587:
    $P108 = $P107."key"()
    set $P109, $P1643
    unless_null $P109, vivify_588
    new $P109, "Undef"
  vivify_588:
    $P110 = "value_type"($P109)
    find_lex $P1645, "%exports"
    unless_null $P1645, vivify_589
    $P1645 = root_new ['parrot';'Hash']
    store_lex "%exports", $P1645
  vivify_589:
    set $P1646, $P1645[$P110]
    unless_null $P1646, vivify_590
    $P1646 = root_new ['parrot';'Hash']
    set $P1645[$P110], $P1646
  vivify_590:
    set $P1646[$P108], $P106
.annotate 'line', 1096
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1632"  :anon :subid("276_1337966785.387") :outer("105_1337966785.387")
    .param pmc param_1635
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1091
    new $P105, "Undef"
    set $P1634, $P105
    .lex "$value", $P1634
    .lex "$_", param_1635
    find_lex $P106, "$_"
    unless_null $P106, vivify_593
    new $P106, "Undef"
  vivify_593:
    set $S100, $P106
    find_lex $P1636, "%source"
    unless_null $P1636, vivify_594
    $P1636 = root_new ['parrot';'Hash']
  vivify_594:
    set $P107, $P1636[$S100]
    unless_null $P107, vivify_595
    new $P107, "Undef"
  vivify_595:
    set $P1634, $P107
.annotate 'line', 1092
    set $P106, $P1634
    unless_null $P106, vivify_596
    new $P106, "Undef"
  vivify_596:
    find_lex $P107, "$_"
    unless_null $P107, vivify_597
    new $P107, "Undef"
  vivify_597:
    set $P108, $P1634
    unless_null $P108, vivify_598
    new $P108, "Undef"
  vivify_598:
    $P109 = "value_type"($P108)
    find_lex $P1637, "%exports"
    unless_null $P1637, vivify_599
    $P1637 = root_new ['parrot';'Hash']
    store_lex "%exports", $P1637
  vivify_599:
    set $P1638, $P1637[$P109]
    unless_null $P1638, vivify_600
    $P1638 = root_new ['parrot';'Hash']
    set $P1637[$P109], $P1638
  vivify_600:
    set $P1638[$P107], $P106
.annotate 'line', 1090
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "get_module" :anon :subid("106_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1650
    .param pmc param_1651
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1104
    .lex "self", param_1650
    .lex "$name", param_1651
.annotate 'line', 1105
    $P1653 = root_new ['parrot';'ResizablePMCArray']
    set $P1652, $P1653
    .lex "@name", $P1652
    set $P102, param_1650
    nqp_decontainerize $P103, $P102
    set $P104, param_1651
    unless_null $P104, vivify_602
    new $P104, "Undef"
  vivify_602:
    $P105 = $P103."parse_name"($P104)
    set $P1652, $P105
.annotate 'line', 1106
    set $P1654, $P1652
    unless_null $P1654, vivify_603
    $P1654 = root_new ['parrot';'ResizablePMCArray']
  vivify_603:
    set $P102, param_1650
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_get_attr_obj $P105, $P103, $P104, "$!language", 6
    unless_null $P105, vivify_604
    new $P105, "Undef"
  vivify_604:
    set $S100, $P105
    downcase $S101, $S100
    $P1654."unshift"($S101)
.annotate 'line', 1107
    set $P1655, $P1652
    unless_null $P1655, vivify_605
    $P1655 = root_new ['parrot';'ResizablePMCArray']
  vivify_605:
    get_root_namespace $P102, $P1655
.annotate 'line', 1104
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "language" :anon :subid("107_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1657
    .param pmc param_1658 :optional
    .param int has_param_1658 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1110
    .lex "self", param_1657
    if has_param_1658, optparam_606
    new $P102, "Undef"
    set param_1658, $P102
  optparam_606:
    .lex "$name", param_1658
.annotate 'line', 1111
    set $P103, param_1658
    unless_null $P103, vivify_607
    new $P103, "Undef"
  vivify_607:
    unless $P103, if_1659_end
.annotate 'line', 1112
    set $P104, param_1658
    unless_null $P104, vivify_608
    new $P104, "Undef"
  vivify_608:
    set $P105, param_1657
    nqp_decontainerize $P106, $P105
    nqp_get_sc_object $P107, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_bind_attr_obj $P106, $P107, "$!language", 6, $P104
.annotate 'line', 1113
    set $P104, param_1658
    unless_null $P104, vivify_609
    new $P104, "Undef"
  vivify_609:
    set $S100, $P104
    set $P105, param_1657
    nqp_decontainerize $P106, $P105
    compreg $S100, $P106
  if_1659_end:
.annotate 'line', 1110
    set $P103, param_1657
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_get_attr_obj $P106, $P104, $P105, "$!language", 6
    unless_null $P106, vivify_610
    new $P106, "Undef"
  vivify_610:
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "compiler" :anon :subid("108_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1661
    .param pmc param_1662
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1118
    .lex "self", param_1661
    .lex "$name", param_1662
.annotate 'line', 1119
    set $P102, param_1662
    unless_null $P102, vivify_611
    new $P102, "Undef"
  vivify_611:
    set $S100, $P102
    compreg $P103, $S100
.annotate 'line', 1118
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "config" :anon :subid("109_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1664
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1122
    .lex "self", param_1664
    set $P102, param_1664
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_get_attr_obj $P1665, $P103, $P104, "%!config", 7
    unless_null $P1665, vivify_612
    $P1665 = root_new ['parrot';'Hash']
  vivify_612:
    .return ($P1665)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "load_module" :anon :subid("110_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1667
    .param pmc param_1668
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1124
    .const 'Sub' $P1672 = "278_1337966785.387" 
    capture_lex $P1672
    .lex "self", param_1667
    .lex "$name", param_1668
.annotate 'line', 1125
    new $P102, "Undef"
    set $P1669, $P102
    .lex "$base", $P1669
.annotate 'line', 1126
    new $P103, "Undef"
    set $P1670, $P103
    .lex "$loaded", $P1670
.annotate 'line', 1125
    set $P104, param_1667
    nqp_decontainerize $P105, $P104
    set $P106, param_1668
    unless_null $P106, vivify_613
    new $P106, "Undef"
  vivify_613:
    $P107 = $P105."parse_name"($P106)
    join $S100, "/", $P107
    new $P108, 'String'
    set $P108, $S100
    set $P1669, $P108
.annotate 'line', 1126
    new $P104, "Float"
    assign $P104, 0
    set $P1670, $P104
.annotate 'line', 1127
    .const 'Sub' $P1672 = "278_1337966785.387" 
    capture_lex $P1672
    $P1672()
.annotate 'line', 1128
    set $P104, $P1670
    unless_null $P104, vivify_615
    new $P104, "Undef"
  vivify_615:
    if $P104, unless_1680_end
    set $P105, $P1669
    unless_null $P105, vivify_616
    new $P105, "Undef"
  vivify_616:
    concat $P106, $P105, ".pir"
    set $S100, $P106
    load_bytecode $S100
    new $P105, "Float"
    assign $P105, 1
    set $P1670, $P105
  unless_1680_end:
.annotate 'line', 1129
    set $P104, param_1667
    nqp_decontainerize $P105, $P104
    set $P106, param_1668
    unless_null $P106, vivify_617
    new $P106, "Undef"
  vivify_617:
    $P107 = $P105."get_module"($P106)
.annotate 'line', 1124
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block1671"  :anon :subid("278_1337966785.387") :outer("110_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1127
    new $P1675, 'ExceptionHandler'
    set_label $P1675, control_1674
    $P1675."handle_types_except"(.CONTROL_ALL)
    push_eh $P1675
    find_lex $P104, "$base"
    unless_null $P104, vivify_614
    new $P104, "Undef"
  vivify_614:
    concat $P105, $P104, ".pbc"
    set $S100, $P105
    load_bytecode $S100
    new $P104, "Float"
    assign $P104, 1
    store_lex "$loaded", $P104
    pop_eh 
    goto skip_handler_1673
  control_1674:
    peek_exception $P1676
    .local pmc exception 
    .get_results (exception) 
    new $P1678, 'Integer'
    set $P1678, 1
    set exception["handled"], $P1678
    set $I1679, exception["handled"]
    eq $I1679, 1, handled_1677
    rethrow exception
  handled_1677:
    finalize $P1676
    .return (exception)
  skip_handler_1673:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "import" :anon :subid("111_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1682
    .param pmc param_1683
    .param pmc param_1684
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1132
    .const 'Sub' $P1687 = "279_1337966785.387" 
    capture_lex $P1687
    .lex "self", param_1682
    .lex "$target", param_1683
    .lex "%exports", param_1684
.annotate 'line', 1133
    set $P1685, param_1684
    unless_null $P1685, vivify_618
    $P1685 = root_new ['parrot';'Hash']
  vivify_618:
    defined $I100, $P1685
    unless $I100, for_undef_619
    iter $P102, $P1685
    new $P106, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P106, loop1710_handler
    push_eh $P106
  loop1710_test:
    unless $P102, loop1710_done
    shift $P103, $P102
  loop1710_redo:
    .const 'Sub' $P1687 = "279_1337966785.387" 
    capture_lex $P1687
    $P1687($P103)
  loop1710_next:
    goto loop1710_test
  loop1710_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P107, exception, 'type'
    eq $P107, .CONTROL_LOOP_NEXT, loop1710_next
    eq $P107, .CONTROL_LOOP_REDO, loop1710_redo
  loop1710_done:
    pop_eh 
  for_undef_619:
.annotate 'line', 1132
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block1686"  :anon :subid("279_1337966785.387") :outer("111_1337966785.387")
    .param pmc param_1691
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1133
    .const 'Sub' $P1706 = "282_1337966785.387" 
    capture_lex $P1706
    .const 'Sub' $P1701 = "281_1337966785.387" 
    capture_lex $P1701
    .const 'Sub' $P1695 = "280_1337966785.387" 
    capture_lex $P1695
.annotate 'line', 1134
    new $P104, "Undef"
    set $P1688, $P104
    .lex "$type", $P1688
.annotate 'line', 1135
    $P1690 = root_new ['parrot';'Hash']
    set $P1689, $P1690
    .lex "%items", $P1689
    .lex "$_", param_1691
.annotate 'line', 1134
    find_lex $P105, "$_"
    unless_null $P105, vivify_620
    new $P105, "Undef"
  vivify_620:
    $P106 = $P105."key"()
    set $P1688, $P106
.annotate 'line', 1135
    find_lex $P105, "$_"
    unless_null $P105, vivify_621
    new $P105, "Undef"
  vivify_621:
    $P106 = $P105."value"()
    set $P1689, $P106
.annotate 'line', 1136
    find_lex $P106, "self"
    nqp_decontainerize $P107, $P106
    new $P108, 'String'
    set $P108, "import_"
    set $P109, $P1688
    unless_null $P109, vivify_622
    new $P109, "Undef"
  vivify_622:
    concat $P110, $P108, $P109
    set $S100, $P110
    can $I101, $P107, $S100
    if $I101, if_1692
.annotate 'line', 1139
    find_lex $P113, "$target"
    unless_null $P113, vivify_623
    new $P113, "Undef"
  vivify_623:
    new $P114, 'String'
    set $P114, "add_"
    set $P115, $P1688
    unless_null $P115, vivify_624
    new $P115, "Undef"
  vivify_624:
    concat $P116, $P114, $P115
    set $S101, $P116
    can $I102, $P113, $S101
    if $I102, if_1698
.annotate 'line', 1143
    set $P1704, $P1689
    unless_null $P1704, vivify_625
    $P1704 = root_new ['parrot';'Hash']
  vivify_625:
    defined $I103, $P1704
    unless $I103, for_undef_626
    iter $P118, $P1704
    new $P120, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P120, loop1709_handler
    push_eh $P120
  loop1709_test:
    unless $P118, loop1709_done
    shift $P119, $P118
  loop1709_redo:
    .const 'Sub' $P1706 = "282_1337966785.387" 
    capture_lex $P1706
    $P1706($P119)
  loop1709_next:
    goto loop1709_test
  loop1709_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P122, exception, 'type'
    eq $P122, .CONTROL_LOOP_NEXT, loop1709_next
    eq $P122, .CONTROL_LOOP_REDO, loop1709_redo
  loop1709_done:
    pop_eh 
  for_undef_626:
.annotate 'line', 1142
    set $P112, $P118
.annotate 'line', 1139
    goto if_1698_end
  if_1698:
.annotate 'line', 1140
    set $P1699, $P1689
    unless_null $P1699, vivify_630
    $P1699 = root_new ['parrot';'Hash']
  vivify_630:
    defined $I103, $P1699
    unless $I103, for_undef_631
    iter $P117, $P1699
    new $P119, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P119, loop1703_handler
    push_eh $P119
  loop1703_test:
    unless $P117, loop1703_done
    shift $P118, $P117
  loop1703_redo:
    .const 'Sub' $P1701 = "281_1337966785.387" 
    capture_lex $P1701
    $P1701($P118)
  loop1703_next:
    goto loop1703_test
  loop1703_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P120, exception, 'type'
    eq $P120, .CONTROL_LOOP_NEXT, loop1703_next
    eq $P120, .CONTROL_LOOP_REDO, loop1703_redo
  loop1703_done:
    pop_eh 
  for_undef_631:
.annotate 'line', 1139
    set $P112, $P117
  if_1698_end:
    set $P105, $P112
.annotate 'line', 1136
    goto if_1692_end
  if_1692:
.annotate 'line', 1137
    set $P1693, $P1689
    unless_null $P1693, vivify_636
    $P1693 = root_new ['parrot';'Hash']
  vivify_636:
    defined $I102, $P1693
    unless $I102, for_undef_637
    iter $P111, $P1693
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop1697_handler
    push_eh $P113
  loop1697_test:
    unless $P111, loop1697_done
    shift $P112, $P111
  loop1697_redo:
    .const 'Sub' $P1695 = "280_1337966785.387" 
    capture_lex $P1695
    $P1695($P112)
  loop1697_next:
    goto loop1697_test
  loop1697_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop1697_next
    eq $P114, .CONTROL_LOOP_REDO, loop1697_redo
  loop1697_done:
    pop_eh 
  for_undef_637:
.annotate 'line', 1136
    set $P105, $P111
  if_1692_end:
.annotate 'line', 1133
    .return ($P105)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1705"  :anon :subid("282_1337966785.387") :outer("279_1337966785.387")
    .param pmc param_1707
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1143
    .lex "$_", param_1707
    find_lex $P120, "$_"
    unless_null $P120, vivify_627
    new $P120, "Undef"
  vivify_627:
    $P121 = $P120."value"()
    find_lex $P122, "$_"
    unless_null $P122, vivify_628
    new $P122, "Undef"
  vivify_628:
    $P123 = $P122."key"()
    set $S102, $P123
    find_lex $P1708, "$target"
    unless_null $P1708, vivify_629
    $P1708 = root_new ['parrot';'Hash']
    store_lex "$target", $P1708
  vivify_629:
    set $P1708[$S102], $P121
    .return ($P121)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1700"  :anon :subid("281_1337966785.387") :outer("279_1337966785.387")
    .param pmc param_1702
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1140
    .lex "$_", param_1702
    find_lex $P119, "$target"
    unless_null $P119, vivify_632
    new $P119, "Undef"
  vivify_632:
    find_lex $P120, "$_"
    unless_null $P120, vivify_633
    new $P120, "Undef"
  vivify_633:
    $P121 = $P120."key"()
    find_lex $P122, "$_"
    unless_null $P122, vivify_634
    new $P122, "Undef"
  vivify_634:
    $P123 = $P122."value"()
    new $P124, 'String'
    set $P124, "add_"
    find_lex $P125, "$type"
    unless_null $P125, vivify_635
    new $P125, "Undef"
  vivify_635:
    concat $P126, $P124, $P125
    set $S102, $P126
    $P127 = $P119.$S102($P121, $P123)
    .return ($P127)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1694"  :anon :subid("280_1337966785.387") :outer("279_1337966785.387")
    .param pmc param_1696
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1137
    .lex "$_", param_1696
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    find_lex $P115, "$target"
    unless_null $P115, vivify_638
    new $P115, "Undef"
  vivify_638:
    find_lex $P116, "$_"
    unless_null $P116, vivify_639
    new $P116, "Undef"
  vivify_639:
    $P117 = $P116."key"()
    find_lex $P118, "$_"
    unless_null $P118, vivify_640
    new $P118, "Undef"
  vivify_640:
    $P119 = $P118."value"()
    new $P120, 'String'
    set $P120, "import_"
    find_lex $P121, "$type"
    unless_null $P121, vivify_641
    new $P121, "Undef"
  vivify_641:
    concat $P122, $P120, $P121
    set $S101, $P122
    $P123 = $P114.$S101($P115, $P117, $P119)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "autoprint" :anon :subid("112_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1712
    .param pmc param_1713
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1148
    .lex "self", param_1712
    .lex "$value", param_1713
.annotate 'line', 1150
    getinterp $P103
    $P104 = $P103."stdout_handle"()
    $N100 = $P104."tell"()
    find_dynamic_lex $P107, "$*AUTOPRINTPOS"
    unless_null $P107, vivify_642
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$AUTOPRINTPOS"]
    unless_null $P107, vivify_643
    die "Contextual $*AUTOPRINTPOS not found"
  vivify_643:
  vivify_642:
    set $N101, $P107
    isgt $I100, $N100, $N101
    unless $I100, unless_1714
    new $P102, 'Integer'
    set $P102, $I100
    goto unless_1714_end
  unless_1714:
.annotate 'line', 1149
    set $P108, param_1713
    unless_null $P108, vivify_644
    new $P108, "Undef"
  vivify_644:
    set $S100, $P108
    say $S100
  unless_1714_end:
.annotate 'line', 1148
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "interactive" :anon :subid("113_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1716
    .param pmc param_1717 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1153
    .const 'Sub' $P1737 = "284_1337966785.387" 
    capture_lex $P1737
    .const 'Sub' $P1719 = "283_1337966785.387" 
    capture_lex $P1719
    .lex "self", param_1716
    .lex "%adverbs", param_1717
.annotate 'line', 1159
    .const 'Sub' $P1719 = "283_1337966785.387" 
    newclosure $P1724, $P1719
    set $P1718, $P1724
    .lex "blank_context", $P1718
.annotate 'line', 1168
    new $P102, "Undef"
    set $P1725, $P102
    .lex "$interactive_ctx", $P1725
.annotate 'line', 1169
    $P1727 = root_new ['parrot';'Hash']
    set $P1726, $P1727
    .lex "%interactive_pad", $P1726
.annotate 'line', 1172
    new $P104, "Undef"
    set $P1728, $P104
    .lex "$target", $P1728
.annotate 'line', 1176
    new $P105, "Undef"
    set $P1729, $P105
    .lex "$stdin", $P1729
.annotate 'line', 1177
    new $P106, "Undef"
    set $P1730, $P106
    .lex "$encoding", $P1730
.annotate 'line', 1182
    new $P107, "Undef"
    set $P1731, $P107
    .lex "$save_ctx", $P1731
.annotate 'line', 1153
    set $P108, $P1718
.annotate 'line', 1167
    set $P108, $P1718
    null $P109
    $P108."set_outer"($P109)
.annotate 'line', 1168
    $P108 = "blank_context"()
    set $P1725, $P108
.annotate 'line', 1170
    set $P108, $P1725
    unless_null $P108, vivify_649
    new $P108, "Undef"
  vivify_649:
    getattribute $P109, $P108, "lex_pad"
    set $P1726, $P109
.annotate 'line', 1172
    set $P1732, param_1717
    unless_null $P1732, vivify_650
    $P1732 = root_new ['parrot';'Hash']
  vivify_650:
    set $P108, $P1732["target"]
    unless_null $P108, vivify_651
    new $P108, "Undef"
  vivify_651:
    set $S100, $P108
    downcase $S101, $S100
    new $P109, 'String'
    set $P109, $S101
    set $P1728, $P109
.annotate 'line', 1174
    getinterp $P108
    $P109 = $P108."stderr_handle"()
    set $P110, param_1716
    nqp_decontainerize $P111, $P110
    $P112 = $P111."interactive_banner"()
    print $P109, $P112
.annotate 'line', 1176
    getinterp $P108
    $P109 = $P108."stdin_handle"()
    set $P1729, $P109
.annotate 'line', 1177
    set $P1733, param_1717
    unless_null $P1733, vivify_652
    $P1733 = root_new ['parrot';'Hash']
  vivify_652:
    set $P108, $P1733["encoding"]
    unless_null $P108, vivify_653
    new $P108, "Undef"
  vivify_653:
    set $S100, $P108
    new $P109, 'String'
    set $P109, $S100
    set $P1730, $P109
.annotate 'line', 1178
    set $P109, $P1730
    unless_null $P109, vivify_654
    new $P109, "Undef"
  vivify_654:
    if $P109, if_1735
    set $P108, $P109
    goto if_1735_end
  if_1735:
    set $P110, $P1730
    unless_null $P110, vivify_655
    new $P110, "Undef"
  vivify_655:
    set $S100, $P110
    isne $I100, $S100, "fixed_8"
    new $P108, 'Integer'
    set $P108, $I100
  if_1735_end:
    unless $P108, if_1734_end
.annotate 'line', 1179
    set $P111, $P1729
    unless_null $P111, vivify_656
    new $P111, "Undef"
  vivify_656:
    set $P112, $P1730
    unless_null $P112, vivify_657
    new $P112, "Undef"
  vivify_657:
    $P111."encoding"($P112)
  if_1734_end:
.annotate 'line', 1153
    set $P108, $P1731
    unless_null $P108, vivify_658
    new $P108, "Undef"
  vivify_658:
.annotate 'line', 1183
    new $P115, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P115, loop1783_handler
    push_eh $P115
  loop1783_test:
    new $P108, "Float"
    assign $P108, 1
    unless $P108, loop1783_done
  loop1783_redo:
    .const 'Sub' $P1737 = "284_1337966785.387" 
    capture_lex $P1737
    $P1737()
  loop1783_next:
    goto loop1783_test
  loop1783_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P116, exception, 'type'
    eq $P116, .CONTROL_LOOP_NEXT, loop1783_next
    eq $P116, .CONTROL_LOOP_REDO, loop1783_redo
  loop1783_done:
    pop_eh 
.annotate 'line', 1153
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "blank_context"  :subid("283_1337966785.387") :outer("113_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1161
    $P1721 = root_new ['parrot';'Hash']
    set $P1720, $P1721
    .lex "%blank_pad", $P1720
.annotate 'line', 1159
    set $P1722, $P1720
    unless_null $P1722, vivify_645
    $P1722 = root_new ['parrot';'Hash']
  vivify_645:
.annotate 'line', 1163
    getinterp $P102
    set $P103, $P102["context"]
    unless_null $P103, vivify_646
    new $P103, "Undef"
  vivify_646:
    getattribute $P104, $P103, "lex_pad"
    set $P1723, $P1720
    unless_null $P1723, vivify_647
    $P1723 = root_new ['parrot';'Hash']
  vivify_647:
    copy $P104, $P1723
.annotate 'line', 1165
    getinterp $P102
    set $P103, $P102["context"]
    unless_null $P103, vivify_648
    new $P103, "Undef"
  vivify_648:
.annotate 'line', 1159
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1736"  :anon :subid("284_1337966785.387") :outer("113_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1183
    .const 'Sub' $P1751 = "285_1337966785.387" 
    capture_lex $P1751
.annotate 'line', 1186
    new $P109, "Undef"
    set $P1738, $P109
    .lex "$prompt", $P1738
.annotate 'line', 1187
    new $P110, "Undef"
    set $P1739, $P110
    .lex "$code", $P1739
.annotate 'line', 1196
    new $P111, "Undef"
    set $P1740, $P111
    .lex "$*AUTOPRINTPOS", $P1740
.annotate 'line', 1197
    new $P112, "Undef"
    set $P1741, $P112
    .lex "$*CTXSAVE", $P1741
.annotate 'line', 1198
    new $P113, "Undef"
    set $P1742, $P113
    .lex "$*MAIN_CTX", $P1742
.annotate 'line', 1184
    find_lex $P114, "$stdin"
    unless_null $P114, vivify_659
    new $P114, "Undef"
  vivify_659:
    if $P114, unless_1743_end
    die 0, .CONTROL_LOOP_LAST
  unless_1743_end:
.annotate 'line', 1186
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    $P116 = $P115."interactive_prompt"()
    set $P1744, $P116
    defined $I1746, $P1744
    if $I1746, default_1745
    new $P117, "String"
    assign $P117, "> "
    set $P1744, $P117
  default_1745:
    set $P1738, $P1744
.annotate 'line', 1187
    find_lex $P114, "$stdin"
    unless_null $P114, vivify_660
    new $P114, "Undef"
  vivify_660:
    set $P115, $P1738
    unless_null $P115, vivify_661
    new $P115, "Undef"
  vivify_661:
    set $S100, $P115
    $P116 = $P114."readline_interactive"($S100)
    set $P1739, $P116
.annotate 'line', 1189
    set $P114, $P1739
    unless_null $P114, vivify_662
    new $P114, "Undef"
  vivify_662:
    isnull $I100, $P114
    unless $I100, if_1747_end
    die 0, .CONTROL_LOOP_LAST
  if_1747_end:
.annotate 'line', 1190
    set $P114, $P1739
    unless_null $P114, vivify_663
    new $P114, "Undef"
  vivify_663:
    defined $I100, $P114
    if $I100, unless_1748_end
.annotate 'line', 1191
    print "\n"
.annotate 'line', 1192
    die 0, .CONTROL_LOOP_LAST
  unless_1748_end:
.annotate 'line', 1196
    getinterp $P114
    $P115 = $P114."stdout_handle"()
    $P116 = $P115."tell"()
    set $P1740, $P116
.annotate 'line', 1197
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    set $P1741, $P115
.annotate 'line', 1183
    set $P116, $P1742
    unless_null $P116, vivify_664
    get_hll_global $P114, "GLOBAL"
    get_who $P115, $P114
    set $P116, $P115["$MAIN_CTX"]
    unless_null $P116, vivify_665
    die "Contextual $*MAIN_CTX not found"
  vivify_665:
  vivify_664:
.annotate 'line', 1200
    set $P115, $P1739
    unless_null $P115, vivify_666
    new $P115, "Undef"
  vivify_666:
    if $P115, if_1749
    set $P114, $P115
    goto if_1749_end
  if_1749:
    .const 'Sub' $P1751 = "285_1337966785.387" 
    capture_lex $P1751
    $P118 = $P1751()
    set $P114, $P118
  if_1749_end:
.annotate 'line', 1183
    .return ($P114)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block1750"  :anon :subid("285_1337966785.387") :outer("284_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1200
    .const 'Sub' $P1775 = "288_1337966785.387" 
    capture_lex $P1775
    .const 'Sub' $P1754 = "286_1337966785.387" 
    capture_lex $P1754
.annotate 'line', 1202
    new $P116, "Undef"
    set $P1752, $P116
    .lex "$output", $P1752
.annotate 'line', 1201
    find_lex $P117, "$code"
    unless_null $P117, vivify_667
    new $P117, "Undef"
  vivify_667:
    concat $P118, $P117, "\n"
    store_lex "$code", $P118
.annotate 'line', 1200
    set $P117, $P1752
    unless_null $P117, vivify_668
    new $P117, "Undef"
  vivify_668:
.annotate 'line', 1203
    .const 'Sub' $P1754 = "286_1337966785.387" 
    capture_lex $P1754
    $P1754()
.annotate 'line', 1210
    find_dynamic_lex $P119, "$*MAIN_CTX"
    unless_null $P119, vivify_673
    get_hll_global $P117, "GLOBAL"
    get_who $P118, $P117
    set $P119, $P118["$MAIN_CTX"]
    unless_null $P119, vivify_674
    die "Contextual $*MAIN_CTX not found"
  vivify_674:
  vivify_673:
    defined $I100, $P119
    unless $I100, if_1773_end
.annotate 'line', 1211
    find_dynamic_lex $P123, "$*MAIN_CTX"
    unless_null $P123, vivify_675
    get_hll_global $P121, "GLOBAL"
    get_who $P122, $P121
    set $P123, $P122["$MAIN_CTX"]
    unless_null $P123, vivify_676
    die "Contextual $*MAIN_CTX not found"
  vivify_676:
  vivify_675:
    $P124 = $P123."lexpad_full"()
    defined $I101, $P124
    unless $I101, for_undef_677
    iter $P120, $P124
    new $P126, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P126, loop1778_handler
    push_eh $P126
  loop1778_test:
    unless $P120, loop1778_done
    shift $P125, $P120
  loop1778_redo:
    .const 'Sub' $P1775 = "288_1337966785.387" 
    capture_lex $P1775
    $P1775($P125)
  loop1778_next:
    goto loop1778_test
  loop1778_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P128, exception, 'type'
    eq $P128, .CONTROL_LOOP_NEXT, loop1778_next
    eq $P128, .CONTROL_LOOP_REDO, loop1778_redo
  loop1778_done:
    pop_eh 
  for_undef_677:
.annotate 'line', 1214
    find_lex $P120, "$interactive_ctx"
    unless_null $P120, vivify_681
    new $P120, "Undef"
  vivify_681:
    store_lex "$save_ctx", $P120
  if_1773_end:
.annotate 'line', 1216
    set $P117, $P1752
    unless_null $P117, vivify_682
    new $P117, "Undef"
  vivify_682:
    isnull $I100, $P117
    unless $I100, if_1779_end
    die 0, .CONTROL_LOOP_NEXT
  if_1779_end:
.annotate 'line', 1218
    find_lex $P118, "$target"
    unless_null $P118, vivify_683
    new $P118, "Undef"
  vivify_683:
    isfalse $I100, $P118
    if $I100, if_1780
.annotate 'line', 1220
    find_lex $P120, "$target"
    unless_null $P120, vivify_684
    new $P120, "Undef"
  vivify_684:
    set $S100, $P120
    iseq $I101, $S100, "pir"
    if $I101, if_1781
.annotate 'line', 1223
    find_lex $P121, "self"
    nqp_decontainerize $P123, $P121
    set $P124, $P1752
    unless_null $P124, vivify_685
    new $P124, "Undef"
  vivify_685:
    find_lex $P125, "$target"
    unless_null $P125, vivify_686
    new $P125, "Undef"
  vivify_686:
    find_lex $P1782, "%adverbs"
    unless_null $P1782, vivify_687
    $P1782 = root_new ['parrot';'Hash']
  vivify_687:
    $P126 = $P123."dumper"($P124, $P125, $P1782 :flat)
.annotate 'line', 1222
    set $P119, $P126
.annotate 'line', 1220
    goto if_1781_end
  if_1781:
.annotate 'line', 1221
    set $P121, $P1752
    unless_null $P121, vivify_688
    new $P121, "Undef"
  vivify_688:
    say $P121
  if_1781_end:
.annotate 'line', 1220
    set $P117, $P119
.annotate 'line', 1218
    goto if_1780_end
  if_1780:
.annotate 'line', 1219
    find_lex $P119, "self"
    nqp_decontainerize $P120, $P119
    set $P121, $P1752
    unless_null $P121, vivify_689
    new $P121, "Undef"
  vivify_689:
    $P122 = $P120."autoprint"($P121)
.annotate 'line', 1218
    set $P117, $P122
  if_1780_end:
.annotate 'line', 1200
    .return ($P117)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block1753"  :anon :subid("286_1337966785.387") :outer("285_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1203
    .const 'Sub' $P1762 = "287_1337966785.387" 
    capture_lex $P1762
    new $P1758, 'ExceptionHandler'
    set_label $P1758, control_1757
    $P1758."handle_types_except"(.CONTROL_ALL)
    push_eh $P1758
.annotate 'line', 1204
    find_lex $P117, "self"
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$code"
    unless_null $P119, vivify_669
    new $P119, "Undef"
  vivify_669:
    find_lex $P120, "$save_ctx"
    unless_null $P120, vivify_670
    new $P120, "Undef"
  vivify_670:
    find_lex $P1755, "%adverbs"
    unless_null $P1755, vivify_671
    $P1755 = root_new ['parrot';'Hash']
  vivify_671:
    $P121 = $P118."eval"($P119, $P1755 :flat, $P120 :named("outer_ctx"))
    store_lex "$output", $P121
.annotate 'line', 1203
    pop_eh 
    goto skip_handler_1756
  control_1757:
    peek_exception $P1759
.annotate 'line', 1205
    .local pmc exception 
    .get_results (exception) 
    .const 'Sub' $P1762 = "287_1337966785.387" 
    newclosure $P1770, $P1762
    $P1770(exception)
    new $P1771, 'Integer'
    set $P1771, 1
    set exception["handled"], $P1771
    set $I1772, exception["handled"]
    eq $I1772, 1, handled_1760
    rethrow exception
  handled_1760:
    finalize $P1759
    .return (exception)
  skip_handler_1756:
.annotate 'line', 1203
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1761"  :anon :subid("287_1337966785.387") :outer("286_1337966785.387")
    .param pmc param_1763
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1205
    .lex "$_", param_1763
    find_lex $P1764, "$_"
    set $P1765, $P1764
    .lex "$!", $P1765
.annotate 'line', 1206
    find_lex $P1766, "$!"
    unless_null $P1766, vivify_672
    new $P1766, "Undef"
  vivify_672:
    set $S1767, $P1766
    new $P1768, 'String'
    set $P1768, $S1767
    concat $P1769, $P1768, "\n"
    print $P1769
.annotate 'line', 1207
    die 0, .CONTROL_LOOP_NEXT
.annotate 'line', 1205
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1774"  :anon :subid("288_1337966785.387") :outer("285_1337966785.387")
    .param pmc param_1776
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1211
    .lex "$_", param_1776
.annotate 'line', 1212
    find_lex $P126, "$_"
    unless_null $P126, vivify_678
    new $P126, "Undef"
  vivify_678:
    $P127 = $P126."value"()
    find_lex $P128, "$_"
    unless_null $P128, vivify_679
    new $P128, "Undef"
  vivify_679:
    $P129 = $P128."key"()
    find_lex $P1777, "%interactive_pad"
    unless_null $P1777, vivify_680
    $P1777 = root_new ['parrot';'Hash']
    store_lex "%interactive_pad", $P1777
  vivify_680:
    set $P1777[$P129], $P127
.annotate 'line', 1211
    .return ($P127)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "eval" :anon :subid("114_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1785
    .param pmc param_1786
    .param pmc param_1787 :slurpy
    .param pmc param_1788 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1229
    .const 'Sub' $P1798 = "289_1337966785.387" 
    capture_lex $P1798
    .lex "self", param_1785
    .lex "$code", param_1786
    .lex "@args", param_1787
    .lex "%adverbs", param_1788
.annotate 'line', 1230
    new $P102, "Undef"
    set $P1789, $P102
    .lex "$output", $P1789
.annotate 'line', 1232
    new $P103, "Undef"
    set $P1790, $P103
    .lex "$old_runcore", $P1790
.annotate 'line', 1229
    set $P104, $P1789
    unless_null $P104, vivify_690
    new $P104, "Undef"
  vivify_690:
.annotate 'line', 1232
    interpinfo $S100, .INTERPINFO_CURRENT_RUNCORE
    new $P104, 'String'
    set $P104, $S100
    set $P1790, $P104
.annotate 'line', 1233
    set $P1792, param_1788
    unless_null $P1792, vivify_691
    $P1792 = root_new ['parrot';'Hash']
  vivify_691:
    set $P104, $P1792["profile-compile"]
    unless_null $P104, vivify_692
    new $P104, "Undef"
  vivify_692:
    unless $P104, if_1791_end
.annotate 'line', 1234
    set_runcore "subprof_hll"
  if_1791_end:
.annotate 'line', 1236
    set $P104, param_1785
    nqp_decontainerize $P105, $P104
    set $P106, param_1786
    unless_null $P106, vivify_693
    new $P106, "Undef"
  vivify_693:
    set $P1793, param_1788
    unless_null $P1793, vivify_694
    $P1793 = root_new ['parrot';'Hash']
  vivify_694:
    $P107 = $P105."compile"($P106, $P1793 :flat)
    set $P1789, $P107
.annotate 'line', 1238
    set $P105, $P1789
    unless_null $P105, vivify_695
    new $P105, "Undef"
  vivify_695:
    isa $I100, $P105, "String"
    new $P106, 'Integer'
    set $P106, $I100
    isfalse $I101, $P106
    if $I101, if_1795
    new $P104, 'Integer'
    set $P104, $I101
    goto if_1795_end
  if_1795:
.annotate 'line', 1239
    set $P1796, param_1788
    unless_null $P1796, vivify_696
    $P1796 = root_new ['parrot';'Hash']
  vivify_696:
    set $P107, $P1796["target"]
    unless_null $P107, vivify_697
    new $P107, "Undef"
  vivify_697:
    set $S100, $P107
    iseq $I102, $S100, ""
    new $P104, 'Integer'
    set $P104, $I102
  if_1795_end:
    unless $P104, if_1794_end
    .const 'Sub' $P1798 = "289_1337966785.387" 
    capture_lex $P1798
    $P1798()
  if_1794_end:
.annotate 'line', 1252
    set $P104, $P1790
    unless_null $P104, vivify_710
    new $P104, "Undef"
  vivify_710:
    set $S100, $P104
    set_runcore $S100
.annotate 'line', 1229
    set $P104, $P1789
    unless_null $P104, vivify_711
    new $P104, "Undef"
  vivify_711:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1797"  :anon :subid("289_1337966785.387") :outer("114_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1240
    new $P108, "Undef"
    set $P1799, $P108
    .lex "$outer_ctx", $P1799
    find_lex $P1800, "%adverbs"
    unless_null $P1800, vivify_698
    $P1800 = root_new ['parrot';'Hash']
  vivify_698:
    set $P109, $P1800["outer_ctx"]
    unless_null $P109, vivify_699
    new $P109, "Undef"
  vivify_699:
    set $P1799, $P109
.annotate 'line', 1241
    set $P109, $P1799
    unless_null $P109, vivify_700
    new $P109, "Undef"
  vivify_700:
    defined $I103, $P109
    unless $I103, if_1801_end
.annotate 'line', 1242
    find_lex $P1802, "$output"
    unless_null $P1802, vivify_701
    $P1802 = root_new ['parrot';'ResizablePMCArray']
  vivify_701:
    set $P110, $P1802[0]
    unless_null $P110, vivify_702
    new $P110, "Undef"
  vivify_702:
    set $P111, $P1799
    unless_null $P111, vivify_703
    new $P111, "Undef"
  vivify_703:
    $P110."set_outer_ctx"($P111)
  if_1801_end:
.annotate 'line', 1245
    find_lex $P1804, "%adverbs"
    unless_null $P1804, vivify_704
    $P1804 = root_new ['parrot';'Hash']
  vivify_704:
    set $P109, $P1804["profile"]
    unless_null $P109, vivify_705
    new $P109, "Undef"
  vivify_705:
    unless $P109, if_1803_end
.annotate 'line', 1246
    set_runcore "subprof_hll"
  if_1803_end:
.annotate 'line', 1248
    find_lex $P1805, "%adverbs"
    unless_null $P1805, vivify_706
    $P1805 = root_new ['parrot';'Hash']
  vivify_706:
    set $P109, $P1805["trace"]
    unless_null $P109, vivify_707
    new $P109, "Undef"
  vivify_707:
    set $I103, $P109
    trace $I103
.annotate 'line', 1249
    find_lex $P109, "$output"
    unless_null $P109, vivify_708
    new $P109, "Undef"
  vivify_708:
    find_lex $P1806, "@args"
    unless_null $P1806, vivify_709
    $P1806 = root_new ['parrot';'ResizablePMCArray']
  vivify_709:
    $P110 = $P109($P1806 :flat)
    store_lex "$output", $P110
.annotate 'line', 1250
    trace 0
.annotate 'line', 1239
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "ctxsave" :anon :subid("115_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1808
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1257
    .lex "self", param_1808
.annotate 'line', 1259

                $P0 = getinterp
                $P1809 = $P0['context';1]
            
    store_dynamic_lex "$*MAIN_CTX", $P1809
.annotate 'line', 1263
    new $P102, "Float"
    assign $P102, 0
    store_dynamic_lex "$*CTXSAVE", $P102
.annotate 'line', 1257
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "panic" :anon :subid("116_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1811
    .param pmc param_1812 :slurpy
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1266
    .lex "self", param_1811
    .lex "@args", param_1812
.annotate 'line', 1267
    set $P1813, param_1812
    unless_null $P1813, vivify_712
    $P1813 = root_new ['parrot';'ResizablePMCArray']
  vivify_712:
    join $S100, "", $P1813
    die $S100
.annotate 'line', 1266
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "stages" :anon :subid("117_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1815
    .param pmc param_1816 :optional
    .param int has_param_1816 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1270
    .lex "self", param_1815
    if has_param_1816, optparam_713
    $P1817 = root_new ['parrot';'ResizablePMCArray']
    set param_1816, $P1817
  optparam_713:
    .lex "@value", param_1816
.annotate 'line', 1271
    set $P1819, param_1816
    unless_null $P1819, vivify_714
    $P1819 = root_new ['parrot';'ResizablePMCArray']
  vivify_714:
    set $N100, $P1819
    unless $N100, if_1818_end
.annotate 'line', 1272
    set $P1820, param_1816
    unless_null $P1820, vivify_715
    $P1820 = root_new ['parrot';'ResizablePMCArray']
  vivify_715:
    set $P102, param_1815
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_bind_attr_obj $P103, $P104, "@!stages", 0, $P1820
  if_1818_end:
.annotate 'line', 1270
    set $P102, param_1815
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_get_attr_obj $P1821, $P103, $P104, "@!stages", 0
    unless_null $P1821, vivify_716
    $P1821 = root_new ['parrot';'ResizablePMCArray']
  vivify_716:
    .return ($P1821)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "parsegrammar" :anon :subid("118_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1823
    .param pmc param_1824 :slurpy
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1277
    .lex "self", param_1823
    .lex "@value", param_1824
.annotate 'line', 1278
    set $P1826, param_1824
    unless_null $P1826, vivify_717
    $P1826 = root_new ['parrot';'ResizablePMCArray']
  vivify_717:
    set $N100, $P1826
    unless $N100, if_1825_end
.annotate 'line', 1279
    set $P1827, param_1824
    unless_null $P1827, vivify_718
    $P1827 = root_new ['parrot';'ResizablePMCArray']
  vivify_718:
    set $P102, $P1827[0]
    unless_null $P102, vivify_719
    new $P102, "Undef"
  vivify_719:
    set $P103, param_1823
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_bind_attr_obj $P104, $P105, "$!parsegrammar", 1, $P102
  if_1825_end:
.annotate 'line', 1277
    set $P102, param_1823
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_get_attr_obj $P105, $P103, $P104, "$!parsegrammar", 1
    unless_null $P105, vivify_720
    new $P105, "Undef"
  vivify_720:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "parseactions" :anon :subid("119_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1829
    .param pmc param_1830 :slurpy
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1284
    .lex "self", param_1829
    .lex "@value", param_1830
.annotate 'line', 1285
    set $P1832, param_1830
    unless_null $P1832, vivify_721
    $P1832 = root_new ['parrot';'ResizablePMCArray']
  vivify_721:
    set $N100, $P1832
    unless $N100, if_1831_end
.annotate 'line', 1286
    set $P1833, param_1830
    unless_null $P1833, vivify_722
    $P1833 = root_new ['parrot';'ResizablePMCArray']
  vivify_722:
    set $P102, $P1833[0]
    unless_null $P102, vivify_723
    new $P102, "Undef"
  vivify_723:
    set $P103, param_1829
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_bind_attr_obj $P104, $P105, "$!parseactions", 2, $P102
  if_1831_end:
.annotate 'line', 1284
    set $P102, param_1829
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_get_attr_obj $P105, $P103, $P104, "$!parseactions", 2
    unless_null $P105, vivify_724
    new $P105, "Undef"
  vivify_724:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "interactive_banner" :anon :subid("120_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1835
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1291
    .lex "self", param_1835
    .return ("")
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "interactive_prompt" :anon :subid("121_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1837
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1293
    .lex "self", param_1837
    .return ("> ")
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "compiler_progname" :anon :subid("122_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1839
    .param pmc param_1840 :optional
    .param int has_param_1840 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1295
    .lex "self", param_1839
    if has_param_1840, optparam_725
    new $P102, "Undef"
    set param_1840, $P102
  optparam_725:
    .lex "$value", param_1840
.annotate 'line', 1296
    set $P103, param_1840
    unless_null $P103, vivify_726
    new $P103, "Undef"
  vivify_726:
    defined $I100, $P103
    unless $I100, if_1841_end
.annotate 'line', 1297
    set $P104, param_1840
    unless_null $P104, vivify_727
    new $P104, "Undef"
  vivify_727:
    set $P105, param_1839
    nqp_decontainerize $P106, $P105
    nqp_get_sc_object $P107, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_bind_attr_obj $P106, $P107, "$!compiler_progname", 5, $P104
  if_1841_end:
.annotate 'line', 1295
    set $P103, param_1839
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_get_attr_obj $P106, $P104, $P105, "$!compiler_progname", 5
    unless_null $P106, vivify_728
    new $P106, "Undef"
  vivify_728:
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "commandline_options" :anon :subid("123_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1843
    .param pmc param_1844 :optional
    .param int has_param_1844 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1302
    .lex "self", param_1843
    if has_param_1844, optparam_729
    $P1845 = root_new ['parrot';'ResizablePMCArray']
    set param_1844, $P1845
  optparam_729:
    .lex "@value", param_1844
.annotate 'line', 1303
    set $P1847, param_1844
    unless_null $P1847, vivify_730
    $P1847 = root_new ['parrot';'ResizablePMCArray']
  vivify_730:
    set $N100, $P1847
    unless $N100, if_1846_end
.annotate 'line', 1304
    set $P1848, param_1844
    unless_null $P1848, vivify_731
    $P1848 = root_new ['parrot';'ResizablePMCArray']
  vivify_731:
    set $P102, param_1843
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_bind_attr_obj $P103, $P104, "@!cmdoptions", 3, $P1848
  if_1846_end:
.annotate 'line', 1302
    set $P102, param_1843
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_get_attr_obj $P1849, $P103, $P104, "@!cmdoptions", 3
    unless_null $P1849, vivify_732
    $P1849 = root_new ['parrot';'ResizablePMCArray']
  vivify_732:
    .return ($P1849)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "command_line" :anon :subid("124_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1851
    .param pmc param_1852
    .param pmc param_1853 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1309
    .lex "self", param_1851
    .lex "@args", param_1852
    .lex "%adverbs", param_1853
.annotate 'line', 1322
    new $P102, "Undef"
    set $P1854, $P102
    .lex "$program-name", $P1854
.annotate 'line', 1323
    new $P103, "Undef"
    set $P1855, $P103
    .lex "$res", $P1855
.annotate 'line', 1324
    $P1857 = root_new ['parrot';'Hash']
    set $P1856, $P1857
    .lex "%opts", $P1856
.annotate 'line', 1325
    $P1859 = root_new ['parrot';'ResizablePMCArray']
    set $P1858, $P1859
    .lex "@a", $P1858
.annotate 'line', 1318
    set $P1861, param_1852
    unless_null $P1861, vivify_733
    $P1861 = root_new ['parrot';'ResizablePMCArray']
  vivify_733:
    set $P104, $P1861[2]
    unless_null $P104, vivify_734
    new $P104, "Undef"
  vivify_734:
    set $S100, $P104
    index $I100, $S100, "@INC"
    set $N100, $I100
    set $N101, 0
    isge $I101, $N100, $N101
    unless $I101, if_1860_end
.annotate 'line', 1319
    exit 0
  if_1860_end:
.annotate 'line', 1322
    set $P1862, param_1852
    unless_null $P1862, vivify_735
    $P1862 = root_new ['parrot';'ResizablePMCArray']
  vivify_735:
    set $P104, $P1862[0]
    unless_null $P104, vivify_736
    new $P104, "Undef"
  vivify_736:
    set $P1854, $P104
.annotate 'line', 1323
    set $P104, param_1851
    nqp_decontainerize $P105, $P104
    set $P1863, param_1852
    unless_null $P1863, vivify_737
    $P1863 = root_new ['parrot';'ResizablePMCArray']
  vivify_737:
    $P106 = $P105."process_args"($P1863)
    set $P1855, $P106
.annotate 'line', 1324
    set $P104, $P1855
    unless_null $P104, vivify_738
    new $P104, "Undef"
  vivify_738:
    $P105 = $P104."options"()
    set $P1856, $P105
.annotate 'line', 1325
    set $P104, $P1855
    unless_null $P104, vivify_739
    new $P104, "Undef"
  vivify_739:
    $P105 = $P104."arguments"()
    set $P1858, $P105
.annotate 'line', 1327
    set $P1864, param_1853
    unless_null $P1864, vivify_740
    $P1864 = root_new ['parrot';'Hash']
  vivify_740:
    set $P1865, $P1856
    unless_null $P1865, vivify_741
    $P1865 = root_new ['parrot';'Hash']
  vivify_741:
    $P1864."update"($P1865)
.annotate 'line', 1328
    set $P1867, param_1853
    unless_null $P1867, vivify_742
    $P1867 = root_new ['parrot';'Hash']
  vivify_742:
    set $P104, $P1867["help"]
    unless_null $P104, vivify_743
    new $P104, "Undef"
  vivify_743:
    unless $P104, if_1866_end
    set $P105, param_1851
    nqp_decontainerize $P106, $P105
    set $P107, $P1854
    unless_null $P107, vivify_744
    new $P107, "Undef"
  vivify_744:
    $P106."usage"($P107)
  if_1866_end:
.annotate 'line', 1330
    load_bytecode "dumper.pbc"
.annotate 'line', 1331
    load_bytecode "PGE/Dumper.pbc"
.annotate 'line', 1333
    set $P104, param_1851
    nqp_decontainerize $P105, $P104
    set $P1868, $P1858
    unless_null $P1868, vivify_745
    $P1868 = root_new ['parrot';'ResizablePMCArray']
  vivify_745:
    set $P1869, param_1853
    unless_null $P1869, vivify_746
    $P1869 = root_new ['parrot';'Hash']
  vivify_746:
    $P106 = $P105."command_eval"($P1868 :flat, $P1869 :flat)
.annotate 'line', 1309
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "command_eval" :anon :subid("125_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1871
    .param pmc param_1872 :slurpy
    .param pmc param_1873 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1337
    .const 'Sub' $P1958 = "294_1337966785.387" 
    capture_lex $P1958
    .const 'Sub' $P1887 = "290_1337966785.387" 
    capture_lex $P1887
    .lex "self", param_1871
    .lex "@a", param_1872
    .lex "%adverbs", param_1873
.annotate 'line', 1342
    new $P102, "Undef"
    set $P1874, $P102
    .lex "$result", $P1874
.annotate 'line', 1343
    new $P103, "Undef"
    set $P1875, $P103
    .lex "$error", $P1875
.annotate 'line', 1344
    new $P104, "Undef"
    set $P1876, $P104
    .lex "$has_error", $P1876
.annotate 'line', 1345
    new $P105, "Undef"
    set $P1877, $P105
    .lex "$target", $P1877
.annotate 'line', 1338
    set $P1879, param_1873
    unless_null $P1879, vivify_747
    $P1879 = root_new ['parrot';'Hash']
  vivify_747:
    set $P106, $P1879["version"]
    unless_null $P106, vivify_748
    new $P106, "Undef"
  vivify_748:
    unless $P106, if_1878_end
    set $P107, param_1871
    nqp_decontainerize $P108, $P107
    $P108."version"()
  if_1878_end:
.annotate 'line', 1339
    set $P1881, param_1873
    unless_null $P1881, vivify_749
    $P1881 = root_new ['parrot';'Hash']
  vivify_749:
    set $P106, $P1881["show-config"]
    unless_null $P106, vivify_750
    new $P106, "Undef"
  vivify_750:
    unless $P106, if_1880_end
    set $P107, param_1871
    nqp_decontainerize $P108, $P107
    $P108."show-config"()
  if_1880_end:
.annotate 'line', 1340
    set $P1883, param_1873
    unless_null $P1883, vivify_751
    $P1883 = root_new ['parrot';'Hash']
  vivify_751:
    set $P106, $P1883["nqpevent"]
    unless_null $P106, vivify_752
    new $P106, "Undef"
  vivify_752:
    unless $P106, if_1882_end
    set $P107, param_1871
    nqp_decontainerize $P108, $P107
    set $P1884, param_1873
    unless_null $P1884, vivify_753
    $P1884 = root_new ['parrot';'Hash']
  vivify_753:
    set $P109, $P1884["nqpevent"]
    unless_null $P109, vivify_754
    new $P109, "Undef"
  vivify_754:
    $P108."nqpevent"($P109)
  if_1882_end:
.annotate 'line', 1337
    set $P106, $P1874
    unless_null $P106, vivify_755
    new $P106, "Undef"
  vivify_755:
    set $P106, $P1875
    unless_null $P106, vivify_756
    new $P106, "Undef"
  vivify_756:
.annotate 'line', 1344
    new $P106, "Float"
    assign $P106, 0
    set $P1876, $P106
.annotate 'line', 1345
    set $P1885, param_1873
    unless_null $P1885, vivify_757
    $P1885 = root_new ['parrot';'Hash']
  vivify_757:
    set $P106, $P1885["target"]
    unless_null $P106, vivify_758
    new $P106, "Undef"
  vivify_758:
    set $P1877, $P106
.annotate 'line', 1346
    .const 'Sub' $P1887 = "290_1337966785.387" 
    capture_lex $P1887
    $P1887()
.annotate 'line', 1380
    set $P106, $P1876
    unless_null $P106, vivify_796
    new $P106, "Undef"
  vivify_796:
    unless $P106, if_1953_end
.annotate 'line', 1381
    set $P1956, param_1873
    unless_null $P1956, vivify_797
    $P1956 = root_new ['parrot';'Hash']
  vivify_797:
    set $P108, $P1956["ll-exception"]
    unless_null $P108, vivify_798
    new $P108, "Undef"
  vivify_798:
    unless $P108, unless_1955
    set $P107, $P108
    goto unless_1955_end
  unless_1955:
    set $P109, param_1871
    nqp_decontainerize $P110, $P109
    can $I100, $P110, "handle-exception"
    new $P111, 'Integer'
    set $P111, $I100
    isfalse $I101, $P111
    new $P107, 'Integer'
    set $P107, $I101
  unless_1955_end:
    if $P107, if_1954
.annotate 'line', 1388
    set $P113, param_1871
    nqp_decontainerize $P114, $P113
    set $P115, $P1875
    unless_null $P115, vivify_799
    new $P115, "Undef"
  vivify_799:
    $P114."handle-exception"($P115)
.annotate 'line', 1387
    goto if_1954_end
  if_1954:
.annotate 'line', 1381
    .const 'Sub' $P1958 = "294_1337966785.387" 
    capture_lex $P1958
    $P1958()
  if_1954_end:
  if_1953_end:
.annotate 'line', 1337
    set $P106, $P1874
    unless_null $P106, vivify_805
    new $P106, "Undef"
  vivify_805:
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block1886"  :anon :subid("290_1337966785.387") :outer("125_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1346
    .const 'Sub' $P1944 = "293_1337966785.387" 
    capture_lex $P1944
    .const 'Sub' $P1922 = "292_1337966785.387" 
    capture_lex $P1922
    .const 'Sub' $P1909 = "291_1337966785.387" 
    capture_lex $P1909
    new $P1918, 'ExceptionHandler', [.CONTROL_ALL]
    set_label $P1918, control_1917
    push_eh $P1918
    new $P1940, 'ExceptionHandler'
    set_label $P1940, control_1939
    $P1940."handle_types_except"(.CONTROL_ALL)
    push_eh $P1940
.annotate 'line', 1347
    find_lex $P1889, "%adverbs"
    unless_null $P1889, vivify_759
    $P1889 = root_new ['parrot';'Hash']
  vivify_759:
    set $P106, $P1889["e"]
    unless_null $P106, vivify_760
    new $P106, "Undef"
  vivify_760:
    defined $I100, $P106
    if $I100, if_1888
.annotate 'line', 1353
    find_lex $P1897, "@a"
    unless_null $P1897, vivify_761
    $P1897 = root_new ['parrot';'ResizablePMCArray']
  vivify_761:
    isfalse $I101, $P1897
    if $I101, if_1896
.annotate 'line', 1354
    find_lex $P1900, "%adverbs"
    unless_null $P1900, vivify_762
    $P1900 = root_new ['parrot';'Hash']
  vivify_762:
    set $P107, $P1900["combine"]
    unless_null $P107, vivify_763
    new $P107, "Undef"
  vivify_763:
    if $P107, if_1899
.annotate 'line', 1355
    find_lex $P108, "self"
    nqp_decontainerize $P109, $P108
    find_lex $P1903, "@a"
    unless_null $P1903, vivify_764
    $P1903 = root_new ['parrot';'ResizablePMCArray']
  vivify_764:
    set $P110, $P1903[0]
    unless_null $P110, vivify_765
    new $P110, "Undef"
  vivify_765:
    find_lex $P1904, "@a"
    unless_null $P1904, vivify_766
    $P1904 = root_new ['parrot';'ResizablePMCArray']
  vivify_766:
    find_lex $P1905, "%adverbs"
    unless_null $P1905, vivify_767
    $P1905 = root_new ['parrot';'Hash']
  vivify_767:
    $P111 = $P109."evalfiles"($P110, $P1904 :flat, $P1905 :flat)
    store_lex "$result", $P111
    goto if_1899_end
  if_1899:
.annotate 'line', 1354
    find_lex $P108, "self"
    nqp_decontainerize $P109, $P108
    find_lex $P1901, "@a"
    unless_null $P1901, vivify_768
    $P1901 = root_new ['parrot';'ResizablePMCArray']
  vivify_768:
    find_lex $P1902, "%adverbs"
    unless_null $P1902, vivify_769
    $P1902 = root_new ['parrot';'Hash']
  vivify_769:
    $P110 = $P109."evalfiles"($P1901, $P1902 :flat)
    store_lex "$result", $P110
  if_1899_end:
    goto if_1896_end
  if_1896:
.annotate 'line', 1353
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    find_lex $P1898, "%adverbs"
    unless_null $P1898, vivify_770
    $P1898 = root_new ['parrot';'Hash']
  vivify_770:
    $P109 = $P108."interactive"($P1898 :flat)
    store_lex "$result", $P109
  if_1896_end:
    goto if_1888_end
  if_1888:
.annotate 'line', 1348
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    find_lex $P1890, "%adverbs"
    unless_null $P1890, vivify_771
    $P1890 = root_new ['parrot';'Hash']
  vivify_771:
    set $P109, $P1890["e"]
    unless_null $P109, vivify_772
    new $P109, "Undef"
  vivify_772:
    find_lex $P1891, "@a"
    unless_null $P1891, vivify_773
    $P1891 = root_new ['parrot';'ResizablePMCArray']
  vivify_773:
    find_lex $P1892, "%adverbs"
    unless_null $P1892, vivify_774
    $P1892 = root_new ['parrot';'Hash']
  vivify_774:
    $P110 = $P108."eval"($P109, "-e", $P1891 :flat, $P1892 :flat)
    store_lex "$result", $P110
.annotate 'line', 1349
    find_lex $P108, "$target"
    unless_null $P108, vivify_775
    new $P108, "Undef"
  vivify_775:
    set $S100, $P108
    iseq $I101, $S100, ""
    unless $I101, unless_1894
    new $P107, 'Integer'
    set $P107, $I101
    goto unless_1894_end
  unless_1894:
    find_lex $P109, "$target"
    unless_null $P109, vivify_776
    new $P109, "Undef"
  vivify_776:
    set $S101, $P109
    iseq $I102, $S101, "pir"
    new $P107, 'Integer'
    set $P107, $I102
  unless_1894_end:
    if $P107, unless_1893_end
.annotate 'line', 1350
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$result"
    unless_null $P112, vivify_777
    new $P112, "Undef"
  vivify_777:
    find_lex $P113, "$target"
    unless_null $P113, vivify_778
    new $P113, "Undef"
  vivify_778:
    find_lex $P1895, "%adverbs"
    unless_null $P1895, vivify_779
    $P1895 = root_new ['parrot';'Hash']
  vivify_779:
    $P111."dumper"($P112, $P113, $P1895 :flat)
  unless_1893_end:
  if_1888_end:
.annotate 'line', 1357
    find_lex $P107, "$result"
    unless_null $P107, vivify_780
    new $P107, "Undef"
  vivify_780:
    isnull $I100, $P107
    new $P108, 'Integer'
    set $P108, $I100
    isfalse $I101, $P108
    if $I101, if_1907
    new $P106, 'Integer'
    set $P106, $I101
    goto if_1907_end
  if_1907:
    find_lex $P109, "$target"
    unless_null $P109, vivify_781
    new $P109, "Undef"
  vivify_781:
    set $S100, $P109
    iseq $I102, $S100, "pir"
    new $P106, 'Integer'
    set $P106, $I102
  if_1907_end:
    unless $P106, if_1906_end
    .const 'Sub' $P1909 = "291_1337966785.387" 
    capture_lex $P1909
    $P1909()
  if_1906_end:
.annotate 'line', 1346
    pop_eh 
    pop_eh 
    goto skip_handler_1916
  control_1917:
    peek_exception $P1919
.annotate 'line', 1370
    .local pmc exception 
    .get_results (exception) 
    .const 'Sub' $P1922 = "292_1337966785.387" 
    newclosure $P1936, $P1922
    $P1936(exception)
    new $P1937, 'Integer'
    set $P1937, 1
    set exception["handled"], $P1937
    set $I1938, exception["handled"]
    eq $I1938, 1, handled_1920
    rethrow exception
  handled_1920:
    finalize $P1919
    .return (exception)
  control_1939:
    peek_exception $P1941
.annotate 'line', 1366
    .local pmc exception 
    .get_results (exception) 
    .const 'Sub' $P1944 = "293_1337966785.387" 
    newclosure $P1950, $P1944
    $P1950(exception)
    new $P1951, 'Integer'
    set $P1951, 1
    set exception["handled"], $P1951
    set $I1952, exception["handled"]
    eq $I1952, 1, handled_1942
    rethrow exception
  handled_1942:
    finalize $P1941
    .return (exception)
  skip_handler_1916:
.annotate 'line', 1346
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1908"  :anon :subid("291_1337966785.387") :outer("290_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1358
    new $P110, "Undef"
    set $P1910, $P110
    .lex "$output", $P1910
.annotate 'line', 1359
    new $P111, "Undef"
    set $P1911, $P111
    .lex "$fh", $P1911
.annotate 'line', 1358
    find_lex $P1912, "%adverbs"
    unless_null $P1912, vivify_782
    $P1912 = root_new ['parrot';'Hash']
  vivify_782:
    set $P112, $P1912["output"]
    unless_null $P112, vivify_783
    new $P112, "Undef"
  vivify_783:
    set $P1910, $P112
.annotate 'line', 1359
    set $P114, $P1910
    unless_null $P114, vivify_784
    new $P114, "Undef"
  vivify_784:
    set $S101, $P114
    iseq $I103, $S101, ""
    unless $I103, unless_1914
    new $P113, 'Integer'
    set $P113, $I103
    goto unless_1914_end
  unless_1914:
    set $P115, $P1910
    unless_null $P115, vivify_785
    new $P115, "Undef"
  vivify_785:
    set $S102, $P115
    iseq $I104, $S102, "-"
    new $P113, 'Integer'
    set $P113, $I104
  unless_1914_end:
    if $P113, if_1913
.annotate 'line', 1361
    new $P118, "FileHandle"
    set $P119, $P1910
    unless_null $P119, vivify_786
    new $P119, "Undef"
  vivify_786:
    $P120 = $P118."open"($P119, "w")
    set $P112, $P120
.annotate 'line', 1359
    goto if_1913_end
  if_1913:
.annotate 'line', 1360
    getinterp $P116
    $P117 = $P116."stdout_handle"()
    set $P112, $P117
  if_1913_end:
    set $P1911, $P112
.annotate 'line', 1362
    set $P112, $P1911
    unless_null $P112, vivify_787
    new $P112, "Undef"
  vivify_787:
    if $P112, unless_1915_end
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    new $P115, 'String'
    set $P115, "Cannot write to "
    set $P116, $P1910
    unless_null $P116, vivify_788
    new $P116, "Undef"
  vivify_788:
    concat $P117, $P115, $P116
    $P114."panic"($P117)
  unless_1915_end:
.annotate 'line', 1363
    set $P112, $P1911
    unless_null $P112, vivify_789
    new $P112, "Undef"
  vivify_789:
    find_lex $P113, "$result"
    unless_null $P113, vivify_790
    new $P113, "Undef"
  vivify_790:
    print $P112, $P113
.annotate 'line', 1364
    set $P112, $P1911
    unless_null $P112, vivify_791
    new $P112, "Undef"
  vivify_791:
    $P113 = $P112."close"()
.annotate 'line', 1357
    .return ($P113)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1921"  :anon :subid("292_1337966785.387") :outer("290_1337966785.387")
    .param pmc param_1923
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1370
    .lex "$_", param_1923
    find_lex $P1924, "$_"
    set $P1925, $P1924
    .lex "$!", $P1925
.annotate 'line', 1371
    find_lex $P1927, "self"
    nqp_decontainerize $P1928, $P1927
    can $I1929, $P1928, "handle-control"
    if $I1929, if_1926
.annotate 'line', 1374
    find_lex $P1933, "$_"
    unless_null $P1933, vivify_792
    new $P1933, "Undef"
  vivify_792:
    rethrow $P1933
.annotate 'line', 1373
    goto if_1926_end
  if_1926:
.annotate 'line', 1372
    find_lex $P1930, "self"
    nqp_decontainerize $P1931, $P1930
    find_lex $P1932, "$_"
    unless_null $P1932, vivify_793
    new $P1932, "Undef"
  vivify_793:
    $P1931."handle-control"($P1932)
  if_1926_end:
.annotate 'line', 1376
    new $P1934, "Float"
    assign $P1934, 1
    store_lex "$has_error", $P1934
.annotate 'line', 1377
    find_lex $P1935, "$_"
    unless_null $P1935, vivify_794
    new $P1935, "Undef"
  vivify_794:
    store_lex "$error", $P1935
.annotate 'line', 1370
    .return ($P1935)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1943"  :anon :subid("293_1337966785.387") :outer("290_1337966785.387")
    .param pmc param_1945
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1366
    .lex "$_", param_1945
    find_lex $P1946, "$_"
    set $P1947, $P1946
    .lex "$!", $P1947
.annotate 'line', 1367
    new $P1948, "Float"
    assign $P1948, 1
    store_lex "$has_error", $P1948
.annotate 'line', 1368
    find_lex $P1949, "$_"
    unless_null $P1949, vivify_795
    new $P1949, "Undef"
  vivify_795:
    store_lex "$error", $P1949
.annotate 'line', 1366
    .return ($P1949)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1957"  :anon :subid("294_1337966785.387") :outer("125_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1382
    new $P112, "Undef"
    set $P1959, $P112
    .lex "$err", $P1959
    getstderr $P113
    set $P1959, $P113
.annotate 'line', 1383
    set $P113, $P1959
    unless_null $P113, vivify_800
    new $P113, "Undef"
  vivify_800:
    find_lex $P114, "$error"
    unless_null $P114, vivify_801
    new $P114, "Undef"
  vivify_801:
    $P113."print"($P114)
.annotate 'line', 1384
    set $P113, $P1959
    unless_null $P113, vivify_802
    new $P113, "Undef"
  vivify_802:
    $P113."print"("\n")
.annotate 'line', 1385
    set $P113, $P1959
    unless_null $P113, vivify_803
    new $P113, "Undef"
  vivify_803:
    find_lex $P114, "$error"
    unless_null $P114, vivify_804
    new $P114, "Undef"
  vivify_804:
    $P115 = $P114."backtrace_strings"()
    join $S100, "\n", $P115
    $P113."print"($S100)
.annotate 'line', 1386
    exit 1
.annotate 'line', 1381
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "process_args" :anon :subid("126_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1961
    .param pmc param_1962
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1394
    .const 'Sub' $P1968 = "295_1337966785.387" 
    capture_lex $P1968
    .lex "self", param_1961
    .lex "@args", param_1962
.annotate 'line', 1398
    new $P102, "Undef"
    set $P1963, $P102
    .lex "$p", $P1963
.annotate 'line', 1401
    new $P103, "Undef"
    set $P1964, $P103
    .lex "$res", $P1964
.annotate 'line', 1396
    set $P104, param_1961
    nqp_decontainerize $P105, $P104
    set $P1965, param_1962
    unless_null $P1965, vivify_806
    $P1965 = root_new ['parrot';'ResizablePMCArray']
  vivify_806:
    $P106 = $P1965."shift"()
    $P105."compiler_progname"($P106)
.annotate 'line', 1398
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "HLL"
    nqp_get_package_through_who $P106, $P105, "CommandLine"
    get_who $P107, $P106
    set $P108, $P107["Parser"]
    set $P109, param_1961
    nqp_decontainerize $P110, $P109
    nqp_get_sc_object $P111, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_get_attr_obj $P1966, $P110, $P111, "@!cmdoptions", 3
    unless_null $P1966, vivify_807
    $P1966 = root_new ['parrot';'ResizablePMCArray']
  vivify_807:
    $P112 = $P108."new"($P1966)
    set $P1963, $P112
.annotate 'line', 1399
    set $P104, $P1963
    unless_null $P104, vivify_808
    new $P104, "Undef"
  vivify_808:
    $P104."add-stopper"("-e")
.annotate 'line', 1400
    set $P104, $P1963
    unless_null $P104, vivify_809
    new $P104, "Undef"
  vivify_809:
    $P104."stop-after-first-arg"()
.annotate 'line', 1394
    set $P104, $P1964
    unless_null $P104, vivify_810
    new $P104, "Undef"
  vivify_810:
.annotate 'line', 1402
    .const 'Sub' $P1968 = "295_1337966785.387" 
    capture_lex $P1968
    $P1968()
.annotate 'line', 1394
    set $P104, $P1964
    unless_null $P104, vivify_814
    new $P104, "Undef"
  vivify_814:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block1967"  :anon :subid("295_1337966785.387") :outer("126_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1402
    .const 'Sub' $P1976 = "296_1337966785.387" 
    capture_lex $P1976
    new $P1972, 'ExceptionHandler'
    set_label $P1972, control_1971
    $P1972."handle_types_except"(.CONTROL_ALL)
    push_eh $P1972
.annotate 'line', 1403
    find_lex $P104, "$p"
    unless_null $P104, vivify_811
    new $P104, "Undef"
  vivify_811:
    find_lex $P1969, "@args"
    unless_null $P1969, vivify_812
    $P1969 = root_new ['parrot';'ResizablePMCArray']
  vivify_812:
    $P105 = $P104."parse"($P1969)
    store_lex "$res", $P105
.annotate 'line', 1402
    pop_eh 
    goto skip_handler_1970
  control_1971:
    peek_exception $P1973
.annotate 'line', 1404
    .local pmc exception 
    .get_results (exception) 
    .const 'Sub' $P1976 = "296_1337966785.387" 
    newclosure $P1983, $P1976
    $P1983(exception)
    new $P1984, 'Integer'
    set $P1984, 1
    set exception["handled"], $P1984
    set $I1985, exception["handled"]
    eq $I1985, 1, handled_1974
    rethrow exception
  handled_1974:
    finalize $P1973
    .return (exception)
  skip_handler_1970:
.annotate 'line', 1402
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1975"  :anon :subid("296_1337966785.387") :outer("295_1337966785.387")
    .param pmc param_1977
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1404
    .lex "$_", param_1977
    find_lex $P1978, "$_"
    set $P1979, $P1978
    .lex "$!", $P1979
.annotate 'line', 1405
    find_lex $P1980, "$_"
    unless_null $P1980, vivify_813
    new $P1980, "Undef"
  vivify_813:
    say $P1980
.annotate 'line', 1406
    find_lex $P1981, "self"
    nqp_decontainerize $P1982, $P1981
    $P1982."usage"()
.annotate 'line', 1407
    exit 1
.annotate 'line', 1404
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "evalfiles" :anon :subid("127_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_1989
    .param pmc param_1990
    .param pmc param_1991 :slurpy
    .param pmc param_1992 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1413
    .const 'Sub' $P2008 = "297_1337966785.387" 
    capture_lex $P2008
    new $P1988, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1988, control_1987
    push_eh $P1988
    .lex "self", param_1989
    .lex "$files", param_1990
    .lex "@args", param_1991
    .lex "%adverbs", param_1992
.annotate 'line', 1414
    new $P102, "Undef"
    set $P1993, $P102
    .lex "$target", $P1993
.annotate 'line', 1415
    new $P103, "Undef"
    set $P1994, $P103
    .lex "$encoding", $P1994
.annotate 'line', 1416
    $P1996 = root_new ['parrot';'ResizablePMCArray']
    set $P1995, $P1996
    .lex "@files", $P1995
.annotate 'line', 1417
    $P1998 = root_new ['parrot';'ResizablePMCArray']
    set $P1997, $P1998
    .lex "@codes", $P1997
.annotate 'line', 1434
    new $P104, "Undef"
    set $P1999, $P104
    .lex "$code", $P1999
.annotate 'line', 1435
    new $P105, "Undef"
    set $P2000, $P105
    .lex "$?FILES", $P2000
.annotate 'line', 1436
    new $P106, "Undef"
    set $P2001, $P106
    .lex "$r", $P2001
.annotate 'line', 1414
    set $P2002, param_1992
    unless_null $P2002, vivify_815
    $P2002 = root_new ['parrot';'Hash']
  vivify_815:
    set $P107, $P2002["target"]
    unless_null $P107, vivify_816
    new $P107, "Undef"
  vivify_816:
    set $S100, $P107
    downcase $S101, $S100
    new $P108, 'String'
    set $P108, $S101
    set $P1993, $P108
.annotate 'line', 1415
    set $P2003, param_1992
    unless_null $P2003, vivify_817
    $P2003 = root_new ['parrot';'Hash']
  vivify_817:
    set $P107, $P2003["encoding"]
    unless_null $P107, vivify_818
    new $P107, "Undef"
  vivify_818:
    set $P1994, $P107
.annotate 'line', 1416
    set $P108, param_1990
    unless_null $P108, vivify_819
    new $P108, "Undef"
  vivify_819:
    does $I100, $P108, "array"
    if $I100, if_2004
    set $P110, param_1990
    unless_null $P110, vivify_820
    new $P110, "Undef"
  vivify_820:
    new $P111, "ResizablePMCArray"
    push $P111, $P110
    set $P107, $P111
    goto if_2004_end
  if_2004:
    set $P109, param_1990
    unless_null $P109, vivify_821
    new $P109, "Undef"
  vivify_821:
    set $P107, $P109
  if_2004_end:
    set $P1995, $P107
.annotate 'line', 1413
    set $P2005, $P1997
    unless_null $P2005, vivify_822
    $P2005 = root_new ['parrot';'ResizablePMCArray']
  vivify_822:
.annotate 'line', 1418
    set $P2006, $P1995
    unless_null $P2006, vivify_823
    $P2006 = root_new ['parrot';'ResizablePMCArray']
  vivify_823:
    defined $I100, $P2006
    unless $I100, for_undef_824
    iter $P107, $P2006
    new $P112, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P112, loop2032_handler
    push_eh $P112
  loop2032_test:
    unless $P107, loop2032_done
    shift $P108, $P107
  loop2032_redo:
    .const 'Sub' $P2008 = "297_1337966785.387" 
    capture_lex $P2008
    $P2008($P108)
  loop2032_next:
    goto loop2032_test
  loop2032_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P113, exception, 'type'
    eq $P113, .CONTROL_LOOP_NEXT, loop2032_next
    eq $P113, .CONTROL_LOOP_REDO, loop2032_redo
  loop2032_done:
    pop_eh 
  for_undef_824:
.annotate 'line', 1434
    set $P2033, $P1997
    unless_null $P2033, vivify_834
    $P2033 = root_new ['parrot';'ResizablePMCArray']
  vivify_834:
    join $S100, "", $P2033
    new $P107, 'String'
    set $P107, $S100
    set $P1999, $P107
.annotate 'line', 1435
    set $P2034, $P1995
    unless_null $P2034, vivify_835
    $P2034 = root_new ['parrot';'ResizablePMCArray']
  vivify_835:
    join $S100, " ", $P2034
    new $P107, 'String'
    set $P107, $S100
    set $P2000, $P107
.annotate 'line', 1436
    set $P107, param_1989
    nqp_decontainerize $P108, $P107
    set $P109, $P1999
    unless_null $P109, vivify_836
    new $P109, "Undef"
  vivify_836:
    set $P2035, param_1991
    unless_null $P2035, vivify_837
    $P2035 = root_new ['parrot';'ResizablePMCArray']
  vivify_837:
    set $P2036, param_1992
    unless_null $P2036, vivify_838
    $P2036 = root_new ['parrot';'Hash']
  vivify_838:
    $P110 = $P108."eval"($P109, $P2035 :flat, $P2036 :flat)
    set $P2001, $P110
.annotate 'line', 1437
    set $P109, $P1993
    unless_null $P109, vivify_839
    new $P109, "Undef"
  vivify_839:
    set $S100, $P109
    iseq $I100, $S100, ""
    unless $I100, unless_2038
    new $P108, 'Integer'
    set $P108, $I100
    goto unless_2038_end
  unless_2038:
    set $P110, $P1993
    unless_null $P110, vivify_840
    new $P110, "Undef"
  vivify_840:
    set $S101, $P110
    iseq $I101, $S101, "pir"
    new $P108, 'Integer'
    set $P108, $I101
  unless_2038_end:
    if $P108, if_2037
.annotate 'line', 1440
    new $P111, "Exception"
    set $P111['type'], .CONTROL_RETURN
    set $P112, param_1989
    nqp_decontainerize $P113, $P112
    set $P114, $P2001
    unless_null $P114, vivify_841
    new $P114, "Undef"
  vivify_841:
    set $P115, $P1993
    unless_null $P115, vivify_842
    new $P115, "Undef"
  vivify_842:
    set $P2039, param_1992
    unless_null $P2039, vivify_843
    $P2039 = root_new ['parrot';'Hash']
  vivify_843:
    $P116 = $P113."dumper"($P114, $P115, $P2039 :flat)
    setattribute $P111, 'payload', $P116
    throw $P111
.annotate 'line', 1439
    goto if_2037_end
  if_2037:
.annotate 'line', 1438
    new $P111, "Exception"
    set $P111['type'], .CONTROL_RETURN
    set $P112, $P2001
    unless_null $P112, vivify_844
    new $P112, "Undef"
  vivify_844:
    setattribute $P111, 'payload', $P112
    throw $P111
  if_2037_end:
.annotate 'line', 1413
    .return ($P107)
  control_1987:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P108, exception, "payload"
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2007"  :anon :subid("297_1337966785.387") :outer("127_1337966785.387")
    .param pmc param_2011
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1418
    .const 'Sub' $P2013 = "298_1337966785.387" 
    capture_lex $P2013
.annotate 'line', 1419
    new $P109, "Undef"
    set $P2009, $P109
    .lex "$in-handle", $P2009
.annotate 'line', 1420
    new $P110, "Undef"
    set $P2010, $P110
    .lex "$err", $P2010
    .lex "$_", param_2011
.annotate 'line', 1419
    new $P111, "FileHandle"
    set $P2009, $P111
.annotate 'line', 1420
    new $P111, "Float"
    assign $P111, 0
    set $P2010, $P111
.annotate 'line', 1421
    .const 'Sub' $P2013 = "298_1337966785.387" 
    capture_lex $P2013
    $P2013()
.annotate 'line', 1432
    set $P112, $P2010
    unless_null $P112, vivify_832
    new $P112, "Undef"
  vivify_832:
    if $P112, if_2031
    set $P111, $P112
    goto if_2031_end
  if_2031:
    set $P113, $P2010
    unless_null $P113, vivify_833
    new $P113, "Undef"
  vivify_833:
    die $P113
  if_2031_end:
.annotate 'line', 1418
    .return ($P111)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block2012"  :anon :subid("298_1337966785.387") :outer("297_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1421
    .const 'Sub' $P2021 = "299_1337966785.387" 
    capture_lex $P2021
    new $P2017, 'ExceptionHandler'
    set_label $P2017, control_2016
    $P2017."handle_types_except"(.CONTROL_ALL)
    push_eh $P2017
.annotate 'line', 1425
    find_lex $P111, "$in-handle"
    unless_null $P111, vivify_825
    new $P111, "Undef"
  vivify_825:
    find_lex $P112, "$encoding"
    unless_null $P112, vivify_826
    new $P112, "Undef"
  vivify_826:
    $P111."encoding"($P112)
.annotate 'line', 1426
    find_lex $P2014, "@codes"
    unless_null $P2014, vivify_827
    $P2014 = root_new ['parrot';'ResizablePMCArray']
  vivify_827:
    find_lex $P111, "$in-handle"
    unless_null $P111, vivify_828
    new $P111, "Undef"
  vivify_828:
    find_lex $P112, "$_"
    unless_null $P112, vivify_829
    new $P112, "Undef"
  vivify_829:
    $P113 = $P111."readall"($P112)
    push $P2014, $P113
.annotate 'line', 1427
    find_lex $P111, "$in-handle"
    unless_null $P111, vivify_830
    new $P111, "Undef"
  vivify_830:
    $P111."close"()
.annotate 'line', 1421
    pop_eh 
    goto skip_handler_2015
  control_2016:
    peek_exception $P2018
.annotate 'line', 1428
    .local pmc exception 
    .get_results (exception) 
    .const 'Sub' $P2021 = "299_1337966785.387" 
    newclosure $P2028, $P2021
    $P2028(exception)
    new $P2029, 'Integer'
    set $P2029, 1
    set exception["handled"], $P2029
    set $I2030, exception["handled"]
    eq $I2030, 1, handled_2019
    rethrow exception
  handled_2019:
    finalize $P2018
    .return (exception)
  skip_handler_2015:
.annotate 'line', 1421
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2020"  :anon :subid("299_1337966785.387") :outer("298_1337966785.387")
    .param pmc param_2022
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1428
    .lex "$_", param_2022
    find_lex $P2023, "$_"
    set $P2024, $P2023
    .lex "$!", $P2024
.annotate 'line', 1429
    new $P2025, 'String'
    set $P2025, "Error while reading from file: "
    find_lex $P2026, "$_"
    unless_null $P2026, vivify_831
    new $P2026, "Undef"
  vivify_831:
    concat $P2027, $P2025, $P2026
    store_lex "$err", $P2027
.annotate 'line', 1428
    .return ($P2027)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "compile" :anon :subid("128_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_2043
    .param pmc param_2044
    .param pmc param_2045 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1444
    .const 'Sub' $P2054 = "300_1337966785.387" 
    capture_lex $P2054
    new $P2042, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2042, control_2041
    push_eh $P2042
    .lex "self", param_2043
    .lex "$source", param_2044
    .lex "%adverbs", param_2045
.annotate 'line', 1445
    $P2047 = root_new ['parrot';'Hash']
    set $P2046, $P2047
    .lex "%*COMPILING", $P2046
.annotate 'line', 1447
    new $P102, "Undef"
    set $P2048, $P102
    .lex "$target", $P2048
.annotate 'line', 1448
    new $P103, "Undef"
    set $P2049, $P103
    .lex "$result", $P2049
.annotate 'line', 1449
    new $P104, "Undef"
    set $P2050, $P104
    .lex "$stderr", $P2050
.annotate 'line', 1445
    set $P2051, param_2045
    unless_null $P2051, vivify_845
    $P2051 = root_new ['parrot';'Hash']
  vivify_845:
    set $P107, $P2046
    unless_null $P107, vivify_846
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["%COMPILING"]
    unless_null $P107, vivify_847
    die "Contextual %*COMPILING not found"
  vivify_847:
    set $P2046, $P107
  vivify_846:
    set $P107["%?OPTIONS"], $P2051
.annotate 'line', 1447
    set $P2052, param_2045
    unless_null $P2052, vivify_848
    $P2052 = root_new ['parrot';'Hash']
  vivify_848:
    set $P105, $P2052["target"]
    unless_null $P105, vivify_849
    new $P105, "Undef"
  vivify_849:
    set $S100, $P105
    downcase $S101, $S100
    new $P106, 'String'
    set $P106, $S101
    set $P2048, $P106
.annotate 'line', 1448
    set $P105, param_2044
    unless_null $P105, vivify_850
    new $P105, "Undef"
  vivify_850:
    set $P2049, $P105
.annotate 'line', 1449
    getinterp $P105
    $P106 = $P105."stderr_handle"()
    set $P2050, $P106
.annotate 'line', 1450
    set $P106, param_2043
    nqp_decontainerize $P107, $P106
    $P108 = $P107."stages"()
    defined $I100, $P108
    unless $I100, for_undef_851
    iter $P105, $P108
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop2065_handler
    push_eh $P113
  loop2065_test:
    unless $P105, loop2065_done
    shift $P109, $P105
  loop2065_redo:
    .const 'Sub' $P2054 = "300_1337966785.387" 
    capture_lex $P2054
    $P2054($P109)
  loop2065_next:
    goto loop2065_test
  loop2065_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop2065_next
    eq $P114, .CONTROL_LOOP_REDO, loop2065_redo
  loop2065_done:
    pop_eh 
  for_undef_851:
.annotate 'line', 1460
    new $P105, "Exception"
    set $P105['type'], .CONTROL_RETURN
    set $P106, $P2049
    unless_null $P106, vivify_864
    new $P106, "Undef"
  vivify_864:
    setattribute $P105, 'payload', $P106
    throw $P105
.annotate 'line', 1444
    .return ()
  control_2041:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P105, exception, "payload"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2053"  :anon :subid("300_1337966785.387") :outer("128_1337966785.387")
    .param pmc param_2057
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1450
    .const 'Sub' $P2062 = "301_1337966785.387" 
    capture_lex $P2062
.annotate 'line', 1451
    new $P110, "Undef"
    set $P2055, $P110
    .lex "$timestamp", $P2055
.annotate 'line', 1453
    new $P111, "Undef"
    set $P2056, $P111
    .lex "$diff", $P2056
    .lex "$_", param_2057
.annotate 'line', 1451
    time $N100
    new $P112, 'Float'
    set $P112, $N100
    set $P2055, $P112
.annotate 'line', 1452
    find_lex $P112, "self"
    nqp_decontainerize $P113, $P112
    find_lex $P114, "$result"
    unless_null $P114, vivify_852
    new $P114, "Undef"
  vivify_852:
    find_lex $P2058, "%adverbs"
    unless_null $P2058, vivify_853
    $P2058 = root_new ['parrot';'Hash']
  vivify_853:
    find_lex $P115, "$_"
    unless_null $P115, vivify_854
    new $P115, "Undef"
  vivify_854:
    set $S100, $P115
    $P116 = $P113.$S100($P114, $P2058 :flat)
    store_lex "$result", $P116
.annotate 'line', 1453
    time $N100
    new $P112, 'Float'
    set $P112, $N100
    set $P113, $P2055
    unless_null $P113, vivify_855
    new $P113, "Undef"
  vivify_855:
    sub $P114, $P112, $P113
    set $P2056, $P114
.annotate 'line', 1454
    find_lex $P2060, "%adverbs"
    unless_null $P2060, vivify_856
    $P2060 = root_new ['parrot';'Hash']
  vivify_856:
    set $P112, $P2060["stagestats"]
    unless_null $P112, vivify_857
    new $P112, "Undef"
  vivify_857:
    unless $P112, if_2059_end
    .const 'Sub' $P2062 = "301_1337966785.387" 
    capture_lex $P2062
    $P2062()
  if_2059_end:
.annotate 'line', 1458
    find_lex $P113, "$_"
    unless_null $P113, vivify_862
    new $P113, "Undef"
  vivify_862:
    set $S100, $P113
    find_lex $P114, "$target"
    unless_null $P114, vivify_863
    new $P114, "Undef"
  vivify_863:
    set $S101, $P114
    iseq $I101, $S100, $S101
    if $I101, if_2064
    new $P112, 'Integer'
    set $P112, $I101
    goto if_2064_end
  if_2064:
    die 0, .CONTROL_LOOP_LAST
  if_2064_end:
.annotate 'line', 1450
    .return ($P112)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2061"  :anon :subid("301_1337966785.387") :outer("300_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1455
    new $P113, "Undef"
    set $P2063, $P113
    .lex "$difffmt", $P2063
    find_lex $P114, "$diff"
    unless_null $P114, vivify_858
    new $P114, "Undef"
  vivify_858:
    new $P115, "ResizablePMCArray"
    push $P115, $P114
    sprintf $S100, "%.3f", $P115
    new $P116, 'String'
    set $P116, $S100
    set $P2063, $P116
.annotate 'line', 1456
    find_lex $P114, "$stderr"
    unless_null $P114, vivify_859
    new $P114, "Undef"
  vivify_859:
    new $P115, 'String'
    set $P115, "Stage "
    find_lex $P116, "$_"
    unless_null $P116, vivify_860
    new $P116, "Undef"
  vivify_860:
    concat $P117, $P115, $P116
    concat $P118, $P117, ": "
    set $P119, $P2063
    unless_null $P119, vivify_861
    new $P119, "Undef"
  vivify_861:
    concat $P120, $P118, $P119
    concat $P121, $P120, "\n"
    $P122 = $P114."print"($P121)
.annotate 'line', 1454
    .return ($P122)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "parse" :anon :subid("129_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_2069
    .param pmc param_2070
    .param pmc param_2071 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1463
    .const 'Sub' $P2080 = "302_1337966785.387" 
    capture_lex $P2080
    new $P2068, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2068, control_2067
    push_eh $P2068
    .lex "self", param_2069
    .lex "$source", param_2070
    .lex "%adverbs", param_2071
.annotate 'line', 1464
    new $P102, "Undef"
    set $P2072, $P102
    .lex "$s", $P2072
.annotate 'line', 1473
    new $P103, "Undef"
    set $P2073, $P103
    .lex "$grammar", $P2073
.annotate 'line', 1474
    new $P104, "Undef"
    set $P2074, $P104
    .lex "$actions", $P2074
.annotate 'line', 1477
    new $P105, "Undef"
    set $P2075, $P105
    .lex "$match", $P2075
.annotate 'line', 1464
    set $P106, param_2070
    unless_null $P106, vivify_865
    new $P106, "Undef"
  vivify_865:
    set $P2072, $P106
.annotate 'line', 1465
    set $P2077, param_2071
    unless_null $P2077, vivify_866
    $P2077 = root_new ['parrot';'Hash']
  vivify_866:
    set $P106, $P2077["transcode"]
    unless_null $P106, vivify_867
    new $P106, "Undef"
  vivify_867:
    unless $P106, if_2076_end
.annotate 'line', 1466
    set $P2078, param_2071
    unless_null $P2078, vivify_868
    $P2078 = root_new ['parrot';'Hash']
  vivify_868:
    set $P108, $P2078["transcode"]
    unless_null $P108, vivify_869
    new $P108, "Undef"
  vivify_869:
    set $S100, $P108
    split $P109, " ", $S100
    defined $I100, $P109
    unless $I100, for_undef_870
    iter $P107, $P109
    new $P112, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P112, loop2091_handler
    push_eh $P112
  loop2091_test:
    unless $P107, loop2091_done
    shift $P110, $P107
  loop2091_redo:
    .const 'Sub' $P2080 = "302_1337966785.387" 
    capture_lex $P2080
    $P2080($P110)
  loop2091_next:
    goto loop2091_test
  loop2091_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P113, exception, 'type'
    eq $P113, .CONTROL_LOOP_NEXT, loop2091_next
    eq $P113, .CONTROL_LOOP_REDO, loop2091_redo
  loop2091_done:
    pop_eh 
  for_undef_870:
  if_2076_end:
.annotate 'line', 1473
    set $P106, param_2069
    nqp_decontainerize $P107, $P106
    $P108 = $P107."parsegrammar"()
    set $P2073, $P108
.annotate 'line', 1463
    set $P106, $P2074
    unless_null $P106, vivify_873
    new $P106, "Undef"
  vivify_873:
.annotate 'line', 1475
    set $P2093, param_2071
    unless_null $P2093, vivify_874
    $P2093 = root_new ['parrot';'Hash']
  vivify_874:
    set $P106, $P2093["target"]
    unless_null $P106, vivify_875
    new $P106, "Undef"
  vivify_875:
    set $S100, $P106
    iseq $I100, $S100, "parse"
    if $I100, unless_2092_end
    set $P107, param_2069
    nqp_decontainerize $P108, $P107
    $P109 = $P108."parseactions"()
    set $P2074, $P109
  unless_2092_end:
.annotate 'line', 1476
    set $P2095, param_2071
    unless_null $P2095, vivify_876
    $P2095 = root_new ['parrot';'Hash']
  vivify_876:
    set $P106, $P2095["rxtrace"]
    unless_null $P106, vivify_877
    new $P106, "Undef"
  vivify_877:
    unless $P106, if_2094_end
    set $P107, $P2073
    unless_null $P107, vivify_878
    new $P107, "Undef"
  vivify_878:
    get_how $P108, $P107
    set $P109, $P2073
    unless_null $P109, vivify_879
    new $P109, "Undef"
  vivify_879:
    $P108."trace-on"($P109)
  if_2094_end:
.annotate 'line', 1477
    set $P106, $P2073
    unless_null $P106, vivify_880
    new $P106, "Undef"
  vivify_880:
    set $P107, $P2072
    unless_null $P107, vivify_881
    new $P107, "Undef"
  vivify_881:
    set $P108, $P2074
    unless_null $P108, vivify_882
    new $P108, "Undef"
  vivify_882:
    $P109 = $P106."parse"($P107, 0 :named("p"), $P108 :named("actions"))
    set $P2075, $P109
.annotate 'line', 1478
    set $P2097, param_2071
    unless_null $P2097, vivify_883
    $P2097 = root_new ['parrot';'Hash']
  vivify_883:
    set $P106, $P2097["rxtrace"]
    unless_null $P106, vivify_884
    new $P106, "Undef"
  vivify_884:
    unless $P106, if_2096_end
    set $P107, $P2073
    unless_null $P107, vivify_885
    new $P107, "Undef"
  vivify_885:
    get_how $P108, $P107
    set $P109, $P2073
    unless_null $P109, vivify_886
    new $P109, "Undef"
  vivify_886:
    $P108."trace-off"($P109)
  if_2096_end:
.annotate 'line', 1479
    set $P106, $P2075
    unless_null $P106, vivify_887
    new $P106, "Undef"
  vivify_887:
    if $P106, unless_2098_end
    set $P107, param_2069
    nqp_decontainerize $P108, $P107
    $P108."panic"("Unable to parse source")
  unless_2098_end:
.annotate 'line', 1480
    new $P106, "Exception"
    set $P106['type'], .CONTROL_RETURN
    set $P107, $P2075
    unless_null $P107, vivify_888
    new $P107, "Undef"
  vivify_888:
    setattribute $P106, 'payload', $P107
    throw $P106
.annotate 'line', 1463
    .return ()
  control_2067:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P106, exception, "payload"
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2079"  :anon :subid("302_1337966785.387") :outer("129_1337966785.387")
    .param pmc param_2081
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1466
    .const 'Sub' $P2083 = "303_1337966785.387" 
    capture_lex $P2083
    .lex "$_", param_2081
.annotate 'line', 1467
    .const 'Sub' $P2083 = "303_1337966785.387" 
    capture_lex $P2083
    $P111 = $P2083()
.annotate 'line', 1466
    .return ($P111)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block2082"  :anon :subid("303_1337966785.387") :outer("302_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1467
    new $P2086, 'ExceptionHandler'
    set_label $P2086, control_2085
    $P2086."handle_types_except"(.CONTROL_ALL)
    push_eh $P2086
.annotate 'line', 1468
    find_lex $P111, "$s"
    unless_null $P111, vivify_871
    new $P111, "Undef"
  vivify_871:
    set $S101, $P111
.annotate 'line', 1469
    find_lex $P112, "$_"
    unless_null $P112, vivify_872
    new $P112, "Undef"
  vivify_872:
    set $S102, $P112
    find_encoding $I101, $S102
    trans_encoding $S103, $S101, $I101
.annotate 'line', 1468
    new $P113, 'String'
    set $P113, $S103
    store_lex "$s", $P113
.annotate 'line', 1467
    pop_eh 
    goto skip_handler_2084
  control_2085:
    peek_exception $P2087
    .local pmc exception 
    .get_results (exception) 
    new $P2089, 'Integer'
    set $P2089, 1
    set exception["handled"], $P2089
    set $I2090, exception["handled"]
    eq $I2090, 1, handled_2088
    rethrow exception
  handled_2088:
    finalize $P2087
    .return (exception)
  skip_handler_2084:
    .return ($P113)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "past" :anon :subid("130_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_2100
    .param pmc param_2101
    .param pmc param_2102 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1483
    .lex "self", param_2100
    .lex "$source", param_2101
    .lex "%adverbs", param_2102
.annotate 'line', 1484
    new $P102, "Undef"
    set $P2103, $P102
    .lex "$ast", $P2103
    set $P103, param_2101
    unless_null $P103, vivify_889
    new $P103, "Undef"
  vivify_889:
    $P104 = $P103."ast"()
    set $P2103, $P104
.annotate 'line', 1486
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "PAST"
    get_who $P105, $P104
    set $P106, $P105["Node"]
    set $P107, $P2103
    unless_null $P107, vivify_890
    new $P107, "Undef"
  vivify_890:
    $P108 = $P106."ACCEPTS"($P107)
    if $P108, unless_2104_end
.annotate 'line', 1485
    set $P109, param_2100
    nqp_decontainerize $P110, $P109
    new $P111, "String"
    assign $P111, "Unable to obtain ast from "
    set $P112, param_2101
    unless_null $P112, vivify_891
    new $P112, "Undef"
  vivify_891:
    typeof $S100, $P112
    concat $P113, $P111, $S100
    $P110."panic"($P113)
  unless_2104_end:
.annotate 'line', 1483
    set $P103, $P2103
    unless_null $P103, vivify_892
    new $P103, "Undef"
  vivify_892:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "post" :anon :subid("131_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_2106
    .param pmc param_2107
    .param pmc param_2108 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1490
    .lex "self", param_2106
    .lex "$source", param_2107
    .lex "%adverbs", param_2108
.annotate 'line', 1491
    compreg $P102, "PAST"
    set $P103, param_2107
    unless_null $P103, vivify_893
    new $P103, "Undef"
  vivify_893:
    set $P2109, param_2108
    unless_null $P2109, vivify_894
    $P2109 = root_new ['parrot';'Hash']
  vivify_894:
    $P104 = $P102."to_post"($P103, $P2109 :flat)
.annotate 'line', 1490
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "pirbegin" :anon :subid("132_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_2111
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1494
    .lex "self", param_2111
.annotate 'line', 1496
    new $P102, "String"
    assign $P102, ".include 'cclass.pasm'\n"
    concat $P103, $P102, ".include 'except_severity.pasm'\n"
    concat $P104, $P103, ".include 'except_types.pasm'\n"
.annotate 'line', 1497
    concat $P105, $P104, ".include 'iglobals.pasm'\n"
.annotate 'line', 1498
    concat $P106, $P105, ".include 'interpinfo.pasm'\n"
.annotate 'line', 1499
    concat $P107, $P106, ".include 'iterator.pasm'\n"
.annotate 'line', 1500
    concat $P108, $P107, ".include 'sysinfo.pasm'\n"
.annotate 'line', 1501
    concat $P109, $P108, ".include 'stat.pasm'\n"
.annotate 'line', 1502
    concat $P110, $P109, ".include 'datatypes.pasm'\n"
.annotate 'line', 1494
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "pir" :anon :subid("133_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_2113
    .param pmc param_2114
    .param pmc param_2115 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1506
    .lex "self", param_2113
    .lex "$source", param_2114
    .lex "%adverbs", param_2115
.annotate 'line', 1507
    set $P102, param_2113
    nqp_decontainerize $P103, $P102
    $P104 = $P103."pirbegin"()
    compreg $P105, "POST"
    set $P106, param_2114
    unless_null $P106, vivify_895
    new $P106, "Undef"
  vivify_895:
    set $P2116, param_2115
    unless_null $P2116, vivify_896
    $P2116 = root_new ['parrot';'Hash']
  vivify_896:
    $S100 = $P105."to_pir"($P106, $P2116 :flat)
    concat $P107, $P104, $S100
.annotate 'line', 1506
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "evalpmc" :anon :subid("134_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_2118
    .param pmc param_2119
    .param pmc param_2120 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1510
    .lex "self", param_2118
    .lex "$source", param_2119
    .lex "%adverbs", param_2120
.annotate 'line', 1511
    new $P102, "Undef"
    set $P2121, $P102
    .lex "$compiler", $P2121
    compreg $P103, "PIR"
    set $P2121, $P103
.annotate 'line', 1512
    set $P103, $P2121
    unless_null $P103, vivify_897
    new $P103, "Undef"
  vivify_897:
    set $P104, param_2119
    unless_null $P104, vivify_898
    new $P104, "Undef"
  vivify_898:
    $P105 = $P103($P104)
.annotate 'line', 1510
    .return ($P105)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "dumper" :anon :subid("135_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_2123
    .param pmc param_2124
    .param pmc param_2125
    .param pmc param_2126 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1515
    .const 'Sub' $P2130 = "304_1337966785.387" 
    capture_lex $P2130
    .lex "self", param_2123
    .lex "$obj", param_2124
    .lex "$name", param_2125
    .lex "%options", param_2126
.annotate 'line', 1516
    set $P2128, param_2126
    unless_null $P2128, vivify_899
    $P2128 = root_new ['parrot';'Hash']
  vivify_899:
    set $P103, $P2128["dumper"]
    unless_null $P103, vivify_900
    new $P103, "Undef"
  vivify_900:
    if $P103, if_2127
.annotate 'line', 1522
    set $P106, param_2124
    unless_null $P106, vivify_901
    new $P106, "Undef"
  vivify_901:
    set $P107, param_2125
    unless_null $P107, vivify_902
    new $P107, "Undef"
  vivify_902:
    $P109 = "_dumper"($P106, $P107)
.annotate 'line', 1521
    set $P102, $P109
.annotate 'line', 1516
    goto if_2127_end
  if_2127:
    .const 'Sub' $P2130 = "304_1337966785.387" 
    capture_lex $P2130
    $P105 = $P2130()
    set $P102, $P105
  if_2127_end:
.annotate 'line', 1515
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2129"  :anon :subid("304_1337966785.387") :outer("135_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1518
    new $P104, "Undef"
    set $P2131, $P104
    .lex "$dumper", $P2131
.annotate 'line', 1517
    load_bytecode "PCT/Dumper.pbc"
.annotate 'line', 1518
    find_lex $P2132, "%options"
    unless_null $P2132, vivify_903
    $P2132 = root_new ['parrot';'Hash']
  vivify_903:
    set $P105, $P2132["dumper"]
    unless_null $P105, vivify_904
    new $P105, "Undef"
  vivify_904:
    set $S100, $P105
    downcase $S101, $S100
    get_hll_global $P106, "GLOBAL"
    nqp_get_package_through_who $P107, $P106, "PCT"
    get_who $P108, $P107
    set $P2133, $P108["Dumper"]
    unless_null $P2133, vivify_905
    $P2133 = root_new ['parrot';'Hash']
  vivify_905:
    set $P109, $P2133[$S101]
    unless_null $P109, vivify_906
    new $P109, "Undef"
  vivify_906:
    set $P2131, $P109
.annotate 'line', 1519
    set $P105, $P2131
    unless_null $P105, vivify_907
    new $P105, "Undef"
  vivify_907:
    find_lex $P106, "$obj"
    unless_null $P106, vivify_908
    new $P106, "Undef"
  vivify_908:
    find_lex $P107, "$name"
    unless_null $P107, vivify_909
    new $P107, "Undef"
  vivify_909:
    $P108 = $P105($P106, $P107)
.annotate 'line', 1516
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "usage" :anon :subid("136_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_2135
    .param pmc param_2136 :optional
    .param int has_param_2136 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1526
    .lex "self", param_2135
    if has_param_2136, optparam_910
    new $P102, "Undef"
    set param_2136, $P102
  optparam_910:
    .lex "$name", param_2136
.annotate 'line', 1527
    set $P103, param_2136
    unless_null $P103, vivify_911
    new $P103, "Undef"
  vivify_911:
    unless $P103, if_2137_end
.annotate 'line', 1528
    set $P104, param_2136
    unless_null $P104, vivify_912
    new $P104, "Undef"
  vivify_912:
    "say"($P104)
  if_2137_end:
.annotate 'line', 1530
    set $P103, param_2135
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_get_attr_obj $P106, $P104, $P105, "$!usage", 4
    unless_null $P106, vivify_913
    new $P106, "Undef"
  vivify_913:
    say $P106
.annotate 'line', 1531
    exit 0
.annotate 'line', 1526
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "version" :anon :subid("137_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_2139
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1534
    .lex "self", param_2139
.annotate 'line', 1535
    new $P102, "Undef"
    set $P2140, $P102
    .lex "$version", $P2140
.annotate 'line', 1536
    new $P103, "Undef"
    set $P2141, $P103
    .lex "$parver", $P2141
.annotate 'line', 1537
    new $P104, "Undef"
    set $P2142, $P104
    .lex "$parrev", $P2142
.annotate 'line', 1535
    set $P105, param_2139
    nqp_decontainerize $P106, $P105
    nqp_get_sc_object $P107, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_get_attr_obj $P2143, $P106, $P107, "%!config", 7
    unless_null $P2143, vivify_914
    $P2143 = root_new ['parrot';'Hash']
  vivify_914:
    set $P108, $P2143["version"]
    unless_null $P108, vivify_915
    new $P108, "Undef"
  vivify_915:
    set $P2140, $P108
.annotate 'line', 1536
    find_lex $P105, "$?PACKAGE"
    get_who $P106, $P105
    set $P2144, $P106["%parrot_config"]
    unless_null $P2144, vivify_916
    $P2144 = root_new ['parrot';'Hash']
  vivify_916:
    set $P107, $P2144["VERSION"]
    unless_null $P107, vivify_917
    new $P107, "Undef"
  vivify_917:
    set $P2141, $P107
.annotate 'line', 1537
    find_lex $P105, "$?PACKAGE"
    get_who $P106, $P105
    set $P2146, $P106["%parrot_config"]
    unless_null $P2146, vivify_918
    $P2146 = root_new ['parrot';'Hash']
  vivify_918:
    set $P107, $P2146["git_describe"]
    unless_null $P107, vivify_919
    new $P107, "Undef"
  vivify_919:
    set $P2145, $P107
    defined $I2148, $P2145
    if $I2148, default_2147
    new $P108, "String"
    assign $P108, "(unknown)"
    set $P2145, $P108
  default_2147:
    set $P2142, $P2145
.annotate 'line', 1538
    new $P105, 'String'
    set $P105, "This is "
    set $P106, param_2139
    nqp_decontainerize $P107, $P106
    nqp_get_sc_object $P108, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_get_attr_obj $P109, $P107, $P108, "$!language", 6
    unless_null $P109, vivify_920
    new $P109, "Undef"
  vivify_920:
    concat $P110, $P105, $P109
    concat $P111, $P110, " version "
    set $P112, $P2140
    unless_null $P112, vivify_921
    new $P112, "Undef"
  vivify_921:
    concat $P113, $P111, $P112
    concat $P114, $P113, " built on parrot "
    set $P115, $P2141
    unless_null $P115, vivify_922
    new $P115, "Undef"
  vivify_922:
    concat $P116, $P114, $P115
    concat $P117, $P116, " revision "
    set $P118, $P2142
    unless_null $P118, vivify_923
    new $P118, "Undef"
  vivify_923:
    concat $P119, $P117, $P118
    say $P119
.annotate 'line', 1539
    exit 0
.annotate 'line', 1534
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "show-config" :anon :subid("138_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_2150
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1542
    .const 'Sub' $P2158 = "306_1337966785.387" 
    capture_lex $P2158
    .const 'Sub' $P2153 = "305_1337966785.387" 
    capture_lex $P2153
    .lex "self", param_2150
.annotate 'line', 1543
    find_lex $P103, "$?PACKAGE"
    get_who $P104, $P103
    set $P2151, $P104["%parrot_config"]
    unless_null $P2151, vivify_924
    $P2151 = root_new ['parrot';'Hash']
  vivify_924:
    defined $I100, $P2151
    unless $I100, for_undef_925
    iter $P102, $P2151
    new $P106, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P106, loop2155_handler
    push_eh $P106
  loop2155_test:
    unless $P102, loop2155_done
    shift $P105, $P102
  loop2155_redo:
    .const 'Sub' $P2153 = "305_1337966785.387" 
    capture_lex $P2153
    $P2153($P105)
  loop2155_next:
    goto loop2155_test
  loop2155_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P107, exception, 'type'
    eq $P107, .CONTROL_LOOP_NEXT, loop2155_next
    eq $P107, .CONTROL_LOOP_REDO, loop2155_redo
  loop2155_done:
    pop_eh 
  for_undef_925:
.annotate 'line', 1546
    set $P103, param_2150
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_get_attr_obj $P2156, $P104, $P105, "%!config", 7
    unless_null $P2156, vivify_928
    $P2156 = root_new ['parrot';'Hash']
  vivify_928:
    defined $I100, $P2156
    unless $I100, for_undef_929
    iter $P102, $P2156
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop2160_handler
    push_eh $P107
  loop2160_test:
    unless $P102, loop2160_done
    shift $P106, $P102
  loop2160_redo:
    .const 'Sub' $P2158 = "306_1337966785.387" 
    capture_lex $P2158
    $P2158($P106)
  loop2160_next:
    goto loop2160_test
  loop2160_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop2160_next
    eq $P108, .CONTROL_LOOP_REDO, loop2160_redo
  loop2160_done:
    pop_eh 
  for_undef_929:
.annotate 'line', 1549
    exit 0
.annotate 'line', 1542
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2152"  :anon :subid("305_1337966785.387") :outer("138_1337966785.387")
    .param pmc param_2154
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1543
    .lex "$_", param_2154
.annotate 'line', 1544
    new $P106, "String"
    assign $P106, "parrot::"
    find_lex $P107, "$_"
    unless_null $P107, vivify_926
    new $P107, "Undef"
  vivify_926:
    $S100 = $P107."key"()
    concat $P108, $P106, $S100
    concat $P109, $P108, "="
    find_lex $P110, "$_"
    unless_null $P110, vivify_927
    new $P110, "Undef"
  vivify_927:
    $S101 = $P110."value"()
    concat $P111, $P109, $S101
    say $P111
.annotate 'line', 1543
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2157"  :anon :subid("306_1337966785.387") :outer("138_1337966785.387")
    .param pmc param_2159
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1546
    .lex "$_", param_2159
.annotate 'line', 1547
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_get_attr_obj $P110, $P108, $P109, "$!language", 6
    unless_null $P110, vivify_930
    new $P110, "Undef"
  vivify_930:
    concat $P111, $P110, "::"
    find_lex $P112, "$_"
    unless_null $P112, vivify_931
    new $P112, "Undef"
  vivify_931:
    $S100 = $P112."key"()
    concat $P113, $P111, $S100
    concat $P114, $P113, "="
    find_lex $P115, "$_"
    unless_null $P115, vivify_932
    new $P115, "Undef"
  vivify_932:
    $S101 = $P115."value"()
    concat $P116, $P114, $S101
    say $P116
.annotate 'line', 1546
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "nqpevent" :anon :subid("139_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_2162
    .param pmc param_2163 :optional
    .param int has_param_2163 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1552
    .const 'Sub' $P2168 = "307_1337966785.387" 
    capture_lex $P2168
    .lex "self", param_2162
    if has_param_2163, optparam_933
    new $P102, "Undef"
    set param_2163, $P102
  optparam_933:
    .lex "$spec", param_2163
.annotate 'line', 1555
    new $P103, "Undef"
    set $P2164, $P103
    .lex "$fh", $P2164
.annotate 'line', 1554
    nqpevent "nqpevent: log finished"
.annotate 'line', 1555
    null $P104
    nqpevent_fh $P105, $P104
    set $P2164, $P105
.annotate 'line', 1556
    set $P104, $P2164
    unless_null $P104, vivify_934
    new $P104, "Undef"
  vivify_934:
    unless $P104, if_2165_end
    set $P105, $P2164
    unless_null $P105, vivify_935
    new $P105, "Undef"
  vivify_935:
    $P105."flush"()
  if_2165_end:
.annotate 'line', 1559
    set $P105, param_2163
    unless_null $P105, vivify_936
    new $P105, "Undef"
  vivify_936:
    if $P105, if_2166
    set $P104, $P105
    goto if_2166_end
  if_2166:
    .const 'Sub' $P2168 = "307_1337966785.387" 
    capture_lex $P2168
    $P108 = $P2168()
    set $P104, $P108
  if_2166_end:
.annotate 'line', 1552
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2167"  :anon :subid("307_1337966785.387") :outer("139_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1559
    .const 'Sub' $P2175 = "308_1337966785.387" 
    capture_lex $P2175
.annotate 'line', 1561
    new $P106, "Undef"
    set $P2169, $P106
    .lex "$file", $P2169
.annotate 'line', 1562
    new $P107, "Undef"
    set $P2170, $P107
    .lex "$flags", $P2170
.annotate 'line', 1560
    find_lex $P108, "$spec"
    unless_null $P108, vivify_937
    new $P108, "Undef"
  vivify_937:
    set $S100, $P108
    split $P109, ";", $S100
    store_lex "$spec", $P109
.annotate 'line', 1561
    find_lex $P2171, "$spec"
    unless_null $P2171, vivify_938
    $P2171 = root_new ['parrot';'ResizablePMCArray']
  vivify_938:
    set $P108, $P2171[0]
    unless_null $P108, vivify_939
    new $P108, "Undef"
  vivify_939:
    set $P2169, $P108
.annotate 'line', 1562
    find_lex $P2172, "$spec"
    unless_null $P2172, vivify_940
    $P2172 = root_new ['parrot';'ResizablePMCArray']
  vivify_940:
    set $P108, $P2172[1]
    unless_null $P108, vivify_941
    new $P108, "Undef"
  vivify_941:
    set $P2170, $P108
.annotate 'line', 1563
    set $P108, $P2169
    unless_null $P108, vivify_942
    new $P108, "Undef"
  vivify_942:
    set $S100, $P108
    isgt $I100, $S100, ""
    if $I100, if_2173
.annotate 'line', 1569
    getinterp $P110
    $P112 = $P110."stderr_handle"()
    nqpevent_fh $P113, $P112
.annotate 'line', 1568
    goto if_2173_end
  if_2173:
.annotate 'line', 1563
    .const 'Sub' $P2175 = "308_1337966785.387" 
    capture_lex $P2175
    $P2175()
  if_2173_end:
.annotate 'line', 1571
    set $P108, $P2170
    unless_null $P108, vivify_947
    new $P108, "Undef"
  vivify_947:
    set $S100, $P108
    iseq $I101, $S100, ""
    if $I101, if_2178
    set $P109, $P2170
    unless_null $P109, vivify_948
    new $P109, "Undef"
  vivify_948:
    set $I100, $P109
    goto if_2178_end
  if_2178:
    set $I100, 31
  if_2178_end:
    nqpdebflags $I102, $I100
.annotate 'line', 1572
    nqpevent "nqpevent: log started"
.annotate 'line', 1559
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2174"  :anon :subid("308_1337966785.387") :outer("307_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1564
    new $P109, "Undef"
    set $P2176, $P109
    .lex "$fh", $P2176
    new $P110, "FileHandle"
    set $P2176, $P110
.annotate 'line', 1565
    set $P110, $P2176
    unless_null $P110, vivify_943
    new $P110, "Undef"
  vivify_943:
    find_lex $P111, "$file"
    unless_null $P111, vivify_944
    new $P111, "Undef"
  vivify_944:
    $P112 = $P110."open"($P111, "w")
    if $P112, unless_2177_end
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    new $P115, 'String'
    set $P115, "Cannot write to "
    find_lex $P116, "$file"
    unless_null $P116, vivify_945
    new $P116, "Undef"
  vivify_945:
    concat $P117, $P115, $P116
    $P114."panic"($P117)
  unless_2177_end:
.annotate 'line', 1566
    set $P110, $P2176
    unless_null $P110, vivify_946
    new $P110, "Undef"
  vivify_946:
    nqpevent_fh $P111, $P110
.annotate 'line', 1563
    .return ($P111)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "removestage" :anon :subid("140_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_2180
    .param pmc param_2181
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1576
    .const 'Sub' $P2186 = "309_1337966785.387" 
    capture_lex $P2186
    .lex "self", param_2180
    .lex "$stagename", param_2181
.annotate 'line', 1577
    $P2183 = root_new ['parrot';'ResizablePMCArray']
    set $P2182, $P2183
    .lex "@new_stages", $P2182
    new $P102, "ResizableStringArray"
    set $P2182, $P102
.annotate 'line', 1578
    set $P103, param_2180
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_get_attr_obj $P2184, $P104, $P105, "@!stages", 0
    unless_null $P2184, vivify_949
    $P2184 = root_new ['parrot';'ResizablePMCArray']
  vivify_949:
    defined $I100, $P2184
    unless $I100, for_undef_950
    iter $P102, $P2184
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop2190_handler
    push_eh $P108
  loop2190_test:
    unless $P102, loop2190_done
    shift $P106, $P102
  loop2190_redo:
    .const 'Sub' $P2186 = "309_1337966785.387" 
    capture_lex $P2186
    $P2186($P106)
  loop2190_next:
    goto loop2190_test
  loop2190_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop2190_next
    eq $P109, .CONTROL_LOOP_REDO, loop2190_redo
  loop2190_done:
    pop_eh 
  for_undef_950:
.annotate 'line', 1583
    set $P2191, $P2182
    unless_null $P2191, vivify_955
    $P2191 = root_new ['parrot';'ResizablePMCArray']
  vivify_955:
    set $P102, param_2180
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 94
    repr_bind_attr_obj $P103, $P104, "@!stages", 0, $P2191
.annotate 'line', 1576
    .return ($P2191)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2185"  :anon :subid("309_1337966785.387") :outer("140_1337966785.387")
    .param pmc param_2187
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1578
    .lex "$_", param_2187
.annotate 'line', 1579
    find_lex $P108, "$_"
    unless_null $P108, vivify_951
    new $P108, "Undef"
  vivify_951:
    set $S100, $P108
    find_lex $P109, "$stagename"
    unless_null $P109, vivify_952
    new $P109, "Undef"
  vivify_952:
    set $S101, $P109
    isne $I101, $S100, $S101
    if $I101, if_2188
    new $P107, 'Integer'
    set $P107, $I101
    goto if_2188_end
  if_2188:
.annotate 'line', 1580
    find_lex $P2189, "@new_stages"
    unless_null $P2189, vivify_953
    $P2189 = root_new ['parrot';'ResizablePMCArray']
  vivify_953:
    find_lex $P110, "$_"
    unless_null $P110, vivify_954
    new $P110, "Undef"
  vivify_954:
    $P111 = $P2189."push"($P110)
.annotate 'line', 1579
    set $P107, $P111
  if_2188_end:
.annotate 'line', 1578
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "addstage" :anon :subid("141_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_2195
    .param pmc param_2196
    .param pmc param_2197 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1586
    .const 'Sub' $P2215 = "311_1337966785.387" 
    capture_lex $P2215
    .const 'Sub' $P2209 = "310_1337966785.387" 
    capture_lex $P2209
    new $P2194, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2194, control_2193
    push_eh $P2194
    .lex "self", param_2195
    .lex "$stagename", param_2196
    .lex "%adverbs", param_2197
.annotate 'line', 1587
    new $P102, "Undef"
    set $P2198, $P102
    .lex "$position", $P2198
.annotate 'line', 1588
    new $P103, "Undef"
    set $P2199, $P103
    .lex "$where", $P2199
.annotate 'line', 1601
    $P2201 = root_new ['parrot';'ResizablePMCArray']
    set $P2200, $P2201
    .lex "@new-stages", $P2200
.annotate 'line', 1586
    set $P104, $P2198
    unless_null $P104, vivify_956
    new $P104, "Undef"
  vivify_956:
    set $P104, $P2199
    unless_null $P104, vivify_957
    new $P104, "Undef"
  vivify_957:
.annotate 'line', 1589
    set $P2203, param_2197
    unless_null $P2203, vivify_958
    $P2203 = root_new ['parrot';'Hash']
  vivify_958:
    set $P104, $P2203["before"]
    unless_null $P104, vivify_959
    new $P104, "Undef"
  vivify_959:
    if $P104, if_2202
.annotate 'line', 1592
    set $P2206, param_2197
    unless_null $P2206, vivify_960
    $P2206 = root_new ['parrot';'Hash']
  vivify_960:
    set $P105, $P2206["after"]
    unless_null $P105, vivify_961
    new $P105, "Undef"
  vivify_961:
    if $P105, if_2205
.annotate 'line', 1595
    .const 'Sub' $P2209 = "310_1337966785.387" 
    capture_lex $P2209
    $P2209()
    goto if_2205_end
  if_2205:
.annotate 'line', 1593
    set $P2207, param_2197
    unless_null $P2207, vivify_965
    $P2207 = root_new ['parrot';'Hash']
  vivify_965:
    set $P106, $P2207["after"]
    unless_null $P106, vivify_966
    new $P106, "Undef"
  vivify_966:
    set $P2199, $P106
.annotate 'line', 1594
    new $P106, "String"
    assign $P106, "after"
    set $P2198, $P106
  if_2205_end:
.annotate 'line', 1592
    goto if_2202_end
  if_2202:
.annotate 'line', 1590
    set $P2204, param_2197
    unless_null $P2204, vivify_967
    $P2204 = root_new ['parrot';'Hash']
  vivify_967:
    set $P105, $P2204["before"]
    unless_null $P105, vivify_968
    new $P105, "Undef"
  vivify_968:
    set $P2199, $P105
.annotate 'line', 1591
    new $P105, "String"
    assign $P105, "before"
    set $P2198, $P105
  if_2202_end:
.annotate 'line', 1601
    new $P104, "ResizableStringArray"
    set $P2200, $P104
.annotate 'line', 1602
    set $P105, param_2195
    nqp_decontainerize $P106, $P105
    $P107 = $P106."stages"()
    defined $I100, $P107
    unless $I100, for_undef_969
    iter $P104, $P107
    new $P110, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P110, loop2224_handler
    push_eh $P110
  loop2224_test:
    unless $P104, loop2224_done
    shift $P108, $P104
  loop2224_redo:
    .const 'Sub' $P2215 = "311_1337966785.387" 
    capture_lex $P2215
    $P2215($P108)
  loop2224_next:
    goto loop2224_test
  loop2224_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P111, exception, 'type'
    eq $P111, .CONTROL_LOOP_NEXT, loop2224_next
    eq $P111, .CONTROL_LOOP_REDO, loop2224_redo
  loop2224_done:
    pop_eh 
  for_undef_969:
.annotate 'line', 1615
    set $P104, param_2195
    nqp_decontainerize $P105, $P104
    set $P2225, $P2200
    unless_null $P2225, vivify_983
    $P2225 = root_new ['parrot';'ResizablePMCArray']
  vivify_983:
    $P106 = $P105."stages"($P2225)
.annotate 'line', 1586
    .return ($P106)
  control_2193:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P104, exception, "payload"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block2208"  :anon :subid("310_1337966785.387") :outer("141_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1596
    $P2211 = root_new ['parrot';'ResizablePMCArray']
    set $P2210, $P2211
    .lex "@new-stages", $P2210
    find_lex $P106, "self"
    nqp_decontainerize $P107, $P106
    $P108 = $P107."stages"()
    clone $P109, $P108
    set $P2210, $P109
.annotate 'line', 1597
    set $P2212, $P2210
    unless_null $P2212, vivify_962
    $P2212 = root_new ['parrot';'ResizablePMCArray']
  vivify_962:
    find_lex $P106, "$stagename"
    unless_null $P106, vivify_963
    new $P106, "Undef"
  vivify_963:
    push $P2212, $P106
.annotate 'line', 1598
    find_lex $P106, "self"
    nqp_decontainerize $P107, $P106
    set $P2213, $P2210
    unless_null $P2213, vivify_964
    $P2213 = root_new ['parrot';'ResizablePMCArray']
  vivify_964:
    $P107."stages"($P2213)
.annotate 'line', 1599
    new $P106, "Exception"
    set $P106['type'], .CONTROL_RETURN
    new $P107, "Float"
    assign $P107, 1
    setattribute $P106, 'payload', $P107
    throw $P106
.annotate 'line', 1595
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2214"  :anon :subid("311_1337966785.387") :outer("141_1337966785.387")
    .param pmc param_2216
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1602
    .lex "$_", param_2216
.annotate 'line', 1603
    find_lex $P110, "$_"
    unless_null $P110, vivify_970
    new $P110, "Undef"
  vivify_970:
    set $S100, $P110
    find_lex $P111, "$where"
    unless_null $P111, vivify_971
    new $P111, "Undef"
  vivify_971:
    set $S101, $P111
    iseq $I101, $S100, $S101
    if $I101, if_2217
.annotate 'line', 1612
    find_lex $P2223, "@new-stages"
    unless_null $P2223, vivify_972
    $P2223 = root_new ['parrot';'ResizablePMCArray']
  vivify_972:
    find_lex $P113, "$_"
    unless_null $P113, vivify_973
    new $P113, "Undef"
  vivify_973:
    push $P2223, $P113
.annotate 'line', 1611
    set $P109, $P2223
.annotate 'line', 1603
    goto if_2217_end
  if_2217:
.annotate 'line', 1604
    find_lex $P113, "$position"
    unless_null $P113, vivify_974
    new $P113, "Undef"
  vivify_974:
    set $S102, $P113
    iseq $I102, $S102, "before"
    if $I102, if_2218
.annotate 'line', 1608
    find_lex $P2221, "@new-stages"
    unless_null $P2221, vivify_975
    $P2221 = root_new ['parrot';'ResizablePMCArray']
  vivify_975:
    find_lex $P114, "$_"
    unless_null $P114, vivify_976
    new $P114, "Undef"
  vivify_976:
    push $P2221, $P114
.annotate 'line', 1609
    find_lex $P2222, "@new-stages"
    unless_null $P2222, vivify_977
    $P2222 = root_new ['parrot';'ResizablePMCArray']
  vivify_977:
    find_lex $P114, "$stagename"
    unless_null $P114, vivify_978
    new $P114, "Undef"
  vivify_978:
    push $P2222, $P114
.annotate 'line', 1607
    set $P112, $P2222
.annotate 'line', 1604
    goto if_2218_end
  if_2218:
.annotate 'line', 1605
    find_lex $P2219, "@new-stages"
    unless_null $P2219, vivify_979
    $P2219 = root_new ['parrot';'ResizablePMCArray']
  vivify_979:
    find_lex $P114, "$stagename"
    unless_null $P114, vivify_980
    new $P114, "Undef"
  vivify_980:
    push $P2219, $P114
.annotate 'line', 1606
    find_lex $P2220, "@new-stages"
    unless_null $P2220, vivify_981
    $P2220 = root_new ['parrot';'ResizablePMCArray']
  vivify_981:
    find_lex $P114, "$_"
    unless_null $P114, vivify_982
    new $P114, "Undef"
  vivify_982:
    push $P2220, $P114
.annotate 'line', 1604
    set $P112, $P2220
  if_2218_end:
.annotate 'line', 1603
    set $P109, $P112
  if_2217_end:
.annotate 'line', 1602
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "parse_name" :anon :subid("142_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_2227
    .param pmc param_2228
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1618
    .const 'Sub' $P2244 = "312_1337966785.387" 
    capture_lex $P2244
    .lex "self", param_2227
    .lex "$name", param_2228
.annotate 'line', 1619
    $P2230 = root_new ['parrot';'ResizablePMCArray']
    set $P2229, $P2230
    .lex "@ns", $P2229
.annotate 'line', 1620
    new $P102, "Undef"
    set $P2231, $P102
    .lex "$sigil", $P2231
.annotate 'line', 1623
    new $P103, "Undef"
    set $P2232, $P103
    .lex "$idx", $P2232
.annotate 'line', 1631
    $P2234 = root_new ['parrot';'ResizablePMCArray']
    set $P2233, $P2234
    .lex "@actual_ns", $P2233
.annotate 'line', 1619
    set $P104, param_2228
    unless_null $P104, vivify_984
    new $P104, "Undef"
  vivify_984:
    set $S100, $P104
    split $P105, "::", $S100
    set $P2229, $P105
.annotate 'line', 1620
    set $P2235, $P2229
    unless_null $P2235, vivify_985
    $P2235 = root_new ['parrot';'ResizablePMCArray']
  vivify_985:
    set $P104, $P2235[0]
    unless_null $P104, vivify_986
    new $P104, "Undef"
  vivify_986:
    set $S100, $P104
    substr $S101, $S100, 0, 1
    new $P105, 'String'
    set $P105, $S101
    set $P2231, $P105
.annotate 'line', 1623
    set $P104, $P2231
    unless_null $P104, vivify_987
    new $P104, "Undef"
  vivify_987:
    set $S100, $P104
    index $I100, "$@%&", $S100
    new $P105, 'Integer'
    set $P105, $I100
    set $P2232, $P105
.annotate 'line', 1624
    set $P104, $P2232
    unless_null $P104, vivify_988
    new $P104, "Undef"
  vivify_988:
    set $N100, $P104
    set $N101, 0
    isge $I100, $N100, $N101
    unless $I100, if_2236_end
.annotate 'line', 1625
    set $P2237, $P2229
    unless_null $P2237, vivify_989
    $P2237 = root_new ['parrot';'ResizablePMCArray']
  vivify_989:
    set $P105, $P2237[0]
    unless_null $P105, vivify_990
    new $P105, "Undef"
  vivify_990:
    set $S100, $P105
    substr $S101, $S100, 1
    new $P106, 'String'
    set $P106, $S101
    set $P2238, $P2229
    unless_null $P2238, vivify_991
    $P2238 = root_new ['parrot';'ResizablePMCArray']
    set $P2229, $P2238
  vivify_991:
    set $P2238[0], $P106
.annotate 'line', 1626
    set $P105, $P2231
    unless_null $P105, vivify_992
    new $P105, "Undef"
  vivify_992:
    set $P2239, $P2229
    unless_null $P2239, vivify_993
    $P2239 = root_new ['parrot';'ResizablePMCArray']
  vivify_993:
    set $P106, $P2239[-1]
    unless_null $P106, vivify_994
    new $P106, "Undef"
  vivify_994:
    concat $P107, $P105, $P106
    set $P2240, $P2229
    unless_null $P2240, vivify_995
    $P2240 = root_new ['parrot';'ResizablePMCArray']
    set $P2229, $P2240
  vivify_995:
    set $P2240[-1], $P107
  if_2236_end:
.annotate 'line', 1618
    set $P2241, $P2233
    unless_null $P2241, vivify_996
    $P2241 = root_new ['parrot';'ResizablePMCArray']
  vivify_996:
.annotate 'line', 1632
    set $P2242, $P2229
    unless_null $P2242, vivify_997
    $P2242 = root_new ['parrot';'ResizablePMCArray']
  vivify_997:
    defined $I100, $P2242
    unless $I100, for_undef_998
    iter $P104, $P2242
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop2248_handler
    push_eh $P107
  loop2248_test:
    unless $P104, loop2248_done
    shift $P105, $P104
  loop2248_redo:
    .const 'Sub' $P2244 = "312_1337966785.387" 
    capture_lex $P2244
    $P2244($P105)
  loop2248_next:
    goto loop2248_test
  loop2248_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop2248_next
    eq $P108, .CONTROL_LOOP_REDO, loop2248_redo
  loop2248_done:
    pop_eh 
  for_undef_998:
.annotate 'line', 1618
    set $P2249, $P2233
    unless_null $P2249, vivify_1002
    $P2249 = root_new ['parrot';'ResizablePMCArray']
  vivify_1002:
    .return ($P2249)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2243"  :anon :subid("312_1337966785.387") :outer("142_1337966785.387")
    .param pmc param_2245
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1632
    .lex "$_", param_2245
.annotate 'line', 1633
    find_lex $P107, "$_"
    unless_null $P107, vivify_999
    new $P107, "Undef"
  vivify_999:
    set $S100, $P107
    iseq $I101, $S100, ""
    unless $I101, unless_2246
    new $P106, 'Integer'
    set $P106, $I101
    goto unless_2246_end
  unless_2246:
    find_lex $P2247, "@actual_ns"
    unless_null $P2247, vivify_1000
    $P2247 = root_new ['parrot';'ResizablePMCArray']
  vivify_1000:
    find_lex $P108, "$_"
    unless_null $P108, vivify_1001
    new $P108, "Undef"
  vivify_1001:
    push $P2247, $P108
    set $P106, $P2247
  unless_2246_end:
.annotate 'line', 1632
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "lineof" :anon :subid("143_1337966785.387") :outer("273_1337966785.387")
    .param pmc param_2251
    .param pmc param_2252
    .param pmc param_2253
    .param pmc param_2254 :optional :named("cache")
    .param int has_param_2254 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1638
    .lex "self", param_2251
    .lex "$target", param_2252
    .lex "$pos", param_2253
    if has_param_2254, optparam_1003
    new $P102, "Undef"
    set param_2254, $P102
  optparam_1003:
    .lex "$cache", param_2254
.annotate 'line', 1639

            .local pmc target, linepos
            .local int pos, cache
            target = find_lex '$target'
            $P0 = find_lex '$pos'
            pos = $P0
            $P0 = find_lex '$cache'
            cache = $P0

            # If we've previously cached C<linepos> for target, we use it.
            unless cache goto linepos_build
            linepos = getprop '!linepos', target
            unless null linepos goto linepos_done

            # calculate a new linepos array.
          linepos_build:
            linepos = new ['ResizableIntegerArray']
            unless cache goto linepos_build_1
            setprop target, '!linepos', linepos
          linepos_build_1:
            .local string s
            .local int jpos, eos
            s = target
            eos = length s
            jpos = 0
            # Search for all of the newline markers in C<target>.  When we
            # find one, mark the ending offset of the line in C<linepos>.
          linepos_loop:
            jpos = find_cclass .CCLASS_NEWLINE, s, jpos, eos
            unless jpos < eos goto linepos_done
            $I0 = ord s, jpos
            inc jpos
            push linepos, jpos
            # Treat \r\n as a single logical newline.
            if $I0 != 13 goto linepos_loop
            $I0 = ord s, jpos
            if $I0 != 10 goto linepos_loop
            inc jpos
            goto linepos_loop
          linepos_done:

            # We have C<linepos>, so now we search the array for the largest
            # element that is not greater than C<pos>.  The index of that
            # element is the line number to be returned.
            # (Potential optimization: use a binary search.)
            .local int line, count
            count = elements linepos
            line = 0
          line_loop:
            if line >= count goto line_done
            $I0 = linepos[line]
            if $I0 > pos goto line_done
            inc line
            goto line_loop
          line_done:
            .return (line)
        
.annotate 'line', 1638
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Result"]
.sub "_block2256"  :subid("313_1337966785.387") :outer("179_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1794
    .const 'Sub' $P2272 = "148_1337966785.387" 
    capture_lex $P2272
    .const 'Sub' $P2268 = "147_1337966785.387" 
    capture_lex $P2268
    .const 'Sub' $P2265 = "146_1337966785.387" 
    capture_lex $P2265
    .const 'Sub' $P2262 = "145_1337966785.387" 
    capture_lex $P2262
    .const 'Sub' $P2260 = "144_1337966785.387" 
    capture_lex $P2260
    .lex "$?PACKAGE", $P2258
    .lex "$?CLASS", $P2259
.annotate 'line', 1810
    .const 'Sub' $P2272 = "148_1337966785.387" 
    newclosure $P2284, $P2272
.annotate 'line', 1794
    .return ($P2284)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Result"]
.sub "init" :anon :subid("144_1337966785.387") :outer("313_1337966785.387")
    .param pmc param_2261
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1798
    .lex "self", param_2261
.annotate 'line', 1799
    new $P101, "ResizablePMCArray"
    set $P102, param_2261
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 136
    repr_bind_attr_obj $P103, $P104, "@!arguments", 0, $P101
.annotate 'line', 1800
    new $P101, "Hash"
    set $P102, param_2261
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 136
    repr_bind_attr_obj $P103, $P104, "%!options", 1, $P101
.annotate 'line', 1798
    .return ($P101)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Result"]
.sub "arguments" :anon :subid("145_1337966785.387") :outer("313_1337966785.387")
    .param pmc param_2263
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1803
    .lex "self", param_2263
    set $P101, param_2263
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 136
    repr_get_attr_obj $P2264, $P102, $P103, "@!arguments", 0
    unless_null $P2264, vivify_1005
    $P2264 = root_new ['parrot';'ResizablePMCArray']
  vivify_1005:
    .return ($P2264)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Result"]
.sub "options" :anon :subid("146_1337966785.387") :outer("313_1337966785.387")
    .param pmc param_2266
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1804
    .lex "self", param_2266
    set $P101, param_2266
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 136
    repr_get_attr_obj $P2267, $P102, $P103, "%!options", 1
    unless_null $P2267, vivify_1006
    $P2267 = root_new ['parrot';'Hash']
  vivify_1006:
    .return ($P2267)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Result"]
.sub "add-argument" :anon :subid("147_1337966785.387") :outer("313_1337966785.387")
    .param pmc param_2269
    .param pmc param_2270
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1806
    .lex "self", param_2269
    .lex "$x", param_2270
.annotate 'line', 1807
    set $P101, param_2269
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 136
    repr_get_attr_obj $P2271, $P102, $P103, "@!arguments", 0
    unless_null $P2271, vivify_1007
    $P2271 = root_new ['parrot';'ResizablePMCArray']
  vivify_1007:
    set $P104, param_2270
    unless_null $P104, vivify_1008
    new $P104, "Undef"
  vivify_1008:
    push $P2271, $P104
.annotate 'line', 1806
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Result"]
.sub "add-option" :anon :subid("148_1337966785.387") :outer("313_1337966785.387")
    .param pmc param_2273
    .param pmc param_2274
    .param pmc param_2275
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1810
    .lex "self", param_2273
    .lex "$name", param_2274
    .lex "$value", param_2275
.annotate 'line', 1813
    set $P105, param_2274
    unless_null $P105, vivify_1009
    new $P105, "Undef"
  vivify_1009:
    set $P102, param_2273
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 136
    repr_get_attr_obj $P2277, $P103, $P104, "%!options", 1
    unless_null $P2277, vivify_1010
    $P2277 = root_new ['parrot';'Hash']
  vivify_1010:
    exists $I100, $P2277[$P105]
    if $I100, if_2276
.annotate 'line', 1820
    set $P107, param_2275
    unless_null $P107, vivify_1011
    new $P107, "Undef"
  vivify_1011:
    set $P108, param_2274
    unless_null $P108, vivify_1012
    new $P108, "Undef"
  vivify_1012:
    set $P109, param_2273
    nqp_decontainerize $P110, $P109
    nqp_get_sc_object $P111, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 136
    repr_get_attr_obj $P2283, $P110, $P111, "%!options", 1
    unless_null $P2283, vivify_1013
    $P2283 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P110, $P111, "%!options", 1, $P2283
  vivify_1013:
    set $P2283[$P108], $P107
.annotate 'line', 1819
    set $P101, $P107
.annotate 'line', 1813
    goto if_2276_end
  if_2276:
.annotate 'line', 1814
    set $P107, param_2274
    unless_null $P107, vivify_1014
    new $P107, "Undef"
  vivify_1014:
    set $P108, param_2273
    nqp_decontainerize $P109, $P108
    nqp_get_sc_object $P110, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 136
    repr_get_attr_obj $P2279, $P109, $P110, "%!options", 1
    unless_null $P2279, vivify_1015
    $P2279 = root_new ['parrot';'Hash']
  vivify_1015:
    set $P111, $P2279[$P107]
    unless_null $P111, vivify_1016
    new $P111, "Undef"
  vivify_1016:
    does $I101, $P111, "array"
    if $I101, if_2278
.annotate 'line', 1817
    set $P112, param_2274
    unless_null $P112, vivify_1017
    new $P112, "Undef"
  vivify_1017:
    set $P113, param_2273
    nqp_decontainerize $P114, $P113
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 136
    repr_get_attr_obj $P2281, $P114, $P115, "%!options", 1
    unless_null $P2281, vivify_1018
    $P2281 = root_new ['parrot';'Hash']
  vivify_1018:
    set $P117, $P2281[$P112]
    unless_null $P117, vivify_1019
    new $P117, "Undef"
  vivify_1019:
    set $P118, param_2275
    unless_null $P118, vivify_1020
    new $P118, "Undef"
  vivify_1020:
    new $P119, "ResizablePMCArray"
    push $P119, $P117
    push $P119, $P118
    set $P120, param_2274
    unless_null $P120, vivify_1021
    new $P120, "Undef"
  vivify_1021:
    set $P121, param_2273
    nqp_decontainerize $P122, $P121
    nqp_get_sc_object $P123, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 136
    repr_get_attr_obj $P2282, $P122, $P123, "%!options", 1
    unless_null $P2282, vivify_1022
    $P2282 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P122, $P123, "%!options", 1, $P2282
  vivify_1022:
    set $P2282[$P120], $P119
.annotate 'line', 1816
    set $P106, $P119
.annotate 'line', 1814
    goto if_2278_end
  if_2278:
.annotate 'line', 1815
    set $P112, param_2274
    unless_null $P112, vivify_1023
    new $P112, "Undef"
  vivify_1023:
    set $P113, param_2273
    nqp_decontainerize $P114, $P113
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 136
    repr_get_attr_obj $P2280, $P114, $P115, "%!options", 1
    unless_null $P2280, vivify_1024
    $P2280 = root_new ['parrot';'Hash']
  vivify_1024:
    set $P116, $P2280[$P112]
    unless_null $P116, vivify_1025
    new $P116, "Undef"
  vivify_1025:
    set $P117, param_2275
    unless_null $P117, vivify_1026
    new $P117, "Undef"
  vivify_1026:
    push $P116, $P117
.annotate 'line', 1814
    set $P106, $P116
  if_2278_end:
.annotate 'line', 1813
    set $P101, $P106
  if_2276_end:
.annotate 'line', 1810
    .return ($P101)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "_block2285"  :subid("314_1337966785.387") :outer("179_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1825
    .const 'Sub' $P2346 = "158_1337966785.387" 
    capture_lex $P2346
    .const 'Sub' $P2341 = "157_1337966785.387" 
    capture_lex $P2341
    .const 'Sub' $P2336 = "156_1337966785.387" 
    capture_lex $P2336
    .const 'Sub' $P2328 = "155_1337966785.387" 
    capture_lex $P2328
    .const 'Sub' $P2313 = "154_1337966785.387" 
    capture_lex $P2313
    .const 'Sub' $P2310 = "153_1337966785.387" 
    capture_lex $P2310
    .const 'Sub' $P2306 = "152_1337966785.387" 
    capture_lex $P2306
    .const 'Sub' $P2296 = "151_1337966785.387" 
    capture_lex $P2296
    .const 'Sub' $P2294 = "150_1337966785.387" 
    capture_lex $P2294
    .const 'Sub' $P2289 = "149_1337966785.387" 
    capture_lex $P2289
    .lex "$?PACKAGE", $P2287
    .lex "$?CLASS", $P2288
.annotate 'line', 1890
    .const 'Sub' $P2346 = "158_1337966785.387" 
    newclosure $P2424, $P2346
.annotate 'line', 1825
    .return ($P2424)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "new" :anon :subid("149_1337966785.387") :outer("314_1337966785.387")
    .param pmc param_2290
    .param pmc param_2291
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1831
    .lex "self", param_2290
    .lex "@specs", param_2291
.annotate 'line', 1832
    new $P101, "Undef"
    set $P2292, $P101
    .lex "$obj", $P2292
    set $P102, param_2290
    nqp_decontainerize $P103, $P102
    $P104 = $P103."CREATE"()
    set $P2292, $P104
.annotate 'line', 1833
    set $P102, $P2292
    unless_null $P102, vivify_1027
    new $P102, "Undef"
  vivify_1027:
    set $P2293, param_2291
    unless_null $P2293, vivify_1028
    $P2293 = root_new ['parrot';'ResizablePMCArray']
  vivify_1028:
    $P102."BUILD"($P2293 :named("specs"))
.annotate 'line', 1831
    set $P102, $P2292
    unless_null $P102, vivify_1029
    new $P102, "Undef"
  vivify_1029:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "stop-after-first-arg" :anon :subid("150_1337966785.387") :outer("314_1337966785.387")
    .param pmc param_2295
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1837
    .lex "self", param_2295
.annotate 'line', 1838
    new $P101, "Float"
    assign $P101, 1
    set $P102, param_2295
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 142
    repr_bind_attr_obj $P103, $P104, "$!stop-after-first-arg", 3, $P101
.annotate 'line', 1837
    .return ($P101)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.include "except_types.pasm"
.sub "BUILD" :anon :subid("151_1337966785.387") :outer("314_1337966785.387")
    .param pmc param_2297
    .param pmc param_2298 :optional :named("specs")
    .param int has_param_2298 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1841
    .const 'Sub' $P2303 = "315_1337966785.387" 
    capture_lex $P2303
    .lex "self", param_2297
    if has_param_2298, optparam_1030
    $P2299 = root_new ['parrot';'ResizablePMCArray']
    set param_2298, $P2299
  optparam_1030:
    .lex "@specs", param_2298
.annotate 'line', 1842
    new $P101, "Float"
    assign $P101, 1
    set $P102, param_2297
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 142
    repr_get_attr_obj $P2300, $P103, $P104, "%!stopper", 2
    unless_null $P2300, vivify_1031
    $P2300 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P103, $P104, "%!stopper", 2, $P2300
  vivify_1031:
    set $P2300["--"], $P101
.annotate 'line', 1843
    new $P101, "Float"
    assign $P101, 0
    set $P102, param_2297
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 142
    repr_bind_attr_obj $P103, $P104, "$!stop-after-first-arg", 3, $P101
.annotate 'line', 1844
    set $P2301, param_2298
    unless_null $P2301, vivify_1032
    $P2301 = root_new ['parrot';'ResizablePMCArray']
  vivify_1032:
    defined $I100, $P2301
    unless $I100, for_undef_1033
    iter $P101, $P2301
    new $P103, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P103, loop2305_handler
    push_eh $P103
  loop2305_test:
    unless $P101, loop2305_done
    shift $P102, $P101
  loop2305_redo:
    .const 'Sub' $P2303 = "315_1337966785.387" 
    capture_lex $P2303
    $P2303($P102)
  loop2305_next:
    goto loop2305_test
  loop2305_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P104, exception, 'type'
    eq $P104, .CONTROL_LOOP_NEXT, loop2305_next
    eq $P104, .CONTROL_LOOP_REDO, loop2305_redo
  loop2305_done:
    pop_eh 
  for_undef_1033:
.annotate 'line', 1841
    .return ($P101)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "_block2302"  :anon :subid("315_1337966785.387") :outer("151_1337966785.387")
    .param pmc param_2304
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1844
    .lex "$_", param_2304
.annotate 'line', 1845
    find_lex $P103, "self"
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$_"
    unless_null $P105, vivify_1034
    new $P105, "Undef"
  vivify_1034:
    $P106 = $P104."add-spec"($P105)
.annotate 'line', 1844
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "add-stopper" :anon :subid("152_1337966785.387") :outer("314_1337966785.387")
    .param pmc param_2307
    .param pmc param_2308
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1848
    .lex "self", param_2307
    .lex "$x", param_2308
.annotate 'line', 1849
    new $P101, "Float"
    assign $P101, 1
    set $P102, param_2308
    unless_null $P102, vivify_1035
    new $P102, "Undef"
  vivify_1035:
    set $P103, param_2307
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 142
    repr_get_attr_obj $P2309, $P104, $P105, "%!stopper", 2
    unless_null $P2309, vivify_1036
    $P2309 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P104, $P105, "%!stopper", 2, $P2309
  vivify_1036:
    set $P2309[$P102], $P101
.annotate 'line', 1848
    .return ($P101)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "split-option-aliases" :anon :subid("153_1337966785.387") :outer("314_1337966785.387")
    .param pmc param_2311
    .param pmc param_2312
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1852
    .lex "self", param_2311
    .lex "$s", param_2312
.annotate 'line', 1853
    set $P101, param_2312
    unless_null $P101, vivify_1037
    new $P101, "Undef"
  vivify_1037:
    set $S100, $P101
    split $P102, "|", $S100
.annotate 'line', 1852
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.include "except_types.pasm"
.sub "add-spec" :anon :subid("154_1337966785.387") :outer("314_1337966785.387")
    .param pmc param_2314
    .param pmc param_2315
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1857
    .const 'Sub' $P2324 = "316_1337966785.387" 
    capture_lex $P2324
    .lex "self", param_2314
    .lex "$s", param_2315
.annotate 'line', 1858
    new $P101, "Undef"
    set $P2316, $P101
    .lex "$i", $P2316
.annotate 'line', 1859
    new $P102, "Undef"
    set $P2317, $P102
    .lex "$type", $P2317
.annotate 'line', 1860
    $P2319 = root_new ['parrot';'ResizablePMCArray']
    set $P2318, $P2319
    .lex "@options", $P2318
.annotate 'line', 1858
    set $P103, param_2315
    unless_null $P103, vivify_1038
    new $P103, "Undef"
  vivify_1038:
    set $S100, $P103
    index $I100, $S100, "="
    new $P104, 'Integer'
    set $P104, $I100
    set $P2316, $P104
.annotate 'line', 1857
    set $P103, $P2317
    unless_null $P103, vivify_1039
    new $P103, "Undef"
  vivify_1039:
    set $P2320, $P2318
    unless_null $P2320, vivify_1040
    $P2320 = root_new ['parrot';'ResizablePMCArray']
  vivify_1040:
.annotate 'line', 1861
    set $P103, $P2316
    unless_null $P103, vivify_1041
    new $P103, "Undef"
  vivify_1041:
    set $N100, $P103
    set $N101, 0
    islt $I100, $N100, $N101
    if $I100, if_2321
.annotate 'line', 1865
    set $P104, param_2315
    unless_null $P104, vivify_1042
    new $P104, "Undef"
  vivify_1042:
    set $S100, $P104
    set $P105, $P2316
    unless_null $P105, vivify_1043
    new $P105, "Undef"
  vivify_1043:
    add $P106, $P105, 1
    set $I101, $P106
    substr $S101, $S100, $I101
    new $P107, 'String'
    set $P107, $S101
    set $P2317, $P107
.annotate 'line', 1866
    set $P104, param_2314
    nqp_decontainerize $P105, $P104
    set $P106, param_2315
    unless_null $P106, vivify_1044
    new $P106, "Undef"
  vivify_1044:
    set $S100, $P106
    set $P107, $P2316
    unless_null $P107, vivify_1045
    new $P107, "Undef"
  vivify_1045:
    set $I101, $P107
    substr $S101, $S100, 0, $I101
    $P108 = $P105."split-option-aliases"($S101)
    set $P2318, $P108
.annotate 'line', 1864
    goto if_2321_end
  if_2321:
.annotate 'line', 1862
    new $P104, "String"
    assign $P104, "b"
    set $P2317, $P104
.annotate 'line', 1863
    set $P104, param_2314
    nqp_decontainerize $P105, $P104
    set $P106, param_2315
    unless_null $P106, vivify_1046
    new $P106, "Undef"
  vivify_1046:
    $P107 = $P105."split-option-aliases"($P106)
    set $P2318, $P107
  if_2321_end:
.annotate 'line', 1868
    set $P2322, $P2318
    unless_null $P2322, vivify_1047
    $P2322 = root_new ['parrot';'ResizablePMCArray']
  vivify_1047:
    defined $I100, $P2322
    unless $I100, for_undef_1048
    iter $P103, $P2322
    new $P106, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P106, loop2327_handler
    push_eh $P106
  loop2327_test:
    unless $P103, loop2327_done
    shift $P104, $P103
  loop2327_redo:
    .const 'Sub' $P2324 = "316_1337966785.387" 
    capture_lex $P2324
    $P2324($P104)
  loop2327_next:
    goto loop2327_test
  loop2327_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P107, exception, 'type'
    eq $P107, .CONTROL_LOOP_NEXT, loop2327_next
    eq $P107, .CONTROL_LOOP_REDO, loop2327_redo
  loop2327_done:
    pop_eh 
  for_undef_1048:
.annotate 'line', 1857
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "_block2323"  :anon :subid("316_1337966785.387") :outer("154_1337966785.387")
    .param pmc param_2325
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1868
    .lex "$_", param_2325
.annotate 'line', 1869
    find_lex $P105, "$type"
    unless_null $P105, vivify_1049
    new $P105, "Undef"
  vivify_1049:
    find_lex $P106, "$_"
    unless_null $P106, vivify_1050
    new $P106, "Undef"
  vivify_1050:
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 142
    repr_get_attr_obj $P2326, $P108, $P109, "%!options", 1
    unless_null $P2326, vivify_1051
    $P2326 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P108, $P109, "%!options", 1, $P2326
  vivify_1051:
    set $P2326[$P106], $P105
.annotate 'line', 1868
    .return ($P105)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.include "except_types.pasm"
.sub "is-option" :anon :subid("155_1337966785.387") :outer("314_1337966785.387")
    .param pmc param_2331
    .param pmc param_2332
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1874
    new $P2330, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2330, control_2329
    push_eh $P2330
    .lex "self", param_2331
    .lex "$x", param_2332
.annotate 'line', 1875
    set $P102, param_2332
    unless_null $P102, vivify_1052
    new $P102, "Undef"
  vivify_1052:
    set $S100, $P102
    iseq $I100, $S100, "-"
    unless $I100, unless_2334
    new $P101, 'Integer'
    set $P101, $I100
    goto unless_2334_end
  unless_2334:
    set $P103, param_2332
    unless_null $P103, vivify_1053
    new $P103, "Undef"
  vivify_1053:
    set $S101, $P103
    iseq $I101, $S101, "--"
    new $P101, 'Integer'
    set $P101, $I101
  unless_2334_end:
    unless $P101, if_2333_end
    new $P104, "Exception"
    set $P104['type'], .CONTROL_RETURN
    new $P105, "Float"
    assign $P105, 0
    setattribute $P104, 'payload', $P105
    throw $P104
  if_2333_end:
.annotate 'line', 1876
    set $P101, param_2332
    unless_null $P101, vivify_1054
    new $P101, "Undef"
  vivify_1054:
    set $S100, $P101
    substr $S101, $S100, 0, 1
    iseq $I100, $S101, "-"
    unless $I100, if_2335_end
    new $P102, "Exception"
    set $P102['type'], .CONTROL_RETURN
    new $P103, "Float"
    assign $P103, 1
    setattribute $P102, 'payload', $P103
    throw $P102
  if_2335_end:
.annotate 'line', 1874
    .return (0)
  control_2329:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P101, exception, "payload"
    .return ($P101)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "wants-value" :anon :subid("156_1337966785.387") :outer("314_1337966785.387")
    .param pmc param_2337
    .param pmc param_2338
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1880
    .lex "self", param_2337
    .lex "$x", param_2338
.annotate 'line', 1881
    new $P101, "Undef"
    set $P2339, $P101
    .lex "$spec", $P2339
    set $P102, param_2338
    unless_null $P102, vivify_1055
    new $P102, "Undef"
  vivify_1055:
    set $P103, param_2337
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 142
    repr_get_attr_obj $P2340, $P104, $P105, "%!options", 1
    unless_null $P2340, vivify_1056
    $P2340 = root_new ['parrot';'Hash']
  vivify_1056:
    set $P106, $P2340[$P102]
    unless_null $P106, vivify_1057
    new $P106, "Undef"
  vivify_1057:
    set $P2339, $P106
.annotate 'line', 1882
    set $P102, $P2339
    unless_null $P102, vivify_1058
    new $P102, "Undef"
  vivify_1058:
    set $S100, $P102
    substr $S101, $S100, 0, 1
    iseq $I100, $S101, "s"
.annotate 'line', 1880
    .return ($I100)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "optional-value" :anon :subid("157_1337966785.387") :outer("314_1337966785.387")
    .param pmc param_2342
    .param pmc param_2343
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1885
    .lex "self", param_2342
    .lex "$x", param_2343
.annotate 'line', 1886
    new $P101, "Undef"
    set $P2344, $P101
    .lex "$spec", $P2344
    set $P102, param_2343
    unless_null $P102, vivify_1059
    new $P102, "Undef"
  vivify_1059:
    set $P103, param_2342
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 142
    repr_get_attr_obj $P2345, $P104, $P105, "%!options", 1
    unless_null $P2345, vivify_1060
    $P2345 = root_new ['parrot';'Hash']
  vivify_1060:
    set $P106, $P2345[$P102]
    unless_null $P106, vivify_1061
    new $P106, "Undef"
  vivify_1061:
    set $P2344, $P106
.annotate 'line', 1887
    set $P102, $P2344
    unless_null $P102, vivify_1062
    new $P102, "Undef"
  vivify_1062:
    set $S100, $P102
    iseq $I100, $S100, "s?"
.annotate 'line', 1885
    .return ($I100)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.include "except_types.pasm"
.sub "parse" :anon :subid("158_1337966785.387") :outer("314_1337966785.387")
    .param pmc param_2349
    .param pmc param_2350
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1890
    .const 'Sub' $P2375 = "319_1337966785.387" 
    capture_lex $P2375
    .const 'Sub' $P2367 = "318_1337966785.387" 
    capture_lex $P2367
    .const 'Sub' $P2355 = "317_1337966785.387" 
    capture_lex $P2355
    new $P2348, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2348, control_2347
    push_eh $P2348
    .lex "self", param_2349
    .lex "@args", param_2350
.annotate 'line', 1891
    new $P101, "Undef"
    set $P2351, $P101
    .lex "$i", $P2351
.annotate 'line', 1892
    new $P102, "Undef"
    set $P2352, $P102
    .lex "$arg-count", $P2352
.annotate 'line', 1894
    new $P103, "Undef"
    set $P2353, $P103
    .lex "$result", $P2353
.annotate 'line', 1898
    .const 'Sub' $P2355 = "317_1337966785.387" 
    newclosure $P2365, $P2355
    set $P2354, $P2365
    .lex "get-value", $P2354
.annotate 'line', 1913
    .const 'Sub' $P2367 = "318_1337966785.387" 
    newclosure $P2372, $P2367
    set $P2366, $P2372
    .lex "slurp-rest", $P2366
.annotate 'line', 1891
    new $P105, "Float"
    assign $P105, 0
    set $P2351, $P105
.annotate 'line', 1892
    set $P2373, param_2350
    unless_null $P2373, vivify_1088
    $P2373 = root_new ['parrot';'ResizablePMCArray']
  vivify_1088:
    set $N100, $P2373
    new $P105, 'Float'
    set $P105, $N100
    set $P2352, $P105
.annotate 'line', 1894
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "HLL"
    nqp_get_package_through_who $P107, $P106, "CommandLine"
    get_who $P108, $P107
    set $P109, $P108["Result"]
    $P110 = $P109."new"()
    set $P2353, $P110
.annotate 'line', 1895
    set $P105, $P2353
    unless_null $P105, vivify_1089
    new $P105, "Undef"
  vivify_1089:
    $P105."init"()
.annotate 'line', 1890
    set $P105, $P2354
    set $P105, $P2366
.annotate 'line', 1921
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop2423_handler
    push_eh $P108
  loop2423_test:
    set $P105, $P2351
    unless_null $P105, vivify_1090
    new $P105, "Undef"
  vivify_1090:
    set $N100, $P105
    set $P106, $P2352
    unless_null $P106, vivify_1091
    new $P106, "Undef"
  vivify_1091:
    set $N101, $P106
    islt $I101, $N100, $N101
    unless $I101, loop2423_done
  loop2423_redo:
    .const 'Sub' $P2375 = "319_1337966785.387" 
    capture_lex $P2375
    $P2375()
  loop2423_next:
    goto loop2423_test
  loop2423_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop2423_next
    eq $P109, .CONTROL_LOOP_REDO, loop2423_redo
  loop2423_done:
    pop_eh 
.annotate 'line', 1990
    new $P105, "Exception"
    set $P105['type'], .CONTROL_RETURN
    set $P106, $P2353
    unless_null $P106, vivify_1166
    new $P106, "Undef"
  vivify_1166:
    setattribute $P105, 'payload', $P106
    throw $P105
.annotate 'line', 1890
    .return ()
  control_2347:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P105, exception, "payload"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "get-value"  :subid("317_1337966785.387") :outer("158_1337966785.387")
    .param pmc param_2356
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1898
    .lex "$opt", param_2356
.annotate 'line', 1899
    find_lex $P105, "$i"
    unless_null $P105, vivify_1063
    new $P105, "Undef"
  vivify_1063:
    set $N100, $P105
    find_lex $P106, "$arg-count"
    unless_null $P106, vivify_1064
    new $P106, "Undef"
  vivify_1064:
    sub $P107, $P106, 1
    set $N101, $P107
    iseq $I100, $N100, $N101
    if $I100, if_2357
.annotate 'line', 1901
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$i"
    unless_null $P111, vivify_1065
    new $P111, "Undef"
  vivify_1065:
    add $P112, $P111, 1
    set $I101, $P112
    find_lex $P2359, "@args"
    unless_null $P2359, vivify_1066
    $P2359 = root_new ['parrot';'ResizablePMCArray']
  vivify_1066:
    set $P113, $P2359[$I101]
    unless_null $P113, vivify_1067
    new $P113, "Undef"
  vivify_1067:
    $P114 = $P110."is-option"($P113)
    if $P114, if_2358
.annotate 'line', 1903
    find_lex $P116, "$i"
    unless_null $P116, vivify_1068
    new $P116, "Undef"
  vivify_1068:
    add $P117, $P116, 1
    set $I102, $P117
    find_lex $P2361, "@args"
    unless_null $P2361, vivify_1069
    $P2361 = root_new ['parrot';'ResizablePMCArray']
  vivify_1069:
    set $P118, $P2361[$I102]
    unless_null $P118, vivify_1070
    new $P118, "Undef"
  vivify_1070:
    find_lex $P119, "self"
    nqp_decontainerize $P120, $P119
    nqp_get_sc_object $P121, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 142
    repr_get_attr_obj $P2362, $P120, $P121, "%!stopper", 2
    unless_null $P2362, vivify_1071
    $P2362 = root_new ['parrot';'Hash']
  vivify_1071:
    set $P122, $P2362[$P118]
    unless_null $P122, vivify_1072
    new $P122, "Undef"
  vivify_1072:
    if $P122, if_2360
.annotate 'line', 1905
    find_lex $P123, "$i"
    unless_null $P123, vivify_1073
    new $P123, "Undef"
  vivify_1073:
    clone $P2363, $P123
    inc $P123
    find_lex $P123, "$i"
    unless_null $P123, vivify_1074
    new $P123, "Undef"
  vivify_1074:
    set $I103, $P123
    find_lex $P2364, "@args"
    unless_null $P2364, vivify_1075
    $P2364 = root_new ['parrot';'ResizablePMCArray']
  vivify_1075:
    set $P124, $P2364[$I103]
    unless_null $P124, vivify_1076
    new $P124, "Undef"
  vivify_1076:
    set $P115, $P124
.annotate 'line', 1903
    goto if_2360_end
  if_2360:
.annotate 'line', 1904
    new $P123, 'String'
    set $P123, "Option "
    set $P124, param_2356
    unless_null $P124, vivify_1077
    new $P124, "Undef"
  vivify_1077:
    concat $P125, $P123, $P124
    concat $P126, $P125, " needs a value, but is followed by a stopper"
    die $P126
  if_2360_end:
.annotate 'line', 1903
    set $P108, $P115
.annotate 'line', 1901
    goto if_2358_end
  if_2358:
.annotate 'line', 1902
    new $P115, 'String'
    set $P115, "Option "
    set $P116, param_2356
    unless_null $P116, vivify_1078
    new $P116, "Undef"
  vivify_1078:
    concat $P117, $P115, $P116
    concat $P118, $P117, " needs a value, but is followed by an option"
    die $P118
  if_2358_end:
.annotate 'line', 1901
    set $P104, $P108
.annotate 'line', 1899
    goto if_2357_end
  if_2357:
.annotate 'line', 1900
    new $P108, 'String'
    set $P108, "Option "
    set $P109, param_2356
    unless_null $P109, vivify_1079
    new $P109, "Undef"
  vivify_1079:
    concat $P110, $P108, $P109
    concat $P111, $P110, " needs a value"
    die $P111
  if_2357_end:
.annotate 'line', 1898
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.include "except_types.pasm"
.sub "slurp-rest"  :subid("318_1337966785.387") :outer("158_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1913
    find_lex $P105, "$i"
    unless_null $P105, vivify_1080
    new $P105, "Undef"
  vivify_1080:
    clone $P2368, $P105
    inc $P105
.annotate 'line', 1915
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop2371_handler
    push_eh $P107
  loop2371_test:
    find_lex $P105, "$i"
    unless_null $P105, vivify_1081
    new $P105, "Undef"
  vivify_1081:
    set $N100, $P105
    find_lex $P106, "$arg-count"
    unless_null $P106, vivify_1082
    new $P106, "Undef"
  vivify_1082:
    set $N101, $P106
    islt $I100, $N100, $N101
    unless $I100, loop2371_done
  loop2371_redo:
.annotate 'line', 1916
    find_lex $P107, "$result"
    unless_null $P107, vivify_1083
    new $P107, "Undef"
  vivify_1083:
    find_lex $P108, "$i"
    unless_null $P108, vivify_1084
    new $P108, "Undef"
  vivify_1084:
    set $I101, $P108
    find_lex $P2369, "@args"
    unless_null $P2369, vivify_1085
    $P2369 = root_new ['parrot';'ResizablePMCArray']
  vivify_1085:
    set $P109, $P2369[$I101]
    unless_null $P109, vivify_1086
    new $P109, "Undef"
  vivify_1086:
    $P107."add-argument"($P109)
.annotate 'line', 1915
    find_lex $P107, "$i"
    unless_null $P107, vivify_1087
    new $P107, "Undef"
  vivify_1087:
    clone $P2370, $P107
    inc $P107
  loop2371_next:
    goto loop2371_test
  loop2371_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop2371_next
    eq $P108, .CONTROL_LOOP_REDO, loop2371_redo
  loop2371_done:
    pop_eh 
.annotate 'line', 1913
    .return ($I100)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "_block2374"  :anon :subid("319_1337966785.387") :outer("158_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1921
    .const 'Sub' $P2398 = "321_1337966785.387" 
    capture_lex $P2398
    .const 'Sub' $P2381 = "320_1337966785.387" 
    capture_lex $P2381
.annotate 'line', 1922
    new $P107, "Undef"
    set $P2376, $P107
    .lex "$cur", $P2376
    find_lex $P108, "$i"
    unless_null $P108, vivify_1092
    new $P108, "Undef"
  vivify_1092:
    set $I102, $P108
    find_lex $P2377, "@args"
    unless_null $P2377, vivify_1093
    $P2377 = root_new ['parrot';'ResizablePMCArray']
  vivify_1093:
    set $P109, $P2377[$I102]
    unless_null $P109, vivify_1094
    new $P109, "Undef"
  vivify_1094:
    set $P2376, $P109
.annotate 'line', 1923
    find_lex $P108, "self"
    nqp_decontainerize $P109, $P108
    set $P110, $P2376
    unless_null $P110, vivify_1095
    new $P110, "Undef"
  vivify_1095:
    $P111 = $P109."is-option"($P110)
    if $P111, if_2378
.annotate 'line', 1982
    set $P112, $P2376
    unless_null $P112, vivify_1096
    new $P112, "Undef"
  vivify_1096:
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    nqp_get_sc_object $P115, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 142
    repr_get_attr_obj $P2420, $P114, $P115, "%!stopper", 2
    unless_null $P2420, vivify_1097
    $P2420 = root_new ['parrot';'Hash']
  vivify_1097:
    set $P116, $P2420[$P112]
    unless_null $P116, vivify_1098
    new $P116, "Undef"
  vivify_1098:
    if $P116, if_2419
.annotate 'line', 1985
    find_lex $P117, "$result"
    unless_null $P117, vivify_1099
    new $P117, "Undef"
  vivify_1099:
    set $P118, $P2376
    unless_null $P118, vivify_1100
    new $P118, "Undef"
  vivify_1100:
    $P117."add-argument"($P118)
.annotate 'line', 1986
    find_lex $P117, "self"
    nqp_decontainerize $P118, $P117
    nqp_get_sc_object $P119, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 142
    repr_get_attr_obj $P120, $P118, $P119, "$!stop-after-first-arg", 3
    unless_null $P120, vivify_1101
    new $P120, "Undef"
  vivify_1101:
    unless $P120, if_2421_end
    "slurp-rest"()
  if_2421_end:
.annotate 'line', 1984
    goto if_2419_end
  if_2419:
.annotate 'line', 1983
    "slurp-rest"()
  if_2419_end:
.annotate 'line', 1982
    goto if_2378_end
  if_2378:
.annotate 'line', 1924
    set $P112, $P2376
    unless_null $P112, vivify_1102
    new $P112, "Undef"
  vivify_1102:
    set $S100, $P112
    substr $S101, $S100, 0, 2
    iseq $I102, $S101, "--"
    if $I102, if_2379
.annotate 'line', 1946
    .const 'Sub' $P2398 = "321_1337966785.387" 
    capture_lex $P2398
    $P2398()
    goto if_2379_end
  if_2379:
.annotate 'line', 1924
    .const 'Sub' $P2381 = "320_1337966785.387" 
    capture_lex $P2381
    $P2381()
  if_2379_end:
  if_2378_end:
.annotate 'line', 1921
    find_lex $P108, "$i"
    unless_null $P108, vivify_1165
    new $P108, "Undef"
  vivify_1165:
    clone $P2422, $P108
    inc $P108
    .return ($P2422)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "_block2397"  :anon :subid("321_1337966785.387") :outer("319_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1946
    .const 'Sub' $P2408 = "322_1337966785.387" 
    capture_lex $P2408
.annotate 'line', 1947
    new $P118, "Undef"
    set $P2399, $P118
    .lex "$opt", $P2399
.annotate 'line', 1948
    new $P119, "Undef"
    set $P2400, $P119
    .lex "$len", $P2400
.annotate 'line', 1947
    find_lex $P120, "$cur"
    unless_null $P120, vivify_1103
    new $P120, "Undef"
  vivify_1103:
    set $S102, $P120
    substr $S103, $S102, 1
    new $P121, 'String'
    set $P121, $S103
    set $P2399, $P121
.annotate 'line', 1948
    set $P120, $P2399
    unless_null $P120, vivify_1104
    new $P120, "Undef"
  vivify_1104:
    set $S102, $P120
    length $I103, $S102
    new $P121, 'Integer'
    set $P121, $I103
    set $P2400, $P121
.annotate 'line', 1949
    set $P121, $P2400
    unless_null $P121, vivify_1105
    new $P121, "Undef"
  vivify_1105:
    set $N102, $P121
    set $N103, 1
    iseq $I103, $N102, $N103
    if $I103, if_2401
.annotate 'line', 1959
    .const 'Sub' $P2408 = "322_1337966785.387" 
    capture_lex $P2408
    $P124 = $P2408()
    set $P120, $P124
.annotate 'line', 1949
    goto if_2401_end
  if_2401:
.annotate 'line', 1951
    set $P122, $P2399
    unless_null $P122, vivify_1127
    new $P122, "Undef"
  vivify_1127:
    find_lex $P123, "self"
    nqp_decontainerize $P124, $P123
    nqp_get_sc_object $P125, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 142
    repr_get_attr_obj $P2403, $P124, $P125, "%!options", 1
    unless_null $P2403, vivify_1128
    $P2403 = root_new ['parrot';'Hash']
  vivify_1128:
    set $P126, $P2403[$P122]
    unless_null $P126, vivify_1129
    new $P126, "Undef"
  vivify_1129:
    if $P126, unless_2402_end
    new $P127, 'String'
    set $P127, "No such option -"
    set $P128, $P2399
    unless_null $P128, vivify_1130
    new $P128, "Undef"
  vivify_1130:
    concat $P129, $P127, $P128
    die $P129
  unless_2402_end:
.annotate 'line', 1952
    find_lex $P122, "self"
    nqp_decontainerize $P123, $P122
    set $P124, $P2399
    unless_null $P124, vivify_1131
    new $P124, "Undef"
  vivify_1131:
    $P125 = $P123."wants-value"($P124)
    if $P125, if_2404
.annotate 'line', 1956
    find_lex $P126, "$result"
    unless_null $P126, vivify_1132
    new $P126, "Undef"
  vivify_1132:
    set $P127, $P2399
    unless_null $P127, vivify_1133
    new $P127, "Undef"
  vivify_1133:
    $P126."add-option"($P127, 1)
.annotate 'line', 1955
    goto if_2404_end
  if_2404:
.annotate 'line', 1953
    find_lex $P126, "$result"
    unless_null $P126, vivify_1134
    new $P126, "Undef"
  vivify_1134:
    set $P127, $P2399
    unless_null $P127, vivify_1135
    new $P127, "Undef"
  vivify_1135:
.annotate 'line', 1954
    new $P128, 'String'
    set $P128, "-"
    set $P129, $P2399
    unless_null $P129, vivify_1136
    new $P129, "Undef"
  vivify_1136:
    concat $P130, $P128, $P129
    $P131 = "get-value"($P130)
    $P126."add-option"($P127, $P131)
  if_2404_end:
.annotate 'line', 1958
    new $P123, 'String'
    set $P123, "-"
    set $P124, $P2399
    unless_null $P124, vivify_1137
    new $P124, "Undef"
  vivify_1137:
    concat $P125, $P123, $P124
    find_lex $P126, "self"
    nqp_decontainerize $P127, $P126
    nqp_get_sc_object $P128, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 142
    repr_get_attr_obj $P2406, $P127, $P128, "%!stopper", 2
    unless_null $P2406, vivify_1138
    $P2406 = root_new ['parrot';'Hash']
  vivify_1138:
    set $P129, $P2406[$P125]
    unless_null $P129, vivify_1139
    new $P129, "Undef"
  vivify_1139:
    if $P129, if_2405
    set $P122, $P129
    goto if_2405_end
  if_2405:
    $P130 = "slurp-rest"()
    set $P122, $P130
  if_2405_end:
.annotate 'line', 1949
    set $P120, $P122
  if_2401_end:
.annotate 'line', 1946
    .return ($P120)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.include "except_types.pasm"
.sub "_block2407"  :anon :subid("322_1337966785.387") :outer("321_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1959
    .const 'Sub' $P2411 = "323_1337966785.387" 
    capture_lex $P2411
.annotate 'line', 1960
    new $P123, "Undef"
    set $P2409, $P123
    .lex "$i", $P2409
    new $P124, "Float"
    assign $P124, 0
    set $P2409, $P124
.annotate 'line', 1961
    new $P127, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P127, loop2418_handler
    push_eh $P127
  loop2418_test:
    set $P124, $P2409
    unless_null $P124, vivify_1106
    new $P124, "Undef"
  vivify_1106:
    set $N104, $P124
    find_lex $P125, "$len"
    unless_null $P125, vivify_1107
    new $P125, "Undef"
  vivify_1107:
    set $N105, $P125
    islt $I104, $N104, $N105
    unless $I104, loop2418_done
  loop2418_redo:
    .const 'Sub' $P2411 = "323_1337966785.387" 
    capture_lex $P2411
    $P2411()
  loop2418_next:
    goto loop2418_test
  loop2418_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P128, exception, 'type'
    eq $P128, .CONTROL_LOOP_NEXT, loop2418_next
    eq $P128, .CONTROL_LOOP_REDO, loop2418_redo
  loop2418_done:
    pop_eh 
.annotate 'line', 1959
    .return ($I104)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "_block2410"  :anon :subid("323_1337966785.387") :outer("322_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1962
    new $P126, "Undef"
    set $P2412, $P126
    .lex "$o", $P2412
    find_lex $P127, "$opt"
    unless_null $P127, vivify_1108
    new $P127, "Undef"
  vivify_1108:
    set $S102, $P127
    find_lex $P128, "$i"
    unless_null $P128, vivify_1109
    new $P128, "Undef"
  vivify_1109:
    set $I105, $P128
    substr $S103, $S102, $I105, 1
    new $P129, 'String'
    set $P129, $S103
    set $P2412, $P129
.annotate 'line', 1963
    set $P127, $P2412
    unless_null $P127, vivify_1110
    new $P127, "Undef"
  vivify_1110:
    find_lex $P128, "self"
    nqp_decontainerize $P129, $P128
    nqp_get_sc_object $P130, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 142
    repr_get_attr_obj $P2414, $P129, $P130, "%!options", 1
    unless_null $P2414, vivify_1111
    $P2414 = root_new ['parrot';'Hash']
  vivify_1111:
    set $P131, $P2414[$P127]
    unless_null $P131, vivify_1112
    new $P131, "Undef"
  vivify_1112:
    if $P131, if_2413
.annotate 'line', 1976
    new $P132, 'String'
    set $P132, "Grouped options '-"
    find_lex $P133, "$opt"
    unless_null $P133, vivify_1113
    new $P133, "Undef"
  vivify_1113:
    concat $P134, $P132, $P133
    concat $P135, $P134, "' contain '"
    set $P136, $P2412
    unless_null $P136, vivify_1114
    new $P136, "Undef"
  vivify_1114:
    concat $P137, $P135, $P136
    concat $P138, $P137, "', which is not a valid option"
    die $P138
.annotate 'line', 1975
    goto if_2413_end
  if_2413:
.annotate 'line', 1964
    find_lex $P132, "self"
    nqp_decontainerize $P133, $P132
    set $P134, $P2412
    unless_null $P134, vivify_1115
    new $P134, "Undef"
  vivify_1115:
    $P135 = $P133."wants-value"($P134)
    if $P135, if_2415
.annotate 'line', 1972
    find_lex $P136, "$result"
    unless_null $P136, vivify_1116
    new $P136, "Undef"
  vivify_1116:
    set $P137, $P2412
    unless_null $P137, vivify_1117
    new $P137, "Undef"
  vivify_1117:
    $P136."add-option"($P137, 1)
.annotate 'line', 1971
    goto if_2415_end
  if_2415:
.annotate 'line', 1965
    find_lex $P136, "$i"
    unless_null $P136, vivify_1118
    new $P136, "Undef"
  vivify_1118:
    add $P137, $P136, 1
    set $N106, $P137
    find_lex $P138, "$len"
    unless_null $P138, vivify_1119
    new $P138, "Undef"
  vivify_1119:
    set $N107, $P138
    iseq $I105, $N106, $N107
    unless $I105, if_2416_end
.annotate 'line', 1966
    new $P139, 'String'
    set $P139, "Option '"
    set $P140, $P2412
    unless_null $P140, vivify_1120
    new $P140, "Undef"
  vivify_1120:
    concat $P141, $P139, $P140
    concat $P142, $P141, "' in grouped options '-"
    find_lex $P143, "$opt"
    unless_null $P143, vivify_1121
    new $P143, "Undef"
  vivify_1121:
    concat $P144, $P142, $P143
    concat $P145, $P144, "' needs a value, but does not have one"
    die $P145
  if_2416_end:
.annotate 'line', 1968
    find_lex $P136, "$result"
    unless_null $P136, vivify_1122
    new $P136, "Undef"
  vivify_1122:
    set $P137, $P2412
    unless_null $P137, vivify_1123
    new $P137, "Undef"
  vivify_1123:
    find_lex $P138, "$opt"
    unless_null $P138, vivify_1124
    new $P138, "Undef"
  vivify_1124:
    set $S102, $P138
    find_lex $P139, "$i"
    unless_null $P139, vivify_1125
    new $P139, "Undef"
  vivify_1125:
    add $P140, $P139, 1
    set $I105, $P140
    substr $S103, $S102, $I105
    $P136."add-option"($P137, $S103)
.annotate 'line', 1969
    die 0, .CONTROL_LOOP_LAST
  if_2415_end:
  if_2413_end:
.annotate 'line', 1961
    find_lex $P127, "$i"
    unless_null $P127, vivify_1126
    new $P127, "Undef"
  vivify_1126:
    clone $P2417, $P127
    inc $P127
    .return ($P2417)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "_block2380"  :anon :subid("320_1337966785.387") :outer("319_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1926
    new $P113, "Undef"
    set $P2382, $P113
    .lex "$opt", $P2382
.annotate 'line', 1927
    new $P114, "Undef"
    set $P2383, $P114
    .lex "$idx", $P2383
.annotate 'line', 1928
    new $P115, "Undef"
    set $P2384, $P115
    .lex "$value", $P2384
.annotate 'line', 1929
    new $P116, "Undef"
    set $P2385, $P116
    .lex "$has-value", $P2385
.annotate 'line', 1926
    find_lex $P117, "$i"
    unless_null $P117, vivify_1140
    new $P117, "Undef"
  vivify_1140:
    set $I103, $P117
    find_lex $P2386, "@args"
    unless_null $P2386, vivify_1141
    $P2386 = root_new ['parrot';'ResizablePMCArray']
  vivify_1141:
    set $P118, $P2386[$I103]
    unless_null $P118, vivify_1142
    new $P118, "Undef"
  vivify_1142:
    set $S102, $P118
    substr $S103, $S102, 2
    new $P119, 'String'
    set $P119, $S103
    set $P2382, $P119
.annotate 'line', 1927
    set $P117, $P2382
    unless_null $P117, vivify_1143
    new $P117, "Undef"
  vivify_1143:
    set $S102, $P117
    index $I103, $S102, "="
    new $P118, 'Integer'
    set $P118, $I103
    set $P2383, $P118
.annotate 'line', 1928
    new $P117, "Float"
    assign $P117, 1
    set $P2384, $P117
.annotate 'line', 1929
    new $P117, "Float"
    assign $P117, 0
    set $P2385, $P117
.annotate 'line', 1931
    set $P117, $P2383
    unless_null $P117, vivify_1144
    new $P117, "Undef"
  vivify_1144:
    set $N102, $P117
    set $N103, 0
    isge $I103, $N102, $N103
    if $I103, if_2387
.annotate 'line', 1935
    find_lex $P118, "self"
    nqp_decontainerize $P119, $P118
    set $P120, $P2382
    unless_null $P120, vivify_1145
    new $P120, "Undef"
  vivify_1145:
    $P121 = $P119."optional-value"($P120)
    unless $P121, if_2388_end
.annotate 'line', 1936
    new $P122, "String"
    assign $P122, ""
    set $P2384, $P122
.annotate 'line', 1937
    new $P122, "Float"
    assign $P122, 1
    set $P2385, $P122
  if_2388_end:
.annotate 'line', 1935
    goto if_2387_end
  if_2387:
.annotate 'line', 1932
    set $P118, $P2382
    unless_null $P118, vivify_1146
    new $P118, "Undef"
  vivify_1146:
    set $S102, $P118
    set $P119, $P2383
    unless_null $P119, vivify_1147
    new $P119, "Undef"
  vivify_1147:
    add $P120, $P119, 1
    set $I104, $P120
    substr $S103, $S102, $I104
    new $P121, 'String'
    set $P121, $S103
    set $P2384, $P121
.annotate 'line', 1933
    set $P118, $P2382
    unless_null $P118, vivify_1148
    new $P118, "Undef"
  vivify_1148:
    set $S102, $P118
    set $P119, $P2383
    unless_null $P119, vivify_1149
    new $P119, "Undef"
  vivify_1149:
    set $I104, $P119
    substr $S103, $S102, 0, $I104
    new $P120, 'String'
    set $P120, $S103
    set $P2382, $P120
.annotate 'line', 1934
    new $P118, "Float"
    assign $P118, 1
    set $P2385, $P118
  if_2387_end:
.annotate 'line', 1939
    set $P120, $P2382
    unless_null $P120, vivify_1150
    new $P120, "Undef"
  vivify_1150:
    find_lex $P117, "self"
    nqp_decontainerize $P118, $P117
    nqp_get_sc_object $P119, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 142
    repr_get_attr_obj $P2390, $P118, $P119, "%!options", 1
    unless_null $P2390, vivify_1151
    $P2390 = root_new ['parrot';'Hash']
  vivify_1151:
    exists $I103, $P2390[$P120]
    if $I103, unless_2389_end
    new $P121, 'String'
    set $P121, "Illegal option --"
    set $P122, $P2382
    unless_null $P122, vivify_1152
    new $P122, "Undef"
  vivify_1152:
    concat $P123, $P121, $P122
    die $P123
  unless_2389_end:
.annotate 'line', 1940
    find_lex $P118, "self"
    nqp_decontainerize $P119, $P118
    set $P120, $P2382
    unless_null $P120, vivify_1153
    new $P120, "Undef"
  vivify_1153:
    $P121 = $P119."wants-value"($P120)
    isfalse $I103, $P121
    if $I103, if_2392
    new $P117, 'Integer'
    set $P117, $I103
    goto if_2392_end
  if_2392:
    set $P122, $P2385
    unless_null $P122, vivify_1154
    new $P122, "Undef"
  vivify_1154:
    set $P117, $P122
  if_2392_end:
    unless $P117, if_2391_end
    new $P123, 'String'
    set $P123, "Option --"
    set $P124, $P2382
    unless_null $P124, vivify_1155
    new $P124, "Undef"
  vivify_1155:
    concat $P125, $P123, $P124
    concat $P126, $P125, " does not allow a value"
    die $P126
  if_2391_end:
.annotate 'line', 1941
    set $P118, $P2385
    unless_null $P118, vivify_1156
    new $P118, "Undef"
  vivify_1156:
    isfalse $I103, $P118
    if $I103, if_2394
    new $P117, 'Integer'
    set $P117, $I103
    goto if_2394_end
  if_2394:
    find_lex $P119, "self"
    nqp_decontainerize $P120, $P119
    set $P121, $P2382
    unless_null $P121, vivify_1157
    new $P121, "Undef"
  vivify_1157:
    $P122 = $P120."wants-value"($P121)
    set $P117, $P122
  if_2394_end:
    unless $P117, if_2393_end
.annotate 'line', 1942
    new $P123, 'String'
    set $P123, "--"
    set $P124, $P2382
    unless_null $P124, vivify_1158
    new $P124, "Undef"
  vivify_1158:
    concat $P125, $P123, $P124
    $P126 = "get-value"($P125)
    set $P2384, $P126
  if_2393_end:
.annotate 'line', 1944
    find_lex $P117, "$result"
    unless_null $P117, vivify_1159
    new $P117, "Undef"
  vivify_1159:
    set $P118, $P2382
    unless_null $P118, vivify_1160
    new $P118, "Undef"
  vivify_1160:
    set $P119, $P2384
    unless_null $P119, vivify_1161
    new $P119, "Undef"
  vivify_1161:
    $P117."add-option"($P118, $P119)
.annotate 'line', 1945
    new $P118, 'String'
    set $P118, "--"
    set $P119, $P2382
    unless_null $P119, vivify_1162
    new $P119, "Undef"
  vivify_1162:
    concat $P120, $P118, $P119
    find_lex $P121, "self"
    nqp_decontainerize $P122, $P121
    nqp_get_sc_object $P123, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 142
    repr_get_attr_obj $P2396, $P122, $P123, "%!stopper", 2
    unless_null $P2396, vivify_1163
    $P2396 = root_new ['parrot';'Hash']
  vivify_1163:
    set $P124, $P2396[$P120]
    unless_null $P124, vivify_1164
    new $P124, "Undef"
  vivify_1164:
    if $P124, if_2395
    set $P117, $P124
    goto if_2395_end
  if_2395:
    find_lex $P125, "slurp-rest"
    set $P117, $P125
  if_2395_end:
.annotate 'line', 1924
    .return ($P117)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "_block2425"  :subid("324_1337966785.387") :outer("179_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2016
    .const 'Sub' $P2525 = "178_1337966785.387" 
    capture_lex $P2525
    .const 'Sub' $P2522 = "177_1337966785.387" 
    capture_lex $P2522
    .const 'Sub' $P2519 = "176_1337966785.387" 
    capture_lex $P2519
    .const 'Sub' $P2517 = "175_1337966785.387" 
    capture_lex $P2517
    .const 'Sub' $P2515 = "174_1337966785.387" 
    capture_lex $P2515
    .const 'Sub' $P2503 = "173_1337966785.387" 
    capture_lex $P2503
    .const 'Sub' $P2494 = "172_1337966785.387" 
    capture_lex $P2494
    .const 'Sub' $P2485 = "171_1337966785.387" 
    capture_lex $P2485
    .const 'Sub' $P2483 = "170_1337966785.387" 
    capture_lex $P2483
    .const 'Sub' $P2479 = "169_1337966785.387" 
    capture_lex $P2479
    .const 'Sub' $P2474 = "168_1337966785.387" 
    capture_lex $P2474
    .const 'Sub' $P2468 = "167_1337966785.387" 
    capture_lex $P2468
    .const 'Sub' $P2464 = "166_1337966785.387" 
    capture_lex $P2464
    .const 'Sub' $P2461 = "165_1337966785.387" 
    capture_lex $P2461
    .const 'Sub' $P2455 = "164_1337966785.387" 
    capture_lex $P2455
    .const 'Sub' $P2452 = "163_1337966785.387" 
    capture_lex $P2452
    .const 'Sub' $P2445 = "162_1337966785.387" 
    capture_lex $P2445
    .const 'Sub' $P2439 = "161_1337966785.387" 
    capture_lex $P2439
    .const 'Sub' $P2434 = "160_1337966785.387" 
    capture_lex $P2434
    .const 'Sub' $P2429 = "159_1337966785.387" 
    capture_lex $P2429
    .lex "$?PACKAGE", $P2427
    .lex "$?CLASS", $P2428
.annotate 'line', 2220
    .const 'Sub' $P2525 = "178_1337966785.387" 
    newclosure $P2542, $P2525
.annotate 'line', 2016
    .return ($P2542)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "new" :anon :subid("159_1337966785.387") :outer("324_1337966785.387")
    .param pmc param_2430
    .param pmc param_2431 :named("handle")
    .param pmc param_2432 :optional :named("description")
    .param int has_param_2432 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2047
    .lex "self", param_2430
    .lex "$handle", param_2431
    if has_param_2432, optparam_1167
    new $P101, "String"
    assign $P101, "<unknown>"
    set param_2432, $P101
  optparam_1167:
    .lex "$description", param_2432
.annotate 'line', 2048
    new $P102, "Undef"
    set $P2433, $P102
    .lex "$obj", $P2433
    set $P103, param_2430
    nqp_decontainerize $P104, $P103
    $P105 = $P104."CREATE"()
    set $P2433, $P105
.annotate 'line', 2049
    set $P103, $P2433
    unless_null $P103, vivify_1168
    new $P103, "Undef"
  vivify_1168:
    set $P104, param_2431
    unless_null $P104, vivify_1169
    new $P104, "Undef"
  vivify_1169:
    set $P105, param_2432
    unless_null $P105, vivify_1170
    new $P105, "Undef"
  vivify_1170:
    $P103."BUILD"($P104 :named("handle"), $P105 :named("description"))
.annotate 'line', 2047
    set $P103, $P2433
    unless_null $P103, vivify_1171
    new $P103, "Undef"
  vivify_1171:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "BUILD" :anon :subid("160_1337966785.387") :outer("324_1337966785.387")
    .param pmc param_2435
    .param pmc param_2436 :named("handle")
    .param pmc param_2437 :named("description")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2053
    .lex "self", param_2435
    .lex "$handle", param_2436
    .lex "$description", param_2437
.annotate 'line', 2055
    set $P101, param_2436
    unless_null $P101, vivify_1172
    new $P101, "Undef"
  vivify_1172:
    set $S100, $P101
    nqp_create_sc $P102, $S100
    set $P103, param_2435
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_bind_attr_obj $P104, $P105, "$!sc", 0, $P102
.annotate 'line', 2056
    set $P101, param_2436
    unless_null $P101, vivify_1173
    new $P101, "Undef"
  vivify_1173:
    set $P102, param_2435
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_bind_attr_obj $P103, $P104, "$!handle", 1, $P101
.annotate 'line', 2057
    new $P101, "Hash"
    set $P102, param_2435
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_bind_attr_obj $P103, $P104, "%!addr_to_slot", 7, $P101
.annotate 'line', 2058
    new $P101, "ResizablePMCArray"
    set $P102, param_2435
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_bind_attr_obj $P103, $P104, "@!fixup_tasks", 6, $P101
.annotate 'line', 2059
    new $P101, "ResizablePMCArray"
    set $P102, param_2435
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_bind_attr_obj $P103, $P104, "@!load_dependency_tasks", 5, $P101
.annotate 'line', 2060
    find_dynamic_lex $P103, "%*COMPILING"
    unless_null $P103, vivify_1174
    get_hll_global $P101, "GLOBAL"
    get_who $P102, $P101
    set $P103, $P102["%COMPILING"]
    unless_null $P103, vivify_1175
    die "Contextual %*COMPILING not found"
  vivify_1175:
  vivify_1174:
    set $P2438, $P103["%?OPTIONS"]
    unless_null $P2438, vivify_1176
    $P2438 = root_new ['parrot';'Hash']
  vivify_1176:
    set $P104, $P2438["target"]
    unless_null $P104, vivify_1177
    new $P104, "Undef"
  vivify_1177:
    set $S100, $P104
    iseq $I100, $S100, "pir"
    new $P105, 'Integer'
    set $P105, $I100
    set $P106, param_2435
    nqp_decontainerize $P107, $P106
    nqp_get_sc_object $P108, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_bind_attr_obj $P107, $P108, "$!precomp_mode", 2, $P105
.annotate 'line', 2061
    new $P101, "Float"
    assign $P101, 0
    set $P102, param_2435
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_bind_attr_obj $P103, $P104, "$!num_code_refs", 3, $P101
.annotate 'line', 2062
    new $P101, "ResizablePMCArray"
    set $P102, param_2435
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_bind_attr_obj $P103, $P104, "$!code_ref_blocks", 4, $P101
.annotate 'line', 2063
    set $P101, param_2435
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P104, $P102, $P103, "$!sc", 0
    unless_null $P104, vivify_1178
    new $P104, "Undef"
  vivify_1178:
    set $P105, param_2437
    unless_null $P105, vivify_1179
    new $P105, "Undef"
  vivify_1179:
    $P104."set_description"($P105)
.annotate 'line', 2066
    set $P101, param_2435
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P104, $P102, $P103, "$!sc", 0
    unless_null $P104, vivify_1180
    new $P104, "Undef"
  vivify_1180:
    nqp_push_compiling_sc $P104
.annotate 'line', 2053
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "slot_for_object" :anon :subid("161_1337966785.387") :outer("324_1337966785.387")
    .param pmc param_2440
    .param pmc param_2441
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2070
    .lex "self", param_2440
    .lex "$obj", param_2441
.annotate 'line', 2071
    new $P101, "Undef"
    set $P2442, $P101
    .lex "$slot", $P2442
    set $P102, param_2441
    unless_null $P102, vivify_1181
    new $P102, "Undef"
  vivify_1181:
    get_id $I100, $P102
    set $P103, param_2440
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P2443, $P104, $P105, "%!addr_to_slot", 7
    unless_null $P2443, vivify_1182
    $P2443 = root_new ['parrot';'Hash']
  vivify_1182:
    set $P106, $P2443[$I100]
    unless_null $P106, vivify_1183
    new $P106, "Undef"
  vivify_1183:
    set $P2442, $P106
.annotate 'line', 2072
    set $P102, $P2442
    unless_null $P102, vivify_1184
    new $P102, "Undef"
  vivify_1184:
    defined $I100, $P102
    if $I100, unless_2444_end
.annotate 'line', 2073
    die "slot_for_object called on object not in context"
  unless_2444_end:
.annotate 'line', 2070
    set $P102, $P2442
    unless_null $P102, vivify_1185
    new $P102, "Undef"
  vivify_1185:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "get_slot_past_for_object" :anon :subid("162_1337966785.387") :outer("324_1337966785.387")
    .param pmc param_2446
    .param pmc param_2447
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2082
    .lex "self", param_2446
    .lex "$obj", param_2447
.annotate 'line', 2083
    new $P101, "Undef"
    set $P2448, $P101
    .lex "$slot", $P2448
.annotate 'line', 2084
    new $P102, "Undef"
    set $P2449, $P102
    .lex "$past", $P2449
.annotate 'line', 2083
    set $P103, param_2446
    nqp_decontainerize $P104, $P103
    set $P105, param_2447
    unless_null $P105, vivify_1186
    new $P105, "Undef"
  vivify_1186:
    $P106 = $P104."slot_for_object"($P105)
    set $P2448, $P106
.annotate 'line', 2084
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "PAST"
    get_who $P105, $P104
    set $P106, $P105["Op"]
    set $P107, param_2446
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P110, $P108, $P109, "$!handle", 1
    unless_null $P110, vivify_1187
    new $P110, "Undef"
  vivify_1187:
    set $P111, $P2448
    unless_null $P111, vivify_1188
    new $P111, "Undef"
  vivify_1188:
    $P112 = $P106."new"($P110, $P111, "nqp_get_sc_object Psi" :named("pirop"))
    set $P2449, $P112
.annotate 'line', 2085
    new $P103, "Float"
    assign $P103, 1
    set $P2450, $P2449
    unless_null $P2450, vivify_1189
    $P2450 = root_new ['parrot';'Hash']
    set $P2449, $P2450
  vivify_1189:
    set $P2450["has_compile_time_value"], $P103
.annotate 'line', 2086
    set $P103, param_2447
    unless_null $P103, vivify_1190
    new $P103, "Undef"
  vivify_1190:
    set $P2451, $P2449
    unless_null $P2451, vivify_1191
    $P2451 = root_new ['parrot';'Hash']
    set $P2449, $P2451
  vivify_1191:
    set $P2451["compile_time_value"], $P103
.annotate 'line', 2082
    set $P103, $P2449
    unless_null $P103, vivify_1192
    new $P103, "Undef"
  vivify_1192:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "get_slot_past_for_code_ref_at" :anon :subid("163_1337966785.387") :outer("324_1337966785.387")
    .param pmc param_2453
    .param pmc param_2454
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2091
    .lex "self", param_2453
    .lex "$idx", param_2454
.annotate 'line', 2092
    get_hll_global $P101, "GLOBAL"
    nqp_get_package_through_who $P102, $P101, "PAST"
    get_who $P103, $P102
    set $P104, $P103["Op"]
    set $P105, param_2453
    nqp_decontainerize $P106, $P105
    nqp_get_sc_object $P107, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P108, $P106, $P107, "$!handle", 1
    unless_null $P108, vivify_1193
    new $P108, "Undef"
  vivify_1193:
    set $P109, param_2454
    unless_null $P109, vivify_1194
    new $P109, "Undef"
  vivify_1194:
    $P110 = $P104."new"($P108, $P109, "nqp_get_sc_code_ref Psi" :named("pirop"))
.annotate 'line', 2091
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.include "except_types.pasm"
.sub "set_slot_past" :anon :subid("164_1337966785.387") :outer("324_1337966785.387")
    .param pmc param_2458
    .param pmc param_2459
    .param pmc param_2460
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2096
    new $P2457, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2457, control_2456
    push_eh $P2457
    .lex "self", param_2458
    .lex "$slot", param_2459
    .lex "$past_to_set", param_2460
.annotate 'line', 2097
    new $P101, "Exception"
    set $P101['type'], .CONTROL_RETURN
    get_hll_global $P102, "GLOBAL"
    nqp_get_package_through_who $P103, $P102, "PAST"
    get_who $P104, $P103
    set $P105, $P104["Op"]
    set $P106, param_2458
    nqp_decontainerize $P107, $P106
    nqp_get_sc_object $P108, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P109, $P107, $P108, "$!handle", 1
    unless_null $P109, vivify_1195
    new $P109, "Undef"
  vivify_1195:
    set $P110, param_2459
    unless_null $P110, vivify_1196
    new $P110, "Undef"
  vivify_1196:
    set $P111, param_2460
    unless_null $P111, vivify_1197
    new $P111, "Undef"
  vivify_1197:
    $P112 = $P105."new"($P109, $P110, $P111, "nqp_set_sc_object vsiP" :named("pirop"))
    setattribute $P101, 'payload', $P112
    throw $P101
.annotate 'line', 2096
    .return ()
  control_2456:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P101, exception, "payload"
    .return ($P101)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "set_cur_sc" :anon :subid("165_1337966785.387") :outer("324_1337966785.387")
    .param pmc param_2462
    .param pmc param_2463
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2103
    .lex "self", param_2462
    .lex "$to_wrap", param_2463
.annotate 'line', 2104
    get_hll_global $P101, "GLOBAL"
    nqp_get_package_through_who $P102, $P101, "PAST"
    get_who $P103, $P102
    set $P104, $P103["Op"]
    set $P105, param_2463
    unless_null $P105, vivify_1198
    new $P105, "Undef"
  vivify_1198:
.annotate 'line', 2107
    get_hll_global $P106, "GLOBAL"
    nqp_get_package_through_who $P107, $P106, "PAST"
    get_who $P108, $P107
    set $P109, $P108["Var"]
    $P110 = $P109."new"("cur_sc" :named("name"), "register" :named("scope"))
    $P111 = $P104."new"($P105, $P110, "nqp_set_sc_for_object__0PP" :named("pirop"))
.annotate 'line', 2103
    .return ($P111)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "add_object_to_cur_sc_past" :anon :subid("166_1337966785.387") :outer("324_1337966785.387")
    .param pmc param_2465
    .param pmc param_2466
    .param pmc param_2467
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2111
    .lex "self", param_2465
    .lex "$slot", param_2466
    .lex "$to_wrap", param_2467
.annotate 'line', 2112
    get_hll_global $P101, "GLOBAL"
    nqp_get_package_through_who $P102, $P101, "PAST"
    get_who $P103, $P102
    set $P104, $P103["Op"]
.annotate 'line', 2114
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Var"]
    $P109 = $P108."new"("cur_sc" :named("name"), "register" :named("scope"))
    set $P110, param_2466
    unless_null $P110, vivify_1199
    new $P110, "Undef"
  vivify_1199:
    set $P111, param_2467
    unless_null $P111, vivify_1200
    new $P111, "Undef"
  vivify_1200:
    $P112 = $P104."new"($P109, $P110, $P111, "nqp_add_object_to_sc 2PiP" :named("pirop"))
.annotate 'line', 2111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "add_object" :anon :subid("167_1337966785.387") :outer("324_1337966785.387")
    .param pmc param_2469
    .param pmc param_2470
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2121
    .lex "self", param_2469
    .lex "$obj", param_2470
.annotate 'line', 2123
    new $P101, "Undef"
    set $P2471, $P101
    .lex "$idx", $P2471
.annotate 'line', 2122
    set $P102, param_2470
    unless_null $P102, vivify_1201
    new $P102, "Undef"
  vivify_1201:
    set $P103, param_2469
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P106, $P104, $P105, "$!sc", 0
    unless_null $P106, vivify_1202
    new $P106, "Undef"
  vivify_1202:
    nqp_set_sc_for_object $P102, $P106
.annotate 'line', 2123
    set $P102, param_2469
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P105, $P103, $P104, "$!sc", 0
    unless_null $P105, vivify_1203
    new $P105, "Undef"
  vivify_1203:
    $P106 = $P105."elems"()
    set $P2471, $P106
.annotate 'line', 2124
    set $P102, param_2470
    unless_null $P102, vivify_1204
    new $P102, "Undef"
  vivify_1204:
    set $P103, $P2471
    unless_null $P103, vivify_1205
    new $P103, "Undef"
  vivify_1205:
    set $I100, $P103
    set $P104, param_2469
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P2472, $P105, $P106, "$!sc", 0
    unless_null $P2472, vivify_1206
    $P2472 = root_new ['parrot';'ResizablePMCArray']
    repr_bind_attr_obj $P105, $P106, "$!sc", 0, $P2472
  vivify_1206:
    set $P2472[$I100], $P102
.annotate 'line', 2125
    set $P102, $P2471
    unless_null $P102, vivify_1207
    new $P102, "Undef"
  vivify_1207:
    set $P103, param_2470
    unless_null $P103, vivify_1208
    new $P103, "Undef"
  vivify_1208:
    get_id $I100, $P103
    set $P104, param_2469
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P2473, $P105, $P106, "%!addr_to_slot", 7
    unless_null $P2473, vivify_1209
    $P2473 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P105, $P106, "%!addr_to_slot", 7, $P2473
  vivify_1209:
    set $P2473[$I100], $P102
.annotate 'line', 2121
    set $P102, $P2471
    unless_null $P102, vivify_1210
    new $P102, "Undef"
  vivify_1210:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "add_root_code_ref" :anon :subid("168_1337966785.387") :outer("324_1337966785.387")
    .param pmc param_2475
    .param pmc param_2476
    .param pmc param_2477
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2130
    .lex "self", param_2475
    .lex "$code_ref", param_2476
    .lex "$past_block", param_2477
.annotate 'line', 2131
    new $P101, "Undef"
    set $P2478, $P101
    .lex "$code_ref_idx", $P2478
    set $P102, param_2475
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P105, $P103, $P104, "$!num_code_refs", 3
    unless_null $P105, vivify_1211
    new $P105, "Undef"
  vivify_1211:
    set $P2478, $P105
.annotate 'line', 2132
    set $P102, param_2475
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P105, $P103, $P104, "$!num_code_refs", 3
    unless_null $P105, vivify_1212
    new $P105, "Undef"
  vivify_1212:
    add $P106, $P105, 1
    set $P107, param_2475
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_bind_attr_obj $P108, $P109, "$!num_code_refs", 3, $P106
.annotate 'line', 2133
    set $P102, param_2475
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P105, $P103, $P104, "$!code_ref_blocks", 4
    unless_null $P105, vivify_1213
    new $P105, "Undef"
  vivify_1213:
    set $P106, param_2477
    unless_null $P106, vivify_1214
    new $P106, "Undef"
  vivify_1214:
    $P105."push"($P106)
.annotate 'line', 2134
    set $P102, param_2475
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P105, $P103, $P104, "$!sc", 0
    unless_null $P105, vivify_1215
    new $P105, "Undef"
  vivify_1215:
    set $P106, $P2478
    unless_null $P106, vivify_1216
    new $P106, "Undef"
  vivify_1216:
    set $I100, $P106
    set $P107, param_2476
    unless_null $P107, vivify_1217
    new $P107, "Undef"
  vivify_1217:
    nqp_add_code_ref_to_sc $P105, $I100, $P107
.annotate 'line', 2130
    set $P102, $P2478
    unless_null $P102, vivify_1218
    new $P102, "Undef"
  vivify_1218:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "update_root_code_ref" :anon :subid("169_1337966785.387") :outer("324_1337966785.387")
    .param pmc param_2480
    .param pmc param_2481
    .param pmc param_2482
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2139
    .lex "self", param_2480
    .lex "$idx", param_2481
    .lex "$new_code_ref", param_2482
.annotate 'line', 2140
    set $P101, param_2480
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P104, $P102, $P103, "$!sc", 0
    unless_null $P104, vivify_1219
    new $P104, "Undef"
  vivify_1219:
    set $P105, param_2481
    unless_null $P105, vivify_1220
    new $P105, "Undef"
  vivify_1220:
    set $I100, $P105
    set $P106, param_2482
    unless_null $P106, vivify_1221
    new $P106, "Undef"
  vivify_1221:
    nqp_add_code_ref_to_sc $P104, $I100, $P106
.annotate 'line', 2139
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "is_precompilation_mode" :anon :subid("170_1337966785.387") :outer("324_1337966785.387")
    .param pmc param_2484
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2144
    .lex "self", param_2484
    set $P101, param_2484
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P104, $P102, $P103, "$!precomp_mode", 2
    unless_null $P104, vivify_1222
    new $P104, "Undef"
  vivify_1222:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "add_load_dependency_task" :anon :subid("171_1337966785.387") :outer("324_1337966785.387")
    .param pmc param_2486
    .param pmc param_2487 :optional :named("deserialize_past")
    .param int has_param_2487 :opt_flag
    .param pmc param_2488 :optional :named("fixup_past")
    .param int has_param_2488 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2150
    .lex "self", param_2486
    if has_param_2487, optparam_1223
    new $P101, "Undef"
    set param_2487, $P101
  optparam_1223:
    .lex "$deserialize_past", param_2487
    if has_param_2488, optparam_1224
    new $P102, "Undef"
    set param_2488, $P102
  optparam_1224:
    .lex "$fixup_past", param_2488
.annotate 'line', 2151
    set $P104, param_2486
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P107, $P105, $P106, "$!precomp_mode", 2
    unless_null $P107, vivify_1225
    new $P107, "Undef"
  vivify_1225:
    if $P107, if_2489
.annotate 'line', 2155
    set $P110, param_2488
    unless_null $P110, vivify_1226
    new $P110, "Undef"
  vivify_1226:
    if $P110, if_2492
    set $P109, $P110
    goto if_2492_end
  if_2492:
    set $P111, param_2486
    nqp_decontainerize $P112, $P111
    nqp_get_sc_object $P113, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P2493, $P112, $P113, "@!load_dependency_tasks", 5
    unless_null $P2493, vivify_1227
    $P2493 = root_new ['parrot';'ResizablePMCArray']
  vivify_1227:
    set $P114, param_2488
    unless_null $P114, vivify_1228
    new $P114, "Undef"
  vivify_1228:
    $P115 = $P2493."push"($P114)
    set $P109, $P115
  if_2492_end:
.annotate 'line', 2154
    set $P103, $P109
.annotate 'line', 2151
    goto if_2489_end
  if_2489:
.annotate 'line', 2152
    set $P109, param_2487
    unless_null $P109, vivify_1229
    new $P109, "Undef"
  vivify_1229:
    if $P109, if_2490
    set $P108, $P109
    goto if_2490_end
  if_2490:
    set $P110, param_2486
    nqp_decontainerize $P111, $P110
    nqp_get_sc_object $P112, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P2491, $P111, $P112, "@!load_dependency_tasks", 5
    unless_null $P2491, vivify_1230
    $P2491 = root_new ['parrot';'ResizablePMCArray']
  vivify_1230:
    set $P113, param_2487
    unless_null $P113, vivify_1231
    new $P113, "Undef"
  vivify_1231:
    $P114 = $P2491."push"($P113)
    set $P108, $P114
  if_2490_end:
.annotate 'line', 2151
    set $P103, $P108
  if_2489_end:
.annotate 'line', 2150
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "add_fixup_task" :anon :subid("172_1337966785.387") :outer("324_1337966785.387")
    .param pmc param_2495
    .param pmc param_2496 :optional :named("deserialize_past")
    .param int has_param_2496 :opt_flag
    .param pmc param_2497 :optional :named("fixup_past")
    .param int has_param_2497 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2161
    .lex "self", param_2495
    if has_param_2496, optparam_1232
    new $P101, "Undef"
    set param_2496, $P101
  optparam_1232:
    .lex "$deserialize_past", param_2496
    if has_param_2497, optparam_1233
    new $P102, "Undef"
    set param_2497, $P102
  optparam_1233:
    .lex "$fixup_past", param_2497
.annotate 'line', 2162
    set $P104, param_2495
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P107, $P105, $P106, "$!precomp_mode", 2
    unless_null $P107, vivify_1234
    new $P107, "Undef"
  vivify_1234:
    if $P107, if_2498
.annotate 'line', 2166
    set $P110, param_2497
    unless_null $P110, vivify_1235
    new $P110, "Undef"
  vivify_1235:
    if $P110, if_2501
    set $P109, $P110
    goto if_2501_end
  if_2501:
    set $P111, param_2495
    nqp_decontainerize $P112, $P111
    nqp_get_sc_object $P113, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P2502, $P112, $P113, "@!fixup_tasks", 6
    unless_null $P2502, vivify_1236
    $P2502 = root_new ['parrot';'ResizablePMCArray']
  vivify_1236:
    set $P114, param_2497
    unless_null $P114, vivify_1237
    new $P114, "Undef"
  vivify_1237:
    $P115 = $P2502."push"($P114)
    set $P109, $P115
  if_2501_end:
.annotate 'line', 2165
    set $P103, $P109
.annotate 'line', 2162
    goto if_2498_end
  if_2498:
.annotate 'line', 2163
    set $P109, param_2496
    unless_null $P109, vivify_1238
    new $P109, "Undef"
  vivify_1238:
    if $P109, if_2499
    set $P108, $P109
    goto if_2499_end
  if_2499:
    set $P110, param_2495
    nqp_decontainerize $P111, $P110
    nqp_get_sc_object $P112, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P2500, $P111, $P112, "@!fixup_tasks", 6
    unless_null $P2500, vivify_1239
    $P2500 = root_new ['parrot';'ResizablePMCArray']
  vivify_1239:
    set $P113, param_2496
    unless_null $P113, vivify_1240
    new $P113, "Undef"
  vivify_1240:
    $P114 = $P2500."push"($P113)
    set $P108, $P114
  if_2499_end:
.annotate 'line', 2162
    set $P103, $P108
  if_2498_end:
.annotate 'line', 2161
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "get_ref" :anon :subid("173_1337966785.387") :outer("324_1337966785.387")
    .param pmc param_2504
    .param pmc param_2505
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2173
    .const 'Sub' $P2510 = "325_1337966785.387" 
    capture_lex $P2510
    .lex "self", param_2504
    .lex "$obj", param_2505
.annotate 'line', 2176
    new $P101, "Undef"
    set $P2506, $P101
    .lex "$sc", $P2506
    set $P102, param_2505
    unless_null $P102, vivify_1241
    new $P102, "Undef"
  vivify_1241:
    nqp_get_sc_for_object $P103, $P102
    set $P2506, $P103
.annotate 'line', 2177
    set $P102, $P2506
    unless_null $P102, vivify_1242
    new $P102, "Undef"
  vivify_1242:
    defined $I100, $P102
    if $I100, unless_2507_end
.annotate 'line', 2178
    set $P103, param_2504
    nqp_decontainerize $P104, $P103
    set $P105, param_2505
    unless_null $P105, vivify_1243
    new $P105, "Undef"
  vivify_1243:
    $P104."add_object"($P105)
.annotate 'line', 2179
    set $P103, param_2504
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P106, $P104, $P105, "$!sc", 0
    unless_null $P106, vivify_1244
    new $P106, "Undef"
  vivify_1244:
    set $P2506, $P106
  unless_2507_end:
.annotate 'line', 2185
    set $P103, $P2506
    unless_null $P103, vivify_1245
    new $P103, "Undef"
  vivify_1245:
    set $P104, param_2504
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P107, $P105, $P106, "$!sc", 0
    unless_null $P107, vivify_1246
    new $P107, "Undef"
  vivify_1246:
    issame $I100, $P103, $P107
    if $I100, if_2508
.annotate 'line', 2188
    .const 'Sub' $P2510 = "325_1337966785.387" 
    capture_lex $P2510
    $P112 = $P2510()
    set $P102, $P112
.annotate 'line', 2185
    goto if_2508_end
  if_2508:
.annotate 'line', 2186
    set $P108, param_2504
    nqp_decontainerize $P109, $P108
    set $P110, param_2505
    unless_null $P110, vivify_1255
    new $P110, "Undef"
  vivify_1255:
    $P111 = $P109."get_slot_past_for_object"($P110)
.annotate 'line', 2185
    set $P102, $P111
  if_2508_end:
.annotate 'line', 2173
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "_block2509"  :anon :subid("325_1337966785.387") :outer("173_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2189
    new $P108, "Undef"
    set $P2511, $P108
    .lex "$handle", $P2511
.annotate 'line', 2190
    new $P109, "Undef"
    set $P2512, $P109
    .lex "$past", $P2512
.annotate 'line', 2189
    find_lex $P110, "$sc"
    unless_null $P110, vivify_1247
    new $P110, "Undef"
  vivify_1247:
    $P112 = $P110."handle"()
    set $P2511, $P112
.annotate 'line', 2190
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P112, $P110, "PAST"
    get_who $P113, $P112
    set $P114, $P113["Op"]
    set $P115, $P2511
    unless_null $P115, vivify_1248
    new $P115, "Undef"
  vivify_1248:
.annotate 'line', 2191
    find_lex $P116, "$sc"
    unless_null $P116, vivify_1249
    new $P116, "Undef"
  vivify_1249:
    find_lex $P117, "$obj"
    unless_null $P117, vivify_1250
    new $P117, "Undef"
  vivify_1250:
    $P118 = $P116."slot_index_for"($P117)
    $P119 = $P114."new"($P115, $P118, "nqp_get_sc_object Psi" :named("pirop"))
.annotate 'line', 2190
    set $P2512, $P119
.annotate 'line', 2192
    new $P110, "Float"
    assign $P110, 1
    set $P2513, $P2512
    unless_null $P2513, vivify_1251
    $P2513 = root_new ['parrot';'Hash']
    set $P2512, $P2513
  vivify_1251:
    set $P2513["has_compile_time_value"], $P110
.annotate 'line', 2193
    find_lex $P110, "$obj"
    unless_null $P110, vivify_1252
    new $P110, "Undef"
  vivify_1252:
    set $P2514, $P2512
    unless_null $P2514, vivify_1253
    $P2514 = root_new ['parrot';'Hash']
    set $P2512, $P2514
  vivify_1253:
    set $P2514["compile_time_value"], $P110
.annotate 'line', 2188
    set $P110, $P2512
    unless_null $P110, vivify_1254
    new $P110, "Undef"
  vivify_1254:
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "sc" :anon :subid("174_1337966785.387") :outer("324_1337966785.387")
    .param pmc param_2516
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2199
    .lex "self", param_2516
    set $P101, param_2516
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P104, $P102, $P103, "$!sc", 0
    unless_null $P104, vivify_1256
    new $P104, "Undef"
  vivify_1256:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "handle" :anon :subid("175_1337966785.387") :outer("324_1337966785.387")
    .param pmc param_2518
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2204
    .lex "self", param_2518
    set $P101, param_2518
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P104, $P102, $P103, "$!handle", 1
    unless_null $P104, vivify_1257
    new $P104, "Undef"
  vivify_1257:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "load_dependency_tasks" :anon :subid("176_1337966785.387") :outer("324_1337966785.387")
    .param pmc param_2520
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2209
    .lex "self", param_2520
    set $P101, param_2520
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P2521, $P102, $P103, "@!load_dependency_tasks", 5
    unless_null $P2521, vivify_1258
    $P2521 = root_new ['parrot';'ResizablePMCArray']
  vivify_1258:
    .return ($P2521)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "fixup_tasks" :anon :subid("177_1337966785.387") :outer("324_1337966785.387")
    .param pmc param_2523
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2214
    .lex "self", param_2523
    set $P101, param_2523
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P2524, $P102, $P103, "@!fixup_tasks", 6
    unless_null $P2524, vivify_1259
    $P2524 = root_new ['parrot';'ResizablePMCArray']
  vivify_1259:
    .return ($P2524)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.include "except_types.pasm"
.sub "serialize_and_produce_deserialization_past" :anon :subid("178_1337966785.387") :outer("324_1337966785.387")
    .param pmc param_2526
    .param pmc param_2527
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2220
    .const 'Sub' $P2539 = "326_1337966785.387" 
    capture_lex $P2539
    .lex "self", param_2526
    .lex "$sc_reg", param_2527
.annotate 'line', 2222
    new $P101, "Undef"
    set $P2528, $P101
    .lex "$sh", $P2528
.annotate 'line', 2223
    new $P102, "Undef"
    set $P2529, $P102
    .lex "$serialized", $P2529
.annotate 'line', 2229
    new $P103, "Undef"
    set $P2530, $P103
    .lex "$sh_past", $P2530
.annotate 'line', 2234
    new $P104, "Undef"
    set $P2531, $P104
    .lex "$sh_elems", $P2531
.annotate 'line', 2235
    new $P105, "Undef"
    set $P2532, $P105
    .lex "$i", $P2532
.annotate 'line', 2246
    new $P106, "Undef"
    set $P2533, $P106
    .lex "$cr_past", $P2533
.annotate 'line', 2222
    new $P107, "ResizableStringArray"
    set $P2528, $P107
.annotate 'line', 2223
    set $P107, param_2526
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P110, $P108, $P109, "$!sc", 0
    unless_null $P110, vivify_1260
    new $P110, "Undef"
  vivify_1260:
    set $P111, $P2528
    unless_null $P111, vivify_1261
    new $P111, "Undef"
  vivify_1261:
    nqp_serialize_sc $S100, $P110, $P111
    new $P112, 'String'
    set $P112, $S100
    set $P2529, $P112
.annotate 'line', 2226
    nqp_pop_compiling_sc 
.annotate 'line', 2229
    get_hll_global $P107, "GLOBAL"
    nqp_get_package_through_who $P108, $P107, "PAST"
    get_who $P109, $P108
    set $P110, $P109["Stmts"]
.annotate 'line', 2230
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "PAST"
    get_who $P113, $P112
    set $P114, $P113["Op"]
.annotate 'line', 2232
    get_hll_global $P115, "GLOBAL"
    nqp_get_package_through_who $P116, $P115, "PAST"
    get_who $P117, $P116
    set $P118, $P117["Var"]
    $P119 = $P118."new"("register" :named("scope"), "string_heap" :named("name"), 1 :named("isdecl"))
.annotate 'line', 2233
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Op"]
    $P124 = $P123."new"("ResizableStringArray", "new Ps" :named("pirop"))
    $P125 = $P114."new"($P119, $P124, "bind" :named("pasttype"))
.annotate 'line', 2230
    $P126 = $P110."new"($P125)
.annotate 'line', 2229
    set $P2530, $P126
.annotate 'line', 2234
    set $P107, $P2528
    unless_null $P107, vivify_1262
    new $P107, "Undef"
  vivify_1262:
    elements $I100, $P107
    new $P108, 'Integer'
    set $P108, $I100
    set $P2531, $P108
.annotate 'line', 2235
    new $P107, "Float"
    assign $P107, 0
    set $P2532, $P107
.annotate 'line', 2236
    new $P109, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P109, loop2537_handler
    push_eh $P109
  loop2537_test:
    set $P107, $P2532
    unless_null $P107, vivify_1263
    new $P107, "Undef"
  vivify_1263:
    set $N100, $P107
    set $P108, $P2531
    unless_null $P108, vivify_1264
    new $P108, "Undef"
  vivify_1264:
    set $N101, $P108
    islt $I100, $N100, $N101
    unless $I100, loop2537_done
  loop2537_redo:
.annotate 'line', 2237
    set $P109, $P2530
    unless_null $P109, vivify_1265
    new $P109, "Undef"
  vivify_1265:
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Op"]
.annotate 'line', 2239
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Var"]
    $P118 = $P117."new"("register" :named("scope"), "string_heap" :named("name"))
.annotate 'line', 2240
    set $P120, $P2532
    unless_null $P120, vivify_1266
    new $P120, "Undef"
  vivify_1266:
    set $I101, $P120
    set $P2535, $P2528
    unless_null $P2535, vivify_1267
    $P2535 = root_new ['parrot';'ResizablePMCArray']
  vivify_1267:
    set $P121, $P2535[$I101]
    unless_null $P121, vivify_1268
    new $P121, "Undef"
  vivify_1268:
    set $S100, $P121
    isnull $I102, $S100
    if $I102, if_2534
    set $P127, $P2532
    unless_null $P127, vivify_1269
    new $P127, "Undef"
  vivify_1269:
    set $I103, $P127
    set $P2536, $P2528
    unless_null $P2536, vivify_1270
    $P2536 = root_new ['parrot';'ResizablePMCArray']
  vivify_1270:
    set $P128, $P2536[$I103]
    unless_null $P128, vivify_1271
    new $P128, "Undef"
  vivify_1271:
    set $P119, $P128
    goto if_2534_end
  if_2534:
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Op"]
    $P126 = $P125."new"("null S" :named("pirop"))
    set $P119, $P126
  if_2534_end:
    $P129 = $P113."new"($P118, $P119, "push vPs" :named("pirop"))
.annotate 'line', 2237
    $P109."push"($P129)
.annotate 'line', 2241
    set $P109, $P2532
    unless_null $P109, vivify_1272
    new $P109, "Undef"
  vivify_1272:
    add $P110, $P109, 1
    set $P2532, $P110
  loop2537_next:
.annotate 'line', 2236
    goto loop2537_test
  loop2537_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P110, exception, 'type'
    eq $P110, .CONTROL_LOOP_NEXT, loop2537_next
    eq $P110, .CONTROL_LOOP_REDO, loop2537_redo
  loop2537_done:
    pop_eh 
.annotate 'line', 2243
    set $P107, $P2530
    unless_null $P107, vivify_1273
    new $P107, "Undef"
  vivify_1273:
    get_hll_global $P108, "GLOBAL"
    nqp_get_package_through_who $P109, $P108, "PAST"
    get_who $P110, $P109
    set $P111, $P110["Var"]
    $P112 = $P111."new"("register" :named("scope"), "string_heap" :named("name"))
    $P107."push"($P112)
.annotate 'line', 2246
    get_hll_global $P107, "GLOBAL"
    nqp_get_package_through_who $P108, $P107, "PAST"
    get_who $P109, $P108
    set $P110, $P109["Op"]
    $P111 = $P110."new"("list" :named("pasttype"))
    set $P2533, $P111
.annotate 'line', 2247
    set $P108, param_2526
    nqp_decontainerize $P109, $P108
    nqp_get_sc_object $P110, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134", 153
    repr_get_attr_obj $P111, $P109, $P110, "$!code_ref_blocks", 4
    unless_null $P111, vivify_1274
    new $P111, "Undef"
  vivify_1274:
    defined $I100, $P111
    unless $I100, for_undef_1275
    iter $P107, $P111
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop2541_handler
    push_eh $P113
  loop2541_test:
    unless $P107, loop2541_done
    shift $P112, $P107
  loop2541_redo:
    .const 'Sub' $P2539 = "326_1337966785.387" 
    capture_lex $P2539
    $P2539($P112)
  loop2541_next:
    goto loop2541_test
  loop2541_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop2541_next
    eq $P114, .CONTROL_LOOP_REDO, loop2541_redo
  loop2541_done:
    pop_eh 
  for_undef_1275:
.annotate 'line', 2252
    get_hll_global $P107, "GLOBAL"
    nqp_get_package_through_who $P108, $P107, "PAST"
    get_who $P109, $P108
    set $P110, $P109["Op"]
    set $P111, $P2529
    unless_null $P111, vivify_1278
    new $P111, "Undef"
  vivify_1278:
.annotate 'line', 2255
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Var"]
    set $P116, param_2527
    unless_null $P116, vivify_1279
    new $P116, "Undef"
  vivify_1279:
    $P117 = $P115."new"($P116 :named("name"), "register" :named("scope"))
    set $P118, $P2530
    unless_null $P118, vivify_1280
    new $P118, "Undef"
  vivify_1280:
.annotate 'line', 2257
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "PAST"
    get_who $P121, $P120
    set $P122, $P121["Block"]
    set $P123, $P2533
    unless_null $P123, vivify_1281
    new $P123, "Undef"
  vivify_1281:
    $P124 = $P122."new"($P123, "immediate" :named("blocktype"))
    $P125 = $P110."new"($P111, $P117, $P118, $P124, "nqp_deserialize_sc__vSPPP" :named("pirop"))
.annotate 'line', 2220
    .return ($P125)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "_block2538"  :anon :subid("326_1337966785.387") :outer("178_1337966785.387")
    .param pmc param_2540
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2247
    .lex "$block", param_2540
.annotate 'line', 2248
    find_lex $P113, "$cr_past"
    unless_null $P113, vivify_1276
    new $P113, "Undef"
  vivify_1276:
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Val"]
    set $P118, param_2540
    unless_null $P118, vivify_1277
    new $P118, "Undef"
  vivify_1277:
    $P119 = $P117."new"($P118 :named("value"), "Sub" :named("returns"))
    $P120 = $P113."push"($P119)
.annotate 'line', 2247
    .return ($P120)
.end


.HLL "nqp"

.namespace []
.sub "_block2544" :load :anon :subid("327_1337966785.387")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1030
    .const '' $P2546 = "179_1337966785.387" 
    $P107 = $P2546()
    .return ($P107)
.end

