.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'

.HLL "nqp"

.loadlib "nqp_group"

.loadlib "nqp_ops"

.loadlib "nqp_bigint_ops"

.loadlib "trans_ops"

.loadlib "io_ops"

.namespace []
.sub "_block1000"  :anon :subid("182_1338064439.457")
    .param pmc param_1002 :slurpy
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 0
    .const 'Sub' $P2574 = "333_1338064439.457" 
    capture_lex $P2574
    .const 'Sub' $P2452 = "329_1338064439.457" 
    capture_lex $P2452
    .const 'Sub' $P2312 = "319_1338064439.457" 
    capture_lex $P2312
    .const 'Sub' $P2283 = "318_1338064439.457" 
    capture_lex $P2283
    .const 'Sub' $P1593 = "277_1338064439.457" 
    capture_lex $P1593
    .const 'Sub' $P1346 = "265_1338064439.457" 
    capture_lex $P1346
    .const 'Sub' $P1007 = "183_1338064439.457" 
    capture_lex $P1007
.annotate 'line', 1
    .lex "@ARGS", param_1002
    .lex "GLOBALish", $P1003
    .lex "$?PACKAGE", $P1004
.annotate 'line', 1728
    new $P100, "Undef"
    set $P1005, $P100
    .lex "$compiler", $P1005
.annotate 'line', 1033
    load_bytecode "Parrot/Exception.pbc"
.annotate 'line', 1032
    $P0 = find_dynamic_lex "$*CTXSAVE"
    if null $P0 goto ctxsave_done
    $I0 = can $P0, "ctxsave"
    unless $I0 goto ctxsave_done
    $P0."ctxsave"()
  ctxsave_done:
.annotate 'line', 7
    .const 'Sub' $P1007 = "183_1338064439.457" 
    capture_lex $P1007
    $P1007()
.annotate 'line', 847
    .const 'Sub' $P1346 = "265_1338064439.457" 
    capture_lex $P1346
    $P1346()
.annotate 'line', 1040
    .const 'Sub' $P1593 = "277_1338064439.457" 
    capture_lex $P1593
    $P1593()
.annotate 'line', 1728
    get_hll_global $P101, "GLOBAL"
    nqp_get_package_through_who $P102, $P101, "HLL"
    get_who $P103, $P102
    set $P104, $P103["Compiler"]
    $P105 = $P104."new"()
    set $P1005, $P105
.annotate 'line', 1729
    set $P101, $P1005
    unless_null $P101, vivify_1024
    new $P101, "Undef"
  vivify_1024:
    $P101."language"("parrot")
.annotate 'line', 1823
    .const 'Sub' $P2283 = "318_1338064439.457" 
    capture_lex $P2283
    $P2283()
.annotate 'line', 1854
    .const 'Sub' $P2312 = "319_1338064439.457" 
    capture_lex $P2312
    $P2312()
.annotate 'line', 2045
    .const 'Sub' $P2452 = "329_1338064439.457" 
    capture_lex $P2452
    $P2452()
.annotate 'line', 1
    set $P102, param_1002
    if $P102, if_2569
    set $P101, $P102
    goto if_2569_end
  if_2569:
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P103, "ModuleLoader"
    getinterp $P104
    set $P105, $P104["context"]
    $P106 = $P103."set_mainline_module"($P105)
    set $P101, $P106
  if_2569_end:
    .return ($P101)
.annotate 'line', 1032
    .const 'Sub' $P2571 = "332_1338064439.457" 
.annotate 'line', 1
    .return ($P2571)
.end


.HLL "nqp"

.namespace []
.sub "" :load :init :subid("post334") :outer("182_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 0
    .const 'Sub' $P1001 = "182_1338064439.457" 
    .local pmc block
    set block, $P1001
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P108
    get_class $P109, "LexPad"
    get_class $P110, "NQPLexPad"
    $P108."hll_map"($P109, $P110)
    nqp_create_sc $P111, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301"
    .local pmc cur_sc
    set cur_sc, $P111
    cur_sc."set_description"("src\\stage2\\gen\\NQPHLL.pm")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P112, "ModuleLoader"
    $P113 = $P112."load_setting"("NQPCORE")
    block."set_outer_ctx"($P113)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P112, "ModuleLoader"
    $P112."load_module"("QRegex")
    set $S100, ""
    new $P112, "ResizableStringArray"
    .local pmc string_heap
    set string_heap, $P112
    null $S101
    push string_heap, $S101
    push string_heap, "P6opaque"
    push string_heap, "QRegex"
    push string_heap, "NQPCursorRole"
    push string_heap, "152819621F18B86657DB412D206298CA3534F307-1338064436.189"
    push string_heap, "src\\stage2\\QRegex.nqp"
    push string_heap, "NQPMatch"
    push string_heap, "NQPCursor"
    push string_heap, "NQPRegexMethod"
    push string_heap, "NQPRegex"
    push string_heap, "HLL"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "2DEE75AFD50ED67BDF162F6BA56A80FA8956D48C-1338064435.275"
    push string_heap, "src\\stage2\\NQPCORE.setting"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "MATCH"
    push string_heap, "Bool"
    push string_heap, "parse"
    push string_heap, "!INTERPOLATE"
    push string_heap, "!INTERPOLATE_REGEX"
    push string_heap, "target"
    push string_heap, "from"
    push string_heap, "pos"
    push string_heap, "CAPHASH"
    push string_heap, "!cursor_init"
    push string_heap, "!cursor_start"
    push string_heap, "!cursor_start_subcapture"
    push string_heap, "!cursor_capture"
    push string_heap, "!cursor_push_cstack"
    push string_heap, "!cursor_pass"
    push string_heap, "!cursor_fail"
    push string_heap, "!cursor_next"
    push string_heap, "!reduce"
    push string_heap, "!reduce_with_match"
    push string_heap, "!protoregex"
    push string_heap, "!protoregex_nfa"
    push string_heap, "!protoregex_table"
    push string_heap, "!BACKREF"
    push string_heap, "!LITERAL"
    push string_heap, "at"
    push string_heap, "before"
    push string_heap, "after"
    push string_heap, "ws"
    push string_heap, "ww"
    push string_heap, "wb"
    push string_heap, "ident"
    push string_heap, "alpha"
    push string_heap, "alnum"
    push string_heap, "upper"
    push string_heap, "lower"
    push string_heap, "digit"
    push string_heap, "xdigit"
    push string_heap, "space"
    push string_heap, "blank"
    push string_heap, "cntrl"
    push string_heap, "punct"
    push string_heap, "FAILGOAL"
    push string_heap, "termish"
    push string_heap, "term"
    push string_heap, "infix"
    push string_heap, "prefix"
    push string_heap, "postfix"
    push string_heap, "circumfix"
    push string_heap, "postcircumfix"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "infixish"
    push string_heap, "prefixish"
    push string_heap, "postfixish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "nulltermish"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "decint"
    push string_heap, "decints"
    push string_heap, "hexint"
    push string_heap, "hexints"
    push string_heap, "octint"
    push string_heap, "octints"
    push string_heap, "binint"
    push string_heap, "binints"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "escale"
    push string_heap, "quote_escape"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "O"
    push string_heap, "panic"
    push string_heap, "peek_delimiters"
    push string_heap, "quote_EXPR"
    push string_heap, "quotemod_check"
    push string_heap, "starter"
    push string_heap, "stopper"
    push string_heap, "split_words"
    push string_heap, "EXPR"
    push string_heap, "EXPR_reduce"
    push string_heap, "ternary"
    push string_heap, "MARKER"
    push string_heap, "MARKED"
    push string_heap, "LANG"
    push string_heap, "$!orig"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!name"
    push string_heap, "$!bstack"
    push string_heap, "$!cstack"
    push string_heap, "$!regexsub"
    push string_heap, "$!restart"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "ints_to_string"
    push string_heap, "CTXSAVE"
    push string_heap, "SET_BLOCK_OUTER_CTX"
    push string_heap, "EXPR"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "termish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "decint"
    push string_heap, "hexint"
    push string_heap, "octint"
    push string_heap, "binint"
    push string_heap, "quote_EXPR"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "BUILD"
    push string_heap, "get_exports"
    push string_heap, "get_module"
    push string_heap, "language"
    push string_heap, "compiler"
    push string_heap, "config"
    push string_heap, "load_module"
    push string_heap, "import"
    push string_heap, "autoprint"
    push string_heap, "interactive"
    push string_heap, "eval"
    push string_heap, "ctxsave"
    push string_heap, "panic"
    push string_heap, "stages"
    push string_heap, "parsegrammar"
    push string_heap, "parseactions"
    push string_heap, "interactive_banner"
    push string_heap, "interactive_prompt"
    push string_heap, "compiler_progname"
    push string_heap, "commandline_options"
    push string_heap, "command_line"
    push string_heap, "command_eval"
    push string_heap, "process_args"
    push string_heap, "evalfiles"
    push string_heap, "compile"
    push string_heap, "parse"
    push string_heap, "past"
    push string_heap, "post"
    push string_heap, "pirbegin"
    push string_heap, "pir"
    push string_heap, "evalpmc"
    push string_heap, "dumper"
    push string_heap, "usage"
    push string_heap, "version"
    push string_heap, "show-config"
    push string_heap, "nqpevent"
    push string_heap, "removestage"
    push string_heap, "addstage"
    push string_heap, "parse_name"
    push string_heap, "lineof"
    push string_heap, "user-progname"
    push string_heap, "cli-options"
    push string_heap, "cli-arguments"
    push string_heap, "@!stages"
    push string_heap, "$!parsegrammar"
    push string_heap, "$!parseactions"
    push string_heap, "@!cmdoptions"
    push string_heap, "$!usage"
    push string_heap, "$!compiler_progname"
    push string_heap, "$!language"
    push string_heap, "%!config"
    push string_heap, "$!user_progname"
    push string_heap, "@!cli-arguments"
    push string_heap, "%!cli-options"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "init"
    push string_heap, "arguments"
    push string_heap, "options"
    push string_heap, "add-argument"
    push string_heap, "add-option"
    push string_heap, "@!arguments"
    push string_heap, "%!options"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "stop-after-first-arg"
    push string_heap, "BUILD"
    push string_heap, "add-stopper"
    push string_heap, "split-option-aliases"
    push string_heap, "add-spec"
    push string_heap, "is-option"
    push string_heap, "wants-value"
    push string_heap, "optional-value"
    push string_heap, "parse"
    push string_heap, "@!specs"
    push string_heap, "%!options"
    push string_heap, "%!stopper"
    push string_heap, "$!stop-after-first-arg"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "BUILD"
    push string_heap, "slot_for_object"
    push string_heap, "get_slot_past_for_object"
    push string_heap, "get_slot_past_for_code_ref_at"
    push string_heap, "set_slot_past"
    push string_heap, "set_cur_sc"
    push string_heap, "add_object_to_cur_sc_past"
    push string_heap, "add_object"
    push string_heap, "add_root_code_ref"
    push string_heap, "update_root_code_ref"
    push string_heap, "is_precompilation_mode"
    push string_heap, "add_load_dependency_task"
    push string_heap, "add_fixup_task"
    push string_heap, "get_ref"
    push string_heap, "sc"
    push string_heap, "handle"
    push string_heap, "load_dependency_tasks"
    push string_heap, "fixup_tasks"
    push string_heap, "serialize_and_produce_deserialization_past"
    push string_heap, "$!sc"
    push string_heap, "$!handle"
    push string_heap, "$!precomp_mode"
    push string_heap, "$!num_code_refs"
    push string_heap, "$!code_ref_blocks"
    push string_heap, "@!load_dependency_tasks"
    push string_heap, "@!fixup_tasks"
    push string_heap, "%!addr_to_slot"
    push string_heap, "__6MODEL_CORE__"
    push string_heap, "GLOBALish"
    push string_heap, "5B6BCDEB97207A8A1AF979F9510A88333D9459D9-1338064432.041"
    push string_heap, "src\\stage2\\gen\\nqp-mo.pm"
    push string_heap, "HLL::Grammar"
    push string_heap, "termish"
    push string_heap, "term"
    push string_heap, "infix"
    push string_heap, "prefix"
    push string_heap, "postfix"
    push string_heap, "circumfix"
    push string_heap, "postcircumfix"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "infixish"
    push string_heap, "prefixish"
    push string_heap, "postfixish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "nulltermish"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "decint"
    push string_heap, "decints"
    push string_heap, "hexint"
    push string_heap, "hexints"
    push string_heap, "octint"
    push string_heap, "octints"
    push string_heap, "binint"
    push string_heap, "binints"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "escale"
    push string_heap, "quote_escape"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "O"
    push string_heap, "panic"
    push string_heap, "peek_delimiters"
    push string_heap, "quote_EXPR"
    push string_heap, "quotemod_check"
    push string_heap, "starter"
    push string_heap, "stopper"
    push string_heap, "split_words"
    push string_heap, "EXPR"
    push string_heap, "EXPR_reduce"
    push string_heap, "ternary"
    push string_heap, "MARKER"
    push string_heap, "MARKED"
    push string_heap, "LANG"
    push string_heap, "HLL::Actions"
    push string_heap, "ints_to_string"
    push string_heap, "CTXSAVE"
    push string_heap, "SET_BLOCK_OUTER_CTX"
    push string_heap, "EXPR"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "termish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "decint"
    push string_heap, "hexint"
    push string_heap, "octint"
    push string_heap, "binint"
    push string_heap, "quote_EXPR"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "HLL::Compiler"
    push string_heap, "@!stages"
    push string_heap, "$!parsegrammar"
    push string_heap, "$!parseactions"
    push string_heap, "@!cmdoptions"
    push string_heap, "$!usage"
    push string_heap, "$!compiler_progname"
    push string_heap, "$!language"
    push string_heap, "%!config"
    push string_heap, "$!user_progname"
    push string_heap, "@!cli-arguments"
    push string_heap, "%!cli-options"
    push string_heap, "new"
    push string_heap, "BUILD"
    push string_heap, "get_exports"
    push string_heap, "get_module"
    push string_heap, "language"
    push string_heap, "compiler"
    push string_heap, "config"
    push string_heap, "load_module"
    push string_heap, "import"
    push string_heap, "autoprint"
    push string_heap, "interactive"
    push string_heap, "eval"
    push string_heap, "ctxsave"
    push string_heap, "panic"
    push string_heap, "stages"
    push string_heap, "parsegrammar"
    push string_heap, "parseactions"
    push string_heap, "interactive_banner"
    push string_heap, "interactive_prompt"
    push string_heap, "compiler_progname"
    push string_heap, "commandline_options"
    push string_heap, "command_line"
    push string_heap, "command_eval"
    push string_heap, "process_args"
    push string_heap, "evalfiles"
    push string_heap, "compile"
    push string_heap, "parse"
    push string_heap, "past"
    push string_heap, "post"
    push string_heap, "pirbegin"
    push string_heap, "pir"
    push string_heap, "evalpmc"
    push string_heap, "dumper"
    push string_heap, "usage"
    push string_heap, "version"
    push string_heap, "show-config"
    push string_heap, "nqpevent"
    push string_heap, "removestage"
    push string_heap, "addstage"
    push string_heap, "parse_name"
    push string_heap, "lineof"
    push string_heap, "user-progname"
    push string_heap, "cli-options"
    push string_heap, "cli-arguments"
    push string_heap, "HLL::CommandLine::Result"
    push string_heap, "@!arguments"
    push string_heap, "%!options"
    push string_heap, "init"
    push string_heap, "arguments"
    push string_heap, "options"
    push string_heap, "add-argument"
    push string_heap, "add-option"
    push string_heap, "HLL::CommandLine::Parser"
    push string_heap, "@!specs"
    push string_heap, "%!options"
    push string_heap, "%!stopper"
    push string_heap, "$!stop-after-first-arg"
    push string_heap, "new"
    push string_heap, "stop-after-first-arg"
    push string_heap, "BUILD"
    push string_heap, "add-stopper"
    push string_heap, "split-option-aliases"
    push string_heap, "add-spec"
    push string_heap, "is-option"
    push string_heap, "wants-value"
    push string_heap, "optional-value"
    push string_heap, "parse"
    push string_heap, "HLL::World"
    push string_heap, "$!sc"
    push string_heap, "$!handle"
    push string_heap, "$!precomp_mode"
    push string_heap, "$!num_code_refs"
    push string_heap, "$!code_ref_blocks"
    push string_heap, "@!load_dependency_tasks"
    push string_heap, "@!fixup_tasks"
    push string_heap, "%!addr_to_slot"
    push string_heap, "new"
    push string_heap, "BUILD"
    push string_heap, "slot_for_object"
    push string_heap, "get_slot_past_for_object"
    push string_heap, "get_slot_past_for_code_ref_at"
    push string_heap, "set_slot_past"
    push string_heap, "set_cur_sc"
    push string_heap, "add_object_to_cur_sc_past"
    push string_heap, "add_object"
    push string_heap, "add_root_code_ref"
    push string_heap, "update_root_code_ref"
    push string_heap, "is_precompilation_mode"
    push string_heap, "add_load_dependency_task"
    push string_heap, "add_fixup_task"
    push string_heap, "get_ref"
    push string_heap, "sc"
    push string_heap, "handle"
    push string_heap, "load_dependency_tasks"
    push string_heap, "fixup_tasks"
    push string_heap, "serialize_and_produce_deserialization_past"
    push string_heap, "P6opaque"
    push string_heap, "NFA"
    push string_heap, "P6opaque"
    push string_heap, "Grammar"
    push string_heap, "Actions"
    push string_heap, "Compiler"
    push string_heap, "CommandLine"
    push string_heap, "World"
    push string_heap, "@!stages"
    push string_heap, "$!parsegrammar"
    push string_heap, "$!parseactions"
    push string_heap, "@!cmdoptions"
    push string_heap, "$!usage"
    push string_heap, "$!compiler_progname"
    push string_heap, "$!language"
    push string_heap, "%!config"
    push string_heap, "$!user_progname"
    push string_heap, "@!cli-arguments"
    push string_heap, "%!cli-options"
    push string_heap, "@!arguments"
    push string_heap, "%!options"
    push string_heap, "@!specs"
    push string_heap, "%!options"
    push string_heap, "%!stopper"
    push string_heap, "$!stop-after-first-arg"
    push string_heap, "$!sc"
    push string_heap, "$!handle"
    push string_heap, "$!precomp_mode"
    push string_heap, "$!num_code_refs"
    push string_heap, "$!code_ref_blocks"
    push string_heap, "@!load_dependency_tasks"
    push string_heap, "@!fixup_tasks"
    push string_heap, "%!addr_to_slot"
    push string_heap, "QRegex"
    push string_heap, "HLL"
    push string_heap, "P6opaque"
    push string_heap, "Result"
    push string_heap, "Parser"
    push string_heap, "CommandLine"
    .const 'Sub' $P2574 = "333_1338064439.457" 
    capture_lex $P2574
    $P114 = $P2574()
    nqp_deserialize_sc $S100, cur_sc, string_heap, $P114
    .const 'LexInfo' $P2745 = "182_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 0
    $P2745."set_static_lexpad_value"("GLOBALish", $P115)
    .const 'LexInfo' $P2746 = "182_1338064439.457" 
    $P2746."finish_static_lexpad"()
    .const 'LexInfo' $P2747 = "182_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 0
    $P2747."set_static_lexpad_value"("$?PACKAGE", $P115)
    .const 'LexInfo' $P2748 = "182_1338064439.457" 
    $P2748."finish_static_lexpad"()
    .const '' $P2749 = "10_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 2
    set_sub_code_object $P2749, $P115
    .const '' $P2750 = "11_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 3
    set_sub_code_object $P2750, $P115
    .const '' $P2751 = "12_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 4
    set_sub_code_object $P2751, $P115
    .const '' $P2752 = "13_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 5
    set_sub_code_object $P2752, $P115
    .const '' $P2753 = "14_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 6
    set_sub_code_object $P2753, $P115
    .const '' $P2754 = "15_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 7
    set_sub_code_object $P2754, $P115
    .const '' $P2755 = "16_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 8
    set_sub_code_object $P2755, $P115
    .const '' $P2756 = "17_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 9
    set_sub_code_object $P2756, $P115
    .const '' $P2757 = "18_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 10
    set_sub_code_object $P2757, $P115
    .const '' $P2758 = "19_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 11
    set_sub_code_object $P2758, $P115
    .const '' $P2759 = "20_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 12
    set_sub_code_object $P2759, $P115
    .const '' $P2760 = "21_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 13
    set_sub_code_object $P2760, $P115
    .const '' $P2761 = "22_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 14
    set_sub_code_object $P2761, $P115
    .const '' $P2762 = "23_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 15
    set_sub_code_object $P2762, $P115
    .const '' $P2763 = "24_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 16
    set_sub_code_object $P2763, $P115
    .const '' $P2764 = "25_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 17
    set_sub_code_object $P2764, $P115
    .const '' $P2765 = "26_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 18
    set_sub_code_object $P2765, $P115
    .const '' $P2766 = "27_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 19
    set_sub_code_object $P2766, $P115
    .const '' $P2767 = "28_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 20
    set_sub_code_object $P2767, $P115
    .const '' $P2768 = "29_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 21
    set_sub_code_object $P2768, $P115
    .const '' $P2769 = "30_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 22
    set_sub_code_object $P2769, $P115
    .const '' $P2770 = "31_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 23
    set_sub_code_object $P2770, $P115
    .const '' $P2771 = "32_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 24
    set_sub_code_object $P2771, $P115
    .const '' $P2772 = "33_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 25
    set_sub_code_object $P2772, $P115
    .const '' $P2773 = "34_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 26
    set_sub_code_object $P2773, $P115
    .const '' $P2774 = "35_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 27
    set_sub_code_object $P2774, $P115
    .const '' $P2775 = "36_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 28
    set_sub_code_object $P2775, $P115
    .const '' $P2776 = "37_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 29
    set_sub_code_object $P2776, $P115
    .const '' $P2777 = "38_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 30
    set_sub_code_object $P2777, $P115
    .const '' $P2778 = "39_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 31
    set_sub_code_object $P2778, $P115
    .const '' $P2779 = "40_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 32
    set_sub_code_object $P2779, $P115
    .const '' $P2780 = "41_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 33
    set_sub_code_object $P2780, $P115
    .const '' $P2781 = "42_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 34
    set_sub_code_object $P2781, $P115
    .const '' $P2782 = "43_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 35
    set_sub_code_object $P2782, $P115
    .const '' $P2783 = "44_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 36
    set_sub_code_object $P2783, $P115
    .const '' $P2784 = "45_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 37
    set_sub_code_object $P2784, $P115
    .const '' $P2785 = "46_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 38
    set_sub_code_object $P2785, $P115
    .const '' $P2786 = "47_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 39
    set_sub_code_object $P2786, $P115
    .const '' $P2787 = "48_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 40
    set_sub_code_object $P2787, $P115
    .const '' $P2788 = "49_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 41
    set_sub_code_object $P2788, $P115
    .const '' $P2789 = "51_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 42
    set_sub_code_object $P2789, $P115
    .const '' $P2790 = "53_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 43
    set_sub_code_object $P2790, $P115
    .const '' $P2791 = "54_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 44
    set_sub_code_object $P2791, $P115
    .const '' $P2792 = "55_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 45
    set_sub_code_object $P2792, $P115
    .const '' $P2793 = "56_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 46
    set_sub_code_object $P2793, $P115
    .const '' $P2794 = "57_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 47
    set_sub_code_object $P2794, $P115
    .const '' $P2795 = "58_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 48
    set_sub_code_object $P2795, $P115
    .const '' $P2796 = "59_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 49
    set_sub_code_object $P2796, $P115
    .const '' $P2797 = "60_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 50
    set_sub_code_object $P2797, $P115
    .const '' $P2798 = "61_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 51
    set_sub_code_object $P2798, $P115
    .const '' $P2799 = "62_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 52
    set_sub_code_object $P2799, $P115
    .const '' $P2800 = "63_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 53
    set_sub_code_object $P2800, $P115
    .const '' $P2801 = "63_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 1
    get_who $P116, $P115
    set $P116["split_words"], $P2801
    .const '' $P2802 = "64_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 54
    set_sub_code_object $P2802, $P115
    .const '' $P2803 = "65_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 55
    set_sub_code_object $P2803, $P115
    .const '' $P2804 = "66_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 56
    set_sub_code_object $P2804, $P115
    .const '' $P2805 = "67_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 57
    set_sub_code_object $P2805, $P115
    .const '' $P2806 = "68_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 58
    set_sub_code_object $P2806, $P115
    .const '' $P2807 = "69_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 59
    set_sub_code_object $P2807, $P115
    .const 'LexInfo' $P2808 = "183_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 1
    $P2808."set_static_lexpad_value"("$?PACKAGE", $P115)
    .const 'LexInfo' $P2809 = "183_1338064439.457" 
    $P2809."finish_static_lexpad"()
    .const 'LexInfo' $P2810 = "183_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 1
    $P2810."set_static_lexpad_value"("$?CLASS", $P115)
    .const 'LexInfo' $P2811 = "183_1338064439.457" 
    $P2811."finish_static_lexpad"()
    .const '' $P2812 = "266_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 60
    get_who $P116, $P115
    set $P116["string_to_int"], $P2812
    .const '' $P2813 = "70_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 61
    set_sub_code_object $P2813, $P115
    .const '' $P2814 = "71_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 62
    set_sub_code_object $P2814, $P115
    .const '' $P2815 = "72_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 63
    set_sub_code_object $P2815, $P115
    .const '' $P2816 = "73_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 64
    set_sub_code_object $P2816, $P115
    .const '' $P2817 = "74_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 65
    set_sub_code_object $P2817, $P115
    .const '' $P2818 = "75_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 66
    set_sub_code_object $P2818, $P115
    .const '' $P2819 = "76_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 67
    set_sub_code_object $P2819, $P115
    .const '' $P2820 = "77_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 68
    set_sub_code_object $P2820, $P115
    .const '' $P2821 = "78_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 69
    set_sub_code_object $P2821, $P115
    .const '' $P2822 = "79_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 70
    set_sub_code_object $P2822, $P115
    .const '' $P2823 = "80_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 71
    set_sub_code_object $P2823, $P115
    .const '' $P2824 = "81_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 72
    set_sub_code_object $P2824, $P115
    .const '' $P2825 = "82_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 73
    set_sub_code_object $P2825, $P115
    .const '' $P2826 = "83_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 74
    set_sub_code_object $P2826, $P115
    .const '' $P2827 = "84_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 75
    set_sub_code_object $P2827, $P115
    .const '' $P2828 = "85_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 76
    set_sub_code_object $P2828, $P115
    .const '' $P2829 = "86_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 77
    set_sub_code_object $P2829, $P115
    .const '' $P2830 = "87_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 78
    set_sub_code_object $P2830, $P115
    .const '' $P2831 = "88_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 79
    set_sub_code_object $P2831, $P115
    .const '' $P2832 = "89_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 80
    set_sub_code_object $P2832, $P115
    .const '' $P2833 = "90_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 81
    set_sub_code_object $P2833, $P115
    .const '' $P2834 = "91_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 82
    set_sub_code_object $P2834, $P115
    .const '' $P2835 = "92_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 83
    set_sub_code_object $P2835, $P115
    .const '' $P2836 = "93_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 84
    set_sub_code_object $P2836, $P115
    .const '' $P2837 = "94_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 85
    set_sub_code_object $P2837, $P115
    .const '' $P2838 = "95_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 86
    set_sub_code_object $P2838, $P115
    .const '' $P2839 = "96_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 87
    set_sub_code_object $P2839, $P115
    .const '' $P2840 = "97_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 88
    set_sub_code_object $P2840, $P115
    .const '' $P2841 = "98_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 89
    set_sub_code_object $P2841, $P115
    .const '' $P2842 = "99_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 90
    set_sub_code_object $P2842, $P115
    .const '' $P2843 = "100_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 91
    set_sub_code_object $P2843, $P115
    .const '' $P2844 = "101_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 92
    set_sub_code_object $P2844, $P115
    .const '' $P2845 = "102_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 93
    set_sub_code_object $P2845, $P115
    .const 'LexInfo' $P2846 = "265_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 60
    $P2846."set_static_lexpad_value"("$?PACKAGE", $P115)
    .const 'LexInfo' $P2847 = "265_1338064439.457" 
    $P2847."finish_static_lexpad"()
    .const 'LexInfo' $P2848 = "265_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 60
    $P2848."set_static_lexpad_value"("$?CLASS", $P115)
    .const 'LexInfo' $P2849 = "265_1338064439.457" 
    $P2849."finish_static_lexpad"()
    .const '' $P2850 = "103_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 95
    set_sub_code_object $P2850, $P115
    .const '' $P2851 = "104_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 96
    set_sub_code_object $P2851, $P115
    .const '' $P2852 = "105_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 97
    set_sub_code_object $P2852, $P115
    .const '' $P2853 = "106_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 98
    set_sub_code_object $P2853, $P115
    .const '' $P2854 = "107_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 99
    set_sub_code_object $P2854, $P115
    .const '' $P2855 = "108_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 100
    set_sub_code_object $P2855, $P115
    .const '' $P2856 = "109_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 101
    set_sub_code_object $P2856, $P115
    .const '' $P2857 = "110_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 102
    set_sub_code_object $P2857, $P115
    .const '' $P2858 = "111_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 103
    set_sub_code_object $P2858, $P115
    .const '' $P2859 = "112_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 104
    set_sub_code_object $P2859, $P115
    .const '' $P2860 = "113_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 105
    set_sub_code_object $P2860, $P115
    .const '' $P2861 = "114_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 106
    set_sub_code_object $P2861, $P115
    .const '' $P2862 = "115_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 107
    set_sub_code_object $P2862, $P115
    .const '' $P2863 = "116_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 108
    set_sub_code_object $P2863, $P115
    .const '' $P2864 = "117_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 109
    set_sub_code_object $P2864, $P115
    .const '' $P2865 = "118_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 110
    set_sub_code_object $P2865, $P115
    .const '' $P2866 = "119_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 111
    set_sub_code_object $P2866, $P115
    .const '' $P2867 = "120_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 112
    set_sub_code_object $P2867, $P115
    .const '' $P2868 = "121_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 113
    set_sub_code_object $P2868, $P115
    .const '' $P2869 = "122_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 114
    set_sub_code_object $P2869, $P115
    .const '' $P2870 = "123_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 115
    set_sub_code_object $P2870, $P115
    .const '' $P2871 = "124_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 116
    set_sub_code_object $P2871, $P115
    .const '' $P2872 = "125_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 117
    set_sub_code_object $P2872, $P115
    .const '' $P2873 = "126_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 118
    set_sub_code_object $P2873, $P115
    .const '' $P2874 = "127_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 119
    set_sub_code_object $P2874, $P115
    .const '' $P2875 = "128_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 120
    set_sub_code_object $P2875, $P115
    .const '' $P2876 = "129_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 121
    set_sub_code_object $P2876, $P115
    .const '' $P2877 = "130_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 122
    set_sub_code_object $P2877, $P115
    .const '' $P2878 = "131_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 123
    set_sub_code_object $P2878, $P115
    .const '' $P2879 = "132_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 124
    set_sub_code_object $P2879, $P115
    .const '' $P2880 = "133_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 125
    set_sub_code_object $P2880, $P115
    .const '' $P2881 = "134_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 126
    set_sub_code_object $P2881, $P115
    .const '' $P2882 = "135_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 127
    set_sub_code_object $P2882, $P115
    .const '' $P2883 = "136_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 128
    set_sub_code_object $P2883, $P115
    .const '' $P2884 = "137_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 129
    set_sub_code_object $P2884, $P115
    .const '' $P2885 = "138_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 130
    set_sub_code_object $P2885, $P115
    .const '' $P2886 = "139_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 131
    set_sub_code_object $P2886, $P115
    .const '' $P2887 = "140_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 132
    set_sub_code_object $P2887, $P115
    .const '' $P2888 = "141_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 133
    set_sub_code_object $P2888, $P115
    .const '' $P2889 = "142_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 134
    set_sub_code_object $P2889, $P115
    .const '' $P2890 = "143_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 135
    set_sub_code_object $P2890, $P115
    .const '' $P2891 = "144_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 136
    set_sub_code_object $P2891, $P115
    .const '' $P2892 = "145_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 137
    set_sub_code_object $P2892, $P115
    .const '' $P2893 = "146_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 138
    set_sub_code_object $P2893, $P115
    .const 'LexInfo' $P2894 = "277_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    $P2894."set_static_lexpad_value"("$?PACKAGE", $P115)
    .const 'LexInfo' $P2895 = "277_1338064439.457" 
    $P2895."finish_static_lexpad"()
    .const 'LexInfo' $P2896 = "277_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    $P2896."set_static_lexpad_value"("$?CLASS", $P115)
    .const 'LexInfo' $P2897 = "277_1338064439.457" 
    $P2897."finish_static_lexpad"()
    .const '' $P2898 = "147_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 140
    set_sub_code_object $P2898, $P115
    .const '' $P2899 = "148_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 141
    set_sub_code_object $P2899, $P115
    .const '' $P2900 = "149_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 142
    set_sub_code_object $P2900, $P115
    .const '' $P2901 = "150_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 143
    set_sub_code_object $P2901, $P115
    .const '' $P2902 = "151_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 144
    set_sub_code_object $P2902, $P115
    .const 'LexInfo' $P2903 = "318_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 139
    $P2903."set_static_lexpad_value"("$?PACKAGE", $P115)
    .const 'LexInfo' $P2904 = "318_1338064439.457" 
    $P2904."finish_static_lexpad"()
    .const 'LexInfo' $P2905 = "318_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 139
    $P2905."set_static_lexpad_value"("$?CLASS", $P115)
    .const 'LexInfo' $P2906 = "318_1338064439.457" 
    $P2906."finish_static_lexpad"()
    .const '' $P2907 = "152_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 146
    set_sub_code_object $P2907, $P115
    .const '' $P2908 = "153_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 147
    set_sub_code_object $P2908, $P115
    .const '' $P2909 = "154_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 148
    set_sub_code_object $P2909, $P115
    .const '' $P2910 = "155_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 149
    set_sub_code_object $P2910, $P115
    .const '' $P2911 = "156_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 150
    set_sub_code_object $P2911, $P115
    .const '' $P2912 = "157_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 151
    set_sub_code_object $P2912, $P115
    .const '' $P2913 = "158_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 152
    set_sub_code_object $P2913, $P115
    .const '' $P2914 = "159_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 153
    set_sub_code_object $P2914, $P115
    .const '' $P2915 = "160_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 154
    set_sub_code_object $P2915, $P115
    .const '' $P2916 = "161_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 155
    set_sub_code_object $P2916, $P115
    .const 'LexInfo' $P2917 = "319_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 145
    $P2917."set_static_lexpad_value"("$?PACKAGE", $P115)
    .const 'LexInfo' $P2918 = "319_1338064439.457" 
    $P2918."finish_static_lexpad"()
    .const 'LexInfo' $P2919 = "319_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 145
    $P2919."set_static_lexpad_value"("$?CLASS", $P115)
    .const 'LexInfo' $P2920 = "319_1338064439.457" 
    $P2920."finish_static_lexpad"()
    .const '' $P2921 = "162_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 157
    set_sub_code_object $P2921, $P115
    .const '' $P2922 = "163_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 158
    set_sub_code_object $P2922, $P115
    .const '' $P2923 = "164_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 159
    set_sub_code_object $P2923, $P115
    .const '' $P2924 = "165_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 160
    set_sub_code_object $P2924, $P115
    .const '' $P2925 = "166_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 161
    set_sub_code_object $P2925, $P115
    .const '' $P2926 = "167_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 162
    set_sub_code_object $P2926, $P115
    .const '' $P2927 = "168_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 163
    set_sub_code_object $P2927, $P115
    .const '' $P2928 = "169_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 164
    set_sub_code_object $P2928, $P115
    .const '' $P2929 = "170_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 165
    set_sub_code_object $P2929, $P115
    .const '' $P2930 = "171_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 166
    set_sub_code_object $P2930, $P115
    .const '' $P2931 = "172_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 167
    set_sub_code_object $P2931, $P115
    .const '' $P2932 = "173_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 168
    set_sub_code_object $P2932, $P115
    .const '' $P2933 = "174_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 169
    set_sub_code_object $P2933, $P115
    .const '' $P2934 = "175_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 170
    set_sub_code_object $P2934, $P115
    .const '' $P2935 = "176_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 171
    set_sub_code_object $P2935, $P115
    .const '' $P2936 = "177_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 172
    set_sub_code_object $P2936, $P115
    .const '' $P2937 = "178_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 173
    set_sub_code_object $P2937, $P115
    .const '' $P2938 = "179_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 174
    set_sub_code_object $P2938, $P115
    .const '' $P2939 = "180_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 175
    set_sub_code_object $P2939, $P115
    .const '' $P2940 = "181_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 176
    set_sub_code_object $P2940, $P115
    .const 'LexInfo' $P2941 = "329_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    $P2941."set_static_lexpad_value"("$?PACKAGE", $P115)
    .const 'LexInfo' $P2942 = "329_1338064439.457" 
    $P2942."finish_static_lexpad"()
    .const 'LexInfo' $P2943 = "329_1338064439.457" 
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    $P2943."set_static_lexpad_value"("$?CLASS", $P115)
    .const 'LexInfo' $P2944 = "329_1338064439.457" 
    $P2944."finish_static_lexpad"()
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 0
    set_hll_global "GLOBAL", $P115
.end


.HLL "nqp"

.namespace []
.sub "_block2573"  :anon :subid("333_1338064439.457") :outer("182_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 0
    .const 'Sub' $P2575 = "10_1338064439.457" 
    .const 'Sub' $P2576 = "11_1338064439.457" 
    .const 'Sub' $P2577 = "12_1338064439.457" 
    .const 'Sub' $P2578 = "13_1338064439.457" 
    .const 'Sub' $P2579 = "14_1338064439.457" 
    .const 'Sub' $P2580 = "15_1338064439.457" 
    .const 'Sub' $P2581 = "16_1338064439.457" 
    .const 'Sub' $P2582 = "17_1338064439.457" 
    .const 'Sub' $P2583 = "18_1338064439.457" 
    .const 'Sub' $P2584 = "19_1338064439.457" 
    .const 'Sub' $P2585 = "20_1338064439.457" 
    .const 'Sub' $P2586 = "21_1338064439.457" 
    .const 'Sub' $P2587 = "22_1338064439.457" 
    .const 'Sub' $P2588 = "23_1338064439.457" 
    .const 'Sub' $P2589 = "24_1338064439.457" 
    .const 'Sub' $P2590 = "25_1338064439.457" 
    .const 'Sub' $P2591 = "26_1338064439.457" 
    .const 'Sub' $P2592 = "27_1338064439.457" 
    .const 'Sub' $P2593 = "28_1338064439.457" 
    .const 'Sub' $P2594 = "29_1338064439.457" 
    .const 'Sub' $P2595 = "30_1338064439.457" 
    .const 'Sub' $P2596 = "31_1338064439.457" 
    .const 'Sub' $P2597 = "32_1338064439.457" 
    .const 'Sub' $P2598 = "33_1338064439.457" 
    .const 'Sub' $P2599 = "34_1338064439.457" 
    .const 'Sub' $P2600 = "35_1338064439.457" 
    .const 'Sub' $P2601 = "36_1338064439.457" 
    .const 'Sub' $P2602 = "37_1338064439.457" 
    .const 'Sub' $P2603 = "38_1338064439.457" 
    .const 'Sub' $P2604 = "39_1338064439.457" 
    .const 'Sub' $P2605 = "40_1338064439.457" 
    .const 'Sub' $P2606 = "41_1338064439.457" 
    .const 'Sub' $P2607 = "42_1338064439.457" 
    .const 'Sub' $P2608 = "43_1338064439.457" 
    .const 'Sub' $P2609 = "44_1338064439.457" 
    .const 'Sub' $P2610 = "45_1338064439.457" 
    .const 'Sub' $P2611 = "46_1338064439.457" 
    .const 'Sub' $P2612 = "47_1338064439.457" 
    .const 'Sub' $P2613 = "48_1338064439.457" 
    .const 'Sub' $P2614 = "49_1338064439.457" 
    .const 'Sub' $P2615 = "51_1338064439.457" 
    .const 'Sub' $P2616 = "53_1338064439.457" 
    .const 'Sub' $P2617 = "54_1338064439.457" 
    .const 'Sub' $P2618 = "55_1338064439.457" 
    .const 'Sub' $P2619 = "56_1338064439.457" 
    .const 'Sub' $P2620 = "57_1338064439.457" 
    .const 'Sub' $P2621 = "58_1338064439.457" 
    .const 'Sub' $P2622 = "59_1338064439.457" 
    .const 'Sub' $P2623 = "60_1338064439.457" 
    .const 'Sub' $P2624 = "61_1338064439.457" 
    .const 'Sub' $P2625 = "62_1338064439.457" 
    .const 'Sub' $P2626 = "63_1338064439.457" 
    .const 'Sub' $P2627 = "64_1338064439.457" 
    .const 'Sub' $P2628 = "65_1338064439.457" 
    .const 'Sub' $P2629 = "66_1338064439.457" 
    .const 'Sub' $P2630 = "67_1338064439.457" 
    .const 'Sub' $P2631 = "68_1338064439.457" 
    .const 'Sub' $P2632 = "69_1338064439.457" 
    .const 'Sub' $P2633 = "70_1338064439.457" 
    .const 'Sub' $P2634 = "71_1338064439.457" 
    .const 'Sub' $P2635 = "72_1338064439.457" 
    .const 'Sub' $P2636 = "73_1338064439.457" 
    .const 'Sub' $P2637 = "74_1338064439.457" 
    .const 'Sub' $P2638 = "75_1338064439.457" 
    .const 'Sub' $P2639 = "76_1338064439.457" 
    .const 'Sub' $P2640 = "77_1338064439.457" 
    .const 'Sub' $P2641 = "78_1338064439.457" 
    .const 'Sub' $P2642 = "79_1338064439.457" 
    .const 'Sub' $P2643 = "80_1338064439.457" 
    .const 'Sub' $P2644 = "81_1338064439.457" 
    .const 'Sub' $P2645 = "82_1338064439.457" 
    .const 'Sub' $P2646 = "83_1338064439.457" 
    .const 'Sub' $P2647 = "84_1338064439.457" 
    .const 'Sub' $P2648 = "85_1338064439.457" 
    .const 'Sub' $P2649 = "86_1338064439.457" 
    .const 'Sub' $P2650 = "87_1338064439.457" 
    .const 'Sub' $P2651 = "88_1338064439.457" 
    .const 'Sub' $P2652 = "89_1338064439.457" 
    .const 'Sub' $P2653 = "90_1338064439.457" 
    .const 'Sub' $P2654 = "91_1338064439.457" 
    .const 'Sub' $P2655 = "92_1338064439.457" 
    .const 'Sub' $P2656 = "93_1338064439.457" 
    .const 'Sub' $P2657 = "94_1338064439.457" 
    .const 'Sub' $P2658 = "95_1338064439.457" 
    .const 'Sub' $P2659 = "96_1338064439.457" 
    .const 'Sub' $P2660 = "97_1338064439.457" 
    .const 'Sub' $P2661 = "98_1338064439.457" 
    .const 'Sub' $P2662 = "99_1338064439.457" 
    .const 'Sub' $P2663 = "100_1338064439.457" 
    .const 'Sub' $P2664 = "101_1338064439.457" 
    .const 'Sub' $P2665 = "102_1338064439.457" 
    .const 'Sub' $P2666 = "103_1338064439.457" 
    .const 'Sub' $P2667 = "104_1338064439.457" 
    .const 'Sub' $P2668 = "105_1338064439.457" 
    .const 'Sub' $P2669 = "106_1338064439.457" 
    .const 'Sub' $P2670 = "107_1338064439.457" 
    .const 'Sub' $P2671 = "108_1338064439.457" 
    .const 'Sub' $P2672 = "109_1338064439.457" 
    .const 'Sub' $P2673 = "110_1338064439.457" 
    .const 'Sub' $P2674 = "111_1338064439.457" 
    .const 'Sub' $P2675 = "112_1338064439.457" 
    .const 'Sub' $P2676 = "113_1338064439.457" 
    .const 'Sub' $P2677 = "114_1338064439.457" 
    .const 'Sub' $P2678 = "115_1338064439.457" 
    .const 'Sub' $P2679 = "116_1338064439.457" 
    .const 'Sub' $P2680 = "117_1338064439.457" 
    .const 'Sub' $P2681 = "118_1338064439.457" 
    .const 'Sub' $P2682 = "119_1338064439.457" 
    .const 'Sub' $P2683 = "120_1338064439.457" 
    .const 'Sub' $P2684 = "121_1338064439.457" 
    .const 'Sub' $P2685 = "122_1338064439.457" 
    .const 'Sub' $P2686 = "123_1338064439.457" 
    .const 'Sub' $P2687 = "124_1338064439.457" 
    .const 'Sub' $P2688 = "125_1338064439.457" 
    .const 'Sub' $P2689 = "126_1338064439.457" 
    .const 'Sub' $P2690 = "127_1338064439.457" 
    .const 'Sub' $P2691 = "128_1338064439.457" 
    .const 'Sub' $P2692 = "129_1338064439.457" 
    .const 'Sub' $P2693 = "130_1338064439.457" 
    .const 'Sub' $P2694 = "131_1338064439.457" 
    .const 'Sub' $P2695 = "132_1338064439.457" 
    .const 'Sub' $P2696 = "133_1338064439.457" 
    .const 'Sub' $P2697 = "134_1338064439.457" 
    .const 'Sub' $P2698 = "135_1338064439.457" 
    .const 'Sub' $P2699 = "136_1338064439.457" 
    .const 'Sub' $P2700 = "137_1338064439.457" 
    .const 'Sub' $P2701 = "138_1338064439.457" 
    .const 'Sub' $P2702 = "139_1338064439.457" 
    .const 'Sub' $P2703 = "140_1338064439.457" 
    .const 'Sub' $P2704 = "141_1338064439.457" 
    .const 'Sub' $P2705 = "142_1338064439.457" 
    .const 'Sub' $P2706 = "143_1338064439.457" 
    .const 'Sub' $P2707 = "144_1338064439.457" 
    .const 'Sub' $P2708 = "145_1338064439.457" 
    .const 'Sub' $P2709 = "146_1338064439.457" 
    .const 'Sub' $P2710 = "147_1338064439.457" 
    .const 'Sub' $P2711 = "148_1338064439.457" 
    .const 'Sub' $P2712 = "149_1338064439.457" 
    .const 'Sub' $P2713 = "150_1338064439.457" 
    .const 'Sub' $P2714 = "151_1338064439.457" 
    .const 'Sub' $P2715 = "152_1338064439.457" 
    .const 'Sub' $P2716 = "153_1338064439.457" 
    .const 'Sub' $P2717 = "154_1338064439.457" 
    .const 'Sub' $P2718 = "155_1338064439.457" 
    .const 'Sub' $P2719 = "156_1338064439.457" 
    .const 'Sub' $P2720 = "157_1338064439.457" 
    .const 'Sub' $P2721 = "158_1338064439.457" 
    .const 'Sub' $P2722 = "159_1338064439.457" 
    .const 'Sub' $P2723 = "160_1338064439.457" 
    .const 'Sub' $P2724 = "161_1338064439.457" 
    .const 'Sub' $P2725 = "162_1338064439.457" 
    .const 'Sub' $P2726 = "163_1338064439.457" 
    .const 'Sub' $P2727 = "164_1338064439.457" 
    .const 'Sub' $P2728 = "165_1338064439.457" 
    .const 'Sub' $P2729 = "166_1338064439.457" 
    .const 'Sub' $P2730 = "167_1338064439.457" 
    .const 'Sub' $P2731 = "168_1338064439.457" 
    .const 'Sub' $P2732 = "169_1338064439.457" 
    .const 'Sub' $P2733 = "170_1338064439.457" 
    .const 'Sub' $P2734 = "171_1338064439.457" 
    .const 'Sub' $P2735 = "172_1338064439.457" 
    .const 'Sub' $P2736 = "173_1338064439.457" 
    .const 'Sub' $P2737 = "174_1338064439.457" 
    .const 'Sub' $P2738 = "175_1338064439.457" 
    .const 'Sub' $P2739 = "176_1338064439.457" 
    .const 'Sub' $P2740 = "177_1338064439.457" 
    .const 'Sub' $P2741 = "178_1338064439.457" 
    .const 'Sub' $P2742 = "179_1338064439.457" 
    .const 'Sub' $P2743 = "180_1338064439.457" 
    .const 'Sub' $P2744 = "181_1338064439.457" 
    new $P113, "ResizablePMCArray"
    push $P113, $P2575
    push $P113, $P2576
    push $P113, $P2577
    push $P113, $P2578
    push $P113, $P2579
    push $P113, $P2580
    push $P113, $P2581
    push $P113, $P2582
    push $P113, $P2583
    push $P113, $P2584
    push $P113, $P2585
    push $P113, $P2586
    push $P113, $P2587
    push $P113, $P2588
    push $P113, $P2589
    push $P113, $P2590
    push $P113, $P2591
    push $P113, $P2592
    push $P113, $P2593
    push $P113, $P2594
    push $P113, $P2595
    push $P113, $P2596
    push $P113, $P2597
    push $P113, $P2598
    push $P113, $P2599
    push $P113, $P2600
    push $P113, $P2601
    push $P113, $P2602
    push $P113, $P2603
    push $P113, $P2604
    push $P113, $P2605
    push $P113, $P2606
    push $P113, $P2607
    push $P113, $P2608
    push $P113, $P2609
    push $P113, $P2610
    push $P113, $P2611
    push $P113, $P2612
    push $P113, $P2613
    push $P113, $P2614
    push $P113, $P2615
    push $P113, $P2616
    push $P113, $P2617
    push $P113, $P2618
    push $P113, $P2619
    push $P113, $P2620
    push $P113, $P2621
    push $P113, $P2622
    push $P113, $P2623
    push $P113, $P2624
    push $P113, $P2625
    push $P113, $P2626
    push $P113, $P2627
    push $P113, $P2628
    push $P113, $P2629
    push $P113, $P2630
    push $P113, $P2631
    push $P113, $P2632
    push $P113, $P2633
    push $P113, $P2634
    push $P113, $P2635
    push $P113, $P2636
    push $P113, $P2637
    push $P113, $P2638
    push $P113, $P2639
    push $P113, $P2640
    push $P113, $P2641
    push $P113, $P2642
    push $P113, $P2643
    push $P113, $P2644
    push $P113, $P2645
    push $P113, $P2646
    push $P113, $P2647
    push $P113, $P2648
    push $P113, $P2649
    push $P113, $P2650
    push $P113, $P2651
    push $P113, $P2652
    push $P113, $P2653
    push $P113, $P2654
    push $P113, $P2655
    push $P113, $P2656
    push $P113, $P2657
    push $P113, $P2658
    push $P113, $P2659
    push $P113, $P2660
    push $P113, $P2661
    push $P113, $P2662
    push $P113, $P2663
    push $P113, $P2664
    push $P113, $P2665
    push $P113, $P2666
    push $P113, $P2667
    push $P113, $P2668
    push $P113, $P2669
    push $P113, $P2670
    push $P113, $P2671
    push $P113, $P2672
    push $P113, $P2673
    push $P113, $P2674
    push $P113, $P2675
    push $P113, $P2676
    push $P113, $P2677
    push $P113, $P2678
    push $P113, $P2679
    push $P113, $P2680
    push $P113, $P2681
    push $P113, $P2682
    push $P113, $P2683
    push $P113, $P2684
    push $P113, $P2685
    push $P113, $P2686
    push $P113, $P2687
    push $P113, $P2688
    push $P113, $P2689
    push $P113, $P2690
    push $P113, $P2691
    push $P113, $P2692
    push $P113, $P2693
    push $P113, $P2694
    push $P113, $P2695
    push $P113, $P2696
    push $P113, $P2697
    push $P113, $P2698
    push $P113, $P2699
    push $P113, $P2700
    push $P113, $P2701
    push $P113, $P2702
    push $P113, $P2703
    push $P113, $P2704
    push $P113, $P2705
    push $P113, $P2706
    push $P113, $P2707
    push $P113, $P2708
    push $P113, $P2709
    push $P113, $P2710
    push $P113, $P2711
    push $P113, $P2712
    push $P113, $P2713
    push $P113, $P2714
    push $P113, $P2715
    push $P113, $P2716
    push $P113, $P2717
    push $P113, $P2718
    push $P113, $P2719
    push $P113, $P2720
    push $P113, $P2721
    push $P113, $P2722
    push $P113, $P2723
    push $P113, $P2724
    push $P113, $P2725
    push $P113, $P2726
    push $P113, $P2727
    push $P113, $P2728
    push $P113, $P2729
    push $P113, $P2730
    push $P113, $P2731
    push $P113, $P2732
    push $P113, $P2733
    push $P113, $P2734
    push $P113, $P2735
    push $P113, $P2736
    push $P113, $P2737
    push $P113, $P2738
    push $P113, $P2739
    push $P113, $P2740
    push $P113, $P2741
    push $P113, $P2742
    push $P113, $P2743
    push $P113, $P2744
    .return ($P113)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "_block1006"  :subid("183_1338064439.457") :outer("182_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 7
    .const 'Sub' $P1338 = "69_1338064439.457" 
    capture_lex $P1338
    .const 'Sub' $P1328 = "68_1338064439.457" 
    capture_lex $P1328
    .const 'Sub' $P1320 = "67_1338064439.457" 
    capture_lex $P1320
    .const 'Sub' $P1312 = "66_1338064439.457" 
    capture_lex $P1312
    .const 'Sub' $P1308 = "65_1338064439.457" 
    capture_lex $P1308
    .const 'Sub' $P1305 = "64_1338064439.457" 
    capture_lex $P1305
    .const 'Sub' $P1302 = "63_1338064439.457" 
    capture_lex $P1302
    .const 'Sub' $P1300 = "62_1338064439.457" 
    capture_lex $P1300
    .const 'Sub' $P1298 = "61_1338064439.457" 
    capture_lex $P1298
    .const 'Sub' $P1289 = "60_1338064439.457" 
    capture_lex $P1289
    .const 'Sub' $P1276 = "59_1338064439.457" 
    capture_lex $P1276
    .const 'Sub' $P1272 = "58_1338064439.457" 
    capture_lex $P1272
    .const 'Sub' $P1261 = "57_1338064439.457" 
    capture_lex $P1261
    .const 'Sub' $P1257 = "56_1338064439.457" 
    capture_lex $P1257
    .const 'Sub' $P1251 = "55_1338064439.457" 
    capture_lex $P1251
    .const 'Sub' $P1245 = "54_1338064439.457" 
    capture_lex $P1245
    .const 'Sub' $P1235 = "53_1338064439.457" 
    capture_lex $P1235
    .const 'Sub' $P1220 = "51_1338064439.457" 
    capture_lex $P1220
    .const 'Sub' $P1214 = "49_1338064439.457" 
    capture_lex $P1214
    .const 'Sub' $P1208 = "48_1338064439.457" 
    capture_lex $P1208
    .const 'Sub' $P1202 = "47_1338064439.457" 
    capture_lex $P1202
    .const 'Sub' $P1196 = "46_1338064439.457" 
    capture_lex $P1196
    .const 'Sub' $P1190 = "45_1338064439.457" 
    capture_lex $P1190
    .const 'Sub' $P1184 = "44_1338064439.457" 
    capture_lex $P1184
    .const 'Sub' $P1178 = "43_1338064439.457" 
    capture_lex $P1178
    .const 'Sub' $P1172 = "42_1338064439.457" 
    capture_lex $P1172
    .const 'Sub' $P1166 = "41_1338064439.457" 
    capture_lex $P1166
    .const 'Sub' $P1160 = "40_1338064439.457" 
    capture_lex $P1160
    .const 'Sub' $P1154 = "39_1338064439.457" 
    capture_lex $P1154
    .const 'Sub' $P1148 = "38_1338064439.457" 
    capture_lex $P1148
    .const 'Sub' $P1140 = "36_1338064439.457" 
    capture_lex $P1140
    .const 'Sub' $P1134 = "35_1338064439.457" 
    capture_lex $P1134
    .const 'Sub' $P1128 = "34_1338064439.457" 
    capture_lex $P1128
    .const 'Sub' $P1122 = "33_1338064439.457" 
    capture_lex $P1122
    .const 'Sub' $P1116 = "32_1338064439.457" 
    capture_lex $P1116
    .const 'Sub' $P1110 = "31_1338064439.457" 
    capture_lex $P1110
    .const 'Sub' $P1104 = "30_1338064439.457" 
    capture_lex $P1104
    .const 'Sub' $P1098 = "29_1338064439.457" 
    capture_lex $P1098
    .const 'Sub' $P1092 = "28_1338064439.457" 
    capture_lex $P1092
    .const 'Sub' $P1086 = "27_1338064439.457" 
    capture_lex $P1086
    .const 'Sub' $P1080 = "26_1338064439.457" 
    capture_lex $P1080
    .const 'Sub' $P1075 = "25_1338064439.457" 
    capture_lex $P1075
    .const 'Sub' $P1069 = "24_1338064439.457" 
    capture_lex $P1069
    .const 'Sub' $P1066 = "23_1338064439.457" 
    capture_lex $P1066
    .const 'Sub' $P1060 = "22_1338064439.457" 
    capture_lex $P1060
    .const 'Sub' $P1054 = "21_1338064439.457" 
    capture_lex $P1054
    .const 'Sub' $P1048 = "20_1338064439.457" 
    capture_lex $P1048
    .const 'Sub' $P1042 = "19_1338064439.457" 
    capture_lex $P1042
    .const 'Sub' $P1036 = "18_1338064439.457" 
    capture_lex $P1036
    .const 'Sub' $P1030 = "17_1338064439.457" 
    capture_lex $P1030
    .const 'Sub' $P1012 = "10_1338064439.457" 
    capture_lex $P1012
.annotate 'line', 8
    new $P101, "Undef"
    set $P1008, $P101
    .lex "$brackets", $P1008
.annotate 'line', 9
    new $P102, "Undef"
    set $P1009, $P102
    .lex "$cursor_class", $P1009
    .lex "$?PACKAGE", $P1010
    .lex "$?CLASS", $P1011
.annotate 'line', 8
    new $P103, "String"
    assign $P103, unicode:"<>[](){}\x{ab}\x{bb}\u0f3a\u0f3b\u0f3c\u0f3d\u169b\u169c\u2045\u2046\u207d\u207e\u208d\u208e\u2329\u232a\u2768\u2769\u276a\u276b\u276c\u276d\u276e\u276f\u2770\u2771\u2772\u2773\u2774\u2775\u27c5\u27c6\u27e6\u27e7\u27e8\u27e9\u27ea\u27eb\u2983\u2984\u2985\u2986\u2987\u2988\u2989\u298a\u298b\u298c\u298d\u298e\u298f\u2990\u2991\u2992\u2993\u2994\u2995\u2996\u2997\u2998\u29d8\u29d9\u29da\u29db\u29fc\u29fd\u3008\u3009\u300a\u300b\u300c\u300d\u300e\u300f\u3010\u3011\u3014\u3015\u3016\u3017\u3018\u3019\u301a\u301b\u301d\u301e\ufd3e\ufd3f\ufe17\ufe18\ufe35\ufe36\ufe37\ufe38\ufe39\ufe3a\ufe3b\ufe3c\ufe3d\ufe3e\ufe3f\ufe40\ufe41\ufe42\ufe43\ufe44\ufe47\ufe48\ufe59\ufe5a\ufe5b\ufe5c\ufe5d\ufe5e\uff08\uff09\uff3b\uff3d\uff5b\uff5d\uff5f\uff60\uff62\uff63"
    set $P1008, $P103
.annotate 'line', 9
    set $P103, $P1010
    get_who $P104, $P103
    set $P107, $P104["NQPCursor"]
    unless_null $P107, vivify_335
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["NQPCursor"]
  vivify_335:
    set $P1009, $P107
.annotate 'line', 839
    .const 'Sub' $P1338 = "69_1338064439.457" 
    newclosure $P1344, $P1338
.annotate 'line', 7
    .return ($P1344)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "termish"  :subid("10_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1013
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 11
    .lex "self", param_1013
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1014
    .lex "$/", $P1015
    .local string rx10_tgt
    .local int rx10_pos
    .local int rx10_off
    .local int rx10_eos
    .local int rx10_rep
    .local pmc rx10_cur
    .local pmc rx10_curclass
    .local pmc rx10_bstack
    .local pmc rx10_cstack
    (rx10_cur, rx10_tgt, rx10_pos, rx10_curclass, rx10_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx10_cur
    length rx10_eos, rx10_tgt
    eq $I19, 1, rx10_restart
    repr_get_attr_int $I11, self, rx10_curclass, "$!from"
    ne $I11, -1, rxscan11_done
    goto rxscan11_scan
  rxscan11_loop:
    inc rx10_pos
    gt rx10_pos, rx10_eos, rx10_fail
    repr_bind_attr_int rx10_cur, rx10_curclass, "$!from", rx10_pos
  rxscan11_scan:
    nqp_rxmark rx10_bstack, rxscan11_loop, rx10_pos, 0
  rxscan11_done:
  # rx rxquantr12 ** 0..-1
    nqp_rxmark rx10_bstack, rxquantr12_done, rx10_pos, 0
  rxquantr12_loop:
    repr_bind_attr_int rx10_cur, rx10_curclass, "$!pos", rx10_pos
    $P11 = rx10_cur."prefixish"()
    repr_get_attr_int $I11, $P11, rx10_curclass, "$!pos"
    lt $I11, 0, rx10_fail
    goto rxsubrule13_pass
  rxsubrule13_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx10_curclass, "$!pos"
    lt $I11, 0, rx10_fail
  rxsubrule13_pass:
    rx10_cstack = rx10_cur."!cursor_capture"($P11, "prefixish")
    set_addr $I11, rxsubrule13_back
    push rx10_bstack, $I11
    push rx10_bstack, 0
    push rx10_bstack, rx10_pos
    elements $I11, rx10_cstack
    push rx10_bstack, $I11
    repr_get_attr_int rx10_pos, $P11, rx10_curclass, "$!pos"
    nqp_rxpeek $I19, rx10_bstack, rxquantr12_done
    inc $I19
    inc $I19
    set rx10_rep, rx10_bstack[$I19]
    nqp_rxcommit rx10_bstack, rxquantr12_done
    inc rx10_rep
    nqp_rxmark rx10_bstack, rxquantr12_done, rx10_pos, rx10_rep
    goto rxquantr12_loop
  rxquantr12_done:
    repr_bind_attr_int rx10_cur, rx10_curclass, "$!pos", rx10_pos
    $P11 = rx10_cur."term"()
    repr_get_attr_int $I11, $P11, rx10_curclass, "$!pos"
    lt $I11, 0, rx10_fail
    nqp_rxmark rx10_bstack, rxsubrule14_pass, -1, 0
  rxsubrule14_pass:
    rx10_cstack = rx10_cur."!cursor_capture"($P11, "term")
    repr_get_attr_int rx10_pos, $P11, rx10_curclass, "$!pos"
  # rx rxquantr15 ** 0..-1
    nqp_rxmark rx10_bstack, rxquantr15_done, rx10_pos, 0
  rxquantr15_loop:
    repr_bind_attr_int rx10_cur, rx10_curclass, "$!pos", rx10_pos
    $P11 = rx10_cur."postfixish"()
    repr_get_attr_int $I11, $P11, rx10_curclass, "$!pos"
    lt $I11, 0, rx10_fail
    goto rxsubrule16_pass
  rxsubrule16_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx10_curclass, "$!pos"
    lt $I11, 0, rx10_fail
  rxsubrule16_pass:
    rx10_cstack = rx10_cur."!cursor_capture"($P11, "postfixish")
    set_addr $I11, rxsubrule16_back
    push rx10_bstack, $I11
    push rx10_bstack, 0
    push rx10_bstack, rx10_pos
    elements $I11, rx10_cstack
    push rx10_bstack, $I11
    repr_get_attr_int rx10_pos, $P11, rx10_curclass, "$!pos"
    nqp_rxpeek $I19, rx10_bstack, rxquantr15_done
    inc $I19
    inc $I19
    set rx10_rep, rx10_bstack[$I19]
    nqp_rxcommit rx10_bstack, rxquantr15_done
    inc rx10_rep
    nqp_rxmark rx10_bstack, rxquantr15_done, rx10_pos, rx10_rep
    goto rxquantr15_loop
  rxquantr15_done:
    rx10_cur."!cursor_pass"(rx10_pos, "termish", 'backtrack'=>1)
    .return (rx10_cur)
  rx10_restart:
    repr_get_attr_obj rx10_cstack, rx10_cur, rx10_curclass, "$!cstack"
  rx10_fail:
    unless rx10_bstack, rx10_done
    pop $I19, rx10_bstack
    if_null rx10_cstack, rx10_cstack_done
    unless rx10_cstack, rx10_cstack_done
    dec $I19
    set $P11, rx10_cstack[$I19]
  rx10_cstack_done:
    pop rx10_rep, rx10_bstack
    pop rx10_pos, rx10_bstack
    pop $I19, rx10_bstack
    lt rx10_pos, -1, rx10_done
    lt rx10_pos, 0, rx10_fail
    eq $I19, 0, rx10_fail
    if_null rx10_cstack, rx10_jump
    elements $I18, rx10_bstack
    le $I18, 0, rx10_cut
    dec $I18
    set $I18, rx10_bstack[$I18]
  rx10_cut:
    assign rx10_cstack, $I18
  rx10_jump:
    jump $I19
  rx10_done:
    rx10_cur."!cursor_fail"()
    .return (rx10_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "10_1338064439.457_caps"  :subid("184_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 11
    new $P104, "Hash"
    set $P104["prefixish"], 2
    set $P104["term"], 0
    set $P104["postfixish"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "10_1338064439.457_nfa"  :subid("185_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 11
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "prefixish"
    push $P105, 1
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "term"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "postfixish"
    push $P107, 3
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "term"  :subid("11_1338064439.457")
    .param pmc param_1019
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 17
    .lex "self", param_1019
    $P103 = param_1019."!protoregex"("term")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "infix"  :subid("12_1338064439.457")
    .param pmc param_1021
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 18
    .lex "self", param_1021
    $P103 = param_1021."!protoregex"("infix")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "prefix"  :subid("13_1338064439.457")
    .param pmc param_1023
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 19
    .lex "self", param_1023
    $P103 = param_1023."!protoregex"("prefix")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "postfix"  :subid("14_1338064439.457")
    .param pmc param_1025
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 20
    .lex "self", param_1025
    $P103 = param_1025."!protoregex"("postfix")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "circumfix"  :subid("15_1338064439.457")
    .param pmc param_1027
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 21
    .lex "self", param_1027
    $P103 = param_1027."!protoregex"("circumfix")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "postcircumfix"  :subid("16_1338064439.457")
    .param pmc param_1029
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 22
    .lex "self", param_1029
    $P103 = param_1029."!protoregex"("postcircumfix")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "term:sym<circumfix>"  :subid("17_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1031
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 24
    .lex "self", param_1031
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1032
    .lex "$/", $P1033
    .local string rx17_tgt
    .local int rx17_pos
    .local int rx17_off
    .local int rx17_eos
    .local int rx17_rep
    .local pmc rx17_cur
    .local pmc rx17_curclass
    .local pmc rx17_bstack
    .local pmc rx17_cstack
    (rx17_cur, rx17_tgt, rx17_pos, rx17_curclass, rx17_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx17_cur
    length rx17_eos, rx17_tgt
    eq $I19, 1, rx17_restart
    repr_get_attr_int $I11, self, rx17_curclass, "$!from"
    ne $I11, -1, rxscan18_done
    goto rxscan18_scan
  rxscan18_loop:
    inc rx17_pos
    gt rx17_pos, rx17_eos, rx17_fail
    repr_bind_attr_int rx17_cur, rx17_curclass, "$!from", rx17_pos
  rxscan18_scan:
    nqp_rxmark rx17_bstack, rxscan18_loop, rx17_pos, 0
  rxscan18_done:
    repr_bind_attr_int rx17_cur, rx17_curclass, "$!pos", rx17_pos
    $P11 = rx17_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx17_curclass, "$!pos"
    lt $I11, 0, rx17_fail
    nqp_rxmark rx17_bstack, rxsubrule19_pass, -1, 0
  rxsubrule19_pass:
    rx17_cstack = rx17_cur."!cursor_capture"($P11, "circumfix")
    repr_get_attr_int rx17_pos, $P11, rx17_curclass, "$!pos"
    rx17_cur."!cursor_pass"(rx17_pos, "term:sym<circumfix>", 'backtrack'=>1)
    .return (rx17_cur)
  rx17_restart:
    repr_get_attr_obj rx17_cstack, rx17_cur, rx17_curclass, "$!cstack"
  rx17_fail:
    unless rx17_bstack, rx17_done
    pop $I19, rx17_bstack
    if_null rx17_cstack, rx17_cstack_done
    unless rx17_cstack, rx17_cstack_done
    dec $I19
    set $P11, rx17_cstack[$I19]
  rx17_cstack_done:
    pop rx17_rep, rx17_bstack
    pop rx17_pos, rx17_bstack
    pop $I19, rx17_bstack
    lt rx17_pos, -1, rx17_done
    lt rx17_pos, 0, rx17_fail
    eq $I19, 0, rx17_fail
    if_null rx17_cstack, rx17_jump
    elements $I18, rx17_bstack
    le $I18, 0, rx17_cut
    dec $I18
    set $I18, rx17_bstack[$I18]
  rx17_cut:
    assign rx17_cstack, $I18
  rx17_jump:
    jump $I19
  rx17_done:
    rx17_cur."!cursor_fail"()
    .return (rx17_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "17_1338064439.457_caps"  :subid("186_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 24
    new $P104, "Hash"
    set $P104["circumfix"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "17_1338064439.457_nfa"  :subid("187_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 24
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "circumfix"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "infixish"  :subid("18_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1037
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 26
    .lex "self", param_1037
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1038
    .lex "$/", $P1039
    .local string rx20_tgt
    .local int rx20_pos
    .local int rx20_off
    .local int rx20_eos
    .local int rx20_rep
    .local pmc rx20_cur
    .local pmc rx20_curclass
    .local pmc rx20_bstack
    .local pmc rx20_cstack
    (rx20_cur, rx20_tgt, rx20_pos, rx20_curclass, rx20_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx20_cur
    length rx20_eos, rx20_tgt
    eq $I19, 1, rx20_restart
    repr_get_attr_int $I11, self, rx20_curclass, "$!from"
    ne $I11, -1, rxscan21_done
    goto rxscan21_scan
  rxscan21_loop:
    inc rx20_pos
    gt rx20_pos, rx20_eos, rx20_fail
    repr_bind_attr_int rx20_cur, rx20_curclass, "$!from", rx20_pos
  rxscan21_scan:
    nqp_rxmark rx20_bstack, rxscan21_loop, rx20_pos, 0
  rxscan21_done:
    repr_bind_attr_int rx20_cur, rx20_curclass, "$!pos", rx20_pos
    $P11 = rx20_cur."infix"()
    repr_get_attr_int $I11, $P11, rx20_curclass, "$!pos"
    lt $I11, 0, rx20_fail
    nqp_rxmark rx20_bstack, rxsubrule22_pass, -1, 0
  rxsubrule22_pass:
    rx20_cstack = rx20_cur."!cursor_capture"($P11, "OPER=infix")
    repr_get_attr_int rx20_pos, $P11, rx20_curclass, "$!pos"
    rx20_cur."!cursor_pass"(rx20_pos, "infixish", 'backtrack'=>1)
    .return (rx20_cur)
  rx20_restart:
    repr_get_attr_obj rx20_cstack, rx20_cur, rx20_curclass, "$!cstack"
  rx20_fail:
    unless rx20_bstack, rx20_done
    pop $I19, rx20_bstack
    if_null rx20_cstack, rx20_cstack_done
    unless rx20_cstack, rx20_cstack_done
    dec $I19
    set $P11, rx20_cstack[$I19]
  rx20_cstack_done:
    pop rx20_rep, rx20_bstack
    pop rx20_pos, rx20_bstack
    pop $I19, rx20_bstack
    lt rx20_pos, -1, rx20_done
    lt rx20_pos, 0, rx20_fail
    eq $I19, 0, rx20_fail
    if_null rx20_cstack, rx20_jump
    elements $I18, rx20_bstack
    le $I18, 0, rx20_cut
    dec $I18
    set $I18, rx20_bstack[$I18]
  rx20_cut:
    assign rx20_cstack, $I18
  rx20_jump:
    jump $I19
  rx20_done:
    rx20_cur."!cursor_fail"()
    .return (rx20_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "18_1338064439.457_caps"  :subid("188_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 26
    new $P104, "Hash"
    set $P104["OPER"], 0
    set $P104["infix"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "18_1338064439.457_nfa"  :subid("189_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 26
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "infix"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "prefixish"  :subid("19_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1043
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 27
    .lex "self", param_1043
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1044
    .lex "$/", $P1045
    .local string rx23_tgt
    .local int rx23_pos
    .local int rx23_off
    .local int rx23_eos
    .local int rx23_rep
    .local pmc rx23_cur
    .local pmc rx23_curclass
    .local pmc rx23_bstack
    .local pmc rx23_cstack
    (rx23_cur, rx23_tgt, rx23_pos, rx23_curclass, rx23_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx23_cur
    length rx23_eos, rx23_tgt
    eq $I19, 1, rx23_restart
    repr_get_attr_int $I11, self, rx23_curclass, "$!from"
    ne $I11, -1, rxscan24_done
    goto rxscan24_scan
  rxscan24_loop:
    inc rx23_pos
    gt rx23_pos, rx23_eos, rx23_fail
    repr_bind_attr_int rx23_cur, rx23_curclass, "$!from", rx23_pos
  rxscan24_scan:
    nqp_rxmark rx23_bstack, rxscan24_loop, rx23_pos, 0
  rxscan24_done:
    repr_bind_attr_int rx23_cur, rx23_curclass, "$!pos", rx23_pos
    $P11 = rx23_cur."prefix"()
    repr_get_attr_int $I11, $P11, rx23_curclass, "$!pos"
    lt $I11, 0, rx23_fail
    nqp_rxmark rx23_bstack, rxsubrule25_pass, -1, 0
  rxsubrule25_pass:
    rx23_cstack = rx23_cur."!cursor_capture"($P11, "OPER=prefix")
    repr_get_attr_int rx23_pos, $P11, rx23_curclass, "$!pos"
    repr_bind_attr_int rx23_cur, rx23_curclass, "$!pos", rx23_pos
    $P11 = rx23_cur."ws"()
    repr_get_attr_int $I11, $P11, rx23_curclass, "$!pos"
    lt $I11, 0, rx23_fail
    repr_get_attr_int rx23_pos, $P11, rx23_curclass, "$!pos"
    rx23_cur."!cursor_pass"(rx23_pos, "prefixish", 'backtrack'=>1)
    .return (rx23_cur)
  rx23_restart:
    repr_get_attr_obj rx23_cstack, rx23_cur, rx23_curclass, "$!cstack"
  rx23_fail:
    unless rx23_bstack, rx23_done
    pop $I19, rx23_bstack
    if_null rx23_cstack, rx23_cstack_done
    unless rx23_cstack, rx23_cstack_done
    dec $I19
    set $P11, rx23_cstack[$I19]
  rx23_cstack_done:
    pop rx23_rep, rx23_bstack
    pop rx23_pos, rx23_bstack
    pop $I19, rx23_bstack
    lt rx23_pos, -1, rx23_done
    lt rx23_pos, 0, rx23_fail
    eq $I19, 0, rx23_fail
    if_null rx23_cstack, rx23_jump
    elements $I18, rx23_bstack
    le $I18, 0, rx23_cut
    dec $I18
    set $I18, rx23_bstack[$I18]
  rx23_cut:
    assign rx23_cstack, $I18
  rx23_jump:
    jump $I19
  rx23_done:
    rx23_cur."!cursor_fail"()
    .return (rx23_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "19_1338064439.457_caps"  :subid("190_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 27
    new $P104, "Hash"
    set $P104["OPER"], 0
    set $P104["prefix"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "19_1338064439.457_nfa"  :subid("191_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 27
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "prefix"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "postfixish"  :subid("20_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1049
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 28
    .lex "self", param_1049
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1050
    .lex "$/", $P1051
    .local string rx27_tgt
    .local int rx27_pos
    .local int rx27_off
    .local int rx27_eos
    .local int rx27_rep
    .local pmc rx27_cur
    .local pmc rx27_curclass
    .local pmc rx27_bstack
    .local pmc rx27_cstack
    (rx27_cur, rx27_tgt, rx27_pos, rx27_curclass, rx27_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx27_cur
    length rx27_eos, rx27_tgt
    eq $I19, 1, rx27_restart
    repr_get_attr_int $I11, self, rx27_curclass, "$!from"
    ne $I11, -1, rxscan28_done
    goto rxscan28_scan
  rxscan28_loop:
    inc rx27_pos
    gt rx27_pos, rx27_eos, rx27_fail
    repr_bind_attr_int rx27_cur, rx27_curclass, "$!from", rx27_pos
  rxscan28_scan:
    nqp_rxmark rx27_bstack, rxscan28_loop, rx27_pos, 0
  rxscan28_done:
  alt29_0:
    nqp_rxmark rx27_bstack, alt29_1, rx27_pos, 0
    repr_bind_attr_int rx27_cur, rx27_curclass, "$!pos", rx27_pos
    $P11 = rx27_cur."postfix"()
    repr_get_attr_int $I11, $P11, rx27_curclass, "$!pos"
    lt $I11, 0, rx27_fail
    nqp_rxmark rx27_bstack, rxsubrule30_pass, -1, 0
  rxsubrule30_pass:
    rx27_cstack = rx27_cur."!cursor_capture"($P11, "OPER=postfix")
    repr_get_attr_int rx27_pos, $P11, rx27_curclass, "$!pos"
    goto alt29_end
  alt29_1:
    repr_bind_attr_int rx27_cur, rx27_curclass, "$!pos", rx27_pos
    $P11 = rx27_cur."postcircumfix"()
    repr_get_attr_int $I11, $P11, rx27_curclass, "$!pos"
    lt $I11, 0, rx27_fail
    nqp_rxmark rx27_bstack, rxsubrule31_pass, -1, 0
  rxsubrule31_pass:
    rx27_cstack = rx27_cur."!cursor_capture"($P11, "OPER=postcircumfix")
    repr_get_attr_int rx27_pos, $P11, rx27_curclass, "$!pos"
  alt29_end:
    rx27_cur."!cursor_pass"(rx27_pos, "postfixish", 'backtrack'=>1)
    .return (rx27_cur)
  rx27_restart:
    repr_get_attr_obj rx27_cstack, rx27_cur, rx27_curclass, "$!cstack"
  rx27_fail:
    unless rx27_bstack, rx27_done
    pop $I19, rx27_bstack
    if_null rx27_cstack, rx27_cstack_done
    unless rx27_cstack, rx27_cstack_done
    dec $I19
    set $P11, rx27_cstack[$I19]
  rx27_cstack_done:
    pop rx27_rep, rx27_bstack
    pop rx27_pos, rx27_bstack
    pop $I19, rx27_bstack
    lt rx27_pos, -1, rx27_done
    lt rx27_pos, 0, rx27_fail
    eq $I19, 0, rx27_fail
    if_null rx27_cstack, rx27_jump
    elements $I18, rx27_bstack
    le $I18, 0, rx27_cut
    dec $I18
    set $I18, rx27_bstack[$I18]
  rx27_cut:
    assign rx27_cstack, $I18
  rx27_jump:
    jump $I19
  rx27_done:
    rx27_cur."!cursor_fail"()
    .return (rx27_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "20_1338064439.457_caps"  :subid("192_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 28
    new $P104, "Hash"
    set $P104["OPER"], 0
    set $P104["postfix"], 0
    set $P104["postcircumfix"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "20_1338064439.457_nfa"  :subid("193_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 28
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "postfix"
    push $P105, 0
    push $P105, 8
    push $P105, "postcircumfix"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "nullterm"  :subid("21_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1055
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 33
    .lex "self", param_1055
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1056
    .lex "$/", $P1057
    .local string rx32_tgt
    .local int rx32_pos
    .local int rx32_off
    .local int rx32_eos
    .local int rx32_rep
    .local pmc rx32_cur
    .local pmc rx32_curclass
    .local pmc rx32_bstack
    .local pmc rx32_cstack
    (rx32_cur, rx32_tgt, rx32_pos, rx32_curclass, rx32_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx32_cur
    length rx32_eos, rx32_tgt
    eq $I19, 1, rx32_restart
    repr_get_attr_int $I11, self, rx32_curclass, "$!from"
    ne $I11, -1, rxscan33_done
    goto rxscan33_scan
  rxscan33_loop:
    inc rx32_pos
    gt rx32_pos, rx32_eos, rx32_fail
    repr_bind_attr_int rx32_cur, rx32_curclass, "$!from", rx32_pos
  rxscan33_scan:
    nqp_rxmark rx32_bstack, rxscan33_loop, rx32_pos, 0
  rxscan33_done:
    rx32_cur."!cursor_pass"(rx32_pos, "nullterm", 'backtrack'=>1)
    .return (rx32_cur)
  rx32_restart:
    repr_get_attr_obj rx32_cstack, rx32_cur, rx32_curclass, "$!cstack"
  rx32_fail:
    unless rx32_bstack, rx32_done
    pop $I19, rx32_bstack
    if_null rx32_cstack, rx32_cstack_done
    unless rx32_cstack, rx32_cstack_done
    dec $I19
    set $P11, rx32_cstack[$I19]
  rx32_cstack_done:
    pop rx32_rep, rx32_bstack
    pop rx32_pos, rx32_bstack
    pop $I19, rx32_bstack
    lt rx32_pos, -1, rx32_done
    lt rx32_pos, 0, rx32_fail
    eq $I19, 0, rx32_fail
    if_null rx32_cstack, rx32_jump
    elements $I18, rx32_bstack
    le $I18, 0, rx32_cut
    dec $I18
    set $I18, rx32_bstack[$I18]
  rx32_cut:
    assign rx32_cstack, $I18
  rx32_jump:
    jump $I19
  rx32_done:
    rx32_cur."!cursor_fail"()
    .return (rx32_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "21_1338064439.457_caps"  :subid("194_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 33
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "21_1338064439.457_nfa"  :subid("195_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 33
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "nullterm_alt"  :subid("22_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1061
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 34
    .lex "self", param_1061
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1062
    .lex "$/", $P1063
    .local string rx35_tgt
    .local int rx35_pos
    .local int rx35_off
    .local int rx35_eos
    .local int rx35_rep
    .local pmc rx35_cur
    .local pmc rx35_curclass
    .local pmc rx35_bstack
    .local pmc rx35_cstack
    (rx35_cur, rx35_tgt, rx35_pos, rx35_curclass, rx35_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx35_cur
    length rx35_eos, rx35_tgt
    eq $I19, 1, rx35_restart
    repr_get_attr_int $I11, self, rx35_curclass, "$!from"
    ne $I11, -1, rxscan36_done
    goto rxscan36_scan
  rxscan36_loop:
    inc rx35_pos
    gt rx35_pos, rx35_eos, rx35_fail
    repr_bind_attr_int rx35_cur, rx35_curclass, "$!from", rx35_pos
  rxscan36_scan:
    nqp_rxmark rx35_bstack, rxscan36_loop, rx35_pos, 0
  rxscan36_done:
    repr_bind_attr_int rx35_cur, rx35_curclass, "$!pos", rx35_pos
    $P11 = rx35_cur."nullterm"()
    repr_get_attr_int $I11, $P11, rx35_curclass, "$!pos"
    lt $I11, 0, rx35_fail
    nqp_rxmark rx35_bstack, rxsubrule37_pass, -1, 0
  rxsubrule37_pass:
    rx35_cstack = rx35_cur."!cursor_capture"($P11, "term")
    repr_get_attr_int rx35_pos, $P11, rx35_curclass, "$!pos"
    rx35_cur."!cursor_pass"(rx35_pos, "nullterm_alt", 'backtrack'=>1)
    .return (rx35_cur)
  rx35_restart:
    repr_get_attr_obj rx35_cstack, rx35_cur, rx35_curclass, "$!cstack"
  rx35_fail:
    unless rx35_bstack, rx35_done
    pop $I19, rx35_bstack
    if_null rx35_cstack, rx35_cstack_done
    unless rx35_cstack, rx35_cstack_done
    dec $I19
    set $P11, rx35_cstack[$I19]
  rx35_cstack_done:
    pop rx35_rep, rx35_bstack
    pop rx35_pos, rx35_bstack
    pop $I19, rx35_bstack
    lt rx35_pos, -1, rx35_done
    lt rx35_pos, 0, rx35_fail
    eq $I19, 0, rx35_fail
    if_null rx35_cstack, rx35_jump
    elements $I18, rx35_bstack
    le $I18, 0, rx35_cut
    dec $I18
    set $I18, rx35_bstack[$I18]
  rx35_cut:
    assign rx35_cstack, $I18
  rx35_jump:
    jump $I19
  rx35_done:
    rx35_cur."!cursor_fail"()
    .return (rx35_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "22_1338064439.457_caps"  :subid("196_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 34
    new $P104, "Hash"
    set $P104["term"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "22_1338064439.457_nfa"  :subid("197_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 34
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "nullterm"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "nulltermish" :anon :subid("23_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1067
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 37
    .lex "self", param_1067
    set $P104, param_1067
    nqp_decontainerize $P105, $P104
    $P106 = $P105."termish"()
    unless $P106, unless_1068
    set $P103, $P106
    goto unless_1068_end
  unless_1068:
    set $P107, param_1067
    nqp_decontainerize $P108, $P107
    $P109 = $P108."nullterm_alt"()
    set $P103, $P109
  unless_1068_end:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_delimited"  :subid("24_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1070
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 40
    .lex "self", param_1070
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1071
    .lex "$/", $P1072
    .local string rx38_tgt
    .local int rx38_pos
    .local int rx38_off
    .local int rx38_eos
    .local int rx38_rep
    .local pmc rx38_cur
    .local pmc rx38_curclass
    .local pmc rx38_bstack
    .local pmc rx38_cstack
    (rx38_cur, rx38_tgt, rx38_pos, rx38_curclass, rx38_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx38_cur
    length rx38_eos, rx38_tgt
    eq $I19, 1, rx38_restart
    repr_get_attr_int $I11, self, rx38_curclass, "$!from"
    ne $I11, -1, rxscan39_done
    goto rxscan39_scan
  rxscan39_loop:
    inc rx38_pos
    gt rx38_pos, rx38_eos, rx38_fail
    repr_bind_attr_int rx38_cur, rx38_curclass, "$!from", rx38_pos
  rxscan39_scan:
    nqp_rxmark rx38_bstack, rxscan39_loop, rx38_pos, 0
  rxscan39_done:
    repr_bind_attr_int rx38_cur, rx38_curclass, "$!pos", rx38_pos
    $P11 = rx38_cur."starter"()
    repr_get_attr_int $I11, $P11, rx38_curclass, "$!pos"
    lt $I11, 0, rx38_fail
    nqp_rxmark rx38_bstack, rxsubrule40_pass, -1, 0
  rxsubrule40_pass:
    rx38_cstack = rx38_cur."!cursor_capture"($P11, "starter")
    repr_get_attr_int rx38_pos, $P11, rx38_curclass, "$!pos"
  # rx rxquantr41 ** 0..-1
    nqp_rxmark rx38_bstack, rxquantr41_done, rx38_pos, 0
  rxquantr41_loop:
    repr_bind_attr_int rx38_cur, rx38_curclass, "$!pos", rx38_pos
    $P11 = rx38_cur."quote_atom"()
    repr_get_attr_int $I11, $P11, rx38_curclass, "$!pos"
    lt $I11, 0, rx38_fail
    goto rxsubrule42_pass
  rxsubrule42_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx38_curclass, "$!pos"
    lt $I11, 0, rx38_fail
  rxsubrule42_pass:
    rx38_cstack = rx38_cur."!cursor_capture"($P11, "quote_atom")
    set_addr $I11, rxsubrule42_back
    push rx38_bstack, $I11
    push rx38_bstack, 0
    push rx38_bstack, rx38_pos
    elements $I11, rx38_cstack
    push rx38_bstack, $I11
    repr_get_attr_int rx38_pos, $P11, rx38_curclass, "$!pos"
    nqp_rxpeek $I19, rx38_bstack, rxquantr41_done
    inc $I19
    inc $I19
    set rx38_rep, rx38_bstack[$I19]
    nqp_rxcommit rx38_bstack, rxquantr41_done
    inc rx38_rep
    nqp_rxmark rx38_bstack, rxquantr41_done, rx38_pos, rx38_rep
    goto rxquantr41_loop
  rxquantr41_done:
    repr_bind_attr_int rx38_cur, rx38_curclass, "$!pos", rx38_pos
    $P11 = rx38_cur."stopper"()
    repr_get_attr_int $I11, $P11, rx38_curclass, "$!pos"
    lt $I11, 0, rx38_fail
    nqp_rxmark rx38_bstack, rxsubrule43_pass, -1, 0
  rxsubrule43_pass:
    rx38_cstack = rx38_cur."!cursor_capture"($P11, "stopper")
    repr_get_attr_int rx38_pos, $P11, rx38_curclass, "$!pos"
    rx38_cur."!cursor_pass"(rx38_pos, "quote_delimited", 'backtrack'=>1)
    .return (rx38_cur)
  rx38_restart:
    repr_get_attr_obj rx38_cstack, rx38_cur, rx38_curclass, "$!cstack"
  rx38_fail:
    unless rx38_bstack, rx38_done
    pop $I19, rx38_bstack
    if_null rx38_cstack, rx38_cstack_done
    unless rx38_cstack, rx38_cstack_done
    dec $I19
    set $P11, rx38_cstack[$I19]
  rx38_cstack_done:
    pop rx38_rep, rx38_bstack
    pop rx38_pos, rx38_bstack
    pop $I19, rx38_bstack
    lt rx38_pos, -1, rx38_done
    lt rx38_pos, 0, rx38_fail
    eq $I19, 0, rx38_fail
    if_null rx38_cstack, rx38_jump
    elements $I18, rx38_bstack
    le $I18, 0, rx38_cut
    dec $I18
    set $I18, rx38_bstack[$I18]
  rx38_cut:
    assign rx38_cstack, $I18
  rx38_jump:
    jump $I19
  rx38_done:
    rx38_cur."!cursor_fail"()
    .return (rx38_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "24_1338064439.457_caps"  :subid("198_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 40
    new $P104, "Hash"
    set $P104["starter"], 0
    set $P104["quote_atom"], 2
    set $P104["stopper"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "24_1338064439.457_nfa"  :subid("199_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 40
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "starter"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "quote_atom"
    push $P106, 2
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "stopper"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_atom"  :subid("25_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1076
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 44
    .lex "self", param_1076
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1077
    .lex "$/", $P1078
    .local string rx44_tgt
    .local int rx44_pos
    .local int rx44_off
    .local int rx44_eos
    .local int rx44_rep
    .local pmc rx44_cur
    .local pmc rx44_curclass
    .local pmc rx44_bstack
    .local pmc rx44_cstack
    (rx44_cur, rx44_tgt, rx44_pos, rx44_curclass, rx44_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx44_cur
    length rx44_eos, rx44_tgt
    eq $I19, 1, rx44_restart
    repr_get_attr_int $I11, self, rx44_curclass, "$!from"
    ne $I11, -1, rxscan45_done
    goto rxscan45_scan
  rxscan45_loop:
    inc rx44_pos
    gt rx44_pos, rx44_eos, rx44_fail
    repr_bind_attr_int rx44_cur, rx44_curclass, "$!from", rx44_pos
  rxscan45_scan:
    nqp_rxmark rx44_bstack, rxscan45_loop, rx44_pos, 0
  rxscan45_done:
    repr_bind_attr_int rx44_cur, rx44_curclass, "$!pos", rx44_pos
    $P11 = rx44_cur."stopper"()
    repr_get_attr_int $I11, $P11, rx44_curclass, "$!pos"
    ge $I11, 0, rx44_fail
  alt46_0:
    nqp_rxmark rx44_bstack, alt46_1, rx44_pos, 0
    repr_bind_attr_int rx44_cur, rx44_curclass, "$!pos", rx44_pos
    $P11 = rx44_cur."quote_escape"()
    repr_get_attr_int $I11, $P11, rx44_curclass, "$!pos"
    lt $I11, 0, rx44_fail
    nqp_rxmark rx44_bstack, rxsubrule47_pass, -1, 0
  rxsubrule47_pass:
    rx44_cstack = rx44_cur."!cursor_capture"($P11, "quote_escape")
    repr_get_attr_int rx44_pos, $P11, rx44_curclass, "$!pos"
    goto alt46_end
  alt46_1:
  # rx rxquantr48 ** 1..-1
    nqp_rxmark rx44_bstack, rxquantr48_done, -1, 0
  rxquantr48_loop:
    repr_bind_attr_int rx44_cur, rx44_curclass, "$!pos", rx44_pos
    $P11 = rx44_cur."stopper"()
    repr_get_attr_int $I11, $P11, rx44_curclass, "$!pos"
    ge $I11, 0, rx44_fail
    repr_bind_attr_int rx44_cur, rx44_curclass, "$!pos", rx44_pos
    $P11 = rx44_cur."quote_escape"()
    repr_get_attr_int $I11, $P11, rx44_curclass, "$!pos"
    ge $I11, 0, rx44_fail
    ge rx44_pos, rx44_eos, rx44_fail
    add rx44_pos, 1
    nqp_rxpeek $I19, rx44_bstack, rxquantr48_done
    inc $I19
    inc $I19
    set rx44_rep, rx44_bstack[$I19]
    nqp_rxcommit rx44_bstack, rxquantr48_done
    inc rx44_rep
    nqp_rxmark rx44_bstack, rxquantr48_done, rx44_pos, rx44_rep
    goto rxquantr48_loop
  rxquantr48_done:
  alt46_end:
    rx44_cur."!cursor_pass"(rx44_pos, "quote_atom", 'backtrack'=>1)
    .return (rx44_cur)
  rx44_restart:
    repr_get_attr_obj rx44_cstack, rx44_cur, rx44_curclass, "$!cstack"
  rx44_fail:
    unless rx44_bstack, rx44_done
    pop $I19, rx44_bstack
    if_null rx44_cstack, rx44_cstack_done
    unless rx44_cstack, rx44_cstack_done
    dec $I19
    set $P11, rx44_cstack[$I19]
  rx44_cstack_done:
    pop rx44_rep, rx44_bstack
    pop rx44_pos, rx44_bstack
    pop $I19, rx44_bstack
    lt rx44_pos, -1, rx44_done
    lt rx44_pos, 0, rx44_fail
    eq $I19, 0, rx44_fail
    if_null rx44_cstack, rx44_jump
    elements $I18, rx44_bstack
    le $I18, 0, rx44_cut
    dec $I18
    set $I18, rx44_bstack[$I18]
  rx44_cut:
    assign rx44_cstack, $I18
  rx44_jump:
    jump $I19
  rx44_done:
    rx44_cur."!cursor_fail"()
    .return (rx44_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "25_1338064439.457_caps"  :subid("200_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 44
    new $P104, "Hash"
    set $P104["quote_escape"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "decint"  :subid("26_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1081
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 52
    .lex "self", param_1081
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1082
    .lex "$/", $P1083
    .local string rx49_tgt
    .local int rx49_pos
    .local int rx49_off
    .local int rx49_eos
    .local int rx49_rep
    .local pmc rx49_cur
    .local pmc rx49_curclass
    .local pmc rx49_bstack
    .local pmc rx49_cstack
    (rx49_cur, rx49_tgt, rx49_pos, rx49_curclass, rx49_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx49_cur
    length rx49_eos, rx49_tgt
    eq $I19, 1, rx49_restart
    repr_get_attr_int $I11, self, rx49_curclass, "$!from"
    ne $I11, -1, rxscan50_done
    goto rxscan50_scan
  rxscan50_loop:
    inc rx49_pos
    gt rx49_pos, rx49_eos, rx49_fail
    repr_bind_attr_int rx49_cur, rx49_curclass, "$!from", rx49_pos
  rxscan50_scan:
    nqp_rxmark rx49_bstack, rxscan50_loop, rx49_pos, 0
  rxscan50_done:
  # rx rxquantr51 ** 1..-1
    nqp_rxmark rx49_bstack, rxquantr51_done, -1, 0
  rxquantr51_loop:
  # rx rxquantr52 ** 1..-1
    nqp_rxmark rx49_bstack, rxquantr52_done, -1, 0
  rxquantr52_loop:
    ge rx49_pos, rx49_eos, rx49_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx49_tgt, rx49_pos
    unless $I11, rx49_fail
    add rx49_pos, 1
    nqp_rxpeek $I19, rx49_bstack, rxquantr52_done
    inc $I19
    inc $I19
    set rx49_rep, rx49_bstack[$I19]
    nqp_rxcommit rx49_bstack, rxquantr52_done
    inc rx49_rep
    nqp_rxmark rx49_bstack, rxquantr52_done, rx49_pos, rx49_rep
    goto rxquantr52_loop
  rxquantr52_done:
    nqp_rxpeek $I19, rx49_bstack, rxquantr51_done
    inc $I19
    inc $I19
    set rx49_rep, rx49_bstack[$I19]
    nqp_rxcommit rx49_bstack, rxquantr51_done
    inc rx49_rep
    nqp_rxmark rx49_bstack, rxquantr51_done, rx49_pos, rx49_rep
    add $I11, rx49_pos, 1
    gt $I11, rx49_eos, rx49_fail
    substr $S10, rx49_tgt, rx49_pos, 1
    ne $S10, ucs4:"_", rx49_fail
    add rx49_pos, 1
    goto rxquantr51_loop
  rxquantr51_done:
    rx49_cur."!cursor_pass"(rx49_pos, "decint", 'backtrack'=>1)
    .return (rx49_cur)
  rx49_restart:
    repr_get_attr_obj rx49_cstack, rx49_cur, rx49_curclass, "$!cstack"
  rx49_fail:
    unless rx49_bstack, rx49_done
    pop $I19, rx49_bstack
    if_null rx49_cstack, rx49_cstack_done
    unless rx49_cstack, rx49_cstack_done
    dec $I19
    set $P11, rx49_cstack[$I19]
  rx49_cstack_done:
    pop rx49_rep, rx49_bstack
    pop rx49_pos, rx49_bstack
    pop $I19, rx49_bstack
    lt rx49_pos, -1, rx49_done
    lt rx49_pos, 0, rx49_fail
    eq $I19, 0, rx49_fail
    if_null rx49_cstack, rx49_jump
    elements $I18, rx49_bstack
    le $I18, 0, rx49_cut
    dec $I18
    set $I18, rx49_bstack[$I18]
  rx49_cut:
    assign rx49_cstack, $I18
  rx49_jump:
    jump $I19
  rx49_done:
    rx49_cur."!cursor_fail"()
    .return (rx49_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "26_1338064439.457_caps"  :subid("201_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 52
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "26_1338064439.457_nfa"  :subid("202_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 52
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 4
    push $P108, 8
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 4
    push $P109, 1
    push $P109, 0
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "decints"  :subid("27_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1087
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 53
    .lex "self", param_1087
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1088
    .lex "$/", $P1089
    .local string rx53_tgt
    .local int rx53_pos
    .local int rx53_off
    .local int rx53_eos
    .local int rx53_rep
    .local pmc rx53_cur
    .local pmc rx53_curclass
    .local pmc rx53_bstack
    .local pmc rx53_cstack
    (rx53_cur, rx53_tgt, rx53_pos, rx53_curclass, rx53_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx53_cur
    length rx53_eos, rx53_tgt
    eq $I19, 1, rx53_restart
    repr_get_attr_int $I11, self, rx53_curclass, "$!from"
    ne $I11, -1, rxscan54_done
    goto rxscan54_scan
  rxscan54_loop:
    inc rx53_pos
    gt rx53_pos, rx53_eos, rx53_fail
    repr_bind_attr_int rx53_cur, rx53_curclass, "$!from", rx53_pos
  rxscan54_scan:
    nqp_rxmark rx53_bstack, rxscan54_loop, rx53_pos, 0
  rxscan54_done:
  # rx rxquantr55 ** 1..-1
    nqp_rxmark rx53_bstack, rxquantr55_done, -1, 0
  rxquantr55_loop:
    repr_bind_attr_int rx53_cur, rx53_curclass, "$!pos", rx53_pos
    $P11 = rx53_cur."ws"()
    repr_get_attr_int $I11, $P11, rx53_curclass, "$!pos"
    lt $I11, 0, rx53_fail
    repr_get_attr_int rx53_pos, $P11, rx53_curclass, "$!pos"
    repr_bind_attr_int rx53_cur, rx53_curclass, "$!pos", rx53_pos
    $P11 = rx53_cur."decint"()
    repr_get_attr_int $I11, $P11, rx53_curclass, "$!pos"
    lt $I11, 0, rx53_fail
    nqp_rxmark rx53_bstack, rxsubrule57_pass, -1, 0
  rxsubrule57_pass:
    rx53_cstack = rx53_cur."!cursor_capture"($P11, "decint")
    repr_get_attr_int rx53_pos, $P11, rx53_curclass, "$!pos"
    repr_bind_attr_int rx53_cur, rx53_curclass, "$!pos", rx53_pos
    $P11 = rx53_cur."ws"()
    repr_get_attr_int $I11, $P11, rx53_curclass, "$!pos"
    lt $I11, 0, rx53_fail
    repr_get_attr_int rx53_pos, $P11, rx53_curclass, "$!pos"
    nqp_rxpeek $I19, rx53_bstack, rxquantr55_done
    inc $I19
    inc $I19
    set rx53_rep, rx53_bstack[$I19]
    nqp_rxcommit rx53_bstack, rxquantr55_done
    inc rx53_rep
    nqp_rxmark rx53_bstack, rxquantr55_done, rx53_pos, rx53_rep
    add $I11, rx53_pos, 1
    gt $I11, rx53_eos, rx53_fail
    substr $S10, rx53_tgt, rx53_pos, 1
    ne $S10, ucs4:",", rx53_fail
    add rx53_pos, 1
    goto rxquantr55_loop
  rxquantr55_done:
    rx53_cur."!cursor_pass"(rx53_pos, "decints", 'backtrack'=>1)
    .return (rx53_cur)
  rx53_restart:
    repr_get_attr_obj rx53_cstack, rx53_cur, rx53_curclass, "$!cstack"
  rx53_fail:
    unless rx53_bstack, rx53_done
    pop $I19, rx53_bstack
    if_null rx53_cstack, rx53_cstack_done
    unless rx53_cstack, rx53_cstack_done
    dec $I19
    set $P11, rx53_cstack[$I19]
  rx53_cstack_done:
    pop rx53_rep, rx53_bstack
    pop rx53_pos, rx53_bstack
    pop $I19, rx53_bstack
    lt rx53_pos, -1, rx53_done
    lt rx53_pos, 0, rx53_fail
    eq $I19, 0, rx53_fail
    if_null rx53_cstack, rx53_jump
    elements $I18, rx53_bstack
    le $I18, 0, rx53_cut
    dec $I18
    set $I18, rx53_bstack[$I18]
  rx53_cut:
    assign rx53_cstack, $I18
  rx53_jump:
    jump $I19
  rx53_done:
    rx53_cur."!cursor_fail"()
    .return (rx53_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "27_1338064439.457_caps"  :subid("203_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 53
    new $P104, "Hash"
    set $P104["decint"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "27_1338064439.457_nfa"  :subid("204_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 53
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "decint"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "ws"
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "hexint"  :subid("28_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1093
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 55
    .lex "self", param_1093
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1094
    .lex "$/", $P1095
    .local string rx59_tgt
    .local int rx59_pos
    .local int rx59_off
    .local int rx59_eos
    .local int rx59_rep
    .local pmc rx59_cur
    .local pmc rx59_curclass
    .local pmc rx59_bstack
    .local pmc rx59_cstack
    (rx59_cur, rx59_tgt, rx59_pos, rx59_curclass, rx59_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx59_cur
    length rx59_eos, rx59_tgt
    eq $I19, 1, rx59_restart
    repr_get_attr_int $I11, self, rx59_curclass, "$!from"
    ne $I11, -1, rxscan60_done
    goto rxscan60_scan
  rxscan60_loop:
    inc rx59_pos
    gt rx59_pos, rx59_eos, rx59_fail
    repr_bind_attr_int rx59_cur, rx59_curclass, "$!from", rx59_pos
  rxscan60_scan:
    nqp_rxmark rx59_bstack, rxscan60_loop, rx59_pos, 0
  rxscan60_done:
  # rx rxquantr61 ** 1..-1
    nqp_rxmark rx59_bstack, rxquantr61_done, -1, 0
  rxquantr61_loop:
  # rx rxquantr62 ** 1..-1
    nqp_rxmark rx59_bstack, rxquantr62_done, -1, 0
  rxquantr62_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    substr $S11, rx59_tgt, rx59_pos, 1
    index $I11, ucs4:"0123456789abcdefABCDEF", $S11
    lt $I11, 0, rx59_fail
    inc rx59_pos
    nqp_rxpeek $I19, rx59_bstack, rxquantr62_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr62_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr62_done, rx59_pos, rx59_rep
    goto rxquantr62_loop
  rxquantr62_done:
    nqp_rxpeek $I19, rx59_bstack, rxquantr61_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr61_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr61_done, rx59_pos, rx59_rep
    add $I11, rx59_pos, 1
    gt $I11, rx59_eos, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 1
    ne $S10, ucs4:"_", rx59_fail
    add rx59_pos, 1
    goto rxquantr61_loop
  rxquantr61_done:
    rx59_cur."!cursor_pass"(rx59_pos, "hexint", 'backtrack'=>1)
    .return (rx59_cur)
  rx59_restart:
    repr_get_attr_obj rx59_cstack, rx59_cur, rx59_curclass, "$!cstack"
  rx59_fail:
    unless rx59_bstack, rx59_done
    pop $I19, rx59_bstack
    if_null rx59_cstack, rx59_cstack_done
    unless rx59_cstack, rx59_cstack_done
    dec $I19
    set $P11, rx59_cstack[$I19]
  rx59_cstack_done:
    pop rx59_rep, rx59_bstack
    pop rx59_pos, rx59_bstack
    pop $I19, rx59_bstack
    lt rx59_pos, -1, rx59_done
    lt rx59_pos, 0, rx59_fail
    eq $I19, 0, rx59_fail
    if_null rx59_cstack, rx59_jump
    elements $I18, rx59_bstack
    le $I18, 0, rx59_cut
    dec $I18
    set $I18, rx59_bstack[$I18]
  rx59_cut:
    assign rx59_cstack, $I18
  rx59_jump:
    jump $I19
  rx59_done:
    rx59_cur."!cursor_fail"()
    .return (rx59_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "28_1338064439.457_caps"  :subid("205_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 55
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "28_1338064439.457_nfa"  :subid("206_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 55
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 6
    push $P108, "0123456789abcdefABCDEF"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 4
    push $P109, 1
    push $P109, 0
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "hexints"  :subid("29_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1099
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 56
    .lex "self", param_1099
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1100
    .lex "$/", $P1101
    .local string rx63_tgt
    .local int rx63_pos
    .local int rx63_off
    .local int rx63_eos
    .local int rx63_rep
    .local pmc rx63_cur
    .local pmc rx63_curclass
    .local pmc rx63_bstack
    .local pmc rx63_cstack
    (rx63_cur, rx63_tgt, rx63_pos, rx63_curclass, rx63_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx63_cur
    length rx63_eos, rx63_tgt
    eq $I19, 1, rx63_restart
    repr_get_attr_int $I11, self, rx63_curclass, "$!from"
    ne $I11, -1, rxscan64_done
    goto rxscan64_scan
  rxscan64_loop:
    inc rx63_pos
    gt rx63_pos, rx63_eos, rx63_fail
    repr_bind_attr_int rx63_cur, rx63_curclass, "$!from", rx63_pos
  rxscan64_scan:
    nqp_rxmark rx63_bstack, rxscan64_loop, rx63_pos, 0
  rxscan64_done:
  # rx rxquantr65 ** 1..-1
    nqp_rxmark rx63_bstack, rxquantr65_done, -1, 0
  rxquantr65_loop:
    repr_bind_attr_int rx63_cur, rx63_curclass, "$!pos", rx63_pos
    $P11 = rx63_cur."ws"()
    repr_get_attr_int $I11, $P11, rx63_curclass, "$!pos"
    lt $I11, 0, rx63_fail
    repr_get_attr_int rx63_pos, $P11, rx63_curclass, "$!pos"
    repr_bind_attr_int rx63_cur, rx63_curclass, "$!pos", rx63_pos
    $P11 = rx63_cur."hexint"()
    repr_get_attr_int $I11, $P11, rx63_curclass, "$!pos"
    lt $I11, 0, rx63_fail
    nqp_rxmark rx63_bstack, rxsubrule67_pass, -1, 0
  rxsubrule67_pass:
    rx63_cstack = rx63_cur."!cursor_capture"($P11, "hexint")
    repr_get_attr_int rx63_pos, $P11, rx63_curclass, "$!pos"
    repr_bind_attr_int rx63_cur, rx63_curclass, "$!pos", rx63_pos
    $P11 = rx63_cur."ws"()
    repr_get_attr_int $I11, $P11, rx63_curclass, "$!pos"
    lt $I11, 0, rx63_fail
    repr_get_attr_int rx63_pos, $P11, rx63_curclass, "$!pos"
    nqp_rxpeek $I19, rx63_bstack, rxquantr65_done
    inc $I19
    inc $I19
    set rx63_rep, rx63_bstack[$I19]
    nqp_rxcommit rx63_bstack, rxquantr65_done
    inc rx63_rep
    nqp_rxmark rx63_bstack, rxquantr65_done, rx63_pos, rx63_rep
    add $I11, rx63_pos, 1
    gt $I11, rx63_eos, rx63_fail
    substr $S10, rx63_tgt, rx63_pos, 1
    ne $S10, ucs4:",", rx63_fail
    add rx63_pos, 1
    goto rxquantr65_loop
  rxquantr65_done:
    rx63_cur."!cursor_pass"(rx63_pos, "hexints", 'backtrack'=>1)
    .return (rx63_cur)
  rx63_restart:
    repr_get_attr_obj rx63_cstack, rx63_cur, rx63_curclass, "$!cstack"
  rx63_fail:
    unless rx63_bstack, rx63_done
    pop $I19, rx63_bstack
    if_null rx63_cstack, rx63_cstack_done
    unless rx63_cstack, rx63_cstack_done
    dec $I19
    set $P11, rx63_cstack[$I19]
  rx63_cstack_done:
    pop rx63_rep, rx63_bstack
    pop rx63_pos, rx63_bstack
    pop $I19, rx63_bstack
    lt rx63_pos, -1, rx63_done
    lt rx63_pos, 0, rx63_fail
    eq $I19, 0, rx63_fail
    if_null rx63_cstack, rx63_jump
    elements $I18, rx63_bstack
    le $I18, 0, rx63_cut
    dec $I18
    set $I18, rx63_bstack[$I18]
  rx63_cut:
    assign rx63_cstack, $I18
  rx63_jump:
    jump $I19
  rx63_done:
    rx63_cur."!cursor_fail"()
    .return (rx63_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "29_1338064439.457_caps"  :subid("207_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 56
    new $P104, "Hash"
    set $P104["hexint"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "29_1338064439.457_nfa"  :subid("208_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 56
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "hexint"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "ws"
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "octint"  :subid("30_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1105
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 58
    .lex "self", param_1105
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1106
    .lex "$/", $P1107
    .local string rx69_tgt
    .local int rx69_pos
    .local int rx69_off
    .local int rx69_eos
    .local int rx69_rep
    .local pmc rx69_cur
    .local pmc rx69_curclass
    .local pmc rx69_bstack
    .local pmc rx69_cstack
    (rx69_cur, rx69_tgt, rx69_pos, rx69_curclass, rx69_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx69_cur
    length rx69_eos, rx69_tgt
    eq $I19, 1, rx69_restart
    repr_get_attr_int $I11, self, rx69_curclass, "$!from"
    ne $I11, -1, rxscan70_done
    goto rxscan70_scan
  rxscan70_loop:
    inc rx69_pos
    gt rx69_pos, rx69_eos, rx69_fail
    repr_bind_attr_int rx69_cur, rx69_curclass, "$!from", rx69_pos
  rxscan70_scan:
    nqp_rxmark rx69_bstack, rxscan70_loop, rx69_pos, 0
  rxscan70_done:
  # rx rxquantr71 ** 1..-1
    nqp_rxmark rx69_bstack, rxquantr71_done, -1, 0
  rxquantr71_loop:
  # rx rxquantr72 ** 1..-1
    nqp_rxmark rx69_bstack, rxquantr72_done, -1, 0
  rxquantr72_loop:
    ge rx69_pos, rx69_eos, rx69_fail
    substr $S11, rx69_tgt, rx69_pos, 1
    index $I11, ucs4:"01234567", $S11
    lt $I11, 0, rx69_fail
    inc rx69_pos
    nqp_rxpeek $I19, rx69_bstack, rxquantr72_done
    inc $I19
    inc $I19
    set rx69_rep, rx69_bstack[$I19]
    nqp_rxcommit rx69_bstack, rxquantr72_done
    inc rx69_rep
    nqp_rxmark rx69_bstack, rxquantr72_done, rx69_pos, rx69_rep
    goto rxquantr72_loop
  rxquantr72_done:
    nqp_rxpeek $I19, rx69_bstack, rxquantr71_done
    inc $I19
    inc $I19
    set rx69_rep, rx69_bstack[$I19]
    nqp_rxcommit rx69_bstack, rxquantr71_done
    inc rx69_rep
    nqp_rxmark rx69_bstack, rxquantr71_done, rx69_pos, rx69_rep
    add $I11, rx69_pos, 1
    gt $I11, rx69_eos, rx69_fail
    substr $S10, rx69_tgt, rx69_pos, 1
    ne $S10, ucs4:"_", rx69_fail
    add rx69_pos, 1
    goto rxquantr71_loop
  rxquantr71_done:
    rx69_cur."!cursor_pass"(rx69_pos, "octint", 'backtrack'=>1)
    .return (rx69_cur)
  rx69_restart:
    repr_get_attr_obj rx69_cstack, rx69_cur, rx69_curclass, "$!cstack"
  rx69_fail:
    unless rx69_bstack, rx69_done
    pop $I19, rx69_bstack
    if_null rx69_cstack, rx69_cstack_done
    unless rx69_cstack, rx69_cstack_done
    dec $I19
    set $P11, rx69_cstack[$I19]
  rx69_cstack_done:
    pop rx69_rep, rx69_bstack
    pop rx69_pos, rx69_bstack
    pop $I19, rx69_bstack
    lt rx69_pos, -1, rx69_done
    lt rx69_pos, 0, rx69_fail
    eq $I19, 0, rx69_fail
    if_null rx69_cstack, rx69_jump
    elements $I18, rx69_bstack
    le $I18, 0, rx69_cut
    dec $I18
    set $I18, rx69_bstack[$I18]
  rx69_cut:
    assign rx69_cstack, $I18
  rx69_jump:
    jump $I19
  rx69_done:
    rx69_cur."!cursor_fail"()
    .return (rx69_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "30_1338064439.457_caps"  :subid("209_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 58
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "30_1338064439.457_nfa"  :subid("210_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 58
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 6
    push $P108, "01234567"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 4
    push $P109, 1
    push $P109, 0
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "octints"  :subid("31_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1111
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 59
    .lex "self", param_1111
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1112
    .lex "$/", $P1113
    .local string rx73_tgt
    .local int rx73_pos
    .local int rx73_off
    .local int rx73_eos
    .local int rx73_rep
    .local pmc rx73_cur
    .local pmc rx73_curclass
    .local pmc rx73_bstack
    .local pmc rx73_cstack
    (rx73_cur, rx73_tgt, rx73_pos, rx73_curclass, rx73_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx73_cur
    length rx73_eos, rx73_tgt
    eq $I19, 1, rx73_restart
    repr_get_attr_int $I11, self, rx73_curclass, "$!from"
    ne $I11, -1, rxscan74_done
    goto rxscan74_scan
  rxscan74_loop:
    inc rx73_pos
    gt rx73_pos, rx73_eos, rx73_fail
    repr_bind_attr_int rx73_cur, rx73_curclass, "$!from", rx73_pos
  rxscan74_scan:
    nqp_rxmark rx73_bstack, rxscan74_loop, rx73_pos, 0
  rxscan74_done:
  # rx rxquantr75 ** 1..-1
    nqp_rxmark rx73_bstack, rxquantr75_done, -1, 0
  rxquantr75_loop:
    repr_bind_attr_int rx73_cur, rx73_curclass, "$!pos", rx73_pos
    $P11 = rx73_cur."ws"()
    repr_get_attr_int $I11, $P11, rx73_curclass, "$!pos"
    lt $I11, 0, rx73_fail
    repr_get_attr_int rx73_pos, $P11, rx73_curclass, "$!pos"
    repr_bind_attr_int rx73_cur, rx73_curclass, "$!pos", rx73_pos
    $P11 = rx73_cur."octint"()
    repr_get_attr_int $I11, $P11, rx73_curclass, "$!pos"
    lt $I11, 0, rx73_fail
    nqp_rxmark rx73_bstack, rxsubrule77_pass, -1, 0
  rxsubrule77_pass:
    rx73_cstack = rx73_cur."!cursor_capture"($P11, "octint")
    repr_get_attr_int rx73_pos, $P11, rx73_curclass, "$!pos"
    repr_bind_attr_int rx73_cur, rx73_curclass, "$!pos", rx73_pos
    $P11 = rx73_cur."ws"()
    repr_get_attr_int $I11, $P11, rx73_curclass, "$!pos"
    lt $I11, 0, rx73_fail
    repr_get_attr_int rx73_pos, $P11, rx73_curclass, "$!pos"
    nqp_rxpeek $I19, rx73_bstack, rxquantr75_done
    inc $I19
    inc $I19
    set rx73_rep, rx73_bstack[$I19]
    nqp_rxcommit rx73_bstack, rxquantr75_done
    inc rx73_rep
    nqp_rxmark rx73_bstack, rxquantr75_done, rx73_pos, rx73_rep
    add $I11, rx73_pos, 1
    gt $I11, rx73_eos, rx73_fail
    substr $S10, rx73_tgt, rx73_pos, 1
    ne $S10, ucs4:",", rx73_fail
    add rx73_pos, 1
    goto rxquantr75_loop
  rxquantr75_done:
    rx73_cur."!cursor_pass"(rx73_pos, "octints", 'backtrack'=>1)
    .return (rx73_cur)
  rx73_restart:
    repr_get_attr_obj rx73_cstack, rx73_cur, rx73_curclass, "$!cstack"
  rx73_fail:
    unless rx73_bstack, rx73_done
    pop $I19, rx73_bstack
    if_null rx73_cstack, rx73_cstack_done
    unless rx73_cstack, rx73_cstack_done
    dec $I19
    set $P11, rx73_cstack[$I19]
  rx73_cstack_done:
    pop rx73_rep, rx73_bstack
    pop rx73_pos, rx73_bstack
    pop $I19, rx73_bstack
    lt rx73_pos, -1, rx73_done
    lt rx73_pos, 0, rx73_fail
    eq $I19, 0, rx73_fail
    if_null rx73_cstack, rx73_jump
    elements $I18, rx73_bstack
    le $I18, 0, rx73_cut
    dec $I18
    set $I18, rx73_bstack[$I18]
  rx73_cut:
    assign rx73_cstack, $I18
  rx73_jump:
    jump $I19
  rx73_done:
    rx73_cur."!cursor_fail"()
    .return (rx73_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "31_1338064439.457_caps"  :subid("211_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 59
    new $P104, "Hash"
    set $P104["octint"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "31_1338064439.457_nfa"  :subid("212_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 59
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "octint"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "ws"
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "binint"  :subid("32_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1117
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 61
    .lex "self", param_1117
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1118
    .lex "$/", $P1119
    .local string rx79_tgt
    .local int rx79_pos
    .local int rx79_off
    .local int rx79_eos
    .local int rx79_rep
    .local pmc rx79_cur
    .local pmc rx79_curclass
    .local pmc rx79_bstack
    .local pmc rx79_cstack
    (rx79_cur, rx79_tgt, rx79_pos, rx79_curclass, rx79_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx79_cur
    length rx79_eos, rx79_tgt
    eq $I19, 1, rx79_restart
    repr_get_attr_int $I11, self, rx79_curclass, "$!from"
    ne $I11, -1, rxscan80_done
    goto rxscan80_scan
  rxscan80_loop:
    inc rx79_pos
    gt rx79_pos, rx79_eos, rx79_fail
    repr_bind_attr_int rx79_cur, rx79_curclass, "$!from", rx79_pos
  rxscan80_scan:
    nqp_rxmark rx79_bstack, rxscan80_loop, rx79_pos, 0
  rxscan80_done:
  # rx rxquantr81 ** 1..-1
    nqp_rxmark rx79_bstack, rxquantr81_done, -1, 0
  rxquantr81_loop:
  # rx rxquantr82 ** 1..-1
    nqp_rxmark rx79_bstack, rxquantr82_done, -1, 0
  rxquantr82_loop:
    ge rx79_pos, rx79_eos, rx79_fail
    substr $S11, rx79_tgt, rx79_pos, 1
    index $I11, ucs4:"01", $S11
    lt $I11, 0, rx79_fail
    inc rx79_pos
    nqp_rxpeek $I19, rx79_bstack, rxquantr82_done
    inc $I19
    inc $I19
    set rx79_rep, rx79_bstack[$I19]
    nqp_rxcommit rx79_bstack, rxquantr82_done
    inc rx79_rep
    nqp_rxmark rx79_bstack, rxquantr82_done, rx79_pos, rx79_rep
    goto rxquantr82_loop
  rxquantr82_done:
    nqp_rxpeek $I19, rx79_bstack, rxquantr81_done
    inc $I19
    inc $I19
    set rx79_rep, rx79_bstack[$I19]
    nqp_rxcommit rx79_bstack, rxquantr81_done
    inc rx79_rep
    nqp_rxmark rx79_bstack, rxquantr81_done, rx79_pos, rx79_rep
    add $I11, rx79_pos, 1
    gt $I11, rx79_eos, rx79_fail
    substr $S10, rx79_tgt, rx79_pos, 1
    ne $S10, ucs4:"_", rx79_fail
    add rx79_pos, 1
    goto rxquantr81_loop
  rxquantr81_done:
    rx79_cur."!cursor_pass"(rx79_pos, "binint", 'backtrack'=>1)
    .return (rx79_cur)
  rx79_restart:
    repr_get_attr_obj rx79_cstack, rx79_cur, rx79_curclass, "$!cstack"
  rx79_fail:
    unless rx79_bstack, rx79_done
    pop $I19, rx79_bstack
    if_null rx79_cstack, rx79_cstack_done
    unless rx79_cstack, rx79_cstack_done
    dec $I19
    set $P11, rx79_cstack[$I19]
  rx79_cstack_done:
    pop rx79_rep, rx79_bstack
    pop rx79_pos, rx79_bstack
    pop $I19, rx79_bstack
    lt rx79_pos, -1, rx79_done
    lt rx79_pos, 0, rx79_fail
    eq $I19, 0, rx79_fail
    if_null rx79_cstack, rx79_jump
    elements $I18, rx79_bstack
    le $I18, 0, rx79_cut
    dec $I18
    set $I18, rx79_bstack[$I18]
  rx79_cut:
    assign rx79_cstack, $I18
  rx79_jump:
    jump $I19
  rx79_done:
    rx79_cur."!cursor_fail"()
    .return (rx79_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "32_1338064439.457_caps"  :subid("213_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 61
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "32_1338064439.457_nfa"  :subid("214_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 61
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 6
    push $P108, "01"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 4
    push $P109, 1
    push $P109, 0
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "binints"  :subid("33_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1123
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 62
    .lex "self", param_1123
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1124
    .lex "$/", $P1125
    .local string rx83_tgt
    .local int rx83_pos
    .local int rx83_off
    .local int rx83_eos
    .local int rx83_rep
    .local pmc rx83_cur
    .local pmc rx83_curclass
    .local pmc rx83_bstack
    .local pmc rx83_cstack
    (rx83_cur, rx83_tgt, rx83_pos, rx83_curclass, rx83_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx83_cur
    length rx83_eos, rx83_tgt
    eq $I19, 1, rx83_restart
    repr_get_attr_int $I11, self, rx83_curclass, "$!from"
    ne $I11, -1, rxscan84_done
    goto rxscan84_scan
  rxscan84_loop:
    inc rx83_pos
    gt rx83_pos, rx83_eos, rx83_fail
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!from", rx83_pos
  rxscan84_scan:
    nqp_rxmark rx83_bstack, rxscan84_loop, rx83_pos, 0
  rxscan84_done:
  # rx rxquantr85 ** 1..-1
    nqp_rxmark rx83_bstack, rxquantr85_done, -1, 0
  rxquantr85_loop:
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!pos", rx83_pos
    $P11 = rx83_cur."ws"()
    repr_get_attr_int $I11, $P11, rx83_curclass, "$!pos"
    lt $I11, 0, rx83_fail
    repr_get_attr_int rx83_pos, $P11, rx83_curclass, "$!pos"
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!pos", rx83_pos
    $P11 = rx83_cur."binint"()
    repr_get_attr_int $I11, $P11, rx83_curclass, "$!pos"
    lt $I11, 0, rx83_fail
    nqp_rxmark rx83_bstack, rxsubrule87_pass, -1, 0
  rxsubrule87_pass:
    rx83_cstack = rx83_cur."!cursor_capture"($P11, "binint")
    repr_get_attr_int rx83_pos, $P11, rx83_curclass, "$!pos"
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!pos", rx83_pos
    $P11 = rx83_cur."ws"()
    repr_get_attr_int $I11, $P11, rx83_curclass, "$!pos"
    lt $I11, 0, rx83_fail
    repr_get_attr_int rx83_pos, $P11, rx83_curclass, "$!pos"
    nqp_rxpeek $I19, rx83_bstack, rxquantr85_done
    inc $I19
    inc $I19
    set rx83_rep, rx83_bstack[$I19]
    nqp_rxcommit rx83_bstack, rxquantr85_done
    inc rx83_rep
    nqp_rxmark rx83_bstack, rxquantr85_done, rx83_pos, rx83_rep
    add $I11, rx83_pos, 1
    gt $I11, rx83_eos, rx83_fail
    substr $S10, rx83_tgt, rx83_pos, 1
    ne $S10, ucs4:",", rx83_fail
    add rx83_pos, 1
    goto rxquantr85_loop
  rxquantr85_done:
    rx83_cur."!cursor_pass"(rx83_pos, "binints", 'backtrack'=>1)
    .return (rx83_cur)
  rx83_restart:
    repr_get_attr_obj rx83_cstack, rx83_cur, rx83_curclass, "$!cstack"
  rx83_fail:
    unless rx83_bstack, rx83_done
    pop $I19, rx83_bstack
    if_null rx83_cstack, rx83_cstack_done
    unless rx83_cstack, rx83_cstack_done
    dec $I19
    set $P11, rx83_cstack[$I19]
  rx83_cstack_done:
    pop rx83_rep, rx83_bstack
    pop rx83_pos, rx83_bstack
    pop $I19, rx83_bstack
    lt rx83_pos, -1, rx83_done
    lt rx83_pos, 0, rx83_fail
    eq $I19, 0, rx83_fail
    if_null rx83_cstack, rx83_jump
    elements $I18, rx83_bstack
    le $I18, 0, rx83_cut
    dec $I18
    set $I18, rx83_bstack[$I18]
  rx83_cut:
    assign rx83_cstack, $I18
  rx83_jump:
    jump $I19
  rx83_done:
    rx83_cur."!cursor_fail"()
    .return (rx83_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "33_1338064439.457_caps"  :subid("215_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 62
    new $P104, "Hash"
    set $P104["binint"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "33_1338064439.457_nfa"  :subid("216_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 62
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "binint"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "ws"
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "integer"  :subid("34_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1129
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 64
    .lex "self", param_1129
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1130
    .lex "$/", $P1131
    .local string rx89_tgt
    .local int rx89_pos
    .local int rx89_off
    .local int rx89_eos
    .local int rx89_rep
    .local pmc rx89_cur
    .local pmc rx89_curclass
    .local pmc rx89_bstack
    .local pmc rx89_cstack
    (rx89_cur, rx89_tgt, rx89_pos, rx89_curclass, rx89_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx89_cur
    length rx89_eos, rx89_tgt
    eq $I19, 1, rx89_restart
    repr_get_attr_int $I11, self, rx89_curclass, "$!from"
    ne $I11, -1, rxscan90_done
    goto rxscan90_scan
  rxscan90_loop:
    inc rx89_pos
    gt rx89_pos, rx89_eos, rx89_fail
    repr_bind_attr_int rx89_cur, rx89_curclass, "$!from", rx89_pos
  rxscan90_scan:
    nqp_rxmark rx89_bstack, rxscan90_loop, rx89_pos, 0
  rxscan90_done:
  alt91_0:
    nqp_rxmark rx89_bstack, alt91_1, rx89_pos, 0
    add $I11, rx89_pos, 1
    gt $I11, rx89_eos, rx89_fail
    substr $S10, rx89_tgt, rx89_pos, 1
    ne $S10, ucs4:"0", rx89_fail
    add rx89_pos, 1
  alt92_0:
    nqp_rxmark rx89_bstack, alt92_1, rx89_pos, 0
    add $I11, rx89_pos, 1
    gt $I11, rx89_eos, rx89_fail
    substr $S10, rx89_tgt, rx89_pos, 1
    ne $S10, ucs4:"b", rx89_fail
    add rx89_pos, 1
    repr_bind_attr_int rx89_cur, rx89_curclass, "$!pos", rx89_pos
    $P11 = rx89_cur."binint"()
    repr_get_attr_int $I11, $P11, rx89_curclass, "$!pos"
    lt $I11, 0, rx89_fail
    nqp_rxmark rx89_bstack, rxsubrule93_pass, -1, 0
  rxsubrule93_pass:
    rx89_cstack = rx89_cur."!cursor_capture"($P11, "VALUE=binint")
    repr_get_attr_int rx89_pos, $P11, rx89_curclass, "$!pos"
    goto alt92_end
  alt92_1:
    nqp_rxmark rx89_bstack, alt92_2, rx89_pos, 0
    add $I11, rx89_pos, 1
    gt $I11, rx89_eos, rx89_fail
    substr $S10, rx89_tgt, rx89_pos, 1
    ne $S10, ucs4:"o", rx89_fail
    add rx89_pos, 1
    repr_bind_attr_int rx89_cur, rx89_curclass, "$!pos", rx89_pos
    $P11 = rx89_cur."octint"()
    repr_get_attr_int $I11, $P11, rx89_curclass, "$!pos"
    lt $I11, 0, rx89_fail
    nqp_rxmark rx89_bstack, rxsubrule94_pass, -1, 0
  rxsubrule94_pass:
    rx89_cstack = rx89_cur."!cursor_capture"($P11, "VALUE=octint")
    repr_get_attr_int rx89_pos, $P11, rx89_curclass, "$!pos"
    goto alt92_end
  alt92_2:
    nqp_rxmark rx89_bstack, alt92_3, rx89_pos, 0
    add $I11, rx89_pos, 1
    gt $I11, rx89_eos, rx89_fail
    substr $S10, rx89_tgt, rx89_pos, 1
    ne $S10, ucs4:"x", rx89_fail
    add rx89_pos, 1
    repr_bind_attr_int rx89_cur, rx89_curclass, "$!pos", rx89_pos
    $P11 = rx89_cur."hexint"()
    repr_get_attr_int $I11, $P11, rx89_curclass, "$!pos"
    lt $I11, 0, rx89_fail
    nqp_rxmark rx89_bstack, rxsubrule95_pass, -1, 0
  rxsubrule95_pass:
    rx89_cstack = rx89_cur."!cursor_capture"($P11, "VALUE=hexint")
    repr_get_attr_int rx89_pos, $P11, rx89_curclass, "$!pos"
    goto alt92_end
  alt92_3:
    add $I11, rx89_pos, 1
    gt $I11, rx89_eos, rx89_fail
    substr $S10, rx89_tgt, rx89_pos, 1
    ne $S10, ucs4:"d", rx89_fail
    add rx89_pos, 1
    repr_bind_attr_int rx89_cur, rx89_curclass, "$!pos", rx89_pos
    $P11 = rx89_cur."decint"()
    repr_get_attr_int $I11, $P11, rx89_curclass, "$!pos"
    lt $I11, 0, rx89_fail
    nqp_rxmark rx89_bstack, rxsubrule96_pass, -1, 0
  rxsubrule96_pass:
    rx89_cstack = rx89_cur."!cursor_capture"($P11, "VALUE=decint")
    repr_get_attr_int rx89_pos, $P11, rx89_curclass, "$!pos"
  alt92_end:
    goto alt91_end
  alt91_1:
    repr_bind_attr_int rx89_cur, rx89_curclass, "$!pos", rx89_pos
    $P11 = rx89_cur."decint"()
    repr_get_attr_int $I11, $P11, rx89_curclass, "$!pos"
    lt $I11, 0, rx89_fail
    nqp_rxmark rx89_bstack, rxsubrule97_pass, -1, 0
  rxsubrule97_pass:
    rx89_cstack = rx89_cur."!cursor_capture"($P11, "VALUE=decint")
    repr_get_attr_int rx89_pos, $P11, rx89_curclass, "$!pos"
  alt91_end:
    rx89_cur."!cursor_pass"(rx89_pos, "integer", 'backtrack'=>1)
    .return (rx89_cur)
  rx89_restart:
    repr_get_attr_obj rx89_cstack, rx89_cur, rx89_curclass, "$!cstack"
  rx89_fail:
    unless rx89_bstack, rx89_done
    pop $I19, rx89_bstack
    if_null rx89_cstack, rx89_cstack_done
    unless rx89_cstack, rx89_cstack_done
    dec $I19
    set $P11, rx89_cstack[$I19]
  rx89_cstack_done:
    pop rx89_rep, rx89_bstack
    pop rx89_pos, rx89_bstack
    pop $I19, rx89_bstack
    lt rx89_pos, -1, rx89_done
    lt rx89_pos, 0, rx89_fail
    eq $I19, 0, rx89_fail
    if_null rx89_cstack, rx89_jump
    elements $I18, rx89_bstack
    le $I18, 0, rx89_cut
    dec $I18
    set $I18, rx89_bstack[$I18]
  rx89_cut:
    assign rx89_cstack, $I18
  rx89_jump:
    jump $I19
  rx89_done:
    rx89_cur."!cursor_fail"()
    .return (rx89_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "34_1338064439.457_caps"  :subid("217_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 64
    new $P104, "Hash"
    set $P104["VALUE"], 0
    set $P104["binint"], 0
    set $P104["octint"], 0
    set $P104["hexint"], 0
    set $P104["decint"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "34_1338064439.457_nfa"  :subid("218_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 64
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 48
    push $P105, 2
    push $P105, 8
    push $P105, "decint"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 98
    push $P106, 3
    push $P106, 2
    push $P106, 111
    push $P106, 4
    push $P106, 2
    push $P106, 120
    push $P106, 5
    push $P106, 2
    push $P106, 100
    push $P106, 6
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "binint"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "octint"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "hexint"
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, 8
    push $P110, "decint"
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P104
    push $P111, $P105
    push $P111, $P106
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "dec_number"  :subid("35_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1135
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 75
    .lex "self", param_1135
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1136
    .lex "$/", $P1137
    .local string rx98_tgt
    .local int rx98_pos
    .local int rx98_off
    .local int rx98_eos
    .local int rx98_rep
    .local pmc rx98_cur
    .local pmc rx98_curclass
    .local pmc rx98_bstack
    .local pmc rx98_cstack
    (rx98_cur, rx98_tgt, rx98_pos, rx98_curclass, rx98_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx98_cur
    length rx98_eos, rx98_tgt
    eq $I19, 1, rx98_restart
    repr_get_attr_int $I11, self, rx98_curclass, "$!from"
    ne $I11, -1, rxscan99_done
    goto rxscan99_scan
  rxscan99_loop:
    inc rx98_pos
    gt rx98_pos, rx98_eos, rx98_fail
    repr_bind_attr_int rx98_cur, rx98_curclass, "$!from", rx98_pos
  rxscan99_scan:
    nqp_rxmark rx98_bstack, rxscan99_loop, rx98_pos, 0
  rxscan99_done:
  alt100_0:
    nqp_rxmark rx98_bstack, alt100_1, rx98_pos, 0
    nqp_rxmark rx98_bstack, rxcap101_fail, rx98_pos, 0
    add $I11, rx98_pos, 1
    gt $I11, rx98_eos, rx98_fail
    substr $S10, rx98_tgt, rx98_pos, 1
    ne $S10, ucs4:".", rx98_fail
    add rx98_pos, 1
  # rx rxquantr102 ** 1..-1
    nqp_rxmark rx98_bstack, rxquantr102_done, -1, 0
  rxquantr102_loop:
    ge rx98_pos, rx98_eos, rx98_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx98_tgt, rx98_pos
    unless $I11, rx98_fail
    add rx98_pos, 1
    nqp_rxpeek $I19, rx98_bstack, rxquantr102_done
    inc $I19
    inc $I19
    set rx98_rep, rx98_bstack[$I19]
    nqp_rxcommit rx98_bstack, rxquantr102_done
    inc rx98_rep
    nqp_rxmark rx98_bstack, rxquantr102_done, rx98_pos, rx98_rep
    goto rxquantr102_loop
  rxquantr102_done:
    nqp_rxpeek $I19, rx98_bstack, rxcap101_fail
    inc $I19
    set $I11, rx98_bstack[$I19]
    $P11 = rx98_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx98_pos)
    rx98_cstack = rx98_cur."!cursor_capture"($P11, "coeff")
    goto rxcap101_done
  rxcap101_fail:
    goto rx98_fail
  rxcap101_done:
  # rx rxquantr103 ** 0..1
    nqp_rxmark rx98_bstack, rxquantr103_done, rx98_pos, 0
  rxquantr103_loop:
    repr_bind_attr_int rx98_cur, rx98_curclass, "$!pos", rx98_pos
    $P11 = rx98_cur."escale"()
    repr_get_attr_int $I11, $P11, rx98_curclass, "$!pos"
    lt $I11, 0, rx98_fail
    goto rxsubrule104_pass
  rxsubrule104_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx98_curclass, "$!pos"
    lt $I11, 0, rx98_fail
  rxsubrule104_pass:
    rx98_cstack = rx98_cur."!cursor_capture"($P11, "escale")
    set_addr $I11, rxsubrule104_back
    push rx98_bstack, $I11
    push rx98_bstack, 0
    push rx98_bstack, rx98_pos
    elements $I11, rx98_cstack
    push rx98_bstack, $I11
    repr_get_attr_int rx98_pos, $P11, rx98_curclass, "$!pos"
    nqp_rxpeek $I19, rx98_bstack, rxquantr103_done
    inc $I19
    inc $I19
    set rx98_rep, rx98_bstack[$I19]
    nqp_rxcommit rx98_bstack, rxquantr103_done
    inc rx98_rep
  rxquantr103_done:
    goto alt100_end
  alt100_1:
    nqp_rxmark rx98_bstack, alt100_2, rx98_pos, 0
    nqp_rxmark rx98_bstack, rxcap105_fail, rx98_pos, 0
  # rx rxquantr106 ** 1..-1
    nqp_rxmark rx98_bstack, rxquantr106_done, -1, 0
  rxquantr106_loop:
    ge rx98_pos, rx98_eos, rx98_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx98_tgt, rx98_pos
    unless $I11, rx98_fail
    add rx98_pos, 1
    nqp_rxpeek $I19, rx98_bstack, rxquantr106_done
    inc $I19
    inc $I19
    set rx98_rep, rx98_bstack[$I19]
    nqp_rxcommit rx98_bstack, rxquantr106_done
    inc rx98_rep
    nqp_rxmark rx98_bstack, rxquantr106_done, rx98_pos, rx98_rep
    goto rxquantr106_loop
  rxquantr106_done:
    add $I11, rx98_pos, 1
    gt $I11, rx98_eos, rx98_fail
    substr $S10, rx98_tgt, rx98_pos, 1
    ne $S10, ucs4:".", rx98_fail
    add rx98_pos, 1
  # rx rxquantr107 ** 1..-1
    nqp_rxmark rx98_bstack, rxquantr107_done, -1, 0
  rxquantr107_loop:
    ge rx98_pos, rx98_eos, rx98_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx98_tgt, rx98_pos
    unless $I11, rx98_fail
    add rx98_pos, 1
    nqp_rxpeek $I19, rx98_bstack, rxquantr107_done
    inc $I19
    inc $I19
    set rx98_rep, rx98_bstack[$I19]
    nqp_rxcommit rx98_bstack, rxquantr107_done
    inc rx98_rep
    nqp_rxmark rx98_bstack, rxquantr107_done, rx98_pos, rx98_rep
    goto rxquantr107_loop
  rxquantr107_done:
    nqp_rxpeek $I19, rx98_bstack, rxcap105_fail
    inc $I19
    set $I11, rx98_bstack[$I19]
    $P11 = rx98_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx98_pos)
    rx98_cstack = rx98_cur."!cursor_capture"($P11, "coeff")
    goto rxcap105_done
  rxcap105_fail:
    goto rx98_fail
  rxcap105_done:
  # rx rxquantr108 ** 0..1
    nqp_rxmark rx98_bstack, rxquantr108_done, rx98_pos, 0
  rxquantr108_loop:
    repr_bind_attr_int rx98_cur, rx98_curclass, "$!pos", rx98_pos
    $P11 = rx98_cur."escale"()
    repr_get_attr_int $I11, $P11, rx98_curclass, "$!pos"
    lt $I11, 0, rx98_fail
    goto rxsubrule109_pass
  rxsubrule109_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx98_curclass, "$!pos"
    lt $I11, 0, rx98_fail
  rxsubrule109_pass:
    rx98_cstack = rx98_cur."!cursor_capture"($P11, "escale")
    set_addr $I11, rxsubrule109_back
    push rx98_bstack, $I11
    push rx98_bstack, 0
    push rx98_bstack, rx98_pos
    elements $I11, rx98_cstack
    push rx98_bstack, $I11
    repr_get_attr_int rx98_pos, $P11, rx98_curclass, "$!pos"
    nqp_rxpeek $I19, rx98_bstack, rxquantr108_done
    inc $I19
    inc $I19
    set rx98_rep, rx98_bstack[$I19]
    nqp_rxcommit rx98_bstack, rxquantr108_done
    inc rx98_rep
  rxquantr108_done:
    goto alt100_end
  alt100_2:
    nqp_rxmark rx98_bstack, rxcap110_fail, rx98_pos, 0
  # rx rxquantr111 ** 1..-1
    nqp_rxmark rx98_bstack, rxquantr111_done, -1, 0
  rxquantr111_loop:
    ge rx98_pos, rx98_eos, rx98_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx98_tgt, rx98_pos
    unless $I11, rx98_fail
    add rx98_pos, 1
    nqp_rxpeek $I19, rx98_bstack, rxquantr111_done
    inc $I19
    inc $I19
    set rx98_rep, rx98_bstack[$I19]
    nqp_rxcommit rx98_bstack, rxquantr111_done
    inc rx98_rep
    nqp_rxmark rx98_bstack, rxquantr111_done, rx98_pos, rx98_rep
    goto rxquantr111_loop
  rxquantr111_done:
    nqp_rxpeek $I19, rx98_bstack, rxcap110_fail
    inc $I19
    set $I11, rx98_bstack[$I19]
    $P11 = rx98_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx98_pos)
    rx98_cstack = rx98_cur."!cursor_capture"($P11, "coeff")
    goto rxcap110_done
  rxcap110_fail:
    goto rx98_fail
  rxcap110_done:
    repr_bind_attr_int rx98_cur, rx98_curclass, "$!pos", rx98_pos
    $P11 = rx98_cur."escale"()
    repr_get_attr_int $I11, $P11, rx98_curclass, "$!pos"
    lt $I11, 0, rx98_fail
    nqp_rxmark rx98_bstack, rxsubrule112_pass, -1, 0
  rxsubrule112_pass:
    rx98_cstack = rx98_cur."!cursor_capture"($P11, "escale")
    repr_get_attr_int rx98_pos, $P11, rx98_curclass, "$!pos"
  alt100_end:
    rx98_cur."!cursor_pass"(rx98_pos, "dec_number", 'backtrack'=>1)
    .return (rx98_cur)
  rx98_restart:
    repr_get_attr_obj rx98_cstack, rx98_cur, rx98_curclass, "$!cstack"
  rx98_fail:
    unless rx98_bstack, rx98_done
    pop $I19, rx98_bstack
    if_null rx98_cstack, rx98_cstack_done
    unless rx98_cstack, rx98_cstack_done
    dec $I19
    set $P11, rx98_cstack[$I19]
  rx98_cstack_done:
    pop rx98_rep, rx98_bstack
    pop rx98_pos, rx98_bstack
    pop $I19, rx98_bstack
    lt rx98_pos, -1, rx98_done
    lt rx98_pos, 0, rx98_fail
    eq $I19, 0, rx98_fail
    if_null rx98_cstack, rx98_jump
    elements $I18, rx98_bstack
    le $I18, 0, rx98_cut
    dec $I18
    set $I18, rx98_bstack[$I18]
  rx98_cut:
    assign rx98_cstack, $I18
  rx98_jump:
    jump $I19
  rx98_done:
    rx98_cur."!cursor_fail"()
    .return (rx98_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "35_1338064439.457_caps"  :subid("219_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 75
    new $P104, "Hash"
    set $P104["coeff"], 0
    set $P104["escale"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "35_1338064439.457_nfa"  :subid("220_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 75
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 46
    push $P105, 2
    push $P105, 1
    push $P105, 0
    push $P105, 6
    push $P105, 1
    push $P105, 0
    push $P105, 13
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 4
    push $P107, 8
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 3
    push $P108, 1
    push $P108, 0
    push $P108, 5
    push $P108, 8
    push $P108, "escale"
    push $P108, 0
    push $P108, 1
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    new $P110, "ResizablePMCArray"
    push $P110, 4
    push $P110, 8
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 1
    push $P111, 0
    push $P111, 6
    push $P111, 1
    push $P111, 0
    push $P111, 8
    push $P111, 2
    push $P111, 46
    push $P111, 9
    new $P112, "ResizablePMCArray"
    new $P113, "ResizablePMCArray"
    push $P113, 1
    push $P113, 0
    push $P113, 10
    new $P114, "ResizablePMCArray"
    push $P114, 4
    push $P114, 8
    push $P114, 11
    new $P115, "ResizablePMCArray"
    push $P115, 1
    push $P115, 0
    push $P115, 10
    push $P115, 1
    push $P115, 0
    push $P115, 12
    push $P115, 8
    push $P115, "escale"
    push $P115, 0
    push $P115, 1
    push $P115, 0
    push $P115, 0
    new $P116, "ResizablePMCArray"
    new $P117, "ResizablePMCArray"
    push $P117, 4
    push $P117, 8
    push $P117, 14
    new $P118, "ResizablePMCArray"
    push $P118, 1
    push $P118, 0
    push $P118, 13
    push $P118, 1
    push $P118, 0
    push $P118, 15
    push $P118, 8
    push $P118, "escale"
    push $P118, 0
    new $P119, "ResizablePMCArray"
    new $P120, "ResizablePMCArray"
    push $P120, $P104
    push $P120, $P105
    push $P120, $P106
    push $P120, $P107
    push $P120, $P108
    push $P120, $P109
    push $P120, $P110
    push $P120, $P111
    push $P120, $P112
    push $P120, $P113
    push $P120, $P114
    push $P120, $P115
    push $P120, $P116
    push $P120, $P117
    push $P120, $P118
    push $P120, $P119
    .return ($P120)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "escale"  :subid("36_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1141
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 81
    .lex "self", param_1141
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1142
    .lex "$/", $P1143
    .local string rx113_tgt
    .local int rx113_pos
    .local int rx113_off
    .local int rx113_eos
    .local int rx113_rep
    .local pmc rx113_cur
    .local pmc rx113_curclass
    .local pmc rx113_bstack
    .local pmc rx113_cstack
    (rx113_cur, rx113_tgt, rx113_pos, rx113_curclass, rx113_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx113_cur
    length rx113_eos, rx113_tgt
    eq $I19, 1, rx113_restart
    repr_get_attr_int $I11, self, rx113_curclass, "$!from"
    ne $I11, -1, rxscan114_done
    goto rxscan114_scan
  rxscan114_loop:
    inc rx113_pos
    gt rx113_pos, rx113_eos, rx113_fail
    repr_bind_attr_int rx113_cur, rx113_curclass, "$!from", rx113_pos
  rxscan114_scan:
    nqp_rxmark rx113_bstack, rxscan114_loop, rx113_pos, 0
  rxscan114_done:
    ge rx113_pos, rx113_eos, rx113_fail
    substr $S11, rx113_tgt, rx113_pos, 1
    index $I11, ucs4:"Ee", $S11
    lt $I11, 0, rx113_fail
    inc rx113_pos
  # rx rxquantr115 ** 0..1
    nqp_rxmark rx113_bstack, rxquantr115_done, rx113_pos, 0
  rxquantr115_loop:
  alt116_0:
    nqp_rxmark rx113_bstack, alt116_1, rx113_pos, 0
    add $I11, rx113_pos, 1
    gt $I11, rx113_eos, rx113_fail
    substr $S10, rx113_tgt, rx113_pos, 1
    ne $S10, ucs4:"-", rx113_fail
    add rx113_pos, 1
    goto alt116_end
  alt116_1:
    ge rx113_pos, rx113_eos, rx113_fail
    substr $S11, rx113_tgt, rx113_pos, 1
    index $I11, ucs4:"+", $S11
    lt $I11, 0, rx113_fail
    inc rx113_pos
  alt116_end:
    nqp_rxpeek $I19, rx113_bstack, rxquantr115_done
    inc $I19
    inc $I19
    set rx113_rep, rx113_bstack[$I19]
    nqp_rxcommit rx113_bstack, rxquantr115_done
    inc rx113_rep
  rxquantr115_done:
  # rx rxquantr117 ** 1..-1
    nqp_rxmark rx113_bstack, rxquantr117_done, -1, 0
  rxquantr117_loop:
    ge rx113_pos, rx113_eos, rx113_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx113_tgt, rx113_pos
    unless $I11, rx113_fail
    add rx113_pos, 1
    nqp_rxpeek $I19, rx113_bstack, rxquantr117_done
    inc $I19
    inc $I19
    set rx113_rep, rx113_bstack[$I19]
    nqp_rxcommit rx113_bstack, rxquantr117_done
    inc rx113_rep
    nqp_rxmark rx113_bstack, rxquantr117_done, rx113_pos, rx113_rep
    goto rxquantr117_loop
  rxquantr117_done:
    rx113_cur."!cursor_pass"(rx113_pos, "escale", 'backtrack'=>1)
    .return (rx113_cur)
  rx113_restart:
    repr_get_attr_obj rx113_cstack, rx113_cur, rx113_curclass, "$!cstack"
  rx113_fail:
    unless rx113_bstack, rx113_done
    pop $I19, rx113_bstack
    if_null rx113_cstack, rx113_cstack_done
    unless rx113_cstack, rx113_cstack_done
    dec $I19
    set $P11, rx113_cstack[$I19]
  rx113_cstack_done:
    pop rx113_rep, rx113_bstack
    pop rx113_pos, rx113_bstack
    pop $I19, rx113_bstack
    lt rx113_pos, -1, rx113_done
    lt rx113_pos, 0, rx113_fail
    eq $I19, 0, rx113_fail
    if_null rx113_cstack, rx113_jump
    elements $I18, rx113_bstack
    le $I18, 0, rx113_cut
    dec $I18
    set $I18, rx113_bstack[$I18]
  rx113_cut:
    assign rx113_cstack, $I18
  rx113_jump:
    jump $I19
  rx113_done:
    rx113_cur."!cursor_fail"()
    .return (rx113_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "36_1338064439.457_caps"  :subid("221_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 81
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "36_1338064439.457_nfa"  :subid("222_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 81
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "Ee"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 45
    push $P106, 3
    push $P106, 6
    push $P106, "+"
    push $P106, 3
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 4
    push $P108, 8
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 4
    push $P109, 1
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape"  :subid("37_1338064439.457")
    .param pmc param_1147
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 83
    .lex "self", param_1147
    $P103 = param_1147."!protoregex"("quote_escape")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<backslash>"  :subid("38_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1149
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 84
    .lex "self", param_1149
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1150
    .lex "$/", $P1151
    .local string rx118_tgt
    .local int rx118_pos
    .local int rx118_off
    .local int rx118_eos
    .local int rx118_rep
    .local pmc rx118_cur
    .local pmc rx118_curclass
    .local pmc rx118_bstack
    .local pmc rx118_cstack
    (rx118_cur, rx118_tgt, rx118_pos, rx118_curclass, rx118_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx118_cur
    length rx118_eos, rx118_tgt
    eq $I19, 1, rx118_restart
    repr_get_attr_int $I11, self, rx118_curclass, "$!from"
    ne $I11, -1, rxscan119_done
    goto rxscan119_scan
  rxscan119_loop:
    inc rx118_pos
    gt rx118_pos, rx118_eos, rx118_fail
    repr_bind_attr_int rx118_cur, rx118_curclass, "$!from", rx118_pos
  rxscan119_scan:
    nqp_rxmark rx118_bstack, rxscan119_loop, rx118_pos, 0
  rxscan119_done:
    add $I11, rx118_pos, 2
    gt $I11, rx118_eos, rx118_fail
    substr $S10, rx118_tgt, rx118_pos, 2
    ne $S10, ucs4:"\\\\", rx118_fail
    add rx118_pos, 2
    repr_bind_attr_int rx118_cur, rx118_curclass, "$!pos", rx118_pos
    $P11 = rx118_cur."quotemod_check"("q")
    repr_get_attr_int $I11, $P11, rx118_curclass, "$!pos"
    lt $I11, 0, rx118_fail
    rx118_cur."!cursor_pass"(rx118_pos, "quote_escape:sym<backslash>", 'backtrack'=>1)
    .return (rx118_cur)
  rx118_restart:
    repr_get_attr_obj rx118_cstack, rx118_cur, rx118_curclass, "$!cstack"
  rx118_fail:
    unless rx118_bstack, rx118_done
    pop $I19, rx118_bstack
    if_null rx118_cstack, rx118_cstack_done
    unless rx118_cstack, rx118_cstack_done
    dec $I19
    set $P11, rx118_cstack[$I19]
  rx118_cstack_done:
    pop rx118_rep, rx118_bstack
    pop rx118_pos, rx118_bstack
    pop $I19, rx118_bstack
    lt rx118_pos, -1, rx118_done
    lt rx118_pos, 0, rx118_fail
    eq $I19, 0, rx118_fail
    if_null rx118_cstack, rx118_jump
    elements $I18, rx118_bstack
    le $I18, 0, rx118_cut
    dec $I18
    set $I18, rx118_bstack[$I18]
  rx118_cut:
    assign rx118_cstack, $I18
  rx118_jump:
    jump $I19
  rx118_done:
    rx118_cur."!cursor_fail"()
    .return (rx118_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "38_1338064439.457_caps"  :subid("223_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 84
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "38_1338064439.457_nfa"  :subid("224_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 84
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 92
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<stopper>"  :subid("39_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1155
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 85
    .lex "self", param_1155
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1156
    .lex "$/", $P1157
    .local string rx120_tgt
    .local int rx120_pos
    .local int rx120_off
    .local int rx120_eos
    .local int rx120_rep
    .local pmc rx120_cur
    .local pmc rx120_curclass
    .local pmc rx120_bstack
    .local pmc rx120_cstack
    (rx120_cur, rx120_tgt, rx120_pos, rx120_curclass, rx120_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx120_cur
    length rx120_eos, rx120_tgt
    eq $I19, 1, rx120_restart
    repr_get_attr_int $I11, self, rx120_curclass, "$!from"
    ne $I11, -1, rxscan121_done
    goto rxscan121_scan
  rxscan121_loop:
    inc rx120_pos
    gt rx120_pos, rx120_eos, rx120_fail
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!from", rx120_pos
  rxscan121_scan:
    nqp_rxmark rx120_bstack, rxscan121_loop, rx120_pos, 0
  rxscan121_done:
    add $I11, rx120_pos, 1
    gt $I11, rx120_eos, rx120_fail
    substr $S10, rx120_tgt, rx120_pos, 1
    ne $S10, ucs4:"\\", rx120_fail
    add rx120_pos, 1
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!pos", rx120_pos
    $P11 = rx120_cur."quotemod_check"("q")
    repr_get_attr_int $I11, $P11, rx120_curclass, "$!pos"
    lt $I11, 0, rx120_fail
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!pos", rx120_pos
    $P11 = rx120_cur."stopper"()
    repr_get_attr_int $I11, $P11, rx120_curclass, "$!pos"
    lt $I11, 0, rx120_fail
    nqp_rxmark rx120_bstack, rxsubrule122_pass, -1, 0
  rxsubrule122_pass:
    rx120_cstack = rx120_cur."!cursor_capture"($P11, "stopper")
    repr_get_attr_int rx120_pos, $P11, rx120_curclass, "$!pos"
    rx120_cur."!cursor_pass"(rx120_pos, "quote_escape:sym<stopper>", 'backtrack'=>1)
    .return (rx120_cur)
  rx120_restart:
    repr_get_attr_obj rx120_cstack, rx120_cur, rx120_curclass, "$!cstack"
  rx120_fail:
    unless rx120_bstack, rx120_done
    pop $I19, rx120_bstack
    if_null rx120_cstack, rx120_cstack_done
    unless rx120_cstack, rx120_cstack_done
    dec $I19
    set $P11, rx120_cstack[$I19]
  rx120_cstack_done:
    pop rx120_rep, rx120_bstack
    pop rx120_pos, rx120_bstack
    pop $I19, rx120_bstack
    lt rx120_pos, -1, rx120_done
    lt rx120_pos, 0, rx120_fail
    eq $I19, 0, rx120_fail
    if_null rx120_cstack, rx120_jump
    elements $I18, rx120_bstack
    le $I18, 0, rx120_cut
    dec $I18
    set $I18, rx120_bstack[$I18]
  rx120_cut:
    assign rx120_cstack, $I18
  rx120_jump:
    jump $I19
  rx120_done:
    rx120_cur."!cursor_fail"()
    .return (rx120_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "39_1338064439.457_caps"  :subid("225_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 85
    new $P104, "Hash"
    set $P104["stopper"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "39_1338064439.457_nfa"  :subid("226_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 85
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "quotemod_check"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<bs>"  :subid("40_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1161
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 87
    .lex "self", param_1161
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1162
    .lex "$/", $P1163
    .local string rx123_tgt
    .local int rx123_pos
    .local int rx123_off
    .local int rx123_eos
    .local int rx123_rep
    .local pmc rx123_cur
    .local pmc rx123_curclass
    .local pmc rx123_bstack
    .local pmc rx123_cstack
    (rx123_cur, rx123_tgt, rx123_pos, rx123_curclass, rx123_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx123_cur
    length rx123_eos, rx123_tgt
    eq $I19, 1, rx123_restart
    repr_get_attr_int $I11, self, rx123_curclass, "$!from"
    ne $I11, -1, rxscan124_done
    goto rxscan124_scan
  rxscan124_loop:
    inc rx123_pos
    gt rx123_pos, rx123_eos, rx123_fail
    repr_bind_attr_int rx123_cur, rx123_curclass, "$!from", rx123_pos
  rxscan124_scan:
    nqp_rxmark rx123_bstack, rxscan124_loop, rx123_pos, 0
  rxscan124_done:
    add $I11, rx123_pos, 2
    gt $I11, rx123_eos, rx123_fail
    substr $S10, rx123_tgt, rx123_pos, 2
    ne $S10, ucs4:"\\b", rx123_fail
    add rx123_pos, 2
    repr_bind_attr_int rx123_cur, rx123_curclass, "$!pos", rx123_pos
    $P11 = rx123_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx123_curclass, "$!pos"
    lt $I11, 0, rx123_fail
    rx123_cur."!cursor_pass"(rx123_pos, "quote_escape:sym<bs>", 'backtrack'=>1)
    .return (rx123_cur)
  rx123_restart:
    repr_get_attr_obj rx123_cstack, rx123_cur, rx123_curclass, "$!cstack"
  rx123_fail:
    unless rx123_bstack, rx123_done
    pop $I19, rx123_bstack
    if_null rx123_cstack, rx123_cstack_done
    unless rx123_cstack, rx123_cstack_done
    dec $I19
    set $P11, rx123_cstack[$I19]
  rx123_cstack_done:
    pop rx123_rep, rx123_bstack
    pop rx123_pos, rx123_bstack
    pop $I19, rx123_bstack
    lt rx123_pos, -1, rx123_done
    lt rx123_pos, 0, rx123_fail
    eq $I19, 0, rx123_fail
    if_null rx123_cstack, rx123_jump
    elements $I18, rx123_bstack
    le $I18, 0, rx123_cut
    dec $I18
    set $I18, rx123_bstack[$I18]
  rx123_cut:
    assign rx123_cstack, $I18
  rx123_jump:
    jump $I19
  rx123_done:
    rx123_cur."!cursor_fail"()
    .return (rx123_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "40_1338064439.457_caps"  :subid("227_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 87
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "40_1338064439.457_nfa"  :subid("228_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 87
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 98
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<nl>"  :subid("41_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1167
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 88
    .lex "self", param_1167
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1168
    .lex "$/", $P1169
    .local string rx125_tgt
    .local int rx125_pos
    .local int rx125_off
    .local int rx125_eos
    .local int rx125_rep
    .local pmc rx125_cur
    .local pmc rx125_curclass
    .local pmc rx125_bstack
    .local pmc rx125_cstack
    (rx125_cur, rx125_tgt, rx125_pos, rx125_curclass, rx125_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx125_cur
    length rx125_eos, rx125_tgt
    eq $I19, 1, rx125_restart
    repr_get_attr_int $I11, self, rx125_curclass, "$!from"
    ne $I11, -1, rxscan126_done
    goto rxscan126_scan
  rxscan126_loop:
    inc rx125_pos
    gt rx125_pos, rx125_eos, rx125_fail
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!from", rx125_pos
  rxscan126_scan:
    nqp_rxmark rx125_bstack, rxscan126_loop, rx125_pos, 0
  rxscan126_done:
    add $I11, rx125_pos, 2
    gt $I11, rx125_eos, rx125_fail
    substr $S10, rx125_tgt, rx125_pos, 2
    ne $S10, ucs4:"\\n", rx125_fail
    add rx125_pos, 2
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!pos", rx125_pos
    $P11 = rx125_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx125_curclass, "$!pos"
    lt $I11, 0, rx125_fail
    rx125_cur."!cursor_pass"(rx125_pos, "quote_escape:sym<nl>", 'backtrack'=>1)
    .return (rx125_cur)
  rx125_restart:
    repr_get_attr_obj rx125_cstack, rx125_cur, rx125_curclass, "$!cstack"
  rx125_fail:
    unless rx125_bstack, rx125_done
    pop $I19, rx125_bstack
    if_null rx125_cstack, rx125_cstack_done
    unless rx125_cstack, rx125_cstack_done
    dec $I19
    set $P11, rx125_cstack[$I19]
  rx125_cstack_done:
    pop rx125_rep, rx125_bstack
    pop rx125_pos, rx125_bstack
    pop $I19, rx125_bstack
    lt rx125_pos, -1, rx125_done
    lt rx125_pos, 0, rx125_fail
    eq $I19, 0, rx125_fail
    if_null rx125_cstack, rx125_jump
    elements $I18, rx125_bstack
    le $I18, 0, rx125_cut
    dec $I18
    set $I18, rx125_bstack[$I18]
  rx125_cut:
    assign rx125_cstack, $I18
  rx125_jump:
    jump $I19
  rx125_done:
    rx125_cur."!cursor_fail"()
    .return (rx125_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "41_1338064439.457_caps"  :subid("229_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 88
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "41_1338064439.457_nfa"  :subid("230_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 88
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 110
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<cr>"  :subid("42_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1173
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 89
    .lex "self", param_1173
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1174
    .lex "$/", $P1175
    .local string rx127_tgt
    .local int rx127_pos
    .local int rx127_off
    .local int rx127_eos
    .local int rx127_rep
    .local pmc rx127_cur
    .local pmc rx127_curclass
    .local pmc rx127_bstack
    .local pmc rx127_cstack
    (rx127_cur, rx127_tgt, rx127_pos, rx127_curclass, rx127_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx127_cur
    length rx127_eos, rx127_tgt
    eq $I19, 1, rx127_restart
    repr_get_attr_int $I11, self, rx127_curclass, "$!from"
    ne $I11, -1, rxscan128_done
    goto rxscan128_scan
  rxscan128_loop:
    inc rx127_pos
    gt rx127_pos, rx127_eos, rx127_fail
    repr_bind_attr_int rx127_cur, rx127_curclass, "$!from", rx127_pos
  rxscan128_scan:
    nqp_rxmark rx127_bstack, rxscan128_loop, rx127_pos, 0
  rxscan128_done:
    add $I11, rx127_pos, 2
    gt $I11, rx127_eos, rx127_fail
    substr $S10, rx127_tgt, rx127_pos, 2
    ne $S10, ucs4:"\\r", rx127_fail
    add rx127_pos, 2
    repr_bind_attr_int rx127_cur, rx127_curclass, "$!pos", rx127_pos
    $P11 = rx127_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx127_curclass, "$!pos"
    lt $I11, 0, rx127_fail
    rx127_cur."!cursor_pass"(rx127_pos, "quote_escape:sym<cr>", 'backtrack'=>1)
    .return (rx127_cur)
  rx127_restart:
    repr_get_attr_obj rx127_cstack, rx127_cur, rx127_curclass, "$!cstack"
  rx127_fail:
    unless rx127_bstack, rx127_done
    pop $I19, rx127_bstack
    if_null rx127_cstack, rx127_cstack_done
    unless rx127_cstack, rx127_cstack_done
    dec $I19
    set $P11, rx127_cstack[$I19]
  rx127_cstack_done:
    pop rx127_rep, rx127_bstack
    pop rx127_pos, rx127_bstack
    pop $I19, rx127_bstack
    lt rx127_pos, -1, rx127_done
    lt rx127_pos, 0, rx127_fail
    eq $I19, 0, rx127_fail
    if_null rx127_cstack, rx127_jump
    elements $I18, rx127_bstack
    le $I18, 0, rx127_cut
    dec $I18
    set $I18, rx127_bstack[$I18]
  rx127_cut:
    assign rx127_cstack, $I18
  rx127_jump:
    jump $I19
  rx127_done:
    rx127_cur."!cursor_fail"()
    .return (rx127_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "42_1338064439.457_caps"  :subid("231_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 89
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "42_1338064439.457_nfa"  :subid("232_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 89
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 114
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<tab>"  :subid("43_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1179
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 90
    .lex "self", param_1179
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1180
    .lex "$/", $P1181
    .local string rx129_tgt
    .local int rx129_pos
    .local int rx129_off
    .local int rx129_eos
    .local int rx129_rep
    .local pmc rx129_cur
    .local pmc rx129_curclass
    .local pmc rx129_bstack
    .local pmc rx129_cstack
    (rx129_cur, rx129_tgt, rx129_pos, rx129_curclass, rx129_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx129_cur
    length rx129_eos, rx129_tgt
    eq $I19, 1, rx129_restart
    repr_get_attr_int $I11, self, rx129_curclass, "$!from"
    ne $I11, -1, rxscan130_done
    goto rxscan130_scan
  rxscan130_loop:
    inc rx129_pos
    gt rx129_pos, rx129_eos, rx129_fail
    repr_bind_attr_int rx129_cur, rx129_curclass, "$!from", rx129_pos
  rxscan130_scan:
    nqp_rxmark rx129_bstack, rxscan130_loop, rx129_pos, 0
  rxscan130_done:
    add $I11, rx129_pos, 2
    gt $I11, rx129_eos, rx129_fail
    substr $S10, rx129_tgt, rx129_pos, 2
    ne $S10, ucs4:"\\t", rx129_fail
    add rx129_pos, 2
    repr_bind_attr_int rx129_cur, rx129_curclass, "$!pos", rx129_pos
    $P11 = rx129_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx129_curclass, "$!pos"
    lt $I11, 0, rx129_fail
    rx129_cur."!cursor_pass"(rx129_pos, "quote_escape:sym<tab>", 'backtrack'=>1)
    .return (rx129_cur)
  rx129_restart:
    repr_get_attr_obj rx129_cstack, rx129_cur, rx129_curclass, "$!cstack"
  rx129_fail:
    unless rx129_bstack, rx129_done
    pop $I19, rx129_bstack
    if_null rx129_cstack, rx129_cstack_done
    unless rx129_cstack, rx129_cstack_done
    dec $I19
    set $P11, rx129_cstack[$I19]
  rx129_cstack_done:
    pop rx129_rep, rx129_bstack
    pop rx129_pos, rx129_bstack
    pop $I19, rx129_bstack
    lt rx129_pos, -1, rx129_done
    lt rx129_pos, 0, rx129_fail
    eq $I19, 0, rx129_fail
    if_null rx129_cstack, rx129_jump
    elements $I18, rx129_bstack
    le $I18, 0, rx129_cut
    dec $I18
    set $I18, rx129_bstack[$I18]
  rx129_cut:
    assign rx129_cstack, $I18
  rx129_jump:
    jump $I19
  rx129_done:
    rx129_cur."!cursor_fail"()
    .return (rx129_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "43_1338064439.457_caps"  :subid("233_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 90
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "43_1338064439.457_nfa"  :subid("234_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 90
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 116
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<ff>"  :subid("44_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1185
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 91
    .lex "self", param_1185
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1186
    .lex "$/", $P1187
    .local string rx131_tgt
    .local int rx131_pos
    .local int rx131_off
    .local int rx131_eos
    .local int rx131_rep
    .local pmc rx131_cur
    .local pmc rx131_curclass
    .local pmc rx131_bstack
    .local pmc rx131_cstack
    (rx131_cur, rx131_tgt, rx131_pos, rx131_curclass, rx131_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx131_cur
    length rx131_eos, rx131_tgt
    eq $I19, 1, rx131_restart
    repr_get_attr_int $I11, self, rx131_curclass, "$!from"
    ne $I11, -1, rxscan132_done
    goto rxscan132_scan
  rxscan132_loop:
    inc rx131_pos
    gt rx131_pos, rx131_eos, rx131_fail
    repr_bind_attr_int rx131_cur, rx131_curclass, "$!from", rx131_pos
  rxscan132_scan:
    nqp_rxmark rx131_bstack, rxscan132_loop, rx131_pos, 0
  rxscan132_done:
    add $I11, rx131_pos, 2
    gt $I11, rx131_eos, rx131_fail
    substr $S10, rx131_tgt, rx131_pos, 2
    ne $S10, ucs4:"\\f", rx131_fail
    add rx131_pos, 2
    repr_bind_attr_int rx131_cur, rx131_curclass, "$!pos", rx131_pos
    $P11 = rx131_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx131_curclass, "$!pos"
    lt $I11, 0, rx131_fail
    rx131_cur."!cursor_pass"(rx131_pos, "quote_escape:sym<ff>", 'backtrack'=>1)
    .return (rx131_cur)
  rx131_restart:
    repr_get_attr_obj rx131_cstack, rx131_cur, rx131_curclass, "$!cstack"
  rx131_fail:
    unless rx131_bstack, rx131_done
    pop $I19, rx131_bstack
    if_null rx131_cstack, rx131_cstack_done
    unless rx131_cstack, rx131_cstack_done
    dec $I19
    set $P11, rx131_cstack[$I19]
  rx131_cstack_done:
    pop rx131_rep, rx131_bstack
    pop rx131_pos, rx131_bstack
    pop $I19, rx131_bstack
    lt rx131_pos, -1, rx131_done
    lt rx131_pos, 0, rx131_fail
    eq $I19, 0, rx131_fail
    if_null rx131_cstack, rx131_jump
    elements $I18, rx131_bstack
    le $I18, 0, rx131_cut
    dec $I18
    set $I18, rx131_bstack[$I18]
  rx131_cut:
    assign rx131_cstack, $I18
  rx131_jump:
    jump $I19
  rx131_done:
    rx131_cur."!cursor_fail"()
    .return (rx131_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "44_1338064439.457_caps"  :subid("235_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 91
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "44_1338064439.457_nfa"  :subid("236_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 91
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 102
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<esc>"  :subid("45_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1191
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 92
    .lex "self", param_1191
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1192
    .lex "$/", $P1193
    .local string rx133_tgt
    .local int rx133_pos
    .local int rx133_off
    .local int rx133_eos
    .local int rx133_rep
    .local pmc rx133_cur
    .local pmc rx133_curclass
    .local pmc rx133_bstack
    .local pmc rx133_cstack
    (rx133_cur, rx133_tgt, rx133_pos, rx133_curclass, rx133_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx133_cur
    length rx133_eos, rx133_tgt
    eq $I19, 1, rx133_restart
    repr_get_attr_int $I11, self, rx133_curclass, "$!from"
    ne $I11, -1, rxscan134_done
    goto rxscan134_scan
  rxscan134_loop:
    inc rx133_pos
    gt rx133_pos, rx133_eos, rx133_fail
    repr_bind_attr_int rx133_cur, rx133_curclass, "$!from", rx133_pos
  rxscan134_scan:
    nqp_rxmark rx133_bstack, rxscan134_loop, rx133_pos, 0
  rxscan134_done:
    add $I11, rx133_pos, 2
    gt $I11, rx133_eos, rx133_fail
    substr $S10, rx133_tgt, rx133_pos, 2
    ne $S10, ucs4:"\\e", rx133_fail
    add rx133_pos, 2
    repr_bind_attr_int rx133_cur, rx133_curclass, "$!pos", rx133_pos
    $P11 = rx133_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx133_curclass, "$!pos"
    lt $I11, 0, rx133_fail
    rx133_cur."!cursor_pass"(rx133_pos, "quote_escape:sym<esc>", 'backtrack'=>1)
    .return (rx133_cur)
  rx133_restart:
    repr_get_attr_obj rx133_cstack, rx133_cur, rx133_curclass, "$!cstack"
  rx133_fail:
    unless rx133_bstack, rx133_done
    pop $I19, rx133_bstack
    if_null rx133_cstack, rx133_cstack_done
    unless rx133_cstack, rx133_cstack_done
    dec $I19
    set $P11, rx133_cstack[$I19]
  rx133_cstack_done:
    pop rx133_rep, rx133_bstack
    pop rx133_pos, rx133_bstack
    pop $I19, rx133_bstack
    lt rx133_pos, -1, rx133_done
    lt rx133_pos, 0, rx133_fail
    eq $I19, 0, rx133_fail
    if_null rx133_cstack, rx133_jump
    elements $I18, rx133_bstack
    le $I18, 0, rx133_cut
    dec $I18
    set $I18, rx133_bstack[$I18]
  rx133_cut:
    assign rx133_cstack, $I18
  rx133_jump:
    jump $I19
  rx133_done:
    rx133_cur."!cursor_fail"()
    .return (rx133_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "45_1338064439.457_caps"  :subid("237_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 92
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "45_1338064439.457_nfa"  :subid("238_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 92
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 101
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<hex>"  :subid("46_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1197
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 93
    .lex "self", param_1197
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1198
    .lex "$/", $P1199
    .local string rx135_tgt
    .local int rx135_pos
    .local int rx135_off
    .local int rx135_eos
    .local int rx135_rep
    .local pmc rx135_cur
    .local pmc rx135_curclass
    .local pmc rx135_bstack
    .local pmc rx135_cstack
    (rx135_cur, rx135_tgt, rx135_pos, rx135_curclass, rx135_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx135_cur
    length rx135_eos, rx135_tgt
    eq $I19, 1, rx135_restart
    repr_get_attr_int $I11, self, rx135_curclass, "$!from"
    ne $I11, -1, rxscan136_done
    goto rxscan136_scan
  rxscan136_loop:
    inc rx135_pos
    gt rx135_pos, rx135_eos, rx135_fail
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!from", rx135_pos
  rxscan136_scan:
    nqp_rxmark rx135_bstack, rxscan136_loop, rx135_pos, 0
  rxscan136_done:
    add $I11, rx135_pos, 2
    gt $I11, rx135_eos, rx135_fail
    substr $S10, rx135_tgt, rx135_pos, 2
    ne $S10, ucs4:"\\x", rx135_fail
    add rx135_pos, 2
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!pos", rx135_pos
    $P11 = rx135_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx135_curclass, "$!pos"
    lt $I11, 0, rx135_fail
  alt137_0:
    nqp_rxmark rx135_bstack, alt137_1, rx135_pos, 0
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!pos", rx135_pos
    $P11 = rx135_cur."hexint"()
    repr_get_attr_int $I11, $P11, rx135_curclass, "$!pos"
    lt $I11, 0, rx135_fail
    nqp_rxmark rx135_bstack, rxsubrule138_pass, -1, 0
  rxsubrule138_pass:
    rx135_cstack = rx135_cur."!cursor_capture"($P11, "hexint")
    repr_get_attr_int rx135_pos, $P11, rx135_curclass, "$!pos"
    goto alt137_end
  alt137_1:
    add $I11, rx135_pos, 1
    gt $I11, rx135_eos, rx135_fail
    substr $S10, rx135_tgt, rx135_pos, 1
    ne $S10, ucs4:"[", rx135_fail
    add rx135_pos, 1
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!pos", rx135_pos
    $P11 = rx135_cur."hexints"()
    repr_get_attr_int $I11, $P11, rx135_curclass, "$!pos"
    lt $I11, 0, rx135_fail
    nqp_rxmark rx135_bstack, rxsubrule139_pass, -1, 0
  rxsubrule139_pass:
    rx135_cstack = rx135_cur."!cursor_capture"($P11, "hexints")
    repr_get_attr_int rx135_pos, $P11, rx135_curclass, "$!pos"
    add $I11, rx135_pos, 1
    gt $I11, rx135_eos, rx135_fail
    substr $S10, rx135_tgt, rx135_pos, 1
    ne $S10, ucs4:"]", rx135_fail
    add rx135_pos, 1
  alt137_end:
    rx135_cur."!cursor_pass"(rx135_pos, "quote_escape:sym<hex>", 'backtrack'=>1)
    .return (rx135_cur)
  rx135_restart:
    repr_get_attr_obj rx135_cstack, rx135_cur, rx135_curclass, "$!cstack"
  rx135_fail:
    unless rx135_bstack, rx135_done
    pop $I19, rx135_bstack
    if_null rx135_cstack, rx135_cstack_done
    unless rx135_cstack, rx135_cstack_done
    dec $I19
    set $P11, rx135_cstack[$I19]
  rx135_cstack_done:
    pop rx135_rep, rx135_bstack
    pop rx135_pos, rx135_bstack
    pop $I19, rx135_bstack
    lt rx135_pos, -1, rx135_done
    lt rx135_pos, 0, rx135_fail
    eq $I19, 0, rx135_fail
    if_null rx135_cstack, rx135_jump
    elements $I18, rx135_bstack
    le $I18, 0, rx135_cut
    dec $I18
    set $I18, rx135_bstack[$I18]
  rx135_cut:
    assign rx135_cstack, $I18
  rx135_jump:
    jump $I19
  rx135_done:
    rx135_cur."!cursor_fail"()
    .return (rx135_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "46_1338064439.457_caps"  :subid("239_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 93
    new $P104, "Hash"
    set $P104["hexint"], 0
    set $P104["hexints"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "46_1338064439.457_nfa"  :subid("240_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 93
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 120
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<oct>"  :subid("47_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1203
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 97
    .lex "self", param_1203
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1204
    .lex "$/", $P1205
    .local string rx140_tgt
    .local int rx140_pos
    .local int rx140_off
    .local int rx140_eos
    .local int rx140_rep
    .local pmc rx140_cur
    .local pmc rx140_curclass
    .local pmc rx140_bstack
    .local pmc rx140_cstack
    (rx140_cur, rx140_tgt, rx140_pos, rx140_curclass, rx140_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx140_cur
    length rx140_eos, rx140_tgt
    eq $I19, 1, rx140_restart
    repr_get_attr_int $I11, self, rx140_curclass, "$!from"
    ne $I11, -1, rxscan141_done
    goto rxscan141_scan
  rxscan141_loop:
    inc rx140_pos
    gt rx140_pos, rx140_eos, rx140_fail
    repr_bind_attr_int rx140_cur, rx140_curclass, "$!from", rx140_pos
  rxscan141_scan:
    nqp_rxmark rx140_bstack, rxscan141_loop, rx140_pos, 0
  rxscan141_done:
    add $I11, rx140_pos, 2
    gt $I11, rx140_eos, rx140_fail
    substr $S10, rx140_tgt, rx140_pos, 2
    ne $S10, ucs4:"\\o", rx140_fail
    add rx140_pos, 2
    repr_bind_attr_int rx140_cur, rx140_curclass, "$!pos", rx140_pos
    $P11 = rx140_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx140_curclass, "$!pos"
    lt $I11, 0, rx140_fail
  alt142_0:
    nqp_rxmark rx140_bstack, alt142_1, rx140_pos, 0
    repr_bind_attr_int rx140_cur, rx140_curclass, "$!pos", rx140_pos
    $P11 = rx140_cur."octint"()
    repr_get_attr_int $I11, $P11, rx140_curclass, "$!pos"
    lt $I11, 0, rx140_fail
    nqp_rxmark rx140_bstack, rxsubrule143_pass, -1, 0
  rxsubrule143_pass:
    rx140_cstack = rx140_cur."!cursor_capture"($P11, "octint")
    repr_get_attr_int rx140_pos, $P11, rx140_curclass, "$!pos"
    goto alt142_end
  alt142_1:
    add $I11, rx140_pos, 1
    gt $I11, rx140_eos, rx140_fail
    substr $S10, rx140_tgt, rx140_pos, 1
    ne $S10, ucs4:"[", rx140_fail
    add rx140_pos, 1
    repr_bind_attr_int rx140_cur, rx140_curclass, "$!pos", rx140_pos
    $P11 = rx140_cur."octints"()
    repr_get_attr_int $I11, $P11, rx140_curclass, "$!pos"
    lt $I11, 0, rx140_fail
    nqp_rxmark rx140_bstack, rxsubrule144_pass, -1, 0
  rxsubrule144_pass:
    rx140_cstack = rx140_cur."!cursor_capture"($P11, "octints")
    repr_get_attr_int rx140_pos, $P11, rx140_curclass, "$!pos"
    add $I11, rx140_pos, 1
    gt $I11, rx140_eos, rx140_fail
    substr $S10, rx140_tgt, rx140_pos, 1
    ne $S10, ucs4:"]", rx140_fail
    add rx140_pos, 1
  alt142_end:
    rx140_cur."!cursor_pass"(rx140_pos, "quote_escape:sym<oct>", 'backtrack'=>1)
    .return (rx140_cur)
  rx140_restart:
    repr_get_attr_obj rx140_cstack, rx140_cur, rx140_curclass, "$!cstack"
  rx140_fail:
    unless rx140_bstack, rx140_done
    pop $I19, rx140_bstack
    if_null rx140_cstack, rx140_cstack_done
    unless rx140_cstack, rx140_cstack_done
    dec $I19
    set $P11, rx140_cstack[$I19]
  rx140_cstack_done:
    pop rx140_rep, rx140_bstack
    pop rx140_pos, rx140_bstack
    pop $I19, rx140_bstack
    lt rx140_pos, -1, rx140_done
    lt rx140_pos, 0, rx140_fail
    eq $I19, 0, rx140_fail
    if_null rx140_cstack, rx140_jump
    elements $I18, rx140_bstack
    le $I18, 0, rx140_cut
    dec $I18
    set $I18, rx140_bstack[$I18]
  rx140_cut:
    assign rx140_cstack, $I18
  rx140_jump:
    jump $I19
  rx140_done:
    rx140_cur."!cursor_fail"()
    .return (rx140_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "47_1338064439.457_caps"  :subid("241_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 97
    new $P104, "Hash"
    set $P104["octint"], 0
    set $P104["octints"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "47_1338064439.457_nfa"  :subid("242_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 97
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 111
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<chr>"  :subid("48_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1209
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 101
    .lex "self", param_1209
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1210
    .lex "$/", $P1211
    .local string rx145_tgt
    .local int rx145_pos
    .local int rx145_off
    .local int rx145_eos
    .local int rx145_rep
    .local pmc rx145_cur
    .local pmc rx145_curclass
    .local pmc rx145_bstack
    .local pmc rx145_cstack
    (rx145_cur, rx145_tgt, rx145_pos, rx145_curclass, rx145_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx145_cur
    length rx145_eos, rx145_tgt
    eq $I19, 1, rx145_restart
    repr_get_attr_int $I11, self, rx145_curclass, "$!from"
    ne $I11, -1, rxscan146_done
    goto rxscan146_scan
  rxscan146_loop:
    inc rx145_pos
    gt rx145_pos, rx145_eos, rx145_fail
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!from", rx145_pos
  rxscan146_scan:
    nqp_rxmark rx145_bstack, rxscan146_loop, rx145_pos, 0
  rxscan146_done:
    add $I11, rx145_pos, 2
    gt $I11, rx145_eos, rx145_fail
    substr $S10, rx145_tgt, rx145_pos, 2
    ne $S10, ucs4:"\\c", rx145_fail
    add rx145_pos, 2
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    lt $I11, 0, rx145_fail
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."charspec"()
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    lt $I11, 0, rx145_fail
    nqp_rxmark rx145_bstack, rxsubrule147_pass, -1, 0
  rxsubrule147_pass:
    rx145_cstack = rx145_cur."!cursor_capture"($P11, "charspec")
    repr_get_attr_int rx145_pos, $P11, rx145_curclass, "$!pos"
    rx145_cur."!cursor_pass"(rx145_pos, "quote_escape:sym<chr>", 'backtrack'=>1)
    .return (rx145_cur)
  rx145_restart:
    repr_get_attr_obj rx145_cstack, rx145_cur, rx145_curclass, "$!cstack"
  rx145_fail:
    unless rx145_bstack, rx145_done
    pop $I19, rx145_bstack
    if_null rx145_cstack, rx145_cstack_done
    unless rx145_cstack, rx145_cstack_done
    dec $I19
    set $P11, rx145_cstack[$I19]
  rx145_cstack_done:
    pop rx145_rep, rx145_bstack
    pop rx145_pos, rx145_bstack
    pop $I19, rx145_bstack
    lt rx145_pos, -1, rx145_done
    lt rx145_pos, 0, rx145_fail
    eq $I19, 0, rx145_fail
    if_null rx145_cstack, rx145_jump
    elements $I18, rx145_bstack
    le $I18, 0, rx145_cut
    dec $I18
    set $I18, rx145_bstack[$I18]
  rx145_cut:
    assign rx145_cstack, $I18
  rx145_jump:
    jump $I19
  rx145_done:
    rx145_cur."!cursor_fail"()
    .return (rx145_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "48_1338064439.457_caps"  :subid("243_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 101
    new $P104, "Hash"
    set $P104["charspec"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "48_1338064439.457_nfa"  :subid("244_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 101
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 99
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<0>"  :subid("49_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1215
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 102
    .lex "self", param_1215
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1216
    .lex "$/", $P1217
    .local string rx148_tgt
    .local int rx148_pos
    .local int rx148_off
    .local int rx148_eos
    .local int rx148_rep
    .local pmc rx148_cur
    .local pmc rx148_curclass
    .local pmc rx148_bstack
    .local pmc rx148_cstack
    (rx148_cur, rx148_tgt, rx148_pos, rx148_curclass, rx148_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx148_cur
    length rx148_eos, rx148_tgt
    eq $I19, 1, rx148_restart
    repr_get_attr_int $I11, self, rx148_curclass, "$!from"
    ne $I11, -1, rxscan149_done
    goto rxscan149_scan
  rxscan149_loop:
    inc rx148_pos
    gt rx148_pos, rx148_eos, rx148_fail
    repr_bind_attr_int rx148_cur, rx148_curclass, "$!from", rx148_pos
  rxscan149_scan:
    nqp_rxmark rx148_bstack, rxscan149_loop, rx148_pos, 0
  rxscan149_done:
    add $I11, rx148_pos, 1
    gt $I11, rx148_eos, rx148_fail
    substr $S10, rx148_tgt, rx148_pos, 1
    ne $S10, ucs4:"\\", rx148_fail
    add rx148_pos, 1
    nqp_rxmark rx148_bstack, rxcap150_fail, rx148_pos, 0
    add $I11, rx148_pos, 1
    gt $I11, rx148_eos, rx148_fail
    substr $S10, rx148_tgt, rx148_pos, 1
    ne $S10, ucs4:"0", rx148_fail
    add rx148_pos, 1
    nqp_rxpeek $I19, rx148_bstack, rxcap150_fail
    inc $I19
    set $I11, rx148_bstack[$I19]
    $P11 = rx148_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx148_pos)
    rx148_cstack = rx148_cur."!cursor_capture"($P11, "sym")
    goto rxcap150_done
  rxcap150_fail:
    goto rx148_fail
  rxcap150_done:
    repr_bind_attr_int rx148_cur, rx148_curclass, "$!pos", rx148_pos
    $P11 = rx148_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx148_curclass, "$!pos"
    lt $I11, 0, rx148_fail
    rx148_cur."!cursor_pass"(rx148_pos, "quote_escape:sym<0>", 'backtrack'=>1)
    .return (rx148_cur)
  rx148_restart:
    repr_get_attr_obj rx148_cstack, rx148_cur, rx148_curclass, "$!cstack"
  rx148_fail:
    unless rx148_bstack, rx148_done
    pop $I19, rx148_bstack
    if_null rx148_cstack, rx148_cstack_done
    unless rx148_cstack, rx148_cstack_done
    dec $I19
    set $P11, rx148_cstack[$I19]
  rx148_cstack_done:
    pop rx148_rep, rx148_bstack
    pop rx148_pos, rx148_bstack
    pop $I19, rx148_bstack
    lt rx148_pos, -1, rx148_done
    lt rx148_pos, 0, rx148_fail
    eq $I19, 0, rx148_fail
    if_null rx148_cstack, rx148_jump
    elements $I18, rx148_bstack
    le $I18, 0, rx148_cut
    dec $I18
    set $I18, rx148_bstack[$I18]
  rx148_cut:
    assign rx148_cstack, $I18
  rx148_jump:
    jump $I19
  rx148_done:
    rx148_cur."!cursor_fail"()
    .return (rx148_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "49_1338064439.457_caps"  :subid("245_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 102
    new $P104, "Hash"
    set $P104["sym"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "49_1338064439.457_nfa"  :subid("246_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 102
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 48
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<misc>"  :subid("51_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1221
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 103
    .const 'Sub' $P1233 = "251_1338064439.457" 
    capture_lex $P1233
    .const 'Sub' $P1228 = "50_1338064439.457" 
    capture_lex $P1228
    .const 'Sub' $P1226 = "248_1338064439.457" 
    capture_lex $P1226
    .lex "self", param_1221
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1222
    .lex "$/", $P1223
    .local string rx151_tgt
    .local int rx151_pos
    .local int rx151_off
    .local int rx151_eos
    .local int rx151_rep
    .local pmc rx151_cur
    .local pmc rx151_curclass
    .local pmc rx151_bstack
    .local pmc rx151_cstack
    (rx151_cur, rx151_tgt, rx151_pos, rx151_curclass, rx151_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx151_cur
    length rx151_eos, rx151_tgt
    eq $I19, 1, rx151_restart
    repr_get_attr_int $I11, self, rx151_curclass, "$!from"
    ne $I11, -1, rxscan152_done
    goto rxscan152_scan
  rxscan152_loop:
    inc rx151_pos
    gt rx151_pos, rx151_eos, rx151_fail
    repr_bind_attr_int rx151_cur, rx151_curclass, "$!from", rx151_pos
  rxscan152_scan:
    nqp_rxmark rx151_bstack, rxscan152_loop, rx151_pos, 0
  rxscan152_done:
    repr_bind_attr_int rx151_cur, rx151_curclass, "$!pos", rx151_pos
    store_lex unicode:"$\x{a2}", rx151_cur
    find_lex $P104, unicode:"$\x{a2}"
    $P105 = $P104."MATCH"()
    store_lex "$/", $P105
.annotate 'line', 104
    .const 'Sub' $P1226 = "248_1338064439.457" 
    capture_lex $P1226
    $P106 = $P1226()
.annotate 'line', 103
    add $I11, rx151_pos, 1
    gt $I11, rx151_eos, rx151_fail
    substr $S10, rx151_tgt, rx151_pos, 1
    ne $S10, ucs4:"\\", rx151_fail
    add rx151_pos, 1
  alt153_0:
    nqp_rxmark rx151_bstack, alt153_1, rx151_pos, 0
    repr_bind_attr_int rx151_cur, rx151_curclass, "$!pos", rx151_pos
    $P11 = rx151_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx151_curclass, "$!pos"
    lt $I11, 0, rx151_fail
  alt154_0:
    nqp_rxmark rx151_bstack, alt154_1, rx151_pos, 0
    .const 'Sub' $P1228 = "50_1338064439.457" 
    capture_lex $P1228
    repr_bind_attr_int rx151_cur, rx151_curclass, "$!pos", rx151_pos
    $P11 = rx151_cur.$P1228()
    repr_get_attr_int $I11, $P11, rx151_curclass, "$!pos"
    lt $I11, 0, rx151_fail
    nqp_rxmark rx151_bstack, rxsubrule157_pass, -1, 0
  rxsubrule157_pass:
    rx151_cstack = rx151_cur."!cursor_capture"($P11, "textqq")
    repr_get_attr_int rx151_pos, $P11, rx151_curclass, "$!pos"
    goto alt154_end
  alt154_1:
    nqp_rxmark rx151_bstack, rxcap158_fail, rx151_pos, 0
    ge rx151_pos, rx151_eos, rx151_fail
    is_cclass $I11, .CCLASS_WORD, rx151_tgt, rx151_pos
    unless $I11, rx151_fail
    add rx151_pos, 1
    nqp_rxpeek $I19, rx151_bstack, rxcap158_fail
    inc $I19
    set $I11, rx151_bstack[$I19]
    $P11 = rx151_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx151_pos)
    rx151_cstack = rx151_cur."!cursor_capture"($P11, "x")
    goto rxcap158_done
  rxcap158_fail:
    goto rx151_fail
  rxcap158_done:
    repr_bind_attr_int rx151_cur, rx151_curclass, "$!pos", rx151_pos
    store_lex unicode:"$\x{a2}", rx151_cur
    find_lex $P107, unicode:"$\x{a2}"
    $P108 = $P107."MATCH"()
    store_lex "$/", $P108
.annotate 'line', 109
    .const 'Sub' $P1233 = "251_1338064439.457" 
    capture_lex $P1233
    $P109 = $P1233()
  alt154_end:
.annotate 'line', 103
    goto alt153_end
  alt153_1:
    nqp_rxmark rx151_bstack, rxcap159_fail, rx151_pos, 0
    ge rx151_pos, rx151_eos, rx151_fail
    add rx151_pos, 1
    nqp_rxpeek $I19, rx151_bstack, rxcap159_fail
    inc $I19
    set $I11, rx151_bstack[$I19]
    $P11 = rx151_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx151_pos)
    rx151_cstack = rx151_cur."!cursor_capture"($P11, "textq")
    goto rxcap159_done
  rxcap159_fail:
    goto rx151_fail
  rxcap159_done:
  alt153_end:
    rx151_cur."!cursor_pass"(rx151_pos, "quote_escape:sym<misc>", 'backtrack'=>1)
    .return (rx151_cur)
  rx151_restart:
    repr_get_attr_obj rx151_cstack, rx151_cur, rx151_curclass, "$!cstack"
  rx151_fail:
    unless rx151_bstack, rx151_done
    pop $I19, rx151_bstack
    if_null rx151_cstack, rx151_cstack_done
    unless rx151_cstack, rx151_cstack_done
    dec $I19
    set $P11, rx151_cstack[$I19]
  rx151_cstack_done:
    pop rx151_rep, rx151_bstack
    pop rx151_pos, rx151_bstack
    pop $I19, rx151_bstack
    lt rx151_pos, -1, rx151_done
    lt rx151_pos, 0, rx151_fail
    eq $I19, 0, rx151_fail
    if_null rx151_cstack, rx151_jump
    elements $I18, rx151_bstack
    le $I18, 0, rx151_cut
    dec $I18
    set $I18, rx151_bstack[$I18]
  rx151_cut:
    assign rx151_cstack, $I18
  rx151_jump:
    jump $I19
  rx151_done:
    rx151_cur."!cursor_fail"()
    .return (rx151_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "51_1338064439.457_caps"  :subid("247_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 103
    new $P104, "Hash"
    set $P104["textqq"], 0
    set $P104["x"], 0
    set $P104["textq"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "_block1225"  :anon :subid("248_1338064439.457") :outer("51_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 104
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "_block1227"  :anon :subid("50_1338064439.457") :method :outer("51_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 103
    .lex unicode:"$\x{a2}", $P1231
    .local string rx155_tgt
    .local int rx155_pos
    .local int rx155_off
    .local int rx155_eos
    .local int rx155_rep
    .local pmc rx155_cur
    .local pmc rx155_curclass
    .local pmc rx155_bstack
    .local pmc rx155_cstack
    (rx155_cur, rx155_tgt, rx155_pos, rx155_curclass, rx155_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx155_cur
    length rx155_eos, rx155_tgt
    eq $I19, 1, rx155_restart
    repr_get_attr_int $I11, self, rx155_curclass, "$!from"
    ne $I11, -1, rxscan156_done
    goto rxscan156_scan
  rxscan156_loop:
    inc rx155_pos
    gt rx155_pos, rx155_eos, rx155_fail
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!from", rx155_pos
  rxscan156_scan:
    nqp_rxmark rx155_bstack, rxscan156_loop, rx155_pos, 0
  rxscan156_done:
    ge rx155_pos, rx155_eos, rx155_fail
    is_cclass $I11, .CCLASS_WORD, rx155_tgt, rx155_pos
    if $I11, rx155_fail
    add rx155_pos, 1
    rx155_cur."!cursor_pass"(rx155_pos, 'backtrack'=>1)
    .return (rx155_cur)
  rx155_restart:
    repr_get_attr_obj rx155_cstack, rx155_cur, rx155_curclass, "$!cstack"
  rx155_fail:
    unless rx155_bstack, rx155_done
    pop $I19, rx155_bstack
    if_null rx155_cstack, rx155_cstack_done
    unless rx155_cstack, rx155_cstack_done
    dec $I19
    set $P11, rx155_cstack[$I19]
  rx155_cstack_done:
    pop rx155_rep, rx155_bstack
    pop rx155_pos, rx155_bstack
    pop $I19, rx155_bstack
    lt rx155_pos, -1, rx155_done
    lt rx155_pos, 0, rx155_fail
    eq $I19, 0, rx155_fail
    if_null rx155_cstack, rx155_jump
    elements $I18, rx155_bstack
    le $I18, 0, rx155_cut
    dec $I18
    set $I18, rx155_bstack[$I18]
  rx155_cut:
    assign rx155_cstack, $I18
  rx155_jump:
    jump $I19
  rx155_done:
    rx155_cur."!cursor_fail"()
    .return (rx155_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "50_1338064439.457_caps"  :subid("249_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 103
    new $P107, "Hash"
    .return ($P107)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "50_1338064439.457_nfa"  :subid("250_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 103
    new $P107, "ResizablePMCArray"
    new $P108, "ResizablePMCArray"
    push $P108, 5
    push $P108, 8192
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "_block1232"  :anon :subid("251_1338064439.457") :outer("51_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 109
    find_lex $P109, "$/"
    unless_null $P109, vivify_336
    new $P109, "Undef"
  vivify_336:
    $P110 = $P109."CURSOR"()
    new $P111, "String"
    assign $P111, "Unrecognized backslash sequence: '\\"
    find_lex $P1234, "$/"
    unless_null $P1234, vivify_337
    $P1234 = root_new ['parrot';'Hash']
  vivify_337:
    set $P112, $P1234["x"]
    unless_null $P112, vivify_338
    new $P112, "Undef"
  vivify_338:
    $S100 = $P112."Str"()
    concat $P113, $P111, $S100
    concat $P114, $P113, "'"
    $P115 = $P110."panic"($P114)
    .return ($P115)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "charname"  :subid("53_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1236
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 115
    .const 'Sub' $P1241 = "52_1338064439.457" 
    capture_lex $P1241
    .lex "self", param_1236
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1237
    .lex "$/", $P1238
    .local string rx160_tgt
    .local int rx160_pos
    .local int rx160_off
    .local int rx160_eos
    .local int rx160_rep
    .local pmc rx160_cur
    .local pmc rx160_curclass
    .local pmc rx160_bstack
    .local pmc rx160_cstack
    (rx160_cur, rx160_tgt, rx160_pos, rx160_curclass, rx160_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx160_cur
    length rx160_eos, rx160_tgt
    eq $I19, 1, rx160_restart
    repr_get_attr_int $I11, self, rx160_curclass, "$!from"
    ne $I11, -1, rxscan161_done
    goto rxscan161_scan
  rxscan161_loop:
    inc rx160_pos
    gt rx160_pos, rx160_eos, rx160_fail
    repr_bind_attr_int rx160_cur, rx160_curclass, "$!from", rx160_pos
  rxscan161_scan:
    nqp_rxmark rx160_bstack, rxscan161_loop, rx160_pos, 0
  rxscan161_done:
  alt162_0:
    nqp_rxmark rx160_bstack, alt162_1, rx160_pos, 0
    repr_bind_attr_int rx160_cur, rx160_curclass, "$!pos", rx160_pos
    $P11 = rx160_cur."integer"()
    repr_get_attr_int $I11, $P11, rx160_curclass, "$!pos"
    lt $I11, 0, rx160_fail
    nqp_rxmark rx160_bstack, rxsubrule163_pass, -1, 0
  rxsubrule163_pass:
    rx160_cstack = rx160_cur."!cursor_capture"($P11, "integer")
    repr_get_attr_int rx160_pos, $P11, rx160_curclass, "$!pos"
    goto alt162_end
  alt162_1:
    ge rx160_pos, rx160_eos, rx160_fail
    substr $S11, rx160_tgt, rx160_pos, 1
    index $I11, ucs4:"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", $S11
    lt $I11, 0, rx160_fail
    inc rx160_pos
  # rx rxquantf164 ** 0..-1
    set rx160_rep, 0
    nqp_rxmark rx160_bstack, rxquantf164_loop, rx160_pos, rx160_rep
    goto rxquantf164_done
  rxquantf164_loop:
    set $I12, rx160_rep
    nqp_rxmark rx160_bstack, rxconj165_fail, rx160_pos, 0
    goto rxconj165_first
  rxconj165_fail:
    goto rx160_fail
  rxconj165_first:
    add $I11, rx160_pos, 1
    gt $I11, rx160_eos, rx160_fail
    substr $S10, rx160_tgt, rx160_pos, 1
    eq $S10, ucs4:"]", rx160_fail
    add rx160_pos, 1
    nqp_rxpeek $I19, rx160_bstack, rxconj165_fail
    inc $I19
    set $I11, rx160_bstack[$I19]
    nqp_rxmark rx160_bstack, rxconj165_fail, $I11, rx160_pos
    set rx160_pos, $I11
    ge rx160_pos, rx160_eos, rx160_fail
    substr $S11, rx160_tgt, rx160_pos, 1
    index $I11, ucs4:",#", $S11
    ge $I11, 0, rx160_fail
    inc rx160_pos
    nqp_rxpeek $I19, rx160_bstack, rxconj165_fail
    inc $I19
    set $I11, rx160_bstack[$I19]
    inc $I19
    set $I12, rx160_bstack[$I19]
    ne rx160_pos, $I12, rx160_fail
    set rx160_pos, $I11
    ge rx160_pos, rx160_eos, rx160_fail
    add rx160_pos, 1
    set rx160_rep, $I12
    inc rx160_rep
    nqp_rxmark rx160_bstack, rxquantf164_loop, rx160_pos, rx160_rep
  rxquantf164_done:
    ge rx160_pos, rx160_eos, rx160_fail
    substr $S11, rx160_tgt, rx160_pos, 1
    index $I11, ucs4:"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ)", $S11
    lt $I11, 0, rx160_fail
    inc rx160_pos
    .const 'Sub' $P1241 = "52_1338064439.457" 
    capture_lex $P1241
    repr_bind_attr_int rx160_cur, rx160_curclass, "$!pos", rx160_pos
    $P11 = rx160_cur."before"($P1241)
    repr_get_attr_int $I11, $P11, rx160_curclass, "$!pos"
    lt $I11, 0, rx160_fail
  alt162_end:
    rx160_cur."!cursor_pass"(rx160_pos, "charname", 'backtrack'=>1)
    .return (rx160_cur)
  rx160_restart:
    repr_get_attr_obj rx160_cstack, rx160_cur, rx160_curclass, "$!cstack"
  rx160_fail:
    unless rx160_bstack, rx160_done
    pop $I19, rx160_bstack
    if_null rx160_cstack, rx160_cstack_done
    unless rx160_cstack, rx160_cstack_done
    dec $I19
    set $P11, rx160_cstack[$I19]
  rx160_cstack_done:
    pop rx160_rep, rx160_bstack
    pop rx160_pos, rx160_bstack
    pop $I19, rx160_bstack
    lt rx160_pos, -1, rx160_done
    lt rx160_pos, 0, rx160_fail
    eq $I19, 0, rx160_fail
    if_null rx160_cstack, rx160_jump
    elements $I18, rx160_bstack
    le $I18, 0, rx160_cut
    dec $I18
    set $I18, rx160_bstack[$I18]
  rx160_cut:
    assign rx160_cstack, $I18
  rx160_jump:
    jump $I19
  rx160_done:
    rx160_cur."!cursor_fail"()
    .return (rx160_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "53_1338064439.457_caps"  :subid("252_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 115
    new $P104, "Hash"
    set $P104["integer"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "_block1240"  :anon :subid("52_1338064439.457") :method :outer("53_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 115
    .lex unicode:"$\x{a2}", $P1244
    .local string rx166_tgt
    .local int rx166_pos
    .local int rx166_off
    .local int rx166_eos
    .local int rx166_rep
    .local pmc rx166_cur
    .local pmc rx166_curclass
    .local pmc rx166_bstack
    .local pmc rx166_cstack
    (rx166_cur, rx166_tgt, rx166_pos, rx166_curclass, rx166_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx166_cur
    length rx166_eos, rx166_tgt
    eq $I19, 1, rx166_restart
    repr_get_attr_int $I11, self, rx166_curclass, "$!from"
    ne $I11, -1, rxscan167_done
    goto rxscan167_scan
  rxscan167_loop:
    inc rx166_pos
    gt rx166_pos, rx166_eos, rx166_fail
    repr_bind_attr_int rx166_cur, rx166_curclass, "$!from", rx166_pos
  rxscan167_scan:
    nqp_rxmark rx166_bstack, rxscan167_loop, rx166_pos, 0
  rxscan167_done:
  # rx rxquantr168 ** 0..-1
    nqp_rxmark rx166_bstack, rxquantr168_done, rx166_pos, 0
  rxquantr168_loop:
    ge rx166_pos, rx166_eos, rx166_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx166_tgt, rx166_pos
    unless $I11, rx166_fail
    add rx166_pos, 1
    nqp_rxpeek $I19, rx166_bstack, rxquantr168_done
    inc $I19
    inc $I19
    set rx166_rep, rx166_bstack[$I19]
    nqp_rxcommit rx166_bstack, rxquantr168_done
    inc rx166_rep
    nqp_rxmark rx166_bstack, rxquantr168_done, rx166_pos, rx166_rep
    goto rxquantr168_loop
  rxquantr168_done:
  alt169_0:
    nqp_rxmark rx166_bstack, alt169_1, rx166_pos, 0
    add $I11, rx166_pos, 1
    gt $I11, rx166_eos, rx166_fail
    substr $S10, rx166_tgt, rx166_pos, 1
    ne $S10, ucs4:"]", rx166_fail
    add rx166_pos, 1
    goto alt169_end
  alt169_1:
    ge rx166_pos, rx166_eos, rx166_fail
    substr $S11, rx166_tgt, rx166_pos, 1
    index $I11, ucs4:",#", $S11
    lt $I11, 0, rx166_fail
    inc rx166_pos
  alt169_end:
    rx166_cur."!cursor_pass"(rx166_pos, 'backtrack'=>1)
    .return (rx166_cur)
  rx166_restart:
    repr_get_attr_obj rx166_cstack, rx166_cur, rx166_curclass, "$!cstack"
  rx166_fail:
    unless rx166_bstack, rx166_done
    pop $I19, rx166_bstack
    if_null rx166_cstack, rx166_cstack_done
    unless rx166_cstack, rx166_cstack_done
    dec $I19
    set $P11, rx166_cstack[$I19]
  rx166_cstack_done:
    pop rx166_rep, rx166_bstack
    pop rx166_pos, rx166_bstack
    pop $I19, rx166_bstack
    lt rx166_pos, -1, rx166_done
    lt rx166_pos, 0, rx166_fail
    eq $I19, 0, rx166_fail
    if_null rx166_cstack, rx166_jump
    elements $I18, rx166_bstack
    le $I18, 0, rx166_cut
    dec $I18
    set $I18, rx166_bstack[$I18]
  rx166_cut:
    assign rx166_cstack, $I18
  rx166_jump:
    jump $I19
  rx166_done:
    rx166_cur."!cursor_fail"()
    .return (rx166_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "52_1338064439.457_caps"  :subid("253_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 115
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "52_1338064439.457_nfa"  :subid("254_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 115
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 4
    push $P105, 32
    push $P105, 1
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 93
    push $P106, 0
    push $P106, 6
    push $P106, ",#"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "charnames"  :subid("54_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1246
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 120
    .lex "self", param_1246
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1247
    .lex "$/", $P1248
    .local string rx170_tgt
    .local int rx170_pos
    .local int rx170_off
    .local int rx170_eos
    .local int rx170_rep
    .local pmc rx170_cur
    .local pmc rx170_curclass
    .local pmc rx170_bstack
    .local pmc rx170_cstack
    (rx170_cur, rx170_tgt, rx170_pos, rx170_curclass, rx170_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx170_cur
    length rx170_eos, rx170_tgt
    eq $I19, 1, rx170_restart
    repr_get_attr_int $I11, self, rx170_curclass, "$!from"
    ne $I11, -1, rxscan171_done
    goto rxscan171_scan
  rxscan171_loop:
    inc rx170_pos
    gt rx170_pos, rx170_eos, rx170_fail
    repr_bind_attr_int rx170_cur, rx170_curclass, "$!from", rx170_pos
  rxscan171_scan:
    nqp_rxmark rx170_bstack, rxscan171_loop, rx170_pos, 0
  rxscan171_done:
  # rx rxquantr172 ** 1..-1
    nqp_rxmark rx170_bstack, rxquantr172_done, -1, 0
  rxquantr172_loop:
    repr_bind_attr_int rx170_cur, rx170_curclass, "$!pos", rx170_pos
    $P11 = rx170_cur."ws"()
    repr_get_attr_int $I11, $P11, rx170_curclass, "$!pos"
    lt $I11, 0, rx170_fail
    repr_get_attr_int rx170_pos, $P11, rx170_curclass, "$!pos"
    repr_bind_attr_int rx170_cur, rx170_curclass, "$!pos", rx170_pos
    $P11 = rx170_cur."charname"()
    repr_get_attr_int $I11, $P11, rx170_curclass, "$!pos"
    lt $I11, 0, rx170_fail
    nqp_rxmark rx170_bstack, rxsubrule174_pass, -1, 0
  rxsubrule174_pass:
    rx170_cstack = rx170_cur."!cursor_capture"($P11, "charname")
    repr_get_attr_int rx170_pos, $P11, rx170_curclass, "$!pos"
    repr_bind_attr_int rx170_cur, rx170_curclass, "$!pos", rx170_pos
    $P11 = rx170_cur."ws"()
    repr_get_attr_int $I11, $P11, rx170_curclass, "$!pos"
    lt $I11, 0, rx170_fail
    repr_get_attr_int rx170_pos, $P11, rx170_curclass, "$!pos"
    nqp_rxpeek $I19, rx170_bstack, rxquantr172_done
    inc $I19
    inc $I19
    set rx170_rep, rx170_bstack[$I19]
    nqp_rxcommit rx170_bstack, rxquantr172_done
    inc rx170_rep
    nqp_rxmark rx170_bstack, rxquantr172_done, rx170_pos, rx170_rep
    add $I11, rx170_pos, 1
    gt $I11, rx170_eos, rx170_fail
    substr $S10, rx170_tgt, rx170_pos, 1
    ne $S10, ucs4:",", rx170_fail
    add rx170_pos, 1
    goto rxquantr172_loop
  rxquantr172_done:
    rx170_cur."!cursor_pass"(rx170_pos, "charnames", 'backtrack'=>1)
    .return (rx170_cur)
  rx170_restart:
    repr_get_attr_obj rx170_cstack, rx170_cur, rx170_curclass, "$!cstack"
  rx170_fail:
    unless rx170_bstack, rx170_done
    pop $I19, rx170_bstack
    if_null rx170_cstack, rx170_cstack_done
    unless rx170_cstack, rx170_cstack_done
    dec $I19
    set $P11, rx170_cstack[$I19]
  rx170_cstack_done:
    pop rx170_rep, rx170_bstack
    pop rx170_pos, rx170_bstack
    pop $I19, rx170_bstack
    lt rx170_pos, -1, rx170_done
    lt rx170_pos, 0, rx170_fail
    eq $I19, 0, rx170_fail
    if_null rx170_cstack, rx170_jump
    elements $I18, rx170_bstack
    le $I18, 0, rx170_cut
    dec $I18
    set $I18, rx170_bstack[$I18]
  rx170_cut:
    assign rx170_cstack, $I18
  rx170_jump:
    jump $I19
  rx170_done:
    rx170_cur."!cursor_fail"()
    .return (rx170_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "54_1338064439.457_caps"  :subid("255_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 120
    new $P104, "Hash"
    set $P104["charname"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "54_1338064439.457_nfa"  :subid("256_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 120
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "charname"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "ws"
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "charspec"  :subid("55_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1252
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 121
    .lex "self", param_1252
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1253
    .lex "$/", $P1254
    .local string rx176_tgt
    .local int rx176_pos
    .local int rx176_off
    .local int rx176_eos
    .local int rx176_rep
    .local pmc rx176_cur
    .local pmc rx176_curclass
    .local pmc rx176_bstack
    .local pmc rx176_cstack
    (rx176_cur, rx176_tgt, rx176_pos, rx176_curclass, rx176_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx176_cur
    length rx176_eos, rx176_tgt
    eq $I19, 1, rx176_restart
    repr_get_attr_int $I11, self, rx176_curclass, "$!from"
    ne $I11, -1, rxscan177_done
    goto rxscan177_scan
  rxscan177_loop:
    inc rx176_pos
    gt rx176_pos, rx176_eos, rx176_fail
    repr_bind_attr_int rx176_cur, rx176_curclass, "$!from", rx176_pos
  rxscan177_scan:
    nqp_rxmark rx176_bstack, rxscan177_loop, rx176_pos, 0
  rxscan177_done:
  alt178_0:
    nqp_rxmark rx176_bstack, alt178_1, rx176_pos, 0
    add $I11, rx176_pos, 1
    gt $I11, rx176_eos, rx176_fail
    substr $S10, rx176_tgt, rx176_pos, 1
    ne $S10, ucs4:"[", rx176_fail
    add rx176_pos, 1
    repr_bind_attr_int rx176_cur, rx176_curclass, "$!pos", rx176_pos
    $P11 = rx176_cur."charnames"()
    repr_get_attr_int $I11, $P11, rx176_curclass, "$!pos"
    lt $I11, 0, rx176_fail
    nqp_rxmark rx176_bstack, rxsubrule179_pass, -1, 0
  rxsubrule179_pass:
    rx176_cstack = rx176_cur."!cursor_capture"($P11, "charnames")
    repr_get_attr_int rx176_pos, $P11, rx176_curclass, "$!pos"
    add $I11, rx176_pos, 1
    gt $I11, rx176_eos, rx176_fail
    substr $S10, rx176_tgt, rx176_pos, 1
    ne $S10, ucs4:"]", rx176_fail
    add rx176_pos, 1
    goto alt178_end
  alt178_1:
    nqp_rxmark rx176_bstack, alt178_2, rx176_pos, 0
  # rx rxquantr180 ** 1..-1
    nqp_rxmark rx176_bstack, rxquantr180_done, -1, 0
  rxquantr180_loop:
    ge rx176_pos, rx176_eos, rx176_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx176_tgt, rx176_pos
    unless $I11, rx176_fail
    add rx176_pos, 1
    nqp_rxpeek $I19, rx176_bstack, rxquantr180_done
    inc $I19
    inc $I19
    set rx176_rep, rx176_bstack[$I19]
    nqp_rxcommit rx176_bstack, rxquantr180_done
    inc rx176_rep
    nqp_rxmark rx176_bstack, rxquantr180_done, rx176_pos, rx176_rep
    goto rxquantr180_loop
  rxquantr180_done:
  # rx rxquantr181 ** 0..-1
    nqp_rxmark rx176_bstack, rxquantr181_done, rx176_pos, 0
  rxquantr181_loop:
    add $I11, rx176_pos, 1
    gt $I11, rx176_eos, rx176_fail
    substr $S10, rx176_tgt, rx176_pos, 1
    ne $S10, ucs4:"_", rx176_fail
    add rx176_pos, 1
  # rx rxquantr182 ** 1..-1
    nqp_rxmark rx176_bstack, rxquantr182_done, -1, 0
  rxquantr182_loop:
    ge rx176_pos, rx176_eos, rx176_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx176_tgt, rx176_pos
    unless $I11, rx176_fail
    add rx176_pos, 1
    nqp_rxpeek $I19, rx176_bstack, rxquantr182_done
    inc $I19
    inc $I19
    set rx176_rep, rx176_bstack[$I19]
    nqp_rxcommit rx176_bstack, rxquantr182_done
    inc rx176_rep
    nqp_rxmark rx176_bstack, rxquantr182_done, rx176_pos, rx176_rep
    goto rxquantr182_loop
  rxquantr182_done:
    nqp_rxpeek $I19, rx176_bstack, rxquantr181_done
    inc $I19
    inc $I19
    set rx176_rep, rx176_bstack[$I19]
    nqp_rxcommit rx176_bstack, rxquantr181_done
    inc rx176_rep
    nqp_rxmark rx176_bstack, rxquantr181_done, rx176_pos, rx176_rep
    goto rxquantr181_loop
  rxquantr181_done:
    goto alt178_end
  alt178_2:
    nqp_rxmark rx176_bstack, alt178_3, rx176_pos, 0
    ge rx176_pos, rx176_eos, rx176_fail
    substr $S11, rx176_tgt, rx176_pos, 1
    index $I11, ucs4:"?@ABCDEFGHIJKLMNOPQRSTUVWXYZ", $S11
    lt $I11, 0, rx176_fail
    inc rx176_pos
    goto alt178_end
  alt178_3:
    repr_bind_attr_int rx176_cur, rx176_curclass, "$!pos", rx176_pos
    $P11 = rx176_cur."panic"("Unrecognized \\c character")
    repr_get_attr_int $I11, $P11, rx176_curclass, "$!pos"
    lt $I11, 0, rx176_fail
    repr_get_attr_int rx176_pos, $P11, rx176_curclass, "$!pos"
  alt178_end:
    rx176_cur."!cursor_pass"(rx176_pos, "charspec", 'backtrack'=>1)
    .return (rx176_cur)
  rx176_restart:
    repr_get_attr_obj rx176_cstack, rx176_cur, rx176_curclass, "$!cstack"
  rx176_fail:
    unless rx176_bstack, rx176_done
    pop $I19, rx176_bstack
    if_null rx176_cstack, rx176_cstack_done
    unless rx176_cstack, rx176_cstack_done
    dec $I19
    set $P11, rx176_cstack[$I19]
  rx176_cstack_done:
    pop rx176_rep, rx176_bstack
    pop rx176_pos, rx176_bstack
    pop $I19, rx176_bstack
    lt rx176_pos, -1, rx176_done
    lt rx176_pos, 0, rx176_fail
    eq $I19, 0, rx176_fail
    if_null rx176_cstack, rx176_jump
    elements $I18, rx176_bstack
    le $I18, 0, rx176_cut
    dec $I18
    set $I18, rx176_bstack[$I18]
  rx176_cut:
    assign rx176_cstack, $I18
  rx176_jump:
    jump $I19
  rx176_done:
    rx176_cur."!cursor_fail"()
    .return (rx176_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "55_1338064439.457_caps"  :subid("257_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 121
    new $P104, "Hash"
    set $P104["charnames"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "55_1338064439.457_nfa"  :subid("258_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 121
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 91
    push $P105, 2
    push $P105, 1
    push $P105, 0
    push $P105, 4
    push $P105, 6
    push $P105, "?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    push $P105, 0
    push $P105, 8
    push $P105, "panic"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "charnames"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 93
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 4
    push $P108, 8
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 4
    push $P109, 1
    push $P109, 0
    push $P109, 6
    push $P109, 2
    push $P109, 95
    push $P109, 7
    push $P109, 1
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    new $P111, "ResizablePMCArray"
    push $P111, 1
    push $P111, 0
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 4
    push $P112, 8
    push $P112, 9
    new $P113, "ResizablePMCArray"
    push $P113, 1
    push $P113, 0
    push $P113, 8
    push $P113, 1
    push $P113, 0
    push $P113, 5
    new $P114, "ResizablePMCArray"
    push $P114, $P104
    push $P114, $P105
    push $P114, $P106
    push $P114, $P107
    push $P114, $P108
    push $P114, $P109
    push $P114, $P110
    push $P114, $P111
    push $P114, $P112
    push $P114, $P113
    .return ($P114)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "O" :anon :subid("56_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1258
    .param pmc param_1259
    .param pmc param_1260 :optional
    .param int has_param_1260 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 172
    .lex "self", param_1258
    .lex "$spec", param_1259
    if has_param_1260, optparam_339
    new $P103, "Undef"
    set param_1260, $P103
  optparam_339:
    .lex "$save", param_1260
.annotate 'line', 173

            .local pmc self, cur_class
            .local string spec, save
            .local int has_save
            self = find_lex 'self'
            cur_class = find_lex '$cursor_class'
            $P0 = find_lex '$spec'
            spec = $P0
            has_save = 0
            $P0 = find_lex '$save'
            unless $P0 goto no_save
            save = $P0
            has_save = 1
          no_save:

            # First, get the hash cache.  Right now we have one
            # cache for all grammars; eventually we may need a way to
            # separate them out by cursor type.
            .local pmc ohash
            ohash = get_global '%!ohash'
            unless null ohash goto have_ohash
            ohash = new ['Hash']
            set_global '%!ohash', ohash
          have_ohash:

            # See if we've already created a Hash for the current
            # specification string -- if so, use that.
            .local pmc hash
            hash = ohash[spec]
            unless null hash goto hash_done

            # Otherwise, we need to build a new one.
            hash = new ['Hash']
            .local int pos, eos
            pos = 0
            eos = length spec
          spec_loop:
            pos = find_not_cclass .CCLASS_WHITESPACE, spec, pos, eos
            if pos >= eos goto spec_done
            $S0 = substr spec, pos, 1
            if $S0 == ',' goto spec_comma
            if $S0 == ':' goto spec_pair

            # If whatever we found doesn't start with a colon, treat it
            # as a lookup of a previously saved hash to be merged in.
            .local string lookup
            .local int lpos
            # Find the first whitespace or comma
            lpos = find_cclass .CCLASS_WHITESPACE, spec, pos, eos
            $I0 = index spec, ',', pos
            if $I0 < 0 goto have_lookup_lpos
            if $I0 >= lpos goto have_lookup_lpos
            lpos = $I0
          have_lookup_lpos:
            $I0 = lpos - pos
            lookup = substr spec, pos, $I0
            .local pmc lhash, lhash_it
            lhash = ohash[lookup]
            if null lhash goto err_lookup
            lhash_it = iter lhash
          lhash_loop:
            unless lhash_it goto lhash_done
            $S0 = shift lhash_it
            $P0 = lhash[$S0]
            hash[$S0] = $P0
            goto lhash_loop
          lhash_done:
            pos = lpos
            goto spec_loop

            # We just ignore commas between elements for now.
          spec_comma:
            inc pos
            goto spec_loop

            # If we see a colon, then we want to parse whatever
            # comes next like a pair.
          spec_pair:
            # eat colon
            inc pos
            .local string name
            .local pmc value
            value = new ['Boolean']

            # If the pair is of the form :!name, then reverse the value
            # and skip the colon.
            $S0 = substr spec, pos, 1
            $I0 = iseq $S0, '!'
            pos += $I0
            $I0 = not $I0
            value = $I0

            # Get the name of the pair.
            lpos = find_not_cclass .CCLASS_WORD, spec, pos, eos
            $I0 = lpos - pos
            name = substr spec, pos, $I0
            pos = lpos

            # Look for a <...> that follows.
            $S0 = substr spec, pos, 1
            unless $S0 == '<' goto have_value
            inc pos
            lpos = index spec, '>', pos
            $I0 = lpos - pos
            $S0 = substr spec, pos, $I0
            value = box $S0
            pos = lpos + 1
          have_value:
            # Done processing the pair, store it in the hash.
            hash[name] = value
            goto spec_loop
          spec_done:
            # Done processing the spec string, cache the hash for later.
            ohash[spec] = hash
          hash_done:

            # If we've been called as a subrule, then build a pass-cursor
            # to indicate success and set the hash as the subrule's match object.
            if has_save goto save_hash
            ($P0, $S0, $I0) = self.'!cursor_start'()
            $P0.'!cursor_pass'($I0, '')
            setattribute $P0, cur_class, '$!match', hash
            .return ($P0)

            # save the hash under a new entry
          save_hash:
            ohash[save] = hash
            .return (self)

          err_lookup:
            self.'panic'('Unknown operator precedence specification "', lookup, '"')
        
.annotate 'line', 172
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "panic" :anon :subid("57_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1262
    .param pmc param_1263 :slurpy
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 318
    .lex "self", param_1262
    .lex "@args", param_1263
.annotate 'line', 319
    new $P103, "Undef"
    set $P1264, $P103
    .lex "$pos", $P1264
.annotate 'line', 320
    new $P104, "Undef"
    set $P1265, $P104
    .lex "$target", $P1265
.annotate 'line', 319
    set $P105, param_1262
    nqp_decontainerize $P106, $P105
    $P107 = $P106."pos"()
    set $P1264, $P107
.annotate 'line', 320
    set $P105, param_1262
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?PACKAGE"
    get_who $P108, $P107
    set $P111, $P108["NQPCursor"]
    unless_null $P111, vivify_340
    get_hll_global $P109, "GLOBAL"
    get_who $P110, $P109
    set $P111, $P110["NQPCursor"]
  vivify_340:
    repr_get_attr_str $S100, $P106, $P111, "$!target"
    new $P112, 'String'
    set $P112, $S100
    set $P1265, $P112
.annotate 'line', 321
    set $P1266, param_1263
    unless_null $P1266, vivify_341
    $P1266 = root_new ['parrot';'ResizablePMCArray']
  vivify_341:
    $P1266."push"(" at line ")
.annotate 'line', 322
    set $P1267, param_1263
    unless_null $P1267, vivify_342
    $P1267 = root_new ['parrot';'ResizablePMCArray']
  vivify_342:
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "HLL"
    get_who $P107, $P106
    set $P108, $P107["Compiler"]
    set $P109, $P1265
    unless_null $P109, vivify_343
    new $P109, "Undef"
  vivify_343:
    set $P110, $P1264
    unless_null $P110, vivify_344
    new $P110, "Undef"
  vivify_344:
    $P111 = $P108."lineof"($P109, $P110)
    add $P112, $P111, 1
    $P1267."push"($P112)
.annotate 'line', 323
    set $P1268, param_1263
    unless_null $P1268, vivify_345
    $P1268 = root_new ['parrot';'ResizablePMCArray']
  vivify_345:
    $P1268."push"(", near \"")
.annotate 'line', 324
    set $P1269, param_1263
    unless_null $P1269, vivify_346
    $P1269 = root_new ['parrot';'ResizablePMCArray']
  vivify_346:
    set $P105, $P1265
    unless_null $P105, vivify_347
    new $P105, "Undef"
  vivify_347:
    set $S100, $P105
    set $P106, $P1264
    unless_null $P106, vivify_348
    new $P106, "Undef"
  vivify_348:
    set $I100, $P106
    substr $S101, $S100, $I100, 10
    escape $S102, $S101
    $P1269."push"($S102)
.annotate 'line', 325
    set $P1270, param_1263
    unless_null $P1270, vivify_349
    $P1270 = root_new ['parrot';'ResizablePMCArray']
  vivify_349:
    $P1270."push"("\"")
.annotate 'line', 326
    set $P1271, param_1263
    unless_null $P1271, vivify_350
    $P1271 = root_new ['parrot';'ResizablePMCArray']
  vivify_350:
    join $S100, "", $P1271
    die $S100
.annotate 'line', 318
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "peek_delimiters" :anon :subid("58_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1273
    .param pmc param_1274
    .param pmc param_1275
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 339
    .lex "self", param_1273
    .lex "$target", param_1274
    .lex "$pos", param_1275
.annotate 'line', 340

            .local pmc self
            self = find_lex 'self'
            .local string target
            $P0 = find_lex '$target'
            target = $P0
            .local int pos
            $P0 = find_lex '$pos'
            pos = $P0

            .local string brackets, start, stop
            $P0 = find_lex '$brackets'
            brackets = $P0

            # peek at the next character
            start = substr target, pos, 1
            # colon and word characters aren't valid delimiters
            if start == ':' goto err_colon_delim
            $I0 = is_cclass .CCLASS_WORD, start, 0
            if $I0 goto err_word_delim
            $I0 = is_cclass .CCLASS_WHITESPACE, start, 0
            if $I0 goto err_ws_delim

            # assume stop delim is same as start, for the moment
            stop = start

            # see if we have an opener or closer
            $I0 = index brackets, start
            if $I0 < 0 goto bracket_end
            # if it's a closing bracket, that's an error also
            $I1 = $I0 % 2
            if $I1 goto err_close
            # it's an opener, so get the closing bracket
            inc $I0
            stop = substr brackets, $I0, 1

            # see if the opening bracket is repeated
            .local int len
            len = 0
          bracket_loop:
            inc pos
            inc len
            $S0 = substr target, pos, 1
            if $S0 == start goto bracket_loop
            if len == 1 goto bracket_end
            start = repeat start, len
            stop = repeat stop, len
          bracket_end:
            .return (start, stop, pos)

          err_colon_delim:
            self.'panic'('Colons may not be used to delimit quoting constructs')
          err_word_delim:
            self.'panic'('Alphanumeric character is not allowed as a delimiter')
          err_ws_delim:
            self.'panic'('Whitespace character is not allowed as a delimiter')
          err_close:
            self.'panic'('Use of a closing delimiter for an opener is reserved')
        
.annotate 'line', 339
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_EXPR"  :subid("59_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1277
    .param pmc param_1278 :slurpy
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 401
    .const 'Sub' $P1288 = "261_1338064439.457" 
    capture_lex $P1288
    .lex "self", param_1277
    .lex "@args", param_1278
.annotate 'line', 402
    $P1280 = root_new ['parrot';'Hash']
    set $P1279, $P1280
    .lex "%*QUOTEMOD", $P1279
.annotate 'line', 403
    new $P103, "Undef"
    set $P1281, $P103
    .lex "$*QUOTE_START", $P1281
.annotate 'line', 404
    new $P104, "Undef"
    set $P1282, $P104
    .lex "$*QUOTE_STOP", $P1282
    .local pmc self
    find_lex $P105, "self"
    set self, $P105
    .lex unicode:"$\x{a2}", $P1283
    .lex "$/", $P1284
.annotate 'line', 401
    .local string rx184_tgt
    .local int rx184_pos
    .local int rx184_off
    .local int rx184_eos
    .local int rx184_rep
    .local pmc rx184_cur
    .local pmc rx184_curclass
    .local pmc rx184_bstack
    .local pmc rx184_cstack
    (rx184_cur, rx184_tgt, rx184_pos, rx184_curclass, rx184_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx184_cur
    length rx184_eos, rx184_tgt
    eq $I19, 1, rx184_restart
    repr_get_attr_int $I11, self, rx184_curclass, "$!from"
    ne $I11, -1, rxscan185_done
    goto rxscan185_scan
  rxscan185_loop:
    inc rx184_pos
    gt rx184_pos, rx184_eos, rx184_fail
    repr_bind_attr_int rx184_cur, rx184_curclass, "$!from", rx184_pos
  rxscan185_scan:
    nqp_rxmark rx184_bstack, rxscan185_loop, rx184_pos, 0
  rxscan185_done:
    repr_bind_attr_int rx184_cur, rx184_curclass, "$!pos", rx184_pos
    store_lex unicode:"$\x{a2}", rx184_cur
    set $P108, $P1279
    unless_null $P108, vivify_351
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["%QUOTEMOD"]
    unless_null $P108, vivify_352
    die "Contextual %*QUOTEMOD not found"
  vivify_352:
  vivify_351:
    repr_bind_attr_int rx184_cur, rx184_curclass, "$!pos", rx184_pos
    store_lex unicode:"$\x{a2}", rx184_cur
    set $P111, $P1281
    unless_null $P111, vivify_353
    get_hll_global $P109, "GLOBAL"
    get_who $P110, $P109
    set $P111, $P110["$QUOTE_START"]
    unless_null $P111, vivify_354
    die "Contextual $*QUOTE_START not found"
  vivify_354:
  vivify_353:
    repr_bind_attr_int rx184_cur, rx184_curclass, "$!pos", rx184_pos
    store_lex unicode:"$\x{a2}", rx184_cur
    set $P114, $P1282
    unless_null $P114, vivify_355
    get_hll_global $P112, "GLOBAL"
    get_who $P113, $P112
    set $P114, $P113["$QUOTE_STOP"]
    unless_null $P114, vivify_356
    die "Contextual $*QUOTE_STOP not found"
  vivify_356:
  vivify_355:
    repr_bind_attr_int rx184_cur, rx184_curclass, "$!pos", rx184_pos
    store_lex unicode:"$\x{a2}", rx184_cur
    find_lex $P115, unicode:"$\x{a2}"
    $P116 = $P115."MATCH"()
    store_lex "$/", $P116
.annotate 'line', 405
    .const 'Sub' $P1288 = "261_1338064439.457" 
    capture_lex $P1288
    $P117 = $P1288()
.annotate 'line', 401
    repr_bind_attr_int rx184_cur, rx184_curclass, "$!pos", rx184_pos
    $P11 = rx184_cur."quote_delimited"()
    repr_get_attr_int $I11, $P11, rx184_curclass, "$!pos"
    lt $I11, 0, rx184_fail
    nqp_rxmark rx184_bstack, rxsubrule186_pass, -1, 0
  rxsubrule186_pass:
    rx184_cstack = rx184_cur."!cursor_capture"($P11, "quote_delimited")
    repr_get_attr_int rx184_pos, $P11, rx184_curclass, "$!pos"
    rx184_cur."!cursor_pass"(rx184_pos, "quote_EXPR", 'backtrack'=>1)
    .return (rx184_cur)
  rx184_restart:
    repr_get_attr_obj rx184_cstack, rx184_cur, rx184_curclass, "$!cstack"
  rx184_fail:
    unless rx184_bstack, rx184_done
    pop $I19, rx184_bstack
    if_null rx184_cstack, rx184_cstack_done
    unless rx184_cstack, rx184_cstack_done
    dec $I19
    set $P11, rx184_cstack[$I19]
  rx184_cstack_done:
    pop rx184_rep, rx184_bstack
    pop rx184_pos, rx184_bstack
    pop $I19, rx184_bstack
    lt rx184_pos, -1, rx184_done
    lt rx184_pos, 0, rx184_fail
    eq $I19, 0, rx184_fail
    if_null rx184_cstack, rx184_jump
    elements $I18, rx184_bstack
    le $I18, 0, rx184_cut
    dec $I18
    set $I18, rx184_bstack[$I18]
  rx184_cut:
    assign rx184_cstack, $I18
  rx184_jump:
    jump $I19
  rx184_done:
    rx184_cur."!cursor_fail"()
    .return (rx184_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "59_1338064439.457_caps"  :subid("259_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 401
    new $P106, "Hash"
    set $P106["quote_delimited"], 0
    .return ($P106)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "59_1338064439.457_nfa"  :subid("260_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 401
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 3
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 4
    new $P110, "ResizablePMCArray"
    push $P110, 0
    push $P110, 0
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P106
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "_block1287"  :anon :subid("261_1338064439.457") :outer("59_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 406
            
                .local pmc self, cur_class, args
                self = find_lex 'self'
                cur_class = find_lex '$cursor_class'
                args = find_lex '@args'

                .local pmc quotemod, true
                quotemod = find_lex '%*QUOTEMOD'
                true = box 1

              args_loop:
                unless args goto args_done
                .local string mod
                mod = shift args
                mod = substr mod, 1
                quotemod[mod] = true
                if mod == 'qq' goto opt_qq
                if mod == 'b' goto opt_b
                goto args_loop
              opt_qq:
                quotemod['s'] = true
                quotemod['a'] = true
                quotemod['h'] = true
                quotemod['f'] = true
                quotemod['c'] = true
                quotemod['b'] = true
              opt_b:
                quotemod['q'] = true
                goto args_loop
              args_done:

                .local pmc start, stop
                .local string target
                .local int pos
                target = repr_get_attr_str self, cur_class, '$!target'
                pos = repr_get_attr_int self, cur_class, '$!pos'
                (start, stop) = self.'peek_delimiters'(target, pos)
                store_lex '$*QUOTE_START', start
                store_lex '$*QUOTE_STOP', stop
            
.annotate 'line', 405
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quotemod_check"  :subid("60_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1290
    .param pmc param_1291
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 450
    .const 'Sub' $P1297 = "264_1338064439.457" 
    capture_lex $P1297
    .lex "self", param_1290
    .lex "$mod", param_1291
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1292
    .lex "$/", $P1293
    .local string rx187_tgt
    .local int rx187_pos
    .local int rx187_off
    .local int rx187_eos
    .local int rx187_rep
    .local pmc rx187_cur
    .local pmc rx187_curclass
    .local pmc rx187_bstack
    .local pmc rx187_cstack
    (rx187_cur, rx187_tgt, rx187_pos, rx187_curclass, rx187_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx187_cur
    length rx187_eos, rx187_tgt
    eq $I19, 1, rx187_restart
    repr_get_attr_int $I11, self, rx187_curclass, "$!from"
    ne $I11, -1, rxscan188_done
    goto rxscan188_scan
  rxscan188_loop:
    inc rx187_pos
    gt rx187_pos, rx187_eos, rx187_fail
    repr_bind_attr_int rx187_cur, rx187_curclass, "$!from", rx187_pos
  rxscan188_scan:
    nqp_rxmark rx187_bstack, rxscan188_loop, rx187_pos, 0
  rxscan188_done:
    repr_bind_attr_int rx187_cur, rx187_curclass, "$!pos", rx187_pos
    store_lex unicode:"$\x{a2}", rx187_cur
    find_lex $P104, unicode:"$\x{a2}"
    $P105 = $P104."MATCH"()
    store_lex "$/", $P105
.annotate 'line', 451
    .const 'Sub' $P1297 = "264_1338064439.457" 
    capture_lex $P1297
    $P106 = $P1297()
.annotate 'line', 450
    unless $P106, rx187_fail
    rx187_cur."!cursor_pass"(rx187_pos, "quotemod_check", 'backtrack'=>1)
    .return (rx187_cur)
  rx187_restart:
    repr_get_attr_obj rx187_cstack, rx187_cur, rx187_curclass, "$!cstack"
  rx187_fail:
    unless rx187_bstack, rx187_done
    pop $I19, rx187_bstack
    if_null rx187_cstack, rx187_cstack_done
    unless rx187_cstack, rx187_cstack_done
    dec $I19
    set $P11, rx187_cstack[$I19]
  rx187_cstack_done:
    pop rx187_rep, rx187_bstack
    pop rx187_pos, rx187_bstack
    pop $I19, rx187_bstack
    lt rx187_pos, -1, rx187_done
    lt rx187_pos, 0, rx187_fail
    eq $I19, 0, rx187_fail
    if_null rx187_cstack, rx187_jump
    elements $I18, rx187_bstack
    le $I18, 0, rx187_cut
    dec $I18
    set $I18, rx187_bstack[$I18]
  rx187_cut:
    assign rx187_cstack, $I18
  rx187_jump:
    jump $I19
  rx187_done:
    rx187_cur."!cursor_fail"()
    .return (rx187_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "60_1338064439.457_caps"  :subid("262_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 450
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "60_1338064439.457_nfa"  :subid("263_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 450
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "_block1296"  :anon :subid("264_1338064439.457") :outer("60_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 451
    find_lex $P106, "$mod"
    unless_null $P106, vivify_357
    new $P106, "Undef"
  vivify_357:
    find_dynamic_lex $P109, "%*QUOTEMOD"
    unless_null $P109, vivify_358
    get_hll_global $P107, "GLOBAL"
    get_who $P108, $P107
    set $P109, $P108["%QUOTEMOD"]
    unless_null $P109, vivify_359
    die "Contextual %*QUOTEMOD not found"
  vivify_359:
  vivify_358:
    set $P110, $P109[$P106]
    unless_null $P110, vivify_360
    new $P110, "Undef"
  vivify_360:
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "starter" :anon :subid("61_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1299
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 454
    .lex "self", param_1299
.annotate 'line', 455

            .local pmc self, cur
            .local string target, start
            .local int pos
            self = find_lex 'self'

            (cur, target, pos) = self.'!cursor_start'()

            $P0 = find_dynamic_lex '$*QUOTE_START'
            if null $P0 goto fail
            start = $P0

            $I0 = length start
            $S0 = substr target, pos, $I0
            unless $S0 == start goto fail
            pos += $I0
            cur.'!cursor_pass'(pos, 'starter')
          fail:
            .return (cur)
        
.annotate 'line', 454
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "stopper" :anon :subid("62_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1301
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 477
    .lex "self", param_1301
.annotate 'line', 478

            .local pmc self, cur
            .local string target, stop
            .local int pos
            self = find_lex 'self'

            (cur, target, pos) = self.'!cursor_start'()

            $P0 = find_dynamic_lex '$*QUOTE_STOP'
            if null $P0 goto fail
            stop = $P0

            $I0 = length stop
            $S0 = substr target, pos, $I0
            unless $S0 == stop goto fail
            pos += $I0
            cur.'!cursor_pass'(pos, 'stopper')
          fail:
            .return (cur)
        
.annotate 'line', 477
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "split_words"  :subid("63_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1303
    .param pmc param_1304
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 500
    .lex "self", param_1303
    .lex "$words", param_1304
.annotate 'line', 501

            .include 'src/Regex/constants.pir'
            .local string words
            $P0 = find_lex '$words'
            words = $P0
            .local int pos, eos
            .local pmc result
            pos = 0
            eos = length words
            result = new ['ResizablePMCArray']
          split_loop:
            pos = find_not_cclass .CCLASS_WHITESPACE, words, pos, eos
            unless pos < eos goto split_done
            $I0 = find_cclass .CCLASS_WHITESPACE, words, pos, eos
            $I1 = $I0 - pos
            $S0 = substr words, pos, $I1
            push result, $S0
            pos = $I0
            goto split_loop
          split_done:
            .return (result)
        
.annotate 'line', 500
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "EXPR" :anon :subid("64_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1306
    .param pmc param_1307 :optional
    .param int has_param_1307 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 533
    .lex "self", param_1306
    if has_param_1307, optparam_361
    new $P103, "String"
    assign $P103, ""
    set param_1307, $P103
  optparam_361:
    .lex "$preclim", param_1307
.annotate 'line', 534

            .local pmc self, cur_class
            self = find_lex 'self'
            cur_class = find_lex '$cursor_class'

            .local string preclim
            $P0 = find_lex '$preclim'
            preclim = $P0
            
            .local pmc here
            .local string tgt
            .local int pos
            (here, tgt, pos) = self.'!cursor_start'()

            .local string termishrx
            termishrx = 'termish'

            .local pmc opstack, termstack
            opstack = new ['ResizablePMCArray']
            .lex '@opstack', opstack
            termstack = new ['ResizablePMCArray']
            .lex '@termstack', termstack

          term_loop:
            .local pmc termcur
            repr_bind_attr_int here, cur_class, "$!pos", pos
            termcur = here.termishrx()
            pos = repr_get_attr_int termcur, cur_class, "$!pos"
            repr_bind_attr_int here, cur_class, "$!pos", pos
            if pos < 0 goto fail
            .local pmc termish
            termish = termcur.'MATCH'()

            # interleave any prefix/postfix we might have found
            .local pmc termOPER, prefixish, postfixish
            termOPER = termish
          termOPER_loop:
            $I0 = exists termOPER['OPER']
            unless $I0 goto termOPER_done
            termOPER = termOPER['OPER']
            goto termOPER_loop
          termOPER_done:
            prefixish = termOPER['prefixish']
            postfixish = termOPER['postfixish']
            if null prefixish goto prefix_done

          prepostfix_loop:
            unless prefixish goto prepostfix_done
            unless postfixish goto prepostfix_done
            .local pmc preO, postO
            .local string preprec, postprec
            $P0 = prefixish[0]
            $P0 = $P0['OPER']
            preO = $P0['O']
            preprec = preO['prec']
            $P0 = postfixish[-1]
            $P0 = $P0['OPER']
            postO = $P0['O']
            postprec = postO['prec']
            if postprec < preprec goto post_shift
            if postprec > preprec goto pre_shift
            $S0 = postO['uassoc']
            if $S0 == 'right' goto pre_shift
          post_shift:
            $P0 = pop postfixish
            push opstack, $P0
            goto prepostfix_loop
          pre_shift:
            $P0 = shift prefixish
            push opstack, $P0
            goto prepostfix_loop
          prepostfix_done:

          prefix_loop:
            unless prefixish goto prefix_done
            $P0 = shift prefixish
            push opstack, $P0
            goto prefix_loop
          prefix_done:
            delete termish['prefixish']

          postfix_loop:
            if null postfixish goto postfix_done
            unless postfixish goto postfix_done
            $P0 = pop postfixish
            push opstack, $P0
            goto postfix_loop
          postfix_done:
            delete termish['postfixish']

            $P0 = termish['term']
            push termstack, $P0

            # Now see if we can fetch an infix operator
            .local pmc wscur, infixcur, infix
            
            # First, we need ws to match.
            repr_bind_attr_int here, cur_class, "$!pos", pos
            wscur = here.'ws'()
            pos = repr_get_attr_int wscur, cur_class, '$!pos'
            if pos < 0 goto term_done
            repr_bind_attr_int here, cur_class, "$!pos", pos
            
            # Next, try the infix itself.
            infixcur = here.'infixish'()
            pos = repr_get_attr_int infixcur, cur_class, '$!pos'
            if pos < 0 goto term_done
            infix = infixcur.'MATCH'()

            # We got an infix.
            .local pmc inO
            $P0 = infix['OPER']
            inO = $P0['O']
            termishrx = inO['nextterm']
            if termishrx goto have_termishrx
          nonextterm:
            termishrx = 'termish'
          have_termishrx:

            .local string inprec, inassoc, opprec
            inprec = inO['prec']
            unless inprec goto err_inprec
            if inprec < preclim goto term_done
            inassoc = inO['assoc']

            $P0 = inO['sub']
            if null $P0 goto subprec_done
            inO['prec'] = $P0
          subprec_done:

          reduce_loop:
            unless opstack goto reduce_done
            $P0 = opstack[-1]
            $P0 = $P0['OPER']
            $P0 = $P0['O']
            opprec = $P0['prec']
            unless opprec > inprec goto reduce_gt_done
            self.'EXPR_reduce'(termstack, opstack)
            goto reduce_loop
          reduce_gt_done:

            unless opprec == inprec goto reduce_done
            # equal precedence, use associativity to decide
            unless inassoc == 'left' goto reduce_done
            # left associative, reduce immediately
            self.'EXPR_reduce'(termstack, opstack)
          reduce_done:

            push opstack, infix        # The Shift
            repr_bind_attr_int here, cur_class, "$!pos", pos
            wscur = here.'ws'()
            pos = repr_get_attr_int wscur, cur_class, '$!pos'
            repr_bind_attr_int here, cur_class, "$!pos", pos
            if pos < 0 goto fail
            goto term_loop
          term_done:

          opstack_loop:
            unless opstack goto opstack_done
            self.'EXPR_reduce'(termstack, opstack)
            goto opstack_loop
          opstack_done:

          expr_done:
            .local pmc term
            term = pop termstack
            pos = here.'pos'()
            here = self.'!cursor_start'()
            here.'!cursor_pass'(pos)
            repr_bind_attr_int here, cur_class, '$!pos', pos
            setattribute here, cur_class, '$!match', term
            here.'!reduce'('EXPR')
            goto done

          fail:
          done:
            .return (here)

          err_internal:
            $I0 = termstack
            here.'panic'('Internal operator parser error, @termstack == ', $I0)
          err_inprec:
            infixcur.'panic'('Missing infixish operator precedence')
        
.annotate 'line', 533
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "EXPR_reduce" :anon :subid("65_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1309
    .param pmc param_1310
    .param pmc param_1311
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 720
    .lex "self", param_1309
    .lex "$termstack", param_1310
    .lex "$opstack", param_1311
.annotate 'line', 721

            .local pmc self, termstack, opstack
            self = find_lex 'self'
            termstack = find_lex '$termstack'
            opstack = find_lex '$opstack'

            .local pmc op, opOPER, opO
            .local string opassoc
            op = pop opstack
            
            # Give it a fresh capture list, since we'll have assumed it has
            # no positional captures and not taken them.
            .local pmc cap_class
            cap_class = find_lex 'NQPCapture'
            $P0 = new ['ResizablePMCArray']
            setattribute op, cap_class, '@!array', $P0
            
            opOPER = op['OPER']
            opO = opOPER['O']
            $P0 = opO['assoc']
            opassoc = $P0
            if opassoc == 'unary' goto op_unary
            if opassoc == 'list' goto op_list
          op_infix:
            .local pmc right, left
            right = pop termstack
            left = pop termstack
            op[0] = left
            op[1] = right
            $P0 = opO['reducecheck']
            if null $P0 goto op_infix_1
            $S0 = $P0
            self.$S0(op)
          op_infix_1:
            self.'!reduce_with_match'('EXPR', 'INFIX', op)
            goto done

          op_unary:
            .local pmc arg, afrom, ofrom
            arg = pop termstack
            op[0] = arg
            afrom = arg.'from'()
            ofrom = op.'from'()
            if afrom < ofrom goto op_postfix
          op_prefix:
            self.'!reduce_with_match'('EXPR', 'PREFIX', op)
            goto done
          op_postfix:
            self.'!reduce_with_match'('EXPR', 'POSTFIX', op)
            goto done

          op_list:
            .local string sym
            sym = ''
            $P0 = opOPER['sym']
            if null $P0 goto op_list_1
            sym = $P0
          op_list_1:
            arg = pop termstack
            unshift op, arg
          op_sym_loop:
            unless opstack goto op_sym_done
            $S0 = ''
            $P0 = opstack[-1]
            $P0 = $P0['OPER']
            $P0 = $P0['sym']
            if null $P0 goto op_sym_1
            $S0 = $P0
          op_sym_1:
            if sym != $S0 goto op_sym_done
            arg = pop termstack
            unshift op, arg
            $P0 = pop opstack
            goto op_sym_loop
          op_sym_done:
            arg = pop termstack
            unshift op, arg
            self.'!reduce_with_match'('EXPR', 'LIST', op)
            goto done

          done:
            push termstack, op
        
.annotate 'line', 720
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "ternary" :anon :subid("66_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1313
    .param pmc param_1314
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 806
    .lex "self", param_1313
    .lex "$match", param_1314
.annotate 'line', 807
    set $P1315, param_1314
    unless_null $P1315, vivify_362
    $P1315 = root_new ['parrot';'ResizablePMCArray']
  vivify_362:
    set $P103, $P1315[1]
    unless_null $P103, vivify_363
    new $P103, "Undef"
  vivify_363:
    set $P1316, param_1314
    unless_null $P1316, vivify_364
    $P1316 = root_new ['parrot';'ResizablePMCArray']
    set param_1314, $P1316
  vivify_364:
    set $P1316[2], $P103
.annotate 'line', 808
    set $P1317, param_1314
    unless_null $P1317, vivify_365
    $P1317 = root_new ['parrot';'Hash']
  vivify_365:
    set $P1318, $P1317["infix"]
    unless_null $P1318, vivify_366
    $P1318 = root_new ['parrot';'Hash']
  vivify_366:
    set $P103, $P1318["EXPR"]
    unless_null $P103, vivify_367
    new $P103, "Undef"
  vivify_367:
    set $P1319, param_1314
    unless_null $P1319, vivify_368
    $P1319 = root_new ['parrot';'ResizablePMCArray']
    set param_1314, $P1319
  vivify_368:
    set $P1319[1], $P103
.annotate 'line', 806
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "MARKER" :anon :subid("67_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1321
    .param pmc param_1322
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 811
    .lex "self", param_1321
    .lex "$markname", param_1322
.annotate 'line', 812
    $P1324 = root_new ['parrot';'Hash']
    set $P1323, $P1324
    .lex "%markhash", $P1323
.annotate 'line', 819
    new $P103, "Undef"
    set $P1325, $P103
    .lex "$cur", $P1325
.annotate 'line', 812

            $P1326 = get_global '%!MARKHASH'
            unless null $P1326 goto have_markhash
            $P1326 = new ['Hash']
            set_global '%!MARKHASH', $P1326
          have_markhash:
        
    set $P1323, $P1326
.annotate 'line', 819
    set $P104, param_1321
    nqp_decontainerize $P105, $P104
    $P106 = $P105."!cursor_start"()
    set $P1325, $P106
.annotate 'line', 820
    set $P104, $P1325
    unless_null $P104, vivify_369
    new $P104, "Undef"
  vivify_369:
    set $P105, param_1321
    nqp_decontainerize $P106, $P105
    $P107 = $P106."pos"()
    $P104."!cursor_pass"($P107)
.annotate 'line', 821
    set $P104, $P1325
    unless_null $P104, vivify_370
    new $P104, "Undef"
  vivify_370:
    set $P105, param_1322
    unless_null $P105, vivify_371
    new $P105, "Undef"
  vivify_371:
    set $P1327, $P1323
    unless_null $P1327, vivify_372
    $P1327 = root_new ['parrot';'Hash']
    set $P1323, $P1327
  vivify_372:
    set $P1327[$P105], $P104
.annotate 'line', 811
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "MARKED" :anon :subid("68_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1329
    .param pmc param_1330
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 824
    .lex "self", param_1329
    .lex "$markname", param_1330
.annotate 'line', 825
    $P1332 = root_new ['parrot';'Hash']
    set $P1331, $P1332
    .lex "%markhash", $P1331
.annotate 'line', 832
    new $P103, "Undef"
    set $P1333, $P103
    .lex "$cur", $P1333
.annotate 'line', 825

            $P1334 = get_global '%!MARKHASH'
            unless null $P1334 goto have_markhash
            $P1334 = new ['Hash']
            set_global '%!MARKHASH', $P1334
          have_markhash:
        
    set $P1331, $P1334
.annotate 'line', 832
    set $P104, param_1330
    unless_null $P104, vivify_373
    new $P104, "Undef"
  vivify_373:
    set $P1335, $P1331
    unless_null $P1335, vivify_374
    $P1335 = root_new ['parrot';'Hash']
  vivify_374:
    set $P105, $P1335[$P104]
    unless_null $P105, vivify_375
    new $P105, "Undef"
  vivify_375:
    set $P1333, $P105
.annotate 'line', 833
    set $P105, $P1333
    unless_null $P105, vivify_376
    new $P105, "Undef"
  vivify_376:
    find_lex $P106, "$?PACKAGE"
    get_who $P107, $P106
    set $P110, $P107["NQPCursor"]
    unless_null $P110, vivify_377
    get_hll_global $P108, "GLOBAL"
    get_who $P109, $P108
    set $P110, $P109["NQPCursor"]
  vivify_377:
    type_check $I100, $P105, $P110
    if $I100, if_1337
    new $P104, 'Integer'
    set $P104, $I100
    goto if_1337_end
  if_1337:
    set $P111, $P1333
    unless_null $P111, vivify_378
    new $P111, "Undef"
  vivify_378:
    $N100 = $P111."pos"()
    set $P112, param_1329
    nqp_decontainerize $P113, $P112
    $N101 = $P113."pos"()
    iseq $I101, $N100, $N101
    new $P104, 'Integer'
    set $P104, $I101
  if_1337_end:
    if $P104, unless_1336_end
.annotate 'line', 834
    set $P114, param_1329
    nqp_decontainerize $P115, $P114
    $P116 = $P115."!cursor_start"()
    set $P1333, $P116
  unless_1336_end:
.annotate 'line', 824
    set $P104, $P1333
    unless_null $P104, vivify_379
    new $P104, "Undef"
  vivify_379:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "LANG" :anon :subid("69_1338064439.457") :outer("183_1338064439.457")
    .param pmc param_1339
    .param pmc param_1340
    .param pmc param_1341
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 839
    .lex "self", param_1339
    .lex "$lang", param_1340
    .lex "$regex", param_1341
.annotate 'line', 840
    new $P103, "Undef"
    set $P1342, $P103
    .lex "$lang_cursor", $P1342
.annotate 'line', 841
    new $P104, "Undef"
    set $P1343, $P104
    .lex "$*ACTIONS", $P1343
.annotate 'line', 840
    set $P105, param_1340
    unless_null $P105, vivify_380
    new $P105, "Undef"
  vivify_380:
    find_dynamic_lex $P108, "%*LANG"
    unless_null $P108, vivify_381
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["%LANG"]
    unless_null $P108, vivify_382
    die "Contextual %*LANG not found"
  vivify_382:
  vivify_381:
    set $P109, $P108[$P105]
    unless_null $P109, vivify_383
    new $P109, "Undef"
  vivify_383:
    set $P110, param_1339
    nqp_decontainerize $P111, $P110
    $P112 = $P111."target"()
    set $P113, param_1339
    nqp_decontainerize $P114, $P113
    $P115 = $P114."pos"()
    $P116 = $P109."!cursor_init"($P112, $P115 :named("p"))
    set $P1342, $P116
.annotate 'line', 841
    set $P105, param_1340
    unless_null $P105, vivify_384
    new $P105, "Undef"
  vivify_384:
    concat $P106, $P105, "-actions"
    find_dynamic_lex $P109, "%*LANG"
    unless_null $P109, vivify_385
    get_hll_global $P107, "GLOBAL"
    get_who $P108, $P107
    set $P109, $P108["%LANG"]
    unless_null $P109, vivify_386
    die "Contextual %*LANG not found"
  vivify_386:
  vivify_385:
    set $P110, $P109[$P106]
    unless_null $P110, vivify_387
    new $P110, "Undef"
  vivify_387:
    set $P1343, $P110
.annotate 'line', 842
    set $P105, $P1342
    unless_null $P105, vivify_388
    new $P105, "Undef"
  vivify_388:
    set $P106, param_1341
    unless_null $P106, vivify_389
    new $P106, "Undef"
  vivify_389:
    set $S100, $P106
    $P107 = $P105.$S100()
.annotate 'line', 839
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "_block1345"  :subid("265_1338064439.457") :outer("182_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 847
    .const 'Sub' $P1585 = "102_1338064439.457" 
    capture_lex $P1585
    .const 'Sub' $P1576 = "101_1338064439.457" 
    capture_lex $P1576
    .const 'Sub' $P1568 = "100_1338064439.457" 
    capture_lex $P1568
    .const 'Sub' $P1561 = "99_1338064439.457" 
    capture_lex $P1561
    .const 'Sub' $P1558 = "98_1338064439.457" 
    capture_lex $P1558
    .const 'Sub' $P1554 = "97_1338064439.457" 
    capture_lex $P1554
    .const 'Sub' $P1546 = "96_1338064439.457" 
    capture_lex $P1546
    .const 'Sub' $P1538 = "95_1338064439.457" 
    capture_lex $P1538
    .const 'Sub' $P1535 = "94_1338064439.457" 
    capture_lex $P1535
    .const 'Sub' $P1532 = "93_1338064439.457" 
    capture_lex $P1532
    .const 'Sub' $P1529 = "92_1338064439.457" 
    capture_lex $P1529
    .const 'Sub' $P1526 = "91_1338064439.457" 
    capture_lex $P1526
    .const 'Sub' $P1523 = "90_1338064439.457" 
    capture_lex $P1523
    .const 'Sub' $P1520 = "89_1338064439.457" 
    capture_lex $P1520
    .const 'Sub' $P1516 = "88_1338064439.457" 
    capture_lex $P1516
    .const 'Sub' $P1513 = "87_1338064439.457" 
    capture_lex $P1513
    .const 'Sub' $P1507 = "86_1338064439.457" 
    capture_lex $P1507
    .const 'Sub' $P1480 = "85_1338064439.457" 
    capture_lex $P1480
    .const 'Sub' $P1460 = "84_1338064439.457" 
    capture_lex $P1460
    .const 'Sub' $P1457 = "83_1338064439.457" 
    capture_lex $P1457
    .const 'Sub' $P1454 = "82_1338064439.457" 
    capture_lex $P1454
    .const 'Sub' $P1451 = "81_1338064439.457" 
    capture_lex $P1451
    .const 'Sub' $P1448 = "80_1338064439.457" 
    capture_lex $P1448
    .const 'Sub' $P1445 = "79_1338064439.457" 
    capture_lex $P1445
    .const 'Sub' $P1441 = "78_1338064439.457" 
    capture_lex $P1441
    .const 'Sub' $P1437 = "77_1338064439.457" 
    capture_lex $P1437
    .const 'Sub' $P1434 = "76_1338064439.457" 
    capture_lex $P1434
    .const 'Sub' $P1430 = "75_1338064439.457" 
    capture_lex $P1430
    .const 'Sub' $P1426 = "74_1338064439.457" 
    capture_lex $P1426
    .const 'Sub' $P1385 = "73_1338064439.457" 
    capture_lex $P1385
    .const 'Sub' $P1369 = "72_1338064439.457" 
    capture_lex $P1369
    .const 'Sub' $P1367 = "71_1338064439.457" 
    capture_lex $P1367
    .const 'Sub' $P1356 = "70_1338064439.457" 
    capture_lex $P1356
    .const 'Sub' $P1348 = "266_1338064439.457" 
    capture_lex $P1348
.annotate 'line', 848
    .const 'Sub' $P1348 = "266_1338064439.457" 
    newclosure $P1353, $P1348
    set $P1347, $P1353
    .lex "string_to_int", $P1347
.annotate 'line', 847
    set $P102, $P1347
    find_lex $P103, "$?PACKAGE"
    get_who $P105, $P103
    set $P105["string_to_int"], $P102
    .lex "$?PACKAGE", $P1354
    .lex "$?CLASS", $P1355
    set $P106, $P1347
.annotate 'line', 1026
    .const 'Sub' $P1585 = "102_1338064439.457" 
    newclosure $P1591, $P1585
.annotate 'line', 847
    .return ($P1591)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "string_to_int"  :subid("266_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1349
    .param pmc param_1350
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 848
    .lex "$src", param_1349
    .lex "$base", param_1350
.annotate 'line', 849
    new $P101, "Undef"
    set $P1351, $P101
    .lex "$res", $P1351
    set $P102, param_1350
    unless_null $P102, vivify_390
    new $P102, "Undef"
  vivify_390:
    set $I100, $P102
    set $P103, param_1349
    unless_null $P103, vivify_391
    new $P103, "Undef"
  vivify_391:
    set $S100, $P103
    nqp_radix $P104, $I100, $S100, 0, 2
    set $P1351, $P104
.annotate 'line', 851
    new $P103, "Float"
    assign $P103, 2
    set $S100, $P103
    set $P102, $P1351
    unless_null $P102, vivify_392
    new $P102, "Undef"
  vivify_392:
    set $P104, $P102[$S100]
    set $N100, $P104
    set $P105, param_1349
    unless_null $P105, vivify_393
    new $P105, "Undef"
  vivify_393:
    set $S101, $P105
    length $I100, $S101
    set $N101, $I100
    iseq $I101, $N100, $N101
    if $I101, unless_1352_end
.annotate 'line', 850
    set $P106, param_1349
    unless_null $P106, vivify_394
    new $P106, "Undef"
  vivify_394:
    $P107 = $P106."CURSOR"()
    new $P108, 'String'
    set $P108, "'"
    set $P109, param_1349
    unless_null $P109, vivify_395
    new $P109, "Undef"
  vivify_395:
    concat $P110, $P108, $P109
    concat $P111, $P110, "' is not a valid number"
    $P107."panic"($P111)
  unless_1352_end:
.annotate 'line', 852
    new $P103, "Float"
    assign $P103, 0
    set $S100, $P103
    set $P102, $P1351
    unless_null $P102, vivify_396
    new $P102, "Undef"
  vivify_396:
    set $P104, $P102[$S100]
.annotate 'line', 848
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "ints_to_string" :anon :subid("70_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1357
    .param pmc param_1358
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 855
    .const 'Sub' $P1361 = "267_1338064439.457" 
    capture_lex $P1361
    .lex "self", param_1357
    .lex "$ints", param_1358
.annotate 'line', 856
    set $P107, param_1358
    unless_null $P107, vivify_397
    new $P107, "Undef"
  vivify_397:
    does $I100, $P107, "array"
    if $I100, if_1359
.annotate 'line', 863
    set $P111, param_1358
    unless_null $P111, vivify_398
    new $P111, "Undef"
  vivify_398:
    $I101 = $P111."ast"()
    chr $S100, $I101
    new $P112, 'String'
    set $P112, $S100
.annotate 'line', 862
    set $P106, $P112
.annotate 'line', 856
    goto if_1359_end
  if_1359:
    .const 'Sub' $P1361 = "267_1338064439.457" 
    capture_lex $P1361
    $P110 = $P1361()
    set $P106, $P110
  if_1359_end:
.annotate 'line', 855
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.include "except_types.pasm"
.sub "_block1360"  :anon :subid("267_1338064439.457") :outer("70_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 856
    .const 'Sub' $P1364 = "268_1338064439.457" 
    capture_lex $P1364
.annotate 'line', 857
    new $P108, "Undef"
    set $P1362, $P108
    .lex "$result", $P1362
    new $P109, "String"
    assign $P109, ""
    set $P1362, $P109
.annotate 'line', 858
    find_lex $P110, "$ints"
    unless_null $P110, vivify_399
    new $P110, "Undef"
  vivify_399:
    defined $I101, $P110
    unless $I101, for_undef_400
    iter $P109, $P110
    new $P112, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P112, loop1366_handler
    push_eh $P112
  loop1366_test:
    unless $P109, loop1366_done
    shift $P111, $P109
  loop1366_redo:
    .const 'Sub' $P1364 = "268_1338064439.457" 
    capture_lex $P1364
    $P1364($P111)
  loop1366_next:
    goto loop1366_test
  loop1366_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P113, exception, 'type'
    eq $P113, .CONTROL_LOOP_NEXT, loop1366_next
    eq $P113, .CONTROL_LOOP_REDO, loop1366_redo
  loop1366_done:
    pop_eh 
  for_undef_400:
.annotate 'line', 856
    set $P109, $P1362
    unless_null $P109, vivify_403
    new $P109, "Undef"
  vivify_403:
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "_block1363"  :anon :subid("268_1338064439.457") :outer("267_1338064439.457")
    .param pmc param_1365
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 858
    .lex "$_", param_1365
.annotate 'line', 859
    find_lex $P112, "$result"
    unless_null $P112, vivify_401
    new $P112, "Undef"
  vivify_401:
    find_lex $P113, "$_"
    unless_null $P113, vivify_402
    new $P113, "Undef"
  vivify_402:
    $I102 = $P113."ast"()
    chr $S100, $I102
    concat $P114, $P112, $S100
    store_lex "$result", $P114
.annotate 'line', 858
    .return ($P114)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "CTXSAVE" :anon :subid("71_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1368
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 868
    .lex "self", param_1368
.annotate 'line', 869
    get_hll_global $P106, "GLOBAL"
    nqp_get_package_through_who $P107, $P106, "PAST"
    get_who $P108, $P107
    set $P109, $P108["Op"]
.annotate 'line', 875
    new $P110, "ResizablePMCArray"
    push $P110, "    $P0 = find_dynamic_lex \"$*CTXSAVE\""
    push $P110, "    if null $P0 goto ctxsave_done"
    push $P110, "    $I0 = can $P0, \"ctxsave\""
    push $P110, "    unless $I0 goto ctxsave_done"
    push $P110, "    $P0.\"ctxsave\"()"
    push $P110, "  ctxsave_done:"
.annotate 'line', 869
    $P111 = $P109."new"($P110 :named("inline"))
.annotate 'line', 868
    .return ($P111)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "SET_BLOCK_OUTER_CTX" :anon :subid("72_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1370
    .param pmc param_1371
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 882
    .const 'Sub' $P1376 = "269_1338064439.457" 
    capture_lex $P1376
    .lex "self", param_1370
    .lex "$block", param_1371
.annotate 'line', 883
    new $P106, "Undef"
    set $P1372, $P106
    .lex "$outer_ctx", $P1372
    find_dynamic_lex $P109, "%*COMPILING"
    unless_null $P109, vivify_404
    get_hll_global $P107, "GLOBAL"
    get_who $P108, $P107
    set $P109, $P108["%COMPILING"]
    unless_null $P109, vivify_405
    die "Contextual %*COMPILING not found"
  vivify_405:
  vivify_404:
    set $P1373, $P109["%?OPTIONS"]
    unless_null $P1373, vivify_406
    $P1373 = root_new ['parrot';'Hash']
  vivify_406:
    set $P110, $P1373["outer_ctx"]
    unless_null $P110, vivify_407
    new $P110, "Undef"
  vivify_407:
    set $P1372, $P110
.annotate 'line', 884
    set $P108, $P1372
    unless_null $P108, vivify_408
    new $P108, "Undef"
  vivify_408:
    defined $I100, $P108
    if $I100, if_1374
    new $P107, 'Integer'
    set $P107, $I100
    goto if_1374_end
  if_1374:
    .const 'Sub' $P1376 = "269_1338064439.457" 
    capture_lex $P1376
    $P110 = $P1376()
    set $P107, $P110
  if_1374_end:
.annotate 'line', 882
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.include "except_types.pasm"
.sub "_block1375"  :anon :subid("269_1338064439.457") :outer("72_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 884
    .const 'Sub' $P1382 = "270_1338064439.457" 
    capture_lex $P1382
.annotate 'line', 885
    $P1378 = root_new ['parrot';'ResizablePMCArray']
    set $P1377, $P1378
    .lex "@ns", $P1377
    find_lex $P109, "$outer_ctx"
    unless_null $P109, vivify_409
    new $P109, "Undef"
  vivify_409:
    getattribute $P110, $P109, "current_namespace"
    $P111 = $P110."get_name"()
    set $P1377, $P111
.annotate 'line', 886
    set $P1379, $P1377
    unless_null $P1379, vivify_410
    $P1379 = root_new ['parrot';'ResizablePMCArray']
  vivify_410:
    $P1379."shift"()
.annotate 'line', 887
    find_lex $P109, "$block"
    unless_null $P109, vivify_411
    new $P109, "Undef"
  vivify_411:
    set $P1380, $P1377
    unless_null $P1380, vivify_412
    $P1380 = root_new ['parrot';'ResizablePMCArray']
  vivify_412:
    $P109."namespace"($P1380)
.annotate 'line', 888
    find_lex $P110, "$outer_ctx"
    unless_null $P110, vivify_413
    new $P110, "Undef"
  vivify_413:
    $P111 = $P110."lexpad_full"()
    defined $I101, $P111
    unless $I101, for_undef_414
    iter $P109, $P111
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop1384_handler
    push_eh $P113
  loop1384_test:
    unless $P109, loop1384_done
    shift $P112, $P109
  loop1384_redo:
    .const 'Sub' $P1382 = "270_1338064439.457" 
    capture_lex $P1382
    $P1382($P112)
  loop1384_next:
    goto loop1384_test
  loop1384_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop1384_next
    eq $P114, .CONTROL_LOOP_REDO, loop1384_redo
  loop1384_done:
    pop_eh 
  for_undef_414:
.annotate 'line', 884
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "_block1381"  :anon :subid("270_1338064439.457") :outer("269_1338064439.457")
    .param pmc param_1383
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 888
    .lex "$_", param_1383
.annotate 'line', 889
    find_lex $P113, "$block"
    unless_null $P113, vivify_415
    new $P113, "Undef"
  vivify_415:
    find_lex $P114, "$_"
    unless_null $P114, vivify_416
    new $P114, "Undef"
  vivify_416:
    $P115 = $P114."key"()
    find_lex $P116, "$_"
    unless_null $P116, vivify_417
    new $P116, "Undef"
  vivify_417:
    $P117 = $P116."value"()
    $P118 = $P113."symbol"($P115, "lexical" :named("scope"), $P117 :named("value"))
.annotate 'line', 888
    .return ($P118)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.include "except_types.pasm"
.sub "EXPR" :anon :subid("73_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1388
    .param pmc param_1389
    .param pmc param_1390 :optional
    .param int has_param_1390 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 895
    .const 'Sub' $P1422 = "272_1338064439.457" 
    capture_lex $P1422
    .const 'Sub' $P1414 = "271_1338064439.457" 
    capture_lex $P1414
    new $P1387, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1387, control_1386
    push_eh $P1387
    .lex "self", param_1388
    .lex "$/", param_1389
    if has_param_1390, optparam_418
    new $P106, "Undef"
    set param_1390, $P106
  optparam_418:
    .lex "$key", param_1390
.annotate 'line', 897
    new $P107, "Undef"
    set $P1391, $P107
    .lex "$past", $P1391
.annotate 'line', 896
    set $P108, param_1390
    unless_null $P108, vivify_419
    new $P108, "Undef"
  vivify_419:
    if $P108, unless_1392_end
    new $P109, "Exception"
    set $P109['type'], .CONTROL_RETURN
    new $P110, "Float"
    assign $P110, 0
    setattribute $P109, 'payload', $P110
    throw $P109
  unless_1392_end:
.annotate 'line', 897
    set $P108, param_1389
    unless_null $P108, vivify_420
    new $P108, "Undef"
  vivify_420:
    $P109 = $P108."ast"()
    set $P1393, $P109
    defined $I1395, $P1393
    if $I1395, default_1394
    set $P1396, param_1389
    unless_null $P1396, vivify_421
    $P1396 = root_new ['parrot';'Hash']
  vivify_421:
    set $P110, $P1396["OPER"]
    unless_null $P110, vivify_422
    new $P110, "Undef"
  vivify_422:
    $P111 = $P110."ast"()
    set $P1393, $P111
  default_1394:
    set $P1391, $P1393
.annotate 'line', 898
    set $P108, $P1391
    unless_null $P108, vivify_423
    new $P108, "Undef"
  vivify_423:
    if $P108, unless_1397_end
.annotate 'line', 899
    get_hll_global $P109, "GLOBAL"
    nqp_get_package_through_who $P110, $P109, "PAST"
    get_who $P111, $P110
    set $P112, $P111["Op"]
    set $P113, param_1389
    unless_null $P113, vivify_424
    new $P113, "Undef"
  vivify_424:
    $P114 = $P112."new"($P113 :named("node"))
    set $P1391, $P114
.annotate 'line', 900
    set $P1399, param_1389
    unless_null $P1399, vivify_425
    $P1399 = root_new ['parrot';'Hash']
  vivify_425:
    set $P1400, $P1399["OPER"]
    unless_null $P1400, vivify_426
    $P1400 = root_new ['parrot';'Hash']
  vivify_426:
    set $P1401, $P1400["O"]
    unless_null $P1401, vivify_427
    $P1401 = root_new ['parrot';'Hash']
  vivify_427:
    set $P109, $P1401["pasttype"]
    unless_null $P109, vivify_428
    new $P109, "Undef"
  vivify_428:
    if $P109, if_1398
.annotate 'line', 901
    set $P1406, param_1389
    unless_null $P1406, vivify_429
    $P1406 = root_new ['parrot';'Hash']
  vivify_429:
    set $P1407, $P1406["OPER"]
    unless_null $P1407, vivify_430
    $P1407 = root_new ['parrot';'Hash']
  vivify_430:
    set $P1408, $P1407["O"]
    unless_null $P1408, vivify_431
    $P1408 = root_new ['parrot';'Hash']
  vivify_431:
    set $P110, $P1408["pirop"]
    unless_null $P110, vivify_432
    new $P110, "Undef"
  vivify_432:
    unless $P110, if_1405_end
    set $P111, $P1391
    unless_null $P111, vivify_433
    new $P111, "Undef"
  vivify_433:
    set $P1409, param_1389
    unless_null $P1409, vivify_434
    $P1409 = root_new ['parrot';'Hash']
  vivify_434:
    set $P1410, $P1409["OPER"]
    unless_null $P1410, vivify_435
    $P1410 = root_new ['parrot';'Hash']
  vivify_435:
    set $P1411, $P1410["O"]
    unless_null $P1411, vivify_436
    $P1411 = root_new ['parrot';'Hash']
  vivify_436:
    set $P112, $P1411["pirop"]
    unless_null $P112, vivify_437
    new $P112, "Undef"
  vivify_437:
    set $S100, $P112
    $P111."pirop"($S100)
  if_1405_end:
    goto if_1398_end
  if_1398:
.annotate 'line', 900
    set $P110, $P1391
    unless_null $P110, vivify_438
    new $P110, "Undef"
  vivify_438:
    set $P1402, param_1389
    unless_null $P1402, vivify_439
    $P1402 = root_new ['parrot';'Hash']
  vivify_439:
    set $P1403, $P1402["OPER"]
    unless_null $P1403, vivify_440
    $P1403 = root_new ['parrot';'Hash']
  vivify_440:
    set $P1404, $P1403["O"]
    unless_null $P1404, vivify_441
    $P1404 = root_new ['parrot';'Hash']
  vivify_441:
    set $P111, $P1404["pasttype"]
    unless_null $P111, vivify_442
    new $P111, "Undef"
  vivify_442:
    set $S100, $P111
    $P110."pasttype"($S100)
  if_1398_end:
.annotate 'line', 902
    set $P109, $P1391
    unless_null $P109, vivify_443
    new $P109, "Undef"
  vivify_443:
    $P110 = $P109."name"()
    if $P110, unless_1412_end
    .const 'Sub' $P1414 = "271_1338064439.457" 
    capture_lex $P1414
    $P1414()
  unless_1412_end:
  unless_1397_end:
.annotate 'line', 908
    set $P108, param_1390
    unless_null $P108, vivify_451
    new $P108, "Undef"
  vivify_451:
    set $S100, $P108
    iseq $I100, $S100, "POSTFIX"
    if $I100, if_1419
.annotate 'line', 910
    set $P110, param_1389
    unless_null $P110, vivify_452
    new $P110, "Undef"
  vivify_452:
    $P111 = $P110."list"()
    defined $I101, $P111
    unless $I101, for_undef_453
    iter $P109, $P111
    new $P114, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P114, loop1425_handler
    push_eh $P114
  loop1425_test:
    unless $P109, loop1425_done
    shift $P112, $P109
  loop1425_redo:
    .const 'Sub' $P1422 = "272_1338064439.457" 
    capture_lex $P1422
    $P1422($P112)
  loop1425_next:
    goto loop1425_test
  loop1425_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P115, exception, 'type'
    eq $P115, .CONTROL_LOOP_NEXT, loop1425_next
    eq $P115, .CONTROL_LOOP_REDO, loop1425_redo
  loop1425_done:
    pop_eh 
  for_undef_453:
.annotate 'line', 909
    goto if_1419_end
  if_1419:
.annotate 'line', 908
    set $P109, $P1391
    unless_null $P109, vivify_457
    new $P109, "Undef"
  vivify_457:
    set $P1420, param_1389
    unless_null $P1420, vivify_458
    $P1420 = root_new ['parrot';'ResizablePMCArray']
  vivify_458:
    set $P110, $P1420[0]
    unless_null $P110, vivify_459
    new $P110, "Undef"
  vivify_459:
    $P111 = $P110."ast"()
    $P109."unshift"($P111)
  if_1419_end:
.annotate 'line', 912
    set $P108, param_1389
    set $P109, $P1391
    unless_null $P109, vivify_460
    new $P109, "Undef"
  vivify_460:
    $P110 = $P108."!make"($P109)
.annotate 'line', 895
    .return ($P110)
  control_1386:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P108, exception, "payload"
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "_block1413"  :anon :subid("271_1338064439.457") :outer("73_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 904
    new $P111, "Undef"
    set $P1415, $P111
    .lex "$name", $P1415
.annotate 'line', 903
    find_lex $P112, "$key"
    unless_null $P112, vivify_444
    new $P112, "Undef"
  vivify_444:
    set $S100, $P112
    iseq $I100, $S100, "LIST"
    unless $I100, if_1416_end
    new $P113, "String"
    assign $P113, "infix"
    store_lex "$key", $P113
  if_1416_end:
.annotate 'line', 904
    find_lex $P112, "$key"
    unless_null $P112, vivify_445
    new $P112, "Undef"
  vivify_445:
    set $S100, $P112
    downcase $S101, $S100
    new $P113, 'String'
    set $P113, $S101
    concat $P114, $P113, ":<"
    find_lex $P1417, "$/"
    unless_null $P1417, vivify_446
    $P1417 = root_new ['parrot';'Hash']
  vivify_446:
    set $P1418, $P1417["OPER"]
    unless_null $P1418, vivify_447
    $P1418 = root_new ['parrot';'Hash']
  vivify_447:
    set $P115, $P1418["sym"]
    unless_null $P115, vivify_448
    new $P115, "Undef"
  vivify_448:
    concat $P116, $P114, $P115
    concat $P117, $P116, ">"
    set $P1415, $P117
.annotate 'line', 905
    find_lex $P112, "$past"
    unless_null $P112, vivify_449
    new $P112, "Undef"
  vivify_449:
    new $P113, "String"
    assign $P113, "&"
    set $P114, $P1415
    unless_null $P114, vivify_450
    new $P114, "Undef"
  vivify_450:
    concat $P115, $P113, $P114
    $P116 = $P112."name"($P115)
.annotate 'line', 902
    .return ($P116)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "_block1421"  :anon :subid("272_1338064439.457") :outer("73_1338064439.457")
    .param pmc param_1423
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 910
    .lex "$_", param_1423
    find_lex $P114, "$_"
    unless_null $P114, vivify_454
    new $P114, "Undef"
  vivify_454:
    $P115 = $P114."ast"()
    defined $I102, $P115
    if $I102, if_1424
    new $P113, 'Integer'
    set $P113, $I102
    goto if_1424_end
  if_1424:
    find_lex $P116, "$past"
    unless_null $P116, vivify_455
    new $P116, "Undef"
  vivify_455:
    find_lex $P117, "$_"
    unless_null $P117, vivify_456
    new $P117, "Undef"
  vivify_456:
    $P118 = $P117."ast"()
    $P119 = $P116."push"($P118)
    set $P113, $P119
  if_1424_end:
    .return ($P113)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "term:sym<circumfix>" :anon :subid("74_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1427
    .param pmc param_1428
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 915
    .lex "self", param_1427
    .lex "$/", param_1428
    set $P106, param_1428
    set $P1429, param_1428
    unless_null $P1429, vivify_461
    $P1429 = root_new ['parrot';'Hash']
  vivify_461:
    set $P107, $P1429["circumfix"]
    unless_null $P107, vivify_462
    new $P107, "Undef"
  vivify_462:
    $P108 = $P107."ast"()
    $P109 = $P106."!make"($P108)
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "termish" :anon :subid("75_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1431
    .param pmc param_1432
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 917
    .lex "self", param_1431
    .lex "$/", param_1432
    set $P106, param_1432
    set $P1433, param_1432
    unless_null $P1433, vivify_463
    $P1433 = root_new ['parrot';'Hash']
  vivify_463:
    set $P107, $P1433["term"]
    unless_null $P107, vivify_464
    new $P107, "Undef"
  vivify_464:
    $P108 = $P107."ast"()
    $P109 = $P106."!make"($P108)
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "nullterm" :anon :subid("76_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1435
    .param pmc param_1436
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 918
    .lex "self", param_1435
    .lex "$/", param_1436
    set $P106, param_1436
    new $P107, "Undef"
    $P108 = $P106."!make"($P107)
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "nullterm_alt" :anon :subid("77_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1438
    .param pmc param_1439
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 919
    .lex "self", param_1438
    .lex "$/", param_1439
    set $P106, param_1439
    set $P1440, param_1439
    unless_null $P1440, vivify_465
    $P1440 = root_new ['parrot';'Hash']
  vivify_465:
    set $P107, $P1440["term"]
    unless_null $P107, vivify_466
    new $P107, "Undef"
  vivify_466:
    $P108 = $P107."ast"()
    $P109 = $P106."!make"($P108)
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "integer" :anon :subid("78_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1442
    .param pmc param_1443
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 921
    .lex "self", param_1442
    .lex "$/", param_1443
    set $P106, param_1443
    set $P1444, param_1443
    unless_null $P1444, vivify_467
    $P1444 = root_new ['parrot';'Hash']
  vivify_467:
    set $P107, $P1444["VALUE"]
    unless_null $P107, vivify_468
    new $P107, "Undef"
  vivify_468:
    $P108 = $P107."ast"()
    $P109 = $P106."!make"($P108)
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "dec_number" :anon :subid("79_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1446
    .param pmc param_1447
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 923
    .lex "self", param_1446
    .lex "$/", param_1447
    set $P106, param_1447
    set $P107, param_1447
    unless_null $P107, vivify_469
    new $P107, "Undef"
  vivify_469:
    set $N100, $P107
    $P108 = $P106."!make"($N100)
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "decint" :anon :subid("80_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1449
    .param pmc param_1450
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 925
    .lex "self", param_1449
    .lex "$/", param_1450
    set $P106, param_1450
    set $P107, param_1450
    unless_null $P107, vivify_470
    new $P107, "Undef"
  vivify_470:
    $P108 = "string_to_int"($P107, 10)
    $P109 = $P106."!make"($P108)
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "hexint" :anon :subid("81_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1452
    .param pmc param_1453
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 926
    .lex "self", param_1452
    .lex "$/", param_1453
    set $P106, param_1453
    set $P107, param_1453
    unless_null $P107, vivify_471
    new $P107, "Undef"
  vivify_471:
    $P108 = "string_to_int"($P107, 16)
    $P109 = $P106."!make"($P108)
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "octint" :anon :subid("82_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1455
    .param pmc param_1456
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 927
    .lex "self", param_1455
    .lex "$/", param_1456
    set $P106, param_1456
    set $P107, param_1456
    unless_null $P107, vivify_472
    new $P107, "Undef"
  vivify_472:
    $P108 = "string_to_int"($P107, 8)
    $P109 = $P106."!make"($P108)
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "binint" :anon :subid("83_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1458
    .param pmc param_1459
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 928
    .lex "self", param_1458
    .lex "$/", param_1459
    set $P106, param_1459
    set $P107, param_1459
    unless_null $P107, vivify_473
    new $P107, "Undef"
  vivify_473:
    $P108 = "string_to_int"($P107, 2)
    $P109 = $P106."!make"($P108)
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_EXPR" :anon :subid("84_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1461
    .param pmc param_1462
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 930
    .const 'Sub' $P1468 = "273_1338064439.457" 
    capture_lex $P1468
    .lex "self", param_1461
    .lex "$/", param_1462
.annotate 'line', 931
    new $P106, "Undef"
    set $P1463, $P106
    .lex "$past", $P1463
    set $P1464, param_1462
    unless_null $P1464, vivify_474
    $P1464 = root_new ['parrot';'Hash']
  vivify_474:
    set $P107, $P1464["quote_delimited"]
    unless_null $P107, vivify_475
    new $P107, "Undef"
  vivify_475:
    $P108 = $P107."ast"()
    set $P1463, $P108
.annotate 'line', 932
    find_dynamic_lex $P109, "%*QUOTEMOD"
    unless_null $P109, vivify_476
    get_hll_global $P107, "GLOBAL"
    get_who $P108, $P107
    set $P109, $P108["%QUOTEMOD"]
    unless_null $P109, vivify_477
    die "Contextual %*QUOTEMOD not found"
  vivify_477:
  vivify_476:
    set $P110, $P109["w"]
    unless_null $P110, vivify_478
    new $P110, "Undef"
  vivify_478:
    unless $P110, if_1465_end
.annotate 'line', 933
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "PAST"
    get_who $P113, $P112
    set $P114, $P113["Node"]
    set $P115, $P1463
    unless_null $P115, vivify_479
    new $P115, "Undef"
  vivify_479:
    $P116 = $P114."ACCEPTS"($P115)
    if $P116, if_1466
.annotate 'line', 936
    .const 'Sub' $P1468 = "273_1338064439.457" 
    capture_lex $P1468
    $P1468()
    goto if_1466_end
  if_1466:
.annotate 'line', 934
    set $P117, param_1462
    unless_null $P117, vivify_490
    new $P117, "Undef"
  vivify_490:
    $P118 = $P117."CURSOR"()
    $P118."panic"("Can't form :w list from non-constant strings (yet)")
  if_1466_end:
  if_1465_end:
.annotate 'line', 947
    get_hll_global $P107, "GLOBAL"
    nqp_get_package_through_who $P108, $P107, "PAST"
    get_who $P109, $P108
    set $P110, $P109["Node"]
    set $P111, $P1463
    unless_null $P111, vivify_491
    new $P111, "Undef"
  vivify_491:
    $P112 = $P110."ACCEPTS"($P111)
    isfalse $I100, $P112
    unless $I100, if_1479_end
.annotate 'line', 948
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Val"]
    set $P117, $P1463
    unless_null $P117, vivify_492
    new $P117, "Undef"
  vivify_492:
    set $S100, $P117
    $P118 = $P116."new"($S100 :named("value"))
    set $P1463, $P118
  if_1479_end:
.annotate 'line', 950
    set $P107, param_1462
    set $P108, $P1463
    unless_null $P108, vivify_493
    new $P108, "Undef"
  vivify_493:
    $P109 = $P107."!make"($P108)
.annotate 'line', 930
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.include "except_types.pasm"
.sub "_block1467"  :anon :subid("273_1338064439.457") :outer("84_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 936
    .const 'Sub' $P1475 = "274_1338064439.457" 
    capture_lex $P1475
.annotate 'line', 937
    $P1470 = root_new ['parrot';'ResizablePMCArray']
    set $P1469, $P1470
    .lex "@words", $P1469
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "HLL"
    nqp_get_package_through_who $P119, $P118, "Grammar"
    get_who $P120, $P119
    set $P121, $P120["split_words"]
    find_lex $P122, "$/"
    unless_null $P122, vivify_480
    new $P122, "Undef"
  vivify_480:
    find_lex $P123, "$past"
    unless_null $P123, vivify_481
    new $P123, "Undef"
  vivify_481:
    $P124 = $P121($P122, $P123)
    set $P1469, $P124
.annotate 'line', 938
    set $P1472, $P1469
    unless_null $P1472, vivify_482
    $P1472 = root_new ['parrot';'ResizablePMCArray']
  vivify_482:
    set $N100, $P1472
    set $N101, 1
    isne $I100, $N100, $N101
    if $I100, if_1471
.annotate 'line', 943
    set $P1478, $P1469
    unless_null $P1478, vivify_483
    $P1478 = root_new ['parrot';'ResizablePMCArray']
  vivify_483:
    set $P119, $P1478[0]
    unless_null $P119, vivify_484
    new $P119, "Undef"
  vivify_484:
    set $S100, $P119
    new $P120, 'String'
    set $P120, $S100
    store_lex "$past", $P120
.annotate 'line', 942
    set $P117, $P120
.annotate 'line', 938
    goto if_1471_end
  if_1471:
.annotate 'line', 939
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P120, $P119
    set $P121, $P120["Op"]
    find_lex $P122, "$/"
    unless_null $P122, vivify_485
    new $P122, "Undef"
  vivify_485:
    $P123 = $P121."new"("list" :named("pasttype"), $P122 :named("node"))
    store_lex "$past", $P123
.annotate 'line', 940
    set $P1473, $P1469
    unless_null $P1473, vivify_486
    $P1473 = root_new ['parrot';'ResizablePMCArray']
  vivify_486:
    defined $I101, $P1473
    unless $I101, for_undef_487
    iter $P118, $P1473
    new $P120, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P120, loop1477_handler
    push_eh $P120
  loop1477_test:
    unless $P118, loop1477_done
    shift $P119, $P118
  loop1477_redo:
    .const 'Sub' $P1475 = "274_1338064439.457" 
    capture_lex $P1475
    $P1475($P119)
  loop1477_next:
    goto loop1477_test
  loop1477_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P121, exception, 'type'
    eq $P121, .CONTROL_LOOP_NEXT, loop1477_next
    eq $P121, .CONTROL_LOOP_REDO, loop1477_redo
  loop1477_done:
    pop_eh 
  for_undef_487:
.annotate 'line', 938
    set $P117, $P118
  if_1471_end:
.annotate 'line', 936
    .return ($P117)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "_block1474"  :anon :subid("274_1338064439.457") :outer("273_1338064439.457")
    .param pmc param_1476
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 940
    .lex "$_", param_1476
    find_lex $P120, "$past"
    unless_null $P120, vivify_488
    new $P120, "Undef"
  vivify_488:
    find_lex $P121, "$_"
    unless_null $P121, vivify_489
    new $P121, "Undef"
  vivify_489:
    $P122 = $P120."push"($P121)
    .return ($P122)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.include "except_types.pasm"
.sub "quote_delimited" :anon :subid("85_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1481
    .param pmc param_1482
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 953
    .const 'Sub' $P1490 = "275_1338064439.457" 
    capture_lex $P1490
    .lex "self", param_1481
    .lex "$/", param_1482
.annotate 'line', 954
    $P1484 = root_new ['parrot';'ResizablePMCArray']
    set $P1483, $P1484
    .lex "@parts", $P1483
.annotate 'line', 955
    new $P106, "Undef"
    set $P1485, $P106
    .lex "$lastlit", $P1485
.annotate 'line', 971
    new $P107, "Undef"
    set $P1486, $P107
    .lex "$past", $P1486
.annotate 'line', 953
    set $P1487, $P1483
    unless_null $P1487, vivify_494
    $P1487 = root_new ['parrot';'ResizablePMCArray']
  vivify_494:
.annotate 'line', 955
    new $P108, "String"
    assign $P108, ""
    set $P1485, $P108
.annotate 'line', 956
    set $P1488, param_1482
    unless_null $P1488, vivify_495
    $P1488 = root_new ['parrot';'Hash']
  vivify_495:
    set $P109, $P1488["quote_atom"]
    unless_null $P109, vivify_496
    new $P109, "Undef"
  vivify_496:
    defined $I100, $P109
    unless $I100, for_undef_497
    iter $P108, $P109
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop1498_handler
    push_eh $P113
  loop1498_test:
    unless $P108, loop1498_done
    shift $P110, $P108
  loop1498_redo:
    .const 'Sub' $P1490 = "275_1338064439.457" 
    capture_lex $P1490
    $P1490($P110)
  loop1498_next:
    goto loop1498_test
  loop1498_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop1498_next
    eq $P114, .CONTROL_LOOP_REDO, loop1498_redo
  loop1498_done:
    pop_eh 
  for_undef_497:
.annotate 'line', 970
    set $P108, $P1485
    unless_null $P108, vivify_510
    new $P108, "Undef"
  vivify_510:
    set $S100, $P108
    isgt $I100, $S100, ""
    unless $I100, if_1499_end
    set $P1500, $P1483
    unless_null $P1500, vivify_511
    $P1500 = root_new ['parrot';'ResizablePMCArray']
  vivify_511:
    set $P109, $P1485
    unless_null $P109, vivify_512
    new $P109, "Undef"
  vivify_512:
    $P1500."push"($P109)
  if_1499_end:
.annotate 'line', 971
    set $P1502, $P1483
    unless_null $P1502, vivify_513
    $P1502 = root_new ['parrot';'ResizablePMCArray']
  vivify_513:
    if $P1502, if_1501
    new $P110, "String"
    assign $P110, ""
    set $P108, $P110
    goto if_1501_end
  if_1501:
    set $P1503, $P1483
    unless_null $P1503, vivify_514
    $P1503 = root_new ['parrot';'ResizablePMCArray']
  vivify_514:
    $P109 = $P1503."shift"()
    set $P108, $P109
  if_1501_end:
    set $P1486, $P108
.annotate 'line', 972
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop1506_handler
    push_eh $P108
  loop1506_test:
    set $P1504, $P1483
    unless_null $P1504, vivify_515
    $P1504 = root_new ['parrot';'ResizablePMCArray']
  vivify_515:
    unless $P1504, loop1506_done
  loop1506_redo:
.annotate 'line', 973
    get_hll_global $P108, "GLOBAL"
    nqp_get_package_through_who $P109, $P108, "PAST"
    get_who $P110, $P109
    set $P111, $P110["Op"]
    set $P112, $P1486
    unless_null $P112, vivify_516
    new $P112, "Undef"
  vivify_516:
    set $P1505, $P1483
    unless_null $P1505, vivify_517
    $P1505 = root_new ['parrot';'ResizablePMCArray']
  vivify_517:
    $P113 = $P1505."shift"()
    $P114 = $P111."new"($P112, $P113, "concat" :named("pirop"))
    set $P1486, $P114
  loop1506_next:
.annotate 'line', 972
    goto loop1506_test
  loop1506_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop1506_next
    eq $P109, .CONTROL_LOOP_REDO, loop1506_redo
  loop1506_done:
    pop_eh 
.annotate 'line', 975
    set $P108, param_1482
    set $P109, $P1486
    unless_null $P109, vivify_518
    new $P109, "Undef"
  vivify_518:
    $P110 = $P108."!make"($P109)
.annotate 'line', 953
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "_block1489"  :anon :subid("275_1338064439.457") :outer("85_1338064439.457")
    .param pmc param_1492
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 957
    new $P111, "Undef"
    set $P1491, $P111
    .lex "$ast", $P1491
    .lex "$_", param_1492
    find_lex $P112, "$_"
    unless_null $P112, vivify_498
    new $P112, "Undef"
  vivify_498:
    $P113 = $P112."ast"()
    set $P1491, $P113
.annotate 'line', 958
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Node"]
    set $P117, $P1491
    unless_null $P117, vivify_499
    new $P117, "Undef"
  vivify_499:
    $P118 = $P116."ACCEPTS"($P117)
    isfalse $I101, $P118
    if $I101, if_1493
.annotate 'line', 961
    set $P120, $P1491
    unless_null $P120, vivify_500
    new $P120, "Undef"
  vivify_500:
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Val"]
    $P126 = $P120."isa"($P125)
    if $P126, if_1494
.annotate 'line', 965
    find_lex $P127, "$lastlit"
    unless_null $P127, vivify_501
    new $P127, "Undef"
  vivify_501:
    set $S100, $P127
    isgt $I102, $S100, ""
    unless $I102, if_1495_end
    find_lex $P1496, "@parts"
    unless_null $P1496, vivify_502
    $P1496 = root_new ['parrot';'ResizablePMCArray']
  vivify_502:
    find_lex $P128, "$lastlit"
    unless_null $P128, vivify_503
    new $P128, "Undef"
  vivify_503:
    $P1496."push"($P128)
  if_1495_end:
.annotate 'line', 966
    find_lex $P1497, "@parts"
    unless_null $P1497, vivify_504
    $P1497 = root_new ['parrot';'ResizablePMCArray']
  vivify_504:
    set $P127, $P1491
    unless_null $P127, vivify_505
    new $P127, "Undef"
  vivify_505:
    $P1497."push"($P127)
.annotate 'line', 967
    new $P127, "String"
    assign $P127, ""
    store_lex "$lastlit", $P127
.annotate 'line', 964
    set $P119, $P127
.annotate 'line', 961
    goto if_1494_end
  if_1494:
.annotate 'line', 962
    find_lex $P127, "$lastlit"
    unless_null $P127, vivify_506
    new $P127, "Undef"
  vivify_506:
    set $P128, $P1491
    unless_null $P128, vivify_507
    new $P128, "Undef"
  vivify_507:
    $S100 = $P128."value"()
    concat $P129, $P127, $S100
    store_lex "$lastlit", $P129
.annotate 'line', 961
    set $P119, $P129
  if_1494_end:
    set $P112, $P119
.annotate 'line', 958
    goto if_1493_end
  if_1493:
.annotate 'line', 959
    find_lex $P119, "$lastlit"
    unless_null $P119, vivify_508
    new $P119, "Undef"
  vivify_508:
    set $P120, $P1491
    unless_null $P120, vivify_509
    new $P120, "Undef"
  vivify_509:
    concat $P121, $P119, $P120
    store_lex "$lastlit", $P121
.annotate 'line', 958
    set $P112, $P121
  if_1493_end:
.annotate 'line', 956
    .return ($P112)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_atom" :anon :subid("86_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1508
    .param pmc param_1509
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 978
    .lex "self", param_1508
    .lex "$/", param_1509
.annotate 'line', 979
    set $P106, param_1509
    set $P1511, param_1509
    unless_null $P1511, vivify_519
    $P1511 = root_new ['parrot';'Hash']
  vivify_519:
    set $P108, $P1511["quote_escape"]
    unless_null $P108, vivify_520
    new $P108, "Undef"
  vivify_520:
    if $P108, if_1510
    set $P111, param_1509
    unless_null $P111, vivify_521
    new $P111, "Undef"
  vivify_521:
    set $S100, $P111
    new $P107, 'String'
    set $P107, $S100
    goto if_1510_end
  if_1510:
    set $P1512, param_1509
    unless_null $P1512, vivify_522
    $P1512 = root_new ['parrot';'Hash']
  vivify_522:
    set $P109, $P1512["quote_escape"]
    unless_null $P109, vivify_523
    new $P109, "Undef"
  vivify_523:
    $P110 = $P109."ast"()
    set $P107, $P110
  if_1510_end:
    $P112 = $P106."!make"($P107)
.annotate 'line', 978
    .return ($P112)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<backslash>" :anon :subid("87_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1514
    .param pmc param_1515
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 982
    .lex "self", param_1514
    .lex "$/", param_1515
    set $P106, param_1515
    $P107 = $P106."!make"("\\")
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<stopper>" :anon :subid("88_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1517
    .param pmc param_1518
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 983
    .lex "self", param_1517
    .lex "$/", param_1518
    set $P106, param_1518
    set $P1519, param_1518
    unless_null $P1519, vivify_524
    $P1519 = root_new ['parrot';'Hash']
  vivify_524:
    set $P107, $P1519["stopper"]
    unless_null $P107, vivify_525
    new $P107, "Undef"
  vivify_525:
    set $S100, $P107
    $P108 = $P106."!make"($S100)
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<bs>" :anon :subid("89_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1521
    .param pmc param_1522
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 985
    .lex "self", param_1521
    .lex "$/", param_1522
    set $P106, param_1522
    $P107 = $P106."!make"("\b")
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<nl>" :anon :subid("90_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1524
    .param pmc param_1525
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 986
    .lex "self", param_1524
    .lex "$/", param_1525
    set $P106, param_1525
    $P107 = $P106."!make"("\n")
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<cr>" :anon :subid("91_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1527
    .param pmc param_1528
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 987
    .lex "self", param_1527
    .lex "$/", param_1528
    set $P106, param_1528
    $P107 = $P106."!make"("\r")
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<tab>" :anon :subid("92_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1530
    .param pmc param_1531
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 988
    .lex "self", param_1530
    .lex "$/", param_1531
    set $P106, param_1531
    $P107 = $P106."!make"("\t")
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<ff>" :anon :subid("93_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1533
    .param pmc param_1534
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 989
    .lex "self", param_1533
    .lex "$/", param_1534
    set $P106, param_1534
    $P107 = $P106."!make"("\f")
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<esc>" :anon :subid("94_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1536
    .param pmc param_1537
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 990
    .lex "self", param_1536
    .lex "$/", param_1537
    set $P106, param_1537
    $P107 = $P106."!make"("\e")
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<hex>" :anon :subid("95_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1539
    .param pmc param_1540
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 992
    .lex "self", param_1539
    .lex "$/", param_1540
.annotate 'line', 993
    set $P106, param_1540
    set $P107, param_1539
    nqp_decontainerize $P108, $P107
    set $P1542, param_1540
    unless_null $P1542, vivify_526
    $P1542 = root_new ['parrot';'Hash']
  vivify_526:
    set $P110, $P1542["hexint"]
    unless_null $P110, vivify_527
    new $P110, "Undef"
  vivify_527:
    if $P110, if_1541
    set $P1544, param_1540
    unless_null $P1544, vivify_528
    $P1544 = root_new ['parrot';'Hash']
  vivify_528:
    set $P1545, $P1544["hexints"]
    unless_null $P1545, vivify_529
    $P1545 = root_new ['parrot';'Hash']
  vivify_529:
    set $P112, $P1545["hexint"]
    unless_null $P112, vivify_530
    new $P112, "Undef"
  vivify_530:
    set $P109, $P112
    goto if_1541_end
  if_1541:
    set $P1543, param_1540
    unless_null $P1543, vivify_531
    $P1543 = root_new ['parrot';'Hash']
  vivify_531:
    set $P111, $P1543["hexint"]
    unless_null $P111, vivify_532
    new $P111, "Undef"
  vivify_532:
    set $P109, $P111
  if_1541_end:
    $P113 = $P108."ints_to_string"($P109)
    $P114 = $P106."!make"($P113)
.annotate 'line', 992
    .return ($P114)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<oct>" :anon :subid("96_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1547
    .param pmc param_1548
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 996
    .lex "self", param_1547
    .lex "$/", param_1548
.annotate 'line', 997
    set $P106, param_1548
    set $P107, param_1547
    nqp_decontainerize $P108, $P107
    set $P1550, param_1548
    unless_null $P1550, vivify_533
    $P1550 = root_new ['parrot';'Hash']
  vivify_533:
    set $P110, $P1550["octint"]
    unless_null $P110, vivify_534
    new $P110, "Undef"
  vivify_534:
    if $P110, if_1549
    set $P1552, param_1548
    unless_null $P1552, vivify_535
    $P1552 = root_new ['parrot';'Hash']
  vivify_535:
    set $P1553, $P1552["octints"]
    unless_null $P1553, vivify_536
    $P1553 = root_new ['parrot';'Hash']
  vivify_536:
    set $P112, $P1553["octint"]
    unless_null $P112, vivify_537
    new $P112, "Undef"
  vivify_537:
    set $P109, $P112
    goto if_1549_end
  if_1549:
    set $P1551, param_1548
    unless_null $P1551, vivify_538
    $P1551 = root_new ['parrot';'Hash']
  vivify_538:
    set $P111, $P1551["octint"]
    unless_null $P111, vivify_539
    new $P111, "Undef"
  vivify_539:
    set $P109, $P111
  if_1549_end:
    $P113 = $P108."ints_to_string"($P109)
    $P114 = $P106."!make"($P113)
.annotate 'line', 996
    .return ($P114)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<chr>" :anon :subid("97_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1555
    .param pmc param_1556
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1000
    .lex "self", param_1555
    .lex "$/", param_1556
.annotate 'line', 1001
    set $P106, param_1556
    set $P1557, param_1556
    unless_null $P1557, vivify_540
    $P1557 = root_new ['parrot';'Hash']
  vivify_540:
    set $P107, $P1557["charspec"]
    unless_null $P107, vivify_541
    new $P107, "Undef"
  vivify_541:
    $P108 = $P107."ast"()
    $P109 = $P106."!make"($P108)
.annotate 'line', 1000
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<0>" :anon :subid("98_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1559
    .param pmc param_1560
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1004
    .lex "self", param_1559
    .lex "$/", param_1560
.annotate 'line', 1005
    set $P106, param_1560
    $P107 = $P106."!make"(unicode:"\x{0}")
.annotate 'line', 1004
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<misc>" :anon :subid("99_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1562
    .param pmc param_1563
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1008
    .lex "self", param_1562
    .lex "$/", param_1563
.annotate 'line', 1009
    set $P106, param_1563
    set $P1565, param_1563
    unless_null $P1565, vivify_542
    $P1565 = root_new ['parrot';'Hash']
  vivify_542:
    set $P108, $P1565["textq"]
    unless_null $P108, vivify_543
    new $P108, "Undef"
  vivify_543:
    if $P108, if_1564
    set $P1567, param_1563
    unless_null $P1567, vivify_544
    $P1567 = root_new ['parrot';'Hash']
  vivify_544:
    set $P112, $P1567["textqq"]
    unless_null $P112, vivify_545
    new $P112, "Undef"
  vivify_545:
    $P113 = $P112."Str"()
    set $P107, $P113
    goto if_1564_end
  if_1564:
    new $P109, "String"
    assign $P109, "\\"
    set $P1566, param_1563
    unless_null $P1566, vivify_546
    $P1566 = root_new ['parrot';'Hash']
  vivify_546:
    set $P110, $P1566["textq"]
    unless_null $P110, vivify_547
    new $P110, "Undef"
  vivify_547:
    $S100 = $P110."Str"()
    concat $P111, $P109, $S100
    set $P107, $P111
  if_1564_end:
    $P114 = $P106."!make"($P107)
.annotate 'line', 1008
    .return ($P114)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "charname" :anon :subid("100_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1569
    .param pmc param_1570
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1012
    .lex "self", param_1569
    .lex "$/", param_1570
.annotate 'line', 1013
    new $P106, "Undef"
    set $P1571, $P106
    .lex "$codepoint", $P1571
.annotate 'line', 1014
    set $P1573, param_1570
    unless_null $P1573, vivify_548
    $P1573 = root_new ['parrot';'Hash']
  vivify_548:
    set $P108, $P1573["integer"]
    unless_null $P108, vivify_549
    new $P108, "Undef"
  vivify_549:
    if $P108, if_1572
.annotate 'line', 1015
    set $P111, param_1570
    unless_null $P111, vivify_550
    new $P111, "Undef"
  vivify_550:
    set $S100, $P111
    find_codepoint $I100, $S100
    new $P107, 'Integer'
    set $P107, $I100
.annotate 'line', 1014
    goto if_1572_end
  if_1572:
    set $P1574, param_1570
    unless_null $P1574, vivify_551
    $P1574 = root_new ['parrot';'Hash']
  vivify_551:
    set $P109, $P1574["integer"]
    unless_null $P109, vivify_552
    new $P109, "Undef"
  vivify_552:
    $P110 = $P109."ast"()
    set $P107, $P110
  if_1572_end:
    set $P1571, $P107
.annotate 'line', 1016
    set $P107, $P1571
    unless_null $P107, vivify_553
    new $P107, "Undef"
  vivify_553:
    set $N100, $P107
    set $N101, 0
    islt $I100, $N100, $N101
    unless $I100, if_1575_end
    set $P108, param_1570
    unless_null $P108, vivify_554
    new $P108, "Undef"
  vivify_554:
    $P109 = $P108."CURSOR"()
    new $P110, 'String'
    set $P110, "Unrecognized character name "
    set $P111, param_1570
    unless_null $P111, vivify_555
    new $P111, "Undef"
  vivify_555:
    concat $P112, $P110, $P111
    $P109."panic"($P112)
  if_1575_end:
.annotate 'line', 1017
    set $P107, param_1570
    set $P108, $P1571
    unless_null $P108, vivify_556
    new $P108, "Undef"
  vivify_556:
    set $I100, $P108
    chr $S100, $I100
    $P109 = $P107."!make"($S100)
.annotate 'line', 1012
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.include "except_types.pasm"
.sub "charnames" :anon :subid("101_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1577
    .param pmc param_1578
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1020
    .const 'Sub' $P1582 = "276_1338064439.457" 
    capture_lex $P1582
    .lex "self", param_1577
    .lex "$/", param_1578
.annotate 'line', 1021
    new $P106, "Undef"
    set $P1579, $P106
    .lex "$str", $P1579
    new $P107, "String"
    assign $P107, ""
    set $P1579, $P107
.annotate 'line', 1022
    set $P1580, param_1578
    unless_null $P1580, vivify_557
    $P1580 = root_new ['parrot';'Hash']
  vivify_557:
    set $P108, $P1580["charname"]
    unless_null $P108, vivify_558
    new $P108, "Undef"
  vivify_558:
    defined $I100, $P108
    unless $I100, for_undef_559
    iter $P107, $P108
    new $P110, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P110, loop1584_handler
    push_eh $P110
  loop1584_test:
    unless $P107, loop1584_done
    shift $P109, $P107
  loop1584_redo:
    .const 'Sub' $P1582 = "276_1338064439.457" 
    capture_lex $P1582
    $P1582($P109)
  loop1584_next:
    goto loop1584_test
  loop1584_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P111, exception, 'type'
    eq $P111, .CONTROL_LOOP_NEXT, loop1584_next
    eq $P111, .CONTROL_LOOP_REDO, loop1584_redo
  loop1584_done:
    pop_eh 
  for_undef_559:
.annotate 'line', 1023
    set $P107, param_1578
    set $P108, $P1579
    unless_null $P108, vivify_562
    new $P108, "Undef"
  vivify_562:
    $P109 = $P107."!make"($P108)
.annotate 'line', 1020
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "_block1581"  :anon :subid("276_1338064439.457") :outer("101_1338064439.457")
    .param pmc param_1583
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1022
    .lex "$_", param_1583
    find_lex $P110, "$str"
    unless_null $P110, vivify_560
    new $P110, "Undef"
  vivify_560:
    find_lex $P111, "$_"
    unless_null $P111, vivify_561
    new $P111, "Undef"
  vivify_561:
    $S100 = $P111."ast"()
    concat $P112, $P110, $S100
    store_lex "$str", $P112
    .return ($P112)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "charspec" :anon :subid("102_1338064439.457") :outer("265_1338064439.457")
    .param pmc param_1586
    .param pmc param_1587
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1026
    .lex "self", param_1586
    .lex "$/", param_1587
.annotate 'line', 1027
    set $P106, param_1587
    set $P1589, param_1587
    unless_null $P1589, vivify_563
    $P1589 = root_new ['parrot';'Hash']
  vivify_563:
    set $P108, $P1589["charnames"]
    unless_null $P108, vivify_564
    new $P108, "Undef"
  vivify_564:
    if $P108, if_1588
    set $P111, param_1587
    unless_null $P111, vivify_565
    new $P111, "Undef"
  vivify_565:
    $I100 = "string_to_int"($P111, 10)
    chr $S100, $I100
    new $P107, 'String'
    set $P107, $S100
    goto if_1588_end
  if_1588:
    set $P1590, param_1587
    unless_null $P1590, vivify_566
    $P1590 = root_new ['parrot';'Hash']
  vivify_566:
    set $P109, $P1590["charnames"]
    unless_null $P109, vivify_567
    new $P109, "Undef"
  vivify_567:
    $P110 = $P109."ast"()
    set $P107, $P110
  if_1588_end:
    $P112 = $P106."!make"($P107)
.annotate 'line', 1026
    .return ($P112)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1592"  :subid("277_1338064439.457") :outer("182_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1040
    .const 'Sub' $P2278 = "146_1338064439.457" 
    capture_lex $P2278
    .const 'Sub' $P2275 = "145_1338064439.457" 
    capture_lex $P2275
    .const 'Sub' $P2270 = "144_1338064439.457" 
    capture_lex $P2270
    .const 'Sub' $P2265 = "143_1338064439.457" 
    capture_lex $P2265
    .const 'Sub' $P2241 = "142_1338064439.457" 
    capture_lex $P2241
    .const 'Sub' $P2207 = "141_1338064439.457" 
    capture_lex $P2207
    .const 'Sub' $P2194 = "140_1338064439.457" 
    capture_lex $P2194
    .const 'Sub' $P2176 = "139_1338064439.457" 
    capture_lex $P2176
    .const 'Sub' $P2164 = "138_1338064439.457" 
    capture_lex $P2164
    .const 'Sub' $P2153 = "137_1338064439.457" 
    capture_lex $P2153
    .const 'Sub' $P2149 = "136_1338064439.457" 
    capture_lex $P2149
    .const 'Sub' $P2137 = "135_1338064439.457" 
    capture_lex $P2137
    .const 'Sub' $P2132 = "134_1338064439.457" 
    capture_lex $P2132
    .const 'Sub' $P2127 = "133_1338064439.457" 
    capture_lex $P2127
    .const 'Sub' $P2125 = "132_1338064439.457" 
    capture_lex $P2125
    .const 'Sub' $P2120 = "131_1338064439.457" 
    capture_lex $P2120
    .const 'Sub' $P2114 = "130_1338064439.457" 
    capture_lex $P2114
    .const 'Sub' $P2081 = "129_1338064439.457" 
    capture_lex $P2081
    .const 'Sub' $P2055 = "128_1338064439.457" 
    capture_lex $P2055
    .const 'Sub' $P2000 = "127_1338064439.457" 
    capture_lex $P2000
    .const 'Sub' $P1973 = "126_1338064439.457" 
    capture_lex $P1973
    .const 'Sub' $P1878 = "125_1338064439.457" 
    capture_lex $P1878
    .const 'Sub' $P1856 = "124_1338064439.457" 
    capture_lex $P1856
    .const 'Sub' $P1848 = "123_1338064439.457" 
    capture_lex $P1848
    .const 'Sub' $P1844 = "122_1338064439.457" 
    capture_lex $P1844
    .const 'Sub' $P1842 = "121_1338064439.457" 
    capture_lex $P1842
    .const 'Sub' $P1840 = "120_1338064439.457" 
    capture_lex $P1840
    .const 'Sub' $P1834 = "119_1338064439.457" 
    capture_lex $P1834
    .const 'Sub' $P1828 = "118_1338064439.457" 
    capture_lex $P1828
    .const 'Sub' $P1820 = "117_1338064439.457" 
    capture_lex $P1820
    .const 'Sub' $P1816 = "116_1338064439.457" 
    capture_lex $P1816
    .const 'Sub' $P1813 = "115_1338064439.457" 
    capture_lex $P1813
    .const 'Sub' $P1790 = "114_1338064439.457" 
    capture_lex $P1790
    .const 'Sub' $P1721 = "113_1338064439.457" 
    capture_lex $P1721
    .const 'Sub' $P1717 = "112_1338064439.457" 
    capture_lex $P1717
    .const 'Sub' $P1687 = "111_1338064439.457" 
    capture_lex $P1687
    .const 'Sub' $P1672 = "110_1338064439.457" 
    capture_lex $P1672
    .const 'Sub' $P1669 = "109_1338064439.457" 
    capture_lex $P1669
    .const 'Sub' $P1666 = "108_1338064439.457" 
    capture_lex $P1666
    .const 'Sub' $P1662 = "107_1338064439.457" 
    capture_lex $P1662
    .const 'Sub' $P1655 = "106_1338064439.457" 
    capture_lex $P1655
    .const 'Sub' $P1613 = "105_1338064439.457" 
    capture_lex $P1613
    .const 'Sub' $P1606 = "104_1338064439.457" 
    capture_lex $P1606
    .const 'Sub' $P1603 = "103_1338064439.457" 
    capture_lex $P1603
    .const 'Sub' $P1595 = "278_1338064439.457" 
    capture_lex $P1595
.annotate 'line', 1076
    .const 'Sub' $P1595 = "278_1338064439.457" 
    newclosure $P1599, $P1595
    set $P1594, $P1599
    .lex "value_type", $P1594
.annotate 'line', 1040
    .lex "$?PACKAGE", $P1600
    .lex "$?CLASS", $P1601
    set $P102, $P1600
    get_who $P103, $P102
    set $P1602, $P103["%parrot_config"]
    unless_null $P1602, vivify_570
    $P1602 = root_new ['parrot';'Hash']
  vivify_570:
    set $P102, $P1594
.annotate 'line', 1725
    .const 'Sub' $P2278 = "146_1338064439.457" 
    newclosure $P2281, $P2278
.annotate 'line', 1040
    .return ($P2281)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "value_type"  :subid("278_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1596
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1076
    .lex "$value", param_1596
.annotate 'line', 1077
    set $P102, param_1596
    unless_null $P102, vivify_568
    new $P102, "Undef"
  vivify_568:
    isa $I100, $P102, "NameSpace"
    if $I100, if_1597
.annotate 'line', 1079
    set $P105, param_1596
    unless_null $P105, vivify_569
    new $P105, "Undef"
  vivify_569:
    isa $I101, $P105, "Sub"
    if $I101, if_1598
    new $P107, "String"
    assign $P107, "var"
    set $P104, $P107
    goto if_1598_end
  if_1598:
    new $P106, "String"
    assign $P106, "sub"
    set $P104, $P106
  if_1598_end:
    set $P101, $P104
.annotate 'line', 1077
    goto if_1597_end
  if_1597:
    new $P103, "String"
    assign $P103, "namespace"
    set $P101, $P103
  if_1597_end:
.annotate 'line', 1076
    .return ($P101)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "new" :anon :subid("103_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1604
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1056
    .lex "self", param_1604
.annotate 'line', 1057
    new $P102, "Undef"
    set $P1605, $P102
    .lex "$obj", $P1605
    set $P103, param_1604
    nqp_decontainerize $P104, $P103
    repr_instance_of $P105, $P104
    set $P1605, $P105
.annotate 'line', 1058
    set $P103, $P1605
    unless_null $P103, vivify_571
    new $P103, "Undef"
  vivify_571:
    $P103."BUILD"()
.annotate 'line', 1056
    set $P103, $P1605
    unless_null $P103, vivify_572
    new $P103, "Undef"
  vivify_572:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "BUILD" :anon :subid("104_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1607
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1062
    .const 'Sub' $P1610 = "279_1338064439.457" 
    capture_lex $P1610
    .lex "self", param_1607
.annotate 'line', 1064
    split $P102, " ", "parse past post pir evalpmc"
    set $P103, param_1607
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_bind_attr_obj $P104, $P105, "@!stages", 0, $P102
.annotate 'line', 1067
    split $P102, " ", "e=s help|h target=s dumper=s trace|t=s encoding=s output|o=s combine version|v show-config stagestats ll-exception rxtrace nqpevent=s profile profile-compile"
    set $P103, param_1607
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_bind_attr_obj $P104, $P105, "@!cmdoptions", 3, $P102
.annotate 'line', 1068
    new $P102, "String"
    assign $P102, "This compiler is based on HLL::Compiler.\n\nOptions:\n"
    set $P103, param_1607
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_bind_attr_obj $P104, $P105, "$!usage", 4, $P102
.annotate 'line', 1069
    set $P103, param_1607
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_get_attr_obj $P1608, $P104, $P105, "@!cmdoptions", 3
    unless_null $P1608, vivify_573
    $P1608 = root_new ['parrot';'ResizablePMCArray']
  vivify_573:
    defined $I100, $P1608
    unless $I100, for_undef_574
    iter $P102, $P1608
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop1612_handler
    push_eh $P107
  loop1612_test:
    unless $P102, loop1612_done
    shift $P106, $P102
  loop1612_redo:
    .const 'Sub' $P1610 = "279_1338064439.457" 
    capture_lex $P1610
    $P1610($P106)
  loop1612_next:
    goto loop1612_test
  loop1612_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop1612_next
    eq $P108, .CONTROL_LOOP_REDO, loop1612_redo
  loop1612_done:
    pop_eh 
  for_undef_574:
.annotate 'line', 1072
    getinterp $P102
    set $P103, $P102[.IGLOBALS_CONFIG_HASH]
    unless_null $P103, vivify_577
    new $P103, "Undef"
  vivify_577:
    find_lex $P104, "$?PACKAGE"
    get_who $P105, $P104
    set $P105["%parrot_config"], $P103
.annotate 'line', 1073
    new $P102, "Hash"
    set $P103, param_1607
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_bind_attr_obj $P104, $P105, "%!config", 7, $P102
.annotate 'line', 1062
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1609"  :anon :subid("279_1338064439.457") :outer("104_1338064439.457")
    .param pmc param_1611
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1069
    .lex "$_", param_1611
.annotate 'line', 1070
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_get_attr_obj $P110, $P108, $P109, "$!usage", 4
    unless_null $P110, vivify_575
    new $P110, "Undef"
  vivify_575:
    new $P111, 'String'
    set $P111, "    "
    find_lex $P112, "$_"
    unless_null $P112, vivify_576
    new $P112, "Undef"
  vivify_576:
    concat $P113, $P111, $P112
    concat $P114, $P113, "\n"
    concat $P115, $P110, $P114
    find_lex $P116, "self"
    nqp_decontainerize $P117, $P116
    nqp_get_sc_object $P118, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_bind_attr_obj $P117, $P118, "$!usage", 4, $P115
.annotate 'line', 1069
    .return ($P115)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "get_exports" :anon :subid("105_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1614
    .param pmc param_1615
    .param pmc param_1617 :slurpy
    .param pmc param_1616 :optional :named("tagset")
    .param int has_param_1616 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1082
    .const 'Sub' $P1648 = "281_1338064439.457" 
    capture_lex $P1648
    .const 'Sub' $P1639 = "280_1338064439.457" 
    capture_lex $P1639
    .lex "self", param_1614
    .lex "$module", param_1615
    if has_param_1616, optparam_578
    new $P102, "Undef"
    set param_1616, $P102
  optparam_578:
    .lex "$tagset", param_1616
    .lex "@symbols", param_1617
.annotate 'line', 1089
    $P1619 = root_new ['parrot';'Hash']
    set $P1618, $P1619
    .lex "%exports", $P1618
.annotate 'line', 1090
    $P1621 = root_new ['parrot';'Hash']
    set $P1620, $P1621
    .lex "%source", $P1620
.annotate 'line', 1084
    set $P103, param_1615
    unless_null $P103, vivify_579
    new $P103, "Undef"
  vivify_579:
    does $I100, $P103, "hash"
    new $P104, 'Integer'
    set $P104, $I100
    isfalse $I101, $P104
    unless $I101, if_1622_end
.annotate 'line', 1085
    set $P105, param_1614
    nqp_decontainerize $P106, $P105
    set $P107, param_1615
    unless_null $P107, vivify_580
    new $P107, "Undef"
  vivify_580:
    $P108 = $P106."get_module"($P107)
    set param_1615, $P108
  if_1622_end:
.annotate 'line', 1088
    set $P103, param_1616
    unless_null $P103, vivify_581
    new $P103, "Undef"
  vivify_581:
    set $P1623, $P103
    defined $I1625, $P1623
    if $I1625, default_1624
    set $P1627, param_1617
    unless_null $P1627, vivify_582
    $P1627 = root_new ['parrot';'ResizablePMCArray']
  vivify_582:
    if $P1627, if_1626
    new $P106, "String"
    assign $P106, "DEFAULT"
    set $P104, $P106
    goto if_1626_end
  if_1626:
    new $P105, "String"
    assign $P105, "ALL"
    set $P104, $P105
  if_1626_end:
    set $P1623, $P104
  default_1624:
    set param_1616, $P1623
.annotate 'line', 1082
    set $P1628, $P1618
    unless_null $P1628, vivify_583
    $P1628 = root_new ['parrot';'Hash']
  vivify_583:
.annotate 'line', 1090
    set $P103, param_1616
    unless_null $P103, vivify_584
    new $P103, "Undef"
  vivify_584:
    set $S100, $P103
    set $P1629, param_1615
    unless_null $P1629, vivify_585
    $P1629 = root_new ['parrot';'Hash']
  vivify_585:
    set $P1630, $P1629["EXPORT"]
    unless_null $P1630, vivify_586
    $P1630 = root_new ['parrot';'Hash']
  vivify_586:
    set $P104, $P1630[$S100]
    unless_null $P104, vivify_587
    new $P104, "Undef"
  vivify_587:
    set $P1620, $P104
.annotate 'line', 1091
    set $P1632, $P1620
    unless_null $P1632, vivify_588
    $P1632 = root_new ['parrot';'Hash']
  vivify_588:
    defined $I100, $P1632
    new $P103, 'Integer'
    set $P103, $I100
    isfalse $I101, $P103
    unless $I101, if_1631_end
.annotate 'line', 1092
    set $P105, param_1616
    unless_null $P105, vivify_589
    new $P105, "Undef"
  vivify_589:
    set $S100, $P105
    iseq $I102, $S100, "ALL"
    if $I102, if_1633
    $P1634 = root_new ['parrot';'Hash']
    set $P104, $P1634
    goto if_1633_end
  if_1633:
    set $P106, param_1615
    unless_null $P106, vivify_590
    new $P106, "Undef"
  vivify_590:
    set $P104, $P106
  if_1633_end:
    set $P1620, $P104
  if_1631_end:
.annotate 'line', 1094
    set $P1636, param_1617
    unless_null $P1636, vivify_591
    $P1636 = root_new ['parrot';'ResizablePMCArray']
  vivify_591:
    if $P1636, if_1635
.annotate 'line', 1101
    set $P1646, $P1620
    unless_null $P1646, vivify_592
    $P1646 = root_new ['parrot';'Hash']
  vivify_592:
    defined $I100, $P1646
    unless $I100, for_undef_593
    iter $P103, $P1646
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop1653_handler
    push_eh $P107
  loop1653_test:
    unless $P103, loop1653_done
    shift $P104, $P103
  loop1653_redo:
    .const 'Sub' $P1648 = "281_1338064439.457" 
    capture_lex $P1648
    $P1648($P104)
  loop1653_next:
    goto loop1653_test
  loop1653_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop1653_next
    eq $P108, .CONTROL_LOOP_REDO, loop1653_redo
  loop1653_done:
    pop_eh 
  for_undef_593:
.annotate 'line', 1100
    goto if_1635_end
  if_1635:
.annotate 'line', 1095
    set $P1637, param_1617
    unless_null $P1637, vivify_600
    $P1637 = root_new ['parrot';'ResizablePMCArray']
  vivify_600:
    defined $I100, $P1637
    unless $I100, for_undef_601
    iter $P103, $P1637
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop1645_handler
    push_eh $P107
  loop1645_test:
    unless $P103, loop1645_done
    shift $P104, $P103
  loop1645_redo:
    .const 'Sub' $P1639 = "280_1338064439.457" 
    capture_lex $P1639
    $P1639($P104)
  loop1645_next:
    goto loop1645_test
  loop1645_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop1645_next
    eq $P108, .CONTROL_LOOP_REDO, loop1645_redo
  loop1645_done:
    pop_eh 
  for_undef_601:
  if_1635_end:
.annotate 'line', 1082
    set $P1654, $P1618
    unless_null $P1654, vivify_610
    $P1654 = root_new ['parrot';'Hash']
  vivify_610:
    .return ($P1654)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1647"  :anon :subid("281_1338064439.457") :outer("105_1338064439.457")
    .param pmc param_1650
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1102
    new $P105, "Undef"
    set $P1649, $P105
    .lex "$value", $P1649
    .lex "$_", param_1650
    find_lex $P106, "$_"
    unless_null $P106, vivify_594
    new $P106, "Undef"
  vivify_594:
    $P107 = $P106."value"()
    set $P1649, $P107
.annotate 'line', 1103
    set $P106, $P1649
    unless_null $P106, vivify_595
    new $P106, "Undef"
  vivify_595:
    find_lex $P107, "$_"
    unless_null $P107, vivify_596
    new $P107, "Undef"
  vivify_596:
    $P108 = $P107."key"()
    set $P109, $P1649
    unless_null $P109, vivify_597
    new $P109, "Undef"
  vivify_597:
    $P110 = "value_type"($P109)
    find_lex $P1651, "%exports"
    unless_null $P1651, vivify_598
    $P1651 = root_new ['parrot';'Hash']
    store_lex "%exports", $P1651
  vivify_598:
    set $P1652, $P1651[$P110]
    unless_null $P1652, vivify_599
    $P1652 = root_new ['parrot';'Hash']
    set $P1651[$P110], $P1652
  vivify_599:
    set $P1652[$P108], $P106
.annotate 'line', 1101
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1638"  :anon :subid("280_1338064439.457") :outer("105_1338064439.457")
    .param pmc param_1641
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1096
    new $P105, "Undef"
    set $P1640, $P105
    .lex "$value", $P1640
    .lex "$_", param_1641
    find_lex $P106, "$_"
    unless_null $P106, vivify_602
    new $P106, "Undef"
  vivify_602:
    set $S100, $P106
    find_lex $P1642, "%source"
    unless_null $P1642, vivify_603
    $P1642 = root_new ['parrot';'Hash']
  vivify_603:
    set $P107, $P1642[$S100]
    unless_null $P107, vivify_604
    new $P107, "Undef"
  vivify_604:
    set $P1640, $P107
.annotate 'line', 1097
    set $P106, $P1640
    unless_null $P106, vivify_605
    new $P106, "Undef"
  vivify_605:
    find_lex $P107, "$_"
    unless_null $P107, vivify_606
    new $P107, "Undef"
  vivify_606:
    set $P108, $P1640
    unless_null $P108, vivify_607
    new $P108, "Undef"
  vivify_607:
    $P109 = "value_type"($P108)
    find_lex $P1643, "%exports"
    unless_null $P1643, vivify_608
    $P1643 = root_new ['parrot';'Hash']
    store_lex "%exports", $P1643
  vivify_608:
    set $P1644, $P1643[$P109]
    unless_null $P1644, vivify_609
    $P1644 = root_new ['parrot';'Hash']
    set $P1643[$P109], $P1644
  vivify_609:
    set $P1644[$P107], $P106
.annotate 'line', 1095
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "get_module" :anon :subid("106_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1656
    .param pmc param_1657
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1109
    .lex "self", param_1656
    .lex "$name", param_1657
.annotate 'line', 1110
    $P1659 = root_new ['parrot';'ResizablePMCArray']
    set $P1658, $P1659
    .lex "@name", $P1658
    set $P102, param_1656
    nqp_decontainerize $P103, $P102
    set $P104, param_1657
    unless_null $P104, vivify_611
    new $P104, "Undef"
  vivify_611:
    $P105 = $P103."parse_name"($P104)
    set $P1658, $P105
.annotate 'line', 1111
    set $P1660, $P1658
    unless_null $P1660, vivify_612
    $P1660 = root_new ['parrot';'ResizablePMCArray']
  vivify_612:
    set $P102, param_1656
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_get_attr_obj $P105, $P103, $P104, "$!language", 6
    unless_null $P105, vivify_613
    new $P105, "Undef"
  vivify_613:
    set $S100, $P105
    downcase $S101, $S100
    $P1660."unshift"($S101)
.annotate 'line', 1112
    set $P1661, $P1658
    unless_null $P1661, vivify_614
    $P1661 = root_new ['parrot';'ResizablePMCArray']
  vivify_614:
    get_root_namespace $P102, $P1661
.annotate 'line', 1109
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "language" :anon :subid("107_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1663
    .param pmc param_1664 :optional
    .param int has_param_1664 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1115
    .lex "self", param_1663
    if has_param_1664, optparam_615
    new $P102, "Undef"
    set param_1664, $P102
  optparam_615:
    .lex "$name", param_1664
.annotate 'line', 1116
    set $P103, param_1664
    unless_null $P103, vivify_616
    new $P103, "Undef"
  vivify_616:
    unless $P103, if_1665_end
.annotate 'line', 1117
    set $P104, param_1664
    unless_null $P104, vivify_617
    new $P104, "Undef"
  vivify_617:
    set $P105, param_1663
    nqp_decontainerize $P106, $P105
    nqp_get_sc_object $P107, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_bind_attr_obj $P106, $P107, "$!language", 6, $P104
.annotate 'line', 1118
    set $P104, param_1664
    unless_null $P104, vivify_618
    new $P104, "Undef"
  vivify_618:
    set $S100, $P104
    set $P105, param_1663
    nqp_decontainerize $P106, $P105
    compreg $S100, $P106
  if_1665_end:
.annotate 'line', 1115
    set $P103, param_1663
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_get_attr_obj $P106, $P104, $P105, "$!language", 6
    unless_null $P106, vivify_619
    new $P106, "Undef"
  vivify_619:
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "compiler" :anon :subid("108_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1667
    .param pmc param_1668
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1123
    .lex "self", param_1667
    .lex "$name", param_1668
.annotate 'line', 1124
    set $P102, param_1668
    unless_null $P102, vivify_620
    new $P102, "Undef"
  vivify_620:
    set $S100, $P102
    compreg $P103, $S100
.annotate 'line', 1123
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "config" :anon :subid("109_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1670
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1127
    .lex "self", param_1670
    set $P102, param_1670
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_get_attr_obj $P1671, $P103, $P104, "%!config", 7
    unless_null $P1671, vivify_621
    $P1671 = root_new ['parrot';'Hash']
  vivify_621:
    .return ($P1671)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "load_module" :anon :subid("110_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1673
    .param pmc param_1674
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1129
    .const 'Sub' $P1678 = "282_1338064439.457" 
    capture_lex $P1678
    .lex "self", param_1673
    .lex "$name", param_1674
.annotate 'line', 1130
    new $P102, "Undef"
    set $P1675, $P102
    .lex "$base", $P1675
.annotate 'line', 1131
    new $P103, "Undef"
    set $P1676, $P103
    .lex "$loaded", $P1676
.annotate 'line', 1130
    set $P104, param_1673
    nqp_decontainerize $P105, $P104
    set $P106, param_1674
    unless_null $P106, vivify_622
    new $P106, "Undef"
  vivify_622:
    $P107 = $P105."parse_name"($P106)
    join $S100, "/", $P107
    new $P108, 'String'
    set $P108, $S100
    set $P1675, $P108
.annotate 'line', 1131
    new $P104, "Float"
    assign $P104, 0
    set $P1676, $P104
.annotate 'line', 1132
    .const 'Sub' $P1678 = "282_1338064439.457" 
    capture_lex $P1678
    $P1678()
.annotate 'line', 1133
    set $P104, $P1676
    unless_null $P104, vivify_624
    new $P104, "Undef"
  vivify_624:
    if $P104, unless_1686_end
    set $P105, $P1675
    unless_null $P105, vivify_625
    new $P105, "Undef"
  vivify_625:
    concat $P106, $P105, ".pir"
    set $S100, $P106
    load_bytecode $S100
    new $P105, "Float"
    assign $P105, 1
    set $P1676, $P105
  unless_1686_end:
.annotate 'line', 1134
    set $P104, param_1673
    nqp_decontainerize $P105, $P104
    set $P106, param_1674
    unless_null $P106, vivify_626
    new $P106, "Undef"
  vivify_626:
    $P107 = $P105."get_module"($P106)
.annotate 'line', 1129
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block1677"  :anon :subid("282_1338064439.457") :outer("110_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1132
    new $P1681, 'ExceptionHandler'
    set_label $P1681, control_1680
    $P1681."handle_types_except"(.CONTROL_ALL)
    push_eh $P1681
    find_lex $P104, "$base"
    unless_null $P104, vivify_623
    new $P104, "Undef"
  vivify_623:
    concat $P105, $P104, ".pbc"
    set $S100, $P105
    load_bytecode $S100
    new $P104, "Float"
    assign $P104, 1
    store_lex "$loaded", $P104
    pop_eh 
    goto skip_handler_1679
  control_1680:
    peek_exception $P1682
    .local pmc exception 
    .get_results (exception) 
    new $P1684, 'Integer'
    set $P1684, 1
    set exception["handled"], $P1684
    set $I1685, exception["handled"]
    eq $I1685, 1, handled_1683
    rethrow exception
  handled_1683:
    finalize $P1682
    .return (exception)
  skip_handler_1679:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "import" :anon :subid("111_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1688
    .param pmc param_1689
    .param pmc param_1690
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1137
    .const 'Sub' $P1693 = "283_1338064439.457" 
    capture_lex $P1693
    .lex "self", param_1688
    .lex "$target", param_1689
    .lex "%exports", param_1690
.annotate 'line', 1138
    set $P1691, param_1690
    unless_null $P1691, vivify_627
    $P1691 = root_new ['parrot';'Hash']
  vivify_627:
    defined $I100, $P1691
    unless $I100, for_undef_628
    iter $P102, $P1691
    new $P106, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P106, loop1716_handler
    push_eh $P106
  loop1716_test:
    unless $P102, loop1716_done
    shift $P103, $P102
  loop1716_redo:
    .const 'Sub' $P1693 = "283_1338064439.457" 
    capture_lex $P1693
    $P1693($P103)
  loop1716_next:
    goto loop1716_test
  loop1716_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P107, exception, 'type'
    eq $P107, .CONTROL_LOOP_NEXT, loop1716_next
    eq $P107, .CONTROL_LOOP_REDO, loop1716_redo
  loop1716_done:
    pop_eh 
  for_undef_628:
.annotate 'line', 1137
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block1692"  :anon :subid("283_1338064439.457") :outer("111_1338064439.457")
    .param pmc param_1697
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1138
    .const 'Sub' $P1712 = "286_1338064439.457" 
    capture_lex $P1712
    .const 'Sub' $P1707 = "285_1338064439.457" 
    capture_lex $P1707
    .const 'Sub' $P1701 = "284_1338064439.457" 
    capture_lex $P1701
.annotate 'line', 1139
    new $P104, "Undef"
    set $P1694, $P104
    .lex "$type", $P1694
.annotate 'line', 1140
    $P1696 = root_new ['parrot';'Hash']
    set $P1695, $P1696
    .lex "%items", $P1695
    .lex "$_", param_1697
.annotate 'line', 1139
    find_lex $P105, "$_"
    unless_null $P105, vivify_629
    new $P105, "Undef"
  vivify_629:
    $P106 = $P105."key"()
    set $P1694, $P106
.annotate 'line', 1140
    find_lex $P105, "$_"
    unless_null $P105, vivify_630
    new $P105, "Undef"
  vivify_630:
    $P106 = $P105."value"()
    set $P1695, $P106
.annotate 'line', 1141
    find_lex $P106, "self"
    nqp_decontainerize $P107, $P106
    new $P108, 'String'
    set $P108, "import_"
    set $P109, $P1694
    unless_null $P109, vivify_631
    new $P109, "Undef"
  vivify_631:
    concat $P110, $P108, $P109
    set $S100, $P110
    can $I101, $P107, $S100
    if $I101, if_1698
.annotate 'line', 1144
    find_lex $P113, "$target"
    unless_null $P113, vivify_632
    new $P113, "Undef"
  vivify_632:
    new $P114, 'String'
    set $P114, "add_"
    set $P115, $P1694
    unless_null $P115, vivify_633
    new $P115, "Undef"
  vivify_633:
    concat $P116, $P114, $P115
    set $S101, $P116
    can $I102, $P113, $S101
    if $I102, if_1704
.annotate 'line', 1148
    set $P1710, $P1695
    unless_null $P1710, vivify_634
    $P1710 = root_new ['parrot';'Hash']
  vivify_634:
    defined $I103, $P1710
    unless $I103, for_undef_635
    iter $P118, $P1710
    new $P120, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P120, loop1715_handler
    push_eh $P120
  loop1715_test:
    unless $P118, loop1715_done
    shift $P119, $P118
  loop1715_redo:
    .const 'Sub' $P1712 = "286_1338064439.457" 
    capture_lex $P1712
    $P1712($P119)
  loop1715_next:
    goto loop1715_test
  loop1715_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P122, exception, 'type'
    eq $P122, .CONTROL_LOOP_NEXT, loop1715_next
    eq $P122, .CONTROL_LOOP_REDO, loop1715_redo
  loop1715_done:
    pop_eh 
  for_undef_635:
.annotate 'line', 1147
    set $P112, $P118
.annotate 'line', 1144
    goto if_1704_end
  if_1704:
.annotate 'line', 1145
    set $P1705, $P1695
    unless_null $P1705, vivify_639
    $P1705 = root_new ['parrot';'Hash']
  vivify_639:
    defined $I103, $P1705
    unless $I103, for_undef_640
    iter $P117, $P1705
    new $P119, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P119, loop1709_handler
    push_eh $P119
  loop1709_test:
    unless $P117, loop1709_done
    shift $P118, $P117
  loop1709_redo:
    .const 'Sub' $P1707 = "285_1338064439.457" 
    capture_lex $P1707
    $P1707($P118)
  loop1709_next:
    goto loop1709_test
  loop1709_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P120, exception, 'type'
    eq $P120, .CONTROL_LOOP_NEXT, loop1709_next
    eq $P120, .CONTROL_LOOP_REDO, loop1709_redo
  loop1709_done:
    pop_eh 
  for_undef_640:
.annotate 'line', 1144
    set $P112, $P117
  if_1704_end:
    set $P105, $P112
.annotate 'line', 1141
    goto if_1698_end
  if_1698:
.annotate 'line', 1142
    set $P1699, $P1695
    unless_null $P1699, vivify_645
    $P1699 = root_new ['parrot';'Hash']
  vivify_645:
    defined $I102, $P1699
    unless $I102, for_undef_646
    iter $P111, $P1699
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop1703_handler
    push_eh $P113
  loop1703_test:
    unless $P111, loop1703_done
    shift $P112, $P111
  loop1703_redo:
    .const 'Sub' $P1701 = "284_1338064439.457" 
    capture_lex $P1701
    $P1701($P112)
  loop1703_next:
    goto loop1703_test
  loop1703_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop1703_next
    eq $P114, .CONTROL_LOOP_REDO, loop1703_redo
  loop1703_done:
    pop_eh 
  for_undef_646:
.annotate 'line', 1141
    set $P105, $P111
  if_1698_end:
.annotate 'line', 1138
    .return ($P105)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1711"  :anon :subid("286_1338064439.457") :outer("283_1338064439.457")
    .param pmc param_1713
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1148
    .lex "$_", param_1713
    find_lex $P120, "$_"
    unless_null $P120, vivify_636
    new $P120, "Undef"
  vivify_636:
    $P121 = $P120."value"()
    find_lex $P122, "$_"
    unless_null $P122, vivify_637
    new $P122, "Undef"
  vivify_637:
    $P123 = $P122."key"()
    set $S102, $P123
    find_lex $P1714, "$target"
    unless_null $P1714, vivify_638
    $P1714 = root_new ['parrot';'Hash']
    store_lex "$target", $P1714
  vivify_638:
    set $P1714[$S102], $P121
    .return ($P121)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1706"  :anon :subid("285_1338064439.457") :outer("283_1338064439.457")
    .param pmc param_1708
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1145
    .lex "$_", param_1708
    find_lex $P119, "$target"
    unless_null $P119, vivify_641
    new $P119, "Undef"
  vivify_641:
    find_lex $P120, "$_"
    unless_null $P120, vivify_642
    new $P120, "Undef"
  vivify_642:
    $P121 = $P120."key"()
    find_lex $P122, "$_"
    unless_null $P122, vivify_643
    new $P122, "Undef"
  vivify_643:
    $P123 = $P122."value"()
    new $P124, 'String'
    set $P124, "add_"
    find_lex $P125, "$type"
    unless_null $P125, vivify_644
    new $P125, "Undef"
  vivify_644:
    concat $P126, $P124, $P125
    set $S102, $P126
    $P127 = $P119.$S102($P121, $P123)
    .return ($P127)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1700"  :anon :subid("284_1338064439.457") :outer("283_1338064439.457")
    .param pmc param_1702
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1142
    .lex "$_", param_1702
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    find_lex $P115, "$target"
    unless_null $P115, vivify_647
    new $P115, "Undef"
  vivify_647:
    find_lex $P116, "$_"
    unless_null $P116, vivify_648
    new $P116, "Undef"
  vivify_648:
    $P117 = $P116."key"()
    find_lex $P118, "$_"
    unless_null $P118, vivify_649
    new $P118, "Undef"
  vivify_649:
    $P119 = $P118."value"()
    new $P120, 'String'
    set $P120, "import_"
    find_lex $P121, "$type"
    unless_null $P121, vivify_650
    new $P121, "Undef"
  vivify_650:
    concat $P122, $P120, $P121
    set $S101, $P122
    $P123 = $P114.$S101($P115, $P117, $P119)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "autoprint" :anon :subid("112_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1718
    .param pmc param_1719
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1153
    .lex "self", param_1718
    .lex "$value", param_1719
.annotate 'line', 1155
    getinterp $P103
    $P104 = $P103."stdout_handle"()
    $N100 = $P104."tell"()
    find_dynamic_lex $P107, "$*AUTOPRINTPOS"
    unless_null $P107, vivify_651
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$AUTOPRINTPOS"]
    unless_null $P107, vivify_652
    die "Contextual $*AUTOPRINTPOS not found"
  vivify_652:
  vivify_651:
    set $N101, $P107
    isgt $I100, $N100, $N101
    unless $I100, unless_1720
    new $P102, 'Integer'
    set $P102, $I100
    goto unless_1720_end
  unless_1720:
.annotate 'line', 1154
    set $P108, param_1719
    unless_null $P108, vivify_653
    new $P108, "Undef"
  vivify_653:
    set $S100, $P108
    say $S100
  unless_1720_end:
.annotate 'line', 1153
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "interactive" :anon :subid("113_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1722
    .param pmc param_1723 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1158
    .const 'Sub' $P1743 = "288_1338064439.457" 
    capture_lex $P1743
    .const 'Sub' $P1725 = "287_1338064439.457" 
    capture_lex $P1725
    .lex "self", param_1722
    .lex "%adverbs", param_1723
.annotate 'line', 1164
    .const 'Sub' $P1725 = "287_1338064439.457" 
    newclosure $P1730, $P1725
    set $P1724, $P1730
    .lex "blank_context", $P1724
.annotate 'line', 1173
    new $P102, "Undef"
    set $P1731, $P102
    .lex "$interactive_ctx", $P1731
.annotate 'line', 1174
    $P1733 = root_new ['parrot';'Hash']
    set $P1732, $P1733
    .lex "%interactive_pad", $P1732
.annotate 'line', 1177
    new $P104, "Undef"
    set $P1734, $P104
    .lex "$target", $P1734
.annotate 'line', 1181
    new $P105, "Undef"
    set $P1735, $P105
    .lex "$stdin", $P1735
.annotate 'line', 1182
    new $P106, "Undef"
    set $P1736, $P106
    .lex "$encoding", $P1736
.annotate 'line', 1187
    new $P107, "Undef"
    set $P1737, $P107
    .lex "$save_ctx", $P1737
.annotate 'line', 1158
    set $P108, $P1724
.annotate 'line', 1172
    set $P108, $P1724
    null $P109
    $P108."set_outer"($P109)
.annotate 'line', 1173
    $P108 = "blank_context"()
    set $P1731, $P108
.annotate 'line', 1175
    set $P108, $P1731
    unless_null $P108, vivify_658
    new $P108, "Undef"
  vivify_658:
    getattribute $P109, $P108, "lex_pad"
    set $P1732, $P109
.annotate 'line', 1177
    set $P1738, param_1723
    unless_null $P1738, vivify_659
    $P1738 = root_new ['parrot';'Hash']
  vivify_659:
    set $P108, $P1738["target"]
    unless_null $P108, vivify_660
    new $P108, "Undef"
  vivify_660:
    set $S100, $P108
    downcase $S101, $S100
    new $P109, 'String'
    set $P109, $S101
    set $P1734, $P109
.annotate 'line', 1179
    getinterp $P108
    $P109 = $P108."stderr_handle"()
    set $P110, param_1722
    nqp_decontainerize $P111, $P110
    $P112 = $P111."interactive_banner"()
    print $P109, $P112
.annotate 'line', 1181
    getinterp $P108
    $P109 = $P108."stdin_handle"()
    set $P1735, $P109
.annotate 'line', 1182
    set $P1739, param_1723
    unless_null $P1739, vivify_661
    $P1739 = root_new ['parrot';'Hash']
  vivify_661:
    set $P108, $P1739["encoding"]
    unless_null $P108, vivify_662
    new $P108, "Undef"
  vivify_662:
    set $S100, $P108
    new $P109, 'String'
    set $P109, $S100
    set $P1736, $P109
.annotate 'line', 1183
    set $P109, $P1736
    unless_null $P109, vivify_663
    new $P109, "Undef"
  vivify_663:
    if $P109, if_1741
    set $P108, $P109
    goto if_1741_end
  if_1741:
    set $P110, $P1736
    unless_null $P110, vivify_664
    new $P110, "Undef"
  vivify_664:
    set $S100, $P110
    isne $I100, $S100, "fixed_8"
    new $P108, 'Integer'
    set $P108, $I100
  if_1741_end:
    unless $P108, if_1740_end
.annotate 'line', 1184
    set $P111, $P1735
    unless_null $P111, vivify_665
    new $P111, "Undef"
  vivify_665:
    set $P112, $P1736
    unless_null $P112, vivify_666
    new $P112, "Undef"
  vivify_666:
    $P111."encoding"($P112)
  if_1740_end:
.annotate 'line', 1158
    set $P108, $P1737
    unless_null $P108, vivify_667
    new $P108, "Undef"
  vivify_667:
.annotate 'line', 1188
    new $P115, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P115, loop1789_handler
    push_eh $P115
  loop1789_test:
    new $P108, "Float"
    assign $P108, 1
    unless $P108, loop1789_done
  loop1789_redo:
    .const 'Sub' $P1743 = "288_1338064439.457" 
    capture_lex $P1743
    $P1743()
  loop1789_next:
    goto loop1789_test
  loop1789_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P116, exception, 'type'
    eq $P116, .CONTROL_LOOP_NEXT, loop1789_next
    eq $P116, .CONTROL_LOOP_REDO, loop1789_redo
  loop1789_done:
    pop_eh 
.annotate 'line', 1158
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "blank_context"  :subid("287_1338064439.457") :outer("113_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1166
    $P1727 = root_new ['parrot';'Hash']
    set $P1726, $P1727
    .lex "%blank_pad", $P1726
.annotate 'line', 1164
    set $P1728, $P1726
    unless_null $P1728, vivify_654
    $P1728 = root_new ['parrot';'Hash']
  vivify_654:
.annotate 'line', 1168
    getinterp $P102
    set $P103, $P102["context"]
    unless_null $P103, vivify_655
    new $P103, "Undef"
  vivify_655:
    getattribute $P104, $P103, "lex_pad"
    set $P1729, $P1726
    unless_null $P1729, vivify_656
    $P1729 = root_new ['parrot';'Hash']
  vivify_656:
    copy $P104, $P1729
.annotate 'line', 1170
    getinterp $P102
    set $P103, $P102["context"]
    unless_null $P103, vivify_657
    new $P103, "Undef"
  vivify_657:
.annotate 'line', 1164
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1742"  :anon :subid("288_1338064439.457") :outer("113_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1188
    .const 'Sub' $P1757 = "289_1338064439.457" 
    capture_lex $P1757
.annotate 'line', 1191
    new $P109, "Undef"
    set $P1744, $P109
    .lex "$prompt", $P1744
.annotate 'line', 1192
    new $P110, "Undef"
    set $P1745, $P110
    .lex "$code", $P1745
.annotate 'line', 1201
    new $P111, "Undef"
    set $P1746, $P111
    .lex "$*AUTOPRINTPOS", $P1746
.annotate 'line', 1202
    new $P112, "Undef"
    set $P1747, $P112
    .lex "$*CTXSAVE", $P1747
.annotate 'line', 1203
    new $P113, "Undef"
    set $P1748, $P113
    .lex "$*MAIN_CTX", $P1748
.annotate 'line', 1189
    find_lex $P114, "$stdin"
    unless_null $P114, vivify_668
    new $P114, "Undef"
  vivify_668:
    if $P114, unless_1749_end
    die 0, .CONTROL_LOOP_LAST
  unless_1749_end:
.annotate 'line', 1191
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    $P116 = $P115."interactive_prompt"()
    set $P1750, $P116
    defined $I1752, $P1750
    if $I1752, default_1751
    new $P117, "String"
    assign $P117, "> "
    set $P1750, $P117
  default_1751:
    set $P1744, $P1750
.annotate 'line', 1192
    find_lex $P114, "$stdin"
    unless_null $P114, vivify_669
    new $P114, "Undef"
  vivify_669:
    set $P115, $P1744
    unless_null $P115, vivify_670
    new $P115, "Undef"
  vivify_670:
    set $S100, $P115
    $P116 = $P114."readline_interactive"($S100)
    set $P1745, $P116
.annotate 'line', 1194
    set $P114, $P1745
    unless_null $P114, vivify_671
    new $P114, "Undef"
  vivify_671:
    isnull $I100, $P114
    unless $I100, if_1753_end
    die 0, .CONTROL_LOOP_LAST
  if_1753_end:
.annotate 'line', 1195
    set $P114, $P1745
    unless_null $P114, vivify_672
    new $P114, "Undef"
  vivify_672:
    defined $I100, $P114
    if $I100, unless_1754_end
.annotate 'line', 1196
    print "\n"
.annotate 'line', 1197
    die 0, .CONTROL_LOOP_LAST
  unless_1754_end:
.annotate 'line', 1201
    getinterp $P114
    $P115 = $P114."stdout_handle"()
    $P116 = $P115."tell"()
    set $P1746, $P116
.annotate 'line', 1202
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    set $P1747, $P115
.annotate 'line', 1188
    set $P116, $P1748
    unless_null $P116, vivify_673
    get_hll_global $P114, "GLOBAL"
    get_who $P115, $P114
    set $P116, $P115["$MAIN_CTX"]
    unless_null $P116, vivify_674
    die "Contextual $*MAIN_CTX not found"
  vivify_674:
  vivify_673:
.annotate 'line', 1205
    set $P115, $P1745
    unless_null $P115, vivify_675
    new $P115, "Undef"
  vivify_675:
    if $P115, if_1755
    set $P114, $P115
    goto if_1755_end
  if_1755:
    .const 'Sub' $P1757 = "289_1338064439.457" 
    capture_lex $P1757
    $P118 = $P1757()
    set $P114, $P118
  if_1755_end:
.annotate 'line', 1188
    .return ($P114)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block1756"  :anon :subid("289_1338064439.457") :outer("288_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1205
    .const 'Sub' $P1781 = "292_1338064439.457" 
    capture_lex $P1781
    .const 'Sub' $P1760 = "290_1338064439.457" 
    capture_lex $P1760
.annotate 'line', 1207
    new $P116, "Undef"
    set $P1758, $P116
    .lex "$output", $P1758
.annotate 'line', 1206
    find_lex $P117, "$code"
    unless_null $P117, vivify_676
    new $P117, "Undef"
  vivify_676:
    concat $P118, $P117, "\n"
    store_lex "$code", $P118
.annotate 'line', 1205
    set $P117, $P1758
    unless_null $P117, vivify_677
    new $P117, "Undef"
  vivify_677:
.annotate 'line', 1208
    .const 'Sub' $P1760 = "290_1338064439.457" 
    capture_lex $P1760
    $P1760()
.annotate 'line', 1215
    find_dynamic_lex $P119, "$*MAIN_CTX"
    unless_null $P119, vivify_682
    get_hll_global $P117, "GLOBAL"
    get_who $P118, $P117
    set $P119, $P118["$MAIN_CTX"]
    unless_null $P119, vivify_683
    die "Contextual $*MAIN_CTX not found"
  vivify_683:
  vivify_682:
    defined $I100, $P119
    unless $I100, if_1779_end
.annotate 'line', 1216
    find_dynamic_lex $P123, "$*MAIN_CTX"
    unless_null $P123, vivify_684
    get_hll_global $P121, "GLOBAL"
    get_who $P122, $P121
    set $P123, $P122["$MAIN_CTX"]
    unless_null $P123, vivify_685
    die "Contextual $*MAIN_CTX not found"
  vivify_685:
  vivify_684:
    $P124 = $P123."lexpad_full"()
    defined $I101, $P124
    unless $I101, for_undef_686
    iter $P120, $P124
    new $P126, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P126, loop1784_handler
    push_eh $P126
  loop1784_test:
    unless $P120, loop1784_done
    shift $P125, $P120
  loop1784_redo:
    .const 'Sub' $P1781 = "292_1338064439.457" 
    capture_lex $P1781
    $P1781($P125)
  loop1784_next:
    goto loop1784_test
  loop1784_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P128, exception, 'type'
    eq $P128, .CONTROL_LOOP_NEXT, loop1784_next
    eq $P128, .CONTROL_LOOP_REDO, loop1784_redo
  loop1784_done:
    pop_eh 
  for_undef_686:
.annotate 'line', 1219
    find_lex $P120, "$interactive_ctx"
    unless_null $P120, vivify_690
    new $P120, "Undef"
  vivify_690:
    store_lex "$save_ctx", $P120
  if_1779_end:
.annotate 'line', 1221
    set $P117, $P1758
    unless_null $P117, vivify_691
    new $P117, "Undef"
  vivify_691:
    isnull $I100, $P117
    unless $I100, if_1785_end
    die 0, .CONTROL_LOOP_NEXT
  if_1785_end:
.annotate 'line', 1223
    find_lex $P118, "$target"
    unless_null $P118, vivify_692
    new $P118, "Undef"
  vivify_692:
    isfalse $I100, $P118
    if $I100, if_1786
.annotate 'line', 1225
    find_lex $P120, "$target"
    unless_null $P120, vivify_693
    new $P120, "Undef"
  vivify_693:
    set $S100, $P120
    iseq $I101, $S100, "pir"
    if $I101, if_1787
.annotate 'line', 1228
    find_lex $P121, "self"
    nqp_decontainerize $P123, $P121
    set $P124, $P1758
    unless_null $P124, vivify_694
    new $P124, "Undef"
  vivify_694:
    find_lex $P125, "$target"
    unless_null $P125, vivify_695
    new $P125, "Undef"
  vivify_695:
    find_lex $P1788, "%adverbs"
    unless_null $P1788, vivify_696
    $P1788 = root_new ['parrot';'Hash']
  vivify_696:
    $P126 = $P123."dumper"($P124, $P125, $P1788 :flat)
.annotate 'line', 1227
    set $P119, $P126
.annotate 'line', 1225
    goto if_1787_end
  if_1787:
.annotate 'line', 1226
    set $P121, $P1758
    unless_null $P121, vivify_697
    new $P121, "Undef"
  vivify_697:
    say $P121
  if_1787_end:
.annotate 'line', 1225
    set $P117, $P119
.annotate 'line', 1223
    goto if_1786_end
  if_1786:
.annotate 'line', 1224
    find_lex $P119, "self"
    nqp_decontainerize $P120, $P119
    set $P121, $P1758
    unless_null $P121, vivify_698
    new $P121, "Undef"
  vivify_698:
    $P122 = $P120."autoprint"($P121)
.annotate 'line', 1223
    set $P117, $P122
  if_1786_end:
.annotate 'line', 1205
    .return ($P117)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block1759"  :anon :subid("290_1338064439.457") :outer("289_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1208
    .const 'Sub' $P1768 = "291_1338064439.457" 
    capture_lex $P1768
    new $P1764, 'ExceptionHandler'
    set_label $P1764, control_1763
    $P1764."handle_types_except"(.CONTROL_ALL)
    push_eh $P1764
.annotate 'line', 1209
    find_lex $P117, "self"
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$code"
    unless_null $P119, vivify_678
    new $P119, "Undef"
  vivify_678:
    find_lex $P120, "$save_ctx"
    unless_null $P120, vivify_679
    new $P120, "Undef"
  vivify_679:
    find_lex $P1761, "%adverbs"
    unless_null $P1761, vivify_680
    $P1761 = root_new ['parrot';'Hash']
  vivify_680:
    $P121 = $P118."eval"($P119, $P1761 :flat, $P120 :named("outer_ctx"))
    store_lex "$output", $P121
.annotate 'line', 1208
    pop_eh 
    goto skip_handler_1762
  control_1763:
    peek_exception $P1765
.annotate 'line', 1210
    .local pmc exception 
    .get_results (exception) 
    .const 'Sub' $P1768 = "291_1338064439.457" 
    newclosure $P1776, $P1768
    $P1776(exception)
    new $P1777, 'Integer'
    set $P1777, 1
    set exception["handled"], $P1777
    set $I1778, exception["handled"]
    eq $I1778, 1, handled_1766
    rethrow exception
  handled_1766:
    finalize $P1765
    .return (exception)
  skip_handler_1762:
.annotate 'line', 1208
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1767"  :anon :subid("291_1338064439.457") :outer("290_1338064439.457")
    .param pmc param_1769
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1210
    .lex "$_", param_1769
    find_lex $P1770, "$_"
    set $P1771, $P1770
    .lex "$!", $P1771
.annotate 'line', 1211
    find_lex $P1772, "$!"
    unless_null $P1772, vivify_681
    new $P1772, "Undef"
  vivify_681:
    set $S1773, $P1772
    new $P1774, 'String'
    set $P1774, $S1773
    concat $P1775, $P1774, "\n"
    print $P1775
.annotate 'line', 1212
    die 0, .CONTROL_LOOP_NEXT
.annotate 'line', 1210
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1780"  :anon :subid("292_1338064439.457") :outer("289_1338064439.457")
    .param pmc param_1782
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1216
    .lex "$_", param_1782
.annotate 'line', 1217
    find_lex $P126, "$_"
    unless_null $P126, vivify_687
    new $P126, "Undef"
  vivify_687:
    $P127 = $P126."value"()
    find_lex $P128, "$_"
    unless_null $P128, vivify_688
    new $P128, "Undef"
  vivify_688:
    $P129 = $P128."key"()
    find_lex $P1783, "%interactive_pad"
    unless_null $P1783, vivify_689
    $P1783 = root_new ['parrot';'Hash']
    store_lex "%interactive_pad", $P1783
  vivify_689:
    set $P1783[$P129], $P127
.annotate 'line', 1216
    .return ($P127)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "eval" :anon :subid("114_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1791
    .param pmc param_1792
    .param pmc param_1793 :slurpy
    .param pmc param_1794 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1234
    .const 'Sub' $P1804 = "293_1338064439.457" 
    capture_lex $P1804
    .lex "self", param_1791
    .lex "$code", param_1792
    .lex "@args", param_1793
    .lex "%adverbs", param_1794
.annotate 'line', 1235
    new $P102, "Undef"
    set $P1795, $P102
    .lex "$output", $P1795
.annotate 'line', 1237
    new $P103, "Undef"
    set $P1796, $P103
    .lex "$old_runcore", $P1796
.annotate 'line', 1234
    set $P104, $P1795
    unless_null $P104, vivify_699
    new $P104, "Undef"
  vivify_699:
.annotate 'line', 1237
    interpinfo $S100, .INTERPINFO_CURRENT_RUNCORE
    new $P104, 'String'
    set $P104, $S100
    set $P1796, $P104
.annotate 'line', 1238
    set $P1798, param_1794
    unless_null $P1798, vivify_700
    $P1798 = root_new ['parrot';'Hash']
  vivify_700:
    set $P104, $P1798["profile-compile"]
    unless_null $P104, vivify_701
    new $P104, "Undef"
  vivify_701:
    unless $P104, if_1797_end
.annotate 'line', 1239
    set_runcore "subprof_hll"
  if_1797_end:
.annotate 'line', 1241
    set $P104, param_1791
    nqp_decontainerize $P105, $P104
    set $P106, param_1792
    unless_null $P106, vivify_702
    new $P106, "Undef"
  vivify_702:
    set $P1799, param_1794
    unless_null $P1799, vivify_703
    $P1799 = root_new ['parrot';'Hash']
  vivify_703:
    $P107 = $P105."compile"($P106, $P1799 :flat)
    set $P1795, $P107
.annotate 'line', 1243
    set $P105, $P1795
    unless_null $P105, vivify_704
    new $P105, "Undef"
  vivify_704:
    isa $I100, $P105, "String"
    new $P106, 'Integer'
    set $P106, $I100
    isfalse $I101, $P106
    if $I101, if_1801
    new $P104, 'Integer'
    set $P104, $I101
    goto if_1801_end
  if_1801:
.annotate 'line', 1244
    set $P1802, param_1794
    unless_null $P1802, vivify_705
    $P1802 = root_new ['parrot';'Hash']
  vivify_705:
    set $P107, $P1802["target"]
    unless_null $P107, vivify_706
    new $P107, "Undef"
  vivify_706:
    set $S100, $P107
    iseq $I102, $S100, ""
    new $P104, 'Integer'
    set $P104, $I102
  if_1801_end:
    unless $P104, if_1800_end
    .const 'Sub' $P1804 = "293_1338064439.457" 
    capture_lex $P1804
    $P1804()
  if_1800_end:
.annotate 'line', 1257
    set $P104, $P1796
    unless_null $P104, vivify_719
    new $P104, "Undef"
  vivify_719:
    set $S100, $P104
    set_runcore $S100
.annotate 'line', 1234
    set $P104, $P1795
    unless_null $P104, vivify_720
    new $P104, "Undef"
  vivify_720:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1803"  :anon :subid("293_1338064439.457") :outer("114_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1245
    new $P108, "Undef"
    set $P1805, $P108
    .lex "$outer_ctx", $P1805
    find_lex $P1806, "%adverbs"
    unless_null $P1806, vivify_707
    $P1806 = root_new ['parrot';'Hash']
  vivify_707:
    set $P109, $P1806["outer_ctx"]
    unless_null $P109, vivify_708
    new $P109, "Undef"
  vivify_708:
    set $P1805, $P109
.annotate 'line', 1246
    set $P109, $P1805
    unless_null $P109, vivify_709
    new $P109, "Undef"
  vivify_709:
    defined $I103, $P109
    unless $I103, if_1807_end
.annotate 'line', 1247
    find_lex $P1808, "$output"
    unless_null $P1808, vivify_710
    $P1808 = root_new ['parrot';'ResizablePMCArray']
  vivify_710:
    set $P110, $P1808[0]
    unless_null $P110, vivify_711
    new $P110, "Undef"
  vivify_711:
    set $P111, $P1805
    unless_null $P111, vivify_712
    new $P111, "Undef"
  vivify_712:
    $P110."set_outer_ctx"($P111)
  if_1807_end:
.annotate 'line', 1250
    find_lex $P1810, "%adverbs"
    unless_null $P1810, vivify_713
    $P1810 = root_new ['parrot';'Hash']
  vivify_713:
    set $P109, $P1810["profile"]
    unless_null $P109, vivify_714
    new $P109, "Undef"
  vivify_714:
    unless $P109, if_1809_end
.annotate 'line', 1251
    set_runcore "subprof_hll"
  if_1809_end:
.annotate 'line', 1253
    find_lex $P1811, "%adverbs"
    unless_null $P1811, vivify_715
    $P1811 = root_new ['parrot';'Hash']
  vivify_715:
    set $P109, $P1811["trace"]
    unless_null $P109, vivify_716
    new $P109, "Undef"
  vivify_716:
    set $I103, $P109
    trace $I103
.annotate 'line', 1254
    find_lex $P109, "$output"
    unless_null $P109, vivify_717
    new $P109, "Undef"
  vivify_717:
    find_lex $P1812, "@args"
    unless_null $P1812, vivify_718
    $P1812 = root_new ['parrot';'ResizablePMCArray']
  vivify_718:
    $P110 = $P109($P1812 :flat)
    store_lex "$output", $P110
.annotate 'line', 1255
    trace 0
.annotate 'line', 1244
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "ctxsave" :anon :subid("115_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1814
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1262
    .lex "self", param_1814
.annotate 'line', 1264

                $P0 = getinterp
                $P1815 = $P0['context';1]
            
    store_dynamic_lex "$*MAIN_CTX", $P1815
.annotate 'line', 1268
    new $P102, "Float"
    assign $P102, 0
    store_dynamic_lex "$*CTXSAVE", $P102
.annotate 'line', 1262
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "panic" :anon :subid("116_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1817
    .param pmc param_1818 :slurpy
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1271
    .lex "self", param_1817
    .lex "@args", param_1818
.annotate 'line', 1272
    set $P1819, param_1818
    unless_null $P1819, vivify_721
    $P1819 = root_new ['parrot';'ResizablePMCArray']
  vivify_721:
    join $S100, "", $P1819
    die $S100
.annotate 'line', 1271
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "stages" :anon :subid("117_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1821
    .param pmc param_1822 :optional
    .param int has_param_1822 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1275
    .lex "self", param_1821
    if has_param_1822, optparam_722
    $P1823 = root_new ['parrot';'ResizablePMCArray']
    set param_1822, $P1823
  optparam_722:
    .lex "@value", param_1822
.annotate 'line', 1276
    set $P1825, param_1822
    unless_null $P1825, vivify_723
    $P1825 = root_new ['parrot';'ResizablePMCArray']
  vivify_723:
    set $N100, $P1825
    unless $N100, if_1824_end
.annotate 'line', 1277
    set $P1826, param_1822
    unless_null $P1826, vivify_724
    $P1826 = root_new ['parrot';'ResizablePMCArray']
  vivify_724:
    set $P102, param_1821
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_bind_attr_obj $P103, $P104, "@!stages", 0, $P1826
  if_1824_end:
.annotate 'line', 1275
    set $P102, param_1821
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_get_attr_obj $P1827, $P103, $P104, "@!stages", 0
    unless_null $P1827, vivify_725
    $P1827 = root_new ['parrot';'ResizablePMCArray']
  vivify_725:
    .return ($P1827)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "parsegrammar" :anon :subid("118_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1829
    .param pmc param_1830 :slurpy
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1282
    .lex "self", param_1829
    .lex "@value", param_1830
.annotate 'line', 1283
    set $P1832, param_1830
    unless_null $P1832, vivify_726
    $P1832 = root_new ['parrot';'ResizablePMCArray']
  vivify_726:
    set $N100, $P1832
    unless $N100, if_1831_end
.annotate 'line', 1284
    set $P1833, param_1830
    unless_null $P1833, vivify_727
    $P1833 = root_new ['parrot';'ResizablePMCArray']
  vivify_727:
    set $P102, $P1833[0]
    unless_null $P102, vivify_728
    new $P102, "Undef"
  vivify_728:
    set $P103, param_1829
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_bind_attr_obj $P104, $P105, "$!parsegrammar", 1, $P102
  if_1831_end:
.annotate 'line', 1282
    set $P102, param_1829
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_get_attr_obj $P105, $P103, $P104, "$!parsegrammar", 1
    unless_null $P105, vivify_729
    new $P105, "Undef"
  vivify_729:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "parseactions" :anon :subid("119_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1835
    .param pmc param_1836 :slurpy
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1289
    .lex "self", param_1835
    .lex "@value", param_1836
.annotate 'line', 1290
    set $P1838, param_1836
    unless_null $P1838, vivify_730
    $P1838 = root_new ['parrot';'ResizablePMCArray']
  vivify_730:
    set $N100, $P1838
    unless $N100, if_1837_end
.annotate 'line', 1291
    set $P1839, param_1836
    unless_null $P1839, vivify_731
    $P1839 = root_new ['parrot';'ResizablePMCArray']
  vivify_731:
    set $P102, $P1839[0]
    unless_null $P102, vivify_732
    new $P102, "Undef"
  vivify_732:
    set $P103, param_1835
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_bind_attr_obj $P104, $P105, "$!parseactions", 2, $P102
  if_1837_end:
.annotate 'line', 1289
    set $P102, param_1835
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_get_attr_obj $P105, $P103, $P104, "$!parseactions", 2
    unless_null $P105, vivify_733
    new $P105, "Undef"
  vivify_733:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "interactive_banner" :anon :subid("120_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1841
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1296
    .lex "self", param_1841
    .return ("")
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "interactive_prompt" :anon :subid("121_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1843
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1298
    .lex "self", param_1843
    .return ("> ")
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "compiler_progname" :anon :subid("122_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1845
    .param pmc param_1846 :optional
    .param int has_param_1846 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1300
    .lex "self", param_1845
    if has_param_1846, optparam_734
    new $P102, "Undef"
    set param_1846, $P102
  optparam_734:
    .lex "$value", param_1846
.annotate 'line', 1301
    set $P103, param_1846
    unless_null $P103, vivify_735
    new $P103, "Undef"
  vivify_735:
    defined $I100, $P103
    unless $I100, if_1847_end
.annotate 'line', 1302
    set $P104, param_1846
    unless_null $P104, vivify_736
    new $P104, "Undef"
  vivify_736:
    set $P105, param_1845
    nqp_decontainerize $P106, $P105
    nqp_get_sc_object $P107, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_bind_attr_obj $P106, $P107, "$!compiler_progname", 5, $P104
  if_1847_end:
.annotate 'line', 1300
    set $P103, param_1845
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_get_attr_obj $P106, $P104, $P105, "$!compiler_progname", 5
    unless_null $P106, vivify_737
    new $P106, "Undef"
  vivify_737:
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "commandline_options" :anon :subid("123_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1849
    .param pmc param_1850 :optional
    .param int has_param_1850 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1308
    .lex "self", param_1849
    if has_param_1850, optparam_738
    $P1851 = root_new ['parrot';'ResizablePMCArray']
    set param_1850, $P1851
  optparam_738:
    .lex "@value", param_1850
.annotate 'line', 1309
    set $P1853, param_1850
    unless_null $P1853, vivify_739
    $P1853 = root_new ['parrot';'ResizablePMCArray']
  vivify_739:
    set $N100, $P1853
    unless $N100, if_1852_end
.annotate 'line', 1310
    set $P1854, param_1850
    unless_null $P1854, vivify_740
    $P1854 = root_new ['parrot';'ResizablePMCArray']
  vivify_740:
    set $P102, param_1849
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_bind_attr_obj $P103, $P104, "@!cmdoptions", 3, $P1854
  if_1852_end:
.annotate 'line', 1308
    set $P102, param_1849
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_get_attr_obj $P1855, $P103, $P104, "@!cmdoptions", 3
    unless_null $P1855, vivify_741
    $P1855 = root_new ['parrot';'ResizablePMCArray']
  vivify_741:
    .return ($P1855)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "command_line" :anon :subid("124_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1857
    .param pmc param_1858
    .param pmc param_1859 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1315
    .lex "self", param_1857
    .lex "@args", param_1858
    .lex "%adverbs", param_1859
.annotate 'line', 1328
    new $P102, "Undef"
    set $P1860, $P102
    .lex "$program-name", $P1860
.annotate 'line', 1329
    new $P103, "Undef"
    set $P1861, $P103
    .lex "$res", $P1861
.annotate 'line', 1330
    $P1863 = root_new ['parrot';'Hash']
    set $P1862, $P1863
    .lex "%opts", $P1862
.annotate 'line', 1331
    $P1865 = root_new ['parrot';'ResizablePMCArray']
    set $P1864, $P1865
    .lex "@a", $P1864
.annotate 'line', 1324
    set $P1867, param_1858
    unless_null $P1867, vivify_742
    $P1867 = root_new ['parrot';'ResizablePMCArray']
  vivify_742:
    set $P104, $P1867[2]
    unless_null $P104, vivify_743
    new $P104, "Undef"
  vivify_743:
    set $S100, $P104
    index $I100, $S100, "@INC"
    set $N100, $I100
    set $N101, 0
    isge $I101, $N100, $N101
    unless $I101, if_1866_end
.annotate 'line', 1325
    exit 0
  if_1866_end:
.annotate 'line', 1328
    set $P1868, param_1858
    unless_null $P1868, vivify_744
    $P1868 = root_new ['parrot';'ResizablePMCArray']
  vivify_744:
    set $P104, $P1868[0]
    unless_null $P104, vivify_745
    new $P104, "Undef"
  vivify_745:
    set $P1860, $P104
.annotate 'line', 1329
    set $P104, param_1857
    nqp_decontainerize $P105, $P104
    set $P1869, param_1858
    unless_null $P1869, vivify_746
    $P1869 = root_new ['parrot';'ResizablePMCArray']
  vivify_746:
    $P106 = $P105."process_args"($P1869)
    set $P1861, $P106
.annotate 'line', 1330
    set $P104, $P1861
    unless_null $P104, vivify_747
    new $P104, "Undef"
  vivify_747:
    $P105 = $P104."options"()
    set $P1862, $P105
.annotate 'line', 1331
    set $P104, $P1861
    unless_null $P104, vivify_748
    new $P104, "Undef"
  vivify_748:
    $P105 = $P104."arguments"()
    set $P1864, $P105
.annotate 'line', 1333
    set $P1870, param_1859
    unless_null $P1870, vivify_749
    $P1870 = root_new ['parrot';'Hash']
  vivify_749:
    set $P1871, $P1862
    unless_null $P1871, vivify_750
    $P1871 = root_new ['parrot';'Hash']
  vivify_750:
    $P1870."update"($P1871)
.annotate 'line', 1334
    set $P1874, param_1859
    unless_null $P1874, vivify_751
    $P1874 = root_new ['parrot';'Hash']
  vivify_751:
    set $P105, $P1874["help"]
    unless_null $P105, vivify_752
    new $P105, "Undef"
  vivify_752:
    unless $P105, unless_1873
    set $P104, $P105
    goto unless_1873_end
  unless_1873:
    set $P1875, param_1859
    unless_null $P1875, vivify_753
    $P1875 = root_new ['parrot';'Hash']
  vivify_753:
    set $P106, $P1875["h"]
    unless_null $P106, vivify_754
    new $P106, "Undef"
  vivify_754:
    set $P104, $P106
  unless_1873_end:
    unless $P104, if_1872_end
    set $P107, param_1857
    nqp_decontainerize $P108, $P107
    set $P109, $P1860
    unless_null $P109, vivify_755
    new $P109, "Undef"
  vivify_755:
    $P108."usage"($P109)
  if_1872_end:
.annotate 'line', 1336
    load_bytecode "dumper.pbc"
.annotate 'line', 1337
    load_bytecode "PGE/Dumper.pbc"
.annotate 'line', 1339
    set $P104, param_1857
    nqp_decontainerize $P105, $P104
    set $P1876, $P1864
    unless_null $P1876, vivify_756
    $P1876 = root_new ['parrot';'ResizablePMCArray']
  vivify_756:
    set $P1877, param_1859
    unless_null $P1877, vivify_757
    $P1877 = root_new ['parrot';'Hash']
  vivify_757:
    $P106 = $P105."command_eval"($P1876 :flat, $P1877 :flat)
.annotate 'line', 1315
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "command_eval" :anon :subid("125_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1879
    .param pmc param_1880 :slurpy
    .param pmc param_1881 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1343
    .const 'Sub' $P1971 = "299_1338064439.457" 
    capture_lex $P1971
    .const 'Sub' $P1897 = "294_1338064439.457" 
    capture_lex $P1897
    .lex "self", param_1879
    .lex "@a", param_1880
    .lex "%adverbs", param_1881
.annotate 'line', 1348
    new $P102, "Undef"
    set $P1882, $P102
    .lex "$result", $P1882
.annotate 'line', 1349
    new $P103, "Undef"
    set $P1883, $P103
    .lex "$error", $P1883
.annotate 'line', 1350
    new $P104, "Undef"
    set $P1884, $P104
    .lex "$has_error", $P1884
.annotate 'line', 1351
    new $P105, "Undef"
    set $P1885, $P105
    .lex "$target", $P1885
.annotate 'line', 1344
    set $P1888, param_1881
    unless_null $P1888, vivify_758
    $P1888 = root_new ['parrot';'Hash']
  vivify_758:
    set $P107, $P1888["version"]
    unless_null $P107, vivify_759
    new $P107, "Undef"
  vivify_759:
    unless $P107, unless_1887
    set $P106, $P107
    goto unless_1887_end
  unless_1887:
    set $P1889, param_1881
    unless_null $P1889, vivify_760
    $P1889 = root_new ['parrot';'Hash']
  vivify_760:
    set $P108, $P1889["v"]
    unless_null $P108, vivify_761
    new $P108, "Undef"
  vivify_761:
    set $P106, $P108
  unless_1887_end:
    unless $P106, if_1886_end
    set $P109, param_1879
    nqp_decontainerize $P110, $P109
    $P110."version"()
  if_1886_end:
.annotate 'line', 1345
    set $P1891, param_1881
    unless_null $P1891, vivify_762
    $P1891 = root_new ['parrot';'Hash']
  vivify_762:
    set $P106, $P1891["show-config"]
    unless_null $P106, vivify_763
    new $P106, "Undef"
  vivify_763:
    unless $P106, if_1890_end
    set $P107, param_1879
    nqp_decontainerize $P108, $P107
    $P108."show-config"()
  if_1890_end:
.annotate 'line', 1346
    set $P1893, param_1881
    unless_null $P1893, vivify_764
    $P1893 = root_new ['parrot';'Hash']
  vivify_764:
    set $P106, $P1893["nqpevent"]
    unless_null $P106, vivify_765
    new $P106, "Undef"
  vivify_765:
    unless $P106, if_1892_end
    set $P107, param_1879
    nqp_decontainerize $P108, $P107
    set $P1894, param_1881
    unless_null $P1894, vivify_766
    $P1894 = root_new ['parrot';'Hash']
  vivify_766:
    set $P109, $P1894["nqpevent"]
    unless_null $P109, vivify_767
    new $P109, "Undef"
  vivify_767:
    $P108."nqpevent"($P109)
  if_1892_end:
.annotate 'line', 1343
    set $P106, $P1882
    unless_null $P106, vivify_768
    new $P106, "Undef"
  vivify_768:
    set $P106, $P1883
    unless_null $P106, vivify_769
    new $P106, "Undef"
  vivify_769:
.annotate 'line', 1350
    new $P106, "Float"
    assign $P106, 0
    set $P1884, $P106
.annotate 'line', 1351
    set $P1895, param_1881
    unless_null $P1895, vivify_770
    $P1895 = root_new ['parrot';'Hash']
  vivify_770:
    set $P106, $P1895["target"]
    unless_null $P106, vivify_771
    new $P106, "Undef"
  vivify_771:
    set $S100, $P106
    downcase $S101, $S100
    new $P107, 'String'
    set $P107, $S101
    set $P1885, $P107
.annotate 'line', 1352
    .const 'Sub' $P1897 = "294_1338064439.457" 
    capture_lex $P1897
    $P1897()
.annotate 'line', 1388
    set $P106, $P1884
    unless_null $P106, vivify_809
    new $P106, "Undef"
  vivify_809:
    unless $P106, if_1966_end
.annotate 'line', 1389
    set $P1969, param_1881
    unless_null $P1969, vivify_810
    $P1969 = root_new ['parrot';'Hash']
  vivify_810:
    set $P108, $P1969["ll-exception"]
    unless_null $P108, vivify_811
    new $P108, "Undef"
  vivify_811:
    unless $P108, unless_1968
    set $P107, $P108
    goto unless_1968_end
  unless_1968:
    set $P109, param_1879
    nqp_decontainerize $P110, $P109
    can $I100, $P110, "handle-exception"
    new $P111, 'Integer'
    set $P111, $I100
    isfalse $I101, $P111
    new $P107, 'Integer'
    set $P107, $I101
  unless_1968_end:
    if $P107, if_1967
.annotate 'line', 1396
    set $P113, param_1879
    nqp_decontainerize $P114, $P113
    set $P115, $P1883
    unless_null $P115, vivify_812
    new $P115, "Undef"
  vivify_812:
    $P114."handle-exception"($P115)
.annotate 'line', 1395
    goto if_1967_end
  if_1967:
.annotate 'line', 1389
    .const 'Sub' $P1971 = "299_1338064439.457" 
    capture_lex $P1971
    $P1971()
  if_1967_end:
  if_1966_end:
.annotate 'line', 1343
    set $P106, $P1882
    unless_null $P106, vivify_818
    new $P106, "Undef"
  vivify_818:
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block1896"  :anon :subid("294_1338064439.457") :outer("125_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1352
    .const 'Sub' $P1957 = "298_1338064439.457" 
    capture_lex $P1957
    .const 'Sub' $P1935 = "297_1338064439.457" 
    capture_lex $P1935
    .const 'Sub' $P1922 = "296_1338064439.457" 
    capture_lex $P1922
    .const 'Sub' $P1901 = "295_1338064439.457" 
    capture_lex $P1901
    new $P1931, 'ExceptionHandler', [.CONTROL_ALL]
    set_label $P1931, control_1930
    push_eh $P1931
    new $P1953, 'ExceptionHandler'
    set_label $P1953, control_1952
    $P1953."handle_types_except"(.CONTROL_ALL)
    push_eh $P1953
.annotate 'line', 1353
    find_lex $P1899, "%adverbs"
    unless_null $P1899, vivify_772
    $P1899 = root_new ['parrot';'Hash']
  vivify_772:
    set $P106, $P1899["e"]
    unless_null $P106, vivify_773
    new $P106, "Undef"
  vivify_773:
    defined $I100, $P106
    if $I100, if_1898
.annotate 'line', 1361
    find_lex $P1910, "@a"
    unless_null $P1910, vivify_774
    $P1910 = root_new ['parrot';'ResizablePMCArray']
  vivify_774:
    isfalse $I101, $P1910
    if $I101, if_1909
.annotate 'line', 1362
    find_lex $P1913, "%adverbs"
    unless_null $P1913, vivify_775
    $P1913 = root_new ['parrot';'Hash']
  vivify_775:
    set $P109, $P1913["combine"]
    unless_null $P109, vivify_776
    new $P109, "Undef"
  vivify_776:
    if $P109, if_1912
.annotate 'line', 1363
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    find_lex $P1916, "@a"
    unless_null $P1916, vivify_777
    $P1916 = root_new ['parrot';'ResizablePMCArray']
  vivify_777:
    set $P112, $P1916[0]
    unless_null $P112, vivify_778
    new $P112, "Undef"
  vivify_778:
    find_lex $P1917, "@a"
    unless_null $P1917, vivify_779
    $P1917 = root_new ['parrot';'ResizablePMCArray']
  vivify_779:
    find_lex $P1918, "%adverbs"
    unless_null $P1918, vivify_780
    $P1918 = root_new ['parrot';'Hash']
  vivify_780:
    $P113 = $P111."evalfiles"($P112, $P1917 :flat, $P1918 :flat)
    store_lex "$result", $P113
    goto if_1912_end
  if_1912:
.annotate 'line', 1362
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    find_lex $P1914, "@a"
    unless_null $P1914, vivify_781
    $P1914 = root_new ['parrot';'ResizablePMCArray']
  vivify_781:
    find_lex $P1915, "%adverbs"
    unless_null $P1915, vivify_782
    $P1915 = root_new ['parrot';'Hash']
  vivify_782:
    $P112 = $P111."evalfiles"($P1914, $P1915 :flat)
    store_lex "$result", $P112
  if_1912_end:
    goto if_1909_end
  if_1909:
.annotate 'line', 1361
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    find_lex $P1911, "%adverbs"
    unless_null $P1911, vivify_783
    $P1911 = root_new ['parrot';'Hash']
  vivify_783:
    $P111 = $P110."interactive"($P1911 :flat)
    store_lex "$result", $P111
  if_1909_end:
    goto if_1898_end
  if_1898:
.annotate 'line', 1353
    .const 'Sub' $P1901 = "295_1338064439.457" 
    capture_lex $P1901
    $P1901()
  if_1898_end:
.annotate 'line', 1365
    find_lex $P107, "$result"
    unless_null $P107, vivify_793
    new $P107, "Undef"
  vivify_793:
    isnull $I100, $P107
    new $P108, 'Integer'
    set $P108, $I100
    isfalse $I101, $P108
    if $I101, if_1920
    new $P106, 'Integer'
    set $P106, $I101
    goto if_1920_end
  if_1920:
    find_lex $P109, "$target"
    unless_null $P109, vivify_794
    new $P109, "Undef"
  vivify_794:
    set $S100, $P109
    iseq $I102, $S100, "pir"
    new $P106, 'Integer'
    set $P106, $I102
  if_1920_end:
    unless $P106, if_1919_end
    .const 'Sub' $P1922 = "296_1338064439.457" 
    capture_lex $P1922
    $P1922()
  if_1919_end:
.annotate 'line', 1352
    pop_eh 
    pop_eh 
    goto skip_handler_1929
  control_1930:
    peek_exception $P1932
.annotate 'line', 1378
    .local pmc exception 
    .get_results (exception) 
    .const 'Sub' $P1935 = "297_1338064439.457" 
    newclosure $P1949, $P1935
    $P1949(exception)
    new $P1950, 'Integer'
    set $P1950, 1
    set exception["handled"], $P1950
    set $I1951, exception["handled"]
    eq $I1951, 1, handled_1933
    rethrow exception
  handled_1933:
    finalize $P1932
    .return (exception)
  control_1952:
    peek_exception $P1954
.annotate 'line', 1374
    .local pmc exception 
    .get_results (exception) 
    .const 'Sub' $P1957 = "298_1338064439.457" 
    newclosure $P1963, $P1957
    $P1963(exception)
    new $P1964, 'Integer'
    set $P1964, 1
    set exception["handled"], $P1964
    set $I1965, exception["handled"]
    eq $I1965, 1, handled_1955
    rethrow exception
  handled_1955:
    finalize $P1954
    .return (exception)
  skip_handler_1929:
.annotate 'line', 1352
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1900"  :anon :subid("295_1338064439.457") :outer("294_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1355
    new $P107, "Undef"
    set $P1902, $P107
    .lex "$?FILES", $P1902
.annotate 'line', 1354
    new $P108, "String"
    assign $P108, "-e"
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    nqp_get_sc_object $P111, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_bind_attr_obj $P110, $P111, "$!user_progname", 8, $P108
.annotate 'line', 1355
    new $P108, "String"
    assign $P108, "-e"
    set $P1902, $P108
.annotate 'line', 1356
    find_lex $P108, "self"
    nqp_decontainerize $P109, $P108
    find_lex $P1903, "%adverbs"
    unless_null $P1903, vivify_784
    $P1903 = root_new ['parrot';'Hash']
  vivify_784:
    set $P110, $P1903["e"]
    unless_null $P110, vivify_785
    new $P110, "Undef"
  vivify_785:
    find_lex $P1904, "@a"
    unless_null $P1904, vivify_786
    $P1904 = root_new ['parrot';'ResizablePMCArray']
  vivify_786:
    find_lex $P1905, "%adverbs"
    unless_null $P1905, vivify_787
    $P1905 = root_new ['parrot';'Hash']
  vivify_787:
    $P111 = $P109."eval"($P110, "-e", $P1904 :flat, $P1905 :flat)
    store_lex "$result", $P111
.annotate 'line', 1357
    find_lex $P110, "$target"
    unless_null $P110, vivify_788
    new $P110, "Undef"
  vivify_788:
    set $S100, $P110
    iseq $I101, $S100, ""
    unless $I101, unless_1907
    new $P109, 'Integer'
    set $P109, $I101
    goto unless_1907_end
  unless_1907:
    find_lex $P111, "$target"
    unless_null $P111, vivify_789
    new $P111, "Undef"
  vivify_789:
    set $S101, $P111
    iseq $I102, $S101, "pir"
    new $P109, 'Integer'
    set $P109, $I102
  unless_1907_end:
    unless $P109, unless_1906
    set $P108, $P109
    goto unless_1906_end
  unless_1906:
.annotate 'line', 1358
    find_lex $P112, "self"
    nqp_decontainerize $P113, $P112
    find_lex $P114, "$result"
    unless_null $P114, vivify_790
    new $P114, "Undef"
  vivify_790:
    find_lex $P115, "$target"
    unless_null $P115, vivify_791
    new $P115, "Undef"
  vivify_791:
    find_lex $P1908, "%adverbs"
    unless_null $P1908, vivify_792
    $P1908 = root_new ['parrot';'Hash']
  vivify_792:
    $P116 = $P113."dumper"($P114, $P115, $P1908 :flat)
.annotate 'line', 1357
    set $P108, $P116
  unless_1906_end:
.annotate 'line', 1353
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1921"  :anon :subid("296_1338064439.457") :outer("294_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1366
    new $P110, "Undef"
    set $P1923, $P110
    .lex "$output", $P1923
.annotate 'line', 1367
    new $P111, "Undef"
    set $P1924, $P111
    .lex "$fh", $P1924
.annotate 'line', 1366
    find_lex $P1925, "%adverbs"
    unless_null $P1925, vivify_795
    $P1925 = root_new ['parrot';'Hash']
  vivify_795:
    set $P112, $P1925["output"]
    unless_null $P112, vivify_796
    new $P112, "Undef"
  vivify_796:
    set $P1923, $P112
.annotate 'line', 1367
    set $P114, $P1923
    unless_null $P114, vivify_797
    new $P114, "Undef"
  vivify_797:
    set $S101, $P114
    iseq $I103, $S101, ""
    unless $I103, unless_1927
    new $P113, 'Integer'
    set $P113, $I103
    goto unless_1927_end
  unless_1927:
    set $P115, $P1923
    unless_null $P115, vivify_798
    new $P115, "Undef"
  vivify_798:
    set $S102, $P115
    iseq $I104, $S102, "-"
    new $P113, 'Integer'
    set $P113, $I104
  unless_1927_end:
    if $P113, if_1926
.annotate 'line', 1369
    new $P118, "FileHandle"
    set $P119, $P1923
    unless_null $P119, vivify_799
    new $P119, "Undef"
  vivify_799:
    $P120 = $P118."open"($P119, "w")
    set $P112, $P120
.annotate 'line', 1367
    goto if_1926_end
  if_1926:
.annotate 'line', 1368
    getinterp $P116
    $P117 = $P116."stdout_handle"()
    set $P112, $P117
  if_1926_end:
    set $P1924, $P112
.annotate 'line', 1370
    set $P112, $P1924
    unless_null $P112, vivify_800
    new $P112, "Undef"
  vivify_800:
    if $P112, unless_1928_end
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    new $P115, 'String'
    set $P115, "Cannot write to "
    set $P116, $P1923
    unless_null $P116, vivify_801
    new $P116, "Undef"
  vivify_801:
    concat $P117, $P115, $P116
    $P114."panic"($P117)
  unless_1928_end:
.annotate 'line', 1371
    set $P112, $P1924
    unless_null $P112, vivify_802
    new $P112, "Undef"
  vivify_802:
    find_lex $P113, "$result"
    unless_null $P113, vivify_803
    new $P113, "Undef"
  vivify_803:
    print $P112, $P113
.annotate 'line', 1372
    set $P112, $P1924
    unless_null $P112, vivify_804
    new $P112, "Undef"
  vivify_804:
    $P113 = $P112."close"()
.annotate 'line', 1365
    .return ($P113)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1934"  :anon :subid("297_1338064439.457") :outer("294_1338064439.457")
    .param pmc param_1936
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1378
    .lex "$_", param_1936
    find_lex $P1937, "$_"
    set $P1938, $P1937
    .lex "$!", $P1938
.annotate 'line', 1379
    find_lex $P1940, "self"
    nqp_decontainerize $P1941, $P1940
    can $I1942, $P1941, "handle-control"
    if $I1942, if_1939
.annotate 'line', 1382
    find_lex $P1946, "$_"
    unless_null $P1946, vivify_805
    new $P1946, "Undef"
  vivify_805:
    rethrow $P1946
.annotate 'line', 1381
    goto if_1939_end
  if_1939:
.annotate 'line', 1380
    find_lex $P1943, "self"
    nqp_decontainerize $P1944, $P1943
    find_lex $P1945, "$_"
    unless_null $P1945, vivify_806
    new $P1945, "Undef"
  vivify_806:
    $P1944."handle-control"($P1945)
  if_1939_end:
.annotate 'line', 1384
    new $P1947, "Float"
    assign $P1947, 1
    store_lex "$has_error", $P1947
.annotate 'line', 1385
    find_lex $P1948, "$_"
    unless_null $P1948, vivify_807
    new $P1948, "Undef"
  vivify_807:
    store_lex "$error", $P1948
.annotate 'line', 1378
    .return ($P1948)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1956"  :anon :subid("298_1338064439.457") :outer("294_1338064439.457")
    .param pmc param_1958
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1374
    .lex "$_", param_1958
    find_lex $P1959, "$_"
    set $P1960, $P1959
    .lex "$!", $P1960
.annotate 'line', 1375
    new $P1961, "Float"
    assign $P1961, 1
    store_lex "$has_error", $P1961
.annotate 'line', 1376
    find_lex $P1962, "$_"
    unless_null $P1962, vivify_808
    new $P1962, "Undef"
  vivify_808:
    store_lex "$error", $P1962
.annotate 'line', 1374
    .return ($P1962)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1970"  :anon :subid("299_1338064439.457") :outer("125_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1390
    new $P112, "Undef"
    set $P1972, $P112
    .lex "$err", $P1972
    getstderr $P113
    set $P1972, $P113
.annotate 'line', 1391
    set $P113, $P1972
    unless_null $P113, vivify_813
    new $P113, "Undef"
  vivify_813:
    find_lex $P114, "$error"
    unless_null $P114, vivify_814
    new $P114, "Undef"
  vivify_814:
    $P113."print"($P114)
.annotate 'line', 1392
    set $P113, $P1972
    unless_null $P113, vivify_815
    new $P113, "Undef"
  vivify_815:
    $P113."print"("\n")
.annotate 'line', 1393
    set $P113, $P1972
    unless_null $P113, vivify_816
    new $P113, "Undef"
  vivify_816:
    find_lex $P114, "$error"
    unless_null $P114, vivify_817
    new $P114, "Undef"
  vivify_817:
    $P115 = $P114."backtrace_strings"()
    join $S100, "\n", $P115
    $P113."print"($S100)
.annotate 'line', 1394
    exit 1
.annotate 'line', 1389
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "process_args" :anon :subid("126_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_1974
    .param pmc param_1975
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1402
    .const 'Sub' $P1981 = "300_1338064439.457" 
    capture_lex $P1981
    .lex "self", param_1974
    .lex "@args", param_1975
.annotate 'line', 1406
    new $P102, "Undef"
    set $P1976, $P102
    .lex "$p", $P1976
.annotate 'line', 1409
    new $P103, "Undef"
    set $P1977, $P103
    .lex "$res", $P1977
.annotate 'line', 1404
    set $P104, param_1974
    nqp_decontainerize $P105, $P104
    set $P1978, param_1975
    unless_null $P1978, vivify_819
    $P1978 = root_new ['parrot';'ResizablePMCArray']
  vivify_819:
    $P106 = $P1978."shift"()
    $P105."compiler_progname"($P106)
.annotate 'line', 1406
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "HLL"
    nqp_get_package_through_who $P106, $P105, "CommandLine"
    get_who $P107, $P106
    set $P108, $P107["Parser"]
    set $P109, param_1974
    nqp_decontainerize $P110, $P109
    nqp_get_sc_object $P111, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_get_attr_obj $P1979, $P110, $P111, "@!cmdoptions", 3
    unless_null $P1979, vivify_820
    $P1979 = root_new ['parrot';'ResizablePMCArray']
  vivify_820:
    $P112 = $P108."new"($P1979)
    set $P1976, $P112
.annotate 'line', 1407
    set $P104, $P1976
    unless_null $P104, vivify_821
    new $P104, "Undef"
  vivify_821:
    $P104."add-stopper"("-e")
.annotate 'line', 1408
    set $P104, $P1976
    unless_null $P104, vivify_822
    new $P104, "Undef"
  vivify_822:
    $P104."stop-after-first-arg"()
.annotate 'line', 1402
    set $P104, $P1977
    unless_null $P104, vivify_823
    new $P104, "Undef"
  vivify_823:
.annotate 'line', 1410
    .const 'Sub' $P1981 = "300_1338064439.457" 
    capture_lex $P1981
    $P1981()
.annotate 'line', 1418
    set $P104, $P1977
    unless_null $P104, vivify_827
    new $P104, "Undef"
  vivify_827:
    if $P104, if_1999
.annotate 'line', 1423
    new $P105, "Hash"
    set $P106, param_1974
    nqp_decontainerize $P107, $P106
    nqp_get_sc_object $P108, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_bind_attr_obj $P107, $P108, "%!cli-options", 10, $P105
.annotate 'line', 1424
    new $P105, "ResizablePMCArray"
    set $P106, param_1974
    nqp_decontainerize $P107, $P106
    nqp_get_sc_object $P108, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_bind_attr_obj $P107, $P108, "@!cli-arguments", 9, $P105
.annotate 'line', 1422
    goto if_1999_end
  if_1999:
.annotate 'line', 1419
    set $P105, $P1977
    unless_null $P105, vivify_828
    new $P105, "Undef"
  vivify_828:
    $P106 = $P105."options"()
    set $P107, param_1974
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_bind_attr_obj $P108, $P109, "%!cli-options", 10, $P106
.annotate 'line', 1420
    set $P105, $P1977
    unless_null $P105, vivify_829
    new $P105, "Undef"
  vivify_829:
    $P106 = $P105."arguments"()
    set $P107, param_1974
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_bind_attr_obj $P108, $P109, "@!cli-arguments", 9, $P106
  if_1999_end:
.annotate 'line', 1402
    set $P104, $P1977
    unless_null $P104, vivify_830
    new $P104, "Undef"
  vivify_830:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block1980"  :anon :subid("300_1338064439.457") :outer("126_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1410
    .const 'Sub' $P1989 = "301_1338064439.457" 
    capture_lex $P1989
    new $P1985, 'ExceptionHandler'
    set_label $P1985, control_1984
    $P1985."handle_types_except"(.CONTROL_ALL)
    push_eh $P1985
.annotate 'line', 1411
    find_lex $P104, "$p"
    unless_null $P104, vivify_824
    new $P104, "Undef"
  vivify_824:
    find_lex $P1982, "@args"
    unless_null $P1982, vivify_825
    $P1982 = root_new ['parrot';'ResizablePMCArray']
  vivify_825:
    $P105 = $P104."parse"($P1982)
    store_lex "$res", $P105
.annotate 'line', 1410
    pop_eh 
    goto skip_handler_1983
  control_1984:
    peek_exception $P1986
.annotate 'line', 1412
    .local pmc exception 
    .get_results (exception) 
    .const 'Sub' $P1989 = "301_1338064439.457" 
    newclosure $P1996, $P1989
    $P1996(exception)
    new $P1997, 'Integer'
    set $P1997, 1
    set exception["handled"], $P1997
    set $I1998, exception["handled"]
    eq $I1998, 1, handled_1987
    rethrow exception
  handled_1987:
    finalize $P1986
    .return (exception)
  skip_handler_1983:
.annotate 'line', 1410
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1988"  :anon :subid("301_1338064439.457") :outer("300_1338064439.457")
    .param pmc param_1990
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1412
    .lex "$_", param_1990
    find_lex $P1991, "$_"
    set $P1992, $P1991
    .lex "$!", $P1992
.annotate 'line', 1413
    find_lex $P1993, "$_"
    unless_null $P1993, vivify_826
    new $P1993, "Undef"
  vivify_826:
    say $P1993
.annotate 'line', 1414
    find_lex $P1994, "self"
    nqp_decontainerize $P1995, $P1994
    $P1995."usage"()
.annotate 'line', 1415
    exit 1
.annotate 'line', 1412
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "evalfiles" :anon :subid("127_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_2003
    .param pmc param_2004
    .param pmc param_2005 :slurpy
    .param pmc param_2006 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1429
    .const 'Sub' $P2023 = "302_1338064439.457" 
    capture_lex $P2023
    new $P2002, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2002, control_2001
    push_eh $P2002
    .lex "self", param_2003
    .lex "$files", param_2004
    .lex "@args", param_2005
    .lex "%adverbs", param_2006
.annotate 'line', 1430
    new $P102, "Undef"
    set $P2007, $P102
    .lex "$target", $P2007
.annotate 'line', 1431
    new $P103, "Undef"
    set $P2008, $P103
    .lex "$encoding", $P2008
.annotate 'line', 1432
    $P2010 = root_new ['parrot';'ResizablePMCArray']
    set $P2009, $P2010
    .lex "@files", $P2009
.annotate 'line', 1434
    $P2012 = root_new ['parrot';'ResizablePMCArray']
    set $P2011, $P2012
    .lex "@codes", $P2011
.annotate 'line', 1451
    new $P104, "Undef"
    set $P2013, $P104
    .lex "$code", $P2013
.annotate 'line', 1452
    new $P105, "Undef"
    set $P2014, $P105
    .lex "$?FILES", $P2014
.annotate 'line', 1453
    new $P106, "Undef"
    set $P2015, $P106
    .lex "$r", $P2015
.annotate 'line', 1430
    set $P2016, param_2006
    unless_null $P2016, vivify_831
    $P2016 = root_new ['parrot';'Hash']
  vivify_831:
    set $P107, $P2016["target"]
    unless_null $P107, vivify_832
    new $P107, "Undef"
  vivify_832:
    set $S100, $P107
    downcase $S101, $S100
    new $P108, 'String'
    set $P108, $S101
    set $P2007, $P108
.annotate 'line', 1431
    set $P2017, param_2006
    unless_null $P2017, vivify_833
    $P2017 = root_new ['parrot';'Hash']
  vivify_833:
    set $P107, $P2017["encoding"]
    unless_null $P107, vivify_834
    new $P107, "Undef"
  vivify_834:
    set $P2008, $P107
.annotate 'line', 1432
    set $P108, param_2004
    unless_null $P108, vivify_835
    new $P108, "Undef"
  vivify_835:
    does $I100, $P108, "array"
    if $I100, if_2018
    set $P110, param_2004
    unless_null $P110, vivify_836
    new $P110, "Undef"
  vivify_836:
    new $P111, "ResizablePMCArray"
    push $P111, $P110
    set $P107, $P111
    goto if_2018_end
  if_2018:
    set $P109, param_2004
    unless_null $P109, vivify_837
    new $P109, "Undef"
  vivify_837:
    set $P107, $P109
  if_2018_end:
    set $P2009, $P107
.annotate 'line', 1433
    set $P2019, $P2009
    unless_null $P2019, vivify_838
    $P2019 = root_new ['parrot';'ResizablePMCArray']
  vivify_838:
    join $S100, ",", $P2019
    new $P107, 'String'
    set $P107, $S100
    set $P108, param_2003
    nqp_decontainerize $P109, $P108
    nqp_get_sc_object $P110, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_bind_attr_obj $P109, $P110, "$!user_progname", 8, $P107
.annotate 'line', 1429
    set $P2020, $P2011
    unless_null $P2020, vivify_839
    $P2020 = root_new ['parrot';'ResizablePMCArray']
  vivify_839:
.annotate 'line', 1435
    set $P2021, $P2009
    unless_null $P2021, vivify_840
    $P2021 = root_new ['parrot';'ResizablePMCArray']
  vivify_840:
    defined $I100, $P2021
    unless $I100, for_undef_841
    iter $P107, $P2021
    new $P112, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P112, loop2047_handler
    push_eh $P112
  loop2047_test:
    unless $P107, loop2047_done
    shift $P108, $P107
  loop2047_redo:
    .const 'Sub' $P2023 = "302_1338064439.457" 
    capture_lex $P2023
    $P2023($P108)
  loop2047_next:
    goto loop2047_test
  loop2047_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P113, exception, 'type'
    eq $P113, .CONTROL_LOOP_NEXT, loop2047_next
    eq $P113, .CONTROL_LOOP_REDO, loop2047_redo
  loop2047_done:
    pop_eh 
  for_undef_841:
.annotate 'line', 1451
    set $P2048, $P2011
    unless_null $P2048, vivify_851
    $P2048 = root_new ['parrot';'ResizablePMCArray']
  vivify_851:
    join $S100, "", $P2048
    new $P107, 'String'
    set $P107, $S100
    set $P2013, $P107
.annotate 'line', 1452
    set $P2049, $P2009
    unless_null $P2049, vivify_852
    $P2049 = root_new ['parrot';'ResizablePMCArray']
  vivify_852:
    join $S100, " ", $P2049
    new $P107, 'String'
    set $P107, $S100
    set $P2014, $P107
.annotate 'line', 1453
    set $P107, param_2003
    nqp_decontainerize $P108, $P107
    set $P109, $P2013
    unless_null $P109, vivify_853
    new $P109, "Undef"
  vivify_853:
    set $P2050, param_2005
    unless_null $P2050, vivify_854
    $P2050 = root_new ['parrot';'ResizablePMCArray']
  vivify_854:
    set $P2051, param_2006
    unless_null $P2051, vivify_855
    $P2051 = root_new ['parrot';'Hash']
  vivify_855:
    $P110 = $P108."eval"($P109, $P2050 :flat, $P2051 :flat)
    set $P2015, $P110
.annotate 'line', 1454
    set $P109, $P2007
    unless_null $P109, vivify_856
    new $P109, "Undef"
  vivify_856:
    set $S100, $P109
    iseq $I100, $S100, ""
    unless $I100, unless_2053
    new $P108, 'Integer'
    set $P108, $I100
    goto unless_2053_end
  unless_2053:
    set $P110, $P2007
    unless_null $P110, vivify_857
    new $P110, "Undef"
  vivify_857:
    set $S101, $P110
    iseq $I101, $S101, "pir"
    new $P108, 'Integer'
    set $P108, $I101
  unless_2053_end:
    if $P108, if_2052
.annotate 'line', 1457
    new $P111, "Exception"
    set $P111['type'], .CONTROL_RETURN
    set $P112, param_2003
    nqp_decontainerize $P113, $P112
    set $P114, $P2015
    unless_null $P114, vivify_858
    new $P114, "Undef"
  vivify_858:
    set $P115, $P2007
    unless_null $P115, vivify_859
    new $P115, "Undef"
  vivify_859:
    set $P2054, param_2006
    unless_null $P2054, vivify_860
    $P2054 = root_new ['parrot';'Hash']
  vivify_860:
    $P116 = $P113."dumper"($P114, $P115, $P2054 :flat)
    setattribute $P111, 'payload', $P116
    throw $P111
.annotate 'line', 1456
    goto if_2052_end
  if_2052:
.annotate 'line', 1455
    new $P111, "Exception"
    set $P111['type'], .CONTROL_RETURN
    set $P112, $P2015
    unless_null $P112, vivify_861
    new $P112, "Undef"
  vivify_861:
    setattribute $P111, 'payload', $P112
    throw $P111
  if_2052_end:
.annotate 'line', 1429
    .return ($P107)
  control_2001:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P108, exception, "payload"
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2022"  :anon :subid("302_1338064439.457") :outer("127_1338064439.457")
    .param pmc param_2026
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1435
    .const 'Sub' $P2028 = "303_1338064439.457" 
    capture_lex $P2028
.annotate 'line', 1436
    new $P109, "Undef"
    set $P2024, $P109
    .lex "$in-handle", $P2024
.annotate 'line', 1437
    new $P110, "Undef"
    set $P2025, $P110
    .lex "$err", $P2025
    .lex "$_", param_2026
.annotate 'line', 1436
    new $P111, "FileHandle"
    set $P2024, $P111
.annotate 'line', 1437
    new $P111, "Float"
    assign $P111, 0
    set $P2025, $P111
.annotate 'line', 1438
    .const 'Sub' $P2028 = "303_1338064439.457" 
    capture_lex $P2028
    $P2028()
.annotate 'line', 1449
    set $P112, $P2025
    unless_null $P112, vivify_849
    new $P112, "Undef"
  vivify_849:
    if $P112, if_2046
    set $P111, $P112
    goto if_2046_end
  if_2046:
    set $P113, $P2025
    unless_null $P113, vivify_850
    new $P113, "Undef"
  vivify_850:
    die $P113
  if_2046_end:
.annotate 'line', 1435
    .return ($P111)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block2027"  :anon :subid("303_1338064439.457") :outer("302_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1438
    .const 'Sub' $P2036 = "304_1338064439.457" 
    capture_lex $P2036
    new $P2032, 'ExceptionHandler'
    set_label $P2032, control_2031
    $P2032."handle_types_except"(.CONTROL_ALL)
    push_eh $P2032
.annotate 'line', 1442
    find_lex $P111, "$in-handle"
    unless_null $P111, vivify_842
    new $P111, "Undef"
  vivify_842:
    find_lex $P112, "$encoding"
    unless_null $P112, vivify_843
    new $P112, "Undef"
  vivify_843:
    $P111."encoding"($P112)
.annotate 'line', 1443
    find_lex $P2029, "@codes"
    unless_null $P2029, vivify_844
    $P2029 = root_new ['parrot';'ResizablePMCArray']
  vivify_844:
    find_lex $P111, "$in-handle"
    unless_null $P111, vivify_845
    new $P111, "Undef"
  vivify_845:
    find_lex $P112, "$_"
    unless_null $P112, vivify_846
    new $P112, "Undef"
  vivify_846:
    $P113 = $P111."readall"($P112)
    push $P2029, $P113
.annotate 'line', 1444
    find_lex $P111, "$in-handle"
    unless_null $P111, vivify_847
    new $P111, "Undef"
  vivify_847:
    $P111."close"()
.annotate 'line', 1438
    pop_eh 
    goto skip_handler_2030
  control_2031:
    peek_exception $P2033
.annotate 'line', 1445
    .local pmc exception 
    .get_results (exception) 
    .const 'Sub' $P2036 = "304_1338064439.457" 
    newclosure $P2043, $P2036
    $P2043(exception)
    new $P2044, 'Integer'
    set $P2044, 1
    set exception["handled"], $P2044
    set $I2045, exception["handled"]
    eq $I2045, 1, handled_2034
    rethrow exception
  handled_2034:
    finalize $P2033
    .return (exception)
  skip_handler_2030:
.annotate 'line', 1438
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2035"  :anon :subid("304_1338064439.457") :outer("303_1338064439.457")
    .param pmc param_2037
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1445
    .lex "$_", param_2037
    find_lex $P2038, "$_"
    set $P2039, $P2038
    .lex "$!", $P2039
.annotate 'line', 1446
    new $P2040, 'String'
    set $P2040, "Error while reading from file: "
    find_lex $P2041, "$_"
    unless_null $P2041, vivify_848
    new $P2041, "Undef"
  vivify_848:
    concat $P2042, $P2040, $P2041
    store_lex "$err", $P2042
.annotate 'line', 1445
    .return ($P2042)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "compile" :anon :subid("128_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_2058
    .param pmc param_2059
    .param pmc param_2060 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1461
    .const 'Sub' $P2069 = "305_1338064439.457" 
    capture_lex $P2069
    new $P2057, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2057, control_2056
    push_eh $P2057
    .lex "self", param_2058
    .lex "$source", param_2059
    .lex "%adverbs", param_2060
.annotate 'line', 1462
    $P2062 = root_new ['parrot';'Hash']
    set $P2061, $P2062
    .lex "%*COMPILING", $P2061
.annotate 'line', 1464
    new $P102, "Undef"
    set $P2063, $P102
    .lex "$target", $P2063
.annotate 'line', 1465
    new $P103, "Undef"
    set $P2064, $P103
    .lex "$result", $P2064
.annotate 'line', 1466
    new $P104, "Undef"
    set $P2065, $P104
    .lex "$stderr", $P2065
.annotate 'line', 1462
    set $P2066, param_2060
    unless_null $P2066, vivify_862
    $P2066 = root_new ['parrot';'Hash']
  vivify_862:
    set $P107, $P2061
    unless_null $P107, vivify_863
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["%COMPILING"]
    unless_null $P107, vivify_864
    die "Contextual %*COMPILING not found"
  vivify_864:
    set $P2061, $P107
  vivify_863:
    set $P107["%?OPTIONS"], $P2066
.annotate 'line', 1464
    set $P2067, param_2060
    unless_null $P2067, vivify_865
    $P2067 = root_new ['parrot';'Hash']
  vivify_865:
    set $P105, $P2067["target"]
    unless_null $P105, vivify_866
    new $P105, "Undef"
  vivify_866:
    set $S100, $P105
    downcase $S101, $S100
    new $P106, 'String'
    set $P106, $S101
    set $P2063, $P106
.annotate 'line', 1465
    set $P105, param_2059
    unless_null $P105, vivify_867
    new $P105, "Undef"
  vivify_867:
    set $P2064, $P105
.annotate 'line', 1466
    getinterp $P105
    $P106 = $P105."stderr_handle"()
    set $P2065, $P106
.annotate 'line', 1467
    set $P106, param_2058
    nqp_decontainerize $P107, $P106
    $P108 = $P107."stages"()
    defined $I100, $P108
    unless $I100, for_undef_868
    iter $P105, $P108
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop2080_handler
    push_eh $P113
  loop2080_test:
    unless $P105, loop2080_done
    shift $P109, $P105
  loop2080_redo:
    .const 'Sub' $P2069 = "305_1338064439.457" 
    capture_lex $P2069
    $P2069($P109)
  loop2080_next:
    goto loop2080_test
  loop2080_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop2080_next
    eq $P114, .CONTROL_LOOP_REDO, loop2080_redo
  loop2080_done:
    pop_eh 
  for_undef_868:
.annotate 'line', 1477
    new $P105, "Exception"
    set $P105['type'], .CONTROL_RETURN
    set $P106, $P2064
    unless_null $P106, vivify_881
    new $P106, "Undef"
  vivify_881:
    setattribute $P105, 'payload', $P106
    throw $P105
.annotate 'line', 1461
    .return ()
  control_2056:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P105, exception, "payload"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2068"  :anon :subid("305_1338064439.457") :outer("128_1338064439.457")
    .param pmc param_2072
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1467
    .const 'Sub' $P2077 = "306_1338064439.457" 
    capture_lex $P2077
.annotate 'line', 1468
    new $P110, "Undef"
    set $P2070, $P110
    .lex "$timestamp", $P2070
.annotate 'line', 1470
    new $P111, "Undef"
    set $P2071, $P111
    .lex "$diff", $P2071
    .lex "$_", param_2072
.annotate 'line', 1468
    time $N100
    new $P112, 'Float'
    set $P112, $N100
    set $P2070, $P112
.annotate 'line', 1469
    find_lex $P112, "self"
    nqp_decontainerize $P113, $P112
    find_lex $P114, "$result"
    unless_null $P114, vivify_869
    new $P114, "Undef"
  vivify_869:
    find_lex $P2073, "%adverbs"
    unless_null $P2073, vivify_870
    $P2073 = root_new ['parrot';'Hash']
  vivify_870:
    find_lex $P115, "$_"
    unless_null $P115, vivify_871
    new $P115, "Undef"
  vivify_871:
    set $S100, $P115
    $P116 = $P113.$S100($P114, $P2073 :flat)
    store_lex "$result", $P116
.annotate 'line', 1470
    time $N100
    new $P112, 'Float'
    set $P112, $N100
    set $P113, $P2070
    unless_null $P113, vivify_872
    new $P113, "Undef"
  vivify_872:
    sub $P114, $P112, $P113
    set $P2071, $P114
.annotate 'line', 1471
    find_lex $P2075, "%adverbs"
    unless_null $P2075, vivify_873
    $P2075 = root_new ['parrot';'Hash']
  vivify_873:
    set $P112, $P2075["stagestats"]
    unless_null $P112, vivify_874
    new $P112, "Undef"
  vivify_874:
    unless $P112, if_2074_end
    .const 'Sub' $P2077 = "306_1338064439.457" 
    capture_lex $P2077
    $P2077()
  if_2074_end:
.annotate 'line', 1475
    find_lex $P113, "$_"
    unless_null $P113, vivify_879
    new $P113, "Undef"
  vivify_879:
    set $S100, $P113
    find_lex $P114, "$target"
    unless_null $P114, vivify_880
    new $P114, "Undef"
  vivify_880:
    set $S101, $P114
    iseq $I101, $S100, $S101
    if $I101, if_2079
    new $P112, 'Integer'
    set $P112, $I101
    goto if_2079_end
  if_2079:
    die 0, .CONTROL_LOOP_LAST
  if_2079_end:
.annotate 'line', 1467
    .return ($P112)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2076"  :anon :subid("306_1338064439.457") :outer("305_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1472
    new $P113, "Undef"
    set $P2078, $P113
    .lex "$difffmt", $P2078
    find_lex $P114, "$diff"
    unless_null $P114, vivify_875
    new $P114, "Undef"
  vivify_875:
    new $P115, "ResizablePMCArray"
    push $P115, $P114
    sprintf $S100, "%.3f", $P115
    new $P116, 'String'
    set $P116, $S100
    set $P2078, $P116
.annotate 'line', 1473
    find_lex $P114, "$stderr"
    unless_null $P114, vivify_876
    new $P114, "Undef"
  vivify_876:
    new $P115, 'String'
    set $P115, "Stage "
    find_lex $P116, "$_"
    unless_null $P116, vivify_877
    new $P116, "Undef"
  vivify_877:
    concat $P117, $P115, $P116
    concat $P118, $P117, ": "
    set $P119, $P2078
    unless_null $P119, vivify_878
    new $P119, "Undef"
  vivify_878:
    concat $P120, $P118, $P119
    concat $P121, $P120, "\n"
    $P122 = $P114."print"($P121)
.annotate 'line', 1471
    .return ($P122)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "parse" :anon :subid("129_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_2084
    .param pmc param_2085
    .param pmc param_2086 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1480
    .const 'Sub' $P2095 = "307_1338064439.457" 
    capture_lex $P2095
    new $P2083, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2083, control_2082
    push_eh $P2083
    .lex "self", param_2084
    .lex "$source", param_2085
    .lex "%adverbs", param_2086
.annotate 'line', 1481
    new $P102, "Undef"
    set $P2087, $P102
    .lex "$s", $P2087
.annotate 'line', 1490
    new $P103, "Undef"
    set $P2088, $P103
    .lex "$grammar", $P2088
.annotate 'line', 1491
    new $P104, "Undef"
    set $P2089, $P104
    .lex "$actions", $P2089
.annotate 'line', 1494
    new $P105, "Undef"
    set $P2090, $P105
    .lex "$match", $P2090
.annotate 'line', 1481
    set $P106, param_2085
    unless_null $P106, vivify_882
    new $P106, "Undef"
  vivify_882:
    set $P2087, $P106
.annotate 'line', 1482
    set $P2092, param_2086
    unless_null $P2092, vivify_883
    $P2092 = root_new ['parrot';'Hash']
  vivify_883:
    set $P106, $P2092["transcode"]
    unless_null $P106, vivify_884
    new $P106, "Undef"
  vivify_884:
    unless $P106, if_2091_end
.annotate 'line', 1483
    set $P2093, param_2086
    unless_null $P2093, vivify_885
    $P2093 = root_new ['parrot';'Hash']
  vivify_885:
    set $P108, $P2093["transcode"]
    unless_null $P108, vivify_886
    new $P108, "Undef"
  vivify_886:
    set $S100, $P108
    split $P109, " ", $S100
    defined $I100, $P109
    unless $I100, for_undef_887
    iter $P107, $P109
    new $P112, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P112, loop2106_handler
    push_eh $P112
  loop2106_test:
    unless $P107, loop2106_done
    shift $P110, $P107
  loop2106_redo:
    .const 'Sub' $P2095 = "307_1338064439.457" 
    capture_lex $P2095
    $P2095($P110)
  loop2106_next:
    goto loop2106_test
  loop2106_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P113, exception, 'type'
    eq $P113, .CONTROL_LOOP_NEXT, loop2106_next
    eq $P113, .CONTROL_LOOP_REDO, loop2106_redo
  loop2106_done:
    pop_eh 
  for_undef_887:
  if_2091_end:
.annotate 'line', 1490
    set $P106, param_2084
    nqp_decontainerize $P107, $P106
    $P108 = $P107."parsegrammar"()
    set $P2088, $P108
.annotate 'line', 1480
    set $P106, $P2089
    unless_null $P106, vivify_890
    new $P106, "Undef"
  vivify_890:
.annotate 'line', 1492
    set $P2108, param_2086
    unless_null $P2108, vivify_891
    $P2108 = root_new ['parrot';'Hash']
  vivify_891:
    set $P106, $P2108["target"]
    unless_null $P106, vivify_892
    new $P106, "Undef"
  vivify_892:
    set $S100, $P106
    iseq $I100, $S100, "parse"
    if $I100, unless_2107_end
    set $P107, param_2084
    nqp_decontainerize $P108, $P107
    $P109 = $P108."parseactions"()
    set $P2089, $P109
  unless_2107_end:
.annotate 'line', 1493
    set $P2110, param_2086
    unless_null $P2110, vivify_893
    $P2110 = root_new ['parrot';'Hash']
  vivify_893:
    set $P106, $P2110["rxtrace"]
    unless_null $P106, vivify_894
    new $P106, "Undef"
  vivify_894:
    unless $P106, if_2109_end
    set $P107, $P2088
    unless_null $P107, vivify_895
    new $P107, "Undef"
  vivify_895:
    get_how $P108, $P107
    set $P109, $P2088
    unless_null $P109, vivify_896
    new $P109, "Undef"
  vivify_896:
    $P108."trace-on"($P109)
  if_2109_end:
.annotate 'line', 1494
    set $P106, $P2088
    unless_null $P106, vivify_897
    new $P106, "Undef"
  vivify_897:
    set $P107, $P2087
    unless_null $P107, vivify_898
    new $P107, "Undef"
  vivify_898:
    set $P108, $P2089
    unless_null $P108, vivify_899
    new $P108, "Undef"
  vivify_899:
    $P109 = $P106."parse"($P107, 0 :named("p"), $P108 :named("actions"))
    set $P2090, $P109
.annotate 'line', 1495
    set $P2112, param_2086
    unless_null $P2112, vivify_900
    $P2112 = root_new ['parrot';'Hash']
  vivify_900:
    set $P106, $P2112["rxtrace"]
    unless_null $P106, vivify_901
    new $P106, "Undef"
  vivify_901:
    unless $P106, if_2111_end
    set $P107, $P2088
    unless_null $P107, vivify_902
    new $P107, "Undef"
  vivify_902:
    get_how $P108, $P107
    set $P109, $P2088
    unless_null $P109, vivify_903
    new $P109, "Undef"
  vivify_903:
    $P108."trace-off"($P109)
  if_2111_end:
.annotate 'line', 1496
    set $P106, $P2090
    unless_null $P106, vivify_904
    new $P106, "Undef"
  vivify_904:
    if $P106, unless_2113_end
    set $P107, param_2084
    nqp_decontainerize $P108, $P107
    $P108."panic"("Unable to parse source")
  unless_2113_end:
.annotate 'line', 1497
    new $P106, "Exception"
    set $P106['type'], .CONTROL_RETURN
    set $P107, $P2090
    unless_null $P107, vivify_905
    new $P107, "Undef"
  vivify_905:
    setattribute $P106, 'payload', $P107
    throw $P106
.annotate 'line', 1480
    .return ()
  control_2082:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P106, exception, "payload"
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2094"  :anon :subid("307_1338064439.457") :outer("129_1338064439.457")
    .param pmc param_2096
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1483
    .const 'Sub' $P2098 = "308_1338064439.457" 
    capture_lex $P2098
    .lex "$_", param_2096
.annotate 'line', 1484
    .const 'Sub' $P2098 = "308_1338064439.457" 
    capture_lex $P2098
    $P111 = $P2098()
.annotate 'line', 1483
    .return ($P111)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block2097"  :anon :subid("308_1338064439.457") :outer("307_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1484
    new $P2101, 'ExceptionHandler'
    set_label $P2101, control_2100
    $P2101."handle_types_except"(.CONTROL_ALL)
    push_eh $P2101
.annotate 'line', 1485
    find_lex $P111, "$s"
    unless_null $P111, vivify_888
    new $P111, "Undef"
  vivify_888:
    set $S101, $P111
.annotate 'line', 1486
    find_lex $P112, "$_"
    unless_null $P112, vivify_889
    new $P112, "Undef"
  vivify_889:
    set $S102, $P112
    find_encoding $I101, $S102
    trans_encoding $S103, $S101, $I101
.annotate 'line', 1485
    new $P113, 'String'
    set $P113, $S103
    store_lex "$s", $P113
.annotate 'line', 1484
    pop_eh 
    goto skip_handler_2099
  control_2100:
    peek_exception $P2102
    .local pmc exception 
    .get_results (exception) 
    new $P2104, 'Integer'
    set $P2104, 1
    set exception["handled"], $P2104
    set $I2105, exception["handled"]
    eq $I2105, 1, handled_2103
    rethrow exception
  handled_2103:
    finalize $P2102
    .return (exception)
  skip_handler_2099:
    .return ($P113)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "past" :anon :subid("130_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_2115
    .param pmc param_2116
    .param pmc param_2117 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1500
    .lex "self", param_2115
    .lex "$source", param_2116
    .lex "%adverbs", param_2117
.annotate 'line', 1501
    new $P102, "Undef"
    set $P2118, $P102
    .lex "$ast", $P2118
    set $P103, param_2116
    unless_null $P103, vivify_906
    new $P103, "Undef"
  vivify_906:
    $P104 = $P103."ast"()
    set $P2118, $P104
.annotate 'line', 1503
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "PAST"
    get_who $P105, $P104
    set $P106, $P105["Node"]
    set $P107, $P2118
    unless_null $P107, vivify_907
    new $P107, "Undef"
  vivify_907:
    $P108 = $P106."ACCEPTS"($P107)
    if $P108, unless_2119_end
.annotate 'line', 1502
    set $P109, param_2115
    nqp_decontainerize $P110, $P109
    new $P111, "String"
    assign $P111, "Unable to obtain ast from "
    set $P112, param_2116
    unless_null $P112, vivify_908
    new $P112, "Undef"
  vivify_908:
    typeof $S100, $P112
    concat $P113, $P111, $S100
    $P110."panic"($P113)
  unless_2119_end:
.annotate 'line', 1500
    set $P103, $P2118
    unless_null $P103, vivify_909
    new $P103, "Undef"
  vivify_909:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "post" :anon :subid("131_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_2121
    .param pmc param_2122
    .param pmc param_2123 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1507
    .lex "self", param_2121
    .lex "$source", param_2122
    .lex "%adverbs", param_2123
.annotate 'line', 1508
    compreg $P102, "PAST"
    set $P103, param_2122
    unless_null $P103, vivify_910
    new $P103, "Undef"
  vivify_910:
    set $P2124, param_2123
    unless_null $P2124, vivify_911
    $P2124 = root_new ['parrot';'Hash']
  vivify_911:
    $P104 = $P102."to_post"($P103, $P2124 :flat)
.annotate 'line', 1507
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "pirbegin" :anon :subid("132_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_2126
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1511
    .lex "self", param_2126
.annotate 'line', 1513
    new $P102, "String"
    assign $P102, ".include 'cclass.pasm'\n"
    concat $P103, $P102, ".include 'except_severity.pasm'\n"
    concat $P104, $P103, ".include 'except_types.pasm'\n"
.annotate 'line', 1514
    concat $P105, $P104, ".include 'iglobals.pasm'\n"
.annotate 'line', 1515
    concat $P106, $P105, ".include 'interpinfo.pasm'\n"
.annotate 'line', 1516
    concat $P107, $P106, ".include 'iterator.pasm'\n"
.annotate 'line', 1517
    concat $P108, $P107, ".include 'sysinfo.pasm'\n"
.annotate 'line', 1518
    concat $P109, $P108, ".include 'stat.pasm'\n"
.annotate 'line', 1519
    concat $P110, $P109, ".include 'datatypes.pasm'\n"
.annotate 'line', 1511
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "pir" :anon :subid("133_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_2128
    .param pmc param_2129
    .param pmc param_2130 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1523
    .lex "self", param_2128
    .lex "$source", param_2129
    .lex "%adverbs", param_2130
.annotate 'line', 1524
    set $P102, param_2128
    nqp_decontainerize $P103, $P102
    $P104 = $P103."pirbegin"()
    compreg $P105, "POST"
    set $P106, param_2129
    unless_null $P106, vivify_912
    new $P106, "Undef"
  vivify_912:
    set $P2131, param_2130
    unless_null $P2131, vivify_913
    $P2131 = root_new ['parrot';'Hash']
  vivify_913:
    $S100 = $P105."to_pir"($P106, $P2131 :flat)
    concat $P107, $P104, $S100
.annotate 'line', 1523
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "evalpmc" :anon :subid("134_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_2133
    .param pmc param_2134
    .param pmc param_2135 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1527
    .lex "self", param_2133
    .lex "$source", param_2134
    .lex "%adverbs", param_2135
.annotate 'line', 1528
    new $P102, "Undef"
    set $P2136, $P102
    .lex "$compiler", $P2136
    compreg $P103, "PIR"
    set $P2136, $P103
.annotate 'line', 1529
    set $P103, $P2136
    unless_null $P103, vivify_914
    new $P103, "Undef"
  vivify_914:
    set $P104, param_2134
    unless_null $P104, vivify_915
    new $P104, "Undef"
  vivify_915:
    $P105 = $P103($P104)
.annotate 'line', 1527
    .return ($P105)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "dumper" :anon :subid("135_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_2138
    .param pmc param_2139
    .param pmc param_2140
    .param pmc param_2141 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1532
    .const 'Sub' $P2145 = "309_1338064439.457" 
    capture_lex $P2145
    .lex "self", param_2138
    .lex "$obj", param_2139
    .lex "$name", param_2140
    .lex "%options", param_2141
.annotate 'line', 1533
    set $P2143, param_2141
    unless_null $P2143, vivify_916
    $P2143 = root_new ['parrot';'Hash']
  vivify_916:
    set $P103, $P2143["dumper"]
    unless_null $P103, vivify_917
    new $P103, "Undef"
  vivify_917:
    if $P103, if_2142
.annotate 'line', 1539
    set $P106, param_2139
    unless_null $P106, vivify_918
    new $P106, "Undef"
  vivify_918:
    set $P107, param_2140
    unless_null $P107, vivify_919
    new $P107, "Undef"
  vivify_919:
    $P109 = "_dumper"($P106, $P107)
.annotate 'line', 1538
    set $P102, $P109
.annotate 'line', 1533
    goto if_2142_end
  if_2142:
    .const 'Sub' $P2145 = "309_1338064439.457" 
    capture_lex $P2145
    $P105 = $P2145()
    set $P102, $P105
  if_2142_end:
.annotate 'line', 1532
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2144"  :anon :subid("309_1338064439.457") :outer("135_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1535
    new $P104, "Undef"
    set $P2146, $P104
    .lex "$dumper", $P2146
.annotate 'line', 1534
    load_bytecode "PCT/Dumper.pbc"
.annotate 'line', 1535
    find_lex $P2147, "%options"
    unless_null $P2147, vivify_920
    $P2147 = root_new ['parrot';'Hash']
  vivify_920:
    set $P105, $P2147["dumper"]
    unless_null $P105, vivify_921
    new $P105, "Undef"
  vivify_921:
    set $S100, $P105
    downcase $S101, $S100
    get_hll_global $P106, "GLOBAL"
    nqp_get_package_through_who $P107, $P106, "PCT"
    get_who $P108, $P107
    set $P2148, $P108["Dumper"]
    unless_null $P2148, vivify_922
    $P2148 = root_new ['parrot';'Hash']
  vivify_922:
    set $P109, $P2148[$S101]
    unless_null $P109, vivify_923
    new $P109, "Undef"
  vivify_923:
    set $P2146, $P109
.annotate 'line', 1536
    set $P105, $P2146
    unless_null $P105, vivify_924
    new $P105, "Undef"
  vivify_924:
    find_lex $P106, "$obj"
    unless_null $P106, vivify_925
    new $P106, "Undef"
  vivify_925:
    find_lex $P107, "$name"
    unless_null $P107, vivify_926
    new $P107, "Undef"
  vivify_926:
    $P108 = $P105($P106, $P107)
.annotate 'line', 1533
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "usage" :anon :subid("136_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_2150
    .param pmc param_2151 :optional
    .param int has_param_2151 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1543
    .lex "self", param_2150
    if has_param_2151, optparam_927
    new $P102, "Undef"
    set param_2151, $P102
  optparam_927:
    .lex "$name", param_2151
.annotate 'line', 1544
    set $P103, param_2151
    unless_null $P103, vivify_928
    new $P103, "Undef"
  vivify_928:
    unless $P103, if_2152_end
.annotate 'line', 1545
    set $P104, param_2151
    unless_null $P104, vivify_929
    new $P104, "Undef"
  vivify_929:
    "say"($P104)
  if_2152_end:
.annotate 'line', 1547
    set $P103, param_2150
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_get_attr_obj $P106, $P104, $P105, "$!usage", 4
    unless_null $P106, vivify_930
    new $P106, "Undef"
  vivify_930:
    say $P106
.annotate 'line', 1548
    exit 0
.annotate 'line', 1543
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "version" :anon :subid("137_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_2154
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1551
    .lex "self", param_2154
.annotate 'line', 1552
    new $P102, "Undef"
    set $P2155, $P102
    .lex "$version", $P2155
.annotate 'line', 1553
    new $P103, "Undef"
    set $P2156, $P103
    .lex "$parver", $P2156
.annotate 'line', 1554
    new $P104, "Undef"
    set $P2157, $P104
    .lex "$parrev", $P2157
.annotate 'line', 1552
    set $P105, param_2154
    nqp_decontainerize $P106, $P105
    nqp_get_sc_object $P107, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_get_attr_obj $P2158, $P106, $P107, "%!config", 7
    unless_null $P2158, vivify_931
    $P2158 = root_new ['parrot';'Hash']
  vivify_931:
    set $P108, $P2158["version"]
    unless_null $P108, vivify_932
    new $P108, "Undef"
  vivify_932:
    set $P2155, $P108
.annotate 'line', 1553
    find_lex $P105, "$?PACKAGE"
    get_who $P106, $P105
    set $P2159, $P106["%parrot_config"]
    unless_null $P2159, vivify_933
    $P2159 = root_new ['parrot';'Hash']
  vivify_933:
    set $P107, $P2159["VERSION"]
    unless_null $P107, vivify_934
    new $P107, "Undef"
  vivify_934:
    set $P2156, $P107
.annotate 'line', 1554
    find_lex $P105, "$?PACKAGE"
    get_who $P106, $P105
    set $P2161, $P106["%parrot_config"]
    unless_null $P2161, vivify_935
    $P2161 = root_new ['parrot';'Hash']
  vivify_935:
    set $P107, $P2161["git_describe"]
    unless_null $P107, vivify_936
    new $P107, "Undef"
  vivify_936:
    set $P2160, $P107
    defined $I2163, $P2160
    if $I2163, default_2162
    new $P108, "String"
    assign $P108, "(unknown)"
    set $P2160, $P108
  default_2162:
    set $P2157, $P2160
.annotate 'line', 1555
    new $P105, 'String'
    set $P105, "This is "
    set $P106, param_2154
    nqp_decontainerize $P107, $P106
    nqp_get_sc_object $P108, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_get_attr_obj $P109, $P107, $P108, "$!language", 6
    unless_null $P109, vivify_937
    new $P109, "Undef"
  vivify_937:
    concat $P110, $P105, $P109
    concat $P111, $P110, " version "
    set $P112, $P2155
    unless_null $P112, vivify_938
    new $P112, "Undef"
  vivify_938:
    concat $P113, $P111, $P112
    concat $P114, $P113, " built on parrot "
    set $P115, $P2156
    unless_null $P115, vivify_939
    new $P115, "Undef"
  vivify_939:
    concat $P116, $P114, $P115
    concat $P117, $P116, " revision "
    set $P118, $P2157
    unless_null $P118, vivify_940
    new $P118, "Undef"
  vivify_940:
    concat $P119, $P117, $P118
    say $P119
.annotate 'line', 1556
    exit 0
.annotate 'line', 1551
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "show-config" :anon :subid("138_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_2165
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1559
    .const 'Sub' $P2173 = "311_1338064439.457" 
    capture_lex $P2173
    .const 'Sub' $P2168 = "310_1338064439.457" 
    capture_lex $P2168
    .lex "self", param_2165
.annotate 'line', 1560
    find_lex $P103, "$?PACKAGE"
    get_who $P104, $P103
    set $P2166, $P104["%parrot_config"]
    unless_null $P2166, vivify_941
    $P2166 = root_new ['parrot';'Hash']
  vivify_941:
    defined $I100, $P2166
    unless $I100, for_undef_942
    iter $P102, $P2166
    new $P106, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P106, loop2170_handler
    push_eh $P106
  loop2170_test:
    unless $P102, loop2170_done
    shift $P105, $P102
  loop2170_redo:
    .const 'Sub' $P2168 = "310_1338064439.457" 
    capture_lex $P2168
    $P2168($P105)
  loop2170_next:
    goto loop2170_test
  loop2170_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P107, exception, 'type'
    eq $P107, .CONTROL_LOOP_NEXT, loop2170_next
    eq $P107, .CONTROL_LOOP_REDO, loop2170_redo
  loop2170_done:
    pop_eh 
  for_undef_942:
.annotate 'line', 1563
    set $P103, param_2165
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_get_attr_obj $P2171, $P104, $P105, "%!config", 7
    unless_null $P2171, vivify_945
    $P2171 = root_new ['parrot';'Hash']
  vivify_945:
    defined $I100, $P2171
    unless $I100, for_undef_946
    iter $P102, $P2171
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop2175_handler
    push_eh $P107
  loop2175_test:
    unless $P102, loop2175_done
    shift $P106, $P102
  loop2175_redo:
    .const 'Sub' $P2173 = "311_1338064439.457" 
    capture_lex $P2173
    $P2173($P106)
  loop2175_next:
    goto loop2175_test
  loop2175_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop2175_next
    eq $P108, .CONTROL_LOOP_REDO, loop2175_redo
  loop2175_done:
    pop_eh 
  for_undef_946:
.annotate 'line', 1566
    exit 0
.annotate 'line', 1559
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2167"  :anon :subid("310_1338064439.457") :outer("138_1338064439.457")
    .param pmc param_2169
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1560
    .lex "$_", param_2169
.annotate 'line', 1561
    new $P106, "String"
    assign $P106, "parrot::"
    find_lex $P107, "$_"
    unless_null $P107, vivify_943
    new $P107, "Undef"
  vivify_943:
    $S100 = $P107."key"()
    concat $P108, $P106, $S100
    concat $P109, $P108, "="
    find_lex $P110, "$_"
    unless_null $P110, vivify_944
    new $P110, "Undef"
  vivify_944:
    $S101 = $P110."value"()
    concat $P111, $P109, $S101
    say $P111
.annotate 'line', 1560
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2172"  :anon :subid("311_1338064439.457") :outer("138_1338064439.457")
    .param pmc param_2174
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1563
    .lex "$_", param_2174
.annotate 'line', 1564
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_get_attr_obj $P110, $P108, $P109, "$!language", 6
    unless_null $P110, vivify_947
    new $P110, "Undef"
  vivify_947:
    concat $P111, $P110, "::"
    find_lex $P112, "$_"
    unless_null $P112, vivify_948
    new $P112, "Undef"
  vivify_948:
    $S100 = $P112."key"()
    concat $P113, $P111, $S100
    concat $P114, $P113, "="
    find_lex $P115, "$_"
    unless_null $P115, vivify_949
    new $P115, "Undef"
  vivify_949:
    $S101 = $P115."value"()
    concat $P116, $P114, $S101
    say $P116
.annotate 'line', 1563
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "nqpevent" :anon :subid("139_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_2177
    .param pmc param_2178 :optional
    .param int has_param_2178 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1569
    .const 'Sub' $P2183 = "312_1338064439.457" 
    capture_lex $P2183
    .lex "self", param_2177
    if has_param_2178, optparam_950
    new $P102, "Undef"
    set param_2178, $P102
  optparam_950:
    .lex "$spec", param_2178
.annotate 'line', 1572
    new $P103, "Undef"
    set $P2179, $P103
    .lex "$fh", $P2179
.annotate 'line', 1571
    nqpevent "nqpevent: log finished"
.annotate 'line', 1572
    null $P104
    nqpevent_fh $P105, $P104
    set $P2179, $P105
.annotate 'line', 1573
    set $P104, $P2179
    unless_null $P104, vivify_951
    new $P104, "Undef"
  vivify_951:
    unless $P104, if_2180_end
    set $P105, $P2179
    unless_null $P105, vivify_952
    new $P105, "Undef"
  vivify_952:
    $P105."flush"()
  if_2180_end:
.annotate 'line', 1576
    set $P105, param_2178
    unless_null $P105, vivify_953
    new $P105, "Undef"
  vivify_953:
    if $P105, if_2181
    set $P104, $P105
    goto if_2181_end
  if_2181:
    .const 'Sub' $P2183 = "312_1338064439.457" 
    capture_lex $P2183
    $P108 = $P2183()
    set $P104, $P108
  if_2181_end:
.annotate 'line', 1569
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2182"  :anon :subid("312_1338064439.457") :outer("139_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1576
    .const 'Sub' $P2190 = "313_1338064439.457" 
    capture_lex $P2190
.annotate 'line', 1578
    new $P106, "Undef"
    set $P2184, $P106
    .lex "$file", $P2184
.annotate 'line', 1579
    new $P107, "Undef"
    set $P2185, $P107
    .lex "$flags", $P2185
.annotate 'line', 1577
    find_lex $P108, "$spec"
    unless_null $P108, vivify_954
    new $P108, "Undef"
  vivify_954:
    set $S100, $P108
    split $P109, ";", $S100
    store_lex "$spec", $P109
.annotate 'line', 1578
    find_lex $P2186, "$spec"
    unless_null $P2186, vivify_955
    $P2186 = root_new ['parrot';'ResizablePMCArray']
  vivify_955:
    set $P108, $P2186[0]
    unless_null $P108, vivify_956
    new $P108, "Undef"
  vivify_956:
    set $P2184, $P108
.annotate 'line', 1579
    find_lex $P2187, "$spec"
    unless_null $P2187, vivify_957
    $P2187 = root_new ['parrot';'ResizablePMCArray']
  vivify_957:
    set $P108, $P2187[1]
    unless_null $P108, vivify_958
    new $P108, "Undef"
  vivify_958:
    set $P2185, $P108
.annotate 'line', 1580
    set $P108, $P2184
    unless_null $P108, vivify_959
    new $P108, "Undef"
  vivify_959:
    set $S100, $P108
    isgt $I100, $S100, ""
    if $I100, if_2188
.annotate 'line', 1586
    getinterp $P110
    $P112 = $P110."stderr_handle"()
    nqpevent_fh $P113, $P112
.annotate 'line', 1585
    goto if_2188_end
  if_2188:
.annotate 'line', 1580
    .const 'Sub' $P2190 = "313_1338064439.457" 
    capture_lex $P2190
    $P2190()
  if_2188_end:
.annotate 'line', 1588
    set $P108, $P2185
    unless_null $P108, vivify_964
    new $P108, "Undef"
  vivify_964:
    set $S100, $P108
    iseq $I101, $S100, ""
    if $I101, if_2193
    set $P109, $P2185
    unless_null $P109, vivify_965
    new $P109, "Undef"
  vivify_965:
    set $I100, $P109
    goto if_2193_end
  if_2193:
    set $I100, 31
  if_2193_end:
    nqpdebflags $I102, $I100
.annotate 'line', 1589
    nqpevent "nqpevent: log started"
.annotate 'line', 1576
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2189"  :anon :subid("313_1338064439.457") :outer("312_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1581
    new $P109, "Undef"
    set $P2191, $P109
    .lex "$fh", $P2191
    new $P110, "FileHandle"
    set $P2191, $P110
.annotate 'line', 1582
    set $P110, $P2191
    unless_null $P110, vivify_960
    new $P110, "Undef"
  vivify_960:
    find_lex $P111, "$file"
    unless_null $P111, vivify_961
    new $P111, "Undef"
  vivify_961:
    $P112 = $P110."open"($P111, "w")
    if $P112, unless_2192_end
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    new $P115, 'String'
    set $P115, "Cannot write to "
    find_lex $P116, "$file"
    unless_null $P116, vivify_962
    new $P116, "Undef"
  vivify_962:
    concat $P117, $P115, $P116
    $P114."panic"($P117)
  unless_2192_end:
.annotate 'line', 1583
    set $P110, $P2191
    unless_null $P110, vivify_963
    new $P110, "Undef"
  vivify_963:
    nqpevent_fh $P111, $P110
.annotate 'line', 1580
    .return ($P111)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "removestage" :anon :subid("140_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_2195
    .param pmc param_2196
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1593
    .const 'Sub' $P2201 = "314_1338064439.457" 
    capture_lex $P2201
    .lex "self", param_2195
    .lex "$stagename", param_2196
.annotate 'line', 1594
    $P2198 = root_new ['parrot';'ResizablePMCArray']
    set $P2197, $P2198
    .lex "@new_stages", $P2197
    new $P102, "ResizableStringArray"
    set $P2197, $P102
.annotate 'line', 1595
    set $P103, param_2195
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_get_attr_obj $P2199, $P104, $P105, "@!stages", 0
    unless_null $P2199, vivify_966
    $P2199 = root_new ['parrot';'ResizablePMCArray']
  vivify_966:
    defined $I100, $P2199
    unless $I100, for_undef_967
    iter $P102, $P2199
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop2205_handler
    push_eh $P108
  loop2205_test:
    unless $P102, loop2205_done
    shift $P106, $P102
  loop2205_redo:
    .const 'Sub' $P2201 = "314_1338064439.457" 
    capture_lex $P2201
    $P2201($P106)
  loop2205_next:
    goto loop2205_test
  loop2205_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop2205_next
    eq $P109, .CONTROL_LOOP_REDO, loop2205_redo
  loop2205_done:
    pop_eh 
  for_undef_967:
.annotate 'line', 1600
    set $P2206, $P2197
    unless_null $P2206, vivify_972
    $P2206 = root_new ['parrot';'ResizablePMCArray']
  vivify_972:
    set $P102, param_2195
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_bind_attr_obj $P103, $P104, "@!stages", 0, $P2206
.annotate 'line', 1593
    .return ($P2206)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2200"  :anon :subid("314_1338064439.457") :outer("140_1338064439.457")
    .param pmc param_2202
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1595
    .lex "$_", param_2202
.annotate 'line', 1596
    find_lex $P108, "$_"
    unless_null $P108, vivify_968
    new $P108, "Undef"
  vivify_968:
    set $S100, $P108
    find_lex $P109, "$stagename"
    unless_null $P109, vivify_969
    new $P109, "Undef"
  vivify_969:
    set $S101, $P109
    isne $I101, $S100, $S101
    if $I101, if_2203
    new $P107, 'Integer'
    set $P107, $I101
    goto if_2203_end
  if_2203:
.annotate 'line', 1597
    find_lex $P2204, "@new_stages"
    unless_null $P2204, vivify_970
    $P2204 = root_new ['parrot';'ResizablePMCArray']
  vivify_970:
    find_lex $P110, "$_"
    unless_null $P110, vivify_971
    new $P110, "Undef"
  vivify_971:
    $P111 = $P2204."push"($P110)
.annotate 'line', 1596
    set $P107, $P111
  if_2203_end:
.annotate 'line', 1595
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "addstage" :anon :subid("141_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_2210
    .param pmc param_2211
    .param pmc param_2212 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1603
    .const 'Sub' $P2230 = "316_1338064439.457" 
    capture_lex $P2230
    .const 'Sub' $P2224 = "315_1338064439.457" 
    capture_lex $P2224
    new $P2209, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2209, control_2208
    push_eh $P2209
    .lex "self", param_2210
    .lex "$stagename", param_2211
    .lex "%adverbs", param_2212
.annotate 'line', 1604
    new $P102, "Undef"
    set $P2213, $P102
    .lex "$position", $P2213
.annotate 'line', 1605
    new $P103, "Undef"
    set $P2214, $P103
    .lex "$where", $P2214
.annotate 'line', 1618
    $P2216 = root_new ['parrot';'ResizablePMCArray']
    set $P2215, $P2216
    .lex "@new-stages", $P2215
.annotate 'line', 1603
    set $P104, $P2213
    unless_null $P104, vivify_973
    new $P104, "Undef"
  vivify_973:
    set $P104, $P2214
    unless_null $P104, vivify_974
    new $P104, "Undef"
  vivify_974:
.annotate 'line', 1606
    set $P2218, param_2212
    unless_null $P2218, vivify_975
    $P2218 = root_new ['parrot';'Hash']
  vivify_975:
    set $P104, $P2218["before"]
    unless_null $P104, vivify_976
    new $P104, "Undef"
  vivify_976:
    if $P104, if_2217
.annotate 'line', 1609
    set $P2221, param_2212
    unless_null $P2221, vivify_977
    $P2221 = root_new ['parrot';'Hash']
  vivify_977:
    set $P105, $P2221["after"]
    unless_null $P105, vivify_978
    new $P105, "Undef"
  vivify_978:
    if $P105, if_2220
.annotate 'line', 1612
    .const 'Sub' $P2224 = "315_1338064439.457" 
    capture_lex $P2224
    $P2224()
    goto if_2220_end
  if_2220:
.annotate 'line', 1610
    set $P2222, param_2212
    unless_null $P2222, vivify_982
    $P2222 = root_new ['parrot';'Hash']
  vivify_982:
    set $P106, $P2222["after"]
    unless_null $P106, vivify_983
    new $P106, "Undef"
  vivify_983:
    set $P2214, $P106
.annotate 'line', 1611
    new $P106, "String"
    assign $P106, "after"
    set $P2213, $P106
  if_2220_end:
.annotate 'line', 1609
    goto if_2217_end
  if_2217:
.annotate 'line', 1607
    set $P2219, param_2212
    unless_null $P2219, vivify_984
    $P2219 = root_new ['parrot';'Hash']
  vivify_984:
    set $P105, $P2219["before"]
    unless_null $P105, vivify_985
    new $P105, "Undef"
  vivify_985:
    set $P2214, $P105
.annotate 'line', 1608
    new $P105, "String"
    assign $P105, "before"
    set $P2213, $P105
  if_2217_end:
.annotate 'line', 1618
    new $P104, "ResizableStringArray"
    set $P2215, $P104
.annotate 'line', 1619
    set $P105, param_2210
    nqp_decontainerize $P106, $P105
    $P107 = $P106."stages"()
    defined $I100, $P107
    unless $I100, for_undef_986
    iter $P104, $P107
    new $P110, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P110, loop2239_handler
    push_eh $P110
  loop2239_test:
    unless $P104, loop2239_done
    shift $P108, $P104
  loop2239_redo:
    .const 'Sub' $P2230 = "316_1338064439.457" 
    capture_lex $P2230
    $P2230($P108)
  loop2239_next:
    goto loop2239_test
  loop2239_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P111, exception, 'type'
    eq $P111, .CONTROL_LOOP_NEXT, loop2239_next
    eq $P111, .CONTROL_LOOP_REDO, loop2239_redo
  loop2239_done:
    pop_eh 
  for_undef_986:
.annotate 'line', 1632
    set $P104, param_2210
    nqp_decontainerize $P105, $P104
    set $P2240, $P2215
    unless_null $P2240, vivify_1000
    $P2240 = root_new ['parrot';'ResizablePMCArray']
  vivify_1000:
    $P106 = $P105."stages"($P2240)
.annotate 'line', 1603
    .return ($P106)
  control_2208:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P104, exception, "payload"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block2223"  :anon :subid("315_1338064439.457") :outer("141_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1613
    $P2226 = root_new ['parrot';'ResizablePMCArray']
    set $P2225, $P2226
    .lex "@new-stages", $P2225
    find_lex $P106, "self"
    nqp_decontainerize $P107, $P106
    $P108 = $P107."stages"()
    clone $P109, $P108
    set $P2225, $P109
.annotate 'line', 1614
    set $P2227, $P2225
    unless_null $P2227, vivify_979
    $P2227 = root_new ['parrot';'ResizablePMCArray']
  vivify_979:
    find_lex $P106, "$stagename"
    unless_null $P106, vivify_980
    new $P106, "Undef"
  vivify_980:
    push $P2227, $P106
.annotate 'line', 1615
    find_lex $P106, "self"
    nqp_decontainerize $P107, $P106
    set $P2228, $P2225
    unless_null $P2228, vivify_981
    $P2228 = root_new ['parrot';'ResizablePMCArray']
  vivify_981:
    $P107."stages"($P2228)
.annotate 'line', 1616
    new $P106, "Exception"
    set $P106['type'], .CONTROL_RETURN
    new $P107, "Float"
    assign $P107, 1
    setattribute $P106, 'payload', $P107
    throw $P106
.annotate 'line', 1612
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2229"  :anon :subid("316_1338064439.457") :outer("141_1338064439.457")
    .param pmc param_2231
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1619
    .lex "$_", param_2231
.annotate 'line', 1620
    find_lex $P110, "$_"
    unless_null $P110, vivify_987
    new $P110, "Undef"
  vivify_987:
    set $S100, $P110
    find_lex $P111, "$where"
    unless_null $P111, vivify_988
    new $P111, "Undef"
  vivify_988:
    set $S101, $P111
    iseq $I101, $S100, $S101
    if $I101, if_2232
.annotate 'line', 1629
    find_lex $P2238, "@new-stages"
    unless_null $P2238, vivify_989
    $P2238 = root_new ['parrot';'ResizablePMCArray']
  vivify_989:
    find_lex $P113, "$_"
    unless_null $P113, vivify_990
    new $P113, "Undef"
  vivify_990:
    push $P2238, $P113
.annotate 'line', 1628
    set $P109, $P2238
.annotate 'line', 1620
    goto if_2232_end
  if_2232:
.annotate 'line', 1621
    find_lex $P113, "$position"
    unless_null $P113, vivify_991
    new $P113, "Undef"
  vivify_991:
    set $S102, $P113
    iseq $I102, $S102, "before"
    if $I102, if_2233
.annotate 'line', 1625
    find_lex $P2236, "@new-stages"
    unless_null $P2236, vivify_992
    $P2236 = root_new ['parrot';'ResizablePMCArray']
  vivify_992:
    find_lex $P114, "$_"
    unless_null $P114, vivify_993
    new $P114, "Undef"
  vivify_993:
    push $P2236, $P114
.annotate 'line', 1626
    find_lex $P2237, "@new-stages"
    unless_null $P2237, vivify_994
    $P2237 = root_new ['parrot';'ResizablePMCArray']
  vivify_994:
    find_lex $P114, "$stagename"
    unless_null $P114, vivify_995
    new $P114, "Undef"
  vivify_995:
    push $P2237, $P114
.annotate 'line', 1624
    set $P112, $P2237
.annotate 'line', 1621
    goto if_2233_end
  if_2233:
.annotate 'line', 1622
    find_lex $P2234, "@new-stages"
    unless_null $P2234, vivify_996
    $P2234 = root_new ['parrot';'ResizablePMCArray']
  vivify_996:
    find_lex $P114, "$stagename"
    unless_null $P114, vivify_997
    new $P114, "Undef"
  vivify_997:
    push $P2234, $P114
.annotate 'line', 1623
    find_lex $P2235, "@new-stages"
    unless_null $P2235, vivify_998
    $P2235 = root_new ['parrot';'ResizablePMCArray']
  vivify_998:
    find_lex $P114, "$_"
    unless_null $P114, vivify_999
    new $P114, "Undef"
  vivify_999:
    push $P2235, $P114
.annotate 'line', 1621
    set $P112, $P2235
  if_2233_end:
.annotate 'line', 1620
    set $P109, $P112
  if_2232_end:
.annotate 'line', 1619
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "parse_name" :anon :subid("142_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_2242
    .param pmc param_2243
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1635
    .const 'Sub' $P2259 = "317_1338064439.457" 
    capture_lex $P2259
    .lex "self", param_2242
    .lex "$name", param_2243
.annotate 'line', 1636
    $P2245 = root_new ['parrot';'ResizablePMCArray']
    set $P2244, $P2245
    .lex "@ns", $P2244
.annotate 'line', 1637
    new $P102, "Undef"
    set $P2246, $P102
    .lex "$sigil", $P2246
.annotate 'line', 1640
    new $P103, "Undef"
    set $P2247, $P103
    .lex "$idx", $P2247
.annotate 'line', 1648
    $P2249 = root_new ['parrot';'ResizablePMCArray']
    set $P2248, $P2249
    .lex "@actual_ns", $P2248
.annotate 'line', 1636
    set $P104, param_2243
    unless_null $P104, vivify_1001
    new $P104, "Undef"
  vivify_1001:
    set $S100, $P104
    split $P105, "::", $S100
    set $P2244, $P105
.annotate 'line', 1637
    set $P2250, $P2244
    unless_null $P2250, vivify_1002
    $P2250 = root_new ['parrot';'ResizablePMCArray']
  vivify_1002:
    set $P104, $P2250[0]
    unless_null $P104, vivify_1003
    new $P104, "Undef"
  vivify_1003:
    set $S100, $P104
    substr $S101, $S100, 0, 1
    new $P105, 'String'
    set $P105, $S101
    set $P2246, $P105
.annotate 'line', 1640
    set $P104, $P2246
    unless_null $P104, vivify_1004
    new $P104, "Undef"
  vivify_1004:
    set $S100, $P104
    index $I100, "$@%&", $S100
    new $P105, 'Integer'
    set $P105, $I100
    set $P2247, $P105
.annotate 'line', 1641
    set $P104, $P2247
    unless_null $P104, vivify_1005
    new $P104, "Undef"
  vivify_1005:
    set $N100, $P104
    set $N101, 0
    isge $I100, $N100, $N101
    unless $I100, if_2251_end
.annotate 'line', 1642
    set $P2252, $P2244
    unless_null $P2252, vivify_1006
    $P2252 = root_new ['parrot';'ResizablePMCArray']
  vivify_1006:
    set $P105, $P2252[0]
    unless_null $P105, vivify_1007
    new $P105, "Undef"
  vivify_1007:
    set $S100, $P105
    substr $S101, $S100, 1
    new $P106, 'String'
    set $P106, $S101
    set $P2253, $P2244
    unless_null $P2253, vivify_1008
    $P2253 = root_new ['parrot';'ResizablePMCArray']
    set $P2244, $P2253
  vivify_1008:
    set $P2253[0], $P106
.annotate 'line', 1643
    set $P105, $P2246
    unless_null $P105, vivify_1009
    new $P105, "Undef"
  vivify_1009:
    set $P2254, $P2244
    unless_null $P2254, vivify_1010
    $P2254 = root_new ['parrot';'ResizablePMCArray']
  vivify_1010:
    set $P106, $P2254[-1]
    unless_null $P106, vivify_1011
    new $P106, "Undef"
  vivify_1011:
    concat $P107, $P105, $P106
    set $P2255, $P2244
    unless_null $P2255, vivify_1012
    $P2255 = root_new ['parrot';'ResizablePMCArray']
    set $P2244, $P2255
  vivify_1012:
    set $P2255[-1], $P107
  if_2251_end:
.annotate 'line', 1635
    set $P2256, $P2248
    unless_null $P2256, vivify_1013
    $P2256 = root_new ['parrot';'ResizablePMCArray']
  vivify_1013:
.annotate 'line', 1649
    set $P2257, $P2244
    unless_null $P2257, vivify_1014
    $P2257 = root_new ['parrot';'ResizablePMCArray']
  vivify_1014:
    defined $I100, $P2257
    unless $I100, for_undef_1015
    iter $P104, $P2257
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop2263_handler
    push_eh $P107
  loop2263_test:
    unless $P104, loop2263_done
    shift $P105, $P104
  loop2263_redo:
    .const 'Sub' $P2259 = "317_1338064439.457" 
    capture_lex $P2259
    $P2259($P105)
  loop2263_next:
    goto loop2263_test
  loop2263_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop2263_next
    eq $P108, .CONTROL_LOOP_REDO, loop2263_redo
  loop2263_done:
    pop_eh 
  for_undef_1015:
.annotate 'line', 1635
    set $P2264, $P2248
    unless_null $P2264, vivify_1019
    $P2264 = root_new ['parrot';'ResizablePMCArray']
  vivify_1019:
    .return ($P2264)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2258"  :anon :subid("317_1338064439.457") :outer("142_1338064439.457")
    .param pmc param_2260
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1649
    .lex "$_", param_2260
.annotate 'line', 1650
    find_lex $P107, "$_"
    unless_null $P107, vivify_1016
    new $P107, "Undef"
  vivify_1016:
    set $S100, $P107
    iseq $I101, $S100, ""
    unless $I101, unless_2261
    new $P106, 'Integer'
    set $P106, $I101
    goto unless_2261_end
  unless_2261:
    find_lex $P2262, "@actual_ns"
    unless_null $P2262, vivify_1017
    $P2262 = root_new ['parrot';'ResizablePMCArray']
  vivify_1017:
    find_lex $P108, "$_"
    unless_null $P108, vivify_1018
    new $P108, "Undef"
  vivify_1018:
    push $P2262, $P108
    set $P106, $P2262
  unless_2261_end:
.annotate 'line', 1649
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "lineof" :anon :subid("143_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_2266
    .param pmc param_2267
    .param pmc param_2268
    .param pmc param_2269 :optional :named("cache")
    .param int has_param_2269 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1655
    .lex "self", param_2266
    .lex "$target", param_2267
    .lex "$pos", param_2268
    if has_param_2269, optparam_1020
    new $P102, "Undef"
    set param_2269, $P102
  optparam_1020:
    .lex "$cache", param_2269
.annotate 'line', 1656

            .local pmc target, linepos
            .local int pos, cache
            target = find_lex '$target'
            $P0 = find_lex '$pos'
            pos = $P0
            $P0 = find_lex '$cache'
            cache = $P0

            # If we've previously cached C<linepos> for target, we use it.
            unless cache goto linepos_build
            linepos = getprop target, '!linepos'
            unless null linepos goto linepos_done

            # calculate a new linepos array.
        linepos_build:
            linepos = new ['ResizableIntegerArray']
            unless cache goto linepos_build_1
            setprop target, '!linepos', linepos
        linepos_build_1:
            .local string s
            .local int jpos, eos
            s = target
            eos = length s
            jpos = 0
            # Search for all of the newline markers in C<target>.  When we
            # find one, mark the ending offset of the line in C<linepos>.
        linepos_loop:
            jpos = find_cclass .CCLASS_NEWLINE, s, jpos, eos
            unless jpos < eos goto linepos_done_1
            $I0 = ord s, jpos
            inc jpos
            push linepos, jpos
            # Treat \r\n as a single logical newline.
            if $I0 != 13 goto linepos_loop
            $I0 = ord s, jpos
            if $I0 != 10 goto linepos_loop
            inc jpos
            goto linepos_loop
        linepos_done_1:
        linepos_done:

            # We have C<linepos>, so now we (binary) search the array
            # for the largest element that is not greater than C<pos>.
            .local int lo, hi, line
            lo = 0
            hi = elements linepos
        binary_loop:
            if lo >= hi goto binary_done
            line = lo + hi
            line = line / 2
            $I0 = linepos[line]
            if $I0 > pos goto binary_hi
            lo = line + 1
            goto binary_loop
        binary_hi:
            hi = line
            goto binary_loop
        binary_done:
            inc lo
            .return (lo)
        
.annotate 'line', 1655
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "user-progname" :anon :subid("144_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_2271
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1721
    .lex "self", param_2271
    set $P102, param_2271
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_get_attr_obj $P105, $P103, $P104, "$!user_progname", 8
    unless_null $P105, vivify_1021
    new $P105, "Undef"
  vivify_1021:
    set $P2272, $P105
    defined $I2274, $P2272
    if $I2274, default_2273
    new $P106, "String"
    assign $P106, "interactive"
    set $P2272, $P106
  default_2273:
    .return ($P2272)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "cli-options" :anon :subid("145_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_2276
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1724
    .lex "self", param_2276
    set $P102, param_2276
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_get_attr_obj $P2277, $P103, $P104, "%!cli-options", 10
    unless_null $P2277, vivify_1022
    $P2277 = root_new ['parrot';'Hash']
  vivify_1022:
    .return ($P2277)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "cli-arguments" :anon :subid("146_1338064439.457") :outer("277_1338064439.457")
    .param pmc param_2279
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1725
    .lex "self", param_2279
    set $P102, param_2279
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 94
    repr_get_attr_obj $P2280, $P103, $P104, "@!cli-arguments", 9
    unless_null $P2280, vivify_1023
    $P2280 = root_new ['parrot';'ResizablePMCArray']
  vivify_1023:
    .return ($P2280)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Result"]
.sub "_block2282"  :subid("318_1338064439.457") :outer("182_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1823
    .const 'Sub' $P2298 = "151_1338064439.457" 
    capture_lex $P2298
    .const 'Sub' $P2294 = "150_1338064439.457" 
    capture_lex $P2294
    .const 'Sub' $P2291 = "149_1338064439.457" 
    capture_lex $P2291
    .const 'Sub' $P2288 = "148_1338064439.457" 
    capture_lex $P2288
    .const 'Sub' $P2286 = "147_1338064439.457" 
    capture_lex $P2286
    .lex "$?PACKAGE", $P2284
    .lex "$?CLASS", $P2285
.annotate 'line', 1839
    .const 'Sub' $P2298 = "151_1338064439.457" 
    newclosure $P2310, $P2298
.annotate 'line', 1823
    .return ($P2310)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Result"]
.sub "init" :anon :subid("147_1338064439.457") :outer("318_1338064439.457")
    .param pmc param_2287
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1827
    .lex "self", param_2287
.annotate 'line', 1828
    new $P101, "ResizablePMCArray"
    set $P102, param_2287
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 139
    repr_bind_attr_obj $P103, $P104, "@!arguments", 0, $P101
.annotate 'line', 1829
    new $P101, "Hash"
    set $P102, param_2287
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 139
    repr_bind_attr_obj $P103, $P104, "%!options", 1, $P101
.annotate 'line', 1827
    .return ($P101)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Result"]
.sub "arguments" :anon :subid("148_1338064439.457") :outer("318_1338064439.457")
    .param pmc param_2289
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1832
    .lex "self", param_2289
    set $P101, param_2289
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 139
    repr_get_attr_obj $P2290, $P102, $P103, "@!arguments", 0
    unless_null $P2290, vivify_1025
    $P2290 = root_new ['parrot';'ResizablePMCArray']
  vivify_1025:
    .return ($P2290)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Result"]
.sub "options" :anon :subid("149_1338064439.457") :outer("318_1338064439.457")
    .param pmc param_2292
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1833
    .lex "self", param_2292
    set $P101, param_2292
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 139
    repr_get_attr_obj $P2293, $P102, $P103, "%!options", 1
    unless_null $P2293, vivify_1026
    $P2293 = root_new ['parrot';'Hash']
  vivify_1026:
    .return ($P2293)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Result"]
.sub "add-argument" :anon :subid("150_1338064439.457") :outer("318_1338064439.457")
    .param pmc param_2295
    .param pmc param_2296
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1835
    .lex "self", param_2295
    .lex "$x", param_2296
.annotate 'line', 1836
    set $P101, param_2295
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 139
    repr_get_attr_obj $P2297, $P102, $P103, "@!arguments", 0
    unless_null $P2297, vivify_1027
    $P2297 = root_new ['parrot';'ResizablePMCArray']
  vivify_1027:
    set $P104, param_2296
    unless_null $P104, vivify_1028
    new $P104, "Undef"
  vivify_1028:
    push $P2297, $P104
.annotate 'line', 1835
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Result"]
.sub "add-option" :anon :subid("151_1338064439.457") :outer("318_1338064439.457")
    .param pmc param_2299
    .param pmc param_2300
    .param pmc param_2301
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1839
    .lex "self", param_2299
    .lex "$name", param_2300
    .lex "$value", param_2301
.annotate 'line', 1842
    set $P105, param_2300
    unless_null $P105, vivify_1029
    new $P105, "Undef"
  vivify_1029:
    set $P102, param_2299
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 139
    repr_get_attr_obj $P2303, $P103, $P104, "%!options", 1
    unless_null $P2303, vivify_1030
    $P2303 = root_new ['parrot';'Hash']
  vivify_1030:
    exists $I100, $P2303[$P105]
    if $I100, if_2302
.annotate 'line', 1849
    set $P107, param_2301
    unless_null $P107, vivify_1031
    new $P107, "Undef"
  vivify_1031:
    set $P108, param_2300
    unless_null $P108, vivify_1032
    new $P108, "Undef"
  vivify_1032:
    set $P109, param_2299
    nqp_decontainerize $P110, $P109
    nqp_get_sc_object $P111, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 139
    repr_get_attr_obj $P2309, $P110, $P111, "%!options", 1
    unless_null $P2309, vivify_1033
    $P2309 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P110, $P111, "%!options", 1, $P2309
  vivify_1033:
    set $P2309[$P108], $P107
.annotate 'line', 1848
    set $P101, $P107
.annotate 'line', 1842
    goto if_2302_end
  if_2302:
.annotate 'line', 1843
    set $P107, param_2300
    unless_null $P107, vivify_1034
    new $P107, "Undef"
  vivify_1034:
    set $P108, param_2299
    nqp_decontainerize $P109, $P108
    nqp_get_sc_object $P110, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 139
    repr_get_attr_obj $P2305, $P109, $P110, "%!options", 1
    unless_null $P2305, vivify_1035
    $P2305 = root_new ['parrot';'Hash']
  vivify_1035:
    set $P111, $P2305[$P107]
    unless_null $P111, vivify_1036
    new $P111, "Undef"
  vivify_1036:
    does $I101, $P111, "array"
    if $I101, if_2304
.annotate 'line', 1846
    set $P112, param_2300
    unless_null $P112, vivify_1037
    new $P112, "Undef"
  vivify_1037:
    set $P113, param_2299
    nqp_decontainerize $P114, $P113
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 139
    repr_get_attr_obj $P2307, $P114, $P115, "%!options", 1
    unless_null $P2307, vivify_1038
    $P2307 = root_new ['parrot';'Hash']
  vivify_1038:
    set $P117, $P2307[$P112]
    unless_null $P117, vivify_1039
    new $P117, "Undef"
  vivify_1039:
    set $P118, param_2301
    unless_null $P118, vivify_1040
    new $P118, "Undef"
  vivify_1040:
    new $P119, "ResizablePMCArray"
    push $P119, $P117
    push $P119, $P118
    set $P120, param_2300
    unless_null $P120, vivify_1041
    new $P120, "Undef"
  vivify_1041:
    set $P121, param_2299
    nqp_decontainerize $P122, $P121
    nqp_get_sc_object $P123, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 139
    repr_get_attr_obj $P2308, $P122, $P123, "%!options", 1
    unless_null $P2308, vivify_1042
    $P2308 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P122, $P123, "%!options", 1, $P2308
  vivify_1042:
    set $P2308[$P120], $P119
.annotate 'line', 1845
    set $P106, $P119
.annotate 'line', 1843
    goto if_2304_end
  if_2304:
.annotate 'line', 1844
    set $P112, param_2300
    unless_null $P112, vivify_1043
    new $P112, "Undef"
  vivify_1043:
    set $P113, param_2299
    nqp_decontainerize $P114, $P113
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 139
    repr_get_attr_obj $P2306, $P114, $P115, "%!options", 1
    unless_null $P2306, vivify_1044
    $P2306 = root_new ['parrot';'Hash']
  vivify_1044:
    set $P116, $P2306[$P112]
    unless_null $P116, vivify_1045
    new $P116, "Undef"
  vivify_1045:
    set $P117, param_2301
    unless_null $P117, vivify_1046
    new $P117, "Undef"
  vivify_1046:
    push $P116, $P117
.annotate 'line', 1843
    set $P106, $P116
  if_2304_end:
.annotate 'line', 1842
    set $P101, $P106
  if_2302_end:
.annotate 'line', 1839
    .return ($P101)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "_block2311"  :subid("319_1338064439.457") :outer("182_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1854
    .const 'Sub' $P2372 = "161_1338064439.457" 
    capture_lex $P2372
    .const 'Sub' $P2367 = "160_1338064439.457" 
    capture_lex $P2367
    .const 'Sub' $P2362 = "159_1338064439.457" 
    capture_lex $P2362
    .const 'Sub' $P2354 = "158_1338064439.457" 
    capture_lex $P2354
    .const 'Sub' $P2339 = "157_1338064439.457" 
    capture_lex $P2339
    .const 'Sub' $P2336 = "156_1338064439.457" 
    capture_lex $P2336
    .const 'Sub' $P2332 = "155_1338064439.457" 
    capture_lex $P2332
    .const 'Sub' $P2322 = "154_1338064439.457" 
    capture_lex $P2322
    .const 'Sub' $P2320 = "153_1338064439.457" 
    capture_lex $P2320
    .const 'Sub' $P2315 = "152_1338064439.457" 
    capture_lex $P2315
    .lex "$?PACKAGE", $P2313
    .lex "$?CLASS", $P2314
.annotate 'line', 1919
    .const 'Sub' $P2372 = "161_1338064439.457" 
    newclosure $P2450, $P2372
.annotate 'line', 1854
    .return ($P2450)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "new" :anon :subid("152_1338064439.457") :outer("319_1338064439.457")
    .param pmc param_2316
    .param pmc param_2317
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1860
    .lex "self", param_2316
    .lex "@specs", param_2317
.annotate 'line', 1861
    new $P101, "Undef"
    set $P2318, $P101
    .lex "$obj", $P2318
    set $P102, param_2316
    nqp_decontainerize $P103, $P102
    $P104 = $P103."CREATE"()
    set $P2318, $P104
.annotate 'line', 1862
    set $P102, $P2318
    unless_null $P102, vivify_1047
    new $P102, "Undef"
  vivify_1047:
    set $P2319, param_2317
    unless_null $P2319, vivify_1048
    $P2319 = root_new ['parrot';'ResizablePMCArray']
  vivify_1048:
    $P102."BUILD"($P2319 :named("specs"))
.annotate 'line', 1860
    set $P102, $P2318
    unless_null $P102, vivify_1049
    new $P102, "Undef"
  vivify_1049:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "stop-after-first-arg" :anon :subid("153_1338064439.457") :outer("319_1338064439.457")
    .param pmc param_2321
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1866
    .lex "self", param_2321
.annotate 'line', 1867
    new $P101, "Float"
    assign $P101, 1
    set $P102, param_2321
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 145
    repr_bind_attr_obj $P103, $P104, "$!stop-after-first-arg", 3, $P101
.annotate 'line', 1866
    .return ($P101)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.include "except_types.pasm"
.sub "BUILD" :anon :subid("154_1338064439.457") :outer("319_1338064439.457")
    .param pmc param_2323
    .param pmc param_2324 :optional :named("specs")
    .param int has_param_2324 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1870
    .const 'Sub' $P2329 = "320_1338064439.457" 
    capture_lex $P2329
    .lex "self", param_2323
    if has_param_2324, optparam_1050
    $P2325 = root_new ['parrot';'ResizablePMCArray']
    set param_2324, $P2325
  optparam_1050:
    .lex "@specs", param_2324
.annotate 'line', 1871
    new $P101, "Float"
    assign $P101, 1
    set $P102, param_2323
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 145
    repr_get_attr_obj $P2326, $P103, $P104, "%!stopper", 2
    unless_null $P2326, vivify_1051
    $P2326 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P103, $P104, "%!stopper", 2, $P2326
  vivify_1051:
    set $P2326["--"], $P101
.annotate 'line', 1872
    new $P101, "Float"
    assign $P101, 0
    set $P102, param_2323
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 145
    repr_bind_attr_obj $P103, $P104, "$!stop-after-first-arg", 3, $P101
.annotate 'line', 1873
    set $P2327, param_2324
    unless_null $P2327, vivify_1052
    $P2327 = root_new ['parrot';'ResizablePMCArray']
  vivify_1052:
    defined $I100, $P2327
    unless $I100, for_undef_1053
    iter $P101, $P2327
    new $P103, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P103, loop2331_handler
    push_eh $P103
  loop2331_test:
    unless $P101, loop2331_done
    shift $P102, $P101
  loop2331_redo:
    .const 'Sub' $P2329 = "320_1338064439.457" 
    capture_lex $P2329
    $P2329($P102)
  loop2331_next:
    goto loop2331_test
  loop2331_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P104, exception, 'type'
    eq $P104, .CONTROL_LOOP_NEXT, loop2331_next
    eq $P104, .CONTROL_LOOP_REDO, loop2331_redo
  loop2331_done:
    pop_eh 
  for_undef_1053:
.annotate 'line', 1870
    .return ($P101)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "_block2328"  :anon :subid("320_1338064439.457") :outer("154_1338064439.457")
    .param pmc param_2330
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1873
    .lex "$_", param_2330
.annotate 'line', 1874
    find_lex $P103, "self"
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$_"
    unless_null $P105, vivify_1054
    new $P105, "Undef"
  vivify_1054:
    $P106 = $P104."add-spec"($P105)
.annotate 'line', 1873
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "add-stopper" :anon :subid("155_1338064439.457") :outer("319_1338064439.457")
    .param pmc param_2333
    .param pmc param_2334
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1877
    .lex "self", param_2333
    .lex "$x", param_2334
.annotate 'line', 1878
    new $P101, "Float"
    assign $P101, 1
    set $P102, param_2334
    unless_null $P102, vivify_1055
    new $P102, "Undef"
  vivify_1055:
    set $P103, param_2333
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 145
    repr_get_attr_obj $P2335, $P104, $P105, "%!stopper", 2
    unless_null $P2335, vivify_1056
    $P2335 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P104, $P105, "%!stopper", 2, $P2335
  vivify_1056:
    set $P2335[$P102], $P101
.annotate 'line', 1877
    .return ($P101)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "split-option-aliases" :anon :subid("156_1338064439.457") :outer("319_1338064439.457")
    .param pmc param_2337
    .param pmc param_2338
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1881
    .lex "self", param_2337
    .lex "$s", param_2338
.annotate 'line', 1882
    set $P101, param_2338
    unless_null $P101, vivify_1057
    new $P101, "Undef"
  vivify_1057:
    set $S100, $P101
    split $P102, "|", $S100
.annotate 'line', 1881
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.include "except_types.pasm"
.sub "add-spec" :anon :subid("157_1338064439.457") :outer("319_1338064439.457")
    .param pmc param_2340
    .param pmc param_2341
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1886
    .const 'Sub' $P2350 = "321_1338064439.457" 
    capture_lex $P2350
    .lex "self", param_2340
    .lex "$s", param_2341
.annotate 'line', 1887
    new $P101, "Undef"
    set $P2342, $P101
    .lex "$i", $P2342
.annotate 'line', 1888
    new $P102, "Undef"
    set $P2343, $P102
    .lex "$type", $P2343
.annotate 'line', 1889
    $P2345 = root_new ['parrot';'ResizablePMCArray']
    set $P2344, $P2345
    .lex "@options", $P2344
.annotate 'line', 1887
    set $P103, param_2341
    unless_null $P103, vivify_1058
    new $P103, "Undef"
  vivify_1058:
    set $S100, $P103
    index $I100, $S100, "="
    new $P104, 'Integer'
    set $P104, $I100
    set $P2342, $P104
.annotate 'line', 1886
    set $P103, $P2343
    unless_null $P103, vivify_1059
    new $P103, "Undef"
  vivify_1059:
    set $P2346, $P2344
    unless_null $P2346, vivify_1060
    $P2346 = root_new ['parrot';'ResizablePMCArray']
  vivify_1060:
.annotate 'line', 1890
    set $P103, $P2342
    unless_null $P103, vivify_1061
    new $P103, "Undef"
  vivify_1061:
    set $N100, $P103
    set $N101, 0
    islt $I100, $N100, $N101
    if $I100, if_2347
.annotate 'line', 1894
    set $P104, param_2341
    unless_null $P104, vivify_1062
    new $P104, "Undef"
  vivify_1062:
    set $S100, $P104
    set $P105, $P2342
    unless_null $P105, vivify_1063
    new $P105, "Undef"
  vivify_1063:
    add $P106, $P105, 1
    set $I101, $P106
    substr $S101, $S100, $I101
    new $P107, 'String'
    set $P107, $S101
    set $P2343, $P107
.annotate 'line', 1895
    set $P104, param_2340
    nqp_decontainerize $P105, $P104
    set $P106, param_2341
    unless_null $P106, vivify_1064
    new $P106, "Undef"
  vivify_1064:
    set $S100, $P106
    set $P107, $P2342
    unless_null $P107, vivify_1065
    new $P107, "Undef"
  vivify_1065:
    set $I101, $P107
    substr $S101, $S100, 0, $I101
    $P108 = $P105."split-option-aliases"($S101)
    set $P2344, $P108
.annotate 'line', 1893
    goto if_2347_end
  if_2347:
.annotate 'line', 1891
    new $P104, "String"
    assign $P104, "b"
    set $P2343, $P104
.annotate 'line', 1892
    set $P104, param_2340
    nqp_decontainerize $P105, $P104
    set $P106, param_2341
    unless_null $P106, vivify_1066
    new $P106, "Undef"
  vivify_1066:
    $P107 = $P105."split-option-aliases"($P106)
    set $P2344, $P107
  if_2347_end:
.annotate 'line', 1897
    set $P2348, $P2344
    unless_null $P2348, vivify_1067
    $P2348 = root_new ['parrot';'ResizablePMCArray']
  vivify_1067:
    defined $I100, $P2348
    unless $I100, for_undef_1068
    iter $P103, $P2348
    new $P106, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P106, loop2353_handler
    push_eh $P106
  loop2353_test:
    unless $P103, loop2353_done
    shift $P104, $P103
  loop2353_redo:
    .const 'Sub' $P2350 = "321_1338064439.457" 
    capture_lex $P2350
    $P2350($P104)
  loop2353_next:
    goto loop2353_test
  loop2353_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P107, exception, 'type'
    eq $P107, .CONTROL_LOOP_NEXT, loop2353_next
    eq $P107, .CONTROL_LOOP_REDO, loop2353_redo
  loop2353_done:
    pop_eh 
  for_undef_1068:
.annotate 'line', 1886
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "_block2349"  :anon :subid("321_1338064439.457") :outer("157_1338064439.457")
    .param pmc param_2351
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1897
    .lex "$_", param_2351
.annotate 'line', 1898
    find_lex $P105, "$type"
    unless_null $P105, vivify_1069
    new $P105, "Undef"
  vivify_1069:
    find_lex $P106, "$_"
    unless_null $P106, vivify_1070
    new $P106, "Undef"
  vivify_1070:
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 145
    repr_get_attr_obj $P2352, $P108, $P109, "%!options", 1
    unless_null $P2352, vivify_1071
    $P2352 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P108, $P109, "%!options", 1, $P2352
  vivify_1071:
    set $P2352[$P106], $P105
.annotate 'line', 1897
    .return ($P105)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.include "except_types.pasm"
.sub "is-option" :anon :subid("158_1338064439.457") :outer("319_1338064439.457")
    .param pmc param_2357
    .param pmc param_2358
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1903
    new $P2356, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2356, control_2355
    push_eh $P2356
    .lex "self", param_2357
    .lex "$x", param_2358
.annotate 'line', 1904
    set $P102, param_2358
    unless_null $P102, vivify_1072
    new $P102, "Undef"
  vivify_1072:
    set $S100, $P102
    iseq $I100, $S100, "-"
    unless $I100, unless_2360
    new $P101, 'Integer'
    set $P101, $I100
    goto unless_2360_end
  unless_2360:
    set $P103, param_2358
    unless_null $P103, vivify_1073
    new $P103, "Undef"
  vivify_1073:
    set $S101, $P103
    iseq $I101, $S101, "--"
    new $P101, 'Integer'
    set $P101, $I101
  unless_2360_end:
    unless $P101, if_2359_end
    new $P104, "Exception"
    set $P104['type'], .CONTROL_RETURN
    new $P105, "Float"
    assign $P105, 0
    setattribute $P104, 'payload', $P105
    throw $P104
  if_2359_end:
.annotate 'line', 1905
    set $P101, param_2358
    unless_null $P101, vivify_1074
    new $P101, "Undef"
  vivify_1074:
    set $S100, $P101
    substr $S101, $S100, 0, 1
    iseq $I100, $S101, "-"
    unless $I100, if_2361_end
    new $P102, "Exception"
    set $P102['type'], .CONTROL_RETURN
    new $P103, "Float"
    assign $P103, 1
    setattribute $P102, 'payload', $P103
    throw $P102
  if_2361_end:
.annotate 'line', 1903
    .return (0)
  control_2355:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P101, exception, "payload"
    .return ($P101)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "wants-value" :anon :subid("159_1338064439.457") :outer("319_1338064439.457")
    .param pmc param_2363
    .param pmc param_2364
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1909
    .lex "self", param_2363
    .lex "$x", param_2364
.annotate 'line', 1910
    new $P101, "Undef"
    set $P2365, $P101
    .lex "$spec", $P2365
    set $P102, param_2364
    unless_null $P102, vivify_1075
    new $P102, "Undef"
  vivify_1075:
    set $P103, param_2363
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 145
    repr_get_attr_obj $P2366, $P104, $P105, "%!options", 1
    unless_null $P2366, vivify_1076
    $P2366 = root_new ['parrot';'Hash']
  vivify_1076:
    set $P106, $P2366[$P102]
    unless_null $P106, vivify_1077
    new $P106, "Undef"
  vivify_1077:
    set $P2365, $P106
.annotate 'line', 1911
    set $P102, $P2365
    unless_null $P102, vivify_1078
    new $P102, "Undef"
  vivify_1078:
    set $S100, $P102
    substr $S101, $S100, 0, 1
    iseq $I100, $S101, "s"
.annotate 'line', 1909
    .return ($I100)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "optional-value" :anon :subid("160_1338064439.457") :outer("319_1338064439.457")
    .param pmc param_2368
    .param pmc param_2369
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1914
    .lex "self", param_2368
    .lex "$x", param_2369
.annotate 'line', 1915
    new $P101, "Undef"
    set $P2370, $P101
    .lex "$spec", $P2370
    set $P102, param_2369
    unless_null $P102, vivify_1079
    new $P102, "Undef"
  vivify_1079:
    set $P103, param_2368
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 145
    repr_get_attr_obj $P2371, $P104, $P105, "%!options", 1
    unless_null $P2371, vivify_1080
    $P2371 = root_new ['parrot';'Hash']
  vivify_1080:
    set $P106, $P2371[$P102]
    unless_null $P106, vivify_1081
    new $P106, "Undef"
  vivify_1081:
    set $P2370, $P106
.annotate 'line', 1916
    set $P102, $P2370
    unless_null $P102, vivify_1082
    new $P102, "Undef"
  vivify_1082:
    set $S100, $P102
    iseq $I100, $S100, "s?"
.annotate 'line', 1914
    .return ($I100)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.include "except_types.pasm"
.sub "parse" :anon :subid("161_1338064439.457") :outer("319_1338064439.457")
    .param pmc param_2375
    .param pmc param_2376
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1919
    .const 'Sub' $P2401 = "324_1338064439.457" 
    capture_lex $P2401
    .const 'Sub' $P2393 = "323_1338064439.457" 
    capture_lex $P2393
    .const 'Sub' $P2381 = "322_1338064439.457" 
    capture_lex $P2381
    new $P2374, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2374, control_2373
    push_eh $P2374
    .lex "self", param_2375
    .lex "@args", param_2376
.annotate 'line', 1920
    new $P101, "Undef"
    set $P2377, $P101
    .lex "$i", $P2377
.annotate 'line', 1921
    new $P102, "Undef"
    set $P2378, $P102
    .lex "$arg-count", $P2378
.annotate 'line', 1923
    new $P103, "Undef"
    set $P2379, $P103
    .lex "$result", $P2379
.annotate 'line', 1927
    .const 'Sub' $P2381 = "322_1338064439.457" 
    newclosure $P2391, $P2381
    set $P2380, $P2391
    .lex "get-value", $P2380
.annotate 'line', 1942
    .const 'Sub' $P2393 = "323_1338064439.457" 
    newclosure $P2398, $P2393
    set $P2392, $P2398
    .lex "slurp-rest", $P2392
.annotate 'line', 1920
    new $P105, "Float"
    assign $P105, 0
    set $P2377, $P105
.annotate 'line', 1921
    set $P2399, param_2376
    unless_null $P2399, vivify_1108
    $P2399 = root_new ['parrot';'ResizablePMCArray']
  vivify_1108:
    set $N100, $P2399
    new $P105, 'Float'
    set $P105, $N100
    set $P2378, $P105
.annotate 'line', 1923
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "HLL"
    nqp_get_package_through_who $P107, $P106, "CommandLine"
    get_who $P108, $P107
    set $P109, $P108["Result"]
    $P110 = $P109."new"()
    set $P2379, $P110
.annotate 'line', 1924
    set $P105, $P2379
    unless_null $P105, vivify_1109
    new $P105, "Undef"
  vivify_1109:
    $P105."init"()
.annotate 'line', 1919
    set $P105, $P2380
    set $P105, $P2392
.annotate 'line', 1950
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop2449_handler
    push_eh $P108
  loop2449_test:
    set $P105, $P2377
    unless_null $P105, vivify_1110
    new $P105, "Undef"
  vivify_1110:
    set $N100, $P105
    set $P106, $P2378
    unless_null $P106, vivify_1111
    new $P106, "Undef"
  vivify_1111:
    set $N101, $P106
    islt $I101, $N100, $N101
    unless $I101, loop2449_done
  loop2449_redo:
    .const 'Sub' $P2401 = "324_1338064439.457" 
    capture_lex $P2401
    $P2401()
  loop2449_next:
    goto loop2449_test
  loop2449_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop2449_next
    eq $P109, .CONTROL_LOOP_REDO, loop2449_redo
  loop2449_done:
    pop_eh 
.annotate 'line', 2019
    new $P105, "Exception"
    set $P105['type'], .CONTROL_RETURN
    set $P106, $P2379
    unless_null $P106, vivify_1186
    new $P106, "Undef"
  vivify_1186:
    setattribute $P105, 'payload', $P106
    throw $P105
.annotate 'line', 1919
    .return ()
  control_2373:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P105, exception, "payload"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "get-value"  :subid("322_1338064439.457") :outer("161_1338064439.457")
    .param pmc param_2382
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1927
    .lex "$opt", param_2382
.annotate 'line', 1928
    find_lex $P105, "$i"
    unless_null $P105, vivify_1083
    new $P105, "Undef"
  vivify_1083:
    set $N100, $P105
    find_lex $P106, "$arg-count"
    unless_null $P106, vivify_1084
    new $P106, "Undef"
  vivify_1084:
    sub $P107, $P106, 1
    set $N101, $P107
    iseq $I100, $N100, $N101
    if $I100, if_2383
.annotate 'line', 1930
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$i"
    unless_null $P111, vivify_1085
    new $P111, "Undef"
  vivify_1085:
    add $P112, $P111, 1
    set $I101, $P112
    find_lex $P2385, "@args"
    unless_null $P2385, vivify_1086
    $P2385 = root_new ['parrot';'ResizablePMCArray']
  vivify_1086:
    set $P113, $P2385[$I101]
    unless_null $P113, vivify_1087
    new $P113, "Undef"
  vivify_1087:
    $P114 = $P110."is-option"($P113)
    if $P114, if_2384
.annotate 'line', 1932
    find_lex $P116, "$i"
    unless_null $P116, vivify_1088
    new $P116, "Undef"
  vivify_1088:
    add $P117, $P116, 1
    set $I102, $P117
    find_lex $P2387, "@args"
    unless_null $P2387, vivify_1089
    $P2387 = root_new ['parrot';'ResizablePMCArray']
  vivify_1089:
    set $P118, $P2387[$I102]
    unless_null $P118, vivify_1090
    new $P118, "Undef"
  vivify_1090:
    find_lex $P119, "self"
    nqp_decontainerize $P120, $P119
    nqp_get_sc_object $P121, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 145
    repr_get_attr_obj $P2388, $P120, $P121, "%!stopper", 2
    unless_null $P2388, vivify_1091
    $P2388 = root_new ['parrot';'Hash']
  vivify_1091:
    set $P122, $P2388[$P118]
    unless_null $P122, vivify_1092
    new $P122, "Undef"
  vivify_1092:
    if $P122, if_2386
.annotate 'line', 1934
    find_lex $P123, "$i"
    unless_null $P123, vivify_1093
    new $P123, "Undef"
  vivify_1093:
    clone $P2389, $P123
    inc $P123
    find_lex $P123, "$i"
    unless_null $P123, vivify_1094
    new $P123, "Undef"
  vivify_1094:
    set $I103, $P123
    find_lex $P2390, "@args"
    unless_null $P2390, vivify_1095
    $P2390 = root_new ['parrot';'ResizablePMCArray']
  vivify_1095:
    set $P124, $P2390[$I103]
    unless_null $P124, vivify_1096
    new $P124, "Undef"
  vivify_1096:
    set $P115, $P124
.annotate 'line', 1932
    goto if_2386_end
  if_2386:
.annotate 'line', 1933
    new $P123, 'String'
    set $P123, "Option "
    set $P124, param_2382
    unless_null $P124, vivify_1097
    new $P124, "Undef"
  vivify_1097:
    concat $P125, $P123, $P124
    concat $P126, $P125, " needs a value, but is followed by a stopper"
    die $P126
  if_2386_end:
.annotate 'line', 1932
    set $P108, $P115
.annotate 'line', 1930
    goto if_2384_end
  if_2384:
.annotate 'line', 1931
    new $P115, 'String'
    set $P115, "Option "
    set $P116, param_2382
    unless_null $P116, vivify_1098
    new $P116, "Undef"
  vivify_1098:
    concat $P117, $P115, $P116
    concat $P118, $P117, " needs a value, but is followed by an option"
    die $P118
  if_2384_end:
.annotate 'line', 1930
    set $P104, $P108
.annotate 'line', 1928
    goto if_2383_end
  if_2383:
.annotate 'line', 1929
    new $P108, 'String'
    set $P108, "Option "
    set $P109, param_2382
    unless_null $P109, vivify_1099
    new $P109, "Undef"
  vivify_1099:
    concat $P110, $P108, $P109
    concat $P111, $P110, " needs a value"
    die $P111
  if_2383_end:
.annotate 'line', 1927
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.include "except_types.pasm"
.sub "slurp-rest"  :subid("323_1338064439.457") :outer("161_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1942
    find_lex $P105, "$i"
    unless_null $P105, vivify_1100
    new $P105, "Undef"
  vivify_1100:
    clone $P2394, $P105
    inc $P105
.annotate 'line', 1944
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop2397_handler
    push_eh $P107
  loop2397_test:
    find_lex $P105, "$i"
    unless_null $P105, vivify_1101
    new $P105, "Undef"
  vivify_1101:
    set $N100, $P105
    find_lex $P106, "$arg-count"
    unless_null $P106, vivify_1102
    new $P106, "Undef"
  vivify_1102:
    set $N101, $P106
    islt $I100, $N100, $N101
    unless $I100, loop2397_done
  loop2397_redo:
.annotate 'line', 1945
    find_lex $P107, "$result"
    unless_null $P107, vivify_1103
    new $P107, "Undef"
  vivify_1103:
    find_lex $P108, "$i"
    unless_null $P108, vivify_1104
    new $P108, "Undef"
  vivify_1104:
    set $I101, $P108
    find_lex $P2395, "@args"
    unless_null $P2395, vivify_1105
    $P2395 = root_new ['parrot';'ResizablePMCArray']
  vivify_1105:
    set $P109, $P2395[$I101]
    unless_null $P109, vivify_1106
    new $P109, "Undef"
  vivify_1106:
    $P107."add-argument"($P109)
.annotate 'line', 1944
    find_lex $P107, "$i"
    unless_null $P107, vivify_1107
    new $P107, "Undef"
  vivify_1107:
    clone $P2396, $P107
    inc $P107
  loop2397_next:
    goto loop2397_test
  loop2397_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop2397_next
    eq $P108, .CONTROL_LOOP_REDO, loop2397_redo
  loop2397_done:
    pop_eh 
.annotate 'line', 1942
    .return ($I100)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "_block2400"  :anon :subid("324_1338064439.457") :outer("161_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1950
    .const 'Sub' $P2424 = "326_1338064439.457" 
    capture_lex $P2424
    .const 'Sub' $P2407 = "325_1338064439.457" 
    capture_lex $P2407
.annotate 'line', 1951
    new $P107, "Undef"
    set $P2402, $P107
    .lex "$cur", $P2402
    find_lex $P108, "$i"
    unless_null $P108, vivify_1112
    new $P108, "Undef"
  vivify_1112:
    set $I102, $P108
    find_lex $P2403, "@args"
    unless_null $P2403, vivify_1113
    $P2403 = root_new ['parrot';'ResizablePMCArray']
  vivify_1113:
    set $P109, $P2403[$I102]
    unless_null $P109, vivify_1114
    new $P109, "Undef"
  vivify_1114:
    set $P2402, $P109
.annotate 'line', 1952
    find_lex $P108, "self"
    nqp_decontainerize $P109, $P108
    set $P110, $P2402
    unless_null $P110, vivify_1115
    new $P110, "Undef"
  vivify_1115:
    $P111 = $P109."is-option"($P110)
    if $P111, if_2404
.annotate 'line', 2011
    set $P112, $P2402
    unless_null $P112, vivify_1116
    new $P112, "Undef"
  vivify_1116:
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    nqp_get_sc_object $P115, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 145
    repr_get_attr_obj $P2446, $P114, $P115, "%!stopper", 2
    unless_null $P2446, vivify_1117
    $P2446 = root_new ['parrot';'Hash']
  vivify_1117:
    set $P116, $P2446[$P112]
    unless_null $P116, vivify_1118
    new $P116, "Undef"
  vivify_1118:
    if $P116, if_2445
.annotate 'line', 2014
    find_lex $P117, "$result"
    unless_null $P117, vivify_1119
    new $P117, "Undef"
  vivify_1119:
    set $P118, $P2402
    unless_null $P118, vivify_1120
    new $P118, "Undef"
  vivify_1120:
    $P117."add-argument"($P118)
.annotate 'line', 2015
    find_lex $P117, "self"
    nqp_decontainerize $P118, $P117
    nqp_get_sc_object $P119, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 145
    repr_get_attr_obj $P120, $P118, $P119, "$!stop-after-first-arg", 3
    unless_null $P120, vivify_1121
    new $P120, "Undef"
  vivify_1121:
    unless $P120, if_2447_end
    "slurp-rest"()
  if_2447_end:
.annotate 'line', 2013
    goto if_2445_end
  if_2445:
.annotate 'line', 2012
    "slurp-rest"()
  if_2445_end:
.annotate 'line', 2011
    goto if_2404_end
  if_2404:
.annotate 'line', 1953
    set $P112, $P2402
    unless_null $P112, vivify_1122
    new $P112, "Undef"
  vivify_1122:
    set $S100, $P112
    substr $S101, $S100, 0, 2
    iseq $I102, $S101, "--"
    if $I102, if_2405
.annotate 'line', 1975
    .const 'Sub' $P2424 = "326_1338064439.457" 
    capture_lex $P2424
    $P2424()
    goto if_2405_end
  if_2405:
.annotate 'line', 1953
    .const 'Sub' $P2407 = "325_1338064439.457" 
    capture_lex $P2407
    $P2407()
  if_2405_end:
  if_2404_end:
.annotate 'line', 1950
    find_lex $P108, "$i"
    unless_null $P108, vivify_1185
    new $P108, "Undef"
  vivify_1185:
    clone $P2448, $P108
    inc $P108
    .return ($P2448)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "_block2423"  :anon :subid("326_1338064439.457") :outer("324_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1975
    .const 'Sub' $P2434 = "327_1338064439.457" 
    capture_lex $P2434
.annotate 'line', 1976
    new $P118, "Undef"
    set $P2425, $P118
    .lex "$opt", $P2425
.annotate 'line', 1977
    new $P119, "Undef"
    set $P2426, $P119
    .lex "$len", $P2426
.annotate 'line', 1976
    find_lex $P120, "$cur"
    unless_null $P120, vivify_1123
    new $P120, "Undef"
  vivify_1123:
    set $S102, $P120
    substr $S103, $S102, 1
    new $P121, 'String'
    set $P121, $S103
    set $P2425, $P121
.annotate 'line', 1977
    set $P120, $P2425
    unless_null $P120, vivify_1124
    new $P120, "Undef"
  vivify_1124:
    set $S102, $P120
    length $I103, $S102
    new $P121, 'Integer'
    set $P121, $I103
    set $P2426, $P121
.annotate 'line', 1978
    set $P121, $P2426
    unless_null $P121, vivify_1125
    new $P121, "Undef"
  vivify_1125:
    set $N102, $P121
    set $N103, 1
    iseq $I103, $N102, $N103
    if $I103, if_2427
.annotate 'line', 1988
    .const 'Sub' $P2434 = "327_1338064439.457" 
    capture_lex $P2434
    $P124 = $P2434()
    set $P120, $P124
.annotate 'line', 1978
    goto if_2427_end
  if_2427:
.annotate 'line', 1980
    set $P122, $P2425
    unless_null $P122, vivify_1147
    new $P122, "Undef"
  vivify_1147:
    find_lex $P123, "self"
    nqp_decontainerize $P124, $P123
    nqp_get_sc_object $P125, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 145
    repr_get_attr_obj $P2429, $P124, $P125, "%!options", 1
    unless_null $P2429, vivify_1148
    $P2429 = root_new ['parrot';'Hash']
  vivify_1148:
    set $P126, $P2429[$P122]
    unless_null $P126, vivify_1149
    new $P126, "Undef"
  vivify_1149:
    if $P126, unless_2428_end
    new $P127, 'String'
    set $P127, "No such option -"
    set $P128, $P2425
    unless_null $P128, vivify_1150
    new $P128, "Undef"
  vivify_1150:
    concat $P129, $P127, $P128
    die $P129
  unless_2428_end:
.annotate 'line', 1981
    find_lex $P122, "self"
    nqp_decontainerize $P123, $P122
    set $P124, $P2425
    unless_null $P124, vivify_1151
    new $P124, "Undef"
  vivify_1151:
    $P125 = $P123."wants-value"($P124)
    if $P125, if_2430
.annotate 'line', 1985
    find_lex $P126, "$result"
    unless_null $P126, vivify_1152
    new $P126, "Undef"
  vivify_1152:
    set $P127, $P2425
    unless_null $P127, vivify_1153
    new $P127, "Undef"
  vivify_1153:
    $P126."add-option"($P127, 1)
.annotate 'line', 1984
    goto if_2430_end
  if_2430:
.annotate 'line', 1982
    find_lex $P126, "$result"
    unless_null $P126, vivify_1154
    new $P126, "Undef"
  vivify_1154:
    set $P127, $P2425
    unless_null $P127, vivify_1155
    new $P127, "Undef"
  vivify_1155:
.annotate 'line', 1983
    new $P128, 'String'
    set $P128, "-"
    set $P129, $P2425
    unless_null $P129, vivify_1156
    new $P129, "Undef"
  vivify_1156:
    concat $P130, $P128, $P129
    $P131 = "get-value"($P130)
    $P126."add-option"($P127, $P131)
  if_2430_end:
.annotate 'line', 1987
    new $P123, 'String'
    set $P123, "-"
    set $P124, $P2425
    unless_null $P124, vivify_1157
    new $P124, "Undef"
  vivify_1157:
    concat $P125, $P123, $P124
    find_lex $P126, "self"
    nqp_decontainerize $P127, $P126
    nqp_get_sc_object $P128, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 145
    repr_get_attr_obj $P2432, $P127, $P128, "%!stopper", 2
    unless_null $P2432, vivify_1158
    $P2432 = root_new ['parrot';'Hash']
  vivify_1158:
    set $P129, $P2432[$P125]
    unless_null $P129, vivify_1159
    new $P129, "Undef"
  vivify_1159:
    if $P129, if_2431
    set $P122, $P129
    goto if_2431_end
  if_2431:
    $P130 = "slurp-rest"()
    set $P122, $P130
  if_2431_end:
.annotate 'line', 1978
    set $P120, $P122
  if_2427_end:
.annotate 'line', 1975
    .return ($P120)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.include "except_types.pasm"
.sub "_block2433"  :anon :subid("327_1338064439.457") :outer("326_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1988
    .const 'Sub' $P2437 = "328_1338064439.457" 
    capture_lex $P2437
.annotate 'line', 1989
    new $P123, "Undef"
    set $P2435, $P123
    .lex "$i", $P2435
    new $P124, "Float"
    assign $P124, 0
    set $P2435, $P124
.annotate 'line', 1990
    new $P127, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P127, loop2444_handler
    push_eh $P127
  loop2444_test:
    set $P124, $P2435
    unless_null $P124, vivify_1126
    new $P124, "Undef"
  vivify_1126:
    set $N104, $P124
    find_lex $P125, "$len"
    unless_null $P125, vivify_1127
    new $P125, "Undef"
  vivify_1127:
    set $N105, $P125
    islt $I104, $N104, $N105
    unless $I104, loop2444_done
  loop2444_redo:
    .const 'Sub' $P2437 = "328_1338064439.457" 
    capture_lex $P2437
    $P2437()
  loop2444_next:
    goto loop2444_test
  loop2444_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P128, exception, 'type'
    eq $P128, .CONTROL_LOOP_NEXT, loop2444_next
    eq $P128, .CONTROL_LOOP_REDO, loop2444_redo
  loop2444_done:
    pop_eh 
.annotate 'line', 1988
    .return ($I104)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "_block2436"  :anon :subid("328_1338064439.457") :outer("327_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1991
    new $P126, "Undef"
    set $P2438, $P126
    .lex "$o", $P2438
    find_lex $P127, "$opt"
    unless_null $P127, vivify_1128
    new $P127, "Undef"
  vivify_1128:
    set $S102, $P127
    find_lex $P128, "$i"
    unless_null $P128, vivify_1129
    new $P128, "Undef"
  vivify_1129:
    set $I105, $P128
    substr $S103, $S102, $I105, 1
    new $P129, 'String'
    set $P129, $S103
    set $P2438, $P129
.annotate 'line', 1992
    set $P127, $P2438
    unless_null $P127, vivify_1130
    new $P127, "Undef"
  vivify_1130:
    find_lex $P128, "self"
    nqp_decontainerize $P129, $P128
    nqp_get_sc_object $P130, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 145
    repr_get_attr_obj $P2440, $P129, $P130, "%!options", 1
    unless_null $P2440, vivify_1131
    $P2440 = root_new ['parrot';'Hash']
  vivify_1131:
    set $P131, $P2440[$P127]
    unless_null $P131, vivify_1132
    new $P131, "Undef"
  vivify_1132:
    if $P131, if_2439
.annotate 'line', 2005
    new $P132, 'String'
    set $P132, "Grouped options '-"
    find_lex $P133, "$opt"
    unless_null $P133, vivify_1133
    new $P133, "Undef"
  vivify_1133:
    concat $P134, $P132, $P133
    concat $P135, $P134, "' contain '"
    set $P136, $P2438
    unless_null $P136, vivify_1134
    new $P136, "Undef"
  vivify_1134:
    concat $P137, $P135, $P136
    concat $P138, $P137, "', which is not a valid option"
    die $P138
.annotate 'line', 2004
    goto if_2439_end
  if_2439:
.annotate 'line', 1993
    find_lex $P132, "self"
    nqp_decontainerize $P133, $P132
    set $P134, $P2438
    unless_null $P134, vivify_1135
    new $P134, "Undef"
  vivify_1135:
    $P135 = $P133."wants-value"($P134)
    if $P135, if_2441
.annotate 'line', 2001
    find_lex $P136, "$result"
    unless_null $P136, vivify_1136
    new $P136, "Undef"
  vivify_1136:
    set $P137, $P2438
    unless_null $P137, vivify_1137
    new $P137, "Undef"
  vivify_1137:
    $P136."add-option"($P137, 1)
.annotate 'line', 2000
    goto if_2441_end
  if_2441:
.annotate 'line', 1994
    find_lex $P136, "$i"
    unless_null $P136, vivify_1138
    new $P136, "Undef"
  vivify_1138:
    add $P137, $P136, 1
    set $N106, $P137
    find_lex $P138, "$len"
    unless_null $P138, vivify_1139
    new $P138, "Undef"
  vivify_1139:
    set $N107, $P138
    iseq $I105, $N106, $N107
    unless $I105, if_2442_end
.annotate 'line', 1995
    new $P139, 'String'
    set $P139, "Option '"
    set $P140, $P2438
    unless_null $P140, vivify_1140
    new $P140, "Undef"
  vivify_1140:
    concat $P141, $P139, $P140
    concat $P142, $P141, "' in grouped options '-"
    find_lex $P143, "$opt"
    unless_null $P143, vivify_1141
    new $P143, "Undef"
  vivify_1141:
    concat $P144, $P142, $P143
    concat $P145, $P144, "' needs a value, but does not have one"
    die $P145
  if_2442_end:
.annotate 'line', 1997
    find_lex $P136, "$result"
    unless_null $P136, vivify_1142
    new $P136, "Undef"
  vivify_1142:
    set $P137, $P2438
    unless_null $P137, vivify_1143
    new $P137, "Undef"
  vivify_1143:
    find_lex $P138, "$opt"
    unless_null $P138, vivify_1144
    new $P138, "Undef"
  vivify_1144:
    set $S102, $P138
    find_lex $P139, "$i"
    unless_null $P139, vivify_1145
    new $P139, "Undef"
  vivify_1145:
    add $P140, $P139, 1
    set $I105, $P140
    substr $S103, $S102, $I105
    $P136."add-option"($P137, $S103)
.annotate 'line', 1998
    die 0, .CONTROL_LOOP_LAST
  if_2441_end:
  if_2439_end:
.annotate 'line', 1990
    find_lex $P127, "$i"
    unless_null $P127, vivify_1146
    new $P127, "Undef"
  vivify_1146:
    clone $P2443, $P127
    inc $P127
    .return ($P2443)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "_block2406"  :anon :subid("325_1338064439.457") :outer("324_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1955
    new $P113, "Undef"
    set $P2408, $P113
    .lex "$opt", $P2408
.annotate 'line', 1956
    new $P114, "Undef"
    set $P2409, $P114
    .lex "$idx", $P2409
.annotate 'line', 1957
    new $P115, "Undef"
    set $P2410, $P115
    .lex "$value", $P2410
.annotate 'line', 1958
    new $P116, "Undef"
    set $P2411, $P116
    .lex "$has-value", $P2411
.annotate 'line', 1955
    find_lex $P117, "$i"
    unless_null $P117, vivify_1160
    new $P117, "Undef"
  vivify_1160:
    set $I103, $P117
    find_lex $P2412, "@args"
    unless_null $P2412, vivify_1161
    $P2412 = root_new ['parrot';'ResizablePMCArray']
  vivify_1161:
    set $P118, $P2412[$I103]
    unless_null $P118, vivify_1162
    new $P118, "Undef"
  vivify_1162:
    set $S102, $P118
    substr $S103, $S102, 2
    new $P119, 'String'
    set $P119, $S103
    set $P2408, $P119
.annotate 'line', 1956
    set $P117, $P2408
    unless_null $P117, vivify_1163
    new $P117, "Undef"
  vivify_1163:
    set $S102, $P117
    index $I103, $S102, "="
    new $P118, 'Integer'
    set $P118, $I103
    set $P2409, $P118
.annotate 'line', 1957
    new $P117, "Float"
    assign $P117, 1
    set $P2410, $P117
.annotate 'line', 1958
    new $P117, "Float"
    assign $P117, 0
    set $P2411, $P117
.annotate 'line', 1960
    set $P117, $P2409
    unless_null $P117, vivify_1164
    new $P117, "Undef"
  vivify_1164:
    set $N102, $P117
    set $N103, 0
    isge $I103, $N102, $N103
    if $I103, if_2413
.annotate 'line', 1964
    find_lex $P118, "self"
    nqp_decontainerize $P119, $P118
    set $P120, $P2408
    unless_null $P120, vivify_1165
    new $P120, "Undef"
  vivify_1165:
    $P121 = $P119."optional-value"($P120)
    unless $P121, if_2414_end
.annotate 'line', 1965
    new $P122, "String"
    assign $P122, ""
    set $P2410, $P122
.annotate 'line', 1966
    new $P122, "Float"
    assign $P122, 1
    set $P2411, $P122
  if_2414_end:
.annotate 'line', 1964
    goto if_2413_end
  if_2413:
.annotate 'line', 1961
    set $P118, $P2408
    unless_null $P118, vivify_1166
    new $P118, "Undef"
  vivify_1166:
    set $S102, $P118
    set $P119, $P2409
    unless_null $P119, vivify_1167
    new $P119, "Undef"
  vivify_1167:
    add $P120, $P119, 1
    set $I104, $P120
    substr $S103, $S102, $I104
    new $P121, 'String'
    set $P121, $S103
    set $P2410, $P121
.annotate 'line', 1962
    set $P118, $P2408
    unless_null $P118, vivify_1168
    new $P118, "Undef"
  vivify_1168:
    set $S102, $P118
    set $P119, $P2409
    unless_null $P119, vivify_1169
    new $P119, "Undef"
  vivify_1169:
    set $I104, $P119
    substr $S103, $S102, 0, $I104
    new $P120, 'String'
    set $P120, $S103
    set $P2408, $P120
.annotate 'line', 1963
    new $P118, "Float"
    assign $P118, 1
    set $P2411, $P118
  if_2413_end:
.annotate 'line', 1968
    set $P120, $P2408
    unless_null $P120, vivify_1170
    new $P120, "Undef"
  vivify_1170:
    find_lex $P117, "self"
    nqp_decontainerize $P118, $P117
    nqp_get_sc_object $P119, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 145
    repr_get_attr_obj $P2416, $P118, $P119, "%!options", 1
    unless_null $P2416, vivify_1171
    $P2416 = root_new ['parrot';'Hash']
  vivify_1171:
    exists $I103, $P2416[$P120]
    if $I103, unless_2415_end
    new $P121, 'String'
    set $P121, "Illegal option --"
    set $P122, $P2408
    unless_null $P122, vivify_1172
    new $P122, "Undef"
  vivify_1172:
    concat $P123, $P121, $P122
    die $P123
  unless_2415_end:
.annotate 'line', 1969
    find_lex $P118, "self"
    nqp_decontainerize $P119, $P118
    set $P120, $P2408
    unless_null $P120, vivify_1173
    new $P120, "Undef"
  vivify_1173:
    $P121 = $P119."wants-value"($P120)
    isfalse $I103, $P121
    if $I103, if_2418
    new $P117, 'Integer'
    set $P117, $I103
    goto if_2418_end
  if_2418:
    set $P122, $P2411
    unless_null $P122, vivify_1174
    new $P122, "Undef"
  vivify_1174:
    set $P117, $P122
  if_2418_end:
    unless $P117, if_2417_end
    new $P123, 'String'
    set $P123, "Option --"
    set $P124, $P2408
    unless_null $P124, vivify_1175
    new $P124, "Undef"
  vivify_1175:
    concat $P125, $P123, $P124
    concat $P126, $P125, " does not allow a value"
    die $P126
  if_2417_end:
.annotate 'line', 1970
    set $P118, $P2411
    unless_null $P118, vivify_1176
    new $P118, "Undef"
  vivify_1176:
    isfalse $I103, $P118
    if $I103, if_2420
    new $P117, 'Integer'
    set $P117, $I103
    goto if_2420_end
  if_2420:
    find_lex $P119, "self"
    nqp_decontainerize $P120, $P119
    set $P121, $P2408
    unless_null $P121, vivify_1177
    new $P121, "Undef"
  vivify_1177:
    $P122 = $P120."wants-value"($P121)
    set $P117, $P122
  if_2420_end:
    unless $P117, if_2419_end
.annotate 'line', 1971
    new $P123, 'String'
    set $P123, "--"
    set $P124, $P2408
    unless_null $P124, vivify_1178
    new $P124, "Undef"
  vivify_1178:
    concat $P125, $P123, $P124
    $P126 = "get-value"($P125)
    set $P2410, $P126
  if_2419_end:
.annotate 'line', 1973
    find_lex $P117, "$result"
    unless_null $P117, vivify_1179
    new $P117, "Undef"
  vivify_1179:
    set $P118, $P2408
    unless_null $P118, vivify_1180
    new $P118, "Undef"
  vivify_1180:
    set $P119, $P2410
    unless_null $P119, vivify_1181
    new $P119, "Undef"
  vivify_1181:
    $P117."add-option"($P118, $P119)
.annotate 'line', 1974
    new $P118, 'String'
    set $P118, "--"
    set $P119, $P2408
    unless_null $P119, vivify_1182
    new $P119, "Undef"
  vivify_1182:
    concat $P120, $P118, $P119
    find_lex $P121, "self"
    nqp_decontainerize $P122, $P121
    nqp_get_sc_object $P123, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 145
    repr_get_attr_obj $P2422, $P122, $P123, "%!stopper", 2
    unless_null $P2422, vivify_1183
    $P2422 = root_new ['parrot';'Hash']
  vivify_1183:
    set $P124, $P2422[$P120]
    unless_null $P124, vivify_1184
    new $P124, "Undef"
  vivify_1184:
    if $P124, if_2421
    set $P117, $P124
    goto if_2421_end
  if_2421:
    find_lex $P125, "slurp-rest"
    set $P117, $P125
  if_2421_end:
.annotate 'line', 1953
    .return ($P117)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "_block2451"  :subid("329_1338064439.457") :outer("182_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2045
    .const 'Sub' $P2551 = "181_1338064439.457" 
    capture_lex $P2551
    .const 'Sub' $P2548 = "180_1338064439.457" 
    capture_lex $P2548
    .const 'Sub' $P2545 = "179_1338064439.457" 
    capture_lex $P2545
    .const 'Sub' $P2543 = "178_1338064439.457" 
    capture_lex $P2543
    .const 'Sub' $P2541 = "177_1338064439.457" 
    capture_lex $P2541
    .const 'Sub' $P2529 = "176_1338064439.457" 
    capture_lex $P2529
    .const 'Sub' $P2520 = "175_1338064439.457" 
    capture_lex $P2520
    .const 'Sub' $P2511 = "174_1338064439.457" 
    capture_lex $P2511
    .const 'Sub' $P2509 = "173_1338064439.457" 
    capture_lex $P2509
    .const 'Sub' $P2505 = "172_1338064439.457" 
    capture_lex $P2505
    .const 'Sub' $P2500 = "171_1338064439.457" 
    capture_lex $P2500
    .const 'Sub' $P2494 = "170_1338064439.457" 
    capture_lex $P2494
    .const 'Sub' $P2490 = "169_1338064439.457" 
    capture_lex $P2490
    .const 'Sub' $P2487 = "168_1338064439.457" 
    capture_lex $P2487
    .const 'Sub' $P2481 = "167_1338064439.457" 
    capture_lex $P2481
    .const 'Sub' $P2478 = "166_1338064439.457" 
    capture_lex $P2478
    .const 'Sub' $P2471 = "165_1338064439.457" 
    capture_lex $P2471
    .const 'Sub' $P2465 = "164_1338064439.457" 
    capture_lex $P2465
    .const 'Sub' $P2460 = "163_1338064439.457" 
    capture_lex $P2460
    .const 'Sub' $P2455 = "162_1338064439.457" 
    capture_lex $P2455
    .lex "$?PACKAGE", $P2453
    .lex "$?CLASS", $P2454
.annotate 'line', 2249
    .const 'Sub' $P2551 = "181_1338064439.457" 
    newclosure $P2568, $P2551
.annotate 'line', 2045
    .return ($P2568)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "new" :anon :subid("162_1338064439.457") :outer("329_1338064439.457")
    .param pmc param_2456
    .param pmc param_2457 :named("handle")
    .param pmc param_2458 :optional :named("description")
    .param int has_param_2458 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2076
    .lex "self", param_2456
    .lex "$handle", param_2457
    if has_param_2458, optparam_1187
    new $P101, "String"
    assign $P101, "<unknown>"
    set param_2458, $P101
  optparam_1187:
    .lex "$description", param_2458
.annotate 'line', 2077
    new $P102, "Undef"
    set $P2459, $P102
    .lex "$obj", $P2459
    set $P103, param_2456
    nqp_decontainerize $P104, $P103
    $P105 = $P104."CREATE"()
    set $P2459, $P105
.annotate 'line', 2078
    set $P103, $P2459
    unless_null $P103, vivify_1188
    new $P103, "Undef"
  vivify_1188:
    set $P104, param_2457
    unless_null $P104, vivify_1189
    new $P104, "Undef"
  vivify_1189:
    set $P105, param_2458
    unless_null $P105, vivify_1190
    new $P105, "Undef"
  vivify_1190:
    $P103."BUILD"($P104 :named("handle"), $P105 :named("description"))
.annotate 'line', 2076
    set $P103, $P2459
    unless_null $P103, vivify_1191
    new $P103, "Undef"
  vivify_1191:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "BUILD" :anon :subid("163_1338064439.457") :outer("329_1338064439.457")
    .param pmc param_2461
    .param pmc param_2462 :named("handle")
    .param pmc param_2463 :named("description")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2082
    .lex "self", param_2461
    .lex "$handle", param_2462
    .lex "$description", param_2463
.annotate 'line', 2084
    set $P101, param_2462
    unless_null $P101, vivify_1192
    new $P101, "Undef"
  vivify_1192:
    set $S100, $P101
    nqp_create_sc $P102, $S100
    set $P103, param_2461
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_bind_attr_obj $P104, $P105, "$!sc", 0, $P102
.annotate 'line', 2085
    set $P101, param_2462
    unless_null $P101, vivify_1193
    new $P101, "Undef"
  vivify_1193:
    set $P102, param_2461
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_bind_attr_obj $P103, $P104, "$!handle", 1, $P101
.annotate 'line', 2086
    new $P101, "Hash"
    set $P102, param_2461
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_bind_attr_obj $P103, $P104, "%!addr_to_slot", 7, $P101
.annotate 'line', 2087
    new $P101, "ResizablePMCArray"
    set $P102, param_2461
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_bind_attr_obj $P103, $P104, "@!fixup_tasks", 6, $P101
.annotate 'line', 2088
    new $P101, "ResizablePMCArray"
    set $P102, param_2461
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_bind_attr_obj $P103, $P104, "@!load_dependency_tasks", 5, $P101
.annotate 'line', 2089
    find_dynamic_lex $P103, "%*COMPILING"
    unless_null $P103, vivify_1194
    get_hll_global $P101, "GLOBAL"
    get_who $P102, $P101
    set $P103, $P102["%COMPILING"]
    unless_null $P103, vivify_1195
    die "Contextual %*COMPILING not found"
  vivify_1195:
  vivify_1194:
    set $P2464, $P103["%?OPTIONS"]
    unless_null $P2464, vivify_1196
    $P2464 = root_new ['parrot';'Hash']
  vivify_1196:
    set $P104, $P2464["target"]
    unless_null $P104, vivify_1197
    new $P104, "Undef"
  vivify_1197:
    set $S100, $P104
    iseq $I100, $S100, "pir"
    new $P105, 'Integer'
    set $P105, $I100
    set $P106, param_2461
    nqp_decontainerize $P107, $P106
    nqp_get_sc_object $P108, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_bind_attr_obj $P107, $P108, "$!precomp_mode", 2, $P105
.annotate 'line', 2090
    new $P101, "Float"
    assign $P101, 0
    set $P102, param_2461
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_bind_attr_obj $P103, $P104, "$!num_code_refs", 3, $P101
.annotate 'line', 2091
    new $P101, "ResizablePMCArray"
    set $P102, param_2461
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_bind_attr_obj $P103, $P104, "$!code_ref_blocks", 4, $P101
.annotate 'line', 2092
    set $P101, param_2461
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P104, $P102, $P103, "$!sc", 0
    unless_null $P104, vivify_1198
    new $P104, "Undef"
  vivify_1198:
    set $P105, param_2463
    unless_null $P105, vivify_1199
    new $P105, "Undef"
  vivify_1199:
    $P104."set_description"($P105)
.annotate 'line', 2095
    set $P101, param_2461
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P104, $P102, $P103, "$!sc", 0
    unless_null $P104, vivify_1200
    new $P104, "Undef"
  vivify_1200:
    nqp_push_compiling_sc $P104
.annotate 'line', 2082
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "slot_for_object" :anon :subid("164_1338064439.457") :outer("329_1338064439.457")
    .param pmc param_2466
    .param pmc param_2467
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2099
    .lex "self", param_2466
    .lex "$obj", param_2467
.annotate 'line', 2100
    new $P101, "Undef"
    set $P2468, $P101
    .lex "$slot", $P2468
    set $P102, param_2467
    unless_null $P102, vivify_1201
    new $P102, "Undef"
  vivify_1201:
    get_id $I100, $P102
    set $P103, param_2466
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P2469, $P104, $P105, "%!addr_to_slot", 7
    unless_null $P2469, vivify_1202
    $P2469 = root_new ['parrot';'Hash']
  vivify_1202:
    set $P106, $P2469[$I100]
    unless_null $P106, vivify_1203
    new $P106, "Undef"
  vivify_1203:
    set $P2468, $P106
.annotate 'line', 2101
    set $P102, $P2468
    unless_null $P102, vivify_1204
    new $P102, "Undef"
  vivify_1204:
    defined $I100, $P102
    if $I100, unless_2470_end
.annotate 'line', 2102
    die "slot_for_object called on object not in context"
  unless_2470_end:
.annotate 'line', 2099
    set $P102, $P2468
    unless_null $P102, vivify_1205
    new $P102, "Undef"
  vivify_1205:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "get_slot_past_for_object" :anon :subid("165_1338064439.457") :outer("329_1338064439.457")
    .param pmc param_2472
    .param pmc param_2473
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2111
    .lex "self", param_2472
    .lex "$obj", param_2473
.annotate 'line', 2112
    new $P101, "Undef"
    set $P2474, $P101
    .lex "$slot", $P2474
.annotate 'line', 2113
    new $P102, "Undef"
    set $P2475, $P102
    .lex "$past", $P2475
.annotate 'line', 2112
    set $P103, param_2472
    nqp_decontainerize $P104, $P103
    set $P105, param_2473
    unless_null $P105, vivify_1206
    new $P105, "Undef"
  vivify_1206:
    $P106 = $P104."slot_for_object"($P105)
    set $P2474, $P106
.annotate 'line', 2113
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "PAST"
    get_who $P105, $P104
    set $P106, $P105["Op"]
    set $P107, param_2472
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P110, $P108, $P109, "$!handle", 1
    unless_null $P110, vivify_1207
    new $P110, "Undef"
  vivify_1207:
    set $P111, $P2474
    unless_null $P111, vivify_1208
    new $P111, "Undef"
  vivify_1208:
    $P112 = $P106."new"($P110, $P111, "nqp_get_sc_object Psi" :named("pirop"))
    set $P2475, $P112
.annotate 'line', 2114
    new $P103, "Float"
    assign $P103, 1
    set $P2476, $P2475
    unless_null $P2476, vivify_1209
    $P2476 = root_new ['parrot';'Hash']
    set $P2475, $P2476
  vivify_1209:
    set $P2476["has_compile_time_value"], $P103
.annotate 'line', 2115
    set $P103, param_2473
    unless_null $P103, vivify_1210
    new $P103, "Undef"
  vivify_1210:
    set $P2477, $P2475
    unless_null $P2477, vivify_1211
    $P2477 = root_new ['parrot';'Hash']
    set $P2475, $P2477
  vivify_1211:
    set $P2477["compile_time_value"], $P103
.annotate 'line', 2111
    set $P103, $P2475
    unless_null $P103, vivify_1212
    new $P103, "Undef"
  vivify_1212:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "get_slot_past_for_code_ref_at" :anon :subid("166_1338064439.457") :outer("329_1338064439.457")
    .param pmc param_2479
    .param pmc param_2480
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2120
    .lex "self", param_2479
    .lex "$idx", param_2480
.annotate 'line', 2121
    get_hll_global $P101, "GLOBAL"
    nqp_get_package_through_who $P102, $P101, "PAST"
    get_who $P103, $P102
    set $P104, $P103["Op"]
    set $P105, param_2479
    nqp_decontainerize $P106, $P105
    nqp_get_sc_object $P107, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P108, $P106, $P107, "$!handle", 1
    unless_null $P108, vivify_1213
    new $P108, "Undef"
  vivify_1213:
    set $P109, param_2480
    unless_null $P109, vivify_1214
    new $P109, "Undef"
  vivify_1214:
    $P110 = $P104."new"($P108, $P109, "nqp_get_sc_code_ref Psi" :named("pirop"))
.annotate 'line', 2120
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.include "except_types.pasm"
.sub "set_slot_past" :anon :subid("167_1338064439.457") :outer("329_1338064439.457")
    .param pmc param_2484
    .param pmc param_2485
    .param pmc param_2486
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2125
    new $P2483, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2483, control_2482
    push_eh $P2483
    .lex "self", param_2484
    .lex "$slot", param_2485
    .lex "$past_to_set", param_2486
.annotate 'line', 2126
    new $P101, "Exception"
    set $P101['type'], .CONTROL_RETURN
    get_hll_global $P102, "GLOBAL"
    nqp_get_package_through_who $P103, $P102, "PAST"
    get_who $P104, $P103
    set $P105, $P104["Op"]
    set $P106, param_2484
    nqp_decontainerize $P107, $P106
    nqp_get_sc_object $P108, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P109, $P107, $P108, "$!handle", 1
    unless_null $P109, vivify_1215
    new $P109, "Undef"
  vivify_1215:
    set $P110, param_2485
    unless_null $P110, vivify_1216
    new $P110, "Undef"
  vivify_1216:
    set $P111, param_2486
    unless_null $P111, vivify_1217
    new $P111, "Undef"
  vivify_1217:
    $P112 = $P105."new"($P109, $P110, $P111, "nqp_set_sc_object vsiP" :named("pirop"))
    setattribute $P101, 'payload', $P112
    throw $P101
.annotate 'line', 2125
    .return ()
  control_2482:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P101, exception, "payload"
    .return ($P101)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "set_cur_sc" :anon :subid("168_1338064439.457") :outer("329_1338064439.457")
    .param pmc param_2488
    .param pmc param_2489
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2132
    .lex "self", param_2488
    .lex "$to_wrap", param_2489
.annotate 'line', 2133
    get_hll_global $P101, "GLOBAL"
    nqp_get_package_through_who $P102, $P101, "PAST"
    get_who $P103, $P102
    set $P104, $P103["Op"]
    set $P105, param_2489
    unless_null $P105, vivify_1218
    new $P105, "Undef"
  vivify_1218:
.annotate 'line', 2136
    get_hll_global $P106, "GLOBAL"
    nqp_get_package_through_who $P107, $P106, "PAST"
    get_who $P108, $P107
    set $P109, $P108["Var"]
    $P110 = $P109."new"("cur_sc" :named("name"), "register" :named("scope"))
    $P111 = $P104."new"($P105, $P110, "nqp_set_sc_for_object__0PP" :named("pirop"))
.annotate 'line', 2132
    .return ($P111)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "add_object_to_cur_sc_past" :anon :subid("169_1338064439.457") :outer("329_1338064439.457")
    .param pmc param_2491
    .param pmc param_2492
    .param pmc param_2493
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2140
    .lex "self", param_2491
    .lex "$slot", param_2492
    .lex "$to_wrap", param_2493
.annotate 'line', 2141
    get_hll_global $P101, "GLOBAL"
    nqp_get_package_through_who $P102, $P101, "PAST"
    get_who $P103, $P102
    set $P104, $P103["Op"]
.annotate 'line', 2143
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Var"]
    $P109 = $P108."new"("cur_sc" :named("name"), "register" :named("scope"))
    set $P110, param_2492
    unless_null $P110, vivify_1219
    new $P110, "Undef"
  vivify_1219:
    set $P111, param_2493
    unless_null $P111, vivify_1220
    new $P111, "Undef"
  vivify_1220:
    $P112 = $P104."new"($P109, $P110, $P111, "nqp_add_object_to_sc 2PiP" :named("pirop"))
.annotate 'line', 2140
    .return ($P112)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "add_object" :anon :subid("170_1338064439.457") :outer("329_1338064439.457")
    .param pmc param_2495
    .param pmc param_2496
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2150
    .lex "self", param_2495
    .lex "$obj", param_2496
.annotate 'line', 2152
    new $P101, "Undef"
    set $P2497, $P101
    .lex "$idx", $P2497
.annotate 'line', 2151
    set $P102, param_2496
    unless_null $P102, vivify_1221
    new $P102, "Undef"
  vivify_1221:
    set $P103, param_2495
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P106, $P104, $P105, "$!sc", 0
    unless_null $P106, vivify_1222
    new $P106, "Undef"
  vivify_1222:
    nqp_set_sc_for_object $P102, $P106
.annotate 'line', 2152
    set $P102, param_2495
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P105, $P103, $P104, "$!sc", 0
    unless_null $P105, vivify_1223
    new $P105, "Undef"
  vivify_1223:
    $P106 = $P105."elems"()
    set $P2497, $P106
.annotate 'line', 2153
    set $P102, param_2496
    unless_null $P102, vivify_1224
    new $P102, "Undef"
  vivify_1224:
    set $P103, $P2497
    unless_null $P103, vivify_1225
    new $P103, "Undef"
  vivify_1225:
    set $I100, $P103
    set $P104, param_2495
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P2498, $P105, $P106, "$!sc", 0
    unless_null $P2498, vivify_1226
    $P2498 = root_new ['parrot';'ResizablePMCArray']
    repr_bind_attr_obj $P105, $P106, "$!sc", 0, $P2498
  vivify_1226:
    set $P2498[$I100], $P102
.annotate 'line', 2154
    set $P102, $P2497
    unless_null $P102, vivify_1227
    new $P102, "Undef"
  vivify_1227:
    set $P103, param_2496
    unless_null $P103, vivify_1228
    new $P103, "Undef"
  vivify_1228:
    get_id $I100, $P103
    set $P104, param_2495
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P2499, $P105, $P106, "%!addr_to_slot", 7
    unless_null $P2499, vivify_1229
    $P2499 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P105, $P106, "%!addr_to_slot", 7, $P2499
  vivify_1229:
    set $P2499[$I100], $P102
.annotate 'line', 2150
    set $P102, $P2497
    unless_null $P102, vivify_1230
    new $P102, "Undef"
  vivify_1230:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "add_root_code_ref" :anon :subid("171_1338064439.457") :outer("329_1338064439.457")
    .param pmc param_2501
    .param pmc param_2502
    .param pmc param_2503
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2159
    .lex "self", param_2501
    .lex "$code_ref", param_2502
    .lex "$past_block", param_2503
.annotate 'line', 2160
    new $P101, "Undef"
    set $P2504, $P101
    .lex "$code_ref_idx", $P2504
    set $P102, param_2501
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P105, $P103, $P104, "$!num_code_refs", 3
    unless_null $P105, vivify_1231
    new $P105, "Undef"
  vivify_1231:
    set $P2504, $P105
.annotate 'line', 2161
    set $P102, param_2501
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P105, $P103, $P104, "$!num_code_refs", 3
    unless_null $P105, vivify_1232
    new $P105, "Undef"
  vivify_1232:
    add $P106, $P105, 1
    set $P107, param_2501
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_bind_attr_obj $P108, $P109, "$!num_code_refs", 3, $P106
.annotate 'line', 2162
    set $P102, param_2501
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P105, $P103, $P104, "$!code_ref_blocks", 4
    unless_null $P105, vivify_1233
    new $P105, "Undef"
  vivify_1233:
    set $P106, param_2503
    unless_null $P106, vivify_1234
    new $P106, "Undef"
  vivify_1234:
    $P105."push"($P106)
.annotate 'line', 2163
    set $P102, param_2501
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P105, $P103, $P104, "$!sc", 0
    unless_null $P105, vivify_1235
    new $P105, "Undef"
  vivify_1235:
    set $P106, $P2504
    unless_null $P106, vivify_1236
    new $P106, "Undef"
  vivify_1236:
    set $I100, $P106
    set $P107, param_2502
    unless_null $P107, vivify_1237
    new $P107, "Undef"
  vivify_1237:
    nqp_add_code_ref_to_sc $P105, $I100, $P107
.annotate 'line', 2159
    set $P102, $P2504
    unless_null $P102, vivify_1238
    new $P102, "Undef"
  vivify_1238:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "update_root_code_ref" :anon :subid("172_1338064439.457") :outer("329_1338064439.457")
    .param pmc param_2506
    .param pmc param_2507
    .param pmc param_2508
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2168
    .lex "self", param_2506
    .lex "$idx", param_2507
    .lex "$new_code_ref", param_2508
.annotate 'line', 2169
    set $P101, param_2506
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P104, $P102, $P103, "$!sc", 0
    unless_null $P104, vivify_1239
    new $P104, "Undef"
  vivify_1239:
    set $P105, param_2507
    unless_null $P105, vivify_1240
    new $P105, "Undef"
  vivify_1240:
    set $I100, $P105
    set $P106, param_2508
    unless_null $P106, vivify_1241
    new $P106, "Undef"
  vivify_1241:
    nqp_add_code_ref_to_sc $P104, $I100, $P106
.annotate 'line', 2168
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "is_precompilation_mode" :anon :subid("173_1338064439.457") :outer("329_1338064439.457")
    .param pmc param_2510
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2173
    .lex "self", param_2510
    set $P101, param_2510
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P104, $P102, $P103, "$!precomp_mode", 2
    unless_null $P104, vivify_1242
    new $P104, "Undef"
  vivify_1242:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "add_load_dependency_task" :anon :subid("174_1338064439.457") :outer("329_1338064439.457")
    .param pmc param_2512
    .param pmc param_2513 :optional :named("deserialize_past")
    .param int has_param_2513 :opt_flag
    .param pmc param_2514 :optional :named("fixup_past")
    .param int has_param_2514 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2179
    .lex "self", param_2512
    if has_param_2513, optparam_1243
    new $P101, "Undef"
    set param_2513, $P101
  optparam_1243:
    .lex "$deserialize_past", param_2513
    if has_param_2514, optparam_1244
    new $P102, "Undef"
    set param_2514, $P102
  optparam_1244:
    .lex "$fixup_past", param_2514
.annotate 'line', 2180
    set $P104, param_2512
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P107, $P105, $P106, "$!precomp_mode", 2
    unless_null $P107, vivify_1245
    new $P107, "Undef"
  vivify_1245:
    if $P107, if_2515
.annotate 'line', 2184
    set $P110, param_2514
    unless_null $P110, vivify_1246
    new $P110, "Undef"
  vivify_1246:
    if $P110, if_2518
    set $P109, $P110
    goto if_2518_end
  if_2518:
    set $P111, param_2512
    nqp_decontainerize $P112, $P111
    nqp_get_sc_object $P113, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P2519, $P112, $P113, "@!load_dependency_tasks", 5
    unless_null $P2519, vivify_1247
    $P2519 = root_new ['parrot';'ResizablePMCArray']
  vivify_1247:
    set $P114, param_2514
    unless_null $P114, vivify_1248
    new $P114, "Undef"
  vivify_1248:
    $P115 = $P2519."push"($P114)
    set $P109, $P115
  if_2518_end:
.annotate 'line', 2183
    set $P103, $P109
.annotate 'line', 2180
    goto if_2515_end
  if_2515:
.annotate 'line', 2181
    set $P109, param_2513
    unless_null $P109, vivify_1249
    new $P109, "Undef"
  vivify_1249:
    if $P109, if_2516
    set $P108, $P109
    goto if_2516_end
  if_2516:
    set $P110, param_2512
    nqp_decontainerize $P111, $P110
    nqp_get_sc_object $P112, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P2517, $P111, $P112, "@!load_dependency_tasks", 5
    unless_null $P2517, vivify_1250
    $P2517 = root_new ['parrot';'ResizablePMCArray']
  vivify_1250:
    set $P113, param_2513
    unless_null $P113, vivify_1251
    new $P113, "Undef"
  vivify_1251:
    $P114 = $P2517."push"($P113)
    set $P108, $P114
  if_2516_end:
.annotate 'line', 2180
    set $P103, $P108
  if_2515_end:
.annotate 'line', 2179
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "add_fixup_task" :anon :subid("175_1338064439.457") :outer("329_1338064439.457")
    .param pmc param_2521
    .param pmc param_2522 :optional :named("deserialize_past")
    .param int has_param_2522 :opt_flag
    .param pmc param_2523 :optional :named("fixup_past")
    .param int has_param_2523 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2190
    .lex "self", param_2521
    if has_param_2522, optparam_1252
    new $P101, "Undef"
    set param_2522, $P101
  optparam_1252:
    .lex "$deserialize_past", param_2522
    if has_param_2523, optparam_1253
    new $P102, "Undef"
    set param_2523, $P102
  optparam_1253:
    .lex "$fixup_past", param_2523
.annotate 'line', 2191
    set $P104, param_2521
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P107, $P105, $P106, "$!precomp_mode", 2
    unless_null $P107, vivify_1254
    new $P107, "Undef"
  vivify_1254:
    if $P107, if_2524
.annotate 'line', 2195
    set $P110, param_2523
    unless_null $P110, vivify_1255
    new $P110, "Undef"
  vivify_1255:
    if $P110, if_2527
    set $P109, $P110
    goto if_2527_end
  if_2527:
    set $P111, param_2521
    nqp_decontainerize $P112, $P111
    nqp_get_sc_object $P113, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P2528, $P112, $P113, "@!fixup_tasks", 6
    unless_null $P2528, vivify_1256
    $P2528 = root_new ['parrot';'ResizablePMCArray']
  vivify_1256:
    set $P114, param_2523
    unless_null $P114, vivify_1257
    new $P114, "Undef"
  vivify_1257:
    $P115 = $P2528."push"($P114)
    set $P109, $P115
  if_2527_end:
.annotate 'line', 2194
    set $P103, $P109
.annotate 'line', 2191
    goto if_2524_end
  if_2524:
.annotate 'line', 2192
    set $P109, param_2522
    unless_null $P109, vivify_1258
    new $P109, "Undef"
  vivify_1258:
    if $P109, if_2525
    set $P108, $P109
    goto if_2525_end
  if_2525:
    set $P110, param_2521
    nqp_decontainerize $P111, $P110
    nqp_get_sc_object $P112, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P2526, $P111, $P112, "@!fixup_tasks", 6
    unless_null $P2526, vivify_1259
    $P2526 = root_new ['parrot';'ResizablePMCArray']
  vivify_1259:
    set $P113, param_2522
    unless_null $P113, vivify_1260
    new $P113, "Undef"
  vivify_1260:
    $P114 = $P2526."push"($P113)
    set $P108, $P114
  if_2525_end:
.annotate 'line', 2191
    set $P103, $P108
  if_2524_end:
.annotate 'line', 2190
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "get_ref" :anon :subid("176_1338064439.457") :outer("329_1338064439.457")
    .param pmc param_2530
    .param pmc param_2531
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2202
    .const 'Sub' $P2536 = "330_1338064439.457" 
    capture_lex $P2536
    .lex "self", param_2530
    .lex "$obj", param_2531
.annotate 'line', 2205
    new $P101, "Undef"
    set $P2532, $P101
    .lex "$sc", $P2532
    set $P102, param_2531
    unless_null $P102, vivify_1261
    new $P102, "Undef"
  vivify_1261:
    nqp_get_sc_for_object $P103, $P102
    set $P2532, $P103
.annotate 'line', 2206
    set $P102, $P2532
    unless_null $P102, vivify_1262
    new $P102, "Undef"
  vivify_1262:
    defined $I100, $P102
    if $I100, unless_2533_end
.annotate 'line', 2207
    set $P103, param_2530
    nqp_decontainerize $P104, $P103
    set $P105, param_2531
    unless_null $P105, vivify_1263
    new $P105, "Undef"
  vivify_1263:
    $P104."add_object"($P105)
.annotate 'line', 2208
    set $P103, param_2530
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P106, $P104, $P105, "$!sc", 0
    unless_null $P106, vivify_1264
    new $P106, "Undef"
  vivify_1264:
    set $P2532, $P106
  unless_2533_end:
.annotate 'line', 2214
    set $P103, $P2532
    unless_null $P103, vivify_1265
    new $P103, "Undef"
  vivify_1265:
    set $P104, param_2530
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P107, $P105, $P106, "$!sc", 0
    unless_null $P107, vivify_1266
    new $P107, "Undef"
  vivify_1266:
    issame $I100, $P103, $P107
    if $I100, if_2534
.annotate 'line', 2217
    .const 'Sub' $P2536 = "330_1338064439.457" 
    capture_lex $P2536
    $P112 = $P2536()
    set $P102, $P112
.annotate 'line', 2214
    goto if_2534_end
  if_2534:
.annotate 'line', 2215
    set $P108, param_2530
    nqp_decontainerize $P109, $P108
    set $P110, param_2531
    unless_null $P110, vivify_1275
    new $P110, "Undef"
  vivify_1275:
    $P111 = $P109."get_slot_past_for_object"($P110)
.annotate 'line', 2214
    set $P102, $P111
  if_2534_end:
.annotate 'line', 2202
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "_block2535"  :anon :subid("330_1338064439.457") :outer("176_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2218
    new $P108, "Undef"
    set $P2537, $P108
    .lex "$handle", $P2537
.annotate 'line', 2219
    new $P109, "Undef"
    set $P2538, $P109
    .lex "$past", $P2538
.annotate 'line', 2218
    find_lex $P110, "$sc"
    unless_null $P110, vivify_1267
    new $P110, "Undef"
  vivify_1267:
    $P112 = $P110."handle"()
    set $P2537, $P112
.annotate 'line', 2219
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P112, $P110, "PAST"
    get_who $P113, $P112
    set $P114, $P113["Op"]
    set $P115, $P2537
    unless_null $P115, vivify_1268
    new $P115, "Undef"
  vivify_1268:
.annotate 'line', 2220
    find_lex $P116, "$sc"
    unless_null $P116, vivify_1269
    new $P116, "Undef"
  vivify_1269:
    find_lex $P117, "$obj"
    unless_null $P117, vivify_1270
    new $P117, "Undef"
  vivify_1270:
    $P118 = $P116."slot_index_for"($P117)
    $P119 = $P114."new"($P115, $P118, "nqp_get_sc_object Psi" :named("pirop"))
.annotate 'line', 2219
    set $P2538, $P119
.annotate 'line', 2221
    new $P110, "Float"
    assign $P110, 1
    set $P2539, $P2538
    unless_null $P2539, vivify_1271
    $P2539 = root_new ['parrot';'Hash']
    set $P2538, $P2539
  vivify_1271:
    set $P2539["has_compile_time_value"], $P110
.annotate 'line', 2222
    find_lex $P110, "$obj"
    unless_null $P110, vivify_1272
    new $P110, "Undef"
  vivify_1272:
    set $P2540, $P2538
    unless_null $P2540, vivify_1273
    $P2540 = root_new ['parrot';'Hash']
    set $P2538, $P2540
  vivify_1273:
    set $P2540["compile_time_value"], $P110
.annotate 'line', 2217
    set $P110, $P2538
    unless_null $P110, vivify_1274
    new $P110, "Undef"
  vivify_1274:
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "sc" :anon :subid("177_1338064439.457") :outer("329_1338064439.457")
    .param pmc param_2542
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2228
    .lex "self", param_2542
    set $P101, param_2542
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P104, $P102, $P103, "$!sc", 0
    unless_null $P104, vivify_1276
    new $P104, "Undef"
  vivify_1276:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "handle" :anon :subid("178_1338064439.457") :outer("329_1338064439.457")
    .param pmc param_2544
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2233
    .lex "self", param_2544
    set $P101, param_2544
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P104, $P102, $P103, "$!handle", 1
    unless_null $P104, vivify_1277
    new $P104, "Undef"
  vivify_1277:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "load_dependency_tasks" :anon :subid("179_1338064439.457") :outer("329_1338064439.457")
    .param pmc param_2546
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2238
    .lex "self", param_2546
    set $P101, param_2546
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P2547, $P102, $P103, "@!load_dependency_tasks", 5
    unless_null $P2547, vivify_1278
    $P2547 = root_new ['parrot';'ResizablePMCArray']
  vivify_1278:
    .return ($P2547)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "fixup_tasks" :anon :subid("180_1338064439.457") :outer("329_1338064439.457")
    .param pmc param_2549
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2243
    .lex "self", param_2549
    set $P101, param_2549
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P2550, $P102, $P103, "@!fixup_tasks", 6
    unless_null $P2550, vivify_1279
    $P2550 = root_new ['parrot';'ResizablePMCArray']
  vivify_1279:
    .return ($P2550)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.include "except_types.pasm"
.sub "serialize_and_produce_deserialization_past" :anon :subid("181_1338064439.457") :outer("329_1338064439.457")
    .param pmc param_2552
    .param pmc param_2553
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2249
    .const 'Sub' $P2565 = "331_1338064439.457" 
    capture_lex $P2565
    .lex "self", param_2552
    .lex "$sc_reg", param_2553
.annotate 'line', 2251
    new $P101, "Undef"
    set $P2554, $P101
    .lex "$sh", $P2554
.annotate 'line', 2252
    new $P102, "Undef"
    set $P2555, $P102
    .lex "$serialized", $P2555
.annotate 'line', 2258
    new $P103, "Undef"
    set $P2556, $P103
    .lex "$sh_past", $P2556
.annotate 'line', 2263
    new $P104, "Undef"
    set $P2557, $P104
    .lex "$sh_elems", $P2557
.annotate 'line', 2264
    new $P105, "Undef"
    set $P2558, $P105
    .lex "$i", $P2558
.annotate 'line', 2275
    new $P106, "Undef"
    set $P2559, $P106
    .lex "$cr_past", $P2559
.annotate 'line', 2251
    new $P107, "ResizableStringArray"
    set $P2554, $P107
.annotate 'line', 2252
    set $P107, param_2552
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P110, $P108, $P109, "$!sc", 0
    unless_null $P110, vivify_1280
    new $P110, "Undef"
  vivify_1280:
    set $P111, $P2554
    unless_null $P111, vivify_1281
    new $P111, "Undef"
  vivify_1281:
    nqp_serialize_sc $S100, $P110, $P111
    new $P112, 'String'
    set $P112, $S100
    set $P2555, $P112
.annotate 'line', 2255
    nqp_pop_compiling_sc 
.annotate 'line', 2258
    get_hll_global $P107, "GLOBAL"
    nqp_get_package_through_who $P108, $P107, "PAST"
    get_who $P109, $P108
    set $P110, $P109["Stmts"]
.annotate 'line', 2259
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "PAST"
    get_who $P113, $P112
    set $P114, $P113["Op"]
.annotate 'line', 2261
    get_hll_global $P115, "GLOBAL"
    nqp_get_package_through_who $P116, $P115, "PAST"
    get_who $P117, $P116
    set $P118, $P117["Var"]
    $P119 = $P118."new"("register" :named("scope"), "string_heap" :named("name"), 1 :named("isdecl"))
.annotate 'line', 2262
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Op"]
    $P124 = $P123."new"("ResizableStringArray", "new Ps" :named("pirop"))
    $P125 = $P114."new"($P119, $P124, "bind" :named("pasttype"))
.annotate 'line', 2259
    $P126 = $P110."new"($P125)
.annotate 'line', 2258
    set $P2556, $P126
.annotate 'line', 2263
    set $P107, $P2554
    unless_null $P107, vivify_1282
    new $P107, "Undef"
  vivify_1282:
    elements $I100, $P107
    new $P108, 'Integer'
    set $P108, $I100
    set $P2557, $P108
.annotate 'line', 2264
    new $P107, "Float"
    assign $P107, 0
    set $P2558, $P107
.annotate 'line', 2265
    new $P109, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P109, loop2563_handler
    push_eh $P109
  loop2563_test:
    set $P107, $P2558
    unless_null $P107, vivify_1283
    new $P107, "Undef"
  vivify_1283:
    set $N100, $P107
    set $P108, $P2557
    unless_null $P108, vivify_1284
    new $P108, "Undef"
  vivify_1284:
    set $N101, $P108
    islt $I100, $N100, $N101
    unless $I100, loop2563_done
  loop2563_redo:
.annotate 'line', 2266
    set $P109, $P2556
    unless_null $P109, vivify_1285
    new $P109, "Undef"
  vivify_1285:
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Op"]
.annotate 'line', 2268
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Var"]
    $P118 = $P117."new"("register" :named("scope"), "string_heap" :named("name"))
.annotate 'line', 2269
    set $P120, $P2558
    unless_null $P120, vivify_1286
    new $P120, "Undef"
  vivify_1286:
    set $I101, $P120
    set $P2561, $P2554
    unless_null $P2561, vivify_1287
    $P2561 = root_new ['parrot';'ResizablePMCArray']
  vivify_1287:
    set $P121, $P2561[$I101]
    unless_null $P121, vivify_1288
    new $P121, "Undef"
  vivify_1288:
    set $S100, $P121
    isnull $I102, $S100
    if $I102, if_2560
    set $P127, $P2558
    unless_null $P127, vivify_1289
    new $P127, "Undef"
  vivify_1289:
    set $I103, $P127
    set $P2562, $P2554
    unless_null $P2562, vivify_1290
    $P2562 = root_new ['parrot';'ResizablePMCArray']
  vivify_1290:
    set $P128, $P2562[$I103]
    unless_null $P128, vivify_1291
    new $P128, "Undef"
  vivify_1291:
    set $P119, $P128
    goto if_2560_end
  if_2560:
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Op"]
    $P126 = $P125."new"("null S" :named("pirop"))
    set $P119, $P126
  if_2560_end:
    $P129 = $P113."new"($P118, $P119, "push vPs" :named("pirop"))
.annotate 'line', 2266
    $P109."push"($P129)
.annotate 'line', 2270
    set $P109, $P2558
    unless_null $P109, vivify_1292
    new $P109, "Undef"
  vivify_1292:
    add $P110, $P109, 1
    set $P2558, $P110
  loop2563_next:
.annotate 'line', 2265
    goto loop2563_test
  loop2563_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P110, exception, 'type'
    eq $P110, .CONTROL_LOOP_NEXT, loop2563_next
    eq $P110, .CONTROL_LOOP_REDO, loop2563_redo
  loop2563_done:
    pop_eh 
.annotate 'line', 2272
    set $P107, $P2556
    unless_null $P107, vivify_1293
    new $P107, "Undef"
  vivify_1293:
    get_hll_global $P108, "GLOBAL"
    nqp_get_package_through_who $P109, $P108, "PAST"
    get_who $P110, $P109
    set $P111, $P110["Var"]
    $P112 = $P111."new"("register" :named("scope"), "string_heap" :named("name"))
    $P107."push"($P112)
.annotate 'line', 2275
    get_hll_global $P107, "GLOBAL"
    nqp_get_package_through_who $P108, $P107, "PAST"
    get_who $P109, $P108
    set $P110, $P109["Op"]
    $P111 = $P110."new"("list" :named("pasttype"))
    set $P2559, $P111
.annotate 'line', 2276
    set $P108, param_2552
    nqp_decontainerize $P109, $P108
    nqp_get_sc_object $P110, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301", 156
    repr_get_attr_obj $P111, $P109, $P110, "$!code_ref_blocks", 4
    unless_null $P111, vivify_1294
    new $P111, "Undef"
  vivify_1294:
    defined $I100, $P111
    unless $I100, for_undef_1295
    iter $P107, $P111
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop2567_handler
    push_eh $P113
  loop2567_test:
    unless $P107, loop2567_done
    shift $P112, $P107
  loop2567_redo:
    .const 'Sub' $P2565 = "331_1338064439.457" 
    capture_lex $P2565
    $P2565($P112)
  loop2567_next:
    goto loop2567_test
  loop2567_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop2567_next
    eq $P114, .CONTROL_LOOP_REDO, loop2567_redo
  loop2567_done:
    pop_eh 
  for_undef_1295:
.annotate 'line', 2281
    get_hll_global $P107, "GLOBAL"
    nqp_get_package_through_who $P108, $P107, "PAST"
    get_who $P109, $P108
    set $P110, $P109["Op"]
    set $P111, $P2555
    unless_null $P111, vivify_1298
    new $P111, "Undef"
  vivify_1298:
.annotate 'line', 2284
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Var"]
    set $P116, param_2553
    unless_null $P116, vivify_1299
    new $P116, "Undef"
  vivify_1299:
    $P117 = $P115."new"($P116 :named("name"), "register" :named("scope"))
    set $P118, $P2556
    unless_null $P118, vivify_1300
    new $P118, "Undef"
  vivify_1300:
.annotate 'line', 2286
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "PAST"
    get_who $P121, $P120
    set $P122, $P121["Block"]
    set $P123, $P2559
    unless_null $P123, vivify_1301
    new $P123, "Undef"
  vivify_1301:
    $P124 = $P122."new"($P123, "immediate" :named("blocktype"))
    $P125 = $P110."new"($P111, $P117, $P118, $P124, "nqp_deserialize_sc__vSPPP" :named("pirop"))
.annotate 'line', 2249
    .return ($P125)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "_block2564"  :anon :subid("331_1338064439.457") :outer("181_1338064439.457")
    .param pmc param_2566
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2276
    .lex "$block", param_2566
.annotate 'line', 2277
    find_lex $P113, "$cr_past"
    unless_null $P113, vivify_1296
    new $P113, "Undef"
  vivify_1296:
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Val"]
    set $P118, param_2566
    unless_null $P118, vivify_1297
    new $P118, "Undef"
  vivify_1297:
    $P119 = $P117."new"($P118 :named("value"), "Sub" :named("returns"))
    $P120 = $P113."push"($P119)
.annotate 'line', 2276
    .return ($P120)
.end


.HLL "nqp"

.namespace []
.sub "_block2570" :load :anon :subid("332_1338064439.457")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1032
    .const '' $P2572 = "182_1338064439.457" 
    $P107 = $P2572()
    .return ($P107)
.end

