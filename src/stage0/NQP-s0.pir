.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'
.loadlib "nqp_group"
.loadlib "nqp_ops"
.loadlib "nqp_bigint_ops"
.loadlib "trans_ops"
.loadlib "io_ops"
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_1_1351203235.318") :anon :lex
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc _lex_param_0 :slurpy 
    .const 'Sub' $P5047 = 'cuid_373_1351203235.318' 
    capture_lex $P5047 
    .const 'Sub' $P5047 = 'cuid_374_1351203235.318' 
    capture_lex $P5047 
    .const 'Sub' $P5047 = 'cuid_33_1351203235.318' 
    capture_lex $P5047 
    .const 'Sub' $P5047 = 'cuid_224_1351203235.318' 
    capture_lex $P5047 
    .const 'Sub' $P5047 = 'cuid_244_1351203235.318' 
    capture_lex $P5047 
    .const 'Sub' $P5047 = 'cuid_409_1351203235.318' 
    capture_lex $P5047 
    .const 'Sub' $P5047 = 'cuid_410_1351203235.318' 
    capture_lex $P5047 
    .const 'Sub' $P5047 = 'cuid_411_1351203235.318' 
    capture_lex $P5047 
    .const 'Sub' $P5047 = 'cuid_412_1351203235.318' 
    capture_lex $P5047 
    .const 'Sub' $P5047 = 'cuid_413_1351203235.318' 
    capture_lex $P5047 
    .const 'Sub' $P5047 = 'cuid_414_1351203235.318' 
    capture_lex $P5047 
    .const 'Sub' $P5047 = 'cuid_415_1351203235.318' 
    capture_lex $P5047 
    .const 'Sub' $P5047 = 'cuid_416_1351203235.318' 
    capture_lex $P5047 
    .const 'Sub' $P5047 = 'cuid_357_1351203235.318' 
    capture_lex $P5047 
    .const 'Sub' $P5047 = 'cuid_371_1351203235.318' 
    capture_lex $P5047 
    .const 'Sub' $P5047 = 'cuid_372_1351203235.318' 
    capture_lex $P5047 
    .lex "GLOBALish", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "EXPORT", $P103 
    .lex "$ops", $P104 
    .lex "&MAIN", $P105 
    .lex "&hll-config", $P106 
    .lex "@ARGS", _lex_param_0 
    .local pmc ctxsave 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P104, $P5001
    .const 'Sub' $P5002 = 'cuid_373_1351203235.318' 
    capture_lex $P5002
    set $P105, $P5002
    .const 'Sub' $P5003 = 'cuid_374_1351203235.318' 
    capture_lex $P5003
    set $P106, $P5003
    find_dynamic_lex $P5004, "$*CTXSAVE"
    set ctxsave, $P5004
    isnull $I5001, ctxsave
    if $I5001 goto unless10_end14 
    can $I5002, ctxsave, "ctxsave"
    box $P5007, $I5002
    set $P5006, $P5007
    unless $I5002 goto if11_end16 
    $P5005 = ctxsave."ctxsave"()
    set $P5006, $P5005
  if11_end16:
  unless10_end14:
.annotate 'line', 1
    .const 'Sub' $P5008 = 'cuid_33_1351203235.318' 
    capture_lex $P5008
    $P5009 = $P5008()
    .const 'Sub' $P5010 = 'cuid_224_1351203235.318' 
    capture_lex $P5010
    $P5011 = $P5010()
    .const 'Sub' $P5012 = 'cuid_244_1351203235.318' 
    capture_lex $P5012
    $P5013 = $P5012()
.annotate 'line', 1428
    nqp_get_sc_object $P5017, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Compiler"]
    unless_null $P5014, fallback3727
    nqp_get_sc_object $P5018, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5014, $P5018
  fallback3727:
    $P5019 = $P5014."operations"()
    set $P104, $P5019
.annotate 'line', 1430
    $P104."add_hll_pirop_mapping"("nqp", "nqpmultidispatch", "multi_dispatch_over_lexical_candidates", "P")
.annotate 'line', 1432
    .const 'Sub' $P5021 = 'cuid_409_1351203235.318' 
    capture_lex $P5021
    newclosure $P5020, $P5021
    $P104."add_hll_op"("nqp", "preinc", $P5020)
.annotate 'line', 1447
    .const 'Sub' $P5023 = 'cuid_410_1351203235.318' 
    capture_lex $P5023
    newclosure $P5022, $P5023
    $P104."add_hll_op"("nqp", "predec", $P5022)
.annotate 'line', 1462
    .const 'Sub' $P5025 = 'cuid_411_1351203235.318' 
    capture_lex $P5025
    newclosure $P5024, $P5025
    $P104."add_hll_op"("nqp", "postinc", $P5024)
.annotate 'line', 1486
    .const 'Sub' $P5027 = 'cuid_412_1351203235.318' 
    capture_lex $P5027
    newclosure $P5026, $P5027
    $P104."add_hll_op"("nqp", "postdec", $P5026)
.annotate 'line', 1510
    .const 'Sub' $P5029 = 'cuid_413_1351203235.318' 
    capture_lex $P5029
    newclosure $P5028, $P5029
    $P104."add_hll_op"("nqp", "numify", $P5028)
.annotate 'line', 1514
    .const 'Sub' $P5031 = 'cuid_414_1351203235.318' 
    capture_lex $P5031
    newclosure $P5030, $P5031
    $P104."add_hll_op"("nqp", "stringify", $P5030)
.annotate 'line', 1518
    .const 'Sub' $P5033 = 'cuid_415_1351203235.318' 
    capture_lex $P5033
    newclosure $P5032, $P5033
    $P104."add_hll_op"("nqp", "eqaddr", $P5032)
.annotate 'line', 1526
    .const 'Sub' $P5035 = 'cuid_416_1351203235.318' 
    capture_lex $P5035
    newclosure $P5034, $P5035
    $P104."add_hll_op"("nqp", "falsey", $P5034)
    .const 'Sub' $P5036 = 'cuid_357_1351203235.318' 
    capture_lex $P5036
    $P5037 = $P5036()
    .const 'Sub' $P5038 = 'cuid_371_1351203235.318' 
    capture_lex $P5038
    $P5039 = $P5038()
    .const 'Sub' $P5040 = 'cuid_372_1351203235.318' 
    capture_lex $P5040
    $P5041 = $P5040()
    unless _lex_param_0 goto if1749_end5714 
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5042, "ModuleLoader"
    getinterp $P5044
    set $P5043, $P5044["context"]
    $P5042."set_mainline_module"($P5043)
    .const 'Sub' $P5045 = "cuid_373_1351203235.318" 
    $P5046 = $P5045(_lex_param_0 :flat)
  if1749_end5714:
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "MAIN" :subid("cuid_373_1351203235.318") :anon :lex :outer("cuid_1_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3218
    .param pmc _lex_param_0 
    .lex "$nqpcomp", $P101 
    .lex "@clo", $P102 
    .lex "@ARGS", _lex_param_0 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
.annotate 'line', 3220
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5005, $P5006, "NQP"
    get_who $P5004, $P5005
    set $P5003, $P5004["Compiler"]
    unless_null $P5003, fallback10
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5007
  fallback10:
    $P5008 = $P5003."new"()
    set $P101, $P5008
.annotate 'line', 3221
    $P101."language"("nqp")
.annotate 'line', 3222
    nqp_get_sc_object $P5012, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5011, $P5012, "NQP"
    get_who $P5010, $P5011
    set $P5009, $P5010["Grammar"]
    unless_null $P5009, fallback11
    nqp_get_sc_object $P5013, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5013
  fallback11:
    $P101."parsegrammar"($P5009)
.annotate 'line', 3223
    nqp_get_sc_object $P5017, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5016, $P5017, "NQP"
    get_who $P5015, $P5016
    set $P5014, $P5015["Actions"]
    unless_null $P5014, fallback12
    nqp_get_sc_object $P5018, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5014, $P5018
  fallback12:
    $P101."parseactions"($P5014)
.annotate 'line', 3224
    $P5019 = $P101."config"()
    "&hll-config"($P5019)
.annotate 'line', 3227
    $P5020 = $P101."commandline_options"()
    set $P102, $P5020
.annotate 'line', 3228
    $P102."push"("parsetrace")
.annotate 'line', 3229
    $P102."push"("setting=s")
.annotate 'line', 3230
    $P102."push"("setting-path=s")
.annotate 'line', 3231
    $P102."push"("module-path=s")
.annotate 'line', 3232
    $P102."push"("vmlibs=s")
.annotate 'line', 3233
    $P102."push"("no-regex-lib")
.annotate 'line', 3234
    $P102."push"("old-regex-lib")
.annotate 'line', 3237
    $P101."command_line"(_lex_param_0, "utf8" :named("encoding"), "ascii iso-8859-1" :named("transcode"))
.annotate 'line', 3240
    $P5021 = $P101."nqpevent"()
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "hll-config" :subid("cuid_374_1351203235.318") :anon :lex :outer("cuid_1_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3244
    .param pmc _lex_param_0 
    .lex "$config", _lex_param_0 
    box $P5001, "2012.10-61-g843aec6"
    set _lex_param_0["version"], $P5001
    box $P5002, "2012-10-25T22:13:55Z"
    set _lex_param_0["build-date"], $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_33_1351203235.318") :anon :lex :outer("cuid_1_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 8
    .const 'Sub' $P5031 = 'cuid_2_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_3_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_4_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_5_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_6_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_7_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_8_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_9_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_10_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_11_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_12_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_16_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_17_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_18_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_19_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_20_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_21_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_22_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_23_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_24_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_25_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_26_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_27_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_28_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_29_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_30_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_31_1351203235.318' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_32_1351203235.318' 
    capture_lex $P5031 
    .lex "$loader", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "$?CLASS", $P103 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_2_1351203235.318' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_3_1351203235.318' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_4_1351203235.318' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_5_1351203235.318' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_6_1351203235.318' 
    capture_lex $P5006
    get_hll_global $P5007, "ModuleLoader"
    set $P101, $P5007
    .const 'Sub' $P5008 = 'cuid_7_1351203235.318' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_8_1351203235.318' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_9_1351203235.318' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_10_1351203235.318' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_11_1351203235.318' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_12_1351203235.318' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_16_1351203235.318' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_17_1351203235.318' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_18_1351203235.318' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_19_1351203235.318' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_20_1351203235.318' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_21_1351203235.318' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_22_1351203235.318' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_23_1351203235.318' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_24_1351203235.318' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_25_1351203235.318' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_26_1351203235.318' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_27_1351203235.318' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_28_1351203235.318' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_29_1351203235.318' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_30_1351203235.318' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_31_1351203235.318' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_32_1351203235.318' 
    capture_lex $P5030
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "BUILD" :subid("cuid_2_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 27
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :slurpy :named 
    .lex "self", _lex_param_0 
    .lex "%opts", _lex_param_1 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    new $P5003, 'ResizablePMCArray'
    repr_bind_attr_obj $P5001, $P5002, "@!BLOCKS", $P5003
    nqp_decontainerize $P5004, _lex_param_0
    nqp_get_sc_object $P5005, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    new $P5006, 'Hash'
    repr_bind_attr_obj $P5004, $P5005, "%!code_objects_to_fix_up", $P5006
    nqp_decontainerize $P5007, _lex_param_0
    nqp_get_sc_object $P5008, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    new $P5009, 'Hash'
    repr_bind_attr_obj $P5007, $P5008, "%!code_object_fixup_list", $P5009
    nqp_decontainerize $P5010, _lex_param_0
    nqp_get_sc_object $P5011, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    new $P5012, 'Hash'
    repr_bind_attr_obj $P5010, $P5011, "%!code_stub_sc_idx", $P5012
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "push_lexpad" :subid("cuid_3_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 35
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$pad", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 37
    nqp_get_sc_object $P5005, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Block"]
    unless_null $P5002, fallback17
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5006
  fallback17:
    nqp_get_sc_object $P5010, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback18
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5011
  fallback18:
    $P5012 = $P5007."new"()
    $P5013 = $P5002."new"($P5012, _lex_param_1 :named("node"))
    set $P101, $P5013
    nqp_decontainerize $P5014, _lex_param_0
    nqp_get_sc_object $P5015, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5016, $P5014, $P5015, "@!BLOCKS"
    set $N5001, $P5016
    unless $N5001 goto if12_end20 
.annotate 'line', 38
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    nqp_decontainerize $P5021, _lex_param_0
    nqp_get_sc_object $P5022, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5023, $P5021, $P5022, "@!BLOCKS"
    set $N5003, $P5023
    set $N5004, 1
    sub $N5002, $N5003, $N5004
    set $I5001, $N5002
    set $P5017, $P5020[$I5001]
    unless_null $P5017, fallback21
    nqp_get_sc_object $P5024, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5017, $P5024
  fallback21:
    set $P101["outer"], $P5017
  if12_end20:
    nqp_decontainerize $P5025, _lex_param_0
    nqp_get_sc_object $P5026, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5027, $P5025, $P5026, "@!BLOCKS"
    nqp_decontainerize $P5028, _lex_param_0
    nqp_get_sc_object $P5029, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5030, $P5028, $P5029, "@!BLOCKS"
    set $N5005, $P5030
    set $I5002, $N5005
    set $P5027[$I5002], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pop_lexpad" :subid("cuid_4_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 46
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 47
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5003, $P5001, $P5002, "@!BLOCKS"
    $P5004 = $P5003."pop"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "cur_lexpad" :subid("cuid_5_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 51
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5007, $P5005, $P5006, "@!BLOCKS"
    set $N5002, $P5007
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    set $I5001, $N5001
    set $P5001, $P5004[$I5001]
    unless_null $P5001, fallback22
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5008
  fallback22:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "get_legacy_block_list" :subid("cuid_6_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 56
    .param pmc _lex_param_0 
    .lex "@x", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5005, $P5003, $P5004, "@!BLOCKS"
    clone $P5002, $P5005
    set $P101, $P5002
.annotate 'line', 58
    $P101."reverse"()
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "load_setting" :subid("cuid_7_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 69
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5005 = 'cuid_375_1351203235.318' 
    capture_lex $P5005 
    .lex "self", _lex_param_0 
    .lex "$setting_name", _lex_param_1 
    root_new $P101, ['parrot';'Continuation']
    set_label $P101, lexotic_23
    .lex "RETURN", $P101
    set $S5001, _lex_param_1
    isne $I5001, $S5001, "NULL"
    box $P5004, $I5001
    set $P5003, $P5004
    unless $I5001 goto if13_end26 
    .const 'Sub' $P5001 = 'cuid_375_1351203235.318' 
    capture_lex $P5001
    $P5002 = $P5001()
    set $P5003, $P5002
  if13_end26:
    goto lexotic_24
  lexotic_23:
    .get_results ($P5003)
  lexotic_24:
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_375_1351203235.318") :anon :lex :outer("cuid_7_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 71
    .lex "$setting", $P101 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback27
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback28
    nqp_get_sc_object $P5008, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback28:
    unless_null $P5004, vivi_1429
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_1429:
    set $P5003, $P5004
  fallback27:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback30
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5011
  fallback30:
.annotate 'line', 76
    find_lex $P5012, "$loader"
    find_lex $P5013, "$setting_name"
    $P5014 = $P5012."load_setting"($P5013)
    set $P5002["outer_ctx"], $P5014
    set $P101, $P5014
.annotate 'line', 79
    find_lex $P5016, "self"
    nqp_decontainerize $P5015, $P5016
    $P5017 = $P5015."is_precompilation_mode"()
    unless $P5017 goto if15_else31 
.annotate 'line', 80
    find_lex $P5019, "self"
    nqp_decontainerize $P5018, $P5019
    nqp_get_sc_object $P5023, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Stmts"]
    unless_null $P5020, fallback33
    nqp_get_sc_object $P5024, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5020, $P5024
  fallback33:
.annotate 'line', 81
    nqp_get_sc_object $P5028, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["VM"]
    unless_null $P5025, fallback34
    nqp_get_sc_object $P5029, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5025, $P5029
  fallback34:
.annotate 'line', 83
    nqp_get_sc_object $P5033, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["SVal"]
    unless_null $P5030, fallback35
    nqp_get_sc_object $P5034, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5030, $P5034
  fallback35:
    $P5035 = $P5030."new"("ModuleLoader.pbc" :named("value"))
    $P5036 = $P5025."new"($P5035, "load_bytecode vs" :named("pirop"))
.annotate 'line', 85
    nqp_get_sc_object $P5040, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Op"]
    unless_null $P5037, fallback36
    nqp_get_sc_object $P5041, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5037, $P5041
  fallback36:
.annotate 'line', 87
    nqp_get_sc_object $P5045, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["BVal"]
    unless_null $P5042, fallback37
    nqp_get_sc_object $P5046, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5042, $P5046
  fallback37:
    find_dynamic_lex $P5047, "$*UNIT"
    unless_null $P5047, fallback38
    nqp_get_sc_object $P5050, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$UNIT"]
    unless_null $P5048, fallback39
    nqp_get_sc_object $P5051, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5048, $P5051
  fallback39:
    unless_null $P5048, vivi_1640
    die "Contextual $*UNIT not found"
    box $P5052, "Contextual $*UNIT not found"
    set $P5048, $P5052
  vivi_1640:
    set $P5047, $P5048
  fallback38:
    $P5053 = $P5042."new"($P5047 :named("value"))
.annotate 'line', 88
    nqp_get_sc_object $P5057, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Op"]
    unless_null $P5054, fallback41
    nqp_get_sc_object $P5058, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5054, $P5058
  fallback41:
.annotate 'line', 90
    nqp_get_sc_object $P5062, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5061, $P5062, "QAST"
    get_who $P5060, $P5061
    set $P5059, $P5060["VM"]
    unless_null $P5059, fallback42
    nqp_get_sc_object $P5063, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5059, $P5063
  fallback42:
.annotate 'line', 92
    nqp_get_sc_object $P5067, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["SVal"]
    unless_null $P5064, fallback43
    nqp_get_sc_object $P5068, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5064, $P5068
  fallback43:
    $P5069 = $P5064."new"("ModuleLoader" :named("value"))
    $P5070 = $P5059."new"($P5069, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 94
    nqp_get_sc_object $P5074, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5073, $P5074, "QAST"
    get_who $P5072, $P5073
    set $P5071, $P5072["SVal"]
    unless_null $P5071, fallback44
    nqp_get_sc_object $P5075, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5071, $P5075
  fallback44:
    find_lex $P5076, "$setting_name"
    $P5077 = $P5071."new"($P5076 :named("value"))
    $P5078 = $P5054."new"($P5070, $P5077, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5079 = $P5037."new"($P5053, $P5078, "callmethod" :named("op"), "set_outer_ctx" :named("name"))
    $P5080 = $P5020."new"($P5036, $P5079)
    $P5081 = $P5018."add_load_dependency_task"($P5080 :named("deserialize_past"))
    goto if15_end32
  if15_else31:
.annotate 'line', 99
.annotate 'line', 101
    find_lex $P5083, "self"
    nqp_decontainerize $P5082, $P5083
    nqp_get_sc_object $P5087, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5086, $P5087, "QAST"
    get_who $P5085, $P5086
    set $P5084, $P5085["Op"]
    unless_null $P5084, fallback45
    nqp_get_sc_object $P5088, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5084, $P5088
  fallback45:
.annotate 'line', 103
    nqp_get_sc_object $P5092, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5091, $P5092, "QAST"
    get_who $P5090, $P5091
    set $P5089, $P5090["BVal"]
    unless_null $P5089, fallback46
    nqp_get_sc_object $P5093, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5089, $P5093
  fallback46:
    find_dynamic_lex $P5094, "$*UNIT"
    unless_null $P5094, fallback47
    nqp_get_sc_object $P5097, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5096, $P5097
    set $P5095, $P5096["$UNIT"]
    unless_null $P5095, fallback48
    nqp_get_sc_object $P5098, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5095, $P5098
  fallback48:
    unless_null $P5095, vivi_1749
    die "Contextual $*UNIT not found"
    box $P5099, "Contextual $*UNIT not found"
    set $P5095, $P5099
  vivi_1749:
    set $P5094, $P5095
  fallback47:
    $P5100 = $P5089."new"($P5094 :named("value"))
.annotate 'line', 104
    nqp_get_sc_object $P5104, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5103, $P5104, "QAST"
    get_who $P5102, $P5103
    set $P5101, $P5102["Op"]
    unless_null $P5101, fallback50
    nqp_get_sc_object $P5105, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5101, $P5105
  fallback50:
.annotate 'line', 106
    nqp_get_sc_object $P5109, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5108, $P5109, "QAST"
    get_who $P5107, $P5108
    set $P5106, $P5107["VM"]
    unless_null $P5106, fallback51
    nqp_get_sc_object $P5110, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5106, $P5110
  fallback51:
.annotate 'line', 108
    nqp_get_sc_object $P5114, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5113, $P5114, "QAST"
    get_who $P5112, $P5113
    set $P5111, $P5112["SVal"]
    unless_null $P5111, fallback52
    nqp_get_sc_object $P5115, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5111, $P5115
  fallback52:
    $P5116 = $P5111."new"("ModuleLoader" :named("value"))
    $P5117 = $P5106."new"($P5116, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 110
    nqp_get_sc_object $P5121, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5120, $P5121, "QAST"
    get_who $P5119, $P5120
    set $P5118, $P5119["SVal"]
    unless_null $P5118, fallback53
    nqp_get_sc_object $P5122, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5118, $P5122
  fallback53:
    find_lex $P5123, "$setting_name"
    $P5124 = $P5118."new"($P5123 :named("value"))
    $P5125 = $P5101."new"($P5117, $P5124, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5126 = $P5084."new"($P5100, $P5125, "callmethod" :named("op"), "set_outer_ctx" :named("name"))
    $P5127 = $P5082."add_fixup_task"($P5126 :named("fixup_past"))
  if15_end32:
    getattribute $P5129, $P101, "lex_pad"
    find_lex $P5128, "RETURN"
    $P5130 = $P5128($P5129)
    .return ($P5130) 
.end
.HLL "nqp"
.namespace []
.sub "load_module" :subid("cuid_8_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 121
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$module_name", _lex_param_1 
    .lex "$cur_GLOBALish", _lex_param_2 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_54
    .lex "RETURN", $P102
.annotate 'line', 123
    find_lex $P5002, "$loader"
    $P5003 = $P5002."load_module"(_lex_param_1, _lex_param_2)
    set $P101, $P5003
.annotate 'line', 126
    nqp_decontainerize $P5004, _lex_param_0
    $P5005 = $P5004."is_precompilation_mode"()
    unless $P5005 goto if18_end57 
.annotate 'line', 127
    nqp_decontainerize $P5006, _lex_param_0
    nqp_get_sc_object $P5010, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback58
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5011
  fallback58:
.annotate 'line', 128
    nqp_get_sc_object $P5015, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["VM"]
    unless_null $P5012, fallback59
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5012, $P5016
  fallback59:
.annotate 'line', 130
    nqp_get_sc_object $P5020, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["SVal"]
    unless_null $P5017, fallback60
    nqp_get_sc_object $P5021, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5017, $P5021
  fallback60:
    $P5022 = $P5017."new"("ModuleLoader.pbc" :named("value"))
    $P5023 = $P5012."new"($P5022, "load_bytecode vs" :named("pirop"))
.annotate 'line', 132
    nqp_get_sc_object $P5027, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback61
    nqp_get_sc_object $P5028, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5024, $P5028
  fallback61:
.annotate 'line', 134
    nqp_get_sc_object $P5032, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["VM"]
    unless_null $P5029, fallback62
    nqp_get_sc_object $P5033, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5029, $P5033
  fallback62:
.annotate 'line', 136
    nqp_get_sc_object $P5037, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["SVal"]
    unless_null $P5034, fallback63
    nqp_get_sc_object $P5038, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5034, $P5038
  fallback63:
    $P5039 = $P5034."new"("ModuleLoader" :named("value"))
    $P5040 = $P5029."new"($P5039, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 138
    nqp_get_sc_object $P5044, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["SVal"]
    unless_null $P5041, fallback64
    nqp_get_sc_object $P5045, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5041, $P5045
  fallback64:
    $P5046 = $P5041."new"(_lex_param_1 :named("value"))
    $P5047 = $P5024."new"($P5040, $P5046, "callmethod" :named("op"), "load_module" :named("name"))
    $P5048 = $P5007."new"($P5023, $P5047)
    $P5049 = $P5006."add_load_dependency_task"($P5048 :named("deserialize_past"))
  if18_end57:
    getattribute $P5051, $P101, "lex_pad"
    find_lex $P5050, "RETURN"
    $P5052 = $P5050($P5051)
    goto lexotic_55
  lexotic_54:
    .get_results ($P5052)
  lexotic_55:
    .return ($P5052) 
.end
.HLL "nqp"
.namespace []
.sub "import" :subid("cuid_9_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 145
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5009 = 'cuid_376_1351203235.318' 
    capture_lex $P5009 
    .lex "$target", $P101 
    .lex "self", _lex_param_0 
    .lex "$stash", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 146
    nqp_decontainerize $P5002, _lex_param_0
    $P5003 = $P5002."cur_lexpad"()
    set $P101, $P5003
    set $P5004, _lex_param_1
    iter $P5006, _lex_param_1
  for_next65:
    unless $P5006, for_done67
    shift $P5008, $P5006
  for_redo66:
    .const 'Sub' $P5007 = 'cuid_376_1351203235.318' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next65
  for_done67:
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_376_1351203235.318") :anon :lex :outer("cuid_9_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 147
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 148
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$target"
    $P5004 = _lex_param_0."key"()
    $P5005 = _lex_param_0."value"()
    $P5006 = $P5001."install_lexical_symbol"($P5003, $P5004, $P5005)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_symbol" :subid("cuid_10_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 154
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5012 = 'cuid_377_1351203235.318' 
    capture_lex $P5012 
    .lex "$name", $P101 
    .lex "$target", $P102 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "@sym", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    clone $P5003, _lex_param_2
    set _lex_param_2, $P5003
.annotate 'line', 156
    $P5004 = _lex_param_2."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    set $P102, _lex_param_1
    set $P5006, _lex_param_2
    iter $P5008, _lex_param_2
  for_next68:
    unless $P5008, for_done70
    shift $P5010, $P5008
  for_redo69:
    .const 'Sub' $P5009 = 'cuid_377_1351203235.318' 
    capture_lex $P5009
    $P5006 = $P5009($P5010)
    goto for_next68
  for_done70:
    get_who $P5011, $P102
    set $S5002, $P101
    set $P5011[$S5002], _lex_param_3
    .return (_lex_param_3) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_377_1351203235.318") :anon :lex :outer("cuid_10_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 160
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$target"
    set $S5001, _lex_param_0
    nqp_get_package_through_who $P5001, $P5002, $S5001
    store_lex "$target", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "install_lexical_symbol" :subid("cuid_11_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 170
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 172
    _lex_param_1."symbol"(_lex_param_2, "lexical" :named("scope"), _lex_param_3 :named("value"))
.annotate 'line', 173
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback71
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5003
  fallback71:
    nqp_get_sc_object $P5007, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback72
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5008
  fallback72:
    $P5009 = $P5004."new"("lexical" :named("scope"), _lex_param_2 :named("name"), "var" :named("decl"))
    $P5002."push"($P5009)
.annotate 'line', 176
    nqp_get_sc_object $P5013, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Stmts"]
    unless_null $P5010, fallback73
    nqp_get_sc_object $P5014, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5014
  fallback73:
.annotate 'line', 177
    nqp_get_sc_object $P5018, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback74
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5015, $P5019
  fallback74:
.annotate 'line', 179
    nqp_get_sc_object $P5023, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["VM"]
    unless_null $P5020, fallback75
    nqp_get_sc_object $P5024, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5020, $P5024
  fallback75:
.annotate 'line', 180
    $P5025 = _lex_param_1."cuid"()
    set $S5003, $P5025
    concat $S5002, "    .const \"LexInfo\" %r = \"", $S5003
    concat $S5001, $S5002, "\""
    $P5026 = $P5020."new"($S5001 :named("pir"))
.annotate 'line', 182
    nqp_get_sc_object $P5030, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["SVal"]
    unless_null $P5027, fallback76
    nqp_get_sc_object $P5031, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5027, $P5031
  fallback76:
    $P5032 = $P5027."new"(_lex_param_2 :named("value"))
.annotate 'line', 183
    nqp_get_sc_object $P5036, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["WVal"]
    unless_null $P5033, fallback77
    nqp_get_sc_object $P5037, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5033, $P5037
  fallback77:
    $P5038 = $P5033."new"(_lex_param_3 :named("value"))
    $P5039 = $P5015."new"($P5026, $P5032, $P5038, "callmethod" :named("op"), "set_static_lexpad_value" :named("name"))
.annotate 'line', 187
    nqp_get_sc_object $P5043, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Op"]
    unless_null $P5040, fallback78
    nqp_get_sc_object $P5044, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5040, $P5044
  fallback78:
.annotate 'line', 189
    nqp_get_sc_object $P5048, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["VM"]
    unless_null $P5045, fallback79
    nqp_get_sc_object $P5049, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5045, $P5049
  fallback79:
.annotate 'line', 190
    $P5050 = _lex_param_1."cuid"()
    set $S5006, $P5050
    concat $S5005, "    .const \"LexInfo\" %r = \"", $S5006
    concat $S5004, $S5005, "\""
    $P5051 = $P5045."new"($S5004 :named("pir"))
    $P5052 = $P5040."new"($P5051, "callmethod" :named("op"), "finish_static_lexpad" :named("name"))
    $P5053 = $P5010."new"($P5039, $P5052)
    set $P101, $P5053
.annotate 'line', 194
    nqp_decontainerize $P5054, _lex_param_0
    $P5055 = $P5054."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5055) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_routine" :subid("cuid_12_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 199
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$past_block", _lex_param_3 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 200
    nqp_get_sc_object $P5005, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback80
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5006
  fallback80:
.annotate 'line', 202
    nqp_get_sc_object $P5010, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback81
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5011
  fallback81:
    nqp_get_sc_object $P5015, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["WVal"]
    unless_null $P5012, fallback82
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5012, $P5016
  fallback82:
    $P5017 = $P5012."new"(_lex_param_1 :named("value"))
    $P5018 = $P5007."new"($P5017, "who" :named("op"))
.annotate 'line', 203
    nqp_get_sc_object $P5022, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["SVal"]
    unless_null $P5019, fallback83
    nqp_get_sc_object $P5023, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5019, $P5023
  fallback83:
    set $S5001, _lex_param_2
    $P5024 = $P5019."new"($S5001 :named("value"))
.annotate 'line', 204
    nqp_get_sc_object $P5028, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["BVal"]
    unless_null $P5025, fallback84
    nqp_get_sc_object $P5029, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5025, $P5029
  fallback84:
    $P5030 = $P5025."new"(_lex_param_3 :named("value"))
    $P5031 = $P5002."new"($P5018, $P5024, $P5030, "bindkey" :named("op"))
    set $P101, $P5031
.annotate 'line', 206
    nqp_decontainerize $P5032, _lex_param_0
    $P5033 = $P5032."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "create_code" :subid("cuid_16_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 211
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 :named("code_type_name") :optional 
    .param int haz_param_1 :opt_flag 
    .const 'Sub' $P5098 = 'cuid_13_1351203235.318' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_14_1351203235.318' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_15_1351203235.318' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_381_1351203235.318' 
    capture_lex $P5098 
    if haz_param_1, default160
    box $P5097, "NQPRoutine"
    set _lex_param_4, $P5097
  default160:
    .lex "$code_type", $P101 
    .lex "$have_code_type", $P102 
    .lex "$stub_code", $P103 
    .lex "$fixups", $P104 
    .lex "$dummy", $P105 
    .lex "$code_ref_idx", $P106 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$is_dispatcher", _lex_param_3 
    .lex "$code_type_name", _lex_param_4 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P103, $P5003
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P104, $P5004
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P105, $P5005
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P106, $P5006
    root_new $P107, ['parrot';'Continuation']
    set_label $P107, lexotic_85
    .lex "RETURN", $P107
    box $P5007, 0
    set $P102, $P5007
    new $P5026, 'ExceptionHandler'
    set_label $P5026, catch_handler_2294
    $P5026.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5026
.annotate 'line', 215
.annotate 'line', 216
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    push $P5009, _lex_param_4
    $P5010 = $P5008."find_sym"($P5009)
    set $P101, $P5010
.annotate 'line', 217
    find_dynamic_lex $P5012, "$*PACKAGE"
    unless_null $P5012, fallback87
    nqp_get_sc_object $P5015, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$PACKAGE"]
    unless_null $P5013, fallback88
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5013, $P5016
  fallback88:
    unless_null $P5013, vivi_1989
    die "Contextual $*PACKAGE not found"
    box $P5017, "Contextual $*PACKAGE not found"
    set $P5013, $P5017
  vivi_1989:
    set $P5012, $P5013
  fallback87:
    get_how $P5011, $P5012
    find_dynamic_lex $P5018, "$*PACKAGE"
    unless_null $P5018, fallback90
    nqp_get_sc_object $P5021, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$PACKAGE"]
    unless_null $P5019, fallback91
    nqp_get_sc_object $P5022, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5019, $P5022
  fallback91:
    unless_null $P5019, vivi_2092
    die "Contextual $*PACKAGE not found"
    box $P5023, "Contextual $*PACKAGE not found"
    set $P5019, $P5023
  vivi_2092:
    set $P5018, $P5019
  fallback90:
    $P5024 = $P5011."name"($P5018)
    set $S5001, $P5024
    set $S5002, _lex_param_4
    isne $I5001, $S5001, $S5002
    box $P5025, $I5001
    set $P102, $P5025
    set $P5027, $P102
    pop_eh 
    goto skip_handler_2193
  catch_handler_2294:
    .get_results ($P5026) 
    set $I10001, 1
    set $P5026["handled"], $I10001
    nqp_get_sc_object $P10001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    finalize $P5026
    pop_upto_eh $P5026
    pop_eh 
    set $P5027, $P10001
    goto skip_handler_2193
  skip_handler_2193:
    .const 'Sub' $P5029 = 'cuid_13_1351203235.318' 
    capture_lex $P5029
    newclosure $P5028, $P5029
    set $P103, $P5028
.annotate 'line', 260
    nqp_get_sc_object $P5033, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["Stmts"]
    unless_null $P5030, fallback121
    nqp_get_sc_object $P5034, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5030, $P5034
  fallback121:
    $P5035 = $P5030."new"()
    set $P104, $P5035
    set $P5036, _lex_param_1["compile_time_dummy"]
    unless_null $P5036, fallback124
    nqp_get_sc_object $P5037, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5036, $P5037
  fallback124:
    defined $I5002, $P5036
    unless $I5002 goto if26_else122 
.annotate 'line', 263
    set $P5038, _lex_param_1["compile_time_dummy"]
    unless_null $P5038, fallback125
    nqp_get_sc_object $P5039, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5038, $P5039
  fallback125:
    set $P105, $P5038
    goto if26_end123
  if26_else122:
.annotate 'line', 266
    nqp_fresh_stub $P5040, $P103
    set $P105, $P5040
    set $S5003, _lex_param_2
    assign $P105, $S5003
    setprop $P105, "STATIC_CODE_REF", $P105
.annotate 'line', 273
    nqp_decontainerize $P5041, _lex_param_0
    $P5042 = $P5041."add_root_code_ref"($P105, _lex_param_1)
    set $P106, $P5042
    nqp_decontainerize $P5043, _lex_param_0
    nqp_get_sc_object $P5044, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5045, $P5043, $P5044, "%!code_stub_sc_idx"
.annotate 'line', 274
    $P5046 = _lex_param_1."cuid"()
    set $S5004, $P5046
    set $P5045[$S5004], $P106
    set _lex_param_1["compile_time_dummy"], $P105
    set $P5058, $P102
    unless $P102 goto if27_end127 
.annotate 'line', 280
    nqp_decontainerize $P5047, _lex_param_0
    nqp_get_sc_object $P5048, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5049, $P5047, $P5048, "%!code_object_fixup_list"
.annotate 'line', 281
    $P5050 = _lex_param_1."cuid"()
    set $S5005, $P5050
    set $P5049[$S5005], $P104
.annotate 'line', 282
    nqp_decontainerize $P5051, _lex_param_0
    $P5052 = $P5051."is_precompilation_mode"()
    unless $P5052 goto if28_else128 
    .const 'Sub' $P5054 = 'cuid_14_1351203235.318' 
    capture_lex $P5054
    newclosure $P5053, $P5054
    setprop $P105, "CLONE_CALLBACK", $P5053
    set $P5057, $P105
    goto if28_end129
  if28_else128:
.annotate 'line', 287
    .const 'Sub' $P5056 = 'cuid_15_1351203235.318' 
    capture_lex $P5056
    newclosure $P5055, $P5056
    setprop $P105, "CLONE_CALLBACK", $P5055
    set $P5057, $P105
  if28_end129:
    set $P5058, $P5057
  if27_end127:
  if26_end123:
.annotate 'line', 311
    nqp_decontainerize $P5059, _lex_param_0
    $P5059."add_fixup_task"($P104 :named("fixup_past"))
    unless $P102 goto if29_else140 
    .const 'Sub' $P5060 = 'cuid_381_1351203235.318' 
    capture_lex $P5060
    $P5061 = $P5060()
    set $P5096, $P5061
    goto if29_end141
  if29_else140:
.annotate 'line', 350
.annotate 'line', 353
    nqp_get_sc_object $P5065, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5064, $P5065, "QAST"
    get_who $P5063, $P5064
    set $P5062, $P5063["VM"]
    unless_null $P5062, fallback155
    nqp_get_sc_object $P5066, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5062, $P5066
  fallback155:
.annotate 'line', 355
    nqp_get_sc_object $P5070, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5069, $P5070, "QAST"
    get_who $P5068, $P5069
    set $P5067, $P5068["VM"]
    unless_null $P5067, fallback156
    nqp_get_sc_object $P5071, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5067, $P5071
  fallback156:
.annotate 'line', 357
    nqp_get_sc_object $P5075, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5074, $P5075, "QAST"
    get_who $P5073, $P5074
    set $P5072, $P5073["SVal"]
    unless_null $P5072, fallback157
    nqp_get_sc_object $P5076, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5072, $P5076
  fallback157:
    nqp_decontainerize $P5077, _lex_param_0
    $P5078 = $P5077."handle"()
    $P5079 = $P5072."new"($P5078 :named("value"))
.annotate 'line', 358
    nqp_get_sc_object $P5083, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["IVal"]
    unless_null $P5080, fallback158
    nqp_get_sc_object $P5084, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5080, $P5084
  fallback158:
    $P5085 = $P5080."new"($P106 :named("value"))
    $P5086 = $P5067."new"($P5079, $P5085, "nqp_get_sc_code_ref Psi" :named("pirop"))
.annotate 'line', 360
    nqp_get_sc_object $P5090, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5089, $P5090, "QAST"
    get_who $P5088, $P5089
    set $P5087, $P5088["BVal"]
    unless_null $P5087, fallback159
    nqp_get_sc_object $P5091, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5087, $P5091
  fallback159:
    $P5092 = $P5087."new"(_lex_param_1 :named("value"))
    $P5093 = $P5062."new"($P5086, $P5092, "assign vPP" :named("pirop"))
    $P104."push"($P5093)
    find_lex $P5094, "RETURN"
    $P5095 = $P5094($P105)
    set $P5096, $P5095
  if29_end141:
    goto lexotic_86
  lexotic_85:
    .get_results ($P5096)
  lexotic_86:
    .return ($P5096) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_13_1351203235.318") :anon :lex :outer("cuid_16_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 224
    .param pmc _lex_param_0 :slurpy 
    .param pmc _lex_param_1 :slurpy :named 
    .const 'Sub' $P5029 = 'cuid_380_1351203235.318' 
    capture_lex $P5029 
    .lex "$nqpcomp", $P101 
    .lex "$post", $P102 
    .lex "$pir", $P103 
    .lex "$compiled", $P104 
    .lex "$c", $P105 
    .lex "$i", $P106 
    .lex "@args", _lex_param_0 
    .lex "%named", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P103, $P5003
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P104, $P5004
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P105, $P5005
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P106, $P5006
.annotate 'line', 226
    find_lex $P5007, "$past"
    find_lex $P5009, "self"
    nqp_decontainerize $P5008, $P5009
    $P5010 = $P5008."libs"()
    $P5007."unshift"($P5010)
    compreg $P5011, "nqp"
    set $P101, $P5011
.annotate 'line', 228
    nqp_get_sc_object $P5015, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["CompUnit"]
    unless_null $P5012, fallback95
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5012, $P5016
  fallback95:
    find_lex $P5017, "$past"
    $P5018 = $P5012."new"($P5017, "nqp" :named("hll"))
    $P5019 = $P101."post"($P5018)
    set $P102, $P5019
.annotate 'line', 229
    $P5020 = $P101."pir"($P102)
    set $P103, $P5020
.annotate 'line', 230
    $P5021 = $P101."evalpmc"($P103)
    set $P104, $P5021
    elements $I5001, $P104
    box $P5022, $I5001
    set $P105, $P5022
    box $P5023, 0
    set $P106, $P5023
  while23_test96:
    set $N5001, $P106
    set $N5002, $P105
    islt $I5002, $N5001, $N5002
    box $P5027, $I5002
    set $P5026, $P5027
    unless $I5002 goto while23_done100 
  while23_redo98:
    .const 'Sub' $P5024 = 'cuid_380_1351203235.318' 
    capture_lex $P5024
    $P5025 = $P5024()
    set $P5026, $P5025
    goto while23_test96 
  while23_done100:
.annotate 'line', 256
    $P5028 = $P104(_lex_param_0 :flat, _lex_param_1 :flat :named)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_380_1351203235.318") :anon :lex :outer("cuid_13_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 235
    .const 'Sub' $P5015 = 'cuid_379_1351203235.318' 
    capture_lex $P5015 
    .lex "$subid", $P101 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 236
    find_lex $P5003, "$compiled"
    find_lex $P5004, "$i"
    set $I5001, $P5004
    set $P5002, $P5003[$I5001]
    unless_null $P5002, fallback101
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5005
  fallback101:
    $P5006 = $P5002."get_subid"()
    set $P101, $P5006
    find_lex $P5008, "self"
    nqp_decontainerize $P5007, $P5008
    nqp_get_sc_object $P5009, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5010, $P5007, $P5009, "%!code_objects_to_fix_up"
    set $S5001, $P101
    exists $I5002, $P5010[$S5001]
    unless $I5002 goto if24_end103 
    .const 'Sub' $P5011 = 'cuid_379_1351203235.318' 
    capture_lex $P5011
    $P5012 = $P5011()
  if24_end103:
    find_lex $P5013, "$i"
    set $N5002, $P5013
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5014, $N5001
    store_lex "$i", $P5014
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_379_1351203235.318") :anon :lex :outer("cuid_380_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 237
    .const 'Sub' $P5061 = 'cuid_378_1351203235.318' 
    capture_lex $P5061 
    .lex "$static", $P101 
    .lex "$fixup_stmts", $P102 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
.annotate 'line', 241
    find_lex $P5005, "self"
    nqp_decontainerize $P5004, $P5005
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5007, $P5004, $P5006, "%!code_objects_to_fix_up"
    find_lex $P5008, "$subid"
    set $S5001, $P5008
    set $P5003, $P5007[$S5001]
    unless_null $P5003, fallback104
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5009
  fallback104:
    $P5010 = $P5003."shift"()
    set $P101, $P5010
    find_lex $P5011, "$code_type"
    find_lex $P5013, "$compiled"
    find_lex $P5014, "$i"
    set $I5001, $P5014
    set $P5012, $P5013[$I5001]
    unless_null $P5012, fallback105
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5012, $P5015
  fallback105:
    setattribute $P101, $P5011, "$!do", $P5012
    find_lex $P5021, "self"
    nqp_decontainerize $P5020, $P5021
    nqp_get_sc_object $P5022, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5023, $P5020, $P5022, "%!code_objects_to_fix_up"
    find_lex $P5024, "$subid"
    set $S5002, $P5024
    set $P5019, $P5023[$S5002]
    unless_null $P5019, fallback106
    nqp_get_sc_object $P5025, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5019, $P5025
  fallback106:
    set $P5016, $P5019
    iter $P5018, $P5019
  for_next108:
    unless $P5018, for_done110
    shift $P5027, $P5018
  for_redo109:
    .const 'Sub' $P5026 = 'cuid_378_1351203235.318' 
    capture_lex $P5026
    $P5016 = $P5026($P5027)
    goto for_next108
  for_done110:
    find_lex $P5029, "$compiled"
    find_lex $P5030, "$i"
    set $I5002, $P5030
    set $P5028, $P5029[$I5002]
    unless_null $P5028, fallback111
    nqp_get_sc_object $P5031, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5028, $P5031
  fallback111:
    find_lex $P5033, "$compiled"
    find_lex $P5034, "$i"
    set $I5003, $P5034
    set $P5032, $P5033[$I5003]
    unless_null $P5032, fallback112
    nqp_get_sc_object $P5035, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5032, $P5035
  fallback112:
    setprop $P5028, "STATIC_CODE_REF", $P5032
.annotate 'line', 247
    find_lex $P5037, "self"
    nqp_decontainerize $P5036, $P5037
    find_lex $P5040, "self"
    nqp_decontainerize $P5039, $P5040
    nqp_get_sc_object $P5041, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5042, $P5039, $P5041, "%!code_stub_sc_idx"
    find_lex $P5043, "$subid"
    set $S5003, $P5043
    set $P5038, $P5042[$S5003]
    unless_null $P5038, fallback113
    nqp_get_sc_object $P5044, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5038, $P5044
  fallback113:
    find_lex $P5046, "$compiled"
    find_lex $P5047, "$i"
    set $I5004, $P5047
    set $P5045, $P5046[$I5004]
    unless_null $P5045, fallback114
    nqp_get_sc_object $P5048, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5045, $P5048
  fallback114:
    $P5036."update_root_code_ref"($P5038, $P5045)
    find_lex $P5051, "self"
    nqp_decontainerize $P5050, $P5051
    nqp_get_sc_object $P5052, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5053, $P5050, $P5052, "%!code_object_fixup_list"
    find_lex $P5054, "$subid"
    set $S5004, $P5054
    set $P5049, $P5053[$S5004]
    unless_null $P5049, fallback115
    nqp_get_sc_object $P5055, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5049, $P5055
  fallback115:
    set $P102, $P5049
    new $P5059, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5059, while25_handlers119
    push_eh $P5059
  while25_test116:
    $P5056 = $P102."list"()
    set $N5001, $P5056
    box $P5060, $N5001
    set $P5058, $P5060
    unless $N5001 goto while25_done120 
  while25_redo118:
.annotate 'line', 251
    $P5057 = $P102."shift"()
    set $P5058, $P5057
    goto while25_test116 
  while25_handlers119:
    .get_results ($P5059)
    pop_upto_eh $P5059
    getattribute $P5059, $P5059, 'type'
    eq $P5059, .CONTROL_LOOP_NEXT, while25_test116
    eq $P5059, .CONTROL_LOOP_REDO, while25_redo118
  while25_done120:
    pop_eh 
    .return ($P5058) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_378_1351203235.318") :anon :lex :outer("cuid_379_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 243
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$code_type"
    find_lex $P5004, "$compiled"
    find_lex $P5005, "$i"
    set $I5001, $P5005
    set $P5003, $P5004[$I5001]
    unless_null $P5003, fallback107
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5006
  fallback107:
    clone $P5002, $P5003
    setattribute _lex_param_0, $P5001, "$!do", $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_14_1351203235.318") :anon :lex :outer("cuid_16_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 283
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 284
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5005, $P5002, $P5004, "%!code_objects_to_fix_up"
    find_lex $P5006, "$past"
    $P5007 = $P5006."cuid"()
    set $S5001, $P5007
    set $P5001, $P5005[$S5001]
    unless_null $P5001, fallback130
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5008
  fallback130:
    $P5009 = $P5001."push"(_lex_param_2)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_15_1351203235.318") :anon :lex :outer("cuid_16_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 288
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 290
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    $P5001."add_object"(_lex_param_2)
.annotate 'line', 291
    find_lex $P5003, "$fixups"
    nqp_get_sc_object $P5007, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Op"]
    unless_null $P5004, fallback131
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5008
  fallback131:
.annotate 'line', 293
    nqp_get_sc_object $P5012, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["WVal"]
    unless_null $P5009, fallback132
    nqp_get_sc_object $P5013, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5013
  fallback132:
    $P5014 = $P5009."new"(_lex_param_2 :named("value"))
.annotate 'line', 294
    nqp_get_sc_object $P5018, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["WVal"]
    unless_null $P5015, fallback133
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5015, $P5019
  fallback133:
    find_lex $P5020, "$code_type"
    $P5021 = $P5015."new"($P5020 :named("value"))
.annotate 'line', 295
    nqp_get_sc_object $P5025, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["SVal"]
    unless_null $P5022, fallback134
    nqp_get_sc_object $P5026, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5022, $P5026
  fallback134:
    $P5027 = $P5022."new"("$!do" :named("value"))
.annotate 'line', 296
    nqp_get_sc_object $P5031, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["VM"]
    unless_null $P5028, fallback135
    nqp_get_sc_object $P5032, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5028, $P5032
  fallback135:
.annotate 'line', 298
    nqp_get_sc_object $P5036, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Op"]
    unless_null $P5033, fallback136
    nqp_get_sc_object $P5037, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5033, $P5037
  fallback136:
    nqp_get_sc_object $P5041, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["BVal"]
    unless_null $P5038, fallback137
    nqp_get_sc_object $P5042, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5038, $P5042
  fallback137:
    find_lex $P5043, "$past"
    $P5044 = $P5038."new"($P5043 :named("value"))
    $P5045 = $P5033."new"($P5044, "clone" :named("op"))
.annotate 'line', 299
    nqp_get_sc_object $P5049, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["WVal"]
    unless_null $P5046, fallback138
    nqp_get_sc_object $P5050, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5046, $P5050
  fallback138:
    $P5051 = $P5046."new"(_lex_param_2 :named("value"))
    $P5052 = $P5028."new"($P5045, $P5051, "set_sub_code_object 0PP" :named("pirop"))
    $P5053 = $P5004."new"($P5014, $P5021, $P5027, $P5052, "bindattr" :named("op"))
    $P5003."push"($P5053)
.annotate 'line', 304
    find_lex $P5056, "self"
    nqp_decontainerize $P5055, $P5056
    nqp_get_sc_object $P5057, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5058, $P5055, $P5057, "%!code_objects_to_fix_up"
    find_lex $P5059, "$past"
    $P5060 = $P5059."cuid"()
    set $S5001, $P5060
    set $P5054, $P5058[$S5001]
    unless_null $P5054, fallback139
    nqp_get_sc_object $P5061, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5054, $P5061
  fallback139:
    $P5062 = $P5054."push"(_lex_param_2)
    .return ($P5062) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_381_1351203235.318") :anon :lex :outer("cuid_16_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 315
    .lex "$code_obj", $P101 
    .lex "$slot", $P102 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    find_lex $P5004, "$code_type"
    repr_instance_of $P5003, $P5004
    set $P101, $P5003
    find_lex $P5005, "$code_type"
    find_lex $P5006, "$dummy"
    setattribute $P101, $P5005, "$!do", $P5006
    find_lex $P5007, "$is_dispatcher"
    unless $P5007 goto if30_end143 
    find_lex $P5008, "$code_type"
    new $P5009, 'ResizablePMCArray'
    setattribute $P101, $P5008, "$!dispatchees", $P5009
  if30_end143:
.annotate 'line', 321
    find_lex $P5011, "self"
    nqp_decontainerize $P5010, $P5011
    $P5012 = $P5010."add_object"($P101)
    set $P102, $P5012
.annotate 'line', 324
    find_lex $P5014, "self"
    nqp_decontainerize $P5013, $P5014
.annotate 'line', 325
    nqp_get_sc_object $P5018, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["VM"]
    unless_null $P5015, fallback144
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5015, $P5019
  fallback144:
.annotate 'line', 327
    nqp_get_sc_object $P5023, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["BVal"]
    unless_null $P5020, fallback145
    nqp_get_sc_object $P5024, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5020, $P5024
  fallback145:
    find_lex $P5025, "$past"
    $P5026 = $P5020."new"($P5025 :named("value"))
.annotate 'line', 328
    nqp_get_sc_object $P5030, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["WVal"]
    unless_null $P5027, fallback146
    nqp_get_sc_object $P5031, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5027, $P5031
  fallback146:
    $P5032 = $P5027."new"($P101 :named("value"))
    $P5033 = $P5015."new"($P5026, $P5032, "set_sub_code_object vPP" :named("pirop"))
    $P5013."add_fixup_task"($P5033 :named("deserialize_past"))
.annotate 'line', 332
    find_lex $P5034, "$fixups"
    nqp_get_sc_object $P5038, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Op"]
    unless_null $P5035, fallback147
    nqp_get_sc_object $P5039, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5035, $P5039
  fallback147:
.annotate 'line', 334
    nqp_get_sc_object $P5043, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["WVal"]
    unless_null $P5040, fallback148
    nqp_get_sc_object $P5044, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5040, $P5044
  fallback148:
    $P5045 = $P5040."new"($P101 :named("value"))
.annotate 'line', 335
    nqp_get_sc_object $P5049, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["WVal"]
    unless_null $P5046, fallback149
    nqp_get_sc_object $P5050, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5046, $P5050
  fallback149:
    find_lex $P5051, "$code_type"
    $P5052 = $P5046."new"($P5051 :named("value"))
.annotate 'line', 336
    nqp_get_sc_object $P5056, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["SVal"]
    unless_null $P5053, fallback150
    nqp_get_sc_object $P5057, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5053, $P5057
  fallback150:
    $P5058 = $P5053."new"("$!do" :named("value"))
.annotate 'line', 337
    nqp_get_sc_object $P5062, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5061, $P5062, "QAST"
    get_who $P5060, $P5061
    set $P5059, $P5060["BVal"]
    unless_null $P5059, fallback151
    nqp_get_sc_object $P5063, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5059, $P5063
  fallback151:
    find_lex $P5064, "$past"
    $P5065 = $P5059."new"($P5064 :named("value"))
    $P5066 = $P5035."new"($P5045, $P5052, $P5058, $P5065, "bindattr" :named("op"))
    $P5034."push"($P5066)
.annotate 'line', 339
    find_lex $P5067, "$fixups"
    nqp_get_sc_object $P5071, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5070, $P5071, "QAST"
    get_who $P5069, $P5070
    set $P5068, $P5069["VM"]
    unless_null $P5068, fallback152
    nqp_get_sc_object $P5072, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5068, $P5072
  fallback152:
.annotate 'line', 341
    nqp_get_sc_object $P5076, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5075, $P5076, "QAST"
    get_who $P5074, $P5075
    set $P5073, $P5074["BVal"]
    unless_null $P5073, fallback153
    nqp_get_sc_object $P5077, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5073, $P5077
  fallback153:
    find_lex $P5078, "$past"
    $P5079 = $P5073."new"($P5078 :named("value"))
.annotate 'line', 342
    nqp_get_sc_object $P5083, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["WVal"]
    unless_null $P5080, fallback154
    nqp_get_sc_object $P5084, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5080, $P5084
  fallback154:
    $P5085 = $P5080."new"($P101 :named("value"))
    $P5086 = $P5068."new"($P5079, $P5085, "set_sub_code_object vPP" :named("pirop"))
    $P5067."push"($P5086)
    find_lex $P5088, "self"
    nqp_decontainerize $P5087, $P5088
    nqp_get_sc_object $P5089, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5090, $P5087, $P5089, "%!code_objects_to_fix_up"
.annotate 'line', 346
    find_lex $P5091, "$past"
    $P5092 = $P5091."cuid"()
    set $S5001, $P5092
    new $P5093, 'ResizablePMCArray'
    push $P5093, $P101
    set $P5090[$S5001], $P5093
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_create_mo" :subid("cuid_17_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 368
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("name") :optional 
    .param int haz_param_2 :opt_flag 
    .param pmc _lex_param_3 :named("repr") :optional 
    .param int haz_param_3 :opt_flag 
    if haz_param_2, default167
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_2, $P5007
  default167:
    if haz_param_3, default168
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_3, $P5008
  default168:
    .lex "%args", $P101 
    .lex "$mo", $P102 
    .lex "self", _lex_param_0 
    .lex "$how", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$repr", _lex_param_3 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_161
    .lex "RETURN", $P103
    defined $I5001, _lex_param_2
    unless $I5001 goto if31_end164 
.annotate 'line', 371
    set $P101["name"], _lex_param_2
  if31_end164:
    defined $I5002, _lex_param_3
    unless $I5002 goto if32_end166 
.annotate 'line', 372
    set $P101["repr"], _lex_param_3
  if32_end166:
.annotate 'line', 373
    $P5003 = _lex_param_1."new_type"($P101 :flat :named)
    set $P102, $P5003
.annotate 'line', 374
    nqp_decontainerize $P5004, _lex_param_0
    $P5004."add_object"($P102)
    find_lex $P5005, "RETURN"
    $P5006 = $P5005($P102)
    goto lexotic_162
  lexotic_161:
    .get_results ($P5006)
  lexotic_162:
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_attribute" :subid("cuid_18_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 385
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "$attr", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_attr", _lex_param_2 
    .lex "%lit_args", _lex_param_3 
    .lex "%obj_args", _lex_param_4 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 386
    $P5002 = _lex_param_2."new"(_lex_param_3 :flat :named, _lex_param_4 :flat :named)
    set $P101, $P5002
.annotate 'line', 387
    get_how $P5003, _lex_param_1
    $P5004 = $P5003."add_attribute"(_lex_param_1, $P101)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_method" :subid("cuid_19_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 391
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$name", _lex_param_3 
    .lex "$code", _lex_param_4 
.annotate 'line', 392
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3, _lex_param_4)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "set_routine_signature" :subid("cuid_20_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 396
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$sig_type", $P101 
    .lex "$code_type", $P102 
    .lex "$sig_obj", $P103 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$types", _lex_param_2 
    .lex "$definednesses", _lex_param_3 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P103, $P5003
.annotate 'line', 397
    nqp_decontainerize $P5004, _lex_param_0
    new $P5005, 'ResizablePMCArray'
    box $P5006, "NQPSignature"
    push $P5005, $P5006
    $P5007 = $P5004."find_sym"($P5005)
    set $P101, $P5007
.annotate 'line', 398
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    box $P5010, "NQPRoutine"
    push $P5009, $P5010
    $P5011 = $P5008."find_sym"($P5009)
    set $P102, $P5011
    repr_instance_of $P5012, $P101
    set $P103, $P5012
    setattribute $P103, $P101, "$!types", _lex_param_2
    setattribute $P103, $P101, "$!definednesses", _lex_param_3
    setattribute _lex_param_1, $P102, "$!signature", $P103
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_set_body_block" :subid("cuid_21_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 406
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$body_code_obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$body_past", _lex_param_2 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 408
    nqp_decontainerize $P5002, _lex_param_0
    $P5003 = _lex_param_2."name"()
    $P5004 = $P5002."create_code"(_lex_param_2, $P5003, 0)
    set $P101, $P5004
.annotate 'line', 411
    get_how $P5005, _lex_param_1
    $P5006 = $P5005."set_body_block"(_lex_param_1, $P101)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parent_or_role" :subid("cuid_22_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 415
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$to_add", _lex_param_3 
.annotate 'line', 416
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parrot_vtable_handler_mapping" :subid("cuid_23_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 419
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$att_name", _lex_param_3 
.annotate 'line', 420
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."add_parrot_vtable_handler_mapping"(_lex_param_1, _lex_param_2, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_compose" :subid("cuid_24_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 424
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
.annotate 'line', 425
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."compose"(_lex_param_1)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "run_begin_block" :subid("cuid_25_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 429
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5040 = 'cuid_383_1351203235.318' 
    capture_lex $P5040 
    .lex "$wrapper", $P101 
    .lex "%seen", $P102 
    .lex "$i", $P103 
    .lex "$code", $P104 
    .lex "$old_global", $P105 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P103, $P5003
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P104, $P5004
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P105, $P5005
    root_new $P106, ['parrot';'Continuation']
    set_label $P106, lexotic_169
    .lex "RETURN", $P106
.annotate 'line', 431
    nqp_get_sc_object $P5009, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback171
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5010
  fallback171:
.annotate 'line', 432
    nqp_get_sc_object $P5014, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Stmts"]
    unless_null $P5011, fallback172
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5015
  fallback172:
    $P5016 = $P5011."new"()
    $P5017 = $P5006."new"($P5016, _lex_param_1)
    set $P101, $P5017
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    set $N5001, $P5020
    box $P5021, $N5001
    set $P103, $P5021
  while33_test173:
    set $N5002, $P103
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5025, $I5001
    set $P5024, $P5025
    unless $I5001 goto while33_done177 
  while33_redo175:
    .const 'Sub' $P5022 = 'cuid_383_1351203235.318' 
    capture_lex $P5022
    $P5023 = $P5022()
    set $P5024, $P5023
    goto while33_test173 
  while33_done177:
.annotate 'line', 455
    nqp_decontainerize $P5026, _lex_param_0
    $P5027 = $P5026."create_code"($P101, "BEGIN block", 0)
    set $P104, $P5027
    new $P5029, 'ResizablePMCArray'
    get_hll_global $P5028, $P5029, "GLOBAL"
    set $P105, $P5028
    new $P5030, 'ResizablePMCArray'
    find_dynamic_lex $P5031, "$*GLOBALish"
    unless_null $P5031, fallback194
    nqp_get_sc_object $P5034, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$GLOBALish"]
    unless_null $P5032, fallback195
    nqp_get_sc_object $P5035, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5032, $P5035
  fallback195:
    unless_null $P5032, vivi_38196
    die "Contextual $*GLOBALish not found"
    box $P5036, "Contextual $*GLOBALish not found"
    set $P5032, $P5036
  vivi_38196:
    set $P5031, $P5032
  fallback194:
    set_hll_global $P5030, "GLOBAL", $P5031
.annotate 'line', 458
    $P104()
    new $P5037, 'ResizablePMCArray'
    set_hll_global $P5037, "GLOBAL", $P105
.annotate 'line', 463
    $P101."shift"()
    find_lex $P5038, "RETURN"
    $P5039 = $P5038($P101)
    goto lexotic_170
  lexotic_169:
    .get_results ($P5039)
  lexotic_170:
    .return ($P5039) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_383_1351203235.318") :anon :lex :outer("cuid_25_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 437
    .const 'Sub' $P5017 = 'cuid_382_1351203235.318' 
    capture_lex $P5017 
    .lex "%symbols", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 439
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback178
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5010
  fallback178:
    $P5011 = $P5004."symtable"()
    set $P101, $P5011
    set $P5012, $P101
    iter $P5014, $P101
  for_next191:
    unless $P5014, for_done193
    shift $P5016, $P5014
  for_redo192:
    .const 'Sub' $P5015 = 'cuid_382_1351203235.318' 
    capture_lex $P5015
    $P5012 = $P5015($P5016)
    goto for_next191
  for_done193:
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_382_1351203235.318") :anon :lex :outer("cuid_383_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 440
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "%seen"
.annotate 'line', 441
    $P5003 = _lex_param_0."key"()
    set $S5001, $P5003
    set $P5001, $P5002[$S5001]
    unless_null $P5001, fallback183
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5004
  fallback183:
    isfalse $I5001, $P5001
    set $I5003, $I5001
    unless $I5001 goto if35_end182 
    $P5005 = _lex_param_0."value"()
    exists $I5002, $P5005["value"]
    set $I5003, $I5002
  if35_end182:
    box $P5038, $I5003
    set $P5037, $P5038
    unless $I5003 goto if34_end180 
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_37190
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 442
.annotate 'line', 443
    find_lex $P5007, "$wrapper"
    set $P5006, $P5007[0]
    unless_null $P5006, fallback184
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5008
  fallback184:
    nqp_get_sc_object $P5012, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback185
    nqp_get_sc_object $P5013, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5013
  fallback185:
.annotate 'line', 445
    nqp_get_sc_object $P5017, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Var"]
    unless_null $P5014, fallback186
    nqp_get_sc_object $P5018, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5014, $P5018
  fallback186:
    $P5019 = _lex_param_0."key"()
    $P5020 = $P5014."new"($P5019 :named("name"), "lexical" :named("scope"), "var" :named("isdecl"))
.annotate 'line', 446
    nqp_get_sc_object $P5024, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["WVal"]
    unless_null $P5021, fallback187
    nqp_get_sc_object $P5025, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5021, $P5025
  fallback187:
    $P5027 = _lex_param_0."value"()
    set $P5026, $P5027["value"]
    unless_null $P5026, fallback188
    nqp_get_sc_object $P5028, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5026, $P5028
  fallback188:
    $P5029 = $P5021."new"($P5026 :named("value"))
    $P5030 = $P5009."new"($P5020, $P5029, "bind" :named("op"))
    $P5031 = $P5006."push"($P5030)
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_36189
  catch_handler_37190:
    .get_results ($P5032) 
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10001
    goto skip_handler_36189
  skip_handler_36189:
    find_lex $P5034, "%seen"
.annotate 'line', 449
    $P5035 = _lex_param_0."key"()
    set $S5002, $P5035
    box $P5036, 1
    set $P5034[$S5002], $P5036
    set $P5037, $P5036
  if34_end180:
    .return ($P5037) 
.end
.HLL "nqp"
.namespace []
.sub "libs" :subid("cuid_26_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 468
    .param pmc _lex_param_0 
    .const 'Sub' $P5044 = 'cuid_384_1351203235.318' 
    capture_lex $P5044 
    .lex "@loadlibs", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    box $P5003, "nqp_group"
    push $P5002, $P5003
    box $P5004, "nqp_ops"
    push $P5002, $P5004
    box $P5005, "nqp_bigint_ops"
    push $P5002, $P5005
    box $P5006, "trans_ops"
    push $P5002, $P5006
    box $P5007, "io_ops"
    push $P5002, $P5007
    set $P101, $P5002
    find_dynamic_lex $P5010, "%*COMPILING"
    unless_null $P5010, fallback199
    nqp_get_sc_object $P5013, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["%COMPILING"]
    unless_null $P5011, fallback200
    nqp_get_sc_object $P5015, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5014, $P5015
    new $P5016, 'Hash'
    set $P5014["%COMPILING"], $P5016
    set $P5011, $P5016
  fallback200:
    unless_null $P5011, vivi_40201
    die "Contextual %*COMPILING not found"
    box $P5017, "Contextual %*COMPILING not found"
    set $P5011, $P5017
  vivi_40201:
    set $P5010, $P5011
  fallback199:
    set $P5009, $P5010["%?OPTIONS"]
    unless_null $P5009, fallback202
    nqp_get_sc_object $P5018, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5018
  fallback202:
    set $P5008, $P5009["vmlibs"]
    unless_null $P5008, fallback203
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5019
  fallback203:
    unless $P5008 goto if39_end198 
.annotate 'line', 471
    find_dynamic_lex $P5026, "%*COMPILING"
    unless_null $P5026, fallback204
    nqp_get_sc_object $P5029, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["%COMPILING"]
    unless_null $P5027, fallback205
    nqp_get_sc_object $P5031, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5030, $P5031
    new $P5032, 'Hash'
    set $P5030["%COMPILING"], $P5032
    set $P5027, $P5032
  fallback205:
    unless_null $P5027, vivi_41206
    die "Contextual %*COMPILING not found"
    box $P5033, "Contextual %*COMPILING not found"
    set $P5027, $P5033
  vivi_41206:
    set $P5026, $P5027
  fallback204:
    set $P5025, $P5026["%?OPTIONS"]
    unless_null $P5025, fallback207
    nqp_get_sc_object $P5034, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5025, $P5034
  fallback207:
    set $P5024, $P5025["vmlibs"]
    unless_null $P5024, fallback208
    nqp_get_sc_object $P5035, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5024, $P5035
  fallback208:
    set $S5001, $P5024
    split $P5023, ",", $S5001
    set $P5020, $P5023
    iter $P5022, $P5023
  for_next209:
    unless $P5022, for_done211
    shift $P5037, $P5022
  for_redo210:
    .const 'Sub' $P5036 = 'cuid_384_1351203235.318' 
    capture_lex $P5036
    $P5020 = $P5036($P5037)
    goto for_next209
  for_done211:
  if39_end198:
.annotate 'line', 476
    nqp_get_sc_object $P5041, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["VM"]
    unless_null $P5038, fallback212
    nqp_get_sc_object $P5042, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5038, $P5042
  fallback212:
    $P5043 = $P5038."new"($P101 :named("loadlibs"))
    .return ($P5043) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_384_1351203235.318") :anon :lex :outer("cuid_26_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 472
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 473
    find_lex $P5001, "@loadlibs"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "add_initializations" :subid("cuid_27_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 480
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 481
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5005, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback213
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5006
  fallback213:
.annotate 'line', 482
    nqp_get_sc_object $P5010, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["VM"]
    unless_null $P5007, fallback214
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5011
  fallback214:
    $P5012 = $P5007."new"("nqp_dynop_setup v" :named("pirop"))
.annotate 'line', 483
    nqp_get_sc_object $P5016, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["VM"]
    unless_null $P5013, fallback215
    nqp_get_sc_object $P5017, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5013, $P5017
  fallback215:
    $P5018 = $P5013."new"("nqp_bigint_setup v" :named("pirop"))
.annotate 'line', 484
    nqp_get_sc_object $P5022, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["Op"]
    unless_null $P5019, fallback216
    nqp_get_sc_object $P5023, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5019, $P5023
  fallback216:
.annotate 'line', 486
    nqp_get_sc_object $P5027, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["VM"]
    unless_null $P5024, fallback217
    nqp_get_sc_object $P5028, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5024, $P5028
  fallback217:
    $P5029 = $P5024."new"("getinterp P" :named("pirop"))
.annotate 'line', 487
    nqp_get_sc_object $P5033, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["VM"]
    unless_null $P5030, fallback218
    nqp_get_sc_object $P5034, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5030, $P5034
  fallback218:
    nqp_get_sc_object $P5038, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["SVal"]
    unless_null $P5035, fallback219
    nqp_get_sc_object $P5039, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5035, $P5039
  fallback219:
    $P5040 = $P5035."new"("LexPad" :named("value"))
    $P5041 = $P5030."new"($P5040, "get_class Ps" :named("pirop"))
.annotate 'line', 488
    nqp_get_sc_object $P5045, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["VM"]
    unless_null $P5042, fallback220
    nqp_get_sc_object $P5046, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5042, $P5046
  fallback220:
    nqp_get_sc_object $P5050, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["SVal"]
    unless_null $P5047, fallback221
    nqp_get_sc_object $P5051, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5047, $P5051
  fallback221:
    $P5052 = $P5047."new"("NQPLexPad" :named("value"))
    $P5053 = $P5042."new"($P5052, "get_class Ps" :named("pirop"))
    $P5054 = $P5019."new"($P5029, $P5041, $P5053, "callmethod" :named("op"), "hll_map" :named("name"))
    $P5055 = $P5002."new"($P5012, $P5018, $P5054)
    $P5056 = $P5001."add_load_dependency_task"($P5055 :named("deserialize_past"))
    .return ($P5056) 
.end
.HLL "nqp"
.namespace []
.sub "is_lexical" :subid("cuid_28_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 494
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 495
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "lexical")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_package" :subid("cuid_29_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 500
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 501
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "package")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_scope" :subid("cuid_30_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 506
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .const 'Sub' $P5011 = 'cuid_385_1351203235.318' 
    capture_lex $P5011 
    .lex "$i", $P101 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
    .lex "$wanted_scope", _lex_param_2 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_222
    .lex "RETURN", $P102
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    set $N5001, $P5004
    box $P5005, $N5001
    set $P101, $P5005
  while42_test224:
    set $N5002, $P101
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5009, $I5001
    set $P5008, $P5009
    unless $I5001 goto while42_done228 
  while42_redo226:
    .const 'Sub' $P5006 = 'cuid_385_1351203235.318' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5008, $P5007
    goto while42_test224 
  while42_done228:
    box $P5010, 0
    goto lexotic_223
  lexotic_222:
    .get_results ($P5010)
  lexotic_223:
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_385_1351203235.318") :anon :lex :outer("cuid_30_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 508
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 510
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback229
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5010
  fallback229:
    find_lex $P5011, "$name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5019, $N5004
    set $P5018, $P5019
    unless $N5004 goto if43_end231 
.annotate 'line', 511
    set $P5014, $P101["scope"]
    unless_null $P5014, fallback232
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5014, $P5015
  fallback232:
    set $S5001, $P5014
    find_lex $P5016, "$wanted_scope"
    set $S5002, $P5016
    iseq $I5002, $S5001, $S5002
    find_lex $P5013, "RETURN"
    $P5017 = $P5013($I5002)
    set $P5018, $P5017
  if43_end231:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "known_sym" :subid("cuid_31_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 519
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$known", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "@name", _lex_param_2 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    box $P5002, 0
    set $P101, $P5002
    new $P5005, 'ExceptionHandler'
    set_label $P5005, catch_handler_45234
    $P5005.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5005
.annotate 'line', 521
.annotate 'line', 522
    nqp_decontainerize $P5003, _lex_param_0
    $P5003."find_sym"(_lex_param_2)
    box $P5004, 1
    set $P101, $P5004
    set $P5006, $P101
    pop_eh 
    goto skip_handler_44233
  catch_handler_45234:
    .get_results ($P5005) 
    set $I10001, 1
    set $P5005["handled"], $I10001
    nqp_get_sc_object $P10001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    finalize $P5005
    pop_upto_eh $P5005
    pop_eh 
    set $P5006, $P10001
    goto skip_handler_44233
  skip_handler_44233:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "find_sym" :subid("cuid_32_1351203235.318") :anon :lex :outer("cuid_33_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 531
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5018 = 'cuid_387_1351203235.318' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_389_1351203235.318' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_390_1351203235.318' 
    capture_lex $P5018 
    .lex "$result", $P101 
    .lex "self", _lex_param_0 
    .lex "@name", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_235
    .lex "RETURN", $P102
    set $N5001, _lex_param_1
    if $N5001 goto unless46_end238 
.annotate 'line', 533
    box $P5002, "Cannot look up empty name"
    die $P5002
  unless46_end238:
    set $N5002, _lex_param_1
    set $N5003, 1
    iseq $I5001, $N5002, $N5003
    unless $I5001 goto if47_end240 
    .const 'Sub' $P5003 = 'cuid_387_1351203235.318' 
    capture_lex $P5003
    $P5004 = $P5003()
  if47_end240:
    find_dynamic_lex $P5005, "$*GLOBALish"
    unless_null $P5005, fallback253
    nqp_get_sc_object $P5008, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$GLOBALish"]
    unless_null $P5006, fallback254
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5009
  fallback254:
    unless_null $P5006, vivi_51255
    die "Contextual $*GLOBALish not found"
    box $P5010, "Contextual $*GLOBALish not found"
    set $P5006, $P5010
  vivi_51255:
    set $P5005, $P5006
  fallback253:
    set $P101, $P5005
    set $N5004, _lex_param_1
    set $N5005, 2
    isge $I5002, $N5004, $N5005
    unless $I5002 goto if52_end257 
    .const 'Sub' $P5011 = 'cuid_389_1351203235.318' 
    capture_lex $P5011
    $P5012 = $P5011()
  if52_end257:
    set $P5013, _lex_param_1
    iter $P5015, _lex_param_1
  for_next273:
    unless $P5015, for_done275
    shift $P5017, $P5015
  for_redo274:
    .const 'Sub' $P5016 = 'cuid_390_1351203235.318' 
    capture_lex $P5016
    $P5013 = $P5016($P5017)
    goto for_next273
  for_done275:
    goto lexotic_236
  lexotic_235:
    .get_results ($P101)
  lexotic_236:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_387_1351203235.318") :anon :lex :outer("cuid_32_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 537
    .const 'Sub' $P5015 = 'cuid_386_1351203235.318' 
    capture_lex $P5015 
    .lex "$final_name", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback241
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5005
  fallback241:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
  while48_test242:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto while48_done246 
  while48_redo244:
    .const 'Sub' $P5011 = 'cuid_386_1351203235.318' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while48_test242 
  while48_done246:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_386_1351203235.318") :anon :lex :outer("cuid_387_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 540
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 542
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback247
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5010
  fallback247:
    find_lex $P5011, "$final_name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5021, $N5004
    set $P5020, $P5021
    unless $N5004 goto if49_end249 
.annotate 'line', 543
    exists $I5002, $P101["value"]
    unless $I5002 goto if50_else250 
.annotate 'line', 544
    set $P5014, $P101["value"]
    unless_null $P5014, fallback252
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5014, $P5015
  fallback252:
    find_lex $P5013, "RETURN"
    $P5016 = $P5013($P5014)
    set $P5019, $P5016
    goto if50_end251
  if50_else250:
.annotate 'line', 547
    find_lex $P5017, "$final_name"
    set $S5002, $P5017
    concat $S5001, "No compile-time value for ", $S5002
    box $P5018, $S5001
    die $P5018
    set $P5019, $P5018
  if50_end251:
    set $P5020, $P5019
  if49_end249:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_389_1351203235.318") :anon :lex :outer("cuid_32_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 558
    .const 'Sub' $P5015 = 'cuid_388_1351203235.318' 
    capture_lex $P5015 
    .lex "$first", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback258
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5005
  fallback258:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
  while53_test259:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto while53_done263 
  while53_redo261:
    .const 'Sub' $P5011 = 'cuid_388_1351203235.318' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while53_test259 
  while53_done263:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_388_1351203235.318") :anon :lex :outer("cuid_389_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 561
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 563
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback264
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5010
  fallback264:
    find_lex $P5011, "$first"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5021, $N5004
    set $P5020, $P5021
    unless $N5004 goto if54_end266 
.annotate 'line', 564
    exists $I5002, $P101["value"]
    unless $I5002 goto if55_else267 
.annotate 'line', 565
    set $P5013, $P101["value"]
    unless_null $P5013, fallback269
    nqp_get_sc_object $P5014, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5013, $P5014
  fallback269:
    store_lex "$result", $P5013
.annotate 'line', 567
    find_lex $P5015, "@name"
    $P5015."shift"()
    box $P5016, 0
    store_lex "$i", $P5016
    set $P5019, $P5016
    goto if55_end268
  if55_else267:
.annotate 'line', 570
    find_lex $P5017, "$first"
    set $S5002, $P5017
    concat $S5001, "No compile-time value for ", $S5002
    box $P5018, $S5001
    die $P5018
    set $P5019, $P5018
  if55_end268:
    set $P5020, $P5019
  if54_end266:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_390_1351203235.318") :anon :lex :outer("cuid_32_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 578
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$result"
    get_who $P5001, $P5002
    set $S5001, _lex_param_0
    exists $I5001, $P5001[$S5001]
    unless $I5001 goto if56_else270 
.annotate 'line', 579
    find_lex $P5005, "$result"
    get_who $P5004, $P5005
    set $S5002, _lex_param_0
    set $P5003, $P5004[$S5002]
    unless_null $P5003, fallback272
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5006
  fallback272:
    store_lex "$result", $P5003
    set $P5009, $P5003
    goto if56_end271
  if56_else270:
.annotate 'line', 582
    find_lex $P5007, "@name"
    join $S5004, "::", $P5007
    concat $S5003, "Could not locate compile-time value for symbol ", $S5004
    box $P5008, $S5003
    die $P5008
    set $P5009, $P5008
  if56_end271:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_224_1351203235.318") :anon :lex :outer("cuid_1_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 593
    .const 'Sub' $P5259 = 'cuid_34_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_35_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_36_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_37_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_38_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_39_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_40_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_42_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_44_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_45_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_46_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_48_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_49_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_50_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_51_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_52_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_53_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_54_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_55_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_56_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_57_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_58_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_59_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_60_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_61_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_62_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_63_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_64_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_66_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_67_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_68_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_69_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_70_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_71_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_72_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_73_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_74_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_75_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_76_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_77_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_78_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_79_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_80_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_81_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_82_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_83_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_84_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_85_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_86_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_87_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_88_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_89_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_92_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_93_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_94_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_95_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_96_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_97_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_98_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_99_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_100_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_101_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_102_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_103_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_104_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_105_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_106_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_107_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_108_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_109_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_110_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_111_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_112_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_113_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_114_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_115_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_116_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_117_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_118_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_119_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_120_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_121_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_122_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_123_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_124_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_125_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_126_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_127_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_128_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_130_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_131_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_132_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_133_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_134_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_135_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_136_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_137_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_138_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_139_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_140_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_141_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_142_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_143_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_144_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_145_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_146_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_147_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_148_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_149_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_150_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_151_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_152_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_153_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_154_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_155_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_156_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_157_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_158_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_159_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_160_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_161_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_162_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_163_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_164_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_165_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_166_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_167_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_168_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_169_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_170_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_171_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_172_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_173_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_174_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_175_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_176_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_177_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_178_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_179_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_180_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_181_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_182_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_183_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_184_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_185_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_186_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_187_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_188_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_189_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_190_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_191_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_192_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_193_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_194_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_195_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_196_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_197_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_198_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_199_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_200_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_201_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_202_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_203_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_204_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_205_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_206_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_207_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_208_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_209_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_210_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_211_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_212_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_213_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_214_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_215_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_216_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_217_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_218_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_219_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_220_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_221_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_222_1351203235.318' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_223_1351203235.318' 
    capture_lex $P5259 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
.annotate 'line', 1259
.annotate 'line', 1260
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "NQP"
    get_who $P5002, $P5003
    set $P5001, $P5002["Grammar"]
    unless_null $P5001, fallback276
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback276:
    $P5001."O"(":prec<y=>, :assoc<unary>", "%methodop")
.annotate 'line', 1261
    nqp_get_sc_object $P5009, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5008, $P5009, "NQP"
    get_who $P5007, $P5008
    set $P5006, $P5007["Grammar"]
    unless_null $P5006, fallback277
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5010
  fallback277:
    $P5006."O"(":prec<x=>, :assoc<unary>", "%autoincrement")
.annotate 'line', 1262
    nqp_get_sc_object $P5014, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5013, $P5014, "NQP"
    get_who $P5012, $P5013
    set $P5011, $P5012["Grammar"]
    unless_null $P5011, fallback278
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5015
  fallback278:
    $P5011."O"(":prec<w=>, :assoc<left>", "%exponentiation")
.annotate 'line', 1263
    nqp_get_sc_object $P5019, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5018, $P5019, "NQP"
    get_who $P5017, $P5018
    set $P5016, $P5017["Grammar"]
    unless_null $P5016, fallback279
    nqp_get_sc_object $P5020, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5016, $P5020
  fallback279:
    $P5016."O"(":prec<v=>, :assoc<unary>", "%symbolic_unary")
.annotate 'line', 1264
    nqp_get_sc_object $P5024, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5023, $P5024, "NQP"
    get_who $P5022, $P5023
    set $P5021, $P5022["Grammar"]
    unless_null $P5021, fallback280
    nqp_get_sc_object $P5025, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5021, $P5025
  fallback280:
    $P5021."O"(":prec<u=>, :assoc<left>", "%multiplicative")
.annotate 'line', 1265
    nqp_get_sc_object $P5029, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5028, $P5029, "NQP"
    get_who $P5027, $P5028
    set $P5026, $P5027["Grammar"]
    unless_null $P5026, fallback281
    nqp_get_sc_object $P5030, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5026, $P5030
  fallback281:
    $P5026."O"(":prec<t=>, :assoc<left>", "%additive")
.annotate 'line', 1266
    nqp_get_sc_object $P5034, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5033, $P5034, "NQP"
    get_who $P5032, $P5033
    set $P5031, $P5032["Grammar"]
    unless_null $P5031, fallback282
    nqp_get_sc_object $P5035, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5031, $P5035
  fallback282:
    $P5031."O"(":prec<r=>, :assoc<left>", "%concatenation")
.annotate 'line', 1267
    nqp_get_sc_object $P5039, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5038, $P5039, "NQP"
    get_who $P5037, $P5038
    set $P5036, $P5037["Grammar"]
    unless_null $P5036, fallback283
    nqp_get_sc_object $P5040, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5036, $P5040
  fallback283:
    $P5036."O"(":prec<m=>, :assoc<left>", "%relational")
.annotate 'line', 1268
    nqp_get_sc_object $P5044, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5043, $P5044, "NQP"
    get_who $P5042, $P5043
    set $P5041, $P5042["Grammar"]
    unless_null $P5041, fallback284
    nqp_get_sc_object $P5045, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5041, $P5045
  fallback284:
    $P5041."O"(":prec<l=>, :assoc<left>", "%tight_and")
.annotate 'line', 1269
    nqp_get_sc_object $P5049, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5048, $P5049, "NQP"
    get_who $P5047, $P5048
    set $P5046, $P5047["Grammar"]
    unless_null $P5046, fallback285
    nqp_get_sc_object $P5050, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5046, $P5050
  fallback285:
    $P5046."O"(":prec<k=>, :assoc<left>", "%tight_or")
.annotate 'line', 1270
    nqp_get_sc_object $P5054, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5053, $P5054, "NQP"
    get_who $P5052, $P5053
    set $P5051, $P5052["Grammar"]
    unless_null $P5051, fallback286
    nqp_get_sc_object $P5055, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5051, $P5055
  fallback286:
    $P5051."O"(":prec<j=>, :assoc<right>", "%conditional")
.annotate 'line', 1271
    nqp_get_sc_object $P5059, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5058, $P5059, "NQP"
    get_who $P5057, $P5058
    set $P5056, $P5057["Grammar"]
    unless_null $P5056, fallback287
    nqp_get_sc_object $P5060, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5056, $P5060
  fallback287:
    $P5056."O"(":prec<i=>, :assoc<right>", "%assignment")
.annotate 'line', 1272
    nqp_get_sc_object $P5064, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5063, $P5064, "NQP"
    get_who $P5062, $P5063
    set $P5061, $P5062["Grammar"]
    unless_null $P5061, fallback288
    nqp_get_sc_object $P5065, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5061, $P5065
  fallback288:
    $P5061."O"(":prec<g=>, :assoc<list>, :nextterm<nulltermish>", "%comma")
.annotate 'line', 1273
    nqp_get_sc_object $P5069, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5068, $P5069, "NQP"
    get_who $P5067, $P5068
    set $P5066, $P5067["Grammar"]
    unless_null $P5066, fallback289
    nqp_get_sc_object $P5070, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5066, $P5070
  fallback289:
    $P5066."O"(":prec<f=>, :assoc<list>", "%list_infix")
.annotate 'line', 1274
    nqp_get_sc_object $P5074, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5073, $P5074, "NQP"
    get_who $P5072, $P5073
    set $P5071, $P5072["Grammar"]
    unless_null $P5071, fallback290
    nqp_get_sc_object $P5075, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5071, $P5075
  fallback290:
    $P5071."O"(":prec<e=>, :assoc<unary>", "%list_prefix")
.annotate 'line', 593
    .const 'Sub' $P5076 = 'cuid_34_1351203235.318' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_35_1351203235.318' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_36_1351203235.318' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_37_1351203235.318' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_38_1351203235.318' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_39_1351203235.318' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_40_1351203235.318' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_42_1351203235.318' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_44_1351203235.318' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_45_1351203235.318' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_46_1351203235.318' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_48_1351203235.318' 
    capture_lex $P5087
    .const 'Sub' $P5088 = 'cuid_49_1351203235.318' 
    capture_lex $P5088
    .const 'Sub' $P5089 = 'cuid_50_1351203235.318' 
    capture_lex $P5089
    .const 'Sub' $P5090 = 'cuid_51_1351203235.318' 
    capture_lex $P5090
    .const 'Sub' $P5091 = 'cuid_52_1351203235.318' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_53_1351203235.318' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_54_1351203235.318' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_55_1351203235.318' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_56_1351203235.318' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_57_1351203235.318' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_58_1351203235.318' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_59_1351203235.318' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_60_1351203235.318' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_61_1351203235.318' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_62_1351203235.318' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_63_1351203235.318' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_64_1351203235.318' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_66_1351203235.318' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_67_1351203235.318' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_68_1351203235.318' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_69_1351203235.318' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_70_1351203235.318' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_71_1351203235.318' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_72_1351203235.318' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_73_1351203235.318' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_74_1351203235.318' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_75_1351203235.318' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_76_1351203235.318' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_77_1351203235.318' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_78_1351203235.318' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_79_1351203235.318' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_80_1351203235.318' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_81_1351203235.318' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_82_1351203235.318' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_83_1351203235.318' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_84_1351203235.318' 
    capture_lex $P5122
    .const 'Sub' $P5123 = 'cuid_85_1351203235.318' 
    capture_lex $P5123
    .const 'Sub' $P5124 = 'cuid_86_1351203235.318' 
    capture_lex $P5124
    .const 'Sub' $P5125 = 'cuid_87_1351203235.318' 
    capture_lex $P5125
    .const 'Sub' $P5126 = 'cuid_88_1351203235.318' 
    capture_lex $P5126
    .const 'Sub' $P5127 = 'cuid_89_1351203235.318' 
    capture_lex $P5127
    .const 'Sub' $P5128 = 'cuid_92_1351203235.318' 
    capture_lex $P5128
    .const 'Sub' $P5129 = 'cuid_93_1351203235.318' 
    capture_lex $P5129
    .const 'Sub' $P5130 = 'cuid_94_1351203235.318' 
    capture_lex $P5130
    .const 'Sub' $P5131 = 'cuid_95_1351203235.318' 
    capture_lex $P5131
    .const 'Sub' $P5132 = 'cuid_96_1351203235.318' 
    capture_lex $P5132
    .const 'Sub' $P5133 = 'cuid_97_1351203235.318' 
    capture_lex $P5133
    .const 'Sub' $P5134 = 'cuid_98_1351203235.318' 
    capture_lex $P5134
    .const 'Sub' $P5135 = 'cuid_99_1351203235.318' 
    capture_lex $P5135
    .const 'Sub' $P5136 = 'cuid_100_1351203235.318' 
    capture_lex $P5136
    .const 'Sub' $P5137 = 'cuid_101_1351203235.318' 
    capture_lex $P5137
    .const 'Sub' $P5138 = 'cuid_102_1351203235.318' 
    capture_lex $P5138
    .const 'Sub' $P5139 = 'cuid_103_1351203235.318' 
    capture_lex $P5139
    .const 'Sub' $P5140 = 'cuid_104_1351203235.318' 
    capture_lex $P5140
    .const 'Sub' $P5141 = 'cuid_105_1351203235.318' 
    capture_lex $P5141
    .const 'Sub' $P5142 = 'cuid_106_1351203235.318' 
    capture_lex $P5142
    .const 'Sub' $P5143 = 'cuid_107_1351203235.318' 
    capture_lex $P5143
    .const 'Sub' $P5144 = 'cuid_108_1351203235.318' 
    capture_lex $P5144
    .const 'Sub' $P5145 = 'cuid_109_1351203235.318' 
    capture_lex $P5145
    .const 'Sub' $P5146 = 'cuid_110_1351203235.318' 
    capture_lex $P5146
    .const 'Sub' $P5147 = 'cuid_111_1351203235.318' 
    capture_lex $P5147
    .const 'Sub' $P5148 = 'cuid_112_1351203235.318' 
    capture_lex $P5148
    .const 'Sub' $P5149 = 'cuid_113_1351203235.318' 
    capture_lex $P5149
    .const 'Sub' $P5150 = 'cuid_114_1351203235.318' 
    capture_lex $P5150
    .const 'Sub' $P5151 = 'cuid_115_1351203235.318' 
    capture_lex $P5151
    .const 'Sub' $P5152 = 'cuid_116_1351203235.318' 
    capture_lex $P5152
    .const 'Sub' $P5153 = 'cuid_117_1351203235.318' 
    capture_lex $P5153
    .const 'Sub' $P5154 = 'cuid_118_1351203235.318' 
    capture_lex $P5154
    .const 'Sub' $P5155 = 'cuid_119_1351203235.318' 
    capture_lex $P5155
    .const 'Sub' $P5156 = 'cuid_120_1351203235.318' 
    capture_lex $P5156
    .const 'Sub' $P5157 = 'cuid_121_1351203235.318' 
    capture_lex $P5157
    .const 'Sub' $P5158 = 'cuid_122_1351203235.318' 
    capture_lex $P5158
    .const 'Sub' $P5159 = 'cuid_123_1351203235.318' 
    capture_lex $P5159
    .const 'Sub' $P5160 = 'cuid_124_1351203235.318' 
    capture_lex $P5160
    .const 'Sub' $P5161 = 'cuid_125_1351203235.318' 
    capture_lex $P5161
    .const 'Sub' $P5162 = 'cuid_126_1351203235.318' 
    capture_lex $P5162
    .const 'Sub' $P5163 = 'cuid_127_1351203235.318' 
    capture_lex $P5163
    .const 'Sub' $P5164 = 'cuid_128_1351203235.318' 
    capture_lex $P5164
    .const 'Sub' $P5165 = 'cuid_130_1351203235.318' 
    capture_lex $P5165
    .const 'Sub' $P5166 = 'cuid_131_1351203235.318' 
    capture_lex $P5166
    .const 'Sub' $P5167 = 'cuid_132_1351203235.318' 
    capture_lex $P5167
    .const 'Sub' $P5168 = 'cuid_133_1351203235.318' 
    capture_lex $P5168
    .const 'Sub' $P5169 = 'cuid_134_1351203235.318' 
    capture_lex $P5169
    .const 'Sub' $P5170 = 'cuid_135_1351203235.318' 
    capture_lex $P5170
    .const 'Sub' $P5171 = 'cuid_136_1351203235.318' 
    capture_lex $P5171
    .const 'Sub' $P5172 = 'cuid_137_1351203235.318' 
    capture_lex $P5172
    .const 'Sub' $P5173 = 'cuid_138_1351203235.318' 
    capture_lex $P5173
    .const 'Sub' $P5174 = 'cuid_139_1351203235.318' 
    capture_lex $P5174
    .const 'Sub' $P5175 = 'cuid_140_1351203235.318' 
    capture_lex $P5175
    .const 'Sub' $P5176 = 'cuid_141_1351203235.318' 
    capture_lex $P5176
    .const 'Sub' $P5177 = 'cuid_142_1351203235.318' 
    capture_lex $P5177
    .const 'Sub' $P5178 = 'cuid_143_1351203235.318' 
    capture_lex $P5178
    .const 'Sub' $P5179 = 'cuid_144_1351203235.318' 
    capture_lex $P5179
    .const 'Sub' $P5180 = 'cuid_145_1351203235.318' 
    capture_lex $P5180
    .const 'Sub' $P5181 = 'cuid_146_1351203235.318' 
    capture_lex $P5181
    .const 'Sub' $P5182 = 'cuid_147_1351203235.318' 
    capture_lex $P5182
    .const 'Sub' $P5183 = 'cuid_148_1351203235.318' 
    capture_lex $P5183
    .const 'Sub' $P5184 = 'cuid_149_1351203235.318' 
    capture_lex $P5184
    .const 'Sub' $P5185 = 'cuid_150_1351203235.318' 
    capture_lex $P5185
    .const 'Sub' $P5186 = 'cuid_151_1351203235.318' 
    capture_lex $P5186
    .const 'Sub' $P5187 = 'cuid_152_1351203235.318' 
    capture_lex $P5187
    .const 'Sub' $P5188 = 'cuid_153_1351203235.318' 
    capture_lex $P5188
    .const 'Sub' $P5189 = 'cuid_154_1351203235.318' 
    capture_lex $P5189
    .const 'Sub' $P5190 = 'cuid_155_1351203235.318' 
    capture_lex $P5190
    .const 'Sub' $P5191 = 'cuid_156_1351203235.318' 
    capture_lex $P5191
    .const 'Sub' $P5192 = 'cuid_157_1351203235.318' 
    capture_lex $P5192
    .const 'Sub' $P5193 = 'cuid_158_1351203235.318' 
    capture_lex $P5193
    .const 'Sub' $P5194 = 'cuid_159_1351203235.318' 
    capture_lex $P5194
    .const 'Sub' $P5195 = 'cuid_160_1351203235.318' 
    capture_lex $P5195
    .const 'Sub' $P5196 = 'cuid_161_1351203235.318' 
    capture_lex $P5196
    .const 'Sub' $P5197 = 'cuid_162_1351203235.318' 
    capture_lex $P5197
    .const 'Sub' $P5198 = 'cuid_163_1351203235.318' 
    capture_lex $P5198
    .const 'Sub' $P5199 = 'cuid_164_1351203235.318' 
    capture_lex $P5199
    .const 'Sub' $P5200 = 'cuid_165_1351203235.318' 
    capture_lex $P5200
    .const 'Sub' $P5201 = 'cuid_166_1351203235.318' 
    capture_lex $P5201
    .const 'Sub' $P5202 = 'cuid_167_1351203235.318' 
    capture_lex $P5202
    .const 'Sub' $P5203 = 'cuid_168_1351203235.318' 
    capture_lex $P5203
    .const 'Sub' $P5204 = 'cuid_169_1351203235.318' 
    capture_lex $P5204
    .const 'Sub' $P5205 = 'cuid_170_1351203235.318' 
    capture_lex $P5205
    .const 'Sub' $P5206 = 'cuid_171_1351203235.318' 
    capture_lex $P5206
    .const 'Sub' $P5207 = 'cuid_172_1351203235.318' 
    capture_lex $P5207
    .const 'Sub' $P5208 = 'cuid_173_1351203235.318' 
    capture_lex $P5208
    .const 'Sub' $P5209 = 'cuid_174_1351203235.318' 
    capture_lex $P5209
    .const 'Sub' $P5210 = 'cuid_175_1351203235.318' 
    capture_lex $P5210
    .const 'Sub' $P5211 = 'cuid_176_1351203235.318' 
    capture_lex $P5211
    .const 'Sub' $P5212 = 'cuid_177_1351203235.318' 
    capture_lex $P5212
    .const 'Sub' $P5213 = 'cuid_178_1351203235.318' 
    capture_lex $P5213
    .const 'Sub' $P5214 = 'cuid_179_1351203235.318' 
    capture_lex $P5214
    .const 'Sub' $P5215 = 'cuid_180_1351203235.318' 
    capture_lex $P5215
    .const 'Sub' $P5216 = 'cuid_181_1351203235.318' 
    capture_lex $P5216
    .const 'Sub' $P5217 = 'cuid_182_1351203235.318' 
    capture_lex $P5217
    .const 'Sub' $P5218 = 'cuid_183_1351203235.318' 
    capture_lex $P5218
    .const 'Sub' $P5219 = 'cuid_184_1351203235.318' 
    capture_lex $P5219
    .const 'Sub' $P5220 = 'cuid_185_1351203235.318' 
    capture_lex $P5220
    .const 'Sub' $P5221 = 'cuid_186_1351203235.318' 
    capture_lex $P5221
    .const 'Sub' $P5222 = 'cuid_187_1351203235.318' 
    capture_lex $P5222
    .const 'Sub' $P5223 = 'cuid_188_1351203235.318' 
    capture_lex $P5223
    .const 'Sub' $P5224 = 'cuid_189_1351203235.318' 
    capture_lex $P5224
    .const 'Sub' $P5225 = 'cuid_190_1351203235.318' 
    capture_lex $P5225
    .const 'Sub' $P5226 = 'cuid_191_1351203235.318' 
    capture_lex $P5226
    .const 'Sub' $P5227 = 'cuid_192_1351203235.318' 
    capture_lex $P5227
    .const 'Sub' $P5228 = 'cuid_193_1351203235.318' 
    capture_lex $P5228
    .const 'Sub' $P5229 = 'cuid_194_1351203235.318' 
    capture_lex $P5229
    .const 'Sub' $P5230 = 'cuid_195_1351203235.318' 
    capture_lex $P5230
    .const 'Sub' $P5231 = 'cuid_196_1351203235.318' 
    capture_lex $P5231
    .const 'Sub' $P5232 = 'cuid_197_1351203235.318' 
    capture_lex $P5232
    .const 'Sub' $P5233 = 'cuid_198_1351203235.318' 
    capture_lex $P5233
    .const 'Sub' $P5234 = 'cuid_199_1351203235.318' 
    capture_lex $P5234
    .const 'Sub' $P5235 = 'cuid_200_1351203235.318' 
    capture_lex $P5235
    .const 'Sub' $P5236 = 'cuid_201_1351203235.318' 
    capture_lex $P5236
    .const 'Sub' $P5237 = 'cuid_202_1351203235.318' 
    capture_lex $P5237
    .const 'Sub' $P5238 = 'cuid_203_1351203235.318' 
    capture_lex $P5238
    .const 'Sub' $P5239 = 'cuid_204_1351203235.318' 
    capture_lex $P5239
    .const 'Sub' $P5240 = 'cuid_205_1351203235.318' 
    capture_lex $P5240
    .const 'Sub' $P5241 = 'cuid_206_1351203235.318' 
    capture_lex $P5241
    .const 'Sub' $P5242 = 'cuid_207_1351203235.318' 
    capture_lex $P5242
    .const 'Sub' $P5243 = 'cuid_208_1351203235.318' 
    capture_lex $P5243
    .const 'Sub' $P5244 = 'cuid_209_1351203235.318' 
    capture_lex $P5244
    .const 'Sub' $P5245 = 'cuid_210_1351203235.318' 
    capture_lex $P5245
    .const 'Sub' $P5246 = 'cuid_211_1351203235.318' 
    capture_lex $P5246
    .const 'Sub' $P5247 = 'cuid_212_1351203235.318' 
    capture_lex $P5247
    .const 'Sub' $P5248 = 'cuid_213_1351203235.318' 
    capture_lex $P5248
    .const 'Sub' $P5249 = 'cuid_214_1351203235.318' 
    capture_lex $P5249
    .const 'Sub' $P5250 = 'cuid_215_1351203235.318' 
    capture_lex $P5250
    .const 'Sub' $P5251 = 'cuid_216_1351203235.318' 
    capture_lex $P5251
    .const 'Sub' $P5252 = 'cuid_217_1351203235.318' 
    capture_lex $P5252
    .const 'Sub' $P5253 = 'cuid_218_1351203235.318' 
    capture_lex $P5253
    .const 'Sub' $P5254 = 'cuid_219_1351203235.318' 
    capture_lex $P5254
    .const 'Sub' $P5255 = 'cuid_220_1351203235.318' 
    capture_lex $P5255
    .const 'Sub' $P5256 = 'cuid_221_1351203235.318' 
    capture_lex $P5256
    .const 'Sub' $P5257 = 'cuid_222_1351203235.318' 
    capture_lex $P5257
    .const 'Sub' $P5258 = 'cuid_223_1351203235.318' 
    capture_lex $P5258
    .return ($P5258) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_34_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 594
    .param pmc _lex_param_0 
    .lex "%*LANG", $P101 
    .lex "%*HOW", $P102 
    .lex "$file", $P103 
    .lex "$source_id", $P104 
    .lex "$*W", $P105 
    .lex "$*SCOPE", $P106 
    .lex "$*MULTINESS", $P107 
    .lex "$*PKGDECL", $P108 
    .lex "$*INVOCANT_OK", $P109 
    .lex "$*RETURN_USED", $P110 
    .lex "$*CONTROL_USED", $P111 
    .lex "%*HANDLERS", $P112 
    .lex "self", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P103, $P5003
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P104, $P5004
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P105, $P5005
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P106, $P5006
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P107, $P5007
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P108, $P5008
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P109, $P5009
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P110, $P5010
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P111, $P5011
    new $P5012, 'Hash'
    set $P112, $P5012
    unless_null $P101, fallback294
    nqp_get_sc_object $P5022, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["%LANG"]
    unless_null $P5020, fallback295
    nqp_get_sc_object $P5024, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5023, $P5024
    new $P5025, 'Hash'
    set $P5023["%LANG"], $P5025
    set $P5020, $P5025
  fallback295:
    unless_null $P5020, vivi_58296
    die "Contextual %*LANG not found"
    box $P5026, "Contextual %*LANG not found"
    set $P5020, $P5026
  vivi_58296:
    set $P101, $P5020
  fallback294:
    nqp_get_sc_object $P5030, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5029, $P5030, "NQP"
    get_who $P5028, $P5029
    set $P5027, $P5028["Regex"]
    unless_null $P5027, fallback297
    nqp_get_sc_object $P5031, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5027, $P5031
  fallback297:
    set $P101["Regex"], $P5027
    unless_null $P101, fallback298
    nqp_get_sc_object $P5034, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%LANG"]
    unless_null $P5032, fallback299
    nqp_get_sc_object $P5036, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%LANG"], $P5037
    set $P5032, $P5037
  fallback299:
    unless_null $P5032, vivi_59300
    die "Contextual %*LANG not found"
    box $P5038, "Contextual %*LANG not found"
    set $P5032, $P5038
  vivi_59300:
    set $P101, $P5032
  fallback298:
    nqp_get_sc_object $P5042, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5041, $P5042, "NQP"
    get_who $P5040, $P5041
    set $P5039, $P5040["RegexActions"]
    unless_null $P5039, fallback301
    nqp_get_sc_object $P5043, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5039, $P5043
  fallback301:
    set $P101["Regex-actions"], $P5039
    unless_null $P101, fallback302
    nqp_get_sc_object $P5046, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["%LANG"]
    unless_null $P5044, fallback303
    nqp_get_sc_object $P5048, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5047, $P5048
    new $P5049, 'Hash'
    set $P5047["%LANG"], $P5049
    set $P5044, $P5049
  fallback303:
    unless_null $P5044, vivi_60304
    die "Contextual %*LANG not found"
    box $P5050, "Contextual %*LANG not found"
    set $P5044, $P5050
  vivi_60304:
    set $P101, $P5044
  fallback302:
    nqp_get_sc_object $P5054, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5053, $P5054, "NQP"
    get_who $P5052, $P5053
    set $P5051, $P5052["Grammar"]
    unless_null $P5051, fallback305
    nqp_get_sc_object $P5055, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5051, $P5055
  fallback305:
    set $P101["MAIN"], $P5051
    unless_null $P101, fallback306
    nqp_get_sc_object $P5058, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5057, $P5058
    set $P5056, $P5057["%LANG"]
    unless_null $P5056, fallback307
    nqp_get_sc_object $P5060, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5059, $P5060
    new $P5061, 'Hash'
    set $P5059["%LANG"], $P5061
    set $P5056, $P5061
  fallback307:
    unless_null $P5056, vivi_61308
    die "Contextual %*LANG not found"
    box $P5062, "Contextual %*LANG not found"
    set $P5056, $P5062
  vivi_61308:
    set $P101, $P5056
  fallback306:
    nqp_get_sc_object $P5066, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5065, $P5066, "NQP"
    get_who $P5064, $P5065
    set $P5063, $P5064["Actions"]
    unless_null $P5063, fallback309
    nqp_get_sc_object $P5067, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5063, $P5067
  fallback309:
    set $P101["MAIN-actions"], $P5063
    unless_null $P102, fallback313
    nqp_get_sc_object $P5077, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["%HOW"]
    unless_null $P5075, fallback314
    nqp_get_sc_object $P5079, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5078, $P5079
    new $P5080, 'Hash'
    set $P5078["%HOW"], $P5080
    set $P5075, $P5080
  fallback314:
    unless_null $P5075, vivi_63315
    die "Contextual %*HOW not found"
    box $P5081, "Contextual %*HOW not found"
    set $P5075, $P5081
  vivi_63315:
    set $P102, $P5075
  fallback313:
    get_knowhow $P5082
    set $P102["knowhow"], $P5082
    unless_null $P102, fallback316
    nqp_get_sc_object $P5085, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["%HOW"]
    unless_null $P5083, fallback317
    nqp_get_sc_object $P5087, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5086, $P5087
    new $P5088, 'Hash'
    set $P5086["%HOW"], $P5088
    set $P5083, $P5088
  fallback317:
    unless_null $P5083, vivi_64318
    die "Contextual %*HOW not found"
    box $P5089, "Contextual %*HOW not found"
    set $P5083, $P5089
  vivi_64318:
    set $P102, $P5083
  fallback316:
    get_knowhow_attribute $P5090
    set $P102["knowhow-attr"], $P5090
    find_caller_lex $P5091, "$?FILES"
    set $P103, $P5091
    nqp_decontainerize $P5092, _lex_param_0
    find_lex $P5095, "$?PACKAGE"
    get_who $P5094, $P5095
    set $P5093, $P5094["NQPCursor"]
    unless_null $P5093, fallback319
    nqp_get_sc_object $P5098, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5097, $P5098
    set $P5096, $P5097["NQPCursor"]
    unless_null $P5096, vivi_65320
    nqp_get_sc_object $P5099, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5096, $P5099
  vivi_65320:
    set $P5093, $P5096
  fallback319:
    repr_get_attr_str $S5004, $P5092, $P5093, "$!target"
    nqp_sha1 $S5003, $S5004
    concat $S5002, $S5003, "-"
    time $N5001
    set $S5005, $N5001
    concat $S5001, $S5002, $S5005
    box $P5100, $S5001
    set $P104, $P5100
    isnull $I5001, $P103
    unless $I5001 goto if66_else321 
.annotate 'line', 616
    nqp_get_sc_object $P5104, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5103, $P5104, "NQP"
    get_who $P5102, $P5103
    set $P5101, $P5102["World"]
    unless_null $P5101, fallback323
    nqp_get_sc_object $P5105, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5101, $P5105
  fallback323:
    $P5106 = $P5101."new"($P104 :named("handle"))
    set $P5113, $P5106
    goto if66_end322
  if66_else321:
.annotate 'line', 617
    nqp_get_sc_object $P5110, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5109, $P5110, "NQP"
    get_who $P5108, $P5109
    set $P5107, $P5108["World"]
    unless_null $P5107, fallback324
    nqp_get_sc_object $P5111, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5107, $P5111
  fallback324:
    $P5112 = $P5107."new"($P104 :named("handle"), $P103 :named("description"))
    set $P5113, $P5112
  if66_end322:
    set $P105, $P5113
    box $P5114, ""
    set $P106, $P5114
    box $P5115, ""
    set $P107, $P5115
    box $P5116, ""
    set $P108, $P5116
    box $P5117, 0
    set $P109, $P5117
    box $P5118, 0
    set $P110, $P5118
    box $P5119, 0
    set $P111, $P5119
.annotate 'line', 626
    nqp_decontainerize $P5127, _lex_param_0
    $P5128 = $P5127."comp_unit"()
    .return ($P5128) 
.end
.HLL "nqp"
.namespace []
.sub "identifier" :subid("cuid_35_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 631
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx68_tgt
    .local int rx68_pos
    .local int rx68_off
    .local int rx68_eos
    .local int rx68_rep
    .local pmc rx68_cur
    .local pmc rx68_curclass
    .local pmc rx68_bstack
    .local pmc rx68_cstack
    (rx68_cur, rx68_tgt, rx68_pos, rx68_curclass, rx68_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx68_cur
    length rx68_eos, rx68_tgt
    eq $I19, 1, rx68_restart330
    gt rx68_pos, rx68_eos, rx68_fail331
    repr_get_attr_int $I11, self, rx68_curclass, "$!from"
    ne $I11, -1, rxscan69_done337
    goto rxscan69_scan336
  rxscan69_loop335:
    inc rx68_pos
    gt rx68_pos, rx68_eos, rx68_fail331
    repr_bind_attr_int rx68_cur, rx68_curclass, "$!from", rx68_pos
  rxscan69_scan336:
    nqp_rxmark rx68_bstack, rxscan69_loop335, rx68_pos, 0
  rxscan69_done337:
    repr_bind_attr_int rx68_cur, rx68_curclass, "$!pos", rx68_pos
    $P11 = rx68_cur."ident"()
    repr_get_attr_int $I11, $P11, rx68_curclass, "$!pos"
    lt $I11, 0, rx68_fail331
    repr_get_attr_int rx68_pos, $P11, rx68_curclass, "$!pos"
    nqp_rxmark rx68_bstack, rxquantr71_done340, rx68_pos, 0
  rxquantr71_loop339:
  alt72_0342:
    nqp_rxmark rx68_bstack, alt72_1343, rx68_pos, 0
    add $I11, rx68_pos, 1
    gt $I11, rx68_eos, rx68_fail331
    substr $S10, rx68_tgt, rx68_pos, 1
    ne $S10, ucs4:"-", rx68_fail331
    add rx68_pos, 1
    goto alt72_end341
  alt72_1343:
    ge rx68_pos, rx68_eos, rx68_fail331
    substr $S11, rx68_tgt, rx68_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx68_fail331
    inc rx68_pos
  alt72_end341:
    repr_bind_attr_int rx68_cur, rx68_curclass, "$!pos", rx68_pos
    $P11 = rx68_cur."ident"()
    repr_get_attr_int $I11, $P11, rx68_curclass, "$!pos"
    lt $I11, 0, rx68_fail331
    repr_get_attr_int rx68_pos, $P11, rx68_curclass, "$!pos"
    nqp_rxpeek $I19, rx68_bstack, rxquantr71_done340
    inc $I19
    inc $I19
    set rx68_rep, rx68_bstack[$I19]
    nqp_rxcommit rx68_bstack, rxquantr71_done340
    inc rx68_rep
    nqp_rxmark rx68_bstack, rxquantr71_done340, rx68_pos, rx68_rep
    goto rxquantr71_loop339
  rxquantr71_done340:
    rx68_cur."!cursor_pass"(rx68_pos, "identifier", 'backtrack'=>1)
    .return (rx68_cur)
  rx68_restart330:
    repr_get_attr_obj rx68_cstack, rx68_cur, rx68_curclass, "$!cstack"
  rx68_fail331:
    unless rx68_bstack, rx68_done329
    pop $I19, rx68_bstack
    if_null rx68_cstack, rx68_cstack_done334
    unless rx68_cstack, rx68_cstack_done334
    dec $I19
    set $P11, rx68_cstack[$I19]
  rx68_cstack_done334:
    pop rx68_rep, rx68_bstack
    pop rx68_pos, rx68_bstack
    pop $I19, rx68_bstack
    lt rx68_pos, -1, rx68_done329
    lt rx68_pos, 0, rx68_fail331
    eq $I19, 0, rx68_fail331
    nqp_islist $I20, rx68_cstack
    unless $I20, rx68_jump332
    elements $I18, rx68_bstack
    le $I18, 0, rx68_cut333
    dec $I18
    set $I18, rx68_bstack[$I18]
  rx68_cut333:
    assign rx68_cstack, $I18
  rx68_jump332:
    jump $I19
  rx68_done329:
    rx68_cur."!cursor_fail"()
    .return (rx68_cur) 
.end
.HLL "nqp"
.namespace []
.sub "name" :subid("cuid_36_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 633
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx74_tgt
    .local int rx74_pos
    .local int rx74_off
    .local int rx74_eos
    .local int rx74_rep
    .local pmc rx74_cur
    .local pmc rx74_curclass
    .local pmc rx74_bstack
    .local pmc rx74_cstack
    (rx74_cur, rx74_tgt, rx74_pos, rx74_curclass, rx74_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx74_cur
    length rx74_eos, rx74_tgt
    eq $I19, 1, rx74_restart347
    gt rx74_pos, rx74_eos, rx74_fail348
    repr_get_attr_int $I11, self, rx74_curclass, "$!from"
    ne $I11, -1, rxscan75_done354
    goto rxscan75_scan353
  rxscan75_loop352:
    inc rx74_pos
    gt rx74_pos, rx74_eos, rx74_fail348
    repr_bind_attr_int rx74_cur, rx74_curclass, "$!from", rx74_pos
  rxscan75_scan353:
    nqp_rxmark rx74_bstack, rxscan75_loop352, rx74_pos, 0
  rxscan75_done354:
    repr_bind_attr_int rx74_cur, rx74_curclass, "$!pos", rx74_pos
    $P11 = rx74_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx74_curclass, "$!pos"
    lt $I11, 0, rx74_fail348
    nqp_rxmark rx74_bstack, rxsubrule76_pass355, -1, 0
  rxsubrule76_pass355:
    rx74_cstack = rx74_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx74_pos, $P11, rx74_curclass, "$!pos"
    nqp_rxmark rx74_bstack, rxquantr77_done357, rx74_pos, 0
  rxquantr77_loop356:
    add $I11, rx74_pos, 2
    gt $I11, rx74_eos, rx74_fail348
    substr $S10, rx74_tgt, rx74_pos, 2
    ne $S10, ucs4:"::", rx74_fail348
    add rx74_pos, 2
    repr_bind_attr_int rx74_cur, rx74_curclass, "$!pos", rx74_pos
    $P11 = rx74_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx74_curclass, "$!pos"
    lt $I11, 0, rx74_fail348
    nqp_rxmark rx74_bstack, rxsubrule78_pass358, -1, 0
  rxsubrule78_pass358:
    rx74_cstack = rx74_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx74_pos, $P11, rx74_curclass, "$!pos"
    nqp_rxpeek $I19, rx74_bstack, rxquantr77_done357
    inc $I19
    inc $I19
    set rx74_rep, rx74_bstack[$I19]
    nqp_rxcommit rx74_bstack, rxquantr77_done357
    inc rx74_rep
    nqp_rxmark rx74_bstack, rxquantr77_done357, rx74_pos, rx74_rep
    goto rxquantr77_loop356
  rxquantr77_done357:
    rx74_cur."!cursor_pass"(rx74_pos, "name", 'backtrack'=>1)
    .return (rx74_cur)
  rx74_restart347:
    repr_get_attr_obj rx74_cstack, rx74_cur, rx74_curclass, "$!cstack"
  rx74_fail348:
    unless rx74_bstack, rx74_done346
    pop $I19, rx74_bstack
    if_null rx74_cstack, rx74_cstack_done351
    unless rx74_cstack, rx74_cstack_done351
    dec $I19
    set $P11, rx74_cstack[$I19]
  rx74_cstack_done351:
    pop rx74_rep, rx74_bstack
    pop rx74_pos, rx74_bstack
    pop $I19, rx74_bstack
    lt rx74_pos, -1, rx74_done346
    lt rx74_pos, 0, rx74_fail348
    eq $I19, 0, rx74_fail348
    nqp_islist $I20, rx74_cstack
    unless $I20, rx74_jump349
    elements $I18, rx74_bstack
    le $I18, 0, rx74_cut350
    dec $I18
    set $I18, rx74_bstack[$I18]
  rx74_cut350:
    assign rx74_cstack, $I18
  rx74_jump349:
    jump $I19
  rx74_done346:
    rx74_cur."!cursor_fail"()
    .return (rx74_cur) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_37_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 635
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx79_tgt
    .local int rx79_pos
    .local int rx79_off
    .local int rx79_eos
    .local int rx79_rep
    .local pmc rx79_cur
    .local pmc rx79_curclass
    .local pmc rx79_bstack
    .local pmc rx79_cstack
    (rx79_cur, rx79_tgt, rx79_pos, rx79_curclass, rx79_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx79_cur
    length rx79_eos, rx79_tgt
    eq $I19, 1, rx79_restart361
    gt rx79_pos, rx79_eos, rx79_fail362
    repr_get_attr_int $I11, self, rx79_curclass, "$!from"
    ne $I11, -1, rxscan80_done368
    goto rxscan80_scan367
  rxscan80_loop366:
    inc rx79_pos
    gt rx79_pos, rx79_eos, rx79_fail362
    repr_bind_attr_int rx79_cur, rx79_curclass, "$!from", rx79_pos
  rxscan80_scan367:
    nqp_rxmark rx79_bstack, rxscan80_loop366, rx79_pos, 0
  rxscan80_done368:
    repr_bind_attr_int rx79_cur, rx79_curclass, "$!pos", rx79_pos
    $P11 = rx79_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx79_curclass, "$!pos"
    lt $I11, 0, rx79_fail362
    nqp_rxmark rx79_bstack, rxsubrule81_pass369, -1, 0
  rxsubrule81_pass369:
    rx79_cstack = rx79_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx79_pos, $P11, rx79_curclass, "$!pos"
    nqp_rxmark rx79_bstack, rxquantr82_done371, rx79_pos, 0
  rxquantr82_loop370:
    repr_bind_attr_int rx79_cur, rx79_curclass, "$!pos", rx79_pos
    $P11 = rx79_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx79_curclass, "$!pos"
    lt $I11, 0, rx79_fail362
    goto rxsubrule83_pass372
  rxsubrule83_back373:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx79_curclass, "$!pos"
    lt $I11, 0, rx79_fail362
  rxsubrule83_pass372:
    rx79_cstack = rx79_cur."!cursor_capture"($P11, "colonpair")
    set_addr $I11, rxsubrule83_back373
    push rx79_bstack, $I11
    push rx79_bstack, 0
    push rx79_bstack, rx79_pos
    elements $I11, rx79_cstack
    push rx79_bstack, $I11
    repr_get_attr_int rx79_pos, $P11, rx79_curclass, "$!pos"
    nqp_rxpeek $I19, rx79_bstack, rxquantr82_done371
    inc $I19
    inc $I19
    set rx79_rep, rx79_bstack[$I19]
    nqp_rxcommit rx79_bstack, rxquantr82_done371
    inc rx79_rep
  rxquantr82_done371:
    rx79_cur."!cursor_pass"(rx79_pos, "deflongname", 'backtrack'=>1)
    .return (rx79_cur)
  rx79_restart361:
    repr_get_attr_obj rx79_cstack, rx79_cur, rx79_curclass, "$!cstack"
  rx79_fail362:
    unless rx79_bstack, rx79_done360
    pop $I19, rx79_bstack
    if_null rx79_cstack, rx79_cstack_done365
    unless rx79_cstack, rx79_cstack_done365
    dec $I19
    set $P11, rx79_cstack[$I19]
  rx79_cstack_done365:
    pop rx79_rep, rx79_bstack
    pop rx79_pos, rx79_bstack
    pop $I19, rx79_bstack
    lt rx79_pos, -1, rx79_done360
    lt rx79_pos, 0, rx79_fail362
    eq $I19, 0, rx79_fail362
    nqp_islist $I20, rx79_cstack
    unless $I20, rx79_jump363
    elements $I18, rx79_bstack
    le $I18, 0, rx79_cut364
    dec $I18
    set $I18, rx79_bstack[$I18]
  rx79_cut364:
    assign rx79_cstack, $I18
  rx79_jump363:
    jump $I19
  rx79_done360:
    rx79_cur."!cursor_fail"()
    .return (rx79_cur) 
.end
.HLL "nqp"
.namespace []
.sub "ENDSTMT" :subid("cuid_38_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 639
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx84_tgt
    .local int rx84_pos
    .local int rx84_off
    .local int rx84_eos
    .local int rx84_rep
    .local pmc rx84_cur
    .local pmc rx84_curclass
    .local pmc rx84_bstack
    .local pmc rx84_cstack
    (rx84_cur, rx84_tgt, rx84_pos, rx84_curclass, rx84_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx84_cur
    length rx84_eos, rx84_tgt
    eq $I19, 1, rx84_restart376
    gt rx84_pos, rx84_eos, rx84_fail377
    repr_get_attr_int $I11, self, rx84_curclass, "$!from"
    ne $I11, -1, rxscan85_done383
    goto rxscan85_scan382
  rxscan85_loop381:
    inc rx84_pos
    gt rx84_pos, rx84_eos, rx84_fail377
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!from", rx84_pos
  rxscan85_scan382:
    nqp_rxmark rx84_bstack, rxscan85_loop381, rx84_pos, 0
  rxscan85_done383:
    nqp_rxmark rx84_bstack, rxquantr86_done385, rx84_pos, 0
  rxquantr86_loop384:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt87_0387
    nqp_push_label $P11, alt87_1392
    nqp_rxmark rx84_bstack, alt87_end386, -1, 0
    rx84_cur."!alt"(rx84_pos, "alt_nfa__1_1351203236.448", $P11)
    goto rx84_fail377
  alt87_0387:
    nqp_rxmark rx84_bstack, rxquantr88_done389, rx84_pos, 0
  rxquantr88_loop388:
    ge rx84_pos, rx84_eos, rx84_fail377
    substr $S11, rx84_tgt, rx84_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx84_fail377
    inc rx84_pos
    nqp_rxpeek $I19, rx84_bstack, rxquantr88_done389
    inc $I19
    inc $I19
    set rx84_rep, rx84_bstack[$I19]
    nqp_rxcommit rx84_bstack, rxquantr88_done389
    inc rx84_rep
    nqp_rxmark rx84_bstack, rxquantr88_done389, rx84_pos, rx84_rep
    goto rxquantr88_loop388
  rxquantr88_done389:
    is_cclass $I11, .CCLASS_NEWLINE, rx84_tgt, rx84_pos
    if $I11, rxanchor89_done390
    ne rx84_pos, rx84_eos, rx84_fail377
    eq rx84_pos, 0, rxanchor89_done390
    sub $I11, rx84_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx84_tgt, $I11
    if $I11, rx84_fail377
  rxanchor89_done390:
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."ws"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail377
    repr_get_attr_int rx84_pos, $P11, rx84_curclass, "$!pos"
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail377
    goto alt87_end386
  alt87_1392:
    nqp_rxmark rx84_bstack, rxquantr91_done394, rx84_pos, 0
  rxquantr91_loop393:
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."unv"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail377
    goto rxsubrule92_pass395
  rxsubrule92_back396:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail377
  rxsubrule92_pass395:
    rx84_cstack = rx84_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule92_back396
    push rx84_bstack, $I11
    push rx84_bstack, 0
    push rx84_bstack, rx84_pos
    elements $I11, rx84_cstack
    push rx84_bstack, $I11
    repr_get_attr_int rx84_pos, $P11, rx84_curclass, "$!pos"
    nqp_rxpeek $I19, rx84_bstack, rxquantr91_done394
    inc $I19
    inc $I19
    set rx84_rep, rx84_bstack[$I19]
    nqp_rxcommit rx84_bstack, rxquantr91_done394
    inc rx84_rep
  rxquantr91_done394:
    is_cclass $I11, .CCLASS_NEWLINE, rx84_tgt, rx84_pos
    if $I11, rxanchor93_done397
    ne rx84_pos, rx84_eos, rx84_fail377
    eq rx84_pos, 0, rxanchor93_done397
    sub $I11, rx84_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx84_tgt, $I11
    if $I11, rx84_fail377
  rxanchor93_done397:
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."ws"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail377
    repr_get_attr_int rx84_pos, $P11, rx84_curclass, "$!pos"
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail377
    goto alt87_end386
  alt87_end386:
    nqp_rxpeek $I19, rx84_bstack, rxquantr86_done385
    inc $I19
    inc $I19
    set rx84_rep, rx84_bstack[$I19]
    nqp_rxcommit rx84_bstack, rxquantr86_done385
    inc rx84_rep
  rxquantr86_done385:
    rx84_cur."!cursor_pass"(rx84_pos, "ENDSTMT", 'backtrack'=>1)
    .return (rx84_cur)
  rx84_restart376:
    repr_get_attr_obj rx84_cstack, rx84_cur, rx84_curclass, "$!cstack"
  rx84_fail377:
    unless rx84_bstack, rx84_done375
    pop $I19, rx84_bstack
    if_null rx84_cstack, rx84_cstack_done380
    unless rx84_cstack, rx84_cstack_done380
    dec $I19
    set $P11, rx84_cstack[$I19]
  rx84_cstack_done380:
    pop rx84_rep, rx84_bstack
    pop rx84_pos, rx84_bstack
    pop $I19, rx84_bstack
    lt rx84_pos, -1, rx84_done375
    lt rx84_pos, 0, rx84_fail377
    eq $I19, 0, rx84_fail377
    nqp_islist $I20, rx84_cstack
    unless $I20, rx84_jump378
    elements $I18, rx84_bstack
    le $I18, 0, rx84_cut379
    dec $I18
    set $I18, rx84_bstack[$I18]
  rx84_cut379:
    assign rx84_cstack, $I18
  rx84_jump378:
    jump $I19
  rx84_done375:
    rx84_cur."!cursor_fail"()
    .return (rx84_cur) 
.end
.HLL "nqp"
.namespace []
.sub "ws" :subid("cuid_39_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 646
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx95_tgt
    .local int rx95_pos
    .local int rx95_off
    .local int rx95_eos
    .local int rx95_rep
    .local pmc rx95_cur
    .local pmc rx95_curclass
    .local pmc rx95_bstack
    .local pmc rx95_cstack
    (rx95_cur, rx95_tgt, rx95_pos, rx95_curclass, rx95_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx95_cur
    length rx95_eos, rx95_tgt
    eq $I19, 1, rx95_restart401
    gt rx95_pos, rx95_eos, rx95_fail402
    repr_get_attr_int $I11, self, rx95_curclass, "$!from"
    ne $I11, -1, rxscan96_done408
    goto rxscan96_scan407
  rxscan96_loop406:
    inc rx95_pos
    gt rx95_pos, rx95_eos, rx95_fail402
    repr_bind_attr_int rx95_cur, rx95_curclass, "$!from", rx95_pos
  rxscan96_scan407:
    nqp_rxmark rx95_bstack, rxscan96_loop406, rx95_pos, 0
  rxscan96_done408:
  alt97_0410:
    nqp_rxmark rx95_bstack, alt97_1411, rx95_pos, 0
    repr_bind_attr_int rx95_cur, rx95_curclass, "$!pos", rx95_pos
    $P11 = rx95_cur."MARKED"("ws")
    repr_get_attr_int $I11, $P11, rx95_curclass, "$!pos"
    lt $I11, 0, rx95_fail402
    goto alt97_end409
  alt97_1411:
    repr_bind_attr_int rx95_cur, rx95_curclass, "$!pos", rx95_pos
    $P11 = rx95_cur."ww"()
    repr_get_attr_int $I11, $P11, rx95_curclass, "$!pos"
    ge $I11, 0, rx95_fail402
    nqp_rxmark rx95_bstack, rxquantr98_done413, rx95_pos, 0
  rxquantr98_loop412:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt99_0415
    nqp_push_label $P11, alt99_1418
    nqp_push_label $P11, alt99_2421
    nqp_push_label $P11, alt99_3424
    nqp_rxmark rx95_bstack, alt99_end414, -1, 0
    rx95_cur."!alt"(rx95_pos, "alt_nfa__2_1351203236.464", $P11)
    goto rx95_fail402
  alt99_0415:
    nqp_rxmark rx95_bstack, rxquantr100_done417, -1, 0
  rxquantr100_loop416:
    ge rx95_pos, rx95_eos, rx95_fail402
    substr $S11, rx95_tgt, rx95_pos, 1
    index $I11, ucs4:"\n\x{b}\f\r\x{85}\u2028\u2029", $S11
    lt $I11, 0, rx95_fail402
    inc rx95_pos
    nqp_rxpeek $I19, rx95_bstack, rxquantr100_done417
    inc $I19
    inc $I19
    set rx95_rep, rx95_bstack[$I19]
    nqp_rxcommit rx95_bstack, rxquantr100_done417
    inc rx95_rep
    nqp_rxmark rx95_bstack, rxquantr100_done417, rx95_pos, rx95_rep
    goto rxquantr100_loop416
  rxquantr100_done417:
    goto alt99_end414
  alt99_1418:
    add $I11, rx95_pos, 1
    gt $I11, rx95_eos, rx95_fail402
    substr $S10, rx95_tgt, rx95_pos, 1
    ne $S10, ucs4:"#", rx95_fail402
    add rx95_pos, 1
    nqp_rxmark rx95_bstack, rxquantr101_done420, rx95_pos, 0
  rxquantr101_loop419:
    ge rx95_pos, rx95_eos, rx95_fail402
    is_cclass $I11, .CCLASS_NEWLINE, rx95_tgt, rx95_pos
    if $I11, rx95_fail402
    add rx95_pos, 1
    nqp_rxpeek $I19, rx95_bstack, rxquantr101_done420
    inc $I19
    inc $I19
    set rx95_rep, rx95_bstack[$I19]
    nqp_rxcommit rx95_bstack, rxquantr101_done420
    inc rx95_rep
    nqp_rxmark rx95_bstack, rxquantr101_done420, rx95_pos, rx95_rep
    goto rxquantr101_loop419
  rxquantr101_done420:
    goto alt99_end414
  alt99_2421:
    eq rx95_pos, 0, rxanchor102_done422
    ge rx95_pos, rx95_eos, rx95_fail402
    sub $I11, rx95_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx95_tgt, $I11
    unless $I11, rx95_fail402
  rxanchor102_done422:
    repr_bind_attr_int rx95_cur, rx95_curclass, "$!pos", rx95_pos
    $P11 = rx95_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx95_curclass, "$!pos"
    lt $I11, 0, rx95_fail402
    repr_get_attr_int rx95_pos, $P11, rx95_curclass, "$!pos"
    goto alt99_end414
  alt99_3424:
    nqp_rxmark rx95_bstack, rxquantr104_done426, -1, 0
  rxquantr104_loop425:
    ge rx95_pos, rx95_eos, rx95_fail402
    substr $S11, rx95_tgt, rx95_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx95_fail402
    inc rx95_pos
    nqp_rxpeek $I19, rx95_bstack, rxquantr104_done426
    inc $I19
    inc $I19
    set rx95_rep, rx95_bstack[$I19]
    nqp_rxcommit rx95_bstack, rxquantr104_done426
    inc rx95_rep
    nqp_rxmark rx95_bstack, rxquantr104_done426, rx95_pos, rx95_rep
    goto rxquantr104_loop425
  rxquantr104_done426:
    goto alt99_end414
  alt99_end414:
    nqp_rxpeek $I19, rx95_bstack, rxquantr98_done413
    inc $I19
    inc $I19
    set rx95_rep, rx95_bstack[$I19]
    nqp_rxcommit rx95_bstack, rxquantr98_done413
    inc rx95_rep
    nqp_rxmark rx95_bstack, rxquantr98_done413, rx95_pos, rx95_rep
    goto rxquantr98_loop412
  rxquantr98_done413:
    repr_bind_attr_int rx95_cur, rx95_curclass, "$!pos", rx95_pos
    $P11 = rx95_cur."MARKER"("ws")
    repr_get_attr_int $I11, $P11, rx95_curclass, "$!pos"
    lt $I11, 0, rx95_fail402
  alt97_end409:
    rx95_cur."!cursor_pass"(rx95_pos, "ws", 'backtrack'=>1)
    .return (rx95_cur)
  rx95_restart401:
    repr_get_attr_obj rx95_cstack, rx95_cur, rx95_curclass, "$!cstack"
  rx95_fail402:
    unless rx95_bstack, rx95_done400
    pop $I19, rx95_bstack
    if_null rx95_cstack, rx95_cstack_done405
    unless rx95_cstack, rx95_cstack_done405
    dec $I19
    set $P11, rx95_cstack[$I19]
  rx95_cstack_done405:
    pop rx95_rep, rx95_bstack
    pop rx95_pos, rx95_bstack
    pop $I19, rx95_bstack
    lt rx95_pos, -1, rx95_done400
    lt rx95_pos, 0, rx95_fail402
    eq $I19, 0, rx95_fail402
    nqp_islist $I20, rx95_cstack
    unless $I20, rx95_jump403
    elements $I18, rx95_bstack
    le $I18, 0, rx95_cut404
    dec $I18
    set $I18, rx95_bstack[$I18]
  rx95_cut404:
    assign rx95_cstack, $I18
  rx95_jump403:
    jump $I19
  rx95_done400:
    rx95_cur."!cursor_fail"()
    .return (rx95_cur) 
.end
.HLL "nqp"
.namespace []
.sub "unv" :subid("cuid_40_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 657
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_41_1351203235.318' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx105_tgt
    .local int rx105_pos
    .local int rx105_off
    .local int rx105_eos
    .local int rx105_rep
    .local pmc rx105_cur
    .local pmc rx105_curclass
    .local pmc rx105_bstack
    .local pmc rx105_cstack
    (rx105_cur, rx105_tgt, rx105_pos, rx105_curclass, rx105_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx105_cur
    length rx105_eos, rx105_tgt
    eq $I19, 1, rx105_restart429
    gt rx105_pos, rx105_eos, rx105_fail430
    repr_get_attr_int $I11, self, rx105_curclass, "$!from"
    ne $I11, -1, rxscan106_done436
    goto rxscan106_scan435
  rxscan106_loop434:
    inc rx105_pos
    gt rx105_pos, rx105_eos, rx105_fail430
    repr_bind_attr_int rx105_cur, rx105_curclass, "$!from", rx105_pos
  rxscan106_scan435:
    nqp_rxmark rx105_bstack, rxscan106_loop434, rx105_pos, 0
  rxscan106_done436:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt107_0438
    nqp_push_label $P11, alt107_1456
    nqp_push_label $P11, alt107_2461
    nqp_rxmark rx105_bstack, alt107_end437, -1, 0
    rx105_cur."!alt"(rx105_pos, "alt_nfa__4_1351203236.481", $P11)
    goto rx105_fail430
  alt107_0438:
    eq rx105_pos, 0, rxanchor108_done439
    ge rx105_pos, rx105_eos, rx105_fail430
    sub $I11, rx105_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx105_tgt, $I11
    unless $I11, rx105_fail430
  rxanchor108_done439:
    .const 'Sub' $P5001 = 'cuid_41_1351203235.318' 
    capture_lex $P5001
    repr_bind_attr_int rx105_cur, rx105_curclass, "$!pos", rx105_pos
    $P11 = rx105_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx105_curclass, "$!pos"
    lt $I11, 0, rx105_fail430
    repr_bind_attr_int rx105_cur, rx105_curclass, "$!pos", rx105_pos
    $P11 = rx105_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx105_curclass, "$!pos"
    lt $I11, 0, rx105_fail430
    repr_get_attr_int rx105_pos, $P11, rx105_curclass, "$!pos"
    goto alt107_end437
  alt107_1456:
    nqp_rxmark rx105_bstack, rxquantr114_done458, rx105_pos, 0
  rxquantr114_loop457:
    ge rx105_pos, rx105_eos, rx105_fail430
    substr $S11, rx105_tgt, rx105_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx105_fail430
    inc rx105_pos
    nqp_rxpeek $I19, rx105_bstack, rxquantr114_done458
    inc $I19
    inc $I19
    set rx105_rep, rx105_bstack[$I19]
    nqp_rxcommit rx105_bstack, rxquantr114_done458
    inc rx105_rep
    nqp_rxmark rx105_bstack, rxquantr114_done458, rx105_pos, rx105_rep
    goto rxquantr114_loop457
  rxquantr114_done458:
    add $I11, rx105_pos, 1
    gt $I11, rx105_eos, rx105_fail430
    substr $S10, rx105_tgt, rx105_pos, 1
    ne $S10, ucs4:"#", rx105_fail430
    add rx105_pos, 1
    nqp_rxmark rx105_bstack, rxquantr115_done460, rx105_pos, 0
  rxquantr115_loop459:
    ge rx105_pos, rx105_eos, rx105_fail430
    is_cclass $I11, .CCLASS_NEWLINE, rx105_tgt, rx105_pos
    if $I11, rx105_fail430
    add rx105_pos, 1
    nqp_rxpeek $I19, rx105_bstack, rxquantr115_done460
    inc $I19
    inc $I19
    set rx105_rep, rx105_bstack[$I19]
    nqp_rxcommit rx105_bstack, rxquantr115_done460
    inc rx105_rep
    nqp_rxmark rx105_bstack, rxquantr115_done460, rx105_pos, rx105_rep
    goto rxquantr115_loop459
  rxquantr115_done460:
    goto alt107_end437
  alt107_2461:
    nqp_rxmark rx105_bstack, rxquantr116_done463, -1, 0
  rxquantr116_loop462:
    ge rx105_pos, rx105_eos, rx105_fail430
    substr $S11, rx105_tgt, rx105_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx105_fail430
    inc rx105_pos
    nqp_rxpeek $I19, rx105_bstack, rxquantr116_done463
    inc $I19
    inc $I19
    set rx105_rep, rx105_bstack[$I19]
    nqp_rxcommit rx105_bstack, rxquantr116_done463
    inc rx105_rep
    nqp_rxmark rx105_bstack, rxquantr116_done463, rx105_pos, rx105_rep
    goto rxquantr116_loop462
  rxquantr116_done463:
    goto alt107_end437
  alt107_end437:
    nqp_rxcommit rx105_bstack, alt107_end437
    rx105_cur."!cursor_pass"(rx105_pos, "unv", 'backtrack'=>1)
    .return (rx105_cur)
  rx105_restart429:
    repr_get_attr_obj rx105_cstack, rx105_cur, rx105_curclass, "$!cstack"
  rx105_fail430:
    unless rx105_bstack, rx105_done428
    pop $I19, rx105_bstack
    if_null rx105_cstack, rx105_cstack_done433
    unless rx105_cstack, rx105_cstack_done433
    dec $I19
    set $P11, rx105_cstack[$I19]
  rx105_cstack_done433:
    pop rx105_rep, rx105_bstack
    pop rx105_pos, rx105_bstack
    pop $I19, rx105_bstack
    lt rx105_pos, -1, rx105_done428
    lt rx105_pos, 0, rx105_fail430
    eq $I19, 0, rx105_fail430
    nqp_islist $I20, rx105_cstack
    unless $I20, rx105_jump431
    elements $I18, rx105_bstack
    le $I18, 0, rx105_cut432
    dec $I18
    set $I18, rx105_bstack[$I18]
  rx105_cut432:
    assign rx105_cstack, $I18
  rx105_jump431:
    jump $I19
  rx105_done428:
    rx105_cur."!cursor_fail"()
    .return (rx105_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_41_1351203235.318") :anon :lex :outer("cuid_40_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx109_tgt
    .local int rx109_pos
    .local int rx109_off
    .local int rx109_eos
    .local int rx109_rep
    .local pmc rx109_cur
    .local pmc rx109_curclass
    .local pmc rx109_bstack
    .local pmc rx109_cstack
    (rx109_cur, rx109_tgt, rx109_pos, rx109_curclass, rx109_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx109_cur
    length rx109_eos, rx109_tgt
    eq $I19, 1, rx109_restart442
    gt rx109_pos, rx109_eos, rx109_fail443
    repr_get_attr_int $I11, self, rx109_curclass, "$!from"
    ne $I11, -1, rxscan110_done449
    goto rxscan110_scan448
  rxscan110_loop447:
    inc rx109_pos
    gt rx109_pos, rx109_eos, rx109_fail443
    repr_bind_attr_int rx109_cur, rx109_curclass, "$!from", rx109_pos
  rxscan110_scan448:
    nqp_rxmark rx109_bstack, rxscan110_loop447, rx109_pos, 0
  rxscan110_done449:
    nqp_rxmark rx109_bstack, rxquantr111_done451, rx109_pos, 0
  rxquantr111_loop450:
    ge rx109_pos, rx109_eos, rx109_fail443
    substr $S11, rx109_tgt, rx109_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx109_fail443
    inc rx109_pos
    nqp_rxpeek $I19, rx109_bstack, rxquantr111_done451
    inc $I19
    inc $I19
    set rx109_rep, rx109_bstack[$I19]
    nqp_rxcommit rx109_bstack, rxquantr111_done451
    inc rx109_rep
    nqp_rxmark rx109_bstack, rxquantr111_done451, rx109_pos, rx109_rep
    goto rxquantr111_loop450
  rxquantr111_done451:
    add $I11, rx109_pos, 1
    gt $I11, rx109_eos, rx109_fail443
    substr $S10, rx109_tgt, rx109_pos, 1
    ne $S10, ucs4:"=", rx109_fail443
    add rx109_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt112_0453
    nqp_push_label $P11, alt112_1454
    nqp_rxmark rx109_bstack, alt112_end452, -1, 0
    rx109_cur."!alt"(rx109_pos, "alt_nfa__3_1351203236.473", $P11)
    goto rx109_fail443
  alt112_0453:
    ge rx109_pos, rx109_eos, rx109_fail443
    is_cclass $I11, .CCLASS_WORD, rx109_tgt, rx109_pos
    unless $I11, rx109_fail443
    add rx109_pos, 1
    goto alt112_end452
  alt112_1454:
    add $I11, rx109_pos, 1
    gt $I11, rx109_eos, rx109_fail443
    substr $S10, rx109_tgt, rx109_pos, 1
    ne $S10, ucs4:"\\", rx109_fail443
    add rx109_pos, 1
    goto alt112_end452
  alt112_end452:
    nqp_rxcommit rx109_bstack, alt112_end452
    rx109_cur."!cursor_pass"(rx109_pos, 'backtrack'=>1)
    .return (rx109_cur)
  rx109_restart442:
    repr_get_attr_obj rx109_cstack, rx109_cur, rx109_curclass, "$!cstack"
  rx109_fail443:
    unless rx109_bstack, rx109_done441
    pop $I19, rx109_bstack
    if_null rx109_cstack, rx109_cstack_done446
    unless rx109_cstack, rx109_cstack_done446
    dec $I19
    set $P11, rx109_cstack[$I19]
  rx109_cstack_done446:
    pop rx109_rep, rx109_bstack
    pop rx109_pos, rx109_bstack
    pop $I19, rx109_bstack
    lt rx109_pos, -1, rx109_done441
    lt rx109_pos, 0, rx109_fail443
    eq $I19, 0, rx109_fail443
    nqp_islist $I20, rx109_cstack
    unless $I20, rx109_jump444
    elements $I18, rx109_bstack
    le $I18, 0, rx109_cut445
    dec $I18
    set $I18, rx109_bstack[$I18]
  rx109_cut445:
    assign rx109_cstack, $I18
  rx109_jump444:
    jump $I19
  rx109_done441:
    rx109_cur."!cursor_fail"()
    .return (rx109_cur) 
.end
.HLL "nqp"
.namespace []
.sub "pod_comment" :subid("cuid_42_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 666
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_43_1351203235.318' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx117_tgt
    .local int rx117_pos
    .local int rx117_off
    .local int rx117_eos
    .local int rx117_rep
    .local pmc rx117_cur
    .local pmc rx117_curclass
    .local pmc rx117_bstack
    .local pmc rx117_cstack
    (rx117_cur, rx117_tgt, rx117_pos, rx117_curclass, rx117_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx117_cur
    length rx117_eos, rx117_tgt
    eq $I19, 1, rx117_restart466
    gt rx117_pos, rx117_eos, rx117_fail467
    repr_get_attr_int $I11, self, rx117_curclass, "$!from"
    ne $I11, -1, rxscan118_done473
    goto rxscan118_scan472
  rxscan118_loop471:
    inc rx117_pos
    gt rx117_pos, rx117_eos, rx117_fail467
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!from", rx117_pos
  rxscan118_scan472:
    nqp_rxmark rx117_bstack, rxscan118_loop471, rx117_pos, 0
  rxscan118_done473:
    eq rx117_pos, 0, rxanchor119_done474
    ge rx117_pos, rx117_eos, rx117_fail467
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, $I11
    unless $I11, rx117_fail467
  rxanchor119_done474:
    nqp_rxmark rx117_bstack, rxquantr120_done476, rx117_pos, 0
  rxquantr120_loop475:
    ge rx117_pos, rx117_eos, rx117_fail467
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail467
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr120_done476
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr120_done476
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr120_done476, rx117_pos, rx117_rep
    goto rxquantr120_loop475
  rxquantr120_done476:
    add $I11, rx117_pos, 1
    gt $I11, rx117_eos, rx117_fail467
    substr $S10, rx117_tgt, rx117_pos, 1
    ne $S10, ucs4:"=", rx117_fail467
    add rx117_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt121_0478
    nqp_push_label $P11, alt121_1497
    nqp_push_label $P11, alt121_2516
    nqp_push_label $P11, alt121_3538
    nqp_push_label $P11, alt121_4563
    nqp_rxmark rx117_bstack, alt121_end477, -1, 0
    rx117_cur."!alt"(rx117_pos, "alt_nfa__6_1351203236.557", $P11)
    goto rx117_fail467
  alt121_0478:
    add $I11, rx117_pos, 5
    gt $I11, rx117_eos, rx117_fail467
    substr $S10, rx117_tgt, rx117_pos, 5
    ne $S10, ucs4:"begin", rx117_fail467
    add rx117_pos, 5
    nqp_rxmark rx117_bstack, rxquantr122_done480, -1, 0
  rxquantr122_loop479:
    ge rx117_pos, rx117_eos, rx117_fail467
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail467
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr122_done480
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr122_done480
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr122_done480, rx117_pos, rx117_rep
    goto rxquantr122_loop479
  rxquantr122_done480:
    add $I11, rx117_pos, 3
    gt $I11, rx117_eos, rx117_fail467
    substr $S10, rx117_tgt, rx117_pos, 3
    ne $S10, ucs4:"END", rx117_fail467
    add rx117_pos, 3
    le rx117_pos, 0, rx117_fail467
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, rx117_pos
    if $I11, rx117_fail467
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, $I11
    unless $I11, rx117_fail467
  alt124_0483:
    nqp_rxmark rx117_bstack, alt124_1494, rx117_pos, 0
    set rx117_rep, 0
    nqp_rxmark rx117_bstack, rxquantf125_loop484, rx117_pos, rx117_rep
    goto rxquantf125_done485
  rxquantf125_loop484:
    set $I12, rx117_rep
    ge rx117_pos, rx117_eos, rx117_fail467
    add rx117_pos, 1
    set rx117_rep, $I12
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantf125_loop484, rx117_pos, rx117_rep
  rxquantf125_done485:
    ge rx117_pos, rx117_eos, rx117_fail467
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    unless $I11, rx117_fail467
    substr $S10, rx117_tgt, rx117_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx117_pos, $I11
    add rx117_pos, 1
    nqp_rxmark rx117_bstack, rxquantr126_done488, rx117_pos, 0
  rxquantr126_loop487:
    ge rx117_pos, rx117_eos, rx117_fail467
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail467
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr126_done488
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr126_done488
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr126_done488, rx117_pos, rx117_rep
    goto rxquantr126_loop487
  rxquantr126_done488:
    add $I11, rx117_pos, 4
    gt $I11, rx117_eos, rx117_fail467
    substr $S10, rx117_tgt, rx117_pos, 4
    ne $S10, ucs4:"=end", rx117_fail467
    add rx117_pos, 4
    nqp_rxmark rx117_bstack, rxquantr127_done490, -1, 0
  rxquantr127_loop489:
    ge rx117_pos, rx117_eos, rx117_fail467
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail467
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr127_done490
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr127_done490
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr127_done490, rx117_pos, rx117_rep
    goto rxquantr127_loop489
  rxquantr127_done490:
    add $I11, rx117_pos, 3
    gt $I11, rx117_eos, rx117_fail467
    substr $S10, rx117_tgt, rx117_pos, 3
    ne $S10, ucs4:"END", rx117_fail467
    add rx117_pos, 3
    le rx117_pos, 0, rx117_fail467
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, rx117_pos
    if $I11, rx117_fail467
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, $I11
    unless $I11, rx117_fail467
    nqp_rxmark rx117_bstack, rxquantr129_done493, rx117_pos, 0
  rxquantr129_loop492:
    ge rx117_pos, rx117_eos, rx117_fail467
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    if $I11, rx117_fail467
    add rx117_pos, 1
    nqp_rxpeek $I19, rx117_bstack, rxquantr129_done493
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr129_done493
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr129_done493, rx117_pos, rx117_rep
    goto rxquantr129_loop492
  rxquantr129_done493:
    goto alt124_end482
  alt124_1494:
    nqp_rxmark rx117_bstack, rxquantr130_done496, rx117_pos, 0
  rxquantr130_loop495:
    ge rx117_pos, rx117_eos, rx117_fail467
    add rx117_pos, 1
    nqp_rxpeek $I19, rx117_bstack, rxquantr130_done496
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr130_done496
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr130_done496, rx117_pos, rx117_rep
    goto rxquantr130_loop495
  rxquantr130_done496:
  alt124_end482:
    goto alt121_end477
  alt121_1497:
    add $I11, rx117_pos, 5
    gt $I11, rx117_eos, rx117_fail467
    substr $S10, rx117_tgt, rx117_pos, 5
    ne $S10, ucs4:"begin", rx117_fail467
    add rx117_pos, 5
    nqp_rxmark rx117_bstack, rxquantr131_done499, -1, 0
  rxquantr131_loop498:
    ge rx117_pos, rx117_eos, rx117_fail467
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail467
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr131_done499
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr131_done499
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr131_done499, rx117_pos, rx117_rep
    goto rxquantr131_loop498
  rxquantr131_done499:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail467
    nqp_rxmark rx117_bstack, rxsubrule132_pass500, -1, 0
  rxsubrule132_pass500:
    rx117_cstack = rx117_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
  alt133_0502:
    nqp_rxmark rx117_bstack, alt133_1514, rx117_pos, 0
    set rx117_rep, 0
    nqp_rxmark rx117_bstack, rxquantf134_loop503, rx117_pos, rx117_rep
    goto rxquantf134_done504
  rxquantf134_loop503:
    set $I12, rx117_rep
    ge rx117_pos, rx117_eos, rx117_fail467
    add rx117_pos, 1
    set rx117_rep, $I12
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantf134_loop503, rx117_pos, rx117_rep
  rxquantf134_done504:
    ge rx117_pos, rx117_eos, rx117_fail467
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    unless $I11, rx117_fail467
    substr $S10, rx117_tgt, rx117_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx117_pos, $I11
    add rx117_pos, 1
    nqp_rxmark rx117_bstack, rxquantr135_done507, rx117_pos, 0
  rxquantr135_loop506:
    ge rx117_pos, rx117_eos, rx117_fail467
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail467
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr135_done507
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr135_done507
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr135_done507, rx117_pos, rx117_rep
    goto rxquantr135_loop506
  rxquantr135_done507:
    add $I11, rx117_pos, 4
    gt $I11, rx117_eos, rx117_fail467
    substr $S10, rx117_tgt, rx117_pos, 4
    ne $S10, ucs4:"=end", rx117_fail467
    add rx117_pos, 4
    nqp_rxmark rx117_bstack, rxquantr136_done509, -1, 0
  rxquantr136_loop508:
    ge rx117_pos, rx117_eos, rx117_fail467
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail467
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr136_done509
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr136_done509
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr136_done509, rx117_pos, rx117_rep
    goto rxquantr136_loop508
  rxquantr136_done509:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."!BACKREF"("identifier")
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail467
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
    le rx117_pos, 0, rx117_fail467
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, rx117_pos
    if $I11, rx117_fail467
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, $I11
    unless $I11, rx117_fail467
    nqp_rxmark rx117_bstack, rxquantr139_done513, rx117_pos, 0
  rxquantr139_loop512:
    ge rx117_pos, rx117_eos, rx117_fail467
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    if $I11, rx117_fail467
    add rx117_pos, 1
    nqp_rxpeek $I19, rx117_bstack, rxquantr139_done513
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr139_done513
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr139_done513, rx117_pos, rx117_rep
    goto rxquantr139_loop512
  rxquantr139_done513:
    goto alt133_end501
  alt133_1514:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail467
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
  alt133_end501:
    goto alt121_end477
  alt121_2516:
    add $I11, rx117_pos, 5
    gt $I11, rx117_eos, rx117_fail467
    substr $S10, rx117_tgt, rx117_pos, 5
    ne $S10, ucs4:"begin", rx117_fail467
    add rx117_pos, 5
    le rx117_pos, 0, rx117_fail467
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, rx117_pos
    if $I11, rx117_fail467
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, $I11
    unless $I11, rx117_fail467
    nqp_rxmark rx117_bstack, rxquantr142_done519, rx117_pos, 0
  rxquantr142_loop518:
    ge rx117_pos, rx117_eos, rx117_fail467
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail467
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr142_done519
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr142_done519
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr142_done519, rx117_pos, rx117_rep
    goto rxquantr142_loop518
  rxquantr142_done519:
  alt143_0521:
    nqp_rxmark rx117_bstack, alt143_1523, rx117_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    if $I11, rxanchor144_done522
    ne rx117_pos, rx117_eos, rx117_fail467
    eq rx117_pos, 0, rxanchor144_done522
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, $I11
    if $I11, rx117_fail467
  rxanchor144_done522:
    goto alt143_end520
  alt143_1523:
    nqp_rxmark rx117_bstack, alt143_2524, rx117_pos, 0
    add $I11, rx117_pos, 1
    gt $I11, rx117_eos, rx117_fail467
    substr $S10, rx117_tgt, rx117_pos, 1
    ne $S10, ucs4:"#", rx117_fail467
    add rx117_pos, 1
    goto alt143_end520
  alt143_2524:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."panic"("Unrecognized token after =begin")
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail467
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
  alt143_end520:
  alt146_0527:
    nqp_rxmark rx117_bstack, alt146_1536, rx117_pos, 0
    set rx117_rep, 0
    nqp_rxmark rx117_bstack, rxquantf147_loop528, rx117_pos, rx117_rep
    goto rxquantf147_done529
  rxquantf147_loop528:
    set $I12, rx117_rep
    ge rx117_pos, rx117_eos, rx117_fail467
    add rx117_pos, 1
    set rx117_rep, $I12
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantf147_loop528, rx117_pos, rx117_rep
  rxquantf147_done529:
    ge rx117_pos, rx117_eos, rx117_fail467
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    unless $I11, rx117_fail467
    substr $S10, rx117_tgt, rx117_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx117_pos, $I11
    add rx117_pos, 1
    nqp_rxmark rx117_bstack, rxquantr148_done532, rx117_pos, 0
  rxquantr148_loop531:
    ge rx117_pos, rx117_eos, rx117_fail467
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail467
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr148_done532
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr148_done532
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr148_done532, rx117_pos, rx117_rep
    goto rxquantr148_loop531
  rxquantr148_done532:
    add $I11, rx117_pos, 4
    gt $I11, rx117_eos, rx117_fail467
    substr $S10, rx117_tgt, rx117_pos, 4
    ne $S10, ucs4:"=end", rx117_fail467
    add rx117_pos, 4
    le rx117_pos, 0, rx117_fail467
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, rx117_pos
    if $I11, rx117_fail467
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, $I11
    unless $I11, rx117_fail467
    nqp_rxmark rx117_bstack, rxquantr150_done535, rx117_pos, 0
  rxquantr150_loop534:
    ge rx117_pos, rx117_eos, rx117_fail467
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    if $I11, rx117_fail467
    add rx117_pos, 1
    nqp_rxpeek $I19, rx117_bstack, rxquantr150_done535
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr150_done535
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr150_done535, rx117_pos, rx117_rep
    goto rxquantr150_loop534
  rxquantr150_done535:
    goto alt146_end526
  alt146_1536:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail467
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
  alt146_end526:
    goto alt121_end477
  alt121_3538:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail467
    nqp_rxmark rx117_bstack, rxsubrule152_pass539, -1, 0
  rxsubrule152_pass539:
    rx117_cstack = rx117_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
    set rx117_rep, 0
    nqp_rxmark rx117_bstack, rxquantf153_loop540, rx117_pos, rx117_rep
    goto rxquantf153_done541
  rxquantf153_loop540:
    set $I12, rx117_rep
    ge rx117_pos, rx117_eos, rx117_fail467
    add rx117_pos, 1
    set rx117_rep, $I12
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantf153_loop540, rx117_pos, rx117_rep
  rxquantf153_done541:
    eq rx117_pos, 0, rxanchor154_done543
    ge rx117_pos, rx117_eos, rx117_fail467
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, $I11
    unless $I11, rx117_fail467
  rxanchor154_done543:
    .const 'Sub' $P5001 = 'cuid_43_1351203235.318' 
    capture_lex $P5001
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail467
    goto alt121_end477
  alt121_4563:
  alt162_0565:
    nqp_rxmark rx117_bstack, alt162_1566, rx117_pos, 0
    ge rx117_pos, rx117_eos, rx117_fail467
    is_cclass $I11, .CCLASS_WHITESPACE, rx117_tgt, rx117_pos
    unless $I11, rx117_fail467
    add rx117_pos, 1
    goto alt162_end564
  alt162_1566:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."panic"("Illegal pod directive")
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail467
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
  alt162_end564:
    nqp_rxmark rx117_bstack, rxquantr164_done569, rx117_pos, 0
  rxquantr164_loop568:
    ge rx117_pos, rx117_eos, rx117_fail467
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    if $I11, rx117_fail467
    add rx117_pos, 1
    nqp_rxpeek $I19, rx117_bstack, rxquantr164_done569
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr164_done569
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr164_done569, rx117_pos, rx117_rep
    goto rxquantr164_loop568
  rxquantr164_done569:
    goto alt121_end477
  alt121_end477:
    nqp_rxcommit rx117_bstack, alt121_end477
    rx117_cur."!cursor_pass"(rx117_pos, "pod_comment", 'backtrack'=>1)
    .return (rx117_cur)
  rx117_restart466:
    repr_get_attr_obj rx117_cstack, rx117_cur, rx117_curclass, "$!cstack"
  rx117_fail467:
    unless rx117_bstack, rx117_done465
    pop $I19, rx117_bstack
    if_null rx117_cstack, rx117_cstack_done470
    unless rx117_cstack, rx117_cstack_done470
    dec $I19
    set $P11, rx117_cstack[$I19]
  rx117_cstack_done470:
    pop rx117_rep, rx117_bstack
    pop rx117_pos, rx117_bstack
    pop $I19, rx117_bstack
    lt rx117_pos, -1, rx117_done465
    lt rx117_pos, 0, rx117_fail467
    eq $I19, 0, rx117_fail467
    nqp_islist $I20, rx117_cstack
    unless $I20, rx117_jump468
    elements $I18, rx117_bstack
    le $I18, 0, rx117_cut469
    dec $I18
    set $I18, rx117_bstack[$I18]
  rx117_cut469:
    assign rx117_cstack, $I18
  rx117_jump468:
    jump $I19
  rx117_done465:
    rx117_cur."!cursor_fail"()
    .return (rx117_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_43_1351203235.318") :anon :lex :outer("cuid_42_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx155_tgt
    .local int rx155_pos
    .local int rx155_off
    .local int rx155_eos
    .local int rx155_rep
    .local pmc rx155_cur
    .local pmc rx155_curclass
    .local pmc rx155_bstack
    .local pmc rx155_cstack
    (rx155_cur, rx155_tgt, rx155_pos, rx155_curclass, rx155_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx155_cur
    length rx155_eos, rx155_tgt
    eq $I19, 1, rx155_restart546
    gt rx155_pos, rx155_eos, rx155_fail547
    repr_get_attr_int $I11, self, rx155_curclass, "$!from"
    ne $I11, -1, rxscan156_done553
    goto rxscan156_scan552
  rxscan156_loop551:
    inc rx155_pos
    gt rx155_pos, rx155_eos, rx155_fail547
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!from", rx155_pos
  rxscan156_scan552:
    nqp_rxmark rx155_bstack, rxscan156_loop551, rx155_pos, 0
  rxscan156_done553:
    nqp_rxmark rx155_bstack, rxquantr157_done555, rx155_pos, 0
  rxquantr157_loop554:
    ge rx155_pos, rx155_eos, rx155_fail547
    substr $S11, rx155_tgt, rx155_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx155_fail547
    inc rx155_pos
    nqp_rxpeek $I19, rx155_bstack, rxquantr157_done555
    inc $I19
    inc $I19
    set rx155_rep, rx155_bstack[$I19]
    nqp_rxcommit rx155_bstack, rxquantr157_done555
    inc rx155_rep
    nqp_rxmark rx155_bstack, rxquantr157_done555, rx155_pos, rx155_rep
    goto rxquantr157_loop554
  rxquantr157_done555:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt158_0557
    nqp_push_label $P11, alt158_1562
    nqp_rxmark rx155_bstack, alt158_end556, -1, 0
    rx155_cur."!alt"(rx155_pos, "alt_nfa__5_1351203236.546", $P11)
    goto rx155_fail547
  alt158_0557:
    add $I11, rx155_pos, 1
    gt $I11, rx155_eos, rx155_fail547
    substr $S10, rx155_tgt, rx155_pos, 1
    ne $S10, ucs4:"=", rx155_fail547
    add rx155_pos, 1
    nqp_rxmark rx155_bstack, rxquantr159_done559, rx155_pos, 0
  rxquantr159_loop558:
    add $I11, rx155_pos, 3
    gt $I11, rx155_eos, rx155_fail547
    substr $S10, rx155_tgt, rx155_pos, 3
    ne $S10, ucs4:"cut", rx155_fail547
    add rx155_pos, 3
    le rx155_pos, 0, rx155_fail547
    is_cclass $I11, .CCLASS_WORD, rx155_tgt, rx155_pos
    if $I11, rx155_fail547
    sub $I11, rx155_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx155_tgt, $I11
    unless $I11, rx155_fail547
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!pos", rx155_pos
    $P11 = rx155_cur."panic"("Obsolete pod format, please use =begin/=end instead")
    repr_get_attr_int $I11, $P11, rx155_curclass, "$!pos"
    lt $I11, 0, rx155_fail547
    repr_get_attr_int rx155_pos, $P11, rx155_curclass, "$!pos"
    nqp_rxpeek $I19, rx155_bstack, rxquantr159_done559
    inc $I19
    inc $I19
    set rx155_rep, rx155_bstack[$I19]
    nqp_rxcommit rx155_bstack, rxquantr159_done559
    inc rx155_rep
  rxquantr159_done559:
    goto alt158_end556
  alt158_1562:
    ge rx155_pos, rx155_eos, rx155_fail547
    is_cclass $I11, .CCLASS_NEWLINE, rx155_tgt, rx155_pos
    unless $I11, rx155_fail547
    substr $S10, rx155_tgt, rx155_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx155_pos, $I11
    add rx155_pos, 1
    goto alt158_end556
  alt158_end556:
    nqp_rxcommit rx155_bstack, alt158_end556
    rx155_cur."!cursor_pass"(rx155_pos, 'backtrack'=>1)
    .return (rx155_cur)
  rx155_restart546:
    repr_get_attr_obj rx155_cstack, rx155_cur, rx155_curclass, "$!cstack"
  rx155_fail547:
    unless rx155_bstack, rx155_done545
    pop $I19, rx155_bstack
    if_null rx155_cstack, rx155_cstack_done550
    unless rx155_cstack, rx155_cstack_done550
    dec $I19
    set $P11, rx155_cstack[$I19]
  rx155_cstack_done550:
    pop rx155_rep, rx155_bstack
    pop rx155_pos, rx155_bstack
    pop $I19, rx155_bstack
    lt rx155_pos, -1, rx155_done545
    lt rx155_pos, 0, rx155_fail547
    eq $I19, 0, rx155_fail547
    nqp_islist $I20, rx155_cstack
    unless $I20, rx155_jump548
    elements $I18, rx155_bstack
    le $I18, 0, rx155_cut549
    dec $I18
    set $I18, rx155_bstack[$I18]
  rx155_cut549:
    assign rx155_cstack, $I18
  rx155_jump548:
    jump $I19
  rx155_done545:
    rx155_cur."!cursor_fail"()
    .return (rx155_cur) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_44_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 697
    .param pmc _lex_param_0 
    .const 'Sub' $P5061 = 'cuid_391_1351203235.318' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_392_1351203235.318' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_394_1351203235.318' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_395_1351203235.318' 
    capture_lex $P5061 
    .lex "$*IN_DECL", $P101 
    .lex "$*HAS_YOU_ARE_HERE", $P102 
    .lex "$*MAIN_SUB", $P103 
    .lex "$*UNIT", $P104 
    .lex "$*GLOBALish", $P105 
    .lex "$*PACKAGE", $P106 
    .lex "$*EXPORT", $P107 
    .lex utf8:"$\x{a2}", $P108 
    .lex "$/", $P109 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P103, $P5003
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P104, $P5004
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P105, $P5005
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P106, $P5006
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P107, $P5007
    set self, _lex_param_0
    .local string rx165_tgt
    .local int rx165_pos
    .local int rx165_off
    .local int rx165_eos
    .local int rx165_rep
    .local pmc rx165_cur
    .local pmc rx165_curclass
    .local pmc rx165_bstack
    .local pmc rx165_cstack
    (rx165_cur, rx165_tgt, rx165_pos, rx165_curclass, rx165_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx165_cur
    length rx165_eos, rx165_tgt
    eq $I19, 1, rx165_restart572
    gt rx165_pos, rx165_eos, rx165_fail573
    repr_get_attr_int $I11, self, rx165_curclass, "$!from"
    ne $I11, -1, rxscan166_done579
    goto rxscan166_scan578
  rxscan166_loop577:
    inc rx165_pos
    gt rx165_pos, rx165_eos, rx165_fail573
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!from", rx165_pos
  rxscan166_scan578:
    nqp_rxmark rx165_bstack, rxscan166_loop577, rx165_pos, 0
  rxscan166_done579:
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    box $P5008, ""
    set $P101, $P5008
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    box $P5009, 0
    set $P102, $P5009
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    unless_null $P103, fallback580
    nqp_get_sc_object $P5012, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$MAIN_SUB"]
    unless_null $P5010, fallback581
    nqp_get_sc_object $P5013, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5013
  fallback581:
    unless_null $P5010, vivi_167582
    die "Contextual $*MAIN_SUB not found"
    box $P5014, "Contextual $*MAIN_SUB not found"
    set $P5010, $P5014
  vivi_167582:
    set $P103, $P5010
  fallback580:
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
.annotate 'line', 702
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback583
    nqp_get_sc_object $P5018, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback584
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5016, $P5019
  fallback584:
    unless_null $P5016, vivi_168585
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_168585:
    set $P5015, $P5016
  fallback583:
    $P5021 = $P5015."push_lexpad"($P109)
    set $P104, $P5021
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
.annotate 'line', 706
    find_dynamic_lex $P5022, "$*W"
    unless_null $P5022, fallback586
    nqp_get_sc_object $P5025, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$W"]
    unless_null $P5023, fallback587
    nqp_get_sc_object $P5026, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5023, $P5026
  fallback587:
    unless_null $P5023, vivi_169588
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5023, $P5027
  vivi_169588:
    set $P5022, $P5023
  fallback586:
    find_dynamic_lex $P5029, "%*HOW"
    unless_null $P5029, fallback589
    nqp_get_sc_object $P5032, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["%HOW"]
    unless_null $P5030, fallback590
    nqp_get_sc_object $P5034, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5033, $P5034
    new $P5035, 'Hash'
    set $P5033["%HOW"], $P5035
    set $P5030, $P5035
  fallback590:
    unless_null $P5030, vivi_170591
    die "Contextual %*HOW not found"
    box $P5036, "Contextual %*HOW not found"
    set $P5030, $P5036
  vivi_170591:
    set $P5029, $P5030
  fallback589:
    set $P5028, $P5029["knowhow"]
    unless_null $P5028, fallback592
    nqp_get_sc_object $P5037, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5028, $P5037
  fallback592:
    $P5038 = $P5022."pkg_create_mo"($P5028, "GLOBALish" :named("name"))
    set $P105, $P5038
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    $P5039 = $P108."MATCH"()
    set $P109, $P5039
    .const 'Sub' $P5040 = 'cuid_391_1351203235.318' 
    capture_lex $P5040
    $P5041 = $P5040()
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    unless_null $P105, fallback608
    nqp_get_sc_object $P5044, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5043, $P5044
    set $P5042, $P5043["$GLOBALish"]
    unless_null $P5042, fallback609
    nqp_get_sc_object $P5045, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5042, $P5045
  fallback609:
    unless_null $P5042, vivi_176610
    die "Contextual $*GLOBALish not found"
    box $P5046, "Contextual $*GLOBALish not found"
    set $P5042, $P5046
  vivi_176610:
    set $P105, $P5042
  fallback608:
    set $P106, $P105
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    $P5047 = $P108."MATCH"()
    set $P109, $P5047
    .const 'Sub' $P5048 = 'cuid_392_1351203235.318' 
    capture_lex $P5048
    $P5049 = $P5048()
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    unless_null $P107, fallback620
    nqp_get_sc_object $P5052, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5051, $P5052
    set $P5050, $P5051["$EXPORT"]
    unless_null $P5050, fallback621
    nqp_get_sc_object $P5053, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5050, $P5053
  fallback621:
    unless_null $P5050, vivi_180622
    die "Contextual $*EXPORT not found"
    box $P5054, "Contextual $*EXPORT not found"
    set $P5050, $P5054
  vivi_180622:
    set $P107, $P5050
  fallback620:
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    $P5055 = $P108."MATCH"()
    set $P109, $P5055
    .const 'Sub' $P5056 = 'cuid_394_1351203235.318' 
    capture_lex $P5056
    $P5057 = $P5056()
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    $P5058 = $P108."MATCH"()
    set $P109, $P5058
    .const 'Sub' $P5059 = 'cuid_395_1351203235.318' 
    capture_lex $P5059
    $P5060 = $P5059()
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    $P11 = rx165_cur."outerctx"()
    repr_get_attr_int $I11, $P11, rx165_curclass, "$!pos"
    lt $I11, 0, rx165_fail573
    repr_get_attr_int rx165_pos, $P11, rx165_curclass, "$!pos"
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    $P11 = rx165_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx165_curclass, "$!pos"
    lt $I11, 0, rx165_fail573
    nqp_rxmark rx165_bstack, rxsubrule195_pass666, -1, 0
  rxsubrule195_pass666:
    rx165_cstack = rx165_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx165_pos, $P11, rx165_curclass, "$!pos"
  alt196_0668:
    nqp_rxmark rx165_bstack, alt196_1670, rx165_pos, 0
    lt rx165_pos, rx165_eos, rx165_fail573
    goto alt196_end667
  alt196_1670:
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    $P11 = rx165_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx165_curclass, "$!pos"
    lt $I11, 0, rx165_fail573
    repr_get_attr_int rx165_pos, $P11, rx165_curclass, "$!pos"
  alt196_end667:
    rx165_cur."!cursor_pass"(rx165_pos, "comp_unit", 'backtrack'=>1)
    .return (rx165_cur)
  rx165_restart572:
    repr_get_attr_obj rx165_cstack, rx165_cur, rx165_curclass, "$!cstack"
  rx165_fail573:
    unless rx165_bstack, rx165_done571
    pop $I19, rx165_bstack
    if_null rx165_cstack, rx165_cstack_done576
    unless rx165_cstack, rx165_cstack_done576
    dec $I19
    set $P11, rx165_cstack[$I19]
  rx165_cstack_done576:
    pop rx165_rep, rx165_bstack
    pop rx165_pos, rx165_bstack
    pop $I19, rx165_bstack
    lt rx165_pos, -1, rx165_done571
    lt rx165_pos, 0, rx165_fail573
    eq $I19, 0, rx165_fail573
    nqp_islist $I20, rx165_cstack
    unless $I20, rx165_jump574
    elements $I18, rx165_bstack
    le $I18, 0, rx165_cut575
    dec $I18
    set $I18, rx165_bstack[$I18]
  rx165_cut575:
    assign rx165_cstack, $I18
  rx165_jump574:
    jump $I19
  rx165_done571:
    rx165_cur."!cursor_fail"()
    .return (rx165_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_391_1351203235.318") :anon :lex :outer("cuid_44_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 707

.annotate 'line', 708
    find_dynamic_lex $P5002, "$*GLOBALish"
    unless_null $P5002, fallback593
    nqp_get_sc_object $P5005, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$GLOBALish"]
    unless_null $P5003, fallback594
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5006
  fallback594:
    unless_null $P5003, vivi_171595
    die "Contextual $*GLOBALish not found"
    box $P5007, "Contextual $*GLOBALish not found"
    set $P5003, $P5007
  vivi_171595:
    set $P5002, $P5003
  fallback593:
    get_how $P5001, $P5002
    find_dynamic_lex $P5008, "$*GLOBALish"
    unless_null $P5008, fallback596
    nqp_get_sc_object $P5011, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$GLOBALish"]
    unless_null $P5009, fallback597
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5012
  fallback597:
    unless_null $P5009, vivi_172598
    die "Contextual $*GLOBALish not found"
    box $P5013, "Contextual $*GLOBALish not found"
    set $P5009, $P5013
  vivi_172598:
    set $P5008, $P5009
  fallback596:
    $P5001."compose"($P5008)
.annotate 'line', 709
    find_dynamic_lex $P5014, "$*W"
    unless_null $P5014, fallback599
    nqp_get_sc_object $P5017, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["$W"]
    unless_null $P5015, fallback600
    nqp_get_sc_object $P5018, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5015, $P5018
  fallback600:
    unless_null $P5015, vivi_173601
    die "Contextual $*W not found"
    box $P5019, "Contextual $*W not found"
    set $P5015, $P5019
  vivi_173601:
    set $P5014, $P5015
  fallback599:
    find_dynamic_lex $P5020, "$*UNIT"
    unless_null $P5020, fallback602
    nqp_get_sc_object $P5023, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$UNIT"]
    unless_null $P5021, fallback603
    nqp_get_sc_object $P5024, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5021, $P5024
  fallback603:
    unless_null $P5021, vivi_174604
    die "Contextual $*UNIT not found"
    box $P5025, "Contextual $*UNIT not found"
    set $P5021, $P5025
  vivi_174604:
    set $P5020, $P5021
  fallback602:
    find_dynamic_lex $P5026, "$*GLOBALish"
    unless_null $P5026, fallback605
    nqp_get_sc_object $P5029, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$GLOBALish"]
    unless_null $P5027, fallback606
    nqp_get_sc_object $P5030, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5027, $P5030
  fallback606:
    unless_null $P5027, vivi_175607
    die "Contextual $*GLOBALish not found"
    box $P5031, "Contextual $*GLOBALish not found"
    set $P5027, $P5031
  vivi_175607:
    set $P5026, $P5027
  fallback605:
    $P5032 = $P5014."install_lexical_symbol"($P5020, "GLOBALish", $P5026)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_392_1351203235.318") :anon :lex :outer("cuid_44_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 714

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback611
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback612
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5005
  fallback612:
    unless_null $P5002, vivi_177613
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_177613:
    set $P5001, $P5002
  fallback611:
    find_dynamic_lex $P5007, "$*UNIT"
    unless_null $P5007, fallback614
    nqp_get_sc_object $P5010, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$UNIT"]
    unless_null $P5008, fallback615
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5011
  fallback615:
    unless_null $P5008, vivi_178616
    die "Contextual $*UNIT not found"
    box $P5012, "Contextual $*UNIT not found"
    set $P5008, $P5012
  vivi_178616:
    set $P5007, $P5008
  fallback614:
    find_dynamic_lex $P5013, "$*PACKAGE"
    unless_null $P5013, fallback617
    nqp_get_sc_object $P5016, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$PACKAGE"]
    unless_null $P5014, fallback618
    nqp_get_sc_object $P5017, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5014, $P5017
  fallback618:
    unless_null $P5014, vivi_179619
    die "Contextual $*PACKAGE not found"
    box $P5018, "Contextual $*PACKAGE not found"
    set $P5014, $P5018
  vivi_179619:
    set $P5013, $P5014
  fallback617:
    $P5019 = $P5001."install_lexical_symbol"($P5007, "$?PACKAGE", $P5013)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_394_1351203235.318") :anon :lex :outer("cuid_44_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 718
    .const 'Sub' $P5017 = 'cuid_393_1351203235.318' 
    capture_lex $P5017 
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback625
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback626
    nqp_get_sc_object $P5008, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback626:
    unless_null $P5004, vivi_182627
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_182627:
    set $P5003, $P5004
  fallback625:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback628
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5011
  fallback628:
    set $P5001, $P5002["setting"]
    unless_null $P5001, fallback629
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5012
  fallback629:
    set $S5001, $P5001
    iseq $I5001, $S5001, "NULL"
    box $P5016, $I5001
    set $P5015, $P5016
    if $I5001 goto unless181_end624 
    .const 'Sub' $P5013 = 'cuid_393_1351203235.318' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  unless181_end624:
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_393_1351203235.318") :anon :lex :outer("cuid_394_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 719
    .lex "$DEFAULT", $P101 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 720
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback630
    nqp_get_sc_object $P5005, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback631
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5006
  fallback631:
    unless_null $P5003, vivi_183632
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_183632:
    set $P5002, $P5003
  fallback630:
    find_dynamic_lex $P5009, "%*HOW"
    unless_null $P5009, fallback633
    nqp_get_sc_object $P5012, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["%HOW"]
    unless_null $P5010, fallback634
    nqp_get_sc_object $P5014, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5013, $P5014
    new $P5015, 'Hash'
    set $P5013["%HOW"], $P5015
    set $P5010, $P5015
  fallback634:
    unless_null $P5010, vivi_184635
    die "Contextual %*HOW not found"
    box $P5016, "Contextual %*HOW not found"
    set $P5010, $P5016
  vivi_184635:
    set $P5009, $P5010
  fallback633:
    set $P5008, $P5009["knowhow"]
    unless_null $P5008, fallback636
    nqp_get_sc_object $P5017, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5017
  fallback636:
    $P5018 = $P5002."pkg_create_mo"($P5008, "EXPORT" :named("name"))
    store_dynamic_lex "$*EXPORT", $P5018
.annotate 'line', 721
    find_dynamic_lex $P5020, "$*EXPORT"
    unless_null $P5020, fallback637
    nqp_get_sc_object $P5023, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$EXPORT"]
    unless_null $P5021, fallback638
    nqp_get_sc_object $P5024, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5021, $P5024
  fallback638:
    unless_null $P5021, vivi_185639
    die "Contextual $*EXPORT not found"
    box $P5025, "Contextual $*EXPORT not found"
    set $P5021, $P5025
  vivi_185639:
    set $P5020, $P5021
  fallback637:
    get_how $P5019, $P5020
    find_dynamic_lex $P5026, "$*EXPORT"
    unless_null $P5026, fallback640
    nqp_get_sc_object $P5029, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$EXPORT"]
    unless_null $P5027, fallback641
    nqp_get_sc_object $P5030, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5027, $P5030
  fallback641:
    unless_null $P5027, vivi_186642
    die "Contextual $*EXPORT not found"
    box $P5031, "Contextual $*EXPORT not found"
    set $P5027, $P5031
  vivi_186642:
    set $P5026, $P5027
  fallback640:
    $P5019."compose"($P5026)
.annotate 'line', 722
    find_dynamic_lex $P5032, "$*W"
    unless_null $P5032, fallback643
    nqp_get_sc_object $P5035, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5034, $P5035
    set $P5033, $P5034["$W"]
    unless_null $P5033, fallback644
    nqp_get_sc_object $P5036, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5033, $P5036
  fallback644:
    unless_null $P5033, vivi_187645
    die "Contextual $*W not found"
    box $P5037, "Contextual $*W not found"
    set $P5033, $P5037
  vivi_187645:
    set $P5032, $P5033
  fallback643:
    find_dynamic_lex $P5038, "$*UNIT"
    unless_null $P5038, fallback646
    nqp_get_sc_object $P5041, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5040, $P5041
    set $P5039, $P5040["$UNIT"]
    unless_null $P5039, fallback647
    nqp_get_sc_object $P5042, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5039, $P5042
  fallback647:
    unless_null $P5039, vivi_188648
    die "Contextual $*UNIT not found"
    box $P5043, "Contextual $*UNIT not found"
    set $P5039, $P5043
  vivi_188648:
    set $P5038, $P5039
  fallback646:
    find_dynamic_lex $P5044, "$*EXPORT"
    unless_null $P5044, fallback649
    nqp_get_sc_object $P5047, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5046, $P5047
    set $P5045, $P5046["$EXPORT"]
    unless_null $P5045, fallback650
    nqp_get_sc_object $P5048, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5045, $P5048
  fallback650:
    unless_null $P5045, vivi_189651
    die "Contextual $*EXPORT not found"
    box $P5049, "Contextual $*EXPORT not found"
    set $P5045, $P5049
  vivi_189651:
    set $P5044, $P5045
  fallback649:
    $P5032."install_lexical_symbol"($P5038, "EXPORT", $P5044)
.annotate 'line', 723
    find_dynamic_lex $P5050, "$*W"
    unless_null $P5050, fallback652
    nqp_get_sc_object $P5053, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5052, $P5053
    set $P5051, $P5052["$W"]
    unless_null $P5051, fallback653
    nqp_get_sc_object $P5054, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5051, $P5054
  fallback653:
    unless_null $P5051, vivi_190654
    die "Contextual $*W not found"
    box $P5055, "Contextual $*W not found"
    set $P5051, $P5055
  vivi_190654:
    set $P5050, $P5051
  fallback652:
    find_dynamic_lex $P5057, "%*HOW"
    unless_null $P5057, fallback655
    nqp_get_sc_object $P5060, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["%HOW"]
    unless_null $P5058, fallback656
    nqp_get_sc_object $P5062, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5061, $P5062
    new $P5063, 'Hash'
    set $P5061["%HOW"], $P5063
    set $P5058, $P5063
  fallback656:
    unless_null $P5058, vivi_191657
    die "Contextual %*HOW not found"
    box $P5064, "Contextual %*HOW not found"
    set $P5058, $P5064
  vivi_191657:
    set $P5057, $P5058
  fallback655:
    set $P5056, $P5057["knowhow"]
    unless_null $P5056, fallback658
    nqp_get_sc_object $P5065, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5056, $P5065
  fallback658:
    $P5066 = $P5050."pkg_create_mo"($P5056, "DEFAULT" :named("name"))
    set $P101, $P5066
.annotate 'line', 724
    get_how $P5067, $P101
    $P5067."compose"($P101)
    find_dynamic_lex $P5069, "$*EXPORT"
    unless_null $P5069, fallback659
    nqp_get_sc_object $P5072, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5071, $P5072
    set $P5070, $P5071["$EXPORT"]
    unless_null $P5070, fallback660
    nqp_get_sc_object $P5073, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5070, $P5073
  fallback660:
    unless_null $P5070, vivi_192661
    die "Contextual $*EXPORT not found"
    box $P5074, "Contextual $*EXPORT not found"
    set $P5070, $P5074
  vivi_192661:
    set $P5069, $P5070
  fallback659:
    get_who $P5068, $P5069
    set $P5068["DEFAULT"], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_395_1351203235.318") :anon :lex :outer("cuid_44_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 729

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback662
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback663
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5005
  fallback663:
    unless_null $P5002, vivi_193664
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_193664:
    set $P5001, $P5002
  fallback662:
    $P5007 = $P5001."add_initializations"()
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_45_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 737
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx199_tgt
    .local int rx199_pos
    .local int rx199_off
    .local int rx199_eos
    .local int rx199_rep
    .local pmc rx199_cur
    .local pmc rx199_curclass
    .local pmc rx199_bstack
    .local pmc rx199_cstack
    (rx199_cur, rx199_tgt, rx199_pos, rx199_curclass, rx199_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx199_cur
    length rx199_eos, rx199_tgt
    eq $I19, 1, rx199_restart674
    gt rx199_pos, rx199_eos, rx199_fail675
    repr_get_attr_int $I11, self, rx199_curclass, "$!from"
    ne $I11, -1, rxscan200_done681
    goto rxscan200_scan680
  rxscan200_loop679:
    inc rx199_pos
    gt rx199_pos, rx199_eos, rx199_fail675
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!from", rx199_pos
  rxscan200_scan680:
    nqp_rxmark rx199_bstack, rxscan200_loop679, rx199_pos, 0
  rxscan200_done681:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt201_0683
    nqp_push_label $P11, alt201_1687
    nqp_rxmark rx199_bstack, alt201_end682, -1, 0
    rx199_cur."!alt"(rx199_pos, "alt_nfa__7_1351203236.642", $P11)
    goto rx199_fail675
  alt201_0683:
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!pos", rx199_pos
    $P11 = rx199_cur."ws"()
    repr_get_attr_int $I11, $P11, rx199_curclass, "$!pos"
    lt $I11, 0, rx199_fail675
    repr_get_attr_int rx199_pos, $P11, rx199_curclass, "$!pos"
    lt rx199_pos, rx199_eos, rx199_fail675
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!pos", rx199_pos
    $P11 = rx199_cur."ws"()
    repr_get_attr_int $I11, $P11, rx199_curclass, "$!pos"
    lt $I11, 0, rx199_fail675
    repr_get_attr_int rx199_pos, $P11, rx199_curclass, "$!pos"
    goto alt201_end682
  alt201_1687:
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!pos", rx199_pos
    $P11 = rx199_cur."ws"()
    repr_get_attr_int $I11, $P11, rx199_curclass, "$!pos"
    lt $I11, 0, rx199_fail675
    repr_get_attr_int rx199_pos, $P11, rx199_curclass, "$!pos"
    nqp_rxmark rx199_bstack, rxquantr206_done690, rx199_pos, 0
  rxquantr206_loop689:
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!pos", rx199_pos
    $P11 = rx199_cur."statement"()
    repr_get_attr_int $I11, $P11, rx199_curclass, "$!pos"
    lt $I11, 0, rx199_fail675
    nqp_rxmark rx199_bstack, rxsubrule207_pass691, -1, 0
  rxsubrule207_pass691:
    rx199_cstack = rx199_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx199_pos, $P11, rx199_curclass, "$!pos"
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!pos", rx199_pos
    $P11 = rx199_cur."eat_terminator"()
    repr_get_attr_int $I11, $P11, rx199_curclass, "$!pos"
    lt $I11, 0, rx199_fail675
    repr_get_attr_int rx199_pos, $P11, rx199_curclass, "$!pos"
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!pos", rx199_pos
    $P11 = rx199_cur."ws"()
    repr_get_attr_int $I11, $P11, rx199_curclass, "$!pos"
    lt $I11, 0, rx199_fail675
    repr_get_attr_int rx199_pos, $P11, rx199_curclass, "$!pos"
    nqp_rxpeek $I19, rx199_bstack, rxquantr206_done690
    inc $I19
    inc $I19
    set rx199_rep, rx199_bstack[$I19]
    nqp_rxcommit rx199_bstack, rxquantr206_done690
    inc rx199_rep
    nqp_rxmark rx199_bstack, rxquantr206_done690, rx199_pos, rx199_rep
    goto rxquantr206_loop689
  rxquantr206_done690:
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!pos", rx199_pos
    $P11 = rx199_cur."ws"()
    repr_get_attr_int $I11, $P11, rx199_curclass, "$!pos"
    lt $I11, 0, rx199_fail675
    repr_get_attr_int rx199_pos, $P11, rx199_curclass, "$!pos"
    goto alt201_end682
  alt201_end682:
    rx199_cur."!cursor_pass"(rx199_pos, "statementlist", 'backtrack'=>1)
    .return (rx199_cur)
  rx199_restart674:
    repr_get_attr_obj rx199_cstack, rx199_cur, rx199_curclass, "$!cstack"
  rx199_fail675:
    unless rx199_bstack, rx199_done673
    pop $I19, rx199_bstack
    if_null rx199_cstack, rx199_cstack_done678
    unless rx199_cstack, rx199_cstack_done678
    dec $I19
    set $P11, rx199_cstack[$I19]
  rx199_cstack_done678:
    pop rx199_rep, rx199_bstack
    pop rx199_pos, rx199_bstack
    pop $I19, rx199_bstack
    lt rx199_pos, -1, rx199_done673
    lt rx199_pos, 0, rx199_fail675
    eq $I19, 0, rx199_fail675
    nqp_islist $I20, rx199_cstack
    unless $I20, rx199_jump676
    elements $I18, rx199_bstack
    le $I18, 0, rx199_cut677
    dec $I18
    set $I18, rx199_bstack[$I18]
  rx199_cut677:
    assign rx199_cstack, $I18
  rx199_jump676:
    jump $I19
  rx199_done673:
    rx199_cur."!cursor_fail"()
    .return (rx199_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_46_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 742
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_47_1351203235.318' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx211_tgt
    .local int rx211_pos
    .local int rx211_off
    .local int rx211_eos
    .local int rx211_rep
    .local pmc rx211_cur
    .local pmc rx211_curclass
    .local pmc rx211_bstack
    .local pmc rx211_cstack
    (rx211_cur, rx211_tgt, rx211_pos, rx211_curclass, rx211_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx211_cur
    length rx211_eos, rx211_tgt
    eq $I19, 1, rx211_restart697
    gt rx211_pos, rx211_eos, rx211_fail698
    repr_get_attr_int $I11, self, rx211_curclass, "$!from"
    ne $I11, -1, rxscan212_done704
    goto rxscan212_scan703
  rxscan212_loop702:
    inc rx211_pos
    gt rx211_pos, rx211_eos, rx211_fail698
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!from", rx211_pos
  rxscan212_scan703:
    nqp_rxmark rx211_bstack, rxscan212_loop702, rx211_pos, 0
  rxscan212_done704:
    .const 'Sub' $P5001 = 'cuid_47_1351203235.318' 
    capture_lex $P5001
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    ge $I11, 0, rx211_fail698
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt218_0723
    nqp_push_label $P11, alt218_1725
    nqp_rxmark rx211_bstack, alt218_end722, -1, 0
    rx211_cur."!alt"(rx211_pos, "alt_nfa__9_1351203236.66", $P11)
    goto rx211_fail698
  alt218_0723:
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."statement_control"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail698
    nqp_rxmark rx211_bstack, rxsubrule219_pass724, -1, 0
  rxsubrule219_pass724:
    rx211_cstack = rx211_cur."!cursor_capture"($P11, "statement_control")
    repr_get_attr_int rx211_pos, $P11, rx211_curclass, "$!pos"
    goto alt218_end722
  alt218_1725:
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail698
    nqp_rxmark rx211_bstack, rxsubrule220_pass726, -1, 0
  rxsubrule220_pass726:
    rx211_cstack = rx211_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx211_pos, $P11, rx211_curclass, "$!pos"
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."ws"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail698
    repr_get_attr_int rx211_pos, $P11, rx211_curclass, "$!pos"
    nqp_rxmark rx211_bstack, rxquantr222_done729, rx211_pos, 0
  rxquantr222_loop728:
  alt223_0731:
    nqp_rxmark rx211_bstack, alt223_1732, rx211_pos, 0
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail698
    goto alt223_end730
  alt223_1732:
    nqp_rxmark rx211_bstack, alt223_2738, rx211_pos, 0
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."statement_mod_cond"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail698
    nqp_rxmark rx211_bstack, rxsubrule224_pass733, -1, 0
  rxsubrule224_pass733:
    rx211_cstack = rx211_cur."!cursor_capture"($P11, "statement_mod_cond")
    repr_get_attr_int rx211_pos, $P11, rx211_curclass, "$!pos"
    nqp_rxmark rx211_bstack, rxquantr225_done735, rx211_pos, 0
  rxquantr225_loop734:
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail698
    goto rxsubrule226_pass736
  rxsubrule226_back737:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail698
  rxsubrule226_pass736:
    rx211_cstack = rx211_cur."!cursor_capture"($P11, "statement_mod_loop")
    set_addr $I11, rxsubrule226_back737
    push rx211_bstack, $I11
    push rx211_bstack, 0
    push rx211_bstack, rx211_pos
    elements $I11, rx211_cstack
    push rx211_bstack, $I11
    repr_get_attr_int rx211_pos, $P11, rx211_curclass, "$!pos"
    nqp_rxpeek $I19, rx211_bstack, rxquantr225_done735
    inc $I19
    inc $I19
    set rx211_rep, rx211_bstack[$I19]
    nqp_rxcommit rx211_bstack, rxquantr225_done735
    inc rx211_rep
  rxquantr225_done735:
    goto alt223_end730
  alt223_2738:
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail698
    nqp_rxmark rx211_bstack, rxsubrule227_pass739, -1, 0
  rxsubrule227_pass739:
    rx211_cstack = rx211_cur."!cursor_capture"($P11, "statement_mod_loop")
    repr_get_attr_int rx211_pos, $P11, rx211_curclass, "$!pos"
  alt223_end730:
    nqp_rxpeek $I19, rx211_bstack, rxquantr222_done729
    inc $I19
    inc $I19
    set rx211_rep, rx211_bstack[$I19]
    nqp_rxcommit rx211_bstack, rxquantr222_done729
    inc rx211_rep
  rxquantr222_done729:
    goto alt218_end722
  alt218_end722:
    nqp_rxcommit rx211_bstack, alt218_end722
    rx211_cur."!cursor_pass"(rx211_pos, "statement", 'backtrack'=>1)
    .return (rx211_cur)
  rx211_restart697:
    repr_get_attr_obj rx211_cstack, rx211_cur, rx211_curclass, "$!cstack"
  rx211_fail698:
    unless rx211_bstack, rx211_done696
    pop $I19, rx211_bstack
    if_null rx211_cstack, rx211_cstack_done701
    unless rx211_cstack, rx211_cstack_done701
    dec $I19
    set $P11, rx211_cstack[$I19]
  rx211_cstack_done701:
    pop rx211_rep, rx211_bstack
    pop rx211_pos, rx211_bstack
    pop $I19, rx211_bstack
    lt rx211_pos, -1, rx211_done696
    lt rx211_pos, 0, rx211_fail698
    eq $I19, 0, rx211_fail698
    nqp_islist $I20, rx211_cstack
    unless $I20, rx211_jump699
    elements $I18, rx211_bstack
    le $I18, 0, rx211_cut700
    dec $I18
    set $I18, rx211_bstack[$I18]
  rx211_cut700:
    assign rx211_cstack, $I18
  rx211_jump699:
    jump $I19
  rx211_done696:
    rx211_cur."!cursor_fail"()
    .return (rx211_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_47_1351203235.318") :anon :lex :outer("cuid_46_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx213_tgt
    .local int rx213_pos
    .local int rx213_off
    .local int rx213_eos
    .local int rx213_rep
    .local pmc rx213_cur
    .local pmc rx213_curclass
    .local pmc rx213_bstack
    .local pmc rx213_cstack
    (rx213_cur, rx213_tgt, rx213_pos, rx213_curclass, rx213_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx213_cur
    length rx213_eos, rx213_tgt
    eq $I19, 1, rx213_restart707
    gt rx213_pos, rx213_eos, rx213_fail708
    repr_get_attr_int $I11, self, rx213_curclass, "$!from"
    ne $I11, -1, rxscan214_done714
    goto rxscan214_scan713
  rxscan214_loop712:
    inc rx213_pos
    gt rx213_pos, rx213_eos, rx213_fail708
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!from", rx213_pos
  rxscan214_scan713:
    nqp_rxmark rx213_bstack, rxscan214_loop712, rx213_pos, 0
  rxscan214_done714:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt215_0716
    nqp_push_label $P11, alt215_1720
    nqp_rxmark rx213_bstack, alt215_end715, -1, 0
    rx213_cur."!alt"(rx213_pos, "alt_nfa__8_1351203236.647", $P11)
    goto rx213_fail708
  alt215_0716:
  alt216_0718:
    nqp_rxmark rx213_bstack, alt216_1719, rx213_pos, 0
    add $I11, rx213_pos, 1
    gt $I11, rx213_eos, rx213_fail708
    substr $S10, rx213_tgt, rx213_pos, 1
    ne $S10, ucs4:"]", rx213_fail708
    add rx213_pos, 1
    goto alt216_end717
  alt216_1719:
    ge rx213_pos, rx213_eos, rx213_fail708
    substr $S11, rx213_tgt, rx213_pos, 1
    index $I11, ucs4:")}", $S11
    lt $I11, 0, rx213_fail708
    inc rx213_pos
  alt216_end717:
    goto alt215_end715
  alt215_1720:
    lt rx213_pos, rx213_eos, rx213_fail708
    goto alt215_end715
  alt215_end715:
    rx213_cur."!cursor_pass"(rx213_pos, 'backtrack'=>1)
    .return (rx213_cur)
  rx213_restart707:
    repr_get_attr_obj rx213_cstack, rx213_cur, rx213_curclass, "$!cstack"
  rx213_fail708:
    unless rx213_bstack, rx213_done706
    pop $I19, rx213_bstack
    if_null rx213_cstack, rx213_cstack_done711
    unless rx213_cstack, rx213_cstack_done711
    dec $I19
    set $P11, rx213_cstack[$I19]
  rx213_cstack_done711:
    pop rx213_rep, rx213_bstack
    pop rx213_pos, rx213_bstack
    pop $I19, rx213_bstack
    lt rx213_pos, -1, rx213_done706
    lt rx213_pos, 0, rx213_fail708
    eq $I19, 0, rx213_fail708
    nqp_islist $I20, rx213_cstack
    unless $I20, rx213_jump709
    elements $I18, rx213_bstack
    le $I18, 0, rx213_cut710
    dec $I18
    set $I18, rx213_bstack[$I18]
  rx213_cut710:
    assign rx213_cstack, $I18
  rx213_jump709:
    jump $I19
  rx213_done706:
    rx213_cur."!cursor_fail"()
    .return (rx213_cur) 
.end
.HLL "nqp"
.namespace []
.sub "eat_terminator" :subid("cuid_48_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 755
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx228_tgt
    .local int rx228_pos
    .local int rx228_off
    .local int rx228_eos
    .local int rx228_rep
    .local pmc rx228_cur
    .local pmc rx228_curclass
    .local pmc rx228_bstack
    .local pmc rx228_cstack
    (rx228_cur, rx228_tgt, rx228_pos, rx228_curclass, rx228_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx228_cur
    length rx228_eos, rx228_tgt
    eq $I19, 1, rx228_restart742
    gt rx228_pos, rx228_eos, rx228_fail743
    repr_get_attr_int $I11, self, rx228_curclass, "$!from"
    ne $I11, -1, rxscan229_done749
    goto rxscan229_scan748
  rxscan229_loop747:
    inc rx228_pos
    gt rx228_pos, rx228_eos, rx228_fail743
    repr_bind_attr_int rx228_cur, rx228_curclass, "$!from", rx228_pos
  rxscan229_scan748:
    nqp_rxmark rx228_bstack, rxscan229_loop747, rx228_pos, 0
  rxscan229_done749:
  alt230_0751:
    nqp_rxmark rx228_bstack, alt230_1752, rx228_pos, 0
    add $I11, rx228_pos, 1
    gt $I11, rx228_eos, rx228_fail743
    substr $S10, rx228_tgt, rx228_pos, 1
    ne $S10, ucs4:";", rx228_fail743
    add rx228_pos, 1
    goto alt230_end750
  alt230_1752:
    nqp_rxmark rx228_bstack, alt230_2753, rx228_pos, 0
    repr_bind_attr_int rx228_cur, rx228_curclass, "$!pos", rx228_pos
    $P11 = rx228_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx228_curclass, "$!pos"
    lt $I11, 0, rx228_fail743
    goto alt230_end750
  alt230_2753:
    nqp_rxmark rx228_bstack, alt230_3754, rx228_pos, 0
    repr_bind_attr_int rx228_cur, rx228_curclass, "$!pos", rx228_pos
    $P11 = rx228_cur."terminator"()
    repr_get_attr_int $I11, $P11, rx228_curclass, "$!pos"
    lt $I11, 0, rx228_fail743
    goto alt230_end750
  alt230_3754:
    lt rx228_pos, rx228_eos, rx228_fail743
  alt230_end750:
    rx228_cur."!cursor_pass"(rx228_pos, "eat_terminator", 'backtrack'=>1)
    .return (rx228_cur)
  rx228_restart742:
    repr_get_attr_obj rx228_cstack, rx228_cur, rx228_curclass, "$!cstack"
  rx228_fail743:
    unless rx228_bstack, rx228_done741
    pop $I19, rx228_bstack
    if_null rx228_cstack, rx228_cstack_done746
    unless rx228_cstack, rx228_cstack_done746
    dec $I19
    set $P11, rx228_cstack[$I19]
  rx228_cstack_done746:
    pop rx228_rep, rx228_bstack
    pop rx228_pos, rx228_bstack
    pop $I19, rx228_bstack
    lt rx228_pos, -1, rx228_done741
    lt rx228_pos, 0, rx228_fail743
    eq $I19, 0, rx228_fail743
    nqp_islist $I20, rx228_cstack
    unless $I20, rx228_jump744
    elements $I18, rx228_bstack
    le $I18, 0, rx228_cut745
    dec $I18
    set $I18, rx228_bstack[$I18]
  rx228_cut745:
    assign rx228_cstack, $I18
  rx228_jump744:
    jump $I19
  rx228_done741:
    rx228_cur."!cursor_fail"()
    .return (rx228_cur) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_49_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 762
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx232_tgt
    .local int rx232_pos
    .local int rx232_off
    .local int rx232_eos
    .local int rx232_rep
    .local pmc rx232_cur
    .local pmc rx232_curclass
    .local pmc rx232_bstack
    .local pmc rx232_cstack
    (rx232_cur, rx232_tgt, rx232_pos, rx232_curclass, rx232_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx232_cur
    length rx232_eos, rx232_tgt
    eq $I19, 1, rx232_restart758
    gt rx232_pos, rx232_eos, rx232_fail759
    repr_get_attr_int $I11, self, rx232_curclass, "$!from"
    ne $I11, -1, rxscan233_done765
    goto rxscan233_scan764
  rxscan233_loop763:
    inc rx232_pos
    gt rx232_pos, rx232_eos, rx232_fail759
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!from", rx232_pos
  rxscan233_scan764:
    nqp_rxmark rx232_bstack, rxscan233_loop763, rx232_pos, 0
  rxscan233_done765:
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!pos", rx232_pos
    $P11 = rx232_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx232_curclass, "$!pos"
    lt $I11, 0, rx232_fail759
    nqp_rxmark rx232_bstack, rxsubrule234_pass766, -1, 0
  rxsubrule234_pass766:
    rx232_cstack = rx232_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx232_pos, $P11, rx232_curclass, "$!pos"
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!pos", rx232_pos
    $P11 = rx232_cur."ws"()
    repr_get_attr_int $I11, $P11, rx232_curclass, "$!pos"
    lt $I11, 0, rx232_fail759
    repr_get_attr_int rx232_pos, $P11, rx232_curclass, "$!pos"
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!pos", rx232_pos
    $P11 = rx232_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx232_curclass, "$!pos"
    lt $I11, 0, rx232_fail759
    nqp_rxmark rx232_bstack, rxsubrule236_pass768, -1, 0
  rxsubrule236_pass768:
    rx232_cstack = rx232_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx232_pos, $P11, rx232_curclass, "$!pos"
    rx232_cur."!cursor_pass"(rx232_pos, "xblock", 'backtrack'=>1)
    .return (rx232_cur)
  rx232_restart758:
    repr_get_attr_obj rx232_cstack, rx232_cur, rx232_curclass, "$!cstack"
  rx232_fail759:
    unless rx232_bstack, rx232_done757
    pop $I19, rx232_bstack
    if_null rx232_cstack, rx232_cstack_done762
    unless rx232_cstack, rx232_cstack_done762
    dec $I19
    set $P11, rx232_cstack[$I19]
  rx232_cstack_done762:
    pop rx232_rep, rx232_bstack
    pop rx232_pos, rx232_bstack
    pop $I19, rx232_bstack
    lt rx232_pos, -1, rx232_done757
    lt rx232_pos, 0, rx232_fail759
    eq $I19, 0, rx232_fail759
    nqp_islist $I20, rx232_cstack
    unless $I20, rx232_jump760
    elements $I18, rx232_bstack
    le $I18, 0, rx232_cut761
    dec $I18
    set $I18, rx232_bstack[$I18]
  rx232_cut761:
    assign rx232_cstack, $I18
  rx232_jump760:
    jump $I19
  rx232_done757:
    rx232_cur."!cursor_fail"()
    .return (rx232_cur) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_50_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 766
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx237_tgt
    .local int rx237_pos
    .local int rx237_off
    .local int rx237_eos
    .local int rx237_rep
    .local pmc rx237_cur
    .local pmc rx237_curclass
    .local pmc rx237_bstack
    .local pmc rx237_cstack
    (rx237_cur, rx237_tgt, rx237_pos, rx237_curclass, rx237_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx237_cur
    length rx237_eos, rx237_tgt
    eq $I19, 1, rx237_restart771
    gt rx237_pos, rx237_eos, rx237_fail772
    repr_get_attr_int $I11, self, rx237_curclass, "$!from"
    ne $I11, -1, rxscan238_done778
    goto rxscan238_scan777
  rxscan238_loop776:
    inc rx237_pos
    gt rx237_pos, rx237_eos, rx237_fail772
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!from", rx237_pos
  rxscan238_scan777:
    nqp_rxmark rx237_bstack, rxscan238_loop776, rx237_pos, 0
  rxscan238_done778:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt239_0780
    nqp_push_label $P11, alt239_1786
    nqp_push_label $P11, alt239_2789
    nqp_rxmark rx237_bstack, alt239_end779, -1, 0
    rx237_cur."!alt"(rx237_pos, "alt_nfa__10_1351203236.687", $P11)
    goto rx237_fail772
  alt239_0780:
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail772
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail772
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."signature"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail772
    nqp_rxmark rx237_bstack, rxsubrule242_pass783, -1, 0
  rxsubrule242_pass783:
    rx237_cstack = rx237_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."ws"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail772
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail772
    nqp_rxmark rx237_bstack, rxsubrule244_pass785, -1, 0
  rxsubrule244_pass785:
    rx237_cstack = rx237_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    goto alt239_end779
  alt239_1786:
    ge rx237_pos, rx237_eos, rx237_fail772
    substr $S11, rx237_tgt, rx237_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx237_fail772
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail772
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail772
    nqp_rxmark rx237_bstack, rxsubrule246_pass788, -1, 0
  rxsubrule246_pass788:
    rx237_cstack = rx237_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    goto alt239_end779
  alt239_2789:
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail772
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    goto alt239_end779
  alt239_end779:
    rx237_cur."!cursor_pass"(rx237_pos, "pblock", 'backtrack'=>1)
    .return (rx237_cur)
  rx237_restart771:
    repr_get_attr_obj rx237_cstack, rx237_cur, rx237_curclass, "$!cstack"
  rx237_fail772:
    unless rx237_bstack, rx237_done770
    pop $I19, rx237_bstack
    if_null rx237_cstack, rx237_cstack_done775
    unless rx237_cstack, rx237_cstack_done775
    dec $I19
    set $P11, rx237_cstack[$I19]
  rx237_cstack_done775:
    pop rx237_rep, rx237_bstack
    pop rx237_pos, rx237_bstack
    pop $I19, rx237_bstack
    lt rx237_pos, -1, rx237_done770
    lt rx237_pos, 0, rx237_fail772
    eq $I19, 0, rx237_fail772
    nqp_islist $I20, rx237_cstack
    unless $I20, rx237_jump773
    elements $I18, rx237_bstack
    le $I18, 0, rx237_cut774
    dec $I18
    set $I18, rx237_bstack[$I18]
  rx237_cut774:
    assign rx237_cstack, $I18
  rx237_jump773:
    jump $I19
  rx237_done770:
    rx237_cur."!cursor_fail"()
    .return (rx237_cur) 
.end
.HLL "nqp"
.namespace []
.sub "lambda" :subid("cuid_51_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 777
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx248_tgt
    .local int rx248_pos
    .local int rx248_off
    .local int rx248_eos
    .local int rx248_rep
    .local pmc rx248_cur
    .local pmc rx248_curclass
    .local pmc rx248_bstack
    .local pmc rx248_cstack
    (rx248_cur, rx248_tgt, rx248_pos, rx248_curclass, rx248_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx248_cur
    length rx248_eos, rx248_tgt
    eq $I19, 1, rx248_restart793
    gt rx248_pos, rx248_eos, rx248_fail794
    repr_get_attr_int $I11, self, rx248_curclass, "$!from"
    ne $I11, -1, rxscan249_done800
    goto rxscan249_scan799
  rxscan249_loop798:
    inc rx248_pos
    gt rx248_pos, rx248_eos, rx248_fail794
    repr_bind_attr_int rx248_cur, rx248_curclass, "$!from", rx248_pos
  rxscan249_scan799:
    nqp_rxmark rx248_bstack, rxscan249_loop798, rx248_pos, 0
  rxscan249_done800:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt250_0802
    nqp_push_label $P11, alt250_1803
    nqp_rxmark rx248_bstack, alt250_end801, -1, 0
    rx248_cur."!alt"(rx248_pos, "alt_nfa__11_1351203236.692", $P11)
    goto rx248_fail794
  alt250_0802:
    add $I11, rx248_pos, 2
    gt $I11, rx248_eos, rx248_fail794
    substr $S10, rx248_tgt, rx248_pos, 2
    ne $S10, ucs4:"->", rx248_fail794
    add rx248_pos, 2
    goto alt250_end801
  alt250_1803:
    add $I11, rx248_pos, 3
    gt $I11, rx248_eos, rx248_fail794
    substr $S10, rx248_tgt, rx248_pos, 3
    ne $S10, ucs4:"<->", rx248_fail794
    add rx248_pos, 3
    goto alt250_end801
  alt250_end801:
    rx248_cur."!cursor_pass"(rx248_pos, "lambda", 'backtrack'=>1)
    .return (rx248_cur)
  rx248_restart793:
    repr_get_attr_obj rx248_cstack, rx248_cur, rx248_curclass, "$!cstack"
  rx248_fail794:
    unless rx248_bstack, rx248_done792
    pop $I19, rx248_bstack
    if_null rx248_cstack, rx248_cstack_done797
    unless rx248_cstack, rx248_cstack_done797
    dec $I19
    set $P11, rx248_cstack[$I19]
  rx248_cstack_done797:
    pop rx248_rep, rx248_bstack
    pop rx248_pos, rx248_bstack
    pop $I19, rx248_bstack
    lt rx248_pos, -1, rx248_done792
    lt rx248_pos, 0, rx248_fail794
    eq $I19, 0, rx248_fail794
    nqp_islist $I20, rx248_cstack
    unless $I20, rx248_jump795
    elements $I18, rx248_bstack
    le $I18, 0, rx248_cut796
    dec $I18
    set $I18, rx248_bstack[$I18]
  rx248_cut796:
    assign rx248_cstack, $I18
  rx248_jump795:
    jump $I19
  rx248_done792:
    rx248_cur."!cursor_fail"()
    .return (rx248_cur) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_52_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 779
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx251_tgt
    .local int rx251_pos
    .local int rx251_off
    .local int rx251_eos
    .local int rx251_rep
    .local pmc rx251_cur
    .local pmc rx251_curclass
    .local pmc rx251_bstack
    .local pmc rx251_cstack
    (rx251_cur, rx251_tgt, rx251_pos, rx251_curclass, rx251_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx251_cur
    length rx251_eos, rx251_tgt
    eq $I19, 1, rx251_restart806
    gt rx251_pos, rx251_eos, rx251_fail807
    repr_get_attr_int $I11, self, rx251_curclass, "$!from"
    ne $I11, -1, rxscan252_done813
    goto rxscan252_scan812
  rxscan252_loop811:
    inc rx251_pos
    gt rx251_pos, rx251_eos, rx251_fail807
    repr_bind_attr_int rx251_cur, rx251_curclass, "$!from", rx251_pos
  rxscan252_scan812:
    nqp_rxmark rx251_bstack, rxscan252_loop811, rx251_pos, 0
  rxscan252_done813:
  alt253_0815:
    nqp_rxmark rx251_bstack, alt253_1816, rx251_pos, 0
    ge rx251_pos, rx251_eos, rx251_fail807
    substr $S11, rx251_tgt, rx251_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx251_fail807
    goto alt253_end814
  alt253_1816:
    repr_bind_attr_int rx251_cur, rx251_curclass, "$!pos", rx251_pos
    $P11 = rx251_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx251_curclass, "$!pos"
    lt $I11, 0, rx251_fail807
    repr_get_attr_int rx251_pos, $P11, rx251_curclass, "$!pos"
  alt253_end814:
    repr_bind_attr_int rx251_cur, rx251_curclass, "$!pos", rx251_pos
    $P11 = rx251_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx251_curclass, "$!pos"
    lt $I11, 0, rx251_fail807
    repr_get_attr_int rx251_pos, $P11, rx251_curclass, "$!pos"
    repr_bind_attr_int rx251_cur, rx251_curclass, "$!pos", rx251_pos
    $P11 = rx251_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx251_curclass, "$!pos"
    lt $I11, 0, rx251_fail807
    nqp_rxmark rx251_bstack, rxsubrule256_pass819, -1, 0
  rxsubrule256_pass819:
    rx251_cstack = rx251_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx251_pos, $P11, rx251_curclass, "$!pos"
    rx251_cur."!cursor_pass"(rx251_pos, "block", 'backtrack'=>1)
    .return (rx251_cur)
  rx251_restart806:
    repr_get_attr_obj rx251_cstack, rx251_cur, rx251_curclass, "$!cstack"
  rx251_fail807:
    unless rx251_bstack, rx251_done805
    pop $I19, rx251_bstack
    if_null rx251_cstack, rx251_cstack_done810
    unless rx251_cstack, rx251_cstack_done810
    dec $I19
    set $P11, rx251_cstack[$I19]
  rx251_cstack_done810:
    pop rx251_rep, rx251_bstack
    pop rx251_pos, rx251_bstack
    pop $I19, rx251_bstack
    lt rx251_pos, -1, rx251_done805
    lt rx251_pos, 0, rx251_fail807
    eq $I19, 0, rx251_fail807
    nqp_islist $I20, rx251_cstack
    unless $I20, rx251_jump808
    elements $I18, rx251_bstack
    le $I18, 0, rx251_cut809
    dec $I18
    set $I18, rx251_bstack[$I18]
  rx251_cut809:
    assign rx251_cstack, $I18
  rx251_jump808:
    jump $I19
  rx251_done805:
    rx251_cur."!cursor_fail"()
    .return (rx251_cur) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_53_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 785
    .param pmc _lex_param_0 
    .lex "%*HANDLERS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx257_tgt
    .local int rx257_pos
    .local int rx257_off
    .local int rx257_eos
    .local int rx257_rep
    .local pmc rx257_cur
    .local pmc rx257_curclass
    .local pmc rx257_bstack
    .local pmc rx257_cstack
    (rx257_cur, rx257_tgt, rx257_pos, rx257_curclass, rx257_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx257_cur
    length rx257_eos, rx257_tgt
    eq $I19, 1, rx257_restart822
    gt rx257_pos, rx257_eos, rx257_fail823
    repr_get_attr_int $I11, self, rx257_curclass, "$!from"
    ne $I11, -1, rxscan258_done829
    goto rxscan258_scan828
  rxscan258_loop827:
    inc rx257_pos
    gt rx257_pos, rx257_eos, rx257_fail823
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!from", rx257_pos
  rxscan258_scan828:
    nqp_rxmark rx257_bstack, rxscan258_loop827, rx257_pos, 0
  rxscan258_done829:
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!pos", rx257_pos
    store_lex unicode:"$\x{a2}", rx257_cur
    unless_null $P101, fallback830
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback831
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback831:
    unless_null $P5002, vivi_259832
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_259832:
    set $P101, $P5002
  fallback830:
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!pos", rx257_pos
    $P11 = rx257_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx257_curclass, "$!pos"
    lt $I11, 0, rx257_fail823
    repr_get_attr_int rx257_pos, $P11, rx257_curclass, "$!pos"
  alt261_0835:
    nqp_rxmark rx257_bstack, alt261_1837, rx257_pos, 0
    add $I11, rx257_pos, 14
    gt $I11, rx257_eos, rx257_fail823
    substr $S10, rx257_tgt, rx257_pos, 14
    ne $S10, ucs4:"{YOU_ARE_HERE}", rx257_fail823
    add rx257_pos, 14
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!pos", rx257_pos
    $P11 = rx257_cur."you_are_here"()
    repr_get_attr_int $I11, $P11, rx257_curclass, "$!pos"
    lt $I11, 0, rx257_fail823
    nqp_rxmark rx257_bstack, rxsubrule262_pass836, -1, 0
  rxsubrule262_pass836:
    rx257_cstack = rx257_cur."!cursor_capture"($P11, "you_are_here")
    repr_get_attr_int rx257_pos, $P11, rx257_curclass, "$!pos"
    goto alt261_end834
  alt261_1837:
    add $I11, rx257_pos, 1
    gt $I11, rx257_eos, rx257_fail823
    substr $S10, rx257_tgt, rx257_pos, 1
    ne $S10, ucs4:"{", rx257_fail823
    add rx257_pos, 1
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!pos", rx257_pos
    $P11 = rx257_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx257_curclass, "$!pos"
    lt $I11, 0, rx257_fail823
    nqp_rxmark rx257_bstack, rxsubrule263_pass838, -1, 0
  rxsubrule263_pass838:
    rx257_cstack = rx257_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx257_pos, $P11, rx257_curclass, "$!pos"
  alt264_0840:
    nqp_rxmark rx257_bstack, alt264_1841, rx257_pos, 0
    add $I11, rx257_pos, 1
    gt $I11, rx257_eos, rx257_fail823
    substr $S10, rx257_tgt, rx257_pos, 1
    ne $S10, ucs4:"}", rx257_fail823
    add rx257_pos, 1
    goto alt264_end839
  alt264_1841:
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!pos", rx257_pos
    $P11 = rx257_cur."FAILGOAL"("'}'")
    repr_get_attr_int $I11, $P11, rx257_curclass, "$!pos"
    lt $I11, 0, rx257_fail823
    goto rxsubrule265_pass842
  rxsubrule265_back843:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx257_curclass, "$!pos"
    lt $I11, 0, rx257_fail823
  rxsubrule265_pass842:
    rx257_cstack = rx257_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule265_back843
    push rx257_bstack, $I11
    push rx257_bstack, 0
    push rx257_bstack, rx257_pos
    elements $I11, rx257_cstack
    push rx257_bstack, $I11
    repr_get_attr_int rx257_pos, $P11, rx257_curclass, "$!pos"
  alt264_end839:
  alt261_end834:
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!pos", rx257_pos
    $P11 = rx257_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx257_curclass, "$!pos"
    lt $I11, 0, rx257_fail823
    rx257_cur."!cursor_pass"(rx257_pos, "blockoid", 'backtrack'=>1)
    .return (rx257_cur)
  rx257_restart822:
    repr_get_attr_obj rx257_cstack, rx257_cur, rx257_curclass, "$!cstack"
  rx257_fail823:
    unless rx257_bstack, rx257_done821
    pop $I19, rx257_bstack
    if_null rx257_cstack, rx257_cstack_done826
    unless rx257_cstack, rx257_cstack_done826
    dec $I19
    set $P11, rx257_cstack[$I19]
  rx257_cstack_done826:
    pop rx257_rep, rx257_bstack
    pop rx257_pos, rx257_bstack
    pop $I19, rx257_bstack
    lt rx257_pos, -1, rx257_done821
    lt rx257_pos, 0, rx257_fail823
    eq $I19, 0, rx257_fail823
    nqp_islist $I20, rx257_cstack
    unless $I20, rx257_jump824
    elements $I18, rx257_bstack
    le $I18, 0, rx257_cut825
    dec $I18
    set $I18, rx257_bstack[$I18]
  rx257_cut825:
    assign rx257_cstack, $I18
  rx257_jump824:
    jump $I19
  rx257_done821:
    rx257_cur."!cursor_fail"()
    .return (rx257_cur) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_54_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 795
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx266_tgt
    .local int rx266_pos
    .local int rx266_off
    .local int rx266_eos
    .local int rx266_rep
    .local pmc rx266_cur
    .local pmc rx266_curclass
    .local pmc rx266_bstack
    .local pmc rx266_cstack
    (rx266_cur, rx266_tgt, rx266_pos, rx266_curclass, rx266_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx266_cur
    length rx266_eos, rx266_tgt
    eq $I19, 1, rx266_restart846
    gt rx266_pos, rx266_eos, rx266_fail847
    repr_get_attr_int $I11, self, rx266_curclass, "$!from"
    ne $I11, -1, rxscan267_done853
    goto rxscan267_scan852
  rxscan267_loop851:
    inc rx266_pos
    gt rx266_pos, rx266_eos, rx266_fail847
    repr_bind_attr_int rx266_cur, rx266_curclass, "$!from", rx266_pos
  rxscan267_scan852:
    nqp_rxmark rx266_bstack, rxscan267_loop851, rx266_pos, 0
  rxscan267_done853:
    rx266_cur."!cursor_pass"(rx266_pos, "newpad", 'backtrack'=>1)
    .return (rx266_cur)
  rx266_restart846:
    repr_get_attr_obj rx266_cstack, rx266_cur, rx266_curclass, "$!cstack"
  rx266_fail847:
    unless rx266_bstack, rx266_done845
    pop $I19, rx266_bstack
    if_null rx266_cstack, rx266_cstack_done850
    unless rx266_cstack, rx266_cstack_done850
    dec $I19
    set $P11, rx266_cstack[$I19]
  rx266_cstack_done850:
    pop rx266_rep, rx266_bstack
    pop rx266_pos, rx266_bstack
    pop $I19, rx266_bstack
    lt rx266_pos, -1, rx266_done845
    lt rx266_pos, 0, rx266_fail847
    eq $I19, 0, rx266_fail847
    nqp_islist $I20, rx266_cstack
    unless $I20, rx266_jump848
    elements $I18, rx266_bstack
    le $I18, 0, rx266_cut849
    dec $I18
    set $I18, rx266_bstack[$I18]
  rx266_cut849:
    assign rx266_cstack, $I18
  rx266_jump848:
    jump $I19
  rx266_done845:
    rx266_cur."!cursor_fail"()
    .return (rx266_cur) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_55_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 796
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx269_tgt
    .local int rx269_pos
    .local int rx269_off
    .local int rx269_eos
    .local int rx269_rep
    .local pmc rx269_cur
    .local pmc rx269_curclass
    .local pmc rx269_bstack
    .local pmc rx269_cstack
    (rx269_cur, rx269_tgt, rx269_pos, rx269_curclass, rx269_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx269_cur
    length rx269_eos, rx269_tgt
    eq $I19, 1, rx269_restart857
    gt rx269_pos, rx269_eos, rx269_fail858
    repr_get_attr_int $I11, self, rx269_curclass, "$!from"
    ne $I11, -1, rxscan270_done864
    goto rxscan270_scan863
  rxscan270_loop862:
    inc rx269_pos
    gt rx269_pos, rx269_eos, rx269_fail858
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!from", rx269_pos
  rxscan270_scan863:
    nqp_rxmark rx269_bstack, rxscan270_loop862, rx269_pos, 0
  rxscan270_done864:
    rx269_cur."!cursor_pass"(rx269_pos, "outerctx", 'backtrack'=>1)
    .return (rx269_cur)
  rx269_restart857:
    repr_get_attr_obj rx269_cstack, rx269_cur, rx269_curclass, "$!cstack"
  rx269_fail858:
    unless rx269_bstack, rx269_done856
    pop $I19, rx269_bstack
    if_null rx269_cstack, rx269_cstack_done861
    unless rx269_cstack, rx269_cstack_done861
    dec $I19
    set $P11, rx269_cstack[$I19]
  rx269_cstack_done861:
    pop rx269_rep, rx269_bstack
    pop rx269_pos, rx269_bstack
    pop $I19, rx269_bstack
    lt rx269_pos, -1, rx269_done856
    lt rx269_pos, 0, rx269_fail858
    eq $I19, 0, rx269_fail858
    nqp_islist $I20, rx269_cstack
    unless $I20, rx269_jump859
    elements $I18, rx269_bstack
    le $I18, 0, rx269_cut860
    dec $I18
    set $I18, rx269_bstack[$I18]
  rx269_cut860:
    assign rx269_cstack, $I18
  rx269_jump859:
    jump $I19
  rx269_done856:
    rx269_cur."!cursor_fail"()
    .return (rx269_cur) 
.end
.HLL "nqp"
.namespace []
.sub "finishpad" :subid("cuid_56_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 797
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx272_tgt
    .local int rx272_pos
    .local int rx272_off
    .local int rx272_eos
    .local int rx272_rep
    .local pmc rx272_cur
    .local pmc rx272_curclass
    .local pmc rx272_bstack
    .local pmc rx272_cstack
    (rx272_cur, rx272_tgt, rx272_pos, rx272_curclass, rx272_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx272_cur
    length rx272_eos, rx272_tgt
    eq $I19, 1, rx272_restart868
    gt rx272_pos, rx272_eos, rx272_fail869
    repr_get_attr_int $I11, self, rx272_curclass, "$!from"
    ne $I11, -1, rxscan273_done875
    goto rxscan273_scan874
  rxscan273_loop873:
    inc rx272_pos
    gt rx272_pos, rx272_eos, rx272_fail869
    repr_bind_attr_int rx272_cur, rx272_curclass, "$!from", rx272_pos
  rxscan273_scan874:
    nqp_rxmark rx272_bstack, rxscan273_loop873, rx272_pos, 0
  rxscan273_done875:
    rx272_cur."!cursor_pass"(rx272_pos, "finishpad", 'backtrack'=>1)
    .return (rx272_cur)
  rx272_restart868:
    repr_get_attr_obj rx272_cstack, rx272_cur, rx272_curclass, "$!cstack"
  rx272_fail869:
    unless rx272_bstack, rx272_done867
    pop $I19, rx272_bstack
    if_null rx272_cstack, rx272_cstack_done872
    unless rx272_cstack, rx272_cstack_done872
    dec $I19
    set $P11, rx272_cstack[$I19]
  rx272_cstack_done872:
    pop rx272_rep, rx272_bstack
    pop rx272_pos, rx272_bstack
    pop $I19, rx272_bstack
    lt rx272_pos, -1, rx272_done867
    lt rx272_pos, 0, rx272_fail869
    eq $I19, 0, rx272_fail869
    nqp_islist $I20, rx272_cstack
    unless $I20, rx272_jump870
    elements $I18, rx272_bstack
    le $I18, 0, rx272_cut871
    dec $I18
    set $I18, rx272_bstack[$I18]
  rx272_cut871:
    assign rx272_cstack, $I18
  rx272_jump870:
    jump $I19
  rx272_done867:
    rx272_cur."!cursor_fail"()
    .return (rx272_cur) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_57_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 798
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx275_tgt
    .local int rx275_pos
    .local int rx275_off
    .local int rx275_eos
    .local int rx275_rep
    .local pmc rx275_cur
    .local pmc rx275_curclass
    .local pmc rx275_bstack
    .local pmc rx275_cstack
    (rx275_cur, rx275_tgt, rx275_pos, rx275_curclass, rx275_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx275_cur
    length rx275_eos, rx275_tgt
    eq $I19, 1, rx275_restart879
    gt rx275_pos, rx275_eos, rx275_fail880
    repr_get_attr_int $I11, self, rx275_curclass, "$!from"
    ne $I11, -1, rxscan276_done886
    goto rxscan276_scan885
  rxscan276_loop884:
    inc rx275_pos
    gt rx275_pos, rx275_eos, rx275_fail880
    repr_bind_attr_int rx275_cur, rx275_curclass, "$!from", rx275_pos
  rxscan276_scan885:
    nqp_rxmark rx275_bstack, rxscan276_loop884, rx275_pos, 0
  rxscan276_done886:
    rx275_cur."!cursor_pass"(rx275_pos, "you_are_here", 'backtrack'=>1)
    .return (rx275_cur)
  rx275_restart879:
    repr_get_attr_obj rx275_cstack, rx275_cur, rx275_curclass, "$!cstack"
  rx275_fail880:
    unless rx275_bstack, rx275_done878
    pop $I19, rx275_bstack
    if_null rx275_cstack, rx275_cstack_done883
    unless rx275_cstack, rx275_cstack_done883
    dec $I19
    set $P11, rx275_cstack[$I19]
  rx275_cstack_done883:
    pop rx275_rep, rx275_bstack
    pop rx275_pos, rx275_bstack
    pop $I19, rx275_bstack
    lt rx275_pos, -1, rx275_done878
    lt rx275_pos, 0, rx275_fail880
    eq $I19, 0, rx275_fail880
    nqp_islist $I20, rx275_cstack
    unless $I20, rx275_jump881
    elements $I18, rx275_bstack
    le $I18, 0, rx275_cut882
    dec $I18
    set $I18, rx275_bstack[$I18]
  rx275_cut882:
    assign rx275_cstack, $I18
  rx275_jump881:
    jump $I19
  rx275_done878:
    rx275_cur."!cursor_fail"()
    .return (rx275_cur) 
.end
.HLL "nqp"
.namespace []
.sub "terminator" :subid("cuid_58_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 800
    .param pmc self 
    $P5001 = self."!protoregex"("terminator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<;>" :subid("cuid_59_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 802
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx278_tgt
    .local int rx278_pos
    .local int rx278_off
    .local int rx278_eos
    .local int rx278_rep
    .local pmc rx278_cur
    .local pmc rx278_curclass
    .local pmc rx278_bstack
    .local pmc rx278_cstack
    (rx278_cur, rx278_tgt, rx278_pos, rx278_curclass, rx278_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx278_cur
    length rx278_eos, rx278_tgt
    eq $I19, 1, rx278_restart890
    gt rx278_pos, rx278_eos, rx278_fail891
    repr_get_attr_int $I11, self, rx278_curclass, "$!from"
    ne $I11, -1, rxscan279_done897
    goto rxscan279_scan896
  rxscan279_loop895:
    inc rx278_pos
    gt rx278_pos, rx278_eos, rx278_fail891
    repr_bind_attr_int rx278_cur, rx278_curclass, "$!from", rx278_pos
  rxscan279_scan896:
    nqp_rxmark rx278_bstack, rxscan279_loop895, rx278_pos, 0
  rxscan279_done897:
    ge rx278_pos, rx278_eos, rx278_fail891
    substr $S11, rx278_tgt, rx278_pos, 1
    index $I11, ucs4:";", $S11
    lt $I11, 0, rx278_fail891
    rx278_cur."!cursor_pass"(rx278_pos, "terminator:sym<;>", 'backtrack'=>1)
    .return (rx278_cur)
  rx278_restart890:
    repr_get_attr_obj rx278_cstack, rx278_cur, rx278_curclass, "$!cstack"
  rx278_fail891:
    unless rx278_bstack, rx278_done889
    pop $I19, rx278_bstack
    if_null rx278_cstack, rx278_cstack_done894
    unless rx278_cstack, rx278_cstack_done894
    dec $I19
    set $P11, rx278_cstack[$I19]
  rx278_cstack_done894:
    pop rx278_rep, rx278_bstack
    pop rx278_pos, rx278_bstack
    pop $I19, rx278_bstack
    lt rx278_pos, -1, rx278_done889
    lt rx278_pos, 0, rx278_fail891
    eq $I19, 0, rx278_fail891
    nqp_islist $I20, rx278_cstack
    unless $I20, rx278_jump892
    elements $I18, rx278_bstack
    le $I18, 0, rx278_cut893
    dec $I18
    set $I18, rx278_bstack[$I18]
  rx278_cut893:
    assign rx278_cstack, $I18
  rx278_jump892:
    jump $I19
  rx278_done889:
    rx278_cur."!cursor_fail"()
    .return (rx278_cur) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<}>" :subid("cuid_60_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 803
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx280_tgt
    .local int rx280_pos
    .local int rx280_off
    .local int rx280_eos
    .local int rx280_rep
    .local pmc rx280_cur
    .local pmc rx280_curclass
    .local pmc rx280_bstack
    .local pmc rx280_cstack
    (rx280_cur, rx280_tgt, rx280_pos, rx280_curclass, rx280_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx280_cur
    length rx280_eos, rx280_tgt
    eq $I19, 1, rx280_restart900
    gt rx280_pos, rx280_eos, rx280_fail901
    repr_get_attr_int $I11, self, rx280_curclass, "$!from"
    ne $I11, -1, rxscan281_done907
    goto rxscan281_scan906
  rxscan281_loop905:
    inc rx280_pos
    gt rx280_pos, rx280_eos, rx280_fail901
    repr_bind_attr_int rx280_cur, rx280_curclass, "$!from", rx280_pos
  rxscan281_scan906:
    nqp_rxmark rx280_bstack, rxscan281_loop905, rx280_pos, 0
  rxscan281_done907:
    ge rx280_pos, rx280_eos, rx280_fail901
    substr $S11, rx280_tgt, rx280_pos, 1
    index $I11, ucs4:"}", $S11
    lt $I11, 0, rx280_fail901
    rx280_cur."!cursor_pass"(rx280_pos, "terminator:sym<}>", 'backtrack'=>1)
    .return (rx280_cur)
  rx280_restart900:
    repr_get_attr_obj rx280_cstack, rx280_cur, rx280_curclass, "$!cstack"
  rx280_fail901:
    unless rx280_bstack, rx280_done899
    pop $I19, rx280_bstack
    if_null rx280_cstack, rx280_cstack_done904
    unless rx280_cstack, rx280_cstack_done904
    dec $I19
    set $P11, rx280_cstack[$I19]
  rx280_cstack_done904:
    pop rx280_rep, rx280_bstack
    pop rx280_pos, rx280_bstack
    pop $I19, rx280_bstack
    lt rx280_pos, -1, rx280_done899
    lt rx280_pos, 0, rx280_fail901
    eq $I19, 0, rx280_fail901
    nqp_islist $I20, rx280_cstack
    unless $I20, rx280_jump902
    elements $I18, rx280_bstack
    le $I18, 0, rx280_cut903
    dec $I18
    set $I18, rx280_bstack[$I18]
  rx280_cut903:
    assign rx280_cstack, $I18
  rx280_jump902:
    jump $I19
  rx280_done899:
    rx280_cur."!cursor_fail"()
    .return (rx280_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control" :subid("cuid_61_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 807
    .param pmc self 
    $P5001 = self."!protoregex"("statement_control")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_62_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 809
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx282_tgt
    .local int rx282_pos
    .local int rx282_off
    .local int rx282_eos
    .local int rx282_rep
    .local pmc rx282_cur
    .local pmc rx282_curclass
    .local pmc rx282_bstack
    .local pmc rx282_cstack
    (rx282_cur, rx282_tgt, rx282_pos, rx282_curclass, rx282_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx282_cur
    length rx282_eos, rx282_tgt
    eq $I19, 1, rx282_restart910
    gt rx282_pos, rx282_eos, rx282_fail911
    repr_get_attr_int $I11, self, rx282_curclass, "$!from"
    ne $I11, -1, rxscan283_done917
    goto rxscan283_scan916
  rxscan283_loop915:
    inc rx282_pos
    gt rx282_pos, rx282_eos, rx282_fail911
    repr_bind_attr_int rx282_cur, rx282_curclass, "$!from", rx282_pos
  rxscan283_scan916:
    nqp_rxmark rx282_bstack, rxscan283_loop915, rx282_pos, 0
  rxscan283_done917:
    nqp_rxmark rx282_bstack, rxcap284_fail919, rx282_pos, 0
    add $I11, rx282_pos, 3
    gt $I11, rx282_eos, rx282_fail911
    substr $S10, rx282_tgt, rx282_pos, 3
    ne $S10, ucs4:"use", rx282_fail911
    add rx282_pos, 3
    nqp_rxpeek $I19, rx282_bstack, rxcap284_fail919
    inc $I19
    set $I11, rx282_bstack[$I19]
    repr_bind_attr_int rx282_cur, rx282_curclass, "$!pos", rx282_pos
    $P11 = rx282_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx282_pos)
    rx282_cstack = rx282_cur."!cursor_capture"($P11, "sym")
    goto rxcap284_done918
  rxcap284_fail919:
    goto rx282_fail911
  rxcap284_done918:
    ge rx282_pos, rx282_eos, rx282_fail911
    is_cclass $I11, .CCLASS_WHITESPACE, rx282_tgt, rx282_pos
    unless $I11, rx282_fail911
    add rx282_pos, 1
    repr_bind_attr_int rx282_cur, rx282_curclass, "$!pos", rx282_pos
    $P11 = rx282_cur."ws"()
    repr_get_attr_int $I11, $P11, rx282_curclass, "$!pos"
    lt $I11, 0, rx282_fail911
    repr_get_attr_int rx282_pos, $P11, rx282_curclass, "$!pos"
    repr_bind_attr_int rx282_cur, rx282_curclass, "$!pos", rx282_pos
    $P11 = rx282_cur."name"()
    repr_get_attr_int $I11, $P11, rx282_curclass, "$!pos"
    lt $I11, 0, rx282_fail911
    nqp_rxmark rx282_bstack, rxsubrule286_pass921, -1, 0
  rxsubrule286_pass921:
    rx282_cstack = rx282_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx282_pos, $P11, rx282_curclass, "$!pos"
    repr_bind_attr_int rx282_cur, rx282_curclass, "$!pos", rx282_pos
    $P11 = rx282_cur."ws"()
    repr_get_attr_int $I11, $P11, rx282_curclass, "$!pos"
    lt $I11, 0, rx282_fail911
    repr_get_attr_int rx282_pos, $P11, rx282_curclass, "$!pos"
    rx282_cur."!cursor_pass"(rx282_pos, "statement_control:sym<use>", 'backtrack'=>1)
    .return (rx282_cur)
  rx282_restart910:
    repr_get_attr_obj rx282_cstack, rx282_cur, rx282_curclass, "$!cstack"
  rx282_fail911:
    unless rx282_bstack, rx282_done909
    pop $I19, rx282_bstack
    if_null rx282_cstack, rx282_cstack_done914
    unless rx282_cstack, rx282_cstack_done914
    dec $I19
    set $P11, rx282_cstack[$I19]
  rx282_cstack_done914:
    pop rx282_rep, rx282_bstack
    pop rx282_pos, rx282_bstack
    pop $I19, rx282_bstack
    lt rx282_pos, -1, rx282_done909
    lt rx282_pos, 0, rx282_fail911
    eq $I19, 0, rx282_fail911
    nqp_islist $I20, rx282_cstack
    unless $I20, rx282_jump912
    elements $I18, rx282_bstack
    le $I18, 0, rx282_cut913
    dec $I18
    set $I18, rx282_bstack[$I18]
  rx282_cut913:
    assign rx282_cstack, $I18
  rx282_jump912:
    jump $I19
  rx282_done909:
    rx282_cur."!cursor_fail"()
    .return (rx282_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_63_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 813
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx288_tgt
    .local int rx288_pos
    .local int rx288_off
    .local int rx288_eos
    .local int rx288_rep
    .local pmc rx288_cur
    .local pmc rx288_curclass
    .local pmc rx288_bstack
    .local pmc rx288_cstack
    (rx288_cur, rx288_tgt, rx288_pos, rx288_curclass, rx288_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx288_cur
    length rx288_eos, rx288_tgt
    eq $I19, 1, rx288_restart925
    gt rx288_pos, rx288_eos, rx288_fail926
    repr_get_attr_int $I11, self, rx288_curclass, "$!from"
    ne $I11, -1, rxscan289_done932
    goto rxscan289_scan931
  rxscan289_loop930:
    inc rx288_pos
    gt rx288_pos, rx288_eos, rx288_fail926
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!from", rx288_pos
  rxscan289_scan931:
    nqp_rxmark rx288_bstack, rxscan289_loop930, rx288_pos, 0
  rxscan289_done932:
    nqp_rxmark rx288_bstack, rxcap290_fail934, rx288_pos, 0
    add $I11, rx288_pos, 2
    gt $I11, rx288_eos, rx288_fail926
    substr $S10, rx288_tgt, rx288_pos, 2
    ne $S10, ucs4:"if", rx288_fail926
    add rx288_pos, 2
    nqp_rxpeek $I19, rx288_bstack, rxcap290_fail934
    inc $I19
    set $I11, rx288_bstack[$I19]
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx288_pos)
    rx288_cstack = rx288_cur."!cursor_capture"($P11, "sym")
    goto rxcap290_done933
  rxcap290_fail934:
    goto rx288_fail926
  rxcap290_done933:
    ge rx288_pos, rx288_eos, rx288_fail926
    is_cclass $I11, .CCLASS_WHITESPACE, rx288_tgt, rx288_pos
    unless $I11, rx288_fail926
    add rx288_pos, 1
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail926
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail926
    nqp_rxmark rx288_bstack, rxsubrule292_pass936, -1, 0
  rxsubrule292_pass936:
    rx288_cstack = rx288_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail926
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    nqp_rxmark rx288_bstack, rxquantr294_done939, rx288_pos, 0
  rxquantr294_loop938:
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail926
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    add $I11, rx288_pos, 5
    gt $I11, rx288_eos, rx288_fail926
    substr $S10, rx288_tgt, rx288_pos, 5
    ne $S10, ucs4:"elsif", rx288_fail926
    add rx288_pos, 5
    ge rx288_pos, rx288_eos, rx288_fail926
    is_cclass $I11, .CCLASS_WHITESPACE, rx288_tgt, rx288_pos
    unless $I11, rx288_fail926
    add rx288_pos, 1
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail926
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail926
    nqp_rxmark rx288_bstack, rxsubrule297_pass942, -1, 0
  rxsubrule297_pass942:
    rx288_cstack = rx288_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail926
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    nqp_rxpeek $I19, rx288_bstack, rxquantr294_done939
    inc $I19
    inc $I19
    set rx288_rep, rx288_bstack[$I19]
    nqp_rxcommit rx288_bstack, rxquantr294_done939
    inc rx288_rep
    nqp_rxmark rx288_bstack, rxquantr294_done939, rx288_pos, rx288_rep
    goto rxquantr294_loop938
  rxquantr294_done939:
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail926
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    nqp_rxmark rx288_bstack, rxquantr300_done946, rx288_pos, 0
  rxquantr300_loop945:
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail926
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    add $I11, rx288_pos, 4
    gt $I11, rx288_eos, rx288_fail926
    substr $S10, rx288_tgt, rx288_pos, 4
    ne $S10, ucs4:"else", rx288_fail926
    add rx288_pos, 4
    ge rx288_pos, rx288_eos, rx288_fail926
    is_cclass $I11, .CCLASS_WHITESPACE, rx288_tgt, rx288_pos
    unless $I11, rx288_fail926
    add rx288_pos, 1
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail926
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail926
    nqp_rxmark rx288_bstack, rxsubrule303_pass949, -1, 0
  rxsubrule303_pass949:
    rx288_cstack = rx288_cur."!cursor_capture"($P11, "else")
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail926
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    nqp_rxpeek $I19, rx288_bstack, rxquantr300_done946
    inc $I19
    inc $I19
    set rx288_rep, rx288_bstack[$I19]
    nqp_rxcommit rx288_bstack, rxquantr300_done946
    inc rx288_rep
  rxquantr300_done946:
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail926
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    rx288_cur."!cursor_pass"(rx288_pos, "statement_control:sym<if>", 'backtrack'=>1)
    .return (rx288_cur)
  rx288_restart925:
    repr_get_attr_obj rx288_cstack, rx288_cur, rx288_curclass, "$!cstack"
  rx288_fail926:
    unless rx288_bstack, rx288_done924
    pop $I19, rx288_bstack
    if_null rx288_cstack, rx288_cstack_done929
    unless rx288_cstack, rx288_cstack_done929
    dec $I19
    set $P11, rx288_cstack[$I19]
  rx288_cstack_done929:
    pop rx288_rep, rx288_bstack
    pop rx288_pos, rx288_bstack
    pop $I19, rx288_bstack
    lt rx288_pos, -1, rx288_done924
    lt rx288_pos, 0, rx288_fail926
    eq $I19, 0, rx288_fail926
    nqp_islist $I20, rx288_cstack
    unless $I20, rx288_jump927
    elements $I18, rx288_bstack
    le $I18, 0, rx288_cut928
    dec $I18
    set $I18, rx288_bstack[$I18]
  rx288_cut928:
    assign rx288_cstack, $I18
  rx288_jump927:
    jump $I19
  rx288_done924:
    rx288_cur."!cursor_fail"()
    .return (rx288_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_64_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 820
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_65_1351203235.318' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx306_tgt
    .local int rx306_pos
    .local int rx306_off
    .local int rx306_eos
    .local int rx306_rep
    .local pmc rx306_cur
    .local pmc rx306_curclass
    .local pmc rx306_bstack
    .local pmc rx306_cstack
    (rx306_cur, rx306_tgt, rx306_pos, rx306_curclass, rx306_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx306_cur
    length rx306_eos, rx306_tgt
    eq $I19, 1, rx306_restart954
    gt rx306_pos, rx306_eos, rx306_fail955
    repr_get_attr_int $I11, self, rx306_curclass, "$!from"
    ne $I11, -1, rxscan307_done961
    goto rxscan307_scan960
  rxscan307_loop959:
    inc rx306_pos
    gt rx306_pos, rx306_eos, rx306_fail955
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!from", rx306_pos
  rxscan307_scan960:
    nqp_rxmark rx306_bstack, rxscan307_loop959, rx306_pos, 0
  rxscan307_done961:
    nqp_rxmark rx306_bstack, rxcap308_fail963, rx306_pos, 0
    add $I11, rx306_pos, 6
    gt $I11, rx306_eos, rx306_fail955
    substr $S10, rx306_tgt, rx306_pos, 6
    ne $S10, ucs4:"unless", rx306_fail955
    add rx306_pos, 6
    nqp_rxpeek $I19, rx306_bstack, rxcap308_fail963
    inc $I19
    set $I11, rx306_bstack[$I19]
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx306_pos)
    rx306_cstack = rx306_cur."!cursor_capture"($P11, "sym")
    goto rxcap308_done962
  rxcap308_fail963:
    goto rx306_fail955
  rxcap308_done962:
    ge rx306_pos, rx306_eos, rx306_fail955
    is_cclass $I11, .CCLASS_WHITESPACE, rx306_tgt, rx306_pos
    unless $I11, rx306_fail955
    add rx306_pos, 1
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."ws"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail955
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail955
    nqp_rxmark rx306_bstack, rxsubrule310_pass965, -1, 0
  rxsubrule310_pass965:
    rx306_cstack = rx306_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."ws"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail955
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
  alt312_0968:
    nqp_rxmark rx306_bstack, alt312_1981, rx306_pos, 0
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."ws"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail955
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
    .const 'Sub' $P5001 = 'cuid_65_1351203235.318' 
    capture_lex $P5001
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    ge $I11, 0, rx306_fail955
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."ws"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail955
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
    goto alt312_end967
  alt312_1981:
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."ws"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail955
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."panic"("unless does not take \"else\", please rewrite using \"if\"")
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail955
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."ws"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail955
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
  alt312_end967:
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."ws"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail955
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
    rx306_cur."!cursor_pass"(rx306_pos, "statement_control:sym<unless>", 'backtrack'=>1)
    .return (rx306_cur)
  rx306_restart954:
    repr_get_attr_obj rx306_cstack, rx306_cur, rx306_curclass, "$!cstack"
  rx306_fail955:
    unless rx306_bstack, rx306_done953
    pop $I19, rx306_bstack
    if_null rx306_cstack, rx306_cstack_done958
    unless rx306_cstack, rx306_cstack_done958
    dec $I19
    set $P11, rx306_cstack[$I19]
  rx306_cstack_done958:
    pop rx306_rep, rx306_bstack
    pop rx306_pos, rx306_bstack
    pop $I19, rx306_bstack
    lt rx306_pos, -1, rx306_done953
    lt rx306_pos, 0, rx306_fail955
    eq $I19, 0, rx306_fail955
    nqp_islist $I20, rx306_cstack
    unless $I20, rx306_jump956
    elements $I18, rx306_bstack
    le $I18, 0, rx306_cut957
    dec $I18
    set $I18, rx306_bstack[$I18]
  rx306_cut957:
    assign rx306_cstack, $I18
  rx306_jump956:
    jump $I19
  rx306_done953:
    rx306_cur."!cursor_fail"()
    .return (rx306_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_65_1351203235.318") :anon :lex :outer("cuid_64_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx314_tgt
    .local int rx314_pos
    .local int rx314_off
    .local int rx314_eos
    .local int rx314_rep
    .local pmc rx314_cur
    .local pmc rx314_curclass
    .local pmc rx314_bstack
    .local pmc rx314_cstack
    (rx314_cur, rx314_tgt, rx314_pos, rx314_curclass, rx314_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx314_cur
    length rx314_eos, rx314_tgt
    eq $I19, 1, rx314_restart972
    gt rx314_pos, rx314_eos, rx314_fail973
    repr_get_attr_int $I11, self, rx314_curclass, "$!from"
    ne $I11, -1, rxscan315_done979
    goto rxscan315_scan978
  rxscan315_loop977:
    inc rx314_pos
    gt rx314_pos, rx314_eos, rx314_fail973
    repr_bind_attr_int rx314_cur, rx314_curclass, "$!from", rx314_pos
  rxscan315_scan978:
    nqp_rxmark rx314_bstack, rxscan315_loop977, rx314_pos, 0
  rxscan315_done979:
    add $I11, rx314_pos, 4
    gt $I11, rx314_eos, rx314_fail973
    substr $S10, rx314_tgt, rx314_pos, 4
    ne $S10, ucs4:"else", rx314_fail973
    add rx314_pos, 4
    rx314_cur."!cursor_pass"(rx314_pos, 'backtrack'=>1)
    .return (rx314_cur)
  rx314_restart972:
    repr_get_attr_obj rx314_cstack, rx314_cur, rx314_curclass, "$!cstack"
  rx314_fail973:
    unless rx314_bstack, rx314_done971
    pop $I19, rx314_bstack
    if_null rx314_cstack, rx314_cstack_done976
    unless rx314_cstack, rx314_cstack_done976
    dec $I19
    set $P11, rx314_cstack[$I19]
  rx314_cstack_done976:
    pop rx314_rep, rx314_bstack
    pop rx314_pos, rx314_bstack
    pop $I19, rx314_bstack
    lt rx314_pos, -1, rx314_done971
    lt rx314_pos, 0, rx314_fail973
    eq $I19, 0, rx314_fail973
    nqp_islist $I20, rx314_cstack
    unless $I20, rx314_jump974
    elements $I18, rx314_bstack
    le $I18, 0, rx314_cut975
    dec $I18
    set $I18, rx314_bstack[$I18]
  rx314_cut975:
    assign rx314_cstack, $I18
  rx314_jump974:
    jump $I19
  rx314_done971:
    rx314_cur."!cursor_fail"()
    .return (rx314_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_66_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 826
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx321_tgt
    .local int rx321_pos
    .local int rx321_off
    .local int rx321_eos
    .local int rx321_rep
    .local pmc rx321_cur
    .local pmc rx321_curclass
    .local pmc rx321_bstack
    .local pmc rx321_cstack
    (rx321_cur, rx321_tgt, rx321_pos, rx321_curclass, rx321_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx321_cur
    length rx321_eos, rx321_tgt
    eq $I19, 1, rx321_restart988
    gt rx321_pos, rx321_eos, rx321_fail989
    repr_get_attr_int $I11, self, rx321_curclass, "$!from"
    ne $I11, -1, rxscan322_done995
    goto rxscan322_scan994
  rxscan322_loop993:
    inc rx321_pos
    gt rx321_pos, rx321_eos, rx321_fail989
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!from", rx321_pos
  rxscan322_scan994:
    nqp_rxmark rx321_bstack, rxscan322_loop993, rx321_pos, 0
  rxscan322_done995:
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!pos", rx321_pos
    store_lex unicode:"$\x{a2}", rx321_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx321_bstack, rxcap323_fail997, rx321_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt324_0999
    nqp_push_label $P11, alt324_11000
    nqp_rxmark rx321_bstack, alt324_end998, -1, 0
    rx321_cur."!alt"(rx321_pos, "alt_nfa__12_1351203236.783", $P11)
    goto rx321_fail989
  alt324_0999:
    add $I11, rx321_pos, 5
    gt $I11, rx321_eos, rx321_fail989
    substr $S10, rx321_tgt, rx321_pos, 5
    ne $S10, ucs4:"while", rx321_fail989
    add rx321_pos, 5
    goto alt324_end998
  alt324_11000:
    add $I11, rx321_pos, 5
    gt $I11, rx321_eos, rx321_fail989
    substr $S10, rx321_tgt, rx321_pos, 5
    ne $S10, ucs4:"until", rx321_fail989
    add rx321_pos, 5
    goto alt324_end998
  alt324_end998:
    nqp_rxcommit rx321_bstack, alt324_end998
    nqp_rxpeek $I19, rx321_bstack, rxcap323_fail997
    inc $I19
    set $I11, rx321_bstack[$I19]
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!pos", rx321_pos
    $P11 = rx321_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx321_pos)
    rx321_cstack = rx321_cur."!cursor_capture"($P11, "sym")
    goto rxcap323_done996
  rxcap323_fail997:
    goto rx321_fail989
  rxcap323_done996:
    ge rx321_pos, rx321_eos, rx321_fail989
    is_cclass $I11, .CCLASS_WHITESPACE, rx321_tgt, rx321_pos
    unless $I11, rx321_fail989
    add rx321_pos, 1
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!pos", rx321_pos
    $P11 = rx321_cur."ws"()
    repr_get_attr_int $I11, $P11, rx321_curclass, "$!pos"
    lt $I11, 0, rx321_fail989
    repr_get_attr_int rx321_pos, $P11, rx321_curclass, "$!pos"
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!pos", rx321_pos
    $P11 = rx321_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx321_curclass, "$!pos"
    lt $I11, 0, rx321_fail989
    nqp_rxmark rx321_bstack, rxsubrule326_pass1002, -1, 0
  rxsubrule326_pass1002:
    rx321_cstack = rx321_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx321_pos, $P11, rx321_curclass, "$!pos"
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!pos", rx321_pos
    $P11 = rx321_cur."ws"()
    repr_get_attr_int $I11, $P11, rx321_curclass, "$!pos"
    lt $I11, 0, rx321_fail989
    repr_get_attr_int rx321_pos, $P11, rx321_curclass, "$!pos"
    rx321_cur."!cursor_pass"(rx321_pos, "statement_control:sym<while>", 'backtrack'=>1)
    .return (rx321_cur)
  rx321_restart988:
    repr_get_attr_obj rx321_cstack, rx321_cur, rx321_curclass, "$!cstack"
  rx321_fail989:
    unless rx321_bstack, rx321_done987
    pop $I19, rx321_bstack
    if_null rx321_cstack, rx321_cstack_done992
    unless rx321_cstack, rx321_cstack_done992
    dec $I19
    set $P11, rx321_cstack[$I19]
  rx321_cstack_done992:
    pop rx321_rep, rx321_bstack
    pop rx321_pos, rx321_bstack
    pop $I19, rx321_bstack
    lt rx321_pos, -1, rx321_done987
    lt rx321_pos, 0, rx321_fail989
    eq $I19, 0, rx321_fail989
    nqp_islist $I20, rx321_cstack
    unless $I20, rx321_jump990
    elements $I18, rx321_bstack
    le $I18, 0, rx321_cut991
    dec $I18
    set $I18, rx321_bstack[$I18]
  rx321_cut991:
    assign rx321_cstack, $I18
  rx321_jump990:
    jump $I19
  rx321_done987:
    rx321_cur."!cursor_fail"()
    .return (rx321_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_67_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 832
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx328_tgt
    .local int rx328_pos
    .local int rx328_off
    .local int rx328_eos
    .local int rx328_rep
    .local pmc rx328_cur
    .local pmc rx328_curclass
    .local pmc rx328_bstack
    .local pmc rx328_cstack
    (rx328_cur, rx328_tgt, rx328_pos, rx328_curclass, rx328_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx328_cur
    length rx328_eos, rx328_tgt
    eq $I19, 1, rx328_restart1006
    gt rx328_pos, rx328_eos, rx328_fail1007
    repr_get_attr_int $I11, self, rx328_curclass, "$!from"
    ne $I11, -1, rxscan329_done1013
    goto rxscan329_scan1012
  rxscan329_loop1011:
    inc rx328_pos
    gt rx328_pos, rx328_eos, rx328_fail1007
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!from", rx328_pos
  rxscan329_scan1012:
    nqp_rxmark rx328_bstack, rxscan329_loop1011, rx328_pos, 0
  rxscan329_done1013:
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    store_lex unicode:"$\x{a2}", rx328_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx328_bstack, rxcap330_fail1015, rx328_pos, 0
    add $I11, rx328_pos, 6
    gt $I11, rx328_eos, rx328_fail1007
    substr $S10, rx328_tgt, rx328_pos, 6
    ne $S10, ucs4:"repeat", rx328_fail1007
    add rx328_pos, 6
    nqp_rxpeek $I19, rx328_bstack, rxcap330_fail1015
    inc $I19
    set $I11, rx328_bstack[$I19]
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx328_pos)
    rx328_cstack = rx328_cur."!cursor_capture"($P11, "sym")
    goto rxcap330_done1014
  rxcap330_fail1015:
    goto rx328_fail1007
  rxcap330_done1014:
    ge rx328_pos, rx328_eos, rx328_fail1007
    is_cclass $I11, .CCLASS_WHITESPACE, rx328_tgt, rx328_pos
    unless $I11, rx328_fail1007
    add rx328_pos, 1
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1007
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt332_01018
    nqp_push_label $P11, alt332_11028
    nqp_rxmark rx328_bstack, alt332_end1017, -1, 0
    rx328_cur."!alt"(rx328_pos, "alt_nfa__15_1351203236.802", $P11)
    goto rx328_fail1007
  alt332_01018:
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1007
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    nqp_rxmark rx328_bstack, rxcap334_fail1021, rx328_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt335_01023
    nqp_push_label $P11, alt335_11024
    nqp_rxmark rx328_bstack, alt335_end1022, -1, 0
    rx328_cur."!alt"(rx328_pos, "alt_nfa__13_1351203236.802", $P11)
    goto rx328_fail1007
  alt335_01023:
    add $I11, rx328_pos, 5
    gt $I11, rx328_eos, rx328_fail1007
    substr $S10, rx328_tgt, rx328_pos, 5
    ne $S10, ucs4:"while", rx328_fail1007
    add rx328_pos, 5
    goto alt335_end1022
  alt335_11024:
    add $I11, rx328_pos, 5
    gt $I11, rx328_eos, rx328_fail1007
    substr $S10, rx328_tgt, rx328_pos, 5
    ne $S10, ucs4:"until", rx328_fail1007
    add rx328_pos, 5
    goto alt335_end1022
  alt335_end1022:
    nqp_rxcommit rx328_bstack, alt335_end1022
    nqp_rxpeek $I19, rx328_bstack, rxcap334_fail1021
    inc $I19
    set $I11, rx328_bstack[$I19]
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx328_pos)
    rx328_cstack = rx328_cur."!cursor_capture"($P11, "wu")
    goto rxcap334_done1020
  rxcap334_fail1021:
    goto rx328_fail1007
  rxcap334_done1020:
    ge rx328_pos, rx328_eos, rx328_fail1007
    is_cclass $I11, .CCLASS_WHITESPACE, rx328_tgt, rx328_pos
    unless $I11, rx328_fail1007
    add rx328_pos, 1
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1007
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1007
    nqp_rxmark rx328_bstack, rxsubrule337_pass1026, -1, 0
  rxsubrule337_pass1026:
    rx328_cstack = rx328_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1007
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    goto alt332_end1017
  alt332_11028:
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1007
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1007
    nqp_rxmark rx328_bstack, rxsubrule340_pass1030, -1, 0
  rxsubrule340_pass1030:
    rx328_cstack = rx328_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1007
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    nqp_rxmark rx328_bstack, rxcap342_fail1033, rx328_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt343_01035
    nqp_push_label $P11, alt343_11036
    nqp_rxmark rx328_bstack, alt343_end1034, -1, 0
    rx328_cur."!alt"(rx328_pos, "alt_nfa__14_1351203236.802", $P11)
    goto rx328_fail1007
  alt343_01035:
    add $I11, rx328_pos, 5
    gt $I11, rx328_eos, rx328_fail1007
    substr $S10, rx328_tgt, rx328_pos, 5
    ne $S10, ucs4:"while", rx328_fail1007
    add rx328_pos, 5
    goto alt343_end1034
  alt343_11036:
    add $I11, rx328_pos, 5
    gt $I11, rx328_eos, rx328_fail1007
    substr $S10, rx328_tgt, rx328_pos, 5
    ne $S10, ucs4:"until", rx328_fail1007
    add rx328_pos, 5
    goto alt343_end1034
  alt343_end1034:
    nqp_rxcommit rx328_bstack, alt343_end1034
    nqp_rxpeek $I19, rx328_bstack, rxcap342_fail1033
    inc $I19
    set $I11, rx328_bstack[$I19]
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx328_pos)
    rx328_cstack = rx328_cur."!cursor_capture"($P11, "wu")
    goto rxcap342_done1032
  rxcap342_fail1033:
    goto rx328_fail1007
  rxcap342_done1032:
    ge rx328_pos, rx328_eos, rx328_fail1007
    is_cclass $I11, .CCLASS_WHITESPACE, rx328_tgt, rx328_pos
    unless $I11, rx328_fail1007
    add rx328_pos, 1
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1007
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1007
    nqp_rxmark rx328_bstack, rxsubrule345_pass1038, -1, 0
  rxsubrule345_pass1038:
    rx328_cstack = rx328_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1007
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    goto alt332_end1017
  alt332_end1017:
    nqp_rxcommit rx328_bstack, alt332_end1017
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1007
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    rx328_cur."!cursor_pass"(rx328_pos, "statement_control:sym<repeat>", 'backtrack'=>1)
    .return (rx328_cur)
  rx328_restart1006:
    repr_get_attr_obj rx328_cstack, rx328_cur, rx328_curclass, "$!cstack"
  rx328_fail1007:
    unless rx328_bstack, rx328_done1005
    pop $I19, rx328_bstack
    if_null rx328_cstack, rx328_cstack_done1010
    unless rx328_cstack, rx328_cstack_done1010
    dec $I19
    set $P11, rx328_cstack[$I19]
  rx328_cstack_done1010:
    pop rx328_rep, rx328_bstack
    pop rx328_pos, rx328_bstack
    pop $I19, rx328_bstack
    lt rx328_pos, -1, rx328_done1005
    lt rx328_pos, 0, rx328_fail1007
    eq $I19, 0, rx328_fail1007
    nqp_islist $I20, rx328_cstack
    unless $I20, rx328_jump1008
    elements $I18, rx328_bstack
    le $I18, 0, rx328_cut1009
    dec $I18
    set $I18, rx328_bstack[$I18]
  rx328_cut1009:
    assign rx328_cstack, $I18
  rx328_jump1008:
    jump $I19
  rx328_done1005:
    rx328_cur."!cursor_fail"()
    .return (rx328_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_68_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 841
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx348_tgt
    .local int rx348_pos
    .local int rx348_off
    .local int rx348_eos
    .local int rx348_rep
    .local pmc rx348_cur
    .local pmc rx348_curclass
    .local pmc rx348_bstack
    .local pmc rx348_cstack
    (rx348_cur, rx348_tgt, rx348_pos, rx348_curclass, rx348_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx348_cur
    length rx348_eos, rx348_tgt
    eq $I19, 1, rx348_restart1043
    gt rx348_pos, rx348_eos, rx348_fail1044
    repr_get_attr_int $I11, self, rx348_curclass, "$!from"
    ne $I11, -1, rxscan349_done1050
    goto rxscan349_scan1049
  rxscan349_loop1048:
    inc rx348_pos
    gt rx348_pos, rx348_eos, rx348_fail1044
    repr_bind_attr_int rx348_cur, rx348_curclass, "$!from", rx348_pos
  rxscan349_scan1049:
    nqp_rxmark rx348_bstack, rxscan349_loop1048, rx348_pos, 0
  rxscan349_done1050:
    repr_bind_attr_int rx348_cur, rx348_curclass, "$!pos", rx348_pos
    store_lex unicode:"$\x{a2}", rx348_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx348_bstack, rxcap350_fail1052, rx348_pos, 0
    add $I11, rx348_pos, 3
    gt $I11, rx348_eos, rx348_fail1044
    substr $S10, rx348_tgt, rx348_pos, 3
    ne $S10, ucs4:"for", rx348_fail1044
    add rx348_pos, 3
    nqp_rxpeek $I19, rx348_bstack, rxcap350_fail1052
    inc $I19
    set $I11, rx348_bstack[$I19]
    repr_bind_attr_int rx348_cur, rx348_curclass, "$!pos", rx348_pos
    $P11 = rx348_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx348_pos)
    rx348_cstack = rx348_cur."!cursor_capture"($P11, "sym")
    goto rxcap350_done1051
  rxcap350_fail1052:
    goto rx348_fail1044
  rxcap350_done1051:
    ge rx348_pos, rx348_eos, rx348_fail1044
    is_cclass $I11, .CCLASS_WHITESPACE, rx348_tgt, rx348_pos
    unless $I11, rx348_fail1044
    add rx348_pos, 1
    repr_bind_attr_int rx348_cur, rx348_curclass, "$!pos", rx348_pos
    $P11 = rx348_cur."ws"()
    repr_get_attr_int $I11, $P11, rx348_curclass, "$!pos"
    lt $I11, 0, rx348_fail1044
    repr_get_attr_int rx348_pos, $P11, rx348_curclass, "$!pos"
    repr_bind_attr_int rx348_cur, rx348_curclass, "$!pos", rx348_pos
    $P11 = rx348_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx348_curclass, "$!pos"
    lt $I11, 0, rx348_fail1044
    nqp_rxmark rx348_bstack, rxsubrule352_pass1054, -1, 0
  rxsubrule352_pass1054:
    rx348_cstack = rx348_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx348_pos, $P11, rx348_curclass, "$!pos"
    repr_bind_attr_int rx348_cur, rx348_curclass, "$!pos", rx348_pos
    $P11 = rx348_cur."ws"()
    repr_get_attr_int $I11, $P11, rx348_curclass, "$!pos"
    lt $I11, 0, rx348_fail1044
    repr_get_attr_int rx348_pos, $P11, rx348_curclass, "$!pos"
    rx348_cur."!cursor_pass"(rx348_pos, "statement_control:sym<for>", 'backtrack'=>1)
    .return (rx348_cur)
  rx348_restart1043:
    repr_get_attr_obj rx348_cstack, rx348_cur, rx348_curclass, "$!cstack"
  rx348_fail1044:
    unless rx348_bstack, rx348_done1042
    pop $I19, rx348_bstack
    if_null rx348_cstack, rx348_cstack_done1047
    unless rx348_cstack, rx348_cstack_done1047
    dec $I19
    set $P11, rx348_cstack[$I19]
  rx348_cstack_done1047:
    pop rx348_rep, rx348_bstack
    pop rx348_pos, rx348_bstack
    pop $I19, rx348_bstack
    lt rx348_pos, -1, rx348_done1042
    lt rx348_pos, 0, rx348_fail1044
    eq $I19, 0, rx348_fail1044
    nqp_islist $I20, rx348_cstack
    unless $I20, rx348_jump1045
    elements $I18, rx348_bstack
    le $I18, 0, rx348_cut1046
    dec $I18
    set $I18, rx348_bstack[$I18]
  rx348_cut1046:
    assign rx348_cstack, $I18
  rx348_jump1045:
    jump $I19
  rx348_done1042:
    rx348_cur."!cursor_fail"()
    .return (rx348_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_69_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 847
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx354_tgt
    .local int rx354_pos
    .local int rx354_off
    .local int rx354_eos
    .local int rx354_rep
    .local pmc rx354_cur
    .local pmc rx354_curclass
    .local pmc rx354_bstack
    .local pmc rx354_cstack
    (rx354_cur, rx354_tgt, rx354_pos, rx354_curclass, rx354_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx354_cur
    length rx354_eos, rx354_tgt
    eq $I19, 1, rx354_restart1058
    gt rx354_pos, rx354_eos, rx354_fail1059
    repr_get_attr_int $I11, self, rx354_curclass, "$!from"
    ne $I11, -1, rxscan355_done1065
    goto rxscan355_scan1064
  rxscan355_loop1063:
    inc rx354_pos
    gt rx354_pos, rx354_eos, rx354_fail1059
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!from", rx354_pos
  rxscan355_scan1064:
    nqp_rxmark rx354_bstack, rxscan355_loop1063, rx354_pos, 0
  rxscan355_done1065:
    nqp_rxmark rx354_bstack, rxcap356_fail1067, rx354_pos, 0
    add $I11, rx354_pos, 5
    gt $I11, rx354_eos, rx354_fail1059
    substr $S10, rx354_tgt, rx354_pos, 5
    ne $S10, ucs4:"CATCH", rx354_fail1059
    add rx354_pos, 5
    nqp_rxpeek $I19, rx354_bstack, rxcap356_fail1067
    inc $I19
    set $I11, rx354_bstack[$I19]
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!pos", rx354_pos
    $P11 = rx354_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx354_pos)
    rx354_cstack = rx354_cur."!cursor_capture"($P11, "sym")
    goto rxcap356_done1066
  rxcap356_fail1067:
    goto rx354_fail1059
  rxcap356_done1066:
    ge rx354_pos, rx354_eos, rx354_fail1059
    is_cclass $I11, .CCLASS_WHITESPACE, rx354_tgt, rx354_pos
    unless $I11, rx354_fail1059
    add rx354_pos, 1
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!pos", rx354_pos
    $P11 = rx354_cur."ws"()
    repr_get_attr_int $I11, $P11, rx354_curclass, "$!pos"
    lt $I11, 0, rx354_fail1059
    repr_get_attr_int rx354_pos, $P11, rx354_curclass, "$!pos"
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!pos", rx354_pos
    $P11 = rx354_cur."block"()
    repr_get_attr_int $I11, $P11, rx354_curclass, "$!pos"
    lt $I11, 0, rx354_fail1059
    nqp_rxmark rx354_bstack, rxsubrule358_pass1069, -1, 0
  rxsubrule358_pass1069:
    rx354_cstack = rx354_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx354_pos, $P11, rx354_curclass, "$!pos"
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!pos", rx354_pos
    $P11 = rx354_cur."ws"()
    repr_get_attr_int $I11, $P11, rx354_curclass, "$!pos"
    lt $I11, 0, rx354_fail1059
    repr_get_attr_int rx354_pos, $P11, rx354_curclass, "$!pos"
    rx354_cur."!cursor_pass"(rx354_pos, "statement_control:sym<CATCH>", 'backtrack'=>1)
    .return (rx354_cur)
  rx354_restart1058:
    repr_get_attr_obj rx354_cstack, rx354_cur, rx354_curclass, "$!cstack"
  rx354_fail1059:
    unless rx354_bstack, rx354_done1057
    pop $I19, rx354_bstack
    if_null rx354_cstack, rx354_cstack_done1062
    unless rx354_cstack, rx354_cstack_done1062
    dec $I19
    set $P11, rx354_cstack[$I19]
  rx354_cstack_done1062:
    pop rx354_rep, rx354_bstack
    pop rx354_pos, rx354_bstack
    pop $I19, rx354_bstack
    lt rx354_pos, -1, rx354_done1057
    lt rx354_pos, 0, rx354_fail1059
    eq $I19, 0, rx354_fail1059
    nqp_islist $I20, rx354_cstack
    unless $I20, rx354_jump1060
    elements $I18, rx354_bstack
    le $I18, 0, rx354_cut1061
    dec $I18
    set $I18, rx354_bstack[$I18]
  rx354_cut1061:
    assign rx354_cstack, $I18
  rx354_jump1060:
    jump $I19
  rx354_done1057:
    rx354_cur."!cursor_fail"()
    .return (rx354_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_70_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 852
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx360_tgt
    .local int rx360_pos
    .local int rx360_off
    .local int rx360_eos
    .local int rx360_rep
    .local pmc rx360_cur
    .local pmc rx360_curclass
    .local pmc rx360_bstack
    .local pmc rx360_cstack
    (rx360_cur, rx360_tgt, rx360_pos, rx360_curclass, rx360_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx360_cur
    length rx360_eos, rx360_tgt
    eq $I19, 1, rx360_restart1073
    gt rx360_pos, rx360_eos, rx360_fail1074
    repr_get_attr_int $I11, self, rx360_curclass, "$!from"
    ne $I11, -1, rxscan361_done1080
    goto rxscan361_scan1079
  rxscan361_loop1078:
    inc rx360_pos
    gt rx360_pos, rx360_eos, rx360_fail1074
    repr_bind_attr_int rx360_cur, rx360_curclass, "$!from", rx360_pos
  rxscan361_scan1079:
    nqp_rxmark rx360_bstack, rxscan361_loop1078, rx360_pos, 0
  rxscan361_done1080:
    nqp_rxmark rx360_bstack, rxcap362_fail1082, rx360_pos, 0
    add $I11, rx360_pos, 7
    gt $I11, rx360_eos, rx360_fail1074
    substr $S10, rx360_tgt, rx360_pos, 7
    ne $S10, ucs4:"CONTROL", rx360_fail1074
    add rx360_pos, 7
    nqp_rxpeek $I19, rx360_bstack, rxcap362_fail1082
    inc $I19
    set $I11, rx360_bstack[$I19]
    repr_bind_attr_int rx360_cur, rx360_curclass, "$!pos", rx360_pos
    $P11 = rx360_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx360_pos)
    rx360_cstack = rx360_cur."!cursor_capture"($P11, "sym")
    goto rxcap362_done1081
  rxcap362_fail1082:
    goto rx360_fail1074
  rxcap362_done1081:
    ge rx360_pos, rx360_eos, rx360_fail1074
    is_cclass $I11, .CCLASS_WHITESPACE, rx360_tgt, rx360_pos
    unless $I11, rx360_fail1074
    add rx360_pos, 1
    repr_bind_attr_int rx360_cur, rx360_curclass, "$!pos", rx360_pos
    $P11 = rx360_cur."ws"()
    repr_get_attr_int $I11, $P11, rx360_curclass, "$!pos"
    lt $I11, 0, rx360_fail1074
    repr_get_attr_int rx360_pos, $P11, rx360_curclass, "$!pos"
    repr_bind_attr_int rx360_cur, rx360_curclass, "$!pos", rx360_pos
    $P11 = rx360_cur."block"()
    repr_get_attr_int $I11, $P11, rx360_curclass, "$!pos"
    lt $I11, 0, rx360_fail1074
    nqp_rxmark rx360_bstack, rxsubrule364_pass1084, -1, 0
  rxsubrule364_pass1084:
    rx360_cstack = rx360_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx360_pos, $P11, rx360_curclass, "$!pos"
    repr_bind_attr_int rx360_cur, rx360_curclass, "$!pos", rx360_pos
    $P11 = rx360_cur."ws"()
    repr_get_attr_int $I11, $P11, rx360_curclass, "$!pos"
    lt $I11, 0, rx360_fail1074
    repr_get_attr_int rx360_pos, $P11, rx360_curclass, "$!pos"
    rx360_cur."!cursor_pass"(rx360_pos, "statement_control:sym<CONTROL>", 'backtrack'=>1)
    .return (rx360_cur)
  rx360_restart1073:
    repr_get_attr_obj rx360_cstack, rx360_cur, rx360_curclass, "$!cstack"
  rx360_fail1074:
    unless rx360_bstack, rx360_done1072
    pop $I19, rx360_bstack
    if_null rx360_cstack, rx360_cstack_done1077
    unless rx360_cstack, rx360_cstack_done1077
    dec $I19
    set $P11, rx360_cstack[$I19]
  rx360_cstack_done1077:
    pop rx360_rep, rx360_bstack
    pop rx360_pos, rx360_bstack
    pop $I19, rx360_bstack
    lt rx360_pos, -1, rx360_done1072
    lt rx360_pos, 0, rx360_fail1074
    eq $I19, 0, rx360_fail1074
    nqp_islist $I20, rx360_cstack
    unless $I20, rx360_jump1075
    elements $I18, rx360_bstack
    le $I18, 0, rx360_cut1076
    dec $I18
    set $I18, rx360_bstack[$I18]
  rx360_cut1076:
    assign rx360_cstack, $I18
  rx360_jump1075:
    jump $I19
  rx360_done1072:
    rx360_cur."!cursor_fail"()
    .return (rx360_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix" :subid("cuid_71_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 857
    .param pmc self 
    $P5001 = self."!protoregex"("statement_prefix")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_72_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 858
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx366_tgt
    .local int rx366_pos
    .local int rx366_off
    .local int rx366_eos
    .local int rx366_rep
    .local pmc rx366_cur
    .local pmc rx366_curclass
    .local pmc rx366_bstack
    .local pmc rx366_cstack
    (rx366_cur, rx366_tgt, rx366_pos, rx366_curclass, rx366_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx366_cur
    length rx366_eos, rx366_tgt
    eq $I19, 1, rx366_restart1088
    gt rx366_pos, rx366_eos, rx366_fail1089
    repr_get_attr_int $I11, self, rx366_curclass, "$!from"
    ne $I11, -1, rxscan367_done1095
    goto rxscan367_scan1094
  rxscan367_loop1093:
    inc rx366_pos
    gt rx366_pos, rx366_eos, rx366_fail1089
    repr_bind_attr_int rx366_cur, rx366_curclass, "$!from", rx366_pos
  rxscan367_scan1094:
    nqp_rxmark rx366_bstack, rxscan367_loop1093, rx366_pos, 0
  rxscan367_done1095:
    nqp_rxmark rx366_bstack, rxcap368_fail1097, rx366_pos, 0
    add $I11, rx366_pos, 5
    gt $I11, rx366_eos, rx366_fail1089
    substr $S10, rx366_tgt, rx366_pos, 5
    ne $S10, ucs4:"BEGIN", rx366_fail1089
    add rx366_pos, 5
    nqp_rxpeek $I19, rx366_bstack, rxcap368_fail1097
    inc $I19
    set $I11, rx366_bstack[$I19]
    repr_bind_attr_int rx366_cur, rx366_curclass, "$!pos", rx366_pos
    $P11 = rx366_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx366_pos)
    rx366_cstack = rx366_cur."!cursor_capture"($P11, "sym")
    goto rxcap368_done1096
  rxcap368_fail1097:
    goto rx366_fail1089
  rxcap368_done1096:
    repr_bind_attr_int rx366_cur, rx366_curclass, "$!pos", rx366_pos
    $P11 = rx366_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx366_curclass, "$!pos"
    lt $I11, 0, rx366_fail1089
    nqp_rxmark rx366_bstack, rxsubrule369_pass1098, -1, 0
  rxsubrule369_pass1098:
    rx366_cstack = rx366_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx366_pos, $P11, rx366_curclass, "$!pos"
    rx366_cur."!cursor_pass"(rx366_pos, "statement_prefix:sym<BEGIN>", 'backtrack'=>1)
    .return (rx366_cur)
  rx366_restart1088:
    repr_get_attr_obj rx366_cstack, rx366_cur, rx366_curclass, "$!cstack"
  rx366_fail1089:
    unless rx366_bstack, rx366_done1087
    pop $I19, rx366_bstack
    if_null rx366_cstack, rx366_cstack_done1092
    unless rx366_cstack, rx366_cstack_done1092
    dec $I19
    set $P11, rx366_cstack[$I19]
  rx366_cstack_done1092:
    pop rx366_rep, rx366_bstack
    pop rx366_pos, rx366_bstack
    pop $I19, rx366_bstack
    lt rx366_pos, -1, rx366_done1087
    lt rx366_pos, 0, rx366_fail1089
    eq $I19, 0, rx366_fail1089
    nqp_islist $I20, rx366_cstack
    unless $I20, rx366_jump1090
    elements $I18, rx366_bstack
    le $I18, 0, rx366_cut1091
    dec $I18
    set $I18, rx366_bstack[$I18]
  rx366_cut1091:
    assign rx366_cstack, $I18
  rx366_jump1090:
    jump $I19
  rx366_done1087:
    rx366_cur."!cursor_fail"()
    .return (rx366_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_73_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 859
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx370_tgt
    .local int rx370_pos
    .local int rx370_off
    .local int rx370_eos
    .local int rx370_rep
    .local pmc rx370_cur
    .local pmc rx370_curclass
    .local pmc rx370_bstack
    .local pmc rx370_cstack
    (rx370_cur, rx370_tgt, rx370_pos, rx370_curclass, rx370_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx370_cur
    length rx370_eos, rx370_tgt
    eq $I19, 1, rx370_restart1101
    gt rx370_pos, rx370_eos, rx370_fail1102
    repr_get_attr_int $I11, self, rx370_curclass, "$!from"
    ne $I11, -1, rxscan371_done1108
    goto rxscan371_scan1107
  rxscan371_loop1106:
    inc rx370_pos
    gt rx370_pos, rx370_eos, rx370_fail1102
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!from", rx370_pos
  rxscan371_scan1107:
    nqp_rxmark rx370_bstack, rxscan371_loop1106, rx370_pos, 0
  rxscan371_done1108:
    nqp_rxmark rx370_bstack, rxcap372_fail1110, rx370_pos, 0
    add $I11, rx370_pos, 4
    gt $I11, rx370_eos, rx370_fail1102
    substr $S10, rx370_tgt, rx370_pos, 4
    ne $S10, ucs4:"INIT", rx370_fail1102
    add rx370_pos, 4
    nqp_rxpeek $I19, rx370_bstack, rxcap372_fail1110
    inc $I19
    set $I11, rx370_bstack[$I19]
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!pos", rx370_pos
    $P11 = rx370_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx370_pos)
    rx370_cstack = rx370_cur."!cursor_capture"($P11, "sym")
    goto rxcap372_done1109
  rxcap372_fail1110:
    goto rx370_fail1102
  rxcap372_done1109:
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!pos", rx370_pos
    $P11 = rx370_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx370_curclass, "$!pos"
    lt $I11, 0, rx370_fail1102
    nqp_rxmark rx370_bstack, rxsubrule373_pass1111, -1, 0
  rxsubrule373_pass1111:
    rx370_cstack = rx370_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx370_pos, $P11, rx370_curclass, "$!pos"
    rx370_cur."!cursor_pass"(rx370_pos, "statement_prefix:sym<INIT>", 'backtrack'=>1)
    .return (rx370_cur)
  rx370_restart1101:
    repr_get_attr_obj rx370_cstack, rx370_cur, rx370_curclass, "$!cstack"
  rx370_fail1102:
    unless rx370_bstack, rx370_done1100
    pop $I19, rx370_bstack
    if_null rx370_cstack, rx370_cstack_done1105
    unless rx370_cstack, rx370_cstack_done1105
    dec $I19
    set $P11, rx370_cstack[$I19]
  rx370_cstack_done1105:
    pop rx370_rep, rx370_bstack
    pop rx370_pos, rx370_bstack
    pop $I19, rx370_bstack
    lt rx370_pos, -1, rx370_done1100
    lt rx370_pos, 0, rx370_fail1102
    eq $I19, 0, rx370_fail1102
    nqp_islist $I20, rx370_cstack
    unless $I20, rx370_jump1103
    elements $I18, rx370_bstack
    le $I18, 0, rx370_cut1104
    dec $I18
    set $I18, rx370_bstack[$I18]
  rx370_cut1104:
    assign rx370_cstack, $I18
  rx370_jump1103:
    jump $I19
  rx370_done1100:
    rx370_cur."!cursor_fail"()
    .return (rx370_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_74_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 861
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx374_tgt
    .local int rx374_pos
    .local int rx374_off
    .local int rx374_eos
    .local int rx374_rep
    .local pmc rx374_cur
    .local pmc rx374_curclass
    .local pmc rx374_bstack
    .local pmc rx374_cstack
    (rx374_cur, rx374_tgt, rx374_pos, rx374_curclass, rx374_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx374_cur
    length rx374_eos, rx374_tgt
    eq $I19, 1, rx374_restart1114
    gt rx374_pos, rx374_eos, rx374_fail1115
    repr_get_attr_int $I11, self, rx374_curclass, "$!from"
    ne $I11, -1, rxscan375_done1121
    goto rxscan375_scan1120
  rxscan375_loop1119:
    inc rx374_pos
    gt rx374_pos, rx374_eos, rx374_fail1115
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!from", rx374_pos
  rxscan375_scan1120:
    nqp_rxmark rx374_bstack, rxscan375_loop1119, rx374_pos, 0
  rxscan375_done1121:
    nqp_rxmark rx374_bstack, rxcap376_fail1123, rx374_pos, 0
    add $I11, rx374_pos, 3
    gt $I11, rx374_eos, rx374_fail1115
    substr $S10, rx374_tgt, rx374_pos, 3
    ne $S10, ucs4:"try", rx374_fail1115
    add rx374_pos, 3
    nqp_rxpeek $I19, rx374_bstack, rxcap376_fail1123
    inc $I19
    set $I11, rx374_bstack[$I19]
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!pos", rx374_pos
    $P11 = rx374_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx374_pos)
    rx374_cstack = rx374_cur."!cursor_capture"($P11, "sym")
    goto rxcap376_done1122
  rxcap376_fail1123:
    goto rx374_fail1115
  rxcap376_done1122:
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!pos", rx374_pos
    $P11 = rx374_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx374_curclass, "$!pos"
    lt $I11, 0, rx374_fail1115
    nqp_rxmark rx374_bstack, rxsubrule377_pass1124, -1, 0
  rxsubrule377_pass1124:
    rx374_cstack = rx374_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx374_pos, $P11, rx374_curclass, "$!pos"
    rx374_cur."!cursor_pass"(rx374_pos, "statement_prefix:sym<try>", 'backtrack'=>1)
    .return (rx374_cur)
  rx374_restart1114:
    repr_get_attr_obj rx374_cstack, rx374_cur, rx374_curclass, "$!cstack"
  rx374_fail1115:
    unless rx374_bstack, rx374_done1113
    pop $I19, rx374_bstack
    if_null rx374_cstack, rx374_cstack_done1118
    unless rx374_cstack, rx374_cstack_done1118
    dec $I19
    set $P11, rx374_cstack[$I19]
  rx374_cstack_done1118:
    pop rx374_rep, rx374_bstack
    pop rx374_pos, rx374_bstack
    pop $I19, rx374_bstack
    lt rx374_pos, -1, rx374_done1113
    lt rx374_pos, 0, rx374_fail1115
    eq $I19, 0, rx374_fail1115
    nqp_islist $I20, rx374_cstack
    unless $I20, rx374_jump1116
    elements $I18, rx374_bstack
    le $I18, 0, rx374_cut1117
    dec $I18
    set $I18, rx374_bstack[$I18]
  rx374_cut1117:
    assign rx374_cstack, $I18
  rx374_jump1116:
    jump $I19
  rx374_done1113:
    rx374_cur."!cursor_fail"()
    .return (rx374_cur) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_75_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 866
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx378_tgt
    .local int rx378_pos
    .local int rx378_off
    .local int rx378_eos
    .local int rx378_rep
    .local pmc rx378_cur
    .local pmc rx378_curclass
    .local pmc rx378_bstack
    .local pmc rx378_cstack
    (rx378_cur, rx378_tgt, rx378_pos, rx378_curclass, rx378_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx378_cur
    length rx378_eos, rx378_tgt
    eq $I19, 1, rx378_restart1127
    gt rx378_pos, rx378_eos, rx378_fail1128
    repr_get_attr_int $I11, self, rx378_curclass, "$!from"
    ne $I11, -1, rxscan379_done1134
    goto rxscan379_scan1133
  rxscan379_loop1132:
    inc rx378_pos
    gt rx378_pos, rx378_eos, rx378_fail1128
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!from", rx378_pos
  rxscan379_scan1133:
    nqp_rxmark rx378_bstack, rxscan379_loop1132, rx378_pos, 0
  rxscan379_done1134:
    ge rx378_pos, rx378_eos, rx378_fail1128
    is_cclass $I11, .CCLASS_WHITESPACE, rx378_tgt, rx378_pos
    unless $I11, rx378_fail1128
    add rx378_pos, 1
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!pos", rx378_pos
    $P11 = rx378_cur."ws"()
    repr_get_attr_int $I11, $P11, rx378_curclass, "$!pos"
    lt $I11, 0, rx378_fail1128
    repr_get_attr_int rx378_pos, $P11, rx378_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt381_01137
    nqp_push_label $P11, alt381_11139
    nqp_rxmark rx378_bstack, alt381_end1136, -1, 0
    rx378_cur."!alt"(rx378_pos, "alt_nfa__16_1351203236.848", $P11)
    goto rx378_fail1128
  alt381_01137:
    ge rx378_pos, rx378_eos, rx378_fail1128
    substr $S11, rx378_tgt, rx378_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx378_fail1128
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!pos", rx378_pos
    $P11 = rx378_cur."block"()
    repr_get_attr_int $I11, $P11, rx378_curclass, "$!pos"
    lt $I11, 0, rx378_fail1128
    nqp_rxmark rx378_bstack, rxsubrule382_pass1138, -1, 0
  rxsubrule382_pass1138:
    rx378_cstack = rx378_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx378_pos, $P11, rx378_curclass, "$!pos"
    goto alt381_end1136
  alt381_11139:
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!pos", rx378_pos
    $P11 = rx378_cur."statement"()
    repr_get_attr_int $I11, $P11, rx378_curclass, "$!pos"
    lt $I11, 0, rx378_fail1128
    nqp_rxmark rx378_bstack, rxsubrule383_pass1140, -1, 0
  rxsubrule383_pass1140:
    rx378_cstack = rx378_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx378_pos, $P11, rx378_curclass, "$!pos"
    goto alt381_end1136
  alt381_end1136:
    nqp_rxcommit rx378_bstack, alt381_end1136
    rx378_cur."!cursor_pass"(rx378_pos, "blorst", 'backtrack'=>1)
    .return (rx378_cur)
  rx378_restart1127:
    repr_get_attr_obj rx378_cstack, rx378_cur, rx378_curclass, "$!cstack"
  rx378_fail1128:
    unless rx378_bstack, rx378_done1126
    pop $I19, rx378_bstack
    if_null rx378_cstack, rx378_cstack_done1131
    unless rx378_cstack, rx378_cstack_done1131
    dec $I19
    set $P11, rx378_cstack[$I19]
  rx378_cstack_done1131:
    pop rx378_rep, rx378_bstack
    pop rx378_pos, rx378_bstack
    pop $I19, rx378_bstack
    lt rx378_pos, -1, rx378_done1126
    lt rx378_pos, 0, rx378_fail1128
    eq $I19, 0, rx378_fail1128
    nqp_islist $I20, rx378_cstack
    unless $I20, rx378_jump1129
    elements $I18, rx378_bstack
    le $I18, 0, rx378_cut1130
    dec $I18
    set $I18, rx378_bstack[$I18]
  rx378_cut1130:
    assign rx378_cstack, $I18
  rx378_jump1129:
    jump $I19
  rx378_done1126:
    rx378_cur."!cursor_fail"()
    .return (rx378_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond" :subid("cuid_76_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 872
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_cond")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_77_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 874
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx384_tgt
    .local int rx384_pos
    .local int rx384_off
    .local int rx384_eos
    .local int rx384_rep
    .local pmc rx384_cur
    .local pmc rx384_curclass
    .local pmc rx384_bstack
    .local pmc rx384_cstack
    (rx384_cur, rx384_tgt, rx384_pos, rx384_curclass, rx384_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx384_cur
    length rx384_eos, rx384_tgt
    eq $I19, 1, rx384_restart1143
    gt rx384_pos, rx384_eos, rx384_fail1144
    repr_get_attr_int $I11, self, rx384_curclass, "$!from"
    ne $I11, -1, rxscan385_done1150
    goto rxscan385_scan1149
  rxscan385_loop1148:
    inc rx384_pos
    gt rx384_pos, rx384_eos, rx384_fail1144
    repr_bind_attr_int rx384_cur, rx384_curclass, "$!from", rx384_pos
  rxscan385_scan1149:
    nqp_rxmark rx384_bstack, rxscan385_loop1148, rx384_pos, 0
  rxscan385_done1150:
    nqp_rxmark rx384_bstack, rxcap386_fail1152, rx384_pos, 0
    add $I11, rx384_pos, 2
    gt $I11, rx384_eos, rx384_fail1144
    substr $S10, rx384_tgt, rx384_pos, 2
    ne $S10, ucs4:"if", rx384_fail1144
    add rx384_pos, 2
    nqp_rxpeek $I19, rx384_bstack, rxcap386_fail1152
    inc $I19
    set $I11, rx384_bstack[$I19]
    repr_bind_attr_int rx384_cur, rx384_curclass, "$!pos", rx384_pos
    $P11 = rx384_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx384_pos)
    rx384_cstack = rx384_cur."!cursor_capture"($P11, "sym")
    goto rxcap386_done1151
  rxcap386_fail1152:
    goto rx384_fail1144
  rxcap386_done1151:
    repr_bind_attr_int rx384_cur, rx384_curclass, "$!pos", rx384_pos
    $P11 = rx384_cur."ws"()
    repr_get_attr_int $I11, $P11, rx384_curclass, "$!pos"
    lt $I11, 0, rx384_fail1144
    repr_get_attr_int rx384_pos, $P11, rx384_curclass, "$!pos"
    repr_bind_attr_int rx384_cur, rx384_curclass, "$!pos", rx384_pos
    $P11 = rx384_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx384_curclass, "$!pos"
    lt $I11, 0, rx384_fail1144
    nqp_rxmark rx384_bstack, rxsubrule388_pass1154, -1, 0
  rxsubrule388_pass1154:
    rx384_cstack = rx384_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx384_pos, $P11, rx384_curclass, "$!pos"
    repr_bind_attr_int rx384_cur, rx384_curclass, "$!pos", rx384_pos
    $P11 = rx384_cur."ws"()
    repr_get_attr_int $I11, $P11, rx384_curclass, "$!pos"
    lt $I11, 0, rx384_fail1144
    repr_get_attr_int rx384_pos, $P11, rx384_curclass, "$!pos"
    rx384_cur."!cursor_pass"(rx384_pos, "statement_mod_cond:sym<if>", 'backtrack'=>1)
    .return (rx384_cur)
  rx384_restart1143:
    repr_get_attr_obj rx384_cstack, rx384_cur, rx384_curclass, "$!cstack"
  rx384_fail1144:
    unless rx384_bstack, rx384_done1142
    pop $I19, rx384_bstack
    if_null rx384_cstack, rx384_cstack_done1147
    unless rx384_cstack, rx384_cstack_done1147
    dec $I19
    set $P11, rx384_cstack[$I19]
  rx384_cstack_done1147:
    pop rx384_rep, rx384_bstack
    pop rx384_pos, rx384_bstack
    pop $I19, rx384_bstack
    lt rx384_pos, -1, rx384_done1142
    lt rx384_pos, 0, rx384_fail1144
    eq $I19, 0, rx384_fail1144
    nqp_islist $I20, rx384_cstack
    unless $I20, rx384_jump1145
    elements $I18, rx384_bstack
    le $I18, 0, rx384_cut1146
    dec $I18
    set $I18, rx384_bstack[$I18]
  rx384_cut1146:
    assign rx384_cstack, $I18
  rx384_jump1145:
    jump $I19
  rx384_done1142:
    rx384_cur."!cursor_fail"()
    .return (rx384_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_78_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 875
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx390_tgt
    .local int rx390_pos
    .local int rx390_off
    .local int rx390_eos
    .local int rx390_rep
    .local pmc rx390_cur
    .local pmc rx390_curclass
    .local pmc rx390_bstack
    .local pmc rx390_cstack
    (rx390_cur, rx390_tgt, rx390_pos, rx390_curclass, rx390_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx390_cur
    length rx390_eos, rx390_tgt
    eq $I19, 1, rx390_restart1158
    gt rx390_pos, rx390_eos, rx390_fail1159
    repr_get_attr_int $I11, self, rx390_curclass, "$!from"
    ne $I11, -1, rxscan391_done1165
    goto rxscan391_scan1164
  rxscan391_loop1163:
    inc rx390_pos
    gt rx390_pos, rx390_eos, rx390_fail1159
    repr_bind_attr_int rx390_cur, rx390_curclass, "$!from", rx390_pos
  rxscan391_scan1164:
    nqp_rxmark rx390_bstack, rxscan391_loop1163, rx390_pos, 0
  rxscan391_done1165:
    nqp_rxmark rx390_bstack, rxcap392_fail1167, rx390_pos, 0
    add $I11, rx390_pos, 6
    gt $I11, rx390_eos, rx390_fail1159
    substr $S10, rx390_tgt, rx390_pos, 6
    ne $S10, ucs4:"unless", rx390_fail1159
    add rx390_pos, 6
    nqp_rxpeek $I19, rx390_bstack, rxcap392_fail1167
    inc $I19
    set $I11, rx390_bstack[$I19]
    repr_bind_attr_int rx390_cur, rx390_curclass, "$!pos", rx390_pos
    $P11 = rx390_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx390_pos)
    rx390_cstack = rx390_cur."!cursor_capture"($P11, "sym")
    goto rxcap392_done1166
  rxcap392_fail1167:
    goto rx390_fail1159
  rxcap392_done1166:
    repr_bind_attr_int rx390_cur, rx390_curclass, "$!pos", rx390_pos
    $P11 = rx390_cur."ws"()
    repr_get_attr_int $I11, $P11, rx390_curclass, "$!pos"
    lt $I11, 0, rx390_fail1159
    repr_get_attr_int rx390_pos, $P11, rx390_curclass, "$!pos"
    repr_bind_attr_int rx390_cur, rx390_curclass, "$!pos", rx390_pos
    $P11 = rx390_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx390_curclass, "$!pos"
    lt $I11, 0, rx390_fail1159
    nqp_rxmark rx390_bstack, rxsubrule394_pass1169, -1, 0
  rxsubrule394_pass1169:
    rx390_cstack = rx390_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx390_pos, $P11, rx390_curclass, "$!pos"
    repr_bind_attr_int rx390_cur, rx390_curclass, "$!pos", rx390_pos
    $P11 = rx390_cur."ws"()
    repr_get_attr_int $I11, $P11, rx390_curclass, "$!pos"
    lt $I11, 0, rx390_fail1159
    repr_get_attr_int rx390_pos, $P11, rx390_curclass, "$!pos"
    rx390_cur."!cursor_pass"(rx390_pos, "statement_mod_cond:sym<unless>", 'backtrack'=>1)
    .return (rx390_cur)
  rx390_restart1158:
    repr_get_attr_obj rx390_cstack, rx390_cur, rx390_curclass, "$!cstack"
  rx390_fail1159:
    unless rx390_bstack, rx390_done1157
    pop $I19, rx390_bstack
    if_null rx390_cstack, rx390_cstack_done1162
    unless rx390_cstack, rx390_cstack_done1162
    dec $I19
    set $P11, rx390_cstack[$I19]
  rx390_cstack_done1162:
    pop rx390_rep, rx390_bstack
    pop rx390_pos, rx390_bstack
    pop $I19, rx390_bstack
    lt rx390_pos, -1, rx390_done1157
    lt rx390_pos, 0, rx390_fail1159
    eq $I19, 0, rx390_fail1159
    nqp_islist $I20, rx390_cstack
    unless $I20, rx390_jump1160
    elements $I18, rx390_bstack
    le $I18, 0, rx390_cut1161
    dec $I18
    set $I18, rx390_bstack[$I18]
  rx390_cut1161:
    assign rx390_cstack, $I18
  rx390_jump1160:
    jump $I19
  rx390_done1157:
    rx390_cur."!cursor_fail"()
    .return (rx390_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop" :subid("cuid_79_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 877
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_loop")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_80_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 879
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx396_tgt
    .local int rx396_pos
    .local int rx396_off
    .local int rx396_eos
    .local int rx396_rep
    .local pmc rx396_cur
    .local pmc rx396_curclass
    .local pmc rx396_bstack
    .local pmc rx396_cstack
    (rx396_cur, rx396_tgt, rx396_pos, rx396_curclass, rx396_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx396_cur
    length rx396_eos, rx396_tgt
    eq $I19, 1, rx396_restart1173
    gt rx396_pos, rx396_eos, rx396_fail1174
    repr_get_attr_int $I11, self, rx396_curclass, "$!from"
    ne $I11, -1, rxscan397_done1180
    goto rxscan397_scan1179
  rxscan397_loop1178:
    inc rx396_pos
    gt rx396_pos, rx396_eos, rx396_fail1174
    repr_bind_attr_int rx396_cur, rx396_curclass, "$!from", rx396_pos
  rxscan397_scan1179:
    nqp_rxmark rx396_bstack, rxscan397_loop1178, rx396_pos, 0
  rxscan397_done1180:
    nqp_rxmark rx396_bstack, rxcap398_fail1182, rx396_pos, 0
    add $I11, rx396_pos, 5
    gt $I11, rx396_eos, rx396_fail1174
    substr $S10, rx396_tgt, rx396_pos, 5
    ne $S10, ucs4:"while", rx396_fail1174
    add rx396_pos, 5
    nqp_rxpeek $I19, rx396_bstack, rxcap398_fail1182
    inc $I19
    set $I11, rx396_bstack[$I19]
    repr_bind_attr_int rx396_cur, rx396_curclass, "$!pos", rx396_pos
    $P11 = rx396_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx396_pos)
    rx396_cstack = rx396_cur."!cursor_capture"($P11, "sym")
    goto rxcap398_done1181
  rxcap398_fail1182:
    goto rx396_fail1174
  rxcap398_done1181:
    repr_bind_attr_int rx396_cur, rx396_curclass, "$!pos", rx396_pos
    $P11 = rx396_cur."ws"()
    repr_get_attr_int $I11, $P11, rx396_curclass, "$!pos"
    lt $I11, 0, rx396_fail1174
    repr_get_attr_int rx396_pos, $P11, rx396_curclass, "$!pos"
    repr_bind_attr_int rx396_cur, rx396_curclass, "$!pos", rx396_pos
    $P11 = rx396_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx396_curclass, "$!pos"
    lt $I11, 0, rx396_fail1174
    nqp_rxmark rx396_bstack, rxsubrule400_pass1184, -1, 0
  rxsubrule400_pass1184:
    rx396_cstack = rx396_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx396_pos, $P11, rx396_curclass, "$!pos"
    repr_bind_attr_int rx396_cur, rx396_curclass, "$!pos", rx396_pos
    $P11 = rx396_cur."ws"()
    repr_get_attr_int $I11, $P11, rx396_curclass, "$!pos"
    lt $I11, 0, rx396_fail1174
    repr_get_attr_int rx396_pos, $P11, rx396_curclass, "$!pos"
    rx396_cur."!cursor_pass"(rx396_pos, "statement_mod_loop:sym<while>", 'backtrack'=>1)
    .return (rx396_cur)
  rx396_restart1173:
    repr_get_attr_obj rx396_cstack, rx396_cur, rx396_curclass, "$!cstack"
  rx396_fail1174:
    unless rx396_bstack, rx396_done1172
    pop $I19, rx396_bstack
    if_null rx396_cstack, rx396_cstack_done1177
    unless rx396_cstack, rx396_cstack_done1177
    dec $I19
    set $P11, rx396_cstack[$I19]
  rx396_cstack_done1177:
    pop rx396_rep, rx396_bstack
    pop rx396_pos, rx396_bstack
    pop $I19, rx396_bstack
    lt rx396_pos, -1, rx396_done1172
    lt rx396_pos, 0, rx396_fail1174
    eq $I19, 0, rx396_fail1174
    nqp_islist $I20, rx396_cstack
    unless $I20, rx396_jump1175
    elements $I18, rx396_bstack
    le $I18, 0, rx396_cut1176
    dec $I18
    set $I18, rx396_bstack[$I18]
  rx396_cut1176:
    assign rx396_cstack, $I18
  rx396_jump1175:
    jump $I19
  rx396_done1172:
    rx396_cur."!cursor_fail"()
    .return (rx396_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_81_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 880
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx402_tgt
    .local int rx402_pos
    .local int rx402_off
    .local int rx402_eos
    .local int rx402_rep
    .local pmc rx402_cur
    .local pmc rx402_curclass
    .local pmc rx402_bstack
    .local pmc rx402_cstack
    (rx402_cur, rx402_tgt, rx402_pos, rx402_curclass, rx402_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx402_cur
    length rx402_eos, rx402_tgt
    eq $I19, 1, rx402_restart1188
    gt rx402_pos, rx402_eos, rx402_fail1189
    repr_get_attr_int $I11, self, rx402_curclass, "$!from"
    ne $I11, -1, rxscan403_done1195
    goto rxscan403_scan1194
  rxscan403_loop1193:
    inc rx402_pos
    gt rx402_pos, rx402_eos, rx402_fail1189
    repr_bind_attr_int rx402_cur, rx402_curclass, "$!from", rx402_pos
  rxscan403_scan1194:
    nqp_rxmark rx402_bstack, rxscan403_loop1193, rx402_pos, 0
  rxscan403_done1195:
    nqp_rxmark rx402_bstack, rxcap404_fail1197, rx402_pos, 0
    add $I11, rx402_pos, 5
    gt $I11, rx402_eos, rx402_fail1189
    substr $S10, rx402_tgt, rx402_pos, 5
    ne $S10, ucs4:"until", rx402_fail1189
    add rx402_pos, 5
    nqp_rxpeek $I19, rx402_bstack, rxcap404_fail1197
    inc $I19
    set $I11, rx402_bstack[$I19]
    repr_bind_attr_int rx402_cur, rx402_curclass, "$!pos", rx402_pos
    $P11 = rx402_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx402_pos)
    rx402_cstack = rx402_cur."!cursor_capture"($P11, "sym")
    goto rxcap404_done1196
  rxcap404_fail1197:
    goto rx402_fail1189
  rxcap404_done1196:
    repr_bind_attr_int rx402_cur, rx402_curclass, "$!pos", rx402_pos
    $P11 = rx402_cur."ws"()
    repr_get_attr_int $I11, $P11, rx402_curclass, "$!pos"
    lt $I11, 0, rx402_fail1189
    repr_get_attr_int rx402_pos, $P11, rx402_curclass, "$!pos"
    repr_bind_attr_int rx402_cur, rx402_curclass, "$!pos", rx402_pos
    $P11 = rx402_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx402_curclass, "$!pos"
    lt $I11, 0, rx402_fail1189
    nqp_rxmark rx402_bstack, rxsubrule406_pass1199, -1, 0
  rxsubrule406_pass1199:
    rx402_cstack = rx402_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx402_pos, $P11, rx402_curclass, "$!pos"
    repr_bind_attr_int rx402_cur, rx402_curclass, "$!pos", rx402_pos
    $P11 = rx402_cur."ws"()
    repr_get_attr_int $I11, $P11, rx402_curclass, "$!pos"
    lt $I11, 0, rx402_fail1189
    repr_get_attr_int rx402_pos, $P11, rx402_curclass, "$!pos"
    rx402_cur."!cursor_pass"(rx402_pos, "statement_mod_loop:sym<until>", 'backtrack'=>1)
    .return (rx402_cur)
  rx402_restart1188:
    repr_get_attr_obj rx402_cstack, rx402_cur, rx402_curclass, "$!cstack"
  rx402_fail1189:
    unless rx402_bstack, rx402_done1187
    pop $I19, rx402_bstack
    if_null rx402_cstack, rx402_cstack_done1192
    unless rx402_cstack, rx402_cstack_done1192
    dec $I19
    set $P11, rx402_cstack[$I19]
  rx402_cstack_done1192:
    pop rx402_rep, rx402_bstack
    pop rx402_pos, rx402_bstack
    pop $I19, rx402_bstack
    lt rx402_pos, -1, rx402_done1187
    lt rx402_pos, 0, rx402_fail1189
    eq $I19, 0, rx402_fail1189
    nqp_islist $I20, rx402_cstack
    unless $I20, rx402_jump1190
    elements $I18, rx402_bstack
    le $I18, 0, rx402_cut1191
    dec $I18
    set $I18, rx402_bstack[$I18]
  rx402_cut1191:
    assign rx402_cstack, $I18
  rx402_jump1190:
    jump $I19
  rx402_done1187:
    rx402_cur."!cursor_fail"()
    .return (rx402_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<for>" :subid("cuid_82_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 881
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx408_tgt
    .local int rx408_pos
    .local int rx408_off
    .local int rx408_eos
    .local int rx408_rep
    .local pmc rx408_cur
    .local pmc rx408_curclass
    .local pmc rx408_bstack
    .local pmc rx408_cstack
    (rx408_cur, rx408_tgt, rx408_pos, rx408_curclass, rx408_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx408_cur
    length rx408_eos, rx408_tgt
    eq $I19, 1, rx408_restart1203
    gt rx408_pos, rx408_eos, rx408_fail1204
    repr_get_attr_int $I11, self, rx408_curclass, "$!from"
    ne $I11, -1, rxscan409_done1210
    goto rxscan409_scan1209
  rxscan409_loop1208:
    inc rx408_pos
    gt rx408_pos, rx408_eos, rx408_fail1204
    repr_bind_attr_int rx408_cur, rx408_curclass, "$!from", rx408_pos
  rxscan409_scan1209:
    nqp_rxmark rx408_bstack, rxscan409_loop1208, rx408_pos, 0
  rxscan409_done1210:
    nqp_rxmark rx408_bstack, rxcap410_fail1212, rx408_pos, 0
    add $I11, rx408_pos, 3
    gt $I11, rx408_eos, rx408_fail1204
    substr $S10, rx408_tgt, rx408_pos, 3
    ne $S10, ucs4:"for", rx408_fail1204
    add rx408_pos, 3
    nqp_rxpeek $I19, rx408_bstack, rxcap410_fail1212
    inc $I19
    set $I11, rx408_bstack[$I19]
    repr_bind_attr_int rx408_cur, rx408_curclass, "$!pos", rx408_pos
    $P11 = rx408_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx408_pos)
    rx408_cstack = rx408_cur."!cursor_capture"($P11, "sym")
    goto rxcap410_done1211
  rxcap410_fail1212:
    goto rx408_fail1204
  rxcap410_done1211:
    repr_bind_attr_int rx408_cur, rx408_curclass, "$!pos", rx408_pos
    $P11 = rx408_cur."ws"()
    repr_get_attr_int $I11, $P11, rx408_curclass, "$!pos"
    lt $I11, 0, rx408_fail1204
    repr_get_attr_int rx408_pos, $P11, rx408_curclass, "$!pos"
    repr_bind_attr_int rx408_cur, rx408_curclass, "$!pos", rx408_pos
    $P11 = rx408_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx408_curclass, "$!pos"
    lt $I11, 0, rx408_fail1204
    nqp_rxmark rx408_bstack, rxsubrule412_pass1214, -1, 0
  rxsubrule412_pass1214:
    rx408_cstack = rx408_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx408_pos, $P11, rx408_curclass, "$!pos"
    repr_bind_attr_int rx408_cur, rx408_curclass, "$!pos", rx408_pos
    $P11 = rx408_cur."ws"()
    repr_get_attr_int $I11, $P11, rx408_curclass, "$!pos"
    lt $I11, 0, rx408_fail1204
    repr_get_attr_int rx408_pos, $P11, rx408_curclass, "$!pos"
    rx408_cur."!cursor_pass"(rx408_pos, "statement_mod_loop:sym<for>", 'backtrack'=>1)
    .return (rx408_cur)
  rx408_restart1203:
    repr_get_attr_obj rx408_cstack, rx408_cur, rx408_curclass, "$!cstack"
  rx408_fail1204:
    unless rx408_bstack, rx408_done1202
    pop $I19, rx408_bstack
    if_null rx408_cstack, rx408_cstack_done1207
    unless rx408_cstack, rx408_cstack_done1207
    dec $I19
    set $P11, rx408_cstack[$I19]
  rx408_cstack_done1207:
    pop rx408_rep, rx408_bstack
    pop rx408_pos, rx408_bstack
    pop $I19, rx408_bstack
    lt rx408_pos, -1, rx408_done1202
    lt rx408_pos, 0, rx408_fail1204
    eq $I19, 0, rx408_fail1204
    nqp_islist $I20, rx408_cstack
    unless $I20, rx408_jump1205
    elements $I18, rx408_bstack
    le $I18, 0, rx408_cut1206
    dec $I18
    set $I18, rx408_bstack[$I18]
  rx408_cut1206:
    assign rx408_cstack, $I18
  rx408_jump1205:
    jump $I19
  rx408_done1202:
    rx408_cur."!cursor_fail"()
    .return (rx408_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_83_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 885
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx414_tgt
    .local int rx414_pos
    .local int rx414_off
    .local int rx414_eos
    .local int rx414_rep
    .local pmc rx414_cur
    .local pmc rx414_curclass
    .local pmc rx414_bstack
    .local pmc rx414_cstack
    (rx414_cur, rx414_tgt, rx414_pos, rx414_curclass, rx414_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx414_cur
    length rx414_eos, rx414_tgt
    eq $I19, 1, rx414_restart1218
    gt rx414_pos, rx414_eos, rx414_fail1219
    repr_get_attr_int $I11, self, rx414_curclass, "$!from"
    ne $I11, -1, rxscan415_done1225
    goto rxscan415_scan1224
  rxscan415_loop1223:
    inc rx414_pos
    gt rx414_pos, rx414_eos, rx414_fail1219
    repr_bind_attr_int rx414_cur, rx414_curclass, "$!from", rx414_pos
  rxscan415_scan1224:
    nqp_rxmark rx414_bstack, rxscan415_loop1223, rx414_pos, 0
  rxscan415_done1225:
    repr_bind_attr_int rx414_cur, rx414_curclass, "$!pos", rx414_pos
    $P11 = rx414_cur."fatarrow"()
    repr_get_attr_int $I11, $P11, rx414_curclass, "$!pos"
    lt $I11, 0, rx414_fail1219
    nqp_rxmark rx414_bstack, rxsubrule416_pass1226, -1, 0
  rxsubrule416_pass1226:
    rx414_cstack = rx414_cur."!cursor_capture"($P11, "fatarrow")
    repr_get_attr_int rx414_pos, $P11, rx414_curclass, "$!pos"
    rx414_cur."!cursor_pass"(rx414_pos, "term:sym<fatarrow>", 'backtrack'=>1)
    .return (rx414_cur)
  rx414_restart1218:
    repr_get_attr_obj rx414_cstack, rx414_cur, rx414_curclass, "$!cstack"
  rx414_fail1219:
    unless rx414_bstack, rx414_done1217
    pop $I19, rx414_bstack
    if_null rx414_cstack, rx414_cstack_done1222
    unless rx414_cstack, rx414_cstack_done1222
    dec $I19
    set $P11, rx414_cstack[$I19]
  rx414_cstack_done1222:
    pop rx414_rep, rx414_bstack
    pop rx414_pos, rx414_bstack
    pop $I19, rx414_bstack
    lt rx414_pos, -1, rx414_done1217
    lt rx414_pos, 0, rx414_fail1219
    eq $I19, 0, rx414_fail1219
    nqp_islist $I20, rx414_cstack
    unless $I20, rx414_jump1220
    elements $I18, rx414_bstack
    le $I18, 0, rx414_cut1221
    dec $I18
    set $I18, rx414_bstack[$I18]
  rx414_cut1221:
    assign rx414_cstack, $I18
  rx414_jump1220:
    jump $I19
  rx414_done1217:
    rx414_cur."!cursor_fail"()
    .return (rx414_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_84_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 886
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx417_tgt
    .local int rx417_pos
    .local int rx417_off
    .local int rx417_eos
    .local int rx417_rep
    .local pmc rx417_cur
    .local pmc rx417_curclass
    .local pmc rx417_bstack
    .local pmc rx417_cstack
    (rx417_cur, rx417_tgt, rx417_pos, rx417_curclass, rx417_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx417_cur
    length rx417_eos, rx417_tgt
    eq $I19, 1, rx417_restart1229
    gt rx417_pos, rx417_eos, rx417_fail1230
    repr_get_attr_int $I11, self, rx417_curclass, "$!from"
    ne $I11, -1, rxscan418_done1236
    goto rxscan418_scan1235
  rxscan418_loop1234:
    inc rx417_pos
    gt rx417_pos, rx417_eos, rx417_fail1230
    repr_bind_attr_int rx417_cur, rx417_curclass, "$!from", rx417_pos
  rxscan418_scan1235:
    nqp_rxmark rx417_bstack, rxscan418_loop1234, rx417_pos, 0
  rxscan418_done1236:
    repr_bind_attr_int rx417_cur, rx417_curclass, "$!pos", rx417_pos
    $P11 = rx417_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx417_curclass, "$!pos"
    lt $I11, 0, rx417_fail1230
    nqp_rxmark rx417_bstack, rxsubrule419_pass1237, -1, 0
  rxsubrule419_pass1237:
    rx417_cstack = rx417_cur."!cursor_capture"($P11, "colonpair")
    repr_get_attr_int rx417_pos, $P11, rx417_curclass, "$!pos"
    rx417_cur."!cursor_pass"(rx417_pos, "term:sym<colonpair>", 'backtrack'=>1)
    .return (rx417_cur)
  rx417_restart1229:
    repr_get_attr_obj rx417_cstack, rx417_cur, rx417_curclass, "$!cstack"
  rx417_fail1230:
    unless rx417_bstack, rx417_done1228
    pop $I19, rx417_bstack
    if_null rx417_cstack, rx417_cstack_done1233
    unless rx417_cstack, rx417_cstack_done1233
    dec $I19
    set $P11, rx417_cstack[$I19]
  rx417_cstack_done1233:
    pop rx417_rep, rx417_bstack
    pop rx417_pos, rx417_bstack
    pop $I19, rx417_bstack
    lt rx417_pos, -1, rx417_done1228
    lt rx417_pos, 0, rx417_fail1230
    eq $I19, 0, rx417_fail1230
    nqp_islist $I20, rx417_cstack
    unless $I20, rx417_jump1231
    elements $I18, rx417_bstack
    le $I18, 0, rx417_cut1232
    dec $I18
    set $I18, rx417_bstack[$I18]
  rx417_cut1232:
    assign rx417_cstack, $I18
  rx417_jump1231:
    jump $I19
  rx417_done1228:
    rx417_cur."!cursor_fail"()
    .return (rx417_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_85_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 887
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx420_tgt
    .local int rx420_pos
    .local int rx420_off
    .local int rx420_eos
    .local int rx420_rep
    .local pmc rx420_cur
    .local pmc rx420_curclass
    .local pmc rx420_bstack
    .local pmc rx420_cstack
    (rx420_cur, rx420_tgt, rx420_pos, rx420_curclass, rx420_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx420_cur
    length rx420_eos, rx420_tgt
    eq $I19, 1, rx420_restart1240
    gt rx420_pos, rx420_eos, rx420_fail1241
    repr_get_attr_int $I11, self, rx420_curclass, "$!from"
    ne $I11, -1, rxscan421_done1247
    goto rxscan421_scan1246
  rxscan421_loop1245:
    inc rx420_pos
    gt rx420_pos, rx420_eos, rx420_fail1241
    repr_bind_attr_int rx420_cur, rx420_curclass, "$!from", rx420_pos
  rxscan421_scan1246:
    nqp_rxmark rx420_bstack, rxscan421_loop1245, rx420_pos, 0
  rxscan421_done1247:
    repr_bind_attr_int rx420_cur, rx420_curclass, "$!pos", rx420_pos
    $P11 = rx420_cur."variable"()
    repr_get_attr_int $I11, $P11, rx420_curclass, "$!pos"
    lt $I11, 0, rx420_fail1241
    nqp_rxmark rx420_bstack, rxsubrule422_pass1248, -1, 0
  rxsubrule422_pass1248:
    rx420_cstack = rx420_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx420_pos, $P11, rx420_curclass, "$!pos"
    rx420_cur."!cursor_pass"(rx420_pos, "term:sym<variable>", 'backtrack'=>1)
    .return (rx420_cur)
  rx420_restart1240:
    repr_get_attr_obj rx420_cstack, rx420_cur, rx420_curclass, "$!cstack"
  rx420_fail1241:
    unless rx420_bstack, rx420_done1239
    pop $I19, rx420_bstack
    if_null rx420_cstack, rx420_cstack_done1244
    unless rx420_cstack, rx420_cstack_done1244
    dec $I19
    set $P11, rx420_cstack[$I19]
  rx420_cstack_done1244:
    pop rx420_rep, rx420_bstack
    pop rx420_pos, rx420_bstack
    pop $I19, rx420_bstack
    lt rx420_pos, -1, rx420_done1239
    lt rx420_pos, 0, rx420_fail1241
    eq $I19, 0, rx420_fail1241
    nqp_islist $I20, rx420_cstack
    unless $I20, rx420_jump1242
    elements $I18, rx420_bstack
    le $I18, 0, rx420_cut1243
    dec $I18
    set $I18, rx420_bstack[$I18]
  rx420_cut1243:
    assign rx420_cstack, $I18
  rx420_jump1242:
    jump $I19
  rx420_done1239:
    rx420_cur."!cursor_fail"()
    .return (rx420_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_86_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 888
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx423_tgt
    .local int rx423_pos
    .local int rx423_off
    .local int rx423_eos
    .local int rx423_rep
    .local pmc rx423_cur
    .local pmc rx423_curclass
    .local pmc rx423_bstack
    .local pmc rx423_cstack
    (rx423_cur, rx423_tgt, rx423_pos, rx423_curclass, rx423_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx423_cur
    length rx423_eos, rx423_tgt
    eq $I19, 1, rx423_restart1251
    gt rx423_pos, rx423_eos, rx423_fail1252
    repr_get_attr_int $I11, self, rx423_curclass, "$!from"
    ne $I11, -1, rxscan424_done1258
    goto rxscan424_scan1257
  rxscan424_loop1256:
    inc rx423_pos
    gt rx423_pos, rx423_eos, rx423_fail1252
    repr_bind_attr_int rx423_cur, rx423_curclass, "$!from", rx423_pos
  rxscan424_scan1257:
    nqp_rxmark rx423_bstack, rxscan424_loop1256, rx423_pos, 0
  rxscan424_done1258:
    repr_bind_attr_int rx423_cur, rx423_curclass, "$!pos", rx423_pos
    $P11 = rx423_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx423_curclass, "$!pos"
    lt $I11, 0, rx423_fail1252
    nqp_rxmark rx423_bstack, rxsubrule425_pass1259, -1, 0
  rxsubrule425_pass1259:
    rx423_cstack = rx423_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx423_pos, $P11, rx423_curclass, "$!pos"
    rx423_cur."!cursor_pass"(rx423_pos, "term:sym<package_declarator>", 'backtrack'=>1)
    .return (rx423_cur)
  rx423_restart1251:
    repr_get_attr_obj rx423_cstack, rx423_cur, rx423_curclass, "$!cstack"
  rx423_fail1252:
    unless rx423_bstack, rx423_done1250
    pop $I19, rx423_bstack
    if_null rx423_cstack, rx423_cstack_done1255
    unless rx423_cstack, rx423_cstack_done1255
    dec $I19
    set $P11, rx423_cstack[$I19]
  rx423_cstack_done1255:
    pop rx423_rep, rx423_bstack
    pop rx423_pos, rx423_bstack
    pop $I19, rx423_bstack
    lt rx423_pos, -1, rx423_done1250
    lt rx423_pos, 0, rx423_fail1252
    eq $I19, 0, rx423_fail1252
    nqp_islist $I20, rx423_cstack
    unless $I20, rx423_jump1253
    elements $I18, rx423_bstack
    le $I18, 0, rx423_cut1254
    dec $I18
    set $I18, rx423_bstack[$I18]
  rx423_cut1254:
    assign rx423_cstack, $I18
  rx423_jump1253:
    jump $I19
  rx423_done1250:
    rx423_cur."!cursor_fail"()
    .return (rx423_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_87_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 889
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx426_tgt
    .local int rx426_pos
    .local int rx426_off
    .local int rx426_eos
    .local int rx426_rep
    .local pmc rx426_cur
    .local pmc rx426_curclass
    .local pmc rx426_bstack
    .local pmc rx426_cstack
    (rx426_cur, rx426_tgt, rx426_pos, rx426_curclass, rx426_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx426_cur
    length rx426_eos, rx426_tgt
    eq $I19, 1, rx426_restart1262
    gt rx426_pos, rx426_eos, rx426_fail1263
    repr_get_attr_int $I11, self, rx426_curclass, "$!from"
    ne $I11, -1, rxscan427_done1269
    goto rxscan427_scan1268
  rxscan427_loop1267:
    inc rx426_pos
    gt rx426_pos, rx426_eos, rx426_fail1263
    repr_bind_attr_int rx426_cur, rx426_curclass, "$!from", rx426_pos
  rxscan427_scan1268:
    nqp_rxmark rx426_bstack, rxscan427_loop1267, rx426_pos, 0
  rxscan427_done1269:
    repr_bind_attr_int rx426_cur, rx426_curclass, "$!pos", rx426_pos
    $P11 = rx426_cur."scope_declarator"()
    repr_get_attr_int $I11, $P11, rx426_curclass, "$!pos"
    lt $I11, 0, rx426_fail1263
    nqp_rxmark rx426_bstack, rxsubrule428_pass1270, -1, 0
  rxsubrule428_pass1270:
    rx426_cstack = rx426_cur."!cursor_capture"($P11, "scope_declarator")
    repr_get_attr_int rx426_pos, $P11, rx426_curclass, "$!pos"
    rx426_cur."!cursor_pass"(rx426_pos, "term:sym<scope_declarator>", 'backtrack'=>1)
    .return (rx426_cur)
  rx426_restart1262:
    repr_get_attr_obj rx426_cstack, rx426_cur, rx426_curclass, "$!cstack"
  rx426_fail1263:
    unless rx426_bstack, rx426_done1261
    pop $I19, rx426_bstack
    if_null rx426_cstack, rx426_cstack_done1266
    unless rx426_cstack, rx426_cstack_done1266
    dec $I19
    set $P11, rx426_cstack[$I19]
  rx426_cstack_done1266:
    pop rx426_rep, rx426_bstack
    pop rx426_pos, rx426_bstack
    pop $I19, rx426_bstack
    lt rx426_pos, -1, rx426_done1261
    lt rx426_pos, 0, rx426_fail1263
    eq $I19, 0, rx426_fail1263
    nqp_islist $I20, rx426_cstack
    unless $I20, rx426_jump1264
    elements $I18, rx426_bstack
    le $I18, 0, rx426_cut1265
    dec $I18
    set $I18, rx426_bstack[$I18]
  rx426_cut1265:
    assign rx426_cstack, $I18
  rx426_jump1264:
    jump $I19
  rx426_done1261:
    rx426_cur."!cursor_fail"()
    .return (rx426_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_88_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 890
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx429_tgt
    .local int rx429_pos
    .local int rx429_off
    .local int rx429_eos
    .local int rx429_rep
    .local pmc rx429_cur
    .local pmc rx429_curclass
    .local pmc rx429_bstack
    .local pmc rx429_cstack
    (rx429_cur, rx429_tgt, rx429_pos, rx429_curclass, rx429_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx429_cur
    length rx429_eos, rx429_tgt
    eq $I19, 1, rx429_restart1273
    gt rx429_pos, rx429_eos, rx429_fail1274
    repr_get_attr_int $I11, self, rx429_curclass, "$!from"
    ne $I11, -1, rxscan430_done1280
    goto rxscan430_scan1279
  rxscan430_loop1278:
    inc rx429_pos
    gt rx429_pos, rx429_eos, rx429_fail1274
    repr_bind_attr_int rx429_cur, rx429_curclass, "$!from", rx429_pos
  rxscan430_scan1279:
    nqp_rxmark rx429_bstack, rxscan430_loop1278, rx429_pos, 0
  rxscan430_done1280:
    repr_bind_attr_int rx429_cur, rx429_curclass, "$!pos", rx429_pos
    $P11 = rx429_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx429_curclass, "$!pos"
    lt $I11, 0, rx429_fail1274
    nqp_rxmark rx429_bstack, rxsubrule431_pass1281, -1, 0
  rxsubrule431_pass1281:
    rx429_cstack = rx429_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx429_pos, $P11, rx429_curclass, "$!pos"
    rx429_cur."!cursor_pass"(rx429_pos, "term:sym<routine_declarator>", 'backtrack'=>1)
    .return (rx429_cur)
  rx429_restart1273:
    repr_get_attr_obj rx429_cstack, rx429_cur, rx429_curclass, "$!cstack"
  rx429_fail1274:
    unless rx429_bstack, rx429_done1272
    pop $I19, rx429_bstack
    if_null rx429_cstack, rx429_cstack_done1277
    unless rx429_cstack, rx429_cstack_done1277
    dec $I19
    set $P11, rx429_cstack[$I19]
  rx429_cstack_done1277:
    pop rx429_rep, rx429_bstack
    pop rx429_pos, rx429_bstack
    pop $I19, rx429_bstack
    lt rx429_pos, -1, rx429_done1272
    lt rx429_pos, 0, rx429_fail1274
    eq $I19, 0, rx429_fail1274
    nqp_islist $I20, rx429_cstack
    unless $I20, rx429_jump1275
    elements $I18, rx429_bstack
    le $I18, 0, rx429_cut1276
    dec $I18
    set $I18, rx429_bstack[$I18]
  rx429_cut1276:
    assign rx429_cstack, $I18
  rx429_jump1275:
    jump $I19
  rx429_done1272:
    rx429_cur."!cursor_fail"()
    .return (rx429_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_89_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 891
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_90_1351203235.318' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_91_1351203235.318' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx432_tgt
    .local int rx432_pos
    .local int rx432_off
    .local int rx432_eos
    .local int rx432_rep
    .local pmc rx432_cur
    .local pmc rx432_curclass
    .local pmc rx432_bstack
    .local pmc rx432_cstack
    (rx432_cur, rx432_tgt, rx432_pos, rx432_curclass, rx432_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx432_cur
    length rx432_eos, rx432_tgt
    eq $I19, 1, rx432_restart1284
    gt rx432_pos, rx432_eos, rx432_fail1285
    repr_get_attr_int $I11, self, rx432_curclass, "$!from"
    ne $I11, -1, rxscan433_done1291
    goto rxscan433_scan1290
  rxscan433_loop1289:
    inc rx432_pos
    gt rx432_pos, rx432_eos, rx432_fail1285
    repr_bind_attr_int rx432_cur, rx432_curclass, "$!from", rx432_pos
  rxscan433_scan1290:
    nqp_rxmark rx432_bstack, rxscan433_loop1289, rx432_pos, 0
  rxscan433_done1291:
    .const 'Sub' $P5001 = 'cuid_90_1351203235.318' 
    capture_lex $P5001
    repr_bind_attr_int rx432_cur, rx432_curclass, "$!pos", rx432_pos
    $P11 = rx432_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx432_curclass, "$!pos"
    lt $I11, 0, rx432_fail1285
    .const 'Sub' $P5002 = 'cuid_91_1351203235.318' 
    capture_lex $P5002
    repr_bind_attr_int rx432_cur, rx432_curclass, "$!pos", rx432_pos
    $P11 = rx432_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx432_curclass, "$!pos"
    ge $I11, 0, rx432_fail1285
    repr_bind_attr_int rx432_cur, rx432_curclass, "$!pos", rx432_pos
    $P11 = rx432_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx432_curclass, "$!pos"
    lt $I11, 0, rx432_fail1285
    nqp_rxmark rx432_bstack, rxsubrule441_pass1321, -1, 0
  rxsubrule441_pass1321:
    rx432_cstack = rx432_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx432_pos, $P11, rx432_curclass, "$!pos"
    rx432_cur."!cursor_pass"(rx432_pos, "term:sym<multi_declarator>", 'backtrack'=>1)
    .return (rx432_cur)
  rx432_restart1284:
    repr_get_attr_obj rx432_cstack, rx432_cur, rx432_curclass, "$!cstack"
  rx432_fail1285:
    unless rx432_bstack, rx432_done1283
    pop $I19, rx432_bstack
    if_null rx432_cstack, rx432_cstack_done1288
    unless rx432_cstack, rx432_cstack_done1288
    dec $I19
    set $P11, rx432_cstack[$I19]
  rx432_cstack_done1288:
    pop rx432_rep, rx432_bstack
    pop rx432_pos, rx432_bstack
    pop $I19, rx432_bstack
    lt rx432_pos, -1, rx432_done1283
    lt rx432_pos, 0, rx432_fail1285
    eq $I19, 0, rx432_fail1285
    nqp_islist $I20, rx432_cstack
    unless $I20, rx432_jump1286
    elements $I18, rx432_bstack
    le $I18, 0, rx432_cut1287
    dec $I18
    set $I18, rx432_bstack[$I18]
  rx432_cut1287:
    assign rx432_cstack, $I18
  rx432_jump1286:
    jump $I19
  rx432_done1283:
    rx432_cur."!cursor_fail"()
    .return (rx432_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_90_1351203235.318") :anon :lex :outer("cuid_89_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx434_tgt
    .local int rx434_pos
    .local int rx434_off
    .local int rx434_eos
    .local int rx434_rep
    .local pmc rx434_cur
    .local pmc rx434_curclass
    .local pmc rx434_bstack
    .local pmc rx434_cstack
    (rx434_cur, rx434_tgt, rx434_pos, rx434_curclass, rx434_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx434_cur
    length rx434_eos, rx434_tgt
    eq $I19, 1, rx434_restart1294
    gt rx434_pos, rx434_eos, rx434_fail1295
    repr_get_attr_int $I11, self, rx434_curclass, "$!from"
    ne $I11, -1, rxscan435_done1301
    goto rxscan435_scan1300
  rxscan435_loop1299:
    inc rx434_pos
    gt rx434_pos, rx434_eos, rx434_fail1295
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!from", rx434_pos
  rxscan435_scan1300:
    nqp_rxmark rx434_bstack, rxscan435_loop1299, rx434_pos, 0
  rxscan435_done1301:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt436_01303
    nqp_push_label $P11, alt436_11304
    nqp_push_label $P11, alt436_21305
    nqp_rxmark rx434_bstack, alt436_end1302, -1, 0
    rx434_cur."!alt"(rx434_pos, "alt_nfa__17_1351203236.912", $P11)
    goto rx434_fail1295
  alt436_01303:
    add $I11, rx434_pos, 5
    gt $I11, rx434_eos, rx434_fail1295
    substr $S10, rx434_tgt, rx434_pos, 5
    ne $S10, ucs4:"multi", rx434_fail1295
    add rx434_pos, 5
    goto alt436_end1302
  alt436_11304:
    add $I11, rx434_pos, 5
    gt $I11, rx434_eos, rx434_fail1295
    substr $S10, rx434_tgt, rx434_pos, 5
    ne $S10, ucs4:"proto", rx434_fail1295
    add rx434_pos, 5
    goto alt436_end1302
  alt436_21305:
    add $I11, rx434_pos, 4
    gt $I11, rx434_eos, rx434_fail1295
    substr $S10, rx434_tgt, rx434_pos, 4
    ne $S10, ucs4:"only", rx434_fail1295
    add rx434_pos, 4
    goto alt436_end1302
  alt436_end1302:
    rx434_cur."!cursor_pass"(rx434_pos, 'backtrack'=>1)
    .return (rx434_cur)
  rx434_restart1294:
    repr_get_attr_obj rx434_cstack, rx434_cur, rx434_curclass, "$!cstack"
  rx434_fail1295:
    unless rx434_bstack, rx434_done1293
    pop $I19, rx434_bstack
    if_null rx434_cstack, rx434_cstack_done1298
    unless rx434_cstack, rx434_cstack_done1298
    dec $I19
    set $P11, rx434_cstack[$I19]
  rx434_cstack_done1298:
    pop rx434_rep, rx434_bstack
    pop rx434_pos, rx434_bstack
    pop $I19, rx434_bstack
    lt rx434_pos, -1, rx434_done1293
    lt rx434_pos, 0, rx434_fail1295
    eq $I19, 0, rx434_fail1295
    nqp_islist $I20, rx434_cstack
    unless $I20, rx434_jump1296
    elements $I18, rx434_bstack
    le $I18, 0, rx434_cut1297
    dec $I18
    set $I18, rx434_bstack[$I18]
  rx434_cut1297:
    assign rx434_cstack, $I18
  rx434_jump1296:
    jump $I19
  rx434_done1293:
    rx434_cur."!cursor_fail"()
    .return (rx434_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_91_1351203235.318") :anon :lex :outer("cuid_89_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx437_tgt
    .local int rx437_pos
    .local int rx437_off
    .local int rx437_eos
    .local int rx437_rep
    .local pmc rx437_cur
    .local pmc rx437_curclass
    .local pmc rx437_bstack
    .local pmc rx437_cstack
    (rx437_cur, rx437_tgt, rx437_pos, rx437_curclass, rx437_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx437_cur
    length rx437_eos, rx437_tgt
    eq $I19, 1, rx437_restart1308
    gt rx437_pos, rx437_eos, rx437_fail1309
    repr_get_attr_int $I11, self, rx437_curclass, "$!from"
    ne $I11, -1, rxscan438_done1315
    goto rxscan438_scan1314
  rxscan438_loop1313:
    inc rx437_pos
    gt rx437_pos, rx437_eos, rx437_fail1309
    repr_bind_attr_int rx437_cur, rx437_curclass, "$!from", rx437_pos
  rxscan438_scan1314:
    nqp_rxmark rx437_bstack, rxscan438_loop1313, rx437_pos, 0
  rxscan438_done1315:
    add $I11, rx437_pos, 5
    gt $I11, rx437_eos, rx437_fail1309
    substr $S10, rx437_tgt, rx437_pos, 5
    ne $S10, ucs4:"proto", rx437_fail1309
    add rx437_pos, 5
    repr_bind_attr_int rx437_cur, rx437_curclass, "$!pos", rx437_pos
    $P11 = rx437_cur."ws"()
    repr_get_attr_int $I11, $P11, rx437_curclass, "$!pos"
    lt $I11, 0, rx437_fail1309
    repr_get_attr_int rx437_pos, $P11, rx437_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt440_01318
    nqp_push_label $P11, alt440_11319
    nqp_push_label $P11, alt440_21320
    nqp_rxmark rx437_bstack, alt440_end1317, -1, 0
    rx437_cur."!alt"(rx437_pos, "alt_nfa__18_1351203236.919", $P11)
    goto rx437_fail1309
  alt440_01318:
    add $I11, rx437_pos, 5
    gt $I11, rx437_eos, rx437_fail1309
    substr $S10, rx437_tgt, rx437_pos, 5
    ne $S10, ucs4:"regex", rx437_fail1309
    add rx437_pos, 5
    goto alt440_end1317
  alt440_11319:
    add $I11, rx437_pos, 5
    gt $I11, rx437_eos, rx437_fail1309
    substr $S10, rx437_tgt, rx437_pos, 5
    ne $S10, ucs4:"token", rx437_fail1309
    add rx437_pos, 5
    goto alt440_end1317
  alt440_21320:
    add $I11, rx437_pos, 4
    gt $I11, rx437_eos, rx437_fail1309
    substr $S10, rx437_tgt, rx437_pos, 4
    ne $S10, ucs4:"rule", rx437_fail1309
    add rx437_pos, 4
    goto alt440_end1317
  alt440_end1317:
    nqp_rxcommit rx437_bstack, alt440_end1317
    rx437_cur."!cursor_pass"(rx437_pos, 'backtrack'=>1)
    .return (rx437_cur)
  rx437_restart1308:
    repr_get_attr_obj rx437_cstack, rx437_cur, rx437_curclass, "$!cstack"
  rx437_fail1309:
    unless rx437_bstack, rx437_done1307
    pop $I19, rx437_bstack
    if_null rx437_cstack, rx437_cstack_done1312
    unless rx437_cstack, rx437_cstack_done1312
    dec $I19
    set $P11, rx437_cstack[$I19]
  rx437_cstack_done1312:
    pop rx437_rep, rx437_bstack
    pop rx437_pos, rx437_bstack
    pop $I19, rx437_bstack
    lt rx437_pos, -1, rx437_done1307
    lt rx437_pos, 0, rx437_fail1309
    eq $I19, 0, rx437_fail1309
    nqp_islist $I20, rx437_cstack
    unless $I20, rx437_jump1310
    elements $I18, rx437_bstack
    le $I18, 0, rx437_cut1311
    dec $I18
    set $I18, rx437_bstack[$I18]
  rx437_cut1311:
    assign rx437_cstack, $I18
  rx437_jump1310:
    jump $I19
  rx437_done1307:
    rx437_cur."!cursor_fail"()
    .return (rx437_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_92_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 896
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx442_tgt
    .local int rx442_pos
    .local int rx442_off
    .local int rx442_eos
    .local int rx442_rep
    .local pmc rx442_cur
    .local pmc rx442_curclass
    .local pmc rx442_bstack
    .local pmc rx442_cstack
    (rx442_cur, rx442_tgt, rx442_pos, rx442_curclass, rx442_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx442_cur
    length rx442_eos, rx442_tgt
    eq $I19, 1, rx442_restart1324
    gt rx442_pos, rx442_eos, rx442_fail1325
    repr_get_attr_int $I11, self, rx442_curclass, "$!from"
    ne $I11, -1, rxscan443_done1331
    goto rxscan443_scan1330
  rxscan443_loop1329:
    inc rx442_pos
    gt rx442_pos, rx442_eos, rx442_fail1325
    repr_bind_attr_int rx442_cur, rx442_curclass, "$!from", rx442_pos
  rxscan443_scan1330:
    nqp_rxmark rx442_bstack, rxscan443_loop1329, rx442_pos, 0
  rxscan443_done1331:
    repr_bind_attr_int rx442_cur, rx442_curclass, "$!pos", rx442_pos
    $P11 = rx442_cur."regex_declarator"()
    repr_get_attr_int $I11, $P11, rx442_curclass, "$!pos"
    lt $I11, 0, rx442_fail1325
    nqp_rxmark rx442_bstack, rxsubrule444_pass1332, -1, 0
  rxsubrule444_pass1332:
    rx442_cstack = rx442_cur."!cursor_capture"($P11, "regex_declarator")
    repr_get_attr_int rx442_pos, $P11, rx442_curclass, "$!pos"
    rx442_cur."!cursor_pass"(rx442_pos, "term:sym<regex_declarator>", 'backtrack'=>1)
    .return (rx442_cur)
  rx442_restart1324:
    repr_get_attr_obj rx442_cstack, rx442_cur, rx442_curclass, "$!cstack"
  rx442_fail1325:
    unless rx442_bstack, rx442_done1323
    pop $I19, rx442_bstack
    if_null rx442_cstack, rx442_cstack_done1328
    unless rx442_cstack, rx442_cstack_done1328
    dec $I19
    set $P11, rx442_cstack[$I19]
  rx442_cstack_done1328:
    pop rx442_rep, rx442_bstack
    pop rx442_pos, rx442_bstack
    pop $I19, rx442_bstack
    lt rx442_pos, -1, rx442_done1323
    lt rx442_pos, 0, rx442_fail1325
    eq $I19, 0, rx442_fail1325
    nqp_islist $I20, rx442_cstack
    unless $I20, rx442_jump1326
    elements $I18, rx442_bstack
    le $I18, 0, rx442_cut1327
    dec $I18
    set $I18, rx442_bstack[$I18]
  rx442_cut1327:
    assign rx442_cstack, $I18
  rx442_jump1326:
    jump $I19
  rx442_done1323:
    rx442_cur."!cursor_fail"()
    .return (rx442_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_93_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 897
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx445_tgt
    .local int rx445_pos
    .local int rx445_off
    .local int rx445_eos
    .local int rx445_rep
    .local pmc rx445_cur
    .local pmc rx445_curclass
    .local pmc rx445_bstack
    .local pmc rx445_cstack
    (rx445_cur, rx445_tgt, rx445_pos, rx445_curclass, rx445_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx445_cur
    length rx445_eos, rx445_tgt
    eq $I19, 1, rx445_restart1335
    gt rx445_pos, rx445_eos, rx445_fail1336
    repr_get_attr_int $I11, self, rx445_curclass, "$!from"
    ne $I11, -1, rxscan446_done1342
    goto rxscan446_scan1341
  rxscan446_loop1340:
    inc rx445_pos
    gt rx445_pos, rx445_eos, rx445_fail1336
    repr_bind_attr_int rx445_cur, rx445_curclass, "$!from", rx445_pos
  rxscan446_scan1341:
    nqp_rxmark rx445_bstack, rxscan446_loop1340, rx445_pos, 0
  rxscan446_done1342:
    repr_bind_attr_int rx445_cur, rx445_curclass, "$!pos", rx445_pos
    $P11 = rx445_cur."statement_prefix"()
    repr_get_attr_int $I11, $P11, rx445_curclass, "$!pos"
    lt $I11, 0, rx445_fail1336
    nqp_rxmark rx445_bstack, rxsubrule447_pass1343, -1, 0
  rxsubrule447_pass1343:
    rx445_cstack = rx445_cur."!cursor_capture"($P11, "statement_prefix")
    repr_get_attr_int rx445_pos, $P11, rx445_curclass, "$!pos"
    rx445_cur."!cursor_pass"(rx445_pos, "term:sym<statement_prefix>", 'backtrack'=>1)
    .return (rx445_cur)
  rx445_restart1335:
    repr_get_attr_obj rx445_cstack, rx445_cur, rx445_curclass, "$!cstack"
  rx445_fail1336:
    unless rx445_bstack, rx445_done1334
    pop $I19, rx445_bstack
    if_null rx445_cstack, rx445_cstack_done1339
    unless rx445_cstack, rx445_cstack_done1339
    dec $I19
    set $P11, rx445_cstack[$I19]
  rx445_cstack_done1339:
    pop rx445_rep, rx445_bstack
    pop rx445_pos, rx445_bstack
    pop $I19, rx445_bstack
    lt rx445_pos, -1, rx445_done1334
    lt rx445_pos, 0, rx445_fail1336
    eq $I19, 0, rx445_fail1336
    nqp_islist $I20, rx445_cstack
    unless $I20, rx445_jump1337
    elements $I18, rx445_bstack
    le $I18, 0, rx445_cut1338
    dec $I18
    set $I18, rx445_bstack[$I18]
  rx445_cut1338:
    assign rx445_cstack, $I18
  rx445_jump1337:
    jump $I19
  rx445_done1334:
    rx445_cur."!cursor_fail"()
    .return (rx445_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_94_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 898
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx448_tgt
    .local int rx448_pos
    .local int rx448_off
    .local int rx448_eos
    .local int rx448_rep
    .local pmc rx448_cur
    .local pmc rx448_curclass
    .local pmc rx448_bstack
    .local pmc rx448_cstack
    (rx448_cur, rx448_tgt, rx448_pos, rx448_curclass, rx448_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx448_cur
    length rx448_eos, rx448_tgt
    eq $I19, 1, rx448_restart1346
    gt rx448_pos, rx448_eos, rx448_fail1347
    repr_get_attr_int $I11, self, rx448_curclass, "$!from"
    ne $I11, -1, rxscan449_done1353
    goto rxscan449_scan1352
  rxscan449_loop1351:
    inc rx448_pos
    gt rx448_pos, rx448_eos, rx448_fail1347
    repr_bind_attr_int rx448_cur, rx448_curclass, "$!from", rx448_pos
  rxscan449_scan1352:
    nqp_rxmark rx448_bstack, rxscan449_loop1351, rx448_pos, 0
  rxscan449_done1353:
    repr_bind_attr_int rx448_cur, rx448_curclass, "$!pos", rx448_pos
    $P11 = rx448_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx448_curclass, "$!pos"
    lt $I11, 0, rx448_fail1347
    repr_bind_attr_int rx448_cur, rx448_curclass, "$!pos", rx448_pos
    $P11 = rx448_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx448_curclass, "$!pos"
    lt $I11, 0, rx448_fail1347
    nqp_rxmark rx448_bstack, rxsubrule450_pass1354, -1, 0
  rxsubrule450_pass1354:
    rx448_cstack = rx448_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx448_pos, $P11, rx448_curclass, "$!pos"
    rx448_cur."!cursor_pass"(rx448_pos, "term:sym<lambda>", 'backtrack'=>1)
    .return (rx448_cur)
  rx448_restart1346:
    repr_get_attr_obj rx448_cstack, rx448_cur, rx448_curclass, "$!cstack"
  rx448_fail1347:
    unless rx448_bstack, rx448_done1345
    pop $I19, rx448_bstack
    if_null rx448_cstack, rx448_cstack_done1350
    unless rx448_cstack, rx448_cstack_done1350
    dec $I19
    set $P11, rx448_cstack[$I19]
  rx448_cstack_done1350:
    pop rx448_rep, rx448_bstack
    pop rx448_pos, rx448_bstack
    pop $I19, rx448_bstack
    lt rx448_pos, -1, rx448_done1345
    lt rx448_pos, 0, rx448_fail1347
    eq $I19, 0, rx448_fail1347
    nqp_islist $I20, rx448_cstack
    unless $I20, rx448_jump1348
    elements $I18, rx448_bstack
    le $I18, 0, rx448_cut1349
    dec $I18
    set $I18, rx448_bstack[$I18]
  rx448_cut1349:
    assign rx448_cstack, $I18
  rx448_jump1348:
    jump $I19
  rx448_done1345:
    rx448_cur."!cursor_fail"()
    .return (rx448_cur) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_95_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 900
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx451_tgt
    .local int rx451_pos
    .local int rx451_off
    .local int rx451_eos
    .local int rx451_rep
    .local pmc rx451_cur
    .local pmc rx451_curclass
    .local pmc rx451_bstack
    .local pmc rx451_cstack
    (rx451_cur, rx451_tgt, rx451_pos, rx451_curclass, rx451_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx451_cur
    length rx451_eos, rx451_tgt
    eq $I19, 1, rx451_restart1357
    gt rx451_pos, rx451_eos, rx451_fail1358
    repr_get_attr_int $I11, self, rx451_curclass, "$!from"
    ne $I11, -1, rxscan452_done1364
    goto rxscan452_scan1363
  rxscan452_loop1362:
    inc rx451_pos
    gt rx451_pos, rx451_eos, rx451_fail1358
    repr_bind_attr_int rx451_cur, rx451_curclass, "$!from", rx451_pos
  rxscan452_scan1363:
    nqp_rxmark rx451_bstack, rxscan452_loop1362, rx451_pos, 0
  rxscan452_done1364:
    repr_bind_attr_int rx451_cur, rx451_curclass, "$!pos", rx451_pos
    $P11 = rx451_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx451_curclass, "$!pos"
    lt $I11, 0, rx451_fail1358
    nqp_rxmark rx451_bstack, rxsubrule453_pass1365, -1, 0
  rxsubrule453_pass1365:
    rx451_cstack = rx451_cur."!cursor_capture"($P11, "key")
    repr_get_attr_int rx451_pos, $P11, rx451_curclass, "$!pos"
    nqp_rxmark rx451_bstack, rxquantr454_done1367, rx451_pos, 0
  rxquantr454_loop1366:
    ge rx451_pos, rx451_eos, rx451_fail1358
    substr $S11, rx451_tgt, rx451_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx451_fail1358
    inc rx451_pos
    nqp_rxpeek $I19, rx451_bstack, rxquantr454_done1367
    inc $I19
    inc $I19
    set rx451_rep, rx451_bstack[$I19]
    nqp_rxcommit rx451_bstack, rxquantr454_done1367
    inc rx451_rep
    nqp_rxmark rx451_bstack, rxquantr454_done1367, rx451_pos, rx451_rep
    goto rxquantr454_loop1366
  rxquantr454_done1367:
    add $I11, rx451_pos, 2
    gt $I11, rx451_eos, rx451_fail1358
    substr $S10, rx451_tgt, rx451_pos, 2
    ne $S10, ucs4:"=>", rx451_fail1358
    add rx451_pos, 2
    repr_bind_attr_int rx451_cur, rx451_curclass, "$!pos", rx451_pos
    $P11 = rx451_cur."ws"()
    repr_get_attr_int $I11, $P11, rx451_curclass, "$!pos"
    lt $I11, 0, rx451_fail1358
    repr_get_attr_int rx451_pos, $P11, rx451_curclass, "$!pos"
    repr_bind_attr_int rx451_cur, rx451_curclass, "$!pos", rx451_pos
    $P11 = rx451_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx451_curclass, "$!pos"
    lt $I11, 0, rx451_fail1358
    nqp_rxmark rx451_bstack, rxsubrule456_pass1369, -1, 0
  rxsubrule456_pass1369:
    rx451_cstack = rx451_cur."!cursor_capture"($P11, "val")
    repr_get_attr_int rx451_pos, $P11, rx451_curclass, "$!pos"
    rx451_cur."!cursor_pass"(rx451_pos, "fatarrow", 'backtrack'=>1)
    .return (rx451_cur)
  rx451_restart1357:
    repr_get_attr_obj rx451_cstack, rx451_cur, rx451_curclass, "$!cstack"
  rx451_fail1358:
    unless rx451_bstack, rx451_done1356
    pop $I19, rx451_bstack
    if_null rx451_cstack, rx451_cstack_done1361
    unless rx451_cstack, rx451_cstack_done1361
    dec $I19
    set $P11, rx451_cstack[$I19]
  rx451_cstack_done1361:
    pop rx451_rep, rx451_bstack
    pop rx451_pos, rx451_bstack
    pop $I19, rx451_bstack
    lt rx451_pos, -1, rx451_done1356
    lt rx451_pos, 0, rx451_fail1358
    eq $I19, 0, rx451_fail1358
    nqp_islist $I20, rx451_cstack
    unless $I20, rx451_jump1359
    elements $I18, rx451_bstack
    le $I18, 0, rx451_cut1360
    dec $I18
    set $I18, rx451_bstack[$I18]
  rx451_cut1360:
    assign rx451_cstack, $I18
  rx451_jump1359:
    jump $I19
  rx451_done1356:
    rx451_cur."!cursor_fail"()
    .return (rx451_cur) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_96_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 904
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx457_tgt
    .local int rx457_pos
    .local int rx457_off
    .local int rx457_eos
    .local int rx457_rep
    .local pmc rx457_cur
    .local pmc rx457_curclass
    .local pmc rx457_bstack
    .local pmc rx457_cstack
    (rx457_cur, rx457_tgt, rx457_pos, rx457_curclass, rx457_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx457_cur
    length rx457_eos, rx457_tgt
    eq $I19, 1, rx457_restart1372
    gt rx457_pos, rx457_eos, rx457_fail1373
    repr_get_attr_int $I11, self, rx457_curclass, "$!from"
    ne $I11, -1, rxscan458_done1379
    goto rxscan458_scan1378
  rxscan458_loop1377:
    inc rx457_pos
    gt rx457_pos, rx457_eos, rx457_fail1373
    repr_bind_attr_int rx457_cur, rx457_curclass, "$!from", rx457_pos
  rxscan458_scan1378:
    nqp_rxmark rx457_bstack, rxscan458_loop1377, rx457_pos, 0
  rxscan458_done1379:
    add $I11, rx457_pos, 1
    gt $I11, rx457_eos, rx457_fail1373
    substr $S10, rx457_tgt, rx457_pos, 1
    ne $S10, ucs4:":", rx457_fail1373
    add rx457_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt459_01381
    nqp_push_label $P11, alt459_11385
    nqp_push_label $P11, alt459_21391
    nqp_push_label $P11, alt459_31393
    nqp_rxmark rx457_bstack, alt459_end1380, -1, 0
    rx457_cur."!alt"(rx457_pos, "alt_nfa__19_1351203236.956", $P11)
    goto rx457_fail1373
  alt459_01381:
    nqp_rxmark rx457_bstack, rxcap460_fail1383, rx457_pos, 0
    add $I11, rx457_pos, 1
    gt $I11, rx457_eos, rx457_fail1373
    substr $S10, rx457_tgt, rx457_pos, 1
    ne $S10, ucs4:"!", rx457_fail1373
    add rx457_pos, 1
    nqp_rxpeek $I19, rx457_bstack, rxcap460_fail1383
    inc $I19
    set $I11, rx457_bstack[$I19]
    repr_bind_attr_int rx457_cur, rx457_curclass, "$!pos", rx457_pos
    $P11 = rx457_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx457_pos)
    rx457_cstack = rx457_cur."!cursor_capture"($P11, "not")
    goto rxcap460_done1382
  rxcap460_fail1383:
    goto rx457_fail1373
  rxcap460_done1382:
    repr_bind_attr_int rx457_cur, rx457_curclass, "$!pos", rx457_pos
    $P11 = rx457_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx457_curclass, "$!pos"
    lt $I11, 0, rx457_fail1373
    nqp_rxmark rx457_bstack, rxsubrule461_pass1384, -1, 0
  rxsubrule461_pass1384:
    rx457_cstack = rx457_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx457_pos, $P11, rx457_curclass, "$!pos"
    goto alt459_end1380
  alt459_11385:
    repr_bind_attr_int rx457_cur, rx457_curclass, "$!pos", rx457_pos
    $P11 = rx457_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx457_curclass, "$!pos"
    lt $I11, 0, rx457_fail1373
    nqp_rxmark rx457_bstack, rxsubrule462_pass1386, -1, 0
  rxsubrule462_pass1386:
    rx457_cstack = rx457_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx457_pos, $P11, rx457_curclass, "$!pos"
    nqp_rxmark rx457_bstack, rxquantr463_done1388, rx457_pos, 0
  rxquantr463_loop1387:
    repr_bind_attr_int rx457_cur, rx457_curclass, "$!pos", rx457_pos
    $P11 = rx457_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx457_curclass, "$!pos"
    lt $I11, 0, rx457_fail1373
    goto rxsubrule464_pass1389
  rxsubrule464_back1390:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx457_curclass, "$!pos"
    lt $I11, 0, rx457_fail1373
  rxsubrule464_pass1389:
    rx457_cstack = rx457_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule464_back1390
    push rx457_bstack, $I11
    push rx457_bstack, 0
    push rx457_bstack, rx457_pos
    elements $I11, rx457_cstack
    push rx457_bstack, $I11
    repr_get_attr_int rx457_pos, $P11, rx457_curclass, "$!pos"
    nqp_rxpeek $I19, rx457_bstack, rxquantr463_done1388
    inc $I19
    inc $I19
    set rx457_rep, rx457_bstack[$I19]
    nqp_rxcommit rx457_bstack, rxquantr463_done1388
    inc rx457_rep
  rxquantr463_done1388:
    goto alt459_end1380
  alt459_21391:
    repr_bind_attr_int rx457_cur, rx457_curclass, "$!pos", rx457_pos
    $P11 = rx457_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx457_curclass, "$!pos"
    lt $I11, 0, rx457_fail1373
    nqp_rxmark rx457_bstack, rxsubrule465_pass1392, -1, 0
  rxsubrule465_pass1392:
    rx457_cstack = rx457_cur."!cursor_capture"($P11, "circumfix")
    repr_get_attr_int rx457_pos, $P11, rx457_curclass, "$!pos"
    goto alt459_end1380
  alt459_31393:
    repr_bind_attr_int rx457_cur, rx457_curclass, "$!pos", rx457_pos
    $P11 = rx457_cur."variable"()
    repr_get_attr_int $I11, $P11, rx457_curclass, "$!pos"
    lt $I11, 0, rx457_fail1373
    nqp_rxmark rx457_bstack, rxsubrule466_pass1394, -1, 0
  rxsubrule466_pass1394:
    rx457_cstack = rx457_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx457_pos, $P11, rx457_curclass, "$!pos"
    goto alt459_end1380
  alt459_end1380:
    nqp_rxcommit rx457_bstack, alt459_end1380
    rx457_cur."!cursor_pass"(rx457_pos, "colonpair", 'backtrack'=>1)
    .return (rx457_cur)
  rx457_restart1372:
    repr_get_attr_obj rx457_cstack, rx457_cur, rx457_curclass, "$!cstack"
  rx457_fail1373:
    unless rx457_bstack, rx457_done1371
    pop $I19, rx457_bstack
    if_null rx457_cstack, rx457_cstack_done1376
    unless rx457_cstack, rx457_cstack_done1376
    dec $I19
    set $P11, rx457_cstack[$I19]
  rx457_cstack_done1376:
    pop rx457_rep, rx457_bstack
    pop rx457_pos, rx457_bstack
    pop $I19, rx457_bstack
    lt rx457_pos, -1, rx457_done1371
    lt rx457_pos, 0, rx457_fail1373
    eq $I19, 0, rx457_fail1373
    nqp_islist $I20, rx457_cstack
    unless $I20, rx457_jump1374
    elements $I18, rx457_bstack
    le $I18, 0, rx457_cut1375
    dec $I18
    set $I18, rx457_bstack[$I18]
  rx457_cut1375:
    assign rx457_cstack, $I18
  rx457_jump1374:
    jump $I19
  rx457_done1371:
    rx457_cur."!cursor_fail"()
    .return (rx457_cur) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_97_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 914
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx467_tgt
    .local int rx467_pos
    .local int rx467_off
    .local int rx467_eos
    .local int rx467_rep
    .local pmc rx467_cur
    .local pmc rx467_curclass
    .local pmc rx467_bstack
    .local pmc rx467_cstack
    (rx467_cur, rx467_tgt, rx467_pos, rx467_curclass, rx467_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx467_cur
    length rx467_eos, rx467_tgt
    eq $I19, 1, rx467_restart1397
    gt rx467_pos, rx467_eos, rx467_fail1398
    repr_get_attr_int $I11, self, rx467_curclass, "$!from"
    ne $I11, -1, rxscan468_done1404
    goto rxscan468_scan1403
  rxscan468_loop1402:
    inc rx467_pos
    gt rx467_pos, rx467_eos, rx467_fail1398
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!from", rx467_pos
  rxscan468_scan1403:
    nqp_rxmark rx467_bstack, rxscan468_loop1402, rx467_pos, 0
  rxscan468_done1404:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt469_01406
    nqp_push_label $P11, alt469_11413
    nqp_push_label $P11, alt469_21416
    nqp_rxmark rx467_bstack, alt469_end1405, -1, 0
    rx467_cur."!alt"(rx467_pos, "alt_nfa__20_1351203236.969", $P11)
    goto rx467_fail1398
  alt469_01406:
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!pos", rx467_pos
    $P11 = rx467_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx467_curclass, "$!pos"
    lt $I11, 0, rx467_fail1398
    nqp_rxmark rx467_bstack, rxsubrule470_pass1407, -1, 0
  rxsubrule470_pass1407:
    rx467_cstack = rx467_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx467_pos, $P11, rx467_curclass, "$!pos"
    nqp_rxmark rx467_bstack, rxquantr471_done1409, rx467_pos, 0
  rxquantr471_loop1408:
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!pos", rx467_pos
    $P11 = rx467_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx467_curclass, "$!pos"
    lt $I11, 0, rx467_fail1398
    goto rxsubrule472_pass1410
  rxsubrule472_back1411:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx467_curclass, "$!pos"
    lt $I11, 0, rx467_fail1398
  rxsubrule472_pass1410:
    rx467_cstack = rx467_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule472_back1411
    push rx467_bstack, $I11
    push rx467_bstack, 0
    push rx467_bstack, rx467_pos
    elements $I11, rx467_cstack
    push rx467_bstack, $I11
    repr_get_attr_int rx467_pos, $P11, rx467_curclass, "$!pos"
    nqp_rxpeek $I19, rx467_bstack, rxquantr471_done1409
    inc $I19
    inc $I19
    set rx467_rep, rx467_bstack[$I19]
    nqp_rxcommit rx467_bstack, rxquantr471_done1409
    inc rx467_rep
  rxquantr471_done1409:
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!pos", rx467_pos
    $P11 = rx467_cur."name"()
    repr_get_attr_int $I11, $P11, rx467_curclass, "$!pos"
    lt $I11, 0, rx467_fail1398
    nqp_rxmark rx467_bstack, rxsubrule473_pass1412, -1, 0
  rxsubrule473_pass1412:
    rx467_cstack = rx467_cur."!cursor_capture"($P11, "desigilname")
    repr_get_attr_int rx467_pos, $P11, rx467_curclass, "$!pos"
    goto alt469_end1405
  alt469_11413:
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!pos", rx467_pos
    $P11 = rx467_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx467_curclass, "$!pos"
    lt $I11, 0, rx467_fail1398
    nqp_rxmark rx467_bstack, rxsubrule474_pass1414, -1, 0
  rxsubrule474_pass1414:
    rx467_cstack = rx467_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx467_pos, $P11, rx467_curclass, "$!pos"
    ge rx467_pos, rx467_eos, rx467_fail1398
    substr $S11, rx467_tgt, rx467_pos, 1
    index $I11, ucs4:"<[", $S11
    lt $I11, 0, rx467_fail1398
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!pos", rx467_pos
    $P11 = rx467_cur."postcircumfix"()
    repr_get_attr_int $I11, $P11, rx467_curclass, "$!pos"
    lt $I11, 0, rx467_fail1398
    nqp_rxmark rx467_bstack, rxsubrule475_pass1415, -1, 0
  rxsubrule475_pass1415:
    rx467_cstack = rx467_cur."!cursor_capture"($P11, "postcircumfix")
    repr_get_attr_int rx467_pos, $P11, rx467_curclass, "$!pos"
    goto alt469_end1405
  alt469_21416:
    nqp_rxmark rx467_bstack, rxcap476_fail1418, rx467_pos, 0
    add $I11, rx467_pos, 1
    gt $I11, rx467_eos, rx467_fail1398
    substr $S10, rx467_tgt, rx467_pos, 1
    ne $S10, ucs4:"$", rx467_fail1398
    add rx467_pos, 1
    nqp_rxpeek $I19, rx467_bstack, rxcap476_fail1418
    inc $I19
    set $I11, rx467_bstack[$I19]
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!pos", rx467_pos
    $P11 = rx467_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx467_pos)
    rx467_cstack = rx467_cur."!cursor_capture"($P11, "sigil")
    goto rxcap476_done1417
  rxcap476_fail1418:
    goto rx467_fail1398
  rxcap476_done1417:
    nqp_rxmark rx467_bstack, rxcap477_fail1420, rx467_pos, 0
    ge rx467_pos, rx467_eos, rx467_fail1398
    substr $S11, rx467_tgt, rx467_pos, 1
    index $I11, ucs4:"/_!", $S11
    lt $I11, 0, rx467_fail1398
    inc rx467_pos
    nqp_rxpeek $I19, rx467_bstack, rxcap477_fail1420
    inc $I19
    set $I11, rx467_bstack[$I19]
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!pos", rx467_pos
    $P11 = rx467_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx467_pos)
    rx467_cstack = rx467_cur."!cursor_capture"($P11, "desigilname")
    goto rxcap477_done1419
  rxcap477_fail1420:
    goto rx467_fail1398
  rxcap477_done1419:
    goto alt469_end1405
  alt469_end1405:
    rx467_cur."!cursor_pass"(rx467_pos, "variable", 'backtrack'=>1)
    .return (rx467_cur)
  rx467_restart1397:
    repr_get_attr_obj rx467_cstack, rx467_cur, rx467_curclass, "$!cstack"
  rx467_fail1398:
    unless rx467_bstack, rx467_done1396
    pop $I19, rx467_bstack
    if_null rx467_cstack, rx467_cstack_done1401
    unless rx467_cstack, rx467_cstack_done1401
    dec $I19
    set $P11, rx467_cstack[$I19]
  rx467_cstack_done1401:
    pop rx467_rep, rx467_bstack
    pop rx467_pos, rx467_bstack
    pop $I19, rx467_bstack
    lt rx467_pos, -1, rx467_done1396
    lt rx467_pos, 0, rx467_fail1398
    eq $I19, 0, rx467_fail1398
    nqp_islist $I20, rx467_cstack
    unless $I20, rx467_jump1399
    elements $I18, rx467_bstack
    le $I18, 0, rx467_cut1400
    dec $I18
    set $I18, rx467_bstack[$I18]
  rx467_cut1400:
    assign rx467_cstack, $I18
  rx467_jump1399:
    jump $I19
  rx467_done1396:
    rx467_cur."!cursor_fail"()
    .return (rx467_cur) 
.end
.HLL "nqp"
.namespace []
.sub "sigil" :subid("cuid_98_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 920
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx478_tgt
    .local int rx478_pos
    .local int rx478_off
    .local int rx478_eos
    .local int rx478_rep
    .local pmc rx478_cur
    .local pmc rx478_curclass
    .local pmc rx478_bstack
    .local pmc rx478_cstack
    (rx478_cur, rx478_tgt, rx478_pos, rx478_curclass, rx478_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx478_cur
    length rx478_eos, rx478_tgt
    eq $I19, 1, rx478_restart1423
    gt rx478_pos, rx478_eos, rx478_fail1424
    repr_get_attr_int $I11, self, rx478_curclass, "$!from"
    ne $I11, -1, rxscan479_done1430
    goto rxscan479_scan1429
  rxscan479_loop1428:
    inc rx478_pos
    gt rx478_pos, rx478_eos, rx478_fail1424
    repr_bind_attr_int rx478_cur, rx478_curclass, "$!from", rx478_pos
  rxscan479_scan1429:
    nqp_rxmark rx478_bstack, rxscan479_loop1428, rx478_pos, 0
  rxscan479_done1430:
    ge rx478_pos, rx478_eos, rx478_fail1424
    substr $S11, rx478_tgt, rx478_pos, 1
    index $I11, ucs4:"$@%&", $S11
    lt $I11, 0, rx478_fail1424
    inc rx478_pos
    rx478_cur."!cursor_pass"(rx478_pos, "sigil", 'backtrack'=>1)
    .return (rx478_cur)
  rx478_restart1423:
    repr_get_attr_obj rx478_cstack, rx478_cur, rx478_curclass, "$!cstack"
  rx478_fail1424:
    unless rx478_bstack, rx478_done1422
    pop $I19, rx478_bstack
    if_null rx478_cstack, rx478_cstack_done1427
    unless rx478_cstack, rx478_cstack_done1427
    dec $I19
    set $P11, rx478_cstack[$I19]
  rx478_cstack_done1427:
    pop rx478_rep, rx478_bstack
    pop rx478_pos, rx478_bstack
    pop $I19, rx478_bstack
    lt rx478_pos, -1, rx478_done1422
    lt rx478_pos, 0, rx478_fail1424
    eq $I19, 0, rx478_fail1424
    nqp_islist $I20, rx478_cstack
    unless $I20, rx478_jump1425
    elements $I18, rx478_bstack
    le $I18, 0, rx478_cut1426
    dec $I18
    set $I18, rx478_bstack[$I18]
  rx478_cut1426:
    assign rx478_cstack, $I18
  rx478_jump1425:
    jump $I19
  rx478_done1422:
    rx478_cur."!cursor_fail"()
    .return (rx478_cur) 
.end
.HLL "nqp"
.namespace []
.sub "twigil" :subid("cuid_99_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 922
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx480_tgt
    .local int rx480_pos
    .local int rx480_off
    .local int rx480_eos
    .local int rx480_rep
    .local pmc rx480_cur
    .local pmc rx480_curclass
    .local pmc rx480_bstack
    .local pmc rx480_cstack
    (rx480_cur, rx480_tgt, rx480_pos, rx480_curclass, rx480_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx480_cur
    length rx480_eos, rx480_tgt
    eq $I19, 1, rx480_restart1433
    gt rx480_pos, rx480_eos, rx480_fail1434
    repr_get_attr_int $I11, self, rx480_curclass, "$!from"
    ne $I11, -1, rxscan481_done1440
    goto rxscan481_scan1439
  rxscan481_loop1438:
    inc rx480_pos
    gt rx480_pos, rx480_eos, rx480_fail1434
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!from", rx480_pos
  rxscan481_scan1439:
    nqp_rxmark rx480_bstack, rxscan481_loop1438, rx480_pos, 0
  rxscan481_done1440:
    ge rx480_pos, rx480_eos, rx480_fail1434
    substr $S11, rx480_tgt, rx480_pos, 1
    index $I11, ucs4:"*!?", $S11
    lt $I11, 0, rx480_fail1434
    inc rx480_pos
    rx480_cur."!cursor_pass"(rx480_pos, "twigil", 'backtrack'=>1)
    .return (rx480_cur)
  rx480_restart1433:
    repr_get_attr_obj rx480_cstack, rx480_cur, rx480_curclass, "$!cstack"
  rx480_fail1434:
    unless rx480_bstack, rx480_done1432
    pop $I19, rx480_bstack
    if_null rx480_cstack, rx480_cstack_done1437
    unless rx480_cstack, rx480_cstack_done1437
    dec $I19
    set $P11, rx480_cstack[$I19]
  rx480_cstack_done1437:
    pop rx480_rep, rx480_bstack
    pop rx480_pos, rx480_bstack
    pop $I19, rx480_bstack
    lt rx480_pos, -1, rx480_done1432
    lt rx480_pos, 0, rx480_fail1434
    eq $I19, 0, rx480_fail1434
    nqp_islist $I20, rx480_cstack
    unless $I20, rx480_jump1435
    elements $I18, rx480_bstack
    le $I18, 0, rx480_cut1436
    dec $I18
    set $I18, rx480_bstack[$I18]
  rx480_cut1436:
    assign rx480_cstack, $I18
  rx480_jump1435:
    jump $I19
  rx480_done1432:
    rx480_cur."!cursor_fail"()
    .return (rx480_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator" :subid("cuid_100_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 924
    .param pmc self 
    $P5001 = self."!protoregex"("package_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_101_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 925
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx482_tgt
    .local int rx482_pos
    .local int rx482_off
    .local int rx482_eos
    .local int rx482_rep
    .local pmc rx482_cur
    .local pmc rx482_curclass
    .local pmc rx482_bstack
    .local pmc rx482_cstack
    (rx482_cur, rx482_tgt, rx482_pos, rx482_curclass, rx482_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx482_cur
    length rx482_eos, rx482_tgt
    eq $I19, 1, rx482_restart1443
    gt rx482_pos, rx482_eos, rx482_fail1444
    repr_get_attr_int $I11, self, rx482_curclass, "$!from"
    ne $I11, -1, rxscan483_done1450
    goto rxscan483_scan1449
  rxscan483_loop1448:
    inc rx482_pos
    gt rx482_pos, rx482_eos, rx482_fail1444
    repr_bind_attr_int rx482_cur, rx482_curclass, "$!from", rx482_pos
  rxscan483_scan1449:
    nqp_rxmark rx482_bstack, rxscan483_loop1448, rx482_pos, 0
  rxscan483_done1450:
    repr_bind_attr_int rx482_cur, rx482_curclass, "$!pos", rx482_pos
    store_lex unicode:"$\x{a2}", rx482_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1451
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1452
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5007
  fallback1452:
    unless_null $P5004, vivi_4841453
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4841453:
    set $P5003, $P5004
  fallback1451:
    set $P101, $P5003
    repr_bind_attr_int rx482_cur, rx482_curclass, "$!pos", rx482_pos
    store_lex unicode:"$\x{a2}", rx482_cur
    box $P5009, "module"
    set $P102, $P5009
    nqp_rxmark rx482_bstack, rxcap485_fail1455, rx482_pos, 0
    add $I11, rx482_pos, 6
    gt $I11, rx482_eos, rx482_fail1444
    substr $S10, rx482_tgt, rx482_pos, 6
    ne $S10, ucs4:"module", rx482_fail1444
    add rx482_pos, 6
    nqp_rxpeek $I19, rx482_bstack, rxcap485_fail1455
    inc $I19
    set $I11, rx482_bstack[$I19]
    repr_bind_attr_int rx482_cur, rx482_curclass, "$!pos", rx482_pos
    $P11 = rx482_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx482_pos)
    rx482_cstack = rx482_cur."!cursor_capture"($P11, "sym")
    goto rxcap485_done1454
  rxcap485_fail1455:
    goto rx482_fail1444
  rxcap485_done1454:
    repr_bind_attr_int rx482_cur, rx482_curclass, "$!pos", rx482_pos
    $P11 = rx482_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx482_curclass, "$!pos"
    lt $I11, 0, rx482_fail1444
    nqp_rxmark rx482_bstack, rxsubrule486_pass1456, -1, 0
  rxsubrule486_pass1456:
    rx482_cstack = rx482_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx482_pos, $P11, rx482_curclass, "$!pos"
    rx482_cur."!cursor_pass"(rx482_pos, "package_declarator:sym<module>", 'backtrack'=>1)
    .return (rx482_cur)
  rx482_restart1443:
    repr_get_attr_obj rx482_cstack, rx482_cur, rx482_curclass, "$!cstack"
  rx482_fail1444:
    unless rx482_bstack, rx482_done1442
    pop $I19, rx482_bstack
    if_null rx482_cstack, rx482_cstack_done1447
    unless rx482_cstack, rx482_cstack_done1447
    dec $I19
    set $P11, rx482_cstack[$I19]
  rx482_cstack_done1447:
    pop rx482_rep, rx482_bstack
    pop rx482_pos, rx482_bstack
    pop $I19, rx482_bstack
    lt rx482_pos, -1, rx482_done1442
    lt rx482_pos, 0, rx482_fail1444
    eq $I19, 0, rx482_fail1444
    nqp_islist $I20, rx482_cstack
    unless $I20, rx482_jump1445
    elements $I18, rx482_bstack
    le $I18, 0, rx482_cut1446
    dec $I18
    set $I18, rx482_bstack[$I18]
  rx482_cut1446:
    assign rx482_cstack, $I18
  rx482_jump1445:
    jump $I19
  rx482_done1442:
    rx482_cur."!cursor_fail"()
    .return (rx482_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_102_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 930
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx487_tgt
    .local int rx487_pos
    .local int rx487_off
    .local int rx487_eos
    .local int rx487_rep
    .local pmc rx487_cur
    .local pmc rx487_curclass
    .local pmc rx487_bstack
    .local pmc rx487_cstack
    (rx487_cur, rx487_tgt, rx487_pos, rx487_curclass, rx487_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx487_cur
    length rx487_eos, rx487_tgt
    eq $I19, 1, rx487_restart1459
    gt rx487_pos, rx487_eos, rx487_fail1460
    repr_get_attr_int $I11, self, rx487_curclass, "$!from"
    ne $I11, -1, rxscan488_done1466
    goto rxscan488_scan1465
  rxscan488_loop1464:
    inc rx487_pos
    gt rx487_pos, rx487_eos, rx487_fail1460
    repr_bind_attr_int rx487_cur, rx487_curclass, "$!from", rx487_pos
  rxscan488_scan1465:
    nqp_rxmark rx487_bstack, rxscan488_loop1464, rx487_pos, 0
  rxscan488_done1466:
    repr_bind_attr_int rx487_cur, rx487_curclass, "$!pos", rx487_pos
    store_lex unicode:"$\x{a2}", rx487_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1467
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1468
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5007
  fallback1468:
    unless_null $P5004, vivi_4891469
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4891469:
    set $P5003, $P5004
  fallback1467:
    set $P101, $P5003
    repr_bind_attr_int rx487_cur, rx487_curclass, "$!pos", rx487_pos
    store_lex unicode:"$\x{a2}", rx487_cur
    box $P5009, "knowhow"
    set $P102, $P5009
    nqp_rxmark rx487_bstack, rxcap490_fail1471, rx487_pos, 0
    add $I11, rx487_pos, 7
    gt $I11, rx487_eos, rx487_fail1460
    substr $S10, rx487_tgt, rx487_pos, 7
    ne $S10, ucs4:"knowhow", rx487_fail1460
    add rx487_pos, 7
    nqp_rxpeek $I19, rx487_bstack, rxcap490_fail1471
    inc $I19
    set $I11, rx487_bstack[$I19]
    repr_bind_attr_int rx487_cur, rx487_curclass, "$!pos", rx487_pos
    $P11 = rx487_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx487_pos)
    rx487_cstack = rx487_cur."!cursor_capture"($P11, "sym")
    goto rxcap490_done1470
  rxcap490_fail1471:
    goto rx487_fail1460
  rxcap490_done1470:
    repr_bind_attr_int rx487_cur, rx487_curclass, "$!pos", rx487_pos
    $P11 = rx487_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx487_curclass, "$!pos"
    lt $I11, 0, rx487_fail1460
    nqp_rxmark rx487_bstack, rxsubrule491_pass1472, -1, 0
  rxsubrule491_pass1472:
    rx487_cstack = rx487_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx487_pos, $P11, rx487_curclass, "$!pos"
    rx487_cur."!cursor_pass"(rx487_pos, "package_declarator:sym<knowhow>", 'backtrack'=>1)
    .return (rx487_cur)
  rx487_restart1459:
    repr_get_attr_obj rx487_cstack, rx487_cur, rx487_curclass, "$!cstack"
  rx487_fail1460:
    unless rx487_bstack, rx487_done1458
    pop $I19, rx487_bstack
    if_null rx487_cstack, rx487_cstack_done1463
    unless rx487_cstack, rx487_cstack_done1463
    dec $I19
    set $P11, rx487_cstack[$I19]
  rx487_cstack_done1463:
    pop rx487_rep, rx487_bstack
    pop rx487_pos, rx487_bstack
    pop $I19, rx487_bstack
    lt rx487_pos, -1, rx487_done1458
    lt rx487_pos, 0, rx487_fail1460
    eq $I19, 0, rx487_fail1460
    nqp_islist $I20, rx487_cstack
    unless $I20, rx487_jump1461
    elements $I18, rx487_bstack
    le $I18, 0, rx487_cut1462
    dec $I18
    set $I18, rx487_bstack[$I18]
  rx487_cut1462:
    assign rx487_cstack, $I18
  rx487_jump1461:
    jump $I19
  rx487_done1458:
    rx487_cur."!cursor_fail"()
    .return (rx487_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_103_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 935
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx492_tgt
    .local int rx492_pos
    .local int rx492_off
    .local int rx492_eos
    .local int rx492_rep
    .local pmc rx492_cur
    .local pmc rx492_curclass
    .local pmc rx492_bstack
    .local pmc rx492_cstack
    (rx492_cur, rx492_tgt, rx492_pos, rx492_curclass, rx492_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx492_cur
    length rx492_eos, rx492_tgt
    eq $I19, 1, rx492_restart1475
    gt rx492_pos, rx492_eos, rx492_fail1476
    repr_get_attr_int $I11, self, rx492_curclass, "$!from"
    ne $I11, -1, rxscan493_done1482
    goto rxscan493_scan1481
  rxscan493_loop1480:
    inc rx492_pos
    gt rx492_pos, rx492_eos, rx492_fail1476
    repr_bind_attr_int rx492_cur, rx492_curclass, "$!from", rx492_pos
  rxscan493_scan1481:
    nqp_rxmark rx492_bstack, rxscan493_loop1480, rx492_pos, 0
  rxscan493_done1482:
    repr_bind_attr_int rx492_cur, rx492_curclass, "$!pos", rx492_pos
    store_lex unicode:"$\x{a2}", rx492_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1483
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1484
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5007
  fallback1484:
    unless_null $P5004, vivi_4941485
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4941485:
    set $P5003, $P5004
  fallback1483:
    set $P101, $P5003
    repr_bind_attr_int rx492_cur, rx492_curclass, "$!pos", rx492_pos
    store_lex unicode:"$\x{a2}", rx492_cur
    box $P5009, "class"
    set $P102, $P5009
    nqp_rxmark rx492_bstack, rxcap495_fail1487, rx492_pos, 0
    add $I11, rx492_pos, 5
    gt $I11, rx492_eos, rx492_fail1476
    substr $S10, rx492_tgt, rx492_pos, 5
    ne $S10, ucs4:"class", rx492_fail1476
    add rx492_pos, 5
    nqp_rxpeek $I19, rx492_bstack, rxcap495_fail1487
    inc $I19
    set $I11, rx492_bstack[$I19]
    repr_bind_attr_int rx492_cur, rx492_curclass, "$!pos", rx492_pos
    $P11 = rx492_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx492_pos)
    rx492_cstack = rx492_cur."!cursor_capture"($P11, "sym")
    goto rxcap495_done1486
  rxcap495_fail1487:
    goto rx492_fail1476
  rxcap495_done1486:
    repr_bind_attr_int rx492_cur, rx492_curclass, "$!pos", rx492_pos
    $P11 = rx492_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx492_curclass, "$!pos"
    lt $I11, 0, rx492_fail1476
    nqp_rxmark rx492_bstack, rxsubrule496_pass1488, -1, 0
  rxsubrule496_pass1488:
    rx492_cstack = rx492_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx492_pos, $P11, rx492_curclass, "$!pos"
    rx492_cur."!cursor_pass"(rx492_pos, "package_declarator:sym<class>", 'backtrack'=>1)
    .return (rx492_cur)
  rx492_restart1475:
    repr_get_attr_obj rx492_cstack, rx492_cur, rx492_curclass, "$!cstack"
  rx492_fail1476:
    unless rx492_bstack, rx492_done1474
    pop $I19, rx492_bstack
    if_null rx492_cstack, rx492_cstack_done1479
    unless rx492_cstack, rx492_cstack_done1479
    dec $I19
    set $P11, rx492_cstack[$I19]
  rx492_cstack_done1479:
    pop rx492_rep, rx492_bstack
    pop rx492_pos, rx492_bstack
    pop $I19, rx492_bstack
    lt rx492_pos, -1, rx492_done1474
    lt rx492_pos, 0, rx492_fail1476
    eq $I19, 0, rx492_fail1476
    nqp_islist $I20, rx492_cstack
    unless $I20, rx492_jump1477
    elements $I18, rx492_bstack
    le $I18, 0, rx492_cut1478
    dec $I18
    set $I18, rx492_bstack[$I18]
  rx492_cut1478:
    assign rx492_cstack, $I18
  rx492_jump1477:
    jump $I19
  rx492_done1474:
    rx492_cur."!cursor_fail"()
    .return (rx492_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_104_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 940
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx497_tgt
    .local int rx497_pos
    .local int rx497_off
    .local int rx497_eos
    .local int rx497_rep
    .local pmc rx497_cur
    .local pmc rx497_curclass
    .local pmc rx497_bstack
    .local pmc rx497_cstack
    (rx497_cur, rx497_tgt, rx497_pos, rx497_curclass, rx497_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx497_cur
    length rx497_eos, rx497_tgt
    eq $I19, 1, rx497_restart1491
    gt rx497_pos, rx497_eos, rx497_fail1492
    repr_get_attr_int $I11, self, rx497_curclass, "$!from"
    ne $I11, -1, rxscan498_done1498
    goto rxscan498_scan1497
  rxscan498_loop1496:
    inc rx497_pos
    gt rx497_pos, rx497_eos, rx497_fail1492
    repr_bind_attr_int rx497_cur, rx497_curclass, "$!from", rx497_pos
  rxscan498_scan1497:
    nqp_rxmark rx497_bstack, rxscan498_loop1496, rx497_pos, 0
  rxscan498_done1498:
    repr_bind_attr_int rx497_cur, rx497_curclass, "$!pos", rx497_pos
    store_lex unicode:"$\x{a2}", rx497_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1499
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1500
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5007
  fallback1500:
    unless_null $P5004, vivi_4991501
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4991501:
    set $P5003, $P5004
  fallback1499:
    set $P101, $P5003
    repr_bind_attr_int rx497_cur, rx497_curclass, "$!pos", rx497_pos
    store_lex unicode:"$\x{a2}", rx497_cur
    box $P5009, "grammar"
    set $P102, $P5009
    nqp_rxmark rx497_bstack, rxcap500_fail1503, rx497_pos, 0
    add $I11, rx497_pos, 7
    gt $I11, rx497_eos, rx497_fail1492
    substr $S10, rx497_tgt, rx497_pos, 7
    ne $S10, ucs4:"grammar", rx497_fail1492
    add rx497_pos, 7
    nqp_rxpeek $I19, rx497_bstack, rxcap500_fail1503
    inc $I19
    set $I11, rx497_bstack[$I19]
    repr_bind_attr_int rx497_cur, rx497_curclass, "$!pos", rx497_pos
    $P11 = rx497_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx497_pos)
    rx497_cstack = rx497_cur."!cursor_capture"($P11, "sym")
    goto rxcap500_done1502
  rxcap500_fail1503:
    goto rx497_fail1492
  rxcap500_done1502:
    repr_bind_attr_int rx497_cur, rx497_curclass, "$!pos", rx497_pos
    $P11 = rx497_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx497_curclass, "$!pos"
    lt $I11, 0, rx497_fail1492
    nqp_rxmark rx497_bstack, rxsubrule501_pass1504, -1, 0
  rxsubrule501_pass1504:
    rx497_cstack = rx497_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx497_pos, $P11, rx497_curclass, "$!pos"
    rx497_cur."!cursor_pass"(rx497_pos, "package_declarator:sym<grammar>", 'backtrack'=>1)
    .return (rx497_cur)
  rx497_restart1491:
    repr_get_attr_obj rx497_cstack, rx497_cur, rx497_curclass, "$!cstack"
  rx497_fail1492:
    unless rx497_bstack, rx497_done1490
    pop $I19, rx497_bstack
    if_null rx497_cstack, rx497_cstack_done1495
    unless rx497_cstack, rx497_cstack_done1495
    dec $I19
    set $P11, rx497_cstack[$I19]
  rx497_cstack_done1495:
    pop rx497_rep, rx497_bstack
    pop rx497_pos, rx497_bstack
    pop $I19, rx497_bstack
    lt rx497_pos, -1, rx497_done1490
    lt rx497_pos, 0, rx497_fail1492
    eq $I19, 0, rx497_fail1492
    nqp_islist $I20, rx497_cstack
    unless $I20, rx497_jump1493
    elements $I18, rx497_bstack
    le $I18, 0, rx497_cut1494
    dec $I18
    set $I18, rx497_bstack[$I18]
  rx497_cut1494:
    assign rx497_cstack, $I18
  rx497_jump1493:
    jump $I19
  rx497_done1490:
    rx497_cur."!cursor_fail"()
    .return (rx497_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_105_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 945
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx502_tgt
    .local int rx502_pos
    .local int rx502_off
    .local int rx502_eos
    .local int rx502_rep
    .local pmc rx502_cur
    .local pmc rx502_curclass
    .local pmc rx502_bstack
    .local pmc rx502_cstack
    (rx502_cur, rx502_tgt, rx502_pos, rx502_curclass, rx502_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx502_cur
    length rx502_eos, rx502_tgt
    eq $I19, 1, rx502_restart1507
    gt rx502_pos, rx502_eos, rx502_fail1508
    repr_get_attr_int $I11, self, rx502_curclass, "$!from"
    ne $I11, -1, rxscan503_done1514
    goto rxscan503_scan1513
  rxscan503_loop1512:
    inc rx502_pos
    gt rx502_pos, rx502_eos, rx502_fail1508
    repr_bind_attr_int rx502_cur, rx502_curclass, "$!from", rx502_pos
  rxscan503_scan1513:
    nqp_rxmark rx502_bstack, rxscan503_loop1512, rx502_pos, 0
  rxscan503_done1514:
    repr_bind_attr_int rx502_cur, rx502_curclass, "$!pos", rx502_pos
    store_lex unicode:"$\x{a2}", rx502_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1515
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1516
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5007
  fallback1516:
    unless_null $P5004, vivi_5041517
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5041517:
    set $P5003, $P5004
  fallback1515:
    set $P101, $P5003
    repr_bind_attr_int rx502_cur, rx502_curclass, "$!pos", rx502_pos
    store_lex unicode:"$\x{a2}", rx502_cur
    box $P5009, "role"
    set $P102, $P5009
    nqp_rxmark rx502_bstack, rxcap505_fail1519, rx502_pos, 0
    add $I11, rx502_pos, 4
    gt $I11, rx502_eos, rx502_fail1508
    substr $S10, rx502_tgt, rx502_pos, 4
    ne $S10, ucs4:"role", rx502_fail1508
    add rx502_pos, 4
    nqp_rxpeek $I19, rx502_bstack, rxcap505_fail1519
    inc $I19
    set $I11, rx502_bstack[$I19]
    repr_bind_attr_int rx502_cur, rx502_curclass, "$!pos", rx502_pos
    $P11 = rx502_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx502_pos)
    rx502_cstack = rx502_cur."!cursor_capture"($P11, "sym")
    goto rxcap505_done1518
  rxcap505_fail1519:
    goto rx502_fail1508
  rxcap505_done1518:
    repr_bind_attr_int rx502_cur, rx502_curclass, "$!pos", rx502_pos
    $P11 = rx502_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx502_curclass, "$!pos"
    lt $I11, 0, rx502_fail1508
    nqp_rxmark rx502_bstack, rxsubrule506_pass1520, -1, 0
  rxsubrule506_pass1520:
    rx502_cstack = rx502_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx502_pos, $P11, rx502_curclass, "$!pos"
    rx502_cur."!cursor_pass"(rx502_pos, "package_declarator:sym<role>", 'backtrack'=>1)
    .return (rx502_cur)
  rx502_restart1507:
    repr_get_attr_obj rx502_cstack, rx502_cur, rx502_curclass, "$!cstack"
  rx502_fail1508:
    unless rx502_bstack, rx502_done1506
    pop $I19, rx502_bstack
    if_null rx502_cstack, rx502_cstack_done1511
    unless rx502_cstack, rx502_cstack_done1511
    dec $I19
    set $P11, rx502_cstack[$I19]
  rx502_cstack_done1511:
    pop rx502_rep, rx502_bstack
    pop rx502_pos, rx502_bstack
    pop $I19, rx502_bstack
    lt rx502_pos, -1, rx502_done1506
    lt rx502_pos, 0, rx502_fail1508
    eq $I19, 0, rx502_fail1508
    nqp_islist $I20, rx502_cstack
    unless $I20, rx502_jump1509
    elements $I18, rx502_bstack
    le $I18, 0, rx502_cut1510
    dec $I18
    set $I18, rx502_bstack[$I18]
  rx502_cut1510:
    assign rx502_cstack, $I18
  rx502_jump1509:
    jump $I19
  rx502_done1506:
    rx502_cur."!cursor_fail"()
    .return (rx502_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_106_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 950
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx507_tgt
    .local int rx507_pos
    .local int rx507_off
    .local int rx507_eos
    .local int rx507_rep
    .local pmc rx507_cur
    .local pmc rx507_curclass
    .local pmc rx507_bstack
    .local pmc rx507_cstack
    (rx507_cur, rx507_tgt, rx507_pos, rx507_curclass, rx507_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx507_cur
    length rx507_eos, rx507_tgt
    eq $I19, 1, rx507_restart1523
    gt rx507_pos, rx507_eos, rx507_fail1524
    repr_get_attr_int $I11, self, rx507_curclass, "$!from"
    ne $I11, -1, rxscan508_done1530
    goto rxscan508_scan1529
  rxscan508_loop1528:
    inc rx507_pos
    gt rx507_pos, rx507_eos, rx507_fail1524
    repr_bind_attr_int rx507_cur, rx507_curclass, "$!from", rx507_pos
  rxscan508_scan1529:
    nqp_rxmark rx507_bstack, rxscan508_loop1528, rx507_pos, 0
  rxscan508_done1530:
    repr_bind_attr_int rx507_cur, rx507_curclass, "$!pos", rx507_pos
    store_lex unicode:"$\x{a2}", rx507_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1531
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1532
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5007
  fallback1532:
    unless_null $P5004, vivi_5091533
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5091533:
    set $P5003, $P5004
  fallback1531:
    set $P101, $P5003
    repr_bind_attr_int rx507_cur, rx507_curclass, "$!pos", rx507_pos
    store_lex unicode:"$\x{a2}", rx507_cur
    box $P5009, "native"
    set $P102, $P5009
    nqp_rxmark rx507_bstack, rxcap510_fail1535, rx507_pos, 0
    add $I11, rx507_pos, 6
    gt $I11, rx507_eos, rx507_fail1524
    substr $S10, rx507_tgt, rx507_pos, 6
    ne $S10, ucs4:"native", rx507_fail1524
    add rx507_pos, 6
    nqp_rxpeek $I19, rx507_bstack, rxcap510_fail1535
    inc $I19
    set $I11, rx507_bstack[$I19]
    repr_bind_attr_int rx507_cur, rx507_curclass, "$!pos", rx507_pos
    $P11 = rx507_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx507_pos)
    rx507_cstack = rx507_cur."!cursor_capture"($P11, "sym")
    goto rxcap510_done1534
  rxcap510_fail1535:
    goto rx507_fail1524
  rxcap510_done1534:
    repr_bind_attr_int rx507_cur, rx507_curclass, "$!pos", rx507_pos
    $P11 = rx507_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx507_curclass, "$!pos"
    lt $I11, 0, rx507_fail1524
    nqp_rxmark rx507_bstack, rxsubrule511_pass1536, -1, 0
  rxsubrule511_pass1536:
    rx507_cstack = rx507_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx507_pos, $P11, rx507_curclass, "$!pos"
    rx507_cur."!cursor_pass"(rx507_pos, "package_declarator:sym<native>", 'backtrack'=>1)
    .return (rx507_cur)
  rx507_restart1523:
    repr_get_attr_obj rx507_cstack, rx507_cur, rx507_curclass, "$!cstack"
  rx507_fail1524:
    unless rx507_bstack, rx507_done1522
    pop $I19, rx507_bstack
    if_null rx507_cstack, rx507_cstack_done1527
    unless rx507_cstack, rx507_cstack_done1527
    dec $I19
    set $P11, rx507_cstack[$I19]
  rx507_cstack_done1527:
    pop rx507_rep, rx507_bstack
    pop rx507_pos, rx507_bstack
    pop $I19, rx507_bstack
    lt rx507_pos, -1, rx507_done1522
    lt rx507_pos, 0, rx507_fail1524
    eq $I19, 0, rx507_fail1524
    nqp_islist $I20, rx507_cstack
    unless $I20, rx507_jump1525
    elements $I18, rx507_bstack
    le $I18, 0, rx507_cut1526
    dec $I18
    set $I18, rx507_bstack[$I18]
  rx507_cut1526:
    assign rx507_cstack, $I18
  rx507_jump1525:
    jump $I19
  rx507_done1522:
    rx507_cur."!cursor_fail"()
    .return (rx507_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_107_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 955
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx512_tgt
    .local int rx512_pos
    .local int rx512_off
    .local int rx512_eos
    .local int rx512_rep
    .local pmc rx512_cur
    .local pmc rx512_curclass
    .local pmc rx512_bstack
    .local pmc rx512_cstack
    (rx512_cur, rx512_tgt, rx512_pos, rx512_curclass, rx512_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx512_cur
    length rx512_eos, rx512_tgt
    eq $I19, 1, rx512_restart1539
    gt rx512_pos, rx512_eos, rx512_fail1540
    repr_get_attr_int $I11, self, rx512_curclass, "$!from"
    ne $I11, -1, rxscan513_done1546
    goto rxscan513_scan1545
  rxscan513_loop1544:
    inc rx512_pos
    gt rx512_pos, rx512_eos, rx512_fail1540
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!from", rx512_pos
  rxscan513_scan1545:
    nqp_rxmark rx512_bstack, rxscan513_loop1544, rx512_pos, 0
  rxscan513_done1546:
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    store_lex unicode:"$\x{a2}", rx512_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1547
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1548
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5007
  fallback1548:
    unless_null $P5004, vivi_5141549
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5141549:
    set $P5003, $P5004
  fallback1547:
    set $P101, $P5003
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    store_lex unicode:"$\x{a2}", rx512_cur
    box $P5009, "stub"
    set $P102, $P5009
    nqp_rxmark rx512_bstack, rxcap515_fail1551, rx512_pos, 0
    add $I11, rx512_pos, 4
    gt $I11, rx512_eos, rx512_fail1540
    substr $S10, rx512_tgt, rx512_pos, 4
    ne $S10, ucs4:"stub", rx512_fail1540
    add rx512_pos, 4
    nqp_rxpeek $I19, rx512_bstack, rxcap515_fail1551
    inc $I19
    set $I11, rx512_bstack[$I19]
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx512_pos)
    rx512_cstack = rx512_cur."!cursor_capture"($P11, "sym")
    goto rxcap515_done1550
  rxcap515_fail1551:
    goto rx512_fail1540
  rxcap515_done1550:
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."ws"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1540
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."name"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1540
    nqp_rxmark rx512_bstack, rxsubrule517_pass1553, -1, 0
  rxsubrule517_pass1553:
    rx512_cstack = rx512_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."ws"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1540
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    add $I11, rx512_pos, 9
    gt $I11, rx512_eos, rx512_fail1540
    substr $S10, rx512_tgt, rx512_pos, 9
    ne $S10, ucs4:"metaclass", rx512_fail1540
    add rx512_pos, 9
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."ws"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1540
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."name"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1540
    nqp_rxmark rx512_bstack, rxsubrule520_pass1556, -1, 0
  rxsubrule520_pass1556:
    rx512_cstack = rx512_cur."!cursor_capture"($P11, "metaclass")
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."ws"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1540
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    add $I11, rx512_pos, 1
    gt $I11, rx512_eos, rx512_fail1540
    substr $S10, rx512_tgt, rx512_pos, 1
    ne $S10, ucs4:"{", rx512_fail1540
    add rx512_pos, 1
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."ws"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1540
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    add $I11, rx512_pos, 3
    gt $I11, rx512_eos, rx512_fail1540
    substr $S10, rx512_tgt, rx512_pos, 3
    ne $S10, ucs4:"...", rx512_fail1540
    add rx512_pos, 3
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."ws"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1540
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    add $I11, rx512_pos, 1
    gt $I11, rx512_eos, rx512_fail1540
    substr $S10, rx512_tgt, rx512_pos, 1
    ne $S10, ucs4:"}", rx512_fail1540
    add rx512_pos, 1
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."ws"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1540
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    rx512_cur."!cursor_pass"(rx512_pos, "package_declarator:sym<stub>", 'backtrack'=>1)
    .return (rx512_cur)
  rx512_restart1539:
    repr_get_attr_obj rx512_cstack, rx512_cur, rx512_curclass, "$!cstack"
  rx512_fail1540:
    unless rx512_bstack, rx512_done1538
    pop $I19, rx512_bstack
    if_null rx512_cstack, rx512_cstack_done1543
    unless rx512_cstack, rx512_cstack_done1543
    dec $I19
    set $P11, rx512_cstack[$I19]
  rx512_cstack_done1543:
    pop rx512_rep, rx512_bstack
    pop rx512_pos, rx512_bstack
    pop $I19, rx512_bstack
    lt rx512_pos, -1, rx512_done1538
    lt rx512_pos, 0, rx512_fail1540
    eq $I19, 0, rx512_fail1540
    nqp_islist $I20, rx512_cstack
    unless $I20, rx512_jump1541
    elements $I18, rx512_bstack
    le $I18, 0, rx512_cut1542
    dec $I18
    set $I18, rx512_bstack[$I18]
  rx512_cut1542:
    assign rx512_cstack, $I18
  rx512_jump1541:
    jump $I19
  rx512_done1538:
    rx512_cur."!cursor_fail"()
    .return (rx512_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_108_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 963
    .param pmc _lex_param_0 
    .const 'Sub' $P5021 = 'cuid_396_1351203235.318' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_397_1351203235.318' 
    capture_lex $P5021 
    .lex "$*PACKAGE", $P101 
    .lex "$OUTER", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx525_tgt
    .local int rx525_pos
    .local int rx525_off
    .local int rx525_eos
    .local int rx525_rep
    .local pmc rx525_cur
    .local pmc rx525_curclass
    .local pmc rx525_bstack
    .local pmc rx525_cstack
    (rx525_cur, rx525_tgt, rx525_pos, rx525_curclass, rx525_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx525_cur
    length rx525_eos, rx525_tgt
    eq $I19, 1, rx525_restart1563
    gt rx525_pos, rx525_eos, rx525_fail1564
    repr_get_attr_int $I11, self, rx525_curclass, "$!from"
    ne $I11, -1, rxscan526_done1570
    goto rxscan526_scan1569
  rxscan526_loop1568:
    inc rx525_pos
    gt rx525_pos, rx525_eos, rx525_fail1564
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!from", rx525_pos
  rxscan526_scan1569:
    nqp_rxmark rx525_bstack, rxscan526_loop1568, rx525_pos, 0
  rxscan526_done1570:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    store_lex unicode:"$\x{a2}", rx525_cur
    unless_null $P101, fallback1572
    nqp_get_sc_object $P5005, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$PACKAGE"]
    unless_null $P5003, fallback1573
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5006
  fallback1573:
    unless_null $P5003, vivi_5281574
    die "Contextual $*PACKAGE not found"
    box $P5007, "Contextual $*PACKAGE not found"
    set $P5003, $P5007
  vivi_5281574:
    set $P101, $P5003
  fallback1572:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    store_lex unicode:"$\x{a2}", rx525_cur
.annotate 'line', 965
    find_dynamic_lex $P5008, "$*W"
    unless_null $P5008, fallback1576
    nqp_get_sc_object $P5011, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$W"]
    unless_null $P5009, fallback1577
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5012
  fallback1577:
    unless_null $P5009, vivi_5301578
    die "Contextual $*W not found"
    box $P5013, "Contextual $*W not found"
    set $P5009, $P5013
  vivi_5301578:
    set $P5008, $P5009
  fallback1576:
    $P5014 = $P5008."cur_lexpad"()
    set $P102, $P5014
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."name"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    nqp_rxmark rx525_bstack, rxsubrule532_pass1580, -1, 0
  rxsubrule532_pass1580:
    rx525_cstack = rx525_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxmark rx525_bstack, rxquantr536_done1585, rx525_pos, 0
  rxquantr536_loop1584:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    store_lex unicode:"$\x{a2}", rx525_cur
    $P5015 = $P103."MATCH"()
    set $P104, $P5015
    .const 'Sub' $P5016 = 'cuid_396_1351203235.318' 
    capture_lex $P5016
    $P5017 = $P5016()
    unless $P5017, rx525_fail1564
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    add $I11, rx525_pos, 1
    gt $I11, rx525_eos, rx525_fail1564
    substr $S10, rx525_tgt, rx525_pos, 1
    ne $S10, ucs4:"[", rx525_fail1564
    add rx525_pos, 1
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."role_params"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    nqp_rxmark rx525_bstack, rxsubrule541_pass1592, -1, 0
  rxsubrule541_pass1592:
    rx525_cstack = rx525_cur."!cursor_capture"($P11, "role_params")
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
  alt542_01594:
    nqp_rxmark rx525_bstack, alt542_11595, rx525_pos, 0
    add $I11, rx525_pos, 1
    gt $I11, rx525_eos, rx525_fail1564
    substr $S10, rx525_tgt, rx525_pos, 1
    ne $S10, ucs4:"]", rx525_fail1564
    add rx525_pos, 1
    goto alt542_end1593
  alt542_11595:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."FAILGOAL"("']'")
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    goto rxsubrule543_pass1596
  rxsubrule543_back1597:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
  rxsubrule543_pass1596:
    rx525_cstack = rx525_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule543_back1597
    push rx525_bstack, $I11
    push rx525_bstack, 0
    push rx525_bstack, rx525_pos
    elements $I11, rx525_cstack
    push rx525_bstack, $I11
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
  alt542_end1593:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxpeek $I19, rx525_bstack, rxquantr536_done1585
    inc $I19
    inc $I19
    set rx525_rep, rx525_bstack[$I19]
    nqp_rxcommit rx525_bstack, rxquantr536_done1585
    inc rx525_rep
  rxquantr536_done1585:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxmark rx525_bstack, rxquantr546_done1601, rx525_pos, 0
  rxquantr546_loop1600:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    add $I11, rx525_pos, 2
    gt $I11, rx525_eos, rx525_fail1564
    substr $S10, rx525_tgt, rx525_pos, 2
    ne $S10, ucs4:"is", rx525_fail1564
    add rx525_pos, 2
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    add $I11, rx525_pos, 5
    gt $I11, rx525_eos, rx525_fail1564
    substr $S10, rx525_tgt, rx525_pos, 5
    ne $S10, ucs4:"repr(", rx525_fail1564
    add rx525_pos, 5
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    nqp_rxmark rx525_bstack, rxsubrule550_pass1605, -1, 0
  rxsubrule550_pass1605:
    rx525_cstack = rx525_cur."!cursor_capture"($P11, "repr")
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    add $I11, rx525_pos, 1
    gt $I11, rx525_eos, rx525_fail1564
    substr $S10, rx525_tgt, rx525_pos, 1
    ne $S10, ucs4:")", rx525_fail1564
    add rx525_pos, 1
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxpeek $I19, rx525_bstack, rxquantr546_done1601
    inc $I19
    inc $I19
    set rx525_rep, rx525_bstack[$I19]
    nqp_rxcommit rx525_bstack, rxquantr546_done1601
    inc rx525_rep
  rxquantr546_done1601:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    store_lex unicode:"$\x{a2}", rx525_cur
    $P5018 = $P103."MATCH"()
    set $P104, $P5018
    .const 'Sub' $P5019 = 'cuid_397_1351203235.318' 
    capture_lex $P5019
    $P5020 = $P5019()
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxmark rx525_bstack, rxquantr575_done1695, rx525_pos, 0
  rxquantr575_loop1694:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxmark rx525_bstack, rxcap577_fail1698, rx525_pos, 0
    add $I11, rx525_pos, 9
    gt $I11, rx525_eos, rx525_fail1564
    substr $S10, rx525_tgt, rx525_pos, 9
    ne $S10, ucs4:"is export", rx525_fail1564
    add rx525_pos, 9
    nqp_rxpeek $I19, rx525_bstack, rxcap577_fail1698
    inc $I19
    set $I11, rx525_bstack[$I19]
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx525_pos)
    rx525_cstack = rx525_cur."!cursor_capture"($P11, "export")
    goto rxcap577_done1697
  rxcap577_fail1698:
    goto rx525_fail1564
  rxcap577_done1697:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxpeek $I19, rx525_bstack, rxquantr575_done1695
    inc $I19
    inc $I19
    set rx525_rep, rx525_bstack[$I19]
    nqp_rxcommit rx525_bstack, rxquantr575_done1695
    inc rx525_rep
  rxquantr575_done1695:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxmark rx525_bstack, rxquantr580_done1702, rx525_pos, 0
  rxquantr580_loop1701:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    add $I11, rx525_pos, 2
    gt $I11, rx525_eos, rx525_fail1564
    substr $S10, rx525_tgt, rx525_pos, 2
    ne $S10, ucs4:"is", rx525_fail1564
    add rx525_pos, 2
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."name"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    nqp_rxmark rx525_bstack, rxsubrule583_pass1705, -1, 0
  rxsubrule583_pass1705:
    rx525_cstack = rx525_cur."!cursor_capture"($P11, "parent")
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxpeek $I19, rx525_bstack, rxquantr580_done1702
    inc $I19
    inc $I19
    set rx525_rep, rx525_bstack[$I19]
    nqp_rxcommit rx525_bstack, rxquantr580_done1702
    inc rx525_rep
  rxquantr580_done1702:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxmark rx525_bstack, rxquantr586_done1709, rx525_pos, 0
  rxquantr586_loop1708:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    add $I11, rx525_pos, 4
    gt $I11, rx525_eos, rx525_fail1564
    substr $S10, rx525_tgt, rx525_pos, 4
    ne $S10, ucs4:"does", rx525_fail1564
    add rx525_pos, 4
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."name"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    nqp_rxmark rx525_bstack, rxsubrule589_pass1712, -1, 0
  rxsubrule589_pass1712:
    rx525_cstack = rx525_cur."!cursor_capture"($P11, "role")
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxpeek $I19, rx525_bstack, rxquantr586_done1709
    inc $I19
    inc $I19
    set rx525_rep, rx525_bstack[$I19]
    nqp_rxcommit rx525_bstack, rxquantr586_done1709
    inc rx525_rep
    nqp_rxmark rx525_bstack, rxquantr586_done1709, rx525_pos, rx525_rep
    goto rxquantr586_loop1708
  rxquantr586_done1709:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
  alt592_01716:
    nqp_rxmark rx525_bstack, alt592_11731, rx525_pos, 0
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    add $I11, rx525_pos, 1
    gt $I11, rx525_eos, rx525_fail1564
    substr $S10, rx525_tgt, rx525_pos, 1
    ne $S10, ucs4:";", rx525_fail1564
    add rx525_pos, 1
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    nqp_rxmark rx525_bstack, rxsubrule595_pass1719, -1, 0
  rxsubrule595_pass1719:
    rx525_cstack = rx525_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
  alt597_01722:
    nqp_rxmark rx525_bstack, alt597_11726, rx525_pos, 0
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    lt rx525_pos, rx525_eos, rx525_fail1564
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    goto alt597_end1721
  alt597_11726:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
  alt597_end1721:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    goto alt592_end1715
  alt592_11731:
    nqp_rxmark rx525_bstack, alt592_21736, rx525_pos, 0
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    ge rx525_pos, rx525_eos, rx525_fail1564
    substr $S11, rx525_tgt, rx525_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx525_fail1564
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    nqp_rxmark rx525_bstack, rxsubrule607_pass1734, -1, 0
  rxsubrule607_pass1734:
    rx525_cstack = rx525_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    goto alt592_end1715
  alt592_21736:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."panic"("Malformed package declaration")
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
  alt592_end1715:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1564
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    rx525_cur."!cursor_pass"(rx525_pos, "package_def", 'backtrack'=>1)
    .return (rx525_cur)
  rx525_restart1563:
    repr_get_attr_obj rx525_cstack, rx525_cur, rx525_curclass, "$!cstack"
  rx525_fail1564:
    unless rx525_bstack, rx525_done1562
    pop $I19, rx525_bstack
    if_null rx525_cstack, rx525_cstack_done1567
    unless rx525_cstack, rx525_cstack_done1567
    dec $I19
    set $P11, rx525_cstack[$I19]
  rx525_cstack_done1567:
    pop rx525_rep, rx525_bstack
    pop rx525_pos, rx525_bstack
    pop $I19, rx525_bstack
    lt rx525_pos, -1, rx525_done1562
    lt rx525_pos, 0, rx525_fail1564
    eq $I19, 0, rx525_fail1564
    nqp_islist $I20, rx525_cstack
    unless $I20, rx525_jump1565
    elements $I18, rx525_bstack
    le $I18, 0, rx525_cut1566
    dec $I18
    set $I18, rx525_bstack[$I18]
  rx525_cut1566:
    assign rx525_cstack, $I18
  rx525_jump1565:
    jump $I19
  rx525_done1562:
    rx525_cur."!cursor_fail"()
    .return (rx525_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_396_1351203235.318") :anon :lex :outer("cuid_108_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 969

    find_dynamic_lex $P5001, "$*PKGDECL"
    unless_null $P5001, fallback1587
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$PKGDECL"]
    unless_null $P5002, fallback1588
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5005
  fallback1588:
    unless_null $P5002, vivi_5381589
    die "Contextual $*PKGDECL not found"
    box $P5006, "Contextual $*PKGDECL not found"
    set $P5002, $P5006
  vivi_5381589:
    set $P5001, $P5002
  fallback1587:
    set $S5001, $P5001
    iseq $I5001, $S5001, "role"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_397_1351203235.318") :anon :lex :outer("cuid_108_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 972
    .lex "%args", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback1609
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5004
  fallback1609:
    set $P5002, $P5003["name"]
    unless_null $P5002, fallback1610
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5005
  fallback1610:
    set $S5001, $P5002
    box $P5006, $S5001
    set $P101["name"], $P5006
    find_lex $P5008, "$/"
    unless_null $P5008, fallback1613
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5009
  fallback1613:
    set $P5007, $P5008["repr"]
    unless_null $P5007, fallback1614
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5010
  fallback1614:
    unless $P5007 goto if554_end1612 
.annotate 'line', 977
    find_lex $P5016, "$/"
    unless_null $P5016, fallback1615
    nqp_get_sc_object $P5017, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5016, $P5017
  fallback1615:
    set $P5015, $P5016["repr"]
    unless_null $P5015, fallback1616
    nqp_get_sc_object $P5018, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5015, $P5018
  fallback1616:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback1617
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5014, $P5019
  fallback1617:
    set $P5013, $P5014["quote_delimited"]
    unless_null $P5013, fallback1618
    nqp_get_sc_object $P5020, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5013, $P5020
  fallback1618:
    set $P5012, $P5013["quote_atom"]
    unless_null $P5012, fallback1619
    nqp_get_sc_object $P5021, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5012, $P5021
  fallback1619:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback1620
    nqp_get_sc_object $P5022, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5022
  fallback1620:
    set $S5002, $P5011
    box $P5023, $S5002
    set $P101["repr"], $P5023
  if554_end1612:
.annotate 'line', 980
    find_dynamic_lex $P5024, "$*W"
    unless_null $P5024, fallback1621
    nqp_get_sc_object $P5027, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["$W"]
    unless_null $P5025, fallback1622
    nqp_get_sc_object $P5028, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5025, $P5028
  fallback1622:
    unless_null $P5025, vivi_5551623
    die "Contextual $*W not found"
    box $P5029, "Contextual $*W not found"
    set $P5025, $P5029
  vivi_5551623:
    set $P5024, $P5025
  fallback1621:
    find_dynamic_lex $P5031, "%*HOW"
    unless_null $P5031, fallback1624
    nqp_get_sc_object $P5034, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%HOW"]
    unless_null $P5032, fallback1625
    nqp_get_sc_object $P5036, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%HOW"], $P5037
    set $P5032, $P5037
  fallback1625:
    unless_null $P5032, vivi_5561626
    die "Contextual %*HOW not found"
    box $P5038, "Contextual %*HOW not found"
    set $P5032, $P5038
  vivi_5561626:
    set $P5031, $P5032
  fallback1624:
    find_dynamic_lex $P5039, "$*PKGDECL"
    unless_null $P5039, fallback1627
    nqp_get_sc_object $P5042, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5041, $P5042
    set $P5040, $P5041["$PKGDECL"]
    unless_null $P5040, fallback1628
    nqp_get_sc_object $P5043, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5040, $P5043
  fallback1628:
    unless_null $P5040, vivi_5571629
    die "Contextual $*PKGDECL not found"
    box $P5044, "Contextual $*PKGDECL not found"
    set $P5040, $P5044
  vivi_5571629:
    set $P5039, $P5040
  fallback1627:
    set $S5003, $P5039
    set $P5030, $P5031[$S5003]
    unless_null $P5030, fallback1630
    nqp_get_sc_object $P5045, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5030, $P5045
  fallback1630:
    $P5046 = $P5024."pkg_create_mo"($P5030, $P101 :flat :named)
    store_dynamic_lex "$*PACKAGE", $P5046
    find_dynamic_lex $P5047, "$*SCOPE"
    unless_null $P5047, fallback1635
    nqp_get_sc_object $P5050, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$SCOPE"]
    unless_null $P5048, fallback1636
    nqp_get_sc_object $P5051, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5048, $P5051
  fallback1636:
    unless_null $P5048, vivi_5601637
    die "Contextual $*SCOPE not found"
    box $P5052, "Contextual $*SCOPE not found"
    set $P5048, $P5052
  vivi_5601637:
    set $P5047, $P5048
  fallback1635:
    set $S5004, $P5047
    iseq $I5001, $S5004, "our"
    set $I5003, $I5001
    if $I5001 goto unless559_end1634 
    find_dynamic_lex $P5053, "$*SCOPE"
    unless_null $P5053, fallback1638
    nqp_get_sc_object $P5056, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$SCOPE"]
    unless_null $P5054, fallback1639
    nqp_get_sc_object $P5057, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5054, $P5057
  fallback1639:
    unless_null $P5054, vivi_5611640
    die "Contextual $*SCOPE not found"
    box $P5058, "Contextual $*SCOPE not found"
    set $P5054, $P5058
  vivi_5611640:
    set $P5053, $P5054
  fallback1638:
    set $S5005, $P5053
    iseq $I5002, $S5005, ""
    set $I5003, $I5002
  unless559_end1634:
    unless $I5003 goto if558_else1631 
.annotate 'line', 983
.annotate 'line', 984
    find_dynamic_lex $P5059, "$*W"
    unless_null $P5059, fallback1641
    nqp_get_sc_object $P5062, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$W"]
    unless_null $P5060, fallback1642
    nqp_get_sc_object $P5063, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5060, $P5063
  fallback1642:
    unless_null $P5060, vivi_5621643
    die "Contextual $*W not found"
    box $P5064, "Contextual $*W not found"
    set $P5060, $P5064
  vivi_5621643:
    set $P5059, $P5060
  fallback1641:
    find_dynamic_lex $P5065, "$*OUTERPACKAGE"
    unless_null $P5065, fallback1644
    nqp_get_sc_object $P5068, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$OUTERPACKAGE"]
    unless_null $P5066, fallback1645
    nqp_get_sc_object $P5069, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5066, $P5069
  fallback1645:
    unless_null $P5066, vivi_5631646
    die "Contextual $*OUTERPACKAGE not found"
    box $P5070, "Contextual $*OUTERPACKAGE not found"
    set $P5066, $P5070
  vivi_5631646:
    set $P5065, $P5066
  fallback1644:
    find_lex $P5073, "$/"
    unless_null $P5073, fallback1647
    nqp_get_sc_object $P5074, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5073, $P5074
  fallback1647:
    set $P5072, $P5073["name"]
    unless_null $P5072, fallback1648
    nqp_get_sc_object $P5075, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5072, $P5075
  fallback1648:
    set $P5071, $P5072["identifier"]
    unless_null $P5071, fallback1649
    nqp_get_sc_object $P5076, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5071, $P5076
  fallback1649:
    find_dynamic_lex $P5077, "$*PACKAGE"
    unless_null $P5077, fallback1650
    nqp_get_sc_object $P5080, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5079, $P5080
    set $P5078, $P5079["$PACKAGE"]
    unless_null $P5078, fallback1651
    nqp_get_sc_object $P5081, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5078, $P5081
  fallback1651:
    unless_null $P5078, vivi_5641652
    die "Contextual $*PACKAGE not found"
    box $P5082, "Contextual $*PACKAGE not found"
    set $P5078, $P5082
  vivi_5641652:
    set $P5077, $P5078
  fallback1650:
    $P5059."install_package_symbol"($P5065, $P5071, $P5077)
    find_lex $P5085, "$/"
    unless_null $P5085, fallback1655
    nqp_get_sc_object $P5086, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5085, $P5086
  fallback1655:
    set $P5084, $P5085["name"]
    unless_null $P5084, fallback1656
    nqp_get_sc_object $P5087, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5084, $P5087
  fallback1656:
    set $P5083, $P5084["identifier"]
    unless_null $P5083, fallback1657
    nqp_get_sc_object $P5088, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5083, $P5088
  fallback1657:
    set $N5001, $P5083
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5112, $I5004
    set $P5111, $P5112
    unless $I5004 goto if565_end1654 
.annotate 'line', 985
.annotate 'line', 986
    find_dynamic_lex $P5089, "$*W"
    unless_null $P5089, fallback1658
    nqp_get_sc_object $P5092, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5091, $P5092
    set $P5090, $P5091["$W"]
    unless_null $P5090, fallback1659
    nqp_get_sc_object $P5093, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5090, $P5093
  fallback1659:
    unless_null $P5090, vivi_5661660
    die "Contextual $*W not found"
    box $P5094, "Contextual $*W not found"
    set $P5090, $P5094
  vivi_5661660:
    set $P5089, $P5090
  fallback1658:
    find_lex $P5095, "$OUTER"
    find_lex $P5099, "$/"
    unless_null $P5099, fallback1661
    nqp_get_sc_object $P5100, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5099, $P5100
  fallback1661:
    set $P5098, $P5099["name"]
    unless_null $P5098, fallback1662
    nqp_get_sc_object $P5101, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5098, $P5101
  fallback1662:
    set $P5097, $P5098["identifier"]
    unless_null $P5097, fallback1663
    nqp_get_sc_object $P5102, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5097, $P5102
  fallback1663:
    set $P5096, $P5097[0]
    unless_null $P5096, fallback1664
    nqp_get_sc_object $P5103, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5096, $P5103
  fallback1664:
    find_dynamic_lex $P5104, "$*PACKAGE"
    unless_null $P5104, fallback1665
    nqp_get_sc_object $P5107, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$PACKAGE"]
    unless_null $P5105, fallback1666
    nqp_get_sc_object $P5108, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5105, $P5108
  fallback1666:
    unless_null $P5105, vivi_5671667
    die "Contextual $*PACKAGE not found"
    box $P5109, "Contextual $*PACKAGE not found"
    set $P5105, $P5109
  vivi_5671667:
    set $P5104, $P5105
  fallback1665:
    $P5110 = $P5089."install_lexical_symbol"($P5095, $P5096, $P5104)
    set $P5111, $P5110
  if565_end1654:
    set $P5163, $P5111
    goto if558_end1632
  if558_else1631:
    find_dynamic_lex $P5113, "$*SCOPE"
    unless_null $P5113, fallback1670
    nqp_get_sc_object $P5116, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5115, $P5116
    set $P5114, $P5115["$SCOPE"]
    unless_null $P5114, fallback1671
    nqp_get_sc_object $P5117, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5114, $P5117
  fallback1671:
    unless_null $P5114, vivi_5691672
    die "Contextual $*SCOPE not found"
    box $P5118, "Contextual $*SCOPE not found"
    set $P5114, $P5118
  vivi_5691672:
    set $P5113, $P5114
  fallback1670:
    set $S5006, $P5113
    iseq $I5005, $S5006, "my"
    unless $I5005 goto if568_else1668 
.annotate 'line', 989
    find_lex $P5121, "$/"
    unless_null $P5121, fallback1675
    nqp_get_sc_object $P5122, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5121, $P5122
  fallback1675:
    set $P5120, $P5121["name"]
    unless_null $P5120, fallback1676
    nqp_get_sc_object $P5123, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5120, $P5123
  fallback1676:
    set $P5119, $P5120["identifier"]
    unless_null $P5119, fallback1677
    nqp_get_sc_object $P5124, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5119, $P5124
  fallback1677:
    set $N5003, $P5119
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    unless $I5006 goto if570_end1674 
.annotate 'line', 990
.annotate 'line', 991
    find_lex $P5126, "$/"
    unless_null $P5126, fallback1678
    nqp_get_sc_object $P5127, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5126, $P5127
  fallback1678:
    set $P5125, $P5126["name"]
    unless_null $P5125, fallback1679
    nqp_get_sc_object $P5128, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5125, $P5128
  fallback1679:
    $P5129 = $P5125."CURSOR"()
    $P5130 = $P5129."panic"("A my scoped package cannot have a multi-part name yet")
  if570_end1674:
.annotate 'line', 993
    find_dynamic_lex $P5131, "$*W"
    unless_null $P5131, fallback1680
    nqp_get_sc_object $P5134, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5133, $P5134
    set $P5132, $P5133["$W"]
    unless_null $P5132, fallback1681
    nqp_get_sc_object $P5135, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5132, $P5135
  fallback1681:
    unless_null $P5132, vivi_5711682
    die "Contextual $*W not found"
    box $P5136, "Contextual $*W not found"
    set $P5132, $P5136
  vivi_5711682:
    set $P5131, $P5132
  fallback1680:
    find_lex $P5137, "$OUTER"
    find_lex $P5141, "$/"
    unless_null $P5141, fallback1683
    nqp_get_sc_object $P5142, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5141, $P5142
  fallback1683:
    set $P5140, $P5141["name"]
    unless_null $P5140, fallback1684
    nqp_get_sc_object $P5143, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5140, $P5143
  fallback1684:
    set $P5139, $P5140["identifier"]
    unless_null $P5139, fallback1685
    nqp_get_sc_object $P5144, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5139, $P5144
  fallback1685:
    set $P5138, $P5139[0]
    unless_null $P5138, fallback1686
    nqp_get_sc_object $P5145, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5138, $P5145
  fallback1686:
    find_dynamic_lex $P5146, "$*PACKAGE"
    unless_null $P5146, fallback1687
    nqp_get_sc_object $P5149, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5148, $P5149
    set $P5147, $P5148["$PACKAGE"]
    unless_null $P5147, fallback1688
    nqp_get_sc_object $P5150, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5147, $P5150
  fallback1688:
    unless_null $P5147, vivi_5721689
    die "Contextual $*PACKAGE not found"
    box $P5151, "Contextual $*PACKAGE not found"
    set $P5147, $P5151
  vivi_5721689:
    set $P5146, $P5147
  fallback1687:
    $P5152 = $P5131."install_lexical_symbol"($P5137, $P5138, $P5146)
    set $P5162, $P5152
    goto if568_end1669
  if568_else1668:
.annotate 'line', 995
.annotate 'line', 996
    find_lex $P5153, "$/"
    $P5154 = $P5153."CURSOR"()
    find_dynamic_lex $P5155, "$*SCOPE"
    unless_null $P5155, fallback1690
    nqp_get_sc_object $P5158, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5157, $P5158
    set $P5156, $P5157["$SCOPE"]
    unless_null $P5156, fallback1691
    nqp_get_sc_object $P5159, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5156, $P5159
  fallback1691:
    unless_null $P5156, vivi_5731692
    die "Contextual $*SCOPE not found"
    box $P5160, "Contextual $*SCOPE not found"
    set $P5156, $P5160
  vivi_5731692:
    set $P5155, $P5156
  fallback1690:
    set $S5008, $P5155
    concat $S5007, $S5008, " scoped packages are not supported"
    $P5161 = $P5154."panic"($S5007)
    set $P5162, $P5161
  if568_end1669:
    set $P5163, $P5162
  if558_end1632:
    .return ($P5163) 
.end
.HLL "nqp"
.namespace []
.sub "role_params" :subid("cuid_109_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1010
    .param pmc _lex_param_0 
    .lex "$*SCOPE", $P101 
    .lex "$*IN_DECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx613_tgt
    .local int rx613_pos
    .local int rx613_off
    .local int rx613_eos
    .local int rx613_rep
    .local pmc rx613_cur
    .local pmc rx613_curclass
    .local pmc rx613_bstack
    .local pmc rx613_cstack
    (rx613_cur, rx613_tgt, rx613_pos, rx613_curclass, rx613_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx613_cur
    length rx613_eos, rx613_tgt
    eq $I19, 1, rx613_restart1743
    gt rx613_pos, rx613_eos, rx613_fail1744
    repr_get_attr_int $I11, self, rx613_curclass, "$!from"
    ne $I11, -1, rxscan614_done1750
    goto rxscan614_scan1749
  rxscan614_loop1748:
    inc rx613_pos
    gt rx613_pos, rx613_eos, rx613_fail1744
    repr_bind_attr_int rx613_cur, rx613_curclass, "$!from", rx613_pos
  rxscan614_scan1749:
    nqp_rxmark rx613_bstack, rxscan614_loop1748, rx613_pos, 0
  rxscan614_done1750:
    repr_bind_attr_int rx613_cur, rx613_curclass, "$!pos", rx613_pos
    $P11 = rx613_cur."ws"()
    repr_get_attr_int $I11, $P11, rx613_curclass, "$!pos"
    lt $I11, 0, rx613_fail1744
    repr_get_attr_int rx613_pos, $P11, rx613_curclass, "$!pos"
    repr_bind_attr_int rx613_cur, rx613_curclass, "$!pos", rx613_pos
    store_lex unicode:"$\x{a2}", rx613_cur
    box $P5003, "my"
    set $P101, $P5003
    repr_bind_attr_int rx613_cur, rx613_curclass, "$!pos", rx613_pos
    $P11 = rx613_cur."ws"()
    repr_get_attr_int $I11, $P11, rx613_curclass, "$!pos"
    lt $I11, 0, rx613_fail1744
    repr_get_attr_int rx613_pos, $P11, rx613_curclass, "$!pos"
    repr_bind_attr_int rx613_cur, rx613_curclass, "$!pos", rx613_pos
    store_lex unicode:"$\x{a2}", rx613_cur
    box $P5004, "variable"
    set $P102, $P5004
    repr_bind_attr_int rx613_cur, rx613_curclass, "$!pos", rx613_pos
    $P11 = rx613_cur."ws"()
    repr_get_attr_int $I11, $P11, rx613_curclass, "$!pos"
    lt $I11, 0, rx613_fail1744
    repr_get_attr_int rx613_pos, $P11, rx613_curclass, "$!pos"
    nqp_rxmark rx613_bstack, rxquantr618_done1755, -1, 0
  rxquantr618_loop1754:
    repr_bind_attr_int rx613_cur, rx613_curclass, "$!pos", rx613_pos
    $P11 = rx613_cur."ws"()
    repr_get_attr_int $I11, $P11, rx613_curclass, "$!pos"
    lt $I11, 0, rx613_fail1744
    repr_get_attr_int rx613_pos, $P11, rx613_curclass, "$!pos"
    repr_bind_attr_int rx613_cur, rx613_curclass, "$!pos", rx613_pos
    $P11 = rx613_cur."variable"()
    repr_get_attr_int $I11, $P11, rx613_curclass, "$!pos"
    lt $I11, 0, rx613_fail1744
    nqp_rxmark rx613_bstack, rxsubrule620_pass1757, -1, 0
  rxsubrule620_pass1757:
    rx613_cstack = rx613_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx613_pos, $P11, rx613_curclass, "$!pos"
    repr_bind_attr_int rx613_cur, rx613_curclass, "$!pos", rx613_pos
    $P11 = rx613_cur."ws"()
    repr_get_attr_int $I11, $P11, rx613_curclass, "$!pos"
    lt $I11, 0, rx613_fail1744
    repr_get_attr_int rx613_pos, $P11, rx613_curclass, "$!pos"
    nqp_rxpeek $I19, rx613_bstack, rxquantr618_done1755
    inc $I19
    inc $I19
    set rx613_rep, rx613_bstack[$I19]
    nqp_rxcommit rx613_bstack, rxquantr618_done1755
    inc rx613_rep
    nqp_rxmark rx613_bstack, rxquantr618_done1755, rx613_pos, rx613_rep
    repr_bind_attr_int rx613_cur, rx613_curclass, "$!pos", rx613_pos
    $P11 = rx613_cur."ws"()
    repr_get_attr_int $I11, $P11, rx613_curclass, "$!pos"
    lt $I11, 0, rx613_fail1744
    repr_get_attr_int rx613_pos, $P11, rx613_curclass, "$!pos"
    add $I11, rx613_pos, 1
    gt $I11, rx613_eos, rx613_fail1744
    substr $S10, rx613_tgt, rx613_pos, 1
    ne $S10, ucs4:",", rx613_fail1744
    add rx613_pos, 1
    repr_bind_attr_int rx613_cur, rx613_curclass, "$!pos", rx613_pos
    $P11 = rx613_cur."ws"()
    repr_get_attr_int $I11, $P11, rx613_curclass, "$!pos"
    lt $I11, 0, rx613_fail1744
    repr_get_attr_int rx613_pos, $P11, rx613_curclass, "$!pos"
    goto rxquantr618_loop1754
  rxquantr618_done1755:
    repr_bind_attr_int rx613_cur, rx613_curclass, "$!pos", rx613_pos
    $P11 = rx613_cur."ws"()
    repr_get_attr_int $I11, $P11, rx613_curclass, "$!pos"
    lt $I11, 0, rx613_fail1744
    repr_get_attr_int rx613_pos, $P11, rx613_curclass, "$!pos"
    rx613_cur."!cursor_pass"(rx613_pos, "role_params", 'backtrack'=>1)
    .return (rx613_cur)
  rx613_restart1743:
    repr_get_attr_obj rx613_cstack, rx613_cur, rx613_curclass, "$!cstack"
  rx613_fail1744:
    unless rx613_bstack, rx613_done1742
    pop $I19, rx613_bstack
    if_null rx613_cstack, rx613_cstack_done1747
    unless rx613_cstack, rx613_cstack_done1747
    dec $I19
    set $P11, rx613_cstack[$I19]
  rx613_cstack_done1747:
    pop rx613_rep, rx613_bstack
    pop rx613_pos, rx613_bstack
    pop $I19, rx613_bstack
    lt rx613_pos, -1, rx613_done1742
    lt rx613_pos, 0, rx613_fail1744
    eq $I19, 0, rx613_fail1744
    nqp_islist $I20, rx613_cstack
    unless $I20, rx613_jump1745
    elements $I18, rx613_bstack
    le $I18, 0, rx613_cut1746
    dec $I18
    set $I18, rx613_bstack[$I18]
  rx613_cut1746:
    assign rx613_cstack, $I18
  rx613_jump1745:
    jump $I19
  rx613_done1742:
    rx613_cur."!cursor_fail"()
    .return (rx613_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator" :subid("cuid_110_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1016
    .param pmc self 
    $P5001 = self."!protoregex"("scope_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_111_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1017
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx625_tgt
    .local int rx625_pos
    .local int rx625_off
    .local int rx625_eos
    .local int rx625_rep
    .local pmc rx625_cur
    .local pmc rx625_curclass
    .local pmc rx625_bstack
    .local pmc rx625_cstack
    (rx625_cur, rx625_tgt, rx625_pos, rx625_curclass, rx625_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx625_cur
    length rx625_eos, rx625_tgt
    eq $I19, 1, rx625_restart1764
    gt rx625_pos, rx625_eos, rx625_fail1765
    repr_get_attr_int $I11, self, rx625_curclass, "$!from"
    ne $I11, -1, rxscan626_done1771
    goto rxscan626_scan1770
  rxscan626_loop1769:
    inc rx625_pos
    gt rx625_pos, rx625_eos, rx625_fail1765
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!from", rx625_pos
  rxscan626_scan1770:
    nqp_rxmark rx625_bstack, rxscan626_loop1769, rx625_pos, 0
  rxscan626_done1771:
    nqp_rxmark rx625_bstack, rxcap627_fail1773, rx625_pos, 0
    add $I11, rx625_pos, 2
    gt $I11, rx625_eos, rx625_fail1765
    substr $S10, rx625_tgt, rx625_pos, 2
    ne $S10, ucs4:"my", rx625_fail1765
    add rx625_pos, 2
    nqp_rxpeek $I19, rx625_bstack, rxcap627_fail1773
    inc $I19
    set $I11, rx625_bstack[$I19]
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx625_pos)
    rx625_cstack = rx625_cur."!cursor_capture"($P11, "sym")
    goto rxcap627_done1772
  rxcap627_fail1773:
    goto rx625_fail1765
  rxcap627_done1772:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."scoped"("my")
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1765
    nqp_rxmark rx625_bstack, rxsubrule628_pass1774, -1, 0
  rxsubrule628_pass1774:
    rx625_cstack = rx625_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    rx625_cur."!cursor_pass"(rx625_pos, "scope_declarator:sym<my>", 'backtrack'=>1)
    .return (rx625_cur)
  rx625_restart1764:
    repr_get_attr_obj rx625_cstack, rx625_cur, rx625_curclass, "$!cstack"
  rx625_fail1765:
    unless rx625_bstack, rx625_done1763
    pop $I19, rx625_bstack
    if_null rx625_cstack, rx625_cstack_done1768
    unless rx625_cstack, rx625_cstack_done1768
    dec $I19
    set $P11, rx625_cstack[$I19]
  rx625_cstack_done1768:
    pop rx625_rep, rx625_bstack
    pop rx625_pos, rx625_bstack
    pop $I19, rx625_bstack
    lt rx625_pos, -1, rx625_done1763
    lt rx625_pos, 0, rx625_fail1765
    eq $I19, 0, rx625_fail1765
    nqp_islist $I20, rx625_cstack
    unless $I20, rx625_jump1766
    elements $I18, rx625_bstack
    le $I18, 0, rx625_cut1767
    dec $I18
    set $I18, rx625_bstack[$I18]
  rx625_cut1767:
    assign rx625_cstack, $I18
  rx625_jump1766:
    jump $I19
  rx625_done1763:
    rx625_cur."!cursor_fail"()
    .return (rx625_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_112_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1018
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx629_tgt
    .local int rx629_pos
    .local int rx629_off
    .local int rx629_eos
    .local int rx629_rep
    .local pmc rx629_cur
    .local pmc rx629_curclass
    .local pmc rx629_bstack
    .local pmc rx629_cstack
    (rx629_cur, rx629_tgt, rx629_pos, rx629_curclass, rx629_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx629_cur
    length rx629_eos, rx629_tgt
    eq $I19, 1, rx629_restart1777
    gt rx629_pos, rx629_eos, rx629_fail1778
    repr_get_attr_int $I11, self, rx629_curclass, "$!from"
    ne $I11, -1, rxscan630_done1784
    goto rxscan630_scan1783
  rxscan630_loop1782:
    inc rx629_pos
    gt rx629_pos, rx629_eos, rx629_fail1778
    repr_bind_attr_int rx629_cur, rx629_curclass, "$!from", rx629_pos
  rxscan630_scan1783:
    nqp_rxmark rx629_bstack, rxscan630_loop1782, rx629_pos, 0
  rxscan630_done1784:
    nqp_rxmark rx629_bstack, rxcap631_fail1786, rx629_pos, 0
    add $I11, rx629_pos, 3
    gt $I11, rx629_eos, rx629_fail1778
    substr $S10, rx629_tgt, rx629_pos, 3
    ne $S10, ucs4:"our", rx629_fail1778
    add rx629_pos, 3
    nqp_rxpeek $I19, rx629_bstack, rxcap631_fail1786
    inc $I19
    set $I11, rx629_bstack[$I19]
    repr_bind_attr_int rx629_cur, rx629_curclass, "$!pos", rx629_pos
    $P11 = rx629_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx629_pos)
    rx629_cstack = rx629_cur."!cursor_capture"($P11, "sym")
    goto rxcap631_done1785
  rxcap631_fail1786:
    goto rx629_fail1778
  rxcap631_done1785:
    repr_bind_attr_int rx629_cur, rx629_curclass, "$!pos", rx629_pos
    $P11 = rx629_cur."scoped"("our")
    repr_get_attr_int $I11, $P11, rx629_curclass, "$!pos"
    lt $I11, 0, rx629_fail1778
    nqp_rxmark rx629_bstack, rxsubrule632_pass1787, -1, 0
  rxsubrule632_pass1787:
    rx629_cstack = rx629_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx629_pos, $P11, rx629_curclass, "$!pos"
    rx629_cur."!cursor_pass"(rx629_pos, "scope_declarator:sym<our>", 'backtrack'=>1)
    .return (rx629_cur)
  rx629_restart1777:
    repr_get_attr_obj rx629_cstack, rx629_cur, rx629_curclass, "$!cstack"
  rx629_fail1778:
    unless rx629_bstack, rx629_done1776
    pop $I19, rx629_bstack
    if_null rx629_cstack, rx629_cstack_done1781
    unless rx629_cstack, rx629_cstack_done1781
    dec $I19
    set $P11, rx629_cstack[$I19]
  rx629_cstack_done1781:
    pop rx629_rep, rx629_bstack
    pop rx629_pos, rx629_bstack
    pop $I19, rx629_bstack
    lt rx629_pos, -1, rx629_done1776
    lt rx629_pos, 0, rx629_fail1778
    eq $I19, 0, rx629_fail1778
    nqp_islist $I20, rx629_cstack
    unless $I20, rx629_jump1779
    elements $I18, rx629_bstack
    le $I18, 0, rx629_cut1780
    dec $I18
    set $I18, rx629_bstack[$I18]
  rx629_cut1780:
    assign rx629_cstack, $I18
  rx629_jump1779:
    jump $I19
  rx629_done1776:
    rx629_cur."!cursor_fail"()
    .return (rx629_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_113_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1019
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx633_tgt
    .local int rx633_pos
    .local int rx633_off
    .local int rx633_eos
    .local int rx633_rep
    .local pmc rx633_cur
    .local pmc rx633_curclass
    .local pmc rx633_bstack
    .local pmc rx633_cstack
    (rx633_cur, rx633_tgt, rx633_pos, rx633_curclass, rx633_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx633_cur
    length rx633_eos, rx633_tgt
    eq $I19, 1, rx633_restart1790
    gt rx633_pos, rx633_eos, rx633_fail1791
    repr_get_attr_int $I11, self, rx633_curclass, "$!from"
    ne $I11, -1, rxscan634_done1797
    goto rxscan634_scan1796
  rxscan634_loop1795:
    inc rx633_pos
    gt rx633_pos, rx633_eos, rx633_fail1791
    repr_bind_attr_int rx633_cur, rx633_curclass, "$!from", rx633_pos
  rxscan634_scan1796:
    nqp_rxmark rx633_bstack, rxscan634_loop1795, rx633_pos, 0
  rxscan634_done1797:
    nqp_rxmark rx633_bstack, rxcap635_fail1799, rx633_pos, 0
    add $I11, rx633_pos, 3
    gt $I11, rx633_eos, rx633_fail1791
    substr $S10, rx633_tgt, rx633_pos, 3
    ne $S10, ucs4:"has", rx633_fail1791
    add rx633_pos, 3
    nqp_rxpeek $I19, rx633_bstack, rxcap635_fail1799
    inc $I19
    set $I11, rx633_bstack[$I19]
    repr_bind_attr_int rx633_cur, rx633_curclass, "$!pos", rx633_pos
    $P11 = rx633_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx633_pos)
    rx633_cstack = rx633_cur."!cursor_capture"($P11, "sym")
    goto rxcap635_done1798
  rxcap635_fail1799:
    goto rx633_fail1791
  rxcap635_done1798:
    repr_bind_attr_int rx633_cur, rx633_curclass, "$!pos", rx633_pos
    $P11 = rx633_cur."scoped"("has")
    repr_get_attr_int $I11, $P11, rx633_curclass, "$!pos"
    lt $I11, 0, rx633_fail1791
    nqp_rxmark rx633_bstack, rxsubrule636_pass1800, -1, 0
  rxsubrule636_pass1800:
    rx633_cstack = rx633_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx633_pos, $P11, rx633_curclass, "$!pos"
    rx633_cur."!cursor_pass"(rx633_pos, "scope_declarator:sym<has>", 'backtrack'=>1)
    .return (rx633_cur)
  rx633_restart1790:
    repr_get_attr_obj rx633_cstack, rx633_cur, rx633_curclass, "$!cstack"
  rx633_fail1791:
    unless rx633_bstack, rx633_done1789
    pop $I19, rx633_bstack
    if_null rx633_cstack, rx633_cstack_done1794
    unless rx633_cstack, rx633_cstack_done1794
    dec $I19
    set $P11, rx633_cstack[$I19]
  rx633_cstack_done1794:
    pop rx633_rep, rx633_bstack
    pop rx633_pos, rx633_bstack
    pop $I19, rx633_bstack
    lt rx633_pos, -1, rx633_done1789
    lt rx633_pos, 0, rx633_fail1791
    eq $I19, 0, rx633_fail1791
    nqp_islist $I20, rx633_cstack
    unless $I20, rx633_jump1792
    elements $I18, rx633_bstack
    le $I18, 0, rx633_cut1793
    dec $I18
    set $I18, rx633_bstack[$I18]
  rx633_cut1793:
    assign rx633_cstack, $I18
  rx633_jump1792:
    jump $I19
  rx633_done1789:
    rx633_cur."!cursor_fail"()
    .return (rx633_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_114_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1021
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .lex "$*SCOPE", _lex_param_1 
    .local pmc self 
    set self, _lex_param_0
    .local string rx637_tgt
    .local int rx637_pos
    .local int rx637_off
    .local int rx637_eos
    .local int rx637_rep
    .local pmc rx637_cur
    .local pmc rx637_curclass
    .local pmc rx637_bstack
    .local pmc rx637_cstack
    (rx637_cur, rx637_tgt, rx637_pos, rx637_curclass, rx637_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx637_cur
    length rx637_eos, rx637_tgt
    eq $I19, 1, rx637_restart1803
    gt rx637_pos, rx637_eos, rx637_fail1804
    repr_get_attr_int $I11, self, rx637_curclass, "$!from"
    ne $I11, -1, rxscan638_done1810
    goto rxscan638_scan1809
  rxscan638_loop1808:
    inc rx637_pos
    gt rx637_pos, rx637_eos, rx637_fail1804
    repr_bind_attr_int rx637_cur, rx637_curclass, "$!from", rx637_pos
  rxscan638_scan1809:
    nqp_rxmark rx637_bstack, rxscan638_loop1808, rx637_pos, 0
  rxscan638_done1810:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt639_01812
    nqp_push_label $P11, alt639_11816
    nqp_push_label $P11, alt639_21820
    nqp_rxmark rx637_bstack, alt639_end1811, -1, 0
    rx637_cur."!alt"(rx637_pos, "alt_nfa__21_1351203237.207", $P11)
    goto rx637_fail1804
  alt639_01812:
    repr_bind_attr_int rx637_cur, rx637_curclass, "$!pos", rx637_pos
    $P11 = rx637_cur."ws"()
    repr_get_attr_int $I11, $P11, rx637_curclass, "$!pos"
    lt $I11, 0, rx637_fail1804
    repr_get_attr_int rx637_pos, $P11, rx637_curclass, "$!pos"
    repr_bind_attr_int rx637_cur, rx637_curclass, "$!pos", rx637_pos
    $P11 = rx637_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx637_curclass, "$!pos"
    lt $I11, 0, rx637_fail1804
    nqp_rxmark rx637_bstack, rxsubrule641_pass1814, -1, 0
  rxsubrule641_pass1814:
    rx637_cstack = rx637_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx637_pos, $P11, rx637_curclass, "$!pos"
    repr_bind_attr_int rx637_cur, rx637_curclass, "$!pos", rx637_pos
    $P11 = rx637_cur."ws"()
    repr_get_attr_int $I11, $P11, rx637_curclass, "$!pos"
    lt $I11, 0, rx637_fail1804
    repr_get_attr_int rx637_pos, $P11, rx637_curclass, "$!pos"
    goto alt639_end1811
  alt639_11816:
    repr_bind_attr_int rx637_cur, rx637_curclass, "$!pos", rx637_pos
    $P11 = rx637_cur."ws"()
    repr_get_attr_int $I11, $P11, rx637_curclass, "$!pos"
    lt $I11, 0, rx637_fail1804
    repr_get_attr_int rx637_pos, $P11, rx637_curclass, "$!pos"
    repr_bind_attr_int rx637_cur, rx637_curclass, "$!pos", rx637_pos
    $P11 = rx637_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx637_curclass, "$!pos"
    lt $I11, 0, rx637_fail1804
    nqp_rxmark rx637_bstack, rxsubrule644_pass1818, -1, 0
  rxsubrule644_pass1818:
    rx637_cstack = rx637_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx637_pos, $P11, rx637_curclass, "$!pos"
    repr_bind_attr_int rx637_cur, rx637_curclass, "$!pos", rx637_pos
    $P11 = rx637_cur."ws"()
    repr_get_attr_int $I11, $P11, rx637_curclass, "$!pos"
    lt $I11, 0, rx637_fail1804
    repr_get_attr_int rx637_pos, $P11, rx637_curclass, "$!pos"
    goto alt639_end1811
  alt639_21820:
    repr_bind_attr_int rx637_cur, rx637_curclass, "$!pos", rx637_pos
    $P11 = rx637_cur."ws"()
    repr_get_attr_int $I11, $P11, rx637_curclass, "$!pos"
    lt $I11, 0, rx637_fail1804
    repr_get_attr_int rx637_pos, $P11, rx637_curclass, "$!pos"
    repr_bind_attr_int rx637_cur, rx637_curclass, "$!pos", rx637_pos
    $P11 = rx637_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx637_curclass, "$!pos"
    lt $I11, 0, rx637_fail1804
    nqp_rxmark rx637_bstack, rxsubrule647_pass1822, -1, 0
  rxsubrule647_pass1822:
    rx637_cstack = rx637_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx637_pos, $P11, rx637_curclass, "$!pos"
    repr_bind_attr_int rx637_cur, rx637_curclass, "$!pos", rx637_pos
    $P11 = rx637_cur."ws"()
    repr_get_attr_int $I11, $P11, rx637_curclass, "$!pos"
    lt $I11, 0, rx637_fail1804
    repr_get_attr_int rx637_pos, $P11, rx637_curclass, "$!pos"
    goto alt639_end1811
  alt639_end1811:
    rx637_cur."!cursor_pass"(rx637_pos, "scoped", 'backtrack'=>1)
    .return (rx637_cur)
  rx637_restart1803:
    repr_get_attr_obj rx637_cstack, rx637_cur, rx637_curclass, "$!cstack"
  rx637_fail1804:
    unless rx637_bstack, rx637_done1802
    pop $I19, rx637_bstack
    if_null rx637_cstack, rx637_cstack_done1807
    unless rx637_cstack, rx637_cstack_done1807
    dec $I19
    set $P11, rx637_cstack[$I19]
  rx637_cstack_done1807:
    pop rx637_rep, rx637_bstack
    pop rx637_pos, rx637_bstack
    pop $I19, rx637_bstack
    lt rx637_pos, -1, rx637_done1802
    lt rx637_pos, 0, rx637_fail1804
    eq $I19, 0, rx637_fail1804
    nqp_islist $I20, rx637_cstack
    unless $I20, rx637_jump1805
    elements $I18, rx637_bstack
    le $I18, 0, rx637_cut1806
    dec $I18
    set $I18, rx637_bstack[$I18]
  rx637_cut1806:
    assign rx637_cstack, $I18
  rx637_jump1805:
    jump $I19
  rx637_done1802:
    rx637_cur."!cursor_fail"()
    .return (rx637_cur) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_115_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1027
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_398_1351203235.318' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx649_tgt
    .local int rx649_pos
    .local int rx649_off
    .local int rx649_eos
    .local int rx649_rep
    .local pmc rx649_cur
    .local pmc rx649_curclass
    .local pmc rx649_bstack
    .local pmc rx649_cstack
    (rx649_cur, rx649_tgt, rx649_pos, rx649_curclass, rx649_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx649_cur
    length rx649_eos, rx649_tgt
    eq $I19, 1, rx649_restart1826
    gt rx649_pos, rx649_eos, rx649_fail1827
    repr_get_attr_int $I11, self, rx649_curclass, "$!from"
    ne $I11, -1, rxscan650_done1833
    goto rxscan650_scan1832
  rxscan650_loop1831:
    inc rx649_pos
    gt rx649_pos, rx649_eos, rx649_fail1827
    repr_bind_attr_int rx649_cur, rx649_curclass, "$!from", rx649_pos
  rxscan650_scan1832:
    nqp_rxmark rx649_bstack, rxscan650_loop1831, rx649_pos, 0
  rxscan650_done1833:
    repr_bind_attr_int rx649_cur, rx649_curclass, "$!pos", rx649_pos
    $P11 = rx649_cur."name"()
    repr_get_attr_int $I11, $P11, rx649_curclass, "$!pos"
    lt $I11, 0, rx649_fail1827
    nqp_rxmark rx649_bstack, rxsubrule651_pass1834, -1, 0
  rxsubrule651_pass1834:
    rx649_cstack = rx649_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx649_pos, $P11, rx649_curclass, "$!pos"
    repr_bind_attr_int rx649_cur, rx649_curclass, "$!pos", rx649_pos
    store_lex unicode:"$\x{a2}", rx649_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_398_1351203235.318' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx649_fail1827
    rx649_cur."!cursor_pass"(rx649_pos, "typename", 'backtrack'=>1)
    .return (rx649_cur)
  rx649_restart1826:
    repr_get_attr_obj rx649_cstack, rx649_cur, rx649_curclass, "$!cstack"
  rx649_fail1827:
    unless rx649_bstack, rx649_done1825
    pop $I19, rx649_bstack
    if_null rx649_cstack, rx649_cstack_done1830
    unless rx649_cstack, rx649_cstack_done1830
    dec $I19
    set $P11, rx649_cstack[$I19]
  rx649_cstack_done1830:
    pop rx649_rep, rx649_bstack
    pop rx649_pos, rx649_bstack
    pop $I19, rx649_bstack
    lt rx649_pos, -1, rx649_done1825
    lt rx649_pos, 0, rx649_fail1827
    eq $I19, 0, rx649_fail1827
    nqp_islist $I20, rx649_cstack
    unless $I20, rx649_jump1828
    elements $I18, rx649_bstack
    le $I18, 0, rx649_cut1829
    dec $I18
    set $I18, rx649_bstack[$I18]
  rx649_cut1829:
    assign rx649_cstack, $I18
  rx649_jump1828:
    jump $I19
  rx649_done1825:
    rx649_cur."!cursor_fail"()
    .return (rx649_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_398_1351203235.318") :anon :lex :outer("cuid_115_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1029

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback1835
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback1836
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5005
  fallback1836:
    unless_null $P5002, vivi_6521837
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_6521837:
    set $P5001, $P5002
  fallback1835:
    find_lex $P5007, "$/"
    find_lex $P5010, "$/"
    unless_null $P5010, fallback1838
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5011
  fallback1838:
    set $P5009, $P5010["name"]
    unless_null $P5009, fallback1839
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5012
  fallback1839:
    set $P5008, $P5009["identifier"]
    unless_null $P5008, fallback1840
    nqp_get_sc_object $P5013, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5013
  fallback1840:
    $P5014 = $P5001."known_sym"($P5007, $P5008)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_116_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1032
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx653_tgt
    .local int rx653_pos
    .local int rx653_off
    .local int rx653_eos
    .local int rx653_rep
    .local pmc rx653_cur
    .local pmc rx653_curclass
    .local pmc rx653_bstack
    .local pmc rx653_cstack
    (rx653_cur, rx653_tgt, rx653_pos, rx653_curclass, rx653_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx653_cur
    length rx653_eos, rx653_tgt
    eq $I19, 1, rx653_restart1843
    gt rx653_pos, rx653_eos, rx653_fail1844
    repr_get_attr_int $I11, self, rx653_curclass, "$!from"
    ne $I11, -1, rxscan654_done1850
    goto rxscan654_scan1849
  rxscan654_loop1848:
    inc rx653_pos
    gt rx653_pos, rx653_eos, rx653_fail1844
    repr_bind_attr_int rx653_cur, rx653_curclass, "$!from", rx653_pos
  rxscan654_scan1849:
    nqp_rxmark rx653_bstack, rxscan654_loop1848, rx653_pos, 0
  rxscan654_done1850:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt655_01852
    nqp_push_label $P11, alt655_11854
    nqp_rxmark rx653_bstack, alt655_end1851, -1, 0
    rx653_cur."!alt"(rx653_pos, "alt_nfa__22_1351203237.221", $P11)
    goto rx653_fail1844
  alt655_01852:
    repr_bind_attr_int rx653_cur, rx653_curclass, "$!pos", rx653_pos
    $P11 = rx653_cur."variable_declarator"()
    repr_get_attr_int $I11, $P11, rx653_curclass, "$!pos"
    lt $I11, 0, rx653_fail1844
    nqp_rxmark rx653_bstack, rxsubrule656_pass1853, -1, 0
  rxsubrule656_pass1853:
    rx653_cstack = rx653_cur."!cursor_capture"($P11, "variable_declarator")
    repr_get_attr_int rx653_pos, $P11, rx653_curclass, "$!pos"
    goto alt655_end1851
  alt655_11854:
    repr_bind_attr_int rx653_cur, rx653_curclass, "$!pos", rx653_pos
    $P11 = rx653_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx653_curclass, "$!pos"
    lt $I11, 0, rx653_fail1844
    nqp_rxmark rx653_bstack, rxsubrule657_pass1855, -1, 0
  rxsubrule657_pass1855:
    rx653_cstack = rx653_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx653_pos, $P11, rx653_curclass, "$!pos"
    goto alt655_end1851
  alt655_end1851:
    rx653_cur."!cursor_pass"(rx653_pos, "declarator", 'backtrack'=>1)
    .return (rx653_cur)
  rx653_restart1843:
    repr_get_attr_obj rx653_cstack, rx653_cur, rx653_curclass, "$!cstack"
  rx653_fail1844:
    unless rx653_bstack, rx653_done1842
    pop $I19, rx653_bstack
    if_null rx653_cstack, rx653_cstack_done1847
    unless rx653_cstack, rx653_cstack_done1847
    dec $I19
    set $P11, rx653_cstack[$I19]
  rx653_cstack_done1847:
    pop rx653_rep, rx653_bstack
    pop rx653_pos, rx653_bstack
    pop $I19, rx653_bstack
    lt rx653_pos, -1, rx653_done1842
    lt rx653_pos, 0, rx653_fail1844
    eq $I19, 0, rx653_fail1844
    nqp_islist $I20, rx653_cstack
    unless $I20, rx653_jump1845
    elements $I18, rx653_bstack
    le $I18, 0, rx653_cut1846
    dec $I18
    set $I18, rx653_bstack[$I18]
  rx653_cut1846:
    assign rx653_cstack, $I18
  rx653_jump1845:
    jump $I19
  rx653_done1842:
    rx653_cur."!cursor_fail"()
    .return (rx653_cur) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_117_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1037
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_399_1351203235.318' 
    capture_lex $P5006 
    .lex "$*IN_DECL", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx658_tgt
    .local int rx658_pos
    .local int rx658_off
    .local int rx658_eos
    .local int rx658_rep
    .local pmc rx658_cur
    .local pmc rx658_curclass
    .local pmc rx658_bstack
    .local pmc rx658_cstack
    (rx658_cur, rx658_tgt, rx658_pos, rx658_curclass, rx658_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx658_cur
    length rx658_eos, rx658_tgt
    eq $I19, 1, rx658_restart1858
    gt rx658_pos, rx658_eos, rx658_fail1859
    repr_get_attr_int $I11, self, rx658_curclass, "$!from"
    ne $I11, -1, rxscan659_done1865
    goto rxscan659_scan1864
  rxscan659_loop1863:
    inc rx658_pos
    gt rx658_pos, rx658_eos, rx658_fail1859
    repr_bind_attr_int rx658_cur, rx658_curclass, "$!from", rx658_pos
  rxscan659_scan1864:
    nqp_rxmark rx658_bstack, rxscan659_loop1863, rx658_pos, 0
  rxscan659_done1865:
    repr_bind_attr_int rx658_cur, rx658_curclass, "$!pos", rx658_pos
    $P11 = rx658_cur."ws"()
    repr_get_attr_int $I11, $P11, rx658_curclass, "$!pos"
    lt $I11, 0, rx658_fail1859
    repr_get_attr_int rx658_pos, $P11, rx658_curclass, "$!pos"
    nqp_rxmark rx658_bstack, rxquantr661_done1868, rx658_pos, 0
  rxquantr661_loop1867:
    repr_bind_attr_int rx658_cur, rx658_curclass, "$!pos", rx658_pos
    $P11 = rx658_cur."typename"()
    repr_get_attr_int $I11, $P11, rx658_curclass, "$!pos"
    lt $I11, 0, rx658_fail1859
    goto rxsubrule662_pass1869
  rxsubrule662_back1870:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx658_curclass, "$!pos"
    lt $I11, 0, rx658_fail1859
  rxsubrule662_pass1869:
    rx658_cstack = rx658_cur."!cursor_capture"($P11, "typename")
    set_addr $I11, rxsubrule662_back1870
    push rx658_bstack, $I11
    push rx658_bstack, 0
    push rx658_bstack, rx658_pos
    elements $I11, rx658_cstack
    push rx658_bstack, $I11
    repr_get_attr_int rx658_pos, $P11, rx658_curclass, "$!pos"
    nqp_rxpeek $I19, rx658_bstack, rxquantr661_done1868
    inc $I19
    inc $I19
    set rx658_rep, rx658_bstack[$I19]
    nqp_rxcommit rx658_bstack, rxquantr661_done1868
    inc rx658_rep
  rxquantr661_done1868:
    repr_bind_attr_int rx658_cur, rx658_curclass, "$!pos", rx658_pos
    $P11 = rx658_cur."ws"()
    repr_get_attr_int $I11, $P11, rx658_curclass, "$!pos"
    lt $I11, 0, rx658_fail1859
    repr_get_attr_int rx658_pos, $P11, rx658_curclass, "$!pos"
    repr_bind_attr_int rx658_cur, rx658_curclass, "$!pos", rx658_pos
    store_lex unicode:"$\x{a2}", rx658_cur
    box $P5002, "variable"
    set $P101, $P5002
    repr_bind_attr_int rx658_cur, rx658_curclass, "$!pos", rx658_pos
    $P11 = rx658_cur."ws"()
    repr_get_attr_int $I11, $P11, rx658_curclass, "$!pos"
    lt $I11, 0, rx658_fail1859
    repr_get_attr_int rx658_pos, $P11, rx658_curclass, "$!pos"
    repr_bind_attr_int rx658_cur, rx658_curclass, "$!pos", rx658_pos
    $P11 = rx658_cur."variable"()
    repr_get_attr_int $I11, $P11, rx658_curclass, "$!pos"
    lt $I11, 0, rx658_fail1859
    nqp_rxmark rx658_bstack, rxsubrule665_pass1873, -1, 0
  rxsubrule665_pass1873:
    rx658_cstack = rx658_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx658_pos, $P11, rx658_curclass, "$!pos"
    repr_bind_attr_int rx658_cur, rx658_curclass, "$!pos", rx658_pos
    $P11 = rx658_cur."ws"()
    repr_get_attr_int $I11, $P11, rx658_curclass, "$!pos"
    lt $I11, 0, rx658_fail1859
    repr_get_attr_int rx658_pos, $P11, rx658_curclass, "$!pos"
    repr_bind_attr_int rx658_cur, rx658_curclass, "$!pos", rx658_pos
    store_lex unicode:"$\x{a2}", rx658_cur
    $P5003 = $P102."MATCH"()
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_399_1351203235.318' 
    capture_lex $P5004
    $P5005 = $P5004()
    repr_bind_attr_int rx658_cur, rx658_curclass, "$!pos", rx658_pos
    $P11 = rx658_cur."ws"()
    repr_get_attr_int $I11, $P11, rx658_curclass, "$!pos"
    lt $I11, 0, rx658_fail1859
    repr_get_attr_int rx658_pos, $P11, rx658_curclass, "$!pos"
    nqp_rxmark rx658_bstack, rxquantr668_done1877, rx658_pos, 0
  rxquantr668_loop1876:
    repr_bind_attr_int rx658_cur, rx658_curclass, "$!pos", rx658_pos
    $P11 = rx658_cur."trait"()
    repr_get_attr_int $I11, $P11, rx658_curclass, "$!pos"
    lt $I11, 0, rx658_fail1859
    goto rxsubrule669_pass1878
  rxsubrule669_back1879:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx658_curclass, "$!pos"
    lt $I11, 0, rx658_fail1859
  rxsubrule669_pass1878:
    rx658_cstack = rx658_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule669_back1879
    push rx658_bstack, $I11
    push rx658_bstack, 0
    push rx658_bstack, rx658_pos
    elements $I11, rx658_cstack
    push rx658_bstack, $I11
    repr_get_attr_int rx658_pos, $P11, rx658_curclass, "$!pos"
    nqp_rxpeek $I19, rx658_bstack, rxquantr668_done1877
    inc $I19
    inc $I19
    set rx658_rep, rx658_bstack[$I19]
    nqp_rxcommit rx658_bstack, rxquantr668_done1877
    inc rx658_rep
    nqp_rxmark rx658_bstack, rxquantr668_done1877, rx658_pos, rx658_rep
    goto rxquantr668_loop1876
  rxquantr668_done1877:
    repr_bind_attr_int rx658_cur, rx658_curclass, "$!pos", rx658_pos
    $P11 = rx658_cur."ws"()
    repr_get_attr_int $I11, $P11, rx658_curclass, "$!pos"
    lt $I11, 0, rx658_fail1859
    repr_get_attr_int rx658_pos, $P11, rx658_curclass, "$!pos"
    rx658_cur."!cursor_pass"(rx658_pos, "variable_declarator", 'backtrack'=>1)
    .return (rx658_cur)
  rx658_restart1858:
    repr_get_attr_obj rx658_cstack, rx658_cur, rx658_curclass, "$!cstack"
  rx658_fail1859:
    unless rx658_bstack, rx658_done1857
    pop $I19, rx658_bstack
    if_null rx658_cstack, rx658_cstack_done1862
    unless rx658_cstack, rx658_cstack_done1862
    dec $I19
    set $P11, rx658_cstack[$I19]
  rx658_cstack_done1862:
    pop rx658_rep, rx658_bstack
    pop rx658_pos, rx658_bstack
    pop $I19, rx658_bstack
    lt rx658_pos, -1, rx658_done1857
    lt rx658_pos, 0, rx658_fail1859
    eq $I19, 0, rx658_fail1859
    nqp_islist $I20, rx658_cstack
    unless $I20, rx658_jump1860
    elements $I18, rx658_bstack
    le $I18, 0, rx658_cut1861
    dec $I18
    set $I18, rx658_bstack[$I18]
  rx658_cut1861:
    assign rx658_cstack, $I18
  rx658_jump1860:
    jump $I19
  rx658_done1857:
    rx658_cur."!cursor_fail"()
    .return (rx658_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_399_1351203235.318") :anon :lex :outer("cuid_117_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1041

    box $P5001, 0
    store_dynamic_lex "$*IN_DECL", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator" :subid("cuid_118_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1045
    .param pmc self 
    $P5001 = self."!protoregex"("routine_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_119_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1046
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx671_tgt
    .local int rx671_pos
    .local int rx671_off
    .local int rx671_eos
    .local int rx671_rep
    .local pmc rx671_cur
    .local pmc rx671_curclass
    .local pmc rx671_bstack
    .local pmc rx671_cstack
    (rx671_cur, rx671_tgt, rx671_pos, rx671_curclass, rx671_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx671_cur
    length rx671_eos, rx671_tgt
    eq $I19, 1, rx671_restart1883
    gt rx671_pos, rx671_eos, rx671_fail1884
    repr_get_attr_int $I11, self, rx671_curclass, "$!from"
    ne $I11, -1, rxscan672_done1890
    goto rxscan672_scan1889
  rxscan672_loop1888:
    inc rx671_pos
    gt rx671_pos, rx671_eos, rx671_fail1884
    repr_bind_attr_int rx671_cur, rx671_curclass, "$!from", rx671_pos
  rxscan672_scan1889:
    nqp_rxmark rx671_bstack, rxscan672_loop1888, rx671_pos, 0
  rxscan672_done1890:
    nqp_rxmark rx671_bstack, rxcap673_fail1892, rx671_pos, 0
    add $I11, rx671_pos, 3
    gt $I11, rx671_eos, rx671_fail1884
    substr $S10, rx671_tgt, rx671_pos, 3
    ne $S10, ucs4:"sub", rx671_fail1884
    add rx671_pos, 3
    nqp_rxpeek $I19, rx671_bstack, rxcap673_fail1892
    inc $I19
    set $I11, rx671_bstack[$I19]
    repr_bind_attr_int rx671_cur, rx671_curclass, "$!pos", rx671_pos
    $P11 = rx671_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx671_pos)
    rx671_cstack = rx671_cur."!cursor_capture"($P11, "sym")
    goto rxcap673_done1891
  rxcap673_fail1892:
    goto rx671_fail1884
  rxcap673_done1891:
    repr_bind_attr_int rx671_cur, rx671_curclass, "$!pos", rx671_pos
    $P11 = rx671_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx671_curclass, "$!pos"
    lt $I11, 0, rx671_fail1884
    nqp_rxmark rx671_bstack, rxsubrule674_pass1893, -1, 0
  rxsubrule674_pass1893:
    rx671_cstack = rx671_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx671_pos, $P11, rx671_curclass, "$!pos"
    rx671_cur."!cursor_pass"(rx671_pos, "routine_declarator:sym<sub>", 'backtrack'=>1)
    .return (rx671_cur)
  rx671_restart1883:
    repr_get_attr_obj rx671_cstack, rx671_cur, rx671_curclass, "$!cstack"
  rx671_fail1884:
    unless rx671_bstack, rx671_done1882
    pop $I19, rx671_bstack
    if_null rx671_cstack, rx671_cstack_done1887
    unless rx671_cstack, rx671_cstack_done1887
    dec $I19
    set $P11, rx671_cstack[$I19]
  rx671_cstack_done1887:
    pop rx671_rep, rx671_bstack
    pop rx671_pos, rx671_bstack
    pop $I19, rx671_bstack
    lt rx671_pos, -1, rx671_done1882
    lt rx671_pos, 0, rx671_fail1884
    eq $I19, 0, rx671_fail1884
    nqp_islist $I20, rx671_cstack
    unless $I20, rx671_jump1885
    elements $I18, rx671_bstack
    le $I18, 0, rx671_cut1886
    dec $I18
    set $I18, rx671_bstack[$I18]
  rx671_cut1886:
    assign rx671_cstack, $I18
  rx671_jump1885:
    jump $I19
  rx671_done1882:
    rx671_cur."!cursor_fail"()
    .return (rx671_cur) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_120_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1047
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx675_tgt
    .local int rx675_pos
    .local int rx675_off
    .local int rx675_eos
    .local int rx675_rep
    .local pmc rx675_cur
    .local pmc rx675_curclass
    .local pmc rx675_bstack
    .local pmc rx675_cstack
    (rx675_cur, rx675_tgt, rx675_pos, rx675_curclass, rx675_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx675_cur
    length rx675_eos, rx675_tgt
    eq $I19, 1, rx675_restart1896
    gt rx675_pos, rx675_eos, rx675_fail1897
    repr_get_attr_int $I11, self, rx675_curclass, "$!from"
    ne $I11, -1, rxscan676_done1903
    goto rxscan676_scan1902
  rxscan676_loop1901:
    inc rx675_pos
    gt rx675_pos, rx675_eos, rx675_fail1897
    repr_bind_attr_int rx675_cur, rx675_curclass, "$!from", rx675_pos
  rxscan676_scan1902:
    nqp_rxmark rx675_bstack, rxscan676_loop1901, rx675_pos, 0
  rxscan676_done1903:
    nqp_rxmark rx675_bstack, rxcap677_fail1905, rx675_pos, 0
    add $I11, rx675_pos, 6
    gt $I11, rx675_eos, rx675_fail1897
    substr $S10, rx675_tgt, rx675_pos, 6
    ne $S10, ucs4:"method", rx675_fail1897
    add rx675_pos, 6
    nqp_rxpeek $I19, rx675_bstack, rxcap677_fail1905
    inc $I19
    set $I11, rx675_bstack[$I19]
    repr_bind_attr_int rx675_cur, rx675_curclass, "$!pos", rx675_pos
    $P11 = rx675_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx675_pos)
    rx675_cstack = rx675_cur."!cursor_capture"($P11, "sym")
    goto rxcap677_done1904
  rxcap677_fail1905:
    goto rx675_fail1897
  rxcap677_done1904:
    repr_bind_attr_int rx675_cur, rx675_curclass, "$!pos", rx675_pos
    $P11 = rx675_cur."method_def"()
    repr_get_attr_int $I11, $P11, rx675_curclass, "$!pos"
    lt $I11, 0, rx675_fail1897
    nqp_rxmark rx675_bstack, rxsubrule678_pass1906, -1, 0
  rxsubrule678_pass1906:
    rx675_cstack = rx675_cur."!cursor_capture"($P11, "method_def")
    repr_get_attr_int rx675_pos, $P11, rx675_curclass, "$!pos"
    rx675_cur."!cursor_pass"(rx675_pos, "routine_declarator:sym<method>", 'backtrack'=>1)
    .return (rx675_cur)
  rx675_restart1896:
    repr_get_attr_obj rx675_cstack, rx675_cur, rx675_curclass, "$!cstack"
  rx675_fail1897:
    unless rx675_bstack, rx675_done1895
    pop $I19, rx675_bstack
    if_null rx675_cstack, rx675_cstack_done1900
    unless rx675_cstack, rx675_cstack_done1900
    dec $I19
    set $P11, rx675_cstack[$I19]
  rx675_cstack_done1900:
    pop rx675_rep, rx675_bstack
    pop rx675_pos, rx675_bstack
    pop $I19, rx675_bstack
    lt rx675_pos, -1, rx675_done1895
    lt rx675_pos, 0, rx675_fail1897
    eq $I19, 0, rx675_fail1897
    nqp_islist $I20, rx675_cstack
    unless $I20, rx675_jump1898
    elements $I18, rx675_bstack
    le $I18, 0, rx675_cut1899
    dec $I18
    set $I18, rx675_bstack[$I18]
  rx675_cut1899:
    assign rx675_cstack, $I18
  rx675_jump1898:
    jump $I19
  rx675_done1895:
    rx675_cur."!cursor_fail"()
    .return (rx675_cur) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_121_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1049
    .param pmc _lex_param_0 
    .lex "$*RETURN_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx679_tgt
    .local int rx679_pos
    .local int rx679_off
    .local int rx679_eos
    .local int rx679_rep
    .local pmc rx679_cur
    .local pmc rx679_curclass
    .local pmc rx679_bstack
    .local pmc rx679_cstack
    (rx679_cur, rx679_tgt, rx679_pos, rx679_curclass, rx679_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx679_cur
    length rx679_eos, rx679_tgt
    eq $I19, 1, rx679_restart1909
    gt rx679_pos, rx679_eos, rx679_fail1910
    repr_get_attr_int $I11, self, rx679_curclass, "$!from"
    ne $I11, -1, rxscan680_done1916
    goto rxscan680_scan1915
  rxscan680_loop1914:
    inc rx679_pos
    gt rx679_pos, rx679_eos, rx679_fail1910
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!from", rx679_pos
  rxscan680_scan1915:
    nqp_rxmark rx679_bstack, rxscan680_loop1914, rx679_pos, 0
  rxscan680_done1916:
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."ws"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    store_lex unicode:"$\x{a2}", rx679_cur
    box $P5002, 0
    set $P101, $P5002
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."ws"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    nqp_rxmark rx679_bstack, rxquantr683_done1920, rx679_pos, 0
  rxquantr683_loop1919:
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."ws"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    nqp_rxmark rx679_bstack, rxcap685_fail1923, rx679_pos, 0
    nqp_rxmark rx679_bstack, rxquantr686_done1925, rx679_pos, 0
  rxquantr686_loop1924:
    add $I11, rx679_pos, 1
    gt $I11, rx679_eos, rx679_fail1910
    substr $S10, rx679_tgt, rx679_pos, 1
    ne $S10, ucs4:"&", rx679_fail1910
    add rx679_pos, 1
    nqp_rxpeek $I19, rx679_bstack, rxquantr686_done1925
    inc $I19
    inc $I19
    set rx679_rep, rx679_bstack[$I19]
    nqp_rxcommit rx679_bstack, rxquantr686_done1925
    inc rx679_rep
  rxquantr686_done1925:
    nqp_rxpeek $I19, rx679_bstack, rxcap685_fail1923
    inc $I19
    set $I11, rx679_bstack[$I19]
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx679_pos)
    rx679_cstack = rx679_cur."!cursor_capture"($P11, "sigil")
    goto rxcap685_done1922
  rxcap685_fail1923:
    goto rx679_fail1910
  rxcap685_done1922:
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    nqp_rxmark rx679_bstack, rxsubrule687_pass1926, -1, 0
  rxsubrule687_pass1926:
    rx679_cstack = rx679_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."ws"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    nqp_rxpeek $I19, rx679_bstack, rxquantr683_done1920
    inc $I19
    inc $I19
    set rx679_rep, rx679_bstack[$I19]
    nqp_rxcommit rx679_bstack, rxquantr683_done1920
    inc rx679_rep
  rxquantr683_done1920:
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."ws"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."ws"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
  alt692_01932:
    nqp_rxmark rx679_bstack, alt692_11938, rx679_pos, 0
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."ws"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    add $I11, rx679_pos, 1
    gt $I11, rx679_eos, rx679_fail1910
    substr $S10, rx679_tgt, rx679_pos, 1
    ne $S10, ucs4:"(", rx679_fail1910
    add rx679_pos, 1
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."ws"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."signature"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    nqp_rxmark rx679_bstack, rxsubrule695_pass1935, -1, 0
  rxsubrule695_pass1935:
    rx679_cstack = rx679_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."ws"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    add $I11, rx679_pos, 1
    gt $I11, rx679_eos, rx679_fail1910
    substr $S10, rx679_tgt, rx679_pos, 1
    ne $S10, ucs4:")", rx679_fail1910
    add rx679_pos, 1
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."ws"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    goto alt692_end1931
  alt692_11938:
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."ws"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."ws"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
  alt692_end1931:
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."ws"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    nqp_rxmark rx679_bstack, rxquantr702_done1944, rx679_pos, 0
  rxquantr702_loop1943:
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."trait"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    goto rxsubrule703_pass1945
  rxsubrule703_back1946:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
  rxsubrule703_pass1945:
    rx679_cstack = rx679_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule703_back1946
    push rx679_bstack, $I11
    push rx679_bstack, 0
    push rx679_bstack, rx679_pos
    elements $I11, rx679_cstack
    push rx679_bstack, $I11
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    nqp_rxpeek $I19, rx679_bstack, rxquantr702_done1944
    inc $I19
    inc $I19
    set rx679_rep, rx679_bstack[$I19]
    nqp_rxcommit rx679_bstack, rxquantr702_done1944
    inc rx679_rep
    nqp_rxmark rx679_bstack, rxquantr702_done1944, rx679_pos, rx679_rep
    goto rxquantr702_loop1943
  rxquantr702_done1944:
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."ws"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt705_01949
    nqp_push_label $P11, alt705_11953
    nqp_rxmark rx679_bstack, alt705_end1948, -1, 0
    rx679_cur."!alt"(rx679_pos, "alt_nfa__23_1351203237.268", $P11)
    goto rx679_fail1910
  alt705_01949:
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."ws"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    nqp_rxmark rx679_bstack, rxsubrule707_pass1951, -1, 0
  rxsubrule707_pass1951:
    rx679_cstack = rx679_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."ws"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    goto alt705_end1948
  alt705_11953:
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."ws"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    nqp_rxmark rx679_bstack, rxsubrule710_pass1955, -1, 0
  rxsubrule710_pass1955:
    rx679_cstack = rx679_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."ws"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    goto alt705_end1948
  alt705_end1948:
    nqp_rxcommit rx679_bstack, alt705_end1948
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."ws"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1910
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    rx679_cur."!cursor_pass"(rx679_pos, "routine_def", 'backtrack'=>1)
    .return (rx679_cur)
  rx679_restart1909:
    repr_get_attr_obj rx679_cstack, rx679_cur, rx679_curclass, "$!cstack"
  rx679_fail1910:
    unless rx679_bstack, rx679_done1908
    pop $I19, rx679_bstack
    if_null rx679_cstack, rx679_cstack_done1913
    unless rx679_cstack, rx679_cstack_done1913
    dec $I19
    set $P11, rx679_cstack[$I19]
  rx679_cstack_done1913:
    pop rx679_rep, rx679_bstack
    pop rx679_pos, rx679_bstack
    pop $I19, rx679_bstack
    lt rx679_pos, -1, rx679_done1908
    lt rx679_pos, 0, rx679_fail1910
    eq $I19, 0, rx679_fail1910
    nqp_islist $I20, rx679_cstack
    unless $I20, rx679_jump1911
    elements $I18, rx679_bstack
    le $I18, 0, rx679_cut1912
    dec $I18
    set $I18, rx679_bstack[$I18]
  rx679_cut1912:
    assign rx679_cstack, $I18
  rx679_jump1911:
    jump $I19
  rx679_done1908:
    rx679_cur."!cursor_fail"()
    .return (rx679_cur) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_122_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1062
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_400_1351203235.318' 
    capture_lex $P5008 
    .lex "$*RETURN_USED", $P101 
    .lex "$*INVOCANT_OK", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx713_tgt
    .local int rx713_pos
    .local int rx713_off
    .local int rx713_eos
    .local int rx713_rep
    .local pmc rx713_cur
    .local pmc rx713_curclass
    .local pmc rx713_bstack
    .local pmc rx713_cstack
    (rx713_cur, rx713_tgt, rx713_pos, rx713_curclass, rx713_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx713_cur
    length rx713_eos, rx713_tgt
    eq $I19, 1, rx713_restart1960
    gt rx713_pos, rx713_eos, rx713_fail1961
    repr_get_attr_int $I11, self, rx713_curclass, "$!from"
    ne $I11, -1, rxscan714_done1967
    goto rxscan714_scan1966
  rxscan714_loop1965:
    inc rx713_pos
    gt rx713_pos, rx713_eos, rx713_fail1961
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!from", rx713_pos
  rxscan714_scan1966:
    nqp_rxmark rx713_bstack, rxscan714_loop1965, rx713_pos, 0
  rxscan714_done1967:
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    store_lex unicode:"$\x{a2}", rx713_cur
    box $P5003, 0
    set $P101, $P5003
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    store_lex unicode:"$\x{a2}", rx713_cur
    box $P5004, 1
    set $P102, $P5004
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
  alt718_01972:
    nqp_rxmark rx713_bstack, alt718_11978, rx713_pos, 0
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    add $I11, rx713_pos, 3
    gt $I11, rx713_eos, rx713_fail1961
    substr $S10, rx713_tgt, rx713_pos, 3
    ne $S10, ucs4:"::(", rx713_fail1961
    add rx713_pos, 3
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."variable"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    nqp_rxmark rx713_bstack, rxsubrule721_pass1975, -1, 0
  rxsubrule721_pass1975:
    rx713_cstack = rx713_cur."!cursor_capture"($P11, "latename=variable")
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    add $I11, rx713_pos, 1
    gt $I11, rx713_eos, rx713_fail1961
    substr $S10, rx713_tgt, rx713_pos, 1
    ne $S10, ucs4:")", rx713_fail1961
    add rx713_pos, 1
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    goto alt718_end1971
  alt718_11978:
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    nqp_rxmark rx713_bstack, rxcap725_fail1981, rx713_pos, 0
    nqp_rxmark rx713_bstack, rxquantr726_done1983, rx713_pos, 0
  rxquantr726_loop1982:
    add $I11, rx713_pos, 1
    gt $I11, rx713_eos, rx713_fail1961
    substr $S10, rx713_tgt, rx713_pos, 1
    ne $S10, ucs4:"!", rx713_fail1961
    add rx713_pos, 1
    nqp_rxpeek $I19, rx713_bstack, rxquantr726_done1983
    inc $I19
    inc $I19
    set rx713_rep, rx713_bstack[$I19]
    nqp_rxcommit rx713_bstack, rxquantr726_done1983
    inc rx713_rep
  rxquantr726_done1983:
    nqp_rxpeek $I19, rx713_bstack, rxcap725_fail1981
    inc $I19
    set $I11, rx713_bstack[$I19]
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx713_pos)
    rx713_cstack = rx713_cur."!cursor_capture"($P11, "private")
    goto rxcap725_done1980
  rxcap725_fail1981:
    goto rx713_fail1961
  rxcap725_done1980:
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    nqp_rxmark rx713_bstack, rxquantr728_done1986, rx713_pos, 0
  rxquantr728_loop1985:
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    goto rxsubrule729_pass1987
  rxsubrule729_back1988:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
  rxsubrule729_pass1987:
    rx713_cstack = rx713_cur."!cursor_capture"($P11, "deflongname")
    set_addr $I11, rxsubrule729_back1988
    push rx713_bstack, $I11
    push rx713_bstack, 0
    push rx713_bstack, rx713_pos
    elements $I11, rx713_cstack
    push rx713_bstack, $I11
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    nqp_rxpeek $I19, rx713_bstack, rxquantr728_done1986
    inc $I19
    inc $I19
    set rx713_rep, rx713_bstack[$I19]
    nqp_rxcommit rx713_bstack, rxquantr728_done1986
    inc rx713_rep
  rxquantr728_done1986:
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
  alt718_end1971:
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
  alt734_01994:
    nqp_rxmark rx713_bstack, alt734_12000, rx713_pos, 0
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    add $I11, rx713_pos, 1
    gt $I11, rx713_eos, rx713_fail1961
    substr $S10, rx713_tgt, rx713_pos, 1
    ne $S10, ucs4:"(", rx713_fail1961
    add rx713_pos, 1
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."signature"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    nqp_rxmark rx713_bstack, rxsubrule737_pass1997, -1, 0
  rxsubrule737_pass1997:
    rx713_cstack = rx713_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    add $I11, rx713_pos, 1
    gt $I11, rx713_eos, rx713_fail1961
    substr $S10, rx713_tgt, rx713_pos, 1
    ne $S10, ucs4:")", rx713_fail1961
    add rx713_pos, 1
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    goto alt734_end1993
  alt734_12000:
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
  alt734_end1993:
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    store_lex unicode:"$\x{a2}", rx713_cur
    $P5005 = $P103."MATCH"()
    set $P104, $P5005
    .const 'Sub' $P5006 = 'cuid_400_1351203235.318' 
    capture_lex $P5006
    $P5007 = $P5006()
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    nqp_rxmark rx713_bstack, rxquantr745_done2007, rx713_pos, 0
  rxquantr745_loop2006:
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."trait"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    goto rxsubrule746_pass2008
  rxsubrule746_back2009:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
  rxsubrule746_pass2008:
    rx713_cstack = rx713_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule746_back2009
    push rx713_bstack, $I11
    push rx713_bstack, 0
    push rx713_bstack, rx713_pos
    elements $I11, rx713_cstack
    push rx713_bstack, $I11
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    nqp_rxpeek $I19, rx713_bstack, rxquantr745_done2007
    inc $I19
    inc $I19
    set rx713_rep, rx713_bstack[$I19]
    nqp_rxcommit rx713_bstack, rxquantr745_done2007
    inc rx713_rep
    nqp_rxmark rx713_bstack, rxquantr745_done2007, rx713_pos, rx713_rep
    goto rxquantr745_loop2006
  rxquantr745_done2007:
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt748_02012
    nqp_push_label $P11, alt748_12016
    nqp_rxmark rx713_bstack, alt748_end2011, -1, 0
    rx713_cur."!alt"(rx713_pos, "alt_nfa__24_1351203237.301", $P11)
    goto rx713_fail1961
  alt748_02012:
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    nqp_rxmark rx713_bstack, rxsubrule750_pass2014, -1, 0
  rxsubrule750_pass2014:
    rx713_cstack = rx713_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    goto alt748_end2011
  alt748_12016:
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    nqp_rxmark rx713_bstack, rxsubrule753_pass2018, -1, 0
  rxsubrule753_pass2018:
    rx713_cstack = rx713_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    goto alt748_end2011
  alt748_end2011:
    nqp_rxcommit rx713_bstack, alt748_end2011
    repr_bind_attr_int rx713_cur, rx713_curclass, "$!pos", rx713_pos
    $P11 = rx713_cur."ws"()
    repr_get_attr_int $I11, $P11, rx713_curclass, "$!pos"
    lt $I11, 0, rx713_fail1961
    repr_get_attr_int rx713_pos, $P11, rx713_curclass, "$!pos"
    rx713_cur."!cursor_pass"(rx713_pos, "method_def", 'backtrack'=>1)
    .return (rx713_cur)
  rx713_restart1960:
    repr_get_attr_obj rx713_cstack, rx713_cur, rx713_curclass, "$!cstack"
  rx713_fail1961:
    unless rx713_bstack, rx713_done1959
    pop $I19, rx713_bstack
    if_null rx713_cstack, rx713_cstack_done1964
    unless rx713_cstack, rx713_cstack_done1964
    dec $I19
    set $P11, rx713_cstack[$I19]
  rx713_cstack_done1964:
    pop rx713_rep, rx713_bstack
    pop rx713_pos, rx713_bstack
    pop $I19, rx713_bstack
    lt rx713_pos, -1, rx713_done1959
    lt rx713_pos, 0, rx713_fail1961
    eq $I19, 0, rx713_fail1961
    nqp_islist $I20, rx713_cstack
    unless $I20, rx713_jump1962
    elements $I18, rx713_bstack
    le $I18, 0, rx713_cut1963
    dec $I18
    set $I18, rx713_bstack[$I18]
  rx713_cut1963:
    assign rx713_cstack, $I18
  rx713_jump1962:
    jump $I19
  rx713_done1959:
    rx713_cur."!cursor_fail"()
    .return (rx713_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_400_1351203235.318") :anon :lex :outer("cuid_122_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1072

    box $P5001, 0
    store_dynamic_lex "$*INVOCANT_OK", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "onlystar" :subid("cuid_123_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1080
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_401_1351203235.318' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx756_tgt
    .local int rx756_pos
    .local int rx756_off
    .local int rx756_eos
    .local int rx756_rep
    .local pmc rx756_cur
    .local pmc rx756_curclass
    .local pmc rx756_bstack
    .local pmc rx756_cstack
    (rx756_cur, rx756_tgt, rx756_pos, rx756_curclass, rx756_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx756_cur
    length rx756_eos, rx756_tgt
    eq $I19, 1, rx756_restart2023
    gt rx756_pos, rx756_eos, rx756_fail2024
    repr_get_attr_int $I11, self, rx756_curclass, "$!from"
    ne $I11, -1, rxscan757_done2030
    goto rxscan757_scan2029
  rxscan757_loop2028:
    inc rx756_pos
    gt rx756_pos, rx756_eos, rx756_fail2024
    repr_bind_attr_int rx756_cur, rx756_curclass, "$!from", rx756_pos
  rxscan757_scan2029:
    nqp_rxmark rx756_bstack, rxscan757_loop2028, rx756_pos, 0
  rxscan757_done2030:
    repr_bind_attr_int rx756_cur, rx756_curclass, "$!pos", rx756_pos
    store_lex unicode:"$\x{a2}", rx756_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_401_1351203235.318' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx756_fail2024
    add $I11, rx756_pos, 1
    gt $I11, rx756_eos, rx756_fail2024
    substr $S10, rx756_tgt, rx756_pos, 1
    ne $S10, ucs4:"{", rx756_fail2024
    add rx756_pos, 1
    repr_bind_attr_int rx756_cur, rx756_curclass, "$!pos", rx756_pos
    $P11 = rx756_cur."ws"()
    repr_get_attr_int $I11, $P11, rx756_curclass, "$!pos"
    lt $I11, 0, rx756_fail2024
    repr_get_attr_int rx756_pos, $P11, rx756_curclass, "$!pos"
    add $I11, rx756_pos, 1
    gt $I11, rx756_eos, rx756_fail2024
    substr $S10, rx756_tgt, rx756_pos, 1
    ne $S10, ucs4:"*", rx756_fail2024
    add rx756_pos, 1
    repr_bind_attr_int rx756_cur, rx756_curclass, "$!pos", rx756_pos
    $P11 = rx756_cur."ws"()
    repr_get_attr_int $I11, $P11, rx756_curclass, "$!pos"
    lt $I11, 0, rx756_fail2024
    repr_get_attr_int rx756_pos, $P11, rx756_curclass, "$!pos"
    add $I11, rx756_pos, 1
    gt $I11, rx756_eos, rx756_fail2024
    substr $S10, rx756_tgt, rx756_pos, 1
    ne $S10, ucs4:"}", rx756_fail2024
    add rx756_pos, 1
    repr_bind_attr_int rx756_cur, rx756_curclass, "$!pos", rx756_pos
    $P11 = rx756_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx756_curclass, "$!pos"
    lt $I11, 0, rx756_fail2024
    repr_bind_attr_int rx756_cur, rx756_curclass, "$!pos", rx756_pos
    $P11 = rx756_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx756_curclass, "$!pos"
    lt $I11, 0, rx756_fail2024
    repr_get_attr_int rx756_pos, $P11, rx756_curclass, "$!pos"
    rx756_cur."!cursor_pass"(rx756_pos, "onlystar", 'backtrack'=>1)
    .return (rx756_cur)
  rx756_restart2023:
    repr_get_attr_obj rx756_cstack, rx756_cur, rx756_curclass, "$!cstack"
  rx756_fail2024:
    unless rx756_bstack, rx756_done2022
    pop $I19, rx756_bstack
    if_null rx756_cstack, rx756_cstack_done2027
    unless rx756_cstack, rx756_cstack_done2027
    dec $I19
    set $P11, rx756_cstack[$I19]
  rx756_cstack_done2027:
    pop rx756_rep, rx756_bstack
    pop rx756_pos, rx756_bstack
    pop $I19, rx756_bstack
    lt rx756_pos, -1, rx756_done2022
    lt rx756_pos, 0, rx756_fail2024
    eq $I19, 0, rx756_fail2024
    nqp_islist $I20, rx756_cstack
    unless $I20, rx756_jump2025
    elements $I18, rx756_bstack
    le $I18, 0, rx756_cut2026
    dec $I18
    set $I18, rx756_bstack[$I18]
  rx756_cut2026:
    assign rx756_cstack, $I18
  rx756_jump2025:
    jump $I19
  rx756_done2022:
    rx756_cur."!cursor_fail"()
    .return (rx756_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_401_1351203235.318") :anon :lex :outer("cuid_123_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1081

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback2031
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback2032
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5005
  fallback2032:
    unless_null $P5002, vivi_7582033
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_7582033:
    set $P5001, $P5002
  fallback2031:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator" :subid("cuid_124_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1087
    .param pmc self 
    $P5001 = self."!protoregex"("multi_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_125_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1088
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx762_tgt
    .local int rx762_pos
    .local int rx762_off
    .local int rx762_eos
    .local int rx762_rep
    .local pmc rx762_cur
    .local pmc rx762_curclass
    .local pmc rx762_bstack
    .local pmc rx762_cstack
    (rx762_cur, rx762_tgt, rx762_pos, rx762_curclass, rx762_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx762_cur
    length rx762_eos, rx762_tgt
    eq $I19, 1, rx762_restart2039
    gt rx762_pos, rx762_eos, rx762_fail2040
    repr_get_attr_int $I11, self, rx762_curclass, "$!from"
    ne $I11, -1, rxscan763_done2046
    goto rxscan763_scan2045
  rxscan763_loop2044:
    inc rx762_pos
    gt rx762_pos, rx762_eos, rx762_fail2040
    repr_bind_attr_int rx762_cur, rx762_curclass, "$!from", rx762_pos
  rxscan763_scan2045:
    nqp_rxmark rx762_bstack, rxscan763_loop2044, rx762_pos, 0
  rxscan763_done2046:
    repr_bind_attr_int rx762_cur, rx762_curclass, "$!pos", rx762_pos
    store_lex unicode:"$\x{a2}", rx762_cur
    box $P5002, "multi"
    set $P101, $P5002
    nqp_rxmark rx762_bstack, rxcap764_fail2048, rx762_pos, 0
    add $I11, rx762_pos, 5
    gt $I11, rx762_eos, rx762_fail2040
    substr $S10, rx762_tgt, rx762_pos, 5
    ne $S10, ucs4:"multi", rx762_fail2040
    add rx762_pos, 5
    nqp_rxpeek $I19, rx762_bstack, rxcap764_fail2048
    inc $I19
    set $I11, rx762_bstack[$I19]
    repr_bind_attr_int rx762_cur, rx762_curclass, "$!pos", rx762_pos
    $P11 = rx762_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx762_pos)
    rx762_cstack = rx762_cur."!cursor_capture"($P11, "sym")
    goto rxcap764_done2047
  rxcap764_fail2048:
    goto rx762_fail2040
  rxcap764_done2047:
    repr_bind_attr_int rx762_cur, rx762_curclass, "$!pos", rx762_pos
    $P11 = rx762_cur."ws"()
    repr_get_attr_int $I11, $P11, rx762_curclass, "$!pos"
    lt $I11, 0, rx762_fail2040
    repr_get_attr_int rx762_pos, $P11, rx762_curclass, "$!pos"
  alt766_02051:
    nqp_rxmark rx762_bstack, alt766_12053, rx762_pos, 0
    repr_bind_attr_int rx762_cur, rx762_curclass, "$!pos", rx762_pos
    $P11 = rx762_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx762_curclass, "$!pos"
    lt $I11, 0, rx762_fail2040
    nqp_rxmark rx762_bstack, rxsubrule767_pass2052, -1, 0
  rxsubrule767_pass2052:
    rx762_cstack = rx762_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx762_pos, $P11, rx762_curclass, "$!pos"
    goto alt766_end2050
  alt766_12053:
    nqp_rxmark rx762_bstack, alt766_22055, rx762_pos, 0
    repr_bind_attr_int rx762_cur, rx762_curclass, "$!pos", rx762_pos
    $P11 = rx762_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx762_curclass, "$!pos"
    lt $I11, 0, rx762_fail2040
    nqp_rxmark rx762_bstack, rxsubrule768_pass2054, -1, 0
  rxsubrule768_pass2054:
    rx762_cstack = rx762_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx762_pos, $P11, rx762_curclass, "$!pos"
    goto alt766_end2050
  alt766_22055:
    repr_bind_attr_int rx762_cur, rx762_curclass, "$!pos", rx762_pos
    $P11 = rx762_cur."panic"("Malformed multi")
    repr_get_attr_int $I11, $P11, rx762_curclass, "$!pos"
    lt $I11, 0, rx762_fail2040
    repr_get_attr_int rx762_pos, $P11, rx762_curclass, "$!pos"
  alt766_end2050:
    rx762_cur."!cursor_pass"(rx762_pos, "multi_declarator:sym<multi>", 'backtrack'=>1)
    .return (rx762_cur)
  rx762_restart2039:
    repr_get_attr_obj rx762_cstack, rx762_cur, rx762_curclass, "$!cstack"
  rx762_fail2040:
    unless rx762_bstack, rx762_done2038
    pop $I19, rx762_bstack
    if_null rx762_cstack, rx762_cstack_done2043
    unless rx762_cstack, rx762_cstack_done2043
    dec $I19
    set $P11, rx762_cstack[$I19]
  rx762_cstack_done2043:
    pop rx762_rep, rx762_bstack
    pop rx762_pos, rx762_bstack
    pop $I19, rx762_bstack
    lt rx762_pos, -1, rx762_done2038
    lt rx762_pos, 0, rx762_fail2040
    eq $I19, 0, rx762_fail2040
    nqp_islist $I20, rx762_cstack
    unless $I20, rx762_jump2041
    elements $I18, rx762_bstack
    le $I18, 0, rx762_cut2042
    dec $I18
    set $I18, rx762_bstack[$I18]
  rx762_cut2042:
    assign rx762_cstack, $I18
  rx762_jump2041:
    jump $I19
  rx762_done2038:
    rx762_cur."!cursor_fail"()
    .return (rx762_cur) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_126_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1093
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx770_tgt
    .local int rx770_pos
    .local int rx770_off
    .local int rx770_eos
    .local int rx770_rep
    .local pmc rx770_cur
    .local pmc rx770_curclass
    .local pmc rx770_bstack
    .local pmc rx770_cstack
    (rx770_cur, rx770_tgt, rx770_pos, rx770_curclass, rx770_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx770_cur
    length rx770_eos, rx770_tgt
    eq $I19, 1, rx770_restart2059
    gt rx770_pos, rx770_eos, rx770_fail2060
    repr_get_attr_int $I11, self, rx770_curclass, "$!from"
    ne $I11, -1, rxscan771_done2066
    goto rxscan771_scan2065
  rxscan771_loop2064:
    inc rx770_pos
    gt rx770_pos, rx770_eos, rx770_fail2060
    repr_bind_attr_int rx770_cur, rx770_curclass, "$!from", rx770_pos
  rxscan771_scan2065:
    nqp_rxmark rx770_bstack, rxscan771_loop2064, rx770_pos, 0
  rxscan771_done2066:
    repr_bind_attr_int rx770_cur, rx770_curclass, "$!pos", rx770_pos
    store_lex unicode:"$\x{a2}", rx770_cur
    box $P5002, "proto"
    set $P101, $P5002
    nqp_rxmark rx770_bstack, rxcap772_fail2068, rx770_pos, 0
    add $I11, rx770_pos, 5
    gt $I11, rx770_eos, rx770_fail2060
    substr $S10, rx770_tgt, rx770_pos, 5
    ne $S10, ucs4:"proto", rx770_fail2060
    add rx770_pos, 5
    nqp_rxpeek $I19, rx770_bstack, rxcap772_fail2068
    inc $I19
    set $I11, rx770_bstack[$I19]
    repr_bind_attr_int rx770_cur, rx770_curclass, "$!pos", rx770_pos
    $P11 = rx770_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx770_pos)
    rx770_cstack = rx770_cur."!cursor_capture"($P11, "sym")
    goto rxcap772_done2067
  rxcap772_fail2068:
    goto rx770_fail2060
  rxcap772_done2067:
    repr_bind_attr_int rx770_cur, rx770_curclass, "$!pos", rx770_pos
    $P11 = rx770_cur."ws"()
    repr_get_attr_int $I11, $P11, rx770_curclass, "$!pos"
    lt $I11, 0, rx770_fail2060
    repr_get_attr_int rx770_pos, $P11, rx770_curclass, "$!pos"
  alt774_02071:
    nqp_rxmark rx770_bstack, alt774_12073, rx770_pos, 0
    repr_bind_attr_int rx770_cur, rx770_curclass, "$!pos", rx770_pos
    $P11 = rx770_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx770_curclass, "$!pos"
    lt $I11, 0, rx770_fail2060
    nqp_rxmark rx770_bstack, rxsubrule775_pass2072, -1, 0
  rxsubrule775_pass2072:
    rx770_cstack = rx770_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx770_pos, $P11, rx770_curclass, "$!pos"
    goto alt774_end2070
  alt774_12073:
    nqp_rxmark rx770_bstack, alt774_22075, rx770_pos, 0
    repr_bind_attr_int rx770_cur, rx770_curclass, "$!pos", rx770_pos
    $P11 = rx770_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx770_curclass, "$!pos"
    lt $I11, 0, rx770_fail2060
    nqp_rxmark rx770_bstack, rxsubrule776_pass2074, -1, 0
  rxsubrule776_pass2074:
    rx770_cstack = rx770_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx770_pos, $P11, rx770_curclass, "$!pos"
    goto alt774_end2070
  alt774_22075:
    repr_bind_attr_int rx770_cur, rx770_curclass, "$!pos", rx770_pos
    $P11 = rx770_cur."panic"("Malformed proto")
    repr_get_attr_int $I11, $P11, rx770_curclass, "$!pos"
    lt $I11, 0, rx770_fail2060
    repr_get_attr_int rx770_pos, $P11, rx770_curclass, "$!pos"
  alt774_end2070:
    rx770_cur."!cursor_pass"(rx770_pos, "multi_declarator:sym<proto>", 'backtrack'=>1)
    .return (rx770_cur)
  rx770_restart2059:
    repr_get_attr_obj rx770_cstack, rx770_cur, rx770_curclass, "$!cstack"
  rx770_fail2060:
    unless rx770_bstack, rx770_done2058
    pop $I19, rx770_bstack
    if_null rx770_cstack, rx770_cstack_done2063
    unless rx770_cstack, rx770_cstack_done2063
    dec $I19
    set $P11, rx770_cstack[$I19]
  rx770_cstack_done2063:
    pop rx770_rep, rx770_bstack
    pop rx770_pos, rx770_bstack
    pop $I19, rx770_bstack
    lt rx770_pos, -1, rx770_done2058
    lt rx770_pos, 0, rx770_fail2060
    eq $I19, 0, rx770_fail2060
    nqp_islist $I20, rx770_cstack
    unless $I20, rx770_jump2061
    elements $I18, rx770_bstack
    le $I18, 0, rx770_cut2062
    dec $I18
    set $I18, rx770_bstack[$I18]
  rx770_cut2062:
    assign rx770_cstack, $I18
  rx770_jump2061:
    jump $I19
  rx770_done2058:
    rx770_cur."!cursor_fail"()
    .return (rx770_cur) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_127_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1098
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx778_tgt
    .local int rx778_pos
    .local int rx778_off
    .local int rx778_eos
    .local int rx778_rep
    .local pmc rx778_cur
    .local pmc rx778_curclass
    .local pmc rx778_bstack
    .local pmc rx778_cstack
    (rx778_cur, rx778_tgt, rx778_pos, rx778_curclass, rx778_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx778_cur
    length rx778_eos, rx778_tgt
    eq $I19, 1, rx778_restart2079
    gt rx778_pos, rx778_eos, rx778_fail2080
    repr_get_attr_int $I11, self, rx778_curclass, "$!from"
    ne $I11, -1, rxscan779_done2086
    goto rxscan779_scan2085
  rxscan779_loop2084:
    inc rx778_pos
    gt rx778_pos, rx778_eos, rx778_fail2080
    repr_bind_attr_int rx778_cur, rx778_curclass, "$!from", rx778_pos
  rxscan779_scan2085:
    nqp_rxmark rx778_bstack, rxscan779_loop2084, rx778_pos, 0
  rxscan779_done2086:
    repr_bind_attr_int rx778_cur, rx778_curclass, "$!pos", rx778_pos
    store_lex unicode:"$\x{a2}", rx778_cur
    box $P5002, ""
    set $P101, $P5002
    repr_bind_attr_int rx778_cur, rx778_curclass, "$!pos", rx778_pos
    $P11 = rx778_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx778_curclass, "$!pos"
    lt $I11, 0, rx778_fail2080
    nqp_rxmark rx778_bstack, rxsubrule780_pass2087, -1, 0
  rxsubrule780_pass2087:
    rx778_cstack = rx778_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx778_pos, $P11, rx778_curclass, "$!pos"
    rx778_cur."!cursor_pass"(rx778_pos, "multi_declarator:sym<null>", 'backtrack'=>1)
    .return (rx778_cur)
  rx778_restart2079:
    repr_get_attr_obj rx778_cstack, rx778_cur, rx778_curclass, "$!cstack"
  rx778_fail2080:
    unless rx778_bstack, rx778_done2078
    pop $I19, rx778_bstack
    if_null rx778_cstack, rx778_cstack_done2083
    unless rx778_cstack, rx778_cstack_done2083
    dec $I19
    set $P11, rx778_cstack[$I19]
  rx778_cstack_done2083:
    pop rx778_rep, rx778_bstack
    pop rx778_pos, rx778_bstack
    pop $I19, rx778_bstack
    lt rx778_pos, -1, rx778_done2078
    lt rx778_pos, 0, rx778_fail2080
    eq $I19, 0, rx778_fail2080
    nqp_islist $I20, rx778_cstack
    unless $I20, rx778_jump2081
    elements $I18, rx778_bstack
    le $I18, 0, rx778_cut2082
    dec $I18
    set $I18, rx778_bstack[$I18]
  rx778_cut2082:
    assign rx778_cstack, $I18
  rx778_jump2081:
    jump $I19
  rx778_done2078:
    rx778_cur."!cursor_fail"()
    .return (rx778_cur) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_128_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1103
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_402_1351203235.318' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_129_1351203235.318' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx781_tgt
    .local int rx781_pos
    .local int rx781_off
    .local int rx781_eos
    .local int rx781_rep
    .local pmc rx781_cur
    .local pmc rx781_curclass
    .local pmc rx781_bstack
    .local pmc rx781_cstack
    (rx781_cur, rx781_tgt, rx781_pos, rx781_curclass, rx781_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx781_cur
    length rx781_eos, rx781_tgt
    eq $I19, 1, rx781_restart2090
    gt rx781_pos, rx781_eos, rx781_fail2091
    repr_get_attr_int $I11, self, rx781_curclass, "$!from"
    ne $I11, -1, rxscan782_done2097
    goto rxscan782_scan2096
  rxscan782_loop2095:
    inc rx781_pos
    gt rx781_pos, rx781_eos, rx781_fail2091
    repr_bind_attr_int rx781_cur, rx781_curclass, "$!from", rx781_pos
  rxscan782_scan2096:
    nqp_rxmark rx781_bstack, rxscan782_loop2095, rx781_pos, 0
  rxscan782_done2097:
    nqp_rxmark rx781_bstack, rxquantr783_done2099, rx781_pos, 0
  rxquantr783_loop2098:
    repr_bind_attr_int rx781_cur, rx781_curclass, "$!pos", rx781_pos
    store_lex unicode:"$\x{a2}", rx781_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_402_1351203235.318' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx781_fail2091
    repr_bind_attr_int rx781_cur, rx781_curclass, "$!pos", rx781_pos
    $P11 = rx781_cur."ws"()
    repr_get_attr_int $I11, $P11, rx781_curclass, "$!pos"
    lt $I11, 0, rx781_fail2091
    repr_get_attr_int rx781_pos, $P11, rx781_curclass, "$!pos"
    repr_bind_attr_int rx781_cur, rx781_curclass, "$!pos", rx781_pos
    $P11 = rx781_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx781_curclass, "$!pos"
    lt $I11, 0, rx781_fail2091
    nqp_rxmark rx781_bstack, rxsubrule786_pass2104, -1, 0
  rxsubrule786_pass2104:
    rx781_cstack = rx781_cur."!cursor_capture"($P11, "invocant")
    repr_get_attr_int rx781_pos, $P11, rx781_curclass, "$!pos"
    repr_bind_attr_int rx781_cur, rx781_curclass, "$!pos", rx781_pos
    $P11 = rx781_cur."ws"()
    repr_get_attr_int $I11, $P11, rx781_curclass, "$!pos"
    lt $I11, 0, rx781_fail2091
    repr_get_attr_int rx781_pos, $P11, rx781_curclass, "$!pos"
    add $I11, rx781_pos, 1
    gt $I11, rx781_eos, rx781_fail2091
    substr $S10, rx781_tgt, rx781_pos, 1
    ne $S10, ucs4:":", rx781_fail2091
    add rx781_pos, 1
    nqp_rxpeek $I19, rx781_bstack, rxquantr783_done2099
    inc $I19
    inc $I19
    set rx781_rep, rx781_bstack[$I19]
    nqp_rxcommit rx781_bstack, rxquantr783_done2099
    inc rx781_rep
  rxquantr783_done2099:
    nqp_rxmark rx781_bstack, rxquantr788_done2107, rx781_pos, 0
  rxquantr788_loop2106:
    nqp_rxmark rx781_bstack, rxquantr789_done2109, rx781_pos, 0
  rxquantr789_loop2108:
    repr_bind_attr_int rx781_cur, rx781_curclass, "$!pos", rx781_pos
    $P11 = rx781_cur."ws"()
    repr_get_attr_int $I11, $P11, rx781_curclass, "$!pos"
    lt $I11, 0, rx781_fail2091
    repr_get_attr_int rx781_pos, $P11, rx781_curclass, "$!pos"
    repr_bind_attr_int rx781_cur, rx781_curclass, "$!pos", rx781_pos
    $P11 = rx781_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx781_curclass, "$!pos"
    lt $I11, 0, rx781_fail2091
    nqp_rxmark rx781_bstack, rxsubrule791_pass2111, -1, 0
  rxsubrule791_pass2111:
    rx781_cstack = rx781_cur."!cursor_capture"($P11, "parameter")
    repr_get_attr_int rx781_pos, $P11, rx781_curclass, "$!pos"
    repr_bind_attr_int rx781_cur, rx781_curclass, "$!pos", rx781_pos
    $P11 = rx781_cur."ws"()
    repr_get_attr_int $I11, $P11, rx781_curclass, "$!pos"
    lt $I11, 0, rx781_fail2091
    repr_get_attr_int rx781_pos, $P11, rx781_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt793_02114
    nqp_push_label $P11, alt793_12115
    nqp_rxmark rx781_bstack, alt793_end2113, -1, 0
    rx781_cur."!alt"(rx781_pos, "alt_nfa__26_1351203237.467", $P11)
    goto rx781_fail2091
  alt793_02114:
    add $I11, rx781_pos, 1
    gt $I11, rx781_eos, rx781_fail2091
    substr $S10, rx781_tgt, rx781_pos, 1
    ne $S10, ucs4:",", rx781_fail2091
    add rx781_pos, 1
    goto alt793_end2113
  alt793_12115:
    .const 'Sub' $P5004 = 'cuid_129_1351203235.318' 
    capture_lex $P5004
    repr_bind_attr_int rx781_cur, rx781_curclass, "$!pos", rx781_pos
    $P11 = rx781_cur."before"($P5004)
    repr_get_attr_int $I11, $P11, rx781_curclass, "$!pos"
    lt $I11, 0, rx781_fail2091
    nqp_rxmark rx781_bstack, rxsubrule798_pass2131, -1, 0
  rxsubrule798_pass2131:
    rx781_cstack = rx781_cur."!cursor_capture"($P11, "before")
    repr_get_attr_int rx781_pos, $P11, rx781_curclass, "$!pos"
    goto alt793_end2113
  alt793_end2113:
    nqp_rxcommit rx781_bstack, alt793_end2113
    nqp_rxpeek $I19, rx781_bstack, rxquantr789_done2109
    inc $I19
    inc $I19
    set rx781_rep, rx781_bstack[$I19]
    nqp_rxcommit rx781_bstack, rxquantr789_done2109
    inc rx781_rep
    nqp_rxmark rx781_bstack, rxquantr789_done2109, rx781_pos, rx781_rep
    goto rxquantr789_loop2108
  rxquantr789_done2109:
    nqp_rxpeek $I19, rx781_bstack, rxquantr788_done2107
    inc $I19
    inc $I19
    set rx781_rep, rx781_bstack[$I19]
    nqp_rxcommit rx781_bstack, rxquantr788_done2107
    inc rx781_rep
  rxquantr788_done2107:
    rx781_cur."!cursor_pass"(rx781_pos, "signature", 'backtrack'=>1)
    .return (rx781_cur)
  rx781_restart2090:
    repr_get_attr_obj rx781_cstack, rx781_cur, rx781_curclass, "$!cstack"
  rx781_fail2091:
    unless rx781_bstack, rx781_done2089
    pop $I19, rx781_bstack
    if_null rx781_cstack, rx781_cstack_done2094
    unless rx781_cstack, rx781_cstack_done2094
    dec $I19
    set $P11, rx781_cstack[$I19]
  rx781_cstack_done2094:
    pop rx781_rep, rx781_bstack
    pop rx781_pos, rx781_bstack
    pop $I19, rx781_bstack
    lt rx781_pos, -1, rx781_done2089
    lt rx781_pos, 0, rx781_fail2091
    eq $I19, 0, rx781_fail2091
    nqp_islist $I20, rx781_cstack
    unless $I20, rx781_jump2092
    elements $I18, rx781_bstack
    le $I18, 0, rx781_cut2093
    dec $I18
    set $I18, rx781_bstack[$I18]
  rx781_cut2093:
    assign rx781_cstack, $I18
  rx781_jump2092:
    jump $I19
  rx781_done2089:
    rx781_cur."!cursor_fail"()
    .return (rx781_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_402_1351203235.318") :anon :lex :outer("cuid_128_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1104

    find_dynamic_lex $P5001, "$*INVOCANT_OK"
    unless_null $P5001, fallback2100
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$INVOCANT_OK"]
    unless_null $P5002, fallback2101
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5005
  fallback2101:
    unless_null $P5002, vivi_7842102
    die "Contextual $*INVOCANT_OK not found"
    box $P5006, "Contextual $*INVOCANT_OK not found"
    set $P5002, $P5006
  vivi_7842102:
    set $P5001, $P5002
  fallback2100:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_129_1351203235.318") :anon :lex :outer("cuid_128_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx794_tgt
    .local int rx794_pos
    .local int rx794_off
    .local int rx794_eos
    .local int rx794_rep
    .local pmc rx794_cur
    .local pmc rx794_curclass
    .local pmc rx794_bstack
    .local pmc rx794_cstack
    (rx794_cur, rx794_tgt, rx794_pos, rx794_curclass, rx794_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx794_cur
    length rx794_eos, rx794_tgt
    eq $I19, 1, rx794_restart2118
    gt rx794_pos, rx794_eos, rx794_fail2119
    repr_get_attr_int $I11, self, rx794_curclass, "$!from"
    ne $I11, -1, rxscan795_done2125
    goto rxscan795_scan2124
  rxscan795_loop2123:
    inc rx794_pos
    gt rx794_pos, rx794_eos, rx794_fail2119
    repr_bind_attr_int rx794_cur, rx794_curclass, "$!from", rx794_pos
  rxscan795_scan2124:
    nqp_rxmark rx794_bstack, rxscan795_loop2123, rx794_pos, 0
  rxscan795_done2125:
    nqp_rxmark rx794_bstack, rxquantr796_done2127, rx794_pos, 0
  rxquantr796_loop2126:
    ge rx794_pos, rx794_eos, rx794_fail2119
    is_cclass $I11, .CCLASS_WHITESPACE, rx794_tgt, rx794_pos
    unless $I11, rx794_fail2119
    add rx794_pos, 1
    nqp_rxpeek $I19, rx794_bstack, rxquantr796_done2127
    inc $I19
    inc $I19
    set rx794_rep, rx794_bstack[$I19]
    nqp_rxcommit rx794_bstack, rxquantr796_done2127
    inc rx794_rep
    nqp_rxmark rx794_bstack, rxquantr796_done2127, rx794_pos, rx794_rep
    goto rxquantr796_loop2126
  rxquantr796_done2127:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt797_02129
    nqp_push_label $P11, alt797_12130
    nqp_rxmark rx794_bstack, alt797_end2128, -1, 0
    rx794_cur."!alt"(rx794_pos, "alt_nfa__25_1351203237.463", $P11)
    goto rx794_fail2119
  alt797_02129:
    add $I11, rx794_pos, 1
    gt $I11, rx794_eos, rx794_fail2119
    substr $S10, rx794_tgt, rx794_pos, 1
    ne $S10, ucs4:")", rx794_fail2119
    add rx794_pos, 1
    goto alt797_end2128
  alt797_12130:
    add $I11, rx794_pos, 1
    gt $I11, rx794_eos, rx794_fail2119
    substr $S10, rx794_tgt, rx794_pos, 1
    ne $S10, ucs4:"{", rx794_fail2119
    add rx794_pos, 1
    goto alt797_end2128
  alt797_end2128:
    nqp_rxcommit rx794_bstack, alt797_end2128
    rx794_cur."!cursor_pass"(rx794_pos, 'backtrack'=>1)
    .return (rx794_cur)
  rx794_restart2118:
    repr_get_attr_obj rx794_cstack, rx794_cur, rx794_curclass, "$!cstack"
  rx794_fail2119:
    unless rx794_bstack, rx794_done2117
    pop $I19, rx794_bstack
    if_null rx794_cstack, rx794_cstack_done2122
    unless rx794_cstack, rx794_cstack_done2122
    dec $I19
    set $P11, rx794_cstack[$I19]
  rx794_cstack_done2122:
    pop rx794_rep, rx794_bstack
    pop rx794_pos, rx794_bstack
    pop $I19, rx794_bstack
    lt rx794_pos, -1, rx794_done2117
    lt rx794_pos, 0, rx794_fail2119
    eq $I19, 0, rx794_fail2119
    nqp_islist $I20, rx794_cstack
    unless $I20, rx794_jump2120
    elements $I18, rx794_bstack
    le $I18, 0, rx794_cut2121
    dec $I18
    set $I18, rx794_bstack[$I18]
  rx794_cut2121:
    assign rx794_cstack, $I18
  rx794_jump2120:
    jump $I19
  rx794_done2117:
    rx794_cur."!cursor_fail"()
    .return (rx794_cur) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_130_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1108
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx799_tgt
    .local int rx799_pos
    .local int rx799_off
    .local int rx799_eos
    .local int rx799_rep
    .local pmc rx799_cur
    .local pmc rx799_curclass
    .local pmc rx799_bstack
    .local pmc rx799_cstack
    (rx799_cur, rx799_tgt, rx799_pos, rx799_curclass, rx799_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx799_cur
    length rx799_eos, rx799_tgt
    eq $I19, 1, rx799_restart2134
    gt rx799_pos, rx799_eos, rx799_fail2135
    repr_get_attr_int $I11, self, rx799_curclass, "$!from"
    ne $I11, -1, rxscan800_done2141
    goto rxscan800_scan2140
  rxscan800_loop2139:
    inc rx799_pos
    gt rx799_pos, rx799_eos, rx799_fail2135
    repr_bind_attr_int rx799_cur, rx799_curclass, "$!from", rx799_pos
  rxscan800_scan2140:
    nqp_rxmark rx799_bstack, rxscan800_loop2139, rx799_pos, 0
  rxscan800_done2141:
    nqp_rxmark rx799_bstack, rxquantr801_done2143, rx799_pos, 0
  rxquantr801_loop2142:
    repr_bind_attr_int rx799_cur, rx799_curclass, "$!pos", rx799_pos
    $P11 = rx799_cur."typename"()
    repr_get_attr_int $I11, $P11, rx799_curclass, "$!pos"
    lt $I11, 0, rx799_fail2135
    nqp_rxmark rx799_bstack, rxsubrule802_pass2144, -1, 0
  rxsubrule802_pass2144:
    rx799_cstack = rx799_cur."!cursor_capture"($P11, "typename")
    repr_get_attr_int rx799_pos, $P11, rx799_curclass, "$!pos"
    nqp_rxmark rx799_bstack, rxquantr803_done2146, rx799_pos, 0
  rxquantr803_loop2145:
    add $I11, rx799_pos, 1
    gt $I11, rx799_eos, rx799_fail2135
    substr $S10, rx799_tgt, rx799_pos, 1
    ne $S10, ucs4:":", rx799_fail2135
    add rx799_pos, 1
    nqp_rxmark rx799_bstack, rxcap804_fail2148, rx799_pos, 0
    ge rx799_pos, rx799_eos, rx799_fail2135
    substr $S11, rx799_tgt, rx799_pos, 1
    index $I11, ucs4:"_DU", $S11
    lt $I11, 0, rx799_fail2135
    inc rx799_pos
    nqp_rxpeek $I19, rx799_bstack, rxcap804_fail2148
    inc $I19
    set $I11, rx799_bstack[$I19]
    repr_bind_attr_int rx799_cur, rx799_curclass, "$!pos", rx799_pos
    $P11 = rx799_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx799_pos)
    rx799_cstack = rx799_cur."!cursor_capture"($P11, "definedness")
    goto rxcap804_done2147
  rxcap804_fail2148:
    goto rx799_fail2135
  rxcap804_done2147:
    nqp_rxpeek $I19, rx799_bstack, rxquantr803_done2146
    inc $I19
    inc $I19
    set rx799_rep, rx799_bstack[$I19]
    nqp_rxcommit rx799_bstack, rxquantr803_done2146
    inc rx799_rep
  rxquantr803_done2146:
    repr_bind_attr_int rx799_cur, rx799_curclass, "$!pos", rx799_pos
    $P11 = rx799_cur."ws"()
    repr_get_attr_int $I11, $P11, rx799_curclass, "$!pos"
    lt $I11, 0, rx799_fail2135
    repr_get_attr_int rx799_pos, $P11, rx799_curclass, "$!pos"
    nqp_rxpeek $I19, rx799_bstack, rxquantr801_done2143
    inc $I19
    inc $I19
    set rx799_rep, rx799_bstack[$I19]
    nqp_rxcommit rx799_bstack, rxquantr801_done2143
    inc rx799_rep
    nqp_rxmark rx799_bstack, rxquantr801_done2143, rx799_pos, rx799_rep
    goto rxquantr801_loop2142
  rxquantr801_done2143:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt806_02151
    nqp_push_label $P11, alt806_12155
    nqp_rxmark rx799_bstack, alt806_end2150, -1, 0
    rx799_cur."!alt"(rx799_pos, "alt_nfa__29_1351203237.49", $P11)
    goto rx799_fail2135
  alt806_02151:
    nqp_rxmark rx799_bstack, rxcap807_fail2153, rx799_pos, 0
    add $I11, rx799_pos, 1
    gt $I11, rx799_eos, rx799_fail2135
    substr $S10, rx799_tgt, rx799_pos, 1
    ne $S10, ucs4:"*", rx799_fail2135
    add rx799_pos, 1
    nqp_rxpeek $I19, rx799_bstack, rxcap807_fail2153
    inc $I19
    set $I11, rx799_bstack[$I19]
    repr_bind_attr_int rx799_cur, rx799_curclass, "$!pos", rx799_pos
    $P11 = rx799_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx799_pos)
    rx799_cstack = rx799_cur."!cursor_capture"($P11, "quant")
    goto rxcap807_done2152
  rxcap807_fail2153:
    goto rx799_fail2135
  rxcap807_done2152:
    repr_bind_attr_int rx799_cur, rx799_curclass, "$!pos", rx799_pos
    $P11 = rx799_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx799_curclass, "$!pos"
    lt $I11, 0, rx799_fail2135
    nqp_rxmark rx799_bstack, rxsubrule808_pass2154, -1, 0
  rxsubrule808_pass2154:
    rx799_cstack = rx799_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx799_pos, $P11, rx799_curclass, "$!pos"
    goto alt806_end2150
  alt806_12155:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt809_02157
    nqp_push_label $P11, alt809_12159
    nqp_rxmark rx799_bstack, alt809_end2156, -1, 0
    rx799_cur."!alt"(rx799_pos, "alt_nfa__27_1351203237.489", $P11)
    goto rx799_fail2135
  alt809_02157:
    repr_bind_attr_int rx799_cur, rx799_curclass, "$!pos", rx799_pos
    $P11 = rx799_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx799_curclass, "$!pos"
    lt $I11, 0, rx799_fail2135
    nqp_rxmark rx799_bstack, rxsubrule810_pass2158, -1, 0
  rxsubrule810_pass2158:
    rx799_cstack = rx799_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx799_pos, $P11, rx799_curclass, "$!pos"
    goto alt809_end2156
  alt809_12159:
    repr_bind_attr_int rx799_cur, rx799_curclass, "$!pos", rx799_pos
    $P11 = rx799_cur."named_param"()
    repr_get_attr_int $I11, $P11, rx799_curclass, "$!pos"
    lt $I11, 0, rx799_fail2135
    nqp_rxmark rx799_bstack, rxsubrule811_pass2160, -1, 0
  rxsubrule811_pass2160:
    rx799_cstack = rx799_cur."!cursor_capture"($P11, "named_param")
    repr_get_attr_int rx799_pos, $P11, rx799_curclass, "$!pos"
    goto alt809_end2156
  alt809_end2156:
    nqp_rxcommit rx799_bstack, alt809_end2156
    nqp_rxmark rx799_bstack, rxcap812_fail2162, rx799_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt813_02164
    nqp_push_label $P11, alt813_12165
    nqp_push_label $P11, alt813_22166
    nqp_rxmark rx799_bstack, alt813_end2163, -1, 0
    rx799_cur."!alt"(rx799_pos, "alt_nfa__28_1351203237.49", $P11)
    goto rx799_fail2135
  alt813_02164:
    add $I11, rx799_pos, 1
    gt $I11, rx799_eos, rx799_fail2135
    substr $S10, rx799_tgt, rx799_pos, 1
    ne $S10, ucs4:"?", rx799_fail2135
    add rx799_pos, 1
    goto alt813_end2163
  alt813_12165:
    add $I11, rx799_pos, 1
    gt $I11, rx799_eos, rx799_fail2135
    substr $S10, rx799_tgt, rx799_pos, 1
    ne $S10, ucs4:"!", rx799_fail2135
    add rx799_pos, 1
    goto alt813_end2163
  alt813_22166:
    goto alt813_end2163
  alt813_end2163:
    nqp_rxcommit rx799_bstack, alt813_end2163
    nqp_rxpeek $I19, rx799_bstack, rxcap812_fail2162
    inc $I19
    set $I11, rx799_bstack[$I19]
    repr_bind_attr_int rx799_cur, rx799_curclass, "$!pos", rx799_pos
    $P11 = rx799_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx799_pos)
    rx799_cstack = rx799_cur."!cursor_capture"($P11, "quant")
    goto rxcap812_done2161
  rxcap812_fail2162:
    goto rx799_fail2135
  rxcap812_done2161:
    goto alt806_end2150
  alt806_end2150:
    nqp_rxcommit rx799_bstack, alt806_end2150
    nqp_rxmark rx799_bstack, rxquantr815_done2169, rx799_pos, 0
  rxquantr815_loop2168:
    repr_bind_attr_int rx799_cur, rx799_curclass, "$!pos", rx799_pos
    $P11 = rx799_cur."default_value"()
    repr_get_attr_int $I11, $P11, rx799_curclass, "$!pos"
    lt $I11, 0, rx799_fail2135
    goto rxsubrule816_pass2170
  rxsubrule816_back2171:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx799_curclass, "$!pos"
    lt $I11, 0, rx799_fail2135
  rxsubrule816_pass2170:
    rx799_cstack = rx799_cur."!cursor_capture"($P11, "default_value")
    set_addr $I11, rxsubrule816_back2171
    push rx799_bstack, $I11
    push rx799_bstack, 0
    push rx799_bstack, rx799_pos
    elements $I11, rx799_cstack
    push rx799_bstack, $I11
    repr_get_attr_int rx799_pos, $P11, rx799_curclass, "$!pos"
    nqp_rxpeek $I19, rx799_bstack, rxquantr815_done2169
    inc $I19
    inc $I19
    set rx799_rep, rx799_bstack[$I19]
    nqp_rxcommit rx799_bstack, rxquantr815_done2169
    inc rx799_rep
  rxquantr815_done2169:
    rx799_cur."!cursor_pass"(rx799_pos, "parameter", 'backtrack'=>1)
    .return (rx799_cur)
  rx799_restart2134:
    repr_get_attr_obj rx799_cstack, rx799_cur, rx799_curclass, "$!cstack"
  rx799_fail2135:
    unless rx799_bstack, rx799_done2133
    pop $I19, rx799_bstack
    if_null rx799_cstack, rx799_cstack_done2138
    unless rx799_cstack, rx799_cstack_done2138
    dec $I19
    set $P11, rx799_cstack[$I19]
  rx799_cstack_done2138:
    pop rx799_rep, rx799_bstack
    pop rx799_pos, rx799_bstack
    pop $I19, rx799_bstack
    lt rx799_pos, -1, rx799_done2133
    lt rx799_pos, 0, rx799_fail2135
    eq $I19, 0, rx799_fail2135
    nqp_islist $I20, rx799_cstack
    unless $I20, rx799_jump2136
    elements $I18, rx799_bstack
    le $I18, 0, rx799_cut2137
    dec $I18
    set $I18, rx799_bstack[$I18]
  rx799_cut2137:
    assign rx799_cstack, $I18
  rx799_jump2136:
    jump $I19
  rx799_done2133:
    rx799_cur."!cursor_fail"()
    .return (rx799_cur) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_131_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1117
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx817_tgt
    .local int rx817_pos
    .local int rx817_off
    .local int rx817_eos
    .local int rx817_rep
    .local pmc rx817_cur
    .local pmc rx817_curclass
    .local pmc rx817_bstack
    .local pmc rx817_cstack
    (rx817_cur, rx817_tgt, rx817_pos, rx817_curclass, rx817_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx817_cur
    length rx817_eos, rx817_tgt
    eq $I19, 1, rx817_restart2174
    gt rx817_pos, rx817_eos, rx817_fail2175
    repr_get_attr_int $I11, self, rx817_curclass, "$!from"
    ne $I11, -1, rxscan818_done2181
    goto rxscan818_scan2180
  rxscan818_loop2179:
    inc rx817_pos
    gt rx817_pos, rx817_eos, rx817_fail2175
    repr_bind_attr_int rx817_cur, rx817_curclass, "$!from", rx817_pos
  rxscan818_scan2180:
    nqp_rxmark rx817_bstack, rxscan818_loop2179, rx817_pos, 0
  rxscan818_done2181:
    repr_bind_attr_int rx817_cur, rx817_curclass, "$!pos", rx817_pos
    $P11 = rx817_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx817_curclass, "$!pos"
    lt $I11, 0, rx817_fail2175
    nqp_rxmark rx817_bstack, rxsubrule819_pass2182, -1, 0
  rxsubrule819_pass2182:
    rx817_cstack = rx817_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx817_pos, $P11, rx817_curclass, "$!pos"
    nqp_rxmark rx817_bstack, rxquantr820_done2184, rx817_pos, 0
  rxquantr820_loop2183:
    repr_bind_attr_int rx817_cur, rx817_curclass, "$!pos", rx817_pos
    $P11 = rx817_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx817_curclass, "$!pos"
    lt $I11, 0, rx817_fail2175
    goto rxsubrule821_pass2185
  rxsubrule821_back2186:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx817_curclass, "$!pos"
    lt $I11, 0, rx817_fail2175
  rxsubrule821_pass2185:
    rx817_cstack = rx817_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule821_back2186
    push rx817_bstack, $I11
    push rx817_bstack, 0
    push rx817_bstack, rx817_pos
    elements $I11, rx817_cstack
    push rx817_bstack, $I11
    repr_get_attr_int rx817_pos, $P11, rx817_curclass, "$!pos"
    nqp_rxpeek $I19, rx817_bstack, rxquantr820_done2184
    inc $I19
    inc $I19
    set rx817_rep, rx817_bstack[$I19]
    nqp_rxcommit rx817_bstack, rxquantr820_done2184
    inc rx817_rep
  rxquantr820_done2184:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt822_02188
    nqp_push_label $P11, alt822_12190
    nqp_rxmark rx817_bstack, alt822_end2187, -1, 0
    rx817_cur."!alt"(rx817_pos, "alt_nfa__30_1351203237.499", $P11)
    goto rx817_fail2175
  alt822_02188:
    repr_bind_attr_int rx817_cur, rx817_curclass, "$!pos", rx817_pos
    $P11 = rx817_cur."ident"()
    repr_get_attr_int $I11, $P11, rx817_curclass, "$!pos"
    lt $I11, 0, rx817_fail2175
    nqp_rxmark rx817_bstack, rxsubrule823_pass2189, -1, 0
  rxsubrule823_pass2189:
    rx817_cstack = rx817_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx817_pos, $P11, rx817_curclass, "$!pos"
    goto alt822_end2187
  alt822_12190:
    nqp_rxmark rx817_bstack, rxcap824_fail2192, rx817_pos, 0
    ge rx817_pos, rx817_eos, rx817_fail2175
    substr $S11, rx817_tgt, rx817_pos, 1
    index $I11, ucs4:"/!", $S11
    lt $I11, 0, rx817_fail2175
    inc rx817_pos
    nqp_rxpeek $I19, rx817_bstack, rxcap824_fail2192
    inc $I19
    set $I11, rx817_bstack[$I19]
    repr_bind_attr_int rx817_cur, rx817_curclass, "$!pos", rx817_pos
    $P11 = rx817_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx817_pos)
    rx817_cstack = rx817_cur."!cursor_capture"($P11, "name")
    goto rxcap824_done2191
  rxcap824_fail2192:
    goto rx817_fail2175
  rxcap824_done2191:
    goto alt822_end2187
  alt822_end2187:
    nqp_rxcommit rx817_bstack, alt822_end2187
    rx817_cur."!cursor_pass"(rx817_pos, "param_var", 'backtrack'=>1)
    .return (rx817_cur)
  rx817_restart2174:
    repr_get_attr_obj rx817_cstack, rx817_cur, rx817_curclass, "$!cstack"
  rx817_fail2175:
    unless rx817_bstack, rx817_done2173
    pop $I19, rx817_bstack
    if_null rx817_cstack, rx817_cstack_done2178
    unless rx817_cstack, rx817_cstack_done2178
    dec $I19
    set $P11, rx817_cstack[$I19]
  rx817_cstack_done2178:
    pop rx817_rep, rx817_bstack
    pop rx817_pos, rx817_bstack
    pop $I19, rx817_bstack
    lt rx817_pos, -1, rx817_done2173
    lt rx817_pos, 0, rx817_fail2175
    eq $I19, 0, rx817_fail2175
    nqp_islist $I20, rx817_cstack
    unless $I20, rx817_jump2176
    elements $I18, rx817_bstack
    le $I18, 0, rx817_cut2177
    dec $I18
    set $I18, rx817_bstack[$I18]
  rx817_cut2177:
    assign rx817_cstack, $I18
  rx817_jump2176:
    jump $I19
  rx817_done2173:
    rx817_cur."!cursor_fail"()
    .return (rx817_cur) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_132_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1122
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx825_tgt
    .local int rx825_pos
    .local int rx825_off
    .local int rx825_eos
    .local int rx825_rep
    .local pmc rx825_cur
    .local pmc rx825_curclass
    .local pmc rx825_bstack
    .local pmc rx825_cstack
    (rx825_cur, rx825_tgt, rx825_pos, rx825_curclass, rx825_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx825_cur
    length rx825_eos, rx825_tgt
    eq $I19, 1, rx825_restart2195
    gt rx825_pos, rx825_eos, rx825_fail2196
    repr_get_attr_int $I11, self, rx825_curclass, "$!from"
    ne $I11, -1, rxscan826_done2202
    goto rxscan826_scan2201
  rxscan826_loop2200:
    inc rx825_pos
    gt rx825_pos, rx825_eos, rx825_fail2196
    repr_bind_attr_int rx825_cur, rx825_curclass, "$!from", rx825_pos
  rxscan826_scan2201:
    nqp_rxmark rx825_bstack, rxscan826_loop2200, rx825_pos, 0
  rxscan826_done2202:
    add $I11, rx825_pos, 1
    gt $I11, rx825_eos, rx825_fail2196
    substr $S10, rx825_tgt, rx825_pos, 1
    ne $S10, ucs4:":", rx825_fail2196
    add rx825_pos, 1
    repr_bind_attr_int rx825_cur, rx825_curclass, "$!pos", rx825_pos
    $P11 = rx825_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx825_curclass, "$!pos"
    lt $I11, 0, rx825_fail2196
    nqp_rxmark rx825_bstack, rxsubrule827_pass2203, -1, 0
  rxsubrule827_pass2203:
    rx825_cstack = rx825_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx825_pos, $P11, rx825_curclass, "$!pos"
    rx825_cur."!cursor_pass"(rx825_pos, "named_param", 'backtrack'=>1)
    .return (rx825_cur)
  rx825_restart2195:
    repr_get_attr_obj rx825_cstack, rx825_cur, rx825_curclass, "$!cstack"
  rx825_fail2196:
    unless rx825_bstack, rx825_done2194
    pop $I19, rx825_bstack
    if_null rx825_cstack, rx825_cstack_done2199
    unless rx825_cstack, rx825_cstack_done2199
    dec $I19
    set $P11, rx825_cstack[$I19]
  rx825_cstack_done2199:
    pop rx825_rep, rx825_bstack
    pop rx825_pos, rx825_bstack
    pop $I19, rx825_bstack
    lt rx825_pos, -1, rx825_done2194
    lt rx825_pos, 0, rx825_fail2196
    eq $I19, 0, rx825_fail2196
    nqp_islist $I20, rx825_cstack
    unless $I20, rx825_jump2197
    elements $I18, rx825_bstack
    le $I18, 0, rx825_cut2198
    dec $I18
    set $I18, rx825_bstack[$I18]
  rx825_cut2198:
    assign rx825_cstack, $I18
  rx825_jump2197:
    jump $I19
  rx825_done2194:
    rx825_cur."!cursor_fail"()
    .return (rx825_cur) 
.end
.HLL "nqp"
.namespace []
.sub "default_value" :subid("cuid_133_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1126
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx828_tgt
    .local int rx828_pos
    .local int rx828_off
    .local int rx828_eos
    .local int rx828_rep
    .local pmc rx828_cur
    .local pmc rx828_curclass
    .local pmc rx828_bstack
    .local pmc rx828_cstack
    (rx828_cur, rx828_tgt, rx828_pos, rx828_curclass, rx828_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx828_cur
    length rx828_eos, rx828_tgt
    eq $I19, 1, rx828_restart2206
    gt rx828_pos, rx828_eos, rx828_fail2207
    repr_get_attr_int $I11, self, rx828_curclass, "$!from"
    ne $I11, -1, rxscan829_done2213
    goto rxscan829_scan2212
  rxscan829_loop2211:
    inc rx828_pos
    gt rx828_pos, rx828_eos, rx828_fail2207
    repr_bind_attr_int rx828_cur, rx828_curclass, "$!from", rx828_pos
  rxscan829_scan2212:
    nqp_rxmark rx828_bstack, rxscan829_loop2211, rx828_pos, 0
  rxscan829_done2213:
    repr_bind_attr_int rx828_cur, rx828_curclass, "$!pos", rx828_pos
    $P11 = rx828_cur."ws"()
    repr_get_attr_int $I11, $P11, rx828_curclass, "$!pos"
    lt $I11, 0, rx828_fail2207
    repr_get_attr_int rx828_pos, $P11, rx828_curclass, "$!pos"
    add $I11, rx828_pos, 1
    gt $I11, rx828_eos, rx828_fail2207
    substr $S10, rx828_tgt, rx828_pos, 1
    ne $S10, ucs4:"=", rx828_fail2207
    add rx828_pos, 1
    repr_bind_attr_int rx828_cur, rx828_curclass, "$!pos", rx828_pos
    $P11 = rx828_cur."ws"()
    repr_get_attr_int $I11, $P11, rx828_curclass, "$!pos"
    lt $I11, 0, rx828_fail2207
    repr_get_attr_int rx828_pos, $P11, rx828_curclass, "$!pos"
    repr_bind_attr_int rx828_cur, rx828_curclass, "$!pos", rx828_pos
    $P11 = rx828_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx828_curclass, "$!pos"
    lt $I11, 0, rx828_fail2207
    nqp_rxmark rx828_bstack, rxsubrule832_pass2216, -1, 0
  rxsubrule832_pass2216:
    rx828_cstack = rx828_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx828_pos, $P11, rx828_curclass, "$!pos"
    repr_bind_attr_int rx828_cur, rx828_curclass, "$!pos", rx828_pos
    $P11 = rx828_cur."ws"()
    repr_get_attr_int $I11, $P11, rx828_curclass, "$!pos"
    lt $I11, 0, rx828_fail2207
    repr_get_attr_int rx828_pos, $P11, rx828_curclass, "$!pos"
    rx828_cur."!cursor_pass"(rx828_pos, "default_value", 'backtrack'=>1)
    .return (rx828_cur)
  rx828_restart2206:
    repr_get_attr_obj rx828_cstack, rx828_cur, rx828_curclass, "$!cstack"
  rx828_fail2207:
    unless rx828_bstack, rx828_done2205
    pop $I19, rx828_bstack
    if_null rx828_cstack, rx828_cstack_done2210
    unless rx828_cstack, rx828_cstack_done2210
    dec $I19
    set $P11, rx828_cstack[$I19]
  rx828_cstack_done2210:
    pop rx828_rep, rx828_bstack
    pop rx828_pos, rx828_bstack
    pop $I19, rx828_bstack
    lt rx828_pos, -1, rx828_done2205
    lt rx828_pos, 0, rx828_fail2207
    eq $I19, 0, rx828_fail2207
    nqp_islist $I20, rx828_cstack
    unless $I20, rx828_jump2208
    elements $I18, rx828_bstack
    le $I18, 0, rx828_cut2209
    dec $I18
    set $I18, rx828_bstack[$I18]
  rx828_cut2209:
    assign rx828_cstack, $I18
  rx828_jump2208:
    jump $I19
  rx828_done2205:
    rx828_cur."!cursor_fail"()
    .return (rx828_cur) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_134_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1128
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx834_tgt
    .local int rx834_pos
    .local int rx834_off
    .local int rx834_eos
    .local int rx834_rep
    .local pmc rx834_cur
    .local pmc rx834_curclass
    .local pmc rx834_bstack
    .local pmc rx834_cstack
    (rx834_cur, rx834_tgt, rx834_pos, rx834_curclass, rx834_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx834_cur
    length rx834_eos, rx834_tgt
    eq $I19, 1, rx834_restart2220
    gt rx834_pos, rx834_eos, rx834_fail2221
    repr_get_attr_int $I11, self, rx834_curclass, "$!from"
    ne $I11, -1, rxscan835_done2227
    goto rxscan835_scan2226
  rxscan835_loop2225:
    inc rx834_pos
    gt rx834_pos, rx834_eos, rx834_fail2221
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!from", rx834_pos
  rxscan835_scan2226:
    nqp_rxmark rx834_bstack, rxscan835_loop2225, rx834_pos, 0
  rxscan835_done2227:
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!pos", rx834_pos
    $P11 = rx834_cur."ws"()
    repr_get_attr_int $I11, $P11, rx834_curclass, "$!pos"
    lt $I11, 0, rx834_fail2221
    repr_get_attr_int rx834_pos, $P11, rx834_curclass, "$!pos"
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!pos", rx834_pos
    $P11 = rx834_cur."trait_mod"()
    repr_get_attr_int $I11, $P11, rx834_curclass, "$!pos"
    lt $I11, 0, rx834_fail2221
    nqp_rxmark rx834_bstack, rxsubrule837_pass2229, -1, 0
  rxsubrule837_pass2229:
    rx834_cstack = rx834_cur."!cursor_capture"($P11, "trait_mod")
    repr_get_attr_int rx834_pos, $P11, rx834_curclass, "$!pos"
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!pos", rx834_pos
    $P11 = rx834_cur."ws"()
    repr_get_attr_int $I11, $P11, rx834_curclass, "$!pos"
    lt $I11, 0, rx834_fail2221
    repr_get_attr_int rx834_pos, $P11, rx834_curclass, "$!pos"
    rx834_cur."!cursor_pass"(rx834_pos, "trait", 'backtrack'=>1)
    .return (rx834_cur)
  rx834_restart2220:
    repr_get_attr_obj rx834_cstack, rx834_cur, rx834_curclass, "$!cstack"
  rx834_fail2221:
    unless rx834_bstack, rx834_done2219
    pop $I19, rx834_bstack
    if_null rx834_cstack, rx834_cstack_done2224
    unless rx834_cstack, rx834_cstack_done2224
    dec $I19
    set $P11, rx834_cstack[$I19]
  rx834_cstack_done2224:
    pop rx834_rep, rx834_bstack
    pop rx834_pos, rx834_bstack
    pop $I19, rx834_bstack
    lt rx834_pos, -1, rx834_done2219
    lt rx834_pos, 0, rx834_fail2221
    eq $I19, 0, rx834_fail2221
    nqp_islist $I20, rx834_cstack
    unless $I20, rx834_jump2222
    elements $I18, rx834_bstack
    le $I18, 0, rx834_cut2223
    dec $I18
    set $I18, rx834_bstack[$I18]
  rx834_cut2223:
    assign rx834_cstack, $I18
  rx834_jump2222:
    jump $I19
  rx834_done2219:
    rx834_cur."!cursor_fail"()
    .return (rx834_cur) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod" :subid("cuid_135_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1130
    .param pmc self 
    $P5001 = self."!protoregex"("trait_mod")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_136_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1131
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx839_tgt
    .local int rx839_pos
    .local int rx839_off
    .local int rx839_eos
    .local int rx839_rep
    .local pmc rx839_cur
    .local pmc rx839_curclass
    .local pmc rx839_bstack
    .local pmc rx839_cstack
    (rx839_cur, rx839_tgt, rx839_pos, rx839_curclass, rx839_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx839_cur
    length rx839_eos, rx839_tgt
    eq $I19, 1, rx839_restart2233
    gt rx839_pos, rx839_eos, rx839_fail2234
    repr_get_attr_int $I11, self, rx839_curclass, "$!from"
    ne $I11, -1, rxscan840_done2240
    goto rxscan840_scan2239
  rxscan840_loop2238:
    inc rx839_pos
    gt rx839_pos, rx839_eos, rx839_fail2234
    repr_bind_attr_int rx839_cur, rx839_curclass, "$!from", rx839_pos
  rxscan840_scan2239:
    nqp_rxmark rx839_bstack, rxscan840_loop2238, rx839_pos, 0
  rxscan840_done2240:
    nqp_rxmark rx839_bstack, rxcap841_fail2242, rx839_pos, 0
    add $I11, rx839_pos, 2
    gt $I11, rx839_eos, rx839_fail2234
    substr $S10, rx839_tgt, rx839_pos, 2
    ne $S10, ucs4:"is", rx839_fail2234
    add rx839_pos, 2
    nqp_rxpeek $I19, rx839_bstack, rxcap841_fail2242
    inc $I19
    set $I11, rx839_bstack[$I19]
    repr_bind_attr_int rx839_cur, rx839_curclass, "$!pos", rx839_pos
    $P11 = rx839_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx839_pos)
    rx839_cstack = rx839_cur."!cursor_capture"($P11, "sym")
    goto rxcap841_done2241
  rxcap841_fail2242:
    goto rx839_fail2234
  rxcap841_done2241:
    repr_bind_attr_int rx839_cur, rx839_curclass, "$!pos", rx839_pos
    $P11 = rx839_cur."ws"()
    repr_get_attr_int $I11, $P11, rx839_curclass, "$!pos"
    lt $I11, 0, rx839_fail2234
    repr_get_attr_int rx839_pos, $P11, rx839_curclass, "$!pos"
    repr_bind_attr_int rx839_cur, rx839_curclass, "$!pos", rx839_pos
    $P11 = rx839_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx839_curclass, "$!pos"
    lt $I11, 0, rx839_fail2234
    nqp_rxmark rx839_bstack, rxsubrule843_pass2244, -1, 0
  rxsubrule843_pass2244:
    rx839_cstack = rx839_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx839_pos, $P11, rx839_curclass, "$!pos"
    nqp_rxmark rx839_bstack, rxquantr844_done2246, rx839_pos, 0
  rxquantr844_loop2245:
    repr_bind_attr_int rx839_cur, rx839_curclass, "$!pos", rx839_pos
    $P11 = rx839_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx839_curclass, "$!pos"
    lt $I11, 0, rx839_fail2234
    goto rxsubrule845_pass2247
  rxsubrule845_back2248:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx839_curclass, "$!pos"
    lt $I11, 0, rx839_fail2234
  rxsubrule845_pass2247:
    rx839_cstack = rx839_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule845_back2248
    push rx839_bstack, $I11
    push rx839_bstack, 0
    push rx839_bstack, rx839_pos
    elements $I11, rx839_cstack
    push rx839_bstack, $I11
    repr_get_attr_int rx839_pos, $P11, rx839_curclass, "$!pos"
    nqp_rxpeek $I19, rx839_bstack, rxquantr844_done2246
    inc $I19
    inc $I19
    set rx839_rep, rx839_bstack[$I19]
    nqp_rxcommit rx839_bstack, rxquantr844_done2246
    inc rx839_rep
  rxquantr844_done2246:
    repr_bind_attr_int rx839_cur, rx839_curclass, "$!pos", rx839_pos
    $P11 = rx839_cur."ws"()
    repr_get_attr_int $I11, $P11, rx839_curclass, "$!pos"
    lt $I11, 0, rx839_fail2234
    repr_get_attr_int rx839_pos, $P11, rx839_curclass, "$!pos"
    rx839_cur."!cursor_pass"(rx839_pos, "trait_mod:sym<is>", 'backtrack'=>1)
    .return (rx839_cur)
  rx839_restart2233:
    repr_get_attr_obj rx839_cstack, rx839_cur, rx839_curclass, "$!cstack"
  rx839_fail2234:
    unless rx839_bstack, rx839_done2232
    pop $I19, rx839_bstack
    if_null rx839_cstack, rx839_cstack_done2237
    unless rx839_cstack, rx839_cstack_done2237
    dec $I19
    set $P11, rx839_cstack[$I19]
  rx839_cstack_done2237:
    pop rx839_rep, rx839_bstack
    pop rx839_pos, rx839_bstack
    pop $I19, rx839_bstack
    lt rx839_pos, -1, rx839_done2232
    lt rx839_pos, 0, rx839_fail2234
    eq $I19, 0, rx839_fail2234
    nqp_islist $I20, rx839_cstack
    unless $I20, rx839_jump2235
    elements $I18, rx839_bstack
    le $I18, 0, rx839_cut2236
    dec $I18
    set $I18, rx839_bstack[$I18]
  rx839_cut2236:
    assign rx839_cstack, $I18
  rx839_jump2235:
    jump $I19
  rx839_done2232:
    rx839_cur."!cursor_fail"()
    .return (rx839_cur) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_137_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1133
    .param pmc _lex_param_0 
    .const 'Sub' $P5012 = 'cuid_403_1351203235.318' 
    capture_lex $P5012 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx847_tgt
    .local int rx847_pos
    .local int rx847_off
    .local int rx847_eos
    .local int rx847_rep
    .local pmc rx847_cur
    .local pmc rx847_curclass
    .local pmc rx847_bstack
    .local pmc rx847_cstack
    (rx847_cur, rx847_tgt, rx847_pos, rx847_curclass, rx847_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx847_cur
    length rx847_eos, rx847_tgt
    eq $I19, 1, rx847_restart2252
    gt rx847_pos, rx847_eos, rx847_fail2253
    repr_get_attr_int $I11, self, rx847_curclass, "$!from"
    ne $I11, -1, rxscan848_done2259
    goto rxscan848_scan2258
  rxscan848_loop2257:
    inc rx847_pos
    gt rx847_pos, rx847_eos, rx847_fail2253
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!from", rx847_pos
  rxscan848_scan2258:
    nqp_rxmark rx847_bstack, rxscan848_loop2257, rx847_pos, 0
  rxscan848_done2259:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt849_02261
    nqp_push_label $P11, alt849_12301
    nqp_rxmark rx847_bstack, alt849_end2260, -1, 0
    rx847_cur."!alt"(rx847_pos, "alt_nfa__33_1351203237.602", $P11)
    goto rx847_fail2253
  alt849_02261:
    nqp_rxmark rx847_bstack, rxcap850_fail2263, rx847_pos, 0
    add $I11, rx847_pos, 5
    gt $I11, rx847_eos, rx847_fail2253
    substr $S10, rx847_tgt, rx847_pos, 5
    ne $S10, ucs4:"proto", rx847_fail2253
    add rx847_pos, 5
    nqp_rxpeek $I19, rx847_bstack, rxcap850_fail2263
    inc $I19
    set $I11, rx847_bstack[$I19]
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx847_pos)
    rx847_cstack = rx847_cur."!cursor_capture"($P11, "proto")
    goto rxcap850_done2262
  rxcap850_fail2263:
    goto rx847_fail2253
  rxcap850_done2262:
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt852_02266
    nqp_push_label $P11, alt852_12267
    nqp_push_label $P11, alt852_22268
    nqp_rxmark rx847_bstack, alt852_end2265, -1, 0
    rx847_cur."!alt"(rx847_pos, "alt_nfa__31_1351203237.601", $P11)
    goto rx847_fail2253
  alt852_02266:
    add $I11, rx847_pos, 5
    gt $I11, rx847_eos, rx847_fail2253
    substr $S10, rx847_tgt, rx847_pos, 5
    ne $S10, ucs4:"regex", rx847_fail2253
    add rx847_pos, 5
    goto alt852_end2265
  alt852_12267:
    add $I11, rx847_pos, 5
    gt $I11, rx847_eos, rx847_fail2253
    substr $S10, rx847_tgt, rx847_pos, 5
    ne $S10, ucs4:"token", rx847_fail2253
    add rx847_pos, 5
    goto alt852_end2265
  alt852_22268:
    add $I11, rx847_pos, 4
    gt $I11, rx847_eos, rx847_fail2253
    substr $S10, rx847_tgt, rx847_pos, 4
    ne $S10, ucs4:"rule", rx847_fail2253
    add rx847_pos, 4
    goto alt852_end2265
  alt852_end2265:
    nqp_rxcommit rx847_bstack, alt852_end2265
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
  alt854_02271:
    nqp_rxmark rx847_bstack, alt854_12277, rx847_pos, 0
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    add $I11, rx847_pos, 3
    gt $I11, rx847_eos, rx847_fail2253
    substr $S10, rx847_tgt, rx847_pos, 3
    ne $S10, ucs4:"::(", rx847_fail2253
    add rx847_pos, 3
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."variable"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    nqp_rxmark rx847_bstack, rxsubrule857_pass2274, -1, 0
  rxsubrule857_pass2274:
    rx847_cstack = rx847_cur."!cursor_capture"($P11, "latename=variable")
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    add $I11, rx847_pos, 1
    gt $I11, rx847_eos, rx847_fail2253
    substr $S10, rx847_tgt, rx847_pos, 1
    ne $S10, ucs4:")", rx847_fail2253
    add rx847_pos, 1
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    goto alt854_end2270
  alt854_12277:
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    nqp_rxmark rx847_bstack, rxsubrule861_pass2279, -1, 0
  rxsubrule861_pass2279:
    rx847_cstack = rx847_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
  alt854_end2270:
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
  alt864_02283:
    nqp_rxmark rx847_bstack, alt864_12286, rx847_pos, 0
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    add $I11, rx847_pos, 3
    gt $I11, rx847_eos, rx847_fail2253
    substr $S10, rx847_tgt, rx847_pos, 3
    ne $S10, ucs4:"{*}", rx847_fail2253
    add rx847_pos, 3
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    goto alt864_end2282
  alt864_12286:
    nqp_rxmark rx847_bstack, alt864_22291, rx847_pos, 0
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    add $I11, rx847_pos, 1
    gt $I11, rx847_eos, rx847_fail2253
    substr $S10, rx847_tgt, rx847_pos, 1
    ne $S10, ucs4:"{", rx847_fail2253
    add rx847_pos, 1
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    add $I11, rx847_pos, 5
    gt $I11, rx847_eos, rx847_fail2253
    substr $S10, rx847_tgt, rx847_pos, 5
    ne $S10, ucs4:"<...>", rx847_fail2253
    add rx847_pos, 5
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    add $I11, rx847_pos, 1
    gt $I11, rx847_eos, rx847_fail2253
    substr $S10, rx847_tgt, rx847_pos, 1
    ne $S10, ucs4:"}", rx847_fail2253
    add rx847_pos, 1
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    goto alt864_end2282
  alt864_22291:
    nqp_rxmark rx847_bstack, alt864_32296, rx847_pos, 0
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    add $I11, rx847_pos, 1
    gt $I11, rx847_eos, rx847_fail2253
    substr $S10, rx847_tgt, rx847_pos, 1
    ne $S10, ucs4:"{", rx847_fail2253
    add rx847_pos, 1
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    add $I11, rx847_pos, 3
    gt $I11, rx847_eos, rx847_fail2253
    substr $S10, rx847_tgt, rx847_pos, 3
    ne $S10, ucs4:"<*>", rx847_fail2253
    add rx847_pos, 3
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    add $I11, rx847_pos, 1
    gt $I11, rx847_eos, rx847_fail2253
    substr $S10, rx847_tgt, rx847_pos, 1
    ne $S10, ucs4:"}", rx847_fail2253
    add rx847_pos, 1
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    goto alt864_end2282
  alt864_32296:
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."panic"("Proto regex body must be \\{*\\} (or <*> or <...>, which are deprecated)")
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
  alt864_end2282:
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    goto alt849_end2260
  alt849_12301:
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    nqp_rxmark rx847_bstack, rxcap880_fail2304, rx847_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt881_02306
    nqp_push_label $P11, alt881_12307
    nqp_push_label $P11, alt881_22308
    nqp_rxmark rx847_bstack, alt881_end2305, -1, 0
    rx847_cur."!alt"(rx847_pos, "alt_nfa__32_1351203237.602", $P11)
    goto rx847_fail2253
  alt881_02306:
    add $I11, rx847_pos, 5
    gt $I11, rx847_eos, rx847_fail2253
    substr $S10, rx847_tgt, rx847_pos, 5
    ne $S10, ucs4:"regex", rx847_fail2253
    add rx847_pos, 5
    goto alt881_end2305
  alt881_12307:
    add $I11, rx847_pos, 5
    gt $I11, rx847_eos, rx847_fail2253
    substr $S10, rx847_tgt, rx847_pos, 5
    ne $S10, ucs4:"token", rx847_fail2253
    add rx847_pos, 5
    goto alt881_end2305
  alt881_22308:
    add $I11, rx847_pos, 4
    gt $I11, rx847_eos, rx847_fail2253
    substr $S10, rx847_tgt, rx847_pos, 4
    ne $S10, ucs4:"rule", rx847_fail2253
    add rx847_pos, 4
    goto alt881_end2305
  alt881_end2305:
    nqp_rxcommit rx847_bstack, alt881_end2305
    nqp_rxpeek $I19, rx847_bstack, rxcap880_fail2304
    inc $I19
    set $I11, rx847_bstack[$I19]
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx847_pos)
    rx847_cstack = rx847_cur."!cursor_capture"($P11, "sym")
    goto rxcap880_done2303
  rxcap880_fail2304:
    goto rx847_fail2253
  rxcap880_done2303:
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
  alt884_02312:
    nqp_rxmark rx847_bstack, alt884_12318, rx847_pos, 0
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    add $I11, rx847_pos, 3
    gt $I11, rx847_eos, rx847_fail2253
    substr $S10, rx847_tgt, rx847_pos, 3
    ne $S10, ucs4:"::(", rx847_fail2253
    add rx847_pos, 3
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."variable"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    nqp_rxmark rx847_bstack, rxsubrule887_pass2315, -1, 0
  rxsubrule887_pass2315:
    rx847_cstack = rx847_cur."!cursor_capture"($P11, "latename=variable")
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    add $I11, rx847_pos, 1
    gt $I11, rx847_eos, rx847_fail2253
    substr $S10, rx847_tgt, rx847_pos, 1
    ne $S10, ucs4:")", rx847_fail2253
    add rx847_pos, 1
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    goto alt884_end2311
  alt884_12318:
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    nqp_rxmark rx847_bstack, rxsubrule891_pass2320, -1, 0
  rxsubrule891_pass2320:
    rx847_cstack = rx847_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
  alt884_end2311:
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    nqp_rxmark rx847_bstack, rxquantr896_done2326, rx847_pos, 0
  rxquantr896_loop2325:
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    add $I11, rx847_pos, 1
    gt $I11, rx847_eos, rx847_fail2253
    substr $S10, rx847_tgt, rx847_pos, 1
    ne $S10, ucs4:"(", rx847_fail2253
    add rx847_pos, 1
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."signature"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    nqp_rxmark rx847_bstack, rxsubrule899_pass2329, -1, 0
  rxsubrule899_pass2329:
    rx847_cstack = rx847_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    add $I11, rx847_pos, 1
    gt $I11, rx847_eos, rx847_fail2253
    substr $S10, rx847_tgt, rx847_pos, 1
    ne $S10, ucs4:")", rx847_fail2253
    add rx847_pos, 1
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    nqp_rxpeek $I19, rx847_bstack, rxquantr896_done2326
    inc $I19
    inc $I19
    set rx847_rep, rx847_bstack[$I19]
    nqp_rxcommit rx847_bstack, rxquantr896_done2326
    inc rx847_rep
  rxquantr896_done2326:
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    store_lex unicode:"$\x{a2}", rx847_cur
    unless_null $P101, fallback2333
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2334
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2334:
    unless_null $P5002, vivi_9032335
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_9032335:
    set $P101, $P5002
  fallback2333:
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    store_lex unicode:"$\x{a2}", rx847_cur
    $P5009 = $P102."MATCH"()
    set $P103, $P5009
    .const 'Sub' $P5010 = 'cuid_403_1351203235.318' 
    capture_lex $P5010
    $P5011 = $P5010()
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    add $I11, rx847_pos, 1
    gt $I11, rx847_eos, rx847_fail2253
    substr $S10, rx847_tgt, rx847_pos, 1
    ne $S10, ucs4:"{", rx847_fail2253
    add rx847_pos, 1
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    nqp_rxmark rx847_bstack, rxsubrule915_pass2376, -1, 0
  rxsubrule915_pass2376:
    rx847_cstack = rx847_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    add $I11, rx847_pos, 1
    gt $I11, rx847_eos, rx847_fail2253
    substr $S10, rx847_tgt, rx847_pos, 1
    ne $S10, ucs4:"}", rx847_fail2253
    add rx847_pos, 1
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2253
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    goto alt849_end2260
  alt849_end2260:
    nqp_rxcommit rx847_bstack, alt849_end2260
    rx847_cur."!cursor_pass"(rx847_pos, "regex_declarator", 'backtrack'=>1)
    .return (rx847_cur)
  rx847_restart2252:
    repr_get_attr_obj rx847_cstack, rx847_cur, rx847_curclass, "$!cstack"
  rx847_fail2253:
    unless rx847_bstack, rx847_done2251
    pop $I19, rx847_bstack
    if_null rx847_cstack, rx847_cstack_done2256
    unless rx847_cstack, rx847_cstack_done2256
    dec $I19
    set $P11, rx847_cstack[$I19]
  rx847_cstack_done2256:
    pop rx847_rep, rx847_bstack
    pop rx847_pos, rx847_bstack
    pop $I19, rx847_bstack
    lt rx847_pos, -1, rx847_done2251
    lt rx847_pos, 0, rx847_fail2253
    eq $I19, 0, rx847_fail2253
    nqp_islist $I20, rx847_cstack
    unless $I20, rx847_jump2254
    elements $I18, rx847_bstack
    le $I18, 0, rx847_cut2255
    dec $I18
    set $I18, rx847_bstack[$I18]
  rx847_cut2255:
    assign rx847_cstack, $I18
  rx847_jump2254:
    jump $I19
  rx847_done2251:
    rx847_cur."!cursor_fail"()
    .return (rx847_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_403_1351203235.318") :anon :lex :outer("cuid_137_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1154

    find_dynamic_lex $P5001, "%*RX"
    unless_null $P5001, fallback2337
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2338
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2338:
    unless_null $P5002, vivi_9052339
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_9052339:
    set $P5001, $P5002
  fallback2337:
    find_lex $P5010, "$/"
    unless_null $P5010, fallback2340
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5011
  fallback2340:
    set $P5009, $P5010["sym"]
    unless_null $P5009, fallback2341
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5012
  fallback2341:
    set $S5001, $P5009
    iseq $I5001, $S5001, "rule"
    box $P5013, $I5001
    set $P5001["s"], $P5013
    find_dynamic_lex $P5014, "%*RX"
    unless_null $P5014, fallback2342
    nqp_get_sc_object $P5017, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["%RX"]
    unless_null $P5015, fallback2343
    nqp_get_sc_object $P5019, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%RX"], $P5020
    set $P5015, $P5020
  fallback2343:
    unless_null $P5015, vivi_9062344
    die "Contextual %*RX not found"
    box $P5021, "Contextual %*RX not found"
    set $P5015, $P5021
  vivi_9062344:
    set $P5014, $P5015
  fallback2342:
    find_lex $P5023, "$/"
    unless_null $P5023, fallback2347
    nqp_get_sc_object $P5024, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5023, $P5024
  fallback2347:
    set $P5022, $P5023["sym"]
    unless_null $P5022, fallback2348
    nqp_get_sc_object $P5025, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5022, $P5025
  fallback2348:
    set $S5002, $P5022
    iseq $I5002, $S5002, "token"
    set $I5004, $I5002
    if $I5002 goto unless907_end2346 
    find_lex $P5027, "$/"
    unless_null $P5027, fallback2349
    nqp_get_sc_object $P5028, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5027, $P5028
  fallback2349:
    set $P5026, $P5027["sym"]
    unless_null $P5026, fallback2350
    nqp_get_sc_object $P5029, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5026, $P5029
  fallback2350:
    set $S5003, $P5026
    iseq $I5003, $S5003, "rule"
    set $I5004, $I5003
  unless907_end2346:
    box $P5030, $I5004
    set $P5014["r"], $P5030
    find_dynamic_lex $P5031, "%*RX"
    unless_null $P5031, fallback2351
    nqp_get_sc_object $P5034, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%RX"]
    unless_null $P5032, fallback2352
    nqp_get_sc_object $P5036, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%RX"], $P5037
    set $P5032, $P5037
  fallback2352:
    unless_null $P5032, vivi_9082353
    die "Contextual %*RX not found"
    box $P5038, "Contextual %*RX not found"
    set $P5032, $P5038
  vivi_9082353:
    set $P5031, $P5032
  fallback2351:
    find_lex $P5040, "$/"
    unless_null $P5040, fallback2356
    nqp_get_sc_object $P5041, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5040, $P5041
  fallback2356:
    set $P5039, $P5040["deflongname"]
    unless_null $P5039, fallback2357
    nqp_get_sc_object $P5042, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5039, $P5042
  fallback2357:
    unless $P5039 goto if909_else2354 
.annotate 'line', 1157
    find_lex $P5044, "$/"
    unless_null $P5044, fallback2358
    nqp_get_sc_object $P5045, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5044, $P5045
  fallback2358:
    set $P5043, $P5044["deflongname"]
    unless_null $P5043, fallback2359
    nqp_get_sc_object $P5046, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5043, $P5046
  fallback2359:
    $P5047 = $P5043."ast"()
    set $P5052, $P5047
    goto if909_end2355
  if909_else2354:
    find_lex $P5049, "$/"
    unless_null $P5049, fallback2360
    nqp_get_sc_object $P5050, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5049, $P5050
  fallback2360:
    set $P5048, $P5049["latename"]
    unless_null $P5048, fallback2361
    nqp_get_sc_object $P5051, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5048, $P5051
  fallback2361:
    set $S5005, $P5048
    concat $S5004, "!!LATENAME!!", $S5005
    box $P5053, $S5004
    set $P5052, $P5053
  if909_end2355:
    set $P5031["name"], $P5052
    find_dynamic_lex $P5054, "%*RX"
    unless_null $P5054, fallback2362
    nqp_get_sc_object $P5057, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["%RX"]
    unless_null $P5055, fallback2363
    nqp_get_sc_object $P5059, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5058, $P5059
    new $P5060, 'Hash'
    set $P5058["%RX"], $P5060
    set $P5055, $P5060
  fallback2363:
    unless_null $P5055, vivi_9102364
    die "Contextual %*RX not found"
    box $P5061, "Contextual %*RX not found"
    set $P5055, $P5061
  vivi_9102364:
    set $P5054, $P5055
  fallback2362:
.annotate 'line', 1158
    find_dynamic_lex $P5062, "$*W"
    unless_null $P5062, fallback2365
    nqp_get_sc_object $P5065, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$W"]
    unless_null $P5063, fallback2366
    nqp_get_sc_object $P5066, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5063, $P5066
  fallback2366:
    unless_null $P5063, vivi_9112367
    die "Contextual $*W not found"
    box $P5067, "Contextual $*W not found"
    set $P5063, $P5067
  vivi_9112367:
    set $P5062, $P5063
  fallback2365:
    find_dynamic_lex $P5068, "$*W"
    unless_null $P5068, fallback2368
    nqp_get_sc_object $P5071, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5070, $P5071
    set $P5069, $P5070["$W"]
    unless_null $P5069, fallback2369
    nqp_get_sc_object $P5072, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5069, $P5072
  fallback2369:
    unless_null $P5069, vivi_9122370
    die "Contextual $*W not found"
    box $P5073, "Contextual $*W not found"
    set $P5069, $P5073
  vivi_9122370:
    set $P5068, $P5069
  fallback2368:
    $P5074 = $P5068."cur_lexpad"()
    find_dynamic_lex $P5076, "%*RX"
    unless_null $P5076, fallback2371
    nqp_get_sc_object $P5079, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5078, $P5079
    set $P5077, $P5078["%RX"]
    unless_null $P5077, fallback2372
    nqp_get_sc_object $P5081, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5080, $P5081
    new $P5082, 'Hash'
    set $P5080["%RX"], $P5082
    set $P5077, $P5082
  fallback2372:
    unless_null $P5077, vivi_9132373
    die "Contextual %*RX not found"
    box $P5083, "Contextual %*RX not found"
    set $P5077, $P5083
  vivi_9132373:
    set $P5076, $P5077
  fallback2371:
    set $P5075, $P5076["name"]
    unless_null $P5075, fallback2374
    nqp_get_sc_object $P5084, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5075, $P5084
  fallback2374:
    $P5085 = $P5062."create_code"($P5074, $P5075, 0, "NQPRegex" :named("code_type_name"))
    set $P5054["code"], $P5085
    .return ($P5085) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_138_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1164
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx917_tgt
    .local int rx917_pos
    .local int rx917_off
    .local int rx917_eos
    .local int rx917_rep
    .local pmc rx917_cur
    .local pmc rx917_curclass
    .local pmc rx917_bstack
    .local pmc rx917_cstack
    (rx917_cur, rx917_tgt, rx917_pos, rx917_curclass, rx917_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx917_cur
    length rx917_eos, rx917_tgt
    eq $I19, 1, rx917_restart2380
    gt rx917_pos, rx917_eos, rx917_fail2381
    repr_get_attr_int $I11, self, rx917_curclass, "$!from"
    ne $I11, -1, rxscan918_done2387
    goto rxscan918_scan2386
  rxscan918_loop2385:
    inc rx917_pos
    gt rx917_pos, rx917_eos, rx917_fail2381
    repr_bind_attr_int rx917_cur, rx917_curclass, "$!from", rx917_pos
  rxscan918_scan2386:
    nqp_rxmark rx917_bstack, rxscan918_loop2385, rx917_pos, 0
  rxscan918_done2387:
    add $I11, rx917_pos, 1
    gt $I11, rx917_eos, rx917_fail2381
    substr $S10, rx917_tgt, rx917_pos, 1
    ne $S10, ucs4:".", rx917_fail2381
    add rx917_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt919_02389
    nqp_push_label $P11, alt919_12391
    nqp_rxmark rx917_bstack, alt919_end2388, -1, 0
    rx917_cur."!alt"(rx917_pos, "alt_nfa__34_1351203237.623", $P11)
    goto rx917_fail2381
  alt919_02389:
    repr_bind_attr_int rx917_cur, rx917_curclass, "$!pos", rx917_pos
    $P11 = rx917_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx917_curclass, "$!pos"
    lt $I11, 0, rx917_fail2381
    nqp_rxmark rx917_bstack, rxsubrule920_pass2390, -1, 0
  rxsubrule920_pass2390:
    rx917_cstack = rx917_cur."!cursor_capture"($P11, "longname=deflongname")
    repr_get_attr_int rx917_pos, $P11, rx917_curclass, "$!pos"
    goto alt919_end2388
  alt919_12391:
    ge rx917_pos, rx917_eos, rx917_fail2381
    substr $S11, rx917_tgt, rx917_pos, 1
    index $I11, ucs4:"'\"", $S11
    lt $I11, 0, rx917_fail2381
    repr_bind_attr_int rx917_cur, rx917_curclass, "$!pos", rx917_pos
    $P11 = rx917_cur."quote"()
    repr_get_attr_int $I11, $P11, rx917_curclass, "$!pos"
    lt $I11, 0, rx917_fail2381
    nqp_rxmark rx917_bstack, rxsubrule921_pass2392, -1, 0
  rxsubrule921_pass2392:
    rx917_cstack = rx917_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx917_pos, $P11, rx917_curclass, "$!pos"
  alt922_02394:
    nqp_rxmark rx917_bstack, alt922_12395, rx917_pos, 0
    ge rx917_pos, rx917_eos, rx917_fail2381
    substr $S11, rx917_tgt, rx917_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx917_fail2381
    goto alt922_end2393
  alt922_12395:
    repr_bind_attr_int rx917_cur, rx917_curclass, "$!pos", rx917_pos
    $P11 = rx917_cur."panic"("Quoted method name requires parenthesized arguments")
    repr_get_attr_int $I11, $P11, rx917_curclass, "$!pos"
    lt $I11, 0, rx917_fail2381
    repr_get_attr_int rx917_pos, $P11, rx917_curclass, "$!pos"
  alt922_end2393:
    goto alt919_end2388
  alt919_end2388:
    nqp_rxcommit rx917_bstack, alt919_end2388
    nqp_rxmark rx917_bstack, rxquantr924_done2398, rx917_pos, 0
  rxquantr924_loop2397:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt925_02400
    nqp_push_label $P11, alt925_12402
    nqp_rxmark rx917_bstack, alt925_end2399, -1, 0
    rx917_cur."!alt"(rx917_pos, "alt_nfa__35_1351203237.624", $P11)
    goto rx917_fail2381
  alt925_02400:
    ge rx917_pos, rx917_eos, rx917_fail2381
    substr $S11, rx917_tgt, rx917_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx917_fail2381
    repr_bind_attr_int rx917_cur, rx917_curclass, "$!pos", rx917_pos
    $P11 = rx917_cur."args"()
    repr_get_attr_int $I11, $P11, rx917_curclass, "$!pos"
    lt $I11, 0, rx917_fail2381
    nqp_rxmark rx917_bstack, rxsubrule926_pass2401, -1, 0
  rxsubrule926_pass2401:
    rx917_cstack = rx917_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx917_pos, $P11, rx917_curclass, "$!pos"
    goto alt925_end2399
  alt925_12402:
    add $I11, rx917_pos, 1
    gt $I11, rx917_eos, rx917_fail2381
    substr $S10, rx917_tgt, rx917_pos, 1
    ne $S10, ucs4:":", rx917_fail2381
    add rx917_pos, 1
    ge rx917_pos, rx917_eos, rx917_fail2381
    is_cclass $I11, .CCLASS_WHITESPACE, rx917_tgt, rx917_pos
    unless $I11, rx917_fail2381
    add rx917_pos, 1
    repr_bind_attr_int rx917_cur, rx917_curclass, "$!pos", rx917_pos
    $P11 = rx917_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx917_curclass, "$!pos"
    lt $I11, 0, rx917_fail2381
    nqp_rxmark rx917_bstack, rxsubrule927_pass2403, -1, 0
  rxsubrule927_pass2403:
    rx917_cstack = rx917_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx917_pos, $P11, rx917_curclass, "$!pos"
    goto alt925_end2399
  alt925_end2399:
    nqp_rxpeek $I19, rx917_bstack, rxquantr924_done2398
    inc $I19
    inc $I19
    set rx917_rep, rx917_bstack[$I19]
    nqp_rxcommit rx917_bstack, rxquantr924_done2398
    inc rx917_rep
  rxquantr924_done2398:
    rx917_cur."!cursor_pass"(rx917_pos, "dotty", 'backtrack'=>1)
    .return (rx917_cur)
  rx917_restart2380:
    repr_get_attr_obj rx917_cstack, rx917_cur, rx917_curclass, "$!cstack"
  rx917_fail2381:
    unless rx917_bstack, rx917_done2379
    pop $I19, rx917_bstack
    if_null rx917_cstack, rx917_cstack_done2384
    unless rx917_cstack, rx917_cstack_done2384
    dec $I19
    set $P11, rx917_cstack[$I19]
  rx917_cstack_done2384:
    pop rx917_rep, rx917_bstack
    pop rx917_pos, rx917_bstack
    pop $I19, rx917_bstack
    lt rx917_pos, -1, rx917_done2379
    lt rx917_pos, 0, rx917_fail2381
    eq $I19, 0, rx917_fail2381
    nqp_islist $I20, rx917_cstack
    unless $I20, rx917_jump2382
    elements $I18, rx917_bstack
    le $I18, 0, rx917_cut2383
    dec $I18
    set $I18, rx917_bstack[$I18]
  rx917_cut2383:
    assign rx917_cstack, $I18
  rx917_jump2382:
    jump $I19
  rx917_done2379:
    rx917_cur."!cursor_fail"()
    .return (rx917_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_139_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1177
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx928_tgt
    .local int rx928_pos
    .local int rx928_off
    .local int rx928_eos
    .local int rx928_rep
    .local pmc rx928_cur
    .local pmc rx928_curclass
    .local pmc rx928_bstack
    .local pmc rx928_cstack
    (rx928_cur, rx928_tgt, rx928_pos, rx928_curclass, rx928_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx928_cur
    length rx928_eos, rx928_tgt
    eq $I19, 1, rx928_restart2406
    gt rx928_pos, rx928_eos, rx928_fail2407
    repr_get_attr_int $I11, self, rx928_curclass, "$!from"
    ne $I11, -1, rxscan929_done2413
    goto rxscan929_scan2412
  rxscan929_loop2411:
    inc rx928_pos
    gt rx928_pos, rx928_eos, rx928_fail2407
    repr_bind_attr_int rx928_cur, rx928_curclass, "$!from", rx928_pos
  rxscan929_scan2412:
    nqp_rxmark rx928_bstack, rxscan929_loop2411, rx928_pos, 0
  rxscan929_done2413:
    nqp_rxmark rx928_bstack, rxcap930_fail2415, rx928_pos, 0
    add $I11, rx928_pos, 4
    gt $I11, rx928_eos, rx928_fail2407
    substr $S10, rx928_tgt, rx928_pos, 4
    ne $S10, ucs4:"self", rx928_fail2407
    add rx928_pos, 4
    nqp_rxpeek $I19, rx928_bstack, rxcap930_fail2415
    inc $I19
    set $I11, rx928_bstack[$I19]
    repr_bind_attr_int rx928_cur, rx928_curclass, "$!pos", rx928_pos
    $P11 = rx928_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx928_pos)
    rx928_cstack = rx928_cur."!cursor_capture"($P11, "sym")
    goto rxcap930_done2414
  rxcap930_fail2415:
    goto rx928_fail2407
  rxcap930_done2414:
    le rx928_pos, 0, rx928_fail2407
    is_cclass $I11, .CCLASS_WORD, rx928_tgt, rx928_pos
    if $I11, rx928_fail2407
    sub $I11, rx928_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx928_tgt, $I11
    unless $I11, rx928_fail2407
    rx928_cur."!cursor_pass"(rx928_pos, "term:sym<self>", 'backtrack'=>1)
    .return (rx928_cur)
  rx928_restart2406:
    repr_get_attr_obj rx928_cstack, rx928_cur, rx928_curclass, "$!cstack"
  rx928_fail2407:
    unless rx928_bstack, rx928_done2405
    pop $I19, rx928_bstack
    if_null rx928_cstack, rx928_cstack_done2410
    unless rx928_cstack, rx928_cstack_done2410
    dec $I19
    set $P11, rx928_cstack[$I19]
  rx928_cstack_done2410:
    pop rx928_rep, rx928_bstack
    pop rx928_pos, rx928_bstack
    pop $I19, rx928_bstack
    lt rx928_pos, -1, rx928_done2405
    lt rx928_pos, 0, rx928_fail2407
    eq $I19, 0, rx928_fail2407
    nqp_islist $I20, rx928_cstack
    unless $I20, rx928_jump2408
    elements $I18, rx928_bstack
    le $I18, 0, rx928_cut2409
    dec $I18
    set $I18, rx928_bstack[$I18]
  rx928_cut2409:
    assign rx928_cstack, $I18
  rx928_jump2408:
    jump $I19
  rx928_done2405:
    rx928_cur."!cursor_fail"()
    .return (rx928_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_140_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1179
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx932_tgt
    .local int rx932_pos
    .local int rx932_off
    .local int rx932_eos
    .local int rx932_rep
    .local pmc rx932_cur
    .local pmc rx932_curclass
    .local pmc rx932_bstack
    .local pmc rx932_cstack
    (rx932_cur, rx932_tgt, rx932_pos, rx932_curclass, rx932_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx932_cur
    length rx932_eos, rx932_tgt
    eq $I19, 1, rx932_restart2419
    gt rx932_pos, rx932_eos, rx932_fail2420
    repr_get_attr_int $I11, self, rx932_curclass, "$!from"
    ne $I11, -1, rxscan933_done2426
    goto rxscan933_scan2425
  rxscan933_loop2424:
    inc rx932_pos
    gt rx932_pos, rx932_eos, rx932_fail2420
    repr_bind_attr_int rx932_cur, rx932_curclass, "$!from", rx932_pos
  rxscan933_scan2425:
    nqp_rxmark rx932_bstack, rxscan933_loop2424, rx932_pos, 0
  rxscan933_done2426:
    repr_bind_attr_int rx932_cur, rx932_curclass, "$!pos", rx932_pos
    $P11 = rx932_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx932_curclass, "$!pos"
    lt $I11, 0, rx932_fail2420
    nqp_rxmark rx932_bstack, rxsubrule934_pass2427, -1, 0
  rxsubrule934_pass2427:
    rx932_cstack = rx932_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx932_pos, $P11, rx932_curclass, "$!pos"
    ge rx932_pos, rx932_eos, rx932_fail2420
    substr $S11, rx932_tgt, rx932_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx932_fail2420
    repr_bind_attr_int rx932_cur, rx932_curclass, "$!pos", rx932_pos
    $P11 = rx932_cur."args"()
    repr_get_attr_int $I11, $P11, rx932_curclass, "$!pos"
    lt $I11, 0, rx932_fail2420
    nqp_rxmark rx932_bstack, rxsubrule935_pass2428, -1, 0
  rxsubrule935_pass2428:
    rx932_cstack = rx932_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx932_pos, $P11, rx932_curclass, "$!pos"
    rx932_cur."!cursor_pass"(rx932_pos, "term:sym<identifier>", 'backtrack'=>1)
    .return (rx932_cur)
  rx932_restart2419:
    repr_get_attr_obj rx932_cstack, rx932_cur, rx932_curclass, "$!cstack"
  rx932_fail2420:
    unless rx932_bstack, rx932_done2418
    pop $I19, rx932_bstack
    if_null rx932_cstack, rx932_cstack_done2423
    unless rx932_cstack, rx932_cstack_done2423
    dec $I19
    set $P11, rx932_cstack[$I19]
  rx932_cstack_done2423:
    pop rx932_rep, rx932_bstack
    pop rx932_pos, rx932_bstack
    pop $I19, rx932_bstack
    lt rx932_pos, -1, rx932_done2418
    lt rx932_pos, 0, rx932_fail2420
    eq $I19, 0, rx932_fail2420
    nqp_islist $I20, rx932_cstack
    unless $I20, rx932_jump2421
    elements $I18, rx932_bstack
    le $I18, 0, rx932_cut2422
    dec $I18
    set $I18, rx932_bstack[$I18]
  rx932_cut2422:
    assign rx932_cstack, $I18
  rx932_jump2421:
    jump $I19
  rx932_done2418:
    rx932_cur."!cursor_fail"()
    .return (rx932_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_141_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1183
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx936_tgt
    .local int rx936_pos
    .local int rx936_off
    .local int rx936_eos
    .local int rx936_rep
    .local pmc rx936_cur
    .local pmc rx936_curclass
    .local pmc rx936_bstack
    .local pmc rx936_cstack
    (rx936_cur, rx936_tgt, rx936_pos, rx936_curclass, rx936_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx936_cur
    length rx936_eos, rx936_tgt
    eq $I19, 1, rx936_restart2431
    gt rx936_pos, rx936_eos, rx936_fail2432
    repr_get_attr_int $I11, self, rx936_curclass, "$!from"
    ne $I11, -1, rxscan937_done2438
    goto rxscan937_scan2437
  rxscan937_loop2436:
    inc rx936_pos
    gt rx936_pos, rx936_eos, rx936_fail2432
    repr_bind_attr_int rx936_cur, rx936_curclass, "$!from", rx936_pos
  rxscan937_scan2437:
    nqp_rxmark rx936_bstack, rxscan937_loop2436, rx936_pos, 0
  rxscan937_done2438:
    repr_bind_attr_int rx936_cur, rx936_curclass, "$!pos", rx936_pos
    $P11 = rx936_cur."name"()
    repr_get_attr_int $I11, $P11, rx936_curclass, "$!pos"
    lt $I11, 0, rx936_fail2432
    nqp_rxmark rx936_bstack, rxsubrule938_pass2439, -1, 0
  rxsubrule938_pass2439:
    rx936_cstack = rx936_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx936_pos, $P11, rx936_curclass, "$!pos"
    nqp_rxmark rx936_bstack, rxquantr939_done2441, rx936_pos, 0
  rxquantr939_loop2440:
    repr_bind_attr_int rx936_cur, rx936_curclass, "$!pos", rx936_pos
    $P11 = rx936_cur."args"()
    repr_get_attr_int $I11, $P11, rx936_curclass, "$!pos"
    lt $I11, 0, rx936_fail2432
    goto rxsubrule940_pass2442
  rxsubrule940_back2443:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx936_curclass, "$!pos"
    lt $I11, 0, rx936_fail2432
  rxsubrule940_pass2442:
    rx936_cstack = rx936_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule940_back2443
    push rx936_bstack, $I11
    push rx936_bstack, 0
    push rx936_bstack, rx936_pos
    elements $I11, rx936_cstack
    push rx936_bstack, $I11
    repr_get_attr_int rx936_pos, $P11, rx936_curclass, "$!pos"
    nqp_rxpeek $I19, rx936_bstack, rxquantr939_done2441
    inc $I19
    inc $I19
    set rx936_rep, rx936_bstack[$I19]
    nqp_rxcommit rx936_bstack, rxquantr939_done2441
    inc rx936_rep
  rxquantr939_done2441:
    rx936_cur."!cursor_pass"(rx936_pos, "term:sym<name>", 'backtrack'=>1)
    .return (rx936_cur)
  rx936_restart2431:
    repr_get_attr_obj rx936_cstack, rx936_cur, rx936_curclass, "$!cstack"
  rx936_fail2432:
    unless rx936_bstack, rx936_done2430
    pop $I19, rx936_bstack
    if_null rx936_cstack, rx936_cstack_done2435
    unless rx936_cstack, rx936_cstack_done2435
    dec $I19
    set $P11, rx936_cstack[$I19]
  rx936_cstack_done2435:
    pop rx936_rep, rx936_bstack
    pop rx936_pos, rx936_bstack
    pop $I19, rx936_bstack
    lt rx936_pos, -1, rx936_done2430
    lt rx936_pos, 0, rx936_fail2432
    eq $I19, 0, rx936_fail2432
    nqp_islist $I20, rx936_cstack
    unless $I20, rx936_jump2433
    elements $I18, rx936_bstack
    le $I18, 0, rx936_cut2434
    dec $I18
    set $I18, rx936_bstack[$I18]
  rx936_cut2434:
    assign rx936_cstack, $I18
  rx936_jump2433:
    jump $I19
  rx936_done2430:
    rx936_cur."!cursor_fail"()
    .return (rx936_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_142_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1187
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx941_tgt
    .local int rx941_pos
    .local int rx941_off
    .local int rx941_eos
    .local int rx941_rep
    .local pmc rx941_cur
    .local pmc rx941_curclass
    .local pmc rx941_bstack
    .local pmc rx941_cstack
    (rx941_cur, rx941_tgt, rx941_pos, rx941_curclass, rx941_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx941_cur
    length rx941_eos, rx941_tgt
    eq $I19, 1, rx941_restart2446
    gt rx941_pos, rx941_eos, rx941_fail2447
    repr_get_attr_int $I11, self, rx941_curclass, "$!from"
    ne $I11, -1, rxscan942_done2453
    goto rxscan942_scan2452
  rxscan942_loop2451:
    inc rx941_pos
    gt rx941_pos, rx941_eos, rx941_fail2447
    repr_bind_attr_int rx941_cur, rx941_curclass, "$!from", rx941_pos
  rxscan942_scan2452:
    nqp_rxmark rx941_bstack, rxscan942_loop2451, rx941_pos, 0
  rxscan942_done2453:
    add $I11, rx941_pos, 5
    gt $I11, rx941_eos, rx941_fail2447
    substr $S10, rx941_tgt, rx941_pos, 5
    ne $S10, ucs4:"pir::", rx941_fail2447
    add rx941_pos, 5
    nqp_rxmark rx941_bstack, rxcap943_fail2455, rx941_pos, 0
    nqp_rxmark rx941_bstack, rxquantr944_done2457, -1, 0
  rxquantr944_loop2456:
    ge rx941_pos, rx941_eos, rx941_fail2447
    is_cclass $I11, .CCLASS_WORD, rx941_tgt, rx941_pos
    unless $I11, rx941_fail2447
    add rx941_pos, 1
    nqp_rxpeek $I19, rx941_bstack, rxquantr944_done2457
    inc $I19
    inc $I19
    set rx941_rep, rx941_bstack[$I19]
    nqp_rxcommit rx941_bstack, rxquantr944_done2457
    inc rx941_rep
    nqp_rxmark rx941_bstack, rxquantr944_done2457, rx941_pos, rx941_rep
    goto rxquantr944_loop2456
  rxquantr944_done2457:
    nqp_rxpeek $I19, rx941_bstack, rxcap943_fail2455
    inc $I19
    set $I11, rx941_bstack[$I19]
    repr_bind_attr_int rx941_cur, rx941_curclass, "$!pos", rx941_pos
    $P11 = rx941_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx941_pos)
    rx941_cstack = rx941_cur."!cursor_capture"($P11, "op")
    goto rxcap943_done2454
  rxcap943_fail2455:
    goto rx941_fail2447
  rxcap943_done2454:
    nqp_rxmark rx941_bstack, rxquantr945_done2459, rx941_pos, 0
  rxquantr945_loop2458:
    repr_bind_attr_int rx941_cur, rx941_curclass, "$!pos", rx941_pos
    $P11 = rx941_cur."args"()
    repr_get_attr_int $I11, $P11, rx941_curclass, "$!pos"
    lt $I11, 0, rx941_fail2447
    goto rxsubrule946_pass2460
  rxsubrule946_back2461:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx941_curclass, "$!pos"
    lt $I11, 0, rx941_fail2447
  rxsubrule946_pass2460:
    rx941_cstack = rx941_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule946_back2461
    push rx941_bstack, $I11
    push rx941_bstack, 0
    push rx941_bstack, rx941_pos
    elements $I11, rx941_cstack
    push rx941_bstack, $I11
    repr_get_attr_int rx941_pos, $P11, rx941_curclass, "$!pos"
    nqp_rxpeek $I19, rx941_bstack, rxquantr945_done2459
    inc $I19
    inc $I19
    set rx941_rep, rx941_bstack[$I19]
    nqp_rxcommit rx941_bstack, rxquantr945_done2459
    inc rx941_rep
  rxquantr945_done2459:
    rx941_cur."!cursor_pass"(rx941_pos, "term:sym<pir::op>", 'backtrack'=>1)
    .return (rx941_cur)
  rx941_restart2446:
    repr_get_attr_obj rx941_cstack, rx941_cur, rx941_curclass, "$!cstack"
  rx941_fail2447:
    unless rx941_bstack, rx941_done2445
    pop $I19, rx941_bstack
    if_null rx941_cstack, rx941_cstack_done2450
    unless rx941_cstack, rx941_cstack_done2450
    dec $I19
    set $P11, rx941_cstack[$I19]
  rx941_cstack_done2450:
    pop rx941_rep, rx941_bstack
    pop rx941_pos, rx941_bstack
    pop $I19, rx941_bstack
    lt rx941_pos, -1, rx941_done2445
    lt rx941_pos, 0, rx941_fail2447
    eq $I19, 0, rx941_fail2447
    nqp_islist $I20, rx941_cstack
    unless $I20, rx941_jump2448
    elements $I18, rx941_bstack
    le $I18, 0, rx941_cut2449
    dec $I18
    set $I18, rx941_bstack[$I18]
  rx941_cut2449:
    assign rx941_cstack, $I18
  rx941_jump2448:
    jump $I19
  rx941_done2445:
    rx941_cur."!cursor_fail"()
    .return (rx941_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_143_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1191
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx947_tgt
    .local int rx947_pos
    .local int rx947_off
    .local int rx947_eos
    .local int rx947_rep
    .local pmc rx947_cur
    .local pmc rx947_curclass
    .local pmc rx947_bstack
    .local pmc rx947_cstack
    (rx947_cur, rx947_tgt, rx947_pos, rx947_curclass, rx947_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx947_cur
    length rx947_eos, rx947_tgt
    eq $I19, 1, rx947_restart2464
    gt rx947_pos, rx947_eos, rx947_fail2465
    repr_get_attr_int $I11, self, rx947_curclass, "$!from"
    ne $I11, -1, rxscan948_done2471
    goto rxscan948_scan2470
  rxscan948_loop2469:
    inc rx947_pos
    gt rx947_pos, rx947_eos, rx947_fail2465
    repr_bind_attr_int rx947_cur, rx947_curclass, "$!from", rx947_pos
  rxscan948_scan2470:
    nqp_rxmark rx947_bstack, rxscan948_loop2469, rx947_pos, 0
  rxscan948_done2471:
    add $I11, rx947_pos, 12
    gt $I11, rx947_eos, rx947_fail2465
    substr $S10, rx947_tgt, rx947_pos, 12
    ne $S10, ucs4:"pir::const::", rx947_fail2465
    add rx947_pos, 12
    nqp_rxmark rx947_bstack, rxcap949_fail2473, rx947_pos, 0
    nqp_rxmark rx947_bstack, rxquantr950_done2475, -1, 0
  rxquantr950_loop2474:
    ge rx947_pos, rx947_eos, rx947_fail2465
    is_cclass $I11, .CCLASS_WORD, rx947_tgt, rx947_pos
    unless $I11, rx947_fail2465
    add rx947_pos, 1
    nqp_rxpeek $I19, rx947_bstack, rxquantr950_done2475
    inc $I19
    inc $I19
    set rx947_rep, rx947_bstack[$I19]
    nqp_rxcommit rx947_bstack, rxquantr950_done2475
    inc rx947_rep
    nqp_rxmark rx947_bstack, rxquantr950_done2475, rx947_pos, rx947_rep
    goto rxquantr950_loop2474
  rxquantr950_done2475:
    nqp_rxpeek $I19, rx947_bstack, rxcap949_fail2473
    inc $I19
    set $I11, rx947_bstack[$I19]
    repr_bind_attr_int rx947_cur, rx947_curclass, "$!pos", rx947_pos
    $P11 = rx947_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx947_pos)
    rx947_cstack = rx947_cur."!cursor_capture"($P11, "const")
    goto rxcap949_done2472
  rxcap949_fail2473:
    goto rx947_fail2465
  rxcap949_done2472:
    rx947_cur."!cursor_pass"(rx947_pos, "term:sym<pir::const>", 'backtrack'=>1)
    .return (rx947_cur)
  rx947_restart2464:
    repr_get_attr_obj rx947_cstack, rx947_cur, rx947_curclass, "$!cstack"
  rx947_fail2465:
    unless rx947_bstack, rx947_done2463
    pop $I19, rx947_bstack
    if_null rx947_cstack, rx947_cstack_done2468
    unless rx947_cstack, rx947_cstack_done2468
    dec $I19
    set $P11, rx947_cstack[$I19]
  rx947_cstack_done2468:
    pop rx947_rep, rx947_bstack
    pop rx947_pos, rx947_bstack
    pop $I19, rx947_bstack
    lt rx947_pos, -1, rx947_done2463
    lt rx947_pos, 0, rx947_fail2465
    eq $I19, 0, rx947_fail2465
    nqp_islist $I20, rx947_cstack
    unless $I20, rx947_jump2466
    elements $I18, rx947_bstack
    le $I18, 0, rx947_cut2467
    dec $I18
    set $I18, rx947_bstack[$I18]
  rx947_cut2467:
    assign rx947_cstack, $I18
  rx947_jump2466:
    jump $I19
  rx947_done2463:
    rx947_cur."!cursor_fail"()
    .return (rx947_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_144_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1195
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx951_tgt
    .local int rx951_pos
    .local int rx951_off
    .local int rx951_eos
    .local int rx951_rep
    .local pmc rx951_cur
    .local pmc rx951_curclass
    .local pmc rx951_bstack
    .local pmc rx951_cstack
    (rx951_cur, rx951_tgt, rx951_pos, rx951_curclass, rx951_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx951_cur
    length rx951_eos, rx951_tgt
    eq $I19, 1, rx951_restart2478
    gt rx951_pos, rx951_eos, rx951_fail2479
    repr_get_attr_int $I11, self, rx951_curclass, "$!from"
    ne $I11, -1, rxscan952_done2485
    goto rxscan952_scan2484
  rxscan952_loop2483:
    inc rx951_pos
    gt rx951_pos, rx951_eos, rx951_fail2479
    repr_bind_attr_int rx951_cur, rx951_curclass, "$!from", rx951_pos
  rxscan952_scan2484:
    nqp_rxmark rx951_bstack, rxscan952_loop2483, rx951_pos, 0
  rxscan952_done2485:
    add $I11, rx951_pos, 5
    gt $I11, rx951_eos, rx951_fail2479
    substr $S10, rx951_tgt, rx951_pos, 5
    ne $S10, ucs4:"nqp::", rx951_fail2479
    add rx951_pos, 5
    nqp_rxmark rx951_bstack, rxcap953_fail2487, rx951_pos, 0
    nqp_rxmark rx951_bstack, rxquantr954_done2489, -1, 0
  rxquantr954_loop2488:
    ge rx951_pos, rx951_eos, rx951_fail2479
    is_cclass $I11, .CCLASS_WORD, rx951_tgt, rx951_pos
    unless $I11, rx951_fail2479
    add rx951_pos, 1
    nqp_rxpeek $I19, rx951_bstack, rxquantr954_done2489
    inc $I19
    inc $I19
    set rx951_rep, rx951_bstack[$I19]
    nqp_rxcommit rx951_bstack, rxquantr954_done2489
    inc rx951_rep
    nqp_rxmark rx951_bstack, rxquantr954_done2489, rx951_pos, rx951_rep
    goto rxquantr954_loop2488
  rxquantr954_done2489:
    nqp_rxpeek $I19, rx951_bstack, rxcap953_fail2487
    inc $I19
    set $I11, rx951_bstack[$I19]
    repr_bind_attr_int rx951_cur, rx951_curclass, "$!pos", rx951_pos
    $P11 = rx951_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx951_pos)
    rx951_cstack = rx951_cur."!cursor_capture"($P11, "op")
    goto rxcap953_done2486
  rxcap953_fail2487:
    goto rx951_fail2479
  rxcap953_done2486:
    nqp_rxmark rx951_bstack, rxquantr955_done2491, rx951_pos, 0
  rxquantr955_loop2490:
    repr_bind_attr_int rx951_cur, rx951_curclass, "$!pos", rx951_pos
    $P11 = rx951_cur."args"()
    repr_get_attr_int $I11, $P11, rx951_curclass, "$!pos"
    lt $I11, 0, rx951_fail2479
    goto rxsubrule956_pass2492
  rxsubrule956_back2493:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx951_curclass, "$!pos"
    lt $I11, 0, rx951_fail2479
  rxsubrule956_pass2492:
    rx951_cstack = rx951_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule956_back2493
    push rx951_bstack, $I11
    push rx951_bstack, 0
    push rx951_bstack, rx951_pos
    elements $I11, rx951_cstack
    push rx951_bstack, $I11
    repr_get_attr_int rx951_pos, $P11, rx951_curclass, "$!pos"
    nqp_rxpeek $I19, rx951_bstack, rxquantr955_done2491
    inc $I19
    inc $I19
    set rx951_rep, rx951_bstack[$I19]
    nqp_rxcommit rx951_bstack, rxquantr955_done2491
    inc rx951_rep
  rxquantr955_done2491:
    rx951_cur."!cursor_pass"(rx951_pos, "term:sym<nqp::op>", 'backtrack'=>1)
    .return (rx951_cur)
  rx951_restart2478:
    repr_get_attr_obj rx951_cstack, rx951_cur, rx951_curclass, "$!cstack"
  rx951_fail2479:
    unless rx951_bstack, rx951_done2477
    pop $I19, rx951_bstack
    if_null rx951_cstack, rx951_cstack_done2482
    unless rx951_cstack, rx951_cstack_done2482
    dec $I19
    set $P11, rx951_cstack[$I19]
  rx951_cstack_done2482:
    pop rx951_rep, rx951_bstack
    pop rx951_pos, rx951_bstack
    pop $I19, rx951_bstack
    lt rx951_pos, -1, rx951_done2477
    lt rx951_pos, 0, rx951_fail2479
    eq $I19, 0, rx951_fail2479
    nqp_islist $I20, rx951_cstack
    unless $I20, rx951_jump2480
    elements $I18, rx951_bstack
    le $I18, 0, rx951_cut2481
    dec $I18
    set $I18, rx951_bstack[$I18]
  rx951_cut2481:
    assign rx951_cstack, $I18
  rx951_jump2480:
    jump $I19
  rx951_done2477:
    rx951_cur."!cursor_fail"()
    .return (rx951_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_145_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1199
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_404_1351203235.318' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx957_tgt
    .local int rx957_pos
    .local int rx957_off
    .local int rx957_eos
    .local int rx957_rep
    .local pmc rx957_cur
    .local pmc rx957_curclass
    .local pmc rx957_bstack
    .local pmc rx957_cstack
    (rx957_cur, rx957_tgt, rx957_pos, rx957_curclass, rx957_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx957_cur
    length rx957_eos, rx957_tgt
    eq $I19, 1, rx957_restart2496
    gt rx957_pos, rx957_eos, rx957_fail2497
    repr_get_attr_int $I11, self, rx957_curclass, "$!from"
    ne $I11, -1, rxscan958_done2503
    goto rxscan958_scan2502
  rxscan958_loop2501:
    inc rx957_pos
    gt rx957_pos, rx957_eos, rx957_fail2497
    repr_bind_attr_int rx957_cur, rx957_curclass, "$!from", rx957_pos
  rxscan958_scan2502:
    nqp_rxmark rx957_bstack, rxscan958_loop2501, rx957_pos, 0
  rxscan958_done2503:
    add $I11, rx957_pos, 3
    gt $I11, rx957_eos, rx957_fail2497
    substr $S10, rx957_tgt, rx957_pos, 3
    ne $S10, ucs4:"{*}", rx957_fail2497
    add rx957_pos, 3
    repr_bind_attr_int rx957_cur, rx957_curclass, "$!pos", rx957_pos
    $P11 = rx957_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx957_curclass, "$!pos"
    lt $I11, 0, rx957_fail2497
  alt959_02505:
    nqp_rxmark rx957_bstack, alt959_12509, rx957_pos, 0
    repr_bind_attr_int rx957_cur, rx957_curclass, "$!pos", rx957_pos
    store_lex unicode:"$\x{a2}", rx957_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_404_1351203235.318' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx957_fail2497
    goto alt959_end2504
  alt959_12509:
    repr_bind_attr_int rx957_cur, rx957_curclass, "$!pos", rx957_pos
    $P11 = rx957_cur."panic"("{*} may only appear in proto")
    repr_get_attr_int $I11, $P11, rx957_curclass, "$!pos"
    lt $I11, 0, rx957_fail2497
    repr_get_attr_int rx957_pos, $P11, rx957_curclass, "$!pos"
  alt959_end2504:
    rx957_cur."!cursor_pass"(rx957_pos, "term:sym<onlystar>", 'backtrack'=>1)
    .return (rx957_cur)
  rx957_restart2496:
    repr_get_attr_obj rx957_cstack, rx957_cur, rx957_curclass, "$!cstack"
  rx957_fail2497:
    unless rx957_bstack, rx957_done2495
    pop $I19, rx957_bstack
    if_null rx957_cstack, rx957_cstack_done2500
    unless rx957_cstack, rx957_cstack_done2500
    dec $I19
    set $P11, rx957_cstack[$I19]
  rx957_cstack_done2500:
    pop rx957_rep, rx957_bstack
    pop rx957_pos, rx957_bstack
    pop $I19, rx957_bstack
    lt rx957_pos, -1, rx957_done2495
    lt rx957_pos, 0, rx957_fail2497
    eq $I19, 0, rx957_fail2497
    nqp_islist $I20, rx957_cstack
    unless $I20, rx957_jump2498
    elements $I18, rx957_bstack
    le $I18, 0, rx957_cut2499
    dec $I18
    set $I18, rx957_bstack[$I18]
  rx957_cut2499:
    assign rx957_cstack, $I18
  rx957_jump2498:
    jump $I19
  rx957_done2495:
    rx957_cur."!cursor_fail"()
    .return (rx957_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_404_1351203235.318") :anon :lex :outer("cuid_145_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1201

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback2506
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback2507
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5005
  fallback2507:
    unless_null $P5002, vivi_9602508
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_9602508:
    set $P5001, $P5002
  fallback2506:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_146_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1204
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx962_tgt
    .local int rx962_pos
    .local int rx962_off
    .local int rx962_eos
    .local int rx962_rep
    .local pmc rx962_cur
    .local pmc rx962_curclass
    .local pmc rx962_bstack
    .local pmc rx962_cstack
    (rx962_cur, rx962_tgt, rx962_pos, rx962_curclass, rx962_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx962_cur
    length rx962_eos, rx962_tgt
    eq $I19, 1, rx962_restart2513
    gt rx962_pos, rx962_eos, rx962_fail2514
    repr_get_attr_int $I11, self, rx962_curclass, "$!from"
    ne $I11, -1, rxscan963_done2520
    goto rxscan963_scan2519
  rxscan963_loop2518:
    inc rx962_pos
    gt rx962_pos, rx962_eos, rx962_fail2514
    repr_bind_attr_int rx962_cur, rx962_curclass, "$!from", rx962_pos
  rxscan963_scan2519:
    nqp_rxmark rx962_bstack, rxscan963_loop2518, rx962_pos, 0
  rxscan963_done2520:
    add $I11, rx962_pos, 1
    gt $I11, rx962_eos, rx962_fail2514
    substr $S10, rx962_tgt, rx962_pos, 1
    ne $S10, ucs4:"(", rx962_fail2514
    add rx962_pos, 1
    repr_bind_attr_int rx962_cur, rx962_curclass, "$!pos", rx962_pos
    $P11 = rx962_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx962_curclass, "$!pos"
    lt $I11, 0, rx962_fail2514
    nqp_rxmark rx962_bstack, rxsubrule964_pass2521, -1, 0
  rxsubrule964_pass2521:
    rx962_cstack = rx962_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx962_pos, $P11, rx962_curclass, "$!pos"
    add $I11, rx962_pos, 1
    gt $I11, rx962_eos, rx962_fail2514
    substr $S10, rx962_tgt, rx962_pos, 1
    ne $S10, ucs4:")", rx962_fail2514
    add rx962_pos, 1
    rx962_cur."!cursor_pass"(rx962_pos, "args", 'backtrack'=>1)
    .return (rx962_cur)
  rx962_restart2513:
    repr_get_attr_obj rx962_cstack, rx962_cur, rx962_curclass, "$!cstack"
  rx962_fail2514:
    unless rx962_bstack, rx962_done2512
    pop $I19, rx962_bstack
    if_null rx962_cstack, rx962_cstack_done2517
    unless rx962_cstack, rx962_cstack_done2517
    dec $I19
    set $P11, rx962_cstack[$I19]
  rx962_cstack_done2517:
    pop rx962_rep, rx962_bstack
    pop rx962_pos, rx962_bstack
    pop $I19, rx962_bstack
    lt rx962_pos, -1, rx962_done2512
    lt rx962_pos, 0, rx962_fail2514
    eq $I19, 0, rx962_fail2514
    nqp_islist $I20, rx962_cstack
    unless $I20, rx962_jump2515
    elements $I18, rx962_bstack
    le $I18, 0, rx962_cut2516
    dec $I18
    set $I18, rx962_bstack[$I18]
  rx962_cut2516:
    assign rx962_cstack, $I18
  rx962_jump2515:
    jump $I19
  rx962_done2512:
    rx962_cur."!cursor_fail"()
    .return (rx962_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_147_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1208
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx965_tgt
    .local int rx965_pos
    .local int rx965_off
    .local int rx965_eos
    .local int rx965_rep
    .local pmc rx965_cur
    .local pmc rx965_curclass
    .local pmc rx965_bstack
    .local pmc rx965_cstack
    (rx965_cur, rx965_tgt, rx965_pos, rx965_curclass, rx965_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx965_cur
    length rx965_eos, rx965_tgt
    eq $I19, 1, rx965_restart2524
    gt rx965_pos, rx965_eos, rx965_fail2525
    repr_get_attr_int $I11, self, rx965_curclass, "$!from"
    ne $I11, -1, rxscan966_done2531
    goto rxscan966_scan2530
  rxscan966_loop2529:
    inc rx965_pos
    gt rx965_pos, rx965_eos, rx965_fail2525
    repr_bind_attr_int rx965_cur, rx965_curclass, "$!from", rx965_pos
  rxscan966_scan2530:
    nqp_rxmark rx965_bstack, rxscan966_loop2529, rx965_pos, 0
  rxscan966_done2531:
    repr_bind_attr_int rx965_cur, rx965_curclass, "$!pos", rx965_pos
    $P11 = rx965_cur."ws"()
    repr_get_attr_int $I11, $P11, rx965_curclass, "$!pos"
    lt $I11, 0, rx965_fail2525
    repr_get_attr_int rx965_pos, $P11, rx965_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt968_02534
    nqp_push_label $P11, alt968_12536
    nqp_rxmark rx965_bstack, alt968_end2533, -1, 0
    rx965_cur."!alt"(rx965_pos, "alt_nfa__36_1351203237.686", $P11)
    goto rx965_fail2525
  alt968_02534:
    repr_bind_attr_int rx965_cur, rx965_curclass, "$!pos", rx965_pos
    $P11 = rx965_cur."EXPR"("f=")
    repr_get_attr_int $I11, $P11, rx965_curclass, "$!pos"
    lt $I11, 0, rx965_fail2525
    nqp_rxmark rx965_bstack, rxsubrule969_pass2535, -1, 0
  rxsubrule969_pass2535:
    rx965_cstack = rx965_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx965_pos, $P11, rx965_curclass, "$!pos"
    goto alt968_end2533
  alt968_12536:
    goto alt968_end2533
  alt968_end2533:
    nqp_rxcommit rx965_bstack, alt968_end2533
    rx965_cur."!cursor_pass"(rx965_pos, "arglist", 'backtrack'=>1)
    .return (rx965_cur)
  rx965_restart2524:
    repr_get_attr_obj rx965_cstack, rx965_cur, rx965_curclass, "$!cstack"
  rx965_fail2525:
    unless rx965_bstack, rx965_done2523
    pop $I19, rx965_bstack
    if_null rx965_cstack, rx965_cstack_done2528
    unless rx965_cstack, rx965_cstack_done2528
    dec $I19
    set $P11, rx965_cstack[$I19]
  rx965_cstack_done2528:
    pop rx965_rep, rx965_bstack
    pop rx965_pos, rx965_bstack
    pop $I19, rx965_bstack
    lt rx965_pos, -1, rx965_done2523
    lt rx965_pos, 0, rx965_fail2525
    eq $I19, 0, rx965_fail2525
    nqp_islist $I20, rx965_cstack
    unless $I20, rx965_jump2526
    elements $I18, rx965_bstack
    le $I18, 0, rx965_cut2527
    dec $I18
    set $I18, rx965_bstack[$I18]
  rx965_cut2527:
    assign rx965_cstack, $I18
  rx965_jump2526:
    jump $I19
  rx965_done2523:
    rx965_cur."!cursor_fail"()
    .return (rx965_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_148_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1217
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx971_tgt
    .local int rx971_pos
    .local int rx971_off
    .local int rx971_eos
    .local int rx971_rep
    .local pmc rx971_cur
    .local pmc rx971_curclass
    .local pmc rx971_bstack
    .local pmc rx971_cstack
    (rx971_cur, rx971_tgt, rx971_pos, rx971_curclass, rx971_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx971_cur
    length rx971_eos, rx971_tgt
    eq $I19, 1, rx971_restart2540
    gt rx971_pos, rx971_eos, rx971_fail2541
    repr_get_attr_int $I11, self, rx971_curclass, "$!from"
    ne $I11, -1, rxscan972_done2547
    goto rxscan972_scan2546
  rxscan972_loop2545:
    inc rx971_pos
    gt rx971_pos, rx971_eos, rx971_fail2541
    repr_bind_attr_int rx971_cur, rx971_curclass, "$!from", rx971_pos
  rxscan972_scan2546:
    nqp_rxmark rx971_bstack, rxscan972_loop2545, rx971_pos, 0
  rxscan972_done2547:
    repr_bind_attr_int rx971_cur, rx971_curclass, "$!pos", rx971_pos
    $P11 = rx971_cur."value"()
    repr_get_attr_int $I11, $P11, rx971_curclass, "$!pos"
    lt $I11, 0, rx971_fail2541
    nqp_rxmark rx971_bstack, rxsubrule973_pass2548, -1, 0
  rxsubrule973_pass2548:
    rx971_cstack = rx971_cur."!cursor_capture"($P11, "value")
    repr_get_attr_int rx971_pos, $P11, rx971_curclass, "$!pos"
    rx971_cur."!cursor_pass"(rx971_pos, "term:sym<value>", 'backtrack'=>1)
    .return (rx971_cur)
  rx971_restart2540:
    repr_get_attr_obj rx971_cstack, rx971_cur, rx971_curclass, "$!cstack"
  rx971_fail2541:
    unless rx971_bstack, rx971_done2539
    pop $I19, rx971_bstack
    if_null rx971_cstack, rx971_cstack_done2544
    unless rx971_cstack, rx971_cstack_done2544
    dec $I19
    set $P11, rx971_cstack[$I19]
  rx971_cstack_done2544:
    pop rx971_rep, rx971_bstack
    pop rx971_pos, rx971_bstack
    pop $I19, rx971_bstack
    lt rx971_pos, -1, rx971_done2539
    lt rx971_pos, 0, rx971_fail2541
    eq $I19, 0, rx971_fail2541
    nqp_islist $I20, rx971_cstack
    unless $I20, rx971_jump2542
    elements $I18, rx971_bstack
    le $I18, 0, rx971_cut2543
    dec $I18
    set $I18, rx971_bstack[$I18]
  rx971_cut2543:
    assign rx971_cstack, $I18
  rx971_jump2542:
    jump $I19
  rx971_done2539:
    rx971_cur."!cursor_fail"()
    .return (rx971_cur) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_149_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1219
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx974_tgt
    .local int rx974_pos
    .local int rx974_off
    .local int rx974_eos
    .local int rx974_rep
    .local pmc rx974_cur
    .local pmc rx974_curclass
    .local pmc rx974_bstack
    .local pmc rx974_cstack
    (rx974_cur, rx974_tgt, rx974_pos, rx974_curclass, rx974_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx974_cur
    length rx974_eos, rx974_tgt
    eq $I19, 1, rx974_restart2551
    gt rx974_pos, rx974_eos, rx974_fail2552
    repr_get_attr_int $I11, self, rx974_curclass, "$!from"
    ne $I11, -1, rxscan975_done2558
    goto rxscan975_scan2557
  rxscan975_loop2556:
    inc rx974_pos
    gt rx974_pos, rx974_eos, rx974_fail2552
    repr_bind_attr_int rx974_cur, rx974_curclass, "$!from", rx974_pos
  rxscan975_scan2557:
    nqp_rxmark rx974_bstack, rxscan975_loop2556, rx974_pos, 0
  rxscan975_done2558:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt976_02560
    nqp_push_label $P11, alt976_12562
    nqp_rxmark rx974_bstack, alt976_end2559, -1, 0
    rx974_cur."!alt"(rx974_pos, "alt_nfa__37_1351203237.694", $P11)
    goto rx974_fail2552
  alt976_02560:
    repr_bind_attr_int rx974_cur, rx974_curclass, "$!pos", rx974_pos
    $P11 = rx974_cur."quote"()
    repr_get_attr_int $I11, $P11, rx974_curclass, "$!pos"
    lt $I11, 0, rx974_fail2552
    nqp_rxmark rx974_bstack, rxsubrule977_pass2561, -1, 0
  rxsubrule977_pass2561:
    rx974_cstack = rx974_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx974_pos, $P11, rx974_curclass, "$!pos"
    goto alt976_end2559
  alt976_12562:
    repr_bind_attr_int rx974_cur, rx974_curclass, "$!pos", rx974_pos
    $P11 = rx974_cur."number"()
    repr_get_attr_int $I11, $P11, rx974_curclass, "$!pos"
    lt $I11, 0, rx974_fail2552
    nqp_rxmark rx974_bstack, rxsubrule978_pass2563, -1, 0
  rxsubrule978_pass2563:
    rx974_cstack = rx974_cur."!cursor_capture"($P11, "number")
    repr_get_attr_int rx974_pos, $P11, rx974_curclass, "$!pos"
    goto alt976_end2559
  alt976_end2559:
    rx974_cur."!cursor_pass"(rx974_pos, "value", 'backtrack'=>1)
    .return (rx974_cur)
  rx974_restart2551:
    repr_get_attr_obj rx974_cstack, rx974_cur, rx974_curclass, "$!cstack"
  rx974_fail2552:
    unless rx974_bstack, rx974_done2550
    pop $I19, rx974_bstack
    if_null rx974_cstack, rx974_cstack_done2555
    unless rx974_cstack, rx974_cstack_done2555
    dec $I19
    set $P11, rx974_cstack[$I19]
  rx974_cstack_done2555:
    pop rx974_rep, rx974_bstack
    pop rx974_pos, rx974_bstack
    pop $I19, rx974_bstack
    lt rx974_pos, -1, rx974_done2550
    lt rx974_pos, 0, rx974_fail2552
    eq $I19, 0, rx974_fail2552
    nqp_islist $I20, rx974_cstack
    unless $I20, rx974_jump2553
    elements $I18, rx974_bstack
    le $I18, 0, rx974_cut2554
    dec $I18
    set $I18, rx974_bstack[$I18]
  rx974_cut2554:
    assign rx974_cstack, $I18
  rx974_jump2553:
    jump $I19
  rx974_done2550:
    rx974_cur."!cursor_fail"()
    .return (rx974_cur) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_150_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1224
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx979_tgt
    .local int rx979_pos
    .local int rx979_off
    .local int rx979_eos
    .local int rx979_rep
    .local pmc rx979_cur
    .local pmc rx979_curclass
    .local pmc rx979_bstack
    .local pmc rx979_cstack
    (rx979_cur, rx979_tgt, rx979_pos, rx979_curclass, rx979_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx979_cur
    length rx979_eos, rx979_tgt
    eq $I19, 1, rx979_restart2566
    gt rx979_pos, rx979_eos, rx979_fail2567
    repr_get_attr_int $I11, self, rx979_curclass, "$!from"
    ne $I11, -1, rxscan980_done2573
    goto rxscan980_scan2572
  rxscan980_loop2571:
    inc rx979_pos
    gt rx979_pos, rx979_eos, rx979_fail2567
    repr_bind_attr_int rx979_cur, rx979_curclass, "$!from", rx979_pos
  rxscan980_scan2572:
    nqp_rxmark rx979_bstack, rxscan980_loop2571, rx979_pos, 0
  rxscan980_done2573:
    nqp_rxmark rx979_bstack, rxcap981_fail2575, rx979_pos, 0
    nqp_rxmark rx979_bstack, rxquantr982_done2577, rx979_pos, 0
  rxquantr982_loop2576:
  alt983_02579:
    nqp_rxmark rx979_bstack, alt983_12580, rx979_pos, 0
    add $I11, rx979_pos, 1
    gt $I11, rx979_eos, rx979_fail2567
    substr $S10, rx979_tgt, rx979_pos, 1
    ne $S10, ucs4:"-", rx979_fail2567
    add rx979_pos, 1
    goto alt983_end2578
  alt983_12580:
    ge rx979_pos, rx979_eos, rx979_fail2567
    substr $S11, rx979_tgt, rx979_pos, 1
    index $I11, ucs4:"+", $S11
    lt $I11, 0, rx979_fail2567
    inc rx979_pos
  alt983_end2578:
    nqp_rxpeek $I19, rx979_bstack, rxquantr982_done2577
    inc $I19
    inc $I19
    set rx979_rep, rx979_bstack[$I19]
    nqp_rxcommit rx979_bstack, rxquantr982_done2577
    inc rx979_rep
  rxquantr982_done2577:
    nqp_rxpeek $I19, rx979_bstack, rxcap981_fail2575
    inc $I19
    set $I11, rx979_bstack[$I19]
    repr_bind_attr_int rx979_cur, rx979_curclass, "$!pos", rx979_pos
    $P11 = rx979_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx979_pos)
    rx979_cstack = rx979_cur."!cursor_capture"($P11, "sign")
    goto rxcap981_done2574
  rxcap981_fail2575:
    goto rx979_fail2567
  rxcap981_done2574:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt984_02582
    nqp_push_label $P11, alt984_12584
    nqp_rxmark rx979_bstack, alt984_end2581, -1, 0
    rx979_cur."!alt"(rx979_pos, "alt_nfa__38_1351203237.702", $P11)
    goto rx979_fail2567
  alt984_02582:
    repr_bind_attr_int rx979_cur, rx979_curclass, "$!pos", rx979_pos
    $P11 = rx979_cur."dec_number"()
    repr_get_attr_int $I11, $P11, rx979_curclass, "$!pos"
    lt $I11, 0, rx979_fail2567
    nqp_rxmark rx979_bstack, rxsubrule985_pass2583, -1, 0
  rxsubrule985_pass2583:
    rx979_cstack = rx979_cur."!cursor_capture"($P11, "dec_number")
    repr_get_attr_int rx979_pos, $P11, rx979_curclass, "$!pos"
    goto alt984_end2581
  alt984_12584:
    repr_bind_attr_int rx979_cur, rx979_curclass, "$!pos", rx979_pos
    $P11 = rx979_cur."integer"()
    repr_get_attr_int $I11, $P11, rx979_curclass, "$!pos"
    lt $I11, 0, rx979_fail2567
    nqp_rxmark rx979_bstack, rxsubrule986_pass2585, -1, 0
  rxsubrule986_pass2585:
    rx979_cstack = rx979_cur."!cursor_capture"($P11, "integer")
    repr_get_attr_int rx979_pos, $P11, rx979_curclass, "$!pos"
    goto alt984_end2581
  alt984_end2581:
    nqp_rxcommit rx979_bstack, alt984_end2581
    rx979_cur."!cursor_pass"(rx979_pos, "number", 'backtrack'=>1)
    .return (rx979_cur)
  rx979_restart2566:
    repr_get_attr_obj rx979_cstack, rx979_cur, rx979_curclass, "$!cstack"
  rx979_fail2567:
    unless rx979_bstack, rx979_done2565
    pop $I19, rx979_bstack
    if_null rx979_cstack, rx979_cstack_done2570
    unless rx979_cstack, rx979_cstack_done2570
    dec $I19
    set $P11, rx979_cstack[$I19]
  rx979_cstack_done2570:
    pop rx979_rep, rx979_bstack
    pop rx979_pos, rx979_bstack
    pop $I19, rx979_bstack
    lt rx979_pos, -1, rx979_done2565
    lt rx979_pos, 0, rx979_fail2567
    eq $I19, 0, rx979_fail2567
    nqp_islist $I20, rx979_cstack
    unless $I20, rx979_jump2568
    elements $I18, rx979_bstack
    le $I18, 0, rx979_cut2569
    dec $I18
    set $I18, rx979_bstack[$I18]
  rx979_cut2569:
    assign rx979_cstack, $I18
  rx979_jump2568:
    jump $I19
  rx979_done2565:
    rx979_cur."!cursor_fail"()
    .return (rx979_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote" :subid("cuid_151_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1229
    .param pmc self 
    $P5001 = self."!protoregex"("quote")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_152_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1230
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx987_tgt
    .local int rx987_pos
    .local int rx987_off
    .local int rx987_eos
    .local int rx987_rep
    .local pmc rx987_cur
    .local pmc rx987_curclass
    .local pmc rx987_bstack
    .local pmc rx987_cstack
    (rx987_cur, rx987_tgt, rx987_pos, rx987_curclass, rx987_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx987_cur
    length rx987_eos, rx987_tgt
    eq $I19, 1, rx987_restart2588
    gt rx987_pos, rx987_eos, rx987_fail2589
    repr_get_attr_int $I11, self, rx987_curclass, "$!from"
    ne $I11, -1, rxscan988_done2595
    goto rxscan988_scan2594
  rxscan988_loop2593:
    inc rx987_pos
    gt rx987_pos, rx987_eos, rx987_fail2589
    repr_bind_attr_int rx987_cur, rx987_curclass, "$!from", rx987_pos
  rxscan988_scan2594:
    nqp_rxmark rx987_bstack, rxscan988_loop2593, rx987_pos, 0
  rxscan988_done2595:
    ge rx987_pos, rx987_eos, rx987_fail2589
    substr $S11, rx987_tgt, rx987_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx987_fail2589
    repr_bind_attr_int rx987_cur, rx987_curclass, "$!pos", rx987_pos
    $P11 = rx987_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx987_curclass, "$!pos"
    lt $I11, 0, rx987_fail2589
    nqp_rxmark rx987_bstack, rxsubrule989_pass2596, -1, 0
  rxsubrule989_pass2596:
    rx987_cstack = rx987_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx987_pos, $P11, rx987_curclass, "$!pos"
    rx987_cur."!cursor_pass"(rx987_pos, "quote:sym<apos>", 'backtrack'=>1)
    .return (rx987_cur)
  rx987_restart2588:
    repr_get_attr_obj rx987_cstack, rx987_cur, rx987_curclass, "$!cstack"
  rx987_fail2589:
    unless rx987_bstack, rx987_done2587
    pop $I19, rx987_bstack
    if_null rx987_cstack, rx987_cstack_done2592
    unless rx987_cstack, rx987_cstack_done2592
    dec $I19
    set $P11, rx987_cstack[$I19]
  rx987_cstack_done2592:
    pop rx987_rep, rx987_bstack
    pop rx987_pos, rx987_bstack
    pop $I19, rx987_bstack
    lt rx987_pos, -1, rx987_done2587
    lt rx987_pos, 0, rx987_fail2589
    eq $I19, 0, rx987_fail2589
    nqp_islist $I20, rx987_cstack
    unless $I20, rx987_jump2590
    elements $I18, rx987_bstack
    le $I18, 0, rx987_cut2591
    dec $I18
    set $I18, rx987_bstack[$I18]
  rx987_cut2591:
    assign rx987_cstack, $I18
  rx987_jump2590:
    jump $I19
  rx987_done2587:
    rx987_cur."!cursor_fail"()
    .return (rx987_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_153_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1231
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx990_tgt
    .local int rx990_pos
    .local int rx990_off
    .local int rx990_eos
    .local int rx990_rep
    .local pmc rx990_cur
    .local pmc rx990_curclass
    .local pmc rx990_bstack
    .local pmc rx990_cstack
    (rx990_cur, rx990_tgt, rx990_pos, rx990_curclass, rx990_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx990_cur
    length rx990_eos, rx990_tgt
    eq $I19, 1, rx990_restart2599
    gt rx990_pos, rx990_eos, rx990_fail2600
    repr_get_attr_int $I11, self, rx990_curclass, "$!from"
    ne $I11, -1, rxscan991_done2606
    goto rxscan991_scan2605
  rxscan991_loop2604:
    inc rx990_pos
    gt rx990_pos, rx990_eos, rx990_fail2600
    repr_bind_attr_int rx990_cur, rx990_curclass, "$!from", rx990_pos
  rxscan991_scan2605:
    nqp_rxmark rx990_bstack, rxscan991_loop2604, rx990_pos, 0
  rxscan991_done2606:
    ge rx990_pos, rx990_eos, rx990_fail2600
    substr $S11, rx990_tgt, rx990_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx990_fail2600
    repr_bind_attr_int rx990_cur, rx990_curclass, "$!pos", rx990_pos
    $P11 = rx990_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx990_curclass, "$!pos"
    lt $I11, 0, rx990_fail2600
    nqp_rxmark rx990_bstack, rxsubrule992_pass2607, -1, 0
  rxsubrule992_pass2607:
    rx990_cstack = rx990_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx990_pos, $P11, rx990_curclass, "$!pos"
    rx990_cur."!cursor_pass"(rx990_pos, "quote:sym<dblq>", 'backtrack'=>1)
    .return (rx990_cur)
  rx990_restart2599:
    repr_get_attr_obj rx990_cstack, rx990_cur, rx990_curclass, "$!cstack"
  rx990_fail2600:
    unless rx990_bstack, rx990_done2598
    pop $I19, rx990_bstack
    if_null rx990_cstack, rx990_cstack_done2603
    unless rx990_cstack, rx990_cstack_done2603
    dec $I19
    set $P11, rx990_cstack[$I19]
  rx990_cstack_done2603:
    pop rx990_rep, rx990_bstack
    pop rx990_pos, rx990_bstack
    pop $I19, rx990_bstack
    lt rx990_pos, -1, rx990_done2598
    lt rx990_pos, 0, rx990_fail2600
    eq $I19, 0, rx990_fail2600
    nqp_islist $I20, rx990_cstack
    unless $I20, rx990_jump2601
    elements $I18, rx990_bstack
    le $I18, 0, rx990_cut2602
    dec $I18
    set $I18, rx990_bstack[$I18]
  rx990_cut2602:
    assign rx990_cstack, $I18
  rx990_jump2601:
    jump $I19
  rx990_done2598:
    rx990_cur."!cursor_fail"()
    .return (rx990_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_154_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1232
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx993_tgt
    .local int rx993_pos
    .local int rx993_off
    .local int rx993_eos
    .local int rx993_rep
    .local pmc rx993_cur
    .local pmc rx993_curclass
    .local pmc rx993_bstack
    .local pmc rx993_cstack
    (rx993_cur, rx993_tgt, rx993_pos, rx993_curclass, rx993_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx993_cur
    length rx993_eos, rx993_tgt
    eq $I19, 1, rx993_restart2610
    gt rx993_pos, rx993_eos, rx993_fail2611
    repr_get_attr_int $I11, self, rx993_curclass, "$!from"
    ne $I11, -1, rxscan994_done2617
    goto rxscan994_scan2616
  rxscan994_loop2615:
    inc rx993_pos
    gt rx993_pos, rx993_eos, rx993_fail2611
    repr_bind_attr_int rx993_cur, rx993_curclass, "$!from", rx993_pos
  rxscan994_scan2616:
    nqp_rxmark rx993_bstack, rxscan994_loop2615, rx993_pos, 0
  rxscan994_done2617:
    nqp_rxmark rx993_bstack, rxcap995_fail2619, rx993_pos, 0
    add $I11, rx993_pos, 1
    gt $I11, rx993_eos, rx993_fail2611
    substr $S10, rx993_tgt, rx993_pos, 1
    ne $S10, ucs4:"q", rx993_fail2611
    add rx993_pos, 1
    nqp_rxpeek $I19, rx993_bstack, rxcap995_fail2619
    inc $I19
    set $I11, rx993_bstack[$I19]
    repr_bind_attr_int rx993_cur, rx993_curclass, "$!pos", rx993_pos
    $P11 = rx993_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx993_pos)
    rx993_cstack = rx993_cur."!cursor_capture"($P11, "sym")
    goto rxcap995_done2618
  rxcap995_fail2619:
    goto rx993_fail2611
  rxcap995_done2618:
    le rx993_pos, 0, rx993_fail2611
    is_cclass $I11, .CCLASS_WORD, rx993_tgt, rx993_pos
    if $I11, rx993_fail2611
    sub $I11, rx993_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx993_tgt, $I11
    unless $I11, rx993_fail2611
    ge rx993_pos, rx993_eos, rx993_fail2611
    substr $S11, rx993_tgt, rx993_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx993_fail2611
    repr_bind_attr_int rx993_cur, rx993_curclass, "$!pos", rx993_pos
    $P11 = rx993_cur."ws"()
    repr_get_attr_int $I11, $P11, rx993_curclass, "$!pos"
    lt $I11, 0, rx993_fail2611
    repr_get_attr_int rx993_pos, $P11, rx993_curclass, "$!pos"
    repr_bind_attr_int rx993_cur, rx993_curclass, "$!pos", rx993_pos
    $P11 = rx993_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx993_curclass, "$!pos"
    lt $I11, 0, rx993_fail2611
    nqp_rxmark rx993_bstack, rxsubrule998_pass2622, -1, 0
  rxsubrule998_pass2622:
    rx993_cstack = rx993_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx993_pos, $P11, rx993_curclass, "$!pos"
    rx993_cur."!cursor_pass"(rx993_pos, "quote:sym<q>", 'backtrack'=>1)
    .return (rx993_cur)
  rx993_restart2610:
    repr_get_attr_obj rx993_cstack, rx993_cur, rx993_curclass, "$!cstack"
  rx993_fail2611:
    unless rx993_bstack, rx993_done2609
    pop $I19, rx993_bstack
    if_null rx993_cstack, rx993_cstack_done2614
    unless rx993_cstack, rx993_cstack_done2614
    dec $I19
    set $P11, rx993_cstack[$I19]
  rx993_cstack_done2614:
    pop rx993_rep, rx993_bstack
    pop rx993_pos, rx993_bstack
    pop $I19, rx993_bstack
    lt rx993_pos, -1, rx993_done2609
    lt rx993_pos, 0, rx993_fail2611
    eq $I19, 0, rx993_fail2611
    nqp_islist $I20, rx993_cstack
    unless $I20, rx993_jump2612
    elements $I18, rx993_bstack
    le $I18, 0, rx993_cut2613
    dec $I18
    set $I18, rx993_bstack[$I18]
  rx993_cut2613:
    assign rx993_cstack, $I18
  rx993_jump2612:
    jump $I19
  rx993_done2609:
    rx993_cur."!cursor_fail"()
    .return (rx993_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_155_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1233
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx999_tgt
    .local int rx999_pos
    .local int rx999_off
    .local int rx999_eos
    .local int rx999_rep
    .local pmc rx999_cur
    .local pmc rx999_curclass
    .local pmc rx999_bstack
    .local pmc rx999_cstack
    (rx999_cur, rx999_tgt, rx999_pos, rx999_curclass, rx999_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx999_cur
    length rx999_eos, rx999_tgt
    eq $I19, 1, rx999_restart2625
    gt rx999_pos, rx999_eos, rx999_fail2626
    repr_get_attr_int $I11, self, rx999_curclass, "$!from"
    ne $I11, -1, rxscan1000_done2632
    goto rxscan1000_scan2631
  rxscan1000_loop2630:
    inc rx999_pos
    gt rx999_pos, rx999_eos, rx999_fail2626
    repr_bind_attr_int rx999_cur, rx999_curclass, "$!from", rx999_pos
  rxscan1000_scan2631:
    nqp_rxmark rx999_bstack, rxscan1000_loop2630, rx999_pos, 0
  rxscan1000_done2632:
    nqp_rxmark rx999_bstack, rxcap1001_fail2634, rx999_pos, 0
    add $I11, rx999_pos, 2
    gt $I11, rx999_eos, rx999_fail2626
    substr $S10, rx999_tgt, rx999_pos, 2
    ne $S10, ucs4:"qq", rx999_fail2626
    add rx999_pos, 2
    nqp_rxpeek $I19, rx999_bstack, rxcap1001_fail2634
    inc $I19
    set $I11, rx999_bstack[$I19]
    repr_bind_attr_int rx999_cur, rx999_curclass, "$!pos", rx999_pos
    $P11 = rx999_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx999_pos)
    rx999_cstack = rx999_cur."!cursor_capture"($P11, "sym")
    goto rxcap1001_done2633
  rxcap1001_fail2634:
    goto rx999_fail2626
  rxcap1001_done2633:
    le rx999_pos, 0, rx999_fail2626
    is_cclass $I11, .CCLASS_WORD, rx999_tgt, rx999_pos
    if $I11, rx999_fail2626
    sub $I11, rx999_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx999_tgt, $I11
    unless $I11, rx999_fail2626
    ge rx999_pos, rx999_eos, rx999_fail2626
    substr $S11, rx999_tgt, rx999_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx999_fail2626
    repr_bind_attr_int rx999_cur, rx999_curclass, "$!pos", rx999_pos
    $P11 = rx999_cur."ws"()
    repr_get_attr_int $I11, $P11, rx999_curclass, "$!pos"
    lt $I11, 0, rx999_fail2626
    repr_get_attr_int rx999_pos, $P11, rx999_curclass, "$!pos"
    repr_bind_attr_int rx999_cur, rx999_curclass, "$!pos", rx999_pos
    $P11 = rx999_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx999_curclass, "$!pos"
    lt $I11, 0, rx999_fail2626
    nqp_rxmark rx999_bstack, rxsubrule1004_pass2637, -1, 0
  rxsubrule1004_pass2637:
    rx999_cstack = rx999_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx999_pos, $P11, rx999_curclass, "$!pos"
    rx999_cur."!cursor_pass"(rx999_pos, "quote:sym<qq>", 'backtrack'=>1)
    .return (rx999_cur)
  rx999_restart2625:
    repr_get_attr_obj rx999_cstack, rx999_cur, rx999_curclass, "$!cstack"
  rx999_fail2626:
    unless rx999_bstack, rx999_done2624
    pop $I19, rx999_bstack
    if_null rx999_cstack, rx999_cstack_done2629
    unless rx999_cstack, rx999_cstack_done2629
    dec $I19
    set $P11, rx999_cstack[$I19]
  rx999_cstack_done2629:
    pop rx999_rep, rx999_bstack
    pop rx999_pos, rx999_bstack
    pop $I19, rx999_bstack
    lt rx999_pos, -1, rx999_done2624
    lt rx999_pos, 0, rx999_fail2626
    eq $I19, 0, rx999_fail2626
    nqp_islist $I20, rx999_cstack
    unless $I20, rx999_jump2627
    elements $I18, rx999_bstack
    le $I18, 0, rx999_cut2628
    dec $I18
    set $I18, rx999_bstack[$I18]
  rx999_cut2628:
    assign rx999_cstack, $I18
  rx999_jump2627:
    jump $I19
  rx999_done2624:
    rx999_cur."!cursor_fail"()
    .return (rx999_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_156_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1234
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1005_tgt
    .local int rx1005_pos
    .local int rx1005_off
    .local int rx1005_eos
    .local int rx1005_rep
    .local pmc rx1005_cur
    .local pmc rx1005_curclass
    .local pmc rx1005_bstack
    .local pmc rx1005_cstack
    (rx1005_cur, rx1005_tgt, rx1005_pos, rx1005_curclass, rx1005_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1005_cur
    length rx1005_eos, rx1005_tgt
    eq $I19, 1, rx1005_restart2640
    gt rx1005_pos, rx1005_eos, rx1005_fail2641
    repr_get_attr_int $I11, self, rx1005_curclass, "$!from"
    ne $I11, -1, rxscan1006_done2647
    goto rxscan1006_scan2646
  rxscan1006_loop2645:
    inc rx1005_pos
    gt rx1005_pos, rx1005_eos, rx1005_fail2641
    repr_bind_attr_int rx1005_cur, rx1005_curclass, "$!from", rx1005_pos
  rxscan1006_scan2646:
    nqp_rxmark rx1005_bstack, rxscan1006_loop2645, rx1005_pos, 0
  rxscan1006_done2647:
    nqp_rxmark rx1005_bstack, rxcap1007_fail2649, rx1005_pos, 0
    add $I11, rx1005_pos, 1
    gt $I11, rx1005_eos, rx1005_fail2641
    substr $S10, rx1005_tgt, rx1005_pos, 1
    ne $S10, ucs4:"Q", rx1005_fail2641
    add rx1005_pos, 1
    nqp_rxpeek $I19, rx1005_bstack, rxcap1007_fail2649
    inc $I19
    set $I11, rx1005_bstack[$I19]
    repr_bind_attr_int rx1005_cur, rx1005_curclass, "$!pos", rx1005_pos
    $P11 = rx1005_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1005_pos)
    rx1005_cstack = rx1005_cur."!cursor_capture"($P11, "sym")
    goto rxcap1007_done2648
  rxcap1007_fail2649:
    goto rx1005_fail2641
  rxcap1007_done2648:
    le rx1005_pos, 0, rx1005_fail2641
    is_cclass $I11, .CCLASS_WORD, rx1005_tgt, rx1005_pos
    if $I11, rx1005_fail2641
    sub $I11, rx1005_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx1005_tgt, $I11
    unless $I11, rx1005_fail2641
    ge rx1005_pos, rx1005_eos, rx1005_fail2641
    substr $S11, rx1005_tgt, rx1005_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx1005_fail2641
    repr_bind_attr_int rx1005_cur, rx1005_curclass, "$!pos", rx1005_pos
    $P11 = rx1005_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1005_curclass, "$!pos"
    lt $I11, 0, rx1005_fail2641
    repr_get_attr_int rx1005_pos, $P11, rx1005_curclass, "$!pos"
    repr_bind_attr_int rx1005_cur, rx1005_curclass, "$!pos", rx1005_pos
    $P11 = rx1005_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx1005_curclass, "$!pos"
    lt $I11, 0, rx1005_fail2641
    nqp_rxmark rx1005_bstack, rxsubrule1010_pass2652, -1, 0
  rxsubrule1010_pass2652:
    rx1005_cstack = rx1005_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1005_pos, $P11, rx1005_curclass, "$!pos"
    rx1005_cur."!cursor_pass"(rx1005_pos, "quote:sym<Q>", 'backtrack'=>1)
    .return (rx1005_cur)
  rx1005_restart2640:
    repr_get_attr_obj rx1005_cstack, rx1005_cur, rx1005_curclass, "$!cstack"
  rx1005_fail2641:
    unless rx1005_bstack, rx1005_done2639
    pop $I19, rx1005_bstack
    if_null rx1005_cstack, rx1005_cstack_done2644
    unless rx1005_cstack, rx1005_cstack_done2644
    dec $I19
    set $P11, rx1005_cstack[$I19]
  rx1005_cstack_done2644:
    pop rx1005_rep, rx1005_bstack
    pop rx1005_pos, rx1005_bstack
    pop $I19, rx1005_bstack
    lt rx1005_pos, -1, rx1005_done2639
    lt rx1005_pos, 0, rx1005_fail2641
    eq $I19, 0, rx1005_fail2641
    nqp_islist $I20, rx1005_cstack
    unless $I20, rx1005_jump2642
    elements $I18, rx1005_bstack
    le $I18, 0, rx1005_cut2643
    dec $I18
    set $I18, rx1005_bstack[$I18]
  rx1005_cut2643:
    assign rx1005_cstack, $I18
  rx1005_jump2642:
    jump $I19
  rx1005_done2639:
    rx1005_cur."!cursor_fail"()
    .return (rx1005_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_157_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1235
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1011_tgt
    .local int rx1011_pos
    .local int rx1011_off
    .local int rx1011_eos
    .local int rx1011_rep
    .local pmc rx1011_cur
    .local pmc rx1011_curclass
    .local pmc rx1011_bstack
    .local pmc rx1011_cstack
    (rx1011_cur, rx1011_tgt, rx1011_pos, rx1011_curclass, rx1011_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1011_cur
    length rx1011_eos, rx1011_tgt
    eq $I19, 1, rx1011_restart2655
    gt rx1011_pos, rx1011_eos, rx1011_fail2656
    repr_get_attr_int $I11, self, rx1011_curclass, "$!from"
    ne $I11, -1, rxscan1012_done2662
    goto rxscan1012_scan2661
  rxscan1012_loop2660:
    inc rx1011_pos
    gt rx1011_pos, rx1011_eos, rx1011_fail2656
    repr_bind_attr_int rx1011_cur, rx1011_curclass, "$!from", rx1011_pos
  rxscan1012_scan2661:
    nqp_rxmark rx1011_bstack, rxscan1012_loop2660, rx1011_pos, 0
  rxscan1012_done2662:
    nqp_rxmark rx1011_bstack, rxcap1013_fail2664, rx1011_pos, 0
    add $I11, rx1011_pos, 5
    gt $I11, rx1011_eos, rx1011_fail2656
    substr $S10, rx1011_tgt, rx1011_pos, 5
    ne $S10, ucs4:"Q:PIR", rx1011_fail2656
    add rx1011_pos, 5
    nqp_rxpeek $I19, rx1011_bstack, rxcap1013_fail2664
    inc $I19
    set $I11, rx1011_bstack[$I19]
    repr_bind_attr_int rx1011_cur, rx1011_curclass, "$!pos", rx1011_pos
    $P11 = rx1011_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1011_pos)
    rx1011_cstack = rx1011_cur."!cursor_capture"($P11, "sym")
    goto rxcap1013_done2663
  rxcap1013_fail2664:
    goto rx1011_fail2656
  rxcap1013_done2663:
    repr_bind_attr_int rx1011_cur, rx1011_curclass, "$!pos", rx1011_pos
    $P11 = rx1011_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1011_curclass, "$!pos"
    lt $I11, 0, rx1011_fail2656
    repr_get_attr_int rx1011_pos, $P11, rx1011_curclass, "$!pos"
    repr_bind_attr_int rx1011_cur, rx1011_curclass, "$!pos", rx1011_pos
    $P11 = rx1011_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx1011_curclass, "$!pos"
    lt $I11, 0, rx1011_fail2656
    nqp_rxmark rx1011_bstack, rxsubrule1015_pass2666, -1, 0
  rxsubrule1015_pass2666:
    rx1011_cstack = rx1011_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1011_pos, $P11, rx1011_curclass, "$!pos"
    rx1011_cur."!cursor_pass"(rx1011_pos, "quote:sym<Q:PIR>", 'backtrack'=>1)
    .return (rx1011_cur)
  rx1011_restart2655:
    repr_get_attr_obj rx1011_cstack, rx1011_cur, rx1011_curclass, "$!cstack"
  rx1011_fail2656:
    unless rx1011_bstack, rx1011_done2654
    pop $I19, rx1011_bstack
    if_null rx1011_cstack, rx1011_cstack_done2659
    unless rx1011_cstack, rx1011_cstack_done2659
    dec $I19
    set $P11, rx1011_cstack[$I19]
  rx1011_cstack_done2659:
    pop rx1011_rep, rx1011_bstack
    pop rx1011_pos, rx1011_bstack
    pop $I19, rx1011_bstack
    lt rx1011_pos, -1, rx1011_done2654
    lt rx1011_pos, 0, rx1011_fail2656
    eq $I19, 0, rx1011_fail2656
    nqp_islist $I20, rx1011_cstack
    unless $I20, rx1011_jump2657
    elements $I18, rx1011_bstack
    le $I18, 0, rx1011_cut2658
    dec $I18
    set $I18, rx1011_bstack[$I18]
  rx1011_cut2658:
    assign rx1011_cstack, $I18
  rx1011_jump2657:
    jump $I19
  rx1011_done2654:
    rx1011_cur."!cursor_fail"()
    .return (rx1011_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_158_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1236
    .param pmc _lex_param_0 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx1016_tgt
    .local int rx1016_pos
    .local int rx1016_off
    .local int rx1016_eos
    .local int rx1016_rep
    .local pmc rx1016_cur
    .local pmc rx1016_curclass
    .local pmc rx1016_bstack
    .local pmc rx1016_cstack
    (rx1016_cur, rx1016_tgt, rx1016_pos, rx1016_curclass, rx1016_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1016_cur
    length rx1016_eos, rx1016_tgt
    eq $I19, 1, rx1016_restart2669
    gt rx1016_pos, rx1016_eos, rx1016_fail2670
    repr_get_attr_int $I11, self, rx1016_curclass, "$!from"
    ne $I11, -1, rxscan1017_done2676
    goto rxscan1017_scan2675
  rxscan1017_loop2674:
    inc rx1016_pos
    gt rx1016_pos, rx1016_eos, rx1016_fail2670
    repr_bind_attr_int rx1016_cur, rx1016_curclass, "$!from", rx1016_pos
  rxscan1017_scan2675:
    nqp_rxmark rx1016_bstack, rxscan1017_loop2674, rx1016_pos, 0
  rxscan1017_done2676:
    add $I11, rx1016_pos, 1
    gt $I11, rx1016_eos, rx1016_fail2670
    substr $S10, rx1016_tgt, rx1016_pos, 1
    ne $S10, ucs4:"/", rx1016_fail2670
    add rx1016_pos, 1
    repr_bind_attr_int rx1016_cur, rx1016_curclass, "$!pos", rx1016_pos
    $P11 = rx1016_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx1016_curclass, "$!pos"
    lt $I11, 0, rx1016_fail2670
    repr_get_attr_int rx1016_pos, $P11, rx1016_curclass, "$!pos"
    repr_bind_attr_int rx1016_cur, rx1016_curclass, "$!pos", rx1016_pos
    store_lex unicode:"$\x{a2}", rx1016_cur
    unless_null $P101, fallback2678
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2679
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2679:
    unless_null $P5002, vivi_10192680
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_10192680:
    set $P101, $P5002
  fallback2678:
    repr_bind_attr_int rx1016_cur, rx1016_curclass, "$!pos", rx1016_pos
    $P11 = rx1016_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx1016_curclass, "$!pos"
    lt $I11, 0, rx1016_fail2670
    nqp_rxmark rx1016_bstack, rxsubrule1020_pass2681, -1, 0
  rxsubrule1020_pass2681:
    rx1016_cstack = rx1016_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx1016_pos, $P11, rx1016_curclass, "$!pos"
    add $I11, rx1016_pos, 1
    gt $I11, rx1016_eos, rx1016_fail2670
    substr $S10, rx1016_tgt, rx1016_pos, 1
    ne $S10, ucs4:"/", rx1016_fail2670
    add rx1016_pos, 1
    rx1016_cur."!cursor_pass"(rx1016_pos, "quote:sym</ />", 'backtrack'=>1)
    .return (rx1016_cur)
  rx1016_restart2669:
    repr_get_attr_obj rx1016_cstack, rx1016_cur, rx1016_curclass, "$!cstack"
  rx1016_fail2670:
    unless rx1016_bstack, rx1016_done2668
    pop $I19, rx1016_bstack
    if_null rx1016_cstack, rx1016_cstack_done2673
    unless rx1016_cstack, rx1016_cstack_done2673
    dec $I19
    set $P11, rx1016_cstack[$I19]
  rx1016_cstack_done2673:
    pop rx1016_rep, rx1016_bstack
    pop rx1016_pos, rx1016_bstack
    pop $I19, rx1016_bstack
    lt rx1016_pos, -1, rx1016_done2668
    lt rx1016_pos, 0, rx1016_fail2670
    eq $I19, 0, rx1016_fail2670
    nqp_islist $I20, rx1016_cstack
    unless $I20, rx1016_jump2671
    elements $I18, rx1016_bstack
    le $I18, 0, rx1016_cut2672
    dec $I18
    set $I18, rx1016_bstack[$I18]
  rx1016_cut2672:
    assign rx1016_cstack, $I18
  rx1016_jump2671:
    jump $I19
  rx1016_done2668:
    rx1016_cur."!cursor_fail"()
    .return (rx1016_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_159_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1244
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1021_tgt
    .local int rx1021_pos
    .local int rx1021_off
    .local int rx1021_eos
    .local int rx1021_rep
    .local pmc rx1021_cur
    .local pmc rx1021_curclass
    .local pmc rx1021_bstack
    .local pmc rx1021_cstack
    (rx1021_cur, rx1021_tgt, rx1021_pos, rx1021_curclass, rx1021_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1021_cur
    length rx1021_eos, rx1021_tgt
    eq $I19, 1, rx1021_restart2684
    gt rx1021_pos, rx1021_eos, rx1021_fail2685
    repr_get_attr_int $I11, self, rx1021_curclass, "$!from"
    ne $I11, -1, rxscan1022_done2691
    goto rxscan1022_scan2690
  rxscan1022_loop2689:
    inc rx1021_pos
    gt rx1021_pos, rx1021_eos, rx1021_fail2685
    repr_bind_attr_int rx1021_cur, rx1021_curclass, "$!from", rx1021_pos
  rxscan1022_scan2690:
    nqp_rxmark rx1021_bstack, rxscan1022_loop2689, rx1021_pos, 0
  rxscan1022_done2691:
    ge rx1021_pos, rx1021_eos, rx1021_fail2685
    substr $S11, rx1021_tgt, rx1021_pos, 1
    index $I11, ucs4:"$", $S11
    lt $I11, 0, rx1021_fail2685
    repr_bind_attr_int rx1021_cur, rx1021_curclass, "$!pos", rx1021_pos
    $P11 = rx1021_cur."quotemod_check"("s")
    repr_get_attr_int $I11, $P11, rx1021_curclass, "$!pos"
    lt $I11, 0, rx1021_fail2685
    repr_bind_attr_int rx1021_cur, rx1021_curclass, "$!pos", rx1021_pos
    $P11 = rx1021_cur."variable"()
    repr_get_attr_int $I11, $P11, rx1021_curclass, "$!pos"
    lt $I11, 0, rx1021_fail2685
    nqp_rxmark rx1021_bstack, rxsubrule1023_pass2692, -1, 0
  rxsubrule1023_pass2692:
    rx1021_cstack = rx1021_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx1021_pos, $P11, rx1021_curclass, "$!pos"
    rx1021_cur."!cursor_pass"(rx1021_pos, "quote_escape:sym<$>", 'backtrack'=>1)
    .return (rx1021_cur)
  rx1021_restart2684:
    repr_get_attr_obj rx1021_cstack, rx1021_cur, rx1021_curclass, "$!cstack"
  rx1021_fail2685:
    unless rx1021_bstack, rx1021_done2683
    pop $I19, rx1021_bstack
    if_null rx1021_cstack, rx1021_cstack_done2688
    unless rx1021_cstack, rx1021_cstack_done2688
    dec $I19
    set $P11, rx1021_cstack[$I19]
  rx1021_cstack_done2688:
    pop rx1021_rep, rx1021_bstack
    pop rx1021_pos, rx1021_bstack
    pop $I19, rx1021_bstack
    lt rx1021_pos, -1, rx1021_done2683
    lt rx1021_pos, 0, rx1021_fail2685
    eq $I19, 0, rx1021_fail2685
    nqp_islist $I20, rx1021_cstack
    unless $I20, rx1021_jump2686
    elements $I18, rx1021_bstack
    le $I18, 0, rx1021_cut2687
    dec $I18
    set $I18, rx1021_bstack[$I18]
  rx1021_cut2687:
    assign rx1021_cstack, $I18
  rx1021_jump2686:
    jump $I19
  rx1021_done2683:
    rx1021_cur."!cursor_fail"()
    .return (rx1021_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_160_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1245
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1024_tgt
    .local int rx1024_pos
    .local int rx1024_off
    .local int rx1024_eos
    .local int rx1024_rep
    .local pmc rx1024_cur
    .local pmc rx1024_curclass
    .local pmc rx1024_bstack
    .local pmc rx1024_cstack
    (rx1024_cur, rx1024_tgt, rx1024_pos, rx1024_curclass, rx1024_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1024_cur
    length rx1024_eos, rx1024_tgt
    eq $I19, 1, rx1024_restart2695
    gt rx1024_pos, rx1024_eos, rx1024_fail2696
    repr_get_attr_int $I11, self, rx1024_curclass, "$!from"
    ne $I11, -1, rxscan1025_done2702
    goto rxscan1025_scan2701
  rxscan1025_loop2700:
    inc rx1024_pos
    gt rx1024_pos, rx1024_eos, rx1024_fail2696
    repr_bind_attr_int rx1024_cur, rx1024_curclass, "$!from", rx1024_pos
  rxscan1025_scan2701:
    nqp_rxmark rx1024_bstack, rxscan1025_loop2700, rx1024_pos, 0
  rxscan1025_done2702:
    ge rx1024_pos, rx1024_eos, rx1024_fail2696
    substr $S11, rx1024_tgt, rx1024_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1024_fail2696
    repr_bind_attr_int rx1024_cur, rx1024_curclass, "$!pos", rx1024_pos
    $P11 = rx1024_cur."quotemod_check"("c")
    repr_get_attr_int $I11, $P11, rx1024_curclass, "$!pos"
    lt $I11, 0, rx1024_fail2696
    repr_bind_attr_int rx1024_cur, rx1024_curclass, "$!pos", rx1024_pos
    $P11 = rx1024_cur."block"()
    repr_get_attr_int $I11, $P11, rx1024_curclass, "$!pos"
    lt $I11, 0, rx1024_fail2696
    nqp_rxmark rx1024_bstack, rxsubrule1026_pass2703, -1, 0
  rxsubrule1026_pass2703:
    rx1024_cstack = rx1024_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx1024_pos, $P11, rx1024_curclass, "$!pos"
    rx1024_cur."!cursor_pass"(rx1024_pos, "quote_escape:sym<{ }>", 'backtrack'=>1)
    .return (rx1024_cur)
  rx1024_restart2695:
    repr_get_attr_obj rx1024_cstack, rx1024_cur, rx1024_curclass, "$!cstack"
  rx1024_fail2696:
    unless rx1024_bstack, rx1024_done2694
    pop $I19, rx1024_bstack
    if_null rx1024_cstack, rx1024_cstack_done2699
    unless rx1024_cstack, rx1024_cstack_done2699
    dec $I19
    set $P11, rx1024_cstack[$I19]
  rx1024_cstack_done2699:
    pop rx1024_rep, rx1024_bstack
    pop rx1024_pos, rx1024_bstack
    pop $I19, rx1024_bstack
    lt rx1024_pos, -1, rx1024_done2694
    lt rx1024_pos, 0, rx1024_fail2696
    eq $I19, 0, rx1024_fail2696
    nqp_islist $I20, rx1024_cstack
    unless $I20, rx1024_jump2697
    elements $I18, rx1024_bstack
    le $I18, 0, rx1024_cut2698
    dec $I18
    set $I18, rx1024_bstack[$I18]
  rx1024_cut2698:
    assign rx1024_cstack, $I18
  rx1024_jump2697:
    jump $I19
  rx1024_done2694:
    rx1024_cur."!cursor_fail"()
    .return (rx1024_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_161_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1246
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1027_tgt
    .local int rx1027_pos
    .local int rx1027_off
    .local int rx1027_eos
    .local int rx1027_rep
    .local pmc rx1027_cur
    .local pmc rx1027_curclass
    .local pmc rx1027_bstack
    .local pmc rx1027_cstack
    (rx1027_cur, rx1027_tgt, rx1027_pos, rx1027_curclass, rx1027_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1027_cur
    length rx1027_eos, rx1027_tgt
    eq $I19, 1, rx1027_restart2706
    gt rx1027_pos, rx1027_eos, rx1027_fail2707
    repr_get_attr_int $I11, self, rx1027_curclass, "$!from"
    ne $I11, -1, rxscan1028_done2713
    goto rxscan1028_scan2712
  rxscan1028_loop2711:
    inc rx1027_pos
    gt rx1027_pos, rx1027_eos, rx1027_fail2707
    repr_bind_attr_int rx1027_cur, rx1027_curclass, "$!from", rx1027_pos
  rxscan1028_scan2712:
    nqp_rxmark rx1027_bstack, rxscan1028_loop2711, rx1027_pos, 0
  rxscan1028_done2713:
    add $I11, rx1027_pos, 2
    gt $I11, rx1027_eos, rx1027_fail2707
    substr $S10, rx1027_tgt, rx1027_pos, 2
    ne $S10, ucs4:"\\e", rx1027_fail2707
    add rx1027_pos, 2
    repr_bind_attr_int rx1027_cur, rx1027_curclass, "$!pos", rx1027_pos
    $P11 = rx1027_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx1027_curclass, "$!pos"
    lt $I11, 0, rx1027_fail2707
    rx1027_cur."!cursor_pass"(rx1027_pos, "quote_escape:sym<esc>", 'backtrack'=>1)
    .return (rx1027_cur)
  rx1027_restart2706:
    repr_get_attr_obj rx1027_cstack, rx1027_cur, rx1027_curclass, "$!cstack"
  rx1027_fail2707:
    unless rx1027_bstack, rx1027_done2705
    pop $I19, rx1027_bstack
    if_null rx1027_cstack, rx1027_cstack_done2710
    unless rx1027_cstack, rx1027_cstack_done2710
    dec $I19
    set $P11, rx1027_cstack[$I19]
  rx1027_cstack_done2710:
    pop rx1027_rep, rx1027_bstack
    pop rx1027_pos, rx1027_bstack
    pop $I19, rx1027_bstack
    lt rx1027_pos, -1, rx1027_done2705
    lt rx1027_pos, 0, rx1027_fail2707
    eq $I19, 0, rx1027_fail2707
    nqp_islist $I20, rx1027_cstack
    unless $I20, rx1027_jump2708
    elements $I18, rx1027_bstack
    le $I18, 0, rx1027_cut2709
    dec $I18
    set $I18, rx1027_bstack[$I18]
  rx1027_cut2709:
    assign rx1027_cstack, $I18
  rx1027_jump2708:
    jump $I19
  rx1027_done2705:
    rx1027_cur."!cursor_fail"()
    .return (rx1027_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_162_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1248
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1029_tgt
    .local int rx1029_pos
    .local int rx1029_off
    .local int rx1029_eos
    .local int rx1029_rep
    .local pmc rx1029_cur
    .local pmc rx1029_curclass
    .local pmc rx1029_bstack
    .local pmc rx1029_cstack
    (rx1029_cur, rx1029_tgt, rx1029_pos, rx1029_curclass, rx1029_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1029_cur
    length rx1029_eos, rx1029_tgt
    eq $I19, 1, rx1029_restart2716
    gt rx1029_pos, rx1029_eos, rx1029_fail2717
    repr_get_attr_int $I11, self, rx1029_curclass, "$!from"
    ne $I11, -1, rxscan1030_done2723
    goto rxscan1030_scan2722
  rxscan1030_loop2721:
    inc rx1029_pos
    gt rx1029_pos, rx1029_eos, rx1029_fail2717
    repr_bind_attr_int rx1029_cur, rx1029_curclass, "$!from", rx1029_pos
  rxscan1030_scan2722:
    nqp_rxmark rx1029_bstack, rxscan1030_loop2721, rx1029_pos, 0
  rxscan1030_done2723:
    add $I11, rx1029_pos, 1
    gt $I11, rx1029_eos, rx1029_fail2717
    substr $S10, rx1029_tgt, rx1029_pos, 1
    ne $S10, ucs4:"(", rx1029_fail2717
    add rx1029_pos, 1
    repr_bind_attr_int rx1029_cur, rx1029_curclass, "$!pos", rx1029_pos
    $P11 = rx1029_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1029_curclass, "$!pos"
    lt $I11, 0, rx1029_fail2717
    repr_get_attr_int rx1029_pos, $P11, rx1029_curclass, "$!pos"
    nqp_rxmark rx1029_bstack, rxquantr1032_done2726, rx1029_pos, 0
  rxquantr1032_loop2725:
    repr_bind_attr_int rx1029_cur, rx1029_curclass, "$!pos", rx1029_pos
    $P11 = rx1029_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1029_curclass, "$!pos"
    lt $I11, 0, rx1029_fail2717
    goto rxsubrule1033_pass2727
  rxsubrule1033_back2728:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx1029_curclass, "$!pos"
    lt $I11, 0, rx1029_fail2717
  rxsubrule1033_pass2727:
    rx1029_cstack = rx1029_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule1033_back2728
    push rx1029_bstack, $I11
    push rx1029_bstack, 0
    push rx1029_bstack, rx1029_pos
    elements $I11, rx1029_cstack
    push rx1029_bstack, $I11
    repr_get_attr_int rx1029_pos, $P11, rx1029_curclass, "$!pos"
    nqp_rxpeek $I19, rx1029_bstack, rxquantr1032_done2726
    inc $I19
    inc $I19
    set rx1029_rep, rx1029_bstack[$I19]
    nqp_rxcommit rx1029_bstack, rxquantr1032_done2726
    inc rx1029_rep
  rxquantr1032_done2726:
    add $I11, rx1029_pos, 1
    gt $I11, rx1029_eos, rx1029_fail2717
    substr $S10, rx1029_tgt, rx1029_pos, 1
    ne $S10, ucs4:")", rx1029_fail2717
    add rx1029_pos, 1
    rx1029_cur."!cursor_pass"(rx1029_pos, "circumfix:sym<( )>", 'backtrack'=>1)
    .return (rx1029_cur)
  rx1029_restart2716:
    repr_get_attr_obj rx1029_cstack, rx1029_cur, rx1029_curclass, "$!cstack"
  rx1029_fail2717:
    unless rx1029_bstack, rx1029_done2715
    pop $I19, rx1029_bstack
    if_null rx1029_cstack, rx1029_cstack_done2720
    unless rx1029_cstack, rx1029_cstack_done2720
    dec $I19
    set $P11, rx1029_cstack[$I19]
  rx1029_cstack_done2720:
    pop rx1029_rep, rx1029_bstack
    pop rx1029_pos, rx1029_bstack
    pop $I19, rx1029_bstack
    lt rx1029_pos, -1, rx1029_done2715
    lt rx1029_pos, 0, rx1029_fail2717
    eq $I19, 0, rx1029_fail2717
    nqp_islist $I20, rx1029_cstack
    unless $I20, rx1029_jump2718
    elements $I18, rx1029_bstack
    le $I18, 0, rx1029_cut2719
    dec $I18
    set $I18, rx1029_bstack[$I18]
  rx1029_cut2719:
    assign rx1029_cstack, $I18
  rx1029_jump2718:
    jump $I19
  rx1029_done2715:
    rx1029_cur."!cursor_fail"()
    .return (rx1029_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_163_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1249
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1034_tgt
    .local int rx1034_pos
    .local int rx1034_off
    .local int rx1034_eos
    .local int rx1034_rep
    .local pmc rx1034_cur
    .local pmc rx1034_curclass
    .local pmc rx1034_bstack
    .local pmc rx1034_cstack
    (rx1034_cur, rx1034_tgt, rx1034_pos, rx1034_curclass, rx1034_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1034_cur
    length rx1034_eos, rx1034_tgt
    eq $I19, 1, rx1034_restart2731
    gt rx1034_pos, rx1034_eos, rx1034_fail2732
    repr_get_attr_int $I11, self, rx1034_curclass, "$!from"
    ne $I11, -1, rxscan1035_done2738
    goto rxscan1035_scan2737
  rxscan1035_loop2736:
    inc rx1034_pos
    gt rx1034_pos, rx1034_eos, rx1034_fail2732
    repr_bind_attr_int rx1034_cur, rx1034_curclass, "$!from", rx1034_pos
  rxscan1035_scan2737:
    nqp_rxmark rx1034_bstack, rxscan1035_loop2736, rx1034_pos, 0
  rxscan1035_done2738:
    add $I11, rx1034_pos, 1
    gt $I11, rx1034_eos, rx1034_fail2732
    substr $S10, rx1034_tgt, rx1034_pos, 1
    ne $S10, ucs4:"[", rx1034_fail2732
    add rx1034_pos, 1
    repr_bind_attr_int rx1034_cur, rx1034_curclass, "$!pos", rx1034_pos
    $P11 = rx1034_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1034_curclass, "$!pos"
    lt $I11, 0, rx1034_fail2732
    repr_get_attr_int rx1034_pos, $P11, rx1034_curclass, "$!pos"
    nqp_rxmark rx1034_bstack, rxquantr1037_done2741, rx1034_pos, 0
  rxquantr1037_loop2740:
    repr_bind_attr_int rx1034_cur, rx1034_curclass, "$!pos", rx1034_pos
    $P11 = rx1034_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1034_curclass, "$!pos"
    lt $I11, 0, rx1034_fail2732
    goto rxsubrule1038_pass2742
  rxsubrule1038_back2743:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx1034_curclass, "$!pos"
    lt $I11, 0, rx1034_fail2732
  rxsubrule1038_pass2742:
    rx1034_cstack = rx1034_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule1038_back2743
    push rx1034_bstack, $I11
    push rx1034_bstack, 0
    push rx1034_bstack, rx1034_pos
    elements $I11, rx1034_cstack
    push rx1034_bstack, $I11
    repr_get_attr_int rx1034_pos, $P11, rx1034_curclass, "$!pos"
    nqp_rxpeek $I19, rx1034_bstack, rxquantr1037_done2741
    inc $I19
    inc $I19
    set rx1034_rep, rx1034_bstack[$I19]
    nqp_rxcommit rx1034_bstack, rxquantr1037_done2741
    inc rx1034_rep
  rxquantr1037_done2741:
    add $I11, rx1034_pos, 1
    gt $I11, rx1034_eos, rx1034_fail2732
    substr $S10, rx1034_tgt, rx1034_pos, 1
    ne $S10, ucs4:"]", rx1034_fail2732
    add rx1034_pos, 1
    rx1034_cur."!cursor_pass"(rx1034_pos, "circumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx1034_cur)
  rx1034_restart2731:
    repr_get_attr_obj rx1034_cstack, rx1034_cur, rx1034_curclass, "$!cstack"
  rx1034_fail2732:
    unless rx1034_bstack, rx1034_done2730
    pop $I19, rx1034_bstack
    if_null rx1034_cstack, rx1034_cstack_done2735
    unless rx1034_cstack, rx1034_cstack_done2735
    dec $I19
    set $P11, rx1034_cstack[$I19]
  rx1034_cstack_done2735:
    pop rx1034_rep, rx1034_bstack
    pop rx1034_pos, rx1034_bstack
    pop $I19, rx1034_bstack
    lt rx1034_pos, -1, rx1034_done2730
    lt rx1034_pos, 0, rx1034_fail2732
    eq $I19, 0, rx1034_fail2732
    nqp_islist $I20, rx1034_cstack
    unless $I20, rx1034_jump2733
    elements $I18, rx1034_bstack
    le $I18, 0, rx1034_cut2734
    dec $I18
    set $I18, rx1034_bstack[$I18]
  rx1034_cut2734:
    assign rx1034_cstack, $I18
  rx1034_jump2733:
    jump $I19
  rx1034_done2730:
    rx1034_cur."!cursor_fail"()
    .return (rx1034_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_164_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1250
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1039_tgt
    .local int rx1039_pos
    .local int rx1039_off
    .local int rx1039_eos
    .local int rx1039_rep
    .local pmc rx1039_cur
    .local pmc rx1039_curclass
    .local pmc rx1039_bstack
    .local pmc rx1039_cstack
    (rx1039_cur, rx1039_tgt, rx1039_pos, rx1039_curclass, rx1039_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1039_cur
    length rx1039_eos, rx1039_tgt
    eq $I19, 1, rx1039_restart2746
    gt rx1039_pos, rx1039_eos, rx1039_fail2747
    repr_get_attr_int $I11, self, rx1039_curclass, "$!from"
    ne $I11, -1, rxscan1040_done2753
    goto rxscan1040_scan2752
  rxscan1040_loop2751:
    inc rx1039_pos
    gt rx1039_pos, rx1039_eos, rx1039_fail2747
    repr_bind_attr_int rx1039_cur, rx1039_curclass, "$!from", rx1039_pos
  rxscan1040_scan2752:
    nqp_rxmark rx1039_bstack, rxscan1040_loop2751, rx1039_pos, 0
  rxscan1040_done2753:
    ge rx1039_pos, rx1039_eos, rx1039_fail2747
    substr $S11, rx1039_tgt, rx1039_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx1039_fail2747
    repr_bind_attr_int rx1039_cur, rx1039_curclass, "$!pos", rx1039_pos
    $P11 = rx1039_cur."quote_EXPR"(":q", ":w")
    repr_get_attr_int $I11, $P11, rx1039_curclass, "$!pos"
    lt $I11, 0, rx1039_fail2747
    nqp_rxmark rx1039_bstack, rxsubrule1041_pass2754, -1, 0
  rxsubrule1041_pass2754:
    rx1039_cstack = rx1039_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1039_pos, $P11, rx1039_curclass, "$!pos"
    rx1039_cur."!cursor_pass"(rx1039_pos, "circumfix:sym<ang>", 'backtrack'=>1)
    .return (rx1039_cur)
  rx1039_restart2746:
    repr_get_attr_obj rx1039_cstack, rx1039_cur, rx1039_curclass, "$!cstack"
  rx1039_fail2747:
    unless rx1039_bstack, rx1039_done2745
    pop $I19, rx1039_bstack
    if_null rx1039_cstack, rx1039_cstack_done2750
    unless rx1039_cstack, rx1039_cstack_done2750
    dec $I19
    set $P11, rx1039_cstack[$I19]
  rx1039_cstack_done2750:
    pop rx1039_rep, rx1039_bstack
    pop rx1039_pos, rx1039_bstack
    pop $I19, rx1039_bstack
    lt rx1039_pos, -1, rx1039_done2745
    lt rx1039_pos, 0, rx1039_fail2747
    eq $I19, 0, rx1039_fail2747
    nqp_islist $I20, rx1039_cstack
    unless $I20, rx1039_jump2748
    elements $I18, rx1039_bstack
    le $I18, 0, rx1039_cut2749
    dec $I18
    set $I18, rx1039_bstack[$I18]
  rx1039_cut2749:
    assign rx1039_cstack, $I18
  rx1039_jump2748:
    jump $I19
  rx1039_done2745:
    rx1039_cur."!cursor_fail"()
    .return (rx1039_cur) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_165_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1251
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1042_tgt
    .local int rx1042_pos
    .local int rx1042_off
    .local int rx1042_eos
    .local int rx1042_rep
    .local pmc rx1042_cur
    .local pmc rx1042_curclass
    .local pmc rx1042_bstack
    .local pmc rx1042_cstack
    (rx1042_cur, rx1042_tgt, rx1042_pos, rx1042_curclass, rx1042_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1042_cur
    length rx1042_eos, rx1042_tgt
    eq $I19, 1, rx1042_restart2757
    gt rx1042_pos, rx1042_eos, rx1042_fail2758
    repr_get_attr_int $I11, self, rx1042_curclass, "$!from"
    ne $I11, -1, rxscan1043_done2764
    goto rxscan1043_scan2763
  rxscan1043_loop2762:
    inc rx1042_pos
    gt rx1042_pos, rx1042_eos, rx1042_fail2758
    repr_bind_attr_int rx1042_cur, rx1042_curclass, "$!from", rx1042_pos
  rxscan1043_scan2763:
    nqp_rxmark rx1042_bstack, rxscan1043_loop2762, rx1042_pos, 0
  rxscan1043_done2764:
    ge rx1042_pos, rx1042_eos, rx1042_fail2758
    substr $S11, rx1042_tgt, rx1042_pos, 1
    index $I11, ucs4:"\x{ab}", $S11
    lt $I11, 0, rx1042_fail2758
    repr_bind_attr_int rx1042_cur, rx1042_curclass, "$!pos", rx1042_pos
    $P11 = rx1042_cur."quote_EXPR"(":qq", ":w")
    repr_get_attr_int $I11, $P11, rx1042_curclass, "$!pos"
    lt $I11, 0, rx1042_fail2758
    nqp_rxmark rx1042_bstack, rxsubrule1044_pass2765, -1, 0
  rxsubrule1044_pass2765:
    rx1042_cstack = rx1042_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1042_pos, $P11, rx1042_curclass, "$!pos"
    rx1042_cur."!cursor_pass"(rx1042_pos, utf8:"circumfix:sym<\x{ab} \x{bb}>", 'backtrack'=>1)
    .return (rx1042_cur)
  rx1042_restart2757:
    repr_get_attr_obj rx1042_cstack, rx1042_cur, rx1042_curclass, "$!cstack"
  rx1042_fail2758:
    unless rx1042_bstack, rx1042_done2756
    pop $I19, rx1042_bstack
    if_null rx1042_cstack, rx1042_cstack_done2761
    unless rx1042_cstack, rx1042_cstack_done2761
    dec $I19
    set $P11, rx1042_cstack[$I19]
  rx1042_cstack_done2761:
    pop rx1042_rep, rx1042_bstack
    pop rx1042_pos, rx1042_bstack
    pop $I19, rx1042_bstack
    lt rx1042_pos, -1, rx1042_done2756
    lt rx1042_pos, 0, rx1042_fail2758
    eq $I19, 0, rx1042_fail2758
    nqp_islist $I20, rx1042_cstack
    unless $I20, rx1042_jump2759
    elements $I18, rx1042_bstack
    le $I18, 0, rx1042_cut2760
    dec $I18
    set $I18, rx1042_bstack[$I18]
  rx1042_cut2760:
    assign rx1042_cstack, $I18
  rx1042_jump2759:
    jump $I19
  rx1042_done2756:
    rx1042_cur."!cursor_fail"()
    .return (rx1042_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_166_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1252
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1045_tgt
    .local int rx1045_pos
    .local int rx1045_off
    .local int rx1045_eos
    .local int rx1045_rep
    .local pmc rx1045_cur
    .local pmc rx1045_curclass
    .local pmc rx1045_bstack
    .local pmc rx1045_cstack
    (rx1045_cur, rx1045_tgt, rx1045_pos, rx1045_curclass, rx1045_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1045_cur
    length rx1045_eos, rx1045_tgt
    eq $I19, 1, rx1045_restart2768
    gt rx1045_pos, rx1045_eos, rx1045_fail2769
    repr_get_attr_int $I11, self, rx1045_curclass, "$!from"
    ne $I11, -1, rxscan1046_done2775
    goto rxscan1046_scan2774
  rxscan1046_loop2773:
    inc rx1045_pos
    gt rx1045_pos, rx1045_eos, rx1045_fail2769
    repr_bind_attr_int rx1045_cur, rx1045_curclass, "$!from", rx1045_pos
  rxscan1046_scan2774:
    nqp_rxmark rx1045_bstack, rxscan1046_loop2773, rx1045_pos, 0
  rxscan1046_done2775:
    ge rx1045_pos, rx1045_eos, rx1045_fail2769
    substr $S11, rx1045_tgt, rx1045_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1045_fail2769
    repr_bind_attr_int rx1045_cur, rx1045_curclass, "$!pos", rx1045_pos
    $P11 = rx1045_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx1045_curclass, "$!pos"
    lt $I11, 0, rx1045_fail2769
    nqp_rxmark rx1045_bstack, rxsubrule1047_pass2776, -1, 0
  rxsubrule1047_pass2776:
    rx1045_cstack = rx1045_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx1045_pos, $P11, rx1045_curclass, "$!pos"
    rx1045_cur."!cursor_pass"(rx1045_pos, "circumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx1045_cur)
  rx1045_restart2768:
    repr_get_attr_obj rx1045_cstack, rx1045_cur, rx1045_curclass, "$!cstack"
  rx1045_fail2769:
    unless rx1045_bstack, rx1045_done2767
    pop $I19, rx1045_bstack
    if_null rx1045_cstack, rx1045_cstack_done2772
    unless rx1045_cstack, rx1045_cstack_done2772
    dec $I19
    set $P11, rx1045_cstack[$I19]
  rx1045_cstack_done2772:
    pop rx1045_rep, rx1045_bstack
    pop rx1045_pos, rx1045_bstack
    pop $I19, rx1045_bstack
    lt rx1045_pos, -1, rx1045_done2767
    lt rx1045_pos, 0, rx1045_fail2769
    eq $I19, 0, rx1045_fail2769
    nqp_islist $I20, rx1045_cstack
    unless $I20, rx1045_jump2770
    elements $I18, rx1045_bstack
    le $I18, 0, rx1045_cut2771
    dec $I18
    set $I18, rx1045_bstack[$I18]
  rx1045_cut2771:
    assign rx1045_cstack, $I18
  rx1045_jump2770:
    jump $I19
  rx1045_done2767:
    rx1045_cur."!cursor_fail"()
    .return (rx1045_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<sigil>" :subid("cuid_167_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1253
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1048_tgt
    .local int rx1048_pos
    .local int rx1048_off
    .local int rx1048_eos
    .local int rx1048_rep
    .local pmc rx1048_cur
    .local pmc rx1048_curclass
    .local pmc rx1048_bstack
    .local pmc rx1048_cstack
    (rx1048_cur, rx1048_tgt, rx1048_pos, rx1048_curclass, rx1048_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1048_cur
    length rx1048_eos, rx1048_tgt
    eq $I19, 1, rx1048_restart2779
    gt rx1048_pos, rx1048_eos, rx1048_fail2780
    repr_get_attr_int $I11, self, rx1048_curclass, "$!from"
    ne $I11, -1, rxscan1049_done2786
    goto rxscan1049_scan2785
  rxscan1049_loop2784:
    inc rx1048_pos
    gt rx1048_pos, rx1048_eos, rx1048_fail2780
    repr_bind_attr_int rx1048_cur, rx1048_curclass, "$!from", rx1048_pos
  rxscan1049_scan2785:
    nqp_rxmark rx1048_bstack, rxscan1049_loop2784, rx1048_pos, 0
  rxscan1049_done2786:
    repr_bind_attr_int rx1048_cur, rx1048_curclass, "$!pos", rx1048_pos
    $P11 = rx1048_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx1048_curclass, "$!pos"
    lt $I11, 0, rx1048_fail2780
    nqp_rxmark rx1048_bstack, rxsubrule1050_pass2787, -1, 0
  rxsubrule1050_pass2787:
    rx1048_cstack = rx1048_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx1048_pos, $P11, rx1048_curclass, "$!pos"
    add $I11, rx1048_pos, 1
    gt $I11, rx1048_eos, rx1048_fail2780
    substr $S10, rx1048_tgt, rx1048_pos, 1
    ne $S10, ucs4:"(", rx1048_fail2780
    add rx1048_pos, 1
    repr_bind_attr_int rx1048_cur, rx1048_curclass, "$!pos", rx1048_pos
    $P11 = rx1048_cur."semilist"()
    repr_get_attr_int $I11, $P11, rx1048_curclass, "$!pos"
    lt $I11, 0, rx1048_fail2780
    nqp_rxmark rx1048_bstack, rxsubrule1051_pass2788, -1, 0
  rxsubrule1051_pass2788:
    rx1048_cstack = rx1048_cur."!cursor_capture"($P11, "semilist")
    repr_get_attr_int rx1048_pos, $P11, rx1048_curclass, "$!pos"
  alt1052_02790:
    nqp_rxmark rx1048_bstack, alt1052_12791, rx1048_pos, 0
    add $I11, rx1048_pos, 1
    gt $I11, rx1048_eos, rx1048_fail2780
    substr $S10, rx1048_tgt, rx1048_pos, 1
    ne $S10, ucs4:")", rx1048_fail2780
    add rx1048_pos, 1
    goto alt1052_end2789
  alt1052_12791:
    repr_bind_attr_int rx1048_cur, rx1048_curclass, "$!pos", rx1048_pos
    $P11 = rx1048_cur."FAILGOAL"("')'")
    repr_get_attr_int $I11, $P11, rx1048_curclass, "$!pos"
    lt $I11, 0, rx1048_fail2780
    goto rxsubrule1053_pass2792
  rxsubrule1053_back2793:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx1048_curclass, "$!pos"
    lt $I11, 0, rx1048_fail2780
  rxsubrule1053_pass2792:
    rx1048_cstack = rx1048_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule1053_back2793
    push rx1048_bstack, $I11
    push rx1048_bstack, 0
    push rx1048_bstack, rx1048_pos
    elements $I11, rx1048_cstack
    push rx1048_bstack, $I11
    repr_get_attr_int rx1048_pos, $P11, rx1048_curclass, "$!pos"
  alt1052_end2789:
    rx1048_cur."!cursor_pass"(rx1048_pos, "circumfix:sym<sigil>", 'backtrack'=>1)
    .return (rx1048_cur)
  rx1048_restart2779:
    repr_get_attr_obj rx1048_cstack, rx1048_cur, rx1048_curclass, "$!cstack"
  rx1048_fail2780:
    unless rx1048_bstack, rx1048_done2778
    pop $I19, rx1048_bstack
    if_null rx1048_cstack, rx1048_cstack_done2783
    unless rx1048_cstack, rx1048_cstack_done2783
    dec $I19
    set $P11, rx1048_cstack[$I19]
  rx1048_cstack_done2783:
    pop rx1048_rep, rx1048_bstack
    pop rx1048_pos, rx1048_bstack
    pop $I19, rx1048_bstack
    lt rx1048_pos, -1, rx1048_done2778
    lt rx1048_pos, 0, rx1048_fail2780
    eq $I19, 0, rx1048_fail2780
    nqp_islist $I20, rx1048_cstack
    unless $I20, rx1048_jump2781
    elements $I18, rx1048_bstack
    le $I18, 0, rx1048_cut2782
    dec $I18
    set $I18, rx1048_bstack[$I18]
  rx1048_cut2782:
    assign rx1048_cstack, $I18
  rx1048_jump2781:
    jump $I19
  rx1048_done2778:
    rx1048_cur."!cursor_fail"()
    .return (rx1048_cur) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_168_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1255
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1054_tgt
    .local int rx1054_pos
    .local int rx1054_off
    .local int rx1054_eos
    .local int rx1054_rep
    .local pmc rx1054_cur
    .local pmc rx1054_curclass
    .local pmc rx1054_bstack
    .local pmc rx1054_cstack
    (rx1054_cur, rx1054_tgt, rx1054_pos, rx1054_curclass, rx1054_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1054_cur
    length rx1054_eos, rx1054_tgt
    eq $I19, 1, rx1054_restart2796
    gt rx1054_pos, rx1054_eos, rx1054_fail2797
    repr_get_attr_int $I11, self, rx1054_curclass, "$!from"
    ne $I11, -1, rxscan1055_done2803
    goto rxscan1055_scan2802
  rxscan1055_loop2801:
    inc rx1054_pos
    gt rx1054_pos, rx1054_eos, rx1054_fail2797
    repr_bind_attr_int rx1054_cur, rx1054_curclass, "$!from", rx1054_pos
  rxscan1055_scan2802:
    nqp_rxmark rx1054_bstack, rxscan1055_loop2801, rx1054_pos, 0
  rxscan1055_done2803:
    repr_bind_attr_int rx1054_cur, rx1054_curclass, "$!pos", rx1054_pos
    $P11 = rx1054_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1054_curclass, "$!pos"
    lt $I11, 0, rx1054_fail2797
    repr_get_attr_int rx1054_pos, $P11, rx1054_curclass, "$!pos"
    repr_bind_attr_int rx1054_cur, rx1054_curclass, "$!pos", rx1054_pos
    $P11 = rx1054_cur."statement"()
    repr_get_attr_int $I11, $P11, rx1054_curclass, "$!pos"
    lt $I11, 0, rx1054_fail2797
    nqp_rxmark rx1054_bstack, rxsubrule1057_pass2805, -1, 0
  rxsubrule1057_pass2805:
    rx1054_cstack = rx1054_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx1054_pos, $P11, rx1054_curclass, "$!pos"
    repr_bind_attr_int rx1054_cur, rx1054_curclass, "$!pos", rx1054_pos
    $P11 = rx1054_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1054_curclass, "$!pos"
    lt $I11, 0, rx1054_fail2797
    repr_get_attr_int rx1054_pos, $P11, rx1054_curclass, "$!pos"
    rx1054_cur."!cursor_pass"(rx1054_pos, "semilist", 'backtrack'=>1)
    .return (rx1054_cur)
  rx1054_restart2796:
    repr_get_attr_obj rx1054_cstack, rx1054_cur, rx1054_curclass, "$!cstack"
  rx1054_fail2797:
    unless rx1054_bstack, rx1054_done2795
    pop $I19, rx1054_bstack
    if_null rx1054_cstack, rx1054_cstack_done2800
    unless rx1054_cstack, rx1054_cstack_done2800
    dec $I19
    set $P11, rx1054_cstack[$I19]
  rx1054_cstack_done2800:
    pop rx1054_rep, rx1054_bstack
    pop rx1054_pos, rx1054_bstack
    pop $I19, rx1054_bstack
    lt rx1054_pos, -1, rx1054_done2795
    lt rx1054_pos, 0, rx1054_fail2797
    eq $I19, 0, rx1054_fail2797
    nqp_islist $I20, rx1054_cstack
    unless $I20, rx1054_jump2798
    elements $I18, rx1054_bstack
    le $I18, 0, rx1054_cut2799
    dec $I18
    set $I18, rx1054_bstack[$I18]
  rx1054_cut2799:
    assign rx1054_cstack, $I18
  rx1054_jump2798:
    jump $I19
  rx1054_done2795:
    rx1054_cur."!cursor_fail"()
    .return (rx1054_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infixish" :subid("cuid_169_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1278
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1059_tgt
    .local int rx1059_pos
    .local int rx1059_off
    .local int rx1059_eos
    .local int rx1059_rep
    .local pmc rx1059_cur
    .local pmc rx1059_curclass
    .local pmc rx1059_bstack
    .local pmc rx1059_cstack
    (rx1059_cur, rx1059_tgt, rx1059_pos, rx1059_curclass, rx1059_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1059_cur
    length rx1059_eos, rx1059_tgt
    eq $I19, 1, rx1059_restart2809
    gt rx1059_pos, rx1059_eos, rx1059_fail2810
    repr_get_attr_int $I11, self, rx1059_curclass, "$!from"
    ne $I11, -1, rxscan1060_done2816
    goto rxscan1060_scan2815
  rxscan1060_loop2814:
    inc rx1059_pos
    gt rx1059_pos, rx1059_eos, rx1059_fail2810
    repr_bind_attr_int rx1059_cur, rx1059_curclass, "$!from", rx1059_pos
  rxscan1060_scan2815:
    nqp_rxmark rx1059_bstack, rxscan1060_loop2814, rx1059_pos, 0
  rxscan1060_done2816:
    repr_bind_attr_int rx1059_cur, rx1059_curclass, "$!pos", rx1059_pos
    $P11 = rx1059_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx1059_curclass, "$!pos"
    ge $I11, 0, rx1059_fail2810
    repr_bind_attr_int rx1059_cur, rx1059_curclass, "$!pos", rx1059_pos
    $P11 = rx1059_cur."infix"()
    repr_get_attr_int $I11, $P11, rx1059_curclass, "$!pos"
    lt $I11, 0, rx1059_fail2810
    nqp_rxmark rx1059_bstack, rxsubrule1061_pass2817, -1, 0
  rxsubrule1061_pass2817:
    rx1059_cstack = rx1059_cur."!cursor_capture"($P11, "OPER=infix")
    repr_get_attr_int rx1059_pos, $P11, rx1059_curclass, "$!pos"
    rx1059_cur."!cursor_pass"(rx1059_pos, "infixish", 'backtrack'=>1)
    .return (rx1059_cur)
  rx1059_restart2809:
    repr_get_attr_obj rx1059_cstack, rx1059_cur, rx1059_curclass, "$!cstack"
  rx1059_fail2810:
    unless rx1059_bstack, rx1059_done2808
    pop $I19, rx1059_bstack
    if_null rx1059_cstack, rx1059_cstack_done2813
    unless rx1059_cstack, rx1059_cstack_done2813
    dec $I19
    set $P11, rx1059_cstack[$I19]
  rx1059_cstack_done2813:
    pop rx1059_rep, rx1059_bstack
    pop rx1059_pos, rx1059_bstack
    pop $I19, rx1059_bstack
    lt rx1059_pos, -1, rx1059_done2808
    lt rx1059_pos, 0, rx1059_fail2810
    eq $I19, 0, rx1059_fail2810
    nqp_islist $I20, rx1059_cstack
    unless $I20, rx1059_jump2811
    elements $I18, rx1059_bstack
    le $I18, 0, rx1059_cut2812
    dec $I18
    set $I18, rx1059_bstack[$I18]
  rx1059_cut2812:
    assign rx1059_cstack, $I18
  rx1059_jump2811:
    jump $I19
  rx1059_done2808:
    rx1059_cur."!cursor_fail"()
    .return (rx1059_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infixstopper" :subid("cuid_170_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1279
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1062_tgt
    .local int rx1062_pos
    .local int rx1062_off
    .local int rx1062_eos
    .local int rx1062_rep
    .local pmc rx1062_cur
    .local pmc rx1062_curclass
    .local pmc rx1062_bstack
    .local pmc rx1062_cstack
    (rx1062_cur, rx1062_tgt, rx1062_pos, rx1062_curclass, rx1062_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1062_cur
    length rx1062_eos, rx1062_tgt
    eq $I19, 1, rx1062_restart2820
    gt rx1062_pos, rx1062_eos, rx1062_fail2821
    repr_get_attr_int $I11, self, rx1062_curclass, "$!from"
    ne $I11, -1, rxscan1063_done2827
    goto rxscan1063_scan2826
  rxscan1063_loop2825:
    inc rx1062_pos
    gt rx1062_pos, rx1062_eos, rx1062_fail2821
    repr_bind_attr_int rx1062_cur, rx1062_curclass, "$!from", rx1062_pos
  rxscan1063_scan2826:
    nqp_rxmark rx1062_bstack, rxscan1063_loop2825, rx1062_pos, 0
  rxscan1063_done2827:
    repr_bind_attr_int rx1062_cur, rx1062_curclass, "$!pos", rx1062_pos
    $P11 = rx1062_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx1062_curclass, "$!pos"
    lt $I11, 0, rx1062_fail2821
    rx1062_cur."!cursor_pass"(rx1062_pos, "infixstopper", 'backtrack'=>1)
    .return (rx1062_cur)
  rx1062_restart2820:
    repr_get_attr_obj rx1062_cstack, rx1062_cur, rx1062_curclass, "$!cstack"
  rx1062_fail2821:
    unless rx1062_bstack, rx1062_done2819
    pop $I19, rx1062_bstack
    if_null rx1062_cstack, rx1062_cstack_done2824
    unless rx1062_cstack, rx1062_cstack_done2824
    dec $I19
    set $P11, rx1062_cstack[$I19]
  rx1062_cstack_done2824:
    pop rx1062_rep, rx1062_bstack
    pop rx1062_pos, rx1062_bstack
    pop $I19, rx1062_bstack
    lt rx1062_pos, -1, rx1062_done2819
    lt rx1062_pos, 0, rx1062_fail2821
    eq $I19, 0, rx1062_fail2821
    nqp_islist $I20, rx1062_cstack
    unless $I20, rx1062_jump2822
    elements $I18, rx1062_bstack
    le $I18, 0, rx1062_cut2823
    dec $I18
    set $I18, rx1062_bstack[$I18]
  rx1062_cut2823:
    assign rx1062_cstack, $I18
  rx1062_jump2822:
    jump $I19
  rx1062_done2819:
    rx1062_cur."!cursor_fail"()
    .return (rx1062_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_171_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1281
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1064_tgt
    .local int rx1064_pos
    .local int rx1064_off
    .local int rx1064_eos
    .local int rx1064_rep
    .local pmc rx1064_cur
    .local pmc rx1064_curclass
    .local pmc rx1064_bstack
    .local pmc rx1064_cstack
    (rx1064_cur, rx1064_tgt, rx1064_pos, rx1064_curclass, rx1064_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1064_cur
    length rx1064_eos, rx1064_tgt
    eq $I19, 1, rx1064_restart2830
    gt rx1064_pos, rx1064_eos, rx1064_fail2831
    repr_get_attr_int $I11, self, rx1064_curclass, "$!from"
    ne $I11, -1, rxscan1065_done2837
    goto rxscan1065_scan2836
  rxscan1065_loop2835:
    inc rx1064_pos
    gt rx1064_pos, rx1064_eos, rx1064_fail2831
    repr_bind_attr_int rx1064_cur, rx1064_curclass, "$!from", rx1064_pos
  rxscan1065_scan2836:
    nqp_rxmark rx1064_bstack, rxscan1065_loop2835, rx1064_pos, 0
  rxscan1065_done2837:
    add $I11, rx1064_pos, 1
    gt $I11, rx1064_eos, rx1064_fail2831
    substr $S10, rx1064_tgt, rx1064_pos, 1
    ne $S10, ucs4:"[", rx1064_fail2831
    add rx1064_pos, 1
    repr_bind_attr_int rx1064_cur, rx1064_curclass, "$!pos", rx1064_pos
    $P11 = rx1064_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1064_curclass, "$!pos"
    lt $I11, 0, rx1064_fail2831
    repr_get_attr_int rx1064_pos, $P11, rx1064_curclass, "$!pos"
    repr_bind_attr_int rx1064_cur, rx1064_curclass, "$!pos", rx1064_pos
    $P11 = rx1064_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1064_curclass, "$!pos"
    lt $I11, 0, rx1064_fail2831
    nqp_rxmark rx1064_bstack, rxsubrule1067_pass2839, -1, 0
  rxsubrule1067_pass2839:
    rx1064_cstack = rx1064_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1064_pos, $P11, rx1064_curclass, "$!pos"
    add $I11, rx1064_pos, 1
    gt $I11, rx1064_eos, rx1064_fail2831
    substr $S10, rx1064_tgt, rx1064_pos, 1
    ne $S10, ucs4:"]", rx1064_fail2831
    add rx1064_pos, 1
    repr_bind_attr_int rx1064_cur, rx1064_curclass, "$!pos", rx1064_pos
    $P11 = rx1064_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1064_curclass, "$!pos"
    lt $I11, 0, rx1064_fail2831
    nqp_rxmark rx1064_bstack, rxsubrule1068_pass2840, -1, 0
  rxsubrule1068_pass2840:
    rx1064_cstack = rx1064_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1064_pos, $P11, rx1064_curclass, "$!pos"
    rx1064_cur."!cursor_pass"(rx1064_pos, "postcircumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx1064_cur)
  rx1064_restart2830:
    repr_get_attr_obj rx1064_cstack, rx1064_cur, rx1064_curclass, "$!cstack"
  rx1064_fail2831:
    unless rx1064_bstack, rx1064_done2829
    pop $I19, rx1064_bstack
    if_null rx1064_cstack, rx1064_cstack_done2834
    unless rx1064_cstack, rx1064_cstack_done2834
    dec $I19
    set $P11, rx1064_cstack[$I19]
  rx1064_cstack_done2834:
    pop rx1064_rep, rx1064_bstack
    pop rx1064_pos, rx1064_bstack
    pop $I19, rx1064_bstack
    lt rx1064_pos, -1, rx1064_done2829
    lt rx1064_pos, 0, rx1064_fail2831
    eq $I19, 0, rx1064_fail2831
    nqp_islist $I20, rx1064_cstack
    unless $I20, rx1064_jump2832
    elements $I18, rx1064_bstack
    le $I18, 0, rx1064_cut2833
    dec $I18
    set $I18, rx1064_bstack[$I18]
  rx1064_cut2833:
    assign rx1064_cstack, $I18
  rx1064_jump2832:
    jump $I19
  rx1064_done2829:
    rx1064_cur."!cursor_fail"()
    .return (rx1064_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_172_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1286
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1069_tgt
    .local int rx1069_pos
    .local int rx1069_off
    .local int rx1069_eos
    .local int rx1069_rep
    .local pmc rx1069_cur
    .local pmc rx1069_curclass
    .local pmc rx1069_bstack
    .local pmc rx1069_cstack
    (rx1069_cur, rx1069_tgt, rx1069_pos, rx1069_curclass, rx1069_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1069_cur
    length rx1069_eos, rx1069_tgt
    eq $I19, 1, rx1069_restart2843
    gt rx1069_pos, rx1069_eos, rx1069_fail2844
    repr_get_attr_int $I11, self, rx1069_curclass, "$!from"
    ne $I11, -1, rxscan1070_done2850
    goto rxscan1070_scan2849
  rxscan1070_loop2848:
    inc rx1069_pos
    gt rx1069_pos, rx1069_eos, rx1069_fail2844
    repr_bind_attr_int rx1069_cur, rx1069_curclass, "$!from", rx1069_pos
  rxscan1070_scan2849:
    nqp_rxmark rx1069_bstack, rxscan1070_loop2848, rx1069_pos, 0
  rxscan1070_done2850:
    add $I11, rx1069_pos, 1
    gt $I11, rx1069_eos, rx1069_fail2844
    substr $S10, rx1069_tgt, rx1069_pos, 1
    ne $S10, ucs4:"{", rx1069_fail2844
    add rx1069_pos, 1
    repr_bind_attr_int rx1069_cur, rx1069_curclass, "$!pos", rx1069_pos
    $P11 = rx1069_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1069_curclass, "$!pos"
    lt $I11, 0, rx1069_fail2844
    repr_get_attr_int rx1069_pos, $P11, rx1069_curclass, "$!pos"
    repr_bind_attr_int rx1069_cur, rx1069_curclass, "$!pos", rx1069_pos
    $P11 = rx1069_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1069_curclass, "$!pos"
    lt $I11, 0, rx1069_fail2844
    nqp_rxmark rx1069_bstack, rxsubrule1072_pass2852, -1, 0
  rxsubrule1072_pass2852:
    rx1069_cstack = rx1069_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1069_pos, $P11, rx1069_curclass, "$!pos"
    add $I11, rx1069_pos, 1
    gt $I11, rx1069_eos, rx1069_fail2844
    substr $S10, rx1069_tgt, rx1069_pos, 1
    ne $S10, ucs4:"}", rx1069_fail2844
    add rx1069_pos, 1
    repr_bind_attr_int rx1069_cur, rx1069_curclass, "$!pos", rx1069_pos
    $P11 = rx1069_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1069_curclass, "$!pos"
    lt $I11, 0, rx1069_fail2844
    nqp_rxmark rx1069_bstack, rxsubrule1073_pass2853, -1, 0
  rxsubrule1073_pass2853:
    rx1069_cstack = rx1069_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1069_pos, $P11, rx1069_curclass, "$!pos"
    rx1069_cur."!cursor_pass"(rx1069_pos, "postcircumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx1069_cur)
  rx1069_restart2843:
    repr_get_attr_obj rx1069_cstack, rx1069_cur, rx1069_curclass, "$!cstack"
  rx1069_fail2844:
    unless rx1069_bstack, rx1069_done2842
    pop $I19, rx1069_bstack
    if_null rx1069_cstack, rx1069_cstack_done2847
    unless rx1069_cstack, rx1069_cstack_done2847
    dec $I19
    set $P11, rx1069_cstack[$I19]
  rx1069_cstack_done2847:
    pop rx1069_rep, rx1069_bstack
    pop rx1069_pos, rx1069_bstack
    pop $I19, rx1069_bstack
    lt rx1069_pos, -1, rx1069_done2842
    lt rx1069_pos, 0, rx1069_fail2844
    eq $I19, 0, rx1069_fail2844
    nqp_islist $I20, rx1069_cstack
    unless $I20, rx1069_jump2845
    elements $I18, rx1069_bstack
    le $I18, 0, rx1069_cut2846
    dec $I18
    set $I18, rx1069_bstack[$I18]
  rx1069_cut2846:
    assign rx1069_cstack, $I18
  rx1069_jump2845:
    jump $I19
  rx1069_done2842:
    rx1069_cur."!cursor_fail"()
    .return (rx1069_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_173_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1291
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1074_tgt
    .local int rx1074_pos
    .local int rx1074_off
    .local int rx1074_eos
    .local int rx1074_rep
    .local pmc rx1074_cur
    .local pmc rx1074_curclass
    .local pmc rx1074_bstack
    .local pmc rx1074_cstack
    (rx1074_cur, rx1074_tgt, rx1074_pos, rx1074_curclass, rx1074_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1074_cur
    length rx1074_eos, rx1074_tgt
    eq $I19, 1, rx1074_restart2856
    gt rx1074_pos, rx1074_eos, rx1074_fail2857
    repr_get_attr_int $I11, self, rx1074_curclass, "$!from"
    ne $I11, -1, rxscan1075_done2863
    goto rxscan1075_scan2862
  rxscan1075_loop2861:
    inc rx1074_pos
    gt rx1074_pos, rx1074_eos, rx1074_fail2857
    repr_bind_attr_int rx1074_cur, rx1074_curclass, "$!from", rx1074_pos
  rxscan1075_scan2862:
    nqp_rxmark rx1074_bstack, rxscan1075_loop2861, rx1074_pos, 0
  rxscan1075_done2863:
    ge rx1074_pos, rx1074_eos, rx1074_fail2857
    substr $S11, rx1074_tgt, rx1074_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx1074_fail2857
    repr_bind_attr_int rx1074_cur, rx1074_curclass, "$!pos", rx1074_pos
    $P11 = rx1074_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx1074_curclass, "$!pos"
    lt $I11, 0, rx1074_fail2857
    nqp_rxmark rx1074_bstack, rxsubrule1076_pass2864, -1, 0
  rxsubrule1076_pass2864:
    rx1074_cstack = rx1074_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1074_pos, $P11, rx1074_curclass, "$!pos"
    repr_bind_attr_int rx1074_cur, rx1074_curclass, "$!pos", rx1074_pos
    $P11 = rx1074_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1074_curclass, "$!pos"
    lt $I11, 0, rx1074_fail2857
    nqp_rxmark rx1074_bstack, rxsubrule1077_pass2865, -1, 0
  rxsubrule1077_pass2865:
    rx1074_cstack = rx1074_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1074_pos, $P11, rx1074_curclass, "$!pos"
    rx1074_cur."!cursor_pass"(rx1074_pos, "postcircumfix:sym<ang>", 'backtrack'=>1)
    .return (rx1074_cur)
  rx1074_restart2856:
    repr_get_attr_obj rx1074_cstack, rx1074_cur, rx1074_curclass, "$!cstack"
  rx1074_fail2857:
    unless rx1074_bstack, rx1074_done2855
    pop $I19, rx1074_bstack
    if_null rx1074_cstack, rx1074_cstack_done2860
    unless rx1074_cstack, rx1074_cstack_done2860
    dec $I19
    set $P11, rx1074_cstack[$I19]
  rx1074_cstack_done2860:
    pop rx1074_rep, rx1074_bstack
    pop rx1074_pos, rx1074_bstack
    pop $I19, rx1074_bstack
    lt rx1074_pos, -1, rx1074_done2855
    lt rx1074_pos, 0, rx1074_fail2857
    eq $I19, 0, rx1074_fail2857
    nqp_islist $I20, rx1074_cstack
    unless $I20, rx1074_jump2858
    elements $I18, rx1074_bstack
    le $I18, 0, rx1074_cut2859
    dec $I18
    set $I18, rx1074_bstack[$I18]
  rx1074_cut2859:
    assign rx1074_cstack, $I18
  rx1074_jump2858:
    jump $I19
  rx1074_done2855:
    rx1074_cur."!cursor_fail"()
    .return (rx1074_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_174_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1296
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1078_tgt
    .local int rx1078_pos
    .local int rx1078_off
    .local int rx1078_eos
    .local int rx1078_rep
    .local pmc rx1078_cur
    .local pmc rx1078_curclass
    .local pmc rx1078_bstack
    .local pmc rx1078_cstack
    (rx1078_cur, rx1078_tgt, rx1078_pos, rx1078_curclass, rx1078_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1078_cur
    length rx1078_eos, rx1078_tgt
    eq $I19, 1, rx1078_restart2868
    gt rx1078_pos, rx1078_eos, rx1078_fail2869
    repr_get_attr_int $I11, self, rx1078_curclass, "$!from"
    ne $I11, -1, rxscan1079_done2875
    goto rxscan1079_scan2874
  rxscan1079_loop2873:
    inc rx1078_pos
    gt rx1078_pos, rx1078_eos, rx1078_fail2869
    repr_bind_attr_int rx1078_cur, rx1078_curclass, "$!from", rx1078_pos
  rxscan1079_scan2874:
    nqp_rxmark rx1078_bstack, rxscan1079_loop2873, rx1078_pos, 0
  rxscan1079_done2875:
    add $I11, rx1078_pos, 1
    gt $I11, rx1078_eos, rx1078_fail2869
    substr $S10, rx1078_tgt, rx1078_pos, 1
    ne $S10, ucs4:"(", rx1078_fail2869
    add rx1078_pos, 1
    repr_bind_attr_int rx1078_cur, rx1078_curclass, "$!pos", rx1078_pos
    $P11 = rx1078_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1078_curclass, "$!pos"
    lt $I11, 0, rx1078_fail2869
    repr_get_attr_int rx1078_pos, $P11, rx1078_curclass, "$!pos"
    repr_bind_attr_int rx1078_cur, rx1078_curclass, "$!pos", rx1078_pos
    $P11 = rx1078_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1078_curclass, "$!pos"
    lt $I11, 0, rx1078_fail2869
    nqp_rxmark rx1078_bstack, rxsubrule1081_pass2877, -1, 0
  rxsubrule1081_pass2877:
    rx1078_cstack = rx1078_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1078_pos, $P11, rx1078_curclass, "$!pos"
    add $I11, rx1078_pos, 1
    gt $I11, rx1078_eos, rx1078_fail2869
    substr $S10, rx1078_tgt, rx1078_pos, 1
    ne $S10, ucs4:")", rx1078_fail2869
    add rx1078_pos, 1
    repr_bind_attr_int rx1078_cur, rx1078_curclass, "$!pos", rx1078_pos
    $P11 = rx1078_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1078_curclass, "$!pos"
    lt $I11, 0, rx1078_fail2869
    nqp_rxmark rx1078_bstack, rxsubrule1082_pass2878, -1, 0
  rxsubrule1082_pass2878:
    rx1078_cstack = rx1078_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1078_pos, $P11, rx1078_curclass, "$!pos"
    rx1078_cur."!cursor_pass"(rx1078_pos, "postcircumfix:sym<( )>", 'backtrack'=>1)
    .return (rx1078_cur)
  rx1078_restart2868:
    repr_get_attr_obj rx1078_cstack, rx1078_cur, rx1078_curclass, "$!cstack"
  rx1078_fail2869:
    unless rx1078_bstack, rx1078_done2867
    pop $I19, rx1078_bstack
    if_null rx1078_cstack, rx1078_cstack_done2872
    unless rx1078_cstack, rx1078_cstack_done2872
    dec $I19
    set $P11, rx1078_cstack[$I19]
  rx1078_cstack_done2872:
    pop rx1078_rep, rx1078_bstack
    pop rx1078_pos, rx1078_bstack
    pop $I19, rx1078_bstack
    lt rx1078_pos, -1, rx1078_done2867
    lt rx1078_pos, 0, rx1078_fail2869
    eq $I19, 0, rx1078_fail2869
    nqp_islist $I20, rx1078_cstack
    unless $I20, rx1078_jump2870
    elements $I18, rx1078_bstack
    le $I18, 0, rx1078_cut2871
    dec $I18
    set $I18, rx1078_bstack[$I18]
  rx1078_cut2871:
    assign rx1078_cstack, $I18
  rx1078_jump2870:
    jump $I19
  rx1078_done2867:
    rx1078_cur."!cursor_fail"()
    .return (rx1078_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_175_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1301
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1083_tgt
    .local int rx1083_pos
    .local int rx1083_off
    .local int rx1083_eos
    .local int rx1083_rep
    .local pmc rx1083_cur
    .local pmc rx1083_curclass
    .local pmc rx1083_bstack
    .local pmc rx1083_cstack
    (rx1083_cur, rx1083_tgt, rx1083_pos, rx1083_curclass, rx1083_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1083_cur
    length rx1083_eos, rx1083_tgt
    eq $I19, 1, rx1083_restart2881
    gt rx1083_pos, rx1083_eos, rx1083_fail2882
    repr_get_attr_int $I11, self, rx1083_curclass, "$!from"
    ne $I11, -1, rxscan1084_done2888
    goto rxscan1084_scan2887
  rxscan1084_loop2886:
    inc rx1083_pos
    gt rx1083_pos, rx1083_eos, rx1083_fail2882
    repr_bind_attr_int rx1083_cur, rx1083_curclass, "$!from", rx1083_pos
  rxscan1084_scan2887:
    nqp_rxmark rx1083_bstack, rxscan1084_loop2886, rx1083_pos, 0
  rxscan1084_done2888:
    repr_bind_attr_int rx1083_cur, rx1083_curclass, "$!pos", rx1083_pos
    $P11 = rx1083_cur."dotty"()
    repr_get_attr_int $I11, $P11, rx1083_curclass, "$!pos"
    lt $I11, 0, rx1083_fail2882
    nqp_rxmark rx1083_bstack, rxsubrule1085_pass2889, -1, 0
  rxsubrule1085_pass2889:
    rx1083_cstack = rx1083_cur."!cursor_capture"($P11, "dotty")
    repr_get_attr_int rx1083_pos, $P11, rx1083_curclass, "$!pos"
    repr_bind_attr_int rx1083_cur, rx1083_curclass, "$!pos", rx1083_pos
    $P11 = rx1083_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1083_curclass, "$!pos"
    lt $I11, 0, rx1083_fail2882
    nqp_rxmark rx1083_bstack, rxsubrule1086_pass2890, -1, 0
  rxsubrule1086_pass2890:
    rx1083_cstack = rx1083_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1083_pos, $P11, rx1083_curclass, "$!pos"
    rx1083_cur."!cursor_pass"(rx1083_pos, "postfix:sym<.>", 'backtrack'=>1)
    .return (rx1083_cur)
  rx1083_restart2881:
    repr_get_attr_obj rx1083_cstack, rx1083_cur, rx1083_curclass, "$!cstack"
  rx1083_fail2882:
    unless rx1083_bstack, rx1083_done2880
    pop $I19, rx1083_bstack
    if_null rx1083_cstack, rx1083_cstack_done2885
    unless rx1083_cstack, rx1083_cstack_done2885
    dec $I19
    set $P11, rx1083_cstack[$I19]
  rx1083_cstack_done2885:
    pop rx1083_rep, rx1083_bstack
    pop rx1083_pos, rx1083_bstack
    pop $I19, rx1083_bstack
    lt rx1083_pos, -1, rx1083_done2880
    lt rx1083_pos, 0, rx1083_fail2882
    eq $I19, 0, rx1083_fail2882
    nqp_islist $I20, rx1083_cstack
    unless $I20, rx1083_jump2883
    elements $I18, rx1083_bstack
    le $I18, 0, rx1083_cut2884
    dec $I18
    set $I18, rx1083_bstack[$I18]
  rx1083_cut2884:
    assign rx1083_cstack, $I18
  rx1083_jump2883:
    jump $I19
  rx1083_done2880:
    rx1083_cur."!cursor_fail"()
    .return (rx1083_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<++>" :subid("cuid_176_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1303
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1087_tgt
    .local int rx1087_pos
    .local int rx1087_off
    .local int rx1087_eos
    .local int rx1087_rep
    .local pmc rx1087_cur
    .local pmc rx1087_curclass
    .local pmc rx1087_bstack
    .local pmc rx1087_cstack
    (rx1087_cur, rx1087_tgt, rx1087_pos, rx1087_curclass, rx1087_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1087_cur
    length rx1087_eos, rx1087_tgt
    eq $I19, 1, rx1087_restart2893
    gt rx1087_pos, rx1087_eos, rx1087_fail2894
    repr_get_attr_int $I11, self, rx1087_curclass, "$!from"
    ne $I11, -1, rxscan1088_done2900
    goto rxscan1088_scan2899
  rxscan1088_loop2898:
    inc rx1087_pos
    gt rx1087_pos, rx1087_eos, rx1087_fail2894
    repr_bind_attr_int rx1087_cur, rx1087_curclass, "$!from", rx1087_pos
  rxscan1088_scan2899:
    nqp_rxmark rx1087_bstack, rxscan1088_loop2898, rx1087_pos, 0
  rxscan1088_done2900:
    nqp_rxmark rx1087_bstack, rxcap1089_fail2902, rx1087_pos, 0
    add $I11, rx1087_pos, 2
    gt $I11, rx1087_eos, rx1087_fail2894
    substr $S10, rx1087_tgt, rx1087_pos, 2
    ne $S10, ucs4:"++", rx1087_fail2894
    add rx1087_pos, 2
    nqp_rxpeek $I19, rx1087_bstack, rxcap1089_fail2902
    inc $I19
    set $I11, rx1087_bstack[$I19]
    repr_bind_attr_int rx1087_cur, rx1087_curclass, "$!pos", rx1087_pos
    $P11 = rx1087_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1087_pos)
    rx1087_cstack = rx1087_cur."!cursor_capture"($P11, "sym")
    goto rxcap1089_done2901
  rxcap1089_fail2902:
    goto rx1087_fail2894
  rxcap1089_done2901:
    repr_bind_attr_int rx1087_cur, rx1087_curclass, "$!pos", rx1087_pos
    $P11 = rx1087_cur."O"("%autoincrement, :op<preinc>")
    repr_get_attr_int $I11, $P11, rx1087_curclass, "$!pos"
    lt $I11, 0, rx1087_fail2894
    nqp_rxmark rx1087_bstack, rxsubrule1090_pass2903, -1, 0
  rxsubrule1090_pass2903:
    rx1087_cstack = rx1087_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1087_pos, $P11, rx1087_curclass, "$!pos"
    rx1087_cur."!cursor_pass"(rx1087_pos, "prefix:sym<++>", 'backtrack'=>1)
    .return (rx1087_cur)
  rx1087_restart2893:
    repr_get_attr_obj rx1087_cstack, rx1087_cur, rx1087_curclass, "$!cstack"
  rx1087_fail2894:
    unless rx1087_bstack, rx1087_done2892
    pop $I19, rx1087_bstack
    if_null rx1087_cstack, rx1087_cstack_done2897
    unless rx1087_cstack, rx1087_cstack_done2897
    dec $I19
    set $P11, rx1087_cstack[$I19]
  rx1087_cstack_done2897:
    pop rx1087_rep, rx1087_bstack
    pop rx1087_pos, rx1087_bstack
    pop $I19, rx1087_bstack
    lt rx1087_pos, -1, rx1087_done2892
    lt rx1087_pos, 0, rx1087_fail2894
    eq $I19, 0, rx1087_fail2894
    nqp_islist $I20, rx1087_cstack
    unless $I20, rx1087_jump2895
    elements $I18, rx1087_bstack
    le $I18, 0, rx1087_cut2896
    dec $I18
    set $I18, rx1087_bstack[$I18]
  rx1087_cut2896:
    assign rx1087_cstack, $I18
  rx1087_jump2895:
    jump $I19
  rx1087_done2892:
    rx1087_cur."!cursor_fail"()
    .return (rx1087_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<-->" :subid("cuid_177_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1304
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1091_tgt
    .local int rx1091_pos
    .local int rx1091_off
    .local int rx1091_eos
    .local int rx1091_rep
    .local pmc rx1091_cur
    .local pmc rx1091_curclass
    .local pmc rx1091_bstack
    .local pmc rx1091_cstack
    (rx1091_cur, rx1091_tgt, rx1091_pos, rx1091_curclass, rx1091_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1091_cur
    length rx1091_eos, rx1091_tgt
    eq $I19, 1, rx1091_restart2906
    gt rx1091_pos, rx1091_eos, rx1091_fail2907
    repr_get_attr_int $I11, self, rx1091_curclass, "$!from"
    ne $I11, -1, rxscan1092_done2913
    goto rxscan1092_scan2912
  rxscan1092_loop2911:
    inc rx1091_pos
    gt rx1091_pos, rx1091_eos, rx1091_fail2907
    repr_bind_attr_int rx1091_cur, rx1091_curclass, "$!from", rx1091_pos
  rxscan1092_scan2912:
    nqp_rxmark rx1091_bstack, rxscan1092_loop2911, rx1091_pos, 0
  rxscan1092_done2913:
    nqp_rxmark rx1091_bstack, rxcap1093_fail2915, rx1091_pos, 0
    add $I11, rx1091_pos, 2
    gt $I11, rx1091_eos, rx1091_fail2907
    substr $S10, rx1091_tgt, rx1091_pos, 2
    ne $S10, ucs4:"--", rx1091_fail2907
    add rx1091_pos, 2
    nqp_rxpeek $I19, rx1091_bstack, rxcap1093_fail2915
    inc $I19
    set $I11, rx1091_bstack[$I19]
    repr_bind_attr_int rx1091_cur, rx1091_curclass, "$!pos", rx1091_pos
    $P11 = rx1091_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1091_pos)
    rx1091_cstack = rx1091_cur."!cursor_capture"($P11, "sym")
    goto rxcap1093_done2914
  rxcap1093_fail2915:
    goto rx1091_fail2907
  rxcap1093_done2914:
    repr_bind_attr_int rx1091_cur, rx1091_curclass, "$!pos", rx1091_pos
    $P11 = rx1091_cur."O"("%autoincrement, :op<predec>")
    repr_get_attr_int $I11, $P11, rx1091_curclass, "$!pos"
    lt $I11, 0, rx1091_fail2907
    nqp_rxmark rx1091_bstack, rxsubrule1094_pass2916, -1, 0
  rxsubrule1094_pass2916:
    rx1091_cstack = rx1091_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1091_pos, $P11, rx1091_curclass, "$!pos"
    rx1091_cur."!cursor_pass"(rx1091_pos, "prefix:sym<-->", 'backtrack'=>1)
    .return (rx1091_cur)
  rx1091_restart2906:
    repr_get_attr_obj rx1091_cstack, rx1091_cur, rx1091_curclass, "$!cstack"
  rx1091_fail2907:
    unless rx1091_bstack, rx1091_done2905
    pop $I19, rx1091_bstack
    if_null rx1091_cstack, rx1091_cstack_done2910
    unless rx1091_cstack, rx1091_cstack_done2910
    dec $I19
    set $P11, rx1091_cstack[$I19]
  rx1091_cstack_done2910:
    pop rx1091_rep, rx1091_bstack
    pop rx1091_pos, rx1091_bstack
    pop $I19, rx1091_bstack
    lt rx1091_pos, -1, rx1091_done2905
    lt rx1091_pos, 0, rx1091_fail2907
    eq $I19, 0, rx1091_fail2907
    nqp_islist $I20, rx1091_cstack
    unless $I20, rx1091_jump2908
    elements $I18, rx1091_bstack
    le $I18, 0, rx1091_cut2909
    dec $I18
    set $I18, rx1091_bstack[$I18]
  rx1091_cut2909:
    assign rx1091_cstack, $I18
  rx1091_jump2908:
    jump $I19
  rx1091_done2905:
    rx1091_cur."!cursor_fail"()
    .return (rx1091_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<++>" :subid("cuid_178_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1306
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1095_tgt
    .local int rx1095_pos
    .local int rx1095_off
    .local int rx1095_eos
    .local int rx1095_rep
    .local pmc rx1095_cur
    .local pmc rx1095_curclass
    .local pmc rx1095_bstack
    .local pmc rx1095_cstack
    (rx1095_cur, rx1095_tgt, rx1095_pos, rx1095_curclass, rx1095_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1095_cur
    length rx1095_eos, rx1095_tgt
    eq $I19, 1, rx1095_restart2919
    gt rx1095_pos, rx1095_eos, rx1095_fail2920
    repr_get_attr_int $I11, self, rx1095_curclass, "$!from"
    ne $I11, -1, rxscan1096_done2926
    goto rxscan1096_scan2925
  rxscan1096_loop2924:
    inc rx1095_pos
    gt rx1095_pos, rx1095_eos, rx1095_fail2920
    repr_bind_attr_int rx1095_cur, rx1095_curclass, "$!from", rx1095_pos
  rxscan1096_scan2925:
    nqp_rxmark rx1095_bstack, rxscan1096_loop2924, rx1095_pos, 0
  rxscan1096_done2926:
    nqp_rxmark rx1095_bstack, rxcap1097_fail2928, rx1095_pos, 0
    add $I11, rx1095_pos, 2
    gt $I11, rx1095_eos, rx1095_fail2920
    substr $S10, rx1095_tgt, rx1095_pos, 2
    ne $S10, ucs4:"++", rx1095_fail2920
    add rx1095_pos, 2
    nqp_rxpeek $I19, rx1095_bstack, rxcap1097_fail2928
    inc $I19
    set $I11, rx1095_bstack[$I19]
    repr_bind_attr_int rx1095_cur, rx1095_curclass, "$!pos", rx1095_pos
    $P11 = rx1095_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1095_pos)
    rx1095_cstack = rx1095_cur."!cursor_capture"($P11, "sym")
    goto rxcap1097_done2927
  rxcap1097_fail2928:
    goto rx1095_fail2920
  rxcap1097_done2927:
    repr_bind_attr_int rx1095_cur, rx1095_curclass, "$!pos", rx1095_pos
    $P11 = rx1095_cur."O"("%autoincrement, :op<postinc>")
    repr_get_attr_int $I11, $P11, rx1095_curclass, "$!pos"
    lt $I11, 0, rx1095_fail2920
    nqp_rxmark rx1095_bstack, rxsubrule1098_pass2929, -1, 0
  rxsubrule1098_pass2929:
    rx1095_cstack = rx1095_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1095_pos, $P11, rx1095_curclass, "$!pos"
    rx1095_cur."!cursor_pass"(rx1095_pos, "postfix:sym<++>", 'backtrack'=>1)
    .return (rx1095_cur)
  rx1095_restart2919:
    repr_get_attr_obj rx1095_cstack, rx1095_cur, rx1095_curclass, "$!cstack"
  rx1095_fail2920:
    unless rx1095_bstack, rx1095_done2918
    pop $I19, rx1095_bstack
    if_null rx1095_cstack, rx1095_cstack_done2923
    unless rx1095_cstack, rx1095_cstack_done2923
    dec $I19
    set $P11, rx1095_cstack[$I19]
  rx1095_cstack_done2923:
    pop rx1095_rep, rx1095_bstack
    pop rx1095_pos, rx1095_bstack
    pop $I19, rx1095_bstack
    lt rx1095_pos, -1, rx1095_done2918
    lt rx1095_pos, 0, rx1095_fail2920
    eq $I19, 0, rx1095_fail2920
    nqp_islist $I20, rx1095_cstack
    unless $I20, rx1095_jump2921
    elements $I18, rx1095_bstack
    le $I18, 0, rx1095_cut2922
    dec $I18
    set $I18, rx1095_bstack[$I18]
  rx1095_cut2922:
    assign rx1095_cstack, $I18
  rx1095_jump2921:
    jump $I19
  rx1095_done2918:
    rx1095_cur."!cursor_fail"()
    .return (rx1095_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<-->" :subid("cuid_179_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1307
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1099_tgt
    .local int rx1099_pos
    .local int rx1099_off
    .local int rx1099_eos
    .local int rx1099_rep
    .local pmc rx1099_cur
    .local pmc rx1099_curclass
    .local pmc rx1099_bstack
    .local pmc rx1099_cstack
    (rx1099_cur, rx1099_tgt, rx1099_pos, rx1099_curclass, rx1099_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1099_cur
    length rx1099_eos, rx1099_tgt
    eq $I19, 1, rx1099_restart2932
    gt rx1099_pos, rx1099_eos, rx1099_fail2933
    repr_get_attr_int $I11, self, rx1099_curclass, "$!from"
    ne $I11, -1, rxscan1100_done2939
    goto rxscan1100_scan2938
  rxscan1100_loop2937:
    inc rx1099_pos
    gt rx1099_pos, rx1099_eos, rx1099_fail2933
    repr_bind_attr_int rx1099_cur, rx1099_curclass, "$!from", rx1099_pos
  rxscan1100_scan2938:
    nqp_rxmark rx1099_bstack, rxscan1100_loop2937, rx1099_pos, 0
  rxscan1100_done2939:
    nqp_rxmark rx1099_bstack, rxcap1101_fail2941, rx1099_pos, 0
    add $I11, rx1099_pos, 2
    gt $I11, rx1099_eos, rx1099_fail2933
    substr $S10, rx1099_tgt, rx1099_pos, 2
    ne $S10, ucs4:"--", rx1099_fail2933
    add rx1099_pos, 2
    nqp_rxpeek $I19, rx1099_bstack, rxcap1101_fail2941
    inc $I19
    set $I11, rx1099_bstack[$I19]
    repr_bind_attr_int rx1099_cur, rx1099_curclass, "$!pos", rx1099_pos
    $P11 = rx1099_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1099_pos)
    rx1099_cstack = rx1099_cur."!cursor_capture"($P11, "sym")
    goto rxcap1101_done2940
  rxcap1101_fail2941:
    goto rx1099_fail2933
  rxcap1101_done2940:
    repr_bind_attr_int rx1099_cur, rx1099_curclass, "$!pos", rx1099_pos
    $P11 = rx1099_cur."O"("%autoincrement, :op<postdec>")
    repr_get_attr_int $I11, $P11, rx1099_curclass, "$!pos"
    lt $I11, 0, rx1099_fail2933
    nqp_rxmark rx1099_bstack, rxsubrule1102_pass2942, -1, 0
  rxsubrule1102_pass2942:
    rx1099_cstack = rx1099_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1099_pos, $P11, rx1099_curclass, "$!pos"
    rx1099_cur."!cursor_pass"(rx1099_pos, "postfix:sym<-->", 'backtrack'=>1)
    .return (rx1099_cur)
  rx1099_restart2932:
    repr_get_attr_obj rx1099_cstack, rx1099_cur, rx1099_curclass, "$!cstack"
  rx1099_fail2933:
    unless rx1099_bstack, rx1099_done2931
    pop $I19, rx1099_bstack
    if_null rx1099_cstack, rx1099_cstack_done2936
    unless rx1099_cstack, rx1099_cstack_done2936
    dec $I19
    set $P11, rx1099_cstack[$I19]
  rx1099_cstack_done2936:
    pop rx1099_rep, rx1099_bstack
    pop rx1099_pos, rx1099_bstack
    pop $I19, rx1099_bstack
    lt rx1099_pos, -1, rx1099_done2931
    lt rx1099_pos, 0, rx1099_fail2933
    eq $I19, 0, rx1099_fail2933
    nqp_islist $I20, rx1099_cstack
    unless $I20, rx1099_jump2934
    elements $I18, rx1099_bstack
    le $I18, 0, rx1099_cut2935
    dec $I18
    set $I18, rx1099_bstack[$I18]
  rx1099_cut2935:
    assign rx1099_cstack, $I18
  rx1099_jump2934:
    jump $I19
  rx1099_done2931:
    rx1099_cur."!cursor_fail"()
    .return (rx1099_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<**>" :subid("cuid_180_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1309
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1103_tgt
    .local int rx1103_pos
    .local int rx1103_off
    .local int rx1103_eos
    .local int rx1103_rep
    .local pmc rx1103_cur
    .local pmc rx1103_curclass
    .local pmc rx1103_bstack
    .local pmc rx1103_cstack
    (rx1103_cur, rx1103_tgt, rx1103_pos, rx1103_curclass, rx1103_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1103_cur
    length rx1103_eos, rx1103_tgt
    eq $I19, 1, rx1103_restart2945
    gt rx1103_pos, rx1103_eos, rx1103_fail2946
    repr_get_attr_int $I11, self, rx1103_curclass, "$!from"
    ne $I11, -1, rxscan1104_done2952
    goto rxscan1104_scan2951
  rxscan1104_loop2950:
    inc rx1103_pos
    gt rx1103_pos, rx1103_eos, rx1103_fail2946
    repr_bind_attr_int rx1103_cur, rx1103_curclass, "$!from", rx1103_pos
  rxscan1104_scan2951:
    nqp_rxmark rx1103_bstack, rxscan1104_loop2950, rx1103_pos, 0
  rxscan1104_done2952:
    nqp_rxmark rx1103_bstack, rxcap1105_fail2954, rx1103_pos, 0
    add $I11, rx1103_pos, 2
    gt $I11, rx1103_eos, rx1103_fail2946
    substr $S10, rx1103_tgt, rx1103_pos, 2
    ne $S10, ucs4:"**", rx1103_fail2946
    add rx1103_pos, 2
    nqp_rxpeek $I19, rx1103_bstack, rxcap1105_fail2954
    inc $I19
    set $I11, rx1103_bstack[$I19]
    repr_bind_attr_int rx1103_cur, rx1103_curclass, "$!pos", rx1103_pos
    $P11 = rx1103_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1103_pos)
    rx1103_cstack = rx1103_cur."!cursor_capture"($P11, "sym")
    goto rxcap1105_done2953
  rxcap1105_fail2954:
    goto rx1103_fail2946
  rxcap1105_done2953:
    repr_bind_attr_int rx1103_cur, rx1103_curclass, "$!pos", rx1103_pos
    $P11 = rx1103_cur."O"("%exponentiation, :op<pow_n>")
    repr_get_attr_int $I11, $P11, rx1103_curclass, "$!pos"
    lt $I11, 0, rx1103_fail2946
    nqp_rxmark rx1103_bstack, rxsubrule1106_pass2955, -1, 0
  rxsubrule1106_pass2955:
    rx1103_cstack = rx1103_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1103_pos, $P11, rx1103_curclass, "$!pos"
    rx1103_cur."!cursor_pass"(rx1103_pos, "infix:sym<**>", 'backtrack'=>1)
    .return (rx1103_cur)
  rx1103_restart2945:
    repr_get_attr_obj rx1103_cstack, rx1103_cur, rx1103_curclass, "$!cstack"
  rx1103_fail2946:
    unless rx1103_bstack, rx1103_done2944
    pop $I19, rx1103_bstack
    if_null rx1103_cstack, rx1103_cstack_done2949
    unless rx1103_cstack, rx1103_cstack_done2949
    dec $I19
    set $P11, rx1103_cstack[$I19]
  rx1103_cstack_done2949:
    pop rx1103_rep, rx1103_bstack
    pop rx1103_pos, rx1103_bstack
    pop $I19, rx1103_bstack
    lt rx1103_pos, -1, rx1103_done2944
    lt rx1103_pos, 0, rx1103_fail2946
    eq $I19, 0, rx1103_fail2946
    nqp_islist $I20, rx1103_cstack
    unless $I20, rx1103_jump2947
    elements $I18, rx1103_bstack
    le $I18, 0, rx1103_cut2948
    dec $I18
    set $I18, rx1103_bstack[$I18]
  rx1103_cut2948:
    assign rx1103_cstack, $I18
  rx1103_jump2947:
    jump $I19
  rx1103_done2944:
    rx1103_cur."!cursor_fail"()
    .return (rx1103_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<+>" :subid("cuid_181_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1311
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1107_tgt
    .local int rx1107_pos
    .local int rx1107_off
    .local int rx1107_eos
    .local int rx1107_rep
    .local pmc rx1107_cur
    .local pmc rx1107_curclass
    .local pmc rx1107_bstack
    .local pmc rx1107_cstack
    (rx1107_cur, rx1107_tgt, rx1107_pos, rx1107_curclass, rx1107_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1107_cur
    length rx1107_eos, rx1107_tgt
    eq $I19, 1, rx1107_restart2958
    gt rx1107_pos, rx1107_eos, rx1107_fail2959
    repr_get_attr_int $I11, self, rx1107_curclass, "$!from"
    ne $I11, -1, rxscan1108_done2965
    goto rxscan1108_scan2964
  rxscan1108_loop2963:
    inc rx1107_pos
    gt rx1107_pos, rx1107_eos, rx1107_fail2959
    repr_bind_attr_int rx1107_cur, rx1107_curclass, "$!from", rx1107_pos
  rxscan1108_scan2964:
    nqp_rxmark rx1107_bstack, rxscan1108_loop2963, rx1107_pos, 0
  rxscan1108_done2965:
    nqp_rxmark rx1107_bstack, rxcap1109_fail2967, rx1107_pos, 0
    add $I11, rx1107_pos, 1
    gt $I11, rx1107_eos, rx1107_fail2959
    substr $S10, rx1107_tgt, rx1107_pos, 1
    ne $S10, ucs4:"+", rx1107_fail2959
    add rx1107_pos, 1
    nqp_rxpeek $I19, rx1107_bstack, rxcap1109_fail2967
    inc $I19
    set $I11, rx1107_bstack[$I19]
    repr_bind_attr_int rx1107_cur, rx1107_curclass, "$!pos", rx1107_pos
    $P11 = rx1107_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1107_pos)
    rx1107_cstack = rx1107_cur."!cursor_capture"($P11, "sym")
    goto rxcap1109_done2966
  rxcap1109_fail2967:
    goto rx1107_fail2959
  rxcap1109_done2966:
    repr_bind_attr_int rx1107_cur, rx1107_curclass, "$!pos", rx1107_pos
    $P11 = rx1107_cur."O"("%symbolic_unary, :op<numify>")
    repr_get_attr_int $I11, $P11, rx1107_curclass, "$!pos"
    lt $I11, 0, rx1107_fail2959
    nqp_rxmark rx1107_bstack, rxsubrule1110_pass2968, -1, 0
  rxsubrule1110_pass2968:
    rx1107_cstack = rx1107_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1107_pos, $P11, rx1107_curclass, "$!pos"
    rx1107_cur."!cursor_pass"(rx1107_pos, "prefix:sym<+>", 'backtrack'=>1)
    .return (rx1107_cur)
  rx1107_restart2958:
    repr_get_attr_obj rx1107_cstack, rx1107_cur, rx1107_curclass, "$!cstack"
  rx1107_fail2959:
    unless rx1107_bstack, rx1107_done2957
    pop $I19, rx1107_bstack
    if_null rx1107_cstack, rx1107_cstack_done2962
    unless rx1107_cstack, rx1107_cstack_done2962
    dec $I19
    set $P11, rx1107_cstack[$I19]
  rx1107_cstack_done2962:
    pop rx1107_rep, rx1107_bstack
    pop rx1107_pos, rx1107_bstack
    pop $I19, rx1107_bstack
    lt rx1107_pos, -1, rx1107_done2957
    lt rx1107_pos, 0, rx1107_fail2959
    eq $I19, 0, rx1107_fail2959
    nqp_islist $I20, rx1107_cstack
    unless $I20, rx1107_jump2960
    elements $I18, rx1107_bstack
    le $I18, 0, rx1107_cut2961
    dec $I18
    set $I18, rx1107_bstack[$I18]
  rx1107_cut2961:
    assign rx1107_cstack, $I18
  rx1107_jump2960:
    jump $I19
  rx1107_done2957:
    rx1107_cur."!cursor_fail"()
    .return (rx1107_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<~>" :subid("cuid_182_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1312
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1111_tgt
    .local int rx1111_pos
    .local int rx1111_off
    .local int rx1111_eos
    .local int rx1111_rep
    .local pmc rx1111_cur
    .local pmc rx1111_curclass
    .local pmc rx1111_bstack
    .local pmc rx1111_cstack
    (rx1111_cur, rx1111_tgt, rx1111_pos, rx1111_curclass, rx1111_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1111_cur
    length rx1111_eos, rx1111_tgt
    eq $I19, 1, rx1111_restart2971
    gt rx1111_pos, rx1111_eos, rx1111_fail2972
    repr_get_attr_int $I11, self, rx1111_curclass, "$!from"
    ne $I11, -1, rxscan1112_done2978
    goto rxscan1112_scan2977
  rxscan1112_loop2976:
    inc rx1111_pos
    gt rx1111_pos, rx1111_eos, rx1111_fail2972
    repr_bind_attr_int rx1111_cur, rx1111_curclass, "$!from", rx1111_pos
  rxscan1112_scan2977:
    nqp_rxmark rx1111_bstack, rxscan1112_loop2976, rx1111_pos, 0
  rxscan1112_done2978:
    nqp_rxmark rx1111_bstack, rxcap1113_fail2980, rx1111_pos, 0
    add $I11, rx1111_pos, 1
    gt $I11, rx1111_eos, rx1111_fail2972
    substr $S10, rx1111_tgt, rx1111_pos, 1
    ne $S10, ucs4:"~", rx1111_fail2972
    add rx1111_pos, 1
    nqp_rxpeek $I19, rx1111_bstack, rxcap1113_fail2980
    inc $I19
    set $I11, rx1111_bstack[$I19]
    repr_bind_attr_int rx1111_cur, rx1111_curclass, "$!pos", rx1111_pos
    $P11 = rx1111_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1111_pos)
    rx1111_cstack = rx1111_cur."!cursor_capture"($P11, "sym")
    goto rxcap1113_done2979
  rxcap1113_fail2980:
    goto rx1111_fail2972
  rxcap1113_done2979:
    repr_bind_attr_int rx1111_cur, rx1111_curclass, "$!pos", rx1111_pos
    $P11 = rx1111_cur."O"("%symbolic_unary, :op<stringify>")
    repr_get_attr_int $I11, $P11, rx1111_curclass, "$!pos"
    lt $I11, 0, rx1111_fail2972
    nqp_rxmark rx1111_bstack, rxsubrule1114_pass2981, -1, 0
  rxsubrule1114_pass2981:
    rx1111_cstack = rx1111_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1111_pos, $P11, rx1111_curclass, "$!pos"
    rx1111_cur."!cursor_pass"(rx1111_pos, "prefix:sym<~>", 'backtrack'=>1)
    .return (rx1111_cur)
  rx1111_restart2971:
    repr_get_attr_obj rx1111_cstack, rx1111_cur, rx1111_curclass, "$!cstack"
  rx1111_fail2972:
    unless rx1111_bstack, rx1111_done2970
    pop $I19, rx1111_bstack
    if_null rx1111_cstack, rx1111_cstack_done2975
    unless rx1111_cstack, rx1111_cstack_done2975
    dec $I19
    set $P11, rx1111_cstack[$I19]
  rx1111_cstack_done2975:
    pop rx1111_rep, rx1111_bstack
    pop rx1111_pos, rx1111_bstack
    pop $I19, rx1111_bstack
    lt rx1111_pos, -1, rx1111_done2970
    lt rx1111_pos, 0, rx1111_fail2972
    eq $I19, 0, rx1111_fail2972
    nqp_islist $I20, rx1111_cstack
    unless $I20, rx1111_jump2973
    elements $I18, rx1111_bstack
    le $I18, 0, rx1111_cut2974
    dec $I18
    set $I18, rx1111_bstack[$I18]
  rx1111_cut2974:
    assign rx1111_cstack, $I18
  rx1111_jump2973:
    jump $I19
  rx1111_done2970:
    rx1111_cur."!cursor_fail"()
    .return (rx1111_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<->" :subid("cuid_183_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1313
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1115_tgt
    .local int rx1115_pos
    .local int rx1115_off
    .local int rx1115_eos
    .local int rx1115_rep
    .local pmc rx1115_cur
    .local pmc rx1115_curclass
    .local pmc rx1115_bstack
    .local pmc rx1115_cstack
    (rx1115_cur, rx1115_tgt, rx1115_pos, rx1115_curclass, rx1115_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1115_cur
    length rx1115_eos, rx1115_tgt
    eq $I19, 1, rx1115_restart2984
    gt rx1115_pos, rx1115_eos, rx1115_fail2985
    repr_get_attr_int $I11, self, rx1115_curclass, "$!from"
    ne $I11, -1, rxscan1116_done2991
    goto rxscan1116_scan2990
  rxscan1116_loop2989:
    inc rx1115_pos
    gt rx1115_pos, rx1115_eos, rx1115_fail2985
    repr_bind_attr_int rx1115_cur, rx1115_curclass, "$!from", rx1115_pos
  rxscan1116_scan2990:
    nqp_rxmark rx1115_bstack, rxscan1116_loop2989, rx1115_pos, 0
  rxscan1116_done2991:
    nqp_rxmark rx1115_bstack, rxcap1117_fail2993, rx1115_pos, 0
    add $I11, rx1115_pos, 1
    gt $I11, rx1115_eos, rx1115_fail2985
    substr $S10, rx1115_tgt, rx1115_pos, 1
    ne $S10, ucs4:"-", rx1115_fail2985
    add rx1115_pos, 1
    nqp_rxpeek $I19, rx1115_bstack, rxcap1117_fail2993
    inc $I19
    set $I11, rx1115_bstack[$I19]
    repr_bind_attr_int rx1115_cur, rx1115_curclass, "$!pos", rx1115_pos
    $P11 = rx1115_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1115_pos)
    rx1115_cstack = rx1115_cur."!cursor_capture"($P11, "sym")
    goto rxcap1117_done2992
  rxcap1117_fail2993:
    goto rx1115_fail2985
  rxcap1117_done2992:
    ge rx1115_pos, rx1115_eos, rx1115_fail2985
    substr $S11, rx1115_tgt, rx1115_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx1115_fail2985
    repr_bind_attr_int rx1115_cur, rx1115_curclass, "$!pos", rx1115_pos
    $P11 = rx1115_cur."number"()
    repr_get_attr_int $I11, $P11, rx1115_curclass, "$!pos"
    ge $I11, 0, rx1115_fail2985
    repr_bind_attr_int rx1115_cur, rx1115_curclass, "$!pos", rx1115_pos
    $P11 = rx1115_cur."O"("%symbolic_unary, :op<neg_n>")
    repr_get_attr_int $I11, $P11, rx1115_curclass, "$!pos"
    lt $I11, 0, rx1115_fail2985
    nqp_rxmark rx1115_bstack, rxsubrule1118_pass2994, -1, 0
  rxsubrule1118_pass2994:
    rx1115_cstack = rx1115_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1115_pos, $P11, rx1115_curclass, "$!pos"
    rx1115_cur."!cursor_pass"(rx1115_pos, "prefix:sym<->", 'backtrack'=>1)
    .return (rx1115_cur)
  rx1115_restart2984:
    repr_get_attr_obj rx1115_cstack, rx1115_cur, rx1115_curclass, "$!cstack"
  rx1115_fail2985:
    unless rx1115_bstack, rx1115_done2983
    pop $I19, rx1115_bstack
    if_null rx1115_cstack, rx1115_cstack_done2988
    unless rx1115_cstack, rx1115_cstack_done2988
    dec $I19
    set $P11, rx1115_cstack[$I19]
  rx1115_cstack_done2988:
    pop rx1115_rep, rx1115_bstack
    pop rx1115_pos, rx1115_bstack
    pop $I19, rx1115_bstack
    lt rx1115_pos, -1, rx1115_done2983
    lt rx1115_pos, 0, rx1115_fail2985
    eq $I19, 0, rx1115_fail2985
    nqp_islist $I20, rx1115_cstack
    unless $I20, rx1115_jump2986
    elements $I18, rx1115_bstack
    le $I18, 0, rx1115_cut2987
    dec $I18
    set $I18, rx1115_bstack[$I18]
  rx1115_cut2987:
    assign rx1115_cstack, $I18
  rx1115_jump2986:
    jump $I19
  rx1115_done2983:
    rx1115_cur."!cursor_fail"()
    .return (rx1115_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<?>" :subid("cuid_184_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1314
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1119_tgt
    .local int rx1119_pos
    .local int rx1119_off
    .local int rx1119_eos
    .local int rx1119_rep
    .local pmc rx1119_cur
    .local pmc rx1119_curclass
    .local pmc rx1119_bstack
    .local pmc rx1119_cstack
    (rx1119_cur, rx1119_tgt, rx1119_pos, rx1119_curclass, rx1119_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1119_cur
    length rx1119_eos, rx1119_tgt
    eq $I19, 1, rx1119_restart2997
    gt rx1119_pos, rx1119_eos, rx1119_fail2998
    repr_get_attr_int $I11, self, rx1119_curclass, "$!from"
    ne $I11, -1, rxscan1120_done3004
    goto rxscan1120_scan3003
  rxscan1120_loop3002:
    inc rx1119_pos
    gt rx1119_pos, rx1119_eos, rx1119_fail2998
    repr_bind_attr_int rx1119_cur, rx1119_curclass, "$!from", rx1119_pos
  rxscan1120_scan3003:
    nqp_rxmark rx1119_bstack, rxscan1120_loop3002, rx1119_pos, 0
  rxscan1120_done3004:
    nqp_rxmark rx1119_bstack, rxcap1121_fail3006, rx1119_pos, 0
    add $I11, rx1119_pos, 1
    gt $I11, rx1119_eos, rx1119_fail2998
    substr $S10, rx1119_tgt, rx1119_pos, 1
    ne $S10, ucs4:"?", rx1119_fail2998
    add rx1119_pos, 1
    nqp_rxpeek $I19, rx1119_bstack, rxcap1121_fail3006
    inc $I19
    set $I11, rx1119_bstack[$I19]
    repr_bind_attr_int rx1119_cur, rx1119_curclass, "$!pos", rx1119_pos
    $P11 = rx1119_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1119_pos)
    rx1119_cstack = rx1119_cur."!cursor_capture"($P11, "sym")
    goto rxcap1121_done3005
  rxcap1121_fail3006:
    goto rx1119_fail2998
  rxcap1121_done3005:
    repr_bind_attr_int rx1119_cur, rx1119_curclass, "$!pos", rx1119_pos
    $P11 = rx1119_cur."O"("%symbolic_unary, :op<istrue>")
    repr_get_attr_int $I11, $P11, rx1119_curclass, "$!pos"
    lt $I11, 0, rx1119_fail2998
    nqp_rxmark rx1119_bstack, rxsubrule1122_pass3007, -1, 0
  rxsubrule1122_pass3007:
    rx1119_cstack = rx1119_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1119_pos, $P11, rx1119_curclass, "$!pos"
    rx1119_cur."!cursor_pass"(rx1119_pos, "prefix:sym<?>", 'backtrack'=>1)
    .return (rx1119_cur)
  rx1119_restart2997:
    repr_get_attr_obj rx1119_cstack, rx1119_cur, rx1119_curclass, "$!cstack"
  rx1119_fail2998:
    unless rx1119_bstack, rx1119_done2996
    pop $I19, rx1119_bstack
    if_null rx1119_cstack, rx1119_cstack_done3001
    unless rx1119_cstack, rx1119_cstack_done3001
    dec $I19
    set $P11, rx1119_cstack[$I19]
  rx1119_cstack_done3001:
    pop rx1119_rep, rx1119_bstack
    pop rx1119_pos, rx1119_bstack
    pop $I19, rx1119_bstack
    lt rx1119_pos, -1, rx1119_done2996
    lt rx1119_pos, 0, rx1119_fail2998
    eq $I19, 0, rx1119_fail2998
    nqp_islist $I20, rx1119_cstack
    unless $I20, rx1119_jump2999
    elements $I18, rx1119_bstack
    le $I18, 0, rx1119_cut3000
    dec $I18
    set $I18, rx1119_bstack[$I18]
  rx1119_cut3000:
    assign rx1119_cstack, $I18
  rx1119_jump2999:
    jump $I19
  rx1119_done2996:
    rx1119_cur."!cursor_fail"()
    .return (rx1119_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<!>" :subid("cuid_185_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1315
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1123_tgt
    .local int rx1123_pos
    .local int rx1123_off
    .local int rx1123_eos
    .local int rx1123_rep
    .local pmc rx1123_cur
    .local pmc rx1123_curclass
    .local pmc rx1123_bstack
    .local pmc rx1123_cstack
    (rx1123_cur, rx1123_tgt, rx1123_pos, rx1123_curclass, rx1123_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1123_cur
    length rx1123_eos, rx1123_tgt
    eq $I19, 1, rx1123_restart3010
    gt rx1123_pos, rx1123_eos, rx1123_fail3011
    repr_get_attr_int $I11, self, rx1123_curclass, "$!from"
    ne $I11, -1, rxscan1124_done3017
    goto rxscan1124_scan3016
  rxscan1124_loop3015:
    inc rx1123_pos
    gt rx1123_pos, rx1123_eos, rx1123_fail3011
    repr_bind_attr_int rx1123_cur, rx1123_curclass, "$!from", rx1123_pos
  rxscan1124_scan3016:
    nqp_rxmark rx1123_bstack, rxscan1124_loop3015, rx1123_pos, 0
  rxscan1124_done3017:
    nqp_rxmark rx1123_bstack, rxcap1125_fail3019, rx1123_pos, 0
    add $I11, rx1123_pos, 1
    gt $I11, rx1123_eos, rx1123_fail3011
    substr $S10, rx1123_tgt, rx1123_pos, 1
    ne $S10, ucs4:"!", rx1123_fail3011
    add rx1123_pos, 1
    nqp_rxpeek $I19, rx1123_bstack, rxcap1125_fail3019
    inc $I19
    set $I11, rx1123_bstack[$I19]
    repr_bind_attr_int rx1123_cur, rx1123_curclass, "$!pos", rx1123_pos
    $P11 = rx1123_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1123_pos)
    rx1123_cstack = rx1123_cur."!cursor_capture"($P11, "sym")
    goto rxcap1125_done3018
  rxcap1125_fail3019:
    goto rx1123_fail3011
  rxcap1125_done3018:
    repr_bind_attr_int rx1123_cur, rx1123_curclass, "$!pos", rx1123_pos
    $P11 = rx1123_cur."O"("%symbolic_unary, :op<falsey>")
    repr_get_attr_int $I11, $P11, rx1123_curclass, "$!pos"
    lt $I11, 0, rx1123_fail3011
    nqp_rxmark rx1123_bstack, rxsubrule1126_pass3020, -1, 0
  rxsubrule1126_pass3020:
    rx1123_cstack = rx1123_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1123_pos, $P11, rx1123_curclass, "$!pos"
    rx1123_cur."!cursor_pass"(rx1123_pos, "prefix:sym<!>", 'backtrack'=>1)
    .return (rx1123_cur)
  rx1123_restart3010:
    repr_get_attr_obj rx1123_cstack, rx1123_cur, rx1123_curclass, "$!cstack"
  rx1123_fail3011:
    unless rx1123_bstack, rx1123_done3009
    pop $I19, rx1123_bstack
    if_null rx1123_cstack, rx1123_cstack_done3014
    unless rx1123_cstack, rx1123_cstack_done3014
    dec $I19
    set $P11, rx1123_cstack[$I19]
  rx1123_cstack_done3014:
    pop rx1123_rep, rx1123_bstack
    pop rx1123_pos, rx1123_bstack
    pop $I19, rx1123_bstack
    lt rx1123_pos, -1, rx1123_done3009
    lt rx1123_pos, 0, rx1123_fail3011
    eq $I19, 0, rx1123_fail3011
    nqp_islist $I20, rx1123_cstack
    unless $I20, rx1123_jump3012
    elements $I18, rx1123_bstack
    le $I18, 0, rx1123_cut3013
    dec $I18
    set $I18, rx1123_bstack[$I18]
  rx1123_cut3013:
    assign rx1123_cstack, $I18
  rx1123_jump3012:
    jump $I19
  rx1123_done3009:
    rx1123_cur."!cursor_fail"()
    .return (rx1123_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<|>" :subid("cuid_186_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1316
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1127_tgt
    .local int rx1127_pos
    .local int rx1127_off
    .local int rx1127_eos
    .local int rx1127_rep
    .local pmc rx1127_cur
    .local pmc rx1127_curclass
    .local pmc rx1127_bstack
    .local pmc rx1127_cstack
    (rx1127_cur, rx1127_tgt, rx1127_pos, rx1127_curclass, rx1127_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1127_cur
    length rx1127_eos, rx1127_tgt
    eq $I19, 1, rx1127_restart3023
    gt rx1127_pos, rx1127_eos, rx1127_fail3024
    repr_get_attr_int $I11, self, rx1127_curclass, "$!from"
    ne $I11, -1, rxscan1128_done3030
    goto rxscan1128_scan3029
  rxscan1128_loop3028:
    inc rx1127_pos
    gt rx1127_pos, rx1127_eos, rx1127_fail3024
    repr_bind_attr_int rx1127_cur, rx1127_curclass, "$!from", rx1127_pos
  rxscan1128_scan3029:
    nqp_rxmark rx1127_bstack, rxscan1128_loop3028, rx1127_pos, 0
  rxscan1128_done3030:
    nqp_rxmark rx1127_bstack, rxcap1129_fail3032, rx1127_pos, 0
    add $I11, rx1127_pos, 1
    gt $I11, rx1127_eos, rx1127_fail3024
    substr $S10, rx1127_tgt, rx1127_pos, 1
    ne $S10, ucs4:"|", rx1127_fail3024
    add rx1127_pos, 1
    nqp_rxpeek $I19, rx1127_bstack, rxcap1129_fail3032
    inc $I19
    set $I11, rx1127_bstack[$I19]
    repr_bind_attr_int rx1127_cur, rx1127_curclass, "$!pos", rx1127_pos
    $P11 = rx1127_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1127_pos)
    rx1127_cstack = rx1127_cur."!cursor_capture"($P11, "sym")
    goto rxcap1129_done3031
  rxcap1129_fail3032:
    goto rx1127_fail3024
  rxcap1129_done3031:
    repr_bind_attr_int rx1127_cur, rx1127_curclass, "$!pos", rx1127_pos
    $P11 = rx1127_cur."O"("%symbolic_unary")
    repr_get_attr_int $I11, $P11, rx1127_curclass, "$!pos"
    lt $I11, 0, rx1127_fail3024
    nqp_rxmark rx1127_bstack, rxsubrule1130_pass3033, -1, 0
  rxsubrule1130_pass3033:
    rx1127_cstack = rx1127_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1127_pos, $P11, rx1127_curclass, "$!pos"
    rx1127_cur."!cursor_pass"(rx1127_pos, "prefix:sym<|>", 'backtrack'=>1)
    .return (rx1127_cur)
  rx1127_restart3023:
    repr_get_attr_obj rx1127_cstack, rx1127_cur, rx1127_curclass, "$!cstack"
  rx1127_fail3024:
    unless rx1127_bstack, rx1127_done3022
    pop $I19, rx1127_bstack
    if_null rx1127_cstack, rx1127_cstack_done3027
    unless rx1127_cstack, rx1127_cstack_done3027
    dec $I19
    set $P11, rx1127_cstack[$I19]
  rx1127_cstack_done3027:
    pop rx1127_rep, rx1127_bstack
    pop rx1127_pos, rx1127_bstack
    pop $I19, rx1127_bstack
    lt rx1127_pos, -1, rx1127_done3022
    lt rx1127_pos, 0, rx1127_fail3024
    eq $I19, 0, rx1127_fail3024
    nqp_islist $I20, rx1127_cstack
    unless $I20, rx1127_jump3025
    elements $I18, rx1127_bstack
    le $I18, 0, rx1127_cut3026
    dec $I18
    set $I18, rx1127_bstack[$I18]
  rx1127_cut3026:
    assign rx1127_cstack, $I18
  rx1127_jump3025:
    jump $I19
  rx1127_done3022:
    rx1127_cur."!cursor_fail"()
    .return (rx1127_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<*>" :subid("cuid_187_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1318
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1131_tgt
    .local int rx1131_pos
    .local int rx1131_off
    .local int rx1131_eos
    .local int rx1131_rep
    .local pmc rx1131_cur
    .local pmc rx1131_curclass
    .local pmc rx1131_bstack
    .local pmc rx1131_cstack
    (rx1131_cur, rx1131_tgt, rx1131_pos, rx1131_curclass, rx1131_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1131_cur
    length rx1131_eos, rx1131_tgt
    eq $I19, 1, rx1131_restart3036
    gt rx1131_pos, rx1131_eos, rx1131_fail3037
    repr_get_attr_int $I11, self, rx1131_curclass, "$!from"
    ne $I11, -1, rxscan1132_done3043
    goto rxscan1132_scan3042
  rxscan1132_loop3041:
    inc rx1131_pos
    gt rx1131_pos, rx1131_eos, rx1131_fail3037
    repr_bind_attr_int rx1131_cur, rx1131_curclass, "$!from", rx1131_pos
  rxscan1132_scan3042:
    nqp_rxmark rx1131_bstack, rxscan1132_loop3041, rx1131_pos, 0
  rxscan1132_done3043:
    nqp_rxmark rx1131_bstack, rxcap1133_fail3045, rx1131_pos, 0
    add $I11, rx1131_pos, 1
    gt $I11, rx1131_eos, rx1131_fail3037
    substr $S10, rx1131_tgt, rx1131_pos, 1
    ne $S10, ucs4:"*", rx1131_fail3037
    add rx1131_pos, 1
    nqp_rxpeek $I19, rx1131_bstack, rxcap1133_fail3045
    inc $I19
    set $I11, rx1131_bstack[$I19]
    repr_bind_attr_int rx1131_cur, rx1131_curclass, "$!pos", rx1131_pos
    $P11 = rx1131_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1131_pos)
    rx1131_cstack = rx1131_cur."!cursor_capture"($P11, "sym")
    goto rxcap1133_done3044
  rxcap1133_fail3045:
    goto rx1131_fail3037
  rxcap1133_done3044:
    repr_bind_attr_int rx1131_cur, rx1131_curclass, "$!pos", rx1131_pos
    $P11 = rx1131_cur."O"("%multiplicative, :op<mul_n>")
    repr_get_attr_int $I11, $P11, rx1131_curclass, "$!pos"
    lt $I11, 0, rx1131_fail3037
    nqp_rxmark rx1131_bstack, rxsubrule1134_pass3046, -1, 0
  rxsubrule1134_pass3046:
    rx1131_cstack = rx1131_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1131_pos, $P11, rx1131_curclass, "$!pos"
    rx1131_cur."!cursor_pass"(rx1131_pos, "infix:sym<*>", 'backtrack'=>1)
    .return (rx1131_cur)
  rx1131_restart3036:
    repr_get_attr_obj rx1131_cstack, rx1131_cur, rx1131_curclass, "$!cstack"
  rx1131_fail3037:
    unless rx1131_bstack, rx1131_done3035
    pop $I19, rx1131_bstack
    if_null rx1131_cstack, rx1131_cstack_done3040
    unless rx1131_cstack, rx1131_cstack_done3040
    dec $I19
    set $P11, rx1131_cstack[$I19]
  rx1131_cstack_done3040:
    pop rx1131_rep, rx1131_bstack
    pop rx1131_pos, rx1131_bstack
    pop $I19, rx1131_bstack
    lt rx1131_pos, -1, rx1131_done3035
    lt rx1131_pos, 0, rx1131_fail3037
    eq $I19, 0, rx1131_fail3037
    nqp_islist $I20, rx1131_cstack
    unless $I20, rx1131_jump3038
    elements $I18, rx1131_bstack
    le $I18, 0, rx1131_cut3039
    dec $I18
    set $I18, rx1131_bstack[$I18]
  rx1131_cut3039:
    assign rx1131_cstack, $I18
  rx1131_jump3038:
    jump $I19
  rx1131_done3035:
    rx1131_cur."!cursor_fail"()
    .return (rx1131_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym</>" :subid("cuid_188_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1319
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1135_tgt
    .local int rx1135_pos
    .local int rx1135_off
    .local int rx1135_eos
    .local int rx1135_rep
    .local pmc rx1135_cur
    .local pmc rx1135_curclass
    .local pmc rx1135_bstack
    .local pmc rx1135_cstack
    (rx1135_cur, rx1135_tgt, rx1135_pos, rx1135_curclass, rx1135_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1135_cur
    length rx1135_eos, rx1135_tgt
    eq $I19, 1, rx1135_restart3049
    gt rx1135_pos, rx1135_eos, rx1135_fail3050
    repr_get_attr_int $I11, self, rx1135_curclass, "$!from"
    ne $I11, -1, rxscan1136_done3056
    goto rxscan1136_scan3055
  rxscan1136_loop3054:
    inc rx1135_pos
    gt rx1135_pos, rx1135_eos, rx1135_fail3050
    repr_bind_attr_int rx1135_cur, rx1135_curclass, "$!from", rx1135_pos
  rxscan1136_scan3055:
    nqp_rxmark rx1135_bstack, rxscan1136_loop3054, rx1135_pos, 0
  rxscan1136_done3056:
    nqp_rxmark rx1135_bstack, rxcap1137_fail3058, rx1135_pos, 0
    add $I11, rx1135_pos, 1
    gt $I11, rx1135_eos, rx1135_fail3050
    substr $S10, rx1135_tgt, rx1135_pos, 1
    ne $S10, ucs4:"/", rx1135_fail3050
    add rx1135_pos, 1
    nqp_rxpeek $I19, rx1135_bstack, rxcap1137_fail3058
    inc $I19
    set $I11, rx1135_bstack[$I19]
    repr_bind_attr_int rx1135_cur, rx1135_curclass, "$!pos", rx1135_pos
    $P11 = rx1135_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1135_pos)
    rx1135_cstack = rx1135_cur."!cursor_capture"($P11, "sym")
    goto rxcap1137_done3057
  rxcap1137_fail3058:
    goto rx1135_fail3050
  rxcap1137_done3057:
    repr_bind_attr_int rx1135_cur, rx1135_curclass, "$!pos", rx1135_pos
    $P11 = rx1135_cur."O"("%multiplicative, :op<div_n>")
    repr_get_attr_int $I11, $P11, rx1135_curclass, "$!pos"
    lt $I11, 0, rx1135_fail3050
    nqp_rxmark rx1135_bstack, rxsubrule1138_pass3059, -1, 0
  rxsubrule1138_pass3059:
    rx1135_cstack = rx1135_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1135_pos, $P11, rx1135_curclass, "$!pos"
    rx1135_cur."!cursor_pass"(rx1135_pos, "infix:sym</>", 'backtrack'=>1)
    .return (rx1135_cur)
  rx1135_restart3049:
    repr_get_attr_obj rx1135_cstack, rx1135_cur, rx1135_curclass, "$!cstack"
  rx1135_fail3050:
    unless rx1135_bstack, rx1135_done3048
    pop $I19, rx1135_bstack
    if_null rx1135_cstack, rx1135_cstack_done3053
    unless rx1135_cstack, rx1135_cstack_done3053
    dec $I19
    set $P11, rx1135_cstack[$I19]
  rx1135_cstack_done3053:
    pop rx1135_rep, rx1135_bstack
    pop rx1135_pos, rx1135_bstack
    pop $I19, rx1135_bstack
    lt rx1135_pos, -1, rx1135_done3048
    lt rx1135_pos, 0, rx1135_fail3050
    eq $I19, 0, rx1135_fail3050
    nqp_islist $I20, rx1135_cstack
    unless $I20, rx1135_jump3051
    elements $I18, rx1135_bstack
    le $I18, 0, rx1135_cut3052
    dec $I18
    set $I18, rx1135_bstack[$I18]
  rx1135_cut3052:
    assign rx1135_cstack, $I18
  rx1135_jump3051:
    jump $I19
  rx1135_done3048:
    rx1135_cur."!cursor_fail"()
    .return (rx1135_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<%>" :subid("cuid_189_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1320
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1139_tgt
    .local int rx1139_pos
    .local int rx1139_off
    .local int rx1139_eos
    .local int rx1139_rep
    .local pmc rx1139_cur
    .local pmc rx1139_curclass
    .local pmc rx1139_bstack
    .local pmc rx1139_cstack
    (rx1139_cur, rx1139_tgt, rx1139_pos, rx1139_curclass, rx1139_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1139_cur
    length rx1139_eos, rx1139_tgt
    eq $I19, 1, rx1139_restart3062
    gt rx1139_pos, rx1139_eos, rx1139_fail3063
    repr_get_attr_int $I11, self, rx1139_curclass, "$!from"
    ne $I11, -1, rxscan1140_done3069
    goto rxscan1140_scan3068
  rxscan1140_loop3067:
    inc rx1139_pos
    gt rx1139_pos, rx1139_eos, rx1139_fail3063
    repr_bind_attr_int rx1139_cur, rx1139_curclass, "$!from", rx1139_pos
  rxscan1140_scan3068:
    nqp_rxmark rx1139_bstack, rxscan1140_loop3067, rx1139_pos, 0
  rxscan1140_done3069:
    nqp_rxmark rx1139_bstack, rxcap1141_fail3071, rx1139_pos, 0
    add $I11, rx1139_pos, 1
    gt $I11, rx1139_eos, rx1139_fail3063
    substr $S10, rx1139_tgt, rx1139_pos, 1
    ne $S10, ucs4:"%", rx1139_fail3063
    add rx1139_pos, 1
    nqp_rxpeek $I19, rx1139_bstack, rxcap1141_fail3071
    inc $I19
    set $I11, rx1139_bstack[$I19]
    repr_bind_attr_int rx1139_cur, rx1139_curclass, "$!pos", rx1139_pos
    $P11 = rx1139_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1139_pos)
    rx1139_cstack = rx1139_cur."!cursor_capture"($P11, "sym")
    goto rxcap1141_done3070
  rxcap1141_fail3071:
    goto rx1139_fail3063
  rxcap1141_done3070:
    repr_bind_attr_int rx1139_cur, rx1139_curclass, "$!pos", rx1139_pos
    $P11 = rx1139_cur."O"("%multiplicative, :op<mod_n>")
    repr_get_attr_int $I11, $P11, rx1139_curclass, "$!pos"
    lt $I11, 0, rx1139_fail3063
    nqp_rxmark rx1139_bstack, rxsubrule1142_pass3072, -1, 0
  rxsubrule1142_pass3072:
    rx1139_cstack = rx1139_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1139_pos, $P11, rx1139_curclass, "$!pos"
    rx1139_cur."!cursor_pass"(rx1139_pos, "infix:sym<%>", 'backtrack'=>1)
    .return (rx1139_cur)
  rx1139_restart3062:
    repr_get_attr_obj rx1139_cstack, rx1139_cur, rx1139_curclass, "$!cstack"
  rx1139_fail3063:
    unless rx1139_bstack, rx1139_done3061
    pop $I19, rx1139_bstack
    if_null rx1139_cstack, rx1139_cstack_done3066
    unless rx1139_cstack, rx1139_cstack_done3066
    dec $I19
    set $P11, rx1139_cstack[$I19]
  rx1139_cstack_done3066:
    pop rx1139_rep, rx1139_bstack
    pop rx1139_pos, rx1139_bstack
    pop $I19, rx1139_bstack
    lt rx1139_pos, -1, rx1139_done3061
    lt rx1139_pos, 0, rx1139_fail3063
    eq $I19, 0, rx1139_fail3063
    nqp_islist $I20, rx1139_cstack
    unless $I20, rx1139_jump3064
    elements $I18, rx1139_bstack
    le $I18, 0, rx1139_cut3065
    dec $I18
    set $I18, rx1139_bstack[$I18]
  rx1139_cut3065:
    assign rx1139_cstack, $I18
  rx1139_jump3064:
    jump $I19
  rx1139_done3061:
    rx1139_cur."!cursor_fail"()
    .return (rx1139_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+&>" :subid("cuid_190_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1321
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1143_tgt
    .local int rx1143_pos
    .local int rx1143_off
    .local int rx1143_eos
    .local int rx1143_rep
    .local pmc rx1143_cur
    .local pmc rx1143_curclass
    .local pmc rx1143_bstack
    .local pmc rx1143_cstack
    (rx1143_cur, rx1143_tgt, rx1143_pos, rx1143_curclass, rx1143_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1143_cur
    length rx1143_eos, rx1143_tgt
    eq $I19, 1, rx1143_restart3075
    gt rx1143_pos, rx1143_eos, rx1143_fail3076
    repr_get_attr_int $I11, self, rx1143_curclass, "$!from"
    ne $I11, -1, rxscan1144_done3082
    goto rxscan1144_scan3081
  rxscan1144_loop3080:
    inc rx1143_pos
    gt rx1143_pos, rx1143_eos, rx1143_fail3076
    repr_bind_attr_int rx1143_cur, rx1143_curclass, "$!from", rx1143_pos
  rxscan1144_scan3081:
    nqp_rxmark rx1143_bstack, rxscan1144_loop3080, rx1143_pos, 0
  rxscan1144_done3082:
    nqp_rxmark rx1143_bstack, rxcap1145_fail3084, rx1143_pos, 0
    add $I11, rx1143_pos, 2
    gt $I11, rx1143_eos, rx1143_fail3076
    substr $S10, rx1143_tgt, rx1143_pos, 2
    ne $S10, ucs4:"+&", rx1143_fail3076
    add rx1143_pos, 2
    nqp_rxpeek $I19, rx1143_bstack, rxcap1145_fail3084
    inc $I19
    set $I11, rx1143_bstack[$I19]
    repr_bind_attr_int rx1143_cur, rx1143_curclass, "$!pos", rx1143_pos
    $P11 = rx1143_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1143_pos)
    rx1143_cstack = rx1143_cur."!cursor_capture"($P11, "sym")
    goto rxcap1145_done3083
  rxcap1145_fail3084:
    goto rx1143_fail3076
  rxcap1145_done3083:
    repr_bind_attr_int rx1143_cur, rx1143_curclass, "$!pos", rx1143_pos
    $P11 = rx1143_cur."O"("%multiplicative, :op<bitand_i>")
    repr_get_attr_int $I11, $P11, rx1143_curclass, "$!pos"
    lt $I11, 0, rx1143_fail3076
    nqp_rxmark rx1143_bstack, rxsubrule1146_pass3085, -1, 0
  rxsubrule1146_pass3085:
    rx1143_cstack = rx1143_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1143_pos, $P11, rx1143_curclass, "$!pos"
    rx1143_cur."!cursor_pass"(rx1143_pos, "infix:sym<+&>", 'backtrack'=>1)
    .return (rx1143_cur)
  rx1143_restart3075:
    repr_get_attr_obj rx1143_cstack, rx1143_cur, rx1143_curclass, "$!cstack"
  rx1143_fail3076:
    unless rx1143_bstack, rx1143_done3074
    pop $I19, rx1143_bstack
    if_null rx1143_cstack, rx1143_cstack_done3079
    unless rx1143_cstack, rx1143_cstack_done3079
    dec $I19
    set $P11, rx1143_cstack[$I19]
  rx1143_cstack_done3079:
    pop rx1143_rep, rx1143_bstack
    pop rx1143_pos, rx1143_bstack
    pop $I19, rx1143_bstack
    lt rx1143_pos, -1, rx1143_done3074
    lt rx1143_pos, 0, rx1143_fail3076
    eq $I19, 0, rx1143_fail3076
    nqp_islist $I20, rx1143_cstack
    unless $I20, rx1143_jump3077
    elements $I18, rx1143_bstack
    le $I18, 0, rx1143_cut3078
    dec $I18
    set $I18, rx1143_bstack[$I18]
  rx1143_cut3078:
    assign rx1143_cstack, $I18
  rx1143_jump3077:
    jump $I19
  rx1143_done3074:
    rx1143_cur."!cursor_fail"()
    .return (rx1143_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+>" :subid("cuid_191_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1323
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1147_tgt
    .local int rx1147_pos
    .local int rx1147_off
    .local int rx1147_eos
    .local int rx1147_rep
    .local pmc rx1147_cur
    .local pmc rx1147_curclass
    .local pmc rx1147_bstack
    .local pmc rx1147_cstack
    (rx1147_cur, rx1147_tgt, rx1147_pos, rx1147_curclass, rx1147_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1147_cur
    length rx1147_eos, rx1147_tgt
    eq $I19, 1, rx1147_restart3088
    gt rx1147_pos, rx1147_eos, rx1147_fail3089
    repr_get_attr_int $I11, self, rx1147_curclass, "$!from"
    ne $I11, -1, rxscan1148_done3095
    goto rxscan1148_scan3094
  rxscan1148_loop3093:
    inc rx1147_pos
    gt rx1147_pos, rx1147_eos, rx1147_fail3089
    repr_bind_attr_int rx1147_cur, rx1147_curclass, "$!from", rx1147_pos
  rxscan1148_scan3094:
    nqp_rxmark rx1147_bstack, rxscan1148_loop3093, rx1147_pos, 0
  rxscan1148_done3095:
    nqp_rxmark rx1147_bstack, rxcap1149_fail3097, rx1147_pos, 0
    add $I11, rx1147_pos, 1
    gt $I11, rx1147_eos, rx1147_fail3089
    substr $S10, rx1147_tgt, rx1147_pos, 1
    ne $S10, ucs4:"+", rx1147_fail3089
    add rx1147_pos, 1
    nqp_rxpeek $I19, rx1147_bstack, rxcap1149_fail3097
    inc $I19
    set $I11, rx1147_bstack[$I19]
    repr_bind_attr_int rx1147_cur, rx1147_curclass, "$!pos", rx1147_pos
    $P11 = rx1147_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1147_pos)
    rx1147_cstack = rx1147_cur."!cursor_capture"($P11, "sym")
    goto rxcap1149_done3096
  rxcap1149_fail3097:
    goto rx1147_fail3089
  rxcap1149_done3096:
    repr_bind_attr_int rx1147_cur, rx1147_curclass, "$!pos", rx1147_pos
    $P11 = rx1147_cur."O"("%additive, :op<add_n>")
    repr_get_attr_int $I11, $P11, rx1147_curclass, "$!pos"
    lt $I11, 0, rx1147_fail3089
    nqp_rxmark rx1147_bstack, rxsubrule1150_pass3098, -1, 0
  rxsubrule1150_pass3098:
    rx1147_cstack = rx1147_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1147_pos, $P11, rx1147_curclass, "$!pos"
    rx1147_cur."!cursor_pass"(rx1147_pos, "infix:sym<+>", 'backtrack'=>1)
    .return (rx1147_cur)
  rx1147_restart3088:
    repr_get_attr_obj rx1147_cstack, rx1147_cur, rx1147_curclass, "$!cstack"
  rx1147_fail3089:
    unless rx1147_bstack, rx1147_done3087
    pop $I19, rx1147_bstack
    if_null rx1147_cstack, rx1147_cstack_done3092
    unless rx1147_cstack, rx1147_cstack_done3092
    dec $I19
    set $P11, rx1147_cstack[$I19]
  rx1147_cstack_done3092:
    pop rx1147_rep, rx1147_bstack
    pop rx1147_pos, rx1147_bstack
    pop $I19, rx1147_bstack
    lt rx1147_pos, -1, rx1147_done3087
    lt rx1147_pos, 0, rx1147_fail3089
    eq $I19, 0, rx1147_fail3089
    nqp_islist $I20, rx1147_cstack
    unless $I20, rx1147_jump3090
    elements $I18, rx1147_bstack
    le $I18, 0, rx1147_cut3091
    dec $I18
    set $I18, rx1147_bstack[$I18]
  rx1147_cut3091:
    assign rx1147_cstack, $I18
  rx1147_jump3090:
    jump $I19
  rx1147_done3087:
    rx1147_cur."!cursor_fail"()
    .return (rx1147_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<->" :subid("cuid_192_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1324
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1151_tgt
    .local int rx1151_pos
    .local int rx1151_off
    .local int rx1151_eos
    .local int rx1151_rep
    .local pmc rx1151_cur
    .local pmc rx1151_curclass
    .local pmc rx1151_bstack
    .local pmc rx1151_cstack
    (rx1151_cur, rx1151_tgt, rx1151_pos, rx1151_curclass, rx1151_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1151_cur
    length rx1151_eos, rx1151_tgt
    eq $I19, 1, rx1151_restart3101
    gt rx1151_pos, rx1151_eos, rx1151_fail3102
    repr_get_attr_int $I11, self, rx1151_curclass, "$!from"
    ne $I11, -1, rxscan1152_done3108
    goto rxscan1152_scan3107
  rxscan1152_loop3106:
    inc rx1151_pos
    gt rx1151_pos, rx1151_eos, rx1151_fail3102
    repr_bind_attr_int rx1151_cur, rx1151_curclass, "$!from", rx1151_pos
  rxscan1152_scan3107:
    nqp_rxmark rx1151_bstack, rxscan1152_loop3106, rx1151_pos, 0
  rxscan1152_done3108:
    nqp_rxmark rx1151_bstack, rxcap1153_fail3110, rx1151_pos, 0
    add $I11, rx1151_pos, 1
    gt $I11, rx1151_eos, rx1151_fail3102
    substr $S10, rx1151_tgt, rx1151_pos, 1
    ne $S10, ucs4:"-", rx1151_fail3102
    add rx1151_pos, 1
    nqp_rxpeek $I19, rx1151_bstack, rxcap1153_fail3110
    inc $I19
    set $I11, rx1151_bstack[$I19]
    repr_bind_attr_int rx1151_cur, rx1151_curclass, "$!pos", rx1151_pos
    $P11 = rx1151_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1151_pos)
    rx1151_cstack = rx1151_cur."!cursor_capture"($P11, "sym")
    goto rxcap1153_done3109
  rxcap1153_fail3110:
    goto rx1151_fail3102
  rxcap1153_done3109:
    repr_bind_attr_int rx1151_cur, rx1151_curclass, "$!pos", rx1151_pos
    $P11 = rx1151_cur."O"("%additive, :op<sub_n>")
    repr_get_attr_int $I11, $P11, rx1151_curclass, "$!pos"
    lt $I11, 0, rx1151_fail3102
    nqp_rxmark rx1151_bstack, rxsubrule1154_pass3111, -1, 0
  rxsubrule1154_pass3111:
    rx1151_cstack = rx1151_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1151_pos, $P11, rx1151_curclass, "$!pos"
    rx1151_cur."!cursor_pass"(rx1151_pos, "infix:sym<->", 'backtrack'=>1)
    .return (rx1151_cur)
  rx1151_restart3101:
    repr_get_attr_obj rx1151_cstack, rx1151_cur, rx1151_curclass, "$!cstack"
  rx1151_fail3102:
    unless rx1151_bstack, rx1151_done3100
    pop $I19, rx1151_bstack
    if_null rx1151_cstack, rx1151_cstack_done3105
    unless rx1151_cstack, rx1151_cstack_done3105
    dec $I19
    set $P11, rx1151_cstack[$I19]
  rx1151_cstack_done3105:
    pop rx1151_rep, rx1151_bstack
    pop rx1151_pos, rx1151_bstack
    pop $I19, rx1151_bstack
    lt rx1151_pos, -1, rx1151_done3100
    lt rx1151_pos, 0, rx1151_fail3102
    eq $I19, 0, rx1151_fail3102
    nqp_islist $I20, rx1151_cstack
    unless $I20, rx1151_jump3103
    elements $I18, rx1151_bstack
    le $I18, 0, rx1151_cut3104
    dec $I18
    set $I18, rx1151_bstack[$I18]
  rx1151_cut3104:
    assign rx1151_cstack, $I18
  rx1151_jump3103:
    jump $I19
  rx1151_done3100:
    rx1151_cur."!cursor_fail"()
    .return (rx1151_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+|>" :subid("cuid_193_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1325
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1155_tgt
    .local int rx1155_pos
    .local int rx1155_off
    .local int rx1155_eos
    .local int rx1155_rep
    .local pmc rx1155_cur
    .local pmc rx1155_curclass
    .local pmc rx1155_bstack
    .local pmc rx1155_cstack
    (rx1155_cur, rx1155_tgt, rx1155_pos, rx1155_curclass, rx1155_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1155_cur
    length rx1155_eos, rx1155_tgt
    eq $I19, 1, rx1155_restart3114
    gt rx1155_pos, rx1155_eos, rx1155_fail3115
    repr_get_attr_int $I11, self, rx1155_curclass, "$!from"
    ne $I11, -1, rxscan1156_done3121
    goto rxscan1156_scan3120
  rxscan1156_loop3119:
    inc rx1155_pos
    gt rx1155_pos, rx1155_eos, rx1155_fail3115
    repr_bind_attr_int rx1155_cur, rx1155_curclass, "$!from", rx1155_pos
  rxscan1156_scan3120:
    nqp_rxmark rx1155_bstack, rxscan1156_loop3119, rx1155_pos, 0
  rxscan1156_done3121:
    nqp_rxmark rx1155_bstack, rxcap1157_fail3123, rx1155_pos, 0
    add $I11, rx1155_pos, 2
    gt $I11, rx1155_eos, rx1155_fail3115
    substr $S10, rx1155_tgt, rx1155_pos, 2
    ne $S10, ucs4:"+|", rx1155_fail3115
    add rx1155_pos, 2
    nqp_rxpeek $I19, rx1155_bstack, rxcap1157_fail3123
    inc $I19
    set $I11, rx1155_bstack[$I19]
    repr_bind_attr_int rx1155_cur, rx1155_curclass, "$!pos", rx1155_pos
    $P11 = rx1155_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1155_pos)
    rx1155_cstack = rx1155_cur."!cursor_capture"($P11, "sym")
    goto rxcap1157_done3122
  rxcap1157_fail3123:
    goto rx1155_fail3115
  rxcap1157_done3122:
    repr_bind_attr_int rx1155_cur, rx1155_curclass, "$!pos", rx1155_pos
    $P11 = rx1155_cur."O"("%additive, :op<bitor_i>")
    repr_get_attr_int $I11, $P11, rx1155_curclass, "$!pos"
    lt $I11, 0, rx1155_fail3115
    nqp_rxmark rx1155_bstack, rxsubrule1158_pass3124, -1, 0
  rxsubrule1158_pass3124:
    rx1155_cstack = rx1155_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1155_pos, $P11, rx1155_curclass, "$!pos"
    rx1155_cur."!cursor_pass"(rx1155_pos, "infix:sym<+|>", 'backtrack'=>1)
    .return (rx1155_cur)
  rx1155_restart3114:
    repr_get_attr_obj rx1155_cstack, rx1155_cur, rx1155_curclass, "$!cstack"
  rx1155_fail3115:
    unless rx1155_bstack, rx1155_done3113
    pop $I19, rx1155_bstack
    if_null rx1155_cstack, rx1155_cstack_done3118
    unless rx1155_cstack, rx1155_cstack_done3118
    dec $I19
    set $P11, rx1155_cstack[$I19]
  rx1155_cstack_done3118:
    pop rx1155_rep, rx1155_bstack
    pop rx1155_pos, rx1155_bstack
    pop $I19, rx1155_bstack
    lt rx1155_pos, -1, rx1155_done3113
    lt rx1155_pos, 0, rx1155_fail3115
    eq $I19, 0, rx1155_fail3115
    nqp_islist $I20, rx1155_cstack
    unless $I20, rx1155_jump3116
    elements $I18, rx1155_bstack
    le $I18, 0, rx1155_cut3117
    dec $I18
    set $I18, rx1155_bstack[$I18]
  rx1155_cut3117:
    assign rx1155_cstack, $I18
  rx1155_jump3116:
    jump $I19
  rx1155_done3113:
    rx1155_cur."!cursor_fail"()
    .return (rx1155_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+^>" :subid("cuid_194_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1326
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1159_tgt
    .local int rx1159_pos
    .local int rx1159_off
    .local int rx1159_eos
    .local int rx1159_rep
    .local pmc rx1159_cur
    .local pmc rx1159_curclass
    .local pmc rx1159_bstack
    .local pmc rx1159_cstack
    (rx1159_cur, rx1159_tgt, rx1159_pos, rx1159_curclass, rx1159_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1159_cur
    length rx1159_eos, rx1159_tgt
    eq $I19, 1, rx1159_restart3127
    gt rx1159_pos, rx1159_eos, rx1159_fail3128
    repr_get_attr_int $I11, self, rx1159_curclass, "$!from"
    ne $I11, -1, rxscan1160_done3134
    goto rxscan1160_scan3133
  rxscan1160_loop3132:
    inc rx1159_pos
    gt rx1159_pos, rx1159_eos, rx1159_fail3128
    repr_bind_attr_int rx1159_cur, rx1159_curclass, "$!from", rx1159_pos
  rxscan1160_scan3133:
    nqp_rxmark rx1159_bstack, rxscan1160_loop3132, rx1159_pos, 0
  rxscan1160_done3134:
    nqp_rxmark rx1159_bstack, rxcap1161_fail3136, rx1159_pos, 0
    add $I11, rx1159_pos, 2
    gt $I11, rx1159_eos, rx1159_fail3128
    substr $S10, rx1159_tgt, rx1159_pos, 2
    ne $S10, ucs4:"+^", rx1159_fail3128
    add rx1159_pos, 2
    nqp_rxpeek $I19, rx1159_bstack, rxcap1161_fail3136
    inc $I19
    set $I11, rx1159_bstack[$I19]
    repr_bind_attr_int rx1159_cur, rx1159_curclass, "$!pos", rx1159_pos
    $P11 = rx1159_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1159_pos)
    rx1159_cstack = rx1159_cur."!cursor_capture"($P11, "sym")
    goto rxcap1161_done3135
  rxcap1161_fail3136:
    goto rx1159_fail3128
  rxcap1161_done3135:
    repr_bind_attr_int rx1159_cur, rx1159_curclass, "$!pos", rx1159_pos
    $P11 = rx1159_cur."O"("%additive, :op<bitxor_i>")
    repr_get_attr_int $I11, $P11, rx1159_curclass, "$!pos"
    lt $I11, 0, rx1159_fail3128
    nqp_rxmark rx1159_bstack, rxsubrule1162_pass3137, -1, 0
  rxsubrule1162_pass3137:
    rx1159_cstack = rx1159_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1159_pos, $P11, rx1159_curclass, "$!pos"
    rx1159_cur."!cursor_pass"(rx1159_pos, "infix:sym<+^>", 'backtrack'=>1)
    .return (rx1159_cur)
  rx1159_restart3127:
    repr_get_attr_obj rx1159_cstack, rx1159_cur, rx1159_curclass, "$!cstack"
  rx1159_fail3128:
    unless rx1159_bstack, rx1159_done3126
    pop $I19, rx1159_bstack
    if_null rx1159_cstack, rx1159_cstack_done3131
    unless rx1159_cstack, rx1159_cstack_done3131
    dec $I19
    set $P11, rx1159_cstack[$I19]
  rx1159_cstack_done3131:
    pop rx1159_rep, rx1159_bstack
    pop rx1159_pos, rx1159_bstack
    pop $I19, rx1159_bstack
    lt rx1159_pos, -1, rx1159_done3126
    lt rx1159_pos, 0, rx1159_fail3128
    eq $I19, 0, rx1159_fail3128
    nqp_islist $I20, rx1159_cstack
    unless $I20, rx1159_jump3129
    elements $I18, rx1159_bstack
    le $I18, 0, rx1159_cut3130
    dec $I18
    set $I18, rx1159_bstack[$I18]
  rx1159_cut3130:
    assign rx1159_cstack, $I18
  rx1159_jump3129:
    jump $I19
  rx1159_done3126:
    rx1159_cur."!cursor_fail"()
    .return (rx1159_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~>" :subid("cuid_195_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1328
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1163_tgt
    .local int rx1163_pos
    .local int rx1163_off
    .local int rx1163_eos
    .local int rx1163_rep
    .local pmc rx1163_cur
    .local pmc rx1163_curclass
    .local pmc rx1163_bstack
    .local pmc rx1163_cstack
    (rx1163_cur, rx1163_tgt, rx1163_pos, rx1163_curclass, rx1163_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1163_cur
    length rx1163_eos, rx1163_tgt
    eq $I19, 1, rx1163_restart3140
    gt rx1163_pos, rx1163_eos, rx1163_fail3141
    repr_get_attr_int $I11, self, rx1163_curclass, "$!from"
    ne $I11, -1, rxscan1164_done3147
    goto rxscan1164_scan3146
  rxscan1164_loop3145:
    inc rx1163_pos
    gt rx1163_pos, rx1163_eos, rx1163_fail3141
    repr_bind_attr_int rx1163_cur, rx1163_curclass, "$!from", rx1163_pos
  rxscan1164_scan3146:
    nqp_rxmark rx1163_bstack, rxscan1164_loop3145, rx1163_pos, 0
  rxscan1164_done3147:
    nqp_rxmark rx1163_bstack, rxcap1165_fail3149, rx1163_pos, 0
    add $I11, rx1163_pos, 1
    gt $I11, rx1163_eos, rx1163_fail3141
    substr $S10, rx1163_tgt, rx1163_pos, 1
    ne $S10, ucs4:"~", rx1163_fail3141
    add rx1163_pos, 1
    nqp_rxpeek $I19, rx1163_bstack, rxcap1165_fail3149
    inc $I19
    set $I11, rx1163_bstack[$I19]
    repr_bind_attr_int rx1163_cur, rx1163_curclass, "$!pos", rx1163_pos
    $P11 = rx1163_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1163_pos)
    rx1163_cstack = rx1163_cur."!cursor_capture"($P11, "sym")
    goto rxcap1165_done3148
  rxcap1165_fail3149:
    goto rx1163_fail3141
  rxcap1165_done3148:
    repr_bind_attr_int rx1163_cur, rx1163_curclass, "$!pos", rx1163_pos
    $P11 = rx1163_cur."O"("%concatenation , :op<concat>")
    repr_get_attr_int $I11, $P11, rx1163_curclass, "$!pos"
    lt $I11, 0, rx1163_fail3141
    nqp_rxmark rx1163_bstack, rxsubrule1166_pass3150, -1, 0
  rxsubrule1166_pass3150:
    rx1163_cstack = rx1163_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1163_pos, $P11, rx1163_curclass, "$!pos"
    rx1163_cur."!cursor_pass"(rx1163_pos, "infix:sym<~>", 'backtrack'=>1)
    .return (rx1163_cur)
  rx1163_restart3140:
    repr_get_attr_obj rx1163_cstack, rx1163_cur, rx1163_curclass, "$!cstack"
  rx1163_fail3141:
    unless rx1163_bstack, rx1163_done3139
    pop $I19, rx1163_bstack
    if_null rx1163_cstack, rx1163_cstack_done3144
    unless rx1163_cstack, rx1163_cstack_done3144
    dec $I19
    set $P11, rx1163_cstack[$I19]
  rx1163_cstack_done3144:
    pop rx1163_rep, rx1163_bstack
    pop rx1163_pos, rx1163_bstack
    pop $I19, rx1163_bstack
    lt rx1163_pos, -1, rx1163_done3139
    lt rx1163_pos, 0, rx1163_fail3141
    eq $I19, 0, rx1163_fail3141
    nqp_islist $I20, rx1163_cstack
    unless $I20, rx1163_jump3142
    elements $I18, rx1163_bstack
    le $I18, 0, rx1163_cut3143
    dec $I18
    set $I18, rx1163_bstack[$I18]
  rx1163_cut3143:
    assign rx1163_cstack, $I18
  rx1163_jump3142:
    jump $I19
  rx1163_done3139:
    rx1163_cur."!cursor_fail"()
    .return (rx1163_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<==>" :subid("cuid_196_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1330
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1167_tgt
    .local int rx1167_pos
    .local int rx1167_off
    .local int rx1167_eos
    .local int rx1167_rep
    .local pmc rx1167_cur
    .local pmc rx1167_curclass
    .local pmc rx1167_bstack
    .local pmc rx1167_cstack
    (rx1167_cur, rx1167_tgt, rx1167_pos, rx1167_curclass, rx1167_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1167_cur
    length rx1167_eos, rx1167_tgt
    eq $I19, 1, rx1167_restart3153
    gt rx1167_pos, rx1167_eos, rx1167_fail3154
    repr_get_attr_int $I11, self, rx1167_curclass, "$!from"
    ne $I11, -1, rxscan1168_done3160
    goto rxscan1168_scan3159
  rxscan1168_loop3158:
    inc rx1167_pos
    gt rx1167_pos, rx1167_eos, rx1167_fail3154
    repr_bind_attr_int rx1167_cur, rx1167_curclass, "$!from", rx1167_pos
  rxscan1168_scan3159:
    nqp_rxmark rx1167_bstack, rxscan1168_loop3158, rx1167_pos, 0
  rxscan1168_done3160:
    nqp_rxmark rx1167_bstack, rxcap1169_fail3162, rx1167_pos, 0
    add $I11, rx1167_pos, 2
    gt $I11, rx1167_eos, rx1167_fail3154
    substr $S10, rx1167_tgt, rx1167_pos, 2
    ne $S10, ucs4:"==", rx1167_fail3154
    add rx1167_pos, 2
    nqp_rxpeek $I19, rx1167_bstack, rxcap1169_fail3162
    inc $I19
    set $I11, rx1167_bstack[$I19]
    repr_bind_attr_int rx1167_cur, rx1167_curclass, "$!pos", rx1167_pos
    $P11 = rx1167_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1167_pos)
    rx1167_cstack = rx1167_cur."!cursor_capture"($P11, "sym")
    goto rxcap1169_done3161
  rxcap1169_fail3162:
    goto rx1167_fail3154
  rxcap1169_done3161:
    repr_bind_attr_int rx1167_cur, rx1167_curclass, "$!pos", rx1167_pos
    $P11 = rx1167_cur."O"("%relational, :op<iseq_n>")
    repr_get_attr_int $I11, $P11, rx1167_curclass, "$!pos"
    lt $I11, 0, rx1167_fail3154
    nqp_rxmark rx1167_bstack, rxsubrule1170_pass3163, -1, 0
  rxsubrule1170_pass3163:
    rx1167_cstack = rx1167_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1167_pos, $P11, rx1167_curclass, "$!pos"
    rx1167_cur."!cursor_pass"(rx1167_pos, "infix:sym<==>", 'backtrack'=>1)
    .return (rx1167_cur)
  rx1167_restart3153:
    repr_get_attr_obj rx1167_cstack, rx1167_cur, rx1167_curclass, "$!cstack"
  rx1167_fail3154:
    unless rx1167_bstack, rx1167_done3152
    pop $I19, rx1167_bstack
    if_null rx1167_cstack, rx1167_cstack_done3157
    unless rx1167_cstack, rx1167_cstack_done3157
    dec $I19
    set $P11, rx1167_cstack[$I19]
  rx1167_cstack_done3157:
    pop rx1167_rep, rx1167_bstack
    pop rx1167_pos, rx1167_bstack
    pop $I19, rx1167_bstack
    lt rx1167_pos, -1, rx1167_done3152
    lt rx1167_pos, 0, rx1167_fail3154
    eq $I19, 0, rx1167_fail3154
    nqp_islist $I20, rx1167_cstack
    unless $I20, rx1167_jump3155
    elements $I18, rx1167_bstack
    le $I18, 0, rx1167_cut3156
    dec $I18
    set $I18, rx1167_bstack[$I18]
  rx1167_cut3156:
    assign rx1167_cstack, $I18
  rx1167_jump3155:
    jump $I19
  rx1167_done3152:
    rx1167_cur."!cursor_fail"()
    .return (rx1167_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<!=>" :subid("cuid_197_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1331
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1171_tgt
    .local int rx1171_pos
    .local int rx1171_off
    .local int rx1171_eos
    .local int rx1171_rep
    .local pmc rx1171_cur
    .local pmc rx1171_curclass
    .local pmc rx1171_bstack
    .local pmc rx1171_cstack
    (rx1171_cur, rx1171_tgt, rx1171_pos, rx1171_curclass, rx1171_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1171_cur
    length rx1171_eos, rx1171_tgt
    eq $I19, 1, rx1171_restart3166
    gt rx1171_pos, rx1171_eos, rx1171_fail3167
    repr_get_attr_int $I11, self, rx1171_curclass, "$!from"
    ne $I11, -1, rxscan1172_done3173
    goto rxscan1172_scan3172
  rxscan1172_loop3171:
    inc rx1171_pos
    gt rx1171_pos, rx1171_eos, rx1171_fail3167
    repr_bind_attr_int rx1171_cur, rx1171_curclass, "$!from", rx1171_pos
  rxscan1172_scan3172:
    nqp_rxmark rx1171_bstack, rxscan1172_loop3171, rx1171_pos, 0
  rxscan1172_done3173:
    nqp_rxmark rx1171_bstack, rxcap1173_fail3175, rx1171_pos, 0
    add $I11, rx1171_pos, 2
    gt $I11, rx1171_eos, rx1171_fail3167
    substr $S10, rx1171_tgt, rx1171_pos, 2
    ne $S10, ucs4:"!=", rx1171_fail3167
    add rx1171_pos, 2
    nqp_rxpeek $I19, rx1171_bstack, rxcap1173_fail3175
    inc $I19
    set $I11, rx1171_bstack[$I19]
    repr_bind_attr_int rx1171_cur, rx1171_curclass, "$!pos", rx1171_pos
    $P11 = rx1171_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1171_pos)
    rx1171_cstack = rx1171_cur."!cursor_capture"($P11, "sym")
    goto rxcap1173_done3174
  rxcap1173_fail3175:
    goto rx1171_fail3167
  rxcap1173_done3174:
    repr_bind_attr_int rx1171_cur, rx1171_curclass, "$!pos", rx1171_pos
    $P11 = rx1171_cur."O"("%relational, :op<isne_n>")
    repr_get_attr_int $I11, $P11, rx1171_curclass, "$!pos"
    lt $I11, 0, rx1171_fail3167
    nqp_rxmark rx1171_bstack, rxsubrule1174_pass3176, -1, 0
  rxsubrule1174_pass3176:
    rx1171_cstack = rx1171_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1171_pos, $P11, rx1171_curclass, "$!pos"
    rx1171_cur."!cursor_pass"(rx1171_pos, "infix:sym<!=>", 'backtrack'=>1)
    .return (rx1171_cur)
  rx1171_restart3166:
    repr_get_attr_obj rx1171_cstack, rx1171_cur, rx1171_curclass, "$!cstack"
  rx1171_fail3167:
    unless rx1171_bstack, rx1171_done3165
    pop $I19, rx1171_bstack
    if_null rx1171_cstack, rx1171_cstack_done3170
    unless rx1171_cstack, rx1171_cstack_done3170
    dec $I19
    set $P11, rx1171_cstack[$I19]
  rx1171_cstack_done3170:
    pop rx1171_rep, rx1171_bstack
    pop rx1171_pos, rx1171_bstack
    pop $I19, rx1171_bstack
    lt rx1171_pos, -1, rx1171_done3165
    lt rx1171_pos, 0, rx1171_fail3167
    eq $I19, 0, rx1171_fail3167
    nqp_islist $I20, rx1171_cstack
    unless $I20, rx1171_jump3168
    elements $I18, rx1171_bstack
    le $I18, 0, rx1171_cut3169
    dec $I18
    set $I18, rx1171_bstack[$I18]
  rx1171_cut3169:
    assign rx1171_cstack, $I18
  rx1171_jump3168:
    jump $I19
  rx1171_done3165:
    rx1171_cur."!cursor_fail"()
    .return (rx1171_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<=>" :subid("cuid_198_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1332
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1175_tgt
    .local int rx1175_pos
    .local int rx1175_off
    .local int rx1175_eos
    .local int rx1175_rep
    .local pmc rx1175_cur
    .local pmc rx1175_curclass
    .local pmc rx1175_bstack
    .local pmc rx1175_cstack
    (rx1175_cur, rx1175_tgt, rx1175_pos, rx1175_curclass, rx1175_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1175_cur
    length rx1175_eos, rx1175_tgt
    eq $I19, 1, rx1175_restart3179
    gt rx1175_pos, rx1175_eos, rx1175_fail3180
    repr_get_attr_int $I11, self, rx1175_curclass, "$!from"
    ne $I11, -1, rxscan1176_done3186
    goto rxscan1176_scan3185
  rxscan1176_loop3184:
    inc rx1175_pos
    gt rx1175_pos, rx1175_eos, rx1175_fail3180
    repr_bind_attr_int rx1175_cur, rx1175_curclass, "$!from", rx1175_pos
  rxscan1176_scan3185:
    nqp_rxmark rx1175_bstack, rxscan1176_loop3184, rx1175_pos, 0
  rxscan1176_done3186:
    nqp_rxmark rx1175_bstack, rxcap1177_fail3188, rx1175_pos, 0
    add $I11, rx1175_pos, 2
    gt $I11, rx1175_eos, rx1175_fail3180
    substr $S10, rx1175_tgt, rx1175_pos, 2
    ne $S10, ucs4:"<=", rx1175_fail3180
    add rx1175_pos, 2
    nqp_rxpeek $I19, rx1175_bstack, rxcap1177_fail3188
    inc $I19
    set $I11, rx1175_bstack[$I19]
    repr_bind_attr_int rx1175_cur, rx1175_curclass, "$!pos", rx1175_pos
    $P11 = rx1175_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1175_pos)
    rx1175_cstack = rx1175_cur."!cursor_capture"($P11, "sym")
    goto rxcap1177_done3187
  rxcap1177_fail3188:
    goto rx1175_fail3180
  rxcap1177_done3187:
    repr_bind_attr_int rx1175_cur, rx1175_curclass, "$!pos", rx1175_pos
    $P11 = rx1175_cur."O"("%relational, :op<isle_n>")
    repr_get_attr_int $I11, $P11, rx1175_curclass, "$!pos"
    lt $I11, 0, rx1175_fail3180
    nqp_rxmark rx1175_bstack, rxsubrule1178_pass3189, -1, 0
  rxsubrule1178_pass3189:
    rx1175_cstack = rx1175_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1175_pos, $P11, rx1175_curclass, "$!pos"
    rx1175_cur."!cursor_pass"(rx1175_pos, "infix:sym<<=>", 'backtrack'=>1)
    .return (rx1175_cur)
  rx1175_restart3179:
    repr_get_attr_obj rx1175_cstack, rx1175_cur, rx1175_curclass, "$!cstack"
  rx1175_fail3180:
    unless rx1175_bstack, rx1175_done3178
    pop $I19, rx1175_bstack
    if_null rx1175_cstack, rx1175_cstack_done3183
    unless rx1175_cstack, rx1175_cstack_done3183
    dec $I19
    set $P11, rx1175_cstack[$I19]
  rx1175_cstack_done3183:
    pop rx1175_rep, rx1175_bstack
    pop rx1175_pos, rx1175_bstack
    pop $I19, rx1175_bstack
    lt rx1175_pos, -1, rx1175_done3178
    lt rx1175_pos, 0, rx1175_fail3180
    eq $I19, 0, rx1175_fail3180
    nqp_islist $I20, rx1175_cstack
    unless $I20, rx1175_jump3181
    elements $I18, rx1175_bstack
    le $I18, 0, rx1175_cut3182
    dec $I18
    set $I18, rx1175_bstack[$I18]
  rx1175_cut3182:
    assign rx1175_cstack, $I18
  rx1175_jump3181:
    jump $I19
  rx1175_done3178:
    rx1175_cur."!cursor_fail"()
    .return (rx1175_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>=>" :subid("cuid_199_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1333
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1179_tgt
    .local int rx1179_pos
    .local int rx1179_off
    .local int rx1179_eos
    .local int rx1179_rep
    .local pmc rx1179_cur
    .local pmc rx1179_curclass
    .local pmc rx1179_bstack
    .local pmc rx1179_cstack
    (rx1179_cur, rx1179_tgt, rx1179_pos, rx1179_curclass, rx1179_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1179_cur
    length rx1179_eos, rx1179_tgt
    eq $I19, 1, rx1179_restart3192
    gt rx1179_pos, rx1179_eos, rx1179_fail3193
    repr_get_attr_int $I11, self, rx1179_curclass, "$!from"
    ne $I11, -1, rxscan1180_done3199
    goto rxscan1180_scan3198
  rxscan1180_loop3197:
    inc rx1179_pos
    gt rx1179_pos, rx1179_eos, rx1179_fail3193
    repr_bind_attr_int rx1179_cur, rx1179_curclass, "$!from", rx1179_pos
  rxscan1180_scan3198:
    nqp_rxmark rx1179_bstack, rxscan1180_loop3197, rx1179_pos, 0
  rxscan1180_done3199:
    nqp_rxmark rx1179_bstack, rxcap1181_fail3201, rx1179_pos, 0
    add $I11, rx1179_pos, 2
    gt $I11, rx1179_eos, rx1179_fail3193
    substr $S10, rx1179_tgt, rx1179_pos, 2
    ne $S10, ucs4:">=", rx1179_fail3193
    add rx1179_pos, 2
    nqp_rxpeek $I19, rx1179_bstack, rxcap1181_fail3201
    inc $I19
    set $I11, rx1179_bstack[$I19]
    repr_bind_attr_int rx1179_cur, rx1179_curclass, "$!pos", rx1179_pos
    $P11 = rx1179_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1179_pos)
    rx1179_cstack = rx1179_cur."!cursor_capture"($P11, "sym")
    goto rxcap1181_done3200
  rxcap1181_fail3201:
    goto rx1179_fail3193
  rxcap1181_done3200:
    repr_bind_attr_int rx1179_cur, rx1179_curclass, "$!pos", rx1179_pos
    $P11 = rx1179_cur."O"("%relational, :op<isge_n>")
    repr_get_attr_int $I11, $P11, rx1179_curclass, "$!pos"
    lt $I11, 0, rx1179_fail3193
    nqp_rxmark rx1179_bstack, rxsubrule1182_pass3202, -1, 0
  rxsubrule1182_pass3202:
    rx1179_cstack = rx1179_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1179_pos, $P11, rx1179_curclass, "$!pos"
    rx1179_cur."!cursor_pass"(rx1179_pos, "infix:sym<>=>", 'backtrack'=>1)
    .return (rx1179_cur)
  rx1179_restart3192:
    repr_get_attr_obj rx1179_cstack, rx1179_cur, rx1179_curclass, "$!cstack"
  rx1179_fail3193:
    unless rx1179_bstack, rx1179_done3191
    pop $I19, rx1179_bstack
    if_null rx1179_cstack, rx1179_cstack_done3196
    unless rx1179_cstack, rx1179_cstack_done3196
    dec $I19
    set $P11, rx1179_cstack[$I19]
  rx1179_cstack_done3196:
    pop rx1179_rep, rx1179_bstack
    pop rx1179_pos, rx1179_bstack
    pop $I19, rx1179_bstack
    lt rx1179_pos, -1, rx1179_done3191
    lt rx1179_pos, 0, rx1179_fail3193
    eq $I19, 0, rx1179_fail3193
    nqp_islist $I20, rx1179_cstack
    unless $I20, rx1179_jump3194
    elements $I18, rx1179_bstack
    le $I18, 0, rx1179_cut3195
    dec $I18
    set $I18, rx1179_bstack[$I18]
  rx1179_cut3195:
    assign rx1179_cstack, $I18
  rx1179_jump3194:
    jump $I19
  rx1179_done3191:
    rx1179_cur."!cursor_fail"()
    .return (rx1179_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<>" :subid("cuid_200_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1334
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1183_tgt
    .local int rx1183_pos
    .local int rx1183_off
    .local int rx1183_eos
    .local int rx1183_rep
    .local pmc rx1183_cur
    .local pmc rx1183_curclass
    .local pmc rx1183_bstack
    .local pmc rx1183_cstack
    (rx1183_cur, rx1183_tgt, rx1183_pos, rx1183_curclass, rx1183_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1183_cur
    length rx1183_eos, rx1183_tgt
    eq $I19, 1, rx1183_restart3205
    gt rx1183_pos, rx1183_eos, rx1183_fail3206
    repr_get_attr_int $I11, self, rx1183_curclass, "$!from"
    ne $I11, -1, rxscan1184_done3212
    goto rxscan1184_scan3211
  rxscan1184_loop3210:
    inc rx1183_pos
    gt rx1183_pos, rx1183_eos, rx1183_fail3206
    repr_bind_attr_int rx1183_cur, rx1183_curclass, "$!from", rx1183_pos
  rxscan1184_scan3211:
    nqp_rxmark rx1183_bstack, rxscan1184_loop3210, rx1183_pos, 0
  rxscan1184_done3212:
    nqp_rxmark rx1183_bstack, rxcap1185_fail3214, rx1183_pos, 0
    add $I11, rx1183_pos, 1
    gt $I11, rx1183_eos, rx1183_fail3206
    substr $S10, rx1183_tgt, rx1183_pos, 1
    ne $S10, ucs4:"<", rx1183_fail3206
    add rx1183_pos, 1
    nqp_rxpeek $I19, rx1183_bstack, rxcap1185_fail3214
    inc $I19
    set $I11, rx1183_bstack[$I19]
    repr_bind_attr_int rx1183_cur, rx1183_curclass, "$!pos", rx1183_pos
    $P11 = rx1183_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1183_pos)
    rx1183_cstack = rx1183_cur."!cursor_capture"($P11, "sym")
    goto rxcap1185_done3213
  rxcap1185_fail3214:
    goto rx1183_fail3206
  rxcap1185_done3213:
    repr_bind_attr_int rx1183_cur, rx1183_curclass, "$!pos", rx1183_pos
    $P11 = rx1183_cur."O"("%relational, :op<islt_n>")
    repr_get_attr_int $I11, $P11, rx1183_curclass, "$!pos"
    lt $I11, 0, rx1183_fail3206
    nqp_rxmark rx1183_bstack, rxsubrule1186_pass3215, -1, 0
  rxsubrule1186_pass3215:
    rx1183_cstack = rx1183_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1183_pos, $P11, rx1183_curclass, "$!pos"
    rx1183_cur."!cursor_pass"(rx1183_pos, "infix:sym<<>", 'backtrack'=>1)
    .return (rx1183_cur)
  rx1183_restart3205:
    repr_get_attr_obj rx1183_cstack, rx1183_cur, rx1183_curclass, "$!cstack"
  rx1183_fail3206:
    unless rx1183_bstack, rx1183_done3204
    pop $I19, rx1183_bstack
    if_null rx1183_cstack, rx1183_cstack_done3209
    unless rx1183_cstack, rx1183_cstack_done3209
    dec $I19
    set $P11, rx1183_cstack[$I19]
  rx1183_cstack_done3209:
    pop rx1183_rep, rx1183_bstack
    pop rx1183_pos, rx1183_bstack
    pop $I19, rx1183_bstack
    lt rx1183_pos, -1, rx1183_done3204
    lt rx1183_pos, 0, rx1183_fail3206
    eq $I19, 0, rx1183_fail3206
    nqp_islist $I20, rx1183_cstack
    unless $I20, rx1183_jump3207
    elements $I18, rx1183_bstack
    le $I18, 0, rx1183_cut3208
    dec $I18
    set $I18, rx1183_bstack[$I18]
  rx1183_cut3208:
    assign rx1183_cstack, $I18
  rx1183_jump3207:
    jump $I19
  rx1183_done3204:
    rx1183_cur."!cursor_fail"()
    .return (rx1183_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>>" :subid("cuid_201_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1335
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1187_tgt
    .local int rx1187_pos
    .local int rx1187_off
    .local int rx1187_eos
    .local int rx1187_rep
    .local pmc rx1187_cur
    .local pmc rx1187_curclass
    .local pmc rx1187_bstack
    .local pmc rx1187_cstack
    (rx1187_cur, rx1187_tgt, rx1187_pos, rx1187_curclass, rx1187_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1187_cur
    length rx1187_eos, rx1187_tgt
    eq $I19, 1, rx1187_restart3218
    gt rx1187_pos, rx1187_eos, rx1187_fail3219
    repr_get_attr_int $I11, self, rx1187_curclass, "$!from"
    ne $I11, -1, rxscan1188_done3225
    goto rxscan1188_scan3224
  rxscan1188_loop3223:
    inc rx1187_pos
    gt rx1187_pos, rx1187_eos, rx1187_fail3219
    repr_bind_attr_int rx1187_cur, rx1187_curclass, "$!from", rx1187_pos
  rxscan1188_scan3224:
    nqp_rxmark rx1187_bstack, rxscan1188_loop3223, rx1187_pos, 0
  rxscan1188_done3225:
    nqp_rxmark rx1187_bstack, rxcap1189_fail3227, rx1187_pos, 0
    add $I11, rx1187_pos, 1
    gt $I11, rx1187_eos, rx1187_fail3219
    substr $S10, rx1187_tgt, rx1187_pos, 1
    ne $S10, ucs4:">", rx1187_fail3219
    add rx1187_pos, 1
    nqp_rxpeek $I19, rx1187_bstack, rxcap1189_fail3227
    inc $I19
    set $I11, rx1187_bstack[$I19]
    repr_bind_attr_int rx1187_cur, rx1187_curclass, "$!pos", rx1187_pos
    $P11 = rx1187_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1187_pos)
    rx1187_cstack = rx1187_cur."!cursor_capture"($P11, "sym")
    goto rxcap1189_done3226
  rxcap1189_fail3227:
    goto rx1187_fail3219
  rxcap1189_done3226:
    repr_bind_attr_int rx1187_cur, rx1187_curclass, "$!pos", rx1187_pos
    $P11 = rx1187_cur."O"("%relational, :op<isgt_n>")
    repr_get_attr_int $I11, $P11, rx1187_curclass, "$!pos"
    lt $I11, 0, rx1187_fail3219
    nqp_rxmark rx1187_bstack, rxsubrule1190_pass3228, -1, 0
  rxsubrule1190_pass3228:
    rx1187_cstack = rx1187_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1187_pos, $P11, rx1187_curclass, "$!pos"
    rx1187_cur."!cursor_pass"(rx1187_pos, "infix:sym<>>", 'backtrack'=>1)
    .return (rx1187_cur)
  rx1187_restart3218:
    repr_get_attr_obj rx1187_cstack, rx1187_cur, rx1187_curclass, "$!cstack"
  rx1187_fail3219:
    unless rx1187_bstack, rx1187_done3217
    pop $I19, rx1187_bstack
    if_null rx1187_cstack, rx1187_cstack_done3222
    unless rx1187_cstack, rx1187_cstack_done3222
    dec $I19
    set $P11, rx1187_cstack[$I19]
  rx1187_cstack_done3222:
    pop rx1187_rep, rx1187_bstack
    pop rx1187_pos, rx1187_bstack
    pop $I19, rx1187_bstack
    lt rx1187_pos, -1, rx1187_done3217
    lt rx1187_pos, 0, rx1187_fail3219
    eq $I19, 0, rx1187_fail3219
    nqp_islist $I20, rx1187_cstack
    unless $I20, rx1187_jump3220
    elements $I18, rx1187_bstack
    le $I18, 0, rx1187_cut3221
    dec $I18
    set $I18, rx1187_bstack[$I18]
  rx1187_cut3221:
    assign rx1187_cstack, $I18
  rx1187_jump3220:
    jump $I19
  rx1187_done3217:
    rx1187_cur."!cursor_fail"()
    .return (rx1187_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<eq>" :subid("cuid_202_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1336
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1191_tgt
    .local int rx1191_pos
    .local int rx1191_off
    .local int rx1191_eos
    .local int rx1191_rep
    .local pmc rx1191_cur
    .local pmc rx1191_curclass
    .local pmc rx1191_bstack
    .local pmc rx1191_cstack
    (rx1191_cur, rx1191_tgt, rx1191_pos, rx1191_curclass, rx1191_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1191_cur
    length rx1191_eos, rx1191_tgt
    eq $I19, 1, rx1191_restart3231
    gt rx1191_pos, rx1191_eos, rx1191_fail3232
    repr_get_attr_int $I11, self, rx1191_curclass, "$!from"
    ne $I11, -1, rxscan1192_done3238
    goto rxscan1192_scan3237
  rxscan1192_loop3236:
    inc rx1191_pos
    gt rx1191_pos, rx1191_eos, rx1191_fail3232
    repr_bind_attr_int rx1191_cur, rx1191_curclass, "$!from", rx1191_pos
  rxscan1192_scan3237:
    nqp_rxmark rx1191_bstack, rxscan1192_loop3236, rx1191_pos, 0
  rxscan1192_done3238:
    nqp_rxmark rx1191_bstack, rxcap1193_fail3240, rx1191_pos, 0
    add $I11, rx1191_pos, 2
    gt $I11, rx1191_eos, rx1191_fail3232
    substr $S10, rx1191_tgt, rx1191_pos, 2
    ne $S10, ucs4:"eq", rx1191_fail3232
    add rx1191_pos, 2
    nqp_rxpeek $I19, rx1191_bstack, rxcap1193_fail3240
    inc $I19
    set $I11, rx1191_bstack[$I19]
    repr_bind_attr_int rx1191_cur, rx1191_curclass, "$!pos", rx1191_pos
    $P11 = rx1191_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1191_pos)
    rx1191_cstack = rx1191_cur."!cursor_capture"($P11, "sym")
    goto rxcap1193_done3239
  rxcap1193_fail3240:
    goto rx1191_fail3232
  rxcap1193_done3239:
    repr_bind_attr_int rx1191_cur, rx1191_curclass, "$!pos", rx1191_pos
    $P11 = rx1191_cur."O"("%relational, :op<iseq_s>")
    repr_get_attr_int $I11, $P11, rx1191_curclass, "$!pos"
    lt $I11, 0, rx1191_fail3232
    nqp_rxmark rx1191_bstack, rxsubrule1194_pass3241, -1, 0
  rxsubrule1194_pass3241:
    rx1191_cstack = rx1191_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1191_pos, $P11, rx1191_curclass, "$!pos"
    rx1191_cur."!cursor_pass"(rx1191_pos, "infix:sym<eq>", 'backtrack'=>1)
    .return (rx1191_cur)
  rx1191_restart3231:
    repr_get_attr_obj rx1191_cstack, rx1191_cur, rx1191_curclass, "$!cstack"
  rx1191_fail3232:
    unless rx1191_bstack, rx1191_done3230
    pop $I19, rx1191_bstack
    if_null rx1191_cstack, rx1191_cstack_done3235
    unless rx1191_cstack, rx1191_cstack_done3235
    dec $I19
    set $P11, rx1191_cstack[$I19]
  rx1191_cstack_done3235:
    pop rx1191_rep, rx1191_bstack
    pop rx1191_pos, rx1191_bstack
    pop $I19, rx1191_bstack
    lt rx1191_pos, -1, rx1191_done3230
    lt rx1191_pos, 0, rx1191_fail3232
    eq $I19, 0, rx1191_fail3232
    nqp_islist $I20, rx1191_cstack
    unless $I20, rx1191_jump3233
    elements $I18, rx1191_bstack
    le $I18, 0, rx1191_cut3234
    dec $I18
    set $I18, rx1191_bstack[$I18]
  rx1191_cut3234:
    assign rx1191_cstack, $I18
  rx1191_jump3233:
    jump $I19
  rx1191_done3230:
    rx1191_cur."!cursor_fail"()
    .return (rx1191_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ne>" :subid("cuid_203_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1337
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1195_tgt
    .local int rx1195_pos
    .local int rx1195_off
    .local int rx1195_eos
    .local int rx1195_rep
    .local pmc rx1195_cur
    .local pmc rx1195_curclass
    .local pmc rx1195_bstack
    .local pmc rx1195_cstack
    (rx1195_cur, rx1195_tgt, rx1195_pos, rx1195_curclass, rx1195_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1195_cur
    length rx1195_eos, rx1195_tgt
    eq $I19, 1, rx1195_restart3244
    gt rx1195_pos, rx1195_eos, rx1195_fail3245
    repr_get_attr_int $I11, self, rx1195_curclass, "$!from"
    ne $I11, -1, rxscan1196_done3251
    goto rxscan1196_scan3250
  rxscan1196_loop3249:
    inc rx1195_pos
    gt rx1195_pos, rx1195_eos, rx1195_fail3245
    repr_bind_attr_int rx1195_cur, rx1195_curclass, "$!from", rx1195_pos
  rxscan1196_scan3250:
    nqp_rxmark rx1195_bstack, rxscan1196_loop3249, rx1195_pos, 0
  rxscan1196_done3251:
    nqp_rxmark rx1195_bstack, rxcap1197_fail3253, rx1195_pos, 0
    add $I11, rx1195_pos, 2
    gt $I11, rx1195_eos, rx1195_fail3245
    substr $S10, rx1195_tgt, rx1195_pos, 2
    ne $S10, ucs4:"ne", rx1195_fail3245
    add rx1195_pos, 2
    nqp_rxpeek $I19, rx1195_bstack, rxcap1197_fail3253
    inc $I19
    set $I11, rx1195_bstack[$I19]
    repr_bind_attr_int rx1195_cur, rx1195_curclass, "$!pos", rx1195_pos
    $P11 = rx1195_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1195_pos)
    rx1195_cstack = rx1195_cur."!cursor_capture"($P11, "sym")
    goto rxcap1197_done3252
  rxcap1197_fail3253:
    goto rx1195_fail3245
  rxcap1197_done3252:
    repr_bind_attr_int rx1195_cur, rx1195_curclass, "$!pos", rx1195_pos
    $P11 = rx1195_cur."O"("%relational, :op<isne_s>")
    repr_get_attr_int $I11, $P11, rx1195_curclass, "$!pos"
    lt $I11, 0, rx1195_fail3245
    nqp_rxmark rx1195_bstack, rxsubrule1198_pass3254, -1, 0
  rxsubrule1198_pass3254:
    rx1195_cstack = rx1195_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1195_pos, $P11, rx1195_curclass, "$!pos"
    rx1195_cur."!cursor_pass"(rx1195_pos, "infix:sym<ne>", 'backtrack'=>1)
    .return (rx1195_cur)
  rx1195_restart3244:
    repr_get_attr_obj rx1195_cstack, rx1195_cur, rx1195_curclass, "$!cstack"
  rx1195_fail3245:
    unless rx1195_bstack, rx1195_done3243
    pop $I19, rx1195_bstack
    if_null rx1195_cstack, rx1195_cstack_done3248
    unless rx1195_cstack, rx1195_cstack_done3248
    dec $I19
    set $P11, rx1195_cstack[$I19]
  rx1195_cstack_done3248:
    pop rx1195_rep, rx1195_bstack
    pop rx1195_pos, rx1195_bstack
    pop $I19, rx1195_bstack
    lt rx1195_pos, -1, rx1195_done3243
    lt rx1195_pos, 0, rx1195_fail3245
    eq $I19, 0, rx1195_fail3245
    nqp_islist $I20, rx1195_cstack
    unless $I20, rx1195_jump3246
    elements $I18, rx1195_bstack
    le $I18, 0, rx1195_cut3247
    dec $I18
    set $I18, rx1195_bstack[$I18]
  rx1195_cut3247:
    assign rx1195_cstack, $I18
  rx1195_jump3246:
    jump $I19
  rx1195_done3243:
    rx1195_cur."!cursor_fail"()
    .return (rx1195_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<le>" :subid("cuid_204_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1338
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1199_tgt
    .local int rx1199_pos
    .local int rx1199_off
    .local int rx1199_eos
    .local int rx1199_rep
    .local pmc rx1199_cur
    .local pmc rx1199_curclass
    .local pmc rx1199_bstack
    .local pmc rx1199_cstack
    (rx1199_cur, rx1199_tgt, rx1199_pos, rx1199_curclass, rx1199_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1199_cur
    length rx1199_eos, rx1199_tgt
    eq $I19, 1, rx1199_restart3257
    gt rx1199_pos, rx1199_eos, rx1199_fail3258
    repr_get_attr_int $I11, self, rx1199_curclass, "$!from"
    ne $I11, -1, rxscan1200_done3264
    goto rxscan1200_scan3263
  rxscan1200_loop3262:
    inc rx1199_pos
    gt rx1199_pos, rx1199_eos, rx1199_fail3258
    repr_bind_attr_int rx1199_cur, rx1199_curclass, "$!from", rx1199_pos
  rxscan1200_scan3263:
    nqp_rxmark rx1199_bstack, rxscan1200_loop3262, rx1199_pos, 0
  rxscan1200_done3264:
    nqp_rxmark rx1199_bstack, rxcap1201_fail3266, rx1199_pos, 0
    add $I11, rx1199_pos, 2
    gt $I11, rx1199_eos, rx1199_fail3258
    substr $S10, rx1199_tgt, rx1199_pos, 2
    ne $S10, ucs4:"le", rx1199_fail3258
    add rx1199_pos, 2
    nqp_rxpeek $I19, rx1199_bstack, rxcap1201_fail3266
    inc $I19
    set $I11, rx1199_bstack[$I19]
    repr_bind_attr_int rx1199_cur, rx1199_curclass, "$!pos", rx1199_pos
    $P11 = rx1199_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1199_pos)
    rx1199_cstack = rx1199_cur."!cursor_capture"($P11, "sym")
    goto rxcap1201_done3265
  rxcap1201_fail3266:
    goto rx1199_fail3258
  rxcap1201_done3265:
    repr_bind_attr_int rx1199_cur, rx1199_curclass, "$!pos", rx1199_pos
    $P11 = rx1199_cur."O"("%relational, :op<isle_s>")
    repr_get_attr_int $I11, $P11, rx1199_curclass, "$!pos"
    lt $I11, 0, rx1199_fail3258
    nqp_rxmark rx1199_bstack, rxsubrule1202_pass3267, -1, 0
  rxsubrule1202_pass3267:
    rx1199_cstack = rx1199_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1199_pos, $P11, rx1199_curclass, "$!pos"
    rx1199_cur."!cursor_pass"(rx1199_pos, "infix:sym<le>", 'backtrack'=>1)
    .return (rx1199_cur)
  rx1199_restart3257:
    repr_get_attr_obj rx1199_cstack, rx1199_cur, rx1199_curclass, "$!cstack"
  rx1199_fail3258:
    unless rx1199_bstack, rx1199_done3256
    pop $I19, rx1199_bstack
    if_null rx1199_cstack, rx1199_cstack_done3261
    unless rx1199_cstack, rx1199_cstack_done3261
    dec $I19
    set $P11, rx1199_cstack[$I19]
  rx1199_cstack_done3261:
    pop rx1199_rep, rx1199_bstack
    pop rx1199_pos, rx1199_bstack
    pop $I19, rx1199_bstack
    lt rx1199_pos, -1, rx1199_done3256
    lt rx1199_pos, 0, rx1199_fail3258
    eq $I19, 0, rx1199_fail3258
    nqp_islist $I20, rx1199_cstack
    unless $I20, rx1199_jump3259
    elements $I18, rx1199_bstack
    le $I18, 0, rx1199_cut3260
    dec $I18
    set $I18, rx1199_bstack[$I18]
  rx1199_cut3260:
    assign rx1199_cstack, $I18
  rx1199_jump3259:
    jump $I19
  rx1199_done3256:
    rx1199_cur."!cursor_fail"()
    .return (rx1199_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ge>" :subid("cuid_205_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1339
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1203_tgt
    .local int rx1203_pos
    .local int rx1203_off
    .local int rx1203_eos
    .local int rx1203_rep
    .local pmc rx1203_cur
    .local pmc rx1203_curclass
    .local pmc rx1203_bstack
    .local pmc rx1203_cstack
    (rx1203_cur, rx1203_tgt, rx1203_pos, rx1203_curclass, rx1203_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1203_cur
    length rx1203_eos, rx1203_tgt
    eq $I19, 1, rx1203_restart3270
    gt rx1203_pos, rx1203_eos, rx1203_fail3271
    repr_get_attr_int $I11, self, rx1203_curclass, "$!from"
    ne $I11, -1, rxscan1204_done3277
    goto rxscan1204_scan3276
  rxscan1204_loop3275:
    inc rx1203_pos
    gt rx1203_pos, rx1203_eos, rx1203_fail3271
    repr_bind_attr_int rx1203_cur, rx1203_curclass, "$!from", rx1203_pos
  rxscan1204_scan3276:
    nqp_rxmark rx1203_bstack, rxscan1204_loop3275, rx1203_pos, 0
  rxscan1204_done3277:
    nqp_rxmark rx1203_bstack, rxcap1205_fail3279, rx1203_pos, 0
    add $I11, rx1203_pos, 2
    gt $I11, rx1203_eos, rx1203_fail3271
    substr $S10, rx1203_tgt, rx1203_pos, 2
    ne $S10, ucs4:"ge", rx1203_fail3271
    add rx1203_pos, 2
    nqp_rxpeek $I19, rx1203_bstack, rxcap1205_fail3279
    inc $I19
    set $I11, rx1203_bstack[$I19]
    repr_bind_attr_int rx1203_cur, rx1203_curclass, "$!pos", rx1203_pos
    $P11 = rx1203_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1203_pos)
    rx1203_cstack = rx1203_cur."!cursor_capture"($P11, "sym")
    goto rxcap1205_done3278
  rxcap1205_fail3279:
    goto rx1203_fail3271
  rxcap1205_done3278:
    repr_bind_attr_int rx1203_cur, rx1203_curclass, "$!pos", rx1203_pos
    $P11 = rx1203_cur."O"("%relational, :op<isge_s>")
    repr_get_attr_int $I11, $P11, rx1203_curclass, "$!pos"
    lt $I11, 0, rx1203_fail3271
    nqp_rxmark rx1203_bstack, rxsubrule1206_pass3280, -1, 0
  rxsubrule1206_pass3280:
    rx1203_cstack = rx1203_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1203_pos, $P11, rx1203_curclass, "$!pos"
    rx1203_cur."!cursor_pass"(rx1203_pos, "infix:sym<ge>", 'backtrack'=>1)
    .return (rx1203_cur)
  rx1203_restart3270:
    repr_get_attr_obj rx1203_cstack, rx1203_cur, rx1203_curclass, "$!cstack"
  rx1203_fail3271:
    unless rx1203_bstack, rx1203_done3269
    pop $I19, rx1203_bstack
    if_null rx1203_cstack, rx1203_cstack_done3274
    unless rx1203_cstack, rx1203_cstack_done3274
    dec $I19
    set $P11, rx1203_cstack[$I19]
  rx1203_cstack_done3274:
    pop rx1203_rep, rx1203_bstack
    pop rx1203_pos, rx1203_bstack
    pop $I19, rx1203_bstack
    lt rx1203_pos, -1, rx1203_done3269
    lt rx1203_pos, 0, rx1203_fail3271
    eq $I19, 0, rx1203_fail3271
    nqp_islist $I20, rx1203_cstack
    unless $I20, rx1203_jump3272
    elements $I18, rx1203_bstack
    le $I18, 0, rx1203_cut3273
    dec $I18
    set $I18, rx1203_bstack[$I18]
  rx1203_cut3273:
    assign rx1203_cstack, $I18
  rx1203_jump3272:
    jump $I19
  rx1203_done3269:
    rx1203_cur."!cursor_fail"()
    .return (rx1203_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<lt>" :subid("cuid_206_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1340
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1207_tgt
    .local int rx1207_pos
    .local int rx1207_off
    .local int rx1207_eos
    .local int rx1207_rep
    .local pmc rx1207_cur
    .local pmc rx1207_curclass
    .local pmc rx1207_bstack
    .local pmc rx1207_cstack
    (rx1207_cur, rx1207_tgt, rx1207_pos, rx1207_curclass, rx1207_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1207_cur
    length rx1207_eos, rx1207_tgt
    eq $I19, 1, rx1207_restart3283
    gt rx1207_pos, rx1207_eos, rx1207_fail3284
    repr_get_attr_int $I11, self, rx1207_curclass, "$!from"
    ne $I11, -1, rxscan1208_done3290
    goto rxscan1208_scan3289
  rxscan1208_loop3288:
    inc rx1207_pos
    gt rx1207_pos, rx1207_eos, rx1207_fail3284
    repr_bind_attr_int rx1207_cur, rx1207_curclass, "$!from", rx1207_pos
  rxscan1208_scan3289:
    nqp_rxmark rx1207_bstack, rxscan1208_loop3288, rx1207_pos, 0
  rxscan1208_done3290:
    nqp_rxmark rx1207_bstack, rxcap1209_fail3292, rx1207_pos, 0
    add $I11, rx1207_pos, 2
    gt $I11, rx1207_eos, rx1207_fail3284
    substr $S10, rx1207_tgt, rx1207_pos, 2
    ne $S10, ucs4:"lt", rx1207_fail3284
    add rx1207_pos, 2
    nqp_rxpeek $I19, rx1207_bstack, rxcap1209_fail3292
    inc $I19
    set $I11, rx1207_bstack[$I19]
    repr_bind_attr_int rx1207_cur, rx1207_curclass, "$!pos", rx1207_pos
    $P11 = rx1207_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1207_pos)
    rx1207_cstack = rx1207_cur."!cursor_capture"($P11, "sym")
    goto rxcap1209_done3291
  rxcap1209_fail3292:
    goto rx1207_fail3284
  rxcap1209_done3291:
    repr_bind_attr_int rx1207_cur, rx1207_curclass, "$!pos", rx1207_pos
    $P11 = rx1207_cur."O"("%relational, :op<islt_s>")
    repr_get_attr_int $I11, $P11, rx1207_curclass, "$!pos"
    lt $I11, 0, rx1207_fail3284
    nqp_rxmark rx1207_bstack, rxsubrule1210_pass3293, -1, 0
  rxsubrule1210_pass3293:
    rx1207_cstack = rx1207_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1207_pos, $P11, rx1207_curclass, "$!pos"
    rx1207_cur."!cursor_pass"(rx1207_pos, "infix:sym<lt>", 'backtrack'=>1)
    .return (rx1207_cur)
  rx1207_restart3283:
    repr_get_attr_obj rx1207_cstack, rx1207_cur, rx1207_curclass, "$!cstack"
  rx1207_fail3284:
    unless rx1207_bstack, rx1207_done3282
    pop $I19, rx1207_bstack
    if_null rx1207_cstack, rx1207_cstack_done3287
    unless rx1207_cstack, rx1207_cstack_done3287
    dec $I19
    set $P11, rx1207_cstack[$I19]
  rx1207_cstack_done3287:
    pop rx1207_rep, rx1207_bstack
    pop rx1207_pos, rx1207_bstack
    pop $I19, rx1207_bstack
    lt rx1207_pos, -1, rx1207_done3282
    lt rx1207_pos, 0, rx1207_fail3284
    eq $I19, 0, rx1207_fail3284
    nqp_islist $I20, rx1207_cstack
    unless $I20, rx1207_jump3285
    elements $I18, rx1207_bstack
    le $I18, 0, rx1207_cut3286
    dec $I18
    set $I18, rx1207_bstack[$I18]
  rx1207_cut3286:
    assign rx1207_cstack, $I18
  rx1207_jump3285:
    jump $I19
  rx1207_done3282:
    rx1207_cur."!cursor_fail"()
    .return (rx1207_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<gt>" :subid("cuid_207_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1341
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1211_tgt
    .local int rx1211_pos
    .local int rx1211_off
    .local int rx1211_eos
    .local int rx1211_rep
    .local pmc rx1211_cur
    .local pmc rx1211_curclass
    .local pmc rx1211_bstack
    .local pmc rx1211_cstack
    (rx1211_cur, rx1211_tgt, rx1211_pos, rx1211_curclass, rx1211_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1211_cur
    length rx1211_eos, rx1211_tgt
    eq $I19, 1, rx1211_restart3296
    gt rx1211_pos, rx1211_eos, rx1211_fail3297
    repr_get_attr_int $I11, self, rx1211_curclass, "$!from"
    ne $I11, -1, rxscan1212_done3303
    goto rxscan1212_scan3302
  rxscan1212_loop3301:
    inc rx1211_pos
    gt rx1211_pos, rx1211_eos, rx1211_fail3297
    repr_bind_attr_int rx1211_cur, rx1211_curclass, "$!from", rx1211_pos
  rxscan1212_scan3302:
    nqp_rxmark rx1211_bstack, rxscan1212_loop3301, rx1211_pos, 0
  rxscan1212_done3303:
    nqp_rxmark rx1211_bstack, rxcap1213_fail3305, rx1211_pos, 0
    add $I11, rx1211_pos, 2
    gt $I11, rx1211_eos, rx1211_fail3297
    substr $S10, rx1211_tgt, rx1211_pos, 2
    ne $S10, ucs4:"gt", rx1211_fail3297
    add rx1211_pos, 2
    nqp_rxpeek $I19, rx1211_bstack, rxcap1213_fail3305
    inc $I19
    set $I11, rx1211_bstack[$I19]
    repr_bind_attr_int rx1211_cur, rx1211_curclass, "$!pos", rx1211_pos
    $P11 = rx1211_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1211_pos)
    rx1211_cstack = rx1211_cur."!cursor_capture"($P11, "sym")
    goto rxcap1213_done3304
  rxcap1213_fail3305:
    goto rx1211_fail3297
  rxcap1213_done3304:
    repr_bind_attr_int rx1211_cur, rx1211_curclass, "$!pos", rx1211_pos
    $P11 = rx1211_cur."O"("%relational, :op<isgt_s>")
    repr_get_attr_int $I11, $P11, rx1211_curclass, "$!pos"
    lt $I11, 0, rx1211_fail3297
    nqp_rxmark rx1211_bstack, rxsubrule1214_pass3306, -1, 0
  rxsubrule1214_pass3306:
    rx1211_cstack = rx1211_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1211_pos, $P11, rx1211_curclass, "$!pos"
    rx1211_cur."!cursor_pass"(rx1211_pos, "infix:sym<gt>", 'backtrack'=>1)
    .return (rx1211_cur)
  rx1211_restart3296:
    repr_get_attr_obj rx1211_cstack, rx1211_cur, rx1211_curclass, "$!cstack"
  rx1211_fail3297:
    unless rx1211_bstack, rx1211_done3295
    pop $I19, rx1211_bstack
    if_null rx1211_cstack, rx1211_cstack_done3300
    unless rx1211_cstack, rx1211_cstack_done3300
    dec $I19
    set $P11, rx1211_cstack[$I19]
  rx1211_cstack_done3300:
    pop rx1211_rep, rx1211_bstack
    pop rx1211_pos, rx1211_bstack
    pop $I19, rx1211_bstack
    lt rx1211_pos, -1, rx1211_done3295
    lt rx1211_pos, 0, rx1211_fail3297
    eq $I19, 0, rx1211_fail3297
    nqp_islist $I20, rx1211_cstack
    unless $I20, rx1211_jump3298
    elements $I18, rx1211_bstack
    le $I18, 0, rx1211_cut3299
    dec $I18
    set $I18, rx1211_bstack[$I18]
  rx1211_cut3299:
    assign rx1211_cstack, $I18
  rx1211_jump3298:
    jump $I19
  rx1211_done3295:
    rx1211_cur."!cursor_fail"()
    .return (rx1211_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=:=>" :subid("cuid_208_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1342
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1215_tgt
    .local int rx1215_pos
    .local int rx1215_off
    .local int rx1215_eos
    .local int rx1215_rep
    .local pmc rx1215_cur
    .local pmc rx1215_curclass
    .local pmc rx1215_bstack
    .local pmc rx1215_cstack
    (rx1215_cur, rx1215_tgt, rx1215_pos, rx1215_curclass, rx1215_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1215_cur
    length rx1215_eos, rx1215_tgt
    eq $I19, 1, rx1215_restart3309
    gt rx1215_pos, rx1215_eos, rx1215_fail3310
    repr_get_attr_int $I11, self, rx1215_curclass, "$!from"
    ne $I11, -1, rxscan1216_done3316
    goto rxscan1216_scan3315
  rxscan1216_loop3314:
    inc rx1215_pos
    gt rx1215_pos, rx1215_eos, rx1215_fail3310
    repr_bind_attr_int rx1215_cur, rx1215_curclass, "$!from", rx1215_pos
  rxscan1216_scan3315:
    nqp_rxmark rx1215_bstack, rxscan1216_loop3314, rx1215_pos, 0
  rxscan1216_done3316:
    nqp_rxmark rx1215_bstack, rxcap1217_fail3318, rx1215_pos, 0
    add $I11, rx1215_pos, 3
    gt $I11, rx1215_eos, rx1215_fail3310
    substr $S10, rx1215_tgt, rx1215_pos, 3
    ne $S10, ucs4:"=:=", rx1215_fail3310
    add rx1215_pos, 3
    nqp_rxpeek $I19, rx1215_bstack, rxcap1217_fail3318
    inc $I19
    set $I11, rx1215_bstack[$I19]
    repr_bind_attr_int rx1215_cur, rx1215_curclass, "$!pos", rx1215_pos
    $P11 = rx1215_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1215_pos)
    rx1215_cstack = rx1215_cur."!cursor_capture"($P11, "sym")
    goto rxcap1217_done3317
  rxcap1217_fail3318:
    goto rx1215_fail3310
  rxcap1217_done3317:
    repr_bind_attr_int rx1215_cur, rx1215_curclass, "$!pos", rx1215_pos
    $P11 = rx1215_cur."O"("%relational, :op<eqaddr>")
    repr_get_attr_int $I11, $P11, rx1215_curclass, "$!pos"
    lt $I11, 0, rx1215_fail3310
    nqp_rxmark rx1215_bstack, rxsubrule1218_pass3319, -1, 0
  rxsubrule1218_pass3319:
    rx1215_cstack = rx1215_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1215_pos, $P11, rx1215_curclass, "$!pos"
    rx1215_cur."!cursor_pass"(rx1215_pos, "infix:sym<=:=>", 'backtrack'=>1)
    .return (rx1215_cur)
  rx1215_restart3309:
    repr_get_attr_obj rx1215_cstack, rx1215_cur, rx1215_curclass, "$!cstack"
  rx1215_fail3310:
    unless rx1215_bstack, rx1215_done3308
    pop $I19, rx1215_bstack
    if_null rx1215_cstack, rx1215_cstack_done3313
    unless rx1215_cstack, rx1215_cstack_done3313
    dec $I19
    set $P11, rx1215_cstack[$I19]
  rx1215_cstack_done3313:
    pop rx1215_rep, rx1215_bstack
    pop rx1215_pos, rx1215_bstack
    pop $I19, rx1215_bstack
    lt rx1215_pos, -1, rx1215_done3308
    lt rx1215_pos, 0, rx1215_fail3310
    eq $I19, 0, rx1215_fail3310
    nqp_islist $I20, rx1215_cstack
    unless $I20, rx1215_jump3311
    elements $I18, rx1215_bstack
    le $I18, 0, rx1215_cut3312
    dec $I18
    set $I18, rx1215_bstack[$I18]
  rx1215_cut3312:
    assign rx1215_cstack, $I18
  rx1215_jump3311:
    jump $I19
  rx1215_done3308:
    rx1215_cur."!cursor_fail"()
    .return (rx1215_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_209_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1343
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1219_tgt
    .local int rx1219_pos
    .local int rx1219_off
    .local int rx1219_eos
    .local int rx1219_rep
    .local pmc rx1219_cur
    .local pmc rx1219_curclass
    .local pmc rx1219_bstack
    .local pmc rx1219_cstack
    (rx1219_cur, rx1219_tgt, rx1219_pos, rx1219_curclass, rx1219_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1219_cur
    length rx1219_eos, rx1219_tgt
    eq $I19, 1, rx1219_restart3322
    gt rx1219_pos, rx1219_eos, rx1219_fail3323
    repr_get_attr_int $I11, self, rx1219_curclass, "$!from"
    ne $I11, -1, rxscan1220_done3329
    goto rxscan1220_scan3328
  rxscan1220_loop3327:
    inc rx1219_pos
    gt rx1219_pos, rx1219_eos, rx1219_fail3323
    repr_bind_attr_int rx1219_cur, rx1219_curclass, "$!from", rx1219_pos
  rxscan1220_scan3328:
    nqp_rxmark rx1219_bstack, rxscan1220_loop3327, rx1219_pos, 0
  rxscan1220_done3329:
    nqp_rxmark rx1219_bstack, rxcap1221_fail3331, rx1219_pos, 0
    add $I11, rx1219_pos, 2
    gt $I11, rx1219_eos, rx1219_fail3323
    substr $S10, rx1219_tgt, rx1219_pos, 2
    ne $S10, ucs4:"~~", rx1219_fail3323
    add rx1219_pos, 2
    nqp_rxpeek $I19, rx1219_bstack, rxcap1221_fail3331
    inc $I19
    set $I11, rx1219_bstack[$I19]
    repr_bind_attr_int rx1219_cur, rx1219_curclass, "$!pos", rx1219_pos
    $P11 = rx1219_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1219_pos)
    rx1219_cstack = rx1219_cur."!cursor_capture"($P11, "sym")
    goto rxcap1221_done3330
  rxcap1221_fail3331:
    goto rx1219_fail3323
  rxcap1221_done3330:
    repr_bind_attr_int rx1219_cur, rx1219_curclass, "$!pos", rx1219_pos
    $P11 = rx1219_cur."O"("%relational, :reducecheck<smartmatch>")
    repr_get_attr_int $I11, $P11, rx1219_curclass, "$!pos"
    lt $I11, 0, rx1219_fail3323
    nqp_rxmark rx1219_bstack, rxsubrule1222_pass3332, -1, 0
  rxsubrule1222_pass3332:
    rx1219_cstack = rx1219_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1219_pos, $P11, rx1219_curclass, "$!pos"
    rx1219_cur."!cursor_pass"(rx1219_pos, "infix:sym<~~>", 'backtrack'=>1)
    .return (rx1219_cur)
  rx1219_restart3322:
    repr_get_attr_obj rx1219_cstack, rx1219_cur, rx1219_curclass, "$!cstack"
  rx1219_fail3323:
    unless rx1219_bstack, rx1219_done3321
    pop $I19, rx1219_bstack
    if_null rx1219_cstack, rx1219_cstack_done3326
    unless rx1219_cstack, rx1219_cstack_done3326
    dec $I19
    set $P11, rx1219_cstack[$I19]
  rx1219_cstack_done3326:
    pop rx1219_rep, rx1219_bstack
    pop rx1219_pos, rx1219_bstack
    pop $I19, rx1219_bstack
    lt rx1219_pos, -1, rx1219_done3321
    lt rx1219_pos, 0, rx1219_fail3323
    eq $I19, 0, rx1219_fail3323
    nqp_islist $I20, rx1219_cstack
    unless $I20, rx1219_jump3324
    elements $I18, rx1219_bstack
    le $I18, 0, rx1219_cut3325
    dec $I18
    set $I18, rx1219_bstack[$I18]
  rx1219_cut3325:
    assign rx1219_cstack, $I18
  rx1219_jump3324:
    jump $I19
  rx1219_done3321:
    rx1219_cur."!cursor_fail"()
    .return (rx1219_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<&&>" :subid("cuid_210_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1345
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1223_tgt
    .local int rx1223_pos
    .local int rx1223_off
    .local int rx1223_eos
    .local int rx1223_rep
    .local pmc rx1223_cur
    .local pmc rx1223_curclass
    .local pmc rx1223_bstack
    .local pmc rx1223_cstack
    (rx1223_cur, rx1223_tgt, rx1223_pos, rx1223_curclass, rx1223_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1223_cur
    length rx1223_eos, rx1223_tgt
    eq $I19, 1, rx1223_restart3335
    gt rx1223_pos, rx1223_eos, rx1223_fail3336
    repr_get_attr_int $I11, self, rx1223_curclass, "$!from"
    ne $I11, -1, rxscan1224_done3342
    goto rxscan1224_scan3341
  rxscan1224_loop3340:
    inc rx1223_pos
    gt rx1223_pos, rx1223_eos, rx1223_fail3336
    repr_bind_attr_int rx1223_cur, rx1223_curclass, "$!from", rx1223_pos
  rxscan1224_scan3341:
    nqp_rxmark rx1223_bstack, rxscan1224_loop3340, rx1223_pos, 0
  rxscan1224_done3342:
    nqp_rxmark rx1223_bstack, rxcap1225_fail3344, rx1223_pos, 0
    add $I11, rx1223_pos, 2
    gt $I11, rx1223_eos, rx1223_fail3336
    substr $S10, rx1223_tgt, rx1223_pos, 2
    ne $S10, ucs4:"&&", rx1223_fail3336
    add rx1223_pos, 2
    nqp_rxpeek $I19, rx1223_bstack, rxcap1225_fail3344
    inc $I19
    set $I11, rx1223_bstack[$I19]
    repr_bind_attr_int rx1223_cur, rx1223_curclass, "$!pos", rx1223_pos
    $P11 = rx1223_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1223_pos)
    rx1223_cstack = rx1223_cur."!cursor_capture"($P11, "sym")
    goto rxcap1225_done3343
  rxcap1225_fail3344:
    goto rx1223_fail3336
  rxcap1225_done3343:
    repr_bind_attr_int rx1223_cur, rx1223_curclass, "$!pos", rx1223_pos
    $P11 = rx1223_cur."O"("%tight_and, :op<if>")
    repr_get_attr_int $I11, $P11, rx1223_curclass, "$!pos"
    lt $I11, 0, rx1223_fail3336
    nqp_rxmark rx1223_bstack, rxsubrule1226_pass3345, -1, 0
  rxsubrule1226_pass3345:
    rx1223_cstack = rx1223_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1223_pos, $P11, rx1223_curclass, "$!pos"
    rx1223_cur."!cursor_pass"(rx1223_pos, "infix:sym<&&>", 'backtrack'=>1)
    .return (rx1223_cur)
  rx1223_restart3335:
    repr_get_attr_obj rx1223_cstack, rx1223_cur, rx1223_curclass, "$!cstack"
  rx1223_fail3336:
    unless rx1223_bstack, rx1223_done3334
    pop $I19, rx1223_bstack
    if_null rx1223_cstack, rx1223_cstack_done3339
    unless rx1223_cstack, rx1223_cstack_done3339
    dec $I19
    set $P11, rx1223_cstack[$I19]
  rx1223_cstack_done3339:
    pop rx1223_rep, rx1223_bstack
    pop rx1223_pos, rx1223_bstack
    pop $I19, rx1223_bstack
    lt rx1223_pos, -1, rx1223_done3334
    lt rx1223_pos, 0, rx1223_fail3336
    eq $I19, 0, rx1223_fail3336
    nqp_islist $I20, rx1223_cstack
    unless $I20, rx1223_jump3337
    elements $I18, rx1223_bstack
    le $I18, 0, rx1223_cut3338
    dec $I18
    set $I18, rx1223_bstack[$I18]
  rx1223_cut3338:
    assign rx1223_cstack, $I18
  rx1223_jump3337:
    jump $I19
  rx1223_done3334:
    rx1223_cur."!cursor_fail"()
    .return (rx1223_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<||>" :subid("cuid_211_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1347
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1227_tgt
    .local int rx1227_pos
    .local int rx1227_off
    .local int rx1227_eos
    .local int rx1227_rep
    .local pmc rx1227_cur
    .local pmc rx1227_curclass
    .local pmc rx1227_bstack
    .local pmc rx1227_cstack
    (rx1227_cur, rx1227_tgt, rx1227_pos, rx1227_curclass, rx1227_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1227_cur
    length rx1227_eos, rx1227_tgt
    eq $I19, 1, rx1227_restart3348
    gt rx1227_pos, rx1227_eos, rx1227_fail3349
    repr_get_attr_int $I11, self, rx1227_curclass, "$!from"
    ne $I11, -1, rxscan1228_done3355
    goto rxscan1228_scan3354
  rxscan1228_loop3353:
    inc rx1227_pos
    gt rx1227_pos, rx1227_eos, rx1227_fail3349
    repr_bind_attr_int rx1227_cur, rx1227_curclass, "$!from", rx1227_pos
  rxscan1228_scan3354:
    nqp_rxmark rx1227_bstack, rxscan1228_loop3353, rx1227_pos, 0
  rxscan1228_done3355:
    nqp_rxmark rx1227_bstack, rxcap1229_fail3357, rx1227_pos, 0
    add $I11, rx1227_pos, 2
    gt $I11, rx1227_eos, rx1227_fail3349
    substr $S10, rx1227_tgt, rx1227_pos, 2
    ne $S10, ucs4:"||", rx1227_fail3349
    add rx1227_pos, 2
    nqp_rxpeek $I19, rx1227_bstack, rxcap1229_fail3357
    inc $I19
    set $I11, rx1227_bstack[$I19]
    repr_bind_attr_int rx1227_cur, rx1227_curclass, "$!pos", rx1227_pos
    $P11 = rx1227_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1227_pos)
    rx1227_cstack = rx1227_cur."!cursor_capture"($P11, "sym")
    goto rxcap1229_done3356
  rxcap1229_fail3357:
    goto rx1227_fail3349
  rxcap1229_done3356:
    repr_bind_attr_int rx1227_cur, rx1227_curclass, "$!pos", rx1227_pos
    $P11 = rx1227_cur."O"("%tight_or, :op<unless>")
    repr_get_attr_int $I11, $P11, rx1227_curclass, "$!pos"
    lt $I11, 0, rx1227_fail3349
    nqp_rxmark rx1227_bstack, rxsubrule1230_pass3358, -1, 0
  rxsubrule1230_pass3358:
    rx1227_cstack = rx1227_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1227_pos, $P11, rx1227_curclass, "$!pos"
    rx1227_cur."!cursor_pass"(rx1227_pos, "infix:sym<||>", 'backtrack'=>1)
    .return (rx1227_cur)
  rx1227_restart3348:
    repr_get_attr_obj rx1227_cstack, rx1227_cur, rx1227_curclass, "$!cstack"
  rx1227_fail3349:
    unless rx1227_bstack, rx1227_done3347
    pop $I19, rx1227_bstack
    if_null rx1227_cstack, rx1227_cstack_done3352
    unless rx1227_cstack, rx1227_cstack_done3352
    dec $I19
    set $P11, rx1227_cstack[$I19]
  rx1227_cstack_done3352:
    pop rx1227_rep, rx1227_bstack
    pop rx1227_pos, rx1227_bstack
    pop $I19, rx1227_bstack
    lt rx1227_pos, -1, rx1227_done3347
    lt rx1227_pos, 0, rx1227_fail3349
    eq $I19, 0, rx1227_fail3349
    nqp_islist $I20, rx1227_cstack
    unless $I20, rx1227_jump3350
    elements $I18, rx1227_bstack
    le $I18, 0, rx1227_cut3351
    dec $I18
    set $I18, rx1227_bstack[$I18]
  rx1227_cut3351:
    assign rx1227_cstack, $I18
  rx1227_jump3350:
    jump $I19
  rx1227_done3347:
    rx1227_cur."!cursor_fail"()
    .return (rx1227_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<//>" :subid("cuid_212_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1348
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1231_tgt
    .local int rx1231_pos
    .local int rx1231_off
    .local int rx1231_eos
    .local int rx1231_rep
    .local pmc rx1231_cur
    .local pmc rx1231_curclass
    .local pmc rx1231_bstack
    .local pmc rx1231_cstack
    (rx1231_cur, rx1231_tgt, rx1231_pos, rx1231_curclass, rx1231_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1231_cur
    length rx1231_eos, rx1231_tgt
    eq $I19, 1, rx1231_restart3361
    gt rx1231_pos, rx1231_eos, rx1231_fail3362
    repr_get_attr_int $I11, self, rx1231_curclass, "$!from"
    ne $I11, -1, rxscan1232_done3368
    goto rxscan1232_scan3367
  rxscan1232_loop3366:
    inc rx1231_pos
    gt rx1231_pos, rx1231_eos, rx1231_fail3362
    repr_bind_attr_int rx1231_cur, rx1231_curclass, "$!from", rx1231_pos
  rxscan1232_scan3367:
    nqp_rxmark rx1231_bstack, rxscan1232_loop3366, rx1231_pos, 0
  rxscan1232_done3368:
    nqp_rxmark rx1231_bstack, rxcap1233_fail3370, rx1231_pos, 0
    add $I11, rx1231_pos, 2
    gt $I11, rx1231_eos, rx1231_fail3362
    substr $S10, rx1231_tgt, rx1231_pos, 2
    ne $S10, ucs4:"//", rx1231_fail3362
    add rx1231_pos, 2
    nqp_rxpeek $I19, rx1231_bstack, rxcap1233_fail3370
    inc $I19
    set $I11, rx1231_bstack[$I19]
    repr_bind_attr_int rx1231_cur, rx1231_curclass, "$!pos", rx1231_pos
    $P11 = rx1231_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1231_pos)
    rx1231_cstack = rx1231_cur."!cursor_capture"($P11, "sym")
    goto rxcap1233_done3369
  rxcap1233_fail3370:
    goto rx1231_fail3362
  rxcap1233_done3369:
    repr_bind_attr_int rx1231_cur, rx1231_curclass, "$!pos", rx1231_pos
    $P11 = rx1231_cur."O"("%tight_or, :op<defor>")
    repr_get_attr_int $I11, $P11, rx1231_curclass, "$!pos"
    lt $I11, 0, rx1231_fail3362
    nqp_rxmark rx1231_bstack, rxsubrule1234_pass3371, -1, 0
  rxsubrule1234_pass3371:
    rx1231_cstack = rx1231_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1231_pos, $P11, rx1231_curclass, "$!pos"
    rx1231_cur."!cursor_pass"(rx1231_pos, "infix:sym<//>", 'backtrack'=>1)
    .return (rx1231_cur)
  rx1231_restart3361:
    repr_get_attr_obj rx1231_cstack, rx1231_cur, rx1231_curclass, "$!cstack"
  rx1231_fail3362:
    unless rx1231_bstack, rx1231_done3360
    pop $I19, rx1231_bstack
    if_null rx1231_cstack, rx1231_cstack_done3365
    unless rx1231_cstack, rx1231_cstack_done3365
    dec $I19
    set $P11, rx1231_cstack[$I19]
  rx1231_cstack_done3365:
    pop rx1231_rep, rx1231_bstack
    pop rx1231_pos, rx1231_bstack
    pop $I19, rx1231_bstack
    lt rx1231_pos, -1, rx1231_done3360
    lt rx1231_pos, 0, rx1231_fail3362
    eq $I19, 0, rx1231_fail3362
    nqp_islist $I20, rx1231_cstack
    unless $I20, rx1231_jump3363
    elements $I18, rx1231_bstack
    le $I18, 0, rx1231_cut3364
    dec $I18
    set $I18, rx1231_bstack[$I18]
  rx1231_cut3364:
    assign rx1231_cstack, $I18
  rx1231_jump3363:
    jump $I19
  rx1231_done3360:
    rx1231_cur."!cursor_fail"()
    .return (rx1231_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<?? !!>" :subid("cuid_213_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1350
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1235_tgt
    .local int rx1235_pos
    .local int rx1235_off
    .local int rx1235_eos
    .local int rx1235_rep
    .local pmc rx1235_cur
    .local pmc rx1235_curclass
    .local pmc rx1235_bstack
    .local pmc rx1235_cstack
    (rx1235_cur, rx1235_tgt, rx1235_pos, rx1235_curclass, rx1235_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1235_cur
    length rx1235_eos, rx1235_tgt
    eq $I19, 1, rx1235_restart3374
    gt rx1235_pos, rx1235_eos, rx1235_fail3375
    repr_get_attr_int $I11, self, rx1235_curclass, "$!from"
    ne $I11, -1, rxscan1236_done3381
    goto rxscan1236_scan3380
  rxscan1236_loop3379:
    inc rx1235_pos
    gt rx1235_pos, rx1235_eos, rx1235_fail3375
    repr_bind_attr_int rx1235_cur, rx1235_curclass, "$!from", rx1235_pos
  rxscan1236_scan3380:
    nqp_rxmark rx1235_bstack, rxscan1236_loop3379, rx1235_pos, 0
  rxscan1236_done3381:
    add $I11, rx1235_pos, 2
    gt $I11, rx1235_eos, rx1235_fail3375
    substr $S10, rx1235_tgt, rx1235_pos, 2
    ne $S10, ucs4:"??", rx1235_fail3375
    add rx1235_pos, 2
    repr_bind_attr_int rx1235_cur, rx1235_curclass, "$!pos", rx1235_pos
    $P11 = rx1235_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1235_curclass, "$!pos"
    lt $I11, 0, rx1235_fail3375
    repr_get_attr_int rx1235_pos, $P11, rx1235_curclass, "$!pos"
    repr_bind_attr_int rx1235_cur, rx1235_curclass, "$!pos", rx1235_pos
    $P11 = rx1235_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx1235_curclass, "$!pos"
    lt $I11, 0, rx1235_fail3375
    nqp_rxmark rx1235_bstack, rxsubrule1238_pass3383, -1, 0
  rxsubrule1238_pass3383:
    rx1235_cstack = rx1235_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1235_pos, $P11, rx1235_curclass, "$!pos"
    add $I11, rx1235_pos, 2
    gt $I11, rx1235_eos, rx1235_fail3375
    substr $S10, rx1235_tgt, rx1235_pos, 2
    ne $S10, ucs4:"!!", rx1235_fail3375
    add rx1235_pos, 2
    repr_bind_attr_int rx1235_cur, rx1235_curclass, "$!pos", rx1235_pos
    $P11 = rx1235_cur."O"("%conditional, :reducecheck<ternary>, :op<if>")
    repr_get_attr_int $I11, $P11, rx1235_curclass, "$!pos"
    lt $I11, 0, rx1235_fail3375
    nqp_rxmark rx1235_bstack, rxsubrule1239_pass3384, -1, 0
  rxsubrule1239_pass3384:
    rx1235_cstack = rx1235_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1235_pos, $P11, rx1235_curclass, "$!pos"
    rx1235_cur."!cursor_pass"(rx1235_pos, "infix:sym<?? !!>", 'backtrack'=>1)
    .return (rx1235_cur)
  rx1235_restart3374:
    repr_get_attr_obj rx1235_cstack, rx1235_cur, rx1235_curclass, "$!cstack"
  rx1235_fail3375:
    unless rx1235_bstack, rx1235_done3373
    pop $I19, rx1235_bstack
    if_null rx1235_cstack, rx1235_cstack_done3378
    unless rx1235_cstack, rx1235_cstack_done3378
    dec $I19
    set $P11, rx1235_cstack[$I19]
  rx1235_cstack_done3378:
    pop rx1235_rep, rx1235_bstack
    pop rx1235_pos, rx1235_bstack
    pop $I19, rx1235_bstack
    lt rx1235_pos, -1, rx1235_done3373
    lt rx1235_pos, 0, rx1235_fail3375
    eq $I19, 0, rx1235_fail3375
    nqp_islist $I20, rx1235_cstack
    unless $I20, rx1235_jump3376
    elements $I18, rx1235_bstack
    le $I18, 0, rx1235_cut3377
    dec $I18
    set $I18, rx1235_bstack[$I18]
  rx1235_cut3377:
    assign rx1235_cstack, $I18
  rx1235_jump3376:
    jump $I19
  rx1235_done3373:
    rx1235_cur."!cursor_fail"()
    .return (rx1235_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=>" :subid("cuid_214_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1358
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1240_tgt
    .local int rx1240_pos
    .local int rx1240_off
    .local int rx1240_eos
    .local int rx1240_rep
    .local pmc rx1240_cur
    .local pmc rx1240_curclass
    .local pmc rx1240_bstack
    .local pmc rx1240_cstack
    (rx1240_cur, rx1240_tgt, rx1240_pos, rx1240_curclass, rx1240_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1240_cur
    length rx1240_eos, rx1240_tgt
    eq $I19, 1, rx1240_restart3387
    gt rx1240_pos, rx1240_eos, rx1240_fail3388
    repr_get_attr_int $I11, self, rx1240_curclass, "$!from"
    ne $I11, -1, rxscan1241_done3394
    goto rxscan1241_scan3393
  rxscan1241_loop3392:
    inc rx1240_pos
    gt rx1240_pos, rx1240_eos, rx1240_fail3388
    repr_bind_attr_int rx1240_cur, rx1240_curclass, "$!from", rx1240_pos
  rxscan1241_scan3393:
    nqp_rxmark rx1240_bstack, rxscan1241_loop3392, rx1240_pos, 0
  rxscan1241_done3394:
    nqp_rxmark rx1240_bstack, rxcap1242_fail3396, rx1240_pos, 0
    add $I11, rx1240_pos, 1
    gt $I11, rx1240_eos, rx1240_fail3388
    substr $S10, rx1240_tgt, rx1240_pos, 1
    ne $S10, ucs4:"=", rx1240_fail3388
    add rx1240_pos, 1
    nqp_rxpeek $I19, rx1240_bstack, rxcap1242_fail3396
    inc $I19
    set $I11, rx1240_bstack[$I19]
    repr_bind_attr_int rx1240_cur, rx1240_curclass, "$!pos", rx1240_pos
    $P11 = rx1240_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1240_pos)
    rx1240_cstack = rx1240_cur."!cursor_capture"($P11, "sym")
    goto rxcap1242_done3395
  rxcap1242_fail3396:
    goto rx1240_fail3388
  rxcap1242_done3395:
    repr_bind_attr_int rx1240_cur, rx1240_curclass, "$!pos", rx1240_pos
    $P11 = rx1240_cur."panic"("Assignment (\"=\") not supported in NQP, use \":=\" instead")
    repr_get_attr_int $I11, $P11, rx1240_curclass, "$!pos"
    lt $I11, 0, rx1240_fail3388
    repr_get_attr_int rx1240_pos, $P11, rx1240_curclass, "$!pos"
    rx1240_cur."!cursor_pass"(rx1240_pos, "infix:sym<=>", 'backtrack'=>1)
    .return (rx1240_cur)
  rx1240_restart3387:
    repr_get_attr_obj rx1240_cstack, rx1240_cur, rx1240_curclass, "$!cstack"
  rx1240_fail3388:
    unless rx1240_bstack, rx1240_done3386
    pop $I19, rx1240_bstack
    if_null rx1240_cstack, rx1240_cstack_done3391
    unless rx1240_cstack, rx1240_cstack_done3391
    dec $I19
    set $P11, rx1240_cstack[$I19]
  rx1240_cstack_done3391:
    pop rx1240_rep, rx1240_bstack
    pop rx1240_pos, rx1240_bstack
    pop $I19, rx1240_bstack
    lt rx1240_pos, -1, rx1240_done3386
    lt rx1240_pos, 0, rx1240_fail3388
    eq $I19, 0, rx1240_fail3388
    nqp_islist $I20, rx1240_cstack
    unless $I20, rx1240_jump3389
    elements $I18, rx1240_bstack
    le $I18, 0, rx1240_cut3390
    dec $I18
    set $I18, rx1240_bstack[$I18]
  rx1240_cut3390:
    assign rx1240_cstack, $I18
  rx1240_jump3389:
    jump $I19
  rx1240_done3386:
    rx1240_cur."!cursor_fail"()
    .return (rx1240_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<:=>" :subid("cuid_215_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1361
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1244_tgt
    .local int rx1244_pos
    .local int rx1244_off
    .local int rx1244_eos
    .local int rx1244_rep
    .local pmc rx1244_cur
    .local pmc rx1244_curclass
    .local pmc rx1244_bstack
    .local pmc rx1244_cstack
    (rx1244_cur, rx1244_tgt, rx1244_pos, rx1244_curclass, rx1244_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1244_cur
    length rx1244_eos, rx1244_tgt
    eq $I19, 1, rx1244_restart3400
    gt rx1244_pos, rx1244_eos, rx1244_fail3401
    repr_get_attr_int $I11, self, rx1244_curclass, "$!from"
    ne $I11, -1, rxscan1245_done3407
    goto rxscan1245_scan3406
  rxscan1245_loop3405:
    inc rx1244_pos
    gt rx1244_pos, rx1244_eos, rx1244_fail3401
    repr_bind_attr_int rx1244_cur, rx1244_curclass, "$!from", rx1244_pos
  rxscan1245_scan3406:
    nqp_rxmark rx1244_bstack, rxscan1245_loop3405, rx1244_pos, 0
  rxscan1245_done3407:
    nqp_rxmark rx1244_bstack, rxcap1246_fail3409, rx1244_pos, 0
    add $I11, rx1244_pos, 2
    gt $I11, rx1244_eos, rx1244_fail3401
    substr $S10, rx1244_tgt, rx1244_pos, 2
    ne $S10, ucs4:":=", rx1244_fail3401
    add rx1244_pos, 2
    nqp_rxpeek $I19, rx1244_bstack, rxcap1246_fail3409
    inc $I19
    set $I11, rx1244_bstack[$I19]
    repr_bind_attr_int rx1244_cur, rx1244_curclass, "$!pos", rx1244_pos
    $P11 = rx1244_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1244_pos)
    rx1244_cstack = rx1244_cur."!cursor_capture"($P11, "sym")
    goto rxcap1246_done3408
  rxcap1246_fail3409:
    goto rx1244_fail3401
  rxcap1246_done3408:
    repr_bind_attr_int rx1244_cur, rx1244_curclass, "$!pos", rx1244_pos
    $P11 = rx1244_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1244_curclass, "$!pos"
    lt $I11, 0, rx1244_fail3401
    nqp_rxmark rx1244_bstack, rxsubrule1247_pass3410, -1, 0
  rxsubrule1247_pass3410:
    rx1244_cstack = rx1244_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1244_pos, $P11, rx1244_curclass, "$!pos"
    rx1244_cur."!cursor_pass"(rx1244_pos, "infix:sym<:=>", 'backtrack'=>1)
    .return (rx1244_cur)
  rx1244_restart3400:
    repr_get_attr_obj rx1244_cstack, rx1244_cur, rx1244_curclass, "$!cstack"
  rx1244_fail3401:
    unless rx1244_bstack, rx1244_done3399
    pop $I19, rx1244_bstack
    if_null rx1244_cstack, rx1244_cstack_done3404
    unless rx1244_cstack, rx1244_cstack_done3404
    dec $I19
    set $P11, rx1244_cstack[$I19]
  rx1244_cstack_done3404:
    pop rx1244_rep, rx1244_bstack
    pop rx1244_pos, rx1244_bstack
    pop $I19, rx1244_bstack
    lt rx1244_pos, -1, rx1244_done3399
    lt rx1244_pos, 0, rx1244_fail3401
    eq $I19, 0, rx1244_fail3401
    nqp_islist $I20, rx1244_cstack
    unless $I20, rx1244_jump3402
    elements $I18, rx1244_bstack
    le $I18, 0, rx1244_cut3403
    dec $I18
    set $I18, rx1244_bstack[$I18]
  rx1244_cut3403:
    assign rx1244_cstack, $I18
  rx1244_jump3402:
    jump $I19
  rx1244_done3399:
    rx1244_cur."!cursor_fail"()
    .return (rx1244_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<::=>" :subid("cuid_216_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1362
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1248_tgt
    .local int rx1248_pos
    .local int rx1248_off
    .local int rx1248_eos
    .local int rx1248_rep
    .local pmc rx1248_cur
    .local pmc rx1248_curclass
    .local pmc rx1248_bstack
    .local pmc rx1248_cstack
    (rx1248_cur, rx1248_tgt, rx1248_pos, rx1248_curclass, rx1248_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1248_cur
    length rx1248_eos, rx1248_tgt
    eq $I19, 1, rx1248_restart3413
    gt rx1248_pos, rx1248_eos, rx1248_fail3414
    repr_get_attr_int $I11, self, rx1248_curclass, "$!from"
    ne $I11, -1, rxscan1249_done3420
    goto rxscan1249_scan3419
  rxscan1249_loop3418:
    inc rx1248_pos
    gt rx1248_pos, rx1248_eos, rx1248_fail3414
    repr_bind_attr_int rx1248_cur, rx1248_curclass, "$!from", rx1248_pos
  rxscan1249_scan3419:
    nqp_rxmark rx1248_bstack, rxscan1249_loop3418, rx1248_pos, 0
  rxscan1249_done3420:
    nqp_rxmark rx1248_bstack, rxcap1250_fail3422, rx1248_pos, 0
    add $I11, rx1248_pos, 3
    gt $I11, rx1248_eos, rx1248_fail3414
    substr $S10, rx1248_tgt, rx1248_pos, 3
    ne $S10, ucs4:"::=", rx1248_fail3414
    add rx1248_pos, 3
    nqp_rxpeek $I19, rx1248_bstack, rxcap1250_fail3422
    inc $I19
    set $I11, rx1248_bstack[$I19]
    repr_bind_attr_int rx1248_cur, rx1248_curclass, "$!pos", rx1248_pos
    $P11 = rx1248_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1248_pos)
    rx1248_cstack = rx1248_cur."!cursor_capture"($P11, "sym")
    goto rxcap1250_done3421
  rxcap1250_fail3422:
    goto rx1248_fail3414
  rxcap1250_done3421:
    repr_bind_attr_int rx1248_cur, rx1248_curclass, "$!pos", rx1248_pos
    $P11 = rx1248_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1248_curclass, "$!pos"
    lt $I11, 0, rx1248_fail3414
    nqp_rxmark rx1248_bstack, rxsubrule1251_pass3423, -1, 0
  rxsubrule1251_pass3423:
    rx1248_cstack = rx1248_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1248_pos, $P11, rx1248_curclass, "$!pos"
    rx1248_cur."!cursor_pass"(rx1248_pos, "infix:sym<::=>", 'backtrack'=>1)
    .return (rx1248_cur)
  rx1248_restart3413:
    repr_get_attr_obj rx1248_cstack, rx1248_cur, rx1248_curclass, "$!cstack"
  rx1248_fail3414:
    unless rx1248_bstack, rx1248_done3412
    pop $I19, rx1248_bstack
    if_null rx1248_cstack, rx1248_cstack_done3417
    unless rx1248_cstack, rx1248_cstack_done3417
    dec $I19
    set $P11, rx1248_cstack[$I19]
  rx1248_cstack_done3417:
    pop rx1248_rep, rx1248_bstack
    pop rx1248_pos, rx1248_bstack
    pop $I19, rx1248_bstack
    lt rx1248_pos, -1, rx1248_done3412
    lt rx1248_pos, 0, rx1248_fail3414
    eq $I19, 0, rx1248_fail3414
    nqp_islist $I20, rx1248_cstack
    unless $I20, rx1248_jump3415
    elements $I18, rx1248_bstack
    le $I18, 0, rx1248_cut3416
    dec $I18
    set $I18, rx1248_bstack[$I18]
  rx1248_cut3416:
    assign rx1248_cstack, $I18
  rx1248_jump3415:
    jump $I19
  rx1248_done3412:
    rx1248_cur."!cursor_fail"()
    .return (rx1248_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<,>" :subid("cuid_217_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1364
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1252_tgt
    .local int rx1252_pos
    .local int rx1252_off
    .local int rx1252_eos
    .local int rx1252_rep
    .local pmc rx1252_cur
    .local pmc rx1252_curclass
    .local pmc rx1252_bstack
    .local pmc rx1252_cstack
    (rx1252_cur, rx1252_tgt, rx1252_pos, rx1252_curclass, rx1252_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1252_cur
    length rx1252_eos, rx1252_tgt
    eq $I19, 1, rx1252_restart3426
    gt rx1252_pos, rx1252_eos, rx1252_fail3427
    repr_get_attr_int $I11, self, rx1252_curclass, "$!from"
    ne $I11, -1, rxscan1253_done3433
    goto rxscan1253_scan3432
  rxscan1253_loop3431:
    inc rx1252_pos
    gt rx1252_pos, rx1252_eos, rx1252_fail3427
    repr_bind_attr_int rx1252_cur, rx1252_curclass, "$!from", rx1252_pos
  rxscan1253_scan3432:
    nqp_rxmark rx1252_bstack, rxscan1253_loop3431, rx1252_pos, 0
  rxscan1253_done3433:
    nqp_rxmark rx1252_bstack, rxcap1254_fail3435, rx1252_pos, 0
    add $I11, rx1252_pos, 1
    gt $I11, rx1252_eos, rx1252_fail3427
    substr $S10, rx1252_tgt, rx1252_pos, 1
    ne $S10, ucs4:",", rx1252_fail3427
    add rx1252_pos, 1
    nqp_rxpeek $I19, rx1252_bstack, rxcap1254_fail3435
    inc $I19
    set $I11, rx1252_bstack[$I19]
    repr_bind_attr_int rx1252_cur, rx1252_curclass, "$!pos", rx1252_pos
    $P11 = rx1252_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1252_pos)
    rx1252_cstack = rx1252_cur."!cursor_capture"($P11, "sym")
    goto rxcap1254_done3434
  rxcap1254_fail3435:
    goto rx1252_fail3427
  rxcap1254_done3434:
    repr_bind_attr_int rx1252_cur, rx1252_curclass, "$!pos", rx1252_pos
    $P11 = rx1252_cur."O"("%comma, :op<list>")
    repr_get_attr_int $I11, $P11, rx1252_curclass, "$!pos"
    lt $I11, 0, rx1252_fail3427
    nqp_rxmark rx1252_bstack, rxsubrule1255_pass3436, -1, 0
  rxsubrule1255_pass3436:
    rx1252_cstack = rx1252_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1252_pos, $P11, rx1252_curclass, "$!pos"
    rx1252_cur."!cursor_pass"(rx1252_pos, "infix:sym<,>", 'backtrack'=>1)
    .return (rx1252_cur)
  rx1252_restart3426:
    repr_get_attr_obj rx1252_cstack, rx1252_cur, rx1252_curclass, "$!cstack"
  rx1252_fail3427:
    unless rx1252_bstack, rx1252_done3425
    pop $I19, rx1252_bstack
    if_null rx1252_cstack, rx1252_cstack_done3430
    unless rx1252_cstack, rx1252_cstack_done3430
    dec $I19
    set $P11, rx1252_cstack[$I19]
  rx1252_cstack_done3430:
    pop rx1252_rep, rx1252_bstack
    pop rx1252_pos, rx1252_bstack
    pop $I19, rx1252_bstack
    lt rx1252_pos, -1, rx1252_done3425
    lt rx1252_pos, 0, rx1252_fail3427
    eq $I19, 0, rx1252_fail3427
    nqp_islist $I20, rx1252_cstack
    unless $I20, rx1252_jump3428
    elements $I18, rx1252_bstack
    le $I18, 0, rx1252_cut3429
    dec $I18
    set $I18, rx1252_bstack[$I18]
  rx1252_cut3429:
    assign rx1252_cstack, $I18
  rx1252_jump3428:
    jump $I19
  rx1252_done3425:
    rx1252_cur."!cursor_fail"()
    .return (rx1252_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_218_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1366
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_405_1351203235.318' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1256_tgt
    .local int rx1256_pos
    .local int rx1256_off
    .local int rx1256_eos
    .local int rx1256_rep
    .local pmc rx1256_cur
    .local pmc rx1256_curclass
    .local pmc rx1256_bstack
    .local pmc rx1256_cstack
    (rx1256_cur, rx1256_tgt, rx1256_pos, rx1256_curclass, rx1256_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1256_cur
    length rx1256_eos, rx1256_tgt
    eq $I19, 1, rx1256_restart3439
    gt rx1256_pos, rx1256_eos, rx1256_fail3440
    repr_get_attr_int $I11, self, rx1256_curclass, "$!from"
    ne $I11, -1, rxscan1257_done3446
    goto rxscan1257_scan3445
  rxscan1257_loop3444:
    inc rx1256_pos
    gt rx1256_pos, rx1256_eos, rx1256_fail3440
    repr_bind_attr_int rx1256_cur, rx1256_curclass, "$!from", rx1256_pos
  rxscan1257_scan3445:
    nqp_rxmark rx1256_bstack, rxscan1257_loop3444, rx1256_pos, 0
  rxscan1257_done3446:
    nqp_rxmark rx1256_bstack, rxcap1258_fail3448, rx1256_pos, 0
    add $I11, rx1256_pos, 6
    gt $I11, rx1256_eos, rx1256_fail3440
    substr $S10, rx1256_tgt, rx1256_pos, 6
    ne $S10, ucs4:"return", rx1256_fail3440
    add rx1256_pos, 6
    nqp_rxpeek $I19, rx1256_bstack, rxcap1258_fail3448
    inc $I19
    set $I11, rx1256_bstack[$I19]
    repr_bind_attr_int rx1256_cur, rx1256_curclass, "$!pos", rx1256_pos
    $P11 = rx1256_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1256_pos)
    rx1256_cstack = rx1256_cur."!cursor_capture"($P11, "sym")
    goto rxcap1258_done3447
  rxcap1258_fail3448:
    goto rx1256_fail3440
  rxcap1258_done3447:
    ge rx1256_pos, rx1256_eos, rx1256_fail3440
    is_cclass $I11, .CCLASS_WHITESPACE, rx1256_tgt, rx1256_pos
    unless $I11, rx1256_fail3440
    add rx1256_pos, 1
    repr_bind_attr_int rx1256_cur, rx1256_curclass, "$!pos", rx1256_pos
    $P11 = rx1256_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1256_curclass, "$!pos"
    lt $I11, 0, rx1256_fail3440
    nqp_rxmark rx1256_bstack, rxsubrule1259_pass3449, -1, 0
  rxsubrule1259_pass3449:
    rx1256_cstack = rx1256_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1256_pos, $P11, rx1256_curclass, "$!pos"
    repr_bind_attr_int rx1256_cur, rx1256_curclass, "$!pos", rx1256_pos
    store_lex unicode:"$\x{a2}", rx1256_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_405_1351203235.318' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1256_cur."!cursor_pass"(rx1256_pos, "prefix:sym<return>", 'backtrack'=>1)
    .return (rx1256_cur)
  rx1256_restart3439:
    repr_get_attr_obj rx1256_cstack, rx1256_cur, rx1256_curclass, "$!cstack"
  rx1256_fail3440:
    unless rx1256_bstack, rx1256_done3438
    pop $I19, rx1256_bstack
    if_null rx1256_cstack, rx1256_cstack_done3443
    unless rx1256_cstack, rx1256_cstack_done3443
    dec $I19
    set $P11, rx1256_cstack[$I19]
  rx1256_cstack_done3443:
    pop rx1256_rep, rx1256_bstack
    pop rx1256_pos, rx1256_bstack
    pop $I19, rx1256_bstack
    lt rx1256_pos, -1, rx1256_done3438
    lt rx1256_pos, 0, rx1256_fail3440
    eq $I19, 0, rx1256_fail3440
    nqp_islist $I20, rx1256_cstack
    unless $I20, rx1256_jump3441
    elements $I18, rx1256_bstack
    le $I18, 0, rx1256_cut3442
    dec $I18
    set $I18, rx1256_bstack[$I18]
  rx1256_cut3442:
    assign rx1256_cstack, $I18
  rx1256_jump3441:
    jump $I19
  rx1256_done3438:
    rx1256_cur."!cursor_fail"()
    .return (rx1256_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_405_1351203235.318") :anon :lex :outer("cuid_218_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1366

    box $P5001, 1
    store_dynamic_lex "$*RETURN_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_219_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1367
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1260_tgt
    .local int rx1260_pos
    .local int rx1260_off
    .local int rx1260_eos
    .local int rx1260_rep
    .local pmc rx1260_cur
    .local pmc rx1260_curclass
    .local pmc rx1260_bstack
    .local pmc rx1260_cstack
    (rx1260_cur, rx1260_tgt, rx1260_pos, rx1260_curclass, rx1260_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1260_cur
    length rx1260_eos, rx1260_tgt
    eq $I19, 1, rx1260_restart3452
    gt rx1260_pos, rx1260_eos, rx1260_fail3453
    repr_get_attr_int $I11, self, rx1260_curclass, "$!from"
    ne $I11, -1, rxscan1261_done3459
    goto rxscan1261_scan3458
  rxscan1261_loop3457:
    inc rx1260_pos
    gt rx1260_pos, rx1260_eos, rx1260_fail3453
    repr_bind_attr_int rx1260_cur, rx1260_curclass, "$!from", rx1260_pos
  rxscan1261_scan3458:
    nqp_rxmark rx1260_bstack, rxscan1261_loop3457, rx1260_pos, 0
  rxscan1261_done3459:
    nqp_rxmark rx1260_bstack, rxcap1262_fail3461, rx1260_pos, 0
    add $I11, rx1260_pos, 4
    gt $I11, rx1260_eos, rx1260_fail3453
    substr $S10, rx1260_tgt, rx1260_pos, 4
    ne $S10, ucs4:"make", rx1260_fail3453
    add rx1260_pos, 4
    nqp_rxpeek $I19, rx1260_bstack, rxcap1262_fail3461
    inc $I19
    set $I11, rx1260_bstack[$I19]
    repr_bind_attr_int rx1260_cur, rx1260_curclass, "$!pos", rx1260_pos
    $P11 = rx1260_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1260_pos)
    rx1260_cstack = rx1260_cur."!cursor_capture"($P11, "sym")
    goto rxcap1262_done3460
  rxcap1262_fail3461:
    goto rx1260_fail3453
  rxcap1262_done3460:
    ge rx1260_pos, rx1260_eos, rx1260_fail3453
    is_cclass $I11, .CCLASS_WHITESPACE, rx1260_tgt, rx1260_pos
    unless $I11, rx1260_fail3453
    add rx1260_pos, 1
    repr_bind_attr_int rx1260_cur, rx1260_curclass, "$!pos", rx1260_pos
    $P11 = rx1260_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1260_curclass, "$!pos"
    lt $I11, 0, rx1260_fail3453
    nqp_rxmark rx1260_bstack, rxsubrule1263_pass3462, -1, 0
  rxsubrule1263_pass3462:
    rx1260_cstack = rx1260_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1260_pos, $P11, rx1260_curclass, "$!pos"
    rx1260_cur."!cursor_pass"(rx1260_pos, "prefix:sym<make>", 'backtrack'=>1)
    .return (rx1260_cur)
  rx1260_restart3452:
    repr_get_attr_obj rx1260_cstack, rx1260_cur, rx1260_curclass, "$!cstack"
  rx1260_fail3453:
    unless rx1260_bstack, rx1260_done3451
    pop $I19, rx1260_bstack
    if_null rx1260_cstack, rx1260_cstack_done3456
    unless rx1260_cstack, rx1260_cstack_done3456
    dec $I19
    set $P11, rx1260_cstack[$I19]
  rx1260_cstack_done3456:
    pop rx1260_rep, rx1260_bstack
    pop rx1260_pos, rx1260_bstack
    pop $I19, rx1260_bstack
    lt rx1260_pos, -1, rx1260_done3451
    lt rx1260_pos, 0, rx1260_fail3453
    eq $I19, 0, rx1260_fail3453
    nqp_islist $I20, rx1260_cstack
    unless $I20, rx1260_jump3454
    elements $I18, rx1260_bstack
    le $I18, 0, rx1260_cut3455
    dec $I18
    set $I18, rx1260_bstack[$I18]
  rx1260_cut3455:
    assign rx1260_cstack, $I18
  rx1260_jump3454:
    jump $I19
  rx1260_done3451:
    rx1260_cur."!cursor_fail"()
    .return (rx1260_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_220_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1368
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_406_1351203235.318' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1264_tgt
    .local int rx1264_pos
    .local int rx1264_off
    .local int rx1264_eos
    .local int rx1264_rep
    .local pmc rx1264_cur
    .local pmc rx1264_curclass
    .local pmc rx1264_bstack
    .local pmc rx1264_cstack
    (rx1264_cur, rx1264_tgt, rx1264_pos, rx1264_curclass, rx1264_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1264_cur
    length rx1264_eos, rx1264_tgt
    eq $I19, 1, rx1264_restart3465
    gt rx1264_pos, rx1264_eos, rx1264_fail3466
    repr_get_attr_int $I11, self, rx1264_curclass, "$!from"
    ne $I11, -1, rxscan1265_done3472
    goto rxscan1265_scan3471
  rxscan1265_loop3470:
    inc rx1264_pos
    gt rx1264_pos, rx1264_eos, rx1264_fail3466
    repr_bind_attr_int rx1264_cur, rx1264_curclass, "$!from", rx1264_pos
  rxscan1265_scan3471:
    nqp_rxmark rx1264_bstack, rxscan1265_loop3470, rx1264_pos, 0
  rxscan1265_done3472:
    nqp_rxmark rx1264_bstack, rxcap1266_fail3474, rx1264_pos, 0
    add $I11, rx1264_pos, 4
    gt $I11, rx1264_eos, rx1264_fail3466
    substr $S10, rx1264_tgt, rx1264_pos, 4
    ne $S10, ucs4:"last", rx1264_fail3466
    add rx1264_pos, 4
    nqp_rxpeek $I19, rx1264_bstack, rxcap1266_fail3474
    inc $I19
    set $I11, rx1264_bstack[$I19]
    repr_bind_attr_int rx1264_cur, rx1264_curclass, "$!pos", rx1264_pos
    $P11 = rx1264_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1264_pos)
    rx1264_cstack = rx1264_cur."!cursor_capture"($P11, "sym")
    goto rxcap1266_done3473
  rxcap1266_fail3474:
    goto rx1264_fail3466
  rxcap1266_done3473:
    repr_bind_attr_int rx1264_cur, rx1264_curclass, "$!pos", rx1264_pos
    store_lex unicode:"$\x{a2}", rx1264_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_406_1351203235.318' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1264_cur."!cursor_pass"(rx1264_pos, "term:sym<last>", 'backtrack'=>1)
    .return (rx1264_cur)
  rx1264_restart3465:
    repr_get_attr_obj rx1264_cstack, rx1264_cur, rx1264_curclass, "$!cstack"
  rx1264_fail3466:
    unless rx1264_bstack, rx1264_done3464
    pop $I19, rx1264_bstack
    if_null rx1264_cstack, rx1264_cstack_done3469
    unless rx1264_cstack, rx1264_cstack_done3469
    dec $I19
    set $P11, rx1264_cstack[$I19]
  rx1264_cstack_done3469:
    pop rx1264_rep, rx1264_bstack
    pop rx1264_pos, rx1264_bstack
    pop $I19, rx1264_bstack
    lt rx1264_pos, -1, rx1264_done3464
    lt rx1264_pos, 0, rx1264_fail3466
    eq $I19, 0, rx1264_fail3466
    nqp_islist $I20, rx1264_cstack
    unless $I20, rx1264_jump3467
    elements $I18, rx1264_bstack
    le $I18, 0, rx1264_cut3468
    dec $I18
    set $I18, rx1264_bstack[$I18]
  rx1264_cut3468:
    assign rx1264_cstack, $I18
  rx1264_jump3467:
    jump $I19
  rx1264_done3464:
    rx1264_cur."!cursor_fail"()
    .return (rx1264_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_406_1351203235.318") :anon :lex :outer("cuid_220_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1368

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_221_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1369
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_407_1351203235.318' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1267_tgt
    .local int rx1267_pos
    .local int rx1267_off
    .local int rx1267_eos
    .local int rx1267_rep
    .local pmc rx1267_cur
    .local pmc rx1267_curclass
    .local pmc rx1267_bstack
    .local pmc rx1267_cstack
    (rx1267_cur, rx1267_tgt, rx1267_pos, rx1267_curclass, rx1267_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1267_cur
    length rx1267_eos, rx1267_tgt
    eq $I19, 1, rx1267_restart3477
    gt rx1267_pos, rx1267_eos, rx1267_fail3478
    repr_get_attr_int $I11, self, rx1267_curclass, "$!from"
    ne $I11, -1, rxscan1268_done3484
    goto rxscan1268_scan3483
  rxscan1268_loop3482:
    inc rx1267_pos
    gt rx1267_pos, rx1267_eos, rx1267_fail3478
    repr_bind_attr_int rx1267_cur, rx1267_curclass, "$!from", rx1267_pos
  rxscan1268_scan3483:
    nqp_rxmark rx1267_bstack, rxscan1268_loop3482, rx1267_pos, 0
  rxscan1268_done3484:
    nqp_rxmark rx1267_bstack, rxcap1269_fail3486, rx1267_pos, 0
    add $I11, rx1267_pos, 4
    gt $I11, rx1267_eos, rx1267_fail3478
    substr $S10, rx1267_tgt, rx1267_pos, 4
    ne $S10, ucs4:"next", rx1267_fail3478
    add rx1267_pos, 4
    nqp_rxpeek $I19, rx1267_bstack, rxcap1269_fail3486
    inc $I19
    set $I11, rx1267_bstack[$I19]
    repr_bind_attr_int rx1267_cur, rx1267_curclass, "$!pos", rx1267_pos
    $P11 = rx1267_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1267_pos)
    rx1267_cstack = rx1267_cur."!cursor_capture"($P11, "sym")
    goto rxcap1269_done3485
  rxcap1269_fail3486:
    goto rx1267_fail3478
  rxcap1269_done3485:
    repr_bind_attr_int rx1267_cur, rx1267_curclass, "$!pos", rx1267_pos
    store_lex unicode:"$\x{a2}", rx1267_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_407_1351203235.318' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1267_cur."!cursor_pass"(rx1267_pos, "term:sym<next>", 'backtrack'=>1)
    .return (rx1267_cur)
  rx1267_restart3477:
    repr_get_attr_obj rx1267_cstack, rx1267_cur, rx1267_curclass, "$!cstack"
  rx1267_fail3478:
    unless rx1267_bstack, rx1267_done3476
    pop $I19, rx1267_bstack
    if_null rx1267_cstack, rx1267_cstack_done3481
    unless rx1267_cstack, rx1267_cstack_done3481
    dec $I19
    set $P11, rx1267_cstack[$I19]
  rx1267_cstack_done3481:
    pop rx1267_rep, rx1267_bstack
    pop rx1267_pos, rx1267_bstack
    pop $I19, rx1267_bstack
    lt rx1267_pos, -1, rx1267_done3476
    lt rx1267_pos, 0, rx1267_fail3478
    eq $I19, 0, rx1267_fail3478
    nqp_islist $I20, rx1267_cstack
    unless $I20, rx1267_jump3479
    elements $I18, rx1267_bstack
    le $I18, 0, rx1267_cut3480
    dec $I18
    set $I18, rx1267_bstack[$I18]
  rx1267_cut3480:
    assign rx1267_cstack, $I18
  rx1267_jump3479:
    jump $I19
  rx1267_done3476:
    rx1267_cur."!cursor_fail"()
    .return (rx1267_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_407_1351203235.318") :anon :lex :outer("cuid_221_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1369

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_222_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1370
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_408_1351203235.318' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1270_tgt
    .local int rx1270_pos
    .local int rx1270_off
    .local int rx1270_eos
    .local int rx1270_rep
    .local pmc rx1270_cur
    .local pmc rx1270_curclass
    .local pmc rx1270_bstack
    .local pmc rx1270_cstack
    (rx1270_cur, rx1270_tgt, rx1270_pos, rx1270_curclass, rx1270_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1270_cur
    length rx1270_eos, rx1270_tgt
    eq $I19, 1, rx1270_restart3489
    gt rx1270_pos, rx1270_eos, rx1270_fail3490
    repr_get_attr_int $I11, self, rx1270_curclass, "$!from"
    ne $I11, -1, rxscan1271_done3496
    goto rxscan1271_scan3495
  rxscan1271_loop3494:
    inc rx1270_pos
    gt rx1270_pos, rx1270_eos, rx1270_fail3490
    repr_bind_attr_int rx1270_cur, rx1270_curclass, "$!from", rx1270_pos
  rxscan1271_scan3495:
    nqp_rxmark rx1270_bstack, rxscan1271_loop3494, rx1270_pos, 0
  rxscan1271_done3496:
    nqp_rxmark rx1270_bstack, rxcap1272_fail3498, rx1270_pos, 0
    add $I11, rx1270_pos, 4
    gt $I11, rx1270_eos, rx1270_fail3490
    substr $S10, rx1270_tgt, rx1270_pos, 4
    ne $S10, ucs4:"redo", rx1270_fail3490
    add rx1270_pos, 4
    nqp_rxpeek $I19, rx1270_bstack, rxcap1272_fail3498
    inc $I19
    set $I11, rx1270_bstack[$I19]
    repr_bind_attr_int rx1270_cur, rx1270_curclass, "$!pos", rx1270_pos
    $P11 = rx1270_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1270_pos)
    rx1270_cstack = rx1270_cur."!cursor_capture"($P11, "sym")
    goto rxcap1272_done3497
  rxcap1272_fail3498:
    goto rx1270_fail3490
  rxcap1272_done3497:
    repr_bind_attr_int rx1270_cur, rx1270_curclass, "$!pos", rx1270_pos
    store_lex unicode:"$\x{a2}", rx1270_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_408_1351203235.318' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1270_cur."!cursor_pass"(rx1270_pos, "term:sym<redo>", 'backtrack'=>1)
    .return (rx1270_cur)
  rx1270_restart3489:
    repr_get_attr_obj rx1270_cstack, rx1270_cur, rx1270_curclass, "$!cstack"
  rx1270_fail3490:
    unless rx1270_bstack, rx1270_done3488
    pop $I19, rx1270_bstack
    if_null rx1270_cstack, rx1270_cstack_done3493
    unless rx1270_cstack, rx1270_cstack_done3493
    dec $I19
    set $P11, rx1270_cstack[$I19]
  rx1270_cstack_done3493:
    pop rx1270_rep, rx1270_bstack
    pop rx1270_pos, rx1270_bstack
    pop $I19, rx1270_bstack
    lt rx1270_pos, -1, rx1270_done3488
    lt rx1270_pos, 0, rx1270_fail3490
    eq $I19, 0, rx1270_fail3490
    nqp_islist $I20, rx1270_cstack
    unless $I20, rx1270_jump3491
    elements $I18, rx1270_bstack
    le $I18, 0, rx1270_cut3492
    dec $I18
    set $I18, rx1270_bstack[$I18]
  rx1270_cut3492:
    assign rx1270_cstack, $I18
  rx1270_jump3491:
    jump $I19
  rx1270_done3488:
    rx1270_cur."!cursor_fail"()
    .return (rx1270_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_408_1351203235.318") :anon :lex :outer("cuid_222_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1370

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "smartmatch" :subid("cuid_223_1351203235.318") :anon :lex :outer("cuid_224_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1372
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$t", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3499
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5003
  fallback3499:
    set $P101, $P5002
    set $P5004, _lex_param_1[1]
    unless_null $P5004, fallback3500
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5005
  fallback3500:
    set _lex_param_1[0], $P5004
    set _lex_param_1[1], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_244_1351203235.318") :anon :lex :outer("cuid_1_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1378
    .const 'Sub' $P5012 = 'cuid_225_1351203235.318' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_227_1351203235.318' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_228_1351203235.318' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_230_1351203235.318' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_231_1351203235.318' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_234_1351203235.318' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_237_1351203235.318' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_239_1351203235.318' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_241_1351203235.318' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_242_1351203235.318' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_243_1351203235.318' 
    capture_lex $P5012 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_225_1351203235.318' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_227_1351203235.318' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_228_1351203235.318' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_230_1351203235.318' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_231_1351203235.318' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_234_1351203235.318' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_237_1351203235.318' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_239_1351203235.318' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_241_1351203235.318' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_242_1351203235.318' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_243_1351203235.318' 
    capture_lex $P5011
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_225_1351203235.318") :anon :lex :outer("cuid_244_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1379
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_226_1351203235.318' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1273_tgt
    .local int rx1273_pos
    .local int rx1273_off
    .local int rx1273_eos
    .local int rx1273_rep
    .local pmc rx1273_cur
    .local pmc rx1273_curclass
    .local pmc rx1273_bstack
    .local pmc rx1273_cstack
    (rx1273_cur, rx1273_tgt, rx1273_pos, rx1273_curclass, rx1273_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1273_cur
    length rx1273_eos, rx1273_tgt
    eq $I19, 1, rx1273_restart3503
    gt rx1273_pos, rx1273_eos, rx1273_fail3504
    repr_get_attr_int $I11, self, rx1273_curclass, "$!from"
    ne $I11, -1, rxscan1274_done3510
    goto rxscan1274_scan3509
  rxscan1274_loop3508:
    inc rx1273_pos
    gt rx1273_pos, rx1273_eos, rx1273_fail3504
    repr_bind_attr_int rx1273_cur, rx1273_curclass, "$!from", rx1273_pos
  rxscan1274_scan3509:
    nqp_rxmark rx1273_bstack, rxscan1274_loop3508, rx1273_pos, 0
  rxscan1274_done3510:
    add $I11, rx1273_pos, 1
    gt $I11, rx1273_eos, rx1273_fail3504
    substr $S10, rx1273_tgt, rx1273_pos, 1
    ne $S10, ucs4:":", rx1273_fail3504
    add rx1273_pos, 1
    .const 'Sub' $P5001 = 'cuid_226_1351203235.318' 
    capture_lex $P5001
    repr_bind_attr_int rx1273_cur, rx1273_curclass, "$!pos", rx1273_pos
    $P11 = rx1273_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1273_curclass, "$!pos"
    lt $I11, 0, rx1273_fail3504
    repr_bind_attr_int rx1273_cur, rx1273_curclass, "$!pos", rx1273_pos
    $P11 = rx1273_cur."LANG"("MAIN", "statement")
    repr_get_attr_int $I11, $P11, rx1273_curclass, "$!pos"
    lt $I11, 0, rx1273_fail3504
    nqp_rxmark rx1273_bstack, rxsubrule1277_pass3521, -1, 0
  rxsubrule1277_pass3521:
    rx1273_cstack = rx1273_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx1273_pos, $P11, rx1273_curclass, "$!pos"
    repr_bind_attr_int rx1273_cur, rx1273_curclass, "$!pos", rx1273_pos
    $P11 = rx1273_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1273_curclass, "$!pos"
    lt $I11, 0, rx1273_fail3504
    repr_get_attr_int rx1273_pos, $P11, rx1273_curclass, "$!pos"
    add $I11, rx1273_pos, 1
    gt $I11, rx1273_eos, rx1273_fail3504
    substr $S10, rx1273_tgt, rx1273_pos, 1
    ne $S10, ucs4:";", rx1273_fail3504
    add rx1273_pos, 1
    rx1273_cur."!cursor_pass"(rx1273_pos, "metachar:sym<:my>", 'backtrack'=>1)
    .return (rx1273_cur)
  rx1273_restart3503:
    repr_get_attr_obj rx1273_cstack, rx1273_cur, rx1273_curclass, "$!cstack"
  rx1273_fail3504:
    unless rx1273_bstack, rx1273_done3502
    pop $I19, rx1273_bstack
    if_null rx1273_cstack, rx1273_cstack_done3507
    unless rx1273_cstack, rx1273_cstack_done3507
    dec $I19
    set $P11, rx1273_cstack[$I19]
  rx1273_cstack_done3507:
    pop rx1273_rep, rx1273_bstack
    pop rx1273_pos, rx1273_bstack
    pop $I19, rx1273_bstack
    lt rx1273_pos, -1, rx1273_done3502
    lt rx1273_pos, 0, rx1273_fail3504
    eq $I19, 0, rx1273_fail3504
    nqp_islist $I20, rx1273_cstack
    unless $I20, rx1273_jump3505
    elements $I18, rx1273_bstack
    le $I18, 0, rx1273_cut3506
    dec $I18
    set $I18, rx1273_bstack[$I18]
  rx1273_cut3506:
    assign rx1273_cstack, $I18
  rx1273_jump3505:
    jump $I19
  rx1273_done3502:
    rx1273_cur."!cursor_fail"()
    .return (rx1273_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_226_1351203235.318") :anon :lex :outer("cuid_225_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1275_tgt
    .local int rx1275_pos
    .local int rx1275_off
    .local int rx1275_eos
    .local int rx1275_rep
    .local pmc rx1275_cur
    .local pmc rx1275_curclass
    .local pmc rx1275_bstack
    .local pmc rx1275_cstack
    (rx1275_cur, rx1275_tgt, rx1275_pos, rx1275_curclass, rx1275_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1275_cur
    length rx1275_eos, rx1275_tgt
    eq $I19, 1, rx1275_restart3513
    gt rx1275_pos, rx1275_eos, rx1275_fail3514
    repr_get_attr_int $I11, self, rx1275_curclass, "$!from"
    ne $I11, -1, rxscan1276_done3520
    goto rxscan1276_scan3519
  rxscan1276_loop3518:
    inc rx1275_pos
    gt rx1275_pos, rx1275_eos, rx1275_fail3514
    repr_bind_attr_int rx1275_cur, rx1275_curclass, "$!from", rx1275_pos
  rxscan1276_scan3519:
    nqp_rxmark rx1275_bstack, rxscan1276_loop3518, rx1275_pos, 0
  rxscan1276_done3520:
    add $I11, rx1275_pos, 2
    gt $I11, rx1275_eos, rx1275_fail3514
    substr $S10, rx1275_tgt, rx1275_pos, 2
    ne $S10, ucs4:"my", rx1275_fail3514
    add rx1275_pos, 2
    rx1275_cur."!cursor_pass"(rx1275_pos, 'backtrack'=>1)
    .return (rx1275_cur)
  rx1275_restart3513:
    repr_get_attr_obj rx1275_cstack, rx1275_cur, rx1275_curclass, "$!cstack"
  rx1275_fail3514:
    unless rx1275_bstack, rx1275_done3512
    pop $I19, rx1275_bstack
    if_null rx1275_cstack, rx1275_cstack_done3517
    unless rx1275_cstack, rx1275_cstack_done3517
    dec $I19
    set $P11, rx1275_cstack[$I19]
  rx1275_cstack_done3517:
    pop rx1275_rep, rx1275_bstack
    pop rx1275_pos, rx1275_bstack
    pop $I19, rx1275_bstack
    lt rx1275_pos, -1, rx1275_done3512
    lt rx1275_pos, 0, rx1275_fail3514
    eq $I19, 0, rx1275_fail3514
    nqp_islist $I20, rx1275_cstack
    unless $I20, rx1275_jump3515
    elements $I18, rx1275_bstack
    le $I18, 0, rx1275_cut3516
    dec $I18
    set $I18, rx1275_bstack[$I18]
  rx1275_cut3516:
    assign rx1275_cstack, $I18
  rx1275_jump3515:
    jump $I19
  rx1275_done3512:
    rx1275_cur."!cursor_fail"()
    .return (rx1275_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_227_1351203235.318") :anon :lex :outer("cuid_244_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1383
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1279_tgt
    .local int rx1279_pos
    .local int rx1279_off
    .local int rx1279_eos
    .local int rx1279_rep
    .local pmc rx1279_cur
    .local pmc rx1279_curclass
    .local pmc rx1279_bstack
    .local pmc rx1279_cstack
    (rx1279_cur, rx1279_tgt, rx1279_pos, rx1279_curclass, rx1279_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1279_cur
    length rx1279_eos, rx1279_tgt
    eq $I19, 1, rx1279_restart3525
    gt rx1279_pos, rx1279_eos, rx1279_fail3526
    repr_get_attr_int $I11, self, rx1279_curclass, "$!from"
    ne $I11, -1, rxscan1280_done3532
    goto rxscan1280_scan3531
  rxscan1280_loop3530:
    inc rx1279_pos
    gt rx1279_pos, rx1279_eos, rx1279_fail3526
    repr_bind_attr_int rx1279_cur, rx1279_curclass, "$!from", rx1279_pos
  rxscan1280_scan3531:
    nqp_rxmark rx1279_bstack, rxscan1280_loop3530, rx1279_pos, 0
  rxscan1280_done3532:
    ge rx1279_pos, rx1279_eos, rx1279_fail3526
    substr $S11, rx1279_tgt, rx1279_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1279_fail3526
    repr_bind_attr_int rx1279_cur, rx1279_curclass, "$!pos", rx1279_pos
    $P11 = rx1279_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1279_curclass, "$!pos"
    lt $I11, 0, rx1279_fail3526
    nqp_rxmark rx1279_bstack, rxsubrule1281_pass3533, -1, 0
  rxsubrule1281_pass3533:
    rx1279_cstack = rx1279_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1279_pos, $P11, rx1279_curclass, "$!pos"
    rx1279_cur."!cursor_pass"(rx1279_pos, "metachar:sym<{ }>", 'backtrack'=>1)
    .return (rx1279_cur)
  rx1279_restart3525:
    repr_get_attr_obj rx1279_cstack, rx1279_cur, rx1279_curclass, "$!cstack"
  rx1279_fail3526:
    unless rx1279_bstack, rx1279_done3524
    pop $I19, rx1279_bstack
    if_null rx1279_cstack, rx1279_cstack_done3529
    unless rx1279_cstack, rx1279_cstack_done3529
    dec $I19
    set $P11, rx1279_cstack[$I19]
  rx1279_cstack_done3529:
    pop rx1279_rep, rx1279_bstack
    pop rx1279_pos, rx1279_bstack
    pop $I19, rx1279_bstack
    lt rx1279_pos, -1, rx1279_done3524
    lt rx1279_pos, 0, rx1279_fail3526
    eq $I19, 0, rx1279_fail3526
    nqp_islist $I20, rx1279_cstack
    unless $I20, rx1279_jump3527
    elements $I18, rx1279_bstack
    le $I18, 0, rx1279_cut3528
    dec $I18
    set $I18, rx1279_bstack[$I18]
  rx1279_cut3528:
    assign rx1279_cstack, $I18
  rx1279_jump3527:
    jump $I19
  rx1279_done3524:
    rx1279_cur."!cursor_fail"()
    .return (rx1279_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_228_1351203235.318") :anon :lex :outer("cuid_244_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1387
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_229_1351203235.318' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1282_tgt
    .local int rx1282_pos
    .local int rx1282_off
    .local int rx1282_eos
    .local int rx1282_rep
    .local pmc rx1282_cur
    .local pmc rx1282_curclass
    .local pmc rx1282_bstack
    .local pmc rx1282_cstack
    (rx1282_cur, rx1282_tgt, rx1282_pos, rx1282_curclass, rx1282_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1282_cur
    length rx1282_eos, rx1282_tgt
    eq $I19, 1, rx1282_restart3536
    gt rx1282_pos, rx1282_eos, rx1282_fail3537
    repr_get_attr_int $I11, self, rx1282_curclass, "$!from"
    ne $I11, -1, rxscan1283_done3543
    goto rxscan1283_scan3542
  rxscan1283_loop3541:
    inc rx1282_pos
    gt rx1282_pos, rx1282_eos, rx1282_fail3537
    repr_bind_attr_int rx1282_cur, rx1282_curclass, "$!from", rx1282_pos
  rxscan1283_scan3542:
    nqp_rxmark rx1282_bstack, rxscan1283_loop3541, rx1282_pos, 0
  rxscan1283_done3543:
    .const 'Sub' $P5001 = 'cuid_229_1351203235.318' 
    capture_lex $P5001
    repr_bind_attr_int rx1282_cur, rx1282_curclass, "$!pos", rx1282_pos
    $P11 = rx1282_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1282_curclass, "$!pos"
    lt $I11, 0, rx1282_fail3537
    repr_bind_attr_int rx1282_cur, rx1282_curclass, "$!pos", rx1282_pos
    $P11 = rx1282_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1282_curclass, "$!pos"
    lt $I11, 0, rx1282_fail3537
    nqp_rxmark rx1282_bstack, rxsubrule1287_pass3557, -1, 0
  rxsubrule1287_pass3557:
    rx1282_cstack = rx1282_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1282_pos, $P11, rx1282_curclass, "$!pos"
    rx1282_cur."!cursor_pass"(rx1282_pos, "metachar:sym<nqpvar>", 'backtrack'=>1)
    .return (rx1282_cur)
  rx1282_restart3536:
    repr_get_attr_obj rx1282_cstack, rx1282_cur, rx1282_curclass, "$!cstack"
  rx1282_fail3537:
    unless rx1282_bstack, rx1282_done3535
    pop $I19, rx1282_bstack
    if_null rx1282_cstack, rx1282_cstack_done3540
    unless rx1282_cstack, rx1282_cstack_done3540
    dec $I19
    set $P11, rx1282_cstack[$I19]
  rx1282_cstack_done3540:
    pop rx1282_rep, rx1282_bstack
    pop rx1282_pos, rx1282_bstack
    pop $I19, rx1282_bstack
    lt rx1282_pos, -1, rx1282_done3535
    lt rx1282_pos, 0, rx1282_fail3537
    eq $I19, 0, rx1282_fail3537
    nqp_islist $I20, rx1282_cstack
    unless $I20, rx1282_jump3538
    elements $I18, rx1282_bstack
    le $I18, 0, rx1282_cut3539
    dec $I18
    set $I18, rx1282_bstack[$I18]
  rx1282_cut3539:
    assign rx1282_cstack, $I18
  rx1282_jump3538:
    jump $I19
  rx1282_done3535:
    rx1282_cur."!cursor_fail"()
    .return (rx1282_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_229_1351203235.318") :anon :lex :outer("cuid_228_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1284_tgt
    .local int rx1284_pos
    .local int rx1284_off
    .local int rx1284_eos
    .local int rx1284_rep
    .local pmc rx1284_cur
    .local pmc rx1284_curclass
    .local pmc rx1284_bstack
    .local pmc rx1284_cstack
    (rx1284_cur, rx1284_tgt, rx1284_pos, rx1284_curclass, rx1284_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1284_cur
    length rx1284_eos, rx1284_tgt
    eq $I19, 1, rx1284_restart3546
    gt rx1284_pos, rx1284_eos, rx1284_fail3547
    repr_get_attr_int $I11, self, rx1284_curclass, "$!from"
    ne $I11, -1, rxscan1285_done3553
    goto rxscan1285_scan3552
  rxscan1285_loop3551:
    inc rx1284_pos
    gt rx1284_pos, rx1284_eos, rx1284_fail3547
    repr_bind_attr_int rx1284_cur, rx1284_curclass, "$!from", rx1284_pos
  rxscan1285_scan3552:
    nqp_rxmark rx1284_bstack, rxscan1285_loop3551, rx1284_pos, 0
  rxscan1285_done3553:
    ge rx1284_pos, rx1284_eos, rx1284_fail3547
    substr $S11, rx1284_tgt, rx1284_pos, 1
    index $I11, ucs4:"$@&", $S11
    lt $I11, 0, rx1284_fail3547
    inc rx1284_pos
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1286_03555
    nqp_push_label $P11, alt1286_13556
    nqp_rxmark rx1284_bstack, alt1286_end3554, -1, 0
    rx1284_cur."!alt"(rx1284_pos, "alt_nfa__39_1351203238.335", $P11)
    goto rx1284_fail3547
  alt1286_03555:
    ge rx1284_pos, rx1284_eos, rx1284_fail3547
    is_cclass $I11, .CCLASS_WORD, rx1284_tgt, rx1284_pos
    if $I11, rx1284_fail3547
    add rx1284_pos, 1
    ge rx1284_pos, rx1284_eos, rx1284_fail3547
    is_cclass $I11, .CCLASS_WORD, rx1284_tgt, rx1284_pos
    unless $I11, rx1284_fail3547
    add rx1284_pos, 1
    goto alt1286_end3554
  alt1286_13556:
    ge rx1284_pos, rx1284_eos, rx1284_fail3547
    is_cclass $I11, .CCLASS_WORD, rx1284_tgt, rx1284_pos
    unless $I11, rx1284_fail3547
    add rx1284_pos, 1
    goto alt1286_end3554
  alt1286_end3554:
    nqp_rxcommit rx1284_bstack, alt1286_end3554
    rx1284_cur."!cursor_pass"(rx1284_pos, 'backtrack'=>1)
    .return (rx1284_cur)
  rx1284_restart3546:
    repr_get_attr_obj rx1284_cstack, rx1284_cur, rx1284_curclass, "$!cstack"
  rx1284_fail3547:
    unless rx1284_bstack, rx1284_done3545
    pop $I19, rx1284_bstack
    if_null rx1284_cstack, rx1284_cstack_done3550
    unless rx1284_cstack, rx1284_cstack_done3550
    dec $I19
    set $P11, rx1284_cstack[$I19]
  rx1284_cstack_done3550:
    pop rx1284_rep, rx1284_bstack
    pop rx1284_pos, rx1284_bstack
    pop $I19, rx1284_bstack
    lt rx1284_pos, -1, rx1284_done3545
    lt rx1284_pos, 0, rx1284_fail3547
    eq $I19, 0, rx1284_fail3547
    nqp_islist $I20, rx1284_cstack
    unless $I20, rx1284_jump3548
    elements $I18, rx1284_bstack
    le $I18, 0, rx1284_cut3549
    dec $I18
    set $I18, rx1284_bstack[$I18]
  rx1284_cut3549:
    assign rx1284_cstack, $I18
  rx1284_jump3548:
    jump $I19
  rx1284_done3545:
    rx1284_cur."!cursor_fail"()
    .return (rx1284_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_230_1351203235.318") :anon :lex :outer("cuid_244_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1391
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1288_tgt
    .local int rx1288_pos
    .local int rx1288_off
    .local int rx1288_eos
    .local int rx1288_rep
    .local pmc rx1288_cur
    .local pmc rx1288_curclass
    .local pmc rx1288_bstack
    .local pmc rx1288_cstack
    (rx1288_cur, rx1288_tgt, rx1288_pos, rx1288_curclass, rx1288_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1288_cur
    length rx1288_eos, rx1288_tgt
    eq $I19, 1, rx1288_restart3560
    gt rx1288_pos, rx1288_eos, rx1288_fail3561
    repr_get_attr_int $I11, self, rx1288_curclass, "$!from"
    ne $I11, -1, rxscan1289_done3567
    goto rxscan1289_scan3566
  rxscan1289_loop3565:
    inc rx1288_pos
    gt rx1288_pos, rx1288_eos, rx1288_fail3561
    repr_bind_attr_int rx1288_cur, rx1288_curclass, "$!from", rx1288_pos
  rxscan1289_scan3566:
    nqp_rxmark rx1288_bstack, rxscan1289_loop3565, rx1288_pos, 0
  rxscan1289_done3567:
    ge rx1288_pos, rx1288_eos, rx1288_fail3561
    substr $S11, rx1288_tgt, rx1288_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1288_fail3561
    repr_bind_attr_int rx1288_cur, rx1288_curclass, "$!pos", rx1288_pos
    $P11 = rx1288_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1288_curclass, "$!pos"
    lt $I11, 0, rx1288_fail3561
    nqp_rxmark rx1288_bstack, rxsubrule1290_pass3568, -1, 0
  rxsubrule1290_pass3568:
    rx1288_cstack = rx1288_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1288_pos, $P11, rx1288_curclass, "$!pos"
    rx1288_cur."!cursor_pass"(rx1288_pos, "assertion:sym<{ }>", 'backtrack'=>1)
    .return (rx1288_cur)
  rx1288_restart3560:
    repr_get_attr_obj rx1288_cstack, rx1288_cur, rx1288_curclass, "$!cstack"
  rx1288_fail3561:
    unless rx1288_bstack, rx1288_done3559
    pop $I19, rx1288_bstack
    if_null rx1288_cstack, rx1288_cstack_done3564
    unless rx1288_cstack, rx1288_cstack_done3564
    dec $I19
    set $P11, rx1288_cstack[$I19]
  rx1288_cstack_done3564:
    pop rx1288_rep, rx1288_bstack
    pop rx1288_pos, rx1288_bstack
    pop $I19, rx1288_bstack
    lt rx1288_pos, -1, rx1288_done3559
    lt rx1288_pos, 0, rx1288_fail3561
    eq $I19, 0, rx1288_fail3561
    nqp_islist $I20, rx1288_cstack
    unless $I20, rx1288_jump3562
    elements $I18, rx1288_bstack
    le $I18, 0, rx1288_cut3563
    dec $I18
    set $I18, rx1288_bstack[$I18]
  rx1288_cut3563:
    assign rx1288_cstack, $I18
  rx1288_jump3562:
    jump $I19
  rx1288_done3559:
    rx1288_cur."!cursor_fail"()
    .return (rx1288_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_231_1351203235.318") :anon :lex :outer("cuid_244_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1395
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_232_1351203235.318' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_233_1351203235.318' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1291_tgt
    .local int rx1291_pos
    .local int rx1291_off
    .local int rx1291_eos
    .local int rx1291_rep
    .local pmc rx1291_cur
    .local pmc rx1291_curclass
    .local pmc rx1291_bstack
    .local pmc rx1291_cstack
    (rx1291_cur, rx1291_tgt, rx1291_pos, rx1291_curclass, rx1291_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1291_cur
    length rx1291_eos, rx1291_tgt
    eq $I19, 1, rx1291_restart3571
    gt rx1291_pos, rx1291_eos, rx1291_fail3572
    repr_get_attr_int $I11, self, rx1291_curclass, "$!from"
    ne $I11, -1, rxscan1292_done3578
    goto rxscan1292_scan3577
  rxscan1292_loop3576:
    inc rx1291_pos
    gt rx1291_pos, rx1291_eos, rx1291_fail3572
    repr_bind_attr_int rx1291_cur, rx1291_curclass, "$!from", rx1291_pos
  rxscan1292_scan3577:
    nqp_rxmark rx1291_bstack, rxscan1292_loop3576, rx1291_pos, 0
  rxscan1292_done3578:
    add $I11, rx1291_pos, 1
    gt $I11, rx1291_eos, rx1291_fail3572
    substr $S10, rx1291_tgt, rx1291_pos, 1
    ne $S10, ucs4:"?", rx1291_fail3572
    add rx1291_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1293_03580
    nqp_push_label $P11, alt1293_13591
    nqp_rxmark rx1291_bstack, alt1293_end3579, -1, 0
    rx1291_cur."!alt"(rx1291_pos, "alt_nfa__40_1351203238.355", $P11)
    goto rx1291_fail3572
  alt1293_03580:
    .const 'Sub' $P5001 = 'cuid_232_1351203235.318' 
    capture_lex $P5001
    repr_bind_attr_int rx1291_cur, rx1291_curclass, "$!pos", rx1291_pos
    $P11 = rx1291_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1291_curclass, "$!pos"
    lt $I11, 0, rx1291_fail3572
    goto alt1293_end3579
  alt1293_13591:
    .const 'Sub' $P5002 = 'cuid_233_1351203235.318' 
    capture_lex $P5002
    repr_bind_attr_int rx1291_cur, rx1291_curclass, "$!pos", rx1291_pos
    $P11 = rx1291_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1291_curclass, "$!pos"
    ge $I11, 0, rx1291_fail3572
    repr_bind_attr_int rx1291_cur, rx1291_curclass, "$!pos", rx1291_pos
    $P11 = rx1291_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1291_curclass, "$!pos"
    lt $I11, 0, rx1291_fail3572
    nqp_rxmark rx1291_bstack, rxsubrule1298_pass3602, -1, 0
  rxsubrule1298_pass3602:
    rx1291_cstack = rx1291_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1291_pos, $P11, rx1291_curclass, "$!pos"
    goto alt1293_end3579
  alt1293_end3579:
    nqp_rxcommit rx1291_bstack, alt1293_end3579
    rx1291_cur."!cursor_pass"(rx1291_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx1291_cur)
  rx1291_restart3571:
    repr_get_attr_obj rx1291_cstack, rx1291_cur, rx1291_curclass, "$!cstack"
  rx1291_fail3572:
    unless rx1291_bstack, rx1291_done3570
    pop $I19, rx1291_bstack
    if_null rx1291_cstack, rx1291_cstack_done3575
    unless rx1291_cstack, rx1291_cstack_done3575
    dec $I19
    set $P11, rx1291_cstack[$I19]
  rx1291_cstack_done3575:
    pop rx1291_rep, rx1291_bstack
    pop rx1291_pos, rx1291_bstack
    pop $I19, rx1291_bstack
    lt rx1291_pos, -1, rx1291_done3570
    lt rx1291_pos, 0, rx1291_fail3572
    eq $I19, 0, rx1291_fail3572
    nqp_islist $I20, rx1291_cstack
    unless $I20, rx1291_jump3573
    elements $I18, rx1291_bstack
    le $I18, 0, rx1291_cut3574
    dec $I18
    set $I18, rx1291_bstack[$I18]
  rx1291_cut3574:
    assign rx1291_cstack, $I18
  rx1291_jump3573:
    jump $I19
  rx1291_done3570:
    rx1291_cur."!cursor_fail"()
    .return (rx1291_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_232_1351203235.318") :anon :lex :outer("cuid_231_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1294_tgt
    .local int rx1294_pos
    .local int rx1294_off
    .local int rx1294_eos
    .local int rx1294_rep
    .local pmc rx1294_cur
    .local pmc rx1294_curclass
    .local pmc rx1294_bstack
    .local pmc rx1294_cstack
    (rx1294_cur, rx1294_tgt, rx1294_pos, rx1294_curclass, rx1294_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1294_cur
    length rx1294_eos, rx1294_tgt
    eq $I19, 1, rx1294_restart3583
    gt rx1294_pos, rx1294_eos, rx1294_fail3584
    repr_get_attr_int $I11, self, rx1294_curclass, "$!from"
    ne $I11, -1, rxscan1295_done3590
    goto rxscan1295_scan3589
  rxscan1295_loop3588:
    inc rx1294_pos
    gt rx1294_pos, rx1294_eos, rx1294_fail3584
    repr_bind_attr_int rx1294_cur, rx1294_curclass, "$!from", rx1294_pos
  rxscan1295_scan3589:
    nqp_rxmark rx1294_bstack, rxscan1295_loop3588, rx1294_pos, 0
  rxscan1295_done3590:
    add $I11, rx1294_pos, 1
    gt $I11, rx1294_eos, rx1294_fail3584
    substr $S10, rx1294_tgt, rx1294_pos, 1
    ne $S10, ucs4:">", rx1294_fail3584
    add rx1294_pos, 1
    rx1294_cur."!cursor_pass"(rx1294_pos, 'backtrack'=>1)
    .return (rx1294_cur)
  rx1294_restart3583:
    repr_get_attr_obj rx1294_cstack, rx1294_cur, rx1294_curclass, "$!cstack"
  rx1294_fail3584:
    unless rx1294_bstack, rx1294_done3582
    pop $I19, rx1294_bstack
    if_null rx1294_cstack, rx1294_cstack_done3587
    unless rx1294_cstack, rx1294_cstack_done3587
    dec $I19
    set $P11, rx1294_cstack[$I19]
  rx1294_cstack_done3587:
    pop rx1294_rep, rx1294_bstack
    pop rx1294_pos, rx1294_bstack
    pop $I19, rx1294_bstack
    lt rx1294_pos, -1, rx1294_done3582
    lt rx1294_pos, 0, rx1294_fail3584
    eq $I19, 0, rx1294_fail3584
    nqp_islist $I20, rx1294_cstack
    unless $I20, rx1294_jump3585
    elements $I18, rx1294_bstack
    le $I18, 0, rx1294_cut3586
    dec $I18
    set $I18, rx1294_bstack[$I18]
  rx1294_cut3586:
    assign rx1294_cstack, $I18
  rx1294_jump3585:
    jump $I19
  rx1294_done3582:
    rx1294_cur."!cursor_fail"()
    .return (rx1294_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_233_1351203235.318") :anon :lex :outer("cuid_231_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1296_tgt
    .local int rx1296_pos
    .local int rx1296_off
    .local int rx1296_eos
    .local int rx1296_rep
    .local pmc rx1296_cur
    .local pmc rx1296_curclass
    .local pmc rx1296_bstack
    .local pmc rx1296_cstack
    (rx1296_cur, rx1296_tgt, rx1296_pos, rx1296_curclass, rx1296_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1296_cur
    length rx1296_eos, rx1296_tgt
    eq $I19, 1, rx1296_restart3594
    gt rx1296_pos, rx1296_eos, rx1296_fail3595
    repr_get_attr_int $I11, self, rx1296_curclass, "$!from"
    ne $I11, -1, rxscan1297_done3601
    goto rxscan1297_scan3600
  rxscan1297_loop3599:
    inc rx1296_pos
    gt rx1296_pos, rx1296_eos, rx1296_fail3595
    repr_bind_attr_int rx1296_cur, rx1296_curclass, "$!from", rx1296_pos
  rxscan1297_scan3600:
    nqp_rxmark rx1296_bstack, rxscan1297_loop3599, rx1296_pos, 0
  rxscan1297_done3601:
    add $I11, rx1296_pos, 1
    gt $I11, rx1296_eos, rx1296_fail3595
    substr $S10, rx1296_tgt, rx1296_pos, 1
    ne $S10, ucs4:"{", rx1296_fail3595
    add rx1296_pos, 1
    rx1296_cur."!cursor_pass"(rx1296_pos, 'backtrack'=>1)
    .return (rx1296_cur)
  rx1296_restart3594:
    repr_get_attr_obj rx1296_cstack, rx1296_cur, rx1296_curclass, "$!cstack"
  rx1296_fail3595:
    unless rx1296_bstack, rx1296_done3593
    pop $I19, rx1296_bstack
    if_null rx1296_cstack, rx1296_cstack_done3598
    unless rx1296_cstack, rx1296_cstack_done3598
    dec $I19
    set $P11, rx1296_cstack[$I19]
  rx1296_cstack_done3598:
    pop rx1296_rep, rx1296_bstack
    pop rx1296_pos, rx1296_bstack
    pop $I19, rx1296_bstack
    lt rx1296_pos, -1, rx1296_done3593
    lt rx1296_pos, 0, rx1296_fail3595
    eq $I19, 0, rx1296_fail3595
    nqp_islist $I20, rx1296_cstack
    unless $I20, rx1296_jump3596
    elements $I18, rx1296_bstack
    le $I18, 0, rx1296_cut3597
    dec $I18
    set $I18, rx1296_bstack[$I18]
  rx1296_cut3597:
    assign rx1296_cstack, $I18
  rx1296_jump3596:
    jump $I19
  rx1296_done3593:
    rx1296_cur."!cursor_fail"()
    .return (rx1296_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_234_1351203235.318") :anon :lex :outer("cuid_244_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1396
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_235_1351203235.318' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_236_1351203235.318' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1299_tgt
    .local int rx1299_pos
    .local int rx1299_off
    .local int rx1299_eos
    .local int rx1299_rep
    .local pmc rx1299_cur
    .local pmc rx1299_curclass
    .local pmc rx1299_bstack
    .local pmc rx1299_cstack
    (rx1299_cur, rx1299_tgt, rx1299_pos, rx1299_curclass, rx1299_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1299_cur
    length rx1299_eos, rx1299_tgt
    eq $I19, 1, rx1299_restart3605
    gt rx1299_pos, rx1299_eos, rx1299_fail3606
    repr_get_attr_int $I11, self, rx1299_curclass, "$!from"
    ne $I11, -1, rxscan1300_done3612
    goto rxscan1300_scan3611
  rxscan1300_loop3610:
    inc rx1299_pos
    gt rx1299_pos, rx1299_eos, rx1299_fail3606
    repr_bind_attr_int rx1299_cur, rx1299_curclass, "$!from", rx1299_pos
  rxscan1300_scan3611:
    nqp_rxmark rx1299_bstack, rxscan1300_loop3610, rx1299_pos, 0
  rxscan1300_done3612:
    add $I11, rx1299_pos, 1
    gt $I11, rx1299_eos, rx1299_fail3606
    substr $S10, rx1299_tgt, rx1299_pos, 1
    ne $S10, ucs4:"!", rx1299_fail3606
    add rx1299_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1301_03614
    nqp_push_label $P11, alt1301_13625
    nqp_rxmark rx1299_bstack, alt1301_end3613, -1, 0
    rx1299_cur."!alt"(rx1299_pos, "alt_nfa__41_1351203238.463", $P11)
    goto rx1299_fail3606
  alt1301_03614:
    .const 'Sub' $P5001 = 'cuid_235_1351203235.318' 
    capture_lex $P5001
    repr_bind_attr_int rx1299_cur, rx1299_curclass, "$!pos", rx1299_pos
    $P11 = rx1299_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1299_curclass, "$!pos"
    lt $I11, 0, rx1299_fail3606
    goto alt1301_end3613
  alt1301_13625:
    .const 'Sub' $P5002 = 'cuid_236_1351203235.318' 
    capture_lex $P5002
    repr_bind_attr_int rx1299_cur, rx1299_curclass, "$!pos", rx1299_pos
    $P11 = rx1299_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1299_curclass, "$!pos"
    ge $I11, 0, rx1299_fail3606
    repr_bind_attr_int rx1299_cur, rx1299_curclass, "$!pos", rx1299_pos
    $P11 = rx1299_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1299_curclass, "$!pos"
    lt $I11, 0, rx1299_fail3606
    nqp_rxmark rx1299_bstack, rxsubrule1306_pass3636, -1, 0
  rxsubrule1306_pass3636:
    rx1299_cstack = rx1299_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1299_pos, $P11, rx1299_curclass, "$!pos"
    goto alt1301_end3613
  alt1301_end3613:
    nqp_rxcommit rx1299_bstack, alt1301_end3613
    rx1299_cur."!cursor_pass"(rx1299_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx1299_cur)
  rx1299_restart3605:
    repr_get_attr_obj rx1299_cstack, rx1299_cur, rx1299_curclass, "$!cstack"
  rx1299_fail3606:
    unless rx1299_bstack, rx1299_done3604
    pop $I19, rx1299_bstack
    if_null rx1299_cstack, rx1299_cstack_done3609
    unless rx1299_cstack, rx1299_cstack_done3609
    dec $I19
    set $P11, rx1299_cstack[$I19]
  rx1299_cstack_done3609:
    pop rx1299_rep, rx1299_bstack
    pop rx1299_pos, rx1299_bstack
    pop $I19, rx1299_bstack
    lt rx1299_pos, -1, rx1299_done3604
    lt rx1299_pos, 0, rx1299_fail3606
    eq $I19, 0, rx1299_fail3606
    nqp_islist $I20, rx1299_cstack
    unless $I20, rx1299_jump3607
    elements $I18, rx1299_bstack
    le $I18, 0, rx1299_cut3608
    dec $I18
    set $I18, rx1299_bstack[$I18]
  rx1299_cut3608:
    assign rx1299_cstack, $I18
  rx1299_jump3607:
    jump $I19
  rx1299_done3604:
    rx1299_cur."!cursor_fail"()
    .return (rx1299_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_235_1351203235.318") :anon :lex :outer("cuid_234_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1302_tgt
    .local int rx1302_pos
    .local int rx1302_off
    .local int rx1302_eos
    .local int rx1302_rep
    .local pmc rx1302_cur
    .local pmc rx1302_curclass
    .local pmc rx1302_bstack
    .local pmc rx1302_cstack
    (rx1302_cur, rx1302_tgt, rx1302_pos, rx1302_curclass, rx1302_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1302_cur
    length rx1302_eos, rx1302_tgt
    eq $I19, 1, rx1302_restart3617
    gt rx1302_pos, rx1302_eos, rx1302_fail3618
    repr_get_attr_int $I11, self, rx1302_curclass, "$!from"
    ne $I11, -1, rxscan1303_done3624
    goto rxscan1303_scan3623
  rxscan1303_loop3622:
    inc rx1302_pos
    gt rx1302_pos, rx1302_eos, rx1302_fail3618
    repr_bind_attr_int rx1302_cur, rx1302_curclass, "$!from", rx1302_pos
  rxscan1303_scan3623:
    nqp_rxmark rx1302_bstack, rxscan1303_loop3622, rx1302_pos, 0
  rxscan1303_done3624:
    add $I11, rx1302_pos, 1
    gt $I11, rx1302_eos, rx1302_fail3618
    substr $S10, rx1302_tgt, rx1302_pos, 1
    ne $S10, ucs4:">", rx1302_fail3618
    add rx1302_pos, 1
    rx1302_cur."!cursor_pass"(rx1302_pos, 'backtrack'=>1)
    .return (rx1302_cur)
  rx1302_restart3617:
    repr_get_attr_obj rx1302_cstack, rx1302_cur, rx1302_curclass, "$!cstack"
  rx1302_fail3618:
    unless rx1302_bstack, rx1302_done3616
    pop $I19, rx1302_bstack
    if_null rx1302_cstack, rx1302_cstack_done3621
    unless rx1302_cstack, rx1302_cstack_done3621
    dec $I19
    set $P11, rx1302_cstack[$I19]
  rx1302_cstack_done3621:
    pop rx1302_rep, rx1302_bstack
    pop rx1302_pos, rx1302_bstack
    pop $I19, rx1302_bstack
    lt rx1302_pos, -1, rx1302_done3616
    lt rx1302_pos, 0, rx1302_fail3618
    eq $I19, 0, rx1302_fail3618
    nqp_islist $I20, rx1302_cstack
    unless $I20, rx1302_jump3619
    elements $I18, rx1302_bstack
    le $I18, 0, rx1302_cut3620
    dec $I18
    set $I18, rx1302_bstack[$I18]
  rx1302_cut3620:
    assign rx1302_cstack, $I18
  rx1302_jump3619:
    jump $I19
  rx1302_done3616:
    rx1302_cur."!cursor_fail"()
    .return (rx1302_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_236_1351203235.318") :anon :lex :outer("cuid_234_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1304_tgt
    .local int rx1304_pos
    .local int rx1304_off
    .local int rx1304_eos
    .local int rx1304_rep
    .local pmc rx1304_cur
    .local pmc rx1304_curclass
    .local pmc rx1304_bstack
    .local pmc rx1304_cstack
    (rx1304_cur, rx1304_tgt, rx1304_pos, rx1304_curclass, rx1304_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1304_cur
    length rx1304_eos, rx1304_tgt
    eq $I19, 1, rx1304_restart3628
    gt rx1304_pos, rx1304_eos, rx1304_fail3629
    repr_get_attr_int $I11, self, rx1304_curclass, "$!from"
    ne $I11, -1, rxscan1305_done3635
    goto rxscan1305_scan3634
  rxscan1305_loop3633:
    inc rx1304_pos
    gt rx1304_pos, rx1304_eos, rx1304_fail3629
    repr_bind_attr_int rx1304_cur, rx1304_curclass, "$!from", rx1304_pos
  rxscan1305_scan3634:
    nqp_rxmark rx1304_bstack, rxscan1305_loop3633, rx1304_pos, 0
  rxscan1305_done3635:
    add $I11, rx1304_pos, 1
    gt $I11, rx1304_eos, rx1304_fail3629
    substr $S10, rx1304_tgt, rx1304_pos, 1
    ne $S10, ucs4:"{", rx1304_fail3629
    add rx1304_pos, 1
    rx1304_cur."!cursor_pass"(rx1304_pos, 'backtrack'=>1)
    .return (rx1304_cur)
  rx1304_restart3628:
    repr_get_attr_obj rx1304_cstack, rx1304_cur, rx1304_curclass, "$!cstack"
  rx1304_fail3629:
    unless rx1304_bstack, rx1304_done3627
    pop $I19, rx1304_bstack
    if_null rx1304_cstack, rx1304_cstack_done3632
    unless rx1304_cstack, rx1304_cstack_done3632
    dec $I19
    set $P11, rx1304_cstack[$I19]
  rx1304_cstack_done3632:
    pop rx1304_rep, rx1304_bstack
    pop rx1304_pos, rx1304_bstack
    pop $I19, rx1304_bstack
    lt rx1304_pos, -1, rx1304_done3627
    lt rx1304_pos, 0, rx1304_fail3629
    eq $I19, 0, rx1304_fail3629
    nqp_islist $I20, rx1304_cstack
    unless $I20, rx1304_jump3630
    elements $I18, rx1304_bstack
    le $I18, 0, rx1304_cut3631
    dec $I18
    set $I18, rx1304_bstack[$I18]
  rx1304_cut3631:
    assign rx1304_cstack, $I18
  rx1304_jump3630:
    jump $I19
  rx1304_done3627:
    rx1304_cur."!cursor_fail"()
    .return (rx1304_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_237_1351203235.318") :anon :lex :outer("cuid_244_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1398
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_238_1351203235.318' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1307_tgt
    .local int rx1307_pos
    .local int rx1307_off
    .local int rx1307_eos
    .local int rx1307_rep
    .local pmc rx1307_cur
    .local pmc rx1307_curclass
    .local pmc rx1307_bstack
    .local pmc rx1307_cstack
    (rx1307_cur, rx1307_tgt, rx1307_pos, rx1307_curclass, rx1307_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1307_cur
    length rx1307_eos, rx1307_tgt
    eq $I19, 1, rx1307_restart3639
    gt rx1307_pos, rx1307_eos, rx1307_fail3640
    repr_get_attr_int $I11, self, rx1307_curclass, "$!from"
    ne $I11, -1, rxscan1308_done3646
    goto rxscan1308_scan3645
  rxscan1308_loop3644:
    inc rx1307_pos
    gt rx1307_pos, rx1307_eos, rx1307_fail3640
    repr_bind_attr_int rx1307_cur, rx1307_curclass, "$!from", rx1307_pos
  rxscan1308_scan3645:
    nqp_rxmark rx1307_bstack, rxscan1308_loop3644, rx1307_pos, 0
  rxscan1308_done3646:
    nqp_rxmark rx1307_bstack, rxcap1309_fail3648, rx1307_pos, 0
    ge rx1307_pos, rx1307_eos, rx1307_fail3640
    substr $S11, rx1307_tgt, rx1307_pos, 1
    index $I11, ucs4:"?!", $S11
    lt $I11, 0, rx1307_fail3640
    inc rx1307_pos
    .const 'Sub' $P5001 = 'cuid_238_1351203235.318' 
    capture_lex $P5001
    repr_bind_attr_int rx1307_cur, rx1307_curclass, "$!pos", rx1307_pos
    $P11 = rx1307_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1307_curclass, "$!pos"
    lt $I11, 0, rx1307_fail3640
    nqp_rxpeek $I19, rx1307_bstack, rxcap1309_fail3648
    inc $I19
    set $I11, rx1307_bstack[$I19]
    repr_bind_attr_int rx1307_cur, rx1307_curclass, "$!pos", rx1307_pos
    $P11 = rx1307_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1307_pos)
    rx1307_cstack = rx1307_cur."!cursor_capture"($P11, "zw")
    goto rxcap1309_done3647
  rxcap1309_fail3648:
    goto rx1307_fail3640
  rxcap1309_done3647:
    repr_bind_attr_int rx1307_cur, rx1307_curclass, "$!pos", rx1307_pos
    $P11 = rx1307_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1307_curclass, "$!pos"
    lt $I11, 0, rx1307_fail3640
    nqp_rxmark rx1307_bstack, rxsubrule1312_pass3659, -1, 0
  rxsubrule1312_pass3659:
    rx1307_cstack = rx1307_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1307_pos, $P11, rx1307_curclass, "$!pos"
    rx1307_cur."!cursor_pass"(rx1307_pos, "assertion:sym<?{ }>", 'backtrack'=>1)
    .return (rx1307_cur)
  rx1307_restart3639:
    repr_get_attr_obj rx1307_cstack, rx1307_cur, rx1307_curclass, "$!cstack"
  rx1307_fail3640:
    unless rx1307_bstack, rx1307_done3638
    pop $I19, rx1307_bstack
    if_null rx1307_cstack, rx1307_cstack_done3643
    unless rx1307_cstack, rx1307_cstack_done3643
    dec $I19
    set $P11, rx1307_cstack[$I19]
  rx1307_cstack_done3643:
    pop rx1307_rep, rx1307_bstack
    pop rx1307_pos, rx1307_bstack
    pop $I19, rx1307_bstack
    lt rx1307_pos, -1, rx1307_done3638
    lt rx1307_pos, 0, rx1307_fail3640
    eq $I19, 0, rx1307_fail3640
    nqp_islist $I20, rx1307_cstack
    unless $I20, rx1307_jump3641
    elements $I18, rx1307_bstack
    le $I18, 0, rx1307_cut3642
    dec $I18
    set $I18, rx1307_bstack[$I18]
  rx1307_cut3642:
    assign rx1307_cstack, $I18
  rx1307_jump3641:
    jump $I19
  rx1307_done3638:
    rx1307_cur."!cursor_fail"()
    .return (rx1307_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_238_1351203235.318") :anon :lex :outer("cuid_237_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1310_tgt
    .local int rx1310_pos
    .local int rx1310_off
    .local int rx1310_eos
    .local int rx1310_rep
    .local pmc rx1310_cur
    .local pmc rx1310_curclass
    .local pmc rx1310_bstack
    .local pmc rx1310_cstack
    (rx1310_cur, rx1310_tgt, rx1310_pos, rx1310_curclass, rx1310_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1310_cur
    length rx1310_eos, rx1310_tgt
    eq $I19, 1, rx1310_restart3651
    gt rx1310_pos, rx1310_eos, rx1310_fail3652
    repr_get_attr_int $I11, self, rx1310_curclass, "$!from"
    ne $I11, -1, rxscan1311_done3658
    goto rxscan1311_scan3657
  rxscan1311_loop3656:
    inc rx1310_pos
    gt rx1310_pos, rx1310_eos, rx1310_fail3652
    repr_bind_attr_int rx1310_cur, rx1310_curclass, "$!from", rx1310_pos
  rxscan1311_scan3657:
    nqp_rxmark rx1310_bstack, rxscan1311_loop3656, rx1310_pos, 0
  rxscan1311_done3658:
    add $I11, rx1310_pos, 1
    gt $I11, rx1310_eos, rx1310_fail3652
    substr $S10, rx1310_tgt, rx1310_pos, 1
    ne $S10, ucs4:"{", rx1310_fail3652
    add rx1310_pos, 1
    rx1310_cur."!cursor_pass"(rx1310_pos, 'backtrack'=>1)
    .return (rx1310_cur)
  rx1310_restart3651:
    repr_get_attr_obj rx1310_cstack, rx1310_cur, rx1310_curclass, "$!cstack"
  rx1310_fail3652:
    unless rx1310_bstack, rx1310_done3650
    pop $I19, rx1310_bstack
    if_null rx1310_cstack, rx1310_cstack_done3655
    unless rx1310_cstack, rx1310_cstack_done3655
    dec $I19
    set $P11, rx1310_cstack[$I19]
  rx1310_cstack_done3655:
    pop rx1310_rep, rx1310_bstack
    pop rx1310_pos, rx1310_bstack
    pop $I19, rx1310_bstack
    lt rx1310_pos, -1, rx1310_done3650
    lt rx1310_pos, 0, rx1310_fail3652
    eq $I19, 0, rx1310_fail3652
    nqp_islist $I20, rx1310_cstack
    unless $I20, rx1310_jump3653
    elements $I18, rx1310_bstack
    le $I18, 0, rx1310_cut3654
    dec $I18
    set $I18, rx1310_bstack[$I18]
  rx1310_cut3654:
    assign rx1310_cstack, $I18
  rx1310_jump3653:
    jump $I19
  rx1310_done3650:
    rx1310_cur."!cursor_fail"()
    .return (rx1310_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_239_1351203235.318") :anon :lex :outer("cuid_244_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1402
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_240_1351203235.318' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1313_tgt
    .local int rx1313_pos
    .local int rx1313_off
    .local int rx1313_eos
    .local int rx1313_rep
    .local pmc rx1313_cur
    .local pmc rx1313_curclass
    .local pmc rx1313_bstack
    .local pmc rx1313_cstack
    (rx1313_cur, rx1313_tgt, rx1313_pos, rx1313_curclass, rx1313_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1313_cur
    length rx1313_eos, rx1313_tgt
    eq $I19, 1, rx1313_restart3662
    gt rx1313_pos, rx1313_eos, rx1313_fail3663
    repr_get_attr_int $I11, self, rx1313_curclass, "$!from"
    ne $I11, -1, rxscan1314_done3669
    goto rxscan1314_scan3668
  rxscan1314_loop3667:
    inc rx1313_pos
    gt rx1313_pos, rx1313_eos, rx1313_fail3663
    repr_bind_attr_int rx1313_cur, rx1313_curclass, "$!from", rx1313_pos
  rxscan1314_scan3668:
    nqp_rxmark rx1313_bstack, rxscan1314_loop3667, rx1313_pos, 0
  rxscan1314_done3669:
    repr_bind_attr_int rx1313_cur, rx1313_curclass, "$!pos", rx1313_pos
    $P11 = rx1313_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1313_curclass, "$!pos"
    lt $I11, 0, rx1313_fail3663
    nqp_rxmark rx1313_bstack, rxsubrule1315_pass3670, -1, 0
  rxsubrule1315_pass3670:
    rx1313_cstack = rx1313_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx1313_pos, $P11, rx1313_curclass, "$!pos"
    nqp_rxmark rx1313_bstack, rxquantr1316_done3672, rx1313_pos, 0
  rxquantr1316_loop3671:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1317_03674
    nqp_push_label $P11, alt1317_13685
    nqp_push_label $P11, alt1317_23687
    nqp_push_label $P11, alt1317_33689
    nqp_push_label $P11, alt1317_43691
    nqp_rxmark rx1313_bstack, alt1317_end3673, -1, 0
    rx1313_cur."!alt"(rx1313_pos, "alt_nfa__42_1351203238.493", $P11)
    goto rx1313_fail3663
  alt1317_03674:
    .const 'Sub' $P5001 = 'cuid_240_1351203235.318' 
    capture_lex $P5001
    repr_bind_attr_int rx1313_cur, rx1313_curclass, "$!pos", rx1313_pos
    $P11 = rx1313_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1313_curclass, "$!pos"
    lt $I11, 0, rx1313_fail3663
    goto alt1317_end3673
  alt1317_13685:
    add $I11, rx1313_pos, 1
    gt $I11, rx1313_eos, rx1313_fail3663
    substr $S10, rx1313_tgt, rx1313_pos, 1
    ne $S10, ucs4:"=", rx1313_fail3663
    add rx1313_pos, 1
    repr_bind_attr_int rx1313_cur, rx1313_curclass, "$!pos", rx1313_pos
    $P11 = rx1313_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1313_curclass, "$!pos"
    lt $I11, 0, rx1313_fail3663
    nqp_rxmark rx1313_bstack, rxsubrule1320_pass3686, -1, 0
  rxsubrule1320_pass3686:
    rx1313_cstack = rx1313_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1313_pos, $P11, rx1313_curclass, "$!pos"
    goto alt1317_end3673
  alt1317_23687:
    add $I11, rx1313_pos, 1
    gt $I11, rx1313_eos, rx1313_fail3663
    substr $S10, rx1313_tgt, rx1313_pos, 1
    ne $S10, ucs4:":", rx1313_fail3663
    add rx1313_pos, 1
    repr_bind_attr_int rx1313_cur, rx1313_curclass, "$!pos", rx1313_pos
    $P11 = rx1313_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1313_curclass, "$!pos"
    lt $I11, 0, rx1313_fail3663
    nqp_rxmark rx1313_bstack, rxsubrule1321_pass3688, -1, 0
  rxsubrule1321_pass3688:
    rx1313_cstack = rx1313_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1313_pos, $P11, rx1313_curclass, "$!pos"
    goto alt1317_end3673
  alt1317_33689:
    add $I11, rx1313_pos, 1
    gt $I11, rx1313_eos, rx1313_fail3663
    substr $S10, rx1313_tgt, rx1313_pos, 1
    ne $S10, ucs4:"(", rx1313_fail3663
    add rx1313_pos, 1
    repr_bind_attr_int rx1313_cur, rx1313_curclass, "$!pos", rx1313_pos
    $P11 = rx1313_cur."LANG"("MAIN", "arglist")
    repr_get_attr_int $I11, $P11, rx1313_curclass, "$!pos"
    lt $I11, 0, rx1313_fail3663
    nqp_rxmark rx1313_bstack, rxsubrule1322_pass3690, -1, 0
  rxsubrule1322_pass3690:
    rx1313_cstack = rx1313_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1313_pos, $P11, rx1313_curclass, "$!pos"
    add $I11, rx1313_pos, 1
    gt $I11, rx1313_eos, rx1313_fail3663
    substr $S10, rx1313_tgt, rx1313_pos, 1
    ne $S10, ucs4:")", rx1313_fail3663
    add rx1313_pos, 1
    goto alt1317_end3673
  alt1317_43691:
    repr_bind_attr_int rx1313_cur, rx1313_curclass, "$!pos", rx1313_pos
    $P11 = rx1313_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx1313_curclass, "$!pos"
    lt $I11, 0, rx1313_fail3663
    repr_get_attr_int rx1313_pos, $P11, rx1313_curclass, "$!pos"
    repr_bind_attr_int rx1313_cur, rx1313_curclass, "$!pos", rx1313_pos
    $P11 = rx1313_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx1313_curclass, "$!pos"
    lt $I11, 0, rx1313_fail3663
    nqp_rxmark rx1313_bstack, rxsubrule1324_pass3693, -1, 0
  rxsubrule1324_pass3693:
    rx1313_cstack = rx1313_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx1313_pos, $P11, rx1313_curclass, "$!pos"
    goto alt1317_end3673
  alt1317_end3673:
    nqp_rxpeek $I19, rx1313_bstack, rxquantr1316_done3672
    inc $I19
    inc $I19
    set rx1313_rep, rx1313_bstack[$I19]
    nqp_rxcommit rx1313_bstack, rxquantr1316_done3672
    inc rx1313_rep
  rxquantr1316_done3672:
    rx1313_cur."!cursor_pass"(rx1313_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx1313_cur)
  rx1313_restart3662:
    repr_get_attr_obj rx1313_cstack, rx1313_cur, rx1313_curclass, "$!cstack"
  rx1313_fail3663:
    unless rx1313_bstack, rx1313_done3661
    pop $I19, rx1313_bstack
    if_null rx1313_cstack, rx1313_cstack_done3666
    unless rx1313_cstack, rx1313_cstack_done3666
    dec $I19
    set $P11, rx1313_cstack[$I19]
  rx1313_cstack_done3666:
    pop rx1313_rep, rx1313_bstack
    pop rx1313_pos, rx1313_bstack
    pop $I19, rx1313_bstack
    lt rx1313_pos, -1, rx1313_done3661
    lt rx1313_pos, 0, rx1313_fail3663
    eq $I19, 0, rx1313_fail3663
    nqp_islist $I20, rx1313_cstack
    unless $I20, rx1313_jump3664
    elements $I18, rx1313_bstack
    le $I18, 0, rx1313_cut3665
    dec $I18
    set $I18, rx1313_bstack[$I18]
  rx1313_cut3665:
    assign rx1313_cstack, $I18
  rx1313_jump3664:
    jump $I19
  rx1313_done3661:
    rx1313_cur."!cursor_fail"()
    .return (rx1313_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_240_1351203235.318") :anon :lex :outer("cuid_239_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1318_tgt
    .local int rx1318_pos
    .local int rx1318_off
    .local int rx1318_eos
    .local int rx1318_rep
    .local pmc rx1318_cur
    .local pmc rx1318_curclass
    .local pmc rx1318_bstack
    .local pmc rx1318_cstack
    (rx1318_cur, rx1318_tgt, rx1318_pos, rx1318_curclass, rx1318_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1318_cur
    length rx1318_eos, rx1318_tgt
    eq $I19, 1, rx1318_restart3677
    gt rx1318_pos, rx1318_eos, rx1318_fail3678
    repr_get_attr_int $I11, self, rx1318_curclass, "$!from"
    ne $I11, -1, rxscan1319_done3684
    goto rxscan1319_scan3683
  rxscan1319_loop3682:
    inc rx1318_pos
    gt rx1318_pos, rx1318_eos, rx1318_fail3678
    repr_bind_attr_int rx1318_cur, rx1318_curclass, "$!from", rx1318_pos
  rxscan1319_scan3683:
    nqp_rxmark rx1318_bstack, rxscan1319_loop3682, rx1318_pos, 0
  rxscan1319_done3684:
    add $I11, rx1318_pos, 1
    gt $I11, rx1318_eos, rx1318_fail3678
    substr $S10, rx1318_tgt, rx1318_pos, 1
    ne $S10, ucs4:">", rx1318_fail3678
    add rx1318_pos, 1
    rx1318_cur."!cursor_pass"(rx1318_pos, 'backtrack'=>1)
    .return (rx1318_cur)
  rx1318_restart3677:
    repr_get_attr_obj rx1318_cstack, rx1318_cur, rx1318_curclass, "$!cstack"
  rx1318_fail3678:
    unless rx1318_bstack, rx1318_done3676
    pop $I19, rx1318_bstack
    if_null rx1318_cstack, rx1318_cstack_done3681
    unless rx1318_cstack, rx1318_cstack_done3681
    dec $I19
    set $P11, rx1318_cstack[$I19]
  rx1318_cstack_done3681:
    pop rx1318_rep, rx1318_bstack
    pop rx1318_pos, rx1318_bstack
    pop $I19, rx1318_bstack
    lt rx1318_pos, -1, rx1318_done3676
    lt rx1318_pos, 0, rx1318_fail3678
    eq $I19, 0, rx1318_fail3678
    nqp_islist $I20, rx1318_cstack
    unless $I20, rx1318_jump3679
    elements $I18, rx1318_bstack
    le $I18, 0, rx1318_cut3680
    dec $I18
    set $I18, rx1318_bstack[$I18]
  rx1318_cut3680:
    assign rx1318_cstack, $I18
  rx1318_jump3679:
    jump $I19
  rx1318_done3676:
    rx1318_cur."!cursor_fail"()
    .return (rx1318_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_241_1351203235.318") :anon :lex :outer("cuid_244_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1413
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1325_tgt
    .local int rx1325_pos
    .local int rx1325_off
    .local int rx1325_eos
    .local int rx1325_rep
    .local pmc rx1325_cur
    .local pmc rx1325_curclass
    .local pmc rx1325_bstack
    .local pmc rx1325_cstack
    (rx1325_cur, rx1325_tgt, rx1325_pos, rx1325_curclass, rx1325_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1325_cur
    length rx1325_eos, rx1325_tgt
    eq $I19, 1, rx1325_restart3696
    gt rx1325_pos, rx1325_eos, rx1325_fail3697
    repr_get_attr_int $I11, self, rx1325_curclass, "$!from"
    ne $I11, -1, rxscan1326_done3703
    goto rxscan1326_scan3702
  rxscan1326_loop3701:
    inc rx1325_pos
    gt rx1325_pos, rx1325_eos, rx1325_fail3697
    repr_bind_attr_int rx1325_cur, rx1325_curclass, "$!from", rx1325_pos
  rxscan1326_scan3702:
    nqp_rxmark rx1325_bstack, rxscan1326_loop3701, rx1325_pos, 0
  rxscan1326_done3703:
    ge rx1325_pos, rx1325_eos, rx1325_fail3697
    substr $S11, rx1325_tgt, rx1325_pos, 1
    index $I11, ucs4:"$@", $S11
    lt $I11, 0, rx1325_fail3697
    repr_bind_attr_int rx1325_cur, rx1325_curclass, "$!pos", rx1325_pos
    $P11 = rx1325_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1325_curclass, "$!pos"
    lt $I11, 0, rx1325_fail3697
    nqp_rxmark rx1325_bstack, rxsubrule1327_pass3704, -1, 0
  rxsubrule1327_pass3704:
    rx1325_cstack = rx1325_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1325_pos, $P11, rx1325_curclass, "$!pos"
    rx1325_cur."!cursor_pass"(rx1325_pos, "assertion:sym<var>", 'backtrack'=>1)
    .return (rx1325_cur)
  rx1325_restart3696:
    repr_get_attr_obj rx1325_cstack, rx1325_cur, rx1325_curclass, "$!cstack"
  rx1325_fail3697:
    unless rx1325_bstack, rx1325_done3695
    pop $I19, rx1325_bstack
    if_null rx1325_cstack, rx1325_cstack_done3700
    unless rx1325_cstack, rx1325_cstack_done3700
    dec $I19
    set $P11, rx1325_cstack[$I19]
  rx1325_cstack_done3700:
    pop rx1325_rep, rx1325_bstack
    pop rx1325_pos, rx1325_bstack
    pop $I19, rx1325_bstack
    lt rx1325_pos, -1, rx1325_done3695
    lt rx1325_pos, 0, rx1325_fail3697
    eq $I19, 0, rx1325_fail3697
    nqp_islist $I20, rx1325_cstack
    unless $I20, rx1325_jump3698
    elements $I18, rx1325_bstack
    le $I18, 0, rx1325_cut3699
    dec $I18
    set $I18, rx1325_bstack[$I18]
  rx1325_cut3699:
    assign rx1325_cstack, $I18
  rx1325_jump3698:
    jump $I19
  rx1325_done3695:
    rx1325_cur."!cursor_fail"()
    .return (rx1325_cur) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_242_1351203235.318") :anon :lex :outer("cuid_244_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1417
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1328_tgt
    .local int rx1328_pos
    .local int rx1328_off
    .local int rx1328_eos
    .local int rx1328_rep
    .local pmc rx1328_cur
    .local pmc rx1328_curclass
    .local pmc rx1328_bstack
    .local pmc rx1328_cstack
    (rx1328_cur, rx1328_tgt, rx1328_pos, rx1328_curclass, rx1328_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1328_cur
    length rx1328_eos, rx1328_tgt
    eq $I19, 1, rx1328_restart3707
    gt rx1328_pos, rx1328_eos, rx1328_fail3708
    repr_get_attr_int $I11, self, rx1328_curclass, "$!from"
    ne $I11, -1, rxscan1329_done3714
    goto rxscan1329_scan3713
  rxscan1329_loop3712:
    inc rx1328_pos
    gt rx1328_pos, rx1328_eos, rx1328_fail3708
    repr_bind_attr_int rx1328_cur, rx1328_curclass, "$!from", rx1328_pos
  rxscan1329_scan3713:
    nqp_rxmark rx1328_bstack, rxscan1329_loop3712, rx1328_pos, 0
  rxscan1329_done3714:
    repr_bind_attr_int rx1328_cur, rx1328_curclass, "$!pos", rx1328_pos
    $P11 = rx1328_cur."LANG"("MAIN", "pblock")
    repr_get_attr_int $I11, $P11, rx1328_curclass, "$!pos"
    lt $I11, 0, rx1328_fail3708
    nqp_rxmark rx1328_bstack, rxsubrule1330_pass3715, -1, 0
  rxsubrule1330_pass3715:
    rx1328_cstack = rx1328_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx1328_pos, $P11, rx1328_curclass, "$!pos"
    rx1328_cur."!cursor_pass"(rx1328_pos, "codeblock", 'backtrack'=>1)
    .return (rx1328_cur)
  rx1328_restart3707:
    repr_get_attr_obj rx1328_cstack, rx1328_cur, rx1328_curclass, "$!cstack"
  rx1328_fail3708:
    unless rx1328_bstack, rx1328_done3706
    pop $I19, rx1328_bstack
    if_null rx1328_cstack, rx1328_cstack_done3711
    unless rx1328_cstack, rx1328_cstack_done3711
    dec $I19
    set $P11, rx1328_cstack[$I19]
  rx1328_cstack_done3711:
    pop rx1328_rep, rx1328_bstack
    pop rx1328_pos, rx1328_bstack
    pop $I19, rx1328_bstack
    lt rx1328_pos, -1, rx1328_done3706
    lt rx1328_pos, 0, rx1328_fail3708
    eq $I19, 0, rx1328_fail3708
    nqp_islist $I20, rx1328_cstack
    unless $I20, rx1328_jump3709
    elements $I18, rx1328_bstack
    le $I18, 0, rx1328_cut3710
    dec $I18
    set $I18, rx1328_bstack[$I18]
  rx1328_cut3710:
    assign rx1328_cstack, $I18
  rx1328_jump3709:
    jump $I19
  rx1328_done3706:
    rx1328_cur."!cursor_fail"()
    .return (rx1328_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_243_1351203235.318") :anon :lex :outer("cuid_244_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1421
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1331_tgt
    .local int rx1331_pos
    .local int rx1331_off
    .local int rx1331_eos
    .local int rx1331_rep
    .local pmc rx1331_cur
    .local pmc rx1331_curclass
    .local pmc rx1331_bstack
    .local pmc rx1331_cstack
    (rx1331_cur, rx1331_tgt, rx1331_pos, rx1331_curclass, rx1331_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1331_cur
    length rx1331_eos, rx1331_tgt
    eq $I19, 1, rx1331_restart3718
    gt rx1331_pos, rx1331_eos, rx1331_fail3719
    repr_get_attr_int $I11, self, rx1331_curclass, "$!from"
    ne $I11, -1, rxscan1332_done3725
    goto rxscan1332_scan3724
  rxscan1332_loop3723:
    inc rx1331_pos
    gt rx1331_pos, rx1331_eos, rx1331_fail3719
    repr_bind_attr_int rx1331_cur, rx1331_curclass, "$!from", rx1331_pos
  rxscan1332_scan3724:
    nqp_rxmark rx1331_bstack, rxscan1332_loop3723, rx1331_pos, 0
  rxscan1332_done3725:
    repr_bind_attr_int rx1331_cur, rx1331_curclass, "$!pos", rx1331_pos
    $P11 = rx1331_cur."LANG"("MAIN", "quote_EXPR")
    repr_get_attr_int $I11, $P11, rx1331_curclass, "$!pos"
    lt $I11, 0, rx1331_fail3719
    nqp_rxmark rx1331_bstack, rxsubrule1333_pass3726, -1, 0
  rxsubrule1333_pass3726:
    rx1331_cstack = rx1331_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1331_pos, $P11, rx1331_curclass, "$!pos"
    rx1331_cur."!cursor_pass"(rx1331_pos, "arg", 'backtrack'=>1)
    .return (rx1331_cur)
  rx1331_restart3718:
    repr_get_attr_obj rx1331_cstack, rx1331_cur, rx1331_curclass, "$!cstack"
  rx1331_fail3719:
    unless rx1331_bstack, rx1331_done3717
    pop $I19, rx1331_bstack
    if_null rx1331_cstack, rx1331_cstack_done3722
    unless rx1331_cstack, rx1331_cstack_done3722
    dec $I19
    set $P11, rx1331_cstack[$I19]
  rx1331_cstack_done3722:
    pop rx1331_rep, rx1331_bstack
    pop rx1331_pos, rx1331_bstack
    pop $I19, rx1331_bstack
    lt rx1331_pos, -1, rx1331_done3717
    lt rx1331_pos, 0, rx1331_fail3719
    eq $I19, 0, rx1331_fail3719
    nqp_islist $I20, rx1331_cstack
    unless $I20, rx1331_jump3720
    elements $I18, rx1331_bstack
    le $I18, 0, rx1331_cut3721
    dec $I18
    set $I18, rx1331_bstack[$I18]
  rx1331_cut3721:
    assign rx1331_cstack, $I18
  rx1331_jump3720:
    jump $I19
  rx1331_done3717:
    rx1331_cur."!cursor_fail"()
    .return (rx1331_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_409_1351203235.318") :anon :lex :outer("cuid_1_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1432
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3728
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5003
  fallback3728:
    set $P101, $P5002
    nqp_get_sc_object $P5007, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3731
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5008
  fallback3731:
    type_check $I5001, $P101, $P5004
    if $I5001 goto unless1334_end3730 
.annotate 'line', 1434
    box $P5009, "Pre-increment can only work on a variable"
    die $P5009
  unless1334_end3730:
.annotate 'line', 1437
    nqp_get_sc_object $P5013, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback3732
    nqp_get_sc_object $P5014, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5014
  fallback3732:
.annotate 'line', 1440
    nqp_get_sc_object $P5018, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback3733
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5015, $P5019
  fallback3733:
.annotate 'line', 1443
    nqp_get_sc_object $P5023, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["IVal"]
    unless_null $P5020, fallback3734
    nqp_get_sc_object $P5024, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5020, $P5024
  fallback3734:
    $P5025 = $P5020."new"(1 :named("value"))
    $P5026 = $P5015."new"($P101, $P5025, "add_n" :named("op"))
    $P5027 = $P5010."new"($P101, $P5026, "bind" :named("op"))
    $P5028 = _lex_param_0."as_post"($P5027)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_410_1351203235.318") :anon :lex :outer("cuid_1_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1447
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3735
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5003
  fallback3735:
    set $P101, $P5002
    nqp_get_sc_object $P5007, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3738
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5008
  fallback3738:
    type_check $I5001, $P101, $P5004
    if $I5001 goto unless1335_end3737 
.annotate 'line', 1449
    box $P5009, "Pre-decrement can only work on a variable"
    die $P5009
  unless1335_end3737:
.annotate 'line', 1452
    nqp_get_sc_object $P5013, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback3739
    nqp_get_sc_object $P5014, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5014
  fallback3739:
.annotate 'line', 1455
    nqp_get_sc_object $P5018, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback3740
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5015, $P5019
  fallback3740:
.annotate 'line', 1458
    nqp_get_sc_object $P5023, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["IVal"]
    unless_null $P5020, fallback3741
    nqp_get_sc_object $P5024, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5020, $P5024
  fallback3741:
    $P5025 = $P5020."new"(1 :named("value"))
    $P5026 = $P5015."new"($P101, $P5025, "sub_n" :named("op"))
    $P5027 = $P5010."new"($P101, $P5026, "bind" :named("op"))
    $P5028 = _lex_param_0."as_post"($P5027)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_411_1351203235.318") :anon :lex :outer("cuid_1_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1462
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3742
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5004
  fallback3742:
    set $P101, $P5003
.annotate 'line', 1464
    nqp_get_sc_object $P5008, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3743
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5005, $P5009
  fallback3743:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    nqp_get_sc_object $P5014, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3746
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5015
  fallback3746:
    type_check $I5001, $P101, $P5011
    if $I5001 goto unless1336_end3745 
.annotate 'line', 1465
    box $P5016, "Post-increment can only work on a variable"
    die $P5016
  unless1336_end3745:
.annotate 'line', 1468
    nqp_get_sc_object $P5020, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Stmt"]
    unless_null $P5017, fallback3747
    nqp_get_sc_object $P5021, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5017, $P5021
  fallback3747:
.annotate 'line', 1470
    nqp_get_sc_object $P5025, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Op"]
    unless_null $P5022, fallback3748
    nqp_get_sc_object $P5026, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5022, $P5026
  fallback3748:
.annotate 'line', 1472
    nqp_get_sc_object $P5030, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback3749
    nqp_get_sc_object $P5031, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5027, $P5031
  fallback3749:
    $P5032 = $P101."returns"()
    $P5033 = $P5027."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"), $P5032 :named("returns"))
    $P5034 = $P5022."new"($P5033, $P101, "bind" :named("op"))
.annotate 'line', 1475
    nqp_get_sc_object $P5038, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Op"]
    unless_null $P5035, fallback3750
    nqp_get_sc_object $P5039, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5035, $P5039
  fallback3750:
.annotate 'line', 1478
    nqp_get_sc_object $P5043, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Op"]
    unless_null $P5040, fallback3751
    nqp_get_sc_object $P5044, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5040, $P5044
  fallback3751:
.annotate 'line', 1480
    nqp_get_sc_object $P5048, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["Var"]
    unless_null $P5045, fallback3752
    nqp_get_sc_object $P5049, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5045, $P5049
  fallback3752:
    $P5050 = $P101."returns"()
    $P5051 = $P5045."new"($P102 :named("name"), "local" :named("scope"), $P5050 :named("returns"))
.annotate 'line', 1481
    nqp_get_sc_object $P5055, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["IVal"]
    unless_null $P5052, fallback3753
    nqp_get_sc_object $P5056, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5052, $P5056
  fallback3753:
    $P5057 = $P5052."new"(1 :named("value"))
    $P5058 = $P5040."new"($P5051, $P5057, "add_n" :named("op"))
    $P5059 = $P5035."new"($P101, $P5058, "bind" :named("op"))
    $P5060 = $P5017."new"($P5034, $P5059, 0 :named("resultchild"))
    $P5061 = _lex_param_0."as_post"($P5060)
    .return ($P5061) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_412_1351203235.318") :anon :lex :outer("cuid_1_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1486
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3754
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5004
  fallback3754:
    set $P101, $P5003
.annotate 'line', 1488
    nqp_get_sc_object $P5008, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3755
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5005, $P5009
  fallback3755:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    nqp_get_sc_object $P5014, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3758
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5015
  fallback3758:
    type_check $I5001, $P101, $P5011
    if $I5001 goto unless1337_end3757 
.annotate 'line', 1489
    box $P5016, "Post-decrement can only work on a variable"
    die $P5016
  unless1337_end3757:
.annotate 'line', 1492
    nqp_get_sc_object $P5020, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Stmt"]
    unless_null $P5017, fallback3759
    nqp_get_sc_object $P5021, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5017, $P5021
  fallback3759:
.annotate 'line', 1494
    nqp_get_sc_object $P5025, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Op"]
    unless_null $P5022, fallback3760
    nqp_get_sc_object $P5026, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5022, $P5026
  fallback3760:
.annotate 'line', 1496
    nqp_get_sc_object $P5030, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback3761
    nqp_get_sc_object $P5031, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5027, $P5031
  fallback3761:
    $P5032 = $P5027."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"))
    $P5033 = $P5022."new"($P5032, $P101, "bind" :named("op"))
.annotate 'line', 1499
    nqp_get_sc_object $P5037, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback3762
    nqp_get_sc_object $P5038, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5034, $P5038
  fallback3762:
.annotate 'line', 1502
    nqp_get_sc_object $P5042, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["Op"]
    unless_null $P5039, fallback3763
    nqp_get_sc_object $P5043, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5039, $P5043
  fallback3763:
.annotate 'line', 1504
    nqp_get_sc_object $P5047, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["Var"]
    unless_null $P5044, fallback3764
    nqp_get_sc_object $P5048, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5044, $P5048
  fallback3764:
    $P5049 = $P5044."new"($P102 :named("name"), "local" :named("scope"))
.annotate 'line', 1505
    nqp_get_sc_object $P5053, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["IVal"]
    unless_null $P5050, fallback3765
    nqp_get_sc_object $P5054, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5050, $P5054
  fallback3765:
    $P5055 = $P5050."new"(1 :named("value"))
    $P5056 = $P5039."new"($P5049, $P5055, "sub_n" :named("op"))
    $P5057 = $P5034."new"($P101, $P5056, "bind" :named("op"))
    $P5058 = $P5017."new"($P5033, $P5057, 0 :named("resultchild"))
    $P5059 = _lex_param_0."as_post"($P5058)
    .return ($P5059) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_413_1351203235.318") :anon :lex :outer("cuid_1_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1510
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1511
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3766
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5002
  fallback3766:
    $P5003 = _lex_param_0."as_post"($P5001, "n" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_414_1351203235.318") :anon :lex :outer("cuid_1_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1514
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1515
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3767
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5002
  fallback3767:
    $P5003 = _lex_param_0."as_post"($P5001, "s" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_415_1351203235.318") :anon :lex :outer("cuid_1_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1518
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1519
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3768
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback3768:
.annotate 'line', 1521
    nqp_get_sc_object $P5009, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Op"]
    unless_null $P5006, fallback3769
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5010
  fallback3769:
    set $P5011, _lex_param_1[0]
    unless_null $P5011, fallback3770
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5012
  fallback3770:
    $P5013 = $P5006."new"($P5011, "where" :named("op"))
.annotate 'line', 1522
    nqp_get_sc_object $P5017, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Op"]
    unless_null $P5014, fallback3771
    nqp_get_sc_object $P5018, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5014, $P5018
  fallback3771:
    set $P5019, _lex_param_1[1]
    unless_null $P5019, fallback3772
    nqp_get_sc_object $P5020, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5019, $P5020
  fallback3772:
    $P5021 = $P5014."new"($P5019, "where" :named("op"))
    $P5022 = $P5001."new"($P5013, $P5021, "iseq_i" :named("op"))
    $P5023 = _lex_param_0."as_post"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_416_1351203235.318") :anon :lex :outer("cuid_1_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1526
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$res", $P101 
    .lex "$ops", $P102 
    .lex "$arg_post", $P103 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P103, $P5003
.annotate 'line', 1527
    find_dynamic_lex $P5004, "$*REGALLOC"
    unless_null $P5004, fallback3773
    nqp_get_sc_object $P5007, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$REGALLOC"]
    unless_null $P5005, fallback3774
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5005, $P5008
  fallback3774:
    unless_null $P5005, vivi_13383775
    die "Contextual $*REGALLOC not found"
    box $P5009, "Contextual $*REGALLOC not found"
    set $P5005, $P5009
  vivi_13383775:
    set $P5004, $P5005
  fallback3773:
    $P5010 = $P5004."fresh_i"()
    set $P101, $P5010
.annotate 'line', 1528
    nqp_get_sc_object $P5014, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5013, $P5014, "PIRT"
    get_who $P5012, $P5013
    set $P5011, $P5012["Ops"]
    unless_null $P5011, fallback3776
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5015
  fallback3776:
    $P5016 = $P5011."new"($P101 :named("result"))
    set $P102, $P5016
.annotate 'line', 1529
    set $P5017, _lex_param_1[0]
    unless_null $P5017, fallback3777
    nqp_get_sc_object $P5018, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5017, $P5018
  fallback3777:
    $P5019 = _lex_param_0."as_post"($P5017)
    set $P103, $P5019
.annotate 'line', 1530
    $P5020 = $P103."result"()
    $P5021 = _lex_param_0."infer_type"($P5020)
    set $S5002, $P5021
    downcase $S5001, $S5002
    iseq $I5001, $S5001, "i"
    unless $I5001 goto if1339_else3778 
.annotate 'line', 1531
    $P102."push"($P103)
.annotate 'line', 1532
    $P5022 = $P102."push_pirop"("not", $P101, $P103)
    goto if1339_end3779
  if1339_else3778:
.annotate 'line', 1534
.annotate 'line', 1535
    $P5023 = _lex_param_0."coerce"($P103, "P")
    set $P103, $P5023
.annotate 'line', 1536
    $P102."push"($P103)
.annotate 'line', 1537
    $P5024 = $P102."push_pirop"("isfalse", $P101, $P103)
  if1339_end3779:
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_357_1351203235.318") :anon :lex :outer("cuid_1_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1543
    .const 'Sub' $P5124 = 'cuid_417_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_420_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_423_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_424_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_427_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_429_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_430_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_431_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_433_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_434_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_439_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_245_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_246_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_247_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_248_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_249_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_250_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_251_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_252_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_253_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_254_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_255_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_256_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_257_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_258_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_259_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_260_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_261_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_262_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_263_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_264_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_265_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_266_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_267_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_268_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_269_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_270_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_271_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_272_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_273_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_274_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_275_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_276_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_277_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_278_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_279_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_280_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_281_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_282_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_283_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_284_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_285_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_286_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_287_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_288_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_289_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_290_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_291_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_292_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_293_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_294_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_295_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_296_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_297_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_298_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_299_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_300_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_301_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_302_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_303_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_304_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_305_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_306_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_307_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_308_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_309_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_310_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_311_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_312_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_313_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_314_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_315_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_316_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_317_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_318_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_319_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_320_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_321_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_322_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_323_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_324_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_325_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_326_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_327_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_328_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_329_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_330_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_331_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_332_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_333_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_334_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_335_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_336_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_337_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_338_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_339_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_340_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_341_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_342_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_343_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_344_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_345_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_346_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_347_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_348_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_349_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_350_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_351_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_352_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_353_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_354_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_355_1351203235.318' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_356_1351203235.318' 
    capture_lex $P5124 
    .lex "&xblock_immediate", $P101 
    .lex "&block_immediate", $P102 
    .lex "&default_for", $P103 
    .lex "&default_value_for_prim", $P104 
    .lex "&colonpair_str", $P105 
    .lex "&import_HOW_exports", $P106 
    .lex "&set_block_handler", $P107 
    .lex "&only_star_block", $P108 
    .lex "&attach_multi_signature", $P109 
    .lex "&wrap_return_handler", $P110 
    .lex "&lexical_package_lookup", $P111 
    .lex "$?PACKAGE", $P112 
    .lex "$?CLASS", $P113 
    .const 'Sub' $P5001 = 'cuid_417_1351203235.318' 
    capture_lex $P5001
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_420_1351203235.318' 
    capture_lex $P5002
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_423_1351203235.318' 
    capture_lex $P5003
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_424_1351203235.318' 
    capture_lex $P5004
    set $P104, $P5004
    .const 'Sub' $P5005 = 'cuid_427_1351203235.318' 
    capture_lex $P5005
    set $P105, $P5005
    .const 'Sub' $P5006 = 'cuid_429_1351203235.318' 
    capture_lex $P5006
    set $P106, $P5006
    .const 'Sub' $P5007 = 'cuid_430_1351203235.318' 
    capture_lex $P5007
    set $P107, $P5007
    .const 'Sub' $P5008 = 'cuid_431_1351203235.318' 
    capture_lex $P5008
    set $P108, $P5008
    .const 'Sub' $P5009 = 'cuid_433_1351203235.318' 
    capture_lex $P5009
    set $P109, $P5009
    .const 'Sub' $P5010 = 'cuid_434_1351203235.318' 
    capture_lex $P5010
    set $P110, $P5010
    .const 'Sub' $P5011 = 'cuid_439_1351203235.318' 
    capture_lex $P5011
    set $P111, $P5011
    .const 'Sub' $P5012 = 'cuid_245_1351203235.318' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_246_1351203235.318' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_247_1351203235.318' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_248_1351203235.318' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_249_1351203235.318' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_250_1351203235.318' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_251_1351203235.318' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_252_1351203235.318' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_253_1351203235.318' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_254_1351203235.318' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_255_1351203235.318' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_256_1351203235.318' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_257_1351203235.318' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_258_1351203235.318' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_259_1351203235.318' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_260_1351203235.318' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_261_1351203235.318' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_262_1351203235.318' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_263_1351203235.318' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_264_1351203235.318' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_265_1351203235.318' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_266_1351203235.318' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_267_1351203235.318' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_268_1351203235.318' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_269_1351203235.318' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_270_1351203235.318' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_271_1351203235.318' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_272_1351203235.318' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_273_1351203235.318' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_274_1351203235.318' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_275_1351203235.318' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_276_1351203235.318' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_277_1351203235.318' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_278_1351203235.318' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_279_1351203235.318' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_280_1351203235.318' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_281_1351203235.318' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_282_1351203235.318' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_283_1351203235.318' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_284_1351203235.318' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_285_1351203235.318' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_286_1351203235.318' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_287_1351203235.318' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_288_1351203235.318' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_289_1351203235.318' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_290_1351203235.318' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_291_1351203235.318' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_292_1351203235.318' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_293_1351203235.318' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_294_1351203235.318' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_295_1351203235.318' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_296_1351203235.318' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_297_1351203235.318' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_298_1351203235.318' 
    capture_lex $P5065
    .const 'Sub' $P5066 = 'cuid_299_1351203235.318' 
    capture_lex $P5066
    .const 'Sub' $P5067 = 'cuid_300_1351203235.318' 
    capture_lex $P5067
    .const 'Sub' $P5068 = 'cuid_301_1351203235.318' 
    capture_lex $P5068
    .const 'Sub' $P5069 = 'cuid_302_1351203235.318' 
    capture_lex $P5069
    .const 'Sub' $P5070 = 'cuid_303_1351203235.318' 
    capture_lex $P5070
    .const 'Sub' $P5071 = 'cuid_304_1351203235.318' 
    capture_lex $P5071
    .const 'Sub' $P5072 = 'cuid_305_1351203235.318' 
    capture_lex $P5072
    .const 'Sub' $P5073 = 'cuid_306_1351203235.318' 
    capture_lex $P5073
    .const 'Sub' $P5074 = 'cuid_307_1351203235.318' 
    capture_lex $P5074
    .const 'Sub' $P5075 = 'cuid_308_1351203235.318' 
    capture_lex $P5075
    .const 'Sub' $P5076 = 'cuid_309_1351203235.318' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_310_1351203235.318' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_311_1351203235.318' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_312_1351203235.318' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_313_1351203235.318' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_314_1351203235.318' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_315_1351203235.318' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_316_1351203235.318' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_317_1351203235.318' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_318_1351203235.318' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_319_1351203235.318' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_320_1351203235.318' 
    capture_lex $P5087
    .const 'Sub' $P5088 = 'cuid_321_1351203235.318' 
    capture_lex $P5088
    .const 'Sub' $P5089 = 'cuid_322_1351203235.318' 
    capture_lex $P5089
    .const 'Sub' $P5090 = 'cuid_323_1351203235.318' 
    capture_lex $P5090
    .const 'Sub' $P5091 = 'cuid_324_1351203235.318' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_325_1351203235.318' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_326_1351203235.318' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_327_1351203235.318' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_328_1351203235.318' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_329_1351203235.318' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_330_1351203235.318' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_331_1351203235.318' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_332_1351203235.318' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_333_1351203235.318' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_334_1351203235.318' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_335_1351203235.318' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_336_1351203235.318' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_337_1351203235.318' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_338_1351203235.318' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_339_1351203235.318' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_340_1351203235.318' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_341_1351203235.318' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_342_1351203235.318' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_343_1351203235.318' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_344_1351203235.318' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_345_1351203235.318' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_346_1351203235.318' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_347_1351203235.318' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_348_1351203235.318' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_349_1351203235.318' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_350_1351203235.318' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_351_1351203235.318' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_352_1351203235.318' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_353_1351203235.318' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_354_1351203235.318' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_355_1351203235.318' 
    capture_lex $P5122
    .const 'Sub' $P5123 = 'cuid_356_1351203235.318' 
    capture_lex $P5123
    .return ($P111) 
.end
.HLL "nqp"
.namespace []
.sub "xblock_immediate" :subid("cuid_417_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1544
    .param pmc _lex_param_0 
    .lex "$xblock", _lex_param_0 
.annotate 'line', 1545
    set $P5001, _lex_param_0[1]
    unless_null $P5001, fallback3780
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5002
  fallback3780:
    $P5003 = "&block_immediate"($P5001)
    set _lex_param_0[1], $P5003
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "block_immediate" :subid("cuid_420_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1549
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_419_1351203235.318' 
    capture_lex $P5004 
    .lex "$block", _lex_param_0 
.annotate 'line', 1550
    _lex_param_0."blocktype"("immediate")
.annotate 'line', 1551
    $P5001 = _lex_param_0."symtable"()
    if $P5001 goto unless1340_end3782 
    .const 'Sub' $P5002 = 'cuid_419_1351203235.318' 
    capture_lex $P5002
    $P5003 = $P5002()
  unless1340_end3782:
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_419_1351203235.318") :anon :lex :outer("cuid_420_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1551
    .const 'Sub' $P5017 = 'cuid_418_1351203235.318' 
    capture_lex $P5017 
    .lex "$stmts", $P101 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 1552
    nqp_get_sc_object $P5005, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback3783
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5006
  fallback3783:
    find_lex $P5007, "$block"
    $P5008 = $P5007."node"()
    $P5009 = $P5002."new"($P5008 :named("node"))
    set $P101, $P5009
.annotate 'line', 1553
    find_lex $P5013, "$block"
    $P5014 = $P5013."list"()
    set $P5010, $P5014
    iter $P5012, $P5014
  for_next3784:
    unless $P5012, for_done3786
    shift $P5016, $P5012
  for_redo3785:
    .const 'Sub' $P5015 = 'cuid_418_1351203235.318' 
    capture_lex $P5015
    $P5010 = $P5015($P5016)
    goto for_next3784
  for_done3786:
    store_lex "$block", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_418_1351203235.318") :anon :lex :outer("cuid_419_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1553
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$stmts"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "default_for" :subid("cuid_423_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1559
    .param pmc _lex_param_0 
    .const 'Sub' $P5017 = 'cuid_422_1351203235.318' 
    capture_lex $P5017 
    .lex "$sigil", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1341_else3787 
.annotate 'line', 1560
.annotate 'line', 1561
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3789
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback3789:
    $P5006 = $P5001."new"("list" :named("op"))
    set $P5016, $P5006
    goto if1341_end3788
  if1341_else3787:
    set $S5002, _lex_param_0
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1342_else3790 
.annotate 'line', 1563
.annotate 'line', 1564
    nqp_get_sc_object $P5010, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback3792
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5011
  fallback3792:
    $P5012 = $P5007."new"("hash" :named("op"))
    set $P5015, $P5012
    goto if1342_end3791
  if1342_else3790:
    .const 'Sub' $P5013 = 'cuid_422_1351203235.318' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  if1342_end3791:
    set $P5016, $P5015
  if1341_end3788:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_422_1351203235.318") :anon :lex :outer("cuid_423_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1566
    .const 'Sub' $P5022 = 'cuid_421_1351203235.318' 
    capture_lex $P5022 
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_13473801
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 1568
    new $P5018, 'ExceptionHandler'
    set_label $P5018, catch_handler_13453798
    $P5018.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5018
.annotate 'line', 1569
    nqp_get_sc_object $P5005, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["WVal"]
    unless_null $P5002, fallback3793
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5006
  fallback3793:
    find_dynamic_lex $P5007, "$*W"
    unless_null $P5007, fallback3794
    nqp_get_sc_object $P5010, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$W"]
    unless_null $P5008, fallback3795
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5011
  fallback3795:
    unless_null $P5008, vivi_13433796
    die "Contextual $*W not found"
    box $P5012, "Contextual $*W not found"
    set $P5008, $P5012
  vivi_13433796:
    set $P5007, $P5008
  fallback3794:
    new $P5013, 'ResizablePMCArray'
    box $P5014, "NQPMu"
    push $P5013, $P5014
    $P5015 = $P5007."find_sym"($P5013)
    $P5016 = $P5002."new"($P5015 :named("value"))
    set $P101, $P5016
    nqp_get_sc_object $P5017, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5019, $P5017
    pop_eh 
    goto skip_handler_13443797
  catch_handler_13453798:
    .get_results ($P5018) 
    .const 'Sub' $P10001 = 'cuid_421_1351203235.318' 
    capture_lex $P10001
    $P10001($P5018)
    set $I10001, 1
    set $P5018["handled"], $I10001
    nqp_get_sc_object $P10002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    finalize $P5018
    pop_upto_eh $P5018
    pop_eh 
    set $P5019, $P10002
    goto skip_handler_13443797
  skip_handler_13443797:
    set $P5021, $P5019
    pop_eh 
    goto skip_handler_13463800
  catch_handler_13473801:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_13463800
  skip_handler_13463800:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_421_1351203235.318") :anon :lex :outer("cuid_422_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1570
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3799
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback3799:
    $P5006 = $P5001."new"("null" :named("op"))
    store_lex "$default", $P5006
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "default_value_for_prim" :subid("cuid_424_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1576
    .param pmc _lex_param_0 
    .lex "$prim", _lex_param_0 
    set $N5001, _lex_param_0
    set $N5002, 1
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if1348_else3802 
.annotate 'line', 1577
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["IVal"]
    unless_null $P5001, fallback3804
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback3804:
    $P5006 = $P5001."new"(0 :named("value"))
    set $P5020, $P5006
    goto if1348_end3803
  if1348_else3802:
    set $N5003, _lex_param_0
    set $N5004, 2
    iseq $I5002, $N5003, $N5004
    unless $I5002 goto if1349_else3805 
.annotate 'line', 1578
    nqp_get_sc_object $P5010, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["NVal"]
    unless_null $P5007, fallback3807
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5011
  fallback3807:
    $P5012 = $P5007."new"(0.0 :named("value"))
    set $P5019, $P5012
    goto if1349_end3806
  if1349_else3805:
.annotate 'line', 1579
    nqp_get_sc_object $P5016, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["SVal"]
    unless_null $P5013, fallback3808
    nqp_get_sc_object $P5017, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5013, $P5017
  fallback3808:
    $P5018 = $P5013."new"("" :named("value"))
    set $P5019, $P5018
  if1349_end3806:
    set $P5020, $P5019
  if1348_end3803:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair_str" :subid("cuid_427_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1592
    .param pmc _lex_param_0 
    .const 'Sub' $P5010 = 'cuid_426_1351203235.318' 
    capture_lex $P5010 
    .lex "$ast", _lex_param_0 
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3811
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback3811:
    type_check $I5001, _lex_param_0, $P5001
    unless $I5001 goto if1350_else3809 
    .const 'Sub' $P5006 = 'cuid_426_1351203235.318' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5009, $P5007
    goto if1350_end3810
  if1350_else3809:
.annotate 'line', 1597
.annotate 'line', 1598
    $P5008 = _lex_param_0."value"()
    set $P5009, $P5008
  if1350_end3810:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_426_1351203235.318") :anon :lex :outer("cuid_427_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1593
    .const 'Sub' $P5009 = 'cuid_425_1351203235.318' 
    capture_lex $P5009 
    .lex "@parts", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 1595
    find_lex $P5005, "$ast"
    $P5006 = $P5005."list"()
    set $P5002, $P5006
    iter $P5004, $P5006
  for_next3812:
    unless $P5004, for_done3814
    shift $P5008, $P5004
  for_redo3813:
    .const 'Sub' $P5007 = 'cuid_425_1351203235.318' 
    capture_lex $P5007
    $P5002 = $P5007($P5008)
    goto for_next3812
  for_done3814:
    join $S5001, " ", $P101
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_425_1351203235.318") :anon :lex :outer("cuid_426_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1595
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "@parts"
    $P5002 = _lex_param_0."value"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "import_HOW_exports" :subid("cuid_429_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1792
    .param pmc _lex_param_0 
    .const 'Sub' $P5011 = 'cuid_428_1351203235.318' 
    capture_lex $P5011 
    .lex "$UNIT", _lex_param_0 
    exists $I5001, _lex_param_0["EXPORTHOW"]
    box $P5010, $I5001
    set $P5009, $P5010
    unless $I5001 goto if1351_end3816 
.annotate 'line', 1794
    set $P5005, _lex_param_0["EXPORTHOW"]
    unless_null $P5005, fallback3817
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5005, $P5006
  fallback3817:
    get_who $P5004, $P5005
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next3821:
    unless $P5003, for_done3823
    shift $P5008, $P5003
  for_redo3822:
    .const 'Sub' $P5007 = 'cuid_428_1351203235.318' 
    capture_lex $P5007
    $P5001 = $P5007($P5008)
    goto for_next3821
  for_done3823:
    set $P5009, $P5001
  if1351_end3816:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_428_1351203235.318") :anon :lex :outer("cuid_429_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1795
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_dynamic_lex $P5001, "%*HOW"
    unless_null $P5001, fallback3818
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HOW"]
    unless_null $P5002, fallback3819
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HOW"], $P5007
    set $P5002, $P5007
  fallback3819:
    unless_null $P5002, vivi_13523820
    die "Contextual %*HOW not found"
    box $P5008, "Contextual %*HOW not found"
    set $P5002, $P5008
  vivi_13523820:
    set $P5001, $P5002
  fallback3818:
.annotate 'line', 1796
    $P5009 = _lex_param_0."key"()
    set $S5001, $P5009
    $P5010 = _lex_param_0."value"()
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "set_block_handler" :subid("cuid_430_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1894
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$/", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$type", _lex_param_2 
    find_dynamic_lex $P5001, "%*HANDLERS"
    unless_null $P5001, fallback3826
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback3827
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback3827:
    unless_null $P5002, vivi_13543828
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_13543828:
    set $P5001, $P5002
  fallback3826:
    set $S5001, _lex_param_2
    exists $I5001, $P5001[$S5001]
    unless $I5001 goto if1353_end3825 
.annotate 'line', 1895
    set $S5004, _lex_param_2
    concat $S5003, "Duplicate ", $S5004
    concat $S5002, $S5003, " handler in block"
    box $P5009, $S5002
    die $P5009
  if1353_end3825:
.annotate 'line', 1898
    $P5010 = _lex_param_1."arity"()
    if $P5010 goto unless1355_end3830 
.annotate 'line', 1899
.annotate 'line', 1900
    nqp_get_sc_object $P5014, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback3831
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5015
  fallback3831:
.annotate 'line', 1901
    nqp_get_sc_object $P5019, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback3832
    nqp_get_sc_object $P5020, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5016, $P5020
  fallback3832:
    $P5021 = $P5016."new"("lexical" :named("scope"), "$!" :named("name"), "var" :named("decl"))
.annotate 'line', 1902
    nqp_get_sc_object $P5025, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Var"]
    unless_null $P5022, fallback3833
    nqp_get_sc_object $P5026, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5022, $P5026
  fallback3833:
    $P5027 = $P5022."new"("lexical" :named("scope"), "$_" :named("name"))
    $P5028 = $P5011."new"($P5021, $P5027, "bind" :named("op"))
    _lex_param_1."unshift"($P5028)
.annotate 'line', 1905
    nqp_get_sc_object $P5032, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Var"]
    unless_null $P5029, fallback3834
    nqp_get_sc_object $P5033, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5029, $P5033
  fallback3834:
    $P5034 = $P5029."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    _lex_param_1."unshift"($P5034)
.annotate 'line', 1906
    _lex_param_1."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1907
    _lex_param_1."symbol"("$!", "lexical" :named("scope"))
.annotate 'line', 1908
    $P5035 = _lex_param_1."arity"(1)
  unless1355_end3830:
.annotate 'line', 1910
    _lex_param_1."blocktype"("declaration")
    find_dynamic_lex $P5036, "%*HANDLERS"
    unless_null $P5036, fallback3835
    nqp_get_sc_object $P5039, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5038, $P5039
    set $P5037, $P5038["%HANDLERS"]
    unless_null $P5037, fallback3836
    nqp_get_sc_object $P5041, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5040, $P5041
    new $P5042, 'Hash'
    set $P5040["%HANDLERS"], $P5042
    set $P5037, $P5042
  fallback3836:
    unless_null $P5037, vivi_13563837
    die "Contextual %*HANDLERS not found"
    box $P5043, "Contextual %*HANDLERS not found"
    set $P5037, $P5043
  vivi_13563837:
    set $P5036, $P5037
  fallback3835:
    set $S5005, _lex_param_2
.annotate 'line', 1911
    nqp_get_sc_object $P5047, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["Stmts"]
    unless_null $P5044, fallback3838
    nqp_get_sc_object $P5048, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5044, $P5048
  fallback3838:
.annotate 'line', 1912
    nqp_get_sc_object $P5052, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Op"]
    unless_null $P5049, fallback3839
    nqp_get_sc_object $P5053, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5049, $P5053
  fallback3839:
.annotate 'line', 1914
    nqp_get_sc_object $P5057, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Op"]
    unless_null $P5054, fallback3840
    nqp_get_sc_object $P5058, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5054, $P5058
  fallback3840:
    $P5059 = $P5054."new"("exception" :named("op"))
    $P5060 = $P5049."new"(_lex_param_1, $P5059, "call" :named("op"))
.annotate 'line', 1916
    nqp_get_sc_object $P5064, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["Op"]
    unless_null $P5061, fallback3841
    nqp_get_sc_object $P5065, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5061, $P5065
  fallback3841:
.annotate 'line', 1918
    nqp_get_sc_object $P5069, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5068, $P5069, "QAST"
    get_who $P5067, $P5068
    set $P5066, $P5067["Op"]
    unless_null $P5066, fallback3842
    nqp_get_sc_object $P5070, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5066, $P5070
  fallback3842:
    $P5071 = $P5066."new"("exception" :named("op"))
.annotate 'line', 1919
    nqp_get_sc_object $P5075, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5074, $P5075, "QAST"
    get_who $P5073, $P5074
    set $P5072, $P5073["SVal"]
    unless_null $P5072, fallback3843
    nqp_get_sc_object $P5076, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5072, $P5076
  fallback3843:
    $P5077 = $P5072."new"("handled" :named("value"))
.annotate 'line', 1920
    nqp_get_sc_object $P5081, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5080, $P5081, "QAST"
    get_who $P5079, $P5080
    set $P5078, $P5079["IVal"]
    unless_null $P5078, fallback3844
    nqp_get_sc_object $P5082, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5078, $P5082
  fallback3844:
    $P5083 = $P5078."new"(1 :named("value"))
    $P5084 = $P5061."new"($P5071, $P5077, $P5083, "bindkey_i" :named("op"))
.annotate 'line', 1922
    $P5085 = "&default_for"("$")
    $P5086 = $P5044."new"($P5060, $P5084, $P5085)
    set $P5036[$S5005], $P5086
    .return ($P5086) 
.end
.HLL "nqp"
.namespace []
.sub "only_star_block" :subid("cuid_431_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2525
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 2526
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback3845
    nqp_get_sc_object $P5005, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback3846
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5006
  fallback3846:
    unless_null $P5003, vivi_13573847
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_13573847:
    set $P5002, $P5003
  fallback3845:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
.annotate 'line', 2527
    nqp_get_sc_object $P5012, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback3848
    nqp_get_sc_object $P5013, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5013
  fallback3848:
    $P5014 = $P5009."new"("nqpmultidispatch" :named("op"))
    $P101."push"($P5014)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "attach_multi_signature" :subid("cuid_433_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2531
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5020 = 'cuid_432_1351203235.318' 
    capture_lex $P5020 
    .lex "$types", $P101 
    .lex "$definednesses", $P102 
    .lex "$code_obj", _lex_param_0 
    .lex "$routine", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    new $P5003, 'ResizablePMCArray'
    set $P101, $P5003
    new $P5004, 'ResizablePMCArray'
    set $P102, $P5004
    set $P5008, _lex_param_1[0]
    unless_null $P5008, fallback3849
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5009
  fallback3849:
    $P5010 = $P5008."list"()
    set $P5005, $P5010
    iter $P5007, $P5010
  for_next3865:
    unless $P5007, for_done3867
    shift $P5012, $P5007
  for_redo3866:
    .const 'Sub' $P5011 = 'cuid_432_1351203235.318' 
    capture_lex $P5011
    $P5005 = $P5011($P5012)
    goto for_next3865
  for_done3867:
.annotate 'line', 2543
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback3868
    nqp_get_sc_object $P5016, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback3869
    nqp_get_sc_object $P5017, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5014, $P5017
  fallback3869:
    unless_null $P5014, vivi_13643870
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_13643870:
    set $P5013, $P5014
  fallback3868:
    $P5019 = $P5013."set_routine_signature"(_lex_param_0, $P101, $P102)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_432_1351203235.318") :anon :lex :outer("cuid_433_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2534
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3856
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback3856:
    type_check $I5001, _lex_param_0, $P5001
    set $I5003, $I5001
    unless $I5001 goto if1360_end3855 
.annotate 'line', 2535
    $P5006 = _lex_param_0."decl"()
    set $S5001, $P5006
    iseq $I5002, $S5001, "param"
    set $I5003, $I5002
  if1360_end3855:
    set $I5005, $I5003
    unless $I5003 goto if1359_end3853 
    $P5007 = _lex_param_0."named"()
    isfalse $I5004, $P5007
    set $I5005, $I5004
  if1359_end3853:
    box $P5021, $I5005
    set $P5020, $P5021
    unless $I5005 goto if1358_end3851 
.annotate 'line', 2536
    find_lex $P5008, "$types"
    $P5009 = _lex_param_0."returns"()
    get_id $I5007, $P5009
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    get_id $I5008, $P5010
    iseq $I5006, $I5007, $I5008
    unless $I5006 goto if1361_else3857 
    null $P5011
    set $P5013, $P5011
    goto if1361_end3858
  if1361_else3857:
.annotate 'line', 2538
    $P5012 = _lex_param_0."returns"()
    set $P5013, $P5012
  if1361_end3858:
    $P5008."push"($P5013)
.annotate 'line', 2539
    find_lex $P5014, "$definednesses"
    set $P5015, _lex_param_0["definedness"]
    unless_null $P5015, fallback3861
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5015, $P5016
  fallback3861:
    set $S5002, $P5015
    iseq $I5009, $S5002, "D"
    unless $I5009 goto if1362_else3859 
    set $I5012, 1
    goto if1362_end3860
  if1362_else3859:
    set $P5017, _lex_param_0["definedness"]
    unless_null $P5017, fallback3864
    nqp_get_sc_object $P5018, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5017, $P5018
  fallback3864:
    set $S5003, $P5017
    iseq $I5010, $S5003, "U"
    unless $I5010 goto if1363_else3862 
    set $I5011, 2
    goto if1363_end3863
  if1363_else3862:
    set $I5011, 0
  if1363_end3863:
    set $I5012, $I5011
  if1362_end3860:
    $P5019 = $P5014."push"($I5012)
    set $P5020, $P5019
  if1358_end3851:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "wrap_return_handler" :subid("cuid_434_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2546
    .param pmc _lex_param_0 
    .lex "$past", _lex_param_0 
.annotate 'line', 2547
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3871
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback3871:
    $P5006 = $P5001."new"(_lex_param_0, "lexotic" :named("op"), "RETURN" :named("name"))
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "lexical_package_lookup" :subid("cuid_439_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3019
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5072 = 'cuid_437_1351203235.318' 
    capture_lex $P5072 
    .lex "$final_name", $P101 
    .lex "$lookup", $P102 
    .lex "@name", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_3872
    .lex "RETURN", $P103
    set $N5001, _lex_param_0
    set $N5002, 0
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if1365_end3875 
.annotate 'line', 3021
    $P5003 = _lex_param_1."CURSOR"()
    $P5004 = $P5003."panic"("Cannot compile empty name")
  if1365_end3875:
.annotate 'line', 3025
    $P5005 = _lex_param_0."pop"()
    set $P101, $P5005
.annotate 'line', 3026
    nqp_get_sc_object $P5009, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["VarWithFallback"]
    unless_null $P5006, fallback3876
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5010
  fallback3876:
.annotate 'line', 3028
    nqp_get_sc_object $P5014, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback3877
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5015
  fallback3877:
    set $S5001, $P101
    $P5016 = $P5011."new"($S5001 :named("value"))
    $P5017 = $P5006."new"($P5016, "associative" :named("scope"))
    set $P102, $P5017
    set $N5003, _lex_param_0
    set $N5004, 0
    iseq $I5002, $N5003, $N5004
    unless $I5002 goto if1366_else3878 
.annotate 'line', 3033
.annotate 'line', 3034
    nqp_get_sc_object $P5021, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["Op"]
    unless_null $P5018, fallback3880
    nqp_get_sc_object $P5022, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5018, $P5022
  fallback3880:
.annotate 'line', 3036
    nqp_get_sc_object $P5026, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["Var"]
    unless_null $P5023, fallback3881
    nqp_get_sc_object $P5027, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5023, $P5027
  fallback3881:
    $P5028 = $P5023."new"("$?PACKAGE" :named("name"), "lexical" :named("scope"))
    $P5029 = $P5018."new"($P5028, "who" :named("op"))
    $P102."unshift"($P5029)
.annotate 'line', 3038
    nqp_get_sc_object $P5033, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["Op"]
    unless_null $P5030, fallback3882
    nqp_get_sc_object $P5034, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5030, $P5034
  fallback3882:
.annotate 'line', 3040
    nqp_get_sc_object $P5038, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Op"]
    unless_null $P5035, fallback3883
    nqp_get_sc_object $P5039, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5035, $P5039
  fallback3883:
.annotate 'line', 3042
    nqp_get_sc_object $P5043, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Op"]
    unless_null $P5040, fallback3884
    nqp_get_sc_object $P5044, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5040, $P5044
  fallback3884:
.annotate 'line', 3044
    nqp_get_sc_object $P5048, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["WVal"]
    unless_null $P5045, fallback3885
    nqp_get_sc_object $P5049, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5045, $P5049
  fallback3885:
    find_dynamic_lex $P5050, "$*GLOBALish"
    unless_null $P5050, fallback3886
    nqp_get_sc_object $P5053, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5052, $P5053
    set $P5051, $P5052["$GLOBALish"]
    unless_null $P5051, fallback3887
    nqp_get_sc_object $P5054, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5051, $P5054
  fallback3887:
    unless_null $P5051, vivi_13673888
    die "Contextual $*GLOBALish not found"
    box $P5055, "Contextual $*GLOBALish not found"
    set $P5051, $P5055
  vivi_13673888:
    set $P5050, $P5051
  fallback3886:
    $P5056 = $P5045."new"($P5050 :named("value"))
    $P5057 = $P5040."new"($P5056, "who" :named("op"))
.annotate 'line', 3046
    nqp_get_sc_object $P5061, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5060, $P5061, "QAST"
    get_who $P5059, $P5060
    set $P5058, $P5059["SVal"]
    unless_null $P5058, fallback3889
    nqp_get_sc_object $P5062, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5058, $P5062
  fallback3889:
    set $S5002, $P101
    $P5063 = $P5058."new"($S5002 :named("value"))
    $P5064 = $P5035."new"($P5057, $P5063, "atkey" :named("op"))
.annotate 'line', 3048
    set $S5004, $P101
    substr $S5003, $S5004, 0, 1
    $P5065 = "&default_for"($S5003)
    $P5066 = $P5030."new"($P5064, $P5065, "ifnull" :named("op"))
    $P5067 = $P102."fallback"($P5066)
    goto if1366_end3879
  if1366_else3878:
    .const 'Sub' $P5068 = 'cuid_437_1351203235.318' 
    capture_lex $P5068
    $P5069 = $P5068()
  if1366_end3879:
    find_lex $P5070, "RETURN"
    $P5071 = $P5070($P102)
    goto lexotic_3873
  lexotic_3872:
    .get_results ($P5071)
  lexotic_3873:
    .return ($P5071) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_437_1351203235.318") :anon :lex :outer("cuid_439_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3054
    .const 'Sub' $P5066 = 'cuid_436_1351203235.318' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_438_1351203235.318' 
    capture_lex $P5066 
    .lex "$path", $P101 
    .lex "$sigil", $P102 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
.annotate 'line', 3056
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback3892
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback3893
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5007
  fallback3893:
    unless_null $P5004, vivi_13693894
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_13693894:
    set $P5003, $P5004
  fallback3892:
    find_lex $P5010, "@name"
    set $P5009, $P5010[0]
    unless_null $P5009, fallback3895
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5011
  fallback3895:
    $P5012 = $P5003."is_lexical"($P5009)
    unless $P5012 goto if1368_else3890 
    .const 'Sub' $P5013 = 'cuid_436_1351203235.318' 
    capture_lex $P5013
    $P5014 = $P5013()
    goto if1368_end3891
  if1368_else3890:
.annotate 'line', 3065
.annotate 'line', 3066
    nqp_get_sc_object $P5018, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["WVal"]
    unless_null $P5015, fallback3903
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5015, $P5019
  fallback3903:
    find_dynamic_lex $P5020, "$*GLOBALish"
    unless_null $P5020, fallback3904
    nqp_get_sc_object $P5023, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$GLOBALish"]
    unless_null $P5021, fallback3905
    nqp_get_sc_object $P5024, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5021, $P5024
  fallback3905:
    unless_null $P5021, vivi_13733906
    die "Contextual $*GLOBALish not found"
    box $P5025, "Contextual $*GLOBALish not found"
    set $P5021, $P5025
  vivi_13733906:
    set $P5020, $P5021
  fallback3904:
    $P5026 = $P5015."new"($P5020 :named("value"))
    set $P101, $P5026
  if1368_end3891:
    find_lex $P5028, "@name"
    set $P5027, $P5028[0]
    unless_null $P5027, fallback3909
    nqp_get_sc_object $P5029, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5027, $P5029
  fallback3909:
    set $S5001, $P5027
    iseq $I5001, $S5001, "GLOBAL"
    unless $I5001 goto if1374_end3908 
.annotate 'line', 3068
.annotate 'line', 3069
    find_lex $P5030, "@name"
    $P5031 = $P5030."shift"()
  if1374_end3908:
    find_lex $P5035, "@name"
    set $P5032, $P5035
    iter $P5034, $P5035
  for_next3912:
    unless $P5034, for_done3914
    shift $P5037, $P5034
  for_redo3913:
    .const 'Sub' $P5036 = 'cuid_438_1351203235.318' 
    capture_lex $P5036
    $P5032 = $P5036($P5037)
    goto for_next3912
  for_done3914:
.annotate 'line', 3076
    find_lex $P5038, "$lookup"
    nqp_get_sc_object $P5042, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["Op"]
    unless_null $P5039, fallback3915
    nqp_get_sc_object $P5043, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5039, $P5043
  fallback3915:
    $P5044 = $P5039."new"($P101, "who" :named("op"))
    $P5038."unshift"($P5044)
    find_lex $P5045, "$final_name"
    set $S5003, $P5045
    substr $S5002, $S5003, 0, 1
    box $P5046, $S5002
    set $P102, $P5046
    set $S5004, $P102
    iseq $I5002, $S5004, "@"
    set $I5004, $I5002
    if $I5002 goto unless1376_end3919 
    set $S5005, $P102
    iseq $I5003, $S5005, "%"
    set $I5004, $I5003
  unless1376_end3919:
    unless $I5004 goto if1375_else3916 
.annotate 'line', 3078
.annotate 'line', 3079
    find_lex $P5047, "$lookup"
    nqp_get_sc_object $P5051, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Op"]
    unless_null $P5048, fallback3920
    nqp_get_sc_object $P5052, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5048, $P5052
  fallback3920:
    find_lex $P5054, "$lookup"
    set $P5053, $P5054[0]
    unless_null $P5053, fallback3921
    nqp_get_sc_object $P5055, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5053, $P5055
  fallback3921:
    find_lex $P5057, "$lookup"
    set $P5056, $P5057[1]
    unless_null $P5056, fallback3922
    nqp_get_sc_object $P5058, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5056, $P5058
  fallback3922:
.annotate 'line', 3083
    $P5059 = "&default_for"($P102)
    $P5060 = $P5048."new"($P5053, $P5056, $P5059, "bindkey" :named("op"))
    $P5061 = $P5047."fallback"($P5060)
    set $P5065, $P5061
    goto if1375_end3917
  if1375_else3916:
.annotate 'line', 3086
.annotate 'line', 3087
    find_lex $P5062, "$lookup"
    $P5063 = "&default_for"($P102)
    $P5064 = $P5062."fallback"($P5063)
    set $P5065, $P5064
  if1375_end3917:
    .return ($P5065) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_436_1351203235.318") :anon :lex :outer("cuid_437_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3057
    .const 'Sub' $P5021 = 'cuid_435_1351203235.318' 
    capture_lex $P5021 
    .lex "$first", $P101 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    new $P5019, 'ExceptionHandler'
    set_label $P5019, catch_handler_13723901
    $P5019.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5019
.annotate 'line', 3058
    find_lex $P5002, "@name"
    $P5003 = $P5002."shift"()
    set $P101, $P5003
.annotate 'line', 3059
    nqp_get_sc_object $P5007, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["WVal"]
    unless_null $P5004, fallback3896
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5008
  fallback3896:
    find_dynamic_lex $P5009, "$*W"
    unless_null $P5009, fallback3897
    nqp_get_sc_object $P5012, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$W"]
    unless_null $P5010, fallback3898
    nqp_get_sc_object $P5013, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5013
  fallback3898:
    unless_null $P5010, vivi_13703899
    die "Contextual $*W not found"
    box $P5014, "Contextual $*W not found"
    set $P5010, $P5014
  vivi_13703899:
    set $P5009, $P5010
  fallback3897:
    new $P5015, 'ResizablePMCArray'
    push $P5015, $P101
    $P5016 = $P5009."find_sym"($P5015)
    $P5017 = $P5004."new"($P5016 :named("value"))
    store_lex "$path", $P5017
    nqp_get_sc_object $P5018, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5020, $P5018
    pop_eh 
    goto skip_handler_13713900
  catch_handler_13723901:
    .get_results ($P5019) 
    .const 'Sub' $P10001 = 'cuid_435_1351203235.318' 
    capture_lex $P10001
    $P10001($P5019)
    set $I10001, 1
    set $P5019["handled"], $I10001
    nqp_get_sc_object $P10002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    finalize $P5019
    pop_upto_eh $P5019
    pop_eh 
    set $P5020, $P10002
    goto skip_handler_13713900
  skip_handler_13713900:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_435_1351203235.318") :anon :lex :outer("cuid_436_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3060
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 3061
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3902
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback3902:
    find_lex $P5006, "$first"
    $P5007 = $P5001."new"($P5006 :named("name"), "lexical" :named("scope"))
    store_lex "$path", $P5007
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_438_1351203235.318") :anon :lex :outer("cuid_437_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3071
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 3072
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback3910
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback3910:
    find_lex $P5006, "$path"
.annotate 'line', 3074
    nqp_get_sc_object $P5010, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["SVal"]
    unless_null $P5007, fallback3911
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5011
  fallback3911:
    set $S5001, _lex_param_0
    $P5012 = $P5007."new"($S5001 :named("value"))
    $P5013 = $P5001."new"($P5006, $P5012, "nqp_get_package_through_who PPs" :named("pirop"))
    store_lex "$path", $P5013
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_245_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1582
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback3923
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback3923:
    set $P5001, _lex_param_1["comp_unit"]
    unless_null $P5001, fallback3924
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback3924:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_246_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1584
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1585
    unless_null _lex_param_1, fallback3927
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback3927:
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback3928
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback3928:
    unless $P5001 goto if1377_else3925 
    unless_null _lex_param_1, fallback3929
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5005
  fallback3929:
    set $P5004, _lex_param_1["identifier"]
    unless_null $P5004, fallback3930
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5006
  fallback3930:
    set $S5006, $P5004
    concat $S5005, $S5006, ":"
.annotate 'line', 1586
    unless_null _lex_param_1, fallback3931
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5009
  fallback3931:
    set $P5008, _lex_param_1["colonpair"]
    unless_null $P5008, fallback3932
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5010
  fallback3932:
    set $P5007, $P5008[0]
    unless_null $P5007, fallback3933
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5011
  fallback3933:
    $P5012 = $P5007."ast"()
    $P5013 = $P5012."named"()
    set $S5007, $P5013
    concat $S5004, $S5005, $S5007
    concat $S5003, $S5004, "<"
.annotate 'line', 1587
    unless_null _lex_param_1, fallback3934
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5016
  fallback3934:
    set $P5015, _lex_param_1["colonpair"]
    unless_null $P5015, fallback3935
    nqp_get_sc_object $P5017, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5015, $P5017
  fallback3935:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback3936
    nqp_get_sc_object $P5018, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5014, $P5018
  fallback3936:
    $P5019 = $P5014."ast"()
    $P5020 = "&colonpair_str"($P5019)
    set $S5008, $P5020
    concat $S5002, $S5003, $S5008
    concat $S5001, $S5002, ">"
    set $S5010, $S5001
    goto if1377_end3926
  if1377_else3925:
    set $S5009, _lex_param_1
    set $S5010, $S5009
  if1377_end3926:
    $P5021 = _lex_param_1."!make"($S5010)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_247_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1602
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$mainline", $P101 
    .lex "$unit", $P102 
    .lex "$main_tasks", $P103 
    .lex "$compunit", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P103, $P5003
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P104, $P5004
.annotate 'line', 1603
    unless_null _lex_param_1, fallback3937
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5006
  fallback3937:
    set $P5005, _lex_param_1["statementlist"]
    unless_null $P5005, fallback3938
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5005, $P5007
  fallback3938:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
.annotate 'line', 1604
    find_dynamic_lex $P5009, "$*W"
    unless_null $P5009, fallback3939
    nqp_get_sc_object $P5012, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$W"]
    unless_null $P5010, fallback3940
    nqp_get_sc_object $P5013, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5013
  fallback3940:
    unless_null $P5010, vivi_13783941
    die "Contextual $*W not found"
    box $P5014, "Contextual $*W not found"
    set $P5010, $P5014
  vivi_13783941:
    set $P5009, $P5010
  fallback3939:
    $P5015 = $P5009."pop_lexpad"()
    set $P102, $P5015
    find_dynamic_lex $P5016, "$*HAS_YOU_ARE_HERE"
    unless_null $P5016, fallback3944
    nqp_get_sc_object $P5019, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["$HAS_YOU_ARE_HERE"]
    unless_null $P5017, fallback3945
    nqp_get_sc_object $P5020, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5017, $P5020
  fallback3945:
    unless_null $P5017, vivi_13803946
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5021, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5017, $P5021
  vivi_13803946:
    set $P5016, $P5017
  fallback3944:
    if $P5016 goto unless1379_end3943 
.annotate 'line', 1609
.annotate 'line', 1610
    nqp_decontainerize $P5022, _lex_param_0
    $P5023 = $P5022."CTXSAVE"()
    $P5024 = $P102."push"($P5023)
  unless1379_end3943:
.annotate 'line', 1617
    nqp_get_sc_object $P5028, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Var"]
    unless_null $P5025, fallback3947
    nqp_get_sc_object $P5029, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5025, $P5029
  fallback3947:
    $P5030 = $P5025."new"("lexical" :named("scope"), "@ARGS" :named("name"), "param" :named("decl"), 1 :named("slurpy"))
    $P102."unshift"($P5030)
.annotate 'line', 1618
    nqp_get_sc_object $P5034, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Stmts"]
    unless_null $P5031, fallback3948
    nqp_get_sc_object $P5035, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5031, $P5035
  fallback3948:
.annotate 'line', 1619
    nqp_get_sc_object $P5039, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["VM"]
    unless_null $P5036, fallback3949
    nqp_get_sc_object $P5040, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5036, $P5040
  fallback3949:
.annotate 'line', 1621
    nqp_get_sc_object $P5044, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["SVal"]
    unless_null $P5041, fallback3950
    nqp_get_sc_object $P5045, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5041, $P5045
  fallback3950:
    $P5046 = $P5041."new"("ModuleLoader.pbc" :named("value"))
    $P5047 = $P5036."new"($P5046, "load_bytecode vs" :named("pirop"))
.annotate 'line', 1623
    nqp_get_sc_object $P5051, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Op"]
    unless_null $P5048, fallback3951
    nqp_get_sc_object $P5052, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5048, $P5052
  fallback3951:
.annotate 'line', 1625
    nqp_get_sc_object $P5056, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["VM"]
    unless_null $P5053, fallback3952
    nqp_get_sc_object $P5057, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5053, $P5057
  fallback3952:
.annotate 'line', 1627
    nqp_get_sc_object $P5061, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5060, $P5061, "QAST"
    get_who $P5059, $P5060
    set $P5058, $P5059["SVal"]
    unless_null $P5058, fallback3953
    nqp_get_sc_object $P5062, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5058, $P5062
  fallback3953:
    $P5063 = $P5058."new"("ModuleLoader" :named("value"))
    $P5064 = $P5053."new"($P5063, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 1629
    nqp_get_sc_object $P5068, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5067, $P5068, "QAST"
    get_who $P5066, $P5067
    set $P5065, $P5066["Op"]
    unless_null $P5065, fallback3954
    nqp_get_sc_object $P5069, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5065, $P5069
  fallback3954:
.annotate 'line', 1631
    nqp_get_sc_object $P5073, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5072, $P5073, "QAST"
    get_who $P5071, $P5072
    set $P5070, $P5071["VM"]
    unless_null $P5070, fallback3955
    nqp_get_sc_object $P5074, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5070, $P5074
  fallback3955:
    $P5075 = $P5070."new"("getinterp P" :named("pirop"))
.annotate 'line', 1632
    nqp_get_sc_object $P5079, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5078, $P5079, "QAST"
    get_who $P5077, $P5078
    set $P5076, $P5077["SVal"]
    unless_null $P5076, fallback3956
    nqp_get_sc_object $P5080, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5076, $P5080
  fallback3956:
    $P5081 = $P5076."new"("context" :named("value"))
    $P5082 = $P5065."new"($P5075, $P5081, "atkey" :named("op"))
    $P5083 = $P5048."new"($P5064, $P5082, "callmethod" :named("op"), "set_mainline_module" :named("name"))
    $P5084 = $P5031."new"($P5047, $P5083)
    set $P103, $P5084
    find_dynamic_lex $P5085, "$*MAIN_SUB"
    unless_null $P5085, fallback3959
    nqp_get_sc_object $P5088, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5087, $P5088
    set $P5086, $P5087["$MAIN_SUB"]
    unless_null $P5086, fallback3960
    nqp_get_sc_object $P5089, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5086, $P5089
  fallback3960:
    unless_null $P5086, vivi_13823961
    die "Contextual $*MAIN_SUB not found"
    box $P5090, "Contextual $*MAIN_SUB not found"
    set $P5086, $P5090
  vivi_13823961:
    set $P5085, $P5086
  fallback3959:
    unless $P5085 goto if1381_end3958 
.annotate 'line', 1636
.annotate 'line', 1637
    nqp_get_sc_object $P5094, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5093, $P5094, "QAST"
    get_who $P5092, $P5093
    set $P5091, $P5092["Op"]
    unless_null $P5091, fallback3962
    nqp_get_sc_object $P5095, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5091, $P5095
  fallback3962:
.annotate 'line', 1638
    nqp_get_sc_object $P5099, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5098, $P5099, "QAST"
    get_who $P5097, $P5098
    set $P5096, $P5097["BVal"]
    unless_null $P5096, fallback3963
    nqp_get_sc_object $P5100, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5096, $P5100
  fallback3963:
    find_dynamic_lex $P5101, "$*MAIN_SUB"
    unless_null $P5101, fallback3964
    nqp_get_sc_object $P5104, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5103, $P5104
    set $P5102, $P5103["$MAIN_SUB"]
    unless_null $P5102, fallback3965
    nqp_get_sc_object $P5105, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5102, $P5105
  fallback3965:
    unless_null $P5102, vivi_13833966
    die "Contextual $*MAIN_SUB not found"
    box $P5106, "Contextual $*MAIN_SUB not found"
    set $P5102, $P5106
  vivi_13833966:
    set $P5101, $P5102
  fallback3964:
    $P5107 = $P5096."new"($P5101 :named("value"))
.annotate 'line', 1639
    nqp_get_sc_object $P5111, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5110, $P5111, "QAST"
    get_who $P5109, $P5110
    set $P5108, $P5109["Var"]
    unless_null $P5108, fallback3967
    nqp_get_sc_object $P5112, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5108, $P5112
  fallback3967:
    $P5113 = $P5108."new"("lexical" :named("scope"), "@ARGS" :named("name"), 1 :named("flat"))
    $P5114 = $P5091."new"($P5107, $P5113, "call" :named("op"))
    $P5115 = $P103."push"($P5114)
  if1381_end3958:
.annotate 'line', 1642
    nqp_get_sc_object $P5119, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5118, $P5119, "QAST"
    get_who $P5117, $P5118
    set $P5116, $P5117["Op"]
    unless_null $P5116, fallback3968
    nqp_get_sc_object $P5120, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5116, $P5120
  fallback3968:
.annotate 'line', 1644
    nqp_get_sc_object $P5124, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5123, $P5124, "QAST"
    get_who $P5122, $P5123
    set $P5121, $P5122["Var"]
    unless_null $P5121, fallback3969
    nqp_get_sc_object $P5125, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5121, $P5125
  fallback3969:
    $P5126 = $P5121."new"("lexical" :named("scope"), "@ARGS" :named("name"))
    $P5127 = $P5116."new"($P5126, $P103, "if" :named("op"))
    $P101."push"($P5127)
.annotate 'line', 1649
    $P102."push"($P101)
.annotate 'line', 1652
    find_dynamic_lex $P5128, "$*W"
    unless_null $P5128, fallback3970
    nqp_get_sc_object $P5131, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5130, $P5131
    set $P5129, $P5130["$W"]
    unless_null $P5129, fallback3971
    nqp_get_sc_object $P5132, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5129, $P5132
  fallback3971:
    unless_null $P5129, vivi_13843972
    die "Contextual $*W not found"
    box $P5133, "Contextual $*W not found"
    set $P5129, $P5133
  vivi_13843972:
    set $P5128, $P5129
  fallback3970:
    $P5134 = $P5128."libs"()
    $P102."push"($P5134)
.annotate 'line', 1655
    nqp_get_sc_object $P5138, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5137, $P5138, "QAST"
    get_who $P5136, $P5137
    set $P5135, $P5136["CompUnit"]
    unless_null $P5135, fallback3973
    nqp_get_sc_object $P5139, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5135, $P5139
  fallback3973:
.annotate 'line', 1659
    find_dynamic_lex $P5140, "$*W"
    unless_null $P5140, fallback3974
    nqp_get_sc_object $P5143, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5142, $P5143
    set $P5141, $P5142["$W"]
    unless_null $P5141, fallback3975
    nqp_get_sc_object $P5144, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5141, $P5144
  fallback3975:
    unless_null $P5141, vivi_13853976
    die "Contextual $*W not found"
    box $P5145, "Contextual $*W not found"
    set $P5141, $P5145
  vivi_13853976:
    set $P5140, $P5141
  fallback3974:
    $P5146 = $P5140."sc"()
.annotate 'line', 1660
    find_dynamic_lex $P5147, "$*W"
    unless_null $P5147, fallback3977
    nqp_get_sc_object $P5150, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5149, $P5150
    set $P5148, $P5149["$W"]
    unless_null $P5148, fallback3978
    nqp_get_sc_object $P5151, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5148, $P5151
  fallback3978:
    unless_null $P5148, vivi_13863979
    die "Contextual $*W not found"
    box $P5152, "Contextual $*W not found"
    set $P5148, $P5152
  vivi_13863979:
    set $P5147, $P5148
  fallback3977:
    $P5153 = $P5147."code_ref_blocks"()
.annotate 'line', 1661
    find_dynamic_lex $P5154, "$*W"
    unless_null $P5154, fallback3980
    nqp_get_sc_object $P5157, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5156, $P5157
    set $P5155, $P5156["$W"]
    unless_null $P5155, fallback3981
    nqp_get_sc_object $P5158, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5155, $P5158
  fallback3981:
    unless_null $P5155, vivi_13873982
    die "Contextual $*W not found"
    box $P5159, "Contextual $*W not found"
    set $P5155, $P5159
  vivi_13873982:
    set $P5154, $P5155
  fallback3980:
    $P5160 = $P5154."is_precompilation_mode"()
.annotate 'line', 1662
    find_dynamic_lex $P5161, "$*W"
    unless_null $P5161, fallback3983
    nqp_get_sc_object $P5164, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5163, $P5164
    set $P5162, $P5163["$W"]
    unless_null $P5162, fallback3984
    nqp_get_sc_object $P5165, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5162, $P5165
  fallback3984:
    unless_null $P5162, vivi_13883985
    die "Contextual $*W not found"
    box $P5166, "Contextual $*W not found"
    set $P5162, $P5166
  vivi_13883985:
    set $P5161, $P5162
  fallback3983:
    $P5167 = $P5161."load_dependency_tasks"()
.annotate 'line', 1663
    find_dynamic_lex $P5168, "$*W"
    unless_null $P5168, fallback3986
    nqp_get_sc_object $P5171, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5170, $P5171
    set $P5169, $P5170["$W"]
    unless_null $P5169, fallback3987
    nqp_get_sc_object $P5172, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5169, $P5172
  fallback3987:
    unless_null $P5169, vivi_13893988
    die "Contextual $*W not found"
    box $P5173, "Contextual $*W not found"
    set $P5169, $P5173
  vivi_13893988:
    set $P5168, $P5169
  fallback3986:
    $P5174 = $P5168."fixup_tasks"()
.annotate 'line', 1668
    nqp_get_sc_object $P5178, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5177, $P5178, "QAST"
    get_who $P5176, $P5177
    set $P5175, $P5176["Op"]
    unless_null $P5175, fallback3989
    nqp_get_sc_object $P5179, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5175, $P5179
  fallback3989:
.annotate 'line', 1670
    nqp_get_sc_object $P5183, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5182, $P5183, "QAST"
    get_who $P5181, $P5182
    set $P5180, $P5181["BVal"]
    unless_null $P5180, fallback3990
    nqp_get_sc_object $P5184, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5180, $P5184
  fallback3990:
    $P5185 = $P5180."new"($P102 :named("value"))
    $P5186 = $P5175."new"($P5185, "call" :named("op"))
    $P5187 = $P5135."new"($P102, "nqp" :named("hll"), $P5146 :named("sc"), $P5153 :named("code_ref_blocks"), $P5160 :named("compilation_mode"), $P5167 :named("pre_deserialize"), $P5174 :named("post_deserialize"), $P5186 :named("load"))
    set $P104, $P5187
.annotate 'line', 1678
    $P5188 = _lex_param_1."!make"($P104)
    .return ($P5188) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_248_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1681
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_440_1351203235.318' 
    capture_lex $P5022 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 1682
    nqp_get_sc_object $P5005, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback3991
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5006
  fallback3991:
    $P5007 = $P5002."new"(_lex_param_1 :named("node"))
    set $P101, $P5007
    unless_null _lex_param_1, fallback3994
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5009
  fallback3994:
    set $P5008, _lex_param_1["statement"]
    unless_null $P5008, fallback3995
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5010
  fallback3995:
    unless $P5008 goto if1390_else3992 
.annotate 'line', 1683
    unless_null _lex_param_1, fallback3996
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5015
  fallback3996:
    set $P5014, _lex_param_1["statement"]
    unless_null $P5014, fallback3997
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5014, $P5016
  fallback3997:
    set $P5011, $P5014
    iter $P5013, $P5014
  for_next4010:
    unless $P5013, for_done4012
    shift $P5018, $P5013
  for_redo4011:
    .const 'Sub' $P5017 = 'cuid_440_1351203235.318' 
    capture_lex $P5017
    $P5011 = $P5017($P5018)
    goto for_next4010
  for_done4012:
    goto if1390_end3993
  if1390_else3992:
.annotate 'line', 1692
.annotate 'line', 1693
    $P5019 = "&default_for"("$")
    $P5020 = $P101."push"($P5019)
  if1390_end3993:
.annotate 'line', 1695
    $P5021 = _lex_param_1."!make"($P101)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_440_1351203235.318") :anon :lex :outer("cuid_248_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1684
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 1685
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
    set $P5003, $P101["sink"]
    unless_null $P5003, fallback4000
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5004
  fallback4000:
    defined $I5001, $P5003
    unless $I5001 goto if1391_end3999 
    set $P5005, $P101["sink"]
    unless_null $P5005, fallback4001
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5005, $P5006
  fallback4001:
    set $P101, $P5005
  if1391_end3999:
    set $P5007, $P101["bareblock"]
    unless_null $P5007, fallback4004
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5008
  fallback4004:
    unless $P5007 goto if1392_end4003 
.annotate 'line', 1687
    set $P5009, $P101[0]
    unless_null $P5009, fallback4005
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5010
  fallback4005:
    $P5011 = "&block_immediate"($P5009)
    set $P101, $P5011
  if1392_end4003:
    nqp_get_sc_object $P5015, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Node"]
    unless_null $P5012, fallback4008
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5012, $P5016
  fallback4008:
    type_check $I5002, $P101, $P5012
    unless $I5002 goto if1393_end4007 
.annotate 'line', 1688
    nqp_get_sc_object $P5020, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Stmts"]
    unless_null $P5017, fallback4009
    nqp_get_sc_object $P5021, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5017, $P5021
  fallback4009:
    $P5022 = $P5017."new"($P101)
    set $P101, $P5022
  if1393_end4007:
.annotate 'line', 1689
    find_lex $P5023, "$past"
    $P5024 = $P5023."push"($P101)
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_249_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1698
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_4 :opt_flag 
    .const 'Sub' $P5018 = 'cuid_441_1351203235.318' 
    capture_lex $P5018 
    if haz_param_4, default4049
    nqp_get_sc_object $P5017, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_2, $P5017
  default4049:
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    unless_null _lex_param_1, fallback4015
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5003
  fallback4015:
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback4016
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5004
  fallback4016:
    unless $P5002 goto if1394_else4013 
    .const 'Sub' $P5005 = 'cuid_441_1351203235.318' 
    capture_lex $P5005
    $P5006 = $P5005()
    goto if1394_end4014
  if1394_else4013:
    unless_null _lex_param_1, fallback4045
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5008
  fallback4045:
    set $P5007, _lex_param_1["statement_control"]
    unless_null $P5007, fallback4046
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5009
  fallback4046:
    unless $P5007 goto if1398_else4043 
.annotate 'line', 1721
    unless_null _lex_param_1, fallback4047
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5011
  fallback4047:
    set $P5010, _lex_param_1["statement_control"]
    unless_null $P5010, fallback4048
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5012
  fallback4048:
    $P5013 = $P5010."ast"()
    set $P101, $P5013
    set $P5015, $P101
    goto if1398_end4044
  if1398_else4043:
.annotate 'line', 1722
    box $P5014, 0
    set $P101, $P5014
    set $P5015, $P101
  if1398_end4044:
  if1394_end4014:
.annotate 'line', 1723
    $P5016 = _lex_param_1."!make"($P101)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_441_1351203235.318") :anon :lex :outer("cuid_249_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1700
    .lex "$mc", $P101 
    .lex "$ml", $P102 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    find_lex $P5005, "$/"
    unless_null $P5005, fallback4017
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5005, $P5006
  fallback4017:
    set $P5004, $P5005["statement_mod_cond"]
    unless_null $P5004, fallback4018
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5007
  fallback4018:
    set $P5003, $P5004[0]
    unless_null $P5003, fallback4019
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5008
  fallback4019:
    set $P101, $P5003
    find_lex $P5011, "$/"
    unless_null $P5011, fallback4020
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5012
  fallback4020:
    set $P5010, $P5011["statement_mod_loop"]
    unless_null $P5010, fallback4021
    nqp_get_sc_object $P5013, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5013
  fallback4021:
    set $P5009, $P5010[0]
    unless_null $P5009, fallback4022
    nqp_get_sc_object $P5014, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5014
  fallback4022:
    set $P102, $P5009
.annotate 'line', 1703
    find_lex $P5016, "$/"
    unless_null $P5016, fallback4023
    nqp_get_sc_object $P5017, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5016, $P5017
  fallback4023:
    set $P5015, $P5016["EXPR"]
    unless_null $P5015, fallback4024
    nqp_get_sc_object $P5018, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5015, $P5018
  fallback4024:
    $P5019 = $P5015."ast"()
    store_lex "$past", $P5019
    unless $P101 goto if1395_end4026 
.annotate 'line', 1704
.annotate 'line', 1705
    nqp_get_sc_object $P5023, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback4027
    nqp_get_sc_object $P5024, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5020, $P5024
  fallback4027:
    set $P5025, $P101["cond"]
    unless_null $P5025, fallback4028
    nqp_get_sc_object $P5026, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5025, $P5026
  fallback4028:
    $P5027 = $P5025."ast"()
    find_lex $P5028, "$past"
    set $P5029, $P101["sym"]
    unless_null $P5029, fallback4029
    nqp_get_sc_object $P5030, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5029, $P5030
  fallback4029:
    set $S5001, $P5029
    find_lex $P5031, "$/"
    $P5032 = $P5020."new"($P5027, $P5028, $S5001 :named("op"), $P5031 :named("node"))
    store_lex "$past", $P5032
  if1395_end4026:
    set $P5077, $P102
    unless $P102 goto if1396_end4031 
.annotate 'line', 1707
    set $P5033, $P102["sym"]
    unless_null $P5033, fallback4034
    nqp_get_sc_object $P5034, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5033, $P5034
  fallback4034:
    set $S5002, $P5033
    iseq $I5001, $S5002, "for"
    unless $I5001 goto if1397_else4032 
.annotate 'line', 1708
.annotate 'line', 1709
    nqp_get_sc_object $P5038, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Block"]
    unless_null $P5035, fallback4035
    nqp_get_sc_object $P5039, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5035, $P5039
  fallback4035:
.annotate 'line', 1710
    nqp_get_sc_object $P5043, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Var"]
    unless_null $P5040, fallback4036
    nqp_get_sc_object $P5044, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5040, $P5044
  fallback4036:
    $P5045 = $P5040."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    find_lex $P5046, "$past"
    $P5047 = $P5035."new"($P5045, $P5046, "immediate" :named("blocktype"))
    store_lex "$past", $P5047
.annotate 'line', 1712
    find_lex $P5048, "$past"
    $P5048."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1713
    find_lex $P5049, "$past"
    $P5049."arity"(1)
.annotate 'line', 1714
    nqp_get_sc_object $P5053, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["Op"]
    unless_null $P5050, fallback4037
    nqp_get_sc_object $P5054, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5050, $P5054
  fallback4037:
    set $P5055, $P102["cond"]
    unless_null $P5055, fallback4038
    nqp_get_sc_object $P5056, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5055, $P5056
  fallback4038:
    $P5057 = $P5055."ast"()
    find_lex $P5058, "$past"
    set $P5059, $P102["sym"]
    unless_null $P5059, fallback4039
    nqp_get_sc_object $P5060, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5059, $P5060
  fallback4039:
    set $S5003, $P5059
    find_lex $P5061, "$/"
    $P5062 = $P5050."new"($P5057, $P5058, $S5003 :named("op"), $P5061 :named("node"))
    store_lex "$past", $P5062
    set $P5076, $P5062
    goto if1397_end4033
  if1397_else4032:
.annotate 'line', 1716
.annotate 'line', 1717
    nqp_get_sc_object $P5066, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5065, $P5066, "QAST"
    get_who $P5064, $P5065
    set $P5063, $P5064["Op"]
    unless_null $P5063, fallback4040
    nqp_get_sc_object $P5067, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5063, $P5067
  fallback4040:
    set $P5068, $P102["cond"]
    unless_null $P5068, fallback4041
    nqp_get_sc_object $P5069, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5068, $P5069
  fallback4041:
    $P5070 = $P5068."ast"()
    find_lex $P5071, "$past"
    set $P5072, $P102["sym"]
    unless_null $P5072, fallback4042
    nqp_get_sc_object $P5073, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5072, $P5073
  fallback4042:
    set $S5004, $P5072
    find_lex $P5074, "$/"
    $P5075 = $P5063."new"($P5070, $P5071, $S5004 :named("op"), $P5074 :named("node"))
    store_lex "$past", $P5075
    set $P5076, $P5075
  if1397_end4033:
    set $P5077, $P5076
  if1396_end4031:
    .return ($P5077) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_250_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1726
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1727
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback4050
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback4050:
    unless_null _lex_param_1, fallback4051
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5007
  fallback4051:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback4052
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5008
  fallback4052:
    $P5009 = $P5006."ast"()
    unless_null _lex_param_1, fallback4053
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5011
  fallback4053:
    set $P5010, _lex_param_1["pblock"]
    unless_null $P5010, fallback4054
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5012
  fallback4054:
    $P5013 = $P5010."ast"()
    $P5014 = $P5001."new"($P5009, $P5013, "if" :named("op"), _lex_param_1 :named("node"))
    $P5015 = _lex_param_1."!make"($P5014)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_251_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1730
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1731
    unless_null _lex_param_1, fallback4055
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4055:
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback4056
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4056:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_252_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1734
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1735
    unless_null _lex_param_1, fallback4057
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4057:
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback4058
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4058:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_253_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1738
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5029 = 'cuid_443_1351203235.318' 
    capture_lex $P5029 
    .lex "$BLOCK", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 1739
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4059
    nqp_get_sc_object $P5005, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4060
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5006
  fallback4060:
    unless_null $P5003, vivi_13994061
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_13994061:
    set $P5002, $P5003
  fallback4059:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
    unless_null _lex_param_1, fallback4064
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5010
  fallback4064:
    set $P5009, _lex_param_1["statementlist"]
    unless_null $P5009, fallback4065
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5011
  fallback4065:
    unless $P5009 goto if1400_else4062 
    .const 'Sub' $P5012 = 'cuid_443_1351203235.318' 
    capture_lex $P5012
    $P5013 = $P5012()
    set $P5028, $P5013
    goto if1400_end4063
  if1400_else4062:
.annotate 'line', 1754
    find_dynamic_lex $P5014, "$*HAS_YOU_ARE_HERE"
    unless_null $P5014, fallback4090
    nqp_get_sc_object $P5017, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["$HAS_YOU_ARE_HERE"]
    unless_null $P5015, fallback4091
    nqp_get_sc_object $P5018, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5015, $P5018
  fallback4091:
    unless_null $P5015, vivi_14084092
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5019, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5015, $P5019
  vivi_14084092:
    set $P5014, $P5015
  fallback4090:
    unless $P5014 goto if1407_end4089 
.annotate 'line', 1755
.annotate 'line', 1756
    $P5020 = _lex_param_1."CURSOR"()
    $P5021 = $P5020."panic"("{YOU_ARE_HERE} may only appear once in a setting")
  if1407_end4089:
    box $P5022, 1
    store_dynamic_lex "$*HAS_YOU_ARE_HERE", $P5022
.annotate 'line', 1759
    unless_null _lex_param_1, fallback4093
    nqp_get_sc_object $P5024, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5024
  fallback4093:
    set $P5023, _lex_param_1["you_are_here"]
    unless_null $P5023, fallback4094
    nqp_get_sc_object $P5025, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5023, $P5025
  fallback4094:
    $P5026 = $P5023."ast"()
    $P5027 = _lex_param_1."!make"($P5026)
    set $P5028, $P5027
  if1400_end4063:
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_443_1351203235.318") :anon :lex :outer("cuid_253_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1740
    .const 'Sub' $P5057 = 'cuid_442_1351203235.318' 
    capture_lex $P5057 
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 1741
    find_lex $P5003, "$/"
    unless_null $P5003, fallback4066
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5004
  fallback4066:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback4067
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5005
  fallback4067:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
    find_dynamic_lex $P5007, "%*HANDLERS"
    unless_null $P5007, fallback4070
    nqp_get_sc_object $P5010, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["%HANDLERS"]
    unless_null $P5008, fallback4071
    nqp_get_sc_object $P5012, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5011, $P5012
    new $P5013, 'Hash'
    set $P5011["%HANDLERS"], $P5013
    set $P5008, $P5013
  fallback4071:
    unless_null $P5008, vivi_14024072
    die "Contextual %*HANDLERS not found"
    box $P5014, "Contextual %*HANDLERS not found"
    set $P5008, $P5014
  vivi_14024072:
    set $P5007, $P5008
  fallback4070:
    unless $P5007 goto if1401_end4069 
.annotate 'line', 1742
.annotate 'line', 1743
    nqp_get_sc_object $P5018, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback4073
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5015, $P5019
  fallback4073:
    $P5020 = $P5015."new"($P101, "handle" :named("op"))
    set $P101, $P5020
    find_dynamic_lex $P5024, "%*HANDLERS"
    unless_null $P5024, fallback4074
    nqp_get_sc_object $P5027, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["%HANDLERS"]
    unless_null $P5025, fallback4075
    nqp_get_sc_object $P5029, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5028, $P5029
    new $P5030, 'Hash'
    set $P5028["%HANDLERS"], $P5030
    set $P5025, $P5030
  fallback4075:
    unless_null $P5025, vivi_14034076
    die "Contextual %*HANDLERS not found"
    box $P5031, "Contextual %*HANDLERS not found"
    set $P5025, $P5031
  vivi_14034076:
    set $P5024, $P5025
  fallback4074:
    set $P5021, $P5024
    iter $P5023, $P5024
  for_next4077:
    unless $P5023, for_done4079
    shift $P5033, $P5023
  for_redo4078:
    .const 'Sub' $P5032 = 'cuid_442_1351203235.318' 
    capture_lex $P5032
    $P5021 = $P5032($P5033)
    goto for_next4077
  for_done4079:
  if1401_end4069:
.annotate 'line', 1749
    find_lex $P5034, "$BLOCK"
    $P5034."push"($P101)
.annotate 'line', 1750
    find_lex $P5035, "$BLOCK"
    find_lex $P5036, "$/"
    $P5035."node"($P5036)
    find_dynamic_lex $P5037, "%*HANDLERS"
    unless_null $P5037, fallback4082
    nqp_get_sc_object $P5040, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["%HANDLERS"]
    unless_null $P5038, fallback4083
    nqp_get_sc_object $P5042, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5041, $P5042
    new $P5043, 'Hash'
    set $P5041["%HANDLERS"], $P5043
    set $P5038, $P5043
  fallback4083:
    unless_null $P5038, vivi_14054084
    die "Contextual %*HANDLERS not found"
    box $P5044, "Contextual %*HANDLERS not found"
    set $P5038, $P5044
  vivi_14054084:
    set $P5037, $P5038
  fallback4082:
    unless $P5037 goto if1404_end4081 
    find_lex $P5045, "$BLOCK"
    find_dynamic_lex $P5046, "%*HANDLERS"
    unless_null $P5046, fallback4085
    nqp_get_sc_object $P5049, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5048, $P5049
    set $P5047, $P5048["%HANDLERS"]
    unless_null $P5047, fallback4086
    nqp_get_sc_object $P5051, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5050, $P5051
    new $P5052, 'Hash'
    set $P5050["%HANDLERS"], $P5052
    set $P5047, $P5052
  fallback4086:
    unless_null $P5047, vivi_14064087
    die "Contextual %*HANDLERS not found"
    box $P5053, "Contextual %*HANDLERS not found"
    set $P5047, $P5053
  vivi_14064087:
    set $P5046, $P5047
  fallback4085:
    set $P5045["handlers"], $P5046
  if1404_end4081:
.annotate 'line', 1752
    find_dynamic_lex $P5054, "$/"
    find_lex $P5055, "$BLOCK"
    $P5056 = $P5054."!make"($P5055)
    .return ($P5056) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_442_1351203235.318") :anon :lex :outer("cuid_443_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1744
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1745
    find_lex $P5001, "$past"
    $P5002 = _lex_param_0."key"()
    $P5001."push"($P5002)
.annotate 'line', 1746
    find_lex $P5003, "$past"
    $P5004 = _lex_param_0."value"()
    $P5005 = $P5003."push"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_254_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1763
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1764
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4095
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4096
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5005
  fallback4096:
    unless_null $P5002, vivi_14094097
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_14094097:
    set $P5001, $P5002
  fallback4095:
    $P5007 = $P5001."push_lexpad"(_lex_param_1)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_255_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1767
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_444_1351203235.318' 
    capture_lex $P5024 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback4100
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback4101
    nqp_get_sc_object $P5008, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback4101:
    unless_null $P5004, vivi_14114102
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_14114102:
    set $P5003, $P5004
  fallback4100:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback4103
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5011
  fallback4103:
    set $P5001, $P5002["outer_ctx"]
    unless_null $P5001, fallback4104
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5012
  fallback4104:
    defined $I5001, $P5001
    if $I5001 goto unless1410_end4099 
    .const 'Sub' $P5013 = 'cuid_444_1351203235.318' 
    capture_lex $P5013
    $P5014 = $P5013()
  unless1410_end4099:
.annotate 'line', 1789
    nqp_decontainerize $P5015, _lex_param_0
    find_dynamic_lex $P5016, "$*W"
    unless_null $P5016, fallback4160
    nqp_get_sc_object $P5019, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["$W"]
    unless_null $P5017, fallback4161
    nqp_get_sc_object $P5020, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5017, $P5020
  fallback4161:
    unless_null $P5017, vivi_14284162
    die "Contextual $*W not found"
    box $P5021, "Contextual $*W not found"
    set $P5017, $P5021
  vivi_14284162:
    set $P5016, $P5017
  fallback4160:
    $P5022 = $P5016."cur_lexpad"()
    $P5023 = $P5015."SET_BLOCK_OUTER_CTX"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_444_1351203235.318") :anon :lex :outer("cuid_255_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1768
    .lex "$SETTING", $P101 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 1771
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4105
    nqp_get_sc_object $P5005, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4106
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5006
  fallback4106:
    unless_null $P5003, vivi_14124107
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_14124107:
    set $P5002, $P5003
  fallback4105:
    find_dynamic_lex $P5011, "%*COMPILING"
    unless_null $P5011, fallback4109
    nqp_get_sc_object $P5014, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["%COMPILING"]
    unless_null $P5012, fallback4110
    nqp_get_sc_object $P5016, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5015, $P5016
    new $P5017, 'Hash'
    set $P5015["%COMPILING"], $P5017
    set $P5012, $P5017
  fallback4110:
    unless_null $P5012, vivi_14134111
    die "Contextual %*COMPILING not found"
    box $P5018, "Contextual %*COMPILING not found"
    set $P5012, $P5018
  vivi_14134111:
    set $P5011, $P5012
  fallback4109:
    set $P5010, $P5011["%?OPTIONS"]
    unless_null $P5010, fallback4112
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5019
  fallback4112:
    set $P5009, $P5010["setting"]
    unless_null $P5009, fallback4113
    nqp_get_sc_object $P5020, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5020
  fallback4113:
    set $P5008, $P5009
    defined $I5001, $P5008
    if $I5001, defor4108
    box $P5021, "NQPCORE"
    set $P5008, $P5021
  defor4108:
    $P5022 = $P5002."load_setting"($P5008)
    set $P101, $P5022
    find_dynamic_lex $P5025, "%*COMPILING"
    unless_null $P5025, fallback4116
    nqp_get_sc_object $P5028, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["%COMPILING"]
    unless_null $P5026, fallback4117
    nqp_get_sc_object $P5030, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5029, $P5030
    new $P5031, 'Hash'
    set $P5029["%COMPILING"], $P5031
    set $P5026, $P5031
  fallback4117:
    unless_null $P5026, vivi_14154118
    die "Contextual %*COMPILING not found"
    box $P5032, "Contextual %*COMPILING not found"
    set $P5026, $P5032
  vivi_14154118:
    set $P5025, $P5026
  fallback4116:
    set $P5024, $P5025["%?OPTIONS"]
    unless_null $P5024, fallback4119
    nqp_get_sc_object $P5033, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5024, $P5033
  fallback4119:
    set $P5023, $P5024["setting"]
    unless_null $P5023, fallback4120
    nqp_get_sc_object $P5034, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5023, $P5034
  fallback4120:
    set $S5001, $P5023
    iseq $I5002, $S5001, "NULL"
    box $P5112, $I5002
    set $P5111, $P5112
    if $I5002 goto unless1414_end4115 
.annotate 'line', 1776
.annotate 'line', 1777
    "&import_HOW_exports"($P101)
    find_dynamic_lex $P5037, "%*COMPILING"
    unless_null $P5037, fallback4123
    nqp_get_sc_object $P5040, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["%COMPILING"]
    unless_null $P5038, fallback4124
    nqp_get_sc_object $P5042, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5041, $P5042
    new $P5043, 'Hash'
    set $P5041["%COMPILING"], $P5043
    set $P5038, $P5043
  fallback4124:
    unless_null $P5038, vivi_14174125
    die "Contextual %*COMPILING not found"
    box $P5044, "Contextual %*COMPILING not found"
    set $P5038, $P5044
  vivi_14174125:
    set $P5037, $P5038
  fallback4123:
    set $P5036, $P5037["%?OPTIONS"]
    unless_null $P5036, fallback4126
    nqp_get_sc_object $P5045, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5036, $P5045
  fallback4126:
    set $P5035, $P5036["old-regex-lib"]
    unless_null $P5035, fallback4127
    nqp_get_sc_object $P5046, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5035, $P5046
  fallback4127:
    unless $P5035 goto if1416_end4122 
.annotate 'line', 1778
.annotate 'line', 1779
    find_dynamic_lex $P5047, "$*W"
    unless_null $P5047, fallback4128
    nqp_get_sc_object $P5050, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$W"]
    unless_null $P5048, fallback4129
    nqp_get_sc_object $P5051, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5048, $P5051
  fallback4129:
    unless_null $P5048, vivi_14184130
    die "Contextual $*W not found"
    box $P5052, "Contextual $*W not found"
    set $P5048, $P5052
  vivi_14184130:
    set $P5047, $P5048
  fallback4128:
    find_dynamic_lex $P5053, "$*GLOBALish"
    unless_null $P5053, fallback4131
    nqp_get_sc_object $P5056, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$GLOBALish"]
    unless_null $P5054, fallback4132
    nqp_get_sc_object $P5057, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5054, $P5057
  fallback4132:
    unless_null $P5054, vivi_14194133
    die "Contextual $*GLOBALish not found"
    box $P5058, "Contextual $*GLOBALish not found"
    set $P5054, $P5058
  vivi_14194133:
    set $P5053, $P5054
  fallback4131:
    $P5059 = $P5047."load_module"("NQPRegex", $P5053)
  if1416_end4122:
    find_dynamic_lex $P5062, "%*COMPILING"
    unless_null $P5062, fallback4136
    nqp_get_sc_object $P5065, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["%COMPILING"]
    unless_null $P5063, fallback4137
    nqp_get_sc_object $P5067, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5066, $P5067
    new $P5068, 'Hash'
    set $P5066["%COMPILING"], $P5068
    set $P5063, $P5068
  fallback4137:
    unless_null $P5063, vivi_14214138
    die "Contextual %*COMPILING not found"
    box $P5069, "Contextual %*COMPILING not found"
    set $P5063, $P5069
  vivi_14214138:
    set $P5062, $P5063
  fallback4136:
    set $P5061, $P5062["%?OPTIONS"]
    unless_null $P5061, fallback4139
    nqp_get_sc_object $P5070, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5061, $P5070
  fallback4139:
    set $P5060, $P5061["no-regex-lib"]
    unless_null $P5060, fallback4140
    nqp_get_sc_object $P5071, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5060, $P5071
  fallback4140:
    set $P5110, $P5060
    if $P5060 goto unless1420_end4135 
.annotate 'line', 1781
.annotate 'line', 1782
    find_dynamic_lex $P5072, "$*W"
    unless_null $P5072, fallback4141
    nqp_get_sc_object $P5075, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5074, $P5075
    set $P5073, $P5074["$W"]
    unless_null $P5073, fallback4142
    nqp_get_sc_object $P5076, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5073, $P5076
  fallback4142:
    unless_null $P5073, vivi_14224143
    die "Contextual $*W not found"
    box $P5077, "Contextual $*W not found"
    set $P5073, $P5077
  vivi_14224143:
    set $P5072, $P5073
  fallback4141:
    find_dynamic_lex $P5078, "$*GLOBALish"
    unless_null $P5078, fallback4144
    nqp_get_sc_object $P5081, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5080, $P5081
    set $P5079, $P5080["$GLOBALish"]
    unless_null $P5079, fallback4145
    nqp_get_sc_object $P5082, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5079, $P5082
  fallback4145:
    unless_null $P5079, vivi_14234146
    die "Contextual $*GLOBALish not found"
    box $P5083, "Contextual $*GLOBALish not found"
    set $P5079, $P5083
  vivi_14234146:
    set $P5078, $P5079
  fallback4144:
    $P5072."load_module"("QRegex", $P5078)
    find_dynamic_lex $P5086, "%*COMPILING"
    unless_null $P5086, fallback4149
    nqp_get_sc_object $P5089, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5088, $P5089
    set $P5087, $P5088["%COMPILING"]
    unless_null $P5087, fallback4150
    nqp_get_sc_object $P5091, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5090, $P5091
    new $P5092, 'Hash'
    set $P5090["%COMPILING"], $P5092
    set $P5087, $P5092
  fallback4150:
    unless_null $P5087, vivi_14254151
    die "Contextual %*COMPILING not found"
    box $P5093, "Contextual %*COMPILING not found"
    set $P5087, $P5093
  vivi_14254151:
    set $P5086, $P5087
  fallback4149:
    set $P5085, $P5086["%?OPTIONS"]
    unless_null $P5085, fallback4152
    nqp_get_sc_object $P5094, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5085, $P5094
  fallback4152:
    set $P5084, $P5085["old-regex-lib"]
    unless_null $P5084, fallback4153
    nqp_get_sc_object $P5095, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5084, $P5095
  fallback4153:
    set $P5109, $P5084
    if $P5084 goto unless1424_end4148 
.annotate 'line', 1783
.annotate 'line', 1784
    find_dynamic_lex $P5096, "$*W"
    unless_null $P5096, fallback4154
    nqp_get_sc_object $P5099, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5098, $P5099
    set $P5097, $P5098["$W"]
    unless_null $P5097, fallback4155
    nqp_get_sc_object $P5100, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5097, $P5100
  fallback4155:
    unless_null $P5097, vivi_14264156
    die "Contextual $*W not found"
    box $P5101, "Contextual $*W not found"
    set $P5097, $P5101
  vivi_14264156:
    set $P5096, $P5097
  fallback4154:
    find_dynamic_lex $P5102, "$*GLOBALish"
    unless_null $P5102, fallback4157
    nqp_get_sc_object $P5105, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5104, $P5105
    set $P5103, $P5104["$GLOBALish"]
    unless_null $P5103, fallback4158
    nqp_get_sc_object $P5106, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5103, $P5106
  fallback4158:
    unless_null $P5103, vivi_14274159
    die "Contextual $*GLOBALish not found"
    box $P5107, "Contextual $*GLOBALish not found"
    set $P5103, $P5107
  vivi_14274159:
    set $P5102, $P5103
  fallback4157:
    $P5108 = $P5096."load_module"("NQPP6QRegex", $P5102)
    set $P5109, $P5108
  unless1424_end4148:
    set $P5110, $P5109
  unless1420_end4135:
    set $P5111, $P5110
  unless1414_end4115:
    .return ($P5111) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_256_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1801
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1802
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."CTXSAVE"()
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_257_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1807
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 1808
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4163
    nqp_get_sc_object $P5005, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4164
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5006
  fallback4164:
    unless_null $P5003, vivi_14294165
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_14294165:
    set $P5002, $P5003
  fallback4163:
    unless_null _lex_param_1, fallback4166
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5009
  fallback4166:
    set $P5008, _lex_param_1["name"]
    unless_null $P5008, fallback4167
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5010
  fallback4167:
    set $S5001, $P5008
    find_dynamic_lex $P5011, "$*GLOBALish"
    unless_null $P5011, fallback4168
    nqp_get_sc_object $P5014, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$GLOBALish"]
    unless_null $P5012, fallback4169
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5012, $P5015
  fallback4169:
    unless_null $P5012, vivi_14304170
    die "Contextual $*GLOBALish not found"
    box $P5016, "Contextual $*GLOBALish not found"
    set $P5012, $P5016
  vivi_14304170:
    set $P5011, $P5012
  fallback4168:
    $P5017 = $P5002."load_module"($S5001, $P5011)
    set $P101, $P5017
    defined $I5001, $P101
    unless $I5001 goto if1431_end4172 
.annotate 'line', 1809
    exists $I5002, $P101["EXPORT"]
    set $I5004, $I5002
    unless $I5002 goto if1433_end4176 
    set $P5019, $P101["EXPORT"]
    unless_null $P5019, fallback4177
    nqp_get_sc_object $P5020, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5019, $P5020
  fallback4177:
    get_who $P5018, $P5019
    exists $I5003, $P5018["DEFAULT"]
    set $I5004, $I5003
  if1433_end4176:
    unless $I5004 goto if1432_end4174 
.annotate 'line', 1810
    find_dynamic_lex $P5021, "$*W"
    unless_null $P5021, fallback4178
    nqp_get_sc_object $P5024, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["$W"]
    unless_null $P5022, fallback4179
    nqp_get_sc_object $P5025, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5022, $P5025
  fallback4179:
    unless_null $P5022, vivi_14344180
    die "Contextual $*W not found"
    box $P5026, "Contextual $*W not found"
    set $P5022, $P5026
  vivi_14344180:
    set $P5021, $P5022
  fallback4178:
    set $P5030, $P101["EXPORT"]
    unless_null $P5030, fallback4181
    nqp_get_sc_object $P5031, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5030, $P5031
  fallback4181:
    get_who $P5029, $P5030
    set $P5028, $P5029["DEFAULT"]
    unless_null $P5028, fallback4182
    nqp_get_sc_object $P5032, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5028, $P5032
  fallback4182:
    get_who $P5027, $P5028
    $P5033 = $P5021."import"($P5027)
  if1432_end4174:
.annotate 'line', 1813
    $P5034 = "&import_HOW_exports"($P101)
  if1431_end4172:
.annotate 'line', 1815
    nqp_get_sc_object $P5038, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Stmts"]
    unless_null $P5035, fallback4183
    nqp_get_sc_object $P5039, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5035, $P5039
  fallback4183:
    $P5040 = $P5035."new"()
    $P5041 = _lex_param_1."!make"($P5040)
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_258_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1818
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_445_1351203235.318' 
    capture_lex $P5030 
    .lex "$count", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    unless_null _lex_param_1, fallback4184
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5004
  fallback4184:
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4185
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5005
  fallback4185:
    set $N5002, $P5003
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5006, $N5001
    set $P101, $P5006
.annotate 'line', 1820
    unless_null _lex_param_1, fallback4186
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5009
  fallback4186:
    set $P5008, _lex_param_1["xblock"]
    unless_null $P5008, fallback4187
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5010
  fallback4187:
    set $I5001, $P101
    set $P5007, $P5008[$I5001]
    unless_null $P5007, fallback4188
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5011
  fallback4188:
    $P5012 = $P5007."ast"()
    $P5013 = "&xblock_immediate"($P5012)
    set $P102, $P5013
    unless_null _lex_param_1, fallback4191
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5015
  fallback4191:
    set $P5014, _lex_param_1["else"]
    unless_null $P5014, fallback4192
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5014, $P5016
  fallback4192:
    unless $P5014 goto if1435_end4190 
.annotate 'line', 1821
.annotate 'line', 1822
    unless_null _lex_param_1, fallback4193
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5019
  fallback4193:
    set $P5018, _lex_param_1["else"]
    unless_null $P5018, fallback4194
    nqp_get_sc_object $P5020, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5018, $P5020
  fallback4194:
    set $P5017, $P5018[0]
    unless_null $P5017, fallback4195
    nqp_get_sc_object $P5021, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5017, $P5021
  fallback4195:
    $P5022 = $P5017."ast"()
    $P5023 = "&block_immediate"($P5022)
    $P5024 = $P102."push"($P5023)
  if1435_end4190:
  while1436_test4196:
    set $N5004, $P101
    set $N5005, 0
    isgt $I5002, $N5004, $N5005
    box $P5028, $I5002
    set $P5027, $P5028
    unless $I5002 goto while1436_done4200 
  while1436_redo4198:
    .const 'Sub' $P5025 = 'cuid_445_1351203235.318' 
    capture_lex $P5025
    $P5026 = $P5025()
    set $P5027, $P5026
    goto while1436_test4196 
  while1436_done4200:
.annotate 'line', 1831
    $P5029 = _lex_param_1."!make"($P102)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_445_1351203235.318") :anon :lex :outer("cuid_258_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1825
    .lex "$else", $P101 
    .local pmc tmp_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    find_lex $P5002, "$count"
    set tmp_1, $P5002
    set $N5002, tmp_1
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$count", $P5003
    find_lex $P5002, "$past"
    set $P101, $P5002
.annotate 'line', 1828
    find_lex $P5005, "$/"
    unless_null $P5005, fallback4201
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5005, $P5006
  fallback4201:
    set $P5004, $P5005["xblock"]
    unless_null $P5004, fallback4202
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5007
  fallback4202:
    find_lex $P5008, "$count"
    set $I5001, $P5008
    set $P5003, $P5004[$I5001]
    unless_null $P5003, fallback4203
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5009
  fallback4203:
    $P5010 = $P5003."ast"()
    $P5011 = "&xblock_immediate"($P5010)
    store_lex "$past", $P5011
.annotate 'line', 1829
    find_lex $P5012, "$past"
    $P5013 = $P5012."push"($P101)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_259_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1834
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 1835
    unless_null _lex_param_1, fallback4204
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5003
  fallback4204:
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4205
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5004
  fallback4205:
    $P5005 = $P5002."ast"()
    $P5006 = "&xblock_immediate"($P5005)
    set $P101, $P5006
.annotate 'line', 1836
    $P101."op"("unless")
.annotate 'line', 1837
    $P5007 = _lex_param_1."!make"($P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_260_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1840
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 1841
    unless_null _lex_param_1, fallback4206
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5003
  fallback4206:
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4207
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5004
  fallback4207:
    $P5005 = $P5002."ast"()
    $P5006 = "&xblock_immediate"($P5005)
    set $P101, $P5006
.annotate 'line', 1842
    unless_null _lex_param_1, fallback4208
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5008
  fallback4208:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback4209
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5009
  fallback4209:
    set $S5001, $P5007
    $P101."op"($S5001)
    find_dynamic_lex $P5010, "$*CONTROL_USED"
    unless_null $P5010, fallback4212
    nqp_get_sc_object $P5013, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$CONTROL_USED"]
    unless_null $P5011, fallback4213
    nqp_get_sc_object $P5014, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5014
  fallback4213:
    unless_null $P5011, vivi_14384214
    die "Contextual $*CONTROL_USED not found"
    box $P5015, "Contextual $*CONTROL_USED not found"
    set $P5011, $P5015
  vivi_14384214:
    set $P5010, $P5011
  fallback4212:
    if $P5010 goto unless1437_end4211 
.annotate 'line', 1843
.annotate 'line', 1844
    nqp_get_sc_object $P5019, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["IVal"]
    unless_null $P5016, fallback4215
    nqp_get_sc_object $P5020, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5016, $P5020
  fallback4215:
    $P5021 = $P5016."new"(1 :named("value"), "nohandler" :named("named"))
    $P5022 = $P101."push"($P5021)
  unless1437_end4211:
.annotate 'line', 1846
    $P5023 = _lex_param_1."!make"($P101)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_261_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1849
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    unless_null _lex_param_1, fallback4216
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5004
  fallback4216:
    set $P5003, _lex_param_1["wu"]
    unless_null $P5003, fallback4217
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5005
  fallback4217:
    set $S5002, $P5003
    concat $S5001, "repeat_", $S5002
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback4220
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5008
  fallback4220:
    set $P5007, _lex_param_1["xblock"]
    unless_null $P5007, fallback4221
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5009
  fallback4221:
    unless $P5007 goto if1439_else4218 
.annotate 'line', 1852
.annotate 'line', 1853
    unless_null _lex_param_1, fallback4222
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5011
  fallback4222:
    set $P5010, _lex_param_1["xblock"]
    unless_null $P5010, fallback4223
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5012
  fallback4223:
    $P5013 = $P5010."ast"()
    $P5014 = "&xblock_immediate"($P5013)
    set $P102, $P5014
.annotate 'line', 1854
    $P5015 = $P102."op"($P101)
    goto if1439_end4219
  if1439_else4218:
.annotate 'line', 1856
.annotate 'line', 1857
    nqp_get_sc_object $P5019, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Op"]
    unless_null $P5016, fallback4224
    nqp_get_sc_object $P5020, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5016, $P5020
  fallback4224:
    unless_null _lex_param_1, fallback4225
    nqp_get_sc_object $P5022, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5022
  fallback4225:
    set $P5021, _lex_param_1["EXPR"]
    unless_null $P5021, fallback4226
    nqp_get_sc_object $P5023, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5021, $P5023
  fallback4226:
    $P5024 = $P5021."ast"()
    unless_null _lex_param_1, fallback4227
    nqp_get_sc_object $P5026, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5026
  fallback4227:
    set $P5025, _lex_param_1["pblock"]
    unless_null $P5025, fallback4228
    nqp_get_sc_object $P5027, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5025, $P5027
  fallback4228:
    $P5028 = $P5025."ast"()
    $P5029 = "&block_immediate"($P5028)
    $P5030 = $P5016."new"($P5024, $P5029, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P102, $P5030
  if1439_end4219:
    find_dynamic_lex $P5031, "$*CONTROL_USED"
    unless_null $P5031, fallback4231
    nqp_get_sc_object $P5034, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$CONTROL_USED"]
    unless_null $P5032, fallback4232
    nqp_get_sc_object $P5035, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5032, $P5035
  fallback4232:
    unless_null $P5032, vivi_14414233
    die "Contextual $*CONTROL_USED not found"
    box $P5036, "Contextual $*CONTROL_USED not found"
    set $P5032, $P5036
  vivi_14414233:
    set $P5031, $P5032
  fallback4231:
    if $P5031 goto unless1440_end4230 
.annotate 'line', 1860
.annotate 'line', 1861
    nqp_get_sc_object $P5040, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["IVal"]
    unless_null $P5037, fallback4234
    nqp_get_sc_object $P5041, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5037, $P5041
  fallback4234:
    $P5042 = $P5037."new"(1 :named("value"), "nohandler" :named("named"))
    $P5043 = $P102."push"($P5042)
  unless1440_end4230:
.annotate 'line', 1863
    $P5044 = _lex_param_1."!make"($P102)
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_262_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1866
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
.annotate 'line', 1867
    unless_null _lex_param_1, fallback4235
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5004
  fallback4235:
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4236
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5005
  fallback4236:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 1868
    $P101."op"("for")
    set $P5007, $P101[1]
    unless_null $P5007, fallback4237
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5008
  fallback4237:
    set $P102, $P5007
.annotate 'line', 1870
    $P5009 = $P102."arity"()
    if $P5009 goto unless1442_end4239 
.annotate 'line', 1871
    set $P5010, $P102[0]
    unless_null $P5010, fallback4240
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5011
  fallback4240:
    nqp_get_sc_object $P5015, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback4241
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5012, $P5016
  fallback4241:
    $P5017 = $P5012."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5010."push"($P5017)
.annotate 'line', 1872
    $P102."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1873
    $P5018 = $P102."arity"(1)
  unless1442_end4239:
.annotate 'line', 1875
    $P102."blocktype"("immediate")
    find_dynamic_lex $P5019, "$*CONTROL_USED"
    unless_null $P5019, fallback4244
    nqp_get_sc_object $P5022, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$CONTROL_USED"]
    unless_null $P5020, fallback4245
    nqp_get_sc_object $P5023, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5020, $P5023
  fallback4245:
    unless_null $P5020, vivi_14444246
    die "Contextual $*CONTROL_USED not found"
    box $P5024, "Contextual $*CONTROL_USED not found"
    set $P5020, $P5024
  vivi_14444246:
    set $P5019, $P5020
  fallback4244:
    if $P5019 goto unless1443_end4243 
.annotate 'line', 1876
.annotate 'line', 1877
    nqp_get_sc_object $P5028, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["IVal"]
    unless_null $P5025, fallback4247
    nqp_get_sc_object $P5029, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5025, $P5029
  fallback4247:
    $P5030 = $P5025."new"(1 :named("value"), "nohandler" :named("named"))
    $P5031 = $P101."push"($P5030)
  unless1443_end4243:
.annotate 'line', 1879
    $P5032 = _lex_param_1."!make"($P101)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_263_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1882
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 1883
    unless_null _lex_param_1, fallback4248
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5003
  fallback4248:
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4249
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5004
  fallback4249:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1884
    "&set_block_handler"(_lex_param_1, $P101, "CATCH")
.annotate 'line', 1885
    $P5006 = "&default_for"("$")
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_264_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1888
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 1889
    unless_null _lex_param_1, fallback4250
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5003
  fallback4250:
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4251
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5004
  fallback4251:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1890
    "&set_block_handler"(_lex_param_1, $P101, "CONTROL")
.annotate 'line', 1891
    $P5006 = "&default_for"("$")
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_265_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1925
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1926
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4252
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4253
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5005
  fallback4253:
    unless_null $P5002, vivi_14454254
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_14454254:
    set $P5001, $P5002
  fallback4252:
    unless_null _lex_param_1, fallback4255
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5008
  fallback4255:
    set $P5007, _lex_param_1["blorst"]
    unless_null $P5007, fallback4256
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5009
  fallback4256:
    $P5010 = $P5007."ast"()
    $P5011 = $P5001."run_begin_block"($P5010)
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_266_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1929
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1930
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4257
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4258
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5005
  fallback4258:
    unless_null $P5002, vivi_14464259
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_14464259:
    set $P5001, $P5002
  fallback4257:
    $P5007 = $P5001."cur_lexpad"()
    unless_null _lex_param_1, fallback4260
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5009
  fallback4260:
    set $P5008, _lex_param_1["blorst"]
    unless_null $P5008, fallback4261
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5010
  fallback4261:
    $P5011 = $P5008."ast"()
    $P5007."push"($P5011)
.annotate 'line', 1931
    nqp_get_sc_object $P5015, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Stmts"]
    unless_null $P5012, fallback4262
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5012, $P5016
  fallback4262:
    $P5017 = $P5012."new"()
    $P5018 = _lex_param_1."!make"($P5017)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_267_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1934
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_4263
    .lex "RETURN", $P102
.annotate 'line', 1935
    unless_null _lex_param_1, fallback4265
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5003
  fallback4265:
    set $P5002, _lex_param_1["blorst"]
    unless_null $P5002, fallback4266
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5004
  fallback4266:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
    nqp_get_sc_object $P5009, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback4269
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5010
  fallback4269:
    type_check $I5001, $P101, $P5006
    unless $I5001 goto if1447_end4268 
.annotate 'line', 1936
    set $P5011, $P101["handlers"]
    unless_null $P5011, fallback4274
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5012
  fallback4274:
    set $P5015, $P5011
    unless $P5011 goto if1449_end4273 
    set $P5013, $P101["handlers"]
    unless_null $P5013, fallback4275
    nqp_get_sc_object $P5014, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5013, $P5014
  fallback4275:
    exists $I5002, $P5013["CATCH"]
    box $P5016, $I5002
    set $P5015, $P5016
  if1449_end4273:
    unless $P5015 goto if1448_else4270 
.annotate 'line', 1937
.annotate 'line', 1938
    _lex_param_1."!make"($P101)
    find_lex $P5017, "RETURN"
    $P5018 = $P5017(1)
    set $P5020, $P5018
    goto if1448_end4271
  if1448_else4270:
.annotate 'line', 1941
.annotate 'line', 1942
    $P5019 = $P101."blocktype"("immediate")
    set $P5020, $P5019
  if1448_end4271:
  if1447_end4268:
.annotate 'line', 1945
    nqp_get_sc_object $P5024, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback4276
    nqp_get_sc_object $P5025, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5021, $P5025
  fallback4276:
.annotate 'line', 1949
    nqp_get_sc_object $P5029, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Stmts"]
    unless_null $P5026, fallback4277
    nqp_get_sc_object $P5030, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5026, $P5030
  fallback4277:
.annotate 'line', 1950
    nqp_get_sc_object $P5034, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Op"]
    unless_null $P5031, fallback4278
    nqp_get_sc_object $P5035, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5031, $P5035
  fallback4278:
.annotate 'line', 1952
    nqp_get_sc_object $P5039, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback4279
    nqp_get_sc_object $P5040, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5036, $P5040
  fallback4279:
    $P5041 = $P5036."new"("exception" :named("op"))
.annotate 'line', 1953
    nqp_get_sc_object $P5045, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["SVal"]
    unless_null $P5042, fallback4280
    nqp_get_sc_object $P5046, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5042, $P5046
  fallback4280:
    $P5047 = $P5042."new"("handled" :named("value"))
.annotate 'line', 1954
    nqp_get_sc_object $P5051, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["IVal"]
    unless_null $P5048, fallback4281
    nqp_get_sc_object $P5052, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5048, $P5052
  fallback4281:
    $P5053 = $P5048."new"(1 :named("value"))
    $P5054 = $P5031."new"($P5041, $P5047, $P5053, "bindkey_i" :named("op"))
.annotate 'line', 1956
    $P5055 = "&default_for"("$")
    $P5056 = $P5026."new"($P5054, $P5055)
    $P5057 = $P5021."new"($P101, "CATCH", $P5056, "handle" :named("op"))
    $P5058 = _lex_param_1."!make"($P5057)
    goto lexotic_4264
  lexotic_4263:
    .get_results ($P5058)
  lexotic_4264:
    .return ($P5058) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_268_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1960
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1961
    unless_null _lex_param_1, fallback4284
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4284:
    set $P5001, _lex_param_1["block"]
    unless_null $P5001, fallback4285
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4285:
    unless $P5001 goto if1450_else4282 
.annotate 'line', 1962
    unless_null _lex_param_1, fallback4286
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5005
  fallback4286:
    set $P5004, _lex_param_1["block"]
    unless_null $P5004, fallback4287
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5006
  fallback4287:
    $P5007 = $P5004."ast"()
    $P5008 = "&block_immediate"($P5007)
    set $P5013, $P5008
    goto if1450_end4283
  if1450_else4282:
.annotate 'line', 1963
    unless_null _lex_param_1, fallback4288
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5010
  fallback4288:
    set $P5009, _lex_param_1["statement"]
    unless_null $P5009, fallback4289
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5011
  fallback4289:
    $P5012 = $P5009."ast"()
    set $P5013, $P5012
  if1450_end4283:
    $P5014 = _lex_param_1."!make"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_269_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1968
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4290
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4290:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4291
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4291:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_270_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1969
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4292
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4292:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4293
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4293:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_271_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1971
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4294
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4294:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4295
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4295:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_272_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1972
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4296
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4296:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4297
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4297:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_273_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1976
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4298
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4298:
    set $P5001, _lex_param_1["fatarrow"]
    unless_null $P5001, fallback4299
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4299:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_274_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1977
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4300
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4300:
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback4301
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4301:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_275_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1978
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4302
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4302:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4303
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4303:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_276_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1979
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4304
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4304:
    set $P5001, _lex_param_1["package_declarator"]
    unless_null $P5001, fallback4305
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4305:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_277_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1980
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4306
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4306:
    set $P5001, _lex_param_1["scope_declarator"]
    unless_null $P5001, fallback4307
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4307:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_278_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1981
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4308
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4308:
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4309
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4309:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_279_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1982
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4310
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4310:
    set $P5001, _lex_param_1["regex_declarator"]
    unless_null $P5001, fallback4311
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4311:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_280_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1983
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4312
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4312:
    set $P5001, _lex_param_1["statement_prefix"]
    unless_null $P5001, fallback4313
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4313:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_281_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1984
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1985
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback4314
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback4314:
    unless_null _lex_param_1, fallback4315
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5007
  fallback4315:
    set $P5006, _lex_param_1["pblock"]
    unless_null $P5006, fallback4316
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5008
  fallback4316:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "takeclosure" :named("op"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_282_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1988
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 1989
    unless_null _lex_param_1, fallback4317
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5003
  fallback4317:
    set $P5002, _lex_param_1["val"]
    unless_null $P5002, fallback4318
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5004
  fallback4318:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1990
    unless_null _lex_param_1, fallback4319
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5007
  fallback4319:
    set $P5006, _lex_param_1["key"]
    unless_null $P5006, fallback4320
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5008
  fallback4320:
    $P5009 = $P5006."Str"()
    $P101."named"($P5009)
.annotate 'line', 1991
    $P5010 = _lex_param_1."!make"($P101)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_283_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1994
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5021 = 'cuid_446_1351203235.318' 
    capture_lex $P5021 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4323
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4323:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4324
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4324:
    unless $P5001 goto if1451_else4321 
.annotate 'line', 1995
.annotate 'line', 1996
    unless_null _lex_param_1, fallback4325
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5005
  fallback4325:
    set $P5004, _lex_param_1["variable"]
    unless_null $P5004, fallback4326
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5006
  fallback4326:
    $P5007 = $P5004."ast"()
    unless_null _lex_param_1, fallback4327
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5010
  fallback4327:
    set $P5009, _lex_param_1["variable"]
    unless_null $P5009, fallback4328
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5011
  fallback4328:
    set $P5008, $P5009["desigilname"]
    unless_null $P5008, fallback4329
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5012
  fallback4329:
    set $S5001, $P5008
    $P5007."named"($S5001)
.annotate 'line', 1997
    unless_null _lex_param_1, fallback4330
    nqp_get_sc_object $P5014, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5014
  fallback4330:
    set $P5013, _lex_param_1["variable"]
    unless_null $P5013, fallback4331
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5013, $P5015
  fallback4331:
    $P5016 = $P5013."ast"()
    $P5017 = _lex_param_1."!make"($P5016)
    set $P5020, $P5017
    goto if1451_end4322
  if1451_else4321:
    .const 'Sub' $P5018 = 'cuid_446_1351203235.318' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5020, $P5019
  if1451_end4322:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_446_1351203235.318") :anon :lex :outer("cuid_283_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1998
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback4334
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5004
  fallback4334:
    set $P5002, $P5003["circumfix"]
    unless_null $P5002, fallback4335
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5005
  fallback4335:
    unless $P5002 goto if1452_else4332 
.annotate 'line', 2000
    find_lex $P5008, "$/"
    unless_null $P5008, fallback4336
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5009
  fallback4336:
    set $P5007, $P5008["circumfix"]
    unless_null $P5007, fallback4337
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5010
  fallback4337:
    set $P5006, $P5007[0]
    unless_null $P5006, fallback4338
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5011
  fallback4338:
    $P5012 = $P5006."ast"()
    set $P5023, $P5012
    goto if1452_end4333
  if1452_else4332:
.annotate 'line', 2001
    nqp_get_sc_object $P5016, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["IVal"]
    unless_null $P5013, fallback4339
    nqp_get_sc_object $P5017, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5013, $P5017
  fallback4339:
    find_lex $P5019, "$/"
    unless_null $P5019, fallback4340
    nqp_get_sc_object $P5020, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5019, $P5020
  fallback4340:
    set $P5018, $P5019["not"]
    unless_null $P5018, fallback4341
    nqp_get_sc_object $P5021, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5018, $P5021
  fallback4341:
    isfalse $I5001, $P5018
    $P5022 = $P5013."new"($I5001 :named("value"))
    set $P5023, $P5022
  if1452_end4333:
    set $P101, $P5023
.annotate 'line', 2002
    find_lex $P5025, "$/"
    unless_null $P5025, fallback4342
    nqp_get_sc_object $P5026, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5025, $P5026
  fallback4342:
    set $P5024, $P5025["identifier"]
    unless_null $P5024, fallback4343
    nqp_get_sc_object $P5027, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5024, $P5027
  fallback4343:
    set $S5001, $P5024
    $P101."named"($S5001)
.annotate 'line', 2003
    find_dynamic_lex $P5028, "$/"
    $P5029 = $P5028."!make"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_284_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2007
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5020 = 'cuid_448_1351203235.318' 
    capture_lex $P5020 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    unless_null _lex_param_1, fallback4346
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5003
  fallback4346:
    set $P5002, _lex_param_1["postcircumfix"]
    unless_null $P5002, fallback4347
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5004
  fallback4347:
    unless $P5002 goto if1453_else4344 
.annotate 'line', 2009
.annotate 'line', 2010
    unless_null _lex_param_1, fallback4348
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5006
  fallback4348:
    set $P5005, _lex_param_1["postcircumfix"]
    unless_null $P5005, fallback4349
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5005, $P5007
  fallback4349:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
.annotate 'line', 2011
    nqp_get_sc_object $P5012, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["VarWithFallback"]
    unless_null $P5009, fallback4350
    nqp_get_sc_object $P5013, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5013
  fallback4350:
.annotate 'line', 2012
    $P5014 = "&default_for"("$")
    $P5015 = $P5009."new"("$/" :named("name"), "lexical" :named("scope"), $P5014 :named("fallback"))
    $P5016 = $P101."unshift"($P5015)
    goto if1453_end4345
  if1453_else4344:
    .const 'Sub' $P5017 = 'cuid_448_1351203235.318' 
    capture_lex $P5017
    $P5018 = $P5017()
  if1453_end4345:
.annotate 'line', 2087
    $P5019 = _lex_param_1."!make"($P101)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_448_1351203235.318") :anon :lex :outer("cuid_284_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2015
    .const 'Sub' $P5058 = 'cuid_447_1351203235.318' 
    capture_lex $P5058 
    .const 'Sub' $P5058 = 'cuid_451_1351203235.318' 
    capture_lex $P5058 
    .const 'Sub' $P5058 = 'cuid_452_1351203235.318' 
    capture_lex $P5058 
    .lex "@name", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 2016
    nqp_get_sc_object $P5005, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5004, $P5005, "NQP"
    get_who $P5003, $P5004
    set $P5002, $P5003["Compiler"]
    unless_null $P5002, fallback4351
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5006
  fallback4351:
    find_lex $P5007, "$/"
    set $S5001, $P5007
    $P5008 = $P5002."parse_name"($S5001)
    set $P101, $P5008
    set $N5001, $P101
    set $N5002, 1
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1454_else4352 
.annotate 'line', 2017
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4356
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5011
  fallback4356:
    set $P5009, $P5010["twigil"]
    unless_null $P5009, fallback4357
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5012
  fallback4357:
    unless $P5009 goto if1455_end4355 
.annotate 'line', 2018
.annotate 'line', 2019
    find_lex $P5013, "$/"
    $P5014 = $P5013."CURSOR"()
    $P5015 = $P5014."panic"("Twigil not allowed on multi-part name")
  if1455_end4355:
.annotate 'line', 2021
    find_lex $P5016, "$/"
    $P5017 = "&lexical_package_lookup"($P101, $P5016)
    store_lex "$past", $P5017
    set $P5057, $P5017
    goto if1454_end4353
  if1454_else4352:
    find_lex $P5020, "$/"
    unless_null $P5020, fallback4360
    nqp_get_sc_object $P5021, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5020, $P5021
  fallback4360:
    set $P5019, $P5020["twigil"]
    unless_null $P5019, fallback4361
    nqp_get_sc_object $P5022, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5019, $P5022
  fallback4361:
    set $P5018, $P5019[0]
    unless_null $P5018, fallback4362
    nqp_get_sc_object $P5023, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5018, $P5023
  fallback4362:
    set $S5002, $P5018
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1456_else4358 
    .const 'Sub' $P5024 = 'cuid_447_1351203235.318' 
    capture_lex $P5024
    $P5025 = $P5024()
    set $P5056, $P5025
    goto if1456_end4359
  if1456_else4358:
    find_lex $P5028, "$/"
    unless_null $P5028, fallback4373
    nqp_get_sc_object $P5029, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5028, $P5029
  fallback4373:
    set $P5027, $P5028["twigil"]
    unless_null $P5027, fallback4374
    nqp_get_sc_object $P5030, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5027, $P5030
  fallback4374:
    set $P5026, $P5027[0]
    unless_null $P5026, fallback4375
    nqp_get_sc_object $P5031, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5026, $P5031
  fallback4375:
    set $S5003, $P5026
    iseq $I5003, $S5003, "!"
    unless $I5003 goto if1457_else4371 
    .const 'Sub' $P5032 = 'cuid_451_1351203235.318' 
    capture_lex $P5032
    $P5033 = $P5032()
    set $P5055, $P5033
    goto if1457_end4372
  if1457_else4371:
.annotate 'line', 2072
    find_dynamic_lex $P5034, "$*W"
    unless_null $P5034, fallback4415
    nqp_get_sc_object $P5037, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5036, $P5037
    set $P5035, $P5036["$W"]
    unless_null $P5035, fallback4416
    nqp_get_sc_object $P5038, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5035, $P5038
  fallback4416:
    unless_null $P5035, vivi_14704417
    die "Contextual $*W not found"
    box $P5039, "Contextual $*W not found"
    set $P5035, $P5039
  vivi_14704417:
    set $P5034, $P5035
  fallback4415:
    set $P5040, $P101[0]
    unless_null $P5040, fallback4418
    nqp_get_sc_object $P5041, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5040, $P5041
  fallback4418:
    set $S5004, $P5040
    $P5042 = $P5034."is_package"($S5004)
    unless $P5042 goto if1469_else4413 
.annotate 'line', 2073
    find_lex $P5043, "$/"
    $P5044 = "&lexical_package_lookup"($P101, $P5043)
    store_lex "$past", $P5044
.annotate 'line', 2074
    find_lex $P5045, "$past"
    find_lex $P5047, "$/"
    unless_null $P5047, fallback4419
    nqp_get_sc_object $P5048, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5047, $P5048
  fallback4419:
    set $P5046, $P5047["sigil"]
    unless_null $P5046, fallback4420
    nqp_get_sc_object $P5049, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5046, $P5049
  fallback4420:
    $P5050 = "&default_for"($P5046)
    $P5051 = $P5045."fallback"($P5050)
    set $P5054, $P5051
    goto if1469_end4414
  if1469_else4413:
    .const 'Sub' $P5052 = 'cuid_452_1351203235.318' 
    capture_lex $P5052
    $P5053 = $P5052()
    set $P5054, $P5053
  if1469_end4414:
    set $P5055, $P5054
  if1457_end4372:
    set $P5056, $P5055
  if1456_end4359:
    set $P5057, $P5056
  if1454_end4353:
    .return ($P5057) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_447_1351203235.318") :anon :lex :outer("cuid_448_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2023
    .lex "$global_fallback", $P101 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 2024
    nqp_get_sc_object $P5005, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback4363
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5006
  fallback4363:
.annotate 'line', 2026
    new $P5007, 'ResizablePMCArray'
    box $P5008, "GLOBAL"
    push $P5007, $P5008
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4364
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5011
  fallback4364:
    set $P5009, $P5010["sigil"]
    unless_null $P5009, fallback4365
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5012
  fallback4365:
    set $S5002, $P5009
    find_lex $P5014, "$/"
    unless_null $P5014, fallback4366
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5014, $P5015
  fallback4366:
    set $P5013, $P5014["desigilname"]
    unless_null $P5013, fallback4367
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5013, $P5016
  fallback4367:
    set $S5003, $P5013
    concat $S5001, $S5002, $S5003
    box $P5017, $S5001
    push $P5007, $P5017
    find_lex $P5018, "$/"
    $P5019 = "&lexical_package_lookup"($P5007, $P5018)
.annotate 'line', 2027
    nqp_get_sc_object $P5023, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback4368
    nqp_get_sc_object $P5024, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5020, $P5024
  fallback4368:
.annotate 'line', 2029
    nqp_get_sc_object $P5028, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["SVal"]
    unless_null $P5025, fallback4369
    nqp_get_sc_object $P5029, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5025, $P5029
  fallback4369:
    find_lex $P5030, "$/"
    set $S5006, $P5030
    concat $S5005, "Contextual ", $S5006
    concat $S5004, $S5005, " not found"
    $P5031 = $P5025."new"($S5004 :named("value"))
    $P5032 = $P5020."new"($P5031, "die_s" :named("op"))
    $P5033 = $P5002."new"($P5019, $P5032, "ifnull" :named("op"))
    set $P101, $P5033
.annotate 'line', 2031
    nqp_get_sc_object $P5037, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["VarWithFallback"]
    unless_null $P5034, fallback4370
    nqp_get_sc_object $P5038, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5034, $P5038
  fallback4370:
.annotate 'line', 2032
    find_lex $P5039, "@name"
    $P5040 = $P5039."pop"()
    set $S5007, $P5040
    $P5041 = $P5034."new"($S5007 :named("name"), "contextual" :named("scope"), $P101 :named("fallback"))
    store_lex "$past", $P5041
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_451_1351203235.318") :anon :lex :outer("cuid_448_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2036
    .const 'Sub' $P5064 = 'cuid_450_1351203235.318' 
    capture_lex $P5064 
    .lex "$name", $P101 
    .lex "$ch", $P102 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
.annotate 'line', 2037
    find_lex $P5003, "@name"
    $P5004 = $P5003."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    find_dynamic_lex $P5006, "$*PKGDECL"
    unless_null $P5006, fallback4378
    nqp_get_sc_object $P5009, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$PKGDECL"]
    unless_null $P5007, fallback4379
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5010
  fallback4379:
    unless_null $P5007, vivi_14594380
    die "Contextual $*PKGDECL not found"
    box $P5011, "Contextual $*PKGDECL not found"
    set $P5007, $P5011
  vivi_14594380:
    set $P5006, $P5007
  fallback4378:
    set $S5002, $P5006
    iseq $I5001, $S5002, "role"
    unless $I5001 goto if1458_else4376 
.annotate 'line', 2039
.annotate 'line', 2040
    nqp_get_sc_object $P5015, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback4381
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5012, $P5016
  fallback4381:
    $P5017 = $P5012."new"("$?CLASS" :named("name"), "lexical" :named("scope"))
    set $P102, $P5017
.annotate 'line', 2041
    find_dynamic_lex $P5018, "$*PACKAGE"
    unless_null $P5018, fallback4382
    nqp_get_sc_object $P5021, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$PACKAGE"]
    unless_null $P5019, fallback4383
    nqp_get_sc_object $P5022, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5019, $P5022
  fallback4383:
    unless_null $P5019, vivi_14604384
    die "Contextual $*PACKAGE not found"
    box $P5023, "Contextual $*PACKAGE not found"
    set $P5019, $P5023
  vivi_14604384:
    set $P5018, $P5019
  fallback4382:
    $P5024 = $P102."set_compile_time_value"($P5018)
    goto if1458_end4377
  if1458_else4376:
.annotate 'line', 2043
.annotate 'line', 2044
    nqp_get_sc_object $P5028, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["WVal"]
    unless_null $P5025, fallback4385
    nqp_get_sc_object $P5029, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5025, $P5029
  fallback4385:
    find_dynamic_lex $P5030, "$*PACKAGE"
    unless_null $P5030, fallback4386
    nqp_get_sc_object $P5033, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5032, $P5033
    set $P5031, $P5032["$PACKAGE"]
    unless_null $P5031, fallback4387
    nqp_get_sc_object $P5034, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5031, $P5034
  fallback4387:
    unless_null $P5031, vivi_14614388
    die "Contextual $*PACKAGE not found"
    box $P5035, "Contextual $*PACKAGE not found"
    set $P5031, $P5035
  vivi_14614388:
    set $P5030, $P5031
  fallback4386:
    $P5036 = $P5025."new"($P5030 :named("value"))
    set $P102, $P5036
  if1458_end4377:
.annotate 'line', 2046
    nqp_get_sc_object $P5040, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Var"]
    unless_null $P5037, fallback4389
    nqp_get_sc_object $P5041, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5037, $P5041
  fallback4389:
.annotate 'line', 2048
    nqp_get_sc_object $P5045, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["VM"]
    unless_null $P5042, fallback4390
    nqp_get_sc_object $P5046, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5042, $P5046
  fallback4390:
.annotate 'line', 2049
    nqp_get_sc_object $P5050, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["Var"]
    unless_null $P5047, fallback4391
    nqp_get_sc_object $P5051, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5047, $P5051
  fallback4391:
    $P5052 = $P5047."new"("self" :named("name"), "lexical" :named("scope"))
    $P5053 = $P5042."new"($P5052, "nqp_decontainerize PP" :named("pirop"))
    $P5054 = $P5037."new"($P5053, $P102, $P101 :named("name"), "attribute" :named("scope"))
    store_lex "$past", $P5054
    find_dynamic_lex $P5055, "$*IN_DECL"
    unless_null $P5055, fallback4394
    nqp_get_sc_object $P5058, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5057, $P5058
    set $P5056, $P5057["$IN_DECL"]
    unless_null $P5056, fallback4395
    nqp_get_sc_object $P5059, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5056, $P5059
  fallback4395:
    unless_null $P5056, vivi_14634396
    die "Contextual $*IN_DECL not found"
    box $P5060, "Contextual $*IN_DECL not found"
    set $P5056, $P5060
  vivi_14634396:
    set $P5055, $P5056
  fallback4394:
    set $P5063, $P5055
    if $P5055 goto unless1462_end4393 
    .const 'Sub' $P5061 = 'cuid_450_1351203235.318' 
    capture_lex $P5061
    $P5062 = $P5061()
    set $P5063, $P5062
  unless1462_end4393:
    .return ($P5063) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_450_1351203235.318") :anon :lex :outer("cuid_451_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2054
    .const 'Sub' $P5032 = 'cuid_449_1351203235.318' 
    capture_lex $P5032 
    .lex "$attr", $P101 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 2056
    find_dynamic_lex $P5006, "$*PACKAGE"
    unless_null $P5006, fallback4397
    nqp_get_sc_object $P5009, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$PACKAGE"]
    unless_null $P5007, fallback4398
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5010
  fallback4398:
    unless_null $P5007, vivi_14644399
    die "Contextual $*PACKAGE not found"
    box $P5011, "Contextual $*PACKAGE not found"
    set $P5007, $P5011
  vivi_14644399:
    set $P5006, $P5007
  fallback4397:
    get_how $P5005, $P5006
    find_dynamic_lex $P5012, "$*PACKAGE"
    unless_null $P5012, fallback4400
    nqp_get_sc_object $P5015, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$PACKAGE"]
    unless_null $P5013, fallback4401
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5013, $P5016
  fallback4401:
    unless_null $P5013, vivi_14654402
    die "Contextual $*PACKAGE not found"
    box $P5017, "Contextual $*PACKAGE not found"
    set $P5013, $P5017
  vivi_14654402:
    set $P5012, $P5013
  fallback4400:
    $P5018 = $P5005."attributes"($P5012, 1 :named("local"))
    set $P5002, $P5018
    iter $P5004, $P5018
    new $P5020, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5020, for_handlers4405
    push_eh $P5020
  for_next4406:
    unless $P5004, for_done4408
    shift $P5021, $P5004
  for_redo4407:
    .const 'Sub' $P5019 = 'cuid_449_1351203235.318' 
    capture_lex $P5019
    $P5002 = $P5019($P5021)
    goto for_next4406
  for_handlers4405:
    .get_results ($P5020)
    pop_upto_eh $P5020
    getattribute $P5020, $P5020, 'type'
    eq $P5020, .CONTROL_LOOP_NEXT, for_next4406
    eq $P5020, .CONTROL_LOOP_REDO, for_redo4407
  for_done4408:
    pop_eh 
    defined $I5001, $P101
    unless $I5001 goto if1467_else4409 
.annotate 'line', 2062
    can $I5002, $P101, "type"
    box $P5026, $I5002
    set $P5025, $P5026
    unless $I5002 goto if1468_end4412 
.annotate 'line', 2063
.annotate 'line', 2064
    find_lex $P5022, "$past"
    $P5023 = $P101."type"()
    $P5024 = $P5022."returns"($P5023)
    set $P5025, $P5024
  if1468_end4412:
    set $P5031, $P5025
    goto if1467_end4410
  if1467_else4409:
.annotate 'line', 2067
.annotate 'line', 2068
    find_lex $P5027, "$/"
    $P5028 = $P5027."CURSOR"()
    find_lex $P5029, "$name"
    set $S5003, $P5029
    concat $S5002, "Attribute '", $S5003
    concat $S5001, $S5002, "' not declared"
    $P5030 = $P5028."panic"($S5001)
    set $P5031, $P5030
  if1467_end4410:
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_449_1351203235.318") :anon :lex :outer("cuid_450_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2056
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2057
    $P5001 = _lex_param_0."name"()
    set $S5001, $P5001
    find_lex $P5002, "$name"
    set $S5002, $P5002
    iseq $I5001, $S5001, $S5002
    set $I5002, $I5001
    unless $I5001 goto if1466_end4404 
    store_lex "$attr", _lex_param_0
    die 0, .CONTROL_LOOP_LAST
    set $I5002, 0
  if1466_end4404:
    .return ($I5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_452_1351203235.318") :anon :lex :outer("cuid_448_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2076
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 2077
    find_lex $P5002, "@name"
    $P5003 = $P5002."pop"()
    set $S5001, $P5003
    box $P5004, $S5001
    set $P101, $P5004
    find_dynamic_lex $P5005, "$*IN_DECL"
    unless_null $P5005, fallback4433
    nqp_get_sc_object $P5008, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$IN_DECL"]
    unless_null $P5006, fallback4434
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5009
  fallback4434:
    unless_null $P5006, vivi_14774435
    die "Contextual $*IN_DECL not found"
    box $P5010, "Contextual $*IN_DECL not found"
    set $P5006, $P5010
  vivi_14774435:
    set $P5005, $P5006
  fallback4433:
    set $S5002, $P5005
    iseq $I5001, $S5002, "variable"
    set $I5003, $I5001
    if $I5001 goto unless1476_end4432 
    set $S5003, $P101
    iseq $I5002, $S5003, "$_"
    set $I5003, $I5002
  unless1476_end4432:
    set $I5005, $I5003
    if $I5003 goto unless1475_end4430 
    set $S5004, $P101
    iseq $I5004, $S5004, "$/"
    set $I5005, $I5004
  unless1475_end4430:
    set $I5007, $I5005
    if $I5005 goto unless1474_end4428 
    set $S5005, $P101
    iseq $I5006, $S5005, "$!"
    set $I5007, $I5006
  unless1474_end4428:
    set $I5009, $I5007
    if $I5007 goto unless1473_end4426 
    find_lex $P5013, "$/"
    unless_null $P5013, fallback4436
    nqp_get_sc_object $P5014, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5013, $P5014
  fallback4436:
    set $P5012, $P5013["twigil"]
    unless_null $P5012, fallback4437
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5012, $P5015
  fallback4437:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback4438
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5016
  fallback4438:
    set $S5006, $P5011
    iseq $I5008, $S5006, "?"
    set $I5009, $I5008
  unless1473_end4426:
    box $P5025, $I5009
    set $P5024, $P5025
    if $I5009 goto unless1472_end4424 
.annotate 'line', 2079
    find_dynamic_lex $P5017, "$*W"
    unless_null $P5017, fallback4439
    nqp_get_sc_object $P5020, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5019, $P5020
    set $P5018, $P5019["$W"]
    unless_null $P5018, fallback4440
    nqp_get_sc_object $P5021, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5018, $P5021
  fallback4440:
    unless_null $P5018, vivi_14784441
    die "Contextual $*W not found"
    box $P5022, "Contextual $*W not found"
    set $P5018, $P5022
  vivi_14784441:
    set $P5017, $P5018
  fallback4439:
    $P5023 = $P5017."is_lexical"($P101)
    set $P5024, $P5023
  unless1472_end4424:
    unless $P5024 goto if1471_else4421 
.annotate 'line', 2080
    nqp_get_sc_object $P5029, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback4442
    nqp_get_sc_object $P5030, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5026, $P5030
  fallback4442:
    $P5031 = $P5026."new"($P101 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5031
    set $P5035, $P5031
    goto if1471_end4422
  if1471_else4421:
.annotate 'line', 2082
.annotate 'line', 2083
    find_lex $P5032, "$/"
    $P5033 = $P5032."CURSOR"()
    set $S5009, $P101
    concat $S5008, "Use of undeclared variable '", $S5009
    concat $S5007, $S5008, "'"
    $P5034 = $P5033."panic"($S5007)
    set $P5035, $P5034
  if1471_end4422:
    .return ($P5035) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_285_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2090
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4443
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4443:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4444
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4444:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_286_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2091
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4445
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4445:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4446
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4446:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_287_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2092
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4447
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4447:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4448
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4448:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_288_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2093
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4449
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4449:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4450
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4450:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_289_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2094
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4451
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4451:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4452
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4452:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_290_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2095
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4453
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4453:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4454
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4454:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_291_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2097
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$HOW", $P101 
    .lex "$PACKAGE", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
.annotate 'line', 2100
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4455
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4456
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5007
  fallback4456:
    unless_null $P5004, vivi_14794457
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_14794457:
    set $P5003, $P5004
  fallback4455:
    unless_null _lex_param_1, fallback4458
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5011
  fallback4458:
    set $P5010, _lex_param_1["metaclass"]
    unless_null $P5010, fallback4459
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5012
  fallback4459:
    set $P5009, $P5010["identifier"]
    unless_null $P5009, fallback4460
    nqp_get_sc_object $P5013, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5013
  fallback4460:
    $P5014 = $P5003."find_sym"($P5009)
    set $P101, $P5014
.annotate 'line', 2101
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback4461
    nqp_get_sc_object $P5018, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback4462
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5016, $P5019
  fallback4462:
    unless_null $P5016, vivi_14804463
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_14804463:
    set $P5015, $P5016
  fallback4461:
    unless_null _lex_param_1, fallback4464
    nqp_get_sc_object $P5022, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5022
  fallback4464:
    set $P5021, _lex_param_1["name"]
    unless_null $P5021, fallback4465
    nqp_get_sc_object $P5023, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5021, $P5023
  fallback4465:
    set $S5001, $P5021
    $P5024 = $P5015."pkg_create_mo"($P101, $S5001 :named("name"))
    set $P102, $P5024
    find_dynamic_lex $P5025, "$*SCOPE"
    unless_null $P5025, fallback4470
    nqp_get_sc_object $P5028, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["$SCOPE"]
    unless_null $P5026, fallback4471
    nqp_get_sc_object $P5029, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5026, $P5029
  fallback4471:
    unless_null $P5026, vivi_14834472
    die "Contextual $*SCOPE not found"
    box $P5030, "Contextual $*SCOPE not found"
    set $P5026, $P5030
  vivi_14834472:
    set $P5025, $P5026
  fallback4470:
    set $S5002, $P5025
    iseq $I5001, $S5002, "our"
    set $I5003, $I5001
    if $I5001 goto unless1482_end4469 
    find_dynamic_lex $P5031, "$*SCOPE"
    unless_null $P5031, fallback4473
    nqp_get_sc_object $P5034, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$SCOPE"]
    unless_null $P5032, fallback4474
    nqp_get_sc_object $P5035, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5032, $P5035
  fallback4474:
    unless_null $P5032, vivi_14844475
    die "Contextual $*SCOPE not found"
    box $P5036, "Contextual $*SCOPE not found"
    set $P5032, $P5036
  vivi_14844475:
    set $P5031, $P5032
  fallback4473:
    set $S5003, $P5031
    iseq $I5002, $S5003, ""
    set $I5003, $I5002
  unless1482_end4469:
    unless $I5003 goto if1481_else4466 
.annotate 'line', 2104
.annotate 'line', 2105
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback4476
    nqp_get_sc_object $P5040, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback4477
    nqp_get_sc_object $P5041, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5038, $P5041
  fallback4477:
    unless_null $P5038, vivi_14854478
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_14854478:
    set $P5037, $P5038
  fallback4476:
    find_dynamic_lex $P5043, "$*OUTERPACKAGE"
    unless_null $P5043, fallback4479
    nqp_get_sc_object $P5046, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$OUTERPACKAGE"]
    unless_null $P5044, fallback4480
    nqp_get_sc_object $P5047, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5044, $P5047
  fallback4480:
    unless_null $P5044, vivi_14864481
    die "Contextual $*OUTERPACKAGE not found"
    box $P5048, "Contextual $*OUTERPACKAGE not found"
    set $P5044, $P5048
  vivi_14864481:
    set $P5043, $P5044
  fallback4479:
    unless_null _lex_param_1, fallback4482
    nqp_get_sc_object $P5051, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5051
  fallback4482:
    set $P5050, _lex_param_1["name"]
    unless_null $P5050, fallback4483
    nqp_get_sc_object $P5052, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5050, $P5052
  fallback4483:
    set $P5049, $P5050["identifier"]
    unless_null $P5049, fallback4484
    nqp_get_sc_object $P5053, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5049, $P5053
  fallback4484:
    $P5037."install_package_symbol"($P5043, $P5049, $P102)
    unless_null _lex_param_1, fallback4487
    nqp_get_sc_object $P5056, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5056
  fallback4487:
    set $P5055, _lex_param_1["name"]
    unless_null $P5055, fallback4488
    nqp_get_sc_object $P5057, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5055, $P5057
  fallback4488:
    set $P5054, $P5055["identifier"]
    unless_null $P5054, fallback4489
    nqp_get_sc_object $P5058, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5054, $P5058
  fallback4489:
    set $N5001, $P5054
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5081, $I5004
    set $P5080, $P5081
    unless $I5004 goto if1487_end4486 
.annotate 'line', 2106
.annotate 'line', 2107
    find_dynamic_lex $P5059, "$*W"
    unless_null $P5059, fallback4490
    nqp_get_sc_object $P5062, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$W"]
    unless_null $P5060, fallback4491
    nqp_get_sc_object $P5063, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5060, $P5063
  fallback4491:
    unless_null $P5060, vivi_14884492
    die "Contextual $*W not found"
    box $P5064, "Contextual $*W not found"
    set $P5060, $P5064
  vivi_14884492:
    set $P5059, $P5060
  fallback4490:
    find_dynamic_lex $P5065, "$*W"
    unless_null $P5065, fallback4493
    nqp_get_sc_object $P5068, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$W"]
    unless_null $P5066, fallback4494
    nqp_get_sc_object $P5069, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5066, $P5069
  fallback4494:
    unless_null $P5066, vivi_14894495
    die "Contextual $*W not found"
    box $P5070, "Contextual $*W not found"
    set $P5066, $P5070
  vivi_14894495:
    set $P5065, $P5066
  fallback4493:
    $P5071 = $P5065."cur_lexpad"()
    unless_null _lex_param_1, fallback4496
    nqp_get_sc_object $P5075, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5075
  fallback4496:
    set $P5074, _lex_param_1["name"]
    unless_null $P5074, fallback4497
    nqp_get_sc_object $P5076, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5074, $P5076
  fallback4497:
    set $P5073, $P5074["identifier"]
    unless_null $P5073, fallback4498
    nqp_get_sc_object $P5077, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5073, $P5077
  fallback4498:
    set $P5072, $P5073[0]
    unless_null $P5072, fallback4499
    nqp_get_sc_object $P5078, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5072, $P5078
  fallback4499:
    $P5079 = $P5059."install_lexical_symbol"($P5071, $P5072, $P102)
    set $P5080, $P5079
  if1487_end4486:
    goto if1481_end4467
  if1481_else4466:
    find_dynamic_lex $P5082, "$*SCOPE"
    unless_null $P5082, fallback4502
    nqp_get_sc_object $P5085, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["$SCOPE"]
    unless_null $P5083, fallback4503
    nqp_get_sc_object $P5086, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5083, $P5086
  fallback4503:
    unless_null $P5083, vivi_14914504
    die "Contextual $*SCOPE not found"
    box $P5087, "Contextual $*SCOPE not found"
    set $P5083, $P5087
  vivi_14914504:
    set $P5082, $P5083
  fallback4502:
    set $S5004, $P5082
    iseq $I5005, $S5004, "my"
    unless $I5005 goto if1490_else4500 
.annotate 'line', 2110
    unless_null _lex_param_1, fallback4507
    nqp_get_sc_object $P5090, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5090
  fallback4507:
    set $P5089, _lex_param_1["name"]
    unless_null $P5089, fallback4508
    nqp_get_sc_object $P5091, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5089, $P5091
  fallback4508:
    set $P5088, $P5089["identifier"]
    unless_null $P5088, fallback4509
    nqp_get_sc_object $P5092, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5088, $P5092
  fallback4509:
    set $N5003, $P5088
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    unless $I5006 goto if1492_end4506 
.annotate 'line', 2111
.annotate 'line', 2112
    unless_null _lex_param_1, fallback4510
    nqp_get_sc_object $P5094, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5094
  fallback4510:
    set $P5093, _lex_param_1["name"]
    unless_null $P5093, fallback4511
    nqp_get_sc_object $P5095, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5093, $P5095
  fallback4511:
    $P5096 = $P5093."CURSOR"()
    $P5097 = $P5096."panic"("A my scoped package cannot have a multi-part name yet")
  if1492_end4506:
.annotate 'line', 2114
    find_dynamic_lex $P5098, "$*W"
    unless_null $P5098, fallback4512
    nqp_get_sc_object $P5101, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5100, $P5101
    set $P5099, $P5100["$W"]
    unless_null $P5099, fallback4513
    nqp_get_sc_object $P5102, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5099, $P5102
  fallback4513:
    unless_null $P5099, vivi_14934514
    die "Contextual $*W not found"
    box $P5103, "Contextual $*W not found"
    set $P5099, $P5103
  vivi_14934514:
    set $P5098, $P5099
  fallback4512:
    find_dynamic_lex $P5104, "$*W"
    unless_null $P5104, fallback4515
    nqp_get_sc_object $P5107, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$W"]
    unless_null $P5105, fallback4516
    nqp_get_sc_object $P5108, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5105, $P5108
  fallback4516:
    unless_null $P5105, vivi_14944517
    die "Contextual $*W not found"
    box $P5109, "Contextual $*W not found"
    set $P5105, $P5109
  vivi_14944517:
    set $P5104, $P5105
  fallback4515:
    $P5110 = $P5104."cur_lexpad"()
    unless_null _lex_param_1, fallback4518
    nqp_get_sc_object $P5114, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5114
  fallback4518:
    set $P5113, _lex_param_1["name"]
    unless_null $P5113, fallback4519
    nqp_get_sc_object $P5115, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5113, $P5115
  fallback4519:
    set $P5112, $P5113["identifier"]
    unless_null $P5112, fallback4520
    nqp_get_sc_object $P5116, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5112, $P5116
  fallback4520:
    set $P5111, $P5112[0]
    unless_null $P5111, fallback4521
    nqp_get_sc_object $P5117, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5111, $P5117
  fallback4521:
    $P5118 = $P5098."install_lexical_symbol"($P5110, $P5111, $P102)
    set $P5127, $P5118
    goto if1490_end4501
  if1490_else4500:
.annotate 'line', 2116
.annotate 'line', 2117
    $P5119 = _lex_param_1."CURSOR"()
    find_dynamic_lex $P5120, "$*SCOPE"
    unless_null $P5120, fallback4522
    nqp_get_sc_object $P5123, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5122, $P5123
    set $P5121, $P5122["$SCOPE"]
    unless_null $P5121, fallback4523
    nqp_get_sc_object $P5124, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5121, $P5124
  fallback4523:
    unless_null $P5121, vivi_14954524
    die "Contextual $*SCOPE not found"
    box $P5125, "Contextual $*SCOPE not found"
    set $P5121, $P5125
  vivi_14954524:
    set $P5120, $P5121
  fallback4522:
    set $S5006, $P5120
    concat $S5005, $S5006, " scoped packages are not supported"
    $P5126 = $P5119."panic"($S5005)
    set $P5127, $P5126
  if1490_end4501:
  if1481_end4467:
.annotate 'line', 2120
    nqp_get_sc_object $P5131, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5130, $P5131, "QAST"
    get_who $P5129, $P5130
    set $P5128, $P5129["Stmts"]
    unless_null $P5128, fallback4525
    nqp_get_sc_object $P5132, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5128, $P5132
  fallback4525:
    $P5133 = $P5128."new"()
    $P5134 = _lex_param_1."!make"($P5133)
    .return ($P5134) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_292_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2123
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5149 = 'cuid_454_1351203235.318' 
    capture_lex $P5149 
    .const 'Sub' $P5149 = 'cuid_455_1351203235.318' 
    capture_lex $P5149 
    .const 'Sub' $P5149 = 'cuid_456_1351203235.318' 
    capture_lex $P5149 
    .const 'Sub' $P5149 = 'cuid_457_1351203235.318' 
    capture_lex $P5149 
    .lex "@ns", $P101 
    .lex "$name", $P102 
    .lex "$how", $P103 
    .lex "$past", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P103, $P5003
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P104, $P5004
    unless_null _lex_param_1, fallback4526
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5008
  fallback4526:
    set $P5007, _lex_param_1["name"]
    unless_null $P5007, fallback4527
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5009
  fallback4527:
    set $P5006, $P5007["identifier"]
    unless_null $P5006, fallback4528
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5010
  fallback4528:
    clone $P5005, $P5006
    set $P101, $P5005
.annotate 'line', 2126
    $P5011 = $P101."pop"()
    set $S5001, $P5011
    box $P5012, $S5001
    set $P102, $P5012
    find_dynamic_lex $P5014, "%*HOW"
    unless_null $P5014, fallback4529
    nqp_get_sc_object $P5017, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["%HOW"]
    unless_null $P5015, fallback4530
    nqp_get_sc_object $P5019, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%HOW"], $P5020
    set $P5015, $P5020
  fallback4530:
    unless_null $P5015, vivi_14964531
    die "Contextual %*HOW not found"
    box $P5021, "Contextual %*HOW not found"
    set $P5015, $P5021
  vivi_14964531:
    set $P5014, $P5015
  fallback4529:
    find_dynamic_lex $P5022, "$*PKGDECL"
    unless_null $P5022, fallback4532
    nqp_get_sc_object $P5025, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PKGDECL"]
    unless_null $P5023, fallback4533
    nqp_get_sc_object $P5026, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5023, $P5026
  fallback4533:
    unless_null $P5023, vivi_14974534
    die "Contextual $*PKGDECL not found"
    box $P5027, "Contextual $*PKGDECL not found"
    set $P5023, $P5027
  vivi_14974534:
    set $P5022, $P5023
  fallback4532:
    set $S5002, $P5022
    set $P5013, $P5014[$S5002]
    unless_null $P5013, fallback4535
    nqp_get_sc_object $P5028, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5013, $P5028
  fallback4535:
    set $P103, $P5013
    unless_null _lex_param_1, fallback4538
    nqp_get_sc_object $P5030, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5030
  fallback4538:
    set $P5029, _lex_param_1["blockoid"]
    unless_null $P5029, fallback4539
    nqp_get_sc_object $P5031, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5029, $P5031
  fallback4539:
    unless $P5029 goto if1498_else4536 
.annotate 'line', 2131
.annotate 'line', 2132
    unless_null _lex_param_1, fallback4540
    nqp_get_sc_object $P5033, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5033
  fallback4540:
    set $P5032, _lex_param_1["blockoid"]
    unless_null $P5032, fallback4541
    nqp_get_sc_object $P5034, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5032, $P5034
  fallback4541:
    $P5035 = $P5032."ast"()
    set $P104, $P5035
    goto if1498_end4537
  if1498_else4536:
.annotate 'line', 2134
.annotate 'line', 2135
    find_dynamic_lex $P5036, "$*W"
    unless_null $P5036, fallback4542
    nqp_get_sc_object $P5039, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5038, $P5039
    set $P5037, $P5038["$W"]
    unless_null $P5037, fallback4543
    nqp_get_sc_object $P5040, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5037, $P5040
  fallback4543:
    unless_null $P5037, vivi_14994544
    die "Contextual $*W not found"
    box $P5041, "Contextual $*W not found"
    set $P5037, $P5041
  vivi_14994544:
    set $P5036, $P5037
  fallback4542:
    $P5042 = $P5036."pop_lexpad"()
    set $P104, $P5042
.annotate 'line', 2136
    unless_null _lex_param_1, fallback4545
    nqp_get_sc_object $P5044, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5044
  fallback4545:
    set $P5043, _lex_param_1["statementlist"]
    unless_null $P5043, fallback4546
    nqp_get_sc_object $P5045, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5043, $P5045
  fallback4546:
    $P5046 = $P5043."ast"()
    $P5047 = $P104."push"($P5046)
  if1498_end4537:
    can $I5001, $P103, "parametric"
    box $P5050, $I5001
    set $P5049, $P5050
    unless $I5001 goto if1501_end4550 
.annotate 'line', 2143
    $P5048 = $P103."parametric"($P103)
    set $P5049, $P5048
  if1501_end4550:
    unless $P5049 goto if1500_else4547 
    .const 'Sub' $P5051 = 'cuid_454_1351203235.318' 
    capture_lex $P5051
    $P5052 = $P5051()
    goto if1500_end4548
  if1500_else4547:
.annotate 'line', 2160
.annotate 'line', 2161
    $P104."blocktype"("immediate")
.annotate 'line', 2162
    find_dynamic_lex $P5053, "$*W"
    unless_null $P5053, fallback4583
    nqp_get_sc_object $P5056, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$W"]
    unless_null $P5054, fallback4584
    nqp_get_sc_object $P5057, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5054, $P5057
  fallback4584:
    unless_null $P5054, vivi_15094585
    die "Contextual $*W not found"
    box $P5058, "Contextual $*W not found"
    set $P5054, $P5058
  vivi_15094585:
    set $P5053, $P5054
  fallback4583:
    find_dynamic_lex $P5059, "$*PACKAGE"
    unless_null $P5059, fallback4586
    nqp_get_sc_object $P5062, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$PACKAGE"]
    unless_null $P5060, fallback4587
    nqp_get_sc_object $P5063, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5060, $P5063
  fallback4587:
    unless_null $P5060, vivi_15104588
    die "Contextual $*PACKAGE not found"
    box $P5064, "Contextual $*PACKAGE not found"
    set $P5060, $P5064
  vivi_15104588:
    set $P5059, $P5060
  fallback4586:
    $P5053."install_lexical_symbol"($P104, "$?PACKAGE", $P5059)
.annotate 'line', 2163
    find_dynamic_lex $P5065, "$*W"
    unless_null $P5065, fallback4589
    nqp_get_sc_object $P5068, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$W"]
    unless_null $P5066, fallback4590
    nqp_get_sc_object $P5069, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5066, $P5069
  fallback4590:
    unless_null $P5066, vivi_15114591
    die "Contextual $*W not found"
    box $P5070, "Contextual $*W not found"
    set $P5066, $P5070
  vivi_15114591:
    set $P5065, $P5066
  fallback4589:
    find_dynamic_lex $P5071, "$*PACKAGE"
    unless_null $P5071, fallback4592
    nqp_get_sc_object $P5074, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5073, $P5074
    set $P5072, $P5073["$PACKAGE"]
    unless_null $P5072, fallback4593
    nqp_get_sc_object $P5075, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5072, $P5075
  fallback4593:
    unless_null $P5072, vivi_15124594
    die "Contextual $*PACKAGE not found"
    box $P5076, "Contextual $*PACKAGE not found"
    set $P5072, $P5076
  vivi_15124594:
    set $P5071, $P5072
  fallback4592:
    $P5077 = $P5065."install_lexical_symbol"($P104, "$?CLASS", $P5071)
  if1500_end4548:
    unless_null _lex_param_1, fallback4597
    nqp_get_sc_object $P5079, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5079
  fallback4597:
    set $P5078, _lex_param_1["parent"]
    unless_null $P5078, fallback4598
    nqp_get_sc_object $P5080, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5078, $P5080
  fallback4598:
    unless $P5078 goto if1513_else4595 
    .const 'Sub' $P5081 = 'cuid_455_1351203235.318' 
    capture_lex $P5081
    $P5082 = $P5081()
    goto if1513_end4596
  if1513_else4595:
    can $I5002, $P103, "set_default_parent"
    box $P5086, $I5002
    set $P5085, $P5086
    unless $I5002 goto if1520_end4620 
    .const 'Sub' $P5083 = 'cuid_456_1351203235.318' 
    capture_lex $P5083
    $P5084 = $P5083()
    set $P5085, $P5084
  if1520_end4620:
  if1513_end4596:
    unless_null _lex_param_1, fallback4637
    nqp_get_sc_object $P5088, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5088
  fallback4637:
    set $P5087, _lex_param_1["role"]
    unless_null $P5087, fallback4638
    nqp_get_sc_object $P5089, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5087, $P5089
  fallback4638:
    unless $P5087 goto if1526_end4636 
.annotate 'line', 2188
    unless_null _lex_param_1, fallback4639
    nqp_get_sc_object $P5094, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5094
  fallback4639:
    set $P5093, _lex_param_1["role"]
    unless_null $P5093, fallback4640
    nqp_get_sc_object $P5095, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5093, $P5095
  fallback4640:
    set $P5090, $P5093
    iter $P5092, $P5093
  for_next4655:
    unless $P5092, for_done4657
    shift $P5097, $P5092
  for_redo4656:
    .const 'Sub' $P5096 = 'cuid_457_1351203235.318' 
    capture_lex $P5096
    $P5090 = $P5096($P5097)
    goto for_next4655
  for_done4657:
  if1526_end4636:
.annotate 'line', 2206
    find_dynamic_lex $P5098, "$*W"
    unless_null $P5098, fallback4658
    nqp_get_sc_object $P5101, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5100, $P5101
    set $P5099, $P5100["$W"]
    unless_null $P5099, fallback4659
    nqp_get_sc_object $P5102, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5099, $P5102
  fallback4659:
    unless_null $P5099, vivi_15334660
    die "Contextual $*W not found"
    box $P5103, "Contextual $*W not found"
    set $P5099, $P5103
  vivi_15334660:
    set $P5098, $P5099
  fallback4658:
    find_dynamic_lex $P5104, "$*PACKAGE"
    unless_null $P5104, fallback4661
    nqp_get_sc_object $P5107, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$PACKAGE"]
    unless_null $P5105, fallback4662
    nqp_get_sc_object $P5108, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5105, $P5108
  fallback4662:
    unless_null $P5105, vivi_15344663
    die "Contextual $*PACKAGE not found"
    box $P5109, "Contextual $*PACKAGE not found"
    set $P5105, $P5109
  vivi_15344663:
    set $P5104, $P5105
  fallback4661:
    $P5098."pkg_compose"($P5104)
    find_dynamic_lex $P5110, "$*PKGDECL"
    unless_null $P5110, fallback4668
    nqp_get_sc_object $P5113, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5112, $P5113
    set $P5111, $P5112["$PKGDECL"]
    unless_null $P5111, fallback4669
    nqp_get_sc_object $P5114, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5111, $P5114
  fallback4669:
    unless_null $P5111, vivi_15374670
    die "Contextual $*PKGDECL not found"
    box $P5115, "Contextual $*PKGDECL not found"
    set $P5111, $P5115
  vivi_15374670:
    set $P5110, $P5111
  fallback4668:
    set $S5003, $P5110
    iseq $I5003, $S5003, "grammar"
    set $I5005, $I5003
    unless $I5003 goto if1536_end4667 
    find_dynamic_lex $P5116, "$*PACKAGE"
    unless_null $P5116, fallback4671
    nqp_get_sc_object $P5119, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5118, $P5119
    set $P5117, $P5118["$PACKAGE"]
    unless_null $P5117, fallback4672
    nqp_get_sc_object $P5120, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5117, $P5120
  fallback4672:
    unless_null $P5117, vivi_15384673
    die "Contextual $*PACKAGE not found"
    box $P5121, "Contextual $*PACKAGE not found"
    set $P5117, $P5121
  vivi_15384673:
    set $P5116, $P5117
  fallback4671:
    can $I5004, $P5116, "!precompute_nfas"
    set $I5005, $I5004
  if1536_end4667:
    unless $I5005 goto if1535_end4665 
.annotate 'line', 2209
.annotate 'line', 2210
    find_dynamic_lex $P5122, "$*PACKAGE"
    unless_null $P5122, fallback4674
    nqp_get_sc_object $P5125, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5124, $P5125
    set $P5123, $P5124["$PACKAGE"]
    unless_null $P5123, fallback4675
    nqp_get_sc_object $P5126, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5123, $P5126
  fallback4675:
    unless_null $P5123, vivi_15394676
    die "Contextual $*PACKAGE not found"
    box $P5127, "Contextual $*PACKAGE not found"
    set $P5123, $P5127
  vivi_15394676:
    set $P5122, $P5123
  fallback4674:
    $P5128 = $P5122."!precompute_nfas"()
  if1535_end4665:
    unless_null _lex_param_1, fallback4679
    nqp_get_sc_object $P5130, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5130
  fallback4679:
    set $P5129, _lex_param_1["export"]
    unless_null $P5129, fallback4680
    nqp_get_sc_object $P5131, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5129, $P5131
  fallback4680:
    unless $P5129 goto if1540_end4678 
.annotate 'line', 2214
    find_dynamic_lex $P5135, "$*EXPORT"
    unless_null $P5135, fallback4681
    nqp_get_sc_object $P5138, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5137, $P5138
    set $P5136, $P5137["$EXPORT"]
    unless_null $P5136, fallback4682
    nqp_get_sc_object $P5139, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5136, $P5139
  fallback4682:
    unless_null $P5136, vivi_15414683
    die "Contextual $*EXPORT not found"
    box $P5140, "Contextual $*EXPORT not found"
    set $P5136, $P5140
  vivi_15414683:
    set $P5135, $P5136
  fallback4681:
    get_who $P5134, $P5135
    set $P5133, $P5134["DEFAULT"]
    unless_null $P5133, fallback4684
    nqp_get_sc_object $P5141, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5133, $P5141
  fallback4684:
    get_who $P5132, $P5133
    set $S5004, $P102
    find_dynamic_lex $P5142, "$*PACKAGE"
    unless_null $P5142, fallback4685
    nqp_get_sc_object $P5145, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5144, $P5145
    set $P5143, $P5144["$PACKAGE"]
    unless_null $P5143, fallback4686
    nqp_get_sc_object $P5146, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5143, $P5146
  fallback4686:
    unless_null $P5143, vivi_15424687
    die "Contextual $*PACKAGE not found"
    box $P5147, "Contextual $*PACKAGE not found"
    set $P5143, $P5147
  vivi_15424687:
    set $P5142, $P5143
  fallback4685:
    set $P5132[$S5004], $P5142
  if1540_end4678:
.annotate 'line', 2218
    $P5148 = _lex_param_1."!make"($P104)
    .return ($P5148) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_454_1351203235.318") :anon :lex :outer("cuid_292_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2143
    .const 'Sub' $P5081 = 'cuid_453_1351203235.318' 
    capture_lex $P5081 
    .lex "$params", $P101 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 2144
    find_lex $P5002, "$past"
    $P5002."blocktype"("declaration")
.annotate 'line', 2145
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5005, $P5006, "QAST"
    get_who $P5004, $P5005
    set $P5003, $P5004["Stmts"]
    unless_null $P5003, fallback4551
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5007
  fallback4551:
.annotate 'line', 2146
    nqp_get_sc_object $P5011, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["Var"]
    unless_null $P5008, fallback4552
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5012
  fallback4552:
    $P5013 = $P5008."new"("$?CLASS" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5014 = $P5003."new"($P5013)
    set $P101, $P5014
    find_lex $P5016, "$/"
    unless_null $P5016, fallback4555
    nqp_get_sc_object $P5017, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5016, $P5017
  fallback4555:
    set $P5015, $P5016["role_params"]
    unless_null $P5015, fallback4556
    nqp_get_sc_object $P5018, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5015, $P5018
  fallback4556:
    unless $P5015 goto if1502_end4554 
.annotate 'line', 2148
    find_lex $P5025, "$/"
    unless_null $P5025, fallback4557
    nqp_get_sc_object $P5026, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5025, $P5026
  fallback4557:
    set $P5024, $P5025["role_params"]
    unless_null $P5024, fallback4558
    nqp_get_sc_object $P5027, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5024, $P5027
  fallback4558:
    set $P5023, $P5024[0]
    unless_null $P5023, fallback4559
    nqp_get_sc_object $P5028, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5023, $P5028
  fallback4559:
    set $P5022, $P5023["variable"]
    unless_null $P5022, fallback4560
    nqp_get_sc_object $P5029, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5022, $P5029
  fallback4560:
    set $P5019, $P5022
    iter $P5021, $P5022
  for_next4561:
    unless $P5021, for_done4563
    shift $P5031, $P5021
  for_redo4562:
    .const 'Sub' $P5030 = 'cuid_453_1351203235.318' 
    capture_lex $P5030
    $P5019 = $P5030($P5031)
    goto for_next4561
  for_done4563:
  if1502_end4554:
.annotate 'line', 2153
    find_lex $P5032, "$past"
    $P5032."unshift"($P101)
.annotate 'line', 2154
    find_lex $P5033, "$past"
    nqp_get_sc_object $P5037, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback4564
    nqp_get_sc_object $P5038, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5034, $P5038
  fallback4564:
    $P5039 = $P5034."new"("curlexpad" :named("op"))
    $P5033."push"($P5039)
.annotate 'line', 2155
    find_lex $P5040, "$past"
    $P5040."symbol"("$?CLASS", "lexical" :named("scope"))
.annotate 'line', 2156
    find_dynamic_lex $P5041, "$*W"
    unless_null $P5041, fallback4565
    nqp_get_sc_object $P5044, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5043, $P5044
    set $P5042, $P5043["$W"]
    unless_null $P5042, fallback4566
    nqp_get_sc_object $P5045, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5042, $P5045
  fallback4566:
    unless_null $P5042, vivi_15034567
    die "Contextual $*W not found"
    box $P5046, "Contextual $*W not found"
    set $P5042, $P5046
  vivi_15034567:
    set $P5041, $P5042
  fallback4565:
    find_dynamic_lex $P5047, "$*PACKAGE"
    unless_null $P5047, fallback4568
    nqp_get_sc_object $P5050, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$PACKAGE"]
    unless_null $P5048, fallback4569
    nqp_get_sc_object $P5051, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5048, $P5051
  fallback4569:
    unless_null $P5048, vivi_15044570
    die "Contextual $*PACKAGE not found"
    box $P5052, "Contextual $*PACKAGE not found"
    set $P5048, $P5052
  vivi_15044570:
    set $P5047, $P5048
  fallback4568:
    find_lex $P5053, "$past"
    $P5041."pkg_set_body_block"($P5047, $P5053)
.annotate 'line', 2157
    find_dynamic_lex $P5054, "$*W"
    unless_null $P5054, fallback4571
    nqp_get_sc_object $P5057, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["$W"]
    unless_null $P5055, fallback4572
    nqp_get_sc_object $P5058, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5055, $P5058
  fallback4572:
    unless_null $P5055, vivi_15054573
    die "Contextual $*W not found"
    box $P5059, "Contextual $*W not found"
    set $P5055, $P5059
  vivi_15054573:
    set $P5054, $P5055
  fallback4571:
    find_lex $P5060, "$past"
    find_dynamic_lex $P5061, "$*PACKAGE"
    unless_null $P5061, fallback4574
    nqp_get_sc_object $P5064, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5063, $P5064
    set $P5062, $P5063["$PACKAGE"]
    unless_null $P5062, fallback4575
    nqp_get_sc_object $P5065, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5062, $P5065
  fallback4575:
    unless_null $P5062, vivi_15064576
    die "Contextual $*PACKAGE not found"
    box $P5066, "Contextual $*PACKAGE not found"
    set $P5062, $P5066
  vivi_15064576:
    set $P5061, $P5062
  fallback4574:
    $P5054."install_lexical_symbol"($P5060, "$?PACKAGE", $P5061)
.annotate 'line', 2158
    find_dynamic_lex $P5067, "$*W"
    unless_null $P5067, fallback4577
    nqp_get_sc_object $P5070, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5069, $P5070
    set $P5068, $P5069["$W"]
    unless_null $P5068, fallback4578
    nqp_get_sc_object $P5071, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5068, $P5071
  fallback4578:
    unless_null $P5068, vivi_15074579
    die "Contextual $*W not found"
    box $P5072, "Contextual $*W not found"
    set $P5068, $P5072
  vivi_15074579:
    set $P5067, $P5068
  fallback4577:
    find_lex $P5073, "$past"
    find_dynamic_lex $P5074, "$*PACKAGE"
    unless_null $P5074, fallback4580
    nqp_get_sc_object $P5077, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["$PACKAGE"]
    unless_null $P5075, fallback4581
    nqp_get_sc_object $P5078, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5075, $P5078
  fallback4581:
    unless_null $P5075, vivi_15084582
    die "Contextual $*PACKAGE not found"
    box $P5079, "Contextual $*PACKAGE not found"
    set $P5075, $P5079
  vivi_15084582:
    set $P5074, $P5075
  fallback4580:
    $P5080 = $P5067."install_lexical_symbol"($P5073, "$?ROLE", $P5074)
    .return ($P5080) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_453_1351203235.318") :anon :lex :outer("cuid_454_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2149
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2150
    find_lex $P5001, "$params"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_455_1351203235.318") :anon :lex :outer("cuid_292_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2167
    .lex "$parent", $P101 
    .lex "$parent_found", $P102 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_15164607
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 2170
.annotate 'line', 2171
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4599
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4600
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5007
  fallback4600:
    unless_null $P5004, vivi_15144601
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15144601:
    set $P5003, $P5004
  fallback4599:
    find_lex $P5013, "$/"
    unless_null $P5013, fallback4602
    nqp_get_sc_object $P5014, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5013, $P5014
  fallback4602:
    set $P5012, $P5013["parent"]
    unless_null $P5012, fallback4603
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5012, $P5015
  fallback4603:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback4604
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5016
  fallback4604:
    set $P5010, $P5011["identifier"]
    unless_null $P5010, fallback4605
    nqp_get_sc_object $P5017, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5017
  fallback4605:
    clone $P5009, $P5010
    $P5018 = $P5003."find_sym"($P5009)
    set $P101, $P5018
    box $P5019, 1
    set $P102, $P5019
    set $P5021, $P102
    pop_eh 
    goto skip_handler_15154606
  catch_handler_15164607:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_15154606
  skip_handler_15154606:
    unless $P102 goto if1517_else4608 
.annotate 'line', 2174
.annotate 'line', 2175
    find_dynamic_lex $P5022, "$*W"
    unless_null $P5022, fallback4610
    nqp_get_sc_object $P5025, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$W"]
    unless_null $P5023, fallback4611
    nqp_get_sc_object $P5026, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5023, $P5026
  fallback4611:
    unless_null $P5023, vivi_15184612
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5023, $P5027
  vivi_15184612:
    set $P5022, $P5023
  fallback4610:
    find_dynamic_lex $P5028, "$*PACKAGE"
    unless_null $P5028, fallback4613
    nqp_get_sc_object $P5031, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["$PACKAGE"]
    unless_null $P5029, fallback4614
    nqp_get_sc_object $P5032, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5029, $P5032
  fallback4614:
    unless_null $P5029, vivi_15194615
    die "Contextual $*PACKAGE not found"
    box $P5033, "Contextual $*PACKAGE not found"
    set $P5029, $P5033
  vivi_15194615:
    set $P5028, $P5029
  fallback4613:
    $P5034 = $P5022."pkg_add_parent_or_role"($P5028, "add_parent", $P101)
    set $P5044, $P5034
    goto if1517_end4609
  if1517_else4608:
.annotate 'line', 2177
.annotate 'line', 2178
    find_lex $P5035, "$/"
    $P5036 = $P5035."CURSOR"()
    find_lex $P5039, "$/"
    unless_null $P5039, fallback4616
    nqp_get_sc_object $P5040, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5039, $P5040
  fallback4616:
    set $P5038, $P5039["parent"]
    unless_null $P5038, fallback4617
    nqp_get_sc_object $P5041, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5038, $P5041
  fallback4617:
    set $P5037, $P5038[0]
    unless_null $P5037, fallback4618
    nqp_get_sc_object $P5042, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5037, $P5042
  fallback4618:
    set $S5003, $P5037
    concat $S5002, "Could not find parent class '", $S5003
    concat $S5001, $S5002, "'"
    $P5043 = $P5036."panic"($S5001)
    set $P5044, $P5043
  if1517_end4609:
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_456_1351203235.318") :anon :lex :outer("cuid_292_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2181
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    find_dynamic_lex $P5002, "$*PKGDECL"
    unless_null $P5002, fallback4623
    nqp_get_sc_object $P5005, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$PKGDECL"]
    unless_null $P5003, fallback4624
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5006
  fallback4624:
    unless_null $P5003, vivi_15224625
    die "Contextual $*PKGDECL not found"
    box $P5007, "Contextual $*PKGDECL not found"
    set $P5003, $P5007
  vivi_15224625:
    set $P5002, $P5003
  fallback4623:
    set $S5001, $P5002
    iseq $I5001, $S5001, "grammar"
    unless $I5001 goto if1521_else4621 
    new $P5008, 'ResizablePMCArray'
    box $P5009, "NQPCursor"
    push $P5008, $P5009
    set $P5012, $P5008
    goto if1521_end4622
  if1521_else4621:
    new $P5010, 'ResizablePMCArray'
    box $P5011, "NQPMu"
    push $P5010, $P5011
    set $P5012, $P5010
  if1521_end4622:
    set $P101, $P5012
.annotate 'line', 2183
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback4626
    nqp_get_sc_object $P5016, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback4627
    nqp_get_sc_object $P5017, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5014, $P5017
  fallback4627:
    unless_null $P5014, vivi_15234628
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_15234628:
    set $P5013, $P5014
  fallback4626:
    find_dynamic_lex $P5019, "$*PACKAGE"
    unless_null $P5019, fallback4629
    nqp_get_sc_object $P5022, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$PACKAGE"]
    unless_null $P5020, fallback4630
    nqp_get_sc_object $P5023, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5020, $P5023
  fallback4630:
    unless_null $P5020, vivi_15244631
    die "Contextual $*PACKAGE not found"
    box $P5024, "Contextual $*PACKAGE not found"
    set $P5020, $P5024
  vivi_15244631:
    set $P5019, $P5020
  fallback4629:
.annotate 'line', 2184
    find_dynamic_lex $P5025, "$*W"
    unless_null $P5025, fallback4632
    nqp_get_sc_object $P5028, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["$W"]
    unless_null $P5026, fallback4633
    nqp_get_sc_object $P5029, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5026, $P5029
  fallback4633:
    unless_null $P5026, vivi_15254634
    die "Contextual $*W not found"
    box $P5030, "Contextual $*W not found"
    set $P5026, $P5030
  vivi_15254634:
    set $P5025, $P5026
  fallback4632:
    $P5031 = $P5025."find_sym"($P101)
    $P5032 = $P5013."pkg_add_parent_or_role"($P5019, "set_default_parent", $P5031)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_457_1351203235.318") :anon :lex :outer("cuid_292_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2189
    .param pmc _lex_param_0 
    .lex "$role", $P101 
    .lex "$role_found", $P102 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    new $P5014, 'ExceptionHandler'
    set_label $P5014, catch_handler_15294646
    $P5014.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5014
.annotate 'line', 2192
.annotate 'line', 2193
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4641
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4642
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5007
  fallback4642:
    unless_null $P5004, vivi_15274643
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15274643:
    set $P5003, $P5004
  fallback4641:
    set $P5010, _lex_param_0["identifier"]
    unless_null $P5010, fallback4644
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5011
  fallback4644:
    clone $P5009, $P5010
    $P5012 = $P5003."find_sym"($P5009)
    set $P101, $P5012
    box $P5013, 1
    set $P102, $P5013
    set $P5015, $P102
    pop_eh 
    goto skip_handler_15284645
  catch_handler_15294646:
    .get_results ($P5014) 
    set $I10001, 1
    set $P5014["handled"], $I10001
    nqp_get_sc_object $P10001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    finalize $P5014
    pop_upto_eh $P5014
    pop_eh 
    set $P5015, $P10001
    goto skip_handler_15284645
  skip_handler_15284645:
    unless $P102 goto if1530_else4647 
.annotate 'line', 2196
.annotate 'line', 2197
    find_dynamic_lex $P5016, "$*W"
    unless_null $P5016, fallback4649
    nqp_get_sc_object $P5019, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["$W"]
    unless_null $P5017, fallback4650
    nqp_get_sc_object $P5020, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5017, $P5020
  fallback4650:
    unless_null $P5017, vivi_15314651
    die "Contextual $*W not found"
    box $P5021, "Contextual $*W not found"
    set $P5017, $P5021
  vivi_15314651:
    set $P5016, $P5017
  fallback4649:
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback4652
    nqp_get_sc_object $P5025, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback4653
    nqp_get_sc_object $P5026, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5023, $P5026
  fallback4653:
    unless_null $P5023, vivi_15324654
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_15324654:
    set $P5022, $P5023
  fallback4652:
    $P5028 = $P5016."pkg_add_parent_or_role"($P5022, "add_role", $P101)
    set $P5032, $P5028
    goto if1530_end4648
  if1530_else4647:
.annotate 'line', 2199
.annotate 'line', 2200
    find_lex $P5029, "$/"
    $P5030 = $P5029."CURSOR"()
    set $S5003, _lex_param_0
    concat $S5002, "Could not find role '", $S5003
    concat $S5001, $S5002, "'"
    $P5031 = $P5030."panic"($S5001)
    set $P5032, $P5031
  if1530_end4648:
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "role_params" :subid("cuid_293_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2221
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5009 = 'cuid_458_1351203235.318' 
    capture_lex $P5009 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4688
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5005
  fallback4688:
    set $P5004, _lex_param_1["variable"]
    unless_null $P5004, fallback4689
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5006
  fallback4689:
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next4693:
    unless $P5003, for_done4695
    shift $P5008, $P5003
  for_redo4694:
    .const 'Sub' $P5007 = 'cuid_458_1351203235.318' 
    capture_lex $P5007
    $P5001 = $P5007($P5008)
    goto for_next4693
  for_done4695:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_458_1351203235.318") :anon :lex :outer("cuid_293_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2222
    .param pmc _lex_param_0 
    .lex "$var", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 2223
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
.annotate 'line', 2224
    $P101."scope"("lexical")
.annotate 'line', 2225
    $P101."decl"("param")
.annotate 'line', 2226
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4690
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4691
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5007
  fallback4691:
    unless_null $P5004, vivi_15434692
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15434692:
    set $P5003, $P5004
  fallback4690:
    $P5009 = $P5003."cur_lexpad"()
    $P5010 = $P101."name"()
    $P5011 = $P5009."symbol"($P5010, "lexical" :named("scope"))
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_294_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2230
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4696
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4696:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4697
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4697:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_295_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2231
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4698
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4698:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4699
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4699:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_296_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2232
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4700
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4700:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4701
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4701:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_297_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2234
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2235
    unless_null _lex_param_1, fallback4704
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4704:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4705
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4705:
    unless $P5001 goto if1544_else4702 
    unless_null _lex_param_1, fallback4706
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5005
  fallback4706:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4707
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5006
  fallback4707:
    $P5007 = $P5004."ast"()
    set $P5020, $P5007
    goto if1544_end4703
  if1544_else4702:
    unless_null _lex_param_1, fallback4710
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5009
  fallback4710:
    set $P5008, _lex_param_1["multi_declarator"]
    unless_null $P5008, fallback4711
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5010
  fallback4711:
    unless $P5008 goto if1545_else4708 
.annotate 'line', 2236
    unless_null _lex_param_1, fallback4712
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5012
  fallback4712:
    set $P5011, _lex_param_1["multi_declarator"]
    unless_null $P5011, fallback4713
    nqp_get_sc_object $P5013, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5013
  fallback4713:
    $P5014 = $P5011."ast"()
    set $P5019, $P5014
    goto if1545_end4709
  if1545_else4708:
.annotate 'line', 2237
    unless_null _lex_param_1, fallback4714
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5016
  fallback4714:
    set $P5015, _lex_param_1["package_declarator"]
    unless_null $P5015, fallback4715
    nqp_get_sc_object $P5017, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5015, $P5017
  fallback4715:
    $P5018 = $P5015."ast"()
    set $P5019, $P5018
  if1545_end4709:
    set $P5020, $P5019
  if1544_end4703:
    $P5021 = _lex_param_1."!make"($P5020)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_298_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2240
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2241
    unless_null _lex_param_1, fallback4718
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4718:
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4719
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4719:
    unless $P5001 goto if1546_else4716 
.annotate 'line', 2242
    unless_null _lex_param_1, fallback4720
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5005
  fallback4720:
    set $P5004, _lex_param_1["routine_declarator"]
    unless_null $P5004, fallback4721
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5006
  fallback4721:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1546_end4717
  if1546_else4716:
.annotate 'line', 2243
    unless_null _lex_param_1, fallback4722
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5009
  fallback4722:
    set $P5008, _lex_param_1["variable_declarator"]
    unless_null $P5008, fallback4723
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5010
  fallback4723:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1546_end4717:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_299_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2246
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4726
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4726:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4727
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4727:
    unless $P5001 goto if1547_else4724 
    unless_null _lex_param_1, fallback4728
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5005
  fallback4728:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4729
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5006
  fallback4729:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1547_end4725
  if1547_else4724:
    unless_null _lex_param_1, fallback4730
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5009
  fallback4730:
    set $P5008, _lex_param_1["routine_def"]
    unless_null $P5008, fallback4731
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5010
  fallback4731:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1547_end4725:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_300_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2247
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4734
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4734:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4735
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4735:
    unless $P5001 goto if1548_else4732 
    unless_null _lex_param_1, fallback4736
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5005
  fallback4736:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4737
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5006
  fallback4737:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1548_end4733
  if1548_else4732:
    unless_null _lex_param_1, fallback4738
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5009
  fallback4738:
    set $P5008, _lex_param_1["routine_def"]
    unless_null $P5008, fallback4739
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5010
  fallback4739:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1548_end4733:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_301_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2248
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4740
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4740:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4741
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4741:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_302_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2251
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5067 = 'cuid_459_1351203235.318' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_461_1351203235.318' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_462_1351203235.318' 
    capture_lex $P5067 
    .lex "$past", $P101 
    .lex "$sigil", $P102 
    .lex "$name", $P103 
    .lex "$BLOCK", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P103, $P5003
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P104, $P5004
.annotate 'line', 2252
    unless_null _lex_param_1, fallback4742
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5006
  fallback4742:
    set $P5005, _lex_param_1["variable"]
    unless_null $P5005, fallback4743
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5005, $P5007
  fallback4743:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
    unless_null _lex_param_1, fallback4744
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5011
  fallback4744:
    set $P5010, _lex_param_1["variable"]
    unless_null $P5010, fallback4745
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5012
  fallback4745:
    set $P5009, $P5010["sigil"]
    unless_null $P5009, fallback4746
    nqp_get_sc_object $P5013, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5013
  fallback4746:
    set $P102, $P5009
.annotate 'line', 2254
    $P5014 = $P101."name"()
    set $P103, $P5014
.annotate 'line', 2255
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback4747
    nqp_get_sc_object $P5018, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback4748
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5016, $P5019
  fallback4748:
    unless_null $P5016, vivi_15494749
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_15494749:
    set $P5015, $P5016
  fallback4747:
    $P5021 = $P5015."cur_lexpad"()
    set $P104, $P5021
    set $P5023, $P103
    unless $P103 goto if1551_end4753 
.annotate 'line', 2256
    $P5022 = $P104."symbol"($P103)
    set $P5023, $P5022
  if1551_end4753:
    unless $P5023 goto if1550_end4751 
.annotate 'line', 2257
    $P5024 = _lex_param_1."CURSOR"()
    $P5025 = $P5024."panic"("Redeclaration of symbol ", $P103)
  if1550_end4751:
    find_dynamic_lex $P5026, "$*SCOPE"
    unless_null $P5026, fallback4756
    nqp_get_sc_object $P5029, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$SCOPE"]
    unless_null $P5027, fallback4757
    nqp_get_sc_object $P5030, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5027, $P5030
  fallback4757:
    unless_null $P5027, vivi_15534758
    die "Contextual $*SCOPE not found"
    box $P5031, "Contextual $*SCOPE not found"
    set $P5027, $P5031
  vivi_15534758:
    set $P5026, $P5027
  fallback4756:
    set $S5001, $P5026
    iseq $I5001, $S5001, "has"
    unless $I5001 goto if1552_else4754 
    .const 'Sub' $P5032 = 'cuid_459_1351203235.318' 
    capture_lex $P5032
    $P5033 = $P5032()
    goto if1552_end4755
  if1552_else4754:
    find_dynamic_lex $P5034, "$*SCOPE"
    unless_null $P5034, fallback4810
    nqp_get_sc_object $P5037, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5036, $P5037
    set $P5035, $P5036["$SCOPE"]
    unless_null $P5035, fallback4811
    nqp_get_sc_object $P5038, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5035, $P5038
  fallback4811:
    unless_null $P5035, vivi_15714812
    die "Contextual $*SCOPE not found"
    box $P5039, "Contextual $*SCOPE not found"
    set $P5035, $P5039
  vivi_15714812:
    set $P5034, $P5035
  fallback4810:
    set $S5002, $P5034
    iseq $I5002, $S5002, "our"
    unless $I5002 goto if1570_else4808 
.annotate 'line', 2287
    unless_null _lex_param_1, fallback4815
    nqp_get_sc_object $P5041, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5041
  fallback4815:
    set $P5040, _lex_param_1["typename"]
    unless_null $P5040, fallback4816
    nqp_get_sc_object $P5042, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5040, $P5042
  fallback4816:
    unless $P5040 goto if1572_end4814 
.annotate 'line', 2291
.annotate 'line', 2292
    $P5043 = _lex_param_1."CURSOR"()
    $P5044 = $P5043."panic"("Cannot put types on our-scoped variables")
  if1572_end4814:
    unless_null _lex_param_1, fallback4817
    nqp_get_sc_object $P5046, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5046
  fallback4817:
    set $P5045, _lex_param_1["variable"]
    unless_null $P5045, fallback4818
    nqp_get_sc_object $P5047, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5045, $P5047
  fallback4818:
    set $S5003, $P5045
    box $P5048, $S5003
    set $P103, $P5048
.annotate 'line', 2295
    new $P5049, 'ResizablePMCArray'
    push $P5049, $P103
    $P5050 = "&lexical_package_lookup"($P5049, _lex_param_1)
    set $P101, $P5050
.annotate 'line', 2296
    $P5051 = $P104."symbol"($P103, "package" :named("scope"))
    set $P5054, $P5051
    goto if1570_end4809
  if1570_else4808:
    .const 'Sub' $P5052 = 'cuid_461_1351203235.318' 
    capture_lex $P5052
    $P5053 = $P5052()
    set $P5054, $P5053
  if1570_end4809:
  if1552_end4755:
    unless_null _lex_param_1, fallback4838
    nqp_get_sc_object $P5056, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5056
  fallback4838:
    set $P5055, _lex_param_1["trait"]
    unless_null $P5055, fallback4839
    nqp_get_sc_object $P5057, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5055, $P5057
  fallback4839:
    unless $P5055 goto if1577_end4837 
.annotate 'line', 2325
    unless_null _lex_param_1, fallback4840
    nqp_get_sc_object $P5062, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5062
  fallback4840:
    set $P5061, _lex_param_1["trait"]
    unless_null $P5061, fallback4841
    nqp_get_sc_object $P5063, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5061, $P5063
  fallback4841:
    set $P5058, $P5061
    iter $P5060, $P5061
  for_next4842:
    unless $P5060, for_done4844
    shift $P5065, $P5060
  for_redo4843:
    .const 'Sub' $P5064 = 'cuid_462_1351203235.318' 
    capture_lex $P5064
    $P5058 = $P5064($P5065)
    goto for_next4842
  for_done4844:
  if1577_end4837:
.annotate 'line', 2329
    $P5066 = _lex_param_1."!make"($P101)
    .return ($P5066) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_459_1351203235.318") :anon :lex :outer("cuid_302_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2259
    .lex "%lit_args", $P101 
    .lex "%obj_args", $P102 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    find_dynamic_lex $P5003, "%*HOW"
    unless_null $P5003, fallback4761
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%HOW"]
    unless_null $P5004, fallback4762
    nqp_get_sc_object $P5008, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%HOW"], $P5009
    set $P5004, $P5009
  fallback4762:
    unless_null $P5004, vivi_15554763
    die "Contextual %*HOW not found"
    box $P5010, "Contextual %*HOW not found"
    set $P5004, $P5010
  vivi_15554763:
    set $P5003, $P5004
  fallback4761:
    find_dynamic_lex $P5011, "$*PKGDECL"
    unless_null $P5011, fallback4764
    nqp_get_sc_object $P5014, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$PKGDECL"]
    unless_null $P5012, fallback4765
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5012, $P5015
  fallback4765:
    unless_null $P5012, vivi_15564766
    die "Contextual $*PKGDECL not found"
    box $P5016, "Contextual $*PKGDECL not found"
    set $P5012, $P5016
  vivi_15564766:
    set $P5011, $P5012
  fallback4764:
    set $S5002, $P5011
    concat $S5001, $S5002, "-attr"
    exists $I5001, $P5003[$S5001]
    if $I5001 goto unless1554_end4760 
.annotate 'line', 2261
.annotate 'line', 2262
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    find_dynamic_lex $P5019, "$*PKGDECL"
    unless_null $P5019, fallback4767
    nqp_get_sc_object $P5022, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$PKGDECL"]
    unless_null $P5020, fallback4768
    nqp_get_sc_object $P5023, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5020, $P5023
  fallback4768:
    unless_null $P5020, vivi_15574769
    die "Contextual $*PKGDECL not found"
    box $P5024, "Contextual $*PKGDECL not found"
    set $P5020, $P5024
  vivi_15574769:
    set $P5019, $P5020
  fallback4767:
    set $S5004, $P5019
    concat $S5003, $S5004, " packages do not support attributes"
    $P5025 = $P5018."panic"($S5003)
  unless1554_end4760:
    find_lex $P5026, "$name"
    set $P101["name"], $P5026
    find_lex $P5028, "$/"
    unless_null $P5028, fallback4772
    nqp_get_sc_object $P5029, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5028, $P5029
  fallback4772:
    set $P5027, $P5028["typename"]
    unless_null $P5027, fallback4773
    nqp_get_sc_object $P5030, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5027, $P5030
  fallback4773:
    unless $P5027 goto if1558_end4771 
.annotate 'line', 2269
.annotate 'line', 2270
    find_dynamic_lex $P5031, "$*W"
    unless_null $P5031, fallback4774
    nqp_get_sc_object $P5034, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$W"]
    unless_null $P5032, fallback4775
    nqp_get_sc_object $P5035, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5032, $P5035
  fallback4775:
    unless_null $P5032, vivi_15594776
    die "Contextual $*W not found"
    box $P5036, "Contextual $*W not found"
    set $P5032, $P5036
  vivi_15594776:
    set $P5031, $P5032
  fallback4774:
    new $P5037, 'ResizablePMCArray'
    find_lex $P5040, "$/"
    unless_null $P5040, fallback4777
    nqp_get_sc_object $P5041, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5040, $P5041
  fallback4777:
    set $P5039, $P5040["typename"]
    unless_null $P5039, fallback4778
    nqp_get_sc_object $P5042, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5039, $P5042
  fallback4778:
    set $P5038, $P5039[0]
    unless_null $P5038, fallback4779
    nqp_get_sc_object $P5043, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5038, $P5043
  fallback4779:
    set $S5005, $P5038
    box $P5044, $S5005
    push $P5037, $P5044
    $P5045 = $P5031."find_sym"($P5037)
    set $P102["type"], $P5045
  if1558_end4771:
    find_lex $P5046, "$sigil"
    set $S5006, $P5046
    iseq $I5002, $S5006, "$"
    set $I5004, $I5002
    if $I5002 goto unless1561_end4783 
    find_lex $P5047, "$sigil"
    set $S5007, $P5047
    iseq $I5003, $S5007, "&"
    set $I5004, $I5003
  unless1561_end4783:
    unless $I5004 goto if1560_end4781 
.annotate 'line', 2272
    find_lex $P5049, "$/"
    unless_null $P5049, fallback4786
    nqp_get_sc_object $P5050, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5049, $P5050
  fallback4786:
    set $P5048, $P5049["typename"]
    unless_null $P5048, fallback4787
    nqp_get_sc_object $P5051, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5048, $P5051
  fallback4787:
    unless $P5048 goto if1562_else4784 
.annotate 'line', 2273
    set $P5052, $P102["type"]
    unless_null $P5052, fallback4788
    nqp_get_sc_object $P5053, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5052, $P5053
  fallback4788:
    set $P102["default"], $P5052
    set $P5065, $P5052
    goto if1562_end4785
  if1562_else4784:
.annotate 'line', 2276
    new $P5063, 'ExceptionHandler'
    set_label $P5063, catch_handler_15654793
    $P5063.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5063
.annotate 'line', 2277
    find_dynamic_lex $P5054, "$*W"
    unless_null $P5054, fallback4789
    nqp_get_sc_object $P5057, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["$W"]
    unless_null $P5055, fallback4790
    nqp_get_sc_object $P5058, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5055, $P5058
  fallback4790:
    unless_null $P5055, vivi_15634791
    die "Contextual $*W not found"
    box $P5059, "Contextual $*W not found"
    set $P5055, $P5059
  vivi_15634791:
    set $P5054, $P5055
  fallback4789:
    new $P5060, 'ResizablePMCArray'
    box $P5061, "NQPMu"
    push $P5060, $P5061
    $P5062 = $P5054."find_sym"($P5060)
    set $P102["default"], $P5062
    set $P5064, $P5062
    pop_eh 
    goto skip_handler_15644792
  catch_handler_15654793:
    .get_results ($P5063) 
    set $I10001, 1
    set $P5063["handled"], $I10001
    nqp_get_sc_object $P10001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    finalize $P5063
    pop_upto_eh $P5063
    pop_eh 
    set $P5064, $P10001
    goto skip_handler_15644792
  skip_handler_15644792:
    set $P5065, $P5064
  if1562_end4785:
  if1560_end4781:
.annotate 'line', 2282
    find_dynamic_lex $P5066, "$*W"
    unless_null $P5066, fallback4794
    nqp_get_sc_object $P5069, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5068, $P5069
    set $P5067, $P5068["$W"]
    unless_null $P5067, fallback4795
    nqp_get_sc_object $P5070, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5067, $P5070
  fallback4795:
    unless_null $P5067, vivi_15664796
    die "Contextual $*W not found"
    box $P5071, "Contextual $*W not found"
    set $P5067, $P5071
  vivi_15664796:
    set $P5066, $P5067
  fallback4794:
    find_dynamic_lex $P5072, "$*PACKAGE"
    unless_null $P5072, fallback4797
    nqp_get_sc_object $P5075, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5074, $P5075
    set $P5073, $P5074["$PACKAGE"]
    unless_null $P5073, fallback4798
    nqp_get_sc_object $P5076, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5073, $P5076
  fallback4798:
    unless_null $P5073, vivi_15674799
    die "Contextual $*PACKAGE not found"
    box $P5077, "Contextual $*PACKAGE not found"
    set $P5073, $P5077
  vivi_15674799:
    set $P5072, $P5073
  fallback4797:
    find_dynamic_lex $P5079, "%*HOW"
    unless_null $P5079, fallback4800
    nqp_get_sc_object $P5082, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5081, $P5082
    set $P5080, $P5081["%HOW"]
    unless_null $P5080, fallback4801
    nqp_get_sc_object $P5084, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5083, $P5084
    new $P5085, 'Hash'
    set $P5083["%HOW"], $P5085
    set $P5080, $P5085
  fallback4801:
    unless_null $P5080, vivi_15684802
    die "Contextual %*HOW not found"
    box $P5086, "Contextual %*HOW not found"
    set $P5080, $P5086
  vivi_15684802:
    set $P5079, $P5080
  fallback4800:
    find_dynamic_lex $P5087, "$*PKGDECL"
    unless_null $P5087, fallback4803
    nqp_get_sc_object $P5090, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5089, $P5090
    set $P5088, $P5089["$PKGDECL"]
    unless_null $P5088, fallback4804
    nqp_get_sc_object $P5091, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5088, $P5091
  fallback4804:
    unless_null $P5088, vivi_15694805
    die "Contextual $*PKGDECL not found"
    box $P5092, "Contextual $*PKGDECL not found"
    set $P5088, $P5092
  vivi_15694805:
    set $P5087, $P5088
  fallback4803:
    set $S5009, $P5087
    concat $S5008, $S5009, "-attr"
    set $P5078, $P5079[$S5008]
    unless_null $P5078, fallback4806
    nqp_get_sc_object $P5093, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5078, $P5093
  fallback4806:
    $P5066."pkg_add_attribute"($P5072, $P5078, $P101, $P102)
.annotate 'line', 2285
    nqp_get_sc_object $P5097, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5096, $P5097, "QAST"
    get_who $P5095, $P5096
    set $P5094, $P5095["Stmts"]
    unless_null $P5094, fallback4807
    nqp_get_sc_object $P5098, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5094, $P5098
  fallback4807:
    $P5099 = $P5094."new"()
    store_lex "$past", $P5099
    .return ($P5099) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_461_1351203235.318") :anon :lex :outer("cuid_302_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2298
    .const 'Sub' $P5054 = 'cuid_460_1351203235.318' 
    capture_lex $P5054 
    .lex "$type", $P101 
    .lex "$default", $P102 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4821
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5005
  fallback4821:
    set $P5003, $P5004["typename"]
    unless_null $P5003, fallback4822
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5006
  fallback4822:
    unless $P5003 goto if1573_else4819 
.annotate 'line', 2301
    find_lex $P5007, "$sigil"
    set $S5001, $P5007
    iseq $I5001, $S5001, "$"
    if $I5001 goto unless1574_end4824 
.annotate 'line', 2302
.annotate 'line', 2303
    find_lex $P5008, "$/"
    $P5009 = $P5008."CURSOR"()
    $P5010 = $P5009."panic"("Only typed scalars are currently supported in NQP")
  unless1574_end4824:
.annotate 'line', 2305
    find_dynamic_lex $P5011, "$*W"
    unless_null $P5011, fallback4825
    nqp_get_sc_object $P5014, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$W"]
    unless_null $P5012, fallback4826
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5012, $P5015
  fallback4826:
    unless_null $P5012, vivi_15754827
    die "Contextual $*W not found"
    box $P5016, "Contextual $*W not found"
    set $P5012, $P5016
  vivi_15754827:
    set $P5011, $P5012
  fallback4825:
    new $P5017, 'ResizablePMCArray'
    find_lex $P5020, "$/"
    unless_null $P5020, fallback4828
    nqp_get_sc_object $P5021, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5020, $P5021
  fallback4828:
    set $P5019, $P5020["typename"]
    unless_null $P5019, fallback4829
    nqp_get_sc_object $P5022, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5019, $P5022
  fallback4829:
    set $P5018, $P5019[0]
    unless_null $P5018, fallback4830
    nqp_get_sc_object $P5023, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5018, $P5023
  fallback4830:
    set $S5002, $P5018
    box $P5024, $S5002
    push $P5017, $P5024
    $P5025 = $P5011."find_sym"($P5017)
    set $P101, $P5025
    repr_get_primitive_type_spec $I5002, $P101
    unless $I5002 goto if1576_else4831 
    .const 'Sub' $P5026 = 'cuid_460_1351203235.318' 
    capture_lex $P5026
    $P5027 = $P5026($I5002)
    set $P5031, $P5027
    goto if1576_end4832
  if1576_else4831:
.annotate 'line', 2309
.annotate 'line', 2310
    find_lex $P5028, "$/"
    $P5029 = $P5028."CURSOR"()
    $P5030 = $P5029."panic"("Only native types are currently supported/checked")
    set $P5031, $P5030
  if1576_end4832:
    goto if1573_end4820
  if1573_else4819:
.annotate 'line', 2313
.annotate 'line', 2314
    find_lex $P5032, "$sigil"
    $P5033 = "&default_for"($P5032)
    set $P102, $P5033
  if1573_end4820:
.annotate 'line', 2316
    find_lex $P5035, "$BLOCK"
    set $P5034, $P5035[0]
    unless_null $P5034, fallback4833
    nqp_get_sc_object $P5036, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5034, $P5036
  fallback4833:
    nqp_get_sc_object $P5040, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Op"]
    unless_null $P5037, fallback4834
    nqp_get_sc_object $P5041, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5037, $P5041
  fallback4834:
    find_lex $P5042, "$/"
.annotate 'line', 2318
    nqp_get_sc_object $P5046, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Var"]
    unless_null $P5043, fallback4835
    nqp_get_sc_object $P5047, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5043, $P5047
  fallback4835:
    find_lex $P5048, "$name"
    $P5049 = $P5043."new"($P5048 :named("name"), "lexical" :named("scope"), "var" :named("decl"), $P101 :named("returns"))
    $P5050 = $P5037."new"($P5049, $P102, "bind" :named("op"), $P5042 :named("node"))
    $P5034."push"($P5050)
.annotate 'line', 2321
    find_lex $P5051, "$BLOCK"
    find_lex $P5052, "$name"
    $P5053 = $P5051."symbol"($P5052, "lexical" :named("scope"), $P101 :named("type"))
    .return ($P5053) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_460_1351203235.318") :anon :lex :outer("cuid_461_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2306
    .param pmc _lex_param_0 
    .lex "$prim_spec", _lex_param_0 
.annotate 'line', 2307
    $P5001 = "&default_value_for_prim"(_lex_param_0)
    store_lex "$default", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_462_1351203235.318") :anon :lex :outer("cuid_302_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2326
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_303_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2332
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4845
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4845:
    set $P5001, _lex_param_1["routine_def"]
    unless_null $P5001, fallback4846
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4846:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_304_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2333
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4847
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback4847:
    set $P5001, _lex_param_1["method_def"]
    unless_null $P5001, fallback4848
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback4848:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_305_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2335
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5060 = 'cuid_466_1351203235.318' 
    capture_lex $P5060 
    .const 'Sub' $P5060 = 'cuid_469_1351203235.318' 
    capture_lex $P5060 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "$lexpast", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P103, $P5003
    unless_null _lex_param_1, fallback4851
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5005
  fallback4851:
    set $P5004, _lex_param_1["onlystar"]
    unless_null $P5004, fallback4852
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5006
  fallback4852:
    unless $P5004 goto if1578_else4849 
.annotate 'line', 2339
.annotate 'line', 2340
    $P5007 = "&only_star_block"()
    set $P101, $P5007
    goto if1578_end4850
  if1578_else4849:
.annotate 'line', 2342
.annotate 'line', 2343
    unless_null _lex_param_1, fallback4853
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5009
  fallback4853:
    set $P5008, _lex_param_1["blockoid"]
    unless_null $P5008, fallback4854
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5010
  fallback4854:
    $P5011 = $P5008."ast"()
    set $P101, $P5011
.annotate 'line', 2344
    $P101."blocktype"("declaration")
    find_dynamic_lex $P5012, "$*RETURN_USED"
    unless_null $P5012, fallback4857
    nqp_get_sc_object $P5015, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$RETURN_USED"]
    unless_null $P5013, fallback4858
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5013, $P5016
  fallback4858:
    unless_null $P5013, vivi_15804859
    die "Contextual $*RETURN_USED not found"
    box $P5017, "Contextual $*RETURN_USED not found"
    set $P5013, $P5017
  vivi_15804859:
    set $P5012, $P5013
  fallback4857:
    set $P5021, $P5012
    unless $P5012 goto if1579_end4856 
.annotate 'line', 2345
.annotate 'line', 2346
    set $P5018, $P101[1]
    unless_null $P5018, fallback4860
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5018, $P5019
  fallback4860:
    $P5020 = "&wrap_return_handler"($P5018)
    set $P101[1], $P5020
    set $P5021, $P5020
  if1579_end4856:
  if1578_end4850:
    set $P102, $P101
    unless_null _lex_param_1, fallback4863
    nqp_get_sc_object $P5023, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5023
  fallback4863:
    set $P5022, _lex_param_1["deflongname"]
    unless_null $P5022, fallback4864
    nqp_get_sc_object $P5024, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5022, $P5024
  fallback4864:
    unless $P5022 goto if1581_else4861 
    .const 'Sub' $P5025 = 'cuid_466_1351203235.318' 
    capture_lex $P5025
    $P5026 = $P5025()
    goto if1581_end4862
  if1581_else4861:
.annotate 'line', 2443
.annotate 'line', 2444
    find_dynamic_lex $P5027, "$*W"
    unless_null $P5027, fallback4976
    nqp_get_sc_object $P5030, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["$W"]
    unless_null $P5028, fallback4977
    nqp_get_sc_object $P5031, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5028, $P5031
  fallback4977:
    unless_null $P5028, vivi_16164978
    die "Contextual $*W not found"
    box $P5032, "Contextual $*W not found"
    set $P5028, $P5032
  vivi_16164978:
    set $P5027, $P5028
  fallback4976:
    $P5033 = $P5027."is_precompilation_mode"()
    set $P5041, $P5033
    unless $P5033 goto if1615_end4975 
.annotate 'line', 2445
    find_dynamic_lex $P5034, "$*W"
    unless_null $P5034, fallback4979
    nqp_get_sc_object $P5037, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5036, $P5037
    set $P5035, $P5036["$W"]
    unless_null $P5035, fallback4980
    nqp_get_sc_object $P5038, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5035, $P5038
  fallback4980:
    unless_null $P5035, vivi_16174981
    die "Contextual $*W not found"
    box $P5039, "Contextual $*W not found"
    set $P5035, $P5039
  vivi_16174981:
    set $P5034, $P5035
  fallback4979:
    $P5040 = $P5034."create_code"($P101, "<anon>", 0)
    set $P5041, $P5040
  if1615_end4975:
  if1581_end4862:
.annotate 'line', 2449
    nqp_get_sc_object $P5045, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Op"]
    unless_null $P5042, fallback4982
    nqp_get_sc_object $P5046, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5042, $P5046
  fallback4982:
    $P5047 = $P5042."new"($P101, "takeclosure" :named("op"))
    set $P103, $P5047
    set $P103["sink"], $P101
    set $P103["block_past"], $P102
.annotate 'line', 2452
    _lex_param_1."!make"($P103)
    unless_null _lex_param_1, fallback4985
    nqp_get_sc_object $P5049, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5049
  fallback4985:
    set $P5048, _lex_param_1["trait"]
    unless_null $P5048, fallback4986
    nqp_get_sc_object $P5050, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5048, $P5050
  fallback4986:
    set $P5059, $P5048
    unless $P5048 goto if1618_end4984 
.annotate 'line', 2455
    unless_null _lex_param_1, fallback4987
    nqp_get_sc_object $P5055, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5055
  fallback4987:
    set $P5054, _lex_param_1["trait"]
    unless_null $P5054, fallback4988
    nqp_get_sc_object $P5056, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5054, $P5056
  fallback4988:
    set $P5051, $P5054
    iter $P5053, $P5054
  for_next4989:
    unless $P5053, for_done4991
    shift $P5058, $P5053
  for_redo4990:
    .const 'Sub' $P5057 = 'cuid_469_1351203235.318' 
    capture_lex $P5057
    $P5051 = $P5057($P5058)
    goto for_next4989
  for_done4991:
    set $P5059, $P5051
  if1618_end4984:
    .return ($P5059) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_466_1351203235.318") :anon :lex :outer("cuid_305_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2351
    .const 'Sub' $P5078 = 'cuid_465_1351203235.318' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_467_1351203235.318' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_468_1351203235.318' 
    capture_lex $P5078 
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4865
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5005
  fallback4865:
    set $P5003, $P5004["sigil"]
    unless_null $P5003, fallback4866
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5006
  fallback4866:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback4867
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5007
  fallback4867:
    set $S5002, $P5002
.annotate 'line', 2352
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4868
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5011
  fallback4868:
    set $P5009, $P5010["deflongname"]
    unless_null $P5009, fallback4869
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5012
  fallback4869:
    set $P5008, $P5009[0]
    unless_null $P5008, fallback4870
    nqp_get_sc_object $P5013, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5013
  fallback4870:
    $P5014 = $P5008."ast"()
    set $S5003, $P5014
    concat $S5001, $S5002, $S5003
    box $P5015, $S5001
    set $P101, $P5015
.annotate 'line', 2353
    find_lex $P5016, "$past"
    $P5016."name"($P101)
    find_dynamic_lex $P5017, "$*SCOPE"
    unless_null $P5017, fallback4877
    nqp_get_sc_object $P5020, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5019, $P5020
    set $P5018, $P5019["$SCOPE"]
    unless_null $P5018, fallback4878
    nqp_get_sc_object $P5021, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5018, $P5021
  fallback4878:
    unless_null $P5018, vivi_15854879
    die "Contextual $*SCOPE not found"
    box $P5022, "Contextual $*SCOPE not found"
    set $P5018, $P5022
  vivi_15854879:
    set $P5017, $P5018
  fallback4877:
    set $S5004, $P5017
    iseq $I5001, $S5004, ""
    set $I5003, $I5001
    if $I5001 goto unless1584_end4876 
    find_dynamic_lex $P5023, "$*SCOPE"
    unless_null $P5023, fallback4880
    nqp_get_sc_object $P5026, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5025, $P5026
    set $P5024, $P5025["$SCOPE"]
    unless_null $P5024, fallback4881
    nqp_get_sc_object $P5027, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5024, $P5027
  fallback4881:
    unless_null $P5024, vivi_15864882
    die "Contextual $*SCOPE not found"
    box $P5028, "Contextual $*SCOPE not found"
    set $P5024, $P5028
  vivi_15864882:
    set $P5023, $P5024
  fallback4880:
    set $S5005, $P5023
    iseq $I5002, $S5005, "my"
    set $I5003, $I5002
  unless1584_end4876:
    set $I5005, $I5003
    if $I5003 goto unless1583_end4874 
    find_dynamic_lex $P5029, "$*SCOPE"
    unless_null $P5029, fallback4883
    nqp_get_sc_object $P5032, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["$SCOPE"]
    unless_null $P5030, fallback4884
    nqp_get_sc_object $P5033, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5030, $P5033
  fallback4884:
    unless_null $P5030, vivi_15874885
    die "Contextual $*SCOPE not found"
    box $P5034, "Contextual $*SCOPE not found"
    set $P5030, $P5034
  vivi_15874885:
    set $P5029, $P5030
  fallback4883:
    set $S5006, $P5029
    iseq $I5004, $S5006, "our"
    set $I5005, $I5004
  unless1583_end4874:
    unless $I5005 goto if1582_else4871 
.annotate 'line', 2354
    find_dynamic_lex $P5035, "$*MULTINESS"
    unless_null $P5035, fallback4888
    nqp_get_sc_object $P5038, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5037, $P5038
    set $P5036, $P5037["$MULTINESS"]
    unless_null $P5036, fallback4889
    nqp_get_sc_object $P5039, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5036, $P5039
  fallback4889:
    unless_null $P5036, vivi_15894890
    die "Contextual $*MULTINESS not found"
    box $P5040, "Contextual $*MULTINESS not found"
    set $P5036, $P5040
  vivi_15894890:
    set $P5035, $P5036
  fallback4888:
    set $S5007, $P5035
    iseq $I5006, $S5007, "multi"
    unless $I5006 goto if1588_else4886 
    .const 'Sub' $P5041 = 'cuid_465_1351203235.318' 
    capture_lex $P5041
    $P5042 = $P5041()
    goto if1588_end4887
  if1588_else4886:
    find_dynamic_lex $P5043, "$*MULTINESS"
    unless_null $P5043, fallback4926
    nqp_get_sc_object $P5046, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$MULTINESS"]
    unless_null $P5044, fallback4927
    nqp_get_sc_object $P5047, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5044, $P5047
  fallback4927:
    unless_null $P5044, vivi_16014928
    die "Contextual $*MULTINESS not found"
    box $P5048, "Contextual $*MULTINESS not found"
    set $P5044, $P5048
  vivi_16014928:
    set $P5043, $P5044
  fallback4926:
    set $S5008, $P5043
    iseq $I5007, $S5008, "proto"
    unless $I5007 goto if1600_else4924 
    .const 'Sub' $P5049 = 'cuid_467_1351203235.318' 
    capture_lex $P5049
    $P5050 = $P5049()
    set $P5053, $P5050
    goto if1600_end4925
  if1600_else4924:
    .const 'Sub' $P5051 = 'cuid_468_1351203235.318' 
    capture_lex $P5051
    $P5052 = $P5051()
    set $P5053, $P5052
  if1600_end4925:
  if1588_end4887:
.annotate 'line', 2432
    nqp_get_sc_object $P5057, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Var"]
    unless_null $P5054, fallback4963
    nqp_get_sc_object $P5058, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5054, $P5058
  fallback4963:
    set $S5010, $P101
    concat $S5009, "&", $S5010
    $P5059 = $P5054."new"($S5009 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5059
    goto if1582_end4872
  if1582_else4871:
.annotate 'line', 2434
.annotate 'line', 2435
    find_lex $P5060, "$/"
    $P5061 = $P5060."CURSOR"()
    find_dynamic_lex $P5062, "$*SCOPE"
    unless_null $P5062, fallback4964
    nqp_get_sc_object $P5065, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$SCOPE"]
    unless_null $P5063, fallback4965
    nqp_get_sc_object $P5066, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5063, $P5066
  fallback4965:
    unless_null $P5063, vivi_16114966
    die "Contextual $*SCOPE not found"
    box $P5067, "Contextual $*SCOPE not found"
    set $P5063, $P5067
  vivi_16114966:
    set $P5062, $P5063
  fallback4964:
    set $S5012, $P5062
    concat $S5011, $S5012, " scoped routines are not supported yet"
    $P5068 = $P5061."panic"($S5011)
  if1582_end4872:
    set $S5013, $P101
    iseq $I5008, $S5013, "MAIN"
    set $I5010, $I5008
    unless $I5008 goto if1613_end4970 
    find_dynamic_lex $P5069, "$*MULTINESS"
    unless_null $P5069, fallback4971
    nqp_get_sc_object $P5072, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5071, $P5072
    set $P5070, $P5071["$MULTINESS"]
    unless_null $P5070, fallback4972
    nqp_get_sc_object $P5073, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5070, $P5073
  fallback4972:
    unless_null $P5070, vivi_16144973
    die "Contextual $*MULTINESS not found"
    box $P5074, "Contextual $*MULTINESS not found"
    set $P5070, $P5074
  vivi_16144973:
    set $P5069, $P5070
  fallback4971:
    set $S5014, $P5069
    isne $I5009, $S5014, "multi"
    set $I5010, $I5009
  if1613_end4970:
    box $P5077, $I5010
    set $P5076, $P5077
    unless $I5010 goto if1612_end4968 
.annotate 'line', 2439
    find_lex $P5075, "$block"
    store_dynamic_lex "$*MAIN_SUB", $P5075
    set $P5076, $P5075
  if1612_end4968:
    .return ($P5076) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_465_1351203235.318") :anon :lex :outer("cuid_466_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2355
    .const 'Sub' $P5048 = 'cuid_464_1351203235.318' 
    capture_lex $P5048 
    .lex "$proto", $P101 
    .lex "%sym", $P102 
    .lex "$code", $P103 
    .lex "$BLOCK", $P104 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P103, $P5003
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P104, $P5004
    find_dynamic_lex $P5005, "$*SCOPE"
    unless_null $P5005, fallback4893
    nqp_get_sc_object $P5008, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$SCOPE"]
    unless_null $P5006, fallback4894
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5009
  fallback4894:
    unless_null $P5006, vivi_15914895
    die "Contextual $*SCOPE not found"
    box $P5010, "Contextual $*SCOPE not found"
    set $P5006, $P5010
  vivi_15914895:
    set $P5005, $P5006
  fallback4893:
    set $S5001, $P5005
    iseq $I5001, $S5001, "our"
    unless $I5001 goto if1590_end4892 
.annotate 'line', 2357
    box $P5011, "a multi can not be our-scoped"
    die $P5011
  if1590_end4892:
.annotate 'line', 2359
    find_dynamic_lex $P5012, "$*W"
    unless_null $P5012, fallback4896
    nqp_get_sc_object $P5015, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$W"]
    unless_null $P5013, fallback4897
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5013, $P5016
  fallback4897:
    unless_null $P5013, vivi_15924898
    die "Contextual $*W not found"
    box $P5017, "Contextual $*W not found"
    set $P5013, $P5017
  vivi_15924898:
    set $P5012, $P5013
  fallback4896:
    $P5018 = $P5012."cur_lexpad"()
    find_lex $P5019, "$name"
    set $S5003, $P5019
    concat $S5002, "&", $S5003
    $P5020 = $P5018."symbol"($S5002)
    set $P102, $P5020
    set $P5021, $P102["proto"]
    unless_null $P5021, fallback4901
    nqp_get_sc_object $P5022, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5021, $P5022
  fallback4901:
    unless $P5021 goto if1593_else4899 
.annotate 'line', 2360
    set $P5023, $P102["value"]
    unless_null $P5023, fallback4902
    nqp_get_sc_object $P5024, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5023, $P5024
  fallback4902:
    set $P101, $P5023
    goto if1593_end4900
  if1593_else4899:
    .const 'Sub' $P5025 = 'cuid_464_1351203235.318' 
    capture_lex $P5025
    $P5026 = $P5025()
  if1593_end4900:
.annotate 'line', 2389
    find_dynamic_lex $P5027, "$*W"
    unless_null $P5027, fallback4917
    nqp_get_sc_object $P5030, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["$W"]
    unless_null $P5028, fallback4918
    nqp_get_sc_object $P5031, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5028, $P5031
  fallback4918:
    unless_null $P5028, vivi_15984919
    die "Contextual $*W not found"
    box $P5032, "Contextual $*W not found"
    set $P5028, $P5032
  vivi_15984919:
    set $P5027, $P5028
  fallback4917:
    find_lex $P5033, "$past"
    find_lex $P5034, "$name"
    $P5035 = $P5027."create_code"($P5033, $P5034, 0)
    set $P103, $P5035
.annotate 'line', 2390
    find_lex $P5036, "$past"
    "&attach_multi_signature"($P103, $P5036)
.annotate 'line', 2393
    $P101."add_dispatchee"($P103)
.annotate 'line', 2396
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback4920
    nqp_get_sc_object $P5040, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback4921
    nqp_get_sc_object $P5041, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5038, $P5041
  fallback4921:
    unless_null $P5038, vivi_15994922
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_15994922:
    set $P5037, $P5038
  fallback4920:
    $P5043 = $P5037."cur_lexpad"()
    set $P104, $P5043
.annotate 'line', 2397
    set $P5044, $P104[0]
    unless_null $P5044, fallback4923
    nqp_get_sc_object $P5045, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5044, $P5045
  fallback4923:
    find_lex $P5046, "$past"
    $P5047 = $P5044."push"($P5046)
    .return ($P5047) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_464_1351203235.318") :anon :lex :outer("cuid_465_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2365
    .const 'Sub' $P5018 = 'cuid_463_1351203235.318' 
    capture_lex $P5018 
    .lex "$found_proto", $P101 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 2368
    find_dynamic_lex $P5005, "$*W"
    unless_null $P5005, fallback4903
    nqp_get_sc_object $P5008, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$W"]
    unless_null $P5006, fallback4904
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5009
  fallback4904:
    unless_null $P5006, vivi_15944905
    die "Contextual $*W not found"
    box $P5010, "Contextual $*W not found"
    set $P5006, $P5010
  vivi_15944905:
    set $P5005, $P5006
  fallback4903:
    $P5011 = $P5005."get_legacy_block_list"()
    set $P5002, $P5011
    iter $P5004, $P5011
  for_next4912:
    unless $P5004, for_done4914
    shift $P5013, $P5004
  for_redo4913:
    .const 'Sub' $P5012 = 'cuid_463_1351203235.318' 
    capture_lex $P5012
    $P5002 = $P5012($P5013)
    goto for_next4912
  for_done4914:
    if $P101 goto unless1597_end4916 
.annotate 'line', 2380
.annotate 'line', 2381
    find_lex $P5014, "$/"
    $P5015 = $P5014."CURSOR"()
    $P5016 = $P5015."panic"("Sorry, no proto sub in scope, and auto-generation of protos is not yet implemented.")
  unless1597_end4916:
    box $P5017, "Dispatcher derivation NYI"
    die $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_463_1351203235.318") :anon :lex :outer("cuid_464_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2368
    .param pmc _lex_param_0 
    .lex "%sym", $P101 
    .lex "$_", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 2369
    find_lex $P5002, "$name"
    set $S5002, $P5002
    concat $S5001, "&", $S5002
    $P5003 = _lex_param_0."symbol"($S5001)
    set $P101, $P5003
    set $P5004, $P101["proto"]
    unless_null $P5004, fallback4908
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5005
  fallback4908:
    unless $P5004 goto if1595_else4906 
.annotate 'line', 2370
    set $P5006, $P101["value"]
    unless_null $P5006, fallback4909
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5007
  fallback4909:
    store_lex "$proto", $P5006
    box $P5008, 1
    store_lex "$found_proto", $P5008
    set $P5013, $P5008
    goto if1595_end4907
  if1595_else4906:
    set $P5012, $P101
    unless $P101 goto if1596_end4911 
.annotate 'line', 2374
.annotate 'line', 2375
    find_lex $P5009, "$/"
    $P5010 = $P5009."CURSOR"()
    $P5011 = $P5010."panic"("Cannot declare a multi when an only is already in scope.")
    set $P5012, $P5011
  if1596_end4911:
    set $P5013, $P5012
  if1595_end4907:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_467_1351203235.318") :anon :lex :outer("cuid_466_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2399
    .lex "$code", $P101 
    .lex "$BLOCK", $P102 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    find_dynamic_lex $P5003, "$*SCOPE"
    unless_null $P5003, fallback4931
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$SCOPE"]
    unless_null $P5004, fallback4932
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5007
  fallback4932:
    unless_null $P5004, vivi_16034933
    die "Contextual $*SCOPE not found"
    box $P5008, "Contextual $*SCOPE not found"
    set $P5004, $P5008
  vivi_16034933:
    set $P5003, $P5004
  fallback4931:
    set $S5001, $P5003
    iseq $I5001, $S5001, "our"
    unless $I5001 goto if1602_end4930 
.annotate 'line', 2403
    box $P5009, "our-scoped protos not yet implemented"
    die $P5009
  if1602_end4930:
.annotate 'line', 2404
    find_dynamic_lex $P5010, "$*W"
    unless_null $P5010, fallback4934
    nqp_get_sc_object $P5013, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$W"]
    unless_null $P5011, fallback4935
    nqp_get_sc_object $P5014, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5014
  fallback4935:
    unless_null $P5011, vivi_16044936
    die "Contextual $*W not found"
    box $P5015, "Contextual $*W not found"
    set $P5011, $P5015
  vivi_16044936:
    set $P5010, $P5011
  fallback4934:
    find_lex $P5016, "$past"
    find_lex $P5017, "$name"
    $P5018 = $P5010."create_code"($P5016, $P5017, 1)
    set $P101, $P5018
.annotate 'line', 2405
    find_dynamic_lex $P5019, "$*W"
    unless_null $P5019, fallback4937
    nqp_get_sc_object $P5022, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$W"]
    unless_null $P5020, fallback4938
    nqp_get_sc_object $P5023, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5020, $P5023
  fallback4938:
    unless_null $P5020, vivi_16054939
    die "Contextual $*W not found"
    box $P5024, "Contextual $*W not found"
    set $P5020, $P5024
  vivi_16054939:
    set $P5019, $P5020
  fallback4937:
    $P5025 = $P5019."cur_lexpad"()
    set $P102, $P5025
.annotate 'line', 2406
    set $P5026, $P102[0]
    unless_null $P5026, fallback4940
    nqp_get_sc_object $P5027, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5026, $P5027
  fallback4940:
    nqp_get_sc_object $P5031, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["Op"]
    unless_null $P5028, fallback4941
    nqp_get_sc_object $P5032, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5028, $P5032
  fallback4941:
.annotate 'line', 2408
    nqp_get_sc_object $P5036, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Var"]
    unless_null $P5033, fallback4942
    nqp_get_sc_object $P5037, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5033, $P5037
  fallback4942:
    find_lex $P5038, "$name"
    set $S5003, $P5038
    concat $S5002, "&", $S5003
    $P5039 = $P5033."new"($S5002 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5040, "$past"
    $P5041 = $P5028."new"($P5039, $P5040, "bind" :named("op"))
    $P5026."push"($P5041)
.annotate 'line', 2411
    find_lex $P5042, "$name"
    set $S5005, $P5042
    concat $S5004, "&", $S5005
    $P5043 = $P102."symbol"($S5004, "lexical" :named("scope"), 1 :named("proto"), $P101 :named("value"))
    .return ($P5043) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_468_1351203235.318") :anon :lex :outer("cuid_466_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2413
    .lex "$BLOCK", $P101 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 2414
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4943
    nqp_get_sc_object $P5005, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4944
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5006
  fallback4944:
    unless_null $P5003, vivi_16064945
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_16064945:
    set $P5002, $P5003
  fallback4943:
    $P5008 = $P5002."cur_lexpad"()
    set $P101, $P5008
.annotate 'line', 2415
    set $P5009, $P101[0]
    unless_null $P5009, fallback4946
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5010
  fallback4946:
    nqp_get_sc_object $P5014, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback4947
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5015
  fallback4947:
.annotate 'line', 2417
    nqp_get_sc_object $P5019, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback4948
    nqp_get_sc_object $P5020, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5016, $P5020
  fallback4948:
    find_lex $P5021, "$name"
    set $S5002, $P5021
    concat $S5001, "&", $S5002
    $P5022 = $P5016."new"($S5001 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5023, "$past"
    $P5024 = $P5011."new"($P5022, $P5023, "bind" :named("op"))
    $P5009."push"($P5024)
.annotate 'line', 2420
    find_lex $P5025, "$name"
    set $S5004, $P5025
    concat $S5003, "&", $S5004
    $P101."symbol"($S5003, "lexical" :named("scope"))
    find_dynamic_lex $P5026, "$*SCOPE"
    unless_null $P5026, fallback4951
    nqp_get_sc_object $P5029, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$SCOPE"]
    unless_null $P5027, fallback4952
    nqp_get_sc_object $P5030, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5027, $P5030
  fallback4952:
    unless_null $P5027, vivi_16084953
    die "Contextual $*SCOPE not found"
    box $P5031, "Contextual $*SCOPE not found"
    set $P5027, $P5031
  vivi_16084953:
    set $P5026, $P5027
  fallback4951:
    set $S5005, $P5026
    iseq $I5001, $S5005, "our"
    box $P5067, $I5001
    set $P5066, $P5067
    unless $I5001 goto if1607_end4950 
.annotate 'line', 2421
.annotate 'line', 2424
    find_dynamic_lex $P5032, "$*W"
    unless_null $P5032, fallback4954
    nqp_get_sc_object $P5035, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5034, $P5035
    set $P5033, $P5034["$W"]
    unless_null $P5033, fallback4955
    nqp_get_sc_object $P5036, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5033, $P5036
  fallback4955:
    unless_null $P5033, vivi_16094956
    die "Contextual $*W not found"
    box $P5037, "Contextual $*W not found"
    set $P5033, $P5037
  vivi_16094956:
    set $P5032, $P5033
  fallback4954:
    find_dynamic_lex $P5038, "$*PACKAGE"
    unless_null $P5038, fallback4957
    nqp_get_sc_object $P5041, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5040, $P5041
    set $P5039, $P5040["$PACKAGE"]
    unless_null $P5039, fallback4958
    nqp_get_sc_object $P5042, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5039, $P5042
  fallback4958:
    unless_null $P5039, vivi_16104959
    die "Contextual $*PACKAGE not found"
    box $P5043, "Contextual $*PACKAGE not found"
    set $P5039, $P5043
  vivi_16104959:
    set $P5038, $P5039
  fallback4957:
    find_lex $P5044, "$name"
    find_lex $P5045, "$past"
    $P5032."install_package_routine"($P5038, $P5044, $P5045)
.annotate 'line', 2425
    set $P5046, $P101[0]
    unless_null $P5046, fallback4960
    nqp_get_sc_object $P5047, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5046, $P5047
  fallback4960:
    nqp_get_sc_object $P5051, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Op"]
    unless_null $P5048, fallback4961
    nqp_get_sc_object $P5052, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5048, $P5052
  fallback4961:
.annotate 'line', 2427
    new $P5053, 'ResizablePMCArray'
    find_lex $P5054, "$name"
    push $P5053, $P5054
    find_lex $P5055, "$/"
    $P5056 = "&lexical_package_lookup"($P5053, $P5055)
.annotate 'line', 2428
    nqp_get_sc_object $P5060, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5059, $P5060, "QAST"
    get_who $P5058, $P5059
    set $P5057, $P5058["Var"]
    unless_null $P5057, fallback4962
    nqp_get_sc_object $P5061, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5057, $P5061
  fallback4962:
    find_lex $P5062, "$name"
    set $S5007, $P5062
    concat $S5006, "&", $S5007
    $P5063 = $P5057."new"($S5006 :named("name"), "lexical" :named("scope"))
    $P5064 = $P5048."new"($P5056, $P5063, "bind" :named("op"))
    $P5065 = $P5046."push"($P5064)
    set $P5066, $P5065
  if1607_end4950:
    .return ($P5066) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_469_1351203235.318") :anon :lex :outer("cuid_305_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2456
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_306_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2461
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5091 = 'cuid_470_1351203235.318' 
    capture_lex $P5091 
    .const 'Sub' $P5091 = 'cuid_471_1351203235.318' 
    capture_lex $P5091 
    .lex "$past", $P101 
    .lex "$name", $P102 
    .lex "$lexpast", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P103, $P5003
    unless_null _lex_param_1, fallback4994
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5005
  fallback4994:
    set $P5004, _lex_param_1["onlystar"]
    unless_null $P5004, fallback4995
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5006
  fallback4995:
    unless $P5004 goto if1619_else4992 
.annotate 'line', 2465
.annotate 'line', 2466
    $P5007 = "&only_star_block"()
    set $P101, $P5007
    goto if1619_end4993
  if1619_else4992:
.annotate 'line', 2468
.annotate 'line', 2469
    unless_null _lex_param_1, fallback4996
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5009
  fallback4996:
    set $P5008, _lex_param_1["blockoid"]
    unless_null $P5008, fallback4997
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5010
  fallback4997:
    $P5011 = $P5008."ast"()
    set $P101, $P5011
.annotate 'line', 2470
    $P101."blocktype"("declaration")
    find_dynamic_lex $P5012, "$*RETURN_USED"
    unless_null $P5012, fallback5000
    nqp_get_sc_object $P5015, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$RETURN_USED"]
    unless_null $P5013, fallback5001
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5013, $P5016
  fallback5001:
    unless_null $P5013, vivi_16215002
    die "Contextual $*RETURN_USED not found"
    box $P5017, "Contextual $*RETURN_USED not found"
    set $P5013, $P5017
  vivi_16215002:
    set $P5012, $P5013
  fallback5000:
    set $P5021, $P5012
    unless $P5012 goto if1620_end4999 
.annotate 'line', 2471
.annotate 'line', 2472
    set $P5018, $P101[1]
    unless_null $P5018, fallback5003
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5018, $P5019
  fallback5003:
    $P5020 = "&wrap_return_handler"($P5018)
    set $P101[1], $P5020
    set $P5021, $P5020
  if1620_end4999:
  if1619_end4993:
    set $P5022, $P101["signature_has_invocant"]
    unless_null $P5022, fallback5006
    nqp_get_sc_object $P5023, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5022, $P5023
  fallback5006:
    if $P5022 goto unless1622_end5005 
.annotate 'line', 2477
.annotate 'line', 2478
    set $P5024, $P101[0]
    unless_null $P5024, fallback5007
    nqp_get_sc_object $P5025, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5024, $P5025
  fallback5007:
    nqp_get_sc_object $P5029, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5008
    nqp_get_sc_object $P5030, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5026, $P5030
  fallback5008:
    find_dynamic_lex $P5031, "$*PACKAGE"
    unless_null $P5031, fallback5009
    nqp_get_sc_object $P5034, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$PACKAGE"]
    unless_null $P5032, fallback5010
    nqp_get_sc_object $P5035, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5032, $P5035
  fallback5010:
    unless_null $P5032, vivi_16235011
    die "Contextual $*PACKAGE not found"
    box $P5036, "Contextual $*PACKAGE not found"
    set $P5032, $P5036
  vivi_16235011:
    set $P5031, $P5032
  fallback5009:
    $P5037 = $P5026."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"), $P5031 :named("returns"))
    $P5038 = $P5024."unshift"($P5037)
  unless1622_end5005:
.annotate 'line', 2483
    $P101."symbol"("self", "lexical" :named("scope"))
    box $P5039, ""
    set $P102, $P5039
    unless_null _lex_param_1, fallback5014
    nqp_get_sc_object $P5041, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5041
  fallback5014:
    set $P5040, _lex_param_1["deflongname"]
    unless_null $P5040, fallback5015
    nqp_get_sc_object $P5042, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5040, $P5042
  fallback5015:
    unless $P5040 goto if1624_else5012 
.annotate 'line', 2487
    unless_null _lex_param_1, fallback5016
    nqp_get_sc_object $P5044, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5044
  fallback5016:
    set $P5043, _lex_param_1["private"]
    unless_null $P5043, fallback5017
    nqp_get_sc_object $P5045, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5043, $P5045
  fallback5017:
    set $S5002, $P5043
.annotate 'line', 2488
    unless_null _lex_param_1, fallback5018
    nqp_get_sc_object $P5048, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5048
  fallback5018:
    set $P5047, _lex_param_1["deflongname"]
    unless_null $P5047, fallback5019
    nqp_get_sc_object $P5049, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5047, $P5049
  fallback5019:
    set $P5046, $P5047[0]
    unless_null $P5046, fallback5020
    nqp_get_sc_object $P5050, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5046, $P5050
  fallback5020:
    $P5051 = $P5046."ast"()
    set $S5003, $P5051
    concat $S5001, $S5002, $S5003
    box $P5052, $S5001
    set $P102, $P5052
    goto if1624_end5013
  if1624_else5012:
    unless_null _lex_param_1, fallback5023
    nqp_get_sc_object $P5054, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5054
  fallback5023:
    set $P5053, _lex_param_1["latename"]
    unless_null $P5053, fallback5024
    nqp_get_sc_object $P5055, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5053, $P5055
  fallback5024:
    set $P5068, $P5053
    unless $P5053 goto if1625_end5022 
.annotate 'line', 2490
    find_dynamic_lex $P5056, "$*PKGDECL"
    unless_null $P5056, fallback5027
    nqp_get_sc_object $P5059, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["$PKGDECL"]
    unless_null $P5057, fallback5028
    nqp_get_sc_object $P5060, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5057, $P5060
  fallback5028:
    unless_null $P5057, vivi_16275029
    die "Contextual $*PKGDECL not found"
    box $P5061, "Contextual $*PKGDECL not found"
    set $P5057, $P5061
  vivi_16275029:
    set $P5056, $P5057
  fallback5027:
    set $S5004, $P5056
    isne $I5001, $S5004, "role"
    unless $I5001 goto if1626_end5026 
.annotate 'line', 2491
.annotate 'line', 2492
    $P5062 = _lex_param_1."CURSOR"()
    $P5063 = $P5062."panic"("Late-bound method name only valid in role")
  if1626_end5026:
    unless_null _lex_param_1, fallback5030
    nqp_get_sc_object $P5065, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5065
  fallback5030:
    set $P5064, _lex_param_1["latename"]
    unless_null $P5064, fallback5031
    nqp_get_sc_object $P5066, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5064, $P5066
  fallback5031:
    set $S5006, $P5064
    concat $S5005, "!!LATENAME!!", $S5006
    box $P5067, $S5005
    set $P102, $P5067
    set $P5068, $P102
  if1625_end5022:
  if1624_end5013:
    set $S5007, $P102
    isne $I5002, $S5007, ""
    unless $I5002 goto if1628_end5033 
    .const 'Sub' $P5069 = 'cuid_470_1351203235.318' 
    capture_lex $P5069
    $P5070 = $P5069()
  if1628_end5033:
.annotate 'line', 2515
    nqp_get_sc_object $P5074, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5073, $P5074, "QAST"
    get_who $P5072, $P5073
    set $P5071, $P5072["Op"]
    unless_null $P5071, fallback5067
    nqp_get_sc_object $P5075, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5071, $P5075
  fallback5067:
    $P5076 = $P5071."new"($P101, "takeclosure" :named("op"))
    set $P103, $P5076
    set $P103["sink"], $P101
    set $P103["block_past"], $P101
    set $P5077, $P101["code_obj"]
    unless_null $P5077, fallback5068
    nqp_get_sc_object $P5078, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5077, $P5078
  fallback5068:
    set $P103["code_obj"], $P5077
.annotate 'line', 2519
    _lex_param_1."!make"($P103)
    unless_null _lex_param_1, fallback5071
    nqp_get_sc_object $P5080, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5080
  fallback5071:
    set $P5079, _lex_param_1["trait"]
    unless_null $P5079, fallback5072
    nqp_get_sc_object $P5081, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5079, $P5081
  fallback5072:
    set $P5090, $P5079
    unless $P5079 goto if1641_end5070 
.annotate 'line', 2520
    unless_null _lex_param_1, fallback5073
    nqp_get_sc_object $P5086, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5086
  fallback5073:
    set $P5085, _lex_param_1["trait"]
    unless_null $P5085, fallback5074
    nqp_get_sc_object $P5087, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5085, $P5087
  fallback5074:
    set $P5082, $P5085
    iter $P5084, $P5085
  for_next5075:
    unless $P5084, for_done5077
    shift $P5089, $P5084
  for_redo5076:
    .const 'Sub' $P5088 = 'cuid_471_1351203235.318' 
    capture_lex $P5088
    $P5082 = $P5088($P5089)
    goto for_next5075
  for_done5077:
    set $P5090, $P5082
  if1641_end5070:
    .return ($P5090) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_470_1351203235.318") :anon :lex :outer("cuid_306_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2496
    .lex "$meta_meth", $P101 
    .lex "$is_dispatcher", $P102 
    .lex "$code", $P103 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P103, $P5003
.annotate 'line', 2498
    find_lex $P5004, "$past"
    find_lex $P5005, "$name"
    $P5004."name"($P5005)
    find_dynamic_lex $P5006, "$*MULTINESS"
    unless_null $P5006, fallback5036
    nqp_get_sc_object $P5009, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$MULTINESS"]
    unless_null $P5007, fallback5037
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5010
  fallback5037:
    unless_null $P5007, vivi_16305038
    die "Contextual $*MULTINESS not found"
    box $P5011, "Contextual $*MULTINESS not found"
    set $P5007, $P5011
  vivi_16305038:
    set $P5006, $P5007
  fallback5036:
    set $S5001, $P5006
    iseq $I5001, $S5001, "multi"
    unless $I5001 goto if1629_else5034 
    set $S5002, "add_multi_method"
    goto if1629_end5035
  if1629_else5034:
    set $S5002, "add_method"
  if1629_end5035:
    box $P5012, $S5002
    set $P101, $P5012
    find_dynamic_lex $P5013, "$*MULTINESS"
    unless_null $P5013, fallback5039
    nqp_get_sc_object $P5016, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$MULTINESS"]
    unless_null $P5014, fallback5040
    nqp_get_sc_object $P5017, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5014, $P5017
  fallback5040:
    unless_null $P5014, vivi_16315041
    die "Contextual $*MULTINESS not found"
    box $P5018, "Contextual $*MULTINESS not found"
    set $P5014, $P5018
  vivi_16315041:
    set $P5013, $P5014
  fallback5039:
    set $S5003, $P5013
    iseq $I5002, $S5003, "proto"
    box $P5019, $I5002
    set $P102, $P5019
.annotate 'line', 2503
    find_dynamic_lex $P5020, "$*W"
    unless_null $P5020, fallback5042
    nqp_get_sc_object $P5023, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$W"]
    unless_null $P5021, fallback5043
    nqp_get_sc_object $P5024, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5021, $P5024
  fallback5043:
    unless_null $P5021, vivi_16325044
    die "Contextual $*W not found"
    box $P5025, "Contextual $*W not found"
    set $P5021, $P5025
  vivi_16325044:
    set $P5020, $P5021
  fallback5042:
    find_lex $P5026, "$past"
    find_lex $P5027, "$name"
    $P5028 = $P5020."create_code"($P5026, $P5027, $P102)
    set $P103, $P5028
    find_dynamic_lex $P5029, "$*MULTINESS"
    unless_null $P5029, fallback5047
    nqp_get_sc_object $P5032, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["$MULTINESS"]
    unless_null $P5030, fallback5048
    nqp_get_sc_object $P5033, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5030, $P5033
  fallback5048:
    unless_null $P5030, vivi_16345049
    die "Contextual $*MULTINESS not found"
    box $P5034, "Contextual $*MULTINESS not found"
    set $P5030, $P5034
  vivi_16345049:
    set $P5029, $P5030
  fallback5047:
    set $S5004, $P5029
    iseq $I5003, $S5004, "multi"
    unless $I5003 goto if1633_end5046 
.annotate 'line', 2504
    find_lex $P5035, "$past"
    $P5036 = "&attach_multi_signature"($P103, $P5035)
  if1633_end5046:
.annotate 'line', 2505
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback5050
    nqp_get_sc_object $P5040, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback5051
    nqp_get_sc_object $P5041, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5038, $P5041
  fallback5051:
    unless_null $P5038, vivi_16355052
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_16355052:
    set $P5037, $P5038
  fallback5050:
    find_dynamic_lex $P5043, "$*PACKAGE"
    unless_null $P5043, fallback5053
    nqp_get_sc_object $P5046, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$PACKAGE"]
    unless_null $P5044, fallback5054
    nqp_get_sc_object $P5047, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5044, $P5047
  fallback5054:
    unless_null $P5044, vivi_16365055
    die "Contextual $*PACKAGE not found"
    box $P5048, "Contextual $*PACKAGE not found"
    set $P5044, $P5048
  vivi_16365055:
    set $P5043, $P5044
  fallback5053:
    find_lex $P5049, "$name"
    $P5037."pkg_add_method"($P5043, $P101, $P5049, $P103)
    find_lex $P5050, "$past"
    set $P5050["code_obj"], $P103
    find_dynamic_lex $P5051, "$*SCOPE"
    unless_null $P5051, fallback5058
    nqp_get_sc_object $P5054, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5053, $P5054
    set $P5052, $P5053["$SCOPE"]
    unless_null $P5052, fallback5059
    nqp_get_sc_object $P5055, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5052, $P5055
  fallback5059:
    unless_null $P5052, vivi_16385060
    die "Contextual $*SCOPE not found"
    box $P5056, "Contextual $*SCOPE not found"
    set $P5052, $P5056
  vivi_16385060:
    set $P5051, $P5052
  fallback5058:
    set $S5005, $P5051
    iseq $I5004, $S5005, "our"
    box $P5073, $I5004
    set $P5072, $P5073
    unless $I5004 goto if1637_end5057 
.annotate 'line', 2509
.annotate 'line', 2510
    find_dynamic_lex $P5057, "$*W"
    unless_null $P5057, fallback5061
    nqp_get_sc_object $P5060, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["$W"]
    unless_null $P5058, fallback5062
    nqp_get_sc_object $P5061, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5058, $P5061
  fallback5062:
    unless_null $P5058, vivi_16395063
    die "Contextual $*W not found"
    box $P5062, "Contextual $*W not found"
    set $P5058, $P5062
  vivi_16395063:
    set $P5057, $P5058
  fallback5061:
    find_dynamic_lex $P5063, "$*PACKAGE"
    unless_null $P5063, fallback5064
    nqp_get_sc_object $P5066, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5065, $P5066
    set $P5064, $P5065["$PACKAGE"]
    unless_null $P5064, fallback5065
    nqp_get_sc_object $P5067, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5064, $P5067
  fallback5065:
    unless_null $P5064, vivi_16405066
    die "Contextual $*PACKAGE not found"
    box $P5068, "Contextual $*PACKAGE not found"
    set $P5064, $P5068
  vivi_16405066:
    set $P5063, $P5064
  fallback5064:
    find_lex $P5069, "$name"
    find_lex $P5070, "$past"
    $P5071 = $P5057."install_package_routine"($P5063, $P5069, $P5070)
    set $P5072, $P5071
  if1637_end5057:
    .return ($P5072) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_471_1351203235.318") :anon :lex :outer("cuid_306_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2521
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_307_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2553
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5025 = 'cuid_472_1351203235.318' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_473_1351203235.318' 
    capture_lex $P5025 
    .lex "$BLOCK", $P101 
    .lex "$BLOCKINIT", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
.annotate 'line', 2554
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback5078
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback5079
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5007
  fallback5079:
    unless_null $P5004, vivi_16425080
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_16425080:
    set $P5003, $P5004
  fallback5078:
    $P5009 = $P5003."cur_lexpad"()
    set $P101, $P5009
    set $P5010, $P101[0]
    unless_null $P5010, fallback5081
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5011
  fallback5081:
    set $P102, $P5010
    unless_null _lex_param_1, fallback5084
    nqp_get_sc_object $P5013, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5013
  fallback5084:
    set $P5012, _lex_param_1["invocant"]
    unless_null $P5012, fallback5085
    nqp_get_sc_object $P5014, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5012, $P5014
  fallback5085:
    unless $P5012 goto if1643_end5083 
    .const 'Sub' $P5015 = 'cuid_472_1351203235.318' 
    capture_lex $P5015
    $P5016 = $P5015()
  if1643_end5083:
    unless_null _lex_param_1, fallback5092
    nqp_get_sc_object $P5021, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5021
  fallback5092:
    set $P5020, _lex_param_1["parameter"]
    unless_null $P5020, fallback5093
    nqp_get_sc_object $P5022, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5020, $P5022
  fallback5093:
    set $P5017, $P5020
    iter $P5019, $P5020
  for_next5094:
    unless $P5019, for_done5096
    shift $P5024, $P5019
  for_redo5095:
    .const 'Sub' $P5023 = 'cuid_473_1351203235.318' 
    capture_lex $P5023
    $P5017 = $P5023($P5024)
    goto for_next5094
  for_done5096:
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_472_1351203235.318") :anon :lex :outer("cuid_307_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2556
    .lex "$inv", $P101 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 2557
    find_lex $P5004, "$/"
    unless_null $P5004, fallback5086
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5005
  fallback5086:
    set $P5003, $P5004["invocant"]
    unless_null $P5003, fallback5087
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5006
  fallback5087:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback5088
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5007
  fallback5088:
    $P5008 = $P5002."ast"()
    set $P101, $P5008
.annotate 'line', 2558
    find_lex $P5009, "$BLOCKINIT"
    $P5009."push"($P101)
.annotate 'line', 2559
    find_lex $P5010, "$BLOCKINIT"
    nqp_get_sc_object $P5014, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5089
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5015
  fallback5089:
.annotate 'line', 2561
    nqp_get_sc_object $P5019, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback5090
    nqp_get_sc_object $P5020, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5016, $P5020
  fallback5090:
    $P5021 = $P5016."new"("self" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2562
    nqp_get_sc_object $P5025, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Var"]
    unless_null $P5022, fallback5091
    nqp_get_sc_object $P5026, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5022, $P5026
  fallback5091:
    $P5027 = $P101."name"()
    $P5028 = $P5022."new"("lexical" :named("scope"), $P5027 :named("name"))
    $P5029 = $P5011."new"($P5021, $P5028, "bind" :named("op"))
    $P5010."push"($P5029)
    find_lex $P5030, "$BLOCK"
    box $P5031, 1
    set $P5030["signature_has_invocant"], $P5031
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_473_1351203235.318") :anon :lex :outer("cuid_307_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2566
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$BLOCKINIT"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_308_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2569
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5092 = 'cuid_475_1351203235.318' 
    capture_lex $P5092 
    .lex "$quant", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    unless_null _lex_param_1, fallback5097
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5004
  fallback5097:
    set $P5003, _lex_param_1["quant"]
    unless_null $P5003, fallback5098
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5005
  fallback5098:
    set $P101, $P5003
    unless_null _lex_param_1, fallback5101
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5007
  fallback5101:
    set $P5006, _lex_param_1["named_param"]
    unless_null $P5006, fallback5102
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5008
  fallback5102:
    unless $P5006 goto if1644_else5099 
.annotate 'line', 2572
.annotate 'line', 2573
    unless_null _lex_param_1, fallback5103
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5010
  fallback5103:
    set $P5009, _lex_param_1["named_param"]
    unless_null $P5009, fallback5104
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5011
  fallback5104:
    $P5012 = $P5009."ast"()
    set $P102, $P5012
    set $S5001, $P101
    isne $I5001, $S5001, "!"
    box $P5023, $I5001
    set $P5022, $P5023
    unless $I5001 goto if1645_end5106 
.annotate 'line', 2574
.annotate 'line', 2575
    unless_null _lex_param_1, fallback5107
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5016
  fallback5107:
    set $P5015, _lex_param_1["named_param"]
    unless_null $P5015, fallback5108
    nqp_get_sc_object $P5017, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5015, $P5017
  fallback5108:
    set $P5014, $P5015["param_var"]
    unless_null $P5014, fallback5109
    nqp_get_sc_object $P5018, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5014, $P5018
  fallback5109:
    set $P5013, $P5014["sigil"]
    unless_null $P5013, fallback5110
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5013, $P5019
  fallback5110:
    $P5020 = "&default_for"($P5013)
    $P5021 = $P102."default"($P5020)
    set $P5022, $P5021
  if1645_end5106:
    goto if1644_end5100
  if1644_else5099:
.annotate 'line', 2578
.annotate 'line', 2579
    unless_null _lex_param_1, fallback5111
    nqp_get_sc_object $P5025, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5025
  fallback5111:
    set $P5024, _lex_param_1["param_var"]
    unless_null $P5024, fallback5112
    nqp_get_sc_object $P5026, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5024, $P5026
  fallback5112:
    $P5027 = $P5024."ast"()
    set $P102, $P5027
    set $S5002, $P101
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1646_else5113 
.annotate 'line', 2580
.annotate 'line', 2581
    $P102."slurpy"(1)
.annotate 'line', 2582
    unless_null _lex_param_1, fallback5115
    nqp_get_sc_object $P5030, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5030
  fallback5115:
    set $P5029, _lex_param_1["param_var"]
    unless_null $P5029, fallback5116
    nqp_get_sc_object $P5031, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5029, $P5031
  fallback5116:
    set $P5028, $P5029["sigil"]
    unless_null $P5028, fallback5117
    nqp_get_sc_object $P5032, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5028, $P5032
  fallback5117:
    set $S5003, $P5028
    iseq $I5003, $S5003, "%"
    $P5033 = $P102."named"($I5003)
    set $P5043, $P5033
    goto if1646_end5114
  if1646_else5113:
    set $S5004, $P101
    iseq $I5004, $S5004, "?"
    box $P5042, $I5004
    set $P5041, $P5042
    unless $I5004 goto if1647_end5119 
.annotate 'line', 2584
.annotate 'line', 2585
    unless_null _lex_param_1, fallback5120
    nqp_get_sc_object $P5036, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5036
  fallback5120:
    set $P5035, _lex_param_1["param_var"]
    unless_null $P5035, fallback5121
    nqp_get_sc_object $P5037, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5035, $P5037
  fallback5121:
    set $P5034, $P5035["sigil"]
    unless_null $P5034, fallback5122
    nqp_get_sc_object $P5038, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5034, $P5038
  fallback5122:
    $P5039 = "&default_for"($P5034)
    $P5040 = $P102."default"($P5039)
    set $P5041, $P5040
  if1647_end5119:
    set $P5043, $P5041
  if1646_end5114:
  if1644_end5100:
    unless_null _lex_param_1, fallback5125
    nqp_get_sc_object $P5045, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5045
  fallback5125:
    set $P5044, _lex_param_1["default_value"]
    unless_null $P5044, fallback5126
    nqp_get_sc_object $P5046, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5044, $P5046
  fallback5126:
    unless $P5044 goto if1648_end5124 
.annotate 'line', 2588
    set $S5005, $P101
    iseq $I5005, $S5005, "*"
    unless $I5005 goto if1649_end5128 
.annotate 'line', 2589
.annotate 'line', 2590
    $P5047 = _lex_param_1."CURSOR"()
    $P5048 = $P5047."panic"("Can't put default on slurpy parameter")
  if1649_end5128:
    set $S5006, $P101
    iseq $I5006, $S5006, "!"
    unless $I5006 goto if1650_end5130 
.annotate 'line', 2592
.annotate 'line', 2593
    $P5049 = _lex_param_1."CURSOR"()
    $P5050 = $P5049."panic"("Can't put default on required parameter")
  if1650_end5130:
.annotate 'line', 2595
    unless_null _lex_param_1, fallback5131
    nqp_get_sc_object $P5054, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5054
  fallback5131:
    set $P5053, _lex_param_1["default_value"]
    unless_null $P5053, fallback5132
    nqp_get_sc_object $P5055, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5053, $P5055
  fallback5132:
    set $P5052, $P5053[0]
    unless_null $P5052, fallback5133
    nqp_get_sc_object $P5056, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5052, $P5056
  fallback5133:
    set $P5051, $P5052["EXPR"]
    unless_null $P5051, fallback5134
    nqp_get_sc_object $P5057, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5051, $P5057
  fallback5134:
    $P5058 = $P5051."ast"()
    $P5059 = $P102."default"($P5058)
  if1648_end5124:
.annotate 'line', 2597
    $P5060 = $P102."default"()
    if $P5060 goto unless1651_end5136 
    find_dynamic_lex $P5061, "$*W"
    unless_null $P5061, fallback5137
    nqp_get_sc_object $P5064, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5063, $P5064
    set $P5062, $P5063["$W"]
    unless_null $P5062, fallback5138
    nqp_get_sc_object $P5065, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5062, $P5065
  fallback5138:
    unless_null $P5062, vivi_16525139
    die "Contextual $*W not found"
    box $P5066, "Contextual $*W not found"
    set $P5062, $P5066
  vivi_16525139:
    set $P5061, $P5062
  fallback5137:
    $P5067 = $P5061."cur_lexpad"()
    find_dynamic_lex $P5068, "$*W"
    unless_null $P5068, fallback5140
    nqp_get_sc_object $P5071, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5070, $P5071
    set $P5069, $P5070["$W"]
    unless_null $P5069, fallback5141
    nqp_get_sc_object $P5072, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5069, $P5072
  fallback5141:
    unless_null $P5069, vivi_16535142
    die "Contextual $*W not found"
    box $P5073, "Contextual $*W not found"
    set $P5069, $P5073
  vivi_16535142:
    set $P5068, $P5069
  fallback5140:
    $P5074 = $P5068."cur_lexpad"()
    $P5075 = $P5074."arity"()
    set $N5002, $P5075
    set $N5003, 1
    add $N5001, $N5002, $N5003
    $P5076 = $P5067."arity"($N5001)
  unless1651_end5136:
    unless_null _lex_param_1, fallback5145
    nqp_get_sc_object $P5078, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5078
  fallback5145:
    set $P5077, _lex_param_1["typename"]
    unless_null $P5077, fallback5146
    nqp_get_sc_object $P5079, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5077, $P5079
  fallback5146:
    unless $P5077 goto if1654_end5144 
    .const 'Sub' $P5080 = 'cuid_475_1351203235.318' 
    capture_lex $P5080
    $P5081 = $P5080()
  if1654_end5144:
    unless_null _lex_param_1, fallback5163
    nqp_get_sc_object $P5083, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5083
  fallback5163:
    set $P5082, _lex_param_1["definedness"]
    unless_null $P5082, fallback5164
    nqp_get_sc_object $P5084, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5082, $P5084
  fallback5164:
    unless $P5082 goto if1659_end5162 
.annotate 'line', 2612
    unless_null _lex_param_1, fallback5165
    nqp_get_sc_object $P5087, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5087
  fallback5165:
    set $P5086, _lex_param_1["definedness"]
    unless_null $P5086, fallback5166
    nqp_get_sc_object $P5088, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5086, $P5088
  fallback5166:
    set $P5085, $P5086[0]
    unless_null $P5085, fallback5167
    nqp_get_sc_object $P5089, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5085, $P5089
  fallback5167:
    set $S5007, $P5085
    box $P5090, $S5007
    set $P102["definedness"], $P5090
  if1659_end5162:
.annotate 'line', 2616
    $P5091 = _lex_param_1."!make"($P102)
    .return ($P5091) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_475_1351203235.318") :anon :lex :outer("cuid_308_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2600
    .const 'Sub' $P5015 = 'cuid_474_1351203235.318' 
    capture_lex $P5015 
    .lex "$type", $P101 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 2601
    find_lex $P5004, "$/"
    unless_null $P5004, fallback5147
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5005
  fallback5147:
    set $P5003, $P5004["typename"]
    unless_null $P5003, fallback5148
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5006
  fallback5148:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback5149
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5007
  fallback5149:
    $P5008 = $P5002."ast"()
    $P5009 = $P5008."value"()
    set $P101, $P5009
.annotate 'line', 2602
    find_lex $P5010, "$past"
    $P5010."returns"($P101)
    repr_get_primitive_type_spec $I5001, $P101
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto if1655_end5151 
    .const 'Sub' $P5011 = 'cuid_474_1351203235.318' 
    capture_lex $P5011
    $P5012 = $P5011($P5014)
    set $P5013, $P5012
  if1655_end5151:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_474_1351203235.318") :anon :lex :outer("cuid_475_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2603
    .param pmc _lex_param_0 
    .lex "$prim", _lex_param_0 
.annotate 'line', 2604
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5152
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5153
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5005
  fallback5153:
    unless_null $P5002, vivi_16565154
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16565154:
    set $P5001, $P5002
  fallback5152:
    $P5007 = $P5001."cur_lexpad"()
    find_lex $P5008, "$past"
    $P5009 = $P5008."name"()
    find_lex $P5010, "$type"
    $P5007."symbol"($P5009, $P5010 :named("type"))
.annotate 'line', 2605
    find_lex $P5011, "$past"
    $P5012 = $P5011."default"()
    set $P5017, $P5012
    unless $P5012 goto if1658_end5158 
    find_lex $P5014, "$/"
    unless_null $P5014, fallback5159
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5014, $P5015
  fallback5159:
    set $P5013, $P5014["default_value"]
    unless_null $P5013, fallback5160
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5013, $P5016
  fallback5160:
    isfalse $I5001, $P5013
    box $P5018, $I5001
    set $P5017, $P5018
  if1658_end5158:
    set $P5022, $P5017
    unless $P5017 goto if1657_end5156 
.annotate 'line', 2606
    find_lex $P5019, "$past"
    $P5020 = "&default_value_for_prim"(_lex_param_0)
    $P5021 = $P5019."default"($P5020)
    set $P5022, $P5021
  if1657_end5156:
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_309_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2619
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    set $S5001, _lex_param_1
    box $P5003, $S5001
    set $P101, $P5003
.annotate 'line', 2621
    nqp_get_sc_object $P5007, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback5168
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5008
  fallback5168:
    $P5009 = $P5004."new"($P101 :named("name"), "lexical" :named("scope"), "param" :named("decl"), _lex_param_1 :named("node"))
    set $P102, $P5009
.annotate 'line', 2623
    find_dynamic_lex $P5010, "$*W"
    unless_null $P5010, fallback5169
    nqp_get_sc_object $P5013, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$W"]
    unless_null $P5011, fallback5170
    nqp_get_sc_object $P5014, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5014
  fallback5170:
    unless_null $P5011, vivi_16605171
    die "Contextual $*W not found"
    box $P5015, "Contextual $*W not found"
    set $P5011, $P5015
  vivi_16605171:
    set $P5010, $P5011
  fallback5169:
    $P5016 = $P5010."cur_lexpad"()
    $P5016."symbol"($P101, "lexical" :named("scope"))
.annotate 'line', 2624
    $P5017 = _lex_param_1."!make"($P102)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_310_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2627
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 2628
    unless_null _lex_param_1, fallback5172
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5003
  fallback5172:
    set $P5002, _lex_param_1["param_var"]
    unless_null $P5002, fallback5173
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5004
  fallback5173:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2629
    unless_null _lex_param_1, fallback5174
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5008
  fallback5174:
    set $P5007, _lex_param_1["param_var"]
    unless_null $P5007, fallback5175
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5009
  fallback5175:
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback5176
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5010
  fallback5176:
    set $S5001, $P5006
    $P101."named"($S5001)
.annotate 'line', 2630
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_311_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2633
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5017 = 'cuid_476_1351203235.318' 
    capture_lex $P5017 
    .lex "@name", $P101 
    .lex "$found", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
.annotate 'line', 2637
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5005, $P5006, "HLL"
    get_who $P5004, $P5005
    set $P5003, $P5004["Compiler"]
    unless_null $P5003, fallback5177
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5007
  fallback5177:
    set $S5001, _lex_param_1
    $P5008 = $P5003."parse_name"($S5001)
    set $P101, $P5008
    box $P5009, 0
    set $P102, $P5009
    new $P5012, 'ExceptionHandler'
    set_label $P5012, catch_handler_16635183
    $P5012.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5012
    .const 'Sub' $P5010 = 'cuid_476_1351203235.318' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5013, $P5011
    pop_eh 
    goto skip_handler_16625182
  catch_handler_16635183:
    .get_results ($P5012) 
    set $I10001, 1
    set $P5012["handled"], $I10001
    nqp_get_sc_object $P10001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    finalize $P5012
    pop_upto_eh $P5012
    pop_eh 
    set $P5013, $P10001
    goto skip_handler_16625182
  skip_handler_16625182:
    set $P5016, $P102
    if $P102 goto unless1664_end5185 
.annotate 'line', 2644
.annotate 'line', 2645
    $P5014 = _lex_param_1."CURSOR"()
    set $S5004, _lex_param_1
    concat $S5003, "Use of undeclared type '", $S5004
    concat $S5002, $S5003, "'"
    $P5015 = $P5014."panic"($S5002)
    set $P5016, $P5015
  unless1664_end5185:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_476_1351203235.318") :anon :lex :outer("cuid_311_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2639
    .lex "$sym", $P101 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 2640
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback5178
    nqp_get_sc_object $P5005, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback5179
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5006
  fallback5179:
    unless_null $P5003, vivi_16615180
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_16615180:
    set $P5002, $P5003
  fallback5178:
    find_lex $P5008, "@name"
    $P5009 = $P5002."find_sym"($P5008)
    set $P101, $P5009
.annotate 'line', 2641
    find_dynamic_lex $P5010, "$/"
    nqp_get_sc_object $P5014, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["WVal"]
    unless_null $P5011, fallback5181
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5015
  fallback5181:
    $P5016 = $P5011."new"($P101 :named("value"))
    $P5010."!make"($P5016)
    box $P5017, 1
    store_lex "$found", $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_312_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2649
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2650
    unless_null _lex_param_1, fallback5186
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback5186:
    set $P5001, _lex_param_1["trait_mod"]
    unless_null $P5001, fallback5187
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback5187:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_313_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2653
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5025 = 'cuid_478_1351203235.318' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_480_1351203235.318' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_481_1351203235.318' 
    capture_lex $P5025 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5190
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback5190:
    set $P5001, _lex_param_1["longname"]
    unless_null $P5001, fallback5191
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback5191:
    set $S5001, $P5001
    iseq $I5001, $S5001, "parrot_vtable"
    unless $I5001 goto if1665_else5188 
    .const 'Sub' $P5004 = 'cuid_478_1351203235.318' 
    capture_lex $P5004
    $P5005 = $P5004()
    set $P5024, $P5005
    goto if1665_end5189
  if1665_else5188:
    unless_null _lex_param_1, fallback5215
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5007
  fallback5215:
    set $P5006, _lex_param_1["longname"]
    unless_null $P5006, fallback5216
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5008
  fallback5216:
    set $S5002, $P5006
    iseq $I5002, $S5002, "parrot_vtable_handler"
    unless $I5002 goto if1671_else5213 
    .const 'Sub' $P5009 = 'cuid_480_1351203235.318' 
    capture_lex $P5009
    $P5010 = $P5009()
    set $P5023, $P5010
    goto if1671_end5214
  if1671_else5213:
    unless_null _lex_param_1, fallback5232
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5012
  fallback5232:
    set $P5011, _lex_param_1["longname"]
    unless_null $P5011, fallback5233
    nqp_get_sc_object $P5013, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5013
  fallback5233:
    set $S5003, $P5011
    iseq $I5003, $S5003, "export"
    unless $I5003 goto if1675_else5230 
.annotate 'line', 2679
.annotate 'line', 2680
    .const 'Sub' $P5015 = 'cuid_481_1351203235.318' 
    capture_lex $P5015
    newclosure $P5014, $P5015
    $P5016 = _lex_param_1."!make"($P5014)
    set $P5022, $P5016
    goto if1675_end5231
  if1675_else5230:
.annotate 'line', 2687
.annotate 'line', 2688
    $P5017 = _lex_param_1."CURSOR"()
    unless_null _lex_param_1, fallback5245
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5019
  fallback5245:
    set $P5018, _lex_param_1["longname"]
    unless_null $P5018, fallback5246
    nqp_get_sc_object $P5020, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5018, $P5020
  fallback5246:
    set $S5006, $P5018
    concat $S5005, "Trait '", $S5006
    concat $S5004, $S5005, "' not implemented"
    $P5021 = $P5017."panic"($S5004)
    set $P5022, $P5021
  if1675_end5231:
    set $P5023, $P5022
  if1671_end5214:
    set $P5024, $P5023
  if1665_end5189:
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_478_1351203235.318") :anon :lex :outer("cuid_313_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2654
    .const 'Sub' $P5039 = 'cuid_477_1351203235.318' 
    capture_lex $P5039 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    .lex "$is_dispatcher", $P104 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P103, $P5003
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P104, $P5004
.annotate 'line', 2656
    find_lex $P5007, "$/"
    unless_null $P5007, fallback5192
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5008
  fallback5192:
    set $P5006, $P5007["circumfix"]
    unless_null $P5006, fallback5193
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5009
  fallback5193:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5194
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5005, $P5010
  fallback5194:
    $P5011 = $P5005."ast"()
    set $P101, $P5011
.annotate 'line', 2658
    nqp_get_sc_object $P5015, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["SVal"]
    unless_null $P5012, fallback5197
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5012, $P5016
  fallback5197:
    $P5017 = $P5012."ACCEPTS"($P101)
    if $P5017 goto unless1666_end5196 
.annotate 'line', 2657
    find_lex $P5018, "$/"
    $P5019 = $P5018."CURSOR"()
    $P5020 = $P5019."panic"("Trait 'parrot_vtable' requires constant scalar argument")
  unless1666_end5196:
.annotate 'line', 2659
    $P5021 = $P101."value"()
    set $P102, $P5021
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback5198
    nqp_get_sc_object $P5025, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback5199
    nqp_get_sc_object $P5026, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5023, $P5026
  fallback5199:
    unless_null $P5023, vivi_16675200
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_16675200:
    set $P5022, $P5023
  fallback5198:
    set $P103, $P5022
    find_dynamic_lex $P5028, "$*SCOPE"
    unless_null $P5028, fallback5201
    nqp_get_sc_object $P5031, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["$SCOPE"]
    unless_null $P5029, fallback5202
    nqp_get_sc_object $P5032, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5029, $P5032
  fallback5202:
    unless_null $P5029, vivi_16685203
    die "Contextual $*SCOPE not found"
    box $P5033, "Contextual $*SCOPE not found"
    set $P5029, $P5033
  vivi_16685203:
    set $P5028, $P5029
  fallback5201:
    set $S5001, $P5028
    iseq $I5001, $S5001, "proto"
    box $P5034, $I5001
    set $P104, $P5034
.annotate 'line', 2662
    find_dynamic_lex $P5035, "$/"
    .const 'Sub' $P5037 = 'cuid_477_1351203235.318' 
    capture_lex $P5037
    newclosure $P5036, $P5037
    $P5038 = $P5035."!make"($P5036)
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_477_1351203235.318") :anon :lex :outer("cuid_478_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2662
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2663
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5204
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5205
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5005
  fallback5205:
    unless_null $P5002, vivi_16695206
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16695206:
    set $P5001, $P5002
  fallback5204:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
.annotate 'line', 2664
    $P5011 = _lex_param_0."ast"()
    set $P5010, $P5011["code_obj"]
    unless_null $P5010, fallback5208
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5012
  fallback5208:
    set $P5009, $P5010
    defined $I5001, $P5009
    if $I5001, defor5207
.annotate 'line', 2665
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback5209
    nqp_get_sc_object $P5016, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback5210
    nqp_get_sc_object $P5017, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5014, $P5017
  fallback5210:
    unless_null $P5014, vivi_16705211
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_16705211:
    set $P5013, $P5014
  fallback5209:
    $P5020 = _lex_param_0."ast"()
    set $P5019, $P5020["block_past"]
    unless_null $P5019, fallback5212
    nqp_get_sc_object $P5021, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5019, $P5021
  fallback5212:
    find_lex $P5022, "$name"
    find_lex $P5023, "$is_dispatcher"
    $P5024 = $P5013."create_code"($P5019, $P5022, $P5023)
    set $P5009, $P5024
  defor5207:
    $P5025 = $P5001."pkg_add_method"($P5007, "add_parrot_vtable_mapping", $P5008, $P5009)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_480_1351203235.318") :anon :lex :outer("cuid_313_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2668
    .const 'Sub' $P5031 = 'cuid_479_1351203235.318' 
    capture_lex $P5031 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P103, $P5003
.annotate 'line', 2670
    find_lex $P5006, "$/"
    unless_null $P5006, fallback5217
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5007
  fallback5217:
    set $P5005, $P5006["circumfix"]
    unless_null $P5005, fallback5218
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5005, $P5008
  fallback5218:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback5219
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5009
  fallback5219:
    $P5010 = $P5004."ast"()
    set $P101, $P5010
.annotate 'line', 2672
    nqp_get_sc_object $P5014, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5222
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5015
  fallback5222:
    $P5016 = $P5011."ACCEPTS"($P101)
    if $P5016 goto unless1672_end5221 
.annotate 'line', 2671
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    $P5019 = $P5018."panic"("Trait 'parrot_vtable_handler' requires constant scalar argument")
  unless1672_end5221:
.annotate 'line', 2673
    $P5020 = $P101."value"()
    set $P102, $P5020
    find_dynamic_lex $P5021, "$*PACKAGE"
    unless_null $P5021, fallback5223
    nqp_get_sc_object $P5024, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["$PACKAGE"]
    unless_null $P5022, fallback5224
    nqp_get_sc_object $P5025, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5022, $P5025
  fallback5224:
    unless_null $P5022, vivi_16735225
    die "Contextual $*PACKAGE not found"
    box $P5026, "Contextual $*PACKAGE not found"
    set $P5022, $P5026
  vivi_16735225:
    set $P5021, $P5022
  fallback5223:
    set $P103, $P5021
.annotate 'line', 2675
    find_dynamic_lex $P5027, "$/"
    .const 'Sub' $P5029 = 'cuid_479_1351203235.318' 
    capture_lex $P5029
    newclosure $P5028, $P5029
    $P5030 = $P5027."!make"($P5028)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_479_1351203235.318") :anon :lex :outer("cuid_480_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2675
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2676
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5226
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5227
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5005
  fallback5227:
    unless_null $P5002, vivi_16745228
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16745228:
    set $P5001, $P5002
  fallback5226:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
    set $P5009, _lex_param_0["variable"]
    unless_null $P5009, fallback5229
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5010
  fallback5229:
    set $S5001, $P5009
    $P5011 = $P5001."pkg_add_parrot_vtable_handler_mapping"($P5007, $P5008, $S5001)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_481_1351203235.318") :anon :lex :outer("cuid_313_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2680
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$name", $P102 
    .lex "$match", _lex_param_0 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
.annotate 'line', 2681
    $P5003 = _lex_param_0."ast"()
    set $P101, $P5003
.annotate 'line', 2682
    set $P5004, $P101["block_past"]
    unless_null $P5004, fallback5234
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5005
  fallback5234:
    $P5006 = $P5004."name"()
    set $P102, $P5006
    find_dynamic_lex $P5010, "$*EXPORT"
    unless_null $P5010, fallback5235
    nqp_get_sc_object $P5013, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$EXPORT"]
    unless_null $P5011, fallback5236
    nqp_get_sc_object $P5014, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5014
  fallback5236:
    unless_null $P5011, vivi_16765237
    die "Contextual $*EXPORT not found"
    box $P5015, "Contextual $*EXPORT not found"
    set $P5011, $P5015
  vivi_16765237:
    set $P5010, $P5011
  fallback5235:
    get_who $P5009, $P5010
    set $P5008, $P5009["DEFAULT"]
    unless_null $P5008, fallback5238
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5016
  fallback5238:
    get_who $P5007, $P5008
    set $S5002, $P102
    concat $S5001, "&", $S5002
    set $P5018, $P101["code_obj"]
    unless_null $P5018, fallback5240
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5018, $P5019
  fallback5240:
    set $P5017, $P5018
    defined $I5001, $P5017
    if $I5001, defor5239
.annotate 'line', 2684
    find_dynamic_lex $P5020, "$*W"
    unless_null $P5020, fallback5241
    nqp_get_sc_object $P5023, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$W"]
    unless_null $P5021, fallback5242
    nqp_get_sc_object $P5024, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5021, $P5024
  fallback5242:
    unless_null $P5021, vivi_16775243
    die "Contextual $*W not found"
    box $P5025, "Contextual $*W not found"
    set $P5021, $P5025
  vivi_16775243:
    set $P5020, $P5021
  fallback5241:
    set $P5026, $P101["block_past"]
    unless_null $P5026, fallback5244
    nqp_get_sc_object $P5027, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5026, $P5027
  fallback5244:
    $P5028 = $P5020."create_code"($P5026, $P102, 0)
    set $P5017, $P5028
  defor5239:
    set $P5007[$S5001], $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_314_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2692
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_5 :opt_flag 
    .const 'Sub' $P5074 = 'cuid_483_1351203235.318' 
    capture_lex $P5074 
    if haz_param_5, default5327
    nqp_get_sc_object $P5073, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_2, $P5073
  default5327:
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    unless_null _lex_param_1, fallback5249
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5004
  fallback5249:
    set $P5003, _lex_param_1["deflongname"]
    unless_null $P5003, fallback5250
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5005
  fallback5250:
    unless $P5003 goto if1678_else5247 
.annotate 'line', 2694
.annotate 'line', 2695
    unless_null _lex_param_1, fallback5251
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5007
  fallback5251:
    set $P5006, _lex_param_1["deflongname"]
    unless_null $P5006, fallback5252
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5008
  fallback5252:
    $P5009 = $P5006."ast"()
    set $S5001, $P5009
    box $P5010, $S5001
    set $P101, $P5010
    goto if1678_end5248
  if1678_else5247:
.annotate 'line', 2697
    find_dynamic_lex $P5011, "$*PKGDECL"
    unless_null $P5011, fallback5255
    nqp_get_sc_object $P5014, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$PKGDECL"]
    unless_null $P5012, fallback5256
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5012, $P5015
  fallback5256:
    unless_null $P5012, vivi_16805257
    die "Contextual $*PKGDECL not found"
    box $P5016, "Contextual $*PKGDECL not found"
    set $P5012, $P5016
  vivi_16805257:
    set $P5011, $P5012
  fallback5255:
    set $S5002, $P5011
    isne $I5001, $S5002, "role"
    unless $I5001 goto if1679_end5254 
.annotate 'line', 2698
.annotate 'line', 2699
    $P5017 = _lex_param_1."CURSOR"()
    $P5018 = $P5017."panic"("Late-bound method name only valid in role")
  if1679_end5254:
    unless_null _lex_param_1, fallback5258
    nqp_get_sc_object $P5020, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5020
  fallback5258:
    set $P5019, _lex_param_1["latename"]
    unless_null $P5019, fallback5259
    nqp_get_sc_object $P5021, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5019, $P5021
  fallback5259:
    set $S5004, $P5019
    concat $S5003, "!!LATENAME!!", $S5004
    box $P5022, $S5003
    set $P101, $P5022
  if1678_end5248:
    unless_null _lex_param_1, fallback5262
    nqp_get_sc_object $P5024, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5024
  fallback5262:
    set $P5023, _lex_param_1["proto"]
    unless_null $P5023, fallback5263
    nqp_get_sc_object $P5025, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5023, $P5025
  fallback5263:
    unless $P5023 goto if1681_else5260 
.annotate 'line', 2704
.annotate 'line', 2705
    nqp_get_sc_object $P5029, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Block"]
    unless_null $P5026, fallback5264
    nqp_get_sc_object $P5030, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5026, $P5030
  fallback5264:
.annotate 'line', 2707
    nqp_get_sc_object $P5034, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Op"]
    unless_null $P5031, fallback5265
    nqp_get_sc_object $P5035, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5031, $P5035
  fallback5265:
.annotate 'line', 2708
    nqp_get_sc_object $P5039, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Var"]
    unless_null $P5036, fallback5266
    nqp_get_sc_object $P5040, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5036, $P5040
  fallback5266:
    $P5041 = $P5036."new"("self" :named("name"), "local" :named("scope"), "param" :named("decl"))
.annotate 'line', 2709
    nqp_get_sc_object $P5045, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["SVal"]
    unless_null $P5042, fallback5267
    nqp_get_sc_object $P5046, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5042, $P5046
  fallback5267:
    $P5047 = $P5042."new"($P101 :named("value"))
    $P5048 = $P5031."new"($P5041, $P5047, "!protoregex" :named("name"), "callmethod" :named("op"))
    $P5049 = $P5026."new"($P5048, $P101 :named("name"), "declaration" :named("blocktype"), _lex_param_1 :named("node"))
    set $P102, $P5049
.annotate 'line', 2716
    find_dynamic_lex $P5050, "$*W"
    unless_null $P5050, fallback5268
    nqp_get_sc_object $P5053, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5052, $P5053
    set $P5051, $P5052["$W"]
    unless_null $P5051, fallback5269
    nqp_get_sc_object $P5054, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5051, $P5054
  fallback5269:
    unless_null $P5051, vivi_16825270
    die "Contextual $*W not found"
    box $P5055, "Contextual $*W not found"
    set $P5051, $P5055
  vivi_16825270:
    set $P5050, $P5051
  fallback5268:
    find_dynamic_lex $P5056, "$*PACKAGE"
    unless_null $P5056, fallback5271
    nqp_get_sc_object $P5059, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["$PACKAGE"]
    unless_null $P5057, fallback5272
    nqp_get_sc_object $P5060, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5057, $P5060
  fallback5272:
    unless_null $P5057, vivi_16835273
    die "Contextual $*PACKAGE not found"
    box $P5061, "Contextual $*PACKAGE not found"
    set $P5057, $P5061
  vivi_16835273:
    set $P5056, $P5057
  fallback5271:
.annotate 'line', 2717
    find_dynamic_lex $P5062, "$*W"
    unless_null $P5062, fallback5274
    nqp_get_sc_object $P5065, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$W"]
    unless_null $P5063, fallback5275
    nqp_get_sc_object $P5066, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5063, $P5066
  fallback5275:
    unless_null $P5063, vivi_16845276
    die "Contextual $*W not found"
    box $P5067, "Contextual $*W not found"
    set $P5063, $P5067
  vivi_16845276:
    set $P5062, $P5063
  fallback5274:
    $P5068 = $P5062."create_code"($P102, $P101, 0, "NQPRegex" :named("code_type_name"))
    $P5069 = $P5050."pkg_add_method"($P5056, "add_method", $P101, $P5068)
    goto if1681_end5261
  if1681_else5260:
    .const 'Sub' $P5070 = 'cuid_483_1351203235.318' 
    capture_lex $P5070
    $P5071 = $P5070()
  if1681_end5261:
.annotate 'line', 2756
    $P5072 = _lex_param_1."!make"($P102)
    .return ($P5072) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_483_1351203235.318") :anon :lex :outer("cuid_314_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2719
    .const 'Sub' $P5130 = 'cuid_482_1351203235.318' 
    capture_lex $P5130 
    .lex "$block", $P101 
    .lex "$code", $P102 
    .lex "$regex", $P103 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P103, $P5003
.annotate 'line', 2720
    find_dynamic_lex $P5004, "$*W"
    unless_null $P5004, fallback5277
    nqp_get_sc_object $P5007, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$W"]
    unless_null $P5005, fallback5278
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5005, $P5008
  fallback5278:
    unless_null $P5005, vivi_16855279
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5005, $P5009
  vivi_16855279:
    set $P5004, $P5005
  fallback5277:
    $P5010 = $P5004."pop_lexpad"()
    set $P101, $P5010
.annotate 'line', 2721
    set $P5011, $P101[0]
    unless_null $P5011, fallback5280
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5012
  fallback5280:
    nqp_get_sc_object $P5016, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback5281
    nqp_get_sc_object $P5017, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5013, $P5017
  fallback5281:
    $P5018 = $P5013."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5011."unshift"($P5018)
.annotate 'line', 2722
    set $P5019, $P101[0]
    unless_null $P5019, fallback5282
    nqp_get_sc_object $P5020, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5019, $P5020
  fallback5282:
    nqp_get_sc_object $P5024, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5283
    nqp_get_sc_object $P5025, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5021, $P5025
  fallback5283:
.annotate 'line', 2724
    nqp_get_sc_object $P5029, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5284
    nqp_get_sc_object $P5030, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5026, $P5030
  fallback5284:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2725
    nqp_get_sc_object $P5035, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback5285
    nqp_get_sc_object $P5036, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5032, $P5036
  fallback5285:
    $P5037 = $P5032."new"("self" :named("name"), "lexical" :named("scope"))
    $P5038 = $P5021."new"($P5031, $P5037, "bind" :named("op"))
    $P5019."push"($P5038)
.annotate 'line', 2726
    set $P5039, $P101[0]
    unless_null $P5039, fallback5286
    nqp_get_sc_object $P5040, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5039, $P5040
  fallback5286:
    nqp_get_sc_object $P5044, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback5287
    nqp_get_sc_object $P5045, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5041, $P5045
  fallback5287:
    $P5046 = $P5041."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5039."push"($P5046)
.annotate 'line', 2727
    set $P5047, $P101[0]
    unless_null $P5047, fallback5288
    nqp_get_sc_object $P5048, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5047, $P5048
  fallback5288:
    nqp_get_sc_object $P5052, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Var"]
    unless_null $P5049, fallback5289
    nqp_get_sc_object $P5053, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5049, $P5053
  fallback5289:
    $P5054 = $P5049."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5047."push"($P5054)
.annotate 'line', 2728
    $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2729
    $P101."symbol"("$/", "lexical" :named("scope"))
    find_dynamic_lex $P5056, "%*RX"
    unless_null $P5056, fallback5290
    nqp_get_sc_object $P5059, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["%RX"]
    unless_null $P5057, fallback5291
    nqp_get_sc_object $P5061, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5060, $P5061
    new $P5062, 'Hash'
    set $P5060["%RX"], $P5062
    set $P5057, $P5062
  fallback5291:
    unless_null $P5057, vivi_16865292
    die "Contextual %*RX not found"
    box $P5063, "Contextual %*RX not found"
    set $P5057, $P5063
  vivi_16865292:
    set $P5056, $P5057
  fallback5290:
    set $P5055, $P5056["code"]
    unless_null $P5055, fallback5293
    nqp_get_sc_object $P5064, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5055, $P5064
  fallback5293:
    set $P102, $P5055
.annotate 'line', 2731
    find_dynamic_lex $P5066, "%*LANG"
    unless_null $P5066, fallback5294
    nqp_get_sc_object $P5069, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5068, $P5069
    set $P5067, $P5068["%LANG"]
    unless_null $P5067, fallback5295
    nqp_get_sc_object $P5071, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5070, $P5071
    new $P5072, 'Hash'
    set $P5070["%LANG"], $P5072
    set $P5067, $P5072
  fallback5295:
    unless_null $P5067, vivi_16875296
    die "Contextual %*LANG not found"
    box $P5073, "Contextual %*LANG not found"
    set $P5067, $P5073
  vivi_16875296:
    set $P5066, $P5067
  fallback5294:
    set $P5065, $P5066["Regex-actions"]
    unless_null $P5065, fallback5297
    nqp_get_sc_object $P5074, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5065, $P5074
  fallback5297:
    find_lex $P5076, "$/"
    unless_null $P5076, fallback5298
    nqp_get_sc_object $P5077, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5076, $P5077
  fallback5298:
    set $P5075, $P5076["p6regex"]
    unless_null $P5075, fallback5299
    nqp_get_sc_object $P5078, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5075, $P5078
  fallback5299:
    $P5079 = $P5075."ast"()
    $P5080 = $P5065."qbuildsub"($P5079, $P101, $P102 :named("code_obj"))
    set $P103, $P5080
.annotate 'line', 2732
    find_lex $P5081, "$name"
    $P103."name"($P5081)
    find_dynamic_lex $P5082, "$*PKGDECL"
    unless_null $P5082, fallback5304
    nqp_get_sc_object $P5085, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["$PKGDECL"]
    unless_null $P5083, fallback5305
    nqp_get_sc_object $P5086, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5083, $P5086
  fallback5305:
    unless_null $P5083, vivi_16905306
    die "Contextual $*PKGDECL not found"
    box $P5087, "Contextual $*PKGDECL not found"
    set $P5083, $P5087
  vivi_16905306:
    set $P5082, $P5083
  fallback5304:
    set $P5095, $P5082
    unless $P5082 goto if1689_end5303 
    find_dynamic_lex $P5089, "$*PACKAGE"
    unless_null $P5089, fallback5307
    nqp_get_sc_object $P5092, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5091, $P5092
    set $P5090, $P5091["$PACKAGE"]
    unless_null $P5090, fallback5308
    nqp_get_sc_object $P5093, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5090, $P5093
  fallback5308:
    unless_null $P5090, vivi_16915309
    die "Contextual $*PACKAGE not found"
    box $P5094, "Contextual $*PACKAGE not found"
    set $P5090, $P5094
  vivi_16915309:
    set $P5089, $P5090
  fallback5307:
    get_how $P5088, $P5089
    can $I5001, $P5088, "add_method"
    box $P5096, $I5001
    set $P5095, $P5096
  if1689_end5303:
    unless $P5095 goto if1688_end5301 
.annotate 'line', 2734
.annotate 'line', 2736
    find_dynamic_lex $P5097, "$*W"
    unless_null $P5097, fallback5310
    nqp_get_sc_object $P5100, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5099, $P5100
    set $P5098, $P5099["$W"]
    unless_null $P5098, fallback5311
    nqp_get_sc_object $P5101, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5098, $P5101
  fallback5311:
    unless_null $P5098, vivi_16925312
    die "Contextual $*W not found"
    box $P5102, "Contextual $*W not found"
    set $P5098, $P5102
  vivi_16925312:
    set $P5097, $P5098
  fallback5310:
    find_dynamic_lex $P5103, "$*PACKAGE"
    unless_null $P5103, fallback5313
    nqp_get_sc_object $P5106, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5105, $P5106
    set $P5104, $P5105["$PACKAGE"]
    unless_null $P5104, fallback5314
    nqp_get_sc_object $P5107, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5104, $P5107
  fallback5314:
    unless_null $P5104, vivi_16935315
    die "Contextual $*PACKAGE not found"
    box $P5108, "Contextual $*PACKAGE not found"
    set $P5104, $P5108
  vivi_16935315:
    set $P5103, $P5104
  fallback5313:
    find_lex $P5109, "$name"
    $P5110 = $P5097."pkg_add_method"($P5103, "add_method", $P5109, $P102)
  if1688_end5301:
    find_dynamic_lex $P5111, "$*PKGDECL"
    unless_null $P5111, fallback5318
    nqp_get_sc_object $P5114, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5113, $P5114
    set $P5112, $P5113["$PKGDECL"]
    unless_null $P5112, fallback5319
    nqp_get_sc_object $P5115, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5112, $P5115
  fallback5319:
    unless_null $P5112, vivi_16955320
    die "Contextual $*PKGDECL not found"
    box $P5116, "Contextual $*PKGDECL not found"
    set $P5112, $P5116
  vivi_16955320:
    set $P5111, $P5112
  fallback5318:
    set $S5001, $P5111
    iseq $I5002, $S5001, "role"
    unless $I5002 goto if1694_end5317 
    .const 'Sub' $P5117 = 'cuid_482_1351203235.318' 
    capture_lex $P5117
    $P5118 = $P5117()
  if1694_end5317:
.annotate 'line', 2750
    nqp_get_sc_object $P5122, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5121, $P5122, "QAST"
    get_who $P5120, $P5121
    set $P5119, $P5120["Op"]
    unless_null $P5119, fallback5326
    nqp_get_sc_object $P5123, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5119, $P5123
  fallback5326:
.annotate 'line', 2752
    new $P5124, 'ResizablePMCArray'
    box $P5125, "NQPRegexMethod"
    push $P5124, $P5125
    find_lex $P5126, "$/"
    $P5127 = "&lexical_package_lookup"($P5124, $P5126)
    $P5128 = $P5119."new"($P5127, $P103, "callmethod" :named("op"), "new" :named("name"))
    store_lex "$past", $P5128
    find_lex $P5129, "$past"
    set $P5129["sink"], $P103
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_482_1351203235.318") :anon :lex :outer("cuid_483_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2741
    .lex "$gen_nfa", $P101 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 2742
    nqp_get_sc_object $P5005, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5004, $P5005, "QRegex"
    get_who $P5003, $P5004
    set $P5002, $P5003["NFA"]
    unless_null $P5002, fallback5321
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5006
  fallback5321:
    $P5007 = $P5002."new"()
    set $P101, $P5007
.annotate 'line', 2743
    find_lex $P5009, "$/"
    unless_null $P5009, fallback5322
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5010
  fallback5322:
    set $P5008, $P5009["p6regex"]
    unless_null $P5008, fallback5323
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5011
  fallback5323:
    $P5012 = $P5008."ast"()
    $P101."addnode"($P5012, 1 :named("vars_as_generic"))
.annotate 'line', 2744
    $P5013 = $P101."generic"()
    set $P5016, $P5013
    unless $P5013 goto if1696_end5325 
.annotate 'line', 2745
    find_lex $P5014, "$code"
    $P5015 = $P5014."SET_GENERIC_NFA"($P101)
    set $P5016, $P5015
  if1696_end5325:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_315_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2760
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    unless_null _lex_param_1, fallback5330
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5003
  fallback5330:
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback5331
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5004
  fallback5331:
    unless $P5002 goto if1697_else5328 
.annotate 'line', 2761
    unless_null _lex_param_1, fallback5332
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5007
  fallback5332:
    set $P5006, _lex_param_1["args"]
    unless_null $P5006, fallback5333
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5008
  fallback5333:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5334
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5005, $P5009
  fallback5334:
    $P5010 = $P5005."ast"()
    set $P5017, $P5010
    goto if1697_end5329
  if1697_else5328:
    nqp_get_sc_object $P5014, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5335
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5015
  fallback5335:
    $P5016 = $P5011."new"(_lex_param_1 :named("node"))
    set $P5017, $P5016
  if1697_end5329:
    set $P101, $P5017
    unless_null _lex_param_1, fallback5338
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5019
  fallback5338:
    set $P5018, _lex_param_1["quote"]
    unless_null $P5018, fallback5339
    nqp_get_sc_object $P5020, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5018, $P5020
  fallback5339:
    unless $P5018 goto if1698_else5336 
.annotate 'line', 2762
.annotate 'line', 2763
    unless_null _lex_param_1, fallback5340
    nqp_get_sc_object $P5022, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5022
  fallback5340:
    set $P5021, _lex_param_1["quote"]
    unless_null $P5021, fallback5341
    nqp_get_sc_object $P5023, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5021, $P5023
  fallback5341:
    $P5024 = $P5021."ast"()
    $P101."unshift"($P5024)
.annotate 'line', 2764
    $P5025 = $P101."op"("callmethod")
    goto if1698_end5337
  if1698_else5336:
    unless_null _lex_param_1, fallback5344
    nqp_get_sc_object $P5027, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5027
  fallback5344:
    set $P5026, _lex_param_1["longname"]
    unless_null $P5026, fallback5345
    nqp_get_sc_object $P5028, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5026, $P5028
  fallback5345:
    set $S5001, $P5026
    iseq $I5001, $S5001, "HOW"
    unless $I5001 goto if1699_else5342 
.annotate 'line', 2766
.annotate 'line', 2767
    $P5029 = $P101."op"("how")
    set $P5049, $P5029
    goto if1699_end5343
  if1699_else5342:
    unless_null _lex_param_1, fallback5348
    nqp_get_sc_object $P5031, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5031
  fallback5348:
    set $P5030, _lex_param_1["longname"]
    unless_null $P5030, fallback5349
    nqp_get_sc_object $P5032, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5030, $P5032
  fallback5349:
    set $S5002, $P5030
    iseq $I5002, $S5002, "WHAT"
    unless $I5002 goto if1700_else5346 
.annotate 'line', 2769
.annotate 'line', 2770
    $P5033 = $P101."op"("what")
    set $P5048, $P5033
    goto if1700_end5347
  if1700_else5346:
    unless_null _lex_param_1, fallback5352
    nqp_get_sc_object $P5035, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5035
  fallback5352:
    set $P5034, _lex_param_1["longname"]
    unless_null $P5034, fallback5353
    nqp_get_sc_object $P5036, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5034, $P5036
  fallback5353:
    set $S5003, $P5034
    iseq $I5003, $S5003, "WHO"
    unless $I5003 goto if1701_else5350 
.annotate 'line', 2772
.annotate 'line', 2773
    $P5037 = $P101."op"("who")
    set $P5047, $P5037
    goto if1701_end5351
  if1701_else5350:
    unless_null _lex_param_1, fallback5356
    nqp_get_sc_object $P5039, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5039
  fallback5356:
    set $P5038, _lex_param_1["longname"]
    unless_null $P5038, fallback5357
    nqp_get_sc_object $P5040, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5038, $P5040
  fallback5357:
    set $S5004, $P5038
    iseq $I5004, $S5004, "REPR"
    unless $I5004 goto if1702_else5354 
.annotate 'line', 2775
.annotate 'line', 2776
    $P5041 = $P101."op"("reprname")
    set $P5046, $P5041
    goto if1702_end5355
  if1702_else5354:
.annotate 'line', 2778
.annotate 'line', 2779
    unless_null _lex_param_1, fallback5358
    nqp_get_sc_object $P5043, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5043
  fallback5358:
    set $P5042, _lex_param_1["longname"]
    unless_null $P5042, fallback5359
    nqp_get_sc_object $P5044, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5042, $P5044
  fallback5359:
    set $S5005, $P5042
    $P101."name"($S5005)
.annotate 'line', 2780
    $P5045 = $P101."op"("callmethod")
    set $P5046, $P5045
  if1702_end5355:
    set $P5047, $P5046
  if1701_end5351:
    set $P5048, $P5047
  if1700_end5347:
    set $P5049, $P5048
  if1699_end5343:
  if1698_end5337:
.annotate 'line', 2782
    $P5050 = _lex_param_1."!make"($P101)
    .return ($P5050) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_316_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2787
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2788
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5360
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback5360:
.annotate 'line', 2789
    nqp_get_sc_object $P5009, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5361
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5010
  fallback5361:
    $P5011 = $P5006."new"("self" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "nqp_decontainerize PP" :named("pirop"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_317_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2792
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 2793
    unless_null _lex_param_1, fallback5362
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5003
  fallback5362:
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback5363
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5004
  fallback5363:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2794
    unless_null _lex_param_1, fallback5364
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5007
  fallback5364:
    set $P5006, _lex_param_1["deflongname"]
    unless_null $P5006, fallback5365
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5008
  fallback5365:
    set $S5002, $P5006
    concat $S5001, "&", $S5002
    $P101."name"($S5001)
.annotate 'line', 2795
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_318_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2798
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5049 = 'cuid_484_1351203235.318' 
    capture_lex $P5049 
    .const 'Sub' $P5049 = 'cuid_485_1351203235.318' 
    capture_lex $P5049 
    .lex "$var", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
.annotate 'line', 2801
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback5368
    nqp_get_sc_object $P5006, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback5369
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5007
  fallback5369:
    unless_null $P5004, vivi_17045370
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_17045370:
    set $P5003, $P5004
  fallback5368:
    unless_null _lex_param_1, fallback5371
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5010
  fallback5371:
    set $P5009, _lex_param_1["name"]
    unless_null $P5009, fallback5372
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5011
  fallback5372:
    set $S5001, $P5009
    $P5012 = $P5003."is_lexical"($S5001)
    unless $P5012 goto if1703_else5366 
    new $P5034, 'ExceptionHandler'
    set_label $P5034, catch_handler_17095385
    $P5034.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5034
.annotate 'line', 2802
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_17075380
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 2803
    nqp_get_sc_object $P5016, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["WVal"]
    unless_null $P5013, fallback5373
    nqp_get_sc_object $P5017, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5013, $P5017
  fallback5373:
    find_dynamic_lex $P5018, "$*W"
    unless_null $P5018, fallback5374
    nqp_get_sc_object $P5021, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$W"]
    unless_null $P5019, fallback5375
    nqp_get_sc_object $P5022, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5019, $P5022
  fallback5375:
    unless_null $P5019, vivi_17055376
    die "Contextual $*W not found"
    box $P5023, "Contextual $*W not found"
    set $P5019, $P5023
  vivi_17055376:
    set $P5018, $P5019
  fallback5374:
    new $P5024, 'ResizablePMCArray'
    unless_null _lex_param_1, fallback5377
    nqp_get_sc_object $P5026, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5026
  fallback5377:
    set $P5025, _lex_param_1["name"]
    unless_null $P5025, fallback5378
    nqp_get_sc_object $P5027, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5025, $P5027
  fallback5378:
    set $S5002, $P5025
    box $P5028, $S5002
    push $P5024, $P5028
    $P5029 = $P5018."find_sym"($P5024)
    $P5030 = $P5013."new"($P5029 :named("value"))
    set $P101, $P5030
    nqp_get_sc_object $P5031, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_17065379
  catch_handler_17075380:
    .get_results ($P5032) 
    .const 'Sub' $P10001 = 'cuid_484_1351203235.318' 
    capture_lex $P10001
    $P10001($P5032)
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10002
    goto skip_handler_17065379
  skip_handler_17065379:
    set $P5035, $P5033
    pop_eh 
    goto skip_handler_17085384
  catch_handler_17095385:
    .get_results ($P5034) 
    set $I10001, 1
    set $P5034["handled"], $I10001
    nqp_get_sc_object $P10001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    finalize $P5034
    pop_upto_eh $P5034
    pop_eh 
    set $P5035, $P10001
    goto skip_handler_17085384
  skip_handler_17085384:
    goto if1703_end5367
  if1703_else5366:
    .const 'Sub' $P5036 = 'cuid_485_1351203235.318' 
    capture_lex $P5036
    $P5037 = $P5036()
  if1703_end5367:
    set $P102, $P101
    unless_null _lex_param_1, fallback5391
    nqp_get_sc_object $P5039, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5039
  fallback5391:
    set $P5038, _lex_param_1["args"]
    unless_null $P5038, fallback5392
    nqp_get_sc_object $P5040, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5038, $P5040
  fallback5392:
    unless $P5038 goto if1710_end5390 
.annotate 'line', 2816
.annotate 'line', 2817
    unless_null _lex_param_1, fallback5393
    nqp_get_sc_object $P5043, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5043
  fallback5393:
    set $P5042, _lex_param_1["args"]
    unless_null $P5042, fallback5394
    nqp_get_sc_object $P5044, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5042, $P5044
  fallback5394:
    set $P5041, $P5042[0]
    unless_null $P5041, fallback5395
    nqp_get_sc_object $P5045, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5041, $P5045
  fallback5395:
    $P5046 = $P5041."ast"()
    set $P102, $P5046
.annotate 'line', 2818
    $P5047 = $P102."unshift"($P101)
  if1710_end5390:
.annotate 'line', 2820
    $P5048 = _lex_param_1."!make"($P102)
    .return ($P5048) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_484_1351203235.318") :anon :lex :outer("cuid_318_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2804
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 2805
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback5381
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback5381:
    find_lex $P5007, "$/"
    unless_null $P5007, fallback5382
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5008
  fallback5382:
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback5383
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5009
  fallback5383:
    set $S5001, $P5006
    $P5010 = $P5001."new"($S5001 :named("name"), "lexical" :named("scope"))
    store_lex "$var", $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_485_1351203235.318") :anon :lex :outer("cuid_318_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2809
    .lex "@ns", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_lex $P5005, "$/"
    unless_null $P5005, fallback5386
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5005, $P5006
  fallback5386:
    set $P5004, $P5005["name"]
    unless_null $P5004, fallback5387
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5007
  fallback5387:
    set $P5003, $P5004["identifier"]
    unless_null $P5003, fallback5388
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5008
  fallback5388:
    clone $P5002, $P5003
    set $P101, $P5002
.annotate 'line', 2811
    find_lex $P5009, "$/"
    $P5010 = "&lexical_package_lookup"($P101, $P5009)
    store_lex "$var", $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_319_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2823
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@args", $P101 
    .lex "$pirop", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    unless_null _lex_param_1, fallback5398
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5004
  fallback5398:
    set $P5003, _lex_param_1["args"]
    unless_null $P5003, fallback5399
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5005
  fallback5399:
    unless $P5003 goto if1711_else5396 
.annotate 'line', 2824
    unless_null _lex_param_1, fallback5400
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5008
  fallback5400:
    set $P5007, _lex_param_1["args"]
    unless_null $P5007, fallback5401
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5009
  fallback5401:
    set $P5006, $P5007[0]
    unless_null $P5006, fallback5402
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5010
  fallback5402:
    $P5011 = $P5006."ast"()
    $P5012 = $P5011."list"()
    set $P5014, $P5012
    goto if1711_end5397
  if1711_else5396:
    new $P5013, 'ResizablePMCArray'
    set $P5014, $P5013
  if1711_end5397:
    set $P101, $P5014
    unless_null _lex_param_1, fallback5403
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5016
  fallback5403:
    set $P5015, _lex_param_1["op"]
    unless_null $P5015, fallback5404
    nqp_get_sc_object $P5017, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5015, $P5017
  fallback5404:
    set $S5001, $P5015
    box $P5018, $S5001
    set $P102, $P5018
    set $S5003, $P102
    split $P5019, "__", $S5003
    join $S5002, " ", $P5019
    box $P5020, $S5002
    set $P102, $P5020
.annotate 'line', 2827
    nqp_get_sc_object $P5024, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["VM"]
    unless_null $P5021, fallback5405
    nqp_get_sc_object $P5025, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5021, $P5025
  fallback5405:
    $P5026 = $P5021."new"($P101 :flat, $P102 :named("pirop"), _lex_param_1 :named("node"))
    $P5027 = _lex_param_1."!make"($P5026)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_320_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2830
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2831
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5406
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback5406:
    unless_null _lex_param_1, fallback5407
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5007
  fallback5407:
    set $P5006, _lex_param_1["const"]
    unless_null $P5006, fallback5408
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5008
  fallback5408:
    set $S5001, $P5006
    $P5009 = $P5001."new"($S5001 :named("pirconst"))
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_321_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2834
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "@args", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P103, $P5003
    unless_null _lex_param_1, fallback5409
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5005
  fallback5409:
    set $P5004, _lex_param_1["op"]
    unless_null $P5004, fallback5410
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5006
  fallback5410:
    set $S5001, $P5004
    box $P5007, $S5001
    set $P101, $P5007
    unless_null _lex_param_1, fallback5413
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5009
  fallback5413:
    set $P5008, _lex_param_1["args"]
    unless_null $P5008, fallback5414
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5010
  fallback5414:
    unless $P5008 goto if1712_else5411 
.annotate 'line', 2836
    unless_null _lex_param_1, fallback5415
    nqp_get_sc_object $P5013, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5013
  fallback5415:
    set $P5012, _lex_param_1["args"]
    unless_null $P5012, fallback5416
    nqp_get_sc_object $P5014, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5012, $P5014
  fallback5416:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback5417
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5015
  fallback5417:
    $P5016 = $P5011."ast"()
    $P5017 = $P5016."list"()
    set $P5019, $P5017
    goto if1712_end5412
  if1712_else5411:
    new $P5018, 'ResizablePMCArray'
    set $P5019, $P5018
  if1712_end5412:
    set $P102, $P5019
.annotate 'line', 2837
    nqp_get_sc_object $P5023, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback5418
    nqp_get_sc_object $P5024, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5020, $P5024
  fallback5418:
    $P5025 = $P5020."new"($P102 :flat, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P103, $P5025
.annotate 'line', 2838
    $P5026 = _lex_param_1."!make"($P103)
    .return ($P5026) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_322_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2841
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2842
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5419
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback5419:
    $P5006 = $P5001."new"("nqpmultidispatch" :named("op"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_323_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2845
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5420
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback5420:
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5421
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback5421:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_324_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2847
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5052 = 'cuid_487_1351203235.318' 
    capture_lex $P5052 
    .lex "$past", $P101 
    .lex "$i", $P102 
    .lex "$n", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc tmp_2 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P103, $P5003
.annotate 'line', 2848
    nqp_get_sc_object $P5007, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Op"]
    unless_null $P5004, fallback5422
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5008
  fallback5422:
    $P5009 = $P5004."new"("call" :named("op"), _lex_param_1 :named("node"))
    set $P101, $P5009
    unless_null _lex_param_1, fallback5425
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5011
  fallback5425:
    set $P5010, _lex_param_1["EXPR"]
    unless_null $P5010, fallback5426
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5012
  fallback5426:
    unless $P5010 goto if1713_end5424 
    .const 'Sub' $P5013 = 'cuid_487_1351203235.318' 
    capture_lex $P5013
    $P5014 = $P5013()
  if1713_end5424:
    box $P5015, 0
    set $P102, $P5015
.annotate 'line', 2857
    $P5016 = $P101."list"()
    set $N5001, $P5016
    box $P5017, $N5001
    set $P103, $P5017
  while1717_test5439:
    set $N5002, $P102
    set $N5003, $P103
    islt $I5001, $N5002, $N5003
    box $P5050, $I5001
    set $P5049, $P5050
    unless $I5001 goto while1717_done5443 
  while1717_redo5441:
.annotate 'line', 2858
    set $I5003, $P102
    set $P5018, $P101[$I5003]
    unless_null $P5018, fallback5448
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5018, $P5019
  fallback5448:
    nqp_get_sc_object $P5023, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback5449
    nqp_get_sc_object $P5024, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5020, $P5024
  fallback5449:
    type_check $I5002, $P5018, $P5020
    set $I5006, $I5002
    unless $I5002 goto if1719_end5447 
.annotate 'line', 2859
    set $I5005, $P102
    set $P5025, $P101[$I5005]
    unless_null $P5025, fallback5450
    nqp_get_sc_object $P5026, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5025, $P5026
  fallback5450:
    $P5027 = $P5025."name"()
    set $S5001, $P5027
    iseq $I5004, $S5001, "&prefix:<|>"
    set $I5006, $I5004
  if1719_end5447:
    unless $I5006 goto if1718_end5445 
    set $I5007, $P102
    set $I5008, $P102
    set $P5029, $P101[$I5008]
    unless_null $P5029, fallback5451
    nqp_get_sc_object $P5030, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5029, $P5030
  fallback5451:
    set $P5028, $P5029[0]
    unless_null $P5028, fallback5452
    nqp_get_sc_object $P5031, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5028, $P5031
  fallback5452:
    set $P101[$I5007], $P5028
.annotate 'line', 2861
    set $I5009, $P102
    set $P5032, $P101[$I5009]
    unless_null $P5032, fallback5453
    nqp_get_sc_object $P5033, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5032, $P5033
  fallback5453:
    $P5032."flat"(1)
    set $I5011, $P102
    set $P5034, $P101[$I5011]
    unless_null $P5034, fallback5458
    nqp_get_sc_object $P5035, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5034, $P5035
  fallback5458:
    nqp_get_sc_object $P5039, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Var"]
    unless_null $P5036, fallback5459
    nqp_get_sc_object $P5040, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5036, $P5040
  fallback5459:
    type_check $I5010, $P5034, $P5036
    set $I5014, $I5010
    unless $I5010 goto if1721_end5457 
.annotate 'line', 2863
    set $I5013, $P102
    set $P5041, $P101[$I5013]
    unless_null $P5041, fallback5460
    nqp_get_sc_object $P5042, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5041, $P5042
  fallback5460:
    $P5043 = $P5041."name"()
    set $S5003, $P5043
    substr $S5002, $S5003, 0, 1
    iseq $I5012, $S5002, "%"
    set $I5014, $I5012
  if1721_end5457:
    box $P5048, $I5014
    set $P5047, $P5048
    unless $I5014 goto if1720_end5455 
.annotate 'line', 2862
    set $I5015, $P102
    set $P5044, $P101[$I5015]
    unless_null $P5044, fallback5461
    nqp_get_sc_object $P5045, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5044, $P5045
  fallback5461:
    $P5046 = $P5044."named"(1)
    set $P5047, $P5046
  if1720_end5455:
  if1718_end5445:
    set tmp_2, $P102
    set $N5005, tmp_2
    set $N5006, 1
    add $N5004, $N5005, $N5006
    box $P5049, $N5004
    set $P102, $P5049
    set $P5049, tmp_2
    goto while1717_test5439 
  while1717_done5443:
.annotate 'line', 2867
    $P5051 = _lex_param_1."!make"($P101)
    .return ($P5051) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_487_1351203235.318") :anon :lex :outer("cuid_324_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2849
    .const 'Sub' $P5023 = 'cuid_486_1351203235.318' 
    capture_lex $P5023 
    .lex "$expr", $P101 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 2850
    find_lex $P5003, "$/"
    unless_null $P5003, fallback5427
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5004
  fallback5427:
    set $P5002, $P5003["EXPR"]
    unless_null $P5002, fallback5428
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5005
  fallback5428:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
    nqp_get_sc_object $P5010, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback5435
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5011
  fallback5435:
    type_check $I5001, $P101, $P5007
    set $I5003, $I5001
    unless $I5001 goto if1716_end5434 
.annotate 'line', 2851
    $P5012 = $P101."name"()
    set $S5001, $P5012
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1716_end5434:
    set $I5005, $I5003
    unless $I5003 goto if1715_end5432 
    $P5013 = $P101."named"()
    isfalse $I5004, $P5013
    set $I5005, $I5004
  if1715_end5432:
    unless $I5005 goto if1714_else5429 
.annotate 'line', 2852
    $P5017 = $P101."list"()
    set $P5014, $P5017
    iter $P5016, $P5017
  for_next5436:
    unless $P5016, for_done5438
    shift $P5019, $P5016
  for_redo5437:
    .const 'Sub' $P5018 = 'cuid_486_1351203235.318' 
    capture_lex $P5018
    $P5014 = $P5018($P5019)
    goto for_next5436
  for_done5438:
    set $P5022, $P5014
    goto if1714_end5430
  if1714_else5429:
.annotate 'line', 2854
    find_lex $P5020, "$past"
    $P5021 = $P5020."push"($P101)
    set $P5022, $P5021
  if1714_end5430:
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_486_1351203235.318") :anon :lex :outer("cuid_487_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2852
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$past"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_325_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2870
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5462
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback5462:
    set $P5001, _lex_param_1["multi_declarator"]
    unless_null $P5001, fallback5463
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback5463:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_326_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2872
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5464
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback5464:
    set $P5001, _lex_param_1["value"]
    unless_null $P5001, fallback5465
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback5465:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_327_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2874
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2875
    unless_null _lex_param_1, fallback5468
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback5468:
    set $P5001, _lex_param_1["EXPR"]
    unless_null $P5001, fallback5469
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback5469:
    unless $P5001 goto if1722_else5466 
.annotate 'line', 2876
    unless_null _lex_param_1, fallback5470
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5006
  fallback5470:
    set $P5005, _lex_param_1["EXPR"]
    unless_null $P5005, fallback5471
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5005, $P5007
  fallback5471:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback5472
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5008
  fallback5472:
    $P5009 = $P5004."ast"()
    set $P5016, $P5009
    goto if1722_end5467
  if1722_else5466:
.annotate 'line', 2877
    nqp_get_sc_object $P5013, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback5473
    nqp_get_sc_object $P5014, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5014
  fallback5473:
    $P5015 = $P5010."new"("list" :named("op"), _lex_param_1 :named("node"))
    set $P5016, $P5015
  if1722_end5467:
    $P5017 = _lex_param_1."!make"($P5016)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_328_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2880
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    unless_null _lex_param_1, fallback5476
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5003
  fallback5476:
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback5477
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5004
  fallback5477:
    unless $P5002 goto if1723_else5474 
.annotate 'line', 2882
.annotate 'line', 2883
    unless_null _lex_param_1, fallback5478
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5007
  fallback5478:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5479
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5008
  fallback5479:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5480
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5005, $P5009
  fallback5480:
    $P5010 = $P5005."ast"()
    set $P101, $P5010
    nqp_get_sc_object $P5014, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5485
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5015
  fallback5485:
    type_check $I5001, $P101, $P5011
    set $I5003, $I5001
    unless $I5001 goto if1725_end5484 
.annotate 'line', 2884
    $P5016 = $P101."name"()
    set $S5001, $P5016
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1725_end5484:
    box $P5024, $I5003
    set $P5023, $P5024
    if $I5003 goto unless1724_end5482 
.annotate 'line', 2885
    nqp_get_sc_object $P5020, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback5486
    nqp_get_sc_object $P5021, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5017, $P5021
  fallback5486:
    $P5022 = $P5017."new"($P101, "list" :named("op"))
    set $P101, $P5022
    set $P5023, $P101
  unless1724_end5482:
    goto if1723_end5475
  if1723_else5474:
.annotate 'line', 2888
.annotate 'line', 2889
    nqp_get_sc_object $P5028, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Op"]
    unless_null $P5025, fallback5487
    nqp_get_sc_object $P5029, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5025, $P5029
  fallback5487:
    $P5030 = $P5025."new"("list" :named("op"))
    set $P101, $P5030
  if1723_end5475:
.annotate 'line', 2891
    $P101."name"("&circumfix:<[ ]>")
.annotate 'line', 2892
    $P5031 = _lex_param_1."!make"($P101)
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_329_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2895
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5488
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback5488:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5489
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback5489:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_330_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2896
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5490
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback5490:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5491
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback5491:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_331_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2898
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5028 = 'cuid_488_1351203235.318' 
    capture_lex $P5028 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5494
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5005
  fallback5494:
    set $P5004, _lex_param_1["pblock"]
    unless_null $P5004, fallback5495
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5006
  fallback5495:
    set $P5003, $P5004["blockoid"]
    unless_null $P5003, fallback5496
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5007
  fallback5496:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback5497
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5008
  fallback5497:
    set $P5001, $P5002["statement"]
    unless_null $P5001, fallback5498
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5009
  fallback5498:
    set $N5001, $P5001
    set $N5002, 0
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1726_else5492 
    .const 'Sub' $P5010 = 'cuid_488_1351203235.318' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5027, $P5011
    goto if1726_end5493
  if1726_else5492:
    unless_null _lex_param_1, fallback5504
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5015
  fallback5504:
    set $P5014, _lex_param_1["pblock"]
    unless_null $P5014, fallback5505
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5014, $P5016
  fallback5505:
    set $P5013, $P5014["blockoid"]
    unless_null $P5013, fallback5506
    nqp_get_sc_object $P5017, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5013, $P5017
  fallback5506:
    set $P5012, $P5013["you_are_here"]
    unless_null $P5012, fallback5507
    nqp_get_sc_object $P5018, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5012, $P5018
  fallback5507:
    unless $P5012 goto if1727_else5502 
.annotate 'line', 2904
.annotate 'line', 2905
    unless_null _lex_param_1, fallback5508
    nqp_get_sc_object $P5020, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5020
  fallback5508:
    set $P5019, _lex_param_1["pblock"]
    unless_null $P5019, fallback5509
    nqp_get_sc_object $P5021, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5019, $P5021
  fallback5509:
    $P5022 = $P5019."ast"()
    $P5023 = _lex_param_1."!make"($P5022)
    set $P5026, $P5023
    goto if1727_end5503
  if1727_else5502:
.annotate 'line', 2907
.annotate 'line', 2908
    $P5024 = "&default_for"("%")
    $P5025 = _lex_param_1."!make"($P5024)
    set $P5026, $P5025
  if1727_end5503:
    set $P5027, $P5026
  if1726_end5493:
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_488_1351203235.318") :anon :lex :outer("cuid_331_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2899
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 2900
    nqp_get_sc_object $P5005, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback5499
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5006
  fallback5499:
    find_lex $P5008, "$/"
    unless_null $P5008, fallback5500
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5009
  fallback5500:
    set $P5007, $P5008["pblock"]
    unless_null $P5007, fallback5501
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5010
  fallback5501:
    $P5011 = $P5007."ast"()
    $P5012 = $P5002."new"($P5011, "takeclosure" :named("op"))
    set $P101, $P5012
    box $P5013, 1
    set $P101["bareblock"], $P5013
.annotate 'line', 2902
    find_dynamic_lex $P5014, "$/"
    $P5015 = $P5014."!make"($P101)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<sigil>" :subid("cuid_332_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2912
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    unless_null _lex_param_1, fallback5512
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5003
  fallback5512:
    set $P5002, _lex_param_1["sigil"]
    unless_null $P5002, fallback5513
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5004
  fallback5513:
    set $S5001, $P5002
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1728_else5510 
    set $S5004, "list"
    goto if1728_end5511
  if1728_else5510:
    unless_null _lex_param_1, fallback5516
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5006
  fallback5516:
    set $P5005, _lex_param_1["sigil"]
    unless_null $P5005, fallback5517
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5005, $P5007
  fallback5517:
    set $S5002, $P5005
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1729_else5514 
    set $S5003, "hash"
    goto if1729_end5515
  if1729_else5514:
    set $S5003, "item"
  if1729_end5515:
    set $S5004, $S5003
  if1728_end5511:
    box $P5008, $S5004
    set $P101, $P5008
.annotate 'line', 2916
    nqp_get_sc_object $P5012, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback5518
    nqp_get_sc_object $P5013, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5013
  fallback5518:
    unless_null _lex_param_1, fallback5519
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5015
  fallback5519:
    set $P5014, _lex_param_1["semilist"]
    unless_null $P5014, fallback5520
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5014, $P5016
  fallback5520:
    $P5017 = $P5014."ast"()
    $P5018 = $P5009."new"($P5017, "callmethod" :named("op"), $P101 :named("name"))
    $P5019 = _lex_param_1."!make"($P5018)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_333_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2919
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5521
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback5521:
    set $P5001, _lex_param_1["statement"]
    unless_null $P5001, fallback5522
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback5522:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_334_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2921
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2922
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5523
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback5523:
    unless_null _lex_param_1, fallback5524
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5007
  fallback5524:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5525
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5008
  fallback5525:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "positional" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_335_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2925
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2926
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5526
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback5526:
    unless_null _lex_param_1, fallback5527
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5007
  fallback5527:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5528
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5008
  fallback5528:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "associative" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_336_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2929
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2930
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5529
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback5529:
    unless_null _lex_param_1, fallback5530
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5007
  fallback5530:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5531
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5008
  fallback5531:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "associative" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_337_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2933
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2934
    unless_null _lex_param_1, fallback5532
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback5532:
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5533
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback5533:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_338_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2937
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2938
    unless_null _lex_param_1, fallback5536
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback5536:
    set $P5001, _lex_param_1["quote"]
    unless_null $P5001, fallback5537
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback5537:
    unless $P5001 goto if1730_else5534 
    unless_null _lex_param_1, fallback5538
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5005
  fallback5538:
    set $P5004, _lex_param_1["quote"]
    unless_null $P5004, fallback5539
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5004, $P5006
  fallback5539:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1730_end5535
  if1730_else5534:
    unless_null _lex_param_1, fallback5540
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5009
  fallback5540:
    set $P5008, _lex_param_1["number"]
    unless_null $P5008, fallback5541
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5008, $P5010
  fallback5541:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1730_end5535:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_339_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2941
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$value", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    unless_null _lex_param_1, fallback5544
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5003
  fallback5544:
    set $P5002, _lex_param_1["dec_number"]
    unless_null $P5002, fallback5545
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5004
  fallback5545:
    unless $P5002 goto if1731_else5542 
.annotate 'line', 2942
    unless_null _lex_param_1, fallback5546
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5006
  fallback5546:
    set $P5005, _lex_param_1["dec_number"]
    unless_null $P5005, fallback5547
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5005, $P5007
  fallback5547:
    $P5008 = $P5005."ast"()
    set $P5013, $P5008
    goto if1731_end5543
  if1731_else5542:
    unless_null _lex_param_1, fallback5548
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5010
  fallback5548:
    set $P5009, _lex_param_1["integer"]
    unless_null $P5009, fallback5549
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5009, $P5011
  fallback5549:
    $P5012 = $P5009."ast"()
    set $P5013, $P5012
  if1731_end5543:
    set $P101, $P5013
    unless_null _lex_param_1, fallback5552
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5015
  fallback5552:
    set $P5014, _lex_param_1["sign"]
    unless_null $P5014, fallback5553
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5014, $P5016
  fallback5553:
    set $S5001, $P5014
    iseq $I5001, $S5001, "-"
    unless $I5001 goto if1732_end5551 
.annotate 'line', 2943
    set $N5002, $P101
    neg $N5001, $N5002
    box $P5017, $N5001
    set $P101, $P5017
  if1732_end5551:
.annotate 'line', 2944
    unless_null _lex_param_1, fallback5556
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5019
  fallback5556:
    set $P5018, _lex_param_1["dec_number"]
    unless_null $P5018, fallback5557
    nqp_get_sc_object $P5020, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5018, $P5020
  fallback5557:
    unless $P5018 goto if1733_else5554 
.annotate 'line', 2945
    nqp_get_sc_object $P5024, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["NVal"]
    unless_null $P5021, fallback5558
    nqp_get_sc_object $P5025, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5021, $P5025
  fallback5558:
    $P5026 = $P5021."new"($P101 :named("value"))
    set $P5033, $P5026
    goto if1733_end5555
  if1733_else5554:
.annotate 'line', 2946
    nqp_get_sc_object $P5030, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["IVal"]
    unless_null $P5027, fallback5559
    nqp_get_sc_object $P5031, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5027, $P5031
  fallback5559:
    $P5032 = $P5027."new"($P101 :named("value"))
    set $P5033, $P5032
  if1733_end5555:
    $P5034 = _lex_param_1."!make"($P5033)
    .return ($P5034) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_340_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2949
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5560
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback5560:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5561
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback5561:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_341_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2950
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5562
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback5562:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5563
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback5563:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_342_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2951
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5564
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback5564:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5565
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback5565:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_343_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2952
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5566
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback5566:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5567
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback5567:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_344_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2953
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5568
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback5568:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5569
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback5569:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_345_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2954
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2955
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5570
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback5570:
    unless_null _lex_param_1, fallback5571
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5007
  fallback5571:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5572
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5008
  fallback5572:
    $P5009 = $P5006."ast"()
    $P5010 = $P5009."value"()
    $P5011 = $P5001."new"($P5010 :named("pir"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_346_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2958
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$regex", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P103, $P5003
.annotate 'line', 2959
    find_dynamic_lex $P5004, "$*W"
    unless_null $P5004, fallback5573
    nqp_get_sc_object $P5007, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$W"]
    unless_null $P5005, fallback5574
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5005, $P5008
  fallback5574:
    unless_null $P5005, vivi_17345575
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5005, $P5009
  vivi_17345575:
    set $P5004, $P5005
  fallback5573:
    $P5010 = $P5004."pop_lexpad"()
    set $P101, $P5010
.annotate 'line', 2960
    set $P5011, $P101[0]
    unless_null $P5011, fallback5576
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5012
  fallback5576:
    nqp_get_sc_object $P5016, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback5577
    nqp_get_sc_object $P5017, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5013, $P5017
  fallback5577:
    $P5018 = $P5013."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5011."push"($P5018)
.annotate 'line', 2961
    set $P5019, $P101[0]
    unless_null $P5019, fallback5578
    nqp_get_sc_object $P5020, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5019, $P5020
  fallback5578:
    nqp_get_sc_object $P5024, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5579
    nqp_get_sc_object $P5025, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5021, $P5025
  fallback5579:
.annotate 'line', 2963
    nqp_get_sc_object $P5029, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5580
    nqp_get_sc_object $P5030, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5026, $P5030
  fallback5580:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2964
    nqp_get_sc_object $P5035, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback5581
    nqp_get_sc_object $P5036, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5032, $P5036
  fallback5581:
    $P5037 = $P5032."new"("self" :named("name"), "lexical" :named("scope"))
    $P5038 = $P5021."new"($P5031, $P5037, "bind" :named("op"))
    $P5019."push"($P5038)
.annotate 'line', 2965
    set $P5039, $P101[0]
    unless_null $P5039, fallback5582
    nqp_get_sc_object $P5040, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5039, $P5040
  fallback5582:
    nqp_get_sc_object $P5044, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback5583
    nqp_get_sc_object $P5045, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5041, $P5045
  fallback5583:
    $P5046 = $P5041."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5039."push"($P5046)
.annotate 'line', 2966
    set $P5047, $P101[0]
    unless_null $P5047, fallback5584
    nqp_get_sc_object $P5048, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5047, $P5048
  fallback5584:
    nqp_get_sc_object $P5052, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Var"]
    unless_null $P5049, fallback5585
    nqp_get_sc_object $P5053, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5049, $P5053
  fallback5585:
    $P5054 = $P5049."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5047."push"($P5054)
.annotate 'line', 2967
    $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2968
    $P101."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2970
    find_dynamic_lex $P5056, "%*LANG"
    unless_null $P5056, fallback5586
    nqp_get_sc_object $P5059, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["%LANG"]
    unless_null $P5057, fallback5587
    nqp_get_sc_object $P5061, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5060, $P5061
    new $P5062, 'Hash'
    set $P5060["%LANG"], $P5062
    set $P5057, $P5062
  fallback5587:
    unless_null $P5057, vivi_17355588
    die "Contextual %*LANG not found"
    box $P5063, "Contextual %*LANG not found"
    set $P5057, $P5063
  vivi_17355588:
    set $P5056, $P5057
  fallback5586:
    set $P5055, $P5056["Regex-actions"]
    unless_null $P5055, fallback5589
    nqp_get_sc_object $P5064, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5055, $P5064
  fallback5589:
    unless_null _lex_param_1, fallback5590
    nqp_get_sc_object $P5066, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5066
  fallback5590:
    set $P5065, _lex_param_1["p6regex"]
    unless_null $P5065, fallback5591
    nqp_get_sc_object $P5067, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5065, $P5067
  fallback5591:
    $P5068 = $P5065."ast"()
    $P5069 = $P5055."qbuildsub"($P5068, $P101)
    set $P102, $P5069
.annotate 'line', 2971
    nqp_get_sc_object $P5073, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5072, $P5073, "QAST"
    get_who $P5071, $P5072
    set $P5070, $P5071["Op"]
    unless_null $P5070, fallback5592
    nqp_get_sc_object $P5074, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5070, $P5074
  fallback5592:
.annotate 'line', 2973
    new $P5075, 'ResizablePMCArray'
    box $P5076, "NQPRegex"
    push $P5075, $P5076
    $P5077 = "&lexical_package_lookup"($P5075, _lex_param_1)
    $P5078 = $P5070."new"($P5077, $P102, "callmethod" :named("op"), "new" :named("name"))
    set $P103, $P5078
    set $P103["sink"], $P102
.annotate 'line', 2978
    $P5079 = _lex_param_1."!make"($P103)
    .return ($P5079) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_347_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2981
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5593
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback5593:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback5594
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback5594:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_348_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2982
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2983
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5595
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback5595:
.annotate 'line', 2984
    unless_null _lex_param_1, fallback5596
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5007
  fallback5596:
    set $P5006, _lex_param_1["block"]
    unless_null $P5006, fallback5597
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5008
  fallback5597:
    $P5009 = $P5006."ast"()
    $P5010 = "&block_immediate"($P5009)
    $P5011 = $P5001."new"($P5010, "stringify" :named("op"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_349_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2987
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    $P5001 = _lex_param_1."!make"("\e")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_350_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2991
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5598
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback5598:
    set $P5001, _lex_param_1["dotty"]
    unless_null $P5001, fallback5599
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback5599:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_351_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2993
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2994
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5600
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback5600:
.annotate 'line', 2996
    nqp_get_sc_object $P5009, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5601
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5010
  fallback5601:
    $P5011 = $P5006."new"("RETURN" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "call" :named("op"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_352_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3000
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3001
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5602
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback5602:
.annotate 'line', 3002
    nqp_get_sc_object $P5009, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5603
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5010
  fallback5603:
    $P5011 = $P5006."new"("$/" :named("name"), "contextual" :named("scope"))
    $P5012 = $P5001."new"($P5011, "callmethod" :named("op"), "!make" :named("name"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_353_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3009
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5604
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback5604:
    $P5006 = $P5001."new"("control" :named("op"), "next" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_354_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3010
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5605
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback5605:
    $P5006 = $P5001."new"("control" :named("op"), "last" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_355_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3011
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5606
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback5606:
    $P5006 = $P5001."new"("control" :named("op"), "redo" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_356_1351203235.318") :anon :lex :outer("cuid_357_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3013
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3014
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5607
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback5607:
    $P5006 = $P5001."new"("callmethod" :named("op"), "ACCEPTS" :named("name"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_371_1351203235.318") :anon :lex :outer("cuid_1_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3095
    .const 'Sub' $P5014 = 'cuid_358_1351203235.318' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_359_1351203235.318' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_360_1351203235.318' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_361_1351203235.318' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_362_1351203235.318' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_363_1351203235.318' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_364_1351203235.318' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_365_1351203235.318' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_366_1351203235.318' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_367_1351203235.318' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_368_1351203235.318' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_369_1351203235.318' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_370_1351203235.318' 
    capture_lex $P5014 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_358_1351203235.318' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_359_1351203235.318' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_360_1351203235.318' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_361_1351203235.318' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_362_1351203235.318' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_363_1351203235.318' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_364_1351203235.318' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_365_1351203235.318' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_366_1351203235.318' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_367_1351203235.318' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_368_1351203235.318' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_369_1351203235.318' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_370_1351203235.318' 
    capture_lex $P5013
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_358_1351203235.318") :anon :lex :outer("cuid_371_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3097
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 3098
    unless_null _lex_param_1, fallback5608
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5003
  fallback5608:
    set $P5002, _lex_param_1["statement"]
    unless_null $P5002, fallback5609
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5002, $P5004
  fallback5609:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 3099
    nqp_get_sc_object $P5009, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Regex"]
    unless_null $P5006, fallback5610
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5010
  fallback5610:
    $P5011 = $P5006."new"($P101, "qastnode" :named("rxtype"), "declarative" :named("subtype"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_359_1351203235.318") :anon :lex :outer("cuid_371_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3103
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3104
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5611
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback5611:
    unless_null _lex_param_1, fallback5612
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5007
  fallback5612:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5613
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5008
  fallback5613:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_360_1351203235.318") :anon :lex :outer("cuid_371_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3108
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3109
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5614
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback5614:
    nqp_get_sc_object $P5009, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5615
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5010
  fallback5615:
.annotate 'line', 3110
    nqp_get_sc_object $P5014, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5616
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5015
  fallback5616:
    $P5016 = $P5011."new"("!INTERPOLATE" :named("value"))
.annotate 'line', 3111
    unless_null _lex_param_1, fallback5617
    nqp_get_sc_object $P5018, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5018
  fallback5617:
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5618
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5017, $P5019
  fallback5618:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_361_1351203235.318") :anon :lex :outer("cuid_371_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3115
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3116
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5619
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback5619:
    nqp_get_sc_object $P5009, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5620
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5010
  fallback5620:
.annotate 'line', 3117
    nqp_get_sc_object $P5014, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5621
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5015
  fallback5621:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3118
    unless_null _lex_param_1, fallback5622
    nqp_get_sc_object $P5018, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5018
  fallback5622:
    set $P5017, _lex_param_1["codeblock"]
    unless_null $P5017, fallback5623
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5017, $P5019
  fallback5623:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_362_1351203235.318") :anon :lex :outer("cuid_371_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3122
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3123
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5624
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback5624:
    unless_null _lex_param_1, fallback5625
    nqp_get_sc_object $P5007, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5007
  fallback5625:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5626
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5008
  fallback5626:
    $P5009 = $P5006."ast"()
    unless_null _lex_param_1, fallback5627
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5011
  fallback5627:
    set $P5010, _lex_param_1["zw"]
    unless_null $P5010, fallback5628
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5012
  fallback5628:
    set $S5001, $P5010
    iseq $I5001, $S5001, "!"
    $P5013 = $P5001."new"($P5009, "zerowidth" :named("subtype"), $I5001 :named("negate"), "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5014 = _lex_param_1."!make"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_363_1351203235.318") :anon :lex :outer("cuid_371_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3128
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3129
    nqp_get_sc_object $P5004, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5629
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5005
  fallback5629:
    nqp_get_sc_object $P5009, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5630
    nqp_get_sc_object $P5010, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5006, $P5010
  fallback5630:
.annotate 'line', 3130
    nqp_get_sc_object $P5014, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5631
    nqp_get_sc_object $P5015, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5015
  fallback5631:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3131
    unless_null _lex_param_1, fallback5632
    nqp_get_sc_object $P5018, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5018
  fallback5632:
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5633
    nqp_get_sc_object $P5019, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5017, $P5019
  fallback5633:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_364_1351203235.318") :anon :lex :outer("cuid_371_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3135
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
.annotate 'line', 3136
    unless_null _lex_param_1, fallback5634
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5004
  fallback5634:
    set $P5003, _lex_param_1["block"]
    unless_null $P5003, fallback5635
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5005
  fallback5635:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 3137
    $P101."blocktype"("immediate")
.annotate 'line', 3139
    nqp_get_sc_object $P5010, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback5636
    nqp_get_sc_object $P5011, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5011
  fallback5636:
.annotate 'line', 3140
    nqp_get_sc_object $P5015, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback5637
    nqp_get_sc_object $P5016, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5012, $P5016
  fallback5637:
.annotate 'line', 3142
    nqp_get_sc_object $P5020, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Var"]
    unless_null $P5017, fallback5638
    nqp_get_sc_object $P5021, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5017, $P5021
  fallback5638:
    $P5022 = $P5017."new"("$/" :named("name"), "contextual" :named("scope"))
.annotate 'line', 3143
    nqp_get_sc_object $P5026, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["Op"]
    unless_null $P5023, fallback5639
    nqp_get_sc_object $P5027, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5023, $P5027
  fallback5639:
.annotate 'line', 3144
    nqp_get_sc_object $P5031, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["Var"]
    unless_null $P5028, fallback5640
    nqp_get_sc_object $P5032, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5028, $P5032
  fallback5640:
    $P5033 = $P5028."new"(utf8:"$\x{a2}" :named("name"), "contextual" :named("scope"))
    $P5034 = $P5023."new"($P5033, "MATCH" :named("name"), "callmethod" :named("op"))
    $P5035 = $P5012."new"($P5022, $P5034, "bind" :named("op"))
    $P5036 = $P5007."new"($P5035, $P101)
    set $P102, $P5036
.annotate 'line', 3151
    $P5037 = _lex_param_1."!make"($P102)
    .return ($P5037) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_365_1351203235.318") :anon :lex :outer("cuid_371_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3154
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5085 = 'cuid_489_1351203235.318' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_490_1351203235.318' 
    capture_lex $P5085 
    .lex "$name", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    unless_null _lex_param_1, fallback5641
    nqp_get_sc_object $P5004, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5004
  fallback5641:
    set $P5003, _lex_param_1["longname"]
    unless_null $P5003, fallback5642
    nqp_get_sc_object $P5005, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5005
  fallback5642:
    set $S5001, $P5003
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback5645
    nqp_get_sc_object $P5008, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5008
  fallback5645:
    set $P5007, _lex_param_1["assertion"]
    unless_null $P5007, fallback5646
    nqp_get_sc_object $P5009, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5007, $P5009
  fallback5646:
    unless $P5007 goto if1736_else5643 
.annotate 'line', 3157
.annotate 'line', 3158
    unless_null _lex_param_1, fallback5647
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5012
  fallback5647:
    set $P5011, _lex_param_1["assertion"]
    unless_null $P5011, fallback5648
    nqp_get_sc_object $P5013, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5011, $P5013
  fallback5648:
    set $P5010, $P5011[0]
    unless_null $P5010, fallback5649
    nqp_get_sc_object $P5014, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5010, $P5014
  fallback5649:
    $P5015 = $P5010."ast"()
    set $P102, $P5015
.annotate 'line', 3159
    nqp_decontainerize $P5016, _lex_param_0
    $P5017 = $P5016."subrule_alias"($P102, $P101)
    goto if1736_end5644
  if1736_else5643:
    set $S5002, $P101
    iseq $I5001, $S5002, "sym"
    unless $I5001 goto if1737_else5650 
    .const 'Sub' $P5018 = 'cuid_489_1351203235.318' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5083, $P5019
    goto if1737_end5651
  if1737_else5650:
.annotate 'line', 3169
.annotate 'line', 3170
    nqp_get_sc_object $P5023, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Regex"]
    unless_null $P5020, fallback5668
    nqp_get_sc_object $P5024, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5020, $P5024
  fallback5668:
.annotate 'line', 3172
    nqp_get_sc_object $P5028, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Node"]
    unless_null $P5025, fallback5669
    nqp_get_sc_object $P5029, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5025, $P5029
  fallback5669:
    nqp_get_sc_object $P5033, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["SVal"]
    unless_null $P5030, fallback5670
    nqp_get_sc_object $P5034, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5030, $P5034
  fallback5670:
    $P5035 = $P5030."new"($P101 :named("value"))
    $P5036 = $P5025."new"($P5035)
    $P5037 = $P5020."new"($P5036, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"), $P101 :named("name"))
    set $P102, $P5037
    unless_null _lex_param_1, fallback5673
    nqp_get_sc_object $P5039, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5039
  fallback5673:
    set $P5038, _lex_param_1["arglist"]
    unless_null $P5038, fallback5674
    nqp_get_sc_object $P5040, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5038, $P5040
  fallback5674:
    unless $P5038 goto if1742_else5671 
.annotate 'line', 3173
.annotate 'line', 3174
    unless_null _lex_param_1, fallback5675
    nqp_get_sc_object $P5046, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5046
  fallback5675:
    set $P5045, _lex_param_1["arglist"]
    unless_null $P5045, fallback5676
    nqp_get_sc_object $P5047, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5045, $P5047
  fallback5676:
    set $P5044, $P5045[0]
    unless_null $P5044, fallback5677
    nqp_get_sc_object $P5048, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5044, $P5048
  fallback5677:
    $P5049 = $P5044."ast"()
    $P5050 = $P5049."list"()
    set $P5041, $P5050
    iter $P5043, $P5050
  for_next5679:
    unless $P5043, for_done5681
    shift $P5052, $P5043
  for_redo5680:
    .const 'Sub' $P5051 = 'cuid_490_1351203235.318' 
    capture_lex $P5051
    $P5041 = $P5051($P5052)
    goto for_next5679
  for_done5681:
    set $P5082, $P5041
    goto if1742_end5672
  if1742_else5671:
    unless_null _lex_param_1, fallback5684
    nqp_get_sc_object $P5054, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5054
  fallback5684:
    set $P5053, _lex_param_1["nibbler"]
    unless_null $P5053, fallback5685
    nqp_get_sc_object $P5055, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5053, $P5055
  fallback5685:
    set $P5081, $P5053
    unless $P5053 goto if1743_end5683 
.annotate 'line', 3176
    set $S5003, $P101
    iseq $I5002, $S5003, "after"
    unless $I5002 goto if1744_else5686 
.annotate 'line', 3178
    set $P5056, $P102[0]
    unless_null $P5056, fallback5688
    nqp_get_sc_object $P5057, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5056, $P5057
  fallback5688:
    nqp_decontainerize $P5058, _lex_param_0
    nqp_decontainerize $P5059, _lex_param_0
    unless_null _lex_param_1, fallback5689
    nqp_get_sc_object $P5062, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5062
  fallback5689:
    set $P5061, _lex_param_1["nibbler"]
    unless_null $P5061, fallback5690
    nqp_get_sc_object $P5063, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5061, $P5063
  fallback5690:
    set $P5060, $P5061[0]
    unless_null $P5060, fallback5691
    nqp_get_sc_object $P5064, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5060, $P5064
  fallback5691:
    $P5065 = $P5060."ast"()
    $P5066 = $P5059."flip_ast"($P5065)
    $P5067 = $P5058."qbuildsub"($P5066, 1 :named("anon"), 1 :named("addself"))
    $P5068 = $P5056."push"($P5067)
    set $P5080, $P5068
    goto if1744_end5687
  if1744_else5686:
.annotate 'line', 3179
    set $P5069, $P102[0]
    unless_null $P5069, fallback5692
    nqp_get_sc_object $P5070, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5069, $P5070
  fallback5692:
    nqp_decontainerize $P5071, _lex_param_0
    unless_null _lex_param_1, fallback5693
    nqp_get_sc_object $P5074, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5074
  fallback5693:
    set $P5073, _lex_param_1["nibbler"]
    unless_null $P5073, fallback5694
    nqp_get_sc_object $P5075, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5073, $P5075
  fallback5694:
    set $P5072, $P5073[0]
    unless_null $P5072, fallback5695
    nqp_get_sc_object $P5076, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5072, $P5076
  fallback5695:
    $P5077 = $P5072."ast"()
    $P5078 = $P5071."qbuildsub"($P5077, 1 :named("anon"), 1 :named("addself"))
    $P5079 = $P5069."push"($P5078)
    set $P5080, $P5079
  if1744_end5687:
    set $P5081, $P5080
  if1743_end5683:
    set $P5082, $P5081
  if1742_end5672:
    set $P5083, $P5082
  if1737_end5651:
  if1736_end5644:
.annotate 'line', 3182
    $P5084 = _lex_param_1."!make"($P102)
    .return ($P5084) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_489_1351203235.318") :anon :lex :outer("cuid_365_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3161
    .lex "$loc", $P101 
    .lex "$rxname", $P102 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P102, $P5002
    find_dynamic_lex $P5004, "%*RX"
    unless_null $P5004, fallback5652
    nqp_get_sc_object $P5007, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["%RX"]
    unless_null $P5005, fallback5653
    nqp_get_sc_object $P5009, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%RX"], $P5010
    set $P5005, $P5010
  fallback5653:
    unless_null $P5005, vivi_17385654
    die "Contextual %*RX not found"
    box $P5011, "Contextual %*RX not found"
    set $P5005, $P5011
  vivi_17385654:
    set $P5004, $P5005
  fallback5652:
    set $P5003, $P5004["name"]
    unless_null $P5003, fallback5655
    nqp_get_sc_object $P5012, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5012
  fallback5655:
    set $S5001, $P5003
    index $I5001, $S5001, ":sym<", 0
    box $P5013, $I5001
    set $P101, $P5013
    set $N5001, $P101
    set $N5002, 0
    islt $I5002, $N5001, $N5002
    unless $I5002 goto if1739_end5657 
    find_dynamic_lex $P5015, "%*RX"
    unless_null $P5015, fallback5658
    nqp_get_sc_object $P5018, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["%RX"]
    unless_null $P5016, fallback5659
    nqp_get_sc_object $P5020, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5019, $P5020
    new $P5021, 'Hash'
    set $P5019["%RX"], $P5021
    set $P5016, $P5021
  fallback5659:
    unless_null $P5016, vivi_17405660
    die "Contextual %*RX not found"
    box $P5022, "Contextual %*RX not found"
    set $P5016, $P5022
  vivi_17405660:
    set $P5015, $P5016
  fallback5658:
    set $P5014, $P5015["name"]
    unless_null $P5014, fallback5661
    nqp_get_sc_object $P5023, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5014, $P5023
  fallback5661:
    set $S5002, $P5014
    index $I5003, $S5002, utf8:":sym\x{ab}", 0
    box $P5024, $I5003
    set $P101, $P5024
  if1739_end5657:
    find_dynamic_lex $P5026, "%*RX"
    unless_null $P5026, fallback5662
    nqp_get_sc_object $P5029, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["%RX"]
    unless_null $P5027, fallback5663
    nqp_get_sc_object $P5031, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5030, $P5031
    new $P5032, 'Hash'
    set $P5030["%RX"], $P5032
    set $P5027, $P5032
  fallback5663:
    unless_null $P5027, vivi_17415664
    die "Contextual %*RX not found"
    box $P5033, "Contextual %*RX not found"
    set $P5027, $P5033
  vivi_17415664:
    set $P5026, $P5027
  fallback5662:
    set $P5025, $P5026["name"]
    unless_null $P5025, fallback5665
    nqp_get_sc_object $P5034, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5025, $P5034
  fallback5665:
    set $S5005, $P5025
    set $N5004, $P101
    set $N5005, 5
    add $N5003, $N5004, $N5005
    set $I5004, $N5003
    substr $S5004, $S5005, $I5004
    chopn $S5003, $S5004, 1
    box $P5035, $S5003
    set $P102, $P5035
.annotate 'line', 3166
    nqp_get_sc_object $P5039, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Regex"]
    unless_null $P5036, fallback5666
    nqp_get_sc_object $P5040, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5036, $P5040
  fallback5666:
    find_lex $P5041, "$/"
.annotate 'line', 3167
    nqp_get_sc_object $P5045, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Regex"]
    unless_null $P5042, fallback5667
    nqp_get_sc_object $P5046, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5042, $P5046
  fallback5667:
    find_lex $P5047, "$/"
    $P5048 = $P5042."new"($P102, "literal" :named("rxtype"), $P5047 :named("node"))
    $P5049 = $P5036."new"($P5048, "sym" :named("name"), "subcapture" :named("rxtype"), $P5041 :named("node"))
    store_lex "$qast", $P5049
    .return ($P5049) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_490_1351203235.318") :anon :lex :outer("cuid_365_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3174
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$qast"
    set $P5001, $P5002[0]
    unless_null $P5001, fallback5678
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback5678:
    $P5004 = $P5001."push"(_lex_param_0)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_366_1351203235.318") :anon :lex :outer("cuid_371_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3185
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3186
    unless_null _lex_param_1, fallback5696
    nqp_get_sc_object $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set _lex_param_1, $P5002
  fallback5696:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5697
    nqp_get_sc_object $P5003, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5001, $P5003
  fallback5697:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "create_regex_code_object" :subid("cuid_367_1351203235.318") :anon :lex :outer("cuid_371_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3189
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$code", $P101 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P101, $P5001
.annotate 'line', 3190
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback5698
    nqp_get_sc_object $P5005, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback5699
    nqp_get_sc_object $P5006, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5003, $P5006
  fallback5699:
    unless_null $P5003, vivi_17455700
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_17455700:
    set $P5002, $P5003
  fallback5698:
    $P5008 = $P5002."create_code"(_lex_param_1, "", 0, "NQPRegex" :named("code_type_name"))
    set $P101, $P5008
    find_dynamic_lex $P5009, "%*RX"
    unless_null $P5009, fallback5703
    nqp_get_sc_object $P5012, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["%RX"]
    unless_null $P5010, fallback5704
    nqp_get_sc_object $P5014, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5013, $P5014
    new $P5015, 'Hash'
    set $P5013["%RX"], $P5015
    set $P5010, $P5015
  fallback5704:
    unless_null $P5010, vivi_17475705
    die "Contextual %*RX not found"
    box $P5016, "Contextual %*RX not found"
    set $P5010, $P5016
  vivi_17475705:
    set $P5009, $P5010
  fallback5703:
    exists $I5001, $P5009["code"]
    unless $I5001 goto if1746_end5702 
.annotate 'line', 3191
.annotate 'line', 3192
    find_dynamic_lex $P5018, "%*RX"
    unless_null $P5018, fallback5706
    nqp_get_sc_object $P5021, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["%RX"]
    unless_null $P5019, fallback5707
    nqp_get_sc_object $P5023, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    get_who $P5022, $P5023
    new $P5024, 'Hash'
    set $P5022["%RX"], $P5024
    set $P5019, $P5024
  fallback5707:
    unless_null $P5019, vivi_17485708
    die "Contextual %*RX not found"
    box $P5025, "Contextual %*RX not found"
    set $P5019, $P5025
  vivi_17485708:
    set $P5018, $P5019
  fallback5706:
    set $P5017, $P5018["code"]
    unless_null $P5017, fallback5709
    nqp_get_sc_object $P5026, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    set $P5017, $P5026
  fallback5709:
    $P5027 = $P5017."ADD_NESTED_CODE"($P101)
  if1746_end5702:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_nfa" :subid("cuid_368_1351203235.318") :anon :lex :outer("cuid_371_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3197
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$nfa", _lex_param_3 
.annotate 'line', 3198
    $P5001 = _lex_param_3."save"()
    $P5002 = _lex_param_1."SET_NFA"($P5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_caps" :subid("cuid_369_1351203235.318") :anon :lex :outer("cuid_371_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3201
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "%caps", _lex_param_3 
.annotate 'line', 3202
    $P5001 = _lex_param_1."SET_CAPS"(_lex_param_3)
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_alt_nfa" :subid("cuid_370_1351203235.318") :anon :lex :outer("cuid_371_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3205
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .const 'Sub' $P5008 = 'cuid_491_1351203235.318' 
    capture_lex $P5008 
    .lex "@saved", $P101 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$key", _lex_param_3 
    .lex "@alternatives", _lex_param_4 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    set $P5002, _lex_param_4
    iter $P5004, _lex_param_4
  for_next5710:
    unless $P5004, for_done5712
    shift $P5006, $P5004
  for_redo5711:
    .const 'Sub' $P5005 = 'cuid_491_1351203235.318' 
    capture_lex $P5005
    $P5002 = $P5005($P5006)
    goto for_next5710
  for_done5712:
.annotate 'line', 3210
    $P5007 = _lex_param_1."SET_ALT_NFA"(_lex_param_3, $P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_491_1351203235.318") :anon :lex :outer("cuid_370_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3207
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 3208
    find_lex $P5001, "@saved"
    $P5002 = _lex_param_0."save"(1 :named("non_empty"))
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_372_1351203235.318") :anon :lex :outer("cuid_1_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3215
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    nqp_get_sc_object $P5001, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65", 21
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_493_1351203235.318") :load :init
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P5001 = 'cuid_492_1351203235.318' 
    capture_lex $P5001 
    .local pmc cur_sc 
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P5001
    get_class $P5002, "LexPad"
    get_class $P5003, "NQPLexPad"
    $P5001."hll_map"($P5002, $P5003)
    load_bytecode "ModuleLoader.pbc"
    .const 'Sub' $P5001 = "cuid_1_1351203235.318" 
    get_hll_global $P5002, "ModuleLoader"
    $P5003 = $P5002."load_setting"("NQPCORE")
    $P5001."set_outer_ctx"($P5003)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QAST")
    nqp_create_sc $P5001, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344"
    set cur_sc, $P5001
    cur_sc."set_description"("src\\stage2\\gen\\NQP.pm")
    new $P5002, 'ResizableStringArray'
    null $S5001
    push $P5002, $S5001
    push $P5002, "P6opaque"
    push $P5002, "QAST"
    push $P5002, "QRegex"
    push $P5002, "NQPCursorRole"
    push $P5002, "024380BA9013A69B9C9B0185A47B9F3EEF62A504-1351203212.36"
    push $P5002, "src\\stage2\\QRegex.nqp"
    push $P5002, "NQPMatch"
    push $P5002, "NQPCursor"
    push $P5002, "NQPRegexMethod"
    push $P5002, "NQPRegex"
    push $P5002, "HLL"
    push $P5002, "PIRT"
    push $P5002, "NQP"
    push $P5002, "DEFAULT"
    push $P5002, "CREATE"
    push $P5002, "CCEC8EB447A57E4A046F86900DC8DFE7AC7ABED0-1351203209.65"
    push $P5002, "src\\stage2\\NQPCORE.setting"
    push $P5002, "bless"
    push $P5002, "BUILDALL"
    push $P5002, "new"
    push $P5002, "Str"
    push $P5002, "Numeric"
    push $P5002, "Int"
    push $P5002, "at_pos"
    push $P5002, "at_key"
    push $P5002, "defined"
    push $P5002, "ACCEPTS"
    push $P5002, "isa"
    push $P5002, "__dump"
    push $P5002, "BUILD"
    push $P5002, "slot_for_object"
    push $P5002, "BD7E728CC1972284EE4FFBD305733940D7BD6DFA-1351203215.855"
    push $P5002, "src\\stage2\\gen\\NQPHLL.pm"
    push $P5002, "add_object"
    push $P5002, "add_root_code_ref"
    push $P5002, "update_root_code_ref"
    push $P5002, "is_precompilation_mode"
    push $P5002, "add_load_dependency_task"
    push $P5002, "add_fixup_task"
    push $P5002, "sc"
    push $P5002, "handle"
    push $P5002, "code_ref_blocks"
    push $P5002, "load_dependency_tasks"
    push $P5002, "fixup_tasks"
    push $P5002, "push_lexpad"
    push $P5002, "pop_lexpad"
    push $P5002, "cur_lexpad"
    push $P5002, "get_legacy_block_list"
    push $P5002, "load_setting"
    push $P5002, "load_module"
    push $P5002, "import"
    push $P5002, "install_package_symbol"
    push $P5002, "install_lexical_symbol"
    push $P5002, "install_package_routine"
    push $P5002, "create_code"
    push $P5002, "pkg_create_mo"
    push $P5002, "pkg_add_attribute"
    push $P5002, "pkg_add_method"
    push $P5002, "set_routine_signature"
    push $P5002, "pkg_set_body_block"
    push $P5002, "pkg_add_parent_or_role"
    push $P5002, "pkg_add_parrot_vtable_handler_mapping"
    push $P5002, "pkg_compose"
    push $P5002, "run_begin_block"
    push $P5002, "libs"
    push $P5002, "add_initializations"
    push $P5002, "is_lexical"
    push $P5002, "is_package"
    push $P5002, "is_scope"
    push $P5002, "known_sym"
    push $P5002, "find_sym"
    push $P5002, "$!sc"
    push $P5002, "$!handle"
    push $P5002, "$!precomp_mode"
    push $P5002, "$!num_code_refs"
    push $P5002, "$!code_ref_blocks"
    push $P5002, "@!load_dependency_tasks"
    push $P5002, "@!fixup_tasks"
    push $P5002, "%!addr_to_slot"
    push $P5002, "@!BLOCKS"
    push $P5002, "%!code_objects_to_fix_up"
    push $P5002, "%!code_object_fixup_list"
    push $P5002, "%!code_stub_sc_idx"
    push $P5002, "MATCH"
    push $P5002, "Bool"
    push $P5002, "parse"
    push $P5002, "!INTERPOLATE"
    push $P5002, "!INTERPOLATE_REGEX"
    push $P5002, "target"
    push $P5002, "from"
    push $P5002, "pos"
    push $P5002, "CAPHASH"
    push $P5002, "!cursor_init"
    push $P5002, "!cursor_start"
    push $P5002, "!cursor_start_subcapture"
    push $P5002, "!cursor_capture"
    push $P5002, "!cursor_push_cstack"
    push $P5002, "!cursor_pass"
    push $P5002, "!cursor_fail"
    push $P5002, "!cursor_next"
    push $P5002, "!cursor_more"
    push $P5002, "!reduce"
    push $P5002, "!reduce_with_match"
    push $P5002, "!protoregex"
    push $P5002, "!protoregex_nfa"
    push $P5002, "!protoregex_table"
    push $P5002, "!alt"
    push $P5002, "!alt_nfa"
    push $P5002, "!precompute_nfas"
    push $P5002, "!BACKREF"
    push $P5002, "!LITERAL"
    push $P5002, "at"
    push $P5002, "before"
    push $P5002, "after"
    push $P5002, "ws"
    push $P5002, "ww"
    push $P5002, "wb"
    push $P5002, "ident"
    push $P5002, "alpha"
    push $P5002, "alnum"
    push $P5002, "upper"
    push $P5002, "lower"
    push $P5002, "digit"
    push $P5002, "xdigit"
    push $P5002, "space"
    push $P5002, "blank"
    push $P5002, "cntrl"
    push $P5002, "punct"
    push $P5002, "FAILGOAL"
    push $P5002, "termish"
    push $P5002, "term"
    push $P5002, "infix"
    push $P5002, "prefix"
    push $P5002, "postfix"
    push $P5002, "circumfix"
    push $P5002, "postcircumfix"
    push $P5002, "term:sym<circumfix>"
    push $P5002, "infixish"
    push $P5002, "prefixish"
    push $P5002, "postfixish"
    push $P5002, "nullterm"
    push $P5002, "nullterm_alt"
    push $P5002, "nulltermish"
    push $P5002, "quote_delimited"
    push $P5002, "quote_atom"
    push $P5002, "decint"
    push $P5002, "decints"
    push $P5002, "hexint"
    push $P5002, "hexints"
    push $P5002, "octint"
    push $P5002, "octints"
    push $P5002, "binint"
    push $P5002, "binints"
    push $P5002, "integer"
    push $P5002, "dec_number"
    push $P5002, "escale"
    push $P5002, "quote_escape"
    push $P5002, "quote_escape:sym<backslash>"
    push $P5002, "quote_escape:sym<stopper>"
    push $P5002, "quote_escape:sym<bs>"
    push $P5002, "quote_escape:sym<nl>"
    push $P5002, "quote_escape:sym<cr>"
    push $P5002, "quote_escape:sym<tab>"
    push $P5002, "quote_escape:sym<ff>"
    push $P5002, "quote_escape:sym<esc>"
    push $P5002, "quote_escape:sym<hex>"
    push $P5002, "quote_escape:sym<oct>"
    push $P5002, "quote_escape:sym<chr>"
    push $P5002, "quote_escape:sym<0>"
    push $P5002, "quote_escape:sym<misc>"
    push $P5002, "charname"
    push $P5002, "charnames"
    push $P5002, "charspec"
    push $P5002, "O"
    push $P5002, "panic"
    push $P5002, "peek_delimiters"
    push $P5002, "quote_EXPR"
    push $P5002, "quotemod_check"
    push $P5002, "starter"
    push $P5002, "stopper"
    push $P5002, "split_words"
    push $P5002, "EXPR"
    push $P5002, "EXPR_reduce"
    push $P5002, "ternary"
    push $P5002, "MARKER"
    push $P5002, "MARKED"
    push $P5002, "LANG"
    push $P5002, "TOP"
    push $P5002, "identifier"
    push $P5002, "name"
    push $P5002, "deflongname"
    push $P5002, "ENDSTMT"
    push $P5002, "unv"
    push $P5002, "pod_comment"
    push $P5002, "comp_unit"
    push $P5002, "statementlist"
    push $P5002, "statement"
    push $P5002, "eat_terminator"
    push $P5002, "xblock"
    push $P5002, "pblock"
    push $P5002, "lambda"
    push $P5002, "block"
    push $P5002, "blockoid"
    push $P5002, "newpad"
    push $P5002, "outerctx"
    push $P5002, "finishpad"
    push $P5002, "you_are_here"
    push $P5002, "terminator"
    push $P5002, "terminator:sym<;>"
    push $P5002, "terminator:sym<}>"
    push $P5002, "statement_control"
    push $P5002, "statement_control:sym<use>"
    push $P5002, "statement_control:sym<if>"
    push $P5002, "statement_control:sym<unless>"
    push $P5002, "statement_control:sym<while>"
    push $P5002, "statement_control:sym<repeat>"
    push $P5002, "statement_control:sym<for>"
    push $P5002, "statement_control:sym<CATCH>"
    push $P5002, "statement_control:sym<CONTROL>"
    push $P5002, "statement_prefix"
    push $P5002, "statement_prefix:sym<BEGIN>"
    push $P5002, "statement_prefix:sym<INIT>"
    push $P5002, "statement_prefix:sym<try>"
    push $P5002, "blorst"
    push $P5002, "statement_mod_cond"
    push $P5002, "statement_mod_cond:sym<if>"
    push $P5002, "statement_mod_cond:sym<unless>"
    push $P5002, "statement_mod_loop"
    push $P5002, "statement_mod_loop:sym<while>"
    push $P5002, "statement_mod_loop:sym<until>"
    push $P5002, "statement_mod_loop:sym<for>"
    push $P5002, "term:sym<fatarrow>"
    push $P5002, "term:sym<colonpair>"
    push $P5002, "term:sym<variable>"
    push $P5002, "term:sym<package_declarator>"
    push $P5002, "term:sym<scope_declarator>"
    push $P5002, "term:sym<routine_declarator>"
    push $P5002, "term:sym<multi_declarator>"
    push $P5002, "term:sym<regex_declarator>"
    push $P5002, "term:sym<statement_prefix>"
    push $P5002, "term:sym<lambda>"
    push $P5002, "fatarrow"
    push $P5002, "colonpair"
    push $P5002, "variable"
    push $P5002, "sigil"
    push $P5002, "twigil"
    push $P5002, "package_declarator"
    push $P5002, "package_declarator:sym<module>"
    push $P5002, "package_declarator:sym<knowhow>"
    push $P5002, "package_declarator:sym<class>"
    push $P5002, "package_declarator:sym<grammar>"
    push $P5002, "package_declarator:sym<role>"
    push $P5002, "package_declarator:sym<native>"
    push $P5002, "package_declarator:sym<stub>"
    push $P5002, "package_def"
    push $P5002, "role_params"
    push $P5002, "scope_declarator"
    push $P5002, "scope_declarator:sym<my>"
    push $P5002, "scope_declarator:sym<our>"
    push $P5002, "scope_declarator:sym<has>"
    push $P5002, "scoped"
    push $P5002, "typename"
    push $P5002, "declarator"
    push $P5002, "variable_declarator"
    push $P5002, "routine_declarator"
    push $P5002, "routine_declarator:sym<sub>"
    push $P5002, "routine_declarator:sym<method>"
    push $P5002, "routine_def"
    push $P5002, "method_def"
    push $P5002, "onlystar"
    push $P5002, "multi_declarator"
    push $P5002, "multi_declarator:sym<multi>"
    push $P5002, "multi_declarator:sym<proto>"
    push $P5002, "multi_declarator:sym<null>"
    push $P5002, "signature"
    push $P5002, "parameter"
    push $P5002, "param_var"
    push $P5002, "named_param"
    push $P5002, "default_value"
    push $P5002, "trait"
    push $P5002, "trait_mod"
    push $P5002, "trait_mod:sym<is>"
    push $P5002, "regex_declarator"
    push $P5002, "dotty"
    push $P5002, "term:sym<self>"
    push $P5002, "term:sym<identifier>"
    push $P5002, "term:sym<name>"
    push $P5002, "term:sym<pir::op>"
    push $P5002, "term:sym<pir::const>"
    push $P5002, "term:sym<nqp::op>"
    push $P5002, "term:sym<onlystar>"
    push $P5002, "args"
    push $P5002, "arglist"
    push $P5002, "term:sym<value>"
    push $P5002, "value"
    push $P5002, "number"
    push $P5002, "quote"
    push $P5002, "quote:sym<apos>"
    push $P5002, "quote:sym<dblq>"
    push $P5002, "quote:sym<q>"
    push $P5002, "quote:sym<qq>"
    push $P5002, "quote:sym<Q>"
    push $P5002, "quote:sym<Q:PIR>"
    push $P5002, "quote:sym</ />"
    push $P5002, "quote_escape:sym<$>"
    push $P5002, "quote_escape:sym<{ }>"
    push $P5002, "circumfix:sym<( )>"
    push $P5002, "circumfix:sym<[ ]>"
    push $P5002, "circumfix:sym<ang>"
    push $P5002, utf8:"circumfix:sym<\x{ab} \x{bb}>"
    push $P5002, "circumfix:sym<{ }>"
    push $P5002, "circumfix:sym<sigil>"
    push $P5002, "semilist"
    push $P5002, "infixstopper"
    push $P5002, "postcircumfix:sym<[ ]>"
    push $P5002, "postcircumfix:sym<{ }>"
    push $P5002, "postcircumfix:sym<ang>"
    push $P5002, "postcircumfix:sym<( )>"
    push $P5002, "postfix:sym<.>"
    push $P5002, "prefix:sym<++>"
    push $P5002, "prefix:sym<-->"
    push $P5002, "postfix:sym<++>"
    push $P5002, "postfix:sym<-->"
    push $P5002, "infix:sym<**>"
    push $P5002, "prefix:sym<+>"
    push $P5002, "prefix:sym<~>"
    push $P5002, "prefix:sym<->"
    push $P5002, "prefix:sym<?>"
    push $P5002, "prefix:sym<!>"
    push $P5002, "prefix:sym<|>"
    push $P5002, "infix:sym<*>"
    push $P5002, "infix:sym</>"
    push $P5002, "infix:sym<%>"
    push $P5002, "infix:sym<+&>"
    push $P5002, "infix:sym<+>"
    push $P5002, "infix:sym<->"
    push $P5002, "infix:sym<+|>"
    push $P5002, "infix:sym<+^>"
    push $P5002, "infix:sym<~>"
    push $P5002, "infix:sym<==>"
    push $P5002, "infix:sym<!=>"
    push $P5002, "infix:sym<<=>"
    push $P5002, "infix:sym<>=>"
    push $P5002, "infix:sym<<>"
    push $P5002, "infix:sym<>>"
    push $P5002, "infix:sym<eq>"
    push $P5002, "infix:sym<ne>"
    push $P5002, "infix:sym<le>"
    push $P5002, "infix:sym<ge>"
    push $P5002, "infix:sym<lt>"
    push $P5002, "infix:sym<gt>"
    push $P5002, "infix:sym<=:=>"
    push $P5002, "infix:sym<~~>"
    push $P5002, "infix:sym<&&>"
    push $P5002, "infix:sym<||>"
    push $P5002, "infix:sym<//>"
    push $P5002, "infix:sym<?? !!>"
    push $P5002, "infix:sym<=>"
    push $P5002, "infix:sym<:=>"
    push $P5002, "infix:sym<::=>"
    push $P5002, "infix:sym<,>"
    push $P5002, "prefix:sym<return>"
    push $P5002, "prefix:sym<make>"
    push $P5002, "term:sym<last>"
    push $P5002, "term:sym<next>"
    push $P5002, "term:sym<redo>"
    push $P5002, "smartmatch"
    push $P5002, "$!orig"
    push $P5002, "$!target"
    push $P5002, "$!from"
    push $P5002, "$!pos"
    push $P5002, "$!match"
    push $P5002, "$!name"
    push $P5002, "$!bstack"
    push $P5002, "$!cstack"
    push $P5002, "$!regexsub"
    push $P5002, "$!restart"
    push $P5002, "C4959B8FAE2F505F7560B804194CFECB08301F6C-1351203231.617"
    push $P5002, "src\\stage2\\gen\\NQPP6QRegex.pm"
    push $P5002, "obs"
    push $P5002, "normspace"
    push $P5002, "arg"
    push $P5002, "nibbler"
    push $P5002, "termaltseq"
    push $P5002, "termconjseq"
    push $P5002, "termalt"
    push $P5002, "termconj"
    push $P5002, "quantified_atom"
    push $P5002, "separator"
    push $P5002, "atom"
    push $P5002, "quantifier"
    push $P5002, "quantifier:sym<*>"
    push $P5002, "quantifier:sym<+>"
    push $P5002, "quantifier:sym<?>"
    push $P5002, "quantifier:sym<{N,M}>"
    push $P5002, "quantifier:sym<**>"
    push $P5002, "backmod"
    push $P5002, "metachar"
    push $P5002, "metachar:sym<ws>"
    push $P5002, "metachar:sym<[ ]>"
    push $P5002, "metachar:sym<( )>"
    push $P5002, "metachar:sym<'>"
    push $P5002, "metachar:sym<\">"
    push $P5002, "metachar:sym<.>"
    push $P5002, "metachar:sym<^>"
    push $P5002, "metachar:sym<^^>"
    push $P5002, "metachar:sym<$>"
    push $P5002, "metachar:sym<$$>"
    push $P5002, "metachar:sym<:::>"
    push $P5002, "metachar:sym<::>"
    push $P5002, "metachar:sym<lwb>"
    push $P5002, "metachar:sym<rwb>"
    push $P5002, "metachar:sym<from>"
    push $P5002, "metachar:sym<to>"
    push $P5002, "metachar:sym<bs>"
    push $P5002, "metachar:sym<mod>"
    push $P5002, "metachar:sym<quantifier>"
    push $P5002, "metachar:sym<~>"
    push $P5002, "metachar:sym<{*}>"
    push $P5002, "metachar:sym<assert>"
    push $P5002, "metachar:sym<var>"
    push $P5002, "backslash"
    push $P5002, "backslash:sym<s>"
    push $P5002, "backslash:sym<b>"
    push $P5002, "backslash:sym<e>"
    push $P5002, "backslash:sym<f>"
    push $P5002, "backslash:sym<h>"
    push $P5002, "backslash:sym<r>"
    push $P5002, "backslash:sym<t>"
    push $P5002, "backslash:sym<v>"
    push $P5002, "backslash:sym<o>"
    push $P5002, "backslash:sym<x>"
    push $P5002, "backslash:sym<c>"
    push $P5002, "backslash:sym<A>"
    push $P5002, "backslash:sym<z>"
    push $P5002, "backslash:sym<Z>"
    push $P5002, "backslash:sym<Q>"
    push $P5002, "backslash:sym<unrec>"
    push $P5002, "backslash:sym<misc>"
    push $P5002, "assertion"
    push $P5002, "assertion:sym<?>"
    push $P5002, "assertion:sym<!>"
    push $P5002, "assertion:sym<|>"
    push $P5002, "assertion:sym<method>"
    push $P5002, "assertion:sym<name>"
    push $P5002, "assertion:sym<[>"
    push $P5002, "cclass_elem"
    push $P5002, "mod_internal"
    push $P5002, "mod_ident"
    push $P5002, "mod_ident:sym<ignorecase>"
    push $P5002, "mod_ident:sym<ratchet>"
    push $P5002, "mod_ident:sym<sigspace>"
    push $P5002, "mod_ident:sym<dba>"
    push $P5002, "mod_ident:sym<oops>"
    push $P5002, "metachar:sym<:my>"
    push $P5002, "metachar:sym<{ }>"
    push $P5002, "metachar:sym<nqpvar>"
    push $P5002, "assertion:sym<{ }>"
    push $P5002, "assertion:sym<?{ }>"
    push $P5002, "assertion:sym<var>"
    push $P5002, "codeblock"
    push $P5002, "ints_to_string"
    push $P5002, "CTXSAVE"
    push $P5002, "SET_BLOCK_OUTER_CTX"
    push $P5002, "qbuildsub"
    push $P5002, "alt_nfas"
    push $P5002, "subrule_alias"
    push $P5002, "flip_ast"
    push $P5002, "create_regex_code_object"
    push $P5002, "store_regex_caps"
    push $P5002, "store_regex_nfa"
    push $P5002, "store_regex_alt_nfa"
    push $P5002, "language"
    push $P5002, "compiler"
    push $P5002, "config"
    push $P5002, "autoprint"
    push $P5002, "interactive"
    push $P5002, "eval"
    push $P5002, "ctxsave"
    push $P5002, "stages"
    push $P5002, "parsegrammar"
    push $P5002, "parseactions"
    push $P5002, "interactive_banner"
    push $P5002, "interactive_prompt"
    push $P5002, "compiler_progname"
    push $P5002, "commandline_options"
    push $P5002, "command_line"
    push $P5002, "command_eval"
    push $P5002, "process_args"
    push $P5002, "evalfiles"
    push $P5002, "compile"
    push $P5002, "start"
    push $P5002, "past"
    push $P5002, "post"
    push $P5002, "pirbegin"
    push $P5002, "pir"
    push $P5002, "evalpmc"
    push $P5002, "dumper"
    push $P5002, "usage"
    push $P5002, "version"
    push $P5002, "show-config"
    push $P5002, "verbose-config"
    push $P5002, "vmstat"
    push $P5002, "nqpevent"
    push $P5002, "removestage"
    push $P5002, "addstage"
    push $P5002, "parse_name"
    push $P5002, "lineof"
    push $P5002, "user-progname"
    push $P5002, "cli-options"
    push $P5002, "cli-arguments"
    push $P5002, "@!stages"
    push $P5002, "$!parsegrammar"
    push $P5002, "$!parseactions"
    push $P5002, "@!cmdoptions"
    push $P5002, "$!usage"
    push $P5002, "$!compiler_progname"
    push $P5002, "$!language"
    push $P5002, "%!config"
    push $P5002, "$!user_progname"
    push $P5002, "@!cli-arguments"
    push $P5002, "%!cli-options"
    push $P5002, ""
    push $P5002, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5002, "alt_nfa__1_1351203236.448"
    push $P5002, "alt_nfa__2_1351203236.464"
    push $P5002, utf8:"\n\x{b}\f\r\x{85}\u2028\u2029"
    push $P5002, "alt_nfa__4_1351203236.481"
    push $P5002, "alt_nfa__3_1351203236.473"
    push $P5002, "alt_nfa__6_1351203236.557"
    push $P5002, "alt_nfa__5_1351203236.546"
    push $P5002, "alt_nfa__7_1351203236.642"
    push $P5002, "alt_nfa__9_1351203236.66"
    push $P5002, "alt_nfa__8_1351203236.647"
    push $P5002, "{"
    push $P5002, "alt_nfa__10_1351203236.687"
    push $P5002, "alt_nfa__11_1351203236.692"
    push $P5002, ";"
    push $P5002, "}"
    push $P5002, "sym"
    push $P5002, "else"
    push $P5002, "alt_nfa__12_1351203236.783"
    push $P5002, "wu"
    push $P5002, "alt_nfa__13_1351203236.802"
    push $P5002, "alt_nfa__14_1351203236.802"
    push $P5002, "alt_nfa__15_1351203236.802"
    push $P5002, "alt_nfa__16_1351203236.848"
    push $P5002, "cond"
    push $P5002, "alt_nfa__17_1351203236.912"
    push $P5002, "alt_nfa__18_1351203236.919"
    push $P5002, "key"
    push $P5002, "val"
    push $P5002, "not"
    push $P5002, "alt_nfa__19_1351203236.956"
    push $P5002, "desigilname"
    push $P5002, "<["
    push $P5002, "/_!"
    push $P5002, "alt_nfa__20_1351203236.969"
    push $P5002, "$@%&"
    push $P5002, "*!?"
    push $P5002, "metaclass"
    push $P5002, "repr"
    push $P5002, "export"
    push $P5002, "parent"
    push $P5002, "role"
    push $P5002, "alt_nfa__21_1351203237.207"
    push $P5002, "alt_nfa__22_1351203237.221"
    push $P5002, "alt_nfa__23_1351203237.268"
    push $P5002, "latename"
    push $P5002, "private"
    push $P5002, "alt_nfa__24_1351203237.301"
    push $P5002, "invocant"
    push $P5002, "alt_nfa__26_1351203237.467"
    push $P5002, "alt_nfa__25_1351203237.463"
    push $P5002, "definedness"
    push $P5002, "quant"
    push $P5002, "_DU"
    push $P5002, "alt_nfa__27_1351203237.489"
    push $P5002, "alt_nfa__28_1351203237.49"
    push $P5002, "alt_nfa__29_1351203237.49"
    push $P5002, "/!"
    push $P5002, "alt_nfa__30_1351203237.499"
    push $P5002, "longname"
    push $P5002, "proto"
    push $P5002, "p6regex"
    push $P5002, "alt_nfa__31_1351203237.601"
    push $P5002, "alt_nfa__32_1351203237.602"
    push $P5002, "alt_nfa__33_1351203237.602"
    push $P5002, "'\""
    push $P5002, "("
    push $P5002, "alt_nfa__34_1351203237.623"
    push $P5002, "alt_nfa__35_1351203237.624"
    push $P5002, "op"
    push $P5002, "const"
    push $P5002, "alt_nfa__36_1351203237.686"
    push $P5002, "alt_nfa__37_1351203237.694"
    push $P5002, "sign"
    push $P5002, "alt_nfa__38_1351203237.702"
    push $P5002, "'"
    push $P5002, "\""
    push $P5002, "$"
    push $P5002, "<"
    push $P5002, utf8:"\x{ab}"
    push $P5002, "OPER"
    push $P5002, ">"
    push $P5002, "var"
    push $P5002, "$@&"
    push $P5002, "alt_nfa__39_1351203238.335"
    push $P5002, "alt_nfa__40_1351203238.355"
    push $P5002, "alt_nfa__41_1351203238.463"
    push $P5002, "zw"
    push $P5002, "?!"
    push $P5002, "alt_nfa__42_1351203238.493"
    push $P5002, "$@"
    push $P5002, "__6MODEL_CORE__"
    push $P5002, "GLOBALish"
    push $P5002, "EXPORT"
    push $P5002, "55513D3AD249F7C9BD852BE8C803DA6CC8E551F6-1351203206.409"
    push $P5002, "src\\stage2\\gen\\nqp-mo.pm"
    push $P5002, "NQP::World"
    push $P5002, "NQP::Grammar"
    push $P5002, "alt_nfa__1_1351203215.947"
    push $P5002, "alt_nfa__2_1351203215.975"
    push $P5002, "alt_nfa__3_1351203216.037"
    push $P5002, "alt_nfa__4_1351203216.037"
    push $P5002, "alt_nfa__5_1351203216.055"
    push $P5002, "alt_nfa__6_1351203216.125"
    push $P5002, "alt_nfa__7_1351203216.137"
    push $P5002, "alt_nfa__8_1351203216.175"
    push $P5002, "alt_nfa__9_1351203216.211"
    push $P5002, "orig"
    push $P5002, "match"
    push $P5002, "bstack"
    push $P5002, "cstack"
    push $P5002, "regexsub"
    push $P5002, "restart"
    push $P5002, "NQP::Regex"
    push $P5002, "alt_nfa__1_1351203231.72"
    push $P5002, "alt_nfa__2_1351203231.725"
    push $P5002, "alt_nfa__3_1351203231.746"
    push $P5002, "alt_nfa__4_1351203231.791"
    push $P5002, "alt_nfa__5_1351203231.869"
    push $P5002, "alt_nfa__6_1351203231.888"
    push $P5002, "alt_nfa__7_1351203231.952"
    push $P5002, "alt_nfa__8_1351203232.02"
    push $P5002, "alt_nfa__9_1351203232.026"
    push $P5002, "alt_nfa__10_1351203232.1"
    push $P5002, "alt_nfa__11_1351203232.155"
    push $P5002, "alt_nfa__12_1351203232.166"
    push $P5002, "alt_nfa__13_1351203232.226"
    push $P5002, "alt_nfa__14_1351203232.235"
    push $P5002, "alt_nfa__15_1351203232.263"
    push $P5002, "alt_nfa__16_1351203232.27"
    push $P5002, "alt_nfa__17_1351203232.326"
    push $P5002, "alt_nfa__18_1351203232.326"
    push $P5002, "alt_nfa__19_1351203232.326"
    push $P5002, "alt_nfa__21_1351203232.352"
    push $P5002, "alt_nfa__22_1351203232.353"
    push $P5002, "alt_nfa__20_1351203232.333"
    push $P5002, "NQP::Actions"
    push $P5002, "NQP::RegexActions"
    push $P5002, "NQP::Compiler"
    push $P5002, "CompileTimeValue"
    push $P5002, "16DB1CA83A28E7980973C07333DCEC2A69D52B08-1351203210.868"
    push $P5002, "src\\stage2\\QASTNode.nqp"
    push $P5002, "SpecialArg"
    push $P5002, "Node"
    push $P5002, "Regex"
    push $P5002, "IVal"
    push $P5002, "NVal"
    push $P5002, "SVal"
    push $P5002, "BVal"
    push $P5002, "WVal"
    push $P5002, "Want"
    push $P5002, "Var"
    push $P5002, "VarWithFallback"
    push $P5002, "Op"
    push $P5002, "VM"
    push $P5002, "Stmts"
    push $P5002, "Stmt"
    push $P5002, "Block"
    push $P5002, "Unquote"
    push $P5002, "CompUnit"
    push $P5002, "InlinePlaceholder"
    push $P5002, "Operations"
    push $P5002, "54176830999514BE23687CFA2980070556E659F3-1351203220.352"
    push $P5002, "src\\stage2\\QAST.nqp"
    push $P5002, "Compiler"
    push $P5002, "NFA"
    push $P5002, "P6Regex"
    push $P5002, "Grammar"
    push $P5002, "Actions"
    push $P5002, "CommandLine"
    push $P5002, "World"
    push $P5002, "CallResult"
    push $P5002, "Sub"
    push $P5002, "Ops"
    push $P5002, "Label"
    push $P5002, "RegexActions"
    push $P5002, "Ee"
    push $P5002, "01"
    push $P5002, "01234567"
    push $P5002, "0123456789abcdefABCDEF"
    push $P5002, "?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    push $P5002, "dDnNsSwW"
    push $P5002, "bB"
    push $P5002, "eE"
    push $P5002, "fF"
    push $P5002, "hH"
    push $P5002, "rR"
    push $P5002, "tT"
    push $P5002, "vV"
    push $P5002, "oO"
    push $P5002, "xX"
    push $P5002, "cC"
    .const 'Sub' $P5003 = 'cuid_492_1351203235.318' 
    capture_lex $P5003
    $P5004 = $P5003()
    nqp_deserialize_sc "", cur_sc, $P5002, $P5004
    .const "LexInfo" $P5001 = "cuid_1_1351203235.318"
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    $P5001."set_static_lexpad_value"("GLOBALish", $P5002)
    .const "LexInfo" $P5003 = "cuid_1_1351203235.318"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_1_1351203235.318"
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 0
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_1_1351203235.318"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_1_1351203235.318"
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 1
    $P5001."set_static_lexpad_value"("EXPORT", $P5002)
    .const "LexInfo" $P5003 = "cuid_1_1351203235.318"
    $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_2_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 4
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_3_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 5
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_4_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 6
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_5_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 7
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_6_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 8
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_7_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 9
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_8_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 10
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_9_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 11
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_10_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 12
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_11_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 13
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_12_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 14
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_13_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 15
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_14_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 16
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_15_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 17
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_16_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 18
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_17_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 19
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_18_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 20
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_19_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 21
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_20_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 22
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_21_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 23
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_22_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 24
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_23_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 25
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_24_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 26
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_25_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 27
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_26_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 28
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_27_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 29
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_28_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 30
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_29_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 31
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_30_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 32
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_31_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 33
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_32_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 34
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_33_1351203235.318"
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_33_1351203235.318"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_33_1351203235.318"
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 3
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_33_1351203235.318"
    $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_34_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 36
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_35_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 37
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_36_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 38
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_37_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 39
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_38_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 40
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_39_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 41
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_40_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 42
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_41_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 43
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_42_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 44
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_43_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 45
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_44_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 46
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_45_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 47
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_46_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 48
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_47_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 49
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_48_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 50
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_49_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 51
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_50_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 52
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_51_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 53
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_52_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 54
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_53_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 55
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_54_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 56
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_55_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 57
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_56_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 58
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_57_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 59
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_58_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 60
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_59_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 61
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_60_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 62
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_61_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 63
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_62_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 64
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_63_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 65
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_64_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 66
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_65_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 67
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_66_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 68
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_67_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 69
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_68_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 70
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_69_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 71
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_70_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 72
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_71_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 73
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_72_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 74
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_73_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 75
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_74_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 76
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_75_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 77
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_76_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 78
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_77_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 79
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_78_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 80
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_79_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 81
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_80_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 82
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_81_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 83
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_82_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 84
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_83_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 85
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_84_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 86
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_85_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 87
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_86_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 88
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_87_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 89
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_88_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 90
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_89_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 91
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_90_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 92
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_91_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 93
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_92_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 94
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_93_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 95
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_94_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 96
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_95_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 97
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_96_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 98
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_97_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 99
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_98_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 100
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_99_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 101
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_100_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 102
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_101_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 103
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_102_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 104
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_103_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 105
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_104_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 106
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_105_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 107
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_106_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 108
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_107_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 109
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_108_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 110
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_109_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 111
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_110_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 112
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_111_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 113
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_112_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 114
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_113_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 115
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_114_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 116
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_115_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 117
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_116_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 118
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_117_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 119
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_118_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 120
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_119_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 121
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_120_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 122
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_121_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 123
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_122_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 124
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_123_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 125
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_124_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 126
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_125_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 127
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_126_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 128
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_127_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 129
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_128_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 130
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_129_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 131
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_130_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 132
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_131_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 133
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_132_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 134
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_133_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 135
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_134_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 136
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_135_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 137
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_136_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 138
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_137_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 139
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_138_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 140
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_139_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 141
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_140_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 142
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_141_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 143
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_142_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 144
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_143_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 145
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_144_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 146
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_145_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 147
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_146_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 148
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_147_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 149
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_148_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 150
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_149_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 151
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_150_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 152
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_151_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 153
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_152_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 154
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_153_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 155
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_154_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 156
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_155_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 157
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_156_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 158
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_157_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 159
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_158_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 160
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_159_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 161
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_160_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 162
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_161_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 163
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_162_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 164
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_163_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 165
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_164_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 166
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_165_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 167
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_166_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 168
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_167_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 169
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_168_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 170
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_169_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 171
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_170_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 172
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_171_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 173
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_172_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 174
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_173_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 175
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_174_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 176
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_175_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 177
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_176_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 178
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_177_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 179
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_178_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 180
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_179_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 181
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_180_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 182
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_181_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 183
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_182_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 184
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_183_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 185
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_184_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 186
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_185_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 187
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_186_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 188
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_187_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 189
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_188_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 190
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_189_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 191
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_190_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 192
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_191_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 193
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_192_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 194
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_193_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 195
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_194_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 196
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_195_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 197
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_196_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 198
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_197_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 199
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_198_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 200
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_199_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 201
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_200_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 202
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_201_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 203
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_202_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 204
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_203_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 205
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_204_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 206
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_205_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 207
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_206_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 208
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_207_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 209
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_208_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 210
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_209_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 211
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_210_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 212
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_211_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 213
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_212_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 214
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_213_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 215
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_214_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 216
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_215_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 217
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_216_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 218
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_217_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 219
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_218_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 220
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_219_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 221
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_220_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 222
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_221_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 223
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_222_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 224
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_223_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 225
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_224_1351203235.318"
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 35
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_224_1351203235.318"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_224_1351203235.318"
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 35
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_224_1351203235.318"
    $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_225_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 227
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_226_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 228
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_227_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 229
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_228_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 230
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_229_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 231
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_230_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 232
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_231_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 233
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_232_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 234
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_233_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 235
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_234_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 236
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_235_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 237
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_236_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 238
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_237_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 239
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_238_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 240
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_239_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 241
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_240_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 242
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_241_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 243
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_242_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 244
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_243_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 245
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_244_1351203235.318"
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 226
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_244_1351203235.318"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_244_1351203235.318"
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 226
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_244_1351203235.318"
    $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_245_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 247
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_246_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 248
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_247_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 249
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_248_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 250
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_249_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 251
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_250_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 252
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_251_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 253
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_252_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 254
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_253_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 255
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_254_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 256
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_255_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 257
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_256_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 258
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_257_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 259
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_258_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 260
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_259_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 261
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_260_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 262
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_261_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 263
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_262_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 264
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_263_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 265
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_264_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 266
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_265_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 267
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_266_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 268
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_267_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 269
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_268_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 270
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_269_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 271
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_270_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 272
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_271_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 273
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_272_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 274
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_273_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 275
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_274_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 276
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_275_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 277
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_276_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 278
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_277_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 279
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_278_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 280
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_279_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 281
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_280_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 282
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_281_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 283
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_282_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 284
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_283_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 285
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_284_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 286
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_285_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 287
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_286_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 288
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_287_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 289
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_288_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 290
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_289_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 291
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_290_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 292
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_291_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 293
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_292_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 294
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_293_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 295
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_294_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 296
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_295_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 297
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_296_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 298
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_297_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 299
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_298_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 300
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_299_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 301
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_300_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 302
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_301_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 303
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_302_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 304
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_303_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 305
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_304_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 306
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_305_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 307
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_306_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 308
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_307_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 309
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_308_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 310
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_309_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 311
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_310_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 312
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_311_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 313
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_312_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 314
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_313_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 315
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_314_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 316
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_315_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 317
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_316_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 318
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_317_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 319
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_318_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 320
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_319_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 321
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_320_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 322
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_321_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 323
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_322_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 324
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_323_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 325
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_324_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 326
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_325_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 327
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_326_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 328
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_327_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 329
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_328_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 330
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_329_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 331
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_330_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 332
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_331_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 333
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_332_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 334
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_333_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 335
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_334_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 336
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_335_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 337
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_336_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 338
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_337_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 339
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_338_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 340
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_339_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 341
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_340_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 342
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_341_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 343
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_342_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 344
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_343_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 345
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_344_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 346
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_345_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 347
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_346_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 348
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_347_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 349
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_348_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 350
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_349_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 351
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_350_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 352
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_351_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 353
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_352_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 354
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_353_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 355
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_354_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 356
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_355_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 357
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_356_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 358
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_357_1351203235.318"
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 246
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_357_1351203235.318"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_357_1351203235.318"
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 246
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_357_1351203235.318"
    $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_358_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 360
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_359_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 361
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_360_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 362
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_361_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 363
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_362_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 364
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_363_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 365
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_364_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 366
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_365_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 367
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_366_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 368
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_367_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 369
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_368_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 370
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_369_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 371
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_370_1351203235.318" 
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 372
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_371_1351203235.318"
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 359
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_371_1351203235.318"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_371_1351203235.318"
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 359
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_371_1351203235.318"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_372_1351203235.318"
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 373
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_372_1351203235.318"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_372_1351203235.318"
    nqp_get_sc_object $P5002, "25BC24E15E26BCC30D879716A4AED08FD9C62FCC-1351203235.344", 373
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_372_1351203235.318"
    $P5004 = $P5003."finish_static_lexpad"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_492_1351203235.318") :anon :lex :outer("cuid_493_1351203235.318")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    .const 'Sub' $P5002 = "cuid_2_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_3_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_4_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_5_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_6_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_7_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_8_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_9_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_10_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_11_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_12_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_13_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_14_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_15_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_16_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_17_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_18_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_19_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_20_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_21_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_22_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_23_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_24_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_25_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_26_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_27_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_28_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_29_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_30_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_31_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_32_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_34_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_35_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_36_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_37_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_38_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_39_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_40_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_41_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_42_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_43_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_44_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_45_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_46_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_47_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_48_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_49_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_50_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_51_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_52_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_53_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_54_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_55_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_56_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_57_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_58_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_59_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_60_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_61_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_62_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_63_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_64_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_65_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_66_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_67_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_68_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_69_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_70_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_71_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_72_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_73_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_74_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_75_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_76_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_77_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_78_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_79_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_80_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_81_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_82_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_83_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_84_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_85_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_86_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_87_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_88_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_89_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_90_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_91_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_92_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_93_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_94_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_95_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_96_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_97_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_98_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_99_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_100_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_101_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_102_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_103_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_104_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_105_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_106_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_107_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_108_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_109_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_110_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_111_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_112_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_113_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_114_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_115_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_116_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_117_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_118_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_119_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_120_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_121_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_122_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_123_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_124_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_125_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_126_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_127_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_128_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_129_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_130_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_131_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_132_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_133_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_134_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_135_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_136_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_137_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_138_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_139_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_140_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_141_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_142_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_143_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_144_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_145_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_146_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_147_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_148_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_149_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_150_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_151_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_152_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_153_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_154_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_155_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_156_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_157_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_158_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_159_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_160_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_161_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_162_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_163_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_164_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_165_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_166_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_167_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_168_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_169_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_170_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_171_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_172_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_173_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_174_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_175_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_176_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_177_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_178_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_179_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_180_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_181_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_182_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_183_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_184_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_185_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_186_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_187_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_188_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_189_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_190_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_191_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_192_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_193_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_194_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_195_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_196_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_197_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_198_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_199_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_200_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_201_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_202_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_203_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_204_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_205_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_206_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_207_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_208_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_209_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_210_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_211_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_212_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_213_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_214_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_215_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_216_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_217_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_218_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_219_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_220_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_221_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_222_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_223_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_225_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_226_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_227_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_228_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_229_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_230_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_231_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_232_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_233_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_234_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_235_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_236_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_237_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_238_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_239_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_240_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_241_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_242_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_243_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_245_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_246_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_247_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_248_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_249_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_250_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_251_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_252_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_253_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_254_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_255_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_256_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_257_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_258_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_259_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_260_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_261_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_262_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_263_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_264_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_265_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_266_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_267_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_268_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_269_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_270_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_271_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_272_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_273_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_274_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_275_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_276_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_277_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_278_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_279_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_280_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_281_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_282_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_283_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_284_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_285_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_286_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_287_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_288_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_289_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_290_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_291_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_292_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_293_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_294_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_295_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_296_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_297_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_298_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_299_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_300_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_301_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_302_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_303_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_304_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_305_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_306_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_307_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_308_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_309_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_310_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_311_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_312_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_313_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_314_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_315_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_316_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_317_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_318_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_319_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_320_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_321_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_322_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_323_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_324_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_325_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_326_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_327_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_328_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_329_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_330_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_331_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_332_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_333_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_334_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_335_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_336_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_337_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_338_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_339_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_340_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_341_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_342_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_343_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_344_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_345_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_346_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_347_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_348_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_349_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_350_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_351_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_352_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_353_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_354_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_355_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_356_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_358_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_359_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_360_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_361_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_362_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_363_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_364_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_365_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_366_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_367_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_368_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_369_1351203235.318" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_370_1351203235.318" 
    push $P5001, $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_494_1351203235.318") :load
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P5001 = "cuid_1_1351203235.318" 
    $P5002 = $P5001()
    .return ($P5002) 
.end