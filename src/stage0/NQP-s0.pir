# Copyright (C) 2009, The Perl Foundation.

=head1 NAME

NQP::Compiler - NQP compiler

=head1 DESCRIPTION

=cut

.HLL 'nqp'

# Initialize meta-model.
.loadlib "nqp_group"
.loadlib "nqp_ops"
.sub '' :anon :load :init
    nqp_dynop_setup

    .local pmc interp, lexpad, nqplexpad
    interp = getinterp
    lexpad = get_class 'LexPad'
    nqplexpad = get_class 'NQPLexPad'
    interp.'hll_map'(lexpad, nqplexpad)
    
    load_bytecode 'SettingManager.pbc'
    load_bytecode 'nqpmo.pbc'
.end

.sub '' :anon :load :init
    load_bytecode 'P6Regex.pbc'
    
    ## Bring in PAST and PCT
    .local pmc hllns, parrotns, imports
    hllns = get_hll_namespace
    parrotns = get_root_namespace ['parrot']
    imports = split ' ', 'PAST PCT'
    parrotns.'export_to'(hllns, imports)
.end

### .include 'gen/nqp-grammar.pir'

.HLL "nqp"

.loadlib "nqp_group"

.loadlib "nqp_ops"

.namespace []
.sub "_block11"  :anon :subid("10_1299591493.348")
.annotate 'line', 0
    get_hll_global $P18, ["NQP";"Grammar"], "_block17" 
    capture_lex $P18
.annotate 'line', 1
    getinterp $P13
    get_class $P14, "LexPad"
    get_class $P15, "NQPLexPad"
    $P13."hll_map"($P14, $P15)
    get_hll_global $P16, ["NQP"], "Grammar"
    $P0 = find_dynamic_lex "$*CTXSAVE"
    if null $P0 goto ctxsave_done
    $I0 = can $P0, "ctxsave"
    unless $I0 goto ctxsave_done
    $P0."ctxsave"()
  ctxsave_done:
.annotate 'line', 4
    get_hll_global $P18, ["NQP";"Grammar"], "_block17" 
    capture_lex $P18
    $P2481 = $P18()
.annotate 'line', 1
    .return ($P2481)
    .const 'Sub' $P2483 = "403_1299591493.348" 
    .return ($P2483)
.end


.HLL "nqp"

.namespace []
.sub "" :load :init :subid("post404") :outer("10_1299591493.348")
.annotate 'line', 0
    .const 'Sub' $P12 = "10_1299591493.348" 
    .local pmc block
    set block, $P12
    nqp_get_sc $P2487, "1299591487.57"
    isnull $I2488, $P2487
    if $I2488, if_2486
    goto if_2486_end
  if_2486:
    nqp_dynop_setup 
    load_bytecode "nqpmo.pbc"
    nqp_create_sc $P2489, "1299591487.57"
    load_bytecode "SettingManager.pbc"
    get_hll_global $P2490, ["HLL"], "SettingManager"
    $P2491 = $P2490."load_setting"("NQPCORE")
    block."set_outer_ctx"($P2491)
  if_2486_end:
.end


.HLL "nqp"

.loadlib "nqp_group"

.loadlib "nqp_ops"

.namespace ["NQP";"Grammar"]
.sub "_block17"  :subid("11_1299591493.348") :outer("10_1299591493.348")
.annotate 'line', 4
    .const 'Sub' $P1766 = "402_1299591493.348" 
    capture_lex $P1766
    get_hll_global $P1651, ["NQP";"Regex"], "_block1650" 
    capture_lex $P1651
    .const 'Sub' $P1639 = "378_1299591493.348" 
    capture_lex $P1639
    .const 'Sub' $P1633 = "376_1299591493.348" 
    capture_lex $P1633
    .const 'Sub' $P1627 = "374_1299591493.348" 
    capture_lex $P1627
    .const 'Sub' $P1621 = "372_1299591493.348" 
    capture_lex $P1621
    .const 'Sub' $P1615 = "370_1299591493.348" 
    capture_lex $P1615
    .const 'Sub' $P1603 = "367_1299591493.348" 
    capture_lex $P1603
    .const 'Sub' $P1596 = "365_1299591493.348" 
    capture_lex $P1596
    .const 'Sub' $P1589 = "363_1299591493.348" 
    capture_lex $P1589
    .const 'Sub' $P1582 = "361_1299591493.348" 
    capture_lex $P1582
    .const 'Sub' $P1575 = "359_1299591493.348" 
    capture_lex $P1575
    .const 'Sub' $P1569 = "357_1299591493.348" 
    capture_lex $P1569
    .const 'Sub' $P1562 = "355_1299591493.348" 
    capture_lex $P1562
    .const 'Sub' $P1555 = "353_1299591493.348" 
    capture_lex $P1555
    .const 'Sub' $P1548 = "351_1299591493.348" 
    capture_lex $P1548
    .const 'Sub' $P1541 = "349_1299591493.348" 
    capture_lex $P1541
    .const 'Sub' $P1534 = "347_1299591493.348" 
    capture_lex $P1534
    .const 'Sub' $P1527 = "345_1299591493.348" 
    capture_lex $P1527
    .const 'Sub' $P1520 = "343_1299591493.348" 
    capture_lex $P1520
    .const 'Sub' $P1513 = "341_1299591493.348" 
    capture_lex $P1513
    .const 'Sub' $P1506 = "339_1299591493.348" 
    capture_lex $P1506
    .const 'Sub' $P1499 = "337_1299591493.348" 
    capture_lex $P1499
    .const 'Sub' $P1492 = "335_1299591493.348" 
    capture_lex $P1492
    .const 'Sub' $P1485 = "333_1299591493.348" 
    capture_lex $P1485
    .const 'Sub' $P1478 = "331_1299591493.348" 
    capture_lex $P1478
    .const 'Sub' $P1471 = "329_1299591493.348" 
    capture_lex $P1471
    .const 'Sub' $P1464 = "327_1299591493.348" 
    capture_lex $P1464
    .const 'Sub' $P1457 = "325_1299591493.348" 
    capture_lex $P1457
    .const 'Sub' $P1450 = "323_1299591493.348" 
    capture_lex $P1450
    .const 'Sub' $P1443 = "321_1299591493.348" 
    capture_lex $P1443
    .const 'Sub' $P1436 = "319_1299591493.348" 
    capture_lex $P1436
    .const 'Sub' $P1429 = "317_1299591493.348" 
    capture_lex $P1429
    .const 'Sub' $P1422 = "315_1299591493.348" 
    capture_lex $P1422
    .const 'Sub' $P1415 = "313_1299591493.348" 
    capture_lex $P1415
    .const 'Sub' $P1408 = "311_1299591493.348" 
    capture_lex $P1408
    .const 'Sub' $P1401 = "309_1299591493.348" 
    capture_lex $P1401
    .const 'Sub' $P1394 = "307_1299591493.348" 
    capture_lex $P1394
    .const 'Sub' $P1387 = "305_1299591493.348" 
    capture_lex $P1387
    .const 'Sub' $P1380 = "303_1299591493.348" 
    capture_lex $P1380
    .const 'Sub' $P1373 = "301_1299591493.348" 
    capture_lex $P1373
    .const 'Sub' $P1366 = "299_1299591493.348" 
    capture_lex $P1366
    .const 'Sub' $P1360 = "297_1299591493.348" 
    capture_lex $P1360
    .const 'Sub' $P1353 = "295_1299591493.348" 
    capture_lex $P1353
    .const 'Sub' $P1346 = "293_1299591493.348" 
    capture_lex $P1346
    .const 'Sub' $P1339 = "291_1299591493.348" 
    capture_lex $P1339
    .const 'Sub' $P1332 = "289_1299591493.348" 
    capture_lex $P1332
    .const 'Sub' $P1325 = "287_1299591493.348" 
    capture_lex $P1325
    .const 'Sub' $P1318 = "285_1299591493.348" 
    capture_lex $P1318
    .const 'Sub' $P1311 = "283_1299591493.348" 
    capture_lex $P1311
    .const 'Sub' $P1305 = "281_1299591493.348" 
    capture_lex $P1305
    .const 'Sub' $P1299 = "279_1299591493.348" 
    capture_lex $P1299
    .const 'Sub' $P1294 = "277_1299591493.348" 
    capture_lex $P1294
    .const 'Sub' $P1288 = "275_1299591493.348" 
    capture_lex $P1288
    .const 'Sub' $P1282 = "273_1299591493.348" 
    capture_lex $P1282
    .const 'Sub' $P1277 = "271_1299591493.348" 
    capture_lex $P1277
    .const 'Sub' $P1272 = "269_1299591493.348" 
    capture_lex $P1272
    .const 'Sub' $P1256 = "268_1299591493.348" 
    capture_lex $P1256
    .const 'Sub' $P1247 = "266_1299591493.348" 
    capture_lex $P1247
    .const 'Sub' $P1238 = "264_1299591493.348" 
    capture_lex $P1238
    .const 'Sub' $P1233 = "262_1299591493.348" 
    capture_lex $P1233
    .const 'Sub' $P1228 = "260_1299591493.348" 
    capture_lex $P1228
    .const 'Sub' $P1223 = "258_1299591493.348" 
    capture_lex $P1223
    .const 'Sub' $P1215 = "256_1299591493.348" 
    capture_lex $P1215
    .const 'Sub' $P1207 = "254_1299591493.348" 
    capture_lex $P1207
    .const 'Sub' $P1202 = "252_1299591493.348" 
    capture_lex $P1202
    .const 'Sub' $P1197 = "250_1299591493.348" 
    capture_lex $P1197
    .const 'Sub' $P1192 = "248_1299591493.348" 
    capture_lex $P1192
    .const 'Sub' $P1186 = "246_1299591493.348" 
    capture_lex $P1186
    .const 'Sub' $P1180 = "244_1299591493.348" 
    capture_lex $P1180
    .const 'Sub' $P1174 = "242_1299591493.348" 
    capture_lex $P1174
    .const 'Sub' $P1168 = "240_1299591493.348" 
    capture_lex $P1168
    .const 'Sub' $P1162 = "238_1299591493.348" 
    capture_lex $P1162
    .const 'Sub' $P1157 = "236_1299591493.348" 
    capture_lex $P1157
    .const 'Sub' $P1152 = "234_1299591493.348" 
    capture_lex $P1152
    .const 'Sub' $P1138 = "230_1299591493.348" 
    capture_lex $P1138
    .const 'Sub' $P1130 = "228_1299591493.348" 
    capture_lex $P1130
    .const 'Sub' $P1124 = "226_1299591493.348" 
    capture_lex $P1124
    .const 'Sub' $P1117 = "224_1299591493.348" 
    capture_lex $P1117
    .const 'Sub' $P1111 = "222_1299591493.348" 
    capture_lex $P1111
    .const 'Sub' $P1097 = "219_1299591493.348" 
    capture_lex $P1097
    .const 'Sub' $P1089 = "217_1299591493.348" 
    capture_lex $P1089
    .const 'Sub' $P1081 = "215_1299591493.348" 
    capture_lex $P1081
    .const 'Sub' $P1075 = "213_1299591493.348" 
    capture_lex $P1075
    .const 'Sub' $P1069 = "211_1299591493.348" 
    capture_lex $P1069
    .const 'Sub' $P1053 = "207_1299591493.348" 
    capture_lex $P1053
    .const 'Sub' $P1012 = "205_1299591493.348" 
    capture_lex $P1012
    .const 'Sub' $P1001 = "203_1299591493.348" 
    capture_lex $P1001
    .const 'Sub' $P987 = "199_1299591493.348" 
    capture_lex $P987
    .const 'Sub' $P978 = "197_1299591493.348" 
    capture_lex $P978
    .const 'Sub' $P972 = "195_1299591493.348" 
    capture_lex $P972
    .const 'Sub' $P962 = "193_1299591493.348" 
    capture_lex $P962
    .const 'Sub' $P947 = "191_1299591493.348" 
    capture_lex $P947
    .const 'Sub' $P933 = "188_1299591493.348" 
    capture_lex $P933
    .const 'Sub' $P925 = "186_1299591493.348" 
    capture_lex $P925
    .const 'Sub' $P915 = "184_1299591493.348" 
    capture_lex $P915
    .const 'Sub' $P905 = "182_1299591493.348" 
    capture_lex $P905
    .const 'Sub' $P886 = "177_1299591493.348" 
    capture_lex $P886
    .const 'Sub' $P842 = "174_1299591493.348" 
    capture_lex $P842
    .const 'Sub' $P808 = "172_1299591493.348" 
    capture_lex $P808
    .const 'Sub' $P801 = "170_1299591493.348" 
    capture_lex $P801
    .const 'Sub' $P794 = "168_1299591493.348" 
    capture_lex $P794
    .const 'Sub' $P777 = "164_1299591493.348" 
    capture_lex $P777
    .const 'Sub' $P769 = "162_1299591493.348" 
    capture_lex $P769
    .const 'Sub' $P763 = "160_1299591493.348" 
    capture_lex $P763
    .const 'Sub' $P750 = "158_1299591493.348" 
    capture_lex $P750
    .const 'Sub' $P743 = "156_1299591493.348" 
    capture_lex $P743
    .const 'Sub' $P736 = "154_1299591493.348" 
    capture_lex $P736
    .const 'Sub' $P729 = "152_1299591493.348" 
    capture_lex $P729
    .const 'Sub' $P654 = "147_1299591493.348" 
    capture_lex $P654
    .const 'Sub' $P642 = "145_1299591493.348" 
    capture_lex $P642
    .const 'Sub' $P630 = "143_1299591493.348" 
    capture_lex $P630
    .const 'Sub' $P618 = "141_1299591493.348" 
    capture_lex $P618
    .const 'Sub' $P606 = "139_1299591493.348" 
    capture_lex $P606
    .const 'Sub' $P594 = "137_1299591493.348" 
    capture_lex $P594
    .const 'Sub' $P582 = "135_1299591493.348" 
    capture_lex $P582
    .const 'Sub' $P571 = "131_1299591493.348" 
    capture_lex $P571
    .const 'Sub' $P566 = "129_1299591493.348" 
    capture_lex $P566
    .const 'Sub' $P554 = "127_1299591493.348" 
    capture_lex $P554
    .const 'Sub' $P542 = "125_1299591493.348" 
    capture_lex $P542
    .const 'Sub' $P535 = "123_1299591493.348" 
    capture_lex $P535
    .const 'Sub' $P530 = "121_1299591493.348" 
    capture_lex $P530
    .const 'Sub' $P524 = "119_1299591493.348" 
    capture_lex $P524
    .const 'Sub' $P518 = "117_1299591493.348" 
    capture_lex $P518
    .const 'Sub' $P503 = "113_1299591493.348" 
    capture_lex $P503
    .const 'Sub' $P497 = "111_1299591493.348" 
    capture_lex $P497
    .const 'Sub' $P491 = "109_1299591493.348" 
    capture_lex $P491
    .const 'Sub' $P485 = "107_1299591493.348" 
    capture_lex $P485
    .const 'Sub' $P479 = "105_1299591493.348" 
    capture_lex $P479
    .const 'Sub' $P473 = "103_1299591493.348" 
    capture_lex $P473
    .const 'Sub' $P467 = "101_1299591493.348" 
    capture_lex $P467
    .const 'Sub' $P458 = "99_1299591493.348" 
    capture_lex $P458
    .const 'Sub' $P449 = "97_1299591493.348" 
    capture_lex $P449
    .const 'Sub' $P440 = "95_1299591493.348" 
    capture_lex $P440
    .const 'Sub' $P425 = "91_1299591493.348" 
    capture_lex $P425
    .const 'Sub' $P416 = "89_1299591493.348" 
    capture_lex $P416
    .const 'Sub' $P404 = "85_1299591493.348" 
    capture_lex $P404
    .const 'Sub' $P397 = "83_1299591493.348" 
    capture_lex $P397
    .const 'Sub' $P390 = "81_1299591493.348" 
    capture_lex $P390
    .const 'Sub' $P376 = "77_1299591493.348" 
    capture_lex $P376
    .const 'Sub' $P368 = "75_1299591493.348" 
    capture_lex $P368
    .const 'Sub' $P360 = "73_1299591493.348" 
    capture_lex $P360
    .const 'Sub' $P340 = "71_1299591493.348" 
    capture_lex $P340
    .const 'Sub' $P331 = "69_1299591493.348" 
    capture_lex $P331
    .const 'Sub' $P313 = "66_1299591493.348" 
    capture_lex $P313
    .const 'Sub' $P295 = "64_1299591493.348" 
    capture_lex $P295
    .const 'Sub' $P284 = "60_1299591493.348" 
    capture_lex $P284
    .const 'Sub' $P279 = "58_1299591493.348" 
    capture_lex $P279
    .const 'Sub' $P268 = "54_1299591493.348" 
    capture_lex $P268
    .const 'Sub' $P263 = "52_1299591493.348" 
    capture_lex $P263
    .const 'Sub' $P258 = "50_1299591493.348" 
    capture_lex $P258
    .const 'Sub' $P253 = "48_1299591493.348" 
    capture_lex $P253
    .const 'Sub' $P243 = "46_1299591493.348" 
    capture_lex $P243
    .const 'Sub' $P236 = "44_1299591493.348" 
    capture_lex $P236
    .const 'Sub' $P230 = "42_1299591493.348" 
    capture_lex $P230
    .const 'Sub' $P222 = "40_1299591493.348" 
    capture_lex $P222
    .const 'Sub' $P216 = "38_1299591493.348" 
    capture_lex $P216
    .const 'Sub' $P210 = "36_1299591493.348" 
    capture_lex $P210
    .const 'Sub' $P195 = "33_1299591493.348" 
    capture_lex $P195
    .const 'Sub' $P181 = "31_1299591493.348" 
    capture_lex $P181
    .const 'Sub' $P172 = "29_1299591493.348" 
    capture_lex $P172
    .const 'Sub' $P133 = "26_1299591493.348" 
    capture_lex $P133
    .const 'Sub' $P118 = "23_1299591493.348" 
    capture_lex $P118
    .const 'Sub' $P107 = "21_1299591493.348" 
    capture_lex $P107
    .const 'Sub' $P95 = "19_1299591493.348" 
    capture_lex $P95
    .const 'Sub' $P87 = "17_1299591493.348" 
    capture_lex $P87
    .const 'Sub' $P80 = "15_1299591493.348" 
    capture_lex $P80
    .const 'Sub' $P73 = "13_1299591493.348" 
    capture_lex $P73
    .const 'Sub' $P24 = "12_1299591493.348" 
    capture_lex $P24
    get_global $P19, "$?CLASS"
    getinterp $P20
    get_class $P21, "LexPad"
    get_class $P22, "NQPLexPad"
    $P20."hll_map"($P21, $P22)
    get_hll_global $P23, ["NQP"], "Regex"
    $P0 = find_dynamic_lex "$*CTXSAVE"
    if null $P0 goto ctxsave_done
    $I0 = can $P0, "ctxsave"
    unless $I0 goto ctxsave_done
    $P0."ctxsave"()
  ctxsave_done:
    .const 'Sub' $P1256 = "268_1299591493.348" 
    capture_lex $P1256
    $P1256()
.annotate 'line', 686
    get_hll_global $P1651, ["NQP";"Regex"], "_block1650" 
    capture_lex $P1651
    $P1754 = $P1651()
.annotate 'line', 4
    .return ($P1754)
    .const 'Sub' $P1756 = "401_1299591493.348" 
    .return ($P1756)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "" :load :init :subid("post405") :outer("11_1299591493.348")
.annotate 'line', 4
    get_hll_global $P18, ["NQP";"Grammar"], "_block17" 
    .local pmc block
    set block, $P18
    nqp_get_sc $P1760, "1299591487.57"
    isnull $I1761, $P1760
    if $I1761, if_1759
    goto if_1759_end
  if_1759:
    nqp_dynop_setup 
    load_bytecode "nqpmo.pbc"
    nqp_create_sc $P1762, "1299591487.57"
    load_bytecode "SettingManager.pbc"
    get_hll_global $P1763, ["HLL"], "SettingManager"
    $P1764 = $P1763."load_setting"("NQPCORE")
    block."set_outer_ctx"($P1764)
  if_1759_end:
    .const 'Sub' $P1766 = "402_1299591493.348" 
    capture_lex $P1766
    $P1766()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1765"  :anon :subid("402_1299591493.348") :outer("11_1299591493.348")
.annotate 'line', 4
    get_hll_global $P1767, "NQPClassHOW"
    $P1768 = $P1767."new_type"("Grammar" :named("name"))
    .local pmc type_obj
    set type_obj, $P1768
    set_hll_global ["NQP"], "Grammar", type_obj
    set_global "$?CLASS", type_obj
    get_how $P1769, type_obj
    .const 'Sub' $P1770 = "12_1299591493.348" 
    $P1769."add_method"(type_obj, "TOP", $P1770)
    get_how $P1771, type_obj
    .const 'Sub' $P1772 = "13_1299591493.348" 
    $P1771."add_method"(type_obj, "identifier", $P1772)
    get_how $P1773, type_obj
    get_global $P1774, "!PREFIX__identifier"
    $P1773."add_method"(type_obj, "!PREFIX__identifier", $P1774)
    get_how $P1775, type_obj
    .const 'Sub' $P1776 = "15_1299591493.348" 
    $P1775."add_method"(type_obj, "name", $P1776)
    get_how $P1777, type_obj
    get_global $P1778, "!PREFIX__name"
    $P1777."add_method"(type_obj, "!PREFIX__name", $P1778)
    get_how $P1779, type_obj
    .const 'Sub' $P1780 = "17_1299591493.348" 
    $P1779."add_method"(type_obj, "deflongname", $P1780)
    get_how $P1781, type_obj
    get_global $P1782, "!PREFIX__deflongname"
    $P1781."add_method"(type_obj, "!PREFIX__deflongname", $P1782)
    get_how $P1783, type_obj
    .const 'Sub' $P1784 = "19_1299591493.348" 
    $P1783."add_method"(type_obj, "ENDSTMT", $P1784)
    get_how $P1785, type_obj
    get_global $P1786, "!PREFIX__ENDSTMT"
    $P1785."add_method"(type_obj, "!PREFIX__ENDSTMT", $P1786)
    get_how $P1787, type_obj
    .const 'Sub' $P1788 = "21_1299591493.348" 
    $P1787."add_method"(type_obj, "ws", $P1788)
    get_how $P1789, type_obj
    get_global $P1790, "!PREFIX__ws"
    $P1789."add_method"(type_obj, "!PREFIX__ws", $P1790)
    get_how $P1791, type_obj
    .const 'Sub' $P1792 = "23_1299591493.348" 
    $P1791."add_method"(type_obj, "unv", $P1792)
    get_how $P1793, type_obj
    get_global $P1794, "!PREFIX__unv"
    $P1793."add_method"(type_obj, "!PREFIX__unv", $P1794)
    get_how $P1795, type_obj
    .const 'Sub' $P1796 = "26_1299591493.348" 
    $P1795."add_method"(type_obj, "pod_comment", $P1796)
    get_how $P1797, type_obj
    get_global $P1798, "!PREFIX__pod_comment"
    $P1797."add_method"(type_obj, "!PREFIX__pod_comment", $P1798)
    get_how $P1799, type_obj
    .const 'Sub' $P1800 = "29_1299591493.348" 
    $P1799."add_method"(type_obj, "comp_unit", $P1800)
    get_how $P1801, type_obj
    get_global $P1802, "!PREFIX__comp_unit"
    $P1801."add_method"(type_obj, "!PREFIX__comp_unit", $P1802)
    get_how $P1803, type_obj
    .const 'Sub' $P1804 = "31_1299591493.348" 
    $P1803."add_method"(type_obj, "statementlist", $P1804)
    get_how $P1805, type_obj
    get_global $P1806, "!PREFIX__statementlist"
    $P1805."add_method"(type_obj, "!PREFIX__statementlist", $P1806)
    get_how $P1807, type_obj
    .const 'Sub' $P1808 = "33_1299591493.348" 
    $P1807."add_method"(type_obj, "statement", $P1808)
    get_how $P1809, type_obj
    get_global $P1810, "!PREFIX__statement"
    $P1809."add_method"(type_obj, "!PREFIX__statement", $P1810)
    get_how $P1811, type_obj
    .const 'Sub' $P1812 = "36_1299591493.348" 
    $P1811."add_method"(type_obj, "eat_terminator", $P1812)
    get_how $P1813, type_obj
    get_global $P1814, "!PREFIX__eat_terminator"
    $P1813."add_method"(type_obj, "!PREFIX__eat_terminator", $P1814)
    get_how $P1815, type_obj
    .const 'Sub' $P1816 = "38_1299591493.348" 
    $P1815."add_method"(type_obj, "xblock", $P1816)
    get_how $P1817, type_obj
    get_global $P1818, "!PREFIX__xblock"
    $P1817."add_method"(type_obj, "!PREFIX__xblock", $P1818)
    get_how $P1819, type_obj
    .const 'Sub' $P1820 = "40_1299591493.348" 
    $P1819."add_method"(type_obj, "pblock", $P1820)
    get_how $P1821, type_obj
    get_global $P1822, "!PREFIX__pblock"
    $P1821."add_method"(type_obj, "!PREFIX__pblock", $P1822)
    get_how $P1823, type_obj
    .const 'Sub' $P1824 = "42_1299591493.348" 
    $P1823."add_method"(type_obj, "lambda", $P1824)
    get_how $P1825, type_obj
    get_global $P1826, "!PREFIX__lambda"
    $P1825."add_method"(type_obj, "!PREFIX__lambda", $P1826)
    get_how $P1827, type_obj
    .const 'Sub' $P1828 = "44_1299591493.348" 
    $P1827."add_method"(type_obj, "block", $P1828)
    get_how $P1829, type_obj
    get_global $P1830, "!PREFIX__block"
    $P1829."add_method"(type_obj, "!PREFIX__block", $P1830)
    get_how $P1831, type_obj
    .const 'Sub' $P1832 = "46_1299591493.348" 
    $P1831."add_method"(type_obj, "blockoid", $P1832)
    get_how $P1833, type_obj
    get_global $P1834, "!PREFIX__blockoid"
    $P1833."add_method"(type_obj, "!PREFIX__blockoid", $P1834)
    get_how $P1835, type_obj
    .const 'Sub' $P1836 = "48_1299591493.348" 
    $P1835."add_method"(type_obj, "newpad", $P1836)
    get_how $P1837, type_obj
    get_global $P1838, "!PREFIX__newpad"
    $P1837."add_method"(type_obj, "!PREFIX__newpad", $P1838)
    get_how $P1839, type_obj
    .const 'Sub' $P1840 = "50_1299591493.348" 
    $P1839."add_method"(type_obj, "outerctx", $P1840)
    get_how $P1841, type_obj
    get_global $P1842, "!PREFIX__outerctx"
    $P1841."add_method"(type_obj, "!PREFIX__outerctx", $P1842)
    get_how $P1843, type_obj
    .const 'Sub' $P1844 = "52_1299591493.348" 
    $P1843."add_method"(type_obj, "finishpad", $P1844)
    get_how $P1845, type_obj
    get_global $P1846, "!PREFIX__finishpad"
    $P1845."add_method"(type_obj, "!PREFIX__finishpad", $P1846)
    get_how $P1847, type_obj
    .const 'Sub' $P1848 = "54_1299591493.348" 
    $P1847."add_method"(type_obj, "you_are_here", $P1848)
    get_how $P1849, type_obj
    get_global $P1850, "!PREFIX__you_are_here"
    $P1849."add_method"(type_obj, "!PREFIX__you_are_here", $P1850)
    get_how $P1851, type_obj
    .const 'Sub' $P1852 = "56_1299591493.348" 
    $P1851."add_method"(type_obj, "terminator", $P1852)
    get_how $P1853, type_obj
    .const 'Sub' $P1854 = "57_1299591493.348" 
    $P1853."add_method"(type_obj, "!PREFIX__terminator", $P1854)
    get_how $P1855, type_obj
    .const 'Sub' $P1856 = "58_1299591493.348" 
    $P1855."add_method"(type_obj, "terminator:sym<;>", $P1856)
    get_how $P1857, type_obj
    get_global $P1858, "!PREFIX__terminator:sym<;>"
    $P1857."add_method"(type_obj, "!PREFIX__terminator:sym<;>", $P1858)
    get_how $P1859, type_obj
    .const 'Sub' $P1860 = "60_1299591493.348" 
    $P1859."add_method"(type_obj, "terminator:sym<}>", $P1860)
    get_how $P1861, type_obj
    get_global $P1862, "!PREFIX__terminator:sym<}>"
    $P1861."add_method"(type_obj, "!PREFIX__terminator:sym<}>", $P1862)
    get_how $P1863, type_obj
    .const 'Sub' $P1864 = "62_1299591493.348" 
    $P1863."add_method"(type_obj, "statement_control", $P1864)
    get_how $P1865, type_obj
    .const 'Sub' $P1866 = "63_1299591493.348" 
    $P1865."add_method"(type_obj, "!PREFIX__statement_control", $P1866)
    get_how $P1867, type_obj
    .const 'Sub' $P1868 = "64_1299591493.348" 
    $P1867."add_method"(type_obj, "statement_control:sym<if>", $P1868)
    get_how $P1869, type_obj
    get_global $P1870, "!PREFIX__statement_control:sym<if>"
    $P1869."add_method"(type_obj, "!PREFIX__statement_control:sym<if>", $P1870)
    get_how $P1871, type_obj
    .const 'Sub' $P1872 = "66_1299591493.348" 
    $P1871."add_method"(type_obj, "statement_control:sym<unless>", $P1872)
    get_how $P1873, type_obj
    get_global $P1874, "!PREFIX__statement_control:sym<unless>"
    $P1873."add_method"(type_obj, "!PREFIX__statement_control:sym<unless>", $P1874)
    get_how $P1875, type_obj
    .const 'Sub' $P1876 = "69_1299591493.348" 
    $P1875."add_method"(type_obj, "statement_control:sym<while>", $P1876)
    get_how $P1877, type_obj
    get_global $P1878, "!PREFIX__statement_control:sym<while>"
    $P1877."add_method"(type_obj, "!PREFIX__statement_control:sym<while>", $P1878)
    get_how $P1879, type_obj
    .const 'Sub' $P1880 = "71_1299591493.348" 
    $P1879."add_method"(type_obj, "statement_control:sym<repeat>", $P1880)
    get_how $P1881, type_obj
    get_global $P1882, "!PREFIX__statement_control:sym<repeat>"
    $P1881."add_method"(type_obj, "!PREFIX__statement_control:sym<repeat>", $P1882)
    get_how $P1883, type_obj
    .const 'Sub' $P1884 = "73_1299591493.348" 
    $P1883."add_method"(type_obj, "statement_control:sym<for>", $P1884)
    get_how $P1885, type_obj
    get_global $P1886, "!PREFIX__statement_control:sym<for>"
    $P1885."add_method"(type_obj, "!PREFIX__statement_control:sym<for>", $P1886)
    get_how $P1887, type_obj
    .const 'Sub' $P1888 = "75_1299591493.348" 
    $P1887."add_method"(type_obj, "statement_control:sym<CATCH>", $P1888)
    get_how $P1889, type_obj
    get_global $P1890, "!PREFIX__statement_control:sym<CATCH>"
    $P1889."add_method"(type_obj, "!PREFIX__statement_control:sym<CATCH>", $P1890)
    get_how $P1891, type_obj
    .const 'Sub' $P1892 = "77_1299591493.348" 
    $P1891."add_method"(type_obj, "statement_control:sym<CONTROL>", $P1892)
    get_how $P1893, type_obj
    get_global $P1894, "!PREFIX__statement_control:sym<CONTROL>"
    $P1893."add_method"(type_obj, "!PREFIX__statement_control:sym<CONTROL>", $P1894)
    get_how $P1895, type_obj
    .const 'Sub' $P1896 = "79_1299591493.348" 
    $P1895."add_method"(type_obj, "statement_prefix", $P1896)
    get_how $P1897, type_obj
    .const 'Sub' $P1898 = "80_1299591493.348" 
    $P1897."add_method"(type_obj, "!PREFIX__statement_prefix", $P1898)
    get_how $P1899, type_obj
    .const 'Sub' $P1900 = "81_1299591493.348" 
    $P1899."add_method"(type_obj, "statement_prefix:sym<INIT>", $P1900)
    get_how $P1901, type_obj
    get_global $P1902, "!PREFIX__statement_prefix:sym<INIT>"
    $P1901."add_method"(type_obj, "!PREFIX__statement_prefix:sym<INIT>", $P1902)
    get_how $P1903, type_obj
    .const 'Sub' $P1904 = "83_1299591493.348" 
    $P1903."add_method"(type_obj, "statement_prefix:sym<try>", $P1904)
    get_how $P1905, type_obj
    get_global $P1906, "!PREFIX__statement_prefix:sym<try>"
    $P1905."add_method"(type_obj, "!PREFIX__statement_prefix:sym<try>", $P1906)
    get_how $P1907, type_obj
    .const 'Sub' $P1908 = "85_1299591493.348" 
    $P1907."add_method"(type_obj, "blorst", $P1908)
    get_how $P1909, type_obj
    get_global $P1910, "!PREFIX__blorst"
    $P1909."add_method"(type_obj, "!PREFIX__blorst", $P1910)
    get_how $P1911, type_obj
    .const 'Sub' $P1912 = "87_1299591493.348" 
    $P1911."add_method"(type_obj, "statement_mod_cond", $P1912)
    get_how $P1913, type_obj
    .const 'Sub' $P1914 = "88_1299591493.348" 
    $P1913."add_method"(type_obj, "!PREFIX__statement_mod_cond", $P1914)
    get_how $P1915, type_obj
    .const 'Sub' $P1916 = "89_1299591493.348" 
    $P1915."add_method"(type_obj, "statement_mod_cond:sym<if>", $P1916)
    get_how $P1917, type_obj
    get_global $P1918, "!PREFIX__statement_mod_cond:sym<if>"
    $P1917."add_method"(type_obj, "!PREFIX__statement_mod_cond:sym<if>", $P1918)
    get_how $P1919, type_obj
    .const 'Sub' $P1920 = "91_1299591493.348" 
    $P1919."add_method"(type_obj, "statement_mod_cond:sym<unless>", $P1920)
    get_how $P1921, type_obj
    get_global $P1922, "!PREFIX__statement_mod_cond:sym<unless>"
    $P1921."add_method"(type_obj, "!PREFIX__statement_mod_cond:sym<unless>", $P1922)
    get_how $P1923, type_obj
    .const 'Sub' $P1924 = "93_1299591493.348" 
    $P1923."add_method"(type_obj, "statement_mod_loop", $P1924)
    get_how $P1925, type_obj
    .const 'Sub' $P1926 = "94_1299591493.348" 
    $P1925."add_method"(type_obj, "!PREFIX__statement_mod_loop", $P1926)
    get_how $P1927, type_obj
    .const 'Sub' $P1928 = "95_1299591493.348" 
    $P1927."add_method"(type_obj, "statement_mod_loop:sym<while>", $P1928)
    get_how $P1929, type_obj
    get_global $P1930, "!PREFIX__statement_mod_loop:sym<while>"
    $P1929."add_method"(type_obj, "!PREFIX__statement_mod_loop:sym<while>", $P1930)
    get_how $P1931, type_obj
    .const 'Sub' $P1932 = "97_1299591493.348" 
    $P1931."add_method"(type_obj, "statement_mod_loop:sym<until>", $P1932)
    get_how $P1933, type_obj
    get_global $P1934, "!PREFIX__statement_mod_loop:sym<until>"
    $P1933."add_method"(type_obj, "!PREFIX__statement_mod_loop:sym<until>", $P1934)
    get_how $P1935, type_obj
    .const 'Sub' $P1936 = "99_1299591493.348" 
    $P1935."add_method"(type_obj, "statement_mod_loop:sym<for>", $P1936)
    get_how $P1937, type_obj
    get_global $P1938, "!PREFIX__statement_mod_loop:sym<for>"
    $P1937."add_method"(type_obj, "!PREFIX__statement_mod_loop:sym<for>", $P1938)
    get_how $P1939, type_obj
    .const 'Sub' $P1940 = "101_1299591493.348" 
    $P1939."add_method"(type_obj, "term:sym<fatarrow>", $P1940)
    get_how $P1941, type_obj
    get_global $P1942, "!PREFIX__term:sym<fatarrow>"
    $P1941."add_method"(type_obj, "!PREFIX__term:sym<fatarrow>", $P1942)
    get_how $P1943, type_obj
    .const 'Sub' $P1944 = "103_1299591493.348" 
    $P1943."add_method"(type_obj, "term:sym<colonpair>", $P1944)
    get_how $P1945, type_obj
    get_global $P1946, "!PREFIX__term:sym<colonpair>"
    $P1945."add_method"(type_obj, "!PREFIX__term:sym<colonpair>", $P1946)
    get_how $P1947, type_obj
    .const 'Sub' $P1948 = "105_1299591493.348" 
    $P1947."add_method"(type_obj, "term:sym<variable>", $P1948)
    get_how $P1949, type_obj
    get_global $P1950, "!PREFIX__term:sym<variable>"
    $P1949."add_method"(type_obj, "!PREFIX__term:sym<variable>", $P1950)
    get_how $P1951, type_obj
    .const 'Sub' $P1952 = "107_1299591493.348" 
    $P1951."add_method"(type_obj, "term:sym<package_declarator>", $P1952)
    get_how $P1953, type_obj
    get_global $P1954, "!PREFIX__term:sym<package_declarator>"
    $P1953."add_method"(type_obj, "!PREFIX__term:sym<package_declarator>", $P1954)
    get_how $P1955, type_obj
    .const 'Sub' $P1956 = "109_1299591493.348" 
    $P1955."add_method"(type_obj, "term:sym<scope_declarator>", $P1956)
    get_how $P1957, type_obj
    get_global $P1958, "!PREFIX__term:sym<scope_declarator>"
    $P1957."add_method"(type_obj, "!PREFIX__term:sym<scope_declarator>", $P1958)
    get_how $P1959, type_obj
    .const 'Sub' $P1960 = "111_1299591493.348" 
    $P1959."add_method"(type_obj, "term:sym<routine_declarator>", $P1960)
    get_how $P1961, type_obj
    get_global $P1962, "!PREFIX__term:sym<routine_declarator>"
    $P1961."add_method"(type_obj, "!PREFIX__term:sym<routine_declarator>", $P1962)
    get_how $P1963, type_obj
    .const 'Sub' $P1964 = "113_1299591493.348" 
    $P1963."add_method"(type_obj, "term:sym<multi_declarator>", $P1964)
    get_how $P1965, type_obj
    get_global $P1966, "!PREFIX__term:sym<multi_declarator>"
    $P1965."add_method"(type_obj, "!PREFIX__term:sym<multi_declarator>", $P1966)
    get_how $P1967, type_obj
    .const 'Sub' $P1968 = "117_1299591493.348" 
    $P1967."add_method"(type_obj, "term:sym<regex_declarator>", $P1968)
    get_how $P1969, type_obj
    get_global $P1970, "!PREFIX__term:sym<regex_declarator>"
    $P1969."add_method"(type_obj, "!PREFIX__term:sym<regex_declarator>", $P1970)
    get_how $P1971, type_obj
    .const 'Sub' $P1972 = "119_1299591493.348" 
    $P1971."add_method"(type_obj, "term:sym<statement_prefix>", $P1972)
    get_how $P1973, type_obj
    get_global $P1974, "!PREFIX__term:sym<statement_prefix>"
    $P1973."add_method"(type_obj, "!PREFIX__term:sym<statement_prefix>", $P1974)
    get_how $P1975, type_obj
    .const 'Sub' $P1976 = "121_1299591493.348" 
    $P1975."add_method"(type_obj, "term:sym<lambda>", $P1976)
    get_how $P1977, type_obj
    get_global $P1978, "!PREFIX__term:sym<lambda>"
    $P1977."add_method"(type_obj, "!PREFIX__term:sym<lambda>", $P1978)
    get_how $P1979, type_obj
    .const 'Sub' $P1980 = "123_1299591493.348" 
    $P1979."add_method"(type_obj, "fatarrow", $P1980)
    get_how $P1981, type_obj
    get_global $P1982, "!PREFIX__fatarrow"
    $P1981."add_method"(type_obj, "!PREFIX__fatarrow", $P1982)
    get_how $P1983, type_obj
    .const 'Sub' $P1984 = "125_1299591493.348" 
    $P1983."add_method"(type_obj, "colonpair", $P1984)
    get_how $P1985, type_obj
    get_global $P1986, "!PREFIX__colonpair"
    $P1985."add_method"(type_obj, "!PREFIX__colonpair", $P1986)
    get_how $P1987, type_obj
    .const 'Sub' $P1988 = "127_1299591493.348" 
    $P1987."add_method"(type_obj, "variable", $P1988)
    get_how $P1989, type_obj
    get_global $P1990, "!PREFIX__variable"
    $P1989."add_method"(type_obj, "!PREFIX__variable", $P1990)
    get_how $P1991, type_obj
    .const 'Sub' $P1992 = "129_1299591493.348" 
    $P1991."add_method"(type_obj, "sigil", $P1992)
    get_how $P1993, type_obj
    get_global $P1994, "!PREFIX__sigil"
    $P1993."add_method"(type_obj, "!PREFIX__sigil", $P1994)
    get_how $P1995, type_obj
    .const 'Sub' $P1996 = "131_1299591493.348" 
    $P1995."add_method"(type_obj, "twigil", $P1996)
    get_how $P1997, type_obj
    get_global $P1998, "!PREFIX__twigil"
    $P1997."add_method"(type_obj, "!PREFIX__twigil", $P1998)
    get_how $P1999, type_obj
    .const 'Sub' $P2000 = "133_1299591493.348" 
    $P1999."add_method"(type_obj, "package_declarator", $P2000)
    get_how $P2001, type_obj
    .const 'Sub' $P2002 = "134_1299591493.348" 
    $P2001."add_method"(type_obj, "!PREFIX__package_declarator", $P2002)
    get_how $P2003, type_obj
    .const 'Sub' $P2004 = "135_1299591493.348" 
    $P2003."add_method"(type_obj, "package_declarator:sym<module>", $P2004)
    get_how $P2005, type_obj
    get_global $P2006, "!PREFIX__package_declarator:sym<module>"
    $P2005."add_method"(type_obj, "!PREFIX__package_declarator:sym<module>", $P2006)
    get_how $P2007, type_obj
    .const 'Sub' $P2008 = "137_1299591493.348" 
    $P2007."add_method"(type_obj, "package_declarator:sym<knowhow>", $P2008)
    get_how $P2009, type_obj
    get_global $P2010, "!PREFIX__package_declarator:sym<knowhow>"
    $P2009."add_method"(type_obj, "!PREFIX__package_declarator:sym<knowhow>", $P2010)
    get_how $P2011, type_obj
    .const 'Sub' $P2012 = "139_1299591493.348" 
    $P2011."add_method"(type_obj, "package_declarator:sym<class>", $P2012)
    get_how $P2013, type_obj
    get_global $P2014, "!PREFIX__package_declarator:sym<class>"
    $P2013."add_method"(type_obj, "!PREFIX__package_declarator:sym<class>", $P2014)
    get_how $P2015, type_obj
    .const 'Sub' $P2016 = "141_1299591493.348" 
    $P2015."add_method"(type_obj, "package_declarator:sym<grammar>", $P2016)
    get_how $P2017, type_obj
    get_global $P2018, "!PREFIX__package_declarator:sym<grammar>"
    $P2017."add_method"(type_obj, "!PREFIX__package_declarator:sym<grammar>", $P2018)
    get_how $P2019, type_obj
    .const 'Sub' $P2020 = "143_1299591493.348" 
    $P2019."add_method"(type_obj, "package_declarator:sym<role>", $P2020)
    get_how $P2021, type_obj
    get_global $P2022, "!PREFIX__package_declarator:sym<role>"
    $P2021."add_method"(type_obj, "!PREFIX__package_declarator:sym<role>", $P2022)
    get_how $P2023, type_obj
    .const 'Sub' $P2024 = "145_1299591493.348" 
    $P2023."add_method"(type_obj, "package_declarator:sym<native>", $P2024)
    get_how $P2025, type_obj
    get_global $P2026, "!PREFIX__package_declarator:sym<native>"
    $P2025."add_method"(type_obj, "!PREFIX__package_declarator:sym<native>", $P2026)
    get_how $P2027, type_obj
    .const 'Sub' $P2028 = "147_1299591493.348" 
    $P2027."add_method"(type_obj, "package_def", $P2028)
    get_how $P2029, type_obj
    get_global $P2030, "!PREFIX__package_def"
    $P2029."add_method"(type_obj, "!PREFIX__package_def", $P2030)
    get_how $P2031, type_obj
    .const 'Sub' $P2032 = "150_1299591493.348" 
    $P2031."add_method"(type_obj, "scope_declarator", $P2032)
    get_how $P2033, type_obj
    .const 'Sub' $P2034 = "151_1299591493.348" 
    $P2033."add_method"(type_obj, "!PREFIX__scope_declarator", $P2034)
    get_how $P2035, type_obj
    .const 'Sub' $P2036 = "152_1299591493.348" 
    $P2035."add_method"(type_obj, "scope_declarator:sym<my>", $P2036)
    get_how $P2037, type_obj
    get_global $P2038, "!PREFIX__scope_declarator:sym<my>"
    $P2037."add_method"(type_obj, "!PREFIX__scope_declarator:sym<my>", $P2038)
    get_how $P2039, type_obj
    .const 'Sub' $P2040 = "154_1299591493.348" 
    $P2039."add_method"(type_obj, "scope_declarator:sym<our>", $P2040)
    get_how $P2041, type_obj
    get_global $P2042, "!PREFIX__scope_declarator:sym<our>"
    $P2041."add_method"(type_obj, "!PREFIX__scope_declarator:sym<our>", $P2042)
    get_how $P2043, type_obj
    .const 'Sub' $P2044 = "156_1299591493.348" 
    $P2043."add_method"(type_obj, "scope_declarator:sym<has>", $P2044)
    get_how $P2045, type_obj
    get_global $P2046, "!PREFIX__scope_declarator:sym<has>"
    $P2045."add_method"(type_obj, "!PREFIX__scope_declarator:sym<has>", $P2046)
    get_how $P2047, type_obj
    .const 'Sub' $P2048 = "158_1299591493.348" 
    $P2047."add_method"(type_obj, "scoped", $P2048)
    get_how $P2049, type_obj
    get_global $P2050, "!PREFIX__scoped"
    $P2049."add_method"(type_obj, "!PREFIX__scoped", $P2050)
    get_how $P2051, type_obj
    .const 'Sub' $P2052 = "160_1299591493.348" 
    $P2051."add_method"(type_obj, "typename", $P2052)
    get_how $P2053, type_obj
    get_global $P2054, "!PREFIX__typename"
    $P2053."add_method"(type_obj, "!PREFIX__typename", $P2054)
    get_how $P2055, type_obj
    .const 'Sub' $P2056 = "162_1299591493.348" 
    $P2055."add_method"(type_obj, "declarator", $P2056)
    get_how $P2057, type_obj
    get_global $P2058, "!PREFIX__declarator"
    $P2057."add_method"(type_obj, "!PREFIX__declarator", $P2058)
    get_how $P2059, type_obj
    .const 'Sub' $P2060 = "164_1299591493.348" 
    $P2059."add_method"(type_obj, "variable_declarator", $P2060)
    get_how $P2061, type_obj
    get_global $P2062, "!PREFIX__variable_declarator"
    $P2061."add_method"(type_obj, "!PREFIX__variable_declarator", $P2062)
    get_how $P2063, type_obj
    .const 'Sub' $P2064 = "166_1299591493.348" 
    $P2063."add_method"(type_obj, "routine_declarator", $P2064)
    get_how $P2065, type_obj
    .const 'Sub' $P2066 = "167_1299591493.348" 
    $P2065."add_method"(type_obj, "!PREFIX__routine_declarator", $P2066)
    get_how $P2067, type_obj
    .const 'Sub' $P2068 = "168_1299591493.348" 
    $P2067."add_method"(type_obj, "routine_declarator:sym<sub>", $P2068)
    get_how $P2069, type_obj
    get_global $P2070, "!PREFIX__routine_declarator:sym<sub>"
    $P2069."add_method"(type_obj, "!PREFIX__routine_declarator:sym<sub>", $P2070)
    get_how $P2071, type_obj
    .const 'Sub' $P2072 = "170_1299591493.348" 
    $P2071."add_method"(type_obj, "routine_declarator:sym<method>", $P2072)
    get_how $P2073, type_obj
    get_global $P2074, "!PREFIX__routine_declarator:sym<method>"
    $P2073."add_method"(type_obj, "!PREFIX__routine_declarator:sym<method>", $P2074)
    get_how $P2075, type_obj
    .const 'Sub' $P2076 = "172_1299591493.348" 
    $P2075."add_method"(type_obj, "routine_def", $P2076)
    get_how $P2077, type_obj
    get_global $P2078, "!PREFIX__routine_def"
    $P2077."add_method"(type_obj, "!PREFIX__routine_def", $P2078)
    get_how $P2079, type_obj
    .const 'Sub' $P2080 = "174_1299591493.348" 
    $P2079."add_method"(type_obj, "method_def", $P2080)
    get_how $P2081, type_obj
    get_global $P2082, "!PREFIX__method_def"
    $P2081."add_method"(type_obj, "!PREFIX__method_def", $P2082)
    get_how $P2083, type_obj
    .const 'Sub' $P2084 = "177_1299591493.348" 
    $P2083."add_method"(type_obj, "onlystar", $P2084)
    get_how $P2085, type_obj
    get_global $P2086, "!PREFIX__onlystar"
    $P2085."add_method"(type_obj, "!PREFIX__onlystar", $P2086)
    get_how $P2087, type_obj
    .const 'Sub' $P2088 = "180_1299591493.348" 
    $P2087."add_method"(type_obj, "multi_declarator", $P2088)
    get_how $P2089, type_obj
    .const 'Sub' $P2090 = "181_1299591493.348" 
    $P2089."add_method"(type_obj, "!PREFIX__multi_declarator", $P2090)
    get_how $P2091, type_obj
    .const 'Sub' $P2092 = "182_1299591493.348" 
    $P2091."add_method"(type_obj, "multi_declarator:sym<multi>", $P2092)
    get_how $P2093, type_obj
    get_global $P2094, "!PREFIX__multi_declarator:sym<multi>"
    $P2093."add_method"(type_obj, "!PREFIX__multi_declarator:sym<multi>", $P2094)
    get_how $P2095, type_obj
    .const 'Sub' $P2096 = "184_1299591493.348" 
    $P2095."add_method"(type_obj, "multi_declarator:sym<proto>", $P2096)
    get_how $P2097, type_obj
    get_global $P2098, "!PREFIX__multi_declarator:sym<proto>"
    $P2097."add_method"(type_obj, "!PREFIX__multi_declarator:sym<proto>", $P2098)
    get_how $P2099, type_obj
    .const 'Sub' $P2100 = "186_1299591493.348" 
    $P2099."add_method"(type_obj, "multi_declarator:sym<null>", $P2100)
    get_how $P2101, type_obj
    get_global $P2102, "!PREFIX__multi_declarator:sym<null>"
    $P2101."add_method"(type_obj, "!PREFIX__multi_declarator:sym<null>", $P2102)
    get_how $P2103, type_obj
    .const 'Sub' $P2104 = "188_1299591493.348" 
    $P2103."add_method"(type_obj, "signature", $P2104)
    get_how $P2105, type_obj
    get_global $P2106, "!PREFIX__signature"
    $P2105."add_method"(type_obj, "!PREFIX__signature", $P2106)
    get_how $P2107, type_obj
    .const 'Sub' $P2108 = "191_1299591493.348" 
    $P2107."add_method"(type_obj, "parameter", $P2108)
    get_how $P2109, type_obj
    get_global $P2110, "!PREFIX__parameter"
    $P2109."add_method"(type_obj, "!PREFIX__parameter", $P2110)
    get_how $P2111, type_obj
    .const 'Sub' $P2112 = "193_1299591493.348" 
    $P2111."add_method"(type_obj, "param_var", $P2112)
    get_how $P2113, type_obj
    get_global $P2114, "!PREFIX__param_var"
    $P2113."add_method"(type_obj, "!PREFIX__param_var", $P2114)
    get_how $P2115, type_obj
    .const 'Sub' $P2116 = "195_1299591493.348" 
    $P2115."add_method"(type_obj, "named_param", $P2116)
    get_how $P2117, type_obj
    get_global $P2118, "!PREFIX__named_param"
    $P2117."add_method"(type_obj, "!PREFIX__named_param", $P2118)
    get_how $P2119, type_obj
    .const 'Sub' $P2120 = "197_1299591493.348" 
    $P2119."add_method"(type_obj, "default_value", $P2120)
    get_how $P2121, type_obj
    get_global $P2122, "!PREFIX__default_value"
    $P2121."add_method"(type_obj, "!PREFIX__default_value", $P2122)
    get_how $P2123, type_obj
    .const 'Sub' $P2124 = "199_1299591493.348" 
    $P2123."add_method"(type_obj, "trait", $P2124)
    get_how $P2125, type_obj
    get_global $P2126, "!PREFIX__trait"
    $P2125."add_method"(type_obj, "!PREFIX__trait", $P2126)
    get_how $P2127, type_obj
    .const 'Sub' $P2128 = "201_1299591493.348" 
    $P2127."add_method"(type_obj, "trait_mod", $P2128)
    get_how $P2129, type_obj
    .const 'Sub' $P2130 = "202_1299591493.348" 
    $P2129."add_method"(type_obj, "!PREFIX__trait_mod", $P2130)
    get_how $P2131, type_obj
    .const 'Sub' $P2132 = "203_1299591493.348" 
    $P2131."add_method"(type_obj, "trait_mod:sym<is>", $P2132)
    get_how $P2133, type_obj
    get_global $P2134, "!PREFIX__trait_mod:sym<is>"
    $P2133."add_method"(type_obj, "!PREFIX__trait_mod:sym<is>", $P2134)
    get_how $P2135, type_obj
    .const 'Sub' $P2136 = "205_1299591493.348" 
    $P2135."add_method"(type_obj, "regex_declarator", $P2136)
    get_how $P2137, type_obj
    get_global $P2138, "!PREFIX__regex_declarator"
    $P2137."add_method"(type_obj, "!PREFIX__regex_declarator", $P2138)
    get_how $P2139, type_obj
    .const 'Sub' $P2140 = "207_1299591493.348" 
    $P2139."add_method"(type_obj, "dotty", $P2140)
    get_how $P2141, type_obj
    get_global $P2142, "!PREFIX__dotty"
    $P2141."add_method"(type_obj, "!PREFIX__dotty", $P2142)
    get_how $P2143, type_obj
    .const 'Sub' $P2144 = "209_1299591493.348" 
    $P2143."add_method"(type_obj, "term", $P2144)
    get_how $P2145, type_obj
    .const 'Sub' $P2146 = "210_1299591493.348" 
    $P2145."add_method"(type_obj, "!PREFIX__term", $P2146)
    get_how $P2147, type_obj
    .const 'Sub' $P2148 = "211_1299591493.348" 
    $P2147."add_method"(type_obj, "term:sym<self>", $P2148)
    get_how $P2149, type_obj
    get_global $P2150, "!PREFIX__term:sym<self>"
    $P2149."add_method"(type_obj, "!PREFIX__term:sym<self>", $P2150)
    get_how $P2151, type_obj
    .const 'Sub' $P2152 = "213_1299591493.348" 
    $P2151."add_method"(type_obj, "term:sym<identifier>", $P2152)
    get_how $P2153, type_obj
    get_global $P2154, "!PREFIX__term:sym<identifier>"
    $P2153."add_method"(type_obj, "!PREFIX__term:sym<identifier>", $P2154)
    get_how $P2155, type_obj
    .const 'Sub' $P2156 = "215_1299591493.348" 
    $P2155."add_method"(type_obj, "term:sym<name>", $P2156)
    get_how $P2157, type_obj
    get_global $P2158, "!PREFIX__term:sym<name>"
    $P2157."add_method"(type_obj, "!PREFIX__term:sym<name>", $P2158)
    get_how $P2159, type_obj
    .const 'Sub' $P2160 = "217_1299591493.348" 
    $P2159."add_method"(type_obj, "term:sym<pir::op>", $P2160)
    get_how $P2161, type_obj
    get_global $P2162, "!PREFIX__term:sym<pir::op>"
    $P2161."add_method"(type_obj, "!PREFIX__term:sym<pir::op>", $P2162)
    get_how $P2163, type_obj
    .const 'Sub' $P2164 = "219_1299591493.348" 
    $P2163."add_method"(type_obj, "term:sym<onlystar>", $P2164)
    get_how $P2165, type_obj
    get_global $P2166, "!PREFIX__term:sym<onlystar>"
    $P2165."add_method"(type_obj, "!PREFIX__term:sym<onlystar>", $P2166)
    get_how $P2167, type_obj
    .const 'Sub' $P2168 = "222_1299591493.348" 
    $P2167."add_method"(type_obj, "args", $P2168)
    get_how $P2169, type_obj
    get_global $P2170, "!PREFIX__args"
    $P2169."add_method"(type_obj, "!PREFIX__args", $P2170)
    get_how $P2171, type_obj
    .const 'Sub' $P2172 = "224_1299591493.348" 
    $P2171."add_method"(type_obj, "arglist", $P2172)
    get_how $P2173, type_obj
    get_global $P2174, "!PREFIX__arglist"
    $P2173."add_method"(type_obj, "!PREFIX__arglist", $P2174)
    get_how $P2175, type_obj
    .const 'Sub' $P2176 = "226_1299591493.348" 
    $P2175."add_method"(type_obj, "term:sym<value>", $P2176)
    get_how $P2177, type_obj
    get_global $P2178, "!PREFIX__term:sym<value>"
    $P2177."add_method"(type_obj, "!PREFIX__term:sym<value>", $P2178)
    get_how $P2179, type_obj
    .const 'Sub' $P2180 = "228_1299591493.348" 
    $P2179."add_method"(type_obj, "value", $P2180)
    get_how $P2181, type_obj
    get_global $P2182, "!PREFIX__value"
    $P2181."add_method"(type_obj, "!PREFIX__value", $P2182)
    get_how $P2183, type_obj
    .const 'Sub' $P2184 = "230_1299591493.348" 
    $P2183."add_method"(type_obj, "number", $P2184)
    get_how $P2185, type_obj
    get_global $P2186, "!PREFIX__number"
    $P2185."add_method"(type_obj, "!PREFIX__number", $P2186)
    get_how $P2187, type_obj
    .const 'Sub' $P2188 = "232_1299591493.348" 
    $P2187."add_method"(type_obj, "quote", $P2188)
    get_how $P2189, type_obj
    .const 'Sub' $P2190 = "233_1299591493.348" 
    $P2189."add_method"(type_obj, "!PREFIX__quote", $P2190)
    get_how $P2191, type_obj
    .const 'Sub' $P2192 = "234_1299591493.348" 
    $P2191."add_method"(type_obj, "quote:sym<apos>", $P2192)
    get_how $P2193, type_obj
    get_global $P2194, "!PREFIX__quote:sym<apos>"
    $P2193."add_method"(type_obj, "!PREFIX__quote:sym<apos>", $P2194)
    get_how $P2195, type_obj
    .const 'Sub' $P2196 = "236_1299591493.348" 
    $P2195."add_method"(type_obj, "quote:sym<dblq>", $P2196)
    get_how $P2197, type_obj
    get_global $P2198, "!PREFIX__quote:sym<dblq>"
    $P2197."add_method"(type_obj, "!PREFIX__quote:sym<dblq>", $P2198)
    get_how $P2199, type_obj
    .const 'Sub' $P2200 = "238_1299591493.348" 
    $P2199."add_method"(type_obj, "quote:sym<q>", $P2200)
    get_how $P2201, type_obj
    get_global $P2202, "!PREFIX__quote:sym<q>"
    $P2201."add_method"(type_obj, "!PREFIX__quote:sym<q>", $P2202)
    get_how $P2203, type_obj
    .const 'Sub' $P2204 = "240_1299591493.348" 
    $P2203."add_method"(type_obj, "quote:sym<qq>", $P2204)
    get_how $P2205, type_obj
    get_global $P2206, "!PREFIX__quote:sym<qq>"
    $P2205."add_method"(type_obj, "!PREFIX__quote:sym<qq>", $P2206)
    get_how $P2207, type_obj
    .const 'Sub' $P2208 = "242_1299591493.348" 
    $P2207."add_method"(type_obj, "quote:sym<Q>", $P2208)
    get_how $P2209, type_obj
    get_global $P2210, "!PREFIX__quote:sym<Q>"
    $P2209."add_method"(type_obj, "!PREFIX__quote:sym<Q>", $P2210)
    get_how $P2211, type_obj
    .const 'Sub' $P2212 = "244_1299591493.348" 
    $P2211."add_method"(type_obj, "quote:sym<Q:PIR>", $P2212)
    get_how $P2213, type_obj
    get_global $P2214, "!PREFIX__quote:sym<Q:PIR>"
    $P2213."add_method"(type_obj, "!PREFIX__quote:sym<Q:PIR>", $P2214)
    get_how $P2215, type_obj
    .const 'Sub' $P2216 = "246_1299591493.348" 
    $P2215."add_method"(type_obj, "quote:sym</ />", $P2216)
    get_how $P2217, type_obj
    get_global $P2218, "!PREFIX__quote:sym</ />"
    $P2217."add_method"(type_obj, "!PREFIX__quote:sym</ />", $P2218)
    get_how $P2219, type_obj
    .const 'Sub' $P2220 = "248_1299591493.348" 
    $P2219."add_method"(type_obj, "quote_escape:sym<$>", $P2220)
    get_how $P2221, type_obj
    get_global $P2222, "!PREFIX__quote_escape:sym<$>"
    $P2221."add_method"(type_obj, "!PREFIX__quote_escape:sym<$>", $P2222)
    get_how $P2223, type_obj
    .const 'Sub' $P2224 = "250_1299591493.348" 
    $P2223."add_method"(type_obj, "quote_escape:sym<{ }>", $P2224)
    get_how $P2225, type_obj
    get_global $P2226, "!PREFIX__quote_escape:sym<{ }>"
    $P2225."add_method"(type_obj, "!PREFIX__quote_escape:sym<{ }>", $P2226)
    get_how $P2227, type_obj
    .const 'Sub' $P2228 = "252_1299591493.348" 
    $P2227."add_method"(type_obj, "quote_escape:sym<esc>", $P2228)
    get_how $P2229, type_obj
    get_global $P2230, "!PREFIX__quote_escape:sym<esc>"
    $P2229."add_method"(type_obj, "!PREFIX__quote_escape:sym<esc>", $P2230)
    get_how $P2231, type_obj
    .const 'Sub' $P2232 = "254_1299591493.348" 
    $P2231."add_method"(type_obj, "circumfix:sym<( )>", $P2232)
    get_how $P2233, type_obj
    get_global $P2234, "!PREFIX__circumfix:sym<( )>"
    $P2233."add_method"(type_obj, "!PREFIX__circumfix:sym<( )>", $P2234)
    get_how $P2235, type_obj
    .const 'Sub' $P2236 = "256_1299591493.348" 
    $P2235."add_method"(type_obj, "circumfix:sym<[ ]>", $P2236)
    get_how $P2237, type_obj
    get_global $P2238, "!PREFIX__circumfix:sym<[ ]>"
    $P2237."add_method"(type_obj, "!PREFIX__circumfix:sym<[ ]>", $P2238)
    get_how $P2239, type_obj
    .const 'Sub' $P2240 = "258_1299591493.348" 
    $P2239."add_method"(type_obj, "circumfix:sym<ang>", $P2240)
    get_how $P2241, type_obj
    get_global $P2242, "!PREFIX__circumfix:sym<ang>"
    $P2241."add_method"(type_obj, "!PREFIX__circumfix:sym<ang>", $P2242)
    get_how $P2243, type_obj
    .const 'Sub' $P2244 = "260_1299591493.348" 
    $P2243."add_method"(type_obj, unicode:"circumfix:sym<\x{ab} \x{bb}>", $P2244)
    get_how $P2245, type_obj
    get_global $P2246, unicode:"!PREFIX__circumfix:sym<\x{ab} \x{bb}>"
    $P2245."add_method"(type_obj, unicode:"!PREFIX__circumfix:sym<\x{ab} \x{bb}>", $P2246)
    get_how $P2247, type_obj
    .const 'Sub' $P2248 = "262_1299591493.348" 
    $P2247."add_method"(type_obj, "circumfix:sym<{ }>", $P2248)
    get_how $P2249, type_obj
    get_global $P2250, "!PREFIX__circumfix:sym<{ }>"
    $P2249."add_method"(type_obj, "!PREFIX__circumfix:sym<{ }>", $P2250)
    get_how $P2251, type_obj
    .const 'Sub' $P2252 = "264_1299591493.348" 
    $P2251."add_method"(type_obj, "circumfix:sym<sigil>", $P2252)
    get_how $P2253, type_obj
    get_global $P2254, "!PREFIX__circumfix:sym<sigil>"
    $P2253."add_method"(type_obj, "!PREFIX__circumfix:sym<sigil>", $P2254)
    get_how $P2255, type_obj
    .const 'Sub' $P2256 = "266_1299591493.348" 
    $P2255."add_method"(type_obj, "semilist", $P2256)
    get_how $P2257, type_obj
    get_global $P2258, "!PREFIX__semilist"
    $P2257."add_method"(type_obj, "!PREFIX__semilist", $P2258)
    get_how $P2259, type_obj
    .const 'Sub' $P2260 = "269_1299591493.348" 
    $P2259."add_method"(type_obj, "infixish", $P2260)
    get_how $P2261, type_obj
    get_global $P2262, "!PREFIX__infixish"
    $P2261."add_method"(type_obj, "!PREFIX__infixish", $P2262)
    get_how $P2263, type_obj
    .const 'Sub' $P2264 = "271_1299591493.348" 
    $P2263."add_method"(type_obj, "infixstopper", $P2264)
    get_how $P2265, type_obj
    get_global $P2266, "!PREFIX__infixstopper"
    $P2265."add_method"(type_obj, "!PREFIX__infixstopper", $P2266)
    get_how $P2267, type_obj
    .const 'Sub' $P2268 = "273_1299591493.348" 
    $P2267."add_method"(type_obj, "postcircumfix:sym<[ ]>", $P2268)
    get_how $P2269, type_obj
    get_global $P2270, "!PREFIX__postcircumfix:sym<[ ]>"
    $P2269."add_method"(type_obj, "!PREFIX__postcircumfix:sym<[ ]>", $P2270)
    get_how $P2271, type_obj
    .const 'Sub' $P2272 = "275_1299591493.348" 
    $P2271."add_method"(type_obj, "postcircumfix:sym<{ }>", $P2272)
    get_how $P2273, type_obj
    get_global $P2274, "!PREFIX__postcircumfix:sym<{ }>"
    $P2273."add_method"(type_obj, "!PREFIX__postcircumfix:sym<{ }>", $P2274)
    get_how $P2275, type_obj
    .const 'Sub' $P2276 = "277_1299591493.348" 
    $P2275."add_method"(type_obj, "postcircumfix:sym<ang>", $P2276)
    get_how $P2277, type_obj
    get_global $P2278, "!PREFIX__postcircumfix:sym<ang>"
    $P2277."add_method"(type_obj, "!PREFIX__postcircumfix:sym<ang>", $P2278)
    get_how $P2279, type_obj
    .const 'Sub' $P2280 = "279_1299591493.348" 
    $P2279."add_method"(type_obj, "postcircumfix:sym<( )>", $P2280)
    get_how $P2281, type_obj
    get_global $P2282, "!PREFIX__postcircumfix:sym<( )>"
    $P2281."add_method"(type_obj, "!PREFIX__postcircumfix:sym<( )>", $P2282)
    get_how $P2283, type_obj
    .const 'Sub' $P2284 = "281_1299591493.348" 
    $P2283."add_method"(type_obj, "postfix:sym<.>", $P2284)
    get_how $P2285, type_obj
    get_global $P2286, "!PREFIX__postfix:sym<.>"
    $P2285."add_method"(type_obj, "!PREFIX__postfix:sym<.>", $P2286)
    get_how $P2287, type_obj
    .const 'Sub' $P2288 = "283_1299591493.348" 
    $P2287."add_method"(type_obj, "prefix:sym<++>", $P2288)
    get_how $P2289, type_obj
    get_global $P2290, "!PREFIX__prefix:sym<++>"
    $P2289."add_method"(type_obj, "!PREFIX__prefix:sym<++>", $P2290)
    get_how $P2291, type_obj
    .const 'Sub' $P2292 = "285_1299591493.348" 
    $P2291."add_method"(type_obj, "prefix:sym<-->", $P2292)
    get_how $P2293, type_obj
    get_global $P2294, "!PREFIX__prefix:sym<-->"
    $P2293."add_method"(type_obj, "!PREFIX__prefix:sym<-->", $P2294)
    get_how $P2295, type_obj
    .const 'Sub' $P2296 = "287_1299591493.348" 
    $P2295."add_method"(type_obj, "postfix:sym<++>", $P2296)
    get_how $P2297, type_obj
    get_global $P2298, "!PREFIX__postfix:sym<++>"
    $P2297."add_method"(type_obj, "!PREFIX__postfix:sym<++>", $P2298)
    get_how $P2299, type_obj
    .const 'Sub' $P2300 = "289_1299591493.348" 
    $P2299."add_method"(type_obj, "postfix:sym<-->", $P2300)
    get_how $P2301, type_obj
    get_global $P2302, "!PREFIX__postfix:sym<-->"
    $P2301."add_method"(type_obj, "!PREFIX__postfix:sym<-->", $P2302)
    get_how $P2303, type_obj
    .const 'Sub' $P2304 = "291_1299591493.348" 
    $P2303."add_method"(type_obj, "infix:sym<**>", $P2304)
    get_how $P2305, type_obj
    get_global $P2306, "!PREFIX__infix:sym<**>"
    $P2305."add_method"(type_obj, "!PREFIX__infix:sym<**>", $P2306)
    get_how $P2307, type_obj
    .const 'Sub' $P2308 = "293_1299591493.348" 
    $P2307."add_method"(type_obj, "prefix:sym<+>", $P2308)
    get_how $P2309, type_obj
    get_global $P2310, "!PREFIX__prefix:sym<+>"
    $P2309."add_method"(type_obj, "!PREFIX__prefix:sym<+>", $P2310)
    get_how $P2311, type_obj
    .const 'Sub' $P2312 = "295_1299591493.348" 
    $P2311."add_method"(type_obj, "prefix:sym<~>", $P2312)
    get_how $P2313, type_obj
    get_global $P2314, "!PREFIX__prefix:sym<~>"
    $P2313."add_method"(type_obj, "!PREFIX__prefix:sym<~>", $P2314)
    get_how $P2315, type_obj
    .const 'Sub' $P2316 = "297_1299591493.348" 
    $P2315."add_method"(type_obj, "prefix:sym<->", $P2316)
    get_how $P2317, type_obj
    get_global $P2318, "!PREFIX__prefix:sym<->"
    $P2317."add_method"(type_obj, "!PREFIX__prefix:sym<->", $P2318)
    get_how $P2319, type_obj
    .const 'Sub' $P2320 = "299_1299591493.348" 
    $P2319."add_method"(type_obj, "prefix:sym<?>", $P2320)
    get_how $P2321, type_obj
    get_global $P2322, "!PREFIX__prefix:sym<?>"
    $P2321."add_method"(type_obj, "!PREFIX__prefix:sym<?>", $P2322)
    get_how $P2323, type_obj
    .const 'Sub' $P2324 = "301_1299591493.348" 
    $P2323."add_method"(type_obj, "prefix:sym<!>", $P2324)
    get_how $P2325, type_obj
    get_global $P2326, "!PREFIX__prefix:sym<!>"
    $P2325."add_method"(type_obj, "!PREFIX__prefix:sym<!>", $P2326)
    get_how $P2327, type_obj
    .const 'Sub' $P2328 = "303_1299591493.348" 
    $P2327."add_method"(type_obj, "prefix:sym<|>", $P2328)
    get_how $P2329, type_obj
    get_global $P2330, "!PREFIX__prefix:sym<|>"
    $P2329."add_method"(type_obj, "!PREFIX__prefix:sym<|>", $P2330)
    get_how $P2331, type_obj
    .const 'Sub' $P2332 = "305_1299591493.348" 
    $P2331."add_method"(type_obj, "infix:sym<*>", $P2332)
    get_how $P2333, type_obj
    get_global $P2334, "!PREFIX__infix:sym<*>"
    $P2333."add_method"(type_obj, "!PREFIX__infix:sym<*>", $P2334)
    get_how $P2335, type_obj
    .const 'Sub' $P2336 = "307_1299591493.348" 
    $P2335."add_method"(type_obj, "infix:sym</>", $P2336)
    get_how $P2337, type_obj
    get_global $P2338, "!PREFIX__infix:sym</>"
    $P2337."add_method"(type_obj, "!PREFIX__infix:sym</>", $P2338)
    get_how $P2339, type_obj
    .const 'Sub' $P2340 = "309_1299591493.348" 
    $P2339."add_method"(type_obj, "infix:sym<%>", $P2340)
    get_how $P2341, type_obj
    get_global $P2342, "!PREFIX__infix:sym<%>"
    $P2341."add_method"(type_obj, "!PREFIX__infix:sym<%>", $P2342)
    get_how $P2343, type_obj
    .const 'Sub' $P2344 = "311_1299591493.348" 
    $P2343."add_method"(type_obj, "infix:sym<+&>", $P2344)
    get_how $P2345, type_obj
    get_global $P2346, "!PREFIX__infix:sym<+&>"
    $P2345."add_method"(type_obj, "!PREFIX__infix:sym<+&>", $P2346)
    get_how $P2347, type_obj
    .const 'Sub' $P2348 = "313_1299591493.348" 
    $P2347."add_method"(type_obj, "infix:sym<+>", $P2348)
    get_how $P2349, type_obj
    get_global $P2350, "!PREFIX__infix:sym<+>"
    $P2349."add_method"(type_obj, "!PREFIX__infix:sym<+>", $P2350)
    get_how $P2351, type_obj
    .const 'Sub' $P2352 = "315_1299591493.348" 
    $P2351."add_method"(type_obj, "infix:sym<->", $P2352)
    get_how $P2353, type_obj
    get_global $P2354, "!PREFIX__infix:sym<->"
    $P2353."add_method"(type_obj, "!PREFIX__infix:sym<->", $P2354)
    get_how $P2355, type_obj
    .const 'Sub' $P2356 = "317_1299591493.348" 
    $P2355."add_method"(type_obj, "infix:sym<+|>", $P2356)
    get_how $P2357, type_obj
    get_global $P2358, "!PREFIX__infix:sym<+|>"
    $P2357."add_method"(type_obj, "!PREFIX__infix:sym<+|>", $P2358)
    get_how $P2359, type_obj
    .const 'Sub' $P2360 = "319_1299591493.348" 
    $P2359."add_method"(type_obj, "infix:sym<+^>", $P2360)
    get_how $P2361, type_obj
    get_global $P2362, "!PREFIX__infix:sym<+^>"
    $P2361."add_method"(type_obj, "!PREFIX__infix:sym<+^>", $P2362)
    get_how $P2363, type_obj
    .const 'Sub' $P2364 = "321_1299591493.348" 
    $P2363."add_method"(type_obj, "infix:sym<~>", $P2364)
    get_how $P2365, type_obj
    get_global $P2366, "!PREFIX__infix:sym<~>"
    $P2365."add_method"(type_obj, "!PREFIX__infix:sym<~>", $P2366)
    get_how $P2367, type_obj
    .const 'Sub' $P2368 = "323_1299591493.348" 
    $P2367."add_method"(type_obj, "infix:sym<==>", $P2368)
    get_how $P2369, type_obj
    get_global $P2370, "!PREFIX__infix:sym<==>"
    $P2369."add_method"(type_obj, "!PREFIX__infix:sym<==>", $P2370)
    get_how $P2371, type_obj
    .const 'Sub' $P2372 = "325_1299591493.348" 
    $P2371."add_method"(type_obj, "infix:sym<!=>", $P2372)
    get_how $P2373, type_obj
    get_global $P2374, "!PREFIX__infix:sym<!=>"
    $P2373."add_method"(type_obj, "!PREFIX__infix:sym<!=>", $P2374)
    get_how $P2375, type_obj
    .const 'Sub' $P2376 = "327_1299591493.348" 
    $P2375."add_method"(type_obj, "infix:sym<<=>", $P2376)
    get_how $P2377, type_obj
    get_global $P2378, "!PREFIX__infix:sym<<=>"
    $P2377."add_method"(type_obj, "!PREFIX__infix:sym<<=>", $P2378)
    get_how $P2379, type_obj
    .const 'Sub' $P2380 = "329_1299591493.348" 
    $P2379."add_method"(type_obj, "infix:sym<>=>", $P2380)
    get_how $P2381, type_obj
    get_global $P2382, "!PREFIX__infix:sym<>=>"
    $P2381."add_method"(type_obj, "!PREFIX__infix:sym<>=>", $P2382)
    get_how $P2383, type_obj
    .const 'Sub' $P2384 = "331_1299591493.348" 
    $P2383."add_method"(type_obj, "infix:sym<<>", $P2384)
    get_how $P2385, type_obj
    get_global $P2386, "!PREFIX__infix:sym<<>"
    $P2385."add_method"(type_obj, "!PREFIX__infix:sym<<>", $P2386)
    get_how $P2387, type_obj
    .const 'Sub' $P2388 = "333_1299591493.348" 
    $P2387."add_method"(type_obj, "infix:sym<>>", $P2388)
    get_how $P2389, type_obj
    get_global $P2390, "!PREFIX__infix:sym<>>"
    $P2389."add_method"(type_obj, "!PREFIX__infix:sym<>>", $P2390)
    get_how $P2391, type_obj
    .const 'Sub' $P2392 = "335_1299591493.348" 
    $P2391."add_method"(type_obj, "infix:sym<eq>", $P2392)
    get_how $P2393, type_obj
    get_global $P2394, "!PREFIX__infix:sym<eq>"
    $P2393."add_method"(type_obj, "!PREFIX__infix:sym<eq>", $P2394)
    get_how $P2395, type_obj
    .const 'Sub' $P2396 = "337_1299591493.348" 
    $P2395."add_method"(type_obj, "infix:sym<ne>", $P2396)
    get_how $P2397, type_obj
    get_global $P2398, "!PREFIX__infix:sym<ne>"
    $P2397."add_method"(type_obj, "!PREFIX__infix:sym<ne>", $P2398)
    get_how $P2399, type_obj
    .const 'Sub' $P2400 = "339_1299591493.348" 
    $P2399."add_method"(type_obj, "infix:sym<le>", $P2400)
    get_how $P2401, type_obj
    get_global $P2402, "!PREFIX__infix:sym<le>"
    $P2401."add_method"(type_obj, "!PREFIX__infix:sym<le>", $P2402)
    get_how $P2403, type_obj
    .const 'Sub' $P2404 = "341_1299591493.348" 
    $P2403."add_method"(type_obj, "infix:sym<ge>", $P2404)
    get_how $P2405, type_obj
    get_global $P2406, "!PREFIX__infix:sym<ge>"
    $P2405."add_method"(type_obj, "!PREFIX__infix:sym<ge>", $P2406)
    get_how $P2407, type_obj
    .const 'Sub' $P2408 = "343_1299591493.348" 
    $P2407."add_method"(type_obj, "infix:sym<lt>", $P2408)
    get_how $P2409, type_obj
    get_global $P2410, "!PREFIX__infix:sym<lt>"
    $P2409."add_method"(type_obj, "!PREFIX__infix:sym<lt>", $P2410)
    get_how $P2411, type_obj
    .const 'Sub' $P2412 = "345_1299591493.348" 
    $P2411."add_method"(type_obj, "infix:sym<gt>", $P2412)
    get_how $P2413, type_obj
    get_global $P2414, "!PREFIX__infix:sym<gt>"
    $P2413."add_method"(type_obj, "!PREFIX__infix:sym<gt>", $P2414)
    get_how $P2415, type_obj
    .const 'Sub' $P2416 = "347_1299591493.348" 
    $P2415."add_method"(type_obj, "infix:sym<=:=>", $P2416)
    get_how $P2417, type_obj
    get_global $P2418, "!PREFIX__infix:sym<=:=>"
    $P2417."add_method"(type_obj, "!PREFIX__infix:sym<=:=>", $P2418)
    get_how $P2419, type_obj
    .const 'Sub' $P2420 = "349_1299591493.348" 
    $P2419."add_method"(type_obj, "infix:sym<~~>", $P2420)
    get_how $P2421, type_obj
    get_global $P2422, "!PREFIX__infix:sym<~~>"
    $P2421."add_method"(type_obj, "!PREFIX__infix:sym<~~>", $P2422)
    get_how $P2423, type_obj
    .const 'Sub' $P2424 = "351_1299591493.348" 
    $P2423."add_method"(type_obj, "infix:sym<&&>", $P2424)
    get_how $P2425, type_obj
    get_global $P2426, "!PREFIX__infix:sym<&&>"
    $P2425."add_method"(type_obj, "!PREFIX__infix:sym<&&>", $P2426)
    get_how $P2427, type_obj
    .const 'Sub' $P2428 = "353_1299591493.348" 
    $P2427."add_method"(type_obj, "infix:sym<||>", $P2428)
    get_how $P2429, type_obj
    get_global $P2430, "!PREFIX__infix:sym<||>"
    $P2429."add_method"(type_obj, "!PREFIX__infix:sym<||>", $P2430)
    get_how $P2431, type_obj
    .const 'Sub' $P2432 = "355_1299591493.348" 
    $P2431."add_method"(type_obj, "infix:sym<//>", $P2432)
    get_how $P2433, type_obj
    get_global $P2434, "!PREFIX__infix:sym<//>"
    $P2433."add_method"(type_obj, "!PREFIX__infix:sym<//>", $P2434)
    get_how $P2435, type_obj
    .const 'Sub' $P2436 = "357_1299591493.348" 
    $P2435."add_method"(type_obj, "infix:sym<?? !!>", $P2436)
    get_how $P2437, type_obj
    get_global $P2438, "!PREFIX__infix:sym<?? !!>"
    $P2437."add_method"(type_obj, "!PREFIX__infix:sym<?? !!>", $P2438)
    get_how $P2439, type_obj
    .const 'Sub' $P2440 = "359_1299591493.348" 
    $P2439."add_method"(type_obj, "infix:sym<=>", $P2440)
    get_how $P2441, type_obj
    get_global $P2442, "!PREFIX__infix:sym<=>"
    $P2441."add_method"(type_obj, "!PREFIX__infix:sym<=>", $P2442)
    get_how $P2443, type_obj
    .const 'Sub' $P2444 = "361_1299591493.348" 
    $P2443."add_method"(type_obj, "infix:sym<:=>", $P2444)
    get_how $P2445, type_obj
    get_global $P2446, "!PREFIX__infix:sym<:=>"
    $P2445."add_method"(type_obj, "!PREFIX__infix:sym<:=>", $P2446)
    get_how $P2447, type_obj
    .const 'Sub' $P2448 = "363_1299591493.348" 
    $P2447."add_method"(type_obj, "infix:sym<::=>", $P2448)
    get_how $P2449, type_obj
    get_global $P2450, "!PREFIX__infix:sym<::=>"
    $P2449."add_method"(type_obj, "!PREFIX__infix:sym<::=>", $P2450)
    get_how $P2451, type_obj
    .const 'Sub' $P2452 = "365_1299591493.348" 
    $P2451."add_method"(type_obj, "infix:sym<,>", $P2452)
    get_how $P2453, type_obj
    get_global $P2454, "!PREFIX__infix:sym<,>"
    $P2453."add_method"(type_obj, "!PREFIX__infix:sym<,>", $P2454)
    get_how $P2455, type_obj
    .const 'Sub' $P2456 = "367_1299591493.348" 
    $P2455."add_method"(type_obj, "prefix:sym<return>", $P2456)
    get_how $P2457, type_obj
    get_global $P2458, "!PREFIX__prefix:sym<return>"
    $P2457."add_method"(type_obj, "!PREFIX__prefix:sym<return>", $P2458)
    get_how $P2459, type_obj
    .const 'Sub' $P2460 = "370_1299591493.348" 
    $P2459."add_method"(type_obj, "prefix:sym<make>", $P2460)
    get_how $P2461, type_obj
    get_global $P2462, "!PREFIX__prefix:sym<make>"
    $P2461."add_method"(type_obj, "!PREFIX__prefix:sym<make>", $P2462)
    get_how $P2463, type_obj
    .const 'Sub' $P2464 = "372_1299591493.348" 
    $P2463."add_method"(type_obj, "term:sym<last>", $P2464)
    get_how $P2465, type_obj
    get_global $P2466, "!PREFIX__term:sym<last>"
    $P2465."add_method"(type_obj, "!PREFIX__term:sym<last>", $P2466)
    get_how $P2467, type_obj
    .const 'Sub' $P2468 = "374_1299591493.348" 
    $P2467."add_method"(type_obj, "term:sym<next>", $P2468)
    get_how $P2469, type_obj
    get_global $P2470, "!PREFIX__term:sym<next>"
    $P2469."add_method"(type_obj, "!PREFIX__term:sym<next>", $P2470)
    get_how $P2471, type_obj
    .const 'Sub' $P2472 = "376_1299591493.348" 
    $P2471."add_method"(type_obj, "term:sym<redo>", $P2472)
    get_how $P2473, type_obj
    get_global $P2474, "!PREFIX__term:sym<redo>"
    $P2473."add_method"(type_obj, "!PREFIX__term:sym<redo>", $P2474)
    get_how $P2475, type_obj
    .const 'Sub' $P2476 = "378_1299591493.348" 
    $P2475."add_method"(type_obj, "smartmatch", $P2476)
    get_how $P2477, type_obj
    get_hll_global $P2478, ["HLL"], "Grammar"
    $P2477."add_parent"(type_obj, $P2478)
    get_how $P2479, type_obj
    $P2480 = $P2479."compose"(type_obj)
    .return ($P2480)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "TOP"  :subid("12_1299591493.348") :outer("11_1299591493.348")
    .param pmc param_25
.annotate 'line', 4
    .lex "self", param_25
.annotate 'line', 6
    $P26 = root_new ['parrot';'Hash']
    .lex "%*LANG", $P26
.annotate 'line', 13
    $P27 = root_new ['parrot';'Hash']
    .lex "%*HOW", $P27
.annotate 'line', 22
    new $P28, "Undef"
    .lex "$*DEFAULT-METAATTR", $P28
.annotate 'line', 23
    $P29 = root_new ['parrot';'Hash']
    .lex "%*HOW-METAATTR", $P29
.annotate 'line', 29
    new $P30, "Undef"
    .lex "$*SC", $P30
.annotate 'line', 33
    new $P31, "Undef"
    .lex "$*SCOPE", $P31
.annotate 'line', 34
    new $P32, "Undef"
    .lex "$*MULTINESS", $P32
.annotate 'line', 35
    new $P33, "Undef"
    .lex "$*INVOCANT_OK", $P33
.annotate 'line', 36
    new $P34, "Undef"
    .lex "$*RETURN_USED", $P34
.annotate 'line', 37
    new $P35, "Undef"
    .lex "$*PACKAGE-SETUP", $P35
.annotate 'line', 4
    find_lex $P36, "%*LANG"
    unless_null $P36, vivify_406
    get_hll_global $P36, "%LANG"
    unless_null $P36, vivify_407
    die "Contextual %*LANG not found"
  vivify_407:
  vivify_406:
.annotate 'line', 7
    get_hll_global $P37, ["NQP"], "Regex"
    find_lex $P38, "%*LANG"
    unless_null $P38, vivify_408
    get_hll_global $P38, "%LANG"
    unless_null $P38, vivify_409
    die "Contextual %*LANG not found"
  vivify_409:
    store_lex "%*LANG", $P38
  vivify_408:
    set $P38["Regex"], $P37
.annotate 'line', 8
    get_hll_global $P39, ["NQP"], "RegexActions"
    find_lex $P40, "%*LANG"
    unless_null $P40, vivify_410
    get_hll_global $P40, "%LANG"
    unless_null $P40, vivify_411
    die "Contextual %*LANG not found"
  vivify_411:
    store_lex "%*LANG", $P40
  vivify_410:
    set $P40["Regex-actions"], $P39
.annotate 'line', 9
    get_hll_global $P41, ["NQP"], "Grammar"
    find_lex $P42, "%*LANG"
    unless_null $P42, vivify_412
    get_hll_global $P42, "%LANG"
    unless_null $P42, vivify_413
    die "Contextual %*LANG not found"
  vivify_413:
    store_lex "%*LANG", $P42
  vivify_412:
    set $P42["MAIN"], $P41
.annotate 'line', 10
    get_hll_global $P43, ["NQP"], "Actions"
    find_lex $P44, "%*LANG"
    unless_null $P44, vivify_414
    get_hll_global $P44, "%LANG"
    unless_null $P44, vivify_415
    die "Contextual %*LANG not found"
  vivify_415:
    store_lex "%*LANG", $P44
  vivify_414:
    set $P44["MAIN-actions"], $P43
    find_lex $P45, "%*HOW"
    unless_null $P45, vivify_416
    get_hll_global $P45, "%HOW"
    unless_null $P45, vivify_417
    die "Contextual %*HOW not found"
  vivify_417:
  vivify_416:
.annotate 'line', 14
    get_hll_global $P46, "KnowHOW"
    find_lex $P47, "%*HOW"
    unless_null $P47, vivify_418
    get_hll_global $P47, "%HOW"
    unless_null $P47, vivify_419
    die "Contextual %*HOW not found"
  vivify_419:
    store_lex "%*HOW", $P47
  vivify_418:
    set $P47["knowhow"], $P46
.annotate 'line', 15
    get_hll_global $P48, "NQPModuleHOW"
    find_lex $P49, "%*HOW"
    unless_null $P49, vivify_420
    get_hll_global $P49, "%HOW"
    unless_null $P49, vivify_421
    die "Contextual %*HOW not found"
  vivify_421:
    store_lex "%*HOW", $P49
  vivify_420:
    set $P49["module"], $P48
.annotate 'line', 16
    get_hll_global $P50, "NQPClassHOW"
    find_lex $P51, "%*HOW"
    unless_null $P51, vivify_422
    get_hll_global $P51, "%HOW"
    unless_null $P51, vivify_423
    die "Contextual %*HOW not found"
  vivify_423:
    store_lex "%*HOW", $P51
  vivify_422:
    set $P51["class"], $P50
.annotate 'line', 17
    get_hll_global $P52, "NQPClassHOW"
    find_lex $P53, "%*HOW"
    unless_null $P53, vivify_424
    get_hll_global $P53, "%HOW"
    unless_null $P53, vivify_425
    die "Contextual %*HOW not found"
  vivify_425:
    store_lex "%*HOW", $P53
  vivify_424:
    set $P53["grammar"], $P52
.annotate 'line', 18
    get_hll_global $P54, "NQPParametricRoleHOW"
    find_lex $P55, "%*HOW"
    unless_null $P55, vivify_426
    get_hll_global $P55, "%HOW"
    unless_null $P55, vivify_427
    die "Contextual %*HOW not found"
  vivify_427:
    store_lex "%*HOW", $P55
  vivify_426:
    set $P55["role"], $P54
.annotate 'line', 19
    get_hll_global $P56, "NQPNativeHOW"
    find_lex $P57, "%*HOW"
    unless_null $P57, vivify_428
    get_hll_global $P57, "%HOW"
    unless_null $P57, vivify_429
    die "Contextual %*HOW not found"
  vivify_429:
    store_lex "%*HOW", $P57
  vivify_428:
    set $P57["native"], $P56
.annotate 'line', 22
    new $P58, "String"
    assign $P58, "NQPAttribute"
    store_lex "$*DEFAULT-METAATTR", $P58
    find_lex $P59, "%*HOW-METAATTR"
    unless_null $P59, vivify_430
    get_hll_global $P59, "%HOW-METAATTR"
    unless_null $P59, vivify_431
    die "Contextual %*HOW-METAATTR not found"
  vivify_431:
  vivify_430:
.annotate 'line', 24
    new $P60, "String"
    assign $P60, "KnowHOWAttribute"
    find_lex $P61, "%*HOW-METAATTR"
    unless_null $P61, vivify_432
    get_hll_global $P61, "%HOW-METAATTR"
    unless_null $P61, vivify_433
    die "Contextual %*HOW-METAATTR not found"
  vivify_433:
    store_lex "%*HOW-METAATTR", $P61
  vivify_432:
    set $P61["knowhow"], $P60
.annotate 'line', 29
    get_hll_global $P62, ["HLL";"Compiler"], "SerializationContextBuilder"
.annotate 'line', 31
    time $N63
    set $S64, $N63
    $P65 = $P62."new"($S64 :named("handle"))
.annotate 'line', 29
    store_lex "$*SC", $P65
.annotate 'line', 33
    new $P66, "String"
    assign $P66, ""
    store_lex "$*SCOPE", $P66
.annotate 'line', 34
    new $P67, "String"
    assign $P67, ""
    store_lex "$*MULTINESS", $P67
.annotate 'line', 35
    new $P68, "Integer"
    assign $P68, 0
    store_lex "$*INVOCANT_OK", $P68
.annotate 'line', 36
    new $P69, "Integer"
    assign $P69, 0
    store_lex "$*RETURN_USED", $P69
    find_lex $P70, "$*PACKAGE-SETUP"
    unless_null $P70, vivify_434
    get_hll_global $P70, "$PACKAGE-SETUP"
    unless_null $P70, vivify_435
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_435:
  vivify_434:
.annotate 'line', 38
    find_lex $P71, "self"
    $P72 = $P71."comp_unit"()
.annotate 'line', 4
    .return ($P72)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "identifier"  :subid("13_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx74_tgt
    .local int rx74_pos
    .local int rx74_off
    .local int rx74_eos
    .local int rx74_rep
    .local pmc rx74_cur
    .local pmc rx74_debug
    (rx74_cur, rx74_pos, rx74_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx74_cur
    .local pmc match
    .lex "$/", match
    length rx74_eos, rx74_tgt
    gt rx74_pos, rx74_eos, rx74_done
    set rx74_off, 0
    lt rx74_pos, 2, rx74_start
    sub rx74_off, rx74_pos, 1
    substr rx74_tgt, rx74_tgt, rx74_off
  rx74_start:
    eq $I10, 1, rx74_restart
    if_null rx74_debug, debug_436
    rx74_cur."!cursor_debug"("START", "identifier")
  debug_436:
    $I10 = self.'from'()
    ne $I10, -1, rxscan78_done
    goto rxscan78_scan
  rxscan78_loop:
    (rx74_pos) = rx74_cur."from"()
    inc rx74_pos
    rx74_cur."!cursor_from"(rx74_pos)
    ge rx74_pos, rx74_eos, rxscan78_done
  rxscan78_scan:
    set_addr $I10, rxscan78_loop
    rx74_cur."!mark_push"(0, rx74_pos, $I10)
  rxscan78_done:
.annotate 'line', 43
  # rx subrule "ident" subtype=method negate=
    rx74_cur."!cursor_pos"(rx74_pos)
    $P10 = rx74_cur."ident"()
    unless $P10, rx74_fail
    rx74_pos = $P10."pos"()
  # rx rxquantr79 ** 0..*
    set_addr $I10, rxquantr79_done
    rx74_cur."!mark_push"(0, rx74_pos, $I10)
  rxquantr79_loop:
  # rx enumcharlist negate=0 
    ge rx74_pos, rx74_eos, rx74_fail
    sub $I10, rx74_pos, rx74_off
    substr $S10, rx74_tgt, $I10, 1
    index $I11, "-'", $S10
    lt $I11, 0, rx74_fail
    inc rx74_pos
  # rx subrule "ident" subtype=method negate=
    rx74_cur."!cursor_pos"(rx74_pos)
    $P10 = rx74_cur."ident"()
    unless $P10, rx74_fail
    rx74_pos = $P10."pos"()
    set_addr $I10, rxquantr79_done
    (rx74_rep) = rx74_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr79_done
    rx74_cur."!mark_push"(rx74_rep, rx74_pos, $I10)
    goto rxquantr79_loop
  rxquantr79_done:
  # rx pass
    rx74_cur."!cursor_pass"(rx74_pos, "identifier")
    if_null rx74_debug, debug_437
    rx74_cur."!cursor_debug"("PASS", "identifier", " at pos=", rx74_pos)
  debug_437:
    .return (rx74_cur)
  rx74_restart:
.annotate 'line', 4
    if_null rx74_debug, debug_438
    rx74_cur."!cursor_debug"("NEXT", "identifier")
  debug_438:
  rx74_fail:
    (rx74_rep, rx74_pos, $I10, $P10) = rx74_cur."!mark_fail"(0)
    lt rx74_pos, -1, rx74_done
    eq rx74_pos, -1, rx74_fail
    jump $I10
  rx74_done:
    rx74_cur."!cursor_fail"()
    if_null rx74_debug, debug_439
    rx74_cur."!cursor_debug"("FAIL", "identifier")
  debug_439:
    .return (rx74_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__identifier"  :nsentry("!PREFIX__identifier") :subid("14_1299591493.348") :method
.annotate 'line', 4
    $P76 = self."!PREFIX__!subrule"("ident", "")
    new $P77, "ResizablePMCArray"
    push $P77, $P76
    .return ($P77)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "name"  :subid("15_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx81_tgt
    .local int rx81_pos
    .local int rx81_off
    .local int rx81_eos
    .local int rx81_rep
    .local pmc rx81_cur
    .local pmc rx81_debug
    (rx81_cur, rx81_pos, rx81_tgt, $I10) = self."!cursor_start"()
    rx81_cur."!cursor_caparray"("identifier")
    .lex unicode:"$\x{a2}", rx81_cur
    .local pmc match
    .lex "$/", match
    length rx81_eos, rx81_tgt
    gt rx81_pos, rx81_eos, rx81_done
    set rx81_off, 0
    lt rx81_pos, 2, rx81_start
    sub rx81_off, rx81_pos, 1
    substr rx81_tgt, rx81_tgt, rx81_off
  rx81_start:
    eq $I10, 1, rx81_restart
    if_null rx81_debug, debug_440
    rx81_cur."!cursor_debug"("START", "name")
  debug_440:
    $I10 = self.'from'()
    ne $I10, -1, rxscan84_done
    goto rxscan84_scan
  rxscan84_loop:
    (rx81_pos) = rx81_cur."from"()
    inc rx81_pos
    rx81_cur."!cursor_from"(rx81_pos)
    ge rx81_pos, rx81_eos, rxscan84_done
  rxscan84_scan:
    set_addr $I10, rxscan84_loop
    rx81_cur."!mark_push"(0, rx81_pos, $I10)
  rxscan84_done:
.annotate 'line', 45
  # rx rxquantr85 ** 1..*
    set_addr $I10, rxquantr85_done
    rx81_cur."!mark_push"(0, -1, $I10)
  rxquantr85_loop:
  # rx subrule "identifier" subtype=capture negate=
    rx81_cur."!cursor_pos"(rx81_pos)
    $P10 = rx81_cur."identifier"()
    unless $P10, rx81_fail
    goto rxsubrule86_pass
  rxsubrule86_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx81_fail
  rxsubrule86_pass:
    set_addr $I10, rxsubrule86_back
    rx81_cur."!mark_push"(0, rx81_pos, $I10, $P10)
    $P10."!cursor_names"("identifier")
    rx81_pos = $P10."pos"()
    set_addr $I10, rxquantr85_done
    (rx81_rep) = rx81_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr85_done
    rx81_cur."!mark_push"(rx81_rep, rx81_pos, $I10)
  # rx literal  "::"
    add $I11, rx81_pos, 2
    gt $I11, rx81_eos, rx81_fail
    sub $I11, rx81_pos, rx81_off
    substr $S10, rx81_tgt, $I11, 2
    ne $S10, "::", rx81_fail
    add rx81_pos, 2
    goto rxquantr85_loop
  rxquantr85_done:
  # rx pass
    rx81_cur."!cursor_pass"(rx81_pos, "name")
    if_null rx81_debug, debug_441
    rx81_cur."!cursor_debug"("PASS", "name", " at pos=", rx81_pos)
  debug_441:
    .return (rx81_cur)
  rx81_restart:
.annotate 'line', 4
    if_null rx81_debug, debug_442
    rx81_cur."!cursor_debug"("NEXT", "name")
  debug_442:
  rx81_fail:
    (rx81_rep, rx81_pos, $I10, $P10) = rx81_cur."!mark_fail"(0)
    lt rx81_pos, -1, rx81_done
    eq rx81_pos, -1, rx81_fail
    jump $I10
  rx81_done:
    rx81_cur."!cursor_fail"()
    if_null rx81_debug, debug_443
    rx81_cur."!cursor_debug"("FAIL", "name")
  debug_443:
    .return (rx81_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__name"  :nsentry("!PREFIX__name") :subid("16_1299591493.348") :method
.annotate 'line', 4
    new $P83, "ResizablePMCArray"
    push $P83, ""
    .return ($P83)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "deflongname"  :subid("17_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx88_tgt
    .local int rx88_pos
    .local int rx88_off
    .local int rx88_eos
    .local int rx88_rep
    .local pmc rx88_cur
    .local pmc rx88_debug
    (rx88_cur, rx88_pos, rx88_tgt, $I10) = self."!cursor_start"()
    rx88_cur."!cursor_caparray"("colonpair")
    .lex unicode:"$\x{a2}", rx88_cur
    .local pmc match
    .lex "$/", match
    length rx88_eos, rx88_tgt
    gt rx88_pos, rx88_eos, rx88_done
    set rx88_off, 0
    lt rx88_pos, 2, rx88_start
    sub rx88_off, rx88_pos, 1
    substr rx88_tgt, rx88_tgt, rx88_off
  rx88_start:
    eq $I10, 1, rx88_restart
    if_null rx88_debug, debug_444
    rx88_cur."!cursor_debug"("START", "deflongname")
  debug_444:
    $I10 = self.'from'()
    ne $I10, -1, rxscan92_done
    goto rxscan92_scan
  rxscan92_loop:
    (rx88_pos) = rx88_cur."from"()
    inc rx88_pos
    rx88_cur."!cursor_from"(rx88_pos)
    ge rx88_pos, rx88_eos, rxscan92_done
  rxscan92_scan:
    set_addr $I10, rxscan92_loop
    rx88_cur."!mark_push"(0, rx88_pos, $I10)
  rxscan92_done:
.annotate 'line', 48
  # rx subrule "identifier" subtype=capture negate=
    rx88_cur."!cursor_pos"(rx88_pos)
    $P10 = rx88_cur."identifier"()
    unless $P10, rx88_fail
    rx88_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx88_pos = $P10."pos"()
  # rx rxquantr93 ** 0..1
    set_addr $I10, rxquantr93_done
    rx88_cur."!mark_push"(0, rx88_pos, $I10)
  rxquantr93_loop:
  # rx subrule "colonpair" subtype=capture negate=
    rx88_cur."!cursor_pos"(rx88_pos)
    $P10 = rx88_cur."colonpair"()
    unless $P10, rx88_fail
    goto rxsubrule94_pass
  rxsubrule94_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx88_fail
  rxsubrule94_pass:
    set_addr $I10, rxsubrule94_back
    rx88_cur."!mark_push"(0, rx88_pos, $I10, $P10)
    $P10."!cursor_names"("colonpair")
    rx88_pos = $P10."pos"()
    set_addr $I10, rxquantr93_done
    (rx88_rep) = rx88_cur."!mark_commit"($I10)
  rxquantr93_done:
.annotate 'line', 47
  # rx pass
    rx88_cur."!cursor_pass"(rx88_pos, "deflongname")
    if_null rx88_debug, debug_445
    rx88_cur."!cursor_debug"("PASS", "deflongname", " at pos=", rx88_pos)
  debug_445:
    .return (rx88_cur)
  rx88_restart:
.annotate 'line', 4
    if_null rx88_debug, debug_446
    rx88_cur."!cursor_debug"("NEXT", "deflongname")
  debug_446:
  rx88_fail:
    (rx88_rep, rx88_pos, $I10, $P10) = rx88_cur."!mark_fail"(0)
    lt rx88_pos, -1, rx88_done
    eq rx88_pos, -1, rx88_fail
    jump $I10
  rx88_done:
    rx88_cur."!cursor_fail"()
    if_null rx88_debug, debug_447
    rx88_cur."!cursor_debug"("FAIL", "deflongname")
  debug_447:
    .return (rx88_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__deflongname"  :nsentry("!PREFIX__deflongname") :subid("18_1299591493.348") :method
.annotate 'line', 4
    $P90 = self."!PREFIX__!subrule"("identifier", "")
    new $P91, "ResizablePMCArray"
    push $P91, $P90
    .return ($P91)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "ENDSTMT"  :subid("19_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx96_tgt
    .local int rx96_pos
    .local int rx96_off
    .local int rx96_eos
    .local int rx96_rep
    .local pmc rx96_cur
    .local pmc rx96_debug
    (rx96_cur, rx96_pos, rx96_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx96_cur
    .local pmc match
    .lex "$/", match
    length rx96_eos, rx96_tgt
    gt rx96_pos, rx96_eos, rx96_done
    set rx96_off, 0
    lt rx96_pos, 2, rx96_start
    sub rx96_off, rx96_pos, 1
    substr rx96_tgt, rx96_tgt, rx96_off
  rx96_start:
    eq $I10, 1, rx96_restart
    if_null rx96_debug, debug_448
    rx96_cur."!cursor_debug"("START", "ENDSTMT")
  debug_448:
    $I10 = self.'from'()
    ne $I10, -1, rxscan99_done
    goto rxscan99_scan
  rxscan99_loop:
    (rx96_pos) = rx96_cur."from"()
    inc rx96_pos
    rx96_cur."!cursor_from"(rx96_pos)
    ge rx96_pos, rx96_eos, rxscan99_done
  rxscan99_scan:
    set_addr $I10, rxscan99_loop
    rx96_cur."!mark_push"(0, rx96_pos, $I10)
  rxscan99_done:
.annotate 'line', 55
  # rx rxquantr100 ** 0..1
    set_addr $I10, rxquantr100_done
    rx96_cur."!mark_push"(0, rx96_pos, $I10)
  rxquantr100_loop:
  alt101_0:
.annotate 'line', 52
    set_addr $I10, alt101_1
    rx96_cur."!mark_push"(0, rx96_pos, $I10)
.annotate 'line', 53
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx96_pos, rx96_off
    set rx96_rep, 0
    sub $I12, rx96_eos, rx96_pos
  rxenumcharlistq102_loop:
    le $I12, 0, rxenumcharlistq102_done
    substr $S10, rx96_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq102_done
    inc rx96_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq102_loop
  rxenumcharlistq102_done:
    add rx96_pos, rx96_pos, rx96_rep
  # rxanchor eol
    sub $I10, rx96_pos, rx96_off
    is_cclass $I11, 4096, rx96_tgt, $I10
    if $I11, rxanchor103_done
    ne rx96_pos, rx96_eos, rx96_fail
    eq rx96_pos, 0, rxanchor103_done
    dec $I10
    is_cclass $I11, 4096, rx96_tgt, $I10
    if $I11, rx96_fail
  rxanchor103_done:
  # rx subrule "ws" subtype=method negate=
    rx96_cur."!cursor_pos"(rx96_pos)
    $P10 = rx96_cur."ws"()
    unless $P10, rx96_fail
    rx96_pos = $P10."pos"()
  # rx subrule "MARKER" subtype=zerowidth negate=
    rx96_cur."!cursor_pos"(rx96_pos)
    $P10 = rx96_cur."MARKER"("endstmt")
    unless $P10, rx96_fail
    goto alt101_end
  alt101_1:
.annotate 'line', 54
  # rx rxquantr104 ** 0..1
    set_addr $I10, rxquantr104_done
    rx96_cur."!mark_push"(0, rx96_pos, $I10)
  rxquantr104_loop:
  # rx subrule "unv" subtype=method negate=
    rx96_cur."!cursor_pos"(rx96_pos)
    $P10 = rx96_cur."unv"()
    unless $P10, rx96_fail
    goto rxsubrule105_pass
  rxsubrule105_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx96_fail
  rxsubrule105_pass:
    set_addr $I10, rxsubrule105_back
    rx96_cur."!mark_push"(0, rx96_pos, $I10, $P10)
    rx96_pos = $P10."pos"()
    set_addr $I10, rxquantr104_done
    (rx96_rep) = rx96_cur."!mark_commit"($I10)
  rxquantr104_done:
  # rxanchor eol
    sub $I10, rx96_pos, rx96_off
    is_cclass $I11, 4096, rx96_tgt, $I10
    if $I11, rxanchor106_done
    ne rx96_pos, rx96_eos, rx96_fail
    eq rx96_pos, 0, rxanchor106_done
    dec $I10
    is_cclass $I11, 4096, rx96_tgt, $I10
    if $I11, rx96_fail
  rxanchor106_done:
  # rx subrule "ws" subtype=method negate=
    rx96_cur."!cursor_pos"(rx96_pos)
    $P10 = rx96_cur."ws"()
    unless $P10, rx96_fail
    rx96_pos = $P10."pos"()
  # rx subrule "MARKER" subtype=zerowidth negate=
    rx96_cur."!cursor_pos"(rx96_pos)
    $P10 = rx96_cur."MARKER"("endstmt")
    unless $P10, rx96_fail
  alt101_end:
.annotate 'line', 55
    set_addr $I10, rxquantr100_done
    (rx96_rep) = rx96_cur."!mark_commit"($I10)
  rxquantr100_done:
.annotate 'line', 51
  # rx pass
    rx96_cur."!cursor_pass"(rx96_pos, "ENDSTMT")
    if_null rx96_debug, debug_449
    rx96_cur."!cursor_debug"("PASS", "ENDSTMT", " at pos=", rx96_pos)
  debug_449:
    .return (rx96_cur)
  rx96_restart:
.annotate 'line', 4
    if_null rx96_debug, debug_450
    rx96_cur."!cursor_debug"("NEXT", "ENDSTMT")
  debug_450:
  rx96_fail:
    (rx96_rep, rx96_pos, $I10, $P10) = rx96_cur."!mark_fail"(0)
    lt rx96_pos, -1, rx96_done
    eq rx96_pos, -1, rx96_fail
    jump $I10
  rx96_done:
    rx96_cur."!cursor_fail"()
    if_null rx96_debug, debug_451
    rx96_cur."!cursor_debug"("FAIL", "ENDSTMT")
  debug_451:
    .return (rx96_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__ENDSTMT"  :nsentry("!PREFIX__ENDSTMT") :subid("20_1299591493.348") :method
.annotate 'line', 4
    new $P98, "ResizablePMCArray"
    push $P98, ""
    .return ($P98)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "ws"  :subid("21_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx108_tgt
    .local int rx108_pos
    .local int rx108_off
    .local int rx108_eos
    .local int rx108_rep
    .local pmc rx108_cur
    .local pmc rx108_debug
    (rx108_cur, rx108_pos, rx108_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx108_cur
    .local pmc match
    .lex "$/", match
    length rx108_eos, rx108_tgt
    gt rx108_pos, rx108_eos, rx108_done
    set rx108_off, 0
    lt rx108_pos, 2, rx108_start
    sub rx108_off, rx108_pos, 1
    substr rx108_tgt, rx108_tgt, rx108_off
  rx108_start:
    eq $I10, 1, rx108_restart
    if_null rx108_debug, debug_452
    rx108_cur."!cursor_debug"("START", "ws")
  debug_452:
    $I10 = self.'from'()
    ne $I10, -1, rxscan111_done
    goto rxscan111_scan
  rxscan111_loop:
    (rx108_pos) = rx108_cur."from"()
    inc rx108_pos
    rx108_cur."!cursor_from"(rx108_pos)
    ge rx108_pos, rx108_eos, rxscan111_done
  rxscan111_scan:
    set_addr $I10, rxscan111_loop
    rx108_cur."!mark_push"(0, rx108_pos, $I10)
  rxscan111_done:
  alt112_0:
.annotate 'line', 58
    set_addr $I10, alt112_1
    rx108_cur."!mark_push"(0, rx108_pos, $I10)
.annotate 'line', 59
  # rx subrule "MARKED" subtype=zerowidth negate=
    rx108_cur."!cursor_pos"(rx108_pos)
    $P10 = rx108_cur."MARKED"("ws")
    unless $P10, rx108_fail
    goto alt112_end
  alt112_1:
.annotate 'line', 60
  # rx subrule "ww" subtype=zerowidth negate=1
    rx108_cur."!cursor_pos"(rx108_pos)
    $P10 = rx108_cur."ww"()
    if $P10, rx108_fail
.annotate 'line', 65
  # rx rxquantr113 ** 0..*
    set_addr $I10, rxquantr113_done
    rx108_cur."!mark_push"(0, rx108_pos, $I10)
  rxquantr113_loop:
  alt114_0:
.annotate 'line', 61
    set_addr $I10, alt114_1
    rx108_cur."!mark_push"(0, rx108_pos, $I10)
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx108_pos, rx108_off
    set rx108_rep, 0
    sub $I12, rx108_eos, rx108_pos
  rxenumcharlistq115_loop:
    le $I12, 0, rxenumcharlistq115_done
    substr $S10, rx108_tgt, $I10, 1
    index $I11, unicode:"\n\x{b}\f\r\x{85}\u2028\u2029", $S10
    lt $I11, 0, rxenumcharlistq115_done
    inc rx108_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq115_loop
  rxenumcharlistq115_done:
    lt rx108_rep, 1, rx108_fail
    add rx108_pos, rx108_pos, rx108_rep
    goto alt114_end
  alt114_1:
    set_addr $I10, alt114_2
    rx108_cur."!mark_push"(0, rx108_pos, $I10)
.annotate 'line', 62
  # rx literal  "#"
    add $I11, rx108_pos, 1
    gt $I11, rx108_eos, rx108_fail
    sub $I11, rx108_pos, rx108_off
    ord $I11, rx108_tgt, $I11
    ne $I11, 35, rx108_fail
    add rx108_pos, 1
  # rx charclass_q N r 0..-1
    sub $I10, rx108_pos, rx108_off
    find_cclass $I11, 4096, rx108_tgt, $I10, rx108_eos
    add rx108_pos, rx108_off, $I11
    goto alt114_end
  alt114_2:
    set_addr $I10, alt114_3
    rx108_cur."!mark_push"(0, rx108_pos, $I10)
.annotate 'line', 63
  # rxanchor bol
    eq rx108_pos, 0, rxanchor116_done
    ge rx108_pos, rx108_eos, rx108_fail
    sub $I10, rx108_pos, rx108_off
    dec $I10
    is_cclass $I11, 4096, rx108_tgt, $I10
    unless $I11, rx108_fail
  rxanchor116_done:
  # rx subrule "pod_comment" subtype=method negate=
    rx108_cur."!cursor_pos"(rx108_pos)
    $P10 = rx108_cur."pod_comment"()
    unless $P10, rx108_fail
    rx108_pos = $P10."pos"()
    goto alt114_end
  alt114_3:
.annotate 'line', 64
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx108_pos, rx108_off
    set rx108_rep, 0
    sub $I12, rx108_eos, rx108_pos
  rxenumcharlistq117_loop:
    le $I12, 0, rxenumcharlistq117_done
    substr $S10, rx108_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq117_done
    inc rx108_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq117_loop
  rxenumcharlistq117_done:
    lt rx108_rep, 1, rx108_fail
    add rx108_pos, rx108_pos, rx108_rep
  alt114_end:
.annotate 'line', 65
    set_addr $I10, rxquantr113_done
    (rx108_rep) = rx108_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr113_done
    rx108_cur."!mark_push"(rx108_rep, rx108_pos, $I10)
    goto rxquantr113_loop
  rxquantr113_done:
.annotate 'line', 66
  # rx subrule "MARKER" subtype=zerowidth negate=
    rx108_cur."!cursor_pos"(rx108_pos)
    $P10 = rx108_cur."MARKER"("ws")
    unless $P10, rx108_fail
  alt112_end:
.annotate 'line', 58
  # rx pass
    rx108_cur."!cursor_pass"(rx108_pos, "ws")
    if_null rx108_debug, debug_453
    rx108_cur."!cursor_debug"("PASS", "ws", " at pos=", rx108_pos)
  debug_453:
    .return (rx108_cur)
  rx108_restart:
.annotate 'line', 4
    if_null rx108_debug, debug_454
    rx108_cur."!cursor_debug"("NEXT", "ws")
  debug_454:
  rx108_fail:
    (rx108_rep, rx108_pos, $I10, $P10) = rx108_cur."!mark_fail"(0)
    lt rx108_pos, -1, rx108_done
    eq rx108_pos, -1, rx108_fail
    jump $I10
  rx108_done:
    rx108_cur."!cursor_fail"()
    if_null rx108_debug, debug_455
    rx108_cur."!cursor_debug"("FAIL", "ws")
  debug_455:
    .return (rx108_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__ws"  :nsentry("!PREFIX__ws") :subid("22_1299591493.348") :method
.annotate 'line', 4
    new $P110, "ResizablePMCArray"
    push $P110, ""
    push $P110, ""
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "unv"  :subid("23_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .const 'Sub' $P126 = "25_1299591493.348" 
    capture_lex $P126
    .local string rx119_tgt
    .local int rx119_pos
    .local int rx119_off
    .local int rx119_eos
    .local int rx119_rep
    .local pmc rx119_cur
    .local pmc rx119_debug
    (rx119_cur, rx119_pos, rx119_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx119_cur
    .local pmc match
    .lex "$/", match
    length rx119_eos, rx119_tgt
    gt rx119_pos, rx119_eos, rx119_done
    set rx119_off, 0
    lt rx119_pos, 2, rx119_start
    sub rx119_off, rx119_pos, 1
    substr rx119_tgt, rx119_tgt, rx119_off
  rx119_start:
    eq $I10, 1, rx119_restart
    if_null rx119_debug, debug_456
    rx119_cur."!cursor_debug"("START", "unv")
  debug_456:
    $I10 = self.'from'()
    ne $I10, -1, rxscan122_done
    goto rxscan122_scan
  rxscan122_loop:
    (rx119_pos) = rx119_cur."from"()
    inc rx119_pos
    rx119_cur."!cursor_from"(rx119_pos)
    ge rx119_pos, rx119_eos, rxscan122_done
  rxscan122_scan:
    set_addr $I10, rxscan122_loop
    rx119_cur."!mark_push"(0, rx119_pos, $I10)
  rxscan122_done:
  alt123_0:
.annotate 'line', 71
    set_addr $I10, alt123_1
    rx119_cur."!mark_push"(0, rx119_pos, $I10)
.annotate 'line', 72
  # rxanchor bol
    eq rx119_pos, 0, rxanchor124_done
    ge rx119_pos, rx119_eos, rx119_fail
    sub $I10, rx119_pos, rx119_off
    dec $I10
    is_cclass $I11, 4096, rx119_tgt, $I10
    unless $I11, rx119_fail
  rxanchor124_done:
  # rx subrule "before" subtype=zerowidth negate=
    rx119_cur."!cursor_pos"(rx119_pos)
    .const 'Sub' $P126 = "25_1299591493.348" 
    capture_lex $P126
    $P10 = rx119_cur."before"($P126)
    unless $P10, rx119_fail
  # rx subrule "pod_comment" subtype=method negate=
    rx119_cur."!cursor_pos"(rx119_pos)
    $P10 = rx119_cur."pod_comment"()
    unless $P10, rx119_fail
    rx119_pos = $P10."pos"()
    goto alt123_end
  alt123_1:
    set_addr $I10, alt123_2
    rx119_cur."!mark_push"(0, rx119_pos, $I10)
.annotate 'line', 73
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx119_pos, rx119_off
    set rx119_rep, 0
    sub $I12, rx119_eos, rx119_pos
  rxenumcharlistq131_loop:
    le $I12, 0, rxenumcharlistq131_done
    substr $S10, rx119_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq131_done
    inc rx119_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq131_loop
  rxenumcharlistq131_done:
    add rx119_pos, rx119_pos, rx119_rep
  # rx literal  "#"
    add $I11, rx119_pos, 1
    gt $I11, rx119_eos, rx119_fail
    sub $I11, rx119_pos, rx119_off
    ord $I11, rx119_tgt, $I11
    ne $I11, 35, rx119_fail
    add rx119_pos, 1
  # rx charclass_q N r 0..-1
    sub $I10, rx119_pos, rx119_off
    find_cclass $I11, 4096, rx119_tgt, $I10, rx119_eos
    add rx119_pos, rx119_off, $I11
    goto alt123_end
  alt123_2:
.annotate 'line', 74
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx119_pos, rx119_off
    set rx119_rep, 0
    sub $I12, rx119_eos, rx119_pos
  rxenumcharlistq132_loop:
    le $I12, 0, rxenumcharlistq132_done
    substr $S10, rx119_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq132_done
    inc rx119_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq132_loop
  rxenumcharlistq132_done:
    lt rx119_rep, 1, rx119_fail
    add rx119_pos, rx119_pos, rx119_rep
  alt123_end:
.annotate 'line', 69
  # rx pass
    rx119_cur."!cursor_pass"(rx119_pos, "unv")
    if_null rx119_debug, debug_461
    rx119_cur."!cursor_debug"("PASS", "unv", " at pos=", rx119_pos)
  debug_461:
    .return (rx119_cur)
  rx119_restart:
.annotate 'line', 4
    if_null rx119_debug, debug_462
    rx119_cur."!cursor_debug"("NEXT", "unv")
  debug_462:
  rx119_fail:
    (rx119_rep, rx119_pos, $I10, $P10) = rx119_cur."!mark_fail"(0)
    lt rx119_pos, -1, rx119_done
    eq rx119_pos, -1, rx119_fail
    jump $I10
  rx119_done:
    rx119_cur."!cursor_fail"()
    if_null rx119_debug, debug_463
    rx119_cur."!cursor_debug"("FAIL", "unv")
  debug_463:
    .return (rx119_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__unv"  :nsentry("!PREFIX__unv") :subid("24_1299591493.348") :method
.annotate 'line', 4
    new $P121, "ResizablePMCArray"
    push $P121, ""
    push $P121, ""
    push $P121, ""
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block125"  :anon :subid("25_1299591493.348") :method :outer("23_1299591493.348")
.annotate 'line', 72
    .local string rx127_tgt
    .local int rx127_pos
    .local int rx127_off
    .local int rx127_eos
    .local int rx127_rep
    .local pmc rx127_cur
    .local pmc rx127_debug
    (rx127_cur, rx127_pos, rx127_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx127_cur
    .local pmc match
    .lex "$/", match
    length rx127_eos, rx127_tgt
    gt rx127_pos, rx127_eos, rx127_done
    set rx127_off, 0
    lt rx127_pos, 2, rx127_start
    sub rx127_off, rx127_pos, 1
    substr rx127_tgt, rx127_tgt, rx127_off
  rx127_start:
    eq $I10, 1, rx127_restart
    if_null rx127_debug, debug_457
    rx127_cur."!cursor_debug"("START", "")
  debug_457:
    $I10 = self.'from'()
    ne $I10, -1, rxscan128_done
    goto rxscan128_scan
  rxscan128_loop:
    (rx127_pos) = rx127_cur."from"()
    inc rx127_pos
    rx127_cur."!cursor_from"(rx127_pos)
    ge rx127_pos, rx127_eos, rxscan128_done
  rxscan128_scan:
    set_addr $I10, rxscan128_loop
    rx127_cur."!mark_push"(0, rx127_pos, $I10)
  rxscan128_done:
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx127_pos, rx127_off
    set rx127_rep, 0
    sub $I12, rx127_eos, rx127_pos
  rxenumcharlistq129_loop:
    le $I12, 0, rxenumcharlistq129_done
    substr $S10, rx127_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq129_done
    inc rx127_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq129_loop
  rxenumcharlistq129_done:
    add rx127_pos, rx127_pos, rx127_rep
  # rx literal  "="
    add $I11, rx127_pos, 1
    gt $I11, rx127_eos, rx127_fail
    sub $I11, rx127_pos, rx127_off
    ord $I11, rx127_tgt, $I11
    ne $I11, 61, rx127_fail
    add rx127_pos, 1
  alt130_0:
    set_addr $I10, alt130_1
    rx127_cur."!mark_push"(0, rx127_pos, $I10)
  # rx charclass w
    ge rx127_pos, rx127_eos, rx127_fail
    sub $I10, rx127_pos, rx127_off
    is_cclass $I11, 8192, rx127_tgt, $I10
    unless $I11, rx127_fail
    inc rx127_pos
    goto alt130_end
  alt130_1:
  # rx literal  "\\"
    add $I11, rx127_pos, 1
    gt $I11, rx127_eos, rx127_fail
    sub $I11, rx127_pos, rx127_off
    ord $I11, rx127_tgt, $I11
    ne $I11, 92, rx127_fail
    add rx127_pos, 1
  alt130_end:
  # rx pass
    rx127_cur."!cursor_pass"(rx127_pos, "")
    if_null rx127_debug, debug_458
    rx127_cur."!cursor_debug"("PASS", "", " at pos=", rx127_pos)
  debug_458:
    .return (rx127_cur)
  rx127_restart:
    if_null rx127_debug, debug_459
    rx127_cur."!cursor_debug"("NEXT", "")
  debug_459:
  rx127_fail:
    (rx127_rep, rx127_pos, $I10, $P10) = rx127_cur."!mark_fail"(0)
    lt rx127_pos, -1, rx127_done
    eq rx127_pos, -1, rx127_fail
    jump $I10
  rx127_done:
    rx127_cur."!cursor_fail"()
    if_null rx127_debug, debug_460
    rx127_cur."!cursor_debug"("FAIL", "")
  debug_460:
    .return (rx127_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "pod_comment"  :subid("26_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .const 'Sub' $P165 = "28_1299591493.348" 
    capture_lex $P165
    .local string rx134_tgt
    .local int rx134_pos
    .local int rx134_off
    .local int rx134_eos
    .local int rx134_rep
    .local pmc rx134_cur
    .local pmc rx134_debug
    (rx134_cur, rx134_pos, rx134_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx134_cur
    .local pmc match
    .lex "$/", match
    length rx134_eos, rx134_tgt
    gt rx134_pos, rx134_eos, rx134_done
    set rx134_off, 0
    lt rx134_pos, 2, rx134_start
    sub rx134_off, rx134_pos, 1
    substr rx134_tgt, rx134_tgt, rx134_off
  rx134_start:
    eq $I10, 1, rx134_restart
    if_null rx134_debug, debug_464
    rx134_cur."!cursor_debug"("START", "pod_comment")
  debug_464:
    $I10 = self.'from'()
    ne $I10, -1, rxscan137_done
    goto rxscan137_scan
  rxscan137_loop:
    (rx134_pos) = rx134_cur."from"()
    inc rx134_pos
    rx134_cur."!cursor_from"(rx134_pos)
    ge rx134_pos, rx134_eos, rxscan137_done
  rxscan137_scan:
    set_addr $I10, rxscan137_loop
    rx134_cur."!mark_push"(0, rx134_pos, $I10)
  rxscan137_done:
.annotate 'line', 79
  # rxanchor bol
    eq rx134_pos, 0, rxanchor138_done
    ge rx134_pos, rx134_eos, rx134_fail
    sub $I10, rx134_pos, rx134_off
    dec $I10
    is_cclass $I11, 4096, rx134_tgt, $I10
    unless $I11, rx134_fail
  rxanchor138_done:
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx134_pos, rx134_off
    set rx134_rep, 0
    sub $I12, rx134_eos, rx134_pos
  rxenumcharlistq139_loop:
    le $I12, 0, rxenumcharlistq139_done
    substr $S10, rx134_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq139_done
    inc rx134_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq139_loop
  rxenumcharlistq139_done:
    add rx134_pos, rx134_pos, rx134_rep
  # rx literal  "="
    add $I11, rx134_pos, 1
    gt $I11, rx134_eos, rx134_fail
    sub $I11, rx134_pos, rx134_off
    ord $I11, rx134_tgt, $I11
    ne $I11, 61, rx134_fail
    add rx134_pos, 1
  alt140_0:
.annotate 'line', 80
    set_addr $I10, alt140_1
    rx134_cur."!mark_push"(0, rx134_pos, $I10)
.annotate 'line', 81
  # rx literal  "begin"
    add $I11, rx134_pos, 5
    gt $I11, rx134_eos, rx134_fail
    sub $I11, rx134_pos, rx134_off
    substr $S10, rx134_tgt, $I11, 5
    ne $S10, "begin", rx134_fail
    add rx134_pos, 5
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx134_pos, rx134_off
    set rx134_rep, 0
    sub $I12, rx134_eos, rx134_pos
  rxenumcharlistq141_loop:
    le $I12, 0, rxenumcharlistq141_done
    substr $S10, rx134_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq141_done
    inc rx134_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq141_loop
  rxenumcharlistq141_done:
    lt rx134_rep, 1, rx134_fail
    add rx134_pos, rx134_pos, rx134_rep
  # rx literal  "END"
    add $I11, rx134_pos, 3
    gt $I11, rx134_eos, rx134_fail
    sub $I11, rx134_pos, rx134_off
    substr $S10, rx134_tgt, $I11, 3
    ne $S10, "END", rx134_fail
    add rx134_pos, 3
  # rxanchor rwb
    le rx134_pos, 0, rx134_fail
    sub $I10, rx134_pos, rx134_off
    is_cclass $I11, 8192, rx134_tgt, $I10
    if $I11, rx134_fail
    dec $I10
    is_cclass $I11, 8192, rx134_tgt, $I10
    unless $I11, rx134_fail
  alt142_0:
.annotate 'line', 82
    set_addr $I10, alt142_1
    rx134_cur."!mark_push"(0, rx134_pos, $I10)
  # rx rxquantf143 ** 0..*
    set_addr $I10, rxquantf143_loop
    rx134_cur."!mark_push"(0, rx134_pos, $I10)
    goto rxquantf143_done
  rxquantf143_loop:
  # rx charclass .
    ge rx134_pos, rx134_eos, rx134_fail
    inc rx134_pos
    set_addr $I10, rxquantf143_loop
    rx134_cur."!mark_push"(rx134_rep, rx134_pos, $I10)
  rxquantf143_done:
  # rx charclass nl
    ge rx134_pos, rx134_eos, rx134_fail
    sub $I10, rx134_pos, rx134_off
    is_cclass $I11, 4096, rx134_tgt, $I10
    unless $I11, rx134_fail
    substr $S10, rx134_tgt, $I10, 2
    iseq $I11, $S10, "\r\n"
    add rx134_pos, $I11
    inc rx134_pos
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx134_pos, rx134_off
    set rx134_rep, 0
    sub $I12, rx134_eos, rx134_pos
  rxenumcharlistq145_loop:
    le $I12, 0, rxenumcharlistq145_done
    substr $S10, rx134_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq145_done
    inc rx134_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq145_loop
  rxenumcharlistq145_done:
    add rx134_pos, rx134_pos, rx134_rep
  # rx literal  "=end"
    add $I11, rx134_pos, 4
    gt $I11, rx134_eos, rx134_fail
    sub $I11, rx134_pos, rx134_off
    substr $S10, rx134_tgt, $I11, 4
    ne $S10, "=end", rx134_fail
    add rx134_pos, 4
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx134_pos, rx134_off
    set rx134_rep, 0
    sub $I12, rx134_eos, rx134_pos
  rxenumcharlistq146_loop:
    le $I12, 0, rxenumcharlistq146_done
    substr $S10, rx134_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq146_done
    inc rx134_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq146_loop
  rxenumcharlistq146_done:
    lt rx134_rep, 1, rx134_fail
    add rx134_pos, rx134_pos, rx134_rep
  # rx literal  "END"
    add $I11, rx134_pos, 3
    gt $I11, rx134_eos, rx134_fail
    sub $I11, rx134_pos, rx134_off
    substr $S10, rx134_tgt, $I11, 3
    ne $S10, "END", rx134_fail
    add rx134_pos, 3
  # rxanchor rwb
    le rx134_pos, 0, rx134_fail
    sub $I10, rx134_pos, rx134_off
    is_cclass $I11, 8192, rx134_tgt, $I10
    if $I11, rx134_fail
    dec $I10
    is_cclass $I11, 8192, rx134_tgt, $I10
    unless $I11, rx134_fail
  # rx charclass_q N r 0..-1
    sub $I10, rx134_pos, rx134_off
    find_cclass $I11, 4096, rx134_tgt, $I10, rx134_eos
    add rx134_pos, rx134_off, $I11
    goto alt142_end
  alt142_1:
  # rx charclass_q . r 0..-1
    sub $I10, rx134_pos, rx134_off
    find_not_cclass $I11, 65535, rx134_tgt, $I10, rx134_eos
    add rx134_pos, rx134_off, $I11
  alt142_end:
.annotate 'line', 81
    goto alt140_end
  alt140_1:
    set_addr $I10, alt140_2
    rx134_cur."!mark_push"(0, rx134_pos, $I10)
.annotate 'line', 83
  # rx literal  "begin"
    add $I11, rx134_pos, 5
    gt $I11, rx134_eos, rx134_fail
    sub $I11, rx134_pos, rx134_off
    substr $S10, rx134_tgt, $I11, 5
    ne $S10, "begin", rx134_fail
    add rx134_pos, 5
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx134_pos, rx134_off
    set rx134_rep, 0
    sub $I12, rx134_eos, rx134_pos
  rxenumcharlistq147_loop:
    le $I12, 0, rxenumcharlistq147_done
    substr $S10, rx134_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq147_done
    inc rx134_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq147_loop
  rxenumcharlistq147_done:
    lt rx134_rep, 1, rx134_fail
    add rx134_pos, rx134_pos, rx134_rep
  # rx subrule "identifier" subtype=capture negate=
    rx134_cur."!cursor_pos"(rx134_pos)
    $P10 = rx134_cur."identifier"()
    unless $P10, rx134_fail
    rx134_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx134_pos = $P10."pos"()
  alt148_0:
.annotate 'line', 84
    set_addr $I10, alt148_1
    rx134_cur."!mark_push"(0, rx134_pos, $I10)
.annotate 'line', 85
  # rx rxquantf149 ** 0..*
    set_addr $I10, rxquantf149_loop
    rx134_cur."!mark_push"(0, rx134_pos, $I10)
    goto rxquantf149_done
  rxquantf149_loop:
  # rx charclass .
    ge rx134_pos, rx134_eos, rx134_fail
    inc rx134_pos
    set_addr $I10, rxquantf149_loop
    rx134_cur."!mark_push"(rx134_rep, rx134_pos, $I10)
  rxquantf149_done:
  # rx charclass nl
    ge rx134_pos, rx134_eos, rx134_fail
    sub $I10, rx134_pos, rx134_off
    is_cclass $I11, 4096, rx134_tgt, $I10
    unless $I11, rx134_fail
    substr $S10, rx134_tgt, $I10, 2
    iseq $I11, $S10, "\r\n"
    add rx134_pos, $I11
    inc rx134_pos
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx134_pos, rx134_off
    set rx134_rep, 0
    sub $I12, rx134_eos, rx134_pos
  rxenumcharlistq151_loop:
    le $I12, 0, rxenumcharlistq151_done
    substr $S10, rx134_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq151_done
    inc rx134_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq151_loop
  rxenumcharlistq151_done:
    add rx134_pos, rx134_pos, rx134_rep
  # rx literal  "=end"
    add $I11, rx134_pos, 4
    gt $I11, rx134_eos, rx134_fail
    sub $I11, rx134_pos, rx134_off
    substr $S10, rx134_tgt, $I11, 4
    ne $S10, "=end", rx134_fail
    add rx134_pos, 4
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx134_pos, rx134_off
    set rx134_rep, 0
    sub $I12, rx134_eos, rx134_pos
  rxenumcharlistq152_loop:
    le $I12, 0, rxenumcharlistq152_done
    substr $S10, rx134_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq152_done
    inc rx134_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq152_loop
  rxenumcharlistq152_done:
    lt rx134_rep, 1, rx134_fail
    add rx134_pos, rx134_pos, rx134_rep
  # rx subrule "!BACKREF" subtype=method negate=
    rx134_cur."!cursor_pos"(rx134_pos)
    $P10 = rx134_cur."!BACKREF"("identifier")
    unless $P10, rx134_fail
    rx134_pos = $P10."pos"()
  # rxanchor rwb
    le rx134_pos, 0, rx134_fail
    sub $I10, rx134_pos, rx134_off
    is_cclass $I11, 8192, rx134_tgt, $I10
    if $I11, rx134_fail
    dec $I10
    is_cclass $I11, 8192, rx134_tgt, $I10
    unless $I11, rx134_fail
  # rx charclass_q N r 0..-1
    sub $I10, rx134_pos, rx134_off
    find_cclass $I11, 4096, rx134_tgt, $I10, rx134_eos
    add rx134_pos, rx134_off, $I11
    goto alt148_end
  alt148_1:
.annotate 'line', 86
  # rx subrule "panic" subtype=method negate=
    rx134_cur."!cursor_pos"(rx134_pos)
    $P10 = rx134_cur."panic"("=begin without matching =end")
    unless $P10, rx134_fail
    rx134_pos = $P10."pos"()
  alt148_end:
.annotate 'line', 83
    goto alt140_end
  alt140_2:
    set_addr $I10, alt140_3
    rx134_cur."!mark_push"(0, rx134_pos, $I10)
.annotate 'line', 88
  # rx literal  "begin"
    add $I11, rx134_pos, 5
    gt $I11, rx134_eos, rx134_fail
    sub $I11, rx134_pos, rx134_off
    substr $S10, rx134_tgt, $I11, 5
    ne $S10, "begin", rx134_fail
    add rx134_pos, 5
  # rxanchor rwb
    le rx134_pos, 0, rx134_fail
    sub $I10, rx134_pos, rx134_off
    is_cclass $I11, 8192, rx134_tgt, $I10
    if $I11, rx134_fail
    dec $I10
    is_cclass $I11, 8192, rx134_tgt, $I10
    unless $I11, rx134_fail
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx134_pos, rx134_off
    set rx134_rep, 0
    sub $I12, rx134_eos, rx134_pos
  rxenumcharlistq154_loop:
    le $I12, 0, rxenumcharlistq154_done
    substr $S10, rx134_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq154_done
    inc rx134_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq154_loop
  rxenumcharlistq154_done:
    add rx134_pos, rx134_pos, rx134_rep
  alt155_0:
.annotate 'line', 89
    set_addr $I10, alt155_1
    rx134_cur."!mark_push"(0, rx134_pos, $I10)
  # rxanchor eol
    sub $I10, rx134_pos, rx134_off
    is_cclass $I11, 4096, rx134_tgt, $I10
    if $I11, rxanchor156_done
    ne rx134_pos, rx134_eos, rx134_fail
    eq rx134_pos, 0, rxanchor156_done
    dec $I10
    is_cclass $I11, 4096, rx134_tgt, $I10
    if $I11, rx134_fail
  rxanchor156_done:
    goto alt155_end
  alt155_1:
    set_addr $I10, alt155_2
    rx134_cur."!mark_push"(0, rx134_pos, $I10)
  # rx literal  "#"
    add $I11, rx134_pos, 1
    gt $I11, rx134_eos, rx134_fail
    sub $I11, rx134_pos, rx134_off
    ord $I11, rx134_tgt, $I11
    ne $I11, 35, rx134_fail
    add rx134_pos, 1
    goto alt155_end
  alt155_2:
  # rx subrule "panic" subtype=method negate=
    rx134_cur."!cursor_pos"(rx134_pos)
    $P10 = rx134_cur."panic"("Unrecognized token after =begin")
    unless $P10, rx134_fail
    rx134_pos = $P10."pos"()
  alt155_end:
  alt157_0:
.annotate 'line', 90
    set_addr $I10, alt157_1
    rx134_cur."!mark_push"(0, rx134_pos, $I10)
.annotate 'line', 91
  # rx rxquantf158 ** 0..*
    set_addr $I10, rxquantf158_loop
    rx134_cur."!mark_push"(0, rx134_pos, $I10)
    goto rxquantf158_done
  rxquantf158_loop:
  # rx charclass .
    ge rx134_pos, rx134_eos, rx134_fail
    inc rx134_pos
    set_addr $I10, rxquantf158_loop
    rx134_cur."!mark_push"(rx134_rep, rx134_pos, $I10)
  rxquantf158_done:
  # rx charclass nl
    ge rx134_pos, rx134_eos, rx134_fail
    sub $I10, rx134_pos, rx134_off
    is_cclass $I11, 4096, rx134_tgt, $I10
    unless $I11, rx134_fail
    substr $S10, rx134_tgt, $I10, 2
    iseq $I11, $S10, "\r\n"
    add rx134_pos, $I11
    inc rx134_pos
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx134_pos, rx134_off
    set rx134_rep, 0
    sub $I12, rx134_eos, rx134_pos
  rxenumcharlistq160_loop:
    le $I12, 0, rxenumcharlistq160_done
    substr $S10, rx134_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq160_done
    inc rx134_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq160_loop
  rxenumcharlistq160_done:
    add rx134_pos, rx134_pos, rx134_rep
  # rx literal  "=end"
    add $I11, rx134_pos, 4
    gt $I11, rx134_eos, rx134_fail
    sub $I11, rx134_pos, rx134_off
    substr $S10, rx134_tgt, $I11, 4
    ne $S10, "=end", rx134_fail
    add rx134_pos, 4
  # rxanchor rwb
    le rx134_pos, 0, rx134_fail
    sub $I10, rx134_pos, rx134_off
    is_cclass $I11, 8192, rx134_tgt, $I10
    if $I11, rx134_fail
    dec $I10
    is_cclass $I11, 8192, rx134_tgt, $I10
    unless $I11, rx134_fail
  # rx charclass_q N r 0..-1
    sub $I10, rx134_pos, rx134_off
    find_cclass $I11, 4096, rx134_tgt, $I10, rx134_eos
    add rx134_pos, rx134_off, $I11
    goto alt157_end
  alt157_1:
.annotate 'line', 92
  # rx subrule "panic" subtype=method negate=
    rx134_cur."!cursor_pos"(rx134_pos)
    $P10 = rx134_cur."panic"("=begin without matching =end")
    unless $P10, rx134_fail
    rx134_pos = $P10."pos"()
  alt157_end:
.annotate 'line', 88
    goto alt140_end
  alt140_3:
    set_addr $I10, alt140_4
    rx134_cur."!mark_push"(0, rx134_pos, $I10)
.annotate 'line', 94
  # rx subrule "identifier" subtype=capture negate=
    rx134_cur."!cursor_pos"(rx134_pos)
    $P10 = rx134_cur."identifier"()
    unless $P10, rx134_fail
    rx134_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx134_pos = $P10."pos"()
.annotate 'line', 95
  # rx rxquantf161 ** 0..*
    set_addr $I10, rxquantf161_loop
    rx134_cur."!mark_push"(0, rx134_pos, $I10)
    goto rxquantf161_done
  rxquantf161_loop:
  # rx charclass .
    ge rx134_pos, rx134_eos, rx134_fail
    inc rx134_pos
    set_addr $I10, rxquantf161_loop
    rx134_cur."!mark_push"(rx134_rep, rx134_pos, $I10)
  rxquantf161_done:
  # rxanchor bol
    eq rx134_pos, 0, rxanchor163_done
    ge rx134_pos, rx134_eos, rx134_fail
    sub $I10, rx134_pos, rx134_off
    dec $I10
    is_cclass $I11, 4096, rx134_tgt, $I10
    unless $I11, rx134_fail
  rxanchor163_done:
  # rx subrule "before" subtype=zerowidth negate=
    rx134_cur."!cursor_pos"(rx134_pos)
    .const 'Sub' $P165 = "28_1299591493.348" 
    capture_lex $P165
    $P10 = rx134_cur."before"($P165)
    unless $P10, rx134_fail
.annotate 'line', 94
    goto alt140_end
  alt140_4:
  alt171_0:
.annotate 'line', 101
    set_addr $I10, alt171_1
    rx134_cur."!mark_push"(0, rx134_pos, $I10)
  # rx charclass s
    ge rx134_pos, rx134_eos, rx134_fail
    sub $I10, rx134_pos, rx134_off
    is_cclass $I11, 32, rx134_tgt, $I10
    unless $I11, rx134_fail
    inc rx134_pos
    goto alt171_end
  alt171_1:
  # rx subrule "panic" subtype=method negate=
    rx134_cur."!cursor_pos"(rx134_pos)
    $P10 = rx134_cur."panic"("Illegal pod directive")
    unless $P10, rx134_fail
    rx134_pos = $P10."pos"()
  alt171_end:
.annotate 'line', 102
  # rx charclass_q N r 0..-1
    sub $I10, rx134_pos, rx134_off
    find_cclass $I11, 4096, rx134_tgt, $I10, rx134_eos
    add rx134_pos, rx134_off, $I11
  alt140_end:
.annotate 'line', 78
  # rx pass
    rx134_cur."!cursor_pass"(rx134_pos, "pod_comment")
    if_null rx134_debug, debug_469
    rx134_cur."!cursor_debug"("PASS", "pod_comment", " at pos=", rx134_pos)
  debug_469:
    .return (rx134_cur)
  rx134_restart:
.annotate 'line', 4
    if_null rx134_debug, debug_470
    rx134_cur."!cursor_debug"("NEXT", "pod_comment")
  debug_470:
  rx134_fail:
    (rx134_rep, rx134_pos, $I10, $P10) = rx134_cur."!mark_fail"(0)
    lt rx134_pos, -1, rx134_done
    eq rx134_pos, -1, rx134_fail
    jump $I10
  rx134_done:
    rx134_cur."!cursor_fail"()
    if_null rx134_debug, debug_471
    rx134_cur."!cursor_debug"("FAIL", "pod_comment")
  debug_471:
    .return (rx134_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__pod_comment"  :nsentry("!PREFIX__pod_comment") :subid("27_1299591493.348") :method
.annotate 'line', 4
    new $P136, "ResizablePMCArray"
    push $P136, ""
    .return ($P136)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block164"  :anon :subid("28_1299591493.348") :method :outer("26_1299591493.348")
.annotate 'line', 95
    .local string rx166_tgt
    .local int rx166_pos
    .local int rx166_off
    .local int rx166_eos
    .local int rx166_rep
    .local pmc rx166_cur
    .local pmc rx166_debug
    (rx166_cur, rx166_pos, rx166_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx166_cur
    .local pmc match
    .lex "$/", match
    length rx166_eos, rx166_tgt
    gt rx166_pos, rx166_eos, rx166_done
    set rx166_off, 0
    lt rx166_pos, 2, rx166_start
    sub rx166_off, rx166_pos, 1
    substr rx166_tgt, rx166_tgt, rx166_off
  rx166_start:
    eq $I10, 1, rx166_restart
    if_null rx166_debug, debug_465
    rx166_cur."!cursor_debug"("START", "")
  debug_465:
    $I10 = self.'from'()
    ne $I10, -1, rxscan167_done
    goto rxscan167_scan
  rxscan167_loop:
    (rx166_pos) = rx166_cur."from"()
    inc rx166_pos
    rx166_cur."!cursor_from"(rx166_pos)
    ge rx166_pos, rx166_eos, rxscan167_done
  rxscan167_scan:
    set_addr $I10, rxscan167_loop
    rx166_cur."!mark_push"(0, rx166_pos, $I10)
  rxscan167_done:
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx166_pos, rx166_off
    set rx166_rep, 0
    sub $I12, rx166_eos, rx166_pos
  rxenumcharlistq168_loop:
    le $I12, 0, rxenumcharlistq168_done
    substr $S10, rx166_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq168_done
    inc rx166_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq168_loop
  rxenumcharlistq168_done:
    add rx166_pos, rx166_pos, rx166_rep
  alt169_0:
    set_addr $I10, alt169_1
    rx166_cur."!mark_push"(0, rx166_pos, $I10)
.annotate 'line', 96
  # rx literal  "="
    add $I11, rx166_pos, 1
    gt $I11, rx166_eos, rx166_fail
    sub $I11, rx166_pos, rx166_off
    ord $I11, rx166_tgt, $I11
    ne $I11, 61, rx166_fail
    add rx166_pos, 1
.annotate 'line', 98
  # rx rxquantr170 ** 0..1
    set_addr $I10, rxquantr170_done
    rx166_cur."!mark_push"(0, rx166_pos, $I10)
  rxquantr170_loop:
.annotate 'line', 97
  # rx literal  "cut"
    add $I11, rx166_pos, 3
    gt $I11, rx166_eos, rx166_fail
    sub $I11, rx166_pos, rx166_off
    substr $S10, rx166_tgt, $I11, 3
    ne $S10, "cut", rx166_fail
    add rx166_pos, 3
  # rxanchor rwb
    le rx166_pos, 0, rx166_fail
    sub $I10, rx166_pos, rx166_off
    is_cclass $I11, 8192, rx166_tgt, $I10
    if $I11, rx166_fail
    dec $I10
    is_cclass $I11, 8192, rx166_tgt, $I10
    unless $I11, rx166_fail
.annotate 'line', 98
  # rx subrule "panic" subtype=method negate=
    rx166_cur."!cursor_pos"(rx166_pos)
    $P10 = rx166_cur."panic"("Obsolete pod format, please use =begin/=end instead")
    unless $P10, rx166_fail
    rx166_pos = $P10."pos"()
    set_addr $I10, rxquantr170_done
    (rx166_rep) = rx166_cur."!mark_commit"($I10)
  rxquantr170_done:
.annotate 'line', 95
    goto alt169_end
  alt169_1:
.annotate 'line', 99
  # rx charclass nl
    ge rx166_pos, rx166_eos, rx166_fail
    sub $I10, rx166_pos, rx166_off
    is_cclass $I11, 4096, rx166_tgt, $I10
    unless $I11, rx166_fail
    substr $S10, rx166_tgt, $I10, 2
    iseq $I11, $S10, "\r\n"
    add rx166_pos, $I11
    inc rx166_pos
  alt169_end:
.annotate 'line', 95
  # rx pass
    rx166_cur."!cursor_pass"(rx166_pos, "")
    if_null rx166_debug, debug_466
    rx166_cur."!cursor_debug"("PASS", "", " at pos=", rx166_pos)
  debug_466:
    .return (rx166_cur)
  rx166_restart:
    if_null rx166_debug, debug_467
    rx166_cur."!cursor_debug"("NEXT", "")
  debug_467:
  rx166_fail:
    (rx166_rep, rx166_pos, $I10, $P10) = rx166_cur."!mark_fail"(0)
    lt rx166_pos, -1, rx166_done
    eq rx166_pos, -1, rx166_fail
    jump $I10
  rx166_done:
    rx166_cur."!cursor_fail"()
    if_null rx166_debug, debug_468
    rx166_cur."!cursor_debug"("FAIL", "")
  debug_468:
    .return (rx166_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "comp_unit"  :subid("29_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 110
    new $P173, "Undef"
    .lex "$*HAS_YOU_ARE_HERE", $P173
.annotate 'line', 4
    .local string rx174_tgt
    .local int rx174_pos
    .local int rx174_off
    .local int rx174_eos
    .local int rx174_rep
    .local pmc rx174_cur
    .local pmc rx174_debug
    (rx174_cur, rx174_pos, rx174_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx174_cur
    .local pmc match
    .lex "$/", match
    length rx174_eos, rx174_tgt
    gt rx174_pos, rx174_eos, rx174_done
    set rx174_off, 0
    lt rx174_pos, 2, rx174_start
    sub rx174_off, rx174_pos, 1
    substr rx174_tgt, rx174_tgt, rx174_off
  rx174_start:
    eq $I10, 1, rx174_restart
    if_null rx174_debug, debug_472
    rx174_cur."!cursor_debug"("START", "comp_unit")
  debug_472:
    $I10 = self.'from'()
    ne $I10, -1, rxscan178_done
    goto rxscan178_scan
  rxscan178_loop:
    (rx174_pos) = rx174_cur."from"()
    inc rx174_pos
    rx174_cur."!cursor_from"(rx174_pos)
    ge rx174_pos, rx174_eos, rxscan178_done
  rxscan178_scan:
    set_addr $I10, rxscan178_loop
    rx174_cur."!mark_push"(0, rx174_pos, $I10)
  rxscan178_done:
.annotate 'line', 110
    rx174_cur."!cursor_pos"(rx174_pos)
    new $P179, "Integer"
    assign $P179, 0
    store_lex "$*HAS_YOU_ARE_HERE", $P179
.annotate 'line', 111
  # rx subrule "newpad" subtype=method negate=
    rx174_cur."!cursor_pos"(rx174_pos)
    $P10 = rx174_cur."newpad"()
    unless $P10, rx174_fail
    rx174_pos = $P10."pos"()
.annotate 'line', 112
  # rx subrule "outerctx" subtype=method negate=
    rx174_cur."!cursor_pos"(rx174_pos)
    $P10 = rx174_cur."outerctx"()
    unless $P10, rx174_fail
    rx174_pos = $P10."pos"()
.annotate 'line', 113
  # rx subrule "statementlist" subtype=capture negate=
    rx174_cur."!cursor_pos"(rx174_pos)
    $P10 = rx174_cur."statementlist"()
    unless $P10, rx174_fail
    rx174_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statementlist")
    rx174_pos = $P10."pos"()
  alt180_0:
.annotate 'line', 114
    set_addr $I10, alt180_1
    rx174_cur."!mark_push"(0, rx174_pos, $I10)
  # rxanchor eos
    ne rx174_pos, rx174_eos, rx174_fail
    goto alt180_end
  alt180_1:
  # rx subrule "panic" subtype=method negate=
    rx174_cur."!cursor_pos"(rx174_pos)
    $P10 = rx174_cur."panic"("Confused")
    unless $P10, rx174_fail
    rx174_pos = $P10."pos"()
  alt180_end:
.annotate 'line', 109
  # rx pass
    rx174_cur."!cursor_pass"(rx174_pos, "comp_unit")
    if_null rx174_debug, debug_473
    rx174_cur."!cursor_debug"("PASS", "comp_unit", " at pos=", rx174_pos)
  debug_473:
    .return (rx174_cur)
  rx174_restart:
.annotate 'line', 4
    if_null rx174_debug, debug_474
    rx174_cur."!cursor_debug"("NEXT", "comp_unit")
  debug_474:
  rx174_fail:
    (rx174_rep, rx174_pos, $I10, $P10) = rx174_cur."!mark_fail"(0)
    lt rx174_pos, -1, rx174_done
    eq rx174_pos, -1, rx174_fail
    jump $I10
  rx174_done:
    rx174_cur."!cursor_fail"()
    if_null rx174_debug, debug_475
    rx174_cur."!cursor_debug"("FAIL", "comp_unit")
  debug_475:
    .return (rx174_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__comp_unit"  :nsentry("!PREFIX__comp_unit") :subid("30_1299591493.348") :method
.annotate 'line', 4
    $P176 = self."!PREFIX__!subrule"("newpad", "")
    new $P177, "ResizablePMCArray"
    push $P177, $P176
    .return ($P177)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statementlist"  :subid("31_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx182_tgt
    .local int rx182_pos
    .local int rx182_off
    .local int rx182_eos
    .local int rx182_rep
    .local pmc rx182_cur
    .local pmc rx182_debug
    (rx182_cur, rx182_pos, rx182_tgt, $I10) = self."!cursor_start"()
    rx182_cur."!cursor_caparray"("statement")
    .lex unicode:"$\x{a2}", rx182_cur
    .local pmc match
    .lex "$/", match
    length rx182_eos, rx182_tgt
    gt rx182_pos, rx182_eos, rx182_done
    set rx182_off, 0
    lt rx182_pos, 2, rx182_start
    sub rx182_off, rx182_pos, 1
    substr rx182_tgt, rx182_tgt, rx182_off
  rx182_start:
    eq $I10, 1, rx182_restart
    if_null rx182_debug, debug_476
    rx182_cur."!cursor_debug"("START", "statementlist")
  debug_476:
    $I10 = self.'from'()
    ne $I10, -1, rxscan187_done
    goto rxscan187_scan
  rxscan187_loop:
    (rx182_pos) = rx182_cur."from"()
    inc rx182_pos
    rx182_cur."!cursor_from"(rx182_pos)
    ge rx182_pos, rx182_eos, rxscan187_done
  rxscan187_scan:
    set_addr $I10, rxscan187_loop
    rx182_cur."!mark_push"(0, rx182_pos, $I10)
  rxscan187_done:
  alt188_0:
.annotate 'line', 117
    set_addr $I10, alt188_1
    rx182_cur."!mark_push"(0, rx182_pos, $I10)
.annotate 'line', 118
  # rx subrule "ws" subtype=method negate=
    rx182_cur."!cursor_pos"(rx182_pos)
    $P10 = rx182_cur."ws"()
    unless $P10, rx182_fail
    rx182_pos = $P10."pos"()
  # rxanchor eos
    ne rx182_pos, rx182_eos, rx182_fail
  # rx subrule "ws" subtype=method negate=
    rx182_cur."!cursor_pos"(rx182_pos)
    $P10 = rx182_cur."ws"()
    unless $P10, rx182_fail
    rx182_pos = $P10."pos"()
    goto alt188_end
  alt188_1:
.annotate 'line', 119
  # rx subrule "ws" subtype=method negate=
    rx182_cur."!cursor_pos"(rx182_pos)
    $P10 = rx182_cur."ws"()
    unless $P10, rx182_fail
    rx182_pos = $P10."pos"()
  # rx rxquantr192 ** 0..*
    set_addr $I10, rxquantr192_done
    rx182_cur."!mark_push"(0, rx182_pos, $I10)
  rxquantr192_loop:
  # rx subrule "statement" subtype=capture negate=
    rx182_cur."!cursor_pos"(rx182_pos)
    $P10 = rx182_cur."statement"()
    unless $P10, rx182_fail
    rx182_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement")
    rx182_pos = $P10."pos"()
  # rx subrule "eat_terminator" subtype=method negate=
    rx182_cur."!cursor_pos"(rx182_pos)
    $P10 = rx182_cur."eat_terminator"()
    unless $P10, rx182_fail
    rx182_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx182_cur."!cursor_pos"(rx182_pos)
    $P10 = rx182_cur."ws"()
    unless $P10, rx182_fail
    rx182_pos = $P10."pos"()
    set_addr $I10, rxquantr192_done
    (rx182_rep) = rx182_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr192_done
    rx182_cur."!mark_push"(rx182_rep, rx182_pos, $I10)
    goto rxquantr192_loop
  rxquantr192_done:
  # rx subrule "ws" subtype=method negate=
    rx182_cur."!cursor_pos"(rx182_pos)
    $P10 = rx182_cur."ws"()
    unless $P10, rx182_fail
    rx182_pos = $P10."pos"()
  alt188_end:
.annotate 'line', 117
  # rx pass
    rx182_cur."!cursor_pass"(rx182_pos, "statementlist")
    if_null rx182_debug, debug_477
    rx182_cur."!cursor_debug"("PASS", "statementlist", " at pos=", rx182_pos)
  debug_477:
    .return (rx182_cur)
  rx182_restart:
.annotate 'line', 4
    if_null rx182_debug, debug_478
    rx182_cur."!cursor_debug"("NEXT", "statementlist")
  debug_478:
  rx182_fail:
    (rx182_rep, rx182_pos, $I10, $P10) = rx182_cur."!mark_fail"(0)
    lt rx182_pos, -1, rx182_done
    eq rx182_pos, -1, rx182_fail
    jump $I10
  rx182_done:
    rx182_cur."!cursor_fail"()
    if_null rx182_debug, debug_479
    rx182_cur."!cursor_debug"("FAIL", "statementlist")
  debug_479:
    .return (rx182_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statementlist"  :nsentry("!PREFIX__statementlist") :subid("32_1299591493.348") :method
.annotate 'line', 4
    $P184 = self."!PREFIX__!subrule"("ws", "")
    $P185 = self."!PREFIX__!subrule"("ws", "")
    new $P186, "ResizablePMCArray"
    push $P186, $P184
    push $P186, $P185
    .return ($P186)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement"  :subid("33_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .const 'Sub' $P201 = "35_1299591493.348" 
    capture_lex $P201
    .local string rx196_tgt
    .local int rx196_pos
    .local int rx196_off
    .local int rx196_eos
    .local int rx196_rep
    .local pmc rx196_cur
    .local pmc rx196_debug
    (rx196_cur, rx196_pos, rx196_tgt, $I10) = self."!cursor_start"()
    rx196_cur."!cursor_caparray"("statement_mod_cond", "statement_mod_loop")
    .lex unicode:"$\x{a2}", rx196_cur
    .local pmc match
    .lex "$/", match
    length rx196_eos, rx196_tgt
    gt rx196_pos, rx196_eos, rx196_done
    set rx196_off, 0
    lt rx196_pos, 2, rx196_start
    sub rx196_off, rx196_pos, 1
    substr rx196_tgt, rx196_tgt, rx196_off
  rx196_start:
    eq $I10, 1, rx196_restart
    if_null rx196_debug, debug_480
    rx196_cur."!cursor_debug"("START", "statement")
  debug_480:
    $I10 = self.'from'()
    ne $I10, -1, rxscan199_done
    goto rxscan199_scan
  rxscan199_loop:
    (rx196_pos) = rx196_cur."from"()
    inc rx196_pos
    rx196_cur."!cursor_from"(rx196_pos)
    ge rx196_pos, rx196_eos, rxscan199_done
  rxscan199_scan:
    set_addr $I10, rxscan199_loop
    rx196_cur."!mark_push"(0, rx196_pos, $I10)
  rxscan199_done:
.annotate 'line', 123
  # rx subrule "before" subtype=zerowidth negate=1
    rx196_cur."!cursor_pos"(rx196_pos)
    .const 'Sub' $P201 = "35_1299591493.348" 
    capture_lex $P201
    $P10 = rx196_cur."before"($P201)
    if $P10, rx196_fail
  alt205_0:
.annotate 'line', 124
    set_addr $I10, alt205_1
    rx196_cur."!mark_push"(0, rx196_pos, $I10)
.annotate 'line', 125
  # rx subrule "statement_control" subtype=capture negate=
    rx196_cur."!cursor_pos"(rx196_pos)
    $P10 = rx196_cur."statement_control"()
    unless $P10, rx196_fail
    rx196_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement_control")
    rx196_pos = $P10."pos"()
    goto alt205_end
  alt205_1:
.annotate 'line', 126
  # rx subrule "EXPR" subtype=capture negate=
    rx196_cur."!cursor_pos"(rx196_pos)
    $P10 = rx196_cur."EXPR"()
    unless $P10, rx196_fail
    rx196_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx196_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx196_cur."!cursor_pos"(rx196_pos)
    $P10 = rx196_cur."ws"()
    unless $P10, rx196_fail
    rx196_pos = $P10."pos"()
.annotate 'line', 131
  # rx rxquantr206 ** 0..1
    set_addr $I10, rxquantr206_done
    rx196_cur."!mark_push"(0, rx196_pos, $I10)
  rxquantr206_loop:
  alt207_0:
.annotate 'line', 127
    set_addr $I10, alt207_1
    rx196_cur."!mark_push"(0, rx196_pos, $I10)
.annotate 'line', 128
  # rx subrule "MARKED" subtype=zerowidth negate=
    rx196_cur."!cursor_pos"(rx196_pos)
    $P10 = rx196_cur."MARKED"("endstmt")
    unless $P10, rx196_fail
    goto alt207_end
  alt207_1:
    set_addr $I10, alt207_2
    rx196_cur."!mark_push"(0, rx196_pos, $I10)
.annotate 'line', 129
  # rx subrule "statement_mod_cond" subtype=capture negate=
    rx196_cur."!cursor_pos"(rx196_pos)
    $P10 = rx196_cur."statement_mod_cond"()
    unless $P10, rx196_fail
    rx196_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement_mod_cond")
    rx196_pos = $P10."pos"()
  # rx rxquantr208 ** 0..1
    set_addr $I10, rxquantr208_done
    rx196_cur."!mark_push"(0, rx196_pos, $I10)
  rxquantr208_loop:
  # rx subrule "statement_mod_loop" subtype=capture negate=
    rx196_cur."!cursor_pos"(rx196_pos)
    $P10 = rx196_cur."statement_mod_loop"()
    unless $P10, rx196_fail
    goto rxsubrule209_pass
  rxsubrule209_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx196_fail
  rxsubrule209_pass:
    set_addr $I10, rxsubrule209_back
    rx196_cur."!mark_push"(0, rx196_pos, $I10, $P10)
    $P10."!cursor_names"("statement_mod_loop")
    rx196_pos = $P10."pos"()
    set_addr $I10, rxquantr208_done
    (rx196_rep) = rx196_cur."!mark_commit"($I10)
  rxquantr208_done:
    goto alt207_end
  alt207_2:
.annotate 'line', 130
  # rx subrule "statement_mod_loop" subtype=capture negate=
    rx196_cur."!cursor_pos"(rx196_pos)
    $P10 = rx196_cur."statement_mod_loop"()
    unless $P10, rx196_fail
    rx196_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement_mod_loop")
    rx196_pos = $P10."pos"()
  alt207_end:
.annotate 'line', 131
    set_addr $I10, rxquantr206_done
    (rx196_rep) = rx196_cur."!mark_commit"($I10)
  rxquantr206_done:
  alt205_end:
.annotate 'line', 122
  # rx pass
    rx196_cur."!cursor_pass"(rx196_pos, "statement")
    if_null rx196_debug, debug_485
    rx196_cur."!cursor_debug"("PASS", "statement", " at pos=", rx196_pos)
  debug_485:
    .return (rx196_cur)
  rx196_restart:
.annotate 'line', 4
    if_null rx196_debug, debug_486
    rx196_cur."!cursor_debug"("NEXT", "statement")
  debug_486:
  rx196_fail:
    (rx196_rep, rx196_pos, $I10, $P10) = rx196_cur."!mark_fail"(0)
    lt rx196_pos, -1, rx196_done
    eq rx196_pos, -1, rx196_fail
    jump $I10
  rx196_done:
    rx196_cur."!cursor_fail"()
    if_null rx196_debug, debug_487
    rx196_cur."!cursor_debug"("FAIL", "statement")
  debug_487:
    .return (rx196_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement"  :nsentry("!PREFIX__statement") :subid("34_1299591493.348") :method
.annotate 'line', 4
    new $P198, "ResizablePMCArray"
    push $P198, ""
    .return ($P198)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block200"  :anon :subid("35_1299591493.348") :method :outer("33_1299591493.348")
.annotate 'line', 123
    .local string rx202_tgt
    .local int rx202_pos
    .local int rx202_off
    .local int rx202_eos
    .local int rx202_rep
    .local pmc rx202_cur
    .local pmc rx202_debug
    (rx202_cur, rx202_pos, rx202_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx202_cur
    .local pmc match
    .lex "$/", match
    length rx202_eos, rx202_tgt
    gt rx202_pos, rx202_eos, rx202_done
    set rx202_off, 0
    lt rx202_pos, 2, rx202_start
    sub rx202_off, rx202_pos, 1
    substr rx202_tgt, rx202_tgt, rx202_off
  rx202_start:
    eq $I10, 1, rx202_restart
    if_null rx202_debug, debug_481
    rx202_cur."!cursor_debug"("START", "")
  debug_481:
    $I10 = self.'from'()
    ne $I10, -1, rxscan203_done
    goto rxscan203_scan
  rxscan203_loop:
    (rx202_pos) = rx202_cur."from"()
    inc rx202_pos
    rx202_cur."!cursor_from"(rx202_pos)
    ge rx202_pos, rx202_eos, rxscan203_done
  rxscan203_scan:
    set_addr $I10, rxscan203_loop
    rx202_cur."!mark_push"(0, rx202_pos, $I10)
  rxscan203_done:
  alt204_0:
    set_addr $I10, alt204_1
    rx202_cur."!mark_push"(0, rx202_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx202_pos, rx202_eos, rx202_fail
    sub $I10, rx202_pos, rx202_off
    substr $S10, rx202_tgt, $I10, 1
    index $I11, "])}", $S10
    lt $I11, 0, rx202_fail
    inc rx202_pos
    goto alt204_end
  alt204_1:
  # rxanchor eos
    ne rx202_pos, rx202_eos, rx202_fail
  alt204_end:
  # rx pass
    rx202_cur."!cursor_pass"(rx202_pos, "")
    if_null rx202_debug, debug_482
    rx202_cur."!cursor_debug"("PASS", "", " at pos=", rx202_pos)
  debug_482:
    .return (rx202_cur)
  rx202_restart:
    if_null rx202_debug, debug_483
    rx202_cur."!cursor_debug"("NEXT", "")
  debug_483:
  rx202_fail:
    (rx202_rep, rx202_pos, $I10, $P10) = rx202_cur."!mark_fail"(0)
    lt rx202_pos, -1, rx202_done
    eq rx202_pos, -1, rx202_fail
    jump $I10
  rx202_done:
    rx202_cur."!cursor_fail"()
    if_null rx202_debug, debug_484
    rx202_cur."!cursor_debug"("FAIL", "")
  debug_484:
    .return (rx202_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "eat_terminator"  :subid("36_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx211_tgt
    .local int rx211_pos
    .local int rx211_off
    .local int rx211_eos
    .local int rx211_rep
    .local pmc rx211_cur
    .local pmc rx211_debug
    (rx211_cur, rx211_pos, rx211_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx211_cur
    .local pmc match
    .lex "$/", match
    length rx211_eos, rx211_tgt
    gt rx211_pos, rx211_eos, rx211_done
    set rx211_off, 0
    lt rx211_pos, 2, rx211_start
    sub rx211_off, rx211_pos, 1
    substr rx211_tgt, rx211_tgt, rx211_off
  rx211_start:
    eq $I10, 1, rx211_restart
    if_null rx211_debug, debug_488
    rx211_cur."!cursor_debug"("START", "eat_terminator")
  debug_488:
    $I10 = self.'from'()
    ne $I10, -1, rxscan214_done
    goto rxscan214_scan
  rxscan214_loop:
    (rx211_pos) = rx211_cur."from"()
    inc rx211_pos
    rx211_cur."!cursor_from"(rx211_pos)
    ge rx211_pos, rx211_eos, rxscan214_done
  rxscan214_scan:
    set_addr $I10, rxscan214_loop
    rx211_cur."!mark_push"(0, rx211_pos, $I10)
  rxscan214_done:
  alt215_0:
.annotate 'line', 135
    set_addr $I10, alt215_1
    rx211_cur."!mark_push"(0, rx211_pos, $I10)
.annotate 'line', 136
  # rx literal  ";"
    add $I11, rx211_pos, 1
    gt $I11, rx211_eos, rx211_fail
    sub $I11, rx211_pos, rx211_off
    ord $I11, rx211_tgt, $I11
    ne $I11, 59, rx211_fail
    add rx211_pos, 1
    goto alt215_end
  alt215_1:
    set_addr $I10, alt215_2
    rx211_cur."!mark_push"(0, rx211_pos, $I10)
.annotate 'line', 137
  # rx subrule "MARKED" subtype=zerowidth negate=
    rx211_cur."!cursor_pos"(rx211_pos)
    $P10 = rx211_cur."MARKED"("endstmt")
    unless $P10, rx211_fail
    goto alt215_end
  alt215_2:
    set_addr $I10, alt215_3
    rx211_cur."!mark_push"(0, rx211_pos, $I10)
.annotate 'line', 138
  # rx subrule "terminator" subtype=zerowidth negate=
    rx211_cur."!cursor_pos"(rx211_pos)
    $P10 = rx211_cur."terminator"()
    unless $P10, rx211_fail
    goto alt215_end
  alt215_3:
.annotate 'line', 139
  # rxanchor eos
    ne rx211_pos, rx211_eos, rx211_fail
  alt215_end:
.annotate 'line', 135
  # rx pass
    rx211_cur."!cursor_pass"(rx211_pos, "eat_terminator")
    if_null rx211_debug, debug_489
    rx211_cur."!cursor_debug"("PASS", "eat_terminator", " at pos=", rx211_pos)
  debug_489:
    .return (rx211_cur)
  rx211_restart:
.annotate 'line', 4
    if_null rx211_debug, debug_490
    rx211_cur."!cursor_debug"("NEXT", "eat_terminator")
  debug_490:
  rx211_fail:
    (rx211_rep, rx211_pos, $I10, $P10) = rx211_cur."!mark_fail"(0)
    lt rx211_pos, -1, rx211_done
    eq rx211_pos, -1, rx211_fail
    jump $I10
  rx211_done:
    rx211_cur."!cursor_fail"()
    if_null rx211_debug, debug_491
    rx211_cur."!cursor_debug"("FAIL", "eat_terminator")
  debug_491:
    .return (rx211_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__eat_terminator"  :nsentry("!PREFIX__eat_terminator") :subid("37_1299591493.348") :method
.annotate 'line', 4
    new $P213, "ResizablePMCArray"
    push $P213, ""
    push $P213, ""
    push $P213, ""
    push $P213, ";"
    .return ($P213)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "xblock"  :subid("38_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx217_tgt
    .local int rx217_pos
    .local int rx217_off
    .local int rx217_eos
    .local int rx217_rep
    .local pmc rx217_cur
    .local pmc rx217_debug
    (rx217_cur, rx217_pos, rx217_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx217_cur
    .local pmc match
    .lex "$/", match
    length rx217_eos, rx217_tgt
    gt rx217_pos, rx217_eos, rx217_done
    set rx217_off, 0
    lt rx217_pos, 2, rx217_start
    sub rx217_off, rx217_pos, 1
    substr rx217_tgt, rx217_tgt, rx217_off
  rx217_start:
    eq $I10, 1, rx217_restart
    if_null rx217_debug, debug_492
    rx217_cur."!cursor_debug"("START", "xblock")
  debug_492:
    $I10 = self.'from'()
    ne $I10, -1, rxscan221_done
    goto rxscan221_scan
  rxscan221_loop:
    (rx217_pos) = rx217_cur."from"()
    inc rx217_pos
    rx217_cur."!cursor_from"(rx217_pos)
    ge rx217_pos, rx217_eos, rxscan221_done
  rxscan221_scan:
    set_addr $I10, rxscan221_loop
    rx217_cur."!mark_push"(0, rx217_pos, $I10)
  rxscan221_done:
.annotate 'line', 143
  # rx subrule "EXPR" subtype=capture negate=
    rx217_cur."!cursor_pos"(rx217_pos)
    $P10 = rx217_cur."EXPR"()
    unless $P10, rx217_fail
    rx217_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx217_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx217_cur."!cursor_pos"(rx217_pos)
    $P10 = rx217_cur."ws"()
    unless $P10, rx217_fail
    rx217_pos = $P10."pos"()
  # rx subrule "pblock" subtype=capture negate=
    rx217_cur."!cursor_pos"(rx217_pos)
    $P10 = rx217_cur."pblock"()
    unless $P10, rx217_fail
    rx217_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("pblock")
    rx217_pos = $P10."pos"()
.annotate 'line', 142
  # rx pass
    rx217_cur."!cursor_pass"(rx217_pos, "xblock")
    if_null rx217_debug, debug_493
    rx217_cur."!cursor_debug"("PASS", "xblock", " at pos=", rx217_pos)
  debug_493:
    .return (rx217_cur)
  rx217_restart:
.annotate 'line', 4
    if_null rx217_debug, debug_494
    rx217_cur."!cursor_debug"("NEXT", "xblock")
  debug_494:
  rx217_fail:
    (rx217_rep, rx217_pos, $I10, $P10) = rx217_cur."!mark_fail"(0)
    lt rx217_pos, -1, rx217_done
    eq rx217_pos, -1, rx217_fail
    jump $I10
  rx217_done:
    rx217_cur."!cursor_fail"()
    if_null rx217_debug, debug_495
    rx217_cur."!cursor_debug"("FAIL", "xblock")
  debug_495:
    .return (rx217_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__xblock"  :nsentry("!PREFIX__xblock") :subid("39_1299591493.348") :method
.annotate 'line', 4
    $P219 = self."!PREFIX__!subrule"("EXPR", "")
    new $P220, "ResizablePMCArray"
    push $P220, $P219
    .return ($P220)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "pblock"  :subid("40_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx223_tgt
    .local int rx223_pos
    .local int rx223_off
    .local int rx223_eos
    .local int rx223_rep
    .local pmc rx223_cur
    .local pmc rx223_debug
    (rx223_cur, rx223_pos, rx223_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx223_cur
    .local pmc match
    .lex "$/", match
    length rx223_eos, rx223_tgt
    gt rx223_pos, rx223_eos, rx223_done
    set rx223_off, 0
    lt rx223_pos, 2, rx223_start
    sub rx223_off, rx223_pos, 1
    substr rx223_tgt, rx223_tgt, rx223_off
  rx223_start:
    eq $I10, 1, rx223_restart
    if_null rx223_debug, debug_496
    rx223_cur."!cursor_debug"("START", "pblock")
  debug_496:
    $I10 = self.'from'()
    ne $I10, -1, rxscan228_done
    goto rxscan228_scan
  rxscan228_loop:
    (rx223_pos) = rx223_cur."from"()
    inc rx223_pos
    rx223_cur."!cursor_from"(rx223_pos)
    ge rx223_pos, rx223_eos, rxscan228_done
  rxscan228_scan:
    set_addr $I10, rxscan228_loop
    rx223_cur."!mark_push"(0, rx223_pos, $I10)
  rxscan228_done:
  alt229_0:
.annotate 'line', 146
    set_addr $I10, alt229_1
    rx223_cur."!mark_push"(0, rx223_pos, $I10)
.annotate 'line', 147
  # rx subrule "lambda" subtype=method negate=
    rx223_cur."!cursor_pos"(rx223_pos)
    $P10 = rx223_cur."lambda"()
    unless $P10, rx223_fail
    rx223_pos = $P10."pos"()
.annotate 'line', 148
  # rx subrule "newpad" subtype=method negate=
    rx223_cur."!cursor_pos"(rx223_pos)
    $P10 = rx223_cur."newpad"()
    unless $P10, rx223_fail
    rx223_pos = $P10."pos"()
.annotate 'line', 149
  # rx subrule "signature" subtype=capture negate=
    rx223_cur."!cursor_pos"(rx223_pos)
    $P10 = rx223_cur."signature"()
    unless $P10, rx223_fail
    rx223_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("signature")
    rx223_pos = $P10."pos"()
.annotate 'line', 150
  # rx subrule "blockoid" subtype=capture negate=
    rx223_cur."!cursor_pos"(rx223_pos)
    $P10 = rx223_cur."blockoid"()
    unless $P10, rx223_fail
    rx223_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx223_pos = $P10."pos"()
.annotate 'line', 147
    goto alt229_end
  alt229_1:
    set_addr $I10, alt229_2
    rx223_cur."!mark_push"(0, rx223_pos, $I10)
.annotate 'line', 151
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx223_pos, rx223_off
    substr $S10, rx223_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx223_fail
.annotate 'line', 152
  # rx subrule "newpad" subtype=method negate=
    rx223_cur."!cursor_pos"(rx223_pos)
    $P10 = rx223_cur."newpad"()
    unless $P10, rx223_fail
    rx223_pos = $P10."pos"()
.annotate 'line', 153
  # rx subrule "blockoid" subtype=capture negate=
    rx223_cur."!cursor_pos"(rx223_pos)
    $P10 = rx223_cur."blockoid"()
    unless $P10, rx223_fail
    rx223_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx223_pos = $P10."pos"()
.annotate 'line', 151
    goto alt229_end
  alt229_2:
.annotate 'line', 154
  # rx subrule "panic" subtype=method negate=
    rx223_cur."!cursor_pos"(rx223_pos)
    $P10 = rx223_cur."panic"("Missing block")
    unless $P10, rx223_fail
    rx223_pos = $P10."pos"()
  alt229_end:
.annotate 'line', 146
  # rx pass
    rx223_cur."!cursor_pass"(rx223_pos, "pblock")
    if_null rx223_debug, debug_497
    rx223_cur."!cursor_debug"("PASS", "pblock", " at pos=", rx223_pos)
  debug_497:
    .return (rx223_cur)
  rx223_restart:
.annotate 'line', 4
    if_null rx223_debug, debug_498
    rx223_cur."!cursor_debug"("NEXT", "pblock")
  debug_498:
  rx223_fail:
    (rx223_rep, rx223_pos, $I10, $P10) = rx223_cur."!mark_fail"(0)
    lt rx223_pos, -1, rx223_done
    eq rx223_pos, -1, rx223_fail
    jump $I10
  rx223_done:
    rx223_cur."!cursor_fail"()
    if_null rx223_debug, debug_499
    rx223_cur."!cursor_debug"("FAIL", "pblock")
  debug_499:
    .return (rx223_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__pblock"  :nsentry("!PREFIX__pblock") :subid("41_1299591493.348") :method
.annotate 'line', 4
    $P225 = self."!PREFIX__!subrule"("panic", "")
    $P226 = self."!PREFIX__!subrule"("lambda", "")
    new $P227, "ResizablePMCArray"
    push $P227, $P225
    push $P227, "{"
    push $P227, $P226
    .return ($P227)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "lambda"  :subid("42_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx231_tgt
    .local int rx231_pos
    .local int rx231_off
    .local int rx231_eos
    .local int rx231_rep
    .local pmc rx231_cur
    .local pmc rx231_debug
    (rx231_cur, rx231_pos, rx231_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx231_cur
    .local pmc match
    .lex "$/", match
    length rx231_eos, rx231_tgt
    gt rx231_pos, rx231_eos, rx231_done
    set rx231_off, 0
    lt rx231_pos, 2, rx231_start
    sub rx231_off, rx231_pos, 1
    substr rx231_tgt, rx231_tgt, rx231_off
  rx231_start:
    eq $I10, 1, rx231_restart
    if_null rx231_debug, debug_500
    rx231_cur."!cursor_debug"("START", "lambda")
  debug_500:
    $I10 = self.'from'()
    ne $I10, -1, rxscan234_done
    goto rxscan234_scan
  rxscan234_loop:
    (rx231_pos) = rx231_cur."from"()
    inc rx231_pos
    rx231_cur."!cursor_from"(rx231_pos)
    ge rx231_pos, rx231_eos, rxscan234_done
  rxscan234_scan:
    set_addr $I10, rxscan234_loop
    rx231_cur."!mark_push"(0, rx231_pos, $I10)
  rxscan234_done:
  alt235_0:
.annotate 'line', 157
    set_addr $I10, alt235_1
    rx231_cur."!mark_push"(0, rx231_pos, $I10)
  # rx literal  "->"
    add $I11, rx231_pos, 2
    gt $I11, rx231_eos, rx231_fail
    sub $I11, rx231_pos, rx231_off
    substr $S10, rx231_tgt, $I11, 2
    ne $S10, "->", rx231_fail
    add rx231_pos, 2
    goto alt235_end
  alt235_1:
  # rx literal  "<->"
    add $I11, rx231_pos, 3
    gt $I11, rx231_eos, rx231_fail
    sub $I11, rx231_pos, rx231_off
    substr $S10, rx231_tgt, $I11, 3
    ne $S10, "<->", rx231_fail
    add rx231_pos, 3
  alt235_end:
  # rx pass
    rx231_cur."!cursor_pass"(rx231_pos, "lambda")
    if_null rx231_debug, debug_501
    rx231_cur."!cursor_debug"("PASS", "lambda", " at pos=", rx231_pos)
  debug_501:
    .return (rx231_cur)
  rx231_restart:
.annotate 'line', 4
    if_null rx231_debug, debug_502
    rx231_cur."!cursor_debug"("NEXT", "lambda")
  debug_502:
  rx231_fail:
    (rx231_rep, rx231_pos, $I10, $P10) = rx231_cur."!mark_fail"(0)
    lt rx231_pos, -1, rx231_done
    eq rx231_pos, -1, rx231_fail
    jump $I10
  rx231_done:
    rx231_cur."!cursor_fail"()
    if_null rx231_debug, debug_503
    rx231_cur."!cursor_debug"("FAIL", "lambda")
  debug_503:
    .return (rx231_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__lambda"  :nsentry("!PREFIX__lambda") :subid("43_1299591493.348") :method
.annotate 'line', 4
    new $P233, "ResizablePMCArray"
    push $P233, "<->"
    push $P233, "->"
    .return ($P233)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "block"  :subid("44_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx237_tgt
    .local int rx237_pos
    .local int rx237_off
    .local int rx237_eos
    .local int rx237_rep
    .local pmc rx237_cur
    .local pmc rx237_debug
    (rx237_cur, rx237_pos, rx237_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx237_cur
    .local pmc match
    .lex "$/", match
    length rx237_eos, rx237_tgt
    gt rx237_pos, rx237_eos, rx237_done
    set rx237_off, 0
    lt rx237_pos, 2, rx237_start
    sub rx237_off, rx237_pos, 1
    substr rx237_tgt, rx237_tgt, rx237_off
  rx237_start:
    eq $I10, 1, rx237_restart
    if_null rx237_debug, debug_504
    rx237_cur."!cursor_debug"("START", "block")
  debug_504:
    $I10 = self.'from'()
    ne $I10, -1, rxscan241_done
    goto rxscan241_scan
  rxscan241_loop:
    (rx237_pos) = rx237_cur."from"()
    inc rx237_pos
    rx237_cur."!cursor_from"(rx237_pos)
    ge rx237_pos, rx237_eos, rxscan241_done
  rxscan241_scan:
    set_addr $I10, rxscan241_loop
    rx237_cur."!mark_push"(0, rx237_pos, $I10)
  rxscan241_done:
  alt242_0:
.annotate 'line', 160
    set_addr $I10, alt242_1
    rx237_cur."!mark_push"(0, rx237_pos, $I10)
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx237_pos, rx237_off
    substr $S10, rx237_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx237_fail
    goto alt242_end
  alt242_1:
  # rx subrule "panic" subtype=method negate=
    rx237_cur."!cursor_pos"(rx237_pos)
    $P10 = rx237_cur."panic"("Missing block")
    unless $P10, rx237_fail
    rx237_pos = $P10."pos"()
  alt242_end:
.annotate 'line', 161
  # rx subrule "newpad" subtype=method negate=
    rx237_cur."!cursor_pos"(rx237_pos)
    $P10 = rx237_cur."newpad"()
    unless $P10, rx237_fail
    rx237_pos = $P10."pos"()
.annotate 'line', 162
  # rx subrule "blockoid" subtype=capture negate=
    rx237_cur."!cursor_pos"(rx237_pos)
    $P10 = rx237_cur."blockoid"()
    unless $P10, rx237_fail
    rx237_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx237_pos = $P10."pos"()
.annotate 'line', 159
  # rx pass
    rx237_cur."!cursor_pass"(rx237_pos, "block")
    if_null rx237_debug, debug_505
    rx237_cur."!cursor_debug"("PASS", "block", " at pos=", rx237_pos)
  debug_505:
    .return (rx237_cur)
  rx237_restart:
.annotate 'line', 4
    if_null rx237_debug, debug_506
    rx237_cur."!cursor_debug"("NEXT", "block")
  debug_506:
  rx237_fail:
    (rx237_rep, rx237_pos, $I10, $P10) = rx237_cur."!mark_fail"(0)
    lt rx237_pos, -1, rx237_done
    eq rx237_pos, -1, rx237_fail
    jump $I10
  rx237_done:
    rx237_cur."!cursor_fail"()
    if_null rx237_debug, debug_507
    rx237_cur."!cursor_debug"("FAIL", "block")
  debug_507:
    .return (rx237_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__block"  :nsentry("!PREFIX__block") :subid("45_1299591493.348") :method
.annotate 'line', 4
    $P239 = self."!PREFIX__!subrule"("panic", "")
    new $P240, "ResizablePMCArray"
    push $P240, $P239
    push $P240, "{"
    .return ($P240)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "blockoid"  :subid("46_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx244_tgt
    .local int rx244_pos
    .local int rx244_off
    .local int rx244_eos
    .local int rx244_rep
    .local pmc rx244_cur
    .local pmc rx244_debug
    (rx244_cur, rx244_pos, rx244_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx244_cur
    .local pmc match
    .lex "$/", match
    length rx244_eos, rx244_tgt
    gt rx244_pos, rx244_eos, rx244_done
    set rx244_off, 0
    lt rx244_pos, 2, rx244_start
    sub rx244_off, rx244_pos, 1
    substr rx244_tgt, rx244_tgt, rx244_off
  rx244_start:
    eq $I10, 1, rx244_restart
    if_null rx244_debug, debug_508
    rx244_cur."!cursor_debug"("START", "blockoid")
  debug_508:
    $I10 = self.'from'()
    ne $I10, -1, rxscan248_done
    goto rxscan248_scan
  rxscan248_loop:
    (rx244_pos) = rx244_cur."from"()
    inc rx244_pos
    rx244_cur."!cursor_from"(rx244_pos)
    ge rx244_pos, rx244_eos, rxscan248_done
  rxscan248_scan:
    set_addr $I10, rxscan248_loop
    rx244_cur."!mark_push"(0, rx244_pos, $I10)
  rxscan248_done:
.annotate 'line', 166
  # rx subrule "finishpad" subtype=method negate=
    rx244_cur."!cursor_pos"(rx244_pos)
    $P10 = rx244_cur."finishpad"()
    unless $P10, rx244_fail
    rx244_pos = $P10."pos"()
  alt249_0:
.annotate 'line', 167
    set_addr $I10, alt249_1
    rx244_cur."!mark_push"(0, rx244_pos, $I10)
.annotate 'line', 168
  # rx literal  "{YOU_ARE_HERE}"
    add $I11, rx244_pos, 14
    gt $I11, rx244_eos, rx244_fail
    sub $I11, rx244_pos, rx244_off
    substr $S10, rx244_tgt, $I11, 14
    ne $S10, "{YOU_ARE_HERE}", rx244_fail
    add rx244_pos, 14
  # rx subrule "you_are_here" subtype=capture negate=
    rx244_cur."!cursor_pos"(rx244_pos)
    $P10 = rx244_cur."you_are_here"()
    unless $P10, rx244_fail
    rx244_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("you_are_here")
    rx244_pos = $P10."pos"()
    goto alt249_end
  alt249_1:
.annotate 'line', 169
  # rx literal  "{"
    add $I11, rx244_pos, 1
    gt $I11, rx244_eos, rx244_fail
    sub $I11, rx244_pos, rx244_off
    ord $I11, rx244_tgt, $I11
    ne $I11, 123, rx244_fail
    add rx244_pos, 1
  # rx subrule "statementlist" subtype=capture negate=
    rx244_cur."!cursor_pos"(rx244_pos)
    $P10 = rx244_cur."statementlist"()
    unless $P10, rx244_fail
    rx244_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statementlist")
    rx244_pos = $P10."pos"()
  alt250_0:
    set_addr $I10, alt250_1
    rx244_cur."!mark_push"(0, rx244_pos, $I10)
  # rx literal  "}"
    add $I11, rx244_pos, 1
    gt $I11, rx244_eos, rx244_fail
    sub $I11, rx244_pos, rx244_off
    ord $I11, rx244_tgt, $I11
    ne $I11, 125, rx244_fail
    add rx244_pos, 1
    goto alt250_end
  alt250_1:
  # rx subrule "FAILGOAL" subtype=method negate=
    rx244_cur."!cursor_pos"(rx244_pos)
    $P10 = rx244_cur."FAILGOAL"("'}'")
    unless $P10, rx244_fail
    goto rxsubrule252_pass
  rxsubrule252_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx244_fail
  rxsubrule252_pass:
    set_addr $I10, rxsubrule252_back
    rx244_cur."!mark_push"(0, rx244_pos, $I10, $P10)
    rx244_pos = $P10."pos"()
  alt250_end:
  alt249_end:
.annotate 'line', 171
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx244_cur."!cursor_pos"(rx244_pos)
    $P10 = rx244_cur."ENDSTMT"()
    unless $P10, rx244_fail
.annotate 'line', 165
  # rx pass
    rx244_cur."!cursor_pass"(rx244_pos, "blockoid")
    if_null rx244_debug, debug_509
    rx244_cur."!cursor_debug"("PASS", "blockoid", " at pos=", rx244_pos)
  debug_509:
    .return (rx244_cur)
  rx244_restart:
.annotate 'line', 4
    if_null rx244_debug, debug_510
    rx244_cur."!cursor_debug"("NEXT", "blockoid")
  debug_510:
  rx244_fail:
    (rx244_rep, rx244_pos, $I10, $P10) = rx244_cur."!mark_fail"(0)
    lt rx244_pos, -1, rx244_done
    eq rx244_pos, -1, rx244_fail
    jump $I10
  rx244_done:
    rx244_cur."!cursor_fail"()
    if_null rx244_debug, debug_511
    rx244_cur."!cursor_debug"("FAIL", "blockoid")
  debug_511:
    .return (rx244_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__blockoid"  :nsentry("!PREFIX__blockoid") :subid("47_1299591493.348") :method
.annotate 'line', 4
    $P246 = self."!PREFIX__!subrule"("finishpad", "")
    new $P247, "ResizablePMCArray"
    push $P247, $P246
    .return ($P247)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "newpad"  :subid("48_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx254_tgt
    .local int rx254_pos
    .local int rx254_off
    .local int rx254_eos
    .local int rx254_rep
    .local pmc rx254_cur
    .local pmc rx254_debug
    (rx254_cur, rx254_pos, rx254_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx254_cur
    .local pmc match
    .lex "$/", match
    length rx254_eos, rx254_tgt
    gt rx254_pos, rx254_eos, rx254_done
    set rx254_off, 0
    lt rx254_pos, 2, rx254_start
    sub rx254_off, rx254_pos, 1
    substr rx254_tgt, rx254_tgt, rx254_off
  rx254_start:
    eq $I10, 1, rx254_restart
    if_null rx254_debug, debug_512
    rx254_cur."!cursor_debug"("START", "newpad")
  debug_512:
    $I10 = self.'from'()
    ne $I10, -1, rxscan257_done
    goto rxscan257_scan
  rxscan257_loop:
    (rx254_pos) = rx254_cur."from"()
    inc rx254_pos
    rx254_cur."!cursor_from"(rx254_pos)
    ge rx254_pos, rx254_eos, rxscan257_done
  rxscan257_scan:
    set_addr $I10, rxscan257_loop
    rx254_cur."!mark_push"(0, rx254_pos, $I10)
  rxscan257_done:
.annotate 'line', 174
  # rx pass
    rx254_cur."!cursor_pass"(rx254_pos, "newpad")
    if_null rx254_debug, debug_513
    rx254_cur."!cursor_debug"("PASS", "newpad", " at pos=", rx254_pos)
  debug_513:
    .return (rx254_cur)
  rx254_restart:
.annotate 'line', 4
    if_null rx254_debug, debug_514
    rx254_cur."!cursor_debug"("NEXT", "newpad")
  debug_514:
  rx254_fail:
    (rx254_rep, rx254_pos, $I10, $P10) = rx254_cur."!mark_fail"(0)
    lt rx254_pos, -1, rx254_done
    eq rx254_pos, -1, rx254_fail
    jump $I10
  rx254_done:
    rx254_cur."!cursor_fail"()
    if_null rx254_debug, debug_515
    rx254_cur."!cursor_debug"("FAIL", "newpad")
  debug_515:
    .return (rx254_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__newpad"  :nsentry("!PREFIX__newpad") :subid("49_1299591493.348") :method
.annotate 'line', 4
    new $P256, "ResizablePMCArray"
    push $P256, ""
    .return ($P256)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "outerctx"  :subid("50_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx259_tgt
    .local int rx259_pos
    .local int rx259_off
    .local int rx259_eos
    .local int rx259_rep
    .local pmc rx259_cur
    .local pmc rx259_debug
    (rx259_cur, rx259_pos, rx259_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx259_cur
    .local pmc match
    .lex "$/", match
    length rx259_eos, rx259_tgt
    gt rx259_pos, rx259_eos, rx259_done
    set rx259_off, 0
    lt rx259_pos, 2, rx259_start
    sub rx259_off, rx259_pos, 1
    substr rx259_tgt, rx259_tgt, rx259_off
  rx259_start:
    eq $I10, 1, rx259_restart
    if_null rx259_debug, debug_516
    rx259_cur."!cursor_debug"("START", "outerctx")
  debug_516:
    $I10 = self.'from'()
    ne $I10, -1, rxscan262_done
    goto rxscan262_scan
  rxscan262_loop:
    (rx259_pos) = rx259_cur."from"()
    inc rx259_pos
    rx259_cur."!cursor_from"(rx259_pos)
    ge rx259_pos, rx259_eos, rxscan262_done
  rxscan262_scan:
    set_addr $I10, rxscan262_loop
    rx259_cur."!mark_push"(0, rx259_pos, $I10)
  rxscan262_done:
.annotate 'line', 175
  # rx pass
    rx259_cur."!cursor_pass"(rx259_pos, "outerctx")
    if_null rx259_debug, debug_517
    rx259_cur."!cursor_debug"("PASS", "outerctx", " at pos=", rx259_pos)
  debug_517:
    .return (rx259_cur)
  rx259_restart:
.annotate 'line', 4
    if_null rx259_debug, debug_518
    rx259_cur."!cursor_debug"("NEXT", "outerctx")
  debug_518:
  rx259_fail:
    (rx259_rep, rx259_pos, $I10, $P10) = rx259_cur."!mark_fail"(0)
    lt rx259_pos, -1, rx259_done
    eq rx259_pos, -1, rx259_fail
    jump $I10
  rx259_done:
    rx259_cur."!cursor_fail"()
    if_null rx259_debug, debug_519
    rx259_cur."!cursor_debug"("FAIL", "outerctx")
  debug_519:
    .return (rx259_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__outerctx"  :nsentry("!PREFIX__outerctx") :subid("51_1299591493.348") :method
.annotate 'line', 4
    new $P261, "ResizablePMCArray"
    push $P261, ""
    .return ($P261)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "finishpad"  :subid("52_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx264_tgt
    .local int rx264_pos
    .local int rx264_off
    .local int rx264_eos
    .local int rx264_rep
    .local pmc rx264_cur
    .local pmc rx264_debug
    (rx264_cur, rx264_pos, rx264_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx264_cur
    .local pmc match
    .lex "$/", match
    length rx264_eos, rx264_tgt
    gt rx264_pos, rx264_eos, rx264_done
    set rx264_off, 0
    lt rx264_pos, 2, rx264_start
    sub rx264_off, rx264_pos, 1
    substr rx264_tgt, rx264_tgt, rx264_off
  rx264_start:
    eq $I10, 1, rx264_restart
    if_null rx264_debug, debug_520
    rx264_cur."!cursor_debug"("START", "finishpad")
  debug_520:
    $I10 = self.'from'()
    ne $I10, -1, rxscan267_done
    goto rxscan267_scan
  rxscan267_loop:
    (rx264_pos) = rx264_cur."from"()
    inc rx264_pos
    rx264_cur."!cursor_from"(rx264_pos)
    ge rx264_pos, rx264_eos, rxscan267_done
  rxscan267_scan:
    set_addr $I10, rxscan267_loop
    rx264_cur."!mark_push"(0, rx264_pos, $I10)
  rxscan267_done:
.annotate 'line', 176
  # rx pass
    rx264_cur."!cursor_pass"(rx264_pos, "finishpad")
    if_null rx264_debug, debug_521
    rx264_cur."!cursor_debug"("PASS", "finishpad", " at pos=", rx264_pos)
  debug_521:
    .return (rx264_cur)
  rx264_restart:
.annotate 'line', 4
    if_null rx264_debug, debug_522
    rx264_cur."!cursor_debug"("NEXT", "finishpad")
  debug_522:
  rx264_fail:
    (rx264_rep, rx264_pos, $I10, $P10) = rx264_cur."!mark_fail"(0)
    lt rx264_pos, -1, rx264_done
    eq rx264_pos, -1, rx264_fail
    jump $I10
  rx264_done:
    rx264_cur."!cursor_fail"()
    if_null rx264_debug, debug_523
    rx264_cur."!cursor_debug"("FAIL", "finishpad")
  debug_523:
    .return (rx264_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__finishpad"  :nsentry("!PREFIX__finishpad") :subid("53_1299591493.348") :method
.annotate 'line', 4
    new $P266, "ResizablePMCArray"
    push $P266, ""
    .return ($P266)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "you_are_here"  :subid("54_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx269_tgt
    .local int rx269_pos
    .local int rx269_off
    .local int rx269_eos
    .local int rx269_rep
    .local pmc rx269_cur
    .local pmc rx269_debug
    (rx269_cur, rx269_pos, rx269_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx269_cur
    .local pmc match
    .lex "$/", match
    length rx269_eos, rx269_tgt
    gt rx269_pos, rx269_eos, rx269_done
    set rx269_off, 0
    lt rx269_pos, 2, rx269_start
    sub rx269_off, rx269_pos, 1
    substr rx269_tgt, rx269_tgt, rx269_off
  rx269_start:
    eq $I10, 1, rx269_restart
    if_null rx269_debug, debug_524
    rx269_cur."!cursor_debug"("START", "you_are_here")
  debug_524:
    $I10 = self.'from'()
    ne $I10, -1, rxscan272_done
    goto rxscan272_scan
  rxscan272_loop:
    (rx269_pos) = rx269_cur."from"()
    inc rx269_pos
    rx269_cur."!cursor_from"(rx269_pos)
    ge rx269_pos, rx269_eos, rxscan272_done
  rxscan272_scan:
    set_addr $I10, rxscan272_loop
    rx269_cur."!mark_push"(0, rx269_pos, $I10)
  rxscan272_done:
.annotate 'line', 177
  # rx pass
    rx269_cur."!cursor_pass"(rx269_pos, "you_are_here")
    if_null rx269_debug, debug_525
    rx269_cur."!cursor_debug"("PASS", "you_are_here", " at pos=", rx269_pos)
  debug_525:
    .return (rx269_cur)
  rx269_restart:
.annotate 'line', 4
    if_null rx269_debug, debug_526
    rx269_cur."!cursor_debug"("NEXT", "you_are_here")
  debug_526:
  rx269_fail:
    (rx269_rep, rx269_pos, $I10, $P10) = rx269_cur."!mark_fail"(0)
    lt rx269_pos, -1, rx269_done
    eq rx269_pos, -1, rx269_fail
    jump $I10
  rx269_done:
    rx269_cur."!cursor_fail"()
    if_null rx269_debug, debug_527
    rx269_cur."!cursor_debug"("FAIL", "you_are_here")
  debug_527:
    .return (rx269_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__you_are_here"  :nsentry("!PREFIX__you_are_here") :subid("55_1299591493.348") :method
.annotate 'line', 4
    new $P271, "ResizablePMCArray"
    push $P271, ""
    .return ($P271)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "terminator"  :subid("56_1299591493.348")
    .param pmc param_274
.annotate 'line', 179
    .lex "self", param_274
    $P275 = param_274."!protoregex"("terminator")
    .return ($P275)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__terminator"  :subid("57_1299591493.348")
    .param pmc param_277
.annotate 'line', 179
    .lex "self", param_277
    $P278 = param_277."!PREFIX__!protoregex"("terminator")
    .return ($P278)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "terminator:sym<;>"  :subid("58_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx280_tgt
    .local int rx280_pos
    .local int rx280_off
    .local int rx280_eos
    .local int rx280_rep
    .local pmc rx280_cur
    .local pmc rx280_debug
    (rx280_cur, rx280_pos, rx280_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx280_cur
    .local pmc match
    .lex "$/", match
    length rx280_eos, rx280_tgt
    gt rx280_pos, rx280_eos, rx280_done
    set rx280_off, 0
    lt rx280_pos, 2, rx280_start
    sub rx280_off, rx280_pos, 1
    substr rx280_tgt, rx280_tgt, rx280_off
  rx280_start:
    eq $I10, 1, rx280_restart
    if_null rx280_debug, debug_528
    rx280_cur."!cursor_debug"("START", "terminator:sym<;>")
  debug_528:
    $I10 = self.'from'()
    ne $I10, -1, rxscan283_done
    goto rxscan283_scan
  rxscan283_loop:
    (rx280_pos) = rx280_cur."from"()
    inc rx280_pos
    rx280_cur."!cursor_from"(rx280_pos)
    ge rx280_pos, rx280_eos, rxscan283_done
  rxscan283_scan:
    set_addr $I10, rxscan283_loop
    rx280_cur."!mark_push"(0, rx280_pos, $I10)
  rxscan283_done:
.annotate 'line', 181
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx280_pos, rx280_off
    substr $S10, rx280_tgt, $I10, 1
    index $I11, ";", $S10
    lt $I11, 0, rx280_fail
  # rx pass
    rx280_cur."!cursor_pass"(rx280_pos, "terminator:sym<;>")
    if_null rx280_debug, debug_529
    rx280_cur."!cursor_debug"("PASS", "terminator:sym<;>", " at pos=", rx280_pos)
  debug_529:
    .return (rx280_cur)
  rx280_restart:
.annotate 'line', 4
    if_null rx280_debug, debug_530
    rx280_cur."!cursor_debug"("NEXT", "terminator:sym<;>")
  debug_530:
  rx280_fail:
    (rx280_rep, rx280_pos, $I10, $P10) = rx280_cur."!mark_fail"(0)
    lt rx280_pos, -1, rx280_done
    eq rx280_pos, -1, rx280_fail
    jump $I10
  rx280_done:
    rx280_cur."!cursor_fail"()
    if_null rx280_debug, debug_531
    rx280_cur."!cursor_debug"("FAIL", "terminator:sym<;>")
  debug_531:
    .return (rx280_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__terminator:sym<;>"  :nsentry("!PREFIX__terminator:sym<;>") :subid("59_1299591493.348") :method
.annotate 'line', 4
    new $P282, "ResizablePMCArray"
    push $P282, ";"
    .return ($P282)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "terminator:sym<}>"  :subid("60_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx285_tgt
    .local int rx285_pos
    .local int rx285_off
    .local int rx285_eos
    .local int rx285_rep
    .local pmc rx285_cur
    .local pmc rx285_debug
    (rx285_cur, rx285_pos, rx285_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx285_cur
    .local pmc match
    .lex "$/", match
    length rx285_eos, rx285_tgt
    gt rx285_pos, rx285_eos, rx285_done
    set rx285_off, 0
    lt rx285_pos, 2, rx285_start
    sub rx285_off, rx285_pos, 1
    substr rx285_tgt, rx285_tgt, rx285_off
  rx285_start:
    eq $I10, 1, rx285_restart
    if_null rx285_debug, debug_532
    rx285_cur."!cursor_debug"("START", "terminator:sym<}>")
  debug_532:
    $I10 = self.'from'()
    ne $I10, -1, rxscan288_done
    goto rxscan288_scan
  rxscan288_loop:
    (rx285_pos) = rx285_cur."from"()
    inc rx285_pos
    rx285_cur."!cursor_from"(rx285_pos)
    ge rx285_pos, rx285_eos, rxscan288_done
  rxscan288_scan:
    set_addr $I10, rxscan288_loop
    rx285_cur."!mark_push"(0, rx285_pos, $I10)
  rxscan288_done:
.annotate 'line', 182
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx285_pos, rx285_off
    substr $S10, rx285_tgt, $I10, 1
    index $I11, "}", $S10
    lt $I11, 0, rx285_fail
  # rx pass
    rx285_cur."!cursor_pass"(rx285_pos, "terminator:sym<}>")
    if_null rx285_debug, debug_533
    rx285_cur."!cursor_debug"("PASS", "terminator:sym<}>", " at pos=", rx285_pos)
  debug_533:
    .return (rx285_cur)
  rx285_restart:
.annotate 'line', 4
    if_null rx285_debug, debug_534
    rx285_cur."!cursor_debug"("NEXT", "terminator:sym<}>")
  debug_534:
  rx285_fail:
    (rx285_rep, rx285_pos, $I10, $P10) = rx285_cur."!mark_fail"(0)
    lt rx285_pos, -1, rx285_done
    eq rx285_pos, -1, rx285_fail
    jump $I10
  rx285_done:
    rx285_cur."!cursor_fail"()
    if_null rx285_debug, debug_535
    rx285_cur."!cursor_debug"("FAIL", "terminator:sym<}>")
  debug_535:
    .return (rx285_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__terminator:sym<}>"  :nsentry("!PREFIX__terminator:sym<}>") :subid("61_1299591493.348") :method
.annotate 'line', 4
    new $P287, "ResizablePMCArray"
    push $P287, "}"
    .return ($P287)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control"  :subid("62_1299591493.348")
    .param pmc param_290
.annotate 'line', 186
    .lex "self", param_290
    $P291 = param_290."!protoregex"("statement_control")
    .return ($P291)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control"  :subid("63_1299591493.348")
    .param pmc param_293
.annotate 'line', 186
    .lex "self", param_293
    $P294 = param_293."!PREFIX__!protoregex"("statement_control")
    .return ($P294)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<if>"  :subid("64_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx296_tgt
    .local int rx296_pos
    .local int rx296_off
    .local int rx296_eos
    .local int rx296_rep
    .local pmc rx296_cur
    .local pmc rx296_debug
    (rx296_cur, rx296_pos, rx296_tgt, $I10) = self."!cursor_start"()
    rx296_cur."!cursor_caparray"("xblock", "else")
    .lex unicode:"$\x{a2}", rx296_cur
    .local pmc match
    .lex "$/", match
    length rx296_eos, rx296_tgt
    gt rx296_pos, rx296_eos, rx296_done
    set rx296_off, 0
    lt rx296_pos, 2, rx296_start
    sub rx296_off, rx296_pos, 1
    substr rx296_tgt, rx296_tgt, rx296_off
  rx296_start:
    eq $I10, 1, rx296_restart
    if_null rx296_debug, debug_536
    rx296_cur."!cursor_debug"("START", "statement_control:sym<if>")
  debug_536:
    $I10 = self.'from'()
    ne $I10, -1, rxscan299_done
    goto rxscan299_scan
  rxscan299_loop:
    (rx296_pos) = rx296_cur."from"()
    inc rx296_pos
    rx296_cur."!cursor_from"(rx296_pos)
    ge rx296_pos, rx296_eos, rxscan299_done
  rxscan299_scan:
    set_addr $I10, rxscan299_loop
    rx296_cur."!mark_push"(0, rx296_pos, $I10)
  rxscan299_done:
.annotate 'line', 189
  # rx subcapture "sym"
    set_addr $I10, rxcap_300_fail
    rx296_cur."!mark_push"(0, rx296_pos, $I10)
  # rx literal  "if"
    add $I11, rx296_pos, 2
    gt $I11, rx296_eos, rx296_fail
    sub $I11, rx296_pos, rx296_off
    substr $S10, rx296_tgt, $I11, 2
    ne $S10, "if", rx296_fail
    add rx296_pos, 2
    set_addr $I10, rxcap_300_fail
    ($I12, $I11) = rx296_cur."!mark_peek"($I10)
    rx296_cur."!cursor_pos"($I11)
    ($P10) = rx296_cur."!cursor_start"()
    $P10."!cursor_pass"(rx296_pos, "")
    rx296_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_300_done
  rxcap_300_fail:
    goto rx296_fail
  rxcap_300_done:
  # rx charclass s
    ge rx296_pos, rx296_eos, rx296_fail
    sub $I10, rx296_pos, rx296_off
    is_cclass $I11, 32, rx296_tgt, $I10
    unless $I11, rx296_fail
    inc rx296_pos
  # rx subrule "ws" subtype=method negate=
    rx296_cur."!cursor_pos"(rx296_pos)
    $P10 = rx296_cur."ws"()
    unless $P10, rx296_fail
    rx296_pos = $P10."pos"()
.annotate 'line', 190
  # rx subrule "xblock" subtype=capture negate=
    rx296_cur."!cursor_pos"(rx296_pos)
    $P10 = rx296_cur."xblock"()
    unless $P10, rx296_fail
    rx296_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx296_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx296_cur."!cursor_pos"(rx296_pos)
    $P10 = rx296_cur."ws"()
    unless $P10, rx296_fail
    rx296_pos = $P10."pos"()
.annotate 'line', 191
  # rx rxquantr303 ** 0..*
    set_addr $I10, rxquantr303_done
    rx296_cur."!mark_push"(0, rx296_pos, $I10)
  rxquantr303_loop:
  # rx subrule "ws" subtype=method negate=
    rx296_cur."!cursor_pos"(rx296_pos)
    $P10 = rx296_cur."ws"()
    unless $P10, rx296_fail
    rx296_pos = $P10."pos"()
  # rx literal  "elsif"
    add $I11, rx296_pos, 5
    gt $I11, rx296_eos, rx296_fail
    sub $I11, rx296_pos, rx296_off
    substr $S10, rx296_tgt, $I11, 5
    ne $S10, "elsif", rx296_fail
    add rx296_pos, 5
  # rx charclass s
    ge rx296_pos, rx296_eos, rx296_fail
    sub $I10, rx296_pos, rx296_off
    is_cclass $I11, 32, rx296_tgt, $I10
    unless $I11, rx296_fail
    inc rx296_pos
  # rx subrule "ws" subtype=method negate=
    rx296_cur."!cursor_pos"(rx296_pos)
    $P10 = rx296_cur."ws"()
    unless $P10, rx296_fail
    rx296_pos = $P10."pos"()
  # rx subrule "xblock" subtype=capture negate=
    rx296_cur."!cursor_pos"(rx296_pos)
    $P10 = rx296_cur."xblock"()
    unless $P10, rx296_fail
    rx296_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx296_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx296_cur."!cursor_pos"(rx296_pos)
    $P10 = rx296_cur."ws"()
    unless $P10, rx296_fail
    rx296_pos = $P10."pos"()
    set_addr $I10, rxquantr303_done
    (rx296_rep) = rx296_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr303_done
    rx296_cur."!mark_push"(rx296_rep, rx296_pos, $I10)
    goto rxquantr303_loop
  rxquantr303_done:
  # rx subrule "ws" subtype=method negate=
    rx296_cur."!cursor_pos"(rx296_pos)
    $P10 = rx296_cur."ws"()
    unless $P10, rx296_fail
    rx296_pos = $P10."pos"()
.annotate 'line', 192
  # rx rxquantr308 ** 0..1
    set_addr $I10, rxquantr308_done
    rx296_cur."!mark_push"(0, rx296_pos, $I10)
  rxquantr308_loop:
  # rx subrule "ws" subtype=method negate=
    rx296_cur."!cursor_pos"(rx296_pos)
    $P10 = rx296_cur."ws"()
    unless $P10, rx296_fail
    rx296_pos = $P10."pos"()
  # rx literal  "else"
    add $I11, rx296_pos, 4
    gt $I11, rx296_eos, rx296_fail
    sub $I11, rx296_pos, rx296_off
    substr $S10, rx296_tgt, $I11, 4
    ne $S10, "else", rx296_fail
    add rx296_pos, 4
  # rx charclass s
    ge rx296_pos, rx296_eos, rx296_fail
    sub $I10, rx296_pos, rx296_off
    is_cclass $I11, 32, rx296_tgt, $I10
    unless $I11, rx296_fail
    inc rx296_pos
  # rx subrule "ws" subtype=method negate=
    rx296_cur."!cursor_pos"(rx296_pos)
    $P10 = rx296_cur."ws"()
    unless $P10, rx296_fail
    rx296_pos = $P10."pos"()
  # rx subrule "pblock" subtype=capture negate=
    rx296_cur."!cursor_pos"(rx296_pos)
    $P10 = rx296_cur."pblock"()
    unless $P10, rx296_fail
    rx296_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("else")
    rx296_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx296_cur."!cursor_pos"(rx296_pos)
    $P10 = rx296_cur."ws"()
    unless $P10, rx296_fail
    rx296_pos = $P10."pos"()
    set_addr $I10, rxquantr308_done
    (rx296_rep) = rx296_cur."!mark_commit"($I10)
  rxquantr308_done:
  # rx subrule "ws" subtype=method negate=
    rx296_cur."!cursor_pos"(rx296_pos)
    $P10 = rx296_cur."ws"()
    unless $P10, rx296_fail
    rx296_pos = $P10."pos"()
.annotate 'line', 188
  # rx pass
    rx296_cur."!cursor_pass"(rx296_pos, "statement_control:sym<if>")
    if_null rx296_debug, debug_537
    rx296_cur."!cursor_debug"("PASS", "statement_control:sym<if>", " at pos=", rx296_pos)
  debug_537:
    .return (rx296_cur)
  rx296_restart:
.annotate 'line', 4
    if_null rx296_debug, debug_538
    rx296_cur."!cursor_debug"("NEXT", "statement_control:sym<if>")
  debug_538:
  rx296_fail:
    (rx296_rep, rx296_pos, $I10, $P10) = rx296_cur."!mark_fail"(0)
    lt rx296_pos, -1, rx296_done
    eq rx296_pos, -1, rx296_fail
    jump $I10
  rx296_done:
    rx296_cur."!cursor_fail"()
    if_null rx296_debug, debug_539
    rx296_cur."!cursor_debug"("FAIL", "statement_control:sym<if>")
  debug_539:
    .return (rx296_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<if>"  :nsentry("!PREFIX__statement_control:sym<if>") :subid("65_1299591493.348") :method
.annotate 'line', 4
    new $P298, "ResizablePMCArray"
    push $P298, "if"
    .return ($P298)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<unless>"  :subid("66_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .const 'Sub' $P324 = "68_1299591493.348" 
    capture_lex $P324
    .local string rx314_tgt
    .local int rx314_pos
    .local int rx314_off
    .local int rx314_eos
    .local int rx314_rep
    .local pmc rx314_cur
    .local pmc rx314_debug
    (rx314_cur, rx314_pos, rx314_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx314_cur
    .local pmc match
    .lex "$/", match
    length rx314_eos, rx314_tgt
    gt rx314_pos, rx314_eos, rx314_done
    set rx314_off, 0
    lt rx314_pos, 2, rx314_start
    sub rx314_off, rx314_pos, 1
    substr rx314_tgt, rx314_tgt, rx314_off
  rx314_start:
    eq $I10, 1, rx314_restart
    if_null rx314_debug, debug_540
    rx314_cur."!cursor_debug"("START", "statement_control:sym<unless>")
  debug_540:
    $I10 = self.'from'()
    ne $I10, -1, rxscan317_done
    goto rxscan317_scan
  rxscan317_loop:
    (rx314_pos) = rx314_cur."from"()
    inc rx314_pos
    rx314_cur."!cursor_from"(rx314_pos)
    ge rx314_pos, rx314_eos, rxscan317_done
  rxscan317_scan:
    set_addr $I10, rxscan317_loop
    rx314_cur."!mark_push"(0, rx314_pos, $I10)
  rxscan317_done:
.annotate 'line', 196
  # rx subcapture "sym"
    set_addr $I10, rxcap_318_fail
    rx314_cur."!mark_push"(0, rx314_pos, $I10)
  # rx literal  "unless"
    add $I11, rx314_pos, 6
    gt $I11, rx314_eos, rx314_fail
    sub $I11, rx314_pos, rx314_off
    substr $S10, rx314_tgt, $I11, 6
    ne $S10, "unless", rx314_fail
    add rx314_pos, 6
    set_addr $I10, rxcap_318_fail
    ($I12, $I11) = rx314_cur."!mark_peek"($I10)
    rx314_cur."!cursor_pos"($I11)
    ($P10) = rx314_cur."!cursor_start"()
    $P10."!cursor_pass"(rx314_pos, "")
    rx314_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_318_done
  rxcap_318_fail:
    goto rx314_fail
  rxcap_318_done:
  # rx charclass s
    ge rx314_pos, rx314_eos, rx314_fail
    sub $I10, rx314_pos, rx314_off
    is_cclass $I11, 32, rx314_tgt, $I10
    unless $I11, rx314_fail
    inc rx314_pos
  # rx subrule "ws" subtype=method negate=
    rx314_cur."!cursor_pos"(rx314_pos)
    $P10 = rx314_cur."ws"()
    unless $P10, rx314_fail
    rx314_pos = $P10."pos"()
.annotate 'line', 197
  # rx subrule "xblock" subtype=capture negate=
    rx314_cur."!cursor_pos"(rx314_pos)
    $P10 = rx314_cur."xblock"()
    unless $P10, rx314_fail
    rx314_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx314_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx314_cur."!cursor_pos"(rx314_pos)
    $P10 = rx314_cur."ws"()
    unless $P10, rx314_fail
    rx314_pos = $P10."pos"()
  alt321_0:
.annotate 'line', 198
    set_addr $I10, alt321_1
    rx314_cur."!mark_push"(0, rx314_pos, $I10)
  # rx subrule "ws" subtype=method negate=
    rx314_cur."!cursor_pos"(rx314_pos)
    $P10 = rx314_cur."ws"()
    unless $P10, rx314_fail
    rx314_pos = $P10."pos"()
  # rx subrule "before" subtype=zerowidth negate=1
    rx314_cur."!cursor_pos"(rx314_pos)
    .const 'Sub' $P324 = "68_1299591493.348" 
    capture_lex $P324
    $P10 = rx314_cur."before"($P324)
    if $P10, rx314_fail
  # rx subrule "ws" subtype=method negate=
    rx314_cur."!cursor_pos"(rx314_pos)
    $P10 = rx314_cur."ws"()
    unless $P10, rx314_fail
    rx314_pos = $P10."pos"()
    goto alt321_end
  alt321_1:
  # rx subrule "ws" subtype=method negate=
    rx314_cur."!cursor_pos"(rx314_pos)
    $P10 = rx314_cur."ws"()
    unless $P10, rx314_fail
    rx314_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx314_cur."!cursor_pos"(rx314_pos)
    $P10 = rx314_cur."panic"("unless does not take \"else\", please rewrite using \"if\"")
    unless $P10, rx314_fail
    rx314_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx314_cur."!cursor_pos"(rx314_pos)
    $P10 = rx314_cur."ws"()
    unless $P10, rx314_fail
    rx314_pos = $P10."pos"()
  alt321_end:
  # rx subrule "ws" subtype=method negate=
    rx314_cur."!cursor_pos"(rx314_pos)
    $P10 = rx314_cur."ws"()
    unless $P10, rx314_fail
    rx314_pos = $P10."pos"()
.annotate 'line', 195
  # rx pass
    rx314_cur."!cursor_pass"(rx314_pos, "statement_control:sym<unless>")
    if_null rx314_debug, debug_545
    rx314_cur."!cursor_debug"("PASS", "statement_control:sym<unless>", " at pos=", rx314_pos)
  debug_545:
    .return (rx314_cur)
  rx314_restart:
.annotate 'line', 4
    if_null rx314_debug, debug_546
    rx314_cur."!cursor_debug"("NEXT", "statement_control:sym<unless>")
  debug_546:
  rx314_fail:
    (rx314_rep, rx314_pos, $I10, $P10) = rx314_cur."!mark_fail"(0)
    lt rx314_pos, -1, rx314_done
    eq rx314_pos, -1, rx314_fail
    jump $I10
  rx314_done:
    rx314_cur."!cursor_fail"()
    if_null rx314_debug, debug_547
    rx314_cur."!cursor_debug"("FAIL", "statement_control:sym<unless>")
  debug_547:
    .return (rx314_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<unless>"  :nsentry("!PREFIX__statement_control:sym<unless>") :subid("67_1299591493.348") :method
.annotate 'line', 4
    new $P316, "ResizablePMCArray"
    push $P316, "unless"
    .return ($P316)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block323"  :anon :subid("68_1299591493.348") :method :outer("66_1299591493.348")
.annotate 'line', 198
    .local string rx325_tgt
    .local int rx325_pos
    .local int rx325_off
    .local int rx325_eos
    .local int rx325_rep
    .local pmc rx325_cur
    .local pmc rx325_debug
    (rx325_cur, rx325_pos, rx325_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx325_cur
    .local pmc match
    .lex "$/", match
    length rx325_eos, rx325_tgt
    gt rx325_pos, rx325_eos, rx325_done
    set rx325_off, 0
    lt rx325_pos, 2, rx325_start
    sub rx325_off, rx325_pos, 1
    substr rx325_tgt, rx325_tgt, rx325_off
  rx325_start:
    eq $I10, 1, rx325_restart
    if_null rx325_debug, debug_541
    rx325_cur."!cursor_debug"("START", "")
  debug_541:
    $I10 = self.'from'()
    ne $I10, -1, rxscan326_done
    goto rxscan326_scan
  rxscan326_loop:
    (rx325_pos) = rx325_cur."from"()
    inc rx325_pos
    rx325_cur."!cursor_from"(rx325_pos)
    ge rx325_pos, rx325_eos, rxscan326_done
  rxscan326_scan:
    set_addr $I10, rxscan326_loop
    rx325_cur."!mark_push"(0, rx325_pos, $I10)
  rxscan326_done:
  # rx literal  "else"
    add $I11, rx325_pos, 4
    gt $I11, rx325_eos, rx325_fail
    sub $I11, rx325_pos, rx325_off
    substr $S10, rx325_tgt, $I11, 4
    ne $S10, "else", rx325_fail
    add rx325_pos, 4
  # rx pass
    rx325_cur."!cursor_pass"(rx325_pos, "")
    if_null rx325_debug, debug_542
    rx325_cur."!cursor_debug"("PASS", "", " at pos=", rx325_pos)
  debug_542:
    .return (rx325_cur)
  rx325_restart:
    if_null rx325_debug, debug_543
    rx325_cur."!cursor_debug"("NEXT", "")
  debug_543:
  rx325_fail:
    (rx325_rep, rx325_pos, $I10, $P10) = rx325_cur."!mark_fail"(0)
    lt rx325_pos, -1, rx325_done
    eq rx325_pos, -1, rx325_fail
    jump $I10
  rx325_done:
    rx325_cur."!cursor_fail"()
    if_null rx325_debug, debug_544
    rx325_cur."!cursor_debug"("FAIL", "")
  debug_544:
    .return (rx325_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<while>"  :subid("69_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx332_tgt
    .local int rx332_pos
    .local int rx332_off
    .local int rx332_eos
    .local int rx332_rep
    .local pmc rx332_cur
    .local pmc rx332_debug
    (rx332_cur, rx332_pos, rx332_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx332_cur
    .local pmc match
    .lex "$/", match
    length rx332_eos, rx332_tgt
    gt rx332_pos, rx332_eos, rx332_done
    set rx332_off, 0
    lt rx332_pos, 2, rx332_start
    sub rx332_off, rx332_pos, 1
    substr rx332_tgt, rx332_tgt, rx332_off
  rx332_start:
    eq $I10, 1, rx332_restart
    if_null rx332_debug, debug_548
    rx332_cur."!cursor_debug"("START", "statement_control:sym<while>")
  debug_548:
    $I10 = self.'from'()
    ne $I10, -1, rxscan335_done
    goto rxscan335_scan
  rxscan335_loop:
    (rx332_pos) = rx332_cur."from"()
    inc rx332_pos
    rx332_cur."!cursor_from"(rx332_pos)
    ge rx332_pos, rx332_eos, rxscan335_done
  rxscan335_scan:
    set_addr $I10, rxscan335_loop
    rx332_cur."!mark_push"(0, rx332_pos, $I10)
  rxscan335_done:
.annotate 'line', 202
  # rx subcapture "sym"
    set_addr $I10, rxcap_337_fail
    rx332_cur."!mark_push"(0, rx332_pos, $I10)
  alt336_0:
    set_addr $I10, alt336_1
    rx332_cur."!mark_push"(0, rx332_pos, $I10)
  # rx literal  "while"
    add $I11, rx332_pos, 5
    gt $I11, rx332_eos, rx332_fail
    sub $I11, rx332_pos, rx332_off
    substr $S10, rx332_tgt, $I11, 5
    ne $S10, "while", rx332_fail
    add rx332_pos, 5
    goto alt336_end
  alt336_1:
  # rx literal  "until"
    add $I11, rx332_pos, 5
    gt $I11, rx332_eos, rx332_fail
    sub $I11, rx332_pos, rx332_off
    substr $S10, rx332_tgt, $I11, 5
    ne $S10, "until", rx332_fail
    add rx332_pos, 5
  alt336_end:
    set_addr $I10, rxcap_337_fail
    ($I12, $I11) = rx332_cur."!mark_peek"($I10)
    rx332_cur."!cursor_pos"($I11)
    ($P10) = rx332_cur."!cursor_start"()
    $P10."!cursor_pass"(rx332_pos, "")
    rx332_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_337_done
  rxcap_337_fail:
    goto rx332_fail
  rxcap_337_done:
  # rx charclass s
    ge rx332_pos, rx332_eos, rx332_fail
    sub $I10, rx332_pos, rx332_off
    is_cclass $I11, 32, rx332_tgt, $I10
    unless $I11, rx332_fail
    inc rx332_pos
  # rx subrule "ws" subtype=method negate=
    rx332_cur."!cursor_pos"(rx332_pos)
    $P10 = rx332_cur."ws"()
    unless $P10, rx332_fail
    rx332_pos = $P10."pos"()
.annotate 'line', 203
  # rx subrule "xblock" subtype=capture negate=
    rx332_cur."!cursor_pos"(rx332_pos)
    $P10 = rx332_cur."xblock"()
    unless $P10, rx332_fail
    rx332_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx332_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx332_cur."!cursor_pos"(rx332_pos)
    $P10 = rx332_cur."ws"()
    unless $P10, rx332_fail
    rx332_pos = $P10."pos"()
.annotate 'line', 201
  # rx pass
    rx332_cur."!cursor_pass"(rx332_pos, "statement_control:sym<while>")
    if_null rx332_debug, debug_549
    rx332_cur."!cursor_debug"("PASS", "statement_control:sym<while>", " at pos=", rx332_pos)
  debug_549:
    .return (rx332_cur)
  rx332_restart:
.annotate 'line', 4
    if_null rx332_debug, debug_550
    rx332_cur."!cursor_debug"("NEXT", "statement_control:sym<while>")
  debug_550:
  rx332_fail:
    (rx332_rep, rx332_pos, $I10, $P10) = rx332_cur."!mark_fail"(0)
    lt rx332_pos, -1, rx332_done
    eq rx332_pos, -1, rx332_fail
    jump $I10
  rx332_done:
    rx332_cur."!cursor_fail"()
    if_null rx332_debug, debug_551
    rx332_cur."!cursor_debug"("FAIL", "statement_control:sym<while>")
  debug_551:
    .return (rx332_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<while>"  :nsentry("!PREFIX__statement_control:sym<while>") :subid("70_1299591493.348") :method
.annotate 'line', 4
    new $P334, "ResizablePMCArray"
    push $P334, "until"
    push $P334, "while"
    .return ($P334)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<repeat>"  :subid("71_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx341_tgt
    .local int rx341_pos
    .local int rx341_off
    .local int rx341_eos
    .local int rx341_rep
    .local pmc rx341_cur
    .local pmc rx341_debug
    (rx341_cur, rx341_pos, rx341_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx341_cur
    .local pmc match
    .lex "$/", match
    length rx341_eos, rx341_tgt
    gt rx341_pos, rx341_eos, rx341_done
    set rx341_off, 0
    lt rx341_pos, 2, rx341_start
    sub rx341_off, rx341_pos, 1
    substr rx341_tgt, rx341_tgt, rx341_off
  rx341_start:
    eq $I10, 1, rx341_restart
    if_null rx341_debug, debug_552
    rx341_cur."!cursor_debug"("START", "statement_control:sym<repeat>")
  debug_552:
    $I10 = self.'from'()
    ne $I10, -1, rxscan344_done
    goto rxscan344_scan
  rxscan344_loop:
    (rx341_pos) = rx341_cur."from"()
    inc rx341_pos
    rx341_cur."!cursor_from"(rx341_pos)
    ge rx341_pos, rx341_eos, rxscan344_done
  rxscan344_scan:
    set_addr $I10, rxscan344_loop
    rx341_cur."!mark_push"(0, rx341_pos, $I10)
  rxscan344_done:
.annotate 'line', 207
  # rx subcapture "sym"
    set_addr $I10, rxcap_345_fail
    rx341_cur."!mark_push"(0, rx341_pos, $I10)
  # rx literal  "repeat"
    add $I11, rx341_pos, 6
    gt $I11, rx341_eos, rx341_fail
    sub $I11, rx341_pos, rx341_off
    substr $S10, rx341_tgt, $I11, 6
    ne $S10, "repeat", rx341_fail
    add rx341_pos, 6
    set_addr $I10, rxcap_345_fail
    ($I12, $I11) = rx341_cur."!mark_peek"($I10)
    rx341_cur."!cursor_pos"($I11)
    ($P10) = rx341_cur."!cursor_start"()
    $P10."!cursor_pass"(rx341_pos, "")
    rx341_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_345_done
  rxcap_345_fail:
    goto rx341_fail
  rxcap_345_done:
  # rx charclass s
    ge rx341_pos, rx341_eos, rx341_fail
    sub $I10, rx341_pos, rx341_off
    is_cclass $I11, 32, rx341_tgt, $I10
    unless $I11, rx341_fail
    inc rx341_pos
  # rx subrule "ws" subtype=method negate=
    rx341_cur."!cursor_pos"(rx341_pos)
    $P10 = rx341_cur."ws"()
    unless $P10, rx341_fail
    rx341_pos = $P10."pos"()
  alt347_0:
.annotate 'line', 208
    set_addr $I10, alt347_1
    rx341_cur."!mark_push"(0, rx341_pos, $I10)
.annotate 'line', 209
  # rx subrule "ws" subtype=method negate=
    rx341_cur."!cursor_pos"(rx341_pos)
    $P10 = rx341_cur."ws"()
    unless $P10, rx341_fail
    rx341_pos = $P10."pos"()
  # rx subcapture "wu"
    set_addr $I10, rxcap_350_fail
    rx341_cur."!mark_push"(0, rx341_pos, $I10)
  alt349_0:
    set_addr $I10, alt349_1
    rx341_cur."!mark_push"(0, rx341_pos, $I10)
  # rx literal  "while"
    add $I11, rx341_pos, 5
    gt $I11, rx341_eos, rx341_fail
    sub $I11, rx341_pos, rx341_off
    substr $S10, rx341_tgt, $I11, 5
    ne $S10, "while", rx341_fail
    add rx341_pos, 5
    goto alt349_end
  alt349_1:
  # rx literal  "until"
    add $I11, rx341_pos, 5
    gt $I11, rx341_eos, rx341_fail
    sub $I11, rx341_pos, rx341_off
    substr $S10, rx341_tgt, $I11, 5
    ne $S10, "until", rx341_fail
    add rx341_pos, 5
  alt349_end:
    set_addr $I10, rxcap_350_fail
    ($I12, $I11) = rx341_cur."!mark_peek"($I10)
    rx341_cur."!cursor_pos"($I11)
    ($P10) = rx341_cur."!cursor_start"()
    $P10."!cursor_pass"(rx341_pos, "")
    rx341_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("wu")
    goto rxcap_350_done
  rxcap_350_fail:
    goto rx341_fail
  rxcap_350_done:
  # rx charclass s
    ge rx341_pos, rx341_eos, rx341_fail
    sub $I10, rx341_pos, rx341_off
    is_cclass $I11, 32, rx341_tgt, $I10
    unless $I11, rx341_fail
    inc rx341_pos
  # rx subrule "ws" subtype=method negate=
    rx341_cur."!cursor_pos"(rx341_pos)
    $P10 = rx341_cur."ws"()
    unless $P10, rx341_fail
    rx341_pos = $P10."pos"()
  # rx subrule "xblock" subtype=capture negate=
    rx341_cur."!cursor_pos"(rx341_pos)
    $P10 = rx341_cur."xblock"()
    unless $P10, rx341_fail
    rx341_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx341_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx341_cur."!cursor_pos"(rx341_pos)
    $P10 = rx341_cur."ws"()
    unless $P10, rx341_fail
    rx341_pos = $P10."pos"()
    goto alt347_end
  alt347_1:
.annotate 'line', 210
  # rx subrule "ws" subtype=method negate=
    rx341_cur."!cursor_pos"(rx341_pos)
    $P10 = rx341_cur."ws"()
    unless $P10, rx341_fail
    rx341_pos = $P10."pos"()
  # rx subrule "pblock" subtype=capture negate=
    rx341_cur."!cursor_pos"(rx341_pos)
    $P10 = rx341_cur."pblock"()
    unless $P10, rx341_fail
    rx341_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("pblock")
    rx341_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx341_cur."!cursor_pos"(rx341_pos)
    $P10 = rx341_cur."ws"()
    unless $P10, rx341_fail
    rx341_pos = $P10."pos"()
  # rx subcapture "wu"
    set_addr $I10, rxcap_356_fail
    rx341_cur."!mark_push"(0, rx341_pos, $I10)
  alt355_0:
    set_addr $I10, alt355_1
    rx341_cur."!mark_push"(0, rx341_pos, $I10)
  # rx literal  "while"
    add $I11, rx341_pos, 5
    gt $I11, rx341_eos, rx341_fail
    sub $I11, rx341_pos, rx341_off
    substr $S10, rx341_tgt, $I11, 5
    ne $S10, "while", rx341_fail
    add rx341_pos, 5
    goto alt355_end
  alt355_1:
  # rx literal  "until"
    add $I11, rx341_pos, 5
    gt $I11, rx341_eos, rx341_fail
    sub $I11, rx341_pos, rx341_off
    substr $S10, rx341_tgt, $I11, 5
    ne $S10, "until", rx341_fail
    add rx341_pos, 5
  alt355_end:
    set_addr $I10, rxcap_356_fail
    ($I12, $I11) = rx341_cur."!mark_peek"($I10)
    rx341_cur."!cursor_pos"($I11)
    ($P10) = rx341_cur."!cursor_start"()
    $P10."!cursor_pass"(rx341_pos, "")
    rx341_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("wu")
    goto rxcap_356_done
  rxcap_356_fail:
    goto rx341_fail
  rxcap_356_done:
  # rx charclass s
    ge rx341_pos, rx341_eos, rx341_fail
    sub $I10, rx341_pos, rx341_off
    is_cclass $I11, 32, rx341_tgt, $I10
    unless $I11, rx341_fail
    inc rx341_pos
  # rx subrule "ws" subtype=method negate=
    rx341_cur."!cursor_pos"(rx341_pos)
    $P10 = rx341_cur."ws"()
    unless $P10, rx341_fail
    rx341_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx341_cur."!cursor_pos"(rx341_pos)
    $P10 = rx341_cur."EXPR"()
    unless $P10, rx341_fail
    rx341_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx341_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx341_cur."!cursor_pos"(rx341_pos)
    $P10 = rx341_cur."ws"()
    unless $P10, rx341_fail
    rx341_pos = $P10."pos"()
  alt347_end:
.annotate 'line', 211
  # rx subrule "ws" subtype=method negate=
    rx341_cur."!cursor_pos"(rx341_pos)
    $P10 = rx341_cur."ws"()
    unless $P10, rx341_fail
    rx341_pos = $P10."pos"()
.annotate 'line', 206
  # rx pass
    rx341_cur."!cursor_pass"(rx341_pos, "statement_control:sym<repeat>")
    if_null rx341_debug, debug_553
    rx341_cur."!cursor_debug"("PASS", "statement_control:sym<repeat>", " at pos=", rx341_pos)
  debug_553:
    .return (rx341_cur)
  rx341_restart:
.annotate 'line', 4
    if_null rx341_debug, debug_554
    rx341_cur."!cursor_debug"("NEXT", "statement_control:sym<repeat>")
  debug_554:
  rx341_fail:
    (rx341_rep, rx341_pos, $I10, $P10) = rx341_cur."!mark_fail"(0)
    lt rx341_pos, -1, rx341_done
    eq rx341_pos, -1, rx341_fail
    jump $I10
  rx341_done:
    rx341_cur."!cursor_fail"()
    if_null rx341_debug, debug_555
    rx341_cur."!cursor_debug"("FAIL", "statement_control:sym<repeat>")
  debug_555:
    .return (rx341_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<repeat>"  :nsentry("!PREFIX__statement_control:sym<repeat>") :subid("72_1299591493.348") :method
.annotate 'line', 4
    new $P343, "ResizablePMCArray"
    push $P343, "repeat"
    .return ($P343)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<for>"  :subid("73_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx361_tgt
    .local int rx361_pos
    .local int rx361_off
    .local int rx361_eos
    .local int rx361_rep
    .local pmc rx361_cur
    .local pmc rx361_debug
    (rx361_cur, rx361_pos, rx361_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx361_cur
    .local pmc match
    .lex "$/", match
    length rx361_eos, rx361_tgt
    gt rx361_pos, rx361_eos, rx361_done
    set rx361_off, 0
    lt rx361_pos, 2, rx361_start
    sub rx361_off, rx361_pos, 1
    substr rx361_tgt, rx361_tgt, rx361_off
  rx361_start:
    eq $I10, 1, rx361_restart
    if_null rx361_debug, debug_556
    rx361_cur."!cursor_debug"("START", "statement_control:sym<for>")
  debug_556:
    $I10 = self.'from'()
    ne $I10, -1, rxscan364_done
    goto rxscan364_scan
  rxscan364_loop:
    (rx361_pos) = rx361_cur."from"()
    inc rx361_pos
    rx361_cur."!cursor_from"(rx361_pos)
    ge rx361_pos, rx361_eos, rxscan364_done
  rxscan364_scan:
    set_addr $I10, rxscan364_loop
    rx361_cur."!mark_push"(0, rx361_pos, $I10)
  rxscan364_done:
.annotate 'line', 215
  # rx subcapture "sym"
    set_addr $I10, rxcap_365_fail
    rx361_cur."!mark_push"(0, rx361_pos, $I10)
  # rx literal  "for"
    add $I11, rx361_pos, 3
    gt $I11, rx361_eos, rx361_fail
    sub $I11, rx361_pos, rx361_off
    substr $S10, rx361_tgt, $I11, 3
    ne $S10, "for", rx361_fail
    add rx361_pos, 3
    set_addr $I10, rxcap_365_fail
    ($I12, $I11) = rx361_cur."!mark_peek"($I10)
    rx361_cur."!cursor_pos"($I11)
    ($P10) = rx361_cur."!cursor_start"()
    $P10."!cursor_pass"(rx361_pos, "")
    rx361_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_365_done
  rxcap_365_fail:
    goto rx361_fail
  rxcap_365_done:
  # rx charclass s
    ge rx361_pos, rx361_eos, rx361_fail
    sub $I10, rx361_pos, rx361_off
    is_cclass $I11, 32, rx361_tgt, $I10
    unless $I11, rx361_fail
    inc rx361_pos
  # rx subrule "ws" subtype=method negate=
    rx361_cur."!cursor_pos"(rx361_pos)
    $P10 = rx361_cur."ws"()
    unless $P10, rx361_fail
    rx361_pos = $P10."pos"()
.annotate 'line', 216
  # rx subrule "xblock" subtype=capture negate=
    rx361_cur."!cursor_pos"(rx361_pos)
    $P10 = rx361_cur."xblock"()
    unless $P10, rx361_fail
    rx361_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx361_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx361_cur."!cursor_pos"(rx361_pos)
    $P10 = rx361_cur."ws"()
    unless $P10, rx361_fail
    rx361_pos = $P10."pos"()
.annotate 'line', 214
  # rx pass
    rx361_cur."!cursor_pass"(rx361_pos, "statement_control:sym<for>")
    if_null rx361_debug, debug_557
    rx361_cur."!cursor_debug"("PASS", "statement_control:sym<for>", " at pos=", rx361_pos)
  debug_557:
    .return (rx361_cur)
  rx361_restart:
.annotate 'line', 4
    if_null rx361_debug, debug_558
    rx361_cur."!cursor_debug"("NEXT", "statement_control:sym<for>")
  debug_558:
  rx361_fail:
    (rx361_rep, rx361_pos, $I10, $P10) = rx361_cur."!mark_fail"(0)
    lt rx361_pos, -1, rx361_done
    eq rx361_pos, -1, rx361_fail
    jump $I10
  rx361_done:
    rx361_cur."!cursor_fail"()
    if_null rx361_debug, debug_559
    rx361_cur."!cursor_debug"("FAIL", "statement_control:sym<for>")
  debug_559:
    .return (rx361_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<for>"  :nsentry("!PREFIX__statement_control:sym<for>") :subid("74_1299591493.348") :method
.annotate 'line', 4
    new $P363, "ResizablePMCArray"
    push $P363, "for"
    .return ($P363)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<CATCH>"  :subid("75_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx369_tgt
    .local int rx369_pos
    .local int rx369_off
    .local int rx369_eos
    .local int rx369_rep
    .local pmc rx369_cur
    .local pmc rx369_debug
    (rx369_cur, rx369_pos, rx369_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx369_cur
    .local pmc match
    .lex "$/", match
    length rx369_eos, rx369_tgt
    gt rx369_pos, rx369_eos, rx369_done
    set rx369_off, 0
    lt rx369_pos, 2, rx369_start
    sub rx369_off, rx369_pos, 1
    substr rx369_tgt, rx369_tgt, rx369_off
  rx369_start:
    eq $I10, 1, rx369_restart
    if_null rx369_debug, debug_560
    rx369_cur."!cursor_debug"("START", "statement_control:sym<CATCH>")
  debug_560:
    $I10 = self.'from'()
    ne $I10, -1, rxscan372_done
    goto rxscan372_scan
  rxscan372_loop:
    (rx369_pos) = rx369_cur."from"()
    inc rx369_pos
    rx369_cur."!cursor_from"(rx369_pos)
    ge rx369_pos, rx369_eos, rxscan372_done
  rxscan372_scan:
    set_addr $I10, rxscan372_loop
    rx369_cur."!mark_push"(0, rx369_pos, $I10)
  rxscan372_done:
.annotate 'line', 220
  # rx subcapture "sym"
    set_addr $I10, rxcap_373_fail
    rx369_cur."!mark_push"(0, rx369_pos, $I10)
  # rx literal  "CATCH"
    add $I11, rx369_pos, 5
    gt $I11, rx369_eos, rx369_fail
    sub $I11, rx369_pos, rx369_off
    substr $S10, rx369_tgt, $I11, 5
    ne $S10, "CATCH", rx369_fail
    add rx369_pos, 5
    set_addr $I10, rxcap_373_fail
    ($I12, $I11) = rx369_cur."!mark_peek"($I10)
    rx369_cur."!cursor_pos"($I11)
    ($P10) = rx369_cur."!cursor_start"()
    $P10."!cursor_pass"(rx369_pos, "")
    rx369_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_373_done
  rxcap_373_fail:
    goto rx369_fail
  rxcap_373_done:
  # rx charclass s
    ge rx369_pos, rx369_eos, rx369_fail
    sub $I10, rx369_pos, rx369_off
    is_cclass $I11, 32, rx369_tgt, $I10
    unless $I11, rx369_fail
    inc rx369_pos
  # rx subrule "ws" subtype=method negate=
    rx369_cur."!cursor_pos"(rx369_pos)
    $P10 = rx369_cur."ws"()
    unless $P10, rx369_fail
    rx369_pos = $P10."pos"()
.annotate 'line', 221
  # rx subrule "block" subtype=capture negate=
    rx369_cur."!cursor_pos"(rx369_pos)
    $P10 = rx369_cur."block"()
    unless $P10, rx369_fail
    rx369_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx369_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx369_cur."!cursor_pos"(rx369_pos)
    $P10 = rx369_cur."ws"()
    unless $P10, rx369_fail
    rx369_pos = $P10."pos"()
.annotate 'line', 219
  # rx pass
    rx369_cur."!cursor_pass"(rx369_pos, "statement_control:sym<CATCH>")
    if_null rx369_debug, debug_561
    rx369_cur."!cursor_debug"("PASS", "statement_control:sym<CATCH>", " at pos=", rx369_pos)
  debug_561:
    .return (rx369_cur)
  rx369_restart:
.annotate 'line', 4
    if_null rx369_debug, debug_562
    rx369_cur."!cursor_debug"("NEXT", "statement_control:sym<CATCH>")
  debug_562:
  rx369_fail:
    (rx369_rep, rx369_pos, $I10, $P10) = rx369_cur."!mark_fail"(0)
    lt rx369_pos, -1, rx369_done
    eq rx369_pos, -1, rx369_fail
    jump $I10
  rx369_done:
    rx369_cur."!cursor_fail"()
    if_null rx369_debug, debug_563
    rx369_cur."!cursor_debug"("FAIL", "statement_control:sym<CATCH>")
  debug_563:
    .return (rx369_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<CATCH>"  :nsentry("!PREFIX__statement_control:sym<CATCH>") :subid("76_1299591493.348") :method
.annotate 'line', 4
    new $P371, "ResizablePMCArray"
    push $P371, "CATCH"
    .return ($P371)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<CONTROL>"  :subid("77_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx377_tgt
    .local int rx377_pos
    .local int rx377_off
    .local int rx377_eos
    .local int rx377_rep
    .local pmc rx377_cur
    .local pmc rx377_debug
    (rx377_cur, rx377_pos, rx377_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx377_cur
    .local pmc match
    .lex "$/", match
    length rx377_eos, rx377_tgt
    gt rx377_pos, rx377_eos, rx377_done
    set rx377_off, 0
    lt rx377_pos, 2, rx377_start
    sub rx377_off, rx377_pos, 1
    substr rx377_tgt, rx377_tgt, rx377_off
  rx377_start:
    eq $I10, 1, rx377_restart
    if_null rx377_debug, debug_564
    rx377_cur."!cursor_debug"("START", "statement_control:sym<CONTROL>")
  debug_564:
    $I10 = self.'from'()
    ne $I10, -1, rxscan380_done
    goto rxscan380_scan
  rxscan380_loop:
    (rx377_pos) = rx377_cur."from"()
    inc rx377_pos
    rx377_cur."!cursor_from"(rx377_pos)
    ge rx377_pos, rx377_eos, rxscan380_done
  rxscan380_scan:
    set_addr $I10, rxscan380_loop
    rx377_cur."!mark_push"(0, rx377_pos, $I10)
  rxscan380_done:
.annotate 'line', 225
  # rx subcapture "sym"
    set_addr $I10, rxcap_381_fail
    rx377_cur."!mark_push"(0, rx377_pos, $I10)
  # rx literal  "CONTROL"
    add $I11, rx377_pos, 7
    gt $I11, rx377_eos, rx377_fail
    sub $I11, rx377_pos, rx377_off
    substr $S10, rx377_tgt, $I11, 7
    ne $S10, "CONTROL", rx377_fail
    add rx377_pos, 7
    set_addr $I10, rxcap_381_fail
    ($I12, $I11) = rx377_cur."!mark_peek"($I10)
    rx377_cur."!cursor_pos"($I11)
    ($P10) = rx377_cur."!cursor_start"()
    $P10."!cursor_pass"(rx377_pos, "")
    rx377_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_381_done
  rxcap_381_fail:
    goto rx377_fail
  rxcap_381_done:
  # rx charclass s
    ge rx377_pos, rx377_eos, rx377_fail
    sub $I10, rx377_pos, rx377_off
    is_cclass $I11, 32, rx377_tgt, $I10
    unless $I11, rx377_fail
    inc rx377_pos
  # rx subrule "ws" subtype=method negate=
    rx377_cur."!cursor_pos"(rx377_pos)
    $P10 = rx377_cur."ws"()
    unless $P10, rx377_fail
    rx377_pos = $P10."pos"()
.annotate 'line', 226
  # rx subrule "block" subtype=capture negate=
    rx377_cur."!cursor_pos"(rx377_pos)
    $P10 = rx377_cur."block"()
    unless $P10, rx377_fail
    rx377_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx377_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx377_cur."!cursor_pos"(rx377_pos)
    $P10 = rx377_cur."ws"()
    unless $P10, rx377_fail
    rx377_pos = $P10."pos"()
.annotate 'line', 224
  # rx pass
    rx377_cur."!cursor_pass"(rx377_pos, "statement_control:sym<CONTROL>")
    if_null rx377_debug, debug_565
    rx377_cur."!cursor_debug"("PASS", "statement_control:sym<CONTROL>", " at pos=", rx377_pos)
  debug_565:
    .return (rx377_cur)
  rx377_restart:
.annotate 'line', 4
    if_null rx377_debug, debug_566
    rx377_cur."!cursor_debug"("NEXT", "statement_control:sym<CONTROL>")
  debug_566:
  rx377_fail:
    (rx377_rep, rx377_pos, $I10, $P10) = rx377_cur."!mark_fail"(0)
    lt rx377_pos, -1, rx377_done
    eq rx377_pos, -1, rx377_fail
    jump $I10
  rx377_done:
    rx377_cur."!cursor_fail"()
    if_null rx377_debug, debug_567
    rx377_cur."!cursor_debug"("FAIL", "statement_control:sym<CONTROL>")
  debug_567:
    .return (rx377_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<CONTROL>"  :nsentry("!PREFIX__statement_control:sym<CONTROL>") :subid("78_1299591493.348") :method
.annotate 'line', 4
    new $P379, "ResizablePMCArray"
    push $P379, "CONTROL"
    .return ($P379)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix"  :subid("79_1299591493.348")
    .param pmc param_385
.annotate 'line', 229
    .lex "self", param_385
    $P386 = param_385."!protoregex"("statement_prefix")
    .return ($P386)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_prefix"  :subid("80_1299591493.348")
    .param pmc param_388
.annotate 'line', 229
    .lex "self", param_388
    $P389 = param_388."!PREFIX__!protoregex"("statement_prefix")
    .return ($P389)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix:sym<INIT>"  :subid("81_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx391_tgt
    .local int rx391_pos
    .local int rx391_off
    .local int rx391_eos
    .local int rx391_rep
    .local pmc rx391_cur
    .local pmc rx391_debug
    (rx391_cur, rx391_pos, rx391_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx391_cur
    .local pmc match
    .lex "$/", match
    length rx391_eos, rx391_tgt
    gt rx391_pos, rx391_eos, rx391_done
    set rx391_off, 0
    lt rx391_pos, 2, rx391_start
    sub rx391_off, rx391_pos, 1
    substr rx391_tgt, rx391_tgt, rx391_off
  rx391_start:
    eq $I10, 1, rx391_restart
    if_null rx391_debug, debug_568
    rx391_cur."!cursor_debug"("START", "statement_prefix:sym<INIT>")
  debug_568:
    $I10 = self.'from'()
    ne $I10, -1, rxscan395_done
    goto rxscan395_scan
  rxscan395_loop:
    (rx391_pos) = rx391_cur."from"()
    inc rx391_pos
    rx391_cur."!cursor_from"(rx391_pos)
    ge rx391_pos, rx391_eos, rxscan395_done
  rxscan395_scan:
    set_addr $I10, rxscan395_loop
    rx391_cur."!mark_push"(0, rx391_pos, $I10)
  rxscan395_done:
.annotate 'line', 230
  # rx subcapture "sym"
    set_addr $I10, rxcap_396_fail
    rx391_cur."!mark_push"(0, rx391_pos, $I10)
  # rx literal  "INIT"
    add $I11, rx391_pos, 4
    gt $I11, rx391_eos, rx391_fail
    sub $I11, rx391_pos, rx391_off
    substr $S10, rx391_tgt, $I11, 4
    ne $S10, "INIT", rx391_fail
    add rx391_pos, 4
    set_addr $I10, rxcap_396_fail
    ($I12, $I11) = rx391_cur."!mark_peek"($I10)
    rx391_cur."!cursor_pos"($I11)
    ($P10) = rx391_cur."!cursor_start"()
    $P10."!cursor_pass"(rx391_pos, "")
    rx391_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_396_done
  rxcap_396_fail:
    goto rx391_fail
  rxcap_396_done:
  # rx subrule "blorst" subtype=capture negate=
    rx391_cur."!cursor_pos"(rx391_pos)
    $P10 = rx391_cur."blorst"()
    unless $P10, rx391_fail
    rx391_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blorst")
    rx391_pos = $P10."pos"()
  # rx pass
    rx391_cur."!cursor_pass"(rx391_pos, "statement_prefix:sym<INIT>")
    if_null rx391_debug, debug_569
    rx391_cur."!cursor_debug"("PASS", "statement_prefix:sym<INIT>", " at pos=", rx391_pos)
  debug_569:
    .return (rx391_cur)
  rx391_restart:
.annotate 'line', 4
    if_null rx391_debug, debug_570
    rx391_cur."!cursor_debug"("NEXT", "statement_prefix:sym<INIT>")
  debug_570:
  rx391_fail:
    (rx391_rep, rx391_pos, $I10, $P10) = rx391_cur."!mark_fail"(0)
    lt rx391_pos, -1, rx391_done
    eq rx391_pos, -1, rx391_fail
    jump $I10
  rx391_done:
    rx391_cur."!cursor_fail"()
    if_null rx391_debug, debug_571
    rx391_cur."!cursor_debug"("FAIL", "statement_prefix:sym<INIT>")
  debug_571:
    .return (rx391_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_prefix:sym<INIT>"  :nsentry("!PREFIX__statement_prefix:sym<INIT>") :subid("82_1299591493.348") :method
.annotate 'line', 4
    $P393 = self."!PREFIX__!subrule"("blorst", "INIT")
    new $P394, "ResizablePMCArray"
    push $P394, $P393
    .return ($P394)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix:sym<try>"  :subid("83_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx398_tgt
    .local int rx398_pos
    .local int rx398_off
    .local int rx398_eos
    .local int rx398_rep
    .local pmc rx398_cur
    .local pmc rx398_debug
    (rx398_cur, rx398_pos, rx398_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx398_cur
    .local pmc match
    .lex "$/", match
    length rx398_eos, rx398_tgt
    gt rx398_pos, rx398_eos, rx398_done
    set rx398_off, 0
    lt rx398_pos, 2, rx398_start
    sub rx398_off, rx398_pos, 1
    substr rx398_tgt, rx398_tgt, rx398_off
  rx398_start:
    eq $I10, 1, rx398_restart
    if_null rx398_debug, debug_572
    rx398_cur."!cursor_debug"("START", "statement_prefix:sym<try>")
  debug_572:
    $I10 = self.'from'()
    ne $I10, -1, rxscan402_done
    goto rxscan402_scan
  rxscan402_loop:
    (rx398_pos) = rx398_cur."from"()
    inc rx398_pos
    rx398_cur."!cursor_from"(rx398_pos)
    ge rx398_pos, rx398_eos, rxscan402_done
  rxscan402_scan:
    set_addr $I10, rxscan402_loop
    rx398_cur."!mark_push"(0, rx398_pos, $I10)
  rxscan402_done:
.annotate 'line', 233
  # rx subcapture "sym"
    set_addr $I10, rxcap_403_fail
    rx398_cur."!mark_push"(0, rx398_pos, $I10)
  # rx literal  "try"
    add $I11, rx398_pos, 3
    gt $I11, rx398_eos, rx398_fail
    sub $I11, rx398_pos, rx398_off
    substr $S10, rx398_tgt, $I11, 3
    ne $S10, "try", rx398_fail
    add rx398_pos, 3
    set_addr $I10, rxcap_403_fail
    ($I12, $I11) = rx398_cur."!mark_peek"($I10)
    rx398_cur."!cursor_pos"($I11)
    ($P10) = rx398_cur."!cursor_start"()
    $P10."!cursor_pass"(rx398_pos, "")
    rx398_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_403_done
  rxcap_403_fail:
    goto rx398_fail
  rxcap_403_done:
.annotate 'line', 234
  # rx subrule "blorst" subtype=capture negate=
    rx398_cur."!cursor_pos"(rx398_pos)
    $P10 = rx398_cur."blorst"()
    unless $P10, rx398_fail
    rx398_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blorst")
    rx398_pos = $P10."pos"()
.annotate 'line', 232
  # rx pass
    rx398_cur."!cursor_pass"(rx398_pos, "statement_prefix:sym<try>")
    if_null rx398_debug, debug_573
    rx398_cur."!cursor_debug"("PASS", "statement_prefix:sym<try>", " at pos=", rx398_pos)
  debug_573:
    .return (rx398_cur)
  rx398_restart:
.annotate 'line', 4
    if_null rx398_debug, debug_574
    rx398_cur."!cursor_debug"("NEXT", "statement_prefix:sym<try>")
  debug_574:
  rx398_fail:
    (rx398_rep, rx398_pos, $I10, $P10) = rx398_cur."!mark_fail"(0)
    lt rx398_pos, -1, rx398_done
    eq rx398_pos, -1, rx398_fail
    jump $I10
  rx398_done:
    rx398_cur."!cursor_fail"()
    if_null rx398_debug, debug_575
    rx398_cur."!cursor_debug"("FAIL", "statement_prefix:sym<try>")
  debug_575:
    .return (rx398_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_prefix:sym<try>"  :nsentry("!PREFIX__statement_prefix:sym<try>") :subid("84_1299591493.348") :method
.annotate 'line', 4
    $P400 = self."!PREFIX__!subrule"("blorst", "try")
    new $P401, "ResizablePMCArray"
    push $P401, $P400
    .return ($P401)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "blorst"  :subid("85_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx405_tgt
    .local int rx405_pos
    .local int rx405_off
    .local int rx405_eos
    .local int rx405_rep
    .local pmc rx405_cur
    .local pmc rx405_debug
    (rx405_cur, rx405_pos, rx405_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx405_cur
    .local pmc match
    .lex "$/", match
    length rx405_eos, rx405_tgt
    gt rx405_pos, rx405_eos, rx405_done
    set rx405_off, 0
    lt rx405_pos, 2, rx405_start
    sub rx405_off, rx405_pos, 1
    substr rx405_tgt, rx405_tgt, rx405_off
  rx405_start:
    eq $I10, 1, rx405_restart
    if_null rx405_debug, debug_576
    rx405_cur."!cursor_debug"("START", "blorst")
  debug_576:
    $I10 = self.'from'()
    ne $I10, -1, rxscan408_done
    goto rxscan408_scan
  rxscan408_loop:
    (rx405_pos) = rx405_cur."from"()
    inc rx405_pos
    rx405_cur."!cursor_from"(rx405_pos)
    ge rx405_pos, rx405_eos, rxscan408_done
  rxscan408_scan:
    set_addr $I10, rxscan408_loop
    rx405_cur."!mark_push"(0, rx405_pos, $I10)
  rxscan408_done:
.annotate 'line', 238
  # rx charclass s
    ge rx405_pos, rx405_eos, rx405_fail
    sub $I10, rx405_pos, rx405_off
    is_cclass $I11, 32, rx405_tgt, $I10
    unless $I11, rx405_fail
    inc rx405_pos
  # rx subrule "ws" subtype=method negate=
    rx405_cur."!cursor_pos"(rx405_pos)
    $P10 = rx405_cur."ws"()
    unless $P10, rx405_fail
    rx405_pos = $P10."pos"()
  alt409_0:
    set_addr $I10, alt409_1
    rx405_cur."!mark_push"(0, rx405_pos, $I10)
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx405_pos, rx405_off
    substr $S10, rx405_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx405_fail
  # rx subrule "block" subtype=capture negate=
    rx405_cur."!cursor_pos"(rx405_pos)
    $P10 = rx405_cur."block"()
    unless $P10, rx405_fail
    rx405_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx405_pos = $P10."pos"()
    goto alt409_end
  alt409_1:
  # rx subrule "statement" subtype=capture negate=
    rx405_cur."!cursor_pos"(rx405_pos)
    $P10 = rx405_cur."statement"()
    unless $P10, rx405_fail
    rx405_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement")
    rx405_pos = $P10."pos"()
  alt409_end:
.annotate 'line', 237
  # rx pass
    rx405_cur."!cursor_pass"(rx405_pos, "blorst")
    if_null rx405_debug, debug_577
    rx405_cur."!cursor_debug"("PASS", "blorst", " at pos=", rx405_pos)
  debug_577:
    .return (rx405_cur)
  rx405_restart:
.annotate 'line', 4
    if_null rx405_debug, debug_578
    rx405_cur."!cursor_debug"("NEXT", "blorst")
  debug_578:
  rx405_fail:
    (rx405_rep, rx405_pos, $I10, $P10) = rx405_cur."!mark_fail"(0)
    lt rx405_pos, -1, rx405_done
    eq rx405_pos, -1, rx405_fail
    jump $I10
  rx405_done:
    rx405_cur."!cursor_fail"()
    if_null rx405_debug, debug_579
    rx405_cur."!cursor_debug"("FAIL", "blorst")
  debug_579:
    .return (rx405_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__blorst"  :nsentry("!PREFIX__blorst") :subid("86_1299591493.348") :method
.annotate 'line', 4
    new $P407, "ResizablePMCArray"
    push $P407, ""
    .return ($P407)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_cond"  :subid("87_1299591493.348")
    .param pmc param_411
.annotate 'line', 243
    .lex "self", param_411
    $P412 = param_411."!protoregex"("statement_mod_cond")
    .return ($P412)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_cond"  :subid("88_1299591493.348")
    .param pmc param_414
.annotate 'line', 243
    .lex "self", param_414
    $P415 = param_414."!PREFIX__!protoregex"("statement_mod_cond")
    .return ($P415)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_cond:sym<if>"  :subid("89_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx417_tgt
    .local int rx417_pos
    .local int rx417_off
    .local int rx417_eos
    .local int rx417_rep
    .local pmc rx417_cur
    .local pmc rx417_debug
    (rx417_cur, rx417_pos, rx417_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx417_cur
    .local pmc match
    .lex "$/", match
    length rx417_eos, rx417_tgt
    gt rx417_pos, rx417_eos, rx417_done
    set rx417_off, 0
    lt rx417_pos, 2, rx417_start
    sub rx417_off, rx417_pos, 1
    substr rx417_tgt, rx417_tgt, rx417_off
  rx417_start:
    eq $I10, 1, rx417_restart
    if_null rx417_debug, debug_580
    rx417_cur."!cursor_debug"("START", "statement_mod_cond:sym<if>")
  debug_580:
    $I10 = self.'from'()
    ne $I10, -1, rxscan421_done
    goto rxscan421_scan
  rxscan421_loop:
    (rx417_pos) = rx417_cur."from"()
    inc rx417_pos
    rx417_cur."!cursor_from"(rx417_pos)
    ge rx417_pos, rx417_eos, rxscan421_done
  rxscan421_scan:
    set_addr $I10, rxscan421_loop
    rx417_cur."!mark_push"(0, rx417_pos, $I10)
  rxscan421_done:
.annotate 'line', 245
  # rx subcapture "sym"
    set_addr $I10, rxcap_422_fail
    rx417_cur."!mark_push"(0, rx417_pos, $I10)
  # rx literal  "if"
    add $I11, rx417_pos, 2
    gt $I11, rx417_eos, rx417_fail
    sub $I11, rx417_pos, rx417_off
    substr $S10, rx417_tgt, $I11, 2
    ne $S10, "if", rx417_fail
    add rx417_pos, 2
    set_addr $I10, rxcap_422_fail
    ($I12, $I11) = rx417_cur."!mark_peek"($I10)
    rx417_cur."!cursor_pos"($I11)
    ($P10) = rx417_cur."!cursor_start"()
    $P10."!cursor_pass"(rx417_pos, "")
    rx417_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_422_done
  rxcap_422_fail:
    goto rx417_fail
  rxcap_422_done:
  # rx subrule "ws" subtype=method negate=
    rx417_cur."!cursor_pos"(rx417_pos)
    $P10 = rx417_cur."ws"()
    unless $P10, rx417_fail
    rx417_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx417_cur."!cursor_pos"(rx417_pos)
    $P10 = rx417_cur."EXPR"()
    unless $P10, rx417_fail
    rx417_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx417_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx417_cur."!cursor_pos"(rx417_pos)
    $P10 = rx417_cur."ws"()
    unless $P10, rx417_fail
    rx417_pos = $P10."pos"()
  # rx pass
    rx417_cur."!cursor_pass"(rx417_pos, "statement_mod_cond:sym<if>")
    if_null rx417_debug, debug_581
    rx417_cur."!cursor_debug"("PASS", "statement_mod_cond:sym<if>", " at pos=", rx417_pos)
  debug_581:
    .return (rx417_cur)
  rx417_restart:
.annotate 'line', 4
    if_null rx417_debug, debug_582
    rx417_cur."!cursor_debug"("NEXT", "statement_mod_cond:sym<if>")
  debug_582:
  rx417_fail:
    (rx417_rep, rx417_pos, $I10, $P10) = rx417_cur."!mark_fail"(0)
    lt rx417_pos, -1, rx417_done
    eq rx417_pos, -1, rx417_fail
    jump $I10
  rx417_done:
    rx417_cur."!cursor_fail"()
    if_null rx417_debug, debug_583
    rx417_cur."!cursor_debug"("FAIL", "statement_mod_cond:sym<if>")
  debug_583:
    .return (rx417_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_cond:sym<if>"  :nsentry("!PREFIX__statement_mod_cond:sym<if>") :subid("90_1299591493.348") :method
.annotate 'line', 4
    $P419 = self."!PREFIX__!subrule"("ws", "if")
    new $P420, "ResizablePMCArray"
    push $P420, $P419
    .return ($P420)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_cond:sym<unless>"  :subid("91_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx426_tgt
    .local int rx426_pos
    .local int rx426_off
    .local int rx426_eos
    .local int rx426_rep
    .local pmc rx426_cur
    .local pmc rx426_debug
    (rx426_cur, rx426_pos, rx426_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx426_cur
    .local pmc match
    .lex "$/", match
    length rx426_eos, rx426_tgt
    gt rx426_pos, rx426_eos, rx426_done
    set rx426_off, 0
    lt rx426_pos, 2, rx426_start
    sub rx426_off, rx426_pos, 1
    substr rx426_tgt, rx426_tgt, rx426_off
  rx426_start:
    eq $I10, 1, rx426_restart
    if_null rx426_debug, debug_584
    rx426_cur."!cursor_debug"("START", "statement_mod_cond:sym<unless>")
  debug_584:
    $I10 = self.'from'()
    ne $I10, -1, rxscan430_done
    goto rxscan430_scan
  rxscan430_loop:
    (rx426_pos) = rx426_cur."from"()
    inc rx426_pos
    rx426_cur."!cursor_from"(rx426_pos)
    ge rx426_pos, rx426_eos, rxscan430_done
  rxscan430_scan:
    set_addr $I10, rxscan430_loop
    rx426_cur."!mark_push"(0, rx426_pos, $I10)
  rxscan430_done:
.annotate 'line', 246
  # rx subcapture "sym"
    set_addr $I10, rxcap_431_fail
    rx426_cur."!mark_push"(0, rx426_pos, $I10)
  # rx literal  "unless"
    add $I11, rx426_pos, 6
    gt $I11, rx426_eos, rx426_fail
    sub $I11, rx426_pos, rx426_off
    substr $S10, rx426_tgt, $I11, 6
    ne $S10, "unless", rx426_fail
    add rx426_pos, 6
    set_addr $I10, rxcap_431_fail
    ($I12, $I11) = rx426_cur."!mark_peek"($I10)
    rx426_cur."!cursor_pos"($I11)
    ($P10) = rx426_cur."!cursor_start"()
    $P10."!cursor_pass"(rx426_pos, "")
    rx426_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_431_done
  rxcap_431_fail:
    goto rx426_fail
  rxcap_431_done:
  # rx subrule "ws" subtype=method negate=
    rx426_cur."!cursor_pos"(rx426_pos)
    $P10 = rx426_cur."ws"()
    unless $P10, rx426_fail
    rx426_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx426_cur."!cursor_pos"(rx426_pos)
    $P10 = rx426_cur."EXPR"()
    unless $P10, rx426_fail
    rx426_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx426_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx426_cur."!cursor_pos"(rx426_pos)
    $P10 = rx426_cur."ws"()
    unless $P10, rx426_fail
    rx426_pos = $P10."pos"()
  # rx pass
    rx426_cur."!cursor_pass"(rx426_pos, "statement_mod_cond:sym<unless>")
    if_null rx426_debug, debug_585
    rx426_cur."!cursor_debug"("PASS", "statement_mod_cond:sym<unless>", " at pos=", rx426_pos)
  debug_585:
    .return (rx426_cur)
  rx426_restart:
.annotate 'line', 4
    if_null rx426_debug, debug_586
    rx426_cur."!cursor_debug"("NEXT", "statement_mod_cond:sym<unless>")
  debug_586:
  rx426_fail:
    (rx426_rep, rx426_pos, $I10, $P10) = rx426_cur."!mark_fail"(0)
    lt rx426_pos, -1, rx426_done
    eq rx426_pos, -1, rx426_fail
    jump $I10
  rx426_done:
    rx426_cur."!cursor_fail"()
    if_null rx426_debug, debug_587
    rx426_cur."!cursor_debug"("FAIL", "statement_mod_cond:sym<unless>")
  debug_587:
    .return (rx426_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_cond:sym<unless>"  :nsentry("!PREFIX__statement_mod_cond:sym<unless>") :subid("92_1299591493.348") :method
.annotate 'line', 4
    $P428 = self."!PREFIX__!subrule"("ws", "unless")
    new $P429, "ResizablePMCArray"
    push $P429, $P428
    .return ($P429)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop"  :subid("93_1299591493.348")
    .param pmc param_435
.annotate 'line', 248
    .lex "self", param_435
    $P436 = param_435."!protoregex"("statement_mod_loop")
    .return ($P436)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_loop"  :subid("94_1299591493.348")
    .param pmc param_438
.annotate 'line', 248
    .lex "self", param_438
    $P439 = param_438."!PREFIX__!protoregex"("statement_mod_loop")
    .return ($P439)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop:sym<while>"  :subid("95_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx441_tgt
    .local int rx441_pos
    .local int rx441_off
    .local int rx441_eos
    .local int rx441_rep
    .local pmc rx441_cur
    .local pmc rx441_debug
    (rx441_cur, rx441_pos, rx441_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx441_cur
    .local pmc match
    .lex "$/", match
    length rx441_eos, rx441_tgt
    gt rx441_pos, rx441_eos, rx441_done
    set rx441_off, 0
    lt rx441_pos, 2, rx441_start
    sub rx441_off, rx441_pos, 1
    substr rx441_tgt, rx441_tgt, rx441_off
  rx441_start:
    eq $I10, 1, rx441_restart
    if_null rx441_debug, debug_588
    rx441_cur."!cursor_debug"("START", "statement_mod_loop:sym<while>")
  debug_588:
    $I10 = self.'from'()
    ne $I10, -1, rxscan445_done
    goto rxscan445_scan
  rxscan445_loop:
    (rx441_pos) = rx441_cur."from"()
    inc rx441_pos
    rx441_cur."!cursor_from"(rx441_pos)
    ge rx441_pos, rx441_eos, rxscan445_done
  rxscan445_scan:
    set_addr $I10, rxscan445_loop
    rx441_cur."!mark_push"(0, rx441_pos, $I10)
  rxscan445_done:
.annotate 'line', 250
  # rx subcapture "sym"
    set_addr $I10, rxcap_446_fail
    rx441_cur."!mark_push"(0, rx441_pos, $I10)
  # rx literal  "while"
    add $I11, rx441_pos, 5
    gt $I11, rx441_eos, rx441_fail
    sub $I11, rx441_pos, rx441_off
    substr $S10, rx441_tgt, $I11, 5
    ne $S10, "while", rx441_fail
    add rx441_pos, 5
    set_addr $I10, rxcap_446_fail
    ($I12, $I11) = rx441_cur."!mark_peek"($I10)
    rx441_cur."!cursor_pos"($I11)
    ($P10) = rx441_cur."!cursor_start"()
    $P10."!cursor_pass"(rx441_pos, "")
    rx441_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_446_done
  rxcap_446_fail:
    goto rx441_fail
  rxcap_446_done:
  # rx subrule "ws" subtype=method negate=
    rx441_cur."!cursor_pos"(rx441_pos)
    $P10 = rx441_cur."ws"()
    unless $P10, rx441_fail
    rx441_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx441_cur."!cursor_pos"(rx441_pos)
    $P10 = rx441_cur."EXPR"()
    unless $P10, rx441_fail
    rx441_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx441_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx441_cur."!cursor_pos"(rx441_pos)
    $P10 = rx441_cur."ws"()
    unless $P10, rx441_fail
    rx441_pos = $P10."pos"()
  # rx pass
    rx441_cur."!cursor_pass"(rx441_pos, "statement_mod_loop:sym<while>")
    if_null rx441_debug, debug_589
    rx441_cur."!cursor_debug"("PASS", "statement_mod_loop:sym<while>", " at pos=", rx441_pos)
  debug_589:
    .return (rx441_cur)
  rx441_restart:
.annotate 'line', 4
    if_null rx441_debug, debug_590
    rx441_cur."!cursor_debug"("NEXT", "statement_mod_loop:sym<while>")
  debug_590:
  rx441_fail:
    (rx441_rep, rx441_pos, $I10, $P10) = rx441_cur."!mark_fail"(0)
    lt rx441_pos, -1, rx441_done
    eq rx441_pos, -1, rx441_fail
    jump $I10
  rx441_done:
    rx441_cur."!cursor_fail"()
    if_null rx441_debug, debug_591
    rx441_cur."!cursor_debug"("FAIL", "statement_mod_loop:sym<while>")
  debug_591:
    .return (rx441_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_loop:sym<while>"  :nsentry("!PREFIX__statement_mod_loop:sym<while>") :subid("96_1299591493.348") :method
.annotate 'line', 4
    $P443 = self."!PREFIX__!subrule"("ws", "while")
    new $P444, "ResizablePMCArray"
    push $P444, $P443
    .return ($P444)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop:sym<until>"  :subid("97_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx450_tgt
    .local int rx450_pos
    .local int rx450_off
    .local int rx450_eos
    .local int rx450_rep
    .local pmc rx450_cur
    .local pmc rx450_debug
    (rx450_cur, rx450_pos, rx450_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx450_cur
    .local pmc match
    .lex "$/", match
    length rx450_eos, rx450_tgt
    gt rx450_pos, rx450_eos, rx450_done
    set rx450_off, 0
    lt rx450_pos, 2, rx450_start
    sub rx450_off, rx450_pos, 1
    substr rx450_tgt, rx450_tgt, rx450_off
  rx450_start:
    eq $I10, 1, rx450_restart
    if_null rx450_debug, debug_592
    rx450_cur."!cursor_debug"("START", "statement_mod_loop:sym<until>")
  debug_592:
    $I10 = self.'from'()
    ne $I10, -1, rxscan454_done
    goto rxscan454_scan
  rxscan454_loop:
    (rx450_pos) = rx450_cur."from"()
    inc rx450_pos
    rx450_cur."!cursor_from"(rx450_pos)
    ge rx450_pos, rx450_eos, rxscan454_done
  rxscan454_scan:
    set_addr $I10, rxscan454_loop
    rx450_cur."!mark_push"(0, rx450_pos, $I10)
  rxscan454_done:
.annotate 'line', 251
  # rx subcapture "sym"
    set_addr $I10, rxcap_455_fail
    rx450_cur."!mark_push"(0, rx450_pos, $I10)
  # rx literal  "until"
    add $I11, rx450_pos, 5
    gt $I11, rx450_eos, rx450_fail
    sub $I11, rx450_pos, rx450_off
    substr $S10, rx450_tgt, $I11, 5
    ne $S10, "until", rx450_fail
    add rx450_pos, 5
    set_addr $I10, rxcap_455_fail
    ($I12, $I11) = rx450_cur."!mark_peek"($I10)
    rx450_cur."!cursor_pos"($I11)
    ($P10) = rx450_cur."!cursor_start"()
    $P10."!cursor_pass"(rx450_pos, "")
    rx450_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_455_done
  rxcap_455_fail:
    goto rx450_fail
  rxcap_455_done:
  # rx subrule "ws" subtype=method negate=
    rx450_cur."!cursor_pos"(rx450_pos)
    $P10 = rx450_cur."ws"()
    unless $P10, rx450_fail
    rx450_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx450_cur."!cursor_pos"(rx450_pos)
    $P10 = rx450_cur."EXPR"()
    unless $P10, rx450_fail
    rx450_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx450_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx450_cur."!cursor_pos"(rx450_pos)
    $P10 = rx450_cur."ws"()
    unless $P10, rx450_fail
    rx450_pos = $P10."pos"()
  # rx pass
    rx450_cur."!cursor_pass"(rx450_pos, "statement_mod_loop:sym<until>")
    if_null rx450_debug, debug_593
    rx450_cur."!cursor_debug"("PASS", "statement_mod_loop:sym<until>", " at pos=", rx450_pos)
  debug_593:
    .return (rx450_cur)
  rx450_restart:
.annotate 'line', 4
    if_null rx450_debug, debug_594
    rx450_cur."!cursor_debug"("NEXT", "statement_mod_loop:sym<until>")
  debug_594:
  rx450_fail:
    (rx450_rep, rx450_pos, $I10, $P10) = rx450_cur."!mark_fail"(0)
    lt rx450_pos, -1, rx450_done
    eq rx450_pos, -1, rx450_fail
    jump $I10
  rx450_done:
    rx450_cur."!cursor_fail"()
    if_null rx450_debug, debug_595
    rx450_cur."!cursor_debug"("FAIL", "statement_mod_loop:sym<until>")
  debug_595:
    .return (rx450_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_loop:sym<until>"  :nsentry("!PREFIX__statement_mod_loop:sym<until>") :subid("98_1299591493.348") :method
.annotate 'line', 4
    $P452 = self."!PREFIX__!subrule"("ws", "until")
    new $P453, "ResizablePMCArray"
    push $P453, $P452
    .return ($P453)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop:sym<for>"  :subid("99_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx459_tgt
    .local int rx459_pos
    .local int rx459_off
    .local int rx459_eos
    .local int rx459_rep
    .local pmc rx459_cur
    .local pmc rx459_debug
    (rx459_cur, rx459_pos, rx459_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx459_cur
    .local pmc match
    .lex "$/", match
    length rx459_eos, rx459_tgt
    gt rx459_pos, rx459_eos, rx459_done
    set rx459_off, 0
    lt rx459_pos, 2, rx459_start
    sub rx459_off, rx459_pos, 1
    substr rx459_tgt, rx459_tgt, rx459_off
  rx459_start:
    eq $I10, 1, rx459_restart
    if_null rx459_debug, debug_596
    rx459_cur."!cursor_debug"("START", "statement_mod_loop:sym<for>")
  debug_596:
    $I10 = self.'from'()
    ne $I10, -1, rxscan463_done
    goto rxscan463_scan
  rxscan463_loop:
    (rx459_pos) = rx459_cur."from"()
    inc rx459_pos
    rx459_cur."!cursor_from"(rx459_pos)
    ge rx459_pos, rx459_eos, rxscan463_done
  rxscan463_scan:
    set_addr $I10, rxscan463_loop
    rx459_cur."!mark_push"(0, rx459_pos, $I10)
  rxscan463_done:
.annotate 'line', 252
  # rx subcapture "sym"
    set_addr $I10, rxcap_464_fail
    rx459_cur."!mark_push"(0, rx459_pos, $I10)
  # rx literal  "for"
    add $I11, rx459_pos, 3
    gt $I11, rx459_eos, rx459_fail
    sub $I11, rx459_pos, rx459_off
    substr $S10, rx459_tgt, $I11, 3
    ne $S10, "for", rx459_fail
    add rx459_pos, 3
    set_addr $I10, rxcap_464_fail
    ($I12, $I11) = rx459_cur."!mark_peek"($I10)
    rx459_cur."!cursor_pos"($I11)
    ($P10) = rx459_cur."!cursor_start"()
    $P10."!cursor_pass"(rx459_pos, "")
    rx459_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_464_done
  rxcap_464_fail:
    goto rx459_fail
  rxcap_464_done:
  # rx subrule "ws" subtype=method negate=
    rx459_cur."!cursor_pos"(rx459_pos)
    $P10 = rx459_cur."ws"()
    unless $P10, rx459_fail
    rx459_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx459_cur."!cursor_pos"(rx459_pos)
    $P10 = rx459_cur."EXPR"()
    unless $P10, rx459_fail
    rx459_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx459_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx459_cur."!cursor_pos"(rx459_pos)
    $P10 = rx459_cur."ws"()
    unless $P10, rx459_fail
    rx459_pos = $P10."pos"()
  # rx pass
    rx459_cur."!cursor_pass"(rx459_pos, "statement_mod_loop:sym<for>")
    if_null rx459_debug, debug_597
    rx459_cur."!cursor_debug"("PASS", "statement_mod_loop:sym<for>", " at pos=", rx459_pos)
  debug_597:
    .return (rx459_cur)
  rx459_restart:
.annotate 'line', 4
    if_null rx459_debug, debug_598
    rx459_cur."!cursor_debug"("NEXT", "statement_mod_loop:sym<for>")
  debug_598:
  rx459_fail:
    (rx459_rep, rx459_pos, $I10, $P10) = rx459_cur."!mark_fail"(0)
    lt rx459_pos, -1, rx459_done
    eq rx459_pos, -1, rx459_fail
    jump $I10
  rx459_done:
    rx459_cur."!cursor_fail"()
    if_null rx459_debug, debug_599
    rx459_cur."!cursor_debug"("FAIL", "statement_mod_loop:sym<for>")
  debug_599:
    .return (rx459_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_loop:sym<for>"  :nsentry("!PREFIX__statement_mod_loop:sym<for>") :subid("100_1299591493.348") :method
.annotate 'line', 4
    $P461 = self."!PREFIX__!subrule"("ws", "for")
    new $P462, "ResizablePMCArray"
    push $P462, $P461
    .return ($P462)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<fatarrow>"  :subid("101_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx468_tgt
    .local int rx468_pos
    .local int rx468_off
    .local int rx468_eos
    .local int rx468_rep
    .local pmc rx468_cur
    .local pmc rx468_debug
    (rx468_cur, rx468_pos, rx468_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx468_cur
    .local pmc match
    .lex "$/", match
    length rx468_eos, rx468_tgt
    gt rx468_pos, rx468_eos, rx468_done
    set rx468_off, 0
    lt rx468_pos, 2, rx468_start
    sub rx468_off, rx468_pos, 1
    substr rx468_tgt, rx468_tgt, rx468_off
  rx468_start:
    eq $I10, 1, rx468_restart
    if_null rx468_debug, debug_600
    rx468_cur."!cursor_debug"("START", "term:sym<fatarrow>")
  debug_600:
    $I10 = self.'from'()
    ne $I10, -1, rxscan472_done
    goto rxscan472_scan
  rxscan472_loop:
    (rx468_pos) = rx468_cur."from"()
    inc rx468_pos
    rx468_cur."!cursor_from"(rx468_pos)
    ge rx468_pos, rx468_eos, rxscan472_done
  rxscan472_scan:
    set_addr $I10, rxscan472_loop
    rx468_cur."!mark_push"(0, rx468_pos, $I10)
  rxscan472_done:
.annotate 'line', 256
  # rx subrule "fatarrow" subtype=capture negate=
    rx468_cur."!cursor_pos"(rx468_pos)
    $P10 = rx468_cur."fatarrow"()
    unless $P10, rx468_fail
    rx468_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("fatarrow")
    rx468_pos = $P10."pos"()
  # rx pass
    rx468_cur."!cursor_pass"(rx468_pos, "term:sym<fatarrow>")
    if_null rx468_debug, debug_601
    rx468_cur."!cursor_debug"("PASS", "term:sym<fatarrow>", " at pos=", rx468_pos)
  debug_601:
    .return (rx468_cur)
  rx468_restart:
.annotate 'line', 4
    if_null rx468_debug, debug_602
    rx468_cur."!cursor_debug"("NEXT", "term:sym<fatarrow>")
  debug_602:
  rx468_fail:
    (rx468_rep, rx468_pos, $I10, $P10) = rx468_cur."!mark_fail"(0)
    lt rx468_pos, -1, rx468_done
    eq rx468_pos, -1, rx468_fail
    jump $I10
  rx468_done:
    rx468_cur."!cursor_fail"()
    if_null rx468_debug, debug_603
    rx468_cur."!cursor_debug"("FAIL", "term:sym<fatarrow>")
  debug_603:
    .return (rx468_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<fatarrow>"  :nsentry("!PREFIX__term:sym<fatarrow>") :subid("102_1299591493.348") :method
.annotate 'line', 4
    $P470 = self."!PREFIX__!subrule"("fatarrow", "")
    new $P471, "ResizablePMCArray"
    push $P471, $P470
    .return ($P471)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<colonpair>"  :subid("103_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx474_tgt
    .local int rx474_pos
    .local int rx474_off
    .local int rx474_eos
    .local int rx474_rep
    .local pmc rx474_cur
    .local pmc rx474_debug
    (rx474_cur, rx474_pos, rx474_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx474_cur
    .local pmc match
    .lex "$/", match
    length rx474_eos, rx474_tgt
    gt rx474_pos, rx474_eos, rx474_done
    set rx474_off, 0
    lt rx474_pos, 2, rx474_start
    sub rx474_off, rx474_pos, 1
    substr rx474_tgt, rx474_tgt, rx474_off
  rx474_start:
    eq $I10, 1, rx474_restart
    if_null rx474_debug, debug_604
    rx474_cur."!cursor_debug"("START", "term:sym<colonpair>")
  debug_604:
    $I10 = self.'from'()
    ne $I10, -1, rxscan478_done
    goto rxscan478_scan
  rxscan478_loop:
    (rx474_pos) = rx474_cur."from"()
    inc rx474_pos
    rx474_cur."!cursor_from"(rx474_pos)
    ge rx474_pos, rx474_eos, rxscan478_done
  rxscan478_scan:
    set_addr $I10, rxscan478_loop
    rx474_cur."!mark_push"(0, rx474_pos, $I10)
  rxscan478_done:
.annotate 'line', 257
  # rx subrule "colonpair" subtype=capture negate=
    rx474_cur."!cursor_pos"(rx474_pos)
    $P10 = rx474_cur."colonpair"()
    unless $P10, rx474_fail
    rx474_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("colonpair")
    rx474_pos = $P10."pos"()
  # rx pass
    rx474_cur."!cursor_pass"(rx474_pos, "term:sym<colonpair>")
    if_null rx474_debug, debug_605
    rx474_cur."!cursor_debug"("PASS", "term:sym<colonpair>", " at pos=", rx474_pos)
  debug_605:
    .return (rx474_cur)
  rx474_restart:
.annotate 'line', 4
    if_null rx474_debug, debug_606
    rx474_cur."!cursor_debug"("NEXT", "term:sym<colonpair>")
  debug_606:
  rx474_fail:
    (rx474_rep, rx474_pos, $I10, $P10) = rx474_cur."!mark_fail"(0)
    lt rx474_pos, -1, rx474_done
    eq rx474_pos, -1, rx474_fail
    jump $I10
  rx474_done:
    rx474_cur."!cursor_fail"()
    if_null rx474_debug, debug_607
    rx474_cur."!cursor_debug"("FAIL", "term:sym<colonpair>")
  debug_607:
    .return (rx474_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<colonpair>"  :nsentry("!PREFIX__term:sym<colonpair>") :subid("104_1299591493.348") :method
.annotate 'line', 4
    $P476 = self."!PREFIX__!subrule"("colonpair", "")
    new $P477, "ResizablePMCArray"
    push $P477, $P476
    .return ($P477)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<variable>"  :subid("105_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx480_tgt
    .local int rx480_pos
    .local int rx480_off
    .local int rx480_eos
    .local int rx480_rep
    .local pmc rx480_cur
    .local pmc rx480_debug
    (rx480_cur, rx480_pos, rx480_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx480_cur
    .local pmc match
    .lex "$/", match
    length rx480_eos, rx480_tgt
    gt rx480_pos, rx480_eos, rx480_done
    set rx480_off, 0
    lt rx480_pos, 2, rx480_start
    sub rx480_off, rx480_pos, 1
    substr rx480_tgt, rx480_tgt, rx480_off
  rx480_start:
    eq $I10, 1, rx480_restart
    if_null rx480_debug, debug_608
    rx480_cur."!cursor_debug"("START", "term:sym<variable>")
  debug_608:
    $I10 = self.'from'()
    ne $I10, -1, rxscan484_done
    goto rxscan484_scan
  rxscan484_loop:
    (rx480_pos) = rx480_cur."from"()
    inc rx480_pos
    rx480_cur."!cursor_from"(rx480_pos)
    ge rx480_pos, rx480_eos, rxscan484_done
  rxscan484_scan:
    set_addr $I10, rxscan484_loop
    rx480_cur."!mark_push"(0, rx480_pos, $I10)
  rxscan484_done:
.annotate 'line', 258
  # rx subrule "variable" subtype=capture negate=
    rx480_cur."!cursor_pos"(rx480_pos)
    $P10 = rx480_cur."variable"()
    unless $P10, rx480_fail
    rx480_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable")
    rx480_pos = $P10."pos"()
  # rx pass
    rx480_cur."!cursor_pass"(rx480_pos, "term:sym<variable>")
    if_null rx480_debug, debug_609
    rx480_cur."!cursor_debug"("PASS", "term:sym<variable>", " at pos=", rx480_pos)
  debug_609:
    .return (rx480_cur)
  rx480_restart:
.annotate 'line', 4
    if_null rx480_debug, debug_610
    rx480_cur."!cursor_debug"("NEXT", "term:sym<variable>")
  debug_610:
  rx480_fail:
    (rx480_rep, rx480_pos, $I10, $P10) = rx480_cur."!mark_fail"(0)
    lt rx480_pos, -1, rx480_done
    eq rx480_pos, -1, rx480_fail
    jump $I10
  rx480_done:
    rx480_cur."!cursor_fail"()
    if_null rx480_debug, debug_611
    rx480_cur."!cursor_debug"("FAIL", "term:sym<variable>")
  debug_611:
    .return (rx480_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<variable>"  :nsentry("!PREFIX__term:sym<variable>") :subid("106_1299591493.348") :method
.annotate 'line', 4
    $P482 = self."!PREFIX__!subrule"("variable", "")
    new $P483, "ResizablePMCArray"
    push $P483, $P482
    .return ($P483)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<package_declarator>"  :subid("107_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx486_tgt
    .local int rx486_pos
    .local int rx486_off
    .local int rx486_eos
    .local int rx486_rep
    .local pmc rx486_cur
    .local pmc rx486_debug
    (rx486_cur, rx486_pos, rx486_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx486_cur
    .local pmc match
    .lex "$/", match
    length rx486_eos, rx486_tgt
    gt rx486_pos, rx486_eos, rx486_done
    set rx486_off, 0
    lt rx486_pos, 2, rx486_start
    sub rx486_off, rx486_pos, 1
    substr rx486_tgt, rx486_tgt, rx486_off
  rx486_start:
    eq $I10, 1, rx486_restart
    if_null rx486_debug, debug_612
    rx486_cur."!cursor_debug"("START", "term:sym<package_declarator>")
  debug_612:
    $I10 = self.'from'()
    ne $I10, -1, rxscan490_done
    goto rxscan490_scan
  rxscan490_loop:
    (rx486_pos) = rx486_cur."from"()
    inc rx486_pos
    rx486_cur."!cursor_from"(rx486_pos)
    ge rx486_pos, rx486_eos, rxscan490_done
  rxscan490_scan:
    set_addr $I10, rxscan490_loop
    rx486_cur."!mark_push"(0, rx486_pos, $I10)
  rxscan490_done:
.annotate 'line', 259
  # rx subrule "package_declarator" subtype=capture negate=
    rx486_cur."!cursor_pos"(rx486_pos)
    $P10 = rx486_cur."package_declarator"()
    unless $P10, rx486_fail
    rx486_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_declarator")
    rx486_pos = $P10."pos"()
  # rx pass
    rx486_cur."!cursor_pass"(rx486_pos, "term:sym<package_declarator>")
    if_null rx486_debug, debug_613
    rx486_cur."!cursor_debug"("PASS", "term:sym<package_declarator>", " at pos=", rx486_pos)
  debug_613:
    .return (rx486_cur)
  rx486_restart:
.annotate 'line', 4
    if_null rx486_debug, debug_614
    rx486_cur."!cursor_debug"("NEXT", "term:sym<package_declarator>")
  debug_614:
  rx486_fail:
    (rx486_rep, rx486_pos, $I10, $P10) = rx486_cur."!mark_fail"(0)
    lt rx486_pos, -1, rx486_done
    eq rx486_pos, -1, rx486_fail
    jump $I10
  rx486_done:
    rx486_cur."!cursor_fail"()
    if_null rx486_debug, debug_615
    rx486_cur."!cursor_debug"("FAIL", "term:sym<package_declarator>")
  debug_615:
    .return (rx486_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<package_declarator>"  :nsentry("!PREFIX__term:sym<package_declarator>") :subid("108_1299591493.348") :method
.annotate 'line', 4
    $P488 = self."!PREFIX__!subrule"("package_declarator", "")
    new $P489, "ResizablePMCArray"
    push $P489, $P488
    .return ($P489)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<scope_declarator>"  :subid("109_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx492_tgt
    .local int rx492_pos
    .local int rx492_off
    .local int rx492_eos
    .local int rx492_rep
    .local pmc rx492_cur
    .local pmc rx492_debug
    (rx492_cur, rx492_pos, rx492_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx492_cur
    .local pmc match
    .lex "$/", match
    length rx492_eos, rx492_tgt
    gt rx492_pos, rx492_eos, rx492_done
    set rx492_off, 0
    lt rx492_pos, 2, rx492_start
    sub rx492_off, rx492_pos, 1
    substr rx492_tgt, rx492_tgt, rx492_off
  rx492_start:
    eq $I10, 1, rx492_restart
    if_null rx492_debug, debug_616
    rx492_cur."!cursor_debug"("START", "term:sym<scope_declarator>")
  debug_616:
    $I10 = self.'from'()
    ne $I10, -1, rxscan496_done
    goto rxscan496_scan
  rxscan496_loop:
    (rx492_pos) = rx492_cur."from"()
    inc rx492_pos
    rx492_cur."!cursor_from"(rx492_pos)
    ge rx492_pos, rx492_eos, rxscan496_done
  rxscan496_scan:
    set_addr $I10, rxscan496_loop
    rx492_cur."!mark_push"(0, rx492_pos, $I10)
  rxscan496_done:
.annotate 'line', 260
  # rx subrule "scope_declarator" subtype=capture negate=
    rx492_cur."!cursor_pos"(rx492_pos)
    $P10 = rx492_cur."scope_declarator"()
    unless $P10, rx492_fail
    rx492_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("scope_declarator")
    rx492_pos = $P10."pos"()
  # rx pass
    rx492_cur."!cursor_pass"(rx492_pos, "term:sym<scope_declarator>")
    if_null rx492_debug, debug_617
    rx492_cur."!cursor_debug"("PASS", "term:sym<scope_declarator>", " at pos=", rx492_pos)
  debug_617:
    .return (rx492_cur)
  rx492_restart:
.annotate 'line', 4
    if_null rx492_debug, debug_618
    rx492_cur."!cursor_debug"("NEXT", "term:sym<scope_declarator>")
  debug_618:
  rx492_fail:
    (rx492_rep, rx492_pos, $I10, $P10) = rx492_cur."!mark_fail"(0)
    lt rx492_pos, -1, rx492_done
    eq rx492_pos, -1, rx492_fail
    jump $I10
  rx492_done:
    rx492_cur."!cursor_fail"()
    if_null rx492_debug, debug_619
    rx492_cur."!cursor_debug"("FAIL", "term:sym<scope_declarator>")
  debug_619:
    .return (rx492_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<scope_declarator>"  :nsentry("!PREFIX__term:sym<scope_declarator>") :subid("110_1299591493.348") :method
.annotate 'line', 4
    $P494 = self."!PREFIX__!subrule"("scope_declarator", "")
    new $P495, "ResizablePMCArray"
    push $P495, $P494
    .return ($P495)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<routine_declarator>"  :subid("111_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx498_tgt
    .local int rx498_pos
    .local int rx498_off
    .local int rx498_eos
    .local int rx498_rep
    .local pmc rx498_cur
    .local pmc rx498_debug
    (rx498_cur, rx498_pos, rx498_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx498_cur
    .local pmc match
    .lex "$/", match
    length rx498_eos, rx498_tgt
    gt rx498_pos, rx498_eos, rx498_done
    set rx498_off, 0
    lt rx498_pos, 2, rx498_start
    sub rx498_off, rx498_pos, 1
    substr rx498_tgt, rx498_tgt, rx498_off
  rx498_start:
    eq $I10, 1, rx498_restart
    if_null rx498_debug, debug_620
    rx498_cur."!cursor_debug"("START", "term:sym<routine_declarator>")
  debug_620:
    $I10 = self.'from'()
    ne $I10, -1, rxscan502_done
    goto rxscan502_scan
  rxscan502_loop:
    (rx498_pos) = rx498_cur."from"()
    inc rx498_pos
    rx498_cur."!cursor_from"(rx498_pos)
    ge rx498_pos, rx498_eos, rxscan502_done
  rxscan502_scan:
    set_addr $I10, rxscan502_loop
    rx498_cur."!mark_push"(0, rx498_pos, $I10)
  rxscan502_done:
.annotate 'line', 261
  # rx subrule "routine_declarator" subtype=capture negate=
    rx498_cur."!cursor_pos"(rx498_pos)
    $P10 = rx498_cur."routine_declarator"()
    unless $P10, rx498_fail
    rx498_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_declarator")
    rx498_pos = $P10."pos"()
  # rx pass
    rx498_cur."!cursor_pass"(rx498_pos, "term:sym<routine_declarator>")
    if_null rx498_debug, debug_621
    rx498_cur."!cursor_debug"("PASS", "term:sym<routine_declarator>", " at pos=", rx498_pos)
  debug_621:
    .return (rx498_cur)
  rx498_restart:
.annotate 'line', 4
    if_null rx498_debug, debug_622
    rx498_cur."!cursor_debug"("NEXT", "term:sym<routine_declarator>")
  debug_622:
  rx498_fail:
    (rx498_rep, rx498_pos, $I10, $P10) = rx498_cur."!mark_fail"(0)
    lt rx498_pos, -1, rx498_done
    eq rx498_pos, -1, rx498_fail
    jump $I10
  rx498_done:
    rx498_cur."!cursor_fail"()
    if_null rx498_debug, debug_623
    rx498_cur."!cursor_debug"("FAIL", "term:sym<routine_declarator>")
  debug_623:
    .return (rx498_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<routine_declarator>"  :nsentry("!PREFIX__term:sym<routine_declarator>") :subid("112_1299591493.348") :method
.annotate 'line', 4
    $P500 = self."!PREFIX__!subrule"("routine_declarator", "")
    new $P501, "ResizablePMCArray"
    push $P501, $P500
    .return ($P501)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<multi_declarator>"  :subid("113_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .const 'Sub' $P514 = "116_1299591493.348" 
    capture_lex $P514
    .const 'Sub' $P509 = "115_1299591493.348" 
    capture_lex $P509
    .local string rx504_tgt
    .local int rx504_pos
    .local int rx504_off
    .local int rx504_eos
    .local int rx504_rep
    .local pmc rx504_cur
    .local pmc rx504_debug
    (rx504_cur, rx504_pos, rx504_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx504_cur
    .local pmc match
    .lex "$/", match
    length rx504_eos, rx504_tgt
    gt rx504_pos, rx504_eos, rx504_done
    set rx504_off, 0
    lt rx504_pos, 2, rx504_start
    sub rx504_off, rx504_pos, 1
    substr rx504_tgt, rx504_tgt, rx504_off
  rx504_start:
    eq $I10, 1, rx504_restart
    if_null rx504_debug, debug_624
    rx504_cur."!cursor_debug"("START", "term:sym<multi_declarator>")
  debug_624:
    $I10 = self.'from'()
    ne $I10, -1, rxscan507_done
    goto rxscan507_scan
  rxscan507_loop:
    (rx504_pos) = rx504_cur."from"()
    inc rx504_pos
    rx504_cur."!cursor_from"(rx504_pos)
    ge rx504_pos, rx504_eos, rxscan507_done
  rxscan507_scan:
    set_addr $I10, rxscan507_loop
    rx504_cur."!mark_push"(0, rx504_pos, $I10)
  rxscan507_done:
.annotate 'line', 263
  # rx subrule "before" subtype=zerowidth negate=
    rx504_cur."!cursor_pos"(rx504_pos)
    .const 'Sub' $P509 = "115_1299591493.348" 
    capture_lex $P509
    $P10 = rx504_cur."before"($P509)
    unless $P10, rx504_fail
.annotate 'line', 264
  # rx subrule "before" subtype=zerowidth negate=1
    rx504_cur."!cursor_pos"(rx504_pos)
    .const 'Sub' $P514 = "116_1299591493.348" 
    capture_lex $P514
    $P10 = rx504_cur."before"($P514)
    if $P10, rx504_fail
.annotate 'line', 265
  # rx subrule "multi_declarator" subtype=capture negate=
    rx504_cur."!cursor_pos"(rx504_pos)
    $P10 = rx504_cur."multi_declarator"()
    unless $P10, rx504_fail
    rx504_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("multi_declarator")
    rx504_pos = $P10."pos"()
.annotate 'line', 262
  # rx pass
    rx504_cur."!cursor_pass"(rx504_pos, "term:sym<multi_declarator>")
    if_null rx504_debug, debug_633
    rx504_cur."!cursor_debug"("PASS", "term:sym<multi_declarator>", " at pos=", rx504_pos)
  debug_633:
    .return (rx504_cur)
  rx504_restart:
.annotate 'line', 4
    if_null rx504_debug, debug_634
    rx504_cur."!cursor_debug"("NEXT", "term:sym<multi_declarator>")
  debug_634:
  rx504_fail:
    (rx504_rep, rx504_pos, $I10, $P10) = rx504_cur."!mark_fail"(0)
    lt rx504_pos, -1, rx504_done
    eq rx504_pos, -1, rx504_fail
    jump $I10
  rx504_done:
    rx504_cur."!cursor_fail"()
    if_null rx504_debug, debug_635
    rx504_cur."!cursor_debug"("FAIL", "term:sym<multi_declarator>")
  debug_635:
    .return (rx504_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<multi_declarator>"  :nsentry("!PREFIX__term:sym<multi_declarator>") :subid("114_1299591493.348") :method
.annotate 'line', 4
    new $P506, "ResizablePMCArray"
    push $P506, ""
    .return ($P506)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block508"  :anon :subid("115_1299591493.348") :method :outer("113_1299591493.348")
.annotate 'line', 263
    .local string rx510_tgt
    .local int rx510_pos
    .local int rx510_off
    .local int rx510_eos
    .local int rx510_rep
    .local pmc rx510_cur
    .local pmc rx510_debug
    (rx510_cur, rx510_pos, rx510_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx510_cur
    .local pmc match
    .lex "$/", match
    length rx510_eos, rx510_tgt
    gt rx510_pos, rx510_eos, rx510_done
    set rx510_off, 0
    lt rx510_pos, 2, rx510_start
    sub rx510_off, rx510_pos, 1
    substr rx510_tgt, rx510_tgt, rx510_off
  rx510_start:
    eq $I10, 1, rx510_restart
    if_null rx510_debug, debug_625
    rx510_cur."!cursor_debug"("START", "")
  debug_625:
    $I10 = self.'from'()
    ne $I10, -1, rxscan511_done
    goto rxscan511_scan
  rxscan511_loop:
    (rx510_pos) = rx510_cur."from"()
    inc rx510_pos
    rx510_cur."!cursor_from"(rx510_pos)
    ge rx510_pos, rx510_eos, rxscan511_done
  rxscan511_scan:
    set_addr $I10, rxscan511_loop
    rx510_cur."!mark_push"(0, rx510_pos, $I10)
  rxscan511_done:
  alt512_0:
    set_addr $I10, alt512_1
    rx510_cur."!mark_push"(0, rx510_pos, $I10)
  # rx literal  "multi"
    add $I11, rx510_pos, 5
    gt $I11, rx510_eos, rx510_fail
    sub $I11, rx510_pos, rx510_off
    substr $S10, rx510_tgt, $I11, 5
    ne $S10, "multi", rx510_fail
    add rx510_pos, 5
    goto alt512_end
  alt512_1:
    set_addr $I10, alt512_2
    rx510_cur."!mark_push"(0, rx510_pos, $I10)
  # rx literal  "proto"
    add $I11, rx510_pos, 5
    gt $I11, rx510_eos, rx510_fail
    sub $I11, rx510_pos, rx510_off
    substr $S10, rx510_tgt, $I11, 5
    ne $S10, "proto", rx510_fail
    add rx510_pos, 5
    goto alt512_end
  alt512_2:
  # rx literal  "only"
    add $I11, rx510_pos, 4
    gt $I11, rx510_eos, rx510_fail
    sub $I11, rx510_pos, rx510_off
    substr $S10, rx510_tgt, $I11, 4
    ne $S10, "only", rx510_fail
    add rx510_pos, 4
  alt512_end:
  # rx pass
    rx510_cur."!cursor_pass"(rx510_pos, "")
    if_null rx510_debug, debug_626
    rx510_cur."!cursor_debug"("PASS", "", " at pos=", rx510_pos)
  debug_626:
    .return (rx510_cur)
  rx510_restart:
    if_null rx510_debug, debug_627
    rx510_cur."!cursor_debug"("NEXT", "")
  debug_627:
  rx510_fail:
    (rx510_rep, rx510_pos, $I10, $P10) = rx510_cur."!mark_fail"(0)
    lt rx510_pos, -1, rx510_done
    eq rx510_pos, -1, rx510_fail
    jump $I10
  rx510_done:
    rx510_cur."!cursor_fail"()
    if_null rx510_debug, debug_628
    rx510_cur."!cursor_debug"("FAIL", "")
  debug_628:
    .return (rx510_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block513"  :anon :subid("116_1299591493.348") :method :outer("113_1299591493.348")
.annotate 'line', 264
    .local string rx515_tgt
    .local int rx515_pos
    .local int rx515_off
    .local int rx515_eos
    .local int rx515_rep
    .local pmc rx515_cur
    .local pmc rx515_debug
    (rx515_cur, rx515_pos, rx515_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx515_cur
    .local pmc match
    .lex "$/", match
    length rx515_eos, rx515_tgt
    gt rx515_pos, rx515_eos, rx515_done
    set rx515_off, 0
    lt rx515_pos, 2, rx515_start
    sub rx515_off, rx515_pos, 1
    substr rx515_tgt, rx515_tgt, rx515_off
  rx515_start:
    eq $I10, 1, rx515_restart
    if_null rx515_debug, debug_629
    rx515_cur."!cursor_debug"("START", "")
  debug_629:
    $I10 = self.'from'()
    ne $I10, -1, rxscan516_done
    goto rxscan516_scan
  rxscan516_loop:
    (rx515_pos) = rx515_cur."from"()
    inc rx515_pos
    rx515_cur."!cursor_from"(rx515_pos)
    ge rx515_pos, rx515_eos, rxscan516_done
  rxscan516_scan:
    set_addr $I10, rxscan516_loop
    rx515_cur."!mark_push"(0, rx515_pos, $I10)
  rxscan516_done:
  # rx literal  "proto"
    add $I11, rx515_pos, 5
    gt $I11, rx515_eos, rx515_fail
    sub $I11, rx515_pos, rx515_off
    substr $S10, rx515_tgt, $I11, 5
    ne $S10, "proto", rx515_fail
    add rx515_pos, 5
  # rx subrule "ws" subtype=method negate=
    rx515_cur."!cursor_pos"(rx515_pos)
    $P10 = rx515_cur."ws"()
    unless $P10, rx515_fail
    rx515_pos = $P10."pos"()
  alt517_0:
    set_addr $I10, alt517_1
    rx515_cur."!mark_push"(0, rx515_pos, $I10)
  # rx literal  "regex"
    add $I11, rx515_pos, 5
    gt $I11, rx515_eos, rx515_fail
    sub $I11, rx515_pos, rx515_off
    substr $S10, rx515_tgt, $I11, 5
    ne $S10, "regex", rx515_fail
    add rx515_pos, 5
    goto alt517_end
  alt517_1:
    set_addr $I10, alt517_2
    rx515_cur."!mark_push"(0, rx515_pos, $I10)
  # rx literal  "token"
    add $I11, rx515_pos, 5
    gt $I11, rx515_eos, rx515_fail
    sub $I11, rx515_pos, rx515_off
    substr $S10, rx515_tgt, $I11, 5
    ne $S10, "token", rx515_fail
    add rx515_pos, 5
    goto alt517_end
  alt517_2:
  # rx literal  "rule"
    add $I11, rx515_pos, 4
    gt $I11, rx515_eos, rx515_fail
    sub $I11, rx515_pos, rx515_off
    substr $S10, rx515_tgt, $I11, 4
    ne $S10, "rule", rx515_fail
    add rx515_pos, 4
  alt517_end:
  # rx pass
    rx515_cur."!cursor_pass"(rx515_pos, "")
    if_null rx515_debug, debug_630
    rx515_cur."!cursor_debug"("PASS", "", " at pos=", rx515_pos)
  debug_630:
    .return (rx515_cur)
  rx515_restart:
    if_null rx515_debug, debug_631
    rx515_cur."!cursor_debug"("NEXT", "")
  debug_631:
  rx515_fail:
    (rx515_rep, rx515_pos, $I10, $P10) = rx515_cur."!mark_fail"(0)
    lt rx515_pos, -1, rx515_done
    eq rx515_pos, -1, rx515_fail
    jump $I10
  rx515_done:
    rx515_cur."!cursor_fail"()
    if_null rx515_debug, debug_632
    rx515_cur."!cursor_debug"("FAIL", "")
  debug_632:
    .return (rx515_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<regex_declarator>"  :subid("117_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx519_tgt
    .local int rx519_pos
    .local int rx519_off
    .local int rx519_eos
    .local int rx519_rep
    .local pmc rx519_cur
    .local pmc rx519_debug
    (rx519_cur, rx519_pos, rx519_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx519_cur
    .local pmc match
    .lex "$/", match
    length rx519_eos, rx519_tgt
    gt rx519_pos, rx519_eos, rx519_done
    set rx519_off, 0
    lt rx519_pos, 2, rx519_start
    sub rx519_off, rx519_pos, 1
    substr rx519_tgt, rx519_tgt, rx519_off
  rx519_start:
    eq $I10, 1, rx519_restart
    if_null rx519_debug, debug_636
    rx519_cur."!cursor_debug"("START", "term:sym<regex_declarator>")
  debug_636:
    $I10 = self.'from'()
    ne $I10, -1, rxscan523_done
    goto rxscan523_scan
  rxscan523_loop:
    (rx519_pos) = rx519_cur."from"()
    inc rx519_pos
    rx519_cur."!cursor_from"(rx519_pos)
    ge rx519_pos, rx519_eos, rxscan523_done
  rxscan523_scan:
    set_addr $I10, rxscan523_loop
    rx519_cur."!mark_push"(0, rx519_pos, $I10)
  rxscan523_done:
.annotate 'line', 267
  # rx subrule "regex_declarator" subtype=capture negate=
    rx519_cur."!cursor_pos"(rx519_pos)
    $P10 = rx519_cur."regex_declarator"()
    unless $P10, rx519_fail
    rx519_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("regex_declarator")
    rx519_pos = $P10."pos"()
  # rx pass
    rx519_cur."!cursor_pass"(rx519_pos, "term:sym<regex_declarator>")
    if_null rx519_debug, debug_637
    rx519_cur."!cursor_debug"("PASS", "term:sym<regex_declarator>", " at pos=", rx519_pos)
  debug_637:
    .return (rx519_cur)
  rx519_restart:
.annotate 'line', 4
    if_null rx519_debug, debug_638
    rx519_cur."!cursor_debug"("NEXT", "term:sym<regex_declarator>")
  debug_638:
  rx519_fail:
    (rx519_rep, rx519_pos, $I10, $P10) = rx519_cur."!mark_fail"(0)
    lt rx519_pos, -1, rx519_done
    eq rx519_pos, -1, rx519_fail
    jump $I10
  rx519_done:
    rx519_cur."!cursor_fail"()
    if_null rx519_debug, debug_639
    rx519_cur."!cursor_debug"("FAIL", "term:sym<regex_declarator>")
  debug_639:
    .return (rx519_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<regex_declarator>"  :nsentry("!PREFIX__term:sym<regex_declarator>") :subid("118_1299591493.348") :method
.annotate 'line', 4
    $P521 = self."!PREFIX__!subrule"("regex_declarator", "")
    new $P522, "ResizablePMCArray"
    push $P522, $P521
    .return ($P522)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<statement_prefix>"  :subid("119_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx525_tgt
    .local int rx525_pos
    .local int rx525_off
    .local int rx525_eos
    .local int rx525_rep
    .local pmc rx525_cur
    .local pmc rx525_debug
    (rx525_cur, rx525_pos, rx525_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx525_cur
    .local pmc match
    .lex "$/", match
    length rx525_eos, rx525_tgt
    gt rx525_pos, rx525_eos, rx525_done
    set rx525_off, 0
    lt rx525_pos, 2, rx525_start
    sub rx525_off, rx525_pos, 1
    substr rx525_tgt, rx525_tgt, rx525_off
  rx525_start:
    eq $I10, 1, rx525_restart
    if_null rx525_debug, debug_640
    rx525_cur."!cursor_debug"("START", "term:sym<statement_prefix>")
  debug_640:
    $I10 = self.'from'()
    ne $I10, -1, rxscan529_done
    goto rxscan529_scan
  rxscan529_loop:
    (rx525_pos) = rx525_cur."from"()
    inc rx525_pos
    rx525_cur."!cursor_from"(rx525_pos)
    ge rx525_pos, rx525_eos, rxscan529_done
  rxscan529_scan:
    set_addr $I10, rxscan529_loop
    rx525_cur."!mark_push"(0, rx525_pos, $I10)
  rxscan529_done:
.annotate 'line', 268
  # rx subrule "statement_prefix" subtype=capture negate=
    rx525_cur."!cursor_pos"(rx525_pos)
    $P10 = rx525_cur."statement_prefix"()
    unless $P10, rx525_fail
    rx525_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement_prefix")
    rx525_pos = $P10."pos"()
  # rx pass
    rx525_cur."!cursor_pass"(rx525_pos, "term:sym<statement_prefix>")
    if_null rx525_debug, debug_641
    rx525_cur."!cursor_debug"("PASS", "term:sym<statement_prefix>", " at pos=", rx525_pos)
  debug_641:
    .return (rx525_cur)
  rx525_restart:
.annotate 'line', 4
    if_null rx525_debug, debug_642
    rx525_cur."!cursor_debug"("NEXT", "term:sym<statement_prefix>")
  debug_642:
  rx525_fail:
    (rx525_rep, rx525_pos, $I10, $P10) = rx525_cur."!mark_fail"(0)
    lt rx525_pos, -1, rx525_done
    eq rx525_pos, -1, rx525_fail
    jump $I10
  rx525_done:
    rx525_cur."!cursor_fail"()
    if_null rx525_debug, debug_643
    rx525_cur."!cursor_debug"("FAIL", "term:sym<statement_prefix>")
  debug_643:
    .return (rx525_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<statement_prefix>"  :nsentry("!PREFIX__term:sym<statement_prefix>") :subid("120_1299591493.348") :method
.annotate 'line', 4
    $P527 = self."!PREFIX__!subrule"("statement_prefix", "")
    new $P528, "ResizablePMCArray"
    push $P528, $P527
    .return ($P528)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<lambda>"  :subid("121_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx531_tgt
    .local int rx531_pos
    .local int rx531_off
    .local int rx531_eos
    .local int rx531_rep
    .local pmc rx531_cur
    .local pmc rx531_debug
    (rx531_cur, rx531_pos, rx531_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx531_cur
    .local pmc match
    .lex "$/", match
    length rx531_eos, rx531_tgt
    gt rx531_pos, rx531_eos, rx531_done
    set rx531_off, 0
    lt rx531_pos, 2, rx531_start
    sub rx531_off, rx531_pos, 1
    substr rx531_tgt, rx531_tgt, rx531_off
  rx531_start:
    eq $I10, 1, rx531_restart
    if_null rx531_debug, debug_644
    rx531_cur."!cursor_debug"("START", "term:sym<lambda>")
  debug_644:
    $I10 = self.'from'()
    ne $I10, -1, rxscan534_done
    goto rxscan534_scan
  rxscan534_loop:
    (rx531_pos) = rx531_cur."from"()
    inc rx531_pos
    rx531_cur."!cursor_from"(rx531_pos)
    ge rx531_pos, rx531_eos, rxscan534_done
  rxscan534_scan:
    set_addr $I10, rxscan534_loop
    rx531_cur."!mark_push"(0, rx531_pos, $I10)
  rxscan534_done:
.annotate 'line', 269
  # rx subrule "lambda" subtype=zerowidth negate=
    rx531_cur."!cursor_pos"(rx531_pos)
    $P10 = rx531_cur."lambda"()
    unless $P10, rx531_fail
  # rx subrule "pblock" subtype=capture negate=
    rx531_cur."!cursor_pos"(rx531_pos)
    $P10 = rx531_cur."pblock"()
    unless $P10, rx531_fail
    rx531_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("pblock")
    rx531_pos = $P10."pos"()
  # rx pass
    rx531_cur."!cursor_pass"(rx531_pos, "term:sym<lambda>")
    if_null rx531_debug, debug_645
    rx531_cur."!cursor_debug"("PASS", "term:sym<lambda>", " at pos=", rx531_pos)
  debug_645:
    .return (rx531_cur)
  rx531_restart:
.annotate 'line', 4
    if_null rx531_debug, debug_646
    rx531_cur."!cursor_debug"("NEXT", "term:sym<lambda>")
  debug_646:
  rx531_fail:
    (rx531_rep, rx531_pos, $I10, $P10) = rx531_cur."!mark_fail"(0)
    lt rx531_pos, -1, rx531_done
    eq rx531_pos, -1, rx531_fail
    jump $I10
  rx531_done:
    rx531_cur."!cursor_fail"()
    if_null rx531_debug, debug_647
    rx531_cur."!cursor_debug"("FAIL", "term:sym<lambda>")
  debug_647:
    .return (rx531_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<lambda>"  :nsentry("!PREFIX__term:sym<lambda>") :subid("122_1299591493.348") :method
.annotate 'line', 4
    new $P533, "ResizablePMCArray"
    push $P533, ""
    .return ($P533)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "fatarrow"  :subid("123_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx536_tgt
    .local int rx536_pos
    .local int rx536_off
    .local int rx536_eos
    .local int rx536_rep
    .local pmc rx536_cur
    .local pmc rx536_debug
    (rx536_cur, rx536_pos, rx536_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx536_cur
    .local pmc match
    .lex "$/", match
    length rx536_eos, rx536_tgt
    gt rx536_pos, rx536_eos, rx536_done
    set rx536_off, 0
    lt rx536_pos, 2, rx536_start
    sub rx536_off, rx536_pos, 1
    substr rx536_tgt, rx536_tgt, rx536_off
  rx536_start:
    eq $I10, 1, rx536_restart
    if_null rx536_debug, debug_648
    rx536_cur."!cursor_debug"("START", "fatarrow")
  debug_648:
    $I10 = self.'from'()
    ne $I10, -1, rxscan540_done
    goto rxscan540_scan
  rxscan540_loop:
    (rx536_pos) = rx536_cur."from"()
    inc rx536_pos
    rx536_cur."!cursor_from"(rx536_pos)
    ge rx536_pos, rx536_eos, rxscan540_done
  rxscan540_scan:
    set_addr $I10, rxscan540_loop
    rx536_cur."!mark_push"(0, rx536_pos, $I10)
  rxscan540_done:
.annotate 'line', 272
  # rx subrule "identifier" subtype=capture negate=
    rx536_cur."!cursor_pos"(rx536_pos)
    $P10 = rx536_cur."identifier"()
    unless $P10, rx536_fail
    rx536_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("key")
    rx536_pos = $P10."pos"()
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx536_pos, rx536_off
    set rx536_rep, 0
    sub $I12, rx536_eos, rx536_pos
  rxenumcharlistq541_loop:
    le $I12, 0, rxenumcharlistq541_done
    substr $S10, rx536_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq541_done
    inc rx536_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq541_loop
  rxenumcharlistq541_done:
    add rx536_pos, rx536_pos, rx536_rep
  # rx literal  "=>"
    add $I11, rx536_pos, 2
    gt $I11, rx536_eos, rx536_fail
    sub $I11, rx536_pos, rx536_off
    substr $S10, rx536_tgt, $I11, 2
    ne $S10, "=>", rx536_fail
    add rx536_pos, 2
  # rx subrule "ws" subtype=method negate=
    rx536_cur."!cursor_pos"(rx536_pos)
    $P10 = rx536_cur."ws"()
    unless $P10, rx536_fail
    rx536_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx536_cur."!cursor_pos"(rx536_pos)
    $P10 = rx536_cur."EXPR"("i=")
    unless $P10, rx536_fail
    rx536_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("val")
    rx536_pos = $P10."pos"()
.annotate 'line', 271
  # rx pass
    rx536_cur."!cursor_pass"(rx536_pos, "fatarrow")
    if_null rx536_debug, debug_649
    rx536_cur."!cursor_debug"("PASS", "fatarrow", " at pos=", rx536_pos)
  debug_649:
    .return (rx536_cur)
  rx536_restart:
.annotate 'line', 4
    if_null rx536_debug, debug_650
    rx536_cur."!cursor_debug"("NEXT", "fatarrow")
  debug_650:
  rx536_fail:
    (rx536_rep, rx536_pos, $I10, $P10) = rx536_cur."!mark_fail"(0)
    lt rx536_pos, -1, rx536_done
    eq rx536_pos, -1, rx536_fail
    jump $I10
  rx536_done:
    rx536_cur."!cursor_fail"()
    if_null rx536_debug, debug_651
    rx536_cur."!cursor_debug"("FAIL", "fatarrow")
  debug_651:
    .return (rx536_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__fatarrow"  :nsentry("!PREFIX__fatarrow") :subid("124_1299591493.348") :method
.annotate 'line', 4
    $P538 = self."!PREFIX__!subrule"("identifier", "")
    new $P539, "ResizablePMCArray"
    push $P539, $P538
    .return ($P539)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "colonpair"  :subid("125_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx543_tgt
    .local int rx543_pos
    .local int rx543_off
    .local int rx543_eos
    .local int rx543_rep
    .local pmc rx543_cur
    .local pmc rx543_debug
    (rx543_cur, rx543_pos, rx543_tgt, $I10) = self."!cursor_start"()
    rx543_cur."!cursor_caparray"("circumfix")
    .lex unicode:"$\x{a2}", rx543_cur
    .local pmc match
    .lex "$/", match
    length rx543_eos, rx543_tgt
    gt rx543_pos, rx543_eos, rx543_done
    set rx543_off, 0
    lt rx543_pos, 2, rx543_start
    sub rx543_off, rx543_pos, 1
    substr rx543_tgt, rx543_tgt, rx543_off
  rx543_start:
    eq $I10, 1, rx543_restart
    if_null rx543_debug, debug_652
    rx543_cur."!cursor_debug"("START", "colonpair")
  debug_652:
    $I10 = self.'from'()
    ne $I10, -1, rxscan549_done
    goto rxscan549_scan
  rxscan549_loop:
    (rx543_pos) = rx543_cur."from"()
    inc rx543_pos
    rx543_cur."!cursor_from"(rx543_pos)
    ge rx543_pos, rx543_eos, rxscan549_done
  rxscan549_scan:
    set_addr $I10, rxscan549_loop
    rx543_cur."!mark_push"(0, rx543_pos, $I10)
  rxscan549_done:
.annotate 'line', 276
  # rx literal  ":"
    add $I11, rx543_pos, 1
    gt $I11, rx543_eos, rx543_fail
    sub $I11, rx543_pos, rx543_off
    ord $I11, rx543_tgt, $I11
    ne $I11, 58, rx543_fail
    add rx543_pos, 1
  alt550_0:
.annotate 'line', 277
    set_addr $I10, alt550_1
    rx543_cur."!mark_push"(0, rx543_pos, $I10)
.annotate 'line', 278
  # rx subcapture "not"
    set_addr $I10, rxcap_551_fail
    rx543_cur."!mark_push"(0, rx543_pos, $I10)
  # rx literal  "!"
    add $I11, rx543_pos, 1
    gt $I11, rx543_eos, rx543_fail
    sub $I11, rx543_pos, rx543_off
    ord $I11, rx543_tgt, $I11
    ne $I11, 33, rx543_fail
    add rx543_pos, 1
    set_addr $I10, rxcap_551_fail
    ($I12, $I11) = rx543_cur."!mark_peek"($I10)
    rx543_cur."!cursor_pos"($I11)
    ($P10) = rx543_cur."!cursor_start"()
    $P10."!cursor_pass"(rx543_pos, "")
    rx543_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("not")
    goto rxcap_551_done
  rxcap_551_fail:
    goto rx543_fail
  rxcap_551_done:
  # rx subrule "identifier" subtype=capture negate=
    rx543_cur."!cursor_pos"(rx543_pos)
    $P10 = rx543_cur."identifier"()
    unless $P10, rx543_fail
    rx543_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx543_pos = $P10."pos"()
    goto alt550_end
  alt550_1:
    set_addr $I10, alt550_2
    rx543_cur."!mark_push"(0, rx543_pos, $I10)
.annotate 'line', 279
  # rx subrule "identifier" subtype=capture negate=
    rx543_cur."!cursor_pos"(rx543_pos)
    $P10 = rx543_cur."identifier"()
    unless $P10, rx543_fail
    rx543_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx543_pos = $P10."pos"()
  # rx rxquantr552 ** 0..1
    set_addr $I10, rxquantr552_done
    rx543_cur."!mark_push"(0, rx543_pos, $I10)
  rxquantr552_loop:
  # rx subrule "circumfix" subtype=capture negate=
    rx543_cur."!cursor_pos"(rx543_pos)
    $P10 = rx543_cur."circumfix"()
    unless $P10, rx543_fail
    goto rxsubrule553_pass
  rxsubrule553_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx543_fail
  rxsubrule553_pass:
    set_addr $I10, rxsubrule553_back
    rx543_cur."!mark_push"(0, rx543_pos, $I10, $P10)
    $P10."!cursor_names"("circumfix")
    rx543_pos = $P10."pos"()
    set_addr $I10, rxquantr552_done
    (rx543_rep) = rx543_cur."!mark_commit"($I10)
  rxquantr552_done:
    goto alt550_end
  alt550_2:
.annotate 'line', 280
  # rx subrule "circumfix" subtype=capture negate=
    rx543_cur."!cursor_pos"(rx543_pos)
    $P10 = rx543_cur."circumfix"()
    unless $P10, rx543_fail
    rx543_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("circumfix")
    rx543_pos = $P10."pos"()
  alt550_end:
.annotate 'line', 275
  # rx pass
    rx543_cur."!cursor_pass"(rx543_pos, "colonpair")
    if_null rx543_debug, debug_653
    rx543_cur."!cursor_debug"("PASS", "colonpair", " at pos=", rx543_pos)
  debug_653:
    .return (rx543_cur)
  rx543_restart:
.annotate 'line', 4
    if_null rx543_debug, debug_654
    rx543_cur."!cursor_debug"("NEXT", "colonpair")
  debug_654:
  rx543_fail:
    (rx543_rep, rx543_pos, $I10, $P10) = rx543_cur."!mark_fail"(0)
    lt rx543_pos, -1, rx543_done
    eq rx543_pos, -1, rx543_fail
    jump $I10
  rx543_done:
    rx543_cur."!cursor_fail"()
    if_null rx543_debug, debug_655
    rx543_cur."!cursor_debug"("FAIL", "colonpair")
  debug_655:
    .return (rx543_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__colonpair"  :nsentry("!PREFIX__colonpair") :subid("126_1299591493.348") :method
.annotate 'line', 4
    $P545 = self."!PREFIX__!subrule"("circumfix", ":")
    $P546 = self."!PREFIX__!subrule"("identifier", ":")
    $P547 = self."!PREFIX__!subrule"("identifier", ":!")
    new $P548, "ResizablePMCArray"
    push $P548, $P545
    push $P548, $P546
    push $P548, $P547
    .return ($P548)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "variable"  :subid("127_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx555_tgt
    .local int rx555_pos
    .local int rx555_off
    .local int rx555_eos
    .local int rx555_rep
    .local pmc rx555_cur
    .local pmc rx555_debug
    (rx555_cur, rx555_pos, rx555_tgt, $I10) = self."!cursor_start"()
    rx555_cur."!cursor_caparray"("twigil")
    .lex unicode:"$\x{a2}", rx555_cur
    .local pmc match
    .lex "$/", match
    length rx555_eos, rx555_tgt
    gt rx555_pos, rx555_eos, rx555_done
    set rx555_off, 0
    lt rx555_pos, 2, rx555_start
    sub rx555_off, rx555_pos, 1
    substr rx555_tgt, rx555_tgt, rx555_off
  rx555_start:
    eq $I10, 1, rx555_restart
    if_null rx555_debug, debug_656
    rx555_cur."!cursor_debug"("START", "variable")
  debug_656:
    $I10 = self.'from'()
    ne $I10, -1, rxscan560_done
    goto rxscan560_scan
  rxscan560_loop:
    (rx555_pos) = rx555_cur."from"()
    inc rx555_pos
    rx555_cur."!cursor_from"(rx555_pos)
    ge rx555_pos, rx555_eos, rxscan560_done
  rxscan560_scan:
    set_addr $I10, rxscan560_loop
    rx555_cur."!mark_push"(0, rx555_pos, $I10)
  rxscan560_done:
  alt561_0:
.annotate 'line', 284
    set_addr $I10, alt561_1
    rx555_cur."!mark_push"(0, rx555_pos, $I10)
.annotate 'line', 285
  # rx subrule "sigil" subtype=capture negate=
    rx555_cur."!cursor_pos"(rx555_pos)
    $P10 = rx555_cur."sigil"()
    unless $P10, rx555_fail
    rx555_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    rx555_pos = $P10."pos"()
  # rx rxquantr562 ** 0..1
    set_addr $I10, rxquantr562_done
    rx555_cur."!mark_push"(0, rx555_pos, $I10)
  rxquantr562_loop:
  # rx subrule "twigil" subtype=capture negate=
    rx555_cur."!cursor_pos"(rx555_pos)
    $P10 = rx555_cur."twigil"()
    unless $P10, rx555_fail
    goto rxsubrule563_pass
  rxsubrule563_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx555_fail
  rxsubrule563_pass:
    set_addr $I10, rxsubrule563_back
    rx555_cur."!mark_push"(0, rx555_pos, $I10, $P10)
    $P10."!cursor_names"("twigil")
    rx555_pos = $P10."pos"()
    set_addr $I10, rxquantr562_done
    (rx555_rep) = rx555_cur."!mark_commit"($I10)
  rxquantr562_done:
  # rx subrule "name" subtype=capture negate=
    rx555_cur."!cursor_pos"(rx555_pos)
    $P10 = rx555_cur."name"()
    unless $P10, rx555_fail
    rx555_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("desigilname")
    rx555_pos = $P10."pos"()
    goto alt561_end
  alt561_1:
    set_addr $I10, alt561_2
    rx555_cur."!mark_push"(0, rx555_pos, $I10)
.annotate 'line', 286
  # rx subrule "sigil" subtype=capture negate=
    rx555_cur."!cursor_pos"(rx555_pos)
    $P10 = rx555_cur."sigil"()
    unless $P10, rx555_fail
    rx555_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    rx555_pos = $P10."pos"()
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx555_pos, rx555_off
    substr $S10, rx555_tgt, $I10, 1
    index $I11, "<[", $S10
    lt $I11, 0, rx555_fail
  # rx subrule "postcircumfix" subtype=capture negate=
    rx555_cur."!cursor_pos"(rx555_pos)
    $P10 = rx555_cur."postcircumfix"()
    unless $P10, rx555_fail
    rx555_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("postcircumfix")
    rx555_pos = $P10."pos"()
    goto alt561_end
  alt561_2:
.annotate 'line', 287
  # rx subcapture "sigil"
    set_addr $I10, rxcap_564_fail
    rx555_cur."!mark_push"(0, rx555_pos, $I10)
  # rx literal  "$"
    add $I11, rx555_pos, 1
    gt $I11, rx555_eos, rx555_fail
    sub $I11, rx555_pos, rx555_off
    ord $I11, rx555_tgt, $I11
    ne $I11, 36, rx555_fail
    add rx555_pos, 1
    set_addr $I10, rxcap_564_fail
    ($I12, $I11) = rx555_cur."!mark_peek"($I10)
    rx555_cur."!cursor_pos"($I11)
    ($P10) = rx555_cur."!cursor_start"()
    $P10."!cursor_pass"(rx555_pos, "")
    rx555_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    goto rxcap_564_done
  rxcap_564_fail:
    goto rx555_fail
  rxcap_564_done:
  # rx subcapture "desigilname"
    set_addr $I10, rxcap_565_fail
    rx555_cur."!mark_push"(0, rx555_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx555_pos, rx555_eos, rx555_fail
    sub $I10, rx555_pos, rx555_off
    substr $S10, rx555_tgt, $I10, 1
    index $I11, "/_!", $S10
    lt $I11, 0, rx555_fail
    inc rx555_pos
    set_addr $I10, rxcap_565_fail
    ($I12, $I11) = rx555_cur."!mark_peek"($I10)
    rx555_cur."!cursor_pos"($I11)
    ($P10) = rx555_cur."!cursor_start"()
    $P10."!cursor_pass"(rx555_pos, "")
    rx555_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("desigilname")
    goto rxcap_565_done
  rxcap_565_fail:
    goto rx555_fail
  rxcap_565_done:
  alt561_end:
.annotate 'line', 284
  # rx pass
    rx555_cur."!cursor_pass"(rx555_pos, "variable")
    if_null rx555_debug, debug_657
    rx555_cur."!cursor_debug"("PASS", "variable", " at pos=", rx555_pos)
  debug_657:
    .return (rx555_cur)
  rx555_restart:
.annotate 'line', 4
    if_null rx555_debug, debug_658
    rx555_cur."!cursor_debug"("NEXT", "variable")
  debug_658:
  rx555_fail:
    (rx555_rep, rx555_pos, $I10, $P10) = rx555_cur."!mark_fail"(0)
    lt rx555_pos, -1, rx555_done
    eq rx555_pos, -1, rx555_fail
    jump $I10
  rx555_done:
    rx555_cur."!cursor_fail"()
    if_null rx555_debug, debug_659
    rx555_cur."!cursor_debug"("FAIL", "variable")
  debug_659:
    .return (rx555_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__variable"  :nsentry("!PREFIX__variable") :subid("128_1299591493.348") :method
.annotate 'line', 4
    $P557 = self."!PREFIX__!subrule"("sigil", "")
    $P558 = self."!PREFIX__!subrule"("sigil", "")
    new $P559, "ResizablePMCArray"
    push $P559, "$!"
    push $P559, "$_"
    push $P559, "$/"
    push $P559, $P557
    push $P559, $P558
    .return ($P559)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "sigil"  :subid("129_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx567_tgt
    .local int rx567_pos
    .local int rx567_off
    .local int rx567_eos
    .local int rx567_rep
    .local pmc rx567_cur
    .local pmc rx567_debug
    (rx567_cur, rx567_pos, rx567_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx567_cur
    .local pmc match
    .lex "$/", match
    length rx567_eos, rx567_tgt
    gt rx567_pos, rx567_eos, rx567_done
    set rx567_off, 0
    lt rx567_pos, 2, rx567_start
    sub rx567_off, rx567_pos, 1
    substr rx567_tgt, rx567_tgt, rx567_off
  rx567_start:
    eq $I10, 1, rx567_restart
    if_null rx567_debug, debug_660
    rx567_cur."!cursor_debug"("START", "sigil")
  debug_660:
    $I10 = self.'from'()
    ne $I10, -1, rxscan570_done
    goto rxscan570_scan
  rxscan570_loop:
    (rx567_pos) = rx567_cur."from"()
    inc rx567_pos
    rx567_cur."!cursor_from"(rx567_pos)
    ge rx567_pos, rx567_eos, rxscan570_done
  rxscan570_scan:
    set_addr $I10, rxscan570_loop
    rx567_cur."!mark_push"(0, rx567_pos, $I10)
  rxscan570_done:
.annotate 'line', 290
  # rx enumcharlist negate=0 
    ge rx567_pos, rx567_eos, rx567_fail
    sub $I10, rx567_pos, rx567_off
    substr $S10, rx567_tgt, $I10, 1
    index $I11, "$@%&", $S10
    lt $I11, 0, rx567_fail
    inc rx567_pos
  # rx pass
    rx567_cur."!cursor_pass"(rx567_pos, "sigil")
    if_null rx567_debug, debug_661
    rx567_cur."!cursor_debug"("PASS", "sigil", " at pos=", rx567_pos)
  debug_661:
    .return (rx567_cur)
  rx567_restart:
.annotate 'line', 4
    if_null rx567_debug, debug_662
    rx567_cur."!cursor_debug"("NEXT", "sigil")
  debug_662:
  rx567_fail:
    (rx567_rep, rx567_pos, $I10, $P10) = rx567_cur."!mark_fail"(0)
    lt rx567_pos, -1, rx567_done
    eq rx567_pos, -1, rx567_fail
    jump $I10
  rx567_done:
    rx567_cur."!cursor_fail"()
    if_null rx567_debug, debug_663
    rx567_cur."!cursor_debug"("FAIL", "sigil")
  debug_663:
    .return (rx567_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__sigil"  :nsentry("!PREFIX__sigil") :subid("130_1299591493.348") :method
.annotate 'line', 4
    new $P569, "ResizablePMCArray"
    push $P569, "&"
    push $P569, "%"
    push $P569, "@"
    push $P569, "$"
    .return ($P569)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "twigil"  :subid("131_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx572_tgt
    .local int rx572_pos
    .local int rx572_off
    .local int rx572_eos
    .local int rx572_rep
    .local pmc rx572_cur
    .local pmc rx572_debug
    (rx572_cur, rx572_pos, rx572_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx572_cur
    .local pmc match
    .lex "$/", match
    length rx572_eos, rx572_tgt
    gt rx572_pos, rx572_eos, rx572_done
    set rx572_off, 0
    lt rx572_pos, 2, rx572_start
    sub rx572_off, rx572_pos, 1
    substr rx572_tgt, rx572_tgt, rx572_off
  rx572_start:
    eq $I10, 1, rx572_restart
    if_null rx572_debug, debug_664
    rx572_cur."!cursor_debug"("START", "twigil")
  debug_664:
    $I10 = self.'from'()
    ne $I10, -1, rxscan575_done
    goto rxscan575_scan
  rxscan575_loop:
    (rx572_pos) = rx572_cur."from"()
    inc rx572_pos
    rx572_cur."!cursor_from"(rx572_pos)
    ge rx572_pos, rx572_eos, rxscan575_done
  rxscan575_scan:
    set_addr $I10, rxscan575_loop
    rx572_cur."!mark_push"(0, rx572_pos, $I10)
  rxscan575_done:
.annotate 'line', 292
  # rx enumcharlist negate=0 
    ge rx572_pos, rx572_eos, rx572_fail
    sub $I10, rx572_pos, rx572_off
    substr $S10, rx572_tgt, $I10, 1
    index $I11, "*!?", $S10
    lt $I11, 0, rx572_fail
    inc rx572_pos
  # rx pass
    rx572_cur."!cursor_pass"(rx572_pos, "twigil")
    if_null rx572_debug, debug_665
    rx572_cur."!cursor_debug"("PASS", "twigil", " at pos=", rx572_pos)
  debug_665:
    .return (rx572_cur)
  rx572_restart:
.annotate 'line', 4
    if_null rx572_debug, debug_666
    rx572_cur."!cursor_debug"("NEXT", "twigil")
  debug_666:
  rx572_fail:
    (rx572_rep, rx572_pos, $I10, $P10) = rx572_cur."!mark_fail"(0)
    lt rx572_pos, -1, rx572_done
    eq rx572_pos, -1, rx572_fail
    jump $I10
  rx572_done:
    rx572_cur."!cursor_fail"()
    if_null rx572_debug, debug_667
    rx572_cur."!cursor_debug"("FAIL", "twigil")
  debug_667:
    .return (rx572_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__twigil"  :nsentry("!PREFIX__twigil") :subid("132_1299591493.348") :method
.annotate 'line', 4
    new $P574, "ResizablePMCArray"
    push $P574, "?"
    push $P574, "!"
    push $P574, "*"
    .return ($P574)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator"  :subid("133_1299591493.348")
    .param pmc param_577
.annotate 'line', 294
    .lex "self", param_577
    $P578 = param_577."!protoregex"("package_declarator")
    .return ($P578)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator"  :subid("134_1299591493.348")
    .param pmc param_580
.annotate 'line', 294
    .lex "self", param_580
    $P581 = param_580."!PREFIX__!protoregex"("package_declarator")
    .return ($P581)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<module>"  :subid("135_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 296
    new $P583, "Undef"
    .lex "$*PACKAGE-SETUP", $P583
.annotate 'line', 297
    new $P584, "Undef"
    .lex "$*PKGDECL", $P584
.annotate 'line', 4
    .local string rx585_tgt
    .local int rx585_pos
    .local int rx585_off
    .local int rx585_eos
    .local int rx585_rep
    .local pmc rx585_cur
    .local pmc rx585_debug
    (rx585_cur, rx585_pos, rx585_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx585_cur
    .local pmc match
    .lex "$/", match
    length rx585_eos, rx585_tgt
    gt rx585_pos, rx585_eos, rx585_done
    set rx585_off, 0
    lt rx585_pos, 2, rx585_start
    sub rx585_off, rx585_pos, 1
    substr rx585_tgt, rx585_tgt, rx585_off
  rx585_start:
    eq $I10, 1, rx585_restart
    if_null rx585_debug, debug_668
    rx585_cur."!cursor_debug"("START", "package_declarator:sym<module>")
  debug_668:
    $I10 = self.'from'()
    ne $I10, -1, rxscan589_done
    goto rxscan589_scan
  rxscan589_loop:
    (rx585_pos) = rx585_cur."from"()
    inc rx585_pos
    rx585_cur."!cursor_from"(rx585_pos)
    ge rx585_pos, rx585_eos, rxscan589_done
  rxscan589_scan:
    set_addr $I10, rxscan589_loop
    rx585_cur."!mark_push"(0, rx585_pos, $I10)
  rxscan589_done:
.annotate 'line', 296
    rx585_cur."!cursor_pos"(rx585_pos)
    get_hll_global $P590, ["PAST"], "Stmts"
    $P591 = $P590."new"()
    store_lex "$*PACKAGE-SETUP", $P591
.annotate 'line', 297
    rx585_cur."!cursor_pos"(rx585_pos)
    new $P592, "String"
    assign $P592, "module"
    store_lex "$*PKGDECL", $P592
.annotate 'line', 298
  # rx subcapture "sym"
    set_addr $I10, rxcap_593_fail
    rx585_cur."!mark_push"(0, rx585_pos, $I10)
  # rx literal  "module"
    add $I11, rx585_pos, 6
    gt $I11, rx585_eos, rx585_fail
    sub $I11, rx585_pos, rx585_off
    substr $S10, rx585_tgt, $I11, 6
    ne $S10, "module", rx585_fail
    add rx585_pos, 6
    set_addr $I10, rxcap_593_fail
    ($I12, $I11) = rx585_cur."!mark_peek"($I10)
    rx585_cur."!cursor_pos"($I11)
    ($P10) = rx585_cur."!cursor_start"()
    $P10."!cursor_pass"(rx585_pos, "")
    rx585_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_593_done
  rxcap_593_fail:
    goto rx585_fail
  rxcap_593_done:
  # rx subrule "package_def" subtype=capture negate=
    rx585_cur."!cursor_pos"(rx585_pos)
    $P10 = rx585_cur."package_def"()
    unless $P10, rx585_fail
    rx585_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx585_pos = $P10."pos"()
.annotate 'line', 295
  # rx pass
    rx585_cur."!cursor_pass"(rx585_pos, "package_declarator:sym<module>")
    if_null rx585_debug, debug_669
    rx585_cur."!cursor_debug"("PASS", "package_declarator:sym<module>", " at pos=", rx585_pos)
  debug_669:
    .return (rx585_cur)
  rx585_restart:
.annotate 'line', 4
    if_null rx585_debug, debug_670
    rx585_cur."!cursor_debug"("NEXT", "package_declarator:sym<module>")
  debug_670:
  rx585_fail:
    (rx585_rep, rx585_pos, $I10, $P10) = rx585_cur."!mark_fail"(0)
    lt rx585_pos, -1, rx585_done
    eq rx585_pos, -1, rx585_fail
    jump $I10
  rx585_done:
    rx585_cur."!cursor_fail"()
    if_null rx585_debug, debug_671
    rx585_cur."!cursor_debug"("FAIL", "package_declarator:sym<module>")
  debug_671:
    .return (rx585_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<module>"  :nsentry("!PREFIX__package_declarator:sym<module>") :subid("136_1299591493.348") :method
.annotate 'line', 4
    $P587 = self."!PREFIX__!subrule"("package_def", "module")
    new $P588, "ResizablePMCArray"
    push $P588, $P587
    .return ($P588)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<knowhow>"  :subid("137_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 301
    new $P595, "Undef"
    .lex "$*PACKAGE-SETUP", $P595
.annotate 'line', 302
    new $P596, "Undef"
    .lex "$*PKGDECL", $P596
.annotate 'line', 4
    .local string rx597_tgt
    .local int rx597_pos
    .local int rx597_off
    .local int rx597_eos
    .local int rx597_rep
    .local pmc rx597_cur
    .local pmc rx597_debug
    (rx597_cur, rx597_pos, rx597_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx597_cur
    .local pmc match
    .lex "$/", match
    length rx597_eos, rx597_tgt
    gt rx597_pos, rx597_eos, rx597_done
    set rx597_off, 0
    lt rx597_pos, 2, rx597_start
    sub rx597_off, rx597_pos, 1
    substr rx597_tgt, rx597_tgt, rx597_off
  rx597_start:
    eq $I10, 1, rx597_restart
    if_null rx597_debug, debug_672
    rx597_cur."!cursor_debug"("START", "package_declarator:sym<knowhow>")
  debug_672:
    $I10 = self.'from'()
    ne $I10, -1, rxscan601_done
    goto rxscan601_scan
  rxscan601_loop:
    (rx597_pos) = rx597_cur."from"()
    inc rx597_pos
    rx597_cur."!cursor_from"(rx597_pos)
    ge rx597_pos, rx597_eos, rxscan601_done
  rxscan601_scan:
    set_addr $I10, rxscan601_loop
    rx597_cur."!mark_push"(0, rx597_pos, $I10)
  rxscan601_done:
.annotate 'line', 301
    rx597_cur."!cursor_pos"(rx597_pos)
    get_hll_global $P602, ["PAST"], "Stmts"
    $P603 = $P602."new"()
    store_lex "$*PACKAGE-SETUP", $P603
.annotate 'line', 302
    rx597_cur."!cursor_pos"(rx597_pos)
    new $P604, "String"
    assign $P604, "knowhow"
    store_lex "$*PKGDECL", $P604
.annotate 'line', 303
  # rx subcapture "sym"
    set_addr $I10, rxcap_605_fail
    rx597_cur."!mark_push"(0, rx597_pos, $I10)
  # rx literal  "knowhow"
    add $I11, rx597_pos, 7
    gt $I11, rx597_eos, rx597_fail
    sub $I11, rx597_pos, rx597_off
    substr $S10, rx597_tgt, $I11, 7
    ne $S10, "knowhow", rx597_fail
    add rx597_pos, 7
    set_addr $I10, rxcap_605_fail
    ($I12, $I11) = rx597_cur."!mark_peek"($I10)
    rx597_cur."!cursor_pos"($I11)
    ($P10) = rx597_cur."!cursor_start"()
    $P10."!cursor_pass"(rx597_pos, "")
    rx597_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_605_done
  rxcap_605_fail:
    goto rx597_fail
  rxcap_605_done:
  # rx subrule "package_def" subtype=capture negate=
    rx597_cur."!cursor_pos"(rx597_pos)
    $P10 = rx597_cur."package_def"()
    unless $P10, rx597_fail
    rx597_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx597_pos = $P10."pos"()
.annotate 'line', 300
  # rx pass
    rx597_cur."!cursor_pass"(rx597_pos, "package_declarator:sym<knowhow>")
    if_null rx597_debug, debug_673
    rx597_cur."!cursor_debug"("PASS", "package_declarator:sym<knowhow>", " at pos=", rx597_pos)
  debug_673:
    .return (rx597_cur)
  rx597_restart:
.annotate 'line', 4
    if_null rx597_debug, debug_674
    rx597_cur."!cursor_debug"("NEXT", "package_declarator:sym<knowhow>")
  debug_674:
  rx597_fail:
    (rx597_rep, rx597_pos, $I10, $P10) = rx597_cur."!mark_fail"(0)
    lt rx597_pos, -1, rx597_done
    eq rx597_pos, -1, rx597_fail
    jump $I10
  rx597_done:
    rx597_cur."!cursor_fail"()
    if_null rx597_debug, debug_675
    rx597_cur."!cursor_debug"("FAIL", "package_declarator:sym<knowhow>")
  debug_675:
    .return (rx597_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<knowhow>"  :nsentry("!PREFIX__package_declarator:sym<knowhow>") :subid("138_1299591493.348") :method
.annotate 'line', 4
    $P599 = self."!PREFIX__!subrule"("package_def", "knowhow")
    new $P600, "ResizablePMCArray"
    push $P600, $P599
    .return ($P600)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<class>"  :subid("139_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 306
    new $P607, "Undef"
    .lex "$*PACKAGE-SETUP", $P607
.annotate 'line', 307
    new $P608, "Undef"
    .lex "$*PKGDECL", $P608
.annotate 'line', 4
    .local string rx609_tgt
    .local int rx609_pos
    .local int rx609_off
    .local int rx609_eos
    .local int rx609_rep
    .local pmc rx609_cur
    .local pmc rx609_debug
    (rx609_cur, rx609_pos, rx609_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx609_cur
    .local pmc match
    .lex "$/", match
    length rx609_eos, rx609_tgt
    gt rx609_pos, rx609_eos, rx609_done
    set rx609_off, 0
    lt rx609_pos, 2, rx609_start
    sub rx609_off, rx609_pos, 1
    substr rx609_tgt, rx609_tgt, rx609_off
  rx609_start:
    eq $I10, 1, rx609_restart
    if_null rx609_debug, debug_676
    rx609_cur."!cursor_debug"("START", "package_declarator:sym<class>")
  debug_676:
    $I10 = self.'from'()
    ne $I10, -1, rxscan613_done
    goto rxscan613_scan
  rxscan613_loop:
    (rx609_pos) = rx609_cur."from"()
    inc rx609_pos
    rx609_cur."!cursor_from"(rx609_pos)
    ge rx609_pos, rx609_eos, rxscan613_done
  rxscan613_scan:
    set_addr $I10, rxscan613_loop
    rx609_cur."!mark_push"(0, rx609_pos, $I10)
  rxscan613_done:
.annotate 'line', 306
    rx609_cur."!cursor_pos"(rx609_pos)
    get_hll_global $P614, ["PAST"], "Stmts"
    $P615 = $P614."new"()
    store_lex "$*PACKAGE-SETUP", $P615
.annotate 'line', 307
    rx609_cur."!cursor_pos"(rx609_pos)
    new $P616, "String"
    assign $P616, "class"
    store_lex "$*PKGDECL", $P616
.annotate 'line', 308
  # rx subcapture "sym"
    set_addr $I10, rxcap_617_fail
    rx609_cur."!mark_push"(0, rx609_pos, $I10)
  # rx literal  "class"
    add $I11, rx609_pos, 5
    gt $I11, rx609_eos, rx609_fail
    sub $I11, rx609_pos, rx609_off
    substr $S10, rx609_tgt, $I11, 5
    ne $S10, "class", rx609_fail
    add rx609_pos, 5
    set_addr $I10, rxcap_617_fail
    ($I12, $I11) = rx609_cur."!mark_peek"($I10)
    rx609_cur."!cursor_pos"($I11)
    ($P10) = rx609_cur."!cursor_start"()
    $P10."!cursor_pass"(rx609_pos, "")
    rx609_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_617_done
  rxcap_617_fail:
    goto rx609_fail
  rxcap_617_done:
  # rx subrule "package_def" subtype=capture negate=
    rx609_cur."!cursor_pos"(rx609_pos)
    $P10 = rx609_cur."package_def"()
    unless $P10, rx609_fail
    rx609_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx609_pos = $P10."pos"()
.annotate 'line', 305
  # rx pass
    rx609_cur."!cursor_pass"(rx609_pos, "package_declarator:sym<class>")
    if_null rx609_debug, debug_677
    rx609_cur."!cursor_debug"("PASS", "package_declarator:sym<class>", " at pos=", rx609_pos)
  debug_677:
    .return (rx609_cur)
  rx609_restart:
.annotate 'line', 4
    if_null rx609_debug, debug_678
    rx609_cur."!cursor_debug"("NEXT", "package_declarator:sym<class>")
  debug_678:
  rx609_fail:
    (rx609_rep, rx609_pos, $I10, $P10) = rx609_cur."!mark_fail"(0)
    lt rx609_pos, -1, rx609_done
    eq rx609_pos, -1, rx609_fail
    jump $I10
  rx609_done:
    rx609_cur."!cursor_fail"()
    if_null rx609_debug, debug_679
    rx609_cur."!cursor_debug"("FAIL", "package_declarator:sym<class>")
  debug_679:
    .return (rx609_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<class>"  :nsentry("!PREFIX__package_declarator:sym<class>") :subid("140_1299591493.348") :method
.annotate 'line', 4
    $P611 = self."!PREFIX__!subrule"("package_def", "class")
    new $P612, "ResizablePMCArray"
    push $P612, $P611
    .return ($P612)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<grammar>"  :subid("141_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 311
    new $P619, "Undef"
    .lex "$*PACKAGE-SETUP", $P619
.annotate 'line', 312
    new $P620, "Undef"
    .lex "$*PKGDECL", $P620
.annotate 'line', 4
    .local string rx621_tgt
    .local int rx621_pos
    .local int rx621_off
    .local int rx621_eos
    .local int rx621_rep
    .local pmc rx621_cur
    .local pmc rx621_debug
    (rx621_cur, rx621_pos, rx621_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx621_cur
    .local pmc match
    .lex "$/", match
    length rx621_eos, rx621_tgt
    gt rx621_pos, rx621_eos, rx621_done
    set rx621_off, 0
    lt rx621_pos, 2, rx621_start
    sub rx621_off, rx621_pos, 1
    substr rx621_tgt, rx621_tgt, rx621_off
  rx621_start:
    eq $I10, 1, rx621_restart
    if_null rx621_debug, debug_680
    rx621_cur."!cursor_debug"("START", "package_declarator:sym<grammar>")
  debug_680:
    $I10 = self.'from'()
    ne $I10, -1, rxscan625_done
    goto rxscan625_scan
  rxscan625_loop:
    (rx621_pos) = rx621_cur."from"()
    inc rx621_pos
    rx621_cur."!cursor_from"(rx621_pos)
    ge rx621_pos, rx621_eos, rxscan625_done
  rxscan625_scan:
    set_addr $I10, rxscan625_loop
    rx621_cur."!mark_push"(0, rx621_pos, $I10)
  rxscan625_done:
.annotate 'line', 311
    rx621_cur."!cursor_pos"(rx621_pos)
    get_hll_global $P626, ["PAST"], "Stmts"
    $P627 = $P626."new"()
    store_lex "$*PACKAGE-SETUP", $P627
.annotate 'line', 312
    rx621_cur."!cursor_pos"(rx621_pos)
    new $P628, "String"
    assign $P628, "grammar"
    store_lex "$*PKGDECL", $P628
.annotate 'line', 313
  # rx subcapture "sym"
    set_addr $I10, rxcap_629_fail
    rx621_cur."!mark_push"(0, rx621_pos, $I10)
  # rx literal  "grammar"
    add $I11, rx621_pos, 7
    gt $I11, rx621_eos, rx621_fail
    sub $I11, rx621_pos, rx621_off
    substr $S10, rx621_tgt, $I11, 7
    ne $S10, "grammar", rx621_fail
    add rx621_pos, 7
    set_addr $I10, rxcap_629_fail
    ($I12, $I11) = rx621_cur."!mark_peek"($I10)
    rx621_cur."!cursor_pos"($I11)
    ($P10) = rx621_cur."!cursor_start"()
    $P10."!cursor_pass"(rx621_pos, "")
    rx621_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_629_done
  rxcap_629_fail:
    goto rx621_fail
  rxcap_629_done:
  # rx subrule "package_def" subtype=capture negate=
    rx621_cur."!cursor_pos"(rx621_pos)
    $P10 = rx621_cur."package_def"()
    unless $P10, rx621_fail
    rx621_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx621_pos = $P10."pos"()
.annotate 'line', 310
  # rx pass
    rx621_cur."!cursor_pass"(rx621_pos, "package_declarator:sym<grammar>")
    if_null rx621_debug, debug_681
    rx621_cur."!cursor_debug"("PASS", "package_declarator:sym<grammar>", " at pos=", rx621_pos)
  debug_681:
    .return (rx621_cur)
  rx621_restart:
.annotate 'line', 4
    if_null rx621_debug, debug_682
    rx621_cur."!cursor_debug"("NEXT", "package_declarator:sym<grammar>")
  debug_682:
  rx621_fail:
    (rx621_rep, rx621_pos, $I10, $P10) = rx621_cur."!mark_fail"(0)
    lt rx621_pos, -1, rx621_done
    eq rx621_pos, -1, rx621_fail
    jump $I10
  rx621_done:
    rx621_cur."!cursor_fail"()
    if_null rx621_debug, debug_683
    rx621_cur."!cursor_debug"("FAIL", "package_declarator:sym<grammar>")
  debug_683:
    .return (rx621_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<grammar>"  :nsentry("!PREFIX__package_declarator:sym<grammar>") :subid("142_1299591493.348") :method
.annotate 'line', 4
    $P623 = self."!PREFIX__!subrule"("package_def", "grammar")
    new $P624, "ResizablePMCArray"
    push $P624, $P623
    .return ($P624)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<role>"  :subid("143_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 316
    new $P631, "Undef"
    .lex "$*PACKAGE-SETUP", $P631
.annotate 'line', 317
    new $P632, "Undef"
    .lex "$*PKGDECL", $P632
.annotate 'line', 4
    .local string rx633_tgt
    .local int rx633_pos
    .local int rx633_off
    .local int rx633_eos
    .local int rx633_rep
    .local pmc rx633_cur
    .local pmc rx633_debug
    (rx633_cur, rx633_pos, rx633_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx633_cur
    .local pmc match
    .lex "$/", match
    length rx633_eos, rx633_tgt
    gt rx633_pos, rx633_eos, rx633_done
    set rx633_off, 0
    lt rx633_pos, 2, rx633_start
    sub rx633_off, rx633_pos, 1
    substr rx633_tgt, rx633_tgt, rx633_off
  rx633_start:
    eq $I10, 1, rx633_restart
    if_null rx633_debug, debug_684
    rx633_cur."!cursor_debug"("START", "package_declarator:sym<role>")
  debug_684:
    $I10 = self.'from'()
    ne $I10, -1, rxscan637_done
    goto rxscan637_scan
  rxscan637_loop:
    (rx633_pos) = rx633_cur."from"()
    inc rx633_pos
    rx633_cur."!cursor_from"(rx633_pos)
    ge rx633_pos, rx633_eos, rxscan637_done
  rxscan637_scan:
    set_addr $I10, rxscan637_loop
    rx633_cur."!mark_push"(0, rx633_pos, $I10)
  rxscan637_done:
.annotate 'line', 316
    rx633_cur."!cursor_pos"(rx633_pos)
    get_hll_global $P638, ["PAST"], "Stmts"
    $P639 = $P638."new"()
    store_lex "$*PACKAGE-SETUP", $P639
.annotate 'line', 317
    rx633_cur."!cursor_pos"(rx633_pos)
    new $P640, "String"
    assign $P640, "role"
    store_lex "$*PKGDECL", $P640
.annotate 'line', 318
  # rx subcapture "sym"
    set_addr $I10, rxcap_641_fail
    rx633_cur."!mark_push"(0, rx633_pos, $I10)
  # rx literal  "role"
    add $I11, rx633_pos, 4
    gt $I11, rx633_eos, rx633_fail
    sub $I11, rx633_pos, rx633_off
    substr $S10, rx633_tgt, $I11, 4
    ne $S10, "role", rx633_fail
    add rx633_pos, 4
    set_addr $I10, rxcap_641_fail
    ($I12, $I11) = rx633_cur."!mark_peek"($I10)
    rx633_cur."!cursor_pos"($I11)
    ($P10) = rx633_cur."!cursor_start"()
    $P10."!cursor_pass"(rx633_pos, "")
    rx633_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_641_done
  rxcap_641_fail:
    goto rx633_fail
  rxcap_641_done:
  # rx subrule "package_def" subtype=capture negate=
    rx633_cur."!cursor_pos"(rx633_pos)
    $P10 = rx633_cur."package_def"()
    unless $P10, rx633_fail
    rx633_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx633_pos = $P10."pos"()
.annotate 'line', 315
  # rx pass
    rx633_cur."!cursor_pass"(rx633_pos, "package_declarator:sym<role>")
    if_null rx633_debug, debug_685
    rx633_cur."!cursor_debug"("PASS", "package_declarator:sym<role>", " at pos=", rx633_pos)
  debug_685:
    .return (rx633_cur)
  rx633_restart:
.annotate 'line', 4
    if_null rx633_debug, debug_686
    rx633_cur."!cursor_debug"("NEXT", "package_declarator:sym<role>")
  debug_686:
  rx633_fail:
    (rx633_rep, rx633_pos, $I10, $P10) = rx633_cur."!mark_fail"(0)
    lt rx633_pos, -1, rx633_done
    eq rx633_pos, -1, rx633_fail
    jump $I10
  rx633_done:
    rx633_cur."!cursor_fail"()
    if_null rx633_debug, debug_687
    rx633_cur."!cursor_debug"("FAIL", "package_declarator:sym<role>")
  debug_687:
    .return (rx633_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<role>"  :nsentry("!PREFIX__package_declarator:sym<role>") :subid("144_1299591493.348") :method
.annotate 'line', 4
    $P635 = self."!PREFIX__!subrule"("package_def", "role")
    new $P636, "ResizablePMCArray"
    push $P636, $P635
    .return ($P636)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<native>"  :subid("145_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 321
    new $P643, "Undef"
    .lex "$*PACKAGE-SETUP", $P643
.annotate 'line', 322
    new $P644, "Undef"
    .lex "$*PKGDECL", $P644
.annotate 'line', 4
    .local string rx645_tgt
    .local int rx645_pos
    .local int rx645_off
    .local int rx645_eos
    .local int rx645_rep
    .local pmc rx645_cur
    .local pmc rx645_debug
    (rx645_cur, rx645_pos, rx645_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx645_cur
    .local pmc match
    .lex "$/", match
    length rx645_eos, rx645_tgt
    gt rx645_pos, rx645_eos, rx645_done
    set rx645_off, 0
    lt rx645_pos, 2, rx645_start
    sub rx645_off, rx645_pos, 1
    substr rx645_tgt, rx645_tgt, rx645_off
  rx645_start:
    eq $I10, 1, rx645_restart
    if_null rx645_debug, debug_688
    rx645_cur."!cursor_debug"("START", "package_declarator:sym<native>")
  debug_688:
    $I10 = self.'from'()
    ne $I10, -1, rxscan649_done
    goto rxscan649_scan
  rxscan649_loop:
    (rx645_pos) = rx645_cur."from"()
    inc rx645_pos
    rx645_cur."!cursor_from"(rx645_pos)
    ge rx645_pos, rx645_eos, rxscan649_done
  rxscan649_scan:
    set_addr $I10, rxscan649_loop
    rx645_cur."!mark_push"(0, rx645_pos, $I10)
  rxscan649_done:
.annotate 'line', 321
    rx645_cur."!cursor_pos"(rx645_pos)
    get_hll_global $P650, ["PAST"], "Stmts"
    $P651 = $P650."new"()
    store_lex "$*PACKAGE-SETUP", $P651
.annotate 'line', 322
    rx645_cur."!cursor_pos"(rx645_pos)
    new $P652, "String"
    assign $P652, "native"
    store_lex "$*PKGDECL", $P652
.annotate 'line', 323
  # rx subcapture "sym"
    set_addr $I10, rxcap_653_fail
    rx645_cur."!mark_push"(0, rx645_pos, $I10)
  # rx literal  "native"
    add $I11, rx645_pos, 6
    gt $I11, rx645_eos, rx645_fail
    sub $I11, rx645_pos, rx645_off
    substr $S10, rx645_tgt, $I11, 6
    ne $S10, "native", rx645_fail
    add rx645_pos, 6
    set_addr $I10, rxcap_653_fail
    ($I12, $I11) = rx645_cur."!mark_peek"($I10)
    rx645_cur."!cursor_pos"($I11)
    ($P10) = rx645_cur."!cursor_start"()
    $P10."!cursor_pass"(rx645_pos, "")
    rx645_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_653_done
  rxcap_653_fail:
    goto rx645_fail
  rxcap_653_done:
  # rx subrule "package_def" subtype=capture negate=
    rx645_cur."!cursor_pos"(rx645_pos)
    $P10 = rx645_cur."package_def"()
    unless $P10, rx645_fail
    rx645_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx645_pos = $P10."pos"()
.annotate 'line', 320
  # rx pass
    rx645_cur."!cursor_pass"(rx645_pos, "package_declarator:sym<native>")
    if_null rx645_debug, debug_689
    rx645_cur."!cursor_debug"("PASS", "package_declarator:sym<native>", " at pos=", rx645_pos)
  debug_689:
    .return (rx645_cur)
  rx645_restart:
.annotate 'line', 4
    if_null rx645_debug, debug_690
    rx645_cur."!cursor_debug"("NEXT", "package_declarator:sym<native>")
  debug_690:
  rx645_fail:
    (rx645_rep, rx645_pos, $I10, $P10) = rx645_cur."!mark_fail"(0)
    lt rx645_pos, -1, rx645_done
    eq rx645_pos, -1, rx645_fail
    jump $I10
  rx645_done:
    rx645_cur."!cursor_fail"()
    if_null rx645_debug, debug_691
    rx645_cur."!cursor_debug"("FAIL", "package_declarator:sym<native>")
  debug_691:
    .return (rx645_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<native>"  :nsentry("!PREFIX__package_declarator:sym<native>") :subid("146_1299591493.348") :method
.annotate 'line', 4
    $P647 = self."!PREFIX__!subrule"("package_def", "native")
    new $P648, "ResizablePMCArray"
    push $P648, $P647
    .return ($P648)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_def"  :subid("147_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .const 'Sub' $P678 = "149_1299591493.348" 
    capture_lex $P678
.annotate 'line', 327
    new $P655, "Undef"
    .lex "$*PKGMETA", $P655
.annotate 'line', 328
    $P656 = root_new ['parrot';'Hash']
    .lex "%*ATTR-CHECK", $P656
.annotate 'line', 4
    .local string rx657_tgt
    .local int rx657_pos
    .local int rx657_off
    .local int rx657_eos
    .local int rx657_rep
    .local pmc rx657_cur
    .local pmc rx657_debug
    (rx657_cur, rx657_pos, rx657_tgt, $I10) = self."!cursor_start"()
    rx657_cur."!cursor_caparray"("repr", "parent", "role")
    .lex unicode:"$\x{a2}", rx657_cur
    .local pmc match
    .lex "$/", match
    length rx657_eos, rx657_tgt
    gt rx657_pos, rx657_eos, rx657_done
    set rx657_off, 0
    lt rx657_pos, 2, rx657_start
    sub rx657_off, rx657_pos, 1
    substr rx657_tgt, rx657_tgt, rx657_off
  rx657_start:
    eq $I10, 1, rx657_restart
    if_null rx657_debug, debug_692
    rx657_cur."!cursor_debug"("START", "package_def")
  debug_692:
    $I10 = self.'from'()
    ne $I10, -1, rxscan661_done
    goto rxscan661_scan
  rxscan661_loop:
    (rx657_pos) = rx657_cur."from"()
    inc rx657_pos
    rx657_cur."!cursor_from"(rx657_pos)
    ge rx657_pos, rx657_eos, rxscan661_done
  rxscan661_scan:
    set_addr $I10, rxscan661_loop
    rx657_cur."!mark_push"(0, rx657_pos, $I10)
  rxscan661_done:
.annotate 'line', 326
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
.annotate 'line', 327
    rx657_cur."!cursor_pos"(rx657_pos)
    find_lex $P663, "$*PKGMETA"
    unless_null $P663, vivify_693
    get_hll_global $P663, "$PKGMETA"
    unless_null $P663, vivify_694
    die "Contextual $*PKGMETA not found"
  vivify_694:
  vivify_693:
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
.annotate 'line', 328
    rx657_cur."!cursor_pos"(rx657_pos)
    find_lex $P665, "%*ATTR-CHECK"
    unless_null $P665, vivify_695
    get_hll_global $P665, "%ATTR-CHECK"
    unless_null $P665, vivify_696
    die "Contextual %*ATTR-CHECK not found"
  vivify_696:
  vivify_695:
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
.annotate 'line', 330
  # rx subrule "name" subtype=capture negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."name"()
    unless $P10, rx657_fail
    rx657_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx657_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
.annotate 'line', 331
  # rx rxquantr668 ** 0..1
    set_addr $I10, rxquantr668_done
    rx657_cur."!mark_push"(0, rx657_pos, $I10)
  rxquantr668_loop:
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
  # rx literal  "is"
    add $I11, rx657_pos, 2
    gt $I11, rx657_eos, rx657_fail
    sub $I11, rx657_pos, rx657_off
    substr $S10, rx657_tgt, $I11, 2
    ne $S10, "is", rx657_fail
    add rx657_pos, 2
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
  # rx literal  "repr("
    add $I11, rx657_pos, 5
    gt $I11, rx657_eos, rx657_fail
    sub $I11, rx657_pos, rx657_off
    substr $S10, rx657_tgt, $I11, 5
    ne $S10, "repr(", rx657_fail
    add rx657_pos, 5
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."quote_EXPR"()
    unless $P10, rx657_fail
    rx657_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("repr")
    rx657_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx657_pos, 1
    gt $I11, rx657_eos, rx657_fail
    sub $I11, rx657_pos, rx657_off
    ord $I11, rx657_tgt, $I11
    ne $I11, 41, rx657_fail
    add rx657_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
    set_addr $I10, rxquantr668_done
    (rx657_rep) = rx657_cur."!mark_commit"($I10)
  rxquantr668_done:
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
.annotate 'line', 333
    rx657_cur."!cursor_pos"(rx657_pos)
    find_lex $P675, unicode:"$\x{a2}"
    $P676 = $P675."MATCH"()
    store_lex "$/", $P676
    .const 'Sub' $P678 = "149_1299591493.348" 
    capture_lex $P678
    $P701 = $P678()
.annotate 'line', 342
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
.annotate 'line', 344
  # rx rxquantr703 ** 0..1
    set_addr $I10, rxquantr703_done
    rx657_cur."!mark_push"(0, rx657_pos, $I10)
  rxquantr703_loop:
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
  # rx literal  "is"
    add $I11, rx657_pos, 2
    gt $I11, rx657_eos, rx657_fail
    sub $I11, rx657_pos, rx657_off
    substr $S10, rx657_tgt, $I11, 2
    ne $S10, "is", rx657_fail
    add rx657_pos, 2
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."name"()
    unless $P10, rx657_fail
    rx657_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("parent")
    rx657_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
    set_addr $I10, rxquantr703_done
    (rx657_rep) = rx657_cur."!mark_commit"($I10)
  rxquantr703_done:
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
.annotate 'line', 345
  # rx rxquantr708 ** 0..*
    set_addr $I10, rxquantr708_done
    rx657_cur."!mark_push"(0, rx657_pos, $I10)
  rxquantr708_loop:
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
  # rx literal  "does"
    add $I11, rx657_pos, 4
    gt $I11, rx657_eos, rx657_fail
    sub $I11, rx657_pos, rx657_off
    substr $S10, rx657_tgt, $I11, 4
    ne $S10, "does", rx657_fail
    add rx657_pos, 4
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."name"()
    unless $P10, rx657_fail
    rx657_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("role")
    rx657_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
    set_addr $I10, rxquantr708_done
    (rx657_rep) = rx657_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr708_done
    rx657_cur."!mark_push"(rx657_rep, rx657_pos, $I10)
    goto rxquantr708_loop
  rxquantr708_done:
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
  alt713_0:
.annotate 'line', 346
    set_addr $I10, alt713_1
    rx657_cur."!mark_push"(0, rx657_pos, $I10)
.annotate 'line', 347
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
  # rx literal  ";"
    add $I11, rx657_pos, 1
    gt $I11, rx657_eos, rx657_fail
    sub $I11, rx657_pos, rx657_off
    ord $I11, rx657_tgt, $I11
    ne $I11, 59, rx657_fail
    add rx657_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
  # rx subrule "comp_unit" subtype=capture negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."comp_unit"()
    unless $P10, rx657_fail
    rx657_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("comp_unit")
    rx657_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
    goto alt713_end
  alt713_1:
    set_addr $I10, alt713_2
    rx657_cur."!mark_push"(0, rx657_pos, $I10)
.annotate 'line', 348
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx657_pos, rx657_off
    substr $S10, rx657_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx657_fail
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
  # rx subrule "block" subtype=capture negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."block"()
    unless $P10, rx657_fail
    rx657_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx657_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
    goto alt713_end
  alt713_2:
.annotate 'line', 349
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."panic"("Malformed package declaration")
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
  alt713_end:
.annotate 'line', 350
  # rx subrule "ws" subtype=method negate=
    rx657_cur."!cursor_pos"(rx657_pos)
    $P10 = rx657_cur."ws"()
    unless $P10, rx657_fail
    rx657_pos = $P10."pos"()
.annotate 'line', 326
  # rx pass
    rx657_cur."!cursor_pass"(rx657_pos, "package_def")
    if_null rx657_debug, debug_713
    rx657_cur."!cursor_debug"("PASS", "package_def", " at pos=", rx657_pos)
  debug_713:
    .return (rx657_cur)
  rx657_restart:
.annotate 'line', 4
    if_null rx657_debug, debug_714
    rx657_cur."!cursor_debug"("NEXT", "package_def")
  debug_714:
  rx657_fail:
    (rx657_rep, rx657_pos, $I10, $P10) = rx657_cur."!mark_fail"(0)
    lt rx657_pos, -1, rx657_done
    eq rx657_pos, -1, rx657_fail
    jump $I10
  rx657_done:
    rx657_cur."!cursor_fail"()
    if_null rx657_debug, debug_715
    rx657_cur."!cursor_debug"("FAIL", "package_def")
  debug_715:
    .return (rx657_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_def"  :nsentry("!PREFIX__package_def") :subid("148_1299591493.348") :method
.annotate 'line', 4
    $P659 = self."!PREFIX__!subrule"("ws", "")
    new $P660, "ResizablePMCArray"
    push $P660, $P659
    .return ($P660)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block677"  :anon :subid("149_1299591493.348") :outer("147_1299591493.348")
.annotate 'line', 336
    $P679 = root_new ['parrot';'Hash']
    .lex "%args", $P679
.annotate 'line', 333
    find_lex $P680, "%args"
.annotate 'line', 337
    find_lex $P681, "$/"
    unless_null $P681, vivify_697
    $P681 = root_new ['parrot';'Hash']
  vivify_697:
    set $P682, $P681["name"]
    unless_null $P682, vivify_698
    new $P682, "Undef"
  vivify_698:
    set $S683, $P682
    new $P684, 'String'
    set $P684, $S683
    find_lex $P685, "%args"
    unless_null $P685, vivify_699
    $P685 = root_new ['parrot';'Hash']
    store_lex "%args", $P685
  vivify_699:
    set $P685["name"], $P684
.annotate 'line', 338
    find_lex $P687, "$/"
    unless_null $P687, vivify_700
    $P687 = root_new ['parrot';'Hash']
  vivify_700:
    set $P688, $P687["repr"]
    unless_null $P688, vivify_701
    new $P688, "Undef"
  vivify_701:
    unless $P688, if_686_end
.annotate 'line', 339
    find_lex $P689, "$/"
    unless_null $P689, vivify_702
    $P689 = root_new ['parrot';'Hash']
  vivify_702:
    set $P690, $P689["repr"]
    unless_null $P690, vivify_703
    $P690 = root_new ['parrot';'ResizablePMCArray']
  vivify_703:
    set $P691, $P690[0]
    unless_null $P691, vivify_704
    new $P691, "Undef"
  vivify_704:
    set $S692, $P691
    new $P693, 'String'
    set $P693, $S692
    find_lex $P694, "%args"
    unless_null $P694, vivify_705
    $P694 = root_new ['parrot';'Hash']
    store_lex "%args", $P694
  vivify_705:
    set $P694["repr"], $P693
  if_686_end:
.annotate 'line', 341
    find_dynamic_lex $P695, "$*SC"
    unless_null $P695, vivify_706
    get_hll_global $P695, "$SC"
    unless_null $P695, vivify_707
    die "Contextual $*SC not found"
  vivify_707:
  vivify_706:
    find_dynamic_lex $P696, "$*PKGDECL"
    unless_null $P696, vivify_708
    get_hll_global $P696, "$PKGDECL"
    unless_null $P696, vivify_709
    die "Contextual $*PKGDECL not found"
  vivify_709:
  vivify_708:
    find_dynamic_lex $P697, "%*HOW"
    unless_null $P697, vivify_710
    get_hll_global $P697, "%HOW"
    unless_null $P697, vivify_711
    die "Contextual %*HOW not found"
  vivify_711:
  vivify_710:
    set $P698, $P697[$P696]
    unless_null $P698, vivify_712
    new $P698, "Undef"
  vivify_712:
    find_lex $P699, "%args"
    $P700 = $P695."pkg_create_mo"($P698, $P699 :flat)
    store_dynamic_lex "$*PKGMETA", $P700
.annotate 'line', 333
    .return ($P700)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator"  :subid("150_1299591493.348")
    .param pmc param_724
.annotate 'line', 353
    .lex "self", param_724
    $P725 = param_724."!protoregex"("scope_declarator")
    .return ($P725)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scope_declarator"  :subid("151_1299591493.348")
    .param pmc param_727
.annotate 'line', 353
    .lex "self", param_727
    $P728 = param_727."!PREFIX__!protoregex"("scope_declarator")
    .return ($P728)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator:sym<my>"  :subid("152_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx730_tgt
    .local int rx730_pos
    .local int rx730_off
    .local int rx730_eos
    .local int rx730_rep
    .local pmc rx730_cur
    .local pmc rx730_debug
    (rx730_cur, rx730_pos, rx730_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx730_cur
    .local pmc match
    .lex "$/", match
    length rx730_eos, rx730_tgt
    gt rx730_pos, rx730_eos, rx730_done
    set rx730_off, 0
    lt rx730_pos, 2, rx730_start
    sub rx730_off, rx730_pos, 1
    substr rx730_tgt, rx730_tgt, rx730_off
  rx730_start:
    eq $I10, 1, rx730_restart
    if_null rx730_debug, debug_716
    rx730_cur."!cursor_debug"("START", "scope_declarator:sym<my>")
  debug_716:
    $I10 = self.'from'()
    ne $I10, -1, rxscan734_done
    goto rxscan734_scan
  rxscan734_loop:
    (rx730_pos) = rx730_cur."from"()
    inc rx730_pos
    rx730_cur."!cursor_from"(rx730_pos)
    ge rx730_pos, rx730_eos, rxscan734_done
  rxscan734_scan:
    set_addr $I10, rxscan734_loop
    rx730_cur."!mark_push"(0, rx730_pos, $I10)
  rxscan734_done:
.annotate 'line', 354
  # rx subcapture "sym"
    set_addr $I10, rxcap_735_fail
    rx730_cur."!mark_push"(0, rx730_pos, $I10)
  # rx literal  "my"
    add $I11, rx730_pos, 2
    gt $I11, rx730_eos, rx730_fail
    sub $I11, rx730_pos, rx730_off
    substr $S10, rx730_tgt, $I11, 2
    ne $S10, "my", rx730_fail
    add rx730_pos, 2
    set_addr $I10, rxcap_735_fail
    ($I12, $I11) = rx730_cur."!mark_peek"($I10)
    rx730_cur."!cursor_pos"($I11)
    ($P10) = rx730_cur."!cursor_start"()
    $P10."!cursor_pass"(rx730_pos, "")
    rx730_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_735_done
  rxcap_735_fail:
    goto rx730_fail
  rxcap_735_done:
  # rx subrule "scoped" subtype=capture negate=
    rx730_cur."!cursor_pos"(rx730_pos)
    $P10 = rx730_cur."scoped"("my")
    unless $P10, rx730_fail
    rx730_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("scoped")
    rx730_pos = $P10."pos"()
  # rx pass
    rx730_cur."!cursor_pass"(rx730_pos, "scope_declarator:sym<my>")
    if_null rx730_debug, debug_717
    rx730_cur."!cursor_debug"("PASS", "scope_declarator:sym<my>", " at pos=", rx730_pos)
  debug_717:
    .return (rx730_cur)
  rx730_restart:
.annotate 'line', 4
    if_null rx730_debug, debug_718
    rx730_cur."!cursor_debug"("NEXT", "scope_declarator:sym<my>")
  debug_718:
  rx730_fail:
    (rx730_rep, rx730_pos, $I10, $P10) = rx730_cur."!mark_fail"(0)
    lt rx730_pos, -1, rx730_done
    eq rx730_pos, -1, rx730_fail
    jump $I10
  rx730_done:
    rx730_cur."!cursor_fail"()
    if_null rx730_debug, debug_719
    rx730_cur."!cursor_debug"("FAIL", "scope_declarator:sym<my>")
  debug_719:
    .return (rx730_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scope_declarator:sym<my>"  :nsentry("!PREFIX__scope_declarator:sym<my>") :subid("153_1299591493.348") :method
.annotate 'line', 4
    $P732 = self."!PREFIX__!subrule"("scoped", "my")
    new $P733, "ResizablePMCArray"
    push $P733, $P732
    .return ($P733)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator:sym<our>"  :subid("154_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx737_tgt
    .local int rx737_pos
    .local int rx737_off
    .local int rx737_eos
    .local int rx737_rep
    .local pmc rx737_cur
    .local pmc rx737_debug
    (rx737_cur, rx737_pos, rx737_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx737_cur
    .local pmc match
    .lex "$/", match
    length rx737_eos, rx737_tgt
    gt rx737_pos, rx737_eos, rx737_done
    set rx737_off, 0
    lt rx737_pos, 2, rx737_start
    sub rx737_off, rx737_pos, 1
    substr rx737_tgt, rx737_tgt, rx737_off
  rx737_start:
    eq $I10, 1, rx737_restart
    if_null rx737_debug, debug_720
    rx737_cur."!cursor_debug"("START", "scope_declarator:sym<our>")
  debug_720:
    $I10 = self.'from'()
    ne $I10, -1, rxscan741_done
    goto rxscan741_scan
  rxscan741_loop:
    (rx737_pos) = rx737_cur."from"()
    inc rx737_pos
    rx737_cur."!cursor_from"(rx737_pos)
    ge rx737_pos, rx737_eos, rxscan741_done
  rxscan741_scan:
    set_addr $I10, rxscan741_loop
    rx737_cur."!mark_push"(0, rx737_pos, $I10)
  rxscan741_done:
.annotate 'line', 355
  # rx subcapture "sym"
    set_addr $I10, rxcap_742_fail
    rx737_cur."!mark_push"(0, rx737_pos, $I10)
  # rx literal  "our"
    add $I11, rx737_pos, 3
    gt $I11, rx737_eos, rx737_fail
    sub $I11, rx737_pos, rx737_off
    substr $S10, rx737_tgt, $I11, 3
    ne $S10, "our", rx737_fail
    add rx737_pos, 3
    set_addr $I10, rxcap_742_fail
    ($I12, $I11) = rx737_cur."!mark_peek"($I10)
    rx737_cur."!cursor_pos"($I11)
    ($P10) = rx737_cur."!cursor_start"()
    $P10."!cursor_pass"(rx737_pos, "")
    rx737_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_742_done
  rxcap_742_fail:
    goto rx737_fail
  rxcap_742_done:
  # rx subrule "scoped" subtype=capture negate=
    rx737_cur."!cursor_pos"(rx737_pos)
    $P10 = rx737_cur."scoped"("our")
    unless $P10, rx737_fail
    rx737_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("scoped")
    rx737_pos = $P10."pos"()
  # rx pass
    rx737_cur."!cursor_pass"(rx737_pos, "scope_declarator:sym<our>")
    if_null rx737_debug, debug_721
    rx737_cur."!cursor_debug"("PASS", "scope_declarator:sym<our>", " at pos=", rx737_pos)
  debug_721:
    .return (rx737_cur)
  rx737_restart:
.annotate 'line', 4
    if_null rx737_debug, debug_722
    rx737_cur."!cursor_debug"("NEXT", "scope_declarator:sym<our>")
  debug_722:
  rx737_fail:
    (rx737_rep, rx737_pos, $I10, $P10) = rx737_cur."!mark_fail"(0)
    lt rx737_pos, -1, rx737_done
    eq rx737_pos, -1, rx737_fail
    jump $I10
  rx737_done:
    rx737_cur."!cursor_fail"()
    if_null rx737_debug, debug_723
    rx737_cur."!cursor_debug"("FAIL", "scope_declarator:sym<our>")
  debug_723:
    .return (rx737_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scope_declarator:sym<our>"  :nsentry("!PREFIX__scope_declarator:sym<our>") :subid("155_1299591493.348") :method
.annotate 'line', 4
    $P739 = self."!PREFIX__!subrule"("scoped", "our")
    new $P740, "ResizablePMCArray"
    push $P740, $P739
    .return ($P740)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator:sym<has>"  :subid("156_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx744_tgt
    .local int rx744_pos
    .local int rx744_off
    .local int rx744_eos
    .local int rx744_rep
    .local pmc rx744_cur
    .local pmc rx744_debug
    (rx744_cur, rx744_pos, rx744_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx744_cur
    .local pmc match
    .lex "$/", match
    length rx744_eos, rx744_tgt
    gt rx744_pos, rx744_eos, rx744_done
    set rx744_off, 0
    lt rx744_pos, 2, rx744_start
    sub rx744_off, rx744_pos, 1
    substr rx744_tgt, rx744_tgt, rx744_off
  rx744_start:
    eq $I10, 1, rx744_restart
    if_null rx744_debug, debug_724
    rx744_cur."!cursor_debug"("START", "scope_declarator:sym<has>")
  debug_724:
    $I10 = self.'from'()
    ne $I10, -1, rxscan748_done
    goto rxscan748_scan
  rxscan748_loop:
    (rx744_pos) = rx744_cur."from"()
    inc rx744_pos
    rx744_cur."!cursor_from"(rx744_pos)
    ge rx744_pos, rx744_eos, rxscan748_done
  rxscan748_scan:
    set_addr $I10, rxscan748_loop
    rx744_cur."!mark_push"(0, rx744_pos, $I10)
  rxscan748_done:
.annotate 'line', 356
  # rx subcapture "sym"
    set_addr $I10, rxcap_749_fail
    rx744_cur."!mark_push"(0, rx744_pos, $I10)
  # rx literal  "has"
    add $I11, rx744_pos, 3
    gt $I11, rx744_eos, rx744_fail
    sub $I11, rx744_pos, rx744_off
    substr $S10, rx744_tgt, $I11, 3
    ne $S10, "has", rx744_fail
    add rx744_pos, 3
    set_addr $I10, rxcap_749_fail
    ($I12, $I11) = rx744_cur."!mark_peek"($I10)
    rx744_cur."!cursor_pos"($I11)
    ($P10) = rx744_cur."!cursor_start"()
    $P10."!cursor_pass"(rx744_pos, "")
    rx744_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_749_done
  rxcap_749_fail:
    goto rx744_fail
  rxcap_749_done:
  # rx subrule "scoped" subtype=capture negate=
    rx744_cur."!cursor_pos"(rx744_pos)
    $P10 = rx744_cur."scoped"("has")
    unless $P10, rx744_fail
    rx744_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("scoped")
    rx744_pos = $P10."pos"()
  # rx pass
    rx744_cur."!cursor_pass"(rx744_pos, "scope_declarator:sym<has>")
    if_null rx744_debug, debug_725
    rx744_cur."!cursor_debug"("PASS", "scope_declarator:sym<has>", " at pos=", rx744_pos)
  debug_725:
    .return (rx744_cur)
  rx744_restart:
.annotate 'line', 4
    if_null rx744_debug, debug_726
    rx744_cur."!cursor_debug"("NEXT", "scope_declarator:sym<has>")
  debug_726:
  rx744_fail:
    (rx744_rep, rx744_pos, $I10, $P10) = rx744_cur."!mark_fail"(0)
    lt rx744_pos, -1, rx744_done
    eq rx744_pos, -1, rx744_fail
    jump $I10
  rx744_done:
    rx744_cur."!cursor_fail"()
    if_null rx744_debug, debug_727
    rx744_cur."!cursor_debug"("FAIL", "scope_declarator:sym<has>")
  debug_727:
    .return (rx744_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scope_declarator:sym<has>"  :nsentry("!PREFIX__scope_declarator:sym<has>") :subid("157_1299591493.348") :method
.annotate 'line', 4
    $P746 = self."!PREFIX__!subrule"("scoped", "has")
    new $P747, "ResizablePMCArray"
    push $P747, $P746
    .return ($P747)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scoped"  :subid("158_1299591493.348") :method :outer("11_1299591493.348")
    .param pmc param_751
.annotate 'line', 358
    .lex "$*SCOPE", param_751
.annotate 'line', 4
    .local string rx752_tgt
    .local int rx752_pos
    .local int rx752_off
    .local int rx752_eos
    .local int rx752_rep
    .local pmc rx752_cur
    .local pmc rx752_debug
    (rx752_cur, rx752_pos, rx752_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx752_cur
    .local pmc match
    .lex "$/", match
    length rx752_eos, rx752_tgt
    gt rx752_pos, rx752_eos, rx752_done
    set rx752_off, 0
    lt rx752_pos, 2, rx752_start
    sub rx752_off, rx752_pos, 1
    substr rx752_tgt, rx752_tgt, rx752_off
  rx752_start:
    eq $I10, 1, rx752_restart
    if_null rx752_debug, debug_728
    rx752_cur."!cursor_debug"("START", "scoped")
  debug_728:
    $I10 = self.'from'()
    ne $I10, -1, rxscan757_done
    goto rxscan757_scan
  rxscan757_loop:
    (rx752_pos) = rx752_cur."from"()
    inc rx752_pos
    rx752_cur."!cursor_from"(rx752_pos)
    ge rx752_pos, rx752_eos, rxscan757_done
  rxscan757_scan:
    set_addr $I10, rxscan757_loop
    rx752_cur."!mark_push"(0, rx752_pos, $I10)
  rxscan757_done:
  alt758_0:
.annotate 'line', 358
    set_addr $I10, alt758_1
    rx752_cur."!mark_push"(0, rx752_pos, $I10)
.annotate 'line', 359
  # rx subrule "ws" subtype=method negate=
    rx752_cur."!cursor_pos"(rx752_pos)
    $P10 = rx752_cur."ws"()
    unless $P10, rx752_fail
    rx752_pos = $P10."pos"()
  # rx subrule "declarator" subtype=capture negate=
    rx752_cur."!cursor_pos"(rx752_pos)
    $P10 = rx752_cur."declarator"()
    unless $P10, rx752_fail
    rx752_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("declarator")
    rx752_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx752_cur."!cursor_pos"(rx752_pos)
    $P10 = rx752_cur."ws"()
    unless $P10, rx752_fail
    rx752_pos = $P10."pos"()
    goto alt758_end
  alt758_1:
.annotate 'line', 360
  # rx subrule "ws" subtype=method negate=
    rx752_cur."!cursor_pos"(rx752_pos)
    $P10 = rx752_cur."ws"()
    unless $P10, rx752_fail
    rx752_pos = $P10."pos"()
  # rx subrule "multi_declarator" subtype=capture negate=
    rx752_cur."!cursor_pos"(rx752_pos)
    $P10 = rx752_cur."multi_declarator"()
    unless $P10, rx752_fail
    rx752_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("multi_declarator")
    rx752_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx752_cur."!cursor_pos"(rx752_pos)
    $P10 = rx752_cur."ws"()
    unless $P10, rx752_fail
    rx752_pos = $P10."pos"()
  alt758_end:
.annotate 'line', 358
  # rx pass
    rx752_cur."!cursor_pass"(rx752_pos, "scoped")
    if_null rx752_debug, debug_729
    rx752_cur."!cursor_debug"("PASS", "scoped", " at pos=", rx752_pos)
  debug_729:
    .return (rx752_cur)
  rx752_restart:
.annotate 'line', 4
    if_null rx752_debug, debug_730
    rx752_cur."!cursor_debug"("NEXT", "scoped")
  debug_730:
  rx752_fail:
    (rx752_rep, rx752_pos, $I10, $P10) = rx752_cur."!mark_fail"(0)
    lt rx752_pos, -1, rx752_done
    eq rx752_pos, -1, rx752_fail
    jump $I10
  rx752_done:
    rx752_cur."!cursor_fail"()
    if_null rx752_debug, debug_731
    rx752_cur."!cursor_debug"("FAIL", "scoped")
  debug_731:
    .return (rx752_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scoped"  :nsentry("!PREFIX__scoped") :subid("159_1299591493.348") :method
.annotate 'line', 4
    $P754 = self."!PREFIX__!subrule"("ws", "")
    $P755 = self."!PREFIX__!subrule"("ws", "")
    new $P756, "ResizablePMCArray"
    push $P756, $P754
    push $P756, $P755
    .return ($P756)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "typename"  :subid("160_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx764_tgt
    .local int rx764_pos
    .local int rx764_off
    .local int rx764_eos
    .local int rx764_rep
    .local pmc rx764_cur
    .local pmc rx764_debug
    (rx764_cur, rx764_pos, rx764_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx764_cur
    .local pmc match
    .lex "$/", match
    length rx764_eos, rx764_tgt
    gt rx764_pos, rx764_eos, rx764_done
    set rx764_off, 0
    lt rx764_pos, 2, rx764_start
    sub rx764_off, rx764_pos, 1
    substr rx764_tgt, rx764_tgt, rx764_off
  rx764_start:
    eq $I10, 1, rx764_restart
    if_null rx764_debug, debug_732
    rx764_cur."!cursor_debug"("START", "typename")
  debug_732:
    $I10 = self.'from'()
    ne $I10, -1, rxscan768_done
    goto rxscan768_scan
  rxscan768_loop:
    (rx764_pos) = rx764_cur."from"()
    inc rx764_pos
    rx764_cur."!cursor_from"(rx764_pos)
    ge rx764_pos, rx764_eos, rxscan768_done
  rxscan768_scan:
    set_addr $I10, rxscan768_loop
    rx764_cur."!mark_push"(0, rx764_pos, $I10)
  rxscan768_done:
.annotate 'line', 363
  # rx subrule "name" subtype=capture negate=
    rx764_cur."!cursor_pos"(rx764_pos)
    $P10 = rx764_cur."name"()
    unless $P10, rx764_fail
    rx764_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx764_pos = $P10."pos"()
  # rx pass
    rx764_cur."!cursor_pass"(rx764_pos, "typename")
    if_null rx764_debug, debug_733
    rx764_cur."!cursor_debug"("PASS", "typename", " at pos=", rx764_pos)
  debug_733:
    .return (rx764_cur)
  rx764_restart:
.annotate 'line', 4
    if_null rx764_debug, debug_734
    rx764_cur."!cursor_debug"("NEXT", "typename")
  debug_734:
  rx764_fail:
    (rx764_rep, rx764_pos, $I10, $P10) = rx764_cur."!mark_fail"(0)
    lt rx764_pos, -1, rx764_done
    eq rx764_pos, -1, rx764_fail
    jump $I10
  rx764_done:
    rx764_cur."!cursor_fail"()
    if_null rx764_debug, debug_735
    rx764_cur."!cursor_debug"("FAIL", "typename")
  debug_735:
    .return (rx764_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__typename"  :nsentry("!PREFIX__typename") :subid("161_1299591493.348") :method
.annotate 'line', 4
    $P766 = self."!PREFIX__!subrule"("name", "")
    new $P767, "ResizablePMCArray"
    push $P767, $P766
    .return ($P767)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "declarator"  :subid("162_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx770_tgt
    .local int rx770_pos
    .local int rx770_off
    .local int rx770_eos
    .local int rx770_rep
    .local pmc rx770_cur
    .local pmc rx770_debug
    (rx770_cur, rx770_pos, rx770_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx770_cur
    .local pmc match
    .lex "$/", match
    length rx770_eos, rx770_tgt
    gt rx770_pos, rx770_eos, rx770_done
    set rx770_off, 0
    lt rx770_pos, 2, rx770_start
    sub rx770_off, rx770_pos, 1
    substr rx770_tgt, rx770_tgt, rx770_off
  rx770_start:
    eq $I10, 1, rx770_restart
    if_null rx770_debug, debug_736
    rx770_cur."!cursor_debug"("START", "declarator")
  debug_736:
    $I10 = self.'from'()
    ne $I10, -1, rxscan775_done
    goto rxscan775_scan
  rxscan775_loop:
    (rx770_pos) = rx770_cur."from"()
    inc rx770_pos
    rx770_cur."!cursor_from"(rx770_pos)
    ge rx770_pos, rx770_eos, rxscan775_done
  rxscan775_scan:
    set_addr $I10, rxscan775_loop
    rx770_cur."!mark_push"(0, rx770_pos, $I10)
  rxscan775_done:
  alt776_0:
.annotate 'line', 365
    set_addr $I10, alt776_1
    rx770_cur."!mark_push"(0, rx770_pos, $I10)
.annotate 'line', 366
  # rx subrule "variable_declarator" subtype=capture negate=
    rx770_cur."!cursor_pos"(rx770_pos)
    $P10 = rx770_cur."variable_declarator"()
    unless $P10, rx770_fail
    rx770_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable_declarator")
    rx770_pos = $P10."pos"()
    goto alt776_end
  alt776_1:
.annotate 'line', 367
  # rx subrule "routine_declarator" subtype=capture negate=
    rx770_cur."!cursor_pos"(rx770_pos)
    $P10 = rx770_cur."routine_declarator"()
    unless $P10, rx770_fail
    rx770_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_declarator")
    rx770_pos = $P10."pos"()
  alt776_end:
.annotate 'line', 365
  # rx pass
    rx770_cur."!cursor_pass"(rx770_pos, "declarator")
    if_null rx770_debug, debug_737
    rx770_cur."!cursor_debug"("PASS", "declarator", " at pos=", rx770_pos)
  debug_737:
    .return (rx770_cur)
  rx770_restart:
.annotate 'line', 4
    if_null rx770_debug, debug_738
    rx770_cur."!cursor_debug"("NEXT", "declarator")
  debug_738:
  rx770_fail:
    (rx770_rep, rx770_pos, $I10, $P10) = rx770_cur."!mark_fail"(0)
    lt rx770_pos, -1, rx770_done
    eq rx770_pos, -1, rx770_fail
    jump $I10
  rx770_done:
    rx770_cur."!cursor_fail"()
    if_null rx770_debug, debug_739
    rx770_cur."!cursor_debug"("FAIL", "declarator")
  debug_739:
    .return (rx770_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__declarator"  :nsentry("!PREFIX__declarator") :subid("163_1299591493.348") :method
.annotate 'line', 4
    $P772 = self."!PREFIX__!subrule"("routine_declarator", "")
    $P773 = self."!PREFIX__!subrule"("variable_declarator", "")
    new $P774, "ResizablePMCArray"
    push $P774, $P772
    push $P774, $P773
    .return ($P774)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "variable_declarator"  :subid("164_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx778_tgt
    .local int rx778_pos
    .local int rx778_off
    .local int rx778_eos
    .local int rx778_rep
    .local pmc rx778_cur
    .local pmc rx778_debug
    (rx778_cur, rx778_pos, rx778_tgt, $I10) = self."!cursor_start"()
    rx778_cur."!cursor_caparray"("typename")
    .lex unicode:"$\x{a2}", rx778_cur
    .local pmc match
    .lex "$/", match
    length rx778_eos, rx778_tgt
    gt rx778_pos, rx778_eos, rx778_done
    set rx778_off, 0
    lt rx778_pos, 2, rx778_start
    sub rx778_off, rx778_pos, 1
    substr rx778_tgt, rx778_tgt, rx778_off
  rx778_start:
    eq $I10, 1, rx778_restart
    if_null rx778_debug, debug_740
    rx778_cur."!cursor_debug"("START", "variable_declarator")
  debug_740:
    $I10 = self.'from'()
    ne $I10, -1, rxscan782_done
    goto rxscan782_scan
  rxscan782_loop:
    (rx778_pos) = rx778_cur."from"()
    inc rx778_pos
    rx778_cur."!cursor_from"(rx778_pos)
    ge rx778_pos, rx778_eos, rxscan782_done
  rxscan782_scan:
    set_addr $I10, rxscan782_loop
    rx778_cur."!mark_push"(0, rx778_pos, $I10)
  rxscan782_done:
.annotate 'line', 370
  # rx subrule "ws" subtype=method negate=
    rx778_cur."!cursor_pos"(rx778_pos)
    $P10 = rx778_cur."ws"()
    unless $P10, rx778_fail
    rx778_pos = $P10."pos"()
  # rx rxquantr784 ** 0..1
    set_addr $I10, rxquantr784_done
    rx778_cur."!mark_push"(0, rx778_pos, $I10)
  rxquantr784_loop:
  # rx subrule "typename" subtype=capture negate=
    rx778_cur."!cursor_pos"(rx778_pos)
    $P10 = rx778_cur."typename"()
    unless $P10, rx778_fail
    goto rxsubrule785_pass
  rxsubrule785_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx778_fail
  rxsubrule785_pass:
    set_addr $I10, rxsubrule785_back
    rx778_cur."!mark_push"(0, rx778_pos, $I10, $P10)
    $P10."!cursor_names"("typename")
    rx778_pos = $P10."pos"()
    set_addr $I10, rxquantr784_done
    (rx778_rep) = rx778_cur."!mark_commit"($I10)
  rxquantr784_done:
  # rx subrule "ws" subtype=method negate=
    rx778_cur."!cursor_pos"(rx778_pos)
    $P10 = rx778_cur."ws"()
    unless $P10, rx778_fail
    rx778_pos = $P10."pos"()
  # rx subrule "variable" subtype=capture negate=
    rx778_cur."!cursor_pos"(rx778_pos)
    $P10 = rx778_cur."variable"()
    unless $P10, rx778_fail
    rx778_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable")
    rx778_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx778_cur."!cursor_pos"(rx778_pos)
    $P10 = rx778_cur."ws"()
    unless $P10, rx778_fail
    rx778_pos = $P10."pos"()
  # rx pass
    rx778_cur."!cursor_pass"(rx778_pos, "variable_declarator")
    if_null rx778_debug, debug_741
    rx778_cur."!cursor_debug"("PASS", "variable_declarator", " at pos=", rx778_pos)
  debug_741:
    .return (rx778_cur)
  rx778_restart:
.annotate 'line', 4
    if_null rx778_debug, debug_742
    rx778_cur."!cursor_debug"("NEXT", "variable_declarator")
  debug_742:
  rx778_fail:
    (rx778_rep, rx778_pos, $I10, $P10) = rx778_cur."!mark_fail"(0)
    lt rx778_pos, -1, rx778_done
    eq rx778_pos, -1, rx778_fail
    jump $I10
  rx778_done:
    rx778_cur."!cursor_fail"()
    if_null rx778_debug, debug_743
    rx778_cur."!cursor_debug"("FAIL", "variable_declarator")
  debug_743:
    .return (rx778_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__variable_declarator"  :nsentry("!PREFIX__variable_declarator") :subid("165_1299591493.348") :method
.annotate 'line', 4
    $P780 = self."!PREFIX__!subrule"("ws", "")
    new $P781, "ResizablePMCArray"
    push $P781, $P780
    .return ($P781)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_declarator"  :subid("166_1299591493.348")
    .param pmc param_789
.annotate 'line', 372
    .lex "self", param_789
    $P790 = param_789."!protoregex"("routine_declarator")
    .return ($P790)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__routine_declarator"  :subid("167_1299591493.348")
    .param pmc param_792
.annotate 'line', 372
    .lex "self", param_792
    $P793 = param_792."!PREFIX__!protoregex"("routine_declarator")
    .return ($P793)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_declarator:sym<sub>"  :subid("168_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx795_tgt
    .local int rx795_pos
    .local int rx795_off
    .local int rx795_eos
    .local int rx795_rep
    .local pmc rx795_cur
    .local pmc rx795_debug
    (rx795_cur, rx795_pos, rx795_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx795_cur
    .local pmc match
    .lex "$/", match
    length rx795_eos, rx795_tgt
    gt rx795_pos, rx795_eos, rx795_done
    set rx795_off, 0
    lt rx795_pos, 2, rx795_start
    sub rx795_off, rx795_pos, 1
    substr rx795_tgt, rx795_tgt, rx795_off
  rx795_start:
    eq $I10, 1, rx795_restart
    if_null rx795_debug, debug_744
    rx795_cur."!cursor_debug"("START", "routine_declarator:sym<sub>")
  debug_744:
    $I10 = self.'from'()
    ne $I10, -1, rxscan799_done
    goto rxscan799_scan
  rxscan799_loop:
    (rx795_pos) = rx795_cur."from"()
    inc rx795_pos
    rx795_cur."!cursor_from"(rx795_pos)
    ge rx795_pos, rx795_eos, rxscan799_done
  rxscan799_scan:
    set_addr $I10, rxscan799_loop
    rx795_cur."!mark_push"(0, rx795_pos, $I10)
  rxscan799_done:
.annotate 'line', 373
  # rx subcapture "sym"
    set_addr $I10, rxcap_800_fail
    rx795_cur."!mark_push"(0, rx795_pos, $I10)
  # rx literal  "sub"
    add $I11, rx795_pos, 3
    gt $I11, rx795_eos, rx795_fail
    sub $I11, rx795_pos, rx795_off
    substr $S10, rx795_tgt, $I11, 3
    ne $S10, "sub", rx795_fail
    add rx795_pos, 3
    set_addr $I10, rxcap_800_fail
    ($I12, $I11) = rx795_cur."!mark_peek"($I10)
    rx795_cur."!cursor_pos"($I11)
    ($P10) = rx795_cur."!cursor_start"()
    $P10."!cursor_pass"(rx795_pos, "")
    rx795_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_800_done
  rxcap_800_fail:
    goto rx795_fail
  rxcap_800_done:
  # rx subrule "routine_def" subtype=capture negate=
    rx795_cur."!cursor_pos"(rx795_pos)
    $P10 = rx795_cur."routine_def"()
    unless $P10, rx795_fail
    rx795_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_def")
    rx795_pos = $P10."pos"()
  # rx pass
    rx795_cur."!cursor_pass"(rx795_pos, "routine_declarator:sym<sub>")
    if_null rx795_debug, debug_745
    rx795_cur."!cursor_debug"("PASS", "routine_declarator:sym<sub>", " at pos=", rx795_pos)
  debug_745:
    .return (rx795_cur)
  rx795_restart:
.annotate 'line', 4
    if_null rx795_debug, debug_746
    rx795_cur."!cursor_debug"("NEXT", "routine_declarator:sym<sub>")
  debug_746:
  rx795_fail:
    (rx795_rep, rx795_pos, $I10, $P10) = rx795_cur."!mark_fail"(0)
    lt rx795_pos, -1, rx795_done
    eq rx795_pos, -1, rx795_fail
    jump $I10
  rx795_done:
    rx795_cur."!cursor_fail"()
    if_null rx795_debug, debug_747
    rx795_cur."!cursor_debug"("FAIL", "routine_declarator:sym<sub>")
  debug_747:
    .return (rx795_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__routine_declarator:sym<sub>"  :nsentry("!PREFIX__routine_declarator:sym<sub>") :subid("169_1299591493.348") :method
.annotate 'line', 4
    $P797 = self."!PREFIX__!subrule"("routine_def", "sub")
    new $P798, "ResizablePMCArray"
    push $P798, $P797
    .return ($P798)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_declarator:sym<method>"  :subid("170_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx802_tgt
    .local int rx802_pos
    .local int rx802_off
    .local int rx802_eos
    .local int rx802_rep
    .local pmc rx802_cur
    .local pmc rx802_debug
    (rx802_cur, rx802_pos, rx802_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx802_cur
    .local pmc match
    .lex "$/", match
    length rx802_eos, rx802_tgt
    gt rx802_pos, rx802_eos, rx802_done
    set rx802_off, 0
    lt rx802_pos, 2, rx802_start
    sub rx802_off, rx802_pos, 1
    substr rx802_tgt, rx802_tgt, rx802_off
  rx802_start:
    eq $I10, 1, rx802_restart
    if_null rx802_debug, debug_748
    rx802_cur."!cursor_debug"("START", "routine_declarator:sym<method>")
  debug_748:
    $I10 = self.'from'()
    ne $I10, -1, rxscan806_done
    goto rxscan806_scan
  rxscan806_loop:
    (rx802_pos) = rx802_cur."from"()
    inc rx802_pos
    rx802_cur."!cursor_from"(rx802_pos)
    ge rx802_pos, rx802_eos, rxscan806_done
  rxscan806_scan:
    set_addr $I10, rxscan806_loop
    rx802_cur."!mark_push"(0, rx802_pos, $I10)
  rxscan806_done:
.annotate 'line', 374
  # rx subcapture "sym"
    set_addr $I10, rxcap_807_fail
    rx802_cur."!mark_push"(0, rx802_pos, $I10)
  # rx literal  "method"
    add $I11, rx802_pos, 6
    gt $I11, rx802_eos, rx802_fail
    sub $I11, rx802_pos, rx802_off
    substr $S10, rx802_tgt, $I11, 6
    ne $S10, "method", rx802_fail
    add rx802_pos, 6
    set_addr $I10, rxcap_807_fail
    ($I12, $I11) = rx802_cur."!mark_peek"($I10)
    rx802_cur."!cursor_pos"($I11)
    ($P10) = rx802_cur."!cursor_start"()
    $P10."!cursor_pass"(rx802_pos, "")
    rx802_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_807_done
  rxcap_807_fail:
    goto rx802_fail
  rxcap_807_done:
  # rx subrule "method_def" subtype=capture negate=
    rx802_cur."!cursor_pos"(rx802_pos)
    $P10 = rx802_cur."method_def"()
    unless $P10, rx802_fail
    rx802_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("method_def")
    rx802_pos = $P10."pos"()
  # rx pass
    rx802_cur."!cursor_pass"(rx802_pos, "routine_declarator:sym<method>")
    if_null rx802_debug, debug_749
    rx802_cur."!cursor_debug"("PASS", "routine_declarator:sym<method>", " at pos=", rx802_pos)
  debug_749:
    .return (rx802_cur)
  rx802_restart:
.annotate 'line', 4
    if_null rx802_debug, debug_750
    rx802_cur."!cursor_debug"("NEXT", "routine_declarator:sym<method>")
  debug_750:
  rx802_fail:
    (rx802_rep, rx802_pos, $I10, $P10) = rx802_cur."!mark_fail"(0)
    lt rx802_pos, -1, rx802_done
    eq rx802_pos, -1, rx802_fail
    jump $I10
  rx802_done:
    rx802_cur."!cursor_fail"()
    if_null rx802_debug, debug_751
    rx802_cur."!cursor_debug"("FAIL", "routine_declarator:sym<method>")
  debug_751:
    .return (rx802_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__routine_declarator:sym<method>"  :nsentry("!PREFIX__routine_declarator:sym<method>") :subid("171_1299591493.348") :method
.annotate 'line', 4
    $P804 = self."!PREFIX__!subrule"("method_def", "method")
    new $P805, "ResizablePMCArray"
    push $P805, $P804
    .return ($P805)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_def"  :subid("172_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 377
    new $P809, "Undef"
    .lex "$*RETURN_USED", $P809
.annotate 'line', 4
    .local string rx810_tgt
    .local int rx810_pos
    .local int rx810_off
    .local int rx810_eos
    .local int rx810_rep
    .local pmc rx810_cur
    .local pmc rx810_debug
    (rx810_cur, rx810_pos, rx810_tgt, $I10) = self."!cursor_start"()
    rx810_cur."!cursor_caparray"("sigil", "deflongname", "trait")
    .lex unicode:"$\x{a2}", rx810_cur
    .local pmc match
    .lex "$/", match
    length rx810_eos, rx810_tgt
    gt rx810_pos, rx810_eos, rx810_done
    set rx810_off, 0
    lt rx810_pos, 2, rx810_start
    sub rx810_off, rx810_pos, 1
    substr rx810_tgt, rx810_tgt, rx810_off
  rx810_start:
    eq $I10, 1, rx810_restart
    if_null rx810_debug, debug_752
    rx810_cur."!cursor_debug"("START", "routine_def")
  debug_752:
    $I10 = self.'from'()
    ne $I10, -1, rxscan814_done
    goto rxscan814_scan
  rxscan814_loop:
    (rx810_pos) = rx810_cur."from"()
    inc rx810_pos
    rx810_cur."!cursor_from"(rx810_pos)
    ge rx810_pos, rx810_eos, rxscan814_done
  rxscan814_scan:
    set_addr $I10, rxscan814_loop
    rx810_cur."!mark_push"(0, rx810_pos, $I10)
  rxscan814_done:
.annotate 'line', 376
  # rx subrule "ws" subtype=method negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."ws"()
    unless $P10, rx810_fail
    rx810_pos = $P10."pos"()
.annotate 'line', 377
    rx810_cur."!cursor_pos"(rx810_pos)
    new $P816, "Integer"
    assign $P816, 0
    store_lex "$*RETURN_USED", $P816
  # rx subrule "ws" subtype=method negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."ws"()
    unless $P10, rx810_fail
    rx810_pos = $P10."pos"()
.annotate 'line', 378
  # rx rxquantr818 ** 0..1
    set_addr $I10, rxquantr818_done
    rx810_cur."!mark_push"(0, rx810_pos, $I10)
  rxquantr818_loop:
  # rx subrule "ws" subtype=method negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."ws"()
    unless $P10, rx810_fail
    rx810_pos = $P10."pos"()
  # rx subcapture "sigil"
    set_addr $I10, rxcap_821_fail
    rx810_cur."!mark_push"(0, rx810_pos, $I10)
  # rx rxquantr820 ** 0..1
    set_addr $I10, rxquantr820_done
    rx810_cur."!mark_push"(0, rx810_pos, $I10)
  rxquantr820_loop:
  # rx literal  "&"
    add $I11, rx810_pos, 1
    gt $I11, rx810_eos, rx810_fail
    sub $I11, rx810_pos, rx810_off
    ord $I11, rx810_tgt, $I11
    ne $I11, 38, rx810_fail
    add rx810_pos, 1
    set_addr $I10, rxquantr820_done
    (rx810_rep) = rx810_cur."!mark_commit"($I10)
  rxquantr820_done:
    set_addr $I10, rxcap_821_fail
    ($I12, $I11) = rx810_cur."!mark_peek"($I10)
    rx810_cur."!cursor_pos"($I11)
    ($P10) = rx810_cur."!cursor_start"()
    $P10."!cursor_pass"(rx810_pos, "")
    rx810_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    goto rxcap_821_done
  rxcap_821_fail:
    goto rx810_fail
  rxcap_821_done:
  # rx subrule "deflongname" subtype=capture negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."deflongname"()
    unless $P10, rx810_fail
    rx810_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("deflongname")
    rx810_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."ws"()
    unless $P10, rx810_fail
    rx810_pos = $P10."pos"()
    set_addr $I10, rxquantr818_done
    (rx810_rep) = rx810_cur."!mark_commit"($I10)
  rxquantr818_done:
  # rx subrule "ws" subtype=method negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."ws"()
    unless $P10, rx810_fail
    rx810_pos = $P10."pos"()
.annotate 'line', 379
  # rx subrule "newpad" subtype=method negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."newpad"()
    unless $P10, rx810_fail
    rx810_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."ws"()
    unless $P10, rx810_fail
    rx810_pos = $P10."pos"()
  alt825_0:
.annotate 'line', 380
    set_addr $I10, alt825_1
    rx810_cur."!mark_push"(0, rx810_pos, $I10)
  # rx subrule "ws" subtype=method negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."ws"()
    unless $P10, rx810_fail
    rx810_pos = $P10."pos"()
  # rx literal  "("
    add $I11, rx810_pos, 1
    gt $I11, rx810_eos, rx810_fail
    sub $I11, rx810_pos, rx810_off
    ord $I11, rx810_tgt, $I11
    ne $I11, 40, rx810_fail
    add rx810_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."ws"()
    unless $P10, rx810_fail
    rx810_pos = $P10."pos"()
  # rx subrule "signature" subtype=capture negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."signature"()
    unless $P10, rx810_fail
    rx810_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("signature")
    rx810_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."ws"()
    unless $P10, rx810_fail
    rx810_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx810_pos, 1
    gt $I11, rx810_eos, rx810_fail
    sub $I11, rx810_pos, rx810_off
    ord $I11, rx810_tgt, $I11
    ne $I11, 41, rx810_fail
    add rx810_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."ws"()
    unless $P10, rx810_fail
    rx810_pos = $P10."pos"()
    goto alt825_end
  alt825_1:
.annotate 'line', 381
  # rx subrule "ws" subtype=method negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."ws"()
    unless $P10, rx810_fail
    rx810_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."panic"("Routine declaration requires a signature")
    unless $P10, rx810_fail
    rx810_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."ws"()
    unless $P10, rx810_fail
    rx810_pos = $P10."pos"()
  alt825_end:
  # rx subrule "ws" subtype=method negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."ws"()
    unless $P10, rx810_fail
    rx810_pos = $P10."pos"()
.annotate 'line', 382
  # rx rxquantr833 ** 0..*
    set_addr $I10, rxquantr833_done
    rx810_cur."!mark_push"(0, rx810_pos, $I10)
  rxquantr833_loop:
  # rx subrule "trait" subtype=capture negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."trait"()
    unless $P10, rx810_fail
    goto rxsubrule834_pass
  rxsubrule834_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx810_fail
  rxsubrule834_pass:
    set_addr $I10, rxsubrule834_back
    rx810_cur."!mark_push"(0, rx810_pos, $I10, $P10)
    $P10."!cursor_names"("trait")
    rx810_pos = $P10."pos"()
    set_addr $I10, rxquantr833_done
    (rx810_rep) = rx810_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr833_done
    rx810_cur."!mark_push"(rx810_rep, rx810_pos, $I10)
    goto rxquantr833_loop
  rxquantr833_done:
  # rx subrule "ws" subtype=method negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."ws"()
    unless $P10, rx810_fail
    rx810_pos = $P10."pos"()
  alt836_0:
.annotate 'line', 383
    set_addr $I10, alt836_1
    rx810_cur."!mark_push"(0, rx810_pos, $I10)
.annotate 'line', 384
  # rx subrule "ws" subtype=method negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."ws"()
    unless $P10, rx810_fail
    rx810_pos = $P10."pos"()
  # rx subrule "onlystar" subtype=capture negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."onlystar"()
    unless $P10, rx810_fail
    rx810_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("onlystar")
    rx810_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."ws"()
    unless $P10, rx810_fail
    rx810_pos = $P10."pos"()
    goto alt836_end
  alt836_1:
.annotate 'line', 385
  # rx subrule "ws" subtype=method negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."ws"()
    unless $P10, rx810_fail
    rx810_pos = $P10."pos"()
  # rx subrule "blockoid" subtype=capture negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."blockoid"()
    unless $P10, rx810_fail
    rx810_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx810_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."ws"()
    unless $P10, rx810_fail
    rx810_pos = $P10."pos"()
  alt836_end:
.annotate 'line', 386
  # rx subrule "ws" subtype=method negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."ws"()
    unless $P10, rx810_fail
    rx810_pos = $P10."pos"()
.annotate 'line', 376
  # rx pass
    rx810_cur."!cursor_pass"(rx810_pos, "routine_def")
    if_null rx810_debug, debug_753
    rx810_cur."!cursor_debug"("PASS", "routine_def", " at pos=", rx810_pos)
  debug_753:
    .return (rx810_cur)
  rx810_restart:
.annotate 'line', 4
    if_null rx810_debug, debug_754
    rx810_cur."!cursor_debug"("NEXT", "routine_def")
  debug_754:
  rx810_fail:
    (rx810_rep, rx810_pos, $I10, $P10) = rx810_cur."!mark_fail"(0)
    lt rx810_pos, -1, rx810_done
    eq rx810_pos, -1, rx810_fail
    jump $I10
  rx810_done:
    rx810_cur."!cursor_fail"()
    if_null rx810_debug, debug_755
    rx810_cur."!cursor_debug"("FAIL", "routine_def")
  debug_755:
    .return (rx810_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__routine_def"  :nsentry("!PREFIX__routine_def") :subid("173_1299591493.348") :method
.annotate 'line', 4
    $P812 = self."!PREFIX__!subrule"("ws", "")
    new $P813, "ResizablePMCArray"
    push $P813, $P812
    .return ($P813)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "method_def"  :subid("174_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .const 'Sub' $P873 = "176_1299591493.348" 
    capture_lex $P873
.annotate 'line', 390
    new $P843, "Undef"
    .lex "$*RETURN_USED", $P843
.annotate 'line', 391
    new $P844, "Undef"
    .lex "$*INVOCANT_OK", $P844
.annotate 'line', 4
    .local string rx845_tgt
    .local int rx845_pos
    .local int rx845_off
    .local int rx845_eos
    .local int rx845_rep
    .local pmc rx845_cur
    .local pmc rx845_debug
    (rx845_cur, rx845_pos, rx845_tgt, $I10) = self."!cursor_start"()
    rx845_cur."!cursor_caparray"("deflongname", "trait")
    .lex unicode:"$\x{a2}", rx845_cur
    .local pmc match
    .lex "$/", match
    length rx845_eos, rx845_tgt
    gt rx845_pos, rx845_eos, rx845_done
    set rx845_off, 0
    lt rx845_pos, 2, rx845_start
    sub rx845_off, rx845_pos, 1
    substr rx845_tgt, rx845_tgt, rx845_off
  rx845_start:
    eq $I10, 1, rx845_restart
    if_null rx845_debug, debug_756
    rx845_cur."!cursor_debug"("START", "method_def")
  debug_756:
    $I10 = self.'from'()
    ne $I10, -1, rxscan849_done
    goto rxscan849_scan
  rxscan849_loop:
    (rx845_pos) = rx845_cur."from"()
    inc rx845_pos
    rx845_cur."!cursor_from"(rx845_pos)
    ge rx845_pos, rx845_eos, rxscan849_done
  rxscan849_scan:
    set_addr $I10, rxscan849_loop
    rx845_cur."!mark_push"(0, rx845_pos, $I10)
  rxscan849_done:
.annotate 'line', 389
  # rx subrule "ws" subtype=method negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."ws"()
    unless $P10, rx845_fail
    rx845_pos = $P10."pos"()
.annotate 'line', 390
    rx845_cur."!cursor_pos"(rx845_pos)
    new $P851, "Integer"
    assign $P851, 0
    store_lex "$*RETURN_USED", $P851
  # rx subrule "ws" subtype=method negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."ws"()
    unless $P10, rx845_fail
    rx845_pos = $P10."pos"()
.annotate 'line', 391
    rx845_cur."!cursor_pos"(rx845_pos)
    new $P853, "Integer"
    assign $P853, 1
    store_lex "$*INVOCANT_OK", $P853
  # rx subrule "ws" subtype=method negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."ws"()
    unless $P10, rx845_fail
    rx845_pos = $P10."pos"()
.annotate 'line', 392
  # rx subcapture "private"
    set_addr $I10, rxcap_856_fail
    rx845_cur."!mark_push"(0, rx845_pos, $I10)
  # rx rxquantr855 ** 0..1
    set_addr $I10, rxquantr855_done
    rx845_cur."!mark_push"(0, rx845_pos, $I10)
  rxquantr855_loop:
  # rx literal  "!"
    add $I11, rx845_pos, 1
    gt $I11, rx845_eos, rx845_fail
    sub $I11, rx845_pos, rx845_off
    ord $I11, rx845_tgt, $I11
    ne $I11, 33, rx845_fail
    add rx845_pos, 1
    set_addr $I10, rxquantr855_done
    (rx845_rep) = rx845_cur."!mark_commit"($I10)
  rxquantr855_done:
    set_addr $I10, rxcap_856_fail
    ($I12, $I11) = rx845_cur."!mark_peek"($I10)
    rx845_cur."!cursor_pos"($I11)
    ($P10) = rx845_cur."!cursor_start"()
    $P10."!cursor_pass"(rx845_pos, "")
    rx845_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("private")
    goto rxcap_856_done
  rxcap_856_fail:
    goto rx845_fail
  rxcap_856_done:
  # rx subrule "ws" subtype=method negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."ws"()
    unless $P10, rx845_fail
    rx845_pos = $P10."pos"()
.annotate 'line', 393
  # rx rxquantr858 ** 0..1
    set_addr $I10, rxquantr858_done
    rx845_cur."!mark_push"(0, rx845_pos, $I10)
  rxquantr858_loop:
  # rx subrule "deflongname" subtype=capture negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."deflongname"()
    unless $P10, rx845_fail
    goto rxsubrule859_pass
  rxsubrule859_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx845_fail
  rxsubrule859_pass:
    set_addr $I10, rxsubrule859_back
    rx845_cur."!mark_push"(0, rx845_pos, $I10, $P10)
    $P10."!cursor_names"("deflongname")
    rx845_pos = $P10."pos"()
    set_addr $I10, rxquantr858_done
    (rx845_rep) = rx845_cur."!mark_commit"($I10)
  rxquantr858_done:
  # rx subrule "ws" subtype=method negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."ws"()
    unless $P10, rx845_fail
    rx845_pos = $P10."pos"()
.annotate 'line', 394
  # rx subrule "newpad" subtype=method negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."newpad"()
    unless $P10, rx845_fail
    rx845_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."ws"()
    unless $P10, rx845_fail
    rx845_pos = $P10."pos"()
  alt862_0:
.annotate 'line', 395
    set_addr $I10, alt862_1
    rx845_cur."!mark_push"(0, rx845_pos, $I10)
  # rx subrule "ws" subtype=method negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."ws"()
    unless $P10, rx845_fail
    rx845_pos = $P10."pos"()
  # rx literal  "("
    add $I11, rx845_pos, 1
    gt $I11, rx845_eos, rx845_fail
    sub $I11, rx845_pos, rx845_off
    ord $I11, rx845_tgt, $I11
    ne $I11, 40, rx845_fail
    add rx845_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."ws"()
    unless $P10, rx845_fail
    rx845_pos = $P10."pos"()
  # rx subrule "signature" subtype=capture negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."signature"()
    unless $P10, rx845_fail
    rx845_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("signature")
    rx845_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."ws"()
    unless $P10, rx845_fail
    rx845_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx845_pos, 1
    gt $I11, rx845_eos, rx845_fail
    sub $I11, rx845_pos, rx845_off
    ord $I11, rx845_tgt, $I11
    ne $I11, 41, rx845_fail
    add rx845_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."ws"()
    unless $P10, rx845_fail
    rx845_pos = $P10."pos"()
    goto alt862_end
  alt862_1:
.annotate 'line', 396
  # rx subrule "ws" subtype=method negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."ws"()
    unless $P10, rx845_fail
    rx845_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."panic"("Routine declaration requires a signature")
    unless $P10, rx845_fail
    rx845_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."ws"()
    unless $P10, rx845_fail
    rx845_pos = $P10."pos"()
  alt862_end:
  # rx subrule "ws" subtype=method negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."ws"()
    unless $P10, rx845_fail
    rx845_pos = $P10."pos"()
.annotate 'line', 397
    rx845_cur."!cursor_pos"(rx845_pos)
    find_lex $P870, unicode:"$\x{a2}"
    $P871 = $P870."MATCH"()
    store_lex "$/", $P871
    .const 'Sub' $P873 = "176_1299591493.348" 
    capture_lex $P873
    $P875 = $P873()
  # rx subrule "ws" subtype=method negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."ws"()
    unless $P10, rx845_fail
    rx845_pos = $P10."pos"()
.annotate 'line', 398
  # rx rxquantr877 ** 0..*
    set_addr $I10, rxquantr877_done
    rx845_cur."!mark_push"(0, rx845_pos, $I10)
  rxquantr877_loop:
  # rx subrule "trait" subtype=capture negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."trait"()
    unless $P10, rx845_fail
    goto rxsubrule878_pass
  rxsubrule878_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx845_fail
  rxsubrule878_pass:
    set_addr $I10, rxsubrule878_back
    rx845_cur."!mark_push"(0, rx845_pos, $I10, $P10)
    $P10."!cursor_names"("trait")
    rx845_pos = $P10."pos"()
    set_addr $I10, rxquantr877_done
    (rx845_rep) = rx845_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr877_done
    rx845_cur."!mark_push"(rx845_rep, rx845_pos, $I10)
    goto rxquantr877_loop
  rxquantr877_done:
  # rx subrule "ws" subtype=method negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."ws"()
    unless $P10, rx845_fail
    rx845_pos = $P10."pos"()
  alt880_0:
.annotate 'line', 399
    set_addr $I10, alt880_1
    rx845_cur."!mark_push"(0, rx845_pos, $I10)
.annotate 'line', 400
  # rx subrule "ws" subtype=method negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."ws"()
    unless $P10, rx845_fail
    rx845_pos = $P10."pos"()
  # rx subrule "onlystar" subtype=capture negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."onlystar"()
    unless $P10, rx845_fail
    rx845_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("onlystar")
    rx845_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."ws"()
    unless $P10, rx845_fail
    rx845_pos = $P10."pos"()
    goto alt880_end
  alt880_1:
.annotate 'line', 401
  # rx subrule "ws" subtype=method negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."ws"()
    unless $P10, rx845_fail
    rx845_pos = $P10."pos"()
  # rx subrule "blockoid" subtype=capture negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."blockoid"()
    unless $P10, rx845_fail
    rx845_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx845_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."ws"()
    unless $P10, rx845_fail
    rx845_pos = $P10."pos"()
  alt880_end:
.annotate 'line', 402
  # rx subrule "ws" subtype=method negate=
    rx845_cur."!cursor_pos"(rx845_pos)
    $P10 = rx845_cur."ws"()
    unless $P10, rx845_fail
    rx845_pos = $P10."pos"()
.annotate 'line', 389
  # rx pass
    rx845_cur."!cursor_pass"(rx845_pos, "method_def")
    if_null rx845_debug, debug_757
    rx845_cur."!cursor_debug"("PASS", "method_def", " at pos=", rx845_pos)
  debug_757:
    .return (rx845_cur)
  rx845_restart:
.annotate 'line', 4
    if_null rx845_debug, debug_758
    rx845_cur."!cursor_debug"("NEXT", "method_def")
  debug_758:
  rx845_fail:
    (rx845_rep, rx845_pos, $I10, $P10) = rx845_cur."!mark_fail"(0)
    lt rx845_pos, -1, rx845_done
    eq rx845_pos, -1, rx845_fail
    jump $I10
  rx845_done:
    rx845_cur."!cursor_fail"()
    if_null rx845_debug, debug_759
    rx845_cur."!cursor_debug"("FAIL", "method_def")
  debug_759:
    .return (rx845_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__method_def"  :nsentry("!PREFIX__method_def") :subid("175_1299591493.348") :method
.annotate 'line', 4
    $P847 = self."!PREFIX__!subrule"("ws", "")
    new $P848, "ResizablePMCArray"
    push $P848, $P847
    .return ($P848)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block872"  :anon :subid("176_1299591493.348") :outer("174_1299591493.348")
.annotate 'line', 397
    new $P874, "Integer"
    assign $P874, 0
    store_dynamic_lex "$*INVOCANT_OK", $P874
    .return ($P874)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "onlystar"  :subid("177_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .const 'Sub' $P894 = "179_1299591493.348" 
    capture_lex $P894
    .local string rx887_tgt
    .local int rx887_pos
    .local int rx887_off
    .local int rx887_eos
    .local int rx887_rep
    .local pmc rx887_cur
    .local pmc rx887_debug
    (rx887_cur, rx887_pos, rx887_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx887_cur
    .local pmc match
    .lex "$/", match
    length rx887_eos, rx887_tgt
    gt rx887_pos, rx887_eos, rx887_done
    set rx887_off, 0
    lt rx887_pos, 2, rx887_start
    sub rx887_off, rx887_pos, 1
    substr rx887_tgt, rx887_tgt, rx887_off
  rx887_start:
    eq $I10, 1, rx887_restart
    if_null rx887_debug, debug_760
    rx887_cur."!cursor_debug"("START", "onlystar")
  debug_760:
    $I10 = self.'from'()
    ne $I10, -1, rxscan890_done
    goto rxscan890_scan
  rxscan890_loop:
    (rx887_pos) = rx887_cur."from"()
    inc rx887_pos
    rx887_cur."!cursor_from"(rx887_pos)
    ge rx887_pos, rx887_eos, rxscan890_done
  rxscan890_scan:
    set_addr $I10, rxscan890_loop
    rx887_cur."!mark_push"(0, rx887_pos, $I10)
  rxscan890_done:
.annotate 'line', 406
    rx887_cur."!cursor_pos"(rx887_pos)
    find_lex $P891, unicode:"$\x{a2}"
    $P892 = $P891."MATCH"()
    store_lex "$/", $P892
    .const 'Sub' $P894 = "179_1299591493.348" 
    capture_lex $P894
    $P898 = $P894()
    unless $P898, rx887_fail
.annotate 'line', 407
  # rx literal  "{"
    add $I11, rx887_pos, 1
    gt $I11, rx887_eos, rx887_fail
    sub $I11, rx887_pos, rx887_off
    ord $I11, rx887_tgt, $I11
    ne $I11, 123, rx887_fail
    add rx887_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx887_cur."!cursor_pos"(rx887_pos)
    $P10 = rx887_cur."ws"()
    unless $P10, rx887_fail
    rx887_pos = $P10."pos"()
  # rx literal  "*"
    add $I11, rx887_pos, 1
    gt $I11, rx887_eos, rx887_fail
    sub $I11, rx887_pos, rx887_off
    ord $I11, rx887_tgt, $I11
    ne $I11, 42, rx887_fail
    add rx887_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx887_cur."!cursor_pos"(rx887_pos)
    $P10 = rx887_cur."ws"()
    unless $P10, rx887_fail
    rx887_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx887_pos, 1
    gt $I11, rx887_eos, rx887_fail
    sub $I11, rx887_pos, rx887_off
    ord $I11, rx887_tgt, $I11
    ne $I11, 125, rx887_fail
    add rx887_pos, 1
.annotate 'line', 408
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx887_cur."!cursor_pos"(rx887_pos)
    $P10 = rx887_cur."ENDSTMT"()
    unless $P10, rx887_fail
.annotate 'line', 409
  # rx subrule "finishpad" subtype=method negate=
    rx887_cur."!cursor_pos"(rx887_pos)
    $P10 = rx887_cur."finishpad"()
    unless $P10, rx887_fail
    rx887_pos = $P10."pos"()
.annotate 'line', 405
  # rx pass
    rx887_cur."!cursor_pass"(rx887_pos, "onlystar")
    if_null rx887_debug, debug_763
    rx887_cur."!cursor_debug"("PASS", "onlystar", " at pos=", rx887_pos)
  debug_763:
    .return (rx887_cur)
  rx887_restart:
.annotate 'line', 4
    if_null rx887_debug, debug_764
    rx887_cur."!cursor_debug"("NEXT", "onlystar")
  debug_764:
  rx887_fail:
    (rx887_rep, rx887_pos, $I10, $P10) = rx887_cur."!mark_fail"(0)
    lt rx887_pos, -1, rx887_done
    eq rx887_pos, -1, rx887_fail
    jump $I10
  rx887_done:
    rx887_cur."!cursor_fail"()
    if_null rx887_debug, debug_765
    rx887_cur."!cursor_debug"("FAIL", "onlystar")
  debug_765:
    .return (rx887_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__onlystar"  :nsentry("!PREFIX__onlystar") :subid("178_1299591493.348") :method
.annotate 'line', 4
    new $P889, "ResizablePMCArray"
    push $P889, ""
    .return ($P889)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block893"  :anon :subid("179_1299591493.348") :outer("177_1299591493.348")
.annotate 'line', 406
    find_dynamic_lex $P895, "$*MULTINESS"
    unless_null $P895, vivify_761
    get_hll_global $P895, "$MULTINESS"
    unless_null $P895, vivify_762
    die "Contextual $*MULTINESS not found"
  vivify_762:
  vivify_761:
    set $S896, $P895
    iseq $I897, $S896, "proto"
    .return ($I897)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator"  :subid("180_1299591493.348")
    .param pmc param_900
.annotate 'line', 412
    .lex "self", param_900
    $P901 = param_900."!protoregex"("multi_declarator")
    .return ($P901)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__multi_declarator"  :subid("181_1299591493.348")
    .param pmc param_903
.annotate 'line', 412
    .lex "self", param_903
    $P904 = param_903."!PREFIX__!protoregex"("multi_declarator")
    .return ($P904)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator:sym<multi>"  :subid("182_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 414
    new $P906, "Undef"
    .lex "$*MULTINESS", $P906
.annotate 'line', 4
    .local string rx907_tgt
    .local int rx907_pos
    .local int rx907_off
    .local int rx907_eos
    .local int rx907_rep
    .local pmc rx907_cur
    .local pmc rx907_debug
    (rx907_cur, rx907_pos, rx907_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx907_cur
    .local pmc match
    .lex "$/", match
    length rx907_eos, rx907_tgt
    gt rx907_pos, rx907_eos, rx907_done
    set rx907_off, 0
    lt rx907_pos, 2, rx907_start
    sub rx907_off, rx907_pos, 1
    substr rx907_tgt, rx907_tgt, rx907_off
  rx907_start:
    eq $I10, 1, rx907_restart
    if_null rx907_debug, debug_766
    rx907_cur."!cursor_debug"("START", "multi_declarator:sym<multi>")
  debug_766:
    $I10 = self.'from'()
    ne $I10, -1, rxscan911_done
    goto rxscan911_scan
  rxscan911_loop:
    (rx907_pos) = rx907_cur."from"()
    inc rx907_pos
    rx907_cur."!cursor_from"(rx907_pos)
    ge rx907_pos, rx907_eos, rxscan911_done
  rxscan911_scan:
    set_addr $I10, rxscan911_loop
    rx907_cur."!mark_push"(0, rx907_pos, $I10)
  rxscan911_done:
.annotate 'line', 414
    rx907_cur."!cursor_pos"(rx907_pos)
    new $P912, "String"
    assign $P912, "multi"
    store_lex "$*MULTINESS", $P912
.annotate 'line', 415
  # rx subcapture "sym"
    set_addr $I10, rxcap_913_fail
    rx907_cur."!mark_push"(0, rx907_pos, $I10)
  # rx literal  "multi"
    add $I11, rx907_pos, 5
    gt $I11, rx907_eos, rx907_fail
    sub $I11, rx907_pos, rx907_off
    substr $S10, rx907_tgt, $I11, 5
    ne $S10, "multi", rx907_fail
    add rx907_pos, 5
    set_addr $I10, rxcap_913_fail
    ($I12, $I11) = rx907_cur."!mark_peek"($I10)
    rx907_cur."!cursor_pos"($I11)
    ($P10) = rx907_cur."!cursor_start"()
    $P10."!cursor_pass"(rx907_pos, "")
    rx907_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_913_done
  rxcap_913_fail:
    goto rx907_fail
  rxcap_913_done:
.annotate 'line', 416
  # rx subrule "ws" subtype=method negate=
    rx907_cur."!cursor_pos"(rx907_pos)
    $P10 = rx907_cur."ws"()
    unless $P10, rx907_fail
    rx907_pos = $P10."pos"()
  alt914_0:
    set_addr $I10, alt914_1
    rx907_cur."!mark_push"(0, rx907_pos, $I10)
  # rx subrule "declarator" subtype=capture negate=
    rx907_cur."!cursor_pos"(rx907_pos)
    $P10 = rx907_cur."declarator"()
    unless $P10, rx907_fail
    rx907_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("declarator")
    rx907_pos = $P10."pos"()
    goto alt914_end
  alt914_1:
    set_addr $I10, alt914_2
    rx907_cur."!mark_push"(0, rx907_pos, $I10)
  # rx subrule "routine_def" subtype=capture negate=
    rx907_cur."!cursor_pos"(rx907_pos)
    $P10 = rx907_cur."routine_def"()
    unless $P10, rx907_fail
    rx907_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_def")
    rx907_pos = $P10."pos"()
    goto alt914_end
  alt914_2:
  # rx subrule "panic" subtype=method negate=
    rx907_cur."!cursor_pos"(rx907_pos)
    $P10 = rx907_cur."panic"("Malformed multi")
    unless $P10, rx907_fail
    rx907_pos = $P10."pos"()
  alt914_end:
.annotate 'line', 413
  # rx pass
    rx907_cur."!cursor_pass"(rx907_pos, "multi_declarator:sym<multi>")
    if_null rx907_debug, debug_767
    rx907_cur."!cursor_debug"("PASS", "multi_declarator:sym<multi>", " at pos=", rx907_pos)
  debug_767:
    .return (rx907_cur)
  rx907_restart:
.annotate 'line', 4
    if_null rx907_debug, debug_768
    rx907_cur."!cursor_debug"("NEXT", "multi_declarator:sym<multi>")
  debug_768:
  rx907_fail:
    (rx907_rep, rx907_pos, $I10, $P10) = rx907_cur."!mark_fail"(0)
    lt rx907_pos, -1, rx907_done
    eq rx907_pos, -1, rx907_fail
    jump $I10
  rx907_done:
    rx907_cur."!cursor_fail"()
    if_null rx907_debug, debug_769
    rx907_cur."!cursor_debug"("FAIL", "multi_declarator:sym<multi>")
  debug_769:
    .return (rx907_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__multi_declarator:sym<multi>"  :nsentry("!PREFIX__multi_declarator:sym<multi>") :subid("183_1299591493.348") :method
.annotate 'line', 4
    $P909 = self."!PREFIX__!subrule"("ws", "multi")
    new $P910, "ResizablePMCArray"
    push $P910, $P909
    .return ($P910)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator:sym<proto>"  :subid("184_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 419
    new $P916, "Undef"
    .lex "$*MULTINESS", $P916
.annotate 'line', 4
    .local string rx917_tgt
    .local int rx917_pos
    .local int rx917_off
    .local int rx917_eos
    .local int rx917_rep
    .local pmc rx917_cur
    .local pmc rx917_debug
    (rx917_cur, rx917_pos, rx917_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx917_cur
    .local pmc match
    .lex "$/", match
    length rx917_eos, rx917_tgt
    gt rx917_pos, rx917_eos, rx917_done
    set rx917_off, 0
    lt rx917_pos, 2, rx917_start
    sub rx917_off, rx917_pos, 1
    substr rx917_tgt, rx917_tgt, rx917_off
  rx917_start:
    eq $I10, 1, rx917_restart
    if_null rx917_debug, debug_770
    rx917_cur."!cursor_debug"("START", "multi_declarator:sym<proto>")
  debug_770:
    $I10 = self.'from'()
    ne $I10, -1, rxscan921_done
    goto rxscan921_scan
  rxscan921_loop:
    (rx917_pos) = rx917_cur."from"()
    inc rx917_pos
    rx917_cur."!cursor_from"(rx917_pos)
    ge rx917_pos, rx917_eos, rxscan921_done
  rxscan921_scan:
    set_addr $I10, rxscan921_loop
    rx917_cur."!mark_push"(0, rx917_pos, $I10)
  rxscan921_done:
.annotate 'line', 419
    rx917_cur."!cursor_pos"(rx917_pos)
    new $P922, "String"
    assign $P922, "proto"
    store_lex "$*MULTINESS", $P922
.annotate 'line', 420
  # rx subcapture "sym"
    set_addr $I10, rxcap_923_fail
    rx917_cur."!mark_push"(0, rx917_pos, $I10)
  # rx literal  "proto"
    add $I11, rx917_pos, 5
    gt $I11, rx917_eos, rx917_fail
    sub $I11, rx917_pos, rx917_off
    substr $S10, rx917_tgt, $I11, 5
    ne $S10, "proto", rx917_fail
    add rx917_pos, 5
    set_addr $I10, rxcap_923_fail
    ($I12, $I11) = rx917_cur."!mark_peek"($I10)
    rx917_cur."!cursor_pos"($I11)
    ($P10) = rx917_cur."!cursor_start"()
    $P10."!cursor_pass"(rx917_pos, "")
    rx917_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_923_done
  rxcap_923_fail:
    goto rx917_fail
  rxcap_923_done:
.annotate 'line', 421
  # rx subrule "ws" subtype=method negate=
    rx917_cur."!cursor_pos"(rx917_pos)
    $P10 = rx917_cur."ws"()
    unless $P10, rx917_fail
    rx917_pos = $P10."pos"()
  alt924_0:
    set_addr $I10, alt924_1
    rx917_cur."!mark_push"(0, rx917_pos, $I10)
  # rx subrule "declarator" subtype=capture negate=
    rx917_cur."!cursor_pos"(rx917_pos)
    $P10 = rx917_cur."declarator"()
    unless $P10, rx917_fail
    rx917_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("declarator")
    rx917_pos = $P10."pos"()
    goto alt924_end
  alt924_1:
    set_addr $I10, alt924_2
    rx917_cur."!mark_push"(0, rx917_pos, $I10)
  # rx subrule "routine_def" subtype=capture negate=
    rx917_cur."!cursor_pos"(rx917_pos)
    $P10 = rx917_cur."routine_def"()
    unless $P10, rx917_fail
    rx917_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_def")
    rx917_pos = $P10."pos"()
    goto alt924_end
  alt924_2:
  # rx subrule "panic" subtype=method negate=
    rx917_cur."!cursor_pos"(rx917_pos)
    $P10 = rx917_cur."panic"("Malformed proto")
    unless $P10, rx917_fail
    rx917_pos = $P10."pos"()
  alt924_end:
.annotate 'line', 418
  # rx pass
    rx917_cur."!cursor_pass"(rx917_pos, "multi_declarator:sym<proto>")
    if_null rx917_debug, debug_771
    rx917_cur."!cursor_debug"("PASS", "multi_declarator:sym<proto>", " at pos=", rx917_pos)
  debug_771:
    .return (rx917_cur)
  rx917_restart:
.annotate 'line', 4
    if_null rx917_debug, debug_772
    rx917_cur."!cursor_debug"("NEXT", "multi_declarator:sym<proto>")
  debug_772:
  rx917_fail:
    (rx917_rep, rx917_pos, $I10, $P10) = rx917_cur."!mark_fail"(0)
    lt rx917_pos, -1, rx917_done
    eq rx917_pos, -1, rx917_fail
    jump $I10
  rx917_done:
    rx917_cur."!cursor_fail"()
    if_null rx917_debug, debug_773
    rx917_cur."!cursor_debug"("FAIL", "multi_declarator:sym<proto>")
  debug_773:
    .return (rx917_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__multi_declarator:sym<proto>"  :nsentry("!PREFIX__multi_declarator:sym<proto>") :subid("185_1299591493.348") :method
.annotate 'line', 4
    $P919 = self."!PREFIX__!subrule"("ws", "proto")
    new $P920, "ResizablePMCArray"
    push $P920, $P919
    .return ($P920)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator:sym<null>"  :subid("186_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 424
    new $P926, "Undef"
    .lex "$*MULTINESS", $P926
.annotate 'line', 4
    .local string rx927_tgt
    .local int rx927_pos
    .local int rx927_off
    .local int rx927_eos
    .local int rx927_rep
    .local pmc rx927_cur
    .local pmc rx927_debug
    (rx927_cur, rx927_pos, rx927_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx927_cur
    .local pmc match
    .lex "$/", match
    length rx927_eos, rx927_tgt
    gt rx927_pos, rx927_eos, rx927_done
    set rx927_off, 0
    lt rx927_pos, 2, rx927_start
    sub rx927_off, rx927_pos, 1
    substr rx927_tgt, rx927_tgt, rx927_off
  rx927_start:
    eq $I10, 1, rx927_restart
    if_null rx927_debug, debug_774
    rx927_cur."!cursor_debug"("START", "multi_declarator:sym<null>")
  debug_774:
    $I10 = self.'from'()
    ne $I10, -1, rxscan931_done
    goto rxscan931_scan
  rxscan931_loop:
    (rx927_pos) = rx927_cur."from"()
    inc rx927_pos
    rx927_cur."!cursor_from"(rx927_pos)
    ge rx927_pos, rx927_eos, rxscan931_done
  rxscan931_scan:
    set_addr $I10, rxscan931_loop
    rx927_cur."!mark_push"(0, rx927_pos, $I10)
  rxscan931_done:
.annotate 'line', 424
    rx927_cur."!cursor_pos"(rx927_pos)
    new $P932, "String"
    assign $P932, ""
    store_lex "$*MULTINESS", $P932
.annotate 'line', 425
  # rx subrule "declarator" subtype=capture negate=
    rx927_cur."!cursor_pos"(rx927_pos)
    $P10 = rx927_cur."declarator"()
    unless $P10, rx927_fail
    rx927_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("declarator")
    rx927_pos = $P10."pos"()
.annotate 'line', 423
  # rx pass
    rx927_cur."!cursor_pass"(rx927_pos, "multi_declarator:sym<null>")
    if_null rx927_debug, debug_775
    rx927_cur."!cursor_debug"("PASS", "multi_declarator:sym<null>", " at pos=", rx927_pos)
  debug_775:
    .return (rx927_cur)
  rx927_restart:
.annotate 'line', 4
    if_null rx927_debug, debug_776
    rx927_cur."!cursor_debug"("NEXT", "multi_declarator:sym<null>")
  debug_776:
  rx927_fail:
    (rx927_rep, rx927_pos, $I10, $P10) = rx927_cur."!mark_fail"(0)
    lt rx927_pos, -1, rx927_done
    eq rx927_pos, -1, rx927_fail
    jump $I10
  rx927_done:
    rx927_cur."!cursor_fail"()
    if_null rx927_debug, debug_777
    rx927_cur."!cursor_debug"("FAIL", "multi_declarator:sym<null>")
  debug_777:
    .return (rx927_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__multi_declarator:sym<null>"  :nsentry("!PREFIX__multi_declarator:sym<null>") :subid("187_1299591493.348") :method
.annotate 'line', 4
    $P929 = self."!PREFIX__!subrule"("declarator", "")
    new $P930, "ResizablePMCArray"
    push $P930, $P929
    .return ($P930)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "signature"  :subid("188_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .const 'Sub' $P942 = "190_1299591493.348" 
    capture_lex $P942
    .local string rx934_tgt
    .local int rx934_pos
    .local int rx934_off
    .local int rx934_eos
    .local int rx934_rep
    .local pmc rx934_cur
    .local pmc rx934_debug
    (rx934_cur, rx934_pos, rx934_tgt, $I10) = self."!cursor_start"()
    rx934_cur."!cursor_caparray"("invocant", "parameter")
    .lex unicode:"$\x{a2}", rx934_cur
    .local pmc match
    .lex "$/", match
    length rx934_eos, rx934_tgt
    gt rx934_pos, rx934_eos, rx934_done
    set rx934_off, 0
    lt rx934_pos, 2, rx934_start
    sub rx934_off, rx934_pos, 1
    substr rx934_tgt, rx934_tgt, rx934_off
  rx934_start:
    eq $I10, 1, rx934_restart
    if_null rx934_debug, debug_778
    rx934_cur."!cursor_debug"("START", "signature")
  debug_778:
    $I10 = self.'from'()
    ne $I10, -1, rxscan937_done
    goto rxscan937_scan
  rxscan937_loop:
    (rx934_pos) = rx934_cur."from"()
    inc rx934_pos
    rx934_cur."!cursor_from"(rx934_pos)
    ge rx934_pos, rx934_eos, rxscan937_done
  rxscan937_scan:
    set_addr $I10, rxscan937_loop
    rx934_cur."!mark_push"(0, rx934_pos, $I10)
  rxscan937_done:
.annotate 'line', 429
  # rx rxquantr938 ** 0..1
    set_addr $I10, rxquantr938_done
    rx934_cur."!mark_push"(0, rx934_pos, $I10)
  rxquantr938_loop:
    rx934_cur."!cursor_pos"(rx934_pos)
    find_lex $P939, unicode:"$\x{a2}"
    $P940 = $P939."MATCH"()
    store_lex "$/", $P940
    .const 'Sub' $P942 = "190_1299591493.348" 
    capture_lex $P942
    $P944 = $P942()
    unless $P944, rx934_fail
  # rx subrule "ws" subtype=method negate=
    rx934_cur."!cursor_pos"(rx934_pos)
    $P10 = rx934_cur."ws"()
    unless $P10, rx934_fail
    rx934_pos = $P10."pos"()
  # rx subrule "parameter" subtype=capture negate=
    rx934_cur."!cursor_pos"(rx934_pos)
    $P10 = rx934_cur."parameter"()
    unless $P10, rx934_fail
    rx934_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("invocant")
    rx934_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx934_cur."!cursor_pos"(rx934_pos)
    $P10 = rx934_cur."ws"()
    unless $P10, rx934_fail
    rx934_pos = $P10."pos"()
  # rx literal  ":"
    add $I11, rx934_pos, 1
    gt $I11, rx934_eos, rx934_fail
    sub $I11, rx934_pos, rx934_off
    ord $I11, rx934_tgt, $I11
    ne $I11, 58, rx934_fail
    add rx934_pos, 1
    set_addr $I10, rxquantr938_done
    (rx934_rep) = rx934_cur."!mark_commit"($I10)
  rxquantr938_done:
.annotate 'line', 430
  # rx rxquantr945 ** 0..1
    set_addr $I10, rxquantr945_done
    rx934_cur."!mark_push"(0, rx934_pos, $I10)
  rxquantr945_loop:
  # rx rxquantr946 ** 1..*
    set_addr $I10, rxquantr946_done
    rx934_cur."!mark_push"(0, -1, $I10)
  rxquantr946_loop:
  # rx subrule "ws" subtype=method negate=
    rx934_cur."!cursor_pos"(rx934_pos)
    $P10 = rx934_cur."ws"()
    unless $P10, rx934_fail
    rx934_pos = $P10."pos"()
  # rx subrule "parameter" subtype=capture negate=
    rx934_cur."!cursor_pos"(rx934_pos)
    $P10 = rx934_cur."parameter"()
    unless $P10, rx934_fail
    rx934_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("parameter")
    rx934_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx934_cur."!cursor_pos"(rx934_pos)
    $P10 = rx934_cur."ws"()
    unless $P10, rx934_fail
    rx934_pos = $P10."pos"()
    set_addr $I10, rxquantr946_done
    (rx934_rep) = rx934_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr946_done
    rx934_cur."!mark_push"(rx934_rep, rx934_pos, $I10)
  # rx literal  ","
    add $I11, rx934_pos, 1
    gt $I11, rx934_eos, rx934_fail
    sub $I11, rx934_pos, rx934_off
    ord $I11, rx934_tgt, $I11
    ne $I11, 44, rx934_fail
    add rx934_pos, 1
    goto rxquantr946_loop
  rxquantr946_done:
    set_addr $I10, rxquantr945_done
    (rx934_rep) = rx934_cur."!mark_commit"($I10)
  rxquantr945_done:
.annotate 'line', 428
  # rx pass
    rx934_cur."!cursor_pass"(rx934_pos, "signature")
    if_null rx934_debug, debug_781
    rx934_cur."!cursor_debug"("PASS", "signature", " at pos=", rx934_pos)
  debug_781:
    .return (rx934_cur)
  rx934_restart:
.annotate 'line', 4
    if_null rx934_debug, debug_782
    rx934_cur."!cursor_debug"("NEXT", "signature")
  debug_782:
  rx934_fail:
    (rx934_rep, rx934_pos, $I10, $P10) = rx934_cur."!mark_fail"(0)
    lt rx934_pos, -1, rx934_done
    eq rx934_pos, -1, rx934_fail
    jump $I10
  rx934_done:
    rx934_cur."!cursor_fail"()
    if_null rx934_debug, debug_783
    rx934_cur."!cursor_debug"("FAIL", "signature")
  debug_783:
    .return (rx934_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__signature"  :nsentry("!PREFIX__signature") :subid("189_1299591493.348") :method
.annotate 'line', 4
    new $P936, "ResizablePMCArray"
    push $P936, ""
    .return ($P936)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block941"  :anon :subid("190_1299591493.348") :outer("188_1299591493.348")
.annotate 'line', 429
    find_dynamic_lex $P943, "$*INVOCANT_OK"
    unless_null $P943, vivify_779
    get_hll_global $P943, "$INVOCANT_OK"
    unless_null $P943, vivify_780
    die "Contextual $*INVOCANT_OK not found"
  vivify_780:
  vivify_779:
    .return ($P943)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "parameter"  :subid("191_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx948_tgt
    .local int rx948_pos
    .local int rx948_off
    .local int rx948_eos
    .local int rx948_rep
    .local pmc rx948_cur
    .local pmc rx948_debug
    (rx948_cur, rx948_pos, rx948_tgt, $I10) = self."!cursor_start"()
    rx948_cur."!cursor_caparray"("typename", "definedness", "default_value")
    .lex unicode:"$\x{a2}", rx948_cur
    .local pmc match
    .lex "$/", match
    length rx948_eos, rx948_tgt
    gt rx948_pos, rx948_eos, rx948_done
    set rx948_off, 0
    lt rx948_pos, 2, rx948_start
    sub rx948_off, rx948_pos, 1
    substr rx948_tgt, rx948_tgt, rx948_off
  rx948_start:
    eq $I10, 1, rx948_restart
    if_null rx948_debug, debug_784
    rx948_cur."!cursor_debug"("START", "parameter")
  debug_784:
    $I10 = self.'from'()
    ne $I10, -1, rxscan951_done
    goto rxscan951_scan
  rxscan951_loop:
    (rx948_pos) = rx948_cur."from"()
    inc rx948_pos
    rx948_cur."!cursor_from"(rx948_pos)
    ge rx948_pos, rx948_eos, rxscan951_done
  rxscan951_scan:
    set_addr $I10, rxscan951_loop
    rx948_cur."!mark_push"(0, rx948_pos, $I10)
  rxscan951_done:
.annotate 'line', 434
  # rx rxquantr952 ** 0..*
    set_addr $I10, rxquantr952_done
    rx948_cur."!mark_push"(0, rx948_pos, $I10)
  rxquantr952_loop:
  # rx subrule "typename" subtype=capture negate=
    rx948_cur."!cursor_pos"(rx948_pos)
    $P10 = rx948_cur."typename"()
    unless $P10, rx948_fail
    rx948_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("typename")
    rx948_pos = $P10."pos"()
  # rx rxquantr953 ** 0..1
    set_addr $I10, rxquantr953_done
    rx948_cur."!mark_push"(0, rx948_pos, $I10)
  rxquantr953_loop:
  # rx literal  ":"
    add $I11, rx948_pos, 1
    gt $I11, rx948_eos, rx948_fail
    sub $I11, rx948_pos, rx948_off
    ord $I11, rx948_tgt, $I11
    ne $I11, 58, rx948_fail
    add rx948_pos, 1
  # rx subcapture "definedness"
    set_addr $I10, rxcap_954_fail
    rx948_cur."!mark_push"(0, rx948_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx948_pos, rx948_eos, rx948_fail
    sub $I10, rx948_pos, rx948_off
    substr $S10, rx948_tgt, $I10, 1
    index $I11, "_DU", $S10
    lt $I11, 0, rx948_fail
    inc rx948_pos
    set_addr $I10, rxcap_954_fail
    ($I12, $I11) = rx948_cur."!mark_peek"($I10)
    rx948_cur."!cursor_pos"($I11)
    ($P10) = rx948_cur."!cursor_start"()
    $P10."!cursor_pass"(rx948_pos, "")
    rx948_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("definedness")
    goto rxcap_954_done
  rxcap_954_fail:
    goto rx948_fail
  rxcap_954_done:
    set_addr $I10, rxquantr953_done
    (rx948_rep) = rx948_cur."!mark_commit"($I10)
  rxquantr953_done:
  # rx subrule "ws" subtype=method negate=
    rx948_cur."!cursor_pos"(rx948_pos)
    $P10 = rx948_cur."ws"()
    unless $P10, rx948_fail
    rx948_pos = $P10."pos"()
    set_addr $I10, rxquantr952_done
    (rx948_rep) = rx948_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr952_done
    rx948_cur."!mark_push"(rx948_rep, rx948_pos, $I10)
    goto rxquantr952_loop
  rxquantr952_done:
  alt955_0:
.annotate 'line', 435
    set_addr $I10, alt955_1
    rx948_cur."!mark_push"(0, rx948_pos, $I10)
.annotate 'line', 436
  # rx subcapture "quant"
    set_addr $I10, rxcap_956_fail
    rx948_cur."!mark_push"(0, rx948_pos, $I10)
  # rx literal  "*"
    add $I11, rx948_pos, 1
    gt $I11, rx948_eos, rx948_fail
    sub $I11, rx948_pos, rx948_off
    ord $I11, rx948_tgt, $I11
    ne $I11, 42, rx948_fail
    add rx948_pos, 1
    set_addr $I10, rxcap_956_fail
    ($I12, $I11) = rx948_cur."!mark_peek"($I10)
    rx948_cur."!cursor_pos"($I11)
    ($P10) = rx948_cur."!cursor_start"()
    $P10."!cursor_pass"(rx948_pos, "")
    rx948_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quant")
    goto rxcap_956_done
  rxcap_956_fail:
    goto rx948_fail
  rxcap_956_done:
  # rx subrule "param_var" subtype=capture negate=
    rx948_cur."!cursor_pos"(rx948_pos)
    $P10 = rx948_cur."param_var"()
    unless $P10, rx948_fail
    rx948_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("param_var")
    rx948_pos = $P10."pos"()
    goto alt955_end
  alt955_1:
  alt957_0:
.annotate 'line', 437
    set_addr $I10, alt957_1
    rx948_cur."!mark_push"(0, rx948_pos, $I10)
  # rx subrule "param_var" subtype=capture negate=
    rx948_cur."!cursor_pos"(rx948_pos)
    $P10 = rx948_cur."param_var"()
    unless $P10, rx948_fail
    rx948_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("param_var")
    rx948_pos = $P10."pos"()
    goto alt957_end
  alt957_1:
  # rx subrule "named_param" subtype=capture negate=
    rx948_cur."!cursor_pos"(rx948_pos)
    $P10 = rx948_cur."named_param"()
    unless $P10, rx948_fail
    rx948_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("named_param")
    rx948_pos = $P10."pos"()
  alt957_end:
  # rx subcapture "quant"
    set_addr $I10, rxcap_959_fail
    rx948_cur."!mark_push"(0, rx948_pos, $I10)
  alt958_0:
    set_addr $I10, alt958_1
    rx948_cur."!mark_push"(0, rx948_pos, $I10)
  # rx literal  "?"
    add $I11, rx948_pos, 1
    gt $I11, rx948_eos, rx948_fail
    sub $I11, rx948_pos, rx948_off
    ord $I11, rx948_tgt, $I11
    ne $I11, 63, rx948_fail
    add rx948_pos, 1
    goto alt958_end
  alt958_1:
    set_addr $I10, alt958_2
    rx948_cur."!mark_push"(0, rx948_pos, $I10)
  # rx literal  "!"
    add $I11, rx948_pos, 1
    gt $I11, rx948_eos, rx948_fail
    sub $I11, rx948_pos, rx948_off
    ord $I11, rx948_tgt, $I11
    ne $I11, 33, rx948_fail
    add rx948_pos, 1
    goto alt958_end
  alt958_2:
  alt958_end:
    set_addr $I10, rxcap_959_fail
    ($I12, $I11) = rx948_cur."!mark_peek"($I10)
    rx948_cur."!cursor_pos"($I11)
    ($P10) = rx948_cur."!cursor_start"()
    $P10."!cursor_pass"(rx948_pos, "")
    rx948_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quant")
    goto rxcap_959_done
  rxcap_959_fail:
    goto rx948_fail
  rxcap_959_done:
  alt955_end:
.annotate 'line', 439
  # rx rxquantr960 ** 0..1
    set_addr $I10, rxquantr960_done
    rx948_cur."!mark_push"(0, rx948_pos, $I10)
  rxquantr960_loop:
  # rx subrule "default_value" subtype=capture negate=
    rx948_cur."!cursor_pos"(rx948_pos)
    $P10 = rx948_cur."default_value"()
    unless $P10, rx948_fail
    goto rxsubrule961_pass
  rxsubrule961_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx948_fail
  rxsubrule961_pass:
    set_addr $I10, rxsubrule961_back
    rx948_cur."!mark_push"(0, rx948_pos, $I10, $P10)
    $P10."!cursor_names"("default_value")
    rx948_pos = $P10."pos"()
    set_addr $I10, rxquantr960_done
    (rx948_rep) = rx948_cur."!mark_commit"($I10)
  rxquantr960_done:
.annotate 'line', 433
  # rx pass
    rx948_cur."!cursor_pass"(rx948_pos, "parameter")
    if_null rx948_debug, debug_785
    rx948_cur."!cursor_debug"("PASS", "parameter", " at pos=", rx948_pos)
  debug_785:
    .return (rx948_cur)
  rx948_restart:
.annotate 'line', 4
    if_null rx948_debug, debug_786
    rx948_cur."!cursor_debug"("NEXT", "parameter")
  debug_786:
  rx948_fail:
    (rx948_rep, rx948_pos, $I10, $P10) = rx948_cur."!mark_fail"(0)
    lt rx948_pos, -1, rx948_done
    eq rx948_pos, -1, rx948_fail
    jump $I10
  rx948_done:
    rx948_cur."!cursor_fail"()
    if_null rx948_debug, debug_787
    rx948_cur."!cursor_debug"("FAIL", "parameter")
  debug_787:
    .return (rx948_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__parameter"  :nsentry("!PREFIX__parameter") :subid("192_1299591493.348") :method
.annotate 'line', 4
    new $P950, "ResizablePMCArray"
    push $P950, ""
    .return ($P950)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "param_var"  :subid("193_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx963_tgt
    .local int rx963_pos
    .local int rx963_off
    .local int rx963_eos
    .local int rx963_rep
    .local pmc rx963_cur
    .local pmc rx963_debug
    (rx963_cur, rx963_pos, rx963_tgt, $I10) = self."!cursor_start"()
    rx963_cur."!cursor_caparray"("twigil")
    .lex unicode:"$\x{a2}", rx963_cur
    .local pmc match
    .lex "$/", match
    length rx963_eos, rx963_tgt
    gt rx963_pos, rx963_eos, rx963_done
    set rx963_off, 0
    lt rx963_pos, 2, rx963_start
    sub rx963_off, rx963_pos, 1
    substr rx963_tgt, rx963_tgt, rx963_off
  rx963_start:
    eq $I10, 1, rx963_restart
    if_null rx963_debug, debug_788
    rx963_cur."!cursor_debug"("START", "param_var")
  debug_788:
    $I10 = self.'from'()
    ne $I10, -1, rxscan967_done
    goto rxscan967_scan
  rxscan967_loop:
    (rx963_pos) = rx963_cur."from"()
    inc rx963_pos
    rx963_cur."!cursor_from"(rx963_pos)
    ge rx963_pos, rx963_eos, rxscan967_done
  rxscan967_scan:
    set_addr $I10, rxscan967_loop
    rx963_cur."!mark_push"(0, rx963_pos, $I10)
  rxscan967_done:
.annotate 'line', 443
  # rx subrule "sigil" subtype=capture negate=
    rx963_cur."!cursor_pos"(rx963_pos)
    $P10 = rx963_cur."sigil"()
    unless $P10, rx963_fail
    rx963_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    rx963_pos = $P10."pos"()
  # rx rxquantr968 ** 0..1
    set_addr $I10, rxquantr968_done
    rx963_cur."!mark_push"(0, rx963_pos, $I10)
  rxquantr968_loop:
  # rx subrule "twigil" subtype=capture negate=
    rx963_cur."!cursor_pos"(rx963_pos)
    $P10 = rx963_cur."twigil"()
    unless $P10, rx963_fail
    goto rxsubrule969_pass
  rxsubrule969_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx963_fail
  rxsubrule969_pass:
    set_addr $I10, rxsubrule969_back
    rx963_cur."!mark_push"(0, rx963_pos, $I10, $P10)
    $P10."!cursor_names"("twigil")
    rx963_pos = $P10."pos"()
    set_addr $I10, rxquantr968_done
    (rx963_rep) = rx963_cur."!mark_commit"($I10)
  rxquantr968_done:
  alt970_0:
.annotate 'line', 444
    set_addr $I10, alt970_1
    rx963_cur."!mark_push"(0, rx963_pos, $I10)
  # rx subrule "ident" subtype=capture negate=
    rx963_cur."!cursor_pos"(rx963_pos)
    $P10 = rx963_cur."ident"()
    unless $P10, rx963_fail
    rx963_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx963_pos = $P10."pos"()
    goto alt970_end
  alt970_1:
  # rx subcapture "name"
    set_addr $I10, rxcap_971_fail
    rx963_cur."!mark_push"(0, rx963_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx963_pos, rx963_eos, rx963_fail
    sub $I10, rx963_pos, rx963_off
    substr $S10, rx963_tgt, $I10, 1
    index $I11, "/!", $S10
    lt $I11, 0, rx963_fail
    inc rx963_pos
    set_addr $I10, rxcap_971_fail
    ($I12, $I11) = rx963_cur."!mark_peek"($I10)
    rx963_cur."!cursor_pos"($I11)
    ($P10) = rx963_cur."!cursor_start"()
    $P10."!cursor_pass"(rx963_pos, "")
    rx963_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    goto rxcap_971_done
  rxcap_971_fail:
    goto rx963_fail
  rxcap_971_done:
  alt970_end:
.annotate 'line', 442
  # rx pass
    rx963_cur."!cursor_pass"(rx963_pos, "param_var")
    if_null rx963_debug, debug_789
    rx963_cur."!cursor_debug"("PASS", "param_var", " at pos=", rx963_pos)
  debug_789:
    .return (rx963_cur)
  rx963_restart:
.annotate 'line', 4
    if_null rx963_debug, debug_790
    rx963_cur."!cursor_debug"("NEXT", "param_var")
  debug_790:
  rx963_fail:
    (rx963_rep, rx963_pos, $I10, $P10) = rx963_cur."!mark_fail"(0)
    lt rx963_pos, -1, rx963_done
    eq rx963_pos, -1, rx963_fail
    jump $I10
  rx963_done:
    rx963_cur."!cursor_fail"()
    if_null rx963_debug, debug_791
    rx963_cur."!cursor_debug"("FAIL", "param_var")
  debug_791:
    .return (rx963_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__param_var"  :nsentry("!PREFIX__param_var") :subid("194_1299591493.348") :method
.annotate 'line', 4
    $P965 = self."!PREFIX__!subrule"("sigil", "")
    new $P966, "ResizablePMCArray"
    push $P966, $P965
    .return ($P966)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "named_param"  :subid("195_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx973_tgt
    .local int rx973_pos
    .local int rx973_off
    .local int rx973_eos
    .local int rx973_rep
    .local pmc rx973_cur
    .local pmc rx973_debug
    (rx973_cur, rx973_pos, rx973_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx973_cur
    .local pmc match
    .lex "$/", match
    length rx973_eos, rx973_tgt
    gt rx973_pos, rx973_eos, rx973_done
    set rx973_off, 0
    lt rx973_pos, 2, rx973_start
    sub rx973_off, rx973_pos, 1
    substr rx973_tgt, rx973_tgt, rx973_off
  rx973_start:
    eq $I10, 1, rx973_restart
    if_null rx973_debug, debug_792
    rx973_cur."!cursor_debug"("START", "named_param")
  debug_792:
    $I10 = self.'from'()
    ne $I10, -1, rxscan977_done
    goto rxscan977_scan
  rxscan977_loop:
    (rx973_pos) = rx973_cur."from"()
    inc rx973_pos
    rx973_cur."!cursor_from"(rx973_pos)
    ge rx973_pos, rx973_eos, rxscan977_done
  rxscan977_scan:
    set_addr $I10, rxscan977_loop
    rx973_cur."!mark_push"(0, rx973_pos, $I10)
  rxscan977_done:
.annotate 'line', 448
  # rx literal  ":"
    add $I11, rx973_pos, 1
    gt $I11, rx973_eos, rx973_fail
    sub $I11, rx973_pos, rx973_off
    ord $I11, rx973_tgt, $I11
    ne $I11, 58, rx973_fail
    add rx973_pos, 1
  # rx subrule "param_var" subtype=capture negate=
    rx973_cur."!cursor_pos"(rx973_pos)
    $P10 = rx973_cur."param_var"()
    unless $P10, rx973_fail
    rx973_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("param_var")
    rx973_pos = $P10."pos"()
.annotate 'line', 447
  # rx pass
    rx973_cur."!cursor_pass"(rx973_pos, "named_param")
    if_null rx973_debug, debug_793
    rx973_cur."!cursor_debug"("PASS", "named_param", " at pos=", rx973_pos)
  debug_793:
    .return (rx973_cur)
  rx973_restart:
.annotate 'line', 4
    if_null rx973_debug, debug_794
    rx973_cur."!cursor_debug"("NEXT", "named_param")
  debug_794:
  rx973_fail:
    (rx973_rep, rx973_pos, $I10, $P10) = rx973_cur."!mark_fail"(0)
    lt rx973_pos, -1, rx973_done
    eq rx973_pos, -1, rx973_fail
    jump $I10
  rx973_done:
    rx973_cur."!cursor_fail"()
    if_null rx973_debug, debug_795
    rx973_cur."!cursor_debug"("FAIL", "named_param")
  debug_795:
    .return (rx973_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__named_param"  :nsentry("!PREFIX__named_param") :subid("196_1299591493.348") :method
.annotate 'line', 4
    $P975 = self."!PREFIX__!subrule"("param_var", ":")
    new $P976, "ResizablePMCArray"
    push $P976, $P975
    .return ($P976)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "default_value"  :subid("197_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx979_tgt
    .local int rx979_pos
    .local int rx979_off
    .local int rx979_eos
    .local int rx979_rep
    .local pmc rx979_cur
    .local pmc rx979_debug
    (rx979_cur, rx979_pos, rx979_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx979_cur
    .local pmc match
    .lex "$/", match
    length rx979_eos, rx979_tgt
    gt rx979_pos, rx979_eos, rx979_done
    set rx979_off, 0
    lt rx979_pos, 2, rx979_start
    sub rx979_off, rx979_pos, 1
    substr rx979_tgt, rx979_tgt, rx979_off
  rx979_start:
    eq $I10, 1, rx979_restart
    if_null rx979_debug, debug_796
    rx979_cur."!cursor_debug"("START", "default_value")
  debug_796:
    $I10 = self.'from'()
    ne $I10, -1, rxscan983_done
    goto rxscan983_scan
  rxscan983_loop:
    (rx979_pos) = rx979_cur."from"()
    inc rx979_pos
    rx979_cur."!cursor_from"(rx979_pos)
    ge rx979_pos, rx979_eos, rxscan983_done
  rxscan983_scan:
    set_addr $I10, rxscan983_loop
    rx979_cur."!mark_push"(0, rx979_pos, $I10)
  rxscan983_done:
.annotate 'line', 451
  # rx subrule "ws" subtype=method negate=
    rx979_cur."!cursor_pos"(rx979_pos)
    $P10 = rx979_cur."ws"()
    unless $P10, rx979_fail
    rx979_pos = $P10."pos"()
  # rx literal  "="
    add $I11, rx979_pos, 1
    gt $I11, rx979_eos, rx979_fail
    sub $I11, rx979_pos, rx979_off
    ord $I11, rx979_tgt, $I11
    ne $I11, 61, rx979_fail
    add rx979_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx979_cur."!cursor_pos"(rx979_pos)
    $P10 = rx979_cur."ws"()
    unless $P10, rx979_fail
    rx979_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx979_cur."!cursor_pos"(rx979_pos)
    $P10 = rx979_cur."EXPR"("i=")
    unless $P10, rx979_fail
    rx979_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx979_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx979_cur."!cursor_pos"(rx979_pos)
    $P10 = rx979_cur."ws"()
    unless $P10, rx979_fail
    rx979_pos = $P10."pos"()
  # rx pass
    rx979_cur."!cursor_pass"(rx979_pos, "default_value")
    if_null rx979_debug, debug_797
    rx979_cur."!cursor_debug"("PASS", "default_value", " at pos=", rx979_pos)
  debug_797:
    .return (rx979_cur)
  rx979_restart:
.annotate 'line', 4
    if_null rx979_debug, debug_798
    rx979_cur."!cursor_debug"("NEXT", "default_value")
  debug_798:
  rx979_fail:
    (rx979_rep, rx979_pos, $I10, $P10) = rx979_cur."!mark_fail"(0)
    lt rx979_pos, -1, rx979_done
    eq rx979_pos, -1, rx979_fail
    jump $I10
  rx979_done:
    rx979_cur."!cursor_fail"()
    if_null rx979_debug, debug_799
    rx979_cur."!cursor_debug"("FAIL", "default_value")
  debug_799:
    .return (rx979_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__default_value"  :nsentry("!PREFIX__default_value") :subid("198_1299591493.348") :method
.annotate 'line', 4
    $P981 = self."!PREFIX__!subrule"("ws", "")
    new $P982, "ResizablePMCArray"
    push $P982, $P981
    .return ($P982)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "trait"  :subid("199_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx988_tgt
    .local int rx988_pos
    .local int rx988_off
    .local int rx988_eos
    .local int rx988_rep
    .local pmc rx988_cur
    .local pmc rx988_debug
    (rx988_cur, rx988_pos, rx988_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx988_cur
    .local pmc match
    .lex "$/", match
    length rx988_eos, rx988_tgt
    gt rx988_pos, rx988_eos, rx988_done
    set rx988_off, 0
    lt rx988_pos, 2, rx988_start
    sub rx988_off, rx988_pos, 1
    substr rx988_tgt, rx988_tgt, rx988_off
  rx988_start:
    eq $I10, 1, rx988_restart
    if_null rx988_debug, debug_800
    rx988_cur."!cursor_debug"("START", "trait")
  debug_800:
    $I10 = self.'from'()
    ne $I10, -1, rxscan992_done
    goto rxscan992_scan
  rxscan992_loop:
    (rx988_pos) = rx988_cur."from"()
    inc rx988_pos
    rx988_cur."!cursor_from"(rx988_pos)
    ge rx988_pos, rx988_eos, rxscan992_done
  rxscan992_scan:
    set_addr $I10, rxscan992_loop
    rx988_cur."!mark_push"(0, rx988_pos, $I10)
  rxscan992_done:
.annotate 'line', 453
  # rx subrule "ws" subtype=method negate=
    rx988_cur."!cursor_pos"(rx988_pos)
    $P10 = rx988_cur."ws"()
    unless $P10, rx988_fail
    rx988_pos = $P10."pos"()
  # rx subrule "trait_mod" subtype=capture negate=
    rx988_cur."!cursor_pos"(rx988_pos)
    $P10 = rx988_cur."trait_mod"()
    unless $P10, rx988_fail
    rx988_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("trait_mod")
    rx988_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx988_cur."!cursor_pos"(rx988_pos)
    $P10 = rx988_cur."ws"()
    unless $P10, rx988_fail
    rx988_pos = $P10."pos"()
  # rx pass
    rx988_cur."!cursor_pass"(rx988_pos, "trait")
    if_null rx988_debug, debug_801
    rx988_cur."!cursor_debug"("PASS", "trait", " at pos=", rx988_pos)
  debug_801:
    .return (rx988_cur)
  rx988_restart:
.annotate 'line', 4
    if_null rx988_debug, debug_802
    rx988_cur."!cursor_debug"("NEXT", "trait")
  debug_802:
  rx988_fail:
    (rx988_rep, rx988_pos, $I10, $P10) = rx988_cur."!mark_fail"(0)
    lt rx988_pos, -1, rx988_done
    eq rx988_pos, -1, rx988_fail
    jump $I10
  rx988_done:
    rx988_cur."!cursor_fail"()
    if_null rx988_debug, debug_803
    rx988_cur."!cursor_debug"("FAIL", "trait")
  debug_803:
    .return (rx988_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__trait"  :nsentry("!PREFIX__trait") :subid("200_1299591493.348") :method
.annotate 'line', 4
    $P990 = self."!PREFIX__!subrule"("ws", "")
    new $P991, "ResizablePMCArray"
    push $P991, $P990
    .return ($P991)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "trait_mod"  :subid("201_1299591493.348")
    .param pmc param_996
.annotate 'line', 455
    .lex "self", param_996
    $P997 = param_996."!protoregex"("trait_mod")
    .return ($P997)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__trait_mod"  :subid("202_1299591493.348")
    .param pmc param_999
.annotate 'line', 455
    .lex "self", param_999
    $P1000 = param_999."!PREFIX__!protoregex"("trait_mod")
    .return ($P1000)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "trait_mod:sym<is>"  :subid("203_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1002_tgt
    .local int rx1002_pos
    .local int rx1002_off
    .local int rx1002_eos
    .local int rx1002_rep
    .local pmc rx1002_cur
    .local pmc rx1002_debug
    (rx1002_cur, rx1002_pos, rx1002_tgt, $I10) = self."!cursor_start"()
    rx1002_cur."!cursor_caparray"("circumfix")
    .lex unicode:"$\x{a2}", rx1002_cur
    .local pmc match
    .lex "$/", match
    length rx1002_eos, rx1002_tgt
    gt rx1002_pos, rx1002_eos, rx1002_done
    set rx1002_off, 0
    lt rx1002_pos, 2, rx1002_start
    sub rx1002_off, rx1002_pos, 1
    substr rx1002_tgt, rx1002_tgt, rx1002_off
  rx1002_start:
    eq $I10, 1, rx1002_restart
    if_null rx1002_debug, debug_804
    rx1002_cur."!cursor_debug"("START", "trait_mod:sym<is>")
  debug_804:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1006_done
    goto rxscan1006_scan
  rxscan1006_loop:
    (rx1002_pos) = rx1002_cur."from"()
    inc rx1002_pos
    rx1002_cur."!cursor_from"(rx1002_pos)
    ge rx1002_pos, rx1002_eos, rxscan1006_done
  rxscan1006_scan:
    set_addr $I10, rxscan1006_loop
    rx1002_cur."!mark_push"(0, rx1002_pos, $I10)
  rxscan1006_done:
.annotate 'line', 456
  # rx subcapture "sym"
    set_addr $I10, rxcap_1007_fail
    rx1002_cur."!mark_push"(0, rx1002_pos, $I10)
  # rx literal  "is"
    add $I11, rx1002_pos, 2
    gt $I11, rx1002_eos, rx1002_fail
    sub $I11, rx1002_pos, rx1002_off
    substr $S10, rx1002_tgt, $I11, 2
    ne $S10, "is", rx1002_fail
    add rx1002_pos, 2
    set_addr $I10, rxcap_1007_fail
    ($I12, $I11) = rx1002_cur."!mark_peek"($I10)
    rx1002_cur."!cursor_pos"($I11)
    ($P10) = rx1002_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1002_pos, "")
    rx1002_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1007_done
  rxcap_1007_fail:
    goto rx1002_fail
  rxcap_1007_done:
  # rx subrule "ws" subtype=method negate=
    rx1002_cur."!cursor_pos"(rx1002_pos)
    $P10 = rx1002_cur."ws"()
    unless $P10, rx1002_fail
    rx1002_pos = $P10."pos"()
  # rx subrule "deflongname" subtype=capture negate=
    rx1002_cur."!cursor_pos"(rx1002_pos)
    $P10 = rx1002_cur."deflongname"()
    unless $P10, rx1002_fail
    rx1002_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("longname")
    rx1002_pos = $P10."pos"()
  # rx rxquantr1009 ** 0..1
    set_addr $I10, rxquantr1009_done
    rx1002_cur."!mark_push"(0, rx1002_pos, $I10)
  rxquantr1009_loop:
  # rx subrule "circumfix" subtype=capture negate=
    rx1002_cur."!cursor_pos"(rx1002_pos)
    $P10 = rx1002_cur."circumfix"()
    unless $P10, rx1002_fail
    goto rxsubrule1010_pass
  rxsubrule1010_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1002_fail
  rxsubrule1010_pass:
    set_addr $I10, rxsubrule1010_back
    rx1002_cur."!mark_push"(0, rx1002_pos, $I10, $P10)
    $P10."!cursor_names"("circumfix")
    rx1002_pos = $P10."pos"()
    set_addr $I10, rxquantr1009_done
    (rx1002_rep) = rx1002_cur."!mark_commit"($I10)
  rxquantr1009_done:
  # rx subrule "ws" subtype=method negate=
    rx1002_cur."!cursor_pos"(rx1002_pos)
    $P10 = rx1002_cur."ws"()
    unless $P10, rx1002_fail
    rx1002_pos = $P10."pos"()
  # rx pass
    rx1002_cur."!cursor_pass"(rx1002_pos, "trait_mod:sym<is>")
    if_null rx1002_debug, debug_805
    rx1002_cur."!cursor_debug"("PASS", "trait_mod:sym<is>", " at pos=", rx1002_pos)
  debug_805:
    .return (rx1002_cur)
  rx1002_restart:
.annotate 'line', 4
    if_null rx1002_debug, debug_806
    rx1002_cur."!cursor_debug"("NEXT", "trait_mod:sym<is>")
  debug_806:
  rx1002_fail:
    (rx1002_rep, rx1002_pos, $I10, $P10) = rx1002_cur."!mark_fail"(0)
    lt rx1002_pos, -1, rx1002_done
    eq rx1002_pos, -1, rx1002_fail
    jump $I10
  rx1002_done:
    rx1002_cur."!cursor_fail"()
    if_null rx1002_debug, debug_807
    rx1002_cur."!cursor_debug"("FAIL", "trait_mod:sym<is>")
  debug_807:
    .return (rx1002_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__trait_mod:sym<is>"  :nsentry("!PREFIX__trait_mod:sym<is>") :subid("204_1299591493.348") :method
.annotate 'line', 4
    $P1004 = self."!PREFIX__!subrule"("ws", "is")
    new $P1005, "ResizablePMCArray"
    push $P1005, $P1004
    .return ($P1005)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "regex_declarator"  :subid("205_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1013_tgt
    .local int rx1013_pos
    .local int rx1013_off
    .local int rx1013_eos
    .local int rx1013_rep
    .local pmc rx1013_cur
    .local pmc rx1013_debug
    (rx1013_cur, rx1013_pos, rx1013_tgt, $I10) = self."!cursor_start"()
    rx1013_cur."!cursor_caparray"("signature")
    .lex unicode:"$\x{a2}", rx1013_cur
    .local pmc match
    .lex "$/", match
    length rx1013_eos, rx1013_tgt
    gt rx1013_pos, rx1013_eos, rx1013_done
    set rx1013_off, 0
    lt rx1013_pos, 2, rx1013_start
    sub rx1013_off, rx1013_pos, 1
    substr rx1013_tgt, rx1013_tgt, rx1013_off
  rx1013_start:
    eq $I10, 1, rx1013_restart
    if_null rx1013_debug, debug_808
    rx1013_cur."!cursor_debug"("START", "regex_declarator")
  debug_808:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1017_done
    goto rxscan1017_scan
  rxscan1017_loop:
    (rx1013_pos) = rx1013_cur."from"()
    inc rx1013_pos
    rx1013_cur."!cursor_from"(rx1013_pos)
    ge rx1013_pos, rx1013_eos, rxscan1017_done
  rxscan1017_scan:
    set_addr $I10, rxscan1017_loop
    rx1013_cur."!mark_push"(0, rx1013_pos, $I10)
  rxscan1017_done:
.annotate 'line', 458
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
  alt1019_0:
.annotate 'line', 459
    set_addr $I10, alt1019_1
    rx1013_cur."!mark_push"(0, rx1013_pos, $I10)
.annotate 'line', 460
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
  # rx subcapture "proto"
    set_addr $I10, rxcap_1021_fail
    rx1013_cur."!mark_push"(0, rx1013_pos, $I10)
  # rx literal  "proto"
    add $I11, rx1013_pos, 5
    gt $I11, rx1013_eos, rx1013_fail
    sub $I11, rx1013_pos, rx1013_off
    substr $S10, rx1013_tgt, $I11, 5
    ne $S10, "proto", rx1013_fail
    add rx1013_pos, 5
    set_addr $I10, rxcap_1021_fail
    ($I12, $I11) = rx1013_cur."!mark_peek"($I10)
    rx1013_cur."!cursor_pos"($I11)
    ($P10) = rx1013_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1013_pos, "")
    rx1013_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("proto")
    goto rxcap_1021_done
  rxcap_1021_fail:
    goto rx1013_fail
  rxcap_1021_done:
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
  alt1023_0:
    set_addr $I10, alt1023_1
    rx1013_cur."!mark_push"(0, rx1013_pos, $I10)
  # rx literal  "regex"
    add $I11, rx1013_pos, 5
    gt $I11, rx1013_eos, rx1013_fail
    sub $I11, rx1013_pos, rx1013_off
    substr $S10, rx1013_tgt, $I11, 5
    ne $S10, "regex", rx1013_fail
    add rx1013_pos, 5
    goto alt1023_end
  alt1023_1:
    set_addr $I10, alt1023_2
    rx1013_cur."!mark_push"(0, rx1013_pos, $I10)
  # rx literal  "token"
    add $I11, rx1013_pos, 5
    gt $I11, rx1013_eos, rx1013_fail
    sub $I11, rx1013_pos, rx1013_off
    substr $S10, rx1013_tgt, $I11, 5
    ne $S10, "token", rx1013_fail
    add rx1013_pos, 5
    goto alt1023_end
  alt1023_2:
  # rx literal  "rule"
    add $I11, rx1013_pos, 4
    gt $I11, rx1013_eos, rx1013_fail
    sub $I11, rx1013_pos, rx1013_off
    substr $S10, rx1013_tgt, $I11, 4
    ne $S10, "rule", rx1013_fail
    add rx1013_pos, 4
  alt1023_end:
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
.annotate 'line', 461
  # rx subrule "deflongname" subtype=capture negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."deflongname"()
    unless $P10, rx1013_fail
    rx1013_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("deflongname")
    rx1013_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
  alt1026_0:
.annotate 'line', 462
    set_addr $I10, alt1026_1
    rx1013_cur."!mark_push"(0, rx1013_pos, $I10)
.annotate 'line', 463
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
  # rx literal  "{"
    add $I11, rx1013_pos, 1
    gt $I11, rx1013_eos, rx1013_fail
    sub $I11, rx1013_pos, rx1013_off
    ord $I11, rx1013_tgt, $I11
    ne $I11, 123, rx1013_fail
    add rx1013_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
  # rx literal  "<...>"
    add $I11, rx1013_pos, 5
    gt $I11, rx1013_eos, rx1013_fail
    sub $I11, rx1013_pos, rx1013_off
    substr $S10, rx1013_tgt, $I11, 5
    ne $S10, "<...>", rx1013_fail
    add rx1013_pos, 5
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx1013_pos, 1
    gt $I11, rx1013_eos, rx1013_fail
    sub $I11, rx1013_pos, rx1013_off
    ord $I11, rx1013_tgt, $I11
    ne $I11, 125, rx1013_fail
    add rx1013_pos, 1
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ENDSTMT"()
    unless $P10, rx1013_fail
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
    goto alt1026_end
  alt1026_1:
    set_addr $I10, alt1026_2
    rx1013_cur."!mark_push"(0, rx1013_pos, $I10)
.annotate 'line', 464
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
  # rx literal  "{"
    add $I11, rx1013_pos, 1
    gt $I11, rx1013_eos, rx1013_fail
    sub $I11, rx1013_pos, rx1013_off
    ord $I11, rx1013_tgt, $I11
    ne $I11, 123, rx1013_fail
    add rx1013_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
  # rx literal  "<*>"
    add $I11, rx1013_pos, 3
    gt $I11, rx1013_eos, rx1013_fail
    sub $I11, rx1013_pos, rx1013_off
    substr $S10, rx1013_tgt, $I11, 3
    ne $S10, "<*>", rx1013_fail
    add rx1013_pos, 3
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx1013_pos, 1
    gt $I11, rx1013_eos, rx1013_fail
    sub $I11, rx1013_pos, rx1013_off
    ord $I11, rx1013_tgt, $I11
    ne $I11, 125, rx1013_fail
    add rx1013_pos, 1
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ENDSTMT"()
    unless $P10, rx1013_fail
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
    goto alt1026_end
  alt1026_2:
.annotate 'line', 465
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."panic"("Proto regex body must be <*> (or <...>, which is deprecated)")
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
  alt1026_end:
.annotate 'line', 466
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
.annotate 'line', 460
    goto alt1019_end
  alt1019_1:
.annotate 'line', 467
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
  # rx subcapture "sym"
    set_addr $I10, rxcap_1040_fail
    rx1013_cur."!mark_push"(0, rx1013_pos, $I10)
  alt1039_0:
    set_addr $I10, alt1039_1
    rx1013_cur."!mark_push"(0, rx1013_pos, $I10)
  # rx literal  "regex"
    add $I11, rx1013_pos, 5
    gt $I11, rx1013_eos, rx1013_fail
    sub $I11, rx1013_pos, rx1013_off
    substr $S10, rx1013_tgt, $I11, 5
    ne $S10, "regex", rx1013_fail
    add rx1013_pos, 5
    goto alt1039_end
  alt1039_1:
    set_addr $I10, alt1039_2
    rx1013_cur."!mark_push"(0, rx1013_pos, $I10)
  # rx literal  "token"
    add $I11, rx1013_pos, 5
    gt $I11, rx1013_eos, rx1013_fail
    sub $I11, rx1013_pos, rx1013_off
    substr $S10, rx1013_tgt, $I11, 5
    ne $S10, "token", rx1013_fail
    add rx1013_pos, 5
    goto alt1039_end
  alt1039_2:
  # rx literal  "rule"
    add $I11, rx1013_pos, 4
    gt $I11, rx1013_eos, rx1013_fail
    sub $I11, rx1013_pos, rx1013_off
    substr $S10, rx1013_tgt, $I11, 4
    ne $S10, "rule", rx1013_fail
    add rx1013_pos, 4
  alt1039_end:
    set_addr $I10, rxcap_1040_fail
    ($I12, $I11) = rx1013_cur."!mark_peek"($I10)
    rx1013_cur."!cursor_pos"($I11)
    ($P10) = rx1013_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1013_pos, "")
    rx1013_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1040_done
  rxcap_1040_fail:
    goto rx1013_fail
  rxcap_1040_done:
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
.annotate 'line', 468
  # rx subrule "deflongname" subtype=capture negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."deflongname"()
    unless $P10, rx1013_fail
    rx1013_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("deflongname")
    rx1013_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
.annotate 'line', 469
  # rx subrule "newpad" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."newpad"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
.annotate 'line', 470
  # rx rxquantr1044 ** 0..1
    set_addr $I10, rxquantr1044_done
    rx1013_cur."!mark_push"(0, rx1013_pos, $I10)
  rxquantr1044_loop:
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
  # rx literal  "("
    add $I11, rx1013_pos, 1
    gt $I11, rx1013_eos, rx1013_fail
    sub $I11, rx1013_pos, rx1013_off
    ord $I11, rx1013_tgt, $I11
    ne $I11, 40, rx1013_fail
    add rx1013_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
  # rx subrule "signature" subtype=capture negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."signature"()
    unless $P10, rx1013_fail
    rx1013_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("signature")
    rx1013_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx1013_pos, 1
    gt $I11, rx1013_eos, rx1013_fail
    sub $I11, rx1013_pos, rx1013_off
    ord $I11, rx1013_tgt, $I11
    ne $I11, 41, rx1013_fail
    add rx1013_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
    set_addr $I10, rxquantr1044_done
    (rx1013_rep) = rx1013_cur."!mark_commit"($I10)
  rxquantr1044_done:
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
.annotate 'line', 471
  # rx reduce name="regex_declarator" key="open"
    rx1013_cur."!cursor_pos"(rx1013_pos)
    rx1013_cur."!reduce"("regex_declarator", "open")
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
.annotate 'line', 472
  # rx literal  "{"
    add $I11, rx1013_pos, 1
    gt $I11, rx1013_eos, rx1013_fail
    sub $I11, rx1013_pos, rx1013_off
    ord $I11, rx1013_tgt, $I11
    ne $I11, 123, rx1013_fail
    add rx1013_pos, 1
  # rx subrule "LANG" subtype=capture negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."LANG"("Regex", "nibbler")
    unless $P10, rx1013_fail
    rx1013_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("p6regex")
    rx1013_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx1013_pos, 1
    gt $I11, rx1013_eos, rx1013_fail
    sub $I11, rx1013_pos, rx1013_off
    ord $I11, rx1013_tgt, $I11
    ne $I11, 125, rx1013_fail
    add rx1013_pos, 1
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ENDSTMT"()
    unless $P10, rx1013_fail
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
  alt1019_end:
.annotate 'line', 473
  # rx subrule "ws" subtype=method negate=
    rx1013_cur."!cursor_pos"(rx1013_pos)
    $P10 = rx1013_cur."ws"()
    unless $P10, rx1013_fail
    rx1013_pos = $P10."pos"()
.annotate 'line', 458
  # rx pass
    rx1013_cur."!cursor_pass"(rx1013_pos, "regex_declarator")
    if_null rx1013_debug, debug_809
    rx1013_cur."!cursor_debug"("PASS", "regex_declarator", " at pos=", rx1013_pos)
  debug_809:
    .return (rx1013_cur)
  rx1013_restart:
.annotate 'line', 4
    if_null rx1013_debug, debug_810
    rx1013_cur."!cursor_debug"("NEXT", "regex_declarator")
  debug_810:
  rx1013_fail:
    (rx1013_rep, rx1013_pos, $I10, $P10) = rx1013_cur."!mark_fail"(0)
    lt rx1013_pos, -1, rx1013_done
    eq rx1013_pos, -1, rx1013_fail
    jump $I10
  rx1013_done:
    rx1013_cur."!cursor_fail"()
    if_null rx1013_debug, debug_811
    rx1013_cur."!cursor_debug"("FAIL", "regex_declarator")
  debug_811:
    .return (rx1013_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__regex_declarator"  :nsentry("!PREFIX__regex_declarator") :subid("206_1299591493.348") :method
.annotate 'line', 4
    $P1015 = self."!PREFIX__!subrule"("ws", "")
    new $P1016, "ResizablePMCArray"
    push $P1016, $P1015
    .return ($P1016)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "dotty"  :subid("207_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1054_tgt
    .local int rx1054_pos
    .local int rx1054_off
    .local int rx1054_eos
    .local int rx1054_rep
    .local pmc rx1054_cur
    .local pmc rx1054_debug
    (rx1054_cur, rx1054_pos, rx1054_tgt, $I10) = self."!cursor_start"()
    rx1054_cur."!cursor_caparray"("args")
    .lex unicode:"$\x{a2}", rx1054_cur
    .local pmc match
    .lex "$/", match
    length rx1054_eos, rx1054_tgt
    gt rx1054_pos, rx1054_eos, rx1054_done
    set rx1054_off, 0
    lt rx1054_pos, 2, rx1054_start
    sub rx1054_off, rx1054_pos, 1
    substr rx1054_tgt, rx1054_tgt, rx1054_off
  rx1054_start:
    eq $I10, 1, rx1054_restart
    if_null rx1054_debug, debug_812
    rx1054_cur."!cursor_debug"("START", "dotty")
  debug_812:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1058_done
    goto rxscan1058_scan
  rxscan1058_loop:
    (rx1054_pos) = rx1054_cur."from"()
    inc rx1054_pos
    rx1054_cur."!cursor_from"(rx1054_pos)
    ge rx1054_pos, rx1054_eos, rxscan1058_done
  rxscan1058_scan:
    set_addr $I10, rxscan1058_loop
    rx1054_cur."!mark_push"(0, rx1054_pos, $I10)
  rxscan1058_done:
.annotate 'line', 477
  # rx literal  "."
    add $I11, rx1054_pos, 1
    gt $I11, rx1054_eos, rx1054_fail
    sub $I11, rx1054_pos, rx1054_off
    ord $I11, rx1054_tgt, $I11
    ne $I11, 46, rx1054_fail
    add rx1054_pos, 1
  alt1059_0:
.annotate 'line', 478
    set_addr $I10, alt1059_1
    rx1054_cur."!mark_push"(0, rx1054_pos, $I10)
  # rx subrule "deflongname" subtype=capture negate=
    rx1054_cur."!cursor_pos"(rx1054_pos)
    $P10 = rx1054_cur."deflongname"()
    unless $P10, rx1054_fail
    rx1054_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("longname=deflongname")
    rx1054_pos = $P10."pos"()
    goto alt1059_end
  alt1059_1:
.annotate 'line', 479
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1054_pos, rx1054_off
    substr $S10, rx1054_tgt, $I10, 1
    index $I11, "'\"", $S10
    lt $I11, 0, rx1054_fail
  # rx subrule "quote" subtype=capture negate=
    rx1054_cur."!cursor_pos"(rx1054_pos)
    $P10 = rx1054_cur."quote"()
    unless $P10, rx1054_fail
    rx1054_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote")
    rx1054_pos = $P10."pos"()
  alt1060_0:
.annotate 'line', 480
    set_addr $I10, alt1060_1
    rx1054_cur."!mark_push"(0, rx1054_pos, $I10)
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1054_pos, rx1054_off
    substr $S10, rx1054_tgt, $I10, 1
    index $I11, "(", $S10
    lt $I11, 0, rx1054_fail
    goto alt1060_end
  alt1060_1:
  # rx subrule "panic" subtype=method negate=
    rx1054_cur."!cursor_pos"(rx1054_pos)
    $P10 = rx1054_cur."panic"("Quoted method name requires parenthesized arguments")
    unless $P10, rx1054_fail
    rx1054_pos = $P10."pos"()
  alt1060_end:
  alt1059_end:
.annotate 'line', 486
  # rx rxquantr1061 ** 0..1
    set_addr $I10, rxquantr1061_done
    rx1054_cur."!mark_push"(0, rx1054_pos, $I10)
  rxquantr1061_loop:
  alt1062_0:
.annotate 'line', 483
    set_addr $I10, alt1062_1
    rx1054_cur."!mark_push"(0, rx1054_pos, $I10)
.annotate 'line', 484
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1054_pos, rx1054_off
    substr $S10, rx1054_tgt, $I10, 1
    index $I11, "(", $S10
    lt $I11, 0, rx1054_fail
  # rx subrule "args" subtype=capture negate=
    rx1054_cur."!cursor_pos"(rx1054_pos)
    $P10 = rx1054_cur."args"()
    unless $P10, rx1054_fail
    rx1054_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("args")
    rx1054_pos = $P10."pos"()
    goto alt1062_end
  alt1062_1:
.annotate 'line', 485
  # rx literal  ":"
    add $I11, rx1054_pos, 1
    gt $I11, rx1054_eos, rx1054_fail
    sub $I11, rx1054_pos, rx1054_off
    ord $I11, rx1054_tgt, $I11
    ne $I11, 58, rx1054_fail
    add rx1054_pos, 1
  # rx charclass s
    ge rx1054_pos, rx1054_eos, rx1054_fail
    sub $I10, rx1054_pos, rx1054_off
    is_cclass $I11, 32, rx1054_tgt, $I10
    unless $I11, rx1054_fail
    inc rx1054_pos
  # rx subrule "arglist" subtype=capture negate=
    rx1054_cur."!cursor_pos"(rx1054_pos)
    $P10 = rx1054_cur."arglist"()
    unless $P10, rx1054_fail
    rx1054_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("args")
    rx1054_pos = $P10."pos"()
  alt1062_end:
.annotate 'line', 486
    set_addr $I10, rxquantr1061_done
    (rx1054_rep) = rx1054_cur."!mark_commit"($I10)
  rxquantr1061_done:
.annotate 'line', 476
  # rx pass
    rx1054_cur."!cursor_pass"(rx1054_pos, "dotty")
    if_null rx1054_debug, debug_813
    rx1054_cur."!cursor_debug"("PASS", "dotty", " at pos=", rx1054_pos)
  debug_813:
    .return (rx1054_cur)
  rx1054_restart:
.annotate 'line', 4
    if_null rx1054_debug, debug_814
    rx1054_cur."!cursor_debug"("NEXT", "dotty")
  debug_814:
  rx1054_fail:
    (rx1054_rep, rx1054_pos, $I10, $P10) = rx1054_cur."!mark_fail"(0)
    lt rx1054_pos, -1, rx1054_done
    eq rx1054_pos, -1, rx1054_fail
    jump $I10
  rx1054_done:
    rx1054_cur."!cursor_fail"()
    if_null rx1054_debug, debug_815
    rx1054_cur."!cursor_debug"("FAIL", "dotty")
  debug_815:
    .return (rx1054_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__dotty"  :nsentry("!PREFIX__dotty") :subid("208_1299591493.348") :method
.annotate 'line', 4
    $P1056 = self."!PREFIX__!subrule"("deflongname", ".")
    new $P1057, "ResizablePMCArray"
    push $P1057, "'"
    push $P1057, "\""
    push $P1057, $P1056
    .return ($P1057)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term"  :subid("209_1299591493.348")
    .param pmc param_1064
.annotate 'line', 490
    .lex "self", param_1064
    $P1065 = param_1064."!protoregex"("term")
    .return ($P1065)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term"  :subid("210_1299591493.348")
    .param pmc param_1067
.annotate 'line', 490
    .lex "self", param_1067
    $P1068 = param_1067."!PREFIX__!protoregex"("term")
    .return ($P1068)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<self>"  :subid("211_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1070_tgt
    .local int rx1070_pos
    .local int rx1070_off
    .local int rx1070_eos
    .local int rx1070_rep
    .local pmc rx1070_cur
    .local pmc rx1070_debug
    (rx1070_cur, rx1070_pos, rx1070_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1070_cur
    .local pmc match
    .lex "$/", match
    length rx1070_eos, rx1070_tgt
    gt rx1070_pos, rx1070_eos, rx1070_done
    set rx1070_off, 0
    lt rx1070_pos, 2, rx1070_start
    sub rx1070_off, rx1070_pos, 1
    substr rx1070_tgt, rx1070_tgt, rx1070_off
  rx1070_start:
    eq $I10, 1, rx1070_restart
    if_null rx1070_debug, debug_816
    rx1070_cur."!cursor_debug"("START", "term:sym<self>")
  debug_816:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1073_done
    goto rxscan1073_scan
  rxscan1073_loop:
    (rx1070_pos) = rx1070_cur."from"()
    inc rx1070_pos
    rx1070_cur."!cursor_from"(rx1070_pos)
    ge rx1070_pos, rx1070_eos, rxscan1073_done
  rxscan1073_scan:
    set_addr $I10, rxscan1073_loop
    rx1070_cur."!mark_push"(0, rx1070_pos, $I10)
  rxscan1073_done:
.annotate 'line', 492
  # rx subcapture "sym"
    set_addr $I10, rxcap_1074_fail
    rx1070_cur."!mark_push"(0, rx1070_pos, $I10)
  # rx literal  "self"
    add $I11, rx1070_pos, 4
    gt $I11, rx1070_eos, rx1070_fail
    sub $I11, rx1070_pos, rx1070_off
    substr $S10, rx1070_tgt, $I11, 4
    ne $S10, "self", rx1070_fail
    add rx1070_pos, 4
    set_addr $I10, rxcap_1074_fail
    ($I12, $I11) = rx1070_cur."!mark_peek"($I10)
    rx1070_cur."!cursor_pos"($I11)
    ($P10) = rx1070_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1070_pos, "")
    rx1070_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1074_done
  rxcap_1074_fail:
    goto rx1070_fail
  rxcap_1074_done:
  # rxanchor rwb
    le rx1070_pos, 0, rx1070_fail
    sub $I10, rx1070_pos, rx1070_off
    is_cclass $I11, 8192, rx1070_tgt, $I10
    if $I11, rx1070_fail
    dec $I10
    is_cclass $I11, 8192, rx1070_tgt, $I10
    unless $I11, rx1070_fail
  # rx pass
    rx1070_cur."!cursor_pass"(rx1070_pos, "term:sym<self>")
    if_null rx1070_debug, debug_817
    rx1070_cur."!cursor_debug"("PASS", "term:sym<self>", " at pos=", rx1070_pos)
  debug_817:
    .return (rx1070_cur)
  rx1070_restart:
.annotate 'line', 4
    if_null rx1070_debug, debug_818
    rx1070_cur."!cursor_debug"("NEXT", "term:sym<self>")
  debug_818:
  rx1070_fail:
    (rx1070_rep, rx1070_pos, $I10, $P10) = rx1070_cur."!mark_fail"(0)
    lt rx1070_pos, -1, rx1070_done
    eq rx1070_pos, -1, rx1070_fail
    jump $I10
  rx1070_done:
    rx1070_cur."!cursor_fail"()
    if_null rx1070_debug, debug_819
    rx1070_cur."!cursor_debug"("FAIL", "term:sym<self>")
  debug_819:
    .return (rx1070_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<self>"  :nsentry("!PREFIX__term:sym<self>") :subid("212_1299591493.348") :method
.annotate 'line', 4
    new $P1072, "ResizablePMCArray"
    push $P1072, "self"
    .return ($P1072)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<identifier>"  :subid("213_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1076_tgt
    .local int rx1076_pos
    .local int rx1076_off
    .local int rx1076_eos
    .local int rx1076_rep
    .local pmc rx1076_cur
    .local pmc rx1076_debug
    (rx1076_cur, rx1076_pos, rx1076_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1076_cur
    .local pmc match
    .lex "$/", match
    length rx1076_eos, rx1076_tgt
    gt rx1076_pos, rx1076_eos, rx1076_done
    set rx1076_off, 0
    lt rx1076_pos, 2, rx1076_start
    sub rx1076_off, rx1076_pos, 1
    substr rx1076_tgt, rx1076_tgt, rx1076_off
  rx1076_start:
    eq $I10, 1, rx1076_restart
    if_null rx1076_debug, debug_820
    rx1076_cur."!cursor_debug"("START", "term:sym<identifier>")
  debug_820:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1080_done
    goto rxscan1080_scan
  rxscan1080_loop:
    (rx1076_pos) = rx1076_cur."from"()
    inc rx1076_pos
    rx1076_cur."!cursor_from"(rx1076_pos)
    ge rx1076_pos, rx1076_eos, rxscan1080_done
  rxscan1080_scan:
    set_addr $I10, rxscan1080_loop
    rx1076_cur."!mark_push"(0, rx1076_pos, $I10)
  rxscan1080_done:
.annotate 'line', 495
  # rx subrule "deflongname" subtype=capture negate=
    rx1076_cur."!cursor_pos"(rx1076_pos)
    $P10 = rx1076_cur."deflongname"()
    unless $P10, rx1076_fail
    rx1076_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("deflongname")
    rx1076_pos = $P10."pos"()
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1076_pos, rx1076_off
    substr $S10, rx1076_tgt, $I10, 1
    index $I11, "(", $S10
    lt $I11, 0, rx1076_fail
  # rx subrule "args" subtype=capture negate=
    rx1076_cur."!cursor_pos"(rx1076_pos)
    $P10 = rx1076_cur."args"()
    unless $P10, rx1076_fail
    rx1076_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("args")
    rx1076_pos = $P10."pos"()
.annotate 'line', 494
  # rx pass
    rx1076_cur."!cursor_pass"(rx1076_pos, "term:sym<identifier>")
    if_null rx1076_debug, debug_821
    rx1076_cur."!cursor_debug"("PASS", "term:sym<identifier>", " at pos=", rx1076_pos)
  debug_821:
    .return (rx1076_cur)
  rx1076_restart:
.annotate 'line', 4
    if_null rx1076_debug, debug_822
    rx1076_cur."!cursor_debug"("NEXT", "term:sym<identifier>")
  debug_822:
  rx1076_fail:
    (rx1076_rep, rx1076_pos, $I10, $P10) = rx1076_cur."!mark_fail"(0)
    lt rx1076_pos, -1, rx1076_done
    eq rx1076_pos, -1, rx1076_fail
    jump $I10
  rx1076_done:
    rx1076_cur."!cursor_fail"()
    if_null rx1076_debug, debug_823
    rx1076_cur."!cursor_debug"("FAIL", "term:sym<identifier>")
  debug_823:
    .return (rx1076_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<identifier>"  :nsentry("!PREFIX__term:sym<identifier>") :subid("214_1299591493.348") :method
.annotate 'line', 4
    $P1078 = self."!PREFIX__!subrule"("deflongname", "")
    new $P1079, "ResizablePMCArray"
    push $P1079, $P1078
    .return ($P1079)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<name>"  :subid("215_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1082_tgt
    .local int rx1082_pos
    .local int rx1082_off
    .local int rx1082_eos
    .local int rx1082_rep
    .local pmc rx1082_cur
    .local pmc rx1082_debug
    (rx1082_cur, rx1082_pos, rx1082_tgt, $I10) = self."!cursor_start"()
    rx1082_cur."!cursor_caparray"("args")
    .lex unicode:"$\x{a2}", rx1082_cur
    .local pmc match
    .lex "$/", match
    length rx1082_eos, rx1082_tgt
    gt rx1082_pos, rx1082_eos, rx1082_done
    set rx1082_off, 0
    lt rx1082_pos, 2, rx1082_start
    sub rx1082_off, rx1082_pos, 1
    substr rx1082_tgt, rx1082_tgt, rx1082_off
  rx1082_start:
    eq $I10, 1, rx1082_restart
    if_null rx1082_debug, debug_824
    rx1082_cur."!cursor_debug"("START", "term:sym<name>")
  debug_824:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1086_done
    goto rxscan1086_scan
  rxscan1086_loop:
    (rx1082_pos) = rx1082_cur."from"()
    inc rx1082_pos
    rx1082_cur."!cursor_from"(rx1082_pos)
    ge rx1082_pos, rx1082_eos, rxscan1086_done
  rxscan1086_scan:
    set_addr $I10, rxscan1086_loop
    rx1082_cur."!mark_push"(0, rx1082_pos, $I10)
  rxscan1086_done:
.annotate 'line', 499
  # rx subrule "name" subtype=capture negate=
    rx1082_cur."!cursor_pos"(rx1082_pos)
    $P10 = rx1082_cur."name"()
    unless $P10, rx1082_fail
    rx1082_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx1082_pos = $P10."pos"()
  # rx rxquantr1087 ** 0..1
    set_addr $I10, rxquantr1087_done
    rx1082_cur."!mark_push"(0, rx1082_pos, $I10)
  rxquantr1087_loop:
  # rx subrule "args" subtype=capture negate=
    rx1082_cur."!cursor_pos"(rx1082_pos)
    $P10 = rx1082_cur."args"()
    unless $P10, rx1082_fail
    goto rxsubrule1088_pass
  rxsubrule1088_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1082_fail
  rxsubrule1088_pass:
    set_addr $I10, rxsubrule1088_back
    rx1082_cur."!mark_push"(0, rx1082_pos, $I10, $P10)
    $P10."!cursor_names"("args")
    rx1082_pos = $P10."pos"()
    set_addr $I10, rxquantr1087_done
    (rx1082_rep) = rx1082_cur."!mark_commit"($I10)
  rxquantr1087_done:
.annotate 'line', 498
  # rx pass
    rx1082_cur."!cursor_pass"(rx1082_pos, "term:sym<name>")
    if_null rx1082_debug, debug_825
    rx1082_cur."!cursor_debug"("PASS", "term:sym<name>", " at pos=", rx1082_pos)
  debug_825:
    .return (rx1082_cur)
  rx1082_restart:
.annotate 'line', 4
    if_null rx1082_debug, debug_826
    rx1082_cur."!cursor_debug"("NEXT", "term:sym<name>")
  debug_826:
  rx1082_fail:
    (rx1082_rep, rx1082_pos, $I10, $P10) = rx1082_cur."!mark_fail"(0)
    lt rx1082_pos, -1, rx1082_done
    eq rx1082_pos, -1, rx1082_fail
    jump $I10
  rx1082_done:
    rx1082_cur."!cursor_fail"()
    if_null rx1082_debug, debug_827
    rx1082_cur."!cursor_debug"("FAIL", "term:sym<name>")
  debug_827:
    .return (rx1082_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<name>"  :nsentry("!PREFIX__term:sym<name>") :subid("216_1299591493.348") :method
.annotate 'line', 4
    $P1084 = self."!PREFIX__!subrule"("name", "")
    new $P1085, "ResizablePMCArray"
    push $P1085, $P1084
    .return ($P1085)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<pir::op>"  :subid("217_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1090_tgt
    .local int rx1090_pos
    .local int rx1090_off
    .local int rx1090_eos
    .local int rx1090_rep
    .local pmc rx1090_cur
    .local pmc rx1090_debug
    (rx1090_cur, rx1090_pos, rx1090_tgt, $I10) = self."!cursor_start"()
    rx1090_cur."!cursor_caparray"("args")
    .lex unicode:"$\x{a2}", rx1090_cur
    .local pmc match
    .lex "$/", match
    length rx1090_eos, rx1090_tgt
    gt rx1090_pos, rx1090_eos, rx1090_done
    set rx1090_off, 0
    lt rx1090_pos, 2, rx1090_start
    sub rx1090_off, rx1090_pos, 1
    substr rx1090_tgt, rx1090_tgt, rx1090_off
  rx1090_start:
    eq $I10, 1, rx1090_restart
    if_null rx1090_debug, debug_828
    rx1090_cur."!cursor_debug"("START", "term:sym<pir::op>")
  debug_828:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1093_done
    goto rxscan1093_scan
  rxscan1093_loop:
    (rx1090_pos) = rx1090_cur."from"()
    inc rx1090_pos
    rx1090_cur."!cursor_from"(rx1090_pos)
    ge rx1090_pos, rx1090_eos, rxscan1093_done
  rxscan1093_scan:
    set_addr $I10, rxscan1093_loop
    rx1090_cur."!mark_push"(0, rx1090_pos, $I10)
  rxscan1093_done:
.annotate 'line', 503
  # rx literal  "pir::"
    add $I11, rx1090_pos, 5
    gt $I11, rx1090_eos, rx1090_fail
    sub $I11, rx1090_pos, rx1090_off
    substr $S10, rx1090_tgt, $I11, 5
    ne $S10, "pir::", rx1090_fail
    add rx1090_pos, 5
  # rx subcapture "op"
    set_addr $I10, rxcap_1094_fail
    rx1090_cur."!mark_push"(0, rx1090_pos, $I10)
  # rx charclass_q w r 1..-1
    sub $I10, rx1090_pos, rx1090_off
    find_not_cclass $I11, 8192, rx1090_tgt, $I10, rx1090_eos
    add $I12, $I10, 1
    lt $I11, $I12, rx1090_fail
    add rx1090_pos, rx1090_off, $I11
    set_addr $I10, rxcap_1094_fail
    ($I12, $I11) = rx1090_cur."!mark_peek"($I10)
    rx1090_cur."!cursor_pos"($I11)
    ($P10) = rx1090_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1090_pos, "")
    rx1090_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("op")
    goto rxcap_1094_done
  rxcap_1094_fail:
    goto rx1090_fail
  rxcap_1094_done:
  # rx rxquantr1095 ** 0..1
    set_addr $I10, rxquantr1095_done
    rx1090_cur."!mark_push"(0, rx1090_pos, $I10)
  rxquantr1095_loop:
  # rx subrule "args" subtype=capture negate=
    rx1090_cur."!cursor_pos"(rx1090_pos)
    $P10 = rx1090_cur."args"()
    unless $P10, rx1090_fail
    goto rxsubrule1096_pass
  rxsubrule1096_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1090_fail
  rxsubrule1096_pass:
    set_addr $I10, rxsubrule1096_back
    rx1090_cur."!mark_push"(0, rx1090_pos, $I10, $P10)
    $P10."!cursor_names"("args")
    rx1090_pos = $P10."pos"()
    set_addr $I10, rxquantr1095_done
    (rx1090_rep) = rx1090_cur."!mark_commit"($I10)
  rxquantr1095_done:
.annotate 'line', 502
  # rx pass
    rx1090_cur."!cursor_pass"(rx1090_pos, "term:sym<pir::op>")
    if_null rx1090_debug, debug_829
    rx1090_cur."!cursor_debug"("PASS", "term:sym<pir::op>", " at pos=", rx1090_pos)
  debug_829:
    .return (rx1090_cur)
  rx1090_restart:
.annotate 'line', 4
    if_null rx1090_debug, debug_830
    rx1090_cur."!cursor_debug"("NEXT", "term:sym<pir::op>")
  debug_830:
  rx1090_fail:
    (rx1090_rep, rx1090_pos, $I10, $P10) = rx1090_cur."!mark_fail"(0)
    lt rx1090_pos, -1, rx1090_done
    eq rx1090_pos, -1, rx1090_fail
    jump $I10
  rx1090_done:
    rx1090_cur."!cursor_fail"()
    if_null rx1090_debug, debug_831
    rx1090_cur."!cursor_debug"("FAIL", "term:sym<pir::op>")
  debug_831:
    .return (rx1090_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<pir::op>"  :nsentry("!PREFIX__term:sym<pir::op>") :subid("218_1299591493.348") :method
.annotate 'line', 4
    new $P1092, "ResizablePMCArray"
    push $P1092, "pir::"
    .return ($P1092)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<onlystar>"  :subid("219_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .const 'Sub' $P1106 = "221_1299591493.348" 
    capture_lex $P1106
    .local string rx1098_tgt
    .local int rx1098_pos
    .local int rx1098_off
    .local int rx1098_eos
    .local int rx1098_rep
    .local pmc rx1098_cur
    .local pmc rx1098_debug
    (rx1098_cur, rx1098_pos, rx1098_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1098_cur
    .local pmc match
    .lex "$/", match
    length rx1098_eos, rx1098_tgt
    gt rx1098_pos, rx1098_eos, rx1098_done
    set rx1098_off, 0
    lt rx1098_pos, 2, rx1098_start
    sub rx1098_off, rx1098_pos, 1
    substr rx1098_tgt, rx1098_tgt, rx1098_off
  rx1098_start:
    eq $I10, 1, rx1098_restart
    if_null rx1098_debug, debug_832
    rx1098_cur."!cursor_debug"("START", "term:sym<onlystar>")
  debug_832:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1101_done
    goto rxscan1101_scan
  rxscan1101_loop:
    (rx1098_pos) = rx1098_cur."from"()
    inc rx1098_pos
    rx1098_cur."!cursor_from"(rx1098_pos)
    ge rx1098_pos, rx1098_eos, rxscan1101_done
  rxscan1101_scan:
    set_addr $I10, rxscan1101_loop
    rx1098_cur."!mark_push"(0, rx1098_pos, $I10)
  rxscan1101_done:
.annotate 'line', 507
  # rx literal  "{*}"
    add $I11, rx1098_pos, 3
    gt $I11, rx1098_eos, rx1098_fail
    sub $I11, rx1098_pos, rx1098_off
    substr $S10, rx1098_tgt, $I11, 3
    ne $S10, "{*}", rx1098_fail
    add rx1098_pos, 3
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx1098_cur."!cursor_pos"(rx1098_pos)
    $P10 = rx1098_cur."ENDSTMT"()
    unless $P10, rx1098_fail
  alt1102_0:
.annotate 'line', 508
    set_addr $I10, alt1102_1
    rx1098_cur."!mark_push"(0, rx1098_pos, $I10)
    rx1098_cur."!cursor_pos"(rx1098_pos)
    find_lex $P1103, unicode:"$\x{a2}"
    $P1104 = $P1103."MATCH"()
    store_lex "$/", $P1104
    .const 'Sub' $P1106 = "221_1299591493.348" 
    capture_lex $P1106
    $P1110 = $P1106()
    unless $P1110, rx1098_fail
    goto alt1102_end
  alt1102_1:
  # rx subrule "panic" subtype=method negate=
    rx1098_cur."!cursor_pos"(rx1098_pos)
    $P10 = rx1098_cur."panic"("{*} may only appear in proto")
    unless $P10, rx1098_fail
    rx1098_pos = $P10."pos"()
  alt1102_end:
.annotate 'line', 506
  # rx pass
    rx1098_cur."!cursor_pass"(rx1098_pos, "term:sym<onlystar>")
    if_null rx1098_debug, debug_835
    rx1098_cur."!cursor_debug"("PASS", "term:sym<onlystar>", " at pos=", rx1098_pos)
  debug_835:
    .return (rx1098_cur)
  rx1098_restart:
.annotate 'line', 4
    if_null rx1098_debug, debug_836
    rx1098_cur."!cursor_debug"("NEXT", "term:sym<onlystar>")
  debug_836:
  rx1098_fail:
    (rx1098_rep, rx1098_pos, $I10, $P10) = rx1098_cur."!mark_fail"(0)
    lt rx1098_pos, -1, rx1098_done
    eq rx1098_pos, -1, rx1098_fail
    jump $I10
  rx1098_done:
    rx1098_cur."!cursor_fail"()
    if_null rx1098_debug, debug_837
    rx1098_cur."!cursor_debug"("FAIL", "term:sym<onlystar>")
  debug_837:
    .return (rx1098_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<onlystar>"  :nsentry("!PREFIX__term:sym<onlystar>") :subid("220_1299591493.348") :method
.annotate 'line', 4
    new $P1100, "ResizablePMCArray"
    push $P1100, "{*}"
    .return ($P1100)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1105"  :anon :subid("221_1299591493.348") :outer("219_1299591493.348")
.annotate 'line', 508
    find_dynamic_lex $P1107, "$*MULTINESS"
    unless_null $P1107, vivify_833
    get_hll_global $P1107, "$MULTINESS"
    unless_null $P1107, vivify_834
    die "Contextual $*MULTINESS not found"
  vivify_834:
  vivify_833:
    set $S1108, $P1107
    iseq $I1109, $S1108, "proto"
    .return ($I1109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "args"  :subid("222_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1112_tgt
    .local int rx1112_pos
    .local int rx1112_off
    .local int rx1112_eos
    .local int rx1112_rep
    .local pmc rx1112_cur
    .local pmc rx1112_debug
    (rx1112_cur, rx1112_pos, rx1112_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1112_cur
    .local pmc match
    .lex "$/", match
    length rx1112_eos, rx1112_tgt
    gt rx1112_pos, rx1112_eos, rx1112_done
    set rx1112_off, 0
    lt rx1112_pos, 2, rx1112_start
    sub rx1112_off, rx1112_pos, 1
    substr rx1112_tgt, rx1112_tgt, rx1112_off
  rx1112_start:
    eq $I10, 1, rx1112_restart
    if_null rx1112_debug, debug_838
    rx1112_cur."!cursor_debug"("START", "args")
  debug_838:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1116_done
    goto rxscan1116_scan
  rxscan1116_loop:
    (rx1112_pos) = rx1112_cur."from"()
    inc rx1112_pos
    rx1112_cur."!cursor_from"(rx1112_pos)
    ge rx1112_pos, rx1112_eos, rxscan1116_done
  rxscan1116_scan:
    set_addr $I10, rxscan1116_loop
    rx1112_cur."!mark_push"(0, rx1112_pos, $I10)
  rxscan1116_done:
.annotate 'line', 512
  # rx literal  "("
    add $I11, rx1112_pos, 1
    gt $I11, rx1112_eos, rx1112_fail
    sub $I11, rx1112_pos, rx1112_off
    ord $I11, rx1112_tgt, $I11
    ne $I11, 40, rx1112_fail
    add rx1112_pos, 1
  # rx subrule "arglist" subtype=capture negate=
    rx1112_cur."!cursor_pos"(rx1112_pos)
    $P10 = rx1112_cur."arglist"()
    unless $P10, rx1112_fail
    rx1112_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("arglist")
    rx1112_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx1112_pos, 1
    gt $I11, rx1112_eos, rx1112_fail
    sub $I11, rx1112_pos, rx1112_off
    ord $I11, rx1112_tgt, $I11
    ne $I11, 41, rx1112_fail
    add rx1112_pos, 1
  # rx pass
    rx1112_cur."!cursor_pass"(rx1112_pos, "args")
    if_null rx1112_debug, debug_839
    rx1112_cur."!cursor_debug"("PASS", "args", " at pos=", rx1112_pos)
  debug_839:
    .return (rx1112_cur)
  rx1112_restart:
.annotate 'line', 4
    if_null rx1112_debug, debug_840
    rx1112_cur."!cursor_debug"("NEXT", "args")
  debug_840:
  rx1112_fail:
    (rx1112_rep, rx1112_pos, $I10, $P10) = rx1112_cur."!mark_fail"(0)
    lt rx1112_pos, -1, rx1112_done
    eq rx1112_pos, -1, rx1112_fail
    jump $I10
  rx1112_done:
    rx1112_cur."!cursor_fail"()
    if_null rx1112_debug, debug_841
    rx1112_cur."!cursor_debug"("FAIL", "args")
  debug_841:
    .return (rx1112_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__args"  :nsentry("!PREFIX__args") :subid("223_1299591493.348") :method
.annotate 'line', 4
    $P1114 = self."!PREFIX__!subrule"("arglist", "(")
    new $P1115, "ResizablePMCArray"
    push $P1115, $P1114
    .return ($P1115)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "arglist"  :subid("224_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1118_tgt
    .local int rx1118_pos
    .local int rx1118_off
    .local int rx1118_eos
    .local int rx1118_rep
    .local pmc rx1118_cur
    .local pmc rx1118_debug
    (rx1118_cur, rx1118_pos, rx1118_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1118_cur
    .local pmc match
    .lex "$/", match
    length rx1118_eos, rx1118_tgt
    gt rx1118_pos, rx1118_eos, rx1118_done
    set rx1118_off, 0
    lt rx1118_pos, 2, rx1118_start
    sub rx1118_off, rx1118_pos, 1
    substr rx1118_tgt, rx1118_tgt, rx1118_off
  rx1118_start:
    eq $I10, 1, rx1118_restart
    if_null rx1118_debug, debug_842
    rx1118_cur."!cursor_debug"("START", "arglist")
  debug_842:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1122_done
    goto rxscan1122_scan
  rxscan1122_loop:
    (rx1118_pos) = rx1118_cur."from"()
    inc rx1118_pos
    rx1118_cur."!cursor_from"(rx1118_pos)
    ge rx1118_pos, rx1118_eos, rxscan1122_done
  rxscan1122_scan:
    set_addr $I10, rxscan1122_loop
    rx1118_cur."!mark_push"(0, rx1118_pos, $I10)
  rxscan1122_done:
.annotate 'line', 516
  # rx subrule "ws" subtype=method negate=
    rx1118_cur."!cursor_pos"(rx1118_pos)
    $P10 = rx1118_cur."ws"()
    unless $P10, rx1118_fail
    rx1118_pos = $P10."pos"()
  alt1123_0:
.annotate 'line', 517
    set_addr $I10, alt1123_1
    rx1118_cur."!mark_push"(0, rx1118_pos, $I10)
.annotate 'line', 518
  # rx subrule "EXPR" subtype=capture negate=
    rx1118_cur."!cursor_pos"(rx1118_pos)
    $P10 = rx1118_cur."EXPR"("f=")
    unless $P10, rx1118_fail
    rx1118_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx1118_pos = $P10."pos"()
    goto alt1123_end
  alt1123_1:
  alt1123_end:
.annotate 'line', 515
  # rx pass
    rx1118_cur."!cursor_pass"(rx1118_pos, "arglist")
    if_null rx1118_debug, debug_843
    rx1118_cur."!cursor_debug"("PASS", "arglist", " at pos=", rx1118_pos)
  debug_843:
    .return (rx1118_cur)
  rx1118_restart:
.annotate 'line', 4
    if_null rx1118_debug, debug_844
    rx1118_cur."!cursor_debug"("NEXT", "arglist")
  debug_844:
  rx1118_fail:
    (rx1118_rep, rx1118_pos, $I10, $P10) = rx1118_cur."!mark_fail"(0)
    lt rx1118_pos, -1, rx1118_done
    eq rx1118_pos, -1, rx1118_fail
    jump $I10
  rx1118_done:
    rx1118_cur."!cursor_fail"()
    if_null rx1118_debug, debug_845
    rx1118_cur."!cursor_debug"("FAIL", "arglist")
  debug_845:
    .return (rx1118_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__arglist"  :nsentry("!PREFIX__arglist") :subid("225_1299591493.348") :method
.annotate 'line', 4
    $P1120 = self."!PREFIX__!subrule"("ws", "")
    new $P1121, "ResizablePMCArray"
    push $P1121, $P1120
    .return ($P1121)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<value>"  :subid("226_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1125_tgt
    .local int rx1125_pos
    .local int rx1125_off
    .local int rx1125_eos
    .local int rx1125_rep
    .local pmc rx1125_cur
    .local pmc rx1125_debug
    (rx1125_cur, rx1125_pos, rx1125_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1125_cur
    .local pmc match
    .lex "$/", match
    length rx1125_eos, rx1125_tgt
    gt rx1125_pos, rx1125_eos, rx1125_done
    set rx1125_off, 0
    lt rx1125_pos, 2, rx1125_start
    sub rx1125_off, rx1125_pos, 1
    substr rx1125_tgt, rx1125_tgt, rx1125_off
  rx1125_start:
    eq $I10, 1, rx1125_restart
    if_null rx1125_debug, debug_846
    rx1125_cur."!cursor_debug"("START", "term:sym<value>")
  debug_846:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1129_done
    goto rxscan1129_scan
  rxscan1129_loop:
    (rx1125_pos) = rx1125_cur."from"()
    inc rx1125_pos
    rx1125_cur."!cursor_from"(rx1125_pos)
    ge rx1125_pos, rx1125_eos, rxscan1129_done
  rxscan1129_scan:
    set_addr $I10, rxscan1129_loop
    rx1125_cur."!mark_push"(0, rx1125_pos, $I10)
  rxscan1129_done:
.annotate 'line', 524
  # rx subrule "value" subtype=capture negate=
    rx1125_cur."!cursor_pos"(rx1125_pos)
    $P10 = rx1125_cur."value"()
    unless $P10, rx1125_fail
    rx1125_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("value")
    rx1125_pos = $P10."pos"()
  # rx pass
    rx1125_cur."!cursor_pass"(rx1125_pos, "term:sym<value>")
    if_null rx1125_debug, debug_847
    rx1125_cur."!cursor_debug"("PASS", "term:sym<value>", " at pos=", rx1125_pos)
  debug_847:
    .return (rx1125_cur)
  rx1125_restart:
.annotate 'line', 4
    if_null rx1125_debug, debug_848
    rx1125_cur."!cursor_debug"("NEXT", "term:sym<value>")
  debug_848:
  rx1125_fail:
    (rx1125_rep, rx1125_pos, $I10, $P10) = rx1125_cur."!mark_fail"(0)
    lt rx1125_pos, -1, rx1125_done
    eq rx1125_pos, -1, rx1125_fail
    jump $I10
  rx1125_done:
    rx1125_cur."!cursor_fail"()
    if_null rx1125_debug, debug_849
    rx1125_cur."!cursor_debug"("FAIL", "term:sym<value>")
  debug_849:
    .return (rx1125_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<value>"  :nsentry("!PREFIX__term:sym<value>") :subid("227_1299591493.348") :method
.annotate 'line', 4
    $P1127 = self."!PREFIX__!subrule"("value", "")
    new $P1128, "ResizablePMCArray"
    push $P1128, $P1127
    .return ($P1128)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "value"  :subid("228_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1131_tgt
    .local int rx1131_pos
    .local int rx1131_off
    .local int rx1131_eos
    .local int rx1131_rep
    .local pmc rx1131_cur
    .local pmc rx1131_debug
    (rx1131_cur, rx1131_pos, rx1131_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1131_cur
    .local pmc match
    .lex "$/", match
    length rx1131_eos, rx1131_tgt
    gt rx1131_pos, rx1131_eos, rx1131_done
    set rx1131_off, 0
    lt rx1131_pos, 2, rx1131_start
    sub rx1131_off, rx1131_pos, 1
    substr rx1131_tgt, rx1131_tgt, rx1131_off
  rx1131_start:
    eq $I10, 1, rx1131_restart
    if_null rx1131_debug, debug_850
    rx1131_cur."!cursor_debug"("START", "value")
  debug_850:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1136_done
    goto rxscan1136_scan
  rxscan1136_loop:
    (rx1131_pos) = rx1131_cur."from"()
    inc rx1131_pos
    rx1131_cur."!cursor_from"(rx1131_pos)
    ge rx1131_pos, rx1131_eos, rxscan1136_done
  rxscan1136_scan:
    set_addr $I10, rxscan1136_loop
    rx1131_cur."!mark_push"(0, rx1131_pos, $I10)
  rxscan1136_done:
  alt1137_0:
.annotate 'line', 526
    set_addr $I10, alt1137_1
    rx1131_cur."!mark_push"(0, rx1131_pos, $I10)
.annotate 'line', 527
  # rx subrule "quote" subtype=capture negate=
    rx1131_cur."!cursor_pos"(rx1131_pos)
    $P10 = rx1131_cur."quote"()
    unless $P10, rx1131_fail
    rx1131_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote")
    rx1131_pos = $P10."pos"()
    goto alt1137_end
  alt1137_1:
.annotate 'line', 528
  # rx subrule "number" subtype=capture negate=
    rx1131_cur."!cursor_pos"(rx1131_pos)
    $P10 = rx1131_cur."number"()
    unless $P10, rx1131_fail
    rx1131_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("number")
    rx1131_pos = $P10."pos"()
  alt1137_end:
.annotate 'line', 526
  # rx pass
    rx1131_cur."!cursor_pass"(rx1131_pos, "value")
    if_null rx1131_debug, debug_851
    rx1131_cur."!cursor_debug"("PASS", "value", " at pos=", rx1131_pos)
  debug_851:
    .return (rx1131_cur)
  rx1131_restart:
.annotate 'line', 4
    if_null rx1131_debug, debug_852
    rx1131_cur."!cursor_debug"("NEXT", "value")
  debug_852:
  rx1131_fail:
    (rx1131_rep, rx1131_pos, $I10, $P10) = rx1131_cur."!mark_fail"(0)
    lt rx1131_pos, -1, rx1131_done
    eq rx1131_pos, -1, rx1131_fail
    jump $I10
  rx1131_done:
    rx1131_cur."!cursor_fail"()
    if_null rx1131_debug, debug_853
    rx1131_cur."!cursor_debug"("FAIL", "value")
  debug_853:
    .return (rx1131_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__value"  :nsentry("!PREFIX__value") :subid("229_1299591493.348") :method
.annotate 'line', 4
    $P1133 = self."!PREFIX__!subrule"("number", "")
    $P1134 = self."!PREFIX__!subrule"("quote", "")
    new $P1135, "ResizablePMCArray"
    push $P1135, $P1133
    push $P1135, $P1134
    .return ($P1135)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "number"  :subid("230_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1139_tgt
    .local int rx1139_pos
    .local int rx1139_off
    .local int rx1139_eos
    .local int rx1139_rep
    .local pmc rx1139_cur
    .local pmc rx1139_debug
    (rx1139_cur, rx1139_pos, rx1139_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1139_cur
    .local pmc match
    .lex "$/", match
    length rx1139_eos, rx1139_tgt
    gt rx1139_pos, rx1139_eos, rx1139_done
    set rx1139_off, 0
    lt rx1139_pos, 2, rx1139_start
    sub rx1139_off, rx1139_pos, 1
    substr rx1139_tgt, rx1139_tgt, rx1139_off
  rx1139_start:
    eq $I10, 1, rx1139_restart
    if_null rx1139_debug, debug_854
    rx1139_cur."!cursor_debug"("START", "number")
  debug_854:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1142_done
    goto rxscan1142_scan
  rxscan1142_loop:
    (rx1139_pos) = rx1139_cur."from"()
    inc rx1139_pos
    rx1139_cur."!cursor_from"(rx1139_pos)
    ge rx1139_pos, rx1139_eos, rxscan1142_done
  rxscan1142_scan:
    set_addr $I10, rxscan1142_loop
    rx1139_cur."!mark_push"(0, rx1139_pos, $I10)
  rxscan1142_done:
.annotate 'line', 532
  # rx subcapture "sign"
    set_addr $I10, rxcap_1144_fail
    rx1139_cur."!mark_push"(0, rx1139_pos, $I10)
  # rx enumcharlist_q negate=0  r 0..1
    sub $I10, rx1139_pos, rx1139_off
    set rx1139_rep, 0
    sub $I12, rx1139_eos, rx1139_pos
    le $I12, 1, rxenumcharlistq1143_loop
    set $I12, 1
  rxenumcharlistq1143_loop:
    le $I12, 0, rxenumcharlistq1143_done
    substr $S10, rx1139_tgt, $I10, 1
    index $I11, "+-", $S10
    lt $I11, 0, rxenumcharlistq1143_done
    inc rx1139_rep
  rxenumcharlistq1143_done:
    add rx1139_pos, rx1139_pos, rx1139_rep
    set_addr $I10, rxcap_1144_fail
    ($I12, $I11) = rx1139_cur."!mark_peek"($I10)
    rx1139_cur."!cursor_pos"($I11)
    ($P10) = rx1139_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1139_pos, "")
    rx1139_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sign")
    goto rxcap_1144_done
  rxcap_1144_fail:
    goto rx1139_fail
  rxcap_1144_done:
  alt1145_0:
.annotate 'line', 533
    set_addr $I10, alt1145_1
    rx1139_cur."!mark_push"(0, rx1139_pos, $I10)
  # rx subrule "dec_number" subtype=capture negate=
    rx1139_cur."!cursor_pos"(rx1139_pos)
    $P10 = rx1139_cur."dec_number"()
    unless $P10, rx1139_fail
    rx1139_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("dec_number")
    rx1139_pos = $P10."pos"()
    goto alt1145_end
  alt1145_1:
  # rx subrule "integer" subtype=capture negate=
    rx1139_cur."!cursor_pos"(rx1139_pos)
    $P10 = rx1139_cur."integer"()
    unless $P10, rx1139_fail
    rx1139_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("integer")
    rx1139_pos = $P10."pos"()
  alt1145_end:
.annotate 'line', 531
  # rx pass
    rx1139_cur."!cursor_pass"(rx1139_pos, "number")
    if_null rx1139_debug, debug_855
    rx1139_cur."!cursor_debug"("PASS", "number", " at pos=", rx1139_pos)
  debug_855:
    .return (rx1139_cur)
  rx1139_restart:
.annotate 'line', 4
    if_null rx1139_debug, debug_856
    rx1139_cur."!cursor_debug"("NEXT", "number")
  debug_856:
  rx1139_fail:
    (rx1139_rep, rx1139_pos, $I10, $P10) = rx1139_cur."!mark_fail"(0)
    lt rx1139_pos, -1, rx1139_done
    eq rx1139_pos, -1, rx1139_fail
    jump $I10
  rx1139_done:
    rx1139_cur."!cursor_fail"()
    if_null rx1139_debug, debug_857
    rx1139_cur."!cursor_debug"("FAIL", "number")
  debug_857:
    .return (rx1139_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__number"  :nsentry("!PREFIX__number") :subid("231_1299591493.348") :method
.annotate 'line', 4
    new $P1141, "ResizablePMCArray"
    push $P1141, ""
    .return ($P1141)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote"  :subid("232_1299591493.348")
    .param pmc param_1147
.annotate 'line', 536
    .lex "self", param_1147
    $P1148 = param_1147."!protoregex"("quote")
    .return ($P1148)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote"  :subid("233_1299591493.348")
    .param pmc param_1150
.annotate 'line', 536
    .lex "self", param_1150
    $P1151 = param_1150."!PREFIX__!protoregex"("quote")
    .return ($P1151)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<apos>"  :subid("234_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1153_tgt
    .local int rx1153_pos
    .local int rx1153_off
    .local int rx1153_eos
    .local int rx1153_rep
    .local pmc rx1153_cur
    .local pmc rx1153_debug
    (rx1153_cur, rx1153_pos, rx1153_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1153_cur
    .local pmc match
    .lex "$/", match
    length rx1153_eos, rx1153_tgt
    gt rx1153_pos, rx1153_eos, rx1153_done
    set rx1153_off, 0
    lt rx1153_pos, 2, rx1153_start
    sub rx1153_off, rx1153_pos, 1
    substr rx1153_tgt, rx1153_tgt, rx1153_off
  rx1153_start:
    eq $I10, 1, rx1153_restart
    if_null rx1153_debug, debug_858
    rx1153_cur."!cursor_debug"("START", "quote:sym<apos>")
  debug_858:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1156_done
    goto rxscan1156_scan
  rxscan1156_loop:
    (rx1153_pos) = rx1153_cur."from"()
    inc rx1153_pos
    rx1153_cur."!cursor_from"(rx1153_pos)
    ge rx1153_pos, rx1153_eos, rxscan1156_done
  rxscan1156_scan:
    set_addr $I10, rxscan1156_loop
    rx1153_cur."!mark_push"(0, rx1153_pos, $I10)
  rxscan1156_done:
.annotate 'line', 537
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1153_pos, rx1153_off
    substr $S10, rx1153_tgt, $I10, 1
    index $I11, "'", $S10
    lt $I11, 0, rx1153_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx1153_cur."!cursor_pos"(rx1153_pos)
    $P10 = rx1153_cur."quote_EXPR"(":q")
    unless $P10, rx1153_fail
    rx1153_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx1153_pos = $P10."pos"()
  # rx pass
    rx1153_cur."!cursor_pass"(rx1153_pos, "quote:sym<apos>")
    if_null rx1153_debug, debug_859
    rx1153_cur."!cursor_debug"("PASS", "quote:sym<apos>", " at pos=", rx1153_pos)
  debug_859:
    .return (rx1153_cur)
  rx1153_restart:
.annotate 'line', 4
    if_null rx1153_debug, debug_860
    rx1153_cur."!cursor_debug"("NEXT", "quote:sym<apos>")
  debug_860:
  rx1153_fail:
    (rx1153_rep, rx1153_pos, $I10, $P10) = rx1153_cur."!mark_fail"(0)
    lt rx1153_pos, -1, rx1153_done
    eq rx1153_pos, -1, rx1153_fail
    jump $I10
  rx1153_done:
    rx1153_cur."!cursor_fail"()
    if_null rx1153_debug, debug_861
    rx1153_cur."!cursor_debug"("FAIL", "quote:sym<apos>")
  debug_861:
    .return (rx1153_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<apos>"  :nsentry("!PREFIX__quote:sym<apos>") :subid("235_1299591493.348") :method
.annotate 'line', 4
    new $P1155, "ResizablePMCArray"
    push $P1155, "'"
    .return ($P1155)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<dblq>"  :subid("236_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1158_tgt
    .local int rx1158_pos
    .local int rx1158_off
    .local int rx1158_eos
    .local int rx1158_rep
    .local pmc rx1158_cur
    .local pmc rx1158_debug
    (rx1158_cur, rx1158_pos, rx1158_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1158_cur
    .local pmc match
    .lex "$/", match
    length rx1158_eos, rx1158_tgt
    gt rx1158_pos, rx1158_eos, rx1158_done
    set rx1158_off, 0
    lt rx1158_pos, 2, rx1158_start
    sub rx1158_off, rx1158_pos, 1
    substr rx1158_tgt, rx1158_tgt, rx1158_off
  rx1158_start:
    eq $I10, 1, rx1158_restart
    if_null rx1158_debug, debug_862
    rx1158_cur."!cursor_debug"("START", "quote:sym<dblq>")
  debug_862:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1161_done
    goto rxscan1161_scan
  rxscan1161_loop:
    (rx1158_pos) = rx1158_cur."from"()
    inc rx1158_pos
    rx1158_cur."!cursor_from"(rx1158_pos)
    ge rx1158_pos, rx1158_eos, rxscan1161_done
  rxscan1161_scan:
    set_addr $I10, rxscan1161_loop
    rx1158_cur."!mark_push"(0, rx1158_pos, $I10)
  rxscan1161_done:
.annotate 'line', 538
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1158_pos, rx1158_off
    substr $S10, rx1158_tgt, $I10, 1
    index $I11, "\"", $S10
    lt $I11, 0, rx1158_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx1158_cur."!cursor_pos"(rx1158_pos)
    $P10 = rx1158_cur."quote_EXPR"(":qq")
    unless $P10, rx1158_fail
    rx1158_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx1158_pos = $P10."pos"()
  # rx pass
    rx1158_cur."!cursor_pass"(rx1158_pos, "quote:sym<dblq>")
    if_null rx1158_debug, debug_863
    rx1158_cur."!cursor_debug"("PASS", "quote:sym<dblq>", " at pos=", rx1158_pos)
  debug_863:
    .return (rx1158_cur)
  rx1158_restart:
.annotate 'line', 4
    if_null rx1158_debug, debug_864
    rx1158_cur."!cursor_debug"("NEXT", "quote:sym<dblq>")
  debug_864:
  rx1158_fail:
    (rx1158_rep, rx1158_pos, $I10, $P10) = rx1158_cur."!mark_fail"(0)
    lt rx1158_pos, -1, rx1158_done
    eq rx1158_pos, -1, rx1158_fail
    jump $I10
  rx1158_done:
    rx1158_cur."!cursor_fail"()
    if_null rx1158_debug, debug_865
    rx1158_cur."!cursor_debug"("FAIL", "quote:sym<dblq>")
  debug_865:
    .return (rx1158_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<dblq>"  :nsentry("!PREFIX__quote:sym<dblq>") :subid("237_1299591493.348") :method
.annotate 'line', 4
    new $P1160, "ResizablePMCArray"
    push $P1160, "\""
    .return ($P1160)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<q>"  :subid("238_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1163_tgt
    .local int rx1163_pos
    .local int rx1163_off
    .local int rx1163_eos
    .local int rx1163_rep
    .local pmc rx1163_cur
    .local pmc rx1163_debug
    (rx1163_cur, rx1163_pos, rx1163_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1163_cur
    .local pmc match
    .lex "$/", match
    length rx1163_eos, rx1163_tgt
    gt rx1163_pos, rx1163_eos, rx1163_done
    set rx1163_off, 0
    lt rx1163_pos, 2, rx1163_start
    sub rx1163_off, rx1163_pos, 1
    substr rx1163_tgt, rx1163_tgt, rx1163_off
  rx1163_start:
    eq $I10, 1, rx1163_restart
    if_null rx1163_debug, debug_866
    rx1163_cur."!cursor_debug"("START", "quote:sym<q>")
  debug_866:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1167_done
    goto rxscan1167_scan
  rxscan1167_loop:
    (rx1163_pos) = rx1163_cur."from"()
    inc rx1163_pos
    rx1163_cur."!cursor_from"(rx1163_pos)
    ge rx1163_pos, rx1163_eos, rxscan1167_done
  rxscan1167_scan:
    set_addr $I10, rxscan1167_loop
    rx1163_cur."!mark_push"(0, rx1163_pos, $I10)
  rxscan1167_done:
.annotate 'line', 539
  # rx literal  "q"
    add $I11, rx1163_pos, 1
    gt $I11, rx1163_eos, rx1163_fail
    sub $I11, rx1163_pos, rx1163_off
    ord $I11, rx1163_tgt, $I11
    ne $I11, 113, rx1163_fail
    add rx1163_pos, 1
  # rxanchor rwb
    le rx1163_pos, 0, rx1163_fail
    sub $I10, rx1163_pos, rx1163_off
    is_cclass $I11, 8192, rx1163_tgt, $I10
    if $I11, rx1163_fail
    dec $I10
    is_cclass $I11, 8192, rx1163_tgt, $I10
    unless $I11, rx1163_fail
  # rx enumcharlist negate=1 zerowidth
    sub $I10, rx1163_pos, rx1163_off
    substr $S10, rx1163_tgt, $I10, 1
    index $I11, "(", $S10
    ge $I11, 0, rx1163_fail
  # rx subrule "ws" subtype=method negate=
    rx1163_cur."!cursor_pos"(rx1163_pos)
    $P10 = rx1163_cur."ws"()
    unless $P10, rx1163_fail
    rx1163_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx1163_cur."!cursor_pos"(rx1163_pos)
    $P10 = rx1163_cur."quote_EXPR"(":q")
    unless $P10, rx1163_fail
    rx1163_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx1163_pos = $P10."pos"()
  # rx pass
    rx1163_cur."!cursor_pass"(rx1163_pos, "quote:sym<q>")
    if_null rx1163_debug, debug_867
    rx1163_cur."!cursor_debug"("PASS", "quote:sym<q>", " at pos=", rx1163_pos)
  debug_867:
    .return (rx1163_cur)
  rx1163_restart:
.annotate 'line', 4
    if_null rx1163_debug, debug_868
    rx1163_cur."!cursor_debug"("NEXT", "quote:sym<q>")
  debug_868:
  rx1163_fail:
    (rx1163_rep, rx1163_pos, $I10, $P10) = rx1163_cur."!mark_fail"(0)
    lt rx1163_pos, -1, rx1163_done
    eq rx1163_pos, -1, rx1163_fail
    jump $I10
  rx1163_done:
    rx1163_cur."!cursor_fail"()
    if_null rx1163_debug, debug_869
    rx1163_cur."!cursor_debug"("FAIL", "quote:sym<q>")
  debug_869:
    .return (rx1163_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<q>"  :nsentry("!PREFIX__quote:sym<q>") :subid("239_1299591493.348") :method
.annotate 'line', 4
    $P1165 = self."!PREFIX__!subrule"("ws", "q")
    new $P1166, "ResizablePMCArray"
    push $P1166, $P1165
    .return ($P1166)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<qq>"  :subid("240_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1169_tgt
    .local int rx1169_pos
    .local int rx1169_off
    .local int rx1169_eos
    .local int rx1169_rep
    .local pmc rx1169_cur
    .local pmc rx1169_debug
    (rx1169_cur, rx1169_pos, rx1169_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1169_cur
    .local pmc match
    .lex "$/", match
    length rx1169_eos, rx1169_tgt
    gt rx1169_pos, rx1169_eos, rx1169_done
    set rx1169_off, 0
    lt rx1169_pos, 2, rx1169_start
    sub rx1169_off, rx1169_pos, 1
    substr rx1169_tgt, rx1169_tgt, rx1169_off
  rx1169_start:
    eq $I10, 1, rx1169_restart
    if_null rx1169_debug, debug_870
    rx1169_cur."!cursor_debug"("START", "quote:sym<qq>")
  debug_870:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1173_done
    goto rxscan1173_scan
  rxscan1173_loop:
    (rx1169_pos) = rx1169_cur."from"()
    inc rx1169_pos
    rx1169_cur."!cursor_from"(rx1169_pos)
    ge rx1169_pos, rx1169_eos, rxscan1173_done
  rxscan1173_scan:
    set_addr $I10, rxscan1173_loop
    rx1169_cur."!mark_push"(0, rx1169_pos, $I10)
  rxscan1173_done:
.annotate 'line', 540
  # rx literal  "qq"
    add $I11, rx1169_pos, 2
    gt $I11, rx1169_eos, rx1169_fail
    sub $I11, rx1169_pos, rx1169_off
    substr $S10, rx1169_tgt, $I11, 2
    ne $S10, "qq", rx1169_fail
    add rx1169_pos, 2
  # rxanchor rwb
    le rx1169_pos, 0, rx1169_fail
    sub $I10, rx1169_pos, rx1169_off
    is_cclass $I11, 8192, rx1169_tgt, $I10
    if $I11, rx1169_fail
    dec $I10
    is_cclass $I11, 8192, rx1169_tgt, $I10
    unless $I11, rx1169_fail
  # rx enumcharlist negate=1 zerowidth
    sub $I10, rx1169_pos, rx1169_off
    substr $S10, rx1169_tgt, $I10, 1
    index $I11, "(", $S10
    ge $I11, 0, rx1169_fail
  # rx subrule "ws" subtype=method negate=
    rx1169_cur."!cursor_pos"(rx1169_pos)
    $P10 = rx1169_cur."ws"()
    unless $P10, rx1169_fail
    rx1169_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx1169_cur."!cursor_pos"(rx1169_pos)
    $P10 = rx1169_cur."quote_EXPR"(":qq")
    unless $P10, rx1169_fail
    rx1169_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx1169_pos = $P10."pos"()
  # rx pass
    rx1169_cur."!cursor_pass"(rx1169_pos, "quote:sym<qq>")
    if_null rx1169_debug, debug_871
    rx1169_cur."!cursor_debug"("PASS", "quote:sym<qq>", " at pos=", rx1169_pos)
  debug_871:
    .return (rx1169_cur)
  rx1169_restart:
.annotate 'line', 4
    if_null rx1169_debug, debug_872
    rx1169_cur."!cursor_debug"("NEXT", "quote:sym<qq>")
  debug_872:
  rx1169_fail:
    (rx1169_rep, rx1169_pos, $I10, $P10) = rx1169_cur."!mark_fail"(0)
    lt rx1169_pos, -1, rx1169_done
    eq rx1169_pos, -1, rx1169_fail
    jump $I10
  rx1169_done:
    rx1169_cur."!cursor_fail"()
    if_null rx1169_debug, debug_873
    rx1169_cur."!cursor_debug"("FAIL", "quote:sym<qq>")
  debug_873:
    .return (rx1169_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<qq>"  :nsentry("!PREFIX__quote:sym<qq>") :subid("241_1299591493.348") :method
.annotate 'line', 4
    $P1171 = self."!PREFIX__!subrule"("ws", "qq")
    new $P1172, "ResizablePMCArray"
    push $P1172, $P1171
    .return ($P1172)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<Q>"  :subid("242_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1175_tgt
    .local int rx1175_pos
    .local int rx1175_off
    .local int rx1175_eos
    .local int rx1175_rep
    .local pmc rx1175_cur
    .local pmc rx1175_debug
    (rx1175_cur, rx1175_pos, rx1175_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1175_cur
    .local pmc match
    .lex "$/", match
    length rx1175_eos, rx1175_tgt
    gt rx1175_pos, rx1175_eos, rx1175_done
    set rx1175_off, 0
    lt rx1175_pos, 2, rx1175_start
    sub rx1175_off, rx1175_pos, 1
    substr rx1175_tgt, rx1175_tgt, rx1175_off
  rx1175_start:
    eq $I10, 1, rx1175_restart
    if_null rx1175_debug, debug_874
    rx1175_cur."!cursor_debug"("START", "quote:sym<Q>")
  debug_874:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1179_done
    goto rxscan1179_scan
  rxscan1179_loop:
    (rx1175_pos) = rx1175_cur."from"()
    inc rx1175_pos
    rx1175_cur."!cursor_from"(rx1175_pos)
    ge rx1175_pos, rx1175_eos, rxscan1179_done
  rxscan1179_scan:
    set_addr $I10, rxscan1179_loop
    rx1175_cur."!mark_push"(0, rx1175_pos, $I10)
  rxscan1179_done:
.annotate 'line', 541
  # rx literal  "Q"
    add $I11, rx1175_pos, 1
    gt $I11, rx1175_eos, rx1175_fail
    sub $I11, rx1175_pos, rx1175_off
    ord $I11, rx1175_tgt, $I11
    ne $I11, 81, rx1175_fail
    add rx1175_pos, 1
  # rxanchor rwb
    le rx1175_pos, 0, rx1175_fail
    sub $I10, rx1175_pos, rx1175_off
    is_cclass $I11, 8192, rx1175_tgt, $I10
    if $I11, rx1175_fail
    dec $I10
    is_cclass $I11, 8192, rx1175_tgt, $I10
    unless $I11, rx1175_fail
  # rx enumcharlist negate=1 zerowidth
    sub $I10, rx1175_pos, rx1175_off
    substr $S10, rx1175_tgt, $I10, 1
    index $I11, "(", $S10
    ge $I11, 0, rx1175_fail
  # rx subrule "ws" subtype=method negate=
    rx1175_cur."!cursor_pos"(rx1175_pos)
    $P10 = rx1175_cur."ws"()
    unless $P10, rx1175_fail
    rx1175_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx1175_cur."!cursor_pos"(rx1175_pos)
    $P10 = rx1175_cur."quote_EXPR"()
    unless $P10, rx1175_fail
    rx1175_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx1175_pos = $P10."pos"()
  # rx pass
    rx1175_cur."!cursor_pass"(rx1175_pos, "quote:sym<Q>")
    if_null rx1175_debug, debug_875
    rx1175_cur."!cursor_debug"("PASS", "quote:sym<Q>", " at pos=", rx1175_pos)
  debug_875:
    .return (rx1175_cur)
  rx1175_restart:
.annotate 'line', 4
    if_null rx1175_debug, debug_876
    rx1175_cur."!cursor_debug"("NEXT", "quote:sym<Q>")
  debug_876:
  rx1175_fail:
    (rx1175_rep, rx1175_pos, $I10, $P10) = rx1175_cur."!mark_fail"(0)
    lt rx1175_pos, -1, rx1175_done
    eq rx1175_pos, -1, rx1175_fail
    jump $I10
  rx1175_done:
    rx1175_cur."!cursor_fail"()
    if_null rx1175_debug, debug_877
    rx1175_cur."!cursor_debug"("FAIL", "quote:sym<Q>")
  debug_877:
    .return (rx1175_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<Q>"  :nsentry("!PREFIX__quote:sym<Q>") :subid("243_1299591493.348") :method
.annotate 'line', 4
    $P1177 = self."!PREFIX__!subrule"("ws", "Q")
    new $P1178, "ResizablePMCArray"
    push $P1178, $P1177
    .return ($P1178)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<Q:PIR>"  :subid("244_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1181_tgt
    .local int rx1181_pos
    .local int rx1181_off
    .local int rx1181_eos
    .local int rx1181_rep
    .local pmc rx1181_cur
    .local pmc rx1181_debug
    (rx1181_cur, rx1181_pos, rx1181_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1181_cur
    .local pmc match
    .lex "$/", match
    length rx1181_eos, rx1181_tgt
    gt rx1181_pos, rx1181_eos, rx1181_done
    set rx1181_off, 0
    lt rx1181_pos, 2, rx1181_start
    sub rx1181_off, rx1181_pos, 1
    substr rx1181_tgt, rx1181_tgt, rx1181_off
  rx1181_start:
    eq $I10, 1, rx1181_restart
    if_null rx1181_debug, debug_878
    rx1181_cur."!cursor_debug"("START", "quote:sym<Q:PIR>")
  debug_878:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1185_done
    goto rxscan1185_scan
  rxscan1185_loop:
    (rx1181_pos) = rx1181_cur."from"()
    inc rx1181_pos
    rx1181_cur."!cursor_from"(rx1181_pos)
    ge rx1181_pos, rx1181_eos, rxscan1185_done
  rxscan1185_scan:
    set_addr $I10, rxscan1185_loop
    rx1181_cur."!mark_push"(0, rx1181_pos, $I10)
  rxscan1185_done:
.annotate 'line', 542
  # rx literal  "Q:PIR"
    add $I11, rx1181_pos, 5
    gt $I11, rx1181_eos, rx1181_fail
    sub $I11, rx1181_pos, rx1181_off
    substr $S10, rx1181_tgt, $I11, 5
    ne $S10, "Q:PIR", rx1181_fail
    add rx1181_pos, 5
  # rx subrule "ws" subtype=method negate=
    rx1181_cur."!cursor_pos"(rx1181_pos)
    $P10 = rx1181_cur."ws"()
    unless $P10, rx1181_fail
    rx1181_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx1181_cur."!cursor_pos"(rx1181_pos)
    $P10 = rx1181_cur."quote_EXPR"()
    unless $P10, rx1181_fail
    rx1181_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx1181_pos = $P10."pos"()
  # rx pass
    rx1181_cur."!cursor_pass"(rx1181_pos, "quote:sym<Q:PIR>")
    if_null rx1181_debug, debug_879
    rx1181_cur."!cursor_debug"("PASS", "quote:sym<Q:PIR>", " at pos=", rx1181_pos)
  debug_879:
    .return (rx1181_cur)
  rx1181_restart:
.annotate 'line', 4
    if_null rx1181_debug, debug_880
    rx1181_cur."!cursor_debug"("NEXT", "quote:sym<Q:PIR>")
  debug_880:
  rx1181_fail:
    (rx1181_rep, rx1181_pos, $I10, $P10) = rx1181_cur."!mark_fail"(0)
    lt rx1181_pos, -1, rx1181_done
    eq rx1181_pos, -1, rx1181_fail
    jump $I10
  rx1181_done:
    rx1181_cur."!cursor_fail"()
    if_null rx1181_debug, debug_881
    rx1181_cur."!cursor_debug"("FAIL", "quote:sym<Q:PIR>")
  debug_881:
    .return (rx1181_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<Q:PIR>"  :nsentry("!PREFIX__quote:sym<Q:PIR>") :subid("245_1299591493.348") :method
.annotate 'line', 4
    $P1183 = self."!PREFIX__!subrule"("ws", "Q:PIR")
    new $P1184, "ResizablePMCArray"
    push $P1184, $P1183
    .return ($P1184)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym</ />"  :subid("246_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1187_tgt
    .local int rx1187_pos
    .local int rx1187_off
    .local int rx1187_eos
    .local int rx1187_rep
    .local pmc rx1187_cur
    .local pmc rx1187_debug
    (rx1187_cur, rx1187_pos, rx1187_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1187_cur
    .local pmc match
    .lex "$/", match
    length rx1187_eos, rx1187_tgt
    gt rx1187_pos, rx1187_eos, rx1187_done
    set rx1187_off, 0
    lt rx1187_pos, 2, rx1187_start
    sub rx1187_off, rx1187_pos, 1
    substr rx1187_tgt, rx1187_tgt, rx1187_off
  rx1187_start:
    eq $I10, 1, rx1187_restart
    if_null rx1187_debug, debug_882
    rx1187_cur."!cursor_debug"("START", "quote:sym</ />")
  debug_882:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1191_done
    goto rxscan1191_scan
  rxscan1191_loop:
    (rx1187_pos) = rx1187_cur."from"()
    inc rx1187_pos
    rx1187_cur."!cursor_from"(rx1187_pos)
    ge rx1187_pos, rx1187_eos, rxscan1191_done
  rxscan1191_scan:
    set_addr $I10, rxscan1191_loop
    rx1187_cur."!mark_push"(0, rx1187_pos, $I10)
  rxscan1191_done:
.annotate 'line', 544
  # rx literal  "/"
    add $I11, rx1187_pos, 1
    gt $I11, rx1187_eos, rx1187_fail
    sub $I11, rx1187_pos, rx1187_off
    ord $I11, rx1187_tgt, $I11
    ne $I11, 47, rx1187_fail
    add rx1187_pos, 1
.annotate 'line', 545
  # rx subrule "newpad" subtype=method negate=
    rx1187_cur."!cursor_pos"(rx1187_pos)
    $P10 = rx1187_cur."newpad"()
    unless $P10, rx1187_fail
    rx1187_pos = $P10."pos"()
.annotate 'line', 546
  # rx reduce name="quote:sym</ />" key="open"
    rx1187_cur."!cursor_pos"(rx1187_pos)
    rx1187_cur."!reduce"("quote:sym</ />", "open")
.annotate 'line', 547
  # rx subrule "LANG" subtype=capture negate=
    rx1187_cur."!cursor_pos"(rx1187_pos)
    $P10 = rx1187_cur."LANG"("Regex", "nibbler")
    unless $P10, rx1187_fail
    rx1187_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("p6regex")
    rx1187_pos = $P10."pos"()
.annotate 'line', 548
  # rx literal  "/"
    add $I11, rx1187_pos, 1
    gt $I11, rx1187_eos, rx1187_fail
    sub $I11, rx1187_pos, rx1187_off
    ord $I11, rx1187_tgt, $I11
    ne $I11, 47, rx1187_fail
    add rx1187_pos, 1
.annotate 'line', 543
  # rx pass
    rx1187_cur."!cursor_pass"(rx1187_pos, "quote:sym</ />")
    if_null rx1187_debug, debug_883
    rx1187_cur."!cursor_debug"("PASS", "quote:sym</ />", " at pos=", rx1187_pos)
  debug_883:
    .return (rx1187_cur)
  rx1187_restart:
.annotate 'line', 4
    if_null rx1187_debug, debug_884
    rx1187_cur."!cursor_debug"("NEXT", "quote:sym</ />")
  debug_884:
  rx1187_fail:
    (rx1187_rep, rx1187_pos, $I10, $P10) = rx1187_cur."!mark_fail"(0)
    lt rx1187_pos, -1, rx1187_done
    eq rx1187_pos, -1, rx1187_fail
    jump $I10
  rx1187_done:
    rx1187_cur."!cursor_fail"()
    if_null rx1187_debug, debug_885
    rx1187_cur."!cursor_debug"("FAIL", "quote:sym</ />")
  debug_885:
    .return (rx1187_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym</ />"  :nsentry("!PREFIX__quote:sym</ />") :subid("247_1299591493.348") :method
.annotate 'line', 4
    $P1189 = self."!PREFIX__!subrule"("newpad", "/")
    new $P1190, "ResizablePMCArray"
    push $P1190, $P1189
    .return ($P1190)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote_escape:sym<$>"  :subid("248_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1193_tgt
    .local int rx1193_pos
    .local int rx1193_off
    .local int rx1193_eos
    .local int rx1193_rep
    .local pmc rx1193_cur
    .local pmc rx1193_debug
    (rx1193_cur, rx1193_pos, rx1193_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1193_cur
    .local pmc match
    .lex "$/", match
    length rx1193_eos, rx1193_tgt
    gt rx1193_pos, rx1193_eos, rx1193_done
    set rx1193_off, 0
    lt rx1193_pos, 2, rx1193_start
    sub rx1193_off, rx1193_pos, 1
    substr rx1193_tgt, rx1193_tgt, rx1193_off
  rx1193_start:
    eq $I10, 1, rx1193_restart
    if_null rx1193_debug, debug_886
    rx1193_cur."!cursor_debug"("START", "quote_escape:sym<$>")
  debug_886:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1196_done
    goto rxscan1196_scan
  rxscan1196_loop:
    (rx1193_pos) = rx1193_cur."from"()
    inc rx1193_pos
    rx1193_cur."!cursor_from"(rx1193_pos)
    ge rx1193_pos, rx1193_eos, rxscan1196_done
  rxscan1196_scan:
    set_addr $I10, rxscan1196_loop
    rx1193_cur."!mark_push"(0, rx1193_pos, $I10)
  rxscan1196_done:
.annotate 'line', 551
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1193_pos, rx1193_off
    substr $S10, rx1193_tgt, $I10, 1
    index $I11, "$", $S10
    lt $I11, 0, rx1193_fail
  # rx subrule "quotemod_check" subtype=zerowidth negate=
    rx1193_cur."!cursor_pos"(rx1193_pos)
    $P10 = rx1193_cur."quotemod_check"("s")
    unless $P10, rx1193_fail
  # rx subrule "variable" subtype=capture negate=
    rx1193_cur."!cursor_pos"(rx1193_pos)
    $P10 = rx1193_cur."variable"()
    unless $P10, rx1193_fail
    rx1193_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable")
    rx1193_pos = $P10."pos"()
  # rx pass
    rx1193_cur."!cursor_pass"(rx1193_pos, "quote_escape:sym<$>")
    if_null rx1193_debug, debug_887
    rx1193_cur."!cursor_debug"("PASS", "quote_escape:sym<$>", " at pos=", rx1193_pos)
  debug_887:
    .return (rx1193_cur)
  rx1193_restart:
.annotate 'line', 4
    if_null rx1193_debug, debug_888
    rx1193_cur."!cursor_debug"("NEXT", "quote_escape:sym<$>")
  debug_888:
  rx1193_fail:
    (rx1193_rep, rx1193_pos, $I10, $P10) = rx1193_cur."!mark_fail"(0)
    lt rx1193_pos, -1, rx1193_done
    eq rx1193_pos, -1, rx1193_fail
    jump $I10
  rx1193_done:
    rx1193_cur."!cursor_fail"()
    if_null rx1193_debug, debug_889
    rx1193_cur."!cursor_debug"("FAIL", "quote_escape:sym<$>")
  debug_889:
    .return (rx1193_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote_escape:sym<$>"  :nsentry("!PREFIX__quote_escape:sym<$>") :subid("249_1299591493.348") :method
.annotate 'line', 4
    new $P1195, "ResizablePMCArray"
    push $P1195, "$"
    .return ($P1195)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote_escape:sym<{ }>"  :subid("250_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1198_tgt
    .local int rx1198_pos
    .local int rx1198_off
    .local int rx1198_eos
    .local int rx1198_rep
    .local pmc rx1198_cur
    .local pmc rx1198_debug
    (rx1198_cur, rx1198_pos, rx1198_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1198_cur
    .local pmc match
    .lex "$/", match
    length rx1198_eos, rx1198_tgt
    gt rx1198_pos, rx1198_eos, rx1198_done
    set rx1198_off, 0
    lt rx1198_pos, 2, rx1198_start
    sub rx1198_off, rx1198_pos, 1
    substr rx1198_tgt, rx1198_tgt, rx1198_off
  rx1198_start:
    eq $I10, 1, rx1198_restart
    if_null rx1198_debug, debug_890
    rx1198_cur."!cursor_debug"("START", "quote_escape:sym<{ }>")
  debug_890:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1201_done
    goto rxscan1201_scan
  rxscan1201_loop:
    (rx1198_pos) = rx1198_cur."from"()
    inc rx1198_pos
    rx1198_cur."!cursor_from"(rx1198_pos)
    ge rx1198_pos, rx1198_eos, rxscan1201_done
  rxscan1201_scan:
    set_addr $I10, rxscan1201_loop
    rx1198_cur."!mark_push"(0, rx1198_pos, $I10)
  rxscan1201_done:
.annotate 'line', 552
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1198_pos, rx1198_off
    substr $S10, rx1198_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx1198_fail
  # rx subrule "quotemod_check" subtype=zerowidth negate=
    rx1198_cur."!cursor_pos"(rx1198_pos)
    $P10 = rx1198_cur."quotemod_check"("c")
    unless $P10, rx1198_fail
  # rx subrule "block" subtype=capture negate=
    rx1198_cur."!cursor_pos"(rx1198_pos)
    $P10 = rx1198_cur."block"()
    unless $P10, rx1198_fail
    rx1198_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx1198_pos = $P10."pos"()
  # rx pass
    rx1198_cur."!cursor_pass"(rx1198_pos, "quote_escape:sym<{ }>")
    if_null rx1198_debug, debug_891
    rx1198_cur."!cursor_debug"("PASS", "quote_escape:sym<{ }>", " at pos=", rx1198_pos)
  debug_891:
    .return (rx1198_cur)
  rx1198_restart:
.annotate 'line', 4
    if_null rx1198_debug, debug_892
    rx1198_cur."!cursor_debug"("NEXT", "quote_escape:sym<{ }>")
  debug_892:
  rx1198_fail:
    (rx1198_rep, rx1198_pos, $I10, $P10) = rx1198_cur."!mark_fail"(0)
    lt rx1198_pos, -1, rx1198_done
    eq rx1198_pos, -1, rx1198_fail
    jump $I10
  rx1198_done:
    rx1198_cur."!cursor_fail"()
    if_null rx1198_debug, debug_893
    rx1198_cur."!cursor_debug"("FAIL", "quote_escape:sym<{ }>")
  debug_893:
    .return (rx1198_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote_escape:sym<{ }>"  :nsentry("!PREFIX__quote_escape:sym<{ }>") :subid("251_1299591493.348") :method
.annotate 'line', 4
    new $P1200, "ResizablePMCArray"
    push $P1200, "{"
    .return ($P1200)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote_escape:sym<esc>"  :subid("252_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1203_tgt
    .local int rx1203_pos
    .local int rx1203_off
    .local int rx1203_eos
    .local int rx1203_rep
    .local pmc rx1203_cur
    .local pmc rx1203_debug
    (rx1203_cur, rx1203_pos, rx1203_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1203_cur
    .local pmc match
    .lex "$/", match
    length rx1203_eos, rx1203_tgt
    gt rx1203_pos, rx1203_eos, rx1203_done
    set rx1203_off, 0
    lt rx1203_pos, 2, rx1203_start
    sub rx1203_off, rx1203_pos, 1
    substr rx1203_tgt, rx1203_tgt, rx1203_off
  rx1203_start:
    eq $I10, 1, rx1203_restart
    if_null rx1203_debug, debug_894
    rx1203_cur."!cursor_debug"("START", "quote_escape:sym<esc>")
  debug_894:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1206_done
    goto rxscan1206_scan
  rxscan1206_loop:
    (rx1203_pos) = rx1203_cur."from"()
    inc rx1203_pos
    rx1203_cur."!cursor_from"(rx1203_pos)
    ge rx1203_pos, rx1203_eos, rxscan1206_done
  rxscan1206_scan:
    set_addr $I10, rxscan1206_loop
    rx1203_cur."!mark_push"(0, rx1203_pos, $I10)
  rxscan1206_done:
.annotate 'line', 553
  # rx literal  "\\e"
    add $I11, rx1203_pos, 2
    gt $I11, rx1203_eos, rx1203_fail
    sub $I11, rx1203_pos, rx1203_off
    substr $S10, rx1203_tgt, $I11, 2
    ne $S10, "\\e", rx1203_fail
    add rx1203_pos, 2
  # rx subrule "quotemod_check" subtype=zerowidth negate=
    rx1203_cur."!cursor_pos"(rx1203_pos)
    $P10 = rx1203_cur."quotemod_check"("b")
    unless $P10, rx1203_fail
  # rx pass
    rx1203_cur."!cursor_pass"(rx1203_pos, "quote_escape:sym<esc>")
    if_null rx1203_debug, debug_895
    rx1203_cur."!cursor_debug"("PASS", "quote_escape:sym<esc>", " at pos=", rx1203_pos)
  debug_895:
    .return (rx1203_cur)
  rx1203_restart:
.annotate 'line', 4
    if_null rx1203_debug, debug_896
    rx1203_cur."!cursor_debug"("NEXT", "quote_escape:sym<esc>")
  debug_896:
  rx1203_fail:
    (rx1203_rep, rx1203_pos, $I10, $P10) = rx1203_cur."!mark_fail"(0)
    lt rx1203_pos, -1, rx1203_done
    eq rx1203_pos, -1, rx1203_fail
    jump $I10
  rx1203_done:
    rx1203_cur."!cursor_fail"()
    if_null rx1203_debug, debug_897
    rx1203_cur."!cursor_debug"("FAIL", "quote_escape:sym<esc>")
  debug_897:
    .return (rx1203_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote_escape:sym<esc>"  :nsentry("!PREFIX__quote_escape:sym<esc>") :subid("253_1299591493.348") :method
.annotate 'line', 4
    new $P1205, "ResizablePMCArray"
    push $P1205, "\\e"
    .return ($P1205)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<( )>"  :subid("254_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1208_tgt
    .local int rx1208_pos
    .local int rx1208_off
    .local int rx1208_eos
    .local int rx1208_rep
    .local pmc rx1208_cur
    .local pmc rx1208_debug
    (rx1208_cur, rx1208_pos, rx1208_tgt, $I10) = self."!cursor_start"()
    rx1208_cur."!cursor_caparray"("EXPR")
    .lex unicode:"$\x{a2}", rx1208_cur
    .local pmc match
    .lex "$/", match
    length rx1208_eos, rx1208_tgt
    gt rx1208_pos, rx1208_eos, rx1208_done
    set rx1208_off, 0
    lt rx1208_pos, 2, rx1208_start
    sub rx1208_off, rx1208_pos, 1
    substr rx1208_tgt, rx1208_tgt, rx1208_off
  rx1208_start:
    eq $I10, 1, rx1208_restart
    if_null rx1208_debug, debug_898
    rx1208_cur."!cursor_debug"("START", "circumfix:sym<( )>")
  debug_898:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1212_done
    goto rxscan1212_scan
  rxscan1212_loop:
    (rx1208_pos) = rx1208_cur."from"()
    inc rx1208_pos
    rx1208_cur."!cursor_from"(rx1208_pos)
    ge rx1208_pos, rx1208_eos, rxscan1212_done
  rxscan1212_scan:
    set_addr $I10, rxscan1212_loop
    rx1208_cur."!mark_push"(0, rx1208_pos, $I10)
  rxscan1212_done:
.annotate 'line', 555
  # rx literal  "("
    add $I11, rx1208_pos, 1
    gt $I11, rx1208_eos, rx1208_fail
    sub $I11, rx1208_pos, rx1208_off
    ord $I11, rx1208_tgt, $I11
    ne $I11, 40, rx1208_fail
    add rx1208_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1208_cur."!cursor_pos"(rx1208_pos)
    $P10 = rx1208_cur."ws"()
    unless $P10, rx1208_fail
    rx1208_pos = $P10."pos"()
  # rx rxquantr1213 ** 0..1
    set_addr $I10, rxquantr1213_done
    rx1208_cur."!mark_push"(0, rx1208_pos, $I10)
  rxquantr1213_loop:
  # rx subrule "EXPR" subtype=capture negate=
    rx1208_cur."!cursor_pos"(rx1208_pos)
    $P10 = rx1208_cur."EXPR"()
    unless $P10, rx1208_fail
    goto rxsubrule1214_pass
  rxsubrule1214_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1208_fail
  rxsubrule1214_pass:
    set_addr $I10, rxsubrule1214_back
    rx1208_cur."!mark_push"(0, rx1208_pos, $I10, $P10)
    $P10."!cursor_names"("EXPR")
    rx1208_pos = $P10."pos"()
    set_addr $I10, rxquantr1213_done
    (rx1208_rep) = rx1208_cur."!mark_commit"($I10)
  rxquantr1213_done:
  # rx literal  ")"
    add $I11, rx1208_pos, 1
    gt $I11, rx1208_eos, rx1208_fail
    sub $I11, rx1208_pos, rx1208_off
    ord $I11, rx1208_tgt, $I11
    ne $I11, 41, rx1208_fail
    add rx1208_pos, 1
  # rx pass
    rx1208_cur."!cursor_pass"(rx1208_pos, "circumfix:sym<( )>")
    if_null rx1208_debug, debug_899
    rx1208_cur."!cursor_debug"("PASS", "circumfix:sym<( )>", " at pos=", rx1208_pos)
  debug_899:
    .return (rx1208_cur)
  rx1208_restart:
.annotate 'line', 4
    if_null rx1208_debug, debug_900
    rx1208_cur."!cursor_debug"("NEXT", "circumfix:sym<( )>")
  debug_900:
  rx1208_fail:
    (rx1208_rep, rx1208_pos, $I10, $P10) = rx1208_cur."!mark_fail"(0)
    lt rx1208_pos, -1, rx1208_done
    eq rx1208_pos, -1, rx1208_fail
    jump $I10
  rx1208_done:
    rx1208_cur."!cursor_fail"()
    if_null rx1208_debug, debug_901
    rx1208_cur."!cursor_debug"("FAIL", "circumfix:sym<( )>")
  debug_901:
    .return (rx1208_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<( )>"  :nsentry("!PREFIX__circumfix:sym<( )>") :subid("255_1299591493.348") :method
.annotate 'line', 4
    $P1210 = self."!PREFIX__!subrule"("ws", "(")
    new $P1211, "ResizablePMCArray"
    push $P1211, $P1210
    .return ($P1211)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<[ ]>"  :subid("256_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1216_tgt
    .local int rx1216_pos
    .local int rx1216_off
    .local int rx1216_eos
    .local int rx1216_rep
    .local pmc rx1216_cur
    .local pmc rx1216_debug
    (rx1216_cur, rx1216_pos, rx1216_tgt, $I10) = self."!cursor_start"()
    rx1216_cur."!cursor_caparray"("EXPR")
    .lex unicode:"$\x{a2}", rx1216_cur
    .local pmc match
    .lex "$/", match
    length rx1216_eos, rx1216_tgt
    gt rx1216_pos, rx1216_eos, rx1216_done
    set rx1216_off, 0
    lt rx1216_pos, 2, rx1216_start
    sub rx1216_off, rx1216_pos, 1
    substr rx1216_tgt, rx1216_tgt, rx1216_off
  rx1216_start:
    eq $I10, 1, rx1216_restart
    if_null rx1216_debug, debug_902
    rx1216_cur."!cursor_debug"("START", "circumfix:sym<[ ]>")
  debug_902:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1220_done
    goto rxscan1220_scan
  rxscan1220_loop:
    (rx1216_pos) = rx1216_cur."from"()
    inc rx1216_pos
    rx1216_cur."!cursor_from"(rx1216_pos)
    ge rx1216_pos, rx1216_eos, rxscan1220_done
  rxscan1220_scan:
    set_addr $I10, rxscan1220_loop
    rx1216_cur."!mark_push"(0, rx1216_pos, $I10)
  rxscan1220_done:
.annotate 'line', 556
  # rx literal  "["
    add $I11, rx1216_pos, 1
    gt $I11, rx1216_eos, rx1216_fail
    sub $I11, rx1216_pos, rx1216_off
    ord $I11, rx1216_tgt, $I11
    ne $I11, 91, rx1216_fail
    add rx1216_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1216_cur."!cursor_pos"(rx1216_pos)
    $P10 = rx1216_cur."ws"()
    unless $P10, rx1216_fail
    rx1216_pos = $P10."pos"()
  # rx rxquantr1221 ** 0..1
    set_addr $I10, rxquantr1221_done
    rx1216_cur."!mark_push"(0, rx1216_pos, $I10)
  rxquantr1221_loop:
  # rx subrule "EXPR" subtype=capture negate=
    rx1216_cur."!cursor_pos"(rx1216_pos)
    $P10 = rx1216_cur."EXPR"()
    unless $P10, rx1216_fail
    goto rxsubrule1222_pass
  rxsubrule1222_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1216_fail
  rxsubrule1222_pass:
    set_addr $I10, rxsubrule1222_back
    rx1216_cur."!mark_push"(0, rx1216_pos, $I10, $P10)
    $P10."!cursor_names"("EXPR")
    rx1216_pos = $P10."pos"()
    set_addr $I10, rxquantr1221_done
    (rx1216_rep) = rx1216_cur."!mark_commit"($I10)
  rxquantr1221_done:
  # rx literal  "]"
    add $I11, rx1216_pos, 1
    gt $I11, rx1216_eos, rx1216_fail
    sub $I11, rx1216_pos, rx1216_off
    ord $I11, rx1216_tgt, $I11
    ne $I11, 93, rx1216_fail
    add rx1216_pos, 1
  # rx pass
    rx1216_cur."!cursor_pass"(rx1216_pos, "circumfix:sym<[ ]>")
    if_null rx1216_debug, debug_903
    rx1216_cur."!cursor_debug"("PASS", "circumfix:sym<[ ]>", " at pos=", rx1216_pos)
  debug_903:
    .return (rx1216_cur)
  rx1216_restart:
.annotate 'line', 4
    if_null rx1216_debug, debug_904
    rx1216_cur."!cursor_debug"("NEXT", "circumfix:sym<[ ]>")
  debug_904:
  rx1216_fail:
    (rx1216_rep, rx1216_pos, $I10, $P10) = rx1216_cur."!mark_fail"(0)
    lt rx1216_pos, -1, rx1216_done
    eq rx1216_pos, -1, rx1216_fail
    jump $I10
  rx1216_done:
    rx1216_cur."!cursor_fail"()
    if_null rx1216_debug, debug_905
    rx1216_cur."!cursor_debug"("FAIL", "circumfix:sym<[ ]>")
  debug_905:
    .return (rx1216_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<[ ]>"  :nsentry("!PREFIX__circumfix:sym<[ ]>") :subid("257_1299591493.348") :method
.annotate 'line', 4
    $P1218 = self."!PREFIX__!subrule"("ws", "[")
    new $P1219, "ResizablePMCArray"
    push $P1219, $P1218
    .return ($P1219)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<ang>"  :subid("258_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1224_tgt
    .local int rx1224_pos
    .local int rx1224_off
    .local int rx1224_eos
    .local int rx1224_rep
    .local pmc rx1224_cur
    .local pmc rx1224_debug
    (rx1224_cur, rx1224_pos, rx1224_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1224_cur
    .local pmc match
    .lex "$/", match
    length rx1224_eos, rx1224_tgt
    gt rx1224_pos, rx1224_eos, rx1224_done
    set rx1224_off, 0
    lt rx1224_pos, 2, rx1224_start
    sub rx1224_off, rx1224_pos, 1
    substr rx1224_tgt, rx1224_tgt, rx1224_off
  rx1224_start:
    eq $I10, 1, rx1224_restart
    if_null rx1224_debug, debug_906
    rx1224_cur."!cursor_debug"("START", "circumfix:sym<ang>")
  debug_906:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1227_done
    goto rxscan1227_scan
  rxscan1227_loop:
    (rx1224_pos) = rx1224_cur."from"()
    inc rx1224_pos
    rx1224_cur."!cursor_from"(rx1224_pos)
    ge rx1224_pos, rx1224_eos, rxscan1227_done
  rxscan1227_scan:
    set_addr $I10, rxscan1227_loop
    rx1224_cur."!mark_push"(0, rx1224_pos, $I10)
  rxscan1227_done:
.annotate 'line', 557
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1224_pos, rx1224_off
    substr $S10, rx1224_tgt, $I10, 1
    index $I11, "<", $S10
    lt $I11, 0, rx1224_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx1224_cur."!cursor_pos"(rx1224_pos)
    $P10 = rx1224_cur."quote_EXPR"(":q", ":w")
    unless $P10, rx1224_fail
    rx1224_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx1224_pos = $P10."pos"()
  # rx pass
    rx1224_cur."!cursor_pass"(rx1224_pos, "circumfix:sym<ang>")
    if_null rx1224_debug, debug_907
    rx1224_cur."!cursor_debug"("PASS", "circumfix:sym<ang>", " at pos=", rx1224_pos)
  debug_907:
    .return (rx1224_cur)
  rx1224_restart:
.annotate 'line', 4
    if_null rx1224_debug, debug_908
    rx1224_cur."!cursor_debug"("NEXT", "circumfix:sym<ang>")
  debug_908:
  rx1224_fail:
    (rx1224_rep, rx1224_pos, $I10, $P10) = rx1224_cur."!mark_fail"(0)
    lt rx1224_pos, -1, rx1224_done
    eq rx1224_pos, -1, rx1224_fail
    jump $I10
  rx1224_done:
    rx1224_cur."!cursor_fail"()
    if_null rx1224_debug, debug_909
    rx1224_cur."!cursor_debug"("FAIL", "circumfix:sym<ang>")
  debug_909:
    .return (rx1224_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<ang>"  :nsentry("!PREFIX__circumfix:sym<ang>") :subid("259_1299591493.348") :method
.annotate 'line', 4
    new $P1226, "ResizablePMCArray"
    push $P1226, "<"
    .return ($P1226)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub unicode:"circumfix:sym<\x{ab} \x{bb}>"  :subid("260_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1229_tgt
    .local int rx1229_pos
    .local int rx1229_off
    .local int rx1229_eos
    .local int rx1229_rep
    .local pmc rx1229_cur
    .local pmc rx1229_debug
    (rx1229_cur, rx1229_pos, rx1229_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1229_cur
    .local pmc match
    .lex "$/", match
    length rx1229_eos, rx1229_tgt
    gt rx1229_pos, rx1229_eos, rx1229_done
    set rx1229_off, 0
    lt rx1229_pos, 2, rx1229_start
    sub rx1229_off, rx1229_pos, 1
    substr rx1229_tgt, rx1229_tgt, rx1229_off
  rx1229_start:
    eq $I10, 1, rx1229_restart
    if_null rx1229_debug, debug_910
    rx1229_cur."!cursor_debug"("START", unicode:"circumfix:sym<\x{ab} \x{bb}>")
  debug_910:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1232_done
    goto rxscan1232_scan
  rxscan1232_loop:
    (rx1229_pos) = rx1229_cur."from"()
    inc rx1229_pos
    rx1229_cur."!cursor_from"(rx1229_pos)
    ge rx1229_pos, rx1229_eos, rxscan1232_done
  rxscan1232_scan:
    set_addr $I10, rxscan1232_loop
    rx1229_cur."!mark_push"(0, rx1229_pos, $I10)
  rxscan1232_done:
.annotate 'line', 558
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1229_pos, rx1229_off
    substr $S10, rx1229_tgt, $I10, 1
    index $I11, unicode:"\x{ab}", $S10
    lt $I11, 0, rx1229_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx1229_cur."!cursor_pos"(rx1229_pos)
    $P10 = rx1229_cur."quote_EXPR"(":qq", ":w")
    unless $P10, rx1229_fail
    rx1229_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx1229_pos = $P10."pos"()
  # rx pass
    rx1229_cur."!cursor_pass"(rx1229_pos, unicode:"circumfix:sym<\x{ab} \x{bb}>")
    if_null rx1229_debug, debug_911
    rx1229_cur."!cursor_debug"("PASS", unicode:"circumfix:sym<\x{ab} \x{bb}>", " at pos=", rx1229_pos)
  debug_911:
    .return (rx1229_cur)
  rx1229_restart:
.annotate 'line', 4
    if_null rx1229_debug, debug_912
    rx1229_cur."!cursor_debug"("NEXT", unicode:"circumfix:sym<\x{ab} \x{bb}>")
  debug_912:
  rx1229_fail:
    (rx1229_rep, rx1229_pos, $I10, $P10) = rx1229_cur."!mark_fail"(0)
    lt rx1229_pos, -1, rx1229_done
    eq rx1229_pos, -1, rx1229_fail
    jump $I10
  rx1229_done:
    rx1229_cur."!cursor_fail"()
    if_null rx1229_debug, debug_913
    rx1229_cur."!cursor_debug"("FAIL", unicode:"circumfix:sym<\x{ab} \x{bb}>")
  debug_913:
    .return (rx1229_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub unicode:"!PREFIX__circumfix:sym<\x{ab} \x{bb}>"  :nsentry(unicode:"!PREFIX__circumfix:sym<\\x{ab} \\x{bb}>") :subid("261_1299591493.348") :method
.annotate 'line', 4
    new $P1231, "ResizablePMCArray"
    push $P1231, unicode:"\x{ab}"
    .return ($P1231)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<{ }>"  :subid("262_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1234_tgt
    .local int rx1234_pos
    .local int rx1234_off
    .local int rx1234_eos
    .local int rx1234_rep
    .local pmc rx1234_cur
    .local pmc rx1234_debug
    (rx1234_cur, rx1234_pos, rx1234_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1234_cur
    .local pmc match
    .lex "$/", match
    length rx1234_eos, rx1234_tgt
    gt rx1234_pos, rx1234_eos, rx1234_done
    set rx1234_off, 0
    lt rx1234_pos, 2, rx1234_start
    sub rx1234_off, rx1234_pos, 1
    substr rx1234_tgt, rx1234_tgt, rx1234_off
  rx1234_start:
    eq $I10, 1, rx1234_restart
    if_null rx1234_debug, debug_914
    rx1234_cur."!cursor_debug"("START", "circumfix:sym<{ }>")
  debug_914:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1237_done
    goto rxscan1237_scan
  rxscan1237_loop:
    (rx1234_pos) = rx1234_cur."from"()
    inc rx1234_pos
    rx1234_cur."!cursor_from"(rx1234_pos)
    ge rx1234_pos, rx1234_eos, rxscan1237_done
  rxscan1237_scan:
    set_addr $I10, rxscan1237_loop
    rx1234_cur."!mark_push"(0, rx1234_pos, $I10)
  rxscan1237_done:
.annotate 'line', 559
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1234_pos, rx1234_off
    substr $S10, rx1234_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx1234_fail
  # rx subrule "pblock" subtype=capture negate=
    rx1234_cur."!cursor_pos"(rx1234_pos)
    $P10 = rx1234_cur."pblock"()
    unless $P10, rx1234_fail
    rx1234_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("pblock")
    rx1234_pos = $P10."pos"()
  # rx pass
    rx1234_cur."!cursor_pass"(rx1234_pos, "circumfix:sym<{ }>")
    if_null rx1234_debug, debug_915
    rx1234_cur."!cursor_debug"("PASS", "circumfix:sym<{ }>", " at pos=", rx1234_pos)
  debug_915:
    .return (rx1234_cur)
  rx1234_restart:
.annotate 'line', 4
    if_null rx1234_debug, debug_916
    rx1234_cur."!cursor_debug"("NEXT", "circumfix:sym<{ }>")
  debug_916:
  rx1234_fail:
    (rx1234_rep, rx1234_pos, $I10, $P10) = rx1234_cur."!mark_fail"(0)
    lt rx1234_pos, -1, rx1234_done
    eq rx1234_pos, -1, rx1234_fail
    jump $I10
  rx1234_done:
    rx1234_cur."!cursor_fail"()
    if_null rx1234_debug, debug_917
    rx1234_cur."!cursor_debug"("FAIL", "circumfix:sym<{ }>")
  debug_917:
    .return (rx1234_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<{ }>"  :nsentry("!PREFIX__circumfix:sym<{ }>") :subid("263_1299591493.348") :method
.annotate 'line', 4
    new $P1236, "ResizablePMCArray"
    push $P1236, "{"
    .return ($P1236)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<sigil>"  :subid("264_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1239_tgt
    .local int rx1239_pos
    .local int rx1239_off
    .local int rx1239_eos
    .local int rx1239_rep
    .local pmc rx1239_cur
    .local pmc rx1239_debug
    (rx1239_cur, rx1239_pos, rx1239_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1239_cur
    .local pmc match
    .lex "$/", match
    length rx1239_eos, rx1239_tgt
    gt rx1239_pos, rx1239_eos, rx1239_done
    set rx1239_off, 0
    lt rx1239_pos, 2, rx1239_start
    sub rx1239_off, rx1239_pos, 1
    substr rx1239_tgt, rx1239_tgt, rx1239_off
  rx1239_start:
    eq $I10, 1, rx1239_restart
    if_null rx1239_debug, debug_918
    rx1239_cur."!cursor_debug"("START", "circumfix:sym<sigil>")
  debug_918:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1243_done
    goto rxscan1243_scan
  rxscan1243_loop:
    (rx1239_pos) = rx1239_cur."from"()
    inc rx1239_pos
    rx1239_cur."!cursor_from"(rx1239_pos)
    ge rx1239_pos, rx1239_eos, rxscan1243_done
  rxscan1243_scan:
    set_addr $I10, rxscan1243_loop
    rx1239_cur."!mark_push"(0, rx1239_pos, $I10)
  rxscan1243_done:
.annotate 'line', 560
  # rx subrule "sigil" subtype=capture negate=
    rx1239_cur."!cursor_pos"(rx1239_pos)
    $P10 = rx1239_cur."sigil"()
    unless $P10, rx1239_fail
    rx1239_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    rx1239_pos = $P10."pos"()
  # rx literal  "("
    add $I11, rx1239_pos, 1
    gt $I11, rx1239_eos, rx1239_fail
    sub $I11, rx1239_pos, rx1239_off
    ord $I11, rx1239_tgt, $I11
    ne $I11, 40, rx1239_fail
    add rx1239_pos, 1
  # rx subrule "semilist" subtype=capture negate=
    rx1239_cur."!cursor_pos"(rx1239_pos)
    $P10 = rx1239_cur."semilist"()
    unless $P10, rx1239_fail
    rx1239_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("semilist")
    rx1239_pos = $P10."pos"()
  alt1244_0:
    set_addr $I10, alt1244_1
    rx1239_cur."!mark_push"(0, rx1239_pos, $I10)
  # rx literal  ")"
    add $I11, rx1239_pos, 1
    gt $I11, rx1239_eos, rx1239_fail
    sub $I11, rx1239_pos, rx1239_off
    ord $I11, rx1239_tgt, $I11
    ne $I11, 41, rx1239_fail
    add rx1239_pos, 1
    goto alt1244_end
  alt1244_1:
  # rx subrule "FAILGOAL" subtype=method negate=
    rx1239_cur."!cursor_pos"(rx1239_pos)
    $P10 = rx1239_cur."FAILGOAL"("')'")
    unless $P10, rx1239_fail
    goto rxsubrule1246_pass
  rxsubrule1246_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1239_fail
  rxsubrule1246_pass:
    set_addr $I10, rxsubrule1246_back
    rx1239_cur."!mark_push"(0, rx1239_pos, $I10, $P10)
    rx1239_pos = $P10."pos"()
  alt1244_end:
  # rx pass
    rx1239_cur."!cursor_pass"(rx1239_pos, "circumfix:sym<sigil>")
    if_null rx1239_debug, debug_919
    rx1239_cur."!cursor_debug"("PASS", "circumfix:sym<sigil>", " at pos=", rx1239_pos)
  debug_919:
    .return (rx1239_cur)
  rx1239_restart:
.annotate 'line', 4
    if_null rx1239_debug, debug_920
    rx1239_cur."!cursor_debug"("NEXT", "circumfix:sym<sigil>")
  debug_920:
  rx1239_fail:
    (rx1239_rep, rx1239_pos, $I10, $P10) = rx1239_cur."!mark_fail"(0)
    lt rx1239_pos, -1, rx1239_done
    eq rx1239_pos, -1, rx1239_fail
    jump $I10
  rx1239_done:
    rx1239_cur."!cursor_fail"()
    if_null rx1239_debug, debug_921
    rx1239_cur."!cursor_debug"("FAIL", "circumfix:sym<sigil>")
  debug_921:
    .return (rx1239_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<sigil>"  :nsentry("!PREFIX__circumfix:sym<sigil>") :subid("265_1299591493.348") :method
.annotate 'line', 4
    $P1241 = self."!PREFIX__!subrule"("sigil", "")
    new $P1242, "ResizablePMCArray"
    push $P1242, $P1241
    .return ($P1242)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "semilist"  :subid("266_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1248_tgt
    .local int rx1248_pos
    .local int rx1248_off
    .local int rx1248_eos
    .local int rx1248_rep
    .local pmc rx1248_cur
    .local pmc rx1248_debug
    (rx1248_cur, rx1248_pos, rx1248_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1248_cur
    .local pmc match
    .lex "$/", match
    length rx1248_eos, rx1248_tgt
    gt rx1248_pos, rx1248_eos, rx1248_done
    set rx1248_off, 0
    lt rx1248_pos, 2, rx1248_start
    sub rx1248_off, rx1248_pos, 1
    substr rx1248_tgt, rx1248_tgt, rx1248_off
  rx1248_start:
    eq $I10, 1, rx1248_restart
    if_null rx1248_debug, debug_922
    rx1248_cur."!cursor_debug"("START", "semilist")
  debug_922:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1252_done
    goto rxscan1252_scan
  rxscan1252_loop:
    (rx1248_pos) = rx1248_cur."from"()
    inc rx1248_pos
    rx1248_cur."!cursor_from"(rx1248_pos)
    ge rx1248_pos, rx1248_eos, rxscan1252_done
  rxscan1252_scan:
    set_addr $I10, rxscan1252_loop
    rx1248_cur."!mark_push"(0, rx1248_pos, $I10)
  rxscan1252_done:
.annotate 'line', 562
  # rx subrule "ws" subtype=method negate=
    rx1248_cur."!cursor_pos"(rx1248_pos)
    $P10 = rx1248_cur."ws"()
    unless $P10, rx1248_fail
    rx1248_pos = $P10."pos"()
  # rx subrule "statement" subtype=capture negate=
    rx1248_cur."!cursor_pos"(rx1248_pos)
    $P10 = rx1248_cur."statement"()
    unless $P10, rx1248_fail
    rx1248_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement")
    rx1248_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1248_cur."!cursor_pos"(rx1248_pos)
    $P10 = rx1248_cur."ws"()
    unless $P10, rx1248_fail
    rx1248_pos = $P10."pos"()
  # rx pass
    rx1248_cur."!cursor_pass"(rx1248_pos, "semilist")
    if_null rx1248_debug, debug_923
    rx1248_cur."!cursor_debug"("PASS", "semilist", " at pos=", rx1248_pos)
  debug_923:
    .return (rx1248_cur)
  rx1248_restart:
.annotate 'line', 4
    if_null rx1248_debug, debug_924
    rx1248_cur."!cursor_debug"("NEXT", "semilist")
  debug_924:
  rx1248_fail:
    (rx1248_rep, rx1248_pos, $I10, $P10) = rx1248_cur."!mark_fail"(0)
    lt rx1248_pos, -1, rx1248_done
    eq rx1248_pos, -1, rx1248_fail
    jump $I10
  rx1248_done:
    rx1248_cur."!cursor_fail"()
    if_null rx1248_debug, debug_925
    rx1248_cur."!cursor_debug"("FAIL", "semilist")
  debug_925:
    .return (rx1248_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__semilist"  :nsentry("!PREFIX__semilist") :subid("267_1299591493.348") :method
.annotate 'line', 4
    $P1250 = self."!PREFIX__!subrule"("ws", "")
    new $P1251, "ResizablePMCArray"
    push $P1251, $P1250
    .return ($P1251)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1255"  :anon :subid("268_1299591493.348") :outer("11_1299591493.348")
.annotate 'line', 4
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "" :load :init :subid("post926") :outer("268_1299591493.348")
.annotate 'line', 4
    .const 'Sub' $P1256 = "268_1299591493.348" 
    .local pmc block
    set block, $P1256
.annotate 'line', 567
    get_hll_global $P1257, ["NQP"], "Grammar"
    $P1257."O"(":prec<y=>, :assoc<unary>", "%methodop")
.annotate 'line', 568
    get_hll_global $P1258, ["NQP"], "Grammar"
    $P1258."O"(":prec<x=>, :assoc<unary>", "%autoincrement")
.annotate 'line', 569
    get_hll_global $P1259, ["NQP"], "Grammar"
    $P1259."O"(":prec<w=>, :assoc<left>", "%exponentiation")
.annotate 'line', 570
    get_hll_global $P1260, ["NQP"], "Grammar"
    $P1260."O"(":prec<v=>, :assoc<unary>", "%symbolic_unary")
.annotate 'line', 571
    get_hll_global $P1261, ["NQP"], "Grammar"
    $P1261."O"(":prec<u=>, :assoc<left>", "%multiplicative")
.annotate 'line', 572
    get_hll_global $P1262, ["NQP"], "Grammar"
    $P1262."O"(":prec<t=>, :assoc<left>", "%additive")
.annotate 'line', 573
    get_hll_global $P1263, ["NQP"], "Grammar"
    $P1263."O"(":prec<r=>, :assoc<left>", "%concatenation")
.annotate 'line', 574
    get_hll_global $P1264, ["NQP"], "Grammar"
    $P1264."O"(":prec<m=>, :assoc<left>", "%relational")
.annotate 'line', 575
    get_hll_global $P1265, ["NQP"], "Grammar"
    $P1265."O"(":prec<l=>, :assoc<left>", "%tight_and")
.annotate 'line', 576
    get_hll_global $P1266, ["NQP"], "Grammar"
    $P1266."O"(":prec<k=>, :assoc<left>", "%tight_or")
.annotate 'line', 577
    get_hll_global $P1267, ["NQP"], "Grammar"
    $P1267."O"(":prec<j=>, :assoc<right>", "%conditional")
.annotate 'line', 578
    get_hll_global $P1268, ["NQP"], "Grammar"
    $P1268."O"(":prec<i=>, :assoc<right>", "%assignment")
.annotate 'line', 579
    get_hll_global $P1269, ["NQP"], "Grammar"
    $P1269."O"(":prec<g=>, :assoc<list>, :nextterm<nulltermish>", "%comma")
.annotate 'line', 580
    get_hll_global $P1270, ["NQP"], "Grammar"
    $P1270."O"(":prec<f=>, :assoc<list>", "%list_infix")
.annotate 'line', 581
    get_hll_global $P1271, ["NQP"], "Grammar"
    $P1271."O"(":prec<e=>, :assoc<unary>", "%list_prefix")
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infixish"  :subid("269_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1273_tgt
    .local int rx1273_pos
    .local int rx1273_off
    .local int rx1273_eos
    .local int rx1273_rep
    .local pmc rx1273_cur
    .local pmc rx1273_debug
    (rx1273_cur, rx1273_pos, rx1273_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1273_cur
    .local pmc match
    .lex "$/", match
    length rx1273_eos, rx1273_tgt
    gt rx1273_pos, rx1273_eos, rx1273_done
    set rx1273_off, 0
    lt rx1273_pos, 2, rx1273_start
    sub rx1273_off, rx1273_pos, 1
    substr rx1273_tgt, rx1273_tgt, rx1273_off
  rx1273_start:
    eq $I10, 1, rx1273_restart
    if_null rx1273_debug, debug_927
    rx1273_cur."!cursor_debug"("START", "infixish")
  debug_927:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1276_done
    goto rxscan1276_scan
  rxscan1276_loop:
    (rx1273_pos) = rx1273_cur."from"()
    inc rx1273_pos
    rx1273_cur."!cursor_from"(rx1273_pos)
    ge rx1273_pos, rx1273_eos, rxscan1276_done
  rxscan1276_scan:
    set_addr $I10, rxscan1276_loop
    rx1273_cur."!mark_push"(0, rx1273_pos, $I10)
  rxscan1276_done:
.annotate 'line', 585
  # rx subrule "infixstopper" subtype=zerowidth negate=1
    rx1273_cur."!cursor_pos"(rx1273_pos)
    $P10 = rx1273_cur."infixstopper"()
    if $P10, rx1273_fail
  # rx subrule "infix" subtype=capture negate=
    rx1273_cur."!cursor_pos"(rx1273_pos)
    $P10 = rx1273_cur."infix"()
    unless $P10, rx1273_fail
    rx1273_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("OPER=infix")
    rx1273_pos = $P10."pos"()
  # rx pass
    rx1273_cur."!cursor_pass"(rx1273_pos, "infixish")
    if_null rx1273_debug, debug_928
    rx1273_cur."!cursor_debug"("PASS", "infixish", " at pos=", rx1273_pos)
  debug_928:
    .return (rx1273_cur)
  rx1273_restart:
.annotate 'line', 4
    if_null rx1273_debug, debug_929
    rx1273_cur."!cursor_debug"("NEXT", "infixish")
  debug_929:
  rx1273_fail:
    (rx1273_rep, rx1273_pos, $I10, $P10) = rx1273_cur."!mark_fail"(0)
    lt rx1273_pos, -1, rx1273_done
    eq rx1273_pos, -1, rx1273_fail
    jump $I10
  rx1273_done:
    rx1273_cur."!cursor_fail"()
    if_null rx1273_debug, debug_930
    rx1273_cur."!cursor_debug"("FAIL", "infixish")
  debug_930:
    .return (rx1273_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infixish"  :nsentry("!PREFIX__infixish") :subid("270_1299591493.348") :method
.annotate 'line', 4
    new $P1275, "ResizablePMCArray"
    push $P1275, ""
    .return ($P1275)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infixstopper"  :subid("271_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1278_tgt
    .local int rx1278_pos
    .local int rx1278_off
    .local int rx1278_eos
    .local int rx1278_rep
    .local pmc rx1278_cur
    .local pmc rx1278_debug
    (rx1278_cur, rx1278_pos, rx1278_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1278_cur
    .local pmc match
    .lex "$/", match
    length rx1278_eos, rx1278_tgt
    gt rx1278_pos, rx1278_eos, rx1278_done
    set rx1278_off, 0
    lt rx1278_pos, 2, rx1278_start
    sub rx1278_off, rx1278_pos, 1
    substr rx1278_tgt, rx1278_tgt, rx1278_off
  rx1278_start:
    eq $I10, 1, rx1278_restart
    if_null rx1278_debug, debug_931
    rx1278_cur."!cursor_debug"("START", "infixstopper")
  debug_931:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1281_done
    goto rxscan1281_scan
  rxscan1281_loop:
    (rx1278_pos) = rx1278_cur."from"()
    inc rx1278_pos
    rx1278_cur."!cursor_from"(rx1278_pos)
    ge rx1278_pos, rx1278_eos, rxscan1281_done
  rxscan1281_scan:
    set_addr $I10, rxscan1281_loop
    rx1278_cur."!mark_push"(0, rx1278_pos, $I10)
  rxscan1281_done:
.annotate 'line', 586
  # rx subrule "lambda" subtype=zerowidth negate=
    rx1278_cur."!cursor_pos"(rx1278_pos)
    $P10 = rx1278_cur."lambda"()
    unless $P10, rx1278_fail
  # rx pass
    rx1278_cur."!cursor_pass"(rx1278_pos, "infixstopper")
    if_null rx1278_debug, debug_932
    rx1278_cur."!cursor_debug"("PASS", "infixstopper", " at pos=", rx1278_pos)
  debug_932:
    .return (rx1278_cur)
  rx1278_restart:
.annotate 'line', 4
    if_null rx1278_debug, debug_933
    rx1278_cur."!cursor_debug"("NEXT", "infixstopper")
  debug_933:
  rx1278_fail:
    (rx1278_rep, rx1278_pos, $I10, $P10) = rx1278_cur."!mark_fail"(0)
    lt rx1278_pos, -1, rx1278_done
    eq rx1278_pos, -1, rx1278_fail
    jump $I10
  rx1278_done:
    rx1278_cur."!cursor_fail"()
    if_null rx1278_debug, debug_934
    rx1278_cur."!cursor_debug"("FAIL", "infixstopper")
  debug_934:
    .return (rx1278_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infixstopper"  :nsentry("!PREFIX__infixstopper") :subid("272_1299591493.348") :method
.annotate 'line', 4
    new $P1280, "ResizablePMCArray"
    push $P1280, ""
    .return ($P1280)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<[ ]>"  :subid("273_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1283_tgt
    .local int rx1283_pos
    .local int rx1283_off
    .local int rx1283_eos
    .local int rx1283_rep
    .local pmc rx1283_cur
    .local pmc rx1283_debug
    (rx1283_cur, rx1283_pos, rx1283_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1283_cur
    .local pmc match
    .lex "$/", match
    length rx1283_eos, rx1283_tgt
    gt rx1283_pos, rx1283_eos, rx1283_done
    set rx1283_off, 0
    lt rx1283_pos, 2, rx1283_start
    sub rx1283_off, rx1283_pos, 1
    substr rx1283_tgt, rx1283_tgt, rx1283_off
  rx1283_start:
    eq $I10, 1, rx1283_restart
    if_null rx1283_debug, debug_935
    rx1283_cur."!cursor_debug"("START", "postcircumfix:sym<[ ]>")
  debug_935:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1287_done
    goto rxscan1287_scan
  rxscan1287_loop:
    (rx1283_pos) = rx1283_cur."from"()
    inc rx1283_pos
    rx1283_cur."!cursor_from"(rx1283_pos)
    ge rx1283_pos, rx1283_eos, rxscan1287_done
  rxscan1287_scan:
    set_addr $I10, rxscan1287_loop
    rx1283_cur."!mark_push"(0, rx1283_pos, $I10)
  rxscan1287_done:
.annotate 'line', 589
  # rx literal  "["
    add $I11, rx1283_pos, 1
    gt $I11, rx1283_eos, rx1283_fail
    sub $I11, rx1283_pos, rx1283_off
    ord $I11, rx1283_tgt, $I11
    ne $I11, 91, rx1283_fail
    add rx1283_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1283_cur."!cursor_pos"(rx1283_pos)
    $P10 = rx1283_cur."ws"()
    unless $P10, rx1283_fail
    rx1283_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1283_cur."!cursor_pos"(rx1283_pos)
    $P10 = rx1283_cur."EXPR"()
    unless $P10, rx1283_fail
    rx1283_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx1283_pos = $P10."pos"()
  # rx literal  "]"
    add $I11, rx1283_pos, 1
    gt $I11, rx1283_eos, rx1283_fail
    sub $I11, rx1283_pos, rx1283_off
    ord $I11, rx1283_tgt, $I11
    ne $I11, 93, rx1283_fail
    add rx1283_pos, 1
.annotate 'line', 590
  # rx subrule "O" subtype=capture negate=
    rx1283_cur."!cursor_pos"(rx1283_pos)
    $P10 = rx1283_cur."O"("%methodop")
    unless $P10, rx1283_fail
    rx1283_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1283_pos = $P10."pos"()
.annotate 'line', 588
  # rx pass
    rx1283_cur."!cursor_pass"(rx1283_pos, "postcircumfix:sym<[ ]>")
    if_null rx1283_debug, debug_936
    rx1283_cur."!cursor_debug"("PASS", "postcircumfix:sym<[ ]>", " at pos=", rx1283_pos)
  debug_936:
    .return (rx1283_cur)
  rx1283_restart:
.annotate 'line', 4
    if_null rx1283_debug, debug_937
    rx1283_cur."!cursor_debug"("NEXT", "postcircumfix:sym<[ ]>")
  debug_937:
  rx1283_fail:
    (rx1283_rep, rx1283_pos, $I10, $P10) = rx1283_cur."!mark_fail"(0)
    lt rx1283_pos, -1, rx1283_done
    eq rx1283_pos, -1, rx1283_fail
    jump $I10
  rx1283_done:
    rx1283_cur."!cursor_fail"()
    if_null rx1283_debug, debug_938
    rx1283_cur."!cursor_debug"("FAIL", "postcircumfix:sym<[ ]>")
  debug_938:
    .return (rx1283_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postcircumfix:sym<[ ]>"  :nsentry("!PREFIX__postcircumfix:sym<[ ]>") :subid("274_1299591493.348") :method
.annotate 'line', 4
    $P1285 = self."!PREFIX__!subrule"("ws", "[")
    new $P1286, "ResizablePMCArray"
    push $P1286, $P1285
    .return ($P1286)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<{ }>"  :subid("275_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1289_tgt
    .local int rx1289_pos
    .local int rx1289_off
    .local int rx1289_eos
    .local int rx1289_rep
    .local pmc rx1289_cur
    .local pmc rx1289_debug
    (rx1289_cur, rx1289_pos, rx1289_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1289_cur
    .local pmc match
    .lex "$/", match
    length rx1289_eos, rx1289_tgt
    gt rx1289_pos, rx1289_eos, rx1289_done
    set rx1289_off, 0
    lt rx1289_pos, 2, rx1289_start
    sub rx1289_off, rx1289_pos, 1
    substr rx1289_tgt, rx1289_tgt, rx1289_off
  rx1289_start:
    eq $I10, 1, rx1289_restart
    if_null rx1289_debug, debug_939
    rx1289_cur."!cursor_debug"("START", "postcircumfix:sym<{ }>")
  debug_939:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1293_done
    goto rxscan1293_scan
  rxscan1293_loop:
    (rx1289_pos) = rx1289_cur."from"()
    inc rx1289_pos
    rx1289_cur."!cursor_from"(rx1289_pos)
    ge rx1289_pos, rx1289_eos, rxscan1293_done
  rxscan1293_scan:
    set_addr $I10, rxscan1293_loop
    rx1289_cur."!mark_push"(0, rx1289_pos, $I10)
  rxscan1293_done:
.annotate 'line', 594
  # rx literal  "{"
    add $I11, rx1289_pos, 1
    gt $I11, rx1289_eos, rx1289_fail
    sub $I11, rx1289_pos, rx1289_off
    ord $I11, rx1289_tgt, $I11
    ne $I11, 123, rx1289_fail
    add rx1289_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1289_cur."!cursor_pos"(rx1289_pos)
    $P10 = rx1289_cur."ws"()
    unless $P10, rx1289_fail
    rx1289_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1289_cur."!cursor_pos"(rx1289_pos)
    $P10 = rx1289_cur."EXPR"()
    unless $P10, rx1289_fail
    rx1289_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx1289_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx1289_pos, 1
    gt $I11, rx1289_eos, rx1289_fail
    sub $I11, rx1289_pos, rx1289_off
    ord $I11, rx1289_tgt, $I11
    ne $I11, 125, rx1289_fail
    add rx1289_pos, 1
.annotate 'line', 595
  # rx subrule "O" subtype=capture negate=
    rx1289_cur."!cursor_pos"(rx1289_pos)
    $P10 = rx1289_cur."O"("%methodop")
    unless $P10, rx1289_fail
    rx1289_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1289_pos = $P10."pos"()
.annotate 'line', 593
  # rx pass
    rx1289_cur."!cursor_pass"(rx1289_pos, "postcircumfix:sym<{ }>")
    if_null rx1289_debug, debug_940
    rx1289_cur."!cursor_debug"("PASS", "postcircumfix:sym<{ }>", " at pos=", rx1289_pos)
  debug_940:
    .return (rx1289_cur)
  rx1289_restart:
.annotate 'line', 4
    if_null rx1289_debug, debug_941
    rx1289_cur."!cursor_debug"("NEXT", "postcircumfix:sym<{ }>")
  debug_941:
  rx1289_fail:
    (rx1289_rep, rx1289_pos, $I10, $P10) = rx1289_cur."!mark_fail"(0)
    lt rx1289_pos, -1, rx1289_done
    eq rx1289_pos, -1, rx1289_fail
    jump $I10
  rx1289_done:
    rx1289_cur."!cursor_fail"()
    if_null rx1289_debug, debug_942
    rx1289_cur."!cursor_debug"("FAIL", "postcircumfix:sym<{ }>")
  debug_942:
    .return (rx1289_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postcircumfix:sym<{ }>"  :nsentry("!PREFIX__postcircumfix:sym<{ }>") :subid("276_1299591493.348") :method
.annotate 'line', 4
    $P1291 = self."!PREFIX__!subrule"("ws", "{")
    new $P1292, "ResizablePMCArray"
    push $P1292, $P1291
    .return ($P1292)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<ang>"  :subid("277_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1295_tgt
    .local int rx1295_pos
    .local int rx1295_off
    .local int rx1295_eos
    .local int rx1295_rep
    .local pmc rx1295_cur
    .local pmc rx1295_debug
    (rx1295_cur, rx1295_pos, rx1295_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1295_cur
    .local pmc match
    .lex "$/", match
    length rx1295_eos, rx1295_tgt
    gt rx1295_pos, rx1295_eos, rx1295_done
    set rx1295_off, 0
    lt rx1295_pos, 2, rx1295_start
    sub rx1295_off, rx1295_pos, 1
    substr rx1295_tgt, rx1295_tgt, rx1295_off
  rx1295_start:
    eq $I10, 1, rx1295_restart
    if_null rx1295_debug, debug_943
    rx1295_cur."!cursor_debug"("START", "postcircumfix:sym<ang>")
  debug_943:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1298_done
    goto rxscan1298_scan
  rxscan1298_loop:
    (rx1295_pos) = rx1295_cur."from"()
    inc rx1295_pos
    rx1295_cur."!cursor_from"(rx1295_pos)
    ge rx1295_pos, rx1295_eos, rxscan1298_done
  rxscan1298_scan:
    set_addr $I10, rxscan1298_loop
    rx1295_cur."!mark_push"(0, rx1295_pos, $I10)
  rxscan1298_done:
.annotate 'line', 599
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1295_pos, rx1295_off
    substr $S10, rx1295_tgt, $I10, 1
    index $I11, "<", $S10
    lt $I11, 0, rx1295_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx1295_cur."!cursor_pos"(rx1295_pos)
    $P10 = rx1295_cur."quote_EXPR"(":q")
    unless $P10, rx1295_fail
    rx1295_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx1295_pos = $P10."pos"()
.annotate 'line', 600
  # rx subrule "O" subtype=capture negate=
    rx1295_cur."!cursor_pos"(rx1295_pos)
    $P10 = rx1295_cur."O"("%methodop")
    unless $P10, rx1295_fail
    rx1295_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1295_pos = $P10."pos"()
.annotate 'line', 598
  # rx pass
    rx1295_cur."!cursor_pass"(rx1295_pos, "postcircumfix:sym<ang>")
    if_null rx1295_debug, debug_944
    rx1295_cur."!cursor_debug"("PASS", "postcircumfix:sym<ang>", " at pos=", rx1295_pos)
  debug_944:
    .return (rx1295_cur)
  rx1295_restart:
.annotate 'line', 4
    if_null rx1295_debug, debug_945
    rx1295_cur."!cursor_debug"("NEXT", "postcircumfix:sym<ang>")
  debug_945:
  rx1295_fail:
    (rx1295_rep, rx1295_pos, $I10, $P10) = rx1295_cur."!mark_fail"(0)
    lt rx1295_pos, -1, rx1295_done
    eq rx1295_pos, -1, rx1295_fail
    jump $I10
  rx1295_done:
    rx1295_cur."!cursor_fail"()
    if_null rx1295_debug, debug_946
    rx1295_cur."!cursor_debug"("FAIL", "postcircumfix:sym<ang>")
  debug_946:
    .return (rx1295_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postcircumfix:sym<ang>"  :nsentry("!PREFIX__postcircumfix:sym<ang>") :subid("278_1299591493.348") :method
.annotate 'line', 4
    new $P1297, "ResizablePMCArray"
    push $P1297, "<"
    .return ($P1297)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<( )>"  :subid("279_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1300_tgt
    .local int rx1300_pos
    .local int rx1300_off
    .local int rx1300_eos
    .local int rx1300_rep
    .local pmc rx1300_cur
    .local pmc rx1300_debug
    (rx1300_cur, rx1300_pos, rx1300_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1300_cur
    .local pmc match
    .lex "$/", match
    length rx1300_eos, rx1300_tgt
    gt rx1300_pos, rx1300_eos, rx1300_done
    set rx1300_off, 0
    lt rx1300_pos, 2, rx1300_start
    sub rx1300_off, rx1300_pos, 1
    substr rx1300_tgt, rx1300_tgt, rx1300_off
  rx1300_start:
    eq $I10, 1, rx1300_restart
    if_null rx1300_debug, debug_947
    rx1300_cur."!cursor_debug"("START", "postcircumfix:sym<( )>")
  debug_947:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1304_done
    goto rxscan1304_scan
  rxscan1304_loop:
    (rx1300_pos) = rx1300_cur."from"()
    inc rx1300_pos
    rx1300_cur."!cursor_from"(rx1300_pos)
    ge rx1300_pos, rx1300_eos, rxscan1304_done
  rxscan1304_scan:
    set_addr $I10, rxscan1304_loop
    rx1300_cur."!mark_push"(0, rx1300_pos, $I10)
  rxscan1304_done:
.annotate 'line', 604
  # rx literal  "("
    add $I11, rx1300_pos, 1
    gt $I11, rx1300_eos, rx1300_fail
    sub $I11, rx1300_pos, rx1300_off
    ord $I11, rx1300_tgt, $I11
    ne $I11, 40, rx1300_fail
    add rx1300_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1300_cur."!cursor_pos"(rx1300_pos)
    $P10 = rx1300_cur."ws"()
    unless $P10, rx1300_fail
    rx1300_pos = $P10."pos"()
  # rx subrule "arglist" subtype=capture negate=
    rx1300_cur."!cursor_pos"(rx1300_pos)
    $P10 = rx1300_cur."arglist"()
    unless $P10, rx1300_fail
    rx1300_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("arglist")
    rx1300_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx1300_pos, 1
    gt $I11, rx1300_eos, rx1300_fail
    sub $I11, rx1300_pos, rx1300_off
    ord $I11, rx1300_tgt, $I11
    ne $I11, 41, rx1300_fail
    add rx1300_pos, 1
.annotate 'line', 605
  # rx subrule "O" subtype=capture negate=
    rx1300_cur."!cursor_pos"(rx1300_pos)
    $P10 = rx1300_cur."O"("%methodop")
    unless $P10, rx1300_fail
    rx1300_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1300_pos = $P10."pos"()
.annotate 'line', 603
  # rx pass
    rx1300_cur."!cursor_pass"(rx1300_pos, "postcircumfix:sym<( )>")
    if_null rx1300_debug, debug_948
    rx1300_cur."!cursor_debug"("PASS", "postcircumfix:sym<( )>", " at pos=", rx1300_pos)
  debug_948:
    .return (rx1300_cur)
  rx1300_restart:
.annotate 'line', 4
    if_null rx1300_debug, debug_949
    rx1300_cur."!cursor_debug"("NEXT", "postcircumfix:sym<( )>")
  debug_949:
  rx1300_fail:
    (rx1300_rep, rx1300_pos, $I10, $P10) = rx1300_cur."!mark_fail"(0)
    lt rx1300_pos, -1, rx1300_done
    eq rx1300_pos, -1, rx1300_fail
    jump $I10
  rx1300_done:
    rx1300_cur."!cursor_fail"()
    if_null rx1300_debug, debug_950
    rx1300_cur."!cursor_debug"("FAIL", "postcircumfix:sym<( )>")
  debug_950:
    .return (rx1300_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postcircumfix:sym<( )>"  :nsentry("!PREFIX__postcircumfix:sym<( )>") :subid("280_1299591493.348") :method
.annotate 'line', 4
    $P1302 = self."!PREFIX__!subrule"("ws", "(")
    new $P1303, "ResizablePMCArray"
    push $P1303, $P1302
    .return ($P1303)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postfix:sym<.>"  :subid("281_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1306_tgt
    .local int rx1306_pos
    .local int rx1306_off
    .local int rx1306_eos
    .local int rx1306_rep
    .local pmc rx1306_cur
    .local pmc rx1306_debug
    (rx1306_cur, rx1306_pos, rx1306_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1306_cur
    .local pmc match
    .lex "$/", match
    length rx1306_eos, rx1306_tgt
    gt rx1306_pos, rx1306_eos, rx1306_done
    set rx1306_off, 0
    lt rx1306_pos, 2, rx1306_start
    sub rx1306_off, rx1306_pos, 1
    substr rx1306_tgt, rx1306_tgt, rx1306_off
  rx1306_start:
    eq $I10, 1, rx1306_restart
    if_null rx1306_debug, debug_951
    rx1306_cur."!cursor_debug"("START", "postfix:sym<.>")
  debug_951:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1310_done
    goto rxscan1310_scan
  rxscan1310_loop:
    (rx1306_pos) = rx1306_cur."from"()
    inc rx1306_pos
    rx1306_cur."!cursor_from"(rx1306_pos)
    ge rx1306_pos, rx1306_eos, rxscan1310_done
  rxscan1310_scan:
    set_addr $I10, rxscan1310_loop
    rx1306_cur."!mark_push"(0, rx1306_pos, $I10)
  rxscan1310_done:
.annotate 'line', 608
  # rx subrule "dotty" subtype=capture negate=
    rx1306_cur."!cursor_pos"(rx1306_pos)
    $P10 = rx1306_cur."dotty"()
    unless $P10, rx1306_fail
    rx1306_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("dotty")
    rx1306_pos = $P10."pos"()
  # rx subrule "O" subtype=capture negate=
    rx1306_cur."!cursor_pos"(rx1306_pos)
    $P10 = rx1306_cur."O"("%methodop")
    unless $P10, rx1306_fail
    rx1306_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1306_pos = $P10."pos"()
  # rx pass
    rx1306_cur."!cursor_pass"(rx1306_pos, "postfix:sym<.>")
    if_null rx1306_debug, debug_952
    rx1306_cur."!cursor_debug"("PASS", "postfix:sym<.>", " at pos=", rx1306_pos)
  debug_952:
    .return (rx1306_cur)
  rx1306_restart:
.annotate 'line', 4
    if_null rx1306_debug, debug_953
    rx1306_cur."!cursor_debug"("NEXT", "postfix:sym<.>")
  debug_953:
  rx1306_fail:
    (rx1306_rep, rx1306_pos, $I10, $P10) = rx1306_cur."!mark_fail"(0)
    lt rx1306_pos, -1, rx1306_done
    eq rx1306_pos, -1, rx1306_fail
    jump $I10
  rx1306_done:
    rx1306_cur."!cursor_fail"()
    if_null rx1306_debug, debug_954
    rx1306_cur."!cursor_debug"("FAIL", "postfix:sym<.>")
  debug_954:
    .return (rx1306_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postfix:sym<.>"  :nsentry("!PREFIX__postfix:sym<.>") :subid("282_1299591493.348") :method
.annotate 'line', 4
    $P1308 = self."!PREFIX__!subrule"("dotty", "")
    new $P1309, "ResizablePMCArray"
    push $P1309, $P1308
    .return ($P1309)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<++>"  :subid("283_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1312_tgt
    .local int rx1312_pos
    .local int rx1312_off
    .local int rx1312_eos
    .local int rx1312_rep
    .local pmc rx1312_cur
    .local pmc rx1312_debug
    (rx1312_cur, rx1312_pos, rx1312_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1312_cur
    .local pmc match
    .lex "$/", match
    length rx1312_eos, rx1312_tgt
    gt rx1312_pos, rx1312_eos, rx1312_done
    set rx1312_off, 0
    lt rx1312_pos, 2, rx1312_start
    sub rx1312_off, rx1312_pos, 1
    substr rx1312_tgt, rx1312_tgt, rx1312_off
  rx1312_start:
    eq $I10, 1, rx1312_restart
    if_null rx1312_debug, debug_955
    rx1312_cur."!cursor_debug"("START", "prefix:sym<++>")
  debug_955:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1316_done
    goto rxscan1316_scan
  rxscan1316_loop:
    (rx1312_pos) = rx1312_cur."from"()
    inc rx1312_pos
    rx1312_cur."!cursor_from"(rx1312_pos)
    ge rx1312_pos, rx1312_eos, rxscan1316_done
  rxscan1316_scan:
    set_addr $I10, rxscan1316_loop
    rx1312_cur."!mark_push"(0, rx1312_pos, $I10)
  rxscan1316_done:
.annotate 'line', 610
  # rx subcapture "sym"
    set_addr $I10, rxcap_1317_fail
    rx1312_cur."!mark_push"(0, rx1312_pos, $I10)
  # rx literal  "++"
    add $I11, rx1312_pos, 2
    gt $I11, rx1312_eos, rx1312_fail
    sub $I11, rx1312_pos, rx1312_off
    substr $S10, rx1312_tgt, $I11, 2
    ne $S10, "++", rx1312_fail
    add rx1312_pos, 2
    set_addr $I10, rxcap_1317_fail
    ($I12, $I11) = rx1312_cur."!mark_peek"($I10)
    rx1312_cur."!cursor_pos"($I11)
    ($P10) = rx1312_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1312_pos, "")
    rx1312_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1317_done
  rxcap_1317_fail:
    goto rx1312_fail
  rxcap_1317_done:
  # rx subrule "O" subtype=capture negate=
    rx1312_cur."!cursor_pos"(rx1312_pos)
    $P10 = rx1312_cur."O"("%autoincrement, :pirop<inc>")
    unless $P10, rx1312_fail
    rx1312_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1312_pos = $P10."pos"()
  # rx pass
    rx1312_cur."!cursor_pass"(rx1312_pos, "prefix:sym<++>")
    if_null rx1312_debug, debug_956
    rx1312_cur."!cursor_debug"("PASS", "prefix:sym<++>", " at pos=", rx1312_pos)
  debug_956:
    .return (rx1312_cur)
  rx1312_restart:
.annotate 'line', 4
    if_null rx1312_debug, debug_957
    rx1312_cur."!cursor_debug"("NEXT", "prefix:sym<++>")
  debug_957:
  rx1312_fail:
    (rx1312_rep, rx1312_pos, $I10, $P10) = rx1312_cur."!mark_fail"(0)
    lt rx1312_pos, -1, rx1312_done
    eq rx1312_pos, -1, rx1312_fail
    jump $I10
  rx1312_done:
    rx1312_cur."!cursor_fail"()
    if_null rx1312_debug, debug_958
    rx1312_cur."!cursor_debug"("FAIL", "prefix:sym<++>")
  debug_958:
    .return (rx1312_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<++>"  :nsentry("!PREFIX__prefix:sym<++>") :subid("284_1299591493.348") :method
.annotate 'line', 4
    $P1314 = self."!PREFIX__!subrule"("O", "++")
    new $P1315, "ResizablePMCArray"
    push $P1315, $P1314
    .return ($P1315)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<-->"  :subid("285_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1319_tgt
    .local int rx1319_pos
    .local int rx1319_off
    .local int rx1319_eos
    .local int rx1319_rep
    .local pmc rx1319_cur
    .local pmc rx1319_debug
    (rx1319_cur, rx1319_pos, rx1319_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1319_cur
    .local pmc match
    .lex "$/", match
    length rx1319_eos, rx1319_tgt
    gt rx1319_pos, rx1319_eos, rx1319_done
    set rx1319_off, 0
    lt rx1319_pos, 2, rx1319_start
    sub rx1319_off, rx1319_pos, 1
    substr rx1319_tgt, rx1319_tgt, rx1319_off
  rx1319_start:
    eq $I10, 1, rx1319_restart
    if_null rx1319_debug, debug_959
    rx1319_cur."!cursor_debug"("START", "prefix:sym<-->")
  debug_959:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1323_done
    goto rxscan1323_scan
  rxscan1323_loop:
    (rx1319_pos) = rx1319_cur."from"()
    inc rx1319_pos
    rx1319_cur."!cursor_from"(rx1319_pos)
    ge rx1319_pos, rx1319_eos, rxscan1323_done
  rxscan1323_scan:
    set_addr $I10, rxscan1323_loop
    rx1319_cur."!mark_push"(0, rx1319_pos, $I10)
  rxscan1323_done:
.annotate 'line', 611
  # rx subcapture "sym"
    set_addr $I10, rxcap_1324_fail
    rx1319_cur."!mark_push"(0, rx1319_pos, $I10)
  # rx literal  "--"
    add $I11, rx1319_pos, 2
    gt $I11, rx1319_eos, rx1319_fail
    sub $I11, rx1319_pos, rx1319_off
    substr $S10, rx1319_tgt, $I11, 2
    ne $S10, "--", rx1319_fail
    add rx1319_pos, 2
    set_addr $I10, rxcap_1324_fail
    ($I12, $I11) = rx1319_cur."!mark_peek"($I10)
    rx1319_cur."!cursor_pos"($I11)
    ($P10) = rx1319_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1319_pos, "")
    rx1319_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1324_done
  rxcap_1324_fail:
    goto rx1319_fail
  rxcap_1324_done:
  # rx subrule "O" subtype=capture negate=
    rx1319_cur."!cursor_pos"(rx1319_pos)
    $P10 = rx1319_cur."O"("%autoincrement, :pirop<dec>")
    unless $P10, rx1319_fail
    rx1319_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1319_pos = $P10."pos"()
  # rx pass
    rx1319_cur."!cursor_pass"(rx1319_pos, "prefix:sym<-->")
    if_null rx1319_debug, debug_960
    rx1319_cur."!cursor_debug"("PASS", "prefix:sym<-->", " at pos=", rx1319_pos)
  debug_960:
    .return (rx1319_cur)
  rx1319_restart:
.annotate 'line', 4
    if_null rx1319_debug, debug_961
    rx1319_cur."!cursor_debug"("NEXT", "prefix:sym<-->")
  debug_961:
  rx1319_fail:
    (rx1319_rep, rx1319_pos, $I10, $P10) = rx1319_cur."!mark_fail"(0)
    lt rx1319_pos, -1, rx1319_done
    eq rx1319_pos, -1, rx1319_fail
    jump $I10
  rx1319_done:
    rx1319_cur."!cursor_fail"()
    if_null rx1319_debug, debug_962
    rx1319_cur."!cursor_debug"("FAIL", "prefix:sym<-->")
  debug_962:
    .return (rx1319_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<-->"  :nsentry("!PREFIX__prefix:sym<-->") :subid("286_1299591493.348") :method
.annotate 'line', 4
    $P1321 = self."!PREFIX__!subrule"("O", "--")
    new $P1322, "ResizablePMCArray"
    push $P1322, $P1321
    .return ($P1322)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postfix:sym<++>"  :subid("287_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1326_tgt
    .local int rx1326_pos
    .local int rx1326_off
    .local int rx1326_eos
    .local int rx1326_rep
    .local pmc rx1326_cur
    .local pmc rx1326_debug
    (rx1326_cur, rx1326_pos, rx1326_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1326_cur
    .local pmc match
    .lex "$/", match
    length rx1326_eos, rx1326_tgt
    gt rx1326_pos, rx1326_eos, rx1326_done
    set rx1326_off, 0
    lt rx1326_pos, 2, rx1326_start
    sub rx1326_off, rx1326_pos, 1
    substr rx1326_tgt, rx1326_tgt, rx1326_off
  rx1326_start:
    eq $I10, 1, rx1326_restart
    if_null rx1326_debug, debug_963
    rx1326_cur."!cursor_debug"("START", "postfix:sym<++>")
  debug_963:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1330_done
    goto rxscan1330_scan
  rxscan1330_loop:
    (rx1326_pos) = rx1326_cur."from"()
    inc rx1326_pos
    rx1326_cur."!cursor_from"(rx1326_pos)
    ge rx1326_pos, rx1326_eos, rxscan1330_done
  rxscan1330_scan:
    set_addr $I10, rxscan1330_loop
    rx1326_cur."!mark_push"(0, rx1326_pos, $I10)
  rxscan1330_done:
.annotate 'line', 614
  # rx subcapture "sym"
    set_addr $I10, rxcap_1331_fail
    rx1326_cur."!mark_push"(0, rx1326_pos, $I10)
  # rx literal  "++"
    add $I11, rx1326_pos, 2
    gt $I11, rx1326_eos, rx1326_fail
    sub $I11, rx1326_pos, rx1326_off
    substr $S10, rx1326_tgt, $I11, 2
    ne $S10, "++", rx1326_fail
    add rx1326_pos, 2
    set_addr $I10, rxcap_1331_fail
    ($I12, $I11) = rx1326_cur."!mark_peek"($I10)
    rx1326_cur."!cursor_pos"($I11)
    ($P10) = rx1326_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1326_pos, "")
    rx1326_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1331_done
  rxcap_1331_fail:
    goto rx1326_fail
  rxcap_1331_done:
  # rx subrule "O" subtype=capture negate=
    rx1326_cur."!cursor_pos"(rx1326_pos)
    $P10 = rx1326_cur."O"("%autoincrement")
    unless $P10, rx1326_fail
    rx1326_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1326_pos = $P10."pos"()
  # rx pass
    rx1326_cur."!cursor_pass"(rx1326_pos, "postfix:sym<++>")
    if_null rx1326_debug, debug_964
    rx1326_cur."!cursor_debug"("PASS", "postfix:sym<++>", " at pos=", rx1326_pos)
  debug_964:
    .return (rx1326_cur)
  rx1326_restart:
.annotate 'line', 4
    if_null rx1326_debug, debug_965
    rx1326_cur."!cursor_debug"("NEXT", "postfix:sym<++>")
  debug_965:
  rx1326_fail:
    (rx1326_rep, rx1326_pos, $I10, $P10) = rx1326_cur."!mark_fail"(0)
    lt rx1326_pos, -1, rx1326_done
    eq rx1326_pos, -1, rx1326_fail
    jump $I10
  rx1326_done:
    rx1326_cur."!cursor_fail"()
    if_null rx1326_debug, debug_966
    rx1326_cur."!cursor_debug"("FAIL", "postfix:sym<++>")
  debug_966:
    .return (rx1326_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postfix:sym<++>"  :nsentry("!PREFIX__postfix:sym<++>") :subid("288_1299591493.348") :method
.annotate 'line', 4
    $P1328 = self."!PREFIX__!subrule"("O", "++")
    new $P1329, "ResizablePMCArray"
    push $P1329, $P1328
    .return ($P1329)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postfix:sym<-->"  :subid("289_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1333_tgt
    .local int rx1333_pos
    .local int rx1333_off
    .local int rx1333_eos
    .local int rx1333_rep
    .local pmc rx1333_cur
    .local pmc rx1333_debug
    (rx1333_cur, rx1333_pos, rx1333_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1333_cur
    .local pmc match
    .lex "$/", match
    length rx1333_eos, rx1333_tgt
    gt rx1333_pos, rx1333_eos, rx1333_done
    set rx1333_off, 0
    lt rx1333_pos, 2, rx1333_start
    sub rx1333_off, rx1333_pos, 1
    substr rx1333_tgt, rx1333_tgt, rx1333_off
  rx1333_start:
    eq $I10, 1, rx1333_restart
    if_null rx1333_debug, debug_967
    rx1333_cur."!cursor_debug"("START", "postfix:sym<-->")
  debug_967:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1337_done
    goto rxscan1337_scan
  rxscan1337_loop:
    (rx1333_pos) = rx1333_cur."from"()
    inc rx1333_pos
    rx1333_cur."!cursor_from"(rx1333_pos)
    ge rx1333_pos, rx1333_eos, rxscan1337_done
  rxscan1337_scan:
    set_addr $I10, rxscan1337_loop
    rx1333_cur."!mark_push"(0, rx1333_pos, $I10)
  rxscan1337_done:
.annotate 'line', 615
  # rx subcapture "sym"
    set_addr $I10, rxcap_1338_fail
    rx1333_cur."!mark_push"(0, rx1333_pos, $I10)
  # rx literal  "--"
    add $I11, rx1333_pos, 2
    gt $I11, rx1333_eos, rx1333_fail
    sub $I11, rx1333_pos, rx1333_off
    substr $S10, rx1333_tgt, $I11, 2
    ne $S10, "--", rx1333_fail
    add rx1333_pos, 2
    set_addr $I10, rxcap_1338_fail
    ($I12, $I11) = rx1333_cur."!mark_peek"($I10)
    rx1333_cur."!cursor_pos"($I11)
    ($P10) = rx1333_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1333_pos, "")
    rx1333_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1338_done
  rxcap_1338_fail:
    goto rx1333_fail
  rxcap_1338_done:
  # rx subrule "O" subtype=capture negate=
    rx1333_cur."!cursor_pos"(rx1333_pos)
    $P10 = rx1333_cur."O"("%autoincrement")
    unless $P10, rx1333_fail
    rx1333_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1333_pos = $P10."pos"()
  # rx pass
    rx1333_cur."!cursor_pass"(rx1333_pos, "postfix:sym<-->")
    if_null rx1333_debug, debug_968
    rx1333_cur."!cursor_debug"("PASS", "postfix:sym<-->", " at pos=", rx1333_pos)
  debug_968:
    .return (rx1333_cur)
  rx1333_restart:
.annotate 'line', 4
    if_null rx1333_debug, debug_969
    rx1333_cur."!cursor_debug"("NEXT", "postfix:sym<-->")
  debug_969:
  rx1333_fail:
    (rx1333_rep, rx1333_pos, $I10, $P10) = rx1333_cur."!mark_fail"(0)
    lt rx1333_pos, -1, rx1333_done
    eq rx1333_pos, -1, rx1333_fail
    jump $I10
  rx1333_done:
    rx1333_cur."!cursor_fail"()
    if_null rx1333_debug, debug_970
    rx1333_cur."!cursor_debug"("FAIL", "postfix:sym<-->")
  debug_970:
    .return (rx1333_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postfix:sym<-->"  :nsentry("!PREFIX__postfix:sym<-->") :subid("290_1299591493.348") :method
.annotate 'line', 4
    $P1335 = self."!PREFIX__!subrule"("O", "--")
    new $P1336, "ResizablePMCArray"
    push $P1336, $P1335
    .return ($P1336)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<**>"  :subid("291_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1340_tgt
    .local int rx1340_pos
    .local int rx1340_off
    .local int rx1340_eos
    .local int rx1340_rep
    .local pmc rx1340_cur
    .local pmc rx1340_debug
    (rx1340_cur, rx1340_pos, rx1340_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1340_cur
    .local pmc match
    .lex "$/", match
    length rx1340_eos, rx1340_tgt
    gt rx1340_pos, rx1340_eos, rx1340_done
    set rx1340_off, 0
    lt rx1340_pos, 2, rx1340_start
    sub rx1340_off, rx1340_pos, 1
    substr rx1340_tgt, rx1340_tgt, rx1340_off
  rx1340_start:
    eq $I10, 1, rx1340_restart
    if_null rx1340_debug, debug_971
    rx1340_cur."!cursor_debug"("START", "infix:sym<**>")
  debug_971:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1344_done
    goto rxscan1344_scan
  rxscan1344_loop:
    (rx1340_pos) = rx1340_cur."from"()
    inc rx1340_pos
    rx1340_cur."!cursor_from"(rx1340_pos)
    ge rx1340_pos, rx1340_eos, rxscan1344_done
  rxscan1344_scan:
    set_addr $I10, rxscan1344_loop
    rx1340_cur."!mark_push"(0, rx1340_pos, $I10)
  rxscan1344_done:
.annotate 'line', 617
  # rx subcapture "sym"
    set_addr $I10, rxcap_1345_fail
    rx1340_cur."!mark_push"(0, rx1340_pos, $I10)
  # rx literal  "**"
    add $I11, rx1340_pos, 2
    gt $I11, rx1340_eos, rx1340_fail
    sub $I11, rx1340_pos, rx1340_off
    substr $S10, rx1340_tgt, $I11, 2
    ne $S10, "**", rx1340_fail
    add rx1340_pos, 2
    set_addr $I10, rxcap_1345_fail
    ($I12, $I11) = rx1340_cur."!mark_peek"($I10)
    rx1340_cur."!cursor_pos"($I11)
    ($P10) = rx1340_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1340_pos, "")
    rx1340_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1345_done
  rxcap_1345_fail:
    goto rx1340_fail
  rxcap_1345_done:
  # rx subrule "O" subtype=capture negate=
    rx1340_cur."!cursor_pos"(rx1340_pos)
    $P10 = rx1340_cur."O"("%exponentiation, :pirop<pow>")
    unless $P10, rx1340_fail
    rx1340_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1340_pos = $P10."pos"()
  # rx pass
    rx1340_cur."!cursor_pass"(rx1340_pos, "infix:sym<**>")
    if_null rx1340_debug, debug_972
    rx1340_cur."!cursor_debug"("PASS", "infix:sym<**>", " at pos=", rx1340_pos)
  debug_972:
    .return (rx1340_cur)
  rx1340_restart:
.annotate 'line', 4
    if_null rx1340_debug, debug_973
    rx1340_cur."!cursor_debug"("NEXT", "infix:sym<**>")
  debug_973:
  rx1340_fail:
    (rx1340_rep, rx1340_pos, $I10, $P10) = rx1340_cur."!mark_fail"(0)
    lt rx1340_pos, -1, rx1340_done
    eq rx1340_pos, -1, rx1340_fail
    jump $I10
  rx1340_done:
    rx1340_cur."!cursor_fail"()
    if_null rx1340_debug, debug_974
    rx1340_cur."!cursor_debug"("FAIL", "infix:sym<**>")
  debug_974:
    .return (rx1340_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<**>"  :nsentry("!PREFIX__infix:sym<**>") :subid("292_1299591493.348") :method
.annotate 'line', 4
    $P1342 = self."!PREFIX__!subrule"("O", "**")
    new $P1343, "ResizablePMCArray"
    push $P1343, $P1342
    .return ($P1343)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<+>"  :subid("293_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1347_tgt
    .local int rx1347_pos
    .local int rx1347_off
    .local int rx1347_eos
    .local int rx1347_rep
    .local pmc rx1347_cur
    .local pmc rx1347_debug
    (rx1347_cur, rx1347_pos, rx1347_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1347_cur
    .local pmc match
    .lex "$/", match
    length rx1347_eos, rx1347_tgt
    gt rx1347_pos, rx1347_eos, rx1347_done
    set rx1347_off, 0
    lt rx1347_pos, 2, rx1347_start
    sub rx1347_off, rx1347_pos, 1
    substr rx1347_tgt, rx1347_tgt, rx1347_off
  rx1347_start:
    eq $I10, 1, rx1347_restart
    if_null rx1347_debug, debug_975
    rx1347_cur."!cursor_debug"("START", "prefix:sym<+>")
  debug_975:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1351_done
    goto rxscan1351_scan
  rxscan1351_loop:
    (rx1347_pos) = rx1347_cur."from"()
    inc rx1347_pos
    rx1347_cur."!cursor_from"(rx1347_pos)
    ge rx1347_pos, rx1347_eos, rxscan1351_done
  rxscan1351_scan:
    set_addr $I10, rxscan1351_loop
    rx1347_cur."!mark_push"(0, rx1347_pos, $I10)
  rxscan1351_done:
.annotate 'line', 619
  # rx subcapture "sym"
    set_addr $I10, rxcap_1352_fail
    rx1347_cur."!mark_push"(0, rx1347_pos, $I10)
  # rx literal  "+"
    add $I11, rx1347_pos, 1
    gt $I11, rx1347_eos, rx1347_fail
    sub $I11, rx1347_pos, rx1347_off
    ord $I11, rx1347_tgt, $I11
    ne $I11, 43, rx1347_fail
    add rx1347_pos, 1
    set_addr $I10, rxcap_1352_fail
    ($I12, $I11) = rx1347_cur."!mark_peek"($I10)
    rx1347_cur."!cursor_pos"($I11)
    ($P10) = rx1347_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1347_pos, "")
    rx1347_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1352_done
  rxcap_1352_fail:
    goto rx1347_fail
  rxcap_1352_done:
  # rx subrule "O" subtype=capture negate=
    rx1347_cur."!cursor_pos"(rx1347_pos)
    $P10 = rx1347_cur."O"("%symbolic_unary, :pirop<set N*>")
    unless $P10, rx1347_fail
    rx1347_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1347_pos = $P10."pos"()
  # rx pass
    rx1347_cur."!cursor_pass"(rx1347_pos, "prefix:sym<+>")
    if_null rx1347_debug, debug_976
    rx1347_cur."!cursor_debug"("PASS", "prefix:sym<+>", " at pos=", rx1347_pos)
  debug_976:
    .return (rx1347_cur)
  rx1347_restart:
.annotate 'line', 4
    if_null rx1347_debug, debug_977
    rx1347_cur."!cursor_debug"("NEXT", "prefix:sym<+>")
  debug_977:
  rx1347_fail:
    (rx1347_rep, rx1347_pos, $I10, $P10) = rx1347_cur."!mark_fail"(0)
    lt rx1347_pos, -1, rx1347_done
    eq rx1347_pos, -1, rx1347_fail
    jump $I10
  rx1347_done:
    rx1347_cur."!cursor_fail"()
    if_null rx1347_debug, debug_978
    rx1347_cur."!cursor_debug"("FAIL", "prefix:sym<+>")
  debug_978:
    .return (rx1347_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<+>"  :nsentry("!PREFIX__prefix:sym<+>") :subid("294_1299591493.348") :method
.annotate 'line', 4
    $P1349 = self."!PREFIX__!subrule"("O", "+")
    new $P1350, "ResizablePMCArray"
    push $P1350, $P1349
    .return ($P1350)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<~>"  :subid("295_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1354_tgt
    .local int rx1354_pos
    .local int rx1354_off
    .local int rx1354_eos
    .local int rx1354_rep
    .local pmc rx1354_cur
    .local pmc rx1354_debug
    (rx1354_cur, rx1354_pos, rx1354_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1354_cur
    .local pmc match
    .lex "$/", match
    length rx1354_eos, rx1354_tgt
    gt rx1354_pos, rx1354_eos, rx1354_done
    set rx1354_off, 0
    lt rx1354_pos, 2, rx1354_start
    sub rx1354_off, rx1354_pos, 1
    substr rx1354_tgt, rx1354_tgt, rx1354_off
  rx1354_start:
    eq $I10, 1, rx1354_restart
    if_null rx1354_debug, debug_979
    rx1354_cur."!cursor_debug"("START", "prefix:sym<~>")
  debug_979:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1358_done
    goto rxscan1358_scan
  rxscan1358_loop:
    (rx1354_pos) = rx1354_cur."from"()
    inc rx1354_pos
    rx1354_cur."!cursor_from"(rx1354_pos)
    ge rx1354_pos, rx1354_eos, rxscan1358_done
  rxscan1358_scan:
    set_addr $I10, rxscan1358_loop
    rx1354_cur."!mark_push"(0, rx1354_pos, $I10)
  rxscan1358_done:
.annotate 'line', 620
  # rx subcapture "sym"
    set_addr $I10, rxcap_1359_fail
    rx1354_cur."!mark_push"(0, rx1354_pos, $I10)
  # rx literal  "~"
    add $I11, rx1354_pos, 1
    gt $I11, rx1354_eos, rx1354_fail
    sub $I11, rx1354_pos, rx1354_off
    ord $I11, rx1354_tgt, $I11
    ne $I11, 126, rx1354_fail
    add rx1354_pos, 1
    set_addr $I10, rxcap_1359_fail
    ($I12, $I11) = rx1354_cur."!mark_peek"($I10)
    rx1354_cur."!cursor_pos"($I11)
    ($P10) = rx1354_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1354_pos, "")
    rx1354_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1359_done
  rxcap_1359_fail:
    goto rx1354_fail
  rxcap_1359_done:
  # rx subrule "O" subtype=capture negate=
    rx1354_cur."!cursor_pos"(rx1354_pos)
    $P10 = rx1354_cur."O"("%symbolic_unary, :pirop<set S*>")
    unless $P10, rx1354_fail
    rx1354_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1354_pos = $P10."pos"()
  # rx pass
    rx1354_cur."!cursor_pass"(rx1354_pos, "prefix:sym<~>")
    if_null rx1354_debug, debug_980
    rx1354_cur."!cursor_debug"("PASS", "prefix:sym<~>", " at pos=", rx1354_pos)
  debug_980:
    .return (rx1354_cur)
  rx1354_restart:
.annotate 'line', 4
    if_null rx1354_debug, debug_981
    rx1354_cur."!cursor_debug"("NEXT", "prefix:sym<~>")
  debug_981:
  rx1354_fail:
    (rx1354_rep, rx1354_pos, $I10, $P10) = rx1354_cur."!mark_fail"(0)
    lt rx1354_pos, -1, rx1354_done
    eq rx1354_pos, -1, rx1354_fail
    jump $I10
  rx1354_done:
    rx1354_cur."!cursor_fail"()
    if_null rx1354_debug, debug_982
    rx1354_cur."!cursor_debug"("FAIL", "prefix:sym<~>")
  debug_982:
    .return (rx1354_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<~>"  :nsentry("!PREFIX__prefix:sym<~>") :subid("296_1299591493.348") :method
.annotate 'line', 4
    $P1356 = self."!PREFIX__!subrule"("O", "~")
    new $P1357, "ResizablePMCArray"
    push $P1357, $P1356
    .return ($P1357)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<->"  :subid("297_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1361_tgt
    .local int rx1361_pos
    .local int rx1361_off
    .local int rx1361_eos
    .local int rx1361_rep
    .local pmc rx1361_cur
    .local pmc rx1361_debug
    (rx1361_cur, rx1361_pos, rx1361_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1361_cur
    .local pmc match
    .lex "$/", match
    length rx1361_eos, rx1361_tgt
    gt rx1361_pos, rx1361_eos, rx1361_done
    set rx1361_off, 0
    lt rx1361_pos, 2, rx1361_start
    sub rx1361_off, rx1361_pos, 1
    substr rx1361_tgt, rx1361_tgt, rx1361_off
  rx1361_start:
    eq $I10, 1, rx1361_restart
    if_null rx1361_debug, debug_983
    rx1361_cur."!cursor_debug"("START", "prefix:sym<->")
  debug_983:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1364_done
    goto rxscan1364_scan
  rxscan1364_loop:
    (rx1361_pos) = rx1361_cur."from"()
    inc rx1361_pos
    rx1361_cur."!cursor_from"(rx1361_pos)
    ge rx1361_pos, rx1361_eos, rxscan1364_done
  rxscan1364_scan:
    set_addr $I10, rxscan1364_loop
    rx1361_cur."!mark_push"(0, rx1361_pos, $I10)
  rxscan1364_done:
.annotate 'line', 621
  # rx subcapture "sym"
    set_addr $I10, rxcap_1365_fail
    rx1361_cur."!mark_push"(0, rx1361_pos, $I10)
  # rx literal  "-"
    add $I11, rx1361_pos, 1
    gt $I11, rx1361_eos, rx1361_fail
    sub $I11, rx1361_pos, rx1361_off
    ord $I11, rx1361_tgt, $I11
    ne $I11, 45, rx1361_fail
    add rx1361_pos, 1
    set_addr $I10, rxcap_1365_fail
    ($I12, $I11) = rx1361_cur."!mark_peek"($I10)
    rx1361_cur."!cursor_pos"($I11)
    ($P10) = rx1361_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1361_pos, "")
    rx1361_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1365_done
  rxcap_1365_fail:
    goto rx1361_fail
  rxcap_1365_done:
  # rx enumcharlist negate=1 zerowidth
    sub $I10, rx1361_pos, rx1361_off
    substr $S10, rx1361_tgt, $I10, 1
    index $I11, ">", $S10
    ge $I11, 0, rx1361_fail
  # rx subrule "number" subtype=zerowidth negate=1
    rx1361_cur."!cursor_pos"(rx1361_pos)
    $P10 = rx1361_cur."number"()
    if $P10, rx1361_fail
  # rx subrule "O" subtype=capture negate=
    rx1361_cur."!cursor_pos"(rx1361_pos)
    $P10 = rx1361_cur."O"("%symbolic_unary, :pirop<neg>")
    unless $P10, rx1361_fail
    rx1361_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1361_pos = $P10."pos"()
  # rx pass
    rx1361_cur."!cursor_pass"(rx1361_pos, "prefix:sym<->")
    if_null rx1361_debug, debug_984
    rx1361_cur."!cursor_debug"("PASS", "prefix:sym<->", " at pos=", rx1361_pos)
  debug_984:
    .return (rx1361_cur)
  rx1361_restart:
.annotate 'line', 4
    if_null rx1361_debug, debug_985
    rx1361_cur."!cursor_debug"("NEXT", "prefix:sym<->")
  debug_985:
  rx1361_fail:
    (rx1361_rep, rx1361_pos, $I10, $P10) = rx1361_cur."!mark_fail"(0)
    lt rx1361_pos, -1, rx1361_done
    eq rx1361_pos, -1, rx1361_fail
    jump $I10
  rx1361_done:
    rx1361_cur."!cursor_fail"()
    if_null rx1361_debug, debug_986
    rx1361_cur."!cursor_debug"("FAIL", "prefix:sym<->")
  debug_986:
    .return (rx1361_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<->"  :nsentry("!PREFIX__prefix:sym<->") :subid("298_1299591493.348") :method
.annotate 'line', 4
    new $P1363, "ResizablePMCArray"
    push $P1363, "-"
    .return ($P1363)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<?>"  :subid("299_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1367_tgt
    .local int rx1367_pos
    .local int rx1367_off
    .local int rx1367_eos
    .local int rx1367_rep
    .local pmc rx1367_cur
    .local pmc rx1367_debug
    (rx1367_cur, rx1367_pos, rx1367_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1367_cur
    .local pmc match
    .lex "$/", match
    length rx1367_eos, rx1367_tgt
    gt rx1367_pos, rx1367_eos, rx1367_done
    set rx1367_off, 0
    lt rx1367_pos, 2, rx1367_start
    sub rx1367_off, rx1367_pos, 1
    substr rx1367_tgt, rx1367_tgt, rx1367_off
  rx1367_start:
    eq $I10, 1, rx1367_restart
    if_null rx1367_debug, debug_987
    rx1367_cur."!cursor_debug"("START", "prefix:sym<?>")
  debug_987:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1371_done
    goto rxscan1371_scan
  rxscan1371_loop:
    (rx1367_pos) = rx1367_cur."from"()
    inc rx1367_pos
    rx1367_cur."!cursor_from"(rx1367_pos)
    ge rx1367_pos, rx1367_eos, rxscan1371_done
  rxscan1371_scan:
    set_addr $I10, rxscan1371_loop
    rx1367_cur."!mark_push"(0, rx1367_pos, $I10)
  rxscan1371_done:
.annotate 'line', 622
  # rx subcapture "sym"
    set_addr $I10, rxcap_1372_fail
    rx1367_cur."!mark_push"(0, rx1367_pos, $I10)
  # rx literal  "?"
    add $I11, rx1367_pos, 1
    gt $I11, rx1367_eos, rx1367_fail
    sub $I11, rx1367_pos, rx1367_off
    ord $I11, rx1367_tgt, $I11
    ne $I11, 63, rx1367_fail
    add rx1367_pos, 1
    set_addr $I10, rxcap_1372_fail
    ($I12, $I11) = rx1367_cur."!mark_peek"($I10)
    rx1367_cur."!cursor_pos"($I11)
    ($P10) = rx1367_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1367_pos, "")
    rx1367_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1372_done
  rxcap_1372_fail:
    goto rx1367_fail
  rxcap_1372_done:
  # rx subrule "O" subtype=capture negate=
    rx1367_cur."!cursor_pos"(rx1367_pos)
    $P10 = rx1367_cur."O"("%symbolic_unary, :pirop<istrue>")
    unless $P10, rx1367_fail
    rx1367_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1367_pos = $P10."pos"()
  # rx pass
    rx1367_cur."!cursor_pass"(rx1367_pos, "prefix:sym<?>")
    if_null rx1367_debug, debug_988
    rx1367_cur."!cursor_debug"("PASS", "prefix:sym<?>", " at pos=", rx1367_pos)
  debug_988:
    .return (rx1367_cur)
  rx1367_restart:
.annotate 'line', 4
    if_null rx1367_debug, debug_989
    rx1367_cur."!cursor_debug"("NEXT", "prefix:sym<?>")
  debug_989:
  rx1367_fail:
    (rx1367_rep, rx1367_pos, $I10, $P10) = rx1367_cur."!mark_fail"(0)
    lt rx1367_pos, -1, rx1367_done
    eq rx1367_pos, -1, rx1367_fail
    jump $I10
  rx1367_done:
    rx1367_cur."!cursor_fail"()
    if_null rx1367_debug, debug_990
    rx1367_cur."!cursor_debug"("FAIL", "prefix:sym<?>")
  debug_990:
    .return (rx1367_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<?>"  :nsentry("!PREFIX__prefix:sym<?>") :subid("300_1299591493.348") :method
.annotate 'line', 4
    $P1369 = self."!PREFIX__!subrule"("O", "?")
    new $P1370, "ResizablePMCArray"
    push $P1370, $P1369
    .return ($P1370)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<!>"  :subid("301_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1374_tgt
    .local int rx1374_pos
    .local int rx1374_off
    .local int rx1374_eos
    .local int rx1374_rep
    .local pmc rx1374_cur
    .local pmc rx1374_debug
    (rx1374_cur, rx1374_pos, rx1374_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1374_cur
    .local pmc match
    .lex "$/", match
    length rx1374_eos, rx1374_tgt
    gt rx1374_pos, rx1374_eos, rx1374_done
    set rx1374_off, 0
    lt rx1374_pos, 2, rx1374_start
    sub rx1374_off, rx1374_pos, 1
    substr rx1374_tgt, rx1374_tgt, rx1374_off
  rx1374_start:
    eq $I10, 1, rx1374_restart
    if_null rx1374_debug, debug_991
    rx1374_cur."!cursor_debug"("START", "prefix:sym<!>")
  debug_991:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1378_done
    goto rxscan1378_scan
  rxscan1378_loop:
    (rx1374_pos) = rx1374_cur."from"()
    inc rx1374_pos
    rx1374_cur."!cursor_from"(rx1374_pos)
    ge rx1374_pos, rx1374_eos, rxscan1378_done
  rxscan1378_scan:
    set_addr $I10, rxscan1378_loop
    rx1374_cur."!mark_push"(0, rx1374_pos, $I10)
  rxscan1378_done:
.annotate 'line', 623
  # rx subcapture "sym"
    set_addr $I10, rxcap_1379_fail
    rx1374_cur."!mark_push"(0, rx1374_pos, $I10)
  # rx literal  "!"
    add $I11, rx1374_pos, 1
    gt $I11, rx1374_eos, rx1374_fail
    sub $I11, rx1374_pos, rx1374_off
    ord $I11, rx1374_tgt, $I11
    ne $I11, 33, rx1374_fail
    add rx1374_pos, 1
    set_addr $I10, rxcap_1379_fail
    ($I12, $I11) = rx1374_cur."!mark_peek"($I10)
    rx1374_cur."!cursor_pos"($I11)
    ($P10) = rx1374_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1374_pos, "")
    rx1374_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1379_done
  rxcap_1379_fail:
    goto rx1374_fail
  rxcap_1379_done:
  # rx subrule "O" subtype=capture negate=
    rx1374_cur."!cursor_pos"(rx1374_pos)
    $P10 = rx1374_cur."O"("%symbolic_unary, :pirop<isfalse>")
    unless $P10, rx1374_fail
    rx1374_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1374_pos = $P10."pos"()
  # rx pass
    rx1374_cur."!cursor_pass"(rx1374_pos, "prefix:sym<!>")
    if_null rx1374_debug, debug_992
    rx1374_cur."!cursor_debug"("PASS", "prefix:sym<!>", " at pos=", rx1374_pos)
  debug_992:
    .return (rx1374_cur)
  rx1374_restart:
.annotate 'line', 4
    if_null rx1374_debug, debug_993
    rx1374_cur."!cursor_debug"("NEXT", "prefix:sym<!>")
  debug_993:
  rx1374_fail:
    (rx1374_rep, rx1374_pos, $I10, $P10) = rx1374_cur."!mark_fail"(0)
    lt rx1374_pos, -1, rx1374_done
    eq rx1374_pos, -1, rx1374_fail
    jump $I10
  rx1374_done:
    rx1374_cur."!cursor_fail"()
    if_null rx1374_debug, debug_994
    rx1374_cur."!cursor_debug"("FAIL", "prefix:sym<!>")
  debug_994:
    .return (rx1374_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<!>"  :nsentry("!PREFIX__prefix:sym<!>") :subid("302_1299591493.348") :method
.annotate 'line', 4
    $P1376 = self."!PREFIX__!subrule"("O", "!")
    new $P1377, "ResizablePMCArray"
    push $P1377, $P1376
    .return ($P1377)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<|>"  :subid("303_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1381_tgt
    .local int rx1381_pos
    .local int rx1381_off
    .local int rx1381_eos
    .local int rx1381_rep
    .local pmc rx1381_cur
    .local pmc rx1381_debug
    (rx1381_cur, rx1381_pos, rx1381_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1381_cur
    .local pmc match
    .lex "$/", match
    length rx1381_eos, rx1381_tgt
    gt rx1381_pos, rx1381_eos, rx1381_done
    set rx1381_off, 0
    lt rx1381_pos, 2, rx1381_start
    sub rx1381_off, rx1381_pos, 1
    substr rx1381_tgt, rx1381_tgt, rx1381_off
  rx1381_start:
    eq $I10, 1, rx1381_restart
    if_null rx1381_debug, debug_995
    rx1381_cur."!cursor_debug"("START", "prefix:sym<|>")
  debug_995:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1385_done
    goto rxscan1385_scan
  rxscan1385_loop:
    (rx1381_pos) = rx1381_cur."from"()
    inc rx1381_pos
    rx1381_cur."!cursor_from"(rx1381_pos)
    ge rx1381_pos, rx1381_eos, rxscan1385_done
  rxscan1385_scan:
    set_addr $I10, rxscan1385_loop
    rx1381_cur."!mark_push"(0, rx1381_pos, $I10)
  rxscan1385_done:
.annotate 'line', 624
  # rx subcapture "sym"
    set_addr $I10, rxcap_1386_fail
    rx1381_cur."!mark_push"(0, rx1381_pos, $I10)
  # rx literal  "|"
    add $I11, rx1381_pos, 1
    gt $I11, rx1381_eos, rx1381_fail
    sub $I11, rx1381_pos, rx1381_off
    ord $I11, rx1381_tgt, $I11
    ne $I11, 124, rx1381_fail
    add rx1381_pos, 1
    set_addr $I10, rxcap_1386_fail
    ($I12, $I11) = rx1381_cur."!mark_peek"($I10)
    rx1381_cur."!cursor_pos"($I11)
    ($P10) = rx1381_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1381_pos, "")
    rx1381_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1386_done
  rxcap_1386_fail:
    goto rx1381_fail
  rxcap_1386_done:
  # rx subrule "O" subtype=capture negate=
    rx1381_cur."!cursor_pos"(rx1381_pos)
    $P10 = rx1381_cur."O"("%symbolic_unary")
    unless $P10, rx1381_fail
    rx1381_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1381_pos = $P10."pos"()
  # rx pass
    rx1381_cur."!cursor_pass"(rx1381_pos, "prefix:sym<|>")
    if_null rx1381_debug, debug_996
    rx1381_cur."!cursor_debug"("PASS", "prefix:sym<|>", " at pos=", rx1381_pos)
  debug_996:
    .return (rx1381_cur)
  rx1381_restart:
.annotate 'line', 4
    if_null rx1381_debug, debug_997
    rx1381_cur."!cursor_debug"("NEXT", "prefix:sym<|>")
  debug_997:
  rx1381_fail:
    (rx1381_rep, rx1381_pos, $I10, $P10) = rx1381_cur."!mark_fail"(0)
    lt rx1381_pos, -1, rx1381_done
    eq rx1381_pos, -1, rx1381_fail
    jump $I10
  rx1381_done:
    rx1381_cur."!cursor_fail"()
    if_null rx1381_debug, debug_998
    rx1381_cur."!cursor_debug"("FAIL", "prefix:sym<|>")
  debug_998:
    .return (rx1381_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<|>"  :nsentry("!PREFIX__prefix:sym<|>") :subid("304_1299591493.348") :method
.annotate 'line', 4
    $P1383 = self."!PREFIX__!subrule"("O", "|")
    new $P1384, "ResizablePMCArray"
    push $P1384, $P1383
    .return ($P1384)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<*>"  :subid("305_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1388_tgt
    .local int rx1388_pos
    .local int rx1388_off
    .local int rx1388_eos
    .local int rx1388_rep
    .local pmc rx1388_cur
    .local pmc rx1388_debug
    (rx1388_cur, rx1388_pos, rx1388_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1388_cur
    .local pmc match
    .lex "$/", match
    length rx1388_eos, rx1388_tgt
    gt rx1388_pos, rx1388_eos, rx1388_done
    set rx1388_off, 0
    lt rx1388_pos, 2, rx1388_start
    sub rx1388_off, rx1388_pos, 1
    substr rx1388_tgt, rx1388_tgt, rx1388_off
  rx1388_start:
    eq $I10, 1, rx1388_restart
    if_null rx1388_debug, debug_999
    rx1388_cur."!cursor_debug"("START", "infix:sym<*>")
  debug_999:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1392_done
    goto rxscan1392_scan
  rxscan1392_loop:
    (rx1388_pos) = rx1388_cur."from"()
    inc rx1388_pos
    rx1388_cur."!cursor_from"(rx1388_pos)
    ge rx1388_pos, rx1388_eos, rxscan1392_done
  rxscan1392_scan:
    set_addr $I10, rxscan1392_loop
    rx1388_cur."!mark_push"(0, rx1388_pos, $I10)
  rxscan1392_done:
.annotate 'line', 626
  # rx subcapture "sym"
    set_addr $I10, rxcap_1393_fail
    rx1388_cur."!mark_push"(0, rx1388_pos, $I10)
  # rx literal  "*"
    add $I11, rx1388_pos, 1
    gt $I11, rx1388_eos, rx1388_fail
    sub $I11, rx1388_pos, rx1388_off
    ord $I11, rx1388_tgt, $I11
    ne $I11, 42, rx1388_fail
    add rx1388_pos, 1
    set_addr $I10, rxcap_1393_fail
    ($I12, $I11) = rx1388_cur."!mark_peek"($I10)
    rx1388_cur."!cursor_pos"($I11)
    ($P10) = rx1388_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1388_pos, "")
    rx1388_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1393_done
  rxcap_1393_fail:
    goto rx1388_fail
  rxcap_1393_done:
  # rx subrule "O" subtype=capture negate=
    rx1388_cur."!cursor_pos"(rx1388_pos)
    $P10 = rx1388_cur."O"("%multiplicative, :pirop<mul>")
    unless $P10, rx1388_fail
    rx1388_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1388_pos = $P10."pos"()
  # rx pass
    rx1388_cur."!cursor_pass"(rx1388_pos, "infix:sym<*>")
    if_null rx1388_debug, debug_1000
    rx1388_cur."!cursor_debug"("PASS", "infix:sym<*>", " at pos=", rx1388_pos)
  debug_1000:
    .return (rx1388_cur)
  rx1388_restart:
.annotate 'line', 4
    if_null rx1388_debug, debug_1001
    rx1388_cur."!cursor_debug"("NEXT", "infix:sym<*>")
  debug_1001:
  rx1388_fail:
    (rx1388_rep, rx1388_pos, $I10, $P10) = rx1388_cur."!mark_fail"(0)
    lt rx1388_pos, -1, rx1388_done
    eq rx1388_pos, -1, rx1388_fail
    jump $I10
  rx1388_done:
    rx1388_cur."!cursor_fail"()
    if_null rx1388_debug, debug_1002
    rx1388_cur."!cursor_debug"("FAIL", "infix:sym<*>")
  debug_1002:
    .return (rx1388_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<*>"  :nsentry("!PREFIX__infix:sym<*>") :subid("306_1299591493.348") :method
.annotate 'line', 4
    $P1390 = self."!PREFIX__!subrule"("O", "*")
    new $P1391, "ResizablePMCArray"
    push $P1391, $P1390
    .return ($P1391)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym</>"  :subid("307_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1395_tgt
    .local int rx1395_pos
    .local int rx1395_off
    .local int rx1395_eos
    .local int rx1395_rep
    .local pmc rx1395_cur
    .local pmc rx1395_debug
    (rx1395_cur, rx1395_pos, rx1395_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1395_cur
    .local pmc match
    .lex "$/", match
    length rx1395_eos, rx1395_tgt
    gt rx1395_pos, rx1395_eos, rx1395_done
    set rx1395_off, 0
    lt rx1395_pos, 2, rx1395_start
    sub rx1395_off, rx1395_pos, 1
    substr rx1395_tgt, rx1395_tgt, rx1395_off
  rx1395_start:
    eq $I10, 1, rx1395_restart
    if_null rx1395_debug, debug_1003
    rx1395_cur."!cursor_debug"("START", "infix:sym</>")
  debug_1003:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1399_done
    goto rxscan1399_scan
  rxscan1399_loop:
    (rx1395_pos) = rx1395_cur."from"()
    inc rx1395_pos
    rx1395_cur."!cursor_from"(rx1395_pos)
    ge rx1395_pos, rx1395_eos, rxscan1399_done
  rxscan1399_scan:
    set_addr $I10, rxscan1399_loop
    rx1395_cur."!mark_push"(0, rx1395_pos, $I10)
  rxscan1399_done:
.annotate 'line', 627
  # rx subcapture "sym"
    set_addr $I10, rxcap_1400_fail
    rx1395_cur."!mark_push"(0, rx1395_pos, $I10)
  # rx literal  "/"
    add $I11, rx1395_pos, 1
    gt $I11, rx1395_eos, rx1395_fail
    sub $I11, rx1395_pos, rx1395_off
    ord $I11, rx1395_tgt, $I11
    ne $I11, 47, rx1395_fail
    add rx1395_pos, 1
    set_addr $I10, rxcap_1400_fail
    ($I12, $I11) = rx1395_cur."!mark_peek"($I10)
    rx1395_cur."!cursor_pos"($I11)
    ($P10) = rx1395_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1395_pos, "")
    rx1395_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1400_done
  rxcap_1400_fail:
    goto rx1395_fail
  rxcap_1400_done:
  # rx subrule "O" subtype=capture negate=
    rx1395_cur."!cursor_pos"(rx1395_pos)
    $P10 = rx1395_cur."O"("%multiplicative, :pirop<div>")
    unless $P10, rx1395_fail
    rx1395_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1395_pos = $P10."pos"()
  # rx pass
    rx1395_cur."!cursor_pass"(rx1395_pos, "infix:sym</>")
    if_null rx1395_debug, debug_1004
    rx1395_cur."!cursor_debug"("PASS", "infix:sym</>", " at pos=", rx1395_pos)
  debug_1004:
    .return (rx1395_cur)
  rx1395_restart:
.annotate 'line', 4
    if_null rx1395_debug, debug_1005
    rx1395_cur."!cursor_debug"("NEXT", "infix:sym</>")
  debug_1005:
  rx1395_fail:
    (rx1395_rep, rx1395_pos, $I10, $P10) = rx1395_cur."!mark_fail"(0)
    lt rx1395_pos, -1, rx1395_done
    eq rx1395_pos, -1, rx1395_fail
    jump $I10
  rx1395_done:
    rx1395_cur."!cursor_fail"()
    if_null rx1395_debug, debug_1006
    rx1395_cur."!cursor_debug"("FAIL", "infix:sym</>")
  debug_1006:
    .return (rx1395_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym</>"  :nsentry("!PREFIX__infix:sym</>") :subid("308_1299591493.348") :method
.annotate 'line', 4
    $P1397 = self."!PREFIX__!subrule"("O", "/")
    new $P1398, "ResizablePMCArray"
    push $P1398, $P1397
    .return ($P1398)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<%>"  :subid("309_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1402_tgt
    .local int rx1402_pos
    .local int rx1402_off
    .local int rx1402_eos
    .local int rx1402_rep
    .local pmc rx1402_cur
    .local pmc rx1402_debug
    (rx1402_cur, rx1402_pos, rx1402_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1402_cur
    .local pmc match
    .lex "$/", match
    length rx1402_eos, rx1402_tgt
    gt rx1402_pos, rx1402_eos, rx1402_done
    set rx1402_off, 0
    lt rx1402_pos, 2, rx1402_start
    sub rx1402_off, rx1402_pos, 1
    substr rx1402_tgt, rx1402_tgt, rx1402_off
  rx1402_start:
    eq $I10, 1, rx1402_restart
    if_null rx1402_debug, debug_1007
    rx1402_cur."!cursor_debug"("START", "infix:sym<%>")
  debug_1007:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1406_done
    goto rxscan1406_scan
  rxscan1406_loop:
    (rx1402_pos) = rx1402_cur."from"()
    inc rx1402_pos
    rx1402_cur."!cursor_from"(rx1402_pos)
    ge rx1402_pos, rx1402_eos, rxscan1406_done
  rxscan1406_scan:
    set_addr $I10, rxscan1406_loop
    rx1402_cur."!mark_push"(0, rx1402_pos, $I10)
  rxscan1406_done:
.annotate 'line', 628
  # rx subcapture "sym"
    set_addr $I10, rxcap_1407_fail
    rx1402_cur."!mark_push"(0, rx1402_pos, $I10)
  # rx literal  "%"
    add $I11, rx1402_pos, 1
    gt $I11, rx1402_eos, rx1402_fail
    sub $I11, rx1402_pos, rx1402_off
    ord $I11, rx1402_tgt, $I11
    ne $I11, 37, rx1402_fail
    add rx1402_pos, 1
    set_addr $I10, rxcap_1407_fail
    ($I12, $I11) = rx1402_cur."!mark_peek"($I10)
    rx1402_cur."!cursor_pos"($I11)
    ($P10) = rx1402_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1402_pos, "")
    rx1402_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1407_done
  rxcap_1407_fail:
    goto rx1402_fail
  rxcap_1407_done:
  # rx subrule "O" subtype=capture negate=
    rx1402_cur."!cursor_pos"(rx1402_pos)
    $P10 = rx1402_cur."O"("%multiplicative, :pirop<mod>")
    unless $P10, rx1402_fail
    rx1402_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1402_pos = $P10."pos"()
  # rx pass
    rx1402_cur."!cursor_pass"(rx1402_pos, "infix:sym<%>")
    if_null rx1402_debug, debug_1008
    rx1402_cur."!cursor_debug"("PASS", "infix:sym<%>", " at pos=", rx1402_pos)
  debug_1008:
    .return (rx1402_cur)
  rx1402_restart:
.annotate 'line', 4
    if_null rx1402_debug, debug_1009
    rx1402_cur."!cursor_debug"("NEXT", "infix:sym<%>")
  debug_1009:
  rx1402_fail:
    (rx1402_rep, rx1402_pos, $I10, $P10) = rx1402_cur."!mark_fail"(0)
    lt rx1402_pos, -1, rx1402_done
    eq rx1402_pos, -1, rx1402_fail
    jump $I10
  rx1402_done:
    rx1402_cur."!cursor_fail"()
    if_null rx1402_debug, debug_1010
    rx1402_cur."!cursor_debug"("FAIL", "infix:sym<%>")
  debug_1010:
    .return (rx1402_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<%>"  :nsentry("!PREFIX__infix:sym<%>") :subid("310_1299591493.348") :method
.annotate 'line', 4
    $P1404 = self."!PREFIX__!subrule"("O", "%")
    new $P1405, "ResizablePMCArray"
    push $P1405, $P1404
    .return ($P1405)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+&>"  :subid("311_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1409_tgt
    .local int rx1409_pos
    .local int rx1409_off
    .local int rx1409_eos
    .local int rx1409_rep
    .local pmc rx1409_cur
    .local pmc rx1409_debug
    (rx1409_cur, rx1409_pos, rx1409_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1409_cur
    .local pmc match
    .lex "$/", match
    length rx1409_eos, rx1409_tgt
    gt rx1409_pos, rx1409_eos, rx1409_done
    set rx1409_off, 0
    lt rx1409_pos, 2, rx1409_start
    sub rx1409_off, rx1409_pos, 1
    substr rx1409_tgt, rx1409_tgt, rx1409_off
  rx1409_start:
    eq $I10, 1, rx1409_restart
    if_null rx1409_debug, debug_1011
    rx1409_cur."!cursor_debug"("START", "infix:sym<+&>")
  debug_1011:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1413_done
    goto rxscan1413_scan
  rxscan1413_loop:
    (rx1409_pos) = rx1409_cur."from"()
    inc rx1409_pos
    rx1409_cur."!cursor_from"(rx1409_pos)
    ge rx1409_pos, rx1409_eos, rxscan1413_done
  rxscan1413_scan:
    set_addr $I10, rxscan1413_loop
    rx1409_cur."!mark_push"(0, rx1409_pos, $I10)
  rxscan1413_done:
.annotate 'line', 629
  # rx subcapture "sym"
    set_addr $I10, rxcap_1414_fail
    rx1409_cur."!mark_push"(0, rx1409_pos, $I10)
  # rx literal  "+&"
    add $I11, rx1409_pos, 2
    gt $I11, rx1409_eos, rx1409_fail
    sub $I11, rx1409_pos, rx1409_off
    substr $S10, rx1409_tgt, $I11, 2
    ne $S10, "+&", rx1409_fail
    add rx1409_pos, 2
    set_addr $I10, rxcap_1414_fail
    ($I12, $I11) = rx1409_cur."!mark_peek"($I10)
    rx1409_cur."!cursor_pos"($I11)
    ($P10) = rx1409_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1409_pos, "")
    rx1409_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1414_done
  rxcap_1414_fail:
    goto rx1409_fail
  rxcap_1414_done:
  # rx subrule "O" subtype=capture negate=
    rx1409_cur."!cursor_pos"(rx1409_pos)
    $P10 = rx1409_cur."O"("%multiplicative, :pirop<band III>")
    unless $P10, rx1409_fail
    rx1409_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1409_pos = $P10."pos"()
  # rx pass
    rx1409_cur."!cursor_pass"(rx1409_pos, "infix:sym<+&>")
    if_null rx1409_debug, debug_1012
    rx1409_cur."!cursor_debug"("PASS", "infix:sym<+&>", " at pos=", rx1409_pos)
  debug_1012:
    .return (rx1409_cur)
  rx1409_restart:
.annotate 'line', 4
    if_null rx1409_debug, debug_1013
    rx1409_cur."!cursor_debug"("NEXT", "infix:sym<+&>")
  debug_1013:
  rx1409_fail:
    (rx1409_rep, rx1409_pos, $I10, $P10) = rx1409_cur."!mark_fail"(0)
    lt rx1409_pos, -1, rx1409_done
    eq rx1409_pos, -1, rx1409_fail
    jump $I10
  rx1409_done:
    rx1409_cur."!cursor_fail"()
    if_null rx1409_debug, debug_1014
    rx1409_cur."!cursor_debug"("FAIL", "infix:sym<+&>")
  debug_1014:
    .return (rx1409_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<+&>"  :nsentry("!PREFIX__infix:sym<+&>") :subid("312_1299591493.348") :method
.annotate 'line', 4
    $P1411 = self."!PREFIX__!subrule"("O", "+&")
    new $P1412, "ResizablePMCArray"
    push $P1412, $P1411
    .return ($P1412)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+>"  :subid("313_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1416_tgt
    .local int rx1416_pos
    .local int rx1416_off
    .local int rx1416_eos
    .local int rx1416_rep
    .local pmc rx1416_cur
    .local pmc rx1416_debug
    (rx1416_cur, rx1416_pos, rx1416_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1416_cur
    .local pmc match
    .lex "$/", match
    length rx1416_eos, rx1416_tgt
    gt rx1416_pos, rx1416_eos, rx1416_done
    set rx1416_off, 0
    lt rx1416_pos, 2, rx1416_start
    sub rx1416_off, rx1416_pos, 1
    substr rx1416_tgt, rx1416_tgt, rx1416_off
  rx1416_start:
    eq $I10, 1, rx1416_restart
    if_null rx1416_debug, debug_1015
    rx1416_cur."!cursor_debug"("START", "infix:sym<+>")
  debug_1015:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1420_done
    goto rxscan1420_scan
  rxscan1420_loop:
    (rx1416_pos) = rx1416_cur."from"()
    inc rx1416_pos
    rx1416_cur."!cursor_from"(rx1416_pos)
    ge rx1416_pos, rx1416_eos, rxscan1420_done
  rxscan1420_scan:
    set_addr $I10, rxscan1420_loop
    rx1416_cur."!mark_push"(0, rx1416_pos, $I10)
  rxscan1420_done:
.annotate 'line', 631
  # rx subcapture "sym"
    set_addr $I10, rxcap_1421_fail
    rx1416_cur."!mark_push"(0, rx1416_pos, $I10)
  # rx literal  "+"
    add $I11, rx1416_pos, 1
    gt $I11, rx1416_eos, rx1416_fail
    sub $I11, rx1416_pos, rx1416_off
    ord $I11, rx1416_tgt, $I11
    ne $I11, 43, rx1416_fail
    add rx1416_pos, 1
    set_addr $I10, rxcap_1421_fail
    ($I12, $I11) = rx1416_cur."!mark_peek"($I10)
    rx1416_cur."!cursor_pos"($I11)
    ($P10) = rx1416_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1416_pos, "")
    rx1416_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1421_done
  rxcap_1421_fail:
    goto rx1416_fail
  rxcap_1421_done:
  # rx subrule "O" subtype=capture negate=
    rx1416_cur."!cursor_pos"(rx1416_pos)
    $P10 = rx1416_cur."O"("%additive, :pirop<add>")
    unless $P10, rx1416_fail
    rx1416_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1416_pos = $P10."pos"()
  # rx pass
    rx1416_cur."!cursor_pass"(rx1416_pos, "infix:sym<+>")
    if_null rx1416_debug, debug_1016
    rx1416_cur."!cursor_debug"("PASS", "infix:sym<+>", " at pos=", rx1416_pos)
  debug_1016:
    .return (rx1416_cur)
  rx1416_restart:
.annotate 'line', 4
    if_null rx1416_debug, debug_1017
    rx1416_cur."!cursor_debug"("NEXT", "infix:sym<+>")
  debug_1017:
  rx1416_fail:
    (rx1416_rep, rx1416_pos, $I10, $P10) = rx1416_cur."!mark_fail"(0)
    lt rx1416_pos, -1, rx1416_done
    eq rx1416_pos, -1, rx1416_fail
    jump $I10
  rx1416_done:
    rx1416_cur."!cursor_fail"()
    if_null rx1416_debug, debug_1018
    rx1416_cur."!cursor_debug"("FAIL", "infix:sym<+>")
  debug_1018:
    .return (rx1416_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<+>"  :nsentry("!PREFIX__infix:sym<+>") :subid("314_1299591493.348") :method
.annotate 'line', 4
    $P1418 = self."!PREFIX__!subrule"("O", "+")
    new $P1419, "ResizablePMCArray"
    push $P1419, $P1418
    .return ($P1419)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<->"  :subid("315_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1423_tgt
    .local int rx1423_pos
    .local int rx1423_off
    .local int rx1423_eos
    .local int rx1423_rep
    .local pmc rx1423_cur
    .local pmc rx1423_debug
    (rx1423_cur, rx1423_pos, rx1423_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1423_cur
    .local pmc match
    .lex "$/", match
    length rx1423_eos, rx1423_tgt
    gt rx1423_pos, rx1423_eos, rx1423_done
    set rx1423_off, 0
    lt rx1423_pos, 2, rx1423_start
    sub rx1423_off, rx1423_pos, 1
    substr rx1423_tgt, rx1423_tgt, rx1423_off
  rx1423_start:
    eq $I10, 1, rx1423_restart
    if_null rx1423_debug, debug_1019
    rx1423_cur."!cursor_debug"("START", "infix:sym<->")
  debug_1019:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1427_done
    goto rxscan1427_scan
  rxscan1427_loop:
    (rx1423_pos) = rx1423_cur."from"()
    inc rx1423_pos
    rx1423_cur."!cursor_from"(rx1423_pos)
    ge rx1423_pos, rx1423_eos, rxscan1427_done
  rxscan1427_scan:
    set_addr $I10, rxscan1427_loop
    rx1423_cur."!mark_push"(0, rx1423_pos, $I10)
  rxscan1427_done:
.annotate 'line', 632
  # rx subcapture "sym"
    set_addr $I10, rxcap_1428_fail
    rx1423_cur."!mark_push"(0, rx1423_pos, $I10)
  # rx literal  "-"
    add $I11, rx1423_pos, 1
    gt $I11, rx1423_eos, rx1423_fail
    sub $I11, rx1423_pos, rx1423_off
    ord $I11, rx1423_tgt, $I11
    ne $I11, 45, rx1423_fail
    add rx1423_pos, 1
    set_addr $I10, rxcap_1428_fail
    ($I12, $I11) = rx1423_cur."!mark_peek"($I10)
    rx1423_cur."!cursor_pos"($I11)
    ($P10) = rx1423_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1423_pos, "")
    rx1423_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1428_done
  rxcap_1428_fail:
    goto rx1423_fail
  rxcap_1428_done:
  # rx subrule "O" subtype=capture negate=
    rx1423_cur."!cursor_pos"(rx1423_pos)
    $P10 = rx1423_cur."O"("%additive, :pirop<sub>")
    unless $P10, rx1423_fail
    rx1423_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1423_pos = $P10."pos"()
  # rx pass
    rx1423_cur."!cursor_pass"(rx1423_pos, "infix:sym<->")
    if_null rx1423_debug, debug_1020
    rx1423_cur."!cursor_debug"("PASS", "infix:sym<->", " at pos=", rx1423_pos)
  debug_1020:
    .return (rx1423_cur)
  rx1423_restart:
.annotate 'line', 4
    if_null rx1423_debug, debug_1021
    rx1423_cur."!cursor_debug"("NEXT", "infix:sym<->")
  debug_1021:
  rx1423_fail:
    (rx1423_rep, rx1423_pos, $I10, $P10) = rx1423_cur."!mark_fail"(0)
    lt rx1423_pos, -1, rx1423_done
    eq rx1423_pos, -1, rx1423_fail
    jump $I10
  rx1423_done:
    rx1423_cur."!cursor_fail"()
    if_null rx1423_debug, debug_1022
    rx1423_cur."!cursor_debug"("FAIL", "infix:sym<->")
  debug_1022:
    .return (rx1423_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<->"  :nsentry("!PREFIX__infix:sym<->") :subid("316_1299591493.348") :method
.annotate 'line', 4
    $P1425 = self."!PREFIX__!subrule"("O", "-")
    new $P1426, "ResizablePMCArray"
    push $P1426, $P1425
    .return ($P1426)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+|>"  :subid("317_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1430_tgt
    .local int rx1430_pos
    .local int rx1430_off
    .local int rx1430_eos
    .local int rx1430_rep
    .local pmc rx1430_cur
    .local pmc rx1430_debug
    (rx1430_cur, rx1430_pos, rx1430_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1430_cur
    .local pmc match
    .lex "$/", match
    length rx1430_eos, rx1430_tgt
    gt rx1430_pos, rx1430_eos, rx1430_done
    set rx1430_off, 0
    lt rx1430_pos, 2, rx1430_start
    sub rx1430_off, rx1430_pos, 1
    substr rx1430_tgt, rx1430_tgt, rx1430_off
  rx1430_start:
    eq $I10, 1, rx1430_restart
    if_null rx1430_debug, debug_1023
    rx1430_cur."!cursor_debug"("START", "infix:sym<+|>")
  debug_1023:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1434_done
    goto rxscan1434_scan
  rxscan1434_loop:
    (rx1430_pos) = rx1430_cur."from"()
    inc rx1430_pos
    rx1430_cur."!cursor_from"(rx1430_pos)
    ge rx1430_pos, rx1430_eos, rxscan1434_done
  rxscan1434_scan:
    set_addr $I10, rxscan1434_loop
    rx1430_cur."!mark_push"(0, rx1430_pos, $I10)
  rxscan1434_done:
.annotate 'line', 633
  # rx subcapture "sym"
    set_addr $I10, rxcap_1435_fail
    rx1430_cur."!mark_push"(0, rx1430_pos, $I10)
  # rx literal  "+|"
    add $I11, rx1430_pos, 2
    gt $I11, rx1430_eos, rx1430_fail
    sub $I11, rx1430_pos, rx1430_off
    substr $S10, rx1430_tgt, $I11, 2
    ne $S10, "+|", rx1430_fail
    add rx1430_pos, 2
    set_addr $I10, rxcap_1435_fail
    ($I12, $I11) = rx1430_cur."!mark_peek"($I10)
    rx1430_cur."!cursor_pos"($I11)
    ($P10) = rx1430_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1430_pos, "")
    rx1430_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1435_done
  rxcap_1435_fail:
    goto rx1430_fail
  rxcap_1435_done:
  # rx subrule "O" subtype=capture negate=
    rx1430_cur."!cursor_pos"(rx1430_pos)
    $P10 = rx1430_cur."O"("%additive, :pirop<bor III>")
    unless $P10, rx1430_fail
    rx1430_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1430_pos = $P10."pos"()
  # rx pass
    rx1430_cur."!cursor_pass"(rx1430_pos, "infix:sym<+|>")
    if_null rx1430_debug, debug_1024
    rx1430_cur."!cursor_debug"("PASS", "infix:sym<+|>", " at pos=", rx1430_pos)
  debug_1024:
    .return (rx1430_cur)
  rx1430_restart:
.annotate 'line', 4
    if_null rx1430_debug, debug_1025
    rx1430_cur."!cursor_debug"("NEXT", "infix:sym<+|>")
  debug_1025:
  rx1430_fail:
    (rx1430_rep, rx1430_pos, $I10, $P10) = rx1430_cur."!mark_fail"(0)
    lt rx1430_pos, -1, rx1430_done
    eq rx1430_pos, -1, rx1430_fail
    jump $I10
  rx1430_done:
    rx1430_cur."!cursor_fail"()
    if_null rx1430_debug, debug_1026
    rx1430_cur."!cursor_debug"("FAIL", "infix:sym<+|>")
  debug_1026:
    .return (rx1430_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<+|>"  :nsentry("!PREFIX__infix:sym<+|>") :subid("318_1299591493.348") :method
.annotate 'line', 4
    $P1432 = self."!PREFIX__!subrule"("O", "+|")
    new $P1433, "ResizablePMCArray"
    push $P1433, $P1432
    .return ($P1433)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+^>"  :subid("319_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1437_tgt
    .local int rx1437_pos
    .local int rx1437_off
    .local int rx1437_eos
    .local int rx1437_rep
    .local pmc rx1437_cur
    .local pmc rx1437_debug
    (rx1437_cur, rx1437_pos, rx1437_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1437_cur
    .local pmc match
    .lex "$/", match
    length rx1437_eos, rx1437_tgt
    gt rx1437_pos, rx1437_eos, rx1437_done
    set rx1437_off, 0
    lt rx1437_pos, 2, rx1437_start
    sub rx1437_off, rx1437_pos, 1
    substr rx1437_tgt, rx1437_tgt, rx1437_off
  rx1437_start:
    eq $I10, 1, rx1437_restart
    if_null rx1437_debug, debug_1027
    rx1437_cur."!cursor_debug"("START", "infix:sym<+^>")
  debug_1027:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1441_done
    goto rxscan1441_scan
  rxscan1441_loop:
    (rx1437_pos) = rx1437_cur."from"()
    inc rx1437_pos
    rx1437_cur."!cursor_from"(rx1437_pos)
    ge rx1437_pos, rx1437_eos, rxscan1441_done
  rxscan1441_scan:
    set_addr $I10, rxscan1441_loop
    rx1437_cur."!mark_push"(0, rx1437_pos, $I10)
  rxscan1441_done:
.annotate 'line', 634
  # rx subcapture "sym"
    set_addr $I10, rxcap_1442_fail
    rx1437_cur."!mark_push"(0, rx1437_pos, $I10)
  # rx literal  "+^"
    add $I11, rx1437_pos, 2
    gt $I11, rx1437_eos, rx1437_fail
    sub $I11, rx1437_pos, rx1437_off
    substr $S10, rx1437_tgt, $I11, 2
    ne $S10, "+^", rx1437_fail
    add rx1437_pos, 2
    set_addr $I10, rxcap_1442_fail
    ($I12, $I11) = rx1437_cur."!mark_peek"($I10)
    rx1437_cur."!cursor_pos"($I11)
    ($P10) = rx1437_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1437_pos, "")
    rx1437_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1442_done
  rxcap_1442_fail:
    goto rx1437_fail
  rxcap_1442_done:
  # rx subrule "O" subtype=capture negate=
    rx1437_cur."!cursor_pos"(rx1437_pos)
    $P10 = rx1437_cur."O"("%additive, :pirop<bxor III>")
    unless $P10, rx1437_fail
    rx1437_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1437_pos = $P10."pos"()
  # rx pass
    rx1437_cur."!cursor_pass"(rx1437_pos, "infix:sym<+^>")
    if_null rx1437_debug, debug_1028
    rx1437_cur."!cursor_debug"("PASS", "infix:sym<+^>", " at pos=", rx1437_pos)
  debug_1028:
    .return (rx1437_cur)
  rx1437_restart:
.annotate 'line', 4
    if_null rx1437_debug, debug_1029
    rx1437_cur."!cursor_debug"("NEXT", "infix:sym<+^>")
  debug_1029:
  rx1437_fail:
    (rx1437_rep, rx1437_pos, $I10, $P10) = rx1437_cur."!mark_fail"(0)
    lt rx1437_pos, -1, rx1437_done
    eq rx1437_pos, -1, rx1437_fail
    jump $I10
  rx1437_done:
    rx1437_cur."!cursor_fail"()
    if_null rx1437_debug, debug_1030
    rx1437_cur."!cursor_debug"("FAIL", "infix:sym<+^>")
  debug_1030:
    .return (rx1437_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<+^>"  :nsentry("!PREFIX__infix:sym<+^>") :subid("320_1299591493.348") :method
.annotate 'line', 4
    $P1439 = self."!PREFIX__!subrule"("O", "+^")
    new $P1440, "ResizablePMCArray"
    push $P1440, $P1439
    .return ($P1440)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<~>"  :subid("321_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1444_tgt
    .local int rx1444_pos
    .local int rx1444_off
    .local int rx1444_eos
    .local int rx1444_rep
    .local pmc rx1444_cur
    .local pmc rx1444_debug
    (rx1444_cur, rx1444_pos, rx1444_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1444_cur
    .local pmc match
    .lex "$/", match
    length rx1444_eos, rx1444_tgt
    gt rx1444_pos, rx1444_eos, rx1444_done
    set rx1444_off, 0
    lt rx1444_pos, 2, rx1444_start
    sub rx1444_off, rx1444_pos, 1
    substr rx1444_tgt, rx1444_tgt, rx1444_off
  rx1444_start:
    eq $I10, 1, rx1444_restart
    if_null rx1444_debug, debug_1031
    rx1444_cur."!cursor_debug"("START", "infix:sym<~>")
  debug_1031:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1448_done
    goto rxscan1448_scan
  rxscan1448_loop:
    (rx1444_pos) = rx1444_cur."from"()
    inc rx1444_pos
    rx1444_cur."!cursor_from"(rx1444_pos)
    ge rx1444_pos, rx1444_eos, rxscan1448_done
  rxscan1448_scan:
    set_addr $I10, rxscan1448_loop
    rx1444_cur."!mark_push"(0, rx1444_pos, $I10)
  rxscan1448_done:
.annotate 'line', 636
  # rx subcapture "sym"
    set_addr $I10, rxcap_1449_fail
    rx1444_cur."!mark_push"(0, rx1444_pos, $I10)
  # rx literal  "~"
    add $I11, rx1444_pos, 1
    gt $I11, rx1444_eos, rx1444_fail
    sub $I11, rx1444_pos, rx1444_off
    ord $I11, rx1444_tgt, $I11
    ne $I11, 126, rx1444_fail
    add rx1444_pos, 1
    set_addr $I10, rxcap_1449_fail
    ($I12, $I11) = rx1444_cur."!mark_peek"($I10)
    rx1444_cur."!cursor_pos"($I11)
    ($P10) = rx1444_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1444_pos, "")
    rx1444_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1449_done
  rxcap_1449_fail:
    goto rx1444_fail
  rxcap_1449_done:
  # rx subrule "O" subtype=capture negate=
    rx1444_cur."!cursor_pos"(rx1444_pos)
    $P10 = rx1444_cur."O"("%concatenation , :pirop<concat>")
    unless $P10, rx1444_fail
    rx1444_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1444_pos = $P10."pos"()
  # rx pass
    rx1444_cur."!cursor_pass"(rx1444_pos, "infix:sym<~>")
    if_null rx1444_debug, debug_1032
    rx1444_cur."!cursor_debug"("PASS", "infix:sym<~>", " at pos=", rx1444_pos)
  debug_1032:
    .return (rx1444_cur)
  rx1444_restart:
.annotate 'line', 4
    if_null rx1444_debug, debug_1033
    rx1444_cur."!cursor_debug"("NEXT", "infix:sym<~>")
  debug_1033:
  rx1444_fail:
    (rx1444_rep, rx1444_pos, $I10, $P10) = rx1444_cur."!mark_fail"(0)
    lt rx1444_pos, -1, rx1444_done
    eq rx1444_pos, -1, rx1444_fail
    jump $I10
  rx1444_done:
    rx1444_cur."!cursor_fail"()
    if_null rx1444_debug, debug_1034
    rx1444_cur."!cursor_debug"("FAIL", "infix:sym<~>")
  debug_1034:
    .return (rx1444_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<~>"  :nsentry("!PREFIX__infix:sym<~>") :subid("322_1299591493.348") :method
.annotate 'line', 4
    $P1446 = self."!PREFIX__!subrule"("O", "~")
    new $P1447, "ResizablePMCArray"
    push $P1447, $P1446
    .return ($P1447)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<==>"  :subid("323_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1451_tgt
    .local int rx1451_pos
    .local int rx1451_off
    .local int rx1451_eos
    .local int rx1451_rep
    .local pmc rx1451_cur
    .local pmc rx1451_debug
    (rx1451_cur, rx1451_pos, rx1451_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1451_cur
    .local pmc match
    .lex "$/", match
    length rx1451_eos, rx1451_tgt
    gt rx1451_pos, rx1451_eos, rx1451_done
    set rx1451_off, 0
    lt rx1451_pos, 2, rx1451_start
    sub rx1451_off, rx1451_pos, 1
    substr rx1451_tgt, rx1451_tgt, rx1451_off
  rx1451_start:
    eq $I10, 1, rx1451_restart
    if_null rx1451_debug, debug_1035
    rx1451_cur."!cursor_debug"("START", "infix:sym<==>")
  debug_1035:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1455_done
    goto rxscan1455_scan
  rxscan1455_loop:
    (rx1451_pos) = rx1451_cur."from"()
    inc rx1451_pos
    rx1451_cur."!cursor_from"(rx1451_pos)
    ge rx1451_pos, rx1451_eos, rxscan1455_done
  rxscan1455_scan:
    set_addr $I10, rxscan1455_loop
    rx1451_cur."!mark_push"(0, rx1451_pos, $I10)
  rxscan1455_done:
.annotate 'line', 638
  # rx subcapture "sym"
    set_addr $I10, rxcap_1456_fail
    rx1451_cur."!mark_push"(0, rx1451_pos, $I10)
  # rx literal  "=="
    add $I11, rx1451_pos, 2
    gt $I11, rx1451_eos, rx1451_fail
    sub $I11, rx1451_pos, rx1451_off
    substr $S10, rx1451_tgt, $I11, 2
    ne $S10, "==", rx1451_fail
    add rx1451_pos, 2
    set_addr $I10, rxcap_1456_fail
    ($I12, $I11) = rx1451_cur."!mark_peek"($I10)
    rx1451_cur."!cursor_pos"($I11)
    ($P10) = rx1451_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1451_pos, "")
    rx1451_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1456_done
  rxcap_1456_fail:
    goto rx1451_fail
  rxcap_1456_done:
  # rx subrule "O" subtype=capture negate=
    rx1451_cur."!cursor_pos"(rx1451_pos)
    $P10 = rx1451_cur."O"("%relational, :pirop<iseq INn>")
    unless $P10, rx1451_fail
    rx1451_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1451_pos = $P10."pos"()
  # rx pass
    rx1451_cur."!cursor_pass"(rx1451_pos, "infix:sym<==>")
    if_null rx1451_debug, debug_1036
    rx1451_cur."!cursor_debug"("PASS", "infix:sym<==>", " at pos=", rx1451_pos)
  debug_1036:
    .return (rx1451_cur)
  rx1451_restart:
.annotate 'line', 4
    if_null rx1451_debug, debug_1037
    rx1451_cur."!cursor_debug"("NEXT", "infix:sym<==>")
  debug_1037:
  rx1451_fail:
    (rx1451_rep, rx1451_pos, $I10, $P10) = rx1451_cur."!mark_fail"(0)
    lt rx1451_pos, -1, rx1451_done
    eq rx1451_pos, -1, rx1451_fail
    jump $I10
  rx1451_done:
    rx1451_cur."!cursor_fail"()
    if_null rx1451_debug, debug_1038
    rx1451_cur."!cursor_debug"("FAIL", "infix:sym<==>")
  debug_1038:
    .return (rx1451_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<==>"  :nsentry("!PREFIX__infix:sym<==>") :subid("324_1299591493.348") :method
.annotate 'line', 4
    $P1453 = self."!PREFIX__!subrule"("O", "==")
    new $P1454, "ResizablePMCArray"
    push $P1454, $P1453
    .return ($P1454)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<!=>"  :subid("325_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1458_tgt
    .local int rx1458_pos
    .local int rx1458_off
    .local int rx1458_eos
    .local int rx1458_rep
    .local pmc rx1458_cur
    .local pmc rx1458_debug
    (rx1458_cur, rx1458_pos, rx1458_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1458_cur
    .local pmc match
    .lex "$/", match
    length rx1458_eos, rx1458_tgt
    gt rx1458_pos, rx1458_eos, rx1458_done
    set rx1458_off, 0
    lt rx1458_pos, 2, rx1458_start
    sub rx1458_off, rx1458_pos, 1
    substr rx1458_tgt, rx1458_tgt, rx1458_off
  rx1458_start:
    eq $I10, 1, rx1458_restart
    if_null rx1458_debug, debug_1039
    rx1458_cur."!cursor_debug"("START", "infix:sym<!=>")
  debug_1039:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1462_done
    goto rxscan1462_scan
  rxscan1462_loop:
    (rx1458_pos) = rx1458_cur."from"()
    inc rx1458_pos
    rx1458_cur."!cursor_from"(rx1458_pos)
    ge rx1458_pos, rx1458_eos, rxscan1462_done
  rxscan1462_scan:
    set_addr $I10, rxscan1462_loop
    rx1458_cur."!mark_push"(0, rx1458_pos, $I10)
  rxscan1462_done:
.annotate 'line', 639
  # rx subcapture "sym"
    set_addr $I10, rxcap_1463_fail
    rx1458_cur."!mark_push"(0, rx1458_pos, $I10)
  # rx literal  "!="
    add $I11, rx1458_pos, 2
    gt $I11, rx1458_eos, rx1458_fail
    sub $I11, rx1458_pos, rx1458_off
    substr $S10, rx1458_tgt, $I11, 2
    ne $S10, "!=", rx1458_fail
    add rx1458_pos, 2
    set_addr $I10, rxcap_1463_fail
    ($I12, $I11) = rx1458_cur."!mark_peek"($I10)
    rx1458_cur."!cursor_pos"($I11)
    ($P10) = rx1458_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1458_pos, "")
    rx1458_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1463_done
  rxcap_1463_fail:
    goto rx1458_fail
  rxcap_1463_done:
  # rx subrule "O" subtype=capture negate=
    rx1458_cur."!cursor_pos"(rx1458_pos)
    $P10 = rx1458_cur."O"("%relational, :pirop<isne INn>")
    unless $P10, rx1458_fail
    rx1458_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1458_pos = $P10."pos"()
  # rx pass
    rx1458_cur."!cursor_pass"(rx1458_pos, "infix:sym<!=>")
    if_null rx1458_debug, debug_1040
    rx1458_cur."!cursor_debug"("PASS", "infix:sym<!=>", " at pos=", rx1458_pos)
  debug_1040:
    .return (rx1458_cur)
  rx1458_restart:
.annotate 'line', 4
    if_null rx1458_debug, debug_1041
    rx1458_cur."!cursor_debug"("NEXT", "infix:sym<!=>")
  debug_1041:
  rx1458_fail:
    (rx1458_rep, rx1458_pos, $I10, $P10) = rx1458_cur."!mark_fail"(0)
    lt rx1458_pos, -1, rx1458_done
    eq rx1458_pos, -1, rx1458_fail
    jump $I10
  rx1458_done:
    rx1458_cur."!cursor_fail"()
    if_null rx1458_debug, debug_1042
    rx1458_cur."!cursor_debug"("FAIL", "infix:sym<!=>")
  debug_1042:
    .return (rx1458_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<!=>"  :nsentry("!PREFIX__infix:sym<!=>") :subid("326_1299591493.348") :method
.annotate 'line', 4
    $P1460 = self."!PREFIX__!subrule"("O", "!=")
    new $P1461, "ResizablePMCArray"
    push $P1461, $P1460
    .return ($P1461)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<<=>"  :subid("327_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1465_tgt
    .local int rx1465_pos
    .local int rx1465_off
    .local int rx1465_eos
    .local int rx1465_rep
    .local pmc rx1465_cur
    .local pmc rx1465_debug
    (rx1465_cur, rx1465_pos, rx1465_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1465_cur
    .local pmc match
    .lex "$/", match
    length rx1465_eos, rx1465_tgt
    gt rx1465_pos, rx1465_eos, rx1465_done
    set rx1465_off, 0
    lt rx1465_pos, 2, rx1465_start
    sub rx1465_off, rx1465_pos, 1
    substr rx1465_tgt, rx1465_tgt, rx1465_off
  rx1465_start:
    eq $I10, 1, rx1465_restart
    if_null rx1465_debug, debug_1043
    rx1465_cur."!cursor_debug"("START", "infix:sym<<=>")
  debug_1043:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1469_done
    goto rxscan1469_scan
  rxscan1469_loop:
    (rx1465_pos) = rx1465_cur."from"()
    inc rx1465_pos
    rx1465_cur."!cursor_from"(rx1465_pos)
    ge rx1465_pos, rx1465_eos, rxscan1469_done
  rxscan1469_scan:
    set_addr $I10, rxscan1469_loop
    rx1465_cur."!mark_push"(0, rx1465_pos, $I10)
  rxscan1469_done:
.annotate 'line', 640
  # rx subcapture "sym"
    set_addr $I10, rxcap_1470_fail
    rx1465_cur."!mark_push"(0, rx1465_pos, $I10)
  # rx literal  "<="
    add $I11, rx1465_pos, 2
    gt $I11, rx1465_eos, rx1465_fail
    sub $I11, rx1465_pos, rx1465_off
    substr $S10, rx1465_tgt, $I11, 2
    ne $S10, "<=", rx1465_fail
    add rx1465_pos, 2
    set_addr $I10, rxcap_1470_fail
    ($I12, $I11) = rx1465_cur."!mark_peek"($I10)
    rx1465_cur."!cursor_pos"($I11)
    ($P10) = rx1465_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1465_pos, "")
    rx1465_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1470_done
  rxcap_1470_fail:
    goto rx1465_fail
  rxcap_1470_done:
  # rx subrule "O" subtype=capture negate=
    rx1465_cur."!cursor_pos"(rx1465_pos)
    $P10 = rx1465_cur."O"("%relational, :pirop<isle INn>")
    unless $P10, rx1465_fail
    rx1465_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1465_pos = $P10."pos"()
  # rx pass
    rx1465_cur."!cursor_pass"(rx1465_pos, "infix:sym<<=>")
    if_null rx1465_debug, debug_1044
    rx1465_cur."!cursor_debug"("PASS", "infix:sym<<=>", " at pos=", rx1465_pos)
  debug_1044:
    .return (rx1465_cur)
  rx1465_restart:
.annotate 'line', 4
    if_null rx1465_debug, debug_1045
    rx1465_cur."!cursor_debug"("NEXT", "infix:sym<<=>")
  debug_1045:
  rx1465_fail:
    (rx1465_rep, rx1465_pos, $I10, $P10) = rx1465_cur."!mark_fail"(0)
    lt rx1465_pos, -1, rx1465_done
    eq rx1465_pos, -1, rx1465_fail
    jump $I10
  rx1465_done:
    rx1465_cur."!cursor_fail"()
    if_null rx1465_debug, debug_1046
    rx1465_cur."!cursor_debug"("FAIL", "infix:sym<<=>")
  debug_1046:
    .return (rx1465_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<<=>"  :nsentry("!PREFIX__infix:sym<<=>") :subid("328_1299591493.348") :method
.annotate 'line', 4
    $P1467 = self."!PREFIX__!subrule"("O", "<=")
    new $P1468, "ResizablePMCArray"
    push $P1468, $P1467
    .return ($P1468)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<>=>"  :subid("329_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1472_tgt
    .local int rx1472_pos
    .local int rx1472_off
    .local int rx1472_eos
    .local int rx1472_rep
    .local pmc rx1472_cur
    .local pmc rx1472_debug
    (rx1472_cur, rx1472_pos, rx1472_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1472_cur
    .local pmc match
    .lex "$/", match
    length rx1472_eos, rx1472_tgt
    gt rx1472_pos, rx1472_eos, rx1472_done
    set rx1472_off, 0
    lt rx1472_pos, 2, rx1472_start
    sub rx1472_off, rx1472_pos, 1
    substr rx1472_tgt, rx1472_tgt, rx1472_off
  rx1472_start:
    eq $I10, 1, rx1472_restart
    if_null rx1472_debug, debug_1047
    rx1472_cur."!cursor_debug"("START", "infix:sym<>=>")
  debug_1047:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1476_done
    goto rxscan1476_scan
  rxscan1476_loop:
    (rx1472_pos) = rx1472_cur."from"()
    inc rx1472_pos
    rx1472_cur."!cursor_from"(rx1472_pos)
    ge rx1472_pos, rx1472_eos, rxscan1476_done
  rxscan1476_scan:
    set_addr $I10, rxscan1476_loop
    rx1472_cur."!mark_push"(0, rx1472_pos, $I10)
  rxscan1476_done:
.annotate 'line', 641
  # rx subcapture "sym"
    set_addr $I10, rxcap_1477_fail
    rx1472_cur."!mark_push"(0, rx1472_pos, $I10)
  # rx literal  ">="
    add $I11, rx1472_pos, 2
    gt $I11, rx1472_eos, rx1472_fail
    sub $I11, rx1472_pos, rx1472_off
    substr $S10, rx1472_tgt, $I11, 2
    ne $S10, ">=", rx1472_fail
    add rx1472_pos, 2
    set_addr $I10, rxcap_1477_fail
    ($I12, $I11) = rx1472_cur."!mark_peek"($I10)
    rx1472_cur."!cursor_pos"($I11)
    ($P10) = rx1472_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1472_pos, "")
    rx1472_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1477_done
  rxcap_1477_fail:
    goto rx1472_fail
  rxcap_1477_done:
  # rx subrule "O" subtype=capture negate=
    rx1472_cur."!cursor_pos"(rx1472_pos)
    $P10 = rx1472_cur."O"("%relational, :pirop<isge INn>")
    unless $P10, rx1472_fail
    rx1472_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1472_pos = $P10."pos"()
  # rx pass
    rx1472_cur."!cursor_pass"(rx1472_pos, "infix:sym<>=>")
    if_null rx1472_debug, debug_1048
    rx1472_cur."!cursor_debug"("PASS", "infix:sym<>=>", " at pos=", rx1472_pos)
  debug_1048:
    .return (rx1472_cur)
  rx1472_restart:
.annotate 'line', 4
    if_null rx1472_debug, debug_1049
    rx1472_cur."!cursor_debug"("NEXT", "infix:sym<>=>")
  debug_1049:
  rx1472_fail:
    (rx1472_rep, rx1472_pos, $I10, $P10) = rx1472_cur."!mark_fail"(0)
    lt rx1472_pos, -1, rx1472_done
    eq rx1472_pos, -1, rx1472_fail
    jump $I10
  rx1472_done:
    rx1472_cur."!cursor_fail"()
    if_null rx1472_debug, debug_1050
    rx1472_cur."!cursor_debug"("FAIL", "infix:sym<>=>")
  debug_1050:
    .return (rx1472_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<>=>"  :nsentry("!PREFIX__infix:sym<>=>") :subid("330_1299591493.348") :method
.annotate 'line', 4
    $P1474 = self."!PREFIX__!subrule"("O", ">=")
    new $P1475, "ResizablePMCArray"
    push $P1475, $P1474
    .return ($P1475)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<<>"  :subid("331_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1479_tgt
    .local int rx1479_pos
    .local int rx1479_off
    .local int rx1479_eos
    .local int rx1479_rep
    .local pmc rx1479_cur
    .local pmc rx1479_debug
    (rx1479_cur, rx1479_pos, rx1479_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1479_cur
    .local pmc match
    .lex "$/", match
    length rx1479_eos, rx1479_tgt
    gt rx1479_pos, rx1479_eos, rx1479_done
    set rx1479_off, 0
    lt rx1479_pos, 2, rx1479_start
    sub rx1479_off, rx1479_pos, 1
    substr rx1479_tgt, rx1479_tgt, rx1479_off
  rx1479_start:
    eq $I10, 1, rx1479_restart
    if_null rx1479_debug, debug_1051
    rx1479_cur."!cursor_debug"("START", "infix:sym<<>")
  debug_1051:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1483_done
    goto rxscan1483_scan
  rxscan1483_loop:
    (rx1479_pos) = rx1479_cur."from"()
    inc rx1479_pos
    rx1479_cur."!cursor_from"(rx1479_pos)
    ge rx1479_pos, rx1479_eos, rxscan1483_done
  rxscan1483_scan:
    set_addr $I10, rxscan1483_loop
    rx1479_cur."!mark_push"(0, rx1479_pos, $I10)
  rxscan1483_done:
.annotate 'line', 642
  # rx subcapture "sym"
    set_addr $I10, rxcap_1484_fail
    rx1479_cur."!mark_push"(0, rx1479_pos, $I10)
  # rx literal  "<"
    add $I11, rx1479_pos, 1
    gt $I11, rx1479_eos, rx1479_fail
    sub $I11, rx1479_pos, rx1479_off
    ord $I11, rx1479_tgt, $I11
    ne $I11, 60, rx1479_fail
    add rx1479_pos, 1
    set_addr $I10, rxcap_1484_fail
    ($I12, $I11) = rx1479_cur."!mark_peek"($I10)
    rx1479_cur."!cursor_pos"($I11)
    ($P10) = rx1479_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1479_pos, "")
    rx1479_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1484_done
  rxcap_1484_fail:
    goto rx1479_fail
  rxcap_1484_done:
  # rx subrule "O" subtype=capture negate=
    rx1479_cur."!cursor_pos"(rx1479_pos)
    $P10 = rx1479_cur."O"("%relational, :pirop<islt INn>")
    unless $P10, rx1479_fail
    rx1479_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1479_pos = $P10."pos"()
  # rx pass
    rx1479_cur."!cursor_pass"(rx1479_pos, "infix:sym<<>")
    if_null rx1479_debug, debug_1052
    rx1479_cur."!cursor_debug"("PASS", "infix:sym<<>", " at pos=", rx1479_pos)
  debug_1052:
    .return (rx1479_cur)
  rx1479_restart:
.annotate 'line', 4
    if_null rx1479_debug, debug_1053
    rx1479_cur."!cursor_debug"("NEXT", "infix:sym<<>")
  debug_1053:
  rx1479_fail:
    (rx1479_rep, rx1479_pos, $I10, $P10) = rx1479_cur."!mark_fail"(0)
    lt rx1479_pos, -1, rx1479_done
    eq rx1479_pos, -1, rx1479_fail
    jump $I10
  rx1479_done:
    rx1479_cur."!cursor_fail"()
    if_null rx1479_debug, debug_1054
    rx1479_cur."!cursor_debug"("FAIL", "infix:sym<<>")
  debug_1054:
    .return (rx1479_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<<>"  :nsentry("!PREFIX__infix:sym<<>") :subid("332_1299591493.348") :method
.annotate 'line', 4
    $P1481 = self."!PREFIX__!subrule"("O", "<")
    new $P1482, "ResizablePMCArray"
    push $P1482, $P1481
    .return ($P1482)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<>>"  :subid("333_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1486_tgt
    .local int rx1486_pos
    .local int rx1486_off
    .local int rx1486_eos
    .local int rx1486_rep
    .local pmc rx1486_cur
    .local pmc rx1486_debug
    (rx1486_cur, rx1486_pos, rx1486_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1486_cur
    .local pmc match
    .lex "$/", match
    length rx1486_eos, rx1486_tgt
    gt rx1486_pos, rx1486_eos, rx1486_done
    set rx1486_off, 0
    lt rx1486_pos, 2, rx1486_start
    sub rx1486_off, rx1486_pos, 1
    substr rx1486_tgt, rx1486_tgt, rx1486_off
  rx1486_start:
    eq $I10, 1, rx1486_restart
    if_null rx1486_debug, debug_1055
    rx1486_cur."!cursor_debug"("START", "infix:sym<>>")
  debug_1055:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1490_done
    goto rxscan1490_scan
  rxscan1490_loop:
    (rx1486_pos) = rx1486_cur."from"()
    inc rx1486_pos
    rx1486_cur."!cursor_from"(rx1486_pos)
    ge rx1486_pos, rx1486_eos, rxscan1490_done
  rxscan1490_scan:
    set_addr $I10, rxscan1490_loop
    rx1486_cur."!mark_push"(0, rx1486_pos, $I10)
  rxscan1490_done:
.annotate 'line', 643
  # rx subcapture "sym"
    set_addr $I10, rxcap_1491_fail
    rx1486_cur."!mark_push"(0, rx1486_pos, $I10)
  # rx literal  ">"
    add $I11, rx1486_pos, 1
    gt $I11, rx1486_eos, rx1486_fail
    sub $I11, rx1486_pos, rx1486_off
    ord $I11, rx1486_tgt, $I11
    ne $I11, 62, rx1486_fail
    add rx1486_pos, 1
    set_addr $I10, rxcap_1491_fail
    ($I12, $I11) = rx1486_cur."!mark_peek"($I10)
    rx1486_cur."!cursor_pos"($I11)
    ($P10) = rx1486_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1486_pos, "")
    rx1486_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1491_done
  rxcap_1491_fail:
    goto rx1486_fail
  rxcap_1491_done:
  # rx subrule "O" subtype=capture negate=
    rx1486_cur."!cursor_pos"(rx1486_pos)
    $P10 = rx1486_cur."O"("%relational, :pirop<isgt INn>")
    unless $P10, rx1486_fail
    rx1486_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1486_pos = $P10."pos"()
  # rx pass
    rx1486_cur."!cursor_pass"(rx1486_pos, "infix:sym<>>")
    if_null rx1486_debug, debug_1056
    rx1486_cur."!cursor_debug"("PASS", "infix:sym<>>", " at pos=", rx1486_pos)
  debug_1056:
    .return (rx1486_cur)
  rx1486_restart:
.annotate 'line', 4
    if_null rx1486_debug, debug_1057
    rx1486_cur."!cursor_debug"("NEXT", "infix:sym<>>")
  debug_1057:
  rx1486_fail:
    (rx1486_rep, rx1486_pos, $I10, $P10) = rx1486_cur."!mark_fail"(0)
    lt rx1486_pos, -1, rx1486_done
    eq rx1486_pos, -1, rx1486_fail
    jump $I10
  rx1486_done:
    rx1486_cur."!cursor_fail"()
    if_null rx1486_debug, debug_1058
    rx1486_cur."!cursor_debug"("FAIL", "infix:sym<>>")
  debug_1058:
    .return (rx1486_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<>>"  :nsentry("!PREFIX__infix:sym<>>") :subid("334_1299591493.348") :method
.annotate 'line', 4
    $P1488 = self."!PREFIX__!subrule"("O", ">")
    new $P1489, "ResizablePMCArray"
    push $P1489, $P1488
    .return ($P1489)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<eq>"  :subid("335_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1493_tgt
    .local int rx1493_pos
    .local int rx1493_off
    .local int rx1493_eos
    .local int rx1493_rep
    .local pmc rx1493_cur
    .local pmc rx1493_debug
    (rx1493_cur, rx1493_pos, rx1493_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1493_cur
    .local pmc match
    .lex "$/", match
    length rx1493_eos, rx1493_tgt
    gt rx1493_pos, rx1493_eos, rx1493_done
    set rx1493_off, 0
    lt rx1493_pos, 2, rx1493_start
    sub rx1493_off, rx1493_pos, 1
    substr rx1493_tgt, rx1493_tgt, rx1493_off
  rx1493_start:
    eq $I10, 1, rx1493_restart
    if_null rx1493_debug, debug_1059
    rx1493_cur."!cursor_debug"("START", "infix:sym<eq>")
  debug_1059:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1497_done
    goto rxscan1497_scan
  rxscan1497_loop:
    (rx1493_pos) = rx1493_cur."from"()
    inc rx1493_pos
    rx1493_cur."!cursor_from"(rx1493_pos)
    ge rx1493_pos, rx1493_eos, rxscan1497_done
  rxscan1497_scan:
    set_addr $I10, rxscan1497_loop
    rx1493_cur."!mark_push"(0, rx1493_pos, $I10)
  rxscan1497_done:
.annotate 'line', 644
  # rx subcapture "sym"
    set_addr $I10, rxcap_1498_fail
    rx1493_cur."!mark_push"(0, rx1493_pos, $I10)
  # rx literal  "eq"
    add $I11, rx1493_pos, 2
    gt $I11, rx1493_eos, rx1493_fail
    sub $I11, rx1493_pos, rx1493_off
    substr $S10, rx1493_tgt, $I11, 2
    ne $S10, "eq", rx1493_fail
    add rx1493_pos, 2
    set_addr $I10, rxcap_1498_fail
    ($I12, $I11) = rx1493_cur."!mark_peek"($I10)
    rx1493_cur."!cursor_pos"($I11)
    ($P10) = rx1493_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1493_pos, "")
    rx1493_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1498_done
  rxcap_1498_fail:
    goto rx1493_fail
  rxcap_1498_done:
  # rx subrule "O" subtype=capture negate=
    rx1493_cur."!cursor_pos"(rx1493_pos)
    $P10 = rx1493_cur."O"("%relational, :pirop<iseq ISs>")
    unless $P10, rx1493_fail
    rx1493_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1493_pos = $P10."pos"()
  # rx pass
    rx1493_cur."!cursor_pass"(rx1493_pos, "infix:sym<eq>")
    if_null rx1493_debug, debug_1060
    rx1493_cur."!cursor_debug"("PASS", "infix:sym<eq>", " at pos=", rx1493_pos)
  debug_1060:
    .return (rx1493_cur)
  rx1493_restart:
.annotate 'line', 4
    if_null rx1493_debug, debug_1061
    rx1493_cur."!cursor_debug"("NEXT", "infix:sym<eq>")
  debug_1061:
  rx1493_fail:
    (rx1493_rep, rx1493_pos, $I10, $P10) = rx1493_cur."!mark_fail"(0)
    lt rx1493_pos, -1, rx1493_done
    eq rx1493_pos, -1, rx1493_fail
    jump $I10
  rx1493_done:
    rx1493_cur."!cursor_fail"()
    if_null rx1493_debug, debug_1062
    rx1493_cur."!cursor_debug"("FAIL", "infix:sym<eq>")
  debug_1062:
    .return (rx1493_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<eq>"  :nsentry("!PREFIX__infix:sym<eq>") :subid("336_1299591493.348") :method
.annotate 'line', 4
    $P1495 = self."!PREFIX__!subrule"("O", "eq")
    new $P1496, "ResizablePMCArray"
    push $P1496, $P1495
    .return ($P1496)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<ne>"  :subid("337_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1500_tgt
    .local int rx1500_pos
    .local int rx1500_off
    .local int rx1500_eos
    .local int rx1500_rep
    .local pmc rx1500_cur
    .local pmc rx1500_debug
    (rx1500_cur, rx1500_pos, rx1500_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1500_cur
    .local pmc match
    .lex "$/", match
    length rx1500_eos, rx1500_tgt
    gt rx1500_pos, rx1500_eos, rx1500_done
    set rx1500_off, 0
    lt rx1500_pos, 2, rx1500_start
    sub rx1500_off, rx1500_pos, 1
    substr rx1500_tgt, rx1500_tgt, rx1500_off
  rx1500_start:
    eq $I10, 1, rx1500_restart
    if_null rx1500_debug, debug_1063
    rx1500_cur."!cursor_debug"("START", "infix:sym<ne>")
  debug_1063:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1504_done
    goto rxscan1504_scan
  rxscan1504_loop:
    (rx1500_pos) = rx1500_cur."from"()
    inc rx1500_pos
    rx1500_cur."!cursor_from"(rx1500_pos)
    ge rx1500_pos, rx1500_eos, rxscan1504_done
  rxscan1504_scan:
    set_addr $I10, rxscan1504_loop
    rx1500_cur."!mark_push"(0, rx1500_pos, $I10)
  rxscan1504_done:
.annotate 'line', 645
  # rx subcapture "sym"
    set_addr $I10, rxcap_1505_fail
    rx1500_cur."!mark_push"(0, rx1500_pos, $I10)
  # rx literal  "ne"
    add $I11, rx1500_pos, 2
    gt $I11, rx1500_eos, rx1500_fail
    sub $I11, rx1500_pos, rx1500_off
    substr $S10, rx1500_tgt, $I11, 2
    ne $S10, "ne", rx1500_fail
    add rx1500_pos, 2
    set_addr $I10, rxcap_1505_fail
    ($I12, $I11) = rx1500_cur."!mark_peek"($I10)
    rx1500_cur."!cursor_pos"($I11)
    ($P10) = rx1500_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1500_pos, "")
    rx1500_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1505_done
  rxcap_1505_fail:
    goto rx1500_fail
  rxcap_1505_done:
  # rx subrule "O" subtype=capture negate=
    rx1500_cur."!cursor_pos"(rx1500_pos)
    $P10 = rx1500_cur."O"("%relational, :pirop<isne ISs>")
    unless $P10, rx1500_fail
    rx1500_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1500_pos = $P10."pos"()
  # rx pass
    rx1500_cur."!cursor_pass"(rx1500_pos, "infix:sym<ne>")
    if_null rx1500_debug, debug_1064
    rx1500_cur."!cursor_debug"("PASS", "infix:sym<ne>", " at pos=", rx1500_pos)
  debug_1064:
    .return (rx1500_cur)
  rx1500_restart:
.annotate 'line', 4
    if_null rx1500_debug, debug_1065
    rx1500_cur."!cursor_debug"("NEXT", "infix:sym<ne>")
  debug_1065:
  rx1500_fail:
    (rx1500_rep, rx1500_pos, $I10, $P10) = rx1500_cur."!mark_fail"(0)
    lt rx1500_pos, -1, rx1500_done
    eq rx1500_pos, -1, rx1500_fail
    jump $I10
  rx1500_done:
    rx1500_cur."!cursor_fail"()
    if_null rx1500_debug, debug_1066
    rx1500_cur."!cursor_debug"("FAIL", "infix:sym<ne>")
  debug_1066:
    .return (rx1500_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<ne>"  :nsentry("!PREFIX__infix:sym<ne>") :subid("338_1299591493.348") :method
.annotate 'line', 4
    $P1502 = self."!PREFIX__!subrule"("O", "ne")
    new $P1503, "ResizablePMCArray"
    push $P1503, $P1502
    .return ($P1503)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<le>"  :subid("339_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1507_tgt
    .local int rx1507_pos
    .local int rx1507_off
    .local int rx1507_eos
    .local int rx1507_rep
    .local pmc rx1507_cur
    .local pmc rx1507_debug
    (rx1507_cur, rx1507_pos, rx1507_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1507_cur
    .local pmc match
    .lex "$/", match
    length rx1507_eos, rx1507_tgt
    gt rx1507_pos, rx1507_eos, rx1507_done
    set rx1507_off, 0
    lt rx1507_pos, 2, rx1507_start
    sub rx1507_off, rx1507_pos, 1
    substr rx1507_tgt, rx1507_tgt, rx1507_off
  rx1507_start:
    eq $I10, 1, rx1507_restart
    if_null rx1507_debug, debug_1067
    rx1507_cur."!cursor_debug"("START", "infix:sym<le>")
  debug_1067:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1511_done
    goto rxscan1511_scan
  rxscan1511_loop:
    (rx1507_pos) = rx1507_cur."from"()
    inc rx1507_pos
    rx1507_cur."!cursor_from"(rx1507_pos)
    ge rx1507_pos, rx1507_eos, rxscan1511_done
  rxscan1511_scan:
    set_addr $I10, rxscan1511_loop
    rx1507_cur."!mark_push"(0, rx1507_pos, $I10)
  rxscan1511_done:
.annotate 'line', 646
  # rx subcapture "sym"
    set_addr $I10, rxcap_1512_fail
    rx1507_cur."!mark_push"(0, rx1507_pos, $I10)
  # rx literal  "le"
    add $I11, rx1507_pos, 2
    gt $I11, rx1507_eos, rx1507_fail
    sub $I11, rx1507_pos, rx1507_off
    substr $S10, rx1507_tgt, $I11, 2
    ne $S10, "le", rx1507_fail
    add rx1507_pos, 2
    set_addr $I10, rxcap_1512_fail
    ($I12, $I11) = rx1507_cur."!mark_peek"($I10)
    rx1507_cur."!cursor_pos"($I11)
    ($P10) = rx1507_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1507_pos, "")
    rx1507_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1512_done
  rxcap_1512_fail:
    goto rx1507_fail
  rxcap_1512_done:
  # rx subrule "O" subtype=capture negate=
    rx1507_cur."!cursor_pos"(rx1507_pos)
    $P10 = rx1507_cur."O"("%relational, :pirop<isle ISs>")
    unless $P10, rx1507_fail
    rx1507_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1507_pos = $P10."pos"()
  # rx pass
    rx1507_cur."!cursor_pass"(rx1507_pos, "infix:sym<le>")
    if_null rx1507_debug, debug_1068
    rx1507_cur."!cursor_debug"("PASS", "infix:sym<le>", " at pos=", rx1507_pos)
  debug_1068:
    .return (rx1507_cur)
  rx1507_restart:
.annotate 'line', 4
    if_null rx1507_debug, debug_1069
    rx1507_cur."!cursor_debug"("NEXT", "infix:sym<le>")
  debug_1069:
  rx1507_fail:
    (rx1507_rep, rx1507_pos, $I10, $P10) = rx1507_cur."!mark_fail"(0)
    lt rx1507_pos, -1, rx1507_done
    eq rx1507_pos, -1, rx1507_fail
    jump $I10
  rx1507_done:
    rx1507_cur."!cursor_fail"()
    if_null rx1507_debug, debug_1070
    rx1507_cur."!cursor_debug"("FAIL", "infix:sym<le>")
  debug_1070:
    .return (rx1507_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<le>"  :nsentry("!PREFIX__infix:sym<le>") :subid("340_1299591493.348") :method
.annotate 'line', 4
    $P1509 = self."!PREFIX__!subrule"("O", "le")
    new $P1510, "ResizablePMCArray"
    push $P1510, $P1509
    .return ($P1510)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<ge>"  :subid("341_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1514_tgt
    .local int rx1514_pos
    .local int rx1514_off
    .local int rx1514_eos
    .local int rx1514_rep
    .local pmc rx1514_cur
    .local pmc rx1514_debug
    (rx1514_cur, rx1514_pos, rx1514_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1514_cur
    .local pmc match
    .lex "$/", match
    length rx1514_eos, rx1514_tgt
    gt rx1514_pos, rx1514_eos, rx1514_done
    set rx1514_off, 0
    lt rx1514_pos, 2, rx1514_start
    sub rx1514_off, rx1514_pos, 1
    substr rx1514_tgt, rx1514_tgt, rx1514_off
  rx1514_start:
    eq $I10, 1, rx1514_restart
    if_null rx1514_debug, debug_1071
    rx1514_cur."!cursor_debug"("START", "infix:sym<ge>")
  debug_1071:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1518_done
    goto rxscan1518_scan
  rxscan1518_loop:
    (rx1514_pos) = rx1514_cur."from"()
    inc rx1514_pos
    rx1514_cur."!cursor_from"(rx1514_pos)
    ge rx1514_pos, rx1514_eos, rxscan1518_done
  rxscan1518_scan:
    set_addr $I10, rxscan1518_loop
    rx1514_cur."!mark_push"(0, rx1514_pos, $I10)
  rxscan1518_done:
.annotate 'line', 647
  # rx subcapture "sym"
    set_addr $I10, rxcap_1519_fail
    rx1514_cur."!mark_push"(0, rx1514_pos, $I10)
  # rx literal  "ge"
    add $I11, rx1514_pos, 2
    gt $I11, rx1514_eos, rx1514_fail
    sub $I11, rx1514_pos, rx1514_off
    substr $S10, rx1514_tgt, $I11, 2
    ne $S10, "ge", rx1514_fail
    add rx1514_pos, 2
    set_addr $I10, rxcap_1519_fail
    ($I12, $I11) = rx1514_cur."!mark_peek"($I10)
    rx1514_cur."!cursor_pos"($I11)
    ($P10) = rx1514_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1514_pos, "")
    rx1514_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1519_done
  rxcap_1519_fail:
    goto rx1514_fail
  rxcap_1519_done:
  # rx subrule "O" subtype=capture negate=
    rx1514_cur."!cursor_pos"(rx1514_pos)
    $P10 = rx1514_cur."O"("%relational, :pirop<isge ISs>")
    unless $P10, rx1514_fail
    rx1514_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1514_pos = $P10."pos"()
  # rx pass
    rx1514_cur."!cursor_pass"(rx1514_pos, "infix:sym<ge>")
    if_null rx1514_debug, debug_1072
    rx1514_cur."!cursor_debug"("PASS", "infix:sym<ge>", " at pos=", rx1514_pos)
  debug_1072:
    .return (rx1514_cur)
  rx1514_restart:
.annotate 'line', 4
    if_null rx1514_debug, debug_1073
    rx1514_cur."!cursor_debug"("NEXT", "infix:sym<ge>")
  debug_1073:
  rx1514_fail:
    (rx1514_rep, rx1514_pos, $I10, $P10) = rx1514_cur."!mark_fail"(0)
    lt rx1514_pos, -1, rx1514_done
    eq rx1514_pos, -1, rx1514_fail
    jump $I10
  rx1514_done:
    rx1514_cur."!cursor_fail"()
    if_null rx1514_debug, debug_1074
    rx1514_cur."!cursor_debug"("FAIL", "infix:sym<ge>")
  debug_1074:
    .return (rx1514_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<ge>"  :nsentry("!PREFIX__infix:sym<ge>") :subid("342_1299591493.348") :method
.annotate 'line', 4
    $P1516 = self."!PREFIX__!subrule"("O", "ge")
    new $P1517, "ResizablePMCArray"
    push $P1517, $P1516
    .return ($P1517)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<lt>"  :subid("343_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1521_tgt
    .local int rx1521_pos
    .local int rx1521_off
    .local int rx1521_eos
    .local int rx1521_rep
    .local pmc rx1521_cur
    .local pmc rx1521_debug
    (rx1521_cur, rx1521_pos, rx1521_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1521_cur
    .local pmc match
    .lex "$/", match
    length rx1521_eos, rx1521_tgt
    gt rx1521_pos, rx1521_eos, rx1521_done
    set rx1521_off, 0
    lt rx1521_pos, 2, rx1521_start
    sub rx1521_off, rx1521_pos, 1
    substr rx1521_tgt, rx1521_tgt, rx1521_off
  rx1521_start:
    eq $I10, 1, rx1521_restart
    if_null rx1521_debug, debug_1075
    rx1521_cur."!cursor_debug"("START", "infix:sym<lt>")
  debug_1075:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1525_done
    goto rxscan1525_scan
  rxscan1525_loop:
    (rx1521_pos) = rx1521_cur."from"()
    inc rx1521_pos
    rx1521_cur."!cursor_from"(rx1521_pos)
    ge rx1521_pos, rx1521_eos, rxscan1525_done
  rxscan1525_scan:
    set_addr $I10, rxscan1525_loop
    rx1521_cur."!mark_push"(0, rx1521_pos, $I10)
  rxscan1525_done:
.annotate 'line', 648
  # rx subcapture "sym"
    set_addr $I10, rxcap_1526_fail
    rx1521_cur."!mark_push"(0, rx1521_pos, $I10)
  # rx literal  "lt"
    add $I11, rx1521_pos, 2
    gt $I11, rx1521_eos, rx1521_fail
    sub $I11, rx1521_pos, rx1521_off
    substr $S10, rx1521_tgt, $I11, 2
    ne $S10, "lt", rx1521_fail
    add rx1521_pos, 2
    set_addr $I10, rxcap_1526_fail
    ($I12, $I11) = rx1521_cur."!mark_peek"($I10)
    rx1521_cur."!cursor_pos"($I11)
    ($P10) = rx1521_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1521_pos, "")
    rx1521_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1526_done
  rxcap_1526_fail:
    goto rx1521_fail
  rxcap_1526_done:
  # rx subrule "O" subtype=capture negate=
    rx1521_cur."!cursor_pos"(rx1521_pos)
    $P10 = rx1521_cur."O"("%relational, :pirop<islt ISs>")
    unless $P10, rx1521_fail
    rx1521_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1521_pos = $P10."pos"()
  # rx pass
    rx1521_cur."!cursor_pass"(rx1521_pos, "infix:sym<lt>")
    if_null rx1521_debug, debug_1076
    rx1521_cur."!cursor_debug"("PASS", "infix:sym<lt>", " at pos=", rx1521_pos)
  debug_1076:
    .return (rx1521_cur)
  rx1521_restart:
.annotate 'line', 4
    if_null rx1521_debug, debug_1077
    rx1521_cur."!cursor_debug"("NEXT", "infix:sym<lt>")
  debug_1077:
  rx1521_fail:
    (rx1521_rep, rx1521_pos, $I10, $P10) = rx1521_cur."!mark_fail"(0)
    lt rx1521_pos, -1, rx1521_done
    eq rx1521_pos, -1, rx1521_fail
    jump $I10
  rx1521_done:
    rx1521_cur."!cursor_fail"()
    if_null rx1521_debug, debug_1078
    rx1521_cur."!cursor_debug"("FAIL", "infix:sym<lt>")
  debug_1078:
    .return (rx1521_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<lt>"  :nsentry("!PREFIX__infix:sym<lt>") :subid("344_1299591493.348") :method
.annotate 'line', 4
    $P1523 = self."!PREFIX__!subrule"("O", "lt")
    new $P1524, "ResizablePMCArray"
    push $P1524, $P1523
    .return ($P1524)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<gt>"  :subid("345_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1528_tgt
    .local int rx1528_pos
    .local int rx1528_off
    .local int rx1528_eos
    .local int rx1528_rep
    .local pmc rx1528_cur
    .local pmc rx1528_debug
    (rx1528_cur, rx1528_pos, rx1528_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1528_cur
    .local pmc match
    .lex "$/", match
    length rx1528_eos, rx1528_tgt
    gt rx1528_pos, rx1528_eos, rx1528_done
    set rx1528_off, 0
    lt rx1528_pos, 2, rx1528_start
    sub rx1528_off, rx1528_pos, 1
    substr rx1528_tgt, rx1528_tgt, rx1528_off
  rx1528_start:
    eq $I10, 1, rx1528_restart
    if_null rx1528_debug, debug_1079
    rx1528_cur."!cursor_debug"("START", "infix:sym<gt>")
  debug_1079:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1532_done
    goto rxscan1532_scan
  rxscan1532_loop:
    (rx1528_pos) = rx1528_cur."from"()
    inc rx1528_pos
    rx1528_cur."!cursor_from"(rx1528_pos)
    ge rx1528_pos, rx1528_eos, rxscan1532_done
  rxscan1532_scan:
    set_addr $I10, rxscan1532_loop
    rx1528_cur."!mark_push"(0, rx1528_pos, $I10)
  rxscan1532_done:
.annotate 'line', 649
  # rx subcapture "sym"
    set_addr $I10, rxcap_1533_fail
    rx1528_cur."!mark_push"(0, rx1528_pos, $I10)
  # rx literal  "gt"
    add $I11, rx1528_pos, 2
    gt $I11, rx1528_eos, rx1528_fail
    sub $I11, rx1528_pos, rx1528_off
    substr $S10, rx1528_tgt, $I11, 2
    ne $S10, "gt", rx1528_fail
    add rx1528_pos, 2
    set_addr $I10, rxcap_1533_fail
    ($I12, $I11) = rx1528_cur."!mark_peek"($I10)
    rx1528_cur."!cursor_pos"($I11)
    ($P10) = rx1528_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1528_pos, "")
    rx1528_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1533_done
  rxcap_1533_fail:
    goto rx1528_fail
  rxcap_1533_done:
  # rx subrule "O" subtype=capture negate=
    rx1528_cur."!cursor_pos"(rx1528_pos)
    $P10 = rx1528_cur."O"("%relational, :pirop<isgt ISs>")
    unless $P10, rx1528_fail
    rx1528_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1528_pos = $P10."pos"()
  # rx pass
    rx1528_cur."!cursor_pass"(rx1528_pos, "infix:sym<gt>")
    if_null rx1528_debug, debug_1080
    rx1528_cur."!cursor_debug"("PASS", "infix:sym<gt>", " at pos=", rx1528_pos)
  debug_1080:
    .return (rx1528_cur)
  rx1528_restart:
.annotate 'line', 4
    if_null rx1528_debug, debug_1081
    rx1528_cur."!cursor_debug"("NEXT", "infix:sym<gt>")
  debug_1081:
  rx1528_fail:
    (rx1528_rep, rx1528_pos, $I10, $P10) = rx1528_cur."!mark_fail"(0)
    lt rx1528_pos, -1, rx1528_done
    eq rx1528_pos, -1, rx1528_fail
    jump $I10
  rx1528_done:
    rx1528_cur."!cursor_fail"()
    if_null rx1528_debug, debug_1082
    rx1528_cur."!cursor_debug"("FAIL", "infix:sym<gt>")
  debug_1082:
    .return (rx1528_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<gt>"  :nsentry("!PREFIX__infix:sym<gt>") :subid("346_1299591493.348") :method
.annotate 'line', 4
    $P1530 = self."!PREFIX__!subrule"("O", "gt")
    new $P1531, "ResizablePMCArray"
    push $P1531, $P1530
    .return ($P1531)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<=:=>"  :subid("347_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1535_tgt
    .local int rx1535_pos
    .local int rx1535_off
    .local int rx1535_eos
    .local int rx1535_rep
    .local pmc rx1535_cur
    .local pmc rx1535_debug
    (rx1535_cur, rx1535_pos, rx1535_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1535_cur
    .local pmc match
    .lex "$/", match
    length rx1535_eos, rx1535_tgt
    gt rx1535_pos, rx1535_eos, rx1535_done
    set rx1535_off, 0
    lt rx1535_pos, 2, rx1535_start
    sub rx1535_off, rx1535_pos, 1
    substr rx1535_tgt, rx1535_tgt, rx1535_off
  rx1535_start:
    eq $I10, 1, rx1535_restart
    if_null rx1535_debug, debug_1083
    rx1535_cur."!cursor_debug"("START", "infix:sym<=:=>")
  debug_1083:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1539_done
    goto rxscan1539_scan
  rxscan1539_loop:
    (rx1535_pos) = rx1535_cur."from"()
    inc rx1535_pos
    rx1535_cur."!cursor_from"(rx1535_pos)
    ge rx1535_pos, rx1535_eos, rxscan1539_done
  rxscan1539_scan:
    set_addr $I10, rxscan1539_loop
    rx1535_cur."!mark_push"(0, rx1535_pos, $I10)
  rxscan1539_done:
.annotate 'line', 650
  # rx subcapture "sym"
    set_addr $I10, rxcap_1540_fail
    rx1535_cur."!mark_push"(0, rx1535_pos, $I10)
  # rx literal  "=:="
    add $I11, rx1535_pos, 3
    gt $I11, rx1535_eos, rx1535_fail
    sub $I11, rx1535_pos, rx1535_off
    substr $S10, rx1535_tgt, $I11, 3
    ne $S10, "=:=", rx1535_fail
    add rx1535_pos, 3
    set_addr $I10, rxcap_1540_fail
    ($I12, $I11) = rx1535_cur."!mark_peek"($I10)
    rx1535_cur."!cursor_pos"($I11)
    ($P10) = rx1535_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1535_pos, "")
    rx1535_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1540_done
  rxcap_1540_fail:
    goto rx1535_fail
  rxcap_1540_done:
  # rx subrule "O" subtype=capture negate=
    rx1535_cur."!cursor_pos"(rx1535_pos)
    $P10 = rx1535_cur."O"("%relational, :pirop<issame>")
    unless $P10, rx1535_fail
    rx1535_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1535_pos = $P10."pos"()
  # rx pass
    rx1535_cur."!cursor_pass"(rx1535_pos, "infix:sym<=:=>")
    if_null rx1535_debug, debug_1084
    rx1535_cur."!cursor_debug"("PASS", "infix:sym<=:=>", " at pos=", rx1535_pos)
  debug_1084:
    .return (rx1535_cur)
  rx1535_restart:
.annotate 'line', 4
    if_null rx1535_debug, debug_1085
    rx1535_cur."!cursor_debug"("NEXT", "infix:sym<=:=>")
  debug_1085:
  rx1535_fail:
    (rx1535_rep, rx1535_pos, $I10, $P10) = rx1535_cur."!mark_fail"(0)
    lt rx1535_pos, -1, rx1535_done
    eq rx1535_pos, -1, rx1535_fail
    jump $I10
  rx1535_done:
    rx1535_cur."!cursor_fail"()
    if_null rx1535_debug, debug_1086
    rx1535_cur."!cursor_debug"("FAIL", "infix:sym<=:=>")
  debug_1086:
    .return (rx1535_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<=:=>"  :nsentry("!PREFIX__infix:sym<=:=>") :subid("348_1299591493.348") :method
.annotate 'line', 4
    $P1537 = self."!PREFIX__!subrule"("O", "=:=")
    new $P1538, "ResizablePMCArray"
    push $P1538, $P1537
    .return ($P1538)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<~~>"  :subid("349_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1542_tgt
    .local int rx1542_pos
    .local int rx1542_off
    .local int rx1542_eos
    .local int rx1542_rep
    .local pmc rx1542_cur
    .local pmc rx1542_debug
    (rx1542_cur, rx1542_pos, rx1542_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1542_cur
    .local pmc match
    .lex "$/", match
    length rx1542_eos, rx1542_tgt
    gt rx1542_pos, rx1542_eos, rx1542_done
    set rx1542_off, 0
    lt rx1542_pos, 2, rx1542_start
    sub rx1542_off, rx1542_pos, 1
    substr rx1542_tgt, rx1542_tgt, rx1542_off
  rx1542_start:
    eq $I10, 1, rx1542_restart
    if_null rx1542_debug, debug_1087
    rx1542_cur."!cursor_debug"("START", "infix:sym<~~>")
  debug_1087:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1546_done
    goto rxscan1546_scan
  rxscan1546_loop:
    (rx1542_pos) = rx1542_cur."from"()
    inc rx1542_pos
    rx1542_cur."!cursor_from"(rx1542_pos)
    ge rx1542_pos, rx1542_eos, rxscan1546_done
  rxscan1546_scan:
    set_addr $I10, rxscan1546_loop
    rx1542_cur."!mark_push"(0, rx1542_pos, $I10)
  rxscan1546_done:
.annotate 'line', 651
  # rx subcapture "sym"
    set_addr $I10, rxcap_1547_fail
    rx1542_cur."!mark_push"(0, rx1542_pos, $I10)
  # rx literal  "~~"
    add $I11, rx1542_pos, 2
    gt $I11, rx1542_eos, rx1542_fail
    sub $I11, rx1542_pos, rx1542_off
    substr $S10, rx1542_tgt, $I11, 2
    ne $S10, "~~", rx1542_fail
    add rx1542_pos, 2
    set_addr $I10, rxcap_1547_fail
    ($I12, $I11) = rx1542_cur."!mark_peek"($I10)
    rx1542_cur."!cursor_pos"($I11)
    ($P10) = rx1542_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1542_pos, "")
    rx1542_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1547_done
  rxcap_1547_fail:
    goto rx1542_fail
  rxcap_1547_done:
  # rx subrule "O" subtype=capture negate=
    rx1542_cur."!cursor_pos"(rx1542_pos)
    $P10 = rx1542_cur."O"("%relational, :reducecheck<smartmatch>")
    unless $P10, rx1542_fail
    rx1542_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1542_pos = $P10."pos"()
  # rx pass
    rx1542_cur."!cursor_pass"(rx1542_pos, "infix:sym<~~>")
    if_null rx1542_debug, debug_1088
    rx1542_cur."!cursor_debug"("PASS", "infix:sym<~~>", " at pos=", rx1542_pos)
  debug_1088:
    .return (rx1542_cur)
  rx1542_restart:
.annotate 'line', 4
    if_null rx1542_debug, debug_1089
    rx1542_cur."!cursor_debug"("NEXT", "infix:sym<~~>")
  debug_1089:
  rx1542_fail:
    (rx1542_rep, rx1542_pos, $I10, $P10) = rx1542_cur."!mark_fail"(0)
    lt rx1542_pos, -1, rx1542_done
    eq rx1542_pos, -1, rx1542_fail
    jump $I10
  rx1542_done:
    rx1542_cur."!cursor_fail"()
    if_null rx1542_debug, debug_1090
    rx1542_cur."!cursor_debug"("FAIL", "infix:sym<~~>")
  debug_1090:
    .return (rx1542_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<~~>"  :nsentry("!PREFIX__infix:sym<~~>") :subid("350_1299591493.348") :method
.annotate 'line', 4
    $P1544 = self."!PREFIX__!subrule"("O", "~~")
    new $P1545, "ResizablePMCArray"
    push $P1545, $P1544
    .return ($P1545)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<&&>"  :subid("351_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1549_tgt
    .local int rx1549_pos
    .local int rx1549_off
    .local int rx1549_eos
    .local int rx1549_rep
    .local pmc rx1549_cur
    .local pmc rx1549_debug
    (rx1549_cur, rx1549_pos, rx1549_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1549_cur
    .local pmc match
    .lex "$/", match
    length rx1549_eos, rx1549_tgt
    gt rx1549_pos, rx1549_eos, rx1549_done
    set rx1549_off, 0
    lt rx1549_pos, 2, rx1549_start
    sub rx1549_off, rx1549_pos, 1
    substr rx1549_tgt, rx1549_tgt, rx1549_off
  rx1549_start:
    eq $I10, 1, rx1549_restart
    if_null rx1549_debug, debug_1091
    rx1549_cur."!cursor_debug"("START", "infix:sym<&&>")
  debug_1091:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1553_done
    goto rxscan1553_scan
  rxscan1553_loop:
    (rx1549_pos) = rx1549_cur."from"()
    inc rx1549_pos
    rx1549_cur."!cursor_from"(rx1549_pos)
    ge rx1549_pos, rx1549_eos, rxscan1553_done
  rxscan1553_scan:
    set_addr $I10, rxscan1553_loop
    rx1549_cur."!mark_push"(0, rx1549_pos, $I10)
  rxscan1553_done:
.annotate 'line', 653
  # rx subcapture "sym"
    set_addr $I10, rxcap_1554_fail
    rx1549_cur."!mark_push"(0, rx1549_pos, $I10)
  # rx literal  "&&"
    add $I11, rx1549_pos, 2
    gt $I11, rx1549_eos, rx1549_fail
    sub $I11, rx1549_pos, rx1549_off
    substr $S10, rx1549_tgt, $I11, 2
    ne $S10, "&&", rx1549_fail
    add rx1549_pos, 2
    set_addr $I10, rxcap_1554_fail
    ($I12, $I11) = rx1549_cur."!mark_peek"($I10)
    rx1549_cur."!cursor_pos"($I11)
    ($P10) = rx1549_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1549_pos, "")
    rx1549_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1554_done
  rxcap_1554_fail:
    goto rx1549_fail
  rxcap_1554_done:
  # rx subrule "O" subtype=capture negate=
    rx1549_cur."!cursor_pos"(rx1549_pos)
    $P10 = rx1549_cur."O"("%tight_and, :pasttype<if>")
    unless $P10, rx1549_fail
    rx1549_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1549_pos = $P10."pos"()
  # rx pass
    rx1549_cur."!cursor_pass"(rx1549_pos, "infix:sym<&&>")
    if_null rx1549_debug, debug_1092
    rx1549_cur."!cursor_debug"("PASS", "infix:sym<&&>", " at pos=", rx1549_pos)
  debug_1092:
    .return (rx1549_cur)
  rx1549_restart:
.annotate 'line', 4
    if_null rx1549_debug, debug_1093
    rx1549_cur."!cursor_debug"("NEXT", "infix:sym<&&>")
  debug_1093:
  rx1549_fail:
    (rx1549_rep, rx1549_pos, $I10, $P10) = rx1549_cur."!mark_fail"(0)
    lt rx1549_pos, -1, rx1549_done
    eq rx1549_pos, -1, rx1549_fail
    jump $I10
  rx1549_done:
    rx1549_cur."!cursor_fail"()
    if_null rx1549_debug, debug_1094
    rx1549_cur."!cursor_debug"("FAIL", "infix:sym<&&>")
  debug_1094:
    .return (rx1549_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<&&>"  :nsentry("!PREFIX__infix:sym<&&>") :subid("352_1299591493.348") :method
.annotate 'line', 4
    $P1551 = self."!PREFIX__!subrule"("O", "&&")
    new $P1552, "ResizablePMCArray"
    push $P1552, $P1551
    .return ($P1552)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<||>"  :subid("353_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1556_tgt
    .local int rx1556_pos
    .local int rx1556_off
    .local int rx1556_eos
    .local int rx1556_rep
    .local pmc rx1556_cur
    .local pmc rx1556_debug
    (rx1556_cur, rx1556_pos, rx1556_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1556_cur
    .local pmc match
    .lex "$/", match
    length rx1556_eos, rx1556_tgt
    gt rx1556_pos, rx1556_eos, rx1556_done
    set rx1556_off, 0
    lt rx1556_pos, 2, rx1556_start
    sub rx1556_off, rx1556_pos, 1
    substr rx1556_tgt, rx1556_tgt, rx1556_off
  rx1556_start:
    eq $I10, 1, rx1556_restart
    if_null rx1556_debug, debug_1095
    rx1556_cur."!cursor_debug"("START", "infix:sym<||>")
  debug_1095:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1560_done
    goto rxscan1560_scan
  rxscan1560_loop:
    (rx1556_pos) = rx1556_cur."from"()
    inc rx1556_pos
    rx1556_cur."!cursor_from"(rx1556_pos)
    ge rx1556_pos, rx1556_eos, rxscan1560_done
  rxscan1560_scan:
    set_addr $I10, rxscan1560_loop
    rx1556_cur."!mark_push"(0, rx1556_pos, $I10)
  rxscan1560_done:
.annotate 'line', 655
  # rx subcapture "sym"
    set_addr $I10, rxcap_1561_fail
    rx1556_cur."!mark_push"(0, rx1556_pos, $I10)
  # rx literal  "||"
    add $I11, rx1556_pos, 2
    gt $I11, rx1556_eos, rx1556_fail
    sub $I11, rx1556_pos, rx1556_off
    substr $S10, rx1556_tgt, $I11, 2
    ne $S10, "||", rx1556_fail
    add rx1556_pos, 2
    set_addr $I10, rxcap_1561_fail
    ($I12, $I11) = rx1556_cur."!mark_peek"($I10)
    rx1556_cur."!cursor_pos"($I11)
    ($P10) = rx1556_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1556_pos, "")
    rx1556_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1561_done
  rxcap_1561_fail:
    goto rx1556_fail
  rxcap_1561_done:
  # rx subrule "O" subtype=capture negate=
    rx1556_cur."!cursor_pos"(rx1556_pos)
    $P10 = rx1556_cur."O"("%tight_or, :pasttype<unless>")
    unless $P10, rx1556_fail
    rx1556_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1556_pos = $P10."pos"()
  # rx pass
    rx1556_cur."!cursor_pass"(rx1556_pos, "infix:sym<||>")
    if_null rx1556_debug, debug_1096
    rx1556_cur."!cursor_debug"("PASS", "infix:sym<||>", " at pos=", rx1556_pos)
  debug_1096:
    .return (rx1556_cur)
  rx1556_restart:
.annotate 'line', 4
    if_null rx1556_debug, debug_1097
    rx1556_cur."!cursor_debug"("NEXT", "infix:sym<||>")
  debug_1097:
  rx1556_fail:
    (rx1556_rep, rx1556_pos, $I10, $P10) = rx1556_cur."!mark_fail"(0)
    lt rx1556_pos, -1, rx1556_done
    eq rx1556_pos, -1, rx1556_fail
    jump $I10
  rx1556_done:
    rx1556_cur."!cursor_fail"()
    if_null rx1556_debug, debug_1098
    rx1556_cur."!cursor_debug"("FAIL", "infix:sym<||>")
  debug_1098:
    .return (rx1556_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<||>"  :nsentry("!PREFIX__infix:sym<||>") :subid("354_1299591493.348") :method
.annotate 'line', 4
    $P1558 = self."!PREFIX__!subrule"("O", "||")
    new $P1559, "ResizablePMCArray"
    push $P1559, $P1558
    .return ($P1559)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<//>"  :subid("355_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1563_tgt
    .local int rx1563_pos
    .local int rx1563_off
    .local int rx1563_eos
    .local int rx1563_rep
    .local pmc rx1563_cur
    .local pmc rx1563_debug
    (rx1563_cur, rx1563_pos, rx1563_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1563_cur
    .local pmc match
    .lex "$/", match
    length rx1563_eos, rx1563_tgt
    gt rx1563_pos, rx1563_eos, rx1563_done
    set rx1563_off, 0
    lt rx1563_pos, 2, rx1563_start
    sub rx1563_off, rx1563_pos, 1
    substr rx1563_tgt, rx1563_tgt, rx1563_off
  rx1563_start:
    eq $I10, 1, rx1563_restart
    if_null rx1563_debug, debug_1099
    rx1563_cur."!cursor_debug"("START", "infix:sym<//>")
  debug_1099:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1567_done
    goto rxscan1567_scan
  rxscan1567_loop:
    (rx1563_pos) = rx1563_cur."from"()
    inc rx1563_pos
    rx1563_cur."!cursor_from"(rx1563_pos)
    ge rx1563_pos, rx1563_eos, rxscan1567_done
  rxscan1567_scan:
    set_addr $I10, rxscan1567_loop
    rx1563_cur."!mark_push"(0, rx1563_pos, $I10)
  rxscan1567_done:
.annotate 'line', 656
  # rx subcapture "sym"
    set_addr $I10, rxcap_1568_fail
    rx1563_cur."!mark_push"(0, rx1563_pos, $I10)
  # rx literal  "//"
    add $I11, rx1563_pos, 2
    gt $I11, rx1563_eos, rx1563_fail
    sub $I11, rx1563_pos, rx1563_off
    substr $S10, rx1563_tgt, $I11, 2
    ne $S10, "//", rx1563_fail
    add rx1563_pos, 2
    set_addr $I10, rxcap_1568_fail
    ($I12, $I11) = rx1563_cur."!mark_peek"($I10)
    rx1563_cur."!cursor_pos"($I11)
    ($P10) = rx1563_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1563_pos, "")
    rx1563_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1568_done
  rxcap_1568_fail:
    goto rx1563_fail
  rxcap_1568_done:
  # rx subrule "O" subtype=capture negate=
    rx1563_cur."!cursor_pos"(rx1563_pos)
    $P10 = rx1563_cur."O"("%tight_or, :pasttype<def_or>")
    unless $P10, rx1563_fail
    rx1563_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1563_pos = $P10."pos"()
  # rx pass
    rx1563_cur."!cursor_pass"(rx1563_pos, "infix:sym<//>")
    if_null rx1563_debug, debug_1100
    rx1563_cur."!cursor_debug"("PASS", "infix:sym<//>", " at pos=", rx1563_pos)
  debug_1100:
    .return (rx1563_cur)
  rx1563_restart:
.annotate 'line', 4
    if_null rx1563_debug, debug_1101
    rx1563_cur."!cursor_debug"("NEXT", "infix:sym<//>")
  debug_1101:
  rx1563_fail:
    (rx1563_rep, rx1563_pos, $I10, $P10) = rx1563_cur."!mark_fail"(0)
    lt rx1563_pos, -1, rx1563_done
    eq rx1563_pos, -1, rx1563_fail
    jump $I10
  rx1563_done:
    rx1563_cur."!cursor_fail"()
    if_null rx1563_debug, debug_1102
    rx1563_cur."!cursor_debug"("FAIL", "infix:sym<//>")
  debug_1102:
    .return (rx1563_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<//>"  :nsentry("!PREFIX__infix:sym<//>") :subid("356_1299591493.348") :method
.annotate 'line', 4
    $P1565 = self."!PREFIX__!subrule"("O", "//")
    new $P1566, "ResizablePMCArray"
    push $P1566, $P1565
    .return ($P1566)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<?? !!>"  :subid("357_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1570_tgt
    .local int rx1570_pos
    .local int rx1570_off
    .local int rx1570_eos
    .local int rx1570_rep
    .local pmc rx1570_cur
    .local pmc rx1570_debug
    (rx1570_cur, rx1570_pos, rx1570_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1570_cur
    .local pmc match
    .lex "$/", match
    length rx1570_eos, rx1570_tgt
    gt rx1570_pos, rx1570_eos, rx1570_done
    set rx1570_off, 0
    lt rx1570_pos, 2, rx1570_start
    sub rx1570_off, rx1570_pos, 1
    substr rx1570_tgt, rx1570_tgt, rx1570_off
  rx1570_start:
    eq $I10, 1, rx1570_restart
    if_null rx1570_debug, debug_1103
    rx1570_cur."!cursor_debug"("START", "infix:sym<?? !!>")
  debug_1103:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1574_done
    goto rxscan1574_scan
  rxscan1574_loop:
    (rx1570_pos) = rx1570_cur."from"()
    inc rx1570_pos
    rx1570_cur."!cursor_from"(rx1570_pos)
    ge rx1570_pos, rx1570_eos, rxscan1574_done
  rxscan1574_scan:
    set_addr $I10, rxscan1574_loop
    rx1570_cur."!mark_push"(0, rx1570_pos, $I10)
  rxscan1574_done:
.annotate 'line', 659
  # rx literal  "??"
    add $I11, rx1570_pos, 2
    gt $I11, rx1570_eos, rx1570_fail
    sub $I11, rx1570_pos, rx1570_off
    substr $S10, rx1570_tgt, $I11, 2
    ne $S10, "??", rx1570_fail
    add rx1570_pos, 2
.annotate 'line', 660
  # rx subrule "ws" subtype=method negate=
    rx1570_cur."!cursor_pos"(rx1570_pos)
    $P10 = rx1570_cur."ws"()
    unless $P10, rx1570_fail
    rx1570_pos = $P10."pos"()
.annotate 'line', 661
  # rx subrule "EXPR" subtype=capture negate=
    rx1570_cur."!cursor_pos"(rx1570_pos)
    $P10 = rx1570_cur."EXPR"("i=")
    unless $P10, rx1570_fail
    rx1570_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx1570_pos = $P10."pos"()
.annotate 'line', 662
  # rx literal  "!!"
    add $I11, rx1570_pos, 2
    gt $I11, rx1570_eos, rx1570_fail
    sub $I11, rx1570_pos, rx1570_off
    substr $S10, rx1570_tgt, $I11, 2
    ne $S10, "!!", rx1570_fail
    add rx1570_pos, 2
.annotate 'line', 663
  # rx subrule "O" subtype=capture negate=
    rx1570_cur."!cursor_pos"(rx1570_pos)
    $P10 = rx1570_cur."O"("%conditional, :reducecheck<ternary>, :pasttype<if>")
    unless $P10, rx1570_fail
    rx1570_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1570_pos = $P10."pos"()
.annotate 'line', 658
  # rx pass
    rx1570_cur."!cursor_pass"(rx1570_pos, "infix:sym<?? !!>")
    if_null rx1570_debug, debug_1104
    rx1570_cur."!cursor_debug"("PASS", "infix:sym<?? !!>", " at pos=", rx1570_pos)
  debug_1104:
    .return (rx1570_cur)
  rx1570_restart:
.annotate 'line', 4
    if_null rx1570_debug, debug_1105
    rx1570_cur."!cursor_debug"("NEXT", "infix:sym<?? !!>")
  debug_1105:
  rx1570_fail:
    (rx1570_rep, rx1570_pos, $I10, $P10) = rx1570_cur."!mark_fail"(0)
    lt rx1570_pos, -1, rx1570_done
    eq rx1570_pos, -1, rx1570_fail
    jump $I10
  rx1570_done:
    rx1570_cur."!cursor_fail"()
    if_null rx1570_debug, debug_1106
    rx1570_cur."!cursor_debug"("FAIL", "infix:sym<?? !!>")
  debug_1106:
    .return (rx1570_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<?? !!>"  :nsentry("!PREFIX__infix:sym<?? !!>") :subid("358_1299591493.348") :method
.annotate 'line', 4
    $P1572 = self."!PREFIX__!subrule"("ws", "??")
    new $P1573, "ResizablePMCArray"
    push $P1573, $P1572
    .return ($P1573)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<=>"  :subid("359_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1576_tgt
    .local int rx1576_pos
    .local int rx1576_off
    .local int rx1576_eos
    .local int rx1576_rep
    .local pmc rx1576_cur
    .local pmc rx1576_debug
    (rx1576_cur, rx1576_pos, rx1576_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1576_cur
    .local pmc match
    .lex "$/", match
    length rx1576_eos, rx1576_tgt
    gt rx1576_pos, rx1576_eos, rx1576_done
    set rx1576_off, 0
    lt rx1576_pos, 2, rx1576_start
    sub rx1576_off, rx1576_pos, 1
    substr rx1576_tgt, rx1576_tgt, rx1576_off
  rx1576_start:
    eq $I10, 1, rx1576_restart
    if_null rx1576_debug, debug_1107
    rx1576_cur."!cursor_debug"("START", "infix:sym<=>")
  debug_1107:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1580_done
    goto rxscan1580_scan
  rxscan1580_loop:
    (rx1576_pos) = rx1576_cur."from"()
    inc rx1576_pos
    rx1576_cur."!cursor_from"(rx1576_pos)
    ge rx1576_pos, rx1576_eos, rxscan1580_done
  rxscan1580_scan:
    set_addr $I10, rxscan1580_loop
    rx1576_cur."!mark_push"(0, rx1576_pos, $I10)
  rxscan1580_done:
.annotate 'line', 667
  # rx subcapture "sym"
    set_addr $I10, rxcap_1581_fail
    rx1576_cur."!mark_push"(0, rx1576_pos, $I10)
  # rx literal  "="
    add $I11, rx1576_pos, 1
    gt $I11, rx1576_eos, rx1576_fail
    sub $I11, rx1576_pos, rx1576_off
    ord $I11, rx1576_tgt, $I11
    ne $I11, 61, rx1576_fail
    add rx1576_pos, 1
    set_addr $I10, rxcap_1581_fail
    ($I12, $I11) = rx1576_cur."!mark_peek"($I10)
    rx1576_cur."!cursor_pos"($I11)
    ($P10) = rx1576_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1576_pos, "")
    rx1576_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1581_done
  rxcap_1581_fail:
    goto rx1576_fail
  rxcap_1581_done:
  # rx subrule "panic" subtype=method negate=
    rx1576_cur."!cursor_pos"(rx1576_pos)
    $P10 = rx1576_cur."panic"("Assignment (\"=\") not supported in NQP, use \":=\" instead")
    unless $P10, rx1576_fail
    rx1576_pos = $P10."pos"()
.annotate 'line', 666
  # rx pass
    rx1576_cur."!cursor_pass"(rx1576_pos, "infix:sym<=>")
    if_null rx1576_debug, debug_1108
    rx1576_cur."!cursor_debug"("PASS", "infix:sym<=>", " at pos=", rx1576_pos)
  debug_1108:
    .return (rx1576_cur)
  rx1576_restart:
.annotate 'line', 4
    if_null rx1576_debug, debug_1109
    rx1576_cur."!cursor_debug"("NEXT", "infix:sym<=>")
  debug_1109:
  rx1576_fail:
    (rx1576_rep, rx1576_pos, $I10, $P10) = rx1576_cur."!mark_fail"(0)
    lt rx1576_pos, -1, rx1576_done
    eq rx1576_pos, -1, rx1576_fail
    jump $I10
  rx1576_done:
    rx1576_cur."!cursor_fail"()
    if_null rx1576_debug, debug_1110
    rx1576_cur."!cursor_debug"("FAIL", "infix:sym<=>")
  debug_1110:
    .return (rx1576_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<=>"  :nsentry("!PREFIX__infix:sym<=>") :subid("360_1299591493.348") :method
.annotate 'line', 4
    $P1578 = self."!PREFIX__!subrule"("panic", "=")
    new $P1579, "ResizablePMCArray"
    push $P1579, $P1578
    .return ($P1579)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<:=>"  :subid("361_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1583_tgt
    .local int rx1583_pos
    .local int rx1583_off
    .local int rx1583_eos
    .local int rx1583_rep
    .local pmc rx1583_cur
    .local pmc rx1583_debug
    (rx1583_cur, rx1583_pos, rx1583_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1583_cur
    .local pmc match
    .lex "$/", match
    length rx1583_eos, rx1583_tgt
    gt rx1583_pos, rx1583_eos, rx1583_done
    set rx1583_off, 0
    lt rx1583_pos, 2, rx1583_start
    sub rx1583_off, rx1583_pos, 1
    substr rx1583_tgt, rx1583_tgt, rx1583_off
  rx1583_start:
    eq $I10, 1, rx1583_restart
    if_null rx1583_debug, debug_1111
    rx1583_cur."!cursor_debug"("START", "infix:sym<:=>")
  debug_1111:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1587_done
    goto rxscan1587_scan
  rxscan1587_loop:
    (rx1583_pos) = rx1583_cur."from"()
    inc rx1583_pos
    rx1583_cur."!cursor_from"(rx1583_pos)
    ge rx1583_pos, rx1583_eos, rxscan1587_done
  rxscan1587_scan:
    set_addr $I10, rxscan1587_loop
    rx1583_cur."!mark_push"(0, rx1583_pos, $I10)
  rxscan1587_done:
.annotate 'line', 669
  # rx subcapture "sym"
    set_addr $I10, rxcap_1588_fail
    rx1583_cur."!mark_push"(0, rx1583_pos, $I10)
  # rx literal  ":="
    add $I11, rx1583_pos, 2
    gt $I11, rx1583_eos, rx1583_fail
    sub $I11, rx1583_pos, rx1583_off
    substr $S10, rx1583_tgt, $I11, 2
    ne $S10, ":=", rx1583_fail
    add rx1583_pos, 2
    set_addr $I10, rxcap_1588_fail
    ($I12, $I11) = rx1583_cur."!mark_peek"($I10)
    rx1583_cur."!cursor_pos"($I11)
    ($P10) = rx1583_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1583_pos, "")
    rx1583_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1588_done
  rxcap_1588_fail:
    goto rx1583_fail
  rxcap_1588_done:
  # rx subrule "O" subtype=capture negate=
    rx1583_cur."!cursor_pos"(rx1583_pos)
    $P10 = rx1583_cur."O"("%assignment, :pasttype<bind>")
    unless $P10, rx1583_fail
    rx1583_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1583_pos = $P10."pos"()
  # rx pass
    rx1583_cur."!cursor_pass"(rx1583_pos, "infix:sym<:=>")
    if_null rx1583_debug, debug_1112
    rx1583_cur."!cursor_debug"("PASS", "infix:sym<:=>", " at pos=", rx1583_pos)
  debug_1112:
    .return (rx1583_cur)
  rx1583_restart:
.annotate 'line', 4
    if_null rx1583_debug, debug_1113
    rx1583_cur."!cursor_debug"("NEXT", "infix:sym<:=>")
  debug_1113:
  rx1583_fail:
    (rx1583_rep, rx1583_pos, $I10, $P10) = rx1583_cur."!mark_fail"(0)
    lt rx1583_pos, -1, rx1583_done
    eq rx1583_pos, -1, rx1583_fail
    jump $I10
  rx1583_done:
    rx1583_cur."!cursor_fail"()
    if_null rx1583_debug, debug_1114
    rx1583_cur."!cursor_debug"("FAIL", "infix:sym<:=>")
  debug_1114:
    .return (rx1583_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<:=>"  :nsentry("!PREFIX__infix:sym<:=>") :subid("362_1299591493.348") :method
.annotate 'line', 4
    $P1585 = self."!PREFIX__!subrule"("O", ":=")
    new $P1586, "ResizablePMCArray"
    push $P1586, $P1585
    .return ($P1586)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<::=>"  :subid("363_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1590_tgt
    .local int rx1590_pos
    .local int rx1590_off
    .local int rx1590_eos
    .local int rx1590_rep
    .local pmc rx1590_cur
    .local pmc rx1590_debug
    (rx1590_cur, rx1590_pos, rx1590_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1590_cur
    .local pmc match
    .lex "$/", match
    length rx1590_eos, rx1590_tgt
    gt rx1590_pos, rx1590_eos, rx1590_done
    set rx1590_off, 0
    lt rx1590_pos, 2, rx1590_start
    sub rx1590_off, rx1590_pos, 1
    substr rx1590_tgt, rx1590_tgt, rx1590_off
  rx1590_start:
    eq $I10, 1, rx1590_restart
    if_null rx1590_debug, debug_1115
    rx1590_cur."!cursor_debug"("START", "infix:sym<::=>")
  debug_1115:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1594_done
    goto rxscan1594_scan
  rxscan1594_loop:
    (rx1590_pos) = rx1590_cur."from"()
    inc rx1590_pos
    rx1590_cur."!cursor_from"(rx1590_pos)
    ge rx1590_pos, rx1590_eos, rxscan1594_done
  rxscan1594_scan:
    set_addr $I10, rxscan1594_loop
    rx1590_cur."!mark_push"(0, rx1590_pos, $I10)
  rxscan1594_done:
.annotate 'line', 670
  # rx subcapture "sym"
    set_addr $I10, rxcap_1595_fail
    rx1590_cur."!mark_push"(0, rx1590_pos, $I10)
  # rx literal  "::="
    add $I11, rx1590_pos, 3
    gt $I11, rx1590_eos, rx1590_fail
    sub $I11, rx1590_pos, rx1590_off
    substr $S10, rx1590_tgt, $I11, 3
    ne $S10, "::=", rx1590_fail
    add rx1590_pos, 3
    set_addr $I10, rxcap_1595_fail
    ($I12, $I11) = rx1590_cur."!mark_peek"($I10)
    rx1590_cur."!cursor_pos"($I11)
    ($P10) = rx1590_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1590_pos, "")
    rx1590_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1595_done
  rxcap_1595_fail:
    goto rx1590_fail
  rxcap_1595_done:
  # rx subrule "O" subtype=capture negate=
    rx1590_cur."!cursor_pos"(rx1590_pos)
    $P10 = rx1590_cur."O"("%assignment, :pasttype<bind>")
    unless $P10, rx1590_fail
    rx1590_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1590_pos = $P10."pos"()
  # rx pass
    rx1590_cur."!cursor_pass"(rx1590_pos, "infix:sym<::=>")
    if_null rx1590_debug, debug_1116
    rx1590_cur."!cursor_debug"("PASS", "infix:sym<::=>", " at pos=", rx1590_pos)
  debug_1116:
    .return (rx1590_cur)
  rx1590_restart:
.annotate 'line', 4
    if_null rx1590_debug, debug_1117
    rx1590_cur."!cursor_debug"("NEXT", "infix:sym<::=>")
  debug_1117:
  rx1590_fail:
    (rx1590_rep, rx1590_pos, $I10, $P10) = rx1590_cur."!mark_fail"(0)
    lt rx1590_pos, -1, rx1590_done
    eq rx1590_pos, -1, rx1590_fail
    jump $I10
  rx1590_done:
    rx1590_cur."!cursor_fail"()
    if_null rx1590_debug, debug_1118
    rx1590_cur."!cursor_debug"("FAIL", "infix:sym<::=>")
  debug_1118:
    .return (rx1590_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<::=>"  :nsentry("!PREFIX__infix:sym<::=>") :subid("364_1299591493.348") :method
.annotate 'line', 4
    $P1592 = self."!PREFIX__!subrule"("O", "::=")
    new $P1593, "ResizablePMCArray"
    push $P1593, $P1592
    .return ($P1593)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<,>"  :subid("365_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1597_tgt
    .local int rx1597_pos
    .local int rx1597_off
    .local int rx1597_eos
    .local int rx1597_rep
    .local pmc rx1597_cur
    .local pmc rx1597_debug
    (rx1597_cur, rx1597_pos, rx1597_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1597_cur
    .local pmc match
    .lex "$/", match
    length rx1597_eos, rx1597_tgt
    gt rx1597_pos, rx1597_eos, rx1597_done
    set rx1597_off, 0
    lt rx1597_pos, 2, rx1597_start
    sub rx1597_off, rx1597_pos, 1
    substr rx1597_tgt, rx1597_tgt, rx1597_off
  rx1597_start:
    eq $I10, 1, rx1597_restart
    if_null rx1597_debug, debug_1119
    rx1597_cur."!cursor_debug"("START", "infix:sym<,>")
  debug_1119:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1601_done
    goto rxscan1601_scan
  rxscan1601_loop:
    (rx1597_pos) = rx1597_cur."from"()
    inc rx1597_pos
    rx1597_cur."!cursor_from"(rx1597_pos)
    ge rx1597_pos, rx1597_eos, rxscan1601_done
  rxscan1601_scan:
    set_addr $I10, rxscan1601_loop
    rx1597_cur."!mark_push"(0, rx1597_pos, $I10)
  rxscan1601_done:
.annotate 'line', 672
  # rx subcapture "sym"
    set_addr $I10, rxcap_1602_fail
    rx1597_cur."!mark_push"(0, rx1597_pos, $I10)
  # rx literal  ","
    add $I11, rx1597_pos, 1
    gt $I11, rx1597_eos, rx1597_fail
    sub $I11, rx1597_pos, rx1597_off
    ord $I11, rx1597_tgt, $I11
    ne $I11, 44, rx1597_fail
    add rx1597_pos, 1
    set_addr $I10, rxcap_1602_fail
    ($I12, $I11) = rx1597_cur."!mark_peek"($I10)
    rx1597_cur."!cursor_pos"($I11)
    ($P10) = rx1597_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1597_pos, "")
    rx1597_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1602_done
  rxcap_1602_fail:
    goto rx1597_fail
  rxcap_1602_done:
  # rx subrule "O" subtype=capture negate=
    rx1597_cur."!cursor_pos"(rx1597_pos)
    $P10 = rx1597_cur."O"("%comma, :pasttype<list>")
    unless $P10, rx1597_fail
    rx1597_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1597_pos = $P10."pos"()
  # rx pass
    rx1597_cur."!cursor_pass"(rx1597_pos, "infix:sym<,>")
    if_null rx1597_debug, debug_1120
    rx1597_cur."!cursor_debug"("PASS", "infix:sym<,>", " at pos=", rx1597_pos)
  debug_1120:
    .return (rx1597_cur)
  rx1597_restart:
.annotate 'line', 4
    if_null rx1597_debug, debug_1121
    rx1597_cur."!cursor_debug"("NEXT", "infix:sym<,>")
  debug_1121:
  rx1597_fail:
    (rx1597_rep, rx1597_pos, $I10, $P10) = rx1597_cur."!mark_fail"(0)
    lt rx1597_pos, -1, rx1597_done
    eq rx1597_pos, -1, rx1597_fail
    jump $I10
  rx1597_done:
    rx1597_cur."!cursor_fail"()
    if_null rx1597_debug, debug_1122
    rx1597_cur."!cursor_debug"("FAIL", "infix:sym<,>")
  debug_1122:
    .return (rx1597_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<,>"  :nsentry("!PREFIX__infix:sym<,>") :subid("366_1299591493.348") :method
.annotate 'line', 4
    $P1599 = self."!PREFIX__!subrule"("O", ",")
    new $P1600, "ResizablePMCArray"
    push $P1600, $P1599
    .return ($P1600)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<return>"  :subid("367_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .const 'Sub' $P1612 = "369_1299591493.348" 
    capture_lex $P1612
    .local string rx1604_tgt
    .local int rx1604_pos
    .local int rx1604_off
    .local int rx1604_eos
    .local int rx1604_rep
    .local pmc rx1604_cur
    .local pmc rx1604_debug
    (rx1604_cur, rx1604_pos, rx1604_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1604_cur
    .local pmc match
    .lex "$/", match
    length rx1604_eos, rx1604_tgt
    gt rx1604_pos, rx1604_eos, rx1604_done
    set rx1604_off, 0
    lt rx1604_pos, 2, rx1604_start
    sub rx1604_off, rx1604_pos, 1
    substr rx1604_tgt, rx1604_tgt, rx1604_off
  rx1604_start:
    eq $I10, 1, rx1604_restart
    if_null rx1604_debug, debug_1123
    rx1604_cur."!cursor_debug"("START", "prefix:sym<return>")
  debug_1123:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1607_done
    goto rxscan1607_scan
  rxscan1607_loop:
    (rx1604_pos) = rx1604_cur."from"()
    inc rx1604_pos
    rx1604_cur."!cursor_from"(rx1604_pos)
    ge rx1604_pos, rx1604_eos, rxscan1607_done
  rxscan1607_scan:
    set_addr $I10, rxscan1607_loop
    rx1604_cur."!mark_push"(0, rx1604_pos, $I10)
  rxscan1607_done:
.annotate 'line', 674
  # rx subcapture "sym"
    set_addr $I10, rxcap_1608_fail
    rx1604_cur."!mark_push"(0, rx1604_pos, $I10)
  # rx literal  "return"
    add $I11, rx1604_pos, 6
    gt $I11, rx1604_eos, rx1604_fail
    sub $I11, rx1604_pos, rx1604_off
    substr $S10, rx1604_tgt, $I11, 6
    ne $S10, "return", rx1604_fail
    add rx1604_pos, 6
    set_addr $I10, rxcap_1608_fail
    ($I12, $I11) = rx1604_cur."!mark_peek"($I10)
    rx1604_cur."!cursor_pos"($I11)
    ($P10) = rx1604_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1604_pos, "")
    rx1604_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1608_done
  rxcap_1608_fail:
    goto rx1604_fail
  rxcap_1608_done:
  # rx charclass s
    ge rx1604_pos, rx1604_eos, rx1604_fail
    sub $I10, rx1604_pos, rx1604_off
    is_cclass $I11, 32, rx1604_tgt, $I10
    unless $I11, rx1604_fail
    inc rx1604_pos
  # rx subrule "O" subtype=capture negate=
    rx1604_cur."!cursor_pos"(rx1604_pos)
    $P10 = rx1604_cur."O"("%list_prefix, :pasttype<return>")
    unless $P10, rx1604_fail
    rx1604_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1604_pos = $P10."pos"()
    rx1604_cur."!cursor_pos"(rx1604_pos)
    find_lex $P1609, unicode:"$\x{a2}"
    $P1610 = $P1609."MATCH"()
    store_lex "$/", $P1610
    .const 'Sub' $P1612 = "369_1299591493.348" 
    capture_lex $P1612
    $P1614 = $P1612()
  # rx pass
    rx1604_cur."!cursor_pass"(rx1604_pos, "prefix:sym<return>")
    if_null rx1604_debug, debug_1124
    rx1604_cur."!cursor_debug"("PASS", "prefix:sym<return>", " at pos=", rx1604_pos)
  debug_1124:
    .return (rx1604_cur)
  rx1604_restart:
.annotate 'line', 4
    if_null rx1604_debug, debug_1125
    rx1604_cur."!cursor_debug"("NEXT", "prefix:sym<return>")
  debug_1125:
  rx1604_fail:
    (rx1604_rep, rx1604_pos, $I10, $P10) = rx1604_cur."!mark_fail"(0)
    lt rx1604_pos, -1, rx1604_done
    eq rx1604_pos, -1, rx1604_fail
    jump $I10
  rx1604_done:
    rx1604_cur."!cursor_fail"()
    if_null rx1604_debug, debug_1126
    rx1604_cur."!cursor_debug"("FAIL", "prefix:sym<return>")
  debug_1126:
    .return (rx1604_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<return>"  :nsentry("!PREFIX__prefix:sym<return>") :subid("368_1299591493.348") :method
.annotate 'line', 4
    new $P1606, "ResizablePMCArray"
    push $P1606, "return"
    .return ($P1606)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1611"  :anon :subid("369_1299591493.348") :outer("367_1299591493.348")
.annotate 'line', 674
    new $P1613, "Integer"
    assign $P1613, 1
    store_dynamic_lex "$*RETURN_USED", $P1613
    .return ($P1613)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<make>"  :subid("370_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1616_tgt
    .local int rx1616_pos
    .local int rx1616_off
    .local int rx1616_eos
    .local int rx1616_rep
    .local pmc rx1616_cur
    .local pmc rx1616_debug
    (rx1616_cur, rx1616_pos, rx1616_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1616_cur
    .local pmc match
    .lex "$/", match
    length rx1616_eos, rx1616_tgt
    gt rx1616_pos, rx1616_eos, rx1616_done
    set rx1616_off, 0
    lt rx1616_pos, 2, rx1616_start
    sub rx1616_off, rx1616_pos, 1
    substr rx1616_tgt, rx1616_tgt, rx1616_off
  rx1616_start:
    eq $I10, 1, rx1616_restart
    if_null rx1616_debug, debug_1127
    rx1616_cur."!cursor_debug"("START", "prefix:sym<make>")
  debug_1127:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1619_done
    goto rxscan1619_scan
  rxscan1619_loop:
    (rx1616_pos) = rx1616_cur."from"()
    inc rx1616_pos
    rx1616_cur."!cursor_from"(rx1616_pos)
    ge rx1616_pos, rx1616_eos, rxscan1619_done
  rxscan1619_scan:
    set_addr $I10, rxscan1619_loop
    rx1616_cur."!mark_push"(0, rx1616_pos, $I10)
  rxscan1619_done:
.annotate 'line', 675
  # rx subcapture "sym"
    set_addr $I10, rxcap_1620_fail
    rx1616_cur."!mark_push"(0, rx1616_pos, $I10)
  # rx literal  "make"
    add $I11, rx1616_pos, 4
    gt $I11, rx1616_eos, rx1616_fail
    sub $I11, rx1616_pos, rx1616_off
    substr $S10, rx1616_tgt, $I11, 4
    ne $S10, "make", rx1616_fail
    add rx1616_pos, 4
    set_addr $I10, rxcap_1620_fail
    ($I12, $I11) = rx1616_cur."!mark_peek"($I10)
    rx1616_cur."!cursor_pos"($I11)
    ($P10) = rx1616_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1616_pos, "")
    rx1616_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1620_done
  rxcap_1620_fail:
    goto rx1616_fail
  rxcap_1620_done:
  # rx charclass s
    ge rx1616_pos, rx1616_eos, rx1616_fail
    sub $I10, rx1616_pos, rx1616_off
    is_cclass $I11, 32, rx1616_tgt, $I10
    unless $I11, rx1616_fail
    inc rx1616_pos
  # rx subrule "O" subtype=capture negate=
    rx1616_cur."!cursor_pos"(rx1616_pos)
    $P10 = rx1616_cur."O"("%list_prefix")
    unless $P10, rx1616_fail
    rx1616_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1616_pos = $P10."pos"()
  # rx pass
    rx1616_cur."!cursor_pass"(rx1616_pos, "prefix:sym<make>")
    if_null rx1616_debug, debug_1128
    rx1616_cur."!cursor_debug"("PASS", "prefix:sym<make>", " at pos=", rx1616_pos)
  debug_1128:
    .return (rx1616_cur)
  rx1616_restart:
.annotate 'line', 4
    if_null rx1616_debug, debug_1129
    rx1616_cur."!cursor_debug"("NEXT", "prefix:sym<make>")
  debug_1129:
  rx1616_fail:
    (rx1616_rep, rx1616_pos, $I10, $P10) = rx1616_cur."!mark_fail"(0)
    lt rx1616_pos, -1, rx1616_done
    eq rx1616_pos, -1, rx1616_fail
    jump $I10
  rx1616_done:
    rx1616_cur."!cursor_fail"()
    if_null rx1616_debug, debug_1130
    rx1616_cur."!cursor_debug"("FAIL", "prefix:sym<make>")
  debug_1130:
    .return (rx1616_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<make>"  :nsentry("!PREFIX__prefix:sym<make>") :subid("371_1299591493.348") :method
.annotate 'line', 4
    new $P1618, "ResizablePMCArray"
    push $P1618, "make"
    .return ($P1618)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<last>"  :subid("372_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1622_tgt
    .local int rx1622_pos
    .local int rx1622_off
    .local int rx1622_eos
    .local int rx1622_rep
    .local pmc rx1622_cur
    .local pmc rx1622_debug
    (rx1622_cur, rx1622_pos, rx1622_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1622_cur
    .local pmc match
    .lex "$/", match
    length rx1622_eos, rx1622_tgt
    gt rx1622_pos, rx1622_eos, rx1622_done
    set rx1622_off, 0
    lt rx1622_pos, 2, rx1622_start
    sub rx1622_off, rx1622_pos, 1
    substr rx1622_tgt, rx1622_tgt, rx1622_off
  rx1622_start:
    eq $I10, 1, rx1622_restart
    if_null rx1622_debug, debug_1131
    rx1622_cur."!cursor_debug"("START", "term:sym<last>")
  debug_1131:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1625_done
    goto rxscan1625_scan
  rxscan1625_loop:
    (rx1622_pos) = rx1622_cur."from"()
    inc rx1622_pos
    rx1622_cur."!cursor_from"(rx1622_pos)
    ge rx1622_pos, rx1622_eos, rxscan1625_done
  rxscan1625_scan:
    set_addr $I10, rxscan1625_loop
    rx1622_cur."!mark_push"(0, rx1622_pos, $I10)
  rxscan1625_done:
.annotate 'line', 676
  # rx subcapture "sym"
    set_addr $I10, rxcap_1626_fail
    rx1622_cur."!mark_push"(0, rx1622_pos, $I10)
  # rx literal  "last"
    add $I11, rx1622_pos, 4
    gt $I11, rx1622_eos, rx1622_fail
    sub $I11, rx1622_pos, rx1622_off
    substr $S10, rx1622_tgt, $I11, 4
    ne $S10, "last", rx1622_fail
    add rx1622_pos, 4
    set_addr $I10, rxcap_1626_fail
    ($I12, $I11) = rx1622_cur."!mark_peek"($I10)
    rx1622_cur."!cursor_pos"($I11)
    ($P10) = rx1622_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1622_pos, "")
    rx1622_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1626_done
  rxcap_1626_fail:
    goto rx1622_fail
  rxcap_1626_done:
  # rx pass
    rx1622_cur."!cursor_pass"(rx1622_pos, "term:sym<last>")
    if_null rx1622_debug, debug_1132
    rx1622_cur."!cursor_debug"("PASS", "term:sym<last>", " at pos=", rx1622_pos)
  debug_1132:
    .return (rx1622_cur)
  rx1622_restart:
.annotate 'line', 4
    if_null rx1622_debug, debug_1133
    rx1622_cur."!cursor_debug"("NEXT", "term:sym<last>")
  debug_1133:
  rx1622_fail:
    (rx1622_rep, rx1622_pos, $I10, $P10) = rx1622_cur."!mark_fail"(0)
    lt rx1622_pos, -1, rx1622_done
    eq rx1622_pos, -1, rx1622_fail
    jump $I10
  rx1622_done:
    rx1622_cur."!cursor_fail"()
    if_null rx1622_debug, debug_1134
    rx1622_cur."!cursor_debug"("FAIL", "term:sym<last>")
  debug_1134:
    .return (rx1622_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<last>"  :nsentry("!PREFIX__term:sym<last>") :subid("373_1299591493.348") :method
.annotate 'line', 4
    new $P1624, "ResizablePMCArray"
    push $P1624, "last"
    .return ($P1624)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<next>"  :subid("374_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1628_tgt
    .local int rx1628_pos
    .local int rx1628_off
    .local int rx1628_eos
    .local int rx1628_rep
    .local pmc rx1628_cur
    .local pmc rx1628_debug
    (rx1628_cur, rx1628_pos, rx1628_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1628_cur
    .local pmc match
    .lex "$/", match
    length rx1628_eos, rx1628_tgt
    gt rx1628_pos, rx1628_eos, rx1628_done
    set rx1628_off, 0
    lt rx1628_pos, 2, rx1628_start
    sub rx1628_off, rx1628_pos, 1
    substr rx1628_tgt, rx1628_tgt, rx1628_off
  rx1628_start:
    eq $I10, 1, rx1628_restart
    if_null rx1628_debug, debug_1135
    rx1628_cur."!cursor_debug"("START", "term:sym<next>")
  debug_1135:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1631_done
    goto rxscan1631_scan
  rxscan1631_loop:
    (rx1628_pos) = rx1628_cur."from"()
    inc rx1628_pos
    rx1628_cur."!cursor_from"(rx1628_pos)
    ge rx1628_pos, rx1628_eos, rxscan1631_done
  rxscan1631_scan:
    set_addr $I10, rxscan1631_loop
    rx1628_cur."!mark_push"(0, rx1628_pos, $I10)
  rxscan1631_done:
.annotate 'line', 677
  # rx subcapture "sym"
    set_addr $I10, rxcap_1632_fail
    rx1628_cur."!mark_push"(0, rx1628_pos, $I10)
  # rx literal  "next"
    add $I11, rx1628_pos, 4
    gt $I11, rx1628_eos, rx1628_fail
    sub $I11, rx1628_pos, rx1628_off
    substr $S10, rx1628_tgt, $I11, 4
    ne $S10, "next", rx1628_fail
    add rx1628_pos, 4
    set_addr $I10, rxcap_1632_fail
    ($I12, $I11) = rx1628_cur."!mark_peek"($I10)
    rx1628_cur."!cursor_pos"($I11)
    ($P10) = rx1628_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1628_pos, "")
    rx1628_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1632_done
  rxcap_1632_fail:
    goto rx1628_fail
  rxcap_1632_done:
  # rx pass
    rx1628_cur."!cursor_pass"(rx1628_pos, "term:sym<next>")
    if_null rx1628_debug, debug_1136
    rx1628_cur."!cursor_debug"("PASS", "term:sym<next>", " at pos=", rx1628_pos)
  debug_1136:
    .return (rx1628_cur)
  rx1628_restart:
.annotate 'line', 4
    if_null rx1628_debug, debug_1137
    rx1628_cur."!cursor_debug"("NEXT", "term:sym<next>")
  debug_1137:
  rx1628_fail:
    (rx1628_rep, rx1628_pos, $I10, $P10) = rx1628_cur."!mark_fail"(0)
    lt rx1628_pos, -1, rx1628_done
    eq rx1628_pos, -1, rx1628_fail
    jump $I10
  rx1628_done:
    rx1628_cur."!cursor_fail"()
    if_null rx1628_debug, debug_1138
    rx1628_cur."!cursor_debug"("FAIL", "term:sym<next>")
  debug_1138:
    .return (rx1628_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<next>"  :nsentry("!PREFIX__term:sym<next>") :subid("375_1299591493.348") :method
.annotate 'line', 4
    new $P1630, "ResizablePMCArray"
    push $P1630, "next"
    .return ($P1630)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<redo>"  :subid("376_1299591493.348") :method :outer("11_1299591493.348")
.annotate 'line', 4
    .local string rx1634_tgt
    .local int rx1634_pos
    .local int rx1634_off
    .local int rx1634_eos
    .local int rx1634_rep
    .local pmc rx1634_cur
    .local pmc rx1634_debug
    (rx1634_cur, rx1634_pos, rx1634_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1634_cur
    .local pmc match
    .lex "$/", match
    length rx1634_eos, rx1634_tgt
    gt rx1634_pos, rx1634_eos, rx1634_done
    set rx1634_off, 0
    lt rx1634_pos, 2, rx1634_start
    sub rx1634_off, rx1634_pos, 1
    substr rx1634_tgt, rx1634_tgt, rx1634_off
  rx1634_start:
    eq $I10, 1, rx1634_restart
    if_null rx1634_debug, debug_1139
    rx1634_cur."!cursor_debug"("START", "term:sym<redo>")
  debug_1139:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1637_done
    goto rxscan1637_scan
  rxscan1637_loop:
    (rx1634_pos) = rx1634_cur."from"()
    inc rx1634_pos
    rx1634_cur."!cursor_from"(rx1634_pos)
    ge rx1634_pos, rx1634_eos, rxscan1637_done
  rxscan1637_scan:
    set_addr $I10, rxscan1637_loop
    rx1634_cur."!mark_push"(0, rx1634_pos, $I10)
  rxscan1637_done:
.annotate 'line', 678
  # rx subcapture "sym"
    set_addr $I10, rxcap_1638_fail
    rx1634_cur."!mark_push"(0, rx1634_pos, $I10)
  # rx literal  "redo"
    add $I11, rx1634_pos, 4
    gt $I11, rx1634_eos, rx1634_fail
    sub $I11, rx1634_pos, rx1634_off
    substr $S10, rx1634_tgt, $I11, 4
    ne $S10, "redo", rx1634_fail
    add rx1634_pos, 4
    set_addr $I10, rxcap_1638_fail
    ($I12, $I11) = rx1634_cur."!mark_peek"($I10)
    rx1634_cur."!cursor_pos"($I11)
    ($P10) = rx1634_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1634_pos, "")
    rx1634_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1638_done
  rxcap_1638_fail:
    goto rx1634_fail
  rxcap_1638_done:
  # rx pass
    rx1634_cur."!cursor_pass"(rx1634_pos, "term:sym<redo>")
    if_null rx1634_debug, debug_1140
    rx1634_cur."!cursor_debug"("PASS", "term:sym<redo>", " at pos=", rx1634_pos)
  debug_1140:
    .return (rx1634_cur)
  rx1634_restart:
.annotate 'line', 4
    if_null rx1634_debug, debug_1141
    rx1634_cur."!cursor_debug"("NEXT", "term:sym<redo>")
  debug_1141:
  rx1634_fail:
    (rx1634_rep, rx1634_pos, $I10, $P10) = rx1634_cur."!mark_fail"(0)
    lt rx1634_pos, -1, rx1634_done
    eq rx1634_pos, -1, rx1634_fail
    jump $I10
  rx1634_done:
    rx1634_cur."!cursor_fail"()
    if_null rx1634_debug, debug_1142
    rx1634_cur."!cursor_debug"("FAIL", "term:sym<redo>")
  debug_1142:
    .return (rx1634_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<redo>"  :nsentry("!PREFIX__term:sym<redo>") :subid("377_1299591493.348") :method
.annotate 'line', 4
    new $P1636, "ResizablePMCArray"
    push $P1636, "redo"
    .return ($P1636)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "smartmatch"  :subid("378_1299591493.348") :outer("11_1299591493.348")
    .param pmc param_1640
    .param pmc param_1641
.annotate 'line', 680
    .lex "self", param_1640
    .lex "$/", param_1641
.annotate 'line', 682
    new $P1642, "Undef"
    .lex "$t", $P1642
    find_lex $P1643, "$/"
    unless_null $P1643, vivify_1143
    $P1643 = root_new ['parrot';'ResizablePMCArray']
  vivify_1143:
    set $P1644, $P1643[0]
    unless_null $P1644, vivify_1144
    new $P1644, "Undef"
  vivify_1144:
    store_lex "$t", $P1644
    find_lex $P1645, "$/"
    unless_null $P1645, vivify_1145
    $P1645 = root_new ['parrot';'ResizablePMCArray']
  vivify_1145:
    set $P1646, $P1645[1]
    unless_null $P1646, vivify_1146
    new $P1646, "Undef"
  vivify_1146:
    find_lex $P1647, "$/"
    unless_null $P1647, vivify_1147
    $P1647 = root_new ['parrot';'ResizablePMCArray']
    store_lex "$/", $P1647
  vivify_1147:
    set $P1647[0], $P1646
    find_lex $P1648, "$t"
    find_lex $P1649, "$/"
    unless_null $P1649, vivify_1148
    $P1649 = root_new ['parrot';'ResizablePMCArray']
    store_lex "$/", $P1649
  vivify_1148:
    set $P1649[1], $P1648
.annotate 'line', 680
    .return ($P1648)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block1650"  :subid("379_1299591493.348") :outer("11_1299591493.348")
.annotate 'line', 686
    .const 'Sub' $P1715 = "400_1299591493.348" 
    capture_lex $P1715
    .const 'Sub' $P1708 = "398_1299591493.348" 
    capture_lex $P1708
    .const 'Sub' $P1703 = "396_1299591493.348" 
    capture_lex $P1703
    .const 'Sub' $P1691 = "393_1299591493.348" 
    capture_lex $P1691
    .const 'Sub' $P1681 = "390_1299591493.348" 
    capture_lex $P1681
    .const 'Sub' $P1676 = "388_1299591493.348" 
    capture_lex $P1676
    .const 'Sub' $P1667 = "385_1299591493.348" 
    capture_lex $P1667
    .const 'Sub' $P1662 = "383_1299591493.348" 
    capture_lex $P1662
    .const 'Sub' $P1653 = "380_1299591493.348" 
    capture_lex $P1653
    get_global $P1652, "$?CLASS"
    .const 'Sub' $P1708 = "398_1299591493.348" 
    capture_lex $P1708
    .return ($P1708)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "" :load :init :subid("post1149") :outer("379_1299591493.348")
.annotate 'line', 686
    get_hll_global $P1651, ["NQP";"Regex"], "_block1650" 
    .local pmc block
    set block, $P1651
    .const 'Sub' $P1715 = "400_1299591493.348" 
    capture_lex $P1715
    $P1715()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block1714"  :anon :subid("400_1299591493.348") :outer("379_1299591493.348")
.annotate 'line', 686
    get_hll_global $P1716, "NQPClassHOW"
    $P1717 = $P1716."new_type"("Regex" :named("name"))
    .local pmc type_obj
    set type_obj, $P1717
    set_hll_global ["NQP"], "Regex", type_obj
    set_global "$?CLASS", type_obj
    get_how $P1718, type_obj
    .const 'Sub' $P1719 = "380_1299591493.348" 
    $P1718."add_method"(type_obj, "metachar:sym<:my>", $P1719)
    get_how $P1720, type_obj
    get_global $P1721, "!PREFIX__metachar:sym<:my>"
    $P1720."add_method"(type_obj, "!PREFIX__metachar:sym<:my>", $P1721)
    get_how $P1722, type_obj
    .const 'Sub' $P1723 = "383_1299591493.348" 
    $P1722."add_method"(type_obj, "metachar:sym<{ }>", $P1723)
    get_how $P1724, type_obj
    get_global $P1725, "!PREFIX__metachar:sym<{ }>"
    $P1724."add_method"(type_obj, "!PREFIX__metachar:sym<{ }>", $P1725)
    get_how $P1726, type_obj
    .const 'Sub' $P1727 = "385_1299591493.348" 
    $P1726."add_method"(type_obj, "metachar:sym<nqpvar>", $P1727)
    get_how $P1728, type_obj
    get_global $P1729, "!PREFIX__metachar:sym<nqpvar>"
    $P1728."add_method"(type_obj, "!PREFIX__metachar:sym<nqpvar>", $P1729)
    get_how $P1730, type_obj
    .const 'Sub' $P1731 = "388_1299591493.348" 
    $P1730."add_method"(type_obj, "assertion:sym<{ }>", $P1731)
    get_how $P1732, type_obj
    get_global $P1733, "!PREFIX__assertion:sym<{ }>"
    $P1732."add_method"(type_obj, "!PREFIX__assertion:sym<{ }>", $P1733)
    get_how $P1734, type_obj
    .const 'Sub' $P1735 = "390_1299591493.348" 
    $P1734."add_method"(type_obj, "assertion:sym<?{ }>", $P1735)
    get_how $P1736, type_obj
    get_global $P1737, "!PREFIX__assertion:sym<?{ }>"
    $P1736."add_method"(type_obj, "!PREFIX__assertion:sym<?{ }>", $P1737)
    get_how $P1738, type_obj
    .const 'Sub' $P1739 = "393_1299591493.348" 
    $P1738."add_method"(type_obj, "assertion:sym<name>", $P1739)
    get_how $P1740, type_obj
    get_global $P1741, "!PREFIX__assertion:sym<name>"
    $P1740."add_method"(type_obj, "!PREFIX__assertion:sym<name>", $P1741)
    get_how $P1742, type_obj
    .const 'Sub' $P1743 = "396_1299591493.348" 
    $P1742."add_method"(type_obj, "assertion:sym<var>", $P1743)
    get_how $P1744, type_obj
    get_global $P1745, "!PREFIX__assertion:sym<var>"
    $P1744."add_method"(type_obj, "!PREFIX__assertion:sym<var>", $P1745)
    get_how $P1746, type_obj
    .const 'Sub' $P1747 = "398_1299591493.348" 
    $P1746."add_method"(type_obj, "codeblock", $P1747)
    get_how $P1748, type_obj
    get_global $P1749, "!PREFIX__codeblock"
    $P1748."add_method"(type_obj, "!PREFIX__codeblock", $P1749)
    get_how $P1750, type_obj
    get_hll_global $P1751, ["Regex";"P6Regex"], "Grammar"
    $P1750."add_parent"(type_obj, $P1751)
    get_how $P1752, type_obj
    $P1753 = $P1752."compose"(type_obj)
    .return ($P1753)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "metachar:sym<:my>"  :subid("380_1299591493.348") :method :outer("379_1299591493.348")
.annotate 'line', 686
    .const 'Sub' $P1659 = "382_1299591493.348" 
    capture_lex $P1659
    .local string rx1654_tgt
    .local int rx1654_pos
    .local int rx1654_off
    .local int rx1654_eos
    .local int rx1654_rep
    .local pmc rx1654_cur
    .local pmc rx1654_debug
    (rx1654_cur, rx1654_pos, rx1654_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1654_cur
    .local pmc match
    .lex "$/", match
    length rx1654_eos, rx1654_tgt
    gt rx1654_pos, rx1654_eos, rx1654_done
    set rx1654_off, 0
    lt rx1654_pos, 2, rx1654_start
    sub rx1654_off, rx1654_pos, 1
    substr rx1654_tgt, rx1654_tgt, rx1654_off
  rx1654_start:
    eq $I10, 1, rx1654_restart
    if_null rx1654_debug, debug_1150
    rx1654_cur."!cursor_debug"("START", "metachar:sym<:my>")
  debug_1150:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1657_done
    goto rxscan1657_scan
  rxscan1657_loop:
    (rx1654_pos) = rx1654_cur."from"()
    inc rx1654_pos
    rx1654_cur."!cursor_from"(rx1654_pos)
    ge rx1654_pos, rx1654_eos, rxscan1657_done
  rxscan1657_scan:
    set_addr $I10, rxscan1657_loop
    rx1654_cur."!mark_push"(0, rx1654_pos, $I10)
  rxscan1657_done:
.annotate 'line', 688
  # rx literal  ":"
    add $I11, rx1654_pos, 1
    gt $I11, rx1654_eos, rx1654_fail
    sub $I11, rx1654_pos, rx1654_off
    ord $I11, rx1654_tgt, $I11
    ne $I11, 58, rx1654_fail
    add rx1654_pos, 1
  # rx subrule "before" subtype=zerowidth negate=
    rx1654_cur."!cursor_pos"(rx1654_pos)
    .const 'Sub' $P1659 = "382_1299591493.348" 
    capture_lex $P1659
    $P10 = rx1654_cur."before"($P1659)
    unless $P10, rx1654_fail
  # rx subrule "LANG" subtype=capture negate=
    rx1654_cur."!cursor_pos"(rx1654_pos)
    $P10 = rx1654_cur."LANG"("MAIN", "statement")
    unless $P10, rx1654_fail
    rx1654_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement")
    rx1654_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1654_cur."!cursor_pos"(rx1654_pos)
    $P10 = rx1654_cur."ws"()
    unless $P10, rx1654_fail
    rx1654_pos = $P10."pos"()
  # rx literal  ";"
    add $I11, rx1654_pos, 1
    gt $I11, rx1654_eos, rx1654_fail
    sub $I11, rx1654_pos, rx1654_off
    ord $I11, rx1654_tgt, $I11
    ne $I11, 59, rx1654_fail
    add rx1654_pos, 1
.annotate 'line', 687
  # rx pass
    rx1654_cur."!cursor_pass"(rx1654_pos, "metachar:sym<:my>")
    if_null rx1654_debug, debug_1155
    rx1654_cur."!cursor_debug"("PASS", "metachar:sym<:my>", " at pos=", rx1654_pos)
  debug_1155:
    .return (rx1654_cur)
  rx1654_restart:
.annotate 'line', 686
    if_null rx1654_debug, debug_1156
    rx1654_cur."!cursor_debug"("NEXT", "metachar:sym<:my>")
  debug_1156:
  rx1654_fail:
    (rx1654_rep, rx1654_pos, $I10, $P10) = rx1654_cur."!mark_fail"(0)
    lt rx1654_pos, -1, rx1654_done
    eq rx1654_pos, -1, rx1654_fail
    jump $I10
  rx1654_done:
    rx1654_cur."!cursor_fail"()
    if_null rx1654_debug, debug_1157
    rx1654_cur."!cursor_debug"("FAIL", "metachar:sym<:my>")
  debug_1157:
    .return (rx1654_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__metachar:sym<:my>"  :nsentry("!PREFIX__metachar:sym<:my>") :subid("381_1299591493.348") :method
.annotate 'line', 686
    new $P1656, "ResizablePMCArray"
    push $P1656, ":"
    .return ($P1656)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block1658"  :anon :subid("382_1299591493.348") :method :outer("380_1299591493.348")
.annotate 'line', 688
    .local string rx1660_tgt
    .local int rx1660_pos
    .local int rx1660_off
    .local int rx1660_eos
    .local int rx1660_rep
    .local pmc rx1660_cur
    .local pmc rx1660_debug
    (rx1660_cur, rx1660_pos, rx1660_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1660_cur
    .local pmc match
    .lex "$/", match
    length rx1660_eos, rx1660_tgt
    gt rx1660_pos, rx1660_eos, rx1660_done
    set rx1660_off, 0
    lt rx1660_pos, 2, rx1660_start
    sub rx1660_off, rx1660_pos, 1
    substr rx1660_tgt, rx1660_tgt, rx1660_off
  rx1660_start:
    eq $I10, 1, rx1660_restart
    if_null rx1660_debug, debug_1151
    rx1660_cur."!cursor_debug"("START", "")
  debug_1151:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1661_done
    goto rxscan1661_scan
  rxscan1661_loop:
    (rx1660_pos) = rx1660_cur."from"()
    inc rx1660_pos
    rx1660_cur."!cursor_from"(rx1660_pos)
    ge rx1660_pos, rx1660_eos, rxscan1661_done
  rxscan1661_scan:
    set_addr $I10, rxscan1661_loop
    rx1660_cur."!mark_push"(0, rx1660_pos, $I10)
  rxscan1661_done:
  # rx literal  "my"
    add $I11, rx1660_pos, 2
    gt $I11, rx1660_eos, rx1660_fail
    sub $I11, rx1660_pos, rx1660_off
    substr $S10, rx1660_tgt, $I11, 2
    ne $S10, "my", rx1660_fail
    add rx1660_pos, 2
  # rx pass
    rx1660_cur."!cursor_pass"(rx1660_pos, "")
    if_null rx1660_debug, debug_1152
    rx1660_cur."!cursor_debug"("PASS", "", " at pos=", rx1660_pos)
  debug_1152:
    .return (rx1660_cur)
  rx1660_restart:
    if_null rx1660_debug, debug_1153
    rx1660_cur."!cursor_debug"("NEXT", "")
  debug_1153:
  rx1660_fail:
    (rx1660_rep, rx1660_pos, $I10, $P10) = rx1660_cur."!mark_fail"(0)
    lt rx1660_pos, -1, rx1660_done
    eq rx1660_pos, -1, rx1660_fail
    jump $I10
  rx1660_done:
    rx1660_cur."!cursor_fail"()
    if_null rx1660_debug, debug_1154
    rx1660_cur."!cursor_debug"("FAIL", "")
  debug_1154:
    .return (rx1660_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "metachar:sym<{ }>"  :subid("383_1299591493.348") :method :outer("379_1299591493.348")
.annotate 'line', 686
    .local string rx1663_tgt
    .local int rx1663_pos
    .local int rx1663_off
    .local int rx1663_eos
    .local int rx1663_rep
    .local pmc rx1663_cur
    .local pmc rx1663_debug
    (rx1663_cur, rx1663_pos, rx1663_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1663_cur
    .local pmc match
    .lex "$/", match
    length rx1663_eos, rx1663_tgt
    gt rx1663_pos, rx1663_eos, rx1663_done
    set rx1663_off, 0
    lt rx1663_pos, 2, rx1663_start
    sub rx1663_off, rx1663_pos, 1
    substr rx1663_tgt, rx1663_tgt, rx1663_off
  rx1663_start:
    eq $I10, 1, rx1663_restart
    if_null rx1663_debug, debug_1158
    rx1663_cur."!cursor_debug"("START", "metachar:sym<{ }>")
  debug_1158:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1666_done
    goto rxscan1666_scan
  rxscan1666_loop:
    (rx1663_pos) = rx1663_cur."from"()
    inc rx1663_pos
    rx1663_cur."!cursor_from"(rx1663_pos)
    ge rx1663_pos, rx1663_eos, rxscan1666_done
  rxscan1666_scan:
    set_addr $I10, rxscan1666_loop
    rx1663_cur."!mark_push"(0, rx1663_pos, $I10)
  rxscan1666_done:
.annotate 'line', 692
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1663_pos, rx1663_off
    substr $S10, rx1663_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx1663_fail
  # rx subrule "codeblock" subtype=capture negate=
    rx1663_cur."!cursor_pos"(rx1663_pos)
    $P10 = rx1663_cur."codeblock"()
    unless $P10, rx1663_fail
    rx1663_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("codeblock")
    rx1663_pos = $P10."pos"()
.annotate 'line', 691
  # rx pass
    rx1663_cur."!cursor_pass"(rx1663_pos, "metachar:sym<{ }>")
    if_null rx1663_debug, debug_1159
    rx1663_cur."!cursor_debug"("PASS", "metachar:sym<{ }>", " at pos=", rx1663_pos)
  debug_1159:
    .return (rx1663_cur)
  rx1663_restart:
.annotate 'line', 686
    if_null rx1663_debug, debug_1160
    rx1663_cur."!cursor_debug"("NEXT", "metachar:sym<{ }>")
  debug_1160:
  rx1663_fail:
    (rx1663_rep, rx1663_pos, $I10, $P10) = rx1663_cur."!mark_fail"(0)
    lt rx1663_pos, -1, rx1663_done
    eq rx1663_pos, -1, rx1663_fail
    jump $I10
  rx1663_done:
    rx1663_cur."!cursor_fail"()
    if_null rx1663_debug, debug_1161
    rx1663_cur."!cursor_debug"("FAIL", "metachar:sym<{ }>")
  debug_1161:
    .return (rx1663_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__metachar:sym<{ }>"  :nsentry("!PREFIX__metachar:sym<{ }>") :subid("384_1299591493.348") :method
.annotate 'line', 686
    new $P1665, "ResizablePMCArray"
    push $P1665, "{"
    .return ($P1665)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "metachar:sym<nqpvar>"  :subid("385_1299591493.348") :method :outer("379_1299591493.348")
.annotate 'line', 686
    .const 'Sub' $P1673 = "387_1299591493.348" 
    capture_lex $P1673
    .local string rx1668_tgt
    .local int rx1668_pos
    .local int rx1668_off
    .local int rx1668_eos
    .local int rx1668_rep
    .local pmc rx1668_cur
    .local pmc rx1668_debug
    (rx1668_cur, rx1668_pos, rx1668_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1668_cur
    .local pmc match
    .lex "$/", match
    length rx1668_eos, rx1668_tgt
    gt rx1668_pos, rx1668_eos, rx1668_done
    set rx1668_off, 0
    lt rx1668_pos, 2, rx1668_start
    sub rx1668_off, rx1668_pos, 1
    substr rx1668_tgt, rx1668_tgt, rx1668_off
  rx1668_start:
    eq $I10, 1, rx1668_restart
    if_null rx1668_debug, debug_1162
    rx1668_cur."!cursor_debug"("START", "metachar:sym<nqpvar>")
  debug_1162:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1671_done
    goto rxscan1671_scan
  rxscan1671_loop:
    (rx1668_pos) = rx1668_cur."from"()
    inc rx1668_pos
    rx1668_cur."!cursor_from"(rx1668_pos)
    ge rx1668_pos, rx1668_eos, rxscan1671_done
  rxscan1671_scan:
    set_addr $I10, rxscan1671_loop
    rx1668_cur."!mark_push"(0, rx1668_pos, $I10)
  rxscan1671_done:
.annotate 'line', 696
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1668_pos, rx1668_off
    substr $S10, rx1668_tgt, $I10, 1
    index $I11, "$@", $S10
    lt $I11, 0, rx1668_fail
  # rx subrule "before" subtype=zerowidth negate=
    rx1668_cur."!cursor_pos"(rx1668_pos)
    .const 'Sub' $P1673 = "387_1299591493.348" 
    capture_lex $P1673
    $P10 = rx1668_cur."before"($P1673)
    unless $P10, rx1668_fail
  # rx subrule "LANG" subtype=capture negate=
    rx1668_cur."!cursor_pos"(rx1668_pos)
    $P10 = rx1668_cur."LANG"("MAIN", "variable")
    unless $P10, rx1668_fail
    rx1668_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("var")
    rx1668_pos = $P10."pos"()
.annotate 'line', 695
  # rx pass
    rx1668_cur."!cursor_pass"(rx1668_pos, "metachar:sym<nqpvar>")
    if_null rx1668_debug, debug_1167
    rx1668_cur."!cursor_debug"("PASS", "metachar:sym<nqpvar>", " at pos=", rx1668_pos)
  debug_1167:
    .return (rx1668_cur)
  rx1668_restart:
.annotate 'line', 686
    if_null rx1668_debug, debug_1168
    rx1668_cur."!cursor_debug"("NEXT", "metachar:sym<nqpvar>")
  debug_1168:
  rx1668_fail:
    (rx1668_rep, rx1668_pos, $I10, $P10) = rx1668_cur."!mark_fail"(0)
    lt rx1668_pos, -1, rx1668_done
    eq rx1668_pos, -1, rx1668_fail
    jump $I10
  rx1668_done:
    rx1668_cur."!cursor_fail"()
    if_null rx1668_debug, debug_1169
    rx1668_cur."!cursor_debug"("FAIL", "metachar:sym<nqpvar>")
  debug_1169:
    .return (rx1668_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__metachar:sym<nqpvar>"  :nsentry("!PREFIX__metachar:sym<nqpvar>") :subid("386_1299591493.348") :method
.annotate 'line', 686
    new $P1670, "ResizablePMCArray"
    push $P1670, "$"
    push $P1670, "@"
    .return ($P1670)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block1672"  :anon :subid("387_1299591493.348") :method :outer("385_1299591493.348")
.annotate 'line', 696
    .local string rx1674_tgt
    .local int rx1674_pos
    .local int rx1674_off
    .local int rx1674_eos
    .local int rx1674_rep
    .local pmc rx1674_cur
    .local pmc rx1674_debug
    (rx1674_cur, rx1674_pos, rx1674_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1674_cur
    .local pmc match
    .lex "$/", match
    length rx1674_eos, rx1674_tgt
    gt rx1674_pos, rx1674_eos, rx1674_done
    set rx1674_off, 0
    lt rx1674_pos, 2, rx1674_start
    sub rx1674_off, rx1674_pos, 1
    substr rx1674_tgt, rx1674_tgt, rx1674_off
  rx1674_start:
    eq $I10, 1, rx1674_restart
    if_null rx1674_debug, debug_1163
    rx1674_cur."!cursor_debug"("START", "")
  debug_1163:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1675_done
    goto rxscan1675_scan
  rxscan1675_loop:
    (rx1674_pos) = rx1674_cur."from"()
    inc rx1674_pos
    rx1674_cur."!cursor_from"(rx1674_pos)
    ge rx1674_pos, rx1674_eos, rxscan1675_done
  rxscan1675_scan:
    set_addr $I10, rxscan1675_loop
    rx1674_cur."!mark_push"(0, rx1674_pos, $I10)
  rxscan1675_done:
  # rx charclass .
    ge rx1674_pos, rx1674_eos, rx1674_fail
    inc rx1674_pos
  # rx charclass w
    ge rx1674_pos, rx1674_eos, rx1674_fail
    sub $I10, rx1674_pos, rx1674_off
    is_cclass $I11, 8192, rx1674_tgt, $I10
    unless $I11, rx1674_fail
    inc rx1674_pos
  # rx pass
    rx1674_cur."!cursor_pass"(rx1674_pos, "")
    if_null rx1674_debug, debug_1164
    rx1674_cur."!cursor_debug"("PASS", "", " at pos=", rx1674_pos)
  debug_1164:
    .return (rx1674_cur)
  rx1674_restart:
    if_null rx1674_debug, debug_1165
    rx1674_cur."!cursor_debug"("NEXT", "")
  debug_1165:
  rx1674_fail:
    (rx1674_rep, rx1674_pos, $I10, $P10) = rx1674_cur."!mark_fail"(0)
    lt rx1674_pos, -1, rx1674_done
    eq rx1674_pos, -1, rx1674_fail
    jump $I10
  rx1674_done:
    rx1674_cur."!cursor_fail"()
    if_null rx1674_debug, debug_1166
    rx1674_cur."!cursor_debug"("FAIL", "")
  debug_1166:
    .return (rx1674_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<{ }>"  :subid("388_1299591493.348") :method :outer("379_1299591493.348")
.annotate 'line', 686
    .local string rx1677_tgt
    .local int rx1677_pos
    .local int rx1677_off
    .local int rx1677_eos
    .local int rx1677_rep
    .local pmc rx1677_cur
    .local pmc rx1677_debug
    (rx1677_cur, rx1677_pos, rx1677_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1677_cur
    .local pmc match
    .lex "$/", match
    length rx1677_eos, rx1677_tgt
    gt rx1677_pos, rx1677_eos, rx1677_done
    set rx1677_off, 0
    lt rx1677_pos, 2, rx1677_start
    sub rx1677_off, rx1677_pos, 1
    substr rx1677_tgt, rx1677_tgt, rx1677_off
  rx1677_start:
    eq $I10, 1, rx1677_restart
    if_null rx1677_debug, debug_1170
    rx1677_cur."!cursor_debug"("START", "assertion:sym<{ }>")
  debug_1170:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1680_done
    goto rxscan1680_scan
  rxscan1680_loop:
    (rx1677_pos) = rx1677_cur."from"()
    inc rx1677_pos
    rx1677_cur."!cursor_from"(rx1677_pos)
    ge rx1677_pos, rx1677_eos, rxscan1680_done
  rxscan1680_scan:
    set_addr $I10, rxscan1680_loop
    rx1677_cur."!mark_push"(0, rx1677_pos, $I10)
  rxscan1680_done:
.annotate 'line', 700
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1677_pos, rx1677_off
    substr $S10, rx1677_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx1677_fail
  # rx subrule "codeblock" subtype=capture negate=
    rx1677_cur."!cursor_pos"(rx1677_pos)
    $P10 = rx1677_cur."codeblock"()
    unless $P10, rx1677_fail
    rx1677_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("codeblock")
    rx1677_pos = $P10."pos"()
.annotate 'line', 699
  # rx pass
    rx1677_cur."!cursor_pass"(rx1677_pos, "assertion:sym<{ }>")
    if_null rx1677_debug, debug_1171
    rx1677_cur."!cursor_debug"("PASS", "assertion:sym<{ }>", " at pos=", rx1677_pos)
  debug_1171:
    .return (rx1677_cur)
  rx1677_restart:
.annotate 'line', 686
    if_null rx1677_debug, debug_1172
    rx1677_cur."!cursor_debug"("NEXT", "assertion:sym<{ }>")
  debug_1172:
  rx1677_fail:
    (rx1677_rep, rx1677_pos, $I10, $P10) = rx1677_cur."!mark_fail"(0)
    lt rx1677_pos, -1, rx1677_done
    eq rx1677_pos, -1, rx1677_fail
    jump $I10
  rx1677_done:
    rx1677_cur."!cursor_fail"()
    if_null rx1677_debug, debug_1173
    rx1677_cur."!cursor_debug"("FAIL", "assertion:sym<{ }>")
  debug_1173:
    .return (rx1677_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__assertion:sym<{ }>"  :nsentry("!PREFIX__assertion:sym<{ }>") :subid("389_1299591493.348") :method
.annotate 'line', 686
    new $P1679, "ResizablePMCArray"
    push $P1679, "{"
    .return ($P1679)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<?{ }>"  :subid("390_1299591493.348") :method :outer("379_1299591493.348")
.annotate 'line', 686
    .const 'Sub' $P1687 = "392_1299591493.348" 
    capture_lex $P1687
    .local string rx1682_tgt
    .local int rx1682_pos
    .local int rx1682_off
    .local int rx1682_eos
    .local int rx1682_rep
    .local pmc rx1682_cur
    .local pmc rx1682_debug
    (rx1682_cur, rx1682_pos, rx1682_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1682_cur
    .local pmc match
    .lex "$/", match
    length rx1682_eos, rx1682_tgt
    gt rx1682_pos, rx1682_eos, rx1682_done
    set rx1682_off, 0
    lt rx1682_pos, 2, rx1682_start
    sub rx1682_off, rx1682_pos, 1
    substr rx1682_tgt, rx1682_tgt, rx1682_off
  rx1682_start:
    eq $I10, 1, rx1682_restart
    if_null rx1682_debug, debug_1174
    rx1682_cur."!cursor_debug"("START", "assertion:sym<?{ }>")
  debug_1174:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1685_done
    goto rxscan1685_scan
  rxscan1685_loop:
    (rx1682_pos) = rx1682_cur."from"()
    inc rx1682_pos
    rx1682_cur."!cursor_from"(rx1682_pos)
    ge rx1682_pos, rx1682_eos, rxscan1685_done
  rxscan1685_scan:
    set_addr $I10, rxscan1685_loop
    rx1682_cur."!mark_push"(0, rx1682_pos, $I10)
  rxscan1685_done:
.annotate 'line', 704
  # rx subcapture "zw"
    set_addr $I10, rxcap_1690_fail
    rx1682_cur."!mark_push"(0, rx1682_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx1682_pos, rx1682_eos, rx1682_fail
    sub $I10, rx1682_pos, rx1682_off
    substr $S10, rx1682_tgt, $I10, 1
    index $I11, "?!", $S10
    lt $I11, 0, rx1682_fail
    inc rx1682_pos
  # rx subrule "before" subtype=zerowidth negate=
    rx1682_cur."!cursor_pos"(rx1682_pos)
    .const 'Sub' $P1687 = "392_1299591493.348" 
    capture_lex $P1687
    $P10 = rx1682_cur."before"($P1687)
    unless $P10, rx1682_fail
    set_addr $I10, rxcap_1690_fail
    ($I12, $I11) = rx1682_cur."!mark_peek"($I10)
    rx1682_cur."!cursor_pos"($I11)
    ($P10) = rx1682_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1682_pos, "")
    rx1682_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("zw")
    goto rxcap_1690_done
  rxcap_1690_fail:
    goto rx1682_fail
  rxcap_1690_done:
  # rx subrule "codeblock" subtype=capture negate=
    rx1682_cur."!cursor_pos"(rx1682_pos)
    $P10 = rx1682_cur."codeblock"()
    unless $P10, rx1682_fail
    rx1682_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("codeblock")
    rx1682_pos = $P10."pos"()
.annotate 'line', 703
  # rx pass
    rx1682_cur."!cursor_pass"(rx1682_pos, "assertion:sym<?{ }>")
    if_null rx1682_debug, debug_1179
    rx1682_cur."!cursor_debug"("PASS", "assertion:sym<?{ }>", " at pos=", rx1682_pos)
  debug_1179:
    .return (rx1682_cur)
  rx1682_restart:
.annotate 'line', 686
    if_null rx1682_debug, debug_1180
    rx1682_cur."!cursor_debug"("NEXT", "assertion:sym<?{ }>")
  debug_1180:
  rx1682_fail:
    (rx1682_rep, rx1682_pos, $I10, $P10) = rx1682_cur."!mark_fail"(0)
    lt rx1682_pos, -1, rx1682_done
    eq rx1682_pos, -1, rx1682_fail
    jump $I10
  rx1682_done:
    rx1682_cur."!cursor_fail"()
    if_null rx1682_debug, debug_1181
    rx1682_cur."!cursor_debug"("FAIL", "assertion:sym<?{ }>")
  debug_1181:
    .return (rx1682_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__assertion:sym<?{ }>"  :nsentry("!PREFIX__assertion:sym<?{ }>") :subid("391_1299591493.348") :method
.annotate 'line', 686
    new $P1684, "ResizablePMCArray"
    push $P1684, "!"
    push $P1684, "?"
    .return ($P1684)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block1686"  :anon :subid("392_1299591493.348") :method :outer("390_1299591493.348")
.annotate 'line', 704
    .local string rx1688_tgt
    .local int rx1688_pos
    .local int rx1688_off
    .local int rx1688_eos
    .local int rx1688_rep
    .local pmc rx1688_cur
    .local pmc rx1688_debug
    (rx1688_cur, rx1688_pos, rx1688_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1688_cur
    .local pmc match
    .lex "$/", match
    length rx1688_eos, rx1688_tgt
    gt rx1688_pos, rx1688_eos, rx1688_done
    set rx1688_off, 0
    lt rx1688_pos, 2, rx1688_start
    sub rx1688_off, rx1688_pos, 1
    substr rx1688_tgt, rx1688_tgt, rx1688_off
  rx1688_start:
    eq $I10, 1, rx1688_restart
    if_null rx1688_debug, debug_1175
    rx1688_cur."!cursor_debug"("START", "")
  debug_1175:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1689_done
    goto rxscan1689_scan
  rxscan1689_loop:
    (rx1688_pos) = rx1688_cur."from"()
    inc rx1688_pos
    rx1688_cur."!cursor_from"(rx1688_pos)
    ge rx1688_pos, rx1688_eos, rxscan1689_done
  rxscan1689_scan:
    set_addr $I10, rxscan1689_loop
    rx1688_cur."!mark_push"(0, rx1688_pos, $I10)
  rxscan1689_done:
  # rx literal  "{"
    add $I11, rx1688_pos, 1
    gt $I11, rx1688_eos, rx1688_fail
    sub $I11, rx1688_pos, rx1688_off
    ord $I11, rx1688_tgt, $I11
    ne $I11, 123, rx1688_fail
    add rx1688_pos, 1
  # rx pass
    rx1688_cur."!cursor_pass"(rx1688_pos, "")
    if_null rx1688_debug, debug_1176
    rx1688_cur."!cursor_debug"("PASS", "", " at pos=", rx1688_pos)
  debug_1176:
    .return (rx1688_cur)
  rx1688_restart:
    if_null rx1688_debug, debug_1177
    rx1688_cur."!cursor_debug"("NEXT", "")
  debug_1177:
  rx1688_fail:
    (rx1688_rep, rx1688_pos, $I10, $P10) = rx1688_cur."!mark_fail"(0)
    lt rx1688_pos, -1, rx1688_done
    eq rx1688_pos, -1, rx1688_fail
    jump $I10
  rx1688_done:
    rx1688_cur."!cursor_fail"()
    if_null rx1688_debug, debug_1178
    rx1688_cur."!cursor_debug"("FAIL", "")
  debug_1178:
    .return (rx1688_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<name>"  :subid("393_1299591493.348") :method :outer("379_1299591493.348")
.annotate 'line', 686
    .const 'Sub' $P1700 = "395_1299591493.348" 
    capture_lex $P1700
    .local string rx1692_tgt
    .local int rx1692_pos
    .local int rx1692_off
    .local int rx1692_eos
    .local int rx1692_rep
    .local pmc rx1692_cur
    .local pmc rx1692_debug
    (rx1692_cur, rx1692_pos, rx1692_tgt, $I10) = self."!cursor_start"()
    rx1692_cur."!cursor_caparray"("assertion", "arglist", "nibbler")
    .lex unicode:"$\x{a2}", rx1692_cur
    .local pmc match
    .lex "$/", match
    length rx1692_eos, rx1692_tgt
    gt rx1692_pos, rx1692_eos, rx1692_done
    set rx1692_off, 0
    lt rx1692_pos, 2, rx1692_start
    sub rx1692_off, rx1692_pos, 1
    substr rx1692_tgt, rx1692_tgt, rx1692_off
  rx1692_start:
    eq $I10, 1, rx1692_restart
    if_null rx1692_debug, debug_1182
    rx1692_cur."!cursor_debug"("START", "assertion:sym<name>")
  debug_1182:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1696_done
    goto rxscan1696_scan
  rxscan1696_loop:
    (rx1692_pos) = rx1692_cur."from"()
    inc rx1692_pos
    rx1692_cur."!cursor_from"(rx1692_pos)
    ge rx1692_pos, rx1692_eos, rxscan1696_done
  rxscan1696_scan:
    set_addr $I10, rxscan1696_loop
    rx1692_cur."!mark_push"(0, rx1692_pos, $I10)
  rxscan1696_done:
.annotate 'line', 708
  # rx subrule "identifier" subtype=capture negate=
    rx1692_cur."!cursor_pos"(rx1692_pos)
    $P10 = rx1692_cur."identifier"()
    unless $P10, rx1692_fail
    rx1692_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("longname")
    rx1692_pos = $P10."pos"()
.annotate 'line', 715
  # rx rxquantr1697 ** 0..1
    set_addr $I10, rxquantr1697_done
    rx1692_cur."!mark_push"(0, rx1692_pos, $I10)
  rxquantr1697_loop:
  alt1698_0:
.annotate 'line', 709
    set_addr $I10, alt1698_1
    rx1692_cur."!mark_push"(0, rx1692_pos, $I10)
.annotate 'line', 710
  # rx subrule "before" subtype=zerowidth negate=
    rx1692_cur."!cursor_pos"(rx1692_pos)
    .const 'Sub' $P1700 = "395_1299591493.348" 
    capture_lex $P1700
    $P10 = rx1692_cur."before"($P1700)
    unless $P10, rx1692_fail
    goto alt1698_end
  alt1698_1:
    set_addr $I10, alt1698_2
    rx1692_cur."!mark_push"(0, rx1692_pos, $I10)
.annotate 'line', 711
  # rx literal  "="
    add $I11, rx1692_pos, 1
    gt $I11, rx1692_eos, rx1692_fail
    sub $I11, rx1692_pos, rx1692_off
    ord $I11, rx1692_tgt, $I11
    ne $I11, 61, rx1692_fail
    add rx1692_pos, 1
  # rx subrule "assertion" subtype=capture negate=
    rx1692_cur."!cursor_pos"(rx1692_pos)
    $P10 = rx1692_cur."assertion"()
    unless $P10, rx1692_fail
    rx1692_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("assertion")
    rx1692_pos = $P10."pos"()
    goto alt1698_end
  alt1698_2:
    set_addr $I10, alt1698_3
    rx1692_cur."!mark_push"(0, rx1692_pos, $I10)
.annotate 'line', 712
  # rx literal  ":"
    add $I11, rx1692_pos, 1
    gt $I11, rx1692_eos, rx1692_fail
    sub $I11, rx1692_pos, rx1692_off
    ord $I11, rx1692_tgt, $I11
    ne $I11, 58, rx1692_fail
    add rx1692_pos, 1
  # rx subrule "arglist" subtype=capture negate=
    rx1692_cur."!cursor_pos"(rx1692_pos)
    $P10 = rx1692_cur."arglist"()
    unless $P10, rx1692_fail
    rx1692_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("arglist")
    rx1692_pos = $P10."pos"()
    goto alt1698_end
  alt1698_3:
    set_addr $I10, alt1698_4
    rx1692_cur."!mark_push"(0, rx1692_pos, $I10)
.annotate 'line', 713
  # rx literal  "("
    add $I11, rx1692_pos, 1
    gt $I11, rx1692_eos, rx1692_fail
    sub $I11, rx1692_pos, rx1692_off
    ord $I11, rx1692_tgt, $I11
    ne $I11, 40, rx1692_fail
    add rx1692_pos, 1
  # rx subrule "LANG" subtype=capture negate=
    rx1692_cur."!cursor_pos"(rx1692_pos)
    $P10 = rx1692_cur."LANG"("MAIN", "arglist")
    unless $P10, rx1692_fail
    rx1692_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("arglist")
    rx1692_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx1692_pos, 1
    gt $I11, rx1692_eos, rx1692_fail
    sub $I11, rx1692_pos, rx1692_off
    ord $I11, rx1692_tgt, $I11
    ne $I11, 41, rx1692_fail
    add rx1692_pos, 1
    goto alt1698_end
  alt1698_4:
.annotate 'line', 714
  # rx subrule "normspace" subtype=method negate=
    rx1692_cur."!cursor_pos"(rx1692_pos)
    $P10 = rx1692_cur."normspace"()
    unless $P10, rx1692_fail
    rx1692_pos = $P10."pos"()
  # rx subrule "nibbler" subtype=capture negate=
    rx1692_cur."!cursor_pos"(rx1692_pos)
    $P10 = rx1692_cur."nibbler"()
    unless $P10, rx1692_fail
    rx1692_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("nibbler")
    rx1692_pos = $P10."pos"()
  alt1698_end:
.annotate 'line', 715
    set_addr $I10, rxquantr1697_done
    (rx1692_rep) = rx1692_cur."!mark_commit"($I10)
  rxquantr1697_done:
.annotate 'line', 707
  # rx pass
    rx1692_cur."!cursor_pass"(rx1692_pos, "assertion:sym<name>")
    if_null rx1692_debug, debug_1187
    rx1692_cur."!cursor_debug"("PASS", "assertion:sym<name>", " at pos=", rx1692_pos)
  debug_1187:
    .return (rx1692_cur)
  rx1692_restart:
.annotate 'line', 686
    if_null rx1692_debug, debug_1188
    rx1692_cur."!cursor_debug"("NEXT", "assertion:sym<name>")
  debug_1188:
  rx1692_fail:
    (rx1692_rep, rx1692_pos, $I10, $P10) = rx1692_cur."!mark_fail"(0)
    lt rx1692_pos, -1, rx1692_done
    eq rx1692_pos, -1, rx1692_fail
    jump $I10
  rx1692_done:
    rx1692_cur."!cursor_fail"()
    if_null rx1692_debug, debug_1189
    rx1692_cur."!cursor_debug"("FAIL", "assertion:sym<name>")
  debug_1189:
    .return (rx1692_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__assertion:sym<name>"  :nsentry("!PREFIX__assertion:sym<name>") :subid("394_1299591493.348") :method
.annotate 'line', 686
    $P1694 = self."!PREFIX__!subrule"("identifier", "")
    new $P1695, "ResizablePMCArray"
    push $P1695, $P1694
    .return ($P1695)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block1699"  :anon :subid("395_1299591493.348") :method :outer("393_1299591493.348")
.annotate 'line', 710
    .local string rx1701_tgt
    .local int rx1701_pos
    .local int rx1701_off
    .local int rx1701_eos
    .local int rx1701_rep
    .local pmc rx1701_cur
    .local pmc rx1701_debug
    (rx1701_cur, rx1701_pos, rx1701_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1701_cur
    .local pmc match
    .lex "$/", match
    length rx1701_eos, rx1701_tgt
    gt rx1701_pos, rx1701_eos, rx1701_done
    set rx1701_off, 0
    lt rx1701_pos, 2, rx1701_start
    sub rx1701_off, rx1701_pos, 1
    substr rx1701_tgt, rx1701_tgt, rx1701_off
  rx1701_start:
    eq $I10, 1, rx1701_restart
    if_null rx1701_debug, debug_1183
    rx1701_cur."!cursor_debug"("START", "")
  debug_1183:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1702_done
    goto rxscan1702_scan
  rxscan1702_loop:
    (rx1701_pos) = rx1701_cur."from"()
    inc rx1701_pos
    rx1701_cur."!cursor_from"(rx1701_pos)
    ge rx1701_pos, rx1701_eos, rxscan1702_done
  rxscan1702_scan:
    set_addr $I10, rxscan1702_loop
    rx1701_cur."!mark_push"(0, rx1701_pos, $I10)
  rxscan1702_done:
  # rx literal  ">"
    add $I11, rx1701_pos, 1
    gt $I11, rx1701_eos, rx1701_fail
    sub $I11, rx1701_pos, rx1701_off
    ord $I11, rx1701_tgt, $I11
    ne $I11, 62, rx1701_fail
    add rx1701_pos, 1
  # rx pass
    rx1701_cur."!cursor_pass"(rx1701_pos, "")
    if_null rx1701_debug, debug_1184
    rx1701_cur."!cursor_debug"("PASS", "", " at pos=", rx1701_pos)
  debug_1184:
    .return (rx1701_cur)
  rx1701_restart:
    if_null rx1701_debug, debug_1185
    rx1701_cur."!cursor_debug"("NEXT", "")
  debug_1185:
  rx1701_fail:
    (rx1701_rep, rx1701_pos, $I10, $P10) = rx1701_cur."!mark_fail"(0)
    lt rx1701_pos, -1, rx1701_done
    eq rx1701_pos, -1, rx1701_fail
    jump $I10
  rx1701_done:
    rx1701_cur."!cursor_fail"()
    if_null rx1701_debug, debug_1186
    rx1701_cur."!cursor_debug"("FAIL", "")
  debug_1186:
    .return (rx1701_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<var>"  :subid("396_1299591493.348") :method :outer("379_1299591493.348")
.annotate 'line', 686
    .local string rx1704_tgt
    .local int rx1704_pos
    .local int rx1704_off
    .local int rx1704_eos
    .local int rx1704_rep
    .local pmc rx1704_cur
    .local pmc rx1704_debug
    (rx1704_cur, rx1704_pos, rx1704_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1704_cur
    .local pmc match
    .lex "$/", match
    length rx1704_eos, rx1704_tgt
    gt rx1704_pos, rx1704_eos, rx1704_done
    set rx1704_off, 0
    lt rx1704_pos, 2, rx1704_start
    sub rx1704_off, rx1704_pos, 1
    substr rx1704_tgt, rx1704_tgt, rx1704_off
  rx1704_start:
    eq $I10, 1, rx1704_restart
    if_null rx1704_debug, debug_1190
    rx1704_cur."!cursor_debug"("START", "assertion:sym<var>")
  debug_1190:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1707_done
    goto rxscan1707_scan
  rxscan1707_loop:
    (rx1704_pos) = rx1704_cur."from"()
    inc rx1704_pos
    rx1704_cur."!cursor_from"(rx1704_pos)
    ge rx1704_pos, rx1704_eos, rxscan1707_done
  rxscan1707_scan:
    set_addr $I10, rxscan1707_loop
    rx1704_cur."!mark_push"(0, rx1704_pos, $I10)
  rxscan1707_done:
.annotate 'line', 719
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1704_pos, rx1704_off
    substr $S10, rx1704_tgt, $I10, 1
    index $I11, "$@", $S10
    lt $I11, 0, rx1704_fail
  # rx subrule "LANG" subtype=capture negate=
    rx1704_cur."!cursor_pos"(rx1704_pos)
    $P10 = rx1704_cur."LANG"("MAIN", "variable")
    unless $P10, rx1704_fail
    rx1704_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("var")
    rx1704_pos = $P10."pos"()
.annotate 'line', 718
  # rx pass
    rx1704_cur."!cursor_pass"(rx1704_pos, "assertion:sym<var>")
    if_null rx1704_debug, debug_1191
    rx1704_cur."!cursor_debug"("PASS", "assertion:sym<var>", " at pos=", rx1704_pos)
  debug_1191:
    .return (rx1704_cur)
  rx1704_restart:
.annotate 'line', 686
    if_null rx1704_debug, debug_1192
    rx1704_cur."!cursor_debug"("NEXT", "assertion:sym<var>")
  debug_1192:
  rx1704_fail:
    (rx1704_rep, rx1704_pos, $I10, $P10) = rx1704_cur."!mark_fail"(0)
    lt rx1704_pos, -1, rx1704_done
    eq rx1704_pos, -1, rx1704_fail
    jump $I10
  rx1704_done:
    rx1704_cur."!cursor_fail"()
    if_null rx1704_debug, debug_1193
    rx1704_cur."!cursor_debug"("FAIL", "assertion:sym<var>")
  debug_1193:
    .return (rx1704_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__assertion:sym<var>"  :nsentry("!PREFIX__assertion:sym<var>") :subid("397_1299591493.348") :method
.annotate 'line', 686
    new $P1706, "ResizablePMCArray"
    push $P1706, "$"
    push $P1706, "@"
    .return ($P1706)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "codeblock"  :subid("398_1299591493.348") :method :outer("379_1299591493.348")
.annotate 'line', 686
    .local string rx1709_tgt
    .local int rx1709_pos
    .local int rx1709_off
    .local int rx1709_eos
    .local int rx1709_rep
    .local pmc rx1709_cur
    .local pmc rx1709_debug
    (rx1709_cur, rx1709_pos, rx1709_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1709_cur
    .local pmc match
    .lex "$/", match
    length rx1709_eos, rx1709_tgt
    gt rx1709_pos, rx1709_eos, rx1709_done
    set rx1709_off, 0
    lt rx1709_pos, 2, rx1709_start
    sub rx1709_off, rx1709_pos, 1
    substr rx1709_tgt, rx1709_tgt, rx1709_off
  rx1709_start:
    eq $I10, 1, rx1709_restart
    if_null rx1709_debug, debug_1194
    rx1709_cur."!cursor_debug"("START", "codeblock")
  debug_1194:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1713_done
    goto rxscan1713_scan
  rxscan1713_loop:
    (rx1709_pos) = rx1709_cur."from"()
    inc rx1709_pos
    rx1709_cur."!cursor_from"(rx1709_pos)
    ge rx1709_pos, rx1709_eos, rxscan1713_done
  rxscan1713_scan:
    set_addr $I10, rxscan1713_loop
    rx1709_cur."!mark_push"(0, rx1709_pos, $I10)
  rxscan1713_done:
.annotate 'line', 723
  # rx subrule "LANG" subtype=capture negate=
    rx1709_cur."!cursor_pos"(rx1709_pos)
    $P10 = rx1709_cur."LANG"("MAIN", "pblock")
    unless $P10, rx1709_fail
    rx1709_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx1709_pos = $P10."pos"()
.annotate 'line', 722
  # rx pass
    rx1709_cur."!cursor_pass"(rx1709_pos, "codeblock")
    if_null rx1709_debug, debug_1195
    rx1709_cur."!cursor_debug"("PASS", "codeblock", " at pos=", rx1709_pos)
  debug_1195:
    .return (rx1709_cur)
  rx1709_restart:
.annotate 'line', 686
    if_null rx1709_debug, debug_1196
    rx1709_cur."!cursor_debug"("NEXT", "codeblock")
  debug_1196:
  rx1709_fail:
    (rx1709_rep, rx1709_pos, $I10, $P10) = rx1709_cur."!mark_fail"(0)
    lt rx1709_pos, -1, rx1709_done
    eq rx1709_pos, -1, rx1709_fail
    jump $I10
  rx1709_done:
    rx1709_cur."!cursor_fail"()
    if_null rx1709_debug, debug_1197
    rx1709_cur."!cursor_debug"("FAIL", "codeblock")
  debug_1197:
    .return (rx1709_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__codeblock"  :nsentry("!PREFIX__codeblock") :subid("399_1299591493.348") :method
.annotate 'line', 686
    $P1711 = self."!PREFIX__!subrule"("LANG", "")
    new $P1712, "ResizablePMCArray"
    push $P1712, $P1711
    .return ($P1712)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1755" :load :anon :subid("401_1299591493.348")
.annotate 'line', 4
    .const 'Sub' $P1757 = "11_1299591493.348" 
    $P1758 = $P1757()
    .return ($P1758)
.end


.HLL "nqp"

.namespace []
.sub "_block2482" :load :anon :subid("403_1299591493.348")
.annotate 'line', 1
    .const 'Sub' $P2484 = "10_1299591493.348" 
    $P2485 = $P2484()
    .return ($P2485)
.end

### .include 'gen/nqp-actions.pir'

.HLL "nqp"

.loadlib "nqp_group"

.loadlib "nqp_ops"

.namespace []
.sub "_block11"  :anon :subid("10_1299591508.723")
.annotate 'line', 0
    get_hll_global $P18, ["NQP";"Actions"], "_block17" 
    capture_lex $P18
.annotate 'line', 1
    getinterp $P13
    get_class $P14, "LexPad"
    get_class $P15, "NQPLexPad"
    $P13."hll_map"($P14, $P15)
    get_hll_global $P16, ["NQP"], "Actions"
    $P0 = find_dynamic_lex "$*CTXSAVE"
    if null $P0 goto ctxsave_done
    $I0 = can $P0, "ctxsave"
    unless $I0 goto ctxsave_done
    $P0."ctxsave"()
  ctxsave_done:
.annotate 'line', 3
    get_hll_global $P18, ["NQP";"Actions"], "_block17" 
    capture_lex $P18
    $P3292 = $P18()
.annotate 'line', 1
    .return ($P3292)
    .const 'Sub' $P3294 = "171_1299591508.723" 
    .return ($P3294)
.end


.HLL "nqp"

.namespace []
.sub "" :load :init :subid("post172") :outer("10_1299591508.723")
.annotate 'line', 0
    .const 'Sub' $P12 = "10_1299591508.723" 
    .local pmc block
    set block, $P12
    nqp_get_sc $P3298, "1299591497.489"
    isnull $I3299, $P3298
    if $I3299, if_3297
    goto if_3297_end
  if_3297:
    nqp_dynop_setup 
    load_bytecode "nqpmo.pbc"
    nqp_create_sc $P3300, "1299591497.489"
    load_bytecode "SettingManager.pbc"
    get_hll_global $P3301, ["HLL"], "SettingManager"
    $P3302 = $P3301."load_setting"("NQPCORE")
    block."set_outer_ctx"($P3302)
  if_3297_end:
.end


.HLL "nqp"

.loadlib "nqp_group"

.loadlib "nqp_ops"

.namespace ["NQP";"Actions"]
.sub "_block17"  :subid("11_1299591508.723") :outer("10_1299591508.723")
.annotate 'line', 3
    .const 'Sub' $P3071 = "170_1299591508.723" 
    capture_lex $P3071
    get_hll_global $P2939, ["NQP";"RegexActions"], "_block2938" 
    capture_lex $P2939
    .const 'Sub' $P2930 = "159_1299591508.723" 
    capture_lex $P2930
    .const 'Sub' $P2925 = "158_1299591508.723" 
    capture_lex $P2925
    .const 'Sub' $P2920 = "157_1299591508.723" 
    capture_lex $P2920
    .const 'Sub' $P2915 = "156_1299591508.723" 
    capture_lex $P2915
    .const 'Sub' $P2904 = "155_1299591508.723" 
    capture_lex $P2904
    .const 'Sub' $P2896 = "154_1299591508.723" 
    capture_lex $P2896
    .const 'Sub' $P2888 = "153_1299591508.723" 
    capture_lex $P2888
    .const 'Sub' $P2880 = "152_1299591508.723" 
    capture_lex $P2880
    .const 'Sub' $P2875 = "151_1299591508.723" 
    capture_lex $P2875
    .const 'Sub' $P2863 = "150_1299591508.723" 
    capture_lex $P2863
    .const 'Sub' $P2855 = "149_1299591508.723" 
    capture_lex $P2855
    .const 'Sub' $P2817 = "148_1299591508.723" 
    capture_lex $P2817
    .const 'Sub' $P2805 = "147_1299591508.723" 
    capture_lex $P2805
    .const 'Sub' $P2797 = "146_1299591508.723" 
    capture_lex $P2797
    .const 'Sub' $P2789 = "145_1299591508.723" 
    capture_lex $P2789
    .const 'Sub' $P2781 = "144_1299591508.723" 
    capture_lex $P2781
    .const 'Sub' $P2773 = "143_1299591508.723" 
    capture_lex $P2773
    .const 'Sub' $P2765 = "142_1299591508.723" 
    capture_lex $P2765
    .const 'Sub' $P2739 = "141_1299591508.723" 
    capture_lex $P2739
    .const 'Sub' $P2724 = "140_1299591508.723" 
    capture_lex $P2724
    .const 'Sub' $P2716 = "139_1299591508.723" 
    capture_lex $P2716
    .const 'Sub' $P2705 = "138_1299591508.723" 
    capture_lex $P2705
    .const 'Sub' $P2694 = "137_1299591508.723" 
    capture_lex $P2694
    .const 'Sub' $P2683 = "136_1299591508.723" 
    capture_lex $P2683
    .const 'Sub' $P2675 = "135_1299591508.723" 
    capture_lex $P2675
    .const 'Sub' $P2648 = "134_1299591508.723" 
    capture_lex $P2648
    .const 'Sub' $P2610 = "132_1299591508.723" 
    capture_lex $P2610
    .const 'Sub' $P2602 = "131_1299591508.723" 
    capture_lex $P2602
    .const 'Sub' $P2594 = "130_1299591508.723" 
    capture_lex $P2594
    .const 'Sub' $P2569 = "129_1299591508.723" 
    capture_lex $P2569
    .const 'Sub' $P2553 = "128_1299591508.723" 
    capture_lex $P2553
    .const 'Sub' $P2545 = "127_1299591508.723" 
    capture_lex $P2545
    .const 'Sub' $P2537 = "126_1299591508.723" 
    capture_lex $P2537
    .const 'Sub' $P2435 = "123_1299591508.723" 
    capture_lex $P2435
    .const 'Sub' $P2427 = "122_1299591508.723" 
    capture_lex $P2427
    .const 'Sub' $P2420 = "121_1299591508.723" 
    capture_lex $P2420
    .const 'Sub' $P2393 = "120_1299591508.723" 
    capture_lex $P2393
    .const 'Sub' $P2353 = "119_1299591508.723" 
    capture_lex $P2353
    .const 'Sub' $P2339 = "118_1299591508.723" 
    capture_lex $P2339
    .const 'Sub' $P2332 = "117_1299591508.723" 
    capture_lex $P2332
    .const 'Sub' $P2288 = "116_1299591508.723" 
    capture_lex $P2288
    .const 'Sub' $P2123 = "112_1299591508.723" 
    capture_lex $P2123
    .const 'Sub' $P2060 = "110_1299591508.723" 
    capture_lex $P2060
    .const 'Sub' $P2052 = "109_1299591508.723" 
    capture_lex $P2052
    .const 'Sub' $P2037 = "108_1299591508.723" 
    capture_lex $P2037
    .const 'Sub' $P2022 = "107_1299591508.723" 
    capture_lex $P2022
    .const 'Sub' $P2004 = "106_1299591508.723" 
    capture_lex $P2004
    .const 'Sub' $P1905 = "105_1299591508.723" 
    capture_lex $P1905
    .const 'Sub' $P1861 = "102_1299591508.723" 
    capture_lex $P1861
    .const 'Sub' $P1736 = "99_1299591508.723" 
    capture_lex $P1736
    .const 'Sub' $P1494 = "92_1299591508.723" 
    capture_lex $P1494
    .const 'Sub' $P1486 = "91_1299591508.723" 
    capture_lex $P1486
    .const 'Sub' $P1478 = "90_1299591508.723" 
    capture_lex $P1478
    .const 'Sub' $P1377 = "86_1299591508.723" 
    capture_lex $P1377
    .const 'Sub' $P1369 = "85_1299591508.723" 
    capture_lex $P1369
    .const 'Sub' $P1354 = "84_1299591508.723" 
    capture_lex $P1354
    .const 'Sub' $P1339 = "83_1299591508.723" 
    capture_lex $P1339
    .const 'Sub' $P1324 = "82_1299591508.723" 
    capture_lex $P1324
    .const 'Sub' $P1309 = "81_1299591508.723" 
    capture_lex $P1309
    .const 'Sub' $P1301 = "80_1299591508.723" 
    capture_lex $P1301
    .const 'Sub' $P1293 = "79_1299591508.723" 
    capture_lex $P1293
    .const 'Sub' $P1285 = "78_1299591508.723" 
    capture_lex $P1285
    .const 'Sub' $P1071 = "74_1299591508.723" 
    capture_lex $P1071
    .const 'Sub' $P1063 = "73_1299591508.723" 
    capture_lex $P1063
    .const 'Sub' $P1055 = "72_1299591508.723" 
    capture_lex $P1055
    .const 'Sub' $P1047 = "71_1299591508.723" 
    capture_lex $P1047
    .const 'Sub' $P1039 = "70_1299591508.723" 
    capture_lex $P1039
    .const 'Sub' $P1031 = "69_1299591508.723" 
    capture_lex $P1031
    .const 'Sub' $P1023 = "68_1299591508.723" 
    capture_lex $P1023
    .const 'Sub' $P933 = "66_1299591508.723" 
    capture_lex $P933
    .const 'Sub' $P909 = "65_1299591508.723" 
    capture_lex $P909
    .const 'Sub' $P895 = "64_1299591508.723" 
    capture_lex $P895
    .const 'Sub' $P887 = "63_1299591508.723" 
    capture_lex $P887
    .const 'Sub' $P879 = "62_1299591508.723" 
    capture_lex $P879
    .const 'Sub' $P871 = "61_1299591508.723" 
    capture_lex $P871
    .const 'Sub' $P863 = "60_1299591508.723" 
    capture_lex $P863
    .const 'Sub' $P855 = "59_1299591508.723" 
    capture_lex $P855
    .const 'Sub' $P847 = "58_1299591508.723" 
    capture_lex $P847
    .const 'Sub' $P839 = "57_1299591508.723" 
    capture_lex $P839
    .const 'Sub' $P831 = "56_1299591508.723" 
    capture_lex $P831
    .const 'Sub' $P823 = "55_1299591508.723" 
    capture_lex $P823
    .const 'Sub' $P815 = "54_1299591508.723" 
    capture_lex $P815
    .const 'Sub' $P807 = "53_1299591508.723" 
    capture_lex $P807
    .const 'Sub' $P799 = "52_1299591508.723" 
    capture_lex $P799
    .const 'Sub' $P791 = "51_1299591508.723" 
    capture_lex $P791
    .const 'Sub' $P775 = "50_1299591508.723" 
    capture_lex $P775
    .const 'Sub' $P742 = "49_1299591508.723" 
    capture_lex $P742
    .const 'Sub' $P728 = "48_1299591508.723" 
    capture_lex $P728
    .const 'Sub' $P709 = "47_1299591508.723" 
    capture_lex $P709
    .const 'Sub' $P691 = "46_1299591508.723" 
    capture_lex $P691
    .const 'Sub' $P667 = "45_1299591508.723" 
    capture_lex $P667
    .const 'Sub' $P633 = "44_1299591508.723" 
    capture_lex $P633
    .const 'Sub' $P618 = "43_1299591508.723" 
    capture_lex $P618
    .const 'Sub' $P606 = "42_1299591508.723" 
    capture_lex $P606
    .const 'Sub' $P555 = "40_1299591508.723" 
    capture_lex $P555
    .const 'Sub' $P548 = "39_1299591508.723" 
    capture_lex $P548
    .const 'Sub' $P526 = "38_1299591508.723" 
    capture_lex $P526
    .const 'Sub' $P515 = "37_1299591508.723" 
    capture_lex $P515
    .const 'Sub' $P480 = "35_1299591508.723" 
    capture_lex $P480
    .const 'Sub' $P472 = "34_1299591508.723" 
    capture_lex $P472
    .const 'Sub' $P464 = "33_1299591508.723" 
    capture_lex $P464
    .const 'Sub' $P450 = "32_1299591508.723" 
    capture_lex $P450
    .const 'Sub' $P369 = "30_1299591508.723" 
    capture_lex $P369
    .const 'Sub' $P328 = "28_1299591508.723" 
    capture_lex $P328
    .const 'Sub' $P281 = "27_1299591508.723" 
    capture_lex $P281
    .const 'Sub' $P250 = "26_1299591508.723" 
    capture_lex $P250
    .const 'Sub' $P242 = "25_1299591508.723" 
    capture_lex $P242
    .const 'Sub' $P234 = "23_1299591508.723" 
    capture_lex $P234
    .const 'Sub' $P220 = "22_1299591508.723" 
    capture_lex $P220
    .const 'Sub' $P155 = "20_1299591508.723" 
    capture_lex $P155
    .const 'Sub' $P145 = "19_1299591508.723" 
    capture_lex $P145
    .const 'Sub' $P97 = "18_1299591508.723" 
    capture_lex $P97
    .const 'Sub' $P84 = "17_1299591508.723" 
    capture_lex $P84
    .const 'Sub' $P66 = "16_1299591508.723" 
    capture_lex $P66
    .const 'Sub' $P33 = "13_1299591508.723" 
    capture_lex $P33
    .const 'Sub' $P25 = "12_1299591508.723" 
    capture_lex $P25
    get_global $P19, "$?CLASS"
    getinterp $P20
    get_class $P21, "LexPad"
    get_class $P22, "NQPLexPad"
    $P20."hll_map"($P21, $P22)
    get_hll_global $P23, ["NQP"], "RegexActions"
    get_global $P24, "@BLOCK"
    unless_null $P24, vivify_174
    $P24 = root_new ['parrot';'ResizablePMCArray']
    set_global "@BLOCK", $P24
  vivify_174:
.annotate 'line', 9
    .const 'Sub' $P25 = "12_1299591508.723" 
    newclosure $P32, $P25
    .lex "xblock_immediate", $P32
.annotate 'line', 14
    .const 'Sub' $P33 = "13_1299591508.723" 
    newclosure $P65, $P33
    .lex "block_immediate", $P65
.annotate 'line', 24
    .const 'Sub' $P66 = "16_1299591508.723" 
    newclosure $P83, $P66
    .lex "vivitype", $P83
.annotate 'line', 43
    .const 'Sub' $P84 = "17_1299591508.723" 
    newclosure $P96, $P84
    .lex "colonpair_str", $P96
.annotate 'line', 257
    .const 'Sub' $P97 = "18_1299591508.723" 
    newclosure $P144, $P97
    .lex "push_block_handler", $P144
.annotate 'line', 796
    .const 'Sub' $P145 = "19_1299591508.723" 
    newclosure $P154, $P145
    .lex "only_star_block", $P154
.annotate 'line', 805
    .const 'Sub' $P155 = "20_1299591508.723" 
    newclosure $P219, $P155
    .lex "attach_multi_signature", $P219
.annotate 'line', 1281
    .const 'Sub' $P220 = "22_1299591508.723" 
    newclosure $P231, $P220
    .lex "control", $P231
.annotate 'line', 3
    $P0 = find_dynamic_lex "$*CTXSAVE"
    if null $P0 goto ctxsave_done
    $I0 = can $P0, "ctxsave"
    unless $I0 goto ctxsave_done
    $P0."ctxsave"()
  ctxsave_done:
    get_global $P232, "@BLOCK"
    .const 'Sub' $P234 = "23_1299591508.723" 
    capture_lex $P234
    $P234()
    find_lex $P239, "xblock_immediate"
    find_lex $P240, "block_immediate"
    find_lex $P241, "vivitype"
.annotate 'line', 35
    find_lex $P280, "colonpair_str"
.annotate 'line', 250
    find_lex $P727, "push_block_handler"
.annotate 'line', 724
    find_lex $P1859, "only_star_block"
    find_lex $P1860, "attach_multi_signature"
.annotate 'line', 1272
    find_lex $P2914, "control"
.annotate 'line', 1299
    get_hll_global $P2939, ["NQP";"RegexActions"], "_block2938" 
    capture_lex $P2939
    $P3059 = $P2939()
.annotate 'line', 3
    .return ($P3059)
    .const 'Sub' $P3061 = "169_1299591508.723" 
    .return ($P3061)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "" :load :init :subid("post173") :outer("11_1299591508.723")
.annotate 'line', 3
    get_hll_global $P18, ["NQP";"Actions"], "_block17" 
    .local pmc block
    set block, $P18
    nqp_get_sc $P3065, "1299591497.489"
    isnull $I3066, $P3065
    if $I3066, if_3064
    goto if_3064_end
  if_3064:
    nqp_dynop_setup 
    load_bytecode "nqpmo.pbc"
    nqp_create_sc $P3067, "1299591497.489"
    load_bytecode "SettingManager.pbc"
    get_hll_global $P3068, ["HLL"], "SettingManager"
    $P3069 = $P3068."load_setting"("NQPCORE")
    block."set_outer_ctx"($P3069)
  if_3064_end:
    .const 'Sub' $P3071 = "170_1299591508.723" 
    capture_lex $P3071
    $P3071()
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3070"  :anon :subid("170_1299591508.723") :outer("11_1299591508.723")
.annotate 'line', 3
    get_hll_global $P3072, "NQPClassHOW"
    $P3073 = $P3072."new_type"("Actions" :named("name"))
    .local pmc type_obj
    set type_obj, $P3073
    set_hll_global ["NQP"], "Actions", type_obj
    set_global "$?CLASS", type_obj
    get_how $P3074, type_obj
    .const 'Sub' $P3075 = "25_1299591508.723" 
    $P3074."add_method"(type_obj, "TOP", $P3075)
    get_how $P3076, type_obj
    .const 'Sub' $P3077 = "26_1299591508.723" 
    $P3076."add_method"(type_obj, "deflongname", $P3077)
    get_how $P3078, type_obj
    .const 'Sub' $P3079 = "27_1299591508.723" 
    $P3078."add_method"(type_obj, "comp_unit", $P3079)
    get_how $P3080, type_obj
    .const 'Sub' $P3081 = "28_1299591508.723" 
    $P3080."add_method"(type_obj, "statementlist", $P3081)
    get_how $P3082, type_obj
    .const 'Sub' $P3083 = "30_1299591508.723" 
    $P3082."add_method"(type_obj, "statement", $P3083)
    get_how $P3084, type_obj
    .const 'Sub' $P3085 = "32_1299591508.723" 
    $P3084."add_method"(type_obj, "xblock", $P3085)
    get_how $P3086, type_obj
    .const 'Sub' $P3087 = "33_1299591508.723" 
    $P3086."add_method"(type_obj, "pblock", $P3087)
    get_how $P3088, type_obj
    .const 'Sub' $P3089 = "34_1299591508.723" 
    $P3088."add_method"(type_obj, "block", $P3089)
    get_how $P3090, type_obj
    .const 'Sub' $P3091 = "35_1299591508.723" 
    $P3090."add_method"(type_obj, "blockoid", $P3091)
    get_how $P3092, type_obj
    .const 'Sub' $P3093 = "37_1299591508.723" 
    $P3092."add_method"(type_obj, "newpad", $P3093)
    get_how $P3094, type_obj
    .const 'Sub' $P3095 = "38_1299591508.723" 
    $P3094."add_method"(type_obj, "outerctx", $P3095)
    get_how $P3096, type_obj
    .const 'Sub' $P3097 = "39_1299591508.723" 
    $P3096."add_method"(type_obj, "you_are_here", $P3097)
    get_how $P3098, type_obj
    .const 'Sub' $P3099 = "40_1299591508.723" 
    $P3098."add_method"(type_obj, "statement_control:sym<if>", $P3099)
    get_how $P3100, type_obj
    .const 'Sub' $P3101 = "42_1299591508.723" 
    $P3100."add_method"(type_obj, "statement_control:sym<unless>", $P3101)
    get_how $P3102, type_obj
    .const 'Sub' $P3103 = "43_1299591508.723" 
    $P3102."add_method"(type_obj, "statement_control:sym<while>", $P3103)
    get_how $P3104, type_obj
    .const 'Sub' $P3105 = "44_1299591508.723" 
    $P3104."add_method"(type_obj, "statement_control:sym<repeat>", $P3105)
    get_how $P3106, type_obj
    .const 'Sub' $P3107 = "45_1299591508.723" 
    $P3106."add_method"(type_obj, "statement_control:sym<for>", $P3107)
    get_how $P3108, type_obj
    .const 'Sub' $P3109 = "46_1299591508.723" 
    $P3108."add_method"(type_obj, "statement_control:sym<CATCH>", $P3109)
    get_how $P3110, type_obj
    .const 'Sub' $P3111 = "47_1299591508.723" 
    $P3110."add_method"(type_obj, "statement_control:sym<CONTROL>", $P3111)
    get_how $P3112, type_obj
    .const 'Sub' $P3113 = "48_1299591508.723" 
    $P3112."add_method"(type_obj, "statement_prefix:sym<INIT>", $P3113)
    get_how $P3114, type_obj
    .const 'Sub' $P3115 = "49_1299591508.723" 
    $P3114."add_method"(type_obj, "statement_prefix:sym<try>", $P3115)
    get_how $P3116, type_obj
    .const 'Sub' $P3117 = "50_1299591508.723" 
    $P3116."add_method"(type_obj, "blorst", $P3117)
    get_how $P3118, type_obj
    .const 'Sub' $P3119 = "51_1299591508.723" 
    $P3118."add_method"(type_obj, "statement_mod_cond:sym<if>", $P3119)
    get_how $P3120, type_obj
    .const 'Sub' $P3121 = "52_1299591508.723" 
    $P3120."add_method"(type_obj, "statement_mod_cond:sym<unless>", $P3121)
    get_how $P3122, type_obj
    .const 'Sub' $P3123 = "53_1299591508.723" 
    $P3122."add_method"(type_obj, "statement_mod_loop:sym<while>", $P3123)
    get_how $P3124, type_obj
    .const 'Sub' $P3125 = "54_1299591508.723" 
    $P3124."add_method"(type_obj, "statement_mod_loop:sym<until>", $P3125)
    get_how $P3126, type_obj
    .const 'Sub' $P3127 = "55_1299591508.723" 
    $P3126."add_method"(type_obj, "term:sym<fatarrow>", $P3127)
    get_how $P3128, type_obj
    .const 'Sub' $P3129 = "56_1299591508.723" 
    $P3128."add_method"(type_obj, "term:sym<colonpair>", $P3129)
    get_how $P3130, type_obj
    .const 'Sub' $P3131 = "57_1299591508.723" 
    $P3130."add_method"(type_obj, "term:sym<variable>", $P3131)
    get_how $P3132, type_obj
    .const 'Sub' $P3133 = "58_1299591508.723" 
    $P3132."add_method"(type_obj, "term:sym<package_declarator>", $P3133)
    get_how $P3134, type_obj
    .const 'Sub' $P3135 = "59_1299591508.723" 
    $P3134."add_method"(type_obj, "term:sym<scope_declarator>", $P3135)
    get_how $P3136, type_obj
    .const 'Sub' $P3137 = "60_1299591508.723" 
    $P3136."add_method"(type_obj, "term:sym<routine_declarator>", $P3137)
    get_how $P3138, type_obj
    .const 'Sub' $P3139 = "61_1299591508.723" 
    $P3138."add_method"(type_obj, "term:sym<regex_declarator>", $P3139)
    get_how $P3140, type_obj
    .const 'Sub' $P3141 = "62_1299591508.723" 
    $P3140."add_method"(type_obj, "term:sym<statement_prefix>", $P3141)
    get_how $P3142, type_obj
    .const 'Sub' $P3143 = "63_1299591508.723" 
    $P3142."add_method"(type_obj, "term:sym<lambda>", $P3143)
    get_how $P3144, type_obj
    .const 'Sub' $P3145 = "64_1299591508.723" 
    $P3144."add_method"(type_obj, "fatarrow", $P3145)
    get_how $P3146, type_obj
    .const 'Sub' $P3147 = "65_1299591508.723" 
    $P3146."add_method"(type_obj, "colonpair", $P3147)
    get_how $P3148, type_obj
    .const 'Sub' $P3149 = "66_1299591508.723" 
    $P3148."add_method"(type_obj, "variable", $P3149)
    get_how $P3150, type_obj
    .const 'Sub' $P3151 = "68_1299591508.723" 
    $P3150."add_method"(type_obj, "package_declarator:sym<module>", $P3151)
    get_how $P3152, type_obj
    .const 'Sub' $P3153 = "69_1299591508.723" 
    $P3152."add_method"(type_obj, "package_declarator:sym<knowhow>", $P3153)
    get_how $P3154, type_obj
    .const 'Sub' $P3155 = "70_1299591508.723" 
    $P3154."add_method"(type_obj, "package_declarator:sym<class>", $P3155)
    get_how $P3156, type_obj
    .const 'Sub' $P3157 = "71_1299591508.723" 
    $P3156."add_method"(type_obj, "package_declarator:sym<grammar>", $P3157)
    get_how $P3158, type_obj
    .const 'Sub' $P3159 = "72_1299591508.723" 
    $P3158."add_method"(type_obj, "package_declarator:sym<role>", $P3159)
    get_how $P3160, type_obj
    .const 'Sub' $P3161 = "73_1299591508.723" 
    $P3160."add_method"(type_obj, "package_declarator:sym<native>", $P3161)
    get_how $P3162, type_obj
    .const 'Sub' $P3163 = "74_1299591508.723" 
    $P3162."add_method"(type_obj, "package_def", $P3163)
    get_how $P3164, type_obj
    .const 'Sub' $P3165 = "78_1299591508.723" 
    $P3164."add_method"(type_obj, "scope_declarator:sym<my>", $P3165)
    get_how $P3166, type_obj
    .const 'Sub' $P3167 = "79_1299591508.723" 
    $P3166."add_method"(type_obj, "scope_declarator:sym<our>", $P3167)
    get_how $P3168, type_obj
    .const 'Sub' $P3169 = "80_1299591508.723" 
    $P3168."add_method"(type_obj, "scope_declarator:sym<has>", $P3169)
    get_how $P3170, type_obj
    .const 'Sub' $P3171 = "81_1299591508.723" 
    $P3170."add_method"(type_obj, "scoped", $P3171)
    get_how $P3172, type_obj
    .const 'Sub' $P3173 = "82_1299591508.723" 
    $P3172."add_method"(type_obj, "declarator", $P3173)
    get_how $P3174, type_obj
    .const 'Sub' $P3175 = "83_1299591508.723" 
    $P3174."add_method"(type_obj, "multi_declarator:sym<multi>", $P3175)
    get_how $P3176, type_obj
    .const 'Sub' $P3177 = "84_1299591508.723" 
    $P3176."add_method"(type_obj, "multi_declarator:sym<proto>", $P3177)
    get_how $P3178, type_obj
    .const 'Sub' $P3179 = "85_1299591508.723" 
    $P3178."add_method"(type_obj, "multi_declarator:sym<null>", $P3179)
    get_how $P3180, type_obj
    .const 'Sub' $P3181 = "86_1299591508.723" 
    $P3180."add_method"(type_obj, "variable_declarator", $P3181)
    get_how $P3182, type_obj
    .const 'Sub' $P3183 = "90_1299591508.723" 
    $P3182."add_method"(type_obj, "routine_declarator:sym<sub>", $P3183)
    get_how $P3184, type_obj
    .const 'Sub' $P3185 = "91_1299591508.723" 
    $P3184."add_method"(type_obj, "routine_declarator:sym<method>", $P3185)
    get_how $P3186, type_obj
    .const 'Sub' $P3187 = "92_1299591508.723" 
    $P3186."add_method"(type_obj, "routine_def", $P3187)
    get_how $P3188, type_obj
    .const 'Sub' $P3189 = "99_1299591508.723" 
    $P3188."add_method"(type_obj, "method_def", $P3189)
    get_how $P3190, type_obj
    .const 'Sub' $P3191 = "102_1299591508.723" 
    $P3190."add_method"(type_obj, "signature", $P3191)
    get_how $P3192, type_obj
    .const 'Sub' $P3193 = "105_1299591508.723" 
    $P3192."add_method"(type_obj, "parameter", $P3193)
    get_how $P3194, type_obj
    .const 'Sub' $P3195 = "106_1299591508.723" 
    $P3194."add_method"(type_obj, "param_var", $P3195)
    get_how $P3196, type_obj
    .const 'Sub' $P3197 = "107_1299591508.723" 
    $P3196."add_method"(type_obj, "named_param", $P3197)
    get_how $P3198, type_obj
    .const 'Sub' $P3199 = "108_1299591508.723" 
    $P3198."add_method"(type_obj, "typename", $P3199)
    get_how $P3200, type_obj
    .const 'Sub' $P3201 = "109_1299591508.723" 
    $P3200."add_method"(type_obj, "trait", $P3201)
    get_how $P3202, type_obj
    .const 'Sub' $P3203 = "110_1299591508.723" 
    $P3202."add_method"(type_obj, "trait_mod:sym<is>", $P3203)
    get_how $P3204, type_obj
    .const 'Sub' $P3205 = "112_1299591508.723" 
    $P3204."add_method"(type_obj, "regex_declarator", $P3205)
    get_how $P3206, type_obj
    .const 'Sub' $P3207 = "116_1299591508.723" 
    $P3206."add_method"(type_obj, "dotty", $P3207)
    get_how $P3208, type_obj
    .const 'Sub' $P3209 = "117_1299591508.723" 
    $P3208."add_method"(type_obj, "term:sym<self>", $P3209)
    get_how $P3210, type_obj
    .const 'Sub' $P3211 = "118_1299591508.723" 
    $P3210."add_method"(type_obj, "term:sym<identifier>", $P3211)
    get_how $P3212, type_obj
    .const 'Sub' $P3213 = "119_1299591508.723" 
    $P3212."add_method"(type_obj, "term:sym<name>", $P3213)
    get_how $P3214, type_obj
    .const 'Sub' $P3215 = "120_1299591508.723" 
    $P3214."add_method"(type_obj, "term:sym<pir::op>", $P3215)
    get_how $P3216, type_obj
    .const 'Sub' $P3217 = "121_1299591508.723" 
    $P3216."add_method"(type_obj, "term:sym<onlystar>", $P3217)
    get_how $P3218, type_obj
    .const 'Sub' $P3219 = "122_1299591508.723" 
    $P3218."add_method"(type_obj, "args", $P3219)
    get_how $P3220, type_obj
    .const 'Sub' $P3221 = "123_1299591508.723" 
    $P3220."add_method"(type_obj, "arglist", $P3221)
    get_how $P3222, type_obj
    .const 'Sub' $P3223 = "126_1299591508.723" 
    $P3222."add_method"(type_obj, "term:sym<multi_declarator>", $P3223)
    get_how $P3224, type_obj
    .const 'Sub' $P3225 = "127_1299591508.723" 
    $P3224."add_method"(type_obj, "term:sym<value>", $P3225)
    get_how $P3226, type_obj
    .const 'Sub' $P3227 = "128_1299591508.723" 
    $P3226."add_method"(type_obj, "circumfix:sym<( )>", $P3227)
    get_how $P3228, type_obj
    .const 'Sub' $P3229 = "129_1299591508.723" 
    $P3228."add_method"(type_obj, "circumfix:sym<[ ]>", $P3229)
    get_how $P3230, type_obj
    .const 'Sub' $P3231 = "130_1299591508.723" 
    $P3230."add_method"(type_obj, "circumfix:sym<ang>", $P3231)
    get_how $P3232, type_obj
    .const 'Sub' $P3233 = "131_1299591508.723" 
    $P3232."add_method"(type_obj, unicode:"circumfix:sym<\x{ab} \x{bb}>", $P3233)
    get_how $P3234, type_obj
    .const 'Sub' $P3235 = "132_1299591508.723" 
    $P3234."add_method"(type_obj, "circumfix:sym<{ }>", $P3235)
    get_how $P3236, type_obj
    .const 'Sub' $P3237 = "134_1299591508.723" 
    $P3236."add_method"(type_obj, "circumfix:sym<sigil>", $P3237)
    get_how $P3238, type_obj
    .const 'Sub' $P3239 = "135_1299591508.723" 
    $P3238."add_method"(type_obj, "semilist", $P3239)
    get_how $P3240, type_obj
    .const 'Sub' $P3241 = "136_1299591508.723" 
    $P3240."add_method"(type_obj, "postcircumfix:sym<[ ]>", $P3241)
    get_how $P3242, type_obj
    .const 'Sub' $P3243 = "137_1299591508.723" 
    $P3242."add_method"(type_obj, "postcircumfix:sym<{ }>", $P3243)
    get_how $P3244, type_obj
    .const 'Sub' $P3245 = "138_1299591508.723" 
    $P3244."add_method"(type_obj, "postcircumfix:sym<ang>", $P3245)
    get_how $P3246, type_obj
    .const 'Sub' $P3247 = "139_1299591508.723" 
    $P3246."add_method"(type_obj, "postcircumfix:sym<( )>", $P3247)
    get_how $P3248, type_obj
    .const 'Sub' $P3249 = "140_1299591508.723" 
    $P3248."add_method"(type_obj, "value", $P3249)
    get_how $P3250, type_obj
    .const 'Sub' $P3251 = "141_1299591508.723" 
    $P3250."add_method"(type_obj, "number", $P3251)
    get_how $P3252, type_obj
    .const 'Sub' $P3253 = "142_1299591508.723" 
    $P3252."add_method"(type_obj, "quote:sym<apos>", $P3253)
    get_how $P3254, type_obj
    .const 'Sub' $P3255 = "143_1299591508.723" 
    $P3254."add_method"(type_obj, "quote:sym<dblq>", $P3255)
    get_how $P3256, type_obj
    .const 'Sub' $P3257 = "144_1299591508.723" 
    $P3256."add_method"(type_obj, "quote:sym<qq>", $P3257)
    get_how $P3258, type_obj
    .const 'Sub' $P3259 = "145_1299591508.723" 
    $P3258."add_method"(type_obj, "quote:sym<q>", $P3259)
    get_how $P3260, type_obj
    .const 'Sub' $P3261 = "146_1299591508.723" 
    $P3260."add_method"(type_obj, "quote:sym<Q>", $P3261)
    get_how $P3262, type_obj
    .const 'Sub' $P3263 = "147_1299591508.723" 
    $P3262."add_method"(type_obj, "quote:sym<Q:PIR>", $P3263)
    get_how $P3264, type_obj
    .const 'Sub' $P3265 = "148_1299591508.723" 
    $P3264."add_method"(type_obj, "quote:sym</ />", $P3265)
    get_how $P3266, type_obj
    .const 'Sub' $P3267 = "149_1299591508.723" 
    $P3266."add_method"(type_obj, "quote_escape:sym<$>", $P3267)
    get_how $P3268, type_obj
    .const 'Sub' $P3269 = "150_1299591508.723" 
    $P3268."add_method"(type_obj, "quote_escape:sym<{ }>", $P3269)
    get_how $P3270, type_obj
    .const 'Sub' $P3271 = "151_1299591508.723" 
    $P3270."add_method"(type_obj, "quote_escape:sym<esc>", $P3271)
    get_how $P3272, type_obj
    .const 'Sub' $P3273 = "152_1299591508.723" 
    $P3272."add_method"(type_obj, "postfix:sym<.>", $P3273)
    get_how $P3274, type_obj
    .const 'Sub' $P3275 = "153_1299591508.723" 
    $P3274."add_method"(type_obj, "postfix:sym<++>", $P3275)
    get_how $P3276, type_obj
    .const 'Sub' $P3277 = "154_1299591508.723" 
    $P3276."add_method"(type_obj, "postfix:sym<-->", $P3277)
    get_how $P3278, type_obj
    .const 'Sub' $P3279 = "155_1299591508.723" 
    $P3278."add_method"(type_obj, "prefix:sym<make>", $P3279)
    get_how $P3280, type_obj
    .const 'Sub' $P3281 = "156_1299591508.723" 
    $P3280."add_method"(type_obj, "term:sym<next>", $P3281)
    get_how $P3282, type_obj
    .const 'Sub' $P3283 = "157_1299591508.723" 
    $P3282."add_method"(type_obj, "term:sym<last>", $P3283)
    get_how $P3284, type_obj
    .const 'Sub' $P3285 = "158_1299591508.723" 
    $P3284."add_method"(type_obj, "term:sym<redo>", $P3285)
    get_how $P3286, type_obj
    .const 'Sub' $P3287 = "159_1299591508.723" 
    $P3286."add_method"(type_obj, "infix:sym<~~>", $P3287)
    get_how $P3288, type_obj
    get_hll_global $P3289, ["HLL"], "Actions"
    $P3288."add_parent"(type_obj, $P3289)
    get_how $P3290, type_obj
    $P3291 = $P3290."compose"(type_obj)
    .return ($P3291)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "xblock_immediate"  :subid("12_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_26
.annotate 'line', 9
    .lex "$xblock", param_26
.annotate 'line', 10
    find_lex $P27, "$xblock"
    unless_null $P27, vivify_175
    $P27 = root_new ['parrot';'ResizablePMCArray']
  vivify_175:
    set $P28, $P27[1]
    unless_null $P28, vivify_176
    new $P28, "Undef"
  vivify_176:
    $P29 = "block_immediate"($P28)
    find_lex $P30, "$xblock"
    unless_null $P30, vivify_177
    $P30 = root_new ['parrot';'ResizablePMCArray']
    store_lex "$xblock", $P30
  vivify_177:
    set $P30[1], $P29
    find_lex $P31, "$xblock"
.annotate 'line', 9
    .return ($P31)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "block_immediate"  :subid("13_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_34
.annotate 'line', 14
    .const 'Sub' $P44 = "14_1299591508.723" 
    capture_lex $P44
    .lex "$block", param_34
.annotate 'line', 15
    find_lex $P35, "$block"
    $P35."blocktype"("immediate")
.annotate 'line', 16
    find_lex $P39, "$block"
    $P40 = $P39."symtable"()
    unless $P40, unless_38
    set $P37, $P40
    goto unless_38_end
  unless_38:
    find_lex $P41, "$block"
    $P42 = $P41."handlers"()
    set $P37, $P42
  unless_38_end:
    if $P37, unless_36_end
    .const 'Sub' $P44 = "14_1299591508.723" 
    capture_lex $P44
    $P44()
  unless_36_end:
    find_lex $P64, "$block"
.annotate 'line', 14
    .return ($P64)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block43"  :anon :subid("14_1299591508.723") :outer("13_1299591508.723")
.annotate 'line', 16
    .const 'Sub' $P55 = "15_1299591508.723" 
    capture_lex $P55
.annotate 'line', 17
    new $P45, "Undef"
    .lex "$stmts", $P45
    get_hll_global $P46, ["PAST"], "Stmts"
    find_lex $P47, "$block"
    $P48 = $P46."new"($P47 :named("node"))
    store_lex "$stmts", $P48
.annotate 'line', 18
    find_lex $P50, "$block"
    $P51 = $P50."list"()
    defined $I52, $P51
    unless $I52, for_undef_178
    iter $P49, $P51
    new $P61, 'ExceptionHandler'
    set_label $P61, loop60_handler
    $P61."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P61
  loop60_test:
    unless $P49, loop60_done
    shift $P53, $P49
  loop60_redo:
    .const 'Sub' $P55 = "15_1299591508.723" 
    capture_lex $P55
    $P55($P53)
  loop60_next:
    goto loop60_test
  loop60_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P62, exception, 'type'
    eq $P62, .CONTROL_LOOP_NEXT, loop60_next
    eq $P62, .CONTROL_LOOP_REDO, loop60_redo
  loop60_done:
    pop_eh 
  for_undef_178:
.annotate 'line', 19
    find_lex $P63, "$stmts"
    store_lex "$block", $P63
.annotate 'line', 16
    .return ($P63)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block54"  :anon :subid("15_1299591508.723") :outer("14_1299591508.723")
    .param pmc param_56
.annotate 'line', 18
    .lex "$_", param_56
    find_lex $P57, "$stmts"
    find_lex $P58, "$_"
    $P59 = $P57."push"($P58)
    .return ($P59)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "vivitype"  :subid("16_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_67
.annotate 'line', 24
    .lex "$sigil", param_67
.annotate 'line', 25
    find_lex $P70, "$sigil"
    set $S71, $P70
    iseq $I72, $S71, "%"
    if $I72, if_69
.annotate 'line', 27
    find_lex $P77, "$sigil"
    set $S78, $P77
    iseq $I79, $S78, "@"
    if $I79, if_76
    new $P82, "String"
    assign $P82, "Undef"
    set $P75, $P82
    goto if_76_end
  if_76:
.annotate 'line', 28
    get_hll_global $P80, ["PAST"], "Op"
    $P81 = $P80."new"("    %r = root_new ['parrot';'ResizablePMCArray']" :named("inline"))
    set $P75, $P81
  if_76_end:
    set $P68, $P75
.annotate 'line', 25
    goto if_69_end
  if_69:
.annotate 'line', 26
    get_hll_global $P73, ["PAST"], "Op"
    $P74 = $P73."new"("    %r = root_new ['parrot';'Hash']" :named("inline"))
    set $P68, $P74
  if_69_end:
.annotate 'line', 24
    .return ($P68)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "colonpair_str"  :subid("17_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_85
.annotate 'line', 43
    .lex "$ast", param_85
.annotate 'line', 44
    get_hll_global $P88, ["PAST"], "Op"
    find_lex $P89, "$ast"
    $P90 = $P88."ACCEPTS"($P89)
    if $P90, if_87
.annotate 'line', 46
    find_lex $P94, "$ast"
    $P95 = $P94."value"()
    set $P86, $P95
.annotate 'line', 44
    goto if_87_end
  if_87:
.annotate 'line', 45
    find_lex $P91, "$ast"
    $P92 = $P91."list"()
    join $S93, " ", $P92
    new $P86, 'String'
    set $P86, $S93
  if_87_end:
.annotate 'line', 43
    .return ($P86)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "push_block_handler"  :subid("18_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_98
    .param pmc param_99
.annotate 'line', 257
    .lex "$/", param_98
    .lex "$block", param_99
.annotate 'line', 258
    get_global $P101, "@BLOCK"
    unless_null $P101, vivify_179
    $P101 = root_new ['parrot';'ResizablePMCArray']
  vivify_179:
    set $P102, $P101[0]
    unless_null $P102, vivify_180
    new $P102, "Undef"
  vivify_180:
    $P103 = $P102."handlers"()
    if $P103, unless_100_end
.annotate 'line', 259
    get_global $P104, "@BLOCK"
    unless_null $P104, vivify_181
    $P104 = root_new ['parrot';'ResizablePMCArray']
  vivify_181:
    set $P105, $P104[0]
    unless_null $P105, vivify_182
    new $P105, "Undef"
  vivify_182:
    new $P106, "ResizablePMCArray"
    $P105."handlers"($P106)
  unless_100_end:
.annotate 'line', 261
    find_lex $P108, "$block"
    $P109 = $P108."arity"()
    if $P109, unless_107_end
.annotate 'line', 262
    find_lex $P110, "$block"
.annotate 'line', 263
    get_hll_global $P111, ["PAST"], "Op"
.annotate 'line', 264
    get_hll_global $P112, ["PAST"], "Var"
    $P113 = $P112."new"("lexical" :named("scope"), "$!" :named("name"), 1 :named("isdecl"))
.annotate 'line', 265
    get_hll_global $P114, ["PAST"], "Var"
    $P115 = $P114."new"("lexical" :named("scope"), "$_" :named("name"))
    $P116 = $P111."new"($P113, $P115, "bind" :named("pasttype"))
.annotate 'line', 263
    $P110."unshift"($P116)
.annotate 'line', 268
    find_lex $P117, "$block"
    get_hll_global $P118, ["PAST"], "Var"
    $P119 = $P118."new"("$_" :named("name"), "parameter" :named("scope"))
    $P117."unshift"($P119)
.annotate 'line', 269
    find_lex $P120, "$block"
    $P120."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 270
    find_lex $P121, "$block"
    $P121."symbol"("$!", "lexical" :named("scope"))
.annotate 'line', 271
    find_lex $P122, "$block"
    $P122."arity"(1)
  unless_107_end:
.annotate 'line', 273
    find_lex $P123, "$block"
    $P123."blocktype"("declaration")
.annotate 'line', 274
    get_global $P124, "@BLOCK"
    unless_null $P124, vivify_183
    $P124 = root_new ['parrot';'ResizablePMCArray']
  vivify_183:
    set $P125, $P124[0]
    unless_null $P125, vivify_184
    new $P125, "Undef"
  vivify_184:
    $P126 = $P125."handlers"()
.annotate 'line', 275
    get_hll_global $P127, ["PAST"], "Control"
    find_lex $P128, "$/"
.annotate 'line', 277
    get_hll_global $P129, ["PAST"], "Stmts"
.annotate 'line', 278
    get_hll_global $P130, ["PAST"], "Op"
    find_lex $P131, "$block"
.annotate 'line', 280
    get_hll_global $P132, ["PAST"], "Var"
    $P133 = $P132."new"("register" :named("scope"), "exception" :named("name"))
    $P134 = $P130."new"($P131, $P133, "call" :named("pasttype"))
.annotate 'line', 282
    get_hll_global $P135, ["PAST"], "Op"
.annotate 'line', 283
    get_hll_global $P136, ["PAST"], "Var"
.annotate 'line', 284
    get_hll_global $P137, ["PAST"], "Var"
    $P138 = $P137."new"("register" :named("scope"), "exception" :named("name"))
    $P139 = $P136."new"($P138, "handled", "keyed" :named("scope"))
.annotate 'line', 283
    $P140 = $P135."new"($P139, 1, "bind" :named("pasttype"))
.annotate 'line', 282
    $P141 = $P129."new"($P134, $P140)
.annotate 'line', 277
    $P142 = $P127."new"($P141, $P128 :named("node"))
.annotate 'line', 275
    $P143 = $P126."unshift"($P142)
.annotate 'line', 257
    .return ($P143)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "only_star_block"  :subid("19_1299591508.723") :outer("11_1299591508.723")
.annotate 'line', 797
    new $P146, "Undef"
    .lex "$past", $P146
    get_global $P147, "@BLOCK"
    $P148 = $P147."shift"()
    store_lex "$past", $P148
.annotate 'line', 798
    find_lex $P149, "$past"
    $P149."closure"(1)
.annotate 'line', 799
    find_lex $P150, "$past"
    get_hll_global $P151, ["PAST"], "Op"
    $P152 = $P151."new"("multi_dispatch_over_lexical_candidates P" :named("pirop"))
    $P150."push"($P152)
    find_lex $P153, "$past"
.annotate 'line', 796
    .return ($P153)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "attach_multi_signature"  :subid("20_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_156
.annotate 'line', 805
    .const 'Sub' $P170 = "21_1299591508.723" 
    capture_lex $P170
    .lex "$routine", param_156
.annotate 'line', 809
    new $P157, "Undef"
    .lex "$types", $P157
.annotate 'line', 810
    new $P158, "Undef"
    .lex "$definednesses", $P158
.annotate 'line', 809
    get_hll_global $P159, ["PAST"], "Op"
    $P160 = $P159."new"("list" :named("pasttype"))
    store_lex "$types", $P160
.annotate 'line', 810
    get_hll_global $P161, ["PAST"], "Op"
    $P162 = $P161."new"("list" :named("pasttype"))
    store_lex "$definednesses", $P162
.annotate 'line', 811
    find_lex $P164, "$routine"
    unless_null $P164, vivify_185
    $P164 = root_new ['parrot';'ResizablePMCArray']
  vivify_185:
    set $P165, $P164[0]
    unless_null $P165, vivify_186
    new $P165, "Undef"
  vivify_186:
    $P166 = $P165."list"()
    defined $I167, $P166
    unless $I167, for_undef_187
    iter $P163, $P166
    new $P208, 'ExceptionHandler'
    set_label $P208, loop207_handler
    $P208."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P208
  loop207_test:
    unless $P163, loop207_done
    shift $P168, $P163
  loop207_redo:
    .const 'Sub' $P170 = "21_1299591508.723" 
    capture_lex $P170
    $P170($P168)
  loop207_next:
    goto loop207_test
  loop207_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P209, exception, 'type'
    eq $P209, .CONTROL_LOOP_NEXT, loop207_next
    eq $P209, .CONTROL_LOOP_REDO, loop207_redo
  loop207_done:
    pop_eh 
  for_undef_187:
.annotate 'line', 818
    find_lex $P210, "$routine"
    $P211 = $P210."loadinit"()
    get_hll_global $P212, ["PAST"], "Op"
.annotate 'line', 819
    get_hll_global $P213, ["PAST"], "Var"
    $P214 = $P213."new"("block" :named("name"), "register" :named("scope"))
    find_lex $P215, "$types"
    find_lex $P216, "$definednesses"
    $P217 = $P212."new"($P214, $P215, $P216, "set_sub_multisig vPPP" :named("pirop"))
.annotate 'line', 818
    $P218 = $P211."push"($P217)
.annotate 'line', 805
    .return ($P218)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block169"  :anon :subid("21_1299591508.723") :outer("20_1299591508.723")
    .param pmc param_171
.annotate 'line', 811
    .lex "$_", param_171
.annotate 'line', 812
    get_hll_global $P176, ["PAST"], "Var"
    find_lex $P177, "$_"
    $P178 = $P176."ACCEPTS"($P177)
    if $P178, if_175
    set $P174, $P178
    goto if_175_end
  if_175:
    find_lex $P179, "$_"
    $S180 = $P179."scope"()
    iseq $I181, $S180, "parameter"
    new $P174, 'Integer'
    set $P174, $I181
  if_175_end:
    if $P174, if_173
    set $P172, $P174
    goto if_173_end
  if_173:
.annotate 'line', 813
    find_lex $P182, "$types"
    find_lex $P184, "$_"
    $P185 = $P184."multitype"()
    set $P183, $P185
    defined $I187, $P183
    if $I187, default_186
    get_hll_global $P188, ["PAST"], "Op"
    $P189 = $P188."new"("null P" :named("pirop"))
    set $P183, $P189
  default_186:
    $P182."push"($P183)
.annotate 'line', 814
    find_lex $P190, "$definednesses"
    find_lex $P193, "$_"
    unless_null $P193, vivify_188
    $P193 = root_new ['parrot';'Hash']
  vivify_188:
    set $P194, $P193["definedness"]
    unless_null $P194, vivify_189
    new $P194, "Undef"
  vivify_189:
    set $S195, $P194
    iseq $I196, $S195, "D"
    if $I196, if_192
.annotate 'line', 815
    find_lex $P200, "$_"
    unless_null $P200, vivify_190
    $P200 = root_new ['parrot';'Hash']
  vivify_190:
    set $P201, $P200["definedness"]
    unless_null $P201, vivify_191
    new $P201, "Undef"
  vivify_191:
    set $S202, $P201
    iseq $I203, $S202, "U"
    if $I203, if_199
    new $P205, "Integer"
    assign $P205, 0
    set $P198, $P205
    goto if_199_end
  if_199:
    new $P204, "Integer"
    assign $P204, 2
    set $P198, $P204
  if_199_end:
    set $P191, $P198
.annotate 'line', 814
    goto if_192_end
  if_192:
    new $P197, "Integer"
    assign $P197, 1
    set $P191, $P197
  if_192_end:
    $P206 = $P190."push"($P191)
.annotate 'line', 812
    set $P172, $P206
  if_173_end:
.annotate 'line', 811
    .return ($P172)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "control"  :subid("22_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_221
    .param pmc param_222
.annotate 'line', 1281
    .lex "$/", param_221
    .lex "$type", param_222
.annotate 'line', 1282
    find_lex $P223, "$/"
    get_hll_global $P224, ["PAST"], "Op"
    find_lex $P225, "$/"
.annotate 'line', 1286
    get_hll_global $P226, ["PAST"], "Val"
    find_lex $P227, "$type"
    $P228 = $P226."new"($P227 :named("value"), "!except_types" :named("returns"))
    $P229 = $P224."new"(0, $P228, $P225 :named("node"), "die__vii" :named("pirop"))
.annotate 'line', 1282
    $P230 = $P223."!make"($P229)
.annotate 'line', 1281
    .return ($P230)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block233"  :anon :subid("23_1299591508.723") :outer("11_1299591508.723")
.annotate 'line', 3
    .const 'Sub' $P236 = "24_1299591508.723" 
    capture_lex $P236
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "" :load :init :subid("post192") :outer("23_1299591508.723")
.annotate 'line', 3
    .const 'Sub' $P234 = "23_1299591508.723" 
    .local pmc block
    set block, $P234
.annotate 'line', 5
    .const 'Sub' $P236 = "24_1299591508.723" 
    capture_lex $P236
    $P236()
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block235"  :anon :subid("24_1299591508.723") :outer("23_1299591508.723")
.annotate 'line', 6
    get_global $P237, "@BLOCK"
    unless_null $P237, vivify_193
    $P237 = root_new ['parrot';'ResizablePMCArray']
    set_global "@BLOCK", $P237
  vivify_193:
 $P238 = new ['ResizablePMCArray'] 
    set_global "@BLOCK", $P238
.annotate 'line', 5
    .return ($P238)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "TOP"  :subid("25_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_243
    .param pmc param_244
.annotate 'line', 33
    .lex "self", param_243
    .lex "$/", param_244
    find_lex $P245, "$/"
    find_lex $P246, "$/"
    unless_null $P246, vivify_194
    $P246 = root_new ['parrot';'Hash']
  vivify_194:
    set $P247, $P246["comp_unit"]
    unless_null $P247, vivify_195
    new $P247, "Undef"
  vivify_195:
    $P248 = $P247."ast"()
    $P249 = $P245."!make"($P248)
    .return ($P249)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "deflongname"  :subid("26_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_251
    .param pmc param_252
.annotate 'line', 35
    .lex "self", param_251
    .lex "$/", param_252
.annotate 'line', 36
    find_lex $P253, "$/"
.annotate 'line', 37
    find_lex $P256, "$/"
    unless_null $P256, vivify_196
    $P256 = root_new ['parrot';'Hash']
  vivify_196:
    set $P257, $P256["colonpair"]
    unless_null $P257, vivify_197
    new $P257, "Undef"
  vivify_197:
    if $P257, if_255
.annotate 'line', 39
    find_lex $P277, "$/"
    set $S278, $P277
    new $P254, 'String'
    set $P254, $S278
.annotate 'line', 37
    goto if_255_end
  if_255:
    find_lex $P258, "$/"
    unless_null $P258, vivify_198
    $P258 = root_new ['parrot';'Hash']
  vivify_198:
    set $P259, $P258["identifier"]
    unless_null $P259, vivify_199
    new $P259, "Undef"
  vivify_199:
    set $S260, $P259
    new $P261, 'String'
    set $P261, $S260
    concat $P262, $P261, ":"
    find_lex $P263, "$/"
    unless_null $P263, vivify_200
    $P263 = root_new ['parrot';'Hash']
  vivify_200:
    set $P264, $P263["colonpair"]
    unless_null $P264, vivify_201
    $P264 = root_new ['parrot';'ResizablePMCArray']
  vivify_201:
    set $P265, $P264[0]
    unless_null $P265, vivify_202
    new $P265, "Undef"
  vivify_202:
    $P266 = $P265."ast"()
    $S267 = $P266."named"()
    concat $P268, $P262, $S267
    concat $P269, $P268, "<"
.annotate 'line', 38
    find_lex $P270, "$/"
    unless_null $P270, vivify_203
    $P270 = root_new ['parrot';'Hash']
  vivify_203:
    set $P271, $P270["colonpair"]
    unless_null $P271, vivify_204
    $P271 = root_new ['parrot';'ResizablePMCArray']
  vivify_204:
    set $P272, $P271[0]
    unless_null $P272, vivify_205
    new $P272, "Undef"
  vivify_205:
    $P273 = $P272."ast"()
    $S274 = "colonpair_str"($P273)
    concat $P275, $P269, $S274
    concat $P276, $P275, ">"
    set $P254, $P276
  if_255_end:
.annotate 'line', 37
    $P279 = $P253."!make"($P254)
.annotate 'line', 35
    .return ($P279)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "comp_unit"  :subid("27_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_282
    .param pmc param_283
.annotate 'line', 49
    .lex "self", param_282
    .lex "$/", param_283
.annotate 'line', 50
    new $P284, "Undef"
    .lex "$mainline", $P284
.annotate 'line', 51
    new $P285, "Undef"
    .lex "$unit", $P285
.annotate 'line', 50
    find_lex $P286, "$/"
    unless_null $P286, vivify_206
    $P286 = root_new ['parrot';'Hash']
  vivify_206:
    set $P287, $P286["statementlist"]
    unless_null $P287, vivify_207
    new $P287, "Undef"
  vivify_207:
    $P288 = $P287."ast"()
    store_lex "$mainline", $P288
.annotate 'line', 51
    get_global $P289, "@BLOCK"
    $P290 = $P289."shift"()
    store_lex "$unit", $P290
.annotate 'line', 55
    find_lex $P291, "$unit"
    $P292 = $P291."loadinit"()
    find_dynamic_lex $P293, "$*SC"
    unless_null $P293, vivify_208
    get_hll_global $P293, "$SC"
    unless_null $P293, vivify_209
    die "Contextual $*SC not found"
  vivify_209:
  vivify_208:
    $P294 = $P293."to_past"()
    $P292."push"($P294)
.annotate 'line', 60
    find_dynamic_lex $P296, "$*HAS_YOU_ARE_HERE"
    unless_null $P296, vivify_210
    get_hll_global $P296, "$HAS_YOU_ARE_HERE"
    unless_null $P296, vivify_211
    die "Contextual $*HAS_YOU_ARE_HERE not found"
  vivify_211:
  vivify_210:
    if $P296, unless_295_end
.annotate 'line', 61
    find_lex $P297, "$unit"
    find_lex $P298, "self"
    $P299 = $P298."CTXSAVE"()
    $P297."push"($P299)
  unless_295_end:
.annotate 'line', 65
    find_lex $P300, "$unit"
    $P300."loadlibs"("nqp_group", "nqp_ops")
.annotate 'line', 66
    find_lex $P301, "$unit"
    get_hll_global $P302, ["PAST"], "Op"
.annotate 'line', 68
    get_hll_global $P303, ["PAST"], "Op"
    $P304 = $P303."new"("getinterp P" :named("pirop"))
.annotate 'line', 69
    get_hll_global $P305, ["PAST"], "Op"
    $P306 = $P305."new"("LexPad", "get_class Ps" :named("pirop"))
.annotate 'line', 70
    get_hll_global $P307, ["PAST"], "Op"
    $P308 = $P307."new"("NQPLexPad", "get_class Ps" :named("pirop"))
    $P309 = $P302."new"($P304, $P306, $P308, "callmethod" :named("pasttype"), "hll_map" :named("name"))
.annotate 'line', 66
    $P301."unshift"($P309)
.annotate 'line', 76
    find_lex $P310, "$unit"
.annotate 'line', 77
    get_hll_global $P311, ["PAST"], "Op"
    find_lex $P312, "$mainline"
    $P313 = $P311."new"($P312, "return" :named("pirop"))
    $P310."push"($P313)
.annotate 'line', 82
    find_lex $P314, "$unit"
.annotate 'line', 83
    get_hll_global $P315, ["PAST"], "Block"
.annotate 'line', 85
    get_hll_global $P316, ["PAST"], "Op"
    get_hll_global $P317, ["PAST"], "Val"
    find_lex $P318, "$unit"
    $P319 = $P317."new"($P318 :named("value"))
    $P320 = $P316."new"($P319, "call" :named("pasttype"))
    $P321 = $P315."new"($P320, ":load" :named("pirflags"), 0 :named("lexical"), "" :named("namespace"))
.annotate 'line', 83
    $P314."push"($P321)
.annotate 'line', 88
    find_lex $P322, "$unit"
    find_lex $P323, "$/"
    $P322."node"($P323)
.annotate 'line', 91
    find_lex $P324, "$unit"
    $P324."hll"("nqp")
.annotate 'line', 93
    find_lex $P325, "$/"
    find_lex $P326, "$unit"
    $P327 = $P325."!make"($P326)
.annotate 'line', 49
    .return ($P327)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "statementlist"  :subid("28_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_329
    .param pmc param_330
.annotate 'line', 96
    .const 'Sub' $P344 = "29_1299591508.723" 
    capture_lex $P344
    .lex "self", param_329
    .lex "$/", param_330
.annotate 'line', 97
    new $P331, "Undef"
    .lex "$past", $P331
    get_hll_global $P332, ["PAST"], "Stmts"
    find_lex $P333, "$/"
    $P334 = $P332."new"($P333 :named("node"))
    store_lex "$past", $P334
.annotate 'line', 98
    find_lex $P336, "$/"
    unless_null $P336, vivify_212
    $P336 = root_new ['parrot';'Hash']
  vivify_212:
    set $P337, $P336["statement"]
    unless_null $P337, vivify_213
    new $P337, "Undef"
  vivify_213:
    unless $P337, if_335_end
.annotate 'line', 99
    find_lex $P339, "$/"
    unless_null $P339, vivify_214
    $P339 = root_new ['parrot';'Hash']
  vivify_214:
    set $P340, $P339["statement"]
    unless_null $P340, vivify_215
    new $P340, "Undef"
  vivify_215:
    defined $I341, $P340
    unless $I341, for_undef_216
    iter $P338, $P340
    new $P364, 'ExceptionHandler'
    set_label $P364, loop363_handler
    $P364."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P364
  loop363_test:
    unless $P338, loop363_done
    shift $P342, $P338
  loop363_redo:
    .const 'Sub' $P344 = "29_1299591508.723" 
    capture_lex $P344
    $P344($P342)
  loop363_next:
    goto loop363_test
  loop363_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P365, exception, 'type'
    eq $P365, .CONTROL_LOOP_NEXT, loop363_next
    eq $P365, .CONTROL_LOOP_REDO, loop363_redo
  loop363_done:
    pop_eh 
  for_undef_216:
  if_335_end:
.annotate 'line', 106
    find_lex $P366, "$/"
    find_lex $P367, "$past"
    $P368 = $P366."!make"($P367)
.annotate 'line', 96
    .return ($P368)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block343"  :anon :subid("29_1299591508.723") :outer("28_1299591508.723")
    .param pmc param_346
.annotate 'line', 100
    new $P345, "Undef"
    .lex "$ast", $P345
    .lex "$_", param_346
    find_lex $P347, "$_"
    $P348 = $P347."ast"()
    store_lex "$ast", $P348
.annotate 'line', 101
    find_lex $P350, "$ast"
    unless_null $P350, vivify_217
    $P350 = root_new ['parrot';'Hash']
  vivify_217:
    set $P351, $P350["sink"]
    unless_null $P351, vivify_218
    new $P351, "Undef"
  vivify_218:
    defined $I352, $P351
    unless $I352, if_349_end
    find_lex $P353, "$ast"
    unless_null $P353, vivify_219
    $P353 = root_new ['parrot';'Hash']
  vivify_219:
    set $P354, $P353["sink"]
    unless_null $P354, vivify_220
    new $P354, "Undef"
  vivify_220:
    store_lex "$ast", $P354
  if_349_end:
.annotate 'line', 102
    find_lex $P356, "$ast"
    unless_null $P356, vivify_221
    $P356 = root_new ['parrot';'Hash']
  vivify_221:
    set $P357, $P356["bareblock"]
    unless_null $P357, vivify_222
    new $P357, "Undef"
  vivify_222:
    unless $P357, if_355_end
    find_lex $P358, "$ast"
    $P359 = "block_immediate"($P358)
    store_lex "$ast", $P359
  if_355_end:
.annotate 'line', 103
    find_lex $P360, "$past"
    find_lex $P361, "$ast"
    $P362 = $P360."push"($P361)
.annotate 'line', 99
    .return ($P362)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement"  :subid("30_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_370
    .param pmc param_371
    .param pmc param_372 :optional
    .param int has_param_372 :opt_flag
.annotate 'line', 109
    .const 'Sub' $P380 = "31_1299591508.723" 
    capture_lex $P380
    .lex "self", param_370
    .lex "$/", param_371
    if has_param_372, optparam_223
    new $P373, "Undef"
    set param_372, $P373
  optparam_223:
    .lex "$key", param_372
.annotate 'line', 110
    new $P374, "Undef"
    .lex "$past", $P374
.annotate 'line', 109
    find_lex $P375, "$past"
.annotate 'line', 111
    find_lex $P377, "$/"
    unless_null $P377, vivify_224
    $P377 = root_new ['parrot';'Hash']
  vivify_224:
    set $P378, $P377["EXPR"]
    unless_null $P378, vivify_225
    new $P378, "Undef"
  vivify_225:
    if $P378, if_376
.annotate 'line', 132
    find_lex $P441, "$/"
    unless_null $P441, vivify_226
    $P441 = root_new ['parrot';'Hash']
  vivify_226:
    set $P442, $P441["statement_control"]
    unless_null $P442, vivify_227
    new $P442, "Undef"
  vivify_227:
    if $P442, if_440
.annotate 'line', 133
    new $P446, "Integer"
    assign $P446, 0
    store_lex "$past", $P446
    goto if_440_end
  if_440:
.annotate 'line', 132
    find_lex $P443, "$/"
    unless_null $P443, vivify_228
    $P443 = root_new ['parrot';'Hash']
  vivify_228:
    set $P444, $P443["statement_control"]
    unless_null $P444, vivify_229
    new $P444, "Undef"
  vivify_229:
    $P445 = $P444."ast"()
    store_lex "$past", $P445
  if_440_end:
    goto if_376_end
  if_376:
.annotate 'line', 111
    .const 'Sub' $P380 = "31_1299591508.723" 
    capture_lex $P380
    $P380()
  if_376_end:
.annotate 'line', 134
    find_lex $P447, "$/"
    find_lex $P448, "$past"
    $P449 = $P447."!make"($P448)
.annotate 'line', 109
    .return ($P449)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block379"  :anon :subid("31_1299591508.723") :outer("30_1299591508.723")
.annotate 'line', 112
    new $P381, "Undef"
    .lex "$mc", $P381
.annotate 'line', 113
    new $P382, "Undef"
    .lex "$ml", $P382
.annotate 'line', 112
    find_lex $P383, "$/"
    unless_null $P383, vivify_230
    $P383 = root_new ['parrot';'Hash']
  vivify_230:
    set $P384, $P383["statement_mod_cond"]
    unless_null $P384, vivify_231
    $P384 = root_new ['parrot';'ResizablePMCArray']
  vivify_231:
    set $P385, $P384[0]
    unless_null $P385, vivify_232
    new $P385, "Undef"
  vivify_232:
    store_lex "$mc", $P385
.annotate 'line', 113
    find_lex $P386, "$/"
    unless_null $P386, vivify_233
    $P386 = root_new ['parrot';'Hash']
  vivify_233:
    set $P387, $P386["statement_mod_loop"]
    unless_null $P387, vivify_234
    $P387 = root_new ['parrot';'ResizablePMCArray']
  vivify_234:
    set $P388, $P387[0]
    unless_null $P388, vivify_235
    new $P388, "Undef"
  vivify_235:
    store_lex "$ml", $P388
.annotate 'line', 114
    find_lex $P389, "$/"
    unless_null $P389, vivify_236
    $P389 = root_new ['parrot';'Hash']
  vivify_236:
    set $P390, $P389["EXPR"]
    unless_null $P390, vivify_237
    new $P390, "Undef"
  vivify_237:
    $P391 = $P390."ast"()
    store_lex "$past", $P391
.annotate 'line', 115
    find_lex $P393, "$mc"
    unless $P393, if_392_end
.annotate 'line', 116
    get_hll_global $P394, ["PAST"], "Op"
    find_lex $P395, "$mc"
    unless_null $P395, vivify_238
    $P395 = root_new ['parrot';'Hash']
  vivify_238:
    set $P396, $P395["cond"]
    unless_null $P396, vivify_239
    new $P396, "Undef"
  vivify_239:
    $P397 = $P396."ast"()
    find_lex $P398, "$past"
    find_lex $P399, "$mc"
    unless_null $P399, vivify_240
    $P399 = root_new ['parrot';'Hash']
  vivify_240:
    set $P400, $P399["sym"]
    unless_null $P400, vivify_241
    new $P400, "Undef"
  vivify_241:
    set $S401, $P400
    find_lex $P402, "$/"
    $P403 = $P394."new"($P397, $P398, $S401 :named("pasttype"), $P402 :named("node"))
    store_lex "$past", $P403
  if_392_end:
.annotate 'line', 118
    find_lex $P406, "$ml"
    if $P406, if_405
    set $P404, $P406
    goto if_405_end
  if_405:
.annotate 'line', 119
    find_lex $P409, "$ml"
    unless_null $P409, vivify_242
    $P409 = root_new ['parrot';'Hash']
  vivify_242:
    set $P410, $P409["sym"]
    unless_null $P410, vivify_243
    new $P410, "Undef"
  vivify_243:
    set $S411, $P410
    iseq $I412, $S411, "for"
    if $I412, if_408
.annotate 'line', 128
    get_hll_global $P430, ["PAST"], "Op"
    find_lex $P431, "$ml"
    unless_null $P431, vivify_244
    $P431 = root_new ['parrot';'Hash']
  vivify_244:
    set $P432, $P431["cond"]
    unless_null $P432, vivify_245
    new $P432, "Undef"
  vivify_245:
    $P433 = $P432."ast"()
    find_lex $P434, "$past"
    find_lex $P435, "$ml"
    unless_null $P435, vivify_246
    $P435 = root_new ['parrot';'Hash']
  vivify_246:
    set $P436, $P435["sym"]
    unless_null $P436, vivify_247
    new $P436, "Undef"
  vivify_247:
    set $S437, $P436
    find_lex $P438, "$/"
    $P439 = $P430."new"($P433, $P434, $S437 :named("pasttype"), $P438 :named("node"))
    store_lex "$past", $P439
.annotate 'line', 127
    set $P407, $P439
.annotate 'line', 119
    goto if_408_end
  if_408:
.annotate 'line', 120
    get_hll_global $P413, ["PAST"], "Block"
.annotate 'line', 121
    get_hll_global $P414, ["PAST"], "Var"
    $P415 = $P414."new"("$_" :named("name"), "parameter" :named("scope"), 1 :named("isdecl"))
    find_lex $P416, "$past"
    $P417 = $P413."new"($P415, $P416, "immediate" :named("blocktype"))
.annotate 'line', 120
    store_lex "$past", $P417
.annotate 'line', 123
    find_lex $P418, "$past"
    $P418."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 124
    find_lex $P419, "$past"
    $P419."arity"(1)
.annotate 'line', 125
    get_hll_global $P420, ["PAST"], "Op"
    find_lex $P421, "$ml"
    unless_null $P421, vivify_248
    $P421 = root_new ['parrot';'Hash']
  vivify_248:
    set $P422, $P421["cond"]
    unless_null $P422, vivify_249
    new $P422, "Undef"
  vivify_249:
    $P423 = $P422."ast"()
    find_lex $P424, "$past"
    find_lex $P425, "$ml"
    unless_null $P425, vivify_250
    $P425 = root_new ['parrot';'Hash']
  vivify_250:
    set $P426, $P425["sym"]
    unless_null $P426, vivify_251
    new $P426, "Undef"
  vivify_251:
    set $S427, $P426
    find_lex $P428, "$/"
    $P429 = $P420."new"($P423, $P424, $S427 :named("pasttype"), $P428 :named("node"))
    store_lex "$past", $P429
.annotate 'line', 119
    set $P407, $P429
  if_408_end:
.annotate 'line', 118
    set $P404, $P407
  if_405_end:
.annotate 'line', 111
    .return ($P404)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "xblock"  :subid("32_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_451
    .param pmc param_452
.annotate 'line', 137
    .lex "self", param_451
    .lex "$/", param_452
.annotate 'line', 138
    find_lex $P453, "$/"
    get_hll_global $P454, ["PAST"], "Op"
    find_lex $P455, "$/"
    unless_null $P455, vivify_252
    $P455 = root_new ['parrot';'Hash']
  vivify_252:
    set $P456, $P455["EXPR"]
    unless_null $P456, vivify_253
    new $P456, "Undef"
  vivify_253:
    $P457 = $P456."ast"()
    find_lex $P458, "$/"
    unless_null $P458, vivify_254
    $P458 = root_new ['parrot';'Hash']
  vivify_254:
    set $P459, $P458["pblock"]
    unless_null $P459, vivify_255
    new $P459, "Undef"
  vivify_255:
    $P460 = $P459."ast"()
    find_lex $P461, "$/"
    $P462 = $P454."new"($P457, $P460, "if" :named("pasttype"), $P461 :named("node"))
    $P463 = $P453."!make"($P462)
.annotate 'line', 137
    .return ($P463)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "pblock"  :subid("33_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_465
    .param pmc param_466
.annotate 'line', 141
    .lex "self", param_465
    .lex "$/", param_466
.annotate 'line', 142
    find_lex $P467, "$/"
    find_lex $P468, "$/"
    unless_null $P468, vivify_256
    $P468 = root_new ['parrot';'Hash']
  vivify_256:
    set $P469, $P468["blockoid"]
    unless_null $P469, vivify_257
    new $P469, "Undef"
  vivify_257:
    $P470 = $P469."ast"()
    $P471 = $P467."!make"($P470)
.annotate 'line', 141
    .return ($P471)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "block"  :subid("34_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_473
    .param pmc param_474
.annotate 'line', 145
    .lex "self", param_473
    .lex "$/", param_474
.annotate 'line', 146
    find_lex $P475, "$/"
    find_lex $P476, "$/"
    unless_null $P476, vivify_258
    $P476 = root_new ['parrot';'Hash']
  vivify_258:
    set $P477, $P476["blockoid"]
    unless_null $P477, vivify_259
    new $P477, "Undef"
  vivify_259:
    $P478 = $P477."ast"()
    $P479 = $P475."!make"($P478)
.annotate 'line', 145
    .return ($P479)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "blockoid"  :subid("35_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_481
    .param pmc param_482
.annotate 'line', 149
    .const 'Sub' $P491 = "36_1299591508.723" 
    capture_lex $P491
    .lex "self", param_481
    .lex "$/", param_482
.annotate 'line', 150
    new $P483, "Undef"
    .lex "$BLOCK", $P483
    get_global $P484, "@BLOCK"
    $P485 = $P484."shift"()
    store_lex "$BLOCK", $P485
.annotate 'line', 151
    find_lex $P488, "$/"
    unless_null $P488, vivify_260
    $P488 = root_new ['parrot';'Hash']
  vivify_260:
    set $P489, $P488["statementlist"]
    unless_null $P489, vivify_261
    new $P489, "Undef"
  vivify_261:
    if $P489, if_487
.annotate 'line', 159
    find_dynamic_lex $P506, "$*HAS_YOU_ARE_HERE"
    unless_null $P506, vivify_262
    get_hll_global $P506, "$HAS_YOU_ARE_HERE"
    unless_null $P506, vivify_263
    die "Contextual $*HAS_YOU_ARE_HERE not found"
  vivify_263:
  vivify_262:
    unless $P506, if_505_end
.annotate 'line', 160
    find_lex $P507, "$/"
    $P508 = $P507."CURSOR"()
    $P508."panic"("{YOU_ARE_HERE} may only appear once in a setting")
  if_505_end:
.annotate 'line', 162
    new $P509, "Integer"
    assign $P509, 1
    store_dynamic_lex "$*HAS_YOU_ARE_HERE", $P509
.annotate 'line', 163
    find_lex $P510, "$/"
    find_lex $P511, "$/"
    unless_null $P511, vivify_264
    $P511 = root_new ['parrot';'Hash']
  vivify_264:
    set $P512, $P511["you_are_here"]
    unless_null $P512, vivify_265
    new $P512, "Undef"
  vivify_265:
    $P513 = $P512."ast"()
    $P514 = $P510."!make"($P513)
.annotate 'line', 158
    set $P486, $P514
.annotate 'line', 151
    goto if_487_end
  if_487:
    .const 'Sub' $P491 = "36_1299591508.723" 
    capture_lex $P491
    $P504 = $P491()
    set $P486, $P504
  if_487_end:
.annotate 'line', 149
    .return ($P486)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block490"  :anon :subid("36_1299591508.723") :outer("35_1299591508.723")
.annotate 'line', 152
    new $P492, "Undef"
    .lex "$past", $P492
    find_lex $P493, "$/"
    unless_null $P493, vivify_266
    $P493 = root_new ['parrot';'Hash']
  vivify_266:
    set $P494, $P493["statementlist"]
    unless_null $P494, vivify_267
    new $P494, "Undef"
  vivify_267:
    $P495 = $P494."ast"()
    store_lex "$past", $P495
.annotate 'line', 153
    find_lex $P496, "$BLOCK"
    find_lex $P497, "$past"
    $P496."push"($P497)
.annotate 'line', 154
    find_lex $P498, "$BLOCK"
    find_lex $P499, "$/"
    $P498."node"($P499)
.annotate 'line', 155
    find_lex $P500, "$BLOCK"
    $P500."closure"(1)
.annotate 'line', 156
    find_dynamic_lex $P501, "$/"
    find_lex $P502, "$BLOCK"
    $P503 = $P501."!make"($P502)
.annotate 'line', 151
    .return ($P503)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "newpad"  :subid("37_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_516
    .param pmc param_517
.annotate 'line', 167
    .lex "self", param_516
    .lex "$/", param_517
.annotate 'line', 168
    get_global $P518, "@BLOCK"
    unless_null $P518, vivify_268
    $P518 = root_new ['parrot';'ResizablePMCArray']
    set_global "@BLOCK", $P518
  vivify_268:
.annotate 'line', 167
    get_global $P519, "@BLOCK"
.annotate 'line', 169
    get_global $P520, "@BLOCK"
    get_hll_global $P521, ["PAST"], "Block"
    get_hll_global $P522, ["PAST"], "Stmts"
    $P523 = $P522."new"()
    $P524 = $P521."new"($P523)
    $P525 = $P520."unshift"($P524)
.annotate 'line', 167
    .return ($P525)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "outerctx"  :subid("38_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_527
    .param pmc param_528
.annotate 'line', 172
    .lex "self", param_527
    .lex "$/", param_528
.annotate 'line', 173
    get_global $P529, "@BLOCK"
    unless_null $P529, vivify_269
    $P529 = root_new ['parrot';'ResizablePMCArray']
    set_global "@BLOCK", $P529
  vivify_269:
.annotate 'line', 172
    get_global $P530, "@BLOCK"
.annotate 'line', 174
    find_dynamic_lex $P532, "%*COMPILING"
    unless_null $P532, vivify_270
    get_hll_global $P532, "%COMPILING"
    unless_null $P532, vivify_271
    die "Contextual %*COMPILING not found"
  vivify_271:
  vivify_270:
    set $P533, $P532["%?OPTIONS"]
    unless_null $P533, vivify_272
    $P533 = root_new ['parrot';'Hash']
  vivify_272:
    set $P534, $P533["outer_ctx"]
    unless_null $P534, vivify_273
    new $P534, "Undef"
  vivify_273:
    defined $I535, $P534
    if $I535, unless_531_end
.annotate 'line', 177
    find_dynamic_lex $P536, "$*SC"
    unless_null $P536, vivify_274
    get_hll_global $P536, "$SC"
    unless_null $P536, vivify_275
    die "Contextual $*SC not found"
  vivify_275:
  vivify_274:
    find_dynamic_lex $P538, "%*COMPILING"
    unless_null $P538, vivify_276
    get_hll_global $P538, "%COMPILING"
    unless_null $P538, vivify_277
    die "Contextual %*COMPILING not found"
  vivify_277:
  vivify_276:
    set $P539, $P538["%?OPTIONS"]
    unless_null $P539, vivify_278
    $P539 = root_new ['parrot';'Hash']
  vivify_278:
    set $P540, $P539["setting"]
    unless_null $P540, vivify_279
    new $P540, "Undef"
  vivify_279:
    set $P537, $P540
    defined $I542, $P537
    if $I542, default_541
    new $P543, "String"
    assign $P543, "NQPCORE"
    set $P537, $P543
  default_541:
    $P536."load_setting"($P537)
  unless_531_end:
.annotate 'line', 179
    find_lex $P544, "self"
    get_global $P545, "@BLOCK"
    unless_null $P545, vivify_280
    $P545 = root_new ['parrot';'ResizablePMCArray']
  vivify_280:
    set $P546, $P545[0]
    unless_null $P546, vivify_281
    new $P546, "Undef"
  vivify_281:
    $P547 = $P544."SET_BLOCK_OUTER_CTX"($P546)
.annotate 'line', 172
    .return ($P547)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "you_are_here"  :subid("39_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_549
    .param pmc param_550
.annotate 'line', 182
    .lex "self", param_549
    .lex "$/", param_550
.annotate 'line', 183
    find_lex $P551, "$/"
    find_lex $P552, "self"
    $P553 = $P552."CTXSAVE"()
    $P554 = $P551."!make"($P553)
.annotate 'line', 182
    .return ($P554)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "statement_control:sym<if>"  :subid("40_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_556
    .param pmc param_557
.annotate 'line', 188
    .const 'Sub' $P585 = "41_1299591508.723" 
    capture_lex $P585
    .lex "self", param_556
    .lex "$/", param_557
.annotate 'line', 189
    new $P558, "Undef"
    .lex "$count", $P558
.annotate 'line', 190
    new $P559, "Undef"
    .lex "$past", $P559
.annotate 'line', 189
    find_lex $P560, "$/"
    unless_null $P560, vivify_282
    $P560 = root_new ['parrot';'Hash']
  vivify_282:
    set $P561, $P560["xblock"]
    unless_null $P561, vivify_283
    new $P561, "Undef"
  vivify_283:
    set $N562, $P561
    new $P563, 'Float'
    set $P563, $N562
    sub $P564, $P563, 1
    store_lex "$count", $P564
.annotate 'line', 190
    find_lex $P565, "$count"
    set $I566, $P565
    find_lex $P567, "$/"
    unless_null $P567, vivify_284
    $P567 = root_new ['parrot';'Hash']
  vivify_284:
    set $P568, $P567["xblock"]
    unless_null $P568, vivify_285
    $P568 = root_new ['parrot';'ResizablePMCArray']
  vivify_285:
    set $P569, $P568[$I566]
    unless_null $P569, vivify_286
    new $P569, "Undef"
  vivify_286:
    $P570 = $P569."ast"()
    $P571 = "xblock_immediate"($P570)
    store_lex "$past", $P571
.annotate 'line', 191
    find_lex $P573, "$/"
    unless_null $P573, vivify_287
    $P573 = root_new ['parrot';'Hash']
  vivify_287:
    set $P574, $P573["else"]
    unless_null $P574, vivify_288
    new $P574, "Undef"
  vivify_288:
    unless $P574, if_572_end
.annotate 'line', 192
    find_lex $P575, "$past"
    find_lex $P576, "$/"
    unless_null $P576, vivify_289
    $P576 = root_new ['parrot';'Hash']
  vivify_289:
    set $P577, $P576["else"]
    unless_null $P577, vivify_290
    $P577 = root_new ['parrot';'ResizablePMCArray']
  vivify_290:
    set $P578, $P577[0]
    unless_null $P578, vivify_291
    new $P578, "Undef"
  vivify_291:
    $P579 = $P578."ast"()
    $P580 = "block_immediate"($P579)
    $P575."push"($P580)
  if_572_end:
.annotate 'line', 195
    new $P601, 'ExceptionHandler'
    set_label $P601, loop600_handler
    $P601."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P601
  loop600_test:
    find_lex $P581, "$count"
    set $N582, $P581
    isgt $I583, $N582, 0.0
    unless $I583, loop600_done
  loop600_redo:
    .const 'Sub' $P585 = "41_1299591508.723" 
    capture_lex $P585
    $P585()
  loop600_next:
    goto loop600_test
  loop600_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P602, exception, 'type'
    eq $P602, .CONTROL_LOOP_NEXT, loop600_next
    eq $P602, .CONTROL_LOOP_REDO, loop600_redo
  loop600_done:
    pop_eh 
.annotate 'line', 201
    find_lex $P603, "$/"
    find_lex $P604, "$past"
    $P605 = $P603."!make"($P604)
.annotate 'line', 188
    .return ($P605)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block584"  :anon :subid("41_1299591508.723") :outer("40_1299591508.723")
.annotate 'line', 197
    new $P586, "Undef"
    .lex "$else", $P586
.annotate 'line', 195
    find_lex $P587, "$count"
    clone $P588, $P587
    dec $P587
.annotate 'line', 197
    find_lex $P589, "$past"
    store_lex "$else", $P589
.annotate 'line', 198
    find_lex $P590, "$count"
    set $I591, $P590
    find_lex $P592, "$/"
    unless_null $P592, vivify_292
    $P592 = root_new ['parrot';'Hash']
  vivify_292:
    set $P593, $P592["xblock"]
    unless_null $P593, vivify_293
    $P593 = root_new ['parrot';'ResizablePMCArray']
  vivify_293:
    set $P594, $P593[$I591]
    unless_null $P594, vivify_294
    new $P594, "Undef"
  vivify_294:
    $P595 = $P594."ast"()
    $P596 = "xblock_immediate"($P595)
    store_lex "$past", $P596
.annotate 'line', 199
    find_lex $P597, "$past"
    find_lex $P598, "$else"
    $P599 = $P597."push"($P598)
.annotate 'line', 195
    .return ($P599)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<unless>"  :subid("42_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_607
    .param pmc param_608
.annotate 'line', 204
    .lex "self", param_607
    .lex "$/", param_608
.annotate 'line', 205
    new $P609, "Undef"
    .lex "$past", $P609
    find_lex $P610, "$/"
    unless_null $P610, vivify_295
    $P610 = root_new ['parrot';'Hash']
  vivify_295:
    set $P611, $P610["xblock"]
    unless_null $P611, vivify_296
    new $P611, "Undef"
  vivify_296:
    $P612 = $P611."ast"()
    $P613 = "xblock_immediate"($P612)
    store_lex "$past", $P613
.annotate 'line', 206
    find_lex $P614, "$past"
    $P614."pasttype"("unless")
.annotate 'line', 207
    find_lex $P615, "$/"
    find_lex $P616, "$past"
    $P617 = $P615."!make"($P616)
.annotate 'line', 204
    .return ($P617)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<while>"  :subid("43_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_619
    .param pmc param_620
.annotate 'line', 210
    .lex "self", param_619
    .lex "$/", param_620
.annotate 'line', 211
    new $P621, "Undef"
    .lex "$past", $P621
    find_lex $P622, "$/"
    unless_null $P622, vivify_297
    $P622 = root_new ['parrot';'Hash']
  vivify_297:
    set $P623, $P622["xblock"]
    unless_null $P623, vivify_298
    new $P623, "Undef"
  vivify_298:
    $P624 = $P623."ast"()
    $P625 = "xblock_immediate"($P624)
    store_lex "$past", $P625
.annotate 'line', 212
    find_lex $P626, "$past"
    find_lex $P627, "$/"
    unless_null $P627, vivify_299
    $P627 = root_new ['parrot';'Hash']
  vivify_299:
    set $P628, $P627["sym"]
    unless_null $P628, vivify_300
    new $P628, "Undef"
  vivify_300:
    set $S629, $P628
    $P626."pasttype"($S629)
.annotate 'line', 213
    find_lex $P630, "$/"
    find_lex $P631, "$past"
    $P632 = $P630."!make"($P631)
.annotate 'line', 210
    .return ($P632)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<repeat>"  :subid("44_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_634
    .param pmc param_635
.annotate 'line', 216
    .lex "self", param_634
    .lex "$/", param_635
.annotate 'line', 217
    new $P636, "Undef"
    .lex "$pasttype", $P636
.annotate 'line', 218
    new $P637, "Undef"
    .lex "$past", $P637
.annotate 'line', 217
    new $P638, "String"
    assign $P638, "repeat_"
    find_lex $P639, "$/"
    unless_null $P639, vivify_301
    $P639 = root_new ['parrot';'Hash']
  vivify_301:
    set $P640, $P639["wu"]
    unless_null $P640, vivify_302
    new $P640, "Undef"
  vivify_302:
    set $S641, $P640
    concat $P642, $P638, $S641
    store_lex "$pasttype", $P642
    find_lex $P643, "$past"
.annotate 'line', 219
    find_lex $P645, "$/"
    unless_null $P645, vivify_303
    $P645 = root_new ['parrot';'Hash']
  vivify_303:
    set $P646, $P645["xblock"]
    unless_null $P646, vivify_304
    new $P646, "Undef"
  vivify_304:
    if $P646, if_644
.annotate 'line', 224
    get_hll_global $P653, ["PAST"], "Op"
    find_lex $P654, "$/"
    unless_null $P654, vivify_305
    $P654 = root_new ['parrot';'Hash']
  vivify_305:
    set $P655, $P654["EXPR"]
    unless_null $P655, vivify_306
    new $P655, "Undef"
  vivify_306:
    $P656 = $P655."ast"()
    find_lex $P657, "$/"
    unless_null $P657, vivify_307
    $P657 = root_new ['parrot';'Hash']
  vivify_307:
    set $P658, $P657["pblock"]
    unless_null $P658, vivify_308
    new $P658, "Undef"
  vivify_308:
    $P659 = $P658."ast"()
    $P660 = "block_immediate"($P659)
    find_lex $P661, "$pasttype"
    find_lex $P662, "$/"
    $P663 = $P653."new"($P656, $P660, $P661 :named("pasttype"), $P662 :named("node"))
    store_lex "$past", $P663
.annotate 'line', 223
    goto if_644_end
  if_644:
.annotate 'line', 220
    find_lex $P647, "$/"
    unless_null $P647, vivify_309
    $P647 = root_new ['parrot';'Hash']
  vivify_309:
    set $P648, $P647["xblock"]
    unless_null $P648, vivify_310
    new $P648, "Undef"
  vivify_310:
    $P649 = $P648."ast"()
    $P650 = "xblock_immediate"($P649)
    store_lex "$past", $P650
.annotate 'line', 221
    find_lex $P651, "$past"
    find_lex $P652, "$pasttype"
    $P651."pasttype"($P652)
  if_644_end:
.annotate 'line', 227
    find_lex $P664, "$/"
    find_lex $P665, "$past"
    $P666 = $P664."!make"($P665)
.annotate 'line', 216
    .return ($P666)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<for>"  :subid("45_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_668
    .param pmc param_669
.annotate 'line', 230
    .lex "self", param_668
    .lex "$/", param_669
.annotate 'line', 231
    new $P670, "Undef"
    .lex "$past", $P670
.annotate 'line', 233
    new $P671, "Undef"
    .lex "$block", $P671
.annotate 'line', 231
    find_lex $P672, "$/"
    unless_null $P672, vivify_311
    $P672 = root_new ['parrot';'Hash']
  vivify_311:
    set $P673, $P672["xblock"]
    unless_null $P673, vivify_312
    new $P673, "Undef"
  vivify_312:
    $P674 = $P673."ast"()
    store_lex "$past", $P674
.annotate 'line', 232
    find_lex $P675, "$past"
    $P675."pasttype"("for")
.annotate 'line', 233
    find_lex $P676, "$past"
    unless_null $P676, vivify_313
    $P676 = root_new ['parrot';'ResizablePMCArray']
  vivify_313:
    set $P677, $P676[1]
    unless_null $P677, vivify_314
    new $P677, "Undef"
  vivify_314:
    store_lex "$block", $P677
.annotate 'line', 234
    find_lex $P679, "$block"
    $P680 = $P679."arity"()
    if $P680, unless_678_end
.annotate 'line', 235
    find_lex $P681, "$block"
    unless_null $P681, vivify_315
    $P681 = root_new ['parrot';'ResizablePMCArray']
  vivify_315:
    set $P682, $P681[0]
    unless_null $P682, vivify_316
    new $P682, "Undef"
  vivify_316:
    get_hll_global $P683, ["PAST"], "Var"
    $P684 = $P683."new"("$_" :named("name"), "parameter" :named("scope"))
    $P682."push"($P684)
.annotate 'line', 236
    find_lex $P685, "$block"
    $P685."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 237
    find_lex $P686, "$block"
    $P686."arity"(1)
  unless_678_end:
.annotate 'line', 239
    find_lex $P687, "$block"
    $P687."blocktype"("immediate")
.annotate 'line', 240
    find_lex $P688, "$/"
    find_lex $P689, "$past"
    $P690 = $P688."!make"($P689)
.annotate 'line', 230
    .return ($P690)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<CATCH>"  :subid("46_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_692
    .param pmc param_693
.annotate 'line', 243
    .lex "self", param_692
    .lex "$/", param_693
.annotate 'line', 244
    new $P694, "Undef"
    .lex "$block", $P694
    find_lex $P695, "$/"
    unless_null $P695, vivify_317
    $P695 = root_new ['parrot';'Hash']
  vivify_317:
    set $P696, $P695["block"]
    unless_null $P696, vivify_318
    new $P696, "Undef"
  vivify_318:
    $P697 = $P696."ast"()
    store_lex "$block", $P697
.annotate 'line', 245
    find_lex $P698, "$/"
    find_lex $P699, "$block"
    "push_block_handler"($P698, $P699)
.annotate 'line', 246
    get_global $P700, "@BLOCK"
    unless_null $P700, vivify_319
    $P700 = root_new ['parrot';'ResizablePMCArray']
  vivify_319:
    set $P701, $P700[0]
    unless_null $P701, vivify_320
    new $P701, "Undef"
  vivify_320:
    $P702 = $P701."handlers"()
    set $P703, $P702[0]
    unless_null $P703, vivify_321
    new $P703, "Undef"
  vivify_321:
    $P703."handle_types_except"("CONTROL")
.annotate 'line', 247
    find_lex $P704, "$/"
    get_hll_global $P705, ["PAST"], "Stmts"
    find_lex $P706, "$/"
    $P707 = $P705."new"($P706 :named("node"))
    $P708 = $P704."!make"($P707)
.annotate 'line', 243
    .return ($P708)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<CONTROL>"  :subid("47_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_710
    .param pmc param_711
.annotate 'line', 250
    .lex "self", param_710
    .lex "$/", param_711
.annotate 'line', 251
    new $P712, "Undef"
    .lex "$block", $P712
    find_lex $P713, "$/"
    unless_null $P713, vivify_322
    $P713 = root_new ['parrot';'Hash']
  vivify_322:
    set $P714, $P713["block"]
    unless_null $P714, vivify_323
    new $P714, "Undef"
  vivify_323:
    $P715 = $P714."ast"()
    store_lex "$block", $P715
.annotate 'line', 252
    find_lex $P716, "$/"
    find_lex $P717, "$block"
    "push_block_handler"($P716, $P717)
.annotate 'line', 253
    get_global $P718, "@BLOCK"
    unless_null $P718, vivify_324
    $P718 = root_new ['parrot';'ResizablePMCArray']
  vivify_324:
    set $P719, $P718[0]
    unless_null $P719, vivify_325
    new $P719, "Undef"
  vivify_325:
    $P720 = $P719."handlers"()
    set $P721, $P720[0]
    unless_null $P721, vivify_326
    new $P721, "Undef"
  vivify_326:
    $P721."handle_types"("CONTROL")
.annotate 'line', 254
    find_lex $P722, "$/"
    get_hll_global $P723, ["PAST"], "Stmts"
    find_lex $P724, "$/"
    $P725 = $P723."new"($P724 :named("node"))
    $P726 = $P722."!make"($P725)
.annotate 'line', 250
    .return ($P726)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_prefix:sym<INIT>"  :subid("48_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_729
    .param pmc param_730
.annotate 'line', 294
    .lex "self", param_729
    .lex "$/", param_730
.annotate 'line', 295
    new $P731, "Undef"
    .lex "$init_block", $P731
    get_hll_global $P732, ["PAST"], "Block"
    $P733 = $P732."new"("immediate" :named("blocktype"))
    store_lex "$init_block", $P733
.annotate 'line', 296
    find_lex $P734, "$init_block"
    $P735 = $P734."loadinit"()
    find_lex $P736, "$/"
    unless_null $P736, vivify_327
    $P736 = root_new ['parrot';'Hash']
  vivify_327:
    set $P737, $P736["blorst"]
    unless_null $P737, vivify_328
    new $P737, "Undef"
  vivify_328:
    $P738 = $P737."ast"()
    $P735."push"($P738)
.annotate 'line', 297
    find_lex $P739, "$/"
    find_lex $P740, "$init_block"
    $P741 = $P739."!make"($P740)
.annotate 'line', 294
    .return ($P741)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_prefix:sym<try>"  :subid("49_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_743
    .param pmc param_744
.annotate 'line', 300
    .lex "self", param_743
    .lex "$/", param_744
.annotate 'line', 301
    new $P745, "Undef"
    .lex "$past", $P745
    find_lex $P746, "$/"
    unless_null $P746, vivify_329
    $P746 = root_new ['parrot';'Hash']
  vivify_329:
    set $P747, $P746["blorst"]
    unless_null $P747, vivify_330
    new $P747, "Undef"
  vivify_330:
    $P748 = $P747."ast"()
    store_lex "$past", $P748
.annotate 'line', 302
    get_hll_global $P750, ["PAST"], "Block"
    find_lex $P751, "$past"
    $P752 = $P750."ACCEPTS"($P751)
    if $P752, unless_749_end
.annotate 'line', 303
    get_hll_global $P753, ["PAST"], "Block"
    find_lex $P754, "$past"
    find_lex $P755, "$/"
    $P756 = $P753."new"($P754, "immediate" :named("blocktype"), $P755 :named("node"))
    store_lex "$past", $P756
  unless_749_end:
.annotate 'line', 305
    find_lex $P758, "$past"
    $P759 = $P758."handlers"()
    if $P759, unless_757_end
.annotate 'line', 306
    find_lex $P760, "$past"
    get_hll_global $P761, ["PAST"], "Control"
.annotate 'line', 308
    get_hll_global $P762, ["PAST"], "Stmts"
.annotate 'line', 309
    get_hll_global $P763, ["PAST"], "Op"
.annotate 'line', 310
    get_hll_global $P764, ["PAST"], "Var"
.annotate 'line', 311
    get_hll_global $P765, ["PAST"], "Var"
    $P766 = $P765."new"("register" :named("scope"), "exception" :named("name"))
    $P767 = $P764."new"($P766, "handled", "keyed" :named("scope"))
.annotate 'line', 310
    $P768 = $P763."new"($P767, 1, "bind" :named("pasttype"))
.annotate 'line', 309
    $P769 = $P762."new"($P768)
.annotate 'line', 308
    $P770 = $P761."new"($P769, "CONTROL" :named("handle_types_except"))
.annotate 'line', 306
    new $P771, "ResizablePMCArray"
    push $P771, $P770
    $P760."handlers"($P771)
  unless_757_end:
.annotate 'line', 320
    find_lex $P772, "$/"
    find_lex $P773, "$past"
    $P774 = $P772."!make"($P773)
.annotate 'line', 300
    .return ($P774)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "blorst"  :subid("50_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_776
    .param pmc param_777
.annotate 'line', 323
    .lex "self", param_776
    .lex "$/", param_777
.annotate 'line', 324
    find_lex $P778, "$/"
.annotate 'line', 325
    find_lex $P781, "$/"
    unless_null $P781, vivify_331
    $P781 = root_new ['parrot';'Hash']
  vivify_331:
    set $P782, $P781["block"]
    unless_null $P782, vivify_332
    new $P782, "Undef"
  vivify_332:
    if $P782, if_780
.annotate 'line', 326
    find_lex $P787, "$/"
    unless_null $P787, vivify_333
    $P787 = root_new ['parrot';'Hash']
  vivify_333:
    set $P788, $P787["statement"]
    unless_null $P788, vivify_334
    new $P788, "Undef"
  vivify_334:
    $P789 = $P788."ast"()
    set $P779, $P789
.annotate 'line', 325
    goto if_780_end
  if_780:
    find_lex $P783, "$/"
    unless_null $P783, vivify_335
    $P783 = root_new ['parrot';'Hash']
  vivify_335:
    set $P784, $P783["block"]
    unless_null $P784, vivify_336
    new $P784, "Undef"
  vivify_336:
    $P785 = $P784."ast"()
    $P786 = "block_immediate"($P785)
    set $P779, $P786
  if_780_end:
    $P790 = $P778."!make"($P779)
.annotate 'line', 323
    .return ($P790)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_cond:sym<if>"  :subid("51_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_792
    .param pmc param_793
.annotate 'line', 331
    .lex "self", param_792
    .lex "$/", param_793
    find_lex $P794, "$/"
    find_lex $P795, "$/"
    unless_null $P795, vivify_337
    $P795 = root_new ['parrot';'Hash']
  vivify_337:
    set $P796, $P795["cond"]
    unless_null $P796, vivify_338
    new $P796, "Undef"
  vivify_338:
    $P797 = $P796."ast"()
    $P798 = $P794."!make"($P797)
    .return ($P798)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_cond:sym<unless>"  :subid("52_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_800
    .param pmc param_801
.annotate 'line', 332
    .lex "self", param_800
    .lex "$/", param_801
    find_lex $P802, "$/"
    find_lex $P803, "$/"
    unless_null $P803, vivify_339
    $P803 = root_new ['parrot';'Hash']
  vivify_339:
    set $P804, $P803["cond"]
    unless_null $P804, vivify_340
    new $P804, "Undef"
  vivify_340:
    $P805 = $P804."ast"()
    $P806 = $P802."!make"($P805)
    .return ($P806)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_loop:sym<while>"  :subid("53_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_808
    .param pmc param_809
.annotate 'line', 334
    .lex "self", param_808
    .lex "$/", param_809
    find_lex $P810, "$/"
    find_lex $P811, "$/"
    unless_null $P811, vivify_341
    $P811 = root_new ['parrot';'Hash']
  vivify_341:
    set $P812, $P811["cond"]
    unless_null $P812, vivify_342
    new $P812, "Undef"
  vivify_342:
    $P813 = $P812."ast"()
    $P814 = $P810."!make"($P813)
    .return ($P814)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_loop:sym<until>"  :subid("54_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_816
    .param pmc param_817
.annotate 'line', 335
    .lex "self", param_816
    .lex "$/", param_817
    find_lex $P818, "$/"
    find_lex $P819, "$/"
    unless_null $P819, vivify_343
    $P819 = root_new ['parrot';'Hash']
  vivify_343:
    set $P820, $P819["cond"]
    unless_null $P820, vivify_344
    new $P820, "Undef"
  vivify_344:
    $P821 = $P820."ast"()
    $P822 = $P818."!make"($P821)
    .return ($P822)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<fatarrow>"  :subid("55_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_824
    .param pmc param_825
.annotate 'line', 339
    .lex "self", param_824
    .lex "$/", param_825
    find_lex $P826, "$/"
    find_lex $P827, "$/"
    unless_null $P827, vivify_345
    $P827 = root_new ['parrot';'Hash']
  vivify_345:
    set $P828, $P827["fatarrow"]
    unless_null $P828, vivify_346
    new $P828, "Undef"
  vivify_346:
    $P829 = $P828."ast"()
    $P830 = $P826."!make"($P829)
    .return ($P830)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<colonpair>"  :subid("56_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_832
    .param pmc param_833
.annotate 'line', 340
    .lex "self", param_832
    .lex "$/", param_833
    find_lex $P834, "$/"
    find_lex $P835, "$/"
    unless_null $P835, vivify_347
    $P835 = root_new ['parrot';'Hash']
  vivify_347:
    set $P836, $P835["colonpair"]
    unless_null $P836, vivify_348
    new $P836, "Undef"
  vivify_348:
    $P837 = $P836."ast"()
    $P838 = $P834."!make"($P837)
    .return ($P838)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<variable>"  :subid("57_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_840
    .param pmc param_841
.annotate 'line', 341
    .lex "self", param_840
    .lex "$/", param_841
    find_lex $P842, "$/"
    find_lex $P843, "$/"
    unless_null $P843, vivify_349
    $P843 = root_new ['parrot';'Hash']
  vivify_349:
    set $P844, $P843["variable"]
    unless_null $P844, vivify_350
    new $P844, "Undef"
  vivify_350:
    $P845 = $P844."ast"()
    $P846 = $P842."!make"($P845)
    .return ($P846)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<package_declarator>"  :subid("58_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_848
    .param pmc param_849
.annotate 'line', 342
    .lex "self", param_848
    .lex "$/", param_849
    find_lex $P850, "$/"
    find_lex $P851, "$/"
    unless_null $P851, vivify_351
    $P851 = root_new ['parrot';'Hash']
  vivify_351:
    set $P852, $P851["package_declarator"]
    unless_null $P852, vivify_352
    new $P852, "Undef"
  vivify_352:
    $P853 = $P852."ast"()
    $P854 = $P850."!make"($P853)
    .return ($P854)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<scope_declarator>"  :subid("59_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_856
    .param pmc param_857
.annotate 'line', 343
    .lex "self", param_856
    .lex "$/", param_857
    find_lex $P858, "$/"
    find_lex $P859, "$/"
    unless_null $P859, vivify_353
    $P859 = root_new ['parrot';'Hash']
  vivify_353:
    set $P860, $P859["scope_declarator"]
    unless_null $P860, vivify_354
    new $P860, "Undef"
  vivify_354:
    $P861 = $P860."ast"()
    $P862 = $P858."!make"($P861)
    .return ($P862)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<routine_declarator>"  :subid("60_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_864
    .param pmc param_865
.annotate 'line', 344
    .lex "self", param_864
    .lex "$/", param_865
    find_lex $P866, "$/"
    find_lex $P867, "$/"
    unless_null $P867, vivify_355
    $P867 = root_new ['parrot';'Hash']
  vivify_355:
    set $P868, $P867["routine_declarator"]
    unless_null $P868, vivify_356
    new $P868, "Undef"
  vivify_356:
    $P869 = $P868."ast"()
    $P870 = $P866."!make"($P869)
    .return ($P870)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<regex_declarator>"  :subid("61_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_872
    .param pmc param_873
.annotate 'line', 345
    .lex "self", param_872
    .lex "$/", param_873
    find_lex $P874, "$/"
    find_lex $P875, "$/"
    unless_null $P875, vivify_357
    $P875 = root_new ['parrot';'Hash']
  vivify_357:
    set $P876, $P875["regex_declarator"]
    unless_null $P876, vivify_358
    new $P876, "Undef"
  vivify_358:
    $P877 = $P876."ast"()
    $P878 = $P874."!make"($P877)
    .return ($P878)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<statement_prefix>"  :subid("62_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_880
    .param pmc param_881
.annotate 'line', 346
    .lex "self", param_880
    .lex "$/", param_881
    find_lex $P882, "$/"
    find_lex $P883, "$/"
    unless_null $P883, vivify_359
    $P883 = root_new ['parrot';'Hash']
  vivify_359:
    set $P884, $P883["statement_prefix"]
    unless_null $P884, vivify_360
    new $P884, "Undef"
  vivify_360:
    $P885 = $P884."ast"()
    $P886 = $P882."!make"($P885)
    .return ($P886)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<lambda>"  :subid("63_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_888
    .param pmc param_889
.annotate 'line', 347
    .lex "self", param_888
    .lex "$/", param_889
    find_lex $P890, "$/"
    find_lex $P891, "$/"
    unless_null $P891, vivify_361
    $P891 = root_new ['parrot';'Hash']
  vivify_361:
    set $P892, $P891["pblock"]
    unless_null $P892, vivify_362
    new $P892, "Undef"
  vivify_362:
    $P893 = $P892."ast"()
    $P894 = $P890."!make"($P893)
    .return ($P894)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "fatarrow"  :subid("64_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_896
    .param pmc param_897
.annotate 'line', 349
    .lex "self", param_896
    .lex "$/", param_897
.annotate 'line', 350
    new $P898, "Undef"
    .lex "$past", $P898
    find_lex $P899, "$/"
    unless_null $P899, vivify_363
    $P899 = root_new ['parrot';'Hash']
  vivify_363:
    set $P900, $P899["val"]
    unless_null $P900, vivify_364
    new $P900, "Undef"
  vivify_364:
    $P901 = $P900."ast"()
    store_lex "$past", $P901
.annotate 'line', 351
    find_lex $P902, "$past"
    find_lex $P903, "$/"
    unless_null $P903, vivify_365
    $P903 = root_new ['parrot';'Hash']
  vivify_365:
    set $P904, $P903["key"]
    unless_null $P904, vivify_366
    new $P904, "Undef"
  vivify_366:
    $P905 = $P904."Str"()
    $P902."named"($P905)
.annotate 'line', 352
    find_lex $P906, "$/"
    find_lex $P907, "$past"
    $P908 = $P906."!make"($P907)
.annotate 'line', 349
    .return ($P908)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "colonpair"  :subid("65_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_910
    .param pmc param_911
.annotate 'line', 355
    .lex "self", param_910
    .lex "$/", param_911
.annotate 'line', 356
    new $P912, "Undef"
    .lex "$past", $P912
.annotate 'line', 357
    find_lex $P915, "$/"
    unless_null $P915, vivify_367
    $P915 = root_new ['parrot';'Hash']
  vivify_367:
    set $P916, $P915["circumfix"]
    unless_null $P916, vivify_368
    new $P916, "Undef"
  vivify_368:
    if $P916, if_914
.annotate 'line', 358
    get_hll_global $P921, ["PAST"], "Val"
    find_lex $P922, "$/"
    unless_null $P922, vivify_369
    $P922 = root_new ['parrot';'Hash']
  vivify_369:
    set $P923, $P922["not"]
    unless_null $P923, vivify_370
    new $P923, "Undef"
  vivify_370:
    isfalse $I924, $P923
    $P925 = $P921."new"($I924 :named("value"))
    set $P913, $P925
.annotate 'line', 357
    goto if_914_end
  if_914:
    find_lex $P917, "$/"
    unless_null $P917, vivify_371
    $P917 = root_new ['parrot';'Hash']
  vivify_371:
    set $P918, $P917["circumfix"]
    unless_null $P918, vivify_372
    $P918 = root_new ['parrot';'ResizablePMCArray']
  vivify_372:
    set $P919, $P918[0]
    unless_null $P919, vivify_373
    new $P919, "Undef"
  vivify_373:
    $P920 = $P919."ast"()
    set $P913, $P920
  if_914_end:
    store_lex "$past", $P913
.annotate 'line', 359
    find_lex $P926, "$past"
    find_lex $P927, "$/"
    unless_null $P927, vivify_374
    $P927 = root_new ['parrot';'Hash']
  vivify_374:
    set $P928, $P927["identifier"]
    unless_null $P928, vivify_375
    new $P928, "Undef"
  vivify_375:
    set $S929, $P928
    $P926."named"($S929)
.annotate 'line', 360
    find_lex $P930, "$/"
    find_lex $P931, "$past"
    $P932 = $P930."!make"($P931)
.annotate 'line', 355
    .return ($P932)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "variable"  :subid("66_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_934
    .param pmc param_935
.annotate 'line', 363
    .const 'Sub' $P948 = "67_1299591508.723" 
    capture_lex $P948
    .lex "self", param_934
    .lex "$/", param_935
.annotate 'line', 364
    new $P936, "Undef"
    .lex "$past", $P936
.annotate 'line', 363
    find_lex $P937, "$past"
.annotate 'line', 365
    find_lex $P939, "$/"
    unless_null $P939, vivify_376
    $P939 = root_new ['parrot';'Hash']
  vivify_376:
    set $P940, $P939["postcircumfix"]
    unless_null $P940, vivify_377
    new $P940, "Undef"
  vivify_377:
    if $P940, if_938
.annotate 'line', 369
    .const 'Sub' $P948 = "67_1299591508.723" 
    capture_lex $P948
    $P948()
    goto if_938_end
  if_938:
.annotate 'line', 366
    find_lex $P941, "$/"
    unless_null $P941, vivify_394
    $P941 = root_new ['parrot';'Hash']
  vivify_394:
    set $P942, $P941["postcircumfix"]
    unless_null $P942, vivify_395
    new $P942, "Undef"
  vivify_395:
    $P943 = $P942."ast"()
    store_lex "$past", $P943
.annotate 'line', 367
    find_lex $P944, "$past"
    get_hll_global $P945, ["PAST"], "Var"
    $P946 = $P945."new"("$/" :named("name"))
    $P944."unshift"($P946)
  if_938_end:
.annotate 'line', 399
    find_lex $P1020, "$/"
    find_lex $P1021, "$past"
    $P1022 = $P1020."!make"($P1021)
.annotate 'line', 363
    .return ($P1022)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block947"  :anon :subid("67_1299591508.723") :outer("66_1299591508.723")
.annotate 'line', 370
    $P949 = root_new ['parrot';'ResizablePMCArray']
    .lex "@name", $P949
    get_hll_global $P950, ["NQP"], "Compiler"
    find_lex $P951, "$/"
    set $S952, $P951
    $P953 = $P950."parse_name"($S952)
    store_lex "@name", $P953
.annotate 'line', 371
    get_hll_global $P954, ["PAST"], "Var"
    find_lex $P955, "@name"
    $P956 = $P955."pop"()
    set $S957, $P956
    $P958 = $P954."new"($S957 :named("name"))
    store_lex "$past", $P958
.annotate 'line', 372
    find_lex $P960, "@name"
    unless $P960, if_959_end
.annotate 'line', 373
    find_lex $P962, "@name"
    unless_null $P962, vivify_378
    $P962 = root_new ['parrot';'ResizablePMCArray']
  vivify_378:
    set $P963, $P962[0]
    unless_null $P963, vivify_379
    new $P963, "Undef"
  vivify_379:
    set $S964, $P963
    iseq $I965, $S964, "GLOBAL"
    unless $I965, if_961_end
    find_lex $P966, "@name"
    $P966."shift"()
  if_961_end:
.annotate 'line', 374
    find_lex $P967, "$past"
    find_lex $P968, "@name"
    $P967."namespace"($P968)
.annotate 'line', 375
    find_lex $P969, "$past"
    $P969."scope"("package")
.annotate 'line', 376
    find_lex $P970, "$past"
    find_lex $P971, "$/"
    unless_null $P971, vivify_380
    $P971 = root_new ['parrot';'Hash']
  vivify_380:
    set $P972, $P971["sigil"]
    unless_null $P972, vivify_381
    new $P972, "Undef"
  vivify_381:
    $P973 = "vivitype"($P972)
    $P970."viviself"($P973)
.annotate 'line', 377
    find_lex $P974, "$past"
    $P974."lvalue"(1)
  if_959_end:
.annotate 'line', 379
    find_lex $P977, "$/"
    unless_null $P977, vivify_382
    $P977 = root_new ['parrot';'Hash']
  vivify_382:
    set $P978, $P977["twigil"]
    unless_null $P978, vivify_383
    $P978 = root_new ['parrot';'ResizablePMCArray']
  vivify_383:
    set $P979, $P978[0]
    unless_null $P979, vivify_384
    new $P979, "Undef"
  vivify_384:
    set $S980, $P979
    iseq $I981, $S980, "*"
    if $I981, if_976
.annotate 'line', 392
    find_lex $P1003, "$/"
    unless_null $P1003, vivify_385
    $P1003 = root_new ['parrot';'Hash']
  vivify_385:
    set $P1004, $P1003["twigil"]
    unless_null $P1004, vivify_386
    $P1004 = root_new ['parrot';'ResizablePMCArray']
  vivify_386:
    set $P1005, $P1004[0]
    unless_null $P1005, vivify_387
    new $P1005, "Undef"
  vivify_387:
    set $S1006, $P1005
    iseq $I1007, $S1006, "!"
    if $I1007, if_1002
    new $P1001, 'Integer'
    set $P1001, $I1007
    goto if_1002_end
  if_1002:
.annotate 'line', 393
    find_lex $P1008, "$past"
    get_hll_global $P1009, ["PAST"], "Var"
    $P1010 = $P1009."new"("self" :named("name"))
    $P1008."push"($P1010)
.annotate 'line', 394
    find_lex $P1011, "$past"
    $P1011."scope"("attribute")
.annotate 'line', 395
    find_lex $P1012, "$past"
    find_lex $P1013, "$/"
    unless_null $P1013, vivify_388
    $P1013 = root_new ['parrot';'Hash']
  vivify_388:
    set $P1014, $P1013["sigil"]
    unless_null $P1014, vivify_389
    new $P1014, "Undef"
  vivify_389:
    $P1015 = "vivitype"($P1014)
    $P1012."viviself"($P1015)
.annotate 'line', 396
    find_lex $P1016, "$past"
    get_hll_global $P1017, ["PAST"], "Var"
    $P1018 = $P1017."new"("$?CLASS" :named("name"))
    $P1019 = $P1016."push"($P1018)
.annotate 'line', 392
    set $P1001, $P1019
  if_1002_end:
    set $P975, $P1001
.annotate 'line', 379
    goto if_976_end
  if_976:
.annotate 'line', 380
    find_lex $P982, "$past"
    $P982."scope"("contextual")
.annotate 'line', 381
    find_lex $P983, "$past"
.annotate 'line', 382
    get_hll_global $P984, ["PAST"], "Var"
.annotate 'line', 384
    find_lex $P985, "$/"
    unless_null $P985, vivify_390
    $P985 = root_new ['parrot';'Hash']
  vivify_390:
    set $P986, $P985["sigil"]
    unless_null $P986, vivify_391
    new $P986, "Undef"
  vivify_391:
    set $S987, $P986
    new $P988, 'String'
    set $P988, $S987
    find_lex $P989, "$/"
    unless_null $P989, vivify_392
    $P989 = root_new ['parrot';'Hash']
  vivify_392:
    set $P990, $P989["desigilname"]
    unless_null $P990, vivify_393
    new $P990, "Undef"
  vivify_393:
    concat $P991, $P988, $P990
.annotate 'line', 386
    get_hll_global $P992, ["PAST"], "Op"
    new $P993, "String"
    assign $P993, "Contextual "
    find_lex $P994, "$/"
    set $S995, $P994
    concat $P996, $P993, $S995
    concat $P997, $P996, " not found"
    $P998 = $P992."new"($P997, "die" :named("pirop"))
    $P999 = $P984."new"("package" :named("scope"), "" :named("namespace"), $P991 :named("name"), $P998 :named("viviself"))
.annotate 'line', 382
    $P1000 = $P983."viviself"($P999)
.annotate 'line', 379
    set $P975, $P1000
  if_976_end:
.annotate 'line', 369
    .return ($P975)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<module>"  :subid("68_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_1024
    .param pmc param_1025
.annotate 'line', 402
    .lex "self", param_1024
    .lex "$/", param_1025
    find_lex $P1026, "$/"
    find_lex $P1027, "$/"
    unless_null $P1027, vivify_396
    $P1027 = root_new ['parrot';'Hash']
  vivify_396:
    set $P1028, $P1027["package_def"]
    unless_null $P1028, vivify_397
    new $P1028, "Undef"
  vivify_397:
    $P1029 = $P1028."ast"()
    $P1030 = $P1026."!make"($P1029)
    .return ($P1030)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<knowhow>"  :subid("69_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_1032
    .param pmc param_1033
.annotate 'line', 403
    .lex "self", param_1032
    .lex "$/", param_1033
    find_lex $P1034, "$/"
    find_lex $P1035, "$/"
    unless_null $P1035, vivify_398
    $P1035 = root_new ['parrot';'Hash']
  vivify_398:
    set $P1036, $P1035["package_def"]
    unless_null $P1036, vivify_399
    new $P1036, "Undef"
  vivify_399:
    $P1037 = $P1036."ast"()
    $P1038 = $P1034."!make"($P1037)
    .return ($P1038)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<class>"  :subid("70_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_1040
    .param pmc param_1041
.annotate 'line', 404
    .lex "self", param_1040
    .lex "$/", param_1041
    find_lex $P1042, "$/"
    find_lex $P1043, "$/"
    unless_null $P1043, vivify_400
    $P1043 = root_new ['parrot';'Hash']
  vivify_400:
    set $P1044, $P1043["package_def"]
    unless_null $P1044, vivify_401
    new $P1044, "Undef"
  vivify_401:
    $P1045 = $P1044."ast"()
    $P1046 = $P1042."!make"($P1045)
    .return ($P1046)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<grammar>"  :subid("71_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_1048
    .param pmc param_1049
.annotate 'line', 405
    .lex "self", param_1048
    .lex "$/", param_1049
    find_lex $P1050, "$/"
    find_lex $P1051, "$/"
    unless_null $P1051, vivify_402
    $P1051 = root_new ['parrot';'Hash']
  vivify_402:
    set $P1052, $P1051["package_def"]
    unless_null $P1052, vivify_403
    new $P1052, "Undef"
  vivify_403:
    $P1053 = $P1052."ast"()
    $P1054 = $P1050."!make"($P1053)
    .return ($P1054)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<role>"  :subid("72_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_1056
    .param pmc param_1057
.annotate 'line', 406
    .lex "self", param_1056
    .lex "$/", param_1057
    find_lex $P1058, "$/"
    find_lex $P1059, "$/"
    unless_null $P1059, vivify_404
    $P1059 = root_new ['parrot';'Hash']
  vivify_404:
    set $P1060, $P1059["package_def"]
    unless_null $P1060, vivify_405
    new $P1060, "Undef"
  vivify_405:
    $P1061 = $P1060."ast"()
    $P1062 = $P1058."!make"($P1061)
    .return ($P1062)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<native>"  :subid("73_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_1064
    .param pmc param_1065
.annotate 'line', 407
    .lex "self", param_1064
    .lex "$/", param_1065
    find_lex $P1066, "$/"
    find_lex $P1067, "$/"
    unless_null $P1067, vivify_406
    $P1067 = root_new ['parrot';'Hash']
  vivify_406:
    set $P1068, $P1067["package_def"]
    unless_null $P1068, vivify_407
    new $P1068, "Undef"
  vivify_407:
    $P1069 = $P1068."ast"()
    $P1070 = $P1066."!make"($P1069)
    .return ($P1070)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "package_def"  :subid("74_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_1072
    .param pmc param_1073
.annotate 'line', 409
    .const 'Sub' $P1232 = "77_1299591508.723" 
    capture_lex $P1232
    .const 'Sub' $P1181 = "76_1299591508.723" 
    capture_lex $P1181
    .const 'Sub' $P1139 = "75_1299591508.723" 
    capture_lex $P1139
    .lex "self", param_1072
    .lex "$/", param_1073
.annotate 'line', 411
    $P1074 = root_new ['parrot';'ResizablePMCArray']
    .lex "@ns", $P1074
.annotate 'line', 412
    new $P1075, "Undef"
    .lex "$name", $P1075
.annotate 'line', 413
    new $P1076, "Undef"
    .lex "$how", $P1076
.annotate 'line', 416
    new $P1077, "Undef"
    .lex "$past", $P1077
.annotate 'line', 411
    find_lex $P1078, "$/"
    unless_null $P1078, vivify_408
    $P1078 = root_new ['parrot';'Hash']
  vivify_408:
    set $P1079, $P1078["name"]
    unless_null $P1079, vivify_409
    $P1079 = root_new ['parrot';'Hash']
  vivify_409:
    set $P1080, $P1079["identifier"]
    unless_null $P1080, vivify_410
    new $P1080, "Undef"
  vivify_410:
    clone $P1081, $P1080
    store_lex "@ns", $P1081
.annotate 'line', 412
    find_lex $P1082, "@ns"
    $P1083 = $P1082."pop"()
    set $S1084, $P1083
    new $P1085, 'String'
    set $P1085, $S1084
    store_lex "$name", $P1085
.annotate 'line', 413
    find_dynamic_lex $P1086, "$*PKGDECL"
    unless_null $P1086, vivify_411
    get_hll_global $P1086, "$PKGDECL"
    unless_null $P1086, vivify_412
    die "Contextual $*PKGDECL not found"
  vivify_412:
  vivify_411:
    find_dynamic_lex $P1087, "%*HOW"
    unless_null $P1087, vivify_413
    get_hll_global $P1087, "%HOW"
    unless_null $P1087, vivify_414
    die "Contextual %*HOW not found"
  vivify_414:
  vivify_413:
    set $P1088, $P1087[$P1086]
    unless_null $P1088, vivify_415
    new $P1088, "Undef"
  vivify_415:
    store_lex "$how", $P1088
.annotate 'line', 416
    find_lex $P1091, "$/"
    unless_null $P1091, vivify_416
    $P1091 = root_new ['parrot';'Hash']
  vivify_416:
    set $P1092, $P1091["block"]
    unless_null $P1092, vivify_417
    new $P1092, "Undef"
  vivify_417:
    if $P1092, if_1090
    find_lex $P1096, "$/"
    unless_null $P1096, vivify_418
    $P1096 = root_new ['parrot';'Hash']
  vivify_418:
    set $P1097, $P1096["comp_unit"]
    unless_null $P1097, vivify_419
    new $P1097, "Undef"
  vivify_419:
    $P1098 = $P1097."ast"()
    set $P1089, $P1098
    goto if_1090_end
  if_1090:
    find_lex $P1093, "$/"
    unless_null $P1093, vivify_420
    $P1093 = root_new ['parrot';'Hash']
  vivify_420:
    set $P1094, $P1093["block"]
    unless_null $P1094, vivify_421
    new $P1094, "Undef"
  vivify_421:
    $P1095 = $P1094."ast"()
    set $P1089, $P1095
  if_1090_end:
    store_lex "$past", $P1089
.annotate 'line', 417
    find_lex $P1099, "$past"
    find_lex $P1100, "$/"
    unless_null $P1100, vivify_422
    $P1100 = root_new ['parrot';'Hash']
  vivify_422:
    set $P1101, $P1100["name"]
    unless_null $P1101, vivify_423
    $P1101 = root_new ['parrot';'Hash']
  vivify_423:
    set $P1102, $P1101["identifier"]
    unless_null $P1102, vivify_424
    new $P1102, "Undef"
  vivify_424:
    $P1099."namespace"($P1102)
.annotate 'line', 421
    find_dynamic_lex $P1103, "$*PACKAGE-SETUP"
    unless_null $P1103, vivify_425
    get_hll_global $P1103, "$PACKAGE-SETUP"
    unless_null $P1103, vivify_426
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_426:
  vivify_425:
    get_hll_global $P1104, ["PAST"], "Stmts"
.annotate 'line', 422
    get_hll_global $P1105, ["PAST"], "Op"
.annotate 'line', 423
    get_hll_global $P1106, ["PAST"], "Var"
    $P1107 = $P1106."new"("type_obj" :named("name"), "register" :named("scope"), 1 :named("isdecl"))
.annotate 'line', 424
    get_hll_global $P1108, ["PAST"], "Op"
.annotate 'line', 426
    get_hll_global $P1109, ["PAST"], "Var"
    find_lex $P1110, "$how"
    get_how $P1111, $P1110
    find_lex $P1112, "$how"
    $P1113 = $P1111."name"($P1112)
    $P1114 = $P1109."new"($P1113 :named("name"), "" :named("namespace"), "package" :named("scope"))
.annotate 'line', 427
    get_hll_global $P1115, ["PAST"], "Val"
    find_lex $P1116, "$name"
    $P1117 = $P1115."new"($P1116 :named("value"), "name" :named("named"))
    $P1118 = $P1108."new"($P1114, $P1117, "callmethod" :named("pasttype"), "new_type" :named("name"))
.annotate 'line', 424
    $P1119 = $P1105."new"($P1107, $P1118, "bind" :named("pasttype"))
.annotate 'line', 430
    get_hll_global $P1120, ["PAST"], "Op"
.annotate 'line', 431
    get_hll_global $P1121, ["PAST"], "Var"
    find_lex $P1122, "$name"
    find_lex $P1123, "@ns"
    $P1124 = $P1121."new"($P1122 :named("name"), $P1123 :named("namespace"), "package" :named("scope"))
.annotate 'line', 432
    get_hll_global $P1125, ["PAST"], "Var"
    $P1126 = $P1125."new"("type_obj" :named("name"), "register" :named("scope"))
    $P1127 = $P1120."new"($P1124, $P1126, "bind" :named("pasttype"))
.annotate 'line', 434
    get_hll_global $P1128, ["PAST"], "Op"
.annotate 'line', 435
    get_hll_global $P1129, ["PAST"], "Var"
    $P1130 = $P1129."new"("$?CLASS" :named("name"))
.annotate 'line', 436
    get_hll_global $P1131, ["PAST"], "Var"
    $P1132 = $P1131."new"("type_obj" :named("name"), "register" :named("scope"))
    $P1133 = $P1128."new"($P1130, $P1132, "bind" :named("pasttype"))
.annotate 'line', 434
    $P1134 = $P1104."new"($P1119, $P1127, $P1133)
.annotate 'line', 421
    $P1103."unshift"($P1134)
.annotate 'line', 441
    find_lex $P1136, "$/"
    unless_null $P1136, vivify_427
    $P1136 = root_new ['parrot';'Hash']
  vivify_427:
    set $P1137, $P1136["repr"]
    unless_null $P1137, vivify_428
    new $P1137, "Undef"
  vivify_428:
    unless $P1137, if_1135_end
    .const 'Sub' $P1139 = "75_1299591508.723" 
    capture_lex $P1139
    $P1139()
  if_1135_end:
.annotate 'line', 452
    find_lex $P1155, "$how"
    can $I1156, $P1155, "parametric"
    if $I1156, if_1154
    new $P1153, 'Integer'
    set $P1153, $I1156
    goto if_1154_end
  if_1154:
    find_lex $P1157, "$how"
    find_lex $P1158, "$how"
    $P1159 = $P1157."parametric"($P1158)
    set $P1153, $P1159
  if_1154_end:
    if $P1153, if_1152
.annotate 'line', 459
    find_lex $P1172, "$past"
    $P1172."blocktype"("immediate")
.annotate 'line', 460
    find_lex $P1173, "$past"
    get_hll_global $P1174, ["PAST"], "Var"
    $P1175 = $P1174."new"("$?CLASS" :named("name"), "package" :named("scope"), 1 :named("isdecl"))
    $P1173."unshift"($P1175)
.annotate 'line', 461
    find_lex $P1176, "$past"
    $P1176."symbol"("$?CLASS", "package" :named("scope"))
.annotate 'line', 458
    goto if_1152_end
  if_1152:
.annotate 'line', 453
    find_lex $P1160, "$past"
    $P1160."blocktype"("declaration")
.annotate 'line', 454
    find_lex $P1161, "$past"
    get_hll_global $P1162, ["PAST"], "Var"
    $P1163 = $P1162."new"("$?CLASS" :named("name"), "parameter" :named("scope"))
    $P1161."unshift"($P1163)
.annotate 'line', 455
    find_lex $P1164, "$past"
    $P1164."symbol"("$?CLASS", "lexical" :named("scope"))
.annotate 'line', 456
    find_dynamic_lex $P1165, "$*PACKAGE-SETUP"
    unless_null $P1165, vivify_437
    get_hll_global $P1165, "$PACKAGE-SETUP"
    unless_null $P1165, vivify_438
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_438:
  vivify_437:
    set $P1166, $P1165[0]
    unless_null $P1166, vivify_439
    $P1166 = root_new ['parrot';'ResizablePMCArray']
  vivify_439:
    set $P1167, $P1166[0]
    unless_null $P1167, vivify_440
    $P1167 = root_new ['parrot';'ResizablePMCArray']
  vivify_440:
    set $P1168, $P1167[1]
    unless_null $P1168, vivify_441
    new $P1168, "Undef"
  vivify_441:
    get_hll_global $P1169, ["PAST"], "Val"
    find_lex $P1170, "$past"
    $P1171 = $P1169."new"($P1170 :named("value"), "body_block" :named("named"))
    $P1168."push"($P1171)
  if_1152_end:
.annotate 'line', 466
    find_lex $P1178, "$/"
    unless_null $P1178, vivify_442
    $P1178 = root_new ['parrot';'Hash']
  vivify_442:
    set $P1179, $P1178["parent"]
    unless_null $P1179, vivify_443
    new $P1179, "Undef"
  vivify_443:
    if $P1179, if_1177
.annotate 'line', 480
    find_dynamic_lex $P1209, "$*PKGDECL"
    unless_null $P1209, vivify_444
    get_hll_global $P1209, "$PKGDECL"
    unless_null $P1209, vivify_445
    die "Contextual $*PKGDECL not found"
  vivify_445:
  vivify_444:
    set $S1210, $P1209
    iseq $I1211, $S1210, "grammar"
    unless $I1211, if_1208_end
.annotate 'line', 481
    find_dynamic_lex $P1212, "$*PACKAGE-SETUP"
    unless_null $P1212, vivify_446
    get_hll_global $P1212, "$PACKAGE-SETUP"
    unless_null $P1212, vivify_447
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_447:
  vivify_446:
    get_hll_global $P1213, ["PAST"], "Op"
.annotate 'line', 483
    get_hll_global $P1214, ["PAST"], "Op"
.annotate 'line', 486
    get_hll_global $P1215, ["PAST"], "Var"
    $P1216 = $P1215."new"("type_obj" :named("name"), "register" :named("scope"))
    $P1217 = $P1214."new"($P1216, "get_how PP" :named("pirop"))
.annotate 'line', 488
    get_hll_global $P1218, ["PAST"], "Var"
    $P1219 = $P1218."new"("type_obj" :named("name"), "register" :named("scope"))
.annotate 'line', 489
    get_hll_global $P1220, ["PAST"], "Var"
    $P1221 = $P1220."new"("Cursor" :named("name"), "Regex" :named("namespace"), "package" :named("scope"))
    $P1222 = $P1213."new"($P1217, $P1219, $P1221, "callmethod" :named("pasttype"), "add_parent" :named("name"))
.annotate 'line', 481
    $P1212."push"($P1222)
  if_1208_end:
.annotate 'line', 480
    goto if_1177_end
  if_1177:
.annotate 'line', 466
    .const 'Sub' $P1181 = "76_1299591508.723" 
    capture_lex $P1181
    $P1181()
  if_1177_end:
.annotate 'line', 494
    find_lex $P1224, "$/"
    unless_null $P1224, vivify_454
    $P1224 = root_new ['parrot';'Hash']
  vivify_454:
    set $P1225, $P1224["role"]
    unless_null $P1225, vivify_455
    new $P1225, "Undef"
  vivify_455:
    unless $P1225, if_1223_end
.annotate 'line', 495
    find_lex $P1227, "$/"
    unless_null $P1227, vivify_456
    $P1227 = root_new ['parrot';'Hash']
  vivify_456:
    set $P1228, $P1227["role"]
    unless_null $P1228, vivify_457
    new $P1228, "Undef"
  vivify_457:
    defined $I1229, $P1228
    unless $I1229, for_undef_458
    iter $P1226, $P1228
    new $P1259, 'ExceptionHandler'
    set_label $P1259, loop1258_handler
    $P1259."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P1259
  loop1258_test:
    unless $P1226, loop1258_done
    shift $P1230, $P1226
  loop1258_redo:
    .const 'Sub' $P1232 = "77_1299591508.723" 
    capture_lex $P1232
    $P1232($P1230)
  loop1258_next:
    goto loop1258_test
  loop1258_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P1260, exception, 'type'
    eq $P1260, .CONTROL_LOOP_NEXT, loop1258_next
    eq $P1260, .CONTROL_LOOP_REDO, loop1258_redo
  loop1258_done:
    pop_eh 
  for_undef_458:
  if_1223_end:
.annotate 'line', 512
    find_dynamic_lex $P1261, "$*PACKAGE-SETUP"
    unless_null $P1261, vivify_463
    get_hll_global $P1261, "$PACKAGE-SETUP"
    unless_null $P1261, vivify_464
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_464:
  vivify_463:
    get_hll_global $P1262, ["PAST"], "Op"
.annotate 'line', 514
    get_hll_global $P1263, ["PAST"], "Op"
.annotate 'line', 517
    get_hll_global $P1264, ["PAST"], "Var"
    $P1265 = $P1264."new"("type_obj" :named("name"), "register" :named("scope"))
    $P1266 = $P1263."new"($P1265, "get_how PP" :named("pirop"))
.annotate 'line', 519
    get_hll_global $P1267, ["PAST"], "Var"
    $P1268 = $P1267."new"("type_obj" :named("name"), "register" :named("scope"))
    $P1269 = $P1262."new"($P1266, $P1268, "callmethod" :named("pasttype"), "compose" :named("name"))
.annotate 'line', 512
    $P1261."push"($P1269)
.annotate 'line', 523
    get_global $P1270, "@BLOCK"
    unless_null $P1270, vivify_465
    $P1270 = root_new ['parrot';'ResizablePMCArray']
  vivify_465:
    set $P1271, $P1270[0]
    unless_null $P1271, vivify_466
    $P1271 = root_new ['parrot';'ResizablePMCArray']
  vivify_466:
    set $P1272, $P1271[0]
    unless_null $P1272, vivify_467
    new $P1272, "Undef"
  vivify_467:
    get_hll_global $P1273, ["PAST"], "Var"
    find_lex $P1274, "$name"
    find_lex $P1275, "@ns"
    $P1276 = $P1273."new"($P1274 :named("name"), $P1275 :named("namespace"), "package" :named("scope"), 1 :named("isdecl"))
    $P1272."unshift"($P1276)
.annotate 'line', 526
    find_lex $P1277, "$past"
    $P1278 = $P1277."loadinit"()
    get_hll_global $P1279, ["PAST"], "Block"
    find_dynamic_lex $P1280, "$*PACKAGE-SETUP"
    unless_null $P1280, vivify_468
    get_hll_global $P1280, "$PACKAGE-SETUP"
    unless_null $P1280, vivify_469
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_469:
  vivify_468:
    $P1281 = $P1279."new"($P1280, "immediate" :named("blocktype"))
    $P1278."push"($P1281)
.annotate 'line', 528
    find_lex $P1282, "$/"
    find_lex $P1283, "$past"
    $P1284 = $P1282."!make"($P1283)
.annotate 'line', 409
    .return ($P1284)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1138"  :anon :subid("75_1299591508.723") :outer("74_1299591508.723")
.annotate 'line', 442
    new $P1140, "Undef"
    .lex "$repr_name", $P1140
    find_lex $P1141, "$/"
    unless_null $P1141, vivify_429
    $P1141 = root_new ['parrot';'Hash']
  vivify_429:
    set $P1142, $P1141["repr"]
    unless_null $P1142, vivify_430
    $P1142 = root_new ['parrot';'ResizablePMCArray']
  vivify_430:
    set $P1143, $P1142[0]
    unless_null $P1143, vivify_431
    new $P1143, "Undef"
  vivify_431:
    $P1144 = $P1143."ast"()
    store_lex "$repr_name", $P1144
.annotate 'line', 443
    find_lex $P1145, "$repr_name"
    $P1145."named"("repr")
.annotate 'line', 444
    find_dynamic_lex $P1146, "$*PACKAGE-SETUP"
    unless_null $P1146, vivify_432
    get_hll_global $P1146, "$PACKAGE-SETUP"
    unless_null $P1146, vivify_433
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_433:
  vivify_432:
    set $P1147, $P1146[0]
    unless_null $P1147, vivify_434
    $P1147 = root_new ['parrot';'ResizablePMCArray']
  vivify_434:
    set $P1148, $P1147[0]
    unless_null $P1148, vivify_435
    $P1148 = root_new ['parrot';'ResizablePMCArray']
  vivify_435:
    set $P1149, $P1148[1]
    unless_null $P1149, vivify_436
    new $P1149, "Undef"
  vivify_436:
    find_lex $P1150, "$repr_name"
    $P1151 = $P1149."push"($P1150)
.annotate 'line', 441
    .return ($P1151)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1180"  :anon :subid("76_1299591508.723") :outer("74_1299591508.723")
.annotate 'line', 467
    $P1182 = root_new ['parrot';'ResizablePMCArray']
    .lex "@ns", $P1182
.annotate 'line', 468
    new $P1183, "Undef"
    .lex "$name", $P1183
.annotate 'line', 467
    find_lex $P1184, "$/"
    unless_null $P1184, vivify_448
    $P1184 = root_new ['parrot';'Hash']
  vivify_448:
    set $P1185, $P1184["parent"]
    unless_null $P1185, vivify_449
    $P1185 = root_new ['parrot';'ResizablePMCArray']
  vivify_449:
    set $P1186, $P1185[0]
    unless_null $P1186, vivify_450
    $P1186 = root_new ['parrot';'Hash']
  vivify_450:
    set $P1187, $P1186["identifier"]
    unless_null $P1187, vivify_451
    new $P1187, "Undef"
  vivify_451:
    clone $P1188, $P1187
    store_lex "@ns", $P1188
.annotate 'line', 468
    find_lex $P1189, "@ns"
    $P1190 = $P1189."pop"()
    set $S1191, $P1190
    new $P1192, 'String'
    set $P1192, $S1191
    store_lex "$name", $P1192
.annotate 'line', 469
    find_dynamic_lex $P1193, "$*PACKAGE-SETUP"
    unless_null $P1193, vivify_452
    get_hll_global $P1193, "$PACKAGE-SETUP"
    unless_null $P1193, vivify_453
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_453:
  vivify_452:
    get_hll_global $P1194, ["PAST"], "Op"
.annotate 'line', 471
    get_hll_global $P1195, ["PAST"], "Op"
.annotate 'line', 474
    get_hll_global $P1196, ["PAST"], "Var"
    $P1197 = $P1196."new"("type_obj" :named("name"), "register" :named("scope"))
    $P1198 = $P1195."new"($P1197, "get_how PP" :named("pirop"))
.annotate 'line', 476
    get_hll_global $P1199, ["PAST"], "Var"
    $P1200 = $P1199."new"("type_obj" :named("name"), "register" :named("scope"))
.annotate 'line', 477
    get_hll_global $P1201, ["PAST"], "Var"
    find_lex $P1202, "$name"
    set $S1203, $P1202
    find_lex $P1204, "@ns"
    $P1205 = $P1201."new"($S1203 :named("name"), $P1204 :named("namespace"), "package" :named("scope"))
    $P1206 = $P1194."new"($P1198, $P1200, $P1205, "callmethod" :named("pasttype"), "add_parent" :named("name"))
.annotate 'line', 469
    $P1207 = $P1193."push"($P1206)
.annotate 'line', 466
    .return ($P1207)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1231"  :anon :subid("77_1299591508.723") :outer("74_1299591508.723")
    .param pmc param_1235
.annotate 'line', 496
    $P1233 = root_new ['parrot';'ResizablePMCArray']
    .lex "@ns", $P1233
.annotate 'line', 497
    new $P1234, "Undef"
    .lex "$name", $P1234
    .lex "$_", param_1235
.annotate 'line', 496
    find_lex $P1236, "$_"
    unless_null $P1236, vivify_459
    $P1236 = root_new ['parrot';'Hash']
  vivify_459:
    set $P1237, $P1236["identifier"]
    unless_null $P1237, vivify_460
    new $P1237, "Undef"
  vivify_460:
    clone $P1238, $P1237
    store_lex "@ns", $P1238
.annotate 'line', 497
    find_lex $P1239, "@ns"
    $P1240 = $P1239."pop"()
    set $S1241, $P1240
    new $P1242, 'String'
    set $P1242, $S1241
    store_lex "$name", $P1242
.annotate 'line', 498
    find_dynamic_lex $P1243, "$*PACKAGE-SETUP"
    unless_null $P1243, vivify_461
    get_hll_global $P1243, "$PACKAGE-SETUP"
    unless_null $P1243, vivify_462
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_462:
  vivify_461:
    get_hll_global $P1244, ["PAST"], "Op"
.annotate 'line', 500
    get_hll_global $P1245, ["PAST"], "Op"
.annotate 'line', 503
    get_hll_global $P1246, ["PAST"], "Var"
    $P1247 = $P1246."new"("type_obj" :named("name"), "register" :named("scope"))
    $P1248 = $P1245."new"($P1247, "get_how PP" :named("pirop"))
.annotate 'line', 505
    get_hll_global $P1249, ["PAST"], "Var"
    $P1250 = $P1249."new"("type_obj" :named("name"), "register" :named("scope"))
.annotate 'line', 506
    get_hll_global $P1251, ["PAST"], "Var"
    find_lex $P1252, "$name"
    set $S1253, $P1252
    find_lex $P1254, "@ns"
    $P1255 = $P1251."new"($S1253 :named("name"), $P1254 :named("namespace"), "package" :named("scope"))
    $P1256 = $P1244."new"($P1248, $P1250, $P1255, "callmethod" :named("pasttype"), "add_role" :named("name"))
.annotate 'line', 498
    $P1257 = $P1243."push"($P1256)
.annotate 'line', 495
    .return ($P1257)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scope_declarator:sym<my>"  :subid("78_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_1286
    .param pmc param_1287
.annotate 'line', 531
    .lex "self", param_1286
    .lex "$/", param_1287
    find_lex $P1288, "$/"
    find_lex $P1289, "$/"
    unless_null $P1289, vivify_470
    $P1289 = root_new ['parrot';'Hash']
  vivify_470:
    set $P1290, $P1289["scoped"]
    unless_null $P1290, vivify_471
    new $P1290, "Undef"
  vivify_471:
    $P1291 = $P1290."ast"()
    $P1292 = $P1288."!make"($P1291)
    .return ($P1292)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scope_declarator:sym<our>"  :subid("79_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_1294
    .param pmc param_1295
.annotate 'line', 532
    .lex "self", param_1294
    .lex "$/", param_1295
    find_lex $P1296, "$/"
    find_lex $P1297, "$/"
    unless_null $P1297, vivify_472
    $P1297 = root_new ['parrot';'Hash']
  vivify_472:
    set $P1298, $P1297["scoped"]
    unless_null $P1298, vivify_473
    new $P1298, "Undef"
  vivify_473:
    $P1299 = $P1298."ast"()
    $P1300 = $P1296."!make"($P1299)
    .return ($P1300)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scope_declarator:sym<has>"  :subid("80_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_1302
    .param pmc param_1303
.annotate 'line', 533
    .lex "self", param_1302
    .lex "$/", param_1303
    find_lex $P1304, "$/"
    find_lex $P1305, "$/"
    unless_null $P1305, vivify_474
    $P1305 = root_new ['parrot';'Hash']
  vivify_474:
    set $P1306, $P1305["scoped"]
    unless_null $P1306, vivify_475
    new $P1306, "Undef"
  vivify_475:
    $P1307 = $P1306."ast"()
    $P1308 = $P1304."!make"($P1307)
    .return ($P1308)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scoped"  :subid("81_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_1310
    .param pmc param_1311
.annotate 'line', 535
    .lex "self", param_1310
    .lex "$/", param_1311
.annotate 'line', 536
    find_lex $P1312, "$/"
.annotate 'line', 537
    find_lex $P1315, "$/"
    unless_null $P1315, vivify_476
    $P1315 = root_new ['parrot';'Hash']
  vivify_476:
    set $P1316, $P1315["declarator"]
    unless_null $P1316, vivify_477
    new $P1316, "Undef"
  vivify_477:
    if $P1316, if_1314
.annotate 'line', 538
    find_lex $P1320, "$/"
    unless_null $P1320, vivify_478
    $P1320 = root_new ['parrot';'Hash']
  vivify_478:
    set $P1321, $P1320["multi_declarator"]
    unless_null $P1321, vivify_479
    new $P1321, "Undef"
  vivify_479:
    $P1322 = $P1321."ast"()
    set $P1313, $P1322
.annotate 'line', 537
    goto if_1314_end
  if_1314:
    find_lex $P1317, "$/"
    unless_null $P1317, vivify_480
    $P1317 = root_new ['parrot';'Hash']
  vivify_480:
    set $P1318, $P1317["declarator"]
    unless_null $P1318, vivify_481
    new $P1318, "Undef"
  vivify_481:
    $P1319 = $P1318."ast"()
    set $P1313, $P1319
  if_1314_end:
    $P1323 = $P1312."!make"($P1313)
.annotate 'line', 535
    .return ($P1323)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "declarator"  :subid("82_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_1325
    .param pmc param_1326
.annotate 'line', 541
    .lex "self", param_1325
    .lex "$/", param_1326
.annotate 'line', 542
    find_lex $P1327, "$/"
.annotate 'line', 543
    find_lex $P1330, "$/"
    unless_null $P1330, vivify_482
    $P1330 = root_new ['parrot';'Hash']
  vivify_482:
    set $P1331, $P1330["routine_declarator"]
    unless_null $P1331, vivify_483
    new $P1331, "Undef"
  vivify_483:
    if $P1331, if_1329
.annotate 'line', 544
    find_lex $P1335, "$/"
    unless_null $P1335, vivify_484
    $P1335 = root_new ['parrot';'Hash']
  vivify_484:
    set $P1336, $P1335["variable_declarator"]
    unless_null $P1336, vivify_485
    new $P1336, "Undef"
  vivify_485:
    $P1337 = $P1336."ast"()
    set $P1328, $P1337
.annotate 'line', 543
    goto if_1329_end
  if_1329:
    find_lex $P1332, "$/"
    unless_null $P1332, vivify_486
    $P1332 = root_new ['parrot';'Hash']
  vivify_486:
    set $P1333, $P1332["routine_declarator"]
    unless_null $P1333, vivify_487
    new $P1333, "Undef"
  vivify_487:
    $P1334 = $P1333."ast"()
    set $P1328, $P1334
  if_1329_end:
    $P1338 = $P1327."!make"($P1328)
.annotate 'line', 541
    .return ($P1338)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "multi_declarator:sym<multi>"  :subid("83_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_1340
    .param pmc param_1341
.annotate 'line', 547
    .lex "self", param_1340
    .lex "$/", param_1341
    find_lex $P1342, "$/"
    find_lex $P1345, "$/"
    unless_null $P1345, vivify_488
    $P1345 = root_new ['parrot';'Hash']
  vivify_488:
    set $P1346, $P1345["declarator"]
    unless_null $P1346, vivify_489
    new $P1346, "Undef"
  vivify_489:
    if $P1346, if_1344
    find_lex $P1350, "$/"
    unless_null $P1350, vivify_490
    $P1350 = root_new ['parrot';'Hash']
  vivify_490:
    set $P1351, $P1350["routine_def"]
    unless_null $P1351, vivify_491
    new $P1351, "Undef"
  vivify_491:
    $P1352 = $P1351."ast"()
    set $P1343, $P1352
    goto if_1344_end
  if_1344:
    find_lex $P1347, "$/"
    unless_null $P1347, vivify_492
    $P1347 = root_new ['parrot';'Hash']
  vivify_492:
    set $P1348, $P1347["declarator"]
    unless_null $P1348, vivify_493
    new $P1348, "Undef"
  vivify_493:
    $P1349 = $P1348."ast"()
    set $P1343, $P1349
  if_1344_end:
    $P1353 = $P1342."!make"($P1343)
    .return ($P1353)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "multi_declarator:sym<proto>"  :subid("84_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_1355
    .param pmc param_1356
.annotate 'line', 548
    .lex "self", param_1355
    .lex "$/", param_1356
    find_lex $P1357, "$/"
    find_lex $P1360, "$/"
    unless_null $P1360, vivify_494
    $P1360 = root_new ['parrot';'Hash']
  vivify_494:
    set $P1361, $P1360["declarator"]
    unless_null $P1361, vivify_495
    new $P1361, "Undef"
  vivify_495:
    if $P1361, if_1359
    find_lex $P1365, "$/"
    unless_null $P1365, vivify_496
    $P1365 = root_new ['parrot';'Hash']
  vivify_496:
    set $P1366, $P1365["routine_def"]
    unless_null $P1366, vivify_497
    new $P1366, "Undef"
  vivify_497:
    $P1367 = $P1366."ast"()
    set $P1358, $P1367
    goto if_1359_end
  if_1359:
    find_lex $P1362, "$/"
    unless_null $P1362, vivify_498
    $P1362 = root_new ['parrot';'Hash']
  vivify_498:
    set $P1363, $P1362["declarator"]
    unless_null $P1363, vivify_499
    new $P1363, "Undef"
  vivify_499:
    $P1364 = $P1363."ast"()
    set $P1358, $P1364
  if_1359_end:
    $P1368 = $P1357."!make"($P1358)
    .return ($P1368)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "multi_declarator:sym<null>"  :subid("85_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_1370
    .param pmc param_1371
.annotate 'line', 549
    .lex "self", param_1370
    .lex "$/", param_1371
    find_lex $P1372, "$/"
    find_lex $P1373, "$/"
    unless_null $P1373, vivify_500
    $P1373 = root_new ['parrot';'Hash']
  vivify_500:
    set $P1374, $P1373["declarator"]
    unless_null $P1374, vivify_501
    new $P1374, "Undef"
  vivify_501:
    $P1375 = $P1374."ast"()
    $P1376 = $P1372."!make"($P1375)
    .return ($P1376)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "variable_declarator"  :subid("86_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_1378
    .param pmc param_1379
.annotate 'line', 552
    .const 'Sub' $P1451 = "89_1299591508.723" 
    capture_lex $P1451
    .const 'Sub' $P1406 = "87_1299591508.723" 
    capture_lex $P1406
    .lex "self", param_1378
    .lex "$/", param_1379
.annotate 'line', 553
    new $P1380, "Undef"
    .lex "$past", $P1380
.annotate 'line', 554
    new $P1381, "Undef"
    .lex "$sigil", $P1381
.annotate 'line', 555
    new $P1382, "Undef"
    .lex "$name", $P1382
.annotate 'line', 556
    new $P1383, "Undef"
    .lex "$BLOCK", $P1383
.annotate 'line', 553
    find_lex $P1384, "$/"
    unless_null $P1384, vivify_502
    $P1384 = root_new ['parrot';'Hash']
  vivify_502:
    set $P1385, $P1384["variable"]
    unless_null $P1385, vivify_503
    new $P1385, "Undef"
  vivify_503:
    $P1386 = $P1385."ast"()
    store_lex "$past", $P1386
.annotate 'line', 554
    find_lex $P1387, "$/"
    unless_null $P1387, vivify_504
    $P1387 = root_new ['parrot';'Hash']
  vivify_504:
    set $P1388, $P1387["variable"]
    unless_null $P1388, vivify_505
    $P1388 = root_new ['parrot';'Hash']
  vivify_505:
    set $P1389, $P1388["sigil"]
    unless_null $P1389, vivify_506
    new $P1389, "Undef"
  vivify_506:
    store_lex "$sigil", $P1389
.annotate 'line', 555
    find_lex $P1390, "$past"
    $P1391 = $P1390."name"()
    store_lex "$name", $P1391
.annotate 'line', 556
    get_global $P1392, "@BLOCK"
    unless_null $P1392, vivify_507
    $P1392 = root_new ['parrot';'ResizablePMCArray']
  vivify_507:
    set $P1393, $P1392[0]
    unless_null $P1393, vivify_508
    new $P1393, "Undef"
  vivify_508:
    store_lex "$BLOCK", $P1393
.annotate 'line', 557
    find_lex $P1395, "$BLOCK"
    find_lex $P1396, "$name"
    $P1397 = $P1395."symbol"($P1396)
    unless $P1397, if_1394_end
.annotate 'line', 558
    find_lex $P1398, "$/"
    $P1399 = $P1398."CURSOR"()
    find_lex $P1400, "$name"
    $P1399."panic"("Redeclaration of symbol ", $P1400)
  if_1394_end:
.annotate 'line', 560
    find_dynamic_lex $P1402, "$*SCOPE"
    unless_null $P1402, vivify_509
    get_hll_global $P1402, "$SCOPE"
    unless_null $P1402, vivify_510
    die "Contextual $*SCOPE not found"
  vivify_510:
  vivify_509:
    set $S1403, $P1402
    iseq $I1404, $S1403, "has"
    if $I1404, if_1401
.annotate 'line', 585
    .const 'Sub' $P1451 = "89_1299591508.723" 
    capture_lex $P1451
    $P1451()
    goto if_1401_end
  if_1401:
.annotate 'line', 560
    .const 'Sub' $P1406 = "87_1299591508.723" 
    capture_lex $P1406
    $P1406()
  if_1401_end:
.annotate 'line', 593
    find_lex $P1475, "$/"
    find_lex $P1476, "$past"
    $P1477 = $P1475."!make"($P1476)
.annotate 'line', 552
    .return ($P1477)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1450"  :anon :subid("89_1299591508.723") :outer("86_1299591508.723")
.annotate 'line', 586
    new $P1452, "Undef"
    .lex "$scope", $P1452
.annotate 'line', 587
    new $P1453, "Undef"
    .lex "$decl", $P1453
.annotate 'line', 586
    find_dynamic_lex $P1456, "$*SCOPE"
    unless_null $P1456, vivify_511
    get_hll_global $P1456, "$SCOPE"
    unless_null $P1456, vivify_512
    die "Contextual $*SCOPE not found"
  vivify_512:
  vivify_511:
    set $S1457, $P1456
    iseq $I1458, $S1457, "our"
    if $I1458, if_1455
    new $P1460, "String"
    assign $P1460, "lexical"
    set $P1454, $P1460
    goto if_1455_end
  if_1455:
    new $P1459, "String"
    assign $P1459, "package"
    set $P1454, $P1459
  if_1455_end:
    store_lex "$scope", $P1454
.annotate 'line', 587
    get_hll_global $P1461, ["PAST"], "Var"
    find_lex $P1462, "$name"
    find_lex $P1463, "$scope"
.annotate 'line', 588
    find_lex $P1464, "$sigil"
    $P1465 = "vivitype"($P1464)
    find_lex $P1466, "$/"
    $P1467 = $P1461."new"($P1462 :named("name"), $P1463 :named("scope"), 1 :named("isdecl"), 1 :named("lvalue"), $P1465 :named("viviself"), $P1466 :named("node"))
.annotate 'line', 587
    store_lex "$decl", $P1467
.annotate 'line', 590
    find_lex $P1468, "$BLOCK"
    find_lex $P1469, "$name"
    find_lex $P1470, "$scope"
    $P1468."symbol"($P1469, $P1470 :named("scope"))
.annotate 'line', 591
    find_lex $P1471, "$BLOCK"
    unless_null $P1471, vivify_513
    $P1471 = root_new ['parrot';'ResizablePMCArray']
  vivify_513:
    set $P1472, $P1471[0]
    unless_null $P1472, vivify_514
    new $P1472, "Undef"
  vivify_514:
    find_lex $P1473, "$decl"
    $P1474 = $P1472."push"($P1473)
.annotate 'line', 585
    .return ($P1474)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1405"  :anon :subid("87_1299591508.723") :outer("86_1299591508.723")
.annotate 'line', 560
    .const 'Sub' $P1436 = "88_1299591508.723" 
    capture_lex $P1436
.annotate 'line', 562
    new $P1407, "Undef"
    .lex "$meta-attr-type", $P1407
.annotate 'line', 570
    new $P1408, "Undef"
    .lex "$meta_args", $P1408
.annotate 'line', 562
    find_dynamic_lex $P1411, "$*PKGDECL"
    unless_null $P1411, vivify_515
    get_hll_global $P1411, "$PKGDECL"
    unless_null $P1411, vivify_516
    die "Contextual $*PKGDECL not found"
  vivify_516:
  vivify_515:
    find_dynamic_lex $P1412, "%*HOW-METAATTR"
    unless_null $P1412, vivify_517
    get_hll_global $P1412, "%HOW-METAATTR"
    unless_null $P1412, vivify_518
    die "Contextual %*HOW-METAATTR not found"
  vivify_518:
  vivify_517:
    set $P1413, $P1412[$P1411]
    unless_null $P1413, vivify_519
    new $P1413, "Undef"
  vivify_519:
    unless $P1413, unless_1410
    set $P1409, $P1413
    goto unless_1410_end
  unless_1410:
    find_dynamic_lex $P1414, "$*DEFAULT-METAATTR"
    unless_null $P1414, vivify_520
    get_hll_global $P1414, "$DEFAULT-METAATTR"
    unless_null $P1414, vivify_521
    die "Contextual $*DEFAULT-METAATTR not found"
  vivify_521:
  vivify_520:
    set $P1409, $P1414
  unless_1410_end:
    store_lex "$meta-attr-type", $P1409
.annotate 'line', 563
    find_dynamic_lex $P1415, "$*PACKAGE-SETUP"
    unless_null $P1415, vivify_522
    get_hll_global $P1415, "$PACKAGE-SETUP"
    unless_null $P1415, vivify_523
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_523:
  vivify_522:
    get_hll_global $P1416, ["PAST"], "Op"
.annotate 'line', 565
    get_hll_global $P1417, ["PAST"], "Op"
.annotate 'line', 567
    get_hll_global $P1418, ["PAST"], "Var"
    $P1419 = $P1418."new"("type_obj" :named("name"), "register" :named("scope"))
    $P1420 = $P1417."new"($P1419, "get_how PP" :named("pirop"))
.annotate 'line', 569
    get_hll_global $P1421, ["PAST"], "Var"
    $P1422 = $P1421."new"("type_obj" :named("name"), "register" :named("scope"))
.annotate 'line', 570
    get_hll_global $P1423, ["PAST"], "Op"
.annotate 'line', 572
    get_hll_global $P1424, ["PAST"], "Var"
    find_lex $P1425, "$meta-attr-type"
    $P1426 = $P1424."new"($P1425 :named("name"), "" :named("namespace"), "package" :named("scope"))
.annotate 'line', 573
    get_hll_global $P1427, ["PAST"], "Val"
    find_lex $P1428, "$name"
    $P1429 = $P1427."new"($P1428 :named("value"), "name" :named("named"))
    $P1430 = $P1423."new"($P1426, $P1429, "callmethod" :named("pasttype"), "new" :named("name"))
.annotate 'line', 570
    store_lex "$meta_args", $P1430
    $P1431 = $P1416."new"($P1420, $P1422, $P1430, "callmethod" :named("pasttype"), "add_attribute" :named("name"))
.annotate 'line', 563
    $P1415."push"($P1431)
.annotate 'line', 576
    find_lex $P1433, "$/"
    unless_null $P1433, vivify_524
    $P1433 = root_new ['parrot';'Hash']
  vivify_524:
    set $P1434, $P1433["typename"]
    unless_null $P1434, vivify_525
    new $P1434, "Undef"
  vivify_525:
    unless $P1434, if_1432_end
    .const 'Sub' $P1436 = "88_1299591508.723" 
    capture_lex $P1436
    $P1436()
  if_1432_end:
.annotate 'line', 582
    find_lex $P1446, "$BLOCK"
    find_lex $P1447, "$name"
    $P1446."symbol"($P1447, "attribute" :named("scope"))
.annotate 'line', 583
    get_hll_global $P1448, ["PAST"], "Stmts"
    $P1449 = $P1448."new"()
    store_lex "$past", $P1449
.annotate 'line', 560
    .return ($P1449)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1435"  :anon :subid("88_1299591508.723") :outer("87_1299591508.723")
.annotate 'line', 577
    new $P1437, "Undef"
    .lex "$type", $P1437
    find_lex $P1438, "$/"
    unless_null $P1438, vivify_526
    $P1438 = root_new ['parrot';'Hash']
  vivify_526:
    set $P1439, $P1438["typename"]
    unless_null $P1439, vivify_527
    $P1439 = root_new ['parrot';'ResizablePMCArray']
  vivify_527:
    set $P1440, $P1439[0]
    unless_null $P1440, vivify_528
    new $P1440, "Undef"
  vivify_528:
    $P1441 = $P1440."ast"()
    store_lex "$type", $P1441
.annotate 'line', 578
    find_lex $P1442, "$type"
    $P1442."named"("type")
.annotate 'line', 579
    find_lex $P1443, "$meta_args"
    find_lex $P1444, "$type"
    $P1445 = $P1443."push"($P1444)
.annotate 'line', 576
    .return ($P1445)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "routine_declarator:sym<sub>"  :subid("90_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_1479
    .param pmc param_1480
.annotate 'line', 596
    .lex "self", param_1479
    .lex "$/", param_1480
    find_lex $P1481, "$/"
    find_lex $P1482, "$/"
    unless_null $P1482, vivify_529
    $P1482 = root_new ['parrot';'Hash']
  vivify_529:
    set $P1483, $P1482["routine_def"]
    unless_null $P1483, vivify_530
    new $P1483, "Undef"
  vivify_530:
    $P1484 = $P1483."ast"()
    $P1485 = $P1481."!make"($P1484)
    .return ($P1485)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "routine_declarator:sym<method>"  :subid("91_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_1487
    .param pmc param_1488
.annotate 'line', 597
    .lex "self", param_1487
    .lex "$/", param_1488
    find_lex $P1489, "$/"
    find_lex $P1490, "$/"
    unless_null $P1490, vivify_531
    $P1490 = root_new ['parrot';'Hash']
  vivify_531:
    set $P1491, $P1490["method_def"]
    unless_null $P1491, vivify_532
    new $P1491, "Undef"
  vivify_532:
    $P1492 = $P1491."ast"()
    $P1493 = $P1489."!make"($P1492)
    .return ($P1493)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "routine_def"  :subid("92_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_1495
    .param pmc param_1496
.annotate 'line', 599
    .const 'Sub' $P1724 = "98_1299591508.723" 
    capture_lex $P1724
    .const 'Sub' $P1516 = "93_1299591508.723" 
    capture_lex $P1516
    .lex "self", param_1495
    .lex "$/", param_1496
.annotate 'line', 602
    new $P1497, "Undef"
    .lex "$past", $P1497
.annotate 'line', 613
    new $P1498, "Undef"
    .lex "$block", $P1498
.annotate 'line', 599
    find_lex $P1499, "$past"
.annotate 'line', 603
    find_lex $P1501, "$/"
    unless_null $P1501, vivify_533
    $P1501 = root_new ['parrot';'Hash']
  vivify_533:
    set $P1502, $P1501["onlystar"]
    unless_null $P1502, vivify_534
    new $P1502, "Undef"
  vivify_534:
    if $P1502, if_1500
.annotate 'line', 607
    find_lex $P1504, "$/"
    unless_null $P1504, vivify_535
    $P1504 = root_new ['parrot';'Hash']
  vivify_535:
    set $P1505, $P1504["blockoid"]
    unless_null $P1505, vivify_536
    new $P1505, "Undef"
  vivify_536:
    $P1506 = $P1505."ast"()
    store_lex "$past", $P1506
.annotate 'line', 608
    find_lex $P1507, "$past"
    $P1507."blocktype"("declaration")
.annotate 'line', 609
    find_dynamic_lex $P1509, "$*RETURN_USED"
    unless_null $P1509, vivify_537
    get_hll_global $P1509, "$RETURN_USED"
    unless_null $P1509, vivify_538
    die "Contextual $*RETURN_USED not found"
  vivify_538:
  vivify_537:
    unless $P1509, if_1508_end
.annotate 'line', 610
    find_lex $P1510, "$past"
    $P1510."control"("return_pir")
  if_1508_end:
.annotate 'line', 606
    goto if_1500_end
  if_1500:
.annotate 'line', 604
    $P1503 = "only_star_block"()
    store_lex "$past", $P1503
  if_1500_end:
.annotate 'line', 613
    find_lex $P1511, "$past"
    store_lex "$block", $P1511
.annotate 'line', 615
    find_lex $P1513, "$/"
    unless_null $P1513, vivify_539
    $P1513 = root_new ['parrot';'Hash']
  vivify_539:
    set $P1514, $P1513["deflongname"]
    unless_null $P1514, vivify_540
    new $P1514, "Undef"
  vivify_540:
    unless $P1514, if_1512_end
    .const 'Sub' $P1516 = "93_1299591508.723" 
    capture_lex $P1516
    $P1516()
  if_1512_end:
.annotate 'line', 715
    find_lex $P1713, "$block"
    find_lex $P1714, "$past"
    unless_null $P1714, vivify_601
    $P1714 = root_new ['parrot';'Hash']
    store_lex "$past", $P1714
  vivify_601:
    set $P1714["block_past"], $P1713
.annotate 'line', 716
    find_lex $P1716, "$/"
    unless_null $P1716, vivify_602
    $P1716 = root_new ['parrot';'Hash']
  vivify_602:
    set $P1717, $P1716["trait"]
    unless_null $P1717, vivify_603
    new $P1717, "Undef"
  vivify_603:
    unless $P1717, if_1715_end
.annotate 'line', 717
    find_lex $P1719, "$/"
    unless_null $P1719, vivify_604
    $P1719 = root_new ['parrot';'Hash']
  vivify_604:
    set $P1720, $P1719["trait"]
    unless_null $P1720, vivify_605
    new $P1720, "Undef"
  vivify_605:
    defined $I1721, $P1720
    unless $I1721, for_undef_606
    iter $P1718, $P1720
    new $P1731, 'ExceptionHandler'
    set_label $P1731, loop1730_handler
    $P1731."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P1731
  loop1730_test:
    unless $P1718, loop1730_done
    shift $P1722, $P1718
  loop1730_redo:
    .const 'Sub' $P1724 = "98_1299591508.723" 
    capture_lex $P1724
    $P1724($P1722)
  loop1730_next:
    goto loop1730_test
  loop1730_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P1732, exception, 'type'
    eq $P1732, .CONTROL_LOOP_NEXT, loop1730_next
    eq $P1732, .CONTROL_LOOP_REDO, loop1730_redo
  loop1730_done:
    pop_eh 
  for_undef_606:
  if_1715_end:
.annotate 'line', 720
    find_lex $P1733, "$/"
    find_lex $P1734, "$past"
    $P1735 = $P1733."!make"($P1734)
.annotate 'line', 599
    .return ($P1735)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1515"  :anon :subid("93_1299591508.723") :outer("92_1299591508.723")
.annotate 'line', 615
    .const 'Sub' $P1639 = "97_1299591508.723" 
    capture_lex $P1639
    .const 'Sub' $P1550 = "94_1299591508.723" 
    capture_lex $P1550
.annotate 'line', 616
    new $P1517, "Undef"
    .lex "$name", $P1517
    find_lex $P1518, "$/"
    unless_null $P1518, vivify_541
    $P1518 = root_new ['parrot';'Hash']
  vivify_541:
    set $P1519, $P1518["sigil"]
    unless_null $P1519, vivify_542
    $P1519 = root_new ['parrot';'ResizablePMCArray']
  vivify_542:
    set $P1520, $P1519[0]
    unless_null $P1520, vivify_543
    new $P1520, "Undef"
  vivify_543:
    set $S1521, $P1520
    new $P1522, 'String'
    set $P1522, $S1521
    find_lex $P1523, "$/"
    unless_null $P1523, vivify_544
    $P1523 = root_new ['parrot';'Hash']
  vivify_544:
    set $P1524, $P1523["deflongname"]
    unless_null $P1524, vivify_545
    $P1524 = root_new ['parrot';'ResizablePMCArray']
  vivify_545:
    set $P1525, $P1524[0]
    unless_null $P1525, vivify_546
    new $P1525, "Undef"
  vivify_546:
    $S1526 = $P1525."ast"()
    concat $P1527, $P1522, $S1526
    store_lex "$name", $P1527
.annotate 'line', 617
    find_lex $P1528, "$past"
    find_lex $P1529, "$name"
    $P1528."name"($P1529)
.annotate 'line', 618
    find_dynamic_lex $P1536, "$*SCOPE"
    unless_null $P1536, vivify_547
    get_hll_global $P1536, "$SCOPE"
    unless_null $P1536, vivify_548
    die "Contextual $*SCOPE not found"
  vivify_548:
  vivify_547:
    set $S1537, $P1536
    iseq $I1538, $S1537, ""
    unless $I1538, unless_1535
    new $P1534, 'Integer'
    set $P1534, $I1538
    goto unless_1535_end
  unless_1535:
    find_dynamic_lex $P1539, "$*SCOPE"
    unless_null $P1539, vivify_549
    get_hll_global $P1539, "$SCOPE"
    unless_null $P1539, vivify_550
    die "Contextual $*SCOPE not found"
  vivify_550:
  vivify_549:
    set $S1540, $P1539
    iseq $I1541, $S1540, "my"
    new $P1534, 'Integer'
    set $P1534, $I1541
  unless_1535_end:
    unless $P1534, unless_1533
    set $P1532, $P1534
    goto unless_1533_end
  unless_1533:
    find_dynamic_lex $P1542, "$*SCOPE"
    unless_null $P1542, vivify_551
    get_hll_global $P1542, "$SCOPE"
    unless_null $P1542, vivify_552
    die "Contextual $*SCOPE not found"
  vivify_552:
  vivify_551:
    set $S1543, $P1542
    iseq $I1544, $S1543, "our"
    new $P1532, 'Integer'
    set $P1532, $I1544
  unless_1533_end:
    if $P1532, if_1531
.annotate 'line', 710
    find_lex $P1708, "$/"
    $P1709 = $P1708."CURSOR"()
    find_dynamic_lex $P1710, "$*SCOPE"
    unless_null $P1710, vivify_553
    get_hll_global $P1710, "$SCOPE"
    unless_null $P1710, vivify_554
    die "Contextual $*SCOPE not found"
  vivify_554:
  vivify_553:
    concat $P1711, $P1710, " scoped routines are not supported yet"
    $P1712 = $P1709."panic"($P1711)
.annotate 'line', 709
    set $P1530, $P1712
.annotate 'line', 618
    goto if_1531_end
  if_1531:
.annotate 'line', 619
    find_dynamic_lex $P1546, "$*MULTINESS"
    unless_null $P1546, vivify_555
    get_hll_global $P1546, "$MULTINESS"
    unless_null $P1546, vivify_556
    die "Contextual $*MULTINESS not found"
  vivify_556:
  vivify_555:
    set $S1547, $P1546
    iseq $I1548, $S1547, "multi"
    if $I1548, if_1545
.annotate 'line', 670
    find_dynamic_lex $P1635, "$*MULTINESS"
    unless_null $P1635, vivify_557
    get_hll_global $P1635, "$MULTINESS"
    unless_null $P1635, vivify_558
    die "Contextual $*MULTINESS not found"
  vivify_558:
  vivify_557:
    set $S1636, $P1635
    iseq $I1637, $S1636, "proto"
    if $I1637, if_1634
.annotate 'line', 689
    get_global $P1669, "@BLOCK"
    unless_null $P1669, vivify_559
    $P1669 = root_new ['parrot';'ResizablePMCArray']
  vivify_559:
    set $P1670, $P1669[0]
    unless_null $P1670, vivify_560
    $P1670 = root_new ['parrot';'ResizablePMCArray']
  vivify_560:
    set $P1671, $P1670[0]
    unless_null $P1671, vivify_561
    new $P1671, "Undef"
  vivify_561:
    get_hll_global $P1672, ["PAST"], "Var"
    find_lex $P1673, "$name"
    find_lex $P1674, "$past"
    $P1675 = $P1672."new"($P1673 :named("name"), 1 :named("isdecl"), $P1674 :named("viviself"), "lexical" :named("scope"))
    $P1671."push"($P1675)
.annotate 'line', 691
    get_global $P1676, "@BLOCK"
    unless_null $P1676, vivify_562
    $P1676 = root_new ['parrot';'ResizablePMCArray']
  vivify_562:
    set $P1677, $P1676[0]
    unless_null $P1677, vivify_563
    new $P1677, "Undef"
  vivify_563:
    find_lex $P1678, "$name"
    $P1677."symbol"($P1678, "lexical" :named("scope"))
.annotate 'line', 692
    find_dynamic_lex $P1680, "$*SCOPE"
    unless_null $P1680, vivify_564
    get_hll_global $P1680, "$SCOPE"
    unless_null $P1680, vivify_565
    die "Contextual $*SCOPE not found"
  vivify_565:
  vivify_564:
    set $S1681, $P1680
    iseq $I1682, $S1681, "our"
    unless $I1682, if_1679_end
.annotate 'line', 695
    get_global $P1683, "@BLOCK"
    unless_null $P1683, vivify_566
    $P1683 = root_new ['parrot';'ResizablePMCArray']
  vivify_566:
    set $P1684, $P1683[0]
    unless_null $P1684, vivify_567
    $P1684 = root_new ['parrot';'ResizablePMCArray']
  vivify_567:
    set $P1685, $P1684[0]
    unless_null $P1685, vivify_568
    new $P1685, "Undef"
  vivify_568:
    get_hll_global $P1686, ["PAST"], "Op"
.annotate 'line', 697
    get_hll_global $P1687, ["PAST"], "Var"
    find_lex $P1688, "$name"
    $P1689 = $P1687."new"($P1688 :named("name"), "package" :named("scope"))
.annotate 'line', 698
    get_hll_global $P1690, ["PAST"], "Var"
    find_lex $P1691, "$name"
    $P1692 = $P1690."new"($P1691 :named("name"), "lexical" :named("scope"))
    $P1693 = $P1686."new"($P1689, $P1692, "bind" :named("pasttype"))
.annotate 'line', 695
    $P1685."push"($P1693)
.annotate 'line', 700
    get_global $P1694, "@BLOCK"
    unless_null $P1694, vivify_569
    $P1694 = root_new ['parrot';'ResizablePMCArray']
  vivify_569:
    set $P1695, $P1694[0]
    unless_null $P1695, vivify_570
    new $P1695, "Undef"
  vivify_570:
    $P1696 = $P1695."loadinit"()
    get_hll_global $P1697, ["PAST"], "Op"
.annotate 'line', 702
    get_hll_global $P1698, ["PAST"], "Var"
    find_lex $P1699, "$name"
    $P1700 = $P1698."new"($P1699 :named("name"), "package" :named("scope"))
.annotate 'line', 703
    get_hll_global $P1701, ["PAST"], "Val"
    find_lex $P1702, "$past"
    $P1703 = $P1701."new"($P1702 :named("value"))
    $P1704 = $P1697."new"($P1700, $P1703, "bind" :named("pasttype"))
.annotate 'line', 700
    $P1696."push"($P1704)
  if_1679_end:
.annotate 'line', 688
    goto if_1634_end
  if_1634:
.annotate 'line', 670
    .const 'Sub' $P1639 = "97_1299591508.723" 
    capture_lex $P1639
    $P1639()
  if_1634_end:
    goto if_1545_end
  if_1545:
.annotate 'line', 619
    .const 'Sub' $P1550 = "94_1299591508.723" 
    capture_lex $P1550
    $P1550()
  if_1545_end:
.annotate 'line', 707
    get_hll_global $P1705, ["PAST"], "Var"
    find_lex $P1706, "$name"
    $P1707 = $P1705."new"($P1706 :named("name"))
    store_lex "$past", $P1707
.annotate 'line', 618
    set $P1530, $P1707
  if_1531_end:
.annotate 'line', 615
    .return ($P1530)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1638"  :anon :subid("97_1299591508.723") :outer("93_1299591508.723")
.annotate 'line', 675
    new $P1640, "Undef"
    .lex "$cholder", $P1640
.annotate 'line', 674
    find_dynamic_lex $P1642, "$*SCOPE"
    unless_null $P1642, vivify_571
    get_hll_global $P1642, "$SCOPE"
    unless_null $P1642, vivify_572
    die "Contextual $*SCOPE not found"
  vivify_572:
  vivify_571:
    set $S1643, $P1642
    iseq $I1644, $S1643, "our"
    unless $I1644, if_1641_end
    die "our-scoped protos not yet implemented"
  if_1641_end:
.annotate 'line', 675
    get_hll_global $P1645, ["PAST"], "Op"
    $P1646 = $P1645."new"("list" :named("pasttype"))
    store_lex "$cholder", $P1646
.annotate 'line', 676
    get_global $P1647, "@BLOCK"
    unless_null $P1647, vivify_573
    $P1647 = root_new ['parrot';'ResizablePMCArray']
  vivify_573:
    set $P1648, $P1647[0]
    unless_null $P1648, vivify_574
    $P1648 = root_new ['parrot';'ResizablePMCArray']
  vivify_574:
    set $P1649, $P1648[0]
    unless_null $P1649, vivify_575
    new $P1649, "Undef"
  vivify_575:
    get_hll_global $P1650, ["PAST"], "Var"
    find_lex $P1651, "$name"
    find_lex $P1652, "$past"
    $P1653 = $P1650."new"($P1651 :named("name"), 1 :named("isdecl"), $P1652 :named("viviself"), "lexical" :named("scope"))
    $P1649."push"($P1653)
.annotate 'line', 678
    get_global $P1654, "@BLOCK"
    unless_null $P1654, vivify_576
    $P1654 = root_new ['parrot';'ResizablePMCArray']
  vivify_576:
    set $P1655, $P1654[0]
    unless_null $P1655, vivify_577
    $P1655 = root_new ['parrot';'ResizablePMCArray']
  vivify_577:
    set $P1656, $P1655[0]
    unless_null $P1656, vivify_578
    new $P1656, "Undef"
  vivify_578:
    get_hll_global $P1657, ["PAST"], "Op"
.annotate 'line', 680
    get_hll_global $P1658, ["PAST"], "Var"
    find_lex $P1659, "$name"
    $P1660 = $P1658."new"($P1659 :named("name"))
    find_lex $P1661, "$cholder"
    $P1662 = $P1657."new"($P1660, $P1661, "set_dispatchees 0PP" :named("pirop"))
.annotate 'line', 678
    $P1656."push"($P1662)
.annotate 'line', 683
    get_global $P1663, "@BLOCK"
    unless_null $P1663, vivify_579
    $P1663 = root_new ['parrot';'ResizablePMCArray']
  vivify_579:
    set $P1664, $P1663[0]
    unless_null $P1664, vivify_580
    new $P1664, "Undef"
  vivify_580:
    find_lex $P1665, "$name"
    find_lex $P1666, "$cholder"
    $P1664."symbol"($P1665, "lexical" :named("scope"), 1 :named("proto"), $P1666 :named("cholder"))
.annotate 'line', 686
    find_lex $P1667, "$past"
    $P1668 = $P1667."pirflags"(":instanceof(\"DispatcherSub\")")
.annotate 'line', 670
    .return ($P1668)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1549"  :anon :subid("94_1299591508.723") :outer("93_1299591508.723")
.annotate 'line', 619
    .const 'Sub' $P1568 = "95_1299591508.723" 
    capture_lex $P1568
.annotate 'line', 622
    new $P1551, "Undef"
    .lex "$cholder", $P1551
.annotate 'line', 623
    $P1552 = root_new ['parrot';'Hash']
    .lex "%sym", $P1552
.annotate 'line', 621
    find_dynamic_lex $P1554, "$*SCOPE"
    unless_null $P1554, vivify_581
    get_hll_global $P1554, "$SCOPE"
    unless_null $P1554, vivify_582
    die "Contextual $*SCOPE not found"
  vivify_582:
  vivify_581:
    set $S1555, $P1554
    iseq $I1556, $S1555, "our"
    unless $I1556, if_1553_end
    die "our-scoped multis not yet implemented"
  if_1553_end:
    find_lex $P1557, "$cholder"
.annotate 'line', 623
    get_global $P1558, "@BLOCK"
    unless_null $P1558, vivify_583
    $P1558 = root_new ['parrot';'ResizablePMCArray']
  vivify_583:
    set $P1559, $P1558[0]
    unless_null $P1559, vivify_584
    new $P1559, "Undef"
  vivify_584:
    find_lex $P1560, "$name"
    $P1561 = $P1559."symbol"($P1560)
    store_lex "%sym", $P1561
.annotate 'line', 624
    find_lex $P1563, "%sym"
    unless_null $P1563, vivify_585
    $P1563 = root_new ['parrot';'Hash']
  vivify_585:
    set $P1564, $P1563["cholder"]
    unless_null $P1564, vivify_586
    new $P1564, "Undef"
  vivify_586:
    if $P1564, if_1562
.annotate 'line', 629
    .const 'Sub' $P1568 = "95_1299591508.723" 
    capture_lex $P1568
    $P1568()
    goto if_1562_end
  if_1562:
.annotate 'line', 625
    find_lex $P1565, "%sym"
    unless_null $P1565, vivify_599
    $P1565 = root_new ['parrot';'Hash']
  vivify_599:
    set $P1566, $P1565["cholder"]
    unless_null $P1566, vivify_600
    new $P1566, "Undef"
  vivify_600:
    store_lex "$cholder", $P1566
  if_1562_end:
.annotate 'line', 665
    find_lex $P1630, "$cholder"
    find_lex $P1631, "$past"
    $P1630."push"($P1631)
.annotate 'line', 668
    find_lex $P1632, "$past"
    $P1633 = "attach_multi_signature"($P1632)
.annotate 'line', 619
    .return ($P1633)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block1567"  :anon :subid("95_1299591508.723") :outer("94_1299591508.723")
.annotate 'line', 629
    .const 'Sub' $P1582 = "96_1299591508.723" 
    capture_lex $P1582
.annotate 'line', 636
    new $P1569, "Undef"
    .lex "$found_proto", $P1569
.annotate 'line', 654
    new $P1570, "Undef"
    .lex "$dispatch_setup", $P1570
.annotate 'line', 631
    find_lex $P1572, "%sym"
    unless_null $P1572, vivify_587
    $P1572 = root_new ['parrot';'Hash']
  vivify_587:
    set $P1573, $P1572["proto"]
    unless_null $P1573, vivify_588
    new $P1573, "Undef"
  vivify_588:
    unless $P1573, if_1571_end
.annotate 'line', 634
    find_lex $P1574, "$/"
    $P1575 = $P1574."CURSOR"()
    $P1575."panic"("Internal Error: Current scope has a proto, but no candidate list holder was set up. (This should never happen.)")
  if_1571_end:
.annotate 'line', 631
    find_lex $P1576, "$found_proto"
.annotate 'line', 637
    get_global $P1578, "@BLOCK"
    defined $I1579, $P1578
    unless $I1579, for_undef_589
    iter $P1577, $P1578
    new $P1604, 'ExceptionHandler'
    set_label $P1604, loop1603_handler
    $P1604."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P1604
  loop1603_test:
    unless $P1577, loop1603_done
    shift $P1580, $P1577
  loop1603_redo:
    .const 'Sub' $P1582 = "96_1299591508.723" 
    capture_lex $P1582
    $P1582($P1580)
  loop1603_next:
    goto loop1603_test
  loop1603_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P1605, exception, 'type'
    eq $P1605, .CONTROL_LOOP_NEXT, loop1603_next
    eq $P1605, .CONTROL_LOOP_REDO, loop1603_redo
  loop1603_done:
    pop_eh 
  for_undef_589:
.annotate 'line', 648
    find_lex $P1607, "$found_proto"
    if $P1607, unless_1606_end
.annotate 'line', 649
    find_lex $P1608, "$/"
    $P1609 = $P1608."CURSOR"()
    $P1609."panic"("Sorry, no proto sub in scope, and auto-generation of protos is not yet implemented.")
  unless_1606_end:
.annotate 'line', 653
    get_hll_global $P1610, ["PAST"], "Op"
    $P1611 = $P1610."new"("list" :named("pasttype"))
    store_lex "$cholder", $P1611
.annotate 'line', 654
    get_hll_global $P1612, ["PAST"], "Op"
.annotate 'line', 656
    get_hll_global $P1613, ["PAST"], "Var"
    find_lex $P1614, "$name"
    $P1615 = $P1613."new"($P1614 :named("name"), "outer" :named("scope"))
    find_lex $P1616, "$cholder"
    $P1617 = $P1612."new"($P1615, $P1616, "create_dispatch_and_add_candidates PPP" :named("pirop"))
.annotate 'line', 654
    store_lex "$dispatch_setup", $P1617
.annotate 'line', 659
    get_global $P1618, "@BLOCK"
    unless_null $P1618, vivify_594
    $P1618 = root_new ['parrot';'ResizablePMCArray']
  vivify_594:
    set $P1619, $P1618[0]
    unless_null $P1619, vivify_595
    $P1619 = root_new ['parrot';'ResizablePMCArray']
  vivify_595:
    set $P1620, $P1619[0]
    unless_null $P1620, vivify_596
    new $P1620, "Undef"
  vivify_596:
    get_hll_global $P1621, ["PAST"], "Var"
    find_lex $P1622, "$name"
    find_lex $P1623, "$dispatch_setup"
    $P1624 = $P1621."new"($P1622 :named("name"), 1 :named("isdecl"), $P1623 :named("viviself"), "lexical" :named("scope"))
    $P1620."push"($P1624)
.annotate 'line', 661
    get_global $P1625, "@BLOCK"
    unless_null $P1625, vivify_597
    $P1625 = root_new ['parrot';'ResizablePMCArray']
  vivify_597:
    set $P1626, $P1625[0]
    unless_null $P1626, vivify_598
    new $P1626, "Undef"
  vivify_598:
    find_lex $P1627, "$name"
    find_lex $P1628, "$cholder"
    $P1629 = $P1626."symbol"($P1627, "lexical" :named("scope"), $P1628 :named("cholder"))
.annotate 'line', 629
    .return ($P1629)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1581"  :anon :subid("96_1299591508.723") :outer("95_1299591508.723")
    .param pmc param_1584
.annotate 'line', 638
    $P1583 = root_new ['parrot';'Hash']
    .lex "%sym", $P1583
    .lex "$_", param_1584
    find_lex $P1585, "$_"
    find_lex $P1586, "$name"
    $P1587 = $P1585."symbol"($P1586)
    store_lex "%sym", $P1587
.annotate 'line', 639
    find_lex $P1592, "%sym"
    unless_null $P1592, vivify_590
    $P1592 = root_new ['parrot';'Hash']
  vivify_590:
    set $P1593, $P1592["proto"]
    unless_null $P1593, vivify_591
    new $P1593, "Undef"
  vivify_591:
    unless $P1593, unless_1591
    set $P1590, $P1593
    goto unless_1591_end
  unless_1591:
    find_lex $P1594, "%sym"
    unless_null $P1594, vivify_592
    $P1594 = root_new ['parrot';'Hash']
  vivify_592:
    set $P1595, $P1594["cholder"]
    unless_null $P1595, vivify_593
    new $P1595, "Undef"
  vivify_593:
    set $P1590, $P1595
  unless_1591_end:
    if $P1590, if_1589
.annotate 'line', 642
    find_lex $P1599, "%sym"
    if $P1599, if_1598
    set $P1597, $P1599
    goto if_1598_end
  if_1598:
.annotate 'line', 643
    find_lex $P1600, "$/"
    $P1601 = $P1600."CURSOR"()
    $P1602 = $P1601."panic"("Cannot declare a multi when an only is already in scope.")
.annotate 'line', 642
    set $P1597, $P1602
  if_1598_end:
    set $P1588, $P1597
.annotate 'line', 639
    goto if_1589_end
  if_1589:
.annotate 'line', 640
    new $P1596, "Integer"
    assign $P1596, 1
    store_lex "$found_proto", $P1596
.annotate 'line', 639
    set $P1588, $P1596
  if_1589_end:
.annotate 'line', 637
    .return ($P1588)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1723"  :anon :subid("98_1299591508.723") :outer("92_1299591508.723")
    .param pmc param_1725
.annotate 'line', 717
    .lex "$_", param_1725
    find_lex $P1726, "$_"
    $P1727 = $P1726."ast"()
    find_lex $P1728, "$/"
    $P1729 = $P1727($P1728)
    .return ($P1729)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "method_def"  :subid("99_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_1737
    .param pmc param_1738
.annotate 'line', 724
    .const 'Sub' $P1850 = "101_1299591508.723" 
    capture_lex $P1850
    .const 'Sub' $P1766 = "100_1299591508.723" 
    capture_lex $P1766
    .lex "self", param_1737
    .lex "$/", param_1738
.annotate 'line', 727
    new $P1739, "Undef"
    .lex "$past", $P1739
.annotate 'line', 724
    find_lex $P1740, "$past"
.annotate 'line', 728
    find_lex $P1742, "$/"
    unless_null $P1742, vivify_607
    $P1742 = root_new ['parrot';'Hash']
  vivify_607:
    set $P1743, $P1742["onlystar"]
    unless_null $P1743, vivify_608
    new $P1743, "Undef"
  vivify_608:
    if $P1743, if_1741
.annotate 'line', 732
    find_lex $P1745, "$/"
    unless_null $P1745, vivify_609
    $P1745 = root_new ['parrot';'Hash']
  vivify_609:
    set $P1746, $P1745["blockoid"]
    unless_null $P1746, vivify_610
    new $P1746, "Undef"
  vivify_610:
    $P1747 = $P1746."ast"()
    store_lex "$past", $P1747
.annotate 'line', 733
    find_lex $P1748, "$past"
    $P1748."blocktype"("declaration")
.annotate 'line', 734
    find_dynamic_lex $P1750, "$*RETURN_USED"
    unless_null $P1750, vivify_611
    get_hll_global $P1750, "$RETURN_USED"
    unless_null $P1750, vivify_612
    die "Contextual $*RETURN_USED not found"
  vivify_612:
  vivify_611:
    unless $P1750, if_1749_end
.annotate 'line', 735
    find_lex $P1751, "$past"
    $P1751."control"("return_pir")
  if_1749_end:
.annotate 'line', 731
    goto if_1741_end
  if_1741:
.annotate 'line', 729
    $P1744 = "only_star_block"()
    store_lex "$past", $P1744
  if_1741_end:
.annotate 'line', 740
    find_lex $P1753, "$past"
    unless_null $P1753, vivify_613
    $P1753 = root_new ['parrot';'Hash']
  vivify_613:
    set $P1754, $P1753["signature_has_invocant"]
    unless_null $P1754, vivify_614
    new $P1754, "Undef"
  vivify_614:
    if $P1754, unless_1752_end
.annotate 'line', 741
    find_lex $P1755, "$past"
    unless_null $P1755, vivify_615
    $P1755 = root_new ['parrot';'ResizablePMCArray']
  vivify_615:
    set $P1756, $P1755[0]
    unless_null $P1756, vivify_616
    new $P1756, "Undef"
  vivify_616:
    get_hll_global $P1757, ["PAST"], "Var"
.annotate 'line', 743
    get_hll_global $P1758, ["PAST"], "Var"
    $P1759 = $P1758."new"("$?CLASS" :named("name"))
    $P1760 = $P1757."new"("self" :named("name"), "parameter" :named("scope"), $P1759 :named("multitype"))
.annotate 'line', 741
    $P1756."unshift"($P1760)
  unless_1752_end:
.annotate 'line', 746
    find_lex $P1761, "$past"
    $P1761."symbol"("self", "lexical" :named("scope"))
.annotate 'line', 749
    find_lex $P1763, "$/"
    unless_null $P1763, vivify_617
    $P1763 = root_new ['parrot';'Hash']
  vivify_617:
    set $P1764, $P1763["deflongname"]
    unless_null $P1764, vivify_618
    new $P1764, "Undef"
  vivify_618:
    unless $P1764, if_1762_end
    .const 'Sub' $P1766 = "100_1299591508.723" 
    capture_lex $P1766
    $P1766()
  if_1762_end:
.annotate 'line', 784
    find_dynamic_lex $P1832, "$*SCOPE"
    unless_null $P1832, vivify_636
    get_hll_global $P1832, "$SCOPE"
    unless_null $P1832, vivify_637
    die "Contextual $*SCOPE not found"
  vivify_637:
  vivify_636:
    set $S1833, $P1832
    iseq $I1834, $S1833, "our"
    unless $I1834, if_1831_end
.annotate 'line', 785
    find_lex $P1835, "$past"
    $P1835."pirflags"(":nsentry")
  if_1831_end:
.annotate 'line', 789
    find_lex $P1836, "$/"
    find_lex $P1837, "$past"
    $P1836."!make"($P1837)
.annotate 'line', 790
    find_lex $P1838, "$past"
    find_lex $P1839, "$past"
    unless_null $P1839, vivify_638
    $P1839 = root_new ['parrot';'Hash']
    store_lex "$past", $P1839
  vivify_638:
    set $P1839["block_past"], $P1838
.annotate 'line', 791
    find_lex $P1842, "$/"
    unless_null $P1842, vivify_639
    $P1842 = root_new ['parrot';'Hash']
  vivify_639:
    set $P1843, $P1842["trait"]
    unless_null $P1843, vivify_640
    new $P1843, "Undef"
  vivify_640:
    if $P1843, if_1841
    set $P1840, $P1843
    goto if_1841_end
  if_1841:
.annotate 'line', 792
    find_lex $P1845, "$/"
    unless_null $P1845, vivify_641
    $P1845 = root_new ['parrot';'Hash']
  vivify_641:
    set $P1846, $P1845["trait"]
    unless_null $P1846, vivify_642
    new $P1846, "Undef"
  vivify_642:
    defined $I1847, $P1846
    unless $I1847, for_undef_643
    iter $P1844, $P1846
    new $P1857, 'ExceptionHandler'
    set_label $P1857, loop1856_handler
    $P1857."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P1857
  loop1856_test:
    unless $P1844, loop1856_done
    shift $P1848, $P1844
  loop1856_redo:
    .const 'Sub' $P1850 = "101_1299591508.723" 
    capture_lex $P1850
    $P1850($P1848)
  loop1856_next:
    goto loop1856_test
  loop1856_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P1858, exception, 'type'
    eq $P1858, .CONTROL_LOOP_NEXT, loop1856_next
    eq $P1858, .CONTROL_LOOP_REDO, loop1856_redo
  loop1856_done:
    pop_eh 
  for_undef_643:
.annotate 'line', 791
    set $P1840, $P1844
  if_1841_end:
.annotate 'line', 724
    .return ($P1840)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1765"  :anon :subid("100_1299591508.723") :outer("99_1299591508.723")
.annotate 'line', 751
    new $P1767, "Undef"
    .lex "$name", $P1767
.annotate 'line', 756
    new $P1768, "Undef"
    .lex "$to_add", $P1768
.annotate 'line', 751
    find_lex $P1769, "$/"
    unless_null $P1769, vivify_619
    $P1769 = root_new ['parrot';'Hash']
  vivify_619:
    set $P1770, $P1769["private"]
    unless_null $P1770, vivify_620
    new $P1770, "Undef"
  vivify_620:
    set $S1771, $P1770
    new $P1772, 'String'
    set $P1772, $S1771
    find_lex $P1773, "$/"
    unless_null $P1773, vivify_621
    $P1773 = root_new ['parrot';'Hash']
  vivify_621:
    set $P1774, $P1773["deflongname"]
    unless_null $P1774, vivify_622
    $P1774 = root_new ['parrot';'ResizablePMCArray']
  vivify_622:
    set $P1775, $P1774[0]
    unless_null $P1775, vivify_623
    new $P1775, "Undef"
  vivify_623:
    $P1776 = $P1775."ast"()
    set $S1777, $P1776
    concat $P1778, $P1772, $S1777
    store_lex "$name", $P1778
.annotate 'line', 752
    find_lex $P1779, "$past"
    find_lex $P1780, "$name"
    $P1779."name"($P1780)
.annotate 'line', 756
    find_dynamic_lex $P1783, "$*MULTINESS"
    unless_null $P1783, vivify_624
    get_hll_global $P1783, "$MULTINESS"
    unless_null $P1783, vivify_625
    die "Contextual $*MULTINESS not found"
  vivify_625:
  vivify_624:
    set $S1784, $P1783
    isne $I1785, $S1784, "proto"
    if $I1785, if_1782
.annotate 'line', 758
    get_hll_global $P1789, ["PAST"], "Op"
.annotate 'line', 760
    get_hll_global $P1790, ["PAST"], "Val"
    find_lex $P1791, "$past"
    $P1792 = $P1790."new"($P1791 :named("value"))
.annotate 'line', 761
    get_hll_global $P1793, ["PAST"], "Op"
    $P1794 = $P1793."new"("list" :named("pasttype"))
    $P1795 = $P1789."new"($P1792, $P1794, "set_dispatchees 0PP" :named("pirop"))
.annotate 'line', 758
    set $P1781, $P1795
.annotate 'line', 756
    goto if_1782_end
  if_1782:
.annotate 'line', 757
    get_hll_global $P1786, ["PAST"], "Val"
    find_lex $P1787, "$past"
    $P1788 = $P1786."new"($P1787 :named("value"))
    set $P1781, $P1788
  if_1782_end:
.annotate 'line', 756
    store_lex "$to_add", $P1781
.annotate 'line', 763
    find_dynamic_lex $P1797, "$*MULTINESS"
    unless_null $P1797, vivify_626
    get_hll_global $P1797, "$MULTINESS"
    unless_null $P1797, vivify_627
    die "Contextual $*MULTINESS not found"
  vivify_627:
  vivify_626:
    set $S1798, $P1797
    iseq $I1799, $S1798, "proto"
    unless $I1799, if_1796_end
    find_lex $P1800, "$past"
    $P1800."pirflags"(":instanceof(\"DispatcherSub\")")
  if_1796_end:
.annotate 'line', 767
    find_dynamic_lex $P1802, "$*MULTINESS"
    unless_null $P1802, vivify_628
    get_hll_global $P1802, "$MULTINESS"
    unless_null $P1802, vivify_629
    die "Contextual $*MULTINESS not found"
  vivify_629:
  vivify_628:
    set $S1803, $P1802
    iseq $I1804, $S1803, "multi"
    unless $I1804, if_1801_end
    find_lex $P1805, "$past"
    "attach_multi_signature"($P1805)
  if_1801_end:
.annotate 'line', 770
    find_dynamic_lex $P1808, "$*PACKAGE-SETUP"
    unless_null $P1808, vivify_630
    get_hll_global $P1808, "$PACKAGE-SETUP"
    unless_null $P1808, vivify_631
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_631:
  vivify_630:
    defined $I1809, $P1808
    if $I1809, if_1807
    new $P1806, 'Integer'
    set $P1806, $I1809
    goto if_1807_end
  if_1807:
.annotate 'line', 771
    find_dynamic_lex $P1810, "$*PACKAGE-SETUP"
    unless_null $P1810, vivify_632
    get_hll_global $P1810, "$PACKAGE-SETUP"
    unless_null $P1810, vivify_633
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_633:
  vivify_632:
    get_hll_global $P1811, ["PAST"], "Op"
.annotate 'line', 772
    find_dynamic_lex $P1814, "$*MULTINESS"
    unless_null $P1814, vivify_634
    get_hll_global $P1814, "$MULTINESS"
    unless_null $P1814, vivify_635
    die "Contextual $*MULTINESS not found"
  vivify_635:
  vivify_634:
    set $S1815, $P1814
    iseq $I1816, $S1815, "multi"
    if $I1816, if_1813
    new $P1818, "String"
    assign $P1818, "add_method"
    set $P1812, $P1818
    goto if_1813_end
  if_1813:
    new $P1817, "String"
    assign $P1817, "add_multi_method"
    set $P1812, $P1817
  if_1813_end:
.annotate 'line', 773
    get_hll_global $P1819, ["PAST"], "Op"
.annotate 'line', 776
    get_hll_global $P1820, ["PAST"], "Var"
    $P1821 = $P1820."new"("type_obj" :named("name"), "register" :named("scope"))
    $P1822 = $P1819."new"($P1821, "get_how PP" :named("pirop"))
.annotate 'line', 778
    get_hll_global $P1823, ["PAST"], "Var"
    $P1824 = $P1823."new"("type_obj" :named("name"), "register" :named("scope"))
.annotate 'line', 779
    get_hll_global $P1825, ["PAST"], "Val"
    find_lex $P1826, "$name"
    $P1827 = $P1825."new"($P1826 :named("value"))
    find_lex $P1828, "$to_add"
    $P1829 = $P1811."new"($P1822, $P1824, $P1827, $P1828, "callmethod" :named("pasttype"), $P1812 :named("name"))
.annotate 'line', 771
    $P1830 = $P1810."push"($P1829)
.annotate 'line', 770
    set $P1806, $P1830
  if_1807_end:
.annotate 'line', 749
    .return ($P1806)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1849"  :anon :subid("101_1299591508.723") :outer("99_1299591508.723")
    .param pmc param_1851
.annotate 'line', 792
    .lex "$_", param_1851
    find_lex $P1852, "$_"
    $P1853 = $P1852."ast"()
    find_lex $P1854, "$/"
    $P1855 = $P1853($P1854)
    .return ($P1855)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "signature"  :subid("102_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_1862
    .param pmc param_1863
.annotate 'line', 824
    .const 'Sub' $P1896 = "104_1299591508.723" 
    capture_lex $P1896
    .const 'Sub' $P1872 = "103_1299591508.723" 
    capture_lex $P1872
    .lex "self", param_1862
    .lex "$/", param_1863
.annotate 'line', 825
    new $P1864, "Undef"
    .lex "$BLOCKINIT", $P1864
    get_global $P1865, "@BLOCK"
    unless_null $P1865, vivify_644
    $P1865 = root_new ['parrot';'ResizablePMCArray']
  vivify_644:
    set $P1866, $P1865[0]
    unless_null $P1866, vivify_645
    $P1866 = root_new ['parrot';'ResizablePMCArray']
  vivify_645:
    set $P1867, $P1866[0]
    unless_null $P1867, vivify_646
    new $P1867, "Undef"
  vivify_646:
    store_lex "$BLOCKINIT", $P1867
.annotate 'line', 826
    find_lex $P1869, "$/"
    unless_null $P1869, vivify_647
    $P1869 = root_new ['parrot';'Hash']
  vivify_647:
    set $P1870, $P1869["invocant"]
    unless_null $P1870, vivify_648
    new $P1870, "Undef"
  vivify_648:
    unless $P1870, if_1868_end
    .const 'Sub' $P1872 = "103_1299591508.723" 
    capture_lex $P1872
    $P1872()
  if_1868_end:
.annotate 'line', 835
    find_lex $P1891, "$/"
    unless_null $P1891, vivify_654
    $P1891 = root_new ['parrot';'Hash']
  vivify_654:
    set $P1892, $P1891["parameter"]
    unless_null $P1892, vivify_655
    new $P1892, "Undef"
  vivify_655:
    defined $I1893, $P1892
    unless $I1893, for_undef_656
    iter $P1890, $P1892
    new $P1903, 'ExceptionHandler'
    set_label $P1903, loop1902_handler
    $P1903."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P1903
  loop1902_test:
    unless $P1890, loop1902_done
    shift $P1894, $P1890
  loop1902_redo:
    .const 'Sub' $P1896 = "104_1299591508.723" 
    capture_lex $P1896
    $P1896($P1894)
  loop1902_next:
    goto loop1902_test
  loop1902_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P1904, exception, 'type'
    eq $P1904, .CONTROL_LOOP_NEXT, loop1902_next
    eq $P1904, .CONTROL_LOOP_REDO, loop1902_redo
  loop1902_done:
    pop_eh 
  for_undef_656:
.annotate 'line', 824
    .return ($P1890)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1871"  :anon :subid("103_1299591508.723") :outer("102_1299591508.723")
.annotate 'line', 827
    new $P1873, "Undef"
    .lex "$inv", $P1873
    find_lex $P1874, "$/"
    unless_null $P1874, vivify_649
    $P1874 = root_new ['parrot';'Hash']
  vivify_649:
    set $P1875, $P1874["invocant"]
    unless_null $P1875, vivify_650
    $P1875 = root_new ['parrot';'ResizablePMCArray']
  vivify_650:
    set $P1876, $P1875[0]
    unless_null $P1876, vivify_651
    new $P1876, "Undef"
  vivify_651:
    $P1877 = $P1876."ast"()
    store_lex "$inv", $P1877
.annotate 'line', 828
    find_lex $P1878, "$BLOCKINIT"
    find_lex $P1879, "$inv"
    $P1878."push"($P1879)
.annotate 'line', 829
    find_lex $P1880, "$BLOCKINIT"
    get_hll_global $P1881, ["PAST"], "Var"
.annotate 'line', 831
    get_hll_global $P1882, ["PAST"], "Var"
    find_lex $P1883, "$inv"
    $P1884 = $P1883."name"()
    $P1885 = $P1882."new"("lexical" :named("scope"), $P1884 :named("name"))
    $P1886 = $P1881."new"("self" :named("name"), "lexical" :named("scope"), 1 :named("isdecl"), $P1885 :named("viviself"))
.annotate 'line', 829
    $P1880."push"($P1886)
.annotate 'line', 833
    new $P1887, "Integer"
    assign $P1887, 1
    get_global $P1888, "@BLOCK"
    unless_null $P1888, vivify_652
    $P1888 = root_new ['parrot';'ResizablePMCArray']
    set_global "@BLOCK", $P1888
  vivify_652:
    set $P1889, $P1888[0]
    unless_null $P1889, vivify_653
    $P1889 = root_new ['parrot';'Hash']
    set $P1888[0], $P1889
  vivify_653:
    set $P1889["signature_has_invocant"], $P1887
.annotate 'line', 826
    .return ($P1887)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1895"  :anon :subid("104_1299591508.723") :outer("102_1299591508.723")
    .param pmc param_1897
.annotate 'line', 835
    .lex "$_", param_1897
    find_lex $P1898, "$BLOCKINIT"
    find_lex $P1899, "$_"
    $P1900 = $P1899."ast"()
    $P1901 = $P1898."push"($P1900)
    .return ($P1901)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "parameter"  :subid("105_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_1906
    .param pmc param_1907
.annotate 'line', 838
    .lex "self", param_1906
    .lex "$/", param_1907
.annotate 'line', 839
    new $P1908, "Undef"
    .lex "$quant", $P1908
.annotate 'line', 840
    new $P1909, "Undef"
    .lex "$past", $P1909
.annotate 'line', 839
    find_lex $P1910, "$/"
    unless_null $P1910, vivify_657
    $P1910 = root_new ['parrot';'Hash']
  vivify_657:
    set $P1911, $P1910["quant"]
    unless_null $P1911, vivify_658
    new $P1911, "Undef"
  vivify_658:
    store_lex "$quant", $P1911
    find_lex $P1912, "$past"
.annotate 'line', 841
    find_lex $P1914, "$/"
    unless_null $P1914, vivify_659
    $P1914 = root_new ['parrot';'Hash']
  vivify_659:
    set $P1915, $P1914["named_param"]
    unless_null $P1915, vivify_660
    new $P1915, "Undef"
  vivify_660:
    if $P1915, if_1913
.annotate 'line', 848
    find_lex $P1929, "$/"
    unless_null $P1929, vivify_661
    $P1929 = root_new ['parrot';'Hash']
  vivify_661:
    set $P1930, $P1929["param_var"]
    unless_null $P1930, vivify_662
    new $P1930, "Undef"
  vivify_662:
    $P1931 = $P1930."ast"()
    store_lex "$past", $P1931
.annotate 'line', 849
    find_lex $P1933, "$quant"
    set $S1934, $P1933
    iseq $I1935, $S1934, "*"
    if $I1935, if_1932
.annotate 'line', 853
    find_lex $P1944, "$quant"
    set $S1945, $P1944
    iseq $I1946, $S1945, "?"
    unless $I1946, if_1943_end
.annotate 'line', 854
    find_lex $P1947, "$past"
    find_lex $P1948, "$/"
    unless_null $P1948, vivify_663
    $P1948 = root_new ['parrot';'Hash']
  vivify_663:
    set $P1949, $P1948["param_var"]
    unless_null $P1949, vivify_664
    $P1949 = root_new ['parrot';'Hash']
  vivify_664:
    set $P1950, $P1949["sigil"]
    unless_null $P1950, vivify_665
    new $P1950, "Undef"
  vivify_665:
    $P1951 = "vivitype"($P1950)
    $P1947."viviself"($P1951)
  if_1943_end:
.annotate 'line', 853
    goto if_1932_end
  if_1932:
.annotate 'line', 850
    find_lex $P1936, "$past"
    $P1936."slurpy"(1)
.annotate 'line', 851
    find_lex $P1937, "$past"
    find_lex $P1938, "$/"
    unless_null $P1938, vivify_666
    $P1938 = root_new ['parrot';'Hash']
  vivify_666:
    set $P1939, $P1938["param_var"]
    unless_null $P1939, vivify_667
    $P1939 = root_new ['parrot';'Hash']
  vivify_667:
    set $P1940, $P1939["sigil"]
    unless_null $P1940, vivify_668
    new $P1940, "Undef"
  vivify_668:
    set $S1941, $P1940
    iseq $I1942, $S1941, "%"
    $P1937."named"($I1942)
  if_1932_end:
.annotate 'line', 847
    goto if_1913_end
  if_1913:
.annotate 'line', 842
    find_lex $P1916, "$/"
    unless_null $P1916, vivify_669
    $P1916 = root_new ['parrot';'Hash']
  vivify_669:
    set $P1917, $P1916["named_param"]
    unless_null $P1917, vivify_670
    new $P1917, "Undef"
  vivify_670:
    $P1918 = $P1917."ast"()
    store_lex "$past", $P1918
.annotate 'line', 843
    find_lex $P1920, "$quant"
    set $S1921, $P1920
    isne $I1922, $S1921, "!"
    unless $I1922, if_1919_end
.annotate 'line', 844
    find_lex $P1923, "$past"
    find_lex $P1924, "$/"
    unless_null $P1924, vivify_671
    $P1924 = root_new ['parrot';'Hash']
  vivify_671:
    set $P1925, $P1924["named_param"]
    unless_null $P1925, vivify_672
    $P1925 = root_new ['parrot';'Hash']
  vivify_672:
    set $P1926, $P1925["param_var"]
    unless_null $P1926, vivify_673
    $P1926 = root_new ['parrot';'Hash']
  vivify_673:
    set $P1927, $P1926["sigil"]
    unless_null $P1927, vivify_674
    new $P1927, "Undef"
  vivify_674:
    $P1928 = "vivitype"($P1927)
    $P1923."viviself"($P1928)
  if_1919_end:
  if_1913_end:
.annotate 'line', 857
    find_lex $P1953, "$/"
    unless_null $P1953, vivify_675
    $P1953 = root_new ['parrot';'Hash']
  vivify_675:
    set $P1954, $P1953["default_value"]
    unless_null $P1954, vivify_676
    new $P1954, "Undef"
  vivify_676:
    unless $P1954, if_1952_end
.annotate 'line', 858
    find_lex $P1956, "$quant"
    set $S1957, $P1956
    iseq $I1958, $S1957, "*"
    unless $I1958, if_1955_end
.annotate 'line', 859
    find_lex $P1959, "$/"
    $P1960 = $P1959."CURSOR"()
    $P1960."panic"("Can't put default on slurpy parameter")
  if_1955_end:
.annotate 'line', 861
    find_lex $P1962, "$quant"
    set $S1963, $P1962
    iseq $I1964, $S1963, "!"
    unless $I1964, if_1961_end
.annotate 'line', 862
    find_lex $P1965, "$/"
    $P1966 = $P1965."CURSOR"()
    $P1966."panic"("Can't put default on required parameter")
  if_1961_end:
.annotate 'line', 864
    find_lex $P1967, "$past"
    find_lex $P1968, "$/"
    unless_null $P1968, vivify_677
    $P1968 = root_new ['parrot';'Hash']
  vivify_677:
    set $P1969, $P1968["default_value"]
    unless_null $P1969, vivify_678
    $P1969 = root_new ['parrot';'ResizablePMCArray']
  vivify_678:
    set $P1970, $P1969[0]
    unless_null $P1970, vivify_679
    $P1970 = root_new ['parrot';'Hash']
  vivify_679:
    set $P1971, $P1970["EXPR"]
    unless_null $P1971, vivify_680
    new $P1971, "Undef"
  vivify_680:
    $P1972 = $P1971."ast"()
    $P1967."viviself"($P1972)
  if_1952_end:
.annotate 'line', 866
    find_lex $P1974, "$past"
    $P1975 = $P1974."viviself"()
    if $P1975, unless_1973_end
    get_global $P1976, "@BLOCK"
    unless_null $P1976, vivify_681
    $P1976 = root_new ['parrot';'ResizablePMCArray']
  vivify_681:
    set $P1977, $P1976[0]
    unless_null $P1977, vivify_682
    new $P1977, "Undef"
  vivify_682:
    get_global $P1978, "@BLOCK"
    unless_null $P1978, vivify_683
    $P1978 = root_new ['parrot';'ResizablePMCArray']
  vivify_683:
    set $P1979, $P1978[0]
    unless_null $P1979, vivify_684
    new $P1979, "Undef"
  vivify_684:
    $P1980 = $P1979."arity"()
    set $N1981, $P1980
    new $P1982, 'Float'
    set $P1982, $N1981
    add $P1983, $P1982, 1
    $P1977."arity"($P1983)
  unless_1973_end:
.annotate 'line', 870
    find_lex $P1985, "$/"
    unless_null $P1985, vivify_685
    $P1985 = root_new ['parrot';'Hash']
  vivify_685:
    set $P1986, $P1985["typename"]
    unless_null $P1986, vivify_686
    new $P1986, "Undef"
  vivify_686:
    unless $P1986, if_1984_end
.annotate 'line', 871
    find_lex $P1987, "$past"
    find_lex $P1988, "$/"
    unless_null $P1988, vivify_687
    $P1988 = root_new ['parrot';'Hash']
  vivify_687:
    set $P1989, $P1988["typename"]
    unless_null $P1989, vivify_688
    $P1989 = root_new ['parrot';'ResizablePMCArray']
  vivify_688:
    set $P1990, $P1989[0]
    unless_null $P1990, vivify_689
    new $P1990, "Undef"
  vivify_689:
    $P1991 = $P1990."ast"()
    $P1987."multitype"($P1991)
  if_1984_end:
.annotate 'line', 875
    find_lex $P1993, "$/"
    unless_null $P1993, vivify_690
    $P1993 = root_new ['parrot';'Hash']
  vivify_690:
    set $P1994, $P1993["definedness"]
    unless_null $P1994, vivify_691
    new $P1994, "Undef"
  vivify_691:
    unless $P1994, if_1992_end
.annotate 'line', 876
    find_lex $P1995, "$/"
    unless_null $P1995, vivify_692
    $P1995 = root_new ['parrot';'Hash']
  vivify_692:
    set $P1996, $P1995["definedness"]
    unless_null $P1996, vivify_693
    $P1996 = root_new ['parrot';'ResizablePMCArray']
  vivify_693:
    set $P1997, $P1996[0]
    unless_null $P1997, vivify_694
    new $P1997, "Undef"
  vivify_694:
    set $S1998, $P1997
    new $P1999, 'String'
    set $P1999, $S1998
    find_lex $P2000, "$past"
    unless_null $P2000, vivify_695
    $P2000 = root_new ['parrot';'Hash']
    store_lex "$past", $P2000
  vivify_695:
    set $P2000["definedness"], $P1999
  if_1992_end:
.annotate 'line', 879
    find_lex $P2001, "$/"
    find_lex $P2002, "$past"
    $P2003 = $P2001."!make"($P2002)
.annotate 'line', 838
    .return ($P2003)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "param_var"  :subid("106_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2005
    .param pmc param_2006
.annotate 'line', 882
    .lex "self", param_2005
    .lex "$/", param_2006
.annotate 'line', 883
    new $P2007, "Undef"
    .lex "$name", $P2007
.annotate 'line', 884
    new $P2008, "Undef"
    .lex "$past", $P2008
.annotate 'line', 883
    find_lex $P2009, "$/"
    set $S2010, $P2009
    new $P2011, 'String'
    set $P2011, $S2010
    store_lex "$name", $P2011
.annotate 'line', 884
    get_hll_global $P2012, ["PAST"], "Var"
    find_lex $P2013, "$name"
    find_lex $P2014, "$/"
    $P2015 = $P2012."new"($P2013 :named("name"), "parameter" :named("scope"), 1 :named("isdecl"), $P2014 :named("node"))
    store_lex "$past", $P2015
.annotate 'line', 886
    get_global $P2016, "@BLOCK"
    unless_null $P2016, vivify_696
    $P2016 = root_new ['parrot';'ResizablePMCArray']
  vivify_696:
    set $P2017, $P2016[0]
    unless_null $P2017, vivify_697
    new $P2017, "Undef"
  vivify_697:
    find_lex $P2018, "$name"
    $P2017."symbol"($P2018, "lexical" :named("scope"))
.annotate 'line', 887
    find_lex $P2019, "$/"
    find_lex $P2020, "$past"
    $P2021 = $P2019."!make"($P2020)
.annotate 'line', 882
    .return ($P2021)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "named_param"  :subid("107_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2023
    .param pmc param_2024
.annotate 'line', 890
    .lex "self", param_2023
    .lex "$/", param_2024
.annotate 'line', 891
    new $P2025, "Undef"
    .lex "$past", $P2025
    find_lex $P2026, "$/"
    unless_null $P2026, vivify_698
    $P2026 = root_new ['parrot';'Hash']
  vivify_698:
    set $P2027, $P2026["param_var"]
    unless_null $P2027, vivify_699
    new $P2027, "Undef"
  vivify_699:
    $P2028 = $P2027."ast"()
    store_lex "$past", $P2028
.annotate 'line', 892
    find_lex $P2029, "$past"
    find_lex $P2030, "$/"
    unless_null $P2030, vivify_700
    $P2030 = root_new ['parrot';'Hash']
  vivify_700:
    set $P2031, $P2030["param_var"]
    unless_null $P2031, vivify_701
    $P2031 = root_new ['parrot';'Hash']
  vivify_701:
    set $P2032, $P2031["name"]
    unless_null $P2032, vivify_702
    new $P2032, "Undef"
  vivify_702:
    set $S2033, $P2032
    $P2029."named"($S2033)
.annotate 'line', 893
    find_lex $P2034, "$/"
    find_lex $P2035, "$past"
    $P2036 = $P2034."!make"($P2035)
.annotate 'line', 890
    .return ($P2036)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "typename"  :subid("108_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2038
    .param pmc param_2039
.annotate 'line', 896
    .lex "self", param_2038
    .lex "$/", param_2039
.annotate 'line', 897
    $P2040 = root_new ['parrot';'ResizablePMCArray']
    .lex "@name", $P2040
    get_hll_global $P2041, ["HLL"], "Compiler"
    find_lex $P2042, "$/"
    set $S2043, $P2042
    $P2044 = $P2041."parse_name"($S2043)
    store_lex "@name", $P2044
.annotate 'line', 898
    find_lex $P2045, "$/"
    get_hll_global $P2046, ["PAST"], "Var"
.annotate 'line', 899
    find_lex $P2047, "@name"
    $P2048 = $P2047."pop"()
    find_lex $P2049, "@name"
    $P2050 = $P2046."new"($P2048 :named("name"), $P2049 :named("namespace"), "package" :named("scope"))
.annotate 'line', 898
    $P2051 = $P2045."!make"($P2050)
.annotate 'line', 896
    .return ($P2051)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "trait"  :subid("109_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2053
    .param pmc param_2054
.annotate 'line', 905
    .lex "self", param_2053
    .lex "$/", param_2054
.annotate 'line', 906
    find_lex $P2055, "$/"
    find_lex $P2056, "$/"
    unless_null $P2056, vivify_703
    $P2056 = root_new ['parrot';'Hash']
  vivify_703:
    set $P2057, $P2056["trait_mod"]
    unless_null $P2057, vivify_704
    new $P2057, "Undef"
  vivify_704:
    $P2058 = $P2057."ast"()
    $P2059 = $P2055."!make"($P2058)
.annotate 'line', 905
    .return ($P2059)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "trait_mod:sym<is>"  :subid("110_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2061
    .param pmc param_2062
.annotate 'line', 909
    .const 'Sub' $P2082 = "111_1299591508.723" 
    capture_lex $P2082
    .lex "self", param_2061
    .lex "$/", param_2062
.annotate 'line', 910
    new $P2063, "Undef"
    .lex "$cpast", $P2063
    find_lex $P2064, "$/"
    unless_null $P2064, vivify_705
    $P2064 = root_new ['parrot';'Hash']
  vivify_705:
    set $P2065, $P2064["circumfix"]
    unless_null $P2065, vivify_706
    $P2065 = root_new ['parrot';'ResizablePMCArray']
  vivify_706:
    set $P2066, $P2065[0]
    unless_null $P2066, vivify_707
    new $P2066, "Undef"
  vivify_707:
    $P2067 = $P2066."ast"()
    store_lex "$cpast", $P2067
.annotate 'line', 911
    find_lex $P2070, "$/"
    unless_null $P2070, vivify_708
    $P2070 = root_new ['parrot';'Hash']
  vivify_708:
    set $P2071, $P2070["longname"]
    unless_null $P2071, vivify_709
    new $P2071, "Undef"
  vivify_709:
    set $S2072, $P2071
    iseq $I2073, $S2072, "parrot_vtable"
    if $I2073, if_2069
.annotate 'line', 931
    find_lex $P2108, "$/"
    unless_null $P2108, vivify_710
    $P2108 = root_new ['parrot';'Hash']
  vivify_710:
    set $P2109, $P2108["longname"]
    unless_null $P2109, vivify_711
    new $P2109, "Undef"
  vivify_711:
    set $S2110, $P2109
    iseq $I2111, $S2110, "pirflags"
    if $I2111, if_2107
.annotate 'line', 935
    find_lex $P2115, "$/"
    $P2116 = $P2115."CURSOR"()
    new $P2117, 'String'
    set $P2117, "Trait '"
    find_lex $P2118, "$/"
    unless_null $P2118, vivify_712
    $P2118 = root_new ['parrot';'Hash']
  vivify_712:
    set $P2119, $P2118["longname"]
    unless_null $P2119, vivify_713
    new $P2119, "Undef"
  vivify_713:
    concat $P2120, $P2117, $P2119
    concat $P2121, $P2120, "' not implemented"
    $P2122 = $P2116."panic"($P2121)
.annotate 'line', 934
    set $P2106, $P2122
.annotate 'line', 931
    goto if_2107_end
  if_2107:
.annotate 'line', 932
    find_lex $P2112, "$/"
    $P2113 = $P2112."CURSOR"()
    $P2114 = $P2113."panic"("Trait 'pirflags' no longer supported; use 'is vtable'")
.annotate 'line', 931
    set $P2106, $P2114
  if_2107_end:
    set $P2068, $P2106
.annotate 'line', 911
    goto if_2069_end
  if_2069:
.annotate 'line', 914
    get_hll_global $P2075, ["PAST"], "Val"
    find_lex $P2076, "$cpast"
    $P2077 = $P2075."ACCEPTS"($P2076)
    if $P2077, unless_2074_end
.annotate 'line', 913
    find_lex $P2078, "$/"
    $P2079 = $P2078."CURSOR"()
    $P2079."panic"("Trait 'parrot_vtable' requires constant scalar argument")
  unless_2074_end:
.annotate 'line', 915
    find_lex $P2080, "$/"
    .const 'Sub' $P2082 = "111_1299591508.723" 
    newclosure $P2104, $P2082
    $P2105 = $P2080."!make"($P2104)
.annotate 'line', 911
    set $P2068, $P2105
  if_2069_end:
.annotate 'line', 909
    .return ($P2068)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2081"  :anon :subid("111_1299591508.723") :outer("110_1299591508.723")
    .param pmc param_2083
.annotate 'line', 915
    .lex "$match", param_2083
.annotate 'line', 916
    new $P2084, "Undef"
    .lex "$meth", $P2084
    find_lex $P2085, "$match"
    $P2086 = $P2085."ast"()
    set $P2087, $P2086["block_past"]
    unless_null $P2087, vivify_714
    new $P2087, "Undef"
  vivify_714:
    store_lex "$meth", $P2087
.annotate 'line', 917
    find_dynamic_lex $P2090, "$*PACKAGE-SETUP"
    unless_null $P2090, vivify_715
    get_hll_global $P2090, "$PACKAGE-SETUP"
    unless_null $P2090, vivify_716
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_716:
  vivify_715:
    defined $I2091, $P2090
    if $I2091, if_2089
    new $P2088, 'Integer'
    set $P2088, $I2091
    goto if_2089_end
  if_2089:
.annotate 'line', 918
    find_dynamic_lex $P2092, "$*PACKAGE-SETUP"
    unless_null $P2092, vivify_717
    get_hll_global $P2092, "$PACKAGE-SETUP"
    unless_null $P2092, vivify_718
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_718:
  vivify_717:
    get_hll_global $P2093, ["PAST"], "Op"
.annotate 'line', 920
    get_hll_global $P2094, ["PAST"], "Op"
.annotate 'line', 923
    get_hll_global $P2095, ["PAST"], "Var"
    $P2096 = $P2095."new"("type_obj" :named("name"), "register" :named("scope"))
    $P2097 = $P2094."new"($P2096, "get_how PP" :named("pirop"))
.annotate 'line', 925
    get_hll_global $P2098, ["PAST"], "Var"
    $P2099 = $P2098."new"("type_obj" :named("name"), "register" :named("scope"))
    find_lex $P2100, "$cpast"
    find_lex $P2101, "$meth"
    $P2102 = $P2093."new"($P2097, $P2099, $P2100, $P2101, "callmethod" :named("pasttype"), "add_parrot_vtable_mapping" :named("name"))
.annotate 'line', 918
    $P2103 = $P2092."push"($P2102)
.annotate 'line', 917
    set $P2088, $P2103
  if_2089_end:
.annotate 'line', 915
    .return ($P2088)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "regex_declarator"  :subid("112_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2126
    .param pmc param_2127
    .param pmc param_2128 :optional
    .param int has_param_2128 :opt_flag
.annotate 'line', 939
    .const 'Sub' $P2226 = "115_1299591508.723" 
    capture_lex $P2226
    .const 'Sub' $P2198 = "114_1299591508.723" 
    capture_lex $P2198
    .const 'Sub' $P2171 = "113_1299591508.723" 
    capture_lex $P2171
    new $P2125, ['ExceptionHandler'], .CONTROL_RETURN
    set_label $P2125, control_2124
    push_eh $P2125
    .lex "self", param_2126
    .lex "$/", param_2127
    if has_param_2128, optparam_719
    new $P2129, "Undef"
    set param_2128, $P2129
  optparam_719:
    .lex "$key", param_2128
.annotate 'line', 940
    $P2130 = root_new ['parrot';'ResizablePMCArray']
    .lex "@MODIFIERS", $P2130
.annotate 'line', 943
    new $P2131, "Undef"
    .lex "$name", $P2131
.annotate 'line', 944
    new $P2132, "Undef"
    .lex "$past", $P2132
.annotate 'line', 940

        $P2133 = get_hll_global ['Regex';'P6Regex';'Actions'], '@MODIFIERS'
    
    store_lex "@MODIFIERS", $P2133
.annotate 'line', 943
    find_lex $P2134, "$/"
    unless_null $P2134, vivify_720
    $P2134 = root_new ['parrot';'Hash']
  vivify_720:
    set $P2135, $P2134["deflongname"]
    unless_null $P2135, vivify_721
    new $P2135, "Undef"
  vivify_721:
    $P2136 = $P2135."ast"()
    set $S2137, $P2136
    new $P2138, 'String'
    set $P2138, $S2137
    store_lex "$name", $P2138
    find_lex $P2139, "$past"
.annotate 'line', 945
    find_lex $P2141, "$/"
    unless_null $P2141, vivify_722
    $P2141 = root_new ['parrot';'Hash']
  vivify_722:
    set $P2142, $P2141["proto"]
    unless_null $P2142, vivify_723
    new $P2142, "Undef"
  vivify_723:
    if $P2142, if_2140
.annotate 'line', 984
    find_lex $P2194, "$key"
    set $S2195, $P2194
    iseq $I2196, $S2195, "open"
    if $I2196, if_2193
.annotate 'line', 997
    .const 'Sub' $P2226 = "115_1299591508.723" 
    capture_lex $P2226
    $P2226()
    goto if_2193_end
  if_2193:
.annotate 'line', 984
    .const 'Sub' $P2198 = "114_1299591508.723" 
    capture_lex $P2198
    $P2198()
  if_2193_end:
    goto if_2140_end
  if_2140:
.annotate 'line', 947
    get_hll_global $P2143, ["PAST"], "Stmts"
.annotate 'line', 948
    get_hll_global $P2144, ["PAST"], "Block"
    find_lex $P2145, "$name"
.annotate 'line', 949
    get_hll_global $P2146, ["PAST"], "Op"
.annotate 'line', 950
    get_hll_global $P2147, ["PAST"], "Var"
    $P2148 = $P2147."new"("self" :named("name"), "parameter" :named("scope"))
    find_lex $P2149, "$name"
    $P2150 = $P2146."new"($P2148, $P2149, "!protoregex" :named("name"), "callmethod" :named("pasttype"))
.annotate 'line', 949
    find_lex $P2151, "$/"
    $P2152 = $P2144."new"($P2150, $P2145 :named("name"), "declaration" :named("blocktype"), 0 :named("lexical"), $P2151 :named("node"))
.annotate 'line', 959
    get_hll_global $P2153, ["PAST"], "Block"
    new $P2154, "String"
    assign $P2154, "!PREFIX__"
    find_lex $P2155, "$name"
    concat $P2156, $P2154, $P2155
.annotate 'line', 960
    get_hll_global $P2157, ["PAST"], "Op"
.annotate 'line', 961
    get_hll_global $P2158, ["PAST"], "Var"
    $P2159 = $P2158."new"("self" :named("name"), "parameter" :named("scope"))
    find_lex $P2160, "$name"
    $P2161 = $P2157."new"($P2159, $P2160, "!PREFIX__!protoregex" :named("name"), "callmethod" :named("pasttype"))
.annotate 'line', 960
    find_lex $P2162, "$/"
    $P2163 = $P2153."new"($P2161, $P2156 :named("name"), "declaration" :named("blocktype"), 0 :named("lexical"), $P2162 :named("node"))
.annotate 'line', 959
    $P2164 = $P2143."new"($P2152, $P2163)
.annotate 'line', 947
    store_lex "$past", $P2164
.annotate 'line', 971
    find_lex $P2166, "$past"
    $P2167 = $P2166."list"()
    defined $I2168, $P2167
    unless $I2168, for_undef_744
    iter $P2165, $P2167
    new $P2191, 'ExceptionHandler'
    set_label $P2191, loop2190_handler
    $P2191."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P2191
  loop2190_test:
    unless $P2165, loop2190_done
    shift $P2169, $P2165
  loop2190_redo:
    .const 'Sub' $P2171 = "113_1299591508.723" 
    capture_lex $P2171
    $P2171($P2169)
  loop2190_next:
    goto loop2190_test
  loop2190_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P2192, exception, 'type'
    eq $P2192, .CONTROL_LOOP_NEXT, loop2190_next
    eq $P2192, .CONTROL_LOOP_REDO, loop2190_redo
  loop2190_done:
    pop_eh 
  for_undef_744:
  if_2140_end:
.annotate 'line', 1033
    find_lex $P2284, "$/"
    find_lex $P2285, "$past"
    $P2286 = $P2284."!make"($P2285)
.annotate 'line', 939
    .return ($P2286)
  control_2124:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P2287, exception, "payload"
    .return ($P2287)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2225"  :anon :subid("115_1299591508.723") :outer("112_1299591508.723")
.annotate 'line', 998
    new $P2227, "Undef"
    .lex "$regex", $P2227
.annotate 'line', 999
    get_hll_global $P2228, ["Regex";"P6Regex";"Actions"], "buildsub"
    find_lex $P2229, "$/"
    unless_null $P2229, vivify_724
    $P2229 = root_new ['parrot';'Hash']
  vivify_724:
    set $P2230, $P2229["p6regex"]
    unless_null $P2230, vivify_725
    new $P2230, "Undef"
  vivify_725:
    $P2231 = $P2230."ast"()
    get_global $P2232, "@BLOCK"
    $P2233 = $P2232."shift"()
    $P2234 = $P2228($P2231, $P2233)
    store_lex "$regex", $P2234
.annotate 'line', 1000
    find_lex $P2235, "$regex"
    find_lex $P2236, "$name"
    $P2235."name"($P2236)
.annotate 'line', 1002
    get_hll_global $P2237, ["PAST"], "Op"
.annotate 'line', 1004
    get_hll_global $P2238, ["PAST"], "Var"
    new $P2239, "ResizablePMCArray"
    push $P2239, "Regex"
    $P2240 = $P2238."new"("Method" :named("name"), $P2239 :named("namespace"), "package" :named("scope"))
    find_lex $P2241, "$regex"
    $P2242 = $P2237."new"($P2240, $P2241, "callmethod" :named("pasttype"), "new" :named("name"))
.annotate 'line', 1002
    store_lex "$past", $P2242
.annotate 'line', 1007
    find_dynamic_lex $P2244, "$*PACKAGE-SETUP"
    unless_null $P2244, vivify_726
    get_hll_global $P2244, "$PACKAGE-SETUP"
    unless_null $P2244, vivify_727
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_727:
  vivify_726:
    defined $I2245, $P2244
    unless $I2245, if_2243_end
.annotate 'line', 1008
    find_dynamic_lex $P2246, "$*PACKAGE-SETUP"
    unless_null $P2246, vivify_728
    get_hll_global $P2246, "$PACKAGE-SETUP"
    unless_null $P2246, vivify_729
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_729:
  vivify_728:
    get_hll_global $P2247, ["PAST"], "Op"
.annotate 'line', 1010
    get_hll_global $P2248, ["PAST"], "Op"
.annotate 'line', 1012
    get_hll_global $P2249, ["PAST"], "Var"
    $P2250 = $P2249."new"("type_obj" :named("name"), "register" :named("scope"))
    $P2251 = $P2248."new"($P2250, "get_how PP" :named("pirop"))
.annotate 'line', 1014
    get_hll_global $P2252, ["PAST"], "Var"
    $P2253 = $P2252."new"("type_obj" :named("name"), "register" :named("scope"))
.annotate 'line', 1015
    get_hll_global $P2254, ["PAST"], "Val"
    find_lex $P2255, "$name"
    $P2256 = $P2254."new"($P2255 :named("value"))
.annotate 'line', 1016
    get_hll_global $P2257, ["PAST"], "Val"
    find_lex $P2258, "$regex"
    $P2259 = $P2257."new"($P2258 :named("value"))
    $P2260 = $P2247."new"($P2251, $P2253, $P2256, $P2259, "callmethod" :named("pasttype"), "add_method" :named("name"))
.annotate 'line', 1008
    $P2246."push"($P2260)
.annotate 'line', 1018
    find_dynamic_lex $P2261, "$*PACKAGE-SETUP"
    unless_null $P2261, vivify_730
    get_hll_global $P2261, "$PACKAGE-SETUP"
    unless_null $P2261, vivify_731
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_731:
  vivify_730:
    get_hll_global $P2262, ["PAST"], "Op"
.annotate 'line', 1020
    get_hll_global $P2263, ["PAST"], "Op"
.annotate 'line', 1022
    get_hll_global $P2264, ["PAST"], "Var"
    $P2265 = $P2264."new"("type_obj" :named("name"), "register" :named("scope"))
    $P2266 = $P2263."new"($P2265, "get_how PP" :named("pirop"))
.annotate 'line', 1024
    get_hll_global $P2267, ["PAST"], "Var"
    $P2268 = $P2267."new"("type_obj" :named("name"), "register" :named("scope"))
.annotate 'line', 1025
    get_hll_global $P2269, ["PAST"], "Val"
    new $P2270, "String"
    assign $P2270, "!PREFIX__"
    find_lex $P2271, "$name"
    concat $P2272, $P2270, $P2271
    $P2273 = $P2269."new"($P2272 :named("value"))
.annotate 'line', 1026
    get_hll_global $P2274, ["PAST"], "Var"
    new $P2275, "String"
    assign $P2275, "!PREFIX__"
    find_lex $P2276, "$name"
    concat $P2277, $P2275, $P2276
    $P2278 = $P2274."new"($P2277 :named("name"), "package" :named("scope"))
    $P2279 = $P2262."new"($P2266, $P2268, $P2273, $P2278, "callmethod" :named("pasttype"), "add_method" :named("name"))
.annotate 'line', 1018
    $P2261."push"($P2279)
  if_2243_end:
.annotate 'line', 1030
    find_lex $P2280, "$regex"
    find_lex $P2281, "$past"
    unless_null $P2281, vivify_732
    $P2281 = root_new ['parrot';'Hash']
    store_lex "$past", $P2281
  vivify_732:
    set $P2281["sink"], $P2280
.annotate 'line', 1031
    find_lex $P2282, "@MODIFIERS"
    $P2283 = $P2282."shift"()
.annotate 'line', 997
    .return ($P2283)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block2197"  :anon :subid("114_1299591508.723") :outer("112_1299591508.723")
.annotate 'line', 985
    $P2199 = root_new ['parrot';'Hash']
    .lex "%h", $P2199
.annotate 'line', 984
    find_lex $P2200, "%h"
.annotate 'line', 986
    find_lex $P2202, "$/"
    unless_null $P2202, vivify_733
    $P2202 = root_new ['parrot';'Hash']
  vivify_733:
    set $P2203, $P2202["sym"]
    unless_null $P2203, vivify_734
    new $P2203, "Undef"
  vivify_734:
    set $S2204, $P2203
    iseq $I2205, $S2204, "token"
    unless $I2205, if_2201_end
    new $P2206, "Integer"
    assign $P2206, 1
    find_lex $P2207, "%h"
    unless_null $P2207, vivify_735
    $P2207 = root_new ['parrot';'Hash']
    store_lex "%h", $P2207
  vivify_735:
    set $P2207["r"], $P2206
  if_2201_end:
.annotate 'line', 987
    find_lex $P2209, "$/"
    unless_null $P2209, vivify_736
    $P2209 = root_new ['parrot';'Hash']
  vivify_736:
    set $P2210, $P2209["sym"]
    unless_null $P2210, vivify_737
    new $P2210, "Undef"
  vivify_737:
    set $S2211, $P2210
    iseq $I2212, $S2211, "rule"
    unless $I2212, if_2208_end
    new $P2213, "Integer"
    assign $P2213, 1
    find_lex $P2214, "%h"
    unless_null $P2214, vivify_738
    $P2214 = root_new ['parrot';'Hash']
    store_lex "%h", $P2214
  vivify_738:
    set $P2214["r"], $P2213
    new $P2215, "Integer"
    assign $P2215, 1
    find_lex $P2216, "%h"
    unless_null $P2216, vivify_739
    $P2216 = root_new ['parrot';'Hash']
    store_lex "%h", $P2216
  vivify_739:
    set $P2216["s"], $P2215
  if_2208_end:
.annotate 'line', 988
    find_lex $P2217, "@MODIFIERS"
    find_lex $P2218, "%h"
    $P2217."unshift"($P2218)
.annotate 'line', 989

            $P0 = find_lex '$name'
            set_hll_global ['Regex';'P6Regex';'Actions'], '$REGEXNAME', $P0
        
.annotate 'line', 993
    get_global $P2219, "@BLOCK"
    unless_null $P2219, vivify_740
    $P2219 = root_new ['parrot';'ResizablePMCArray']
  vivify_740:
    set $P2220, $P2219[0]
    unless_null $P2220, vivify_741
    new $P2220, "Undef"
  vivify_741:
    $P2220."symbol"(unicode:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 994
    get_global $P2221, "@BLOCK"
    unless_null $P2221, vivify_742
    $P2221 = root_new ['parrot';'ResizablePMCArray']
  vivify_742:
    set $P2222, $P2221[0]
    unless_null $P2222, vivify_743
    new $P2222, "Undef"
  vivify_743:
    $P2222."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 995
    new $P2223, "Exception"
    set $P2223['type'], .CONTROL_RETURN
    new $P2224, "Integer"
    assign $P2224, 0
    setattribute $P2223, 'payload', $P2224
    throw $P2223
.annotate 'line', 984
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2170"  :anon :subid("113_1299591508.723") :outer("112_1299591508.723")
    .param pmc param_2172
.annotate 'line', 971
    .lex "$_", param_2172
.annotate 'line', 972
    find_dynamic_lex $P2173, "$*PACKAGE-SETUP"
    unless_null $P2173, vivify_745
    get_hll_global $P2173, "$PACKAGE-SETUP"
    unless_null $P2173, vivify_746
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_746:
  vivify_745:
    get_hll_global $P2174, ["PAST"], "Op"
.annotate 'line', 974
    get_hll_global $P2175, ["PAST"], "Op"
.annotate 'line', 976
    get_hll_global $P2176, ["PAST"], "Var"
    $P2177 = $P2176."new"("type_obj" :named("name"), "register" :named("scope"))
    $P2178 = $P2175."new"($P2177, "get_how PP" :named("pirop"))
.annotate 'line', 978
    get_hll_global $P2179, ["PAST"], "Var"
    $P2180 = $P2179."new"("type_obj" :named("name"), "register" :named("scope"))
.annotate 'line', 979
    get_hll_global $P2181, ["PAST"], "Val"
    find_lex $P2182, "$_"
    $P2183 = $P2182."name"()
    $P2184 = $P2181."new"($P2183 :named("value"))
.annotate 'line', 980
    get_hll_global $P2185, ["PAST"], "Val"
    find_lex $P2186, "$_"
    $P2187 = $P2185."new"($P2186 :named("value"))
    $P2188 = $P2174."new"($P2178, $P2180, $P2184, $P2187, "callmethod" :named("pasttype"), "add_method" :named("name"))
.annotate 'line', 972
    $P2189 = $P2173."push"($P2188)
.annotate 'line', 971
    .return ($P2189)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "dotty"  :subid("116_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2289
    .param pmc param_2290
.annotate 'line', 1037
    .lex "self", param_2289
    .lex "$/", param_2290
.annotate 'line', 1038
    new $P2291, "Undef"
    .lex "$past", $P2291
    find_lex $P2294, "$/"
    unless_null $P2294, vivify_747
    $P2294 = root_new ['parrot';'Hash']
  vivify_747:
    set $P2295, $P2294["args"]
    unless_null $P2295, vivify_748
    new $P2295, "Undef"
  vivify_748:
    if $P2295, if_2293
    get_hll_global $P2300, ["PAST"], "Op"
    find_lex $P2301, "$/"
    $P2302 = $P2300."new"($P2301 :named("node"))
    set $P2292, $P2302
    goto if_2293_end
  if_2293:
    find_lex $P2296, "$/"
    unless_null $P2296, vivify_749
    $P2296 = root_new ['parrot';'Hash']
  vivify_749:
    set $P2297, $P2296["args"]
    unless_null $P2297, vivify_750
    $P2297 = root_new ['parrot';'ResizablePMCArray']
  vivify_750:
    set $P2298, $P2297[0]
    unless_null $P2298, vivify_751
    new $P2298, "Undef"
  vivify_751:
    $P2299 = $P2298."ast"()
    set $P2292, $P2299
  if_2293_end:
    store_lex "$past", $P2292
.annotate 'line', 1039
    find_lex $P2304, "$/"
    unless_null $P2304, vivify_752
    $P2304 = root_new ['parrot';'Hash']
  vivify_752:
    set $P2305, $P2304["quote"]
    unless_null $P2305, vivify_753
    new $P2305, "Undef"
  vivify_753:
    if $P2305, if_2303
.annotate 'line', 1043
    find_lex $P2312, "$/"
    unless_null $P2312, vivify_754
    $P2312 = root_new ['parrot';'Hash']
  vivify_754:
    set $P2313, $P2312["longname"]
    unless_null $P2313, vivify_755
    new $P2313, "Undef"
  vivify_755:
    set $S2314, $P2313
    iseq $I2315, $S2314, "HOW"
    if $I2315, if_2311
.annotate 'line', 1047
    find_lex $P2319, "$/"
    unless_null $P2319, vivify_756
    $P2319 = root_new ['parrot';'Hash']
  vivify_756:
    set $P2320, $P2319["longname"]
    unless_null $P2320, vivify_757
    new $P2320, "Undef"
  vivify_757:
    set $S2321, $P2320
    iseq $I2322, $S2321, "WHAT"
    if $I2322, if_2318
.annotate 'line', 1051
    find_lex $P2324, "$past"
    find_lex $P2325, "$/"
    unless_null $P2325, vivify_758
    $P2325 = root_new ['parrot';'Hash']
  vivify_758:
    set $P2326, $P2325["longname"]
    unless_null $P2326, vivify_759
    new $P2326, "Undef"
  vivify_759:
    set $S2327, $P2326
    $P2324."name"($S2327)
.annotate 'line', 1052
    find_lex $P2328, "$past"
    $P2328."pasttype"("callmethod")
.annotate 'line', 1050
    goto if_2318_end
  if_2318:
.annotate 'line', 1048
    find_lex $P2323, "$past"
    $P2323."pirop"("get_what PP")
  if_2318_end:
.annotate 'line', 1047
    goto if_2311_end
  if_2311:
.annotate 'line', 1044
    find_lex $P2316, "$past"
    $P2316."pirop"("get_how PP")
.annotate 'line', 1045
    find_lex $P2317, "$past"
    $P2317."pasttype"("pirop")
  if_2311_end:
.annotate 'line', 1043
    goto if_2303_end
  if_2303:
.annotate 'line', 1040
    find_lex $P2306, "$past"
    find_lex $P2307, "$/"
    unless_null $P2307, vivify_760
    $P2307 = root_new ['parrot';'Hash']
  vivify_760:
    set $P2308, $P2307["quote"]
    unless_null $P2308, vivify_761
    new $P2308, "Undef"
  vivify_761:
    $P2309 = $P2308."ast"()
    $P2306."name"($P2309)
.annotate 'line', 1041
    find_lex $P2310, "$past"
    $P2310."pasttype"("callmethod")
  if_2303_end:
.annotate 'line', 1054
    find_lex $P2329, "$/"
    find_lex $P2330, "$past"
    $P2331 = $P2329."!make"($P2330)
.annotate 'line', 1037
    .return ($P2331)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<self>"  :subid("117_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2333
    .param pmc param_2334
.annotate 'line', 1059
    .lex "self", param_2333
    .lex "$/", param_2334
.annotate 'line', 1060
    find_lex $P2335, "$/"
    get_hll_global $P2336, ["PAST"], "Var"
    $P2337 = $P2336."new"("self" :named("name"))
    $P2338 = $P2335."!make"($P2337)
.annotate 'line', 1059
    .return ($P2338)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<identifier>"  :subid("118_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2340
    .param pmc param_2341
.annotate 'line', 1063
    .lex "self", param_2340
    .lex "$/", param_2341
.annotate 'line', 1064
    new $P2342, "Undef"
    .lex "$past", $P2342
    find_lex $P2343, "$/"
    unless_null $P2343, vivify_762
    $P2343 = root_new ['parrot';'Hash']
  vivify_762:
    set $P2344, $P2343["args"]
    unless_null $P2344, vivify_763
    new $P2344, "Undef"
  vivify_763:
    $P2345 = $P2344."ast"()
    store_lex "$past", $P2345
.annotate 'line', 1065
    find_lex $P2346, "$past"
    find_lex $P2347, "$/"
    unless_null $P2347, vivify_764
    $P2347 = root_new ['parrot';'Hash']
  vivify_764:
    set $P2348, $P2347["deflongname"]
    unless_null $P2348, vivify_765
    new $P2348, "Undef"
  vivify_765:
    set $S2349, $P2348
    $P2346."name"($S2349)
.annotate 'line', 1066
    find_lex $P2350, "$/"
    find_lex $P2351, "$past"
    $P2352 = $P2350."!make"($P2351)
.annotate 'line', 1063
    .return ($P2352)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<name>"  :subid("119_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2354
    .param pmc param_2355
.annotate 'line', 1069
    .lex "self", param_2354
    .lex "$/", param_2355
.annotate 'line', 1070
    $P2356 = root_new ['parrot';'ResizablePMCArray']
    .lex "@ns", $P2356
.annotate 'line', 1071
    new $P2357, "Undef"
    .lex "$name", $P2357
.annotate 'line', 1073
    new $P2358, "Undef"
    .lex "$var", $P2358
.annotate 'line', 1075
    new $P2359, "Undef"
    .lex "$past", $P2359
.annotate 'line', 1070
    find_lex $P2360, "$/"
    unless_null $P2360, vivify_766
    $P2360 = root_new ['parrot';'Hash']
  vivify_766:
    set $P2361, $P2360["name"]
    unless_null $P2361, vivify_767
    $P2361 = root_new ['parrot';'Hash']
  vivify_767:
    set $P2362, $P2361["identifier"]
    unless_null $P2362, vivify_768
    new $P2362, "Undef"
  vivify_768:
    clone $P2363, $P2362
    store_lex "@ns", $P2363
.annotate 'line', 1071
    find_lex $P2364, "@ns"
    $P2365 = $P2364."pop"()
    store_lex "$name", $P2365
.annotate 'line', 1072
    find_lex $P2369, "@ns"
    if $P2369, if_2368
    set $P2367, $P2369
    goto if_2368_end
  if_2368:
    find_lex $P2370, "@ns"
    unless_null $P2370, vivify_769
    $P2370 = root_new ['parrot';'ResizablePMCArray']
  vivify_769:
    set $P2371, $P2370[0]
    unless_null $P2371, vivify_770
    new $P2371, "Undef"
  vivify_770:
    set $S2372, $P2371
    iseq $I2373, $S2372, "GLOBAL"
    new $P2367, 'Integer'
    set $P2367, $I2373
  if_2368_end:
    unless $P2367, if_2366_end
    find_lex $P2374, "@ns"
    $P2374."shift"()
  if_2366_end:
.annotate 'line', 1074
    get_hll_global $P2375, ["PAST"], "Var"
    find_lex $P2376, "$name"
    set $S2377, $P2376
    find_lex $P2378, "@ns"
    $P2379 = $P2375."new"($S2377 :named("name"), $P2378 :named("namespace"), "package" :named("scope"))
    store_lex "$var", $P2379
.annotate 'line', 1075
    find_lex $P2380, "$var"
    store_lex "$past", $P2380
.annotate 'line', 1076
    find_lex $P2382, "$/"
    unless_null $P2382, vivify_771
    $P2382 = root_new ['parrot';'Hash']
  vivify_771:
    set $P2383, $P2382["args"]
    unless_null $P2383, vivify_772
    new $P2383, "Undef"
  vivify_772:
    unless $P2383, if_2381_end
.annotate 'line', 1077
    find_lex $P2384, "$/"
    unless_null $P2384, vivify_773
    $P2384 = root_new ['parrot';'Hash']
  vivify_773:
    set $P2385, $P2384["args"]
    unless_null $P2385, vivify_774
    $P2385 = root_new ['parrot';'ResizablePMCArray']
  vivify_774:
    set $P2386, $P2385[0]
    unless_null $P2386, vivify_775
    new $P2386, "Undef"
  vivify_775:
    $P2387 = $P2386."ast"()
    store_lex "$past", $P2387
.annotate 'line', 1078
    find_lex $P2388, "$past"
    find_lex $P2389, "$var"
    $P2388."unshift"($P2389)
  if_2381_end:
.annotate 'line', 1080
    find_lex $P2390, "$/"
    find_lex $P2391, "$past"
    $P2392 = $P2390."!make"($P2391)
.annotate 'line', 1069
    .return ($P2392)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<pir::op>"  :subid("120_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2394
    .param pmc param_2395
.annotate 'line', 1083
    .lex "self", param_2394
    .lex "$/", param_2395
.annotate 'line', 1084
    new $P2396, "Undef"
    .lex "$past", $P2396
.annotate 'line', 1085
    new $P2397, "Undef"
    .lex "$pirop", $P2397
.annotate 'line', 1084
    find_lex $P2400, "$/"
    unless_null $P2400, vivify_776
    $P2400 = root_new ['parrot';'Hash']
  vivify_776:
    set $P2401, $P2400["args"]
    unless_null $P2401, vivify_777
    new $P2401, "Undef"
  vivify_777:
    if $P2401, if_2399
    get_hll_global $P2406, ["PAST"], "Op"
    find_lex $P2407, "$/"
    $P2408 = $P2406."new"($P2407 :named("node"))
    set $P2398, $P2408
    goto if_2399_end
  if_2399:
    find_lex $P2402, "$/"
    unless_null $P2402, vivify_778
    $P2402 = root_new ['parrot';'Hash']
  vivify_778:
    set $P2403, $P2402["args"]
    unless_null $P2403, vivify_779
    $P2403 = root_new ['parrot';'ResizablePMCArray']
  vivify_779:
    set $P2404, $P2403[0]
    unless_null $P2404, vivify_780
    new $P2404, "Undef"
  vivify_780:
    $P2405 = $P2404."ast"()
    set $P2398, $P2405
  if_2399_end:
    store_lex "$past", $P2398
.annotate 'line', 1085
    find_lex $P2409, "$/"
    unless_null $P2409, vivify_781
    $P2409 = root_new ['parrot';'Hash']
  vivify_781:
    set $P2410, $P2409["op"]
    unless_null $P2410, vivify_782
    new $P2410, "Undef"
  vivify_782:
    set $S2411, $P2410
    new $P2412, 'String'
    set $P2412, $S2411
    store_lex "$pirop", $P2412
.annotate 'line', 1086

        $P0 = find_lex '$pirop'
        $S0 = $P0
        $P0 = split '__', $S0
        $S0 = join ' ', $P0
        $P2413 = box $S0
    
    store_lex "$pirop", $P2413
.annotate 'line', 1093
    find_lex $P2414, "$past"
    find_lex $P2415, "$pirop"
    $P2414."pirop"($P2415)
.annotate 'line', 1094
    find_lex $P2416, "$past"
    $P2416."pasttype"("pirop")
.annotate 'line', 1095
    find_lex $P2417, "$/"
    find_lex $P2418, "$past"
    $P2419 = $P2417."!make"($P2418)
.annotate 'line', 1083
    .return ($P2419)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<onlystar>"  :subid("121_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2421
    .param pmc param_2422
.annotate 'line', 1098
    .lex "self", param_2421
    .lex "$/", param_2422
.annotate 'line', 1099
    find_lex $P2423, "$/"
    get_hll_global $P2424, ["PAST"], "Op"
    $P2425 = $P2424."new"("multi_dispatch_over_lexical_candidates P" :named("pirop"))
    $P2426 = $P2423."!make"($P2425)
.annotate 'line', 1098
    .return ($P2426)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "args"  :subid("122_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2428
    .param pmc param_2429
.annotate 'line', 1104
    .lex "self", param_2428
    .lex "$/", param_2429
    find_lex $P2430, "$/"
    find_lex $P2431, "$/"
    unless_null $P2431, vivify_783
    $P2431 = root_new ['parrot';'Hash']
  vivify_783:
    set $P2432, $P2431["arglist"]
    unless_null $P2432, vivify_784
    new $P2432, "Undef"
  vivify_784:
    $P2433 = $P2432."ast"()
    $P2434 = $P2430."!make"($P2433)
    .return ($P2434)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "arglist"  :subid("123_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2436
    .param pmc param_2437
.annotate 'line', 1106
    .const 'Sub' $P2448 = "124_1299591508.723" 
    capture_lex $P2448
    .lex "self", param_2436
    .lex "$/", param_2437
.annotate 'line', 1107
    new $P2438, "Undef"
    .lex "$past", $P2438
.annotate 'line', 1115
    new $P2439, "Undef"
    .lex "$i", $P2439
.annotate 'line', 1116
    new $P2440, "Undef"
    .lex "$n", $P2440
.annotate 'line', 1107
    get_hll_global $P2441, ["PAST"], "Op"
    find_lex $P2442, "$/"
    $P2443 = $P2441."new"("call" :named("pasttype"), $P2442 :named("node"))
    store_lex "$past", $P2443
.annotate 'line', 1108
    find_lex $P2445, "$/"
    unless_null $P2445, vivify_785
    $P2445 = root_new ['parrot';'Hash']
  vivify_785:
    set $P2446, $P2445["EXPR"]
    unless_null $P2446, vivify_786
    new $P2446, "Undef"
  vivify_786:
    unless $P2446, if_2444_end
    .const 'Sub' $P2448 = "124_1299591508.723" 
    capture_lex $P2448
    $P2448()
  if_2444_end:
.annotate 'line', 1115
    new $P2480, "Integer"
    assign $P2480, 0
    store_lex "$i", $P2480
.annotate 'line', 1116
    find_lex $P2481, "$past"
    $P2482 = $P2481."list"()
    set $N2483, $P2482
    new $P2484, 'Float'
    set $P2484, $N2483
    store_lex "$n", $P2484
.annotate 'line', 1117
    new $P2532, 'ExceptionHandler'
    set_label $P2532, loop2531_handler
    $P2532."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P2532
  loop2531_test:
    find_lex $P2485, "$i"
    set $N2486, $P2485
    find_lex $P2487, "$n"
    set $N2488, $P2487
    islt $I2489, $N2486, $N2488
    unless $I2489, loop2531_done
  loop2531_redo:
.annotate 'line', 1118
    find_lex $P2491, "$i"
    set $I2492, $P2491
    find_lex $P2493, "$past"
    unless_null $P2493, vivify_790
    $P2493 = root_new ['parrot';'ResizablePMCArray']
  vivify_790:
    set $P2494, $P2493[$I2492]
    unless_null $P2494, vivify_791
    new $P2494, "Undef"
  vivify_791:
    $S2495 = $P2494."name"()
    iseq $I2496, $S2495, "&prefix:<|>"
    unless $I2496, if_2490_end
.annotate 'line', 1119
    find_lex $P2497, "$i"
    set $I2498, $P2497
    find_lex $P2499, "$past"
    unless_null $P2499, vivify_792
    $P2499 = root_new ['parrot';'ResizablePMCArray']
  vivify_792:
    set $P2500, $P2499[$I2498]
    unless_null $P2500, vivify_793
    $P2500 = root_new ['parrot';'ResizablePMCArray']
  vivify_793:
    set $P2501, $P2500[0]
    unless_null $P2501, vivify_794
    new $P2501, "Undef"
  vivify_794:
    find_lex $P2502, "$i"
    set $I2503, $P2502
    find_lex $P2504, "$past"
    unless_null $P2504, vivify_795
    $P2504 = root_new ['parrot';'ResizablePMCArray']
    store_lex "$past", $P2504
  vivify_795:
    set $P2504[$I2503], $P2501
.annotate 'line', 1120
    find_lex $P2505, "$i"
    set $I2506, $P2505
    find_lex $P2507, "$past"
    unless_null $P2507, vivify_796
    $P2507 = root_new ['parrot';'ResizablePMCArray']
  vivify_796:
    set $P2508, $P2507[$I2506]
    unless_null $P2508, vivify_797
    new $P2508, "Undef"
  vivify_797:
    $P2508."flat"(1)
.annotate 'line', 1121
    find_lex $P2512, "$i"
    set $I2513, $P2512
    find_lex $P2514, "$past"
    unless_null $P2514, vivify_798
    $P2514 = root_new ['parrot';'ResizablePMCArray']
  vivify_798:
    set $P2515, $P2514[$I2513]
    unless_null $P2515, vivify_799
    new $P2515, "Undef"
  vivify_799:
    get_hll_global $P2516, ["PAST"], "Val"
    $P2517 = $P2515."isa"($P2516)
    if $P2517, if_2511
    set $P2510, $P2517
    goto if_2511_end
  if_2511:
.annotate 'line', 1122
    find_lex $P2518, "$i"
    set $I2519, $P2518
    find_lex $P2520, "$past"
    unless_null $P2520, vivify_800
    $P2520 = root_new ['parrot';'ResizablePMCArray']
  vivify_800:
    set $P2521, $P2520[$I2519]
    unless_null $P2521, vivify_801
    new $P2521, "Undef"
  vivify_801:
    $S2522 = $P2521."name"()
    substr $S2523, $S2522, 0, 1
    iseq $I2524, $S2523, "%"
    new $P2510, 'Integer'
    set $P2510, $I2524
  if_2511_end:
    unless $P2510, if_2509_end
.annotate 'line', 1123
    find_lex $P2525, "$i"
    set $I2526, $P2525
    find_lex $P2527, "$past"
    unless_null $P2527, vivify_802
    $P2527 = root_new ['parrot';'ResizablePMCArray']
  vivify_802:
    set $P2528, $P2527[$I2526]
    unless_null $P2528, vivify_803
    new $P2528, "Undef"
  vivify_803:
    $P2528."named"(1)
  if_2509_end:
  if_2490_end:
.annotate 'line', 1118
    find_lex $P2529, "$i"
    clone $P2530, $P2529
    inc $P2529
  loop2531_next:
.annotate 'line', 1117
    goto loop2531_test
  loop2531_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P2533, exception, 'type'
    eq $P2533, .CONTROL_LOOP_NEXT, loop2531_next
    eq $P2533, .CONTROL_LOOP_REDO, loop2531_redo
  loop2531_done:
    pop_eh 
.annotate 'line', 1128
    find_lex $P2534, "$/"
    find_lex $P2535, "$past"
    $P2536 = $P2534."!make"($P2535)
.annotate 'line', 1106
    .return ($P2536)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block2447"  :anon :subid("124_1299591508.723") :outer("123_1299591508.723")
.annotate 'line', 1108
    .const 'Sub' $P2469 = "125_1299591508.723" 
    capture_lex $P2469
.annotate 'line', 1109
    new $P2449, "Undef"
    .lex "$expr", $P2449
    find_lex $P2450, "$/"
    unless_null $P2450, vivify_787
    $P2450 = root_new ['parrot';'Hash']
  vivify_787:
    set $P2451, $P2450["EXPR"]
    unless_null $P2451, vivify_788
    new $P2451, "Undef"
  vivify_788:
    $P2452 = $P2451."ast"()
    store_lex "$expr", $P2452
.annotate 'line', 1110
    find_lex $P2457, "$expr"
    $S2458 = $P2457."name"()
    iseq $I2459, $S2458, "&infix:<,>"
    if $I2459, if_2456
    new $P2455, 'Integer'
    set $P2455, $I2459
    goto if_2456_end
  if_2456:
    find_lex $P2460, "$expr"
    $P2461 = $P2460."named"()
    isfalse $I2462, $P2461
    new $P2455, 'Integer'
    set $P2455, $I2462
  if_2456_end:
    if $P2455, if_2454
.annotate 'line', 1113
    find_lex $P2477, "$past"
    find_lex $P2478, "$expr"
    $P2479 = $P2477."push"($P2478)
    set $P2453, $P2479
.annotate 'line', 1110
    goto if_2454_end
  if_2454:
.annotate 'line', 1111
    find_lex $P2464, "$expr"
    $P2465 = $P2464."list"()
    defined $I2466, $P2465
    unless $I2466, for_undef_789
    iter $P2463, $P2465
    new $P2475, 'ExceptionHandler'
    set_label $P2475, loop2474_handler
    $P2475."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P2475
  loop2474_test:
    unless $P2463, loop2474_done
    shift $P2467, $P2463
  loop2474_redo:
    .const 'Sub' $P2469 = "125_1299591508.723" 
    capture_lex $P2469
    $P2469($P2467)
  loop2474_next:
    goto loop2474_test
  loop2474_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P2476, exception, 'type'
    eq $P2476, .CONTROL_LOOP_NEXT, loop2474_next
    eq $P2476, .CONTROL_LOOP_REDO, loop2474_redo
  loop2474_done:
    pop_eh 
  for_undef_789:
.annotate 'line', 1110
    set $P2453, $P2463
  if_2454_end:
.annotate 'line', 1108
    .return ($P2453)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2468"  :anon :subid("125_1299591508.723") :outer("124_1299591508.723")
    .param pmc param_2470
.annotate 'line', 1111
    .lex "$_", param_2470
    find_lex $P2471, "$past"
    find_lex $P2472, "$_"
    $P2473 = $P2471."push"($P2472)
    .return ($P2473)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<multi_declarator>"  :subid("126_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2538
    .param pmc param_2539
.annotate 'line', 1131
    .lex "self", param_2538
    .lex "$/", param_2539
    find_lex $P2540, "$/"
    find_lex $P2541, "$/"
    unless_null $P2541, vivify_804
    $P2541 = root_new ['parrot';'Hash']
  vivify_804:
    set $P2542, $P2541["multi_declarator"]
    unless_null $P2542, vivify_805
    new $P2542, "Undef"
  vivify_805:
    $P2543 = $P2542."ast"()
    $P2544 = $P2540."!make"($P2543)
    .return ($P2544)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<value>"  :subid("127_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2546
    .param pmc param_2547
.annotate 'line', 1133
    .lex "self", param_2546
    .lex "$/", param_2547
    find_lex $P2548, "$/"
    find_lex $P2549, "$/"
    unless_null $P2549, vivify_806
    $P2549 = root_new ['parrot';'Hash']
  vivify_806:
    set $P2550, $P2549["value"]
    unless_null $P2550, vivify_807
    new $P2550, "Undef"
  vivify_807:
    $P2551 = $P2550."ast"()
    $P2552 = $P2548."!make"($P2551)
    .return ($P2552)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<( )>"  :subid("128_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2554
    .param pmc param_2555
.annotate 'line', 1135
    .lex "self", param_2554
    .lex "$/", param_2555
.annotate 'line', 1136
    find_lex $P2556, "$/"
.annotate 'line', 1137
    find_lex $P2559, "$/"
    unless_null $P2559, vivify_808
    $P2559 = root_new ['parrot';'Hash']
  vivify_808:
    set $P2560, $P2559["EXPR"]
    unless_null $P2560, vivify_809
    new $P2560, "Undef"
  vivify_809:
    if $P2560, if_2558
.annotate 'line', 1138
    get_hll_global $P2565, ["PAST"], "Op"
    find_lex $P2566, "$/"
    $P2567 = $P2565."new"("list" :named("pasttype"), $P2566 :named("node"))
    set $P2557, $P2567
.annotate 'line', 1137
    goto if_2558_end
  if_2558:
    find_lex $P2561, "$/"
    unless_null $P2561, vivify_810
    $P2561 = root_new ['parrot';'Hash']
  vivify_810:
    set $P2562, $P2561["EXPR"]
    unless_null $P2562, vivify_811
    $P2562 = root_new ['parrot';'ResizablePMCArray']
  vivify_811:
    set $P2563, $P2562[0]
    unless_null $P2563, vivify_812
    new $P2563, "Undef"
  vivify_812:
    $P2564 = $P2563."ast"()
    set $P2557, $P2564
  if_2558_end:
    $P2568 = $P2556."!make"($P2557)
.annotate 'line', 1135
    .return ($P2568)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<[ ]>"  :subid("129_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2570
    .param pmc param_2571
.annotate 'line', 1141
    .lex "self", param_2570
    .lex "$/", param_2571
.annotate 'line', 1142
    new $P2572, "Undef"
    .lex "$past", $P2572
.annotate 'line', 1141
    find_lex $P2573, "$past"
.annotate 'line', 1143
    find_lex $P2575, "$/"
    unless_null $P2575, vivify_813
    $P2575 = root_new ['parrot';'Hash']
  vivify_813:
    set $P2576, $P2575["EXPR"]
    unless_null $P2576, vivify_814
    new $P2576, "Undef"
  vivify_814:
    if $P2576, if_2574
.annotate 'line', 1150
    get_hll_global $P2588, ["PAST"], "Op"
    $P2589 = $P2588."new"("list" :named("pasttype"))
    store_lex "$past", $P2589
.annotate 'line', 1149
    goto if_2574_end
  if_2574:
.annotate 'line', 1144
    find_lex $P2577, "$/"
    unless_null $P2577, vivify_815
    $P2577 = root_new ['parrot';'Hash']
  vivify_815:
    set $P2578, $P2577["EXPR"]
    unless_null $P2578, vivify_816
    $P2578 = root_new ['parrot';'ResizablePMCArray']
  vivify_816:
    set $P2579, $P2578[0]
    unless_null $P2579, vivify_817
    new $P2579, "Undef"
  vivify_817:
    $P2580 = $P2579."ast"()
    store_lex "$past", $P2580
.annotate 'line', 1145
    find_lex $P2582, "$past"
    $S2583 = $P2582."name"()
    isne $I2584, $S2583, "&infix:<,>"
    unless $I2584, if_2581_end
.annotate 'line', 1146
    get_hll_global $P2585, ["PAST"], "Op"
    find_lex $P2586, "$past"
    $P2587 = $P2585."new"($P2586, "list" :named("pasttype"))
    store_lex "$past", $P2587
  if_2581_end:
  if_2574_end:
.annotate 'line', 1152
    find_lex $P2590, "$past"
    $P2590."name"("&circumfix:<[ ]>")
.annotate 'line', 1153
    find_lex $P2591, "$/"
    find_lex $P2592, "$past"
    $P2593 = $P2591."!make"($P2592)
.annotate 'line', 1141
    .return ($P2593)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<ang>"  :subid("130_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2595
    .param pmc param_2596
.annotate 'line', 1156
    .lex "self", param_2595
    .lex "$/", param_2596
    find_lex $P2597, "$/"
    find_lex $P2598, "$/"
    unless_null $P2598, vivify_818
    $P2598 = root_new ['parrot';'Hash']
  vivify_818:
    set $P2599, $P2598["quote_EXPR"]
    unless_null $P2599, vivify_819
    new $P2599, "Undef"
  vivify_819:
    $P2600 = $P2599."ast"()
    $P2601 = $P2597."!make"($P2600)
    .return ($P2601)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub unicode:"circumfix:sym<\x{ab} \x{bb}>"  :subid("131_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2603
    .param pmc param_2604
.annotate 'line', 1157
    .lex "self", param_2603
    .lex "$/", param_2604
    find_lex $P2605, "$/"
    find_lex $P2606, "$/"
    unless_null $P2606, vivify_820
    $P2606 = root_new ['parrot';'Hash']
  vivify_820:
    set $P2607, $P2606["quote_EXPR"]
    unless_null $P2607, vivify_821
    new $P2607, "Undef"
  vivify_821:
    $P2608 = $P2607."ast"()
    $P2609 = $P2605."!make"($P2608)
    .return ($P2609)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<{ }>"  :subid("132_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2611
    .param pmc param_2612
.annotate 'line', 1159
    .const 'Sub' $P2623 = "133_1299591508.723" 
    capture_lex $P2623
    .lex "self", param_2611
    .lex "$/", param_2612
.annotate 'line', 1160
    find_lex $P2615, "$/"
    unless_null $P2615, vivify_822
    $P2615 = root_new ['parrot';'Hash']
  vivify_822:
    set $P2616, $P2615["pblock"]
    unless_null $P2616, vivify_823
    $P2616 = root_new ['parrot';'Hash']
  vivify_823:
    set $P2617, $P2616["blockoid"]
    unless_null $P2617, vivify_824
    $P2617 = root_new ['parrot';'Hash']
  vivify_824:
    set $P2618, $P2617["statementlist"]
    unless_null $P2618, vivify_825
    $P2618 = root_new ['parrot';'Hash']
  vivify_825:
    set $P2619, $P2618["statement"]
    unless_null $P2619, vivify_826
    new $P2619, "Undef"
  vivify_826:
    set $N2620, $P2619
    isgt $I2621, $N2620, 0.0
    if $I2621, if_2614
.annotate 'line', 1165
    find_lex $P2636, "$/"
    unless_null $P2636, vivify_827
    $P2636 = root_new ['parrot';'Hash']
  vivify_827:
    set $P2637, $P2636["pblock"]
    unless_null $P2637, vivify_828
    $P2637 = root_new ['parrot';'Hash']
  vivify_828:
    set $P2638, $P2637["blockoid"]
    unless_null $P2638, vivify_829
    $P2638 = root_new ['parrot';'Hash']
  vivify_829:
    set $P2639, $P2638["you_are_here"]
    unless_null $P2639, vivify_830
    new $P2639, "Undef"
  vivify_830:
    if $P2639, if_2635
.annotate 'line', 1169
    find_lex $P2645, "$/"
    $P2646 = "vivitype"("%")
    $P2647 = $P2645."!make"($P2646)
.annotate 'line', 1168
    set $P2634, $P2647
.annotate 'line', 1165
    goto if_2635_end
  if_2635:
.annotate 'line', 1166
    find_lex $P2640, "$/"
    find_lex $P2641, "$/"
    unless_null $P2641, vivify_831
    $P2641 = root_new ['parrot';'Hash']
  vivify_831:
    set $P2642, $P2641["pblock"]
    unless_null $P2642, vivify_832
    new $P2642, "Undef"
  vivify_832:
    $P2643 = $P2642."ast"()
    $P2644 = $P2640."!make"($P2643)
.annotate 'line', 1165
    set $P2634, $P2644
  if_2635_end:
    set $P2613, $P2634
.annotate 'line', 1160
    goto if_2614_end
  if_2614:
    .const 'Sub' $P2623 = "133_1299591508.723" 
    capture_lex $P2623
    $P2633 = $P2623()
    set $P2613, $P2633
  if_2614_end:
.annotate 'line', 1159
    .return ($P2613)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2622"  :anon :subid("133_1299591508.723") :outer("132_1299591508.723")
.annotate 'line', 1161
    new $P2624, "Undef"
    .lex "$past", $P2624
    find_lex $P2625, "$/"
    unless_null $P2625, vivify_833
    $P2625 = root_new ['parrot';'Hash']
  vivify_833:
    set $P2626, $P2625["pblock"]
    unless_null $P2626, vivify_834
    new $P2626, "Undef"
  vivify_834:
    $P2627 = $P2626."ast"()
    store_lex "$past", $P2627
.annotate 'line', 1162
    new $P2628, "Integer"
    assign $P2628, 1
    find_lex $P2629, "$past"
    unless_null $P2629, vivify_835
    $P2629 = root_new ['parrot';'Hash']
    store_lex "$past", $P2629
  vivify_835:
    set $P2629["bareblock"], $P2628
.annotate 'line', 1163
    find_dynamic_lex $P2630, "$/"
    find_lex $P2631, "$past"
    $P2632 = $P2630."!make"($P2631)
.annotate 'line', 1160
    .return ($P2632)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<sigil>"  :subid("134_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2649
    .param pmc param_2650
.annotate 'line', 1173
    .lex "self", param_2649
    .lex "$/", param_2650
.annotate 'line', 1174
    new $P2651, "Undef"
    .lex "$name", $P2651
    find_lex $P2654, "$/"
    unless_null $P2654, vivify_836
    $P2654 = root_new ['parrot';'Hash']
  vivify_836:
    set $P2655, $P2654["sigil"]
    unless_null $P2655, vivify_837
    new $P2655, "Undef"
  vivify_837:
    set $S2656, $P2655
    iseq $I2657, $S2656, "@"
    if $I2657, if_2653
.annotate 'line', 1175
    find_lex $P2661, "$/"
    unless_null $P2661, vivify_838
    $P2661 = root_new ['parrot';'Hash']
  vivify_838:
    set $P2662, $P2661["sigil"]
    unless_null $P2662, vivify_839
    new $P2662, "Undef"
  vivify_839:
    set $S2663, $P2662
    iseq $I2664, $S2663, "%"
    if $I2664, if_2660
    new $P2666, "String"
    assign $P2666, "item"
    set $P2659, $P2666
    goto if_2660_end
  if_2660:
    new $P2665, "String"
    assign $P2665, "hash"
    set $P2659, $P2665
  if_2660_end:
    set $P2652, $P2659
.annotate 'line', 1174
    goto if_2653_end
  if_2653:
    new $P2658, "String"
    assign $P2658, "list"
    set $P2652, $P2658
  if_2653_end:
    store_lex "$name", $P2652
.annotate 'line', 1177
    find_lex $P2667, "$/"
    get_hll_global $P2668, ["PAST"], "Op"
    find_lex $P2669, "$name"
    find_lex $P2670, "$/"
    unless_null $P2670, vivify_840
    $P2670 = root_new ['parrot';'Hash']
  vivify_840:
    set $P2671, $P2670["semilist"]
    unless_null $P2671, vivify_841
    new $P2671, "Undef"
  vivify_841:
    $P2672 = $P2671."ast"()
    $P2673 = $P2668."new"($P2672, "callmethod" :named("pasttype"), $P2669 :named("name"))
    $P2674 = $P2667."!make"($P2673)
.annotate 'line', 1173
    .return ($P2674)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "semilist"  :subid("135_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2676
    .param pmc param_2677
.annotate 'line', 1180
    .lex "self", param_2676
    .lex "$/", param_2677
    find_lex $P2678, "$/"
    find_lex $P2679, "$/"
    unless_null $P2679, vivify_842
    $P2679 = root_new ['parrot';'Hash']
  vivify_842:
    set $P2680, $P2679["statement"]
    unless_null $P2680, vivify_843
    new $P2680, "Undef"
  vivify_843:
    $P2681 = $P2680."ast"()
    $P2682 = $P2678."!make"($P2681)
    .return ($P2682)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<[ ]>"  :subid("136_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2684
    .param pmc param_2685
.annotate 'line', 1182
    .lex "self", param_2684
    .lex "$/", param_2685
.annotate 'line', 1183
    find_lex $P2686, "$/"
    get_hll_global $P2687, ["PAST"], "Var"
    find_lex $P2688, "$/"
    unless_null $P2688, vivify_844
    $P2688 = root_new ['parrot';'Hash']
  vivify_844:
    set $P2689, $P2688["EXPR"]
    unless_null $P2689, vivify_845
    new $P2689, "Undef"
  vivify_845:
    $P2690 = $P2689."ast"()
.annotate 'line', 1185
    $P2691 = "vivitype"("@")
    $P2692 = $P2687."new"($P2690, "keyed_int" :named("scope"), "Undef" :named("viviself"), $P2691 :named("vivibase"))
.annotate 'line', 1183
    $P2693 = $P2686."!make"($P2692)
.annotate 'line', 1182
    .return ($P2693)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<{ }>"  :subid("137_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2695
    .param pmc param_2696
.annotate 'line', 1188
    .lex "self", param_2695
    .lex "$/", param_2696
.annotate 'line', 1189
    find_lex $P2697, "$/"
    get_hll_global $P2698, ["PAST"], "Var"
    find_lex $P2699, "$/"
    unless_null $P2699, vivify_846
    $P2699 = root_new ['parrot';'Hash']
  vivify_846:
    set $P2700, $P2699["EXPR"]
    unless_null $P2700, vivify_847
    new $P2700, "Undef"
  vivify_847:
    $P2701 = $P2700."ast"()
.annotate 'line', 1191
    $P2702 = "vivitype"("%")
    $P2703 = $P2698."new"($P2701, "keyed" :named("scope"), "Undef" :named("viviself"), $P2702 :named("vivibase"))
.annotate 'line', 1189
    $P2704 = $P2697."!make"($P2703)
.annotate 'line', 1188
    .return ($P2704)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<ang>"  :subid("138_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2706
    .param pmc param_2707
.annotate 'line', 1194
    .lex "self", param_2706
    .lex "$/", param_2707
.annotate 'line', 1195
    find_lex $P2708, "$/"
    get_hll_global $P2709, ["PAST"], "Var"
    find_lex $P2710, "$/"
    unless_null $P2710, vivify_848
    $P2710 = root_new ['parrot';'Hash']
  vivify_848:
    set $P2711, $P2710["quote_EXPR"]
    unless_null $P2711, vivify_849
    new $P2711, "Undef"
  vivify_849:
    $P2712 = $P2711."ast"()
.annotate 'line', 1197
    $P2713 = "vivitype"("%")
    $P2714 = $P2709."new"($P2712, "keyed" :named("scope"), "Undef" :named("viviself"), $P2713 :named("vivibase"))
.annotate 'line', 1195
    $P2715 = $P2708."!make"($P2714)
.annotate 'line', 1194
    .return ($P2715)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<( )>"  :subid("139_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2717
    .param pmc param_2718
.annotate 'line', 1200
    .lex "self", param_2717
    .lex "$/", param_2718
.annotate 'line', 1201
    find_lex $P2719, "$/"
    find_lex $P2720, "$/"
    unless_null $P2720, vivify_850
    $P2720 = root_new ['parrot';'Hash']
  vivify_850:
    set $P2721, $P2720["arglist"]
    unless_null $P2721, vivify_851
    new $P2721, "Undef"
  vivify_851:
    $P2722 = $P2721."ast"()
    $P2723 = $P2719."!make"($P2722)
.annotate 'line', 1200
    .return ($P2723)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "value"  :subid("140_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2725
    .param pmc param_2726
.annotate 'line', 1204
    .lex "self", param_2725
    .lex "$/", param_2726
.annotate 'line', 1205
    find_lex $P2727, "$/"
    find_lex $P2730, "$/"
    unless_null $P2730, vivify_852
    $P2730 = root_new ['parrot';'Hash']
  vivify_852:
    set $P2731, $P2730["quote"]
    unless_null $P2731, vivify_853
    new $P2731, "Undef"
  vivify_853:
    if $P2731, if_2729
    find_lex $P2735, "$/"
    unless_null $P2735, vivify_854
    $P2735 = root_new ['parrot';'Hash']
  vivify_854:
    set $P2736, $P2735["number"]
    unless_null $P2736, vivify_855
    new $P2736, "Undef"
  vivify_855:
    $P2737 = $P2736."ast"()
    set $P2728, $P2737
    goto if_2729_end
  if_2729:
    find_lex $P2732, "$/"
    unless_null $P2732, vivify_856
    $P2732 = root_new ['parrot';'Hash']
  vivify_856:
    set $P2733, $P2732["quote"]
    unless_null $P2733, vivify_857
    new $P2733, "Undef"
  vivify_857:
    $P2734 = $P2733."ast"()
    set $P2728, $P2734
  if_2729_end:
    $P2738 = $P2727."!make"($P2728)
.annotate 'line', 1204
    .return ($P2738)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "number"  :subid("141_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2740
    .param pmc param_2741
.annotate 'line', 1208
    .lex "self", param_2740
    .lex "$/", param_2741
.annotate 'line', 1209
    new $P2742, "Undef"
    .lex "$value", $P2742
    find_lex $P2745, "$/"
    unless_null $P2745, vivify_858
    $P2745 = root_new ['parrot';'Hash']
  vivify_858:
    set $P2746, $P2745["dec_number"]
    unless_null $P2746, vivify_859
    new $P2746, "Undef"
  vivify_859:
    if $P2746, if_2744
    find_lex $P2750, "$/"
    unless_null $P2750, vivify_860
    $P2750 = root_new ['parrot';'Hash']
  vivify_860:
    set $P2751, $P2750["integer"]
    unless_null $P2751, vivify_861
    new $P2751, "Undef"
  vivify_861:
    $P2752 = $P2751."ast"()
    set $P2743, $P2752
    goto if_2744_end
  if_2744:
    find_lex $P2747, "$/"
    unless_null $P2747, vivify_862
    $P2747 = root_new ['parrot';'Hash']
  vivify_862:
    set $P2748, $P2747["dec_number"]
    unless_null $P2748, vivify_863
    new $P2748, "Undef"
  vivify_863:
    $P2749 = $P2748."ast"()
    set $P2743, $P2749
  if_2744_end:
    store_lex "$value", $P2743
.annotate 'line', 1210
    find_lex $P2754, "$/"
    unless_null $P2754, vivify_864
    $P2754 = root_new ['parrot';'Hash']
  vivify_864:
    set $P2755, $P2754["sign"]
    unless_null $P2755, vivify_865
    new $P2755, "Undef"
  vivify_865:
    set $S2756, $P2755
    iseq $I2757, $S2756, "-"
    unless $I2757, if_2753_end
    find_lex $P2758, "$value"
    neg $P2759, $P2758
    store_lex "$value", $P2759
  if_2753_end:
.annotate 'line', 1211
    find_lex $P2760, "$/"
    get_hll_global $P2761, ["PAST"], "Val"
    find_lex $P2762, "$value"
    $P2763 = $P2761."new"($P2762 :named("value"))
    $P2764 = $P2760."!make"($P2763)
.annotate 'line', 1208
    .return ($P2764)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<apos>"  :subid("142_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2766
    .param pmc param_2767
.annotate 'line', 1214
    .lex "self", param_2766
    .lex "$/", param_2767
    find_lex $P2768, "$/"
    find_lex $P2769, "$/"
    unless_null $P2769, vivify_866
    $P2769 = root_new ['parrot';'Hash']
  vivify_866:
    set $P2770, $P2769["quote_EXPR"]
    unless_null $P2770, vivify_867
    new $P2770, "Undef"
  vivify_867:
    $P2771 = $P2770."ast"()
    $P2772 = $P2768."!make"($P2771)
    .return ($P2772)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<dblq>"  :subid("143_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2774
    .param pmc param_2775
.annotate 'line', 1215
    .lex "self", param_2774
    .lex "$/", param_2775
    find_lex $P2776, "$/"
    find_lex $P2777, "$/"
    unless_null $P2777, vivify_868
    $P2777 = root_new ['parrot';'Hash']
  vivify_868:
    set $P2778, $P2777["quote_EXPR"]
    unless_null $P2778, vivify_869
    new $P2778, "Undef"
  vivify_869:
    $P2779 = $P2778."ast"()
    $P2780 = $P2776."!make"($P2779)
    .return ($P2780)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<qq>"  :subid("144_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2782
    .param pmc param_2783
.annotate 'line', 1216
    .lex "self", param_2782
    .lex "$/", param_2783
    find_lex $P2784, "$/"
    find_lex $P2785, "$/"
    unless_null $P2785, vivify_870
    $P2785 = root_new ['parrot';'Hash']
  vivify_870:
    set $P2786, $P2785["quote_EXPR"]
    unless_null $P2786, vivify_871
    new $P2786, "Undef"
  vivify_871:
    $P2787 = $P2786."ast"()
    $P2788 = $P2784."!make"($P2787)
    .return ($P2788)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<q>"  :subid("145_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2790
    .param pmc param_2791
.annotate 'line', 1217
    .lex "self", param_2790
    .lex "$/", param_2791
    find_lex $P2792, "$/"
    find_lex $P2793, "$/"
    unless_null $P2793, vivify_872
    $P2793 = root_new ['parrot';'Hash']
  vivify_872:
    set $P2794, $P2793["quote_EXPR"]
    unless_null $P2794, vivify_873
    new $P2794, "Undef"
  vivify_873:
    $P2795 = $P2794."ast"()
    $P2796 = $P2792."!make"($P2795)
    .return ($P2796)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<Q>"  :subid("146_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2798
    .param pmc param_2799
.annotate 'line', 1218
    .lex "self", param_2798
    .lex "$/", param_2799
    find_lex $P2800, "$/"
    find_lex $P2801, "$/"
    unless_null $P2801, vivify_874
    $P2801 = root_new ['parrot';'Hash']
  vivify_874:
    set $P2802, $P2801["quote_EXPR"]
    unless_null $P2802, vivify_875
    new $P2802, "Undef"
  vivify_875:
    $P2803 = $P2802."ast"()
    $P2804 = $P2800."!make"($P2803)
    .return ($P2804)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<Q:PIR>"  :subid("147_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2806
    .param pmc param_2807
.annotate 'line', 1219
    .lex "self", param_2806
    .lex "$/", param_2807
.annotate 'line', 1220
    find_lex $P2808, "$/"
    get_hll_global $P2809, ["PAST"], "Op"
    find_lex $P2810, "$/"
    unless_null $P2810, vivify_876
    $P2810 = root_new ['parrot';'Hash']
  vivify_876:
    set $P2811, $P2810["quote_EXPR"]
    unless_null $P2811, vivify_877
    new $P2811, "Undef"
  vivify_877:
    $P2812 = $P2811."ast"()
    $P2813 = $P2812."value"()
    find_lex $P2814, "$/"
    $P2815 = $P2809."new"($P2813 :named("inline"), "inline" :named("pasttype"), $P2814 :named("node"))
    $P2816 = $P2808."!make"($P2815)
.annotate 'line', 1219
    .return ($P2816)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "quote:sym</ />"  :subid("148_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2820
    .param pmc param_2821
    .param pmc param_2822 :optional
    .param int has_param_2822 :opt_flag
.annotate 'line', 1225
    new $P2819, ['ExceptionHandler'], .CONTROL_RETURN
    set_label $P2819, control_2818
    push_eh $P2819
    .lex "self", param_2820
    .lex "$/", param_2821
    if has_param_2822, optparam_878
    new $P2823, "Undef"
    set param_2822, $P2823
  optparam_878:
    .lex "$key", param_2822
.annotate 'line', 1235
    new $P2824, "Undef"
    .lex "$regex", $P2824
.annotate 'line', 1237
    new $P2825, "Undef"
    .lex "$past", $P2825
.annotate 'line', 1226
    find_lex $P2827, "$key"
    set $S2828, $P2827
    iseq $I2829, $S2828, "open"
    unless $I2829, if_2826_end
.annotate 'line', 1227

            null $P0
            set_hll_global ['Regex';'P6Regex';'Actions'], '$REGEXNAME', $P0
        
.annotate 'line', 1231
    get_global $P2830, "@BLOCK"
    unless_null $P2830, vivify_879
    $P2830 = root_new ['parrot';'ResizablePMCArray']
  vivify_879:
    set $P2831, $P2830[0]
    unless_null $P2831, vivify_880
    new $P2831, "Undef"
  vivify_880:
    $P2831."symbol"(unicode:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 1232
    get_global $P2832, "@BLOCK"
    unless_null $P2832, vivify_881
    $P2832 = root_new ['parrot';'ResizablePMCArray']
  vivify_881:
    set $P2833, $P2832[0]
    unless_null $P2833, vivify_882
    new $P2833, "Undef"
  vivify_882:
    $P2833."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 1233
    new $P2834, "Exception"
    set $P2834['type'], .CONTROL_RETURN
    new $P2835, "Integer"
    assign $P2835, 0
    setattribute $P2834, 'payload', $P2835
    throw $P2834
  if_2826_end:
.annotate 'line', 1236
    get_hll_global $P2836, ["Regex";"P6Regex";"Actions"], "buildsub"
    find_lex $P2837, "$/"
    unless_null $P2837, vivify_883
    $P2837 = root_new ['parrot';'Hash']
  vivify_883:
    set $P2838, $P2837["p6regex"]
    unless_null $P2838, vivify_884
    new $P2838, "Undef"
  vivify_884:
    $P2839 = $P2838."ast"()
    get_global $P2840, "@BLOCK"
    $P2841 = $P2840."shift"()
    $P2842 = $P2836($P2839, $P2841)
    store_lex "$regex", $P2842
.annotate 'line', 1238
    get_hll_global $P2843, ["PAST"], "Op"
.annotate 'line', 1240
    get_hll_global $P2844, ["PAST"], "Var"
    new $P2845, "ResizablePMCArray"
    push $P2845, "Regex"
    $P2846 = $P2844."new"("Regex" :named("name"), $P2845 :named("namespace"), "package" :named("scope"))
    find_lex $P2847, "$regex"
    $P2848 = $P2843."new"($P2846, $P2847, "callmethod" :named("pasttype"), "new" :named("name"))
.annotate 'line', 1238
    store_lex "$past", $P2848
.annotate 'line', 1244
    find_lex $P2849, "$regex"
    find_lex $P2850, "$past"
    unless_null $P2850, vivify_885
    $P2850 = root_new ['parrot';'Hash']
    store_lex "$past", $P2850
  vivify_885:
    set $P2850["sink"], $P2849
.annotate 'line', 1245
    find_lex $P2851, "$/"
    find_lex $P2852, "$past"
    $P2853 = $P2851."!make"($P2852)
.annotate 'line', 1225
    .return ($P2853)
  control_2818:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P2854, exception, "payload"
    .return ($P2854)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote_escape:sym<$>"  :subid("149_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2856
    .param pmc param_2857
.annotate 'line', 1248
    .lex "self", param_2856
    .lex "$/", param_2857
    find_lex $P2858, "$/"
    find_lex $P2859, "$/"
    unless_null $P2859, vivify_886
    $P2859 = root_new ['parrot';'Hash']
  vivify_886:
    set $P2860, $P2859["variable"]
    unless_null $P2860, vivify_887
    new $P2860, "Undef"
  vivify_887:
    $P2861 = $P2860."ast"()
    $P2862 = $P2858."!make"($P2861)
    .return ($P2862)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote_escape:sym<{ }>"  :subid("150_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2864
    .param pmc param_2865
.annotate 'line', 1249
    .lex "self", param_2864
    .lex "$/", param_2865
.annotate 'line', 1250
    find_lex $P2866, "$/"
    get_hll_global $P2867, ["PAST"], "Op"
.annotate 'line', 1251
    find_lex $P2868, "$/"
    unless_null $P2868, vivify_888
    $P2868 = root_new ['parrot';'Hash']
  vivify_888:
    set $P2869, $P2868["block"]
    unless_null $P2869, vivify_889
    new $P2869, "Undef"
  vivify_889:
    $P2870 = $P2869."ast"()
    $P2871 = "block_immediate"($P2870)
    find_lex $P2872, "$/"
    $P2873 = $P2867."new"($P2871, "set S*" :named("pirop"), $P2872 :named("node"))
.annotate 'line', 1250
    $P2874 = $P2866."!make"($P2873)
.annotate 'line', 1249
    .return ($P2874)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote_escape:sym<esc>"  :subid("151_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2876
    .param pmc param_2877
.annotate 'line', 1254
    .lex "self", param_2876
    .lex "$/", param_2877
    find_lex $P2878, "$/"
    $P2879 = $P2878."!make"("\e")
    .return ($P2879)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postfix:sym<.>"  :subid("152_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2881
    .param pmc param_2882
.annotate 'line', 1258
    .lex "self", param_2881
    .lex "$/", param_2882
    find_lex $P2883, "$/"
    find_lex $P2884, "$/"
    unless_null $P2884, vivify_890
    $P2884 = root_new ['parrot';'Hash']
  vivify_890:
    set $P2885, $P2884["dotty"]
    unless_null $P2885, vivify_891
    new $P2885, "Undef"
  vivify_891:
    $P2886 = $P2885."ast"()
    $P2887 = $P2883."!make"($P2886)
    .return ($P2887)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postfix:sym<++>"  :subid("153_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2889
    .param pmc param_2890
.annotate 'line', 1260
    .lex "self", param_2889
    .lex "$/", param_2890
.annotate 'line', 1261
    find_lex $P2891, "$/"
    get_hll_global $P2892, ["PAST"], "Op"
.annotate 'line', 1262
    new $P2893, "ResizablePMCArray"
    push $P2893, "    clone %r, %0"
    push $P2893, "    inc %0"
    $P2894 = $P2892."new"("postfix:<++>" :named("name"), $P2893 :named("inline"), "inline" :named("pasttype"))
.annotate 'line', 1261
    $P2895 = $P2891."!make"($P2894)
.annotate 'line', 1260
    .return ($P2895)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postfix:sym<-->"  :subid("154_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2897
    .param pmc param_2898
.annotate 'line', 1266
    .lex "self", param_2897
    .lex "$/", param_2898
.annotate 'line', 1267
    find_lex $P2899, "$/"
    get_hll_global $P2900, ["PAST"], "Op"
.annotate 'line', 1268
    new $P2901, "ResizablePMCArray"
    push $P2901, "    clone %r, %0"
    push $P2901, "    dec %0"
    $P2902 = $P2900."new"("postfix:<-->" :named("name"), $P2901 :named("inline"), "inline" :named("pasttype"))
.annotate 'line', 1267
    $P2903 = $P2899."!make"($P2902)
.annotate 'line', 1266
    .return ($P2903)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "prefix:sym<make>"  :subid("155_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2905
    .param pmc param_2906
.annotate 'line', 1272
    .lex "self", param_2905
    .lex "$/", param_2906
.annotate 'line', 1273
    find_lex $P2907, "$/"
    get_hll_global $P2908, ["PAST"], "Op"
.annotate 'line', 1274
    get_hll_global $P2909, ["PAST"], "Var"
    $P2910 = $P2909."new"("$/" :named("name"), "contextual" :named("scope"))
    find_lex $P2911, "$/"
    $P2912 = $P2908."new"($P2910, "callmethod" :named("pasttype"), "!make" :named("name"), $P2911 :named("node"))
.annotate 'line', 1273
    $P2913 = $P2907."!make"($P2912)
.annotate 'line', 1272
    .return ($P2913)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<next>"  :subid("156_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2916
    .param pmc param_2917
.annotate 'line', 1290
    .lex "self", param_2916
    .lex "$/", param_2917
    find_lex $P2918, "$/"
    $P2919 = "control"($P2918, "CONTROL_LOOP_NEXT")
    .return ($P2919)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<last>"  :subid("157_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2921
    .param pmc param_2922
.annotate 'line', 1291
    .lex "self", param_2921
    .lex "$/", param_2922
    find_lex $P2923, "$/"
    $P2924 = "control"($P2923, "CONTROL_LOOP_LAST")
    .return ($P2924)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<redo>"  :subid("158_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2926
    .param pmc param_2927
.annotate 'line', 1292
    .lex "self", param_2926
    .lex "$/", param_2927
    find_lex $P2928, "$/"
    $P2929 = "control"($P2928, "CONTROL_LOOP_REDO")
    .return ($P2929)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "infix:sym<~~>"  :subid("159_1299591508.723") :outer("11_1299591508.723")
    .param pmc param_2931
    .param pmc param_2932
.annotate 'line', 1294
    .lex "self", param_2931
    .lex "$/", param_2932
.annotate 'line', 1295
    find_lex $P2933, "$/"
    get_hll_global $P2934, ["PAST"], "Op"
    find_lex $P2935, "$/"
    $P2936 = $P2934."new"("callmethod" :named("pasttype"), "ACCEPTS" :named("name"), $P2935 :named("node"))
    $P2937 = $P2933."!make"($P2936)
.annotate 'line', 1294
    .return ($P2937)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "_block2938"  :subid("160_1299591508.723") :outer("11_1299591508.723")
.annotate 'line', 1299
    .const 'Sub' $P3038 = "168_1299591508.723" 
    capture_lex $P3038
    .const 'Sub' $P3013 = "167_1299591508.723" 
    capture_lex $P3013
    .const 'Sub' $P3002 = "166_1299591508.723" 
    capture_lex $P3002
    .const 'Sub' $P2987 = "165_1299591508.723" 
    capture_lex $P2987
    .const 'Sub' $P2976 = "164_1299591508.723" 
    capture_lex $P2976
    .const 'Sub' $P2965 = "163_1299591508.723" 
    capture_lex $P2965
    .const 'Sub' $P2954 = "162_1299591508.723" 
    capture_lex $P2954
    .const 'Sub' $P2941 = "161_1299591508.723" 
    capture_lex $P2941
    get_global $P2940, "$?CLASS"
.annotate 'line', 1333
    .const 'Sub' $P3013 = "167_1299591508.723" 
    newclosure $P3036, $P3013
.annotate 'line', 1299
    .return ($P3036)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "" :load :init :subid("post892") :outer("160_1299591508.723")
.annotate 'line', 1299
    get_hll_global $P2939, ["NQP";"RegexActions"], "_block2938" 
    .local pmc block
    set block, $P2939
    .const 'Sub' $P3038 = "168_1299591508.723" 
    capture_lex $P3038
    $P3038()
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "_block3037"  :anon :subid("168_1299591508.723") :outer("160_1299591508.723")
.annotate 'line', 1299
    get_hll_global $P3039, "NQPClassHOW"
    $P3040 = $P3039."new_type"("RegexActions" :named("name"))
    .local pmc type_obj
    set type_obj, $P3040
    set_hll_global ["NQP"], "RegexActions", type_obj
    set_global "$?CLASS", type_obj
    get_how $P3041, type_obj
    .const 'Sub' $P3042 = "161_1299591508.723" 
    $P3041."add_method"(type_obj, "metachar:sym<:my>", $P3042)
    get_how $P3043, type_obj
    .const 'Sub' $P3044 = "162_1299591508.723" 
    $P3043."add_method"(type_obj, "metachar:sym<{ }>", $P3044)
    get_how $P3045, type_obj
    .const 'Sub' $P3046 = "163_1299591508.723" 
    $P3045."add_method"(type_obj, "metachar:sym<nqpvar>", $P3046)
    get_how $P3047, type_obj
    .const 'Sub' $P3048 = "164_1299591508.723" 
    $P3047."add_method"(type_obj, "assertion:sym<{ }>", $P3048)
    get_how $P3049, type_obj
    .const 'Sub' $P3050 = "165_1299591508.723" 
    $P3049."add_method"(type_obj, "assertion:sym<?{ }>", $P3050)
    get_how $P3051, type_obj
    .const 'Sub' $P3052 = "166_1299591508.723" 
    $P3051."add_method"(type_obj, "assertion:sym<var>", $P3052)
    get_how $P3053, type_obj
    .const 'Sub' $P3054 = "167_1299591508.723" 
    $P3053."add_method"(type_obj, "codeblock", $P3054)
    get_how $P3055, type_obj
    get_hll_global $P3056, ["Regex";"P6Regex"], "Actions"
    $P3055."add_parent"(type_obj, $P3056)
    get_how $P3057, type_obj
    $P3058 = $P3057."compose"(type_obj)
    .return ($P3058)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "metachar:sym<:my>"  :subid("161_1299591508.723") :outer("160_1299591508.723")
    .param pmc param_2942
    .param pmc param_2943
.annotate 'line', 1301
    .lex "self", param_2942
    .lex "$/", param_2943
.annotate 'line', 1302
    new $P2944, "Undef"
    .lex "$past", $P2944
    find_lex $P2945, "$/"
    unless_null $P2945, vivify_893
    $P2945 = root_new ['parrot';'Hash']
  vivify_893:
    set $P2946, $P2945["statement"]
    unless_null $P2946, vivify_894
    new $P2946, "Undef"
  vivify_894:
    $P2947 = $P2946."ast"()
    store_lex "$past", $P2947
.annotate 'line', 1303
    find_lex $P2948, "$/"
    get_hll_global $P2949, ["PAST"], "Regex"
    find_lex $P2950, "$past"
    find_lex $P2951, "$/"
    $P2952 = $P2949."new"($P2950, "pastnode" :named("pasttype"), "declarative" :named("subtype"), $P2951 :named("node"))
    $P2953 = $P2948."!make"($P2952)
.annotate 'line', 1301
    .return ($P2953)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "metachar:sym<{ }>"  :subid("162_1299591508.723") :outer("160_1299591508.723")
    .param pmc param_2955
    .param pmc param_2956
.annotate 'line', 1307
    .lex "self", param_2955
    .lex "$/", param_2956
.annotate 'line', 1308
    find_lex $P2957, "$/"
    get_hll_global $P2958, ["PAST"], "Regex"
    find_lex $P2959, "$/"
    unless_null $P2959, vivify_895
    $P2959 = root_new ['parrot';'Hash']
  vivify_895:
    set $P2960, $P2959["codeblock"]
    unless_null $P2960, vivify_896
    new $P2960, "Undef"
  vivify_896:
    $P2961 = $P2960."ast"()
    find_lex $P2962, "$/"
    $P2963 = $P2958."new"($P2961, "pastnode" :named("pasttype"), $P2962 :named("node"))
    $P2964 = $P2957."!make"($P2963)
.annotate 'line', 1307
    .return ($P2964)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "metachar:sym<nqpvar>"  :subid("163_1299591508.723") :outer("160_1299591508.723")
    .param pmc param_2966
    .param pmc param_2967
.annotate 'line', 1312
    .lex "self", param_2966
    .lex "$/", param_2967
.annotate 'line', 1313
    find_lex $P2968, "$/"
    get_hll_global $P2969, ["PAST"], "Regex"
    find_lex $P2970, "$/"
    unless_null $P2970, vivify_897
    $P2970 = root_new ['parrot';'Hash']
  vivify_897:
    set $P2971, $P2970["var"]
    unless_null $P2971, vivify_898
    new $P2971, "Undef"
  vivify_898:
    $P2972 = $P2971."ast"()
    find_lex $P2973, "$/"
    $P2974 = $P2969."new"("!INTERPOLATE", $P2972, "subrule" :named("pasttype"), "method" :named("subtype"), $P2973 :named("node"))
    $P2975 = $P2968."!make"($P2974)
.annotate 'line', 1312
    .return ($P2975)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "assertion:sym<{ }>"  :subid("164_1299591508.723") :outer("160_1299591508.723")
    .param pmc param_2977
    .param pmc param_2978
.annotate 'line', 1317
    .lex "self", param_2977
    .lex "$/", param_2978
.annotate 'line', 1318
    find_lex $P2979, "$/"
    get_hll_global $P2980, ["PAST"], "Regex"
    find_lex $P2981, "$/"
    unless_null $P2981, vivify_899
    $P2981 = root_new ['parrot';'Hash']
  vivify_899:
    set $P2982, $P2981["codeblock"]
    unless_null $P2982, vivify_900
    new $P2982, "Undef"
  vivify_900:
    $P2983 = $P2982."ast"()
    find_lex $P2984, "$/"
    $P2985 = $P2980."new"("!INTERPOLATE_REGEX", $P2983, "subrule" :named("pasttype"), "method" :named("subtype"), $P2984 :named("node"))
    $P2986 = $P2979."!make"($P2985)
.annotate 'line', 1317
    .return ($P2986)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "assertion:sym<?{ }>"  :subid("165_1299591508.723") :outer("160_1299591508.723")
    .param pmc param_2988
    .param pmc param_2989
.annotate 'line', 1322
    .lex "self", param_2988
    .lex "$/", param_2989
.annotate 'line', 1323
    find_lex $P2990, "$/"
    get_hll_global $P2991, ["PAST"], "Regex"
    find_lex $P2992, "$/"
    unless_null $P2992, vivify_901
    $P2992 = root_new ['parrot';'Hash']
  vivify_901:
    set $P2993, $P2992["codeblock"]
    unless_null $P2993, vivify_902
    new $P2993, "Undef"
  vivify_902:
    $P2994 = $P2993."ast"()
.annotate 'line', 1324
    find_lex $P2995, "$/"
    unless_null $P2995, vivify_903
    $P2995 = root_new ['parrot';'Hash']
  vivify_903:
    set $P2996, $P2995["zw"]
    unless_null $P2996, vivify_904
    new $P2996, "Undef"
  vivify_904:
    set $S2997, $P2996
    iseq $I2998, $S2997, "!"
    find_lex $P2999, "$/"
    $P3000 = $P2991."new"($P2994, "zerowidth" :named("subtype"), $I2998 :named("negate"), "pastnode" :named("pasttype"), $P2999 :named("node"))
.annotate 'line', 1323
    $P3001 = $P2990."!make"($P3000)
.annotate 'line', 1322
    .return ($P3001)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "assertion:sym<var>"  :subid("166_1299591508.723") :outer("160_1299591508.723")
    .param pmc param_3003
    .param pmc param_3004
.annotate 'line', 1328
    .lex "self", param_3003
    .lex "$/", param_3004
.annotate 'line', 1329
    find_lex $P3005, "$/"
    get_hll_global $P3006, ["PAST"], "Regex"
    find_lex $P3007, "$/"
    unless_null $P3007, vivify_905
    $P3007 = root_new ['parrot';'Hash']
  vivify_905:
    set $P3008, $P3007["var"]
    unless_null $P3008, vivify_906
    new $P3008, "Undef"
  vivify_906:
    $P3009 = $P3008."ast"()
    find_lex $P3010, "$/"
    $P3011 = $P3006."new"("!INTERPOLATE_REGEX", $P3009, "subrule" :named("pasttype"), "method" :named("subtype"), $P3010 :named("node"))
    $P3012 = $P3005."!make"($P3011)
.annotate 'line', 1328
    .return ($P3012)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "codeblock"  :subid("167_1299591508.723") :outer("160_1299591508.723")
    .param pmc param_3014
    .param pmc param_3015
.annotate 'line', 1333
    .lex "self", param_3014
    .lex "$/", param_3015
.annotate 'line', 1334
    new $P3016, "Undef"
    .lex "$block", $P3016
.annotate 'line', 1336
    new $P3017, "Undef"
    .lex "$past", $P3017
.annotate 'line', 1334
    find_lex $P3018, "$/"
    unless_null $P3018, vivify_907
    $P3018 = root_new ['parrot';'Hash']
  vivify_907:
    set $P3019, $P3018["block"]
    unless_null $P3019, vivify_908
    new $P3019, "Undef"
  vivify_908:
    $P3020 = $P3019."ast"()
    store_lex "$block", $P3020
.annotate 'line', 1335
    find_lex $P3021, "$block"
    $P3021."blocktype"("immediate")
.annotate 'line', 1337
    get_hll_global $P3022, ["PAST"], "Stmts"
.annotate 'line', 1338
    get_hll_global $P3023, ["PAST"], "Op"
.annotate 'line', 1339
    get_hll_global $P3024, ["PAST"], "Var"
    $P3025 = $P3024."new"("$/" :named("name"))
.annotate 'line', 1340
    get_hll_global $P3026, ["PAST"], "Op"
.annotate 'line', 1341
    get_hll_global $P3027, ["PAST"], "Var"
    $P3028 = $P3027."new"(unicode:"$\x{a2}" :named("name"))
    $P3029 = $P3026."new"($P3028, "MATCH" :named("name"), "callmethod" :named("pasttype"))
.annotate 'line', 1340
    $P3030 = $P3023."new"($P3025, $P3029, "bind" :named("pasttype"))
.annotate 'line', 1338
    find_lex $P3031, "$block"
    $P3032 = $P3022."new"($P3030, $P3031)
.annotate 'line', 1337
    store_lex "$past", $P3032
.annotate 'line', 1349
    find_lex $P3033, "$/"
    find_lex $P3034, "$past"
    $P3035 = $P3033."!make"($P3034)
.annotate 'line', 1333
    .return ($P3035)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3060" :load :anon :subid("169_1299591508.723")
.annotate 'line', 3
    .const 'Sub' $P3062 = "11_1299591508.723" 
    $P3063 = $P3062()
    .return ($P3063)
.end


.HLL "nqp"

.namespace []
.sub "_block3293" :load :anon :subid("171_1299591508.723")
.annotate 'line', 1
    .const 'Sub' $P3295 = "10_1299591508.723" 
    $P3296 = $P3295()
    .return ($P3296)
.end

### .include 'gen/nqp-compiler.pir'

.HLL "nqp"

.loadlib "nqp_group"

.loadlib "nqp_ops"

.namespace []
.sub "_block11"  :anon :subid("10_1299591511.224")
.annotate 'line', 0
    get_hll_global $P18, ["NQP";"Compiler"], "_block17" 
    capture_lex $P18
.annotate 'line', 1
    getinterp $P13
    get_class $P14, "LexPad"
    get_class $P15, "NQPLexPad"
    $P13."hll_map"($P14, $P15)
    get_hll_global $P16, ["NQP"], "Compiler"
    $P0 = find_dynamic_lex "$*CTXSAVE"
    if null $P0 goto ctxsave_done
    $I0 = can $P0, "ctxsave"
    unless $I0 goto ctxsave_done
    $P0."ctxsave"()
  ctxsave_done:
    get_hll_global $P18, ["NQP";"Compiler"], "_block17" 
    capture_lex $P18
    $P28 = $P18()
    .return ($P28)
    .const 'Sub' $P30 = "13_1299591511.224" 
    .return ($P30)
.end


.HLL "nqp"

.namespace []
.sub "" :load :init :subid("post14") :outer("10_1299591511.224")
.annotate 'line', 0
    .const 'Sub' $P12 = "10_1299591511.224" 
    .local pmc block
    set block, $P12
    nqp_get_sc $P34, "1299591511.213"
    isnull $I35, $P34
    if $I35, if_33
    goto if_33_end
  if_33:
    nqp_dynop_setup 
    load_bytecode "nqpmo.pbc"
    nqp_create_sc $P36, "1299591511.213"
    load_bytecode "SettingManager.pbc"
    get_hll_global $P37, ["HLL"], "SettingManager"
    $P38 = $P37."load_setting"("NQPCORE")
    block."set_outer_ctx"($P38)
  if_33_end:
.end


.HLL "nqp"

.namespace ["NQP";"Compiler"]
.sub "_block17"  :subid("11_1299591511.224") :outer("10_1299591511.224")
.annotate 'line', 1
    .const 'Sub' $P21 = "12_1299591511.224" 
    capture_lex $P21
    get_global $P19, "$?CLASS"
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Compiler"]
.sub "" :load :init :subid("post15") :outer("11_1299591511.224")
.annotate 'line', 1
    get_hll_global $P18, ["NQP";"Compiler"], "_block17" 
    .local pmc block
    set block, $P18
    .const 'Sub' $P21 = "12_1299591511.224" 
    capture_lex $P21
    $P21()
.end


.HLL "nqp"

.namespace ["NQP";"Compiler"]
.sub "_block20"  :anon :subid("12_1299591511.224") :outer("11_1299591511.224")
.annotate 'line', 1
    get_hll_global $P22, "NQPClassHOW"
    $P23 = $P22."new_type"("Compiler" :named("name"))
    .local pmc type_obj
    set type_obj, $P23
    set_hll_global ["NQP"], "Compiler", type_obj
    set_global "$?CLASS", type_obj
    get_how $P24, type_obj
    get_hll_global $P25, ["HLL"], "Compiler"
    $P24."add_parent"(type_obj, $P25)
    get_how $P26, type_obj
    $P27 = $P26."compose"(type_obj)
    .return ($P27)
.end


.HLL "nqp"

.namespace []
.sub "_block29" :load :anon :subid("13_1299591511.224")
.annotate 'line', 1
    .const 'Sub' $P31 = "10_1299591511.224" 
    $P32 = $P31()
    .return ($P32)
.end

### .include 'src/cheats/nqp-builtins.pir'
.namespace []

.sub 'print'
    .param pmc list            :slurpy
    .local pmc list_it
    list_it = iter list
  list_loop:
    unless list_it goto list_done
    $P0 = shift list_it
    print $P0
    goto list_loop
  list_done:
    .return (1)
.end

.sub 'say'
    .param pmc list            :slurpy
    .tailcall 'print'(list :flat, "\n")
.end

.sub 'ok'
    .param pmc    condition
    .param string description :optional
    .param int    has_desc    :opt_flag
    if condition goto it_was_ok
        print "not "
  it_was_ok:
    print "ok "
    $P0 = get_global "$test_counter"
    $P0 += 1
    print $P0
    unless has_desc goto no_description
        print " - "
        print description
  no_description:
    print "\n"

    unless condition goto not_ok
    .return (1)
  not_ok:
    .return (0)
.end

.sub 'skip'
    .param string desc

    print 'ok '
    $P0 = get_global "$test_counter"
    $P0 += 1
    print $P0
    print " # SKIP "
    print desc
    print "\n"
.end

.sub 'plan'
    .param int quantity
    print "1.."
    print quantity
    print "\n"
.end

.sub '' :anon :init :load
    $P0 = box 0
    set_global '$test_counter', $P0
.end



.namespace ['NQP';'Compiler']

.sub '' :anon :load :init
    .local pmc nqpproto, nqpcomp
    nqpproto = get_hll_global ['NQP'], 'Compiler'
    nqpcomp = nqpproto.'new'()
    nqpcomp.'language'('nqp')
    $P0 = get_hll_global ['NQP'], 'Grammar'
    nqpcomp.'parsegrammar'($P0)
    $P0 = get_hll_global ['NQP'], 'Actions'
    nqpcomp.'parseactions'($P0)
    $P0 = nqpcomp.'commandline_options'()
    push $P0, 'parsetrace'
    push $P0, 'setting=s'
.end

.sub 'main' :main
    .param pmc args_str

    $P0 = compreg 'nqp'
    $P1 = $P0.'command_line'(args_str, 'encoding'=>'utf8', 'transcode'=>'ascii iso-8859-1')
    exit 0
.end

# Local Variables:
#   mode: pir
#   fill-column: 100
# End:
# vim: expandtab shiftwidth=4 ft=pir:
