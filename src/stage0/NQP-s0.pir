.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'

.HLL "nqp"

.loadlib "nqp_group"

.loadlib "nqp_ops"

.loadlib "nqp_bigint_ops"

.loadlib "trans_ops"

.loadlib "io_ops"

.namespace []
.sub "_block1000"  :anon :subid("542_1334921493.34")
    .param pmc param_1002 :slurpy
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 0
    .const 'Sub' $P3886 = "655_1334921493.34" 
    capture_lex $P3886
    .const 'Sub' $P3877 = "653_1334921493.34" 
    capture_lex $P3877
    .const 'Sub' $P3840 = "652_1334921493.34" 
    capture_lex $P3840
    .const 'Sub' $P2600 = "591_1334921493.34" 
    capture_lex $P2600
    .const 'Sub' $P2545 = "586_1334921493.34" 
    capture_lex $P2545
    .const 'Sub' $P1436 = "571_1334921493.34" 
    capture_lex $P1436
    .const 'Sub' $P1025 = "545_1334921493.34" 
    capture_lex $P1025
    .const 'Sub' $P1019 = "544_1334921493.34" 
    capture_lex $P1019
    .const 'Sub' $P1006 = "543_1334921493.34" 
    capture_lex $P1006
.annotate 'line', 1
    .lex "@ARGS", param_1002
    .lex "GLOBALish", $P1003
    .lex "$?PACKAGE", $P1004
.annotate 'line', 2918
    .const 'Sub' $P1006 = "543_1334921493.34" 
    newclosure $P1017, $P1006
    set $P1005, $P1017
    .lex "MAIN", $P1005
.annotate 'line', 2941
    .const 'Sub' $P1019 = "544_1334921493.34" 
    newclosure $P1023, $P1019
    set $P1018, $P1023
    .lex "hll-config", $P1018
.annotate 'line', 1
    $P0 = find_dynamic_lex "$*CTXSAVE"
    if null $P0 goto ctxsave_done
    $I0 = can $P0, "ctxsave"
    unless $I0 goto ctxsave_done
    $P0."ctxsave"()
  ctxsave_done:
.annotate 'line', 7
    .const 'Sub' $P1025 = "545_1334921493.34" 
    capture_lex $P1025
    $P1025()
.annotate 'line', 632
    .const 'Sub' $P1436 = "571_1334921493.34" 
    capture_lex $P1436
    $P1436()
.annotate 'line', 1368
    .const 'Sub' $P2545 = "586_1334921493.34" 
    capture_lex $P2545
    $P2545()
.annotate 'line', 1411
    .const 'Sub' $P2600 = "591_1334921493.34" 
    capture_lex $P2600
    $P2600()
.annotate 'line', 2860
    .const 'Sub' $P3840 = "652_1334921493.34" 
    capture_lex $P3840
    $P3840()
.annotate 'line', 2915
    .const 'Sub' $P3877 = "653_1334921493.34" 
    capture_lex $P3877
    $P3877()
.annotate 'line', 1
    set $P103, $P1005
    set $P103, $P1018
    set $P104, param_1002
    if $P104, if_3880
    set $P103, $P104
    goto if_3880_end
  if_3880:
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P105, "ModuleLoader"
    getinterp $P106
    set $P107, $P106["context"]
    $P105."set_mainline_module"($P107)
    .const '' $P3881 = "543_1334921493.34" 
    set $P108, param_1002
    $P109 = $P3881($P108 :flat)
    set $P103, $P109
  if_3880_end:
    .return ($P103)
    .const 'Sub' $P3883 = "654_1334921493.34" 
    .return ($P3883)
.end


.HLL "nqp"

.namespace []
.sub "" :load :init :subid("post656") :outer("542_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 0
    .const 'Sub' $P1001 = "542_1334921493.34" 
    .local pmc block
    set block, $P1001
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P111
    get_class $P112, "LexPad"
    get_class $P113, "NQPLexPad"
    $P111."hll_map"($P112, $P113)
    nqp_create_sc $P114, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275"
    .local pmc cur_sc
    set cur_sc, $P114
    cur_sc."set_description"("src\\stage2\\gen\\NQP.pm")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P115, "ModuleLoader"
    $P116 = $P115."load_setting"("NQPCORE")
    block."set_outer_ctx"($P116)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P115, "ModuleLoader"
    $P115."load_module"("NQPRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P115, "ModuleLoader"
    $P115."load_module"("NQPP6Regex")
    set $S100, ""
    new $P115, "ResizableStringArray"
    .local pmc string_heap
    set string_heap, $P115
    null $S101
    push string_heap, $S101
    push string_heap, "P6opaque"
    push string_heap, "Regex"
    push string_heap, "PAST"
    push string_heap, "__REGEX_CORE_SC__"
    push string_heap, "_dumper"
    push string_heap, "HLL"
    push string_heap, "NQP"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "55E00F586FFF42DD1F8EBE75EE8802A4D0B81672-1334921477.782"
    push string_heap, "src\\stage2\\NQPCORE.setting"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "A8B522B0A73F6810EB57BBFB7E26E389CE09568A-1334921479.404"
    push string_heap, "src\\stage2\\gen\\NQPHLL.pm"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "BUILD"
    push string_heap, "slot_for_object"
    push string_heap, "get_slot_past_for_object"
    push string_heap, "get_slot_past_for_code_ref_at"
    push string_heap, "set_slot_past"
    push string_heap, "set_cur_sc"
    push string_heap, "add_object_to_cur_sc_past"
    push string_heap, "add_object"
    push string_heap, "add_root_code_ref"
    push string_heap, "update_root_code_ref"
    push string_heap, "is_precompilation_mode"
    push string_heap, "add_load_dependency_task"
    push string_heap, "add_fixup_task"
    push string_heap, "get_ref"
    push string_heap, "sc"
    push string_heap, "handle"
    push string_heap, "load_dependency_tasks"
    push string_heap, "fixup_tasks"
    push string_heap, "serialize_and_produce_deserialization_past"
    push string_heap, "push_lexpad"
    push string_heap, "pop_lexpad"
    push string_heap, "cur_lexpad"
    push string_heap, "get_legacy_block_list"
    push string_heap, "load_setting"
    push string_heap, "load_module"
    push string_heap, "install_package_symbol"
    push string_heap, "install_lexical_symbol"
    push string_heap, "install_package_routine"
    push string_heap, "create_code"
    push string_heap, "pkg_create_mo"
    push string_heap, "pkg_add_attribute"
    push string_heap, "pkg_add_method"
    push string_heap, "set_routine_signature"
    push string_heap, "set_routine_signature_on_parrot_sub"
    push string_heap, "pkg_set_body_block"
    push string_heap, "pkg_add_parent_or_role"
    push string_heap, "pkg_add_parrot_vtable_handler_mapping"
    push string_heap, "pkg_compose"
    push string_heap, "run_begin_block"
    push string_heap, "set_nqp_language_defaults"
    push string_heap, "to_past"
    push string_heap, "is_lexical"
    push string_heap, "is_package"
    push string_heap, "is_scope"
    push string_heap, "known_sym"
    push string_heap, "find_sym"
    push string_heap, "$!sc"
    push string_heap, "$!handle"
    push string_heap, "$!precomp_mode"
    push string_heap, "$!num_code_refs"
    push string_heap, "$!code_ref_blocks"
    push string_heap, "@!load_dependency_tasks"
    push string_heap, "@!fixup_tasks"
    push string_heap, "%!addr_to_slot"
    push string_heap, "@!BLOCKS"
    push string_heap, "%!code_objects_to_fix_up"
    push string_heap, "%!code_object_fixup_list"
    push string_heap, "%!code_stub_sc_idx"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "new_match"
    push string_heap, "new_array"
    push string_heap, "MATCH"
    push string_heap, "parse"
    push string_heap, "next"
    push string_heap, "pos"
    push string_heap, "from"
    push string_heap, "!cursor_init"
    push string_heap, "!cursor_start"
    push string_heap, "!cursor_fail"
    push string_heap, "!cursor_pass"
    push string_heap, "!cursor_backtrack"
    push string_heap, "!cursor_next"
    push string_heap, "!cursor_caparray"
    push string_heap, "!cursor_names"
    push string_heap, "!cursor_pos"
    push string_heap, "!cursor_debug"
    push string_heap, "!mark_push"
    push string_heap, "!mark_peek"
    push string_heap, "!mark_fail"
    push string_heap, "!mark_commit"
    push string_heap, "!reduce"
    push string_heap, "!BACKREF"
    push string_heap, "!INTERPOLATE"
    push string_heap, "!INTERPOLATE_REGEX"
    push string_heap, "!cursor_from"
    push string_heap, "before"
    push string_heap, "ident"
    push string_heap, "wb"
    push string_heap, "ww"
    push string_heap, "ws"
    push string_heap, "alpha"
    push string_heap, "upper"
    push string_heap, "lower"
    push string_heap, "digit"
    push string_heap, "xdigit"
    push string_heap, "print"
    push string_heap, "graph"
    push string_heap, "cntrl"
    push string_heap, "punct"
    push string_heap, "alnum"
    push string_heap, "space"
    push string_heap, "blank"
    push string_heap, "FAILGOAL"
    push string_heap, "DEBUG"
    push string_heap, "!protoregex"
    push string_heap, "!protoregex_generation"
    push string_heap, "!protoregex_tokrx"
    push string_heap, "!protoregex_gen_table"
    push string_heap, "!PREFIX__!protoregex"
    push string_heap, "!PREFIX__!subrule"
    push string_heap, "DUMP_TOKRX"
    push string_heap, "Bool"
    push string_heap, "!PREFIX__ws"
    push string_heap, "termish"
    push string_heap, "!PREFIX__termish"
    push string_heap, "term"
    push string_heap, "!PREFIX__term"
    push string_heap, "infix"
    push string_heap, "!PREFIX__infix"
    push string_heap, "prefix"
    push string_heap, "!PREFIX__prefix"
    push string_heap, "postfix"
    push string_heap, "!PREFIX__postfix"
    push string_heap, "circumfix"
    push string_heap, "!PREFIX__circumfix"
    push string_heap, "postcircumfix"
    push string_heap, "!PREFIX__postcircumfix"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "!PREFIX__term:sym<circumfix>"
    push string_heap, "infixish"
    push string_heap, "!PREFIX__infixish"
    push string_heap, "prefixish"
    push string_heap, "!PREFIX__prefixish"
    push string_heap, "postfixish"
    push string_heap, "!PREFIX__postfixish"
    push string_heap, "nullterm"
    push string_heap, "!PREFIX__nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "!PREFIX__nullterm_alt"
    push string_heap, "nulltermish"
    push string_heap, "quote_delimited"
    push string_heap, "!PREFIX__quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "!PREFIX__quote_atom"
    push string_heap, "decint"
    push string_heap, "!PREFIX__decint"
    push string_heap, "decints"
    push string_heap, "!PREFIX__decints"
    push string_heap, "hexint"
    push string_heap, "!PREFIX__hexint"
    push string_heap, "hexints"
    push string_heap, "!PREFIX__hexints"
    push string_heap, "octint"
    push string_heap, "!PREFIX__octint"
    push string_heap, "octints"
    push string_heap, "!PREFIX__octints"
    push string_heap, "binint"
    push string_heap, "!PREFIX__binint"
    push string_heap, "binints"
    push string_heap, "!PREFIX__binints"
    push string_heap, "integer"
    push string_heap, "!PREFIX__integer"
    push string_heap, "dec_number"
    push string_heap, "!PREFIX__dec_number"
    push string_heap, "escale"
    push string_heap, "!PREFIX__escale"
    push string_heap, "quote_escape"
    push string_heap, "!PREFIX__quote_escape"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "!PREFIX__quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "!PREFIX__quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "!PREFIX__quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "!PREFIX__quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "!PREFIX__quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "!PREFIX__quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "!PREFIX__quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "!PREFIX__quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "!PREFIX__quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "!PREFIX__quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "!PREFIX__quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "!PREFIX__quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "!PREFIX__quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "!PREFIX__charname"
    push string_heap, "charnames"
    push string_heap, "!PREFIX__charnames"
    push string_heap, "charspec"
    push string_heap, "!PREFIX__charspec"
    push string_heap, "O"
    push string_heap, "panic"
    push string_heap, "peek_delimiters"
    push string_heap, "quote_EXPR"
    push string_heap, "quotemod_check"
    push string_heap, "starter"
    push string_heap, "stopper"
    push string_heap, "split_words"
    push string_heap, "EXPR"
    push string_heap, "EXPR_reduce"
    push string_heap, "ternary"
    push string_heap, "MARKER"
    push string_heap, "MARKED"
    push string_heap, "LANG"
    push string_heap, "TOP"
    push string_heap, "identifier"
    push string_heap, "!PREFIX__identifier"
    push string_heap, "name"
    push string_heap, "!PREFIX__name"
    push string_heap, "deflongname"
    push string_heap, "!PREFIX__deflongname"
    push string_heap, "ENDSTMT"
    push string_heap, "!PREFIX__ENDSTMT"
    push string_heap, "unv"
    push string_heap, "!PREFIX__unv"
    push string_heap, "pod_comment"
    push string_heap, "!PREFIX__pod_comment"
    push string_heap, "comp_unit"
    push string_heap, "!PREFIX__comp_unit"
    push string_heap, "statementlist"
    push string_heap, "!PREFIX__statementlist"
    push string_heap, "statement"
    push string_heap, "!PREFIX__statement"
    push string_heap, "eat_terminator"
    push string_heap, "!PREFIX__eat_terminator"
    push string_heap, "xblock"
    push string_heap, "!PREFIX__xblock"
    push string_heap, "pblock"
    push string_heap, "!PREFIX__pblock"
    push string_heap, "lambda"
    push string_heap, "!PREFIX__lambda"
    push string_heap, "block"
    push string_heap, "!PREFIX__block"
    push string_heap, "blockoid"
    push string_heap, "!PREFIX__blockoid"
    push string_heap, "newpad"
    push string_heap, "!PREFIX__newpad"
    push string_heap, "outerctx"
    push string_heap, "!PREFIX__outerctx"
    push string_heap, "GLOBALish"
    push string_heap, "!PREFIX__GLOBALish"
    push string_heap, "finishpad"
    push string_heap, "!PREFIX__finishpad"
    push string_heap, "you_are_here"
    push string_heap, "!PREFIX__you_are_here"
    push string_heap, "terminator"
    push string_heap, "!PREFIX__terminator"
    push string_heap, "terminator:sym<;>"
    push string_heap, "!PREFIX__terminator:sym<;>"
    push string_heap, "terminator:sym<}>"
    push string_heap, "!PREFIX__terminator:sym<}>"
    push string_heap, "statement_control"
    push string_heap, "!PREFIX__statement_control"
    push string_heap, "statement_control:sym<use>"
    push string_heap, "!PREFIX__statement_control:sym<use>"
    push string_heap, "statement_control:sym<if>"
    push string_heap, "!PREFIX__statement_control:sym<if>"
    push string_heap, "statement_control:sym<unless>"
    push string_heap, "!PREFIX__statement_control:sym<unless>"
    push string_heap, "statement_control:sym<while>"
    push string_heap, "!PREFIX__statement_control:sym<while>"
    push string_heap, "statement_control:sym<repeat>"
    push string_heap, "!PREFIX__statement_control:sym<repeat>"
    push string_heap, "statement_control:sym<for>"
    push string_heap, "!PREFIX__statement_control:sym<for>"
    push string_heap, "statement_control:sym<CATCH>"
    push string_heap, "!PREFIX__statement_control:sym<CATCH>"
    push string_heap, "statement_control:sym<CONTROL>"
    push string_heap, "!PREFIX__statement_control:sym<CONTROL>"
    push string_heap, "statement_prefix"
    push string_heap, "!PREFIX__statement_prefix"
    push string_heap, "statement_prefix:sym<BEGIN>"
    push string_heap, "!PREFIX__statement_prefix:sym<BEGIN>"
    push string_heap, "statement_prefix:sym<INIT>"
    push string_heap, "!PREFIX__statement_prefix:sym<INIT>"
    push string_heap, "statement_prefix:sym<try>"
    push string_heap, "!PREFIX__statement_prefix:sym<try>"
    push string_heap, "blorst"
    push string_heap, "!PREFIX__blorst"
    push string_heap, "statement_mod_cond"
    push string_heap, "!PREFIX__statement_mod_cond"
    push string_heap, "statement_mod_cond:sym<if>"
    push string_heap, "!PREFIX__statement_mod_cond:sym<if>"
    push string_heap, "statement_mod_cond:sym<unless>"
    push string_heap, "!PREFIX__statement_mod_cond:sym<unless>"
    push string_heap, "statement_mod_loop"
    push string_heap, "!PREFIX__statement_mod_loop"
    push string_heap, "statement_mod_loop:sym<while>"
    push string_heap, "!PREFIX__statement_mod_loop:sym<while>"
    push string_heap, "statement_mod_loop:sym<until>"
    push string_heap, "!PREFIX__statement_mod_loop:sym<until>"
    push string_heap, "statement_mod_loop:sym<for>"
    push string_heap, "!PREFIX__statement_mod_loop:sym<for>"
    push string_heap, "term:sym<fatarrow>"
    push string_heap, "!PREFIX__term:sym<fatarrow>"
    push string_heap, "term:sym<colonpair>"
    push string_heap, "!PREFIX__term:sym<colonpair>"
    push string_heap, "term:sym<variable>"
    push string_heap, "!PREFIX__term:sym<variable>"
    push string_heap, "term:sym<package_declarator>"
    push string_heap, "!PREFIX__term:sym<package_declarator>"
    push string_heap, "term:sym<scope_declarator>"
    push string_heap, "!PREFIX__term:sym<scope_declarator>"
    push string_heap, "term:sym<routine_declarator>"
    push string_heap, "!PREFIX__term:sym<routine_declarator>"
    push string_heap, "term:sym<multi_declarator>"
    push string_heap, "!PREFIX__term:sym<multi_declarator>"
    push string_heap, "term:sym<regex_declarator>"
    push string_heap, "!PREFIX__term:sym<regex_declarator>"
    push string_heap, "term:sym<statement_prefix>"
    push string_heap, "!PREFIX__term:sym<statement_prefix>"
    push string_heap, "term:sym<lambda>"
    push string_heap, "!PREFIX__term:sym<lambda>"
    push string_heap, "fatarrow"
    push string_heap, "!PREFIX__fatarrow"
    push string_heap, "colonpair"
    push string_heap, "!PREFIX__colonpair"
    push string_heap, "variable"
    push string_heap, "!PREFIX__variable"
    push string_heap, "sigil"
    push string_heap, "!PREFIX__sigil"
    push string_heap, "twigil"
    push string_heap, "!PREFIX__twigil"
    push string_heap, "package_declarator"
    push string_heap, "!PREFIX__package_declarator"
    push string_heap, "package_declarator:sym<module>"
    push string_heap, "!PREFIX__package_declarator:sym<module>"
    push string_heap, "package_declarator:sym<knowhow>"
    push string_heap, "!PREFIX__package_declarator:sym<knowhow>"
    push string_heap, "package_declarator:sym<class>"
    push string_heap, "!PREFIX__package_declarator:sym<class>"
    push string_heap, "package_declarator:sym<grammar>"
    push string_heap, "!PREFIX__package_declarator:sym<grammar>"
    push string_heap, "package_declarator:sym<role>"
    push string_heap, "!PREFIX__package_declarator:sym<role>"
    push string_heap, "package_declarator:sym<native>"
    push string_heap, "!PREFIX__package_declarator:sym<native>"
    push string_heap, "package_declarator:sym<stub>"
    push string_heap, "!PREFIX__package_declarator:sym<stub>"
    push string_heap, "package_def"
    push string_heap, "!PREFIX__package_def"
    push string_heap, "scope_declarator"
    push string_heap, "!PREFIX__scope_declarator"
    push string_heap, "scope_declarator:sym<my>"
    push string_heap, "!PREFIX__scope_declarator:sym<my>"
    push string_heap, "scope_declarator:sym<our>"
    push string_heap, "!PREFIX__scope_declarator:sym<our>"
    push string_heap, "scope_declarator:sym<has>"
    push string_heap, "!PREFIX__scope_declarator:sym<has>"
    push string_heap, "scoped"
    push string_heap, "!PREFIX__scoped"
    push string_heap, "typename"
    push string_heap, "!PREFIX__typename"
    push string_heap, "declarator"
    push string_heap, "!PREFIX__declarator"
    push string_heap, "variable_declarator"
    push string_heap, "!PREFIX__variable_declarator"
    push string_heap, "routine_declarator"
    push string_heap, "!PREFIX__routine_declarator"
    push string_heap, "routine_declarator:sym<sub>"
    push string_heap, "!PREFIX__routine_declarator:sym<sub>"
    push string_heap, "routine_declarator:sym<method>"
    push string_heap, "!PREFIX__routine_declarator:sym<method>"
    push string_heap, "routine_def"
    push string_heap, "!PREFIX__routine_def"
    push string_heap, "method_def"
    push string_heap, "!PREFIX__method_def"
    push string_heap, "onlystar"
    push string_heap, "!PREFIX__onlystar"
    push string_heap, "multi_declarator"
    push string_heap, "!PREFIX__multi_declarator"
    push string_heap, "multi_declarator:sym<multi>"
    push string_heap, "!PREFIX__multi_declarator:sym<multi>"
    push string_heap, "multi_declarator:sym<proto>"
    push string_heap, "!PREFIX__multi_declarator:sym<proto>"
    push string_heap, "multi_declarator:sym<null>"
    push string_heap, "!PREFIX__multi_declarator:sym<null>"
    push string_heap, "signature"
    push string_heap, "!PREFIX__signature"
    push string_heap, "parameter"
    push string_heap, "!PREFIX__parameter"
    push string_heap, "param_var"
    push string_heap, "!PREFIX__param_var"
    push string_heap, "named_param"
    push string_heap, "!PREFIX__named_param"
    push string_heap, "default_value"
    push string_heap, "!PREFIX__default_value"
    push string_heap, "trait"
    push string_heap, "!PREFIX__trait"
    push string_heap, "trait_mod"
    push string_heap, "!PREFIX__trait_mod"
    push string_heap, "trait_mod:sym<is>"
    push string_heap, "!PREFIX__trait_mod:sym<is>"
    push string_heap, "regex_declarator"
    push string_heap, "!PREFIX__regex_declarator"
    push string_heap, "dotty"
    push string_heap, "!PREFIX__dotty"
    push string_heap, "term:sym<self>"
    push string_heap, "!PREFIX__term:sym<self>"
    push string_heap, "term:sym<identifier>"
    push string_heap, "!PREFIX__term:sym<identifier>"
    push string_heap, "term:sym<name>"
    push string_heap, "!PREFIX__term:sym<name>"
    push string_heap, "term:sym<pir::op>"
    push string_heap, "!PREFIX__term:sym<pir::op>"
    push string_heap, "term:sym<pir::const>"
    push string_heap, "!PREFIX__term:sym<pir::const>"
    push string_heap, "term:sym<nqp::op>"
    push string_heap, "!PREFIX__term:sym<nqp::op>"
    push string_heap, "term:sym<onlystar>"
    push string_heap, "!PREFIX__term:sym<onlystar>"
    push string_heap, "args"
    push string_heap, "!PREFIX__args"
    push string_heap, "arglist"
    push string_heap, "!PREFIX__arglist"
    push string_heap, "term:sym<value>"
    push string_heap, "!PREFIX__term:sym<value>"
    push string_heap, "value"
    push string_heap, "!PREFIX__value"
    push string_heap, "number"
    push string_heap, "!PREFIX__number"
    push string_heap, "quote"
    push string_heap, "!PREFIX__quote"
    push string_heap, "quote:sym<apos>"
    push string_heap, "!PREFIX__quote:sym<apos>"
    push string_heap, "quote:sym<dblq>"
    push string_heap, "!PREFIX__quote:sym<dblq>"
    push string_heap, "quote:sym<q>"
    push string_heap, "!PREFIX__quote:sym<q>"
    push string_heap, "quote:sym<qq>"
    push string_heap, "!PREFIX__quote:sym<qq>"
    push string_heap, "quote:sym<Q>"
    push string_heap, "!PREFIX__quote:sym<Q>"
    push string_heap, "quote:sym<Q:PIR>"
    push string_heap, "!PREFIX__quote:sym<Q:PIR>"
    push string_heap, "quote:sym</ />"
    push string_heap, "!PREFIX__quote:sym</ />"
    push string_heap, "quote_escape:sym<$>"
    push string_heap, "!PREFIX__quote_escape:sym<$>"
    push string_heap, "quote_escape:sym<{ }>"
    push string_heap, "!PREFIX__quote_escape:sym<{ }>"
    push string_heap, "circumfix:sym<( )>"
    push string_heap, "!PREFIX__circumfix:sym<( )>"
    push string_heap, "circumfix:sym<[ ]>"
    push string_heap, "!PREFIX__circumfix:sym<[ ]>"
    push string_heap, "circumfix:sym<ang>"
    push string_heap, "!PREFIX__circumfix:sym<ang>"
    push string_heap, unicode:"circumfix:sym<\x{ab} \x{bb}>"
    push string_heap, unicode:"!PREFIX__circumfix:sym<\x{ab} \x{bb}>"
    push string_heap, "circumfix:sym<{ }>"
    push string_heap, "!PREFIX__circumfix:sym<{ }>"
    push string_heap, "circumfix:sym<sigil>"
    push string_heap, "!PREFIX__circumfix:sym<sigil>"
    push string_heap, "semilist"
    push string_heap, "!PREFIX__semilist"
    push string_heap, "infixstopper"
    push string_heap, "!PREFIX__infixstopper"
    push string_heap, "postcircumfix:sym<[ ]>"
    push string_heap, "!PREFIX__postcircumfix:sym<[ ]>"
    push string_heap, "postcircumfix:sym<{ }>"
    push string_heap, "!PREFIX__postcircumfix:sym<{ }>"
    push string_heap, "postcircumfix:sym<ang>"
    push string_heap, "!PREFIX__postcircumfix:sym<ang>"
    push string_heap, "postcircumfix:sym<( )>"
    push string_heap, "!PREFIX__postcircumfix:sym<( )>"
    push string_heap, "postfix:sym<.>"
    push string_heap, "!PREFIX__postfix:sym<.>"
    push string_heap, "prefix:sym<++>"
    push string_heap, "!PREFIX__prefix:sym<++>"
    push string_heap, "prefix:sym<-->"
    push string_heap, "!PREFIX__prefix:sym<-->"
    push string_heap, "postfix:sym<++>"
    push string_heap, "!PREFIX__postfix:sym<++>"
    push string_heap, "postfix:sym<-->"
    push string_heap, "!PREFIX__postfix:sym<-->"
    push string_heap, "infix:sym<**>"
    push string_heap, "!PREFIX__infix:sym<**>"
    push string_heap, "prefix:sym<+>"
    push string_heap, "!PREFIX__prefix:sym<+>"
    push string_heap, "prefix:sym<~>"
    push string_heap, "!PREFIX__prefix:sym<~>"
    push string_heap, "prefix:sym<->"
    push string_heap, "!PREFIX__prefix:sym<->"
    push string_heap, "prefix:sym<?>"
    push string_heap, "!PREFIX__prefix:sym<?>"
    push string_heap, "prefix:sym<!>"
    push string_heap, "!PREFIX__prefix:sym<!>"
    push string_heap, "prefix:sym<|>"
    push string_heap, "!PREFIX__prefix:sym<|>"
    push string_heap, "infix:sym<*>"
    push string_heap, "!PREFIX__infix:sym<*>"
    push string_heap, "infix:sym</>"
    push string_heap, "!PREFIX__infix:sym</>"
    push string_heap, "infix:sym<%>"
    push string_heap, "!PREFIX__infix:sym<%>"
    push string_heap, "infix:sym<+&>"
    push string_heap, "!PREFIX__infix:sym<+&>"
    push string_heap, "infix:sym<+>"
    push string_heap, "!PREFIX__infix:sym<+>"
    push string_heap, "infix:sym<->"
    push string_heap, "!PREFIX__infix:sym<->"
    push string_heap, "infix:sym<+|>"
    push string_heap, "!PREFIX__infix:sym<+|>"
    push string_heap, "infix:sym<+^>"
    push string_heap, "!PREFIX__infix:sym<+^>"
    push string_heap, "infix:sym<~>"
    push string_heap, "!PREFIX__infix:sym<~>"
    push string_heap, "infix:sym<==>"
    push string_heap, "!PREFIX__infix:sym<==>"
    push string_heap, "infix:sym<!=>"
    push string_heap, "!PREFIX__infix:sym<!=>"
    push string_heap, "infix:sym<<=>"
    push string_heap, "!PREFIX__infix:sym<<=>"
    push string_heap, "infix:sym<>=>"
    push string_heap, "!PREFIX__infix:sym<>=>"
    push string_heap, "infix:sym<<>"
    push string_heap, "!PREFIX__infix:sym<<>"
    push string_heap, "infix:sym<>>"
    push string_heap, "!PREFIX__infix:sym<>>"
    push string_heap, "infix:sym<eq>"
    push string_heap, "!PREFIX__infix:sym<eq>"
    push string_heap, "infix:sym<ne>"
    push string_heap, "!PREFIX__infix:sym<ne>"
    push string_heap, "infix:sym<le>"
    push string_heap, "!PREFIX__infix:sym<le>"
    push string_heap, "infix:sym<ge>"
    push string_heap, "!PREFIX__infix:sym<ge>"
    push string_heap, "infix:sym<lt>"
    push string_heap, "!PREFIX__infix:sym<lt>"
    push string_heap, "infix:sym<gt>"
    push string_heap, "!PREFIX__infix:sym<gt>"
    push string_heap, "infix:sym<=:=>"
    push string_heap, "!PREFIX__infix:sym<=:=>"
    push string_heap, "infix:sym<~~>"
    push string_heap, "!PREFIX__infix:sym<~~>"
    push string_heap, "infix:sym<&&>"
    push string_heap, "!PREFIX__infix:sym<&&>"
    push string_heap, "infix:sym<||>"
    push string_heap, "!PREFIX__infix:sym<||>"
    push string_heap, "infix:sym<//>"
    push string_heap, "!PREFIX__infix:sym<//>"
    push string_heap, "infix:sym<?? !!>"
    push string_heap, "!PREFIX__infix:sym<?? !!>"
    push string_heap, "infix:sym<=>"
    push string_heap, "!PREFIX__infix:sym<=>"
    push string_heap, "infix:sym<:=>"
    push string_heap, "!PREFIX__infix:sym<:=>"
    push string_heap, "infix:sym<::=>"
    push string_heap, "!PREFIX__infix:sym<::=>"
    push string_heap, "infix:sym<,>"
    push string_heap, "!PREFIX__infix:sym<,>"
    push string_heap, "prefix:sym<return>"
    push string_heap, "!PREFIX__prefix:sym<return>"
    push string_heap, "prefix:sym<make>"
    push string_heap, "!PREFIX__prefix:sym<make>"
    push string_heap, "term:sym<last>"
    push string_heap, "!PREFIX__term:sym<last>"
    push string_heap, "term:sym<next>"
    push string_heap, "!PREFIX__term:sym<next>"
    push string_heap, "term:sym<redo>"
    push string_heap, "!PREFIX__term:sym<redo>"
    push string_heap, "smartmatch"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!names"
    push string_heap, "$!debug"
    push string_heap, "@!bstack"
    push string_heap, "@!cstack"
    push string_heap, "@!caparray"
    push string_heap, "&!regex"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "new_match"
    push string_heap, "new_array"
    push string_heap, "MATCH"
    push string_heap, "parse"
    push string_heap, "next"
    push string_heap, "pos"
    push string_heap, "from"
    push string_heap, "!cursor_init"
    push string_heap, "!cursor_start"
    push string_heap, "!cursor_fail"
    push string_heap, "!cursor_pass"
    push string_heap, "!cursor_backtrack"
    push string_heap, "!cursor_next"
    push string_heap, "!cursor_caparray"
    push string_heap, "!cursor_names"
    push string_heap, "!cursor_pos"
    push string_heap, "!cursor_debug"
    push string_heap, "!mark_push"
    push string_heap, "!mark_peek"
    push string_heap, "!mark_fail"
    push string_heap, "!mark_commit"
    push string_heap, "!reduce"
    push string_heap, "!BACKREF"
    push string_heap, "!INTERPOLATE"
    push string_heap, "!INTERPOLATE_REGEX"
    push string_heap, "!cursor_from"
    push string_heap, "before"
    push string_heap, "ident"
    push string_heap, "wb"
    push string_heap, "ww"
    push string_heap, "ws"
    push string_heap, "9C3392566B1FBE8D8EE209AF5C35DE0C9294CD76-1334921487.611"
    push string_heap, "src\\stage2\\gen\\NQPP6Regex.pm"
    push string_heap, "alpha"
    push string_heap, "upper"
    push string_heap, "lower"
    push string_heap, "digit"
    push string_heap, "xdigit"
    push string_heap, "print"
    push string_heap, "graph"
    push string_heap, "cntrl"
    push string_heap, "punct"
    push string_heap, "alnum"
    push string_heap, "space"
    push string_heap, "blank"
    push string_heap, "FAILGOAL"
    push string_heap, "DEBUG"
    push string_heap, "!protoregex"
    push string_heap, "!protoregex_generation"
    push string_heap, "!protoregex_tokrx"
    push string_heap, "!protoregex_gen_table"
    push string_heap, "!PREFIX__!protoregex"
    push string_heap, "!PREFIX__!subrule"
    push string_heap, "DUMP_TOKRX"
    push string_heap, "Bool"
    push string_heap, "!PREFIX__ws"
    push string_heap, "termish"
    push string_heap, "!PREFIX__termish"
    push string_heap, "term"
    push string_heap, "!PREFIX__term"
    push string_heap, "infix"
    push string_heap, "!PREFIX__infix"
    push string_heap, "prefix"
    push string_heap, "!PREFIX__prefix"
    push string_heap, "postfix"
    push string_heap, "!PREFIX__postfix"
    push string_heap, "circumfix"
    push string_heap, "!PREFIX__circumfix"
    push string_heap, "postcircumfix"
    push string_heap, "!PREFIX__postcircumfix"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "!PREFIX__term:sym<circumfix>"
    push string_heap, "infixish"
    push string_heap, "!PREFIX__infixish"
    push string_heap, "prefixish"
    push string_heap, "!PREFIX__prefixish"
    push string_heap, "postfixish"
    push string_heap, "!PREFIX__postfixish"
    push string_heap, "nullterm"
    push string_heap, "!PREFIX__nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "!PREFIX__nullterm_alt"
    push string_heap, "nulltermish"
    push string_heap, "quote_delimited"
    push string_heap, "!PREFIX__quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "!PREFIX__quote_atom"
    push string_heap, "decint"
    push string_heap, "!PREFIX__decint"
    push string_heap, "decints"
    push string_heap, "!PREFIX__decints"
    push string_heap, "hexint"
    push string_heap, "!PREFIX__hexint"
    push string_heap, "hexints"
    push string_heap, "!PREFIX__hexints"
    push string_heap, "octint"
    push string_heap, "!PREFIX__octint"
    push string_heap, "octints"
    push string_heap, "!PREFIX__octints"
    push string_heap, "binint"
    push string_heap, "!PREFIX__binint"
    push string_heap, "binints"
    push string_heap, "!PREFIX__binints"
    push string_heap, "integer"
    push string_heap, "!PREFIX__integer"
    push string_heap, "dec_number"
    push string_heap, "!PREFIX__dec_number"
    push string_heap, "escale"
    push string_heap, "!PREFIX__escale"
    push string_heap, "quote_escape"
    push string_heap, "!PREFIX__quote_escape"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "!PREFIX__quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "!PREFIX__quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "!PREFIX__quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "!PREFIX__quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "!PREFIX__quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "!PREFIX__quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "!PREFIX__quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "!PREFIX__quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "!PREFIX__quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "!PREFIX__quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "!PREFIX__quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "!PREFIX__quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "!PREFIX__quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "!PREFIX__charname"
    push string_heap, "charnames"
    push string_heap, "!PREFIX__charnames"
    push string_heap, "charspec"
    push string_heap, "!PREFIX__charspec"
    push string_heap, "O"
    push string_heap, "panic"
    push string_heap, "peek_delimiters"
    push string_heap, "quote_EXPR"
    push string_heap, "quotemod_check"
    push string_heap, "starter"
    push string_heap, "stopper"
    push string_heap, "split_words"
    push string_heap, "EXPR"
    push string_heap, "EXPR_reduce"
    push string_heap, "ternary"
    push string_heap, "MARKER"
    push string_heap, "MARKED"
    push string_heap, "LANG"
    push string_heap, "obs"
    push string_heap, "normspace"
    push string_heap, "!PREFIX__normspace"
    push string_heap, "identifier"
    push string_heap, "!PREFIX__identifier"
    push string_heap, "arg"
    push string_heap, "!PREFIX__arg"
    push string_heap, "arglist"
    push string_heap, "!PREFIX__arglist"
    push string_heap, "TOP"
    push string_heap, "!PREFIX__TOP"
    push string_heap, "nibbler"
    push string_heap, "!PREFIX__nibbler"
    push string_heap, "termconj"
    push string_heap, "!PREFIX__termconj"
    push string_heap, "quantified_atom"
    push string_heap, "!PREFIX__quantified_atom"
    push string_heap, "atom"
    push string_heap, "!PREFIX__atom"
    push string_heap, "quantifier"
    push string_heap, "!PREFIX__quantifier"
    push string_heap, "quantifier:sym<*>"
    push string_heap, "!PREFIX__quantifier:sym<*>"
    push string_heap, "quantifier:sym<+>"
    push string_heap, "!PREFIX__quantifier:sym<+>"
    push string_heap, "quantifier:sym<?>"
    push string_heap, "!PREFIX__quantifier:sym<?>"
    push string_heap, "quantifier:sym<{N,M}>"
    push string_heap, "!PREFIX__quantifier:sym<{N,M}>"
    push string_heap, "quantifier:sym<**>"
    push string_heap, "!PREFIX__quantifier:sym<**>"
    push string_heap, "backmod"
    push string_heap, "!PREFIX__backmod"
    push string_heap, "metachar"
    push string_heap, "!PREFIX__metachar"
    push string_heap, "metachar:sym<ws>"
    push string_heap, "!PREFIX__metachar:sym<ws>"
    push string_heap, "metachar:sym<[ ]>"
    push string_heap, "!PREFIX__metachar:sym<[ ]>"
    push string_heap, "metachar:sym<( )>"
    push string_heap, "!PREFIX__metachar:sym<( )>"
    push string_heap, "metachar:sym<'>"
    push string_heap, "!PREFIX__metachar:sym<'>"
    push string_heap, "metachar:sym<\">"
    push string_heap, "!PREFIX__metachar:sym<\">"
    push string_heap, "metachar:sym<.>"
    push string_heap, "!PREFIX__metachar:sym<.>"
    push string_heap, "metachar:sym<^>"
    push string_heap, "!PREFIX__metachar:sym<^>"
    push string_heap, "metachar:sym<^^>"
    push string_heap, "!PREFIX__metachar:sym<^^>"
    push string_heap, "metachar:sym<$>"
    push string_heap, "!PREFIX__metachar:sym<$>"
    push string_heap, "metachar:sym<$$>"
    push string_heap, "!PREFIX__metachar:sym<$$>"
    push string_heap, "metachar:sym<:::>"
    push string_heap, "!PREFIX__metachar:sym<:::>"
    push string_heap, "metachar:sym<::>"
    push string_heap, "!PREFIX__metachar:sym<::>"
    push string_heap, "metachar:sym<lwb>"
    push string_heap, "!PREFIX__metachar:sym<lwb>"
    push string_heap, "metachar:sym<rwb>"
    push string_heap, "!PREFIX__metachar:sym<rwb>"
    push string_heap, "metachar:sym<bs>"
    push string_heap, "!PREFIX__metachar:sym<bs>"
    push string_heap, "metachar:sym<mod>"
    push string_heap, "!PREFIX__metachar:sym<mod>"
    push string_heap, "metachar:sym<quantifier>"
    push string_heap, "!PREFIX__metachar:sym<quantifier>"
    push string_heap, "metachar:sym<~>"
    push string_heap, "!PREFIX__metachar:sym<~>"
    push string_heap, "metachar:sym<{*}>"
    push string_heap, "!PREFIX__metachar:sym<{*}>"
    push string_heap, "metachar:sym<assert>"
    push string_heap, "!PREFIX__metachar:sym<assert>"
    push string_heap, "metachar:sym<var>"
    push string_heap, "!PREFIX__metachar:sym<var>"
    push string_heap, "metachar:sym<PIR>"
    push string_heap, "!PREFIX__metachar:sym<PIR>"
    push string_heap, "backslash"
    push string_heap, "!PREFIX__backslash"
    push string_heap, "backslash:sym<w>"
    push string_heap, "!PREFIX__backslash:sym<w>"
    push string_heap, "backslash:sym<b>"
    push string_heap, "!PREFIX__backslash:sym<b>"
    push string_heap, "backslash:sym<e>"
    push string_heap, "!PREFIX__backslash:sym<e>"
    push string_heap, "backslash:sym<f>"
    push string_heap, "!PREFIX__backslash:sym<f>"
    push string_heap, "backslash:sym<h>"
    push string_heap, "!PREFIX__backslash:sym<h>"
    push string_heap, "backslash:sym<r>"
    push string_heap, "!PREFIX__backslash:sym<r>"
    push string_heap, "backslash:sym<t>"
    push string_heap, "!PREFIX__backslash:sym<t>"
    push string_heap, "backslash:sym<v>"
    push string_heap, "!PREFIX__backslash:sym<v>"
    push string_heap, "backslash:sym<o>"
    push string_heap, "!PREFIX__backslash:sym<o>"
    push string_heap, "backslash:sym<x>"
    push string_heap, "!PREFIX__backslash:sym<x>"
    push string_heap, "backslash:sym<c>"
    push string_heap, "!PREFIX__backslash:sym<c>"
    push string_heap, "backslash:sym<A>"
    push string_heap, "!PREFIX__backslash:sym<A>"
    push string_heap, "backslash:sym<z>"
    push string_heap, "!PREFIX__backslash:sym<z>"
    push string_heap, "backslash:sym<Z>"
    push string_heap, "!PREFIX__backslash:sym<Z>"
    push string_heap, "backslash:sym<Q>"
    push string_heap, "!PREFIX__backslash:sym<Q>"
    push string_heap, "backslash:sym<unrec>"
    push string_heap, "!PREFIX__backslash:sym<unrec>"
    push string_heap, "backslash:sym<misc>"
    push string_heap, "!PREFIX__backslash:sym<misc>"
    push string_heap, "assertion"
    push string_heap, "!PREFIX__assertion"
    push string_heap, "assertion:sym<?>"
    push string_heap, "!PREFIX__assertion:sym<?>"
    push string_heap, "assertion:sym<!>"
    push string_heap, "!PREFIX__assertion:sym<!>"
    push string_heap, "assertion:sym<method>"
    push string_heap, "!PREFIX__assertion:sym<method>"
    push string_heap, "assertion:sym<name>"
    push string_heap, "!PREFIX__assertion:sym<name>"
    push string_heap, "assertion:sym<[>"
    push string_heap, "!PREFIX__assertion:sym<[>"
    push string_heap, "cclass_elem"
    push string_heap, "!PREFIX__cclass_elem"
    push string_heap, "mod_internal"
    push string_heap, "!PREFIX__mod_internal"
    push string_heap, "mod_ident"
    push string_heap, "!PREFIX__mod_ident"
    push string_heap, "mod_ident:sym<ignorecase>"
    push string_heap, "!PREFIX__mod_ident:sym<ignorecase>"
    push string_heap, "mod_ident:sym<ratchet>"
    push string_heap, "!PREFIX__mod_ident:sym<ratchet>"
    push string_heap, "mod_ident:sym<sigspace>"
    push string_heap, "!PREFIX__mod_ident:sym<sigspace>"
    push string_heap, "metachar:sym<:my>"
    push string_heap, "!PREFIX__metachar:sym<:my>"
    push string_heap, "metachar:sym<{ }>"
    push string_heap, "!PREFIX__metachar:sym<{ }>"
    push string_heap, "metachar:sym<nqpvar>"
    push string_heap, "!PREFIX__metachar:sym<nqpvar>"
    push string_heap, "assertion:sym<{ }>"
    push string_heap, "!PREFIX__assertion:sym<{ }>"
    push string_heap, "assertion:sym<?{ }>"
    push string_heap, "!PREFIX__assertion:sym<?{ }>"
    push string_heap, "assertion:sym<var>"
    push string_heap, "!PREFIX__assertion:sym<var>"
    push string_heap, "codeblock"
    push string_heap, "!PREFIX__codeblock"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!names"
    push string_heap, "$!debug"
    push string_heap, "@!bstack"
    push string_heap, "@!cstack"
    push string_heap, "@!caparray"
    push string_heap, "&!regex"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "ints_to_string"
    push string_heap, "CTXSAVE"
    push string_heap, "SET_BLOCK_OUTER_CTX"
    push string_heap, "EXPR"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "termish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "decint"
    push string_heap, "hexint"
    push string_heap, "octint"
    push string_heap, "binint"
    push string_heap, "quote_EXPR"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "TOP"
    push string_heap, "deflongname"
    push string_heap, "comp_unit"
    push string_heap, "statementlist"
    push string_heap, "statement"
    push string_heap, "xblock"
    push string_heap, "pblock"
    push string_heap, "block"
    push string_heap, "blockoid"
    push string_heap, "newpad"
    push string_heap, "outerctx"
    push string_heap, "GLOBALish"
    push string_heap, "you_are_here"
    push string_heap, "statement_control:sym<use>"
    push string_heap, "statement_control:sym<if>"
    push string_heap, "statement_control:sym<unless>"
    push string_heap, "statement_control:sym<while>"
    push string_heap, "statement_control:sym<repeat>"
    push string_heap, "statement_control:sym<for>"
    push string_heap, "statement_control:sym<CATCH>"
    push string_heap, "statement_control:sym<CONTROL>"
    push string_heap, "statement_prefix:sym<BEGIN>"
    push string_heap, "statement_prefix:sym<INIT>"
    push string_heap, "statement_prefix:sym<try>"
    push string_heap, "blorst"
    push string_heap, "statement_mod_cond:sym<if>"
    push string_heap, "statement_mod_cond:sym<unless>"
    push string_heap, "statement_mod_loop:sym<while>"
    push string_heap, "statement_mod_loop:sym<until>"
    push string_heap, "term:sym<fatarrow>"
    push string_heap, "term:sym<colonpair>"
    push string_heap, "term:sym<variable>"
    push string_heap, "term:sym<package_declarator>"
    push string_heap, "term:sym<scope_declarator>"
    push string_heap, "term:sym<routine_declarator>"
    push string_heap, "term:sym<regex_declarator>"
    push string_heap, "term:sym<statement_prefix>"
    push string_heap, "term:sym<lambda>"
    push string_heap, "fatarrow"
    push string_heap, "colonpair"
    push string_heap, "variable"
    push string_heap, "package_declarator:sym<module>"
    push string_heap, "package_declarator:sym<knowhow>"
    push string_heap, "package_declarator:sym<class>"
    push string_heap, "package_declarator:sym<grammar>"
    push string_heap, "package_declarator:sym<role>"
    push string_heap, "package_declarator:sym<native>"
    push string_heap, "package_declarator:sym<stub>"
    push string_heap, "package_def"
    push string_heap, "scope_declarator:sym<my>"
    push string_heap, "scope_declarator:sym<our>"
    push string_heap, "scope_declarator:sym<has>"
    push string_heap, "scoped"
    push string_heap, "declarator"
    push string_heap, "multi_declarator:sym<multi>"
    push string_heap, "multi_declarator:sym<proto>"
    push string_heap, "multi_declarator:sym<null>"
    push string_heap, "variable_declarator"
    push string_heap, "routine_declarator:sym<sub>"
    push string_heap, "routine_declarator:sym<method>"
    push string_heap, "routine_def"
    push string_heap, "method_def"
    push string_heap, "signature"
    push string_heap, "parameter"
    push string_heap, "param_var"
    push string_heap, "named_param"
    push string_heap, "typename"
    push string_heap, "trait"
    push string_heap, "trait_mod:sym<is>"
    push string_heap, "regex_declarator"
    push string_heap, "dotty"
    push string_heap, "term:sym<self>"
    push string_heap, "term:sym<identifier>"
    push string_heap, "term:sym<name>"
    push string_heap, "term:sym<pir::op>"
    push string_heap, "term:sym<pir::const>"
    push string_heap, "term:sym<nqp::op>"
    push string_heap, "term:sym<onlystar>"
    push string_heap, "args"
    push string_heap, "arglist"
    push string_heap, "term:sym<multi_declarator>"
    push string_heap, "term:sym<value>"
    push string_heap, "circumfix:sym<( )>"
    push string_heap, "circumfix:sym<[ ]>"
    push string_heap, "circumfix:sym<ang>"
    push string_heap, unicode:"circumfix:sym<\x{ab} \x{bb}>"
    push string_heap, "circumfix:sym<{ }>"
    push string_heap, "circumfix:sym<sigil>"
    push string_heap, "semilist"
    push string_heap, "postcircumfix:sym<[ ]>"
    push string_heap, "postcircumfix:sym<{ }>"
    push string_heap, "postcircumfix:sym<ang>"
    push string_heap, "postcircumfix:sym<( )>"
    push string_heap, "value"
    push string_heap, "number"
    push string_heap, "quote:sym<apos>"
    push string_heap, "quote:sym<dblq>"
    push string_heap, "quote:sym<qq>"
    push string_heap, "quote:sym<q>"
    push string_heap, "quote:sym<Q>"
    push string_heap, "quote:sym<Q:PIR>"
    push string_heap, "quote:sym</ />"
    push string_heap, "quote_escape:sym<$>"
    push string_heap, "quote_escape:sym<{ }>"
    push string_heap, "postfix:sym<.>"
    push string_heap, "postfix:sym<++>"
    push string_heap, "postfix:sym<-->"
    push string_heap, "prefix:sym<make>"
    push string_heap, "term:sym<next>"
    push string_heap, "term:sym<last>"
    push string_heap, "term:sym<redo>"
    push string_heap, "infix:sym<~~>"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "ints_to_string"
    push string_heap, "CTXSAVE"
    push string_heap, "SET_BLOCK_OUTER_CTX"
    push string_heap, "EXPR"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "termish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "decint"
    push string_heap, "hexint"
    push string_heap, "octint"
    push string_heap, "binint"
    push string_heap, "quote_EXPR"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "arg"
    push string_heap, "arglist"
    push string_heap, "TOP"
    push string_heap, "nibbler"
    push string_heap, "termconj"
    push string_heap, "quantified_atom"
    push string_heap, "atom"
    push string_heap, "quantifier:sym<*>"
    push string_heap, "quantifier:sym<+>"
    push string_heap, "quantifier:sym<?>"
    push string_heap, "quantifier:sym<**>"
    push string_heap, "metachar:sym<ws>"
    push string_heap, "metachar:sym<[ ]>"
    push string_heap, "metachar:sym<( )>"
    push string_heap, "metachar:sym<'>"
    push string_heap, "metachar:sym<\">"
    push string_heap, "metachar:sym<.>"
    push string_heap, "metachar:sym<^>"
    push string_heap, "metachar:sym<^^>"
    push string_heap, "metachar:sym<$>"
    push string_heap, "metachar:sym<$$>"
    push string_heap, "metachar:sym<:::>"
    push string_heap, "metachar:sym<lwb>"
    push string_heap, "metachar:sym<rwb>"
    push string_heap, "metachar:sym<bs>"
    push string_heap, "metachar:sym<mod>"
    push string_heap, "metachar:sym<assert>"
    push string_heap, "metachar:sym<~>"
    push string_heap, "metachar:sym<{*}>"
    push string_heap, "metachar:sym<var>"
    push string_heap, "metachar:sym<PIR>"
    push string_heap, "backslash:sym<w>"
    push string_heap, "backslash:sym<b>"
    push string_heap, "backslash:sym<e>"
    push string_heap, "backslash:sym<f>"
    push string_heap, "backslash:sym<h>"
    push string_heap, "backslash:sym<r>"
    push string_heap, "backslash:sym<t>"
    push string_heap, "backslash:sym<v>"
    push string_heap, "backslash:sym<o>"
    push string_heap, "backslash:sym<x>"
    push string_heap, "backslash:sym<c>"
    push string_heap, "backslash:sym<misc>"
    push string_heap, "assertion:sym<?>"
    push string_heap, "assertion:sym<!>"
    push string_heap, "assertion:sym<method>"
    push string_heap, "assertion:sym<name>"
    push string_heap, "assertion:sym<[>"
    push string_heap, "cclass_elem"
    push string_heap, "mod_internal"
    push string_heap, "subrule_alias"
    push string_heap, "named_assertion"
    push string_heap, "metachar:sym<:my>"
    push string_heap, "metachar:sym<{ }>"
    push string_heap, "metachar:sym<nqpvar>"
    push string_heap, "assertion:sym<{ }>"
    push string_heap, "assertion:sym<?{ }>"
    push string_heap, "assertion:sym<var>"
    push string_heap, "codeblock"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "BUILD"
    push string_heap, "get_exports"
    push string_heap, "get_module"
    push string_heap, "language"
    push string_heap, "compiler"
    push string_heap, "config"
    push string_heap, "load_module"
    push string_heap, "import"
    push string_heap, "autoprint"
    push string_heap, "interactive"
    push string_heap, "eval"
    push string_heap, "ctxsave"
    push string_heap, "panic"
    push string_heap, "stages"
    push string_heap, "parsegrammar"
    push string_heap, "parseactions"
    push string_heap, "interactive_banner"
    push string_heap, "interactive_prompt"
    push string_heap, "compiler_progname"
    push string_heap, "commandline_options"
    push string_heap, "command_line"
    push string_heap, "command_eval"
    push string_heap, "process_args"
    push string_heap, "evalfiles"
    push string_heap, "compile"
    push string_heap, "parse"
    push string_heap, "past"
    push string_heap, "post"
    push string_heap, "pirbegin"
    push string_heap, "pir"
    push string_heap, "evalpmc"
    push string_heap, "dumper"
    push string_heap, "usage"
    push string_heap, "version"
    push string_heap, "show-config"
    push string_heap, "nqpevent"
    push string_heap, "removestage"
    push string_heap, "addstage"
    push string_heap, "parse_name"
    push string_heap, "lineof"
    push string_heap, "@!stages"
    push string_heap, "$!parsegrammar"
    push string_heap, "$!parseactions"
    push string_heap, "@!cmdoptions"
    push string_heap, "$!usage"
    push string_heap, "$!compiler_progname"
    push string_heap, "$!language"
    push string_heap, "%!config"
    push string_heap, "__6MODEL_CORE__"
    push string_heap, "GLOBALish"
    push string_heap, "97D415984FF8E196CB7E2BD4F222D84B1A0F33FD-1334921472.682"
    push string_heap, "src\\stage2\\gen\\nqp-mo.pm"
    push string_heap, "NQP::World"
    push string_heap, "@!BLOCKS"
    push string_heap, "%!code_objects_to_fix_up"
    push string_heap, "%!code_object_fixup_list"
    push string_heap, "%!code_stub_sc_idx"
    push string_heap, "push_lexpad"
    push string_heap, "pop_lexpad"
    push string_heap, "cur_lexpad"
    push string_heap, "get_legacy_block_list"
    push string_heap, "load_setting"
    push string_heap, "load_module"
    push string_heap, "install_package_symbol"
    push string_heap, "install_lexical_symbol"
    push string_heap, "install_package_routine"
    push string_heap, "create_code"
    push string_heap, "pkg_create_mo"
    push string_heap, "pkg_add_attribute"
    push string_heap, "pkg_add_method"
    push string_heap, "set_routine_signature"
    push string_heap, "set_routine_signature_on_parrot_sub"
    push string_heap, "pkg_set_body_block"
    push string_heap, "pkg_add_parent_or_role"
    push string_heap, "pkg_add_parrot_vtable_handler_mapping"
    push string_heap, "pkg_compose"
    push string_heap, "run_begin_block"
    push string_heap, "set_nqp_language_defaults"
    push string_heap, "to_past"
    push string_heap, "is_lexical"
    push string_heap, "is_package"
    push string_heap, "is_scope"
    push string_heap, "known_sym"
    push string_heap, "find_sym"
    push string_heap, "NQP::Grammar"
    push string_heap, "TOP"
    push string_heap, "identifier"
    push string_heap, "!PREFIX__identifier"
    push string_heap, "name"
    push string_heap, "!PREFIX__name"
    push string_heap, "deflongname"
    push string_heap, "!PREFIX__deflongname"
    push string_heap, "ENDSTMT"
    push string_heap, "!PREFIX__ENDSTMT"
    push string_heap, "ws"
    push string_heap, "!PREFIX__ws"
    push string_heap, "unv"
    push string_heap, "!PREFIX__unv"
    push string_heap, "pod_comment"
    push string_heap, "!PREFIX__pod_comment"
    push string_heap, "comp_unit"
    push string_heap, "!PREFIX__comp_unit"
    push string_heap, "statementlist"
    push string_heap, "!PREFIX__statementlist"
    push string_heap, "statement"
    push string_heap, "!PREFIX__statement"
    push string_heap, "eat_terminator"
    push string_heap, "!PREFIX__eat_terminator"
    push string_heap, "xblock"
    push string_heap, "!PREFIX__xblock"
    push string_heap, "pblock"
    push string_heap, "!PREFIX__pblock"
    push string_heap, "lambda"
    push string_heap, "!PREFIX__lambda"
    push string_heap, "block"
    push string_heap, "!PREFIX__block"
    push string_heap, "blockoid"
    push string_heap, "!PREFIX__blockoid"
    push string_heap, "newpad"
    push string_heap, "!PREFIX__newpad"
    push string_heap, "outerctx"
    push string_heap, "!PREFIX__outerctx"
    push string_heap, "GLOBALish"
    push string_heap, "!PREFIX__GLOBALish"
    push string_heap, "finishpad"
    push string_heap, "!PREFIX__finishpad"
    push string_heap, "you_are_here"
    push string_heap, "!PREFIX__you_are_here"
    push string_heap, "terminator"
    push string_heap, "!PREFIX__terminator"
    push string_heap, "terminator:sym<;>"
    push string_heap, "!PREFIX__terminator:sym<;>"
    push string_heap, "terminator:sym<}>"
    push string_heap, "!PREFIX__terminator:sym<}>"
    push string_heap, "statement_control"
    push string_heap, "!PREFIX__statement_control"
    push string_heap, "statement_control:sym<use>"
    push string_heap, "!PREFIX__statement_control:sym<use>"
    push string_heap, "statement_control:sym<if>"
    push string_heap, "!PREFIX__statement_control:sym<if>"
    push string_heap, "statement_control:sym<unless>"
    push string_heap, "!PREFIX__statement_control:sym<unless>"
    push string_heap, "statement_control:sym<while>"
    push string_heap, "!PREFIX__statement_control:sym<while>"
    push string_heap, "statement_control:sym<repeat>"
    push string_heap, "!PREFIX__statement_control:sym<repeat>"
    push string_heap, "statement_control:sym<for>"
    push string_heap, "!PREFIX__statement_control:sym<for>"
    push string_heap, "statement_control:sym<CATCH>"
    push string_heap, "!PREFIX__statement_control:sym<CATCH>"
    push string_heap, "statement_control:sym<CONTROL>"
    push string_heap, "!PREFIX__statement_control:sym<CONTROL>"
    push string_heap, "statement_prefix"
    push string_heap, "!PREFIX__statement_prefix"
    push string_heap, "statement_prefix:sym<BEGIN>"
    push string_heap, "!PREFIX__statement_prefix:sym<BEGIN>"
    push string_heap, "statement_prefix:sym<INIT>"
    push string_heap, "!PREFIX__statement_prefix:sym<INIT>"
    push string_heap, "statement_prefix:sym<try>"
    push string_heap, "!PREFIX__statement_prefix:sym<try>"
    push string_heap, "blorst"
    push string_heap, "!PREFIX__blorst"
    push string_heap, "statement_mod_cond"
    push string_heap, "!PREFIX__statement_mod_cond"
    push string_heap, "statement_mod_cond:sym<if>"
    push string_heap, "!PREFIX__statement_mod_cond:sym<if>"
    push string_heap, "statement_mod_cond:sym<unless>"
    push string_heap, "!PREFIX__statement_mod_cond:sym<unless>"
    push string_heap, "statement_mod_loop"
    push string_heap, "!PREFIX__statement_mod_loop"
    push string_heap, "statement_mod_loop:sym<while>"
    push string_heap, "!PREFIX__statement_mod_loop:sym<while>"
    push string_heap, "statement_mod_loop:sym<until>"
    push string_heap, "!PREFIX__statement_mod_loop:sym<until>"
    push string_heap, "statement_mod_loop:sym<for>"
    push string_heap, "!PREFIX__statement_mod_loop:sym<for>"
    push string_heap, "term:sym<fatarrow>"
    push string_heap, "!PREFIX__term:sym<fatarrow>"
    push string_heap, "term:sym<colonpair>"
    push string_heap, "!PREFIX__term:sym<colonpair>"
    push string_heap, "term:sym<variable>"
    push string_heap, "!PREFIX__term:sym<variable>"
    push string_heap, "term:sym<package_declarator>"
    push string_heap, "!PREFIX__term:sym<package_declarator>"
    push string_heap, "term:sym<scope_declarator>"
    push string_heap, "!PREFIX__term:sym<scope_declarator>"
    push string_heap, "term:sym<routine_declarator>"
    push string_heap, "!PREFIX__term:sym<routine_declarator>"
    push string_heap, "term:sym<multi_declarator>"
    push string_heap, "!PREFIX__term:sym<multi_declarator>"
    push string_heap, "term:sym<regex_declarator>"
    push string_heap, "!PREFIX__term:sym<regex_declarator>"
    push string_heap, "term:sym<statement_prefix>"
    push string_heap, "!PREFIX__term:sym<statement_prefix>"
    push string_heap, "term:sym<lambda>"
    push string_heap, "!PREFIX__term:sym<lambda>"
    push string_heap, "fatarrow"
    push string_heap, "!PREFIX__fatarrow"
    push string_heap, "colonpair"
    push string_heap, "!PREFIX__colonpair"
    push string_heap, "variable"
    push string_heap, "!PREFIX__variable"
    push string_heap, "sigil"
    push string_heap, "!PREFIX__sigil"
    push string_heap, "twigil"
    push string_heap, "!PREFIX__twigil"
    push string_heap, "package_declarator"
    push string_heap, "!PREFIX__package_declarator"
    push string_heap, "package_declarator:sym<module>"
    push string_heap, "!PREFIX__package_declarator:sym<module>"
    push string_heap, "package_declarator:sym<knowhow>"
    push string_heap, "!PREFIX__package_declarator:sym<knowhow>"
    push string_heap, "package_declarator:sym<class>"
    push string_heap, "!PREFIX__package_declarator:sym<class>"
    push string_heap, "package_declarator:sym<grammar>"
    push string_heap, "!PREFIX__package_declarator:sym<grammar>"
    push string_heap, "package_declarator:sym<role>"
    push string_heap, "!PREFIX__package_declarator:sym<role>"
    push string_heap, "package_declarator:sym<native>"
    push string_heap, "!PREFIX__package_declarator:sym<native>"
    push string_heap, "package_declarator:sym<stub>"
    push string_heap, "!PREFIX__package_declarator:sym<stub>"
    push string_heap, "package_def"
    push string_heap, "!PREFIX__package_def"
    push string_heap, "scope_declarator"
    push string_heap, "!PREFIX__scope_declarator"
    push string_heap, "scope_declarator:sym<my>"
    push string_heap, "!PREFIX__scope_declarator:sym<my>"
    push string_heap, "scope_declarator:sym<our>"
    push string_heap, "!PREFIX__scope_declarator:sym<our>"
    push string_heap, "scope_declarator:sym<has>"
    push string_heap, "!PREFIX__scope_declarator:sym<has>"
    push string_heap, "scoped"
    push string_heap, "!PREFIX__scoped"
    push string_heap, "typename"
    push string_heap, "!PREFIX__typename"
    push string_heap, "declarator"
    push string_heap, "!PREFIX__declarator"
    push string_heap, "variable_declarator"
    push string_heap, "!PREFIX__variable_declarator"
    push string_heap, "routine_declarator"
    push string_heap, "!PREFIX__routine_declarator"
    push string_heap, "routine_declarator:sym<sub>"
    push string_heap, "!PREFIX__routine_declarator:sym<sub>"
    push string_heap, "routine_declarator:sym<method>"
    push string_heap, "!PREFIX__routine_declarator:sym<method>"
    push string_heap, "routine_def"
    push string_heap, "!PREFIX__routine_def"
    push string_heap, "method_def"
    push string_heap, "!PREFIX__method_def"
    push string_heap, "onlystar"
    push string_heap, "!PREFIX__onlystar"
    push string_heap, "multi_declarator"
    push string_heap, "!PREFIX__multi_declarator"
    push string_heap, "multi_declarator:sym<multi>"
    push string_heap, "!PREFIX__multi_declarator:sym<multi>"
    push string_heap, "multi_declarator:sym<proto>"
    push string_heap, "!PREFIX__multi_declarator:sym<proto>"
    push string_heap, "multi_declarator:sym<null>"
    push string_heap, "!PREFIX__multi_declarator:sym<null>"
    push string_heap, "signature"
    push string_heap, "!PREFIX__signature"
    push string_heap, "parameter"
    push string_heap, "!PREFIX__parameter"
    push string_heap, "param_var"
    push string_heap, "!PREFIX__param_var"
    push string_heap, "named_param"
    push string_heap, "!PREFIX__named_param"
    push string_heap, "default_value"
    push string_heap, "!PREFIX__default_value"
    push string_heap, "trait"
    push string_heap, "!PREFIX__trait"
    push string_heap, "trait_mod"
    push string_heap, "!PREFIX__trait_mod"
    push string_heap, "trait_mod:sym<is>"
    push string_heap, "!PREFIX__trait_mod:sym<is>"
    push string_heap, "regex_declarator"
    push string_heap, "!PREFIX__regex_declarator"
    push string_heap, "dotty"
    push string_heap, "!PREFIX__dotty"
    push string_heap, "term"
    push string_heap, "!PREFIX__term"
    push string_heap, "term:sym<self>"
    push string_heap, "!PREFIX__term:sym<self>"
    push string_heap, "term:sym<identifier>"
    push string_heap, "!PREFIX__term:sym<identifier>"
    push string_heap, "term:sym<name>"
    push string_heap, "!PREFIX__term:sym<name>"
    push string_heap, "term:sym<pir::op>"
    push string_heap, "!PREFIX__term:sym<pir::op>"
    push string_heap, "term:sym<pir::const>"
    push string_heap, "!PREFIX__term:sym<pir::const>"
    push string_heap, "term:sym<nqp::op>"
    push string_heap, "!PREFIX__term:sym<nqp::op>"
    push string_heap, "term:sym<onlystar>"
    push string_heap, "!PREFIX__term:sym<onlystar>"
    push string_heap, "args"
    push string_heap, "!PREFIX__args"
    push string_heap, "arglist"
    push string_heap, "!PREFIX__arglist"
    push string_heap, "term:sym<value>"
    push string_heap, "!PREFIX__term:sym<value>"
    push string_heap, "value"
    push string_heap, "!PREFIX__value"
    push string_heap, "number"
    push string_heap, "!PREFIX__number"
    push string_heap, "quote"
    push string_heap, "!PREFIX__quote"
    push string_heap, "quote:sym<apos>"
    push string_heap, "!PREFIX__quote:sym<apos>"
    push string_heap, "quote:sym<dblq>"
    push string_heap, "!PREFIX__quote:sym<dblq>"
    push string_heap, "quote:sym<q>"
    push string_heap, "!PREFIX__quote:sym<q>"
    push string_heap, "quote:sym<qq>"
    push string_heap, "!PREFIX__quote:sym<qq>"
    push string_heap, "quote:sym<Q>"
    push string_heap, "!PREFIX__quote:sym<Q>"
    push string_heap, "quote:sym<Q:PIR>"
    push string_heap, "!PREFIX__quote:sym<Q:PIR>"
    push string_heap, "quote:sym</ />"
    push string_heap, "!PREFIX__quote:sym</ />"
    push string_heap, "quote_escape:sym<$>"
    push string_heap, "!PREFIX__quote_escape:sym<$>"
    push string_heap, "quote_escape:sym<{ }>"
    push string_heap, "!PREFIX__quote_escape:sym<{ }>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "!PREFIX__quote_escape:sym<esc>"
    push string_heap, "circumfix:sym<( )>"
    push string_heap, "!PREFIX__circumfix:sym<( )>"
    push string_heap, "circumfix:sym<[ ]>"
    push string_heap, "!PREFIX__circumfix:sym<[ ]>"
    push string_heap, "circumfix:sym<ang>"
    push string_heap, "!PREFIX__circumfix:sym<ang>"
    push string_heap, unicode:"circumfix:sym<\x{ab} \x{bb}>"
    push string_heap, unicode:"!PREFIX__circumfix:sym<\x{ab} \x{bb}>"
    push string_heap, "circumfix:sym<{ }>"
    push string_heap, "!PREFIX__circumfix:sym<{ }>"
    push string_heap, "circumfix:sym<sigil>"
    push string_heap, "!PREFIX__circumfix:sym<sigil>"
    push string_heap, "semilist"
    push string_heap, "!PREFIX__semilist"
    push string_heap, "infixish"
    push string_heap, "!PREFIX__infixish"
    push string_heap, "infixstopper"
    push string_heap, "!PREFIX__infixstopper"
    push string_heap, "postcircumfix:sym<[ ]>"
    push string_heap, "!PREFIX__postcircumfix:sym<[ ]>"
    push string_heap, "postcircumfix:sym<{ }>"
    push string_heap, "!PREFIX__postcircumfix:sym<{ }>"
    push string_heap, "postcircumfix:sym<ang>"
    push string_heap, "!PREFIX__postcircumfix:sym<ang>"
    push string_heap, "postcircumfix:sym<( )>"
    push string_heap, "!PREFIX__postcircumfix:sym<( )>"
    push string_heap, "postfix:sym<.>"
    push string_heap, "!PREFIX__postfix:sym<.>"
    push string_heap, "prefix:sym<++>"
    push string_heap, "!PREFIX__prefix:sym<++>"
    push string_heap, "prefix:sym<-->"
    push string_heap, "!PREFIX__prefix:sym<-->"
    push string_heap, "postfix:sym<++>"
    push string_heap, "!PREFIX__postfix:sym<++>"
    push string_heap, "postfix:sym<-->"
    push string_heap, "!PREFIX__postfix:sym<-->"
    push string_heap, "infix:sym<**>"
    push string_heap, "!PREFIX__infix:sym<**>"
    push string_heap, "prefix:sym<+>"
    push string_heap, "!PREFIX__prefix:sym<+>"
    push string_heap, "prefix:sym<~>"
    push string_heap, "!PREFIX__prefix:sym<~>"
    push string_heap, "prefix:sym<->"
    push string_heap, "!PREFIX__prefix:sym<->"
    push string_heap, "prefix:sym<?>"
    push string_heap, "!PREFIX__prefix:sym<?>"
    push string_heap, "prefix:sym<!>"
    push string_heap, "!PREFIX__prefix:sym<!>"
    push string_heap, "prefix:sym<|>"
    push string_heap, "!PREFIX__prefix:sym<|>"
    push string_heap, "infix:sym<*>"
    push string_heap, "!PREFIX__infix:sym<*>"
    push string_heap, "infix:sym</>"
    push string_heap, "!PREFIX__infix:sym</>"
    push string_heap, "infix:sym<%>"
    push string_heap, "!PREFIX__infix:sym<%>"
    push string_heap, "infix:sym<+&>"
    push string_heap, "!PREFIX__infix:sym<+&>"
    push string_heap, "infix:sym<+>"
    push string_heap, "!PREFIX__infix:sym<+>"
    push string_heap, "infix:sym<->"
    push string_heap, "!PREFIX__infix:sym<->"
    push string_heap, "infix:sym<+|>"
    push string_heap, "!PREFIX__infix:sym<+|>"
    push string_heap, "infix:sym<+^>"
    push string_heap, "!PREFIX__infix:sym<+^>"
    push string_heap, "infix:sym<~>"
    push string_heap, "!PREFIX__infix:sym<~>"
    push string_heap, "infix:sym<==>"
    push string_heap, "!PREFIX__infix:sym<==>"
    push string_heap, "infix:sym<!=>"
    push string_heap, "!PREFIX__infix:sym<!=>"
    push string_heap, "infix:sym<<=>"
    push string_heap, "!PREFIX__infix:sym<<=>"
    push string_heap, "infix:sym<>=>"
    push string_heap, "!PREFIX__infix:sym<>=>"
    push string_heap, "infix:sym<<>"
    push string_heap, "!PREFIX__infix:sym<<>"
    push string_heap, "infix:sym<>>"
    push string_heap, "!PREFIX__infix:sym<>>"
    push string_heap, "infix:sym<eq>"
    push string_heap, "!PREFIX__infix:sym<eq>"
    push string_heap, "infix:sym<ne>"
    push string_heap, "!PREFIX__infix:sym<ne>"
    push string_heap, "infix:sym<le>"
    push string_heap, "!PREFIX__infix:sym<le>"
    push string_heap, "infix:sym<ge>"
    push string_heap, "!PREFIX__infix:sym<ge>"
    push string_heap, "infix:sym<lt>"
    push string_heap, "!PREFIX__infix:sym<lt>"
    push string_heap, "infix:sym<gt>"
    push string_heap, "!PREFIX__infix:sym<gt>"
    push string_heap, "infix:sym<=:=>"
    push string_heap, "!PREFIX__infix:sym<=:=>"
    push string_heap, "infix:sym<~~>"
    push string_heap, "!PREFIX__infix:sym<~~>"
    push string_heap, "infix:sym<&&>"
    push string_heap, "!PREFIX__infix:sym<&&>"
    push string_heap, "infix:sym<||>"
    push string_heap, "!PREFIX__infix:sym<||>"
    push string_heap, "infix:sym<//>"
    push string_heap, "!PREFIX__infix:sym<//>"
    push string_heap, "infix:sym<?? !!>"
    push string_heap, "!PREFIX__infix:sym<?? !!>"
    push string_heap, "infix:sym<=>"
    push string_heap, "!PREFIX__infix:sym<=>"
    push string_heap, "infix:sym<:=>"
    push string_heap, "!PREFIX__infix:sym<:=>"
    push string_heap, "infix:sym<::=>"
    push string_heap, "!PREFIX__infix:sym<::=>"
    push string_heap, "infix:sym<,>"
    push string_heap, "!PREFIX__infix:sym<,>"
    push string_heap, "prefix:sym<return>"
    push string_heap, "!PREFIX__prefix:sym<return>"
    push string_heap, "prefix:sym<make>"
    push string_heap, "!PREFIX__prefix:sym<make>"
    push string_heap, "term:sym<last>"
    push string_heap, "!PREFIX__term:sym<last>"
    push string_heap, "term:sym<next>"
    push string_heap, "!PREFIX__term:sym<next>"
    push string_heap, "term:sym<redo>"
    push string_heap, "!PREFIX__term:sym<redo>"
    push string_heap, "smartmatch"
    push string_heap, "NQP::Regex"
    push string_heap, "metachar:sym<:my>"
    push string_heap, "!PREFIX__metachar:sym<:my>"
    push string_heap, "metachar:sym<{ }>"
    push string_heap, "!PREFIX__metachar:sym<{ }>"
    push string_heap, "metachar:sym<nqpvar>"
    push string_heap, "!PREFIX__metachar:sym<nqpvar>"
    push string_heap, "assertion:sym<{ }>"
    push string_heap, "!PREFIX__assertion:sym<{ }>"
    push string_heap, "assertion:sym<?{ }>"
    push string_heap, "!PREFIX__assertion:sym<?{ }>"
    push string_heap, "assertion:sym<name>"
    push string_heap, "!PREFIX__assertion:sym<name>"
    push string_heap, "assertion:sym<var>"
    push string_heap, "!PREFIX__assertion:sym<var>"
    push string_heap, "codeblock"
    push string_heap, "!PREFIX__codeblock"
    push string_heap, "NQP::Actions"
    push string_heap, "TOP"
    push string_heap, "deflongname"
    push string_heap, "comp_unit"
    push string_heap, "statementlist"
    push string_heap, "statement"
    push string_heap, "xblock"
    push string_heap, "pblock"
    push string_heap, "block"
    push string_heap, "blockoid"
    push string_heap, "newpad"
    push string_heap, "outerctx"
    push string_heap, "GLOBALish"
    push string_heap, "you_are_here"
    push string_heap, "statement_control:sym<use>"
    push string_heap, "statement_control:sym<if>"
    push string_heap, "statement_control:sym<unless>"
    push string_heap, "statement_control:sym<while>"
    push string_heap, "statement_control:sym<repeat>"
    push string_heap, "statement_control:sym<for>"
    push string_heap, "statement_control:sym<CATCH>"
    push string_heap, "statement_control:sym<CONTROL>"
    push string_heap, "statement_prefix:sym<BEGIN>"
    push string_heap, "statement_prefix:sym<INIT>"
    push string_heap, "statement_prefix:sym<try>"
    push string_heap, "blorst"
    push string_heap, "statement_mod_cond:sym<if>"
    push string_heap, "statement_mod_cond:sym<unless>"
    push string_heap, "statement_mod_loop:sym<while>"
    push string_heap, "statement_mod_loop:sym<until>"
    push string_heap, "term:sym<fatarrow>"
    push string_heap, "term:sym<colonpair>"
    push string_heap, "term:sym<variable>"
    push string_heap, "term:sym<package_declarator>"
    push string_heap, "term:sym<scope_declarator>"
    push string_heap, "term:sym<routine_declarator>"
    push string_heap, "term:sym<regex_declarator>"
    push string_heap, "term:sym<statement_prefix>"
    push string_heap, "term:sym<lambda>"
    push string_heap, "fatarrow"
    push string_heap, "colonpair"
    push string_heap, "variable"
    push string_heap, "package_declarator:sym<module>"
    push string_heap, "package_declarator:sym<knowhow>"
    push string_heap, "package_declarator:sym<class>"
    push string_heap, "package_declarator:sym<grammar>"
    push string_heap, "package_declarator:sym<role>"
    push string_heap, "package_declarator:sym<native>"
    push string_heap, "package_declarator:sym<stub>"
    push string_heap, "package_def"
    push string_heap, "scope_declarator:sym<my>"
    push string_heap, "scope_declarator:sym<our>"
    push string_heap, "scope_declarator:sym<has>"
    push string_heap, "scoped"
    push string_heap, "declarator"
    push string_heap, "multi_declarator:sym<multi>"
    push string_heap, "multi_declarator:sym<proto>"
    push string_heap, "multi_declarator:sym<null>"
    push string_heap, "variable_declarator"
    push string_heap, "routine_declarator:sym<sub>"
    push string_heap, "routine_declarator:sym<method>"
    push string_heap, "routine_def"
    push string_heap, "method_def"
    push string_heap, "signature"
    push string_heap, "parameter"
    push string_heap, "param_var"
    push string_heap, "named_param"
    push string_heap, "typename"
    push string_heap, "trait"
    push string_heap, "trait_mod:sym<is>"
    push string_heap, "regex_declarator"
    push string_heap, "dotty"
    push string_heap, "term:sym<self>"
    push string_heap, "term:sym<identifier>"
    push string_heap, "term:sym<name>"
    push string_heap, "term:sym<pir::op>"
    push string_heap, "term:sym<pir::const>"
    push string_heap, "term:sym<nqp::op>"
    push string_heap, "term:sym<onlystar>"
    push string_heap, "args"
    push string_heap, "arglist"
    push string_heap, "term:sym<multi_declarator>"
    push string_heap, "term:sym<value>"
    push string_heap, "circumfix:sym<( )>"
    push string_heap, "circumfix:sym<[ ]>"
    push string_heap, "circumfix:sym<ang>"
    push string_heap, unicode:"circumfix:sym<\x{ab} \x{bb}>"
    push string_heap, "circumfix:sym<{ }>"
    push string_heap, "circumfix:sym<sigil>"
    push string_heap, "semilist"
    push string_heap, "postcircumfix:sym<[ ]>"
    push string_heap, "postcircumfix:sym<{ }>"
    push string_heap, "postcircumfix:sym<ang>"
    push string_heap, "postcircumfix:sym<( )>"
    push string_heap, "value"
    push string_heap, "number"
    push string_heap, "quote:sym<apos>"
    push string_heap, "quote:sym<dblq>"
    push string_heap, "quote:sym<qq>"
    push string_heap, "quote:sym<q>"
    push string_heap, "quote:sym<Q>"
    push string_heap, "quote:sym<Q:PIR>"
    push string_heap, "quote:sym</ />"
    push string_heap, "quote_escape:sym<$>"
    push string_heap, "quote_escape:sym<{ }>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "postfix:sym<.>"
    push string_heap, "postfix:sym<++>"
    push string_heap, "postfix:sym<-->"
    push string_heap, "prefix:sym<make>"
    push string_heap, "term:sym<next>"
    push string_heap, "term:sym<last>"
    push string_heap, "term:sym<redo>"
    push string_heap, "infix:sym<~~>"
    push string_heap, "NQP::RegexActions"
    push string_heap, "metachar:sym<:my>"
    push string_heap, "metachar:sym<{ }>"
    push string_heap, "metachar:sym<nqpvar>"
    push string_heap, "assertion:sym<{ }>"
    push string_heap, "assertion:sym<?{ }>"
    push string_heap, "assertion:sym<var>"
    push string_heap, "codeblock"
    push string_heap, "NQP::Compiler"
    push string_heap, "P6opaque"
    push string_heap, "Cursor"
    push string_heap, "Match"
    push string_heap, "Method"
    push string_heap, "Regex"
    push string_heap, "P6Regex"
    push string_heap, "P6opaque"
    push string_heap, "Grammar"
    push string_heap, "Actions"
    push string_heap, "Compiler"
    push string_heap, "CommandLine"
    push string_heap, "World"
    push string_heap, "P6opaque"
    push string_heap, "World"
    push string_heap, "Grammar"
    push string_heap, "Regex"
    push string_heap, "Actions"
    push string_heap, "RegexActions"
    push string_heap, "Compiler"
    push string_heap, "@!BLOCKS"
    push string_heap, "%!code_objects_to_fix_up"
    push string_heap, "%!code_object_fixup_list"
    push string_heap, "%!code_stub_sc_idx"
    push string_heap, "Regex"
    push string_heap, "HLL"
    push string_heap, "NQP"
    push string_heap, "P6opaque"
    push string_heap, "Grammar"
    push string_heap, "Actions"
    push string_heap, "Compiler"
    push string_heap, "P6Regex"
    .const 'Sub' $P3886 = "655_1334921493.34" 
    capture_lex $P3886
    $P117 = $P3886()
    nqp_deserialize_sc $S100, cur_sc, string_heap, $P117
    .const 'LexInfo' $P4419 = "542_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 0
    $P4419."set_static_lexpad_value"("GLOBALish", $P118)
    .const 'LexInfo' $P4420 = "542_1334921493.34" 
    $P4420."finish_static_lexpad"()
    .const 'LexInfo' $P4421 = "542_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 0
    $P4421."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4422 = "542_1334921493.34" 
    $P4422."finish_static_lexpad"()
    .const '' $P4423 = "10_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 2
    set_sub_code_object $P4423, $P118
    .const '' $P4424 = "11_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 3
    set_sub_code_object $P4424, $P118
    .const '' $P4425 = "12_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 4
    set_sub_code_object $P4425, $P118
    .const '' $P4426 = "13_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 5
    set_sub_code_object $P4426, $P118
    .const '' $P4427 = "14_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 6
    set_sub_code_object $P4427, $P118
    .const '' $P4428 = "15_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 7
    set_sub_code_object $P4428, $P118
    .const '' $P4429 = "16_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 8
    set_sub_code_object $P4429, $P118
    .const '' $P4430 = "17_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 9
    set_sub_code_object $P4430, $P118
    .const '' $P4431 = "18_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 10
    set_sub_code_object $P4431, $P118
    .const '' $P4432 = "19_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 11
    set_sub_code_object $P4432, $P118
    .const '' $P4433 = "20_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 12
    set_sub_code_object $P4433, $P118
    .const '' $P4434 = "21_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 13
    set_sub_code_object $P4434, $P118
    .const '' $P4435 = "22_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 14
    set_sub_code_object $P4435, $P118
    .const '' $P4436 = "23_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 15
    set_sub_code_object $P4436, $P118
    .const '' $P4437 = "24_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 16
    set_sub_code_object $P4437, $P118
    .const '' $P4438 = "25_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 17
    set_sub_code_object $P4438, $P118
    .const '' $P4439 = "26_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 18
    set_sub_code_object $P4439, $P118
    .const '' $P4440 = "27_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 19
    set_sub_code_object $P4440, $P118
    .const '' $P4441 = "28_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 20
    set_sub_code_object $P4441, $P118
    .const '' $P4442 = "29_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 21
    set_sub_code_object $P4442, $P118
    .const '' $P4443 = "30_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 22
    set_sub_code_object $P4443, $P118
    .const '' $P4444 = "31_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 23
    set_sub_code_object $P4444, $P118
    .const '' $P4445 = "32_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 24
    set_sub_code_object $P4445, $P118
    .const '' $P4446 = "33_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 25
    set_sub_code_object $P4446, $P118
    .const '' $P4447 = "34_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 26
    set_sub_code_object $P4447, $P118
    .const '' $P4448 = "35_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 27
    set_sub_code_object $P4448, $P118
    .const '' $P4449 = "36_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 28
    set_sub_code_object $P4449, $P118
    .const '' $P4450 = "37_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 29
    set_sub_code_object $P4450, $P118
    .const '' $P4451 = "38_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 30
    set_sub_code_object $P4451, $P118
    .const '' $P4452 = "39_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 31
    set_sub_code_object $P4452, $P118
    .const 'LexInfo' $P4453 = "545_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    $P4453."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4454 = "545_1334921493.34" 
    $P4454."finish_static_lexpad"()
    .const 'LexInfo' $P4455 = "545_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    $P4455."set_static_lexpad_value"("$?CLASS", $P118)
    .const 'LexInfo' $P4456 = "545_1334921493.34" 
    $P4456."finish_static_lexpad"()
    .const '' $P4457 = "40_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 33
    set_sub_code_object $P4457, $P118
    .const '' $P4458 = "41_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 34
    set_sub_code_object $P4458, $P118
    .const '' $P4459 = "42_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 35
    set_sub_code_object $P4459, $P118
    .const '' $P4460 = "43_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 36
    set_sub_code_object $P4460, $P118
    .const '' $P4461 = "44_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 37
    set_sub_code_object $P4461, $P118
    .const '' $P4462 = "45_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 38
    set_sub_code_object $P4462, $P118
    .const '' $P4463 = "46_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 39
    set_sub_code_object $P4463, $P118
    .const '' $P4464 = "47_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 40
    set_sub_code_object $P4464, $P118
    .const '' $P4465 = "48_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 41
    set_sub_code_object $P4465, $P118
    .const '' $P4466 = "49_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 42
    set_sub_code_object $P4466, $P118
    .const '' $P4467 = "50_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 43
    set_sub_code_object $P4467, $P118
    .const '' $P4468 = "51_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 44
    set_sub_code_object $P4468, $P118
    .const '' $P4469 = "52_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 45
    set_sub_code_object $P4469, $P118
    .const '' $P4470 = "53_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 46
    set_sub_code_object $P4470, $P118
    .const '' $P4471 = "54_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 47
    set_sub_code_object $P4471, $P118
    .const '' $P4472 = "55_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 48
    set_sub_code_object $P4472, $P118
    .const '' $P4473 = "56_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 49
    set_sub_code_object $P4473, $P118
    .const '' $P4474 = "57_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 50
    set_sub_code_object $P4474, $P118
    .const '' $P4475 = "58_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 51
    set_sub_code_object $P4475, $P118
    .const '' $P4476 = "59_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 52
    set_sub_code_object $P4476, $P118
    .const '' $P4477 = "60_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 53
    set_sub_code_object $P4477, $P118
    .const '' $P4478 = "61_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 54
    set_sub_code_object $P4478, $P118
    .const '' $P4479 = "62_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 55
    set_sub_code_object $P4479, $P118
    .const '' $P4480 = "63_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 56
    set_sub_code_object $P4480, $P118
    .const '' $P4481 = "64_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 57
    set_sub_code_object $P4481, $P118
    .const '' $P4482 = "65_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 58
    set_sub_code_object $P4482, $P118
    .const '' $P4483 = "66_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 59
    set_sub_code_object $P4483, $P118
    .const '' $P4484 = "67_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 60
    set_sub_code_object $P4484, $P118
    .const '' $P4485 = "68_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 61
    set_sub_code_object $P4485, $P118
    .const '' $P4486 = "69_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 62
    set_sub_code_object $P4486, $P118
    .const '' $P4487 = "70_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 63
    set_sub_code_object $P4487, $P118
    .const '' $P4488 = "71_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 64
    set_sub_code_object $P4488, $P118
    .const '' $P4489 = "72_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 65
    set_sub_code_object $P4489, $P118
    .const '' $P4490 = "73_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 66
    set_sub_code_object $P4490, $P118
    .const '' $P4491 = "74_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 67
    set_sub_code_object $P4491, $P118
    .const '' $P4492 = "75_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 68
    set_sub_code_object $P4492, $P118
    .const '' $P4493 = "76_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 69
    set_sub_code_object $P4493, $P118
    .const '' $P4494 = "77_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 70
    set_sub_code_object $P4494, $P118
    .const '' $P4495 = "78_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 71
    set_sub_code_object $P4495, $P118
    .const '' $P4496 = "79_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 72
    set_sub_code_object $P4496, $P118
    .const '' $P4497 = "80_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 73
    set_sub_code_object $P4497, $P118
    .const '' $P4498 = "81_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 74
    set_sub_code_object $P4498, $P118
    .const '' $P4499 = "82_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 75
    set_sub_code_object $P4499, $P118
    .const '' $P4500 = "83_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 76
    set_sub_code_object $P4500, $P118
    .const '' $P4501 = "84_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 77
    set_sub_code_object $P4501, $P118
    .const '' $P4502 = "85_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 78
    set_sub_code_object $P4502, $P118
    .const '' $P4503 = "86_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 79
    set_sub_code_object $P4503, $P118
    .const '' $P4504 = "87_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 80
    set_sub_code_object $P4504, $P118
    .const '' $P4505 = "88_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 81
    set_sub_code_object $P4505, $P118
    .const '' $P4506 = "89_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 82
    set_sub_code_object $P4506, $P118
    .const '' $P4507 = "90_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 83
    set_sub_code_object $P4507, $P118
    .const '' $P4508 = "91_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 84
    set_sub_code_object $P4508, $P118
    .const '' $P4509 = "92_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 85
    set_sub_code_object $P4509, $P118
    .const '' $P4510 = "93_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 86
    set_sub_code_object $P4510, $P118
    .const '' $P4511 = "94_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 87
    set_sub_code_object $P4511, $P118
    .const '' $P4512 = "95_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 88
    set_sub_code_object $P4512, $P118
    .const '' $P4513 = "96_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 89
    set_sub_code_object $P4513, $P118
    .const '' $P4514 = "97_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 90
    set_sub_code_object $P4514, $P118
    .const '' $P4515 = "98_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 91
    set_sub_code_object $P4515, $P118
    .const '' $P4516 = "99_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 92
    set_sub_code_object $P4516, $P118
    .const '' $P4517 = "100_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 93
    set_sub_code_object $P4517, $P118
    .const '' $P4518 = "101_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 94
    set_sub_code_object $P4518, $P118
    .const '' $P4519 = "102_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 95
    set_sub_code_object $P4519, $P118
    .const '' $P4520 = "103_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 96
    set_sub_code_object $P4520, $P118
    .const '' $P4521 = "104_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 97
    set_sub_code_object $P4521, $P118
    .const '' $P4522 = "105_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 98
    set_sub_code_object $P4522, $P118
    .const '' $P4523 = "106_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 99
    set_sub_code_object $P4523, $P118
    .const '' $P4524 = "107_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 100
    set_sub_code_object $P4524, $P118
    .const '' $P4525 = "108_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 101
    set_sub_code_object $P4525, $P118
    .const '' $P4526 = "109_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 102
    set_sub_code_object $P4526, $P118
    .const '' $P4527 = "110_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 103
    set_sub_code_object $P4527, $P118
    .const '' $P4528 = "111_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 104
    set_sub_code_object $P4528, $P118
    .const '' $P4529 = "112_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 105
    set_sub_code_object $P4529, $P118
    .const '' $P4530 = "113_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 106
    set_sub_code_object $P4530, $P118
    .const '' $P4531 = "114_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 107
    set_sub_code_object $P4531, $P118
    .const '' $P4532 = "115_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 108
    set_sub_code_object $P4532, $P118
    .const '' $P4533 = "116_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 109
    set_sub_code_object $P4533, $P118
    .const '' $P4534 = "117_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 110
    set_sub_code_object $P4534, $P118
    .const '' $P4535 = "118_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 111
    set_sub_code_object $P4535, $P118
    .const '' $P4536 = "119_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 112
    set_sub_code_object $P4536, $P118
    .const '' $P4537 = "120_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 113
    set_sub_code_object $P4537, $P118
    .const '' $P4538 = "121_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 114
    set_sub_code_object $P4538, $P118
    .const '' $P4539 = "122_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 115
    set_sub_code_object $P4539, $P118
    .const '' $P4540 = "123_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 116
    set_sub_code_object $P4540, $P118
    .const '' $P4541 = "124_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 117
    set_sub_code_object $P4541, $P118
    .const '' $P4542 = "125_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 118
    set_sub_code_object $P4542, $P118
    .const '' $P4543 = "126_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 119
    set_sub_code_object $P4543, $P118
    .const '' $P4544 = "127_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 120
    set_sub_code_object $P4544, $P118
    .const '' $P4545 = "128_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 121
    set_sub_code_object $P4545, $P118
    .const '' $P4546 = "129_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 122
    set_sub_code_object $P4546, $P118
    .const '' $P4547 = "130_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 123
    set_sub_code_object $P4547, $P118
    .const '' $P4548 = "131_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 124
    set_sub_code_object $P4548, $P118
    .const '' $P4549 = "132_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 125
    set_sub_code_object $P4549, $P118
    .const '' $P4550 = "133_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 126
    set_sub_code_object $P4550, $P118
    .const '' $P4551 = "134_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 127
    set_sub_code_object $P4551, $P118
    .const '' $P4552 = "135_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 128
    set_sub_code_object $P4552, $P118
    .const '' $P4553 = "136_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 129
    set_sub_code_object $P4553, $P118
    .const '' $P4554 = "137_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 130
    set_sub_code_object $P4554, $P118
    .const '' $P4555 = "138_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 131
    set_sub_code_object $P4555, $P118
    .const '' $P4556 = "139_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 132
    set_sub_code_object $P4556, $P118
    .const '' $P4557 = "140_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 133
    set_sub_code_object $P4557, $P118
    .const '' $P4558 = "141_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 134
    set_sub_code_object $P4558, $P118
    .const '' $P4559 = "142_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 135
    set_sub_code_object $P4559, $P118
    .const '' $P4560 = "143_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 136
    set_sub_code_object $P4560, $P118
    .const '' $P4561 = "144_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 137
    set_sub_code_object $P4561, $P118
    .const '' $P4562 = "145_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 138
    set_sub_code_object $P4562, $P118
    .const '' $P4563 = "146_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 139
    set_sub_code_object $P4563, $P118
    .const '' $P4564 = "147_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 140
    set_sub_code_object $P4564, $P118
    .const '' $P4565 = "148_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 141
    set_sub_code_object $P4565, $P118
    .const '' $P4566 = "149_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 142
    set_sub_code_object $P4566, $P118
    .const '' $P4567 = "150_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 143
    set_sub_code_object $P4567, $P118
    .const '' $P4568 = "151_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 144
    set_sub_code_object $P4568, $P118
    .const '' $P4569 = "152_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 145
    set_sub_code_object $P4569, $P118
    .const '' $P4570 = "153_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 146
    set_sub_code_object $P4570, $P118
    .const '' $P4571 = "154_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 147
    set_sub_code_object $P4571, $P118
    .const '' $P4572 = "155_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 148
    set_sub_code_object $P4572, $P118
    .const '' $P4573 = "156_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 149
    set_sub_code_object $P4573, $P118
    .const '' $P4574 = "157_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 150
    set_sub_code_object $P4574, $P118
    .const '' $P4575 = "158_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 151
    set_sub_code_object $P4575, $P118
    .const '' $P4576 = "159_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 152
    set_sub_code_object $P4576, $P118
    .const '' $P4577 = "160_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 153
    set_sub_code_object $P4577, $P118
    .const '' $P4578 = "161_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 154
    set_sub_code_object $P4578, $P118
    .const '' $P4579 = "162_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 155
    set_sub_code_object $P4579, $P118
    .const '' $P4580 = "163_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 156
    set_sub_code_object $P4580, $P118
    .const '' $P4581 = "164_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 157
    set_sub_code_object $P4581, $P118
    .const '' $P4582 = "165_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 158
    set_sub_code_object $P4582, $P118
    .const '' $P4583 = "166_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 159
    set_sub_code_object $P4583, $P118
    .const '' $P4584 = "167_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 160
    set_sub_code_object $P4584, $P118
    .const '' $P4585 = "168_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 161
    set_sub_code_object $P4585, $P118
    .const '' $P4586 = "169_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 162
    set_sub_code_object $P4586, $P118
    .const '' $P4587 = "170_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 163
    set_sub_code_object $P4587, $P118
    .const '' $P4588 = "171_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 164
    set_sub_code_object $P4588, $P118
    .const '' $P4589 = "172_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 165
    set_sub_code_object $P4589, $P118
    .const '' $P4590 = "173_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 166
    set_sub_code_object $P4590, $P118
    .const '' $P4591 = "174_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 167
    set_sub_code_object $P4591, $P118
    .const '' $P4592 = "175_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 168
    set_sub_code_object $P4592, $P118
    .const '' $P4593 = "176_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 169
    set_sub_code_object $P4593, $P118
    .const '' $P4594 = "177_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 170
    set_sub_code_object $P4594, $P118
    .const '' $P4595 = "178_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 171
    set_sub_code_object $P4595, $P118
    .const '' $P4596 = "179_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 172
    set_sub_code_object $P4596, $P118
    .const '' $P4597 = "180_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 173
    set_sub_code_object $P4597, $P118
    .const '' $P4598 = "181_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 174
    set_sub_code_object $P4598, $P118
    .const '' $P4599 = "182_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 175
    set_sub_code_object $P4599, $P118
    .const '' $P4600 = "183_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 176
    set_sub_code_object $P4600, $P118
    .const '' $P4601 = "184_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 177
    set_sub_code_object $P4601, $P118
    .const '' $P4602 = "185_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 178
    set_sub_code_object $P4602, $P118
    .const '' $P4603 = "186_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 179
    set_sub_code_object $P4603, $P118
    .const '' $P4604 = "187_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 180
    set_sub_code_object $P4604, $P118
    .const '' $P4605 = "188_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 181
    set_sub_code_object $P4605, $P118
    .const '' $P4606 = "189_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 182
    set_sub_code_object $P4606, $P118
    .const '' $P4607 = "190_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 183
    set_sub_code_object $P4607, $P118
    .const '' $P4608 = "191_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 184
    set_sub_code_object $P4608, $P118
    .const '' $P4609 = "192_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 185
    set_sub_code_object $P4609, $P118
    .const '' $P4610 = "193_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 186
    set_sub_code_object $P4610, $P118
    .const '' $P4611 = "194_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 187
    set_sub_code_object $P4611, $P118
    .const '' $P4612 = "195_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 188
    set_sub_code_object $P4612, $P118
    .const '' $P4613 = "196_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 189
    set_sub_code_object $P4613, $P118
    .const '' $P4614 = "197_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 190
    set_sub_code_object $P4614, $P118
    .const '' $P4615 = "198_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 191
    set_sub_code_object $P4615, $P118
    .const '' $P4616 = "199_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 192
    set_sub_code_object $P4616, $P118
    .const '' $P4617 = "200_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 193
    set_sub_code_object $P4617, $P118
    .const '' $P4618 = "201_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 194
    set_sub_code_object $P4618, $P118
    .const '' $P4619 = "202_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 195
    set_sub_code_object $P4619, $P118
    .const '' $P4620 = "203_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 196
    set_sub_code_object $P4620, $P118
    .const '' $P4621 = "204_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 197
    set_sub_code_object $P4621, $P118
    .const '' $P4622 = "205_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 198
    set_sub_code_object $P4622, $P118
    .const '' $P4623 = "206_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 199
    set_sub_code_object $P4623, $P118
    .const '' $P4624 = "207_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 200
    set_sub_code_object $P4624, $P118
    .const '' $P4625 = "208_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 201
    set_sub_code_object $P4625, $P118
    .const '' $P4626 = "209_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 202
    set_sub_code_object $P4626, $P118
    .const '' $P4627 = "210_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 203
    set_sub_code_object $P4627, $P118
    .const '' $P4628 = "211_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 204
    set_sub_code_object $P4628, $P118
    .const '' $P4629 = "212_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 205
    set_sub_code_object $P4629, $P118
    .const '' $P4630 = "213_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 206
    set_sub_code_object $P4630, $P118
    .const '' $P4631 = "214_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 207
    set_sub_code_object $P4631, $P118
    .const '' $P4632 = "215_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 208
    set_sub_code_object $P4632, $P118
    .const '' $P4633 = "216_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 209
    set_sub_code_object $P4633, $P118
    .const '' $P4634 = "217_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 210
    set_sub_code_object $P4634, $P118
    .const '' $P4635 = "218_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 211
    set_sub_code_object $P4635, $P118
    .const '' $P4636 = "219_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 212
    set_sub_code_object $P4636, $P118
    .const '' $P4637 = "220_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 213
    set_sub_code_object $P4637, $P118
    .const '' $P4638 = "221_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 214
    set_sub_code_object $P4638, $P118
    .const '' $P4639 = "222_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 215
    set_sub_code_object $P4639, $P118
    .const '' $P4640 = "223_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 216
    set_sub_code_object $P4640, $P118
    .const '' $P4641 = "224_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 217
    set_sub_code_object $P4641, $P118
    .const '' $P4642 = "225_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 218
    set_sub_code_object $P4642, $P118
    .const '' $P4643 = "226_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 219
    set_sub_code_object $P4643, $P118
    .const '' $P4644 = "227_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 220
    set_sub_code_object $P4644, $P118
    .const '' $P4645 = "228_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 221
    set_sub_code_object $P4645, $P118
    .const '' $P4646 = "229_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 222
    set_sub_code_object $P4646, $P118
    .const '' $P4647 = "230_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 223
    set_sub_code_object $P4647, $P118
    .const '' $P4648 = "231_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 224
    set_sub_code_object $P4648, $P118
    .const '' $P4649 = "232_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 225
    set_sub_code_object $P4649, $P118
    .const '' $P4650 = "233_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 226
    set_sub_code_object $P4650, $P118
    .const '' $P4651 = "234_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 227
    set_sub_code_object $P4651, $P118
    .const '' $P4652 = "235_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 228
    set_sub_code_object $P4652, $P118
    .const '' $P4653 = "236_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 229
    set_sub_code_object $P4653, $P118
    .const '' $P4654 = "237_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 230
    set_sub_code_object $P4654, $P118
    .const '' $P4655 = "238_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 231
    set_sub_code_object $P4655, $P118
    .const '' $P4656 = "239_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 232
    set_sub_code_object $P4656, $P118
    .const '' $P4657 = "240_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 233
    set_sub_code_object $P4657, $P118
    .const '' $P4658 = "241_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 234
    set_sub_code_object $P4658, $P118
    .const '' $P4659 = "242_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 235
    set_sub_code_object $P4659, $P118
    .const '' $P4660 = "243_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 236
    set_sub_code_object $P4660, $P118
    .const '' $P4661 = "244_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 237
    set_sub_code_object $P4661, $P118
    .const '' $P4662 = "245_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 238
    set_sub_code_object $P4662, $P118
    .const '' $P4663 = "246_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 239
    set_sub_code_object $P4663, $P118
    .const '' $P4664 = "247_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 240
    set_sub_code_object $P4664, $P118
    .const '' $P4665 = "248_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 241
    set_sub_code_object $P4665, $P118
    .const '' $P4666 = "249_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 242
    set_sub_code_object $P4666, $P118
    .const '' $P4667 = "250_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 243
    set_sub_code_object $P4667, $P118
    .const '' $P4668 = "251_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 244
    set_sub_code_object $P4668, $P118
    .const '' $P4669 = "252_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 245
    set_sub_code_object $P4669, $P118
    .const '' $P4670 = "253_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 246
    set_sub_code_object $P4670, $P118
    .const '' $P4671 = "254_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 247
    set_sub_code_object $P4671, $P118
    .const '' $P4672 = "255_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 248
    set_sub_code_object $P4672, $P118
    .const '' $P4673 = "256_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 249
    set_sub_code_object $P4673, $P118
    .const '' $P4674 = "257_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 250
    set_sub_code_object $P4674, $P118
    .const '' $P4675 = "258_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 251
    set_sub_code_object $P4675, $P118
    .const '' $P4676 = "259_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 252
    set_sub_code_object $P4676, $P118
    .const '' $P4677 = "260_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 253
    set_sub_code_object $P4677, $P118
    .const '' $P4678 = "261_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 254
    set_sub_code_object $P4678, $P118
    .const '' $P4679 = "262_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 255
    set_sub_code_object $P4679, $P118
    .const '' $P4680 = "263_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 256
    set_sub_code_object $P4680, $P118
    .const '' $P4681 = "264_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 257
    set_sub_code_object $P4681, $P118
    .const '' $P4682 = "265_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 258
    set_sub_code_object $P4682, $P118
    .const '' $P4683 = "266_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 259
    set_sub_code_object $P4683, $P118
    .const '' $P4684 = "267_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 260
    set_sub_code_object $P4684, $P118
    .const '' $P4685 = "268_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 261
    set_sub_code_object $P4685, $P118
    .const '' $P4686 = "269_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 262
    set_sub_code_object $P4686, $P118
    .const '' $P4687 = "270_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 263
    set_sub_code_object $P4687, $P118
    .const '' $P4688 = "271_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 264
    set_sub_code_object $P4688, $P118
    .const '' $P4689 = "272_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 265
    set_sub_code_object $P4689, $P118
    .const '' $P4690 = "273_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 266
    set_sub_code_object $P4690, $P118
    .const '' $P4691 = "274_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 267
    set_sub_code_object $P4691, $P118
    .const '' $P4692 = "275_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 268
    set_sub_code_object $P4692, $P118
    .const '' $P4693 = "276_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 269
    set_sub_code_object $P4693, $P118
    .const '' $P4694 = "277_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 270
    set_sub_code_object $P4694, $P118
    .const '' $P4695 = "278_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 271
    set_sub_code_object $P4695, $P118
    .const '' $P4696 = "279_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 272
    set_sub_code_object $P4696, $P118
    .const '' $P4697 = "280_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 273
    set_sub_code_object $P4697, $P118
    .const '' $P4698 = "281_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 274
    set_sub_code_object $P4698, $P118
    .const '' $P4699 = "282_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 275
    set_sub_code_object $P4699, $P118
    .const '' $P4700 = "283_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 276
    set_sub_code_object $P4700, $P118
    .const '' $P4701 = "284_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 277
    set_sub_code_object $P4701, $P118
    .const '' $P4702 = "285_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 278
    set_sub_code_object $P4702, $P118
    .const '' $P4703 = "286_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 279
    set_sub_code_object $P4703, $P118
    .const '' $P4704 = "287_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 280
    set_sub_code_object $P4704, $P118
    .const '' $P4705 = "288_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 281
    set_sub_code_object $P4705, $P118
    .const '' $P4706 = "289_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 282
    set_sub_code_object $P4706, $P118
    .const '' $P4707 = "290_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 283
    set_sub_code_object $P4707, $P118
    .const '' $P4708 = "291_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 284
    set_sub_code_object $P4708, $P118
    .const '' $P4709 = "292_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 285
    set_sub_code_object $P4709, $P118
    .const '' $P4710 = "293_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 286
    set_sub_code_object $P4710, $P118
    .const '' $P4711 = "294_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 287
    set_sub_code_object $P4711, $P118
    .const '' $P4712 = "295_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 288
    set_sub_code_object $P4712, $P118
    .const '' $P4713 = "296_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 289
    set_sub_code_object $P4713, $P118
    .const '' $P4714 = "297_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 290
    set_sub_code_object $P4714, $P118
    .const '' $P4715 = "298_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 291
    set_sub_code_object $P4715, $P118
    .const '' $P4716 = "299_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 292
    set_sub_code_object $P4716, $P118
    .const '' $P4717 = "300_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 293
    set_sub_code_object $P4717, $P118
    .const '' $P4718 = "301_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 294
    set_sub_code_object $P4718, $P118
    .const '' $P4719 = "302_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 295
    set_sub_code_object $P4719, $P118
    .const '' $P4720 = "303_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 296
    set_sub_code_object $P4720, $P118
    .const '' $P4721 = "304_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 297
    set_sub_code_object $P4721, $P118
    .const '' $P4722 = "305_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 298
    set_sub_code_object $P4722, $P118
    .const '' $P4723 = "306_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 299
    set_sub_code_object $P4723, $P118
    .const '' $P4724 = "307_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 300
    set_sub_code_object $P4724, $P118
    .const '' $P4725 = "308_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 301
    set_sub_code_object $P4725, $P118
    .const '' $P4726 = "309_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 302
    set_sub_code_object $P4726, $P118
    .const '' $P4727 = "310_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 303
    set_sub_code_object $P4727, $P118
    .const '' $P4728 = "311_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 304
    set_sub_code_object $P4728, $P118
    .const '' $P4729 = "312_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 305
    set_sub_code_object $P4729, $P118
    .const '' $P4730 = "313_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 306
    set_sub_code_object $P4730, $P118
    .const '' $P4731 = "314_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 307
    set_sub_code_object $P4731, $P118
    .const '' $P4732 = "315_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 308
    set_sub_code_object $P4732, $P118
    .const '' $P4733 = "316_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 309
    set_sub_code_object $P4733, $P118
    .const '' $P4734 = "317_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 310
    set_sub_code_object $P4734, $P118
    .const '' $P4735 = "318_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 311
    set_sub_code_object $P4735, $P118
    .const '' $P4736 = "319_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 312
    set_sub_code_object $P4736, $P118
    .const '' $P4737 = "320_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 313
    set_sub_code_object $P4737, $P118
    .const '' $P4738 = "321_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 314
    set_sub_code_object $P4738, $P118
    .const '' $P4739 = "322_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 315
    set_sub_code_object $P4739, $P118
    .const '' $P4740 = "323_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 316
    set_sub_code_object $P4740, $P118
    .const '' $P4741 = "324_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 317
    set_sub_code_object $P4741, $P118
    .const '' $P4742 = "325_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 318
    set_sub_code_object $P4742, $P118
    .const '' $P4743 = "326_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 319
    set_sub_code_object $P4743, $P118
    .const '' $P4744 = "327_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 320
    set_sub_code_object $P4744, $P118
    .const '' $P4745 = "328_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 321
    set_sub_code_object $P4745, $P118
    .const '' $P4746 = "329_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 322
    set_sub_code_object $P4746, $P118
    .const '' $P4747 = "330_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 323
    set_sub_code_object $P4747, $P118
    .const '' $P4748 = "331_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 324
    set_sub_code_object $P4748, $P118
    .const '' $P4749 = "332_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 325
    set_sub_code_object $P4749, $P118
    .const '' $P4750 = "333_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 326
    set_sub_code_object $P4750, $P118
    .const '' $P4751 = "334_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 327
    set_sub_code_object $P4751, $P118
    .const '' $P4752 = "335_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 328
    set_sub_code_object $P4752, $P118
    .const '' $P4753 = "336_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 329
    set_sub_code_object $P4753, $P118
    .const '' $P4754 = "337_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 330
    set_sub_code_object $P4754, $P118
    .const '' $P4755 = "338_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 331
    set_sub_code_object $P4755, $P118
    .const '' $P4756 = "339_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 332
    set_sub_code_object $P4756, $P118
    .const '' $P4757 = "340_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 333
    set_sub_code_object $P4757, $P118
    .const '' $P4758 = "341_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 334
    set_sub_code_object $P4758, $P118
    .const '' $P4759 = "342_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 335
    set_sub_code_object $P4759, $P118
    .const '' $P4760 = "343_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 336
    set_sub_code_object $P4760, $P118
    .const '' $P4761 = "344_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 337
    set_sub_code_object $P4761, $P118
    .const '' $P4762 = "345_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 338
    set_sub_code_object $P4762, $P118
    .const '' $P4763 = "346_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 339
    set_sub_code_object $P4763, $P118
    .const '' $P4764 = "347_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 340
    set_sub_code_object $P4764, $P118
    .const '' $P4765 = "348_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 341
    set_sub_code_object $P4765, $P118
    .const '' $P4766 = "349_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 342
    set_sub_code_object $P4766, $P118
    .const '' $P4767 = "350_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 343
    set_sub_code_object $P4767, $P118
    .const '' $P4768 = "351_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 344
    set_sub_code_object $P4768, $P118
    .const '' $P4769 = "352_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 345
    set_sub_code_object $P4769, $P118
    .const '' $P4770 = "353_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 346
    set_sub_code_object $P4770, $P118
    .const '' $P4771 = "354_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 347
    set_sub_code_object $P4771, $P118
    .const '' $P4772 = "355_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 348
    set_sub_code_object $P4772, $P118
    .const '' $P4773 = "356_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 349
    set_sub_code_object $P4773, $P118
    .const '' $P4774 = "357_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 350
    set_sub_code_object $P4774, $P118
    .const '' $P4775 = "358_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 351
    set_sub_code_object $P4775, $P118
    .const '' $P4776 = "359_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 352
    set_sub_code_object $P4776, $P118
    .const '' $P4777 = "360_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 353
    set_sub_code_object $P4777, $P118
    .const '' $P4778 = "361_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 354
    set_sub_code_object $P4778, $P118
    .const '' $P4779 = "362_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 355
    set_sub_code_object $P4779, $P118
    .const '' $P4780 = "363_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 356
    set_sub_code_object $P4780, $P118
    .const '' $P4781 = "364_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 357
    set_sub_code_object $P4781, $P118
    .const '' $P4782 = "365_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 358
    set_sub_code_object $P4782, $P118
    .const '' $P4783 = "366_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 359
    set_sub_code_object $P4783, $P118
    .const '' $P4784 = "367_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 360
    set_sub_code_object $P4784, $P118
    .const '' $P4785 = "368_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 361
    set_sub_code_object $P4785, $P118
    .const '' $P4786 = "369_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 362
    set_sub_code_object $P4786, $P118
    .const '' $P4787 = "370_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 363
    set_sub_code_object $P4787, $P118
    .const '' $P4788 = "371_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 364
    set_sub_code_object $P4788, $P118
    .const '' $P4789 = "372_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 365
    set_sub_code_object $P4789, $P118
    .const '' $P4790 = "373_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 366
    set_sub_code_object $P4790, $P118
    .const '' $P4791 = "374_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 367
    set_sub_code_object $P4791, $P118
    .const '' $P4792 = "375_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 368
    set_sub_code_object $P4792, $P118
    .const '' $P4793 = "376_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 369
    set_sub_code_object $P4793, $P118
    .const '' $P4794 = "377_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 370
    set_sub_code_object $P4794, $P118
    .const '' $P4795 = "378_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 371
    set_sub_code_object $P4795, $P118
    .const '' $P4796 = "379_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 372
    set_sub_code_object $P4796, $P118
    .const '' $P4797 = "380_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 373
    set_sub_code_object $P4797, $P118
    .const '' $P4798 = "381_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 374
    set_sub_code_object $P4798, $P118
    .const '' $P4799 = "382_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 375
    set_sub_code_object $P4799, $P118
    .const '' $P4800 = "383_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 376
    set_sub_code_object $P4800, $P118
    .const '' $P4801 = "384_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 377
    set_sub_code_object $P4801, $P118
    .const '' $P4802 = "385_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 378
    set_sub_code_object $P4802, $P118
    .const '' $P4803 = "386_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 379
    set_sub_code_object $P4803, $P118
    .const '' $P4804 = "387_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 380
    set_sub_code_object $P4804, $P118
    .const '' $P4805 = "388_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 381
    set_sub_code_object $P4805, $P118
    .const '' $P4806 = "389_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 382
    set_sub_code_object $P4806, $P118
    .const '' $P4807 = "390_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 383
    set_sub_code_object $P4807, $P118
    .const '' $P4808 = "391_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 384
    set_sub_code_object $P4808, $P118
    .const '' $P4809 = "392_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 385
    set_sub_code_object $P4809, $P118
    .const '' $P4810 = "393_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 386
    set_sub_code_object $P4810, $P118
    .const '' $P4811 = "394_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 387
    set_sub_code_object $P4811, $P118
    .const '' $P4812 = "395_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 388
    set_sub_code_object $P4812, $P118
    .const '' $P4813 = "396_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 389
    set_sub_code_object $P4813, $P118
    .const '' $P4814 = "397_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 390
    set_sub_code_object $P4814, $P118
    .const '' $P4815 = "398_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 391
    set_sub_code_object $P4815, $P118
    .const '' $P4816 = "399_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 392
    set_sub_code_object $P4816, $P118
    .const '' $P4817 = "400_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 393
    set_sub_code_object $P4817, $P118
    .const '' $P4818 = "401_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 394
    set_sub_code_object $P4818, $P118
    .const '' $P4819 = "402_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 395
    set_sub_code_object $P4819, $P118
    .const '' $P4820 = "403_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 396
    set_sub_code_object $P4820, $P118
    .const '' $P4821 = "404_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 397
    set_sub_code_object $P4821, $P118
    .const '' $P4822 = "405_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 398
    set_sub_code_object $P4822, $P118
    .const 'LexInfo' $P4823 = "571_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 32
    $P4823."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4824 = "571_1334921493.34" 
    $P4824."finish_static_lexpad"()
    .const 'LexInfo' $P4825 = "571_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 32
    $P4825."set_static_lexpad_value"("$?CLASS", $P118)
    .const 'LexInfo' $P4826 = "571_1334921493.34" 
    $P4826."finish_static_lexpad"()
    .const '' $P4827 = "406_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 400
    set_sub_code_object $P4827, $P118
    .const '' $P4828 = "407_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 401
    set_sub_code_object $P4828, $P118
    .const '' $P4829 = "408_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 402
    set_sub_code_object $P4829, $P118
    .const '' $P4830 = "409_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 403
    set_sub_code_object $P4830, $P118
    .const '' $P4831 = "410_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 404
    set_sub_code_object $P4831, $P118
    .const '' $P4832 = "411_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 405
    set_sub_code_object $P4832, $P118
    .const '' $P4833 = "412_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 406
    set_sub_code_object $P4833, $P118
    .const '' $P4834 = "413_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 407
    set_sub_code_object $P4834, $P118
    .const '' $P4835 = "414_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 408
    set_sub_code_object $P4835, $P118
    .const '' $P4836 = "415_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 409
    set_sub_code_object $P4836, $P118
    .const '' $P4837 = "416_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 410
    set_sub_code_object $P4837, $P118
    .const '' $P4838 = "417_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 411
    set_sub_code_object $P4838, $P118
    .const '' $P4839 = "418_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 412
    set_sub_code_object $P4839, $P118
    .const '' $P4840 = "419_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 413
    set_sub_code_object $P4840, $P118
    .const '' $P4841 = "420_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 414
    set_sub_code_object $P4841, $P118
    .const '' $P4842 = "421_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 415
    set_sub_code_object $P4842, $P118
    .const 'LexInfo' $P4843 = "586_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 399
    $P4843."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4844 = "586_1334921493.34" 
    $P4844."finish_static_lexpad"()
    .const 'LexInfo' $P4845 = "586_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 399
    $P4845."set_static_lexpad_value"("$?CLASS", $P118)
    .const 'LexInfo' $P4846 = "586_1334921493.34" 
    $P4846."finish_static_lexpad"()
    .const '' $P4847 = "422_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 417
    set_sub_code_object $P4847, $P118
    .const '' $P4848 = "423_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 418
    set_sub_code_object $P4848, $P118
    .const '' $P4849 = "424_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 419
    set_sub_code_object $P4849, $P118
    .const '' $P4850 = "425_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 420
    set_sub_code_object $P4850, $P118
    .const '' $P4851 = "426_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 421
    set_sub_code_object $P4851, $P118
    .const '' $P4852 = "427_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 422
    set_sub_code_object $P4852, $P118
    .const '' $P4853 = "428_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 423
    set_sub_code_object $P4853, $P118
    .const '' $P4854 = "429_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 424
    set_sub_code_object $P4854, $P118
    .const '' $P4855 = "430_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 425
    set_sub_code_object $P4855, $P118
    .const '' $P4856 = "431_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 426
    set_sub_code_object $P4856, $P118
    .const '' $P4857 = "432_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 427
    set_sub_code_object $P4857, $P118
    .const '' $P4858 = "433_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 428
    set_sub_code_object $P4858, $P118
    .const '' $P4859 = "434_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 429
    set_sub_code_object $P4859, $P118
    .const '' $P4860 = "435_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 430
    set_sub_code_object $P4860, $P118
    .const '' $P4861 = "436_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 431
    set_sub_code_object $P4861, $P118
    .const '' $P4862 = "437_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 432
    set_sub_code_object $P4862, $P118
    .const '' $P4863 = "438_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 433
    set_sub_code_object $P4863, $P118
    .const '' $P4864 = "439_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 434
    set_sub_code_object $P4864, $P118
    .const '' $P4865 = "440_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 435
    set_sub_code_object $P4865, $P118
    .const '' $P4866 = "441_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 436
    set_sub_code_object $P4866, $P118
    .const '' $P4867 = "442_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 437
    set_sub_code_object $P4867, $P118
    .const '' $P4868 = "443_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 438
    set_sub_code_object $P4868, $P118
    .const '' $P4869 = "444_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 439
    set_sub_code_object $P4869, $P118
    .const '' $P4870 = "445_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 440
    set_sub_code_object $P4870, $P118
    .const '' $P4871 = "446_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 441
    set_sub_code_object $P4871, $P118
    .const '' $P4872 = "447_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 442
    set_sub_code_object $P4872, $P118
    .const '' $P4873 = "448_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 443
    set_sub_code_object $P4873, $P118
    .const '' $P4874 = "449_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 444
    set_sub_code_object $P4874, $P118
    .const '' $P4875 = "450_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 445
    set_sub_code_object $P4875, $P118
    .const '' $P4876 = "451_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 446
    set_sub_code_object $P4876, $P118
    .const '' $P4877 = "452_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 447
    set_sub_code_object $P4877, $P118
    .const '' $P4878 = "453_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 448
    set_sub_code_object $P4878, $P118
    .const '' $P4879 = "454_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 449
    set_sub_code_object $P4879, $P118
    .const '' $P4880 = "455_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 450
    set_sub_code_object $P4880, $P118
    .const '' $P4881 = "456_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 451
    set_sub_code_object $P4881, $P118
    .const '' $P4882 = "457_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 452
    set_sub_code_object $P4882, $P118
    .const '' $P4883 = "458_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 453
    set_sub_code_object $P4883, $P118
    .const '' $P4884 = "459_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 454
    set_sub_code_object $P4884, $P118
    .const '' $P4885 = "460_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 455
    set_sub_code_object $P4885, $P118
    .const '' $P4886 = "461_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 456
    set_sub_code_object $P4886, $P118
    .const '' $P4887 = "462_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 457
    set_sub_code_object $P4887, $P118
    .const '' $P4888 = "463_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 458
    set_sub_code_object $P4888, $P118
    .const '' $P4889 = "464_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 459
    set_sub_code_object $P4889, $P118
    .const '' $P4890 = "465_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 460
    set_sub_code_object $P4890, $P118
    .const '' $P4891 = "466_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 461
    set_sub_code_object $P4891, $P118
    .const '' $P4892 = "467_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 462
    set_sub_code_object $P4892, $P118
    .const '' $P4893 = "468_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 463
    set_sub_code_object $P4893, $P118
    .const '' $P4894 = "469_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 464
    set_sub_code_object $P4894, $P118
    .const '' $P4895 = "470_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 465
    set_sub_code_object $P4895, $P118
    .const '' $P4896 = "471_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 466
    set_sub_code_object $P4896, $P118
    .const '' $P4897 = "472_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 467
    set_sub_code_object $P4897, $P118
    .const '' $P4898 = "473_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 468
    set_sub_code_object $P4898, $P118
    .const '' $P4899 = "474_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 469
    set_sub_code_object $P4899, $P118
    .const '' $P4900 = "475_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 470
    set_sub_code_object $P4900, $P118
    .const '' $P4901 = "476_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 471
    set_sub_code_object $P4901, $P118
    .const '' $P4902 = "477_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 472
    set_sub_code_object $P4902, $P118
    .const '' $P4903 = "478_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 473
    set_sub_code_object $P4903, $P118
    .const '' $P4904 = "479_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 474
    set_sub_code_object $P4904, $P118
    .const '' $P4905 = "480_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 475
    set_sub_code_object $P4905, $P118
    .const '' $P4906 = "481_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 476
    set_sub_code_object $P4906, $P118
    .const '' $P4907 = "482_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 477
    set_sub_code_object $P4907, $P118
    .const '' $P4908 = "483_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 478
    set_sub_code_object $P4908, $P118
    .const '' $P4909 = "484_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 479
    set_sub_code_object $P4909, $P118
    .const '' $P4910 = "485_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 480
    set_sub_code_object $P4910, $P118
    .const '' $P4911 = "486_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 481
    set_sub_code_object $P4911, $P118
    .const '' $P4912 = "487_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 482
    set_sub_code_object $P4912, $P118
    .const '' $P4913 = "488_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 483
    set_sub_code_object $P4913, $P118
    .const '' $P4914 = "489_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 484
    set_sub_code_object $P4914, $P118
    .const '' $P4915 = "490_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 485
    set_sub_code_object $P4915, $P118
    .const '' $P4916 = "491_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 486
    set_sub_code_object $P4916, $P118
    .const '' $P4917 = "492_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 487
    set_sub_code_object $P4917, $P118
    .const '' $P4918 = "493_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 488
    set_sub_code_object $P4918, $P118
    .const '' $P4919 = "494_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 489
    set_sub_code_object $P4919, $P118
    .const '' $P4920 = "495_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 490
    set_sub_code_object $P4920, $P118
    .const '' $P4921 = "496_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 491
    set_sub_code_object $P4921, $P118
    .const '' $P4922 = "497_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 492
    set_sub_code_object $P4922, $P118
    .const '' $P4923 = "498_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 493
    set_sub_code_object $P4923, $P118
    .const '' $P4924 = "499_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 494
    set_sub_code_object $P4924, $P118
    .const '' $P4925 = "500_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 495
    set_sub_code_object $P4925, $P118
    .const '' $P4926 = "501_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 496
    set_sub_code_object $P4926, $P118
    .const '' $P4927 = "502_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 497
    set_sub_code_object $P4927, $P118
    .const '' $P4928 = "503_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 498
    set_sub_code_object $P4928, $P118
    .const '' $P4929 = "504_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 499
    set_sub_code_object $P4929, $P118
    .const '' $P4930 = "505_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 500
    set_sub_code_object $P4930, $P118
    .const '' $P4931 = "506_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 501
    set_sub_code_object $P4931, $P118
    .const '' $P4932 = "507_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 502
    set_sub_code_object $P4932, $P118
    .const '' $P4933 = "508_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 503
    set_sub_code_object $P4933, $P118
    .const '' $P4934 = "509_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 504
    set_sub_code_object $P4934, $P118
    .const '' $P4935 = "510_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 505
    set_sub_code_object $P4935, $P118
    .const '' $P4936 = "511_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 506
    set_sub_code_object $P4936, $P118
    .const '' $P4937 = "512_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 507
    set_sub_code_object $P4937, $P118
    .const '' $P4938 = "513_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 508
    set_sub_code_object $P4938, $P118
    .const '' $P4939 = "514_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 509
    set_sub_code_object $P4939, $P118
    .const '' $P4940 = "515_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 510
    set_sub_code_object $P4940, $P118
    .const '' $P4941 = "516_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 511
    set_sub_code_object $P4941, $P118
    .const '' $P4942 = "517_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 512
    set_sub_code_object $P4942, $P118
    .const '' $P4943 = "518_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 513
    set_sub_code_object $P4943, $P118
    .const '' $P4944 = "519_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 514
    set_sub_code_object $P4944, $P118
    .const '' $P4945 = "520_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 515
    set_sub_code_object $P4945, $P118
    .const '' $P4946 = "521_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 516
    set_sub_code_object $P4946, $P118
    .const '' $P4947 = "522_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 517
    set_sub_code_object $P4947, $P118
    .const '' $P4948 = "523_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 518
    set_sub_code_object $P4948, $P118
    .const '' $P4949 = "524_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 519
    set_sub_code_object $P4949, $P118
    .const '' $P4950 = "525_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 520
    set_sub_code_object $P4950, $P118
    .const '' $P4951 = "526_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 521
    set_sub_code_object $P4951, $P118
    .const '' $P4952 = "527_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 522
    set_sub_code_object $P4952, $P118
    .const '' $P4953 = "528_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 523
    set_sub_code_object $P4953, $P118
    .const '' $P4954 = "529_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 524
    set_sub_code_object $P4954, $P118
    .const '' $P4955 = "530_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 525
    set_sub_code_object $P4955, $P118
    .const '' $P4956 = "531_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 526
    set_sub_code_object $P4956, $P118
    .const '' $P4957 = "532_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 527
    set_sub_code_object $P4957, $P118
    .const '' $P4958 = "533_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 528
    set_sub_code_object $P4958, $P118
    .const '' $P4959 = "534_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 529
    set_sub_code_object $P4959, $P118
    .const 'LexInfo' $P4960 = "591_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 416
    $P4960."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4961 = "591_1334921493.34" 
    $P4961."finish_static_lexpad"()
    .const 'LexInfo' $P4962 = "591_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 416
    $P4962."set_static_lexpad_value"("$?CLASS", $P118)
    .const 'LexInfo' $P4963 = "591_1334921493.34" 
    $P4963."finish_static_lexpad"()
    .const '' $P4964 = "535_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 531
    set_sub_code_object $P4964, $P118
    .const '' $P4965 = "536_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 532
    set_sub_code_object $P4965, $P118
    .const '' $P4966 = "537_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 533
    set_sub_code_object $P4966, $P118
    .const '' $P4967 = "538_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 534
    set_sub_code_object $P4967, $P118
    .const '' $P4968 = "539_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 535
    set_sub_code_object $P4968, $P118
    .const '' $P4969 = "540_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 536
    set_sub_code_object $P4969, $P118
    .const '' $P4970 = "541_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 537
    set_sub_code_object $P4970, $P118
    .const 'LexInfo' $P4971 = "652_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 530
    $P4971."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4972 = "652_1334921493.34" 
    $P4972."finish_static_lexpad"()
    .const 'LexInfo' $P4973 = "652_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 530
    $P4973."set_static_lexpad_value"("$?CLASS", $P118)
    .const 'LexInfo' $P4974 = "652_1334921493.34" 
    $P4974."finish_static_lexpad"()
    .const 'LexInfo' $P4975 = "653_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 538
    $P4975."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4976 = "653_1334921493.34" 
    $P4976."finish_static_lexpad"()
    .const 'LexInfo' $P4977 = "653_1334921493.34" 
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 538
    $P4977."set_static_lexpad_value"("$?CLASS", $P118)
    .const 'LexInfo' $P4978 = "653_1334921493.34" 
    $P4978."finish_static_lexpad"()
    nqp_get_sc_object $P118, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 0
    set_hll_global "GLOBAL", $P118
.end


.HLL "nqp"

.namespace []
.sub "_block3885"  :anon :subid("655_1334921493.34") :outer("542_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 0
    .const 'Sub' $P3887 = "10_1334921493.34" 
    .const 'Sub' $P3888 = "11_1334921493.34" 
    .const 'Sub' $P3889 = "12_1334921493.34" 
    .const 'Sub' $P3890 = "13_1334921493.34" 
    .const 'Sub' $P3891 = "14_1334921493.34" 
    .const 'Sub' $P3892 = "15_1334921493.34" 
    .const 'Sub' $P3893 = "16_1334921493.34" 
    .const 'Sub' $P3894 = "17_1334921493.34" 
    .const 'Sub' $P3895 = "18_1334921493.34" 
    .const 'Sub' $P3896 = "19_1334921493.34" 
    .const 'Sub' $P3897 = "20_1334921493.34" 
    .const 'Sub' $P3898 = "21_1334921493.34" 
    .const 'Sub' $P3899 = "22_1334921493.34" 
    .const 'Sub' $P3900 = "23_1334921493.34" 
    .const 'Sub' $P3901 = "24_1334921493.34" 
    .const 'Sub' $P3902 = "25_1334921493.34" 
    .const 'Sub' $P3903 = "26_1334921493.34" 
    .const 'Sub' $P3904 = "27_1334921493.34" 
    .const 'Sub' $P3905 = "28_1334921493.34" 
    .const 'Sub' $P3906 = "29_1334921493.34" 
    .const 'Sub' $P3907 = "30_1334921493.34" 
    .const 'Sub' $P3908 = "31_1334921493.34" 
    .const 'Sub' $P3909 = "32_1334921493.34" 
    .const 'Sub' $P3910 = "33_1334921493.34" 
    .const 'Sub' $P3911 = "34_1334921493.34" 
    .const 'Sub' $P3912 = "35_1334921493.34" 
    .const 'Sub' $P3913 = "36_1334921493.34" 
    .const 'Sub' $P3914 = "37_1334921493.34" 
    .const 'Sub' $P3915 = "38_1334921493.34" 
    .const 'Sub' $P3916 = "39_1334921493.34" 
    .const 'Sub' $P3917 = "40_1334921493.34" 
    .const 'Sub' $P3918 = "41_1334921493.34" 
    .const 'Sub' $P3919 = "42_1334921493.34" 
    .const 'Sub' $P3920 = "43_1334921493.34" 
    .const 'Sub' $P3921 = "44_1334921493.34" 
    .const 'Sub' $P3922 = "45_1334921493.34" 
    .const 'Sub' $P3923 = "46_1334921493.34" 
    .const 'Sub' $P3924 = "47_1334921493.34" 
    .const 'Sub' $P3925 = "48_1334921493.34" 
    .const 'Sub' $P3926 = "49_1334921493.34" 
    .const 'Sub' $P3927 = "50_1334921493.34" 
    .const 'Sub' $P3928 = "51_1334921493.34" 
    .const 'Sub' $P3929 = "52_1334921493.34" 
    .const 'Sub' $P3930 = "53_1334921493.34" 
    .const 'Sub' $P3931 = "54_1334921493.34" 
    .const 'Sub' $P3932 = "55_1334921493.34" 
    .const 'Sub' $P3933 = "56_1334921493.34" 
    .const 'Sub' $P3934 = "57_1334921493.34" 
    .const 'Sub' $P3935 = "58_1334921493.34" 
    .const 'Sub' $P3936 = "59_1334921493.34" 
    .const 'Sub' $P3937 = "60_1334921493.34" 
    .const 'Sub' $P3938 = "61_1334921493.34" 
    .const 'Sub' $P3939 = "62_1334921493.34" 
    .const 'Sub' $P3940 = "63_1334921493.34" 
    .const 'Sub' $P3941 = "64_1334921493.34" 
    .const 'Sub' $P3942 = "65_1334921493.34" 
    .const 'Sub' $P3943 = "66_1334921493.34" 
    .const 'Sub' $P3944 = "67_1334921493.34" 
    .const 'Sub' $P3945 = "68_1334921493.34" 
    .const 'Sub' $P3946 = "69_1334921493.34" 
    .const 'Sub' $P3947 = "70_1334921493.34" 
    .const 'Sub' $P3948 = "71_1334921493.34" 
    .const 'Sub' $P3949 = "72_1334921493.34" 
    .const 'Sub' $P3950 = "73_1334921493.34" 
    .const 'Sub' $P3951 = "74_1334921493.34" 
    .const 'Sub' $P3952 = "75_1334921493.34" 
    .const 'Sub' $P3953 = "76_1334921493.34" 
    .const 'Sub' $P3954 = "77_1334921493.34" 
    .const 'Sub' $P3955 = "78_1334921493.34" 
    .const 'Sub' $P3956 = "79_1334921493.34" 
    .const 'Sub' $P3957 = "80_1334921493.34" 
    .const 'Sub' $P3958 = "81_1334921493.34" 
    .const 'Sub' $P3959 = "82_1334921493.34" 
    .const 'Sub' $P3960 = "83_1334921493.34" 
    .const 'Sub' $P3961 = "84_1334921493.34" 
    .const 'Sub' $P3962 = "85_1334921493.34" 
    .const 'Sub' $P3963 = "86_1334921493.34" 
    .const 'Sub' $P3964 = "87_1334921493.34" 
    .const 'Sub' $P3965 = "88_1334921493.34" 
    .const 'Sub' $P3966 = "89_1334921493.34" 
    .const 'Sub' $P3967 = "90_1334921493.34" 
    .const 'Sub' $P3968 = "91_1334921493.34" 
    .const 'Sub' $P3969 = "92_1334921493.34" 
    .const 'Sub' $P3970 = "93_1334921493.34" 
    .const 'Sub' $P3971 = "94_1334921493.34" 
    .const 'Sub' $P3972 = "95_1334921493.34" 
    .const 'Sub' $P3973 = "96_1334921493.34" 
    .const 'Sub' $P3974 = "97_1334921493.34" 
    .const 'Sub' $P3975 = "98_1334921493.34" 
    .const 'Sub' $P3976 = "99_1334921493.34" 
    .const 'Sub' $P3977 = "100_1334921493.34" 
    .const 'Sub' $P3978 = "101_1334921493.34" 
    .const 'Sub' $P3979 = "102_1334921493.34" 
    .const 'Sub' $P3980 = "103_1334921493.34" 
    .const 'Sub' $P3981 = "104_1334921493.34" 
    .const 'Sub' $P3982 = "105_1334921493.34" 
    .const 'Sub' $P3983 = "106_1334921493.34" 
    .const 'Sub' $P3984 = "107_1334921493.34" 
    .const 'Sub' $P3985 = "108_1334921493.34" 
    .const 'Sub' $P3986 = "109_1334921493.34" 
    .const 'Sub' $P3987 = "110_1334921493.34" 
    .const 'Sub' $P3988 = "111_1334921493.34" 
    .const 'Sub' $P3989 = "112_1334921493.34" 
    .const 'Sub' $P3990 = "113_1334921493.34" 
    .const 'Sub' $P3991 = "114_1334921493.34" 
    .const 'Sub' $P3992 = "115_1334921493.34" 
    .const 'Sub' $P3993 = "116_1334921493.34" 
    .const 'Sub' $P3994 = "117_1334921493.34" 
    .const 'Sub' $P3995 = "118_1334921493.34" 
    .const 'Sub' $P3996 = "119_1334921493.34" 
    .const 'Sub' $P3997 = "120_1334921493.34" 
    .const 'Sub' $P3998 = "121_1334921493.34" 
    .const 'Sub' $P3999 = "122_1334921493.34" 
    .const 'Sub' $P4000 = "123_1334921493.34" 
    .const 'Sub' $P4001 = "124_1334921493.34" 
    .const 'Sub' $P4002 = "125_1334921493.34" 
    .const 'Sub' $P4003 = "126_1334921493.34" 
    .const 'Sub' $P4004 = "127_1334921493.34" 
    .const 'Sub' $P4005 = "128_1334921493.34" 
    .const 'Sub' $P4006 = "129_1334921493.34" 
    .const 'Sub' $P4007 = "130_1334921493.34" 
    .const 'Sub' $P4008 = "131_1334921493.34" 
    .const 'Sub' $P4009 = "132_1334921493.34" 
    .const 'Sub' $P4010 = "133_1334921493.34" 
    .const 'Sub' $P4011 = "134_1334921493.34" 
    .const 'Sub' $P4012 = "135_1334921493.34" 
    .const 'Sub' $P4013 = "136_1334921493.34" 
    .const 'Sub' $P4014 = "137_1334921493.34" 
    .const 'Sub' $P4015 = "138_1334921493.34" 
    .const 'Sub' $P4016 = "139_1334921493.34" 
    .const 'Sub' $P4017 = "140_1334921493.34" 
    .const 'Sub' $P4018 = "141_1334921493.34" 
    .const 'Sub' $P4019 = "142_1334921493.34" 
    .const 'Sub' $P4020 = "143_1334921493.34" 
    .const 'Sub' $P4021 = "144_1334921493.34" 
    .const 'Sub' $P4022 = "145_1334921493.34" 
    .const 'Sub' $P4023 = "146_1334921493.34" 
    .const 'Sub' $P4024 = "147_1334921493.34" 
    .const 'Sub' $P4025 = "148_1334921493.34" 
    .const 'Sub' $P4026 = "149_1334921493.34" 
    .const 'Sub' $P4027 = "150_1334921493.34" 
    .const 'Sub' $P4028 = "151_1334921493.34" 
    .const 'Sub' $P4029 = "152_1334921493.34" 
    .const 'Sub' $P4030 = "153_1334921493.34" 
    .const 'Sub' $P4031 = "154_1334921493.34" 
    .const 'Sub' $P4032 = "155_1334921493.34" 
    .const 'Sub' $P4033 = "156_1334921493.34" 
    .const 'Sub' $P4034 = "157_1334921493.34" 
    .const 'Sub' $P4035 = "158_1334921493.34" 
    .const 'Sub' $P4036 = "159_1334921493.34" 
    .const 'Sub' $P4037 = "160_1334921493.34" 
    .const 'Sub' $P4038 = "161_1334921493.34" 
    .const 'Sub' $P4039 = "162_1334921493.34" 
    .const 'Sub' $P4040 = "163_1334921493.34" 
    .const 'Sub' $P4041 = "164_1334921493.34" 
    .const 'Sub' $P4042 = "165_1334921493.34" 
    .const 'Sub' $P4043 = "166_1334921493.34" 
    .const 'Sub' $P4044 = "167_1334921493.34" 
    .const 'Sub' $P4045 = "168_1334921493.34" 
    .const 'Sub' $P4046 = "169_1334921493.34" 
    .const 'Sub' $P4047 = "170_1334921493.34" 
    .const 'Sub' $P4048 = "171_1334921493.34" 
    .const 'Sub' $P4049 = "172_1334921493.34" 
    .const 'Sub' $P4050 = "173_1334921493.34" 
    .const 'Sub' $P4051 = "174_1334921493.34" 
    .const 'Sub' $P4052 = "175_1334921493.34" 
    .const 'Sub' $P4053 = "176_1334921493.34" 
    .const 'Sub' $P4054 = "177_1334921493.34" 
    .const 'Sub' $P4055 = "178_1334921493.34" 
    .const 'Sub' $P4056 = "179_1334921493.34" 
    .const 'Sub' $P4057 = "180_1334921493.34" 
    .const 'Sub' $P4058 = "181_1334921493.34" 
    .const 'Sub' $P4059 = "182_1334921493.34" 
    .const 'Sub' $P4060 = "183_1334921493.34" 
    .const 'Sub' $P4061 = "184_1334921493.34" 
    .const 'Sub' $P4062 = "185_1334921493.34" 
    .const 'Sub' $P4063 = "186_1334921493.34" 
    .const 'Sub' $P4064 = "187_1334921493.34" 
    .const 'Sub' $P4065 = "188_1334921493.34" 
    .const 'Sub' $P4066 = "189_1334921493.34" 
    .const 'Sub' $P4067 = "190_1334921493.34" 
    .const 'Sub' $P4068 = "191_1334921493.34" 
    .const 'Sub' $P4069 = "192_1334921493.34" 
    .const 'Sub' $P4070 = "193_1334921493.34" 
    .const 'Sub' $P4071 = "194_1334921493.34" 
    .const 'Sub' $P4072 = "195_1334921493.34" 
    .const 'Sub' $P4073 = "196_1334921493.34" 
    .const 'Sub' $P4074 = "197_1334921493.34" 
    .const 'Sub' $P4075 = "198_1334921493.34" 
    .const 'Sub' $P4076 = "199_1334921493.34" 
    .const 'Sub' $P4077 = "200_1334921493.34" 
    .const 'Sub' $P4078 = "201_1334921493.34" 
    .const 'Sub' $P4079 = "202_1334921493.34" 
    .const 'Sub' $P4080 = "203_1334921493.34" 
    .const 'Sub' $P4081 = "204_1334921493.34" 
    .const 'Sub' $P4082 = "205_1334921493.34" 
    .const 'Sub' $P4083 = "206_1334921493.34" 
    .const 'Sub' $P4084 = "207_1334921493.34" 
    .const 'Sub' $P4085 = "208_1334921493.34" 
    .const 'Sub' $P4086 = "209_1334921493.34" 
    .const 'Sub' $P4087 = "210_1334921493.34" 
    .const 'Sub' $P4088 = "211_1334921493.34" 
    .const 'Sub' $P4089 = "212_1334921493.34" 
    .const 'Sub' $P4090 = "213_1334921493.34" 
    .const 'Sub' $P4091 = "214_1334921493.34" 
    .const 'Sub' $P4092 = "215_1334921493.34" 
    .const 'Sub' $P4093 = "216_1334921493.34" 
    .const 'Sub' $P4094 = "217_1334921493.34" 
    .const 'Sub' $P4095 = "218_1334921493.34" 
    .const 'Sub' $P4096 = "219_1334921493.34" 
    .const 'Sub' $P4097 = "220_1334921493.34" 
    .const 'Sub' $P4098 = "221_1334921493.34" 
    .const 'Sub' $P4099 = "222_1334921493.34" 
    .const 'Sub' $P4100 = "223_1334921493.34" 
    .const 'Sub' $P4101 = "224_1334921493.34" 
    .const 'Sub' $P4102 = "225_1334921493.34" 
    .const 'Sub' $P4103 = "226_1334921493.34" 
    .const 'Sub' $P4104 = "227_1334921493.34" 
    .const 'Sub' $P4105 = "228_1334921493.34" 
    .const 'Sub' $P4106 = "229_1334921493.34" 
    .const 'Sub' $P4107 = "230_1334921493.34" 
    .const 'Sub' $P4108 = "231_1334921493.34" 
    .const 'Sub' $P4109 = "232_1334921493.34" 
    .const 'Sub' $P4110 = "233_1334921493.34" 
    .const 'Sub' $P4111 = "234_1334921493.34" 
    .const 'Sub' $P4112 = "235_1334921493.34" 
    .const 'Sub' $P4113 = "236_1334921493.34" 
    .const 'Sub' $P4114 = "237_1334921493.34" 
    .const 'Sub' $P4115 = "238_1334921493.34" 
    .const 'Sub' $P4116 = "239_1334921493.34" 
    .const 'Sub' $P4117 = "240_1334921493.34" 
    .const 'Sub' $P4118 = "241_1334921493.34" 
    .const 'Sub' $P4119 = "242_1334921493.34" 
    .const 'Sub' $P4120 = "243_1334921493.34" 
    .const 'Sub' $P4121 = "244_1334921493.34" 
    .const 'Sub' $P4122 = "245_1334921493.34" 
    .const 'Sub' $P4123 = "246_1334921493.34" 
    .const 'Sub' $P4124 = "247_1334921493.34" 
    .const 'Sub' $P4125 = "248_1334921493.34" 
    .const 'Sub' $P4126 = "249_1334921493.34" 
    .const 'Sub' $P4127 = "250_1334921493.34" 
    .const 'Sub' $P4128 = "251_1334921493.34" 
    .const 'Sub' $P4129 = "252_1334921493.34" 
    .const 'Sub' $P4130 = "253_1334921493.34" 
    .const 'Sub' $P4131 = "254_1334921493.34" 
    .const 'Sub' $P4132 = "255_1334921493.34" 
    .const 'Sub' $P4133 = "256_1334921493.34" 
    .const 'Sub' $P4134 = "257_1334921493.34" 
    .const 'Sub' $P4135 = "258_1334921493.34" 
    .const 'Sub' $P4136 = "259_1334921493.34" 
    .const 'Sub' $P4137 = "260_1334921493.34" 
    .const 'Sub' $P4138 = "261_1334921493.34" 
    .const 'Sub' $P4139 = "262_1334921493.34" 
    .const 'Sub' $P4140 = "263_1334921493.34" 
    .const 'Sub' $P4141 = "264_1334921493.34" 
    .const 'Sub' $P4142 = "265_1334921493.34" 
    .const 'Sub' $P4143 = "266_1334921493.34" 
    .const 'Sub' $P4144 = "267_1334921493.34" 
    .const 'Sub' $P4145 = "268_1334921493.34" 
    .const 'Sub' $P4146 = "269_1334921493.34" 
    .const 'Sub' $P4147 = "270_1334921493.34" 
    .const 'Sub' $P4148 = "271_1334921493.34" 
    .const 'Sub' $P4149 = "272_1334921493.34" 
    .const 'Sub' $P4150 = "273_1334921493.34" 
    .const 'Sub' $P4151 = "274_1334921493.34" 
    .const 'Sub' $P4152 = "275_1334921493.34" 
    .const 'Sub' $P4153 = "276_1334921493.34" 
    .const 'Sub' $P4154 = "277_1334921493.34" 
    .const 'Sub' $P4155 = "278_1334921493.34" 
    .const 'Sub' $P4156 = "279_1334921493.34" 
    .const 'Sub' $P4157 = "280_1334921493.34" 
    .const 'Sub' $P4158 = "281_1334921493.34" 
    .const 'Sub' $P4159 = "282_1334921493.34" 
    .const 'Sub' $P4160 = "283_1334921493.34" 
    .const 'Sub' $P4161 = "284_1334921493.34" 
    .const 'Sub' $P4162 = "285_1334921493.34" 
    .const 'Sub' $P4163 = "286_1334921493.34" 
    .const 'Sub' $P4164 = "287_1334921493.34" 
    .const 'Sub' $P4165 = "288_1334921493.34" 
    .const 'Sub' $P4166 = "289_1334921493.34" 
    .const 'Sub' $P4167 = "290_1334921493.34" 
    .const 'Sub' $P4168 = "291_1334921493.34" 
    .const 'Sub' $P4169 = "292_1334921493.34" 
    .const 'Sub' $P4170 = "293_1334921493.34" 
    .const 'Sub' $P4171 = "294_1334921493.34" 
    .const 'Sub' $P4172 = "295_1334921493.34" 
    .const 'Sub' $P4173 = "296_1334921493.34" 
    .const 'Sub' $P4174 = "297_1334921493.34" 
    .const 'Sub' $P4175 = "298_1334921493.34" 
    .const 'Sub' $P4176 = "299_1334921493.34" 
    .const 'Sub' $P4177 = "300_1334921493.34" 
    .const 'Sub' $P4178 = "301_1334921493.34" 
    .const 'Sub' $P4179 = "302_1334921493.34" 
    .const 'Sub' $P4180 = "303_1334921493.34" 
    .const 'Sub' $P4181 = "304_1334921493.34" 
    .const 'Sub' $P4182 = "305_1334921493.34" 
    .const 'Sub' $P4183 = "306_1334921493.34" 
    .const 'Sub' $P4184 = "307_1334921493.34" 
    .const 'Sub' $P4185 = "308_1334921493.34" 
    .const 'Sub' $P4186 = "309_1334921493.34" 
    .const 'Sub' $P4187 = "310_1334921493.34" 
    .const 'Sub' $P4188 = "311_1334921493.34" 
    .const 'Sub' $P4189 = "312_1334921493.34" 
    .const 'Sub' $P4190 = "313_1334921493.34" 
    .const 'Sub' $P4191 = "314_1334921493.34" 
    .const 'Sub' $P4192 = "315_1334921493.34" 
    .const 'Sub' $P4193 = "316_1334921493.34" 
    .const 'Sub' $P4194 = "317_1334921493.34" 
    .const 'Sub' $P4195 = "318_1334921493.34" 
    .const 'Sub' $P4196 = "319_1334921493.34" 
    .const 'Sub' $P4197 = "320_1334921493.34" 
    .const 'Sub' $P4198 = "321_1334921493.34" 
    .const 'Sub' $P4199 = "322_1334921493.34" 
    .const 'Sub' $P4200 = "323_1334921493.34" 
    .const 'Sub' $P4201 = "324_1334921493.34" 
    .const 'Sub' $P4202 = "325_1334921493.34" 
    .const 'Sub' $P4203 = "326_1334921493.34" 
    .const 'Sub' $P4204 = "327_1334921493.34" 
    .const 'Sub' $P4205 = "328_1334921493.34" 
    .const 'Sub' $P4206 = "329_1334921493.34" 
    .const 'Sub' $P4207 = "330_1334921493.34" 
    .const 'Sub' $P4208 = "331_1334921493.34" 
    .const 'Sub' $P4209 = "332_1334921493.34" 
    .const 'Sub' $P4210 = "333_1334921493.34" 
    .const 'Sub' $P4211 = "334_1334921493.34" 
    .const 'Sub' $P4212 = "335_1334921493.34" 
    .const 'Sub' $P4213 = "336_1334921493.34" 
    .const 'Sub' $P4214 = "337_1334921493.34" 
    .const 'Sub' $P4215 = "338_1334921493.34" 
    .const 'Sub' $P4216 = "339_1334921493.34" 
    .const 'Sub' $P4217 = "340_1334921493.34" 
    .const 'Sub' $P4218 = "341_1334921493.34" 
    .const 'Sub' $P4219 = "342_1334921493.34" 
    .const 'Sub' $P4220 = "343_1334921493.34" 
    .const 'Sub' $P4221 = "344_1334921493.34" 
    .const 'Sub' $P4222 = "345_1334921493.34" 
    .const 'Sub' $P4223 = "346_1334921493.34" 
    .const 'Sub' $P4224 = "347_1334921493.34" 
    .const 'Sub' $P4225 = "348_1334921493.34" 
    .const 'Sub' $P4226 = "349_1334921493.34" 
    .const 'Sub' $P4227 = "350_1334921493.34" 
    .const 'Sub' $P4228 = "351_1334921493.34" 
    .const 'Sub' $P4229 = "352_1334921493.34" 
    .const 'Sub' $P4230 = "353_1334921493.34" 
    .const 'Sub' $P4231 = "354_1334921493.34" 
    .const 'Sub' $P4232 = "355_1334921493.34" 
    .const 'Sub' $P4233 = "356_1334921493.34" 
    .const 'Sub' $P4234 = "357_1334921493.34" 
    .const 'Sub' $P4235 = "358_1334921493.34" 
    .const 'Sub' $P4236 = "359_1334921493.34" 
    .const 'Sub' $P4237 = "360_1334921493.34" 
    .const 'Sub' $P4238 = "361_1334921493.34" 
    .const 'Sub' $P4239 = "362_1334921493.34" 
    .const 'Sub' $P4240 = "363_1334921493.34" 
    .const 'Sub' $P4241 = "364_1334921493.34" 
    .const 'Sub' $P4242 = "365_1334921493.34" 
    .const 'Sub' $P4243 = "366_1334921493.34" 
    .const 'Sub' $P4244 = "367_1334921493.34" 
    .const 'Sub' $P4245 = "368_1334921493.34" 
    .const 'Sub' $P4246 = "369_1334921493.34" 
    .const 'Sub' $P4247 = "370_1334921493.34" 
    .const 'Sub' $P4248 = "371_1334921493.34" 
    .const 'Sub' $P4249 = "372_1334921493.34" 
    .const 'Sub' $P4250 = "373_1334921493.34" 
    .const 'Sub' $P4251 = "374_1334921493.34" 
    .const 'Sub' $P4252 = "375_1334921493.34" 
    .const 'Sub' $P4253 = "376_1334921493.34" 
    .const 'Sub' $P4254 = "377_1334921493.34" 
    .const 'Sub' $P4255 = "378_1334921493.34" 
    .const 'Sub' $P4256 = "379_1334921493.34" 
    .const 'Sub' $P4257 = "380_1334921493.34" 
    .const 'Sub' $P4258 = "381_1334921493.34" 
    .const 'Sub' $P4259 = "382_1334921493.34" 
    .const 'Sub' $P4260 = "383_1334921493.34" 
    .const 'Sub' $P4261 = "384_1334921493.34" 
    .const 'Sub' $P4262 = "385_1334921493.34" 
    .const 'Sub' $P4263 = "386_1334921493.34" 
    .const 'Sub' $P4264 = "387_1334921493.34" 
    .const 'Sub' $P4265 = "388_1334921493.34" 
    .const 'Sub' $P4266 = "389_1334921493.34" 
    .const 'Sub' $P4267 = "390_1334921493.34" 
    .const 'Sub' $P4268 = "391_1334921493.34" 
    .const 'Sub' $P4269 = "392_1334921493.34" 
    .const 'Sub' $P4270 = "393_1334921493.34" 
    .const 'Sub' $P4271 = "394_1334921493.34" 
    .const 'Sub' $P4272 = "395_1334921493.34" 
    .const 'Sub' $P4273 = "396_1334921493.34" 
    .const 'Sub' $P4274 = "397_1334921493.34" 
    .const 'Sub' $P4275 = "398_1334921493.34" 
    .const 'Sub' $P4276 = "399_1334921493.34" 
    .const 'Sub' $P4277 = "400_1334921493.34" 
    .const 'Sub' $P4278 = "401_1334921493.34" 
    .const 'Sub' $P4279 = "402_1334921493.34" 
    .const 'Sub' $P4280 = "403_1334921493.34" 
    .const 'Sub' $P4281 = "404_1334921493.34" 
    .const 'Sub' $P4282 = "405_1334921493.34" 
    .const 'Sub' $P4283 = "406_1334921493.34" 
    .const 'Sub' $P4284 = "407_1334921493.34" 
    .const 'Sub' $P4285 = "408_1334921493.34" 
    .const 'Sub' $P4286 = "409_1334921493.34" 
    .const 'Sub' $P4287 = "410_1334921493.34" 
    .const 'Sub' $P4288 = "411_1334921493.34" 
    .const 'Sub' $P4289 = "412_1334921493.34" 
    .const 'Sub' $P4290 = "413_1334921493.34" 
    .const 'Sub' $P4291 = "414_1334921493.34" 
    .const 'Sub' $P4292 = "415_1334921493.34" 
    .const 'Sub' $P4293 = "416_1334921493.34" 
    .const 'Sub' $P4294 = "417_1334921493.34" 
    .const 'Sub' $P4295 = "418_1334921493.34" 
    .const 'Sub' $P4296 = "419_1334921493.34" 
    .const 'Sub' $P4297 = "420_1334921493.34" 
    .const 'Sub' $P4298 = "421_1334921493.34" 
    .const 'Sub' $P4299 = "422_1334921493.34" 
    .const 'Sub' $P4300 = "423_1334921493.34" 
    .const 'Sub' $P4301 = "424_1334921493.34" 
    .const 'Sub' $P4302 = "425_1334921493.34" 
    .const 'Sub' $P4303 = "426_1334921493.34" 
    .const 'Sub' $P4304 = "427_1334921493.34" 
    .const 'Sub' $P4305 = "428_1334921493.34" 
    .const 'Sub' $P4306 = "429_1334921493.34" 
    .const 'Sub' $P4307 = "430_1334921493.34" 
    .const 'Sub' $P4308 = "431_1334921493.34" 
    .const 'Sub' $P4309 = "432_1334921493.34" 
    .const 'Sub' $P4310 = "433_1334921493.34" 
    .const 'Sub' $P4311 = "434_1334921493.34" 
    .const 'Sub' $P4312 = "435_1334921493.34" 
    .const 'Sub' $P4313 = "436_1334921493.34" 
    .const 'Sub' $P4314 = "437_1334921493.34" 
    .const 'Sub' $P4315 = "438_1334921493.34" 
    .const 'Sub' $P4316 = "439_1334921493.34" 
    .const 'Sub' $P4317 = "440_1334921493.34" 
    .const 'Sub' $P4318 = "441_1334921493.34" 
    .const 'Sub' $P4319 = "442_1334921493.34" 
    .const 'Sub' $P4320 = "443_1334921493.34" 
    .const 'Sub' $P4321 = "444_1334921493.34" 
    .const 'Sub' $P4322 = "445_1334921493.34" 
    .const 'Sub' $P4323 = "446_1334921493.34" 
    .const 'Sub' $P4324 = "447_1334921493.34" 
    .const 'Sub' $P4325 = "448_1334921493.34" 
    .const 'Sub' $P4326 = "449_1334921493.34" 
    .const 'Sub' $P4327 = "450_1334921493.34" 
    .const 'Sub' $P4328 = "451_1334921493.34" 
    .const 'Sub' $P4329 = "452_1334921493.34" 
    .const 'Sub' $P4330 = "453_1334921493.34" 
    .const 'Sub' $P4331 = "454_1334921493.34" 
    .const 'Sub' $P4332 = "455_1334921493.34" 
    .const 'Sub' $P4333 = "456_1334921493.34" 
    .const 'Sub' $P4334 = "457_1334921493.34" 
    .const 'Sub' $P4335 = "458_1334921493.34" 
    .const 'Sub' $P4336 = "459_1334921493.34" 
    .const 'Sub' $P4337 = "460_1334921493.34" 
    .const 'Sub' $P4338 = "461_1334921493.34" 
    .const 'Sub' $P4339 = "462_1334921493.34" 
    .const 'Sub' $P4340 = "463_1334921493.34" 
    .const 'Sub' $P4341 = "464_1334921493.34" 
    .const 'Sub' $P4342 = "465_1334921493.34" 
    .const 'Sub' $P4343 = "466_1334921493.34" 
    .const 'Sub' $P4344 = "467_1334921493.34" 
    .const 'Sub' $P4345 = "468_1334921493.34" 
    .const 'Sub' $P4346 = "469_1334921493.34" 
    .const 'Sub' $P4347 = "470_1334921493.34" 
    .const 'Sub' $P4348 = "471_1334921493.34" 
    .const 'Sub' $P4349 = "472_1334921493.34" 
    .const 'Sub' $P4350 = "473_1334921493.34" 
    .const 'Sub' $P4351 = "474_1334921493.34" 
    .const 'Sub' $P4352 = "475_1334921493.34" 
    .const 'Sub' $P4353 = "476_1334921493.34" 
    .const 'Sub' $P4354 = "477_1334921493.34" 
    .const 'Sub' $P4355 = "478_1334921493.34" 
    .const 'Sub' $P4356 = "479_1334921493.34" 
    .const 'Sub' $P4357 = "480_1334921493.34" 
    .const 'Sub' $P4358 = "481_1334921493.34" 
    .const 'Sub' $P4359 = "482_1334921493.34" 
    .const 'Sub' $P4360 = "483_1334921493.34" 
    .const 'Sub' $P4361 = "484_1334921493.34" 
    .const 'Sub' $P4362 = "485_1334921493.34" 
    .const 'Sub' $P4363 = "486_1334921493.34" 
    .const 'Sub' $P4364 = "487_1334921493.34" 
    .const 'Sub' $P4365 = "488_1334921493.34" 
    .const 'Sub' $P4366 = "489_1334921493.34" 
    .const 'Sub' $P4367 = "490_1334921493.34" 
    .const 'Sub' $P4368 = "491_1334921493.34" 
    .const 'Sub' $P4369 = "492_1334921493.34" 
    .const 'Sub' $P4370 = "493_1334921493.34" 
    .const 'Sub' $P4371 = "494_1334921493.34" 
    .const 'Sub' $P4372 = "495_1334921493.34" 
    .const 'Sub' $P4373 = "496_1334921493.34" 
    .const 'Sub' $P4374 = "497_1334921493.34" 
    .const 'Sub' $P4375 = "498_1334921493.34" 
    .const 'Sub' $P4376 = "499_1334921493.34" 
    .const 'Sub' $P4377 = "500_1334921493.34" 
    .const 'Sub' $P4378 = "501_1334921493.34" 
    .const 'Sub' $P4379 = "502_1334921493.34" 
    .const 'Sub' $P4380 = "503_1334921493.34" 
    .const 'Sub' $P4381 = "504_1334921493.34" 
    .const 'Sub' $P4382 = "505_1334921493.34" 
    .const 'Sub' $P4383 = "506_1334921493.34" 
    .const 'Sub' $P4384 = "507_1334921493.34" 
    .const 'Sub' $P4385 = "508_1334921493.34" 
    .const 'Sub' $P4386 = "509_1334921493.34" 
    .const 'Sub' $P4387 = "510_1334921493.34" 
    .const 'Sub' $P4388 = "511_1334921493.34" 
    .const 'Sub' $P4389 = "512_1334921493.34" 
    .const 'Sub' $P4390 = "513_1334921493.34" 
    .const 'Sub' $P4391 = "514_1334921493.34" 
    .const 'Sub' $P4392 = "515_1334921493.34" 
    .const 'Sub' $P4393 = "516_1334921493.34" 
    .const 'Sub' $P4394 = "517_1334921493.34" 
    .const 'Sub' $P4395 = "518_1334921493.34" 
    .const 'Sub' $P4396 = "519_1334921493.34" 
    .const 'Sub' $P4397 = "520_1334921493.34" 
    .const 'Sub' $P4398 = "521_1334921493.34" 
    .const 'Sub' $P4399 = "522_1334921493.34" 
    .const 'Sub' $P4400 = "523_1334921493.34" 
    .const 'Sub' $P4401 = "524_1334921493.34" 
    .const 'Sub' $P4402 = "525_1334921493.34" 
    .const 'Sub' $P4403 = "526_1334921493.34" 
    .const 'Sub' $P4404 = "527_1334921493.34" 
    .const 'Sub' $P4405 = "528_1334921493.34" 
    .const 'Sub' $P4406 = "529_1334921493.34" 
    .const 'Sub' $P4407 = "530_1334921493.34" 
    .const 'Sub' $P4408 = "531_1334921493.34" 
    .const 'Sub' $P4409 = "532_1334921493.34" 
    .const 'Sub' $P4410 = "533_1334921493.34" 
    .const 'Sub' $P4411 = "534_1334921493.34" 
    .const 'Sub' $P4412 = "535_1334921493.34" 
    .const 'Sub' $P4413 = "536_1334921493.34" 
    .const 'Sub' $P4414 = "537_1334921493.34" 
    .const 'Sub' $P4415 = "538_1334921493.34" 
    .const 'Sub' $P4416 = "539_1334921493.34" 
    .const 'Sub' $P4417 = "540_1334921493.34" 
    .const 'Sub' $P4418 = "541_1334921493.34" 
    new $P116, "ResizablePMCArray"
    push $P116, $P3887
    push $P116, $P3888
    push $P116, $P3889
    push $P116, $P3890
    push $P116, $P3891
    push $P116, $P3892
    push $P116, $P3893
    push $P116, $P3894
    push $P116, $P3895
    push $P116, $P3896
    push $P116, $P3897
    push $P116, $P3898
    push $P116, $P3899
    push $P116, $P3900
    push $P116, $P3901
    push $P116, $P3902
    push $P116, $P3903
    push $P116, $P3904
    push $P116, $P3905
    push $P116, $P3906
    push $P116, $P3907
    push $P116, $P3908
    push $P116, $P3909
    push $P116, $P3910
    push $P116, $P3911
    push $P116, $P3912
    push $P116, $P3913
    push $P116, $P3914
    push $P116, $P3915
    push $P116, $P3916
    push $P116, $P3917
    push $P116, $P3918
    push $P116, $P3919
    push $P116, $P3920
    push $P116, $P3921
    push $P116, $P3922
    push $P116, $P3923
    push $P116, $P3924
    push $P116, $P3925
    push $P116, $P3926
    push $P116, $P3927
    push $P116, $P3928
    push $P116, $P3929
    push $P116, $P3930
    push $P116, $P3931
    push $P116, $P3932
    push $P116, $P3933
    push $P116, $P3934
    push $P116, $P3935
    push $P116, $P3936
    push $P116, $P3937
    push $P116, $P3938
    push $P116, $P3939
    push $P116, $P3940
    push $P116, $P3941
    push $P116, $P3942
    push $P116, $P3943
    push $P116, $P3944
    push $P116, $P3945
    push $P116, $P3946
    push $P116, $P3947
    push $P116, $P3948
    push $P116, $P3949
    push $P116, $P3950
    push $P116, $P3951
    push $P116, $P3952
    push $P116, $P3953
    push $P116, $P3954
    push $P116, $P3955
    push $P116, $P3956
    push $P116, $P3957
    push $P116, $P3958
    push $P116, $P3959
    push $P116, $P3960
    push $P116, $P3961
    push $P116, $P3962
    push $P116, $P3963
    push $P116, $P3964
    push $P116, $P3965
    push $P116, $P3966
    push $P116, $P3967
    push $P116, $P3968
    push $P116, $P3969
    push $P116, $P3970
    push $P116, $P3971
    push $P116, $P3972
    push $P116, $P3973
    push $P116, $P3974
    push $P116, $P3975
    push $P116, $P3976
    push $P116, $P3977
    push $P116, $P3978
    push $P116, $P3979
    push $P116, $P3980
    push $P116, $P3981
    push $P116, $P3982
    push $P116, $P3983
    push $P116, $P3984
    push $P116, $P3985
    push $P116, $P3986
    push $P116, $P3987
    push $P116, $P3988
    push $P116, $P3989
    push $P116, $P3990
    push $P116, $P3991
    push $P116, $P3992
    push $P116, $P3993
    push $P116, $P3994
    push $P116, $P3995
    push $P116, $P3996
    push $P116, $P3997
    push $P116, $P3998
    push $P116, $P3999
    push $P116, $P4000
    push $P116, $P4001
    push $P116, $P4002
    push $P116, $P4003
    push $P116, $P4004
    push $P116, $P4005
    push $P116, $P4006
    push $P116, $P4007
    push $P116, $P4008
    push $P116, $P4009
    push $P116, $P4010
    push $P116, $P4011
    push $P116, $P4012
    push $P116, $P4013
    push $P116, $P4014
    push $P116, $P4015
    push $P116, $P4016
    push $P116, $P4017
    push $P116, $P4018
    push $P116, $P4019
    push $P116, $P4020
    push $P116, $P4021
    push $P116, $P4022
    push $P116, $P4023
    push $P116, $P4024
    push $P116, $P4025
    push $P116, $P4026
    push $P116, $P4027
    push $P116, $P4028
    push $P116, $P4029
    push $P116, $P4030
    push $P116, $P4031
    push $P116, $P4032
    push $P116, $P4033
    push $P116, $P4034
    push $P116, $P4035
    push $P116, $P4036
    push $P116, $P4037
    push $P116, $P4038
    push $P116, $P4039
    push $P116, $P4040
    push $P116, $P4041
    push $P116, $P4042
    push $P116, $P4043
    push $P116, $P4044
    push $P116, $P4045
    push $P116, $P4046
    push $P116, $P4047
    push $P116, $P4048
    push $P116, $P4049
    push $P116, $P4050
    push $P116, $P4051
    push $P116, $P4052
    push $P116, $P4053
    push $P116, $P4054
    push $P116, $P4055
    push $P116, $P4056
    push $P116, $P4057
    push $P116, $P4058
    push $P116, $P4059
    push $P116, $P4060
    push $P116, $P4061
    push $P116, $P4062
    push $P116, $P4063
    push $P116, $P4064
    push $P116, $P4065
    push $P116, $P4066
    push $P116, $P4067
    push $P116, $P4068
    push $P116, $P4069
    push $P116, $P4070
    push $P116, $P4071
    push $P116, $P4072
    push $P116, $P4073
    push $P116, $P4074
    push $P116, $P4075
    push $P116, $P4076
    push $P116, $P4077
    push $P116, $P4078
    push $P116, $P4079
    push $P116, $P4080
    push $P116, $P4081
    push $P116, $P4082
    push $P116, $P4083
    push $P116, $P4084
    push $P116, $P4085
    push $P116, $P4086
    push $P116, $P4087
    push $P116, $P4088
    push $P116, $P4089
    push $P116, $P4090
    push $P116, $P4091
    push $P116, $P4092
    push $P116, $P4093
    push $P116, $P4094
    push $P116, $P4095
    push $P116, $P4096
    push $P116, $P4097
    push $P116, $P4098
    push $P116, $P4099
    push $P116, $P4100
    push $P116, $P4101
    push $P116, $P4102
    push $P116, $P4103
    push $P116, $P4104
    push $P116, $P4105
    push $P116, $P4106
    push $P116, $P4107
    push $P116, $P4108
    push $P116, $P4109
    push $P116, $P4110
    push $P116, $P4111
    push $P116, $P4112
    push $P116, $P4113
    push $P116, $P4114
    push $P116, $P4115
    push $P116, $P4116
    push $P116, $P4117
    push $P116, $P4118
    push $P116, $P4119
    push $P116, $P4120
    push $P116, $P4121
    push $P116, $P4122
    push $P116, $P4123
    push $P116, $P4124
    push $P116, $P4125
    push $P116, $P4126
    push $P116, $P4127
    push $P116, $P4128
    push $P116, $P4129
    push $P116, $P4130
    push $P116, $P4131
    push $P116, $P4132
    push $P116, $P4133
    push $P116, $P4134
    push $P116, $P4135
    push $P116, $P4136
    push $P116, $P4137
    push $P116, $P4138
    push $P116, $P4139
    push $P116, $P4140
    push $P116, $P4141
    push $P116, $P4142
    push $P116, $P4143
    push $P116, $P4144
    push $P116, $P4145
    push $P116, $P4146
    push $P116, $P4147
    push $P116, $P4148
    push $P116, $P4149
    push $P116, $P4150
    push $P116, $P4151
    push $P116, $P4152
    push $P116, $P4153
    push $P116, $P4154
    push $P116, $P4155
    push $P116, $P4156
    push $P116, $P4157
    push $P116, $P4158
    push $P116, $P4159
    push $P116, $P4160
    push $P116, $P4161
    push $P116, $P4162
    push $P116, $P4163
    push $P116, $P4164
    push $P116, $P4165
    push $P116, $P4166
    push $P116, $P4167
    push $P116, $P4168
    push $P116, $P4169
    push $P116, $P4170
    push $P116, $P4171
    push $P116, $P4172
    push $P116, $P4173
    push $P116, $P4174
    push $P116, $P4175
    push $P116, $P4176
    push $P116, $P4177
    push $P116, $P4178
    push $P116, $P4179
    push $P116, $P4180
    push $P116, $P4181
    push $P116, $P4182
    push $P116, $P4183
    push $P116, $P4184
    push $P116, $P4185
    push $P116, $P4186
    push $P116, $P4187
    push $P116, $P4188
    push $P116, $P4189
    push $P116, $P4190
    push $P116, $P4191
    push $P116, $P4192
    push $P116, $P4193
    push $P116, $P4194
    push $P116, $P4195
    push $P116, $P4196
    push $P116, $P4197
    push $P116, $P4198
    push $P116, $P4199
    push $P116, $P4200
    push $P116, $P4201
    push $P116, $P4202
    push $P116, $P4203
    push $P116, $P4204
    push $P116, $P4205
    push $P116, $P4206
    push $P116, $P4207
    push $P116, $P4208
    push $P116, $P4209
    push $P116, $P4210
    push $P116, $P4211
    push $P116, $P4212
    push $P116, $P4213
    push $P116, $P4214
    push $P116, $P4215
    push $P116, $P4216
    push $P116, $P4217
    push $P116, $P4218
    push $P116, $P4219
    push $P116, $P4220
    push $P116, $P4221
    push $P116, $P4222
    push $P116, $P4223
    push $P116, $P4224
    push $P116, $P4225
    push $P116, $P4226
    push $P116, $P4227
    push $P116, $P4228
    push $P116, $P4229
    push $P116, $P4230
    push $P116, $P4231
    push $P116, $P4232
    push $P116, $P4233
    push $P116, $P4234
    push $P116, $P4235
    push $P116, $P4236
    push $P116, $P4237
    push $P116, $P4238
    push $P116, $P4239
    push $P116, $P4240
    push $P116, $P4241
    push $P116, $P4242
    push $P116, $P4243
    push $P116, $P4244
    push $P116, $P4245
    push $P116, $P4246
    push $P116, $P4247
    push $P116, $P4248
    push $P116, $P4249
    push $P116, $P4250
    push $P116, $P4251
    push $P116, $P4252
    push $P116, $P4253
    push $P116, $P4254
    push $P116, $P4255
    push $P116, $P4256
    push $P116, $P4257
    push $P116, $P4258
    push $P116, $P4259
    push $P116, $P4260
    push $P116, $P4261
    push $P116, $P4262
    push $P116, $P4263
    push $P116, $P4264
    push $P116, $P4265
    push $P116, $P4266
    push $P116, $P4267
    push $P116, $P4268
    push $P116, $P4269
    push $P116, $P4270
    push $P116, $P4271
    push $P116, $P4272
    push $P116, $P4273
    push $P116, $P4274
    push $P116, $P4275
    push $P116, $P4276
    push $P116, $P4277
    push $P116, $P4278
    push $P116, $P4279
    push $P116, $P4280
    push $P116, $P4281
    push $P116, $P4282
    push $P116, $P4283
    push $P116, $P4284
    push $P116, $P4285
    push $P116, $P4286
    push $P116, $P4287
    push $P116, $P4288
    push $P116, $P4289
    push $P116, $P4290
    push $P116, $P4291
    push $P116, $P4292
    push $P116, $P4293
    push $P116, $P4294
    push $P116, $P4295
    push $P116, $P4296
    push $P116, $P4297
    push $P116, $P4298
    push $P116, $P4299
    push $P116, $P4300
    push $P116, $P4301
    push $P116, $P4302
    push $P116, $P4303
    push $P116, $P4304
    push $P116, $P4305
    push $P116, $P4306
    push $P116, $P4307
    push $P116, $P4308
    push $P116, $P4309
    push $P116, $P4310
    push $P116, $P4311
    push $P116, $P4312
    push $P116, $P4313
    push $P116, $P4314
    push $P116, $P4315
    push $P116, $P4316
    push $P116, $P4317
    push $P116, $P4318
    push $P116, $P4319
    push $P116, $P4320
    push $P116, $P4321
    push $P116, $P4322
    push $P116, $P4323
    push $P116, $P4324
    push $P116, $P4325
    push $P116, $P4326
    push $P116, $P4327
    push $P116, $P4328
    push $P116, $P4329
    push $P116, $P4330
    push $P116, $P4331
    push $P116, $P4332
    push $P116, $P4333
    push $P116, $P4334
    push $P116, $P4335
    push $P116, $P4336
    push $P116, $P4337
    push $P116, $P4338
    push $P116, $P4339
    push $P116, $P4340
    push $P116, $P4341
    push $P116, $P4342
    push $P116, $P4343
    push $P116, $P4344
    push $P116, $P4345
    push $P116, $P4346
    push $P116, $P4347
    push $P116, $P4348
    push $P116, $P4349
    push $P116, $P4350
    push $P116, $P4351
    push $P116, $P4352
    push $P116, $P4353
    push $P116, $P4354
    push $P116, $P4355
    push $P116, $P4356
    push $P116, $P4357
    push $P116, $P4358
    push $P116, $P4359
    push $P116, $P4360
    push $P116, $P4361
    push $P116, $P4362
    push $P116, $P4363
    push $P116, $P4364
    push $P116, $P4365
    push $P116, $P4366
    push $P116, $P4367
    push $P116, $P4368
    push $P116, $P4369
    push $P116, $P4370
    push $P116, $P4371
    push $P116, $P4372
    push $P116, $P4373
    push $P116, $P4374
    push $P116, $P4375
    push $P116, $P4376
    push $P116, $P4377
    push $P116, $P4378
    push $P116, $P4379
    push $P116, $P4380
    push $P116, $P4381
    push $P116, $P4382
    push $P116, $P4383
    push $P116, $P4384
    push $P116, $P4385
    push $P116, $P4386
    push $P116, $P4387
    push $P116, $P4388
    push $P116, $P4389
    push $P116, $P4390
    push $P116, $P4391
    push $P116, $P4392
    push $P116, $P4393
    push $P116, $P4394
    push $P116, $P4395
    push $P116, $P4396
    push $P116, $P4397
    push $P116, $P4398
    push $P116, $P4399
    push $P116, $P4400
    push $P116, $P4401
    push $P116, $P4402
    push $P116, $P4403
    push $P116, $P4404
    push $P116, $P4405
    push $P116, $P4406
    push $P116, $P4407
    push $P116, $P4408
    push $P116, $P4409
    push $P116, $P4410
    push $P116, $P4411
    push $P116, $P4412
    push $P116, $P4413
    push $P116, $P4414
    push $P116, $P4415
    push $P116, $P4416
    push $P116, $P4417
    push $P116, $P4418
    .return ($P116)
.end


.HLL "nqp"

.namespace []
.sub "MAIN"  :subid("543_1334921493.34") :outer("542_1334921493.34")
    .param pmc param_1007
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2918
    .lex "@ARGS", param_1007
.annotate 'line', 2920
    new $P100, "Undef"
    set $P1008, $P100
    .lex "$nqpcomp", $P1008
.annotate 'line', 2927
    $P1010 = root_new ['parrot';'ResizablePMCArray']
    set $P1009, $P1010
    .lex "@clo", $P1009
.annotate 'line', 2920
    get_hll_global $P101, "GLOBAL"
    nqp_get_package_through_who $P102, $P101, "NQP"
    get_who $P103, $P102
    set $P104, $P103["Compiler"]
    $P105 = $P104."new"()
    set $P1008, $P105
.annotate 'line', 2921
    set $P101, $P1008
    unless_null $P101, vivify_657
    new $P101, "Undef"
  vivify_657:
    $P101."language"("nqp")
.annotate 'line', 2922
    set $P101, $P1008
    unless_null $P101, vivify_658
    new $P101, "Undef"
  vivify_658:
    get_hll_global $P102, "GLOBAL"
    nqp_get_package_through_who $P103, $P102, "NQP"
    get_who $P104, $P103
    set $P105, $P104["Grammar"]
    $P101."parsegrammar"($P105)
.annotate 'line', 2923
    set $P101, $P1008
    unless_null $P101, vivify_659
    new $P101, "Undef"
  vivify_659:
    get_hll_global $P102, "GLOBAL"
    nqp_get_package_through_who $P103, $P102, "NQP"
    get_who $P104, $P103
    set $P105, $P104["Actions"]
    $P101."parseactions"($P105)
.annotate 'line', 2924
    set $P101, $P1008
    unless_null $P101, vivify_660
    new $P101, "Undef"
  vivify_660:
    $P102 = $P101."config"()
    "hll-config"($P102)
.annotate 'line', 2927
    set $P101, $P1008
    unless_null $P101, vivify_661
    new $P101, "Undef"
  vivify_661:
    $P102 = $P101."commandline_options"()
    set $P1009, $P102
.annotate 'line', 2928
    set $P1011, $P1009
    unless_null $P1011, vivify_662
    $P1011 = root_new ['parrot';'ResizablePMCArray']
  vivify_662:
    $P1011."push"("parsetrace")
.annotate 'line', 2929
    set $P1012, $P1009
    unless_null $P1012, vivify_663
    $P1012 = root_new ['parrot';'ResizablePMCArray']
  vivify_663:
    $P1012."push"("setting=s")
.annotate 'line', 2930
    set $P1013, $P1009
    unless_null $P1013, vivify_664
    $P1013 = root_new ['parrot';'ResizablePMCArray']
  vivify_664:
    $P1013."push"("setting-path=s")
.annotate 'line', 2931
    set $P1014, $P1009
    unless_null $P1014, vivify_665
    $P1014 = root_new ['parrot';'ResizablePMCArray']
  vivify_665:
    $P1014."push"("module-path=s")
.annotate 'line', 2932
    set $P1015, $P1009
    unless_null $P1015, vivify_666
    $P1015 = root_new ['parrot';'ResizablePMCArray']
  vivify_666:
    $P1015."push"("vmlibs=s")
.annotate 'line', 2935
    set $P101, $P1008
    unless_null $P101, vivify_667
    new $P101, "Undef"
  vivify_667:
    set $P1016, param_1007
    unless_null $P1016, vivify_668
    $P1016 = root_new ['parrot';'ResizablePMCArray']
  vivify_668:
    $P101."command_line"($P1016, "utf8" :named("encoding"), "ascii iso-8859-1" :named("transcode"))
.annotate 'line', 2937
    set $P101, $P1008
    unless_null $P101, vivify_669
    new $P101, "Undef"
  vivify_669:
    $P102 = $P101."nqpevent"()
.annotate 'line', 2918
    .return ($P102)
.end


.HLL "nqp"

.namespace []
.sub "hll-config"  :subid("544_1334921493.34") :outer("542_1334921493.34")
    .param pmc param_1020
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2941
    .lex "$config", param_1020
.annotate 'line', 2942
    new $P101, "String"
    assign $P101, "2012.04-4-g362983f"
    set $P1021, param_1020
    unless_null $P1021, vivify_670
    $P1021 = root_new ['parrot';'Hash']
    set param_1020, $P1021
  vivify_670:
    set $P1021["version"], $P101
.annotate 'line', 2943
    new $P101, "String"
    assign $P101, "2012-04-20T11:31:33Z"
    set $P1022, param_1020
    unless_null $P1022, vivify_671
    $P1022 = root_new ['parrot';'Hash']
    set param_1020, $P1022
  vivify_671:
    set $P1022["build-date"], $P101
.annotate 'line', 2941
    .return ($P101)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1024"  :subid("545_1334921493.34") :outer("542_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 7
    .const 'Sub' $P1380 = "39_1334921493.34" 
    capture_lex $P1380
    .const 'Sub' $P1365 = "38_1334921493.34" 
    capture_lex $P1365
    .const 'Sub' $P1348 = "37_1334921493.34" 
    capture_lex $P1348
    .const 'Sub' $P1345 = "36_1334921493.34" 
    capture_lex $P1345
    .const 'Sub' $P1342 = "35_1334921493.34" 
    capture_lex $P1342
    .const 'Sub' $P1314 = "34_1334921493.34" 
    capture_lex $P1314
    .const 'Sub' $P1300 = "33_1334921493.34" 
    capture_lex $P1300
    .const 'Sub' $P1262 = "32_1334921493.34" 
    capture_lex $P1262
    .const 'Sub' $P1259 = "31_1334921493.34" 
    capture_lex $P1259
    .const 'Sub' $P1254 = "30_1334921493.34" 
    capture_lex $P1254
    .const 'Sub' $P1249 = "29_1334921493.34" 
    capture_lex $P1249
    .const 'Sub' $P1244 = "28_1334921493.34" 
    capture_lex $P1244
    .const 'Sub' $P1229 = "27_1334921493.34" 
    capture_lex $P1229
    .const 'Sub' $P1221 = "26_1334921493.34" 
    capture_lex $P1221
    .const 'Sub' $P1215 = "25_1334921493.34" 
    capture_lex $P1215
    .const 'Sub' $P1206 = "24_1334921493.34" 
    capture_lex $P1206
    .const 'Sub' $P1189 = "23_1334921493.34" 
    capture_lex $P1189
    .const 'Sub' $P1100 = "22_1334921493.34" 
    capture_lex $P1100
    .const 'Sub' $P1094 = "18_1334921493.34" 
    capture_lex $P1094
    .const 'Sub' $P1087 = "17_1334921493.34" 
    capture_lex $P1087
    .const 'Sub' $P1073 = "16_1334921493.34" 
    capture_lex $P1073
    .const 'Sub' $P1065 = "15_1334921493.34" 
    capture_lex $P1065
    .const 'Sub' $P1054 = "14_1334921493.34" 
    capture_lex $P1054
    .const 'Sub' $P1047 = "13_1334921493.34" 
    capture_lex $P1047
    .const 'Sub' $P1043 = "12_1334921493.34" 
    capture_lex $P1043
    .const 'Sub' $P1040 = "11_1334921493.34" 
    capture_lex $P1040
    .const 'Sub' $P1029 = "10_1334921493.34" 
    capture_lex $P1029
.annotate 'line', 58
    new $P103, "Undef"
    set $P1026, $P103
    .lex "$loader", $P1026
    .lex "$?PACKAGE", $P1027
    .lex "$?CLASS", $P1028
    get_hll_global $P104, "ModuleLoader"
    set $P1026, $P104
.annotate 'line', 570
    .const 'Sub' $P1380 = "39_1334921493.34" 
    newclosure $P1434, $P1380
.annotate 'line', 7
    .return ($P1434)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "push_lexpad" :anon :subid("10_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1030
    .param pmc param_1031
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 27
    .lex "self", param_1030
    .lex "$/", param_1031
.annotate 'line', 29
    new $P104, "Undef"
    set $P1032, $P104
    .lex "$pad", $P1032
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Block"]
    get_hll_global $P109, "GLOBAL"
    nqp_get_package_through_who $P110, $P109, "PAST"
    get_who $P111, $P110
    set $P112, $P111["Stmts"]
    $P113 = $P112."new"()
    set $P114, param_1031
    unless_null $P114, vivify_672
    new $P114, "Undef"
  vivify_672:
    $P115 = $P108."new"($P113, $P114 :named("node"))
    set $P1032, $P115
.annotate 'line', 30
    set $P105, param_1030
    nqp_decontainerize $P106, $P105
    nqp_get_sc_object $P107, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1034, $P106, $P107, "@!BLOCKS", 8
    unless_null $P1034, vivify_673
    $P1034 = root_new ['parrot';'ResizablePMCArray']
  vivify_673:
    set $N100, $P1034
    unless $N100, if_1033_end
.annotate 'line', 31
    set $P108, param_1030
    nqp_decontainerize $P109, $P108
    nqp_get_sc_object $P110, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1035, $P109, $P110, "@!BLOCKS", 8
    unless_null $P1035, vivify_674
    $P1035 = root_new ['parrot';'ResizablePMCArray']
  vivify_674:
    set $N101, $P1035
    new $P111, 'Float'
    set $P111, $N101
    sub $P112, $P111, 1
    set $I100, $P112
    set $P113, param_1030
    nqp_decontainerize $P114, $P113
    nqp_get_sc_object $P115, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1036, $P114, $P115, "@!BLOCKS", 8
    unless_null $P1036, vivify_675
    $P1036 = root_new ['parrot';'ResizablePMCArray']
  vivify_675:
    set $P116, $P1036[$I100]
    unless_null $P116, vivify_676
    new $P116, "Undef"
  vivify_676:
    set $P1037, $P1032
    unless_null $P1037, vivify_677
    $P1037 = root_new ['parrot';'Hash']
    set $P1032, $P1037
  vivify_677:
    set $P1037["outer"], $P116
  if_1033_end:
.annotate 'line', 33
    set $P105, $P1032
    unless_null $P105, vivify_678
    new $P105, "Undef"
  vivify_678:
    set $P106, param_1030
    nqp_decontainerize $P107, $P106
    nqp_get_sc_object $P108, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1038, $P107, $P108, "@!BLOCKS", 8
    unless_null $P1038, vivify_679
    $P1038 = root_new ['parrot';'ResizablePMCArray']
  vivify_679:
    set $N100, $P1038
    set $I100, $N100
    set $P109, param_1030
    nqp_decontainerize $P110, $P109
    nqp_get_sc_object $P111, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1039, $P110, $P111, "@!BLOCKS", 8
    unless_null $P1039, vivify_680
    $P1039 = root_new ['parrot';'ResizablePMCArray']
    repr_bind_attr_obj $P110, $P111, "@!BLOCKS", 8, $P1039
  vivify_680:
    set $P1039[$I100], $P105
.annotate 'line', 27
    set $P105, $P1032
    unless_null $P105, vivify_681
    new $P105, "Undef"
  vivify_681:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pop_lexpad" :anon :subid("11_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1041
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 38
    .lex "self", param_1041
.annotate 'line', 39
    set $P104, param_1041
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1042, $P105, $P106, "@!BLOCKS", 8
    unless_null $P1042, vivify_682
    $P1042 = root_new ['parrot';'ResizablePMCArray']
  vivify_682:
    $P107 = $P1042."pop"()
.annotate 'line', 38
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "cur_lexpad" :anon :subid("12_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1044
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 43
    .lex "self", param_1044
.annotate 'line', 44
    set $P104, param_1044
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1045, $P105, $P106, "@!BLOCKS", 8
    unless_null $P1045, vivify_683
    $P1045 = root_new ['parrot';'ResizablePMCArray']
  vivify_683:
    set $N100, $P1045
    new $P107, 'Float'
    set $P107, $N100
    sub $P108, $P107, 1
    set $I100, $P108
.annotate 'line', 43
    set $P109, param_1044
    nqp_decontainerize $P110, $P109
    nqp_get_sc_object $P111, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1046, $P110, $P111, "@!BLOCKS", 8
    unless_null $P1046, vivify_684
    $P1046 = root_new ['parrot';'ResizablePMCArray']
  vivify_684:
    set $P112, $P1046[$I100]
    unless_null $P112, vivify_685
    new $P112, "Undef"
  vivify_685:
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "get_legacy_block_list" :anon :subid("13_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1048
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 48
    .lex "self", param_1048
.annotate 'line', 49
    $P1050 = root_new ['parrot';'ResizablePMCArray']
    set $P1049, $P1050
    .lex "@x", $P1049
    set $P104, param_1048
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1051, $P105, $P106, "@!BLOCKS", 8
    unless_null $P1051, vivify_686
    $P1051 = root_new ['parrot';'ResizablePMCArray']
  vivify_686:
    clone $P107, $P1051
    set $P1049, $P107
.annotate 'line', 50
    set $P1052, $P1049
    unless_null $P1052, vivify_687
    $P1052 = root_new ['parrot';'ResizablePMCArray']
  vivify_687:
    $P1052."reverse"()
.annotate 'line', 48
    set $P1053, $P1049
    unless_null $P1053, vivify_688
    $P1053 = root_new ['parrot';'ResizablePMCArray']
  vivify_688:
    .return ($P1053)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "load_setting" :anon :subid("14_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1057
    .param pmc param_1058
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 61
    .const 'Sub' $P1061 = "546_1334921493.34" 
    capture_lex $P1061
    new $P1056, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1056, control_1055
    push_eh $P1056
    .lex "self", param_1057
    .lex "$setting_name", param_1058
.annotate 'line', 63
    set $P105, param_1058
    unless_null $P105, vivify_689
    new $P105, "Undef"
  vivify_689:
    set $S100, $P105
    isne $I100, $S100, "NULL"
    if $I100, if_1059
    new $P104, 'Integer'
    set $P104, $I100
    goto if_1059_end
  if_1059:
    .const 'Sub' $P1061 = "546_1334921493.34" 
    capture_lex $P1061
    $P107 = $P1061()
    set $P104, $P107
  if_1059_end:
.annotate 'line', 61
    .return ($P104)
  control_1055:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P105, exception, "payload"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1060"  :anon :subid("546_1334921493.34") :outer("14_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 67
    new $P106, "Undef"
    set $P1062, $P106
    .lex "$setting", $P1062
.annotate 'line', 68
    find_lex $P107, "$loader"
    unless_null $P107, vivify_690
    new $P107, "Undef"
  vivify_690:
    find_lex $P108, "$setting_name"
    unless_null $P108, vivify_691
    new $P108, "Undef"
  vivify_691:
    $P109 = $P107."load_setting"($P108)
    find_dynamic_lex $P112, "%*COMPILING"
    unless_null $P112, vivify_692
    get_hll_global $P110, "GLOBAL"
    get_who $P111, $P110
    set $P112, $P111["%COMPILING"]
    unless_null $P112, vivify_693
    die "Contextual %*COMPILING not found"
  vivify_693:
    store_dynamic_lex "%*COMPILING", $P112
  vivify_692:
    set $P1063, $P112["%?OPTIONS"]
    unless_null $P1063, vivify_694
    $P1063 = root_new ['parrot';'Hash']
    set $P112["%?OPTIONS"], $P1063
  vivify_694:
    set $P1063["outer_ctx"], $P109
    set $P1062, $P109
.annotate 'line', 71
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    $P109 = $P108."is_precompilation_mode"()
    if $P109, if_1064
.annotate 'line', 89
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Op"]
.annotate 'line', 91
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Var"]
    $P120 = $P119."new"("block" :named("name"), "register" :named("scope"))
.annotate 'line', 92
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Op"]
.annotate 'line', 94
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
    new $P129, "ResizablePMCArray"
    $P130 = $P128."new"("ModuleLoader" :named("name"), $P129 :named("namespace"), "package" :named("scope"))
    find_lex $P131, "$setting_name"
    unless_null $P131, vivify_695
    new $P131, "Undef"
  vivify_695:
    $P132 = $P124."new"($P130, $P131, "callmethod" :named("pasttype"), "load_setting" :named("name"))
.annotate 'line', 92
    $P133 = $P115."new"($P120, $P132, "callmethod" :named("pasttype"), "set_outer_ctx" :named("name"))
.annotate 'line', 89
    $P111."add_fixup_task"($P133 :named("fixup_past"))
.annotate 'line', 87
    goto if_1064_end
  if_1064:
.annotate 'line', 72
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Stmts"]
.annotate 'line', 73
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Op"]
    $P120 = $P119."new"("ModuleLoader.pbc", "load_bytecode vs" :named("pirop"))
.annotate 'line', 76
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Op"]
.annotate 'line', 78
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
    $P129 = $P128."new"("block" :named("name"), "register" :named("scope"))
.annotate 'line', 79
    get_hll_global $P130, "GLOBAL"
    nqp_get_package_through_who $P131, $P130, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Op"]
.annotate 'line', 81
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Var"]
    new $P138, "ResizablePMCArray"
    $P139 = $P137."new"("ModuleLoader" :named("name"), $P138 :named("namespace"), "package" :named("scope"))
    find_lex $P140, "$setting_name"
    unless_null $P140, vivify_696
    new $P140, "Undef"
  vivify_696:
    $P141 = $P133."new"($P139, $P140, "callmethod" :named("pasttype"), "load_setting" :named("name"))
.annotate 'line', 79
    $P142 = $P124."new"($P129, $P141, "callmethod" :named("pasttype"), "set_outer_ctx" :named("name"))
.annotate 'line', 76
    $P143 = $P115."new"($P120, $P142)
.annotate 'line', 72
    $P111."add_load_dependency_task"($P143 :named("deserialize_past"))
  if_1064_end:
.annotate 'line', 100
    new $P107, "Exception"
    set $P107['type'], .CONTROL_RETURN
    set $P108, $P1062
    unless_null $P108, vivify_697
    new $P108, "Undef"
  vivify_697:
    getattribute $P109, $P108, "lex_pad"
    setattribute $P107, 'payload', $P109
    throw $P107
.annotate 'line', 63
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "load_module" :anon :subid("15_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1068
    .param pmc param_1069
    .param pmc param_1070
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 106
    new $P1067, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1067, control_1066
    push_eh $P1067
    .lex "self", param_1068
    .lex "$module_name", param_1069
    .lex "$cur_GLOBALish", param_1070
.annotate 'line', 108
    new $P104, "Undef"
    set $P1071, $P104
    .lex "$module", $P1071
    find_lex $P105, "$loader"
    unless_null $P105, vivify_698
    new $P105, "Undef"
  vivify_698:
    set $P106, param_1069
    unless_null $P106, vivify_699
    new $P106, "Undef"
  vivify_699:
    set $P107, param_1070
    unless_null $P107, vivify_700
    new $P107, "Undef"
  vivify_700:
    $P108 = $P105."load_module"($P106, $P107)
    set $P1071, $P108
.annotate 'line', 111
    set $P105, param_1068
    nqp_decontainerize $P106, $P105
    $P107 = $P106."is_precompilation_mode"()
    unless $P107, if_1072_end
.annotate 'line', 112
    set $P108, param_1068
    nqp_decontainerize $P109, $P108
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Stmts"]
.annotate 'line', 113
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Op"]
    $P118 = $P117."new"("ModuleLoader.pbc", "load_bytecode vs" :named("pirop"))
.annotate 'line', 116
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "PAST"
    get_who $P121, $P120
    set $P122, $P121["Op"]
.annotate 'line', 118
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Var"]
    new $P127, "ResizablePMCArray"
    $P128 = $P126."new"("ModuleLoader" :named("name"), $P127 :named("namespace"), "package" :named("scope"))
    set $P129, param_1069
    unless_null $P129, vivify_701
    new $P129, "Undef"
  vivify_701:
    $P130 = $P122."new"($P128, $P129, "callmethod" :named("pasttype"), "load_module" :named("name"))
.annotate 'line', 116
    $P131 = $P113."new"($P118, $P130)
.annotate 'line', 112
    $P109."add_load_dependency_task"($P131 :named("deserialize_past"))
  if_1072_end:
.annotate 'line', 123
    new $P105, "Exception"
    set $P105['type'], .CONTROL_RETURN
    set $P106, $P1071
    unless_null $P106, vivify_702
    new $P106, "Undef"
  vivify_702:
    getattribute $P107, $P106, "lex_pad"
    setattribute $P105, 'payload', $P107
    throw $P105
.annotate 'line', 106
    .return ()
  control_1066:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P105, exception, "payload"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "install_package_symbol" :anon :subid("16_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1074
    .param pmc param_1075
    .param pmc param_1076
    .param pmc param_1077
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 128
    .const 'Sub' $P1084 = "547_1334921493.34" 
    capture_lex $P1084
    .lex "self", param_1074
    .lex "$package", param_1075
    .lex "@sym", param_1076
    .lex "$obj", param_1077
.annotate 'line', 130
    new $P104, "Undef"
    set $P1078, $P104
    .lex "$name", $P1078
.annotate 'line', 133
    new $P105, "Undef"
    set $P1079, $P105
    .lex "$target", $P1079
.annotate 'line', 129
    set $P1080, param_1076
    unless_null $P1080, vivify_703
    $P1080 = root_new ['parrot';'ResizablePMCArray']
  vivify_703:
    clone $P106, $P1080
    set param_1076, $P106
.annotate 'line', 130
    set $P1081, param_1076
    unless_null $P1081, vivify_704
    $P1081 = root_new ['parrot';'ResizablePMCArray']
  vivify_704:
    $P106 = $P1081."pop"()
    set $S100, $P106
    new $P107, 'String'
    set $P107, $S100
    set $P1078, $P107
.annotate 'line', 133
    set $P106, param_1075
    unless_null $P106, vivify_705
    new $P106, "Undef"
  vivify_705:
    set $P1079, $P106
.annotate 'line', 134
    set $P1082, param_1076
    unless_null $P1082, vivify_706
    $P1082 = root_new ['parrot';'ResizablePMCArray']
  vivify_706:
    defined $I100, $P1082
    unless $I100, for_undef_707
    iter $P106, $P1082
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop1086_handler
    push_eh $P108
  loop1086_test:
    unless $P106, loop1086_done
    shift $P107, $P106
  loop1086_redo:
    .const 'Sub' $P1084 = "547_1334921493.34" 
    capture_lex $P1084
    $P1084($P107)
  loop1086_next:
    goto loop1086_test
  loop1086_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop1086_next
    eq $P109, .CONTROL_LOOP_REDO, loop1086_redo
  loop1086_done:
    pop_eh 
  for_undef_707:
.annotate 'line', 137
    set $P106, param_1077
    unless_null $P106, vivify_710
    new $P106, "Undef"
  vivify_710:
    set $P107, $P1078
    unless_null $P107, vivify_711
    new $P107, "Undef"
  vivify_711:
    set $P108, $P1079
    unless_null $P108, vivify_712
    new $P108, "Undef"
    set $P1079, $P108
  vivify_712:
    get_who $P109, $P108
    set $P109[$P107], $P106
.annotate 'line', 128
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1083"  :anon :subid("547_1334921493.34") :outer("16_1334921493.34")
    .param pmc param_1085
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 134
    .lex "$_", param_1085
.annotate 'line', 135
    find_lex $P108, "$target"
    unless_null $P108, vivify_708
    new $P108, "Undef"
  vivify_708:
    find_lex $P109, "$_"
    unless_null $P109, vivify_709
    new $P109, "Undef"
  vivify_709:
    set $S100, $P109
    nqp_get_package_through_who $P110, $P108, $S100
    store_lex "$target", $P110
.annotate 'line', 134
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "install_lexical_symbol" :anon :subid("17_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1088
    .param pmc param_1089
    .param pmc param_1090
    .param pmc param_1091
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 144
    .lex "self", param_1088
    .lex "$block", param_1089
    .lex "$name", param_1090
    .lex "$obj", param_1091
.annotate 'line', 151
    new $P104, "Undef"
    set $P1092, $P104
    .lex "$fixup", $P1092
.annotate 'line', 146
    set $P105, param_1089
    unless_null $P105, vivify_713
    new $P105, "Undef"
  vivify_713:
    set $P106, param_1090
    unless_null $P106, vivify_714
    new $P106, "Undef"
  vivify_714:
    set $P107, param_1091
    unless_null $P107, vivify_715
    new $P107, "Undef"
  vivify_715:
    $P105."symbol"($P106, "lexical" :named("scope"), $P107 :named("value"))
.annotate 'line', 147
    new $P105, "Float"
    assign $P105, 0
    set $I100, $P105
    set $P1093, param_1089
    unless_null $P1093, vivify_716
    $P1093 = root_new ['parrot';'ResizablePMCArray']
  vivify_716:
    set $P106, $P1093[$I100]
    unless_null $P106, vivify_717
    new $P106, "Undef"
  vivify_717:
    get_hll_global $P107, "GLOBAL"
    nqp_get_package_through_who $P108, $P107, "PAST"
    get_who $P109, $P108
    set $P110, $P109["Var"]
    set $P111, param_1090
    unless_null $P111, vivify_718
    new $P111, "Undef"
  vivify_718:
    $P112 = $P110."new"("lexical" :named("scope"), $P111 :named("name"), 1 :named("isdecl"), 1 :named("directaccess"))
    $P106."push"($P112)
.annotate 'line', 151
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Stmts"]
.annotate 'line', 152
    get_hll_global $P109, "GLOBAL"
    nqp_get_package_through_who $P110, $P109, "PAST"
    get_who $P111, $P110
    set $P112, $P111["Op"]
.annotate 'line', 154
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Val"]
    set $P117, param_1089
    unless_null $P117, vivify_719
    new $P117, "Undef"
  vivify_719:
    $P118 = $P116."new"($P117 :named("value"), "LexInfo" :named("returns"))
.annotate 'line', 155
    set $P119, param_1090
    unless_null $P119, vivify_720
    new $P119, "Undef"
  vivify_720:
    set $S100, $P119
    set $P120, param_1088
    nqp_decontainerize $P121, $P120
    set $P122, param_1091
    unless_null $P122, vivify_721
    new $P122, "Undef"
  vivify_721:
    $P123 = $P121."get_slot_past_for_object"($P122)
    $P124 = $P112."new"($P118, $S100, $P123, "callmethod" :named("pasttype"), "set_static_lexpad_value" :named("name"))
.annotate 'line', 159
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Op"]
.annotate 'line', 161
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P130, $P129, "PAST"
    get_who $P131, $P130
    set $P132, $P131["Val"]
    set $P133, param_1089
    unless_null $P133, vivify_722
    new $P133, "Undef"
  vivify_722:
    $P134 = $P132."new"($P133 :named("value"), "LexInfo" :named("returns"))
    $P135 = $P128."new"($P134, "callmethod" :named("pasttype"), "finish_static_lexpad" :named("name"))
.annotate 'line', 159
    $P136 = $P108."new"($P124, $P135)
.annotate 'line', 151
    set $P1092, $P136
.annotate 'line', 164
    set $P105, param_1088
    nqp_decontainerize $P106, $P105
    set $P107, $P1092
    unless_null $P107, vivify_723
    new $P107, "Undef"
  vivify_723:
    set $P108, $P1092
    unless_null $P108, vivify_724
    new $P108, "Undef"
  vivify_724:
    $P109 = $P106."add_fixup_task"($P107 :named("deserialize_past"), $P108 :named("fixup_past"))
.annotate 'line', 144
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "install_package_routine" :anon :subid("18_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1095
    .param pmc param_1096
    .param pmc param_1097
    .param pmc param_1098
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 169
    .lex "self", param_1095
    .lex "$package", param_1096
    .lex "$name", param_1097
    .lex "$past_block", param_1098
.annotate 'line', 170
    new $P104, "Undef"
    set $P1099, $P104
    .lex "$fixup", $P1099
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Op"]
.annotate 'line', 172
    get_hll_global $P109, "GLOBAL"
    nqp_get_package_through_who $P110, $P109, "PAST"
    get_who $P111, $P110
    set $P112, $P111["Var"]
.annotate 'line', 174
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Op"]
    set $P117, param_1095
    nqp_decontainerize $P118, $P117
    set $P119, param_1096
    unless_null $P119, vivify_725
    new $P119, "Undef"
  vivify_725:
    $P120 = $P118."get_slot_past_for_object"($P119)
    $P121 = $P116."new"($P120, "get_who PP" :named("pirop"))
.annotate 'line', 175
    set $P122, param_1097
    unless_null $P122, vivify_726
    new $P122, "Undef"
  vivify_726:
    set $S100, $P122
    $P123 = $P112."new"($P121, $S100, "keyed" :named("scope"))
.annotate 'line', 177
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Val"]
    set $P128, param_1098
    unless_null $P128, vivify_727
    new $P128, "Undef"
  vivify_727:
    $P129 = $P127."new"($P128 :named("value"))
    $P130 = $P108."new"($P123, $P129, "bind_6model" :named("pasttype"))
.annotate 'line', 170
    set $P1099, $P130
.annotate 'line', 179
    set $P105, param_1095
    nqp_decontainerize $P106, $P105
    set $P107, $P1099
    unless_null $P107, vivify_728
    new $P107, "Undef"
  vivify_728:
    set $P108, $P1099
    unless_null $P108, vivify_729
    new $P108, "Undef"
  vivify_729:
    $P109 = $P106."add_fixup_task"($P107 :named("deserialize_past"), $P108 :named("fixup_past"))
.annotate 'line', 169
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "create_code" :anon :subid("22_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1103
    .param pmc param_1104
    .param pmc param_1105
    .param pmc param_1106
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 184
    .const 'Sub' $P1184 = "552_1334921493.34" 
    capture_lex $P1184
    .const 'Sub' $P1176 = "21_1334921493.34" 
    capture_lex $P1176
    .const 'Sub' $P1169 = "20_1334921493.34" 
    capture_lex $P1169
    .const 'Sub' $P1123 = "19_1334921493.34" 
    capture_lex $P1123
    .const 'Sub' $P1114 = "548_1334921493.34" 
    capture_lex $P1114
    new $P1102, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1102, control_1101
    push_eh $P1102
    .lex "self", param_1103
    .lex "$past", param_1104
    .lex "$name", param_1105
    .lex "$is_dispatcher", param_1106
.annotate 'line', 186
    new $P104, "Undef"
    set $P1107, $P104
    .lex "$code_type", $P1107
.annotate 'line', 187
    new $P105, "Undef"
    set $P1108, $P105
    .lex "$have_code_type", $P1108
.annotate 'line', 197
    new $P106, "Undef"
    set $P1109, $P106
    .lex "$stub_code", $P1109
.annotate 'line', 233
    new $P107, "Undef"
    set $P1110, $P107
    .lex "$fixups", $P1110
.annotate 'line', 234
    new $P108, "Undef"
    set $P1111, $P108
    .lex "$dummy", $P1111
.annotate 'line', 235
    new $P109, "Undef"
    set $P1112, $P109
    .lex "$code_ref_idx", $P1112
.annotate 'line', 184
    set $P110, $P1107
    unless_null $P110, vivify_730
    new $P110, "Undef"
  vivify_730:
.annotate 'line', 187
    new $P110, "Float"
    assign $P110, 0
    set $P1108, $P110
.annotate 'line', 188
    .const 'Sub' $P1114 = "548_1334921493.34" 
    capture_lex $P1114
    $P1114()
.annotate 'line', 197
    .const 'Sub' $P1123 = "19_1334921493.34" 
    newclosure $P1159, $P1123
    set $P1109, $P1159
.annotate 'line', 233
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Stmts"]
    $P114 = $P113."new"()
    set $P1110, $P114
.annotate 'line', 184
    set $P110, $P1111
    unless_null $P110, vivify_788
    new $P110, "Undef"
  vivify_788:
    set $P110, $P1112
    unless_null $P110, vivify_789
    new $P110, "Undef"
  vivify_789:
.annotate 'line', 236
    set $P1161, param_1104
    unless_null $P1161, vivify_790
    $P1161 = root_new ['parrot';'Hash']
  vivify_790:
    set $P110, $P1161["compile_time_dummy"]
    unless_null $P110, vivify_791
    new $P110, "Undef"
  vivify_791:
    defined $I100, $P110
    if $I100, if_1160
.annotate 'line', 241
    set $P111, $P1109
    unless_null $P111, vivify_792
    new $P111, "Undef"
  vivify_792:
    nqp_fresh_stub $P112, $P111
    set $P1111, $P112
.annotate 'line', 242
    set $P111, $P1111
    unless_null $P111, vivify_793
    new $P111, "Undef"
  vivify_793:
    set $P112, param_1105
    unless_null $P112, vivify_794
    new $P112, "Undef"
  vivify_794:
    set $S100, $P112
    assign $P111, $S100
.annotate 'line', 245
    set $P111, $P1111
    unless_null $P111, vivify_795
    new $P111, "Undef"
  vivify_795:
    set $P112, $P1111
    unless_null $P112, vivify_796
    new $P112, "Undef"
  vivify_796:
    setprop $P111, "STATIC_CODE_REF", $P112
.annotate 'line', 246
    set $P111, param_1103
    nqp_decontainerize $P112, $P111
    set $P113, $P1111
    unless_null $P113, vivify_797
    new $P113, "Undef"
  vivify_797:
    set $P114, param_1104
    unless_null $P114, vivify_798
    new $P114, "Undef"
  vivify_798:
    $P115 = $P112."add_root_code_ref"($P113, $P114)
    set $P1112, $P115
.annotate 'line', 247
    set $P111, $P1112
    unless_null $P111, vivify_799
    new $P111, "Undef"
  vivify_799:
    set $P112, param_1104
    unless_null $P112, vivify_800
    new $P112, "Undef"
  vivify_800:
    $P113 = $P112."subid"()
    set $P114, param_1103
    nqp_decontainerize $P115, $P114
    nqp_get_sc_object $P116, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1163, $P115, $P116, "%!code_stub_sc_idx", 11
    unless_null $P1163, vivify_801
    $P1163 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P115, $P116, "%!code_stub_sc_idx", 11, $P1163
  vivify_801:
    set $P1163[$P113], $P111
.annotate 'line', 248
    set $P111, $P1111
    unless_null $P111, vivify_802
    new $P111, "Undef"
  vivify_802:
    set $P1164, param_1104
    unless_null $P1164, vivify_803
    $P1164 = root_new ['parrot';'Hash']
    set param_1104, $P1164
  vivify_803:
    set $P1164["compile_time_dummy"], $P111
.annotate 'line', 251
    set $P111, $P1111
    unless_null $P111, vivify_804
    new $P111, "Undef"
  vivify_804:
    set $P112, param_1104
    unless_null $P112, vivify_805
    new $P112, "Undef"
  vivify_805:
    setprop $P111, "PAST", $P112
.annotate 'line', 256
    set $P111, $P1108
    unless_null $P111, vivify_806
    new $P111, "Undef"
  vivify_806:
    unless $P111, if_1165_end
.annotate 'line', 257
    set $P112, $P1110
    unless_null $P112, vivify_807
    new $P112, "Undef"
  vivify_807:
    set $P113, param_1104
    unless_null $P113, vivify_808
    new $P113, "Undef"
  vivify_808:
    $P114 = $P113."subid"()
    set $P115, param_1103
    nqp_decontainerize $P116, $P115
    nqp_get_sc_object $P117, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1166, $P116, $P117, "%!code_object_fixup_list", 10
    unless_null $P1166, vivify_809
    $P1166 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P116, $P117, "%!code_object_fixup_list", 10, $P1166
  vivify_809:
    set $P1166[$P114], $P112
.annotate 'line', 258
    set $P112, param_1103
    nqp_decontainerize $P113, $P112
    $P114 = $P113."is_precompilation_mode"()
    if $P114, if_1167
.annotate 'line', 264
    set $P115, $P1111
    unless_null $P115, vivify_810
    new $P115, "Undef"
  vivify_810:
    .const 'Sub' $P1176 = "21_1334921493.34" 
    newclosure $P1181, $P1176
    setprop $P115, "CLONE_CALLBACK", $P1181
.annotate 'line', 263
    goto if_1167_end
  if_1167:
.annotate 'line', 259
    set $P115, $P1111
    unless_null $P115, vivify_821
    new $P115, "Undef"
  vivify_821:
    .const 'Sub' $P1169 = "20_1334921493.34" 
    newclosure $P1174, $P1169
    setprop $P115, "CLONE_CALLBACK", $P1174
  if_1167_end:
  if_1165_end:
.annotate 'line', 239
    goto if_1160_end
  if_1160:
.annotate 'line', 237
    set $P1162, param_1104
    unless_null $P1162, vivify_826
    $P1162 = root_new ['parrot';'Hash']
  vivify_826:
    set $P111, $P1162["compile_time_dummy"]
    unless_null $P111, vivify_827
    new $P111, "Undef"
  vivify_827:
    set $P1111, $P111
  if_1160_end:
.annotate 'line', 287
    set $P110, param_1103
    nqp_decontainerize $P111, $P110
    set $P112, $P1110
    unless_null $P112, vivify_828
    new $P112, "Undef"
  vivify_828:
    $P111."add_fixup_task"($P112 :named("fixup_past"))
.annotate 'line', 291
    set $P111, $P1108
    unless_null $P111, vivify_829
    new $P111, "Undef"
  vivify_829:
    if $P111, if_1182
.annotate 'line', 329
    set $P116, $P1110
    unless_null $P116, vivify_830
    new $P116, "Undef"
  vivify_830:
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P119, $P118
    set $P120, $P119["Op"]
.annotate 'line', 331
    set $P121, param_1103
    nqp_decontainerize $P122, $P121
    set $P123, $P1112
    unless_null $P123, vivify_831
    new $P123, "Undef"
  vivify_831:
    $P124 = $P122."get_slot_past_for_code_ref_at"($P123)
.annotate 'line', 332
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Val"]
    set $P129, param_1104
    unless_null $P129, vivify_832
    new $P129, "Undef"
  vivify_832:
    $P130 = $P128."new"($P129 :named("value"))
    $P131 = $P120."new"($P124, $P130, "assign vPP" :named("pirop"))
.annotate 'line', 329
    $P116."push"($P131)
.annotate 'line', 334
    new $P116, "Exception"
    set $P116['type'], .CONTROL_RETURN
    set $P117, $P1111
    unless_null $P117, vivify_833
    new $P117, "Undef"
  vivify_833:
    setattribute $P116, 'payload', $P117
    throw $P116
.annotate 'line', 326
    goto if_1182_end
  if_1182:
.annotate 'line', 291
    .const 'Sub' $P1184 = "552_1334921493.34" 
    capture_lex $P1184
    $P115 = $P1184()
    set $P110, $P115
  if_1182_end:
.annotate 'line', 184
    .return ($P110)
  control_1101:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P111, exception, "payload"
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1113"  :anon :subid("548_1334921493.34") :outer("22_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 188
    new $P1117, 'ExceptionHandler'
    set_label $P1117, control_1116
    $P1117."handle_types_except"(.CONTROL_ALL)
    push_eh $P1117
.annotate 'line', 189
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    new $P112, "ResizablePMCArray"
    push $P112, "NQPRoutine"
    $P113 = $P111."find_sym"($P112)
    store_lex "$code_type", $P113
.annotate 'line', 190
    find_dynamic_lex $P112, "$*PACKAGE"
    unless_null $P112, vivify_731
    get_hll_global $P110, "GLOBAL"
    get_who $P111, $P110
    set $P112, $P111["$PACKAGE"]
    unless_null $P112, vivify_732
    die "Contextual $*PACKAGE not found"
  vivify_732:
  vivify_731:
    get_how $P113, $P112
    find_dynamic_lex $P116, "$*PACKAGE"
    unless_null $P116, vivify_733
    get_hll_global $P114, "GLOBAL"
    get_who $P115, $P114
    set $P116, $P115["$PACKAGE"]
    unless_null $P116, vivify_734
    die "Contextual $*PACKAGE not found"
  vivify_734:
  vivify_733:
    $S100 = $P113."name"($P116)
    isne $I100, $S100, "NQPRoutine"
    new $P117, 'Integer'
    set $P117, $I100
    store_lex "$have_code_type", $P117
.annotate 'line', 188
    pop_eh 
    goto skip_handler_1115
  control_1116:
    peek_exception $P1118
    .local pmc exception 
    .get_results (exception) 
    new $P1120, 'Integer'
    set $P1120, 1
    set exception["handled"], $P1120
    set $I1121, exception["handled"]
    eq $I1121, 1, handled_1119
    rethrow exception
  handled_1119:
    finalize $P1118
    .return (exception)
  skip_handler_1115:
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1122"  :anon :subid("19_1334921493.34") :outer("22_1334921493.34")
    .param pmc param_1124 :slurpy
    .param pmc param_1125 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 197
    .const 'Sub' $P1133 = "549_1334921493.34" 
    capture_lex $P1133
    .lex "@args", param_1124
    .lex "%named", param_1125
.annotate 'line', 200
    new $P110, "Undef"
    set $P1126, $P110
    .lex "$nqpcomp", $P1126
.annotate 'line', 201
    new $P111, "Undef"
    set $P1127, $P111
    .lex "$post", $P1127
.annotate 'line', 202
    new $P112, "Undef"
    set $P1128, $P112
    .lex "$pir", $P1128
.annotate 'line', 203
    new $P113, "Undef"
    set $P1129, $P113
    .lex "$compiled", $P1129
.annotate 'line', 206
    new $P114, "Undef"
    set $P1130, $P114
    .lex "$c", $P1130
.annotate 'line', 207
    new $P115, "Undef"
    set $P1131, $P115
    .lex "$i", $P1131
.annotate 'line', 199
    find_lex $P116, "self"
    nqp_decontainerize $P117, $P116
    find_lex $P118, "$past"
    unless_null $P118, vivify_735
    new $P118, "Undef"
  vivify_735:
    $P117."set_nqp_language_defaults"($P118)
.annotate 'line', 200
    compreg $P116, "nqp"
    set $P1126, $P116
.annotate 'line', 201
    set $P116, $P1126
    unless_null $P116, vivify_736
    new $P116, "Undef"
  vivify_736:
    find_lex $P117, "$past"
    unless_null $P117, vivify_737
    new $P117, "Undef"
  vivify_737:
    $P118 = $P116."post"($P117)
    set $P1127, $P118
.annotate 'line', 202
    set $P116, $P1126
    unless_null $P116, vivify_738
    new $P116, "Undef"
  vivify_738:
    set $P117, $P1127
    unless_null $P117, vivify_739
    new $P117, "Undef"
  vivify_739:
    $P118 = $P116."pir"($P117)
    set $P1128, $P118
.annotate 'line', 203
    set $P116, $P1126
    unless_null $P116, vivify_740
    new $P116, "Undef"
  vivify_740:
    set $P117, $P1128
    unless_null $P117, vivify_741
    new $P117, "Undef"
  vivify_741:
    $P118 = $P116."evalpmc"($P117)
    set $P1129, $P118
.annotate 'line', 206
    set $P116, $P1129
    unless_null $P116, vivify_742
    new $P116, "Undef"
  vivify_742:
    elements $I100, $P116
    new $P117, 'Integer'
    set $P117, $I100
    set $P1130, $P117
.annotate 'line', 207
    new $P116, "Float"
    assign $P116, 0
    set $P1131, $P116
.annotate 'line', 208
    new $P119, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P119, loop1156_handler
    push_eh $P119
  loop1156_test:
    set $P116, $P1131
    unless_null $P116, vivify_743
    new $P116, "Undef"
  vivify_743:
    set $N100, $P116
    set $P117, $P1130
    unless_null $P117, vivify_744
    new $P117, "Undef"
  vivify_744:
    set $N101, $P117
    islt $I100, $N100, $N101
    unless $I100, loop1156_done
  loop1156_redo:
    .const 'Sub' $P1133 = "549_1334921493.34" 
    capture_lex $P1133
    $P1133()
  loop1156_next:
    goto loop1156_test
  loop1156_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P121, exception, 'type'
    eq $P121, .CONTROL_LOOP_NEXT, loop1156_next
    eq $P121, .CONTROL_LOOP_REDO, loop1156_redo
  loop1156_done:
    pop_eh 
.annotate 'line', 229
    set $P116, $P1129
    unless_null $P116, vivify_785
    new $P116, "Undef"
  vivify_785:
    set $P1157, param_1124
    unless_null $P1157, vivify_786
    $P1157 = root_new ['parrot';'ResizablePMCArray']
  vivify_786:
    set $P1158, param_1125
    unless_null $P1158, vivify_787
    $P1158 = root_new ['parrot';'Hash']
  vivify_787:
    $P117 = $P116($P1157 :flat, $P1158 :flat)
.annotate 'line', 197
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1132"  :anon :subid("549_1334921493.34") :outer("19_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 208
    .const 'Sub' $P1139 = "550_1334921493.34" 
    capture_lex $P1139
.annotate 'line', 209
    new $P118, "Undef"
    set $P1134, $P118
    .lex "$subid", $P1134
    find_lex $P119, "$i"
    unless_null $P119, vivify_745
    new $P119, "Undef"
  vivify_745:
    set $I101, $P119
    find_lex $P1135, "$compiled"
    unless_null $P1135, vivify_746
    $P1135 = root_new ['parrot';'ResizablePMCArray']
  vivify_746:
    set $P120, $P1135[$I101]
    unless_null $P120, vivify_747
    new $P120, "Undef"
  vivify_747:
    $P121 = $P120."get_subid"()
    set $P1134, $P121
.annotate 'line', 210
    set $P122, $P1134
    unless_null $P122, vivify_748
    new $P122, "Undef"
  vivify_748:
    find_lex $P119, "self"
    nqp_decontainerize $P120, $P119
    nqp_get_sc_object $P121, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1137, $P120, $P121, "%!code_objects_to_fix_up", 9
    unless_null $P1137, vivify_749
    $P1137 = root_new ['parrot';'Hash']
  vivify_749:
    exists $I101, $P1137[$P122]
    unless $I101, if_1136_end
    .const 'Sub' $P1139 = "550_1334921493.34" 
    capture_lex $P1139
    $P1139()
  if_1136_end:
.annotate 'line', 226
    find_lex $P119, "$i"
    unless_null $P119, vivify_784
    new $P119, "Undef"
  vivify_784:
    add $P120, $P119, 1
    store_lex "$i", $P120
.annotate 'line', 208
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1138"  :anon :subid("550_1334921493.34") :outer("549_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 210
    .const 'Sub' $P1146 = "551_1334921493.34" 
    capture_lex $P1146
.annotate 'line', 214
    new $P123, "Undef"
    set $P1140, $P123
    .lex "$static", $P1140
.annotate 'line', 223
    new $P124, "Undef"
    set $P1141, $P124
    .lex "$fixup_stmts", $P1141
.annotate 'line', 214
    find_lex $P125, "$subid"
    unless_null $P125, vivify_750
    new $P125, "Undef"
  vivify_750:
    find_lex $P126, "self"
    nqp_decontainerize $P127, $P126
    nqp_get_sc_object $P128, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1142, $P127, $P128, "%!code_objects_to_fix_up", 9
    unless_null $P1142, vivify_751
    $P1142 = root_new ['parrot';'Hash']
  vivify_751:
    set $P129, $P1142[$P125]
    unless_null $P129, vivify_752
    new $P129, "Undef"
  vivify_752:
    $P130 = $P129."shift"()
    set $P1140, $P130
.annotate 'line', 215
    set $P125, $P1140
    unless_null $P125, vivify_753
    new $P125, "Undef"
  vivify_753:
    find_lex $P126, "$code_type"
    unless_null $P126, vivify_754
    new $P126, "Undef"
  vivify_754:
    find_lex $P127, "$i"
    unless_null $P127, vivify_755
    new $P127, "Undef"
  vivify_755:
    set $I102, $P127
    find_lex $P1143, "$compiled"
    unless_null $P1143, vivify_756
    $P1143 = root_new ['parrot';'ResizablePMCArray']
  vivify_756:
    set $P128, $P1143[$I102]
    unless_null $P128, vivify_757
    new $P128, "Undef"
  vivify_757:
    setattribute $P125, $P126, "$!do", $P128
.annotate 'line', 216
    find_lex $P126, "$subid"
    unless_null $P126, vivify_758
    new $P126, "Undef"
  vivify_758:
    find_lex $P127, "self"
    nqp_decontainerize $P128, $P127
    nqp_get_sc_object $P129, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1144, $P128, $P129, "%!code_objects_to_fix_up", 9
    unless_null $P1144, vivify_759
    $P1144 = root_new ['parrot';'Hash']
  vivify_759:
    set $P130, $P1144[$P126]
    unless_null $P130, vivify_760
    new $P130, "Undef"
  vivify_760:
    defined $I102, $P130
    unless $I102, for_undef_761
    iter $P125, $P130
    new $P132, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P132, loop1149_handler
    push_eh $P132
  loop1149_test:
    unless $P125, loop1149_done
    shift $P131, $P125
  loop1149_redo:
    .const 'Sub' $P1146 = "551_1334921493.34" 
    capture_lex $P1146
    $P1146($P131)
  loop1149_next:
    goto loop1149_test
  loop1149_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P133, exception, 'type'
    eq $P133, .CONTROL_LOOP_NEXT, loop1149_next
    eq $P133, .CONTROL_LOOP_REDO, loop1149_redo
  loop1149_done:
    pop_eh 
  for_undef_761:
.annotate 'line', 219
    find_lex $P125, "$i"
    unless_null $P125, vivify_767
    new $P125, "Undef"
  vivify_767:
    set $I102, $P125
    find_lex $P1150, "$compiled"
    unless_null $P1150, vivify_768
    $P1150 = root_new ['parrot';'ResizablePMCArray']
  vivify_768:
    set $P126, $P1150[$I102]
    unless_null $P126, vivify_769
    new $P126, "Undef"
  vivify_769:
    find_lex $P127, "$i"
    unless_null $P127, vivify_770
    new $P127, "Undef"
  vivify_770:
    set $I103, $P127
    find_lex $P1151, "$compiled"
    unless_null $P1151, vivify_771
    $P1151 = root_new ['parrot';'ResizablePMCArray']
  vivify_771:
    set $P128, $P1151[$I103]
    unless_null $P128, vivify_772
    new $P128, "Undef"
  vivify_772:
    setprop $P126, "STATIC_CODE_REF", $P128
.annotate 'line', 220
    find_lex $P125, "self"
    nqp_decontainerize $P126, $P125
    find_lex $P127, "$subid"
    unless_null $P127, vivify_773
    new $P127, "Undef"
  vivify_773:
    find_lex $P128, "self"
    nqp_decontainerize $P129, $P128
    nqp_get_sc_object $P130, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1152, $P129, $P130, "%!code_stub_sc_idx", 11
    unless_null $P1152, vivify_774
    $P1152 = root_new ['parrot';'Hash']
  vivify_774:
    set $P131, $P1152[$P127]
    unless_null $P131, vivify_775
    new $P131, "Undef"
  vivify_775:
    find_lex $P132, "$i"
    unless_null $P132, vivify_776
    new $P132, "Undef"
  vivify_776:
    set $I102, $P132
    find_lex $P1153, "$compiled"
    unless_null $P1153, vivify_777
    $P1153 = root_new ['parrot';'ResizablePMCArray']
  vivify_777:
    set $P133, $P1153[$I102]
    unless_null $P133, vivify_778
    new $P133, "Undef"
  vivify_778:
    $P126."update_root_code_ref"($P131, $P133)
.annotate 'line', 223
    find_lex $P125, "$subid"
    unless_null $P125, vivify_779
    new $P125, "Undef"
  vivify_779:
    find_lex $P126, "self"
    nqp_decontainerize $P127, $P126
    nqp_get_sc_object $P128, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1154, $P127, $P128, "%!code_object_fixup_list", 10
    unless_null $P1154, vivify_780
    $P1154 = root_new ['parrot';'Hash']
  vivify_780:
    set $P129, $P1154[$P125]
    unless_null $P129, vivify_781
    new $P129, "Undef"
  vivify_781:
    set $P1141, $P129
.annotate 'line', 224
    new $P128, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P128, loop1155_handler
    push_eh $P128
  loop1155_test:
    set $P125, $P1141
    unless_null $P125, vivify_782
    new $P125, "Undef"
  vivify_782:
    $P126 = $P125."list"()
    set $N102, $P126
    unless $N102, loop1155_done
  loop1155_redo:
    set $P127, $P1141
    unless_null $P127, vivify_783
    new $P127, "Undef"
  vivify_783:
    $P127."shift"()
  loop1155_next:
    goto loop1155_test
  loop1155_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P129, exception, 'type'
    eq $P129, .CONTROL_LOOP_NEXT, loop1155_next
    eq $P129, .CONTROL_LOOP_REDO, loop1155_redo
  loop1155_done:
    pop_eh 
.annotate 'line', 210
    .return ($N102)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1145"  :anon :subid("551_1334921493.34") :outer("550_1334921493.34")
    .param pmc param_1147
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 216
    .lex "$_", param_1147
.annotate 'line', 217
    find_lex $P132, "$_"
    unless_null $P132, vivify_762
    new $P132, "Undef"
  vivify_762:
    find_lex $P133, "$code_type"
    unless_null $P133, vivify_763
    new $P133, "Undef"
  vivify_763:
    find_lex $P134, "$i"
    unless_null $P134, vivify_764
    new $P134, "Undef"
  vivify_764:
    set $I103, $P134
    find_lex $P1148, "$compiled"
    unless_null $P1148, vivify_765
    $P1148 = root_new ['parrot';'ResizablePMCArray']
  vivify_765:
    set $P135, $P1148[$I103]
    unless_null $P135, vivify_766
    new $P135, "Undef"
  vivify_766:
    clone $P136, $P135
    setattribute $P132, $P133, "$!do", $P136
.annotate 'line', 216
    .return ($P136)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1175"  :anon :subid("21_1334921493.34") :outer("22_1334921493.34")
    .param pmc param_1177
    .param pmc param_1178
    .param pmc param_1179
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 264
    .lex "$orig", param_1177
    .lex "$clone", param_1178
    .lex "$code_obj", param_1179
.annotate 'line', 266
    find_lex $P116, "self"
    nqp_decontainerize $P117, $P116
    set $P118, param_1179
    unless_null $P118, vivify_811
    new $P118, "Undef"
  vivify_811:
    $P117."add_object"($P118)
.annotate 'line', 267
    find_lex $P116, "$fixups"
    unless_null $P116, vivify_812
    new $P116, "Undef"
  vivify_812:
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P119, $P118
    set $P120, $P119["Op"]
.annotate 'line', 269
    find_lex $P121, "self"
    nqp_decontainerize $P122, $P121
    set $P123, param_1179
    unless_null $P123, vivify_813
    new $P123, "Undef"
  vivify_813:
    $P124 = $P122."get_ref"($P123)
.annotate 'line', 270
    find_lex $P125, "self"
    nqp_decontainerize $P126, $P125
    find_lex $P127, "$code_type"
    unless_null $P127, vivify_814
    new $P127, "Undef"
  vivify_814:
    $P128 = $P126."get_ref"($P127)
.annotate 'line', 272
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P130, $P129, "PAST"
    get_who $P131, $P130
    set $P132, $P131["Op"]
.annotate 'line', 274
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "PAST"
    get_who $P135, $P134
    set $P136, $P135["Op"]
    get_hll_global $P137, "GLOBAL"
    nqp_get_package_through_who $P138, $P137, "PAST"
    get_who $P139, $P138
    set $P140, $P139["Val"]
    find_lex $P141, "$past"
    unless_null $P141, vivify_815
    new $P141, "Undef"
  vivify_815:
    $P142 = $P140."new"($P141 :named("value"))
    $P143 = $P136."new"($P142, "clone PP" :named("pirop"))
.annotate 'line', 275
    find_lex $P144, "self"
    nqp_decontainerize $P145, $P144
    set $P146, param_1179
    unless_null $P146, vivify_816
    new $P146, "Undef"
  vivify_816:
    $P147 = $P145."get_ref"($P146)
    $P148 = $P132."new"($P143, $P147, "set_sub_code_object 0PP" :named("pirop"))
.annotate 'line', 272
    $P149 = $P120."new"($P124, $P128, "$!do", $P148, "setattribute vPPsP" :named("pirop"))
.annotate 'line', 267
    $P116."push"($P149)
.annotate 'line', 280
    find_lex $P116, "$past"
    unless_null $P116, vivify_817
    new $P116, "Undef"
  vivify_817:
    $P117 = $P116."subid"()
    find_lex $P118, "self"
    nqp_decontainerize $P119, $P118
    nqp_get_sc_object $P120, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1180, $P119, $P120, "%!code_objects_to_fix_up", 9
    unless_null $P1180, vivify_818
    $P1180 = root_new ['parrot';'Hash']
  vivify_818:
    set $P121, $P1180[$P117]
    unless_null $P121, vivify_819
    new $P121, "Undef"
  vivify_819:
    set $P122, param_1179
    unless_null $P122, vivify_820
    new $P122, "Undef"
  vivify_820:
    $P123 = $P121."push"($P122)
.annotate 'line', 264
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1168"  :anon :subid("20_1334921493.34") :outer("22_1334921493.34")
    .param pmc param_1170
    .param pmc param_1171
    .param pmc param_1172
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 259
    .lex "$orig", param_1170
    .lex "$clone", param_1171
    .lex "$code_obj", param_1172
.annotate 'line', 260
    find_lex $P116, "$past"
    unless_null $P116, vivify_822
    new $P116, "Undef"
  vivify_822:
    $P117 = $P116."subid"()
    find_lex $P118, "self"
    nqp_decontainerize $P119, $P118
    nqp_get_sc_object $P120, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1173, $P119, $P120, "%!code_objects_to_fix_up", 9
    unless_null $P1173, vivify_823
    $P1173 = root_new ['parrot';'Hash']
  vivify_823:
    set $P121, $P1173[$P117]
    unless_null $P121, vivify_824
    new $P121, "Undef"
  vivify_824:
    set $P122, param_1172
    unless_null $P122, vivify_825
    new $P122, "Undef"
  vivify_825:
    $P123 = $P121."push"($P122)
.annotate 'line', 259
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1183"  :anon :subid("552_1334921493.34") :outer("22_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 293
    new $P112, "Undef"
    set $P1185, $P112
    .lex "$code_obj", $P1185
.annotate 'line', 297
    new $P113, "Undef"
    set $P1186, $P113
    .lex "$slot", $P1186
.annotate 'line', 293
    find_lex $P114, "$code_type"
    unless_null $P114, vivify_834
    new $P114, "Undef"
  vivify_834:
    repr_instance_of $P115, $P114
    set $P1185, $P115
.annotate 'line', 294
    set $P114, $P1185
    unless_null $P114, vivify_835
    new $P114, "Undef"
  vivify_835:
    find_lex $P115, "$code_type"
    unless_null $P115, vivify_836
    new $P115, "Undef"
  vivify_836:
    find_lex $P116, "$dummy"
    unless_null $P116, vivify_837
    new $P116, "Undef"
  vivify_837:
    setattribute $P114, $P115, "$!do", $P116
.annotate 'line', 295
    find_lex $P114, "$is_dispatcher"
    unless_null $P114, vivify_838
    new $P114, "Undef"
  vivify_838:
    unless $P114, if_1187_end
    set $P115, $P1185
    unless_null $P115, vivify_839
    new $P115, "Undef"
  vivify_839:
    find_lex $P116, "$code_type"
    unless_null $P116, vivify_840
    new $P116, "Undef"
  vivify_840:
    new $P117, "ResizablePMCArray"
    setattribute $P115, $P116, "$!dispatchees", $P117
  if_1187_end:
.annotate 'line', 297
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    set $P116, $P1185
    unless_null $P116, vivify_841
    new $P116, "Undef"
  vivify_841:
    $P117 = $P115."add_object"($P116)
    set $P1186, $P117
.annotate 'line', 300
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
.annotate 'line', 301
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Op"]
.annotate 'line', 303
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Val"]
    find_lex $P124, "$past"
    unless_null $P124, vivify_842
    new $P124, "Undef"
  vivify_842:
    $P125 = $P123."new"($P124 :named("value"))
.annotate 'line', 304
    find_lex $P126, "self"
    nqp_decontainerize $P127, $P126
    set $P128, $P1185
    unless_null $P128, vivify_843
    new $P128, "Undef"
  vivify_843:
    $P129 = $P127."get_ref"($P128)
    $P130 = $P119."new"($P125, $P129, "set_sub_code_object vPP" :named("pirop"))
.annotate 'line', 300
    $P115."add_fixup_task"($P130 :named("deserialize_past"))
.annotate 'line', 308
    find_lex $P114, "$fixups"
    unless_null $P114, vivify_844
    new $P114, "Undef"
  vivify_844:
    get_hll_global $P115, "GLOBAL"
    nqp_get_package_through_who $P116, $P115, "PAST"
    get_who $P117, $P116
    set $P118, $P117["Op"]
.annotate 'line', 310
    find_lex $P119, "self"
    nqp_decontainerize $P120, $P119
    set $P121, $P1185
    unless_null $P121, vivify_845
    new $P121, "Undef"
  vivify_845:
    $P122 = $P120."get_ref"($P121)
.annotate 'line', 311
    find_lex $P123, "self"
    nqp_decontainerize $P124, $P123
    find_lex $P125, "$code_type"
    unless_null $P125, vivify_846
    new $P125, "Undef"
  vivify_846:
    $P126 = $P124."get_ref"($P125)
.annotate 'line', 313
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P130, $P129["Val"]
    find_lex $P131, "$past"
    unless_null $P131, vivify_847
    new $P131, "Undef"
  vivify_847:
    $P132 = $P130."new"($P131 :named("value"))
    $P133 = $P118."new"($P122, $P126, "$!do", $P132, "setattribute vPPsP" :named("pirop"))
.annotate 'line', 308
    $P114."push"($P133)
.annotate 'line', 315
    find_lex $P114, "$fixups"
    unless_null $P114, vivify_848
    new $P114, "Undef"
  vivify_848:
    get_hll_global $P115, "GLOBAL"
    nqp_get_package_through_who $P116, $P115, "PAST"
    get_who $P117, $P116
    set $P118, $P117["Op"]
.annotate 'line', 317
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "PAST"
    get_who $P121, $P120
    set $P122, $P121["Val"]
    find_lex $P123, "$past"
    unless_null $P123, vivify_849
    new $P123, "Undef"
  vivify_849:
    $P124 = $P122."new"($P123 :named("value"))
.annotate 'line', 318
    find_lex $P125, "self"
    nqp_decontainerize $P126, $P125
    set $P127, $P1185
    unless_null $P127, vivify_850
    new $P127, "Undef"
  vivify_850:
    $P128 = $P126."get_ref"($P127)
    $P129 = $P118."new"($P124, $P128, "set_sub_code_object vPP" :named("pirop"))
.annotate 'line', 315
    $P114."push"($P129)
.annotate 'line', 322
    set $P114, $P1185
    unless_null $P114, vivify_851
    new $P114, "Undef"
  vivify_851:
    new $P115, "ResizablePMCArray"
    push $P115, $P114
    find_lex $P116, "$past"
    unless_null $P116, vivify_852
    new $P116, "Undef"
  vivify_852:
    $P117 = $P116."subid"()
    find_lex $P118, "self"
    nqp_decontainerize $P119, $P118
    nqp_get_sc_object $P120, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1188, $P119, $P120, "%!code_objects_to_fix_up", 9
    unless_null $P1188, vivify_853
    $P1188 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P119, $P120, "%!code_objects_to_fix_up", 9, $P1188
  vivify_853:
    set $P1188[$P117], $P115
.annotate 'line', 291
    set $P114, $P1185
    unless_null $P114, vivify_854
    new $P114, "Undef"
  vivify_854:
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "pkg_create_mo" :anon :subid("23_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1192
    .param pmc param_1193
    .param pmc param_1194 :optional :named("name")
    .param int has_param_1194 :opt_flag
    .param pmc param_1195 :optional :named("repr")
    .param int has_param_1195 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 340
    new $P1191, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1191, control_1190
    push_eh $P1191
    .lex "self", param_1192
    .lex "$how", param_1193
    if has_param_1194, optparam_855
    new $P104, "Undef"
    set param_1194, $P104
  optparam_855:
    .lex "$name", param_1194
    if has_param_1195, optparam_856
    new $P105, "Undef"
    set param_1195, $P105
  optparam_856:
    .lex "$repr", param_1195
.annotate 'line', 342
    $P1197 = root_new ['parrot';'Hash']
    set $P1196, $P1197
    .lex "%args", $P1196
.annotate 'line', 345
    new $P106, "Undef"
    set $P1198, $P106
    .lex "$mo", $P1198
.annotate 'line', 346
    new $P107, "Undef"
    set $P1199, $P107
    .lex "$slot", $P1199
.annotate 'line', 340
    set $P1200, $P1196
    unless_null $P1200, vivify_857
    $P1200 = root_new ['parrot';'Hash']
  vivify_857:
.annotate 'line', 343
    set $P108, param_1194
    unless_null $P108, vivify_858
    new $P108, "Undef"
  vivify_858:
    defined $I100, $P108
    unless $I100, if_1201_end
    set $P109, param_1194
    unless_null $P109, vivify_859
    new $P109, "Undef"
  vivify_859:
    set $P1202, $P1196
    unless_null $P1202, vivify_860
    $P1202 = root_new ['parrot';'Hash']
    set $P1196, $P1202
  vivify_860:
    set $P1202["name"], $P109
  if_1201_end:
.annotate 'line', 344
    set $P108, param_1195
    unless_null $P108, vivify_861
    new $P108, "Undef"
  vivify_861:
    defined $I100, $P108
    unless $I100, if_1203_end
    set $P109, param_1195
    unless_null $P109, vivify_862
    new $P109, "Undef"
  vivify_862:
    set $P1204, $P1196
    unless_null $P1204, vivify_863
    $P1204 = root_new ['parrot';'Hash']
    set $P1196, $P1204
  vivify_863:
    set $P1204["repr"], $P109
  if_1203_end:
.annotate 'line', 345
    set $P108, param_1193
    unless_null $P108, vivify_864
    new $P108, "Undef"
  vivify_864:
    set $P1205, $P1196
    unless_null $P1205, vivify_865
    $P1205 = root_new ['parrot';'Hash']
  vivify_865:
    $P109 = $P108."new_type"($P1205 :flat)
    set $P1198, $P109
.annotate 'line', 346
    set $P108, param_1192
    nqp_decontainerize $P109, $P108
    set $P110, $P1198
    unless_null $P110, vivify_866
    new $P110, "Undef"
  vivify_866:
    $P111 = $P109."add_object"($P110)
    set $P1199, $P111
.annotate 'line', 349
    new $P108, "Exception"
    set $P108['type'], .CONTROL_RETURN
    set $P109, $P1198
    unless_null $P109, vivify_867
    new $P109, "Undef"
  vivify_867:
    setattribute $P108, 'payload', $P109
    throw $P108
.annotate 'line', 340
    .return ()
  control_1190:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P108, exception, "payload"
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_add_attribute" :anon :subid("24_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1207
    .param pmc param_1208
    .param pmc param_1209
    .param pmc param_1210
    .param pmc param_1211
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 357
    .lex "self", param_1207
    .lex "$obj", param_1208
    .lex "$meta_attr", param_1209
    .lex "%lit_args", param_1210
    .lex "%obj_args", param_1211
.annotate 'line', 358
    new $P104, "Undef"
    set $P1212, $P104
    .lex "$attr", $P1212
    set $P105, param_1209
    unless_null $P105, vivify_868
    new $P105, "Undef"
  vivify_868:
    set $P1213, param_1210
    unless_null $P1213, vivify_869
    $P1213 = root_new ['parrot';'Hash']
  vivify_869:
    set $P1214, param_1211
    unless_null $P1214, vivify_870
    $P1214 = root_new ['parrot';'Hash']
  vivify_870:
    $P106 = $P105."new"($P1213 :flat, $P1214 :flat)
    set $P1212, $P106
.annotate 'line', 359
    set $P105, param_1208
    unless_null $P105, vivify_871
    new $P105, "Undef"
  vivify_871:
    get_how $P106, $P105
    set $P107, param_1208
    unless_null $P107, vivify_872
    new $P107, "Undef"
  vivify_872:
    set $P108, $P1212
    unless_null $P108, vivify_873
    new $P108, "Undef"
  vivify_873:
    $P109 = $P106."add_attribute"($P107, $P108)
.annotate 'line', 357
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_add_method" :anon :subid("25_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1216
    .param pmc param_1217
    .param pmc param_1218
    .param pmc param_1219
    .param pmc param_1220
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 363
    .lex "self", param_1216
    .lex "$obj", param_1217
    .lex "$meta_method_name", param_1218
    .lex "$name", param_1219
    .lex "$code", param_1220
.annotate 'line', 364
    set $P104, param_1217
    unless_null $P104, vivify_874
    new $P104, "Undef"
  vivify_874:
    get_how $P105, $P104
    set $P106, param_1217
    unless_null $P106, vivify_875
    new $P106, "Undef"
  vivify_875:
    set $P107, param_1219
    unless_null $P107, vivify_876
    new $P107, "Undef"
  vivify_876:
    set $P108, param_1220
    unless_null $P108, vivify_877
    new $P108, "Undef"
  vivify_877:
    set $P109, param_1218
    unless_null $P109, vivify_878
    new $P109, "Undef"
  vivify_878:
    set $S100, $P109
    $P110 = $P105.$S100($P106, $P107, $P108)
.annotate 'line', 363
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "set_routine_signature" :anon :subid("26_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1222
    .param pmc param_1223
    .param pmc param_1224
    .param pmc param_1225
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 368
    .lex "self", param_1222
    .lex "$code_obj", param_1223
    .lex "$types", param_1224
    .lex "$definednesses", param_1225
.annotate 'line', 369
    new $P104, "Undef"
    set $P1226, $P104
    .lex "$sig_type", $P1226
.annotate 'line', 370
    new $P105, "Undef"
    set $P1227, $P105
    .lex "$code_type", $P1227
.annotate 'line', 371
    new $P106, "Undef"
    set $P1228, $P106
    .lex "$sig_obj", $P1228
.annotate 'line', 369
    set $P107, param_1222
    nqp_decontainerize $P108, $P107
    new $P109, "ResizablePMCArray"
    push $P109, "NQPSignature"
    $P110 = $P108."find_sym"($P109)
    set $P1226, $P110
.annotate 'line', 370
    set $P107, param_1222
    nqp_decontainerize $P108, $P107
    new $P109, "ResizablePMCArray"
    push $P109, "NQPRoutine"
    $P110 = $P108."find_sym"($P109)
    set $P1227, $P110
.annotate 'line', 371
    set $P107, $P1226
    unless_null $P107, vivify_879
    new $P107, "Undef"
  vivify_879:
    repr_instance_of $P108, $P107
    set $P1228, $P108
.annotate 'line', 372
    set $P107, $P1228
    unless_null $P107, vivify_880
    new $P107, "Undef"
  vivify_880:
    set $P108, $P1226
    unless_null $P108, vivify_881
    new $P108, "Undef"
  vivify_881:
    set $P109, param_1224
    unless_null $P109, vivify_882
    new $P109, "Undef"
  vivify_882:
    setattribute $P107, $P108, "$!types", $P109
.annotate 'line', 373
    set $P107, $P1228
    unless_null $P107, vivify_883
    new $P107, "Undef"
  vivify_883:
    set $P108, $P1226
    unless_null $P108, vivify_884
    new $P108, "Undef"
  vivify_884:
    set $P109, param_1225
    unless_null $P109, vivify_885
    new $P109, "Undef"
  vivify_885:
    setattribute $P107, $P108, "$!definednesses", $P109
.annotate 'line', 374
    set $P107, param_1223
    unless_null $P107, vivify_886
    new $P107, "Undef"
  vivify_886:
    set $P108, $P1227
    unless_null $P108, vivify_887
    new $P108, "Undef"
  vivify_887:
    set $P109, $P1228
    unless_null $P109, vivify_888
    new $P109, "Undef"
  vivify_888:
    setattribute $P107, $P108, "$!signature", $P109
.annotate 'line', 368
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "set_routine_signature_on_parrot_sub" :anon :subid("27_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1230
    .param pmc param_1231
    .param pmc param_1232
    .param pmc param_1233
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 378
    .const 'Sub' $P1239 = "553_1334921493.34" 
    capture_lex $P1239
    .lex "self", param_1230
    .lex "$routine", param_1231
    .lex "$types", param_1232
    .lex "$definednesses", param_1233
.annotate 'line', 380
    new $P104, "Undef"
    set $P1234, $P104
    .lex "$sig_type", $P1234
.annotate 'line', 381
    new $P105, "Undef"
    set $P1235, $P105
    .lex "$sig_obj", $P1235
.annotate 'line', 384
    new $P106, "Undef"
    set $P1236, $P106
    .lex "$slot", $P1236
.annotate 'line', 380
    set $P107, param_1230
    nqp_decontainerize $P108, $P107
    new $P109, "ResizablePMCArray"
    push $P109, "NQPSignature"
    $P110 = $P108."find_sym"($P109)
    set $P1234, $P110
.annotate 'line', 381
    set $P107, $P1234
    unless_null $P107, vivify_889
    new $P107, "Undef"
  vivify_889:
    repr_instance_of $P108, $P107
    set $P1235, $P108
.annotate 'line', 382
    set $P107, $P1235
    unless_null $P107, vivify_890
    new $P107, "Undef"
  vivify_890:
    set $P108, $P1234
    unless_null $P108, vivify_891
    new $P108, "Undef"
  vivify_891:
    set $P109, param_1232
    unless_null $P109, vivify_892
    new $P109, "Undef"
  vivify_892:
    setattribute $P107, $P108, "$!types", $P109
.annotate 'line', 383
    set $P107, $P1235
    unless_null $P107, vivify_893
    new $P107, "Undef"
  vivify_893:
    set $P108, $P1234
    unless_null $P108, vivify_894
    new $P108, "Undef"
  vivify_894:
    set $P109, param_1233
    unless_null $P109, vivify_895
    new $P109, "Undef"
  vivify_895:
    setattribute $P107, $P108, "$!definednesses", $P109
.annotate 'line', 384
    set $P107, param_1230
    nqp_decontainerize $P108, $P107
    set $P109, $P1235
    unless_null $P109, vivify_896
    new $P109, "Undef"
  vivify_896:
    $P110 = $P108."add_object"($P109)
    set $P1236, $P110
.annotate 'line', 386
    set $P108, param_1230
    nqp_decontainerize $P109, $P108
    $P110 = $P109."is_precompilation_mode"()
    if $P110, if_1237
.annotate 'line', 393
    .const 'Sub' $P1239 = "553_1334921493.34" 
    capture_lex $P1239
    $P112 = $P1239()
    set $P107, $P112
.annotate 'line', 386
    goto if_1237_end
  if_1237:
.annotate 'line', 387
    set $P111, param_1230
    nqp_decontainerize $P112, $P111
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Op"]
.annotate 'line', 389
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P119, $P118
    set $P120, $P119["Val"]
    set $P121, param_1231
    unless_null $P121, vivify_906
    new $P121, "Undef"
  vivify_906:
    $P122 = $P120."new"($P121 :named("value"))
.annotate 'line', 390
    set $P123, param_1230
    nqp_decontainerize $P124, $P123
    set $P125, $P1235
    unless_null $P125, vivify_907
    new $P125, "Undef"
  vivify_907:
    $P126 = $P124."get_ref"($P125)
    $P127 = $P116."new"($P122, $P126, "set_sub_multisig vPP" :named("pirop"))
.annotate 'line', 387
    $P128 = $P112."add_fixup_task"($P127 :named("deserialize_past"))
.annotate 'line', 386
    set $P107, $P128
  if_1237_end:
.annotate 'line', 378
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1238"  :anon :subid("553_1334921493.34") :outer("27_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 396
    new $P111, "Undef"
    set $P1240, $P111
    .lex "$fixup", $P1240
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Op"]
    find_lex $P116, "self"
    nqp_decontainerize $P117, $P116
    find_lex $P118, "$sig_obj"
    unless_null $P118, vivify_897
    new $P118, "Undef"
  vivify_897:
    $P119 = $P117."get_ref"($P118)
    $P120 = $P115."new"($P119, "set_sub_multisig vPP" :named("pirop"))
    set $P1240, $P120
.annotate 'line', 397
    find_lex $P1242, "$routine"
    unless_null $P1242, vivify_898
    $P1242 = root_new ['parrot';'Hash']
  vivify_898:
    set $P112, $P1242["compile_time_dummy"]
    unless_null $P112, vivify_899
    new $P112, "Undef"
  vivify_899:
    defined $I100, $P112
    if $I100, if_1241
.annotate 'line', 401
    set $P113, $P1240
    unless_null $P113, vivify_900
    new $P113, "Undef"
  vivify_900:
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Val"]
    find_lex $P118, "$routine"
    unless_null $P118, vivify_901
    new $P118, "Undef"
  vivify_901:
    $P119 = $P117."new"($P118 :named("value"))
    $P113."unshift"($P119)
.annotate 'line', 400
    goto if_1241_end
  if_1241:
.annotate 'line', 398
    set $P113, $P1240
    unless_null $P113, vivify_902
    new $P113, "Undef"
  vivify_902:
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    find_lex $P1243, "$routine"
    unless_null $P1243, vivify_903
    $P1243 = root_new ['parrot';'Hash']
  vivify_903:
    set $P116, $P1243["compile_time_dummy"]
    unless_null $P116, vivify_904
    new $P116, "Undef"
  vivify_904:
    $P117 = $P115."get_slot_past_for_object"($P116)
    $P113."unshift"($P117)
  if_1241_end:
.annotate 'line', 403
    find_lex $P112, "self"
    nqp_decontainerize $P113, $P112
    set $P114, $P1240
    unless_null $P114, vivify_905
    new $P114, "Undef"
  vivify_905:
    $P115 = $P113."add_fixup_task"($P114 :named("fixup_past"))
.annotate 'line', 393
    .return ($P115)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_set_body_block" :anon :subid("28_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1245
    .param pmc param_1246
    .param pmc param_1247
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 408
    .lex "self", param_1245
    .lex "$obj", param_1246
    .lex "$body_past", param_1247
.annotate 'line', 410
    new $P104, "Undef"
    set $P1248, $P104
    .lex "$body_code_obj", $P1248
    set $P105, param_1245
    nqp_decontainerize $P106, $P105
    set $P107, param_1247
    unless_null $P107, vivify_908
    new $P107, "Undef"
  vivify_908:
    set $P108, param_1247
    unless_null $P108, vivify_909
    new $P108, "Undef"
  vivify_909:
    $P109 = $P108."name"()
    $P110 = $P106."create_code"($P107, $P109, 0)
    set $P1248, $P110
.annotate 'line', 413
    set $P105, param_1246
    unless_null $P105, vivify_910
    new $P105, "Undef"
  vivify_910:
    get_how $P106, $P105
    set $P107, param_1246
    unless_null $P107, vivify_911
    new $P107, "Undef"
  vivify_911:
    set $P108, $P1248
    unless_null $P108, vivify_912
    new $P108, "Undef"
  vivify_912:
    $P109 = $P106."set_body_block"($P107, $P108)
.annotate 'line', 408
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_add_parent_or_role" :anon :subid("29_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1250
    .param pmc param_1251
    .param pmc param_1252
    .param pmc param_1253
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 417
    .lex "self", param_1250
    .lex "$obj", param_1251
    .lex "$meta_method_name", param_1252
    .lex "$to_add", param_1253
.annotate 'line', 418
    set $P104, param_1251
    unless_null $P104, vivify_913
    new $P104, "Undef"
  vivify_913:
    get_how $P105, $P104
    set $P106, param_1251
    unless_null $P106, vivify_914
    new $P106, "Undef"
  vivify_914:
    set $P107, param_1253
    unless_null $P107, vivify_915
    new $P107, "Undef"
  vivify_915:
    set $P108, param_1252
    unless_null $P108, vivify_916
    new $P108, "Undef"
  vivify_916:
    set $S100, $P108
    $P109 = $P105.$S100($P106, $P107)
.annotate 'line', 417
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_add_parrot_vtable_handler_mapping" :anon :subid("30_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1255
    .param pmc param_1256
    .param pmc param_1257
    .param pmc param_1258
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 421
    .lex "self", param_1255
    .lex "$obj", param_1256
    .lex "$name", param_1257
    .lex "$att_name", param_1258
.annotate 'line', 422
    set $P104, param_1256
    unless_null $P104, vivify_917
    new $P104, "Undef"
  vivify_917:
    get_how $P105, $P104
    set $P106, param_1256
    unless_null $P106, vivify_918
    new $P106, "Undef"
  vivify_918:
    set $P107, param_1257
    unless_null $P107, vivify_919
    new $P107, "Undef"
  vivify_919:
    set $P108, param_1258
    unless_null $P108, vivify_920
    new $P108, "Undef"
  vivify_920:
    $P109 = $P105."add_parrot_vtable_handler_mapping"($P106, $P107, $P108)
.annotate 'line', 421
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_compose" :anon :subid("31_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1260
    .param pmc param_1261
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 426
    .lex "self", param_1260
    .lex "$obj", param_1261
.annotate 'line', 427
    set $P104, param_1261
    unless_null $P104, vivify_921
    new $P104, "Undef"
  vivify_921:
    get_how $P105, $P104
    set $P106, param_1261
    unless_null $P106, vivify_922
    new $P106, "Undef"
  vivify_922:
    $P107 = $P105."compose"($P106)
.annotate 'line', 426
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "run_begin_block" :anon :subid("32_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1265
    .param pmc param_1266
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 431
    .const 'Sub' $P1276 = "554_1334921493.34" 
    capture_lex $P1276
    new $P1264, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1264, control_1263
    push_eh $P1264
    .lex "self", param_1265
    .lex "$past", param_1266
.annotate 'line', 433
    new $P104, "Undef"
    set $P1267, $P104
    .lex "$wrapper", $P1267
.annotate 'line', 437
    $P1269 = root_new ['parrot';'Hash']
    set $P1268, $P1269
    .lex "%seen", $P1268
.annotate 'line', 438
    new $P105, "Undef"
    set $P1270, $P105
    .lex "$i", $P1270
.annotate 'line', 456
    new $P106, "Undef"
    set $P1271, $P106
    .lex "$code", $P1271
.annotate 'line', 457
    new $P107, "Undef"
    set $P1272, $P107
    .lex "$old_global", $P1272
.annotate 'line', 433
    get_hll_global $P108, "GLOBAL"
    nqp_get_package_through_who $P109, $P108, "PAST"
    get_who $P110, $P109
    set $P111, $P110["Block"]
.annotate 'line', 434
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Stmts"]
    $P116 = $P115."new"()
    set $P117, param_1266
    unless_null $P117, vivify_923
    new $P117, "Undef"
  vivify_923:
    $P118 = $P111."new"($P116, $P117)
.annotate 'line', 433
    set $P1267, $P118
.annotate 'line', 431
    set $P1273, $P1268
    unless_null $P1273, vivify_924
    $P1273 = root_new ['parrot';'Hash']
  vivify_924:
.annotate 'line', 438
    set $P108, param_1265
    nqp_decontainerize $P109, $P108
    nqp_get_sc_object $P110, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1274, $P109, $P110, "@!BLOCKS", 8
    unless_null $P1274, vivify_925
    $P1274 = root_new ['parrot';'ResizablePMCArray']
  vivify_925:
    set $N100, $P1274
    new $P111, 'Float'
    set $P111, $N100
    set $P1270, $P111
.annotate 'line', 439
    new $P110, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P110, loop1299_handler
    push_eh $P110
  loop1299_test:
    set $P108, $P1270
    unless_null $P108, vivify_926
    new $P108, "Undef"
  vivify_926:
    set $N100, $P108
    set $N101, 0
    isgt $I100, $N100, $N101
    unless $I100, loop1299_done
  loop1299_redo:
    .const 'Sub' $P1276 = "554_1334921493.34" 
    capture_lex $P1276
    $P1276()
  loop1299_next:
    goto loop1299_test
  loop1299_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P111, exception, 'type'
    eq $P111, .CONTROL_LOOP_NEXT, loop1299_next
    eq $P111, .CONTROL_LOOP_REDO, loop1299_redo
  loop1299_done:
    pop_eh 
.annotate 'line', 456
    set $P108, param_1265
    nqp_decontainerize $P109, $P108
    set $P110, $P1267
    unless_null $P110, vivify_944
    new $P110, "Undef"
  vivify_944:
    $P111 = $P109."create_code"($P110, "BEGIN block", 0)
    set $P1271, $P111
.annotate 'line', 457
    new $P108, "ResizablePMCArray"
    get_hll_global $P109, $P108, "GLOBAL"
    set $P1272, $P109
.annotate 'line', 458
    new $P108, "ResizablePMCArray"
    find_dynamic_lex $P111, "$*GLOBALish"
    unless_null $P111, vivify_945
    get_hll_global $P109, "GLOBAL"
    get_who $P110, $P109
    set $P111, $P110["$GLOBALish"]
    unless_null $P111, vivify_946
    die "Contextual $*GLOBALish not found"
  vivify_946:
  vivify_945:
    set_hll_global $P108, "GLOBAL", $P111
.annotate 'line', 459
    set $P108, $P1271
    unless_null $P108, vivify_947
    new $P108, "Undef"
  vivify_947:
    $P108()
.annotate 'line', 460
    new $P108, "ResizablePMCArray"
    set $P109, $P1272
    unless_null $P109, vivify_948
    new $P109, "Undef"
  vivify_948:
    set_hll_global $P108, "GLOBAL", $P109
.annotate 'line', 464
    set $P108, $P1267
    unless_null $P108, vivify_949
    new $P108, "Undef"
  vivify_949:
    $P108."shift"()
.annotate 'line', 465
    new $P108, "Exception"
    set $P108['type'], .CONTROL_RETURN
    set $P109, $P1267
    unless_null $P109, vivify_950
    new $P109, "Undef"
  vivify_950:
    setattribute $P108, 'payload', $P109
    throw $P108
.annotate 'line', 431
    .return ()
  control_1263:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P108, exception, "payload"
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1275"  :anon :subid("554_1334921493.34") :outer("32_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 439
    .const 'Sub' $P1282 = "555_1334921493.34" 
    capture_lex $P1282
.annotate 'line', 441
    $P1278 = root_new ['parrot';'Hash']
    set $P1277, $P1278
    .lex "%symbols", $P1277
.annotate 'line', 440
    find_lex $P109, "$i"
    unless_null $P109, vivify_927
    new $P109, "Undef"
  vivify_927:
    sub $P110, $P109, 1
    store_lex "$i", $P110
.annotate 'line', 441
    find_lex $P109, "$i"
    unless_null $P109, vivify_928
    new $P109, "Undef"
  vivify_928:
    set $I101, $P109
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    nqp_get_sc_object $P112, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1279, $P111, $P112, "@!BLOCKS", 8
    unless_null $P1279, vivify_929
    $P1279 = root_new ['parrot';'ResizablePMCArray']
  vivify_929:
    set $P113, $P1279[$I101]
    unless_null $P113, vivify_930
    new $P113, "Undef"
  vivify_930:
    $P114 = $P113."symtable"()
    set $P1277, $P114
.annotate 'line', 442
    set $P1280, $P1277
    unless_null $P1280, vivify_931
    $P1280 = root_new ['parrot';'Hash']
  vivify_931:
    defined $I101, $P1280
    unless $I101, for_undef_932
    iter $P109, $P1280
    new $P112, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P112, loop1298_handler
    push_eh $P112
  loop1298_test:
    unless $P109, loop1298_done
    shift $P110, $P109
  loop1298_redo:
    .const 'Sub' $P1282 = "555_1334921493.34" 
    capture_lex $P1282
    $P1282($P110)
  loop1298_next:
    goto loop1298_test
  loop1298_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P113, exception, 'type'
    eq $P113, .CONTROL_LOOP_NEXT, loop1298_next
    eq $P113, .CONTROL_LOOP_REDO, loop1298_redo
  loop1298_done:
    pop_eh 
  for_undef_932:
.annotate 'line', 439
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1281"  :anon :subid("555_1334921493.34") :outer("554_1334921493.34")
    .param pmc param_1283
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 442
    .const 'Sub' $P1288 = "556_1334921493.34" 
    capture_lex $P1288
    .lex "$_", param_1283
.annotate 'line', 443
    find_lex $P113, "$_"
    unless_null $P113, vivify_933
    new $P113, "Undef"
  vivify_933:
    $P114 = $P113."key"()
    find_lex $P1286, "%seen"
    unless_null $P1286, vivify_934
    $P1286 = root_new ['parrot';'Hash']
  vivify_934:
    set $P115, $P1286[$P114]
    unless_null $P115, vivify_935
    new $P115, "Undef"
  vivify_935:
    isfalse $I102, $P115
    if $I102, if_1285
    new $P112, 'Integer'
    set $P112, $I102
    goto if_1285_end
  if_1285:
    find_lex $P116, "$_"
    unless_null $P116, vivify_936
    new $P116, "Undef"
  vivify_936:
    $P117 = $P116."value"()
    exists $I103, $P117["value"]
    new $P112, 'Integer'
    set $P112, $I103
  if_1285_end:
    if $P112, if_1284
    set $P111, $P112
    goto if_1284_end
  if_1284:
.annotate 'line', 444
    .const 'Sub' $P1288 = "556_1334921493.34" 
    capture_lex $P1288
    $P1288()
.annotate 'line', 450
    new $P118, "Float"
    assign $P118, 1
    find_lex $P119, "$_"
    unless_null $P119, vivify_942
    new $P119, "Undef"
  vivify_942:
    $P120 = $P119."key"()
    find_lex $P1297, "%seen"
    unless_null $P1297, vivify_943
    $P1297 = root_new ['parrot';'Hash']
    store_lex "%seen", $P1297
  vivify_943:
    set $P1297[$P120], $P118
.annotate 'line', 443
    set $P111, $P118
  if_1284_end:
.annotate 'line', 442
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1287"  :anon :subid("556_1334921493.34") :outer("555_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 444
    new $P1292, 'ExceptionHandler'
    set_label $P1292, control_1291
    $P1292."handle_types_except"(.CONTROL_ALL)
    push_eh $P1292
.annotate 'line', 445
    new $P118, "Float"
    assign $P118, 0
    set $I104, $P118
    find_lex $P1289, "$wrapper"
    unless_null $P1289, vivify_937
    $P1289 = root_new ['parrot';'ResizablePMCArray']
  vivify_937:
    set $P119, $P1289[$I104]
    unless_null $P119, vivify_938
    new $P119, "Undef"
  vivify_938:
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Var"]
.annotate 'line', 446
    find_lex $P124, "$_"
    unless_null $P124, vivify_939
    new $P124, "Undef"
  vivify_939:
    $P125 = $P124."key"()
.annotate 'line', 447
    find_lex $P126, "self"
    nqp_decontainerize $P127, $P126
    find_lex $P128, "$_"
    unless_null $P128, vivify_940
    new $P128, "Undef"
  vivify_940:
    $P129 = $P128."value"()
    set $P130, $P129["value"]
    unless_null $P130, vivify_941
    new $P130, "Undef"
  vivify_941:
    $P131 = $P127."get_ref"($P130)
.annotate 'line', 445
    $P132 = $P123."new"($P125 :named("name"), "lexical_6model" :named("scope"), 1 :named("isdecl"), $P131 :named("viviself"))
    $P133 = $P119."push"($P132)
.annotate 'line', 444
    pop_eh 
    goto skip_handler_1290
  control_1291:
    peek_exception $P1293
    .local pmc exception 
    .get_results (exception) 
    new $P1295, 'Integer'
    set $P1295, 1
    set exception["handled"], $P1295
    set $I1296, exception["handled"]
    eq $I1296, 1, handled_1294
    rethrow exception
  handled_1294:
    finalize $P1293
    .return (exception)
  skip_handler_1290:
    .return ($P133)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "set_nqp_language_defaults" :anon :subid("33_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1301
    .param pmc param_1302
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 469
    .const 'Sub' $P1309 = "557_1334921493.34" 
    capture_lex $P1309
    .lex "self", param_1301
    .lex "$block", param_1302
.annotate 'line', 471
    $P1304 = root_new ['parrot';'ResizablePMCArray']
    set $P1303, $P1304
    .lex "@loadlibs", $P1303
    new $P104, "ResizablePMCArray"
    push $P104, "nqp_group"
    push $P104, "nqp_ops"
    push $P104, "nqp_bigint_ops"
    push $P104, "trans_ops"
    push $P104, "io_ops"
    set $P1303, $P104
.annotate 'line', 472
    find_dynamic_lex $P106, "%*COMPILING"
    unless_null $P106, vivify_951
    get_hll_global $P104, "GLOBAL"
    get_who $P105, $P104
    set $P106, $P105["%COMPILING"]
    unless_null $P106, vivify_952
    die "Contextual %*COMPILING not found"
  vivify_952:
  vivify_951:
    set $P1306, $P106["%?OPTIONS"]
    unless_null $P1306, vivify_953
    $P1306 = root_new ['parrot';'Hash']
  vivify_953:
    set $P107, $P1306["vmlibs"]
    unless_null $P107, vivify_954
    new $P107, "Undef"
  vivify_954:
    unless $P107, if_1305_end
.annotate 'line', 473
    find_dynamic_lex $P111, "%*COMPILING"
    unless_null $P111, vivify_955
    get_hll_global $P109, "GLOBAL"
    get_who $P110, $P109
    set $P111, $P110["%COMPILING"]
    unless_null $P111, vivify_956
    die "Contextual %*COMPILING not found"
  vivify_956:
  vivify_955:
    set $P1307, $P111["%?OPTIONS"]
    unless_null $P1307, vivify_957
    $P1307 = root_new ['parrot';'Hash']
  vivify_957:
    set $P112, $P1307["vmlibs"]
    unless_null $P112, vivify_958
    new $P112, "Undef"
  vivify_958:
    set $S100, $P112
    split $P113, ",", $S100
    defined $I100, $P113
    unless $I100, for_undef_959
    iter $P108, $P113
    new $P115, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P115, loop1312_handler
    push_eh $P115
  loop1312_test:
    unless $P108, loop1312_done
    shift $P114, $P108
  loop1312_redo:
    .const 'Sub' $P1309 = "557_1334921493.34" 
    capture_lex $P1309
    $P1309($P114)
  loop1312_next:
    goto loop1312_test
  loop1312_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P117, exception, 'type'
    eq $P117, .CONTROL_LOOP_NEXT, loop1312_next
    eq $P117, .CONTROL_LOOP_REDO, loop1312_redo
  loop1312_done:
    pop_eh 
  for_undef_959:
  if_1305_end:
.annotate 'line', 477
    set $P104, param_1302
    unless_null $P104, vivify_962
    new $P104, "Undef"
  vivify_962:
    set $P1313, $P1303
    unless_null $P1313, vivify_963
    $P1313 = root_new ['parrot';'ResizablePMCArray']
  vivify_963:
    $P104."loadlibs"($P1313 :flat)
.annotate 'line', 480
    set $P104, param_1302
    unless_null $P104, vivify_964
    new $P104, "Undef"
  vivify_964:
    $P105 = $P104."hll"("nqp")
.annotate 'line', 469
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1308"  :anon :subid("557_1334921493.34") :outer("33_1334921493.34")
    .param pmc param_1310
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 473
    .lex "$_", param_1310
.annotate 'line', 474
    find_lex $P1311, "@loadlibs"
    unless_null $P1311, vivify_960
    $P1311 = root_new ['parrot';'ResizablePMCArray']
  vivify_960:
    find_lex $P115, "$_"
    unless_null $P115, vivify_961
    new $P115, "Undef"
  vivify_961:
    $P116 = $P1311."push"($P115)
.annotate 'line', 473
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "to_past" :anon :subid("34_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1317
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 485
    .const 'Sub' $P1332 = "561_1334921493.34" 
    capture_lex $P1332
    .const 'Sub' $P1320 = "558_1334921493.34" 
    capture_lex $P1320
    new $P1316, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1316, control_1315
    push_eh $P1316
    .lex "self", param_1317
.annotate 'line', 486
    set $P105, param_1317
    nqp_decontainerize $P106, $P105
    $P107 = $P106."is_precompilation_mode"()
    if $P107, if_1318
.annotate 'line', 519
    .const 'Sub' $P1332 = "561_1334921493.34" 
    capture_lex $P1332
    $P112 = $P1332()
    set $P104, $P112
.annotate 'line', 486
    goto if_1318_end
  if_1318:
    .const 'Sub' $P1320 = "558_1334921493.34" 
    capture_lex $P1320
    $P110 = $P1320()
    set $P104, $P110
  if_1318_end:
.annotate 'line', 485
    .return ($P104)
  control_1315:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P105, exception, "payload"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1331"  :anon :subid("561_1334921493.34") :outer("34_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 519
    .const 'Sub' $P1339 = "563_1334921493.34" 
    capture_lex $P1339
    .const 'Sub' $P1335 = "562_1334921493.34" 
    capture_lex $P1335
.annotate 'line', 520
    new $P111, "Undef"
    set $P1333, $P111
    .lex "$tasks", $P1333
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Stmts"]
    $P116 = $P115."new"()
    set $P1333, $P116
.annotate 'line', 521
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    $P115 = $P114."load_dependency_tasks"()
    defined $I100, $P115
    unless $I100, for_undef_965
    iter $P112, $P115
    new $P117, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P117, loop1337_handler
    push_eh $P117
  loop1337_test:
    unless $P112, loop1337_done
    shift $P116, $P112
  loop1337_redo:
    .const 'Sub' $P1335 = "562_1334921493.34" 
    capture_lex $P1335
    $P1335($P116)
  loop1337_next:
    goto loop1337_test
  loop1337_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P118, exception, 'type'
    eq $P118, .CONTROL_LOOP_NEXT, loop1337_next
    eq $P118, .CONTROL_LOOP_REDO, loop1337_redo
  loop1337_done:
    pop_eh 
  for_undef_965:
.annotate 'line', 524
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    $P115 = $P114."fixup_tasks"()
    defined $I100, $P115
    unless $I100, for_undef_968
    iter $P112, $P115
    new $P117, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P117, loop1341_handler
    push_eh $P117
  loop1341_test:
    unless $P112, loop1341_done
    shift $P116, $P112
  loop1341_redo:
    .const 'Sub' $P1339 = "563_1334921493.34" 
    capture_lex $P1339
    $P1339($P116)
  loop1341_next:
    goto loop1341_test
  loop1341_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P118, exception, 'type'
    eq $P118, .CONTROL_LOOP_NEXT, loop1341_next
    eq $P118, .CONTROL_LOOP_REDO, loop1341_redo
  loop1341_done:
    pop_eh 
  for_undef_968:
.annotate 'line', 527
    new $P112, "Exception"
    set $P112['type'], .CONTROL_RETURN
    set $P113, $P1333
    unless_null $P113, vivify_971
    new $P113, "Undef"
  vivify_971:
    setattribute $P112, 'payload', $P113
    throw $P112
.annotate 'line', 519
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1334"  :anon :subid("562_1334921493.34") :outer("561_1334921493.34")
    .param pmc param_1336
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 521
    .lex "$_", param_1336
.annotate 'line', 522
    find_lex $P117, "$tasks"
    unless_null $P117, vivify_966
    new $P117, "Undef"
  vivify_966:
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P120, $P119
    set $P121, $P120["Stmt"]
    find_lex $P122, "$_"
    unless_null $P122, vivify_967
    new $P122, "Undef"
  vivify_967:
    $P123 = $P121."new"($P122)
    $P124 = $P117."push"($P123)
.annotate 'line', 521
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1338"  :anon :subid("563_1334921493.34") :outer("561_1334921493.34")
    .param pmc param_1340
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 524
    .lex "$_", param_1340
.annotate 'line', 525
    find_lex $P117, "$tasks"
    unless_null $P117, vivify_969
    new $P117, "Undef"
  vivify_969:
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P120, $P119
    set $P121, $P120["Stmt"]
    find_lex $P122, "$_"
    unless_null $P122, vivify_970
    new $P122, "Undef"
  vivify_970:
    $P123 = $P121."new"($P122)
    $P124 = $P117."push"($P123)
.annotate 'line', 524
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1319"  :anon :subid("558_1334921493.34") :outer("34_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 486
    .const 'Sub' $P1328 = "560_1334921493.34" 
    capture_lex $P1328
    .const 'Sub' $P1324 = "559_1334921493.34" 
    capture_lex $P1324
.annotate 'line', 487
    new $P108, "Undef"
    set $P1321, $P108
    .lex "$load_tasks", $P1321
.annotate 'line', 491
    new $P109, "Undef"
    set $P1322, $P109
    .lex "$fixup_tasks", $P1322
.annotate 'line', 487
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Stmts"]
    $P114 = $P113."new"()
    set $P1321, $P114
.annotate 'line', 488
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    $P113 = $P112."load_dependency_tasks"()
    defined $I100, $P113
    unless $I100, for_undef_972
    iter $P110, $P113
    new $P115, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P115, loop1326_handler
    push_eh $P115
  loop1326_test:
    unless $P110, loop1326_done
    shift $P114, $P110
  loop1326_redo:
    .const 'Sub' $P1324 = "559_1334921493.34" 
    capture_lex $P1324
    $P1324($P114)
  loop1326_next:
    goto loop1326_test
  loop1326_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P116, exception, 'type'
    eq $P116, .CONTROL_LOOP_NEXT, loop1326_next
    eq $P116, .CONTROL_LOOP_REDO, loop1326_redo
  loop1326_done:
    pop_eh 
  for_undef_972:
.annotate 'line', 491
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Stmts"]
    $P114 = $P113."new"()
    set $P1322, $P114
.annotate 'line', 492
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    $P113 = $P112."fixup_tasks"()
    defined $I100, $P113
    unless $I100, for_undef_975
    iter $P110, $P113
    new $P115, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P115, loop1330_handler
    push_eh $P115
  loop1330_test:
    unless $P110, loop1330_done
    shift $P114, $P110
  loop1330_redo:
    .const 'Sub' $P1328 = "560_1334921493.34" 
    capture_lex $P1328
    $P1328($P114)
  loop1330_next:
    goto loop1330_test
  loop1330_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P116, exception, 'type'
    eq $P116, .CONTROL_LOOP_NEXT, loop1330_next
    eq $P116, .CONTROL_LOOP_REDO, loop1330_redo
  loop1330_done:
    pop_eh 
  for_undef_975:
.annotate 'line', 495
    new $P110, "Exception"
    set $P110['type'], .CONTROL_RETURN
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "PAST"
    get_who $P113, $P112
    set $P114, $P113["Stmts"]
.annotate 'line', 496
    get_hll_global $P115, "GLOBAL"
    nqp_get_package_through_who $P116, $P115, "PAST"
    get_who $P117, $P116
    set $P118, $P117["Op"]
    $P119 = $P118."new"("nqp_dynop_setup v" :named("pirop"))
.annotate 'line', 497
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Op"]
    $P124 = $P123."new"("nqp_bigint_setup v" :named("pirop"))
.annotate 'line', 498
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Op"]
.annotate 'line', 500
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P130, $P129, "PAST"
    get_who $P131, $P130
    set $P132, $P131["Op"]
    $P133 = $P132."new"("getinterp P" :named("pirop"))
.annotate 'line', 501
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Op"]
    $P138 = $P137."new"("LexPad", "get_class Ps" :named("pirop"))
.annotate 'line', 502
    get_hll_global $P139, "GLOBAL"
    nqp_get_package_through_who $P140, $P139, "PAST"
    get_who $P141, $P140
    set $P142, $P141["Op"]
    $P143 = $P142."new"("NQPLexPad", "get_class Ps" :named("pirop"))
    $P144 = $P128."new"($P133, $P138, $P143, "callmethod" :named("pasttype"), "hll_map" :named("name"))
.annotate 'line', 504
    get_hll_global $P145, "GLOBAL"
    nqp_get_package_through_who $P146, $P145, "PAST"
    get_who $P147, $P146
    set $P148, $P147["Op"]
.annotate 'line', 506
    get_hll_global $P149, "GLOBAL"
    nqp_get_package_through_who $P150, $P149, "PAST"
    get_who $P151, $P150
    set $P152, $P151["Var"]
    $P153 = $P152."new"("cur_sc" :named("name"), "register" :named("scope"), 1 :named("isdecl"))
.annotate 'line', 507
    get_hll_global $P154, "GLOBAL"
    nqp_get_package_through_who $P155, $P154, "PAST"
    get_who $P156, $P155
    set $P157, $P156["Op"]
    find_lex $P158, "self"
    nqp_decontainerize $P159, $P158
    $P160 = $P159."handle"()
    $P161 = $P157."new"($P160, "nqp_create_sc Ps" :named("pirop"))
    $P162 = $P148."new"($P153, $P161, "bind_6model" :named("pasttype"))
.annotate 'line', 509
    get_hll_global $P163, "GLOBAL"
    nqp_get_package_through_who $P164, $P163, "PAST"
    get_who $P165, $P164
    set $P166, $P165["Op"]
.annotate 'line', 511
    get_hll_global $P167, "GLOBAL"
    nqp_get_package_through_who $P168, $P167, "PAST"
    get_who $P169, $P168
    set $P170, $P169["Var"]
    $P171 = $P170."new"("cur_sc" :named("name"), "register" :named("scope"))
.annotate 'line', 512
    find_lex $P172, "self"
    nqp_decontainerize $P173, $P172
    $P174 = $P173."sc"()
    $P175 = $P174."description"()
    $P176 = $P166."new"($P171, $P175, "callmethod" :named("pasttype"), "set_description" :named("name"))
.annotate 'line', 509
    set $P177, $P1321
    unless_null $P177, vivify_978
    new $P177, "Undef"
  vivify_978:
.annotate 'line', 515
    find_lex $P178, "self"
    nqp_decontainerize $P179, $P178
    $P180 = $P179."serialize_and_produce_deserialization_past"("cur_sc")
    set $P181, $P1322
    unless_null $P181, vivify_979
    new $P181, "Undef"
  vivify_979:
    $P182 = $P114."new"($P119, $P124, $P144, $P162, $P176, $P177, $P180, $P181)
.annotate 'line', 495
    setattribute $P110, 'payload', $P182
    throw $P110
.annotate 'line', 486
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1323"  :anon :subid("559_1334921493.34") :outer("558_1334921493.34")
    .param pmc param_1325
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 488
    .lex "$_", param_1325
.annotate 'line', 489
    find_lex $P115, "$load_tasks"
    unless_null $P115, vivify_973
    new $P115, "Undef"
  vivify_973:
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Stmt"]
    find_lex $P120, "$_"
    unless_null $P120, vivify_974
    new $P120, "Undef"
  vivify_974:
    $P121 = $P119."new"($P120)
    $P122 = $P115."push"($P121)
.annotate 'line', 488
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1327"  :anon :subid("560_1334921493.34") :outer("558_1334921493.34")
    .param pmc param_1329
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 492
    .lex "$_", param_1329
.annotate 'line', 493
    find_lex $P115, "$fixup_tasks"
    unless_null $P115, vivify_976
    new $P115, "Undef"
  vivify_976:
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Stmt"]
    find_lex $P120, "$_"
    unless_null $P120, vivify_977
    new $P120, "Undef"
  vivify_977:
    $P121 = $P119."new"($P120)
    $P122 = $P115."push"($P121)
.annotate 'line', 492
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "is_lexical" :anon :subid("35_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1343
    .param pmc param_1344
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 533
    .lex "self", param_1343
    .lex "$name", param_1344
.annotate 'line', 534
    set $P104, param_1343
    nqp_decontainerize $P105, $P104
    set $P106, param_1344
    unless_null $P106, vivify_980
    new $P106, "Undef"
  vivify_980:
    $P107 = $P105."is_scope"($P106, "lexical")
.annotate 'line', 533
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "is_package" :anon :subid("36_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1346
    .param pmc param_1347
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 539
    .lex "self", param_1346
    .lex "$name", param_1347
.annotate 'line', 540
    set $P104, param_1346
    nqp_decontainerize $P105, $P104
    set $P106, param_1347
    unless_null $P106, vivify_981
    new $P106, "Undef"
  vivify_981:
    $P107 = $P105."is_scope"($P106, "package")
.annotate 'line', 539
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "is_scope" :anon :subid("37_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1351
    .param pmc param_1352
    .param pmc param_1353
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 545
    .const 'Sub' $P1357 = "564_1334921493.34" 
    capture_lex $P1357
    new $P1350, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1350, control_1349
    push_eh $P1350
    .lex "self", param_1351
    .lex "$name", param_1352
    .lex "$wanted_scope", param_1353
.annotate 'line', 546
    new $P104, "Undef"
    set $P1354, $P104
    .lex "$i", $P1354
    set $P105, param_1351
    nqp_decontainerize $P106, $P105
    nqp_get_sc_object $P107, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1355, $P106, $P107, "@!BLOCKS", 8
    unless_null $P1355, vivify_982
    $P1355 = root_new ['parrot';'ResizablePMCArray']
  vivify_982:
    set $N100, $P1355
    new $P108, 'Float'
    set $P108, $N100
    set $P1354, $P108
.annotate 'line', 547
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop1364_handler
    push_eh $P107
  loop1364_test:
    set $P105, $P1354
    unless_null $P105, vivify_983
    new $P105, "Undef"
  vivify_983:
    set $N100, $P105
    set $N101, 0
    isgt $I100, $N100, $N101
    unless $I100, loop1364_done
  loop1364_redo:
    .const 'Sub' $P1357 = "564_1334921493.34" 
    capture_lex $P1357
    $P1357()
  loop1364_next:
    goto loop1364_test
  loop1364_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop1364_next
    eq $P108, .CONTROL_LOOP_REDO, loop1364_redo
  loop1364_done:
    pop_eh 
.annotate 'line', 545
    .return (0)
  control_1349:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P105, exception, "payload"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1356"  :anon :subid("564_1334921493.34") :outer("37_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 549
    $P1359 = root_new ['parrot';'Hash']
    set $P1358, $P1359
    .lex "%sym", $P1358
.annotate 'line', 548
    find_lex $P106, "$i"
    unless_null $P106, vivify_984
    new $P106, "Undef"
  vivify_984:
    sub $P107, $P106, 1
    store_lex "$i", $P107
.annotate 'line', 549
    find_lex $P106, "$i"
    unless_null $P106, vivify_985
    new $P106, "Undef"
  vivify_985:
    set $I101, $P106
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1360, $P108, $P109, "@!BLOCKS", 8
    unless_null $P1360, vivify_986
    $P1360 = root_new ['parrot';'ResizablePMCArray']
  vivify_986:
    set $P110, $P1360[$I101]
    unless_null $P110, vivify_987
    new $P110, "Undef"
  vivify_987:
    find_lex $P111, "$name"
    unless_null $P111, vivify_988
    new $P111, "Undef"
  vivify_988:
    $P112 = $P110."symbol"($P111)
    set $P1358, $P112
.annotate 'line', 550
    set $P1362, $P1358
    unless_null $P1362, vivify_989
    $P1362 = root_new ['parrot';'Hash']
  vivify_989:
    set $N102, $P1362
    if $N102, if_1361
    new $P106, 'Float'
    set $P106, $N102
    goto if_1361_end
  if_1361:
.annotate 'line', 551
    new $P107, "Exception"
    set $P107['type'], .CONTROL_RETURN
    set $P1363, $P1358
    unless_null $P1363, vivify_990
    $P1363 = root_new ['parrot';'Hash']
  vivify_990:
    set $P108, $P1363["scope"]
    unless_null $P108, vivify_991
    new $P108, "Undef"
  vivify_991:
    set $S100, $P108
    find_lex $P109, "$wanted_scope"
    unless_null $P109, vivify_992
    new $P109, "Undef"
  vivify_992:
    set $S101, $P109
    iseq $I101, $S100, $S101
    new $P110, 'Integer'
    set $P110, $I101
    setattribute $P107, 'payload', $P110
    throw $P107
  if_1361_end:
.annotate 'line', 547
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "known_sym" :anon :subid("38_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1366
    .param pmc param_1367
    .param pmc param_1368
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 558
    .const 'Sub' $P1371 = "565_1334921493.34" 
    capture_lex $P1371
    .lex "self", param_1366
    .lex "$/", param_1367
    .lex "@name", param_1368
.annotate 'line', 559
    new $P104, "Undef"
    set $P1369, $P104
    .lex "$known", $P1369
    new $P105, "Float"
    assign $P105, 0
    set $P1369, $P105
.annotate 'line', 560
    .const 'Sub' $P1371 = "565_1334921493.34" 
    capture_lex $P1371
    $P1371()
.annotate 'line', 558
    set $P105, $P1369
    unless_null $P105, vivify_994
    new $P105, "Undef"
  vivify_994:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1370"  :anon :subid("565_1334921493.34") :outer("38_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 560
    new $P1375, 'ExceptionHandler'
    set_label $P1375, control_1374
    $P1375."handle_types_except"(.CONTROL_ALL)
    push_eh $P1375
.annotate 'line', 561
    find_lex $P105, "self"
    nqp_decontainerize $P106, $P105
    find_lex $P1372, "@name"
    unless_null $P1372, vivify_993
    $P1372 = root_new ['parrot';'ResizablePMCArray']
  vivify_993:
    $P106."find_sym"($P1372)
.annotate 'line', 562
    new $P105, "Float"
    assign $P105, 1
    store_lex "$known", $P105
.annotate 'line', 560
    pop_eh 
    goto skip_handler_1373
  control_1374:
    peek_exception $P1376
    .local pmc exception 
    .get_results (exception) 
    new $P1378, 'Integer'
    set $P1378, 1
    set exception["handled"], $P1378
    set $I1379, exception["handled"]
    eq $I1379, 1, handled_1377
    rethrow exception
  handled_1377:
    finalize $P1376
    .return (exception)
  skip_handler_1373:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "find_sym" :anon :subid("39_1334921493.34") :outer("545_1334921493.34")
    .param pmc param_1383
    .param pmc param_1384
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 570
    .const 'Sub' $P1429 = "570_1334921493.34" 
    capture_lex $P1429
    .const 'Sub' $P1410 = "568_1334921493.34" 
    capture_lex $P1410
    .const 'Sub' $P1391 = "566_1334921493.34" 
    capture_lex $P1391
    new $P1382, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1382, control_1381
    push_eh $P1382
    .lex "self", param_1383
    .lex "@name", param_1384
.annotate 'line', 596
    new $P104, "Undef"
    set $P1385, $P104
    .lex "$result", $P1385
.annotate 'line', 572
    set $P1387, param_1384
    unless_null $P1387, vivify_995
    $P1387 = root_new ['parrot';'ResizablePMCArray']
  vivify_995:
    set $N100, $P1387
    if $N100, unless_1386_end
    die "Cannot look up empty name"
  unless_1386_end:
.annotate 'line', 576
    set $P1389, param_1384
    unless_null $P1389, vivify_996
    $P1389 = root_new ['parrot';'ResizablePMCArray']
  vivify_996:
    set $N100, $P1389
    set $N101, 1
    iseq $I100, $N100, $N101
    unless $I100, if_1388_end
    .const 'Sub' $P1391 = "566_1334921493.34" 
    capture_lex $P1391
    $P1391()
  if_1388_end:
.annotate 'line', 596
    find_dynamic_lex $P107, "$*GLOBALish"
    unless_null $P107, vivify_1011
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$GLOBALish"]
    unless_null $P107, vivify_1012
    die "Contextual $*GLOBALish not found"
  vivify_1012:
  vivify_1011:
    set $P1385, $P107
.annotate 'line', 597
    set $P1408, param_1384
    unless_null $P1408, vivify_1013
    $P1408 = root_new ['parrot';'ResizablePMCArray']
  vivify_1013:
    set $N100, $P1408
    set $N101, 2
    isge $I100, $N100, $N101
    unless $I100, if_1407_end
    .const 'Sub' $P1410 = "568_1334921493.34" 
    capture_lex $P1410
    $P1410()
  if_1407_end:
.annotate 'line', 617
    set $P1427, param_1384
    unless_null $P1427, vivify_1029
    $P1427 = root_new ['parrot';'ResizablePMCArray']
  vivify_1029:
    defined $I100, $P1427
    unless $I100, for_undef_1030
    iter $P105, $P1427
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop1433_handler
    push_eh $P108
  loop1433_test:
    unless $P105, loop1433_done
    shift $P106, $P105
  loop1433_redo:
    .const 'Sub' $P1429 = "570_1334921493.34" 
    capture_lex $P1429
    $P1429($P106)
  loop1433_next:
    goto loop1433_test
  loop1433_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop1433_next
    eq $P109, .CONTROL_LOOP_REDO, loop1433_redo
  loop1433_done:
    pop_eh 
  for_undef_1030:
.annotate 'line', 570
    set $P105, $P1385
    unless_null $P105, vivify_1037
    new $P105, "Undef"
  vivify_1037:
    .return ($P105)
  control_1381:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P106, exception, "payload"
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1390"  :anon :subid("566_1334921493.34") :outer("39_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 576
    .const 'Sub' $P1397 = "567_1334921493.34" 
    capture_lex $P1397
.annotate 'line', 577
    new $P105, "Undef"
    set $P1392, $P105
    .lex "$final_name", $P1392
.annotate 'line', 578
    new $P106, "Undef"
    set $P1393, $P106
    .lex "$i", $P1393
.annotate 'line', 577
    new $P107, "Float"
    assign $P107, 0
    set $I101, $P107
    find_lex $P1394, "@name"
    unless_null $P1394, vivify_997
    $P1394 = root_new ['parrot';'ResizablePMCArray']
  vivify_997:
    set $P108, $P1394[$I101]
    unless_null $P108, vivify_998
    new $P108, "Undef"
  vivify_998:
    set $P1392, $P108
.annotate 'line', 578
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1395, $P108, $P109, "@!BLOCKS", 8
    unless_null $P1395, vivify_999
    $P1395 = root_new ['parrot';'ResizablePMCArray']
  vivify_999:
    set $N102, $P1395
    new $P110, 'Float'
    set $P110, $N102
    set $P1393, $P110
.annotate 'line', 579
    new $P109, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P109, loop1406_handler
    push_eh $P109
  loop1406_test:
    set $P107, $P1393
    unless_null $P107, vivify_1000
    new $P107, "Undef"
  vivify_1000:
    set $N102, $P107
    set $N103, 0
    isgt $I101, $N102, $N103
    unless $I101, loop1406_done
  loop1406_redo:
    .const 'Sub' $P1397 = "567_1334921493.34" 
    capture_lex $P1397
    $P1397()
  loop1406_next:
    goto loop1406_test
  loop1406_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P110, exception, 'type'
    eq $P110, .CONTROL_LOOP_NEXT, loop1406_next
    eq $P110, .CONTROL_LOOP_REDO, loop1406_redo
  loop1406_done:
    pop_eh 
.annotate 'line', 576
    .return ($I101)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1396"  :anon :subid("567_1334921493.34") :outer("566_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 581
    $P1399 = root_new ['parrot';'Hash']
    set $P1398, $P1399
    .lex "%sym", $P1398
.annotate 'line', 580
    find_lex $P108, "$i"
    unless_null $P108, vivify_1001
    new $P108, "Undef"
  vivify_1001:
    sub $P109, $P108, 1
    store_lex "$i", $P109
.annotate 'line', 581
    find_lex $P108, "$i"
    unless_null $P108, vivify_1002
    new $P108, "Undef"
  vivify_1002:
    set $I102, $P108
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    nqp_get_sc_object $P111, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1400, $P110, $P111, "@!BLOCKS", 8
    unless_null $P1400, vivify_1003
    $P1400 = root_new ['parrot';'ResizablePMCArray']
  vivify_1003:
    set $P112, $P1400[$I102]
    unless_null $P112, vivify_1004
    new $P112, "Undef"
  vivify_1004:
    find_lex $P113, "$final_name"
    unless_null $P113, vivify_1005
    new $P113, "Undef"
  vivify_1005:
    $P114 = $P112."symbol"($P113)
    set $P1398, $P114
.annotate 'line', 582
    set $P1402, $P1398
    unless_null $P1402, vivify_1006
    $P1402 = root_new ['parrot';'Hash']
  vivify_1006:
    set $N104, $P1402
    if $N104, if_1401
    new $P108, 'Float'
    set $P108, $N104
    goto if_1401_end
  if_1401:
.annotate 'line', 583
    set $P1404, $P1398
    unless_null $P1404, vivify_1007
    $P1404 = root_new ['parrot';'Hash']
  vivify_1007:
    exists $I102, $P1404["value"]
    if $I102, if_1403
.annotate 'line', 587
    new $P110, 'String'
    set $P110, "No compile-time value for "
    find_lex $P111, "$final_name"
    unless_null $P111, vivify_1008
    new $P111, "Undef"
  vivify_1008:
    concat $P112, $P110, $P111
    die $P112
.annotate 'line', 586
    goto if_1403_end
  if_1403:
.annotate 'line', 584
    new $P110, "Exception"
    set $P110['type'], .CONTROL_RETURN
    set $P1405, $P1398
    unless_null $P1405, vivify_1009
    $P1405 = root_new ['parrot';'Hash']
  vivify_1009:
    set $P111, $P1405["value"]
    unless_null $P111, vivify_1010
    new $P111, "Undef"
  vivify_1010:
    setattribute $P110, 'payload', $P111
    throw $P110
  if_1403_end:
.annotate 'line', 582
    set $P108, $P109
  if_1401_end:
.annotate 'line', 579
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1409"  :anon :subid("568_1334921493.34") :outer("39_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 597
    .const 'Sub' $P1416 = "569_1334921493.34" 
    capture_lex $P1416
.annotate 'line', 598
    new $P105, "Undef"
    set $P1411, $P105
    .lex "$first", $P1411
.annotate 'line', 599
    new $P106, "Undef"
    set $P1412, $P106
    .lex "$i", $P1412
.annotate 'line', 598
    new $P107, "Float"
    assign $P107, 0
    set $I101, $P107
    find_lex $P1413, "@name"
    unless_null $P1413, vivify_1014
    $P1413 = root_new ['parrot';'ResizablePMCArray']
  vivify_1014:
    set $P108, $P1413[$I101]
    unless_null $P108, vivify_1015
    new $P108, "Undef"
  vivify_1015:
    set $P1411, $P108
.annotate 'line', 599
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1414, $P108, $P109, "@!BLOCKS", 8
    unless_null $P1414, vivify_1016
    $P1414 = root_new ['parrot';'ResizablePMCArray']
  vivify_1016:
    set $N102, $P1414
    new $P110, 'Float'
    set $P110, $N102
    set $P1412, $P110
.annotate 'line', 600
    new $P109, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P109, loop1426_handler
    push_eh $P109
  loop1426_test:
    set $P107, $P1412
    unless_null $P107, vivify_1017
    new $P107, "Undef"
  vivify_1017:
    set $N102, $P107
    set $N103, 0
    isgt $I101, $N102, $N103
    unless $I101, loop1426_done
  loop1426_redo:
    .const 'Sub' $P1416 = "569_1334921493.34" 
    capture_lex $P1416
    $P1416()
  loop1426_next:
    goto loop1426_test
  loop1426_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P110, exception, 'type'
    eq $P110, .CONTROL_LOOP_NEXT, loop1426_next
    eq $P110, .CONTROL_LOOP_REDO, loop1426_redo
  loop1426_done:
    pop_eh 
.annotate 'line', 597
    .return ($I101)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1415"  :anon :subid("569_1334921493.34") :outer("568_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 602
    $P1418 = root_new ['parrot';'Hash']
    set $P1417, $P1418
    .lex "%sym", $P1417
.annotate 'line', 601
    find_lex $P108, "$i"
    unless_null $P108, vivify_1018
    new $P108, "Undef"
  vivify_1018:
    sub $P109, $P108, 1
    store_lex "$i", $P109
.annotate 'line', 602
    find_lex $P108, "$i"
    unless_null $P108, vivify_1019
    new $P108, "Undef"
  vivify_1019:
    set $I102, $P108
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    nqp_get_sc_object $P111, "2B5C94FD168936910C6447E76184891955F385CA-1334921493.275", 1
    repr_get_attr_obj $P1419, $P110, $P111, "@!BLOCKS", 8
    unless_null $P1419, vivify_1020
    $P1419 = root_new ['parrot';'ResizablePMCArray']
  vivify_1020:
    set $P112, $P1419[$I102]
    unless_null $P112, vivify_1021
    new $P112, "Undef"
  vivify_1021:
    find_lex $P113, "$first"
    unless_null $P113, vivify_1022
    new $P113, "Undef"
  vivify_1022:
    $P114 = $P112."symbol"($P113)
    set $P1417, $P114
.annotate 'line', 603
    set $P1421, $P1417
    unless_null $P1421, vivify_1023
    $P1421 = root_new ['parrot';'Hash']
  vivify_1023:
    set $N104, $P1421
    if $N104, if_1420
    new $P108, 'Float'
    set $P108, $N104
    goto if_1420_end
  if_1420:
.annotate 'line', 604
    set $P1423, $P1417
    unless_null $P1423, vivify_1024
    $P1423 = root_new ['parrot';'Hash']
  vivify_1024:
    exists $I102, $P1423["value"]
    if $I102, if_1422
.annotate 'line', 610
    new $P111, 'String'
    set $P111, "No compile-time value for "
    find_lex $P112, "$first"
    unless_null $P112, vivify_1025
    new $P112, "Undef"
  vivify_1025:
    concat $P113, $P111, $P112
    die $P113
.annotate 'line', 609
    goto if_1422_end
  if_1422:
.annotate 'line', 605
    set $P1424, $P1417
    unless_null $P1424, vivify_1026
    $P1424 = root_new ['parrot';'Hash']
  vivify_1026:
    set $P110, $P1424["value"]
    unless_null $P110, vivify_1027
    new $P110, "Undef"
  vivify_1027:
    store_lex "$result", $P110
.annotate 'line', 606
    find_lex $P1425, "@name"
    unless_null $P1425, vivify_1028
    $P1425 = root_new ['parrot';'ResizablePMCArray']
  vivify_1028:
    $P1425."shift"()
.annotate 'line', 607
    new $P110, "Float"
    assign $P110, 0
    store_lex "$i", $P110
.annotate 'line', 604
    set $P109, $P110
  if_1422_end:
.annotate 'line', 603
    set $P108, $P109
  if_1420_end:
.annotate 'line', 600
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1428"  :anon :subid("570_1334921493.34") :outer("39_1334921493.34")
    .param pmc param_1430
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 617
    .lex "$_", param_1430
.annotate 'line', 618
    find_lex $P110, "$_"
    unless_null $P110, vivify_1031
    new $P110, "Undef"
  vivify_1031:
    set $S100, $P110
    find_lex $P108, "$result"
    unless_null $P108, vivify_1032
    new $P108, "Undef"
  vivify_1032:
    get_who $P109, $P108
    exists $I101, $P109[$S100]
    if $I101, if_1431
.annotate 'line', 622
    new $P111, "String"
    assign $P111, "Could not locate compile-time value for symbol "
.annotate 'line', 623
    find_lex $P1432, "@name"
    unless_null $P1432, vivify_1033
    $P1432 = root_new ['parrot';'ResizablePMCArray']
  vivify_1033:
    join $S101, "::", $P1432
    concat $P112, $P111, $S101
.annotate 'line', 622
    die $P112
.annotate 'line', 621
    goto if_1431_end
  if_1431:
.annotate 'line', 619
    find_lex $P111, "$_"
    unless_null $P111, vivify_1034
    new $P111, "Undef"
  vivify_1034:
    find_lex $P112, "$result"
    unless_null $P112, vivify_1035
    new $P112, "Undef"
  vivify_1035:
    get_who $P113, $P112
    set $P114, $P113[$P111]
    unless_null $P114, vivify_1036
    new $P114, "Undef"
  vivify_1036:
    store_lex "$result", $P114
.annotate 'line', 618
    set $P107, $P114
  if_1431_end:
.annotate 'line', 617
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1435"  :subid("571_1334921493.34") :outer("542_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 632
    .const 'Sub' $P2535 = "405_1334921493.34" 
    capture_lex $P2535
    .const 'Sub' $P2534 = "404_1334921493.34" 
    capture_lex $P2534
    .const 'Sub' $P2530 = "403_1334921493.34" 
    capture_lex $P2530
    .const 'Sub' $P2529 = "402_1334921493.34" 
    capture_lex $P2529
    .const 'Sub' $P2525 = "401_1334921493.34" 
    capture_lex $P2525
    .const 'Sub' $P2524 = "400_1334921493.34" 
    capture_lex $P2524
    .const 'Sub' $P2520 = "399_1334921493.34" 
    capture_lex $P2520
    .const 'Sub' $P2519 = "398_1334921493.34" 
    capture_lex $P2519
    .const 'Sub' $P2515 = "397_1334921493.34" 
    capture_lex $P2515
    .const 'Sub' $P2514 = "396_1334921493.34" 
    capture_lex $P2514
    .const 'Sub' $P2508 = "395_1334921493.34" 
    capture_lex $P2508
    .const 'Sub' $P2507 = "394_1334921493.34" 
    capture_lex $P2507
    .const 'Sub' $P2503 = "393_1334921493.34" 
    capture_lex $P2503
    .const 'Sub' $P2502 = "392_1334921493.34" 
    capture_lex $P2502
    .const 'Sub' $P2498 = "391_1334921493.34" 
    capture_lex $P2498
    .const 'Sub' $P2497 = "390_1334921493.34" 
    capture_lex $P2497
    .const 'Sub' $P2493 = "389_1334921493.34" 
    capture_lex $P2493
    .const 'Sub' $P2492 = "388_1334921493.34" 
    capture_lex $P2492
    .const 'Sub' $P2488 = "387_1334921493.34" 
    capture_lex $P2488
    .const 'Sub' $P2487 = "386_1334921493.34" 
    capture_lex $P2487
    .const 'Sub' $P2484 = "385_1334921493.34" 
    capture_lex $P2484
    .const 'Sub' $P2483 = "384_1334921493.34" 
    capture_lex $P2483
    .const 'Sub' $P2479 = "383_1334921493.34" 
    capture_lex $P2479
    .const 'Sub' $P2478 = "382_1334921493.34" 
    capture_lex $P2478
    .const 'Sub' $P2474 = "381_1334921493.34" 
    capture_lex $P2474
    .const 'Sub' $P2473 = "380_1334921493.34" 
    capture_lex $P2473
    .const 'Sub' $P2469 = "379_1334921493.34" 
    capture_lex $P2469
    .const 'Sub' $P2468 = "378_1334921493.34" 
    capture_lex $P2468
    .const 'Sub' $P2464 = "377_1334921493.34" 
    capture_lex $P2464
    .const 'Sub' $P2463 = "376_1334921493.34" 
    capture_lex $P2463
    .const 'Sub' $P2459 = "375_1334921493.34" 
    capture_lex $P2459
    .const 'Sub' $P2458 = "374_1334921493.34" 
    capture_lex $P2458
    .const 'Sub' $P2454 = "373_1334921493.34" 
    capture_lex $P2454
    .const 'Sub' $P2453 = "372_1334921493.34" 
    capture_lex $P2453
    .const 'Sub' $P2449 = "371_1334921493.34" 
    capture_lex $P2449
    .const 'Sub' $P2448 = "370_1334921493.34" 
    capture_lex $P2448
    .const 'Sub' $P2444 = "369_1334921493.34" 
    capture_lex $P2444
    .const 'Sub' $P2443 = "368_1334921493.34" 
    capture_lex $P2443
    .const 'Sub' $P2439 = "367_1334921493.34" 
    capture_lex $P2439
    .const 'Sub' $P2438 = "366_1334921493.34" 
    capture_lex $P2438
    .const 'Sub' $P2434 = "365_1334921493.34" 
    capture_lex $P2434
    .const 'Sub' $P2433 = "364_1334921493.34" 
    capture_lex $P2433
    .const 'Sub' $P2429 = "363_1334921493.34" 
    capture_lex $P2429
    .const 'Sub' $P2428 = "362_1334921493.34" 
    capture_lex $P2428
    .const 'Sub' $P2424 = "361_1334921493.34" 
    capture_lex $P2424
    .const 'Sub' $P2423 = "360_1334921493.34" 
    capture_lex $P2423
    .const 'Sub' $P2419 = "359_1334921493.34" 
    capture_lex $P2419
    .const 'Sub' $P2418 = "358_1334921493.34" 
    capture_lex $P2418
    .const 'Sub' $P2414 = "357_1334921493.34" 
    capture_lex $P2414
    .const 'Sub' $P2413 = "356_1334921493.34" 
    capture_lex $P2413
    .const 'Sub' $P2409 = "355_1334921493.34" 
    capture_lex $P2409
    .const 'Sub' $P2408 = "354_1334921493.34" 
    capture_lex $P2408
    .const 'Sub' $P2404 = "353_1334921493.34" 
    capture_lex $P2404
    .const 'Sub' $P2403 = "352_1334921493.34" 
    capture_lex $P2403
    .const 'Sub' $P2399 = "351_1334921493.34" 
    capture_lex $P2399
    .const 'Sub' $P2398 = "350_1334921493.34" 
    capture_lex $P2398
    .const 'Sub' $P2394 = "349_1334921493.34" 
    capture_lex $P2394
    .const 'Sub' $P2393 = "348_1334921493.34" 
    capture_lex $P2393
    .const 'Sub' $P2389 = "347_1334921493.34" 
    capture_lex $P2389
    .const 'Sub' $P2388 = "346_1334921493.34" 
    capture_lex $P2388
    .const 'Sub' $P2384 = "345_1334921493.34" 
    capture_lex $P2384
    .const 'Sub' $P2383 = "344_1334921493.34" 
    capture_lex $P2383
    .const 'Sub' $P2379 = "343_1334921493.34" 
    capture_lex $P2379
    .const 'Sub' $P2378 = "342_1334921493.34" 
    capture_lex $P2378
    .const 'Sub' $P2374 = "341_1334921493.34" 
    capture_lex $P2374
    .const 'Sub' $P2373 = "340_1334921493.34" 
    capture_lex $P2373
    .const 'Sub' $P2369 = "339_1334921493.34" 
    capture_lex $P2369
    .const 'Sub' $P2368 = "338_1334921493.34" 
    capture_lex $P2368
    .const 'Sub' $P2364 = "337_1334921493.34" 
    capture_lex $P2364
    .const 'Sub' $P2363 = "336_1334921493.34" 
    capture_lex $P2363
    .const 'Sub' $P2359 = "335_1334921493.34" 
    capture_lex $P2359
    .const 'Sub' $P2358 = "334_1334921493.34" 
    capture_lex $P2358
    .const 'Sub' $P2354 = "333_1334921493.34" 
    capture_lex $P2354
    .const 'Sub' $P2353 = "332_1334921493.34" 
    capture_lex $P2353
    .const 'Sub' $P2349 = "331_1334921493.34" 
    capture_lex $P2349
    .const 'Sub' $P2348 = "330_1334921493.34" 
    capture_lex $P2348
    .const 'Sub' $P2344 = "329_1334921493.34" 
    capture_lex $P2344
    .const 'Sub' $P2343 = "328_1334921493.34" 
    capture_lex $P2343
    .const 'Sub' $P2339 = "327_1334921493.34" 
    capture_lex $P2339
    .const 'Sub' $P2338 = "326_1334921493.34" 
    capture_lex $P2338
    .const 'Sub' $P2334 = "325_1334921493.34" 
    capture_lex $P2334
    .const 'Sub' $P2333 = "324_1334921493.34" 
    capture_lex $P2333
    .const 'Sub' $P2329 = "323_1334921493.34" 
    capture_lex $P2329
    .const 'Sub' $P2328 = "322_1334921493.34" 
    capture_lex $P2328
    .const 'Sub' $P2324 = "321_1334921493.34" 
    capture_lex $P2324
    .const 'Sub' $P2323 = "320_1334921493.34" 
    capture_lex $P2323
    .const 'Sub' $P2319 = "319_1334921493.34" 
    capture_lex $P2319
    .const 'Sub' $P2318 = "318_1334921493.34" 
    capture_lex $P2318
    .const 'Sub' $P2314 = "317_1334921493.34" 
    capture_lex $P2314
    .const 'Sub' $P2313 = "316_1334921493.34" 
    capture_lex $P2313
    .const 'Sub' $P2309 = "315_1334921493.34" 
    capture_lex $P2309
    .const 'Sub' $P2308 = "314_1334921493.34" 
    capture_lex $P2308
    .const 'Sub' $P2304 = "313_1334921493.34" 
    capture_lex $P2304
    .const 'Sub' $P2303 = "312_1334921493.34" 
    capture_lex $P2303
    .const 'Sub' $P2299 = "311_1334921493.34" 
    capture_lex $P2299
    .const 'Sub' $P2298 = "310_1334921493.34" 
    capture_lex $P2298
    .const 'Sub' $P2295 = "309_1334921493.34" 
    capture_lex $P2295
    .const 'Sub' $P2294 = "308_1334921493.34" 
    capture_lex $P2294
    .const 'Sub' $P2291 = "307_1334921493.34" 
    capture_lex $P2291
    .const 'Sub' $P2290 = "306_1334921493.34" 
    capture_lex $P2290
    .const 'Sub' $P2287 = "305_1334921493.34" 
    capture_lex $P2287
    .const 'Sub' $P2286 = "304_1334921493.34" 
    capture_lex $P2286
    .const 'Sub' $P2283 = "303_1334921493.34" 
    capture_lex $P2283
    .const 'Sub' $P2282 = "302_1334921493.34" 
    capture_lex $P2282
    .const 'Sub' $P2279 = "301_1334921493.34" 
    capture_lex $P2279
    .const 'Sub' $P2278 = "300_1334921493.34" 
    capture_lex $P2278
    .const 'Sub' $P2275 = "299_1334921493.34" 
    capture_lex $P2275
    .const 'Sub' $P2274 = "298_1334921493.34" 
    capture_lex $P2274
    .const 'Sub' $P2271 = "297_1334921493.34" 
    capture_lex $P2271
    .const 'Sub' $P2270 = "296_1334921493.34" 
    capture_lex $P2270
    .const 'Sub' $P2267 = "295_1334921493.34" 
    capture_lex $P2267
    .const 'Sub' $P2266 = "294_1334921493.34" 
    capture_lex $P2266
    .const 'Sub' $P2261 = "293_1334921493.34" 
    capture_lex $P2261
    .const 'Sub' $P2260 = "292_1334921493.34" 
    capture_lex $P2260
    .const 'Sub' $P2257 = "291_1334921493.34" 
    capture_lex $P2257
    .const 'Sub' $P2256 = "290_1334921493.34" 
    capture_lex $P2256
    .const 'Sub' $P2253 = "289_1334921493.34" 
    capture_lex $P2253
    .const 'Sub' $P2252 = "288_1334921493.34" 
    capture_lex $P2252
    .const 'Sub' $P2249 = "287_1334921493.34" 
    capture_lex $P2249
    .const 'Sub' $P2248 = "286_1334921493.34" 
    capture_lex $P2248
    .const 'Sub' $P2243 = "285_1334921493.34" 
    capture_lex $P2243
    .const 'Sub' $P2242 = "284_1334921493.34" 
    capture_lex $P2242
    .const 'Sub' $P2237 = "283_1334921493.34" 
    capture_lex $P2237
    .const 'Sub' $P2236 = "282_1334921493.34" 
    capture_lex $P2236
    .const 'Sub' $P2233 = "281_1334921493.34" 
    capture_lex $P2233
    .const 'Sub' $P2232 = "280_1334921493.34" 
    capture_lex $P2232
    .const 'Sub' $P2229 = "279_1334921493.34" 
    capture_lex $P2229
    .const 'Sub' $P2228 = "278_1334921493.34" 
    capture_lex $P2228
    .const 'Sub' $P2225 = "277_1334921493.34" 
    capture_lex $P2225
    .const 'Sub' $P2224 = "276_1334921493.34" 
    capture_lex $P2224
    .const 'Sub' $P2221 = "275_1334921493.34" 
    capture_lex $P2221
    .const 'Sub' $P2220 = "274_1334921493.34" 
    capture_lex $P2220
    .const 'Sub' $P2216 = "273_1334921493.34" 
    capture_lex $P2216
    .const 'Sub' $P2215 = "272_1334921493.34" 
    capture_lex $P2215
    .const 'Sub' $P2211 = "271_1334921493.34" 
    capture_lex $P2211
    .const 'Sub' $P2210 = "270_1334921493.34" 
    capture_lex $P2210
    .const 'Sub' $P2206 = "269_1334921493.34" 
    capture_lex $P2206
    .const 'Sub' $P2205 = "268_1334921493.34" 
    capture_lex $P2205
    .const 'Sub' $P2201 = "267_1334921493.34" 
    capture_lex $P2201
    .const 'Sub' $P2200 = "266_1334921493.34" 
    capture_lex $P2200
    .const 'Sub' $P2197 = "265_1334921493.34" 
    capture_lex $P2197
    .const 'Sub' $P2196 = "264_1334921493.34" 
    capture_lex $P2196
    .const 'Sub' $P2193 = "263_1334921493.34" 
    capture_lex $P2193
    .const 'Sub' $P2188 = "260_1334921493.34" 
    capture_lex $P2188
    .const 'Sub' $P2182 = "259_1334921493.34" 
    capture_lex $P2182
    .const 'Sub' $P2181 = "258_1334921493.34" 
    capture_lex $P2181
    .const 'Sub' $P2177 = "257_1334921493.34" 
    capture_lex $P2177
    .const 'Sub' $P2176 = "256_1334921493.34" 
    capture_lex $P2176
    .const 'Sub' $P2173 = "255_1334921493.34" 
    capture_lex $P2173
    .const 'Sub' $P2172 = "254_1334921493.34" 
    capture_lex $P2172
    .const 'Sub' $P2168 = "253_1334921493.34" 
    capture_lex $P2168
    .const 'Sub' $P2167 = "252_1334921493.34" 
    capture_lex $P2167
    .const 'Sub' $P2164 = "251_1334921493.34" 
    capture_lex $P2164
    .const 'Sub' $P2163 = "250_1334921493.34" 
    capture_lex $P2163
    .const 'Sub' $P2157 = "249_1334921493.34" 
    capture_lex $P2157
    .const 'Sub' $P2156 = "248_1334921493.34" 
    capture_lex $P2156
    .const 'Sub' $P2150 = "247_1334921493.34" 
    capture_lex $P2150
    .const 'Sub' $P2149 = "246_1334921493.34" 
    capture_lex $P2149
    .const 'Sub' $P2145 = "245_1334921493.34" 
    capture_lex $P2145
    .const 'Sub' $P2144 = "244_1334921493.34" 
    capture_lex $P2144
    .const 'Sub' $P2138 = "243_1334921493.34" 
    capture_lex $P2138
    .const 'Sub' $P2137 = "242_1334921493.34" 
    capture_lex $P2137
    .const 'Sub' $P2132 = "241_1334921493.34" 
    capture_lex $P2132
    .const 'Sub' $P2131 = "240_1334921493.34" 
    capture_lex $P2131
    .const 'Sub' $P2128 = "239_1334921493.34" 
    capture_lex $P2128
    .const 'Sub' $P2127 = "238_1334921493.34" 
    capture_lex $P2127
    .const 'Sub' $P2123 = "237_1334921493.34" 
    capture_lex $P2123
    .const 'Sub' $P2118 = "234_1334921493.34" 
    capture_lex $P2118
    .const 'Sub' $P2111 = "233_1334921493.34" 
    capture_lex $P2111
    .const 'Sub' $P2110 = "232_1334921493.34" 
    capture_lex $P2110
    .const 'Sub' $P2100 = "231_1334921493.34" 
    capture_lex $P2100
    .const 'Sub' $P2099 = "230_1334921493.34" 
    capture_lex $P2099
    .const 'Sub' $P2093 = "229_1334921493.34" 
    capture_lex $P2093
    .const 'Sub' $P2088 = "226_1334921493.34" 
    capture_lex $P2088
    .const 'Sub' $P2085 = "225_1334921493.34" 
    capture_lex $P2085
    .const 'Sub' $P2084 = "224_1334921493.34" 
    capture_lex $P2084
    .const 'Sub' $P2081 = "223_1334921493.34" 
    capture_lex $P2081
    .const 'Sub' $P2080 = "222_1334921493.34" 
    capture_lex $P2080
    .const 'Sub' $P2077 = "221_1334921493.34" 
    capture_lex $P2077
    .const 'Sub' $P2076 = "220_1334921493.34" 
    capture_lex $P2076
    .const 'Sub' $P2069 = "219_1334921493.34" 
    capture_lex $P2069
    .const 'Sub' $P2068 = "218_1334921493.34" 
    capture_lex $P2068
    .const 'Sub' $P2055 = "217_1334921493.34" 
    capture_lex $P2055
    .const 'Sub' $P2054 = "216_1334921493.34" 
    capture_lex $P2054
    .const 'Sub' $P2046 = "215_1334921493.34" 
    capture_lex $P2046
    .const 'Sub' $P2045 = "214_1334921493.34" 
    capture_lex $P2045
    .const 'Sub' $P2041 = "213_1334921493.34" 
    capture_lex $P2041
    .const 'Sub' $P2040 = "212_1334921493.34" 
    capture_lex $P2040
    .const 'Sub' $P2034 = "211_1334921493.34" 
    capture_lex $P2034
    .const 'Sub' $P2033 = "210_1334921493.34" 
    capture_lex $P2033
    .const 'Sub' $P2027 = "209_1334921493.34" 
    capture_lex $P2027
    .const 'Sub' $P2022 = "206_1334921493.34" 
    capture_lex $P2022
    .const 'Sub' $P2017 = "205_1334921493.34" 
    capture_lex $P2017
    .const 'Sub' $P2016 = "204_1334921493.34" 
    capture_lex $P2016
    .const 'Sub' $P2001 = "203_1334921493.34" 
    capture_lex $P2001
    .const 'Sub' $P2000 = "202_1334921493.34" 
    capture_lex $P2000
    .const 'Sub' $P1989 = "201_1334921493.34" 
    capture_lex $P1989
    .const 'Sub' $P1988 = "200_1334921493.34" 
    capture_lex $P1988
    .const 'Sub' $P1984 = "199_1334921493.34" 
    capture_lex $P1984
    .const 'Sub' $P1983 = "198_1334921493.34" 
    capture_lex $P1983
    .const 'Sub' $P1979 = "197_1334921493.34" 
    capture_lex $P1979
    .const 'Sub' $P1974 = "194_1334921493.34" 
    capture_lex $P1974
    .const 'Sub' $P1964 = "193_1334921493.34" 
    capture_lex $P1964
    .const 'Sub' $P1963 = "192_1334921493.34" 
    capture_lex $P1963
    .const 'Sub' $P1959 = "191_1334921493.34" 
    capture_lex $P1959
    .const 'Sub' $P1958 = "190_1334921493.34" 
    capture_lex $P1958
    .const 'Sub' $P1951 = "189_1334921493.34" 
    capture_lex $P1951
    .const 'Sub' $P1950 = "188_1334921493.34" 
    capture_lex $P1950
    .const 'Sub' $P1945 = "187_1334921493.34" 
    capture_lex $P1945
    .const 'Sub' $P1944 = "186_1334921493.34" 
    capture_lex $P1944
    .const 'Sub' $P1940 = "185_1334921493.34" 
    capture_lex $P1940
    .const 'Sub' $P1939 = "184_1334921493.34" 
    capture_lex $P1939
    .const 'Sub' $P1935 = "183_1334921493.34" 
    capture_lex $P1935
    .const 'Sub' $P1934 = "182_1334921493.34" 
    capture_lex $P1934
    .const 'Sub' $P1930 = "181_1334921493.34" 
    capture_lex $P1930
    .const 'Sub' $P1925 = "178_1334921493.34" 
    capture_lex $P1925
    .const 'Sub' $P1883 = "177_1334921493.34" 
    capture_lex $P1883
    .const 'Sub' $P1882 = "176_1334921493.34" 
    capture_lex $P1882
    .const 'Sub' $P1876 = "175_1334921493.34" 
    capture_lex $P1876
    .const 'Sub' $P1875 = "174_1334921493.34" 
    capture_lex $P1875
    .const 'Sub' $P1869 = "173_1334921493.34" 
    capture_lex $P1869
    .const 'Sub' $P1868 = "172_1334921493.34" 
    capture_lex $P1868
    .const 'Sub' $P1862 = "171_1334921493.34" 
    capture_lex $P1862
    .const 'Sub' $P1861 = "170_1334921493.34" 
    capture_lex $P1861
    .const 'Sub' $P1855 = "169_1334921493.34" 
    capture_lex $P1855
    .const 'Sub' $P1854 = "168_1334921493.34" 
    capture_lex $P1854
    .const 'Sub' $P1848 = "167_1334921493.34" 
    capture_lex $P1848
    .const 'Sub' $P1847 = "166_1334921493.34" 
    capture_lex $P1847
    .const 'Sub' $P1841 = "165_1334921493.34" 
    capture_lex $P1841
    .const 'Sub' $P1840 = "164_1334921493.34" 
    capture_lex $P1840
    .const 'Sub' $P1834 = "163_1334921493.34" 
    capture_lex $P1834
    .const 'Sub' $P1829 = "160_1334921493.34" 
    capture_lex $P1829
    .const 'Sub' $P1826 = "159_1334921493.34" 
    capture_lex $P1826
    .const 'Sub' $P1825 = "158_1334921493.34" 
    capture_lex $P1825
    .const 'Sub' $P1822 = "157_1334921493.34" 
    capture_lex $P1822
    .const 'Sub' $P1821 = "156_1334921493.34" 
    capture_lex $P1821
    .const 'Sub' $P1813 = "155_1334921493.34" 
    capture_lex $P1813
    .const 'Sub' $P1812 = "154_1334921493.34" 
    capture_lex $P1812
    .const 'Sub' $P1805 = "153_1334921493.34" 
    capture_lex $P1805
    .const 'Sub' $P1804 = "152_1334921493.34" 
    capture_lex $P1804
    .const 'Sub' $P1800 = "151_1334921493.34" 
    capture_lex $P1800
    .const 'Sub' $P1799 = "150_1334921493.34" 
    capture_lex $P1799
    .const 'Sub' $P1796 = "149_1334921493.34" 
    capture_lex $P1796
    .const 'Sub' $P1795 = "148_1334921493.34" 
    capture_lex $P1795
    .const 'Sub' $P1792 = "147_1334921493.34" 
    capture_lex $P1792
    .const 'Sub' $P1791 = "146_1334921493.34" 
    capture_lex $P1791
    .const 'Sub' $P1788 = "145_1334921493.34" 
    capture_lex $P1788
    .const 'Sub' $P1787 = "144_1334921493.34" 
    capture_lex $P1787
    .const 'Sub' $P1774 = "143_1334921493.34" 
    capture_lex $P1774
    .const 'Sub' $P1773 = "142_1334921493.34" 
    capture_lex $P1773
    .const 'Sub' $P1770 = "141_1334921493.34" 
    capture_lex $P1770
    .const 'Sub' $P1769 = "140_1334921493.34" 
    capture_lex $P1769
    .const 'Sub' $P1766 = "139_1334921493.34" 
    capture_lex $P1766
    .const 'Sub' $P1765 = "138_1334921493.34" 
    capture_lex $P1765
    .const 'Sub' $P1762 = "137_1334921493.34" 
    capture_lex $P1762
    .const 'Sub' $P1761 = "136_1334921493.34" 
    capture_lex $P1761
    .const 'Sub' $P1758 = "135_1334921493.34" 
    capture_lex $P1758
    .const 'Sub' $P1757 = "134_1334921493.34" 
    capture_lex $P1757
    .const 'Sub' $P1754 = "133_1334921493.34" 
    capture_lex $P1754
    .const 'Sub' $P1753 = "132_1334921493.34" 
    capture_lex $P1753
    .const 'Sub' $P1750 = "131_1334921493.34" 
    capture_lex $P1750
    .const 'Sub' $P1749 = "130_1334921493.34" 
    capture_lex $P1749
    .const 'Sub' $P1745 = "129_1334921493.34" 
    capture_lex $P1745
    .const 'Sub' $P1744 = "128_1334921493.34" 
    capture_lex $P1744
    .const 'Sub' $P1740 = "127_1334921493.34" 
    capture_lex $P1740
    .const 'Sub' $P1739 = "126_1334921493.34" 
    capture_lex $P1739
    .const 'Sub' $P1735 = "125_1334921493.34" 
    capture_lex $P1735
    .const 'Sub' $P1730 = "122_1334921493.34" 
    capture_lex $P1730
    .const 'Sub' $P1726 = "121_1334921493.34" 
    capture_lex $P1726
    .const 'Sub' $P1725 = "120_1334921493.34" 
    capture_lex $P1725
    .const 'Sub' $P1721 = "119_1334921493.34" 
    capture_lex $P1721
    .const 'Sub' $P1716 = "116_1334921493.34" 
    capture_lex $P1716
    .const 'Sub' $P1712 = "115_1334921493.34" 
    capture_lex $P1712
    .const 'Sub' $P1711 = "114_1334921493.34" 
    capture_lex $P1711
    .const 'Sub' $P1707 = "113_1334921493.34" 
    capture_lex $P1707
    .const 'Sub' $P1706 = "112_1334921493.34" 
    capture_lex $P1706
    .const 'Sub' $P1702 = "111_1334921493.34" 
    capture_lex $P1702
    .const 'Sub' $P1701 = "110_1334921493.34" 
    capture_lex $P1701
    .const 'Sub' $P1697 = "109_1334921493.34" 
    capture_lex $P1697
    .const 'Sub' $P1692 = "106_1334921493.34" 
    capture_lex $P1692
    .const 'Sub' $P1688 = "105_1334921493.34" 
    capture_lex $P1688
    .const 'Sub' $P1687 = "104_1334921493.34" 
    capture_lex $P1687
    .const 'Sub' $P1683 = "103_1334921493.34" 
    capture_lex $P1683
    .const 'Sub' $P1682 = "102_1334921493.34" 
    capture_lex $P1682
    .const 'Sub' $P1678 = "101_1334921493.34" 
    capture_lex $P1678
    .const 'Sub' $P1677 = "100_1334921493.34" 
    capture_lex $P1677
    .const 'Sub' $P1668 = "99_1334921493.34" 
    capture_lex $P1668
    .const 'Sub' $P1667 = "98_1334921493.34" 
    capture_lex $P1667
    .const 'Sub' $P1662 = "97_1334921493.34" 
    capture_lex $P1662
    .const 'Sub' $P1661 = "96_1334921493.34" 
    capture_lex $P1661
    .const 'Sub' $P1652 = "95_1334921493.34" 
    capture_lex $P1652
    .const 'Sub' $P1651 = "94_1334921493.34" 
    capture_lex $P1651
    .const 'Sub' $P1645 = "93_1334921493.34" 
    capture_lex $P1645
    .const 'Sub' $P1644 = "92_1334921493.34" 
    capture_lex $P1644
    .const 'Sub' $P1640 = "91_1334921493.34" 
    capture_lex $P1640
    .const 'Sub' $P1635 = "88_1334921493.34" 
    capture_lex $P1635
    .const 'Sub' $P1632 = "87_1334921493.34" 
    capture_lex $P1632
    .const 'Sub' $P1631 = "86_1334921493.34" 
    capture_lex $P1631
    .const 'Sub' $P1628 = "85_1334921493.34" 
    capture_lex $P1628
    .const 'Sub' $P1623 = "82_1334921493.34" 
    capture_lex $P1623
    .const 'Sub' $P1620 = "81_1334921493.34" 
    capture_lex $P1620
    .const 'Sub' $P1619 = "80_1334921493.34" 
    capture_lex $P1619
    .const 'Sub' $P1616 = "79_1334921493.34" 
    capture_lex $P1616
    .const 'Sub' $P1615 = "78_1334921493.34" 
    capture_lex $P1615
    .const 'Sub' $P1612 = "77_1334921493.34" 
    capture_lex $P1612
    .const 'Sub' $P1611 = "76_1334921493.34" 
    capture_lex $P1611
    .const 'Sub' $P1608 = "75_1334921493.34" 
    capture_lex $P1608
    .const 'Sub' $P1607 = "74_1334921493.34" 
    capture_lex $P1607
    .const 'Sub' $P1604 = "73_1334921493.34" 
    capture_lex $P1604
    .const 'Sub' $P1603 = "72_1334921493.34" 
    capture_lex $P1603
    .const 'Sub' $P1597 = "71_1334921493.34" 
    capture_lex $P1597
    .const 'Sub' $P1596 = "70_1334921493.34" 
    capture_lex $P1596
    .const 'Sub' $P1592 = "69_1334921493.34" 
    capture_lex $P1592
    .const 'Sub' $P1591 = "68_1334921493.34" 
    capture_lex $P1591
    .const 'Sub' $P1587 = "67_1334921493.34" 
    capture_lex $P1587
    .const 'Sub' $P1586 = "66_1334921493.34" 
    capture_lex $P1586
    .const 'Sub' $P1582 = "65_1334921493.34" 
    capture_lex $P1582
    .const 'Sub' $P1581 = "64_1334921493.34" 
    capture_lex $P1581
    .const 'Sub' $P1578 = "63_1334921493.34" 
    capture_lex $P1578
    .const 'Sub' $P1577 = "62_1334921493.34" 
    capture_lex $P1577
    .const 'Sub' $P1573 = "61_1334921493.34" 
    capture_lex $P1573
    .const 'Sub' $P1572 = "60_1334921493.34" 
    capture_lex $P1572
    .const 'Sub' $P1559 = "59_1334921493.34" 
    capture_lex $P1559
    .const 'Sub' $P1558 = "58_1334921493.34" 
    capture_lex $P1558
    .const 'Sub' $P1553 = "57_1334921493.34" 
    capture_lex $P1553
    .const 'Sub' $P1552 = "56_1334921493.34" 
    capture_lex $P1552
    .const 'Sub' $P1543 = "55_1334921493.34" 
    capture_lex $P1543
    .const 'Sub' $P1542 = "54_1334921493.34" 
    capture_lex $P1542
    .const 'Sub' $P1506 = "53_1334921493.34" 
    capture_lex $P1506
    .const 'Sub' $P1505 = "52_1334921493.34" 
    capture_lex $P1505
    .const 'Sub' $P1492 = "51_1334921493.34" 
    capture_lex $P1492
    .const 'Sub' $P1491 = "50_1334921493.34" 
    capture_lex $P1491
    .const 'Sub' $P1482 = "49_1334921493.34" 
    capture_lex $P1482
    .const 'Sub' $P1481 = "48_1334921493.34" 
    capture_lex $P1481
    .const 'Sub' $P1471 = "47_1334921493.34" 
    capture_lex $P1471
    .const 'Sub' $P1470 = "46_1334921493.34" 
    capture_lex $P1470
    .const 'Sub' $P1465 = "45_1334921493.34" 
    capture_lex $P1465
    .const 'Sub' $P1464 = "44_1334921493.34" 
    capture_lex $P1464
    .const 'Sub' $P1459 = "43_1334921493.34" 
    capture_lex $P1459
    .const 'Sub' $P1458 = "42_1334921493.34" 
    capture_lex $P1458
    .const 'Sub' $P1454 = "41_1334921493.34" 
    capture_lex $P1454
    .const 'Sub' $P1439 = "40_1334921493.34" 
    capture_lex $P1439
    .lex "$?PACKAGE", $P1437
    .lex "$?CLASS", $P1438
.annotate 'line', 1249
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<y=>, :assoc<unary>", "%methodop")
.annotate 'line', 1250
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<x=>, :assoc<unary>", "%autoincrement")
.annotate 'line', 1251
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<w=>, :assoc<left>", "%exponentiation")
.annotate 'line', 1252
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<v=>, :assoc<unary>", "%symbolic_unary")
.annotate 'line', 1253
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<u=>, :assoc<left>", "%multiplicative")
.annotate 'line', 1254
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<t=>, :assoc<left>", "%additive")
.annotate 'line', 1255
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<r=>, :assoc<left>", "%concatenation")
.annotate 'line', 1256
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<m=>, :assoc<left>", "%relational")
.annotate 'line', 1257
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<l=>, :assoc<left>", "%tight_and")
.annotate 'line', 1258
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<k=>, :assoc<left>", "%tight_or")
.annotate 'line', 1259
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<j=>, :assoc<right>", "%conditional")
.annotate 'line', 1260
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<i=>, :assoc<right>", "%assignment")
.annotate 'line', 1261
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<g=>, :assoc<list>, :nextterm<nulltermish>", "%comma")
.annotate 'line', 1262
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<f=>, :assoc<list>", "%list_infix")
.annotate 'line', 1263
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<e=>, :assoc<unary>", "%list_prefix")
.annotate 'line', 1362
    .const 'Sub' $P2535 = "405_1334921493.34" 
    newclosure $P2543, $P2535
.annotate 'line', 632
    .return ($P2543)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "TOP" :anon :subid("40_1334921493.34") :outer("571_1334921493.34")
    .param pmc param_1440
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 633
    .lex "self", param_1440
.annotate 'line', 635
    $P1442 = root_new ['parrot';'Hash']
    set $P1441, $P1442
    .lex "%*LANG", $P1441
.annotate 'line', 644
    $P1444 = root_new ['parrot';'Hash']
    set $P1443, $P1444
    .lex "%*HOW", $P1443
.annotate 'line', 651
    new $P103, "Undef"
    set $P1445, $P103
    .lex "$file", $P1445
.annotate 'line', 652
    new $P104, "Undef"
    set $P1446, $P104
    .lex "$source_id", $P1446
.annotate 'line', 654
    new $P105, "Undef"
    set $P1447, $P105
    .lex "$*W", $P1447
.annotate 'line', 658
    new $P106, "Undef"
    set $P1448, $P106
    .lex "$*SCOPE", $P1448
.annotate 'line', 659
    new $P107, "Undef"
    set $P1449, $P107
    .lex "$*MULTINESS", $P1449
.annotate 'line', 660
    new $P108, "Undef"
    set $P1450, $P108
    .lex "$*PKGDECL", $P1450
.annotate 'line', 661
    new $P109, "Undef"
    set $P1451, $P109
    .lex "$*INVOCANT_OK", $P1451
.annotate 'line', 662
    new $P110, "Undef"
    set $P1452, $P110
    .lex "$*RETURN_USED", $P1452
.annotate 'line', 633
    set $P113, $P1441
    unless_null $P113, vivify_1038
    get_hll_global $P111, "GLOBAL"
    get_who $P112, $P111
    set $P113, $P112["%LANG"]
    unless_null $P113, vivify_1039
    die "Contextual %*LANG not found"
  vivify_1039:
  vivify_1038:
.annotate 'line', 636
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "NQP"
    get_who $P113, $P112
    set $P114, $P113["Regex"]
    set $P117, $P1441
    unless_null $P117, vivify_1040
    get_hll_global $P115, "GLOBAL"
    get_who $P116, $P115
    set $P117, $P116["%LANG"]
    unless_null $P117, vivify_1041
    die "Contextual %*LANG not found"
  vivify_1041:
    set $P1441, $P117
  vivify_1040:
    set $P117["Regex"], $P114
.annotate 'line', 637
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "NQP"
    get_who $P113, $P112
    set $P114, $P113["RegexActions"]
    set $P117, $P1441
    unless_null $P117, vivify_1042
    get_hll_global $P115, "GLOBAL"
    get_who $P116, $P115
    set $P117, $P116["%LANG"]
    unless_null $P117, vivify_1043
    die "Contextual %*LANG not found"
  vivify_1043:
    set $P1441, $P117
  vivify_1042:
    set $P117["Regex-actions"], $P114
.annotate 'line', 638
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "NQP"
    get_who $P113, $P112
    set $P114, $P113["Grammar"]
    set $P117, $P1441
    unless_null $P117, vivify_1044
    get_hll_global $P115, "GLOBAL"
    get_who $P116, $P115
    set $P117, $P116["%LANG"]
    unless_null $P117, vivify_1045
    die "Contextual %*LANG not found"
  vivify_1045:
    set $P1441, $P117
  vivify_1044:
    set $P117["MAIN"], $P114
.annotate 'line', 639
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "NQP"
    get_who $P113, $P112
    set $P114, $P113["Actions"]
    set $P117, $P1441
    unless_null $P117, vivify_1046
    get_hll_global $P115, "GLOBAL"
    get_who $P116, $P115
    set $P117, $P116["%LANG"]
    unless_null $P117, vivify_1047
    die "Contextual %*LANG not found"
  vivify_1047:
    set $P1441, $P117
  vivify_1046:
    set $P117["MAIN-actions"], $P114
.annotate 'line', 633
    set $P113, $P1443
    unless_null $P113, vivify_1048
    get_hll_global $P111, "GLOBAL"
    get_who $P112, $P111
    set $P113, $P112["%HOW"]
    unless_null $P113, vivify_1049
    die "Contextual %*HOW not found"
  vivify_1049:
  vivify_1048:
.annotate 'line', 645
    get_knowhow $P111
    set $P114, $P1443
    unless_null $P114, vivify_1050
    get_hll_global $P112, "GLOBAL"
    get_who $P113, $P112
    set $P114, $P113["%HOW"]
    unless_null $P114, vivify_1051
    die "Contextual %*HOW not found"
  vivify_1051:
    set $P1443, $P114
  vivify_1050:
    set $P114["knowhow"], $P111
.annotate 'line', 646
    get_knowhow_attribute $P111
    set $P114, $P1443
    unless_null $P114, vivify_1052
    get_hll_global $P112, "GLOBAL"
    get_who $P113, $P112
    set $P114, $P113["%HOW"]
    unless_null $P114, vivify_1053
    die "Contextual %*HOW not found"
  vivify_1053:
    set $P1443, $P114
  vivify_1052:
    set $P114["knowhow-attr"], $P111
.annotate 'line', 651
    find_caller_lex $P111, "$?FILES"
    set $P1445, $P111
.annotate 'line', 652
    set $P111, param_1440
    nqp_decontainerize $P112, $P111
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "Regex"
    get_who $P115, $P114
    set $P116, $P115["Cursor"]
    getattribute $P117, $P112, $P116, "$!target"
    set $S100, $P117
    nqp_sha1 $S101, $S100
    new $P118, 'String'
    set $P118, $S101
    concat $P119, $P118, "-"
.annotate 'line', 653
    time $N100
    set $S102, $N100
    concat $P120, $P119, $S102
    set $P1446, $P120
.annotate 'line', 654
    set $P112, $P1445
    unless_null $P112, vivify_1054
    new $P112, "Undef"
  vivify_1054:
    isnull $I100, $P112
    if $I100, if_1453
.annotate 'line', 656
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "NQP"
    get_who $P121, $P120
    set $P122, $P121["World"]
    set $P123, $P1446
    unless_null $P123, vivify_1055
    new $P123, "Undef"
  vivify_1055:
    set $P124, $P1445
    unless_null $P124, vivify_1056
    new $P124, "Undef"
  vivify_1056:
    $P125 = $P122."new"($P123 :named("handle"), $P124 :named("description"))
    set $P111, $P125
.annotate 'line', 654
    goto if_1453_end
  if_1453:
.annotate 'line', 655
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "NQP"
    get_who $P115, $P114
    set $P116, $P115["World"]
    set $P117, $P1446
    unless_null $P117, vivify_1057
    new $P117, "Undef"
  vivify_1057:
    $P118 = $P116."new"($P117 :named("handle"))
    set $P111, $P118
  if_1453_end:
.annotate 'line', 654
    set $P1447, $P111
.annotate 'line', 658
    new $P111, "String"
    assign $P111, ""
    set $P1448, $P111
.annotate 'line', 659
    new $P111, "String"
    assign $P111, ""
    set $P1449, $P111
.annotate 'line', 660
    new $P111, "String"
    assign $P111, ""
    set $P1450, $P111
.annotate 'line', 661
    new $P111, "Float"
    assign $P111, 0
    set $P1451, $P111
.annotate 'line', 662
    new $P111, "Float"
    assign $P111, 0
    set $P1452, $P111
.annotate 'line', 663
    set $P111, param_1440
    nqp_decontainerize $P112, $P111
    $P113 = $P112."comp_unit"()
.annotate 'line', 633
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "identifier"  :subid("41_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 668
    .local string rx1455_tgt
    .local int rx1455_pos
    .local int rx1455_off
    .local int rx1455_eos
    .local int rx1455_rep
    .local pmc rx1455_cur
    .local pmc rx1455_debug
    (rx1455_cur, rx1455_pos, rx1455_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1455_cur
    .local pmc match
    .lex "$/", match
    length rx1455_eos, rx1455_tgt
    gt rx1455_pos, rx1455_eos, rx1455_done
    set rx1455_off, 0
    lt rx1455_pos, 2, rx1455_start
    sub rx1455_off, rx1455_pos, 1
    substr rx1455_tgt, rx1455_tgt, rx1455_off
  rx1455_start:
    eq $I10, 1, rx1455_restart
    if_null rx1455_debug, debug_1058
    rx1455_cur."!cursor_debug"("START", "identifier")
  debug_1058:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1456_done
    goto rxscan1456_scan
  rxscan1456_loop:
    (rx1455_pos) = rx1455_cur."from"()
    inc rx1455_pos
    rx1455_cur."!cursor_from"(rx1455_pos)
    ge rx1455_pos, rx1455_eos, rxscan1456_done
  rxscan1456_scan:
    set_addr $I10, rxscan1456_loop
    rx1455_cur."!mark_push"(0, rx1455_pos, $I10)
  rxscan1456_done:
  # rx subrule "ident" subtype=method negate=
    rx1455_cur."!cursor_pos"(rx1455_pos)
    $P10 = rx1455_cur."ident"()
    unless $P10, rx1455_fail
    rx1455_pos = $P10."pos"()
  # rx rxquantr1457 ** 0..*
    set_addr $I10, rxquantr1457_done
    rx1455_cur."!mark_push"(0, rx1455_pos, $I10)
  rxquantr1457_loop:
  # rx enumcharlist negate=0 
    ge rx1455_pos, rx1455_eos, rx1455_fail
    sub $I10, rx1455_pos, rx1455_off
    substr $S10, rx1455_tgt, $I10, 1
    index $I11, "-'", $S10
    lt $I11, 0, rx1455_fail
    inc rx1455_pos
  # rx subrule "ident" subtype=method negate=
    rx1455_cur."!cursor_pos"(rx1455_pos)
    $P10 = rx1455_cur."ident"()
    unless $P10, rx1455_fail
    rx1455_pos = $P10."pos"()
    set_addr $I10, rxquantr1457_done
    (rx1455_rep) = rx1455_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1457_done
    rx1455_cur."!mark_push"(rx1455_rep, rx1455_pos, $I10)
    goto rxquantr1457_loop
  rxquantr1457_done:
  # rx pass
    rx1455_cur."!cursor_pass"(rx1455_pos, "identifier")
    if_null rx1455_debug, debug_1059
    rx1455_cur."!cursor_debug"("PASS", "identifier", " at pos=", rx1455_pos)
  debug_1059:
    .return (rx1455_cur)
  rx1455_restart:
    if_null rx1455_debug, debug_1060
    rx1455_cur."!cursor_debug"("NEXT", "identifier")
  debug_1060:
  rx1455_fail:
    (rx1455_rep, rx1455_pos, $I10, $P10) = rx1455_cur."!mark_fail"(0)
    lt rx1455_pos, -1, rx1455_done
    eq rx1455_pos, -1, rx1455_fail
    jump $I10
  rx1455_done:
    rx1455_cur."!cursor_fail"()
    if_null rx1455_debug, debug_1061
    rx1455_cur."!cursor_debug"("FAIL", "identifier")
  debug_1061:
    .return (rx1455_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__identifier"  :subid("42_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 668
    $P103 = self."!PREFIX__!subrule"("ident", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "name"  :subid("43_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 670
    .local string rx1460_tgt
    .local int rx1460_pos
    .local int rx1460_off
    .local int rx1460_eos
    .local int rx1460_rep
    .local pmc rx1460_cur
    .local pmc rx1460_debug
    (rx1460_cur, rx1460_pos, rx1460_tgt, $I10) = self."!cursor_start"()
    rx1460_cur."!cursor_caparray"("identifier")
    .lex unicode:"$\x{a2}", rx1460_cur
    .local pmc match
    .lex "$/", match
    length rx1460_eos, rx1460_tgt
    gt rx1460_pos, rx1460_eos, rx1460_done
    set rx1460_off, 0
    lt rx1460_pos, 2, rx1460_start
    sub rx1460_off, rx1460_pos, 1
    substr rx1460_tgt, rx1460_tgt, rx1460_off
  rx1460_start:
    eq $I10, 1, rx1460_restart
    if_null rx1460_debug, debug_1062
    rx1460_cur."!cursor_debug"("START", "name")
  debug_1062:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1461_done
    goto rxscan1461_scan
  rxscan1461_loop:
    (rx1460_pos) = rx1460_cur."from"()
    inc rx1460_pos
    rx1460_cur."!cursor_from"(rx1460_pos)
    ge rx1460_pos, rx1460_eos, rxscan1461_done
  rxscan1461_scan:
    set_addr $I10, rxscan1461_loop
    rx1460_cur."!mark_push"(0, rx1460_pos, $I10)
  rxscan1461_done:
  # rx rxquantr1462 ** 1..*
    set_addr $I10, rxquantr1462_done
    rx1460_cur."!mark_push"(0, -1, $I10)
  rxquantr1462_loop:
  # rx subrule "identifier" subtype=capture negate=
    rx1460_cur."!cursor_pos"(rx1460_pos)
    $P10 = rx1460_cur."identifier"()
    unless $P10, rx1460_fail
    goto rxsubrule1463_pass
  rxsubrule1463_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1460_fail
  rxsubrule1463_pass:
    set_addr $I10, rxsubrule1463_back
    rx1460_cur."!mark_push"(0, rx1460_pos, $I10, $P10)
    $P10."!cursor_names"("identifier")
    rx1460_pos = $P10."pos"()
    set_addr $I10, rxquantr1462_done
    (rx1460_rep) = rx1460_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1462_done
    rx1460_cur."!mark_push"(rx1460_rep, rx1460_pos, $I10)
  # rx literal  "::"
    add $I11, rx1460_pos, 2
    gt $I11, rx1460_eos, rx1460_fail
    sub $I11, rx1460_pos, rx1460_off
    substr $S10, rx1460_tgt, $I11, 2
    ne $S10, "::", rx1460_fail
    add rx1460_pos, 2
    goto rxquantr1462_loop
  rxquantr1462_done:
  # rx pass
    rx1460_cur."!cursor_pass"(rx1460_pos, "name")
    if_null rx1460_debug, debug_1063
    rx1460_cur."!cursor_debug"("PASS", "name", " at pos=", rx1460_pos)
  debug_1063:
    .return (rx1460_cur)
  rx1460_restart:
    if_null rx1460_debug, debug_1064
    rx1460_cur."!cursor_debug"("NEXT", "name")
  debug_1064:
  rx1460_fail:
    (rx1460_rep, rx1460_pos, $I10, $P10) = rx1460_cur."!mark_fail"(0)
    lt rx1460_pos, -1, rx1460_done
    eq rx1460_pos, -1, rx1460_fail
    jump $I10
  rx1460_done:
    rx1460_cur."!cursor_fail"()
    if_null rx1460_debug, debug_1065
    rx1460_cur."!cursor_debug"("FAIL", "name")
  debug_1065:
    .return (rx1460_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__name"  :subid("44_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 670
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "deflongname"  :subid("45_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 672
    .local string rx1466_tgt
    .local int rx1466_pos
    .local int rx1466_off
    .local int rx1466_eos
    .local int rx1466_rep
    .local pmc rx1466_cur
    .local pmc rx1466_debug
    (rx1466_cur, rx1466_pos, rx1466_tgt, $I10) = self."!cursor_start"()
    rx1466_cur."!cursor_caparray"("colonpair")
    .lex unicode:"$\x{a2}", rx1466_cur
    .local pmc match
    .lex "$/", match
    length rx1466_eos, rx1466_tgt
    gt rx1466_pos, rx1466_eos, rx1466_done
    set rx1466_off, 0
    lt rx1466_pos, 2, rx1466_start
    sub rx1466_off, rx1466_pos, 1
    substr rx1466_tgt, rx1466_tgt, rx1466_off
  rx1466_start:
    eq $I10, 1, rx1466_restart
    if_null rx1466_debug, debug_1066
    rx1466_cur."!cursor_debug"("START", "deflongname")
  debug_1066:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1467_done
    goto rxscan1467_scan
  rxscan1467_loop:
    (rx1466_pos) = rx1466_cur."from"()
    inc rx1466_pos
    rx1466_cur."!cursor_from"(rx1466_pos)
    ge rx1466_pos, rx1466_eos, rxscan1467_done
  rxscan1467_scan:
    set_addr $I10, rxscan1467_loop
    rx1466_cur."!mark_push"(0, rx1466_pos, $I10)
  rxscan1467_done:
.annotate 'line', 673
  # rx subrule "identifier" subtype=capture negate=
    rx1466_cur."!cursor_pos"(rx1466_pos)
    $P10 = rx1466_cur."identifier"()
    unless $P10, rx1466_fail
    rx1466_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx1466_pos = $P10."pos"()
  # rx rxquantr1468 ** 0..1
    set_addr $I10, rxquantr1468_done
    rx1466_cur."!mark_push"(0, rx1466_pos, $I10)
  rxquantr1468_loop:
  # rx subrule "colonpair" subtype=capture negate=
    rx1466_cur."!cursor_pos"(rx1466_pos)
    $P10 = rx1466_cur."colonpair"()
    unless $P10, rx1466_fail
    goto rxsubrule1469_pass
  rxsubrule1469_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1466_fail
  rxsubrule1469_pass:
    set_addr $I10, rxsubrule1469_back
    rx1466_cur."!mark_push"(0, rx1466_pos, $I10, $P10)
    $P10."!cursor_names"("colonpair")
    rx1466_pos = $P10."pos"()
    set_addr $I10, rxquantr1468_done
    (rx1466_rep) = rx1466_cur."!mark_commit"($I10)
  rxquantr1468_done:
.annotate 'line', 672
  # rx pass
    rx1466_cur."!cursor_pass"(rx1466_pos, "deflongname")
    if_null rx1466_debug, debug_1067
    rx1466_cur."!cursor_debug"("PASS", "deflongname", " at pos=", rx1466_pos)
  debug_1067:
    .return (rx1466_cur)
  rx1466_restart:
    if_null rx1466_debug, debug_1068
    rx1466_cur."!cursor_debug"("NEXT", "deflongname")
  debug_1068:
  rx1466_fail:
    (rx1466_rep, rx1466_pos, $I10, $P10) = rx1466_cur."!mark_fail"(0)
    lt rx1466_pos, -1, rx1466_done
    eq rx1466_pos, -1, rx1466_fail
    jump $I10
  rx1466_done:
    rx1466_cur."!cursor_fail"()
    if_null rx1466_debug, debug_1069
    rx1466_cur."!cursor_debug"("FAIL", "deflongname")
  debug_1069:
    .return (rx1466_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__deflongname"  :subid("46_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 672
    $P103 = self."!PREFIX__!subrule"("identifier", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "ENDSTMT"  :subid("47_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 676
    .local string rx1472_tgt
    .local int rx1472_pos
    .local int rx1472_off
    .local int rx1472_eos
    .local int rx1472_rep
    .local pmc rx1472_cur
    .local pmc rx1472_debug
    (rx1472_cur, rx1472_pos, rx1472_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1472_cur
    .local pmc match
    .lex "$/", match
    length rx1472_eos, rx1472_tgt
    gt rx1472_pos, rx1472_eos, rx1472_done
    set rx1472_off, 0
    lt rx1472_pos, 2, rx1472_start
    sub rx1472_off, rx1472_pos, 1
    substr rx1472_tgt, rx1472_tgt, rx1472_off
  rx1472_start:
    eq $I10, 1, rx1472_restart
    if_null rx1472_debug, debug_1070
    rx1472_cur."!cursor_debug"("START", "ENDSTMT")
  debug_1070:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1473_done
    goto rxscan1473_scan
  rxscan1473_loop:
    (rx1472_pos) = rx1472_cur."from"()
    inc rx1472_pos
    rx1472_cur."!cursor_from"(rx1472_pos)
    ge rx1472_pos, rx1472_eos, rxscan1473_done
  rxscan1473_scan:
    set_addr $I10, rxscan1473_loop
    rx1472_cur."!mark_push"(0, rx1472_pos, $I10)
  rxscan1473_done:
.annotate 'line', 680
  # rx rxquantr1474 ** 0..1
    set_addr $I10, rxquantr1474_done
    rx1472_cur."!mark_push"(0, rx1472_pos, $I10)
  rxquantr1474_loop:
  alt1475_0:
.annotate 'line', 677
    set_addr $I10, alt1475_1
    rx1472_cur."!mark_push"(0, rx1472_pos, $I10)
.annotate 'line', 678
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1472_pos, rx1472_off
    set rx1472_rep, 0
    sub $I12, rx1472_eos, rx1472_pos
  rxenumcharlistq1476_loop:
    le $I12, 0, rxenumcharlistq1476_done
    substr $S10, rx1472_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1476_done
    inc rx1472_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1476_loop
  rxenumcharlistq1476_done:
    add rx1472_pos, rx1472_pos, rx1472_rep
  # rxanchor eol
    sub $I10, rx1472_pos, rx1472_off
    is_cclass $I11, .CCLASS_NEWLINE, rx1472_tgt, $I10
    if $I11, rxanchor1477_done
    ne rx1472_pos, rx1472_eos, rx1472_fail
    eq rx1472_pos, 0, rxanchor1477_done
    dec $I10
    is_cclass $I11, .CCLASS_NEWLINE, rx1472_tgt, $I10
    if $I11, rx1472_fail
  rxanchor1477_done:
  # rx subrule "ws" subtype=method negate=
    rx1472_cur."!cursor_pos"(rx1472_pos)
    $P10 = rx1472_cur."ws"()
    unless $P10, rx1472_fail
    rx1472_pos = $P10."pos"()
  # rx subrule "MARKER" subtype=zerowidth negate=
    rx1472_cur."!cursor_pos"(rx1472_pos)
    $P10 = rx1472_cur."MARKER"("endstmt")
    unless $P10, rx1472_fail
    goto alt1475_end
  alt1475_1:
.annotate 'line', 679
  # rx rxquantr1478 ** 0..1
    set_addr $I10, rxquantr1478_done
    rx1472_cur."!mark_push"(0, rx1472_pos, $I10)
  rxquantr1478_loop:
  # rx subrule "unv" subtype=method negate=
    rx1472_cur."!cursor_pos"(rx1472_pos)
    $P10 = rx1472_cur."unv"()
    unless $P10, rx1472_fail
    goto rxsubrule1479_pass
  rxsubrule1479_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1472_fail
  rxsubrule1479_pass:
    set_addr $I10, rxsubrule1479_back
    rx1472_cur."!mark_push"(0, rx1472_pos, $I10, $P10)
    rx1472_pos = $P10."pos"()
    set_addr $I10, rxquantr1478_done
    (rx1472_rep) = rx1472_cur."!mark_commit"($I10)
  rxquantr1478_done:
  # rxanchor eol
    sub $I10, rx1472_pos, rx1472_off
    is_cclass $I11, .CCLASS_NEWLINE, rx1472_tgt, $I10
    if $I11, rxanchor1480_done
    ne rx1472_pos, rx1472_eos, rx1472_fail
    eq rx1472_pos, 0, rxanchor1480_done
    dec $I10
    is_cclass $I11, .CCLASS_NEWLINE, rx1472_tgt, $I10
    if $I11, rx1472_fail
  rxanchor1480_done:
  # rx subrule "ws" subtype=method negate=
    rx1472_cur."!cursor_pos"(rx1472_pos)
    $P10 = rx1472_cur."ws"()
    unless $P10, rx1472_fail
    rx1472_pos = $P10."pos"()
  # rx subrule "MARKER" subtype=zerowidth negate=
    rx1472_cur."!cursor_pos"(rx1472_pos)
    $P10 = rx1472_cur."MARKER"("endstmt")
    unless $P10, rx1472_fail
  alt1475_end:
.annotate 'line', 680
    set_addr $I10, rxquantr1474_done
    (rx1472_rep) = rx1472_cur."!mark_commit"($I10)
  rxquantr1474_done:
.annotate 'line', 676
  # rx pass
    rx1472_cur."!cursor_pass"(rx1472_pos, "ENDSTMT")
    if_null rx1472_debug, debug_1071
    rx1472_cur."!cursor_debug"("PASS", "ENDSTMT", " at pos=", rx1472_pos)
  debug_1071:
    .return (rx1472_cur)
  rx1472_restart:
    if_null rx1472_debug, debug_1072
    rx1472_cur."!cursor_debug"("NEXT", "ENDSTMT")
  debug_1072:
  rx1472_fail:
    (rx1472_rep, rx1472_pos, $I10, $P10) = rx1472_cur."!mark_fail"(0)
    lt rx1472_pos, -1, rx1472_done
    eq rx1472_pos, -1, rx1472_fail
    jump $I10
  rx1472_done:
    rx1472_cur."!cursor_fail"()
    if_null rx1472_debug, debug_1073
    rx1472_cur."!cursor_debug"("FAIL", "ENDSTMT")
  debug_1073:
    .return (rx1472_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__ENDSTMT"  :subid("48_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 676
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "ws"  :subid("49_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 683
    .local string rx1483_tgt
    .local int rx1483_pos
    .local int rx1483_off
    .local int rx1483_eos
    .local int rx1483_rep
    .local pmc rx1483_cur
    .local pmc rx1483_debug
    (rx1483_cur, rx1483_pos, rx1483_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1483_cur
    .local pmc match
    .lex "$/", match
    length rx1483_eos, rx1483_tgt
    gt rx1483_pos, rx1483_eos, rx1483_done
    set rx1483_off, 0
    lt rx1483_pos, 2, rx1483_start
    sub rx1483_off, rx1483_pos, 1
    substr rx1483_tgt, rx1483_tgt, rx1483_off
  rx1483_start:
    eq $I10, 1, rx1483_restart
    if_null rx1483_debug, debug_1074
    rx1483_cur."!cursor_debug"("START", "ws")
  debug_1074:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1484_done
    goto rxscan1484_scan
  rxscan1484_loop:
    (rx1483_pos) = rx1483_cur."from"()
    inc rx1483_pos
    rx1483_cur."!cursor_from"(rx1483_pos)
    ge rx1483_pos, rx1483_eos, rxscan1484_done
  rxscan1484_scan:
    set_addr $I10, rxscan1484_loop
    rx1483_cur."!mark_push"(0, rx1483_pos, $I10)
  rxscan1484_done:
  alt1485_0:
    set_addr $I10, alt1485_1
    rx1483_cur."!mark_push"(0, rx1483_pos, $I10)
.annotate 'line', 684
  # rx subrule "MARKED" subtype=zerowidth negate=
    rx1483_cur."!cursor_pos"(rx1483_pos)
    $P10 = rx1483_cur."MARKED"("ws")
    unless $P10, rx1483_fail
    goto alt1485_end
  alt1485_1:
.annotate 'line', 685
  # rx subrule "ww" subtype=zerowidth negate=1
    rx1483_cur."!cursor_pos"(rx1483_pos)
    $P10 = rx1483_cur."ww"()
    if $P10, rx1483_fail
.annotate 'line', 690
  # rx rxquantr1486 ** 0..*
    set_addr $I10, rxquantr1486_done
    rx1483_cur."!mark_push"(0, rx1483_pos, $I10)
  rxquantr1486_loop:
  alt1487_0:
.annotate 'line', 686
    set_addr $I10, alt1487_1
    rx1483_cur."!mark_push"(0, rx1483_pos, $I10)
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1483_pos, rx1483_off
    set rx1483_rep, 0
    sub $I12, rx1483_eos, rx1483_pos
  rxenumcharlistq1488_loop:
    le $I12, 0, rxenumcharlistq1488_done
    substr $S10, rx1483_tgt, $I10, 1
    index $I11, unicode:"\n\x{b}\f\r\x{85}\u2028\u2029", $S10
    lt $I11, 0, rxenumcharlistq1488_done
    inc rx1483_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1488_loop
  rxenumcharlistq1488_done:
    lt rx1483_rep, 1, rx1483_fail
    add rx1483_pos, rx1483_pos, rx1483_rep
    goto alt1487_end
  alt1487_1:
    set_addr $I10, alt1487_2
    rx1483_cur."!mark_push"(0, rx1483_pos, $I10)
.annotate 'line', 687
  # rx literal  "#"
    add $I11, rx1483_pos, 1
    gt $I11, rx1483_eos, rx1483_fail
    sub $I11, rx1483_pos, rx1483_off
    ord $I11, rx1483_tgt, $I11
    ne $I11, 35, rx1483_fail
    add rx1483_pos, 1
  # rx charclass_q N r 0..-1
    sub $I10, rx1483_pos, rx1483_off
    find_cclass $I11, .CCLASS_NEWLINE, rx1483_tgt, $I10, rx1483_eos
    add rx1483_pos, rx1483_off, $I11
    goto alt1487_end
  alt1487_2:
    set_addr $I10, alt1487_3
    rx1483_cur."!mark_push"(0, rx1483_pos, $I10)
.annotate 'line', 688
  # rxanchor bol
    eq rx1483_pos, 0, rxanchor1489_done
    ge rx1483_pos, rx1483_eos, rx1483_fail
    sub $I10, rx1483_pos, rx1483_off
    dec $I10
    is_cclass $I11, .CCLASS_NEWLINE, rx1483_tgt, $I10
    unless $I11, rx1483_fail
  rxanchor1489_done:
  # rx subrule "pod_comment" subtype=method negate=
    rx1483_cur."!cursor_pos"(rx1483_pos)
    $P10 = rx1483_cur."pod_comment"()
    unless $P10, rx1483_fail
    rx1483_pos = $P10."pos"()
    goto alt1487_end
  alt1487_3:
.annotate 'line', 689
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1483_pos, rx1483_off
    set rx1483_rep, 0
    sub $I12, rx1483_eos, rx1483_pos
  rxenumcharlistq1490_loop:
    le $I12, 0, rxenumcharlistq1490_done
    substr $S10, rx1483_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1490_done
    inc rx1483_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1490_loop
  rxenumcharlistq1490_done:
    lt rx1483_rep, 1, rx1483_fail
    add rx1483_pos, rx1483_pos, rx1483_rep
  alt1487_end:
.annotate 'line', 690
    set_addr $I10, rxquantr1486_done
    (rx1483_rep) = rx1483_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1486_done
    rx1483_cur."!mark_push"(rx1483_rep, rx1483_pos, $I10)
    goto rxquantr1486_loop
  rxquantr1486_done:
.annotate 'line', 691
  # rx subrule "MARKER" subtype=zerowidth negate=
    rx1483_cur."!cursor_pos"(rx1483_pos)
    $P10 = rx1483_cur."MARKER"("ws")
    unless $P10, rx1483_fail
  alt1485_end:
.annotate 'line', 683
  # rx pass
    rx1483_cur."!cursor_pass"(rx1483_pos, "ws")
    if_null rx1483_debug, debug_1075
    rx1483_cur."!cursor_debug"("PASS", "ws", " at pos=", rx1483_pos)
  debug_1075:
    .return (rx1483_cur)
  rx1483_restart:
    if_null rx1483_debug, debug_1076
    rx1483_cur."!cursor_debug"("NEXT", "ws")
  debug_1076:
  rx1483_fail:
    (rx1483_rep, rx1483_pos, $I10, $P10) = rx1483_cur."!mark_fail"(0)
    lt rx1483_pos, -1, rx1483_done
    eq rx1483_pos, -1, rx1483_fail
    jump $I10
  rx1483_done:
    rx1483_cur."!cursor_fail"()
    if_null rx1483_debug, debug_1077
    rx1483_cur."!cursor_debug"("FAIL", "ws")
  debug_1077:
    .return (rx1483_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__ws"  :subid("50_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 683
    new $P103, "ResizablePMCArray"
    push $P103, ""
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "unv"  :subid("51_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 694
    .const 'Sub' $P1498 = "572_1334921493.34" 
    capture_lex $P1498
    .local string rx1493_tgt
    .local int rx1493_pos
    .local int rx1493_off
    .local int rx1493_eos
    .local int rx1493_rep
    .local pmc rx1493_cur
    .local pmc rx1493_debug
    (rx1493_cur, rx1493_pos, rx1493_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1493_cur
    .local pmc match
    .lex "$/", match
    length rx1493_eos, rx1493_tgt
    gt rx1493_pos, rx1493_eos, rx1493_done
    set rx1493_off, 0
    lt rx1493_pos, 2, rx1493_start
    sub rx1493_off, rx1493_pos, 1
    substr rx1493_tgt, rx1493_tgt, rx1493_off
  rx1493_start:
    eq $I10, 1, rx1493_restart
    if_null rx1493_debug, debug_1078
    rx1493_cur."!cursor_debug"("START", "unv")
  debug_1078:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1494_done
    goto rxscan1494_scan
  rxscan1494_loop:
    (rx1493_pos) = rx1493_cur."from"()
    inc rx1493_pos
    rx1493_cur."!cursor_from"(rx1493_pos)
    ge rx1493_pos, rx1493_eos, rxscan1494_done
  rxscan1494_scan:
    set_addr $I10, rxscan1494_loop
    rx1493_cur."!mark_push"(0, rx1493_pos, $I10)
  rxscan1494_done:
  alt1495_0:
.annotate 'line', 696
    set_addr $I10, alt1495_1
    rx1493_cur."!mark_push"(0, rx1493_pos, $I10)
.annotate 'line', 697
  # rxanchor bol
    eq rx1493_pos, 0, rxanchor1496_done
    ge rx1493_pos, rx1493_eos, rx1493_fail
    sub $I10, rx1493_pos, rx1493_off
    dec $I10
    is_cclass $I11, .CCLASS_NEWLINE, rx1493_tgt, $I10
    unless $I11, rx1493_fail
  rxanchor1496_done:
  # rx subrule "before" subtype=zerowidth negate=
    rx1493_cur."!cursor_pos"(rx1493_pos)
    .const 'Sub' $P1498 = "572_1334921493.34" 
    capture_lex $P1498
    $P10 = rx1493_cur."before"($P1498)
    unless $P10, rx1493_fail
  # rx subrule "pod_comment" subtype=method negate=
    rx1493_cur."!cursor_pos"(rx1493_pos)
    $P10 = rx1493_cur."pod_comment"()
    unless $P10, rx1493_fail
    rx1493_pos = $P10."pos"()
    goto alt1495_end
  alt1495_1:
    set_addr $I10, alt1495_2
    rx1493_cur."!mark_push"(0, rx1493_pos, $I10)
.annotate 'line', 698
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1493_pos, rx1493_off
    set rx1493_rep, 0
    sub $I12, rx1493_eos, rx1493_pos
  rxenumcharlistq1503_loop:
    le $I12, 0, rxenumcharlistq1503_done
    substr $S10, rx1493_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1503_done
    inc rx1493_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1503_loop
  rxenumcharlistq1503_done:
    add rx1493_pos, rx1493_pos, rx1493_rep
  # rx literal  "#"
    add $I11, rx1493_pos, 1
    gt $I11, rx1493_eos, rx1493_fail
    sub $I11, rx1493_pos, rx1493_off
    ord $I11, rx1493_tgt, $I11
    ne $I11, 35, rx1493_fail
    add rx1493_pos, 1
  # rx charclass_q N r 0..-1
    sub $I10, rx1493_pos, rx1493_off
    find_cclass $I11, .CCLASS_NEWLINE, rx1493_tgt, $I10, rx1493_eos
    add rx1493_pos, rx1493_off, $I11
    goto alt1495_end
  alt1495_2:
.annotate 'line', 699
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1493_pos, rx1493_off
    set rx1493_rep, 0
    sub $I12, rx1493_eos, rx1493_pos
  rxenumcharlistq1504_loop:
    le $I12, 0, rxenumcharlistq1504_done
    substr $S10, rx1493_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1504_done
    inc rx1493_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1504_loop
  rxenumcharlistq1504_done:
    lt rx1493_rep, 1, rx1493_fail
    add rx1493_pos, rx1493_pos, rx1493_rep
  alt1495_end:
.annotate 'line', 694
  # rx pass
    rx1493_cur."!cursor_pass"(rx1493_pos, "unv")
    if_null rx1493_debug, debug_1083
    rx1493_cur."!cursor_debug"("PASS", "unv", " at pos=", rx1493_pos)
  debug_1083:
    .return (rx1493_cur)
  rx1493_restart:
    if_null rx1493_debug, debug_1084
    rx1493_cur."!cursor_debug"("NEXT", "unv")
  debug_1084:
  rx1493_fail:
    (rx1493_rep, rx1493_pos, $I10, $P10) = rx1493_cur."!mark_fail"(0)
    lt rx1493_pos, -1, rx1493_done
    eq rx1493_pos, -1, rx1493_fail
    jump $I10
  rx1493_done:
    rx1493_cur."!cursor_fail"()
    if_null rx1493_debug, debug_1085
    rx1493_cur."!cursor_debug"("FAIL", "unv")
  debug_1085:
    .return (rx1493_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1497"  :anon :subid("572_1334921493.34") :method :outer("51_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 697
    .local string rx1499_tgt
    .local int rx1499_pos
    .local int rx1499_off
    .local int rx1499_eos
    .local int rx1499_rep
    .local pmc rx1499_cur
    .local pmc rx1499_debug
    (rx1499_cur, rx1499_pos, rx1499_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1499_cur
    .local pmc match
    .lex "$/", match
    length rx1499_eos, rx1499_tgt
    gt rx1499_pos, rx1499_eos, rx1499_done
    set rx1499_off, 0
    lt rx1499_pos, 2, rx1499_start
    sub rx1499_off, rx1499_pos, 1
    substr rx1499_tgt, rx1499_tgt, rx1499_off
  rx1499_start:
    eq $I10, 1, rx1499_restart
    if_null rx1499_debug, debug_1079
    rx1499_cur."!cursor_debug"("START", "")
  debug_1079:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1500_done
    goto rxscan1500_scan
  rxscan1500_loop:
    (rx1499_pos) = rx1499_cur."from"()
    inc rx1499_pos
    rx1499_cur."!cursor_from"(rx1499_pos)
    ge rx1499_pos, rx1499_eos, rxscan1500_done
  rxscan1500_scan:
    set_addr $I10, rxscan1500_loop
    rx1499_cur."!mark_push"(0, rx1499_pos, $I10)
  rxscan1500_done:
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1499_pos, rx1499_off
    set rx1499_rep, 0
    sub $I12, rx1499_eos, rx1499_pos
  rxenumcharlistq1501_loop:
    le $I12, 0, rxenumcharlistq1501_done
    substr $S10, rx1499_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1501_done
    inc rx1499_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1501_loop
  rxenumcharlistq1501_done:
    add rx1499_pos, rx1499_pos, rx1499_rep
  # rx literal  "="
    add $I11, rx1499_pos, 1
    gt $I11, rx1499_eos, rx1499_fail
    sub $I11, rx1499_pos, rx1499_off
    ord $I11, rx1499_tgt, $I11
    ne $I11, 61, rx1499_fail
    add rx1499_pos, 1
  alt1502_0:
    set_addr $I10, alt1502_1
    rx1499_cur."!mark_push"(0, rx1499_pos, $I10)
  # rx charclass w
    ge rx1499_pos, rx1499_eos, rx1499_fail
    sub $I10, rx1499_pos, rx1499_off
    is_cclass $I11, .CCLASS_WORD, rx1499_tgt, $I10
    unless $I11, rx1499_fail
    inc rx1499_pos
    goto alt1502_end
  alt1502_1:
  # rx literal  "\\"
    add $I11, rx1499_pos, 1
    gt $I11, rx1499_eos, rx1499_fail
    sub $I11, rx1499_pos, rx1499_off
    ord $I11, rx1499_tgt, $I11
    ne $I11, 92, rx1499_fail
    add rx1499_pos, 1
  alt1502_end:
  # rx pass
    rx1499_cur."!cursor_pass"(rx1499_pos, "")
    if_null rx1499_debug, debug_1080
    rx1499_cur."!cursor_debug"("PASS", "", " at pos=", rx1499_pos)
  debug_1080:
    .return (rx1499_cur)
  rx1499_restart:
    if_null rx1499_debug, debug_1081
    rx1499_cur."!cursor_debug"("NEXT", "")
  debug_1081:
  rx1499_fail:
    (rx1499_rep, rx1499_pos, $I10, $P10) = rx1499_cur."!mark_fail"(0)
    lt rx1499_pos, -1, rx1499_done
    eq rx1499_pos, -1, rx1499_fail
    jump $I10
  rx1499_done:
    rx1499_cur."!cursor_fail"()
    if_null rx1499_debug, debug_1082
    rx1499_cur."!cursor_debug"("FAIL", "")
  debug_1082:
    .return (rx1499_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__unv"  :subid("52_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 694
    new $P103, "ResizablePMCArray"
    push $P103, ""
    push $P103, ""
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "pod_comment"  :subid("53_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 703
    .const 'Sub' $P1535 = "573_1334921493.34" 
    capture_lex $P1535
    .local string rx1507_tgt
    .local int rx1507_pos
    .local int rx1507_off
    .local int rx1507_eos
    .local int rx1507_rep
    .local pmc rx1507_cur
    .local pmc rx1507_debug
    (rx1507_cur, rx1507_pos, rx1507_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1507_cur
    .local pmc match
    .lex "$/", match
    length rx1507_eos, rx1507_tgt
    gt rx1507_pos, rx1507_eos, rx1507_done
    set rx1507_off, 0
    lt rx1507_pos, 2, rx1507_start
    sub rx1507_off, rx1507_pos, 1
    substr rx1507_tgt, rx1507_tgt, rx1507_off
  rx1507_start:
    eq $I10, 1, rx1507_restart
    if_null rx1507_debug, debug_1086
    rx1507_cur."!cursor_debug"("START", "pod_comment")
  debug_1086:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1508_done
    goto rxscan1508_scan
  rxscan1508_loop:
    (rx1507_pos) = rx1507_cur."from"()
    inc rx1507_pos
    rx1507_cur."!cursor_from"(rx1507_pos)
    ge rx1507_pos, rx1507_eos, rxscan1508_done
  rxscan1508_scan:
    set_addr $I10, rxscan1508_loop
    rx1507_cur."!mark_push"(0, rx1507_pos, $I10)
  rxscan1508_done:
.annotate 'line', 704
  # rxanchor bol
    eq rx1507_pos, 0, rxanchor1509_done
    ge rx1507_pos, rx1507_eos, rx1507_fail
    sub $I10, rx1507_pos, rx1507_off
    dec $I10
    is_cclass $I11, .CCLASS_NEWLINE, rx1507_tgt, $I10
    unless $I11, rx1507_fail
  rxanchor1509_done:
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1507_pos, rx1507_off
    set rx1507_rep, 0
    sub $I12, rx1507_eos, rx1507_pos
  rxenumcharlistq1510_loop:
    le $I12, 0, rxenumcharlistq1510_done
    substr $S10, rx1507_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1510_done
    inc rx1507_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1510_loop
  rxenumcharlistq1510_done:
    add rx1507_pos, rx1507_pos, rx1507_rep
  # rx literal  "="
    add $I11, rx1507_pos, 1
    gt $I11, rx1507_eos, rx1507_fail
    sub $I11, rx1507_pos, rx1507_off
    ord $I11, rx1507_tgt, $I11
    ne $I11, 61, rx1507_fail
    add rx1507_pos, 1
  alt1511_0:
.annotate 'line', 705
    set_addr $I10, alt1511_1
    rx1507_cur."!mark_push"(0, rx1507_pos, $I10)
.annotate 'line', 706
  # rx literal  "begin"
    add $I11, rx1507_pos, 5
    gt $I11, rx1507_eos, rx1507_fail
    sub $I11, rx1507_pos, rx1507_off
    substr $S10, rx1507_tgt, $I11, 5
    ne $S10, "begin", rx1507_fail
    add rx1507_pos, 5
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1507_pos, rx1507_off
    set rx1507_rep, 0
    sub $I12, rx1507_eos, rx1507_pos
  rxenumcharlistq1512_loop:
    le $I12, 0, rxenumcharlistq1512_done
    substr $S10, rx1507_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1512_done
    inc rx1507_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1512_loop
  rxenumcharlistq1512_done:
    lt rx1507_rep, 1, rx1507_fail
    add rx1507_pos, rx1507_pos, rx1507_rep
  # rx literal  "END"
    add $I11, rx1507_pos, 3
    gt $I11, rx1507_eos, rx1507_fail
    sub $I11, rx1507_pos, rx1507_off
    substr $S10, rx1507_tgt, $I11, 3
    ne $S10, "END", rx1507_fail
    add rx1507_pos, 3
  # rxanchor rwb
    le rx1507_pos, 0, rx1507_fail
    sub $I10, rx1507_pos, rx1507_off
    is_cclass $I11, .CCLASS_WORD, rx1507_tgt, $I10
    if $I11, rx1507_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx1507_tgt, $I10
    unless $I11, rx1507_fail
  alt1513_0:
.annotate 'line', 707
    set_addr $I10, alt1513_1
    rx1507_cur."!mark_push"(0, rx1507_pos, $I10)
  # rx rxquantf1514 ** 0..*
    set_addr $I10, rxquantf1514_loop
    rx1507_cur."!mark_push"(0, rx1507_pos, $I10)
    goto rxquantf1514_done
  rxquantf1514_loop:
  # rx charclass .
    ge rx1507_pos, rx1507_eos, rx1507_fail
    inc rx1507_pos
    set_addr $I10, rxquantf1514_loop
    rx1507_cur."!mark_push"(rx1507_rep, rx1507_pos, $I10)
  rxquantf1514_done:
  # rx charclass nl
    ge rx1507_pos, rx1507_eos, rx1507_fail
    sub $I10, rx1507_pos, rx1507_off
    is_cclass $I11, .CCLASS_NEWLINE, rx1507_tgt, $I10
    unless $I11, rx1507_fail
    substr $S10, rx1507_tgt, $I10, 2
    iseq $I11, $S10, "\r\n"
    add rx1507_pos, $I11
    inc rx1507_pos
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1507_pos, rx1507_off
    set rx1507_rep, 0
    sub $I12, rx1507_eos, rx1507_pos
  rxenumcharlistq1516_loop:
    le $I12, 0, rxenumcharlistq1516_done
    substr $S10, rx1507_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1516_done
    inc rx1507_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1516_loop
  rxenumcharlistq1516_done:
    add rx1507_pos, rx1507_pos, rx1507_rep
  # rx literal  "=end"
    add $I11, rx1507_pos, 4
    gt $I11, rx1507_eos, rx1507_fail
    sub $I11, rx1507_pos, rx1507_off
    substr $S10, rx1507_tgt, $I11, 4
    ne $S10, "=end", rx1507_fail
    add rx1507_pos, 4
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1507_pos, rx1507_off
    set rx1507_rep, 0
    sub $I12, rx1507_eos, rx1507_pos
  rxenumcharlistq1517_loop:
    le $I12, 0, rxenumcharlistq1517_done
    substr $S10, rx1507_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1517_done
    inc rx1507_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1517_loop
  rxenumcharlistq1517_done:
    lt rx1507_rep, 1, rx1507_fail
    add rx1507_pos, rx1507_pos, rx1507_rep
  # rx literal  "END"
    add $I11, rx1507_pos, 3
    gt $I11, rx1507_eos, rx1507_fail
    sub $I11, rx1507_pos, rx1507_off
    substr $S10, rx1507_tgt, $I11, 3
    ne $S10, "END", rx1507_fail
    add rx1507_pos, 3
  # rxanchor rwb
    le rx1507_pos, 0, rx1507_fail
    sub $I10, rx1507_pos, rx1507_off
    is_cclass $I11, .CCLASS_WORD, rx1507_tgt, $I10
    if $I11, rx1507_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx1507_tgt, $I10
    unless $I11, rx1507_fail
  # rx charclass_q N r 0..-1
    sub $I10, rx1507_pos, rx1507_off
    find_cclass $I11, .CCLASS_NEWLINE, rx1507_tgt, $I10, rx1507_eos
    add rx1507_pos, rx1507_off, $I11
    goto alt1513_end
  alt1513_1:
  # rx charclass_q . r 0..-1
    sub $I10, rx1507_pos, rx1507_off
    find_not_cclass $I11, .CCLASS_ANY, rx1507_tgt, $I10, rx1507_eos
    add rx1507_pos, rx1507_off, $I11
  alt1513_end:
.annotate 'line', 706
    goto alt1511_end
  alt1511_1:
    set_addr $I10, alt1511_2
    rx1507_cur."!mark_push"(0, rx1507_pos, $I10)
.annotate 'line', 708
  # rx literal  "begin"
    add $I11, rx1507_pos, 5
    gt $I11, rx1507_eos, rx1507_fail
    sub $I11, rx1507_pos, rx1507_off
    substr $S10, rx1507_tgt, $I11, 5
    ne $S10, "begin", rx1507_fail
    add rx1507_pos, 5
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1507_pos, rx1507_off
    set rx1507_rep, 0
    sub $I12, rx1507_eos, rx1507_pos
  rxenumcharlistq1518_loop:
    le $I12, 0, rxenumcharlistq1518_done
    substr $S10, rx1507_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1518_done
    inc rx1507_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1518_loop
  rxenumcharlistq1518_done:
    lt rx1507_rep, 1, rx1507_fail
    add rx1507_pos, rx1507_pos, rx1507_rep
  # rx subrule "identifier" subtype=capture negate=
    rx1507_cur."!cursor_pos"(rx1507_pos)
    $P10 = rx1507_cur."identifier"()
    unless $P10, rx1507_fail
    rx1507_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx1507_pos = $P10."pos"()
  alt1519_0:
.annotate 'line', 709
    set_addr $I10, alt1519_1
    rx1507_cur."!mark_push"(0, rx1507_pos, $I10)
.annotate 'line', 710
  # rx rxquantf1520 ** 0..*
    set_addr $I10, rxquantf1520_loop
    rx1507_cur."!mark_push"(0, rx1507_pos, $I10)
    goto rxquantf1520_done
  rxquantf1520_loop:
  # rx charclass .
    ge rx1507_pos, rx1507_eos, rx1507_fail
    inc rx1507_pos
    set_addr $I10, rxquantf1520_loop
    rx1507_cur."!mark_push"(rx1507_rep, rx1507_pos, $I10)
  rxquantf1520_done:
  # rx charclass nl
    ge rx1507_pos, rx1507_eos, rx1507_fail
    sub $I10, rx1507_pos, rx1507_off
    is_cclass $I11, .CCLASS_NEWLINE, rx1507_tgt, $I10
    unless $I11, rx1507_fail
    substr $S10, rx1507_tgt, $I10, 2
    iseq $I11, $S10, "\r\n"
    add rx1507_pos, $I11
    inc rx1507_pos
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1507_pos, rx1507_off
    set rx1507_rep, 0
    sub $I12, rx1507_eos, rx1507_pos
  rxenumcharlistq1522_loop:
    le $I12, 0, rxenumcharlistq1522_done
    substr $S10, rx1507_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1522_done
    inc rx1507_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1522_loop
  rxenumcharlistq1522_done:
    add rx1507_pos, rx1507_pos, rx1507_rep
  # rx literal  "=end"
    add $I11, rx1507_pos, 4
    gt $I11, rx1507_eos, rx1507_fail
    sub $I11, rx1507_pos, rx1507_off
    substr $S10, rx1507_tgt, $I11, 4
    ne $S10, "=end", rx1507_fail
    add rx1507_pos, 4
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1507_pos, rx1507_off
    set rx1507_rep, 0
    sub $I12, rx1507_eos, rx1507_pos
  rxenumcharlistq1523_loop:
    le $I12, 0, rxenumcharlistq1523_done
    substr $S10, rx1507_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1523_done
    inc rx1507_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1523_loop
  rxenumcharlistq1523_done:
    lt rx1507_rep, 1, rx1507_fail
    add rx1507_pos, rx1507_pos, rx1507_rep
  # rx subrule "!BACKREF" subtype=method negate=
    rx1507_cur."!cursor_pos"(rx1507_pos)
    $P10 = rx1507_cur."!BACKREF"("identifier")
    unless $P10, rx1507_fail
    rx1507_pos = $P10."pos"()
  # rxanchor rwb
    le rx1507_pos, 0, rx1507_fail
    sub $I10, rx1507_pos, rx1507_off
    is_cclass $I11, .CCLASS_WORD, rx1507_tgt, $I10
    if $I11, rx1507_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx1507_tgt, $I10
    unless $I11, rx1507_fail
  # rx charclass_q N r 0..-1
    sub $I10, rx1507_pos, rx1507_off
    find_cclass $I11, .CCLASS_NEWLINE, rx1507_tgt, $I10, rx1507_eos
    add rx1507_pos, rx1507_off, $I11
    goto alt1519_end
  alt1519_1:
.annotate 'line', 711
  # rx subrule "panic" subtype=method negate=
    rx1507_cur."!cursor_pos"(rx1507_pos)
    $P10 = rx1507_cur."panic"("=begin without matching =end")
    unless $P10, rx1507_fail
    rx1507_pos = $P10."pos"()
  alt1519_end:
.annotate 'line', 708
    goto alt1511_end
  alt1511_2:
    set_addr $I10, alt1511_3
    rx1507_cur."!mark_push"(0, rx1507_pos, $I10)
.annotate 'line', 713
  # rx literal  "begin"
    add $I11, rx1507_pos, 5
    gt $I11, rx1507_eos, rx1507_fail
    sub $I11, rx1507_pos, rx1507_off
    substr $S10, rx1507_tgt, $I11, 5
    ne $S10, "begin", rx1507_fail
    add rx1507_pos, 5
  # rxanchor rwb
    le rx1507_pos, 0, rx1507_fail
    sub $I10, rx1507_pos, rx1507_off
    is_cclass $I11, .CCLASS_WORD, rx1507_tgt, $I10
    if $I11, rx1507_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx1507_tgt, $I10
    unless $I11, rx1507_fail
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1507_pos, rx1507_off
    set rx1507_rep, 0
    sub $I12, rx1507_eos, rx1507_pos
  rxenumcharlistq1524_loop:
    le $I12, 0, rxenumcharlistq1524_done
    substr $S10, rx1507_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1524_done
    inc rx1507_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1524_loop
  rxenumcharlistq1524_done:
    add rx1507_pos, rx1507_pos, rx1507_rep
  alt1525_0:
.annotate 'line', 714
    set_addr $I10, alt1525_1
    rx1507_cur."!mark_push"(0, rx1507_pos, $I10)
  # rxanchor eol
    sub $I10, rx1507_pos, rx1507_off
    is_cclass $I11, .CCLASS_NEWLINE, rx1507_tgt, $I10
    if $I11, rxanchor1526_done
    ne rx1507_pos, rx1507_eos, rx1507_fail
    eq rx1507_pos, 0, rxanchor1526_done
    dec $I10
    is_cclass $I11, .CCLASS_NEWLINE, rx1507_tgt, $I10
    if $I11, rx1507_fail
  rxanchor1526_done:
    goto alt1525_end
  alt1525_1:
    set_addr $I10, alt1525_2
    rx1507_cur."!mark_push"(0, rx1507_pos, $I10)
  # rx literal  "#"
    add $I11, rx1507_pos, 1
    gt $I11, rx1507_eos, rx1507_fail
    sub $I11, rx1507_pos, rx1507_off
    ord $I11, rx1507_tgt, $I11
    ne $I11, 35, rx1507_fail
    add rx1507_pos, 1
    goto alt1525_end
  alt1525_2:
  # rx subrule "panic" subtype=method negate=
    rx1507_cur."!cursor_pos"(rx1507_pos)
    $P10 = rx1507_cur."panic"("Unrecognized token after =begin")
    unless $P10, rx1507_fail
    rx1507_pos = $P10."pos"()
  alt1525_end:
  alt1527_0:
.annotate 'line', 715
    set_addr $I10, alt1527_1
    rx1507_cur."!mark_push"(0, rx1507_pos, $I10)
.annotate 'line', 716
  # rx rxquantf1528 ** 0..*
    set_addr $I10, rxquantf1528_loop
    rx1507_cur."!mark_push"(0, rx1507_pos, $I10)
    goto rxquantf1528_done
  rxquantf1528_loop:
  # rx charclass .
    ge rx1507_pos, rx1507_eos, rx1507_fail
    inc rx1507_pos
    set_addr $I10, rxquantf1528_loop
    rx1507_cur."!mark_push"(rx1507_rep, rx1507_pos, $I10)
  rxquantf1528_done:
  # rx charclass nl
    ge rx1507_pos, rx1507_eos, rx1507_fail
    sub $I10, rx1507_pos, rx1507_off
    is_cclass $I11, .CCLASS_NEWLINE, rx1507_tgt, $I10
    unless $I11, rx1507_fail
    substr $S10, rx1507_tgt, $I10, 2
    iseq $I11, $S10, "\r\n"
    add rx1507_pos, $I11
    inc rx1507_pos
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1507_pos, rx1507_off
    set rx1507_rep, 0
    sub $I12, rx1507_eos, rx1507_pos
  rxenumcharlistq1530_loop:
    le $I12, 0, rxenumcharlistq1530_done
    substr $S10, rx1507_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1530_done
    inc rx1507_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1530_loop
  rxenumcharlistq1530_done:
    add rx1507_pos, rx1507_pos, rx1507_rep
  # rx literal  "=end"
    add $I11, rx1507_pos, 4
    gt $I11, rx1507_eos, rx1507_fail
    sub $I11, rx1507_pos, rx1507_off
    substr $S10, rx1507_tgt, $I11, 4
    ne $S10, "=end", rx1507_fail
    add rx1507_pos, 4
  # rxanchor rwb
    le rx1507_pos, 0, rx1507_fail
    sub $I10, rx1507_pos, rx1507_off
    is_cclass $I11, .CCLASS_WORD, rx1507_tgt, $I10
    if $I11, rx1507_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx1507_tgt, $I10
    unless $I11, rx1507_fail
  # rx charclass_q N r 0..-1
    sub $I10, rx1507_pos, rx1507_off
    find_cclass $I11, .CCLASS_NEWLINE, rx1507_tgt, $I10, rx1507_eos
    add rx1507_pos, rx1507_off, $I11
    goto alt1527_end
  alt1527_1:
.annotate 'line', 717
  # rx subrule "panic" subtype=method negate=
    rx1507_cur."!cursor_pos"(rx1507_pos)
    $P10 = rx1507_cur."panic"("=begin without matching =end")
    unless $P10, rx1507_fail
    rx1507_pos = $P10."pos"()
  alt1527_end:
.annotate 'line', 713
    goto alt1511_end
  alt1511_3:
    set_addr $I10, alt1511_4
    rx1507_cur."!mark_push"(0, rx1507_pos, $I10)
.annotate 'line', 719
  # rx subrule "identifier" subtype=capture negate=
    rx1507_cur."!cursor_pos"(rx1507_pos)
    $P10 = rx1507_cur."identifier"()
    unless $P10, rx1507_fail
    rx1507_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx1507_pos = $P10."pos"()
.annotate 'line', 720
  # rx rxquantf1531 ** 0..*
    set_addr $I10, rxquantf1531_loop
    rx1507_cur."!mark_push"(0, rx1507_pos, $I10)
    goto rxquantf1531_done
  rxquantf1531_loop:
  # rx charclass .
    ge rx1507_pos, rx1507_eos, rx1507_fail
    inc rx1507_pos
    set_addr $I10, rxquantf1531_loop
    rx1507_cur."!mark_push"(rx1507_rep, rx1507_pos, $I10)
  rxquantf1531_done:
  # rxanchor bol
    eq rx1507_pos, 0, rxanchor1533_done
    ge rx1507_pos, rx1507_eos, rx1507_fail
    sub $I10, rx1507_pos, rx1507_off
    dec $I10
    is_cclass $I11, .CCLASS_NEWLINE, rx1507_tgt, $I10
    unless $I11, rx1507_fail
  rxanchor1533_done:
  # rx subrule "before" subtype=zerowidth negate=
    rx1507_cur."!cursor_pos"(rx1507_pos)
    .const 'Sub' $P1535 = "573_1334921493.34" 
    capture_lex $P1535
    $P10 = rx1507_cur."before"($P1535)
    unless $P10, rx1507_fail
.annotate 'line', 719
    goto alt1511_end
  alt1511_4:
  alt1541_0:
.annotate 'line', 726
    set_addr $I10, alt1541_1
    rx1507_cur."!mark_push"(0, rx1507_pos, $I10)
  # rx charclass s
    ge rx1507_pos, rx1507_eos, rx1507_fail
    sub $I10, rx1507_pos, rx1507_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1507_tgt, $I10
    unless $I11, rx1507_fail
    inc rx1507_pos
    goto alt1541_end
  alt1541_1:
  # rx subrule "panic" subtype=method negate=
    rx1507_cur."!cursor_pos"(rx1507_pos)
    $P10 = rx1507_cur."panic"("Illegal pod directive")
    unless $P10, rx1507_fail
    rx1507_pos = $P10."pos"()
  alt1541_end:
.annotate 'line', 727
  # rx charclass_q N r 0..-1
    sub $I10, rx1507_pos, rx1507_off
    find_cclass $I11, .CCLASS_NEWLINE, rx1507_tgt, $I10, rx1507_eos
    add rx1507_pos, rx1507_off, $I11
  alt1511_end:
.annotate 'line', 703
  # rx pass
    rx1507_cur."!cursor_pass"(rx1507_pos, "pod_comment")
    if_null rx1507_debug, debug_1091
    rx1507_cur."!cursor_debug"("PASS", "pod_comment", " at pos=", rx1507_pos)
  debug_1091:
    .return (rx1507_cur)
  rx1507_restart:
    if_null rx1507_debug, debug_1092
    rx1507_cur."!cursor_debug"("NEXT", "pod_comment")
  debug_1092:
  rx1507_fail:
    (rx1507_rep, rx1507_pos, $I10, $P10) = rx1507_cur."!mark_fail"(0)
    lt rx1507_pos, -1, rx1507_done
    eq rx1507_pos, -1, rx1507_fail
    jump $I10
  rx1507_done:
    rx1507_cur."!cursor_fail"()
    if_null rx1507_debug, debug_1093
    rx1507_cur."!cursor_debug"("FAIL", "pod_comment")
  debug_1093:
    .return (rx1507_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1534"  :anon :subid("573_1334921493.34") :method :outer("53_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 720
    .local string rx1536_tgt
    .local int rx1536_pos
    .local int rx1536_off
    .local int rx1536_eos
    .local int rx1536_rep
    .local pmc rx1536_cur
    .local pmc rx1536_debug
    (rx1536_cur, rx1536_pos, rx1536_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1536_cur
    .local pmc match
    .lex "$/", match
    length rx1536_eos, rx1536_tgt
    gt rx1536_pos, rx1536_eos, rx1536_done
    set rx1536_off, 0
    lt rx1536_pos, 2, rx1536_start
    sub rx1536_off, rx1536_pos, 1
    substr rx1536_tgt, rx1536_tgt, rx1536_off
  rx1536_start:
    eq $I10, 1, rx1536_restart
    if_null rx1536_debug, debug_1087
    rx1536_cur."!cursor_debug"("START", "")
  debug_1087:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1537_done
    goto rxscan1537_scan
  rxscan1537_loop:
    (rx1536_pos) = rx1536_cur."from"()
    inc rx1536_pos
    rx1536_cur."!cursor_from"(rx1536_pos)
    ge rx1536_pos, rx1536_eos, rxscan1537_done
  rxscan1537_scan:
    set_addr $I10, rxscan1537_loop
    rx1536_cur."!mark_push"(0, rx1536_pos, $I10)
  rxscan1537_done:
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1536_pos, rx1536_off
    set rx1536_rep, 0
    sub $I12, rx1536_eos, rx1536_pos
  rxenumcharlistq1538_loop:
    le $I12, 0, rxenumcharlistq1538_done
    substr $S10, rx1536_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1538_done
    inc rx1536_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1538_loop
  rxenumcharlistq1538_done:
    add rx1536_pos, rx1536_pos, rx1536_rep
  alt1539_0:
    set_addr $I10, alt1539_1
    rx1536_cur."!mark_push"(0, rx1536_pos, $I10)
.annotate 'line', 721
  # rx literal  "="
    add $I11, rx1536_pos, 1
    gt $I11, rx1536_eos, rx1536_fail
    sub $I11, rx1536_pos, rx1536_off
    ord $I11, rx1536_tgt, $I11
    ne $I11, 61, rx1536_fail
    add rx1536_pos, 1
.annotate 'line', 723
  # rx rxquantr1540 ** 0..1
    set_addr $I10, rxquantr1540_done
    rx1536_cur."!mark_push"(0, rx1536_pos, $I10)
  rxquantr1540_loop:
.annotate 'line', 722
  # rx literal  "cut"
    add $I11, rx1536_pos, 3
    gt $I11, rx1536_eos, rx1536_fail
    sub $I11, rx1536_pos, rx1536_off
    substr $S10, rx1536_tgt, $I11, 3
    ne $S10, "cut", rx1536_fail
    add rx1536_pos, 3
  # rxanchor rwb
    le rx1536_pos, 0, rx1536_fail
    sub $I10, rx1536_pos, rx1536_off
    is_cclass $I11, .CCLASS_WORD, rx1536_tgt, $I10
    if $I11, rx1536_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx1536_tgt, $I10
    unless $I11, rx1536_fail
.annotate 'line', 723
  # rx subrule "panic" subtype=method negate=
    rx1536_cur."!cursor_pos"(rx1536_pos)
    $P10 = rx1536_cur."panic"("Obsolete pod format, please use =begin/=end instead")
    unless $P10, rx1536_fail
    rx1536_pos = $P10."pos"()
    set_addr $I10, rxquantr1540_done
    (rx1536_rep) = rx1536_cur."!mark_commit"($I10)
  rxquantr1540_done:
.annotate 'line', 720
    goto alt1539_end
  alt1539_1:
.annotate 'line', 724
  # rx charclass nl
    ge rx1536_pos, rx1536_eos, rx1536_fail
    sub $I10, rx1536_pos, rx1536_off
    is_cclass $I11, .CCLASS_NEWLINE, rx1536_tgt, $I10
    unless $I11, rx1536_fail
    substr $S10, rx1536_tgt, $I10, 2
    iseq $I11, $S10, "\r\n"
    add rx1536_pos, $I11
    inc rx1536_pos
  alt1539_end:
.annotate 'line', 720
  # rx pass
    rx1536_cur."!cursor_pass"(rx1536_pos, "")
    if_null rx1536_debug, debug_1088
    rx1536_cur."!cursor_debug"("PASS", "", " at pos=", rx1536_pos)
  debug_1088:
    .return (rx1536_cur)
  rx1536_restart:
    if_null rx1536_debug, debug_1089
    rx1536_cur."!cursor_debug"("NEXT", "")
  debug_1089:
  rx1536_fail:
    (rx1536_rep, rx1536_pos, $I10, $P10) = rx1536_cur."!mark_fail"(0)
    lt rx1536_pos, -1, rx1536_done
    eq rx1536_pos, -1, rx1536_fail
    jump $I10
  rx1536_done:
    rx1536_cur."!cursor_fail"()
    if_null rx1536_debug, debug_1090
    rx1536_cur."!cursor_debug"("FAIL", "")
  debug_1090:
    .return (rx1536_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__pod_comment"  :subid("54_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 703
    new $P104, "ResizablePMCArray"
    push $P104, ""
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "comp_unit"  :subid("55_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 735
    new $P103, "Undef"
    set $P1544, $P103
    .lex "$*IN_DECL", $P1544
.annotate 'line', 737
    new $P104, "Undef"
    set $P1545, $P104
    .lex "$*HAS_YOU_ARE_HERE", $P1545
.annotate 'line', 738
    new $P105, "Undef"
    set $P1546, $P105
    .lex "$*MAIN_SUB", $P1546
.annotate 'line', 741
    new $P106, "Undef"
    set $P1547, $P106
    .lex "$*PACKAGE", $P1547
.annotate 'line', 742
    new $P107, "Undef"
    set $P1548, $P107
    .lex "$*GLOBALish", $P1548
.annotate 'line', 734
    .local string rx1549_tgt
    .local int rx1549_pos
    .local int rx1549_off
    .local int rx1549_eos
    .local int rx1549_rep
    .local pmc rx1549_cur
    .local pmc rx1549_debug
    (rx1549_cur, rx1549_pos, rx1549_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1549_cur
    .local pmc match
    .lex "$/", match
    length rx1549_eos, rx1549_tgt
    gt rx1549_pos, rx1549_eos, rx1549_done
    set rx1549_off, 0
    lt rx1549_pos, 2, rx1549_start
    sub rx1549_off, rx1549_pos, 1
    substr rx1549_tgt, rx1549_tgt, rx1549_off
  rx1549_start:
    eq $I10, 1, rx1549_restart
    if_null rx1549_debug, debug_1094
    rx1549_cur."!cursor_debug"("START", "comp_unit")
  debug_1094:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1550_done
    goto rxscan1550_scan
  rxscan1550_loop:
    (rx1549_pos) = rx1549_cur."from"()
    inc rx1549_pos
    rx1549_cur."!cursor_from"(rx1549_pos)
    ge rx1549_pos, rx1549_eos, rxscan1550_done
  rxscan1550_scan:
    set_addr $I10, rxscan1550_loop
    rx1549_cur."!mark_push"(0, rx1549_pos, $I10)
  rxscan1550_done:
.annotate 'line', 735
    rx1549_cur."!cursor_pos"(rx1549_pos)
    new $P108, "String"
    assign $P108, ""
    set $P1544, $P108
.annotate 'line', 737
    rx1549_cur."!cursor_pos"(rx1549_pos)
    new $P109, "Float"
    assign $P109, 0
    set $P1545, $P109
.annotate 'line', 738
    rx1549_cur."!cursor_pos"(rx1549_pos)
    set $P112, $P1546
    unless_null $P112, vivify_1095
    get_hll_global $P110, "GLOBAL"
    get_who $P111, $P110
    set $P112, $P111["$MAIN_SUB"]
    unless_null $P112, vivify_1096
    die "Contextual $*MAIN_SUB not found"
  vivify_1096:
  vivify_1095:
.annotate 'line', 739
  # rx subrule "newpad" subtype=method negate=
    rx1549_cur."!cursor_pos"(rx1549_pos)
    $P10 = rx1549_cur."newpad"()
    unless $P10, rx1549_fail
    rx1549_pos = $P10."pos"()
.annotate 'line', 741
    rx1549_cur."!cursor_pos"(rx1549_pos)
    set $P115, $P1547
    unless_null $P115, vivify_1097
    get_hll_global $P113, "GLOBAL"
    get_who $P114, $P113
    set $P115, $P114["$PACKAGE"]
    unless_null $P115, vivify_1098
    die "Contextual $*PACKAGE not found"
  vivify_1098:
  vivify_1097:
.annotate 'line', 742
    rx1549_cur."!cursor_pos"(rx1549_pos)
    set $P118, $P1548
    unless_null $P118, vivify_1099
    get_hll_global $P116, "GLOBAL"
    get_who $P117, $P116
    set $P118, $P117["$GLOBALish"]
    unless_null $P118, vivify_1100
    die "Contextual $*GLOBALish not found"
  vivify_1100:
  vivify_1099:
.annotate 'line', 743
  # rx subrule "GLOBALish" subtype=method negate=
    rx1549_cur."!cursor_pos"(rx1549_pos)
    $P10 = rx1549_cur."GLOBALish"()
    unless $P10, rx1549_fail
    rx1549_pos = $P10."pos"()
.annotate 'line', 745
  # rx subrule "outerctx" subtype=method negate=
    rx1549_cur."!cursor_pos"(rx1549_pos)
    $P10 = rx1549_cur."outerctx"()
    unless $P10, rx1549_fail
    rx1549_pos = $P10."pos"()
.annotate 'line', 747
  # rx subrule "statementlist" subtype=capture negate=
    rx1549_cur."!cursor_pos"(rx1549_pos)
    $P10 = rx1549_cur."statementlist"()
    unless $P10, rx1549_fail
    rx1549_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statementlist")
    rx1549_pos = $P10."pos"()
  alt1551_0:
.annotate 'line', 748
    set_addr $I10, alt1551_1
    rx1549_cur."!mark_push"(0, rx1549_pos, $I10)
  # rxanchor eos
    ne rx1549_pos, rx1549_eos, rx1549_fail
    goto alt1551_end
  alt1551_1:
  # rx subrule "panic" subtype=method negate=
    rx1549_cur."!cursor_pos"(rx1549_pos)
    $P10 = rx1549_cur."panic"("Confused")
    unless $P10, rx1549_fail
    rx1549_pos = $P10."pos"()
  alt1551_end:
.annotate 'line', 734
  # rx pass
    rx1549_cur."!cursor_pass"(rx1549_pos, "comp_unit")
    if_null rx1549_debug, debug_1101
    rx1549_cur."!cursor_debug"("PASS", "comp_unit", " at pos=", rx1549_pos)
  debug_1101:
    .return (rx1549_cur)
  rx1549_restart:
    if_null rx1549_debug, debug_1102
    rx1549_cur."!cursor_debug"("NEXT", "comp_unit")
  debug_1102:
  rx1549_fail:
    (rx1549_rep, rx1549_pos, $I10, $P10) = rx1549_cur."!mark_fail"(0)
    lt rx1549_pos, -1, rx1549_done
    eq rx1549_pos, -1, rx1549_fail
    jump $I10
  rx1549_done:
    rx1549_cur."!cursor_fail"()
    if_null rx1549_debug, debug_1103
    rx1549_cur."!cursor_debug"("FAIL", "comp_unit")
  debug_1103:
    .return (rx1549_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__comp_unit"  :subid("56_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 734
    $P119 = self."!PREFIX__!subrule"("newpad", "")
    new $P120, "ResizablePMCArray"
    push $P120, $P119
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statementlist"  :subid("57_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 751
    .local string rx1554_tgt
    .local int rx1554_pos
    .local int rx1554_off
    .local int rx1554_eos
    .local int rx1554_rep
    .local pmc rx1554_cur
    .local pmc rx1554_debug
    (rx1554_cur, rx1554_pos, rx1554_tgt, $I10) = self."!cursor_start"()
    rx1554_cur."!cursor_caparray"("statement")
    .lex unicode:"$\x{a2}", rx1554_cur
    .local pmc match
    .lex "$/", match
    length rx1554_eos, rx1554_tgt
    gt rx1554_pos, rx1554_eos, rx1554_done
    set rx1554_off, 0
    lt rx1554_pos, 2, rx1554_start
    sub rx1554_off, rx1554_pos, 1
    substr rx1554_tgt, rx1554_tgt, rx1554_off
  rx1554_start:
    eq $I10, 1, rx1554_restart
    if_null rx1554_debug, debug_1104
    rx1554_cur."!cursor_debug"("START", "statementlist")
  debug_1104:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1555_done
    goto rxscan1555_scan
  rxscan1555_loop:
    (rx1554_pos) = rx1554_cur."from"()
    inc rx1554_pos
    rx1554_cur."!cursor_from"(rx1554_pos)
    ge rx1554_pos, rx1554_eos, rxscan1555_done
  rxscan1555_scan:
    set_addr $I10, rxscan1555_loop
    rx1554_cur."!mark_push"(0, rx1554_pos, $I10)
  rxscan1555_done:
  alt1556_0:
    set_addr $I10, alt1556_1
    rx1554_cur."!mark_push"(0, rx1554_pos, $I10)
.annotate 'line', 752
  # rx subrule "ws" subtype=method negate=
    rx1554_cur."!cursor_pos"(rx1554_pos)
    $P10 = rx1554_cur."ws"()
    unless $P10, rx1554_fail
    rx1554_pos = $P10."pos"()
  # rxanchor eos
    ne rx1554_pos, rx1554_eos, rx1554_fail
  # rx subrule "ws" subtype=method negate=
    rx1554_cur."!cursor_pos"(rx1554_pos)
    $P10 = rx1554_cur."ws"()
    unless $P10, rx1554_fail
    rx1554_pos = $P10."pos"()
    goto alt1556_end
  alt1556_1:
.annotate 'line', 753
  # rx subrule "ws" subtype=method negate=
    rx1554_cur."!cursor_pos"(rx1554_pos)
    $P10 = rx1554_cur."ws"()
    unless $P10, rx1554_fail
    rx1554_pos = $P10."pos"()
  # rx rxquantr1557 ** 0..*
    set_addr $I10, rxquantr1557_done
    rx1554_cur."!mark_push"(0, rx1554_pos, $I10)
  rxquantr1557_loop:
  # rx subrule "statement" subtype=capture negate=
    rx1554_cur."!cursor_pos"(rx1554_pos)
    $P10 = rx1554_cur."statement"()
    unless $P10, rx1554_fail
    rx1554_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement")
    rx1554_pos = $P10."pos"()
  # rx subrule "eat_terminator" subtype=method negate=
    rx1554_cur."!cursor_pos"(rx1554_pos)
    $P10 = rx1554_cur."eat_terminator"()
    unless $P10, rx1554_fail
    rx1554_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1554_cur."!cursor_pos"(rx1554_pos)
    $P10 = rx1554_cur."ws"()
    unless $P10, rx1554_fail
    rx1554_pos = $P10."pos"()
    set_addr $I10, rxquantr1557_done
    (rx1554_rep) = rx1554_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1557_done
    rx1554_cur."!mark_push"(rx1554_rep, rx1554_pos, $I10)
    goto rxquantr1557_loop
  rxquantr1557_done:
  # rx subrule "ws" subtype=method negate=
    rx1554_cur."!cursor_pos"(rx1554_pos)
    $P10 = rx1554_cur."ws"()
    unless $P10, rx1554_fail
    rx1554_pos = $P10."pos"()
  alt1556_end:
.annotate 'line', 751
  # rx pass
    rx1554_cur."!cursor_pass"(rx1554_pos, "statementlist")
    if_null rx1554_debug, debug_1105
    rx1554_cur."!cursor_debug"("PASS", "statementlist", " at pos=", rx1554_pos)
  debug_1105:
    .return (rx1554_cur)
  rx1554_restart:
    if_null rx1554_debug, debug_1106
    rx1554_cur."!cursor_debug"("NEXT", "statementlist")
  debug_1106:
  rx1554_fail:
    (rx1554_rep, rx1554_pos, $I10, $P10) = rx1554_cur."!mark_fail"(0)
    lt rx1554_pos, -1, rx1554_done
    eq rx1554_pos, -1, rx1554_fail
    jump $I10
  rx1554_done:
    rx1554_cur."!cursor_fail"()
    if_null rx1554_debug, debug_1107
    rx1554_cur."!cursor_debug"("FAIL", "statementlist")
  debug_1107:
    .return (rx1554_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statementlist"  :subid("58_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 751
    $P108 = self."!PREFIX__!subrule"("ws", "")
    $P109 = self."!PREFIX__!subrule"("ws", "")
    new $P110, "ResizablePMCArray"
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement"  :subid("59_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 756
    .const 'Sub' $P1563 = "574_1334921493.34" 
    capture_lex $P1563
    .local string rx1560_tgt
    .local int rx1560_pos
    .local int rx1560_off
    .local int rx1560_eos
    .local int rx1560_rep
    .local pmc rx1560_cur
    .local pmc rx1560_debug
    (rx1560_cur, rx1560_pos, rx1560_tgt, $I10) = self."!cursor_start"()
    rx1560_cur."!cursor_caparray"("statement_mod_cond", "statement_mod_loop")
    .lex unicode:"$\x{a2}", rx1560_cur
    .local pmc match
    .lex "$/", match
    length rx1560_eos, rx1560_tgt
    gt rx1560_pos, rx1560_eos, rx1560_done
    set rx1560_off, 0
    lt rx1560_pos, 2, rx1560_start
    sub rx1560_off, rx1560_pos, 1
    substr rx1560_tgt, rx1560_tgt, rx1560_off
  rx1560_start:
    eq $I10, 1, rx1560_restart
    if_null rx1560_debug, debug_1108
    rx1560_cur."!cursor_debug"("START", "statement")
  debug_1108:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1561_done
    goto rxscan1561_scan
  rxscan1561_loop:
    (rx1560_pos) = rx1560_cur."from"()
    inc rx1560_pos
    rx1560_cur."!cursor_from"(rx1560_pos)
    ge rx1560_pos, rx1560_eos, rxscan1561_done
  rxscan1561_scan:
    set_addr $I10, rxscan1561_loop
    rx1560_cur."!mark_push"(0, rx1560_pos, $I10)
  rxscan1561_done:
.annotate 'line', 757
  # rx subrule "before" subtype=zerowidth negate=1
    rx1560_cur."!cursor_pos"(rx1560_pos)
    .const 'Sub' $P1563 = "574_1334921493.34" 
    capture_lex $P1563
    $P10 = rx1560_cur."before"($P1563)
    if $P10, rx1560_fail
  alt1567_0:
.annotate 'line', 758
    set_addr $I10, alt1567_1
    rx1560_cur."!mark_push"(0, rx1560_pos, $I10)
.annotate 'line', 759
  # rx subrule "statement_control" subtype=capture negate=
    rx1560_cur."!cursor_pos"(rx1560_pos)
    $P10 = rx1560_cur."statement_control"()
    unless $P10, rx1560_fail
    rx1560_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement_control")
    rx1560_pos = $P10."pos"()
    goto alt1567_end
  alt1567_1:
.annotate 'line', 760
  # rx subrule "EXPR" subtype=capture negate=
    rx1560_cur."!cursor_pos"(rx1560_pos)
    $P10 = rx1560_cur."EXPR"()
    unless $P10, rx1560_fail
    rx1560_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx1560_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1560_cur."!cursor_pos"(rx1560_pos)
    $P10 = rx1560_cur."ws"()
    unless $P10, rx1560_fail
    rx1560_pos = $P10."pos"()
.annotate 'line', 765
  # rx rxquantr1568 ** 0..1
    set_addr $I10, rxquantr1568_done
    rx1560_cur."!mark_push"(0, rx1560_pos, $I10)
  rxquantr1568_loop:
  alt1569_0:
.annotate 'line', 761
    set_addr $I10, alt1569_1
    rx1560_cur."!mark_push"(0, rx1560_pos, $I10)
.annotate 'line', 762
  # rx subrule "MARKED" subtype=zerowidth negate=
    rx1560_cur."!cursor_pos"(rx1560_pos)
    $P10 = rx1560_cur."MARKED"("endstmt")
    unless $P10, rx1560_fail
    goto alt1569_end
  alt1569_1:
    set_addr $I10, alt1569_2
    rx1560_cur."!mark_push"(0, rx1560_pos, $I10)
.annotate 'line', 763
  # rx subrule "statement_mod_cond" subtype=capture negate=
    rx1560_cur."!cursor_pos"(rx1560_pos)
    $P10 = rx1560_cur."statement_mod_cond"()
    unless $P10, rx1560_fail
    rx1560_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement_mod_cond")
    rx1560_pos = $P10."pos"()
  # rx rxquantr1570 ** 0..1
    set_addr $I10, rxquantr1570_done
    rx1560_cur."!mark_push"(0, rx1560_pos, $I10)
  rxquantr1570_loop:
  # rx subrule "statement_mod_loop" subtype=capture negate=
    rx1560_cur."!cursor_pos"(rx1560_pos)
    $P10 = rx1560_cur."statement_mod_loop"()
    unless $P10, rx1560_fail
    goto rxsubrule1571_pass
  rxsubrule1571_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1560_fail
  rxsubrule1571_pass:
    set_addr $I10, rxsubrule1571_back
    rx1560_cur."!mark_push"(0, rx1560_pos, $I10, $P10)
    $P10."!cursor_names"("statement_mod_loop")
    rx1560_pos = $P10."pos"()
    set_addr $I10, rxquantr1570_done
    (rx1560_rep) = rx1560_cur."!mark_commit"($I10)
  rxquantr1570_done:
    goto alt1569_end
  alt1569_2:
.annotate 'line', 764
  # rx subrule "statement_mod_loop" subtype=capture negate=
    rx1560_cur."!cursor_pos"(rx1560_pos)
    $P10 = rx1560_cur."statement_mod_loop"()
    unless $P10, rx1560_fail
    rx1560_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement_mod_loop")
    rx1560_pos = $P10."pos"()
  alt1569_end:
.annotate 'line', 765
    set_addr $I10, rxquantr1568_done
    (rx1560_rep) = rx1560_cur."!mark_commit"($I10)
  rxquantr1568_done:
  alt1567_end:
.annotate 'line', 756
  # rx pass
    rx1560_cur."!cursor_pass"(rx1560_pos, "statement")
    if_null rx1560_debug, debug_1113
    rx1560_cur."!cursor_debug"("PASS", "statement", " at pos=", rx1560_pos)
  debug_1113:
    .return (rx1560_cur)
  rx1560_restart:
    if_null rx1560_debug, debug_1114
    rx1560_cur."!cursor_debug"("NEXT", "statement")
  debug_1114:
  rx1560_fail:
    (rx1560_rep, rx1560_pos, $I10, $P10) = rx1560_cur."!mark_fail"(0)
    lt rx1560_pos, -1, rx1560_done
    eq rx1560_pos, -1, rx1560_fail
    jump $I10
  rx1560_done:
    rx1560_cur."!cursor_fail"()
    if_null rx1560_debug, debug_1115
    rx1560_cur."!cursor_debug"("FAIL", "statement")
  debug_1115:
    .return (rx1560_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1562"  :anon :subid("574_1334921493.34") :method :outer("59_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 757
    .local string rx1564_tgt
    .local int rx1564_pos
    .local int rx1564_off
    .local int rx1564_eos
    .local int rx1564_rep
    .local pmc rx1564_cur
    .local pmc rx1564_debug
    (rx1564_cur, rx1564_pos, rx1564_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1564_cur
    .local pmc match
    .lex "$/", match
    length rx1564_eos, rx1564_tgt
    gt rx1564_pos, rx1564_eos, rx1564_done
    set rx1564_off, 0
    lt rx1564_pos, 2, rx1564_start
    sub rx1564_off, rx1564_pos, 1
    substr rx1564_tgt, rx1564_tgt, rx1564_off
  rx1564_start:
    eq $I10, 1, rx1564_restart
    if_null rx1564_debug, debug_1109
    rx1564_cur."!cursor_debug"("START", "")
  debug_1109:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1565_done
    goto rxscan1565_scan
  rxscan1565_loop:
    (rx1564_pos) = rx1564_cur."from"()
    inc rx1564_pos
    rx1564_cur."!cursor_from"(rx1564_pos)
    ge rx1564_pos, rx1564_eos, rxscan1565_done
  rxscan1565_scan:
    set_addr $I10, rxscan1565_loop
    rx1564_cur."!mark_push"(0, rx1564_pos, $I10)
  rxscan1565_done:
  alt1566_0:
    set_addr $I10, alt1566_1
    rx1564_cur."!mark_push"(0, rx1564_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx1564_pos, rx1564_eos, rx1564_fail
    sub $I10, rx1564_pos, rx1564_off
    substr $S10, rx1564_tgt, $I10, 1
    index $I11, "])}", $S10
    lt $I11, 0, rx1564_fail
    inc rx1564_pos
    goto alt1566_end
  alt1566_1:
  # rxanchor eos
    ne rx1564_pos, rx1564_eos, rx1564_fail
  alt1566_end:
  # rx pass
    rx1564_cur."!cursor_pass"(rx1564_pos, "")
    if_null rx1564_debug, debug_1110
    rx1564_cur."!cursor_debug"("PASS", "", " at pos=", rx1564_pos)
  debug_1110:
    .return (rx1564_cur)
  rx1564_restart:
    if_null rx1564_debug, debug_1111
    rx1564_cur."!cursor_debug"("NEXT", "")
  debug_1111:
  rx1564_fail:
    (rx1564_rep, rx1564_pos, $I10, $P10) = rx1564_cur."!mark_fail"(0)
    lt rx1564_pos, -1, rx1564_done
    eq rx1564_pos, -1, rx1564_fail
    jump $I10
  rx1564_done:
    rx1564_cur."!cursor_fail"()
    if_null rx1564_debug, debug_1112
    rx1564_cur."!cursor_debug"("FAIL", "")
  debug_1112:
    .return (rx1564_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement"  :subid("60_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 756
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "eat_terminator"  :subid("61_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 769
    .local string rx1574_tgt
    .local int rx1574_pos
    .local int rx1574_off
    .local int rx1574_eos
    .local int rx1574_rep
    .local pmc rx1574_cur
    .local pmc rx1574_debug
    (rx1574_cur, rx1574_pos, rx1574_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1574_cur
    .local pmc match
    .lex "$/", match
    length rx1574_eos, rx1574_tgt
    gt rx1574_pos, rx1574_eos, rx1574_done
    set rx1574_off, 0
    lt rx1574_pos, 2, rx1574_start
    sub rx1574_off, rx1574_pos, 1
    substr rx1574_tgt, rx1574_tgt, rx1574_off
  rx1574_start:
    eq $I10, 1, rx1574_restart
    if_null rx1574_debug, debug_1116
    rx1574_cur."!cursor_debug"("START", "eat_terminator")
  debug_1116:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1575_done
    goto rxscan1575_scan
  rxscan1575_loop:
    (rx1574_pos) = rx1574_cur."from"()
    inc rx1574_pos
    rx1574_cur."!cursor_from"(rx1574_pos)
    ge rx1574_pos, rx1574_eos, rxscan1575_done
  rxscan1575_scan:
    set_addr $I10, rxscan1575_loop
    rx1574_cur."!mark_push"(0, rx1574_pos, $I10)
  rxscan1575_done:
  alt1576_0:
    set_addr $I10, alt1576_1
    rx1574_cur."!mark_push"(0, rx1574_pos, $I10)
.annotate 'line', 770
  # rx literal  ";"
    add $I11, rx1574_pos, 1
    gt $I11, rx1574_eos, rx1574_fail
    sub $I11, rx1574_pos, rx1574_off
    ord $I11, rx1574_tgt, $I11
    ne $I11, 59, rx1574_fail
    add rx1574_pos, 1
    goto alt1576_end
  alt1576_1:
    set_addr $I10, alt1576_2
    rx1574_cur."!mark_push"(0, rx1574_pos, $I10)
.annotate 'line', 771
  # rx subrule "MARKED" subtype=zerowidth negate=
    rx1574_cur."!cursor_pos"(rx1574_pos)
    $P10 = rx1574_cur."MARKED"("endstmt")
    unless $P10, rx1574_fail
    goto alt1576_end
  alt1576_2:
    set_addr $I10, alt1576_3
    rx1574_cur."!mark_push"(0, rx1574_pos, $I10)
.annotate 'line', 772
  # rx subrule "terminator" subtype=zerowidth negate=
    rx1574_cur."!cursor_pos"(rx1574_pos)
    $P10 = rx1574_cur."terminator"()
    unless $P10, rx1574_fail
    goto alt1576_end
  alt1576_3:
.annotate 'line', 773
  # rxanchor eos
    ne rx1574_pos, rx1574_eos, rx1574_fail
  alt1576_end:
.annotate 'line', 769
  # rx pass
    rx1574_cur."!cursor_pass"(rx1574_pos, "eat_terminator")
    if_null rx1574_debug, debug_1117
    rx1574_cur."!cursor_debug"("PASS", "eat_terminator", " at pos=", rx1574_pos)
  debug_1117:
    .return (rx1574_cur)
  rx1574_restart:
    if_null rx1574_debug, debug_1118
    rx1574_cur."!cursor_debug"("NEXT", "eat_terminator")
  debug_1118:
  rx1574_fail:
    (rx1574_rep, rx1574_pos, $I10, $P10) = rx1574_cur."!mark_fail"(0)
    lt rx1574_pos, -1, rx1574_done
    eq rx1574_pos, -1, rx1574_fail
    jump $I10
  rx1574_done:
    rx1574_cur."!cursor_fail"()
    if_null rx1574_debug, debug_1119
    rx1574_cur."!cursor_debug"("FAIL", "eat_terminator")
  debug_1119:
    .return (rx1574_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__eat_terminator"  :subid("62_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 769
    new $P103, "ResizablePMCArray"
    push $P103, ""
    push $P103, ""
    push $P103, ""
    push $P103, ";"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "xblock"  :subid("63_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 776
    .local string rx1579_tgt
    .local int rx1579_pos
    .local int rx1579_off
    .local int rx1579_eos
    .local int rx1579_rep
    .local pmc rx1579_cur
    .local pmc rx1579_debug
    (rx1579_cur, rx1579_pos, rx1579_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1579_cur
    .local pmc match
    .lex "$/", match
    length rx1579_eos, rx1579_tgt
    gt rx1579_pos, rx1579_eos, rx1579_done
    set rx1579_off, 0
    lt rx1579_pos, 2, rx1579_start
    sub rx1579_off, rx1579_pos, 1
    substr rx1579_tgt, rx1579_tgt, rx1579_off
  rx1579_start:
    eq $I10, 1, rx1579_restart
    if_null rx1579_debug, debug_1120
    rx1579_cur."!cursor_debug"("START", "xblock")
  debug_1120:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1580_done
    goto rxscan1580_scan
  rxscan1580_loop:
    (rx1579_pos) = rx1579_cur."from"()
    inc rx1579_pos
    rx1579_cur."!cursor_from"(rx1579_pos)
    ge rx1579_pos, rx1579_eos, rxscan1580_done
  rxscan1580_scan:
    set_addr $I10, rxscan1580_loop
    rx1579_cur."!mark_push"(0, rx1579_pos, $I10)
  rxscan1580_done:
.annotate 'line', 777
  # rx subrule "EXPR" subtype=capture negate=
    rx1579_cur."!cursor_pos"(rx1579_pos)
    $P10 = rx1579_cur."EXPR"()
    unless $P10, rx1579_fail
    rx1579_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx1579_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1579_cur."!cursor_pos"(rx1579_pos)
    $P10 = rx1579_cur."ws"()
    unless $P10, rx1579_fail
    rx1579_pos = $P10."pos"()
  # rx subrule "pblock" subtype=capture negate=
    rx1579_cur."!cursor_pos"(rx1579_pos)
    $P10 = rx1579_cur."pblock"()
    unless $P10, rx1579_fail
    rx1579_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("pblock")
    rx1579_pos = $P10."pos"()
.annotate 'line', 776
  # rx pass
    rx1579_cur."!cursor_pass"(rx1579_pos, "xblock")
    if_null rx1579_debug, debug_1121
    rx1579_cur."!cursor_debug"("PASS", "xblock", " at pos=", rx1579_pos)
  debug_1121:
    .return (rx1579_cur)
  rx1579_restart:
    if_null rx1579_debug, debug_1122
    rx1579_cur."!cursor_debug"("NEXT", "xblock")
  debug_1122:
  rx1579_fail:
    (rx1579_rep, rx1579_pos, $I10, $P10) = rx1579_cur."!mark_fail"(0)
    lt rx1579_pos, -1, rx1579_done
    eq rx1579_pos, -1, rx1579_fail
    jump $I10
  rx1579_done:
    rx1579_cur."!cursor_fail"()
    if_null rx1579_debug, debug_1123
    rx1579_cur."!cursor_debug"("FAIL", "xblock")
  debug_1123:
    .return (rx1579_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__xblock"  :subid("64_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 776
    $P103 = self."!PREFIX__!subrule"("EXPR", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "pblock"  :subid("65_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 780
    .local string rx1583_tgt
    .local int rx1583_pos
    .local int rx1583_off
    .local int rx1583_eos
    .local int rx1583_rep
    .local pmc rx1583_cur
    .local pmc rx1583_debug
    (rx1583_cur, rx1583_pos, rx1583_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1583_cur
    .local pmc match
    .lex "$/", match
    length rx1583_eos, rx1583_tgt
    gt rx1583_pos, rx1583_eos, rx1583_done
    set rx1583_off, 0
    lt rx1583_pos, 2, rx1583_start
    sub rx1583_off, rx1583_pos, 1
    substr rx1583_tgt, rx1583_tgt, rx1583_off
  rx1583_start:
    eq $I10, 1, rx1583_restart
    if_null rx1583_debug, debug_1124
    rx1583_cur."!cursor_debug"("START", "pblock")
  debug_1124:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1584_done
    goto rxscan1584_scan
  rxscan1584_loop:
    (rx1583_pos) = rx1583_cur."from"()
    inc rx1583_pos
    rx1583_cur."!cursor_from"(rx1583_pos)
    ge rx1583_pos, rx1583_eos, rxscan1584_done
  rxscan1584_scan:
    set_addr $I10, rxscan1584_loop
    rx1583_cur."!mark_push"(0, rx1583_pos, $I10)
  rxscan1584_done:
  alt1585_0:
    set_addr $I10, alt1585_1
    rx1583_cur."!mark_push"(0, rx1583_pos, $I10)
.annotate 'line', 781
  # rx subrule "lambda" subtype=method negate=
    rx1583_cur."!cursor_pos"(rx1583_pos)
    $P10 = rx1583_cur."lambda"()
    unless $P10, rx1583_fail
    rx1583_pos = $P10."pos"()
.annotate 'line', 782
  # rx subrule "newpad" subtype=method negate=
    rx1583_cur."!cursor_pos"(rx1583_pos)
    $P10 = rx1583_cur."newpad"()
    unless $P10, rx1583_fail
    rx1583_pos = $P10."pos"()
.annotate 'line', 783
  # rx subrule "signature" subtype=capture negate=
    rx1583_cur."!cursor_pos"(rx1583_pos)
    $P10 = rx1583_cur."signature"()
    unless $P10, rx1583_fail
    rx1583_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("signature")
    rx1583_pos = $P10."pos"()
.annotate 'line', 784
  # rx subrule "blockoid" subtype=capture negate=
    rx1583_cur."!cursor_pos"(rx1583_pos)
    $P10 = rx1583_cur."blockoid"()
    unless $P10, rx1583_fail
    rx1583_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx1583_pos = $P10."pos"()
.annotate 'line', 781
    goto alt1585_end
  alt1585_1:
    set_addr $I10, alt1585_2
    rx1583_cur."!mark_push"(0, rx1583_pos, $I10)
.annotate 'line', 785
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1583_pos, rx1583_off
    substr $S10, rx1583_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx1583_fail
.annotate 'line', 786
  # rx subrule "newpad" subtype=method negate=
    rx1583_cur."!cursor_pos"(rx1583_pos)
    $P10 = rx1583_cur."newpad"()
    unless $P10, rx1583_fail
    rx1583_pos = $P10."pos"()
.annotate 'line', 787
  # rx subrule "blockoid" subtype=capture negate=
    rx1583_cur."!cursor_pos"(rx1583_pos)
    $P10 = rx1583_cur."blockoid"()
    unless $P10, rx1583_fail
    rx1583_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx1583_pos = $P10."pos"()
.annotate 'line', 785
    goto alt1585_end
  alt1585_2:
.annotate 'line', 788
  # rx subrule "panic" subtype=method negate=
    rx1583_cur."!cursor_pos"(rx1583_pos)
    $P10 = rx1583_cur."panic"("Missing block")
    unless $P10, rx1583_fail
    rx1583_pos = $P10."pos"()
  alt1585_end:
.annotate 'line', 780
  # rx pass
    rx1583_cur."!cursor_pass"(rx1583_pos, "pblock")
    if_null rx1583_debug, debug_1125
    rx1583_cur."!cursor_debug"("PASS", "pblock", " at pos=", rx1583_pos)
  debug_1125:
    .return (rx1583_cur)
  rx1583_restart:
    if_null rx1583_debug, debug_1126
    rx1583_cur."!cursor_debug"("NEXT", "pblock")
  debug_1126:
  rx1583_fail:
    (rx1583_rep, rx1583_pos, $I10, $P10) = rx1583_cur."!mark_fail"(0)
    lt rx1583_pos, -1, rx1583_done
    eq rx1583_pos, -1, rx1583_fail
    jump $I10
  rx1583_done:
    rx1583_cur."!cursor_fail"()
    if_null rx1583_debug, debug_1127
    rx1583_cur."!cursor_debug"("FAIL", "pblock")
  debug_1127:
    .return (rx1583_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__pblock"  :subid("66_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 780
    $P103 = self."!PREFIX__!subrule"("panic", "")
    $P104 = self."!PREFIX__!subrule"("lambda", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, "{"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "lambda"  :subid("67_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 791
    .local string rx1588_tgt
    .local int rx1588_pos
    .local int rx1588_off
    .local int rx1588_eos
    .local int rx1588_rep
    .local pmc rx1588_cur
    .local pmc rx1588_debug
    (rx1588_cur, rx1588_pos, rx1588_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1588_cur
    .local pmc match
    .lex "$/", match
    length rx1588_eos, rx1588_tgt
    gt rx1588_pos, rx1588_eos, rx1588_done
    set rx1588_off, 0
    lt rx1588_pos, 2, rx1588_start
    sub rx1588_off, rx1588_pos, 1
    substr rx1588_tgt, rx1588_tgt, rx1588_off
  rx1588_start:
    eq $I10, 1, rx1588_restart
    if_null rx1588_debug, debug_1128
    rx1588_cur."!cursor_debug"("START", "lambda")
  debug_1128:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1589_done
    goto rxscan1589_scan
  rxscan1589_loop:
    (rx1588_pos) = rx1588_cur."from"()
    inc rx1588_pos
    rx1588_cur."!cursor_from"(rx1588_pos)
    ge rx1588_pos, rx1588_eos, rxscan1589_done
  rxscan1589_scan:
    set_addr $I10, rxscan1589_loop
    rx1588_cur."!mark_push"(0, rx1588_pos, $I10)
  rxscan1589_done:
  alt1590_0:
    set_addr $I10, alt1590_1
    rx1588_cur."!mark_push"(0, rx1588_pos, $I10)
  # rx literal  "->"
    add $I11, rx1588_pos, 2
    gt $I11, rx1588_eos, rx1588_fail
    sub $I11, rx1588_pos, rx1588_off
    substr $S10, rx1588_tgt, $I11, 2
    ne $S10, "->", rx1588_fail
    add rx1588_pos, 2
    goto alt1590_end
  alt1590_1:
  # rx literal  "<->"
    add $I11, rx1588_pos, 3
    gt $I11, rx1588_eos, rx1588_fail
    sub $I11, rx1588_pos, rx1588_off
    substr $S10, rx1588_tgt, $I11, 3
    ne $S10, "<->", rx1588_fail
    add rx1588_pos, 3
  alt1590_end:
  # rx pass
    rx1588_cur."!cursor_pass"(rx1588_pos, "lambda")
    if_null rx1588_debug, debug_1129
    rx1588_cur."!cursor_debug"("PASS", "lambda", " at pos=", rx1588_pos)
  debug_1129:
    .return (rx1588_cur)
  rx1588_restart:
    if_null rx1588_debug, debug_1130
    rx1588_cur."!cursor_debug"("NEXT", "lambda")
  debug_1130:
  rx1588_fail:
    (rx1588_rep, rx1588_pos, $I10, $P10) = rx1588_cur."!mark_fail"(0)
    lt rx1588_pos, -1, rx1588_done
    eq rx1588_pos, -1, rx1588_fail
    jump $I10
  rx1588_done:
    rx1588_cur."!cursor_fail"()
    if_null rx1588_debug, debug_1131
    rx1588_cur."!cursor_debug"("FAIL", "lambda")
  debug_1131:
    .return (rx1588_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__lambda"  :subid("68_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 791
    new $P103, "ResizablePMCArray"
    push $P103, "<->"
    push $P103, "->"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "block"  :subid("69_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 793
    .local string rx1593_tgt
    .local int rx1593_pos
    .local int rx1593_off
    .local int rx1593_eos
    .local int rx1593_rep
    .local pmc rx1593_cur
    .local pmc rx1593_debug
    (rx1593_cur, rx1593_pos, rx1593_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1593_cur
    .local pmc match
    .lex "$/", match
    length rx1593_eos, rx1593_tgt
    gt rx1593_pos, rx1593_eos, rx1593_done
    set rx1593_off, 0
    lt rx1593_pos, 2, rx1593_start
    sub rx1593_off, rx1593_pos, 1
    substr rx1593_tgt, rx1593_tgt, rx1593_off
  rx1593_start:
    eq $I10, 1, rx1593_restart
    if_null rx1593_debug, debug_1132
    rx1593_cur."!cursor_debug"("START", "block")
  debug_1132:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1594_done
    goto rxscan1594_scan
  rxscan1594_loop:
    (rx1593_pos) = rx1593_cur."from"()
    inc rx1593_pos
    rx1593_cur."!cursor_from"(rx1593_pos)
    ge rx1593_pos, rx1593_eos, rxscan1594_done
  rxscan1594_scan:
    set_addr $I10, rxscan1594_loop
    rx1593_cur."!mark_push"(0, rx1593_pos, $I10)
  rxscan1594_done:
  alt1595_0:
.annotate 'line', 794
    set_addr $I10, alt1595_1
    rx1593_cur."!mark_push"(0, rx1593_pos, $I10)
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1593_pos, rx1593_off
    substr $S10, rx1593_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx1593_fail
    goto alt1595_end
  alt1595_1:
  # rx subrule "panic" subtype=method negate=
    rx1593_cur."!cursor_pos"(rx1593_pos)
    $P10 = rx1593_cur."panic"("Missing block")
    unless $P10, rx1593_fail
    rx1593_pos = $P10."pos"()
  alt1595_end:
.annotate 'line', 795
  # rx subrule "newpad" subtype=method negate=
    rx1593_cur."!cursor_pos"(rx1593_pos)
    $P10 = rx1593_cur."newpad"()
    unless $P10, rx1593_fail
    rx1593_pos = $P10."pos"()
.annotate 'line', 796
  # rx subrule "blockoid" subtype=capture negate=
    rx1593_cur."!cursor_pos"(rx1593_pos)
    $P10 = rx1593_cur."blockoid"()
    unless $P10, rx1593_fail
    rx1593_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx1593_pos = $P10."pos"()
.annotate 'line', 793
  # rx pass
    rx1593_cur."!cursor_pass"(rx1593_pos, "block")
    if_null rx1593_debug, debug_1133
    rx1593_cur."!cursor_debug"("PASS", "block", " at pos=", rx1593_pos)
  debug_1133:
    .return (rx1593_cur)
  rx1593_restart:
    if_null rx1593_debug, debug_1134
    rx1593_cur."!cursor_debug"("NEXT", "block")
  debug_1134:
  rx1593_fail:
    (rx1593_rep, rx1593_pos, $I10, $P10) = rx1593_cur."!mark_fail"(0)
    lt rx1593_pos, -1, rx1593_done
    eq rx1593_pos, -1, rx1593_fail
    jump $I10
  rx1593_done:
    rx1593_cur."!cursor_fail"()
    if_null rx1593_debug, debug_1135
    rx1593_cur."!cursor_debug"("FAIL", "block")
  debug_1135:
    .return (rx1593_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__block"  :subid("70_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 793
    $P103 = self."!PREFIX__!subrule"("panic", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    push $P104, "{"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "blockoid"  :subid("71_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 799
    .local string rx1598_tgt
    .local int rx1598_pos
    .local int rx1598_off
    .local int rx1598_eos
    .local int rx1598_rep
    .local pmc rx1598_cur
    .local pmc rx1598_debug
    (rx1598_cur, rx1598_pos, rx1598_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1598_cur
    .local pmc match
    .lex "$/", match
    length rx1598_eos, rx1598_tgt
    gt rx1598_pos, rx1598_eos, rx1598_done
    set rx1598_off, 0
    lt rx1598_pos, 2, rx1598_start
    sub rx1598_off, rx1598_pos, 1
    substr rx1598_tgt, rx1598_tgt, rx1598_off
  rx1598_start:
    eq $I10, 1, rx1598_restart
    if_null rx1598_debug, debug_1136
    rx1598_cur."!cursor_debug"("START", "blockoid")
  debug_1136:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1599_done
    goto rxscan1599_scan
  rxscan1599_loop:
    (rx1598_pos) = rx1598_cur."from"()
    inc rx1598_pos
    rx1598_cur."!cursor_from"(rx1598_pos)
    ge rx1598_pos, rx1598_eos, rxscan1599_done
  rxscan1599_scan:
    set_addr $I10, rxscan1599_loop
    rx1598_cur."!mark_push"(0, rx1598_pos, $I10)
  rxscan1599_done:
.annotate 'line', 800
  # rx subrule "finishpad" subtype=method negate=
    rx1598_cur."!cursor_pos"(rx1598_pos)
    $P10 = rx1598_cur."finishpad"()
    unless $P10, rx1598_fail
    rx1598_pos = $P10."pos"()
  alt1600_0:
.annotate 'line', 801
    set_addr $I10, alt1600_1
    rx1598_cur."!mark_push"(0, rx1598_pos, $I10)
.annotate 'line', 802
  # rx literal  "{YOU_ARE_HERE}"
    add $I11, rx1598_pos, 14
    gt $I11, rx1598_eos, rx1598_fail
    sub $I11, rx1598_pos, rx1598_off
    substr $S10, rx1598_tgt, $I11, 14
    ne $S10, "{YOU_ARE_HERE}", rx1598_fail
    add rx1598_pos, 14
  # rx subrule "you_are_here" subtype=capture negate=
    rx1598_cur."!cursor_pos"(rx1598_pos)
    $P10 = rx1598_cur."you_are_here"()
    unless $P10, rx1598_fail
    rx1598_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("you_are_here")
    rx1598_pos = $P10."pos"()
    goto alt1600_end
  alt1600_1:
.annotate 'line', 803
  # rx literal  "{"
    add $I11, rx1598_pos, 1
    gt $I11, rx1598_eos, rx1598_fail
    sub $I11, rx1598_pos, rx1598_off
    ord $I11, rx1598_tgt, $I11
    ne $I11, 123, rx1598_fail
    add rx1598_pos, 1
  # rx subrule "statementlist" subtype=capture negate=
    rx1598_cur."!cursor_pos"(rx1598_pos)
    $P10 = rx1598_cur."statementlist"()
    unless $P10, rx1598_fail
    rx1598_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statementlist")
    rx1598_pos = $P10."pos"()
  alt1601_0:
    set_addr $I10, alt1601_1
    rx1598_cur."!mark_push"(0, rx1598_pos, $I10)
  # rx literal  "}"
    add $I11, rx1598_pos, 1
    gt $I11, rx1598_eos, rx1598_fail
    sub $I11, rx1598_pos, rx1598_off
    ord $I11, rx1598_tgt, $I11
    ne $I11, 125, rx1598_fail
    add rx1598_pos, 1
    goto alt1601_end
  alt1601_1:
  # rx subrule "FAILGOAL" subtype=method negate=
    rx1598_cur."!cursor_pos"(rx1598_pos)
    $P10 = rx1598_cur."FAILGOAL"("'}'")
    unless $P10, rx1598_fail
    goto rxsubrule1602_pass
  rxsubrule1602_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1598_fail
  rxsubrule1602_pass:
    set_addr $I10, rxsubrule1602_back
    rx1598_cur."!mark_push"(0, rx1598_pos, $I10, $P10)
    rx1598_pos = $P10."pos"()
  alt1601_end:
  alt1600_end:
.annotate 'line', 805
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx1598_cur."!cursor_pos"(rx1598_pos)
    $P10 = rx1598_cur."ENDSTMT"()
    unless $P10, rx1598_fail
.annotate 'line', 799
  # rx pass
    rx1598_cur."!cursor_pass"(rx1598_pos, "blockoid")
    if_null rx1598_debug, debug_1137
    rx1598_cur."!cursor_debug"("PASS", "blockoid", " at pos=", rx1598_pos)
  debug_1137:
    .return (rx1598_cur)
  rx1598_restart:
    if_null rx1598_debug, debug_1138
    rx1598_cur."!cursor_debug"("NEXT", "blockoid")
  debug_1138:
  rx1598_fail:
    (rx1598_rep, rx1598_pos, $I10, $P10) = rx1598_cur."!mark_fail"(0)
    lt rx1598_pos, -1, rx1598_done
    eq rx1598_pos, -1, rx1598_fail
    jump $I10
  rx1598_done:
    rx1598_cur."!cursor_fail"()
    if_null rx1598_debug, debug_1139
    rx1598_cur."!cursor_debug"("FAIL", "blockoid")
  debug_1139:
    .return (rx1598_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__blockoid"  :subid("72_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 799
    $P104 = self."!PREFIX__!subrule"("finishpad", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "newpad"  :subid("73_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 808
    .local string rx1605_tgt
    .local int rx1605_pos
    .local int rx1605_off
    .local int rx1605_eos
    .local int rx1605_rep
    .local pmc rx1605_cur
    .local pmc rx1605_debug
    (rx1605_cur, rx1605_pos, rx1605_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1605_cur
    .local pmc match
    .lex "$/", match
    length rx1605_eos, rx1605_tgt
    gt rx1605_pos, rx1605_eos, rx1605_done
    set rx1605_off, 0
    lt rx1605_pos, 2, rx1605_start
    sub rx1605_off, rx1605_pos, 1
    substr rx1605_tgt, rx1605_tgt, rx1605_off
  rx1605_start:
    eq $I10, 1, rx1605_restart
    if_null rx1605_debug, debug_1140
    rx1605_cur."!cursor_debug"("START", "newpad")
  debug_1140:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1606_done
    goto rxscan1606_scan
  rxscan1606_loop:
    (rx1605_pos) = rx1605_cur."from"()
    inc rx1605_pos
    rx1605_cur."!cursor_from"(rx1605_pos)
    ge rx1605_pos, rx1605_eos, rxscan1606_done
  rxscan1606_scan:
    set_addr $I10, rxscan1606_loop
    rx1605_cur."!mark_push"(0, rx1605_pos, $I10)
  rxscan1606_done:
  # rx pass
    rx1605_cur."!cursor_pass"(rx1605_pos, "newpad")
    if_null rx1605_debug, debug_1141
    rx1605_cur."!cursor_debug"("PASS", "newpad", " at pos=", rx1605_pos)
  debug_1141:
    .return (rx1605_cur)
  rx1605_restart:
    if_null rx1605_debug, debug_1142
    rx1605_cur."!cursor_debug"("NEXT", "newpad")
  debug_1142:
  rx1605_fail:
    (rx1605_rep, rx1605_pos, $I10, $P10) = rx1605_cur."!mark_fail"(0)
    lt rx1605_pos, -1, rx1605_done
    eq rx1605_pos, -1, rx1605_fail
    jump $I10
  rx1605_done:
    rx1605_cur."!cursor_fail"()
    if_null rx1605_debug, debug_1143
    rx1605_cur."!cursor_debug"("FAIL", "newpad")
  debug_1143:
    .return (rx1605_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__newpad"  :subid("74_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 808
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "outerctx"  :subid("75_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 809
    .local string rx1609_tgt
    .local int rx1609_pos
    .local int rx1609_off
    .local int rx1609_eos
    .local int rx1609_rep
    .local pmc rx1609_cur
    .local pmc rx1609_debug
    (rx1609_cur, rx1609_pos, rx1609_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1609_cur
    .local pmc match
    .lex "$/", match
    length rx1609_eos, rx1609_tgt
    gt rx1609_pos, rx1609_eos, rx1609_done
    set rx1609_off, 0
    lt rx1609_pos, 2, rx1609_start
    sub rx1609_off, rx1609_pos, 1
    substr rx1609_tgt, rx1609_tgt, rx1609_off
  rx1609_start:
    eq $I10, 1, rx1609_restart
    if_null rx1609_debug, debug_1144
    rx1609_cur."!cursor_debug"("START", "outerctx")
  debug_1144:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1610_done
    goto rxscan1610_scan
  rxscan1610_loop:
    (rx1609_pos) = rx1609_cur."from"()
    inc rx1609_pos
    rx1609_cur."!cursor_from"(rx1609_pos)
    ge rx1609_pos, rx1609_eos, rxscan1610_done
  rxscan1610_scan:
    set_addr $I10, rxscan1610_loop
    rx1609_cur."!mark_push"(0, rx1609_pos, $I10)
  rxscan1610_done:
  # rx pass
    rx1609_cur."!cursor_pass"(rx1609_pos, "outerctx")
    if_null rx1609_debug, debug_1145
    rx1609_cur."!cursor_debug"("PASS", "outerctx", " at pos=", rx1609_pos)
  debug_1145:
    .return (rx1609_cur)
  rx1609_restart:
    if_null rx1609_debug, debug_1146
    rx1609_cur."!cursor_debug"("NEXT", "outerctx")
  debug_1146:
  rx1609_fail:
    (rx1609_rep, rx1609_pos, $I10, $P10) = rx1609_cur."!mark_fail"(0)
    lt rx1609_pos, -1, rx1609_done
    eq rx1609_pos, -1, rx1609_fail
    jump $I10
  rx1609_done:
    rx1609_cur."!cursor_fail"()
    if_null rx1609_debug, debug_1147
    rx1609_cur."!cursor_debug"("FAIL", "outerctx")
  debug_1147:
    .return (rx1609_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__outerctx"  :subid("76_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 809
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "GLOBALish"  :subid("77_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 810
    .local string rx1613_tgt
    .local int rx1613_pos
    .local int rx1613_off
    .local int rx1613_eos
    .local int rx1613_rep
    .local pmc rx1613_cur
    .local pmc rx1613_debug
    (rx1613_cur, rx1613_pos, rx1613_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1613_cur
    .local pmc match
    .lex "$/", match
    length rx1613_eos, rx1613_tgt
    gt rx1613_pos, rx1613_eos, rx1613_done
    set rx1613_off, 0
    lt rx1613_pos, 2, rx1613_start
    sub rx1613_off, rx1613_pos, 1
    substr rx1613_tgt, rx1613_tgt, rx1613_off
  rx1613_start:
    eq $I10, 1, rx1613_restart
    if_null rx1613_debug, debug_1148
    rx1613_cur."!cursor_debug"("START", "GLOBALish")
  debug_1148:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1614_done
    goto rxscan1614_scan
  rxscan1614_loop:
    (rx1613_pos) = rx1613_cur."from"()
    inc rx1613_pos
    rx1613_cur."!cursor_from"(rx1613_pos)
    ge rx1613_pos, rx1613_eos, rxscan1614_done
  rxscan1614_scan:
    set_addr $I10, rxscan1614_loop
    rx1613_cur."!mark_push"(0, rx1613_pos, $I10)
  rxscan1614_done:
  # rx pass
    rx1613_cur."!cursor_pass"(rx1613_pos, "GLOBALish")
    if_null rx1613_debug, debug_1149
    rx1613_cur."!cursor_debug"("PASS", "GLOBALish", " at pos=", rx1613_pos)
  debug_1149:
    .return (rx1613_cur)
  rx1613_restart:
    if_null rx1613_debug, debug_1150
    rx1613_cur."!cursor_debug"("NEXT", "GLOBALish")
  debug_1150:
  rx1613_fail:
    (rx1613_rep, rx1613_pos, $I10, $P10) = rx1613_cur."!mark_fail"(0)
    lt rx1613_pos, -1, rx1613_done
    eq rx1613_pos, -1, rx1613_fail
    jump $I10
  rx1613_done:
    rx1613_cur."!cursor_fail"()
    if_null rx1613_debug, debug_1151
    rx1613_cur."!cursor_debug"("FAIL", "GLOBALish")
  debug_1151:
    .return (rx1613_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__GLOBALish"  :subid("78_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 810
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "finishpad"  :subid("79_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 811
    .local string rx1617_tgt
    .local int rx1617_pos
    .local int rx1617_off
    .local int rx1617_eos
    .local int rx1617_rep
    .local pmc rx1617_cur
    .local pmc rx1617_debug
    (rx1617_cur, rx1617_pos, rx1617_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1617_cur
    .local pmc match
    .lex "$/", match
    length rx1617_eos, rx1617_tgt
    gt rx1617_pos, rx1617_eos, rx1617_done
    set rx1617_off, 0
    lt rx1617_pos, 2, rx1617_start
    sub rx1617_off, rx1617_pos, 1
    substr rx1617_tgt, rx1617_tgt, rx1617_off
  rx1617_start:
    eq $I10, 1, rx1617_restart
    if_null rx1617_debug, debug_1152
    rx1617_cur."!cursor_debug"("START", "finishpad")
  debug_1152:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1618_done
    goto rxscan1618_scan
  rxscan1618_loop:
    (rx1617_pos) = rx1617_cur."from"()
    inc rx1617_pos
    rx1617_cur."!cursor_from"(rx1617_pos)
    ge rx1617_pos, rx1617_eos, rxscan1618_done
  rxscan1618_scan:
    set_addr $I10, rxscan1618_loop
    rx1617_cur."!mark_push"(0, rx1617_pos, $I10)
  rxscan1618_done:
  # rx pass
    rx1617_cur."!cursor_pass"(rx1617_pos, "finishpad")
    if_null rx1617_debug, debug_1153
    rx1617_cur."!cursor_debug"("PASS", "finishpad", " at pos=", rx1617_pos)
  debug_1153:
    .return (rx1617_cur)
  rx1617_restart:
    if_null rx1617_debug, debug_1154
    rx1617_cur."!cursor_debug"("NEXT", "finishpad")
  debug_1154:
  rx1617_fail:
    (rx1617_rep, rx1617_pos, $I10, $P10) = rx1617_cur."!mark_fail"(0)
    lt rx1617_pos, -1, rx1617_done
    eq rx1617_pos, -1, rx1617_fail
    jump $I10
  rx1617_done:
    rx1617_cur."!cursor_fail"()
    if_null rx1617_debug, debug_1155
    rx1617_cur."!cursor_debug"("FAIL", "finishpad")
  debug_1155:
    .return (rx1617_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__finishpad"  :subid("80_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 811
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "you_are_here"  :subid("81_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 812
    .local string rx1621_tgt
    .local int rx1621_pos
    .local int rx1621_off
    .local int rx1621_eos
    .local int rx1621_rep
    .local pmc rx1621_cur
    .local pmc rx1621_debug
    (rx1621_cur, rx1621_pos, rx1621_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1621_cur
    .local pmc match
    .lex "$/", match
    length rx1621_eos, rx1621_tgt
    gt rx1621_pos, rx1621_eos, rx1621_done
    set rx1621_off, 0
    lt rx1621_pos, 2, rx1621_start
    sub rx1621_off, rx1621_pos, 1
    substr rx1621_tgt, rx1621_tgt, rx1621_off
  rx1621_start:
    eq $I10, 1, rx1621_restart
    if_null rx1621_debug, debug_1156
    rx1621_cur."!cursor_debug"("START", "you_are_here")
  debug_1156:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1622_done
    goto rxscan1622_scan
  rxscan1622_loop:
    (rx1621_pos) = rx1621_cur."from"()
    inc rx1621_pos
    rx1621_cur."!cursor_from"(rx1621_pos)
    ge rx1621_pos, rx1621_eos, rxscan1622_done
  rxscan1622_scan:
    set_addr $I10, rxscan1622_loop
    rx1621_cur."!mark_push"(0, rx1621_pos, $I10)
  rxscan1622_done:
  # rx pass
    rx1621_cur."!cursor_pass"(rx1621_pos, "you_are_here")
    if_null rx1621_debug, debug_1157
    rx1621_cur."!cursor_debug"("PASS", "you_are_here", " at pos=", rx1621_pos)
  debug_1157:
    .return (rx1621_cur)
  rx1621_restart:
    if_null rx1621_debug, debug_1158
    rx1621_cur."!cursor_debug"("NEXT", "you_are_here")
  debug_1158:
  rx1621_fail:
    (rx1621_rep, rx1621_pos, $I10, $P10) = rx1621_cur."!mark_fail"(0)
    lt rx1621_pos, -1, rx1621_done
    eq rx1621_pos, -1, rx1621_fail
    jump $I10
  rx1621_done:
    rx1621_cur."!cursor_fail"()
    if_null rx1621_debug, debug_1159
    rx1621_cur."!cursor_debug"("FAIL", "you_are_here")
  debug_1159:
    .return (rx1621_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__you_are_here"  :subid("82_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 812
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "terminator"  :subid("83_1334921493.34")
    .param pmc param_1625
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 814
    .lex "self", param_1625
    $P103 = param_1625."!protoregex"("terminator")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__terminator"  :subid("84_1334921493.34")
    .param pmc param_1627
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 814
    .lex "self", param_1627
    $P104 = param_1627."!PREFIX__!protoregex"("terminator")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "terminator:sym<;>"  :subid("85_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 816
    .local string rx1629_tgt
    .local int rx1629_pos
    .local int rx1629_off
    .local int rx1629_eos
    .local int rx1629_rep
    .local pmc rx1629_cur
    .local pmc rx1629_debug
    (rx1629_cur, rx1629_pos, rx1629_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1629_cur
    .local pmc match
    .lex "$/", match
    length rx1629_eos, rx1629_tgt
    gt rx1629_pos, rx1629_eos, rx1629_done
    set rx1629_off, 0
    lt rx1629_pos, 2, rx1629_start
    sub rx1629_off, rx1629_pos, 1
    substr rx1629_tgt, rx1629_tgt, rx1629_off
  rx1629_start:
    eq $I10, 1, rx1629_restart
    if_null rx1629_debug, debug_1160
    rx1629_cur."!cursor_debug"("START", "terminator:sym<;>")
  debug_1160:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1630_done
    goto rxscan1630_scan
  rxscan1630_loop:
    (rx1629_pos) = rx1629_cur."from"()
    inc rx1629_pos
    rx1629_cur."!cursor_from"(rx1629_pos)
    ge rx1629_pos, rx1629_eos, rxscan1630_done
  rxscan1630_scan:
    set_addr $I10, rxscan1630_loop
    rx1629_cur."!mark_push"(0, rx1629_pos, $I10)
  rxscan1630_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1629_pos, rx1629_off
    substr $S10, rx1629_tgt, $I10, 1
    index $I11, ";", $S10
    lt $I11, 0, rx1629_fail
  # rx pass
    rx1629_cur."!cursor_pass"(rx1629_pos, "terminator:sym<;>")
    if_null rx1629_debug, debug_1161
    rx1629_cur."!cursor_debug"("PASS", "terminator:sym<;>", " at pos=", rx1629_pos)
  debug_1161:
    .return (rx1629_cur)
  rx1629_restart:
    if_null rx1629_debug, debug_1162
    rx1629_cur."!cursor_debug"("NEXT", "terminator:sym<;>")
  debug_1162:
  rx1629_fail:
    (rx1629_rep, rx1629_pos, $I10, $P10) = rx1629_cur."!mark_fail"(0)
    lt rx1629_pos, -1, rx1629_done
    eq rx1629_pos, -1, rx1629_fail
    jump $I10
  rx1629_done:
    rx1629_cur."!cursor_fail"()
    if_null rx1629_debug, debug_1163
    rx1629_cur."!cursor_debug"("FAIL", "terminator:sym<;>")
  debug_1163:
    .return (rx1629_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__terminator:sym<;>"  :subid("86_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 816
    new $P103, "ResizablePMCArray"
    push $P103, ";"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "terminator:sym<}>"  :subid("87_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 817
    .local string rx1633_tgt
    .local int rx1633_pos
    .local int rx1633_off
    .local int rx1633_eos
    .local int rx1633_rep
    .local pmc rx1633_cur
    .local pmc rx1633_debug
    (rx1633_cur, rx1633_pos, rx1633_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1633_cur
    .local pmc match
    .lex "$/", match
    length rx1633_eos, rx1633_tgt
    gt rx1633_pos, rx1633_eos, rx1633_done
    set rx1633_off, 0
    lt rx1633_pos, 2, rx1633_start
    sub rx1633_off, rx1633_pos, 1
    substr rx1633_tgt, rx1633_tgt, rx1633_off
  rx1633_start:
    eq $I10, 1, rx1633_restart
    if_null rx1633_debug, debug_1164
    rx1633_cur."!cursor_debug"("START", "terminator:sym<}>")
  debug_1164:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1634_done
    goto rxscan1634_scan
  rxscan1634_loop:
    (rx1633_pos) = rx1633_cur."from"()
    inc rx1633_pos
    rx1633_cur."!cursor_from"(rx1633_pos)
    ge rx1633_pos, rx1633_eos, rxscan1634_done
  rxscan1634_scan:
    set_addr $I10, rxscan1634_loop
    rx1633_cur."!mark_push"(0, rx1633_pos, $I10)
  rxscan1634_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1633_pos, rx1633_off
    substr $S10, rx1633_tgt, $I10, 1
    index $I11, "}", $S10
    lt $I11, 0, rx1633_fail
  # rx pass
    rx1633_cur."!cursor_pass"(rx1633_pos, "terminator:sym<}>")
    if_null rx1633_debug, debug_1165
    rx1633_cur."!cursor_debug"("PASS", "terminator:sym<}>", " at pos=", rx1633_pos)
  debug_1165:
    .return (rx1633_cur)
  rx1633_restart:
    if_null rx1633_debug, debug_1166
    rx1633_cur."!cursor_debug"("NEXT", "terminator:sym<}>")
  debug_1166:
  rx1633_fail:
    (rx1633_rep, rx1633_pos, $I10, $P10) = rx1633_cur."!mark_fail"(0)
    lt rx1633_pos, -1, rx1633_done
    eq rx1633_pos, -1, rx1633_fail
    jump $I10
  rx1633_done:
    rx1633_cur."!cursor_fail"()
    if_null rx1633_debug, debug_1167
    rx1633_cur."!cursor_debug"("FAIL", "terminator:sym<}>")
  debug_1167:
    .return (rx1633_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__terminator:sym<}>"  :subid("88_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 817
    new $P103, "ResizablePMCArray"
    push $P103, "}"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control"  :subid("89_1334921493.34")
    .param pmc param_1637
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 821
    .lex "self", param_1637
    $P103 = param_1637."!protoregex"("statement_control")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control"  :subid("90_1334921493.34")
    .param pmc param_1639
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 821
    .lex "self", param_1639
    $P104 = param_1639."!PREFIX__!protoregex"("statement_control")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<use>"  :subid("91_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 823
    .local string rx1641_tgt
    .local int rx1641_pos
    .local int rx1641_off
    .local int rx1641_eos
    .local int rx1641_rep
    .local pmc rx1641_cur
    .local pmc rx1641_debug
    (rx1641_cur, rx1641_pos, rx1641_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1641_cur
    .local pmc match
    .lex "$/", match
    length rx1641_eos, rx1641_tgt
    gt rx1641_pos, rx1641_eos, rx1641_done
    set rx1641_off, 0
    lt rx1641_pos, 2, rx1641_start
    sub rx1641_off, rx1641_pos, 1
    substr rx1641_tgt, rx1641_tgt, rx1641_off
  rx1641_start:
    eq $I10, 1, rx1641_restart
    if_null rx1641_debug, debug_1168
    rx1641_cur."!cursor_debug"("START", "statement_control:sym<use>")
  debug_1168:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1642_done
    goto rxscan1642_scan
  rxscan1642_loop:
    (rx1641_pos) = rx1641_cur."from"()
    inc rx1641_pos
    rx1641_cur."!cursor_from"(rx1641_pos)
    ge rx1641_pos, rx1641_eos, rxscan1642_done
  rxscan1642_scan:
    set_addr $I10, rxscan1642_loop
    rx1641_cur."!mark_push"(0, rx1641_pos, $I10)
  rxscan1642_done:
.annotate 'line', 824
  # rx subcapture "sym"
    set_addr $I10, rxcap_1643_fail
    rx1641_cur."!mark_push"(0, rx1641_pos, $I10)
  # rx literal  "use"
    add $I11, rx1641_pos, 3
    gt $I11, rx1641_eos, rx1641_fail
    sub $I11, rx1641_pos, rx1641_off
    substr $S10, rx1641_tgt, $I11, 3
    ne $S10, "use", rx1641_fail
    add rx1641_pos, 3
    set_addr $I10, rxcap_1643_fail
    ($I12, $I11) = rx1641_cur."!mark_peek"($I10)
    rx1641_cur."!cursor_pos"($I11)
    ($P10) = rx1641_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1641_pos, "")
    rx1641_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1643_done
  rxcap_1643_fail:
    goto rx1641_fail
  rxcap_1643_done:
  # rx charclass s
    ge rx1641_pos, rx1641_eos, rx1641_fail
    sub $I10, rx1641_pos, rx1641_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1641_tgt, $I10
    unless $I11, rx1641_fail
    inc rx1641_pos
  # rx subrule "ws" subtype=method negate=
    rx1641_cur."!cursor_pos"(rx1641_pos)
    $P10 = rx1641_cur."ws"()
    unless $P10, rx1641_fail
    rx1641_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx1641_cur."!cursor_pos"(rx1641_pos)
    $P10 = rx1641_cur."name"()
    unless $P10, rx1641_fail
    rx1641_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx1641_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1641_cur."!cursor_pos"(rx1641_pos)
    $P10 = rx1641_cur."ws"()
    unless $P10, rx1641_fail
    rx1641_pos = $P10."pos"()
.annotate 'line', 823
  # rx pass
    rx1641_cur."!cursor_pass"(rx1641_pos, "statement_control:sym<use>")
    if_null rx1641_debug, debug_1169
    rx1641_cur."!cursor_debug"("PASS", "statement_control:sym<use>", " at pos=", rx1641_pos)
  debug_1169:
    .return (rx1641_cur)
  rx1641_restart:
    if_null rx1641_debug, debug_1170
    rx1641_cur."!cursor_debug"("NEXT", "statement_control:sym<use>")
  debug_1170:
  rx1641_fail:
    (rx1641_rep, rx1641_pos, $I10, $P10) = rx1641_cur."!mark_fail"(0)
    lt rx1641_pos, -1, rx1641_done
    eq rx1641_pos, -1, rx1641_fail
    jump $I10
  rx1641_done:
    rx1641_cur."!cursor_fail"()
    if_null rx1641_debug, debug_1171
    rx1641_cur."!cursor_debug"("FAIL", "statement_control:sym<use>")
  debug_1171:
    .return (rx1641_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<use>"  :subid("92_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 823
    new $P105, "ResizablePMCArray"
    push $P105, "use"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<if>"  :subid("93_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 827
    .local string rx1646_tgt
    .local int rx1646_pos
    .local int rx1646_off
    .local int rx1646_eos
    .local int rx1646_rep
    .local pmc rx1646_cur
    .local pmc rx1646_debug
    (rx1646_cur, rx1646_pos, rx1646_tgt, $I10) = self."!cursor_start"()
    rx1646_cur."!cursor_caparray"("xblock", "else")
    .lex unicode:"$\x{a2}", rx1646_cur
    .local pmc match
    .lex "$/", match
    length rx1646_eos, rx1646_tgt
    gt rx1646_pos, rx1646_eos, rx1646_done
    set rx1646_off, 0
    lt rx1646_pos, 2, rx1646_start
    sub rx1646_off, rx1646_pos, 1
    substr rx1646_tgt, rx1646_tgt, rx1646_off
  rx1646_start:
    eq $I10, 1, rx1646_restart
    if_null rx1646_debug, debug_1172
    rx1646_cur."!cursor_debug"("START", "statement_control:sym<if>")
  debug_1172:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1647_done
    goto rxscan1647_scan
  rxscan1647_loop:
    (rx1646_pos) = rx1646_cur."from"()
    inc rx1646_pos
    rx1646_cur."!cursor_from"(rx1646_pos)
    ge rx1646_pos, rx1646_eos, rxscan1647_done
  rxscan1647_scan:
    set_addr $I10, rxscan1647_loop
    rx1646_cur."!mark_push"(0, rx1646_pos, $I10)
  rxscan1647_done:
.annotate 'line', 828
  # rx subcapture "sym"
    set_addr $I10, rxcap_1648_fail
    rx1646_cur."!mark_push"(0, rx1646_pos, $I10)
  # rx literal  "if"
    add $I11, rx1646_pos, 2
    gt $I11, rx1646_eos, rx1646_fail
    sub $I11, rx1646_pos, rx1646_off
    substr $S10, rx1646_tgt, $I11, 2
    ne $S10, "if", rx1646_fail
    add rx1646_pos, 2
    set_addr $I10, rxcap_1648_fail
    ($I12, $I11) = rx1646_cur."!mark_peek"($I10)
    rx1646_cur."!cursor_pos"($I11)
    ($P10) = rx1646_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1646_pos, "")
    rx1646_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1648_done
  rxcap_1648_fail:
    goto rx1646_fail
  rxcap_1648_done:
  # rx charclass s
    ge rx1646_pos, rx1646_eos, rx1646_fail
    sub $I10, rx1646_pos, rx1646_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1646_tgt, $I10
    unless $I11, rx1646_fail
    inc rx1646_pos
  # rx subrule "ws" subtype=method negate=
    rx1646_cur."!cursor_pos"(rx1646_pos)
    $P10 = rx1646_cur."ws"()
    unless $P10, rx1646_fail
    rx1646_pos = $P10."pos"()
.annotate 'line', 829
  # rx subrule "xblock" subtype=capture negate=
    rx1646_cur."!cursor_pos"(rx1646_pos)
    $P10 = rx1646_cur."xblock"()
    unless $P10, rx1646_fail
    rx1646_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx1646_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1646_cur."!cursor_pos"(rx1646_pos)
    $P10 = rx1646_cur."ws"()
    unless $P10, rx1646_fail
    rx1646_pos = $P10."pos"()
.annotate 'line', 830
  # rx rxquantr1649 ** 0..*
    set_addr $I10, rxquantr1649_done
    rx1646_cur."!mark_push"(0, rx1646_pos, $I10)
  rxquantr1649_loop:
  # rx subrule "ws" subtype=method negate=
    rx1646_cur."!cursor_pos"(rx1646_pos)
    $P10 = rx1646_cur."ws"()
    unless $P10, rx1646_fail
    rx1646_pos = $P10."pos"()
  # rx literal  "elsif"
    add $I11, rx1646_pos, 5
    gt $I11, rx1646_eos, rx1646_fail
    sub $I11, rx1646_pos, rx1646_off
    substr $S10, rx1646_tgt, $I11, 5
    ne $S10, "elsif", rx1646_fail
    add rx1646_pos, 5
  # rx charclass s
    ge rx1646_pos, rx1646_eos, rx1646_fail
    sub $I10, rx1646_pos, rx1646_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1646_tgt, $I10
    unless $I11, rx1646_fail
    inc rx1646_pos
  # rx subrule "ws" subtype=method negate=
    rx1646_cur."!cursor_pos"(rx1646_pos)
    $P10 = rx1646_cur."ws"()
    unless $P10, rx1646_fail
    rx1646_pos = $P10."pos"()
  # rx subrule "xblock" subtype=capture negate=
    rx1646_cur."!cursor_pos"(rx1646_pos)
    $P10 = rx1646_cur."xblock"()
    unless $P10, rx1646_fail
    rx1646_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx1646_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1646_cur."!cursor_pos"(rx1646_pos)
    $P10 = rx1646_cur."ws"()
    unless $P10, rx1646_fail
    rx1646_pos = $P10."pos"()
    set_addr $I10, rxquantr1649_done
    (rx1646_rep) = rx1646_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1649_done
    rx1646_cur."!mark_push"(rx1646_rep, rx1646_pos, $I10)
    goto rxquantr1649_loop
  rxquantr1649_done:
  # rx subrule "ws" subtype=method negate=
    rx1646_cur."!cursor_pos"(rx1646_pos)
    $P10 = rx1646_cur."ws"()
    unless $P10, rx1646_fail
    rx1646_pos = $P10."pos"()
.annotate 'line', 831
  # rx rxquantr1650 ** 0..1
    set_addr $I10, rxquantr1650_done
    rx1646_cur."!mark_push"(0, rx1646_pos, $I10)
  rxquantr1650_loop:
  # rx subrule "ws" subtype=method negate=
    rx1646_cur."!cursor_pos"(rx1646_pos)
    $P10 = rx1646_cur."ws"()
    unless $P10, rx1646_fail
    rx1646_pos = $P10."pos"()
  # rx literal  "else"
    add $I11, rx1646_pos, 4
    gt $I11, rx1646_eos, rx1646_fail
    sub $I11, rx1646_pos, rx1646_off
    substr $S10, rx1646_tgt, $I11, 4
    ne $S10, "else", rx1646_fail
    add rx1646_pos, 4
  # rx charclass s
    ge rx1646_pos, rx1646_eos, rx1646_fail
    sub $I10, rx1646_pos, rx1646_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1646_tgt, $I10
    unless $I11, rx1646_fail
    inc rx1646_pos
  # rx subrule "ws" subtype=method negate=
    rx1646_cur."!cursor_pos"(rx1646_pos)
    $P10 = rx1646_cur."ws"()
    unless $P10, rx1646_fail
    rx1646_pos = $P10."pos"()
  # rx subrule "pblock" subtype=capture negate=
    rx1646_cur."!cursor_pos"(rx1646_pos)
    $P10 = rx1646_cur."pblock"()
    unless $P10, rx1646_fail
    rx1646_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("else")
    rx1646_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1646_cur."!cursor_pos"(rx1646_pos)
    $P10 = rx1646_cur."ws"()
    unless $P10, rx1646_fail
    rx1646_pos = $P10."pos"()
    set_addr $I10, rxquantr1650_done
    (rx1646_rep) = rx1646_cur."!mark_commit"($I10)
  rxquantr1650_done:
  # rx subrule "ws" subtype=method negate=
    rx1646_cur."!cursor_pos"(rx1646_pos)
    $P10 = rx1646_cur."ws"()
    unless $P10, rx1646_fail
    rx1646_pos = $P10."pos"()
.annotate 'line', 827
  # rx pass
    rx1646_cur."!cursor_pass"(rx1646_pos, "statement_control:sym<if>")
    if_null rx1646_debug, debug_1173
    rx1646_cur."!cursor_debug"("PASS", "statement_control:sym<if>", " at pos=", rx1646_pos)
  debug_1173:
    .return (rx1646_cur)
  rx1646_restart:
    if_null rx1646_debug, debug_1174
    rx1646_cur."!cursor_debug"("NEXT", "statement_control:sym<if>")
  debug_1174:
  rx1646_fail:
    (rx1646_rep, rx1646_pos, $I10, $P10) = rx1646_cur."!mark_fail"(0)
    lt rx1646_pos, -1, rx1646_done
    eq rx1646_pos, -1, rx1646_fail
    jump $I10
  rx1646_done:
    rx1646_cur."!cursor_fail"()
    if_null rx1646_debug, debug_1175
    rx1646_cur."!cursor_debug"("FAIL", "statement_control:sym<if>")
  debug_1175:
    .return (rx1646_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<if>"  :subid("94_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 827
    new $P113, "ResizablePMCArray"
    push $P113, "if"
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<unless>"  :subid("95_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 834
    .const 'Sub' $P1658 = "575_1334921493.34" 
    capture_lex $P1658
    .local string rx1653_tgt
    .local int rx1653_pos
    .local int rx1653_off
    .local int rx1653_eos
    .local int rx1653_rep
    .local pmc rx1653_cur
    .local pmc rx1653_debug
    (rx1653_cur, rx1653_pos, rx1653_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1653_cur
    .local pmc match
    .lex "$/", match
    length rx1653_eos, rx1653_tgt
    gt rx1653_pos, rx1653_eos, rx1653_done
    set rx1653_off, 0
    lt rx1653_pos, 2, rx1653_start
    sub rx1653_off, rx1653_pos, 1
    substr rx1653_tgt, rx1653_tgt, rx1653_off
  rx1653_start:
    eq $I10, 1, rx1653_restart
    if_null rx1653_debug, debug_1176
    rx1653_cur."!cursor_debug"("START", "statement_control:sym<unless>")
  debug_1176:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1654_done
    goto rxscan1654_scan
  rxscan1654_loop:
    (rx1653_pos) = rx1653_cur."from"()
    inc rx1653_pos
    rx1653_cur."!cursor_from"(rx1653_pos)
    ge rx1653_pos, rx1653_eos, rxscan1654_done
  rxscan1654_scan:
    set_addr $I10, rxscan1654_loop
    rx1653_cur."!mark_push"(0, rx1653_pos, $I10)
  rxscan1654_done:
.annotate 'line', 835
  # rx subcapture "sym"
    set_addr $I10, rxcap_1655_fail
    rx1653_cur."!mark_push"(0, rx1653_pos, $I10)
  # rx literal  "unless"
    add $I11, rx1653_pos, 6
    gt $I11, rx1653_eos, rx1653_fail
    sub $I11, rx1653_pos, rx1653_off
    substr $S10, rx1653_tgt, $I11, 6
    ne $S10, "unless", rx1653_fail
    add rx1653_pos, 6
    set_addr $I10, rxcap_1655_fail
    ($I12, $I11) = rx1653_cur."!mark_peek"($I10)
    rx1653_cur."!cursor_pos"($I11)
    ($P10) = rx1653_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1653_pos, "")
    rx1653_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1655_done
  rxcap_1655_fail:
    goto rx1653_fail
  rxcap_1655_done:
  # rx charclass s
    ge rx1653_pos, rx1653_eos, rx1653_fail
    sub $I10, rx1653_pos, rx1653_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1653_tgt, $I10
    unless $I11, rx1653_fail
    inc rx1653_pos
  # rx subrule "ws" subtype=method negate=
    rx1653_cur."!cursor_pos"(rx1653_pos)
    $P10 = rx1653_cur."ws"()
    unless $P10, rx1653_fail
    rx1653_pos = $P10."pos"()
.annotate 'line', 836
  # rx subrule "xblock" subtype=capture negate=
    rx1653_cur."!cursor_pos"(rx1653_pos)
    $P10 = rx1653_cur."xblock"()
    unless $P10, rx1653_fail
    rx1653_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx1653_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1653_cur."!cursor_pos"(rx1653_pos)
    $P10 = rx1653_cur."ws"()
    unless $P10, rx1653_fail
    rx1653_pos = $P10."pos"()
  alt1656_0:
.annotate 'line', 837
    set_addr $I10, alt1656_1
    rx1653_cur."!mark_push"(0, rx1653_pos, $I10)
  # rx subrule "ws" subtype=method negate=
    rx1653_cur."!cursor_pos"(rx1653_pos)
    $P10 = rx1653_cur."ws"()
    unless $P10, rx1653_fail
    rx1653_pos = $P10."pos"()
  # rx subrule "before" subtype=zerowidth negate=1
    rx1653_cur."!cursor_pos"(rx1653_pos)
    .const 'Sub' $P1658 = "575_1334921493.34" 
    capture_lex $P1658
    $P10 = rx1653_cur."before"($P1658)
    if $P10, rx1653_fail
  # rx subrule "ws" subtype=method negate=
    rx1653_cur."!cursor_pos"(rx1653_pos)
    $P10 = rx1653_cur."ws"()
    unless $P10, rx1653_fail
    rx1653_pos = $P10."pos"()
    goto alt1656_end
  alt1656_1:
  # rx subrule "ws" subtype=method negate=
    rx1653_cur."!cursor_pos"(rx1653_pos)
    $P10 = rx1653_cur."ws"()
    unless $P10, rx1653_fail
    rx1653_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx1653_cur."!cursor_pos"(rx1653_pos)
    $P10 = rx1653_cur."panic"("unless does not take \"else\", please rewrite using \"if\"")
    unless $P10, rx1653_fail
    rx1653_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1653_cur."!cursor_pos"(rx1653_pos)
    $P10 = rx1653_cur."ws"()
    unless $P10, rx1653_fail
    rx1653_pos = $P10."pos"()
  alt1656_end:
  # rx subrule "ws" subtype=method negate=
    rx1653_cur."!cursor_pos"(rx1653_pos)
    $P10 = rx1653_cur."ws"()
    unless $P10, rx1653_fail
    rx1653_pos = $P10."pos"()
.annotate 'line', 834
  # rx pass
    rx1653_cur."!cursor_pass"(rx1653_pos, "statement_control:sym<unless>")
    if_null rx1653_debug, debug_1181
    rx1653_cur."!cursor_debug"("PASS", "statement_control:sym<unless>", " at pos=", rx1653_pos)
  debug_1181:
    .return (rx1653_cur)
  rx1653_restart:
    if_null rx1653_debug, debug_1182
    rx1653_cur."!cursor_debug"("NEXT", "statement_control:sym<unless>")
  debug_1182:
  rx1653_fail:
    (rx1653_rep, rx1653_pos, $I10, $P10) = rx1653_cur."!mark_fail"(0)
    lt rx1653_pos, -1, rx1653_done
    eq rx1653_pos, -1, rx1653_fail
    jump $I10
  rx1653_done:
    rx1653_cur."!cursor_fail"()
    if_null rx1653_debug, debug_1183
    rx1653_cur."!cursor_debug"("FAIL", "statement_control:sym<unless>")
  debug_1183:
    .return (rx1653_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1657"  :anon :subid("575_1334921493.34") :method :outer("95_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 837
    .local string rx1659_tgt
    .local int rx1659_pos
    .local int rx1659_off
    .local int rx1659_eos
    .local int rx1659_rep
    .local pmc rx1659_cur
    .local pmc rx1659_debug
    (rx1659_cur, rx1659_pos, rx1659_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1659_cur
    .local pmc match
    .lex "$/", match
    length rx1659_eos, rx1659_tgt
    gt rx1659_pos, rx1659_eos, rx1659_done
    set rx1659_off, 0
    lt rx1659_pos, 2, rx1659_start
    sub rx1659_off, rx1659_pos, 1
    substr rx1659_tgt, rx1659_tgt, rx1659_off
  rx1659_start:
    eq $I10, 1, rx1659_restart
    if_null rx1659_debug, debug_1177
    rx1659_cur."!cursor_debug"("START", "")
  debug_1177:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1660_done
    goto rxscan1660_scan
  rxscan1660_loop:
    (rx1659_pos) = rx1659_cur."from"()
    inc rx1659_pos
    rx1659_cur."!cursor_from"(rx1659_pos)
    ge rx1659_pos, rx1659_eos, rxscan1660_done
  rxscan1660_scan:
    set_addr $I10, rxscan1660_loop
    rx1659_cur."!mark_push"(0, rx1659_pos, $I10)
  rxscan1660_done:
  # rx literal  "else"
    add $I11, rx1659_pos, 4
    gt $I11, rx1659_eos, rx1659_fail
    sub $I11, rx1659_pos, rx1659_off
    substr $S10, rx1659_tgt, $I11, 4
    ne $S10, "else", rx1659_fail
    add rx1659_pos, 4
  # rx pass
    rx1659_cur."!cursor_pass"(rx1659_pos, "")
    if_null rx1659_debug, debug_1178
    rx1659_cur."!cursor_debug"("PASS", "", " at pos=", rx1659_pos)
  debug_1178:
    .return (rx1659_cur)
  rx1659_restart:
    if_null rx1659_debug, debug_1179
    rx1659_cur."!cursor_debug"("NEXT", "")
  debug_1179:
  rx1659_fail:
    (rx1659_rep, rx1659_pos, $I10, $P10) = rx1659_cur."!mark_fail"(0)
    lt rx1659_pos, -1, rx1659_done
    eq rx1659_pos, -1, rx1659_fail
    jump $I10
  rx1659_done:
    rx1659_cur."!cursor_fail"()
    if_null rx1659_debug, debug_1180
    rx1659_cur."!cursor_debug"("FAIL", "")
  debug_1180:
    .return (rx1659_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<unless>"  :subid("96_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 834
    new $P110, "ResizablePMCArray"
    push $P110, "unless"
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<while>"  :subid("97_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 840
    .local string rx1663_tgt
    .local int rx1663_pos
    .local int rx1663_off
    .local int rx1663_eos
    .local int rx1663_rep
    .local pmc rx1663_cur
    .local pmc rx1663_debug
    (rx1663_cur, rx1663_pos, rx1663_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1663_cur
    .local pmc match
    .lex "$/", match
    length rx1663_eos, rx1663_tgt
    gt rx1663_pos, rx1663_eos, rx1663_done
    set rx1663_off, 0
    lt rx1663_pos, 2, rx1663_start
    sub rx1663_off, rx1663_pos, 1
    substr rx1663_tgt, rx1663_tgt, rx1663_off
  rx1663_start:
    eq $I10, 1, rx1663_restart
    if_null rx1663_debug, debug_1184
    rx1663_cur."!cursor_debug"("START", "statement_control:sym<while>")
  debug_1184:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1664_done
    goto rxscan1664_scan
  rxscan1664_loop:
    (rx1663_pos) = rx1663_cur."from"()
    inc rx1663_pos
    rx1663_cur."!cursor_from"(rx1663_pos)
    ge rx1663_pos, rx1663_eos, rxscan1664_done
  rxscan1664_scan:
    set_addr $I10, rxscan1664_loop
    rx1663_cur."!mark_push"(0, rx1663_pos, $I10)
  rxscan1664_done:
.annotate 'line', 841
  # rx subcapture "sym"
    set_addr $I10, rxcap_1666_fail
    rx1663_cur."!mark_push"(0, rx1663_pos, $I10)
  alt1665_0:
    set_addr $I10, alt1665_1
    rx1663_cur."!mark_push"(0, rx1663_pos, $I10)
  # rx literal  "while"
    add $I11, rx1663_pos, 5
    gt $I11, rx1663_eos, rx1663_fail
    sub $I11, rx1663_pos, rx1663_off
    substr $S10, rx1663_tgt, $I11, 5
    ne $S10, "while", rx1663_fail
    add rx1663_pos, 5
    goto alt1665_end
  alt1665_1:
  # rx literal  "until"
    add $I11, rx1663_pos, 5
    gt $I11, rx1663_eos, rx1663_fail
    sub $I11, rx1663_pos, rx1663_off
    substr $S10, rx1663_tgt, $I11, 5
    ne $S10, "until", rx1663_fail
    add rx1663_pos, 5
  alt1665_end:
    set_addr $I10, rxcap_1666_fail
    ($I12, $I11) = rx1663_cur."!mark_peek"($I10)
    rx1663_cur."!cursor_pos"($I11)
    ($P10) = rx1663_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1663_pos, "")
    rx1663_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1666_done
  rxcap_1666_fail:
    goto rx1663_fail
  rxcap_1666_done:
  # rx charclass s
    ge rx1663_pos, rx1663_eos, rx1663_fail
    sub $I10, rx1663_pos, rx1663_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1663_tgt, $I10
    unless $I11, rx1663_fail
    inc rx1663_pos
  # rx subrule "ws" subtype=method negate=
    rx1663_cur."!cursor_pos"(rx1663_pos)
    $P10 = rx1663_cur."ws"()
    unless $P10, rx1663_fail
    rx1663_pos = $P10."pos"()
.annotate 'line', 842
  # rx subrule "xblock" subtype=capture negate=
    rx1663_cur."!cursor_pos"(rx1663_pos)
    $P10 = rx1663_cur."xblock"()
    unless $P10, rx1663_fail
    rx1663_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx1663_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1663_cur."!cursor_pos"(rx1663_pos)
    $P10 = rx1663_cur."ws"()
    unless $P10, rx1663_fail
    rx1663_pos = $P10."pos"()
.annotate 'line', 840
  # rx pass
    rx1663_cur."!cursor_pass"(rx1663_pos, "statement_control:sym<while>")
    if_null rx1663_debug, debug_1185
    rx1663_cur."!cursor_debug"("PASS", "statement_control:sym<while>", " at pos=", rx1663_pos)
  debug_1185:
    .return (rx1663_cur)
  rx1663_restart:
    if_null rx1663_debug, debug_1186
    rx1663_cur."!cursor_debug"("NEXT", "statement_control:sym<while>")
  debug_1186:
  rx1663_fail:
    (rx1663_rep, rx1663_pos, $I10, $P10) = rx1663_cur."!mark_fail"(0)
    lt rx1663_pos, -1, rx1663_done
    eq rx1663_pos, -1, rx1663_fail
    jump $I10
  rx1663_done:
    rx1663_cur."!cursor_fail"()
    if_null rx1663_debug, debug_1187
    rx1663_cur."!cursor_debug"("FAIL", "statement_control:sym<while>")
  debug_1187:
    .return (rx1663_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<while>"  :subid("98_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 840
    new $P105, "ResizablePMCArray"
    push $P105, "until"
    push $P105, "while"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<repeat>"  :subid("99_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 845
    .local string rx1669_tgt
    .local int rx1669_pos
    .local int rx1669_off
    .local int rx1669_eos
    .local int rx1669_rep
    .local pmc rx1669_cur
    .local pmc rx1669_debug
    (rx1669_cur, rx1669_pos, rx1669_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1669_cur
    .local pmc match
    .lex "$/", match
    length rx1669_eos, rx1669_tgt
    gt rx1669_pos, rx1669_eos, rx1669_done
    set rx1669_off, 0
    lt rx1669_pos, 2, rx1669_start
    sub rx1669_off, rx1669_pos, 1
    substr rx1669_tgt, rx1669_tgt, rx1669_off
  rx1669_start:
    eq $I10, 1, rx1669_restart
    if_null rx1669_debug, debug_1188
    rx1669_cur."!cursor_debug"("START", "statement_control:sym<repeat>")
  debug_1188:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1670_done
    goto rxscan1670_scan
  rxscan1670_loop:
    (rx1669_pos) = rx1669_cur."from"()
    inc rx1669_pos
    rx1669_cur."!cursor_from"(rx1669_pos)
    ge rx1669_pos, rx1669_eos, rxscan1670_done
  rxscan1670_scan:
    set_addr $I10, rxscan1670_loop
    rx1669_cur."!mark_push"(0, rx1669_pos, $I10)
  rxscan1670_done:
.annotate 'line', 846
  # rx subcapture "sym"
    set_addr $I10, rxcap_1671_fail
    rx1669_cur."!mark_push"(0, rx1669_pos, $I10)
  # rx literal  "repeat"
    add $I11, rx1669_pos, 6
    gt $I11, rx1669_eos, rx1669_fail
    sub $I11, rx1669_pos, rx1669_off
    substr $S10, rx1669_tgt, $I11, 6
    ne $S10, "repeat", rx1669_fail
    add rx1669_pos, 6
    set_addr $I10, rxcap_1671_fail
    ($I12, $I11) = rx1669_cur."!mark_peek"($I10)
    rx1669_cur."!cursor_pos"($I11)
    ($P10) = rx1669_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1669_pos, "")
    rx1669_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1671_done
  rxcap_1671_fail:
    goto rx1669_fail
  rxcap_1671_done:
  # rx charclass s
    ge rx1669_pos, rx1669_eos, rx1669_fail
    sub $I10, rx1669_pos, rx1669_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1669_tgt, $I10
    unless $I11, rx1669_fail
    inc rx1669_pos
  # rx subrule "ws" subtype=method negate=
    rx1669_cur."!cursor_pos"(rx1669_pos)
    $P10 = rx1669_cur."ws"()
    unless $P10, rx1669_fail
    rx1669_pos = $P10."pos"()
  alt1672_0:
.annotate 'line', 847
    set_addr $I10, alt1672_1
    rx1669_cur."!mark_push"(0, rx1669_pos, $I10)
.annotate 'line', 848
  # rx subrule "ws" subtype=method negate=
    rx1669_cur."!cursor_pos"(rx1669_pos)
    $P10 = rx1669_cur."ws"()
    unless $P10, rx1669_fail
    rx1669_pos = $P10."pos"()
  # rx subcapture "wu"
    set_addr $I10, rxcap_1674_fail
    rx1669_cur."!mark_push"(0, rx1669_pos, $I10)
  alt1673_0:
    set_addr $I10, alt1673_1
    rx1669_cur."!mark_push"(0, rx1669_pos, $I10)
  # rx literal  "while"
    add $I11, rx1669_pos, 5
    gt $I11, rx1669_eos, rx1669_fail
    sub $I11, rx1669_pos, rx1669_off
    substr $S10, rx1669_tgt, $I11, 5
    ne $S10, "while", rx1669_fail
    add rx1669_pos, 5
    goto alt1673_end
  alt1673_1:
  # rx literal  "until"
    add $I11, rx1669_pos, 5
    gt $I11, rx1669_eos, rx1669_fail
    sub $I11, rx1669_pos, rx1669_off
    substr $S10, rx1669_tgt, $I11, 5
    ne $S10, "until", rx1669_fail
    add rx1669_pos, 5
  alt1673_end:
    set_addr $I10, rxcap_1674_fail
    ($I12, $I11) = rx1669_cur."!mark_peek"($I10)
    rx1669_cur."!cursor_pos"($I11)
    ($P10) = rx1669_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1669_pos, "")
    rx1669_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("wu")
    goto rxcap_1674_done
  rxcap_1674_fail:
    goto rx1669_fail
  rxcap_1674_done:
  # rx charclass s
    ge rx1669_pos, rx1669_eos, rx1669_fail
    sub $I10, rx1669_pos, rx1669_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1669_tgt, $I10
    unless $I11, rx1669_fail
    inc rx1669_pos
  # rx subrule "ws" subtype=method negate=
    rx1669_cur."!cursor_pos"(rx1669_pos)
    $P10 = rx1669_cur."ws"()
    unless $P10, rx1669_fail
    rx1669_pos = $P10."pos"()
  # rx subrule "xblock" subtype=capture negate=
    rx1669_cur."!cursor_pos"(rx1669_pos)
    $P10 = rx1669_cur."xblock"()
    unless $P10, rx1669_fail
    rx1669_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx1669_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1669_cur."!cursor_pos"(rx1669_pos)
    $P10 = rx1669_cur."ws"()
    unless $P10, rx1669_fail
    rx1669_pos = $P10."pos"()
    goto alt1672_end
  alt1672_1:
.annotate 'line', 849
  # rx subrule "ws" subtype=method negate=
    rx1669_cur."!cursor_pos"(rx1669_pos)
    $P10 = rx1669_cur."ws"()
    unless $P10, rx1669_fail
    rx1669_pos = $P10."pos"()
  # rx subrule "pblock" subtype=capture negate=
    rx1669_cur."!cursor_pos"(rx1669_pos)
    $P10 = rx1669_cur."pblock"()
    unless $P10, rx1669_fail
    rx1669_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("pblock")
    rx1669_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1669_cur."!cursor_pos"(rx1669_pos)
    $P10 = rx1669_cur."ws"()
    unless $P10, rx1669_fail
    rx1669_pos = $P10."pos"()
  # rx subcapture "wu"
    set_addr $I10, rxcap_1676_fail
    rx1669_cur."!mark_push"(0, rx1669_pos, $I10)
  alt1675_0:
    set_addr $I10, alt1675_1
    rx1669_cur."!mark_push"(0, rx1669_pos, $I10)
  # rx literal  "while"
    add $I11, rx1669_pos, 5
    gt $I11, rx1669_eos, rx1669_fail
    sub $I11, rx1669_pos, rx1669_off
    substr $S10, rx1669_tgt, $I11, 5
    ne $S10, "while", rx1669_fail
    add rx1669_pos, 5
    goto alt1675_end
  alt1675_1:
  # rx literal  "until"
    add $I11, rx1669_pos, 5
    gt $I11, rx1669_eos, rx1669_fail
    sub $I11, rx1669_pos, rx1669_off
    substr $S10, rx1669_tgt, $I11, 5
    ne $S10, "until", rx1669_fail
    add rx1669_pos, 5
  alt1675_end:
    set_addr $I10, rxcap_1676_fail
    ($I12, $I11) = rx1669_cur."!mark_peek"($I10)
    rx1669_cur."!cursor_pos"($I11)
    ($P10) = rx1669_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1669_pos, "")
    rx1669_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("wu")
    goto rxcap_1676_done
  rxcap_1676_fail:
    goto rx1669_fail
  rxcap_1676_done:
  # rx charclass s
    ge rx1669_pos, rx1669_eos, rx1669_fail
    sub $I10, rx1669_pos, rx1669_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1669_tgt, $I10
    unless $I11, rx1669_fail
    inc rx1669_pos
  # rx subrule "ws" subtype=method negate=
    rx1669_cur."!cursor_pos"(rx1669_pos)
    $P10 = rx1669_cur."ws"()
    unless $P10, rx1669_fail
    rx1669_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1669_cur."!cursor_pos"(rx1669_pos)
    $P10 = rx1669_cur."EXPR"()
    unless $P10, rx1669_fail
    rx1669_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx1669_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1669_cur."!cursor_pos"(rx1669_pos)
    $P10 = rx1669_cur."ws"()
    unless $P10, rx1669_fail
    rx1669_pos = $P10."pos"()
  alt1672_end:
.annotate 'line', 850
  # rx subrule "ws" subtype=method negate=
    rx1669_cur."!cursor_pos"(rx1669_pos)
    $P10 = rx1669_cur."ws"()
    unless $P10, rx1669_fail
    rx1669_pos = $P10."pos"()
.annotate 'line', 845
  # rx pass
    rx1669_cur."!cursor_pass"(rx1669_pos, "statement_control:sym<repeat>")
    if_null rx1669_debug, debug_1189
    rx1669_cur."!cursor_debug"("PASS", "statement_control:sym<repeat>", " at pos=", rx1669_pos)
  debug_1189:
    .return (rx1669_cur)
  rx1669_restart:
    if_null rx1669_debug, debug_1190
    rx1669_cur."!cursor_debug"("NEXT", "statement_control:sym<repeat>")
  debug_1190:
  rx1669_fail:
    (rx1669_rep, rx1669_pos, $I10, $P10) = rx1669_cur."!mark_fail"(0)
    lt rx1669_pos, -1, rx1669_done
    eq rx1669_pos, -1, rx1669_fail
    jump $I10
  rx1669_done:
    rx1669_cur."!cursor_fail"()
    if_null rx1669_debug, debug_1191
    rx1669_cur."!cursor_debug"("FAIL", "statement_control:sym<repeat>")
  debug_1191:
    .return (rx1669_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<repeat>"  :subid("100_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 845
    new $P112, "ResizablePMCArray"
    push $P112, "repeat"
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<for>"  :subid("101_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 853
    .local string rx1679_tgt
    .local int rx1679_pos
    .local int rx1679_off
    .local int rx1679_eos
    .local int rx1679_rep
    .local pmc rx1679_cur
    .local pmc rx1679_debug
    (rx1679_cur, rx1679_pos, rx1679_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1679_cur
    .local pmc match
    .lex "$/", match
    length rx1679_eos, rx1679_tgt
    gt rx1679_pos, rx1679_eos, rx1679_done
    set rx1679_off, 0
    lt rx1679_pos, 2, rx1679_start
    sub rx1679_off, rx1679_pos, 1
    substr rx1679_tgt, rx1679_tgt, rx1679_off
  rx1679_start:
    eq $I10, 1, rx1679_restart
    if_null rx1679_debug, debug_1192
    rx1679_cur."!cursor_debug"("START", "statement_control:sym<for>")
  debug_1192:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1680_done
    goto rxscan1680_scan
  rxscan1680_loop:
    (rx1679_pos) = rx1679_cur."from"()
    inc rx1679_pos
    rx1679_cur."!cursor_from"(rx1679_pos)
    ge rx1679_pos, rx1679_eos, rxscan1680_done
  rxscan1680_scan:
    set_addr $I10, rxscan1680_loop
    rx1679_cur."!mark_push"(0, rx1679_pos, $I10)
  rxscan1680_done:
.annotate 'line', 854
  # rx subcapture "sym"
    set_addr $I10, rxcap_1681_fail
    rx1679_cur."!mark_push"(0, rx1679_pos, $I10)
  # rx literal  "for"
    add $I11, rx1679_pos, 3
    gt $I11, rx1679_eos, rx1679_fail
    sub $I11, rx1679_pos, rx1679_off
    substr $S10, rx1679_tgt, $I11, 3
    ne $S10, "for", rx1679_fail
    add rx1679_pos, 3
    set_addr $I10, rxcap_1681_fail
    ($I12, $I11) = rx1679_cur."!mark_peek"($I10)
    rx1679_cur."!cursor_pos"($I11)
    ($P10) = rx1679_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1679_pos, "")
    rx1679_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1681_done
  rxcap_1681_fail:
    goto rx1679_fail
  rxcap_1681_done:
  # rx charclass s
    ge rx1679_pos, rx1679_eos, rx1679_fail
    sub $I10, rx1679_pos, rx1679_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1679_tgt, $I10
    unless $I11, rx1679_fail
    inc rx1679_pos
  # rx subrule "ws" subtype=method negate=
    rx1679_cur."!cursor_pos"(rx1679_pos)
    $P10 = rx1679_cur."ws"()
    unless $P10, rx1679_fail
    rx1679_pos = $P10."pos"()
.annotate 'line', 855
  # rx subrule "xblock" subtype=capture negate=
    rx1679_cur."!cursor_pos"(rx1679_pos)
    $P10 = rx1679_cur."xblock"()
    unless $P10, rx1679_fail
    rx1679_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx1679_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1679_cur."!cursor_pos"(rx1679_pos)
    $P10 = rx1679_cur."ws"()
    unless $P10, rx1679_fail
    rx1679_pos = $P10."pos"()
.annotate 'line', 853
  # rx pass
    rx1679_cur."!cursor_pass"(rx1679_pos, "statement_control:sym<for>")
    if_null rx1679_debug, debug_1193
    rx1679_cur."!cursor_debug"("PASS", "statement_control:sym<for>", " at pos=", rx1679_pos)
  debug_1193:
    .return (rx1679_cur)
  rx1679_restart:
    if_null rx1679_debug, debug_1194
    rx1679_cur."!cursor_debug"("NEXT", "statement_control:sym<for>")
  debug_1194:
  rx1679_fail:
    (rx1679_rep, rx1679_pos, $I10, $P10) = rx1679_cur."!mark_fail"(0)
    lt rx1679_pos, -1, rx1679_done
    eq rx1679_pos, -1, rx1679_fail
    jump $I10
  rx1679_done:
    rx1679_cur."!cursor_fail"()
    if_null rx1679_debug, debug_1195
    rx1679_cur."!cursor_debug"("FAIL", "statement_control:sym<for>")
  debug_1195:
    .return (rx1679_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<for>"  :subid("102_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 853
    new $P105, "ResizablePMCArray"
    push $P105, "for"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<CATCH>"  :subid("103_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 858
    .local string rx1684_tgt
    .local int rx1684_pos
    .local int rx1684_off
    .local int rx1684_eos
    .local int rx1684_rep
    .local pmc rx1684_cur
    .local pmc rx1684_debug
    (rx1684_cur, rx1684_pos, rx1684_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1684_cur
    .local pmc match
    .lex "$/", match
    length rx1684_eos, rx1684_tgt
    gt rx1684_pos, rx1684_eos, rx1684_done
    set rx1684_off, 0
    lt rx1684_pos, 2, rx1684_start
    sub rx1684_off, rx1684_pos, 1
    substr rx1684_tgt, rx1684_tgt, rx1684_off
  rx1684_start:
    eq $I10, 1, rx1684_restart
    if_null rx1684_debug, debug_1196
    rx1684_cur."!cursor_debug"("START", "statement_control:sym<CATCH>")
  debug_1196:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1685_done
    goto rxscan1685_scan
  rxscan1685_loop:
    (rx1684_pos) = rx1684_cur."from"()
    inc rx1684_pos
    rx1684_cur."!cursor_from"(rx1684_pos)
    ge rx1684_pos, rx1684_eos, rxscan1685_done
  rxscan1685_scan:
    set_addr $I10, rxscan1685_loop
    rx1684_cur."!mark_push"(0, rx1684_pos, $I10)
  rxscan1685_done:
.annotate 'line', 859
  # rx subcapture "sym"
    set_addr $I10, rxcap_1686_fail
    rx1684_cur."!mark_push"(0, rx1684_pos, $I10)
  # rx literal  "CATCH"
    add $I11, rx1684_pos, 5
    gt $I11, rx1684_eos, rx1684_fail
    sub $I11, rx1684_pos, rx1684_off
    substr $S10, rx1684_tgt, $I11, 5
    ne $S10, "CATCH", rx1684_fail
    add rx1684_pos, 5
    set_addr $I10, rxcap_1686_fail
    ($I12, $I11) = rx1684_cur."!mark_peek"($I10)
    rx1684_cur."!cursor_pos"($I11)
    ($P10) = rx1684_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1684_pos, "")
    rx1684_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1686_done
  rxcap_1686_fail:
    goto rx1684_fail
  rxcap_1686_done:
  # rx charclass s
    ge rx1684_pos, rx1684_eos, rx1684_fail
    sub $I10, rx1684_pos, rx1684_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1684_tgt, $I10
    unless $I11, rx1684_fail
    inc rx1684_pos
  # rx subrule "ws" subtype=method negate=
    rx1684_cur."!cursor_pos"(rx1684_pos)
    $P10 = rx1684_cur."ws"()
    unless $P10, rx1684_fail
    rx1684_pos = $P10."pos"()
.annotate 'line', 860
  # rx subrule "block" subtype=capture negate=
    rx1684_cur."!cursor_pos"(rx1684_pos)
    $P10 = rx1684_cur."block"()
    unless $P10, rx1684_fail
    rx1684_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx1684_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1684_cur."!cursor_pos"(rx1684_pos)
    $P10 = rx1684_cur."ws"()
    unless $P10, rx1684_fail
    rx1684_pos = $P10."pos"()
.annotate 'line', 858
  # rx pass
    rx1684_cur."!cursor_pass"(rx1684_pos, "statement_control:sym<CATCH>")
    if_null rx1684_debug, debug_1197
    rx1684_cur."!cursor_debug"("PASS", "statement_control:sym<CATCH>", " at pos=", rx1684_pos)
  debug_1197:
    .return (rx1684_cur)
  rx1684_restart:
    if_null rx1684_debug, debug_1198
    rx1684_cur."!cursor_debug"("NEXT", "statement_control:sym<CATCH>")
  debug_1198:
  rx1684_fail:
    (rx1684_rep, rx1684_pos, $I10, $P10) = rx1684_cur."!mark_fail"(0)
    lt rx1684_pos, -1, rx1684_done
    eq rx1684_pos, -1, rx1684_fail
    jump $I10
  rx1684_done:
    rx1684_cur."!cursor_fail"()
    if_null rx1684_debug, debug_1199
    rx1684_cur."!cursor_debug"("FAIL", "statement_control:sym<CATCH>")
  debug_1199:
    .return (rx1684_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<CATCH>"  :subid("104_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 858
    new $P105, "ResizablePMCArray"
    push $P105, "CATCH"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<CONTROL>"  :subid("105_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 863
    .local string rx1689_tgt
    .local int rx1689_pos
    .local int rx1689_off
    .local int rx1689_eos
    .local int rx1689_rep
    .local pmc rx1689_cur
    .local pmc rx1689_debug
    (rx1689_cur, rx1689_pos, rx1689_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1689_cur
    .local pmc match
    .lex "$/", match
    length rx1689_eos, rx1689_tgt
    gt rx1689_pos, rx1689_eos, rx1689_done
    set rx1689_off, 0
    lt rx1689_pos, 2, rx1689_start
    sub rx1689_off, rx1689_pos, 1
    substr rx1689_tgt, rx1689_tgt, rx1689_off
  rx1689_start:
    eq $I10, 1, rx1689_restart
    if_null rx1689_debug, debug_1200
    rx1689_cur."!cursor_debug"("START", "statement_control:sym<CONTROL>")
  debug_1200:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1690_done
    goto rxscan1690_scan
  rxscan1690_loop:
    (rx1689_pos) = rx1689_cur."from"()
    inc rx1689_pos
    rx1689_cur."!cursor_from"(rx1689_pos)
    ge rx1689_pos, rx1689_eos, rxscan1690_done
  rxscan1690_scan:
    set_addr $I10, rxscan1690_loop
    rx1689_cur."!mark_push"(0, rx1689_pos, $I10)
  rxscan1690_done:
.annotate 'line', 864
  # rx subcapture "sym"
    set_addr $I10, rxcap_1691_fail
    rx1689_cur."!mark_push"(0, rx1689_pos, $I10)
  # rx literal  "CONTROL"
    add $I11, rx1689_pos, 7
    gt $I11, rx1689_eos, rx1689_fail
    sub $I11, rx1689_pos, rx1689_off
    substr $S10, rx1689_tgt, $I11, 7
    ne $S10, "CONTROL", rx1689_fail
    add rx1689_pos, 7
    set_addr $I10, rxcap_1691_fail
    ($I12, $I11) = rx1689_cur."!mark_peek"($I10)
    rx1689_cur."!cursor_pos"($I11)
    ($P10) = rx1689_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1689_pos, "")
    rx1689_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1691_done
  rxcap_1691_fail:
    goto rx1689_fail
  rxcap_1691_done:
  # rx charclass s
    ge rx1689_pos, rx1689_eos, rx1689_fail
    sub $I10, rx1689_pos, rx1689_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1689_tgt, $I10
    unless $I11, rx1689_fail
    inc rx1689_pos
  # rx subrule "ws" subtype=method negate=
    rx1689_cur."!cursor_pos"(rx1689_pos)
    $P10 = rx1689_cur."ws"()
    unless $P10, rx1689_fail
    rx1689_pos = $P10."pos"()
.annotate 'line', 865
  # rx subrule "block" subtype=capture negate=
    rx1689_cur."!cursor_pos"(rx1689_pos)
    $P10 = rx1689_cur."block"()
    unless $P10, rx1689_fail
    rx1689_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx1689_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1689_cur."!cursor_pos"(rx1689_pos)
    $P10 = rx1689_cur."ws"()
    unless $P10, rx1689_fail
    rx1689_pos = $P10."pos"()
.annotate 'line', 863
  # rx pass
    rx1689_cur."!cursor_pass"(rx1689_pos, "statement_control:sym<CONTROL>")
    if_null rx1689_debug, debug_1201
    rx1689_cur."!cursor_debug"("PASS", "statement_control:sym<CONTROL>", " at pos=", rx1689_pos)
  debug_1201:
    .return (rx1689_cur)
  rx1689_restart:
    if_null rx1689_debug, debug_1202
    rx1689_cur."!cursor_debug"("NEXT", "statement_control:sym<CONTROL>")
  debug_1202:
  rx1689_fail:
    (rx1689_rep, rx1689_pos, $I10, $P10) = rx1689_cur."!mark_fail"(0)
    lt rx1689_pos, -1, rx1689_done
    eq rx1689_pos, -1, rx1689_fail
    jump $I10
  rx1689_done:
    rx1689_cur."!cursor_fail"()
    if_null rx1689_debug, debug_1203
    rx1689_cur."!cursor_debug"("FAIL", "statement_control:sym<CONTROL>")
  debug_1203:
    .return (rx1689_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<CONTROL>"  :subid("106_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 863
    new $P105, "ResizablePMCArray"
    push $P105, "CONTROL"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix"  :subid("107_1334921493.34")
    .param pmc param_1694
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 868
    .lex "self", param_1694
    $P103 = param_1694."!protoregex"("statement_prefix")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_prefix"  :subid("108_1334921493.34")
    .param pmc param_1696
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 868
    .lex "self", param_1696
    $P104 = param_1696."!PREFIX__!protoregex"("statement_prefix")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix:sym<BEGIN>"  :subid("109_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 869
    .local string rx1698_tgt
    .local int rx1698_pos
    .local int rx1698_off
    .local int rx1698_eos
    .local int rx1698_rep
    .local pmc rx1698_cur
    .local pmc rx1698_debug
    (rx1698_cur, rx1698_pos, rx1698_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1698_cur
    .local pmc match
    .lex "$/", match
    length rx1698_eos, rx1698_tgt
    gt rx1698_pos, rx1698_eos, rx1698_done
    set rx1698_off, 0
    lt rx1698_pos, 2, rx1698_start
    sub rx1698_off, rx1698_pos, 1
    substr rx1698_tgt, rx1698_tgt, rx1698_off
  rx1698_start:
    eq $I10, 1, rx1698_restart
    if_null rx1698_debug, debug_1204
    rx1698_cur."!cursor_debug"("START", "statement_prefix:sym<BEGIN>")
  debug_1204:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1699_done
    goto rxscan1699_scan
  rxscan1699_loop:
    (rx1698_pos) = rx1698_cur."from"()
    inc rx1698_pos
    rx1698_cur."!cursor_from"(rx1698_pos)
    ge rx1698_pos, rx1698_eos, rxscan1699_done
  rxscan1699_scan:
    set_addr $I10, rxscan1699_loop
    rx1698_cur."!mark_push"(0, rx1698_pos, $I10)
  rxscan1699_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1700_fail
    rx1698_cur."!mark_push"(0, rx1698_pos, $I10)
  # rx literal  "BEGIN"
    add $I11, rx1698_pos, 5
    gt $I11, rx1698_eos, rx1698_fail
    sub $I11, rx1698_pos, rx1698_off
    substr $S10, rx1698_tgt, $I11, 5
    ne $S10, "BEGIN", rx1698_fail
    add rx1698_pos, 5
    set_addr $I10, rxcap_1700_fail
    ($I12, $I11) = rx1698_cur."!mark_peek"($I10)
    rx1698_cur."!cursor_pos"($I11)
    ($P10) = rx1698_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1698_pos, "")
    rx1698_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1700_done
  rxcap_1700_fail:
    goto rx1698_fail
  rxcap_1700_done:
  # rx subrule "blorst" subtype=capture negate=
    rx1698_cur."!cursor_pos"(rx1698_pos)
    $P10 = rx1698_cur."blorst"()
    unless $P10, rx1698_fail
    rx1698_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blorst")
    rx1698_pos = $P10."pos"()
  # rx pass
    rx1698_cur."!cursor_pass"(rx1698_pos, "statement_prefix:sym<BEGIN>")
    if_null rx1698_debug, debug_1205
    rx1698_cur."!cursor_debug"("PASS", "statement_prefix:sym<BEGIN>", " at pos=", rx1698_pos)
  debug_1205:
    .return (rx1698_cur)
  rx1698_restart:
    if_null rx1698_debug, debug_1206
    rx1698_cur."!cursor_debug"("NEXT", "statement_prefix:sym<BEGIN>")
  debug_1206:
  rx1698_fail:
    (rx1698_rep, rx1698_pos, $I10, $P10) = rx1698_cur."!mark_fail"(0)
    lt rx1698_pos, -1, rx1698_done
    eq rx1698_pos, -1, rx1698_fail
    jump $I10
  rx1698_done:
    rx1698_cur."!cursor_fail"()
    if_null rx1698_debug, debug_1207
    rx1698_cur."!cursor_debug"("FAIL", "statement_prefix:sym<BEGIN>")
  debug_1207:
    .return (rx1698_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_prefix:sym<BEGIN>"  :subid("110_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 869
    $P103 = self."!PREFIX__!subrule"("blorst", "BEGIN")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix:sym<INIT>"  :subid("111_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 870
    .local string rx1703_tgt
    .local int rx1703_pos
    .local int rx1703_off
    .local int rx1703_eos
    .local int rx1703_rep
    .local pmc rx1703_cur
    .local pmc rx1703_debug
    (rx1703_cur, rx1703_pos, rx1703_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1703_cur
    .local pmc match
    .lex "$/", match
    length rx1703_eos, rx1703_tgt
    gt rx1703_pos, rx1703_eos, rx1703_done
    set rx1703_off, 0
    lt rx1703_pos, 2, rx1703_start
    sub rx1703_off, rx1703_pos, 1
    substr rx1703_tgt, rx1703_tgt, rx1703_off
  rx1703_start:
    eq $I10, 1, rx1703_restart
    if_null rx1703_debug, debug_1208
    rx1703_cur."!cursor_debug"("START", "statement_prefix:sym<INIT>")
  debug_1208:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1704_done
    goto rxscan1704_scan
  rxscan1704_loop:
    (rx1703_pos) = rx1703_cur."from"()
    inc rx1703_pos
    rx1703_cur."!cursor_from"(rx1703_pos)
    ge rx1703_pos, rx1703_eos, rxscan1704_done
  rxscan1704_scan:
    set_addr $I10, rxscan1704_loop
    rx1703_cur."!mark_push"(0, rx1703_pos, $I10)
  rxscan1704_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1705_fail
    rx1703_cur."!mark_push"(0, rx1703_pos, $I10)
  # rx literal  "INIT"
    add $I11, rx1703_pos, 4
    gt $I11, rx1703_eos, rx1703_fail
    sub $I11, rx1703_pos, rx1703_off
    substr $S10, rx1703_tgt, $I11, 4
    ne $S10, "INIT", rx1703_fail
    add rx1703_pos, 4
    set_addr $I10, rxcap_1705_fail
    ($I12, $I11) = rx1703_cur."!mark_peek"($I10)
    rx1703_cur."!cursor_pos"($I11)
    ($P10) = rx1703_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1703_pos, "")
    rx1703_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1705_done
  rxcap_1705_fail:
    goto rx1703_fail
  rxcap_1705_done:
  # rx subrule "blorst" subtype=capture negate=
    rx1703_cur."!cursor_pos"(rx1703_pos)
    $P10 = rx1703_cur."blorst"()
    unless $P10, rx1703_fail
    rx1703_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blorst")
    rx1703_pos = $P10."pos"()
  # rx pass
    rx1703_cur."!cursor_pass"(rx1703_pos, "statement_prefix:sym<INIT>")
    if_null rx1703_debug, debug_1209
    rx1703_cur."!cursor_debug"("PASS", "statement_prefix:sym<INIT>", " at pos=", rx1703_pos)
  debug_1209:
    .return (rx1703_cur)
  rx1703_restart:
    if_null rx1703_debug, debug_1210
    rx1703_cur."!cursor_debug"("NEXT", "statement_prefix:sym<INIT>")
  debug_1210:
  rx1703_fail:
    (rx1703_rep, rx1703_pos, $I10, $P10) = rx1703_cur."!mark_fail"(0)
    lt rx1703_pos, -1, rx1703_done
    eq rx1703_pos, -1, rx1703_fail
    jump $I10
  rx1703_done:
    rx1703_cur."!cursor_fail"()
    if_null rx1703_debug, debug_1211
    rx1703_cur."!cursor_debug"("FAIL", "statement_prefix:sym<INIT>")
  debug_1211:
    .return (rx1703_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_prefix:sym<INIT>"  :subid("112_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 870
    $P103 = self."!PREFIX__!subrule"("blorst", "INIT")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix:sym<try>"  :subid("113_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 872
    .local string rx1708_tgt
    .local int rx1708_pos
    .local int rx1708_off
    .local int rx1708_eos
    .local int rx1708_rep
    .local pmc rx1708_cur
    .local pmc rx1708_debug
    (rx1708_cur, rx1708_pos, rx1708_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1708_cur
    .local pmc match
    .lex "$/", match
    length rx1708_eos, rx1708_tgt
    gt rx1708_pos, rx1708_eos, rx1708_done
    set rx1708_off, 0
    lt rx1708_pos, 2, rx1708_start
    sub rx1708_off, rx1708_pos, 1
    substr rx1708_tgt, rx1708_tgt, rx1708_off
  rx1708_start:
    eq $I10, 1, rx1708_restart
    if_null rx1708_debug, debug_1212
    rx1708_cur."!cursor_debug"("START", "statement_prefix:sym<try>")
  debug_1212:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1709_done
    goto rxscan1709_scan
  rxscan1709_loop:
    (rx1708_pos) = rx1708_cur."from"()
    inc rx1708_pos
    rx1708_cur."!cursor_from"(rx1708_pos)
    ge rx1708_pos, rx1708_eos, rxscan1709_done
  rxscan1709_scan:
    set_addr $I10, rxscan1709_loop
    rx1708_cur."!mark_push"(0, rx1708_pos, $I10)
  rxscan1709_done:
.annotate 'line', 873
  # rx subcapture "sym"
    set_addr $I10, rxcap_1710_fail
    rx1708_cur."!mark_push"(0, rx1708_pos, $I10)
  # rx literal  "try"
    add $I11, rx1708_pos, 3
    gt $I11, rx1708_eos, rx1708_fail
    sub $I11, rx1708_pos, rx1708_off
    substr $S10, rx1708_tgt, $I11, 3
    ne $S10, "try", rx1708_fail
    add rx1708_pos, 3
    set_addr $I10, rxcap_1710_fail
    ($I12, $I11) = rx1708_cur."!mark_peek"($I10)
    rx1708_cur."!cursor_pos"($I11)
    ($P10) = rx1708_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1708_pos, "")
    rx1708_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1710_done
  rxcap_1710_fail:
    goto rx1708_fail
  rxcap_1710_done:
.annotate 'line', 874
  # rx subrule "blorst" subtype=capture negate=
    rx1708_cur."!cursor_pos"(rx1708_pos)
    $P10 = rx1708_cur."blorst"()
    unless $P10, rx1708_fail
    rx1708_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blorst")
    rx1708_pos = $P10."pos"()
.annotate 'line', 872
  # rx pass
    rx1708_cur."!cursor_pass"(rx1708_pos, "statement_prefix:sym<try>")
    if_null rx1708_debug, debug_1213
    rx1708_cur."!cursor_debug"("PASS", "statement_prefix:sym<try>", " at pos=", rx1708_pos)
  debug_1213:
    .return (rx1708_cur)
  rx1708_restart:
    if_null rx1708_debug, debug_1214
    rx1708_cur."!cursor_debug"("NEXT", "statement_prefix:sym<try>")
  debug_1214:
  rx1708_fail:
    (rx1708_rep, rx1708_pos, $I10, $P10) = rx1708_cur."!mark_fail"(0)
    lt rx1708_pos, -1, rx1708_done
    eq rx1708_pos, -1, rx1708_fail
    jump $I10
  rx1708_done:
    rx1708_cur."!cursor_fail"()
    if_null rx1708_debug, debug_1215
    rx1708_cur."!cursor_debug"("FAIL", "statement_prefix:sym<try>")
  debug_1215:
    .return (rx1708_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_prefix:sym<try>"  :subid("114_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 872
    $P103 = self."!PREFIX__!subrule"("blorst", "try")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "blorst"  :subid("115_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 877
    .local string rx1713_tgt
    .local int rx1713_pos
    .local int rx1713_off
    .local int rx1713_eos
    .local int rx1713_rep
    .local pmc rx1713_cur
    .local pmc rx1713_debug
    (rx1713_cur, rx1713_pos, rx1713_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1713_cur
    .local pmc match
    .lex "$/", match
    length rx1713_eos, rx1713_tgt
    gt rx1713_pos, rx1713_eos, rx1713_done
    set rx1713_off, 0
    lt rx1713_pos, 2, rx1713_start
    sub rx1713_off, rx1713_pos, 1
    substr rx1713_tgt, rx1713_tgt, rx1713_off
  rx1713_start:
    eq $I10, 1, rx1713_restart
    if_null rx1713_debug, debug_1216
    rx1713_cur."!cursor_debug"("START", "blorst")
  debug_1216:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1714_done
    goto rxscan1714_scan
  rxscan1714_loop:
    (rx1713_pos) = rx1713_cur."from"()
    inc rx1713_pos
    rx1713_cur."!cursor_from"(rx1713_pos)
    ge rx1713_pos, rx1713_eos, rxscan1714_done
  rxscan1714_scan:
    set_addr $I10, rxscan1714_loop
    rx1713_cur."!mark_push"(0, rx1713_pos, $I10)
  rxscan1714_done:
.annotate 'line', 878
  # rx charclass s
    ge rx1713_pos, rx1713_eos, rx1713_fail
    sub $I10, rx1713_pos, rx1713_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1713_tgt, $I10
    unless $I11, rx1713_fail
    inc rx1713_pos
  # rx subrule "ws" subtype=method negate=
    rx1713_cur."!cursor_pos"(rx1713_pos)
    $P10 = rx1713_cur."ws"()
    unless $P10, rx1713_fail
    rx1713_pos = $P10."pos"()
  alt1715_0:
    set_addr $I10, alt1715_1
    rx1713_cur."!mark_push"(0, rx1713_pos, $I10)
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1713_pos, rx1713_off
    substr $S10, rx1713_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx1713_fail
  # rx subrule "block" subtype=capture negate=
    rx1713_cur."!cursor_pos"(rx1713_pos)
    $P10 = rx1713_cur."block"()
    unless $P10, rx1713_fail
    rx1713_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx1713_pos = $P10."pos"()
    goto alt1715_end
  alt1715_1:
  # rx subrule "statement" subtype=capture negate=
    rx1713_cur."!cursor_pos"(rx1713_pos)
    $P10 = rx1713_cur."statement"()
    unless $P10, rx1713_fail
    rx1713_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement")
    rx1713_pos = $P10."pos"()
  alt1715_end:
.annotate 'line', 877
  # rx pass
    rx1713_cur."!cursor_pass"(rx1713_pos, "blorst")
    if_null rx1713_debug, debug_1217
    rx1713_cur."!cursor_debug"("PASS", "blorst", " at pos=", rx1713_pos)
  debug_1217:
    .return (rx1713_cur)
  rx1713_restart:
    if_null rx1713_debug, debug_1218
    rx1713_cur."!cursor_debug"("NEXT", "blorst")
  debug_1218:
  rx1713_fail:
    (rx1713_rep, rx1713_pos, $I10, $P10) = rx1713_cur."!mark_fail"(0)
    lt rx1713_pos, -1, rx1713_done
    eq rx1713_pos, -1, rx1713_fail
    jump $I10
  rx1713_done:
    rx1713_cur."!cursor_fail"()
    if_null rx1713_debug, debug_1219
    rx1713_cur."!cursor_debug"("FAIL", "blorst")
  debug_1219:
    .return (rx1713_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__blorst"  :subid("116_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 877
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_cond"  :subid("117_1334921493.34")
    .param pmc param_1718
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 883
    .lex "self", param_1718
    $P103 = param_1718."!protoregex"("statement_mod_cond")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_cond"  :subid("118_1334921493.34")
    .param pmc param_1720
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 883
    .lex "self", param_1720
    $P104 = param_1720."!PREFIX__!protoregex"("statement_mod_cond")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_cond:sym<if>"  :subid("119_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 885
    .local string rx1722_tgt
    .local int rx1722_pos
    .local int rx1722_off
    .local int rx1722_eos
    .local int rx1722_rep
    .local pmc rx1722_cur
    .local pmc rx1722_debug
    (rx1722_cur, rx1722_pos, rx1722_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1722_cur
    .local pmc match
    .lex "$/", match
    length rx1722_eos, rx1722_tgt
    gt rx1722_pos, rx1722_eos, rx1722_done
    set rx1722_off, 0
    lt rx1722_pos, 2, rx1722_start
    sub rx1722_off, rx1722_pos, 1
    substr rx1722_tgt, rx1722_tgt, rx1722_off
  rx1722_start:
    eq $I10, 1, rx1722_restart
    if_null rx1722_debug, debug_1220
    rx1722_cur."!cursor_debug"("START", "statement_mod_cond:sym<if>")
  debug_1220:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1723_done
    goto rxscan1723_scan
  rxscan1723_loop:
    (rx1722_pos) = rx1722_cur."from"()
    inc rx1722_pos
    rx1722_cur."!cursor_from"(rx1722_pos)
    ge rx1722_pos, rx1722_eos, rxscan1723_done
  rxscan1723_scan:
    set_addr $I10, rxscan1723_loop
    rx1722_cur."!mark_push"(0, rx1722_pos, $I10)
  rxscan1723_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1724_fail
    rx1722_cur."!mark_push"(0, rx1722_pos, $I10)
  # rx literal  "if"
    add $I11, rx1722_pos, 2
    gt $I11, rx1722_eos, rx1722_fail
    sub $I11, rx1722_pos, rx1722_off
    substr $S10, rx1722_tgt, $I11, 2
    ne $S10, "if", rx1722_fail
    add rx1722_pos, 2
    set_addr $I10, rxcap_1724_fail
    ($I12, $I11) = rx1722_cur."!mark_peek"($I10)
    rx1722_cur."!cursor_pos"($I11)
    ($P10) = rx1722_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1722_pos, "")
    rx1722_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1724_done
  rxcap_1724_fail:
    goto rx1722_fail
  rxcap_1724_done:
  # rx subrule "ws" subtype=method negate=
    rx1722_cur."!cursor_pos"(rx1722_pos)
    $P10 = rx1722_cur."ws"()
    unless $P10, rx1722_fail
    rx1722_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1722_cur."!cursor_pos"(rx1722_pos)
    $P10 = rx1722_cur."EXPR"()
    unless $P10, rx1722_fail
    rx1722_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx1722_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1722_cur."!cursor_pos"(rx1722_pos)
    $P10 = rx1722_cur."ws"()
    unless $P10, rx1722_fail
    rx1722_pos = $P10."pos"()
  # rx pass
    rx1722_cur."!cursor_pass"(rx1722_pos, "statement_mod_cond:sym<if>")
    if_null rx1722_debug, debug_1221
    rx1722_cur."!cursor_debug"("PASS", "statement_mod_cond:sym<if>", " at pos=", rx1722_pos)
  debug_1221:
    .return (rx1722_cur)
  rx1722_restart:
    if_null rx1722_debug, debug_1222
    rx1722_cur."!cursor_debug"("NEXT", "statement_mod_cond:sym<if>")
  debug_1222:
  rx1722_fail:
    (rx1722_rep, rx1722_pos, $I10, $P10) = rx1722_cur."!mark_fail"(0)
    lt rx1722_pos, -1, rx1722_done
    eq rx1722_pos, -1, rx1722_fail
    jump $I10
  rx1722_done:
    rx1722_cur."!cursor_fail"()
    if_null rx1722_debug, debug_1223
    rx1722_cur."!cursor_debug"("FAIL", "statement_mod_cond:sym<if>")
  debug_1223:
    .return (rx1722_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_cond:sym<if>"  :subid("120_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 885
    $P105 = self."!PREFIX__!subrule"("ws", "if")
    new $P106, "ResizablePMCArray"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_cond:sym<unless>"  :subid("121_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 886
    .local string rx1727_tgt
    .local int rx1727_pos
    .local int rx1727_off
    .local int rx1727_eos
    .local int rx1727_rep
    .local pmc rx1727_cur
    .local pmc rx1727_debug
    (rx1727_cur, rx1727_pos, rx1727_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1727_cur
    .local pmc match
    .lex "$/", match
    length rx1727_eos, rx1727_tgt
    gt rx1727_pos, rx1727_eos, rx1727_done
    set rx1727_off, 0
    lt rx1727_pos, 2, rx1727_start
    sub rx1727_off, rx1727_pos, 1
    substr rx1727_tgt, rx1727_tgt, rx1727_off
  rx1727_start:
    eq $I10, 1, rx1727_restart
    if_null rx1727_debug, debug_1224
    rx1727_cur."!cursor_debug"("START", "statement_mod_cond:sym<unless>")
  debug_1224:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1728_done
    goto rxscan1728_scan
  rxscan1728_loop:
    (rx1727_pos) = rx1727_cur."from"()
    inc rx1727_pos
    rx1727_cur."!cursor_from"(rx1727_pos)
    ge rx1727_pos, rx1727_eos, rxscan1728_done
  rxscan1728_scan:
    set_addr $I10, rxscan1728_loop
    rx1727_cur."!mark_push"(0, rx1727_pos, $I10)
  rxscan1728_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1729_fail
    rx1727_cur."!mark_push"(0, rx1727_pos, $I10)
  # rx literal  "unless"
    add $I11, rx1727_pos, 6
    gt $I11, rx1727_eos, rx1727_fail
    sub $I11, rx1727_pos, rx1727_off
    substr $S10, rx1727_tgt, $I11, 6
    ne $S10, "unless", rx1727_fail
    add rx1727_pos, 6
    set_addr $I10, rxcap_1729_fail
    ($I12, $I11) = rx1727_cur."!mark_peek"($I10)
    rx1727_cur."!cursor_pos"($I11)
    ($P10) = rx1727_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1727_pos, "")
    rx1727_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1729_done
  rxcap_1729_fail:
    goto rx1727_fail
  rxcap_1729_done:
  # rx subrule "ws" subtype=method negate=
    rx1727_cur."!cursor_pos"(rx1727_pos)
    $P10 = rx1727_cur."ws"()
    unless $P10, rx1727_fail
    rx1727_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1727_cur."!cursor_pos"(rx1727_pos)
    $P10 = rx1727_cur."EXPR"()
    unless $P10, rx1727_fail
    rx1727_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx1727_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1727_cur."!cursor_pos"(rx1727_pos)
    $P10 = rx1727_cur."ws"()
    unless $P10, rx1727_fail
    rx1727_pos = $P10."pos"()
  # rx pass
    rx1727_cur."!cursor_pass"(rx1727_pos, "statement_mod_cond:sym<unless>")
    if_null rx1727_debug, debug_1225
    rx1727_cur."!cursor_debug"("PASS", "statement_mod_cond:sym<unless>", " at pos=", rx1727_pos)
  debug_1225:
    .return (rx1727_cur)
  rx1727_restart:
    if_null rx1727_debug, debug_1226
    rx1727_cur."!cursor_debug"("NEXT", "statement_mod_cond:sym<unless>")
  debug_1226:
  rx1727_fail:
    (rx1727_rep, rx1727_pos, $I10, $P10) = rx1727_cur."!mark_fail"(0)
    lt rx1727_pos, -1, rx1727_done
    eq rx1727_pos, -1, rx1727_fail
    jump $I10
  rx1727_done:
    rx1727_cur."!cursor_fail"()
    if_null rx1727_debug, debug_1227
    rx1727_cur."!cursor_debug"("FAIL", "statement_mod_cond:sym<unless>")
  debug_1227:
    .return (rx1727_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_cond:sym<unless>"  :subid("122_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 886
    $P105 = self."!PREFIX__!subrule"("ws", "unless")
    new $P106, "ResizablePMCArray"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop"  :subid("123_1334921493.34")
    .param pmc param_1732
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 888
    .lex "self", param_1732
    $P103 = param_1732."!protoregex"("statement_mod_loop")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_loop"  :subid("124_1334921493.34")
    .param pmc param_1734
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 888
    .lex "self", param_1734
    $P104 = param_1734."!PREFIX__!protoregex"("statement_mod_loop")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop:sym<while>"  :subid("125_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 890
    .local string rx1736_tgt
    .local int rx1736_pos
    .local int rx1736_off
    .local int rx1736_eos
    .local int rx1736_rep
    .local pmc rx1736_cur
    .local pmc rx1736_debug
    (rx1736_cur, rx1736_pos, rx1736_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1736_cur
    .local pmc match
    .lex "$/", match
    length rx1736_eos, rx1736_tgt
    gt rx1736_pos, rx1736_eos, rx1736_done
    set rx1736_off, 0
    lt rx1736_pos, 2, rx1736_start
    sub rx1736_off, rx1736_pos, 1
    substr rx1736_tgt, rx1736_tgt, rx1736_off
  rx1736_start:
    eq $I10, 1, rx1736_restart
    if_null rx1736_debug, debug_1228
    rx1736_cur."!cursor_debug"("START", "statement_mod_loop:sym<while>")
  debug_1228:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1737_done
    goto rxscan1737_scan
  rxscan1737_loop:
    (rx1736_pos) = rx1736_cur."from"()
    inc rx1736_pos
    rx1736_cur."!cursor_from"(rx1736_pos)
    ge rx1736_pos, rx1736_eos, rxscan1737_done
  rxscan1737_scan:
    set_addr $I10, rxscan1737_loop
    rx1736_cur."!mark_push"(0, rx1736_pos, $I10)
  rxscan1737_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1738_fail
    rx1736_cur."!mark_push"(0, rx1736_pos, $I10)
  # rx literal  "while"
    add $I11, rx1736_pos, 5
    gt $I11, rx1736_eos, rx1736_fail
    sub $I11, rx1736_pos, rx1736_off
    substr $S10, rx1736_tgt, $I11, 5
    ne $S10, "while", rx1736_fail
    add rx1736_pos, 5
    set_addr $I10, rxcap_1738_fail
    ($I12, $I11) = rx1736_cur."!mark_peek"($I10)
    rx1736_cur."!cursor_pos"($I11)
    ($P10) = rx1736_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1736_pos, "")
    rx1736_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1738_done
  rxcap_1738_fail:
    goto rx1736_fail
  rxcap_1738_done:
  # rx subrule "ws" subtype=method negate=
    rx1736_cur."!cursor_pos"(rx1736_pos)
    $P10 = rx1736_cur."ws"()
    unless $P10, rx1736_fail
    rx1736_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1736_cur."!cursor_pos"(rx1736_pos)
    $P10 = rx1736_cur."EXPR"()
    unless $P10, rx1736_fail
    rx1736_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx1736_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1736_cur."!cursor_pos"(rx1736_pos)
    $P10 = rx1736_cur."ws"()
    unless $P10, rx1736_fail
    rx1736_pos = $P10."pos"()
  # rx pass
    rx1736_cur."!cursor_pass"(rx1736_pos, "statement_mod_loop:sym<while>")
    if_null rx1736_debug, debug_1229
    rx1736_cur."!cursor_debug"("PASS", "statement_mod_loop:sym<while>", " at pos=", rx1736_pos)
  debug_1229:
    .return (rx1736_cur)
  rx1736_restart:
    if_null rx1736_debug, debug_1230
    rx1736_cur."!cursor_debug"("NEXT", "statement_mod_loop:sym<while>")
  debug_1230:
  rx1736_fail:
    (rx1736_rep, rx1736_pos, $I10, $P10) = rx1736_cur."!mark_fail"(0)
    lt rx1736_pos, -1, rx1736_done
    eq rx1736_pos, -1, rx1736_fail
    jump $I10
  rx1736_done:
    rx1736_cur."!cursor_fail"()
    if_null rx1736_debug, debug_1231
    rx1736_cur."!cursor_debug"("FAIL", "statement_mod_loop:sym<while>")
  debug_1231:
    .return (rx1736_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_loop:sym<while>"  :subid("126_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 890
    $P105 = self."!PREFIX__!subrule"("ws", "while")
    new $P106, "ResizablePMCArray"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop:sym<until>"  :subid("127_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 891
    .local string rx1741_tgt
    .local int rx1741_pos
    .local int rx1741_off
    .local int rx1741_eos
    .local int rx1741_rep
    .local pmc rx1741_cur
    .local pmc rx1741_debug
    (rx1741_cur, rx1741_pos, rx1741_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1741_cur
    .local pmc match
    .lex "$/", match
    length rx1741_eos, rx1741_tgt
    gt rx1741_pos, rx1741_eos, rx1741_done
    set rx1741_off, 0
    lt rx1741_pos, 2, rx1741_start
    sub rx1741_off, rx1741_pos, 1
    substr rx1741_tgt, rx1741_tgt, rx1741_off
  rx1741_start:
    eq $I10, 1, rx1741_restart
    if_null rx1741_debug, debug_1232
    rx1741_cur."!cursor_debug"("START", "statement_mod_loop:sym<until>")
  debug_1232:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1742_done
    goto rxscan1742_scan
  rxscan1742_loop:
    (rx1741_pos) = rx1741_cur."from"()
    inc rx1741_pos
    rx1741_cur."!cursor_from"(rx1741_pos)
    ge rx1741_pos, rx1741_eos, rxscan1742_done
  rxscan1742_scan:
    set_addr $I10, rxscan1742_loop
    rx1741_cur."!mark_push"(0, rx1741_pos, $I10)
  rxscan1742_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1743_fail
    rx1741_cur."!mark_push"(0, rx1741_pos, $I10)
  # rx literal  "until"
    add $I11, rx1741_pos, 5
    gt $I11, rx1741_eos, rx1741_fail
    sub $I11, rx1741_pos, rx1741_off
    substr $S10, rx1741_tgt, $I11, 5
    ne $S10, "until", rx1741_fail
    add rx1741_pos, 5
    set_addr $I10, rxcap_1743_fail
    ($I12, $I11) = rx1741_cur."!mark_peek"($I10)
    rx1741_cur."!cursor_pos"($I11)
    ($P10) = rx1741_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1741_pos, "")
    rx1741_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1743_done
  rxcap_1743_fail:
    goto rx1741_fail
  rxcap_1743_done:
  # rx subrule "ws" subtype=method negate=
    rx1741_cur."!cursor_pos"(rx1741_pos)
    $P10 = rx1741_cur."ws"()
    unless $P10, rx1741_fail
    rx1741_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1741_cur."!cursor_pos"(rx1741_pos)
    $P10 = rx1741_cur."EXPR"()
    unless $P10, rx1741_fail
    rx1741_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx1741_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1741_cur."!cursor_pos"(rx1741_pos)
    $P10 = rx1741_cur."ws"()
    unless $P10, rx1741_fail
    rx1741_pos = $P10."pos"()
  # rx pass
    rx1741_cur."!cursor_pass"(rx1741_pos, "statement_mod_loop:sym<until>")
    if_null rx1741_debug, debug_1233
    rx1741_cur."!cursor_debug"("PASS", "statement_mod_loop:sym<until>", " at pos=", rx1741_pos)
  debug_1233:
    .return (rx1741_cur)
  rx1741_restart:
    if_null rx1741_debug, debug_1234
    rx1741_cur."!cursor_debug"("NEXT", "statement_mod_loop:sym<until>")
  debug_1234:
  rx1741_fail:
    (rx1741_rep, rx1741_pos, $I10, $P10) = rx1741_cur."!mark_fail"(0)
    lt rx1741_pos, -1, rx1741_done
    eq rx1741_pos, -1, rx1741_fail
    jump $I10
  rx1741_done:
    rx1741_cur."!cursor_fail"()
    if_null rx1741_debug, debug_1235
    rx1741_cur."!cursor_debug"("FAIL", "statement_mod_loop:sym<until>")
  debug_1235:
    .return (rx1741_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_loop:sym<until>"  :subid("128_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 891
    $P105 = self."!PREFIX__!subrule"("ws", "until")
    new $P106, "ResizablePMCArray"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop:sym<for>"  :subid("129_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 892
    .local string rx1746_tgt
    .local int rx1746_pos
    .local int rx1746_off
    .local int rx1746_eos
    .local int rx1746_rep
    .local pmc rx1746_cur
    .local pmc rx1746_debug
    (rx1746_cur, rx1746_pos, rx1746_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1746_cur
    .local pmc match
    .lex "$/", match
    length rx1746_eos, rx1746_tgt
    gt rx1746_pos, rx1746_eos, rx1746_done
    set rx1746_off, 0
    lt rx1746_pos, 2, rx1746_start
    sub rx1746_off, rx1746_pos, 1
    substr rx1746_tgt, rx1746_tgt, rx1746_off
  rx1746_start:
    eq $I10, 1, rx1746_restart
    if_null rx1746_debug, debug_1236
    rx1746_cur."!cursor_debug"("START", "statement_mod_loop:sym<for>")
  debug_1236:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1747_done
    goto rxscan1747_scan
  rxscan1747_loop:
    (rx1746_pos) = rx1746_cur."from"()
    inc rx1746_pos
    rx1746_cur."!cursor_from"(rx1746_pos)
    ge rx1746_pos, rx1746_eos, rxscan1747_done
  rxscan1747_scan:
    set_addr $I10, rxscan1747_loop
    rx1746_cur."!mark_push"(0, rx1746_pos, $I10)
  rxscan1747_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1748_fail
    rx1746_cur."!mark_push"(0, rx1746_pos, $I10)
  # rx literal  "for"
    add $I11, rx1746_pos, 3
    gt $I11, rx1746_eos, rx1746_fail
    sub $I11, rx1746_pos, rx1746_off
    substr $S10, rx1746_tgt, $I11, 3
    ne $S10, "for", rx1746_fail
    add rx1746_pos, 3
    set_addr $I10, rxcap_1748_fail
    ($I12, $I11) = rx1746_cur."!mark_peek"($I10)
    rx1746_cur."!cursor_pos"($I11)
    ($P10) = rx1746_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1746_pos, "")
    rx1746_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1748_done
  rxcap_1748_fail:
    goto rx1746_fail
  rxcap_1748_done:
  # rx subrule "ws" subtype=method negate=
    rx1746_cur."!cursor_pos"(rx1746_pos)
    $P10 = rx1746_cur."ws"()
    unless $P10, rx1746_fail
    rx1746_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1746_cur."!cursor_pos"(rx1746_pos)
    $P10 = rx1746_cur."EXPR"()
    unless $P10, rx1746_fail
    rx1746_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx1746_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1746_cur."!cursor_pos"(rx1746_pos)
    $P10 = rx1746_cur."ws"()
    unless $P10, rx1746_fail
    rx1746_pos = $P10."pos"()
  # rx pass
    rx1746_cur."!cursor_pass"(rx1746_pos, "statement_mod_loop:sym<for>")
    if_null rx1746_debug, debug_1237
    rx1746_cur."!cursor_debug"("PASS", "statement_mod_loop:sym<for>", " at pos=", rx1746_pos)
  debug_1237:
    .return (rx1746_cur)
  rx1746_restart:
    if_null rx1746_debug, debug_1238
    rx1746_cur."!cursor_debug"("NEXT", "statement_mod_loop:sym<for>")
  debug_1238:
  rx1746_fail:
    (rx1746_rep, rx1746_pos, $I10, $P10) = rx1746_cur."!mark_fail"(0)
    lt rx1746_pos, -1, rx1746_done
    eq rx1746_pos, -1, rx1746_fail
    jump $I10
  rx1746_done:
    rx1746_cur."!cursor_fail"()
    if_null rx1746_debug, debug_1239
    rx1746_cur."!cursor_debug"("FAIL", "statement_mod_loop:sym<for>")
  debug_1239:
    .return (rx1746_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_loop:sym<for>"  :subid("130_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 892
    $P105 = self."!PREFIX__!subrule"("ws", "for")
    new $P106, "ResizablePMCArray"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<fatarrow>"  :subid("131_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 896
    .local string rx1751_tgt
    .local int rx1751_pos
    .local int rx1751_off
    .local int rx1751_eos
    .local int rx1751_rep
    .local pmc rx1751_cur
    .local pmc rx1751_debug
    (rx1751_cur, rx1751_pos, rx1751_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1751_cur
    .local pmc match
    .lex "$/", match
    length rx1751_eos, rx1751_tgt
    gt rx1751_pos, rx1751_eos, rx1751_done
    set rx1751_off, 0
    lt rx1751_pos, 2, rx1751_start
    sub rx1751_off, rx1751_pos, 1
    substr rx1751_tgt, rx1751_tgt, rx1751_off
  rx1751_start:
    eq $I10, 1, rx1751_restart
    if_null rx1751_debug, debug_1240
    rx1751_cur."!cursor_debug"("START", "term:sym<fatarrow>")
  debug_1240:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1752_done
    goto rxscan1752_scan
  rxscan1752_loop:
    (rx1751_pos) = rx1751_cur."from"()
    inc rx1751_pos
    rx1751_cur."!cursor_from"(rx1751_pos)
    ge rx1751_pos, rx1751_eos, rxscan1752_done
  rxscan1752_scan:
    set_addr $I10, rxscan1752_loop
    rx1751_cur."!mark_push"(0, rx1751_pos, $I10)
  rxscan1752_done:
  # rx subrule "fatarrow" subtype=capture negate=
    rx1751_cur."!cursor_pos"(rx1751_pos)
    $P10 = rx1751_cur."fatarrow"()
    unless $P10, rx1751_fail
    rx1751_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("fatarrow")
    rx1751_pos = $P10."pos"()
  # rx pass
    rx1751_cur."!cursor_pass"(rx1751_pos, "term:sym<fatarrow>")
    if_null rx1751_debug, debug_1241
    rx1751_cur."!cursor_debug"("PASS", "term:sym<fatarrow>", " at pos=", rx1751_pos)
  debug_1241:
    .return (rx1751_cur)
  rx1751_restart:
    if_null rx1751_debug, debug_1242
    rx1751_cur."!cursor_debug"("NEXT", "term:sym<fatarrow>")
  debug_1242:
  rx1751_fail:
    (rx1751_rep, rx1751_pos, $I10, $P10) = rx1751_cur."!mark_fail"(0)
    lt rx1751_pos, -1, rx1751_done
    eq rx1751_pos, -1, rx1751_fail
    jump $I10
  rx1751_done:
    rx1751_cur."!cursor_fail"()
    if_null rx1751_debug, debug_1243
    rx1751_cur."!cursor_debug"("FAIL", "term:sym<fatarrow>")
  debug_1243:
    .return (rx1751_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<fatarrow>"  :subid("132_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 896
    $P103 = self."!PREFIX__!subrule"("fatarrow", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<colonpair>"  :subid("133_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 897
    .local string rx1755_tgt
    .local int rx1755_pos
    .local int rx1755_off
    .local int rx1755_eos
    .local int rx1755_rep
    .local pmc rx1755_cur
    .local pmc rx1755_debug
    (rx1755_cur, rx1755_pos, rx1755_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1755_cur
    .local pmc match
    .lex "$/", match
    length rx1755_eos, rx1755_tgt
    gt rx1755_pos, rx1755_eos, rx1755_done
    set rx1755_off, 0
    lt rx1755_pos, 2, rx1755_start
    sub rx1755_off, rx1755_pos, 1
    substr rx1755_tgt, rx1755_tgt, rx1755_off
  rx1755_start:
    eq $I10, 1, rx1755_restart
    if_null rx1755_debug, debug_1244
    rx1755_cur."!cursor_debug"("START", "term:sym<colonpair>")
  debug_1244:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1756_done
    goto rxscan1756_scan
  rxscan1756_loop:
    (rx1755_pos) = rx1755_cur."from"()
    inc rx1755_pos
    rx1755_cur."!cursor_from"(rx1755_pos)
    ge rx1755_pos, rx1755_eos, rxscan1756_done
  rxscan1756_scan:
    set_addr $I10, rxscan1756_loop
    rx1755_cur."!mark_push"(0, rx1755_pos, $I10)
  rxscan1756_done:
  # rx subrule "colonpair" subtype=capture negate=
    rx1755_cur."!cursor_pos"(rx1755_pos)
    $P10 = rx1755_cur."colonpair"()
    unless $P10, rx1755_fail
    rx1755_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("colonpair")
    rx1755_pos = $P10."pos"()
  # rx pass
    rx1755_cur."!cursor_pass"(rx1755_pos, "term:sym<colonpair>")
    if_null rx1755_debug, debug_1245
    rx1755_cur."!cursor_debug"("PASS", "term:sym<colonpair>", " at pos=", rx1755_pos)
  debug_1245:
    .return (rx1755_cur)
  rx1755_restart:
    if_null rx1755_debug, debug_1246
    rx1755_cur."!cursor_debug"("NEXT", "term:sym<colonpair>")
  debug_1246:
  rx1755_fail:
    (rx1755_rep, rx1755_pos, $I10, $P10) = rx1755_cur."!mark_fail"(0)
    lt rx1755_pos, -1, rx1755_done
    eq rx1755_pos, -1, rx1755_fail
    jump $I10
  rx1755_done:
    rx1755_cur."!cursor_fail"()
    if_null rx1755_debug, debug_1247
    rx1755_cur."!cursor_debug"("FAIL", "term:sym<colonpair>")
  debug_1247:
    .return (rx1755_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<colonpair>"  :subid("134_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 897
    $P103 = self."!PREFIX__!subrule"("colonpair", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<variable>"  :subid("135_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 898
    .local string rx1759_tgt
    .local int rx1759_pos
    .local int rx1759_off
    .local int rx1759_eos
    .local int rx1759_rep
    .local pmc rx1759_cur
    .local pmc rx1759_debug
    (rx1759_cur, rx1759_pos, rx1759_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1759_cur
    .local pmc match
    .lex "$/", match
    length rx1759_eos, rx1759_tgt
    gt rx1759_pos, rx1759_eos, rx1759_done
    set rx1759_off, 0
    lt rx1759_pos, 2, rx1759_start
    sub rx1759_off, rx1759_pos, 1
    substr rx1759_tgt, rx1759_tgt, rx1759_off
  rx1759_start:
    eq $I10, 1, rx1759_restart
    if_null rx1759_debug, debug_1248
    rx1759_cur."!cursor_debug"("START", "term:sym<variable>")
  debug_1248:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1760_done
    goto rxscan1760_scan
  rxscan1760_loop:
    (rx1759_pos) = rx1759_cur."from"()
    inc rx1759_pos
    rx1759_cur."!cursor_from"(rx1759_pos)
    ge rx1759_pos, rx1759_eos, rxscan1760_done
  rxscan1760_scan:
    set_addr $I10, rxscan1760_loop
    rx1759_cur."!mark_push"(0, rx1759_pos, $I10)
  rxscan1760_done:
  # rx subrule "variable" subtype=capture negate=
    rx1759_cur."!cursor_pos"(rx1759_pos)
    $P10 = rx1759_cur."variable"()
    unless $P10, rx1759_fail
    rx1759_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable")
    rx1759_pos = $P10."pos"()
  # rx pass
    rx1759_cur."!cursor_pass"(rx1759_pos, "term:sym<variable>")
    if_null rx1759_debug, debug_1249
    rx1759_cur."!cursor_debug"("PASS", "term:sym<variable>", " at pos=", rx1759_pos)
  debug_1249:
    .return (rx1759_cur)
  rx1759_restart:
    if_null rx1759_debug, debug_1250
    rx1759_cur."!cursor_debug"("NEXT", "term:sym<variable>")
  debug_1250:
  rx1759_fail:
    (rx1759_rep, rx1759_pos, $I10, $P10) = rx1759_cur."!mark_fail"(0)
    lt rx1759_pos, -1, rx1759_done
    eq rx1759_pos, -1, rx1759_fail
    jump $I10
  rx1759_done:
    rx1759_cur."!cursor_fail"()
    if_null rx1759_debug, debug_1251
    rx1759_cur."!cursor_debug"("FAIL", "term:sym<variable>")
  debug_1251:
    .return (rx1759_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<variable>"  :subid("136_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 898
    $P103 = self."!PREFIX__!subrule"("variable", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<package_declarator>"  :subid("137_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 899
    .local string rx1763_tgt
    .local int rx1763_pos
    .local int rx1763_off
    .local int rx1763_eos
    .local int rx1763_rep
    .local pmc rx1763_cur
    .local pmc rx1763_debug
    (rx1763_cur, rx1763_pos, rx1763_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1763_cur
    .local pmc match
    .lex "$/", match
    length rx1763_eos, rx1763_tgt
    gt rx1763_pos, rx1763_eos, rx1763_done
    set rx1763_off, 0
    lt rx1763_pos, 2, rx1763_start
    sub rx1763_off, rx1763_pos, 1
    substr rx1763_tgt, rx1763_tgt, rx1763_off
  rx1763_start:
    eq $I10, 1, rx1763_restart
    if_null rx1763_debug, debug_1252
    rx1763_cur."!cursor_debug"("START", "term:sym<package_declarator>")
  debug_1252:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1764_done
    goto rxscan1764_scan
  rxscan1764_loop:
    (rx1763_pos) = rx1763_cur."from"()
    inc rx1763_pos
    rx1763_cur."!cursor_from"(rx1763_pos)
    ge rx1763_pos, rx1763_eos, rxscan1764_done
  rxscan1764_scan:
    set_addr $I10, rxscan1764_loop
    rx1763_cur."!mark_push"(0, rx1763_pos, $I10)
  rxscan1764_done:
  # rx subrule "package_declarator" subtype=capture negate=
    rx1763_cur."!cursor_pos"(rx1763_pos)
    $P10 = rx1763_cur."package_declarator"()
    unless $P10, rx1763_fail
    rx1763_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_declarator")
    rx1763_pos = $P10."pos"()
  # rx pass
    rx1763_cur."!cursor_pass"(rx1763_pos, "term:sym<package_declarator>")
    if_null rx1763_debug, debug_1253
    rx1763_cur."!cursor_debug"("PASS", "term:sym<package_declarator>", " at pos=", rx1763_pos)
  debug_1253:
    .return (rx1763_cur)
  rx1763_restart:
    if_null rx1763_debug, debug_1254
    rx1763_cur."!cursor_debug"("NEXT", "term:sym<package_declarator>")
  debug_1254:
  rx1763_fail:
    (rx1763_rep, rx1763_pos, $I10, $P10) = rx1763_cur."!mark_fail"(0)
    lt rx1763_pos, -1, rx1763_done
    eq rx1763_pos, -1, rx1763_fail
    jump $I10
  rx1763_done:
    rx1763_cur."!cursor_fail"()
    if_null rx1763_debug, debug_1255
    rx1763_cur."!cursor_debug"("FAIL", "term:sym<package_declarator>")
  debug_1255:
    .return (rx1763_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<package_declarator>"  :subid("138_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 899
    $P103 = self."!PREFIX__!subrule"("package_declarator", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<scope_declarator>"  :subid("139_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 900
    .local string rx1767_tgt
    .local int rx1767_pos
    .local int rx1767_off
    .local int rx1767_eos
    .local int rx1767_rep
    .local pmc rx1767_cur
    .local pmc rx1767_debug
    (rx1767_cur, rx1767_pos, rx1767_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1767_cur
    .local pmc match
    .lex "$/", match
    length rx1767_eos, rx1767_tgt
    gt rx1767_pos, rx1767_eos, rx1767_done
    set rx1767_off, 0
    lt rx1767_pos, 2, rx1767_start
    sub rx1767_off, rx1767_pos, 1
    substr rx1767_tgt, rx1767_tgt, rx1767_off
  rx1767_start:
    eq $I10, 1, rx1767_restart
    if_null rx1767_debug, debug_1256
    rx1767_cur."!cursor_debug"("START", "term:sym<scope_declarator>")
  debug_1256:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1768_done
    goto rxscan1768_scan
  rxscan1768_loop:
    (rx1767_pos) = rx1767_cur."from"()
    inc rx1767_pos
    rx1767_cur."!cursor_from"(rx1767_pos)
    ge rx1767_pos, rx1767_eos, rxscan1768_done
  rxscan1768_scan:
    set_addr $I10, rxscan1768_loop
    rx1767_cur."!mark_push"(0, rx1767_pos, $I10)
  rxscan1768_done:
  # rx subrule "scope_declarator" subtype=capture negate=
    rx1767_cur."!cursor_pos"(rx1767_pos)
    $P10 = rx1767_cur."scope_declarator"()
    unless $P10, rx1767_fail
    rx1767_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("scope_declarator")
    rx1767_pos = $P10."pos"()
  # rx pass
    rx1767_cur."!cursor_pass"(rx1767_pos, "term:sym<scope_declarator>")
    if_null rx1767_debug, debug_1257
    rx1767_cur."!cursor_debug"("PASS", "term:sym<scope_declarator>", " at pos=", rx1767_pos)
  debug_1257:
    .return (rx1767_cur)
  rx1767_restart:
    if_null rx1767_debug, debug_1258
    rx1767_cur."!cursor_debug"("NEXT", "term:sym<scope_declarator>")
  debug_1258:
  rx1767_fail:
    (rx1767_rep, rx1767_pos, $I10, $P10) = rx1767_cur."!mark_fail"(0)
    lt rx1767_pos, -1, rx1767_done
    eq rx1767_pos, -1, rx1767_fail
    jump $I10
  rx1767_done:
    rx1767_cur."!cursor_fail"()
    if_null rx1767_debug, debug_1259
    rx1767_cur."!cursor_debug"("FAIL", "term:sym<scope_declarator>")
  debug_1259:
    .return (rx1767_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<scope_declarator>"  :subid("140_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 900
    $P103 = self."!PREFIX__!subrule"("scope_declarator", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<routine_declarator>"  :subid("141_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 901
    .local string rx1771_tgt
    .local int rx1771_pos
    .local int rx1771_off
    .local int rx1771_eos
    .local int rx1771_rep
    .local pmc rx1771_cur
    .local pmc rx1771_debug
    (rx1771_cur, rx1771_pos, rx1771_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1771_cur
    .local pmc match
    .lex "$/", match
    length rx1771_eos, rx1771_tgt
    gt rx1771_pos, rx1771_eos, rx1771_done
    set rx1771_off, 0
    lt rx1771_pos, 2, rx1771_start
    sub rx1771_off, rx1771_pos, 1
    substr rx1771_tgt, rx1771_tgt, rx1771_off
  rx1771_start:
    eq $I10, 1, rx1771_restart
    if_null rx1771_debug, debug_1260
    rx1771_cur."!cursor_debug"("START", "term:sym<routine_declarator>")
  debug_1260:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1772_done
    goto rxscan1772_scan
  rxscan1772_loop:
    (rx1771_pos) = rx1771_cur."from"()
    inc rx1771_pos
    rx1771_cur."!cursor_from"(rx1771_pos)
    ge rx1771_pos, rx1771_eos, rxscan1772_done
  rxscan1772_scan:
    set_addr $I10, rxscan1772_loop
    rx1771_cur."!mark_push"(0, rx1771_pos, $I10)
  rxscan1772_done:
  # rx subrule "routine_declarator" subtype=capture negate=
    rx1771_cur."!cursor_pos"(rx1771_pos)
    $P10 = rx1771_cur."routine_declarator"()
    unless $P10, rx1771_fail
    rx1771_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_declarator")
    rx1771_pos = $P10."pos"()
  # rx pass
    rx1771_cur."!cursor_pass"(rx1771_pos, "term:sym<routine_declarator>")
    if_null rx1771_debug, debug_1261
    rx1771_cur."!cursor_debug"("PASS", "term:sym<routine_declarator>", " at pos=", rx1771_pos)
  debug_1261:
    .return (rx1771_cur)
  rx1771_restart:
    if_null rx1771_debug, debug_1262
    rx1771_cur."!cursor_debug"("NEXT", "term:sym<routine_declarator>")
  debug_1262:
  rx1771_fail:
    (rx1771_rep, rx1771_pos, $I10, $P10) = rx1771_cur."!mark_fail"(0)
    lt rx1771_pos, -1, rx1771_done
    eq rx1771_pos, -1, rx1771_fail
    jump $I10
  rx1771_done:
    rx1771_cur."!cursor_fail"()
    if_null rx1771_debug, debug_1263
    rx1771_cur."!cursor_debug"("FAIL", "term:sym<routine_declarator>")
  debug_1263:
    .return (rx1771_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<routine_declarator>"  :subid("142_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 901
    $P103 = self."!PREFIX__!subrule"("routine_declarator", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<multi_declarator>"  :subid("143_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 902
    .const 'Sub' $P1783 = "577_1334921493.34" 
    capture_lex $P1783
    .const 'Sub' $P1778 = "576_1334921493.34" 
    capture_lex $P1778
    .local string rx1775_tgt
    .local int rx1775_pos
    .local int rx1775_off
    .local int rx1775_eos
    .local int rx1775_rep
    .local pmc rx1775_cur
    .local pmc rx1775_debug
    (rx1775_cur, rx1775_pos, rx1775_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1775_cur
    .local pmc match
    .lex "$/", match
    length rx1775_eos, rx1775_tgt
    gt rx1775_pos, rx1775_eos, rx1775_done
    set rx1775_off, 0
    lt rx1775_pos, 2, rx1775_start
    sub rx1775_off, rx1775_pos, 1
    substr rx1775_tgt, rx1775_tgt, rx1775_off
  rx1775_start:
    eq $I10, 1, rx1775_restart
    if_null rx1775_debug, debug_1264
    rx1775_cur."!cursor_debug"("START", "term:sym<multi_declarator>")
  debug_1264:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1776_done
    goto rxscan1776_scan
  rxscan1776_loop:
    (rx1775_pos) = rx1775_cur."from"()
    inc rx1775_pos
    rx1775_cur."!cursor_from"(rx1775_pos)
    ge rx1775_pos, rx1775_eos, rxscan1776_done
  rxscan1776_scan:
    set_addr $I10, rxscan1776_loop
    rx1775_cur."!mark_push"(0, rx1775_pos, $I10)
  rxscan1776_done:
.annotate 'line', 903
  # rx subrule "before" subtype=zerowidth negate=
    rx1775_cur."!cursor_pos"(rx1775_pos)
    .const 'Sub' $P1778 = "576_1334921493.34" 
    capture_lex $P1778
    $P10 = rx1775_cur."before"($P1778)
    unless $P10, rx1775_fail
.annotate 'line', 904
  # rx subrule "before" subtype=zerowidth negate=1
    rx1775_cur."!cursor_pos"(rx1775_pos)
    .const 'Sub' $P1783 = "577_1334921493.34" 
    capture_lex $P1783
    $P10 = rx1775_cur."before"($P1783)
    if $P10, rx1775_fail
.annotate 'line', 905
  # rx subrule "multi_declarator" subtype=capture negate=
    rx1775_cur."!cursor_pos"(rx1775_pos)
    $P10 = rx1775_cur."multi_declarator"()
    unless $P10, rx1775_fail
    rx1775_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("multi_declarator")
    rx1775_pos = $P10."pos"()
.annotate 'line', 902
  # rx pass
    rx1775_cur."!cursor_pass"(rx1775_pos, "term:sym<multi_declarator>")
    if_null rx1775_debug, debug_1273
    rx1775_cur."!cursor_debug"("PASS", "term:sym<multi_declarator>", " at pos=", rx1775_pos)
  debug_1273:
    .return (rx1775_cur)
  rx1775_restart:
    if_null rx1775_debug, debug_1274
    rx1775_cur."!cursor_debug"("NEXT", "term:sym<multi_declarator>")
  debug_1274:
  rx1775_fail:
    (rx1775_rep, rx1775_pos, $I10, $P10) = rx1775_cur."!mark_fail"(0)
    lt rx1775_pos, -1, rx1775_done
    eq rx1775_pos, -1, rx1775_fail
    jump $I10
  rx1775_done:
    rx1775_cur."!cursor_fail"()
    if_null rx1775_debug, debug_1275
    rx1775_cur."!cursor_debug"("FAIL", "term:sym<multi_declarator>")
  debug_1275:
    .return (rx1775_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1777"  :anon :subid("576_1334921493.34") :method :outer("143_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 903
    .local string rx1779_tgt
    .local int rx1779_pos
    .local int rx1779_off
    .local int rx1779_eos
    .local int rx1779_rep
    .local pmc rx1779_cur
    .local pmc rx1779_debug
    (rx1779_cur, rx1779_pos, rx1779_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1779_cur
    .local pmc match
    .lex "$/", match
    length rx1779_eos, rx1779_tgt
    gt rx1779_pos, rx1779_eos, rx1779_done
    set rx1779_off, 0
    lt rx1779_pos, 2, rx1779_start
    sub rx1779_off, rx1779_pos, 1
    substr rx1779_tgt, rx1779_tgt, rx1779_off
  rx1779_start:
    eq $I10, 1, rx1779_restart
    if_null rx1779_debug, debug_1265
    rx1779_cur."!cursor_debug"("START", "")
  debug_1265:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1780_done
    goto rxscan1780_scan
  rxscan1780_loop:
    (rx1779_pos) = rx1779_cur."from"()
    inc rx1779_pos
    rx1779_cur."!cursor_from"(rx1779_pos)
    ge rx1779_pos, rx1779_eos, rxscan1780_done
  rxscan1780_scan:
    set_addr $I10, rxscan1780_loop
    rx1779_cur."!mark_push"(0, rx1779_pos, $I10)
  rxscan1780_done:
  alt1781_0:
    set_addr $I10, alt1781_1
    rx1779_cur."!mark_push"(0, rx1779_pos, $I10)
  # rx literal  "multi"
    add $I11, rx1779_pos, 5
    gt $I11, rx1779_eos, rx1779_fail
    sub $I11, rx1779_pos, rx1779_off
    substr $S10, rx1779_tgt, $I11, 5
    ne $S10, "multi", rx1779_fail
    add rx1779_pos, 5
    goto alt1781_end
  alt1781_1:
    set_addr $I10, alt1781_2
    rx1779_cur."!mark_push"(0, rx1779_pos, $I10)
  # rx literal  "proto"
    add $I11, rx1779_pos, 5
    gt $I11, rx1779_eos, rx1779_fail
    sub $I11, rx1779_pos, rx1779_off
    substr $S10, rx1779_tgt, $I11, 5
    ne $S10, "proto", rx1779_fail
    add rx1779_pos, 5
    goto alt1781_end
  alt1781_2:
  # rx literal  "only"
    add $I11, rx1779_pos, 4
    gt $I11, rx1779_eos, rx1779_fail
    sub $I11, rx1779_pos, rx1779_off
    substr $S10, rx1779_tgt, $I11, 4
    ne $S10, "only", rx1779_fail
    add rx1779_pos, 4
  alt1781_end:
  # rx pass
    rx1779_cur."!cursor_pass"(rx1779_pos, "")
    if_null rx1779_debug, debug_1266
    rx1779_cur."!cursor_debug"("PASS", "", " at pos=", rx1779_pos)
  debug_1266:
    .return (rx1779_cur)
  rx1779_restart:
    if_null rx1779_debug, debug_1267
    rx1779_cur."!cursor_debug"("NEXT", "")
  debug_1267:
  rx1779_fail:
    (rx1779_rep, rx1779_pos, $I10, $P10) = rx1779_cur."!mark_fail"(0)
    lt rx1779_pos, -1, rx1779_done
    eq rx1779_pos, -1, rx1779_fail
    jump $I10
  rx1779_done:
    rx1779_cur."!cursor_fail"()
    if_null rx1779_debug, debug_1268
    rx1779_cur."!cursor_debug"("FAIL", "")
  debug_1268:
    .return (rx1779_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1782"  :anon :subid("577_1334921493.34") :method :outer("143_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 904
    .local string rx1784_tgt
    .local int rx1784_pos
    .local int rx1784_off
    .local int rx1784_eos
    .local int rx1784_rep
    .local pmc rx1784_cur
    .local pmc rx1784_debug
    (rx1784_cur, rx1784_pos, rx1784_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1784_cur
    .local pmc match
    .lex "$/", match
    length rx1784_eos, rx1784_tgt
    gt rx1784_pos, rx1784_eos, rx1784_done
    set rx1784_off, 0
    lt rx1784_pos, 2, rx1784_start
    sub rx1784_off, rx1784_pos, 1
    substr rx1784_tgt, rx1784_tgt, rx1784_off
  rx1784_start:
    eq $I10, 1, rx1784_restart
    if_null rx1784_debug, debug_1269
    rx1784_cur."!cursor_debug"("START", "")
  debug_1269:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1785_done
    goto rxscan1785_scan
  rxscan1785_loop:
    (rx1784_pos) = rx1784_cur."from"()
    inc rx1784_pos
    rx1784_cur."!cursor_from"(rx1784_pos)
    ge rx1784_pos, rx1784_eos, rxscan1785_done
  rxscan1785_scan:
    set_addr $I10, rxscan1785_loop
    rx1784_cur."!mark_push"(0, rx1784_pos, $I10)
  rxscan1785_done:
  # rx literal  "proto"
    add $I11, rx1784_pos, 5
    gt $I11, rx1784_eos, rx1784_fail
    sub $I11, rx1784_pos, rx1784_off
    substr $S10, rx1784_tgt, $I11, 5
    ne $S10, "proto", rx1784_fail
    add rx1784_pos, 5
  # rx subrule "ws" subtype=method negate=
    rx1784_cur."!cursor_pos"(rx1784_pos)
    $P10 = rx1784_cur."ws"()
    unless $P10, rx1784_fail
    rx1784_pos = $P10."pos"()
  alt1786_0:
    set_addr $I10, alt1786_1
    rx1784_cur."!mark_push"(0, rx1784_pos, $I10)
  # rx literal  "regex"
    add $I11, rx1784_pos, 5
    gt $I11, rx1784_eos, rx1784_fail
    sub $I11, rx1784_pos, rx1784_off
    substr $S10, rx1784_tgt, $I11, 5
    ne $S10, "regex", rx1784_fail
    add rx1784_pos, 5
    goto alt1786_end
  alt1786_1:
    set_addr $I10, alt1786_2
    rx1784_cur."!mark_push"(0, rx1784_pos, $I10)
  # rx literal  "token"
    add $I11, rx1784_pos, 5
    gt $I11, rx1784_eos, rx1784_fail
    sub $I11, rx1784_pos, rx1784_off
    substr $S10, rx1784_tgt, $I11, 5
    ne $S10, "token", rx1784_fail
    add rx1784_pos, 5
    goto alt1786_end
  alt1786_2:
  # rx literal  "rule"
    add $I11, rx1784_pos, 4
    gt $I11, rx1784_eos, rx1784_fail
    sub $I11, rx1784_pos, rx1784_off
    substr $S10, rx1784_tgt, $I11, 4
    ne $S10, "rule", rx1784_fail
    add rx1784_pos, 4
  alt1786_end:
  # rx pass
    rx1784_cur."!cursor_pass"(rx1784_pos, "")
    if_null rx1784_debug, debug_1270
    rx1784_cur."!cursor_debug"("PASS", "", " at pos=", rx1784_pos)
  debug_1270:
    .return (rx1784_cur)
  rx1784_restart:
    if_null rx1784_debug, debug_1271
    rx1784_cur."!cursor_debug"("NEXT", "")
  debug_1271:
  rx1784_fail:
    (rx1784_rep, rx1784_pos, $I10, $P10) = rx1784_cur."!mark_fail"(0)
    lt rx1784_pos, -1, rx1784_done
    eq rx1784_pos, -1, rx1784_fail
    jump $I10
  rx1784_done:
    rx1784_cur."!cursor_fail"()
    if_null rx1784_debug, debug_1272
    rx1784_cur."!cursor_debug"("FAIL", "")
  debug_1272:
    .return (rx1784_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<multi_declarator>"  :subid("144_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 902
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<regex_declarator>"  :subid("145_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 907
    .local string rx1789_tgt
    .local int rx1789_pos
    .local int rx1789_off
    .local int rx1789_eos
    .local int rx1789_rep
    .local pmc rx1789_cur
    .local pmc rx1789_debug
    (rx1789_cur, rx1789_pos, rx1789_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1789_cur
    .local pmc match
    .lex "$/", match
    length rx1789_eos, rx1789_tgt
    gt rx1789_pos, rx1789_eos, rx1789_done
    set rx1789_off, 0
    lt rx1789_pos, 2, rx1789_start
    sub rx1789_off, rx1789_pos, 1
    substr rx1789_tgt, rx1789_tgt, rx1789_off
  rx1789_start:
    eq $I10, 1, rx1789_restart
    if_null rx1789_debug, debug_1276
    rx1789_cur."!cursor_debug"("START", "term:sym<regex_declarator>")
  debug_1276:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1790_done
    goto rxscan1790_scan
  rxscan1790_loop:
    (rx1789_pos) = rx1789_cur."from"()
    inc rx1789_pos
    rx1789_cur."!cursor_from"(rx1789_pos)
    ge rx1789_pos, rx1789_eos, rxscan1790_done
  rxscan1790_scan:
    set_addr $I10, rxscan1790_loop
    rx1789_cur."!mark_push"(0, rx1789_pos, $I10)
  rxscan1790_done:
  # rx subrule "regex_declarator" subtype=capture negate=
    rx1789_cur."!cursor_pos"(rx1789_pos)
    $P10 = rx1789_cur."regex_declarator"()
    unless $P10, rx1789_fail
    rx1789_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("regex_declarator")
    rx1789_pos = $P10."pos"()
  # rx pass
    rx1789_cur."!cursor_pass"(rx1789_pos, "term:sym<regex_declarator>")
    if_null rx1789_debug, debug_1277
    rx1789_cur."!cursor_debug"("PASS", "term:sym<regex_declarator>", " at pos=", rx1789_pos)
  debug_1277:
    .return (rx1789_cur)
  rx1789_restart:
    if_null rx1789_debug, debug_1278
    rx1789_cur."!cursor_debug"("NEXT", "term:sym<regex_declarator>")
  debug_1278:
  rx1789_fail:
    (rx1789_rep, rx1789_pos, $I10, $P10) = rx1789_cur."!mark_fail"(0)
    lt rx1789_pos, -1, rx1789_done
    eq rx1789_pos, -1, rx1789_fail
    jump $I10
  rx1789_done:
    rx1789_cur."!cursor_fail"()
    if_null rx1789_debug, debug_1279
    rx1789_cur."!cursor_debug"("FAIL", "term:sym<regex_declarator>")
  debug_1279:
    .return (rx1789_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<regex_declarator>"  :subid("146_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 907
    $P103 = self."!PREFIX__!subrule"("regex_declarator", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<statement_prefix>"  :subid("147_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 908
    .local string rx1793_tgt
    .local int rx1793_pos
    .local int rx1793_off
    .local int rx1793_eos
    .local int rx1793_rep
    .local pmc rx1793_cur
    .local pmc rx1793_debug
    (rx1793_cur, rx1793_pos, rx1793_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1793_cur
    .local pmc match
    .lex "$/", match
    length rx1793_eos, rx1793_tgt
    gt rx1793_pos, rx1793_eos, rx1793_done
    set rx1793_off, 0
    lt rx1793_pos, 2, rx1793_start
    sub rx1793_off, rx1793_pos, 1
    substr rx1793_tgt, rx1793_tgt, rx1793_off
  rx1793_start:
    eq $I10, 1, rx1793_restart
    if_null rx1793_debug, debug_1280
    rx1793_cur."!cursor_debug"("START", "term:sym<statement_prefix>")
  debug_1280:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1794_done
    goto rxscan1794_scan
  rxscan1794_loop:
    (rx1793_pos) = rx1793_cur."from"()
    inc rx1793_pos
    rx1793_cur."!cursor_from"(rx1793_pos)
    ge rx1793_pos, rx1793_eos, rxscan1794_done
  rxscan1794_scan:
    set_addr $I10, rxscan1794_loop
    rx1793_cur."!mark_push"(0, rx1793_pos, $I10)
  rxscan1794_done:
  # rx subrule "statement_prefix" subtype=capture negate=
    rx1793_cur."!cursor_pos"(rx1793_pos)
    $P10 = rx1793_cur."statement_prefix"()
    unless $P10, rx1793_fail
    rx1793_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement_prefix")
    rx1793_pos = $P10."pos"()
  # rx pass
    rx1793_cur."!cursor_pass"(rx1793_pos, "term:sym<statement_prefix>")
    if_null rx1793_debug, debug_1281
    rx1793_cur."!cursor_debug"("PASS", "term:sym<statement_prefix>", " at pos=", rx1793_pos)
  debug_1281:
    .return (rx1793_cur)
  rx1793_restart:
    if_null rx1793_debug, debug_1282
    rx1793_cur."!cursor_debug"("NEXT", "term:sym<statement_prefix>")
  debug_1282:
  rx1793_fail:
    (rx1793_rep, rx1793_pos, $I10, $P10) = rx1793_cur."!mark_fail"(0)
    lt rx1793_pos, -1, rx1793_done
    eq rx1793_pos, -1, rx1793_fail
    jump $I10
  rx1793_done:
    rx1793_cur."!cursor_fail"()
    if_null rx1793_debug, debug_1283
    rx1793_cur."!cursor_debug"("FAIL", "term:sym<statement_prefix>")
  debug_1283:
    .return (rx1793_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<statement_prefix>"  :subid("148_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 908
    $P103 = self."!PREFIX__!subrule"("statement_prefix", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<lambda>"  :subid("149_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 909
    .local string rx1797_tgt
    .local int rx1797_pos
    .local int rx1797_off
    .local int rx1797_eos
    .local int rx1797_rep
    .local pmc rx1797_cur
    .local pmc rx1797_debug
    (rx1797_cur, rx1797_pos, rx1797_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1797_cur
    .local pmc match
    .lex "$/", match
    length rx1797_eos, rx1797_tgt
    gt rx1797_pos, rx1797_eos, rx1797_done
    set rx1797_off, 0
    lt rx1797_pos, 2, rx1797_start
    sub rx1797_off, rx1797_pos, 1
    substr rx1797_tgt, rx1797_tgt, rx1797_off
  rx1797_start:
    eq $I10, 1, rx1797_restart
    if_null rx1797_debug, debug_1284
    rx1797_cur."!cursor_debug"("START", "term:sym<lambda>")
  debug_1284:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1798_done
    goto rxscan1798_scan
  rxscan1798_loop:
    (rx1797_pos) = rx1797_cur."from"()
    inc rx1797_pos
    rx1797_cur."!cursor_from"(rx1797_pos)
    ge rx1797_pos, rx1797_eos, rxscan1798_done
  rxscan1798_scan:
    set_addr $I10, rxscan1798_loop
    rx1797_cur."!mark_push"(0, rx1797_pos, $I10)
  rxscan1798_done:
  # rx subrule "lambda" subtype=zerowidth negate=
    rx1797_cur."!cursor_pos"(rx1797_pos)
    $P10 = rx1797_cur."lambda"()
    unless $P10, rx1797_fail
  # rx subrule "pblock" subtype=capture negate=
    rx1797_cur."!cursor_pos"(rx1797_pos)
    $P10 = rx1797_cur."pblock"()
    unless $P10, rx1797_fail
    rx1797_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("pblock")
    rx1797_pos = $P10."pos"()
  # rx pass
    rx1797_cur."!cursor_pass"(rx1797_pos, "term:sym<lambda>")
    if_null rx1797_debug, debug_1285
    rx1797_cur."!cursor_debug"("PASS", "term:sym<lambda>", " at pos=", rx1797_pos)
  debug_1285:
    .return (rx1797_cur)
  rx1797_restart:
    if_null rx1797_debug, debug_1286
    rx1797_cur."!cursor_debug"("NEXT", "term:sym<lambda>")
  debug_1286:
  rx1797_fail:
    (rx1797_rep, rx1797_pos, $I10, $P10) = rx1797_cur."!mark_fail"(0)
    lt rx1797_pos, -1, rx1797_done
    eq rx1797_pos, -1, rx1797_fail
    jump $I10
  rx1797_done:
    rx1797_cur."!cursor_fail"()
    if_null rx1797_debug, debug_1287
    rx1797_cur."!cursor_debug"("FAIL", "term:sym<lambda>")
  debug_1287:
    .return (rx1797_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<lambda>"  :subid("150_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 909
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "fatarrow"  :subid("151_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 911
    .local string rx1801_tgt
    .local int rx1801_pos
    .local int rx1801_off
    .local int rx1801_eos
    .local int rx1801_rep
    .local pmc rx1801_cur
    .local pmc rx1801_debug
    (rx1801_cur, rx1801_pos, rx1801_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1801_cur
    .local pmc match
    .lex "$/", match
    length rx1801_eos, rx1801_tgt
    gt rx1801_pos, rx1801_eos, rx1801_done
    set rx1801_off, 0
    lt rx1801_pos, 2, rx1801_start
    sub rx1801_off, rx1801_pos, 1
    substr rx1801_tgt, rx1801_tgt, rx1801_off
  rx1801_start:
    eq $I10, 1, rx1801_restart
    if_null rx1801_debug, debug_1288
    rx1801_cur."!cursor_debug"("START", "fatarrow")
  debug_1288:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1802_done
    goto rxscan1802_scan
  rxscan1802_loop:
    (rx1801_pos) = rx1801_cur."from"()
    inc rx1801_pos
    rx1801_cur."!cursor_from"(rx1801_pos)
    ge rx1801_pos, rx1801_eos, rxscan1802_done
  rxscan1802_scan:
    set_addr $I10, rxscan1802_loop
    rx1801_cur."!mark_push"(0, rx1801_pos, $I10)
  rxscan1802_done:
.annotate 'line', 912
  # rx subrule "identifier" subtype=capture negate=
    rx1801_cur."!cursor_pos"(rx1801_pos)
    $P10 = rx1801_cur."identifier"()
    unless $P10, rx1801_fail
    rx1801_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("key")
    rx1801_pos = $P10."pos"()
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1801_pos, rx1801_off
    set rx1801_rep, 0
    sub $I12, rx1801_eos, rx1801_pos
  rxenumcharlistq1803_loop:
    le $I12, 0, rxenumcharlistq1803_done
    substr $S10, rx1801_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1803_done
    inc rx1801_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1803_loop
  rxenumcharlistq1803_done:
    add rx1801_pos, rx1801_pos, rx1801_rep
  # rx literal  "=>"
    add $I11, rx1801_pos, 2
    gt $I11, rx1801_eos, rx1801_fail
    sub $I11, rx1801_pos, rx1801_off
    substr $S10, rx1801_tgt, $I11, 2
    ne $S10, "=>", rx1801_fail
    add rx1801_pos, 2
  # rx subrule "ws" subtype=method negate=
    rx1801_cur."!cursor_pos"(rx1801_pos)
    $P10 = rx1801_cur."ws"()
    unless $P10, rx1801_fail
    rx1801_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1801_cur."!cursor_pos"(rx1801_pos)
    $P10 = rx1801_cur."EXPR"("i=")
    unless $P10, rx1801_fail
    rx1801_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("val")
    rx1801_pos = $P10."pos"()
.annotate 'line', 911
  # rx pass
    rx1801_cur."!cursor_pass"(rx1801_pos, "fatarrow")
    if_null rx1801_debug, debug_1289
    rx1801_cur."!cursor_debug"("PASS", "fatarrow", " at pos=", rx1801_pos)
  debug_1289:
    .return (rx1801_cur)
  rx1801_restart:
    if_null rx1801_debug, debug_1290
    rx1801_cur."!cursor_debug"("NEXT", "fatarrow")
  debug_1290:
  rx1801_fail:
    (rx1801_rep, rx1801_pos, $I10, $P10) = rx1801_cur."!mark_fail"(0)
    lt rx1801_pos, -1, rx1801_done
    eq rx1801_pos, -1, rx1801_fail
    jump $I10
  rx1801_done:
    rx1801_cur."!cursor_fail"()
    if_null rx1801_debug, debug_1291
    rx1801_cur."!cursor_debug"("FAIL", "fatarrow")
  debug_1291:
    .return (rx1801_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__fatarrow"  :subid("152_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 911
    $P103 = self."!PREFIX__!subrule"("identifier", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "colonpair"  :subid("153_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 915
    .local string rx1806_tgt
    .local int rx1806_pos
    .local int rx1806_off
    .local int rx1806_eos
    .local int rx1806_rep
    .local pmc rx1806_cur
    .local pmc rx1806_debug
    (rx1806_cur, rx1806_pos, rx1806_tgt, $I10) = self."!cursor_start"()
    rx1806_cur."!cursor_caparray"("circumfix")
    .lex unicode:"$\x{a2}", rx1806_cur
    .local pmc match
    .lex "$/", match
    length rx1806_eos, rx1806_tgt
    gt rx1806_pos, rx1806_eos, rx1806_done
    set rx1806_off, 0
    lt rx1806_pos, 2, rx1806_start
    sub rx1806_off, rx1806_pos, 1
    substr rx1806_tgt, rx1806_tgt, rx1806_off
  rx1806_start:
    eq $I10, 1, rx1806_restart
    if_null rx1806_debug, debug_1292
    rx1806_cur."!cursor_debug"("START", "colonpair")
  debug_1292:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1807_done
    goto rxscan1807_scan
  rxscan1807_loop:
    (rx1806_pos) = rx1806_cur."from"()
    inc rx1806_pos
    rx1806_cur."!cursor_from"(rx1806_pos)
    ge rx1806_pos, rx1806_eos, rxscan1807_done
  rxscan1807_scan:
    set_addr $I10, rxscan1807_loop
    rx1806_cur."!mark_push"(0, rx1806_pos, $I10)
  rxscan1807_done:
.annotate 'line', 916
  # rx literal  ":"
    add $I11, rx1806_pos, 1
    gt $I11, rx1806_eos, rx1806_fail
    sub $I11, rx1806_pos, rx1806_off
    ord $I11, rx1806_tgt, $I11
    ne $I11, 58, rx1806_fail
    add rx1806_pos, 1
  alt1808_0:
.annotate 'line', 917
    set_addr $I10, alt1808_1
    rx1806_cur."!mark_push"(0, rx1806_pos, $I10)
.annotate 'line', 918
  # rx subcapture "not"
    set_addr $I10, rxcap_1809_fail
    rx1806_cur."!mark_push"(0, rx1806_pos, $I10)
  # rx literal  "!"
    add $I11, rx1806_pos, 1
    gt $I11, rx1806_eos, rx1806_fail
    sub $I11, rx1806_pos, rx1806_off
    ord $I11, rx1806_tgt, $I11
    ne $I11, 33, rx1806_fail
    add rx1806_pos, 1
    set_addr $I10, rxcap_1809_fail
    ($I12, $I11) = rx1806_cur."!mark_peek"($I10)
    rx1806_cur."!cursor_pos"($I11)
    ($P10) = rx1806_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1806_pos, "")
    rx1806_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("not")
    goto rxcap_1809_done
  rxcap_1809_fail:
    goto rx1806_fail
  rxcap_1809_done:
  # rx subrule "identifier" subtype=capture negate=
    rx1806_cur."!cursor_pos"(rx1806_pos)
    $P10 = rx1806_cur."identifier"()
    unless $P10, rx1806_fail
    rx1806_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx1806_pos = $P10."pos"()
    goto alt1808_end
  alt1808_1:
    set_addr $I10, alt1808_2
    rx1806_cur."!mark_push"(0, rx1806_pos, $I10)
.annotate 'line', 919
  # rx subrule "identifier" subtype=capture negate=
    rx1806_cur."!cursor_pos"(rx1806_pos)
    $P10 = rx1806_cur."identifier"()
    unless $P10, rx1806_fail
    rx1806_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx1806_pos = $P10."pos"()
  # rx rxquantr1810 ** 0..1
    set_addr $I10, rxquantr1810_done
    rx1806_cur."!mark_push"(0, rx1806_pos, $I10)
  rxquantr1810_loop:
  # rx subrule "circumfix" subtype=capture negate=
    rx1806_cur."!cursor_pos"(rx1806_pos)
    $P10 = rx1806_cur."circumfix"()
    unless $P10, rx1806_fail
    goto rxsubrule1811_pass
  rxsubrule1811_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1806_fail
  rxsubrule1811_pass:
    set_addr $I10, rxsubrule1811_back
    rx1806_cur."!mark_push"(0, rx1806_pos, $I10, $P10)
    $P10."!cursor_names"("circumfix")
    rx1806_pos = $P10."pos"()
    set_addr $I10, rxquantr1810_done
    (rx1806_rep) = rx1806_cur."!mark_commit"($I10)
  rxquantr1810_done:
    goto alt1808_end
  alt1808_2:
    set_addr $I10, alt1808_3
    rx1806_cur."!mark_push"(0, rx1806_pos, $I10)
.annotate 'line', 920
  # rx subrule "circumfix" subtype=capture negate=
    rx1806_cur."!cursor_pos"(rx1806_pos)
    $P10 = rx1806_cur."circumfix"()
    unless $P10, rx1806_fail
    rx1806_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("circumfix")
    rx1806_pos = $P10."pos"()
    goto alt1808_end
  alt1808_3:
.annotate 'line', 921
  # rx subrule "variable" subtype=capture negate=
    rx1806_cur."!cursor_pos"(rx1806_pos)
    $P10 = rx1806_cur."variable"()
    unless $P10, rx1806_fail
    rx1806_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable")
    rx1806_pos = $P10."pos"()
  alt1808_end:
.annotate 'line', 915
  # rx pass
    rx1806_cur."!cursor_pass"(rx1806_pos, "colonpair")
    if_null rx1806_debug, debug_1293
    rx1806_cur."!cursor_debug"("PASS", "colonpair", " at pos=", rx1806_pos)
  debug_1293:
    .return (rx1806_cur)
  rx1806_restart:
    if_null rx1806_debug, debug_1294
    rx1806_cur."!cursor_debug"("NEXT", "colonpair")
  debug_1294:
  rx1806_fail:
    (rx1806_rep, rx1806_pos, $I10, $P10) = rx1806_cur."!mark_fail"(0)
    lt rx1806_pos, -1, rx1806_done
    eq rx1806_pos, -1, rx1806_fail
    jump $I10
  rx1806_done:
    rx1806_cur."!cursor_fail"()
    if_null rx1806_debug, debug_1295
    rx1806_cur."!cursor_debug"("FAIL", "colonpair")
  debug_1295:
    .return (rx1806_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__colonpair"  :subid("154_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 915
    $P103 = self."!PREFIX__!subrule"("variable", ":")
    $P104 = self."!PREFIX__!subrule"("circumfix", ":")
    $P105 = self."!PREFIX__!subrule"("identifier", ":")
    $P106 = self."!PREFIX__!subrule"("identifier", ":!")
    new $P107, "ResizablePMCArray"
    push $P107, $P103
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "variable"  :subid("155_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 925
    .local string rx1814_tgt
    .local int rx1814_pos
    .local int rx1814_off
    .local int rx1814_eos
    .local int rx1814_rep
    .local pmc rx1814_cur
    .local pmc rx1814_debug
    (rx1814_cur, rx1814_pos, rx1814_tgt, $I10) = self."!cursor_start"()
    rx1814_cur."!cursor_caparray"("twigil")
    .lex unicode:"$\x{a2}", rx1814_cur
    .local pmc match
    .lex "$/", match
    length rx1814_eos, rx1814_tgt
    gt rx1814_pos, rx1814_eos, rx1814_done
    set rx1814_off, 0
    lt rx1814_pos, 2, rx1814_start
    sub rx1814_off, rx1814_pos, 1
    substr rx1814_tgt, rx1814_tgt, rx1814_off
  rx1814_start:
    eq $I10, 1, rx1814_restart
    if_null rx1814_debug, debug_1296
    rx1814_cur."!cursor_debug"("START", "variable")
  debug_1296:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1815_done
    goto rxscan1815_scan
  rxscan1815_loop:
    (rx1814_pos) = rx1814_cur."from"()
    inc rx1814_pos
    rx1814_cur."!cursor_from"(rx1814_pos)
    ge rx1814_pos, rx1814_eos, rxscan1815_done
  rxscan1815_scan:
    set_addr $I10, rxscan1815_loop
    rx1814_cur."!mark_push"(0, rx1814_pos, $I10)
  rxscan1815_done:
  alt1816_0:
    set_addr $I10, alt1816_1
    rx1814_cur."!mark_push"(0, rx1814_pos, $I10)
.annotate 'line', 926
  # rx subrule "sigil" subtype=capture negate=
    rx1814_cur."!cursor_pos"(rx1814_pos)
    $P10 = rx1814_cur."sigil"()
    unless $P10, rx1814_fail
    rx1814_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    rx1814_pos = $P10."pos"()
  # rx rxquantr1817 ** 0..1
    set_addr $I10, rxquantr1817_done
    rx1814_cur."!mark_push"(0, rx1814_pos, $I10)
  rxquantr1817_loop:
  # rx subrule "twigil" subtype=capture negate=
    rx1814_cur."!cursor_pos"(rx1814_pos)
    $P10 = rx1814_cur."twigil"()
    unless $P10, rx1814_fail
    goto rxsubrule1818_pass
  rxsubrule1818_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1814_fail
  rxsubrule1818_pass:
    set_addr $I10, rxsubrule1818_back
    rx1814_cur."!mark_push"(0, rx1814_pos, $I10, $P10)
    $P10."!cursor_names"("twigil")
    rx1814_pos = $P10."pos"()
    set_addr $I10, rxquantr1817_done
    (rx1814_rep) = rx1814_cur."!mark_commit"($I10)
  rxquantr1817_done:
  # rx subrule "name" subtype=capture negate=
    rx1814_cur."!cursor_pos"(rx1814_pos)
    $P10 = rx1814_cur."name"()
    unless $P10, rx1814_fail
    rx1814_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("desigilname")
    rx1814_pos = $P10."pos"()
    goto alt1816_end
  alt1816_1:
    set_addr $I10, alt1816_2
    rx1814_cur."!mark_push"(0, rx1814_pos, $I10)
.annotate 'line', 927
  # rx subrule "sigil" subtype=capture negate=
    rx1814_cur."!cursor_pos"(rx1814_pos)
    $P10 = rx1814_cur."sigil"()
    unless $P10, rx1814_fail
    rx1814_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    rx1814_pos = $P10."pos"()
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1814_pos, rx1814_off
    substr $S10, rx1814_tgt, $I10, 1
    index $I11, "<[", $S10
    lt $I11, 0, rx1814_fail
  # rx subrule "postcircumfix" subtype=capture negate=
    rx1814_cur."!cursor_pos"(rx1814_pos)
    $P10 = rx1814_cur."postcircumfix"()
    unless $P10, rx1814_fail
    rx1814_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("postcircumfix")
    rx1814_pos = $P10."pos"()
    goto alt1816_end
  alt1816_2:
.annotate 'line', 928
  # rx subcapture "sigil"
    set_addr $I10, rxcap_1819_fail
    rx1814_cur."!mark_push"(0, rx1814_pos, $I10)
  # rx literal  "$"
    add $I11, rx1814_pos, 1
    gt $I11, rx1814_eos, rx1814_fail
    sub $I11, rx1814_pos, rx1814_off
    ord $I11, rx1814_tgt, $I11
    ne $I11, 36, rx1814_fail
    add rx1814_pos, 1
    set_addr $I10, rxcap_1819_fail
    ($I12, $I11) = rx1814_cur."!mark_peek"($I10)
    rx1814_cur."!cursor_pos"($I11)
    ($P10) = rx1814_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1814_pos, "")
    rx1814_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    goto rxcap_1819_done
  rxcap_1819_fail:
    goto rx1814_fail
  rxcap_1819_done:
  # rx subcapture "desigilname"
    set_addr $I10, rxcap_1820_fail
    rx1814_cur."!mark_push"(0, rx1814_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx1814_pos, rx1814_eos, rx1814_fail
    sub $I10, rx1814_pos, rx1814_off
    substr $S10, rx1814_tgt, $I10, 1
    index $I11, "/_!", $S10
    lt $I11, 0, rx1814_fail
    inc rx1814_pos
    set_addr $I10, rxcap_1820_fail
    ($I12, $I11) = rx1814_cur."!mark_peek"($I10)
    rx1814_cur."!cursor_pos"($I11)
    ($P10) = rx1814_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1814_pos, "")
    rx1814_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("desigilname")
    goto rxcap_1820_done
  rxcap_1820_fail:
    goto rx1814_fail
  rxcap_1820_done:
  alt1816_end:
.annotate 'line', 925
  # rx pass
    rx1814_cur."!cursor_pass"(rx1814_pos, "variable")
    if_null rx1814_debug, debug_1297
    rx1814_cur."!cursor_debug"("PASS", "variable", " at pos=", rx1814_pos)
  debug_1297:
    .return (rx1814_cur)
  rx1814_restart:
    if_null rx1814_debug, debug_1298
    rx1814_cur."!cursor_debug"("NEXT", "variable")
  debug_1298:
  rx1814_fail:
    (rx1814_rep, rx1814_pos, $I10, $P10) = rx1814_cur."!mark_fail"(0)
    lt rx1814_pos, -1, rx1814_done
    eq rx1814_pos, -1, rx1814_fail
    jump $I10
  rx1814_done:
    rx1814_cur."!cursor_fail"()
    if_null rx1814_debug, debug_1299
    rx1814_cur."!cursor_debug"("FAIL", "variable")
  debug_1299:
    .return (rx1814_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__variable"  :subid("156_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 925
    $P103 = self."!PREFIX__!subrule"("sigil", "")
    $P104 = self."!PREFIX__!subrule"("sigil", "")
    new $P105, "ResizablePMCArray"
    push $P105, "/"
    push $P105, "_"
    push $P105, "!"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "sigil"  :subid("157_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 931
    .local string rx1823_tgt
    .local int rx1823_pos
    .local int rx1823_off
    .local int rx1823_eos
    .local int rx1823_rep
    .local pmc rx1823_cur
    .local pmc rx1823_debug
    (rx1823_cur, rx1823_pos, rx1823_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1823_cur
    .local pmc match
    .lex "$/", match
    length rx1823_eos, rx1823_tgt
    gt rx1823_pos, rx1823_eos, rx1823_done
    set rx1823_off, 0
    lt rx1823_pos, 2, rx1823_start
    sub rx1823_off, rx1823_pos, 1
    substr rx1823_tgt, rx1823_tgt, rx1823_off
  rx1823_start:
    eq $I10, 1, rx1823_restart
    if_null rx1823_debug, debug_1300
    rx1823_cur."!cursor_debug"("START", "sigil")
  debug_1300:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1824_done
    goto rxscan1824_scan
  rxscan1824_loop:
    (rx1823_pos) = rx1823_cur."from"()
    inc rx1823_pos
    rx1823_cur."!cursor_from"(rx1823_pos)
    ge rx1823_pos, rx1823_eos, rxscan1824_done
  rxscan1824_scan:
    set_addr $I10, rxscan1824_loop
    rx1823_cur."!mark_push"(0, rx1823_pos, $I10)
  rxscan1824_done:
  # rx enumcharlist negate=0 
    ge rx1823_pos, rx1823_eos, rx1823_fail
    sub $I10, rx1823_pos, rx1823_off
    substr $S10, rx1823_tgt, $I10, 1
    index $I11, "$@%&", $S10
    lt $I11, 0, rx1823_fail
    inc rx1823_pos
  # rx pass
    rx1823_cur."!cursor_pass"(rx1823_pos, "sigil")
    if_null rx1823_debug, debug_1301
    rx1823_cur."!cursor_debug"("PASS", "sigil", " at pos=", rx1823_pos)
  debug_1301:
    .return (rx1823_cur)
  rx1823_restart:
    if_null rx1823_debug, debug_1302
    rx1823_cur."!cursor_debug"("NEXT", "sigil")
  debug_1302:
  rx1823_fail:
    (rx1823_rep, rx1823_pos, $I10, $P10) = rx1823_cur."!mark_fail"(0)
    lt rx1823_pos, -1, rx1823_done
    eq rx1823_pos, -1, rx1823_fail
    jump $I10
  rx1823_done:
    rx1823_cur."!cursor_fail"()
    if_null rx1823_debug, debug_1303
    rx1823_cur."!cursor_debug"("FAIL", "sigil")
  debug_1303:
    .return (rx1823_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__sigil"  :subid("158_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 931
    new $P103, "ResizablePMCArray"
    push $P103, "$"
    push $P103, "@"
    push $P103, "%"
    push $P103, "&"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "twigil"  :subid("159_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 933
    .local string rx1827_tgt
    .local int rx1827_pos
    .local int rx1827_off
    .local int rx1827_eos
    .local int rx1827_rep
    .local pmc rx1827_cur
    .local pmc rx1827_debug
    (rx1827_cur, rx1827_pos, rx1827_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1827_cur
    .local pmc match
    .lex "$/", match
    length rx1827_eos, rx1827_tgt
    gt rx1827_pos, rx1827_eos, rx1827_done
    set rx1827_off, 0
    lt rx1827_pos, 2, rx1827_start
    sub rx1827_off, rx1827_pos, 1
    substr rx1827_tgt, rx1827_tgt, rx1827_off
  rx1827_start:
    eq $I10, 1, rx1827_restart
    if_null rx1827_debug, debug_1304
    rx1827_cur."!cursor_debug"("START", "twigil")
  debug_1304:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1828_done
    goto rxscan1828_scan
  rxscan1828_loop:
    (rx1827_pos) = rx1827_cur."from"()
    inc rx1827_pos
    rx1827_cur."!cursor_from"(rx1827_pos)
    ge rx1827_pos, rx1827_eos, rxscan1828_done
  rxscan1828_scan:
    set_addr $I10, rxscan1828_loop
    rx1827_cur."!mark_push"(0, rx1827_pos, $I10)
  rxscan1828_done:
  # rx enumcharlist negate=0 
    ge rx1827_pos, rx1827_eos, rx1827_fail
    sub $I10, rx1827_pos, rx1827_off
    substr $S10, rx1827_tgt, $I10, 1
    index $I11, "*!?", $S10
    lt $I11, 0, rx1827_fail
    inc rx1827_pos
  # rx pass
    rx1827_cur."!cursor_pass"(rx1827_pos, "twigil")
    if_null rx1827_debug, debug_1305
    rx1827_cur."!cursor_debug"("PASS", "twigil", " at pos=", rx1827_pos)
  debug_1305:
    .return (rx1827_cur)
  rx1827_restart:
    if_null rx1827_debug, debug_1306
    rx1827_cur."!cursor_debug"("NEXT", "twigil")
  debug_1306:
  rx1827_fail:
    (rx1827_rep, rx1827_pos, $I10, $P10) = rx1827_cur."!mark_fail"(0)
    lt rx1827_pos, -1, rx1827_done
    eq rx1827_pos, -1, rx1827_fail
    jump $I10
  rx1827_done:
    rx1827_cur."!cursor_fail"()
    if_null rx1827_debug, debug_1307
    rx1827_cur."!cursor_debug"("FAIL", "twigil")
  debug_1307:
    .return (rx1827_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__twigil"  :subid("160_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 933
    new $P103, "ResizablePMCArray"
    push $P103, "*"
    push $P103, "!"
    push $P103, "?"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator"  :subid("161_1334921493.34")
    .param pmc param_1831
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 935
    .lex "self", param_1831
    $P103 = param_1831."!protoregex"("package_declarator")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator"  :subid("162_1334921493.34")
    .param pmc param_1833
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 935
    .lex "self", param_1833
    $P104 = param_1833."!PREFIX__!protoregex"("package_declarator")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<module>"  :subid("163_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 937
    new $P103, "Undef"
    set $P1835, $P103
    .lex "$*OUTERPACKAGE", $P1835
.annotate 'line', 938
    new $P104, "Undef"
    set $P1836, $P104
    .lex "$*PKGDECL", $P1836
.annotate 'line', 936
    .local string rx1837_tgt
    .local int rx1837_pos
    .local int rx1837_off
    .local int rx1837_eos
    .local int rx1837_rep
    .local pmc rx1837_cur
    .local pmc rx1837_debug
    (rx1837_cur, rx1837_pos, rx1837_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1837_cur
    .local pmc match
    .lex "$/", match
    length rx1837_eos, rx1837_tgt
    gt rx1837_pos, rx1837_eos, rx1837_done
    set rx1837_off, 0
    lt rx1837_pos, 2, rx1837_start
    sub rx1837_off, rx1837_pos, 1
    substr rx1837_tgt, rx1837_tgt, rx1837_off
  rx1837_start:
    eq $I10, 1, rx1837_restart
    if_null rx1837_debug, debug_1308
    rx1837_cur."!cursor_debug"("START", "package_declarator:sym<module>")
  debug_1308:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1838_done
    goto rxscan1838_scan
  rxscan1838_loop:
    (rx1837_pos) = rx1837_cur."from"()
    inc rx1837_pos
    rx1837_cur."!cursor_from"(rx1837_pos)
    ge rx1837_pos, rx1837_eos, rxscan1838_done
  rxscan1838_scan:
    set_addr $I10, rxscan1838_loop
    rx1837_cur."!mark_push"(0, rx1837_pos, $I10)
  rxscan1838_done:
.annotate 'line', 937
    rx1837_cur."!cursor_pos"(rx1837_pos)
    find_dynamic_lex $P107, "$*PACKAGE"
    unless_null $P107, vivify_1309
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$PACKAGE"]
    unless_null $P107, vivify_1310
    die "Contextual $*PACKAGE not found"
  vivify_1310:
  vivify_1309:
    set $P1835, $P107
.annotate 'line', 938
    rx1837_cur."!cursor_pos"(rx1837_pos)
    new $P108, "String"
    assign $P108, "module"
    set $P1836, $P108
.annotate 'line', 939
  # rx subcapture "sym"
    set_addr $I10, rxcap_1839_fail
    rx1837_cur."!mark_push"(0, rx1837_pos, $I10)
  # rx literal  "module"
    add $I11, rx1837_pos, 6
    gt $I11, rx1837_eos, rx1837_fail
    sub $I11, rx1837_pos, rx1837_off
    substr $S10, rx1837_tgt, $I11, 6
    ne $S10, "module", rx1837_fail
    add rx1837_pos, 6
    set_addr $I10, rxcap_1839_fail
    ($I12, $I11) = rx1837_cur."!mark_peek"($I10)
    rx1837_cur."!cursor_pos"($I11)
    ($P10) = rx1837_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1837_pos, "")
    rx1837_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1839_done
  rxcap_1839_fail:
    goto rx1837_fail
  rxcap_1839_done:
  # rx subrule "package_def" subtype=capture negate=
    rx1837_cur."!cursor_pos"(rx1837_pos)
    $P10 = rx1837_cur."package_def"()
    unless $P10, rx1837_fail
    rx1837_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx1837_pos = $P10."pos"()
.annotate 'line', 936
  # rx pass
    rx1837_cur."!cursor_pass"(rx1837_pos, "package_declarator:sym<module>")
    if_null rx1837_debug, debug_1311
    rx1837_cur."!cursor_debug"("PASS", "package_declarator:sym<module>", " at pos=", rx1837_pos)
  debug_1311:
    .return (rx1837_cur)
  rx1837_restart:
    if_null rx1837_debug, debug_1312
    rx1837_cur."!cursor_debug"("NEXT", "package_declarator:sym<module>")
  debug_1312:
  rx1837_fail:
    (rx1837_rep, rx1837_pos, $I10, $P10) = rx1837_cur."!mark_fail"(0)
    lt rx1837_pos, -1, rx1837_done
    eq rx1837_pos, -1, rx1837_fail
    jump $I10
  rx1837_done:
    rx1837_cur."!cursor_fail"()
    if_null rx1837_debug, debug_1313
    rx1837_cur."!cursor_debug"("FAIL", "package_declarator:sym<module>")
  debug_1313:
    .return (rx1837_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<module>"  :subid("164_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 936
    $P109 = self."!PREFIX__!subrule"("package_def", "module")
    new $P110, "ResizablePMCArray"
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<knowhow>"  :subid("165_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 942
    new $P103, "Undef"
    set $P1842, $P103
    .lex "$*OUTERPACKAGE", $P1842
.annotate 'line', 943
    new $P104, "Undef"
    set $P1843, $P104
    .lex "$*PKGDECL", $P1843
.annotate 'line', 941
    .local string rx1844_tgt
    .local int rx1844_pos
    .local int rx1844_off
    .local int rx1844_eos
    .local int rx1844_rep
    .local pmc rx1844_cur
    .local pmc rx1844_debug
    (rx1844_cur, rx1844_pos, rx1844_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1844_cur
    .local pmc match
    .lex "$/", match
    length rx1844_eos, rx1844_tgt
    gt rx1844_pos, rx1844_eos, rx1844_done
    set rx1844_off, 0
    lt rx1844_pos, 2, rx1844_start
    sub rx1844_off, rx1844_pos, 1
    substr rx1844_tgt, rx1844_tgt, rx1844_off
  rx1844_start:
    eq $I10, 1, rx1844_restart
    if_null rx1844_debug, debug_1314
    rx1844_cur."!cursor_debug"("START", "package_declarator:sym<knowhow>")
  debug_1314:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1845_done
    goto rxscan1845_scan
  rxscan1845_loop:
    (rx1844_pos) = rx1844_cur."from"()
    inc rx1844_pos
    rx1844_cur."!cursor_from"(rx1844_pos)
    ge rx1844_pos, rx1844_eos, rxscan1845_done
  rxscan1845_scan:
    set_addr $I10, rxscan1845_loop
    rx1844_cur."!mark_push"(0, rx1844_pos, $I10)
  rxscan1845_done:
.annotate 'line', 942
    rx1844_cur."!cursor_pos"(rx1844_pos)
    find_dynamic_lex $P107, "$*PACKAGE"
    unless_null $P107, vivify_1315
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$PACKAGE"]
    unless_null $P107, vivify_1316
    die "Contextual $*PACKAGE not found"
  vivify_1316:
  vivify_1315:
    set $P1842, $P107
.annotate 'line', 943
    rx1844_cur."!cursor_pos"(rx1844_pos)
    new $P108, "String"
    assign $P108, "knowhow"
    set $P1843, $P108
.annotate 'line', 944
  # rx subcapture "sym"
    set_addr $I10, rxcap_1846_fail
    rx1844_cur."!mark_push"(0, rx1844_pos, $I10)
  # rx literal  "knowhow"
    add $I11, rx1844_pos, 7
    gt $I11, rx1844_eos, rx1844_fail
    sub $I11, rx1844_pos, rx1844_off
    substr $S10, rx1844_tgt, $I11, 7
    ne $S10, "knowhow", rx1844_fail
    add rx1844_pos, 7
    set_addr $I10, rxcap_1846_fail
    ($I12, $I11) = rx1844_cur."!mark_peek"($I10)
    rx1844_cur."!cursor_pos"($I11)
    ($P10) = rx1844_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1844_pos, "")
    rx1844_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1846_done
  rxcap_1846_fail:
    goto rx1844_fail
  rxcap_1846_done:
  # rx subrule "package_def" subtype=capture negate=
    rx1844_cur."!cursor_pos"(rx1844_pos)
    $P10 = rx1844_cur."package_def"()
    unless $P10, rx1844_fail
    rx1844_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx1844_pos = $P10."pos"()
.annotate 'line', 941
  # rx pass
    rx1844_cur."!cursor_pass"(rx1844_pos, "package_declarator:sym<knowhow>")
    if_null rx1844_debug, debug_1317
    rx1844_cur."!cursor_debug"("PASS", "package_declarator:sym<knowhow>", " at pos=", rx1844_pos)
  debug_1317:
    .return (rx1844_cur)
  rx1844_restart:
    if_null rx1844_debug, debug_1318
    rx1844_cur."!cursor_debug"("NEXT", "package_declarator:sym<knowhow>")
  debug_1318:
  rx1844_fail:
    (rx1844_rep, rx1844_pos, $I10, $P10) = rx1844_cur."!mark_fail"(0)
    lt rx1844_pos, -1, rx1844_done
    eq rx1844_pos, -1, rx1844_fail
    jump $I10
  rx1844_done:
    rx1844_cur."!cursor_fail"()
    if_null rx1844_debug, debug_1319
    rx1844_cur."!cursor_debug"("FAIL", "package_declarator:sym<knowhow>")
  debug_1319:
    .return (rx1844_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<knowhow>"  :subid("166_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 941
    $P109 = self."!PREFIX__!subrule"("package_def", "knowhow")
    new $P110, "ResizablePMCArray"
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<class>"  :subid("167_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 947
    new $P103, "Undef"
    set $P1849, $P103
    .lex "$*OUTERPACKAGE", $P1849
.annotate 'line', 948
    new $P104, "Undef"
    set $P1850, $P104
    .lex "$*PKGDECL", $P1850
.annotate 'line', 946
    .local string rx1851_tgt
    .local int rx1851_pos
    .local int rx1851_off
    .local int rx1851_eos
    .local int rx1851_rep
    .local pmc rx1851_cur
    .local pmc rx1851_debug
    (rx1851_cur, rx1851_pos, rx1851_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1851_cur
    .local pmc match
    .lex "$/", match
    length rx1851_eos, rx1851_tgt
    gt rx1851_pos, rx1851_eos, rx1851_done
    set rx1851_off, 0
    lt rx1851_pos, 2, rx1851_start
    sub rx1851_off, rx1851_pos, 1
    substr rx1851_tgt, rx1851_tgt, rx1851_off
  rx1851_start:
    eq $I10, 1, rx1851_restart
    if_null rx1851_debug, debug_1320
    rx1851_cur."!cursor_debug"("START", "package_declarator:sym<class>")
  debug_1320:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1852_done
    goto rxscan1852_scan
  rxscan1852_loop:
    (rx1851_pos) = rx1851_cur."from"()
    inc rx1851_pos
    rx1851_cur."!cursor_from"(rx1851_pos)
    ge rx1851_pos, rx1851_eos, rxscan1852_done
  rxscan1852_scan:
    set_addr $I10, rxscan1852_loop
    rx1851_cur."!mark_push"(0, rx1851_pos, $I10)
  rxscan1852_done:
.annotate 'line', 947
    rx1851_cur."!cursor_pos"(rx1851_pos)
    find_dynamic_lex $P107, "$*PACKAGE"
    unless_null $P107, vivify_1321
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$PACKAGE"]
    unless_null $P107, vivify_1322
    die "Contextual $*PACKAGE not found"
  vivify_1322:
  vivify_1321:
    set $P1849, $P107
.annotate 'line', 948
    rx1851_cur."!cursor_pos"(rx1851_pos)
    new $P108, "String"
    assign $P108, "class"
    set $P1850, $P108
.annotate 'line', 949
  # rx subcapture "sym"
    set_addr $I10, rxcap_1853_fail
    rx1851_cur."!mark_push"(0, rx1851_pos, $I10)
  # rx literal  "class"
    add $I11, rx1851_pos, 5
    gt $I11, rx1851_eos, rx1851_fail
    sub $I11, rx1851_pos, rx1851_off
    substr $S10, rx1851_tgt, $I11, 5
    ne $S10, "class", rx1851_fail
    add rx1851_pos, 5
    set_addr $I10, rxcap_1853_fail
    ($I12, $I11) = rx1851_cur."!mark_peek"($I10)
    rx1851_cur."!cursor_pos"($I11)
    ($P10) = rx1851_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1851_pos, "")
    rx1851_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1853_done
  rxcap_1853_fail:
    goto rx1851_fail
  rxcap_1853_done:
  # rx subrule "package_def" subtype=capture negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."package_def"()
    unless $P10, rx1851_fail
    rx1851_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx1851_pos = $P10."pos"()
.annotate 'line', 946
  # rx pass
    rx1851_cur."!cursor_pass"(rx1851_pos, "package_declarator:sym<class>")
    if_null rx1851_debug, debug_1323
    rx1851_cur."!cursor_debug"("PASS", "package_declarator:sym<class>", " at pos=", rx1851_pos)
  debug_1323:
    .return (rx1851_cur)
  rx1851_restart:
    if_null rx1851_debug, debug_1324
    rx1851_cur."!cursor_debug"("NEXT", "package_declarator:sym<class>")
  debug_1324:
  rx1851_fail:
    (rx1851_rep, rx1851_pos, $I10, $P10) = rx1851_cur."!mark_fail"(0)
    lt rx1851_pos, -1, rx1851_done
    eq rx1851_pos, -1, rx1851_fail
    jump $I10
  rx1851_done:
    rx1851_cur."!cursor_fail"()
    if_null rx1851_debug, debug_1325
    rx1851_cur."!cursor_debug"("FAIL", "package_declarator:sym<class>")
  debug_1325:
    .return (rx1851_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<class>"  :subid("168_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 946
    $P109 = self."!PREFIX__!subrule"("package_def", "class")
    new $P110, "ResizablePMCArray"
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<grammar>"  :subid("169_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 952
    new $P103, "Undef"
    set $P1856, $P103
    .lex "$*OUTERPACKAGE", $P1856
.annotate 'line', 953
    new $P104, "Undef"
    set $P1857, $P104
    .lex "$*PKGDECL", $P1857
.annotate 'line', 951
    .local string rx1858_tgt
    .local int rx1858_pos
    .local int rx1858_off
    .local int rx1858_eos
    .local int rx1858_rep
    .local pmc rx1858_cur
    .local pmc rx1858_debug
    (rx1858_cur, rx1858_pos, rx1858_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1858_cur
    .local pmc match
    .lex "$/", match
    length rx1858_eos, rx1858_tgt
    gt rx1858_pos, rx1858_eos, rx1858_done
    set rx1858_off, 0
    lt rx1858_pos, 2, rx1858_start
    sub rx1858_off, rx1858_pos, 1
    substr rx1858_tgt, rx1858_tgt, rx1858_off
  rx1858_start:
    eq $I10, 1, rx1858_restart
    if_null rx1858_debug, debug_1326
    rx1858_cur."!cursor_debug"("START", "package_declarator:sym<grammar>")
  debug_1326:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1859_done
    goto rxscan1859_scan
  rxscan1859_loop:
    (rx1858_pos) = rx1858_cur."from"()
    inc rx1858_pos
    rx1858_cur."!cursor_from"(rx1858_pos)
    ge rx1858_pos, rx1858_eos, rxscan1859_done
  rxscan1859_scan:
    set_addr $I10, rxscan1859_loop
    rx1858_cur."!mark_push"(0, rx1858_pos, $I10)
  rxscan1859_done:
.annotate 'line', 952
    rx1858_cur."!cursor_pos"(rx1858_pos)
    find_dynamic_lex $P107, "$*PACKAGE"
    unless_null $P107, vivify_1327
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$PACKAGE"]
    unless_null $P107, vivify_1328
    die "Contextual $*PACKAGE not found"
  vivify_1328:
  vivify_1327:
    set $P1856, $P107
.annotate 'line', 953
    rx1858_cur."!cursor_pos"(rx1858_pos)
    new $P108, "String"
    assign $P108, "grammar"
    set $P1857, $P108
.annotate 'line', 954
  # rx subcapture "sym"
    set_addr $I10, rxcap_1860_fail
    rx1858_cur."!mark_push"(0, rx1858_pos, $I10)
  # rx literal  "grammar"
    add $I11, rx1858_pos, 7
    gt $I11, rx1858_eos, rx1858_fail
    sub $I11, rx1858_pos, rx1858_off
    substr $S10, rx1858_tgt, $I11, 7
    ne $S10, "grammar", rx1858_fail
    add rx1858_pos, 7
    set_addr $I10, rxcap_1860_fail
    ($I12, $I11) = rx1858_cur."!mark_peek"($I10)
    rx1858_cur."!cursor_pos"($I11)
    ($P10) = rx1858_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1858_pos, "")
    rx1858_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1860_done
  rxcap_1860_fail:
    goto rx1858_fail
  rxcap_1860_done:
  # rx subrule "package_def" subtype=capture negate=
    rx1858_cur."!cursor_pos"(rx1858_pos)
    $P10 = rx1858_cur."package_def"()
    unless $P10, rx1858_fail
    rx1858_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx1858_pos = $P10."pos"()
.annotate 'line', 951
  # rx pass
    rx1858_cur."!cursor_pass"(rx1858_pos, "package_declarator:sym<grammar>")
    if_null rx1858_debug, debug_1329
    rx1858_cur."!cursor_debug"("PASS", "package_declarator:sym<grammar>", " at pos=", rx1858_pos)
  debug_1329:
    .return (rx1858_cur)
  rx1858_restart:
    if_null rx1858_debug, debug_1330
    rx1858_cur."!cursor_debug"("NEXT", "package_declarator:sym<grammar>")
  debug_1330:
  rx1858_fail:
    (rx1858_rep, rx1858_pos, $I10, $P10) = rx1858_cur."!mark_fail"(0)
    lt rx1858_pos, -1, rx1858_done
    eq rx1858_pos, -1, rx1858_fail
    jump $I10
  rx1858_done:
    rx1858_cur."!cursor_fail"()
    if_null rx1858_debug, debug_1331
    rx1858_cur."!cursor_debug"("FAIL", "package_declarator:sym<grammar>")
  debug_1331:
    .return (rx1858_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<grammar>"  :subid("170_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 951
    $P109 = self."!PREFIX__!subrule"("package_def", "grammar")
    new $P110, "ResizablePMCArray"
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<role>"  :subid("171_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 957
    new $P103, "Undef"
    set $P1863, $P103
    .lex "$*OUTERPACKAGE", $P1863
.annotate 'line', 958
    new $P104, "Undef"
    set $P1864, $P104
    .lex "$*PKGDECL", $P1864
.annotate 'line', 956
    .local string rx1865_tgt
    .local int rx1865_pos
    .local int rx1865_off
    .local int rx1865_eos
    .local int rx1865_rep
    .local pmc rx1865_cur
    .local pmc rx1865_debug
    (rx1865_cur, rx1865_pos, rx1865_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1865_cur
    .local pmc match
    .lex "$/", match
    length rx1865_eos, rx1865_tgt
    gt rx1865_pos, rx1865_eos, rx1865_done
    set rx1865_off, 0
    lt rx1865_pos, 2, rx1865_start
    sub rx1865_off, rx1865_pos, 1
    substr rx1865_tgt, rx1865_tgt, rx1865_off
  rx1865_start:
    eq $I10, 1, rx1865_restart
    if_null rx1865_debug, debug_1332
    rx1865_cur."!cursor_debug"("START", "package_declarator:sym<role>")
  debug_1332:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1866_done
    goto rxscan1866_scan
  rxscan1866_loop:
    (rx1865_pos) = rx1865_cur."from"()
    inc rx1865_pos
    rx1865_cur."!cursor_from"(rx1865_pos)
    ge rx1865_pos, rx1865_eos, rxscan1866_done
  rxscan1866_scan:
    set_addr $I10, rxscan1866_loop
    rx1865_cur."!mark_push"(0, rx1865_pos, $I10)
  rxscan1866_done:
.annotate 'line', 957
    rx1865_cur."!cursor_pos"(rx1865_pos)
    find_dynamic_lex $P107, "$*PACKAGE"
    unless_null $P107, vivify_1333
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$PACKAGE"]
    unless_null $P107, vivify_1334
    die "Contextual $*PACKAGE not found"
  vivify_1334:
  vivify_1333:
    set $P1863, $P107
.annotate 'line', 958
    rx1865_cur."!cursor_pos"(rx1865_pos)
    new $P108, "String"
    assign $P108, "role"
    set $P1864, $P108
.annotate 'line', 959
  # rx subcapture "sym"
    set_addr $I10, rxcap_1867_fail
    rx1865_cur."!mark_push"(0, rx1865_pos, $I10)
  # rx literal  "role"
    add $I11, rx1865_pos, 4
    gt $I11, rx1865_eos, rx1865_fail
    sub $I11, rx1865_pos, rx1865_off
    substr $S10, rx1865_tgt, $I11, 4
    ne $S10, "role", rx1865_fail
    add rx1865_pos, 4
    set_addr $I10, rxcap_1867_fail
    ($I12, $I11) = rx1865_cur."!mark_peek"($I10)
    rx1865_cur."!cursor_pos"($I11)
    ($P10) = rx1865_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1865_pos, "")
    rx1865_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1867_done
  rxcap_1867_fail:
    goto rx1865_fail
  rxcap_1867_done:
  # rx subrule "package_def" subtype=capture negate=
    rx1865_cur."!cursor_pos"(rx1865_pos)
    $P10 = rx1865_cur."package_def"()
    unless $P10, rx1865_fail
    rx1865_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx1865_pos = $P10."pos"()
.annotate 'line', 956
  # rx pass
    rx1865_cur."!cursor_pass"(rx1865_pos, "package_declarator:sym<role>")
    if_null rx1865_debug, debug_1335
    rx1865_cur."!cursor_debug"("PASS", "package_declarator:sym<role>", " at pos=", rx1865_pos)
  debug_1335:
    .return (rx1865_cur)
  rx1865_restart:
    if_null rx1865_debug, debug_1336
    rx1865_cur."!cursor_debug"("NEXT", "package_declarator:sym<role>")
  debug_1336:
  rx1865_fail:
    (rx1865_rep, rx1865_pos, $I10, $P10) = rx1865_cur."!mark_fail"(0)
    lt rx1865_pos, -1, rx1865_done
    eq rx1865_pos, -1, rx1865_fail
    jump $I10
  rx1865_done:
    rx1865_cur."!cursor_fail"()
    if_null rx1865_debug, debug_1337
    rx1865_cur."!cursor_debug"("FAIL", "package_declarator:sym<role>")
  debug_1337:
    .return (rx1865_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<role>"  :subid("172_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 956
    $P109 = self."!PREFIX__!subrule"("package_def", "role")
    new $P110, "ResizablePMCArray"
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<native>"  :subid("173_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 962
    new $P103, "Undef"
    set $P1870, $P103
    .lex "$*OUTERPACKAGE", $P1870
.annotate 'line', 963
    new $P104, "Undef"
    set $P1871, $P104
    .lex "$*PKGDECL", $P1871
.annotate 'line', 961
    .local string rx1872_tgt
    .local int rx1872_pos
    .local int rx1872_off
    .local int rx1872_eos
    .local int rx1872_rep
    .local pmc rx1872_cur
    .local pmc rx1872_debug
    (rx1872_cur, rx1872_pos, rx1872_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1872_cur
    .local pmc match
    .lex "$/", match
    length rx1872_eos, rx1872_tgt
    gt rx1872_pos, rx1872_eos, rx1872_done
    set rx1872_off, 0
    lt rx1872_pos, 2, rx1872_start
    sub rx1872_off, rx1872_pos, 1
    substr rx1872_tgt, rx1872_tgt, rx1872_off
  rx1872_start:
    eq $I10, 1, rx1872_restart
    if_null rx1872_debug, debug_1338
    rx1872_cur."!cursor_debug"("START", "package_declarator:sym<native>")
  debug_1338:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1873_done
    goto rxscan1873_scan
  rxscan1873_loop:
    (rx1872_pos) = rx1872_cur."from"()
    inc rx1872_pos
    rx1872_cur."!cursor_from"(rx1872_pos)
    ge rx1872_pos, rx1872_eos, rxscan1873_done
  rxscan1873_scan:
    set_addr $I10, rxscan1873_loop
    rx1872_cur."!mark_push"(0, rx1872_pos, $I10)
  rxscan1873_done:
.annotate 'line', 962
    rx1872_cur."!cursor_pos"(rx1872_pos)
    find_dynamic_lex $P107, "$*PACKAGE"
    unless_null $P107, vivify_1339
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$PACKAGE"]
    unless_null $P107, vivify_1340
    die "Contextual $*PACKAGE not found"
  vivify_1340:
  vivify_1339:
    set $P1870, $P107
.annotate 'line', 963
    rx1872_cur."!cursor_pos"(rx1872_pos)
    new $P108, "String"
    assign $P108, "native"
    set $P1871, $P108
.annotate 'line', 964
  # rx subcapture "sym"
    set_addr $I10, rxcap_1874_fail
    rx1872_cur."!mark_push"(0, rx1872_pos, $I10)
  # rx literal  "native"
    add $I11, rx1872_pos, 6
    gt $I11, rx1872_eos, rx1872_fail
    sub $I11, rx1872_pos, rx1872_off
    substr $S10, rx1872_tgt, $I11, 6
    ne $S10, "native", rx1872_fail
    add rx1872_pos, 6
    set_addr $I10, rxcap_1874_fail
    ($I12, $I11) = rx1872_cur."!mark_peek"($I10)
    rx1872_cur."!cursor_pos"($I11)
    ($P10) = rx1872_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1872_pos, "")
    rx1872_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1874_done
  rxcap_1874_fail:
    goto rx1872_fail
  rxcap_1874_done:
  # rx subrule "package_def" subtype=capture negate=
    rx1872_cur."!cursor_pos"(rx1872_pos)
    $P10 = rx1872_cur."package_def"()
    unless $P10, rx1872_fail
    rx1872_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx1872_pos = $P10."pos"()
.annotate 'line', 961
  # rx pass
    rx1872_cur."!cursor_pass"(rx1872_pos, "package_declarator:sym<native>")
    if_null rx1872_debug, debug_1341
    rx1872_cur."!cursor_debug"("PASS", "package_declarator:sym<native>", " at pos=", rx1872_pos)
  debug_1341:
    .return (rx1872_cur)
  rx1872_restart:
    if_null rx1872_debug, debug_1342
    rx1872_cur."!cursor_debug"("NEXT", "package_declarator:sym<native>")
  debug_1342:
  rx1872_fail:
    (rx1872_rep, rx1872_pos, $I10, $P10) = rx1872_cur."!mark_fail"(0)
    lt rx1872_pos, -1, rx1872_done
    eq rx1872_pos, -1, rx1872_fail
    jump $I10
  rx1872_done:
    rx1872_cur."!cursor_fail"()
    if_null rx1872_debug, debug_1343
    rx1872_cur."!cursor_debug"("FAIL", "package_declarator:sym<native>")
  debug_1343:
    .return (rx1872_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<native>"  :subid("174_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 961
    $P109 = self."!PREFIX__!subrule"("package_def", "native")
    new $P110, "ResizablePMCArray"
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<stub>"  :subid("175_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 967
    new $P103, "Undef"
    set $P1877, $P103
    .lex "$*OUTERPACKAGE", $P1877
.annotate 'line', 968
    new $P104, "Undef"
    set $P1878, $P104
    .lex "$*PKGDECL", $P1878
.annotate 'line', 966
    .local string rx1879_tgt
    .local int rx1879_pos
    .local int rx1879_off
    .local int rx1879_eos
    .local int rx1879_rep
    .local pmc rx1879_cur
    .local pmc rx1879_debug
    (rx1879_cur, rx1879_pos, rx1879_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1879_cur
    .local pmc match
    .lex "$/", match
    length rx1879_eos, rx1879_tgt
    gt rx1879_pos, rx1879_eos, rx1879_done
    set rx1879_off, 0
    lt rx1879_pos, 2, rx1879_start
    sub rx1879_off, rx1879_pos, 1
    substr rx1879_tgt, rx1879_tgt, rx1879_off
  rx1879_start:
    eq $I10, 1, rx1879_restart
    if_null rx1879_debug, debug_1344
    rx1879_cur."!cursor_debug"("START", "package_declarator:sym<stub>")
  debug_1344:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1880_done
    goto rxscan1880_scan
  rxscan1880_loop:
    (rx1879_pos) = rx1879_cur."from"()
    inc rx1879_pos
    rx1879_cur."!cursor_from"(rx1879_pos)
    ge rx1879_pos, rx1879_eos, rxscan1880_done
  rxscan1880_scan:
    set_addr $I10, rxscan1880_loop
    rx1879_cur."!mark_push"(0, rx1879_pos, $I10)
  rxscan1880_done:
  # rx subrule "ws" subtype=method negate=
    rx1879_cur."!cursor_pos"(rx1879_pos)
    $P10 = rx1879_cur."ws"()
    unless $P10, rx1879_fail
    rx1879_pos = $P10."pos"()
.annotate 'line', 967
    rx1879_cur."!cursor_pos"(rx1879_pos)
    find_dynamic_lex $P108, "$*PACKAGE"
    unless_null $P108, vivify_1345
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1346
    die "Contextual $*PACKAGE not found"
  vivify_1346:
  vivify_1345:
    set $P1877, $P108
  # rx subrule "ws" subtype=method negate=
    rx1879_cur."!cursor_pos"(rx1879_pos)
    $P10 = rx1879_cur."ws"()
    unless $P10, rx1879_fail
    rx1879_pos = $P10."pos"()
.annotate 'line', 968
    rx1879_cur."!cursor_pos"(rx1879_pos)
    new $P110, "String"
    assign $P110, "stub"
    set $P1878, $P110
  # rx subrule "ws" subtype=method negate=
    rx1879_cur."!cursor_pos"(rx1879_pos)
    $P10 = rx1879_cur."ws"()
    unless $P10, rx1879_fail
    rx1879_pos = $P10."pos"()
.annotate 'line', 969
  # rx subcapture "sym"
    set_addr $I10, rxcap_1881_fail
    rx1879_cur."!mark_push"(0, rx1879_pos, $I10)
  # rx literal  "stub"
    add $I11, rx1879_pos, 4
    gt $I11, rx1879_eos, rx1879_fail
    sub $I11, rx1879_pos, rx1879_off
    substr $S10, rx1879_tgt, $I11, 4
    ne $S10, "stub", rx1879_fail
    add rx1879_pos, 4
    set_addr $I10, rxcap_1881_fail
    ($I12, $I11) = rx1879_cur."!mark_peek"($I10)
    rx1879_cur."!cursor_pos"($I11)
    ($P10) = rx1879_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1879_pos, "")
    rx1879_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1881_done
  rxcap_1881_fail:
    goto rx1879_fail
  rxcap_1881_done:
  # rx subrule "ws" subtype=method negate=
    rx1879_cur."!cursor_pos"(rx1879_pos)
    $P10 = rx1879_cur."ws"()
    unless $P10, rx1879_fail
    rx1879_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx1879_cur."!cursor_pos"(rx1879_pos)
    $P10 = rx1879_cur."name"()
    unless $P10, rx1879_fail
    rx1879_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx1879_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1879_cur."!cursor_pos"(rx1879_pos)
    $P10 = rx1879_cur."ws"()
    unless $P10, rx1879_fail
    rx1879_pos = $P10."pos"()
.annotate 'line', 970
  # rx literal  "metaclass"
    add $I11, rx1879_pos, 9
    gt $I11, rx1879_eos, rx1879_fail
    sub $I11, rx1879_pos, rx1879_off
    substr $S10, rx1879_tgt, $I11, 9
    ne $S10, "metaclass", rx1879_fail
    add rx1879_pos, 9
  # rx subrule "ws" subtype=method negate=
    rx1879_cur."!cursor_pos"(rx1879_pos)
    $P10 = rx1879_cur."ws"()
    unless $P10, rx1879_fail
    rx1879_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx1879_cur."!cursor_pos"(rx1879_pos)
    $P10 = rx1879_cur."name"()
    unless $P10, rx1879_fail
    rx1879_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("metaclass")
    rx1879_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1879_cur."!cursor_pos"(rx1879_pos)
    $P10 = rx1879_cur."ws"()
    unless $P10, rx1879_fail
    rx1879_pos = $P10."pos"()
.annotate 'line', 971
  # rx literal  "{"
    add $I11, rx1879_pos, 1
    gt $I11, rx1879_eos, rx1879_fail
    sub $I11, rx1879_pos, rx1879_off
    ord $I11, rx1879_tgt, $I11
    ne $I11, 123, rx1879_fail
    add rx1879_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1879_cur."!cursor_pos"(rx1879_pos)
    $P10 = rx1879_cur."ws"()
    unless $P10, rx1879_fail
    rx1879_pos = $P10."pos"()
  # rx literal  "..."
    add $I11, rx1879_pos, 3
    gt $I11, rx1879_eos, rx1879_fail
    sub $I11, rx1879_pos, rx1879_off
    substr $S10, rx1879_tgt, $I11, 3
    ne $S10, "...", rx1879_fail
    add rx1879_pos, 3
  # rx subrule "ws" subtype=method negate=
    rx1879_cur."!cursor_pos"(rx1879_pos)
    $P10 = rx1879_cur."ws"()
    unless $P10, rx1879_fail
    rx1879_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx1879_pos, 1
    gt $I11, rx1879_eos, rx1879_fail
    sub $I11, rx1879_pos, rx1879_off
    ord $I11, rx1879_tgt, $I11
    ne $I11, 125, rx1879_fail
    add rx1879_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1879_cur."!cursor_pos"(rx1879_pos)
    $P10 = rx1879_cur."ws"()
    unless $P10, rx1879_fail
    rx1879_pos = $P10."pos"()
.annotate 'line', 966
  # rx pass
    rx1879_cur."!cursor_pass"(rx1879_pos, "package_declarator:sym<stub>")
    if_null rx1879_debug, debug_1347
    rx1879_cur."!cursor_debug"("PASS", "package_declarator:sym<stub>", " at pos=", rx1879_pos)
  debug_1347:
    .return (rx1879_cur)
  rx1879_restart:
    if_null rx1879_debug, debug_1348
    rx1879_cur."!cursor_debug"("NEXT", "package_declarator:sym<stub>")
  debug_1348:
  rx1879_fail:
    (rx1879_rep, rx1879_pos, $I10, $P10) = rx1879_cur."!mark_fail"(0)
    lt rx1879_pos, -1, rx1879_done
    eq rx1879_pos, -1, rx1879_fail
    jump $I10
  rx1879_done:
    rx1879_cur."!cursor_fail"()
    if_null rx1879_debug, debug_1349
    rx1879_cur."!cursor_debug"("FAIL", "package_declarator:sym<stub>")
  debug_1349:
    .return (rx1879_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<stub>"  :subid("176_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 966
    $P119 = self."!PREFIX__!subrule"("ws", "")
    new $P120, "ResizablePMCArray"
    push $P120, $P119
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_def"  :subid("177_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 974
    .const 'Sub' $P1889 = "578_1334921493.34" 
    capture_lex $P1889
.annotate 'line', 975
    new $P103, "Undef"
    set $P1884, $P103
    .lex "$*PACKAGE", $P1884
.annotate 'line', 974
    .local string rx1885_tgt
    .local int rx1885_pos
    .local int rx1885_off
    .local int rx1885_eos
    .local int rx1885_rep
    .local pmc rx1885_cur
    .local pmc rx1885_debug
    (rx1885_cur, rx1885_pos, rx1885_tgt, $I10) = self."!cursor_start"()
    rx1885_cur."!cursor_caparray"("repr", "parent", "role")
    .lex unicode:"$\x{a2}", rx1885_cur
    .local pmc match
    .lex "$/", match
    length rx1885_eos, rx1885_tgt
    gt rx1885_pos, rx1885_eos, rx1885_done
    set rx1885_off, 0
    lt rx1885_pos, 2, rx1885_start
    sub rx1885_off, rx1885_pos, 1
    substr rx1885_tgt, rx1885_tgt, rx1885_off
  rx1885_start:
    eq $I10, 1, rx1885_restart
    if_null rx1885_debug, debug_1350
    rx1885_cur."!cursor_debug"("START", "package_def")
  debug_1350:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1886_done
    goto rxscan1886_scan
  rxscan1886_loop:
    (rx1885_pos) = rx1885_cur."from"()
    inc rx1885_pos
    rx1885_cur."!cursor_from"(rx1885_pos)
    ge rx1885_pos, rx1885_eos, rxscan1886_done
  rxscan1886_scan:
    set_addr $I10, rxscan1886_loop
    rx1885_cur."!mark_push"(0, rx1885_pos, $I10)
  rxscan1886_done:
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
.annotate 'line', 975
    rx1885_cur."!cursor_pos"(rx1885_pos)
    set $P107, $P1884
    unless_null $P107, vivify_1351
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$PACKAGE"]
    unless_null $P107, vivify_1352
    die "Contextual $*PACKAGE not found"
  vivify_1352:
  vivify_1351:
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
.annotate 'line', 977
  # rx subrule "name" subtype=capture negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."name"()
    unless $P10, rx1885_fail
    rx1885_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx1885_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
.annotate 'line', 978
  # rx rxquantr1887 ** 0..1
    set_addr $I10, rxquantr1887_done
    rx1885_cur."!mark_push"(0, rx1885_pos, $I10)
  rxquantr1887_loop:
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
  # rx literal  "is"
    add $I11, rx1885_pos, 2
    gt $I11, rx1885_eos, rx1885_fail
    sub $I11, rx1885_pos, rx1885_off
    substr $S10, rx1885_tgt, $I11, 2
    ne $S10, "is", rx1885_fail
    add rx1885_pos, 2
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
  # rx literal  "repr("
    add $I11, rx1885_pos, 5
    gt $I11, rx1885_eos, rx1885_fail
    sub $I11, rx1885_pos, rx1885_off
    substr $S10, rx1885_tgt, $I11, 5
    ne $S10, "repr(", rx1885_fail
    add rx1885_pos, 5
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."quote_EXPR"()
    unless $P10, rx1885_fail
    rx1885_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("repr")
    rx1885_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx1885_pos, 1
    gt $I11, rx1885_eos, rx1885_fail
    sub $I11, rx1885_pos, rx1885_off
    ord $I11, rx1885_tgt, $I11
    ne $I11, 41, rx1885_fail
    add rx1885_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
    set_addr $I10, rxquantr1887_done
    (rx1885_rep) = rx1885_cur."!mark_commit"($I10)
  rxquantr1887_done:
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
.annotate 'line', 980
    rx1885_cur."!cursor_pos"(rx1885_pos)
    find_lex $P116, unicode:"$\x{a2}"
    $P117 = $P116."MATCH"()
    store_lex "$/", $P117
    .const 'Sub' $P1889 = "578_1334921493.34" 
    capture_lex $P1889
    $P119 = $P1889()
.annotate 'line', 1006
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
.annotate 'line', 1008
  # rx rxquantr1922 ** 0..1
    set_addr $I10, rxquantr1922_done
    rx1885_cur."!mark_push"(0, rx1885_pos, $I10)
  rxquantr1922_loop:
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
  # rx literal  "is"
    add $I11, rx1885_pos, 2
    gt $I11, rx1885_eos, rx1885_fail
    sub $I11, rx1885_pos, rx1885_off
    substr $S10, rx1885_tgt, $I11, 2
    ne $S10, "is", rx1885_fail
    add rx1885_pos, 2
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."name"()
    unless $P10, rx1885_fail
    rx1885_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("parent")
    rx1885_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
    set_addr $I10, rxquantr1922_done
    (rx1885_rep) = rx1885_cur."!mark_commit"($I10)
  rxquantr1922_done:
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
.annotate 'line', 1009
  # rx rxquantr1923 ** 0..*
    set_addr $I10, rxquantr1923_done
    rx1885_cur."!mark_push"(0, rx1885_pos, $I10)
  rxquantr1923_loop:
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
  # rx literal  "does"
    add $I11, rx1885_pos, 4
    gt $I11, rx1885_eos, rx1885_fail
    sub $I11, rx1885_pos, rx1885_off
    substr $S10, rx1885_tgt, $I11, 4
    ne $S10, "does", rx1885_fail
    add rx1885_pos, 4
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."name"()
    unless $P10, rx1885_fail
    rx1885_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("role")
    rx1885_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
    set_addr $I10, rxquantr1923_done
    (rx1885_rep) = rx1885_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1923_done
    rx1885_cur."!mark_push"(rx1885_rep, rx1885_pos, $I10)
    goto rxquantr1923_loop
  rxquantr1923_done:
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
  alt1924_0:
.annotate 'line', 1010
    set_addr $I10, alt1924_1
    rx1885_cur."!mark_push"(0, rx1885_pos, $I10)
.annotate 'line', 1011
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
  # rx literal  ";"
    add $I11, rx1885_pos, 1
    gt $I11, rx1885_eos, rx1885_fail
    sub $I11, rx1885_pos, rx1885_off
    ord $I11, rx1885_tgt, $I11
    ne $I11, 59, rx1885_fail
    add rx1885_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
  # rx subrule "comp_unit" subtype=capture negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."comp_unit"()
    unless $P10, rx1885_fail
    rx1885_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("comp_unit")
    rx1885_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
    goto alt1924_end
  alt1924_1:
    set_addr $I10, alt1924_2
    rx1885_cur."!mark_push"(0, rx1885_pos, $I10)
.annotate 'line', 1012
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1885_pos, rx1885_off
    substr $S10, rx1885_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx1885_fail
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
  # rx subrule "block" subtype=capture negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."block"()
    unless $P10, rx1885_fail
    rx1885_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx1885_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
    goto alt1924_end
  alt1924_2:
.annotate 'line', 1013
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."panic"("Malformed package declaration")
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
  alt1924_end:
.annotate 'line', 1014
  # rx subrule "ws" subtype=method negate=
    rx1885_cur."!cursor_pos"(rx1885_pos)
    $P10 = rx1885_cur."ws"()
    unless $P10, rx1885_fail
    rx1885_pos = $P10."pos"()
.annotate 'line', 974
  # rx pass
    rx1885_cur."!cursor_pass"(rx1885_pos, "package_def")
    if_null rx1885_debug, debug_1420
    rx1885_cur."!cursor_debug"("PASS", "package_def", " at pos=", rx1885_pos)
  debug_1420:
    .return (rx1885_cur)
  rx1885_restart:
    if_null rx1885_debug, debug_1421
    rx1885_cur."!cursor_debug"("NEXT", "package_def")
  debug_1421:
  rx1885_fail:
    (rx1885_rep, rx1885_pos, $I10, $P10) = rx1885_cur."!mark_fail"(0)
    lt rx1885_pos, -1, rx1885_done
    eq rx1885_pos, -1, rx1885_fail
    jump $I10
  rx1885_done:
    rx1885_cur."!cursor_fail"()
    if_null rx1885_debug, debug_1422
    rx1885_cur."!cursor_debug"("FAIL", "package_def")
  debug_1422:
    .return (rx1885_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1888"  :anon :subid("578_1334921493.34") :outer("177_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 983
    $P1891 = root_new ['parrot';'Hash']
    set $P1890, $P1891
    .lex "%args", $P1890
.annotate 'line', 980
    set $P1892, $P1890
    unless_null $P1892, vivify_1353
    $P1892 = root_new ['parrot';'Hash']
  vivify_1353:
.annotate 'line', 984
    find_lex $P1893, "$/"
    unless_null $P1893, vivify_1354
    $P1893 = root_new ['parrot';'Hash']
  vivify_1354:
    set $P118, $P1893["name"]
    unless_null $P118, vivify_1355
    new $P118, "Undef"
  vivify_1355:
    set $S100, $P118
    new $P119, 'String'
    set $P119, $S100
    set $P1894, $P1890
    unless_null $P1894, vivify_1356
    $P1894 = root_new ['parrot';'Hash']
    set $P1890, $P1894
  vivify_1356:
    set $P1894["name"], $P119
.annotate 'line', 985
    find_lex $P1896, "$/"
    unless_null $P1896, vivify_1357
    $P1896 = root_new ['parrot';'Hash']
  vivify_1357:
    set $P118, $P1896["repr"]
    unless_null $P118, vivify_1358
    new $P118, "Undef"
  vivify_1358:
    unless $P118, if_1895_end
.annotate 'line', 986
    new $P119, "Float"
    assign $P119, 0
    set $I100, $P119
    new $P120, "Float"
    assign $P120, 0
    set $I101, $P120
    find_lex $P1897, "$/"
    unless_null $P1897, vivify_1359
    $P1897 = root_new ['parrot';'Hash']
  vivify_1359:
    set $P1898, $P1897["repr"]
    unless_null $P1898, vivify_1360
    $P1898 = root_new ['parrot';'ResizablePMCArray']
  vivify_1360:
    set $P1899, $P1898[$I101]
    unless_null $P1899, vivify_1361
    $P1899 = root_new ['parrot';'Hash']
  vivify_1361:
    set $P1900, $P1899["quote_delimited"]
    unless_null $P1900, vivify_1362
    $P1900 = root_new ['parrot';'Hash']
  vivify_1362:
    set $P1901, $P1900["quote_atom"]
    unless_null $P1901, vivify_1363
    $P1901 = root_new ['parrot';'ResizablePMCArray']
  vivify_1363:
    set $P121, $P1901[$I100]
    unless_null $P121, vivify_1364
    new $P121, "Undef"
  vivify_1364:
    set $S100, $P121
    new $P122, 'String'
    set $P122, $S100
    set $P1902, $P1890
    unless_null $P1902, vivify_1365
    $P1902 = root_new ['parrot';'Hash']
    set $P1890, $P1902
  vivify_1365:
    set $P1902["repr"], $P122
  if_1895_end:
.annotate 'line', 988
    find_dynamic_lex $P120, "$*W"
    unless_null $P120, vivify_1366
    get_hll_global $P118, "GLOBAL"
    get_who $P119, $P118
    set $P120, $P119["$W"]
    unless_null $P120, vivify_1367
    die "Contextual $*W not found"
  vivify_1367:
  vivify_1366:
    find_dynamic_lex $P123, "$*PKGDECL"
    unless_null $P123, vivify_1368
    get_hll_global $P121, "GLOBAL"
    get_who $P122, $P121
    set $P123, $P122["$PKGDECL"]
    unless_null $P123, vivify_1369
    die "Contextual $*PKGDECL not found"
  vivify_1369:
  vivify_1368:
    find_dynamic_lex $P126, "%*HOW"
    unless_null $P126, vivify_1370
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["%HOW"]
    unless_null $P126, vivify_1371
    die "Contextual %*HOW not found"
  vivify_1371:
  vivify_1370:
    set $P127, $P126[$P123]
    unless_null $P127, vivify_1372
    new $P127, "Undef"
  vivify_1372:
    set $P1903, $P1890
    unless_null $P1903, vivify_1373
    $P1903 = root_new ['parrot';'Hash']
  vivify_1373:
    $P128 = $P120."pkg_create_mo"($P127, $P1903 :flat)
    store_dynamic_lex "$*PACKAGE", $P128
.annotate 'line', 991
    find_dynamic_lex $P122, "$*SCOPE"
    unless_null $P122, vivify_1374
    get_hll_global $P120, "GLOBAL"
    get_who $P121, $P120
    set $P122, $P121["$SCOPE"]
    unless_null $P122, vivify_1375
    die "Contextual $*SCOPE not found"
  vivify_1375:
  vivify_1374:
    set $S100, $P122
    iseq $I100, $S100, "our"
    unless $I100, unless_1905
    new $P119, 'Integer'
    set $P119, $I100
    goto unless_1905_end
  unless_1905:
    find_dynamic_lex $P125, "$*SCOPE"
    unless_null $P125, vivify_1376
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$SCOPE"]
    unless_null $P125, vivify_1377
    die "Contextual $*SCOPE not found"
  vivify_1377:
  vivify_1376:
    set $S101, $P125
    iseq $I101, $S101, ""
    new $P119, 'Integer'
    set $P119, $I101
  unless_1905_end:
    if $P119, if_1904
.annotate 'line', 997
    find_dynamic_lex $P130, "$*SCOPE"
    unless_null $P130, vivify_1378
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P130, $P129["$SCOPE"]
    unless_null $P130, vivify_1379
    die "Contextual $*SCOPE not found"
  vivify_1379:
  vivify_1378:
    set $S102, $P130
    iseq $I102, $S102, "my"
    if $I102, if_1914
.annotate 'line', 1004
    find_lex $P131, "$/"
    unless_null $P131, vivify_1380
    new $P131, "Undef"
  vivify_1380:
    $P132 = $P131."CURSOR"()
    find_dynamic_lex $P135, "$*SCOPE"
    unless_null $P135, vivify_1381
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$SCOPE"]
    unless_null $P135, vivify_1382
    die "Contextual $*SCOPE not found"
  vivify_1382:
  vivify_1381:
    concat $P136, $P135, " scoped packages are not supported"
    $P137 = $P132."panic"($P136)
.annotate 'line', 1003
    set $P127, $P137
.annotate 'line', 997
    goto if_1914_end
  if_1914:
.annotate 'line', 998
    find_lex $P1916, "$/"
    unless_null $P1916, vivify_1383
    $P1916 = root_new ['parrot';'Hash']
  vivify_1383:
    set $P1917, $P1916["name"]
    unless_null $P1917, vivify_1384
    $P1917 = root_new ['parrot';'Hash']
  vivify_1384:
    set $P131, $P1917["identifier"]
    unless_null $P131, vivify_1385
    new $P131, "Undef"
  vivify_1385:
    set $N100, $P131
    set $N101, 1
    isne $I103, $N100, $N101
    unless $I103, if_1915_end
.annotate 'line', 999
    find_lex $P1918, "$/"
    unless_null $P1918, vivify_1386
    $P1918 = root_new ['parrot';'Hash']
  vivify_1386:
    set $P132, $P1918["name"]
    unless_null $P132, vivify_1387
    new $P132, "Undef"
  vivify_1387:
    $P133 = $P132."CURSOR"()
    $P133."panic"("A my scoped package cannot have a multi-part name yet")
  if_1915_end:
.annotate 'line', 1001
    find_dynamic_lex $P133, "$*W"
    unless_null $P133, vivify_1388
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$W"]
    unless_null $P133, vivify_1389
    die "Contextual $*W not found"
  vivify_1389:
  vivify_1388:
    find_dynamic_lex $P136, "$*W"
    unless_null $P136, vivify_1390
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$W"]
    unless_null $P136, vivify_1391
    die "Contextual $*W not found"
  vivify_1391:
  vivify_1390:
    $P137 = $P136."cur_lexpad"()
    new $P138, "Float"
    assign $P138, 0
    set $I103, $P138
    find_lex $P1919, "$/"
    unless_null $P1919, vivify_1392
    $P1919 = root_new ['parrot';'Hash']
  vivify_1392:
    set $P1920, $P1919["name"]
    unless_null $P1920, vivify_1393
    $P1920 = root_new ['parrot';'Hash']
  vivify_1393:
    set $P1921, $P1920["identifier"]
    unless_null $P1921, vivify_1394
    $P1921 = root_new ['parrot';'ResizablePMCArray']
  vivify_1394:
    set $P139, $P1921[$I103]
    unless_null $P139, vivify_1395
    new $P139, "Undef"
  vivify_1395:
    find_dynamic_lex $P142, "$*PACKAGE"
    unless_null $P142, vivify_1396
    get_hll_global $P140, "GLOBAL"
    get_who $P141, $P140
    set $P142, $P141["$PACKAGE"]
    unless_null $P142, vivify_1397
    die "Contextual $*PACKAGE not found"
  vivify_1397:
  vivify_1396:
    $P143 = $P133."install_lexical_symbol"($P137, $P139, $P142)
.annotate 'line', 997
    set $P127, $P143
  if_1914_end:
    set $P118, $P127
.annotate 'line', 991
    goto if_1904_end
  if_1904:
.annotate 'line', 992
    find_dynamic_lex $P128, "$*W"
    unless_null $P128, vivify_1398
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$W"]
    unless_null $P128, vivify_1399
    die "Contextual $*W not found"
  vivify_1399:
  vivify_1398:
    find_dynamic_lex $P131, "$*OUTERPACKAGE"
    unless_null $P131, vivify_1400
    get_hll_global $P129, "GLOBAL"
    get_who $P130, $P129
    set $P131, $P130["$OUTERPACKAGE"]
    unless_null $P131, vivify_1401
    die "Contextual $*OUTERPACKAGE not found"
  vivify_1401:
  vivify_1400:
    find_lex $P1906, "$/"
    unless_null $P1906, vivify_1402
    $P1906 = root_new ['parrot';'Hash']
  vivify_1402:
    set $P1907, $P1906["name"]
    unless_null $P1907, vivify_1403
    $P1907 = root_new ['parrot';'Hash']
  vivify_1403:
    set $P132, $P1907["identifier"]
    unless_null $P132, vivify_1404
    new $P132, "Undef"
  vivify_1404:
    find_dynamic_lex $P135, "$*PACKAGE"
    unless_null $P135, vivify_1405
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$PACKAGE"]
    unless_null $P135, vivify_1406
    die "Contextual $*PACKAGE not found"
  vivify_1406:
  vivify_1405:
    $P128."install_package_symbol"($P131, $P132, $P135)
.annotate 'line', 993
    find_lex $P1909, "$/"
    unless_null $P1909, vivify_1407
    $P1909 = root_new ['parrot';'Hash']
  vivify_1407:
    set $P1910, $P1909["name"]
    unless_null $P1910, vivify_1408
    $P1910 = root_new ['parrot';'Hash']
  vivify_1408:
    set $P127, $P1910["identifier"]
    unless_null $P127, vivify_1409
    new $P127, "Undef"
  vivify_1409:
    set $N100, $P127
    set $N101, 1
    iseq $I102, $N100, $N101
    if $I102, if_1908
    new $P126, 'Integer'
    set $P126, $I102
    goto if_1908_end
  if_1908:
.annotate 'line', 994
    find_dynamic_lex $P130, "$*W"
    unless_null $P130, vivify_1410
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P130, $P129["$W"]
    unless_null $P130, vivify_1411
    die "Contextual $*W not found"
  vivify_1411:
  vivify_1410:
    find_dynamic_lex $P133, "$*W"
    unless_null $P133, vivify_1412
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$W"]
    unless_null $P133, vivify_1413
    die "Contextual $*W not found"
  vivify_1413:
  vivify_1412:
    $P134 = $P133."cur_lexpad"()
    new $P135, "Float"
    assign $P135, 0
    set $I103, $P135
    find_lex $P1911, "$/"
    unless_null $P1911, vivify_1414
    $P1911 = root_new ['parrot';'Hash']
  vivify_1414:
    set $P1912, $P1911["name"]
    unless_null $P1912, vivify_1415
    $P1912 = root_new ['parrot';'Hash']
  vivify_1415:
    set $P1913, $P1912["identifier"]
    unless_null $P1913, vivify_1416
    $P1913 = root_new ['parrot';'ResizablePMCArray']
  vivify_1416:
    set $P136, $P1913[$I103]
    unless_null $P136, vivify_1417
    new $P136, "Undef"
  vivify_1417:
    find_dynamic_lex $P139, "$*PACKAGE"
    unless_null $P139, vivify_1418
    get_hll_global $P137, "GLOBAL"
    get_who $P138, $P137
    set $P139, $P138["$PACKAGE"]
    unless_null $P139, vivify_1419
    die "Contextual $*PACKAGE not found"
  vivify_1419:
  vivify_1418:
    $P140 = $P130."install_lexical_symbol"($P134, $P136, $P139)
.annotate 'line', 993
    set $P126, $P140
  if_1908_end:
.annotate 'line', 991
    set $P118, $P126
  if_1904_end:
.annotate 'line', 980
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_def"  :subid("178_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 974
    $P138 = self."!PREFIX__!subrule"("ws", "")
    new $P139, "ResizablePMCArray"
    push $P139, $P138
    .return ($P139)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator"  :subid("179_1334921493.34")
    .param pmc param_1927
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1017
    .lex "self", param_1927
    $P103 = param_1927."!protoregex"("scope_declarator")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scope_declarator"  :subid("180_1334921493.34")
    .param pmc param_1929
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1017
    .lex "self", param_1929
    $P104 = param_1929."!PREFIX__!protoregex"("scope_declarator")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator:sym<my>"  :subid("181_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1018
    .local string rx1931_tgt
    .local int rx1931_pos
    .local int rx1931_off
    .local int rx1931_eos
    .local int rx1931_rep
    .local pmc rx1931_cur
    .local pmc rx1931_debug
    (rx1931_cur, rx1931_pos, rx1931_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1931_cur
    .local pmc match
    .lex "$/", match
    length rx1931_eos, rx1931_tgt
    gt rx1931_pos, rx1931_eos, rx1931_done
    set rx1931_off, 0
    lt rx1931_pos, 2, rx1931_start
    sub rx1931_off, rx1931_pos, 1
    substr rx1931_tgt, rx1931_tgt, rx1931_off
  rx1931_start:
    eq $I10, 1, rx1931_restart
    if_null rx1931_debug, debug_1423
    rx1931_cur."!cursor_debug"("START", "scope_declarator:sym<my>")
  debug_1423:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1932_done
    goto rxscan1932_scan
  rxscan1932_loop:
    (rx1931_pos) = rx1931_cur."from"()
    inc rx1931_pos
    rx1931_cur."!cursor_from"(rx1931_pos)
    ge rx1931_pos, rx1931_eos, rxscan1932_done
  rxscan1932_scan:
    set_addr $I10, rxscan1932_loop
    rx1931_cur."!mark_push"(0, rx1931_pos, $I10)
  rxscan1932_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1933_fail
    rx1931_cur."!mark_push"(0, rx1931_pos, $I10)
  # rx literal  "my"
    add $I11, rx1931_pos, 2
    gt $I11, rx1931_eos, rx1931_fail
    sub $I11, rx1931_pos, rx1931_off
    substr $S10, rx1931_tgt, $I11, 2
    ne $S10, "my", rx1931_fail
    add rx1931_pos, 2
    set_addr $I10, rxcap_1933_fail
    ($I12, $I11) = rx1931_cur."!mark_peek"($I10)
    rx1931_cur."!cursor_pos"($I11)
    ($P10) = rx1931_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1931_pos, "")
    rx1931_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1933_done
  rxcap_1933_fail:
    goto rx1931_fail
  rxcap_1933_done:
  # rx subrule "scoped" subtype=capture negate=
    rx1931_cur."!cursor_pos"(rx1931_pos)
    $P10 = rx1931_cur."scoped"("my")
    unless $P10, rx1931_fail
    rx1931_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("scoped")
    rx1931_pos = $P10."pos"()
  # rx pass
    rx1931_cur."!cursor_pass"(rx1931_pos, "scope_declarator:sym<my>")
    if_null rx1931_debug, debug_1424
    rx1931_cur."!cursor_debug"("PASS", "scope_declarator:sym<my>", " at pos=", rx1931_pos)
  debug_1424:
    .return (rx1931_cur)
  rx1931_restart:
    if_null rx1931_debug, debug_1425
    rx1931_cur."!cursor_debug"("NEXT", "scope_declarator:sym<my>")
  debug_1425:
  rx1931_fail:
    (rx1931_rep, rx1931_pos, $I10, $P10) = rx1931_cur."!mark_fail"(0)
    lt rx1931_pos, -1, rx1931_done
    eq rx1931_pos, -1, rx1931_fail
    jump $I10
  rx1931_done:
    rx1931_cur."!cursor_fail"()
    if_null rx1931_debug, debug_1426
    rx1931_cur."!cursor_debug"("FAIL", "scope_declarator:sym<my>")
  debug_1426:
    .return (rx1931_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scope_declarator:sym<my>"  :subid("182_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1018
    $P103 = self."!PREFIX__!subrule"("scoped", "my")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator:sym<our>"  :subid("183_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1019
    .local string rx1936_tgt
    .local int rx1936_pos
    .local int rx1936_off
    .local int rx1936_eos
    .local int rx1936_rep
    .local pmc rx1936_cur
    .local pmc rx1936_debug
    (rx1936_cur, rx1936_pos, rx1936_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1936_cur
    .local pmc match
    .lex "$/", match
    length rx1936_eos, rx1936_tgt
    gt rx1936_pos, rx1936_eos, rx1936_done
    set rx1936_off, 0
    lt rx1936_pos, 2, rx1936_start
    sub rx1936_off, rx1936_pos, 1
    substr rx1936_tgt, rx1936_tgt, rx1936_off
  rx1936_start:
    eq $I10, 1, rx1936_restart
    if_null rx1936_debug, debug_1427
    rx1936_cur."!cursor_debug"("START", "scope_declarator:sym<our>")
  debug_1427:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1937_done
    goto rxscan1937_scan
  rxscan1937_loop:
    (rx1936_pos) = rx1936_cur."from"()
    inc rx1936_pos
    rx1936_cur."!cursor_from"(rx1936_pos)
    ge rx1936_pos, rx1936_eos, rxscan1937_done
  rxscan1937_scan:
    set_addr $I10, rxscan1937_loop
    rx1936_cur."!mark_push"(0, rx1936_pos, $I10)
  rxscan1937_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1938_fail
    rx1936_cur."!mark_push"(0, rx1936_pos, $I10)
  # rx literal  "our"
    add $I11, rx1936_pos, 3
    gt $I11, rx1936_eos, rx1936_fail
    sub $I11, rx1936_pos, rx1936_off
    substr $S10, rx1936_tgt, $I11, 3
    ne $S10, "our", rx1936_fail
    add rx1936_pos, 3
    set_addr $I10, rxcap_1938_fail
    ($I12, $I11) = rx1936_cur."!mark_peek"($I10)
    rx1936_cur."!cursor_pos"($I11)
    ($P10) = rx1936_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1936_pos, "")
    rx1936_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1938_done
  rxcap_1938_fail:
    goto rx1936_fail
  rxcap_1938_done:
  # rx subrule "scoped" subtype=capture negate=
    rx1936_cur."!cursor_pos"(rx1936_pos)
    $P10 = rx1936_cur."scoped"("our")
    unless $P10, rx1936_fail
    rx1936_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("scoped")
    rx1936_pos = $P10."pos"()
  # rx pass
    rx1936_cur."!cursor_pass"(rx1936_pos, "scope_declarator:sym<our>")
    if_null rx1936_debug, debug_1428
    rx1936_cur."!cursor_debug"("PASS", "scope_declarator:sym<our>", " at pos=", rx1936_pos)
  debug_1428:
    .return (rx1936_cur)
  rx1936_restart:
    if_null rx1936_debug, debug_1429
    rx1936_cur."!cursor_debug"("NEXT", "scope_declarator:sym<our>")
  debug_1429:
  rx1936_fail:
    (rx1936_rep, rx1936_pos, $I10, $P10) = rx1936_cur."!mark_fail"(0)
    lt rx1936_pos, -1, rx1936_done
    eq rx1936_pos, -1, rx1936_fail
    jump $I10
  rx1936_done:
    rx1936_cur."!cursor_fail"()
    if_null rx1936_debug, debug_1430
    rx1936_cur."!cursor_debug"("FAIL", "scope_declarator:sym<our>")
  debug_1430:
    .return (rx1936_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scope_declarator:sym<our>"  :subid("184_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1019
    $P103 = self."!PREFIX__!subrule"("scoped", "our")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator:sym<has>"  :subid("185_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1020
    .local string rx1941_tgt
    .local int rx1941_pos
    .local int rx1941_off
    .local int rx1941_eos
    .local int rx1941_rep
    .local pmc rx1941_cur
    .local pmc rx1941_debug
    (rx1941_cur, rx1941_pos, rx1941_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1941_cur
    .local pmc match
    .lex "$/", match
    length rx1941_eos, rx1941_tgt
    gt rx1941_pos, rx1941_eos, rx1941_done
    set rx1941_off, 0
    lt rx1941_pos, 2, rx1941_start
    sub rx1941_off, rx1941_pos, 1
    substr rx1941_tgt, rx1941_tgt, rx1941_off
  rx1941_start:
    eq $I10, 1, rx1941_restart
    if_null rx1941_debug, debug_1431
    rx1941_cur."!cursor_debug"("START", "scope_declarator:sym<has>")
  debug_1431:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1942_done
    goto rxscan1942_scan
  rxscan1942_loop:
    (rx1941_pos) = rx1941_cur."from"()
    inc rx1941_pos
    rx1941_cur."!cursor_from"(rx1941_pos)
    ge rx1941_pos, rx1941_eos, rxscan1942_done
  rxscan1942_scan:
    set_addr $I10, rxscan1942_loop
    rx1941_cur."!mark_push"(0, rx1941_pos, $I10)
  rxscan1942_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1943_fail
    rx1941_cur."!mark_push"(0, rx1941_pos, $I10)
  # rx literal  "has"
    add $I11, rx1941_pos, 3
    gt $I11, rx1941_eos, rx1941_fail
    sub $I11, rx1941_pos, rx1941_off
    substr $S10, rx1941_tgt, $I11, 3
    ne $S10, "has", rx1941_fail
    add rx1941_pos, 3
    set_addr $I10, rxcap_1943_fail
    ($I12, $I11) = rx1941_cur."!mark_peek"($I10)
    rx1941_cur."!cursor_pos"($I11)
    ($P10) = rx1941_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1941_pos, "")
    rx1941_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1943_done
  rxcap_1943_fail:
    goto rx1941_fail
  rxcap_1943_done:
  # rx subrule "scoped" subtype=capture negate=
    rx1941_cur."!cursor_pos"(rx1941_pos)
    $P10 = rx1941_cur."scoped"("has")
    unless $P10, rx1941_fail
    rx1941_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("scoped")
    rx1941_pos = $P10."pos"()
  # rx pass
    rx1941_cur."!cursor_pass"(rx1941_pos, "scope_declarator:sym<has>")
    if_null rx1941_debug, debug_1432
    rx1941_cur."!cursor_debug"("PASS", "scope_declarator:sym<has>", " at pos=", rx1941_pos)
  debug_1432:
    .return (rx1941_cur)
  rx1941_restart:
    if_null rx1941_debug, debug_1433
    rx1941_cur."!cursor_debug"("NEXT", "scope_declarator:sym<has>")
  debug_1433:
  rx1941_fail:
    (rx1941_rep, rx1941_pos, $I10, $P10) = rx1941_cur."!mark_fail"(0)
    lt rx1941_pos, -1, rx1941_done
    eq rx1941_pos, -1, rx1941_fail
    jump $I10
  rx1941_done:
    rx1941_cur."!cursor_fail"()
    if_null rx1941_debug, debug_1434
    rx1941_cur."!cursor_debug"("FAIL", "scope_declarator:sym<has>")
  debug_1434:
    .return (rx1941_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scope_declarator:sym<has>"  :subid("186_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1020
    $P103 = self."!PREFIX__!subrule"("scoped", "has")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scoped"  :subid("187_1334921493.34") :method :outer("571_1334921493.34")
    .param pmc param_1946
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1022
    .lex "$*SCOPE", param_1946
    .local string rx1947_tgt
    .local int rx1947_pos
    .local int rx1947_off
    .local int rx1947_eos
    .local int rx1947_rep
    .local pmc rx1947_cur
    .local pmc rx1947_debug
    (rx1947_cur, rx1947_pos, rx1947_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1947_cur
    .local pmc match
    .lex "$/", match
    length rx1947_eos, rx1947_tgt
    gt rx1947_pos, rx1947_eos, rx1947_done
    set rx1947_off, 0
    lt rx1947_pos, 2, rx1947_start
    sub rx1947_off, rx1947_pos, 1
    substr rx1947_tgt, rx1947_tgt, rx1947_off
  rx1947_start:
    eq $I10, 1, rx1947_restart
    if_null rx1947_debug, debug_1435
    rx1947_cur."!cursor_debug"("START", "scoped")
  debug_1435:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1948_done
    goto rxscan1948_scan
  rxscan1948_loop:
    (rx1947_pos) = rx1947_cur."from"()
    inc rx1947_pos
    rx1947_cur."!cursor_from"(rx1947_pos)
    ge rx1947_pos, rx1947_eos, rxscan1948_done
  rxscan1948_scan:
    set_addr $I10, rxscan1948_loop
    rx1947_cur."!mark_push"(0, rx1947_pos, $I10)
  rxscan1948_done:
  alt1949_0:
    set_addr $I10, alt1949_1
    rx1947_cur."!mark_push"(0, rx1947_pos, $I10)
.annotate 'line', 1023
  # rx subrule "ws" subtype=method negate=
    rx1947_cur."!cursor_pos"(rx1947_pos)
    $P10 = rx1947_cur."ws"()
    unless $P10, rx1947_fail
    rx1947_pos = $P10."pos"()
  # rx subrule "declarator" subtype=capture negate=
    rx1947_cur."!cursor_pos"(rx1947_pos)
    $P10 = rx1947_cur."declarator"()
    unless $P10, rx1947_fail
    rx1947_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("declarator")
    rx1947_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1947_cur."!cursor_pos"(rx1947_pos)
    $P10 = rx1947_cur."ws"()
    unless $P10, rx1947_fail
    rx1947_pos = $P10."pos"()
    goto alt1949_end
  alt1949_1:
    set_addr $I10, alt1949_2
    rx1947_cur."!mark_push"(0, rx1947_pos, $I10)
.annotate 'line', 1024
  # rx subrule "ws" subtype=method negate=
    rx1947_cur."!cursor_pos"(rx1947_pos)
    $P10 = rx1947_cur."ws"()
    unless $P10, rx1947_fail
    rx1947_pos = $P10."pos"()
  # rx subrule "multi_declarator" subtype=capture negate=
    rx1947_cur."!cursor_pos"(rx1947_pos)
    $P10 = rx1947_cur."multi_declarator"()
    unless $P10, rx1947_fail
    rx1947_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("multi_declarator")
    rx1947_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1947_cur."!cursor_pos"(rx1947_pos)
    $P10 = rx1947_cur."ws"()
    unless $P10, rx1947_fail
    rx1947_pos = $P10."pos"()
    goto alt1949_end
  alt1949_2:
.annotate 'line', 1025
  # rx subrule "ws" subtype=method negate=
    rx1947_cur."!cursor_pos"(rx1947_pos)
    $P10 = rx1947_cur."ws"()
    unless $P10, rx1947_fail
    rx1947_pos = $P10."pos"()
  # rx subrule "package_declarator" subtype=capture negate=
    rx1947_cur."!cursor_pos"(rx1947_pos)
    $P10 = rx1947_cur."package_declarator"()
    unless $P10, rx1947_fail
    rx1947_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_declarator")
    rx1947_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1947_cur."!cursor_pos"(rx1947_pos)
    $P10 = rx1947_cur."ws"()
    unless $P10, rx1947_fail
    rx1947_pos = $P10."pos"()
  alt1949_end:
.annotate 'line', 1022
  # rx pass
    rx1947_cur."!cursor_pass"(rx1947_pos, "scoped")
    if_null rx1947_debug, debug_1436
    rx1947_cur."!cursor_debug"("PASS", "scoped", " at pos=", rx1947_pos)
  debug_1436:
    .return (rx1947_cur)
  rx1947_restart:
    if_null rx1947_debug, debug_1437
    rx1947_cur."!cursor_debug"("NEXT", "scoped")
  debug_1437:
  rx1947_fail:
    (rx1947_rep, rx1947_pos, $I10, $P10) = rx1947_cur."!mark_fail"(0)
    lt rx1947_pos, -1, rx1947_done
    eq rx1947_pos, -1, rx1947_fail
    jump $I10
  rx1947_done:
    rx1947_cur."!cursor_fail"()
    if_null rx1947_debug, debug_1438
    rx1947_cur."!cursor_debug"("FAIL", "scoped")
  debug_1438:
    .return (rx1947_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scoped"  :subid("188_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1022
    $P109 = self."!PREFIX__!subrule"("ws", "")
    $P110 = self."!PREFIX__!subrule"("ws", "")
    $P111 = self."!PREFIX__!subrule"("ws", "")
    new $P112, "ResizablePMCArray"
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "typename"  :subid("189_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1028
    .const 'Sub' $P1955 = "579_1334921493.34" 
    capture_lex $P1955
    .local string rx1952_tgt
    .local int rx1952_pos
    .local int rx1952_off
    .local int rx1952_eos
    .local int rx1952_rep
    .local pmc rx1952_cur
    .local pmc rx1952_debug
    (rx1952_cur, rx1952_pos, rx1952_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1952_cur
    .local pmc match
    .lex "$/", match
    length rx1952_eos, rx1952_tgt
    gt rx1952_pos, rx1952_eos, rx1952_done
    set rx1952_off, 0
    lt rx1952_pos, 2, rx1952_start
    sub rx1952_off, rx1952_pos, 1
    substr rx1952_tgt, rx1952_tgt, rx1952_off
  rx1952_start:
    eq $I10, 1, rx1952_restart
    if_null rx1952_debug, debug_1439
    rx1952_cur."!cursor_debug"("START", "typename")
  debug_1439:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1953_done
    goto rxscan1953_scan
  rxscan1953_loop:
    (rx1952_pos) = rx1952_cur."from"()
    inc rx1952_pos
    rx1952_cur."!cursor_from"(rx1952_pos)
    ge rx1952_pos, rx1952_eos, rxscan1953_done
  rxscan1953_scan:
    set_addr $I10, rxscan1953_loop
    rx1952_cur."!mark_push"(0, rx1952_pos, $I10)
  rxscan1953_done:
.annotate 'line', 1029
  # rx subrule "name" subtype=capture negate=
    rx1952_cur."!cursor_pos"(rx1952_pos)
    $P10 = rx1952_cur."name"()
    unless $P10, rx1952_fail
    rx1952_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx1952_pos = $P10."pos"()
.annotate 'line', 1030
    rx1952_cur."!cursor_pos"(rx1952_pos)
    find_lex $P103, unicode:"$\x{a2}"
    $P104 = $P103."MATCH"()
    store_lex "$/", $P104
    .const 'Sub' $P1955 = "579_1334921493.34" 
    capture_lex $P1955
    $P105 = $P1955()
    unless $P105, rx1952_fail
.annotate 'line', 1028
  # rx pass
    rx1952_cur."!cursor_pass"(rx1952_pos, "typename")
    if_null rx1952_debug, debug_1446
    rx1952_cur."!cursor_debug"("PASS", "typename", " at pos=", rx1952_pos)
  debug_1446:
    .return (rx1952_cur)
  rx1952_restart:
    if_null rx1952_debug, debug_1447
    rx1952_cur."!cursor_debug"("NEXT", "typename")
  debug_1447:
  rx1952_fail:
    (rx1952_rep, rx1952_pos, $I10, $P10) = rx1952_cur."!mark_fail"(0)
    lt rx1952_pos, -1, rx1952_done
    eq rx1952_pos, -1, rx1952_fail
    jump $I10
  rx1952_done:
    rx1952_cur."!cursor_fail"()
    if_null rx1952_debug, debug_1448
    rx1952_cur."!cursor_debug"("FAIL", "typename")
  debug_1448:
    .return (rx1952_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1954"  :anon :subid("579_1334921493.34") :outer("189_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1030
    find_dynamic_lex $P107, "$*W"
    unless_null $P107, vivify_1440
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$W"]
    unless_null $P107, vivify_1441
    die "Contextual $*W not found"
  vivify_1441:
  vivify_1440:
    find_lex $P108, "$/"
    unless_null $P108, vivify_1442
    new $P108, "Undef"
  vivify_1442:
    find_lex $P1956, "$/"
    unless_null $P1956, vivify_1443
    $P1956 = root_new ['parrot';'Hash']
  vivify_1443:
    set $P1957, $P1956["name"]
    unless_null $P1957, vivify_1444
    $P1957 = root_new ['parrot';'Hash']
  vivify_1444:
    set $P109, $P1957["identifier"]
    unless_null $P109, vivify_1445
    new $P109, "Undef"
  vivify_1445:
    $P110 = $P107."known_sym"($P108, $P109)
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__typename"  :subid("190_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1028
    $P106 = self."!PREFIX__!subrule"("name", "")
    new $P107, "ResizablePMCArray"
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "declarator"  :subid("191_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1033
    .local string rx1960_tgt
    .local int rx1960_pos
    .local int rx1960_off
    .local int rx1960_eos
    .local int rx1960_rep
    .local pmc rx1960_cur
    .local pmc rx1960_debug
    (rx1960_cur, rx1960_pos, rx1960_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1960_cur
    .local pmc match
    .lex "$/", match
    length rx1960_eos, rx1960_tgt
    gt rx1960_pos, rx1960_eos, rx1960_done
    set rx1960_off, 0
    lt rx1960_pos, 2, rx1960_start
    sub rx1960_off, rx1960_pos, 1
    substr rx1960_tgt, rx1960_tgt, rx1960_off
  rx1960_start:
    eq $I10, 1, rx1960_restart
    if_null rx1960_debug, debug_1449
    rx1960_cur."!cursor_debug"("START", "declarator")
  debug_1449:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1961_done
    goto rxscan1961_scan
  rxscan1961_loop:
    (rx1960_pos) = rx1960_cur."from"()
    inc rx1960_pos
    rx1960_cur."!cursor_from"(rx1960_pos)
    ge rx1960_pos, rx1960_eos, rxscan1961_done
  rxscan1961_scan:
    set_addr $I10, rxscan1961_loop
    rx1960_cur."!mark_push"(0, rx1960_pos, $I10)
  rxscan1961_done:
  alt1962_0:
    set_addr $I10, alt1962_1
    rx1960_cur."!mark_push"(0, rx1960_pos, $I10)
.annotate 'line', 1034
  # rx subrule "variable_declarator" subtype=capture negate=
    rx1960_cur."!cursor_pos"(rx1960_pos)
    $P10 = rx1960_cur."variable_declarator"()
    unless $P10, rx1960_fail
    rx1960_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable_declarator")
    rx1960_pos = $P10."pos"()
    goto alt1962_end
  alt1962_1:
.annotate 'line', 1035
  # rx subrule "routine_declarator" subtype=capture negate=
    rx1960_cur."!cursor_pos"(rx1960_pos)
    $P10 = rx1960_cur."routine_declarator"()
    unless $P10, rx1960_fail
    rx1960_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_declarator")
    rx1960_pos = $P10."pos"()
  alt1962_end:
.annotate 'line', 1033
  # rx pass
    rx1960_cur."!cursor_pass"(rx1960_pos, "declarator")
    if_null rx1960_debug, debug_1450
    rx1960_cur."!cursor_debug"("PASS", "declarator", " at pos=", rx1960_pos)
  debug_1450:
    .return (rx1960_cur)
  rx1960_restart:
    if_null rx1960_debug, debug_1451
    rx1960_cur."!cursor_debug"("NEXT", "declarator")
  debug_1451:
  rx1960_fail:
    (rx1960_rep, rx1960_pos, $I10, $P10) = rx1960_cur."!mark_fail"(0)
    lt rx1960_pos, -1, rx1960_done
    eq rx1960_pos, -1, rx1960_fail
    jump $I10
  rx1960_done:
    rx1960_cur."!cursor_fail"()
    if_null rx1960_debug, debug_1452
    rx1960_cur."!cursor_debug"("FAIL", "declarator")
  debug_1452:
    .return (rx1960_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__declarator"  :subid("192_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1033
    $P103 = self."!PREFIX__!subrule"("routine_declarator", "")
    $P104 = self."!PREFIX__!subrule"("variable_declarator", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "variable_declarator"  :subid("193_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1038
    .const 'Sub' $P1971 = "580_1334921493.34" 
    capture_lex $P1971
.annotate 'line', 1040
    new $P103, "Undef"
    set $P1965, $P103
    .lex "$*IN_DECL", $P1965
.annotate 'line', 1038
    .local string rx1966_tgt
    .local int rx1966_pos
    .local int rx1966_off
    .local int rx1966_eos
    .local int rx1966_rep
    .local pmc rx1966_cur
    .local pmc rx1966_debug
    (rx1966_cur, rx1966_pos, rx1966_tgt, $I10) = self."!cursor_start"()
    rx1966_cur."!cursor_caparray"("typename", "trait")
    .lex unicode:"$\x{a2}", rx1966_cur
    .local pmc match
    .lex "$/", match
    length rx1966_eos, rx1966_tgt
    gt rx1966_pos, rx1966_eos, rx1966_done
    set rx1966_off, 0
    lt rx1966_pos, 2, rx1966_start
    sub rx1966_off, rx1966_pos, 1
    substr rx1966_tgt, rx1966_tgt, rx1966_off
  rx1966_start:
    eq $I10, 1, rx1966_restart
    if_null rx1966_debug, debug_1453
    rx1966_cur."!cursor_debug"("START", "variable_declarator")
  debug_1453:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1967_done
    goto rxscan1967_scan
  rxscan1967_loop:
    (rx1966_pos) = rx1966_cur."from"()
    inc rx1966_pos
    rx1966_cur."!cursor_from"(rx1966_pos)
    ge rx1966_pos, rx1966_eos, rxscan1967_done
  rxscan1967_scan:
    set_addr $I10, rxscan1967_loop
    rx1966_cur."!mark_push"(0, rx1966_pos, $I10)
  rxscan1967_done:
  # rx subrule "ws" subtype=method negate=
    rx1966_cur."!cursor_pos"(rx1966_pos)
    $P10 = rx1966_cur."ws"()
    unless $P10, rx1966_fail
    rx1966_pos = $P10."pos"()
.annotate 'line', 1039
  # rx rxquantr1968 ** 0..1
    set_addr $I10, rxquantr1968_done
    rx1966_cur."!mark_push"(0, rx1966_pos, $I10)
  rxquantr1968_loop:
  # rx subrule "typename" subtype=capture negate=
    rx1966_cur."!cursor_pos"(rx1966_pos)
    $P10 = rx1966_cur."typename"()
    unless $P10, rx1966_fail
    goto rxsubrule1969_pass
  rxsubrule1969_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1966_fail
  rxsubrule1969_pass:
    set_addr $I10, rxsubrule1969_back
    rx1966_cur."!mark_push"(0, rx1966_pos, $I10, $P10)
    $P10."!cursor_names"("typename")
    rx1966_pos = $P10."pos"()
    set_addr $I10, rxquantr1968_done
    (rx1966_rep) = rx1966_cur."!mark_commit"($I10)
  rxquantr1968_done:
  # rx subrule "ws" subtype=method negate=
    rx1966_cur."!cursor_pos"(rx1966_pos)
    $P10 = rx1966_cur."ws"()
    unless $P10, rx1966_fail
    rx1966_pos = $P10."pos"()
.annotate 'line', 1040
    rx1966_cur."!cursor_pos"(rx1966_pos)
    new $P106, "String"
    assign $P106, "variable"
    set $P1965, $P106
  # rx subrule "ws" subtype=method negate=
    rx1966_cur."!cursor_pos"(rx1966_pos)
    $P10 = rx1966_cur."ws"()
    unless $P10, rx1966_fail
    rx1966_pos = $P10."pos"()
.annotate 'line', 1041
  # rx subrule "variable" subtype=capture negate=
    rx1966_cur."!cursor_pos"(rx1966_pos)
    $P10 = rx1966_cur."variable"()
    unless $P10, rx1966_fail
    rx1966_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable")
    rx1966_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1966_cur."!cursor_pos"(rx1966_pos)
    $P10 = rx1966_cur."ws"()
    unless $P10, rx1966_fail
    rx1966_pos = $P10."pos"()
.annotate 'line', 1042
    rx1966_cur."!cursor_pos"(rx1966_pos)
    find_lex $P109, unicode:"$\x{a2}"
    $P110 = $P109."MATCH"()
    store_lex "$/", $P110
    .const 'Sub' $P1971 = "580_1334921493.34" 
    capture_lex $P1971
    $P112 = $P1971()
  # rx subrule "ws" subtype=method negate=
    rx1966_cur."!cursor_pos"(rx1966_pos)
    $P10 = rx1966_cur."ws"()
    unless $P10, rx1966_fail
    rx1966_pos = $P10."pos"()
.annotate 'line', 1043
  # rx rxquantr1972 ** 0..*
    set_addr $I10, rxquantr1972_done
    rx1966_cur."!mark_push"(0, rx1966_pos, $I10)
  rxquantr1972_loop:
  # rx subrule "trait" subtype=capture negate=
    rx1966_cur."!cursor_pos"(rx1966_pos)
    $P10 = rx1966_cur."trait"()
    unless $P10, rx1966_fail
    goto rxsubrule1973_pass
  rxsubrule1973_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1966_fail
  rxsubrule1973_pass:
    set_addr $I10, rxsubrule1973_back
    rx1966_cur."!mark_push"(0, rx1966_pos, $I10, $P10)
    $P10."!cursor_names"("trait")
    rx1966_pos = $P10."pos"()
    set_addr $I10, rxquantr1972_done
    (rx1966_rep) = rx1966_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1972_done
    rx1966_cur."!mark_push"(rx1966_rep, rx1966_pos, $I10)
    goto rxquantr1972_loop
  rxquantr1972_done:
  # rx subrule "ws" subtype=method negate=
    rx1966_cur."!cursor_pos"(rx1966_pos)
    $P10 = rx1966_cur."ws"()
    unless $P10, rx1966_fail
    rx1966_pos = $P10."pos"()
.annotate 'line', 1038
  # rx pass
    rx1966_cur."!cursor_pass"(rx1966_pos, "variable_declarator")
    if_null rx1966_debug, debug_1454
    rx1966_cur."!cursor_debug"("PASS", "variable_declarator", " at pos=", rx1966_pos)
  debug_1454:
    .return (rx1966_cur)
  rx1966_restart:
    if_null rx1966_debug, debug_1455
    rx1966_cur."!cursor_debug"("NEXT", "variable_declarator")
  debug_1455:
  rx1966_fail:
    (rx1966_rep, rx1966_pos, $I10, $P10) = rx1966_cur."!mark_fail"(0)
    lt rx1966_pos, -1, rx1966_done
    eq rx1966_pos, -1, rx1966_fail
    jump $I10
  rx1966_done:
    rx1966_cur."!cursor_fail"()
    if_null rx1966_debug, debug_1456
    rx1966_cur."!cursor_debug"("FAIL", "variable_declarator")
  debug_1456:
    .return (rx1966_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1970"  :anon :subid("580_1334921493.34") :outer("193_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1042
    new $P111, "Float"
    assign $P111, 0
    store_dynamic_lex "$*IN_DECL", $P111
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__variable_declarator"  :subid("194_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1038
    $P115 = self."!PREFIX__!subrule"("ws", "")
    new $P116, "ResizablePMCArray"
    push $P116, $P115
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_declarator"  :subid("195_1334921493.34")
    .param pmc param_1976
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1046
    .lex "self", param_1976
    $P103 = param_1976."!protoregex"("routine_declarator")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__routine_declarator"  :subid("196_1334921493.34")
    .param pmc param_1978
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1046
    .lex "self", param_1978
    $P104 = param_1978."!PREFIX__!protoregex"("routine_declarator")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_declarator:sym<sub>"  :subid("197_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1047
    .local string rx1980_tgt
    .local int rx1980_pos
    .local int rx1980_off
    .local int rx1980_eos
    .local int rx1980_rep
    .local pmc rx1980_cur
    .local pmc rx1980_debug
    (rx1980_cur, rx1980_pos, rx1980_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1980_cur
    .local pmc match
    .lex "$/", match
    length rx1980_eos, rx1980_tgt
    gt rx1980_pos, rx1980_eos, rx1980_done
    set rx1980_off, 0
    lt rx1980_pos, 2, rx1980_start
    sub rx1980_off, rx1980_pos, 1
    substr rx1980_tgt, rx1980_tgt, rx1980_off
  rx1980_start:
    eq $I10, 1, rx1980_restart
    if_null rx1980_debug, debug_1457
    rx1980_cur."!cursor_debug"("START", "routine_declarator:sym<sub>")
  debug_1457:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1981_done
    goto rxscan1981_scan
  rxscan1981_loop:
    (rx1980_pos) = rx1980_cur."from"()
    inc rx1980_pos
    rx1980_cur."!cursor_from"(rx1980_pos)
    ge rx1980_pos, rx1980_eos, rxscan1981_done
  rxscan1981_scan:
    set_addr $I10, rxscan1981_loop
    rx1980_cur."!mark_push"(0, rx1980_pos, $I10)
  rxscan1981_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1982_fail
    rx1980_cur."!mark_push"(0, rx1980_pos, $I10)
  # rx literal  "sub"
    add $I11, rx1980_pos, 3
    gt $I11, rx1980_eos, rx1980_fail
    sub $I11, rx1980_pos, rx1980_off
    substr $S10, rx1980_tgt, $I11, 3
    ne $S10, "sub", rx1980_fail
    add rx1980_pos, 3
    set_addr $I10, rxcap_1982_fail
    ($I12, $I11) = rx1980_cur."!mark_peek"($I10)
    rx1980_cur."!cursor_pos"($I11)
    ($P10) = rx1980_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1980_pos, "")
    rx1980_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1982_done
  rxcap_1982_fail:
    goto rx1980_fail
  rxcap_1982_done:
  # rx subrule "routine_def" subtype=capture negate=
    rx1980_cur."!cursor_pos"(rx1980_pos)
    $P10 = rx1980_cur."routine_def"()
    unless $P10, rx1980_fail
    rx1980_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_def")
    rx1980_pos = $P10."pos"()
  # rx pass
    rx1980_cur."!cursor_pass"(rx1980_pos, "routine_declarator:sym<sub>")
    if_null rx1980_debug, debug_1458
    rx1980_cur."!cursor_debug"("PASS", "routine_declarator:sym<sub>", " at pos=", rx1980_pos)
  debug_1458:
    .return (rx1980_cur)
  rx1980_restart:
    if_null rx1980_debug, debug_1459
    rx1980_cur."!cursor_debug"("NEXT", "routine_declarator:sym<sub>")
  debug_1459:
  rx1980_fail:
    (rx1980_rep, rx1980_pos, $I10, $P10) = rx1980_cur."!mark_fail"(0)
    lt rx1980_pos, -1, rx1980_done
    eq rx1980_pos, -1, rx1980_fail
    jump $I10
  rx1980_done:
    rx1980_cur."!cursor_fail"()
    if_null rx1980_debug, debug_1460
    rx1980_cur."!cursor_debug"("FAIL", "routine_declarator:sym<sub>")
  debug_1460:
    .return (rx1980_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__routine_declarator:sym<sub>"  :subid("198_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1047
    $P103 = self."!PREFIX__!subrule"("routine_def", "sub")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_declarator:sym<method>"  :subid("199_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1048
    .local string rx1985_tgt
    .local int rx1985_pos
    .local int rx1985_off
    .local int rx1985_eos
    .local int rx1985_rep
    .local pmc rx1985_cur
    .local pmc rx1985_debug
    (rx1985_cur, rx1985_pos, rx1985_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1985_cur
    .local pmc match
    .lex "$/", match
    length rx1985_eos, rx1985_tgt
    gt rx1985_pos, rx1985_eos, rx1985_done
    set rx1985_off, 0
    lt rx1985_pos, 2, rx1985_start
    sub rx1985_off, rx1985_pos, 1
    substr rx1985_tgt, rx1985_tgt, rx1985_off
  rx1985_start:
    eq $I10, 1, rx1985_restart
    if_null rx1985_debug, debug_1461
    rx1985_cur."!cursor_debug"("START", "routine_declarator:sym<method>")
  debug_1461:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1986_done
    goto rxscan1986_scan
  rxscan1986_loop:
    (rx1985_pos) = rx1985_cur."from"()
    inc rx1985_pos
    rx1985_cur."!cursor_from"(rx1985_pos)
    ge rx1985_pos, rx1985_eos, rxscan1986_done
  rxscan1986_scan:
    set_addr $I10, rxscan1986_loop
    rx1985_cur."!mark_push"(0, rx1985_pos, $I10)
  rxscan1986_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1987_fail
    rx1985_cur."!mark_push"(0, rx1985_pos, $I10)
  # rx literal  "method"
    add $I11, rx1985_pos, 6
    gt $I11, rx1985_eos, rx1985_fail
    sub $I11, rx1985_pos, rx1985_off
    substr $S10, rx1985_tgt, $I11, 6
    ne $S10, "method", rx1985_fail
    add rx1985_pos, 6
    set_addr $I10, rxcap_1987_fail
    ($I12, $I11) = rx1985_cur."!mark_peek"($I10)
    rx1985_cur."!cursor_pos"($I11)
    ($P10) = rx1985_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1985_pos, "")
    rx1985_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1987_done
  rxcap_1987_fail:
    goto rx1985_fail
  rxcap_1987_done:
  # rx subrule "method_def" subtype=capture negate=
    rx1985_cur."!cursor_pos"(rx1985_pos)
    $P10 = rx1985_cur."method_def"()
    unless $P10, rx1985_fail
    rx1985_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("method_def")
    rx1985_pos = $P10."pos"()
  # rx pass
    rx1985_cur."!cursor_pass"(rx1985_pos, "routine_declarator:sym<method>")
    if_null rx1985_debug, debug_1462
    rx1985_cur."!cursor_debug"("PASS", "routine_declarator:sym<method>", " at pos=", rx1985_pos)
  debug_1462:
    .return (rx1985_cur)
  rx1985_restart:
    if_null rx1985_debug, debug_1463
    rx1985_cur."!cursor_debug"("NEXT", "routine_declarator:sym<method>")
  debug_1463:
  rx1985_fail:
    (rx1985_rep, rx1985_pos, $I10, $P10) = rx1985_cur."!mark_fail"(0)
    lt rx1985_pos, -1, rx1985_done
    eq rx1985_pos, -1, rx1985_fail
    jump $I10
  rx1985_done:
    rx1985_cur."!cursor_fail"()
    if_null rx1985_debug, debug_1464
    rx1985_cur."!cursor_debug"("FAIL", "routine_declarator:sym<method>")
  debug_1464:
    .return (rx1985_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__routine_declarator:sym<method>"  :subid("200_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1048
    $P103 = self."!PREFIX__!subrule"("method_def", "method")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_def"  :subid("201_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1051
    new $P103, "Undef"
    set $P1990, $P103
    .lex "$*RETURN_USED", $P1990
.annotate 'line', 1050
    .local string rx1991_tgt
    .local int rx1991_pos
    .local int rx1991_off
    .local int rx1991_eos
    .local int rx1991_rep
    .local pmc rx1991_cur
    .local pmc rx1991_debug
    (rx1991_cur, rx1991_pos, rx1991_tgt, $I10) = self."!cursor_start"()
    rx1991_cur."!cursor_caparray"("sigil", "deflongname", "trait")
    .lex unicode:"$\x{a2}", rx1991_cur
    .local pmc match
    .lex "$/", match
    length rx1991_eos, rx1991_tgt
    gt rx1991_pos, rx1991_eos, rx1991_done
    set rx1991_off, 0
    lt rx1991_pos, 2, rx1991_start
    sub rx1991_off, rx1991_pos, 1
    substr rx1991_tgt, rx1991_tgt, rx1991_off
  rx1991_start:
    eq $I10, 1, rx1991_restart
    if_null rx1991_debug, debug_1465
    rx1991_cur."!cursor_debug"("START", "routine_def")
  debug_1465:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1992_done
    goto rxscan1992_scan
  rxscan1992_loop:
    (rx1991_pos) = rx1991_cur."from"()
    inc rx1991_pos
    rx1991_cur."!cursor_from"(rx1991_pos)
    ge rx1991_pos, rx1991_eos, rxscan1992_done
  rxscan1992_scan:
    set_addr $I10, rxscan1992_loop
    rx1991_cur."!mark_push"(0, rx1991_pos, $I10)
  rxscan1992_done:
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
.annotate 'line', 1051
    rx1991_cur."!cursor_pos"(rx1991_pos)
    new $P105, "Float"
    assign $P105, 0
    set $P1990, $P105
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
.annotate 'line', 1052
  # rx rxquantr1993 ** 0..1
    set_addr $I10, rxquantr1993_done
    rx1991_cur."!mark_push"(0, rx1991_pos, $I10)
  rxquantr1993_loop:
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
  # rx subcapture "sigil"
    set_addr $I10, rxcap_1995_fail
    rx1991_cur."!mark_push"(0, rx1991_pos, $I10)
  # rx rxquantr1994 ** 0..1
    set_addr $I10, rxquantr1994_done
    rx1991_cur."!mark_push"(0, rx1991_pos, $I10)
  rxquantr1994_loop:
  # rx literal  "&"
    add $I11, rx1991_pos, 1
    gt $I11, rx1991_eos, rx1991_fail
    sub $I11, rx1991_pos, rx1991_off
    ord $I11, rx1991_tgt, $I11
    ne $I11, 38, rx1991_fail
    add rx1991_pos, 1
    set_addr $I10, rxquantr1994_done
    (rx1991_rep) = rx1991_cur."!mark_commit"($I10)
  rxquantr1994_done:
    set_addr $I10, rxcap_1995_fail
    ($I12, $I11) = rx1991_cur."!mark_peek"($I10)
    rx1991_cur."!cursor_pos"($I11)
    ($P10) = rx1991_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1991_pos, "")
    rx1991_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    goto rxcap_1995_done
  rxcap_1995_fail:
    goto rx1991_fail
  rxcap_1995_done:
  # rx subrule "deflongname" subtype=capture negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."deflongname"()
    unless $P10, rx1991_fail
    rx1991_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("deflongname")
    rx1991_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
    set_addr $I10, rxquantr1993_done
    (rx1991_rep) = rx1991_cur."!mark_commit"($I10)
  rxquantr1993_done:
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
.annotate 'line', 1053
  # rx subrule "newpad" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."newpad"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
  alt1996_0:
.annotate 'line', 1054
    set_addr $I10, alt1996_1
    rx1991_cur."!mark_push"(0, rx1991_pos, $I10)
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
  # rx literal  "("
    add $I11, rx1991_pos, 1
    gt $I11, rx1991_eos, rx1991_fail
    sub $I11, rx1991_pos, rx1991_off
    ord $I11, rx1991_tgt, $I11
    ne $I11, 40, rx1991_fail
    add rx1991_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
  # rx subrule "signature" subtype=capture negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."signature"()
    unless $P10, rx1991_fail
    rx1991_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("signature")
    rx1991_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx1991_pos, 1
    gt $I11, rx1991_eos, rx1991_fail
    sub $I11, rx1991_pos, rx1991_off
    ord $I11, rx1991_tgt, $I11
    ne $I11, 41, rx1991_fail
    add rx1991_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
    goto alt1996_end
  alt1996_1:
.annotate 'line', 1055
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."panic"("Routine declaration requires a signature")
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
  alt1996_end:
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
.annotate 'line', 1056
  # rx rxquantr1997 ** 0..*
    set_addr $I10, rxquantr1997_done
    rx1991_cur."!mark_push"(0, rx1991_pos, $I10)
  rxquantr1997_loop:
  # rx subrule "trait" subtype=capture negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."trait"()
    unless $P10, rx1991_fail
    goto rxsubrule1998_pass
  rxsubrule1998_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1991_fail
  rxsubrule1998_pass:
    set_addr $I10, rxsubrule1998_back
    rx1991_cur."!mark_push"(0, rx1991_pos, $I10, $P10)
    $P10."!cursor_names"("trait")
    rx1991_pos = $P10."pos"()
    set_addr $I10, rxquantr1997_done
    (rx1991_rep) = rx1991_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1997_done
    rx1991_cur."!mark_push"(rx1991_rep, rx1991_pos, $I10)
    goto rxquantr1997_loop
  rxquantr1997_done:
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
  alt1999_0:
.annotate 'line', 1057
    set_addr $I10, alt1999_1
    rx1991_cur."!mark_push"(0, rx1991_pos, $I10)
.annotate 'line', 1058
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
  # rx subrule "onlystar" subtype=capture negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."onlystar"()
    unless $P10, rx1991_fail
    rx1991_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("onlystar")
    rx1991_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
    goto alt1999_end
  alt1999_1:
.annotate 'line', 1059
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
  # rx subrule "blockoid" subtype=capture negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."blockoid"()
    unless $P10, rx1991_fail
    rx1991_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx1991_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
  alt1999_end:
.annotate 'line', 1060
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
.annotate 'line', 1050
  # rx pass
    rx1991_cur."!cursor_pass"(rx1991_pos, "routine_def")
    if_null rx1991_debug, debug_1466
    rx1991_cur."!cursor_debug"("PASS", "routine_def", " at pos=", rx1991_pos)
  debug_1466:
    .return (rx1991_cur)
  rx1991_restart:
    if_null rx1991_debug, debug_1467
    rx1991_cur."!cursor_debug"("NEXT", "routine_def")
  debug_1467:
  rx1991_fail:
    (rx1991_rep, rx1991_pos, $I10, $P10) = rx1991_cur."!mark_fail"(0)
    lt rx1991_pos, -1, rx1991_done
    eq rx1991_pos, -1, rx1991_fail
    jump $I10
  rx1991_done:
    rx1991_cur."!cursor_fail"()
    if_null rx1991_debug, debug_1468
    rx1991_cur."!cursor_debug"("FAIL", "routine_def")
  debug_1468:
    .return (rx1991_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__routine_def"  :subid("202_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1050
    $P124 = self."!PREFIX__!subrule"("ws", "")
    new $P125, "ResizablePMCArray"
    push $P125, $P124
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "method_def"  :subid("203_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1063
    .const 'Sub' $P2012 = "581_1334921493.34" 
    capture_lex $P2012
.annotate 'line', 1064
    new $P103, "Undef"
    set $P2002, $P103
    .lex "$*RETURN_USED", $P2002
.annotate 'line', 1065
    new $P104, "Undef"
    set $P2003, $P104
    .lex "$*INVOCANT_OK", $P2003
.annotate 'line', 1063
    .local string rx2004_tgt
    .local int rx2004_pos
    .local int rx2004_off
    .local int rx2004_eos
    .local int rx2004_rep
    .local pmc rx2004_cur
    .local pmc rx2004_debug
    (rx2004_cur, rx2004_pos, rx2004_tgt, $I10) = self."!cursor_start"()
    rx2004_cur."!cursor_caparray"("deflongname", "trait")
    .lex unicode:"$\x{a2}", rx2004_cur
    .local pmc match
    .lex "$/", match
    length rx2004_eos, rx2004_tgt
    gt rx2004_pos, rx2004_eos, rx2004_done
    set rx2004_off, 0
    lt rx2004_pos, 2, rx2004_start
    sub rx2004_off, rx2004_pos, 1
    substr rx2004_tgt, rx2004_tgt, rx2004_off
  rx2004_start:
    eq $I10, 1, rx2004_restart
    if_null rx2004_debug, debug_1469
    rx2004_cur."!cursor_debug"("START", "method_def")
  debug_1469:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2005_done
    goto rxscan2005_scan
  rxscan2005_loop:
    (rx2004_pos) = rx2004_cur."from"()
    inc rx2004_pos
    rx2004_cur."!cursor_from"(rx2004_pos)
    ge rx2004_pos, rx2004_eos, rxscan2005_done
  rxscan2005_scan:
    set_addr $I10, rxscan2005_loop
    rx2004_cur."!mark_push"(0, rx2004_pos, $I10)
  rxscan2005_done:
  # rx subrule "ws" subtype=method negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."ws"()
    unless $P10, rx2004_fail
    rx2004_pos = $P10."pos"()
.annotate 'line', 1064
    rx2004_cur."!cursor_pos"(rx2004_pos)
    new $P106, "Float"
    assign $P106, 0
    set $P2002, $P106
  # rx subrule "ws" subtype=method negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."ws"()
    unless $P10, rx2004_fail
    rx2004_pos = $P10."pos"()
.annotate 'line', 1065
    rx2004_cur."!cursor_pos"(rx2004_pos)
    new $P108, "Float"
    assign $P108, 1
    set $P2003, $P108
  # rx subrule "ws" subtype=method negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."ws"()
    unless $P10, rx2004_fail
    rx2004_pos = $P10."pos"()
.annotate 'line', 1066
  # rx subcapture "private"
    set_addr $I10, rxcap_2007_fail
    rx2004_cur."!mark_push"(0, rx2004_pos, $I10)
  # rx rxquantr2006 ** 0..1
    set_addr $I10, rxquantr2006_done
    rx2004_cur."!mark_push"(0, rx2004_pos, $I10)
  rxquantr2006_loop:
  # rx literal  "!"
    add $I11, rx2004_pos, 1
    gt $I11, rx2004_eos, rx2004_fail
    sub $I11, rx2004_pos, rx2004_off
    ord $I11, rx2004_tgt, $I11
    ne $I11, 33, rx2004_fail
    add rx2004_pos, 1
    set_addr $I10, rxquantr2006_done
    (rx2004_rep) = rx2004_cur."!mark_commit"($I10)
  rxquantr2006_done:
    set_addr $I10, rxcap_2007_fail
    ($I12, $I11) = rx2004_cur."!mark_peek"($I10)
    rx2004_cur."!cursor_pos"($I11)
    ($P10) = rx2004_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2004_pos, "")
    rx2004_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("private")
    goto rxcap_2007_done
  rxcap_2007_fail:
    goto rx2004_fail
  rxcap_2007_done:
  # rx subrule "ws" subtype=method negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."ws"()
    unless $P10, rx2004_fail
    rx2004_pos = $P10."pos"()
.annotate 'line', 1067
  # rx rxquantr2008 ** 0..1
    set_addr $I10, rxquantr2008_done
    rx2004_cur."!mark_push"(0, rx2004_pos, $I10)
  rxquantr2008_loop:
  # rx subrule "deflongname" subtype=capture negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."deflongname"()
    unless $P10, rx2004_fail
    goto rxsubrule2009_pass
  rxsubrule2009_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2004_fail
  rxsubrule2009_pass:
    set_addr $I10, rxsubrule2009_back
    rx2004_cur."!mark_push"(0, rx2004_pos, $I10, $P10)
    $P10."!cursor_names"("deflongname")
    rx2004_pos = $P10."pos"()
    set_addr $I10, rxquantr2008_done
    (rx2004_rep) = rx2004_cur."!mark_commit"($I10)
  rxquantr2008_done:
  # rx subrule "ws" subtype=method negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."ws"()
    unless $P10, rx2004_fail
    rx2004_pos = $P10."pos"()
.annotate 'line', 1068
  # rx subrule "newpad" subtype=method negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."newpad"()
    unless $P10, rx2004_fail
    rx2004_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."ws"()
    unless $P10, rx2004_fail
    rx2004_pos = $P10."pos"()
  alt2010_0:
.annotate 'line', 1069
    set_addr $I10, alt2010_1
    rx2004_cur."!mark_push"(0, rx2004_pos, $I10)
  # rx subrule "ws" subtype=method negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."ws"()
    unless $P10, rx2004_fail
    rx2004_pos = $P10."pos"()
  # rx literal  "("
    add $I11, rx2004_pos, 1
    gt $I11, rx2004_eos, rx2004_fail
    sub $I11, rx2004_pos, rx2004_off
    ord $I11, rx2004_tgt, $I11
    ne $I11, 40, rx2004_fail
    add rx2004_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."ws"()
    unless $P10, rx2004_fail
    rx2004_pos = $P10."pos"()
  # rx subrule "signature" subtype=capture negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."signature"()
    unless $P10, rx2004_fail
    rx2004_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("signature")
    rx2004_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."ws"()
    unless $P10, rx2004_fail
    rx2004_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx2004_pos, 1
    gt $I11, rx2004_eos, rx2004_fail
    sub $I11, rx2004_pos, rx2004_off
    ord $I11, rx2004_tgt, $I11
    ne $I11, 41, rx2004_fail
    add rx2004_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."ws"()
    unless $P10, rx2004_fail
    rx2004_pos = $P10."pos"()
    goto alt2010_end
  alt2010_1:
.annotate 'line', 1070
  # rx subrule "ws" subtype=method negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."ws"()
    unless $P10, rx2004_fail
    rx2004_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."panic"("Routine declaration requires a signature")
    unless $P10, rx2004_fail
    rx2004_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."ws"()
    unless $P10, rx2004_fail
    rx2004_pos = $P10."pos"()
  alt2010_end:
  # rx subrule "ws" subtype=method negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."ws"()
    unless $P10, rx2004_fail
    rx2004_pos = $P10."pos"()
.annotate 'line', 1071
    rx2004_cur."!cursor_pos"(rx2004_pos)
    find_lex $P120, unicode:"$\x{a2}"
    $P121 = $P120."MATCH"()
    store_lex "$/", $P121
    .const 'Sub' $P2012 = "581_1334921493.34" 
    capture_lex $P2012
    $P123 = $P2012()
  # rx subrule "ws" subtype=method negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."ws"()
    unless $P10, rx2004_fail
    rx2004_pos = $P10."pos"()
.annotate 'line', 1072
  # rx rxquantr2013 ** 0..*
    set_addr $I10, rxquantr2013_done
    rx2004_cur."!mark_push"(0, rx2004_pos, $I10)
  rxquantr2013_loop:
  # rx subrule "trait" subtype=capture negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."trait"()
    unless $P10, rx2004_fail
    goto rxsubrule2014_pass
  rxsubrule2014_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2004_fail
  rxsubrule2014_pass:
    set_addr $I10, rxsubrule2014_back
    rx2004_cur."!mark_push"(0, rx2004_pos, $I10, $P10)
    $P10."!cursor_names"("trait")
    rx2004_pos = $P10."pos"()
    set_addr $I10, rxquantr2013_done
    (rx2004_rep) = rx2004_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr2013_done
    rx2004_cur."!mark_push"(rx2004_rep, rx2004_pos, $I10)
    goto rxquantr2013_loop
  rxquantr2013_done:
  # rx subrule "ws" subtype=method negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."ws"()
    unless $P10, rx2004_fail
    rx2004_pos = $P10."pos"()
  alt2015_0:
.annotate 'line', 1073
    set_addr $I10, alt2015_1
    rx2004_cur."!mark_push"(0, rx2004_pos, $I10)
.annotate 'line', 1074
  # rx subrule "ws" subtype=method negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."ws"()
    unless $P10, rx2004_fail
    rx2004_pos = $P10."pos"()
  # rx subrule "onlystar" subtype=capture negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."onlystar"()
    unless $P10, rx2004_fail
    rx2004_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("onlystar")
    rx2004_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."ws"()
    unless $P10, rx2004_fail
    rx2004_pos = $P10."pos"()
    goto alt2015_end
  alt2015_1:
.annotate 'line', 1075
  # rx subrule "ws" subtype=method negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."ws"()
    unless $P10, rx2004_fail
    rx2004_pos = $P10."pos"()
  # rx subrule "blockoid" subtype=capture negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."blockoid"()
    unless $P10, rx2004_fail
    rx2004_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx2004_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."ws"()
    unless $P10, rx2004_fail
    rx2004_pos = $P10."pos"()
  alt2015_end:
.annotate 'line', 1076
  # rx subrule "ws" subtype=method negate=
    rx2004_cur."!cursor_pos"(rx2004_pos)
    $P10 = rx2004_cur."ws"()
    unless $P10, rx2004_fail
    rx2004_pos = $P10."pos"()
.annotate 'line', 1063
  # rx pass
    rx2004_cur."!cursor_pass"(rx2004_pos, "method_def")
    if_null rx2004_debug, debug_1470
    rx2004_cur."!cursor_debug"("PASS", "method_def", " at pos=", rx2004_pos)
  debug_1470:
    .return (rx2004_cur)
  rx2004_restart:
    if_null rx2004_debug, debug_1471
    rx2004_cur."!cursor_debug"("NEXT", "method_def")
  debug_1471:
  rx2004_fail:
    (rx2004_rep, rx2004_pos, $I10, $P10) = rx2004_cur."!mark_fail"(0)
    lt rx2004_pos, -1, rx2004_done
    eq rx2004_pos, -1, rx2004_fail
    jump $I10
  rx2004_done:
    rx2004_cur."!cursor_fail"()
    if_null rx2004_debug, debug_1472
    rx2004_cur."!cursor_debug"("FAIL", "method_def")
  debug_1472:
    .return (rx2004_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2011"  :anon :subid("581_1334921493.34") :outer("203_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1071
    new $P122, "Float"
    assign $P122, 0
    store_dynamic_lex "$*INVOCANT_OK", $P122
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__method_def"  :subid("204_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1063
    $P131 = self."!PREFIX__!subrule"("ws", "")
    new $P132, "ResizablePMCArray"
    push $P132, $P131
    .return ($P132)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "onlystar"  :subid("205_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1079
    .const 'Sub' $P2021 = "582_1334921493.34" 
    capture_lex $P2021
    .local string rx2018_tgt
    .local int rx2018_pos
    .local int rx2018_off
    .local int rx2018_eos
    .local int rx2018_rep
    .local pmc rx2018_cur
    .local pmc rx2018_debug
    (rx2018_cur, rx2018_pos, rx2018_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2018_cur
    .local pmc match
    .lex "$/", match
    length rx2018_eos, rx2018_tgt
    gt rx2018_pos, rx2018_eos, rx2018_done
    set rx2018_off, 0
    lt rx2018_pos, 2, rx2018_start
    sub rx2018_off, rx2018_pos, 1
    substr rx2018_tgt, rx2018_tgt, rx2018_off
  rx2018_start:
    eq $I10, 1, rx2018_restart
    if_null rx2018_debug, debug_1473
    rx2018_cur."!cursor_debug"("START", "onlystar")
  debug_1473:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2019_done
    goto rxscan2019_scan
  rxscan2019_loop:
    (rx2018_pos) = rx2018_cur."from"()
    inc rx2018_pos
    rx2018_cur."!cursor_from"(rx2018_pos)
    ge rx2018_pos, rx2018_eos, rxscan2019_done
  rxscan2019_scan:
    set_addr $I10, rxscan2019_loop
    rx2018_cur."!mark_push"(0, rx2018_pos, $I10)
  rxscan2019_done:
.annotate 'line', 1080
    rx2018_cur."!cursor_pos"(rx2018_pos)
    find_lex $P103, unicode:"$\x{a2}"
    $P104 = $P103."MATCH"()
    store_lex "$/", $P104
    .const 'Sub' $P2021 = "582_1334921493.34" 
    capture_lex $P2021
    $P105 = $P2021()
    unless $P105, rx2018_fail
.annotate 'line', 1081
  # rx literal  "{"
    add $I11, rx2018_pos, 1
    gt $I11, rx2018_eos, rx2018_fail
    sub $I11, rx2018_pos, rx2018_off
    ord $I11, rx2018_tgt, $I11
    ne $I11, 123, rx2018_fail
    add rx2018_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2018_cur."!cursor_pos"(rx2018_pos)
    $P10 = rx2018_cur."ws"()
    unless $P10, rx2018_fail
    rx2018_pos = $P10."pos"()
  # rx literal  "*"
    add $I11, rx2018_pos, 1
    gt $I11, rx2018_eos, rx2018_fail
    sub $I11, rx2018_pos, rx2018_off
    ord $I11, rx2018_tgt, $I11
    ne $I11, 42, rx2018_fail
    add rx2018_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2018_cur."!cursor_pos"(rx2018_pos)
    $P10 = rx2018_cur."ws"()
    unless $P10, rx2018_fail
    rx2018_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx2018_pos, 1
    gt $I11, rx2018_eos, rx2018_fail
    sub $I11, rx2018_pos, rx2018_off
    ord $I11, rx2018_tgt, $I11
    ne $I11, 125, rx2018_fail
    add rx2018_pos, 1
.annotate 'line', 1082
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx2018_cur."!cursor_pos"(rx2018_pos)
    $P10 = rx2018_cur."ENDSTMT"()
    unless $P10, rx2018_fail
.annotate 'line', 1083
  # rx subrule "finishpad" subtype=method negate=
    rx2018_cur."!cursor_pos"(rx2018_pos)
    $P10 = rx2018_cur."finishpad"()
    unless $P10, rx2018_fail
    rx2018_pos = $P10."pos"()
.annotate 'line', 1079
  # rx pass
    rx2018_cur."!cursor_pass"(rx2018_pos, "onlystar")
    if_null rx2018_debug, debug_1476
    rx2018_cur."!cursor_debug"("PASS", "onlystar", " at pos=", rx2018_pos)
  debug_1476:
    .return (rx2018_cur)
  rx2018_restart:
    if_null rx2018_debug, debug_1477
    rx2018_cur."!cursor_debug"("NEXT", "onlystar")
  debug_1477:
  rx2018_fail:
    (rx2018_rep, rx2018_pos, $I10, $P10) = rx2018_cur."!mark_fail"(0)
    lt rx2018_pos, -1, rx2018_done
    eq rx2018_pos, -1, rx2018_fail
    jump $I10
  rx2018_done:
    rx2018_cur."!cursor_fail"()
    if_null rx2018_debug, debug_1478
    rx2018_cur."!cursor_debug"("FAIL", "onlystar")
  debug_1478:
    .return (rx2018_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2020"  :anon :subid("582_1334921493.34") :outer("205_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1080
    find_dynamic_lex $P107, "$*MULTINESS"
    unless_null $P107, vivify_1474
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$MULTINESS"]
    unless_null $P107, vivify_1475
    die "Contextual $*MULTINESS not found"
  vivify_1475:
  vivify_1474:
    set $S100, $P107
    iseq $I100, $S100, "proto"
    .return ($I100)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__onlystar"  :subid("206_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1079
    new $P106, "ResizablePMCArray"
    push $P106, ""
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator"  :subid("207_1334921493.34")
    .param pmc param_2024
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1086
    .lex "self", param_2024
    $P103 = param_2024."!protoregex"("multi_declarator")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__multi_declarator"  :subid("208_1334921493.34")
    .param pmc param_2026
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1086
    .lex "self", param_2026
    $P104 = param_2026."!PREFIX__!protoregex"("multi_declarator")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator:sym<multi>"  :subid("209_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1088
    new $P103, "Undef"
    set $P2028, $P103
    .lex "$*MULTINESS", $P2028
.annotate 'line', 1087
    .local string rx2029_tgt
    .local int rx2029_pos
    .local int rx2029_off
    .local int rx2029_eos
    .local int rx2029_rep
    .local pmc rx2029_cur
    .local pmc rx2029_debug
    (rx2029_cur, rx2029_pos, rx2029_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2029_cur
    .local pmc match
    .lex "$/", match
    length rx2029_eos, rx2029_tgt
    gt rx2029_pos, rx2029_eos, rx2029_done
    set rx2029_off, 0
    lt rx2029_pos, 2, rx2029_start
    sub rx2029_off, rx2029_pos, 1
    substr rx2029_tgt, rx2029_tgt, rx2029_off
  rx2029_start:
    eq $I10, 1, rx2029_restart
    if_null rx2029_debug, debug_1479
    rx2029_cur."!cursor_debug"("START", "multi_declarator:sym<multi>")
  debug_1479:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2030_done
    goto rxscan2030_scan
  rxscan2030_loop:
    (rx2029_pos) = rx2029_cur."from"()
    inc rx2029_pos
    rx2029_cur."!cursor_from"(rx2029_pos)
    ge rx2029_pos, rx2029_eos, rxscan2030_done
  rxscan2030_scan:
    set_addr $I10, rxscan2030_loop
    rx2029_cur."!mark_push"(0, rx2029_pos, $I10)
  rxscan2030_done:
.annotate 'line', 1088
    rx2029_cur."!cursor_pos"(rx2029_pos)
    new $P104, "String"
    assign $P104, "multi"
    set $P2028, $P104
.annotate 'line', 1089
  # rx subcapture "sym"
    set_addr $I10, rxcap_2031_fail
    rx2029_cur."!mark_push"(0, rx2029_pos, $I10)
  # rx literal  "multi"
    add $I11, rx2029_pos, 5
    gt $I11, rx2029_eos, rx2029_fail
    sub $I11, rx2029_pos, rx2029_off
    substr $S10, rx2029_tgt, $I11, 5
    ne $S10, "multi", rx2029_fail
    add rx2029_pos, 5
    set_addr $I10, rxcap_2031_fail
    ($I12, $I11) = rx2029_cur."!mark_peek"($I10)
    rx2029_cur."!cursor_pos"($I11)
    ($P10) = rx2029_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2029_pos, "")
    rx2029_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2031_done
  rxcap_2031_fail:
    goto rx2029_fail
  rxcap_2031_done:
.annotate 'line', 1090
  # rx subrule "ws" subtype=method negate=
    rx2029_cur."!cursor_pos"(rx2029_pos)
    $P10 = rx2029_cur."ws"()
    unless $P10, rx2029_fail
    rx2029_pos = $P10."pos"()
  alt2032_0:
    set_addr $I10, alt2032_1
    rx2029_cur."!mark_push"(0, rx2029_pos, $I10)
  # rx subrule "declarator" subtype=capture negate=
    rx2029_cur."!cursor_pos"(rx2029_pos)
    $P10 = rx2029_cur."declarator"()
    unless $P10, rx2029_fail
    rx2029_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("declarator")
    rx2029_pos = $P10."pos"()
    goto alt2032_end
  alt2032_1:
    set_addr $I10, alt2032_2
    rx2029_cur."!mark_push"(0, rx2029_pos, $I10)
  # rx subrule "routine_def" subtype=capture negate=
    rx2029_cur."!cursor_pos"(rx2029_pos)
    $P10 = rx2029_cur."routine_def"()
    unless $P10, rx2029_fail
    rx2029_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_def")
    rx2029_pos = $P10."pos"()
    goto alt2032_end
  alt2032_2:
  # rx subrule "panic" subtype=method negate=
    rx2029_cur."!cursor_pos"(rx2029_pos)
    $P10 = rx2029_cur."panic"("Malformed multi")
    unless $P10, rx2029_fail
    rx2029_pos = $P10."pos"()
  alt2032_end:
.annotate 'line', 1087
  # rx pass
    rx2029_cur."!cursor_pass"(rx2029_pos, "multi_declarator:sym<multi>")
    if_null rx2029_debug, debug_1480
    rx2029_cur."!cursor_debug"("PASS", "multi_declarator:sym<multi>", " at pos=", rx2029_pos)
  debug_1480:
    .return (rx2029_cur)
  rx2029_restart:
    if_null rx2029_debug, debug_1481
    rx2029_cur."!cursor_debug"("NEXT", "multi_declarator:sym<multi>")
  debug_1481:
  rx2029_fail:
    (rx2029_rep, rx2029_pos, $I10, $P10) = rx2029_cur."!mark_fail"(0)
    lt rx2029_pos, -1, rx2029_done
    eq rx2029_pos, -1, rx2029_fail
    jump $I10
  rx2029_done:
    rx2029_cur."!cursor_fail"()
    if_null rx2029_debug, debug_1482
    rx2029_cur."!cursor_debug"("FAIL", "multi_declarator:sym<multi>")
  debug_1482:
    .return (rx2029_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__multi_declarator:sym<multi>"  :subid("210_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1087
    $P105 = self."!PREFIX__!subrule"("ws", "multi")
    new $P106, "ResizablePMCArray"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator:sym<proto>"  :subid("211_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1093
    new $P103, "Undef"
    set $P2035, $P103
    .lex "$*MULTINESS", $P2035
.annotate 'line', 1092
    .local string rx2036_tgt
    .local int rx2036_pos
    .local int rx2036_off
    .local int rx2036_eos
    .local int rx2036_rep
    .local pmc rx2036_cur
    .local pmc rx2036_debug
    (rx2036_cur, rx2036_pos, rx2036_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2036_cur
    .local pmc match
    .lex "$/", match
    length rx2036_eos, rx2036_tgt
    gt rx2036_pos, rx2036_eos, rx2036_done
    set rx2036_off, 0
    lt rx2036_pos, 2, rx2036_start
    sub rx2036_off, rx2036_pos, 1
    substr rx2036_tgt, rx2036_tgt, rx2036_off
  rx2036_start:
    eq $I10, 1, rx2036_restart
    if_null rx2036_debug, debug_1483
    rx2036_cur."!cursor_debug"("START", "multi_declarator:sym<proto>")
  debug_1483:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2037_done
    goto rxscan2037_scan
  rxscan2037_loop:
    (rx2036_pos) = rx2036_cur."from"()
    inc rx2036_pos
    rx2036_cur."!cursor_from"(rx2036_pos)
    ge rx2036_pos, rx2036_eos, rxscan2037_done
  rxscan2037_scan:
    set_addr $I10, rxscan2037_loop
    rx2036_cur."!mark_push"(0, rx2036_pos, $I10)
  rxscan2037_done:
.annotate 'line', 1093
    rx2036_cur."!cursor_pos"(rx2036_pos)
    new $P104, "String"
    assign $P104, "proto"
    set $P2035, $P104
.annotate 'line', 1094
  # rx subcapture "sym"
    set_addr $I10, rxcap_2038_fail
    rx2036_cur."!mark_push"(0, rx2036_pos, $I10)
  # rx literal  "proto"
    add $I11, rx2036_pos, 5
    gt $I11, rx2036_eos, rx2036_fail
    sub $I11, rx2036_pos, rx2036_off
    substr $S10, rx2036_tgt, $I11, 5
    ne $S10, "proto", rx2036_fail
    add rx2036_pos, 5
    set_addr $I10, rxcap_2038_fail
    ($I12, $I11) = rx2036_cur."!mark_peek"($I10)
    rx2036_cur."!cursor_pos"($I11)
    ($P10) = rx2036_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2036_pos, "")
    rx2036_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2038_done
  rxcap_2038_fail:
    goto rx2036_fail
  rxcap_2038_done:
.annotate 'line', 1095
  # rx subrule "ws" subtype=method negate=
    rx2036_cur."!cursor_pos"(rx2036_pos)
    $P10 = rx2036_cur."ws"()
    unless $P10, rx2036_fail
    rx2036_pos = $P10."pos"()
  alt2039_0:
    set_addr $I10, alt2039_1
    rx2036_cur."!mark_push"(0, rx2036_pos, $I10)
  # rx subrule "declarator" subtype=capture negate=
    rx2036_cur."!cursor_pos"(rx2036_pos)
    $P10 = rx2036_cur."declarator"()
    unless $P10, rx2036_fail
    rx2036_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("declarator")
    rx2036_pos = $P10."pos"()
    goto alt2039_end
  alt2039_1:
    set_addr $I10, alt2039_2
    rx2036_cur."!mark_push"(0, rx2036_pos, $I10)
  # rx subrule "routine_def" subtype=capture negate=
    rx2036_cur."!cursor_pos"(rx2036_pos)
    $P10 = rx2036_cur."routine_def"()
    unless $P10, rx2036_fail
    rx2036_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_def")
    rx2036_pos = $P10."pos"()
    goto alt2039_end
  alt2039_2:
  # rx subrule "panic" subtype=method negate=
    rx2036_cur."!cursor_pos"(rx2036_pos)
    $P10 = rx2036_cur."panic"("Malformed proto")
    unless $P10, rx2036_fail
    rx2036_pos = $P10."pos"()
  alt2039_end:
.annotate 'line', 1092
  # rx pass
    rx2036_cur."!cursor_pass"(rx2036_pos, "multi_declarator:sym<proto>")
    if_null rx2036_debug, debug_1484
    rx2036_cur."!cursor_debug"("PASS", "multi_declarator:sym<proto>", " at pos=", rx2036_pos)
  debug_1484:
    .return (rx2036_cur)
  rx2036_restart:
    if_null rx2036_debug, debug_1485
    rx2036_cur."!cursor_debug"("NEXT", "multi_declarator:sym<proto>")
  debug_1485:
  rx2036_fail:
    (rx2036_rep, rx2036_pos, $I10, $P10) = rx2036_cur."!mark_fail"(0)
    lt rx2036_pos, -1, rx2036_done
    eq rx2036_pos, -1, rx2036_fail
    jump $I10
  rx2036_done:
    rx2036_cur."!cursor_fail"()
    if_null rx2036_debug, debug_1486
    rx2036_cur."!cursor_debug"("FAIL", "multi_declarator:sym<proto>")
  debug_1486:
    .return (rx2036_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__multi_declarator:sym<proto>"  :subid("212_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1092
    $P105 = self."!PREFIX__!subrule"("ws", "proto")
    new $P106, "ResizablePMCArray"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator:sym<null>"  :subid("213_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1098
    new $P103, "Undef"
    set $P2042, $P103
    .lex "$*MULTINESS", $P2042
.annotate 'line', 1097
    .local string rx2043_tgt
    .local int rx2043_pos
    .local int rx2043_off
    .local int rx2043_eos
    .local int rx2043_rep
    .local pmc rx2043_cur
    .local pmc rx2043_debug
    (rx2043_cur, rx2043_pos, rx2043_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2043_cur
    .local pmc match
    .lex "$/", match
    length rx2043_eos, rx2043_tgt
    gt rx2043_pos, rx2043_eos, rx2043_done
    set rx2043_off, 0
    lt rx2043_pos, 2, rx2043_start
    sub rx2043_off, rx2043_pos, 1
    substr rx2043_tgt, rx2043_tgt, rx2043_off
  rx2043_start:
    eq $I10, 1, rx2043_restart
    if_null rx2043_debug, debug_1487
    rx2043_cur."!cursor_debug"("START", "multi_declarator:sym<null>")
  debug_1487:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2044_done
    goto rxscan2044_scan
  rxscan2044_loop:
    (rx2043_pos) = rx2043_cur."from"()
    inc rx2043_pos
    rx2043_cur."!cursor_from"(rx2043_pos)
    ge rx2043_pos, rx2043_eos, rxscan2044_done
  rxscan2044_scan:
    set_addr $I10, rxscan2044_loop
    rx2043_cur."!mark_push"(0, rx2043_pos, $I10)
  rxscan2044_done:
.annotate 'line', 1098
    rx2043_cur."!cursor_pos"(rx2043_pos)
    new $P104, "String"
    assign $P104, ""
    set $P2042, $P104
.annotate 'line', 1099
  # rx subrule "declarator" subtype=capture negate=
    rx2043_cur."!cursor_pos"(rx2043_pos)
    $P10 = rx2043_cur."declarator"()
    unless $P10, rx2043_fail
    rx2043_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("declarator")
    rx2043_pos = $P10."pos"()
.annotate 'line', 1097
  # rx pass
    rx2043_cur."!cursor_pass"(rx2043_pos, "multi_declarator:sym<null>")
    if_null rx2043_debug, debug_1488
    rx2043_cur."!cursor_debug"("PASS", "multi_declarator:sym<null>", " at pos=", rx2043_pos)
  debug_1488:
    .return (rx2043_cur)
  rx2043_restart:
    if_null rx2043_debug, debug_1489
    rx2043_cur."!cursor_debug"("NEXT", "multi_declarator:sym<null>")
  debug_1489:
  rx2043_fail:
    (rx2043_rep, rx2043_pos, $I10, $P10) = rx2043_cur."!mark_fail"(0)
    lt rx2043_pos, -1, rx2043_done
    eq rx2043_pos, -1, rx2043_fail
    jump $I10
  rx2043_done:
    rx2043_cur."!cursor_fail"()
    if_null rx2043_debug, debug_1490
    rx2043_cur."!cursor_debug"("FAIL", "multi_declarator:sym<null>")
  debug_1490:
    .return (rx2043_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__multi_declarator:sym<null>"  :subid("214_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1097
    $P105 = self."!PREFIX__!subrule"("declarator", "")
    new $P106, "ResizablePMCArray"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "signature"  :subid("215_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1102
    .const 'Sub' $P2051 = "583_1334921493.34" 
    capture_lex $P2051
    .local string rx2047_tgt
    .local int rx2047_pos
    .local int rx2047_off
    .local int rx2047_eos
    .local int rx2047_rep
    .local pmc rx2047_cur
    .local pmc rx2047_debug
    (rx2047_cur, rx2047_pos, rx2047_tgt, $I10) = self."!cursor_start"()
    rx2047_cur."!cursor_caparray"("invocant", "parameter")
    .lex unicode:"$\x{a2}", rx2047_cur
    .local pmc match
    .lex "$/", match
    length rx2047_eos, rx2047_tgt
    gt rx2047_pos, rx2047_eos, rx2047_done
    set rx2047_off, 0
    lt rx2047_pos, 2, rx2047_start
    sub rx2047_off, rx2047_pos, 1
    substr rx2047_tgt, rx2047_tgt, rx2047_off
  rx2047_start:
    eq $I10, 1, rx2047_restart
    if_null rx2047_debug, debug_1491
    rx2047_cur."!cursor_debug"("START", "signature")
  debug_1491:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2048_done
    goto rxscan2048_scan
  rxscan2048_loop:
    (rx2047_pos) = rx2047_cur."from"()
    inc rx2047_pos
    rx2047_cur."!cursor_from"(rx2047_pos)
    ge rx2047_pos, rx2047_eos, rxscan2048_done
  rxscan2048_scan:
    set_addr $I10, rxscan2048_loop
    rx2047_cur."!mark_push"(0, rx2047_pos, $I10)
  rxscan2048_done:
.annotate 'line', 1103
  # rx rxquantr2049 ** 0..1
    set_addr $I10, rxquantr2049_done
    rx2047_cur."!mark_push"(0, rx2047_pos, $I10)
  rxquantr2049_loop:
    rx2047_cur."!cursor_pos"(rx2047_pos)
    find_lex $P103, unicode:"$\x{a2}"
    $P104 = $P103."MATCH"()
    store_lex "$/", $P104
    .const 'Sub' $P2051 = "583_1334921493.34" 
    capture_lex $P2051
    $P105 = $P2051()
    unless $P105, rx2047_fail
  # rx subrule "ws" subtype=method negate=
    rx2047_cur."!cursor_pos"(rx2047_pos)
    $P10 = rx2047_cur."ws"()
    unless $P10, rx2047_fail
    rx2047_pos = $P10."pos"()
  # rx subrule "parameter" subtype=capture negate=
    rx2047_cur."!cursor_pos"(rx2047_pos)
    $P10 = rx2047_cur."parameter"()
    unless $P10, rx2047_fail
    rx2047_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("invocant")
    rx2047_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2047_cur."!cursor_pos"(rx2047_pos)
    $P10 = rx2047_cur."ws"()
    unless $P10, rx2047_fail
    rx2047_pos = $P10."pos"()
  # rx literal  ":"
    add $I11, rx2047_pos, 1
    gt $I11, rx2047_eos, rx2047_fail
    sub $I11, rx2047_pos, rx2047_off
    ord $I11, rx2047_tgt, $I11
    ne $I11, 58, rx2047_fail
    add rx2047_pos, 1
    set_addr $I10, rxquantr2049_done
    (rx2047_rep) = rx2047_cur."!mark_commit"($I10)
  rxquantr2049_done:
.annotate 'line', 1104
  # rx rxquantr2052 ** 0..1
    set_addr $I10, rxquantr2052_done
    rx2047_cur."!mark_push"(0, rx2047_pos, $I10)
  rxquantr2052_loop:
  # rx rxquantr2053 ** 1..*
    set_addr $I10, rxquantr2053_done
    rx2047_cur."!mark_push"(0, -1, $I10)
  rxquantr2053_loop:
  # rx subrule "ws" subtype=method negate=
    rx2047_cur."!cursor_pos"(rx2047_pos)
    $P10 = rx2047_cur."ws"()
    unless $P10, rx2047_fail
    rx2047_pos = $P10."pos"()
  # rx subrule "parameter" subtype=capture negate=
    rx2047_cur."!cursor_pos"(rx2047_pos)
    $P10 = rx2047_cur."parameter"()
    unless $P10, rx2047_fail
    rx2047_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("parameter")
    rx2047_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2047_cur."!cursor_pos"(rx2047_pos)
    $P10 = rx2047_cur."ws"()
    unless $P10, rx2047_fail
    rx2047_pos = $P10."pos"()
    set_addr $I10, rxquantr2053_done
    (rx2047_rep) = rx2047_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr2053_done
    rx2047_cur."!mark_push"(rx2047_rep, rx2047_pos, $I10)
  # rx literal  ","
    add $I11, rx2047_pos, 1
    gt $I11, rx2047_eos, rx2047_fail
    sub $I11, rx2047_pos, rx2047_off
    ord $I11, rx2047_tgt, $I11
    ne $I11, 44, rx2047_fail
    add rx2047_pos, 1
    goto rxquantr2053_loop
  rxquantr2053_done:
    set_addr $I10, rxquantr2052_done
    (rx2047_rep) = rx2047_cur."!mark_commit"($I10)
  rxquantr2052_done:
.annotate 'line', 1102
  # rx pass
    rx2047_cur."!cursor_pass"(rx2047_pos, "signature")
    if_null rx2047_debug, debug_1494
    rx2047_cur."!cursor_debug"("PASS", "signature", " at pos=", rx2047_pos)
  debug_1494:
    .return (rx2047_cur)
  rx2047_restart:
    if_null rx2047_debug, debug_1495
    rx2047_cur."!cursor_debug"("NEXT", "signature")
  debug_1495:
  rx2047_fail:
    (rx2047_rep, rx2047_pos, $I10, $P10) = rx2047_cur."!mark_fail"(0)
    lt rx2047_pos, -1, rx2047_done
    eq rx2047_pos, -1, rx2047_fail
    jump $I10
  rx2047_done:
    rx2047_cur."!cursor_fail"()
    if_null rx2047_debug, debug_1496
    rx2047_cur."!cursor_debug"("FAIL", "signature")
  debug_1496:
    .return (rx2047_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2050"  :anon :subid("583_1334921493.34") :outer("215_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1103
    find_dynamic_lex $P107, "$*INVOCANT_OK"
    unless_null $P107, vivify_1492
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$INVOCANT_OK"]
    unless_null $P107, vivify_1493
    die "Contextual $*INVOCANT_OK not found"
  vivify_1493:
  vivify_1492:
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__signature"  :subid("216_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1102
    new $P106, "ResizablePMCArray"
    push $P106, ""
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "parameter"  :subid("217_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1107
    .local string rx2056_tgt
    .local int rx2056_pos
    .local int rx2056_off
    .local int rx2056_eos
    .local int rx2056_rep
    .local pmc rx2056_cur
    .local pmc rx2056_debug
    (rx2056_cur, rx2056_pos, rx2056_tgt, $I10) = self."!cursor_start"()
    rx2056_cur."!cursor_caparray"("typename", "definedness", "default_value")
    .lex unicode:"$\x{a2}", rx2056_cur
    .local pmc match
    .lex "$/", match
    length rx2056_eos, rx2056_tgt
    gt rx2056_pos, rx2056_eos, rx2056_done
    set rx2056_off, 0
    lt rx2056_pos, 2, rx2056_start
    sub rx2056_off, rx2056_pos, 1
    substr rx2056_tgt, rx2056_tgt, rx2056_off
  rx2056_start:
    eq $I10, 1, rx2056_restart
    if_null rx2056_debug, debug_1497
    rx2056_cur."!cursor_debug"("START", "parameter")
  debug_1497:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2057_done
    goto rxscan2057_scan
  rxscan2057_loop:
    (rx2056_pos) = rx2056_cur."from"()
    inc rx2056_pos
    rx2056_cur."!cursor_from"(rx2056_pos)
    ge rx2056_pos, rx2056_eos, rxscan2057_done
  rxscan2057_scan:
    set_addr $I10, rxscan2057_loop
    rx2056_cur."!mark_push"(0, rx2056_pos, $I10)
  rxscan2057_done:
.annotate 'line', 1108
  # rx rxquantr2058 ** 0..*
    set_addr $I10, rxquantr2058_done
    rx2056_cur."!mark_push"(0, rx2056_pos, $I10)
  rxquantr2058_loop:
  # rx subrule "typename" subtype=capture negate=
    rx2056_cur."!cursor_pos"(rx2056_pos)
    $P10 = rx2056_cur."typename"()
    unless $P10, rx2056_fail
    rx2056_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("typename")
    rx2056_pos = $P10."pos"()
  # rx rxquantr2059 ** 0..1
    set_addr $I10, rxquantr2059_done
    rx2056_cur."!mark_push"(0, rx2056_pos, $I10)
  rxquantr2059_loop:
  # rx literal  ":"
    add $I11, rx2056_pos, 1
    gt $I11, rx2056_eos, rx2056_fail
    sub $I11, rx2056_pos, rx2056_off
    ord $I11, rx2056_tgt, $I11
    ne $I11, 58, rx2056_fail
    add rx2056_pos, 1
  # rx subcapture "definedness"
    set_addr $I10, rxcap_2060_fail
    rx2056_cur."!mark_push"(0, rx2056_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx2056_pos, rx2056_eos, rx2056_fail
    sub $I10, rx2056_pos, rx2056_off
    substr $S10, rx2056_tgt, $I10, 1
    index $I11, "_DU", $S10
    lt $I11, 0, rx2056_fail
    inc rx2056_pos
    set_addr $I10, rxcap_2060_fail
    ($I12, $I11) = rx2056_cur."!mark_peek"($I10)
    rx2056_cur."!cursor_pos"($I11)
    ($P10) = rx2056_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2056_pos, "")
    rx2056_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("definedness")
    goto rxcap_2060_done
  rxcap_2060_fail:
    goto rx2056_fail
  rxcap_2060_done:
    set_addr $I10, rxquantr2059_done
    (rx2056_rep) = rx2056_cur."!mark_commit"($I10)
  rxquantr2059_done:
  # rx subrule "ws" subtype=method negate=
    rx2056_cur."!cursor_pos"(rx2056_pos)
    $P10 = rx2056_cur."ws"()
    unless $P10, rx2056_fail
    rx2056_pos = $P10."pos"()
    set_addr $I10, rxquantr2058_done
    (rx2056_rep) = rx2056_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr2058_done
    rx2056_cur."!mark_push"(rx2056_rep, rx2056_pos, $I10)
    goto rxquantr2058_loop
  rxquantr2058_done:
  alt2061_0:
.annotate 'line', 1109
    set_addr $I10, alt2061_1
    rx2056_cur."!mark_push"(0, rx2056_pos, $I10)
.annotate 'line', 1110
  # rx subcapture "quant"
    set_addr $I10, rxcap_2062_fail
    rx2056_cur."!mark_push"(0, rx2056_pos, $I10)
  # rx literal  "*"
    add $I11, rx2056_pos, 1
    gt $I11, rx2056_eos, rx2056_fail
    sub $I11, rx2056_pos, rx2056_off
    ord $I11, rx2056_tgt, $I11
    ne $I11, 42, rx2056_fail
    add rx2056_pos, 1
    set_addr $I10, rxcap_2062_fail
    ($I12, $I11) = rx2056_cur."!mark_peek"($I10)
    rx2056_cur."!cursor_pos"($I11)
    ($P10) = rx2056_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2056_pos, "")
    rx2056_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quant")
    goto rxcap_2062_done
  rxcap_2062_fail:
    goto rx2056_fail
  rxcap_2062_done:
  # rx subrule "param_var" subtype=capture negate=
    rx2056_cur."!cursor_pos"(rx2056_pos)
    $P10 = rx2056_cur."param_var"()
    unless $P10, rx2056_fail
    rx2056_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("param_var")
    rx2056_pos = $P10."pos"()
    goto alt2061_end
  alt2061_1:
  alt2063_0:
.annotate 'line', 1111
    set_addr $I10, alt2063_1
    rx2056_cur."!mark_push"(0, rx2056_pos, $I10)
  # rx subrule "param_var" subtype=capture negate=
    rx2056_cur."!cursor_pos"(rx2056_pos)
    $P10 = rx2056_cur."param_var"()
    unless $P10, rx2056_fail
    rx2056_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("param_var")
    rx2056_pos = $P10."pos"()
    goto alt2063_end
  alt2063_1:
  # rx subrule "named_param" subtype=capture negate=
    rx2056_cur."!cursor_pos"(rx2056_pos)
    $P10 = rx2056_cur."named_param"()
    unless $P10, rx2056_fail
    rx2056_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("named_param")
    rx2056_pos = $P10."pos"()
  alt2063_end:
  # rx subcapture "quant"
    set_addr $I10, rxcap_2065_fail
    rx2056_cur."!mark_push"(0, rx2056_pos, $I10)
  alt2064_0:
    set_addr $I10, alt2064_1
    rx2056_cur."!mark_push"(0, rx2056_pos, $I10)
  # rx literal  "?"
    add $I11, rx2056_pos, 1
    gt $I11, rx2056_eos, rx2056_fail
    sub $I11, rx2056_pos, rx2056_off
    ord $I11, rx2056_tgt, $I11
    ne $I11, 63, rx2056_fail
    add rx2056_pos, 1
    goto alt2064_end
  alt2064_1:
    set_addr $I10, alt2064_2
    rx2056_cur."!mark_push"(0, rx2056_pos, $I10)
  # rx literal  "!"
    add $I11, rx2056_pos, 1
    gt $I11, rx2056_eos, rx2056_fail
    sub $I11, rx2056_pos, rx2056_off
    ord $I11, rx2056_tgt, $I11
    ne $I11, 33, rx2056_fail
    add rx2056_pos, 1
    goto alt2064_end
  alt2064_2:
  alt2064_end:
    set_addr $I10, rxcap_2065_fail
    ($I12, $I11) = rx2056_cur."!mark_peek"($I10)
    rx2056_cur."!cursor_pos"($I11)
    ($P10) = rx2056_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2056_pos, "")
    rx2056_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quant")
    goto rxcap_2065_done
  rxcap_2065_fail:
    goto rx2056_fail
  rxcap_2065_done:
  alt2061_end:
.annotate 'line', 1113
  # rx rxquantr2066 ** 0..1
    set_addr $I10, rxquantr2066_done
    rx2056_cur."!mark_push"(0, rx2056_pos, $I10)
  rxquantr2066_loop:
  # rx subrule "default_value" subtype=capture negate=
    rx2056_cur."!cursor_pos"(rx2056_pos)
    $P10 = rx2056_cur."default_value"()
    unless $P10, rx2056_fail
    goto rxsubrule2067_pass
  rxsubrule2067_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2056_fail
  rxsubrule2067_pass:
    set_addr $I10, rxsubrule2067_back
    rx2056_cur."!mark_push"(0, rx2056_pos, $I10, $P10)
    $P10."!cursor_names"("default_value")
    rx2056_pos = $P10."pos"()
    set_addr $I10, rxquantr2066_done
    (rx2056_rep) = rx2056_cur."!mark_commit"($I10)
  rxquantr2066_done:
.annotate 'line', 1107
  # rx pass
    rx2056_cur."!cursor_pass"(rx2056_pos, "parameter")
    if_null rx2056_debug, debug_1498
    rx2056_cur."!cursor_debug"("PASS", "parameter", " at pos=", rx2056_pos)
  debug_1498:
    .return (rx2056_cur)
  rx2056_restart:
    if_null rx2056_debug, debug_1499
    rx2056_cur."!cursor_debug"("NEXT", "parameter")
  debug_1499:
  rx2056_fail:
    (rx2056_rep, rx2056_pos, $I10, $P10) = rx2056_cur."!mark_fail"(0)
    lt rx2056_pos, -1, rx2056_done
    eq rx2056_pos, -1, rx2056_fail
    jump $I10
  rx2056_done:
    rx2056_cur."!cursor_fail"()
    if_null rx2056_debug, debug_1500
    rx2056_cur."!cursor_debug"("FAIL", "parameter")
  debug_1500:
    .return (rx2056_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__parameter"  :subid("218_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1107
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "param_var"  :subid("219_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1116
    .local string rx2070_tgt
    .local int rx2070_pos
    .local int rx2070_off
    .local int rx2070_eos
    .local int rx2070_rep
    .local pmc rx2070_cur
    .local pmc rx2070_debug
    (rx2070_cur, rx2070_pos, rx2070_tgt, $I10) = self."!cursor_start"()
    rx2070_cur."!cursor_caparray"("twigil")
    .lex unicode:"$\x{a2}", rx2070_cur
    .local pmc match
    .lex "$/", match
    length rx2070_eos, rx2070_tgt
    gt rx2070_pos, rx2070_eos, rx2070_done
    set rx2070_off, 0
    lt rx2070_pos, 2, rx2070_start
    sub rx2070_off, rx2070_pos, 1
    substr rx2070_tgt, rx2070_tgt, rx2070_off
  rx2070_start:
    eq $I10, 1, rx2070_restart
    if_null rx2070_debug, debug_1501
    rx2070_cur."!cursor_debug"("START", "param_var")
  debug_1501:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2071_done
    goto rxscan2071_scan
  rxscan2071_loop:
    (rx2070_pos) = rx2070_cur."from"()
    inc rx2070_pos
    rx2070_cur."!cursor_from"(rx2070_pos)
    ge rx2070_pos, rx2070_eos, rxscan2071_done
  rxscan2071_scan:
    set_addr $I10, rxscan2071_loop
    rx2070_cur."!mark_push"(0, rx2070_pos, $I10)
  rxscan2071_done:
.annotate 'line', 1117
  # rx subrule "sigil" subtype=capture negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."sigil"()
    unless $P10, rx2070_fail
    rx2070_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    rx2070_pos = $P10."pos"()
  # rx rxquantr2072 ** 0..1
    set_addr $I10, rxquantr2072_done
    rx2070_cur."!mark_push"(0, rx2070_pos, $I10)
  rxquantr2072_loop:
  # rx subrule "twigil" subtype=capture negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."twigil"()
    unless $P10, rx2070_fail
    goto rxsubrule2073_pass
  rxsubrule2073_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2070_fail
  rxsubrule2073_pass:
    set_addr $I10, rxsubrule2073_back
    rx2070_cur."!mark_push"(0, rx2070_pos, $I10, $P10)
    $P10."!cursor_names"("twigil")
    rx2070_pos = $P10."pos"()
    set_addr $I10, rxquantr2072_done
    (rx2070_rep) = rx2070_cur."!mark_commit"($I10)
  rxquantr2072_done:
  alt2074_0:
.annotate 'line', 1118
    set_addr $I10, alt2074_1
    rx2070_cur."!mark_push"(0, rx2070_pos, $I10)
  # rx subrule "ident" subtype=capture negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."ident"()
    unless $P10, rx2070_fail
    rx2070_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx2070_pos = $P10."pos"()
    goto alt2074_end
  alt2074_1:
  # rx subcapture "name"
    set_addr $I10, rxcap_2075_fail
    rx2070_cur."!mark_push"(0, rx2070_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx2070_pos, rx2070_eos, rx2070_fail
    sub $I10, rx2070_pos, rx2070_off
    substr $S10, rx2070_tgt, $I10, 1
    index $I11, "/!", $S10
    lt $I11, 0, rx2070_fail
    inc rx2070_pos
    set_addr $I10, rxcap_2075_fail
    ($I12, $I11) = rx2070_cur."!mark_peek"($I10)
    rx2070_cur."!cursor_pos"($I11)
    ($P10) = rx2070_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2070_pos, "")
    rx2070_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    goto rxcap_2075_done
  rxcap_2075_fail:
    goto rx2070_fail
  rxcap_2075_done:
  alt2074_end:
.annotate 'line', 1116
  # rx pass
    rx2070_cur."!cursor_pass"(rx2070_pos, "param_var")
    if_null rx2070_debug, debug_1502
    rx2070_cur."!cursor_debug"("PASS", "param_var", " at pos=", rx2070_pos)
  debug_1502:
    .return (rx2070_cur)
  rx2070_restart:
    if_null rx2070_debug, debug_1503
    rx2070_cur."!cursor_debug"("NEXT", "param_var")
  debug_1503:
  rx2070_fail:
    (rx2070_rep, rx2070_pos, $I10, $P10) = rx2070_cur."!mark_fail"(0)
    lt rx2070_pos, -1, rx2070_done
    eq rx2070_pos, -1, rx2070_fail
    jump $I10
  rx2070_done:
    rx2070_cur."!cursor_fail"()
    if_null rx2070_debug, debug_1504
    rx2070_cur."!cursor_debug"("FAIL", "param_var")
  debug_1504:
    .return (rx2070_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__param_var"  :subid("220_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1116
    $P103 = self."!PREFIX__!subrule"("sigil", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "named_param"  :subid("221_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1121
    .local string rx2078_tgt
    .local int rx2078_pos
    .local int rx2078_off
    .local int rx2078_eos
    .local int rx2078_rep
    .local pmc rx2078_cur
    .local pmc rx2078_debug
    (rx2078_cur, rx2078_pos, rx2078_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2078_cur
    .local pmc match
    .lex "$/", match
    length rx2078_eos, rx2078_tgt
    gt rx2078_pos, rx2078_eos, rx2078_done
    set rx2078_off, 0
    lt rx2078_pos, 2, rx2078_start
    sub rx2078_off, rx2078_pos, 1
    substr rx2078_tgt, rx2078_tgt, rx2078_off
  rx2078_start:
    eq $I10, 1, rx2078_restart
    if_null rx2078_debug, debug_1505
    rx2078_cur."!cursor_debug"("START", "named_param")
  debug_1505:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2079_done
    goto rxscan2079_scan
  rxscan2079_loop:
    (rx2078_pos) = rx2078_cur."from"()
    inc rx2078_pos
    rx2078_cur."!cursor_from"(rx2078_pos)
    ge rx2078_pos, rx2078_eos, rxscan2079_done
  rxscan2079_scan:
    set_addr $I10, rxscan2079_loop
    rx2078_cur."!mark_push"(0, rx2078_pos, $I10)
  rxscan2079_done:
.annotate 'line', 1122
  # rx literal  ":"
    add $I11, rx2078_pos, 1
    gt $I11, rx2078_eos, rx2078_fail
    sub $I11, rx2078_pos, rx2078_off
    ord $I11, rx2078_tgt, $I11
    ne $I11, 58, rx2078_fail
    add rx2078_pos, 1
  # rx subrule "param_var" subtype=capture negate=
    rx2078_cur."!cursor_pos"(rx2078_pos)
    $P10 = rx2078_cur."param_var"()
    unless $P10, rx2078_fail
    rx2078_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("param_var")
    rx2078_pos = $P10."pos"()
.annotate 'line', 1121
  # rx pass
    rx2078_cur."!cursor_pass"(rx2078_pos, "named_param")
    if_null rx2078_debug, debug_1506
    rx2078_cur."!cursor_debug"("PASS", "named_param", " at pos=", rx2078_pos)
  debug_1506:
    .return (rx2078_cur)
  rx2078_restart:
    if_null rx2078_debug, debug_1507
    rx2078_cur."!cursor_debug"("NEXT", "named_param")
  debug_1507:
  rx2078_fail:
    (rx2078_rep, rx2078_pos, $I10, $P10) = rx2078_cur."!mark_fail"(0)
    lt rx2078_pos, -1, rx2078_done
    eq rx2078_pos, -1, rx2078_fail
    jump $I10
  rx2078_done:
    rx2078_cur."!cursor_fail"()
    if_null rx2078_debug, debug_1508
    rx2078_cur."!cursor_debug"("FAIL", "named_param")
  debug_1508:
    .return (rx2078_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__named_param"  :subid("222_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1121
    $P103 = self."!PREFIX__!subrule"("param_var", ":")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "default_value"  :subid("223_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1125
    .local string rx2082_tgt
    .local int rx2082_pos
    .local int rx2082_off
    .local int rx2082_eos
    .local int rx2082_rep
    .local pmc rx2082_cur
    .local pmc rx2082_debug
    (rx2082_cur, rx2082_pos, rx2082_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2082_cur
    .local pmc match
    .lex "$/", match
    length rx2082_eos, rx2082_tgt
    gt rx2082_pos, rx2082_eos, rx2082_done
    set rx2082_off, 0
    lt rx2082_pos, 2, rx2082_start
    sub rx2082_off, rx2082_pos, 1
    substr rx2082_tgt, rx2082_tgt, rx2082_off
  rx2082_start:
    eq $I10, 1, rx2082_restart
    if_null rx2082_debug, debug_1509
    rx2082_cur."!cursor_debug"("START", "default_value")
  debug_1509:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2083_done
    goto rxscan2083_scan
  rxscan2083_loop:
    (rx2082_pos) = rx2082_cur."from"()
    inc rx2082_pos
    rx2082_cur."!cursor_from"(rx2082_pos)
    ge rx2082_pos, rx2082_eos, rxscan2083_done
  rxscan2083_scan:
    set_addr $I10, rxscan2083_loop
    rx2082_cur."!mark_push"(0, rx2082_pos, $I10)
  rxscan2083_done:
  # rx subrule "ws" subtype=method negate=
    rx2082_cur."!cursor_pos"(rx2082_pos)
    $P10 = rx2082_cur."ws"()
    unless $P10, rx2082_fail
    rx2082_pos = $P10."pos"()
  # rx literal  "="
    add $I11, rx2082_pos, 1
    gt $I11, rx2082_eos, rx2082_fail
    sub $I11, rx2082_pos, rx2082_off
    ord $I11, rx2082_tgt, $I11
    ne $I11, 61, rx2082_fail
    add rx2082_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2082_cur."!cursor_pos"(rx2082_pos)
    $P10 = rx2082_cur."ws"()
    unless $P10, rx2082_fail
    rx2082_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx2082_cur."!cursor_pos"(rx2082_pos)
    $P10 = rx2082_cur."EXPR"("i=")
    unless $P10, rx2082_fail
    rx2082_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx2082_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2082_cur."!cursor_pos"(rx2082_pos)
    $P10 = rx2082_cur."ws"()
    unless $P10, rx2082_fail
    rx2082_pos = $P10."pos"()
  # rx pass
    rx2082_cur."!cursor_pass"(rx2082_pos, "default_value")
    if_null rx2082_debug, debug_1510
    rx2082_cur."!cursor_debug"("PASS", "default_value", " at pos=", rx2082_pos)
  debug_1510:
    .return (rx2082_cur)
  rx2082_restart:
    if_null rx2082_debug, debug_1511
    rx2082_cur."!cursor_debug"("NEXT", "default_value")
  debug_1511:
  rx2082_fail:
    (rx2082_rep, rx2082_pos, $I10, $P10) = rx2082_cur."!mark_fail"(0)
    lt rx2082_pos, -1, rx2082_done
    eq rx2082_pos, -1, rx2082_fail
    jump $I10
  rx2082_done:
    rx2082_cur."!cursor_fail"()
    if_null rx2082_debug, debug_1512
    rx2082_cur."!cursor_debug"("FAIL", "default_value")
  debug_1512:
    .return (rx2082_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__default_value"  :subid("224_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1125
    $P106 = self."!PREFIX__!subrule"("ws", "")
    new $P107, "ResizablePMCArray"
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "trait"  :subid("225_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1127
    .local string rx2086_tgt
    .local int rx2086_pos
    .local int rx2086_off
    .local int rx2086_eos
    .local int rx2086_rep
    .local pmc rx2086_cur
    .local pmc rx2086_debug
    (rx2086_cur, rx2086_pos, rx2086_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2086_cur
    .local pmc match
    .lex "$/", match
    length rx2086_eos, rx2086_tgt
    gt rx2086_pos, rx2086_eos, rx2086_done
    set rx2086_off, 0
    lt rx2086_pos, 2, rx2086_start
    sub rx2086_off, rx2086_pos, 1
    substr rx2086_tgt, rx2086_tgt, rx2086_off
  rx2086_start:
    eq $I10, 1, rx2086_restart
    if_null rx2086_debug, debug_1513
    rx2086_cur."!cursor_debug"("START", "trait")
  debug_1513:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2087_done
    goto rxscan2087_scan
  rxscan2087_loop:
    (rx2086_pos) = rx2086_cur."from"()
    inc rx2086_pos
    rx2086_cur."!cursor_from"(rx2086_pos)
    ge rx2086_pos, rx2086_eos, rxscan2087_done
  rxscan2087_scan:
    set_addr $I10, rxscan2087_loop
    rx2086_cur."!mark_push"(0, rx2086_pos, $I10)
  rxscan2087_done:
  # rx subrule "ws" subtype=method negate=
    rx2086_cur."!cursor_pos"(rx2086_pos)
    $P10 = rx2086_cur."ws"()
    unless $P10, rx2086_fail
    rx2086_pos = $P10."pos"()
  # rx subrule "trait_mod" subtype=capture negate=
    rx2086_cur."!cursor_pos"(rx2086_pos)
    $P10 = rx2086_cur."trait_mod"()
    unless $P10, rx2086_fail
    rx2086_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("trait_mod")
    rx2086_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2086_cur."!cursor_pos"(rx2086_pos)
    $P10 = rx2086_cur."ws"()
    unless $P10, rx2086_fail
    rx2086_pos = $P10."pos"()
  # rx pass
    rx2086_cur."!cursor_pass"(rx2086_pos, "trait")
    if_null rx2086_debug, debug_1514
    rx2086_cur."!cursor_debug"("PASS", "trait", " at pos=", rx2086_pos)
  debug_1514:
    .return (rx2086_cur)
  rx2086_restart:
    if_null rx2086_debug, debug_1515
    rx2086_cur."!cursor_debug"("NEXT", "trait")
  debug_1515:
  rx2086_fail:
    (rx2086_rep, rx2086_pos, $I10, $P10) = rx2086_cur."!mark_fail"(0)
    lt rx2086_pos, -1, rx2086_done
    eq rx2086_pos, -1, rx2086_fail
    jump $I10
  rx2086_done:
    rx2086_cur."!cursor_fail"()
    if_null rx2086_debug, debug_1516
    rx2086_cur."!cursor_debug"("FAIL", "trait")
  debug_1516:
    .return (rx2086_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__trait"  :subid("226_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1127
    $P105 = self."!PREFIX__!subrule"("ws", "")
    new $P106, "ResizablePMCArray"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "trait_mod"  :subid("227_1334921493.34")
    .param pmc param_2090
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1129
    .lex "self", param_2090
    $P103 = param_2090."!protoregex"("trait_mod")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__trait_mod"  :subid("228_1334921493.34")
    .param pmc param_2092
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1129
    .lex "self", param_2092
    $P104 = param_2092."!PREFIX__!protoregex"("trait_mod")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "trait_mod:sym<is>"  :subid("229_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1130
    .local string rx2094_tgt
    .local int rx2094_pos
    .local int rx2094_off
    .local int rx2094_eos
    .local int rx2094_rep
    .local pmc rx2094_cur
    .local pmc rx2094_debug
    (rx2094_cur, rx2094_pos, rx2094_tgt, $I10) = self."!cursor_start"()
    rx2094_cur."!cursor_caparray"("circumfix")
    .lex unicode:"$\x{a2}", rx2094_cur
    .local pmc match
    .lex "$/", match
    length rx2094_eos, rx2094_tgt
    gt rx2094_pos, rx2094_eos, rx2094_done
    set rx2094_off, 0
    lt rx2094_pos, 2, rx2094_start
    sub rx2094_off, rx2094_pos, 1
    substr rx2094_tgt, rx2094_tgt, rx2094_off
  rx2094_start:
    eq $I10, 1, rx2094_restart
    if_null rx2094_debug, debug_1517
    rx2094_cur."!cursor_debug"("START", "trait_mod:sym<is>")
  debug_1517:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2095_done
    goto rxscan2095_scan
  rxscan2095_loop:
    (rx2094_pos) = rx2094_cur."from"()
    inc rx2094_pos
    rx2094_cur."!cursor_from"(rx2094_pos)
    ge rx2094_pos, rx2094_eos, rxscan2095_done
  rxscan2095_scan:
    set_addr $I10, rxscan2095_loop
    rx2094_cur."!mark_push"(0, rx2094_pos, $I10)
  rxscan2095_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2096_fail
    rx2094_cur."!mark_push"(0, rx2094_pos, $I10)
  # rx literal  "is"
    add $I11, rx2094_pos, 2
    gt $I11, rx2094_eos, rx2094_fail
    sub $I11, rx2094_pos, rx2094_off
    substr $S10, rx2094_tgt, $I11, 2
    ne $S10, "is", rx2094_fail
    add rx2094_pos, 2
    set_addr $I10, rxcap_2096_fail
    ($I12, $I11) = rx2094_cur."!mark_peek"($I10)
    rx2094_cur."!cursor_pos"($I11)
    ($P10) = rx2094_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2094_pos, "")
    rx2094_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2096_done
  rxcap_2096_fail:
    goto rx2094_fail
  rxcap_2096_done:
  # rx subrule "ws" subtype=method negate=
    rx2094_cur."!cursor_pos"(rx2094_pos)
    $P10 = rx2094_cur."ws"()
    unless $P10, rx2094_fail
    rx2094_pos = $P10."pos"()
  # rx subrule "deflongname" subtype=capture negate=
    rx2094_cur."!cursor_pos"(rx2094_pos)
    $P10 = rx2094_cur."deflongname"()
    unless $P10, rx2094_fail
    rx2094_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("longname")
    rx2094_pos = $P10."pos"()
  # rx rxquantr2097 ** 0..1
    set_addr $I10, rxquantr2097_done
    rx2094_cur."!mark_push"(0, rx2094_pos, $I10)
  rxquantr2097_loop:
  # rx subrule "circumfix" subtype=capture negate=
    rx2094_cur."!cursor_pos"(rx2094_pos)
    $P10 = rx2094_cur."circumfix"()
    unless $P10, rx2094_fail
    goto rxsubrule2098_pass
  rxsubrule2098_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2094_fail
  rxsubrule2098_pass:
    set_addr $I10, rxsubrule2098_back
    rx2094_cur."!mark_push"(0, rx2094_pos, $I10, $P10)
    $P10."!cursor_names"("circumfix")
    rx2094_pos = $P10."pos"()
    set_addr $I10, rxquantr2097_done
    (rx2094_rep) = rx2094_cur."!mark_commit"($I10)
  rxquantr2097_done:
  # rx subrule "ws" subtype=method negate=
    rx2094_cur."!cursor_pos"(rx2094_pos)
    $P10 = rx2094_cur."ws"()
    unless $P10, rx2094_fail
    rx2094_pos = $P10."pos"()
  # rx pass
    rx2094_cur."!cursor_pass"(rx2094_pos, "trait_mod:sym<is>")
    if_null rx2094_debug, debug_1518
    rx2094_cur."!cursor_debug"("PASS", "trait_mod:sym<is>", " at pos=", rx2094_pos)
  debug_1518:
    .return (rx2094_cur)
  rx2094_restart:
    if_null rx2094_debug, debug_1519
    rx2094_cur."!cursor_debug"("NEXT", "trait_mod:sym<is>")
  debug_1519:
  rx2094_fail:
    (rx2094_rep, rx2094_pos, $I10, $P10) = rx2094_cur."!mark_fail"(0)
    lt rx2094_pos, -1, rx2094_done
    eq rx2094_pos, -1, rx2094_fail
    jump $I10
  rx2094_done:
    rx2094_cur."!cursor_fail"()
    if_null rx2094_debug, debug_1520
    rx2094_cur."!cursor_debug"("FAIL", "trait_mod:sym<is>")
  debug_1520:
    .return (rx2094_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__trait_mod:sym<is>"  :subid("230_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1130
    $P105 = self."!PREFIX__!subrule"("ws", "is")
    new $P106, "ResizablePMCArray"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "regex_declarator"  :subid("231_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1132
    .local string rx2101_tgt
    .local int rx2101_pos
    .local int rx2101_off
    .local int rx2101_eos
    .local int rx2101_rep
    .local pmc rx2101_cur
    .local pmc rx2101_debug
    (rx2101_cur, rx2101_pos, rx2101_tgt, $I10) = self."!cursor_start"()
    rx2101_cur."!cursor_caparray"("signature")
    .lex unicode:"$\x{a2}", rx2101_cur
    .local pmc match
    .lex "$/", match
    length rx2101_eos, rx2101_tgt
    gt rx2101_pos, rx2101_eos, rx2101_done
    set rx2101_off, 0
    lt rx2101_pos, 2, rx2101_start
    sub rx2101_off, rx2101_pos, 1
    substr rx2101_tgt, rx2101_tgt, rx2101_off
  rx2101_start:
    eq $I10, 1, rx2101_restart
    if_null rx2101_debug, debug_1521
    rx2101_cur."!cursor_debug"("START", "regex_declarator")
  debug_1521:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2102_done
    goto rxscan2102_scan
  rxscan2102_loop:
    (rx2101_pos) = rx2101_cur."from"()
    inc rx2101_pos
    rx2101_cur."!cursor_from"(rx2101_pos)
    ge rx2101_pos, rx2101_eos, rxscan2102_done
  rxscan2102_scan:
    set_addr $I10, rxscan2102_loop
    rx2101_cur."!mark_push"(0, rx2101_pos, $I10)
  rxscan2102_done:
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
  alt2103_0:
.annotate 'line', 1133
    set_addr $I10, alt2103_1
    rx2101_cur."!mark_push"(0, rx2101_pos, $I10)
.annotate 'line', 1134
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
  # rx subcapture "proto"
    set_addr $I10, rxcap_2104_fail
    rx2101_cur."!mark_push"(0, rx2101_pos, $I10)
  # rx literal  "proto"
    add $I11, rx2101_pos, 5
    gt $I11, rx2101_eos, rx2101_fail
    sub $I11, rx2101_pos, rx2101_off
    substr $S10, rx2101_tgt, $I11, 5
    ne $S10, "proto", rx2101_fail
    add rx2101_pos, 5
    set_addr $I10, rxcap_2104_fail
    ($I12, $I11) = rx2101_cur."!mark_peek"($I10)
    rx2101_cur."!cursor_pos"($I11)
    ($P10) = rx2101_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2101_pos, "")
    rx2101_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("proto")
    goto rxcap_2104_done
  rxcap_2104_fail:
    goto rx2101_fail
  rxcap_2104_done:
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
  alt2105_0:
    set_addr $I10, alt2105_1
    rx2101_cur."!mark_push"(0, rx2101_pos, $I10)
  # rx literal  "regex"
    add $I11, rx2101_pos, 5
    gt $I11, rx2101_eos, rx2101_fail
    sub $I11, rx2101_pos, rx2101_off
    substr $S10, rx2101_tgt, $I11, 5
    ne $S10, "regex", rx2101_fail
    add rx2101_pos, 5
    goto alt2105_end
  alt2105_1:
    set_addr $I10, alt2105_2
    rx2101_cur."!mark_push"(0, rx2101_pos, $I10)
  # rx literal  "token"
    add $I11, rx2101_pos, 5
    gt $I11, rx2101_eos, rx2101_fail
    sub $I11, rx2101_pos, rx2101_off
    substr $S10, rx2101_tgt, $I11, 5
    ne $S10, "token", rx2101_fail
    add rx2101_pos, 5
    goto alt2105_end
  alt2105_2:
  # rx literal  "rule"
    add $I11, rx2101_pos, 4
    gt $I11, rx2101_eos, rx2101_fail
    sub $I11, rx2101_pos, rx2101_off
    substr $S10, rx2101_tgt, $I11, 4
    ne $S10, "rule", rx2101_fail
    add rx2101_pos, 4
  alt2105_end:
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
.annotate 'line', 1135
  # rx subrule "deflongname" subtype=capture negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."deflongname"()
    unless $P10, rx2101_fail
    rx2101_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("deflongname")
    rx2101_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
  alt2106_0:
.annotate 'line', 1136
    set_addr $I10, alt2106_1
    rx2101_cur."!mark_push"(0, rx2101_pos, $I10)
.annotate 'line', 1137
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
  # rx literal  "{"
    add $I11, rx2101_pos, 1
    gt $I11, rx2101_eos, rx2101_fail
    sub $I11, rx2101_pos, rx2101_off
    ord $I11, rx2101_tgt, $I11
    ne $I11, 123, rx2101_fail
    add rx2101_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
  # rx literal  "<...>"
    add $I11, rx2101_pos, 5
    gt $I11, rx2101_eos, rx2101_fail
    sub $I11, rx2101_pos, rx2101_off
    substr $S10, rx2101_tgt, $I11, 5
    ne $S10, "<...>", rx2101_fail
    add rx2101_pos, 5
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx2101_pos, 1
    gt $I11, rx2101_eos, rx2101_fail
    sub $I11, rx2101_pos, rx2101_off
    ord $I11, rx2101_tgt, $I11
    ne $I11, 125, rx2101_fail
    add rx2101_pos, 1
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ENDSTMT"()
    unless $P10, rx2101_fail
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
    goto alt2106_end
  alt2106_1:
    set_addr $I10, alt2106_2
    rx2101_cur."!mark_push"(0, rx2101_pos, $I10)
.annotate 'line', 1138
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
  # rx literal  "{"
    add $I11, rx2101_pos, 1
    gt $I11, rx2101_eos, rx2101_fail
    sub $I11, rx2101_pos, rx2101_off
    ord $I11, rx2101_tgt, $I11
    ne $I11, 123, rx2101_fail
    add rx2101_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
  # rx literal  "<*>"
    add $I11, rx2101_pos, 3
    gt $I11, rx2101_eos, rx2101_fail
    sub $I11, rx2101_pos, rx2101_off
    substr $S10, rx2101_tgt, $I11, 3
    ne $S10, "<*>", rx2101_fail
    add rx2101_pos, 3
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx2101_pos, 1
    gt $I11, rx2101_eos, rx2101_fail
    sub $I11, rx2101_pos, rx2101_off
    ord $I11, rx2101_tgt, $I11
    ne $I11, 125, rx2101_fail
    add rx2101_pos, 1
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ENDSTMT"()
    unless $P10, rx2101_fail
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
    goto alt2106_end
  alt2106_2:
.annotate 'line', 1139
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."panic"("Proto regex body must be <*> (or <...>, which is deprecated)")
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
  alt2106_end:
.annotate 'line', 1140
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
.annotate 'line', 1134
    goto alt2103_end
  alt2103_1:
.annotate 'line', 1141
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
  # rx subcapture "sym"
    set_addr $I10, rxcap_2108_fail
    rx2101_cur."!mark_push"(0, rx2101_pos, $I10)
  alt2107_0:
    set_addr $I10, alt2107_1
    rx2101_cur."!mark_push"(0, rx2101_pos, $I10)
  # rx literal  "regex"
    add $I11, rx2101_pos, 5
    gt $I11, rx2101_eos, rx2101_fail
    sub $I11, rx2101_pos, rx2101_off
    substr $S10, rx2101_tgt, $I11, 5
    ne $S10, "regex", rx2101_fail
    add rx2101_pos, 5
    goto alt2107_end
  alt2107_1:
    set_addr $I10, alt2107_2
    rx2101_cur."!mark_push"(0, rx2101_pos, $I10)
  # rx literal  "token"
    add $I11, rx2101_pos, 5
    gt $I11, rx2101_eos, rx2101_fail
    sub $I11, rx2101_pos, rx2101_off
    substr $S10, rx2101_tgt, $I11, 5
    ne $S10, "token", rx2101_fail
    add rx2101_pos, 5
    goto alt2107_end
  alt2107_2:
  # rx literal  "rule"
    add $I11, rx2101_pos, 4
    gt $I11, rx2101_eos, rx2101_fail
    sub $I11, rx2101_pos, rx2101_off
    substr $S10, rx2101_tgt, $I11, 4
    ne $S10, "rule", rx2101_fail
    add rx2101_pos, 4
  alt2107_end:
    set_addr $I10, rxcap_2108_fail
    ($I12, $I11) = rx2101_cur."!mark_peek"($I10)
    rx2101_cur."!cursor_pos"($I11)
    ($P10) = rx2101_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2101_pos, "")
    rx2101_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2108_done
  rxcap_2108_fail:
    goto rx2101_fail
  rxcap_2108_done:
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
.annotate 'line', 1142
  # rx subrule "deflongname" subtype=capture negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."deflongname"()
    unless $P10, rx2101_fail
    rx2101_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("deflongname")
    rx2101_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
.annotate 'line', 1143
  # rx subrule "newpad" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."newpad"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
.annotate 'line', 1144
  # rx rxquantr2109 ** 0..1
    set_addr $I10, rxquantr2109_done
    rx2101_cur."!mark_push"(0, rx2101_pos, $I10)
  rxquantr2109_loop:
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
  # rx literal  "("
    add $I11, rx2101_pos, 1
    gt $I11, rx2101_eos, rx2101_fail
    sub $I11, rx2101_pos, rx2101_off
    ord $I11, rx2101_tgt, $I11
    ne $I11, 40, rx2101_fail
    add rx2101_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
  # rx subrule "signature" subtype=capture negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."signature"()
    unless $P10, rx2101_fail
    rx2101_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("signature")
    rx2101_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx2101_pos, 1
    gt $I11, rx2101_eos, rx2101_fail
    sub $I11, rx2101_pos, rx2101_off
    ord $I11, rx2101_tgt, $I11
    ne $I11, 41, rx2101_fail
    add rx2101_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
    set_addr $I10, rxquantr2109_done
    (rx2101_rep) = rx2101_cur."!mark_commit"($I10)
  rxquantr2109_done:
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
.annotate 'line', 1145
  # rx reduce name="regex_declarator" key="open"
    rx2101_cur."!cursor_pos"(rx2101_pos)
    rx2101_cur."!reduce"("regex_declarator", "open")
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
.annotate 'line', 1146
  # rx literal  "{"
    add $I11, rx2101_pos, 1
    gt $I11, rx2101_eos, rx2101_fail
    sub $I11, rx2101_pos, rx2101_off
    ord $I11, rx2101_tgt, $I11
    ne $I11, 123, rx2101_fail
    add rx2101_pos, 1
  # rx subrule "LANG" subtype=capture negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."LANG"("Regex", "nibbler")
    unless $P10, rx2101_fail
    rx2101_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("p6regex")
    rx2101_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx2101_pos, 1
    gt $I11, rx2101_eos, rx2101_fail
    sub $I11, rx2101_pos, rx2101_off
    ord $I11, rx2101_tgt, $I11
    ne $I11, 125, rx2101_fail
    add rx2101_pos, 1
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ENDSTMT"()
    unless $P10, rx2101_fail
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
  alt2103_end:
.annotate 'line', 1147
  # rx subrule "ws" subtype=method negate=
    rx2101_cur."!cursor_pos"(rx2101_pos)
    $P10 = rx2101_cur."ws"()
    unless $P10, rx2101_fail
    rx2101_pos = $P10."pos"()
.annotate 'line', 1132
  # rx pass
    rx2101_cur."!cursor_pass"(rx2101_pos, "regex_declarator")
    if_null rx2101_debug, debug_1522
    rx2101_cur."!cursor_debug"("PASS", "regex_declarator", " at pos=", rx2101_pos)
  debug_1522:
    .return (rx2101_cur)
  rx2101_restart:
    if_null rx2101_debug, debug_1523
    rx2101_cur."!cursor_debug"("NEXT", "regex_declarator")
  debug_1523:
  rx2101_fail:
    (rx2101_rep, rx2101_pos, $I10, $P10) = rx2101_cur."!mark_fail"(0)
    lt rx2101_pos, -1, rx2101_done
    eq rx2101_pos, -1, rx2101_fail
    jump $I10
  rx2101_done:
    rx2101_cur."!cursor_fail"()
    if_null rx2101_debug, debug_1524
    rx2101_cur."!cursor_debug"("FAIL", "regex_declarator")
  debug_1524:
    .return (rx2101_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__regex_declarator"  :subid("232_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1132
    $P131 = self."!PREFIX__!subrule"("ws", "")
    new $P132, "ResizablePMCArray"
    push $P132, $P131
    .return ($P132)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "dotty"  :subid("233_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1150
    .local string rx2112_tgt
    .local int rx2112_pos
    .local int rx2112_off
    .local int rx2112_eos
    .local int rx2112_rep
    .local pmc rx2112_cur
    .local pmc rx2112_debug
    (rx2112_cur, rx2112_pos, rx2112_tgt, $I10) = self."!cursor_start"()
    rx2112_cur."!cursor_caparray"("args")
    .lex unicode:"$\x{a2}", rx2112_cur
    .local pmc match
    .lex "$/", match
    length rx2112_eos, rx2112_tgt
    gt rx2112_pos, rx2112_eos, rx2112_done
    set rx2112_off, 0
    lt rx2112_pos, 2, rx2112_start
    sub rx2112_off, rx2112_pos, 1
    substr rx2112_tgt, rx2112_tgt, rx2112_off
  rx2112_start:
    eq $I10, 1, rx2112_restart
    if_null rx2112_debug, debug_1525
    rx2112_cur."!cursor_debug"("START", "dotty")
  debug_1525:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2113_done
    goto rxscan2113_scan
  rxscan2113_loop:
    (rx2112_pos) = rx2112_cur."from"()
    inc rx2112_pos
    rx2112_cur."!cursor_from"(rx2112_pos)
    ge rx2112_pos, rx2112_eos, rxscan2113_done
  rxscan2113_scan:
    set_addr $I10, rxscan2113_loop
    rx2112_cur."!mark_push"(0, rx2112_pos, $I10)
  rxscan2113_done:
.annotate 'line', 1151
  # rx literal  "."
    add $I11, rx2112_pos, 1
    gt $I11, rx2112_eos, rx2112_fail
    sub $I11, rx2112_pos, rx2112_off
    ord $I11, rx2112_tgt, $I11
    ne $I11, 46, rx2112_fail
    add rx2112_pos, 1
  alt2114_0:
.annotate 'line', 1152
    set_addr $I10, alt2114_1
    rx2112_cur."!mark_push"(0, rx2112_pos, $I10)
  # rx subrule "deflongname" subtype=capture negate=
    rx2112_cur."!cursor_pos"(rx2112_pos)
    $P10 = rx2112_cur."deflongname"()
    unless $P10, rx2112_fail
    rx2112_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("longname=deflongname")
    rx2112_pos = $P10."pos"()
    goto alt2114_end
  alt2114_1:
.annotate 'line', 1153
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2112_pos, rx2112_off
    substr $S10, rx2112_tgt, $I10, 1
    index $I11, "'\"", $S10
    lt $I11, 0, rx2112_fail
  # rx subrule "quote" subtype=capture negate=
    rx2112_cur."!cursor_pos"(rx2112_pos)
    $P10 = rx2112_cur."quote"()
    unless $P10, rx2112_fail
    rx2112_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote")
    rx2112_pos = $P10."pos"()
  alt2115_0:
.annotate 'line', 1154
    set_addr $I10, alt2115_1
    rx2112_cur."!mark_push"(0, rx2112_pos, $I10)
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2112_pos, rx2112_off
    substr $S10, rx2112_tgt, $I10, 1
    index $I11, "(", $S10
    lt $I11, 0, rx2112_fail
    goto alt2115_end
  alt2115_1:
  # rx subrule "panic" subtype=method negate=
    rx2112_cur."!cursor_pos"(rx2112_pos)
    $P10 = rx2112_cur."panic"("Quoted method name requires parenthesized arguments")
    unless $P10, rx2112_fail
    rx2112_pos = $P10."pos"()
  alt2115_end:
  alt2114_end:
.annotate 'line', 1160
  # rx rxquantr2116 ** 0..1
    set_addr $I10, rxquantr2116_done
    rx2112_cur."!mark_push"(0, rx2112_pos, $I10)
  rxquantr2116_loop:
  alt2117_0:
.annotate 'line', 1157
    set_addr $I10, alt2117_1
    rx2112_cur."!mark_push"(0, rx2112_pos, $I10)
.annotate 'line', 1158
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2112_pos, rx2112_off
    substr $S10, rx2112_tgt, $I10, 1
    index $I11, "(", $S10
    lt $I11, 0, rx2112_fail
  # rx subrule "args" subtype=capture negate=
    rx2112_cur."!cursor_pos"(rx2112_pos)
    $P10 = rx2112_cur."args"()
    unless $P10, rx2112_fail
    rx2112_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("args")
    rx2112_pos = $P10."pos"()
    goto alt2117_end
  alt2117_1:
.annotate 'line', 1159
  # rx literal  ":"
    add $I11, rx2112_pos, 1
    gt $I11, rx2112_eos, rx2112_fail
    sub $I11, rx2112_pos, rx2112_off
    ord $I11, rx2112_tgt, $I11
    ne $I11, 58, rx2112_fail
    add rx2112_pos, 1
  # rx charclass s
    ge rx2112_pos, rx2112_eos, rx2112_fail
    sub $I10, rx2112_pos, rx2112_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx2112_tgt, $I10
    unless $I11, rx2112_fail
    inc rx2112_pos
  # rx subrule "arglist" subtype=capture negate=
    rx2112_cur."!cursor_pos"(rx2112_pos)
    $P10 = rx2112_cur."arglist"()
    unless $P10, rx2112_fail
    rx2112_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("args")
    rx2112_pos = $P10."pos"()
  alt2117_end:
.annotate 'line', 1160
    set_addr $I10, rxquantr2116_done
    (rx2112_rep) = rx2112_cur."!mark_commit"($I10)
  rxquantr2116_done:
.annotate 'line', 1150
  # rx pass
    rx2112_cur."!cursor_pass"(rx2112_pos, "dotty")
    if_null rx2112_debug, debug_1526
    rx2112_cur."!cursor_debug"("PASS", "dotty", " at pos=", rx2112_pos)
  debug_1526:
    .return (rx2112_cur)
  rx2112_restart:
    if_null rx2112_debug, debug_1527
    rx2112_cur."!cursor_debug"("NEXT", "dotty")
  debug_1527:
  rx2112_fail:
    (rx2112_rep, rx2112_pos, $I10, $P10) = rx2112_cur."!mark_fail"(0)
    lt rx2112_pos, -1, rx2112_done
    eq rx2112_pos, -1, rx2112_fail
    jump $I10
  rx2112_done:
    rx2112_cur."!cursor_fail"()
    if_null rx2112_debug, debug_1528
    rx2112_cur."!cursor_debug"("FAIL", "dotty")
  debug_1528:
    .return (rx2112_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__dotty"  :subid("234_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1150
    $P103 = self."!PREFIX__!subrule"("deflongname", ".")
    new $P104, "ResizablePMCArray"
    push $P104, "'"
    push $P104, "\""
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term"  :subid("235_1334921493.34")
    .param pmc param_2120
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1164
    .lex "self", param_2120
    $P103 = param_2120."!protoregex"("term")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term"  :subid("236_1334921493.34")
    .param pmc param_2122
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1164
    .lex "self", param_2122
    $P104 = param_2122."!PREFIX__!protoregex"("term")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<self>"  :subid("237_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1166
    .local string rx2124_tgt
    .local int rx2124_pos
    .local int rx2124_off
    .local int rx2124_eos
    .local int rx2124_rep
    .local pmc rx2124_cur
    .local pmc rx2124_debug
    (rx2124_cur, rx2124_pos, rx2124_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2124_cur
    .local pmc match
    .lex "$/", match
    length rx2124_eos, rx2124_tgt
    gt rx2124_pos, rx2124_eos, rx2124_done
    set rx2124_off, 0
    lt rx2124_pos, 2, rx2124_start
    sub rx2124_off, rx2124_pos, 1
    substr rx2124_tgt, rx2124_tgt, rx2124_off
  rx2124_start:
    eq $I10, 1, rx2124_restart
    if_null rx2124_debug, debug_1529
    rx2124_cur."!cursor_debug"("START", "term:sym<self>")
  debug_1529:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2125_done
    goto rxscan2125_scan
  rxscan2125_loop:
    (rx2124_pos) = rx2124_cur."from"()
    inc rx2124_pos
    rx2124_cur."!cursor_from"(rx2124_pos)
    ge rx2124_pos, rx2124_eos, rxscan2125_done
  rxscan2125_scan:
    set_addr $I10, rxscan2125_loop
    rx2124_cur."!mark_push"(0, rx2124_pos, $I10)
  rxscan2125_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2126_fail
    rx2124_cur."!mark_push"(0, rx2124_pos, $I10)
  # rx literal  "self"
    add $I11, rx2124_pos, 4
    gt $I11, rx2124_eos, rx2124_fail
    sub $I11, rx2124_pos, rx2124_off
    substr $S10, rx2124_tgt, $I11, 4
    ne $S10, "self", rx2124_fail
    add rx2124_pos, 4
    set_addr $I10, rxcap_2126_fail
    ($I12, $I11) = rx2124_cur."!mark_peek"($I10)
    rx2124_cur."!cursor_pos"($I11)
    ($P10) = rx2124_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2124_pos, "")
    rx2124_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2126_done
  rxcap_2126_fail:
    goto rx2124_fail
  rxcap_2126_done:
  # rxanchor rwb
    le rx2124_pos, 0, rx2124_fail
    sub $I10, rx2124_pos, rx2124_off
    is_cclass $I11, .CCLASS_WORD, rx2124_tgt, $I10
    if $I11, rx2124_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx2124_tgt, $I10
    unless $I11, rx2124_fail
  # rx pass
    rx2124_cur."!cursor_pass"(rx2124_pos, "term:sym<self>")
    if_null rx2124_debug, debug_1530
    rx2124_cur."!cursor_debug"("PASS", "term:sym<self>", " at pos=", rx2124_pos)
  debug_1530:
    .return (rx2124_cur)
  rx2124_restart:
    if_null rx2124_debug, debug_1531
    rx2124_cur."!cursor_debug"("NEXT", "term:sym<self>")
  debug_1531:
  rx2124_fail:
    (rx2124_rep, rx2124_pos, $I10, $P10) = rx2124_cur."!mark_fail"(0)
    lt rx2124_pos, -1, rx2124_done
    eq rx2124_pos, -1, rx2124_fail
    jump $I10
  rx2124_done:
    rx2124_cur."!cursor_fail"()
    if_null rx2124_debug, debug_1532
    rx2124_cur."!cursor_debug"("FAIL", "term:sym<self>")
  debug_1532:
    .return (rx2124_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<self>"  :subid("238_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1166
    new $P103, "ResizablePMCArray"
    push $P103, "self"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<identifier>"  :subid("239_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1168
    .local string rx2129_tgt
    .local int rx2129_pos
    .local int rx2129_off
    .local int rx2129_eos
    .local int rx2129_rep
    .local pmc rx2129_cur
    .local pmc rx2129_debug
    (rx2129_cur, rx2129_pos, rx2129_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2129_cur
    .local pmc match
    .lex "$/", match
    length rx2129_eos, rx2129_tgt
    gt rx2129_pos, rx2129_eos, rx2129_done
    set rx2129_off, 0
    lt rx2129_pos, 2, rx2129_start
    sub rx2129_off, rx2129_pos, 1
    substr rx2129_tgt, rx2129_tgt, rx2129_off
  rx2129_start:
    eq $I10, 1, rx2129_restart
    if_null rx2129_debug, debug_1533
    rx2129_cur."!cursor_debug"("START", "term:sym<identifier>")
  debug_1533:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2130_done
    goto rxscan2130_scan
  rxscan2130_loop:
    (rx2129_pos) = rx2129_cur."from"()
    inc rx2129_pos
    rx2129_cur."!cursor_from"(rx2129_pos)
    ge rx2129_pos, rx2129_eos, rxscan2130_done
  rxscan2130_scan:
    set_addr $I10, rxscan2130_loop
    rx2129_cur."!mark_push"(0, rx2129_pos, $I10)
  rxscan2130_done:
.annotate 'line', 1169
  # rx subrule "deflongname" subtype=capture negate=
    rx2129_cur."!cursor_pos"(rx2129_pos)
    $P10 = rx2129_cur."deflongname"()
    unless $P10, rx2129_fail
    rx2129_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("deflongname")
    rx2129_pos = $P10."pos"()
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2129_pos, rx2129_off
    substr $S10, rx2129_tgt, $I10, 1
    index $I11, "(", $S10
    lt $I11, 0, rx2129_fail
  # rx subrule "args" subtype=capture negate=
    rx2129_cur."!cursor_pos"(rx2129_pos)
    $P10 = rx2129_cur."args"()
    unless $P10, rx2129_fail
    rx2129_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("args")
    rx2129_pos = $P10."pos"()
.annotate 'line', 1168
  # rx pass
    rx2129_cur."!cursor_pass"(rx2129_pos, "term:sym<identifier>")
    if_null rx2129_debug, debug_1534
    rx2129_cur."!cursor_debug"("PASS", "term:sym<identifier>", " at pos=", rx2129_pos)
  debug_1534:
    .return (rx2129_cur)
  rx2129_restart:
    if_null rx2129_debug, debug_1535
    rx2129_cur."!cursor_debug"("NEXT", "term:sym<identifier>")
  debug_1535:
  rx2129_fail:
    (rx2129_rep, rx2129_pos, $I10, $P10) = rx2129_cur."!mark_fail"(0)
    lt rx2129_pos, -1, rx2129_done
    eq rx2129_pos, -1, rx2129_fail
    jump $I10
  rx2129_done:
    rx2129_cur."!cursor_fail"()
    if_null rx2129_debug, debug_1536
    rx2129_cur."!cursor_debug"("FAIL", "term:sym<identifier>")
  debug_1536:
    .return (rx2129_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<identifier>"  :subid("240_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1168
    $P103 = self."!PREFIX__!subrule"("deflongname", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<name>"  :subid("241_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1172
    .local string rx2133_tgt
    .local int rx2133_pos
    .local int rx2133_off
    .local int rx2133_eos
    .local int rx2133_rep
    .local pmc rx2133_cur
    .local pmc rx2133_debug
    (rx2133_cur, rx2133_pos, rx2133_tgt, $I10) = self."!cursor_start"()
    rx2133_cur."!cursor_caparray"("args")
    .lex unicode:"$\x{a2}", rx2133_cur
    .local pmc match
    .lex "$/", match
    length rx2133_eos, rx2133_tgt
    gt rx2133_pos, rx2133_eos, rx2133_done
    set rx2133_off, 0
    lt rx2133_pos, 2, rx2133_start
    sub rx2133_off, rx2133_pos, 1
    substr rx2133_tgt, rx2133_tgt, rx2133_off
  rx2133_start:
    eq $I10, 1, rx2133_restart
    if_null rx2133_debug, debug_1537
    rx2133_cur."!cursor_debug"("START", "term:sym<name>")
  debug_1537:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2134_done
    goto rxscan2134_scan
  rxscan2134_loop:
    (rx2133_pos) = rx2133_cur."from"()
    inc rx2133_pos
    rx2133_cur."!cursor_from"(rx2133_pos)
    ge rx2133_pos, rx2133_eos, rxscan2134_done
  rxscan2134_scan:
    set_addr $I10, rxscan2134_loop
    rx2133_cur."!mark_push"(0, rx2133_pos, $I10)
  rxscan2134_done:
.annotate 'line', 1173
  # rx subrule "name" subtype=capture negate=
    rx2133_cur."!cursor_pos"(rx2133_pos)
    $P10 = rx2133_cur."name"()
    unless $P10, rx2133_fail
    rx2133_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx2133_pos = $P10."pos"()
  # rx rxquantr2135 ** 0..1
    set_addr $I10, rxquantr2135_done
    rx2133_cur."!mark_push"(0, rx2133_pos, $I10)
  rxquantr2135_loop:
  # rx subrule "args" subtype=capture negate=
    rx2133_cur."!cursor_pos"(rx2133_pos)
    $P10 = rx2133_cur."args"()
    unless $P10, rx2133_fail
    goto rxsubrule2136_pass
  rxsubrule2136_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2133_fail
  rxsubrule2136_pass:
    set_addr $I10, rxsubrule2136_back
    rx2133_cur."!mark_push"(0, rx2133_pos, $I10, $P10)
    $P10."!cursor_names"("args")
    rx2133_pos = $P10."pos"()
    set_addr $I10, rxquantr2135_done
    (rx2133_rep) = rx2133_cur."!mark_commit"($I10)
  rxquantr2135_done:
.annotate 'line', 1172
  # rx pass
    rx2133_cur."!cursor_pass"(rx2133_pos, "term:sym<name>")
    if_null rx2133_debug, debug_1538
    rx2133_cur."!cursor_debug"("PASS", "term:sym<name>", " at pos=", rx2133_pos)
  debug_1538:
    .return (rx2133_cur)
  rx2133_restart:
    if_null rx2133_debug, debug_1539
    rx2133_cur."!cursor_debug"("NEXT", "term:sym<name>")
  debug_1539:
  rx2133_fail:
    (rx2133_rep, rx2133_pos, $I10, $P10) = rx2133_cur."!mark_fail"(0)
    lt rx2133_pos, -1, rx2133_done
    eq rx2133_pos, -1, rx2133_fail
    jump $I10
  rx2133_done:
    rx2133_cur."!cursor_fail"()
    if_null rx2133_debug, debug_1540
    rx2133_cur."!cursor_debug"("FAIL", "term:sym<name>")
  debug_1540:
    .return (rx2133_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<name>"  :subid("242_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1172
    $P103 = self."!PREFIX__!subrule"("name", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<pir::op>"  :subid("243_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1176
    .local string rx2139_tgt
    .local int rx2139_pos
    .local int rx2139_off
    .local int rx2139_eos
    .local int rx2139_rep
    .local pmc rx2139_cur
    .local pmc rx2139_debug
    (rx2139_cur, rx2139_pos, rx2139_tgt, $I10) = self."!cursor_start"()
    rx2139_cur."!cursor_caparray"("args")
    .lex unicode:"$\x{a2}", rx2139_cur
    .local pmc match
    .lex "$/", match
    length rx2139_eos, rx2139_tgt
    gt rx2139_pos, rx2139_eos, rx2139_done
    set rx2139_off, 0
    lt rx2139_pos, 2, rx2139_start
    sub rx2139_off, rx2139_pos, 1
    substr rx2139_tgt, rx2139_tgt, rx2139_off
  rx2139_start:
    eq $I10, 1, rx2139_restart
    if_null rx2139_debug, debug_1541
    rx2139_cur."!cursor_debug"("START", "term:sym<pir::op>")
  debug_1541:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2140_done
    goto rxscan2140_scan
  rxscan2140_loop:
    (rx2139_pos) = rx2139_cur."from"()
    inc rx2139_pos
    rx2139_cur."!cursor_from"(rx2139_pos)
    ge rx2139_pos, rx2139_eos, rxscan2140_done
  rxscan2140_scan:
    set_addr $I10, rxscan2140_loop
    rx2139_cur."!mark_push"(0, rx2139_pos, $I10)
  rxscan2140_done:
.annotate 'line', 1177
  # rx literal  "pir::"
    add $I11, rx2139_pos, 5
    gt $I11, rx2139_eos, rx2139_fail
    sub $I11, rx2139_pos, rx2139_off
    substr $S10, rx2139_tgt, $I11, 5
    ne $S10, "pir::", rx2139_fail
    add rx2139_pos, 5
  # rx subcapture "op"
    set_addr $I10, rxcap_2141_fail
    rx2139_cur."!mark_push"(0, rx2139_pos, $I10)
  # rx charclass_q w r 1..-1
    sub $I10, rx2139_pos, rx2139_off
    find_not_cclass $I11, .CCLASS_WORD, rx2139_tgt, $I10, rx2139_eos
    add $I12, $I10, 1
    lt $I11, $I12, rx2139_fail
    add rx2139_pos, rx2139_off, $I11
    set_addr $I10, rxcap_2141_fail
    ($I12, $I11) = rx2139_cur."!mark_peek"($I10)
    rx2139_cur."!cursor_pos"($I11)
    ($P10) = rx2139_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2139_pos, "")
    rx2139_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("op")
    goto rxcap_2141_done
  rxcap_2141_fail:
    goto rx2139_fail
  rxcap_2141_done:
  # rx rxquantr2142 ** 0..1
    set_addr $I10, rxquantr2142_done
    rx2139_cur."!mark_push"(0, rx2139_pos, $I10)
  rxquantr2142_loop:
  # rx subrule "args" subtype=capture negate=
    rx2139_cur."!cursor_pos"(rx2139_pos)
    $P10 = rx2139_cur."args"()
    unless $P10, rx2139_fail
    goto rxsubrule2143_pass
  rxsubrule2143_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2139_fail
  rxsubrule2143_pass:
    set_addr $I10, rxsubrule2143_back
    rx2139_cur."!mark_push"(0, rx2139_pos, $I10, $P10)
    $P10."!cursor_names"("args")
    rx2139_pos = $P10."pos"()
    set_addr $I10, rxquantr2142_done
    (rx2139_rep) = rx2139_cur."!mark_commit"($I10)
  rxquantr2142_done:
.annotate 'line', 1176
  # rx pass
    rx2139_cur."!cursor_pass"(rx2139_pos, "term:sym<pir::op>")
    if_null rx2139_debug, debug_1542
    rx2139_cur."!cursor_debug"("PASS", "term:sym<pir::op>", " at pos=", rx2139_pos)
  debug_1542:
    .return (rx2139_cur)
  rx2139_restart:
    if_null rx2139_debug, debug_1543
    rx2139_cur."!cursor_debug"("NEXT", "term:sym<pir::op>")
  debug_1543:
  rx2139_fail:
    (rx2139_rep, rx2139_pos, $I10, $P10) = rx2139_cur."!mark_fail"(0)
    lt rx2139_pos, -1, rx2139_done
    eq rx2139_pos, -1, rx2139_fail
    jump $I10
  rx2139_done:
    rx2139_cur."!cursor_fail"()
    if_null rx2139_debug, debug_1544
    rx2139_cur."!cursor_debug"("FAIL", "term:sym<pir::op>")
  debug_1544:
    .return (rx2139_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<pir::op>"  :subid("244_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1176
    new $P103, "ResizablePMCArray"
    push $P103, "pir::"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<pir::const>"  :subid("245_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1180
    .local string rx2146_tgt
    .local int rx2146_pos
    .local int rx2146_off
    .local int rx2146_eos
    .local int rx2146_rep
    .local pmc rx2146_cur
    .local pmc rx2146_debug
    (rx2146_cur, rx2146_pos, rx2146_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2146_cur
    .local pmc match
    .lex "$/", match
    length rx2146_eos, rx2146_tgt
    gt rx2146_pos, rx2146_eos, rx2146_done
    set rx2146_off, 0
    lt rx2146_pos, 2, rx2146_start
    sub rx2146_off, rx2146_pos, 1
    substr rx2146_tgt, rx2146_tgt, rx2146_off
  rx2146_start:
    eq $I10, 1, rx2146_restart
    if_null rx2146_debug, debug_1545
    rx2146_cur."!cursor_debug"("START", "term:sym<pir::const>")
  debug_1545:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2147_done
    goto rxscan2147_scan
  rxscan2147_loop:
    (rx2146_pos) = rx2146_cur."from"()
    inc rx2146_pos
    rx2146_cur."!cursor_from"(rx2146_pos)
    ge rx2146_pos, rx2146_eos, rxscan2147_done
  rxscan2147_scan:
    set_addr $I10, rxscan2147_loop
    rx2146_cur."!mark_push"(0, rx2146_pos, $I10)
  rxscan2147_done:
.annotate 'line', 1181
  # rx literal  "pir::const::"
    add $I11, rx2146_pos, 12
    gt $I11, rx2146_eos, rx2146_fail
    sub $I11, rx2146_pos, rx2146_off
    substr $S10, rx2146_tgt, $I11, 12
    ne $S10, "pir::const::", rx2146_fail
    add rx2146_pos, 12
  # rx subcapture "const"
    set_addr $I10, rxcap_2148_fail
    rx2146_cur."!mark_push"(0, rx2146_pos, $I10)
  # rx charclass_q w r 1..-1
    sub $I10, rx2146_pos, rx2146_off
    find_not_cclass $I11, .CCLASS_WORD, rx2146_tgt, $I10, rx2146_eos
    add $I12, $I10, 1
    lt $I11, $I12, rx2146_fail
    add rx2146_pos, rx2146_off, $I11
    set_addr $I10, rxcap_2148_fail
    ($I12, $I11) = rx2146_cur."!mark_peek"($I10)
    rx2146_cur."!cursor_pos"($I11)
    ($P10) = rx2146_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2146_pos, "")
    rx2146_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("const")
    goto rxcap_2148_done
  rxcap_2148_fail:
    goto rx2146_fail
  rxcap_2148_done:
.annotate 'line', 1180
  # rx pass
    rx2146_cur."!cursor_pass"(rx2146_pos, "term:sym<pir::const>")
    if_null rx2146_debug, debug_1546
    rx2146_cur."!cursor_debug"("PASS", "term:sym<pir::const>", " at pos=", rx2146_pos)
  debug_1546:
    .return (rx2146_cur)
  rx2146_restart:
    if_null rx2146_debug, debug_1547
    rx2146_cur."!cursor_debug"("NEXT", "term:sym<pir::const>")
  debug_1547:
  rx2146_fail:
    (rx2146_rep, rx2146_pos, $I10, $P10) = rx2146_cur."!mark_fail"(0)
    lt rx2146_pos, -1, rx2146_done
    eq rx2146_pos, -1, rx2146_fail
    jump $I10
  rx2146_done:
    rx2146_cur."!cursor_fail"()
    if_null rx2146_debug, debug_1548
    rx2146_cur."!cursor_debug"("FAIL", "term:sym<pir::const>")
  debug_1548:
    .return (rx2146_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<pir::const>"  :subid("246_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1180
    new $P103, "ResizablePMCArray"
    push $P103, "pir::const::"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<nqp::op>"  :subid("247_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1184
    .local string rx2151_tgt
    .local int rx2151_pos
    .local int rx2151_off
    .local int rx2151_eos
    .local int rx2151_rep
    .local pmc rx2151_cur
    .local pmc rx2151_debug
    (rx2151_cur, rx2151_pos, rx2151_tgt, $I10) = self."!cursor_start"()
    rx2151_cur."!cursor_caparray"("args")
    .lex unicode:"$\x{a2}", rx2151_cur
    .local pmc match
    .lex "$/", match
    length rx2151_eos, rx2151_tgt
    gt rx2151_pos, rx2151_eos, rx2151_done
    set rx2151_off, 0
    lt rx2151_pos, 2, rx2151_start
    sub rx2151_off, rx2151_pos, 1
    substr rx2151_tgt, rx2151_tgt, rx2151_off
  rx2151_start:
    eq $I10, 1, rx2151_restart
    if_null rx2151_debug, debug_1549
    rx2151_cur."!cursor_debug"("START", "term:sym<nqp::op>")
  debug_1549:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2152_done
    goto rxscan2152_scan
  rxscan2152_loop:
    (rx2151_pos) = rx2151_cur."from"()
    inc rx2151_pos
    rx2151_cur."!cursor_from"(rx2151_pos)
    ge rx2151_pos, rx2151_eos, rxscan2152_done
  rxscan2152_scan:
    set_addr $I10, rxscan2152_loop
    rx2151_cur."!mark_push"(0, rx2151_pos, $I10)
  rxscan2152_done:
.annotate 'line', 1185
  # rx literal  "nqp::"
    add $I11, rx2151_pos, 5
    gt $I11, rx2151_eos, rx2151_fail
    sub $I11, rx2151_pos, rx2151_off
    substr $S10, rx2151_tgt, $I11, 5
    ne $S10, "nqp::", rx2151_fail
    add rx2151_pos, 5
  # rx subcapture "op"
    set_addr $I10, rxcap_2153_fail
    rx2151_cur."!mark_push"(0, rx2151_pos, $I10)
  # rx charclass_q w r 1..-1
    sub $I10, rx2151_pos, rx2151_off
    find_not_cclass $I11, .CCLASS_WORD, rx2151_tgt, $I10, rx2151_eos
    add $I12, $I10, 1
    lt $I11, $I12, rx2151_fail
    add rx2151_pos, rx2151_off, $I11
    set_addr $I10, rxcap_2153_fail
    ($I12, $I11) = rx2151_cur."!mark_peek"($I10)
    rx2151_cur."!cursor_pos"($I11)
    ($P10) = rx2151_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2151_pos, "")
    rx2151_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("op")
    goto rxcap_2153_done
  rxcap_2153_fail:
    goto rx2151_fail
  rxcap_2153_done:
  # rx rxquantr2154 ** 0..1
    set_addr $I10, rxquantr2154_done
    rx2151_cur."!mark_push"(0, rx2151_pos, $I10)
  rxquantr2154_loop:
  # rx subrule "args" subtype=capture negate=
    rx2151_cur."!cursor_pos"(rx2151_pos)
    $P10 = rx2151_cur."args"()
    unless $P10, rx2151_fail
    goto rxsubrule2155_pass
  rxsubrule2155_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2151_fail
  rxsubrule2155_pass:
    set_addr $I10, rxsubrule2155_back
    rx2151_cur."!mark_push"(0, rx2151_pos, $I10, $P10)
    $P10."!cursor_names"("args")
    rx2151_pos = $P10."pos"()
    set_addr $I10, rxquantr2154_done
    (rx2151_rep) = rx2151_cur."!mark_commit"($I10)
  rxquantr2154_done:
.annotate 'line', 1184
  # rx pass
    rx2151_cur."!cursor_pass"(rx2151_pos, "term:sym<nqp::op>")
    if_null rx2151_debug, debug_1550
    rx2151_cur."!cursor_debug"("PASS", "term:sym<nqp::op>", " at pos=", rx2151_pos)
  debug_1550:
    .return (rx2151_cur)
  rx2151_restart:
    if_null rx2151_debug, debug_1551
    rx2151_cur."!cursor_debug"("NEXT", "term:sym<nqp::op>")
  debug_1551:
  rx2151_fail:
    (rx2151_rep, rx2151_pos, $I10, $P10) = rx2151_cur."!mark_fail"(0)
    lt rx2151_pos, -1, rx2151_done
    eq rx2151_pos, -1, rx2151_fail
    jump $I10
  rx2151_done:
    rx2151_cur."!cursor_fail"()
    if_null rx2151_debug, debug_1552
    rx2151_cur."!cursor_debug"("FAIL", "term:sym<nqp::op>")
  debug_1552:
    .return (rx2151_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<nqp::op>"  :subid("248_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1184
    new $P103, "ResizablePMCArray"
    push $P103, "nqp::"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<onlystar>"  :subid("249_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1188
    .const 'Sub' $P2162 = "584_1334921493.34" 
    capture_lex $P2162
    .local string rx2158_tgt
    .local int rx2158_pos
    .local int rx2158_off
    .local int rx2158_eos
    .local int rx2158_rep
    .local pmc rx2158_cur
    .local pmc rx2158_debug
    (rx2158_cur, rx2158_pos, rx2158_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2158_cur
    .local pmc match
    .lex "$/", match
    length rx2158_eos, rx2158_tgt
    gt rx2158_pos, rx2158_eos, rx2158_done
    set rx2158_off, 0
    lt rx2158_pos, 2, rx2158_start
    sub rx2158_off, rx2158_pos, 1
    substr rx2158_tgt, rx2158_tgt, rx2158_off
  rx2158_start:
    eq $I10, 1, rx2158_restart
    if_null rx2158_debug, debug_1553
    rx2158_cur."!cursor_debug"("START", "term:sym<onlystar>")
  debug_1553:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2159_done
    goto rxscan2159_scan
  rxscan2159_loop:
    (rx2158_pos) = rx2158_cur."from"()
    inc rx2158_pos
    rx2158_cur."!cursor_from"(rx2158_pos)
    ge rx2158_pos, rx2158_eos, rxscan2159_done
  rxscan2159_scan:
    set_addr $I10, rxscan2159_loop
    rx2158_cur."!mark_push"(0, rx2158_pos, $I10)
  rxscan2159_done:
.annotate 'line', 1189
  # rx literal  "{*}"
    add $I11, rx2158_pos, 3
    gt $I11, rx2158_eos, rx2158_fail
    sub $I11, rx2158_pos, rx2158_off
    substr $S10, rx2158_tgt, $I11, 3
    ne $S10, "{*}", rx2158_fail
    add rx2158_pos, 3
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx2158_cur."!cursor_pos"(rx2158_pos)
    $P10 = rx2158_cur."ENDSTMT"()
    unless $P10, rx2158_fail
  alt2160_0:
.annotate 'line', 1190
    set_addr $I10, alt2160_1
    rx2158_cur."!mark_push"(0, rx2158_pos, $I10)
    rx2158_cur."!cursor_pos"(rx2158_pos)
    find_lex $P103, unicode:"$\x{a2}"
    $P104 = $P103."MATCH"()
    store_lex "$/", $P104
    .const 'Sub' $P2162 = "584_1334921493.34" 
    capture_lex $P2162
    $P105 = $P2162()
    unless $P105, rx2158_fail
    goto alt2160_end
  alt2160_1:
  # rx subrule "panic" subtype=method negate=
    rx2158_cur."!cursor_pos"(rx2158_pos)
    $P10 = rx2158_cur."panic"("{*} may only appear in proto")
    unless $P10, rx2158_fail
    rx2158_pos = $P10."pos"()
  alt2160_end:
.annotate 'line', 1188
  # rx pass
    rx2158_cur."!cursor_pass"(rx2158_pos, "term:sym<onlystar>")
    if_null rx2158_debug, debug_1556
    rx2158_cur."!cursor_debug"("PASS", "term:sym<onlystar>", " at pos=", rx2158_pos)
  debug_1556:
    .return (rx2158_cur)
  rx2158_restart:
    if_null rx2158_debug, debug_1557
    rx2158_cur."!cursor_debug"("NEXT", "term:sym<onlystar>")
  debug_1557:
  rx2158_fail:
    (rx2158_rep, rx2158_pos, $I10, $P10) = rx2158_cur."!mark_fail"(0)
    lt rx2158_pos, -1, rx2158_done
    eq rx2158_pos, -1, rx2158_fail
    jump $I10
  rx2158_done:
    rx2158_cur."!cursor_fail"()
    if_null rx2158_debug, debug_1558
    rx2158_cur."!cursor_debug"("FAIL", "term:sym<onlystar>")
  debug_1558:
    .return (rx2158_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2161"  :anon :subid("584_1334921493.34") :outer("249_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1190
    find_dynamic_lex $P107, "$*MULTINESS"
    unless_null $P107, vivify_1554
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$MULTINESS"]
    unless_null $P107, vivify_1555
    die "Contextual $*MULTINESS not found"
  vivify_1555:
  vivify_1554:
    set $S100, $P107
    iseq $I100, $S100, "proto"
    .return ($I100)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<onlystar>"  :subid("250_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1188
    new $P106, "ResizablePMCArray"
    push $P106, "{*}"
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "args"  :subid("251_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1193
    .local string rx2165_tgt
    .local int rx2165_pos
    .local int rx2165_off
    .local int rx2165_eos
    .local int rx2165_rep
    .local pmc rx2165_cur
    .local pmc rx2165_debug
    (rx2165_cur, rx2165_pos, rx2165_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2165_cur
    .local pmc match
    .lex "$/", match
    length rx2165_eos, rx2165_tgt
    gt rx2165_pos, rx2165_eos, rx2165_done
    set rx2165_off, 0
    lt rx2165_pos, 2, rx2165_start
    sub rx2165_off, rx2165_pos, 1
    substr rx2165_tgt, rx2165_tgt, rx2165_off
  rx2165_start:
    eq $I10, 1, rx2165_restart
    if_null rx2165_debug, debug_1559
    rx2165_cur."!cursor_debug"("START", "args")
  debug_1559:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2166_done
    goto rxscan2166_scan
  rxscan2166_loop:
    (rx2165_pos) = rx2165_cur."from"()
    inc rx2165_pos
    rx2165_cur."!cursor_from"(rx2165_pos)
    ge rx2165_pos, rx2165_eos, rxscan2166_done
  rxscan2166_scan:
    set_addr $I10, rxscan2166_loop
    rx2165_cur."!mark_push"(0, rx2165_pos, $I10)
  rxscan2166_done:
.annotate 'line', 1194
  # rx literal  "("
    add $I11, rx2165_pos, 1
    gt $I11, rx2165_eos, rx2165_fail
    sub $I11, rx2165_pos, rx2165_off
    ord $I11, rx2165_tgt, $I11
    ne $I11, 40, rx2165_fail
    add rx2165_pos, 1
  # rx subrule "arglist" subtype=capture negate=
    rx2165_cur."!cursor_pos"(rx2165_pos)
    $P10 = rx2165_cur."arglist"()
    unless $P10, rx2165_fail
    rx2165_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("arglist")
    rx2165_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx2165_pos, 1
    gt $I11, rx2165_eos, rx2165_fail
    sub $I11, rx2165_pos, rx2165_off
    ord $I11, rx2165_tgt, $I11
    ne $I11, 41, rx2165_fail
    add rx2165_pos, 1
  # rx pass
    rx2165_cur."!cursor_pass"(rx2165_pos, "args")
    if_null rx2165_debug, debug_1560
    rx2165_cur."!cursor_debug"("PASS", "args", " at pos=", rx2165_pos)
  debug_1560:
    .return (rx2165_cur)
  rx2165_restart:
.annotate 'line', 1193
    if_null rx2165_debug, debug_1561
    rx2165_cur."!cursor_debug"("NEXT", "args")
  debug_1561:
  rx2165_fail:
    (rx2165_rep, rx2165_pos, $I10, $P10) = rx2165_cur."!mark_fail"(0)
    lt rx2165_pos, -1, rx2165_done
    eq rx2165_pos, -1, rx2165_fail
    jump $I10
  rx2165_done:
    rx2165_cur."!cursor_fail"()
    if_null rx2165_debug, debug_1562
    rx2165_cur."!cursor_debug"("FAIL", "args")
  debug_1562:
    .return (rx2165_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__args"  :subid("252_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1193
    $P103 = self."!PREFIX__!subrule"("arglist", "(")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "arglist"  :subid("253_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1197
    .local string rx2169_tgt
    .local int rx2169_pos
    .local int rx2169_off
    .local int rx2169_eos
    .local int rx2169_rep
    .local pmc rx2169_cur
    .local pmc rx2169_debug
    (rx2169_cur, rx2169_pos, rx2169_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2169_cur
    .local pmc match
    .lex "$/", match
    length rx2169_eos, rx2169_tgt
    gt rx2169_pos, rx2169_eos, rx2169_done
    set rx2169_off, 0
    lt rx2169_pos, 2, rx2169_start
    sub rx2169_off, rx2169_pos, 1
    substr rx2169_tgt, rx2169_tgt, rx2169_off
  rx2169_start:
    eq $I10, 1, rx2169_restart
    if_null rx2169_debug, debug_1563
    rx2169_cur."!cursor_debug"("START", "arglist")
  debug_1563:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2170_done
    goto rxscan2170_scan
  rxscan2170_loop:
    (rx2169_pos) = rx2169_cur."from"()
    inc rx2169_pos
    rx2169_cur."!cursor_from"(rx2169_pos)
    ge rx2169_pos, rx2169_eos, rxscan2170_done
  rxscan2170_scan:
    set_addr $I10, rxscan2170_loop
    rx2169_cur."!mark_push"(0, rx2169_pos, $I10)
  rxscan2170_done:
.annotate 'line', 1198
  # rx subrule "ws" subtype=method negate=
    rx2169_cur."!cursor_pos"(rx2169_pos)
    $P10 = rx2169_cur."ws"()
    unless $P10, rx2169_fail
    rx2169_pos = $P10."pos"()
  alt2171_0:
.annotate 'line', 1199
    set_addr $I10, alt2171_1
    rx2169_cur."!mark_push"(0, rx2169_pos, $I10)
.annotate 'line', 1200
  # rx subrule "EXPR" subtype=capture negate=
    rx2169_cur."!cursor_pos"(rx2169_pos)
    $P10 = rx2169_cur."EXPR"("f=")
    unless $P10, rx2169_fail
    rx2169_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx2169_pos = $P10."pos"()
    goto alt2171_end
  alt2171_1:
  alt2171_end:
.annotate 'line', 1197
  # rx pass
    rx2169_cur."!cursor_pass"(rx2169_pos, "arglist")
    if_null rx2169_debug, debug_1564
    rx2169_cur."!cursor_debug"("PASS", "arglist", " at pos=", rx2169_pos)
  debug_1564:
    .return (rx2169_cur)
  rx2169_restart:
    if_null rx2169_debug, debug_1565
    rx2169_cur."!cursor_debug"("NEXT", "arglist")
  debug_1565:
  rx2169_fail:
    (rx2169_rep, rx2169_pos, $I10, $P10) = rx2169_cur."!mark_fail"(0)
    lt rx2169_pos, -1, rx2169_done
    eq rx2169_pos, -1, rx2169_fail
    jump $I10
  rx2169_done:
    rx2169_cur."!cursor_fail"()
    if_null rx2169_debug, debug_1566
    rx2169_cur."!cursor_debug"("FAIL", "arglist")
  debug_1566:
    .return (rx2169_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__arglist"  :subid("254_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1197
    $P103 = self."!PREFIX__!subrule"("ws", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<value>"  :subid("255_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1206
    .local string rx2174_tgt
    .local int rx2174_pos
    .local int rx2174_off
    .local int rx2174_eos
    .local int rx2174_rep
    .local pmc rx2174_cur
    .local pmc rx2174_debug
    (rx2174_cur, rx2174_pos, rx2174_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2174_cur
    .local pmc match
    .lex "$/", match
    length rx2174_eos, rx2174_tgt
    gt rx2174_pos, rx2174_eos, rx2174_done
    set rx2174_off, 0
    lt rx2174_pos, 2, rx2174_start
    sub rx2174_off, rx2174_pos, 1
    substr rx2174_tgt, rx2174_tgt, rx2174_off
  rx2174_start:
    eq $I10, 1, rx2174_restart
    if_null rx2174_debug, debug_1567
    rx2174_cur."!cursor_debug"("START", "term:sym<value>")
  debug_1567:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2175_done
    goto rxscan2175_scan
  rxscan2175_loop:
    (rx2174_pos) = rx2174_cur."from"()
    inc rx2174_pos
    rx2174_cur."!cursor_from"(rx2174_pos)
    ge rx2174_pos, rx2174_eos, rxscan2175_done
  rxscan2175_scan:
    set_addr $I10, rxscan2175_loop
    rx2174_cur."!mark_push"(0, rx2174_pos, $I10)
  rxscan2175_done:
  # rx subrule "value" subtype=capture negate=
    rx2174_cur."!cursor_pos"(rx2174_pos)
    $P10 = rx2174_cur."value"()
    unless $P10, rx2174_fail
    rx2174_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("value")
    rx2174_pos = $P10."pos"()
  # rx pass
    rx2174_cur."!cursor_pass"(rx2174_pos, "term:sym<value>")
    if_null rx2174_debug, debug_1568
    rx2174_cur."!cursor_debug"("PASS", "term:sym<value>", " at pos=", rx2174_pos)
  debug_1568:
    .return (rx2174_cur)
  rx2174_restart:
    if_null rx2174_debug, debug_1569
    rx2174_cur."!cursor_debug"("NEXT", "term:sym<value>")
  debug_1569:
  rx2174_fail:
    (rx2174_rep, rx2174_pos, $I10, $P10) = rx2174_cur."!mark_fail"(0)
    lt rx2174_pos, -1, rx2174_done
    eq rx2174_pos, -1, rx2174_fail
    jump $I10
  rx2174_done:
    rx2174_cur."!cursor_fail"()
    if_null rx2174_debug, debug_1570
    rx2174_cur."!cursor_debug"("FAIL", "term:sym<value>")
  debug_1570:
    .return (rx2174_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<value>"  :subid("256_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1206
    $P103 = self."!PREFIX__!subrule"("value", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "value"  :subid("257_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1208
    .local string rx2178_tgt
    .local int rx2178_pos
    .local int rx2178_off
    .local int rx2178_eos
    .local int rx2178_rep
    .local pmc rx2178_cur
    .local pmc rx2178_debug
    (rx2178_cur, rx2178_pos, rx2178_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2178_cur
    .local pmc match
    .lex "$/", match
    length rx2178_eos, rx2178_tgt
    gt rx2178_pos, rx2178_eos, rx2178_done
    set rx2178_off, 0
    lt rx2178_pos, 2, rx2178_start
    sub rx2178_off, rx2178_pos, 1
    substr rx2178_tgt, rx2178_tgt, rx2178_off
  rx2178_start:
    eq $I10, 1, rx2178_restart
    if_null rx2178_debug, debug_1571
    rx2178_cur."!cursor_debug"("START", "value")
  debug_1571:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2179_done
    goto rxscan2179_scan
  rxscan2179_loop:
    (rx2178_pos) = rx2178_cur."from"()
    inc rx2178_pos
    rx2178_cur."!cursor_from"(rx2178_pos)
    ge rx2178_pos, rx2178_eos, rxscan2179_done
  rxscan2179_scan:
    set_addr $I10, rxscan2179_loop
    rx2178_cur."!mark_push"(0, rx2178_pos, $I10)
  rxscan2179_done:
  alt2180_0:
    set_addr $I10, alt2180_1
    rx2178_cur."!mark_push"(0, rx2178_pos, $I10)
.annotate 'line', 1209
  # rx subrule "quote" subtype=capture negate=
    rx2178_cur."!cursor_pos"(rx2178_pos)
    $P10 = rx2178_cur."quote"()
    unless $P10, rx2178_fail
    rx2178_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote")
    rx2178_pos = $P10."pos"()
    goto alt2180_end
  alt2180_1:
.annotate 'line', 1210
  # rx subrule "number" subtype=capture negate=
    rx2178_cur."!cursor_pos"(rx2178_pos)
    $P10 = rx2178_cur."number"()
    unless $P10, rx2178_fail
    rx2178_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("number")
    rx2178_pos = $P10."pos"()
  alt2180_end:
.annotate 'line', 1208
  # rx pass
    rx2178_cur."!cursor_pass"(rx2178_pos, "value")
    if_null rx2178_debug, debug_1572
    rx2178_cur."!cursor_debug"("PASS", "value", " at pos=", rx2178_pos)
  debug_1572:
    .return (rx2178_cur)
  rx2178_restart:
    if_null rx2178_debug, debug_1573
    rx2178_cur."!cursor_debug"("NEXT", "value")
  debug_1573:
  rx2178_fail:
    (rx2178_rep, rx2178_pos, $I10, $P10) = rx2178_cur."!mark_fail"(0)
    lt rx2178_pos, -1, rx2178_done
    eq rx2178_pos, -1, rx2178_fail
    jump $I10
  rx2178_done:
    rx2178_cur."!cursor_fail"()
    if_null rx2178_debug, debug_1574
    rx2178_cur."!cursor_debug"("FAIL", "value")
  debug_1574:
    .return (rx2178_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__value"  :subid("258_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1208
    $P103 = self."!PREFIX__!subrule"("number", "")
    $P104 = self."!PREFIX__!subrule"("quote", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "number"  :subid("259_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1213
    .local string rx2183_tgt
    .local int rx2183_pos
    .local int rx2183_off
    .local int rx2183_eos
    .local int rx2183_rep
    .local pmc rx2183_cur
    .local pmc rx2183_debug
    (rx2183_cur, rx2183_pos, rx2183_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2183_cur
    .local pmc match
    .lex "$/", match
    length rx2183_eos, rx2183_tgt
    gt rx2183_pos, rx2183_eos, rx2183_done
    set rx2183_off, 0
    lt rx2183_pos, 2, rx2183_start
    sub rx2183_off, rx2183_pos, 1
    substr rx2183_tgt, rx2183_tgt, rx2183_off
  rx2183_start:
    eq $I10, 1, rx2183_restart
    if_null rx2183_debug, debug_1575
    rx2183_cur."!cursor_debug"("START", "number")
  debug_1575:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2184_done
    goto rxscan2184_scan
  rxscan2184_loop:
    (rx2183_pos) = rx2183_cur."from"()
    inc rx2183_pos
    rx2183_cur."!cursor_from"(rx2183_pos)
    ge rx2183_pos, rx2183_eos, rxscan2184_done
  rxscan2184_scan:
    set_addr $I10, rxscan2184_loop
    rx2183_cur."!mark_push"(0, rx2183_pos, $I10)
  rxscan2184_done:
.annotate 'line', 1214
  # rx subcapture "sign"
    set_addr $I10, rxcap_2186_fail
    rx2183_cur."!mark_push"(0, rx2183_pos, $I10)
  # rx enumcharlist_q negate=0  r 0..1
    sub $I10, rx2183_pos, rx2183_off
    set rx2183_rep, 0
    sub $I12, rx2183_eos, rx2183_pos
    le $I12, 1, rxenumcharlistq2185_loop
    set $I12, 1
  rxenumcharlistq2185_loop:
    le $I12, 0, rxenumcharlistq2185_done
    substr $S10, rx2183_tgt, $I10, 1
    index $I11, "+-", $S10
    lt $I11, 0, rxenumcharlistq2185_done
    inc rx2183_rep
  rxenumcharlistq2185_done:
    add rx2183_pos, rx2183_pos, rx2183_rep
    set_addr $I10, rxcap_2186_fail
    ($I12, $I11) = rx2183_cur."!mark_peek"($I10)
    rx2183_cur."!cursor_pos"($I11)
    ($P10) = rx2183_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2183_pos, "")
    rx2183_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sign")
    goto rxcap_2186_done
  rxcap_2186_fail:
    goto rx2183_fail
  rxcap_2186_done:
  alt2187_0:
.annotate 'line', 1215
    set_addr $I10, alt2187_1
    rx2183_cur."!mark_push"(0, rx2183_pos, $I10)
  # rx subrule "dec_number" subtype=capture negate=
    rx2183_cur."!cursor_pos"(rx2183_pos)
    $P10 = rx2183_cur."dec_number"()
    unless $P10, rx2183_fail
    rx2183_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("dec_number")
    rx2183_pos = $P10."pos"()
    goto alt2187_end
  alt2187_1:
  # rx subrule "integer" subtype=capture negate=
    rx2183_cur."!cursor_pos"(rx2183_pos)
    $P10 = rx2183_cur."integer"()
    unless $P10, rx2183_fail
    rx2183_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("integer")
    rx2183_pos = $P10."pos"()
  alt2187_end:
.annotate 'line', 1213
  # rx pass
    rx2183_cur."!cursor_pass"(rx2183_pos, "number")
    if_null rx2183_debug, debug_1576
    rx2183_cur."!cursor_debug"("PASS", "number", " at pos=", rx2183_pos)
  debug_1576:
    .return (rx2183_cur)
  rx2183_restart:
    if_null rx2183_debug, debug_1577
    rx2183_cur."!cursor_debug"("NEXT", "number")
  debug_1577:
  rx2183_fail:
    (rx2183_rep, rx2183_pos, $I10, $P10) = rx2183_cur."!mark_fail"(0)
    lt rx2183_pos, -1, rx2183_done
    eq rx2183_pos, -1, rx2183_fail
    jump $I10
  rx2183_done:
    rx2183_cur."!cursor_fail"()
    if_null rx2183_debug, debug_1578
    rx2183_cur."!cursor_debug"("FAIL", "number")
  debug_1578:
    .return (rx2183_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__number"  :subid("260_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1213
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote"  :subid("261_1334921493.34")
    .param pmc param_2190
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1218
    .lex "self", param_2190
    $P103 = param_2190."!protoregex"("quote")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote"  :subid("262_1334921493.34")
    .param pmc param_2192
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1218
    .lex "self", param_2192
    $P104 = param_2192."!PREFIX__!protoregex"("quote")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<apos>"  :subid("263_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1219
    .local string rx2194_tgt
    .local int rx2194_pos
    .local int rx2194_off
    .local int rx2194_eos
    .local int rx2194_rep
    .local pmc rx2194_cur
    .local pmc rx2194_debug
    (rx2194_cur, rx2194_pos, rx2194_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2194_cur
    .local pmc match
    .lex "$/", match
    length rx2194_eos, rx2194_tgt
    gt rx2194_pos, rx2194_eos, rx2194_done
    set rx2194_off, 0
    lt rx2194_pos, 2, rx2194_start
    sub rx2194_off, rx2194_pos, 1
    substr rx2194_tgt, rx2194_tgt, rx2194_off
  rx2194_start:
    eq $I10, 1, rx2194_restart
    if_null rx2194_debug, debug_1579
    rx2194_cur."!cursor_debug"("START", "quote:sym<apos>")
  debug_1579:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2195_done
    goto rxscan2195_scan
  rxscan2195_loop:
    (rx2194_pos) = rx2194_cur."from"()
    inc rx2194_pos
    rx2194_cur."!cursor_from"(rx2194_pos)
    ge rx2194_pos, rx2194_eos, rxscan2195_done
  rxscan2195_scan:
    set_addr $I10, rxscan2195_loop
    rx2194_cur."!mark_push"(0, rx2194_pos, $I10)
  rxscan2195_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2194_pos, rx2194_off
    substr $S10, rx2194_tgt, $I10, 1
    index $I11, "'", $S10
    lt $I11, 0, rx2194_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2194_cur."!cursor_pos"(rx2194_pos)
    $P10 = rx2194_cur."quote_EXPR"(":q")
    unless $P10, rx2194_fail
    rx2194_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2194_pos = $P10."pos"()
  # rx pass
    rx2194_cur."!cursor_pass"(rx2194_pos, "quote:sym<apos>")
    if_null rx2194_debug, debug_1580
    rx2194_cur."!cursor_debug"("PASS", "quote:sym<apos>", " at pos=", rx2194_pos)
  debug_1580:
    .return (rx2194_cur)
  rx2194_restart:
    if_null rx2194_debug, debug_1581
    rx2194_cur."!cursor_debug"("NEXT", "quote:sym<apos>")
  debug_1581:
  rx2194_fail:
    (rx2194_rep, rx2194_pos, $I10, $P10) = rx2194_cur."!mark_fail"(0)
    lt rx2194_pos, -1, rx2194_done
    eq rx2194_pos, -1, rx2194_fail
    jump $I10
  rx2194_done:
    rx2194_cur."!cursor_fail"()
    if_null rx2194_debug, debug_1582
    rx2194_cur."!cursor_debug"("FAIL", "quote:sym<apos>")
  debug_1582:
    .return (rx2194_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<apos>"  :subid("264_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1219
    new $P103, "ResizablePMCArray"
    push $P103, "'"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<dblq>"  :subid("265_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1220
    .local string rx2198_tgt
    .local int rx2198_pos
    .local int rx2198_off
    .local int rx2198_eos
    .local int rx2198_rep
    .local pmc rx2198_cur
    .local pmc rx2198_debug
    (rx2198_cur, rx2198_pos, rx2198_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2198_cur
    .local pmc match
    .lex "$/", match
    length rx2198_eos, rx2198_tgt
    gt rx2198_pos, rx2198_eos, rx2198_done
    set rx2198_off, 0
    lt rx2198_pos, 2, rx2198_start
    sub rx2198_off, rx2198_pos, 1
    substr rx2198_tgt, rx2198_tgt, rx2198_off
  rx2198_start:
    eq $I10, 1, rx2198_restart
    if_null rx2198_debug, debug_1583
    rx2198_cur."!cursor_debug"("START", "quote:sym<dblq>")
  debug_1583:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2199_done
    goto rxscan2199_scan
  rxscan2199_loop:
    (rx2198_pos) = rx2198_cur."from"()
    inc rx2198_pos
    rx2198_cur."!cursor_from"(rx2198_pos)
    ge rx2198_pos, rx2198_eos, rxscan2199_done
  rxscan2199_scan:
    set_addr $I10, rxscan2199_loop
    rx2198_cur."!mark_push"(0, rx2198_pos, $I10)
  rxscan2199_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2198_pos, rx2198_off
    substr $S10, rx2198_tgt, $I10, 1
    index $I11, "\"", $S10
    lt $I11, 0, rx2198_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2198_cur."!cursor_pos"(rx2198_pos)
    $P10 = rx2198_cur."quote_EXPR"(":qq")
    unless $P10, rx2198_fail
    rx2198_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2198_pos = $P10."pos"()
  # rx pass
    rx2198_cur."!cursor_pass"(rx2198_pos, "quote:sym<dblq>")
    if_null rx2198_debug, debug_1584
    rx2198_cur."!cursor_debug"("PASS", "quote:sym<dblq>", " at pos=", rx2198_pos)
  debug_1584:
    .return (rx2198_cur)
  rx2198_restart:
    if_null rx2198_debug, debug_1585
    rx2198_cur."!cursor_debug"("NEXT", "quote:sym<dblq>")
  debug_1585:
  rx2198_fail:
    (rx2198_rep, rx2198_pos, $I10, $P10) = rx2198_cur."!mark_fail"(0)
    lt rx2198_pos, -1, rx2198_done
    eq rx2198_pos, -1, rx2198_fail
    jump $I10
  rx2198_done:
    rx2198_cur."!cursor_fail"()
    if_null rx2198_debug, debug_1586
    rx2198_cur."!cursor_debug"("FAIL", "quote:sym<dblq>")
  debug_1586:
    .return (rx2198_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<dblq>"  :subid("266_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1220
    new $P103, "ResizablePMCArray"
    push $P103, "\""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<q>"  :subid("267_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1221
    .local string rx2202_tgt
    .local int rx2202_pos
    .local int rx2202_off
    .local int rx2202_eos
    .local int rx2202_rep
    .local pmc rx2202_cur
    .local pmc rx2202_debug
    (rx2202_cur, rx2202_pos, rx2202_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2202_cur
    .local pmc match
    .lex "$/", match
    length rx2202_eos, rx2202_tgt
    gt rx2202_pos, rx2202_eos, rx2202_done
    set rx2202_off, 0
    lt rx2202_pos, 2, rx2202_start
    sub rx2202_off, rx2202_pos, 1
    substr rx2202_tgt, rx2202_tgt, rx2202_off
  rx2202_start:
    eq $I10, 1, rx2202_restart
    if_null rx2202_debug, debug_1587
    rx2202_cur."!cursor_debug"("START", "quote:sym<q>")
  debug_1587:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2203_done
    goto rxscan2203_scan
  rxscan2203_loop:
    (rx2202_pos) = rx2202_cur."from"()
    inc rx2202_pos
    rx2202_cur."!cursor_from"(rx2202_pos)
    ge rx2202_pos, rx2202_eos, rxscan2203_done
  rxscan2203_scan:
    set_addr $I10, rxscan2203_loop
    rx2202_cur."!mark_push"(0, rx2202_pos, $I10)
  rxscan2203_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2204_fail
    rx2202_cur."!mark_push"(0, rx2202_pos, $I10)
  # rx literal  "q"
    add $I11, rx2202_pos, 1
    gt $I11, rx2202_eos, rx2202_fail
    sub $I11, rx2202_pos, rx2202_off
    ord $I11, rx2202_tgt, $I11
    ne $I11, 113, rx2202_fail
    add rx2202_pos, 1
    set_addr $I10, rxcap_2204_fail
    ($I12, $I11) = rx2202_cur."!mark_peek"($I10)
    rx2202_cur."!cursor_pos"($I11)
    ($P10) = rx2202_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2202_pos, "")
    rx2202_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2204_done
  rxcap_2204_fail:
    goto rx2202_fail
  rxcap_2204_done:
  # rxanchor rwb
    le rx2202_pos, 0, rx2202_fail
    sub $I10, rx2202_pos, rx2202_off
    is_cclass $I11, .CCLASS_WORD, rx2202_tgt, $I10
    if $I11, rx2202_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx2202_tgt, $I10
    unless $I11, rx2202_fail
  # rx enumcharlist negate=1 zerowidth
    sub $I10, rx2202_pos, rx2202_off
    substr $S10, rx2202_tgt, $I10, 1
    index $I11, "(", $S10
    ge $I11, 0, rx2202_fail
  # rx subrule "ws" subtype=method negate=
    rx2202_cur."!cursor_pos"(rx2202_pos)
    $P10 = rx2202_cur."ws"()
    unless $P10, rx2202_fail
    rx2202_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2202_cur."!cursor_pos"(rx2202_pos)
    $P10 = rx2202_cur."quote_EXPR"(":q")
    unless $P10, rx2202_fail
    rx2202_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2202_pos = $P10."pos"()
  # rx pass
    rx2202_cur."!cursor_pass"(rx2202_pos, "quote:sym<q>")
    if_null rx2202_debug, debug_1588
    rx2202_cur."!cursor_debug"("PASS", "quote:sym<q>", " at pos=", rx2202_pos)
  debug_1588:
    .return (rx2202_cur)
  rx2202_restart:
    if_null rx2202_debug, debug_1589
    rx2202_cur."!cursor_debug"("NEXT", "quote:sym<q>")
  debug_1589:
  rx2202_fail:
    (rx2202_rep, rx2202_pos, $I10, $P10) = rx2202_cur."!mark_fail"(0)
    lt rx2202_pos, -1, rx2202_done
    eq rx2202_pos, -1, rx2202_fail
    jump $I10
  rx2202_done:
    rx2202_cur."!cursor_fail"()
    if_null rx2202_debug, debug_1590
    rx2202_cur."!cursor_debug"("FAIL", "quote:sym<q>")
  debug_1590:
    .return (rx2202_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<q>"  :subid("268_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1221
    $P103 = self."!PREFIX__!subrule"("ws", "q")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<qq>"  :subid("269_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1222
    .local string rx2207_tgt
    .local int rx2207_pos
    .local int rx2207_off
    .local int rx2207_eos
    .local int rx2207_rep
    .local pmc rx2207_cur
    .local pmc rx2207_debug
    (rx2207_cur, rx2207_pos, rx2207_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2207_cur
    .local pmc match
    .lex "$/", match
    length rx2207_eos, rx2207_tgt
    gt rx2207_pos, rx2207_eos, rx2207_done
    set rx2207_off, 0
    lt rx2207_pos, 2, rx2207_start
    sub rx2207_off, rx2207_pos, 1
    substr rx2207_tgt, rx2207_tgt, rx2207_off
  rx2207_start:
    eq $I10, 1, rx2207_restart
    if_null rx2207_debug, debug_1591
    rx2207_cur."!cursor_debug"("START", "quote:sym<qq>")
  debug_1591:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2208_done
    goto rxscan2208_scan
  rxscan2208_loop:
    (rx2207_pos) = rx2207_cur."from"()
    inc rx2207_pos
    rx2207_cur."!cursor_from"(rx2207_pos)
    ge rx2207_pos, rx2207_eos, rxscan2208_done
  rxscan2208_scan:
    set_addr $I10, rxscan2208_loop
    rx2207_cur."!mark_push"(0, rx2207_pos, $I10)
  rxscan2208_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2209_fail
    rx2207_cur."!mark_push"(0, rx2207_pos, $I10)
  # rx literal  "qq"
    add $I11, rx2207_pos, 2
    gt $I11, rx2207_eos, rx2207_fail
    sub $I11, rx2207_pos, rx2207_off
    substr $S10, rx2207_tgt, $I11, 2
    ne $S10, "qq", rx2207_fail
    add rx2207_pos, 2
    set_addr $I10, rxcap_2209_fail
    ($I12, $I11) = rx2207_cur."!mark_peek"($I10)
    rx2207_cur."!cursor_pos"($I11)
    ($P10) = rx2207_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2207_pos, "")
    rx2207_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2209_done
  rxcap_2209_fail:
    goto rx2207_fail
  rxcap_2209_done:
  # rxanchor rwb
    le rx2207_pos, 0, rx2207_fail
    sub $I10, rx2207_pos, rx2207_off
    is_cclass $I11, .CCLASS_WORD, rx2207_tgt, $I10
    if $I11, rx2207_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx2207_tgt, $I10
    unless $I11, rx2207_fail
  # rx enumcharlist negate=1 zerowidth
    sub $I10, rx2207_pos, rx2207_off
    substr $S10, rx2207_tgt, $I10, 1
    index $I11, "(", $S10
    ge $I11, 0, rx2207_fail
  # rx subrule "ws" subtype=method negate=
    rx2207_cur."!cursor_pos"(rx2207_pos)
    $P10 = rx2207_cur."ws"()
    unless $P10, rx2207_fail
    rx2207_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2207_cur."!cursor_pos"(rx2207_pos)
    $P10 = rx2207_cur."quote_EXPR"(":qq")
    unless $P10, rx2207_fail
    rx2207_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2207_pos = $P10."pos"()
  # rx pass
    rx2207_cur."!cursor_pass"(rx2207_pos, "quote:sym<qq>")
    if_null rx2207_debug, debug_1592
    rx2207_cur."!cursor_debug"("PASS", "quote:sym<qq>", " at pos=", rx2207_pos)
  debug_1592:
    .return (rx2207_cur)
  rx2207_restart:
    if_null rx2207_debug, debug_1593
    rx2207_cur."!cursor_debug"("NEXT", "quote:sym<qq>")
  debug_1593:
  rx2207_fail:
    (rx2207_rep, rx2207_pos, $I10, $P10) = rx2207_cur."!mark_fail"(0)
    lt rx2207_pos, -1, rx2207_done
    eq rx2207_pos, -1, rx2207_fail
    jump $I10
  rx2207_done:
    rx2207_cur."!cursor_fail"()
    if_null rx2207_debug, debug_1594
    rx2207_cur."!cursor_debug"("FAIL", "quote:sym<qq>")
  debug_1594:
    .return (rx2207_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<qq>"  :subid("270_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1222
    $P103 = self."!PREFIX__!subrule"("ws", "qq")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<Q>"  :subid("271_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1223
    .local string rx2212_tgt
    .local int rx2212_pos
    .local int rx2212_off
    .local int rx2212_eos
    .local int rx2212_rep
    .local pmc rx2212_cur
    .local pmc rx2212_debug
    (rx2212_cur, rx2212_pos, rx2212_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2212_cur
    .local pmc match
    .lex "$/", match
    length rx2212_eos, rx2212_tgt
    gt rx2212_pos, rx2212_eos, rx2212_done
    set rx2212_off, 0
    lt rx2212_pos, 2, rx2212_start
    sub rx2212_off, rx2212_pos, 1
    substr rx2212_tgt, rx2212_tgt, rx2212_off
  rx2212_start:
    eq $I10, 1, rx2212_restart
    if_null rx2212_debug, debug_1595
    rx2212_cur."!cursor_debug"("START", "quote:sym<Q>")
  debug_1595:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2213_done
    goto rxscan2213_scan
  rxscan2213_loop:
    (rx2212_pos) = rx2212_cur."from"()
    inc rx2212_pos
    rx2212_cur."!cursor_from"(rx2212_pos)
    ge rx2212_pos, rx2212_eos, rxscan2213_done
  rxscan2213_scan:
    set_addr $I10, rxscan2213_loop
    rx2212_cur."!mark_push"(0, rx2212_pos, $I10)
  rxscan2213_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2214_fail
    rx2212_cur."!mark_push"(0, rx2212_pos, $I10)
  # rx literal  "Q"
    add $I11, rx2212_pos, 1
    gt $I11, rx2212_eos, rx2212_fail
    sub $I11, rx2212_pos, rx2212_off
    ord $I11, rx2212_tgt, $I11
    ne $I11, 81, rx2212_fail
    add rx2212_pos, 1
    set_addr $I10, rxcap_2214_fail
    ($I12, $I11) = rx2212_cur."!mark_peek"($I10)
    rx2212_cur."!cursor_pos"($I11)
    ($P10) = rx2212_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2212_pos, "")
    rx2212_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2214_done
  rxcap_2214_fail:
    goto rx2212_fail
  rxcap_2214_done:
  # rxanchor rwb
    le rx2212_pos, 0, rx2212_fail
    sub $I10, rx2212_pos, rx2212_off
    is_cclass $I11, .CCLASS_WORD, rx2212_tgt, $I10
    if $I11, rx2212_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx2212_tgt, $I10
    unless $I11, rx2212_fail
  # rx enumcharlist negate=1 zerowidth
    sub $I10, rx2212_pos, rx2212_off
    substr $S10, rx2212_tgt, $I10, 1
    index $I11, "(", $S10
    ge $I11, 0, rx2212_fail
  # rx subrule "ws" subtype=method negate=
    rx2212_cur."!cursor_pos"(rx2212_pos)
    $P10 = rx2212_cur."ws"()
    unless $P10, rx2212_fail
    rx2212_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2212_cur."!cursor_pos"(rx2212_pos)
    $P10 = rx2212_cur."quote_EXPR"()
    unless $P10, rx2212_fail
    rx2212_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2212_pos = $P10."pos"()
  # rx pass
    rx2212_cur."!cursor_pass"(rx2212_pos, "quote:sym<Q>")
    if_null rx2212_debug, debug_1596
    rx2212_cur."!cursor_debug"("PASS", "quote:sym<Q>", " at pos=", rx2212_pos)
  debug_1596:
    .return (rx2212_cur)
  rx2212_restart:
    if_null rx2212_debug, debug_1597
    rx2212_cur."!cursor_debug"("NEXT", "quote:sym<Q>")
  debug_1597:
  rx2212_fail:
    (rx2212_rep, rx2212_pos, $I10, $P10) = rx2212_cur."!mark_fail"(0)
    lt rx2212_pos, -1, rx2212_done
    eq rx2212_pos, -1, rx2212_fail
    jump $I10
  rx2212_done:
    rx2212_cur."!cursor_fail"()
    if_null rx2212_debug, debug_1598
    rx2212_cur."!cursor_debug"("FAIL", "quote:sym<Q>")
  debug_1598:
    .return (rx2212_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<Q>"  :subid("272_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1223
    $P103 = self."!PREFIX__!subrule"("ws", "Q")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<Q:PIR>"  :subid("273_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1224
    .local string rx2217_tgt
    .local int rx2217_pos
    .local int rx2217_off
    .local int rx2217_eos
    .local int rx2217_rep
    .local pmc rx2217_cur
    .local pmc rx2217_debug
    (rx2217_cur, rx2217_pos, rx2217_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2217_cur
    .local pmc match
    .lex "$/", match
    length rx2217_eos, rx2217_tgt
    gt rx2217_pos, rx2217_eos, rx2217_done
    set rx2217_off, 0
    lt rx2217_pos, 2, rx2217_start
    sub rx2217_off, rx2217_pos, 1
    substr rx2217_tgt, rx2217_tgt, rx2217_off
  rx2217_start:
    eq $I10, 1, rx2217_restart
    if_null rx2217_debug, debug_1599
    rx2217_cur."!cursor_debug"("START", "quote:sym<Q:PIR>")
  debug_1599:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2218_done
    goto rxscan2218_scan
  rxscan2218_loop:
    (rx2217_pos) = rx2217_cur."from"()
    inc rx2217_pos
    rx2217_cur."!cursor_from"(rx2217_pos)
    ge rx2217_pos, rx2217_eos, rxscan2218_done
  rxscan2218_scan:
    set_addr $I10, rxscan2218_loop
    rx2217_cur."!mark_push"(0, rx2217_pos, $I10)
  rxscan2218_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2219_fail
    rx2217_cur."!mark_push"(0, rx2217_pos, $I10)
  # rx literal  "Q:PIR"
    add $I11, rx2217_pos, 5
    gt $I11, rx2217_eos, rx2217_fail
    sub $I11, rx2217_pos, rx2217_off
    substr $S10, rx2217_tgt, $I11, 5
    ne $S10, "Q:PIR", rx2217_fail
    add rx2217_pos, 5
    set_addr $I10, rxcap_2219_fail
    ($I12, $I11) = rx2217_cur."!mark_peek"($I10)
    rx2217_cur."!cursor_pos"($I11)
    ($P10) = rx2217_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2217_pos, "")
    rx2217_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2219_done
  rxcap_2219_fail:
    goto rx2217_fail
  rxcap_2219_done:
  # rx subrule "ws" subtype=method negate=
    rx2217_cur."!cursor_pos"(rx2217_pos)
    $P10 = rx2217_cur."ws"()
    unless $P10, rx2217_fail
    rx2217_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2217_cur."!cursor_pos"(rx2217_pos)
    $P10 = rx2217_cur."quote_EXPR"()
    unless $P10, rx2217_fail
    rx2217_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2217_pos = $P10."pos"()
  # rx pass
    rx2217_cur."!cursor_pass"(rx2217_pos, "quote:sym<Q:PIR>")
    if_null rx2217_debug, debug_1600
    rx2217_cur."!cursor_debug"("PASS", "quote:sym<Q:PIR>", " at pos=", rx2217_pos)
  debug_1600:
    .return (rx2217_cur)
  rx2217_restart:
    if_null rx2217_debug, debug_1601
    rx2217_cur."!cursor_debug"("NEXT", "quote:sym<Q:PIR>")
  debug_1601:
  rx2217_fail:
    (rx2217_rep, rx2217_pos, $I10, $P10) = rx2217_cur."!mark_fail"(0)
    lt rx2217_pos, -1, rx2217_done
    eq rx2217_pos, -1, rx2217_fail
    jump $I10
  rx2217_done:
    rx2217_cur."!cursor_fail"()
    if_null rx2217_debug, debug_1602
    rx2217_cur."!cursor_debug"("FAIL", "quote:sym<Q:PIR>")
  debug_1602:
    .return (rx2217_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<Q:PIR>"  :subid("274_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1224
    $P103 = self."!PREFIX__!subrule"("ws", "Q:PIR")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym</ />"  :subid("275_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1225
    .local string rx2222_tgt
    .local int rx2222_pos
    .local int rx2222_off
    .local int rx2222_eos
    .local int rx2222_rep
    .local pmc rx2222_cur
    .local pmc rx2222_debug
    (rx2222_cur, rx2222_pos, rx2222_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2222_cur
    .local pmc match
    .lex "$/", match
    length rx2222_eos, rx2222_tgt
    gt rx2222_pos, rx2222_eos, rx2222_done
    set rx2222_off, 0
    lt rx2222_pos, 2, rx2222_start
    sub rx2222_off, rx2222_pos, 1
    substr rx2222_tgt, rx2222_tgt, rx2222_off
  rx2222_start:
    eq $I10, 1, rx2222_restart
    if_null rx2222_debug, debug_1603
    rx2222_cur."!cursor_debug"("START", "quote:sym</ />")
  debug_1603:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2223_done
    goto rxscan2223_scan
  rxscan2223_loop:
    (rx2222_pos) = rx2222_cur."from"()
    inc rx2222_pos
    rx2222_cur."!cursor_from"(rx2222_pos)
    ge rx2222_pos, rx2222_eos, rxscan2223_done
  rxscan2223_scan:
    set_addr $I10, rxscan2223_loop
    rx2222_cur."!mark_push"(0, rx2222_pos, $I10)
  rxscan2223_done:
.annotate 'line', 1226
  # rx literal  "/"
    add $I11, rx2222_pos, 1
    gt $I11, rx2222_eos, rx2222_fail
    sub $I11, rx2222_pos, rx2222_off
    ord $I11, rx2222_tgt, $I11
    ne $I11, 47, rx2222_fail
    add rx2222_pos, 1
.annotate 'line', 1227
  # rx subrule "newpad" subtype=method negate=
    rx2222_cur."!cursor_pos"(rx2222_pos)
    $P10 = rx2222_cur."newpad"()
    unless $P10, rx2222_fail
    rx2222_pos = $P10."pos"()
.annotate 'line', 1228
  # rx reduce name="quote:sym</ />" key="open"
    rx2222_cur."!cursor_pos"(rx2222_pos)
    rx2222_cur."!reduce"("quote:sym</ />", "open")
.annotate 'line', 1229
  # rx subrule "LANG" subtype=capture negate=
    rx2222_cur."!cursor_pos"(rx2222_pos)
    $P10 = rx2222_cur."LANG"("Regex", "nibbler")
    unless $P10, rx2222_fail
    rx2222_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("p6regex")
    rx2222_pos = $P10."pos"()
.annotate 'line', 1230
  # rx literal  "/"
    add $I11, rx2222_pos, 1
    gt $I11, rx2222_eos, rx2222_fail
    sub $I11, rx2222_pos, rx2222_off
    ord $I11, rx2222_tgt, $I11
    ne $I11, 47, rx2222_fail
    add rx2222_pos, 1
.annotate 'line', 1225
  # rx pass
    rx2222_cur."!cursor_pass"(rx2222_pos, "quote:sym</ />")
    if_null rx2222_debug, debug_1604
    rx2222_cur."!cursor_debug"("PASS", "quote:sym</ />", " at pos=", rx2222_pos)
  debug_1604:
    .return (rx2222_cur)
  rx2222_restart:
    if_null rx2222_debug, debug_1605
    rx2222_cur."!cursor_debug"("NEXT", "quote:sym</ />")
  debug_1605:
  rx2222_fail:
    (rx2222_rep, rx2222_pos, $I10, $P10) = rx2222_cur."!mark_fail"(0)
    lt rx2222_pos, -1, rx2222_done
    eq rx2222_pos, -1, rx2222_fail
    jump $I10
  rx2222_done:
    rx2222_cur."!cursor_fail"()
    if_null rx2222_debug, debug_1606
    rx2222_cur."!cursor_debug"("FAIL", "quote:sym</ />")
  debug_1606:
    .return (rx2222_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym</ />"  :subid("276_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1225
    $P103 = self."!PREFIX__!subrule"("newpad", "/")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote_escape:sym<$>"  :subid("277_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1233
    .local string rx2226_tgt
    .local int rx2226_pos
    .local int rx2226_off
    .local int rx2226_eos
    .local int rx2226_rep
    .local pmc rx2226_cur
    .local pmc rx2226_debug
    (rx2226_cur, rx2226_pos, rx2226_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2226_cur
    .local pmc match
    .lex "$/", match
    length rx2226_eos, rx2226_tgt
    gt rx2226_pos, rx2226_eos, rx2226_done
    set rx2226_off, 0
    lt rx2226_pos, 2, rx2226_start
    sub rx2226_off, rx2226_pos, 1
    substr rx2226_tgt, rx2226_tgt, rx2226_off
  rx2226_start:
    eq $I10, 1, rx2226_restart
    if_null rx2226_debug, debug_1607
    rx2226_cur."!cursor_debug"("START", "quote_escape:sym<$>")
  debug_1607:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2227_done
    goto rxscan2227_scan
  rxscan2227_loop:
    (rx2226_pos) = rx2226_cur."from"()
    inc rx2226_pos
    rx2226_cur."!cursor_from"(rx2226_pos)
    ge rx2226_pos, rx2226_eos, rxscan2227_done
  rxscan2227_scan:
    set_addr $I10, rxscan2227_loop
    rx2226_cur."!mark_push"(0, rx2226_pos, $I10)
  rxscan2227_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2226_pos, rx2226_off
    substr $S10, rx2226_tgt, $I10, 1
    index $I11, "$", $S10
    lt $I11, 0, rx2226_fail
  # rx subrule "quotemod_check" subtype=zerowidth negate=
    rx2226_cur."!cursor_pos"(rx2226_pos)
    $P10 = rx2226_cur."quotemod_check"("s")
    unless $P10, rx2226_fail
  # rx subrule "variable" subtype=capture negate=
    rx2226_cur."!cursor_pos"(rx2226_pos)
    $P10 = rx2226_cur."variable"()
    unless $P10, rx2226_fail
    rx2226_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable")
    rx2226_pos = $P10."pos"()
  # rx pass
    rx2226_cur."!cursor_pass"(rx2226_pos, "quote_escape:sym<$>")
    if_null rx2226_debug, debug_1608
    rx2226_cur."!cursor_debug"("PASS", "quote_escape:sym<$>", " at pos=", rx2226_pos)
  debug_1608:
    .return (rx2226_cur)
  rx2226_restart:
    if_null rx2226_debug, debug_1609
    rx2226_cur."!cursor_debug"("NEXT", "quote_escape:sym<$>")
  debug_1609:
  rx2226_fail:
    (rx2226_rep, rx2226_pos, $I10, $P10) = rx2226_cur."!mark_fail"(0)
    lt rx2226_pos, -1, rx2226_done
    eq rx2226_pos, -1, rx2226_fail
    jump $I10
  rx2226_done:
    rx2226_cur."!cursor_fail"()
    if_null rx2226_debug, debug_1610
    rx2226_cur."!cursor_debug"("FAIL", "quote_escape:sym<$>")
  debug_1610:
    .return (rx2226_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote_escape:sym<$>"  :subid("278_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1233
    new $P103, "ResizablePMCArray"
    push $P103, "$"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote_escape:sym<{ }>"  :subid("279_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1234
    .local string rx2230_tgt
    .local int rx2230_pos
    .local int rx2230_off
    .local int rx2230_eos
    .local int rx2230_rep
    .local pmc rx2230_cur
    .local pmc rx2230_debug
    (rx2230_cur, rx2230_pos, rx2230_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2230_cur
    .local pmc match
    .lex "$/", match
    length rx2230_eos, rx2230_tgt
    gt rx2230_pos, rx2230_eos, rx2230_done
    set rx2230_off, 0
    lt rx2230_pos, 2, rx2230_start
    sub rx2230_off, rx2230_pos, 1
    substr rx2230_tgt, rx2230_tgt, rx2230_off
  rx2230_start:
    eq $I10, 1, rx2230_restart
    if_null rx2230_debug, debug_1611
    rx2230_cur."!cursor_debug"("START", "quote_escape:sym<{ }>")
  debug_1611:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2231_done
    goto rxscan2231_scan
  rxscan2231_loop:
    (rx2230_pos) = rx2230_cur."from"()
    inc rx2230_pos
    rx2230_cur."!cursor_from"(rx2230_pos)
    ge rx2230_pos, rx2230_eos, rxscan2231_done
  rxscan2231_scan:
    set_addr $I10, rxscan2231_loop
    rx2230_cur."!mark_push"(0, rx2230_pos, $I10)
  rxscan2231_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2230_pos, rx2230_off
    substr $S10, rx2230_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx2230_fail
  # rx subrule "quotemod_check" subtype=zerowidth negate=
    rx2230_cur."!cursor_pos"(rx2230_pos)
    $P10 = rx2230_cur."quotemod_check"("c")
    unless $P10, rx2230_fail
  # rx subrule "block" subtype=capture negate=
    rx2230_cur."!cursor_pos"(rx2230_pos)
    $P10 = rx2230_cur."block"()
    unless $P10, rx2230_fail
    rx2230_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx2230_pos = $P10."pos"()
  # rx pass
    rx2230_cur."!cursor_pass"(rx2230_pos, "quote_escape:sym<{ }>")
    if_null rx2230_debug, debug_1612
    rx2230_cur."!cursor_debug"("PASS", "quote_escape:sym<{ }>", " at pos=", rx2230_pos)
  debug_1612:
    .return (rx2230_cur)
  rx2230_restart:
    if_null rx2230_debug, debug_1613
    rx2230_cur."!cursor_debug"("NEXT", "quote_escape:sym<{ }>")
  debug_1613:
  rx2230_fail:
    (rx2230_rep, rx2230_pos, $I10, $P10) = rx2230_cur."!mark_fail"(0)
    lt rx2230_pos, -1, rx2230_done
    eq rx2230_pos, -1, rx2230_fail
    jump $I10
  rx2230_done:
    rx2230_cur."!cursor_fail"()
    if_null rx2230_debug, debug_1614
    rx2230_cur."!cursor_debug"("FAIL", "quote_escape:sym<{ }>")
  debug_1614:
    .return (rx2230_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote_escape:sym<{ }>"  :subid("280_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1234
    new $P103, "ResizablePMCArray"
    push $P103, "{"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote_escape:sym<esc>"  :subid("281_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1235
    .local string rx2234_tgt
    .local int rx2234_pos
    .local int rx2234_off
    .local int rx2234_eos
    .local int rx2234_rep
    .local pmc rx2234_cur
    .local pmc rx2234_debug
    (rx2234_cur, rx2234_pos, rx2234_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2234_cur
    .local pmc match
    .lex "$/", match
    length rx2234_eos, rx2234_tgt
    gt rx2234_pos, rx2234_eos, rx2234_done
    set rx2234_off, 0
    lt rx2234_pos, 2, rx2234_start
    sub rx2234_off, rx2234_pos, 1
    substr rx2234_tgt, rx2234_tgt, rx2234_off
  rx2234_start:
    eq $I10, 1, rx2234_restart
    if_null rx2234_debug, debug_1615
    rx2234_cur."!cursor_debug"("START", "quote_escape:sym<esc>")
  debug_1615:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2235_done
    goto rxscan2235_scan
  rxscan2235_loop:
    (rx2234_pos) = rx2234_cur."from"()
    inc rx2234_pos
    rx2234_cur."!cursor_from"(rx2234_pos)
    ge rx2234_pos, rx2234_eos, rxscan2235_done
  rxscan2235_scan:
    set_addr $I10, rxscan2235_loop
    rx2234_cur."!mark_push"(0, rx2234_pos, $I10)
  rxscan2235_done:
  # rx literal  "\\e"
    add $I11, rx2234_pos, 2
    gt $I11, rx2234_eos, rx2234_fail
    sub $I11, rx2234_pos, rx2234_off
    substr $S10, rx2234_tgt, $I11, 2
    ne $S10, "\\e", rx2234_fail
    add rx2234_pos, 2
  # rx subrule "quotemod_check" subtype=zerowidth negate=
    rx2234_cur."!cursor_pos"(rx2234_pos)
    $P10 = rx2234_cur."quotemod_check"("b")
    unless $P10, rx2234_fail
  # rx pass
    rx2234_cur."!cursor_pass"(rx2234_pos, "quote_escape:sym<esc>")
    if_null rx2234_debug, debug_1616
    rx2234_cur."!cursor_debug"("PASS", "quote_escape:sym<esc>", " at pos=", rx2234_pos)
  debug_1616:
    .return (rx2234_cur)
  rx2234_restart:
    if_null rx2234_debug, debug_1617
    rx2234_cur."!cursor_debug"("NEXT", "quote_escape:sym<esc>")
  debug_1617:
  rx2234_fail:
    (rx2234_rep, rx2234_pos, $I10, $P10) = rx2234_cur."!mark_fail"(0)
    lt rx2234_pos, -1, rx2234_done
    eq rx2234_pos, -1, rx2234_fail
    jump $I10
  rx2234_done:
    rx2234_cur."!cursor_fail"()
    if_null rx2234_debug, debug_1618
    rx2234_cur."!cursor_debug"("FAIL", "quote_escape:sym<esc>")
  debug_1618:
    .return (rx2234_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote_escape:sym<esc>"  :subid("282_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1235
    new $P103, "ResizablePMCArray"
    push $P103, "\\e"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<( )>"  :subid("283_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1237
    .local string rx2238_tgt
    .local int rx2238_pos
    .local int rx2238_off
    .local int rx2238_eos
    .local int rx2238_rep
    .local pmc rx2238_cur
    .local pmc rx2238_debug
    (rx2238_cur, rx2238_pos, rx2238_tgt, $I10) = self."!cursor_start"()
    rx2238_cur."!cursor_caparray"("EXPR")
    .lex unicode:"$\x{a2}", rx2238_cur
    .local pmc match
    .lex "$/", match
    length rx2238_eos, rx2238_tgt
    gt rx2238_pos, rx2238_eos, rx2238_done
    set rx2238_off, 0
    lt rx2238_pos, 2, rx2238_start
    sub rx2238_off, rx2238_pos, 1
    substr rx2238_tgt, rx2238_tgt, rx2238_off
  rx2238_start:
    eq $I10, 1, rx2238_restart
    if_null rx2238_debug, debug_1619
    rx2238_cur."!cursor_debug"("START", "circumfix:sym<( )>")
  debug_1619:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2239_done
    goto rxscan2239_scan
  rxscan2239_loop:
    (rx2238_pos) = rx2238_cur."from"()
    inc rx2238_pos
    rx2238_cur."!cursor_from"(rx2238_pos)
    ge rx2238_pos, rx2238_eos, rxscan2239_done
  rxscan2239_scan:
    set_addr $I10, rxscan2239_loop
    rx2238_cur."!mark_push"(0, rx2238_pos, $I10)
  rxscan2239_done:
  # rx literal  "("
    add $I11, rx2238_pos, 1
    gt $I11, rx2238_eos, rx2238_fail
    sub $I11, rx2238_pos, rx2238_off
    ord $I11, rx2238_tgt, $I11
    ne $I11, 40, rx2238_fail
    add rx2238_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2238_cur."!cursor_pos"(rx2238_pos)
    $P10 = rx2238_cur."ws"()
    unless $P10, rx2238_fail
    rx2238_pos = $P10."pos"()
  # rx rxquantr2240 ** 0..1
    set_addr $I10, rxquantr2240_done
    rx2238_cur."!mark_push"(0, rx2238_pos, $I10)
  rxquantr2240_loop:
  # rx subrule "EXPR" subtype=capture negate=
    rx2238_cur."!cursor_pos"(rx2238_pos)
    $P10 = rx2238_cur."EXPR"()
    unless $P10, rx2238_fail
    goto rxsubrule2241_pass
  rxsubrule2241_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2238_fail
  rxsubrule2241_pass:
    set_addr $I10, rxsubrule2241_back
    rx2238_cur."!mark_push"(0, rx2238_pos, $I10, $P10)
    $P10."!cursor_names"("EXPR")
    rx2238_pos = $P10."pos"()
    set_addr $I10, rxquantr2240_done
    (rx2238_rep) = rx2238_cur."!mark_commit"($I10)
  rxquantr2240_done:
  # rx literal  ")"
    add $I11, rx2238_pos, 1
    gt $I11, rx2238_eos, rx2238_fail
    sub $I11, rx2238_pos, rx2238_off
    ord $I11, rx2238_tgt, $I11
    ne $I11, 41, rx2238_fail
    add rx2238_pos, 1
  # rx pass
    rx2238_cur."!cursor_pass"(rx2238_pos, "circumfix:sym<( )>")
    if_null rx2238_debug, debug_1620
    rx2238_cur."!cursor_debug"("PASS", "circumfix:sym<( )>", " at pos=", rx2238_pos)
  debug_1620:
    .return (rx2238_cur)
  rx2238_restart:
    if_null rx2238_debug, debug_1621
    rx2238_cur."!cursor_debug"("NEXT", "circumfix:sym<( )>")
  debug_1621:
  rx2238_fail:
    (rx2238_rep, rx2238_pos, $I10, $P10) = rx2238_cur."!mark_fail"(0)
    lt rx2238_pos, -1, rx2238_done
    eq rx2238_pos, -1, rx2238_fail
    jump $I10
  rx2238_done:
    rx2238_cur."!cursor_fail"()
    if_null rx2238_debug, debug_1622
    rx2238_cur."!cursor_debug"("FAIL", "circumfix:sym<( )>")
  debug_1622:
    .return (rx2238_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<( )>"  :subid("284_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1237
    $P103 = self."!PREFIX__!subrule"("ws", "(")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<[ ]>"  :subid("285_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1238
    .local string rx2244_tgt
    .local int rx2244_pos
    .local int rx2244_off
    .local int rx2244_eos
    .local int rx2244_rep
    .local pmc rx2244_cur
    .local pmc rx2244_debug
    (rx2244_cur, rx2244_pos, rx2244_tgt, $I10) = self."!cursor_start"()
    rx2244_cur."!cursor_caparray"("EXPR")
    .lex unicode:"$\x{a2}", rx2244_cur
    .local pmc match
    .lex "$/", match
    length rx2244_eos, rx2244_tgt
    gt rx2244_pos, rx2244_eos, rx2244_done
    set rx2244_off, 0
    lt rx2244_pos, 2, rx2244_start
    sub rx2244_off, rx2244_pos, 1
    substr rx2244_tgt, rx2244_tgt, rx2244_off
  rx2244_start:
    eq $I10, 1, rx2244_restart
    if_null rx2244_debug, debug_1623
    rx2244_cur."!cursor_debug"("START", "circumfix:sym<[ ]>")
  debug_1623:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2245_done
    goto rxscan2245_scan
  rxscan2245_loop:
    (rx2244_pos) = rx2244_cur."from"()
    inc rx2244_pos
    rx2244_cur."!cursor_from"(rx2244_pos)
    ge rx2244_pos, rx2244_eos, rxscan2245_done
  rxscan2245_scan:
    set_addr $I10, rxscan2245_loop
    rx2244_cur."!mark_push"(0, rx2244_pos, $I10)
  rxscan2245_done:
  # rx literal  "["
    add $I11, rx2244_pos, 1
    gt $I11, rx2244_eos, rx2244_fail
    sub $I11, rx2244_pos, rx2244_off
    ord $I11, rx2244_tgt, $I11
    ne $I11, 91, rx2244_fail
    add rx2244_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2244_cur."!cursor_pos"(rx2244_pos)
    $P10 = rx2244_cur."ws"()
    unless $P10, rx2244_fail
    rx2244_pos = $P10."pos"()
  # rx rxquantr2246 ** 0..1
    set_addr $I10, rxquantr2246_done
    rx2244_cur."!mark_push"(0, rx2244_pos, $I10)
  rxquantr2246_loop:
  # rx subrule "EXPR" subtype=capture negate=
    rx2244_cur."!cursor_pos"(rx2244_pos)
    $P10 = rx2244_cur."EXPR"()
    unless $P10, rx2244_fail
    goto rxsubrule2247_pass
  rxsubrule2247_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2244_fail
  rxsubrule2247_pass:
    set_addr $I10, rxsubrule2247_back
    rx2244_cur."!mark_push"(0, rx2244_pos, $I10, $P10)
    $P10."!cursor_names"("EXPR")
    rx2244_pos = $P10."pos"()
    set_addr $I10, rxquantr2246_done
    (rx2244_rep) = rx2244_cur."!mark_commit"($I10)
  rxquantr2246_done:
  # rx literal  "]"
    add $I11, rx2244_pos, 1
    gt $I11, rx2244_eos, rx2244_fail
    sub $I11, rx2244_pos, rx2244_off
    ord $I11, rx2244_tgt, $I11
    ne $I11, 93, rx2244_fail
    add rx2244_pos, 1
  # rx pass
    rx2244_cur."!cursor_pass"(rx2244_pos, "circumfix:sym<[ ]>")
    if_null rx2244_debug, debug_1624
    rx2244_cur."!cursor_debug"("PASS", "circumfix:sym<[ ]>", " at pos=", rx2244_pos)
  debug_1624:
    .return (rx2244_cur)
  rx2244_restart:
    if_null rx2244_debug, debug_1625
    rx2244_cur."!cursor_debug"("NEXT", "circumfix:sym<[ ]>")
  debug_1625:
  rx2244_fail:
    (rx2244_rep, rx2244_pos, $I10, $P10) = rx2244_cur."!mark_fail"(0)
    lt rx2244_pos, -1, rx2244_done
    eq rx2244_pos, -1, rx2244_fail
    jump $I10
  rx2244_done:
    rx2244_cur."!cursor_fail"()
    if_null rx2244_debug, debug_1626
    rx2244_cur."!cursor_debug"("FAIL", "circumfix:sym<[ ]>")
  debug_1626:
    .return (rx2244_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<[ ]>"  :subid("286_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1238
    $P103 = self."!PREFIX__!subrule"("ws", "[")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<ang>"  :subid("287_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1239
    .local string rx2250_tgt
    .local int rx2250_pos
    .local int rx2250_off
    .local int rx2250_eos
    .local int rx2250_rep
    .local pmc rx2250_cur
    .local pmc rx2250_debug
    (rx2250_cur, rx2250_pos, rx2250_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2250_cur
    .local pmc match
    .lex "$/", match
    length rx2250_eos, rx2250_tgt
    gt rx2250_pos, rx2250_eos, rx2250_done
    set rx2250_off, 0
    lt rx2250_pos, 2, rx2250_start
    sub rx2250_off, rx2250_pos, 1
    substr rx2250_tgt, rx2250_tgt, rx2250_off
  rx2250_start:
    eq $I10, 1, rx2250_restart
    if_null rx2250_debug, debug_1627
    rx2250_cur."!cursor_debug"("START", "circumfix:sym<ang>")
  debug_1627:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2251_done
    goto rxscan2251_scan
  rxscan2251_loop:
    (rx2250_pos) = rx2250_cur."from"()
    inc rx2250_pos
    rx2250_cur."!cursor_from"(rx2250_pos)
    ge rx2250_pos, rx2250_eos, rxscan2251_done
  rxscan2251_scan:
    set_addr $I10, rxscan2251_loop
    rx2250_cur."!mark_push"(0, rx2250_pos, $I10)
  rxscan2251_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2250_pos, rx2250_off
    substr $S10, rx2250_tgt, $I10, 1
    index $I11, "<", $S10
    lt $I11, 0, rx2250_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2250_cur."!cursor_pos"(rx2250_pos)
    $P10 = rx2250_cur."quote_EXPR"(":q", ":w")
    unless $P10, rx2250_fail
    rx2250_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2250_pos = $P10."pos"()
  # rx pass
    rx2250_cur."!cursor_pass"(rx2250_pos, "circumfix:sym<ang>")
    if_null rx2250_debug, debug_1628
    rx2250_cur."!cursor_debug"("PASS", "circumfix:sym<ang>", " at pos=", rx2250_pos)
  debug_1628:
    .return (rx2250_cur)
  rx2250_restart:
    if_null rx2250_debug, debug_1629
    rx2250_cur."!cursor_debug"("NEXT", "circumfix:sym<ang>")
  debug_1629:
  rx2250_fail:
    (rx2250_rep, rx2250_pos, $I10, $P10) = rx2250_cur."!mark_fail"(0)
    lt rx2250_pos, -1, rx2250_done
    eq rx2250_pos, -1, rx2250_fail
    jump $I10
  rx2250_done:
    rx2250_cur."!cursor_fail"()
    if_null rx2250_debug, debug_1630
    rx2250_cur."!cursor_debug"("FAIL", "circumfix:sym<ang>")
  debug_1630:
    .return (rx2250_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<ang>"  :subid("288_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1239
    new $P103, "ResizablePMCArray"
    push $P103, "<"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub unicode:"circumfix:sym<\x{ab} \x{bb}>"  :subid("289_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1240
    .local string rx2254_tgt
    .local int rx2254_pos
    .local int rx2254_off
    .local int rx2254_eos
    .local int rx2254_rep
    .local pmc rx2254_cur
    .local pmc rx2254_debug
    (rx2254_cur, rx2254_pos, rx2254_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2254_cur
    .local pmc match
    .lex "$/", match
    length rx2254_eos, rx2254_tgt
    gt rx2254_pos, rx2254_eos, rx2254_done
    set rx2254_off, 0
    lt rx2254_pos, 2, rx2254_start
    sub rx2254_off, rx2254_pos, 1
    substr rx2254_tgt, rx2254_tgt, rx2254_off
  rx2254_start:
    eq $I10, 1, rx2254_restart
    if_null rx2254_debug, debug_1631
    rx2254_cur."!cursor_debug"("START", unicode:"circumfix:sym<\x{ab} \x{bb}>")
  debug_1631:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2255_done
    goto rxscan2255_scan
  rxscan2255_loop:
    (rx2254_pos) = rx2254_cur."from"()
    inc rx2254_pos
    rx2254_cur."!cursor_from"(rx2254_pos)
    ge rx2254_pos, rx2254_eos, rxscan2255_done
  rxscan2255_scan:
    set_addr $I10, rxscan2255_loop
    rx2254_cur."!mark_push"(0, rx2254_pos, $I10)
  rxscan2255_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2254_pos, rx2254_off
    substr $S10, rx2254_tgt, $I10, 1
    index $I11, unicode:"\x{ab}", $S10
    lt $I11, 0, rx2254_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2254_cur."!cursor_pos"(rx2254_pos)
    $P10 = rx2254_cur."quote_EXPR"(":qq", ":w")
    unless $P10, rx2254_fail
    rx2254_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2254_pos = $P10."pos"()
  # rx pass
    rx2254_cur."!cursor_pass"(rx2254_pos, unicode:"circumfix:sym<\x{ab} \x{bb}>")
    if_null rx2254_debug, debug_1632
    rx2254_cur."!cursor_debug"("PASS", unicode:"circumfix:sym<\x{ab} \x{bb}>", " at pos=", rx2254_pos)
  debug_1632:
    .return (rx2254_cur)
  rx2254_restart:
    if_null rx2254_debug, debug_1633
    rx2254_cur."!cursor_debug"("NEXT", unicode:"circumfix:sym<\x{ab} \x{bb}>")
  debug_1633:
  rx2254_fail:
    (rx2254_rep, rx2254_pos, $I10, $P10) = rx2254_cur."!mark_fail"(0)
    lt rx2254_pos, -1, rx2254_done
    eq rx2254_pos, -1, rx2254_fail
    jump $I10
  rx2254_done:
    rx2254_cur."!cursor_fail"()
    if_null rx2254_debug, debug_1634
    rx2254_cur."!cursor_debug"("FAIL", unicode:"circumfix:sym<\x{ab} \x{bb}>")
  debug_1634:
    .return (rx2254_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub unicode:"!PREFIX__circumfix:sym<\x{ab} \x{bb}>"  :subid("290_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1240
    new $P103, "ResizablePMCArray"
    push $P103, unicode:"\x{ab}"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<{ }>"  :subid("291_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1241
    .local string rx2258_tgt
    .local int rx2258_pos
    .local int rx2258_off
    .local int rx2258_eos
    .local int rx2258_rep
    .local pmc rx2258_cur
    .local pmc rx2258_debug
    (rx2258_cur, rx2258_pos, rx2258_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2258_cur
    .local pmc match
    .lex "$/", match
    length rx2258_eos, rx2258_tgt
    gt rx2258_pos, rx2258_eos, rx2258_done
    set rx2258_off, 0
    lt rx2258_pos, 2, rx2258_start
    sub rx2258_off, rx2258_pos, 1
    substr rx2258_tgt, rx2258_tgt, rx2258_off
  rx2258_start:
    eq $I10, 1, rx2258_restart
    if_null rx2258_debug, debug_1635
    rx2258_cur."!cursor_debug"("START", "circumfix:sym<{ }>")
  debug_1635:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2259_done
    goto rxscan2259_scan
  rxscan2259_loop:
    (rx2258_pos) = rx2258_cur."from"()
    inc rx2258_pos
    rx2258_cur."!cursor_from"(rx2258_pos)
    ge rx2258_pos, rx2258_eos, rxscan2259_done
  rxscan2259_scan:
    set_addr $I10, rxscan2259_loop
    rx2258_cur."!mark_push"(0, rx2258_pos, $I10)
  rxscan2259_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2258_pos, rx2258_off
    substr $S10, rx2258_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx2258_fail
  # rx subrule "pblock" subtype=capture negate=
    rx2258_cur."!cursor_pos"(rx2258_pos)
    $P10 = rx2258_cur."pblock"()
    unless $P10, rx2258_fail
    rx2258_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("pblock")
    rx2258_pos = $P10."pos"()
  # rx pass
    rx2258_cur."!cursor_pass"(rx2258_pos, "circumfix:sym<{ }>")
    if_null rx2258_debug, debug_1636
    rx2258_cur."!cursor_debug"("PASS", "circumfix:sym<{ }>", " at pos=", rx2258_pos)
  debug_1636:
    .return (rx2258_cur)
  rx2258_restart:
    if_null rx2258_debug, debug_1637
    rx2258_cur."!cursor_debug"("NEXT", "circumfix:sym<{ }>")
  debug_1637:
  rx2258_fail:
    (rx2258_rep, rx2258_pos, $I10, $P10) = rx2258_cur."!mark_fail"(0)
    lt rx2258_pos, -1, rx2258_done
    eq rx2258_pos, -1, rx2258_fail
    jump $I10
  rx2258_done:
    rx2258_cur."!cursor_fail"()
    if_null rx2258_debug, debug_1638
    rx2258_cur."!cursor_debug"("FAIL", "circumfix:sym<{ }>")
  debug_1638:
    .return (rx2258_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<{ }>"  :subid("292_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1241
    new $P103, "ResizablePMCArray"
    push $P103, "{"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<sigil>"  :subid("293_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1242
    .local string rx2262_tgt
    .local int rx2262_pos
    .local int rx2262_off
    .local int rx2262_eos
    .local int rx2262_rep
    .local pmc rx2262_cur
    .local pmc rx2262_debug
    (rx2262_cur, rx2262_pos, rx2262_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2262_cur
    .local pmc match
    .lex "$/", match
    length rx2262_eos, rx2262_tgt
    gt rx2262_pos, rx2262_eos, rx2262_done
    set rx2262_off, 0
    lt rx2262_pos, 2, rx2262_start
    sub rx2262_off, rx2262_pos, 1
    substr rx2262_tgt, rx2262_tgt, rx2262_off
  rx2262_start:
    eq $I10, 1, rx2262_restart
    if_null rx2262_debug, debug_1639
    rx2262_cur."!cursor_debug"("START", "circumfix:sym<sigil>")
  debug_1639:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2263_done
    goto rxscan2263_scan
  rxscan2263_loop:
    (rx2262_pos) = rx2262_cur."from"()
    inc rx2262_pos
    rx2262_cur."!cursor_from"(rx2262_pos)
    ge rx2262_pos, rx2262_eos, rxscan2263_done
  rxscan2263_scan:
    set_addr $I10, rxscan2263_loop
    rx2262_cur."!mark_push"(0, rx2262_pos, $I10)
  rxscan2263_done:
  # rx subrule "sigil" subtype=capture negate=
    rx2262_cur."!cursor_pos"(rx2262_pos)
    $P10 = rx2262_cur."sigil"()
    unless $P10, rx2262_fail
    rx2262_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    rx2262_pos = $P10."pos"()
  # rx literal  "("
    add $I11, rx2262_pos, 1
    gt $I11, rx2262_eos, rx2262_fail
    sub $I11, rx2262_pos, rx2262_off
    ord $I11, rx2262_tgt, $I11
    ne $I11, 40, rx2262_fail
    add rx2262_pos, 1
  # rx subrule "semilist" subtype=capture negate=
    rx2262_cur."!cursor_pos"(rx2262_pos)
    $P10 = rx2262_cur."semilist"()
    unless $P10, rx2262_fail
    rx2262_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("semilist")
    rx2262_pos = $P10."pos"()
  alt2264_0:
    set_addr $I10, alt2264_1
    rx2262_cur."!mark_push"(0, rx2262_pos, $I10)
  # rx literal  ")"
    add $I11, rx2262_pos, 1
    gt $I11, rx2262_eos, rx2262_fail
    sub $I11, rx2262_pos, rx2262_off
    ord $I11, rx2262_tgt, $I11
    ne $I11, 41, rx2262_fail
    add rx2262_pos, 1
    goto alt2264_end
  alt2264_1:
  # rx subrule "FAILGOAL" subtype=method negate=
    rx2262_cur."!cursor_pos"(rx2262_pos)
    $P10 = rx2262_cur."FAILGOAL"("')'")
    unless $P10, rx2262_fail
    goto rxsubrule2265_pass
  rxsubrule2265_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2262_fail
  rxsubrule2265_pass:
    set_addr $I10, rxsubrule2265_back
    rx2262_cur."!mark_push"(0, rx2262_pos, $I10, $P10)
    rx2262_pos = $P10."pos"()
  alt2264_end:
  # rx pass
    rx2262_cur."!cursor_pass"(rx2262_pos, "circumfix:sym<sigil>")
    if_null rx2262_debug, debug_1640
    rx2262_cur."!cursor_debug"("PASS", "circumfix:sym<sigil>", " at pos=", rx2262_pos)
  debug_1640:
    .return (rx2262_cur)
  rx2262_restart:
    if_null rx2262_debug, debug_1641
    rx2262_cur."!cursor_debug"("NEXT", "circumfix:sym<sigil>")
  debug_1641:
  rx2262_fail:
    (rx2262_rep, rx2262_pos, $I10, $P10) = rx2262_cur."!mark_fail"(0)
    lt rx2262_pos, -1, rx2262_done
    eq rx2262_pos, -1, rx2262_fail
    jump $I10
  rx2262_done:
    rx2262_cur."!cursor_fail"()
    if_null rx2262_debug, debug_1642
    rx2262_cur."!cursor_debug"("FAIL", "circumfix:sym<sigil>")
  debug_1642:
    .return (rx2262_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<sigil>"  :subid("294_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1242
    $P104 = self."!PREFIX__!subrule"("sigil", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "semilist"  :subid("295_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1244
    .local string rx2268_tgt
    .local int rx2268_pos
    .local int rx2268_off
    .local int rx2268_eos
    .local int rx2268_rep
    .local pmc rx2268_cur
    .local pmc rx2268_debug
    (rx2268_cur, rx2268_pos, rx2268_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2268_cur
    .local pmc match
    .lex "$/", match
    length rx2268_eos, rx2268_tgt
    gt rx2268_pos, rx2268_eos, rx2268_done
    set rx2268_off, 0
    lt rx2268_pos, 2, rx2268_start
    sub rx2268_off, rx2268_pos, 1
    substr rx2268_tgt, rx2268_tgt, rx2268_off
  rx2268_start:
    eq $I10, 1, rx2268_restart
    if_null rx2268_debug, debug_1643
    rx2268_cur."!cursor_debug"("START", "semilist")
  debug_1643:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2269_done
    goto rxscan2269_scan
  rxscan2269_loop:
    (rx2268_pos) = rx2268_cur."from"()
    inc rx2268_pos
    rx2268_cur."!cursor_from"(rx2268_pos)
    ge rx2268_pos, rx2268_eos, rxscan2269_done
  rxscan2269_scan:
    set_addr $I10, rxscan2269_loop
    rx2268_cur."!mark_push"(0, rx2268_pos, $I10)
  rxscan2269_done:
  # rx subrule "ws" subtype=method negate=
    rx2268_cur."!cursor_pos"(rx2268_pos)
    $P10 = rx2268_cur."ws"()
    unless $P10, rx2268_fail
    rx2268_pos = $P10."pos"()
  # rx subrule "statement" subtype=capture negate=
    rx2268_cur."!cursor_pos"(rx2268_pos)
    $P10 = rx2268_cur."statement"()
    unless $P10, rx2268_fail
    rx2268_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement")
    rx2268_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2268_cur."!cursor_pos"(rx2268_pos)
    $P10 = rx2268_cur."ws"()
    unless $P10, rx2268_fail
    rx2268_pos = $P10."pos"()
  # rx pass
    rx2268_cur."!cursor_pass"(rx2268_pos, "semilist")
    if_null rx2268_debug, debug_1644
    rx2268_cur."!cursor_debug"("PASS", "semilist", " at pos=", rx2268_pos)
  debug_1644:
    .return (rx2268_cur)
  rx2268_restart:
    if_null rx2268_debug, debug_1645
    rx2268_cur."!cursor_debug"("NEXT", "semilist")
  debug_1645:
  rx2268_fail:
    (rx2268_rep, rx2268_pos, $I10, $P10) = rx2268_cur."!mark_fail"(0)
    lt rx2268_pos, -1, rx2268_done
    eq rx2268_pos, -1, rx2268_fail
    jump $I10
  rx2268_done:
    rx2268_cur."!cursor_fail"()
    if_null rx2268_debug, debug_1646
    rx2268_cur."!cursor_debug"("FAIL", "semilist")
  debug_1646:
    .return (rx2268_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__semilist"  :subid("296_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1244
    $P105 = self."!PREFIX__!subrule"("ws", "")
    new $P106, "ResizablePMCArray"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infixish"  :subid("297_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1267
    .local string rx2272_tgt
    .local int rx2272_pos
    .local int rx2272_off
    .local int rx2272_eos
    .local int rx2272_rep
    .local pmc rx2272_cur
    .local pmc rx2272_debug
    (rx2272_cur, rx2272_pos, rx2272_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2272_cur
    .local pmc match
    .lex "$/", match
    length rx2272_eos, rx2272_tgt
    gt rx2272_pos, rx2272_eos, rx2272_done
    set rx2272_off, 0
    lt rx2272_pos, 2, rx2272_start
    sub rx2272_off, rx2272_pos, 1
    substr rx2272_tgt, rx2272_tgt, rx2272_off
  rx2272_start:
    eq $I10, 1, rx2272_restart
    if_null rx2272_debug, debug_1647
    rx2272_cur."!cursor_debug"("START", "infixish")
  debug_1647:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2273_done
    goto rxscan2273_scan
  rxscan2273_loop:
    (rx2272_pos) = rx2272_cur."from"()
    inc rx2272_pos
    rx2272_cur."!cursor_from"(rx2272_pos)
    ge rx2272_pos, rx2272_eos, rxscan2273_done
  rxscan2273_scan:
    set_addr $I10, rxscan2273_loop
    rx2272_cur."!mark_push"(0, rx2272_pos, $I10)
  rxscan2273_done:
  # rx subrule "infixstopper" subtype=zerowidth negate=1
    rx2272_cur."!cursor_pos"(rx2272_pos)
    $P10 = rx2272_cur."infixstopper"()
    if $P10, rx2272_fail
  # rx subrule "infix" subtype=capture negate=
    rx2272_cur."!cursor_pos"(rx2272_pos)
    $P10 = rx2272_cur."infix"()
    unless $P10, rx2272_fail
    rx2272_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("OPER=infix")
    rx2272_pos = $P10."pos"()
  # rx pass
    rx2272_cur."!cursor_pass"(rx2272_pos, "infixish")
    if_null rx2272_debug, debug_1648
    rx2272_cur."!cursor_debug"("PASS", "infixish", " at pos=", rx2272_pos)
  debug_1648:
    .return (rx2272_cur)
  rx2272_restart:
    if_null rx2272_debug, debug_1649
    rx2272_cur."!cursor_debug"("NEXT", "infixish")
  debug_1649:
  rx2272_fail:
    (rx2272_rep, rx2272_pos, $I10, $P10) = rx2272_cur."!mark_fail"(0)
    lt rx2272_pos, -1, rx2272_done
    eq rx2272_pos, -1, rx2272_fail
    jump $I10
  rx2272_done:
    rx2272_cur."!cursor_fail"()
    if_null rx2272_debug, debug_1650
    rx2272_cur."!cursor_debug"("FAIL", "infixish")
  debug_1650:
    .return (rx2272_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infixish"  :subid("298_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1267
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infixstopper"  :subid("299_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1268
    .local string rx2276_tgt
    .local int rx2276_pos
    .local int rx2276_off
    .local int rx2276_eos
    .local int rx2276_rep
    .local pmc rx2276_cur
    .local pmc rx2276_debug
    (rx2276_cur, rx2276_pos, rx2276_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2276_cur
    .local pmc match
    .lex "$/", match
    length rx2276_eos, rx2276_tgt
    gt rx2276_pos, rx2276_eos, rx2276_done
    set rx2276_off, 0
    lt rx2276_pos, 2, rx2276_start
    sub rx2276_off, rx2276_pos, 1
    substr rx2276_tgt, rx2276_tgt, rx2276_off
  rx2276_start:
    eq $I10, 1, rx2276_restart
    if_null rx2276_debug, debug_1651
    rx2276_cur."!cursor_debug"("START", "infixstopper")
  debug_1651:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2277_done
    goto rxscan2277_scan
  rxscan2277_loop:
    (rx2276_pos) = rx2276_cur."from"()
    inc rx2276_pos
    rx2276_cur."!cursor_from"(rx2276_pos)
    ge rx2276_pos, rx2276_eos, rxscan2277_done
  rxscan2277_scan:
    set_addr $I10, rxscan2277_loop
    rx2276_cur."!mark_push"(0, rx2276_pos, $I10)
  rxscan2277_done:
  # rx subrule "lambda" subtype=zerowidth negate=
    rx2276_cur."!cursor_pos"(rx2276_pos)
    $P10 = rx2276_cur."lambda"()
    unless $P10, rx2276_fail
  # rx pass
    rx2276_cur."!cursor_pass"(rx2276_pos, "infixstopper")
    if_null rx2276_debug, debug_1652
    rx2276_cur."!cursor_debug"("PASS", "infixstopper", " at pos=", rx2276_pos)
  debug_1652:
    .return (rx2276_cur)
  rx2276_restart:
    if_null rx2276_debug, debug_1653
    rx2276_cur."!cursor_debug"("NEXT", "infixstopper")
  debug_1653:
  rx2276_fail:
    (rx2276_rep, rx2276_pos, $I10, $P10) = rx2276_cur."!mark_fail"(0)
    lt rx2276_pos, -1, rx2276_done
    eq rx2276_pos, -1, rx2276_fail
    jump $I10
  rx2276_done:
    rx2276_cur."!cursor_fail"()
    if_null rx2276_debug, debug_1654
    rx2276_cur."!cursor_debug"("FAIL", "infixstopper")
  debug_1654:
    .return (rx2276_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infixstopper"  :subid("300_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1268
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<[ ]>"  :subid("301_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1270
    .local string rx2280_tgt
    .local int rx2280_pos
    .local int rx2280_off
    .local int rx2280_eos
    .local int rx2280_rep
    .local pmc rx2280_cur
    .local pmc rx2280_debug
    (rx2280_cur, rx2280_pos, rx2280_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2280_cur
    .local pmc match
    .lex "$/", match
    length rx2280_eos, rx2280_tgt
    gt rx2280_pos, rx2280_eos, rx2280_done
    set rx2280_off, 0
    lt rx2280_pos, 2, rx2280_start
    sub rx2280_off, rx2280_pos, 1
    substr rx2280_tgt, rx2280_tgt, rx2280_off
  rx2280_start:
    eq $I10, 1, rx2280_restart
    if_null rx2280_debug, debug_1655
    rx2280_cur."!cursor_debug"("START", "postcircumfix:sym<[ ]>")
  debug_1655:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2281_done
    goto rxscan2281_scan
  rxscan2281_loop:
    (rx2280_pos) = rx2280_cur."from"()
    inc rx2280_pos
    rx2280_cur."!cursor_from"(rx2280_pos)
    ge rx2280_pos, rx2280_eos, rxscan2281_done
  rxscan2281_scan:
    set_addr $I10, rxscan2281_loop
    rx2280_cur."!mark_push"(0, rx2280_pos, $I10)
  rxscan2281_done:
.annotate 'line', 1271
  # rx literal  "["
    add $I11, rx2280_pos, 1
    gt $I11, rx2280_eos, rx2280_fail
    sub $I11, rx2280_pos, rx2280_off
    ord $I11, rx2280_tgt, $I11
    ne $I11, 91, rx2280_fail
    add rx2280_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2280_cur."!cursor_pos"(rx2280_pos)
    $P10 = rx2280_cur."ws"()
    unless $P10, rx2280_fail
    rx2280_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx2280_cur."!cursor_pos"(rx2280_pos)
    $P10 = rx2280_cur."EXPR"()
    unless $P10, rx2280_fail
    rx2280_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx2280_pos = $P10."pos"()
  # rx literal  "]"
    add $I11, rx2280_pos, 1
    gt $I11, rx2280_eos, rx2280_fail
    sub $I11, rx2280_pos, rx2280_off
    ord $I11, rx2280_tgt, $I11
    ne $I11, 93, rx2280_fail
    add rx2280_pos, 1
.annotate 'line', 1272
  # rx subrule "O" subtype=capture negate=
    rx2280_cur."!cursor_pos"(rx2280_pos)
    $P10 = rx2280_cur."O"("%methodop")
    unless $P10, rx2280_fail
    rx2280_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2280_pos = $P10."pos"()
.annotate 'line', 1270
  # rx pass
    rx2280_cur."!cursor_pass"(rx2280_pos, "postcircumfix:sym<[ ]>")
    if_null rx2280_debug, debug_1656
    rx2280_cur."!cursor_debug"("PASS", "postcircumfix:sym<[ ]>", " at pos=", rx2280_pos)
  debug_1656:
    .return (rx2280_cur)
  rx2280_restart:
    if_null rx2280_debug, debug_1657
    rx2280_cur."!cursor_debug"("NEXT", "postcircumfix:sym<[ ]>")
  debug_1657:
  rx2280_fail:
    (rx2280_rep, rx2280_pos, $I10, $P10) = rx2280_cur."!mark_fail"(0)
    lt rx2280_pos, -1, rx2280_done
    eq rx2280_pos, -1, rx2280_fail
    jump $I10
  rx2280_done:
    rx2280_cur."!cursor_fail"()
    if_null rx2280_debug, debug_1658
    rx2280_cur."!cursor_debug"("FAIL", "postcircumfix:sym<[ ]>")
  debug_1658:
    .return (rx2280_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postcircumfix:sym<[ ]>"  :subid("302_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1270
    $P103 = self."!PREFIX__!subrule"("ws", "[")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<{ }>"  :subid("303_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1275
    .local string rx2284_tgt
    .local int rx2284_pos
    .local int rx2284_off
    .local int rx2284_eos
    .local int rx2284_rep
    .local pmc rx2284_cur
    .local pmc rx2284_debug
    (rx2284_cur, rx2284_pos, rx2284_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2284_cur
    .local pmc match
    .lex "$/", match
    length rx2284_eos, rx2284_tgt
    gt rx2284_pos, rx2284_eos, rx2284_done
    set rx2284_off, 0
    lt rx2284_pos, 2, rx2284_start
    sub rx2284_off, rx2284_pos, 1
    substr rx2284_tgt, rx2284_tgt, rx2284_off
  rx2284_start:
    eq $I10, 1, rx2284_restart
    if_null rx2284_debug, debug_1659
    rx2284_cur."!cursor_debug"("START", "postcircumfix:sym<{ }>")
  debug_1659:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2285_done
    goto rxscan2285_scan
  rxscan2285_loop:
    (rx2284_pos) = rx2284_cur."from"()
    inc rx2284_pos
    rx2284_cur."!cursor_from"(rx2284_pos)
    ge rx2284_pos, rx2284_eos, rxscan2285_done
  rxscan2285_scan:
    set_addr $I10, rxscan2285_loop
    rx2284_cur."!mark_push"(0, rx2284_pos, $I10)
  rxscan2285_done:
.annotate 'line', 1276
  # rx literal  "{"
    add $I11, rx2284_pos, 1
    gt $I11, rx2284_eos, rx2284_fail
    sub $I11, rx2284_pos, rx2284_off
    ord $I11, rx2284_tgt, $I11
    ne $I11, 123, rx2284_fail
    add rx2284_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2284_cur."!cursor_pos"(rx2284_pos)
    $P10 = rx2284_cur."ws"()
    unless $P10, rx2284_fail
    rx2284_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx2284_cur."!cursor_pos"(rx2284_pos)
    $P10 = rx2284_cur."EXPR"()
    unless $P10, rx2284_fail
    rx2284_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx2284_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx2284_pos, 1
    gt $I11, rx2284_eos, rx2284_fail
    sub $I11, rx2284_pos, rx2284_off
    ord $I11, rx2284_tgt, $I11
    ne $I11, 125, rx2284_fail
    add rx2284_pos, 1
.annotate 'line', 1277
  # rx subrule "O" subtype=capture negate=
    rx2284_cur."!cursor_pos"(rx2284_pos)
    $P10 = rx2284_cur."O"("%methodop")
    unless $P10, rx2284_fail
    rx2284_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2284_pos = $P10."pos"()
.annotate 'line', 1275
  # rx pass
    rx2284_cur."!cursor_pass"(rx2284_pos, "postcircumfix:sym<{ }>")
    if_null rx2284_debug, debug_1660
    rx2284_cur."!cursor_debug"("PASS", "postcircumfix:sym<{ }>", " at pos=", rx2284_pos)
  debug_1660:
    .return (rx2284_cur)
  rx2284_restart:
    if_null rx2284_debug, debug_1661
    rx2284_cur."!cursor_debug"("NEXT", "postcircumfix:sym<{ }>")
  debug_1661:
  rx2284_fail:
    (rx2284_rep, rx2284_pos, $I10, $P10) = rx2284_cur."!mark_fail"(0)
    lt rx2284_pos, -1, rx2284_done
    eq rx2284_pos, -1, rx2284_fail
    jump $I10
  rx2284_done:
    rx2284_cur."!cursor_fail"()
    if_null rx2284_debug, debug_1662
    rx2284_cur."!cursor_debug"("FAIL", "postcircumfix:sym<{ }>")
  debug_1662:
    .return (rx2284_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postcircumfix:sym<{ }>"  :subid("304_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1275
    $P103 = self."!PREFIX__!subrule"("ws", "{")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<ang>"  :subid("305_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1280
    .local string rx2288_tgt
    .local int rx2288_pos
    .local int rx2288_off
    .local int rx2288_eos
    .local int rx2288_rep
    .local pmc rx2288_cur
    .local pmc rx2288_debug
    (rx2288_cur, rx2288_pos, rx2288_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2288_cur
    .local pmc match
    .lex "$/", match
    length rx2288_eos, rx2288_tgt
    gt rx2288_pos, rx2288_eos, rx2288_done
    set rx2288_off, 0
    lt rx2288_pos, 2, rx2288_start
    sub rx2288_off, rx2288_pos, 1
    substr rx2288_tgt, rx2288_tgt, rx2288_off
  rx2288_start:
    eq $I10, 1, rx2288_restart
    if_null rx2288_debug, debug_1663
    rx2288_cur."!cursor_debug"("START", "postcircumfix:sym<ang>")
  debug_1663:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2289_done
    goto rxscan2289_scan
  rxscan2289_loop:
    (rx2288_pos) = rx2288_cur."from"()
    inc rx2288_pos
    rx2288_cur."!cursor_from"(rx2288_pos)
    ge rx2288_pos, rx2288_eos, rxscan2289_done
  rxscan2289_scan:
    set_addr $I10, rxscan2289_loop
    rx2288_cur."!mark_push"(0, rx2288_pos, $I10)
  rxscan2289_done:
.annotate 'line', 1281
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2288_pos, rx2288_off
    substr $S10, rx2288_tgt, $I10, 1
    index $I11, "<", $S10
    lt $I11, 0, rx2288_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2288_cur."!cursor_pos"(rx2288_pos)
    $P10 = rx2288_cur."quote_EXPR"(":q")
    unless $P10, rx2288_fail
    rx2288_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2288_pos = $P10."pos"()
.annotate 'line', 1282
  # rx subrule "O" subtype=capture negate=
    rx2288_cur."!cursor_pos"(rx2288_pos)
    $P10 = rx2288_cur."O"("%methodop")
    unless $P10, rx2288_fail
    rx2288_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2288_pos = $P10."pos"()
.annotate 'line', 1280
  # rx pass
    rx2288_cur."!cursor_pass"(rx2288_pos, "postcircumfix:sym<ang>")
    if_null rx2288_debug, debug_1664
    rx2288_cur."!cursor_debug"("PASS", "postcircumfix:sym<ang>", " at pos=", rx2288_pos)
  debug_1664:
    .return (rx2288_cur)
  rx2288_restart:
    if_null rx2288_debug, debug_1665
    rx2288_cur."!cursor_debug"("NEXT", "postcircumfix:sym<ang>")
  debug_1665:
  rx2288_fail:
    (rx2288_rep, rx2288_pos, $I10, $P10) = rx2288_cur."!mark_fail"(0)
    lt rx2288_pos, -1, rx2288_done
    eq rx2288_pos, -1, rx2288_fail
    jump $I10
  rx2288_done:
    rx2288_cur."!cursor_fail"()
    if_null rx2288_debug, debug_1666
    rx2288_cur."!cursor_debug"("FAIL", "postcircumfix:sym<ang>")
  debug_1666:
    .return (rx2288_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postcircumfix:sym<ang>"  :subid("306_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1280
    new $P103, "ResizablePMCArray"
    push $P103, "<"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<( )>"  :subid("307_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1285
    .local string rx2292_tgt
    .local int rx2292_pos
    .local int rx2292_off
    .local int rx2292_eos
    .local int rx2292_rep
    .local pmc rx2292_cur
    .local pmc rx2292_debug
    (rx2292_cur, rx2292_pos, rx2292_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2292_cur
    .local pmc match
    .lex "$/", match
    length rx2292_eos, rx2292_tgt
    gt rx2292_pos, rx2292_eos, rx2292_done
    set rx2292_off, 0
    lt rx2292_pos, 2, rx2292_start
    sub rx2292_off, rx2292_pos, 1
    substr rx2292_tgt, rx2292_tgt, rx2292_off
  rx2292_start:
    eq $I10, 1, rx2292_restart
    if_null rx2292_debug, debug_1667
    rx2292_cur."!cursor_debug"("START", "postcircumfix:sym<( )>")
  debug_1667:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2293_done
    goto rxscan2293_scan
  rxscan2293_loop:
    (rx2292_pos) = rx2292_cur."from"()
    inc rx2292_pos
    rx2292_cur."!cursor_from"(rx2292_pos)
    ge rx2292_pos, rx2292_eos, rxscan2293_done
  rxscan2293_scan:
    set_addr $I10, rxscan2293_loop
    rx2292_cur."!mark_push"(0, rx2292_pos, $I10)
  rxscan2293_done:
.annotate 'line', 1286
  # rx literal  "("
    add $I11, rx2292_pos, 1
    gt $I11, rx2292_eos, rx2292_fail
    sub $I11, rx2292_pos, rx2292_off
    ord $I11, rx2292_tgt, $I11
    ne $I11, 40, rx2292_fail
    add rx2292_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2292_cur."!cursor_pos"(rx2292_pos)
    $P10 = rx2292_cur."ws"()
    unless $P10, rx2292_fail
    rx2292_pos = $P10."pos"()
  # rx subrule "arglist" subtype=capture negate=
    rx2292_cur."!cursor_pos"(rx2292_pos)
    $P10 = rx2292_cur."arglist"()
    unless $P10, rx2292_fail
    rx2292_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("arglist")
    rx2292_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx2292_pos, 1
    gt $I11, rx2292_eos, rx2292_fail
    sub $I11, rx2292_pos, rx2292_off
    ord $I11, rx2292_tgt, $I11
    ne $I11, 41, rx2292_fail
    add rx2292_pos, 1
.annotate 'line', 1287
  # rx subrule "O" subtype=capture negate=
    rx2292_cur."!cursor_pos"(rx2292_pos)
    $P10 = rx2292_cur."O"("%methodop")
    unless $P10, rx2292_fail
    rx2292_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2292_pos = $P10."pos"()
.annotate 'line', 1285
  # rx pass
    rx2292_cur."!cursor_pass"(rx2292_pos, "postcircumfix:sym<( )>")
    if_null rx2292_debug, debug_1668
    rx2292_cur."!cursor_debug"("PASS", "postcircumfix:sym<( )>", " at pos=", rx2292_pos)
  debug_1668:
    .return (rx2292_cur)
  rx2292_restart:
    if_null rx2292_debug, debug_1669
    rx2292_cur."!cursor_debug"("NEXT", "postcircumfix:sym<( )>")
  debug_1669:
  rx2292_fail:
    (rx2292_rep, rx2292_pos, $I10, $P10) = rx2292_cur."!mark_fail"(0)
    lt rx2292_pos, -1, rx2292_done
    eq rx2292_pos, -1, rx2292_fail
    jump $I10
  rx2292_done:
    rx2292_cur."!cursor_fail"()
    if_null rx2292_debug, debug_1670
    rx2292_cur."!cursor_debug"("FAIL", "postcircumfix:sym<( )>")
  debug_1670:
    .return (rx2292_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postcircumfix:sym<( )>"  :subid("308_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1285
    $P103 = self."!PREFIX__!subrule"("ws", "(")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postfix:sym<.>"  :subid("309_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1290
    .local string rx2296_tgt
    .local int rx2296_pos
    .local int rx2296_off
    .local int rx2296_eos
    .local int rx2296_rep
    .local pmc rx2296_cur
    .local pmc rx2296_debug
    (rx2296_cur, rx2296_pos, rx2296_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2296_cur
    .local pmc match
    .lex "$/", match
    length rx2296_eos, rx2296_tgt
    gt rx2296_pos, rx2296_eos, rx2296_done
    set rx2296_off, 0
    lt rx2296_pos, 2, rx2296_start
    sub rx2296_off, rx2296_pos, 1
    substr rx2296_tgt, rx2296_tgt, rx2296_off
  rx2296_start:
    eq $I10, 1, rx2296_restart
    if_null rx2296_debug, debug_1671
    rx2296_cur."!cursor_debug"("START", "postfix:sym<.>")
  debug_1671:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2297_done
    goto rxscan2297_scan
  rxscan2297_loop:
    (rx2296_pos) = rx2296_cur."from"()
    inc rx2296_pos
    rx2296_cur."!cursor_from"(rx2296_pos)
    ge rx2296_pos, rx2296_eos, rxscan2297_done
  rxscan2297_scan:
    set_addr $I10, rxscan2297_loop
    rx2296_cur."!mark_push"(0, rx2296_pos, $I10)
  rxscan2297_done:
  # rx subrule "dotty" subtype=capture negate=
    rx2296_cur."!cursor_pos"(rx2296_pos)
    $P10 = rx2296_cur."dotty"()
    unless $P10, rx2296_fail
    rx2296_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("dotty")
    rx2296_pos = $P10."pos"()
  # rx subrule "O" subtype=capture negate=
    rx2296_cur."!cursor_pos"(rx2296_pos)
    $P10 = rx2296_cur."O"("%methodop")
    unless $P10, rx2296_fail
    rx2296_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2296_pos = $P10."pos"()
  # rx pass
    rx2296_cur."!cursor_pass"(rx2296_pos, "postfix:sym<.>")
    if_null rx2296_debug, debug_1672
    rx2296_cur."!cursor_debug"("PASS", "postfix:sym<.>", " at pos=", rx2296_pos)
  debug_1672:
    .return (rx2296_cur)
  rx2296_restart:
    if_null rx2296_debug, debug_1673
    rx2296_cur."!cursor_debug"("NEXT", "postfix:sym<.>")
  debug_1673:
  rx2296_fail:
    (rx2296_rep, rx2296_pos, $I10, $P10) = rx2296_cur."!mark_fail"(0)
    lt rx2296_pos, -1, rx2296_done
    eq rx2296_pos, -1, rx2296_fail
    jump $I10
  rx2296_done:
    rx2296_cur."!cursor_fail"()
    if_null rx2296_debug, debug_1674
    rx2296_cur."!cursor_debug"("FAIL", "postfix:sym<.>")
  debug_1674:
    .return (rx2296_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postfix:sym<.>"  :subid("310_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1290
    $P103 = self."!PREFIX__!subrule"("dotty", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<++>"  :subid("311_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1292
    .local string rx2300_tgt
    .local int rx2300_pos
    .local int rx2300_off
    .local int rx2300_eos
    .local int rx2300_rep
    .local pmc rx2300_cur
    .local pmc rx2300_debug
    (rx2300_cur, rx2300_pos, rx2300_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2300_cur
    .local pmc match
    .lex "$/", match
    length rx2300_eos, rx2300_tgt
    gt rx2300_pos, rx2300_eos, rx2300_done
    set rx2300_off, 0
    lt rx2300_pos, 2, rx2300_start
    sub rx2300_off, rx2300_pos, 1
    substr rx2300_tgt, rx2300_tgt, rx2300_off
  rx2300_start:
    eq $I10, 1, rx2300_restart
    if_null rx2300_debug, debug_1675
    rx2300_cur."!cursor_debug"("START", "prefix:sym<++>")
  debug_1675:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2301_done
    goto rxscan2301_scan
  rxscan2301_loop:
    (rx2300_pos) = rx2300_cur."from"()
    inc rx2300_pos
    rx2300_cur."!cursor_from"(rx2300_pos)
    ge rx2300_pos, rx2300_eos, rxscan2301_done
  rxscan2301_scan:
    set_addr $I10, rxscan2301_loop
    rx2300_cur."!mark_push"(0, rx2300_pos, $I10)
  rxscan2301_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2302_fail
    rx2300_cur."!mark_push"(0, rx2300_pos, $I10)
  # rx literal  "++"
    add $I11, rx2300_pos, 2
    gt $I11, rx2300_eos, rx2300_fail
    sub $I11, rx2300_pos, rx2300_off
    substr $S10, rx2300_tgt, $I11, 2
    ne $S10, "++", rx2300_fail
    add rx2300_pos, 2
    set_addr $I10, rxcap_2302_fail
    ($I12, $I11) = rx2300_cur."!mark_peek"($I10)
    rx2300_cur."!cursor_pos"($I11)
    ($P10) = rx2300_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2300_pos, "")
    rx2300_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2302_done
  rxcap_2302_fail:
    goto rx2300_fail
  rxcap_2302_done:
  # rx subrule "O" subtype=capture negate=
    rx2300_cur."!cursor_pos"(rx2300_pos)
    $P10 = rx2300_cur."O"("%autoincrement, :pirop<inc>")
    unless $P10, rx2300_fail
    rx2300_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2300_pos = $P10."pos"()
  # rx pass
    rx2300_cur."!cursor_pass"(rx2300_pos, "prefix:sym<++>")
    if_null rx2300_debug, debug_1676
    rx2300_cur."!cursor_debug"("PASS", "prefix:sym<++>", " at pos=", rx2300_pos)
  debug_1676:
    .return (rx2300_cur)
  rx2300_restart:
    if_null rx2300_debug, debug_1677
    rx2300_cur."!cursor_debug"("NEXT", "prefix:sym<++>")
  debug_1677:
  rx2300_fail:
    (rx2300_rep, rx2300_pos, $I10, $P10) = rx2300_cur."!mark_fail"(0)
    lt rx2300_pos, -1, rx2300_done
    eq rx2300_pos, -1, rx2300_fail
    jump $I10
  rx2300_done:
    rx2300_cur."!cursor_fail"()
    if_null rx2300_debug, debug_1678
    rx2300_cur."!cursor_debug"("FAIL", "prefix:sym<++>")
  debug_1678:
    .return (rx2300_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<++>"  :subid("312_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1292
    $P103 = self."!PREFIX__!subrule"("O", "++")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<-->"  :subid("313_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1293
    .local string rx2305_tgt
    .local int rx2305_pos
    .local int rx2305_off
    .local int rx2305_eos
    .local int rx2305_rep
    .local pmc rx2305_cur
    .local pmc rx2305_debug
    (rx2305_cur, rx2305_pos, rx2305_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2305_cur
    .local pmc match
    .lex "$/", match
    length rx2305_eos, rx2305_tgt
    gt rx2305_pos, rx2305_eos, rx2305_done
    set rx2305_off, 0
    lt rx2305_pos, 2, rx2305_start
    sub rx2305_off, rx2305_pos, 1
    substr rx2305_tgt, rx2305_tgt, rx2305_off
  rx2305_start:
    eq $I10, 1, rx2305_restart
    if_null rx2305_debug, debug_1679
    rx2305_cur."!cursor_debug"("START", "prefix:sym<-->")
  debug_1679:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2306_done
    goto rxscan2306_scan
  rxscan2306_loop:
    (rx2305_pos) = rx2305_cur."from"()
    inc rx2305_pos
    rx2305_cur."!cursor_from"(rx2305_pos)
    ge rx2305_pos, rx2305_eos, rxscan2306_done
  rxscan2306_scan:
    set_addr $I10, rxscan2306_loop
    rx2305_cur."!mark_push"(0, rx2305_pos, $I10)
  rxscan2306_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2307_fail
    rx2305_cur."!mark_push"(0, rx2305_pos, $I10)
  # rx literal  "--"
    add $I11, rx2305_pos, 2
    gt $I11, rx2305_eos, rx2305_fail
    sub $I11, rx2305_pos, rx2305_off
    substr $S10, rx2305_tgt, $I11, 2
    ne $S10, "--", rx2305_fail
    add rx2305_pos, 2
    set_addr $I10, rxcap_2307_fail
    ($I12, $I11) = rx2305_cur."!mark_peek"($I10)
    rx2305_cur."!cursor_pos"($I11)
    ($P10) = rx2305_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2305_pos, "")
    rx2305_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2307_done
  rxcap_2307_fail:
    goto rx2305_fail
  rxcap_2307_done:
  # rx subrule "O" subtype=capture negate=
    rx2305_cur."!cursor_pos"(rx2305_pos)
    $P10 = rx2305_cur."O"("%autoincrement, :pirop<dec>")
    unless $P10, rx2305_fail
    rx2305_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2305_pos = $P10."pos"()
  # rx pass
    rx2305_cur."!cursor_pass"(rx2305_pos, "prefix:sym<-->")
    if_null rx2305_debug, debug_1680
    rx2305_cur."!cursor_debug"("PASS", "prefix:sym<-->", " at pos=", rx2305_pos)
  debug_1680:
    .return (rx2305_cur)
  rx2305_restart:
    if_null rx2305_debug, debug_1681
    rx2305_cur."!cursor_debug"("NEXT", "prefix:sym<-->")
  debug_1681:
  rx2305_fail:
    (rx2305_rep, rx2305_pos, $I10, $P10) = rx2305_cur."!mark_fail"(0)
    lt rx2305_pos, -1, rx2305_done
    eq rx2305_pos, -1, rx2305_fail
    jump $I10
  rx2305_done:
    rx2305_cur."!cursor_fail"()
    if_null rx2305_debug, debug_1682
    rx2305_cur."!cursor_debug"("FAIL", "prefix:sym<-->")
  debug_1682:
    .return (rx2305_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<-->"  :subid("314_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1293
    $P103 = self."!PREFIX__!subrule"("O", "--")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postfix:sym<++>"  :subid("315_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1296
    .local string rx2310_tgt
    .local int rx2310_pos
    .local int rx2310_off
    .local int rx2310_eos
    .local int rx2310_rep
    .local pmc rx2310_cur
    .local pmc rx2310_debug
    (rx2310_cur, rx2310_pos, rx2310_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2310_cur
    .local pmc match
    .lex "$/", match
    length rx2310_eos, rx2310_tgt
    gt rx2310_pos, rx2310_eos, rx2310_done
    set rx2310_off, 0
    lt rx2310_pos, 2, rx2310_start
    sub rx2310_off, rx2310_pos, 1
    substr rx2310_tgt, rx2310_tgt, rx2310_off
  rx2310_start:
    eq $I10, 1, rx2310_restart
    if_null rx2310_debug, debug_1683
    rx2310_cur."!cursor_debug"("START", "postfix:sym<++>")
  debug_1683:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2311_done
    goto rxscan2311_scan
  rxscan2311_loop:
    (rx2310_pos) = rx2310_cur."from"()
    inc rx2310_pos
    rx2310_cur."!cursor_from"(rx2310_pos)
    ge rx2310_pos, rx2310_eos, rxscan2311_done
  rxscan2311_scan:
    set_addr $I10, rxscan2311_loop
    rx2310_cur."!mark_push"(0, rx2310_pos, $I10)
  rxscan2311_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2312_fail
    rx2310_cur."!mark_push"(0, rx2310_pos, $I10)
  # rx literal  "++"
    add $I11, rx2310_pos, 2
    gt $I11, rx2310_eos, rx2310_fail
    sub $I11, rx2310_pos, rx2310_off
    substr $S10, rx2310_tgt, $I11, 2
    ne $S10, "++", rx2310_fail
    add rx2310_pos, 2
    set_addr $I10, rxcap_2312_fail
    ($I12, $I11) = rx2310_cur."!mark_peek"($I10)
    rx2310_cur."!cursor_pos"($I11)
    ($P10) = rx2310_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2310_pos, "")
    rx2310_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2312_done
  rxcap_2312_fail:
    goto rx2310_fail
  rxcap_2312_done:
  # rx subrule "O" subtype=capture negate=
    rx2310_cur."!cursor_pos"(rx2310_pos)
    $P10 = rx2310_cur."O"("%autoincrement")
    unless $P10, rx2310_fail
    rx2310_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2310_pos = $P10."pos"()
  # rx pass
    rx2310_cur."!cursor_pass"(rx2310_pos, "postfix:sym<++>")
    if_null rx2310_debug, debug_1684
    rx2310_cur."!cursor_debug"("PASS", "postfix:sym<++>", " at pos=", rx2310_pos)
  debug_1684:
    .return (rx2310_cur)
  rx2310_restart:
    if_null rx2310_debug, debug_1685
    rx2310_cur."!cursor_debug"("NEXT", "postfix:sym<++>")
  debug_1685:
  rx2310_fail:
    (rx2310_rep, rx2310_pos, $I10, $P10) = rx2310_cur."!mark_fail"(0)
    lt rx2310_pos, -1, rx2310_done
    eq rx2310_pos, -1, rx2310_fail
    jump $I10
  rx2310_done:
    rx2310_cur."!cursor_fail"()
    if_null rx2310_debug, debug_1686
    rx2310_cur."!cursor_debug"("FAIL", "postfix:sym<++>")
  debug_1686:
    .return (rx2310_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postfix:sym<++>"  :subid("316_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1296
    $P103 = self."!PREFIX__!subrule"("O", "++")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postfix:sym<-->"  :subid("317_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1297
    .local string rx2315_tgt
    .local int rx2315_pos
    .local int rx2315_off
    .local int rx2315_eos
    .local int rx2315_rep
    .local pmc rx2315_cur
    .local pmc rx2315_debug
    (rx2315_cur, rx2315_pos, rx2315_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2315_cur
    .local pmc match
    .lex "$/", match
    length rx2315_eos, rx2315_tgt
    gt rx2315_pos, rx2315_eos, rx2315_done
    set rx2315_off, 0
    lt rx2315_pos, 2, rx2315_start
    sub rx2315_off, rx2315_pos, 1
    substr rx2315_tgt, rx2315_tgt, rx2315_off
  rx2315_start:
    eq $I10, 1, rx2315_restart
    if_null rx2315_debug, debug_1687
    rx2315_cur."!cursor_debug"("START", "postfix:sym<-->")
  debug_1687:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2316_done
    goto rxscan2316_scan
  rxscan2316_loop:
    (rx2315_pos) = rx2315_cur."from"()
    inc rx2315_pos
    rx2315_cur."!cursor_from"(rx2315_pos)
    ge rx2315_pos, rx2315_eos, rxscan2316_done
  rxscan2316_scan:
    set_addr $I10, rxscan2316_loop
    rx2315_cur."!mark_push"(0, rx2315_pos, $I10)
  rxscan2316_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2317_fail
    rx2315_cur."!mark_push"(0, rx2315_pos, $I10)
  # rx literal  "--"
    add $I11, rx2315_pos, 2
    gt $I11, rx2315_eos, rx2315_fail
    sub $I11, rx2315_pos, rx2315_off
    substr $S10, rx2315_tgt, $I11, 2
    ne $S10, "--", rx2315_fail
    add rx2315_pos, 2
    set_addr $I10, rxcap_2317_fail
    ($I12, $I11) = rx2315_cur."!mark_peek"($I10)
    rx2315_cur."!cursor_pos"($I11)
    ($P10) = rx2315_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2315_pos, "")
    rx2315_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2317_done
  rxcap_2317_fail:
    goto rx2315_fail
  rxcap_2317_done:
  # rx subrule "O" subtype=capture negate=
    rx2315_cur."!cursor_pos"(rx2315_pos)
    $P10 = rx2315_cur."O"("%autoincrement")
    unless $P10, rx2315_fail
    rx2315_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2315_pos = $P10."pos"()
  # rx pass
    rx2315_cur."!cursor_pass"(rx2315_pos, "postfix:sym<-->")
    if_null rx2315_debug, debug_1688
    rx2315_cur."!cursor_debug"("PASS", "postfix:sym<-->", " at pos=", rx2315_pos)
  debug_1688:
    .return (rx2315_cur)
  rx2315_restart:
    if_null rx2315_debug, debug_1689
    rx2315_cur."!cursor_debug"("NEXT", "postfix:sym<-->")
  debug_1689:
  rx2315_fail:
    (rx2315_rep, rx2315_pos, $I10, $P10) = rx2315_cur."!mark_fail"(0)
    lt rx2315_pos, -1, rx2315_done
    eq rx2315_pos, -1, rx2315_fail
    jump $I10
  rx2315_done:
    rx2315_cur."!cursor_fail"()
    if_null rx2315_debug, debug_1690
    rx2315_cur."!cursor_debug"("FAIL", "postfix:sym<-->")
  debug_1690:
    .return (rx2315_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postfix:sym<-->"  :subid("318_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1297
    $P103 = self."!PREFIX__!subrule"("O", "--")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<**>"  :subid("319_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1299
    .local string rx2320_tgt
    .local int rx2320_pos
    .local int rx2320_off
    .local int rx2320_eos
    .local int rx2320_rep
    .local pmc rx2320_cur
    .local pmc rx2320_debug
    (rx2320_cur, rx2320_pos, rx2320_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2320_cur
    .local pmc match
    .lex "$/", match
    length rx2320_eos, rx2320_tgt
    gt rx2320_pos, rx2320_eos, rx2320_done
    set rx2320_off, 0
    lt rx2320_pos, 2, rx2320_start
    sub rx2320_off, rx2320_pos, 1
    substr rx2320_tgt, rx2320_tgt, rx2320_off
  rx2320_start:
    eq $I10, 1, rx2320_restart
    if_null rx2320_debug, debug_1691
    rx2320_cur."!cursor_debug"("START", "infix:sym<**>")
  debug_1691:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2321_done
    goto rxscan2321_scan
  rxscan2321_loop:
    (rx2320_pos) = rx2320_cur."from"()
    inc rx2320_pos
    rx2320_cur."!cursor_from"(rx2320_pos)
    ge rx2320_pos, rx2320_eos, rxscan2321_done
  rxscan2321_scan:
    set_addr $I10, rxscan2321_loop
    rx2320_cur."!mark_push"(0, rx2320_pos, $I10)
  rxscan2321_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2322_fail
    rx2320_cur."!mark_push"(0, rx2320_pos, $I10)
  # rx literal  "**"
    add $I11, rx2320_pos, 2
    gt $I11, rx2320_eos, rx2320_fail
    sub $I11, rx2320_pos, rx2320_off
    substr $S10, rx2320_tgt, $I11, 2
    ne $S10, "**", rx2320_fail
    add rx2320_pos, 2
    set_addr $I10, rxcap_2322_fail
    ($I12, $I11) = rx2320_cur."!mark_peek"($I10)
    rx2320_cur."!cursor_pos"($I11)
    ($P10) = rx2320_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2320_pos, "")
    rx2320_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2322_done
  rxcap_2322_fail:
    goto rx2320_fail
  rxcap_2322_done:
  # rx subrule "O" subtype=capture negate=
    rx2320_cur."!cursor_pos"(rx2320_pos)
    $P10 = rx2320_cur."O"("%exponentiation, :pirop<pow__NNN>")
    unless $P10, rx2320_fail
    rx2320_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2320_pos = $P10."pos"()
  # rx pass
    rx2320_cur."!cursor_pass"(rx2320_pos, "infix:sym<**>")
    if_null rx2320_debug, debug_1692
    rx2320_cur."!cursor_debug"("PASS", "infix:sym<**>", " at pos=", rx2320_pos)
  debug_1692:
    .return (rx2320_cur)
  rx2320_restart:
    if_null rx2320_debug, debug_1693
    rx2320_cur."!cursor_debug"("NEXT", "infix:sym<**>")
  debug_1693:
  rx2320_fail:
    (rx2320_rep, rx2320_pos, $I10, $P10) = rx2320_cur."!mark_fail"(0)
    lt rx2320_pos, -1, rx2320_done
    eq rx2320_pos, -1, rx2320_fail
    jump $I10
  rx2320_done:
    rx2320_cur."!cursor_fail"()
    if_null rx2320_debug, debug_1694
    rx2320_cur."!cursor_debug"("FAIL", "infix:sym<**>")
  debug_1694:
    .return (rx2320_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<**>"  :subid("320_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1299
    $P103 = self."!PREFIX__!subrule"("O", "**")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<+>"  :subid("321_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1301
    .local string rx2325_tgt
    .local int rx2325_pos
    .local int rx2325_off
    .local int rx2325_eos
    .local int rx2325_rep
    .local pmc rx2325_cur
    .local pmc rx2325_debug
    (rx2325_cur, rx2325_pos, rx2325_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2325_cur
    .local pmc match
    .lex "$/", match
    length rx2325_eos, rx2325_tgt
    gt rx2325_pos, rx2325_eos, rx2325_done
    set rx2325_off, 0
    lt rx2325_pos, 2, rx2325_start
    sub rx2325_off, rx2325_pos, 1
    substr rx2325_tgt, rx2325_tgt, rx2325_off
  rx2325_start:
    eq $I10, 1, rx2325_restart
    if_null rx2325_debug, debug_1695
    rx2325_cur."!cursor_debug"("START", "prefix:sym<+>")
  debug_1695:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2326_done
    goto rxscan2326_scan
  rxscan2326_loop:
    (rx2325_pos) = rx2325_cur."from"()
    inc rx2325_pos
    rx2325_cur."!cursor_from"(rx2325_pos)
    ge rx2325_pos, rx2325_eos, rxscan2326_done
  rxscan2326_scan:
    set_addr $I10, rxscan2326_loop
    rx2325_cur."!mark_push"(0, rx2325_pos, $I10)
  rxscan2326_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2327_fail
    rx2325_cur."!mark_push"(0, rx2325_pos, $I10)
  # rx literal  "+"
    add $I11, rx2325_pos, 1
    gt $I11, rx2325_eos, rx2325_fail
    sub $I11, rx2325_pos, rx2325_off
    ord $I11, rx2325_tgt, $I11
    ne $I11, 43, rx2325_fail
    add rx2325_pos, 1
    set_addr $I10, rxcap_2327_fail
    ($I12, $I11) = rx2325_cur."!mark_peek"($I10)
    rx2325_cur."!cursor_pos"($I11)
    ($P10) = rx2325_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2325_pos, "")
    rx2325_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2327_done
  rxcap_2327_fail:
    goto rx2325_fail
  rxcap_2327_done:
  # rx subrule "O" subtype=capture negate=
    rx2325_cur."!cursor_pos"(rx2325_pos)
    $P10 = rx2325_cur."O"("%symbolic_unary, :pirop<set N*>")
    unless $P10, rx2325_fail
    rx2325_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2325_pos = $P10."pos"()
  # rx pass
    rx2325_cur."!cursor_pass"(rx2325_pos, "prefix:sym<+>")
    if_null rx2325_debug, debug_1696
    rx2325_cur."!cursor_debug"("PASS", "prefix:sym<+>", " at pos=", rx2325_pos)
  debug_1696:
    .return (rx2325_cur)
  rx2325_restart:
    if_null rx2325_debug, debug_1697
    rx2325_cur."!cursor_debug"("NEXT", "prefix:sym<+>")
  debug_1697:
  rx2325_fail:
    (rx2325_rep, rx2325_pos, $I10, $P10) = rx2325_cur."!mark_fail"(0)
    lt rx2325_pos, -1, rx2325_done
    eq rx2325_pos, -1, rx2325_fail
    jump $I10
  rx2325_done:
    rx2325_cur."!cursor_fail"()
    if_null rx2325_debug, debug_1698
    rx2325_cur."!cursor_debug"("FAIL", "prefix:sym<+>")
  debug_1698:
    .return (rx2325_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<+>"  :subid("322_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1301
    $P103 = self."!PREFIX__!subrule"("O", "+")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<~>"  :subid("323_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1302
    .local string rx2330_tgt
    .local int rx2330_pos
    .local int rx2330_off
    .local int rx2330_eos
    .local int rx2330_rep
    .local pmc rx2330_cur
    .local pmc rx2330_debug
    (rx2330_cur, rx2330_pos, rx2330_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2330_cur
    .local pmc match
    .lex "$/", match
    length rx2330_eos, rx2330_tgt
    gt rx2330_pos, rx2330_eos, rx2330_done
    set rx2330_off, 0
    lt rx2330_pos, 2, rx2330_start
    sub rx2330_off, rx2330_pos, 1
    substr rx2330_tgt, rx2330_tgt, rx2330_off
  rx2330_start:
    eq $I10, 1, rx2330_restart
    if_null rx2330_debug, debug_1699
    rx2330_cur."!cursor_debug"("START", "prefix:sym<~>")
  debug_1699:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2331_done
    goto rxscan2331_scan
  rxscan2331_loop:
    (rx2330_pos) = rx2330_cur."from"()
    inc rx2330_pos
    rx2330_cur."!cursor_from"(rx2330_pos)
    ge rx2330_pos, rx2330_eos, rxscan2331_done
  rxscan2331_scan:
    set_addr $I10, rxscan2331_loop
    rx2330_cur."!mark_push"(0, rx2330_pos, $I10)
  rxscan2331_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2332_fail
    rx2330_cur."!mark_push"(0, rx2330_pos, $I10)
  # rx literal  "~"
    add $I11, rx2330_pos, 1
    gt $I11, rx2330_eos, rx2330_fail
    sub $I11, rx2330_pos, rx2330_off
    ord $I11, rx2330_tgt, $I11
    ne $I11, 126, rx2330_fail
    add rx2330_pos, 1
    set_addr $I10, rxcap_2332_fail
    ($I12, $I11) = rx2330_cur."!mark_peek"($I10)
    rx2330_cur."!cursor_pos"($I11)
    ($P10) = rx2330_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2330_pos, "")
    rx2330_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2332_done
  rxcap_2332_fail:
    goto rx2330_fail
  rxcap_2332_done:
  # rx subrule "O" subtype=capture negate=
    rx2330_cur."!cursor_pos"(rx2330_pos)
    $P10 = rx2330_cur."O"("%symbolic_unary, :pirop<set S*>")
    unless $P10, rx2330_fail
    rx2330_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2330_pos = $P10."pos"()
  # rx pass
    rx2330_cur."!cursor_pass"(rx2330_pos, "prefix:sym<~>")
    if_null rx2330_debug, debug_1700
    rx2330_cur."!cursor_debug"("PASS", "prefix:sym<~>", " at pos=", rx2330_pos)
  debug_1700:
    .return (rx2330_cur)
  rx2330_restart:
    if_null rx2330_debug, debug_1701
    rx2330_cur."!cursor_debug"("NEXT", "prefix:sym<~>")
  debug_1701:
  rx2330_fail:
    (rx2330_rep, rx2330_pos, $I10, $P10) = rx2330_cur."!mark_fail"(0)
    lt rx2330_pos, -1, rx2330_done
    eq rx2330_pos, -1, rx2330_fail
    jump $I10
  rx2330_done:
    rx2330_cur."!cursor_fail"()
    if_null rx2330_debug, debug_1702
    rx2330_cur."!cursor_debug"("FAIL", "prefix:sym<~>")
  debug_1702:
    .return (rx2330_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<~>"  :subid("324_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1302
    $P103 = self."!PREFIX__!subrule"("O", "~")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<->"  :subid("325_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1303
    .local string rx2335_tgt
    .local int rx2335_pos
    .local int rx2335_off
    .local int rx2335_eos
    .local int rx2335_rep
    .local pmc rx2335_cur
    .local pmc rx2335_debug
    (rx2335_cur, rx2335_pos, rx2335_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2335_cur
    .local pmc match
    .lex "$/", match
    length rx2335_eos, rx2335_tgt
    gt rx2335_pos, rx2335_eos, rx2335_done
    set rx2335_off, 0
    lt rx2335_pos, 2, rx2335_start
    sub rx2335_off, rx2335_pos, 1
    substr rx2335_tgt, rx2335_tgt, rx2335_off
  rx2335_start:
    eq $I10, 1, rx2335_restart
    if_null rx2335_debug, debug_1703
    rx2335_cur."!cursor_debug"("START", "prefix:sym<->")
  debug_1703:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2336_done
    goto rxscan2336_scan
  rxscan2336_loop:
    (rx2335_pos) = rx2335_cur."from"()
    inc rx2335_pos
    rx2335_cur."!cursor_from"(rx2335_pos)
    ge rx2335_pos, rx2335_eos, rxscan2336_done
  rxscan2336_scan:
    set_addr $I10, rxscan2336_loop
    rx2335_cur."!mark_push"(0, rx2335_pos, $I10)
  rxscan2336_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2337_fail
    rx2335_cur."!mark_push"(0, rx2335_pos, $I10)
  # rx literal  "-"
    add $I11, rx2335_pos, 1
    gt $I11, rx2335_eos, rx2335_fail
    sub $I11, rx2335_pos, rx2335_off
    ord $I11, rx2335_tgt, $I11
    ne $I11, 45, rx2335_fail
    add rx2335_pos, 1
    set_addr $I10, rxcap_2337_fail
    ($I12, $I11) = rx2335_cur."!mark_peek"($I10)
    rx2335_cur."!cursor_pos"($I11)
    ($P10) = rx2335_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2335_pos, "")
    rx2335_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2337_done
  rxcap_2337_fail:
    goto rx2335_fail
  rxcap_2337_done:
  # rx enumcharlist negate=1 zerowidth
    sub $I10, rx2335_pos, rx2335_off
    substr $S10, rx2335_tgt, $I10, 1
    index $I11, ">", $S10
    ge $I11, 0, rx2335_fail
  # rx subrule "number" subtype=zerowidth negate=1
    rx2335_cur."!cursor_pos"(rx2335_pos)
    $P10 = rx2335_cur."number"()
    if $P10, rx2335_fail
  # rx subrule "O" subtype=capture negate=
    rx2335_cur."!cursor_pos"(rx2335_pos)
    $P10 = rx2335_cur."O"("%symbolic_unary, :pirop<neg>")
    unless $P10, rx2335_fail
    rx2335_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2335_pos = $P10."pos"()
  # rx pass
    rx2335_cur."!cursor_pass"(rx2335_pos, "prefix:sym<->")
    if_null rx2335_debug, debug_1704
    rx2335_cur."!cursor_debug"("PASS", "prefix:sym<->", " at pos=", rx2335_pos)
  debug_1704:
    .return (rx2335_cur)
  rx2335_restart:
    if_null rx2335_debug, debug_1705
    rx2335_cur."!cursor_debug"("NEXT", "prefix:sym<->")
  debug_1705:
  rx2335_fail:
    (rx2335_rep, rx2335_pos, $I10, $P10) = rx2335_cur."!mark_fail"(0)
    lt rx2335_pos, -1, rx2335_done
    eq rx2335_pos, -1, rx2335_fail
    jump $I10
  rx2335_done:
    rx2335_cur."!cursor_fail"()
    if_null rx2335_debug, debug_1706
    rx2335_cur."!cursor_debug"("FAIL", "prefix:sym<->")
  debug_1706:
    .return (rx2335_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<->"  :subid("326_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1303
    new $P103, "ResizablePMCArray"
    push $P103, "-"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<?>"  :subid("327_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1304
    .local string rx2340_tgt
    .local int rx2340_pos
    .local int rx2340_off
    .local int rx2340_eos
    .local int rx2340_rep
    .local pmc rx2340_cur
    .local pmc rx2340_debug
    (rx2340_cur, rx2340_pos, rx2340_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2340_cur
    .local pmc match
    .lex "$/", match
    length rx2340_eos, rx2340_tgt
    gt rx2340_pos, rx2340_eos, rx2340_done
    set rx2340_off, 0
    lt rx2340_pos, 2, rx2340_start
    sub rx2340_off, rx2340_pos, 1
    substr rx2340_tgt, rx2340_tgt, rx2340_off
  rx2340_start:
    eq $I10, 1, rx2340_restart
    if_null rx2340_debug, debug_1707
    rx2340_cur."!cursor_debug"("START", "prefix:sym<?>")
  debug_1707:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2341_done
    goto rxscan2341_scan
  rxscan2341_loop:
    (rx2340_pos) = rx2340_cur."from"()
    inc rx2340_pos
    rx2340_cur."!cursor_from"(rx2340_pos)
    ge rx2340_pos, rx2340_eos, rxscan2341_done
  rxscan2341_scan:
    set_addr $I10, rxscan2341_loop
    rx2340_cur."!mark_push"(0, rx2340_pos, $I10)
  rxscan2341_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2342_fail
    rx2340_cur."!mark_push"(0, rx2340_pos, $I10)
  # rx literal  "?"
    add $I11, rx2340_pos, 1
    gt $I11, rx2340_eos, rx2340_fail
    sub $I11, rx2340_pos, rx2340_off
    ord $I11, rx2340_tgt, $I11
    ne $I11, 63, rx2340_fail
    add rx2340_pos, 1
    set_addr $I10, rxcap_2342_fail
    ($I12, $I11) = rx2340_cur."!mark_peek"($I10)
    rx2340_cur."!cursor_pos"($I11)
    ($P10) = rx2340_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2340_pos, "")
    rx2340_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2342_done
  rxcap_2342_fail:
    goto rx2340_fail
  rxcap_2342_done:
  # rx subrule "O" subtype=capture negate=
    rx2340_cur."!cursor_pos"(rx2340_pos)
    $P10 = rx2340_cur."O"("%symbolic_unary, :pirop<istrue>")
    unless $P10, rx2340_fail
    rx2340_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2340_pos = $P10."pos"()
  # rx pass
    rx2340_cur."!cursor_pass"(rx2340_pos, "prefix:sym<?>")
    if_null rx2340_debug, debug_1708
    rx2340_cur."!cursor_debug"("PASS", "prefix:sym<?>", " at pos=", rx2340_pos)
  debug_1708:
    .return (rx2340_cur)
  rx2340_restart:
    if_null rx2340_debug, debug_1709
    rx2340_cur."!cursor_debug"("NEXT", "prefix:sym<?>")
  debug_1709:
  rx2340_fail:
    (rx2340_rep, rx2340_pos, $I10, $P10) = rx2340_cur."!mark_fail"(0)
    lt rx2340_pos, -1, rx2340_done
    eq rx2340_pos, -1, rx2340_fail
    jump $I10
  rx2340_done:
    rx2340_cur."!cursor_fail"()
    if_null rx2340_debug, debug_1710
    rx2340_cur."!cursor_debug"("FAIL", "prefix:sym<?>")
  debug_1710:
    .return (rx2340_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<?>"  :subid("328_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1304
    $P103 = self."!PREFIX__!subrule"("O", "?")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<!>"  :subid("329_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1305
    .local string rx2345_tgt
    .local int rx2345_pos
    .local int rx2345_off
    .local int rx2345_eos
    .local int rx2345_rep
    .local pmc rx2345_cur
    .local pmc rx2345_debug
    (rx2345_cur, rx2345_pos, rx2345_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2345_cur
    .local pmc match
    .lex "$/", match
    length rx2345_eos, rx2345_tgt
    gt rx2345_pos, rx2345_eos, rx2345_done
    set rx2345_off, 0
    lt rx2345_pos, 2, rx2345_start
    sub rx2345_off, rx2345_pos, 1
    substr rx2345_tgt, rx2345_tgt, rx2345_off
  rx2345_start:
    eq $I10, 1, rx2345_restart
    if_null rx2345_debug, debug_1711
    rx2345_cur."!cursor_debug"("START", "prefix:sym<!>")
  debug_1711:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2346_done
    goto rxscan2346_scan
  rxscan2346_loop:
    (rx2345_pos) = rx2345_cur."from"()
    inc rx2345_pos
    rx2345_cur."!cursor_from"(rx2345_pos)
    ge rx2345_pos, rx2345_eos, rxscan2346_done
  rxscan2346_scan:
    set_addr $I10, rxscan2346_loop
    rx2345_cur."!mark_push"(0, rx2345_pos, $I10)
  rxscan2346_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2347_fail
    rx2345_cur."!mark_push"(0, rx2345_pos, $I10)
  # rx literal  "!"
    add $I11, rx2345_pos, 1
    gt $I11, rx2345_eos, rx2345_fail
    sub $I11, rx2345_pos, rx2345_off
    ord $I11, rx2345_tgt, $I11
    ne $I11, 33, rx2345_fail
    add rx2345_pos, 1
    set_addr $I10, rxcap_2347_fail
    ($I12, $I11) = rx2345_cur."!mark_peek"($I10)
    rx2345_cur."!cursor_pos"($I11)
    ($P10) = rx2345_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2345_pos, "")
    rx2345_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2347_done
  rxcap_2347_fail:
    goto rx2345_fail
  rxcap_2347_done:
  # rx subrule "O" subtype=capture negate=
    rx2345_cur."!cursor_pos"(rx2345_pos)
    $P10 = rx2345_cur."O"("%symbolic_unary, :pirop<isfalse>")
    unless $P10, rx2345_fail
    rx2345_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2345_pos = $P10."pos"()
  # rx pass
    rx2345_cur."!cursor_pass"(rx2345_pos, "prefix:sym<!>")
    if_null rx2345_debug, debug_1712
    rx2345_cur."!cursor_debug"("PASS", "prefix:sym<!>", " at pos=", rx2345_pos)
  debug_1712:
    .return (rx2345_cur)
  rx2345_restart:
    if_null rx2345_debug, debug_1713
    rx2345_cur."!cursor_debug"("NEXT", "prefix:sym<!>")
  debug_1713:
  rx2345_fail:
    (rx2345_rep, rx2345_pos, $I10, $P10) = rx2345_cur."!mark_fail"(0)
    lt rx2345_pos, -1, rx2345_done
    eq rx2345_pos, -1, rx2345_fail
    jump $I10
  rx2345_done:
    rx2345_cur."!cursor_fail"()
    if_null rx2345_debug, debug_1714
    rx2345_cur."!cursor_debug"("FAIL", "prefix:sym<!>")
  debug_1714:
    .return (rx2345_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<!>"  :subid("330_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1305
    $P103 = self."!PREFIX__!subrule"("O", "!")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<|>"  :subid("331_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1306
    .local string rx2350_tgt
    .local int rx2350_pos
    .local int rx2350_off
    .local int rx2350_eos
    .local int rx2350_rep
    .local pmc rx2350_cur
    .local pmc rx2350_debug
    (rx2350_cur, rx2350_pos, rx2350_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2350_cur
    .local pmc match
    .lex "$/", match
    length rx2350_eos, rx2350_tgt
    gt rx2350_pos, rx2350_eos, rx2350_done
    set rx2350_off, 0
    lt rx2350_pos, 2, rx2350_start
    sub rx2350_off, rx2350_pos, 1
    substr rx2350_tgt, rx2350_tgt, rx2350_off
  rx2350_start:
    eq $I10, 1, rx2350_restart
    if_null rx2350_debug, debug_1715
    rx2350_cur."!cursor_debug"("START", "prefix:sym<|>")
  debug_1715:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2351_done
    goto rxscan2351_scan
  rxscan2351_loop:
    (rx2350_pos) = rx2350_cur."from"()
    inc rx2350_pos
    rx2350_cur."!cursor_from"(rx2350_pos)
    ge rx2350_pos, rx2350_eos, rxscan2351_done
  rxscan2351_scan:
    set_addr $I10, rxscan2351_loop
    rx2350_cur."!mark_push"(0, rx2350_pos, $I10)
  rxscan2351_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2352_fail
    rx2350_cur."!mark_push"(0, rx2350_pos, $I10)
  # rx literal  "|"
    add $I11, rx2350_pos, 1
    gt $I11, rx2350_eos, rx2350_fail
    sub $I11, rx2350_pos, rx2350_off
    ord $I11, rx2350_tgt, $I11
    ne $I11, 124, rx2350_fail
    add rx2350_pos, 1
    set_addr $I10, rxcap_2352_fail
    ($I12, $I11) = rx2350_cur."!mark_peek"($I10)
    rx2350_cur."!cursor_pos"($I11)
    ($P10) = rx2350_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2350_pos, "")
    rx2350_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2352_done
  rxcap_2352_fail:
    goto rx2350_fail
  rxcap_2352_done:
  # rx subrule "O" subtype=capture negate=
    rx2350_cur."!cursor_pos"(rx2350_pos)
    $P10 = rx2350_cur."O"("%symbolic_unary")
    unless $P10, rx2350_fail
    rx2350_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2350_pos = $P10."pos"()
  # rx pass
    rx2350_cur."!cursor_pass"(rx2350_pos, "prefix:sym<|>")
    if_null rx2350_debug, debug_1716
    rx2350_cur."!cursor_debug"("PASS", "prefix:sym<|>", " at pos=", rx2350_pos)
  debug_1716:
    .return (rx2350_cur)
  rx2350_restart:
    if_null rx2350_debug, debug_1717
    rx2350_cur."!cursor_debug"("NEXT", "prefix:sym<|>")
  debug_1717:
  rx2350_fail:
    (rx2350_rep, rx2350_pos, $I10, $P10) = rx2350_cur."!mark_fail"(0)
    lt rx2350_pos, -1, rx2350_done
    eq rx2350_pos, -1, rx2350_fail
    jump $I10
  rx2350_done:
    rx2350_cur."!cursor_fail"()
    if_null rx2350_debug, debug_1718
    rx2350_cur."!cursor_debug"("FAIL", "prefix:sym<|>")
  debug_1718:
    .return (rx2350_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<|>"  :subid("332_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1306
    $P103 = self."!PREFIX__!subrule"("O", "|")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<*>"  :subid("333_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1308
    .local string rx2355_tgt
    .local int rx2355_pos
    .local int rx2355_off
    .local int rx2355_eos
    .local int rx2355_rep
    .local pmc rx2355_cur
    .local pmc rx2355_debug
    (rx2355_cur, rx2355_pos, rx2355_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2355_cur
    .local pmc match
    .lex "$/", match
    length rx2355_eos, rx2355_tgt
    gt rx2355_pos, rx2355_eos, rx2355_done
    set rx2355_off, 0
    lt rx2355_pos, 2, rx2355_start
    sub rx2355_off, rx2355_pos, 1
    substr rx2355_tgt, rx2355_tgt, rx2355_off
  rx2355_start:
    eq $I10, 1, rx2355_restart
    if_null rx2355_debug, debug_1719
    rx2355_cur."!cursor_debug"("START", "infix:sym<*>")
  debug_1719:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2356_done
    goto rxscan2356_scan
  rxscan2356_loop:
    (rx2355_pos) = rx2355_cur."from"()
    inc rx2355_pos
    rx2355_cur."!cursor_from"(rx2355_pos)
    ge rx2355_pos, rx2355_eos, rxscan2356_done
  rxscan2356_scan:
    set_addr $I10, rxscan2356_loop
    rx2355_cur."!mark_push"(0, rx2355_pos, $I10)
  rxscan2356_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2357_fail
    rx2355_cur."!mark_push"(0, rx2355_pos, $I10)
  # rx literal  "*"
    add $I11, rx2355_pos, 1
    gt $I11, rx2355_eos, rx2355_fail
    sub $I11, rx2355_pos, rx2355_off
    ord $I11, rx2355_tgt, $I11
    ne $I11, 42, rx2355_fail
    add rx2355_pos, 1
    set_addr $I10, rxcap_2357_fail
    ($I12, $I11) = rx2355_cur."!mark_peek"($I10)
    rx2355_cur."!cursor_pos"($I11)
    ($P10) = rx2355_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2355_pos, "")
    rx2355_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2357_done
  rxcap_2357_fail:
    goto rx2355_fail
  rxcap_2357_done:
  # rx subrule "O" subtype=capture negate=
    rx2355_cur."!cursor_pos"(rx2355_pos)
    $P10 = rx2355_cur."O"("%multiplicative, :pirop<mul>")
    unless $P10, rx2355_fail
    rx2355_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2355_pos = $P10."pos"()
  # rx pass
    rx2355_cur."!cursor_pass"(rx2355_pos, "infix:sym<*>")
    if_null rx2355_debug, debug_1720
    rx2355_cur."!cursor_debug"("PASS", "infix:sym<*>", " at pos=", rx2355_pos)
  debug_1720:
    .return (rx2355_cur)
  rx2355_restart:
    if_null rx2355_debug, debug_1721
    rx2355_cur."!cursor_debug"("NEXT", "infix:sym<*>")
  debug_1721:
  rx2355_fail:
    (rx2355_rep, rx2355_pos, $I10, $P10) = rx2355_cur."!mark_fail"(0)
    lt rx2355_pos, -1, rx2355_done
    eq rx2355_pos, -1, rx2355_fail
    jump $I10
  rx2355_done:
    rx2355_cur."!cursor_fail"()
    if_null rx2355_debug, debug_1722
    rx2355_cur."!cursor_debug"("FAIL", "infix:sym<*>")
  debug_1722:
    .return (rx2355_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<*>"  :subid("334_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1308
    $P103 = self."!PREFIX__!subrule"("O", "*")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym</>"  :subid("335_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1309
    .local string rx2360_tgt
    .local int rx2360_pos
    .local int rx2360_off
    .local int rx2360_eos
    .local int rx2360_rep
    .local pmc rx2360_cur
    .local pmc rx2360_debug
    (rx2360_cur, rx2360_pos, rx2360_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2360_cur
    .local pmc match
    .lex "$/", match
    length rx2360_eos, rx2360_tgt
    gt rx2360_pos, rx2360_eos, rx2360_done
    set rx2360_off, 0
    lt rx2360_pos, 2, rx2360_start
    sub rx2360_off, rx2360_pos, 1
    substr rx2360_tgt, rx2360_tgt, rx2360_off
  rx2360_start:
    eq $I10, 1, rx2360_restart
    if_null rx2360_debug, debug_1723
    rx2360_cur."!cursor_debug"("START", "infix:sym</>")
  debug_1723:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2361_done
    goto rxscan2361_scan
  rxscan2361_loop:
    (rx2360_pos) = rx2360_cur."from"()
    inc rx2360_pos
    rx2360_cur."!cursor_from"(rx2360_pos)
    ge rx2360_pos, rx2360_eos, rxscan2361_done
  rxscan2361_scan:
    set_addr $I10, rxscan2361_loop
    rx2360_cur."!mark_push"(0, rx2360_pos, $I10)
  rxscan2361_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2362_fail
    rx2360_cur."!mark_push"(0, rx2360_pos, $I10)
  # rx literal  "/"
    add $I11, rx2360_pos, 1
    gt $I11, rx2360_eos, rx2360_fail
    sub $I11, rx2360_pos, rx2360_off
    ord $I11, rx2360_tgt, $I11
    ne $I11, 47, rx2360_fail
    add rx2360_pos, 1
    set_addr $I10, rxcap_2362_fail
    ($I12, $I11) = rx2360_cur."!mark_peek"($I10)
    rx2360_cur."!cursor_pos"($I11)
    ($P10) = rx2360_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2360_pos, "")
    rx2360_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2362_done
  rxcap_2362_fail:
    goto rx2360_fail
  rxcap_2362_done:
  # rx subrule "O" subtype=capture negate=
    rx2360_cur."!cursor_pos"(rx2360_pos)
    $P10 = rx2360_cur."O"("%multiplicative, :pirop<div>")
    unless $P10, rx2360_fail
    rx2360_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2360_pos = $P10."pos"()
  # rx pass
    rx2360_cur."!cursor_pass"(rx2360_pos, "infix:sym</>")
    if_null rx2360_debug, debug_1724
    rx2360_cur."!cursor_debug"("PASS", "infix:sym</>", " at pos=", rx2360_pos)
  debug_1724:
    .return (rx2360_cur)
  rx2360_restart:
    if_null rx2360_debug, debug_1725
    rx2360_cur."!cursor_debug"("NEXT", "infix:sym</>")
  debug_1725:
  rx2360_fail:
    (rx2360_rep, rx2360_pos, $I10, $P10) = rx2360_cur."!mark_fail"(0)
    lt rx2360_pos, -1, rx2360_done
    eq rx2360_pos, -1, rx2360_fail
    jump $I10
  rx2360_done:
    rx2360_cur."!cursor_fail"()
    if_null rx2360_debug, debug_1726
    rx2360_cur."!cursor_debug"("FAIL", "infix:sym</>")
  debug_1726:
    .return (rx2360_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym</>"  :subid("336_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1309
    $P103 = self."!PREFIX__!subrule"("O", "/")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<%>"  :subid("337_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1310
    .local string rx2365_tgt
    .local int rx2365_pos
    .local int rx2365_off
    .local int rx2365_eos
    .local int rx2365_rep
    .local pmc rx2365_cur
    .local pmc rx2365_debug
    (rx2365_cur, rx2365_pos, rx2365_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2365_cur
    .local pmc match
    .lex "$/", match
    length rx2365_eos, rx2365_tgt
    gt rx2365_pos, rx2365_eos, rx2365_done
    set rx2365_off, 0
    lt rx2365_pos, 2, rx2365_start
    sub rx2365_off, rx2365_pos, 1
    substr rx2365_tgt, rx2365_tgt, rx2365_off
  rx2365_start:
    eq $I10, 1, rx2365_restart
    if_null rx2365_debug, debug_1727
    rx2365_cur."!cursor_debug"("START", "infix:sym<%>")
  debug_1727:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2366_done
    goto rxscan2366_scan
  rxscan2366_loop:
    (rx2365_pos) = rx2365_cur."from"()
    inc rx2365_pos
    rx2365_cur."!cursor_from"(rx2365_pos)
    ge rx2365_pos, rx2365_eos, rxscan2366_done
  rxscan2366_scan:
    set_addr $I10, rxscan2366_loop
    rx2365_cur."!mark_push"(0, rx2365_pos, $I10)
  rxscan2366_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2367_fail
    rx2365_cur."!mark_push"(0, rx2365_pos, $I10)
  # rx literal  "%"
    add $I11, rx2365_pos, 1
    gt $I11, rx2365_eos, rx2365_fail
    sub $I11, rx2365_pos, rx2365_off
    ord $I11, rx2365_tgt, $I11
    ne $I11, 37, rx2365_fail
    add rx2365_pos, 1
    set_addr $I10, rxcap_2367_fail
    ($I12, $I11) = rx2365_cur."!mark_peek"($I10)
    rx2365_cur."!cursor_pos"($I11)
    ($P10) = rx2365_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2365_pos, "")
    rx2365_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2367_done
  rxcap_2367_fail:
    goto rx2365_fail
  rxcap_2367_done:
  # rx subrule "O" subtype=capture negate=
    rx2365_cur."!cursor_pos"(rx2365_pos)
    $P10 = rx2365_cur."O"("%multiplicative, :pirop<mod>")
    unless $P10, rx2365_fail
    rx2365_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2365_pos = $P10."pos"()
  # rx pass
    rx2365_cur."!cursor_pass"(rx2365_pos, "infix:sym<%>")
    if_null rx2365_debug, debug_1728
    rx2365_cur."!cursor_debug"("PASS", "infix:sym<%>", " at pos=", rx2365_pos)
  debug_1728:
    .return (rx2365_cur)
  rx2365_restart:
    if_null rx2365_debug, debug_1729
    rx2365_cur."!cursor_debug"("NEXT", "infix:sym<%>")
  debug_1729:
  rx2365_fail:
    (rx2365_rep, rx2365_pos, $I10, $P10) = rx2365_cur."!mark_fail"(0)
    lt rx2365_pos, -1, rx2365_done
    eq rx2365_pos, -1, rx2365_fail
    jump $I10
  rx2365_done:
    rx2365_cur."!cursor_fail"()
    if_null rx2365_debug, debug_1730
    rx2365_cur."!cursor_debug"("FAIL", "infix:sym<%>")
  debug_1730:
    .return (rx2365_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<%>"  :subid("338_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1310
    $P103 = self."!PREFIX__!subrule"("O", "%")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+&>"  :subid("339_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1311
    .local string rx2370_tgt
    .local int rx2370_pos
    .local int rx2370_off
    .local int rx2370_eos
    .local int rx2370_rep
    .local pmc rx2370_cur
    .local pmc rx2370_debug
    (rx2370_cur, rx2370_pos, rx2370_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2370_cur
    .local pmc match
    .lex "$/", match
    length rx2370_eos, rx2370_tgt
    gt rx2370_pos, rx2370_eos, rx2370_done
    set rx2370_off, 0
    lt rx2370_pos, 2, rx2370_start
    sub rx2370_off, rx2370_pos, 1
    substr rx2370_tgt, rx2370_tgt, rx2370_off
  rx2370_start:
    eq $I10, 1, rx2370_restart
    if_null rx2370_debug, debug_1731
    rx2370_cur."!cursor_debug"("START", "infix:sym<+&>")
  debug_1731:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2371_done
    goto rxscan2371_scan
  rxscan2371_loop:
    (rx2370_pos) = rx2370_cur."from"()
    inc rx2370_pos
    rx2370_cur."!cursor_from"(rx2370_pos)
    ge rx2370_pos, rx2370_eos, rxscan2371_done
  rxscan2371_scan:
    set_addr $I10, rxscan2371_loop
    rx2370_cur."!mark_push"(0, rx2370_pos, $I10)
  rxscan2371_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2372_fail
    rx2370_cur."!mark_push"(0, rx2370_pos, $I10)
  # rx literal  "+&"
    add $I11, rx2370_pos, 2
    gt $I11, rx2370_eos, rx2370_fail
    sub $I11, rx2370_pos, rx2370_off
    substr $S10, rx2370_tgt, $I11, 2
    ne $S10, "+&", rx2370_fail
    add rx2370_pos, 2
    set_addr $I10, rxcap_2372_fail
    ($I12, $I11) = rx2370_cur."!mark_peek"($I10)
    rx2370_cur."!cursor_pos"($I11)
    ($P10) = rx2370_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2370_pos, "")
    rx2370_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2372_done
  rxcap_2372_fail:
    goto rx2370_fail
  rxcap_2372_done:
  # rx subrule "O" subtype=capture negate=
    rx2370_cur."!cursor_pos"(rx2370_pos)
    $P10 = rx2370_cur."O"("%multiplicative, :pirop<band III>")
    unless $P10, rx2370_fail
    rx2370_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2370_pos = $P10."pos"()
  # rx pass
    rx2370_cur."!cursor_pass"(rx2370_pos, "infix:sym<+&>")
    if_null rx2370_debug, debug_1732
    rx2370_cur."!cursor_debug"("PASS", "infix:sym<+&>", " at pos=", rx2370_pos)
  debug_1732:
    .return (rx2370_cur)
  rx2370_restart:
    if_null rx2370_debug, debug_1733
    rx2370_cur."!cursor_debug"("NEXT", "infix:sym<+&>")
  debug_1733:
  rx2370_fail:
    (rx2370_rep, rx2370_pos, $I10, $P10) = rx2370_cur."!mark_fail"(0)
    lt rx2370_pos, -1, rx2370_done
    eq rx2370_pos, -1, rx2370_fail
    jump $I10
  rx2370_done:
    rx2370_cur."!cursor_fail"()
    if_null rx2370_debug, debug_1734
    rx2370_cur."!cursor_debug"("FAIL", "infix:sym<+&>")
  debug_1734:
    .return (rx2370_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<+&>"  :subid("340_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1311
    $P103 = self."!PREFIX__!subrule"("O", "+&")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+>"  :subid("341_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1313
    .local string rx2375_tgt
    .local int rx2375_pos
    .local int rx2375_off
    .local int rx2375_eos
    .local int rx2375_rep
    .local pmc rx2375_cur
    .local pmc rx2375_debug
    (rx2375_cur, rx2375_pos, rx2375_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2375_cur
    .local pmc match
    .lex "$/", match
    length rx2375_eos, rx2375_tgt
    gt rx2375_pos, rx2375_eos, rx2375_done
    set rx2375_off, 0
    lt rx2375_pos, 2, rx2375_start
    sub rx2375_off, rx2375_pos, 1
    substr rx2375_tgt, rx2375_tgt, rx2375_off
  rx2375_start:
    eq $I10, 1, rx2375_restart
    if_null rx2375_debug, debug_1735
    rx2375_cur."!cursor_debug"("START", "infix:sym<+>")
  debug_1735:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2376_done
    goto rxscan2376_scan
  rxscan2376_loop:
    (rx2375_pos) = rx2375_cur."from"()
    inc rx2375_pos
    rx2375_cur."!cursor_from"(rx2375_pos)
    ge rx2375_pos, rx2375_eos, rxscan2376_done
  rxscan2376_scan:
    set_addr $I10, rxscan2376_loop
    rx2375_cur."!mark_push"(0, rx2375_pos, $I10)
  rxscan2376_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2377_fail
    rx2375_cur."!mark_push"(0, rx2375_pos, $I10)
  # rx literal  "+"
    add $I11, rx2375_pos, 1
    gt $I11, rx2375_eos, rx2375_fail
    sub $I11, rx2375_pos, rx2375_off
    ord $I11, rx2375_tgt, $I11
    ne $I11, 43, rx2375_fail
    add rx2375_pos, 1
    set_addr $I10, rxcap_2377_fail
    ($I12, $I11) = rx2375_cur."!mark_peek"($I10)
    rx2375_cur."!cursor_pos"($I11)
    ($P10) = rx2375_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2375_pos, "")
    rx2375_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2377_done
  rxcap_2377_fail:
    goto rx2375_fail
  rxcap_2377_done:
  # rx subrule "O" subtype=capture negate=
    rx2375_cur."!cursor_pos"(rx2375_pos)
    $P10 = rx2375_cur."O"("%additive, :pirop<add>")
    unless $P10, rx2375_fail
    rx2375_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2375_pos = $P10."pos"()
  # rx pass
    rx2375_cur."!cursor_pass"(rx2375_pos, "infix:sym<+>")
    if_null rx2375_debug, debug_1736
    rx2375_cur."!cursor_debug"("PASS", "infix:sym<+>", " at pos=", rx2375_pos)
  debug_1736:
    .return (rx2375_cur)
  rx2375_restart:
    if_null rx2375_debug, debug_1737
    rx2375_cur."!cursor_debug"("NEXT", "infix:sym<+>")
  debug_1737:
  rx2375_fail:
    (rx2375_rep, rx2375_pos, $I10, $P10) = rx2375_cur."!mark_fail"(0)
    lt rx2375_pos, -1, rx2375_done
    eq rx2375_pos, -1, rx2375_fail
    jump $I10
  rx2375_done:
    rx2375_cur."!cursor_fail"()
    if_null rx2375_debug, debug_1738
    rx2375_cur."!cursor_debug"("FAIL", "infix:sym<+>")
  debug_1738:
    .return (rx2375_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<+>"  :subid("342_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1313
    $P103 = self."!PREFIX__!subrule"("O", "+")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<->"  :subid("343_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1314
    .local string rx2380_tgt
    .local int rx2380_pos
    .local int rx2380_off
    .local int rx2380_eos
    .local int rx2380_rep
    .local pmc rx2380_cur
    .local pmc rx2380_debug
    (rx2380_cur, rx2380_pos, rx2380_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2380_cur
    .local pmc match
    .lex "$/", match
    length rx2380_eos, rx2380_tgt
    gt rx2380_pos, rx2380_eos, rx2380_done
    set rx2380_off, 0
    lt rx2380_pos, 2, rx2380_start
    sub rx2380_off, rx2380_pos, 1
    substr rx2380_tgt, rx2380_tgt, rx2380_off
  rx2380_start:
    eq $I10, 1, rx2380_restart
    if_null rx2380_debug, debug_1739
    rx2380_cur."!cursor_debug"("START", "infix:sym<->")
  debug_1739:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2381_done
    goto rxscan2381_scan
  rxscan2381_loop:
    (rx2380_pos) = rx2380_cur."from"()
    inc rx2380_pos
    rx2380_cur."!cursor_from"(rx2380_pos)
    ge rx2380_pos, rx2380_eos, rxscan2381_done
  rxscan2381_scan:
    set_addr $I10, rxscan2381_loop
    rx2380_cur."!mark_push"(0, rx2380_pos, $I10)
  rxscan2381_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2382_fail
    rx2380_cur."!mark_push"(0, rx2380_pos, $I10)
  # rx literal  "-"
    add $I11, rx2380_pos, 1
    gt $I11, rx2380_eos, rx2380_fail
    sub $I11, rx2380_pos, rx2380_off
    ord $I11, rx2380_tgt, $I11
    ne $I11, 45, rx2380_fail
    add rx2380_pos, 1
    set_addr $I10, rxcap_2382_fail
    ($I12, $I11) = rx2380_cur."!mark_peek"($I10)
    rx2380_cur."!cursor_pos"($I11)
    ($P10) = rx2380_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2380_pos, "")
    rx2380_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2382_done
  rxcap_2382_fail:
    goto rx2380_fail
  rxcap_2382_done:
  # rx subrule "O" subtype=capture negate=
    rx2380_cur."!cursor_pos"(rx2380_pos)
    $P10 = rx2380_cur."O"("%additive, :pirop<sub>")
    unless $P10, rx2380_fail
    rx2380_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2380_pos = $P10."pos"()
  # rx pass
    rx2380_cur."!cursor_pass"(rx2380_pos, "infix:sym<->")
    if_null rx2380_debug, debug_1740
    rx2380_cur."!cursor_debug"("PASS", "infix:sym<->", " at pos=", rx2380_pos)
  debug_1740:
    .return (rx2380_cur)
  rx2380_restart:
    if_null rx2380_debug, debug_1741
    rx2380_cur."!cursor_debug"("NEXT", "infix:sym<->")
  debug_1741:
  rx2380_fail:
    (rx2380_rep, rx2380_pos, $I10, $P10) = rx2380_cur."!mark_fail"(0)
    lt rx2380_pos, -1, rx2380_done
    eq rx2380_pos, -1, rx2380_fail
    jump $I10
  rx2380_done:
    rx2380_cur."!cursor_fail"()
    if_null rx2380_debug, debug_1742
    rx2380_cur."!cursor_debug"("FAIL", "infix:sym<->")
  debug_1742:
    .return (rx2380_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<->"  :subid("344_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1314
    $P103 = self."!PREFIX__!subrule"("O", "-")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+|>"  :subid("345_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1315
    .local string rx2385_tgt
    .local int rx2385_pos
    .local int rx2385_off
    .local int rx2385_eos
    .local int rx2385_rep
    .local pmc rx2385_cur
    .local pmc rx2385_debug
    (rx2385_cur, rx2385_pos, rx2385_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2385_cur
    .local pmc match
    .lex "$/", match
    length rx2385_eos, rx2385_tgt
    gt rx2385_pos, rx2385_eos, rx2385_done
    set rx2385_off, 0
    lt rx2385_pos, 2, rx2385_start
    sub rx2385_off, rx2385_pos, 1
    substr rx2385_tgt, rx2385_tgt, rx2385_off
  rx2385_start:
    eq $I10, 1, rx2385_restart
    if_null rx2385_debug, debug_1743
    rx2385_cur."!cursor_debug"("START", "infix:sym<+|>")
  debug_1743:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2386_done
    goto rxscan2386_scan
  rxscan2386_loop:
    (rx2385_pos) = rx2385_cur."from"()
    inc rx2385_pos
    rx2385_cur."!cursor_from"(rx2385_pos)
    ge rx2385_pos, rx2385_eos, rxscan2386_done
  rxscan2386_scan:
    set_addr $I10, rxscan2386_loop
    rx2385_cur."!mark_push"(0, rx2385_pos, $I10)
  rxscan2386_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2387_fail
    rx2385_cur."!mark_push"(0, rx2385_pos, $I10)
  # rx literal  "+|"
    add $I11, rx2385_pos, 2
    gt $I11, rx2385_eos, rx2385_fail
    sub $I11, rx2385_pos, rx2385_off
    substr $S10, rx2385_tgt, $I11, 2
    ne $S10, "+|", rx2385_fail
    add rx2385_pos, 2
    set_addr $I10, rxcap_2387_fail
    ($I12, $I11) = rx2385_cur."!mark_peek"($I10)
    rx2385_cur."!cursor_pos"($I11)
    ($P10) = rx2385_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2385_pos, "")
    rx2385_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2387_done
  rxcap_2387_fail:
    goto rx2385_fail
  rxcap_2387_done:
  # rx subrule "O" subtype=capture negate=
    rx2385_cur."!cursor_pos"(rx2385_pos)
    $P10 = rx2385_cur."O"("%additive, :pirop<bor III>")
    unless $P10, rx2385_fail
    rx2385_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2385_pos = $P10."pos"()
  # rx pass
    rx2385_cur."!cursor_pass"(rx2385_pos, "infix:sym<+|>")
    if_null rx2385_debug, debug_1744
    rx2385_cur."!cursor_debug"("PASS", "infix:sym<+|>", " at pos=", rx2385_pos)
  debug_1744:
    .return (rx2385_cur)
  rx2385_restart:
    if_null rx2385_debug, debug_1745
    rx2385_cur."!cursor_debug"("NEXT", "infix:sym<+|>")
  debug_1745:
  rx2385_fail:
    (rx2385_rep, rx2385_pos, $I10, $P10) = rx2385_cur."!mark_fail"(0)
    lt rx2385_pos, -1, rx2385_done
    eq rx2385_pos, -1, rx2385_fail
    jump $I10
  rx2385_done:
    rx2385_cur."!cursor_fail"()
    if_null rx2385_debug, debug_1746
    rx2385_cur."!cursor_debug"("FAIL", "infix:sym<+|>")
  debug_1746:
    .return (rx2385_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<+|>"  :subid("346_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1315
    $P103 = self."!PREFIX__!subrule"("O", "+|")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+^>"  :subid("347_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1316
    .local string rx2390_tgt
    .local int rx2390_pos
    .local int rx2390_off
    .local int rx2390_eos
    .local int rx2390_rep
    .local pmc rx2390_cur
    .local pmc rx2390_debug
    (rx2390_cur, rx2390_pos, rx2390_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2390_cur
    .local pmc match
    .lex "$/", match
    length rx2390_eos, rx2390_tgt
    gt rx2390_pos, rx2390_eos, rx2390_done
    set rx2390_off, 0
    lt rx2390_pos, 2, rx2390_start
    sub rx2390_off, rx2390_pos, 1
    substr rx2390_tgt, rx2390_tgt, rx2390_off
  rx2390_start:
    eq $I10, 1, rx2390_restart
    if_null rx2390_debug, debug_1747
    rx2390_cur."!cursor_debug"("START", "infix:sym<+^>")
  debug_1747:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2391_done
    goto rxscan2391_scan
  rxscan2391_loop:
    (rx2390_pos) = rx2390_cur."from"()
    inc rx2390_pos
    rx2390_cur."!cursor_from"(rx2390_pos)
    ge rx2390_pos, rx2390_eos, rxscan2391_done
  rxscan2391_scan:
    set_addr $I10, rxscan2391_loop
    rx2390_cur."!mark_push"(0, rx2390_pos, $I10)
  rxscan2391_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2392_fail
    rx2390_cur."!mark_push"(0, rx2390_pos, $I10)
  # rx literal  "+^"
    add $I11, rx2390_pos, 2
    gt $I11, rx2390_eos, rx2390_fail
    sub $I11, rx2390_pos, rx2390_off
    substr $S10, rx2390_tgt, $I11, 2
    ne $S10, "+^", rx2390_fail
    add rx2390_pos, 2
    set_addr $I10, rxcap_2392_fail
    ($I12, $I11) = rx2390_cur."!mark_peek"($I10)
    rx2390_cur."!cursor_pos"($I11)
    ($P10) = rx2390_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2390_pos, "")
    rx2390_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2392_done
  rxcap_2392_fail:
    goto rx2390_fail
  rxcap_2392_done:
  # rx subrule "O" subtype=capture negate=
    rx2390_cur."!cursor_pos"(rx2390_pos)
    $P10 = rx2390_cur."O"("%additive, :pirop<bxor III>")
    unless $P10, rx2390_fail
    rx2390_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2390_pos = $P10."pos"()
  # rx pass
    rx2390_cur."!cursor_pass"(rx2390_pos, "infix:sym<+^>")
    if_null rx2390_debug, debug_1748
    rx2390_cur."!cursor_debug"("PASS", "infix:sym<+^>", " at pos=", rx2390_pos)
  debug_1748:
    .return (rx2390_cur)
  rx2390_restart:
    if_null rx2390_debug, debug_1749
    rx2390_cur."!cursor_debug"("NEXT", "infix:sym<+^>")
  debug_1749:
  rx2390_fail:
    (rx2390_rep, rx2390_pos, $I10, $P10) = rx2390_cur."!mark_fail"(0)
    lt rx2390_pos, -1, rx2390_done
    eq rx2390_pos, -1, rx2390_fail
    jump $I10
  rx2390_done:
    rx2390_cur."!cursor_fail"()
    if_null rx2390_debug, debug_1750
    rx2390_cur."!cursor_debug"("FAIL", "infix:sym<+^>")
  debug_1750:
    .return (rx2390_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<+^>"  :subid("348_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1316
    $P103 = self."!PREFIX__!subrule"("O", "+^")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<~>"  :subid("349_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1318
    .local string rx2395_tgt
    .local int rx2395_pos
    .local int rx2395_off
    .local int rx2395_eos
    .local int rx2395_rep
    .local pmc rx2395_cur
    .local pmc rx2395_debug
    (rx2395_cur, rx2395_pos, rx2395_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2395_cur
    .local pmc match
    .lex "$/", match
    length rx2395_eos, rx2395_tgt
    gt rx2395_pos, rx2395_eos, rx2395_done
    set rx2395_off, 0
    lt rx2395_pos, 2, rx2395_start
    sub rx2395_off, rx2395_pos, 1
    substr rx2395_tgt, rx2395_tgt, rx2395_off
  rx2395_start:
    eq $I10, 1, rx2395_restart
    if_null rx2395_debug, debug_1751
    rx2395_cur."!cursor_debug"("START", "infix:sym<~>")
  debug_1751:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2396_done
    goto rxscan2396_scan
  rxscan2396_loop:
    (rx2395_pos) = rx2395_cur."from"()
    inc rx2395_pos
    rx2395_cur."!cursor_from"(rx2395_pos)
    ge rx2395_pos, rx2395_eos, rxscan2396_done
  rxscan2396_scan:
    set_addr $I10, rxscan2396_loop
    rx2395_cur."!mark_push"(0, rx2395_pos, $I10)
  rxscan2396_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2397_fail
    rx2395_cur."!mark_push"(0, rx2395_pos, $I10)
  # rx literal  "~"
    add $I11, rx2395_pos, 1
    gt $I11, rx2395_eos, rx2395_fail
    sub $I11, rx2395_pos, rx2395_off
    ord $I11, rx2395_tgt, $I11
    ne $I11, 126, rx2395_fail
    add rx2395_pos, 1
    set_addr $I10, rxcap_2397_fail
    ($I12, $I11) = rx2395_cur."!mark_peek"($I10)
    rx2395_cur."!cursor_pos"($I11)
    ($P10) = rx2395_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2395_pos, "")
    rx2395_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2397_done
  rxcap_2397_fail:
    goto rx2395_fail
  rxcap_2397_done:
  # rx subrule "O" subtype=capture negate=
    rx2395_cur."!cursor_pos"(rx2395_pos)
    $P10 = rx2395_cur."O"("%concatenation , :pirop<concat>")
    unless $P10, rx2395_fail
    rx2395_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2395_pos = $P10."pos"()
  # rx pass
    rx2395_cur."!cursor_pass"(rx2395_pos, "infix:sym<~>")
    if_null rx2395_debug, debug_1752
    rx2395_cur."!cursor_debug"("PASS", "infix:sym<~>", " at pos=", rx2395_pos)
  debug_1752:
    .return (rx2395_cur)
  rx2395_restart:
    if_null rx2395_debug, debug_1753
    rx2395_cur."!cursor_debug"("NEXT", "infix:sym<~>")
  debug_1753:
  rx2395_fail:
    (rx2395_rep, rx2395_pos, $I10, $P10) = rx2395_cur."!mark_fail"(0)
    lt rx2395_pos, -1, rx2395_done
    eq rx2395_pos, -1, rx2395_fail
    jump $I10
  rx2395_done:
    rx2395_cur."!cursor_fail"()
    if_null rx2395_debug, debug_1754
    rx2395_cur."!cursor_debug"("FAIL", "infix:sym<~>")
  debug_1754:
    .return (rx2395_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<~>"  :subid("350_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1318
    $P103 = self."!PREFIX__!subrule"("O", "~")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<==>"  :subid("351_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1320
    .local string rx2400_tgt
    .local int rx2400_pos
    .local int rx2400_off
    .local int rx2400_eos
    .local int rx2400_rep
    .local pmc rx2400_cur
    .local pmc rx2400_debug
    (rx2400_cur, rx2400_pos, rx2400_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2400_cur
    .local pmc match
    .lex "$/", match
    length rx2400_eos, rx2400_tgt
    gt rx2400_pos, rx2400_eos, rx2400_done
    set rx2400_off, 0
    lt rx2400_pos, 2, rx2400_start
    sub rx2400_off, rx2400_pos, 1
    substr rx2400_tgt, rx2400_tgt, rx2400_off
  rx2400_start:
    eq $I10, 1, rx2400_restart
    if_null rx2400_debug, debug_1755
    rx2400_cur."!cursor_debug"("START", "infix:sym<==>")
  debug_1755:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2401_done
    goto rxscan2401_scan
  rxscan2401_loop:
    (rx2400_pos) = rx2400_cur."from"()
    inc rx2400_pos
    rx2400_cur."!cursor_from"(rx2400_pos)
    ge rx2400_pos, rx2400_eos, rxscan2401_done
  rxscan2401_scan:
    set_addr $I10, rxscan2401_loop
    rx2400_cur."!mark_push"(0, rx2400_pos, $I10)
  rxscan2401_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2402_fail
    rx2400_cur."!mark_push"(0, rx2400_pos, $I10)
  # rx literal  "=="
    add $I11, rx2400_pos, 2
    gt $I11, rx2400_eos, rx2400_fail
    sub $I11, rx2400_pos, rx2400_off
    substr $S10, rx2400_tgt, $I11, 2
    ne $S10, "==", rx2400_fail
    add rx2400_pos, 2
    set_addr $I10, rxcap_2402_fail
    ($I12, $I11) = rx2400_cur."!mark_peek"($I10)
    rx2400_cur."!cursor_pos"($I11)
    ($P10) = rx2400_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2400_pos, "")
    rx2400_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2402_done
  rxcap_2402_fail:
    goto rx2400_fail
  rxcap_2402_done:
  # rx subrule "O" subtype=capture negate=
    rx2400_cur."!cursor_pos"(rx2400_pos)
    $P10 = rx2400_cur."O"("%relational, :pirop<iseq INn>")
    unless $P10, rx2400_fail
    rx2400_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2400_pos = $P10."pos"()
  # rx pass
    rx2400_cur."!cursor_pass"(rx2400_pos, "infix:sym<==>")
    if_null rx2400_debug, debug_1756
    rx2400_cur."!cursor_debug"("PASS", "infix:sym<==>", " at pos=", rx2400_pos)
  debug_1756:
    .return (rx2400_cur)
  rx2400_restart:
    if_null rx2400_debug, debug_1757
    rx2400_cur."!cursor_debug"("NEXT", "infix:sym<==>")
  debug_1757:
  rx2400_fail:
    (rx2400_rep, rx2400_pos, $I10, $P10) = rx2400_cur."!mark_fail"(0)
    lt rx2400_pos, -1, rx2400_done
    eq rx2400_pos, -1, rx2400_fail
    jump $I10
  rx2400_done:
    rx2400_cur."!cursor_fail"()
    if_null rx2400_debug, debug_1758
    rx2400_cur."!cursor_debug"("FAIL", "infix:sym<==>")
  debug_1758:
    .return (rx2400_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<==>"  :subid("352_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1320
    $P103 = self."!PREFIX__!subrule"("O", "==")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<!=>"  :subid("353_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1321
    .local string rx2405_tgt
    .local int rx2405_pos
    .local int rx2405_off
    .local int rx2405_eos
    .local int rx2405_rep
    .local pmc rx2405_cur
    .local pmc rx2405_debug
    (rx2405_cur, rx2405_pos, rx2405_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2405_cur
    .local pmc match
    .lex "$/", match
    length rx2405_eos, rx2405_tgt
    gt rx2405_pos, rx2405_eos, rx2405_done
    set rx2405_off, 0
    lt rx2405_pos, 2, rx2405_start
    sub rx2405_off, rx2405_pos, 1
    substr rx2405_tgt, rx2405_tgt, rx2405_off
  rx2405_start:
    eq $I10, 1, rx2405_restart
    if_null rx2405_debug, debug_1759
    rx2405_cur."!cursor_debug"("START", "infix:sym<!=>")
  debug_1759:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2406_done
    goto rxscan2406_scan
  rxscan2406_loop:
    (rx2405_pos) = rx2405_cur."from"()
    inc rx2405_pos
    rx2405_cur."!cursor_from"(rx2405_pos)
    ge rx2405_pos, rx2405_eos, rxscan2406_done
  rxscan2406_scan:
    set_addr $I10, rxscan2406_loop
    rx2405_cur."!mark_push"(0, rx2405_pos, $I10)
  rxscan2406_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2407_fail
    rx2405_cur."!mark_push"(0, rx2405_pos, $I10)
  # rx literal  "!="
    add $I11, rx2405_pos, 2
    gt $I11, rx2405_eos, rx2405_fail
    sub $I11, rx2405_pos, rx2405_off
    substr $S10, rx2405_tgt, $I11, 2
    ne $S10, "!=", rx2405_fail
    add rx2405_pos, 2
    set_addr $I10, rxcap_2407_fail
    ($I12, $I11) = rx2405_cur."!mark_peek"($I10)
    rx2405_cur."!cursor_pos"($I11)
    ($P10) = rx2405_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2405_pos, "")
    rx2405_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2407_done
  rxcap_2407_fail:
    goto rx2405_fail
  rxcap_2407_done:
  # rx subrule "O" subtype=capture negate=
    rx2405_cur."!cursor_pos"(rx2405_pos)
    $P10 = rx2405_cur."O"("%relational, :pirop<isne INn>")
    unless $P10, rx2405_fail
    rx2405_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2405_pos = $P10."pos"()
  # rx pass
    rx2405_cur."!cursor_pass"(rx2405_pos, "infix:sym<!=>")
    if_null rx2405_debug, debug_1760
    rx2405_cur."!cursor_debug"("PASS", "infix:sym<!=>", " at pos=", rx2405_pos)
  debug_1760:
    .return (rx2405_cur)
  rx2405_restart:
    if_null rx2405_debug, debug_1761
    rx2405_cur."!cursor_debug"("NEXT", "infix:sym<!=>")
  debug_1761:
  rx2405_fail:
    (rx2405_rep, rx2405_pos, $I10, $P10) = rx2405_cur."!mark_fail"(0)
    lt rx2405_pos, -1, rx2405_done
    eq rx2405_pos, -1, rx2405_fail
    jump $I10
  rx2405_done:
    rx2405_cur."!cursor_fail"()
    if_null rx2405_debug, debug_1762
    rx2405_cur."!cursor_debug"("FAIL", "infix:sym<!=>")
  debug_1762:
    .return (rx2405_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<!=>"  :subid("354_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1321
    $P103 = self."!PREFIX__!subrule"("O", "!=")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<<=>"  :subid("355_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1322
    .local string rx2410_tgt
    .local int rx2410_pos
    .local int rx2410_off
    .local int rx2410_eos
    .local int rx2410_rep
    .local pmc rx2410_cur
    .local pmc rx2410_debug
    (rx2410_cur, rx2410_pos, rx2410_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2410_cur
    .local pmc match
    .lex "$/", match
    length rx2410_eos, rx2410_tgt
    gt rx2410_pos, rx2410_eos, rx2410_done
    set rx2410_off, 0
    lt rx2410_pos, 2, rx2410_start
    sub rx2410_off, rx2410_pos, 1
    substr rx2410_tgt, rx2410_tgt, rx2410_off
  rx2410_start:
    eq $I10, 1, rx2410_restart
    if_null rx2410_debug, debug_1763
    rx2410_cur."!cursor_debug"("START", "infix:sym<<=>")
  debug_1763:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2411_done
    goto rxscan2411_scan
  rxscan2411_loop:
    (rx2410_pos) = rx2410_cur."from"()
    inc rx2410_pos
    rx2410_cur."!cursor_from"(rx2410_pos)
    ge rx2410_pos, rx2410_eos, rxscan2411_done
  rxscan2411_scan:
    set_addr $I10, rxscan2411_loop
    rx2410_cur."!mark_push"(0, rx2410_pos, $I10)
  rxscan2411_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2412_fail
    rx2410_cur."!mark_push"(0, rx2410_pos, $I10)
  # rx literal  "<="
    add $I11, rx2410_pos, 2
    gt $I11, rx2410_eos, rx2410_fail
    sub $I11, rx2410_pos, rx2410_off
    substr $S10, rx2410_tgt, $I11, 2
    ne $S10, "<=", rx2410_fail
    add rx2410_pos, 2
    set_addr $I10, rxcap_2412_fail
    ($I12, $I11) = rx2410_cur."!mark_peek"($I10)
    rx2410_cur."!cursor_pos"($I11)
    ($P10) = rx2410_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2410_pos, "")
    rx2410_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2412_done
  rxcap_2412_fail:
    goto rx2410_fail
  rxcap_2412_done:
  # rx subrule "O" subtype=capture negate=
    rx2410_cur."!cursor_pos"(rx2410_pos)
    $P10 = rx2410_cur."O"("%relational, :pirop<isle INn>")
    unless $P10, rx2410_fail
    rx2410_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2410_pos = $P10."pos"()
  # rx pass
    rx2410_cur."!cursor_pass"(rx2410_pos, "infix:sym<<=>")
    if_null rx2410_debug, debug_1764
    rx2410_cur."!cursor_debug"("PASS", "infix:sym<<=>", " at pos=", rx2410_pos)
  debug_1764:
    .return (rx2410_cur)
  rx2410_restart:
    if_null rx2410_debug, debug_1765
    rx2410_cur."!cursor_debug"("NEXT", "infix:sym<<=>")
  debug_1765:
  rx2410_fail:
    (rx2410_rep, rx2410_pos, $I10, $P10) = rx2410_cur."!mark_fail"(0)
    lt rx2410_pos, -1, rx2410_done
    eq rx2410_pos, -1, rx2410_fail
    jump $I10
  rx2410_done:
    rx2410_cur."!cursor_fail"()
    if_null rx2410_debug, debug_1766
    rx2410_cur."!cursor_debug"("FAIL", "infix:sym<<=>")
  debug_1766:
    .return (rx2410_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<<=>"  :subid("356_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1322
    $P103 = self."!PREFIX__!subrule"("O", "<=")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<>=>"  :subid("357_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1323
    .local string rx2415_tgt
    .local int rx2415_pos
    .local int rx2415_off
    .local int rx2415_eos
    .local int rx2415_rep
    .local pmc rx2415_cur
    .local pmc rx2415_debug
    (rx2415_cur, rx2415_pos, rx2415_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2415_cur
    .local pmc match
    .lex "$/", match
    length rx2415_eos, rx2415_tgt
    gt rx2415_pos, rx2415_eos, rx2415_done
    set rx2415_off, 0
    lt rx2415_pos, 2, rx2415_start
    sub rx2415_off, rx2415_pos, 1
    substr rx2415_tgt, rx2415_tgt, rx2415_off
  rx2415_start:
    eq $I10, 1, rx2415_restart
    if_null rx2415_debug, debug_1767
    rx2415_cur."!cursor_debug"("START", "infix:sym<>=>")
  debug_1767:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2416_done
    goto rxscan2416_scan
  rxscan2416_loop:
    (rx2415_pos) = rx2415_cur."from"()
    inc rx2415_pos
    rx2415_cur."!cursor_from"(rx2415_pos)
    ge rx2415_pos, rx2415_eos, rxscan2416_done
  rxscan2416_scan:
    set_addr $I10, rxscan2416_loop
    rx2415_cur."!mark_push"(0, rx2415_pos, $I10)
  rxscan2416_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2417_fail
    rx2415_cur."!mark_push"(0, rx2415_pos, $I10)
  # rx literal  ">="
    add $I11, rx2415_pos, 2
    gt $I11, rx2415_eos, rx2415_fail
    sub $I11, rx2415_pos, rx2415_off
    substr $S10, rx2415_tgt, $I11, 2
    ne $S10, ">=", rx2415_fail
    add rx2415_pos, 2
    set_addr $I10, rxcap_2417_fail
    ($I12, $I11) = rx2415_cur."!mark_peek"($I10)
    rx2415_cur."!cursor_pos"($I11)
    ($P10) = rx2415_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2415_pos, "")
    rx2415_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2417_done
  rxcap_2417_fail:
    goto rx2415_fail
  rxcap_2417_done:
  # rx subrule "O" subtype=capture negate=
    rx2415_cur."!cursor_pos"(rx2415_pos)
    $P10 = rx2415_cur."O"("%relational, :pirop<isge INn>")
    unless $P10, rx2415_fail
    rx2415_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2415_pos = $P10."pos"()
  # rx pass
    rx2415_cur."!cursor_pass"(rx2415_pos, "infix:sym<>=>")
    if_null rx2415_debug, debug_1768
    rx2415_cur."!cursor_debug"("PASS", "infix:sym<>=>", " at pos=", rx2415_pos)
  debug_1768:
    .return (rx2415_cur)
  rx2415_restart:
    if_null rx2415_debug, debug_1769
    rx2415_cur."!cursor_debug"("NEXT", "infix:sym<>=>")
  debug_1769:
  rx2415_fail:
    (rx2415_rep, rx2415_pos, $I10, $P10) = rx2415_cur."!mark_fail"(0)
    lt rx2415_pos, -1, rx2415_done
    eq rx2415_pos, -1, rx2415_fail
    jump $I10
  rx2415_done:
    rx2415_cur."!cursor_fail"()
    if_null rx2415_debug, debug_1770
    rx2415_cur."!cursor_debug"("FAIL", "infix:sym<>=>")
  debug_1770:
    .return (rx2415_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<>=>"  :subid("358_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1323
    $P103 = self."!PREFIX__!subrule"("O", ">=")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<<>"  :subid("359_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1324
    .local string rx2420_tgt
    .local int rx2420_pos
    .local int rx2420_off
    .local int rx2420_eos
    .local int rx2420_rep
    .local pmc rx2420_cur
    .local pmc rx2420_debug
    (rx2420_cur, rx2420_pos, rx2420_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2420_cur
    .local pmc match
    .lex "$/", match
    length rx2420_eos, rx2420_tgt
    gt rx2420_pos, rx2420_eos, rx2420_done
    set rx2420_off, 0
    lt rx2420_pos, 2, rx2420_start
    sub rx2420_off, rx2420_pos, 1
    substr rx2420_tgt, rx2420_tgt, rx2420_off
  rx2420_start:
    eq $I10, 1, rx2420_restart
    if_null rx2420_debug, debug_1771
    rx2420_cur."!cursor_debug"("START", "infix:sym<<>")
  debug_1771:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2421_done
    goto rxscan2421_scan
  rxscan2421_loop:
    (rx2420_pos) = rx2420_cur."from"()
    inc rx2420_pos
    rx2420_cur."!cursor_from"(rx2420_pos)
    ge rx2420_pos, rx2420_eos, rxscan2421_done
  rxscan2421_scan:
    set_addr $I10, rxscan2421_loop
    rx2420_cur."!mark_push"(0, rx2420_pos, $I10)
  rxscan2421_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2422_fail
    rx2420_cur."!mark_push"(0, rx2420_pos, $I10)
  # rx literal  "<"
    add $I11, rx2420_pos, 1
    gt $I11, rx2420_eos, rx2420_fail
    sub $I11, rx2420_pos, rx2420_off
    ord $I11, rx2420_tgt, $I11
    ne $I11, 60, rx2420_fail
    add rx2420_pos, 1
    set_addr $I10, rxcap_2422_fail
    ($I12, $I11) = rx2420_cur."!mark_peek"($I10)
    rx2420_cur."!cursor_pos"($I11)
    ($P10) = rx2420_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2420_pos, "")
    rx2420_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2422_done
  rxcap_2422_fail:
    goto rx2420_fail
  rxcap_2422_done:
  # rx subrule "O" subtype=capture negate=
    rx2420_cur."!cursor_pos"(rx2420_pos)
    $P10 = rx2420_cur."O"("%relational, :pirop<islt INn>")
    unless $P10, rx2420_fail
    rx2420_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2420_pos = $P10."pos"()
  # rx pass
    rx2420_cur."!cursor_pass"(rx2420_pos, "infix:sym<<>")
    if_null rx2420_debug, debug_1772
    rx2420_cur."!cursor_debug"("PASS", "infix:sym<<>", " at pos=", rx2420_pos)
  debug_1772:
    .return (rx2420_cur)
  rx2420_restart:
    if_null rx2420_debug, debug_1773
    rx2420_cur."!cursor_debug"("NEXT", "infix:sym<<>")
  debug_1773:
  rx2420_fail:
    (rx2420_rep, rx2420_pos, $I10, $P10) = rx2420_cur."!mark_fail"(0)
    lt rx2420_pos, -1, rx2420_done
    eq rx2420_pos, -1, rx2420_fail
    jump $I10
  rx2420_done:
    rx2420_cur."!cursor_fail"()
    if_null rx2420_debug, debug_1774
    rx2420_cur."!cursor_debug"("FAIL", "infix:sym<<>")
  debug_1774:
    .return (rx2420_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<<>"  :subid("360_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1324
    $P103 = self."!PREFIX__!subrule"("O", "<")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<>>"  :subid("361_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1325
    .local string rx2425_tgt
    .local int rx2425_pos
    .local int rx2425_off
    .local int rx2425_eos
    .local int rx2425_rep
    .local pmc rx2425_cur
    .local pmc rx2425_debug
    (rx2425_cur, rx2425_pos, rx2425_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2425_cur
    .local pmc match
    .lex "$/", match
    length rx2425_eos, rx2425_tgt
    gt rx2425_pos, rx2425_eos, rx2425_done
    set rx2425_off, 0
    lt rx2425_pos, 2, rx2425_start
    sub rx2425_off, rx2425_pos, 1
    substr rx2425_tgt, rx2425_tgt, rx2425_off
  rx2425_start:
    eq $I10, 1, rx2425_restart
    if_null rx2425_debug, debug_1775
    rx2425_cur."!cursor_debug"("START", "infix:sym<>>")
  debug_1775:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2426_done
    goto rxscan2426_scan
  rxscan2426_loop:
    (rx2425_pos) = rx2425_cur."from"()
    inc rx2425_pos
    rx2425_cur."!cursor_from"(rx2425_pos)
    ge rx2425_pos, rx2425_eos, rxscan2426_done
  rxscan2426_scan:
    set_addr $I10, rxscan2426_loop
    rx2425_cur."!mark_push"(0, rx2425_pos, $I10)
  rxscan2426_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2427_fail
    rx2425_cur."!mark_push"(0, rx2425_pos, $I10)
  # rx literal  ">"
    add $I11, rx2425_pos, 1
    gt $I11, rx2425_eos, rx2425_fail
    sub $I11, rx2425_pos, rx2425_off
    ord $I11, rx2425_tgt, $I11
    ne $I11, 62, rx2425_fail
    add rx2425_pos, 1
    set_addr $I10, rxcap_2427_fail
    ($I12, $I11) = rx2425_cur."!mark_peek"($I10)
    rx2425_cur."!cursor_pos"($I11)
    ($P10) = rx2425_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2425_pos, "")
    rx2425_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2427_done
  rxcap_2427_fail:
    goto rx2425_fail
  rxcap_2427_done:
  # rx subrule "O" subtype=capture negate=
    rx2425_cur."!cursor_pos"(rx2425_pos)
    $P10 = rx2425_cur."O"("%relational, :pirop<isgt INn>")
    unless $P10, rx2425_fail
    rx2425_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2425_pos = $P10."pos"()
  # rx pass
    rx2425_cur."!cursor_pass"(rx2425_pos, "infix:sym<>>")
    if_null rx2425_debug, debug_1776
    rx2425_cur."!cursor_debug"("PASS", "infix:sym<>>", " at pos=", rx2425_pos)
  debug_1776:
    .return (rx2425_cur)
  rx2425_restart:
    if_null rx2425_debug, debug_1777
    rx2425_cur."!cursor_debug"("NEXT", "infix:sym<>>")
  debug_1777:
  rx2425_fail:
    (rx2425_rep, rx2425_pos, $I10, $P10) = rx2425_cur."!mark_fail"(0)
    lt rx2425_pos, -1, rx2425_done
    eq rx2425_pos, -1, rx2425_fail
    jump $I10
  rx2425_done:
    rx2425_cur."!cursor_fail"()
    if_null rx2425_debug, debug_1778
    rx2425_cur."!cursor_debug"("FAIL", "infix:sym<>>")
  debug_1778:
    .return (rx2425_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<>>"  :subid("362_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1325
    $P103 = self."!PREFIX__!subrule"("O", ">")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<eq>"  :subid("363_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1326
    .local string rx2430_tgt
    .local int rx2430_pos
    .local int rx2430_off
    .local int rx2430_eos
    .local int rx2430_rep
    .local pmc rx2430_cur
    .local pmc rx2430_debug
    (rx2430_cur, rx2430_pos, rx2430_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2430_cur
    .local pmc match
    .lex "$/", match
    length rx2430_eos, rx2430_tgt
    gt rx2430_pos, rx2430_eos, rx2430_done
    set rx2430_off, 0
    lt rx2430_pos, 2, rx2430_start
    sub rx2430_off, rx2430_pos, 1
    substr rx2430_tgt, rx2430_tgt, rx2430_off
  rx2430_start:
    eq $I10, 1, rx2430_restart
    if_null rx2430_debug, debug_1779
    rx2430_cur."!cursor_debug"("START", "infix:sym<eq>")
  debug_1779:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2431_done
    goto rxscan2431_scan
  rxscan2431_loop:
    (rx2430_pos) = rx2430_cur."from"()
    inc rx2430_pos
    rx2430_cur."!cursor_from"(rx2430_pos)
    ge rx2430_pos, rx2430_eos, rxscan2431_done
  rxscan2431_scan:
    set_addr $I10, rxscan2431_loop
    rx2430_cur."!mark_push"(0, rx2430_pos, $I10)
  rxscan2431_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2432_fail
    rx2430_cur."!mark_push"(0, rx2430_pos, $I10)
  # rx literal  "eq"
    add $I11, rx2430_pos, 2
    gt $I11, rx2430_eos, rx2430_fail
    sub $I11, rx2430_pos, rx2430_off
    substr $S10, rx2430_tgt, $I11, 2
    ne $S10, "eq", rx2430_fail
    add rx2430_pos, 2
    set_addr $I10, rxcap_2432_fail
    ($I12, $I11) = rx2430_cur."!mark_peek"($I10)
    rx2430_cur."!cursor_pos"($I11)
    ($P10) = rx2430_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2430_pos, "")
    rx2430_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2432_done
  rxcap_2432_fail:
    goto rx2430_fail
  rxcap_2432_done:
  # rx subrule "O" subtype=capture negate=
    rx2430_cur."!cursor_pos"(rx2430_pos)
    $P10 = rx2430_cur."O"("%relational, :pirop<iseq ISs>")
    unless $P10, rx2430_fail
    rx2430_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2430_pos = $P10."pos"()
  # rx pass
    rx2430_cur."!cursor_pass"(rx2430_pos, "infix:sym<eq>")
    if_null rx2430_debug, debug_1780
    rx2430_cur."!cursor_debug"("PASS", "infix:sym<eq>", " at pos=", rx2430_pos)
  debug_1780:
    .return (rx2430_cur)
  rx2430_restart:
    if_null rx2430_debug, debug_1781
    rx2430_cur."!cursor_debug"("NEXT", "infix:sym<eq>")
  debug_1781:
  rx2430_fail:
    (rx2430_rep, rx2430_pos, $I10, $P10) = rx2430_cur."!mark_fail"(0)
    lt rx2430_pos, -1, rx2430_done
    eq rx2430_pos, -1, rx2430_fail
    jump $I10
  rx2430_done:
    rx2430_cur."!cursor_fail"()
    if_null rx2430_debug, debug_1782
    rx2430_cur."!cursor_debug"("FAIL", "infix:sym<eq>")
  debug_1782:
    .return (rx2430_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<eq>"  :subid("364_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1326
    $P103 = self."!PREFIX__!subrule"("O", "eq")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<ne>"  :subid("365_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1327
    .local string rx2435_tgt
    .local int rx2435_pos
    .local int rx2435_off
    .local int rx2435_eos
    .local int rx2435_rep
    .local pmc rx2435_cur
    .local pmc rx2435_debug
    (rx2435_cur, rx2435_pos, rx2435_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2435_cur
    .local pmc match
    .lex "$/", match
    length rx2435_eos, rx2435_tgt
    gt rx2435_pos, rx2435_eos, rx2435_done
    set rx2435_off, 0
    lt rx2435_pos, 2, rx2435_start
    sub rx2435_off, rx2435_pos, 1
    substr rx2435_tgt, rx2435_tgt, rx2435_off
  rx2435_start:
    eq $I10, 1, rx2435_restart
    if_null rx2435_debug, debug_1783
    rx2435_cur."!cursor_debug"("START", "infix:sym<ne>")
  debug_1783:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2436_done
    goto rxscan2436_scan
  rxscan2436_loop:
    (rx2435_pos) = rx2435_cur."from"()
    inc rx2435_pos
    rx2435_cur."!cursor_from"(rx2435_pos)
    ge rx2435_pos, rx2435_eos, rxscan2436_done
  rxscan2436_scan:
    set_addr $I10, rxscan2436_loop
    rx2435_cur."!mark_push"(0, rx2435_pos, $I10)
  rxscan2436_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2437_fail
    rx2435_cur."!mark_push"(0, rx2435_pos, $I10)
  # rx literal  "ne"
    add $I11, rx2435_pos, 2
    gt $I11, rx2435_eos, rx2435_fail
    sub $I11, rx2435_pos, rx2435_off
    substr $S10, rx2435_tgt, $I11, 2
    ne $S10, "ne", rx2435_fail
    add rx2435_pos, 2
    set_addr $I10, rxcap_2437_fail
    ($I12, $I11) = rx2435_cur."!mark_peek"($I10)
    rx2435_cur."!cursor_pos"($I11)
    ($P10) = rx2435_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2435_pos, "")
    rx2435_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2437_done
  rxcap_2437_fail:
    goto rx2435_fail
  rxcap_2437_done:
  # rx subrule "O" subtype=capture negate=
    rx2435_cur."!cursor_pos"(rx2435_pos)
    $P10 = rx2435_cur."O"("%relational, :pirop<isne ISs>")
    unless $P10, rx2435_fail
    rx2435_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2435_pos = $P10."pos"()
  # rx pass
    rx2435_cur."!cursor_pass"(rx2435_pos, "infix:sym<ne>")
    if_null rx2435_debug, debug_1784
    rx2435_cur."!cursor_debug"("PASS", "infix:sym<ne>", " at pos=", rx2435_pos)
  debug_1784:
    .return (rx2435_cur)
  rx2435_restart:
    if_null rx2435_debug, debug_1785
    rx2435_cur."!cursor_debug"("NEXT", "infix:sym<ne>")
  debug_1785:
  rx2435_fail:
    (rx2435_rep, rx2435_pos, $I10, $P10) = rx2435_cur."!mark_fail"(0)
    lt rx2435_pos, -1, rx2435_done
    eq rx2435_pos, -1, rx2435_fail
    jump $I10
  rx2435_done:
    rx2435_cur."!cursor_fail"()
    if_null rx2435_debug, debug_1786
    rx2435_cur."!cursor_debug"("FAIL", "infix:sym<ne>")
  debug_1786:
    .return (rx2435_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<ne>"  :subid("366_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1327
    $P103 = self."!PREFIX__!subrule"("O", "ne")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<le>"  :subid("367_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1328
    .local string rx2440_tgt
    .local int rx2440_pos
    .local int rx2440_off
    .local int rx2440_eos
    .local int rx2440_rep
    .local pmc rx2440_cur
    .local pmc rx2440_debug
    (rx2440_cur, rx2440_pos, rx2440_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2440_cur
    .local pmc match
    .lex "$/", match
    length rx2440_eos, rx2440_tgt
    gt rx2440_pos, rx2440_eos, rx2440_done
    set rx2440_off, 0
    lt rx2440_pos, 2, rx2440_start
    sub rx2440_off, rx2440_pos, 1
    substr rx2440_tgt, rx2440_tgt, rx2440_off
  rx2440_start:
    eq $I10, 1, rx2440_restart
    if_null rx2440_debug, debug_1787
    rx2440_cur."!cursor_debug"("START", "infix:sym<le>")
  debug_1787:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2441_done
    goto rxscan2441_scan
  rxscan2441_loop:
    (rx2440_pos) = rx2440_cur."from"()
    inc rx2440_pos
    rx2440_cur."!cursor_from"(rx2440_pos)
    ge rx2440_pos, rx2440_eos, rxscan2441_done
  rxscan2441_scan:
    set_addr $I10, rxscan2441_loop
    rx2440_cur."!mark_push"(0, rx2440_pos, $I10)
  rxscan2441_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2442_fail
    rx2440_cur."!mark_push"(0, rx2440_pos, $I10)
  # rx literal  "le"
    add $I11, rx2440_pos, 2
    gt $I11, rx2440_eos, rx2440_fail
    sub $I11, rx2440_pos, rx2440_off
    substr $S10, rx2440_tgt, $I11, 2
    ne $S10, "le", rx2440_fail
    add rx2440_pos, 2
    set_addr $I10, rxcap_2442_fail
    ($I12, $I11) = rx2440_cur."!mark_peek"($I10)
    rx2440_cur."!cursor_pos"($I11)
    ($P10) = rx2440_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2440_pos, "")
    rx2440_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2442_done
  rxcap_2442_fail:
    goto rx2440_fail
  rxcap_2442_done:
  # rx subrule "O" subtype=capture negate=
    rx2440_cur."!cursor_pos"(rx2440_pos)
    $P10 = rx2440_cur."O"("%relational, :pirop<isle ISs>")
    unless $P10, rx2440_fail
    rx2440_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2440_pos = $P10."pos"()
  # rx pass
    rx2440_cur."!cursor_pass"(rx2440_pos, "infix:sym<le>")
    if_null rx2440_debug, debug_1788
    rx2440_cur."!cursor_debug"("PASS", "infix:sym<le>", " at pos=", rx2440_pos)
  debug_1788:
    .return (rx2440_cur)
  rx2440_restart:
    if_null rx2440_debug, debug_1789
    rx2440_cur."!cursor_debug"("NEXT", "infix:sym<le>")
  debug_1789:
  rx2440_fail:
    (rx2440_rep, rx2440_pos, $I10, $P10) = rx2440_cur."!mark_fail"(0)
    lt rx2440_pos, -1, rx2440_done
    eq rx2440_pos, -1, rx2440_fail
    jump $I10
  rx2440_done:
    rx2440_cur."!cursor_fail"()
    if_null rx2440_debug, debug_1790
    rx2440_cur."!cursor_debug"("FAIL", "infix:sym<le>")
  debug_1790:
    .return (rx2440_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<le>"  :subid("368_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1328
    $P103 = self."!PREFIX__!subrule"("O", "le")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<ge>"  :subid("369_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1329
    .local string rx2445_tgt
    .local int rx2445_pos
    .local int rx2445_off
    .local int rx2445_eos
    .local int rx2445_rep
    .local pmc rx2445_cur
    .local pmc rx2445_debug
    (rx2445_cur, rx2445_pos, rx2445_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2445_cur
    .local pmc match
    .lex "$/", match
    length rx2445_eos, rx2445_tgt
    gt rx2445_pos, rx2445_eos, rx2445_done
    set rx2445_off, 0
    lt rx2445_pos, 2, rx2445_start
    sub rx2445_off, rx2445_pos, 1
    substr rx2445_tgt, rx2445_tgt, rx2445_off
  rx2445_start:
    eq $I10, 1, rx2445_restart
    if_null rx2445_debug, debug_1791
    rx2445_cur."!cursor_debug"("START", "infix:sym<ge>")
  debug_1791:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2446_done
    goto rxscan2446_scan
  rxscan2446_loop:
    (rx2445_pos) = rx2445_cur."from"()
    inc rx2445_pos
    rx2445_cur."!cursor_from"(rx2445_pos)
    ge rx2445_pos, rx2445_eos, rxscan2446_done
  rxscan2446_scan:
    set_addr $I10, rxscan2446_loop
    rx2445_cur."!mark_push"(0, rx2445_pos, $I10)
  rxscan2446_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2447_fail
    rx2445_cur."!mark_push"(0, rx2445_pos, $I10)
  # rx literal  "ge"
    add $I11, rx2445_pos, 2
    gt $I11, rx2445_eos, rx2445_fail
    sub $I11, rx2445_pos, rx2445_off
    substr $S10, rx2445_tgt, $I11, 2
    ne $S10, "ge", rx2445_fail
    add rx2445_pos, 2
    set_addr $I10, rxcap_2447_fail
    ($I12, $I11) = rx2445_cur."!mark_peek"($I10)
    rx2445_cur."!cursor_pos"($I11)
    ($P10) = rx2445_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2445_pos, "")
    rx2445_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2447_done
  rxcap_2447_fail:
    goto rx2445_fail
  rxcap_2447_done:
  # rx subrule "O" subtype=capture negate=
    rx2445_cur."!cursor_pos"(rx2445_pos)
    $P10 = rx2445_cur."O"("%relational, :pirop<isge ISs>")
    unless $P10, rx2445_fail
    rx2445_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2445_pos = $P10."pos"()
  # rx pass
    rx2445_cur."!cursor_pass"(rx2445_pos, "infix:sym<ge>")
    if_null rx2445_debug, debug_1792
    rx2445_cur."!cursor_debug"("PASS", "infix:sym<ge>", " at pos=", rx2445_pos)
  debug_1792:
    .return (rx2445_cur)
  rx2445_restart:
    if_null rx2445_debug, debug_1793
    rx2445_cur."!cursor_debug"("NEXT", "infix:sym<ge>")
  debug_1793:
  rx2445_fail:
    (rx2445_rep, rx2445_pos, $I10, $P10) = rx2445_cur."!mark_fail"(0)
    lt rx2445_pos, -1, rx2445_done
    eq rx2445_pos, -1, rx2445_fail
    jump $I10
  rx2445_done:
    rx2445_cur."!cursor_fail"()
    if_null rx2445_debug, debug_1794
    rx2445_cur."!cursor_debug"("FAIL", "infix:sym<ge>")
  debug_1794:
    .return (rx2445_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<ge>"  :subid("370_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1329
    $P103 = self."!PREFIX__!subrule"("O", "ge")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<lt>"  :subid("371_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1330
    .local string rx2450_tgt
    .local int rx2450_pos
    .local int rx2450_off
    .local int rx2450_eos
    .local int rx2450_rep
    .local pmc rx2450_cur
    .local pmc rx2450_debug
    (rx2450_cur, rx2450_pos, rx2450_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2450_cur
    .local pmc match
    .lex "$/", match
    length rx2450_eos, rx2450_tgt
    gt rx2450_pos, rx2450_eos, rx2450_done
    set rx2450_off, 0
    lt rx2450_pos, 2, rx2450_start
    sub rx2450_off, rx2450_pos, 1
    substr rx2450_tgt, rx2450_tgt, rx2450_off
  rx2450_start:
    eq $I10, 1, rx2450_restart
    if_null rx2450_debug, debug_1795
    rx2450_cur."!cursor_debug"("START", "infix:sym<lt>")
  debug_1795:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2451_done
    goto rxscan2451_scan
  rxscan2451_loop:
    (rx2450_pos) = rx2450_cur."from"()
    inc rx2450_pos
    rx2450_cur."!cursor_from"(rx2450_pos)
    ge rx2450_pos, rx2450_eos, rxscan2451_done
  rxscan2451_scan:
    set_addr $I10, rxscan2451_loop
    rx2450_cur."!mark_push"(0, rx2450_pos, $I10)
  rxscan2451_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2452_fail
    rx2450_cur."!mark_push"(0, rx2450_pos, $I10)
  # rx literal  "lt"
    add $I11, rx2450_pos, 2
    gt $I11, rx2450_eos, rx2450_fail
    sub $I11, rx2450_pos, rx2450_off
    substr $S10, rx2450_tgt, $I11, 2
    ne $S10, "lt", rx2450_fail
    add rx2450_pos, 2
    set_addr $I10, rxcap_2452_fail
    ($I12, $I11) = rx2450_cur."!mark_peek"($I10)
    rx2450_cur."!cursor_pos"($I11)
    ($P10) = rx2450_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2450_pos, "")
    rx2450_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2452_done
  rxcap_2452_fail:
    goto rx2450_fail
  rxcap_2452_done:
  # rx subrule "O" subtype=capture negate=
    rx2450_cur."!cursor_pos"(rx2450_pos)
    $P10 = rx2450_cur."O"("%relational, :pirop<islt ISs>")
    unless $P10, rx2450_fail
    rx2450_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2450_pos = $P10."pos"()
  # rx pass
    rx2450_cur."!cursor_pass"(rx2450_pos, "infix:sym<lt>")
    if_null rx2450_debug, debug_1796
    rx2450_cur."!cursor_debug"("PASS", "infix:sym<lt>", " at pos=", rx2450_pos)
  debug_1796:
    .return (rx2450_cur)
  rx2450_restart:
    if_null rx2450_debug, debug_1797
    rx2450_cur."!cursor_debug"("NEXT", "infix:sym<lt>")
  debug_1797:
  rx2450_fail:
    (rx2450_rep, rx2450_pos, $I10, $P10) = rx2450_cur."!mark_fail"(0)
    lt rx2450_pos, -1, rx2450_done
    eq rx2450_pos, -1, rx2450_fail
    jump $I10
  rx2450_done:
    rx2450_cur."!cursor_fail"()
    if_null rx2450_debug, debug_1798
    rx2450_cur."!cursor_debug"("FAIL", "infix:sym<lt>")
  debug_1798:
    .return (rx2450_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<lt>"  :subid("372_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1330
    $P103 = self."!PREFIX__!subrule"("O", "lt")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<gt>"  :subid("373_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1331
    .local string rx2455_tgt
    .local int rx2455_pos
    .local int rx2455_off
    .local int rx2455_eos
    .local int rx2455_rep
    .local pmc rx2455_cur
    .local pmc rx2455_debug
    (rx2455_cur, rx2455_pos, rx2455_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2455_cur
    .local pmc match
    .lex "$/", match
    length rx2455_eos, rx2455_tgt
    gt rx2455_pos, rx2455_eos, rx2455_done
    set rx2455_off, 0
    lt rx2455_pos, 2, rx2455_start
    sub rx2455_off, rx2455_pos, 1
    substr rx2455_tgt, rx2455_tgt, rx2455_off
  rx2455_start:
    eq $I10, 1, rx2455_restart
    if_null rx2455_debug, debug_1799
    rx2455_cur."!cursor_debug"("START", "infix:sym<gt>")
  debug_1799:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2456_done
    goto rxscan2456_scan
  rxscan2456_loop:
    (rx2455_pos) = rx2455_cur."from"()
    inc rx2455_pos
    rx2455_cur."!cursor_from"(rx2455_pos)
    ge rx2455_pos, rx2455_eos, rxscan2456_done
  rxscan2456_scan:
    set_addr $I10, rxscan2456_loop
    rx2455_cur."!mark_push"(0, rx2455_pos, $I10)
  rxscan2456_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2457_fail
    rx2455_cur."!mark_push"(0, rx2455_pos, $I10)
  # rx literal  "gt"
    add $I11, rx2455_pos, 2
    gt $I11, rx2455_eos, rx2455_fail
    sub $I11, rx2455_pos, rx2455_off
    substr $S10, rx2455_tgt, $I11, 2
    ne $S10, "gt", rx2455_fail
    add rx2455_pos, 2
    set_addr $I10, rxcap_2457_fail
    ($I12, $I11) = rx2455_cur."!mark_peek"($I10)
    rx2455_cur."!cursor_pos"($I11)
    ($P10) = rx2455_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2455_pos, "")
    rx2455_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2457_done
  rxcap_2457_fail:
    goto rx2455_fail
  rxcap_2457_done:
  # rx subrule "O" subtype=capture negate=
    rx2455_cur."!cursor_pos"(rx2455_pos)
    $P10 = rx2455_cur."O"("%relational, :pirop<isgt ISs>")
    unless $P10, rx2455_fail
    rx2455_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2455_pos = $P10."pos"()
  # rx pass
    rx2455_cur."!cursor_pass"(rx2455_pos, "infix:sym<gt>")
    if_null rx2455_debug, debug_1800
    rx2455_cur."!cursor_debug"("PASS", "infix:sym<gt>", " at pos=", rx2455_pos)
  debug_1800:
    .return (rx2455_cur)
  rx2455_restart:
    if_null rx2455_debug, debug_1801
    rx2455_cur."!cursor_debug"("NEXT", "infix:sym<gt>")
  debug_1801:
  rx2455_fail:
    (rx2455_rep, rx2455_pos, $I10, $P10) = rx2455_cur."!mark_fail"(0)
    lt rx2455_pos, -1, rx2455_done
    eq rx2455_pos, -1, rx2455_fail
    jump $I10
  rx2455_done:
    rx2455_cur."!cursor_fail"()
    if_null rx2455_debug, debug_1802
    rx2455_cur."!cursor_debug"("FAIL", "infix:sym<gt>")
  debug_1802:
    .return (rx2455_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<gt>"  :subid("374_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1331
    $P103 = self."!PREFIX__!subrule"("O", "gt")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<=:=>"  :subid("375_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1332
    .local string rx2460_tgt
    .local int rx2460_pos
    .local int rx2460_off
    .local int rx2460_eos
    .local int rx2460_rep
    .local pmc rx2460_cur
    .local pmc rx2460_debug
    (rx2460_cur, rx2460_pos, rx2460_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2460_cur
    .local pmc match
    .lex "$/", match
    length rx2460_eos, rx2460_tgt
    gt rx2460_pos, rx2460_eos, rx2460_done
    set rx2460_off, 0
    lt rx2460_pos, 2, rx2460_start
    sub rx2460_off, rx2460_pos, 1
    substr rx2460_tgt, rx2460_tgt, rx2460_off
  rx2460_start:
    eq $I10, 1, rx2460_restart
    if_null rx2460_debug, debug_1803
    rx2460_cur."!cursor_debug"("START", "infix:sym<=:=>")
  debug_1803:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2461_done
    goto rxscan2461_scan
  rxscan2461_loop:
    (rx2460_pos) = rx2460_cur."from"()
    inc rx2460_pos
    rx2460_cur."!cursor_from"(rx2460_pos)
    ge rx2460_pos, rx2460_eos, rxscan2461_done
  rxscan2461_scan:
    set_addr $I10, rxscan2461_loop
    rx2460_cur."!mark_push"(0, rx2460_pos, $I10)
  rxscan2461_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2462_fail
    rx2460_cur."!mark_push"(0, rx2460_pos, $I10)
  # rx literal  "=:="
    add $I11, rx2460_pos, 3
    gt $I11, rx2460_eos, rx2460_fail
    sub $I11, rx2460_pos, rx2460_off
    substr $S10, rx2460_tgt, $I11, 3
    ne $S10, "=:=", rx2460_fail
    add rx2460_pos, 3
    set_addr $I10, rxcap_2462_fail
    ($I12, $I11) = rx2460_cur."!mark_peek"($I10)
    rx2460_cur."!cursor_pos"($I11)
    ($P10) = rx2460_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2460_pos, "")
    rx2460_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2462_done
  rxcap_2462_fail:
    goto rx2460_fail
  rxcap_2462_done:
  # rx subrule "O" subtype=capture negate=
    rx2460_cur."!cursor_pos"(rx2460_pos)
    $P10 = rx2460_cur."O"("%relational, :pirop<issame>")
    unless $P10, rx2460_fail
    rx2460_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2460_pos = $P10."pos"()
  # rx pass
    rx2460_cur."!cursor_pass"(rx2460_pos, "infix:sym<=:=>")
    if_null rx2460_debug, debug_1804
    rx2460_cur."!cursor_debug"("PASS", "infix:sym<=:=>", " at pos=", rx2460_pos)
  debug_1804:
    .return (rx2460_cur)
  rx2460_restart:
    if_null rx2460_debug, debug_1805
    rx2460_cur."!cursor_debug"("NEXT", "infix:sym<=:=>")
  debug_1805:
  rx2460_fail:
    (rx2460_rep, rx2460_pos, $I10, $P10) = rx2460_cur."!mark_fail"(0)
    lt rx2460_pos, -1, rx2460_done
    eq rx2460_pos, -1, rx2460_fail
    jump $I10
  rx2460_done:
    rx2460_cur."!cursor_fail"()
    if_null rx2460_debug, debug_1806
    rx2460_cur."!cursor_debug"("FAIL", "infix:sym<=:=>")
  debug_1806:
    .return (rx2460_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<=:=>"  :subid("376_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1332
    $P103 = self."!PREFIX__!subrule"("O", "=:=")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<~~>"  :subid("377_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1333
    .local string rx2465_tgt
    .local int rx2465_pos
    .local int rx2465_off
    .local int rx2465_eos
    .local int rx2465_rep
    .local pmc rx2465_cur
    .local pmc rx2465_debug
    (rx2465_cur, rx2465_pos, rx2465_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2465_cur
    .local pmc match
    .lex "$/", match
    length rx2465_eos, rx2465_tgt
    gt rx2465_pos, rx2465_eos, rx2465_done
    set rx2465_off, 0
    lt rx2465_pos, 2, rx2465_start
    sub rx2465_off, rx2465_pos, 1
    substr rx2465_tgt, rx2465_tgt, rx2465_off
  rx2465_start:
    eq $I10, 1, rx2465_restart
    if_null rx2465_debug, debug_1807
    rx2465_cur."!cursor_debug"("START", "infix:sym<~~>")
  debug_1807:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2466_done
    goto rxscan2466_scan
  rxscan2466_loop:
    (rx2465_pos) = rx2465_cur."from"()
    inc rx2465_pos
    rx2465_cur."!cursor_from"(rx2465_pos)
    ge rx2465_pos, rx2465_eos, rxscan2466_done
  rxscan2466_scan:
    set_addr $I10, rxscan2466_loop
    rx2465_cur."!mark_push"(0, rx2465_pos, $I10)
  rxscan2466_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2467_fail
    rx2465_cur."!mark_push"(0, rx2465_pos, $I10)
  # rx literal  "~~"
    add $I11, rx2465_pos, 2
    gt $I11, rx2465_eos, rx2465_fail
    sub $I11, rx2465_pos, rx2465_off
    substr $S10, rx2465_tgt, $I11, 2
    ne $S10, "~~", rx2465_fail
    add rx2465_pos, 2
    set_addr $I10, rxcap_2467_fail
    ($I12, $I11) = rx2465_cur."!mark_peek"($I10)
    rx2465_cur."!cursor_pos"($I11)
    ($P10) = rx2465_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2465_pos, "")
    rx2465_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2467_done
  rxcap_2467_fail:
    goto rx2465_fail
  rxcap_2467_done:
  # rx subrule "O" subtype=capture negate=
    rx2465_cur."!cursor_pos"(rx2465_pos)
    $P10 = rx2465_cur."O"("%relational, :reducecheck<smartmatch>")
    unless $P10, rx2465_fail
    rx2465_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2465_pos = $P10."pos"()
  # rx pass
    rx2465_cur."!cursor_pass"(rx2465_pos, "infix:sym<~~>")
    if_null rx2465_debug, debug_1808
    rx2465_cur."!cursor_debug"("PASS", "infix:sym<~~>", " at pos=", rx2465_pos)
  debug_1808:
    .return (rx2465_cur)
  rx2465_restart:
    if_null rx2465_debug, debug_1809
    rx2465_cur."!cursor_debug"("NEXT", "infix:sym<~~>")
  debug_1809:
  rx2465_fail:
    (rx2465_rep, rx2465_pos, $I10, $P10) = rx2465_cur."!mark_fail"(0)
    lt rx2465_pos, -1, rx2465_done
    eq rx2465_pos, -1, rx2465_fail
    jump $I10
  rx2465_done:
    rx2465_cur."!cursor_fail"()
    if_null rx2465_debug, debug_1810
    rx2465_cur."!cursor_debug"("FAIL", "infix:sym<~~>")
  debug_1810:
    .return (rx2465_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<~~>"  :subid("378_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1333
    $P103 = self."!PREFIX__!subrule"("O", "~~")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<&&>"  :subid("379_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1335
    .local string rx2470_tgt
    .local int rx2470_pos
    .local int rx2470_off
    .local int rx2470_eos
    .local int rx2470_rep
    .local pmc rx2470_cur
    .local pmc rx2470_debug
    (rx2470_cur, rx2470_pos, rx2470_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2470_cur
    .local pmc match
    .lex "$/", match
    length rx2470_eos, rx2470_tgt
    gt rx2470_pos, rx2470_eos, rx2470_done
    set rx2470_off, 0
    lt rx2470_pos, 2, rx2470_start
    sub rx2470_off, rx2470_pos, 1
    substr rx2470_tgt, rx2470_tgt, rx2470_off
  rx2470_start:
    eq $I10, 1, rx2470_restart
    if_null rx2470_debug, debug_1811
    rx2470_cur."!cursor_debug"("START", "infix:sym<&&>")
  debug_1811:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2471_done
    goto rxscan2471_scan
  rxscan2471_loop:
    (rx2470_pos) = rx2470_cur."from"()
    inc rx2470_pos
    rx2470_cur."!cursor_from"(rx2470_pos)
    ge rx2470_pos, rx2470_eos, rxscan2471_done
  rxscan2471_scan:
    set_addr $I10, rxscan2471_loop
    rx2470_cur."!mark_push"(0, rx2470_pos, $I10)
  rxscan2471_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2472_fail
    rx2470_cur."!mark_push"(0, rx2470_pos, $I10)
  # rx literal  "&&"
    add $I11, rx2470_pos, 2
    gt $I11, rx2470_eos, rx2470_fail
    sub $I11, rx2470_pos, rx2470_off
    substr $S10, rx2470_tgt, $I11, 2
    ne $S10, "&&", rx2470_fail
    add rx2470_pos, 2
    set_addr $I10, rxcap_2472_fail
    ($I12, $I11) = rx2470_cur."!mark_peek"($I10)
    rx2470_cur."!cursor_pos"($I11)
    ($P10) = rx2470_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2470_pos, "")
    rx2470_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2472_done
  rxcap_2472_fail:
    goto rx2470_fail
  rxcap_2472_done:
  # rx subrule "O" subtype=capture negate=
    rx2470_cur."!cursor_pos"(rx2470_pos)
    $P10 = rx2470_cur."O"("%tight_and, :pasttype<if>")
    unless $P10, rx2470_fail
    rx2470_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2470_pos = $P10."pos"()
  # rx pass
    rx2470_cur."!cursor_pass"(rx2470_pos, "infix:sym<&&>")
    if_null rx2470_debug, debug_1812
    rx2470_cur."!cursor_debug"("PASS", "infix:sym<&&>", " at pos=", rx2470_pos)
  debug_1812:
    .return (rx2470_cur)
  rx2470_restart:
    if_null rx2470_debug, debug_1813
    rx2470_cur."!cursor_debug"("NEXT", "infix:sym<&&>")
  debug_1813:
  rx2470_fail:
    (rx2470_rep, rx2470_pos, $I10, $P10) = rx2470_cur."!mark_fail"(0)
    lt rx2470_pos, -1, rx2470_done
    eq rx2470_pos, -1, rx2470_fail
    jump $I10
  rx2470_done:
    rx2470_cur."!cursor_fail"()
    if_null rx2470_debug, debug_1814
    rx2470_cur."!cursor_debug"("FAIL", "infix:sym<&&>")
  debug_1814:
    .return (rx2470_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<&&>"  :subid("380_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1335
    $P103 = self."!PREFIX__!subrule"("O", "&&")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<||>"  :subid("381_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1337
    .local string rx2475_tgt
    .local int rx2475_pos
    .local int rx2475_off
    .local int rx2475_eos
    .local int rx2475_rep
    .local pmc rx2475_cur
    .local pmc rx2475_debug
    (rx2475_cur, rx2475_pos, rx2475_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2475_cur
    .local pmc match
    .lex "$/", match
    length rx2475_eos, rx2475_tgt
    gt rx2475_pos, rx2475_eos, rx2475_done
    set rx2475_off, 0
    lt rx2475_pos, 2, rx2475_start
    sub rx2475_off, rx2475_pos, 1
    substr rx2475_tgt, rx2475_tgt, rx2475_off
  rx2475_start:
    eq $I10, 1, rx2475_restart
    if_null rx2475_debug, debug_1815
    rx2475_cur."!cursor_debug"("START", "infix:sym<||>")
  debug_1815:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2476_done
    goto rxscan2476_scan
  rxscan2476_loop:
    (rx2475_pos) = rx2475_cur."from"()
    inc rx2475_pos
    rx2475_cur."!cursor_from"(rx2475_pos)
    ge rx2475_pos, rx2475_eos, rxscan2476_done
  rxscan2476_scan:
    set_addr $I10, rxscan2476_loop
    rx2475_cur."!mark_push"(0, rx2475_pos, $I10)
  rxscan2476_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2477_fail
    rx2475_cur."!mark_push"(0, rx2475_pos, $I10)
  # rx literal  "||"
    add $I11, rx2475_pos, 2
    gt $I11, rx2475_eos, rx2475_fail
    sub $I11, rx2475_pos, rx2475_off
    substr $S10, rx2475_tgt, $I11, 2
    ne $S10, "||", rx2475_fail
    add rx2475_pos, 2
    set_addr $I10, rxcap_2477_fail
    ($I12, $I11) = rx2475_cur."!mark_peek"($I10)
    rx2475_cur."!cursor_pos"($I11)
    ($P10) = rx2475_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2475_pos, "")
    rx2475_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2477_done
  rxcap_2477_fail:
    goto rx2475_fail
  rxcap_2477_done:
  # rx subrule "O" subtype=capture negate=
    rx2475_cur."!cursor_pos"(rx2475_pos)
    $P10 = rx2475_cur."O"("%tight_or, :pasttype<unless>")
    unless $P10, rx2475_fail
    rx2475_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2475_pos = $P10."pos"()
  # rx pass
    rx2475_cur."!cursor_pass"(rx2475_pos, "infix:sym<||>")
    if_null rx2475_debug, debug_1816
    rx2475_cur."!cursor_debug"("PASS", "infix:sym<||>", " at pos=", rx2475_pos)
  debug_1816:
    .return (rx2475_cur)
  rx2475_restart:
    if_null rx2475_debug, debug_1817
    rx2475_cur."!cursor_debug"("NEXT", "infix:sym<||>")
  debug_1817:
  rx2475_fail:
    (rx2475_rep, rx2475_pos, $I10, $P10) = rx2475_cur."!mark_fail"(0)
    lt rx2475_pos, -1, rx2475_done
    eq rx2475_pos, -1, rx2475_fail
    jump $I10
  rx2475_done:
    rx2475_cur."!cursor_fail"()
    if_null rx2475_debug, debug_1818
    rx2475_cur."!cursor_debug"("FAIL", "infix:sym<||>")
  debug_1818:
    .return (rx2475_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<||>"  :subid("382_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1337
    $P103 = self."!PREFIX__!subrule"("O", "||")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<//>"  :subid("383_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1338
    .local string rx2480_tgt
    .local int rx2480_pos
    .local int rx2480_off
    .local int rx2480_eos
    .local int rx2480_rep
    .local pmc rx2480_cur
    .local pmc rx2480_debug
    (rx2480_cur, rx2480_pos, rx2480_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2480_cur
    .local pmc match
    .lex "$/", match
    length rx2480_eos, rx2480_tgt
    gt rx2480_pos, rx2480_eos, rx2480_done
    set rx2480_off, 0
    lt rx2480_pos, 2, rx2480_start
    sub rx2480_off, rx2480_pos, 1
    substr rx2480_tgt, rx2480_tgt, rx2480_off
  rx2480_start:
    eq $I10, 1, rx2480_restart
    if_null rx2480_debug, debug_1819
    rx2480_cur."!cursor_debug"("START", "infix:sym<//>")
  debug_1819:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2481_done
    goto rxscan2481_scan
  rxscan2481_loop:
    (rx2480_pos) = rx2480_cur."from"()
    inc rx2480_pos
    rx2480_cur."!cursor_from"(rx2480_pos)
    ge rx2480_pos, rx2480_eos, rxscan2481_done
  rxscan2481_scan:
    set_addr $I10, rxscan2481_loop
    rx2480_cur."!mark_push"(0, rx2480_pos, $I10)
  rxscan2481_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2482_fail
    rx2480_cur."!mark_push"(0, rx2480_pos, $I10)
  # rx literal  "//"
    add $I11, rx2480_pos, 2
    gt $I11, rx2480_eos, rx2480_fail
    sub $I11, rx2480_pos, rx2480_off
    substr $S10, rx2480_tgt, $I11, 2
    ne $S10, "//", rx2480_fail
    add rx2480_pos, 2
    set_addr $I10, rxcap_2482_fail
    ($I12, $I11) = rx2480_cur."!mark_peek"($I10)
    rx2480_cur."!cursor_pos"($I11)
    ($P10) = rx2480_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2480_pos, "")
    rx2480_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2482_done
  rxcap_2482_fail:
    goto rx2480_fail
  rxcap_2482_done:
  # rx subrule "O" subtype=capture negate=
    rx2480_cur."!cursor_pos"(rx2480_pos)
    $P10 = rx2480_cur."O"("%tight_or, :pasttype<def_or>")
    unless $P10, rx2480_fail
    rx2480_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2480_pos = $P10."pos"()
  # rx pass
    rx2480_cur."!cursor_pass"(rx2480_pos, "infix:sym<//>")
    if_null rx2480_debug, debug_1820
    rx2480_cur."!cursor_debug"("PASS", "infix:sym<//>", " at pos=", rx2480_pos)
  debug_1820:
    .return (rx2480_cur)
  rx2480_restart:
    if_null rx2480_debug, debug_1821
    rx2480_cur."!cursor_debug"("NEXT", "infix:sym<//>")
  debug_1821:
  rx2480_fail:
    (rx2480_rep, rx2480_pos, $I10, $P10) = rx2480_cur."!mark_fail"(0)
    lt rx2480_pos, -1, rx2480_done
    eq rx2480_pos, -1, rx2480_fail
    jump $I10
  rx2480_done:
    rx2480_cur."!cursor_fail"()
    if_null rx2480_debug, debug_1822
    rx2480_cur."!cursor_debug"("FAIL", "infix:sym<//>")
  debug_1822:
    .return (rx2480_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<//>"  :subid("384_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1338
    $P103 = self."!PREFIX__!subrule"("O", "//")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<?? !!>"  :subid("385_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1340
    .local string rx2485_tgt
    .local int rx2485_pos
    .local int rx2485_off
    .local int rx2485_eos
    .local int rx2485_rep
    .local pmc rx2485_cur
    .local pmc rx2485_debug
    (rx2485_cur, rx2485_pos, rx2485_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2485_cur
    .local pmc match
    .lex "$/", match
    length rx2485_eos, rx2485_tgt
    gt rx2485_pos, rx2485_eos, rx2485_done
    set rx2485_off, 0
    lt rx2485_pos, 2, rx2485_start
    sub rx2485_off, rx2485_pos, 1
    substr rx2485_tgt, rx2485_tgt, rx2485_off
  rx2485_start:
    eq $I10, 1, rx2485_restart
    if_null rx2485_debug, debug_1823
    rx2485_cur."!cursor_debug"("START", "infix:sym<?? !!>")
  debug_1823:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2486_done
    goto rxscan2486_scan
  rxscan2486_loop:
    (rx2485_pos) = rx2485_cur."from"()
    inc rx2485_pos
    rx2485_cur."!cursor_from"(rx2485_pos)
    ge rx2485_pos, rx2485_eos, rxscan2486_done
  rxscan2486_scan:
    set_addr $I10, rxscan2486_loop
    rx2485_cur."!mark_push"(0, rx2485_pos, $I10)
  rxscan2486_done:
.annotate 'line', 1341
  # rx literal  "??"
    add $I11, rx2485_pos, 2
    gt $I11, rx2485_eos, rx2485_fail
    sub $I11, rx2485_pos, rx2485_off
    substr $S10, rx2485_tgt, $I11, 2
    ne $S10, "??", rx2485_fail
    add rx2485_pos, 2
.annotate 'line', 1342
  # rx subrule "ws" subtype=method negate=
    rx2485_cur."!cursor_pos"(rx2485_pos)
    $P10 = rx2485_cur."ws"()
    unless $P10, rx2485_fail
    rx2485_pos = $P10."pos"()
.annotate 'line', 1343
  # rx subrule "EXPR" subtype=capture negate=
    rx2485_cur."!cursor_pos"(rx2485_pos)
    $P10 = rx2485_cur."EXPR"("i=")
    unless $P10, rx2485_fail
    rx2485_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx2485_pos = $P10."pos"()
.annotate 'line', 1344
  # rx literal  "!!"
    add $I11, rx2485_pos, 2
    gt $I11, rx2485_eos, rx2485_fail
    sub $I11, rx2485_pos, rx2485_off
    substr $S10, rx2485_tgt, $I11, 2
    ne $S10, "!!", rx2485_fail
    add rx2485_pos, 2
.annotate 'line', 1345
  # rx subrule "O" subtype=capture negate=
    rx2485_cur."!cursor_pos"(rx2485_pos)
    $P10 = rx2485_cur."O"("%conditional, :reducecheck<ternary>, :pasttype<if>")
    unless $P10, rx2485_fail
    rx2485_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2485_pos = $P10."pos"()
.annotate 'line', 1340
  # rx pass
    rx2485_cur."!cursor_pass"(rx2485_pos, "infix:sym<?? !!>")
    if_null rx2485_debug, debug_1824
    rx2485_cur."!cursor_debug"("PASS", "infix:sym<?? !!>", " at pos=", rx2485_pos)
  debug_1824:
    .return (rx2485_cur)
  rx2485_restart:
    if_null rx2485_debug, debug_1825
    rx2485_cur."!cursor_debug"("NEXT", "infix:sym<?? !!>")
  debug_1825:
  rx2485_fail:
    (rx2485_rep, rx2485_pos, $I10, $P10) = rx2485_cur."!mark_fail"(0)
    lt rx2485_pos, -1, rx2485_done
    eq rx2485_pos, -1, rx2485_fail
    jump $I10
  rx2485_done:
    rx2485_cur."!cursor_fail"()
    if_null rx2485_debug, debug_1826
    rx2485_cur."!cursor_debug"("FAIL", "infix:sym<?? !!>")
  debug_1826:
    .return (rx2485_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<?? !!>"  :subid("386_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1340
    $P103 = self."!PREFIX__!subrule"("ws", "??")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<=>"  :subid("387_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1348
    .local string rx2489_tgt
    .local int rx2489_pos
    .local int rx2489_off
    .local int rx2489_eos
    .local int rx2489_rep
    .local pmc rx2489_cur
    .local pmc rx2489_debug
    (rx2489_cur, rx2489_pos, rx2489_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2489_cur
    .local pmc match
    .lex "$/", match
    length rx2489_eos, rx2489_tgt
    gt rx2489_pos, rx2489_eos, rx2489_done
    set rx2489_off, 0
    lt rx2489_pos, 2, rx2489_start
    sub rx2489_off, rx2489_pos, 1
    substr rx2489_tgt, rx2489_tgt, rx2489_off
  rx2489_start:
    eq $I10, 1, rx2489_restart
    if_null rx2489_debug, debug_1827
    rx2489_cur."!cursor_debug"("START", "infix:sym<=>")
  debug_1827:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2490_done
    goto rxscan2490_scan
  rxscan2490_loop:
    (rx2489_pos) = rx2489_cur."from"()
    inc rx2489_pos
    rx2489_cur."!cursor_from"(rx2489_pos)
    ge rx2489_pos, rx2489_eos, rxscan2490_done
  rxscan2490_scan:
    set_addr $I10, rxscan2490_loop
    rx2489_cur."!mark_push"(0, rx2489_pos, $I10)
  rxscan2490_done:
.annotate 'line', 1349
  # rx subcapture "sym"
    set_addr $I10, rxcap_2491_fail
    rx2489_cur."!mark_push"(0, rx2489_pos, $I10)
  # rx literal  "="
    add $I11, rx2489_pos, 1
    gt $I11, rx2489_eos, rx2489_fail
    sub $I11, rx2489_pos, rx2489_off
    ord $I11, rx2489_tgt, $I11
    ne $I11, 61, rx2489_fail
    add rx2489_pos, 1
    set_addr $I10, rxcap_2491_fail
    ($I12, $I11) = rx2489_cur."!mark_peek"($I10)
    rx2489_cur."!cursor_pos"($I11)
    ($P10) = rx2489_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2489_pos, "")
    rx2489_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2491_done
  rxcap_2491_fail:
    goto rx2489_fail
  rxcap_2491_done:
  # rx subrule "panic" subtype=method negate=
    rx2489_cur."!cursor_pos"(rx2489_pos)
    $P10 = rx2489_cur."panic"("Assignment (\"=\") not supported in NQP, use \":=\" instead")
    unless $P10, rx2489_fail
    rx2489_pos = $P10."pos"()
.annotate 'line', 1348
  # rx pass
    rx2489_cur."!cursor_pass"(rx2489_pos, "infix:sym<=>")
    if_null rx2489_debug, debug_1828
    rx2489_cur."!cursor_debug"("PASS", "infix:sym<=>", " at pos=", rx2489_pos)
  debug_1828:
    .return (rx2489_cur)
  rx2489_restart:
    if_null rx2489_debug, debug_1829
    rx2489_cur."!cursor_debug"("NEXT", "infix:sym<=>")
  debug_1829:
  rx2489_fail:
    (rx2489_rep, rx2489_pos, $I10, $P10) = rx2489_cur."!mark_fail"(0)
    lt rx2489_pos, -1, rx2489_done
    eq rx2489_pos, -1, rx2489_fail
    jump $I10
  rx2489_done:
    rx2489_cur."!cursor_fail"()
    if_null rx2489_debug, debug_1830
    rx2489_cur."!cursor_debug"("FAIL", "infix:sym<=>")
  debug_1830:
    .return (rx2489_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<=>"  :subid("388_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1348
    $P103 = self."!PREFIX__!subrule"("panic", "=")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<:=>"  :subid("389_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1351
    .local string rx2494_tgt
    .local int rx2494_pos
    .local int rx2494_off
    .local int rx2494_eos
    .local int rx2494_rep
    .local pmc rx2494_cur
    .local pmc rx2494_debug
    (rx2494_cur, rx2494_pos, rx2494_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2494_cur
    .local pmc match
    .lex "$/", match
    length rx2494_eos, rx2494_tgt
    gt rx2494_pos, rx2494_eos, rx2494_done
    set rx2494_off, 0
    lt rx2494_pos, 2, rx2494_start
    sub rx2494_off, rx2494_pos, 1
    substr rx2494_tgt, rx2494_tgt, rx2494_off
  rx2494_start:
    eq $I10, 1, rx2494_restart
    if_null rx2494_debug, debug_1831
    rx2494_cur."!cursor_debug"("START", "infix:sym<:=>")
  debug_1831:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2495_done
    goto rxscan2495_scan
  rxscan2495_loop:
    (rx2494_pos) = rx2494_cur."from"()
    inc rx2494_pos
    rx2494_cur."!cursor_from"(rx2494_pos)
    ge rx2494_pos, rx2494_eos, rxscan2495_done
  rxscan2495_scan:
    set_addr $I10, rxscan2495_loop
    rx2494_cur."!mark_push"(0, rx2494_pos, $I10)
  rxscan2495_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2496_fail
    rx2494_cur."!mark_push"(0, rx2494_pos, $I10)
  # rx literal  ":="
    add $I11, rx2494_pos, 2
    gt $I11, rx2494_eos, rx2494_fail
    sub $I11, rx2494_pos, rx2494_off
    substr $S10, rx2494_tgt, $I11, 2
    ne $S10, ":=", rx2494_fail
    add rx2494_pos, 2
    set_addr $I10, rxcap_2496_fail
    ($I12, $I11) = rx2494_cur."!mark_peek"($I10)
    rx2494_cur."!cursor_pos"($I11)
    ($P10) = rx2494_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2494_pos, "")
    rx2494_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2496_done
  rxcap_2496_fail:
    goto rx2494_fail
  rxcap_2496_done:
  # rx subrule "O" subtype=capture negate=
    rx2494_cur."!cursor_pos"(rx2494_pos)
    $P10 = rx2494_cur."O"("%assignment, :pasttype<bind_6model>")
    unless $P10, rx2494_fail
    rx2494_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2494_pos = $P10."pos"()
  # rx pass
    rx2494_cur."!cursor_pass"(rx2494_pos, "infix:sym<:=>")
    if_null rx2494_debug, debug_1832
    rx2494_cur."!cursor_debug"("PASS", "infix:sym<:=>", " at pos=", rx2494_pos)
  debug_1832:
    .return (rx2494_cur)
  rx2494_restart:
    if_null rx2494_debug, debug_1833
    rx2494_cur."!cursor_debug"("NEXT", "infix:sym<:=>")
  debug_1833:
  rx2494_fail:
    (rx2494_rep, rx2494_pos, $I10, $P10) = rx2494_cur."!mark_fail"(0)
    lt rx2494_pos, -1, rx2494_done
    eq rx2494_pos, -1, rx2494_fail
    jump $I10
  rx2494_done:
    rx2494_cur."!cursor_fail"()
    if_null rx2494_debug, debug_1834
    rx2494_cur."!cursor_debug"("FAIL", "infix:sym<:=>")
  debug_1834:
    .return (rx2494_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<:=>"  :subid("390_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1351
    $P103 = self."!PREFIX__!subrule"("O", ":=")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<::=>"  :subid("391_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1352
    .local string rx2499_tgt
    .local int rx2499_pos
    .local int rx2499_off
    .local int rx2499_eos
    .local int rx2499_rep
    .local pmc rx2499_cur
    .local pmc rx2499_debug
    (rx2499_cur, rx2499_pos, rx2499_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2499_cur
    .local pmc match
    .lex "$/", match
    length rx2499_eos, rx2499_tgt
    gt rx2499_pos, rx2499_eos, rx2499_done
    set rx2499_off, 0
    lt rx2499_pos, 2, rx2499_start
    sub rx2499_off, rx2499_pos, 1
    substr rx2499_tgt, rx2499_tgt, rx2499_off
  rx2499_start:
    eq $I10, 1, rx2499_restart
    if_null rx2499_debug, debug_1835
    rx2499_cur."!cursor_debug"("START", "infix:sym<::=>")
  debug_1835:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2500_done
    goto rxscan2500_scan
  rxscan2500_loop:
    (rx2499_pos) = rx2499_cur."from"()
    inc rx2499_pos
    rx2499_cur."!cursor_from"(rx2499_pos)
    ge rx2499_pos, rx2499_eos, rxscan2500_done
  rxscan2500_scan:
    set_addr $I10, rxscan2500_loop
    rx2499_cur."!mark_push"(0, rx2499_pos, $I10)
  rxscan2500_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2501_fail
    rx2499_cur."!mark_push"(0, rx2499_pos, $I10)
  # rx literal  "::="
    add $I11, rx2499_pos, 3
    gt $I11, rx2499_eos, rx2499_fail
    sub $I11, rx2499_pos, rx2499_off
    substr $S10, rx2499_tgt, $I11, 3
    ne $S10, "::=", rx2499_fail
    add rx2499_pos, 3
    set_addr $I10, rxcap_2501_fail
    ($I12, $I11) = rx2499_cur."!mark_peek"($I10)
    rx2499_cur."!cursor_pos"($I11)
    ($P10) = rx2499_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2499_pos, "")
    rx2499_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2501_done
  rxcap_2501_fail:
    goto rx2499_fail
  rxcap_2501_done:
  # rx subrule "O" subtype=capture negate=
    rx2499_cur."!cursor_pos"(rx2499_pos)
    $P10 = rx2499_cur."O"("%assignment, :pasttype<bind_6model>")
    unless $P10, rx2499_fail
    rx2499_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2499_pos = $P10."pos"()
  # rx pass
    rx2499_cur."!cursor_pass"(rx2499_pos, "infix:sym<::=>")
    if_null rx2499_debug, debug_1836
    rx2499_cur."!cursor_debug"("PASS", "infix:sym<::=>", " at pos=", rx2499_pos)
  debug_1836:
    .return (rx2499_cur)
  rx2499_restart:
    if_null rx2499_debug, debug_1837
    rx2499_cur."!cursor_debug"("NEXT", "infix:sym<::=>")
  debug_1837:
  rx2499_fail:
    (rx2499_rep, rx2499_pos, $I10, $P10) = rx2499_cur."!mark_fail"(0)
    lt rx2499_pos, -1, rx2499_done
    eq rx2499_pos, -1, rx2499_fail
    jump $I10
  rx2499_done:
    rx2499_cur."!cursor_fail"()
    if_null rx2499_debug, debug_1838
    rx2499_cur."!cursor_debug"("FAIL", "infix:sym<::=>")
  debug_1838:
    .return (rx2499_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<::=>"  :subid("392_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1352
    $P103 = self."!PREFIX__!subrule"("O", "::=")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<,>"  :subid("393_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1354
    .local string rx2504_tgt
    .local int rx2504_pos
    .local int rx2504_off
    .local int rx2504_eos
    .local int rx2504_rep
    .local pmc rx2504_cur
    .local pmc rx2504_debug
    (rx2504_cur, rx2504_pos, rx2504_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2504_cur
    .local pmc match
    .lex "$/", match
    length rx2504_eos, rx2504_tgt
    gt rx2504_pos, rx2504_eos, rx2504_done
    set rx2504_off, 0
    lt rx2504_pos, 2, rx2504_start
    sub rx2504_off, rx2504_pos, 1
    substr rx2504_tgt, rx2504_tgt, rx2504_off
  rx2504_start:
    eq $I10, 1, rx2504_restart
    if_null rx2504_debug, debug_1839
    rx2504_cur."!cursor_debug"("START", "infix:sym<,>")
  debug_1839:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2505_done
    goto rxscan2505_scan
  rxscan2505_loop:
    (rx2504_pos) = rx2504_cur."from"()
    inc rx2504_pos
    rx2504_cur."!cursor_from"(rx2504_pos)
    ge rx2504_pos, rx2504_eos, rxscan2505_done
  rxscan2505_scan:
    set_addr $I10, rxscan2505_loop
    rx2504_cur."!mark_push"(0, rx2504_pos, $I10)
  rxscan2505_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2506_fail
    rx2504_cur."!mark_push"(0, rx2504_pos, $I10)
  # rx literal  ","
    add $I11, rx2504_pos, 1
    gt $I11, rx2504_eos, rx2504_fail
    sub $I11, rx2504_pos, rx2504_off
    ord $I11, rx2504_tgt, $I11
    ne $I11, 44, rx2504_fail
    add rx2504_pos, 1
    set_addr $I10, rxcap_2506_fail
    ($I12, $I11) = rx2504_cur."!mark_peek"($I10)
    rx2504_cur."!cursor_pos"($I11)
    ($P10) = rx2504_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2504_pos, "")
    rx2504_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2506_done
  rxcap_2506_fail:
    goto rx2504_fail
  rxcap_2506_done:
  # rx subrule "O" subtype=capture negate=
    rx2504_cur."!cursor_pos"(rx2504_pos)
    $P10 = rx2504_cur."O"("%comma, :pasttype<list>")
    unless $P10, rx2504_fail
    rx2504_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2504_pos = $P10."pos"()
  # rx pass
    rx2504_cur."!cursor_pass"(rx2504_pos, "infix:sym<,>")
    if_null rx2504_debug, debug_1840
    rx2504_cur."!cursor_debug"("PASS", "infix:sym<,>", " at pos=", rx2504_pos)
  debug_1840:
    .return (rx2504_cur)
  rx2504_restart:
    if_null rx2504_debug, debug_1841
    rx2504_cur."!cursor_debug"("NEXT", "infix:sym<,>")
  debug_1841:
  rx2504_fail:
    (rx2504_rep, rx2504_pos, $I10, $P10) = rx2504_cur."!mark_fail"(0)
    lt rx2504_pos, -1, rx2504_done
    eq rx2504_pos, -1, rx2504_fail
    jump $I10
  rx2504_done:
    rx2504_cur."!cursor_fail"()
    if_null rx2504_debug, debug_1842
    rx2504_cur."!cursor_debug"("FAIL", "infix:sym<,>")
  debug_1842:
    .return (rx2504_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<,>"  :subid("394_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1354
    $P103 = self."!PREFIX__!subrule"("O", ",")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<return>"  :subid("395_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1356
    .const 'Sub' $P2513 = "585_1334921493.34" 
    capture_lex $P2513
    .local string rx2509_tgt
    .local int rx2509_pos
    .local int rx2509_off
    .local int rx2509_eos
    .local int rx2509_rep
    .local pmc rx2509_cur
    .local pmc rx2509_debug
    (rx2509_cur, rx2509_pos, rx2509_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2509_cur
    .local pmc match
    .lex "$/", match
    length rx2509_eos, rx2509_tgt
    gt rx2509_pos, rx2509_eos, rx2509_done
    set rx2509_off, 0
    lt rx2509_pos, 2, rx2509_start
    sub rx2509_off, rx2509_pos, 1
    substr rx2509_tgt, rx2509_tgt, rx2509_off
  rx2509_start:
    eq $I10, 1, rx2509_restart
    if_null rx2509_debug, debug_1843
    rx2509_cur."!cursor_debug"("START", "prefix:sym<return>")
  debug_1843:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2510_done
    goto rxscan2510_scan
  rxscan2510_loop:
    (rx2509_pos) = rx2509_cur."from"()
    inc rx2509_pos
    rx2509_cur."!cursor_from"(rx2509_pos)
    ge rx2509_pos, rx2509_eos, rxscan2510_done
  rxscan2510_scan:
    set_addr $I10, rxscan2510_loop
    rx2509_cur."!mark_push"(0, rx2509_pos, $I10)
  rxscan2510_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2511_fail
    rx2509_cur."!mark_push"(0, rx2509_pos, $I10)
  # rx literal  "return"
    add $I11, rx2509_pos, 6
    gt $I11, rx2509_eos, rx2509_fail
    sub $I11, rx2509_pos, rx2509_off
    substr $S10, rx2509_tgt, $I11, 6
    ne $S10, "return", rx2509_fail
    add rx2509_pos, 6
    set_addr $I10, rxcap_2511_fail
    ($I12, $I11) = rx2509_cur."!mark_peek"($I10)
    rx2509_cur."!cursor_pos"($I11)
    ($P10) = rx2509_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2509_pos, "")
    rx2509_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2511_done
  rxcap_2511_fail:
    goto rx2509_fail
  rxcap_2511_done:
  # rx charclass s
    ge rx2509_pos, rx2509_eos, rx2509_fail
    sub $I10, rx2509_pos, rx2509_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx2509_tgt, $I10
    unless $I11, rx2509_fail
    inc rx2509_pos
  # rx subrule "O" subtype=capture negate=
    rx2509_cur."!cursor_pos"(rx2509_pos)
    $P10 = rx2509_cur."O"("%list_prefix, :pasttype<return>")
    unless $P10, rx2509_fail
    rx2509_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2509_pos = $P10."pos"()
    rx2509_cur."!cursor_pos"(rx2509_pos)
    find_lex $P103, unicode:"$\x{a2}"
    $P104 = $P103."MATCH"()
    store_lex "$/", $P104
    .const 'Sub' $P2513 = "585_1334921493.34" 
    capture_lex $P2513
    $P106 = $P2513()
  # rx pass
    rx2509_cur."!cursor_pass"(rx2509_pos, "prefix:sym<return>")
    if_null rx2509_debug, debug_1844
    rx2509_cur."!cursor_debug"("PASS", "prefix:sym<return>", " at pos=", rx2509_pos)
  debug_1844:
    .return (rx2509_cur)
  rx2509_restart:
    if_null rx2509_debug, debug_1845
    rx2509_cur."!cursor_debug"("NEXT", "prefix:sym<return>")
  debug_1845:
  rx2509_fail:
    (rx2509_rep, rx2509_pos, $I10, $P10) = rx2509_cur."!mark_fail"(0)
    lt rx2509_pos, -1, rx2509_done
    eq rx2509_pos, -1, rx2509_fail
    jump $I10
  rx2509_done:
    rx2509_cur."!cursor_fail"()
    if_null rx2509_debug, debug_1846
    rx2509_cur."!cursor_debug"("FAIL", "prefix:sym<return>")
  debug_1846:
    .return (rx2509_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2512"  :anon :subid("585_1334921493.34") :outer("395_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1356
    new $P105, "Float"
    assign $P105, 1
    store_dynamic_lex "$*RETURN_USED", $P105
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<return>"  :subid("396_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1356
    new $P107, "ResizablePMCArray"
    push $P107, "return"
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<make>"  :subid("397_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1357
    .local string rx2516_tgt
    .local int rx2516_pos
    .local int rx2516_off
    .local int rx2516_eos
    .local int rx2516_rep
    .local pmc rx2516_cur
    .local pmc rx2516_debug
    (rx2516_cur, rx2516_pos, rx2516_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2516_cur
    .local pmc match
    .lex "$/", match
    length rx2516_eos, rx2516_tgt
    gt rx2516_pos, rx2516_eos, rx2516_done
    set rx2516_off, 0
    lt rx2516_pos, 2, rx2516_start
    sub rx2516_off, rx2516_pos, 1
    substr rx2516_tgt, rx2516_tgt, rx2516_off
  rx2516_start:
    eq $I10, 1, rx2516_restart
    if_null rx2516_debug, debug_1847
    rx2516_cur."!cursor_debug"("START", "prefix:sym<make>")
  debug_1847:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2517_done
    goto rxscan2517_scan
  rxscan2517_loop:
    (rx2516_pos) = rx2516_cur."from"()
    inc rx2516_pos
    rx2516_cur."!cursor_from"(rx2516_pos)
    ge rx2516_pos, rx2516_eos, rxscan2517_done
  rxscan2517_scan:
    set_addr $I10, rxscan2517_loop
    rx2516_cur."!mark_push"(0, rx2516_pos, $I10)
  rxscan2517_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2518_fail
    rx2516_cur."!mark_push"(0, rx2516_pos, $I10)
  # rx literal  "make"
    add $I11, rx2516_pos, 4
    gt $I11, rx2516_eos, rx2516_fail
    sub $I11, rx2516_pos, rx2516_off
    substr $S10, rx2516_tgt, $I11, 4
    ne $S10, "make", rx2516_fail
    add rx2516_pos, 4
    set_addr $I10, rxcap_2518_fail
    ($I12, $I11) = rx2516_cur."!mark_peek"($I10)
    rx2516_cur."!cursor_pos"($I11)
    ($P10) = rx2516_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2516_pos, "")
    rx2516_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2518_done
  rxcap_2518_fail:
    goto rx2516_fail
  rxcap_2518_done:
  # rx charclass s
    ge rx2516_pos, rx2516_eos, rx2516_fail
    sub $I10, rx2516_pos, rx2516_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx2516_tgt, $I10
    unless $I11, rx2516_fail
    inc rx2516_pos
  # rx subrule "O" subtype=capture negate=
    rx2516_cur."!cursor_pos"(rx2516_pos)
    $P10 = rx2516_cur."O"("%list_prefix")
    unless $P10, rx2516_fail
    rx2516_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2516_pos = $P10."pos"()
  # rx pass
    rx2516_cur."!cursor_pass"(rx2516_pos, "prefix:sym<make>")
    if_null rx2516_debug, debug_1848
    rx2516_cur."!cursor_debug"("PASS", "prefix:sym<make>", " at pos=", rx2516_pos)
  debug_1848:
    .return (rx2516_cur)
  rx2516_restart:
    if_null rx2516_debug, debug_1849
    rx2516_cur."!cursor_debug"("NEXT", "prefix:sym<make>")
  debug_1849:
  rx2516_fail:
    (rx2516_rep, rx2516_pos, $I10, $P10) = rx2516_cur."!mark_fail"(0)
    lt rx2516_pos, -1, rx2516_done
    eq rx2516_pos, -1, rx2516_fail
    jump $I10
  rx2516_done:
    rx2516_cur."!cursor_fail"()
    if_null rx2516_debug, debug_1850
    rx2516_cur."!cursor_debug"("FAIL", "prefix:sym<make>")
  debug_1850:
    .return (rx2516_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<make>"  :subid("398_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1357
    new $P103, "ResizablePMCArray"
    push $P103, "make"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<last>"  :subid("399_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1358
    .local string rx2521_tgt
    .local int rx2521_pos
    .local int rx2521_off
    .local int rx2521_eos
    .local int rx2521_rep
    .local pmc rx2521_cur
    .local pmc rx2521_debug
    (rx2521_cur, rx2521_pos, rx2521_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2521_cur
    .local pmc match
    .lex "$/", match
    length rx2521_eos, rx2521_tgt
    gt rx2521_pos, rx2521_eos, rx2521_done
    set rx2521_off, 0
    lt rx2521_pos, 2, rx2521_start
    sub rx2521_off, rx2521_pos, 1
    substr rx2521_tgt, rx2521_tgt, rx2521_off
  rx2521_start:
    eq $I10, 1, rx2521_restart
    if_null rx2521_debug, debug_1851
    rx2521_cur."!cursor_debug"("START", "term:sym<last>")
  debug_1851:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2522_done
    goto rxscan2522_scan
  rxscan2522_loop:
    (rx2521_pos) = rx2521_cur."from"()
    inc rx2521_pos
    rx2521_cur."!cursor_from"(rx2521_pos)
    ge rx2521_pos, rx2521_eos, rxscan2522_done
  rxscan2522_scan:
    set_addr $I10, rxscan2522_loop
    rx2521_cur."!mark_push"(0, rx2521_pos, $I10)
  rxscan2522_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2523_fail
    rx2521_cur."!mark_push"(0, rx2521_pos, $I10)
  # rx literal  "last"
    add $I11, rx2521_pos, 4
    gt $I11, rx2521_eos, rx2521_fail
    sub $I11, rx2521_pos, rx2521_off
    substr $S10, rx2521_tgt, $I11, 4
    ne $S10, "last", rx2521_fail
    add rx2521_pos, 4
    set_addr $I10, rxcap_2523_fail
    ($I12, $I11) = rx2521_cur."!mark_peek"($I10)
    rx2521_cur."!cursor_pos"($I11)
    ($P10) = rx2521_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2521_pos, "")
    rx2521_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2523_done
  rxcap_2523_fail:
    goto rx2521_fail
  rxcap_2523_done:
  # rx pass
    rx2521_cur."!cursor_pass"(rx2521_pos, "term:sym<last>")
    if_null rx2521_debug, debug_1852
    rx2521_cur."!cursor_debug"("PASS", "term:sym<last>", " at pos=", rx2521_pos)
  debug_1852:
    .return (rx2521_cur)
  rx2521_restart:
    if_null rx2521_debug, debug_1853
    rx2521_cur."!cursor_debug"("NEXT", "term:sym<last>")
  debug_1853:
  rx2521_fail:
    (rx2521_rep, rx2521_pos, $I10, $P10) = rx2521_cur."!mark_fail"(0)
    lt rx2521_pos, -1, rx2521_done
    eq rx2521_pos, -1, rx2521_fail
    jump $I10
  rx2521_done:
    rx2521_cur."!cursor_fail"()
    if_null rx2521_debug, debug_1854
    rx2521_cur."!cursor_debug"("FAIL", "term:sym<last>")
  debug_1854:
    .return (rx2521_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<last>"  :subid("400_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1358
    new $P103, "ResizablePMCArray"
    push $P103, "last"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<next>"  :subid("401_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1359
    .local string rx2526_tgt
    .local int rx2526_pos
    .local int rx2526_off
    .local int rx2526_eos
    .local int rx2526_rep
    .local pmc rx2526_cur
    .local pmc rx2526_debug
    (rx2526_cur, rx2526_pos, rx2526_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2526_cur
    .local pmc match
    .lex "$/", match
    length rx2526_eos, rx2526_tgt
    gt rx2526_pos, rx2526_eos, rx2526_done
    set rx2526_off, 0
    lt rx2526_pos, 2, rx2526_start
    sub rx2526_off, rx2526_pos, 1
    substr rx2526_tgt, rx2526_tgt, rx2526_off
  rx2526_start:
    eq $I10, 1, rx2526_restart
    if_null rx2526_debug, debug_1855
    rx2526_cur."!cursor_debug"("START", "term:sym<next>")
  debug_1855:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2527_done
    goto rxscan2527_scan
  rxscan2527_loop:
    (rx2526_pos) = rx2526_cur."from"()
    inc rx2526_pos
    rx2526_cur."!cursor_from"(rx2526_pos)
    ge rx2526_pos, rx2526_eos, rxscan2527_done
  rxscan2527_scan:
    set_addr $I10, rxscan2527_loop
    rx2526_cur."!mark_push"(0, rx2526_pos, $I10)
  rxscan2527_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2528_fail
    rx2526_cur."!mark_push"(0, rx2526_pos, $I10)
  # rx literal  "next"
    add $I11, rx2526_pos, 4
    gt $I11, rx2526_eos, rx2526_fail
    sub $I11, rx2526_pos, rx2526_off
    substr $S10, rx2526_tgt, $I11, 4
    ne $S10, "next", rx2526_fail
    add rx2526_pos, 4
    set_addr $I10, rxcap_2528_fail
    ($I12, $I11) = rx2526_cur."!mark_peek"($I10)
    rx2526_cur."!cursor_pos"($I11)
    ($P10) = rx2526_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2526_pos, "")
    rx2526_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2528_done
  rxcap_2528_fail:
    goto rx2526_fail
  rxcap_2528_done:
  # rx pass
    rx2526_cur."!cursor_pass"(rx2526_pos, "term:sym<next>")
    if_null rx2526_debug, debug_1856
    rx2526_cur."!cursor_debug"("PASS", "term:sym<next>", " at pos=", rx2526_pos)
  debug_1856:
    .return (rx2526_cur)
  rx2526_restart:
    if_null rx2526_debug, debug_1857
    rx2526_cur."!cursor_debug"("NEXT", "term:sym<next>")
  debug_1857:
  rx2526_fail:
    (rx2526_rep, rx2526_pos, $I10, $P10) = rx2526_cur."!mark_fail"(0)
    lt rx2526_pos, -1, rx2526_done
    eq rx2526_pos, -1, rx2526_fail
    jump $I10
  rx2526_done:
    rx2526_cur."!cursor_fail"()
    if_null rx2526_debug, debug_1858
    rx2526_cur."!cursor_debug"("FAIL", "term:sym<next>")
  debug_1858:
    .return (rx2526_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<next>"  :subid("402_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1359
    new $P103, "ResizablePMCArray"
    push $P103, "next"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<redo>"  :subid("403_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1360
    .local string rx2531_tgt
    .local int rx2531_pos
    .local int rx2531_off
    .local int rx2531_eos
    .local int rx2531_rep
    .local pmc rx2531_cur
    .local pmc rx2531_debug
    (rx2531_cur, rx2531_pos, rx2531_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2531_cur
    .local pmc match
    .lex "$/", match
    length rx2531_eos, rx2531_tgt
    gt rx2531_pos, rx2531_eos, rx2531_done
    set rx2531_off, 0
    lt rx2531_pos, 2, rx2531_start
    sub rx2531_off, rx2531_pos, 1
    substr rx2531_tgt, rx2531_tgt, rx2531_off
  rx2531_start:
    eq $I10, 1, rx2531_restart
    if_null rx2531_debug, debug_1859
    rx2531_cur."!cursor_debug"("START", "term:sym<redo>")
  debug_1859:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2532_done
    goto rxscan2532_scan
  rxscan2532_loop:
    (rx2531_pos) = rx2531_cur."from"()
    inc rx2531_pos
    rx2531_cur."!cursor_from"(rx2531_pos)
    ge rx2531_pos, rx2531_eos, rxscan2532_done
  rxscan2532_scan:
    set_addr $I10, rxscan2532_loop
    rx2531_cur."!mark_push"(0, rx2531_pos, $I10)
  rxscan2532_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2533_fail
    rx2531_cur."!mark_push"(0, rx2531_pos, $I10)
  # rx literal  "redo"
    add $I11, rx2531_pos, 4
    gt $I11, rx2531_eos, rx2531_fail
    sub $I11, rx2531_pos, rx2531_off
    substr $S10, rx2531_tgt, $I11, 4
    ne $S10, "redo", rx2531_fail
    add rx2531_pos, 4
    set_addr $I10, rxcap_2533_fail
    ($I12, $I11) = rx2531_cur."!mark_peek"($I10)
    rx2531_cur."!cursor_pos"($I11)
    ($P10) = rx2531_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2531_pos, "")
    rx2531_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2533_done
  rxcap_2533_fail:
    goto rx2531_fail
  rxcap_2533_done:
  # rx pass
    rx2531_cur."!cursor_pass"(rx2531_pos, "term:sym<redo>")
    if_null rx2531_debug, debug_1860
    rx2531_cur."!cursor_debug"("PASS", "term:sym<redo>", " at pos=", rx2531_pos)
  debug_1860:
    .return (rx2531_cur)
  rx2531_restart:
    if_null rx2531_debug, debug_1861
    rx2531_cur."!cursor_debug"("NEXT", "term:sym<redo>")
  debug_1861:
  rx2531_fail:
    (rx2531_rep, rx2531_pos, $I10, $P10) = rx2531_cur."!mark_fail"(0)
    lt rx2531_pos, -1, rx2531_done
    eq rx2531_pos, -1, rx2531_fail
    jump $I10
  rx2531_done:
    rx2531_cur."!cursor_fail"()
    if_null rx2531_debug, debug_1862
    rx2531_cur."!cursor_debug"("FAIL", "term:sym<redo>")
  debug_1862:
    .return (rx2531_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<redo>"  :subid("404_1334921493.34") :method :outer("571_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1360
    new $P103, "ResizablePMCArray"
    push $P103, "redo"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "smartmatch" :anon :subid("405_1334921493.34") :outer("571_1334921493.34")
    .param pmc param_2536
    .param pmc param_2537
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1362
    .lex "self", param_2536
    .lex "$/", param_2537
.annotate 'line', 1364
    new $P103, "Undef"
    set $P2538, $P103
    .lex "$t", $P2538
    new $P104, "Float"
    assign $P104, 0
    set $I100, $P104
    set $P2539, param_2537
    unless_null $P2539, vivify_1863
    $P2539 = root_new ['parrot';'ResizablePMCArray']
  vivify_1863:
    set $P105, $P2539[$I100]
    unless_null $P105, vivify_1864
    new $P105, "Undef"
  vivify_1864:
    set $P2538, $P105
    new $P104, "Float"
    assign $P104, 1
    set $I100, $P104
    set $P2540, param_2537
    unless_null $P2540, vivify_1865
    $P2540 = root_new ['parrot';'ResizablePMCArray']
  vivify_1865:
    set $P105, $P2540[$I100]
    unless_null $P105, vivify_1866
    new $P105, "Undef"
  vivify_1866:
    new $P106, "Float"
    assign $P106, 0
    set $I101, $P106
    set $P2541, param_2537
    unless_null $P2541, vivify_1867
    $P2541 = root_new ['parrot';'ResizablePMCArray']
    set param_2537, $P2541
  vivify_1867:
    set $P2541[$I101], $P105
    set $P104, $P2538
    unless_null $P104, vivify_1868
    new $P104, "Undef"
  vivify_1868:
    new $P105, "Float"
    assign $P105, 1
    set $I100, $P105
    set $P2542, param_2537
    unless_null $P2542, vivify_1869
    $P2542 = root_new ['parrot';'ResizablePMCArray']
    set param_2537, $P2542
  vivify_1869:
    set $P2542[$I100], $P104
.annotate 'line', 1362
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2544"  :subid("586_1334921493.34") :outer("542_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1368
    .const 'Sub' $P2598 = "421_1334921493.34" 
    capture_lex $P2598
    .const 'Sub' $P2595 = "420_1334921493.34" 
    capture_lex $P2595
    .const 'Sub' $P2594 = "419_1334921493.34" 
    capture_lex $P2594
    .const 'Sub' $P2591 = "418_1334921493.34" 
    capture_lex $P2591
    .const 'Sub' $P2590 = "417_1334921493.34" 
    capture_lex $P2590
    .const 'Sub' $P2581 = "416_1334921493.34" 
    capture_lex $P2581
    .const 'Sub' $P2580 = "415_1334921493.34" 
    capture_lex $P2580
    .const 'Sub' $P2572 = "414_1334921493.34" 
    capture_lex $P2572
    .const 'Sub' $P2571 = "413_1334921493.34" 
    capture_lex $P2571
    .const 'Sub' $P2568 = "412_1334921493.34" 
    capture_lex $P2568
    .const 'Sub' $P2567 = "411_1334921493.34" 
    capture_lex $P2567
    .const 'Sub' $P2560 = "410_1334921493.34" 
    capture_lex $P2560
    .const 'Sub' $P2559 = "409_1334921493.34" 
    capture_lex $P2559
    .const 'Sub' $P2556 = "408_1334921493.34" 
    capture_lex $P2556
    .const 'Sub' $P2555 = "407_1334921493.34" 
    capture_lex $P2555
    .const 'Sub' $P2548 = "406_1334921493.34" 
    capture_lex $P2548
    .lex "$?PACKAGE", $P2546
    .lex "$?CLASS", $P2547
.annotate 'line', 1404
    .const 'Sub' $P2598 = "421_1334921493.34" 
    capture_lex $P2598
.annotate 'line', 1368
    .return ($P2598)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "metachar:sym<:my>"  :subid("406_1334921493.34") :method :outer("586_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1369
    .const 'Sub' $P2552 = "587_1334921493.34" 
    capture_lex $P2552
    .local string rx2549_tgt
    .local int rx2549_pos
    .local int rx2549_off
    .local int rx2549_eos
    .local int rx2549_rep
    .local pmc rx2549_cur
    .local pmc rx2549_debug
    (rx2549_cur, rx2549_pos, rx2549_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2549_cur
    .local pmc match
    .lex "$/", match
    length rx2549_eos, rx2549_tgt
    gt rx2549_pos, rx2549_eos, rx2549_done
    set rx2549_off, 0
    lt rx2549_pos, 2, rx2549_start
    sub rx2549_off, rx2549_pos, 1
    substr rx2549_tgt, rx2549_tgt, rx2549_off
  rx2549_start:
    eq $I10, 1, rx2549_restart
    if_null rx2549_debug, debug_1870
    rx2549_cur."!cursor_debug"("START", "metachar:sym<:my>")
  debug_1870:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2550_done
    goto rxscan2550_scan
  rxscan2550_loop:
    (rx2549_pos) = rx2549_cur."from"()
    inc rx2549_pos
    rx2549_cur."!cursor_from"(rx2549_pos)
    ge rx2549_pos, rx2549_eos, rxscan2550_done
  rxscan2550_scan:
    set_addr $I10, rxscan2550_loop
    rx2549_cur."!mark_push"(0, rx2549_pos, $I10)
  rxscan2550_done:
.annotate 'line', 1370
  # rx literal  ":"
    add $I11, rx2549_pos, 1
    gt $I11, rx2549_eos, rx2549_fail
    sub $I11, rx2549_pos, rx2549_off
    ord $I11, rx2549_tgt, $I11
    ne $I11, 58, rx2549_fail
    add rx2549_pos, 1
  # rx subrule "before" subtype=zerowidth negate=
    rx2549_cur."!cursor_pos"(rx2549_pos)
    .const 'Sub' $P2552 = "587_1334921493.34" 
    capture_lex $P2552
    $P10 = rx2549_cur."before"($P2552)
    unless $P10, rx2549_fail
  # rx subrule "LANG" subtype=capture negate=
    rx2549_cur."!cursor_pos"(rx2549_pos)
    $P10 = rx2549_cur."LANG"("MAIN", "statement")
    unless $P10, rx2549_fail
    rx2549_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement")
    rx2549_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2549_cur."!cursor_pos"(rx2549_pos)
    $P10 = rx2549_cur."ws"()
    unless $P10, rx2549_fail
    rx2549_pos = $P10."pos"()
  # rx literal  ";"
    add $I11, rx2549_pos, 1
    gt $I11, rx2549_eos, rx2549_fail
    sub $I11, rx2549_pos, rx2549_off
    ord $I11, rx2549_tgt, $I11
    ne $I11, 59, rx2549_fail
    add rx2549_pos, 1
.annotate 'line', 1369
  # rx pass
    rx2549_cur."!cursor_pass"(rx2549_pos, "metachar:sym<:my>")
    if_null rx2549_debug, debug_1875
    rx2549_cur."!cursor_debug"("PASS", "metachar:sym<:my>", " at pos=", rx2549_pos)
  debug_1875:
    .return (rx2549_cur)
  rx2549_restart:
    if_null rx2549_debug, debug_1876
    rx2549_cur."!cursor_debug"("NEXT", "metachar:sym<:my>")
  debug_1876:
  rx2549_fail:
    (rx2549_rep, rx2549_pos, $I10, $P10) = rx2549_cur."!mark_fail"(0)
    lt rx2549_pos, -1, rx2549_done
    eq rx2549_pos, -1, rx2549_fail
    jump $I10
  rx2549_done:
    rx2549_cur."!cursor_fail"()
    if_null rx2549_debug, debug_1877
    rx2549_cur."!cursor_debug"("FAIL", "metachar:sym<:my>")
  debug_1877:
    .return (rx2549_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2551"  :anon :subid("587_1334921493.34") :method :outer("406_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1370
    .local string rx2553_tgt
    .local int rx2553_pos
    .local int rx2553_off
    .local int rx2553_eos
    .local int rx2553_rep
    .local pmc rx2553_cur
    .local pmc rx2553_debug
    (rx2553_cur, rx2553_pos, rx2553_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2553_cur
    .local pmc match
    .lex "$/", match
    length rx2553_eos, rx2553_tgt
    gt rx2553_pos, rx2553_eos, rx2553_done
    set rx2553_off, 0
    lt rx2553_pos, 2, rx2553_start
    sub rx2553_off, rx2553_pos, 1
    substr rx2553_tgt, rx2553_tgt, rx2553_off
  rx2553_start:
    eq $I10, 1, rx2553_restart
    if_null rx2553_debug, debug_1871
    rx2553_cur."!cursor_debug"("START", "")
  debug_1871:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2554_done
    goto rxscan2554_scan
  rxscan2554_loop:
    (rx2553_pos) = rx2553_cur."from"()
    inc rx2553_pos
    rx2553_cur."!cursor_from"(rx2553_pos)
    ge rx2553_pos, rx2553_eos, rxscan2554_done
  rxscan2554_scan:
    set_addr $I10, rxscan2554_loop
    rx2553_cur."!mark_push"(0, rx2553_pos, $I10)
  rxscan2554_done:
  # rx literal  "my"
    add $I11, rx2553_pos, 2
    gt $I11, rx2553_eos, rx2553_fail
    sub $I11, rx2553_pos, rx2553_off
    substr $S10, rx2553_tgt, $I11, 2
    ne $S10, "my", rx2553_fail
    add rx2553_pos, 2
  # rx pass
    rx2553_cur."!cursor_pass"(rx2553_pos, "")
    if_null rx2553_debug, debug_1872
    rx2553_cur."!cursor_debug"("PASS", "", " at pos=", rx2553_pos)
  debug_1872:
    .return (rx2553_cur)
  rx2553_restart:
    if_null rx2553_debug, debug_1873
    rx2553_cur."!cursor_debug"("NEXT", "")
  debug_1873:
  rx2553_fail:
    (rx2553_rep, rx2553_pos, $I10, $P10) = rx2553_cur."!mark_fail"(0)
    lt rx2553_pos, -1, rx2553_done
    eq rx2553_pos, -1, rx2553_fail
    jump $I10
  rx2553_done:
    rx2553_cur."!cursor_fail"()
    if_null rx2553_debug, debug_1874
    rx2553_cur."!cursor_debug"("FAIL", "")
  debug_1874:
    .return (rx2553_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__metachar:sym<:my>"  :subid("407_1334921493.34") :method :outer("586_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1369
    new $P103, "ResizablePMCArray"
    push $P103, ":"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "metachar:sym<{ }>"  :subid("408_1334921493.34") :method :outer("586_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1373
    .local string rx2557_tgt
    .local int rx2557_pos
    .local int rx2557_off
    .local int rx2557_eos
    .local int rx2557_rep
    .local pmc rx2557_cur
    .local pmc rx2557_debug
    (rx2557_cur, rx2557_pos, rx2557_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2557_cur
    .local pmc match
    .lex "$/", match
    length rx2557_eos, rx2557_tgt
    gt rx2557_pos, rx2557_eos, rx2557_done
    set rx2557_off, 0
    lt rx2557_pos, 2, rx2557_start
    sub rx2557_off, rx2557_pos, 1
    substr rx2557_tgt, rx2557_tgt, rx2557_off
  rx2557_start:
    eq $I10, 1, rx2557_restart
    if_null rx2557_debug, debug_1878
    rx2557_cur."!cursor_debug"("START", "metachar:sym<{ }>")
  debug_1878:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2558_done
    goto rxscan2558_scan
  rxscan2558_loop:
    (rx2557_pos) = rx2557_cur."from"()
    inc rx2557_pos
    rx2557_cur."!cursor_from"(rx2557_pos)
    ge rx2557_pos, rx2557_eos, rxscan2558_done
  rxscan2558_scan:
    set_addr $I10, rxscan2558_loop
    rx2557_cur."!mark_push"(0, rx2557_pos, $I10)
  rxscan2558_done:
.annotate 'line', 1374
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2557_pos, rx2557_off
    substr $S10, rx2557_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx2557_fail
  # rx subrule "codeblock" subtype=capture negate=
    rx2557_cur."!cursor_pos"(rx2557_pos)
    $P10 = rx2557_cur."codeblock"()
    unless $P10, rx2557_fail
    rx2557_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("codeblock")
    rx2557_pos = $P10."pos"()
.annotate 'line', 1373
  # rx pass
    rx2557_cur."!cursor_pass"(rx2557_pos, "metachar:sym<{ }>")
    if_null rx2557_debug, debug_1879
    rx2557_cur."!cursor_debug"("PASS", "metachar:sym<{ }>", " at pos=", rx2557_pos)
  debug_1879:
    .return (rx2557_cur)
  rx2557_restart:
    if_null rx2557_debug, debug_1880
    rx2557_cur."!cursor_debug"("NEXT", "metachar:sym<{ }>")
  debug_1880:
  rx2557_fail:
    (rx2557_rep, rx2557_pos, $I10, $P10) = rx2557_cur."!mark_fail"(0)
    lt rx2557_pos, -1, rx2557_done
    eq rx2557_pos, -1, rx2557_fail
    jump $I10
  rx2557_done:
    rx2557_cur."!cursor_fail"()
    if_null rx2557_debug, debug_1881
    rx2557_cur."!cursor_debug"("FAIL", "metachar:sym<{ }>")
  debug_1881:
    .return (rx2557_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__metachar:sym<{ }>"  :subid("409_1334921493.34") :method :outer("586_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1373
    new $P103, "ResizablePMCArray"
    push $P103, "{"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "metachar:sym<nqpvar>"  :subid("410_1334921493.34") :method :outer("586_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1377
    .const 'Sub' $P2564 = "588_1334921493.34" 
    capture_lex $P2564
    .local string rx2561_tgt
    .local int rx2561_pos
    .local int rx2561_off
    .local int rx2561_eos
    .local int rx2561_rep
    .local pmc rx2561_cur
    .local pmc rx2561_debug
    (rx2561_cur, rx2561_pos, rx2561_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2561_cur
    .local pmc match
    .lex "$/", match
    length rx2561_eos, rx2561_tgt
    gt rx2561_pos, rx2561_eos, rx2561_done
    set rx2561_off, 0
    lt rx2561_pos, 2, rx2561_start
    sub rx2561_off, rx2561_pos, 1
    substr rx2561_tgt, rx2561_tgt, rx2561_off
  rx2561_start:
    eq $I10, 1, rx2561_restart
    if_null rx2561_debug, debug_1882
    rx2561_cur."!cursor_debug"("START", "metachar:sym<nqpvar>")
  debug_1882:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2562_done
    goto rxscan2562_scan
  rxscan2562_loop:
    (rx2561_pos) = rx2561_cur."from"()
    inc rx2561_pos
    rx2561_cur."!cursor_from"(rx2561_pos)
    ge rx2561_pos, rx2561_eos, rxscan2562_done
  rxscan2562_scan:
    set_addr $I10, rxscan2562_loop
    rx2561_cur."!mark_push"(0, rx2561_pos, $I10)
  rxscan2562_done:
.annotate 'line', 1378
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2561_pos, rx2561_off
    substr $S10, rx2561_tgt, $I10, 1
    index $I11, "$@", $S10
    lt $I11, 0, rx2561_fail
  # rx subrule "before" subtype=zerowidth negate=
    rx2561_cur."!cursor_pos"(rx2561_pos)
    .const 'Sub' $P2564 = "588_1334921493.34" 
    capture_lex $P2564
    $P10 = rx2561_cur."before"($P2564)
    unless $P10, rx2561_fail
  # rx subrule "LANG" subtype=capture negate=
    rx2561_cur."!cursor_pos"(rx2561_pos)
    $P10 = rx2561_cur."LANG"("MAIN", "variable")
    unless $P10, rx2561_fail
    rx2561_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("var")
    rx2561_pos = $P10."pos"()
.annotate 'line', 1377
  # rx pass
    rx2561_cur."!cursor_pass"(rx2561_pos, "metachar:sym<nqpvar>")
    if_null rx2561_debug, debug_1887
    rx2561_cur."!cursor_debug"("PASS", "metachar:sym<nqpvar>", " at pos=", rx2561_pos)
  debug_1887:
    .return (rx2561_cur)
  rx2561_restart:
    if_null rx2561_debug, debug_1888
    rx2561_cur."!cursor_debug"("NEXT", "metachar:sym<nqpvar>")
  debug_1888:
  rx2561_fail:
    (rx2561_rep, rx2561_pos, $I10, $P10) = rx2561_cur."!mark_fail"(0)
    lt rx2561_pos, -1, rx2561_done
    eq rx2561_pos, -1, rx2561_fail
    jump $I10
  rx2561_done:
    rx2561_cur."!cursor_fail"()
    if_null rx2561_debug, debug_1889
    rx2561_cur."!cursor_debug"("FAIL", "metachar:sym<nqpvar>")
  debug_1889:
    .return (rx2561_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2563"  :anon :subid("588_1334921493.34") :method :outer("410_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1378
    .local string rx2565_tgt
    .local int rx2565_pos
    .local int rx2565_off
    .local int rx2565_eos
    .local int rx2565_rep
    .local pmc rx2565_cur
    .local pmc rx2565_debug
    (rx2565_cur, rx2565_pos, rx2565_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2565_cur
    .local pmc match
    .lex "$/", match
    length rx2565_eos, rx2565_tgt
    gt rx2565_pos, rx2565_eos, rx2565_done
    set rx2565_off, 0
    lt rx2565_pos, 2, rx2565_start
    sub rx2565_off, rx2565_pos, 1
    substr rx2565_tgt, rx2565_tgt, rx2565_off
  rx2565_start:
    eq $I10, 1, rx2565_restart
    if_null rx2565_debug, debug_1883
    rx2565_cur."!cursor_debug"("START", "")
  debug_1883:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2566_done
    goto rxscan2566_scan
  rxscan2566_loop:
    (rx2565_pos) = rx2565_cur."from"()
    inc rx2565_pos
    rx2565_cur."!cursor_from"(rx2565_pos)
    ge rx2565_pos, rx2565_eos, rxscan2566_done
  rxscan2566_scan:
    set_addr $I10, rxscan2566_loop
    rx2565_cur."!mark_push"(0, rx2565_pos, $I10)
  rxscan2566_done:
  # rx charclass .
    ge rx2565_pos, rx2565_eos, rx2565_fail
    inc rx2565_pos
  # rx charclass w
    ge rx2565_pos, rx2565_eos, rx2565_fail
    sub $I10, rx2565_pos, rx2565_off
    is_cclass $I11, .CCLASS_WORD, rx2565_tgt, $I10
    unless $I11, rx2565_fail
    inc rx2565_pos
  # rx pass
    rx2565_cur."!cursor_pass"(rx2565_pos, "")
    if_null rx2565_debug, debug_1884
    rx2565_cur."!cursor_debug"("PASS", "", " at pos=", rx2565_pos)
  debug_1884:
    .return (rx2565_cur)
  rx2565_restart:
    if_null rx2565_debug, debug_1885
    rx2565_cur."!cursor_debug"("NEXT", "")
  debug_1885:
  rx2565_fail:
    (rx2565_rep, rx2565_pos, $I10, $P10) = rx2565_cur."!mark_fail"(0)
    lt rx2565_pos, -1, rx2565_done
    eq rx2565_pos, -1, rx2565_fail
    jump $I10
  rx2565_done:
    rx2565_cur."!cursor_fail"()
    if_null rx2565_debug, debug_1886
    rx2565_cur."!cursor_debug"("FAIL", "")
  debug_1886:
    .return (rx2565_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__metachar:sym<nqpvar>"  :subid("411_1334921493.34") :method :outer("586_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1377
    new $P103, "ResizablePMCArray"
    push $P103, "$"
    push $P103, "@"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<{ }>"  :subid("412_1334921493.34") :method :outer("586_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1381
    .local string rx2569_tgt
    .local int rx2569_pos
    .local int rx2569_off
    .local int rx2569_eos
    .local int rx2569_rep
    .local pmc rx2569_cur
    .local pmc rx2569_debug
    (rx2569_cur, rx2569_pos, rx2569_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2569_cur
    .local pmc match
    .lex "$/", match
    length rx2569_eos, rx2569_tgt
    gt rx2569_pos, rx2569_eos, rx2569_done
    set rx2569_off, 0
    lt rx2569_pos, 2, rx2569_start
    sub rx2569_off, rx2569_pos, 1
    substr rx2569_tgt, rx2569_tgt, rx2569_off
  rx2569_start:
    eq $I10, 1, rx2569_restart
    if_null rx2569_debug, debug_1890
    rx2569_cur."!cursor_debug"("START", "assertion:sym<{ }>")
  debug_1890:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2570_done
    goto rxscan2570_scan
  rxscan2570_loop:
    (rx2569_pos) = rx2569_cur."from"()
    inc rx2569_pos
    rx2569_cur."!cursor_from"(rx2569_pos)
    ge rx2569_pos, rx2569_eos, rxscan2570_done
  rxscan2570_scan:
    set_addr $I10, rxscan2570_loop
    rx2569_cur."!mark_push"(0, rx2569_pos, $I10)
  rxscan2570_done:
.annotate 'line', 1382
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2569_pos, rx2569_off
    substr $S10, rx2569_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx2569_fail
  # rx subrule "codeblock" subtype=capture negate=
    rx2569_cur."!cursor_pos"(rx2569_pos)
    $P10 = rx2569_cur."codeblock"()
    unless $P10, rx2569_fail
    rx2569_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("codeblock")
    rx2569_pos = $P10."pos"()
.annotate 'line', 1381
  # rx pass
    rx2569_cur."!cursor_pass"(rx2569_pos, "assertion:sym<{ }>")
    if_null rx2569_debug, debug_1891
    rx2569_cur."!cursor_debug"("PASS", "assertion:sym<{ }>", " at pos=", rx2569_pos)
  debug_1891:
    .return (rx2569_cur)
  rx2569_restart:
    if_null rx2569_debug, debug_1892
    rx2569_cur."!cursor_debug"("NEXT", "assertion:sym<{ }>")
  debug_1892:
  rx2569_fail:
    (rx2569_rep, rx2569_pos, $I10, $P10) = rx2569_cur."!mark_fail"(0)
    lt rx2569_pos, -1, rx2569_done
    eq rx2569_pos, -1, rx2569_fail
    jump $I10
  rx2569_done:
    rx2569_cur."!cursor_fail"()
    if_null rx2569_debug, debug_1893
    rx2569_cur."!cursor_debug"("FAIL", "assertion:sym<{ }>")
  debug_1893:
    .return (rx2569_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__assertion:sym<{ }>"  :subid("413_1334921493.34") :method :outer("586_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1381
    new $P103, "ResizablePMCArray"
    push $P103, "{"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<?{ }>"  :subid("414_1334921493.34") :method :outer("586_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1385
    .const 'Sub' $P2576 = "589_1334921493.34" 
    capture_lex $P2576
    .local string rx2573_tgt
    .local int rx2573_pos
    .local int rx2573_off
    .local int rx2573_eos
    .local int rx2573_rep
    .local pmc rx2573_cur
    .local pmc rx2573_debug
    (rx2573_cur, rx2573_pos, rx2573_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2573_cur
    .local pmc match
    .lex "$/", match
    length rx2573_eos, rx2573_tgt
    gt rx2573_pos, rx2573_eos, rx2573_done
    set rx2573_off, 0
    lt rx2573_pos, 2, rx2573_start
    sub rx2573_off, rx2573_pos, 1
    substr rx2573_tgt, rx2573_tgt, rx2573_off
  rx2573_start:
    eq $I10, 1, rx2573_restart
    if_null rx2573_debug, debug_1894
    rx2573_cur."!cursor_debug"("START", "assertion:sym<?{ }>")
  debug_1894:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2574_done
    goto rxscan2574_scan
  rxscan2574_loop:
    (rx2573_pos) = rx2573_cur."from"()
    inc rx2573_pos
    rx2573_cur."!cursor_from"(rx2573_pos)
    ge rx2573_pos, rx2573_eos, rxscan2574_done
  rxscan2574_scan:
    set_addr $I10, rxscan2574_loop
    rx2573_cur."!mark_push"(0, rx2573_pos, $I10)
  rxscan2574_done:
.annotate 'line', 1386
  # rx subcapture "zw"
    set_addr $I10, rxcap_2579_fail
    rx2573_cur."!mark_push"(0, rx2573_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx2573_pos, rx2573_eos, rx2573_fail
    sub $I10, rx2573_pos, rx2573_off
    substr $S10, rx2573_tgt, $I10, 1
    index $I11, "?!", $S10
    lt $I11, 0, rx2573_fail
    inc rx2573_pos
  # rx subrule "before" subtype=zerowidth negate=
    rx2573_cur."!cursor_pos"(rx2573_pos)
    .const 'Sub' $P2576 = "589_1334921493.34" 
    capture_lex $P2576
    $P10 = rx2573_cur."before"($P2576)
    unless $P10, rx2573_fail
    set_addr $I10, rxcap_2579_fail
    ($I12, $I11) = rx2573_cur."!mark_peek"($I10)
    rx2573_cur."!cursor_pos"($I11)
    ($P10) = rx2573_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2573_pos, "")
    rx2573_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("zw")
    goto rxcap_2579_done
  rxcap_2579_fail:
    goto rx2573_fail
  rxcap_2579_done:
  # rx subrule "codeblock" subtype=capture negate=
    rx2573_cur."!cursor_pos"(rx2573_pos)
    $P10 = rx2573_cur."codeblock"()
    unless $P10, rx2573_fail
    rx2573_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("codeblock")
    rx2573_pos = $P10."pos"()
.annotate 'line', 1385
  # rx pass
    rx2573_cur."!cursor_pass"(rx2573_pos, "assertion:sym<?{ }>")
    if_null rx2573_debug, debug_1899
    rx2573_cur."!cursor_debug"("PASS", "assertion:sym<?{ }>", " at pos=", rx2573_pos)
  debug_1899:
    .return (rx2573_cur)
  rx2573_restart:
    if_null rx2573_debug, debug_1900
    rx2573_cur."!cursor_debug"("NEXT", "assertion:sym<?{ }>")
  debug_1900:
  rx2573_fail:
    (rx2573_rep, rx2573_pos, $I10, $P10) = rx2573_cur."!mark_fail"(0)
    lt rx2573_pos, -1, rx2573_done
    eq rx2573_pos, -1, rx2573_fail
    jump $I10
  rx2573_done:
    rx2573_cur."!cursor_fail"()
    if_null rx2573_debug, debug_1901
    rx2573_cur."!cursor_debug"("FAIL", "assertion:sym<?{ }>")
  debug_1901:
    .return (rx2573_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2575"  :anon :subid("589_1334921493.34") :method :outer("414_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1386
    .local string rx2577_tgt
    .local int rx2577_pos
    .local int rx2577_off
    .local int rx2577_eos
    .local int rx2577_rep
    .local pmc rx2577_cur
    .local pmc rx2577_debug
    (rx2577_cur, rx2577_pos, rx2577_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2577_cur
    .local pmc match
    .lex "$/", match
    length rx2577_eos, rx2577_tgt
    gt rx2577_pos, rx2577_eos, rx2577_done
    set rx2577_off, 0
    lt rx2577_pos, 2, rx2577_start
    sub rx2577_off, rx2577_pos, 1
    substr rx2577_tgt, rx2577_tgt, rx2577_off
  rx2577_start:
    eq $I10, 1, rx2577_restart
    if_null rx2577_debug, debug_1895
    rx2577_cur."!cursor_debug"("START", "")
  debug_1895:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2578_done
    goto rxscan2578_scan
  rxscan2578_loop:
    (rx2577_pos) = rx2577_cur."from"()
    inc rx2577_pos
    rx2577_cur."!cursor_from"(rx2577_pos)
    ge rx2577_pos, rx2577_eos, rxscan2578_done
  rxscan2578_scan:
    set_addr $I10, rxscan2578_loop
    rx2577_cur."!mark_push"(0, rx2577_pos, $I10)
  rxscan2578_done:
  # rx literal  "{"
    add $I11, rx2577_pos, 1
    gt $I11, rx2577_eos, rx2577_fail
    sub $I11, rx2577_pos, rx2577_off
    ord $I11, rx2577_tgt, $I11
    ne $I11, 123, rx2577_fail
    add rx2577_pos, 1
  # rx pass
    rx2577_cur."!cursor_pass"(rx2577_pos, "")
    if_null rx2577_debug, debug_1896
    rx2577_cur."!cursor_debug"("PASS", "", " at pos=", rx2577_pos)
  debug_1896:
    .return (rx2577_cur)
  rx2577_restart:
    if_null rx2577_debug, debug_1897
    rx2577_cur."!cursor_debug"("NEXT", "")
  debug_1897:
  rx2577_fail:
    (rx2577_rep, rx2577_pos, $I10, $P10) = rx2577_cur."!mark_fail"(0)
    lt rx2577_pos, -1, rx2577_done
    eq rx2577_pos, -1, rx2577_fail
    jump $I10
  rx2577_done:
    rx2577_cur."!cursor_fail"()
    if_null rx2577_debug, debug_1898
    rx2577_cur."!cursor_debug"("FAIL", "")
  debug_1898:
    .return (rx2577_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__assertion:sym<?{ }>"  :subid("415_1334921493.34") :method :outer("586_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1385
    new $P103, "ResizablePMCArray"
    push $P103, "!"
    push $P103, "?"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<name>"  :subid("416_1334921493.34") :method :outer("586_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1389
    .const 'Sub' $P2587 = "590_1334921493.34" 
    capture_lex $P2587
    .local string rx2582_tgt
    .local int rx2582_pos
    .local int rx2582_off
    .local int rx2582_eos
    .local int rx2582_rep
    .local pmc rx2582_cur
    .local pmc rx2582_debug
    (rx2582_cur, rx2582_pos, rx2582_tgt, $I10) = self."!cursor_start"()
    rx2582_cur."!cursor_caparray"("assertion", "arglist", "nibbler")
    .lex unicode:"$\x{a2}", rx2582_cur
    .local pmc match
    .lex "$/", match
    length rx2582_eos, rx2582_tgt
    gt rx2582_pos, rx2582_eos, rx2582_done
    set rx2582_off, 0
    lt rx2582_pos, 2, rx2582_start
    sub rx2582_off, rx2582_pos, 1
    substr rx2582_tgt, rx2582_tgt, rx2582_off
  rx2582_start:
    eq $I10, 1, rx2582_restart
    if_null rx2582_debug, debug_1902
    rx2582_cur."!cursor_debug"("START", "assertion:sym<name>")
  debug_1902:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2583_done
    goto rxscan2583_scan
  rxscan2583_loop:
    (rx2582_pos) = rx2582_cur."from"()
    inc rx2582_pos
    rx2582_cur."!cursor_from"(rx2582_pos)
    ge rx2582_pos, rx2582_eos, rxscan2583_done
  rxscan2583_scan:
    set_addr $I10, rxscan2583_loop
    rx2582_cur."!mark_push"(0, rx2582_pos, $I10)
  rxscan2583_done:
.annotate 'line', 1390
  # rx subrule "identifier" subtype=capture negate=
    rx2582_cur."!cursor_pos"(rx2582_pos)
    $P10 = rx2582_cur."identifier"()
    unless $P10, rx2582_fail
    rx2582_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("longname")
    rx2582_pos = $P10."pos"()
.annotate 'line', 1397
  # rx rxquantr2584 ** 0..1
    set_addr $I10, rxquantr2584_done
    rx2582_cur."!mark_push"(0, rx2582_pos, $I10)
  rxquantr2584_loop:
  alt2585_0:
.annotate 'line', 1391
    set_addr $I10, alt2585_1
    rx2582_cur."!mark_push"(0, rx2582_pos, $I10)
.annotate 'line', 1392
  # rx subrule "before" subtype=zerowidth negate=
    rx2582_cur."!cursor_pos"(rx2582_pos)
    .const 'Sub' $P2587 = "590_1334921493.34" 
    capture_lex $P2587
    $P10 = rx2582_cur."before"($P2587)
    unless $P10, rx2582_fail
    goto alt2585_end
  alt2585_1:
    set_addr $I10, alt2585_2
    rx2582_cur."!mark_push"(0, rx2582_pos, $I10)
.annotate 'line', 1393
  # rx literal  "="
    add $I11, rx2582_pos, 1
    gt $I11, rx2582_eos, rx2582_fail
    sub $I11, rx2582_pos, rx2582_off
    ord $I11, rx2582_tgt, $I11
    ne $I11, 61, rx2582_fail
    add rx2582_pos, 1
  # rx subrule "assertion" subtype=capture negate=
    rx2582_cur."!cursor_pos"(rx2582_pos)
    $P10 = rx2582_cur."assertion"()
    unless $P10, rx2582_fail
    rx2582_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("assertion")
    rx2582_pos = $P10."pos"()
    goto alt2585_end
  alt2585_2:
    set_addr $I10, alt2585_3
    rx2582_cur."!mark_push"(0, rx2582_pos, $I10)
.annotate 'line', 1394
  # rx literal  ":"
    add $I11, rx2582_pos, 1
    gt $I11, rx2582_eos, rx2582_fail
    sub $I11, rx2582_pos, rx2582_off
    ord $I11, rx2582_tgt, $I11
    ne $I11, 58, rx2582_fail
    add rx2582_pos, 1
  # rx subrule "arglist" subtype=capture negate=
    rx2582_cur."!cursor_pos"(rx2582_pos)
    $P10 = rx2582_cur."arglist"()
    unless $P10, rx2582_fail
    rx2582_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("arglist")
    rx2582_pos = $P10."pos"()
    goto alt2585_end
  alt2585_3:
    set_addr $I10, alt2585_4
    rx2582_cur."!mark_push"(0, rx2582_pos, $I10)
.annotate 'line', 1395
  # rx literal  "("
    add $I11, rx2582_pos, 1
    gt $I11, rx2582_eos, rx2582_fail
    sub $I11, rx2582_pos, rx2582_off
    ord $I11, rx2582_tgt, $I11
    ne $I11, 40, rx2582_fail
    add rx2582_pos, 1
  # rx subrule "LANG" subtype=capture negate=
    rx2582_cur."!cursor_pos"(rx2582_pos)
    $P10 = rx2582_cur."LANG"("MAIN", "arglist")
    unless $P10, rx2582_fail
    rx2582_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("arglist")
    rx2582_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx2582_pos, 1
    gt $I11, rx2582_eos, rx2582_fail
    sub $I11, rx2582_pos, rx2582_off
    ord $I11, rx2582_tgt, $I11
    ne $I11, 41, rx2582_fail
    add rx2582_pos, 1
    goto alt2585_end
  alt2585_4:
.annotate 'line', 1396
  # rx subrule "normspace" subtype=method negate=
    rx2582_cur."!cursor_pos"(rx2582_pos)
    $P10 = rx2582_cur."normspace"()
    unless $P10, rx2582_fail
    rx2582_pos = $P10."pos"()
  # rx subrule "nibbler" subtype=capture negate=
    rx2582_cur."!cursor_pos"(rx2582_pos)
    $P10 = rx2582_cur."nibbler"()
    unless $P10, rx2582_fail
    rx2582_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("nibbler")
    rx2582_pos = $P10."pos"()
  alt2585_end:
.annotate 'line', 1397
    set_addr $I10, rxquantr2584_done
    (rx2582_rep) = rx2582_cur."!mark_commit"($I10)
  rxquantr2584_done:
.annotate 'line', 1389
  # rx pass
    rx2582_cur."!cursor_pass"(rx2582_pos, "assertion:sym<name>")
    if_null rx2582_debug, debug_1907
    rx2582_cur."!cursor_debug"("PASS", "assertion:sym<name>", " at pos=", rx2582_pos)
  debug_1907:
    .return (rx2582_cur)
  rx2582_restart:
    if_null rx2582_debug, debug_1908
    rx2582_cur."!cursor_debug"("NEXT", "assertion:sym<name>")
  debug_1908:
  rx2582_fail:
    (rx2582_rep, rx2582_pos, $I10, $P10) = rx2582_cur."!mark_fail"(0)
    lt rx2582_pos, -1, rx2582_done
    eq rx2582_pos, -1, rx2582_fail
    jump $I10
  rx2582_done:
    rx2582_cur."!cursor_fail"()
    if_null rx2582_debug, debug_1909
    rx2582_cur."!cursor_debug"("FAIL", "assertion:sym<name>")
  debug_1909:
    .return (rx2582_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2586"  :anon :subid("590_1334921493.34") :method :outer("416_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1392
    .local string rx2588_tgt
    .local int rx2588_pos
    .local int rx2588_off
    .local int rx2588_eos
    .local int rx2588_rep
    .local pmc rx2588_cur
    .local pmc rx2588_debug
    (rx2588_cur, rx2588_pos, rx2588_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2588_cur
    .local pmc match
    .lex "$/", match
    length rx2588_eos, rx2588_tgt
    gt rx2588_pos, rx2588_eos, rx2588_done
    set rx2588_off, 0
    lt rx2588_pos, 2, rx2588_start
    sub rx2588_off, rx2588_pos, 1
    substr rx2588_tgt, rx2588_tgt, rx2588_off
  rx2588_start:
    eq $I10, 1, rx2588_restart
    if_null rx2588_debug, debug_1903
    rx2588_cur."!cursor_debug"("START", "")
  debug_1903:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2589_done
    goto rxscan2589_scan
  rxscan2589_loop:
    (rx2588_pos) = rx2588_cur."from"()
    inc rx2588_pos
    rx2588_cur."!cursor_from"(rx2588_pos)
    ge rx2588_pos, rx2588_eos, rxscan2589_done
  rxscan2589_scan:
    set_addr $I10, rxscan2589_loop
    rx2588_cur."!mark_push"(0, rx2588_pos, $I10)
  rxscan2589_done:
  # rx literal  ">"
    add $I11, rx2588_pos, 1
    gt $I11, rx2588_eos, rx2588_fail
    sub $I11, rx2588_pos, rx2588_off
    ord $I11, rx2588_tgt, $I11
    ne $I11, 62, rx2588_fail
    add rx2588_pos, 1
  # rx pass
    rx2588_cur."!cursor_pass"(rx2588_pos, "")
    if_null rx2588_debug, debug_1904
    rx2588_cur."!cursor_debug"("PASS", "", " at pos=", rx2588_pos)
  debug_1904:
    .return (rx2588_cur)
  rx2588_restart:
    if_null rx2588_debug, debug_1905
    rx2588_cur."!cursor_debug"("NEXT", "")
  debug_1905:
  rx2588_fail:
    (rx2588_rep, rx2588_pos, $I10, $P10) = rx2588_cur."!mark_fail"(0)
    lt rx2588_pos, -1, rx2588_done
    eq rx2588_pos, -1, rx2588_fail
    jump $I10
  rx2588_done:
    rx2588_cur."!cursor_fail"()
    if_null rx2588_debug, debug_1906
    rx2588_cur."!cursor_debug"("FAIL", "")
  debug_1906:
    .return (rx2588_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__assertion:sym<name>"  :subid("417_1334921493.34") :method :outer("586_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1389
    $P103 = self."!PREFIX__!subrule"("identifier", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<var>"  :subid("418_1334921493.34") :method :outer("586_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1400
    .local string rx2592_tgt
    .local int rx2592_pos
    .local int rx2592_off
    .local int rx2592_eos
    .local int rx2592_rep
    .local pmc rx2592_cur
    .local pmc rx2592_debug
    (rx2592_cur, rx2592_pos, rx2592_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2592_cur
    .local pmc match
    .lex "$/", match
    length rx2592_eos, rx2592_tgt
    gt rx2592_pos, rx2592_eos, rx2592_done
    set rx2592_off, 0
    lt rx2592_pos, 2, rx2592_start
    sub rx2592_off, rx2592_pos, 1
    substr rx2592_tgt, rx2592_tgt, rx2592_off
  rx2592_start:
    eq $I10, 1, rx2592_restart
    if_null rx2592_debug, debug_1910
    rx2592_cur."!cursor_debug"("START", "assertion:sym<var>")
  debug_1910:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2593_done
    goto rxscan2593_scan
  rxscan2593_loop:
    (rx2592_pos) = rx2592_cur."from"()
    inc rx2592_pos
    rx2592_cur."!cursor_from"(rx2592_pos)
    ge rx2592_pos, rx2592_eos, rxscan2593_done
  rxscan2593_scan:
    set_addr $I10, rxscan2593_loop
    rx2592_cur."!mark_push"(0, rx2592_pos, $I10)
  rxscan2593_done:
.annotate 'line', 1401
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2592_pos, rx2592_off
    substr $S10, rx2592_tgt, $I10, 1
    index $I11, "$@", $S10
    lt $I11, 0, rx2592_fail
  # rx subrule "LANG" subtype=capture negate=
    rx2592_cur."!cursor_pos"(rx2592_pos)
    $P10 = rx2592_cur."LANG"("MAIN", "variable")
    unless $P10, rx2592_fail
    rx2592_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("var")
    rx2592_pos = $P10."pos"()
.annotate 'line', 1400
  # rx pass
    rx2592_cur."!cursor_pass"(rx2592_pos, "assertion:sym<var>")
    if_null rx2592_debug, debug_1911
    rx2592_cur."!cursor_debug"("PASS", "assertion:sym<var>", " at pos=", rx2592_pos)
  debug_1911:
    .return (rx2592_cur)
  rx2592_restart:
    if_null rx2592_debug, debug_1912
    rx2592_cur."!cursor_debug"("NEXT", "assertion:sym<var>")
  debug_1912:
  rx2592_fail:
    (rx2592_rep, rx2592_pos, $I10, $P10) = rx2592_cur."!mark_fail"(0)
    lt rx2592_pos, -1, rx2592_done
    eq rx2592_pos, -1, rx2592_fail
    jump $I10
  rx2592_done:
    rx2592_cur."!cursor_fail"()
    if_null rx2592_debug, debug_1913
    rx2592_cur."!cursor_debug"("FAIL", "assertion:sym<var>")
  debug_1913:
    .return (rx2592_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__assertion:sym<var>"  :subid("419_1334921493.34") :method :outer("586_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1400
    new $P103, "ResizablePMCArray"
    push $P103, "$"
    push $P103, "@"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "codeblock"  :subid("420_1334921493.34") :method :outer("586_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1404
    .local string rx2596_tgt
    .local int rx2596_pos
    .local int rx2596_off
    .local int rx2596_eos
    .local int rx2596_rep
    .local pmc rx2596_cur
    .local pmc rx2596_debug
    (rx2596_cur, rx2596_pos, rx2596_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2596_cur
    .local pmc match
    .lex "$/", match
    length rx2596_eos, rx2596_tgt
    gt rx2596_pos, rx2596_eos, rx2596_done
    set rx2596_off, 0
    lt rx2596_pos, 2, rx2596_start
    sub rx2596_off, rx2596_pos, 1
    substr rx2596_tgt, rx2596_tgt, rx2596_off
  rx2596_start:
    eq $I10, 1, rx2596_restart
    if_null rx2596_debug, debug_1914
    rx2596_cur."!cursor_debug"("START", "codeblock")
  debug_1914:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2597_done
    goto rxscan2597_scan
  rxscan2597_loop:
    (rx2596_pos) = rx2596_cur."from"()
    inc rx2596_pos
    rx2596_cur."!cursor_from"(rx2596_pos)
    ge rx2596_pos, rx2596_eos, rxscan2597_done
  rxscan2597_scan:
    set_addr $I10, rxscan2597_loop
    rx2596_cur."!mark_push"(0, rx2596_pos, $I10)
  rxscan2597_done:
.annotate 'line', 1405
  # rx subrule "LANG" subtype=capture negate=
    rx2596_cur."!cursor_pos"(rx2596_pos)
    $P10 = rx2596_cur."LANG"("MAIN", "pblock")
    unless $P10, rx2596_fail
    rx2596_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx2596_pos = $P10."pos"()
.annotate 'line', 1404
  # rx pass
    rx2596_cur."!cursor_pass"(rx2596_pos, "codeblock")
    if_null rx2596_debug, debug_1915
    rx2596_cur."!cursor_debug"("PASS", "codeblock", " at pos=", rx2596_pos)
  debug_1915:
    .return (rx2596_cur)
  rx2596_restart:
    if_null rx2596_debug, debug_1916
    rx2596_cur."!cursor_debug"("NEXT", "codeblock")
  debug_1916:
  rx2596_fail:
    (rx2596_rep, rx2596_pos, $I10, $P10) = rx2596_cur."!mark_fail"(0)
    lt rx2596_pos, -1, rx2596_done
    eq rx2596_pos, -1, rx2596_fail
    jump $I10
  rx2596_done:
    rx2596_cur."!cursor_fail"()
    if_null rx2596_debug, debug_1917
    rx2596_cur."!cursor_debug"("FAIL", "codeblock")
  debug_1917:
    .return (rx2596_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__codeblock"  :subid("421_1334921493.34") :method :outer("586_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1404
    $P103 = self."!PREFIX__!subrule"("LANG", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2599"  :subid("591_1334921493.34") :outer("542_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1411
    .const 'Sub' $P3836 = "534_1334921493.34" 
    capture_lex $P3836
    .const 'Sub' $P3833 = "533_1334921493.34" 
    capture_lex $P3833
    .const 'Sub' $P3830 = "532_1334921493.34" 
    capture_lex $P3830
    .const 'Sub' $P3827 = "531_1334921493.34" 
    capture_lex $P3827
    .const 'Sub' $P3824 = "530_1334921493.34" 
    capture_lex $P3824
    .const 'Sub' $P3821 = "529_1334921493.34" 
    capture_lex $P3821
    .const 'Sub' $P3818 = "528_1334921493.34" 
    capture_lex $P3818
    .const 'Sub' $P3814 = "527_1334921493.34" 
    capture_lex $P3814
    .const 'Sub' $P3811 = "526_1334921493.34" 
    capture_lex $P3811
    .const 'Sub' $P3807 = "525_1334921493.34" 
    capture_lex $P3807
    .const 'Sub' $P3803 = "524_1334921493.34" 
    capture_lex $P3803
    .const 'Sub' $P3792 = "523_1334921493.34" 
    capture_lex $P3792
    .const 'Sub' $P3788 = "522_1334921493.34" 
    capture_lex $P3788
    .const 'Sub' $P3784 = "521_1334921493.34" 
    capture_lex $P3784
    .const 'Sub' $P3780 = "520_1334921493.34" 
    capture_lex $P3780
    .const 'Sub' $P3776 = "519_1334921493.34" 
    capture_lex $P3776
    .const 'Sub' $P3772 = "518_1334921493.34" 
    capture_lex $P3772
    .const 'Sub' $P3768 = "517_1334921493.34" 
    capture_lex $P3768
    .const 'Sub' $P3758 = "516_1334921493.34" 
    capture_lex $P3758
    .const 'Sub' $P3751 = "515_1334921493.34" 
    capture_lex $P3751
    .const 'Sub' $P3747 = "514_1334921493.34" 
    capture_lex $P3747
    .const 'Sub' $P3743 = "513_1334921493.34" 
    capture_lex $P3743
    .const 'Sub' $P3739 = "512_1334921493.34" 
    capture_lex $P3739
    .const 'Sub' $P3735 = "511_1334921493.34" 
    capture_lex $P3735
    .const 'Sub' $P3731 = "510_1334921493.34" 
    capture_lex $P3731
    .const 'Sub' $P3722 = "509_1334921493.34" 
    capture_lex $P3722
    .const 'Sub' $P3704 = "508_1334921493.34" 
    capture_lex $P3704
    .const 'Sub' $P3700 = "507_1334921493.34" 
    capture_lex $P3700
    .const 'Sub' $P3696 = "506_1334921493.34" 
    capture_lex $P3696
    .const 'Sub' $P3687 = "505_1334921493.34" 
    capture_lex $P3687
    .const 'Sub' $P3680 = "504_1334921493.34" 
    capture_lex $P3680
    .const 'Sub' $P3676 = "503_1334921493.34" 
    capture_lex $P3676
    .const 'Sub' $P3672 = "502_1334921493.34" 
    capture_lex $P3672
    .const 'Sub' $P3641 = "501_1334921493.34" 
    capture_lex $P3641
    .const 'Sub' $P3637 = "500_1334921493.34" 
    capture_lex $P3637
    .const 'Sub' $P3634 = "499_1334921493.34" 
    capture_lex $P3634
    .const 'Sub' $P3622 = "498_1334921493.34" 
    capture_lex $P3622
    .const 'Sub' $P3618 = "497_1334921493.34" 
    capture_lex $P3618
    .const 'Sub' $P3608 = "496_1334921493.34" 
    capture_lex $P3608
    .const 'Sub' $P3589 = "495_1334921493.34" 
    capture_lex $P3589
    .const 'Sub' $P3583 = "494_1334921493.34" 
    capture_lex $P3583
    .const 'Sub' $P3580 = "493_1334921493.34" 
    capture_lex $P3580
    .const 'Sub' $P3560 = "492_1334921493.34" 
    capture_lex $P3560
    .const 'Sub' $P3511 = "491_1334921493.34" 
    capture_lex $P3511
    .const 'Sub' $P3475 = "490_1334921493.34" 
    capture_lex $P3475
    .const 'Sub' $P3471 = "489_1334921493.34" 
    capture_lex $P3471
    .const 'Sub' $P3453 = "488_1334921493.34" 
    capture_lex $P3453
    .const 'Sub' $P3446 = "487_1334921493.34" 
    capture_lex $P3446
    .const 'Sub' $P3441 = "486_1334921493.34" 
    capture_lex $P3441
    .const 'Sub' $P3404 = "485_1334921493.34" 
    capture_lex $P3404
    .const 'Sub' $P3385 = "484_1334921493.34" 
    capture_lex $P3385
    .const 'Sub' $P3351 = "483_1334921493.34" 
    capture_lex $P3351
    .const 'Sub' $P3274 = "482_1334921493.34" 
    capture_lex $P3274
    .const 'Sub' $P3270 = "481_1334921493.34" 
    capture_lex $P3270
    .const 'Sub' $P3266 = "480_1334921493.34" 
    capture_lex $P3266
    .const 'Sub' $P3226 = "479_1334921493.34" 
    capture_lex $P3226
    .const 'Sub' $P3222 = "478_1334921493.34" 
    capture_lex $P3222
    .const 'Sub' $P3215 = "477_1334921493.34" 
    capture_lex $P3215
    .const 'Sub' $P3208 = "476_1334921493.34" 
    capture_lex $P3208
    .const 'Sub' $P3201 = "475_1334921493.34" 
    capture_lex $P3201
    .const 'Sub' $P3191 = "474_1334921493.34" 
    capture_lex $P3191
    .const 'Sub' $P3187 = "473_1334921493.34" 
    capture_lex $P3187
    .const 'Sub' $P3183 = "472_1334921493.34" 
    capture_lex $P3183
    .const 'Sub' $P3179 = "471_1334921493.34" 
    capture_lex $P3179
    .const 'Sub' $P3112 = "470_1334921493.34" 
    capture_lex $P3112
    .const 'Sub' $P3086 = "469_1334921493.34" 
    capture_lex $P3086
    .const 'Sub' $P3082 = "468_1334921493.34" 
    capture_lex $P3082
    .const 'Sub' $P3078 = "467_1334921493.34" 
    capture_lex $P3078
    .const 'Sub' $P3074 = "466_1334921493.34" 
    capture_lex $P3074
    .const 'Sub' $P3070 = "465_1334921493.34" 
    capture_lex $P3070
    .const 'Sub' $P3066 = "464_1334921493.34" 
    capture_lex $P3066
    .const 'Sub' $P3062 = "463_1334921493.34" 
    capture_lex $P3062
    .const 'Sub' $P3007 = "462_1334921493.34" 
    capture_lex $P3007
    .const 'Sub' $P2989 = "461_1334921493.34" 
    capture_lex $P2989
    .const 'Sub' $P2983 = "460_1334921493.34" 
    capture_lex $P2983
    .const 'Sub' $P2979 = "459_1334921493.34" 
    capture_lex $P2979
    .const 'Sub' $P2975 = "458_1334921493.34" 
    capture_lex $P2975
    .const 'Sub' $P2971 = "457_1334921493.34" 
    capture_lex $P2971
    .const 'Sub' $P2967 = "456_1334921493.34" 
    capture_lex $P2967
    .const 'Sub' $P2963 = "455_1334921493.34" 
    capture_lex $P2963
    .const 'Sub' $P2959 = "454_1334921493.34" 
    capture_lex $P2959
    .const 'Sub' $P2955 = "453_1334921493.34" 
    capture_lex $P2955
    .const 'Sub' $P2951 = "452_1334921493.34" 
    capture_lex $P2951
    .const 'Sub' $P2947 = "451_1334921493.34" 
    capture_lex $P2947
    .const 'Sub' $P2943 = "450_1334921493.34" 
    capture_lex $P2943
    .const 'Sub' $P2939 = "449_1334921493.34" 
    capture_lex $P2939
    .const 'Sub' $P2935 = "448_1334921493.34" 
    capture_lex $P2935
    .const 'Sub' $P2931 = "447_1334921493.34" 
    capture_lex $P2931
    .const 'Sub' $P2924 = "446_1334921493.34" 
    capture_lex $P2924
    .const 'Sub' $P2917 = "445_1334921493.34" 
    capture_lex $P2917
    .const 'Sub' $P2913 = "444_1334921493.34" 
    capture_lex $P2913
    .const 'Sub' $P2909 = "443_1334921493.34" 
    capture_lex $P2909
    .const 'Sub' $P2904 = "442_1334921493.34" 
    capture_lex $P2904
    .const 'Sub' $P2899 = "441_1334921493.34" 
    capture_lex $P2899
    .const 'Sub' $P2890 = "440_1334921493.34" 
    capture_lex $P2890
    .const 'Sub' $P2879 = "439_1334921493.34" 
    capture_lex $P2879
    .const 'Sub' $P2873 = "438_1334921493.34" 
    capture_lex $P2873
    .const 'Sub' $P2868 = "437_1334921493.34" 
    capture_lex $P2868
    .const 'Sub' $P2849 = "436_1334921493.34" 
    capture_lex $P2849
    .const 'Sub' $P2843 = "435_1334921493.34" 
    capture_lex $P2843
    .const 'Sub' $P2840 = "434_1334921493.34" 
    capture_lex $P2840
    .const 'Sub' $P2837 = "433_1334921493.34" 
    capture_lex $P2837
    .const 'Sub' $P2823 = "432_1334921493.34" 
    capture_lex $P2823
    .const 'Sub' $P2820 = "431_1334921493.34" 
    capture_lex $P2820
    .const 'Sub' $P2808 = "430_1334921493.34" 
    capture_lex $P2808
    .const 'Sub' $P2804 = "429_1334921493.34" 
    capture_lex $P2804
    .const 'Sub' $P2800 = "428_1334921493.34" 
    capture_lex $P2800
    .const 'Sub' $P2795 = "427_1334921493.34" 
    capture_lex $P2795
    .const 'Sub' $P2766 = "426_1334921493.34" 
    capture_lex $P2766
    .const 'Sub' $P2748 = "425_1334921493.34" 
    capture_lex $P2748
    .const 'Sub' $P2739 = "424_1334921493.34" 
    capture_lex $P2739
    .const 'Sub' $P2729 = "423_1334921493.34" 
    capture_lex $P2729
    .const 'Sub' $P2725 = "422_1334921493.34" 
    capture_lex $P2725
    .const 'Sub' $P2696 = "607_1334921493.34" 
    capture_lex $P2696
    .const 'Sub' $P2691 = "606_1334921493.34" 
    capture_lex $P2691
    .const 'Sub' $P2673 = "604_1334921493.34" 
    capture_lex $P2673
    .const 'Sub' $P2654 = "602_1334921493.34" 
    capture_lex $P2654
    .const 'Sub' $P2650 = "601_1334921493.34" 
    capture_lex $P2650
    .const 'Sub' $P2642 = "600_1334921493.34" 
    capture_lex $P2642
    .const 'Sub' $P2632 = "598_1334921493.34" 
    capture_lex $P2632
    .const 'Sub' $P2627 = "597_1334921493.34" 
    capture_lex $P2627
    .const 'Sub' $P2621 = "596_1334921493.34" 
    capture_lex $P2621
    .const 'Sub' $P2608 = "593_1334921493.34" 
    capture_lex $P2608
    .const 'Sub' $P2602 = "592_1334921493.34" 
    capture_lex $P2602
.annotate 'line', 1412
    .const 'Sub' $P2602 = "592_1334921493.34" 
    newclosure $P2606, $P2602
    set $P2601, $P2606
    .lex "xblock_immediate", $P2601
.annotate 'line', 1417
    .const 'Sub' $P2608 = "593_1334921493.34" 
    newclosure $P2619, $P2608
    set $P2607, $P2619
    .lex "block_immediate", $P2607
.annotate 'line', 1427
    .const 'Sub' $P2621 = "596_1334921493.34" 
    newclosure $P2625, $P2621
    set $P2620, $P2625
    .lex "vivitype", $P2620
.annotate 'line', 1446
    .const 'Sub' $P2627 = "597_1334921493.34" 
    newclosure $P2630, $P2627
    set $P2626, $P2630
    .lex "colonpair_str", $P2626
.annotate 'line', 1618
    .const 'Sub' $P2632 = "598_1334921493.34" 
    newclosure $P2640, $P2632
    set $P2631, $P2640
    .lex "import_HOW_exports", $P2631
.annotate 'line', 1723
    .const 'Sub' $P2642 = "600_1334921493.34" 
    newclosure $P2648, $P2642
    set $P2641, $P2648
    .lex "push_block_handler", $P2641
.annotate 'line', 2288
    .const 'Sub' $P2650 = "601_1334921493.34" 
    newclosure $P2652, $P2650
    set $P2649, $P2652
    .lex "only_star_block", $P2649
.annotate 'line', 2297
    .const 'Sub' $P2654 = "602_1334921493.34" 
    newclosure $P2671, $P2654
    set $P2653, $P2671
    .lex "attach_multi_signature", $P2653
.annotate 'line', 2310
    .const 'Sub' $P2673 = "604_1334921493.34" 
    newclosure $P2689, $P2673
    set $P2672, $P2689
    .lex "attach_multi_signature_to_parrot_sub", $P2672
.annotate 'line', 2793
    .const 'Sub' $P2691 = "606_1334921493.34" 
    newclosure $P2694, $P2691
    set $P2690, $P2694
    .lex "control", $P2690
.annotate 'line', 2812
    .const 'Sub' $P2696 = "607_1334921493.34" 
    newclosure $P2722, $P2696
    set $P2695, $P2722
    .lex "lexical_package_lookup", $P2695
.annotate 'line', 1411
    .lex "$?PACKAGE", $P2723
    .lex "$?CLASS", $P2724
    set $P118, $P2601
    set $P118, $P2607
    set $P118, $P2620
    set $P118, $P2626
    set $P118, $P2631
    set $P118, $P2641
    set $P118, $P2649
    set $P118, $P2653
    set $P118, $P2672
    set $P118, $P2690
    set $P118, $P2695
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "xblock_immediate"  :subid("592_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2603
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1412
    .lex "$xblock", param_2603
.annotate 'line', 1413
    new $P103, "Float"
    assign $P103, 1
    set $I100, $P103
    set $P2604, param_2603
    unless_null $P2604, vivify_1918
    $P2604 = root_new ['parrot';'ResizablePMCArray']
  vivify_1918:
    set $P104, $P2604[$I100]
    unless_null $P104, vivify_1919
    new $P104, "Undef"
  vivify_1919:
    $P105 = "block_immediate"($P104)
    new $P106, "Float"
    assign $P106, 1
    set $I101, $P106
    set $P2605, param_2603
    unless_null $P2605, vivify_1920
    $P2605 = root_new ['parrot';'ResizablePMCArray']
    set param_2603, $P2605
  vivify_1920:
    set $P2605[$I101], $P105
.annotate 'line', 1412
    set $P103, param_2603
    unless_null $P103, vivify_1921
    new $P103, "Undef"
  vivify_1921:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "block_immediate"  :subid("593_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2609
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1417
    .const 'Sub' $P2613 = "594_1334921493.34" 
    capture_lex $P2613
    .lex "$block", param_2609
.annotate 'line', 1418
    set $P104, param_2609
    unless_null $P104, vivify_1922
    new $P104, "Undef"
  vivify_1922:
    $P104."blocktype"("immediate")
.annotate 'line', 1419
    set $P105, param_2609
    unless_null $P105, vivify_1923
    new $P105, "Undef"
  vivify_1923:
    $P106 = $P105."symtable"()
    unless $P106, unless_2611
    set $P104, $P106
    goto unless_2611_end
  unless_2611:
    set $P107, param_2609
    unless_null $P107, vivify_1924
    new $P107, "Undef"
  vivify_1924:
    $P108 = $P107."handlers"()
    set $P104, $P108
  unless_2611_end:
    if $P104, unless_2610_end
    .const 'Sub' $P2613 = "594_1334921493.34" 
    capture_lex $P2613
    $P2613()
  unless_2610_end:
.annotate 'line', 1417
    set $P104, param_2609
    unless_null $P104, vivify_1931
    new $P104, "Undef"
  vivify_1931:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block2612"  :anon :subid("594_1334921493.34") :outer("593_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1419
    .const 'Sub' $P2616 = "595_1334921493.34" 
    capture_lex $P2616
.annotate 'line', 1420
    new $P109, "Undef"
    set $P2614, $P109
    .lex "$stmts", $P2614
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Stmts"]
    find_lex $P114, "$block"
    unless_null $P114, vivify_1925
    new $P114, "Undef"
  vivify_1925:
    $P115 = $P113."new"($P114 :named("node"))
    set $P2614, $P115
.annotate 'line', 1421
    find_lex $P111, "$block"
    unless_null $P111, vivify_1926
    new $P111, "Undef"
  vivify_1926:
    $P112 = $P111."list"()
    defined $I100, $P112
    unless $I100, for_undef_1927
    iter $P110, $P112
    new $P114, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P114, loop2618_handler
    push_eh $P114
  loop2618_test:
    unless $P110, loop2618_done
    shift $P113, $P110
  loop2618_redo:
    .const 'Sub' $P2616 = "595_1334921493.34" 
    capture_lex $P2616
    $P2616($P113)
  loop2618_next:
    goto loop2618_test
  loop2618_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P115, exception, 'type'
    eq $P115, .CONTROL_LOOP_NEXT, loop2618_next
    eq $P115, .CONTROL_LOOP_REDO, loop2618_redo
  loop2618_done:
    pop_eh 
  for_undef_1927:
.annotate 'line', 1422
    set $P110, $P2614
    unless_null $P110, vivify_1930
    new $P110, "Undef"
  vivify_1930:
    store_lex "$block", $P110
.annotate 'line', 1419
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2615"  :anon :subid("595_1334921493.34") :outer("594_1334921493.34")
    .param pmc param_2617
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1421
    .lex "$_", param_2617
    find_lex $P114, "$stmts"
    unless_null $P114, vivify_1928
    new $P114, "Undef"
  vivify_1928:
    find_lex $P115, "$_"
    unless_null $P115, vivify_1929
    new $P115, "Undef"
  vivify_1929:
    $P116 = $P114."push"($P115)
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "vivitype"  :subid("596_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2622
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1427
    .lex "$sigil", param_2622
.annotate 'line', 1428
    set $P106, param_2622
    unless_null $P106, vivify_1932
    new $P106, "Undef"
  vivify_1932:
    set $S100, $P106
    iseq $I100, $S100, "%"
    if $I100, if_2623
.annotate 'line', 1430
    set $P113, param_2622
    unless_null $P113, vivify_1933
    new $P113, "Undef"
  vivify_1933:
    set $S101, $P113
    iseq $I101, $S101, "@"
    if $I101, if_2624
    new $P119, "String"
    assign $P119, "Undef"
    set $P112, $P119
    goto if_2624_end
  if_2624:
.annotate 'line', 1431
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Op"]
    $P118 = $P117."new"("    %r = root_new ['parrot';'ResizablePMCArray']" :named("inline"))
    set $P112, $P118
  if_2624_end:
    set $P105, $P112
.annotate 'line', 1428
    goto if_2623_end
  if_2623:
.annotate 'line', 1429
    get_hll_global $P107, "GLOBAL"
    nqp_get_package_through_who $P108, $P107, "PAST"
    get_who $P109, $P108
    set $P110, $P109["Op"]
    $P111 = $P110."new"("    %r = root_new ['parrot';'Hash']" :named("inline"))
    set $P105, $P111
  if_2623_end:
.annotate 'line', 1427
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "colonpair_str"  :subid("597_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2628
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1446
    .lex "$ast", param_2628
.annotate 'line', 1447
    get_hll_global $P107, "GLOBAL"
    nqp_get_package_through_who $P108, $P107, "PAST"
    get_who $P109, $P108
    set $P110, $P109["Op"]
    set $P111, param_2628
    unless_null $P111, vivify_1934
    new $P111, "Undef"
  vivify_1934:
    $P112 = $P110."ACCEPTS"($P111)
    if $P112, if_2629
.annotate 'line', 1449
    set $P115, param_2628
    unless_null $P115, vivify_1935
    new $P115, "Undef"
  vivify_1935:
    $P116 = $P115."value"()
    set $P106, $P116
.annotate 'line', 1447
    goto if_2629_end
  if_2629:
.annotate 'line', 1448
    set $P113, param_2628
    unless_null $P113, vivify_1936
    new $P113, "Undef"
  vivify_1936:
    $P114 = $P113."list"()
    join $S100, " ", $P114
    new $P106, 'String'
    set $P106, $S100
  if_2629_end:
.annotate 'line', 1446
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "import_HOW_exports"  :subid("598_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2633
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1618
    .const 'Sub' $P2637 = "599_1334921493.34" 
    capture_lex $P2637
    .lex "$UNIT", param_2633
.annotate 'line', 1620
    set $P108, param_2633
    unless_null $P108, vivify_1937
    new $P108, "Undef"
  vivify_1937:
    exists $I100, $P108["EXPORTHOW"]
    if $I100, if_2634
    new $P107, 'Integer'
    set $P107, $I100
    goto if_2634_end
  if_2634:
.annotate 'line', 1621
    set $P2635, param_2633
    unless_null $P2635, vivify_1938
    $P2635 = root_new ['parrot';'Hash']
  vivify_1938:
    set $P110, $P2635["EXPORTHOW"]
    unless_null $P110, vivify_1939
    new $P110, "Undef"
  vivify_1939:
    get_who $P111, $P110
    defined $I101, $P111
    unless $I101, for_undef_1940
    iter $P109, $P111
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop2639_handler
    push_eh $P113
  loop2639_test:
    unless $P109, loop2639_done
    shift $P112, $P109
  loop2639_redo:
    .const 'Sub' $P2637 = "599_1334921493.34" 
    capture_lex $P2637
    $P2637($P112)
  loop2639_next:
    goto loop2639_test
  loop2639_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P115, exception, 'type'
    eq $P115, .CONTROL_LOOP_NEXT, loop2639_next
    eq $P115, .CONTROL_LOOP_REDO, loop2639_redo
  loop2639_done:
    pop_eh 
  for_undef_1940:
.annotate 'line', 1620
    set $P107, $P109
  if_2634_end:
.annotate 'line', 1618
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2636"  :anon :subid("599_1334921493.34") :outer("598_1334921493.34")
    .param pmc param_2638
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1621
    .lex "$_", param_2638
.annotate 'line', 1622
    find_lex $P113, "$_"
    unless_null $P113, vivify_1941
    new $P113, "Undef"
  vivify_1941:
    $P114 = $P113."value"()
    find_lex $P115, "$_"
    unless_null $P115, vivify_1942
    new $P115, "Undef"
  vivify_1942:
    $P116 = $P115."key"()
    find_dynamic_lex $P119, "%*HOW"
    unless_null $P119, vivify_1943
    get_hll_global $P117, "GLOBAL"
    get_who $P118, $P117
    set $P119, $P118["%HOW"]
    unless_null $P119, vivify_1944
    die "Contextual %*HOW not found"
  vivify_1944:
    store_dynamic_lex "%*HOW", $P119
  vivify_1943:
    set $P119[$P116], $P114
.annotate 'line', 1621
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "push_block_handler"  :subid("600_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2643
    .param pmc param_2644
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1723
    .lex "$/", param_2643
    .lex "$block", param_2644
.annotate 'line', 1724
    new $P108, "Undef"
    set $P2645, $P108
    .lex "$BLOCK", $P2645
    find_dynamic_lex $P111, "$*W"
    unless_null $P111, vivify_1945
    get_hll_global $P109, "GLOBAL"
    get_who $P110, $P109
    set $P111, $P110["$W"]
    unless_null $P111, vivify_1946
    die "Contextual $*W not found"
  vivify_1946:
  vivify_1945:
    $P112 = $P111."cur_lexpad"()
    set $P2645, $P112
.annotate 'line', 1725
    set $P109, $P2645
    unless_null $P109, vivify_1947
    new $P109, "Undef"
  vivify_1947:
    $P110 = $P109."handlers"()
    if $P110, unless_2646_end
.annotate 'line', 1726
    set $P111, $P2645
    unless_null $P111, vivify_1948
    new $P111, "Undef"
  vivify_1948:
    new $P112, "ResizablePMCArray"
    $P111."handlers"($P112)
  unless_2646_end:
.annotate 'line', 1728
    set $P109, param_2644
    unless_null $P109, vivify_1949
    new $P109, "Undef"
  vivify_1949:
    $P110 = $P109."arity"()
    if $P110, unless_2647_end
.annotate 'line', 1729
    set $P111, param_2644
    unless_null $P111, vivify_1950
    new $P111, "Undef"
  vivify_1950:
.annotate 'line', 1730
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Op"]
.annotate 'line', 1731
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Var"]
    $P120 = $P119."new"("lexical" :named("scope"), "$!" :named("name"), 1 :named("isdecl"))
.annotate 'line', 1732
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Var"]
    $P125 = $P124."new"("lexical" :named("scope"), "$_" :named("name"))
    $P126 = $P115."new"($P120, $P125, "bind_6model" :named("pasttype"))
.annotate 'line', 1730
    $P111."unshift"($P126)
.annotate 'line', 1735
    set $P111, param_2644
    unless_null $P111, vivify_1951
    new $P111, "Undef"
  vivify_1951:
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Var"]
    $P116 = $P115."new"("$_" :named("name"), "parameter" :named("scope"))
    $P111."unshift"($P116)
.annotate 'line', 1736
    set $P111, param_2644
    unless_null $P111, vivify_1952
    new $P111, "Undef"
  vivify_1952:
    $P111."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1737
    set $P111, param_2644
    unless_null $P111, vivify_1953
    new $P111, "Undef"
  vivify_1953:
    $P111."symbol"("$!", "lexical" :named("scope"))
.annotate 'line', 1738
    set $P111, param_2644
    unless_null $P111, vivify_1954
    new $P111, "Undef"
  vivify_1954:
    $P111."arity"(1)
  unless_2647_end:
.annotate 'line', 1740
    set $P109, param_2644
    unless_null $P109, vivify_1955
    new $P109, "Undef"
  vivify_1955:
    $P109."blocktype"("declaration")
.annotate 'line', 1741
    set $P109, $P2645
    unless_null $P109, vivify_1956
    new $P109, "Undef"
  vivify_1956:
    $P110 = $P109."handlers"()
.annotate 'line', 1742
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "PAST"
    get_who $P113, $P112
    set $P114, $P113["Control"]
    set $P115, param_2643
    unless_null $P115, vivify_1957
    new $P115, "Undef"
  vivify_1957:
.annotate 'line', 1744
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Stmts"]
.annotate 'line', 1745
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Op"]
    set $P124, param_2644
    unless_null $P124, vivify_1958
    new $P124, "Undef"
  vivify_1958:
.annotate 'line', 1747
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
    $P129 = $P128."new"("register" :named("scope"), "exception" :named("name"))
    $P130 = $P123."new"($P124, $P129, "call" :named("pasttype"))
.annotate 'line', 1749
    get_hll_global $P131, "GLOBAL"
    nqp_get_package_through_who $P132, $P131, "PAST"
    get_who $P133, $P132
    set $P134, $P133["Op"]
.annotate 'line', 1750
    get_hll_global $P135, "GLOBAL"
    nqp_get_package_through_who $P136, $P135, "PAST"
    get_who $P137, $P136
    set $P138, $P137["Var"]
.annotate 'line', 1751
    get_hll_global $P139, "GLOBAL"
    nqp_get_package_through_who $P140, $P139, "PAST"
    get_who $P141, $P140
    set $P142, $P141["Var"]
    $P143 = $P142."new"("register" :named("scope"), "exception" :named("name"))
    $P144 = $P138."new"($P143, "handled", "keyed" :named("scope"))
.annotate 'line', 1750
    $P145 = $P134."new"($P144, 1, "bind_6model" :named("pasttype"))
.annotate 'line', 1749
    $P146 = $P119."new"($P130, $P145)
.annotate 'line', 1744
    $P147 = $P114."new"($P146, $P115 :named("node"))
.annotate 'line', 1742
    $P148 = $P110."unshift"($P147)
.annotate 'line', 1723
    .return ($P148)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "only_star_block"  :subid("601_1334921493.34") :outer("591_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2289
    new $P109, "Undef"
    set $P2651, $P109
    .lex "$past", $P2651
    find_dynamic_lex $P112, "$*W"
    unless_null $P112, vivify_1959
    get_hll_global $P110, "GLOBAL"
    get_who $P111, $P110
    set $P112, $P111["$W"]
    unless_null $P112, vivify_1960
    die "Contextual $*W not found"
  vivify_1960:
  vivify_1959:
    $P113 = $P112."pop_lexpad"()
    set $P2651, $P113
.annotate 'line', 2290
    set $P110, $P2651
    unless_null $P110, vivify_1961
    new $P110, "Undef"
  vivify_1961:
    $P110."closure"(1)
.annotate 'line', 2291
    set $P110, $P2651
    unless_null $P110, vivify_1962
    new $P110, "Undef"
  vivify_1962:
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "PAST"
    get_who $P113, $P112
    set $P114, $P113["Op"]
    $P115 = $P114."new"("multi_dispatch_over_lexical_candidates P" :named("pirop"))
    $P110."push"($P115)
.annotate 'line', 2288
    set $P110, $P2651
    unless_null $P110, vivify_1963
    new $P110, "Undef"
  vivify_1963:
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "attach_multi_signature"  :subid("602_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2655
    .param pmc param_2656
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2297
    .const 'Sub' $P2661 = "603_1334921493.34" 
    capture_lex $P2661
    .lex "$code_obj", param_2655
    .lex "$routine", param_2656
.annotate 'line', 2298
    new $P111, "Undef"
    set $P2657, $P111
    .lex "$types", $P2657
.annotate 'line', 2299
    new $P112, "Undef"
    set $P2658, $P112
    .lex "$definednesses", $P2658
.annotate 'line', 2298
    new $P113, "ResizablePMCArray"
    set $P2657, $P113
.annotate 'line', 2299
    new $P113, "ResizablePMCArray"
    set $P2658, $P113
.annotate 'line', 2300
    new $P114, "Float"
    assign $P114, 0
    set $I100, $P114
    set $P2659, param_2656
    unless_null $P2659, vivify_1964
    $P2659 = root_new ['parrot';'ResizablePMCArray']
  vivify_1964:
    set $P115, $P2659[$I100]
    unless_null $P115, vivify_1965
    new $P115, "Undef"
  vivify_1965:
    $P116 = $P115."list"()
    defined $I101, $P116
    unless $I101, for_undef_1966
    iter $P113, $P116
    new $P119, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P119, loop2670_handler
    push_eh $P119
  loop2670_test:
    unless $P113, loop2670_done
    shift $P117, $P113
  loop2670_redo:
    .const 'Sub' $P2661 = "603_1334921493.34" 
    capture_lex $P2661
    $P2661($P117)
  loop2670_next:
    goto loop2670_test
  loop2670_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P120, exception, 'type'
    eq $P120, .CONTROL_LOOP_NEXT, loop2670_next
    eq $P120, .CONTROL_LOOP_REDO, loop2670_redo
  loop2670_done:
    pop_eh 
  for_undef_1966:
.annotate 'line', 2307
    find_dynamic_lex $P115, "$*W"
    unless_null $P115, vivify_1978
    get_hll_global $P113, "GLOBAL"
    get_who $P114, $P113
    set $P115, $P114["$W"]
    unless_null $P115, vivify_1979
    die "Contextual $*W not found"
  vivify_1979:
  vivify_1978:
    set $P116, param_2655
    unless_null $P116, vivify_1980
    new $P116, "Undef"
  vivify_1980:
    set $P117, $P2657
    unless_null $P117, vivify_1981
    new $P117, "Undef"
  vivify_1981:
    set $P118, $P2658
    unless_null $P118, vivify_1982
    new $P118, "Undef"
  vivify_1982:
    $P119 = $P115."set_routine_signature"($P116, $P117, $P118)
.annotate 'line', 2297
    .return ($P119)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2660"  :anon :subid("603_1334921493.34") :outer("602_1334921493.34")
    .param pmc param_2662
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2300
    .lex "$_", param_2662
.annotate 'line', 2301
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Var"]
    find_lex $P124, "$_"
    unless_null $P124, vivify_1967
    new $P124, "Undef"
  vivify_1967:
    $P125 = $P123."ACCEPTS"($P124)
    if $P125, if_2664
    set $P119, $P125
    goto if_2664_end
  if_2664:
    find_lex $P126, "$_"
    unless_null $P126, vivify_1968
    new $P126, "Undef"
  vivify_1968:
    $S100 = $P126."scope"()
    iseq $I102, $S100, "parameter"
    new $P119, 'Integer'
    set $P119, $I102
  if_2664_end:
    if $P119, if_2663
    set $P118, $P119
    goto if_2663_end
  if_2663:
.annotate 'line', 2302
    find_lex $P127, "$types"
    unless_null $P127, vivify_1969
    new $P127, "Undef"
  vivify_1969:
    find_lex $P129, "$_"
    unless_null $P129, vivify_1970
    new $P129, "Undef"
  vivify_1970:
    $P130 = $P129."multitype"()
    if $P130, if_2665
    null $P134
    set $P128, $P134
    goto if_2665_end
  if_2665:
    find_lex $P131, "$_"
    unless_null $P131, vivify_1971
    new $P131, "Undef"
  vivify_1971:
    $P132 = $P131."multitype"()
    set $P133, $P132["compile_time_value"]
    unless_null $P133, vivify_1972
    new $P133, "Undef"
  vivify_1972:
    set $P128, $P133
  if_2665_end:
    $P127."push"($P128)
.annotate 'line', 2303
    find_lex $P127, "$definednesses"
    unless_null $P127, vivify_1973
    new $P127, "Undef"
  vivify_1973:
    find_lex $P2667, "$_"
    unless_null $P2667, vivify_1974
    $P2667 = root_new ['parrot';'Hash']
  vivify_1974:
    set $P129, $P2667["definedness"]
    unless_null $P129, vivify_1975
    new $P129, "Undef"
  vivify_1975:
    set $S101, $P129
    iseq $I103, $S101, "D"
    if $I103, if_2666
.annotate 'line', 2304
    find_lex $P2669, "$_"
    unless_null $P2669, vivify_1976
    $P2669 = root_new ['parrot';'Hash']
  vivify_1976:
    set $P132, $P2669["definedness"]
    unless_null $P132, vivify_1977
    new $P132, "Undef"
  vivify_1977:
    set $S102, $P132
    iseq $I104, $S102, "U"
    if $I104, if_2668
    new $P134, "Float"
    assign $P134, 0
    set $P131, $P134
    goto if_2668_end
  if_2668:
    new $P133, "Float"
    assign $P133, 2
    set $P131, $P133
  if_2668_end:
    set $P128, $P131
.annotate 'line', 2303
    goto if_2666_end
  if_2666:
    new $P130, "Float"
    assign $P130, 1
    set $P128, $P130
  if_2666_end:
    $P135 = $P127."push"($P128)
.annotate 'line', 2301
    set $P118, $P135
  if_2663_end:
.annotate 'line', 2300
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "attach_multi_signature_to_parrot_sub"  :subid("604_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2674
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2310
    .const 'Sub' $P2679 = "605_1334921493.34" 
    capture_lex $P2679
    .lex "$routine", param_2674
.annotate 'line', 2314
    new $P113, "Undef"
    set $P2675, $P113
    .lex "$types", $P2675
.annotate 'line', 2315
    new $P114, "Undef"
    set $P2676, $P114
    .lex "$definednesses", $P2676
.annotate 'line', 2314
    new $P115, "ResizablePMCArray"
    set $P2675, $P115
.annotate 'line', 2315
    new $P115, "ResizablePMCArray"
    set $P2676, $P115
.annotate 'line', 2316
    new $P116, "Float"
    assign $P116, 0
    set $I100, $P116
    set $P2677, param_2674
    unless_null $P2677, vivify_1983
    $P2677 = root_new ['parrot';'ResizablePMCArray']
  vivify_1983:
    set $P117, $P2677[$I100]
    unless_null $P117, vivify_1984
    new $P117, "Undef"
  vivify_1984:
    $P118 = $P117."list"()
    defined $I101, $P118
    unless $I101, for_undef_1985
    iter $P115, $P118
    new $P122, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P122, loop2688_handler
    push_eh $P122
  loop2688_test:
    unless $P115, loop2688_done
    shift $P120, $P115
  loop2688_redo:
    .const 'Sub' $P2679 = "605_1334921493.34" 
    capture_lex $P2679
    $P2679($P120)
  loop2688_next:
    goto loop2688_test
  loop2688_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P123, exception, 'type'
    eq $P123, .CONTROL_LOOP_NEXT, loop2688_next
    eq $P123, .CONTROL_LOOP_REDO, loop2688_redo
  loop2688_done:
    pop_eh 
  for_undef_1985:
.annotate 'line', 2323
    find_dynamic_lex $P117, "$*W"
    unless_null $P117, vivify_1997
    get_hll_global $P115, "GLOBAL"
    get_who $P116, $P115
    set $P117, $P116["$W"]
    unless_null $P117, vivify_1998
    die "Contextual $*W not found"
  vivify_1998:
  vivify_1997:
    set $P118, param_2674
    unless_null $P118, vivify_1999
    new $P118, "Undef"
  vivify_1999:
    set $P120, $P2675
    unless_null $P120, vivify_2000
    new $P120, "Undef"
  vivify_2000:
    set $P121, $P2676
    unless_null $P121, vivify_2001
    new $P121, "Undef"
  vivify_2001:
    $P122 = $P117."set_routine_signature_on_parrot_sub"($P118, $P120, $P121)
.annotate 'line', 2310
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2678"  :anon :subid("605_1334921493.34") :outer("604_1334921493.34")
    .param pmc param_2680
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2316
    .lex "$_", param_2680
.annotate 'line', 2317
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Var"]
    find_lex $P127, "$_"
    unless_null $P127, vivify_1986
    new $P127, "Undef"
  vivify_1986:
    $P128 = $P126."ACCEPTS"($P127)
    if $P128, if_2682
    set $P122, $P128
    goto if_2682_end
  if_2682:
    find_lex $P129, "$_"
    unless_null $P129, vivify_1987
    new $P129, "Undef"
  vivify_1987:
    $S100 = $P129."scope"()
    iseq $I102, $S100, "parameter"
    new $P122, 'Integer'
    set $P122, $I102
  if_2682_end:
    if $P122, if_2681
    set $P121, $P122
    goto if_2681_end
  if_2681:
.annotate 'line', 2318
    find_lex $P130, "$types"
    unless_null $P130, vivify_1988
    new $P130, "Undef"
  vivify_1988:
    find_lex $P132, "$_"
    unless_null $P132, vivify_1989
    new $P132, "Undef"
  vivify_1989:
    $P133 = $P132."multitype"()
    if $P133, if_2683
    null $P137
    set $P131, $P137
    goto if_2683_end
  if_2683:
    find_lex $P134, "$_"
    unless_null $P134, vivify_1990
    new $P134, "Undef"
  vivify_1990:
    $P135 = $P134."multitype"()
    set $P136, $P135["compile_time_value"]
    unless_null $P136, vivify_1991
    new $P136, "Undef"
  vivify_1991:
    set $P131, $P136
  if_2683_end:
    $P130."push"($P131)
.annotate 'line', 2319
    find_lex $P130, "$definednesses"
    unless_null $P130, vivify_1992
    new $P130, "Undef"
  vivify_1992:
    find_lex $P2685, "$_"
    unless_null $P2685, vivify_1993
    $P2685 = root_new ['parrot';'Hash']
  vivify_1993:
    set $P132, $P2685["definedness"]
    unless_null $P132, vivify_1994
    new $P132, "Undef"
  vivify_1994:
    set $S101, $P132
    iseq $I103, $S101, "D"
    if $I103, if_2684
.annotate 'line', 2320
    find_lex $P2687, "$_"
    unless_null $P2687, vivify_1995
    $P2687 = root_new ['parrot';'Hash']
  vivify_1995:
    set $P135, $P2687["definedness"]
    unless_null $P135, vivify_1996
    new $P135, "Undef"
  vivify_1996:
    set $S102, $P135
    iseq $I104, $S102, "U"
    if $I104, if_2686
    new $P137, "Float"
    assign $P137, 0
    set $P134, $P137
    goto if_2686_end
  if_2686:
    new $P136, "Float"
    assign $P136, 2
    set $P134, $P136
  if_2686_end:
    set $P131, $P134
.annotate 'line', 2319
    goto if_2684_end
  if_2684:
    new $P133, "Float"
    assign $P133, 1
    set $P131, $P133
  if_2684_end:
    $P138 = $P130."push"($P131)
.annotate 'line', 2317
    set $P121, $P138
  if_2681_end:
.annotate 'line', 2316
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "control"  :subid("606_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2692
    .param pmc param_2693
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2793
    .lex "$/", param_2692
    .lex "$type", param_2693
.annotate 'line', 2794
    set $P115, param_2692
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P120, $P118["Op"]
    set $P121, param_2692
    unless_null $P121, vivify_2002
    new $P121, "Undef"
  vivify_2002:
.annotate 'line', 2798
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Val"]
    set $P127, param_2693
    unless_null $P127, vivify_2003
    new $P127, "Undef"
  vivify_2003:
    $P128 = $P126."new"($P127 :named("value"), "!macro_const" :named("returns"))
    $P129 = $P120."new"(0, $P128, $P121 :named("node"), "die__vii" :named("pirop"))
.annotate 'line', 2794
    $P130 = $P115."!make"($P129)
.annotate 'line', 2793
    .return ($P130)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "lexical_package_lookup"  :subid("607_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2699
    .param pmc param_2700
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2812
    .const 'Sub' $P2709 = "608_1334921493.34" 
    capture_lex $P2709
    new $P2698, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2698, control_2697
    push_eh $P2698
    .lex "@name", param_2699
    .lex "$/", param_2700
.annotate 'line', 2818
    new $P115, "Undef"
    set $P2701, $P115
    .lex "$final_name", $P2701
.annotate 'line', 2819
    new $P116, "Undef"
    set $P2702, $P116
    .lex "$lookup", $P2702
.annotate 'line', 2814
    set $P2704, param_2699
    unless_null $P2704, vivify_2004
    $P2704 = root_new ['parrot';'ResizablePMCArray']
  vivify_2004:
    set $N100, $P2704
    set $N101, 0
    iseq $I100, $N100, $N101
    unless $I100, if_2703_end
    set $P117, param_2700
    unless_null $P117, vivify_2005
    new $P117, "Undef"
  vivify_2005:
    $P118 = $P117."CURSOR"()
    $P118."panic"("Cannot compile empty name")
  if_2703_end:
.annotate 'line', 2818
    set $P2705, param_2699
    unless_null $P2705, vivify_2006
    $P2705 = root_new ['parrot';'ResizablePMCArray']
  vivify_2006:
    $P117 = $P2705."pop"()
    set $P2701, $P117
.annotate 'line', 2819
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P120, $P118
    set $P121, $P120["Var"]
    set $P123, $P2701
    unless_null $P123, vivify_2007
    new $P123, "Undef"
  vivify_2007:
    set $S100, $P123
    $P124 = $P121."new"($S100, "keyed" :named("scope"))
    set $P2702, $P124
.annotate 'line', 2823
    set $P2707, param_2699
    unless_null $P2707, vivify_2008
    $P2707 = root_new ['parrot';'ResizablePMCArray']
  vivify_2008:
    set $N100, $P2707
    set $N101, 0
    iseq $I100, $N100, $N101
    if $I100, if_2706
.annotate 'line', 2841
    .const 'Sub' $P2709 = "608_1334921493.34" 
    capture_lex $P2709
    $P2709()
    goto if_2706_end
  if_2706:
.annotate 'line', 2824
    set $P117, $P2702
    unless_null $P117, vivify_2023
    new $P117, "Undef"
  vivify_2023:
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P120, $P118, "PAST"
    get_who $P121, $P120
    set $P123, $P121["Op"]
.annotate 'line', 2826
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Var"]
    $P128 = $P127."new"("$?PACKAGE" :named("name"), "lexical" :named("scope"))
    $P129 = $P123."new"($P128, "get_who PP" :named("pirop"))
.annotate 'line', 2824
    $P117."unshift"($P129)
.annotate 'line', 2828
    set $P117, $P2702
    unless_null $P117, vivify_2024
    new $P117, "Undef"
  vivify_2024:
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P120, $P118, "PAST"
    get_who $P121, $P120
    set $P123, $P121["Var"]
.annotate 'line', 2830
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Op"]
.annotate 'line', 2832
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Var"]
    new $P133, "ResizablePMCArray"
    $P134 = $P132."new"("GLOBAL" :named("name"), $P133 :named("namespace"), "package" :named("scope"))
    $P135 = $P127."new"($P134, "get_who PP" :named("pirop"))
.annotate 'line', 2834
    set $P136, $P2701
    unless_null $P136, vivify_2025
    new $P136, "Undef"
  vivify_2025:
    set $S100, $P136
    $P137 = $P123."new"($P135, $S100, "keyed" :named("scope"))
.annotate 'line', 2828
    $P117."viviself"($P137)
  if_2706_end:
.annotate 'line', 2856
    new $P117, "Exception"
    set $P117['type'], .CONTROL_RETURN
    set $P118, $P2702
    unless_null $P118, vivify_2026
    new $P118, "Undef"
  vivify_2026:
    setattribute $P117, 'payload', $P118
    throw $P117
.annotate 'line', 2812
    .return ()
  control_2697:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P117, exception, "payload"
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block2708"  :anon :subid("608_1334921493.34") :outer("607_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2841
    .const 'Sub' $P2719 = "609_1334921493.34" 
    capture_lex $P2719
.annotate 'line', 2842
    new $P117, "Undef"
    set $P2710, $P117
    .lex "$path", $P2710
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_2009
    get_hll_global $P120, "GLOBAL"
    get_who $P121, $P120
    set $P123, $P121["$W"]
    unless_null $P123, vivify_2010
    die "Contextual $*W not found"
  vivify_2010:
  vivify_2009:
    new $P124, "Float"
    assign $P124, 0
    set $I101, $P124
    find_lex $P2712, "@name"
    unless_null $P2712, vivify_2011
    $P2712 = root_new ['parrot';'ResizablePMCArray']
  vivify_2011:
    set $P125, $P2712[$I101]
    unless_null $P125, vivify_2012
    new $P125, "Undef"
  vivify_2012:
    $P126 = $P123."is_lexical"($P125)
    if $P126, if_2711
.annotate 'line', 2844
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Var"]
    new $P138, "ResizablePMCArray"
    $P139 = $P137."new"("GLOBAL" :named("name"), $P138 :named("namespace"), "package" :named("scope"))
    set $P118, $P139
.annotate 'line', 2842
    goto if_2711_end
  if_2711:
.annotate 'line', 2843
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Var"]
    find_lex $P2713, "@name"
    unless_null $P2713, vivify_2013
    $P2713 = root_new ['parrot';'ResizablePMCArray']
  vivify_2013:
    $P132 = $P2713."shift"()
    $P133 = $P131."new"($P132 :named("name"), "lexical" :named("scope"))
    set $P118, $P133
  if_2711_end:
.annotate 'line', 2842
    set $P2710, $P118
.annotate 'line', 2845
    new $P118, "Float"
    assign $P118, 0
    set $I101, $P118
    find_lex $P2715, "@name"
    unless_null $P2715, vivify_2014
    $P2715 = root_new ['parrot';'ResizablePMCArray']
  vivify_2014:
    set $P120, $P2715[$I101]
    unless_null $P120, vivify_2015
    new $P120, "Undef"
  vivify_2015:
    set $S100, $P120
    iseq $I102, $S100, "GLOBAL"
    unless $I102, if_2714_end
.annotate 'line', 2846
    find_lex $P2716, "@name"
    unless_null $P2716, vivify_2016
    $P2716 = root_new ['parrot';'ResizablePMCArray']
  vivify_2016:
    $P2716."shift"()
  if_2714_end:
.annotate 'line', 2848
    find_lex $P2717, "@name"
    unless_null $P2717, vivify_2017
    $P2717 = root_new ['parrot';'ResizablePMCArray']
  vivify_2017:
    defined $I101, $P2717
    unless $I101, for_undef_2018
    iter $P118, $P2717
    new $P121, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P121, loop2721_handler
    push_eh $P121
  loop2721_test:
    unless $P118, loop2721_done
    shift $P120, $P118
  loop2721_redo:
    .const 'Sub' $P2719 = "609_1334921493.34" 
    capture_lex $P2719
    $P2719($P120)
  loop2721_next:
    goto loop2721_test
  loop2721_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P123, exception, 'type'
    eq $P123, .CONTROL_LOOP_NEXT, loop2721_next
    eq $P123, .CONTROL_LOOP_REDO, loop2721_redo
  loop2721_done:
    pop_eh 
  for_undef_2018:
.annotate 'line', 2853
    find_lex $P118, "$lookup"
    unless_null $P118, vivify_2021
    new $P118, "Undef"
  vivify_2021:
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
    set $P125, $P2710
    unless_null $P125, vivify_2022
    new $P125, "Undef"
  vivify_2022:
    $P126 = $P124."new"($P125, "get_who PP" :named("pirop"))
    $P127 = $P118."unshift"($P126)
.annotate 'line', 2841
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2718"  :anon :subid("609_1334921493.34") :outer("608_1334921493.34")
    .param pmc param_2720
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2848
    .lex "$_", param_2720
.annotate 'line', 2849
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Op"]
    find_lex $P126, "$path"
    unless_null $P126, vivify_2019
    new $P126, "Undef"
  vivify_2019:
.annotate 'line', 2851
    find_lex $P127, "$_"
    unless_null $P127, vivify_2020
    new $P127, "Undef"
  vivify_2020:
    set $S100, $P127
    $P128 = $P125."new"($P126, $S100, "nqp_get_package_through_who PPs" :named("pirop"))
.annotate 'line', 2849
    store_lex "$path", $P128
.annotate 'line', 2848
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "TOP" :anon :subid("422_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2726
    .param pmc param_2727
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1436
    .lex "self", param_2726
    .lex "$/", param_2727
    set $P118, param_2727
    set $P2728, param_2727
    unless_null $P2728, vivify_2027
    $P2728 = root_new ['parrot';'Hash']
  vivify_2027:
    set $P120, $P2728["comp_unit"]
    unless_null $P120, vivify_2028
    new $P120, "Undef"
  vivify_2028:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "deflongname" :anon :subid("423_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2730
    .param pmc param_2731
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1438
    .lex "self", param_2730
    .lex "$/", param_2731
.annotate 'line', 1439
    set $P118, param_2731
.annotate 'line', 1440
    set $P2733, param_2731
    unless_null $P2733, vivify_2029
    $P2733 = root_new ['parrot';'Hash']
  vivify_2029:
    set $P121, $P2733["colonpair"]
    unless_null $P121, vivify_2030
    new $P121, "Undef"
  vivify_2030:
    if $P121, if_2732
.annotate 'line', 1442
    set $P137, param_2731
    unless_null $P137, vivify_2031
    new $P137, "Undef"
  vivify_2031:
    set $S103, $P137
    new $P120, 'String'
    set $P120, $S103
.annotate 'line', 1440
    goto if_2732_end
  if_2732:
    set $P2734, param_2731
    unless_null $P2734, vivify_2032
    $P2734 = root_new ['parrot';'Hash']
  vivify_2032:
    set $P123, $P2734["identifier"]
    unless_null $P123, vivify_2033
    new $P123, "Undef"
  vivify_2033:
    set $S100, $P123
    new $P124, 'String'
    set $P124, $S100
    concat $P125, $P124, ":"
    new $P126, "Float"
    assign $P126, 0
    set $I100, $P126
    set $P2735, param_2731
    unless_null $P2735, vivify_2034
    $P2735 = root_new ['parrot';'Hash']
  vivify_2034:
    set $P2736, $P2735["colonpair"]
    unless_null $P2736, vivify_2035
    $P2736 = root_new ['parrot';'ResizablePMCArray']
  vivify_2035:
    set $P127, $P2736[$I100]
    unless_null $P127, vivify_2036
    new $P127, "Undef"
  vivify_2036:
    $P128 = $P127."ast"()
    $S101 = $P128."named"()
    concat $P129, $P125, $S101
    concat $P131, $P129, "<"
.annotate 'line', 1441
    new $P132, "Float"
    assign $P132, 0
    set $I101, $P132
    set $P2737, param_2731
    unless_null $P2737, vivify_2037
    $P2737 = root_new ['parrot';'Hash']
  vivify_2037:
    set $P2738, $P2737["colonpair"]
    unless_null $P2738, vivify_2038
    $P2738 = root_new ['parrot';'ResizablePMCArray']
  vivify_2038:
    set $P133, $P2738[$I101]
    unless_null $P133, vivify_2039
    new $P133, "Undef"
  vivify_2039:
    $P134 = $P133."ast"()
    $S102 = "colonpair_str"($P134)
    concat $P135, $P131, $S102
    concat $P136, $P135, ">"
    set $P120, $P136
  if_2732_end:
.annotate 'line', 1440
    $P138 = $P118."!make"($P120)
.annotate 'line', 1438
    .return ($P138)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "comp_unit" :anon :subid("424_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2740
    .param pmc param_2741
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1452
    .lex "self", param_2740
    .lex "$/", param_2741
.annotate 'line', 1453
    new $P118, "Undef"
    set $P2742, $P118
    .lex "$mainline", $P2742
.annotate 'line', 1454
    new $P120, "Undef"
    set $P2743, $P120
    .lex "$unit", $P2743
.annotate 'line', 1482
    new $P121, "Undef"
    set $P2744, $P121
    .lex "$main_tasks", $P2744
.annotate 'line', 1453
    set $P2745, param_2741
    unless_null $P2745, vivify_2040
    $P2745 = root_new ['parrot';'Hash']
  vivify_2040:
    set $P123, $P2745["statementlist"]
    unless_null $P123, vivify_2041
    new $P123, "Undef"
  vivify_2041:
    $P124 = $P123."ast"()
    set $P2742, $P124
.annotate 'line', 1454
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_2042
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_2043
    die "Contextual $*W not found"
  vivify_2043:
  vivify_2042:
    $P126 = $P125."pop_lexpad"()
    set $P2743, $P126
.annotate 'line', 1458
    set $P123, $P2743
    unless_null $P123, vivify_2044
    new $P123, "Undef"
  vivify_2044:
    $P124 = $P123."loadinit"()
    find_dynamic_lex $P127, "$*W"
    unless_null $P127, vivify_2045
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$W"]
    unless_null $P127, vivify_2046
    die "Contextual $*W not found"
  vivify_2046:
  vivify_2045:
    $P128 = $P127."to_past"()
    $P124."push"($P128)
.annotate 'line', 1463
    set $P123, $P2743
    unless_null $P123, vivify_2047
    new $P123, "Undef"
  vivify_2047:
    $P124 = $P123."loadinit"()
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Op"]
.annotate 'line', 1465
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Var"]
    new $P134, "ResizablePMCArray"
    $P135 = $P133."new"("GLOBAL" :named("name"), $P134 :named("namespace"), "package" :named("scope"))
.annotate 'line', 1466
    find_dynamic_lex $P138, "$*W"
    unless_null $P138, vivify_2048
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$W"]
    unless_null $P138, vivify_2049
    die "Contextual $*W not found"
  vivify_2049:
  vivify_2048:
    find_dynamic_lex $P141, "$*PACKAGE"
    unless_null $P141, vivify_2050
    get_hll_global $P139, "GLOBAL"
    get_who $P140, $P139
    set $P141, $P140["$PACKAGE"]
    unless_null $P141, vivify_2051
    die "Contextual $*PACKAGE not found"
  vivify_2051:
  vivify_2050:
    $P142 = $P138."get_slot_past_for_object"($P141)
    $P143 = $P128."new"($P135, $P142, "bind_6model" :named("pasttype"))
.annotate 'line', 1463
    $P124."push"($P143)
.annotate 'line', 1472
    find_dynamic_lex $P125, "$*HAS_YOU_ARE_HERE"
    unless_null $P125, vivify_2052
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$HAS_YOU_ARE_HERE"]
    unless_null $P125, vivify_2053
    die "Contextual $*HAS_YOU_ARE_HERE not found"
  vivify_2053:
  vivify_2052:
    if $P125, unless_2746_end
.annotate 'line', 1473
    set $P126, $P2743
    unless_null $P126, vivify_2054
    new $P126, "Undef"
  vivify_2054:
    set $P127, param_2740
    nqp_decontainerize $P128, $P127
    $P129 = $P128."CTXSAVE"()
    $P126."push"($P129)
  unless_2746_end:
.annotate 'line', 1480
    set $P123, $P2743
    unless_null $P123, vivify_2055
    new $P123, "Undef"
  vivify_2055:
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Var"]
    $P128 = $P127."new"("parameter" :named("scope"), "@ARGS" :named("name"), 1 :named("slurpy"), 1 :named("directaccess"))
    $P123."unshift"($P128)
.annotate 'line', 1482
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Stmts"]
.annotate 'line', 1483
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Op"]
    $P132 = $P131."new"("ModuleLoader.pbc", "load_bytecode vs" :named("pirop"))
.annotate 'line', 1484
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "PAST"
    get_who $P135, $P134
    set $P136, $P135["Op"]
.annotate 'line', 1486
    get_hll_global $P137, "GLOBAL"
    nqp_get_package_through_who $P138, $P137, "PAST"
    get_who $P139, $P138
    set $P140, $P139["Var"]
    new $P141, "ResizablePMCArray"
    $P142 = $P140."new"("ModuleLoader" :named("name"), $P141 :named("namespace"), "package" :named("scope"))
.annotate 'line', 1487
    get_hll_global $P143, "GLOBAL"
    nqp_get_package_through_who $P144, $P143, "PAST"
    get_who $P145, $P144
    set $P146, $P145["Var"]
    get_hll_global $P147, "GLOBAL"
    nqp_get_package_through_who $P149, $P147, "PAST"
    get_who $P150, $P149
    set $P151, $P150["Op"]
    $P152 = $P151."new"("getinterp P" :named("pirop"))
    $P153 = $P146."new"($P152, "context", "keyed" :named("scope"))
    $P154 = $P136."new"($P142, $P153, "callmethod" :named("pasttype"), "set_mainline_module" :named("name"))
.annotate 'line', 1484
    $P155 = $P126."new"($P132, $P154)
.annotate 'line', 1482
    set $P2744, $P155
.annotate 'line', 1490
    find_dynamic_lex $P125, "$*MAIN_SUB"
    unless_null $P125, vivify_2056
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$MAIN_SUB"]
    unless_null $P125, vivify_2057
    die "Contextual $*MAIN_SUB not found"
  vivify_2057:
  vivify_2056:
    unless $P125, if_2747_end
.annotate 'line', 1491
    set $P126, $P2744
    unless_null $P126, vivify_2058
    new $P126, "Undef"
  vivify_2058:
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Op"]
.annotate 'line', 1492
    get_hll_global $P132, "GLOBAL"
    nqp_get_package_through_who $P133, $P132, "PAST"
    get_who $P134, $P133
    set $P135, $P134["Val"]
    find_dynamic_lex $P138, "$*MAIN_SUB"
    unless_null $P138, vivify_2059
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$MAIN_SUB"]
    unless_null $P138, vivify_2060
    die "Contextual $*MAIN_SUB not found"
  vivify_2060:
  vivify_2059:
    $P139 = $P135."new"($P138 :named("value"))
.annotate 'line', 1493
    get_hll_global $P140, "GLOBAL"
    nqp_get_package_through_who $P141, $P140, "PAST"
    get_who $P142, $P141
    set $P143, $P142["Var"]
    $P144 = $P143."new"("lexical" :named("scope"), "@ARGS" :named("name"), 1 :named("flat"))
    $P145 = $P131."new"($P139, $P144, "call" :named("pasttype"))
.annotate 'line', 1491
    $P126."push"($P145)
  if_2747_end:
.annotate 'line', 1496
    set $P123, $P2742
    unless_null $P123, vivify_2061
    new $P123, "Undef"
  vivify_2061:
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Op"]
.annotate 'line', 1498
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Var"]
    $P133 = $P132."new"("lexical" :named("scope"), "@ARGS" :named("name"))
    set $P134, $P2744
    unless_null $P134, vivify_2062
    new $P134, "Undef"
  vivify_2062:
    $P135 = $P127."new"($P133, $P134, "if" :named("pasttype"))
.annotate 'line', 1496
    $P123."push"($P135)
.annotate 'line', 1505
    set $P123, $P2743
    unless_null $P123, vivify_2063
    new $P123, "Undef"
  vivify_2063:
.annotate 'line', 1506
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Op"]
    set $P128, $P2742
    unless_null $P128, vivify_2064
    new $P128, "Undef"
  vivify_2064:
    $P129 = $P127."new"($P128, "return" :named("pirop"))
    $P123."push"($P129)
.annotate 'line', 1511
    set $P123, $P2743
    unless_null $P123, vivify_2065
    new $P123, "Undef"
  vivify_2065:
.annotate 'line', 1512
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Block"]
.annotate 'line', 1514
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Op"]
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "PAST"
    get_who $P135, $P134
    set $P136, $P135["Val"]
    set $P137, $P2743
    unless_null $P137, vivify_2066
    new $P137, "Undef"
  vivify_2066:
    $P138 = $P136."new"($P137 :named("value"))
    $P139 = $P132."new"($P138, "call" :named("pasttype"))
    $P140 = $P127."new"($P139, ":load" :named("pirflags"), 0 :named("lexical"), "" :named("namespace"))
.annotate 'line', 1512
    $P123."push"($P140)
.annotate 'line', 1517
    set $P123, $P2743
    unless_null $P123, vivify_2067
    new $P123, "Undef"
  vivify_2067:
    set $P124, param_2741
    unless_null $P124, vivify_2068
    new $P124, "Undef"
  vivify_2068:
    $P123."node"($P124)
.annotate 'line', 1520
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_2069
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_2070
    die "Contextual $*W not found"
  vivify_2070:
  vivify_2069:
    set $P126, $P2743
    unless_null $P126, vivify_2071
    new $P126, "Undef"
  vivify_2071:
    $P125."set_nqp_language_defaults"($P126)
.annotate 'line', 1522
    set $P123, param_2741
    set $P124, $P2743
    unless_null $P124, vivify_2072
    new $P124, "Undef"
  vivify_2072:
    $P125 = $P123."!make"($P124)
.annotate 'line', 1452
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "statementlist" :anon :subid("425_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2749
    .param pmc param_2750
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1525
    .const 'Sub' $P2756 = "610_1334921493.34" 
    capture_lex $P2756
    .lex "self", param_2749
    .lex "$/", param_2750
.annotate 'line', 1526
    new $P118, "Undef"
    set $P2751, $P118
    .lex "$past", $P2751
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Stmts"]
    set $P125, param_2750
    unless_null $P125, vivify_2073
    new $P125, "Undef"
  vivify_2073:
    $P126 = $P124."new"($P125 :named("node"))
    set $P2751, $P126
.annotate 'line', 1527
    set $P2753, param_2750
    unless_null $P2753, vivify_2074
    $P2753 = root_new ['parrot';'Hash']
  vivify_2074:
    set $P120, $P2753["statement"]
    unless_null $P120, vivify_2075
    new $P120, "Undef"
  vivify_2075:
    unless $P120, if_2752_end
.annotate 'line', 1528
    set $P2754, param_2750
    unless_null $P2754, vivify_2076
    $P2754 = root_new ['parrot';'Hash']
  vivify_2076:
    set $P123, $P2754["statement"]
    unless_null $P123, vivify_2077
    new $P123, "Undef"
  vivify_2077:
    defined $I100, $P123
    unless $I100, for_undef_2078
    iter $P121, $P123
    new $P126, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P126, loop2765_handler
    push_eh $P126
  loop2765_test:
    unless $P121, loop2765_done
    shift $P124, $P121
  loop2765_redo:
    .const 'Sub' $P2756 = "610_1334921493.34" 
    capture_lex $P2756
    $P2756($P124)
  loop2765_next:
    goto loop2765_test
  loop2765_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P127, exception, 'type'
    eq $P127, .CONTROL_LOOP_NEXT, loop2765_next
    eq $P127, .CONTROL_LOOP_REDO, loop2765_redo
  loop2765_done:
    pop_eh 
  for_undef_2078:
  if_2752_end:
.annotate 'line', 1536
    set $P120, param_2750
    set $P121, $P2751
    unless_null $P121, vivify_2091
    new $P121, "Undef"
  vivify_2091:
    $P123 = $P120."!make"($P121)
.annotate 'line', 1525
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2755"  :anon :subid("610_1334921493.34") :outer("425_1334921493.34")
    .param pmc param_2758
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1529
    new $P125, "Undef"
    set $P2757, $P125
    .lex "$ast", $P2757
    .lex "$_", param_2758
    find_lex $P126, "$_"
    unless_null $P126, vivify_2079
    new $P126, "Undef"
  vivify_2079:
    $P127 = $P126."ast"()
    set $P2757, $P127
.annotate 'line', 1530
    set $P2760, $P2757
    unless_null $P2760, vivify_2080
    $P2760 = root_new ['parrot';'Hash']
  vivify_2080:
    set $P126, $P2760["sink"]
    unless_null $P126, vivify_2081
    new $P126, "Undef"
  vivify_2081:
    defined $I101, $P126
    unless $I101, if_2759_end
    set $P2761, $P2757
    unless_null $P2761, vivify_2082
    $P2761 = root_new ['parrot';'Hash']
  vivify_2082:
    set $P127, $P2761["sink"]
    unless_null $P127, vivify_2083
    new $P127, "Undef"
  vivify_2083:
    set $P2757, $P127
  if_2759_end:
.annotate 'line', 1531
    set $P2763, $P2757
    unless_null $P2763, vivify_2084
    $P2763 = root_new ['parrot';'Hash']
  vivify_2084:
    set $P126, $P2763["bareblock"]
    unless_null $P126, vivify_2085
    new $P126, "Undef"
  vivify_2085:
    unless $P126, if_2762_end
    set $P127, $P2757
    unless_null $P127, vivify_2086
    new $P127, "Undef"
  vivify_2086:
    $P128 = "block_immediate"($P127)
    set $P2757, $P128
  if_2762_end:
.annotate 'line', 1532
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Node"]
    set $P131, $P2757
    unless_null $P131, vivify_2087
    new $P131, "Undef"
  vivify_2087:
    $P132 = $P129."ACCEPTS"($P131)
    unless $P132, if_2764_end
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "PAST"
    get_who $P135, $P134
    set $P136, $P135["Stmt"]
    set $P137, $P2757
    unless_null $P137, vivify_2088
    new $P137, "Undef"
  vivify_2088:
    $P138 = $P136."new"($P137)
    set $P2757, $P138
  if_2764_end:
.annotate 'line', 1533
    find_lex $P126, "$past"
    unless_null $P126, vivify_2089
    new $P126, "Undef"
  vivify_2089:
    set $P127, $P2757
    unless_null $P127, vivify_2090
    new $P127, "Undef"
  vivify_2090:
    $P128 = $P126."push"($P127)
.annotate 'line', 1528
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement" :anon :subid("426_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2767
    .param pmc param_2768
    .param pmc param_2769 :optional
    .param int has_param_2769 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1539
    .const 'Sub' $P2774 = "611_1334921493.34" 
    capture_lex $P2774
    .lex "self", param_2767
    .lex "$/", param_2768
    if has_param_2769, optparam_2092
    new $P118, "Undef"
    set param_2769, $P118
  optparam_2092:
    .lex "$key", param_2769
.annotate 'line', 1540
    new $P120, "Undef"
    set $P2770, $P120
    .lex "$past", $P2770
.annotate 'line', 1539
    set $P121, $P2770
    unless_null $P121, vivify_2093
    new $P121, "Undef"
  vivify_2093:
.annotate 'line', 1541
    set $P2772, param_2768
    unless_null $P2772, vivify_2094
    $P2772 = root_new ['parrot';'Hash']
  vivify_2094:
    set $P121, $P2772["EXPR"]
    unless_null $P121, vivify_2095
    new $P121, "Undef"
  vivify_2095:
    if $P121, if_2771
.annotate 'line', 1562
    set $P2793, param_2768
    unless_null $P2793, vivify_2096
    $P2793 = root_new ['parrot';'Hash']
  vivify_2096:
    set $P126, $P2793["statement_control"]
    unless_null $P126, vivify_2097
    new $P126, "Undef"
  vivify_2097:
    if $P126, if_2792
.annotate 'line', 1563
    new $P127, "Float"
    assign $P127, 0
    set $P2770, $P127
    goto if_2792_end
  if_2792:
.annotate 'line', 1562
    set $P2794, param_2768
    unless_null $P2794, vivify_2098
    $P2794 = root_new ['parrot';'Hash']
  vivify_2098:
    set $P127, $P2794["statement_control"]
    unless_null $P127, vivify_2099
    new $P127, "Undef"
  vivify_2099:
    $P128 = $P127."ast"()
    set $P2770, $P128
  if_2792_end:
    goto if_2771_end
  if_2771:
.annotate 'line', 1541
    .const 'Sub' $P2774 = "611_1334921493.34" 
    capture_lex $P2774
    $P2774()
  if_2771_end:
.annotate 'line', 1564
    set $P121, param_2768
    set $P123, $P2770
    unless_null $P123, vivify_2133
    new $P123, "Undef"
  vivify_2133:
    $P124 = $P121."!make"($P123)
.annotate 'line', 1539
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2773"  :anon :subid("611_1334921493.34") :outer("426_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1542
    new $P123, "Undef"
    set $P2775, $P123
    .lex "$mc", $P2775
.annotate 'line', 1543
    new $P124, "Undef"
    set $P2776, $P124
    .lex "$ml", $P2776
.annotate 'line', 1542
    new $P125, "Float"
    assign $P125, 0
    set $I100, $P125
    find_lex $P2777, "$/"
    unless_null $P2777, vivify_2100
    $P2777 = root_new ['parrot';'Hash']
  vivify_2100:
    set $P2778, $P2777["statement_mod_cond"]
    unless_null $P2778, vivify_2101
    $P2778 = root_new ['parrot';'ResizablePMCArray']
  vivify_2101:
    set $P126, $P2778[$I100]
    unless_null $P126, vivify_2102
    new $P126, "Undef"
  vivify_2102:
    set $P2775, $P126
.annotate 'line', 1543
    new $P125, "Float"
    assign $P125, 0
    set $I100, $P125
    find_lex $P2779, "$/"
    unless_null $P2779, vivify_2103
    $P2779 = root_new ['parrot';'Hash']
  vivify_2103:
    set $P2780, $P2779["statement_mod_loop"]
    unless_null $P2780, vivify_2104
    $P2780 = root_new ['parrot';'ResizablePMCArray']
  vivify_2104:
    set $P126, $P2780[$I100]
    unless_null $P126, vivify_2105
    new $P126, "Undef"
  vivify_2105:
    set $P2776, $P126
.annotate 'line', 1544
    find_lex $P2781, "$/"
    unless_null $P2781, vivify_2106
    $P2781 = root_new ['parrot';'Hash']
  vivify_2106:
    set $P125, $P2781["EXPR"]
    unless_null $P125, vivify_2107
    new $P125, "Undef"
  vivify_2107:
    $P126 = $P125."ast"()
    store_lex "$past", $P126
.annotate 'line', 1545
    set $P125, $P2775
    unless_null $P125, vivify_2108
    new $P125, "Undef"
  vivify_2108:
    unless $P125, if_2782_end
.annotate 'line', 1546
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Op"]
    set $P2783, $P2775
    unless_null $P2783, vivify_2109
    $P2783 = root_new ['parrot';'Hash']
  vivify_2109:
    set $P131, $P2783["cond"]
    unless_null $P131, vivify_2110
    new $P131, "Undef"
  vivify_2110:
    $P132 = $P131."ast"()
    find_lex $P133, "$past"
    unless_null $P133, vivify_2111
    new $P133, "Undef"
  vivify_2111:
    set $P2784, $P2775
    unless_null $P2784, vivify_2112
    $P2784 = root_new ['parrot';'Hash']
  vivify_2112:
    set $P134, $P2784["sym"]
    unless_null $P134, vivify_2113
    new $P134, "Undef"
  vivify_2113:
    set $S100, $P134
    find_lex $P135, "$/"
    unless_null $P135, vivify_2114
    new $P135, "Undef"
  vivify_2114:
    $P136 = $P129."new"($P132, $P133, $S100 :named("pasttype"), $P135 :named("node"))
    store_lex "$past", $P136
  if_2782_end:
.annotate 'line', 1548
    set $P126, $P2776
    unless_null $P126, vivify_2115
    new $P126, "Undef"
  vivify_2115:
    if $P126, if_2785
    set $P125, $P126
    goto if_2785_end
  if_2785:
.annotate 'line', 1549
    set $P2787, $P2776
    unless_null $P2787, vivify_2116
    $P2787 = root_new ['parrot';'Hash']
  vivify_2116:
    set $P128, $P2787["sym"]
    unless_null $P128, vivify_2117
    new $P128, "Undef"
  vivify_2117:
    set $S100, $P128
    iseq $I100, $S100, "for"
    if $I100, if_2786
.annotate 'line', 1558
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Op"]
    set $P2790, $P2776
    unless_null $P2790, vivify_2118
    $P2790 = root_new ['parrot';'Hash']
  vivify_2118:
    set $P134, $P2790["cond"]
    unless_null $P134, vivify_2119
    new $P134, "Undef"
  vivify_2119:
    $P135 = $P134."ast"()
    find_lex $P136, "$past"
    unless_null $P136, vivify_2120
    new $P136, "Undef"
  vivify_2120:
    set $P2791, $P2776
    unless_null $P2791, vivify_2121
    $P2791 = root_new ['parrot';'Hash']
  vivify_2121:
    set $P137, $P2791["sym"]
    unless_null $P137, vivify_2122
    new $P137, "Undef"
  vivify_2122:
    set $S101, $P137
    find_lex $P138, "$/"
    unless_null $P138, vivify_2123
    new $P138, "Undef"
  vivify_2123:
    $P140 = $P133."new"($P135, $P136, $S101 :named("pasttype"), $P138 :named("node"))
    store_lex "$past", $P140
.annotate 'line', 1557
    set $P127, $P140
.annotate 'line', 1549
    goto if_2786_end
  if_2786:
.annotate 'line', 1550
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Block"]
.annotate 'line', 1551
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Var"]
    $P138 = $P137."new"("$_" :named("name"), "parameter" :named("scope"), 1 :named("isdecl"))
    find_lex $P139, "$past"
    unless_null $P139, vivify_2124
    new $P139, "Undef"
  vivify_2124:
    $P140 = $P133."new"($P138, $P139, "immediate" :named("blocktype"))
.annotate 'line', 1550
    store_lex "$past", $P140
.annotate 'line', 1553
    find_lex $P129, "$past"
    unless_null $P129, vivify_2125
    new $P129, "Undef"
  vivify_2125:
    $P129."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1554
    find_lex $P129, "$past"
    unless_null $P129, vivify_2126
    new $P129, "Undef"
  vivify_2126:
    $P129."arity"(1)
.annotate 'line', 1555
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Op"]
    set $P2788, $P2776
    unless_null $P2788, vivify_2127
    $P2788 = root_new ['parrot';'Hash']
  vivify_2127:
    set $P134, $P2788["cond"]
    unless_null $P134, vivify_2128
    new $P134, "Undef"
  vivify_2128:
    $P135 = $P134."ast"()
    find_lex $P136, "$past"
    unless_null $P136, vivify_2129
    new $P136, "Undef"
  vivify_2129:
    set $P2789, $P2776
    unless_null $P2789, vivify_2130
    $P2789 = root_new ['parrot';'Hash']
  vivify_2130:
    set $P137, $P2789["sym"]
    unless_null $P137, vivify_2131
    new $P137, "Undef"
  vivify_2131:
    set $S101, $P137
    find_lex $P138, "$/"
    unless_null $P138, vivify_2132
    new $P138, "Undef"
  vivify_2132:
    $P139 = $P133."new"($P135, $P136, $S101 :named("pasttype"), $P138 :named("node"))
    store_lex "$past", $P139
.annotate 'line', 1549
    set $P127, $P139
  if_2786_end:
.annotate 'line', 1548
    set $P125, $P127
  if_2785_end:
.annotate 'line', 1541
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "xblock" :anon :subid("427_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2796
    .param pmc param_2797
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1567
    .lex "self", param_2796
    .lex "$/", param_2797
.annotate 'line', 1568
    set $P118, param_2797
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
    set $P2798, param_2797
    unless_null $P2798, vivify_2134
    $P2798 = root_new ['parrot';'Hash']
  vivify_2134:
    set $P125, $P2798["EXPR"]
    unless_null $P125, vivify_2135
    new $P125, "Undef"
  vivify_2135:
    $P126 = $P125."ast"()
    set $P2799, param_2797
    unless_null $P2799, vivify_2136
    $P2799 = root_new ['parrot';'Hash']
  vivify_2136:
    set $P127, $P2799["pblock"]
    unless_null $P127, vivify_2137
    new $P127, "Undef"
  vivify_2137:
    $P128 = $P127."ast"()
    set $P129, param_2797
    unless_null $P129, vivify_2138
    new $P129, "Undef"
  vivify_2138:
    $P131 = $P124."new"($P126, $P128, "if" :named("pasttype"), $P129 :named("node"))
    $P132 = $P118."!make"($P131)
.annotate 'line', 1567
    .return ($P132)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "pblock" :anon :subid("428_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2801
    .param pmc param_2802
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1571
    .lex "self", param_2801
    .lex "$/", param_2802
.annotate 'line', 1572
    set $P118, param_2802
    set $P2803, param_2802
    unless_null $P2803, vivify_2139
    $P2803 = root_new ['parrot';'Hash']
  vivify_2139:
    set $P120, $P2803["blockoid"]
    unless_null $P120, vivify_2140
    new $P120, "Undef"
  vivify_2140:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
.annotate 'line', 1571
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "block" :anon :subid("429_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2805
    .param pmc param_2806
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1575
    .lex "self", param_2805
    .lex "$/", param_2806
.annotate 'line', 1576
    set $P118, param_2806
    set $P2807, param_2806
    unless_null $P2807, vivify_2141
    $P2807 = root_new ['parrot';'Hash']
  vivify_2141:
    set $P120, $P2807["blockoid"]
    unless_null $P120, vivify_2142
    new $P120, "Undef"
  vivify_2142:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
.annotate 'line', 1575
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "blockoid" :anon :subid("430_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2809
    .param pmc param_2810
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1579
    .const 'Sub' $P2815 = "612_1334921493.34" 
    capture_lex $P2815
    .lex "self", param_2809
    .lex "$/", param_2810
.annotate 'line', 1580
    new $P118, "Undef"
    set $P2811, $P118
    .lex "$BLOCK", $P2811
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_2143
    get_hll_global $P120, "GLOBAL"
    get_who $P121, $P120
    set $P123, $P121["$W"]
    unless_null $P123, vivify_2144
    die "Contextual $*W not found"
  vivify_2144:
  vivify_2143:
    $P124 = $P123."pop_lexpad"()
    set $P2811, $P124
.annotate 'line', 1581
    set $P2813, param_2810
    unless_null $P2813, vivify_2145
    $P2813 = root_new ['parrot';'Hash']
  vivify_2145:
    set $P121, $P2813["statementlist"]
    unless_null $P121, vivify_2146
    new $P121, "Undef"
  vivify_2146:
    if $P121, if_2812
.annotate 'line', 1589
    find_dynamic_lex $P128, "$*HAS_YOU_ARE_HERE"
    unless_null $P128, vivify_2147
    get_hll_global $P125, "GLOBAL"
    get_who $P127, $P125
    set $P128, $P127["$HAS_YOU_ARE_HERE"]
    unless_null $P128, vivify_2148
    die "Contextual $*HAS_YOU_ARE_HERE not found"
  vivify_2148:
  vivify_2147:
    unless $P128, if_2818_end
.annotate 'line', 1590
    set $P129, param_2810
    unless_null $P129, vivify_2149
    new $P129, "Undef"
  vivify_2149:
    $P131 = $P129."CURSOR"()
    $P131."panic"("{YOU_ARE_HERE} may only appear once in a setting")
  if_2818_end:
.annotate 'line', 1592
    new $P125, "Float"
    assign $P125, 1
    store_dynamic_lex "$*HAS_YOU_ARE_HERE", $P125
.annotate 'line', 1593
    set $P125, param_2810
    set $P2819, param_2810
    unless_null $P2819, vivify_2150
    $P2819 = root_new ['parrot';'Hash']
  vivify_2150:
    set $P127, $P2819["you_are_here"]
    unless_null $P127, vivify_2151
    new $P127, "Undef"
  vivify_2151:
    $P128 = $P127."ast"()
    $P129 = $P125."!make"($P128)
.annotate 'line', 1588
    set $P120, $P129
.annotate 'line', 1581
    goto if_2812_end
  if_2812:
    .const 'Sub' $P2815 = "612_1334921493.34" 
    capture_lex $P2815
    $P124 = $P2815()
    set $P120, $P124
  if_2812_end:
.annotate 'line', 1579
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2814"  :anon :subid("612_1334921493.34") :outer("430_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1582
    new $P123, "Undef"
    set $P2816, $P123
    .lex "$past", $P2816
    find_lex $P2817, "$/"
    unless_null $P2817, vivify_2152
    $P2817 = root_new ['parrot';'Hash']
  vivify_2152:
    set $P124, $P2817["statementlist"]
    unless_null $P124, vivify_2153
    new $P124, "Undef"
  vivify_2153:
    $P125 = $P124."ast"()
    set $P2816, $P125
.annotate 'line', 1583
    find_lex $P124, "$BLOCK"
    unless_null $P124, vivify_2154
    new $P124, "Undef"
  vivify_2154:
    set $P125, $P2816
    unless_null $P125, vivify_2155
    new $P125, "Undef"
  vivify_2155:
    $P124."push"($P125)
.annotate 'line', 1584
    find_lex $P124, "$BLOCK"
    unless_null $P124, vivify_2156
    new $P124, "Undef"
  vivify_2156:
    find_lex $P125, "$/"
    unless_null $P125, vivify_2157
    new $P125, "Undef"
  vivify_2157:
    $P124."node"($P125)
.annotate 'line', 1585
    find_lex $P124, "$BLOCK"
    unless_null $P124, vivify_2158
    new $P124, "Undef"
  vivify_2158:
    $P124."closure"(1)
.annotate 'line', 1586
    find_dynamic_lex $P124, "$/"
    find_lex $P125, "$BLOCK"
    unless_null $P125, vivify_2159
    new $P125, "Undef"
  vivify_2159:
    $P126 = $P124."!make"($P125)
.annotate 'line', 1581
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "newpad" :anon :subid("431_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2821
    .param pmc param_2822
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1597
    .lex "self", param_2821
    .lex "$/", param_2822
.annotate 'line', 1598
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_2160
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$W"]
    unless_null $P121, vivify_2161
    die "Contextual $*W not found"
  vivify_2161:
  vivify_2160:
    set $P123, param_2822
    unless_null $P123, vivify_2162
    new $P123, "Undef"
  vivify_2162:
    $P124 = $P121."push_lexpad"($P123)
.annotate 'line', 1597
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "outerctx" :anon :subid("432_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2824
    .param pmc param_2825
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1601
    .const 'Sub' $P2829 = "613_1334921493.34" 
    capture_lex $P2829
    .lex "self", param_2824
    .lex "$/", param_2825
.annotate 'line', 1602
    find_dynamic_lex $P121, "%*COMPILING"
    unless_null $P121, vivify_2163
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["%COMPILING"]
    unless_null $P121, vivify_2164
    die "Contextual %*COMPILING not found"
  vivify_2164:
  vivify_2163:
    set $P2827, $P121["%?OPTIONS"]
    unless_null $P2827, vivify_2165
    $P2827 = root_new ['parrot';'Hash']
  vivify_2165:
    set $P123, $P2827["outer_ctx"]
    unless_null $P123, vivify_2166
    new $P123, "Undef"
  vivify_2166:
    defined $I100, $P123
    if $I100, unless_2826_end
    .const 'Sub' $P2829 = "613_1334921493.34" 
    capture_lex $P2829
    $P2829()
  unless_2826_end:
.annotate 'line', 1615
    set $P118, param_2824
    nqp_decontainerize $P120, $P118
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_2182
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_2183
    die "Contextual $*W not found"
  vivify_2183:
  vivify_2182:
    $P125 = $P124."cur_lexpad"()
    $P126 = $P120."SET_BLOCK_OUTER_CTX"($P125)
.annotate 'line', 1601
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2828"  :anon :subid("613_1334921493.34") :outer("432_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1605
    new $P124, "Undef"
    set $P2830, $P124
    .lex "$SETTING", $P2830
    find_dynamic_lex $P127, "$*W"
    unless_null $P127, vivify_2167
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$W"]
    unless_null $P127, vivify_2168
    die "Contextual $*W not found"
  vivify_2168:
  vivify_2167:
    find_dynamic_lex $P131, "%*COMPILING"
    unless_null $P131, vivify_2169
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["%COMPILING"]
    unless_null $P131, vivify_2170
    die "Contextual %*COMPILING not found"
  vivify_2170:
  vivify_2169:
    set $P2832, $P131["%?OPTIONS"]
    unless_null $P2832, vivify_2171
    $P2832 = root_new ['parrot';'Hash']
  vivify_2171:
    set $P132, $P2832["setting"]
    unless_null $P132, vivify_2172
    new $P132, "Undef"
  vivify_2172:
    set $P2831, $P132
    defined $I2834, $P2831
    if $I2834, default_2833
    new $P133, "String"
    assign $P133, "NQPCORE"
    set $P2831, $P133
  default_2833:
    $P134 = $P127."load_setting"($P2831)
    set $P2830, $P134
.annotate 'line', 1610
    find_dynamic_lex $P128, "%*COMPILING"
    unless_null $P128, vivify_2173
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["%COMPILING"]
    unless_null $P128, vivify_2174
    die "Contextual %*COMPILING not found"
  vivify_2174:
  vivify_2173:
    set $P2836, $P128["%?OPTIONS"]
    unless_null $P2836, vivify_2175
    $P2836 = root_new ['parrot';'Hash']
  vivify_2175:
    set $P129, $P2836["setting"]
    unless_null $P129, vivify_2176
    new $P129, "Undef"
  vivify_2176:
    set $S100, $P129
    iseq $I101, $S100, "NULL"
    unless $I101, unless_2835
    new $P125, 'Integer'
    set $P125, $I101
    goto unless_2835_end
  unless_2835:
.annotate 'line', 1611
    set $P131, $P2830
    unless_null $P131, vivify_2177
    new $P131, "Undef"
  vivify_2177:
    "import_HOW_exports"($P131)
.annotate 'line', 1612
    find_dynamic_lex $P133, "$*W"
    unless_null $P133, vivify_2178
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$W"]
    unless_null $P133, vivify_2179
    die "Contextual $*W not found"
  vivify_2179:
  vivify_2178:
    find_dynamic_lex $P136, "$*GLOBALish"
    unless_null $P136, vivify_2180
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$GLOBALish"]
    unless_null $P136, vivify_2181
    die "Contextual $*GLOBALish not found"
  vivify_2181:
  vivify_2180:
    $P137 = $P133."load_module"("NQPRegex", $P136)
.annotate 'line', 1610
    set $P125, $P137
  unless_2835_end:
.annotate 'line', 1602
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "GLOBALish" :anon :subid("433_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2838
    .param pmc param_2839
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1627
    .lex "self", param_2838
    .lex "$/", param_2839
.annotate 'line', 1631
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_2184
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$W"]
    unless_null $P121, vivify_2185
    die "Contextual $*W not found"
  vivify_2185:
  vivify_2184:
    find_dynamic_lex $P125, "%*HOW"
    unless_null $P125, vivify_2186
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["%HOW"]
    unless_null $P125, vivify_2187
    die "Contextual %*HOW not found"
  vivify_2187:
  vivify_2186:
    set $P126, $P125["knowhow"]
    unless_null $P126, vivify_2188
    new $P126, "Undef"
  vivify_2188:
    $P127 = $P121."pkg_create_mo"($P126, "GLOBALish" :named("name"))
    store_dynamic_lex "$*GLOBALish", $P127
.annotate 'line', 1632
    find_dynamic_lex $P121, "$*GLOBALish"
    unless_null $P121, vivify_2189
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$GLOBALish"]
    unless_null $P121, vivify_2190
    die "Contextual $*GLOBALish not found"
  vivify_2190:
  vivify_2189:
    get_how $P123, $P121
    find_dynamic_lex $P126, "$*GLOBALish"
    unless_null $P126, vivify_2191
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$GLOBALish"]
    unless_null $P126, vivify_2192
    die "Contextual $*GLOBALish not found"
  vivify_2192:
  vivify_2191:
    $P123."compose"($P126)
.annotate 'line', 1633
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_2193
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$W"]
    unless_null $P121, vivify_2194
    die "Contextual $*W not found"
  vivify_2194:
  vivify_2193:
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_2195
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_2196
    die "Contextual $*W not found"
  vivify_2196:
  vivify_2195:
    $P126 = $P125."cur_lexpad"()
    find_dynamic_lex $P129, "$*GLOBALish"
    unless_null $P129, vivify_2197
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$GLOBALish"]
    unless_null $P129, vivify_2198
    die "Contextual $*GLOBALish not found"
  vivify_2198:
  vivify_2197:
    $P121."install_lexical_symbol"($P126, "GLOBALish", $P129)
.annotate 'line', 1636
    find_dynamic_lex $P121, "$*GLOBALish"
    unless_null $P121, vivify_2199
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$GLOBALish"]
    unless_null $P121, vivify_2200
    die "Contextual $*GLOBALish not found"
  vivify_2200:
  vivify_2199:
    store_dynamic_lex "$*PACKAGE", $P121
.annotate 'line', 1637
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_2201
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$W"]
    unless_null $P121, vivify_2202
    die "Contextual $*W not found"
  vivify_2202:
  vivify_2201:
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_2203
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_2204
    die "Contextual $*W not found"
  vivify_2204:
  vivify_2203:
    $P126 = $P125."cur_lexpad"()
    find_dynamic_lex $P129, "$*PACKAGE"
    unless_null $P129, vivify_2205
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$PACKAGE"]
    unless_null $P129, vivify_2206
    die "Contextual $*PACKAGE not found"
  vivify_2206:
  vivify_2205:
    $P131 = $P121."install_lexical_symbol"($P126, "$?PACKAGE", $P129)
.annotate 'line', 1627
    .return ($P131)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "you_are_here" :anon :subid("434_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2841
    .param pmc param_2842
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1640
    .lex "self", param_2841
    .lex "$/", param_2842
.annotate 'line', 1641
    set $P118, param_2842
    set $P120, param_2841
    nqp_decontainerize $P121, $P120
    $P123 = $P121."CTXSAVE"()
    $P124 = $P118."!make"($P123)
.annotate 'line', 1640
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<use>" :anon :subid("435_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2844
    .param pmc param_2845
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1646
    .lex "self", param_2844
    .lex "$/", param_2845
.annotate 'line', 1647
    new $P118, "Undef"
    set $P2846, $P118
    .lex "$module", $P2846
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_2207
    get_hll_global $P120, "GLOBAL"
    get_who $P121, $P120
    set $P123, $P121["$W"]
    unless_null $P123, vivify_2208
    die "Contextual $*W not found"
  vivify_2208:
  vivify_2207:
    set $P2847, param_2845
    unless_null $P2847, vivify_2209
    $P2847 = root_new ['parrot';'Hash']
  vivify_2209:
    set $P124, $P2847["name"]
    unless_null $P124, vivify_2210
    new $P124, "Undef"
  vivify_2210:
    set $S100, $P124
    find_dynamic_lex $P127, "$*GLOBALish"
    unless_null $P127, vivify_2211
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$GLOBALish"]
    unless_null $P127, vivify_2212
    die "Contextual $*GLOBALish not found"
  vivify_2212:
  vivify_2211:
    $P128 = $P123."load_module"($S100, $P127)
    set $P2846, $P128
.annotate 'line', 1648
    set $P120, $P2846
    unless_null $P120, vivify_2213
    new $P120, "Undef"
  vivify_2213:
    defined $I100, $P120
    unless $I100, if_2848_end
.annotate 'line', 1649
    set $P121, $P2846
    unless_null $P121, vivify_2214
    new $P121, "Undef"
  vivify_2214:
    "import_HOW_exports"($P121)
  if_2848_end:
.annotate 'line', 1651
    set $P120, param_2845
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Stmts"]
    $P126 = $P125."new"()
    $P127 = $P120."!make"($P126)
.annotate 'line', 1646
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "statement_control:sym<if>" :anon :subid("436_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2850
    .param pmc param_2851
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1654
    .const 'Sub' $P2862 = "614_1334921493.34" 
    capture_lex $P2862
    .lex "self", param_2850
    .lex "$/", param_2851
.annotate 'line', 1655
    new $P118, "Undef"
    set $P2852, $P118
    .lex "$count", $P2852
.annotate 'line', 1656
    new $P120, "Undef"
    set $P2853, $P120
    .lex "$past", $P2853
.annotate 'line', 1655
    set $P2854, param_2851
    unless_null $P2854, vivify_2215
    $P2854 = root_new ['parrot';'Hash']
  vivify_2215:
    set $P121, $P2854["xblock"]
    unless_null $P121, vivify_2216
    new $P121, "Undef"
  vivify_2216:
    set $N100, $P121
    new $P123, 'Float'
    set $P123, $N100
    sub $P124, $P123, 1
    set $P2852, $P124
.annotate 'line', 1656
    set $P121, $P2852
    unless_null $P121, vivify_2217
    new $P121, "Undef"
  vivify_2217:
    set $I100, $P121
    set $P2855, param_2851
    unless_null $P2855, vivify_2218
    $P2855 = root_new ['parrot';'Hash']
  vivify_2218:
    set $P2856, $P2855["xblock"]
    unless_null $P2856, vivify_2219
    $P2856 = root_new ['parrot';'ResizablePMCArray']
  vivify_2219:
    set $P123, $P2856[$I100]
    unless_null $P123, vivify_2220
    new $P123, "Undef"
  vivify_2220:
    $P124 = $P123."ast"()
    $P125 = "xblock_immediate"($P124)
    set $P2853, $P125
.annotate 'line', 1657
    set $P2858, param_2851
    unless_null $P2858, vivify_2221
    $P2858 = root_new ['parrot';'Hash']
  vivify_2221:
    set $P121, $P2858["else"]
    unless_null $P121, vivify_2222
    new $P121, "Undef"
  vivify_2222:
    unless $P121, if_2857_end
.annotate 'line', 1658
    set $P123, $P2853
    unless_null $P123, vivify_2223
    new $P123, "Undef"
  vivify_2223:
    new $P124, "Float"
    assign $P124, 0
    set $I100, $P124
    set $P2859, param_2851
    unless_null $P2859, vivify_2224
    $P2859 = root_new ['parrot';'Hash']
  vivify_2224:
    set $P2860, $P2859["else"]
    unless_null $P2860, vivify_2225
    $P2860 = root_new ['parrot';'ResizablePMCArray']
  vivify_2225:
    set $P125, $P2860[$I100]
    unless_null $P125, vivify_2226
    new $P125, "Undef"
  vivify_2226:
    $P126 = $P125."ast"()
    $P127 = "block_immediate"($P126)
    $P123."push"($P127)
  if_2857_end:
.annotate 'line', 1661
    new $P124, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P124, loop2867_handler
    push_eh $P124
  loop2867_test:
    set $P121, $P2852
    unless_null $P121, vivify_2227
    new $P121, "Undef"
  vivify_2227:
    set $N100, $P121
    set $N101, 0
    isgt $I100, $N100, $N101
    unless $I100, loop2867_done
  loop2867_redo:
    .const 'Sub' $P2862 = "614_1334921493.34" 
    capture_lex $P2862
    $P2862()
  loop2867_next:
    goto loop2867_test
  loop2867_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P125, exception, 'type'
    eq $P125, .CONTROL_LOOP_NEXT, loop2867_next
    eq $P125, .CONTROL_LOOP_REDO, loop2867_redo
  loop2867_done:
    pop_eh 
.annotate 'line', 1667
    set $P121, param_2851
    set $P123, $P2853
    unless_null $P123, vivify_2236
    new $P123, "Undef"
  vivify_2236:
    $P124 = $P121."!make"($P123)
.annotate 'line', 1654
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2861"  :anon :subid("614_1334921493.34") :outer("436_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1663
    new $P123, "Undef"
    set $P2863, $P123
    .lex "$else", $P2863
.annotate 'line', 1661
    find_lex $P124, "$count"
    unless_null $P124, vivify_2228
    new $P124, "Undef"
  vivify_2228:
    clone $P2864, $P124
    dec $P124
.annotate 'line', 1663
    find_lex $P124, "$past"
    unless_null $P124, vivify_2229
    new $P124, "Undef"
  vivify_2229:
    set $P2863, $P124
.annotate 'line', 1664
    find_lex $P124, "$count"
    unless_null $P124, vivify_2230
    new $P124, "Undef"
  vivify_2230:
    set $I101, $P124
    find_lex $P2865, "$/"
    unless_null $P2865, vivify_2231
    $P2865 = root_new ['parrot';'Hash']
  vivify_2231:
    set $P2866, $P2865["xblock"]
    unless_null $P2866, vivify_2232
    $P2866 = root_new ['parrot';'ResizablePMCArray']
  vivify_2232:
    set $P125, $P2866[$I101]
    unless_null $P125, vivify_2233
    new $P125, "Undef"
  vivify_2233:
    $P126 = $P125."ast"()
    $P127 = "xblock_immediate"($P126)
    store_lex "$past", $P127
.annotate 'line', 1665
    find_lex $P124, "$past"
    unless_null $P124, vivify_2234
    new $P124, "Undef"
  vivify_2234:
    set $P125, $P2863
    unless_null $P125, vivify_2235
    new $P125, "Undef"
  vivify_2235:
    $P126 = $P124."push"($P125)
.annotate 'line', 1661
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<unless>" :anon :subid("437_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2869
    .param pmc param_2870
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1670
    .lex "self", param_2869
    .lex "$/", param_2870
.annotate 'line', 1671
    new $P118, "Undef"
    set $P2871, $P118
    .lex "$past", $P2871
    set $P2872, param_2870
    unless_null $P2872, vivify_2237
    $P2872 = root_new ['parrot';'Hash']
  vivify_2237:
    set $P120, $P2872["xblock"]
    unless_null $P120, vivify_2238
    new $P120, "Undef"
  vivify_2238:
    $P121 = $P120."ast"()
    $P123 = "xblock_immediate"($P121)
    set $P2871, $P123
.annotate 'line', 1672
    set $P120, $P2871
    unless_null $P120, vivify_2239
    new $P120, "Undef"
  vivify_2239:
    $P120."pasttype"("unless")
.annotate 'line', 1673
    set $P120, param_2870
    set $P121, $P2871
    unless_null $P121, vivify_2240
    new $P121, "Undef"
  vivify_2240:
    $P123 = $P120."!make"($P121)
.annotate 'line', 1670
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<while>" :anon :subid("438_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2874
    .param pmc param_2875
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1676
    .lex "self", param_2874
    .lex "$/", param_2875
.annotate 'line', 1677
    new $P118, "Undef"
    set $P2876, $P118
    .lex "$past", $P2876
    set $P2877, param_2875
    unless_null $P2877, vivify_2241
    $P2877 = root_new ['parrot';'Hash']
  vivify_2241:
    set $P120, $P2877["xblock"]
    unless_null $P120, vivify_2242
    new $P120, "Undef"
  vivify_2242:
    $P121 = $P120."ast"()
    $P123 = "xblock_immediate"($P121)
    set $P2876, $P123
.annotate 'line', 1678
    set $P120, $P2876
    unless_null $P120, vivify_2243
    new $P120, "Undef"
  vivify_2243:
    set $P2878, param_2875
    unless_null $P2878, vivify_2244
    $P2878 = root_new ['parrot';'Hash']
  vivify_2244:
    set $P121, $P2878["sym"]
    unless_null $P121, vivify_2245
    new $P121, "Undef"
  vivify_2245:
    set $S100, $P121
    $P120."pasttype"($S100)
.annotate 'line', 1679
    set $P120, param_2875
    set $P121, $P2876
    unless_null $P121, vivify_2246
    new $P121, "Undef"
  vivify_2246:
    $P123 = $P120."!make"($P121)
.annotate 'line', 1676
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<repeat>" :anon :subid("439_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2880
    .param pmc param_2881
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1682
    .lex "self", param_2880
    .lex "$/", param_2881
.annotate 'line', 1683
    new $P118, "Undef"
    set $P2882, $P118
    .lex "$pasttype", $P2882
.annotate 'line', 1684
    new $P120, "Undef"
    set $P2883, $P120
    .lex "$past", $P2883
.annotate 'line', 1683
    new $P121, "String"
    assign $P121, "repeat_"
    set $P2884, param_2881
    unless_null $P2884, vivify_2247
    $P2884 = root_new ['parrot';'Hash']
  vivify_2247:
    set $P123, $P2884["wu"]
    unless_null $P123, vivify_2248
    new $P123, "Undef"
  vivify_2248:
    set $S100, $P123
    concat $P124, $P121, $S100
    set $P2882, $P124
.annotate 'line', 1682
    set $P121, $P2883
    unless_null $P121, vivify_2249
    new $P121, "Undef"
  vivify_2249:
.annotate 'line', 1685
    set $P2886, param_2881
    unless_null $P2886, vivify_2250
    $P2886 = root_new ['parrot';'Hash']
  vivify_2250:
    set $P121, $P2886["xblock"]
    unless_null $P121, vivify_2251
    new $P121, "Undef"
  vivify_2251:
    if $P121, if_2885
.annotate 'line', 1690
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Op"]
    set $P2888, param_2881
    unless_null $P2888, vivify_2252
    $P2888 = root_new ['parrot';'Hash']
  vivify_2252:
    set $P127, $P2888["EXPR"]
    unless_null $P127, vivify_2253
    new $P127, "Undef"
  vivify_2253:
    $P128 = $P127."ast"()
    set $P2889, param_2881
    unless_null $P2889, vivify_2254
    $P2889 = root_new ['parrot';'Hash']
  vivify_2254:
    set $P129, $P2889["pblock"]
    unless_null $P129, vivify_2255
    new $P129, "Undef"
  vivify_2255:
    $P131 = $P129."ast"()
    $P132 = "block_immediate"($P131)
    set $P133, $P2882
    unless_null $P133, vivify_2256
    new $P133, "Undef"
  vivify_2256:
    set $P134, param_2881
    unless_null $P134, vivify_2257
    new $P134, "Undef"
  vivify_2257:
    $P135 = $P126."new"($P128, $P132, $P133 :named("pasttype"), $P134 :named("node"))
    set $P2883, $P135
.annotate 'line', 1689
    goto if_2885_end
  if_2885:
.annotate 'line', 1686
    set $P2887, param_2881
    unless_null $P2887, vivify_2258
    $P2887 = root_new ['parrot';'Hash']
  vivify_2258:
    set $P123, $P2887["xblock"]
    unless_null $P123, vivify_2259
    new $P123, "Undef"
  vivify_2259:
    $P124 = $P123."ast"()
    $P125 = "xblock_immediate"($P124)
    set $P2883, $P125
.annotate 'line', 1687
    set $P123, $P2883
    unless_null $P123, vivify_2260
    new $P123, "Undef"
  vivify_2260:
    set $P124, $P2882
    unless_null $P124, vivify_2261
    new $P124, "Undef"
  vivify_2261:
    $P123."pasttype"($P124)
  if_2885_end:
.annotate 'line', 1693
    set $P121, param_2881
    set $P123, $P2883
    unless_null $P123, vivify_2262
    new $P123, "Undef"
  vivify_2262:
    $P124 = $P121."!make"($P123)
.annotate 'line', 1682
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<for>" :anon :subid("440_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2891
    .param pmc param_2892
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1696
    .lex "self", param_2891
    .lex "$/", param_2892
.annotate 'line', 1697
    new $P118, "Undef"
    set $P2893, $P118
    .lex "$past", $P2893
.annotate 'line', 1699
    new $P120, "Undef"
    set $P2894, $P120
    .lex "$block", $P2894
.annotate 'line', 1697
    set $P2895, param_2892
    unless_null $P2895, vivify_2263
    $P2895 = root_new ['parrot';'Hash']
  vivify_2263:
    set $P121, $P2895["xblock"]
    unless_null $P121, vivify_2264
    new $P121, "Undef"
  vivify_2264:
    $P123 = $P121."ast"()
    set $P2893, $P123
.annotate 'line', 1698
    set $P121, $P2893
    unless_null $P121, vivify_2265
    new $P121, "Undef"
  vivify_2265:
    $P121."pasttype"("for")
.annotate 'line', 1699
    new $P121, "Float"
    assign $P121, 1
    set $I100, $P121
    set $P2896, $P2893
    unless_null $P2896, vivify_2266
    $P2896 = root_new ['parrot';'ResizablePMCArray']
  vivify_2266:
    set $P123, $P2896[$I100]
    unless_null $P123, vivify_2267
    new $P123, "Undef"
  vivify_2267:
    set $P2894, $P123
.annotate 'line', 1700
    set $P121, $P2894
    unless_null $P121, vivify_2268
    new $P121, "Undef"
  vivify_2268:
    $P123 = $P121."arity"()
    if $P123, unless_2897_end
.annotate 'line', 1701
    new $P124, "Float"
    assign $P124, 0
    set $I100, $P124
    set $P2898, $P2894
    unless_null $P2898, vivify_2269
    $P2898 = root_new ['parrot';'ResizablePMCArray']
  vivify_2269:
    set $P125, $P2898[$I100]
    unless_null $P125, vivify_2270
    new $P125, "Undef"
  vivify_2270:
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Var"]
    $P131 = $P129."new"("$_" :named("name"), "parameter" :named("scope"))
    $P125."push"($P131)
.annotate 'line', 1702
    set $P124, $P2894
    unless_null $P124, vivify_2271
    new $P124, "Undef"
  vivify_2271:
    $P124."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1703
    set $P124, $P2894
    unless_null $P124, vivify_2272
    new $P124, "Undef"
  vivify_2272:
    $P124."arity"(1)
  unless_2897_end:
.annotate 'line', 1705
    set $P121, $P2894
    unless_null $P121, vivify_2273
    new $P121, "Undef"
  vivify_2273:
    $P121."blocktype"("immediate")
.annotate 'line', 1706
    set $P121, param_2892
    set $P123, $P2893
    unless_null $P123, vivify_2274
    new $P123, "Undef"
  vivify_2274:
    $P124 = $P121."!make"($P123)
.annotate 'line', 1696
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<CATCH>" :anon :subid("441_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2900
    .param pmc param_2901
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1709
    .lex "self", param_2900
    .lex "$/", param_2901
.annotate 'line', 1710
    new $P118, "Undef"
    set $P2902, $P118
    .lex "$block", $P2902
    set $P2903, param_2901
    unless_null $P2903, vivify_2275
    $P2903 = root_new ['parrot';'Hash']
  vivify_2275:
    set $P120, $P2903["block"]
    unless_null $P120, vivify_2276
    new $P120, "Undef"
  vivify_2276:
    $P121 = $P120."ast"()
    set $P2902, $P121
.annotate 'line', 1711
    set $P120, param_2901
    unless_null $P120, vivify_2277
    new $P120, "Undef"
  vivify_2277:
    set $P121, $P2902
    unless_null $P121, vivify_2278
    new $P121, "Undef"
  vivify_2278:
    "push_block_handler"($P120, $P121)
.annotate 'line', 1712
    new $P120, "Float"
    assign $P120, 0
    set $I100, $P120
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_2279
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_2280
    die "Contextual $*W not found"
  vivify_2280:
  vivify_2279:
    $P125 = $P124."cur_lexpad"()
    $P126 = $P125."handlers"()
    set $P127, $P126[$I100]
    unless_null $P127, vivify_2281
    new $P127, "Undef"
  vivify_2281:
    $P127."handle_types_except"("CONTROL")
.annotate 'line', 1713
    set $P120, param_2901
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Stmts"]
    set $P126, param_2901
    unless_null $P126, vivify_2282
    new $P126, "Undef"
  vivify_2282:
    $P127 = $P125."new"($P126 :named("node"))
    $P128 = $P120."!make"($P127)
.annotate 'line', 1709
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<CONTROL>" :anon :subid("442_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2905
    .param pmc param_2906
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1716
    .lex "self", param_2905
    .lex "$/", param_2906
.annotate 'line', 1717
    new $P118, "Undef"
    set $P2907, $P118
    .lex "$block", $P2907
    set $P2908, param_2906
    unless_null $P2908, vivify_2283
    $P2908 = root_new ['parrot';'Hash']
  vivify_2283:
    set $P120, $P2908["block"]
    unless_null $P120, vivify_2284
    new $P120, "Undef"
  vivify_2284:
    $P121 = $P120."ast"()
    set $P2907, $P121
.annotate 'line', 1718
    set $P120, param_2906
    unless_null $P120, vivify_2285
    new $P120, "Undef"
  vivify_2285:
    set $P121, $P2907
    unless_null $P121, vivify_2286
    new $P121, "Undef"
  vivify_2286:
    "push_block_handler"($P120, $P121)
.annotate 'line', 1719
    new $P120, "Float"
    assign $P120, 0
    set $I100, $P120
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_2287
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_2288
    die "Contextual $*W not found"
  vivify_2288:
  vivify_2287:
    $P125 = $P124."cur_lexpad"()
    $P126 = $P125."handlers"()
    set $P127, $P126[$I100]
    unless_null $P127, vivify_2289
    new $P127, "Undef"
  vivify_2289:
    $P127."handle_types"("CONTROL")
.annotate 'line', 1720
    set $P120, param_2906
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Stmts"]
    set $P126, param_2906
    unless_null $P126, vivify_2290
    new $P126, "Undef"
  vivify_2290:
    $P127 = $P125."new"($P126 :named("node"))
    $P128 = $P120."!make"($P127)
.annotate 'line', 1716
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_prefix:sym<BEGIN>" :anon :subid("443_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2910
    .param pmc param_2911
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1761
    .lex "self", param_2910
    .lex "$/", param_2911
.annotate 'line', 1762
    set $P118, param_2911
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_2291
    get_hll_global $P120, "GLOBAL"
    get_who $P121, $P120
    set $P123, $P121["$W"]
    unless_null $P123, vivify_2292
    die "Contextual $*W not found"
  vivify_2292:
  vivify_2291:
    set $P2912, param_2911
    unless_null $P2912, vivify_2293
    $P2912 = root_new ['parrot';'Hash']
  vivify_2293:
    set $P124, $P2912["blorst"]
    unless_null $P124, vivify_2294
    new $P124, "Undef"
  vivify_2294:
    $P125 = $P124."ast"()
    $P126 = $P123."run_begin_block"($P125)
    $P127 = $P118."!make"($P126)
.annotate 'line', 1761
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_prefix:sym<INIT>" :anon :subid("444_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2914
    .param pmc param_2915
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1765
    .lex "self", param_2914
    .lex "$/", param_2915
.annotate 'line', 1766
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_2295
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$W"]
    unless_null $P121, vivify_2296
    die "Contextual $*W not found"
  vivify_2296:
  vivify_2295:
    $P123 = $P121."cur_lexpad"()
    set $P2916, param_2915
    unless_null $P2916, vivify_2297
    $P2916 = root_new ['parrot';'Hash']
  vivify_2297:
    set $P124, $P2916["blorst"]
    unless_null $P124, vivify_2298
    new $P124, "Undef"
  vivify_2298:
    $P125 = $P124."ast"()
    $P123."push"($P125)
.annotate 'line', 1767
    set $P118, param_2915
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Stmts"]
    $P125 = $P124."new"()
    $P126 = $P118."!make"($P125)
.annotate 'line', 1765
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_prefix:sym<try>" :anon :subid("445_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2918
    .param pmc param_2919
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1770
    .lex "self", param_2918
    .lex "$/", param_2919
.annotate 'line', 1771
    new $P118, "Undef"
    set $P2920, $P118
    .lex "$past", $P2920
    set $P2921, param_2919
    unless_null $P2921, vivify_2299
    $P2921 = root_new ['parrot';'Hash']
  vivify_2299:
    set $P120, $P2921["blorst"]
    unless_null $P120, vivify_2300
    new $P120, "Undef"
  vivify_2300:
    $P121 = $P120."ast"()
    set $P2920, $P121
.annotate 'line', 1772
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Block"]
    set $P125, $P2920
    unless_null $P125, vivify_2301
    new $P125, "Undef"
  vivify_2301:
    $P126 = $P124."ACCEPTS"($P125)
    if $P126, unless_2922_end
.annotate 'line', 1773
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Block"]
    set $P132, $P2920
    unless_null $P132, vivify_2302
    new $P132, "Undef"
  vivify_2302:
    set $P133, param_2919
    unless_null $P133, vivify_2303
    new $P133, "Undef"
  vivify_2303:
    $P134 = $P131."new"($P132, "immediate" :named("blocktype"), $P133 :named("node"))
    set $P2920, $P134
  unless_2922_end:
.annotate 'line', 1775
    set $P120, $P2920
    unless_null $P120, vivify_2304
    new $P120, "Undef"
  vivify_2304:
    $P121 = $P120."handlers"()
    if $P121, unless_2923_end
.annotate 'line', 1776
    set $P123, $P2920
    unless_null $P123, vivify_2305
    new $P123, "Undef"
  vivify_2305:
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Control"]
.annotate 'line', 1778
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Stmts"]
.annotate 'line', 1779
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "PAST"
    get_who $P135, $P134
    set $P136, $P135["Op"]
.annotate 'line', 1780
    get_hll_global $P137, "GLOBAL"
    nqp_get_package_through_who $P138, $P137, "PAST"
    get_who $P139, $P138
    set $P140, $P139["Var"]
.annotate 'line', 1781
    get_hll_global $P141, "GLOBAL"
    nqp_get_package_through_who $P142, $P141, "PAST"
    get_who $P143, $P142
    set $P144, $P143["Var"]
    $P145 = $P144."new"("register" :named("scope"), "exception" :named("name"))
    $P146 = $P140."new"($P145, "handled", "keyed" :named("scope"))
.annotate 'line', 1780
    $P147 = $P136."new"($P146, 1, "bind_6model" :named("pasttype"))
.annotate 'line', 1779
    $P149 = $P132."new"($P147)
.annotate 'line', 1778
    $P150 = $P127."new"($P149, "CONTROL" :named("handle_types_except"))
.annotate 'line', 1776
    new $P151, "ResizablePMCArray"
    push $P151, $P150
    $P123."handlers"($P151)
  unless_2923_end:
.annotate 'line', 1790
    set $P120, param_2919
    set $P121, $P2920
    unless_null $P121, vivify_2306
    new $P121, "Undef"
  vivify_2306:
    $P123 = $P120."!make"($P121)
.annotate 'line', 1770
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "blorst" :anon :subid("446_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2925
    .param pmc param_2926
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1793
    .lex "self", param_2925
    .lex "$/", param_2926
.annotate 'line', 1794
    set $P118, param_2926
.annotate 'line', 1795
    set $P2928, param_2926
    unless_null $P2928, vivify_2307
    $P2928 = root_new ['parrot';'Hash']
  vivify_2307:
    set $P121, $P2928["block"]
    unless_null $P121, vivify_2308
    new $P121, "Undef"
  vivify_2308:
    if $P121, if_2927
.annotate 'line', 1796
    set $P2930, param_2926
    unless_null $P2930, vivify_2309
    $P2930 = root_new ['parrot';'Hash']
  vivify_2309:
    set $P126, $P2930["statement"]
    unless_null $P126, vivify_2310
    new $P126, "Undef"
  vivify_2310:
    $P127 = $P126."ast"()
    set $P120, $P127
.annotate 'line', 1795
    goto if_2927_end
  if_2927:
    set $P2929, param_2926
    unless_null $P2929, vivify_2311
    $P2929 = root_new ['parrot';'Hash']
  vivify_2311:
    set $P123, $P2929["block"]
    unless_null $P123, vivify_2312
    new $P123, "Undef"
  vivify_2312:
    $P124 = $P123."ast"()
    $P125 = "block_immediate"($P124)
    set $P120, $P125
  if_2927_end:
    $P128 = $P118."!make"($P120)
.annotate 'line', 1793
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_cond:sym<if>" :anon :subid("447_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2932
    .param pmc param_2933
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1801
    .lex "self", param_2932
    .lex "$/", param_2933
    set $P118, param_2933
    set $P2934, param_2933
    unless_null $P2934, vivify_2313
    $P2934 = root_new ['parrot';'Hash']
  vivify_2313:
    set $P120, $P2934["cond"]
    unless_null $P120, vivify_2314
    new $P120, "Undef"
  vivify_2314:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_cond:sym<unless>" :anon :subid("448_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2936
    .param pmc param_2937
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1802
    .lex "self", param_2936
    .lex "$/", param_2937
    set $P118, param_2937
    set $P2938, param_2937
    unless_null $P2938, vivify_2315
    $P2938 = root_new ['parrot';'Hash']
  vivify_2315:
    set $P120, $P2938["cond"]
    unless_null $P120, vivify_2316
    new $P120, "Undef"
  vivify_2316:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_loop:sym<while>" :anon :subid("449_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2940
    .param pmc param_2941
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1804
    .lex "self", param_2940
    .lex "$/", param_2941
    set $P118, param_2941
    set $P2942, param_2941
    unless_null $P2942, vivify_2317
    $P2942 = root_new ['parrot';'Hash']
  vivify_2317:
    set $P120, $P2942["cond"]
    unless_null $P120, vivify_2318
    new $P120, "Undef"
  vivify_2318:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_loop:sym<until>" :anon :subid("450_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2944
    .param pmc param_2945
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1805
    .lex "self", param_2944
    .lex "$/", param_2945
    set $P118, param_2945
    set $P2946, param_2945
    unless_null $P2946, vivify_2319
    $P2946 = root_new ['parrot';'Hash']
  vivify_2319:
    set $P120, $P2946["cond"]
    unless_null $P120, vivify_2320
    new $P120, "Undef"
  vivify_2320:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<fatarrow>" :anon :subid("451_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2948
    .param pmc param_2949
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1809
    .lex "self", param_2948
    .lex "$/", param_2949
    set $P118, param_2949
    set $P2950, param_2949
    unless_null $P2950, vivify_2321
    $P2950 = root_new ['parrot';'Hash']
  vivify_2321:
    set $P120, $P2950["fatarrow"]
    unless_null $P120, vivify_2322
    new $P120, "Undef"
  vivify_2322:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<colonpair>" :anon :subid("452_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2952
    .param pmc param_2953
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1810
    .lex "self", param_2952
    .lex "$/", param_2953
    set $P118, param_2953
    set $P2954, param_2953
    unless_null $P2954, vivify_2323
    $P2954 = root_new ['parrot';'Hash']
  vivify_2323:
    set $P120, $P2954["colonpair"]
    unless_null $P120, vivify_2324
    new $P120, "Undef"
  vivify_2324:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<variable>" :anon :subid("453_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2956
    .param pmc param_2957
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1811
    .lex "self", param_2956
    .lex "$/", param_2957
    set $P118, param_2957
    set $P2958, param_2957
    unless_null $P2958, vivify_2325
    $P2958 = root_new ['parrot';'Hash']
  vivify_2325:
    set $P120, $P2958["variable"]
    unless_null $P120, vivify_2326
    new $P120, "Undef"
  vivify_2326:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<package_declarator>" :anon :subid("454_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2960
    .param pmc param_2961
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1812
    .lex "self", param_2960
    .lex "$/", param_2961
    set $P118, param_2961
    set $P2962, param_2961
    unless_null $P2962, vivify_2327
    $P2962 = root_new ['parrot';'Hash']
  vivify_2327:
    set $P120, $P2962["package_declarator"]
    unless_null $P120, vivify_2328
    new $P120, "Undef"
  vivify_2328:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<scope_declarator>" :anon :subid("455_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2964
    .param pmc param_2965
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1813
    .lex "self", param_2964
    .lex "$/", param_2965
    set $P118, param_2965
    set $P2966, param_2965
    unless_null $P2966, vivify_2329
    $P2966 = root_new ['parrot';'Hash']
  vivify_2329:
    set $P120, $P2966["scope_declarator"]
    unless_null $P120, vivify_2330
    new $P120, "Undef"
  vivify_2330:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<routine_declarator>" :anon :subid("456_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2968
    .param pmc param_2969
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1814
    .lex "self", param_2968
    .lex "$/", param_2969
    set $P118, param_2969
    set $P2970, param_2969
    unless_null $P2970, vivify_2331
    $P2970 = root_new ['parrot';'Hash']
  vivify_2331:
    set $P120, $P2970["routine_declarator"]
    unless_null $P120, vivify_2332
    new $P120, "Undef"
  vivify_2332:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<regex_declarator>" :anon :subid("457_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2972
    .param pmc param_2973
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1815
    .lex "self", param_2972
    .lex "$/", param_2973
    set $P118, param_2973
    set $P2974, param_2973
    unless_null $P2974, vivify_2333
    $P2974 = root_new ['parrot';'Hash']
  vivify_2333:
    set $P120, $P2974["regex_declarator"]
    unless_null $P120, vivify_2334
    new $P120, "Undef"
  vivify_2334:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<statement_prefix>" :anon :subid("458_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2976
    .param pmc param_2977
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1816
    .lex "self", param_2976
    .lex "$/", param_2977
    set $P118, param_2977
    set $P2978, param_2977
    unless_null $P2978, vivify_2335
    $P2978 = root_new ['parrot';'Hash']
  vivify_2335:
    set $P120, $P2978["statement_prefix"]
    unless_null $P120, vivify_2336
    new $P120, "Undef"
  vivify_2336:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<lambda>" :anon :subid("459_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2980
    .param pmc param_2981
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1817
    .lex "self", param_2980
    .lex "$/", param_2981
    set $P118, param_2981
    set $P2982, param_2981
    unless_null $P2982, vivify_2337
    $P2982 = root_new ['parrot';'Hash']
  vivify_2337:
    set $P120, $P2982["pblock"]
    unless_null $P120, vivify_2338
    new $P120, "Undef"
  vivify_2338:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "fatarrow" :anon :subid("460_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2984
    .param pmc param_2985
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1819
    .lex "self", param_2984
    .lex "$/", param_2985
.annotate 'line', 1820
    new $P118, "Undef"
    set $P2986, $P118
    .lex "$past", $P2986
    set $P2987, param_2985
    unless_null $P2987, vivify_2339
    $P2987 = root_new ['parrot';'Hash']
  vivify_2339:
    set $P120, $P2987["val"]
    unless_null $P120, vivify_2340
    new $P120, "Undef"
  vivify_2340:
    $P121 = $P120."ast"()
    set $P2986, $P121
.annotate 'line', 1821
    set $P120, $P2986
    unless_null $P120, vivify_2341
    new $P120, "Undef"
  vivify_2341:
    set $P2988, param_2985
    unless_null $P2988, vivify_2342
    $P2988 = root_new ['parrot';'Hash']
  vivify_2342:
    set $P121, $P2988["key"]
    unless_null $P121, vivify_2343
    new $P121, "Undef"
  vivify_2343:
    $P123 = $P121."Str"()
    $P120."named"($P123)
.annotate 'line', 1822
    set $P120, param_2985
    set $P121, $P2986
    unless_null $P121, vivify_2344
    new $P121, "Undef"
  vivify_2344:
    $P123 = $P120."!make"($P121)
.annotate 'line', 1819
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "colonpair" :anon :subid("461_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_2990
    .param pmc param_2991
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1825
    .const 'Sub' $P2999 = "615_1334921493.34" 
    capture_lex $P2999
    .lex "self", param_2990
    .lex "$/", param_2991
.annotate 'line', 1826
    set $P2993, param_2991
    unless_null $P2993, vivify_2345
    $P2993 = root_new ['parrot';'Hash']
  vivify_2345:
    set $P120, $P2993["variable"]
    unless_null $P120, vivify_2346
    new $P120, "Undef"
  vivify_2346:
    if $P120, if_2992
.annotate 'line', 1829
    .const 'Sub' $P2999 = "615_1334921493.34" 
    capture_lex $P2999
    $P123 = $P2999()
    set $P118, $P123
.annotate 'line', 1826
    goto if_2992_end
  if_2992:
.annotate 'line', 1827
    set $P2994, param_2991
    unless_null $P2994, vivify_2358
    $P2994 = root_new ['parrot';'Hash']
  vivify_2358:
    set $P121, $P2994["variable"]
    unless_null $P121, vivify_2359
    new $P121, "Undef"
  vivify_2359:
    $P123 = $P121."ast"()
    set $P2995, param_2991
    unless_null $P2995, vivify_2360
    $P2995 = root_new ['parrot';'Hash']
  vivify_2360:
    set $P2996, $P2995["variable"]
    unless_null $P2996, vivify_2361
    $P2996 = root_new ['parrot';'Hash']
  vivify_2361:
    set $P124, $P2996["desigilname"]
    unless_null $P124, vivify_2362
    new $P124, "Undef"
  vivify_2362:
    set $S100, $P124
    $P123."named"($S100)
.annotate 'line', 1828
    set $P121, param_2991
    set $P2997, param_2991
    unless_null $P2997, vivify_2363
    $P2997 = root_new ['parrot';'Hash']
  vivify_2363:
    set $P123, $P2997["variable"]
    unless_null $P123, vivify_2364
    new $P123, "Undef"
  vivify_2364:
    $P124 = $P123."ast"()
    $P125 = $P121."!make"($P124)
.annotate 'line', 1826
    set $P118, $P125
  if_2992_end:
.annotate 'line', 1825
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2998"  :anon :subid("615_1334921493.34") :outer("461_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1830
    new $P121, "Undef"
    set $P3000, $P121
    .lex "$past", $P3000
.annotate 'line', 1831
    find_lex $P3002, "$/"
    unless_null $P3002, vivify_2347
    $P3002 = root_new ['parrot';'Hash']
  vivify_2347:
    set $P124, $P3002["circumfix"]
    unless_null $P124, vivify_2348
    new $P124, "Undef"
  vivify_2348:
    if $P124, if_3001
.annotate 'line', 1832
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Val"]
    find_lex $P3005, "$/"
    unless_null $P3005, vivify_2349
    $P3005 = root_new ['parrot';'Hash']
  vivify_2349:
    set $P134, $P3005["not"]
    unless_null $P134, vivify_2350
    new $P134, "Undef"
  vivify_2350:
    isfalse $I101, $P134
    $P135 = $P133."new"($I101 :named("value"))
    set $P123, $P135
.annotate 'line', 1831
    goto if_3001_end
  if_3001:
    new $P126, "Float"
    assign $P126, 0
    set $I100, $P126
    find_lex $P3003, "$/"
    unless_null $P3003, vivify_2351
    $P3003 = root_new ['parrot';'Hash']
  vivify_2351:
    set $P3004, $P3003["circumfix"]
    unless_null $P3004, vivify_2352
    $P3004 = root_new ['parrot';'ResizablePMCArray']
  vivify_2352:
    set $P127, $P3004[$I100]
    unless_null $P127, vivify_2353
    new $P127, "Undef"
  vivify_2353:
    $P128 = $P127."ast"()
    set $P123, $P128
  if_3001_end:
    set $P3000, $P123
.annotate 'line', 1833
    set $P123, $P3000
    unless_null $P123, vivify_2354
    new $P123, "Undef"
  vivify_2354:
    find_lex $P3006, "$/"
    unless_null $P3006, vivify_2355
    $P3006 = root_new ['parrot';'Hash']
  vivify_2355:
    set $P124, $P3006["identifier"]
    unless_null $P124, vivify_2356
    new $P124, "Undef"
  vivify_2356:
    set $S100, $P124
    $P123."named"($S100)
.annotate 'line', 1834
    find_dynamic_lex $P123, "$/"
    set $P124, $P3000
    unless_null $P124, vivify_2357
    new $P124, "Undef"
  vivify_2357:
    $P126 = $P123."!make"($P124)
.annotate 'line', 1829
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "variable" :anon :subid("462_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3008
    .param pmc param_3009
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1838
    .const 'Sub' $P3015 = "616_1334921493.34" 
    capture_lex $P3015
    .lex "self", param_3008
    .lex "$/", param_3009
.annotate 'line', 1839
    new $P118, "Undef"
    set $P3010, $P118
    .lex "$past", $P3010
.annotate 'line', 1838
    set $P120, $P3010
    unless_null $P120, vivify_2365
    new $P120, "Undef"
  vivify_2365:
.annotate 'line', 1840
    set $P3012, param_3009
    unless_null $P3012, vivify_2366
    $P3012 = root_new ['parrot';'Hash']
  vivify_2366:
    set $P120, $P3012["postcircumfix"]
    unless_null $P120, vivify_2367
    new $P120, "Undef"
  vivify_2367:
    if $P120, if_3011
.annotate 'line', 1844
    .const 'Sub' $P3015 = "616_1334921493.34" 
    capture_lex $P3015
    $P3015()
    goto if_3011_end
  if_3011:
.annotate 'line', 1841
    set $P3013, param_3009
    unless_null $P3013, vivify_2437
    $P3013 = root_new ['parrot';'Hash']
  vivify_2437:
    set $P121, $P3013["postcircumfix"]
    unless_null $P121, vivify_2438
    new $P121, "Undef"
  vivify_2438:
    $P123 = $P121."ast"()
    set $P3010, $P123
.annotate 'line', 1842
    set $P121, $P3010
    unless_null $P121, vivify_2439
    new $P121, "Undef"
  vivify_2439:
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Var"]
    $P127 = $P126."new"("$/" :named("name"))
    $P121."unshift"($P127)
  if_3011_end:
.annotate 'line', 1906
    set $P120, param_3009
    set $P121, $P3010
    unless_null $P121, vivify_2440
    new $P121, "Undef"
  vivify_2440:
    $P123 = $P120."!make"($P121)
.annotate 'line', 1838
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3014"  :anon :subid("616_1334921493.34") :outer("462_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1844
    .const 'Sub' $P3037 = "618_1334921493.34" 
    capture_lex $P3037
    .const 'Sub' $P3028 = "617_1334921493.34" 
    capture_lex $P3028
.annotate 'line', 1845
    $P3017 = root_new ['parrot';'ResizablePMCArray']
    set $P3016, $P3017
    .lex "@name", $P3016
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "NQP"
    get_who $P124, $P123
    set $P125, $P124["Compiler"]
    find_lex $P126, "$/"
    unless_null $P126, vivify_2368
    new $P126, "Undef"
  vivify_2368:
    set $S100, $P126
    $P127 = $P125."parse_name"($S100)
    set $P3016, $P127
.annotate 'line', 1846
    set $P3019, $P3016
    unless_null $P3019, vivify_2369
    $P3019 = root_new ['parrot';'ResizablePMCArray']
  vivify_2369:
    set $N100, $P3019
    set $N101, 1
    isgt $I100, $N100, $N101
    if $I100, if_3018
.annotate 'line', 1853
    new $P124, "Float"
    assign $P124, 0
    set $I101, $P124
    find_lex $P3025, "$/"
    unless_null $P3025, vivify_2370
    $P3025 = root_new ['parrot';'Hash']
  vivify_2370:
    set $P3026, $P3025["twigil"]
    unless_null $P3026, vivify_2371
    $P3026 = root_new ['parrot';'ResizablePMCArray']
  vivify_2371:
    set $P125, $P3026[$I101]
    unless_null $P125, vivify_2372
    new $P125, "Undef"
  vivify_2372:
    set $S100, $P125
    iseq $I102, $S100, "*"
    if $I102, if_3024
.annotate 'line', 1864
    new $P131, "Float"
    assign $P131, 0
    set $I103, $P131
    find_lex $P3034, "$/"
    unless_null $P3034, vivify_2373
    $P3034 = root_new ['parrot';'Hash']
  vivify_2373:
    set $P3035, $P3034["twigil"]
    unless_null $P3035, vivify_2374
    $P3035 = root_new ['parrot';'ResizablePMCArray']
  vivify_2374:
    set $P132, $P3035[$I103]
    unless_null $P132, vivify_2375
    new $P132, "Undef"
  vivify_2375:
    set $S101, $P132
    iseq $I104, $S101, "!"
    if $I104, if_3033
.annotate 'line', 1896
    find_dynamic_lex $P141, "$*W"
    unless_null $P141, vivify_2376
    get_hll_global $P139, "GLOBAL"
    get_who $P140, $P139
    set $P141, $P140["$W"]
    unless_null $P141, vivify_2377
    die "Contextual $*W not found"
  vivify_2377:
  vivify_2376:
    new $P142, "Float"
    assign $P142, 0
    set $I105, $P142
    set $P3057, $P3016
    unless_null $P3057, vivify_2378
    $P3057 = root_new ['parrot';'ResizablePMCArray']
  vivify_2378:
    set $P143, $P3057[$I105]
    unless_null $P143, vivify_2379
    new $P143, "Undef"
  vivify_2379:
    set $S102, $P143
    $P144 = $P141."is_package"($S102)
    if $P144, if_3056
.annotate 'line', 1901
    get_hll_global $P145, "GLOBAL"
    nqp_get_package_through_who $P146, $P145, "PAST"
    get_who $P147, $P146
    set $P150, $P147["Var"]
.annotate 'line', 1902
    set $P3060, $P3016
    unless_null $P3060, vivify_2380
    $P3060 = root_new ['parrot';'ResizablePMCArray']
  vivify_2380:
    $P151 = $P3060."pop"()
    set $S103, $P151
    find_lex $P3061, "$/"
    unless_null $P3061, vivify_2381
    $P3061 = root_new ['parrot';'Hash']
  vivify_2381:
    set $P152, $P3061["sigil"]
    unless_null $P152, vivify_2382
    new $P152, "Undef"
  vivify_2382:
    $P153 = "vivitype"($P152)
.annotate 'line', 1901
    $P154 = $P150."new"($S103 :named("name"), $P153 :named("viviself"))
    store_lex "$past", $P154
.annotate 'line', 1900
    set $P138, $P154
.annotate 'line', 1896
    goto if_3056_end
  if_3056:
.annotate 'line', 1897
    set $P3058, $P3016
    unless_null $P3058, vivify_2383
    $P3058 = root_new ['parrot';'ResizablePMCArray']
  vivify_2383:
    find_lex $P145, "$/"
    unless_null $P145, vivify_2384
    new $P145, "Undef"
  vivify_2384:
    $P146 = "lexical_package_lookup"($P3058, $P145)
    store_lex "$past", $P146
.annotate 'line', 1898
    find_lex $P145, "$past"
    unless_null $P145, vivify_2385
    new $P145, "Undef"
  vivify_2385:
    find_lex $P3059, "$/"
    unless_null $P3059, vivify_2386
    $P3059 = root_new ['parrot';'Hash']
  vivify_2386:
    set $P146, $P3059["sigil"]
    unless_null $P146, vivify_2387
    new $P146, "Undef"
  vivify_2387:
    $P147 = "vivitype"($P146)
    $P149 = $P145."viviself"($P147)
.annotate 'line', 1896
    set $P138, $P149
  if_3056_end:
    set $P129, $P138
.annotate 'line', 1864
    goto if_3033_end
  if_3033:
    .const 'Sub' $P3037 = "618_1334921493.34" 
    capture_lex $P3037
    $P137 = $P3037()
    set $P129, $P137
  if_3033_end:
    set $P123, $P129
.annotate 'line', 1853
    goto if_3024_end
  if_3024:
    .const 'Sub' $P3028 = "617_1334921493.34" 
    capture_lex $P3028
    $P128 = $P3028()
    set $P123, $P128
  if_3024_end:
    set $P121, $P123
.annotate 'line', 1846
    goto if_3018_end
  if_3018:
.annotate 'line', 1847
    find_lex $P3021, "$/"
    unless_null $P3021, vivify_2429
    $P3021 = root_new ['parrot';'Hash']
  vivify_2429:
    set $P123, $P3021["twigil"]
    unless_null $P123, vivify_2430
    new $P123, "Undef"
  vivify_2430:
    unless $P123, if_3020_end
.annotate 'line', 1848
    find_lex $P124, "$/"
    unless_null $P124, vivify_2431
    new $P124, "Undef"
  vivify_2431:
    $P125 = $P124."CURSOR"()
    $P125."panic"("Twigil not allowed on multi-part name")
  if_3020_end:
.annotate 'line', 1850
    set $P3022, $P3016
    unless_null $P3022, vivify_2432
    $P3022 = root_new ['parrot';'ResizablePMCArray']
  vivify_2432:
    find_lex $P123, "$/"
    unless_null $P123, vivify_2433
    new $P123, "Undef"
  vivify_2433:
    $P124 = "lexical_package_lookup"($P3022, $P123)
    store_lex "$past", $P124
.annotate 'line', 1851
    find_lex $P123, "$past"
    unless_null $P123, vivify_2434
    new $P123, "Undef"
  vivify_2434:
    find_lex $P3023, "$/"
    unless_null $P3023, vivify_2435
    $P3023 = root_new ['parrot';'Hash']
  vivify_2435:
    set $P124, $P3023["sigil"]
    unless_null $P124, vivify_2436
    new $P124, "Undef"
  vivify_2436:
    $P125 = "vivitype"($P124)
    $P126 = $P123."viviself"($P125)
.annotate 'line', 1846
    set $P121, $P126
  if_3018_end:
.annotate 'line', 1844
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3036"  :anon :subid("618_1334921493.34") :outer("616_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1864
    .const 'Sub' $P3047 = "619_1334921493.34" 
    capture_lex $P3047
.annotate 'line', 1866
    new $P133, "Undef"
    set $P3038, $P133
    .lex "$name", $P3038
.annotate 'line', 1867
    new $P134, "Undef"
    set $P3039, $P134
    .lex "$ch", $P3039
.annotate 'line', 1866
    find_lex $P3040, "@name"
    unless_null $P3040, vivify_2388
    $P3040 = root_new ['parrot';'ResizablePMCArray']
  vivify_2388:
    $P136 = $P3040."pop"()
    set $S102, $P136
    new $P137, 'String'
    set $P137, $S102
    set $P3038, $P137
.annotate 'line', 1867
    find_dynamic_lex $P139, "$*PKGDECL"
    unless_null $P139, vivify_2389
    get_hll_global $P137, "GLOBAL"
    get_who $P138, $P137
    set $P139, $P138["$PKGDECL"]
    unless_null $P139, vivify_2390
    die "Contextual $*PKGDECL not found"
  vivify_2390:
  vivify_2389:
    set $S102, $P139
    iseq $I105, $S102, "role"
    if $I105, if_3041
    find_dynamic_lex $P147, "$*W"
    unless_null $P147, vivify_2391
    get_hll_global $P145, "GLOBAL"
    get_who $P146, $P145
    set $P147, $P146["$W"]
    unless_null $P147, vivify_2392
    die "Contextual $*W not found"
  vivify_2392:
  vivify_2391:
    find_dynamic_lex $P151, "$*PACKAGE"
    unless_null $P151, vivify_2393
    get_hll_global $P149, "GLOBAL"
    get_who $P150, $P149
    set $P151, $P150["$PACKAGE"]
    unless_null $P151, vivify_2394
    die "Contextual $*PACKAGE not found"
  vivify_2394:
  vivify_2393:
    $P152 = $P147."get_ref"($P151)
    set $P136, $P152
    goto if_3041_end
  if_3041:
    get_hll_global $P140, "GLOBAL"
    nqp_get_package_through_who $P141, $P140, "PAST"
    get_who $P142, $P141
    set $P143, $P142["Var"]
    $P144 = $P143."new"("$?CLASS" :named("name"))
    set $P136, $P144
  if_3041_end:
    set $P3039, $P136
.annotate 'line', 1868
    new $P136, "Float"
    assign $P136, 1
    set $P3042, $P3039
    unless_null $P3042, vivify_2395
    $P3042 = root_new ['parrot';'Hash']
    set $P3039, $P3042
  vivify_2395:
    set $P3042["has_compile_time_value"], $P136
.annotate 'line', 1869
    find_dynamic_lex $P138, "$*PACKAGE"
    unless_null $P138, vivify_2396
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$PACKAGE"]
    unless_null $P138, vivify_2397
    die "Contextual $*PACKAGE not found"
  vivify_2397:
  vivify_2396:
    set $P3043, $P3039
    unless_null $P3043, vivify_2398
    $P3043 = root_new ['parrot';'Hash']
    set $P3039, $P3043
  vivify_2398:
    set $P3043["compile_time_value"], $P138
.annotate 'line', 1870
    get_hll_global $P136, "GLOBAL"
    nqp_get_package_through_who $P137, $P136, "PAST"
    get_who $P138, $P137
    set $P139, $P138["Var"]
    set $P140, $P3038
    unless_null $P140, vivify_2399
    new $P140, "Undef"
  vivify_2399:
.annotate 'line', 1872
    find_lex $P3044, "$/"
    unless_null $P3044, vivify_2400
    $P3044 = root_new ['parrot';'Hash']
  vivify_2400:
    set $P141, $P3044["sigil"]
    unless_null $P141, vivify_2401
    new $P141, "Undef"
  vivify_2401:
    $P142 = "vivitype"($P141)
.annotate 'line', 1873
    get_hll_global $P143, "GLOBAL"
    nqp_get_package_through_who $P144, $P143, "PAST"
    get_who $P145, $P144
    set $P146, $P145["Op"]
    get_hll_global $P147, "GLOBAL"
    nqp_get_package_through_who $P149, $P147, "PAST"
    get_who $P150, $P149
    set $P151, $P150["Var"]
    $P152 = $P151."new"("self" :named("name"))
    $P153 = $P146."new"($P152, "nqp_decontainerize PP" :named("pirop"))
    set $P154, $P3039
    unless_null $P154, vivify_2402
    new $P154, "Undef"
  vivify_2402:
    $P155 = $P139."new"($P153, $P154, $P140 :named("name"), "attribute_6model" :named("scope"), $P142 :named("viviself"))
.annotate 'line', 1870
    store_lex "$past", $P155
.annotate 'line', 1878
    find_dynamic_lex $P139, "$*IN_DECL"
    unless_null $P139, vivify_2403
    get_hll_global $P137, "GLOBAL"
    get_who $P138, $P137
    set $P139, $P138["$IN_DECL"]
    unless_null $P139, vivify_2404
    die "Contextual $*IN_DECL not found"
  vivify_2404:
  vivify_2403:
    unless $P139, unless_3045
    set $P136, $P139
    goto unless_3045_end
  unless_3045:
    .const 'Sub' $P3047 = "619_1334921493.34" 
    capture_lex $P3047
    $P142 = $P3047()
    set $P136, $P142
  unless_3045_end:
.annotate 'line', 1864
    .return ($P136)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3046"  :anon :subid("619_1334921493.34") :outer("618_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1878
    .const 'Sub' $P3050 = "620_1334921493.34" 
    capture_lex $P3050
.annotate 'line', 1879
    new $P140, "Undef"
    set $P3048, $P140
    .lex "$attr", $P3048
.annotate 'line', 1878
    set $P141, $P3048
    unless_null $P141, vivify_2405
    new $P141, "Undef"
  vivify_2405:
.annotate 'line', 1880
    find_dynamic_lex $P144, "$*PACKAGE"
    unless_null $P144, vivify_2406
    get_hll_global $P142, "GLOBAL"
    get_who $P143, $P142
    set $P144, $P143["$PACKAGE"]
    unless_null $P144, vivify_2407
    die "Contextual $*PACKAGE not found"
  vivify_2407:
  vivify_2406:
    get_how $P145, $P144
    find_dynamic_lex $P149, "$*PACKAGE"
    unless_null $P149, vivify_2408
    get_hll_global $P146, "GLOBAL"
    get_who $P147, $P146
    set $P149, $P147["$PACKAGE"]
    unless_null $P149, vivify_2409
    die "Contextual $*PACKAGE not found"
  vivify_2409:
  vivify_2408:
    $P150 = $P145."attributes"($P149, 1 :named("local"))
    defined $I105, $P150
    unless $I105, for_undef_2410
    iter $P141, $P150
    new $P153, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P153, loop3053_handler
    push_eh $P153
  loop3053_test:
    unless $P141, loop3053_done
    shift $P151, $P141
  loop3053_redo:
    .const 'Sub' $P3050 = "620_1334921493.34" 
    capture_lex $P3050
    $P3050($P151)
  loop3053_next:
    goto loop3053_test
  loop3053_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P154, exception, 'type'
    eq $P154, .CONTROL_LOOP_NEXT, loop3053_next
    eq $P154, .CONTROL_LOOP_REDO, loop3053_redo
  loop3053_done:
    pop_eh 
  for_undef_2410:
.annotate 'line', 1886
    set $P142, $P3048
    unless_null $P142, vivify_2414
    new $P142, "Undef"
  vivify_2414:
    defined $I105, $P142
    if $I105, if_3054
.annotate 'line', 1892
    find_lex $P144, "$/"
    unless_null $P144, vivify_2415
    new $P144, "Undef"
  vivify_2415:
    $P145 = $P144."CURSOR"()
    new $P146, 'String'
    set $P146, "Attribute '"
    find_lex $P147, "$name"
    unless_null $P147, vivify_2416
    new $P147, "Undef"
  vivify_2416:
    concat $P149, $P146, $P147
    concat $P150, $P149, "' not declared"
    $P151 = $P145."panic"($P150)
.annotate 'line', 1891
    set $P141, $P151
.annotate 'line', 1886
    goto if_3054_end
  if_3054:
.annotate 'line', 1887
    set $P144, $P3048
    unless_null $P144, vivify_2417
    new $P144, "Undef"
  vivify_2417:
    can $I106, $P144, "type"
    if $I106, if_3055
    new $P143, 'Integer'
    set $P143, $I106
    goto if_3055_end
  if_3055:
.annotate 'line', 1888
    find_lex $P145, "$past"
    unless_null $P145, vivify_2418
    new $P145, "Undef"
  vivify_2418:
    set $P146, $P3048
    unless_null $P146, vivify_2419
    new $P146, "Undef"
  vivify_2419:
    $P147 = $P146."type"()
    $P149 = $P145."type"($P147)
.annotate 'line', 1887
    set $P143, $P149
  if_3055_end:
.annotate 'line', 1886
    set $P141, $P143
  if_3054_end:
.annotate 'line', 1878
    .return ($P141)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3049"  :anon :subid("620_1334921493.34") :outer("619_1334921493.34")
    .param pmc param_3051
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1880
    .lex "$_", param_3051
.annotate 'line', 1881
    find_lex $P153, "$_"
    unless_null $P153, vivify_2411
    new $P153, "Undef"
  vivify_2411:
    $S102 = $P153."name"()
    find_lex $P154, "$name"
    unless_null $P154, vivify_2412
    new $P154, "Undef"
  vivify_2412:
    set $S103, $P154
    iseq $I106, $S102, $S103
    if $I106, if_3052
    new $P152, 'Integer'
    set $P152, $I106
    goto if_3052_end
  if_3052:
.annotate 'line', 1882
    find_lex $P155, "$_"
    unless_null $P155, vivify_2413
    new $P155, "Undef"
  vivify_2413:
    store_lex "$attr", $P155
.annotate 'line', 1883
    die 0, .CONTROL_LOOP_LAST
  if_3052_end:
.annotate 'line', 1880
    .return ($P152)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3027"  :anon :subid("617_1334921493.34") :outer("616_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1854
    new $P127, "Undef"
    set $P3029, $P127
    .lex "$global_fallback", $P3029
    find_lex $P3030, "$/"
    unless_null $P3030, vivify_2420
    $P3030 = root_new ['parrot';'Hash']
  vivify_2420:
    set $P128, $P3030["sigil"]
    unless_null $P128, vivify_2421
    new $P128, "Undef"
  vivify_2421:
    set $S101, $P128
    new $P129, 'String'
    set $P129, $S101
    find_lex $P3031, "$/"
    unless_null $P3031, vivify_2422
    $P3031 = root_new ['parrot';'Hash']
  vivify_2422:
    set $P131, $P3031["desigilname"]
    unless_null $P131, vivify_2423
    new $P131, "Undef"
  vivify_2423:
    concat $P132, $P129, $P131
    new $P133, "ResizablePMCArray"
    push $P133, "GLOBAL"
    push $P133, $P132
    find_lex $P134, "$/"
    unless_null $P134, vivify_2424
    new $P134, "Undef"
  vivify_2424:
    $P135 = "lexical_package_lookup"($P133, $P134)
    set $P3029, $P135
.annotate 'line', 1855
    set $P128, $P3029
    unless_null $P128, vivify_2425
    new $P128, "Undef"
  vivify_2425:
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Op"]
.annotate 'line', 1856
    new $P134, "String"
    assign $P134, "Contextual "
    find_lex $P135, "$/"
    unless_null $P135, vivify_2426
    new $P135, "Undef"
  vivify_2426:
    set $S101, $P135
    concat $P136, $P134, $S101
    concat $P137, $P136, " not found"
    $P138 = $P133."new"($P137, "die" :named("pirop"))
.annotate 'line', 1855
    $P128."viviself"($P138)
.annotate 'line', 1859
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Var"]
.annotate 'line', 1860
    find_lex $P3032, "@name"
    unless_null $P3032, vivify_2427
    $P3032 = root_new ['parrot';'ResizablePMCArray']
  vivify_2427:
    $P133 = $P3032."pop"()
    set $S101, $P133
.annotate 'line', 1859
    set $P134, $P3029
    unless_null $P134, vivify_2428
    new $P134, "Undef"
  vivify_2428:
    $P135 = $P132."new"($S101 :named("name"), "contextual" :named("scope"), $P134 :named("viviself"))
    store_lex "$past", $P135
.annotate 'line', 1853
    .return ($P135)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<module>" :anon :subid("463_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3063
    .param pmc param_3064
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1909
    .lex "self", param_3063
    .lex "$/", param_3064
    set $P118, param_3064
    set $P3065, param_3064
    unless_null $P3065, vivify_2441
    $P3065 = root_new ['parrot';'Hash']
  vivify_2441:
    set $P120, $P3065["package_def"]
    unless_null $P120, vivify_2442
    new $P120, "Undef"
  vivify_2442:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<knowhow>" :anon :subid("464_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3067
    .param pmc param_3068
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1910
    .lex "self", param_3067
    .lex "$/", param_3068
    set $P118, param_3068
    set $P3069, param_3068
    unless_null $P3069, vivify_2443
    $P3069 = root_new ['parrot';'Hash']
  vivify_2443:
    set $P120, $P3069["package_def"]
    unless_null $P120, vivify_2444
    new $P120, "Undef"
  vivify_2444:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<class>" :anon :subid("465_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3071
    .param pmc param_3072
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1911
    .lex "self", param_3071
    .lex "$/", param_3072
    set $P118, param_3072
    set $P3073, param_3072
    unless_null $P3073, vivify_2445
    $P3073 = root_new ['parrot';'Hash']
  vivify_2445:
    set $P120, $P3073["package_def"]
    unless_null $P120, vivify_2446
    new $P120, "Undef"
  vivify_2446:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<grammar>" :anon :subid("466_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3075
    .param pmc param_3076
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1912
    .lex "self", param_3075
    .lex "$/", param_3076
    set $P118, param_3076
    set $P3077, param_3076
    unless_null $P3077, vivify_2447
    $P3077 = root_new ['parrot';'Hash']
  vivify_2447:
    set $P120, $P3077["package_def"]
    unless_null $P120, vivify_2448
    new $P120, "Undef"
  vivify_2448:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<role>" :anon :subid("467_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3079
    .param pmc param_3080
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1913
    .lex "self", param_3079
    .lex "$/", param_3080
    set $P118, param_3080
    set $P3081, param_3080
    unless_null $P3081, vivify_2449
    $P3081 = root_new ['parrot';'Hash']
  vivify_2449:
    set $P120, $P3081["package_def"]
    unless_null $P120, vivify_2450
    new $P120, "Undef"
  vivify_2450:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<native>" :anon :subid("468_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3083
    .param pmc param_3084
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1914
    .lex "self", param_3083
    .lex "$/", param_3084
    set $P118, param_3084
    set $P3085, param_3084
    unless_null $P3085, vivify_2451
    $P3085 = root_new ['parrot';'Hash']
  vivify_2451:
    set $P120, $P3085["package_def"]
    unless_null $P120, vivify_2452
    new $P120, "Undef"
  vivify_2452:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<stub>" :anon :subid("469_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3087
    .param pmc param_3088
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1916
    .lex "self", param_3087
    .lex "$/", param_3088
.annotate 'line', 1919
    new $P118, "Undef"
    set $P3089, $P118
    .lex "$HOW", $P3089
.annotate 'line', 1920
    new $P120, "Undef"
    set $P3090, $P120
    .lex "$PACKAGE", $P3090
.annotate 'line', 1919
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_2453
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_2454
    die "Contextual $*W not found"
  vivify_2454:
  vivify_2453:
    set $P3091, param_3088
    unless_null $P3091, vivify_2455
    $P3091 = root_new ['parrot';'Hash']
  vivify_2455:
    set $P3092, $P3091["metaclass"]
    unless_null $P3092, vivify_2456
    $P3092 = root_new ['parrot';'Hash']
  vivify_2456:
    set $P125, $P3092["identifier"]
    unless_null $P125, vivify_2457
    new $P125, "Undef"
  vivify_2457:
    $P126 = $P124."find_sym"($P125)
    set $P3089, $P126
.annotate 'line', 1920
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_2458
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_2459
    die "Contextual $*W not found"
  vivify_2459:
  vivify_2458:
    set $P125, $P3089
    unless_null $P125, vivify_2460
    new $P125, "Undef"
  vivify_2460:
    set $P3093, param_3088
    unless_null $P3093, vivify_2461
    $P3093 = root_new ['parrot';'Hash']
  vivify_2461:
    set $P126, $P3093["name"]
    unless_null $P126, vivify_2462
    new $P126, "Undef"
  vivify_2462:
    set $S100, $P126
    $P127 = $P124."pkg_create_mo"($P125, $S100 :named("name"))
    set $P3090, $P127
.annotate 'line', 1923
    find_dynamic_lex $P125, "$*SCOPE"
    unless_null $P125, vivify_2463
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$SCOPE"]
    unless_null $P125, vivify_2464
    die "Contextual $*SCOPE not found"
  vivify_2464:
  vivify_2463:
    set $S100, $P125
    iseq $I100, $S100, "our"
    unless $I100, unless_3095
    new $P121, 'Integer'
    set $P121, $I100
    goto unless_3095_end
  unless_3095:
    find_dynamic_lex $P128, "$*SCOPE"
    unless_null $P128, vivify_2465
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$SCOPE"]
    unless_null $P128, vivify_2466
    die "Contextual $*SCOPE not found"
  vivify_2466:
  vivify_2465:
    set $S101, $P128
    iseq $I101, $S101, ""
    new $P121, 'Integer'
    set $P121, $I101
  unless_3095_end:
    if $P121, if_3094
.annotate 'line', 1929
    find_dynamic_lex $P132, "$*SCOPE"
    unless_null $P132, vivify_2467
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$SCOPE"]
    unless_null $P132, vivify_2468
    die "Contextual $*SCOPE not found"
  vivify_2468:
  vivify_2467:
    set $S102, $P132
    iseq $I102, $S102, "my"
    if $I102, if_3104
.annotate 'line', 1936
    set $P133, param_3088
    unless_null $P133, vivify_2469
    new $P133, "Undef"
  vivify_2469:
    $P134 = $P133."CURSOR"()
    find_dynamic_lex $P137, "$*SCOPE"
    unless_null $P137, vivify_2470
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$SCOPE"]
    unless_null $P137, vivify_2471
    die "Contextual $*SCOPE not found"
  vivify_2471:
  vivify_2470:
    concat $P138, $P137, " scoped packages are not supported"
    $P134."panic"($P138)
.annotate 'line', 1935
    goto if_3104_end
  if_3104:
.annotate 'line', 1930
    set $P3106, param_3088
    unless_null $P3106, vivify_2472
    $P3106 = root_new ['parrot';'Hash']
  vivify_2472:
    set $P3107, $P3106["name"]
    unless_null $P3107, vivify_2473
    $P3107 = root_new ['parrot';'Hash']
  vivify_2473:
    set $P133, $P3107["identifier"]
    unless_null $P133, vivify_2474
    new $P133, "Undef"
  vivify_2474:
    set $N100, $P133
    set $N101, 1
    isne $I103, $N100, $N101
    unless $I103, if_3105_end
.annotate 'line', 1931
    set $P3108, param_3088
    unless_null $P3108, vivify_2475
    $P3108 = root_new ['parrot';'Hash']
  vivify_2475:
    set $P134, $P3108["name"]
    unless_null $P134, vivify_2476
    new $P134, "Undef"
  vivify_2476:
    $P135 = $P134."CURSOR"()
    $P135."panic"("A my scoped package cannot have a multi-part name yet")
  if_3105_end:
.annotate 'line', 1933
    find_dynamic_lex $P135, "$*W"
    unless_null $P135, vivify_2477
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$W"]
    unless_null $P135, vivify_2478
    die "Contextual $*W not found"
  vivify_2478:
  vivify_2477:
    find_dynamic_lex $P138, "$*W"
    unless_null $P138, vivify_2479
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$W"]
    unless_null $P138, vivify_2480
    die "Contextual $*W not found"
  vivify_2480:
  vivify_2479:
    $P139 = $P138."cur_lexpad"()
    new $P140, "Float"
    assign $P140, 0
    set $I103, $P140
    set $P3109, param_3088
    unless_null $P3109, vivify_2481
    $P3109 = root_new ['parrot';'Hash']
  vivify_2481:
    set $P3110, $P3109["name"]
    unless_null $P3110, vivify_2482
    $P3110 = root_new ['parrot';'Hash']
  vivify_2482:
    set $P3111, $P3110["identifier"]
    unless_null $P3111, vivify_2483
    $P3111 = root_new ['parrot';'ResizablePMCArray']
  vivify_2483:
    set $P141, $P3111[$I103]
    unless_null $P141, vivify_2484
    new $P141, "Undef"
  vivify_2484:
    set $P142, $P3090
    unless_null $P142, vivify_2485
    new $P142, "Undef"
  vivify_2485:
    $P135."install_lexical_symbol"($P139, $P141, $P142)
  if_3104_end:
.annotate 'line', 1929
    goto if_3094_end
  if_3094:
.annotate 'line', 1924
    find_dynamic_lex $P132, "$*W"
    unless_null $P132, vivify_2486
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$W"]
    unless_null $P132, vivify_2487
    die "Contextual $*W not found"
  vivify_2487:
  vivify_2486:
    find_dynamic_lex $P135, "$*OUTERPACKAGE"
    unless_null $P135, vivify_2488
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$OUTERPACKAGE"]
    unless_null $P135, vivify_2489
    die "Contextual $*OUTERPACKAGE not found"
  vivify_2489:
  vivify_2488:
    set $P3096, param_3088
    unless_null $P3096, vivify_2490
    $P3096 = root_new ['parrot';'Hash']
  vivify_2490:
    set $P3097, $P3096["name"]
    unless_null $P3097, vivify_2491
    $P3097 = root_new ['parrot';'Hash']
  vivify_2491:
    set $P136, $P3097["identifier"]
    unless_null $P136, vivify_2492
    new $P136, "Undef"
  vivify_2492:
    set $P137, $P3090
    unless_null $P137, vivify_2493
    new $P137, "Undef"
  vivify_2493:
    $P132."install_package_symbol"($P135, $P136, $P137)
.annotate 'line', 1925
    set $P3099, param_3088
    unless_null $P3099, vivify_2494
    $P3099 = root_new ['parrot';'Hash']
  vivify_2494:
    set $P3100, $P3099["name"]
    unless_null $P3100, vivify_2495
    $P3100 = root_new ['parrot';'Hash']
  vivify_2495:
    set $P129, $P3100["identifier"]
    unless_null $P129, vivify_2496
    new $P129, "Undef"
  vivify_2496:
    set $N100, $P129
    set $N101, 1
    iseq $I102, $N100, $N101
    unless $I102, if_3098_end
.annotate 'line', 1926
    find_dynamic_lex $P133, "$*W"
    unless_null $P133, vivify_2497
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$W"]
    unless_null $P133, vivify_2498
    die "Contextual $*W not found"
  vivify_2498:
  vivify_2497:
    find_dynamic_lex $P136, "$*W"
    unless_null $P136, vivify_2499
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$W"]
    unless_null $P136, vivify_2500
    die "Contextual $*W not found"
  vivify_2500:
  vivify_2499:
    $P137 = $P136."cur_lexpad"()
    new $P138, "Float"
    assign $P138, 0
    set $I103, $P138
    set $P3101, param_3088
    unless_null $P3101, vivify_2501
    $P3101 = root_new ['parrot';'Hash']
  vivify_2501:
    set $P3102, $P3101["name"]
    unless_null $P3102, vivify_2502
    $P3102 = root_new ['parrot';'Hash']
  vivify_2502:
    set $P3103, $P3102["identifier"]
    unless_null $P3103, vivify_2503
    $P3103 = root_new ['parrot';'ResizablePMCArray']
  vivify_2503:
    set $P139, $P3103[$I103]
    unless_null $P139, vivify_2504
    new $P139, "Undef"
  vivify_2504:
    set $P140, $P3090
    unless_null $P140, vivify_2505
    new $P140, "Undef"
  vivify_2505:
    $P133."install_lexical_symbol"($P137, $P139, $P140)
  if_3098_end:
  if_3094_end:
.annotate 'line', 1939
    set $P121, param_3088
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Stmts"]
    $P127 = $P126."new"()
    $P128 = $P121."!make"($P127)
.annotate 'line', 1916
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "package_def" :anon :subid("470_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3113
    .param pmc param_3114
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1942
    .const 'Sub' $P3163 = "624_1334921493.34" 
    capture_lex $P3163
    .const 'Sub' $P3156 = "623_1334921493.34" 
    capture_lex $P3156
    .const 'Sub' $P3136 = "621_1334921493.34" 
    capture_lex $P3136
    .lex "self", param_3113
    .lex "$/", param_3114
.annotate 'line', 1944
    $P3116 = root_new ['parrot';'ResizablePMCArray']
    set $P3115, $P3116
    .lex "@ns", $P3115
.annotate 'line', 1945
    new $P118, "Undef"
    set $P3117, $P118
    .lex "$name", $P3117
.annotate 'line', 1946
    new $P120, "Undef"
    set $P3118, $P120
    .lex "$how", $P3118
.annotate 'line', 1949
    new $P121, "Undef"
    set $P3119, $P121
    .lex "$past", $P3119
.annotate 'line', 1944
    set $P3120, param_3114
    unless_null $P3120, vivify_2506
    $P3120 = root_new ['parrot';'Hash']
  vivify_2506:
    set $P3121, $P3120["name"]
    unless_null $P3121, vivify_2507
    $P3121 = root_new ['parrot';'Hash']
  vivify_2507:
    set $P123, $P3121["identifier"]
    unless_null $P123, vivify_2508
    new $P123, "Undef"
  vivify_2508:
    clone $P124, $P123
    set $P3115, $P124
.annotate 'line', 1945
    set $P3122, $P3115
    unless_null $P3122, vivify_2509
    $P3122 = root_new ['parrot';'ResizablePMCArray']
  vivify_2509:
    $P123 = $P3122."pop"()
    set $S100, $P123
    new $P124, 'String'
    set $P124, $S100
    set $P3117, $P124
.annotate 'line', 1946
    find_dynamic_lex $P125, "$*PKGDECL"
    unless_null $P125, vivify_2510
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$PKGDECL"]
    unless_null $P125, vivify_2511
    die "Contextual $*PKGDECL not found"
  vivify_2511:
  vivify_2510:
    find_dynamic_lex $P128, "%*HOW"
    unless_null $P128, vivify_2512
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["%HOW"]
    unless_null $P128, vivify_2513
    die "Contextual %*HOW not found"
  vivify_2513:
  vivify_2512:
    set $P129, $P128[$P125]
    unless_null $P129, vivify_2514
    new $P129, "Undef"
  vivify_2514:
    set $P3118, $P129
.annotate 'line', 1949
    set $P3124, param_3114
    unless_null $P3124, vivify_2515
    $P3124 = root_new ['parrot';'Hash']
  vivify_2515:
    set $P124, $P3124["block"]
    unless_null $P124, vivify_2516
    new $P124, "Undef"
  vivify_2516:
    if $P124, if_3123
    set $P3126, param_3114
    unless_null $P3126, vivify_2517
    $P3126 = root_new ['parrot';'Hash']
  vivify_2517:
    set $P127, $P3126["comp_unit"]
    unless_null $P127, vivify_2518
    new $P127, "Undef"
  vivify_2518:
    $P128 = $P127."ast"()
    set $P123, $P128
    goto if_3123_end
  if_3123:
    set $P3125, param_3114
    unless_null $P3125, vivify_2519
    $P3125 = root_new ['parrot';'Hash']
  vivify_2519:
    set $P125, $P3125["block"]
    unless_null $P125, vivify_2520
    new $P125, "Undef"
  vivify_2520:
    $P126 = $P125."ast"()
    set $P123, $P126
  if_3123_end:
    set $P3119, $P123
.annotate 'line', 1950
    find_dynamic_lex $P126, "$*SCOPE"
    unless_null $P126, vivify_2521
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$SCOPE"]
    unless_null $P126, vivify_2522
    die "Contextual $*SCOPE not found"
  vivify_2522:
  vivify_2521:
    set $S100, $P126
    iseq $I100, $S100, "our"
    unless $I100, unless_3128
    new $P123, 'Integer'
    set $P123, $I100
    goto unless_3128_end
  unless_3128:
    find_dynamic_lex $P129, "$*SCOPE"
    unless_null $P129, vivify_2523
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$SCOPE"]
    unless_null $P129, vivify_2524
    die "Contextual $*SCOPE not found"
  vivify_2524:
  vivify_2523:
    set $S101, $P129
    iseq $I101, $S101, ""
    new $P123, 'Integer'
    set $P123, $I101
  unless_3128_end:
    unless $P123, if_3127_end
.annotate 'line', 1951
    set $P131, $P3119
    unless_null $P131, vivify_2525
    new $P131, "Undef"
  vivify_2525:
    set $P3129, param_3114
    unless_null $P3129, vivify_2526
    $P3129 = root_new ['parrot';'Hash']
  vivify_2526:
    set $P3130, $P3129["name"]
    unless_null $P3130, vivify_2527
    $P3130 = root_new ['parrot';'Hash']
  vivify_2527:
    set $P132, $P3130["identifier"]
    unless_null $P132, vivify_2528
    new $P132, "Undef"
  vivify_2528:
    $P131."namespace"($P132)
  if_3127_end:
.annotate 'line', 1958
    set $P124, $P3118
    unless_null $P124, vivify_2529
    new $P124, "Undef"
  vivify_2529:
    can $I100, $P124, "parametric"
    if $I100, if_3132
    new $P123, 'Integer'
    set $P123, $I100
    goto if_3132_end
  if_3132:
    set $P125, $P3118
    unless_null $P125, vivify_2530
    new $P125, "Undef"
  vivify_2530:
    set $P126, $P3118
    unless_null $P126, vivify_2531
    new $P126, "Undef"
  vivify_2531:
    $P127 = $P125."parametric"($P126)
    set $P123, $P127
  if_3132_end:
    if $P123, if_3131
.annotate 'line', 1968
    set $P128, $P3119
    unless_null $P128, vivify_2532
    new $P128, "Undef"
  vivify_2532:
    $P128."blocktype"("immediate")
.annotate 'line', 1969
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2533
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2534
    die "Contextual $*W not found"
  vivify_2534:
  vivify_2533:
    set $P132, $P3119
    unless_null $P132, vivify_2535
    new $P132, "Undef"
  vivify_2535:
    find_dynamic_lex $P135, "$*PACKAGE"
    unless_null $P135, vivify_2536
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$PACKAGE"]
    unless_null $P135, vivify_2537
    die "Contextual $*PACKAGE not found"
  vivify_2537:
  vivify_2536:
    $P131."install_lexical_symbol"($P132, "$?PACKAGE", $P135)
.annotate 'line', 1970
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2538
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2539
    die "Contextual $*W not found"
  vivify_2539:
  vivify_2538:
    set $P132, $P3119
    unless_null $P132, vivify_2540
    new $P132, "Undef"
  vivify_2540:
    find_dynamic_lex $P135, "$*PACKAGE"
    unless_null $P135, vivify_2541
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$PACKAGE"]
    unless_null $P135, vivify_2542
    die "Contextual $*PACKAGE not found"
  vivify_2542:
  vivify_2541:
    $P131."install_lexical_symbol"($P132, "$?CLASS", $P135)
.annotate 'line', 1967
    goto if_3131_end
  if_3131:
.annotate 'line', 1959
    set $P128, $P3119
    unless_null $P128, vivify_2543
    new $P128, "Undef"
  vivify_2543:
    $P128."blocktype"("declaration")
.annotate 'line', 1960
    set $P128, $P3119
    unless_null $P128, vivify_2544
    new $P128, "Undef"
  vivify_2544:
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Var"]
    $P134 = $P133."new"("$?CLASS" :named("name"), "parameter" :named("scope"), 1 :named("directaccess"))
    $P128."unshift"($P134)
.annotate 'line', 1962
    set $P128, $P3119
    unless_null $P128, vivify_2545
    new $P128, "Undef"
  vivify_2545:
    $P128."symbol"("$?CLASS", "lexical" :named("scope"))
.annotate 'line', 1963
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2546
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2547
    die "Contextual $*W not found"
  vivify_2547:
  vivify_2546:
    find_dynamic_lex $P134, "$*PACKAGE"
    unless_null $P134, vivify_2548
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$PACKAGE"]
    unless_null $P134, vivify_2549
    die "Contextual $*PACKAGE not found"
  vivify_2549:
  vivify_2548:
    set $P135, $P3119
    unless_null $P135, vivify_2550
    new $P135, "Undef"
  vivify_2550:
    $P131."pkg_set_body_block"($P134, $P135)
.annotate 'line', 1964
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2551
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2552
    die "Contextual $*W not found"
  vivify_2552:
  vivify_2551:
    set $P132, $P3119
    unless_null $P132, vivify_2553
    new $P132, "Undef"
  vivify_2553:
    find_dynamic_lex $P135, "$*PACKAGE"
    unless_null $P135, vivify_2554
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$PACKAGE"]
    unless_null $P135, vivify_2555
    die "Contextual $*PACKAGE not found"
  vivify_2555:
  vivify_2554:
    $P131."install_lexical_symbol"($P132, "$?PACKAGE", $P135)
.annotate 'line', 1965
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2556
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2557
    die "Contextual $*W not found"
  vivify_2557:
  vivify_2556:
    set $P132, $P3119
    unless_null $P132, vivify_2558
    new $P132, "Undef"
  vivify_2558:
    find_dynamic_lex $P135, "$*PACKAGE"
    unless_null $P135, vivify_2559
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$PACKAGE"]
    unless_null $P135, vivify_2560
    die "Contextual $*PACKAGE not found"
  vivify_2560:
  vivify_2559:
    $P131."install_lexical_symbol"($P132, "$?ROLE", $P135)
  if_3131_end:
.annotate 'line', 1974
    set $P3134, param_3114
    unless_null $P3134, vivify_2561
    $P3134 = root_new ['parrot';'Hash']
  vivify_2561:
    set $P123, $P3134["parent"]
    unless_null $P123, vivify_2562
    new $P123, "Undef"
  vivify_2562:
    if $P123, if_3133
.annotate 'line', 1988
    set $P127, $P3118
    unless_null $P127, vivify_2563
    new $P127, "Undef"
  vivify_2563:
    can $I100, $P127, "set_default_parent"
    unless $I100, if_3154_end
    .const 'Sub' $P3156 = "623_1334921493.34" 
    capture_lex $P3156
    $P3156()
  if_3154_end:
    goto if_3133_end
  if_3133:
.annotate 'line', 1974
    .const 'Sub' $P3136 = "621_1334921493.34" 
    capture_lex $P3136
    $P3136()
  if_3133_end:
.annotate 'line', 1995
    set $P3160, param_3114
    unless_null $P3160, vivify_2591
    $P3160 = root_new ['parrot';'Hash']
  vivify_2591:
    set $P123, $P3160["role"]
    unless_null $P123, vivify_2592
    new $P123, "Undef"
  vivify_2592:
    unless $P123, if_3159_end
.annotate 'line', 1996
    set $P3161, param_3114
    unless_null $P3161, vivify_2593
    $P3161 = root_new ['parrot';'Hash']
  vivify_2593:
    set $P125, $P3161["role"]
    unless_null $P125, vivify_2594
    new $P125, "Undef"
  vivify_2594:
    defined $I100, $P125
    unless $I100, for_undef_2595
    iter $P124, $P125
    new $P131, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P131, loop3178_handler
    push_eh $P131
  loop3178_test:
    unless $P124, loop3178_done
    shift $P126, $P124
  loop3178_redo:
    .const 'Sub' $P3163 = "624_1334921493.34" 
    capture_lex $P3163
    $P3163($P126)
  loop3178_next:
    goto loop3178_test
  loop3178_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P132, exception, 'type'
    eq $P132, .CONTROL_LOOP_NEXT, loop3178_next
    eq $P132, .CONTROL_LOOP_REDO, loop3178_redo
  loop3178_done:
    pop_eh 
  for_undef_2595:
  if_3159_end:
.annotate 'line', 2013
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_2610
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_2611
    die "Contextual $*W not found"
  vivify_2611:
  vivify_2610:
    find_dynamic_lex $P128, "$*PACKAGE"
    unless_null $P128, vivify_2612
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$PACKAGE"]
    unless_null $P128, vivify_2613
    die "Contextual $*PACKAGE not found"
  vivify_2613:
  vivify_2612:
    $P125."pkg_compose"($P128)
.annotate 'line', 2015
    set $P123, param_3114
    set $P124, $P3119
    unless_null $P124, vivify_2614
    new $P124, "Undef"
  vivify_2614:
    $P125 = $P123."!make"($P124)
.annotate 'line', 1942
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3155"  :anon :subid("623_1334921493.34") :outer("470_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1989
    new $P128, "Undef"
    set $P3157, $P128
    .lex "$default", $P3157
    find_dynamic_lex $P133, "$*PKGDECL"
    unless_null $P133, vivify_2564
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$PKGDECL"]
    unless_null $P133, vivify_2565
    die "Contextual $*PKGDECL not found"
  vivify_2565:
  vivify_2564:
    set $S100, $P133
    iseq $I101, $S100, "grammar"
    if $I101, if_3158
    new $P135, "ResizablePMCArray"
    push $P135, "NQPMu"
    set $P129, $P135
    goto if_3158_end
  if_3158:
    new $P134, "ResizablePMCArray"
    push $P134, "Regex"
    push $P134, "Cursor"
    set $P129, $P134
  if_3158_end:
    set $P3157, $P129
.annotate 'line', 1990
    find_dynamic_lex $P132, "$*W"
    unless_null $P132, vivify_2566
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$W"]
    unless_null $P132, vivify_2567
    die "Contextual $*W not found"
  vivify_2567:
  vivify_2566:
    find_dynamic_lex $P135, "$*PACKAGE"
    unless_null $P135, vivify_2568
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$PACKAGE"]
    unless_null $P135, vivify_2569
    die "Contextual $*PACKAGE not found"
  vivify_2569:
  vivify_2568:
.annotate 'line', 1991
    find_dynamic_lex $P138, "$*W"
    unless_null $P138, vivify_2570
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$W"]
    unless_null $P138, vivify_2571
    die "Contextual $*W not found"
  vivify_2571:
  vivify_2570:
    set $P139, $P3157
    unless_null $P139, vivify_2572
    new $P139, "Undef"
  vivify_2572:
    $P140 = $P138."find_sym"($P139)
    $P141 = $P132."pkg_add_parent_or_role"($P135, "set_default_parent", $P140)
.annotate 'line', 1988
    .return ($P141)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3135"  :anon :subid("621_1334921493.34") :outer("470_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1974
    .const 'Sub' $P3140 = "622_1334921493.34" 
    capture_lex $P3140
.annotate 'line', 1975
    new $P124, "Undef"
    set $P3137, $P124
    .lex "$parent", $P3137
.annotate 'line', 1976
    new $P125, "Undef"
    set $P3138, $P125
    .lex "$parent_found", $P3138
.annotate 'line', 1974
    set $P126, $P3137
    unless_null $P126, vivify_2573
    new $P126, "Undef"
  vivify_2573:
    set $P126, $P3138
    unless_null $P126, vivify_2574
    new $P126, "Undef"
  vivify_2574:
.annotate 'line', 1977
    .const 'Sub' $P3140 = "622_1334921493.34" 
    capture_lex $P3140
    $P3140()
.annotate 'line', 1981
    set $P127, $P3138
    unless_null $P127, vivify_2581
    new $P127, "Undef"
  vivify_2581:
    if $P127, if_3151
.annotate 'line', 1985
    find_lex $P128, "$/"
    unless_null $P128, vivify_2582
    new $P128, "Undef"
  vivify_2582:
    $P129 = $P128."CURSOR"()
    new $P131, "String"
    assign $P131, "Could not find parent class '"
    new $P132, "Float"
    assign $P132, 0
    set $I100, $P132
    find_lex $P3152, "$/"
    unless_null $P3152, vivify_2583
    $P3152 = root_new ['parrot';'Hash']
  vivify_2583:
    set $P3153, $P3152["parent"]
    unless_null $P3153, vivify_2584
    $P3153 = root_new ['parrot';'ResizablePMCArray']
  vivify_2584:
    set $P133, $P3153[$I100]
    unless_null $P133, vivify_2585
    new $P133, "Undef"
  vivify_2585:
    set $S100, $P133
    concat $P134, $P131, $S100
    concat $P135, $P134, "'"
    $P137 = $P129."panic"($P135)
.annotate 'line', 1984
    set $P126, $P137
.annotate 'line', 1981
    goto if_3151_end
  if_3151:
.annotate 'line', 1982
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2586
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2587
    die "Contextual $*W not found"
  vivify_2587:
  vivify_2586:
    find_dynamic_lex $P134, "$*PACKAGE"
    unless_null $P134, vivify_2588
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$PACKAGE"]
    unless_null $P134, vivify_2589
    die "Contextual $*PACKAGE not found"
  vivify_2589:
  vivify_2588:
    set $P135, $P3137
    unless_null $P135, vivify_2590
    new $P135, "Undef"
  vivify_2590:
    $P136 = $P131."pkg_add_parent_or_role"($P134, "add_parent", $P135)
.annotate 'line', 1981
    set $P126, $P136
  if_3151_end:
.annotate 'line', 1974
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3139"  :anon :subid("622_1334921493.34") :outer("621_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1977
    new $P3146, 'ExceptionHandler'
    set_label $P3146, control_3145
    $P3146."handle_types_except"(.CONTROL_ALL)
    push_eh $P3146
.annotate 'line', 1978
    find_dynamic_lex $P128, "$*W"
    unless_null $P128, vivify_2575
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$W"]
    unless_null $P128, vivify_2576
    die "Contextual $*W not found"
  vivify_2576:
  vivify_2575:
    new $P129, "Float"
    assign $P129, 0
    set $I100, $P129
    find_lex $P3141, "$/"
    unless_null $P3141, vivify_2577
    $P3141 = root_new ['parrot';'Hash']
  vivify_2577:
    set $P3142, $P3141["parent"]
    unless_null $P3142, vivify_2578
    $P3142 = root_new ['parrot';'ResizablePMCArray']
  vivify_2578:
    set $P3143, $P3142[$I100]
    unless_null $P3143, vivify_2579
    $P3143 = root_new ['parrot';'Hash']
  vivify_2579:
    set $P131, $P3143["identifier"]
    unless_null $P131, vivify_2580
    new $P131, "Undef"
  vivify_2580:
    clone $P132, $P131
    $P133 = $P128."find_sym"($P132)
    store_lex "$parent", $P133
.annotate 'line', 1979
    new $P126, "Float"
    assign $P126, 1
    store_lex "$parent_found", $P126
.annotate 'line', 1977
    pop_eh 
    goto skip_handler_3144
  control_3145:
    peek_exception $P3147
    .local pmc exception 
    .get_results (exception) 
    new $P3149, 'Integer'
    set $P3149, 1
    set exception["handled"], $P3149
    set $I3150, exception["handled"]
    eq $I3150, 1, handled_3148
    rethrow exception
  handled_3148:
    finalize $P3147
    .return (exception)
  skip_handler_3144:
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3162"  :anon :subid("624_1334921493.34") :outer("470_1334921493.34")
    .param pmc param_3166
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1996
    .const 'Sub' $P3168 = "625_1334921493.34" 
    capture_lex $P3168
.annotate 'line', 1997
    new $P127, "Undef"
    set $P3164, $P127
    .lex "$role", $P3164
.annotate 'line', 1998
    new $P128, "Undef"
    set $P3165, $P128
    .lex "$role_found", $P3165
    .lex "$_", param_3166
.annotate 'line', 1996
    set $P129, $P3164
    unless_null $P129, vivify_2596
    new $P129, "Undef"
  vivify_2596:
    set $P129, $P3165
    unless_null $P129, vivify_2597
    new $P129, "Undef"
  vivify_2597:
.annotate 'line', 1999
    .const 'Sub' $P3168 = "625_1334921493.34" 
    capture_lex $P3168
    $P3168()
.annotate 'line', 2003
    set $P131, $P3165
    unless_null $P131, vivify_2602
    new $P131, "Undef"
  vivify_2602:
    if $P131, if_3177
.annotate 'line', 2007
    find_lex $P132, "$/"
    unless_null $P132, vivify_2603
    new $P132, "Undef"
  vivify_2603:
    $P133 = $P132."CURSOR"()
    new $P134, "String"
    assign $P134, "Could not find role '"
    find_lex $P135, "$_"
    unless_null $P135, vivify_2604
    new $P135, "Undef"
  vivify_2604:
    set $S100, $P135
    concat $P136, $P134, $S100
    concat $P137, $P136, "'"
    $P138 = $P133."panic"($P137)
.annotate 'line', 2006
    set $P129, $P138
.annotate 'line', 2003
    goto if_3177_end
  if_3177:
.annotate 'line', 2004
    find_dynamic_lex $P134, "$*W"
    unless_null $P134, vivify_2605
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$W"]
    unless_null $P134, vivify_2606
    die "Contextual $*W not found"
  vivify_2606:
  vivify_2605:
    find_dynamic_lex $P137, "$*PACKAGE"
    unless_null $P137, vivify_2607
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$PACKAGE"]
    unless_null $P137, vivify_2608
    die "Contextual $*PACKAGE not found"
  vivify_2608:
  vivify_2607:
    set $P138, $P3164
    unless_null $P138, vivify_2609
    new $P138, "Undef"
  vivify_2609:
    $P139 = $P134."pkg_add_parent_or_role"($P137, "add_role", $P138)
.annotate 'line', 2003
    set $P129, $P139
  if_3177_end:
.annotate 'line', 1996
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3167"  :anon :subid("625_1334921493.34") :outer("624_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1999
    new $P3172, 'ExceptionHandler'
    set_label $P3172, control_3171
    $P3172."handle_types_except"(.CONTROL_ALL)
    push_eh $P3172
.annotate 'line', 2000
    find_dynamic_lex $P132, "$*W"
    unless_null $P132, vivify_2598
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$W"]
    unless_null $P132, vivify_2599
    die "Contextual $*W not found"
  vivify_2599:
  vivify_2598:
    find_lex $P3169, "$_"
    unless_null $P3169, vivify_2600
    $P3169 = root_new ['parrot';'Hash']
  vivify_2600:
    set $P133, $P3169["identifier"]
    unless_null $P133, vivify_2601
    new $P133, "Undef"
  vivify_2601:
    clone $P134, $P133
    $P135 = $P132."find_sym"($P134)
    store_lex "$role", $P135
.annotate 'line', 2001
    new $P129, "Float"
    assign $P129, 1
    store_lex "$role_found", $P129
.annotate 'line', 1999
    pop_eh 
    goto skip_handler_3170
  control_3171:
    peek_exception $P3173
    .local pmc exception 
    .get_results (exception) 
    new $P3175, 'Integer'
    set $P3175, 1
    set exception["handled"], $P3175
    set $I3176, exception["handled"]
    eq $I3176, 1, handled_3174
    rethrow exception
  handled_3174:
    finalize $P3173
    .return (exception)
  skip_handler_3170:
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scope_declarator:sym<my>" :anon :subid("471_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3180
    .param pmc param_3181
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2018
    .lex "self", param_3180
    .lex "$/", param_3181
    set $P118, param_3181
    set $P3182, param_3181
    unless_null $P3182, vivify_2615
    $P3182 = root_new ['parrot';'Hash']
  vivify_2615:
    set $P120, $P3182["scoped"]
    unless_null $P120, vivify_2616
    new $P120, "Undef"
  vivify_2616:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scope_declarator:sym<our>" :anon :subid("472_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3184
    .param pmc param_3185
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2019
    .lex "self", param_3184
    .lex "$/", param_3185
    set $P118, param_3185
    set $P3186, param_3185
    unless_null $P3186, vivify_2617
    $P3186 = root_new ['parrot';'Hash']
  vivify_2617:
    set $P120, $P3186["scoped"]
    unless_null $P120, vivify_2618
    new $P120, "Undef"
  vivify_2618:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scope_declarator:sym<has>" :anon :subid("473_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3188
    .param pmc param_3189
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2020
    .lex "self", param_3188
    .lex "$/", param_3189
    set $P118, param_3189
    set $P3190, param_3189
    unless_null $P3190, vivify_2619
    $P3190 = root_new ['parrot';'Hash']
  vivify_2619:
    set $P120, $P3190["scoped"]
    unless_null $P120, vivify_2620
    new $P120, "Undef"
  vivify_2620:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scoped" :anon :subid("474_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3192
    .param pmc param_3193
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2022
    .lex "self", param_3192
    .lex "$/", param_3193
.annotate 'line', 2023
    set $P118, param_3193
    set $P3195, param_3193
    unless_null $P3195, vivify_2621
    $P3195 = root_new ['parrot';'Hash']
  vivify_2621:
    set $P121, $P3195["declarator"]
    unless_null $P121, vivify_2622
    new $P121, "Undef"
  vivify_2622:
    if $P121, if_3194
.annotate 'line', 2024
    set $P3198, param_3193
    unless_null $P3198, vivify_2623
    $P3198 = root_new ['parrot';'Hash']
  vivify_2623:
    set $P126, $P3198["multi_declarator"]
    unless_null $P126, vivify_2624
    new $P126, "Undef"
  vivify_2624:
    if $P126, if_3197
.annotate 'line', 2025
    set $P3200, param_3193
    unless_null $P3200, vivify_2625
    $P3200 = root_new ['parrot';'Hash']
  vivify_2625:
    set $P129, $P3200["package_declarator"]
    unless_null $P129, vivify_2626
    new $P129, "Undef"
  vivify_2626:
    $P131 = $P129."ast"()
    set $P125, $P131
.annotate 'line', 2024
    goto if_3197_end
  if_3197:
    set $P3199, param_3193
    unless_null $P3199, vivify_2627
    $P3199 = root_new ['parrot';'Hash']
  vivify_2627:
    set $P127, $P3199["multi_declarator"]
    unless_null $P127, vivify_2628
    new $P127, "Undef"
  vivify_2628:
    $P128 = $P127."ast"()
    set $P125, $P128
  if_3197_end:
    set $P120, $P125
.annotate 'line', 2023
    goto if_3194_end
  if_3194:
    set $P3196, param_3193
    unless_null $P3196, vivify_2629
    $P3196 = root_new ['parrot';'Hash']
  vivify_2629:
    set $P123, $P3196["declarator"]
    unless_null $P123, vivify_2630
    new $P123, "Undef"
  vivify_2630:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3194_end:
    $P132 = $P118."!make"($P120)
.annotate 'line', 2022
    .return ($P132)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "declarator" :anon :subid("475_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3202
    .param pmc param_3203
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2028
    .lex "self", param_3202
    .lex "$/", param_3203
.annotate 'line', 2029
    set $P118, param_3203
.annotate 'line', 2030
    set $P3205, param_3203
    unless_null $P3205, vivify_2631
    $P3205 = root_new ['parrot';'Hash']
  vivify_2631:
    set $P121, $P3205["routine_declarator"]
    unless_null $P121, vivify_2632
    new $P121, "Undef"
  vivify_2632:
    if $P121, if_3204
.annotate 'line', 2031
    set $P3207, param_3203
    unless_null $P3207, vivify_2633
    $P3207 = root_new ['parrot';'Hash']
  vivify_2633:
    set $P125, $P3207["variable_declarator"]
    unless_null $P125, vivify_2634
    new $P125, "Undef"
  vivify_2634:
    $P126 = $P125."ast"()
    set $P120, $P126
.annotate 'line', 2030
    goto if_3204_end
  if_3204:
    set $P3206, param_3203
    unless_null $P3206, vivify_2635
    $P3206 = root_new ['parrot';'Hash']
  vivify_2635:
    set $P123, $P3206["routine_declarator"]
    unless_null $P123, vivify_2636
    new $P123, "Undef"
  vivify_2636:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3204_end:
    $P127 = $P118."!make"($P120)
.annotate 'line', 2028
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "multi_declarator:sym<multi>" :anon :subid("476_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3209
    .param pmc param_3210
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2034
    .lex "self", param_3209
    .lex "$/", param_3210
    set $P118, param_3210
    set $P3212, param_3210
    unless_null $P3212, vivify_2637
    $P3212 = root_new ['parrot';'Hash']
  vivify_2637:
    set $P121, $P3212["declarator"]
    unless_null $P121, vivify_2638
    new $P121, "Undef"
  vivify_2638:
    if $P121, if_3211
    set $P3214, param_3210
    unless_null $P3214, vivify_2639
    $P3214 = root_new ['parrot';'Hash']
  vivify_2639:
    set $P125, $P3214["routine_def"]
    unless_null $P125, vivify_2640
    new $P125, "Undef"
  vivify_2640:
    $P126 = $P125."ast"()
    set $P120, $P126
    goto if_3211_end
  if_3211:
    set $P3213, param_3210
    unless_null $P3213, vivify_2641
    $P3213 = root_new ['parrot';'Hash']
  vivify_2641:
    set $P123, $P3213["declarator"]
    unless_null $P123, vivify_2642
    new $P123, "Undef"
  vivify_2642:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3211_end:
    $P127 = $P118."!make"($P120)
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "multi_declarator:sym<proto>" :anon :subid("477_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3216
    .param pmc param_3217
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2035
    .lex "self", param_3216
    .lex "$/", param_3217
    set $P118, param_3217
    set $P3219, param_3217
    unless_null $P3219, vivify_2643
    $P3219 = root_new ['parrot';'Hash']
  vivify_2643:
    set $P121, $P3219["declarator"]
    unless_null $P121, vivify_2644
    new $P121, "Undef"
  vivify_2644:
    if $P121, if_3218
    set $P3221, param_3217
    unless_null $P3221, vivify_2645
    $P3221 = root_new ['parrot';'Hash']
  vivify_2645:
    set $P125, $P3221["routine_def"]
    unless_null $P125, vivify_2646
    new $P125, "Undef"
  vivify_2646:
    $P126 = $P125."ast"()
    set $P120, $P126
    goto if_3218_end
  if_3218:
    set $P3220, param_3217
    unless_null $P3220, vivify_2647
    $P3220 = root_new ['parrot';'Hash']
  vivify_2647:
    set $P123, $P3220["declarator"]
    unless_null $P123, vivify_2648
    new $P123, "Undef"
  vivify_2648:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3218_end:
    $P127 = $P118."!make"($P120)
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "multi_declarator:sym<null>" :anon :subid("478_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3223
    .param pmc param_3224
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2036
    .lex "self", param_3223
    .lex "$/", param_3224
    set $P118, param_3224
    set $P3225, param_3224
    unless_null $P3225, vivify_2649
    $P3225 = root_new ['parrot';'Hash']
  vivify_2649:
    set $P120, $P3225["declarator"]
    unless_null $P120, vivify_2650
    new $P120, "Undef"
  vivify_2650:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "variable_declarator" :anon :subid("479_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3227
    .param pmc param_3228
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2039
    .const 'Sub' $P3263 = "627_1334921493.34" 
    capture_lex $P3263
    .const 'Sub' $P3240 = "626_1334921493.34" 
    capture_lex $P3240
    .lex "self", param_3227
    .lex "$/", param_3228
.annotate 'line', 2040
    new $P118, "Undef"
    set $P3229, $P118
    .lex "$past", $P3229
.annotate 'line', 2041
    new $P120, "Undef"
    set $P3230, $P120
    .lex "$sigil", $P3230
.annotate 'line', 2042
    new $P121, "Undef"
    set $P3231, $P121
    .lex "$name", $P3231
.annotate 'line', 2043
    new $P123, "Undef"
    set $P3232, $P123
    .lex "$BLOCK", $P3232
.annotate 'line', 2040
    set $P3233, param_3228
    unless_null $P3233, vivify_2651
    $P3233 = root_new ['parrot';'Hash']
  vivify_2651:
    set $P124, $P3233["variable"]
    unless_null $P124, vivify_2652
    new $P124, "Undef"
  vivify_2652:
    $P125 = $P124."ast"()
    set $P3229, $P125
.annotate 'line', 2041
    set $P3234, param_3228
    unless_null $P3234, vivify_2653
    $P3234 = root_new ['parrot';'Hash']
  vivify_2653:
    set $P3235, $P3234["variable"]
    unless_null $P3235, vivify_2654
    $P3235 = root_new ['parrot';'Hash']
  vivify_2654:
    set $P124, $P3235["sigil"]
    unless_null $P124, vivify_2655
    new $P124, "Undef"
  vivify_2655:
    set $P3230, $P124
.annotate 'line', 2042
    set $P124, $P3229
    unless_null $P124, vivify_2656
    new $P124, "Undef"
  vivify_2656:
    $P125 = $P124."name"()
    set $P3231, $P125
.annotate 'line', 2043
    find_dynamic_lex $P126, "$*W"
    unless_null $P126, vivify_2657
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$W"]
    unless_null $P126, vivify_2658
    die "Contextual $*W not found"
  vivify_2658:
  vivify_2657:
    $P127 = $P126."cur_lexpad"()
    set $P3232, $P127
.annotate 'line', 2044
    set $P125, $P3231
    unless_null $P125, vivify_2659
    new $P125, "Undef"
  vivify_2659:
    if $P125, if_3237
    set $P124, $P125
    goto if_3237_end
  if_3237:
    set $P126, $P3232
    unless_null $P126, vivify_2660
    new $P126, "Undef"
  vivify_2660:
    set $P127, $P3231
    unless_null $P127, vivify_2661
    new $P127, "Undef"
  vivify_2661:
    $P128 = $P126."symbol"($P127)
    set $P124, $P128
  if_3237_end:
    unless $P124, if_3236_end
.annotate 'line', 2045
    set $P129, param_3228
    unless_null $P129, vivify_2662
    new $P129, "Undef"
  vivify_2662:
    $P131 = $P129."CURSOR"()
    set $P132, $P3231
    unless_null $P132, vivify_2663
    new $P132, "Undef"
  vivify_2663:
    $P131."panic"("Redeclaration of symbol ", $P132)
  if_3236_end:
.annotate 'line', 2047
    find_dynamic_lex $P126, "$*SCOPE"
    unless_null $P126, vivify_2664
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$SCOPE"]
    unless_null $P126, vivify_2665
    die "Contextual $*SCOPE not found"
  vivify_2665:
  vivify_2664:
    set $S100, $P126
    iseq $I100, $S100, "has"
    if $I100, if_3238
.annotate 'line', 2067
    find_dynamic_lex $P129, "$*SCOPE"
    unless_null $P129, vivify_2666
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$SCOPE"]
    unless_null $P129, vivify_2667
    die "Contextual $*SCOPE not found"
  vivify_2667:
  vivify_2666:
    set $S101, $P129
    iseq $I101, $S101, "our"
    if $I101, if_3256
.annotate 'line', 2077
    new $P131, "Float"
    assign $P131, 0
    set $I102, $P131
    set $P3258, $P3232
    unless_null $P3258, vivify_2668
    $P3258 = root_new ['parrot';'ResizablePMCArray']
  vivify_2668:
    set $P133, $P3258[$I102]
    unless_null $P133, vivify_2669
    new $P133, "Undef"
  vivify_2669:
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Var"]
    set $P138, $P3231
    unless_null $P138, vivify_2670
    new $P138, "Undef"
  vivify_2670:
.annotate 'line', 2079
    set $P139, $P3230
    unless_null $P139, vivify_2671
    new $P139, "Undef"
  vivify_2671:
    $P140 = "vivitype"($P139)
.annotate 'line', 2077
    set $P141, param_3228
    unless_null $P141, vivify_2672
    new $P141, "Undef"
  vivify_2672:
    $P142 = $P137."new"($P138 :named("name"), "lexical" :named("scope"), 1 :named("isdecl"), 1 :named("directaccess"), 1 :named("lvalue"), $P140 :named("viviself"), $P141 :named("node"))
    $P133."push"($P142)
.annotate 'line', 2082
    set $P131, $P3232
    unless_null $P131, vivify_2673
    new $P131, "Undef"
  vivify_2673:
    set $P133, $P3231
    unless_null $P133, vivify_2674
    new $P133, "Undef"
  vivify_2674:
    $P131."symbol"($P133, "lexical" :named("scope"))
.annotate 'line', 2076
    goto if_3256_end
  if_3256:
.annotate 'line', 2071
    set $P3257, param_3228
    unless_null $P3257, vivify_2675
    $P3257 = root_new ['parrot';'Hash']
  vivify_2675:
    set $P131, $P3257["variable"]
    unless_null $P131, vivify_2676
    new $P131, "Undef"
  vivify_2676:
    set $S102, $P131
    new $P133, 'String'
    set $P133, $S102
    set $P3231, $P133
.annotate 'line', 2072
    set $P131, $P3231
    unless_null $P131, vivify_2677
    new $P131, "Undef"
  vivify_2677:
    new $P133, "ResizablePMCArray"
    push $P133, $P131
    set $P134, param_3228
    unless_null $P134, vivify_2678
    new $P134, "Undef"
  vivify_2678:
    $P135 = "lexical_package_lookup"($P133, $P134)
    set $P3229, $P135
.annotate 'line', 2073
    set $P131, $P3229
    unless_null $P131, vivify_2679
    new $P131, "Undef"
  vivify_2679:
    set $P133, $P3230
    unless_null $P133, vivify_2680
    new $P133, "Undef"
  vivify_2680:
    $P134 = "vivitype"($P133)
    $P131."viviself"($P134)
.annotate 'line', 2074
    set $P131, $P3232
    unless_null $P131, vivify_2681
    new $P131, "Undef"
  vivify_2681:
    set $P133, $P3231
    unless_null $P133, vivify_2682
    new $P133, "Undef"
  vivify_2682:
    $P131."symbol"($P133, "package" :named("scope"))
  if_3256_end:
.annotate 'line', 2067
    goto if_3238_end
  if_3238:
.annotate 'line', 2047
    .const 'Sub' $P3240 = "626_1334921493.34" 
    capture_lex $P3240
    $P3240()
  if_3238_end:
.annotate 'line', 2086
    set $P124, param_3228
    set $P125, $P3229
    unless_null $P125, vivify_2713
    new $P125, "Undef"
  vivify_2713:
    $P124."!make"($P125)
.annotate 'line', 2088
    set $P3260, param_3228
    unless_null $P3260, vivify_2714
    $P3260 = root_new ['parrot';'Hash']
  vivify_2714:
    set $P125, $P3260["trait"]
    unless_null $P125, vivify_2715
    new $P125, "Undef"
  vivify_2715:
    if $P125, if_3259
    set $P124, $P125
    goto if_3259_end
  if_3259:
.annotate 'line', 2089
    set $P3261, param_3228
    unless_null $P3261, vivify_2716
    $P3261 = root_new ['parrot';'Hash']
  vivify_2716:
    set $P127, $P3261["trait"]
    unless_null $P127, vivify_2717
    new $P127, "Undef"
  vivify_2717:
    defined $I100, $P127
    unless $I100, for_undef_2718
    iter $P126, $P127
    new $P129, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P129, loop3265_handler
    push_eh $P129
  loop3265_test:
    unless $P126, loop3265_done
    shift $P128, $P126
  loop3265_redo:
    .const 'Sub' $P3263 = "627_1334921493.34" 
    capture_lex $P3263
    $P3263($P128)
  loop3265_next:
    goto loop3265_test
  loop3265_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P131, exception, 'type'
    eq $P131, .CONTROL_LOOP_NEXT, loop3265_next
    eq $P131, .CONTROL_LOOP_REDO, loop3265_redo
  loop3265_done:
    pop_eh 
  for_undef_2718:
.annotate 'line', 2088
    set $P124, $P126
  if_3259_end:
.annotate 'line', 2039
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3239"  :anon :subid("626_1334921493.34") :outer("479_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2054
    $P3242 = root_new ['parrot';'Hash']
    set $P3241, $P3242
    .lex "%lit_args", $P3241
.annotate 'line', 2055
    $P3244 = root_new ['parrot';'Hash']
    set $P3243, $P3244
    .lex "%obj_args", $P3243
.annotate 'line', 2049
    find_dynamic_lex $P133, "$*PKGDECL"
    unless_null $P133, vivify_2683
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$PKGDECL"]
    unless_null $P133, vivify_2684
    die "Contextual $*PKGDECL not found"
  vivify_2684:
  vivify_2683:
    concat $P134, $P133, "-attr"
    find_dynamic_lex $P129, "%*HOW"
    unless_null $P129, vivify_2685
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["%HOW"]
    unless_null $P129, vivify_2686
    die "Contextual %*HOW not found"
  vivify_2686:
  vivify_2685:
    exists $I101, $P129[$P134]
    if $I101, unless_3245_end
.annotate 'line', 2050
    find_lex $P135, "$/"
    unless_null $P135, vivify_2687
    new $P135, "Undef"
  vivify_2687:
    $P136 = $P135."CURSOR"()
    find_dynamic_lex $P139, "$*PKGDECL"
    unless_null $P139, vivify_2688
    get_hll_global $P137, "GLOBAL"
    get_who $P138, $P137
    set $P139, $P138["$PKGDECL"]
    unless_null $P139, vivify_2689
    die "Contextual $*PKGDECL not found"
  vivify_2689:
  vivify_2688:
    concat $P140, $P139, " packages do not support attributes"
    $P136."panic"($P140)
  unless_3245_end:
.annotate 'line', 2047
    set $P3246, $P3241
    unless_null $P3246, vivify_2690
    $P3246 = root_new ['parrot';'Hash']
  vivify_2690:
    set $P3247, $P3243
    unless_null $P3247, vivify_2691
    $P3247 = root_new ['parrot';'Hash']
  vivify_2691:
.annotate 'line', 2056
    find_lex $P127, "$name"
    unless_null $P127, vivify_2692
    new $P127, "Undef"
  vivify_2692:
    set $P3248, $P3241
    unless_null $P3248, vivify_2693
    $P3248 = root_new ['parrot';'Hash']
    set $P3241, $P3248
  vivify_2693:
    set $P3248["name"], $P127
.annotate 'line', 2057
    find_lex $P3250, "$/"
    unless_null $P3250, vivify_2694
    $P3250 = root_new ['parrot';'Hash']
  vivify_2694:
    set $P127, $P3250["typename"]
    unless_null $P127, vivify_2695
    new $P127, "Undef"
  vivify_2695:
    unless $P127, if_3249_end
.annotate 'line', 2058
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2696
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2697
    die "Contextual $*W not found"
  vivify_2697:
  vivify_2696:
    new $P132, "Float"
    assign $P132, 0
    set $I101, $P132
    find_lex $P3251, "$/"
    unless_null $P3251, vivify_2698
    $P3251 = root_new ['parrot';'Hash']
  vivify_2698:
    set $P3252, $P3251["typename"]
    unless_null $P3252, vivify_2699
    $P3252 = root_new ['parrot';'ResizablePMCArray']
  vivify_2699:
    set $P133, $P3252[$I101]
    unless_null $P133, vivify_2700
    new $P133, "Undef"
  vivify_2700:
    set $S101, $P133
    new $P134, "ResizablePMCArray"
    push $P134, $S101
    $P135 = $P131."find_sym"($P134)
    set $P3253, $P3243
    unless_null $P3253, vivify_2701
    $P3253 = root_new ['parrot';'Hash']
    set $P3243, $P3253
  vivify_2701:
    set $P3253["type"], $P135
  if_3249_end:
.annotate 'line', 2062
    find_dynamic_lex $P129, "$*W"
    unless_null $P129, vivify_2702
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$W"]
    unless_null $P129, vivify_2703
    die "Contextual $*W not found"
  vivify_2703:
  vivify_2702:
    find_dynamic_lex $P133, "$*PACKAGE"
    unless_null $P133, vivify_2704
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$PACKAGE"]
    unless_null $P133, vivify_2705
    die "Contextual $*PACKAGE not found"
  vivify_2705:
  vivify_2704:
    find_dynamic_lex $P136, "$*PKGDECL"
    unless_null $P136, vivify_2706
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$PKGDECL"]
    unless_null $P136, vivify_2707
    die "Contextual $*PKGDECL not found"
  vivify_2707:
  vivify_2706:
    concat $P137, $P136, "-attr"
    find_dynamic_lex $P140, "%*HOW"
    unless_null $P140, vivify_2708
    get_hll_global $P138, "GLOBAL"
    get_who $P139, $P138
    set $P140, $P139["%HOW"]
    unless_null $P140, vivify_2709
    die "Contextual %*HOW not found"
  vivify_2709:
  vivify_2708:
    set $P141, $P140[$P137]
    unless_null $P141, vivify_2710
    new $P141, "Undef"
  vivify_2710:
    set $P3254, $P3241
    unless_null $P3254, vivify_2711
    $P3254 = root_new ['parrot';'Hash']
  vivify_2711:
    set $P3255, $P3243
    unless_null $P3255, vivify_2712
    $P3255 = root_new ['parrot';'Hash']
  vivify_2712:
    $P129."pkg_add_attribute"($P133, $P141, $P3254, $P3255)
.annotate 'line', 2065
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Stmts"]
    $P132 = $P131."new"()
    store_lex "$past", $P132
.annotate 'line', 2047
    .return ($P132)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3262"  :anon :subid("627_1334921493.34") :outer("479_1334921493.34")
    .param pmc param_3264
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2089
    .lex "$_", param_3264
    find_lex $P129, "$_"
    unless_null $P129, vivify_2719
    new $P129, "Undef"
  vivify_2719:
    $P131 = $P129."ast"()
    find_lex $P132, "$/"
    unless_null $P132, vivify_2720
    new $P132, "Undef"
  vivify_2720:
    $P133 = $P131($P132)
    .return ($P133)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "routine_declarator:sym<sub>" :anon :subid("480_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3267
    .param pmc param_3268
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2094
    .lex "self", param_3267
    .lex "$/", param_3268
    set $P118, param_3268
    set $P3269, param_3268
    unless_null $P3269, vivify_2721
    $P3269 = root_new ['parrot';'Hash']
  vivify_2721:
    set $P120, $P3269["routine_def"]
    unless_null $P120, vivify_2722
    new $P120, "Undef"
  vivify_2722:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "routine_declarator:sym<method>" :anon :subid("481_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3271
    .param pmc param_3272
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2095
    .lex "self", param_3271
    .lex "$/", param_3272
    set $P118, param_3272
    set $P3273, param_3272
    unless_null $P3273, vivify_2723
    $P3273 = root_new ['parrot';'Hash']
  vivify_2723:
    set $P120, $P3273["method_def"]
    unless_null $P120, vivify_2724
    new $P120, "Undef"
  vivify_2724:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "routine_def" :anon :subid("482_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3275
    .param pmc param_3276
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2097
    .const 'Sub' $P3348 = "634_1334921493.34" 
    capture_lex $P3348
    .const 'Sub' $P3286 = "628_1334921493.34" 
    capture_lex $P3286
    .lex "self", param_3275
    .lex "$/", param_3276
.annotate 'line', 2100
    new $P118, "Undef"
    set $P3277, $P118
    .lex "$past", $P3277
.annotate 'line', 2111
    new $P120, "Undef"
    set $P3278, $P120
    .lex "$block", $P3278
.annotate 'line', 2097
    set $P121, $P3277
    unless_null $P121, vivify_2725
    new $P121, "Undef"
  vivify_2725:
.annotate 'line', 2101
    set $P3280, param_3276
    unless_null $P3280, vivify_2726
    $P3280 = root_new ['parrot';'Hash']
  vivify_2726:
    set $P121, $P3280["onlystar"]
    unless_null $P121, vivify_2727
    new $P121, "Undef"
  vivify_2727:
    if $P121, if_3279
.annotate 'line', 2105
    set $P3281, param_3276
    unless_null $P3281, vivify_2728
    $P3281 = root_new ['parrot';'Hash']
  vivify_2728:
    set $P123, $P3281["blockoid"]
    unless_null $P123, vivify_2729
    new $P123, "Undef"
  vivify_2729:
    $P124 = $P123."ast"()
    set $P3277, $P124
.annotate 'line', 2106
    set $P123, $P3277
    unless_null $P123, vivify_2730
    new $P123, "Undef"
  vivify_2730:
    $P123."blocktype"("declaration")
.annotate 'line', 2107
    find_dynamic_lex $P125, "$*RETURN_USED"
    unless_null $P125, vivify_2731
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$RETURN_USED"]
    unless_null $P125, vivify_2732
    die "Contextual $*RETURN_USED not found"
  vivify_2732:
  vivify_2731:
    unless $P125, if_3282_end
.annotate 'line', 2108
    set $P126, $P3277
    unless_null $P126, vivify_2733
    new $P126, "Undef"
  vivify_2733:
    $P126."control"("return_pir")
  if_3282_end:
.annotate 'line', 2104
    goto if_3279_end
  if_3279:
.annotate 'line', 2102
    $P123 = "only_star_block"()
    set $P3277, $P123
  if_3279_end:
.annotate 'line', 2111
    set $P121, $P3277
    unless_null $P121, vivify_2734
    new $P121, "Undef"
  vivify_2734:
    set $P3278, $P121
.annotate 'line', 2113
    set $P3284, param_3276
    unless_null $P3284, vivify_2735
    $P3284 = root_new ['parrot';'Hash']
  vivify_2735:
    set $P121, $P3284["deflongname"]
    unless_null $P121, vivify_2736
    new $P121, "Undef"
  vivify_2736:
    if $P121, if_3283
.annotate 'line', 2216
    find_dynamic_lex $P127, "$*W"
    unless_null $P127, vivify_2737
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$W"]
    unless_null $P127, vivify_2738
    die "Contextual $*W not found"
  vivify_2738:
  vivify_2737:
    $P128 = $P127."is_precompilation_mode"()
    unless $P128, if_3342_end
.annotate 'line', 2217
    find_dynamic_lex $P132, "$*W"
    unless_null $P132, vivify_2739
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$W"]
    unless_null $P132, vivify_2740
    die "Contextual $*W not found"
  vivify_2740:
  vivify_2739:
    set $P133, $P3277
    unless_null $P133, vivify_2741
    new $P133, "Undef"
  vivify_2741:
    $P132."create_code"($P133, "<anon>", 0)
  if_3342_end:
.annotate 'line', 2215
    goto if_3283_end
  if_3283:
.annotate 'line', 2113
    .const 'Sub' $P3286 = "628_1334921493.34" 
    capture_lex $P3286
    $P3286()
  if_3283_end:
.annotate 'line', 2222
    set $P121, $P3278
    unless_null $P121, vivify_2846
    new $P121, "Undef"
  vivify_2846:
    set $P3343, $P3277
    unless_null $P3343, vivify_2847
    $P3343 = root_new ['parrot';'Hash']
    set $P3277, $P3343
  vivify_2847:
    set $P3343["block_past"], $P121
.annotate 'line', 2223
    set $P3345, param_3276
    unless_null $P3345, vivify_2848
    $P3345 = root_new ['parrot';'Hash']
  vivify_2848:
    set $P121, $P3345["trait"]
    unless_null $P121, vivify_2849
    new $P121, "Undef"
  vivify_2849:
    unless $P121, if_3344_end
.annotate 'line', 2224
    set $P3346, param_3276
    unless_null $P3346, vivify_2850
    $P3346 = root_new ['parrot';'Hash']
  vivify_2850:
    set $P124, $P3346["trait"]
    unless_null $P124, vivify_2851
    new $P124, "Undef"
  vivify_2851:
    defined $I100, $P124
    unless $I100, for_undef_2852
    iter $P123, $P124
    new $P126, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P126, loop3350_handler
    push_eh $P126
  loop3350_test:
    unless $P123, loop3350_done
    shift $P125, $P123
  loop3350_redo:
    .const 'Sub' $P3348 = "634_1334921493.34" 
    capture_lex $P3348
    $P3348($P125)
  loop3350_next:
    goto loop3350_test
  loop3350_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P127, exception, 'type'
    eq $P127, .CONTROL_LOOP_NEXT, loop3350_next
    eq $P127, .CONTROL_LOOP_REDO, loop3350_redo
  loop3350_done:
    pop_eh 
  for_undef_2852:
  if_3344_end:
.annotate 'line', 2227
    set $P121, param_3276
    set $P123, $P3277
    unless_null $P123, vivify_2855
    new $P123, "Undef"
  vivify_2855:
    $P124 = $P121."!make"($P123)
.annotate 'line', 2097
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3285"  :anon :subid("628_1334921493.34") :outer("482_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2113
    .const 'Sub' $P3335 = "633_1334921493.34" 
    capture_lex $P3335
    .const 'Sub' $P3328 = "632_1334921493.34" 
    capture_lex $P3328
    .const 'Sub' $P3297 = "629_1334921493.34" 
    capture_lex $P3297
.annotate 'line', 2114
    new $P123, "Undef"
    set $P3287, $P123
    .lex "$name", $P3287
    new $P124, "Float"
    assign $P124, 0
    set $I100, $P124
    find_lex $P3288, "$/"
    unless_null $P3288, vivify_2742
    $P3288 = root_new ['parrot';'Hash']
  vivify_2742:
    set $P3289, $P3288["sigil"]
    unless_null $P3289, vivify_2743
    $P3289 = root_new ['parrot';'ResizablePMCArray']
  vivify_2743:
    set $P125, $P3289[$I100]
    unless_null $P125, vivify_2744
    new $P125, "Undef"
  vivify_2744:
    set $S100, $P125
    new $P126, 'String'
    set $P126, $S100
    new $P127, "Float"
    assign $P127, 0
    set $I101, $P127
    find_lex $P3290, "$/"
    unless_null $P3290, vivify_2745
    $P3290 = root_new ['parrot';'Hash']
  vivify_2745:
    set $P3291, $P3290["deflongname"]
    unless_null $P3291, vivify_2746
    $P3291 = root_new ['parrot';'ResizablePMCArray']
  vivify_2746:
    set $P128, $P3291[$I101]
    unless_null $P128, vivify_2747
    new $P128, "Undef"
  vivify_2747:
    $S101 = $P128."ast"()
    concat $P129, $P126, $S101
    set $P3287, $P129
.annotate 'line', 2115
    find_lex $P124, "$past"
    unless_null $P124, vivify_2748
    new $P124, "Undef"
  vivify_2748:
    set $P125, $P3287
    unless_null $P125, vivify_2749
    new $P125, "Undef"
  vivify_2749:
    $P124."name"($P125)
.annotate 'line', 2116
    find_dynamic_lex $P128, "$*SCOPE"
    unless_null $P128, vivify_2750
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$SCOPE"]
    unless_null $P128, vivify_2751
    die "Contextual $*SCOPE not found"
  vivify_2751:
  vivify_2750:
    set $S100, $P128
    iseq $I100, $S100, ""
    unless $I100, unless_3294
    new $P125, 'Integer'
    set $P125, $I100
    goto unless_3294_end
  unless_3294:
    find_dynamic_lex $P132, "$*SCOPE"
    unless_null $P132, vivify_2752
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$SCOPE"]
    unless_null $P132, vivify_2753
    die "Contextual $*SCOPE not found"
  vivify_2753:
  vivify_2752:
    set $S101, $P132
    iseq $I101, $S101, "my"
    new $P125, 'Integer'
    set $P125, $I101
  unless_3294_end:
    unless $P125, unless_3293
    set $P124, $P125
    goto unless_3293_end
  unless_3293:
    find_dynamic_lex $P135, "$*SCOPE"
    unless_null $P135, vivify_2754
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$SCOPE"]
    unless_null $P135, vivify_2755
    die "Contextual $*SCOPE not found"
  vivify_2755:
  vivify_2754:
    set $S102, $P135
    iseq $I102, $S102, "our"
    new $P124, 'Integer'
    set $P124, $I102
  unless_3293_end:
    if $P124, if_3292
.annotate 'line', 2207
    find_lex $P136, "$/"
    unless_null $P136, vivify_2756
    new $P136, "Undef"
  vivify_2756:
    $P137 = $P136."CURSOR"()
    find_dynamic_lex $P140, "$*SCOPE"
    unless_null $P140, vivify_2757
    get_hll_global $P138, "GLOBAL"
    get_who $P139, $P138
    set $P140, $P139["$SCOPE"]
    unless_null $P140, vivify_2758
    die "Contextual $*SCOPE not found"
  vivify_2758:
  vivify_2757:
    concat $P141, $P140, " scoped routines are not supported yet"
    $P137."panic"($P141)
.annotate 'line', 2206
    goto if_3292_end
  if_3292:
.annotate 'line', 2117
    find_dynamic_lex $P138, "$*MULTINESS"
    unless_null $P138, vivify_2759
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$MULTINESS"]
    unless_null $P138, vivify_2760
    die "Contextual $*MULTINESS not found"
  vivify_2760:
  vivify_2759:
    set $S103, $P138
    iseq $I103, $S103, "multi"
    if $I103, if_3295
.annotate 'line', 2169
    find_dynamic_lex $P143, "$*MULTINESS"
    unless_null $P143, vivify_2761
    get_hll_global $P140, "GLOBAL"
    get_who $P142, $P140
    set $P143, $P142["$MULTINESS"]
    unless_null $P143, vivify_2762
    die "Contextual $*MULTINESS not found"
  vivify_2762:
  vivify_2761:
    set $S104, $P143
    iseq $I104, $S104, "proto"
    if $I104, if_3326
.annotate 'line', 2188
    .const 'Sub' $P3335 = "633_1334921493.34" 
    capture_lex $P3335
    $P3335()
    goto if_3326_end
  if_3326:
.annotate 'line', 2169
    .const 'Sub' $P3328 = "632_1334921493.34" 
    capture_lex $P3328
    $P3328()
  if_3326_end:
    goto if_3295_end
  if_3295:
.annotate 'line', 2117
    .const 'Sub' $P3297 = "629_1334921493.34" 
    capture_lex $P3297
    $P3297()
  if_3295_end:
.annotate 'line', 2204
    get_hll_global $P136, "GLOBAL"
    nqp_get_package_through_who $P137, $P136, "PAST"
    get_who $P138, $P137
    set $P139, $P138["Var"]
    set $P140, $P3287
    unless_null $P140, vivify_2841
    new $P140, "Undef"
  vivify_2841:
    $P141 = $P139."new"($P140 :named("name"))
    store_lex "$past", $P141
  if_3292_end:
.annotate 'line', 2211
    set $P126, $P3287
    unless_null $P126, vivify_2842
    new $P126, "Undef"
  vivify_2842:
    set $S100, $P126
    iseq $I100, $S100, "MAIN"
    if $I100, if_3341
    new $P125, 'Integer'
    set $P125, $I100
    goto if_3341_end
  if_3341:
    find_dynamic_lex $P129, "$*MULTINESS"
    unless_null $P129, vivify_2843
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$MULTINESS"]
    unless_null $P129, vivify_2844
    die "Contextual $*MULTINESS not found"
  vivify_2844:
  vivify_2843:
    set $S101, $P129
    isne $I101, $S101, "multi"
    new $P125, 'Integer'
    set $P125, $I101
  if_3341_end:
    if $P125, if_3340
    set $P124, $P125
    goto if_3340_end
  if_3340:
.annotate 'line', 2212
    find_lex $P131, "$block"
    unless_null $P131, vivify_2845
    new $P131, "Undef"
  vivify_2845:
    store_dynamic_lex "$*MAIN_SUB", $P131
.annotate 'line', 2211
    set $P124, $P131
  if_3340_end:
.annotate 'line', 2113
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3334"  :anon :subid("633_1334921493.34") :outer("628_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2189
    new $P146, "Undef"
    set $P3336, $P146
    .lex "$BLOCK", $P3336
    find_dynamic_lex $P151, "$*W"
    unless_null $P151, vivify_2763
    get_hll_global $P149, "GLOBAL"
    get_who $P150, $P149
    set $P151, $P150["$W"]
    unless_null $P151, vivify_2764
    die "Contextual $*W not found"
  vivify_2764:
  vivify_2763:
    $P152 = $P151."cur_lexpad"()
    set $P3336, $P152
.annotate 'line', 2190
    new $P149, "Float"
    assign $P149, 0
    set $I105, $P149
    set $P3337, $P3336
    unless_null $P3337, vivify_2765
    $P3337 = root_new ['parrot';'ResizablePMCArray']
  vivify_2765:
    set $P150, $P3337[$I105]
    unless_null $P150, vivify_2766
    new $P150, "Undef"
  vivify_2766:
    get_hll_global $P151, "GLOBAL"
    nqp_get_package_through_who $P152, $P151, "PAST"
    get_who $P153, $P152
    set $P154, $P153["Var"]
    find_lex $P155, "$name"
    unless_null $P155, vivify_2767
    new $P155, "Undef"
  vivify_2767:
    find_lex $P156, "$past"
    unless_null $P156, vivify_2768
    new $P156, "Undef"
  vivify_2768:
    $P157 = $P154."new"($P155 :named("name"), 1 :named("isdecl"), 1 :named("directaccess"), $P156 :named("viviself"), "lexical" :named("scope"))
    $P150."push"($P157)
.annotate 'line', 2192
    set $P149, $P3336
    unless_null $P149, vivify_2769
    new $P149, "Undef"
  vivify_2769:
    find_lex $P150, "$name"
    unless_null $P150, vivify_2770
    new $P150, "Undef"
  vivify_2770:
    $P149."symbol"($P150, "lexical" :named("scope"))
.annotate 'line', 2193
    find_dynamic_lex $P152, "$*SCOPE"
    unless_null $P152, vivify_2771
    get_hll_global $P150, "GLOBAL"
    get_who $P151, $P150
    set $P152, $P151["$SCOPE"]
    unless_null $P152, vivify_2772
    die "Contextual $*SCOPE not found"
  vivify_2772:
  vivify_2771:
    set $S105, $P152
    iseq $I105, $S105, "our"
    if $I105, if_3338
    new $P149, 'Integer'
    set $P149, $I105
    goto if_3338_end
  if_3338:
.annotate 'line', 2196
    find_dynamic_lex $P155, "$*W"
    unless_null $P155, vivify_2773
    get_hll_global $P153, "GLOBAL"
    get_who $P154, $P153
    set $P155, $P154["$W"]
    unless_null $P155, vivify_2774
    die "Contextual $*W not found"
  vivify_2774:
  vivify_2773:
    find_dynamic_lex $P158, "$*PACKAGE"
    unless_null $P158, vivify_2775
    get_hll_global $P156, "GLOBAL"
    get_who $P157, $P156
    set $P158, $P157["$PACKAGE"]
    unless_null $P158, vivify_2776
    die "Contextual $*PACKAGE not found"
  vivify_2776:
  vivify_2775:
    find_lex $P159, "$name"
    unless_null $P159, vivify_2777
    new $P159, "Undef"
  vivify_2777:
    find_lex $P160, "$past"
    unless_null $P160, vivify_2778
    new $P160, "Undef"
  vivify_2778:
    $P155."install_package_routine"($P158, $P159, $P160)
.annotate 'line', 2197
    new $P153, "Float"
    assign $P153, 0
    set $I106, $P153
    set $P3339, $P3336
    unless_null $P3339, vivify_2779
    $P3339 = root_new ['parrot';'ResizablePMCArray']
  vivify_2779:
    set $P154, $P3339[$I106]
    unless_null $P154, vivify_2780
    new $P154, "Undef"
  vivify_2780:
    get_hll_global $P155, "GLOBAL"
    nqp_get_package_through_who $P156, $P155, "PAST"
    get_who $P157, $P156
    set $P158, $P157["Op"]
.annotate 'line', 2199
    find_lex $P159, "$name"
    unless_null $P159, vivify_2781
    new $P159, "Undef"
  vivify_2781:
    new $P160, "ResizablePMCArray"
    push $P160, $P159
    find_lex $P161, "$/"
    unless_null $P161, vivify_2782
    new $P161, "Undef"
  vivify_2782:
    $P162 = "lexical_package_lookup"($P160, $P161)
.annotate 'line', 2200
    get_hll_global $P163, "GLOBAL"
    nqp_get_package_through_who $P164, $P163, "PAST"
    get_who $P165, $P164
    set $P166, $P165["Var"]
    find_lex $P167, "$name"
    unless_null $P167, vivify_2783
    new $P167, "Undef"
  vivify_2783:
    $P168 = $P166."new"($P167 :named("name"), "lexical" :named("scope"))
    $P169 = $P158."new"($P162, $P168, "bind_6model" :named("pasttype"))
.annotate 'line', 2197
    $P170 = $P154."push"($P169)
.annotate 'line', 2193
    set $P149, $P170
  if_3338_end:
.annotate 'line', 2188
    .return ($P149)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3327"  :anon :subid("632_1334921493.34") :outer("628_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2174
    new $P144, "Undef"
    set $P3329, $P144
    .lex "$cholder", $P3329
.annotate 'line', 2175
    new $P145, "Undef"
    set $P3330, $P145
    .lex "$BLOCK", $P3330
.annotate 'line', 2173
    find_dynamic_lex $P149, "$*SCOPE"
    unless_null $P149, vivify_2784
    get_hll_global $P146, "GLOBAL"
    get_who $P147, $P146
    set $P149, $P147["$SCOPE"]
    unless_null $P149, vivify_2785
    die "Contextual $*SCOPE not found"
  vivify_2785:
  vivify_2784:
    set $S105, $P149
    iseq $I105, $S105, "our"
    unless $I105, if_3331_end
    die "our-scoped protos not yet implemented"
  if_3331_end:
.annotate 'line', 2174
    get_hll_global $P146, "GLOBAL"
    nqp_get_package_through_who $P147, $P146, "PAST"
    get_who $P149, $P147
    set $P150, $P149["Op"]
    $P151 = $P150."new"("list" :named("pasttype"))
    set $P3329, $P151
.annotate 'line', 2175
    find_dynamic_lex $P149, "$*W"
    unless_null $P149, vivify_2786
    get_hll_global $P146, "GLOBAL"
    get_who $P147, $P146
    set $P149, $P147["$W"]
    unless_null $P149, vivify_2787
    die "Contextual $*W not found"
  vivify_2787:
  vivify_2786:
    $P150 = $P149."cur_lexpad"()
    set $P3330, $P150
.annotate 'line', 2176
    new $P146, "Float"
    assign $P146, 0
    set $I105, $P146
    set $P3332, $P3330
    unless_null $P3332, vivify_2788
    $P3332 = root_new ['parrot';'ResizablePMCArray']
  vivify_2788:
    set $P147, $P3332[$I105]
    unless_null $P147, vivify_2789
    new $P147, "Undef"
  vivify_2789:
    get_hll_global $P149, "GLOBAL"
    nqp_get_package_through_who $P150, $P149, "PAST"
    get_who $P151, $P150
    set $P152, $P151["Var"]
    find_lex $P153, "$name"
    unless_null $P153, vivify_2790
    new $P153, "Undef"
  vivify_2790:
    find_lex $P154, "$past"
    unless_null $P154, vivify_2791
    new $P154, "Undef"
  vivify_2791:
    $P155 = $P152."new"($P153 :named("name"), 1 :named("isdecl"), 1 :named("directaccess"), $P154 :named("viviself"), "lexical" :named("scope"))
    $P147."push"($P155)
.annotate 'line', 2178
    new $P146, "Float"
    assign $P146, 0
    set $I105, $P146
    set $P3333, $P3330
    unless_null $P3333, vivify_2792
    $P3333 = root_new ['parrot';'ResizablePMCArray']
  vivify_2792:
    set $P147, $P3333[$I105]
    unless_null $P147, vivify_2793
    new $P147, "Undef"
  vivify_2793:
    get_hll_global $P149, "GLOBAL"
    nqp_get_package_through_who $P150, $P149, "PAST"
    get_who $P151, $P150
    set $P152, $P151["Op"]
.annotate 'line', 2180
    get_hll_global $P153, "GLOBAL"
    nqp_get_package_through_who $P154, $P153, "PAST"
    get_who $P155, $P154
    set $P156, $P155["Var"]
    find_lex $P157, "$name"
    unless_null $P157, vivify_2794
    new $P157, "Undef"
  vivify_2794:
    $P158 = $P156."new"($P157 :named("name"))
    set $P159, $P3329
    unless_null $P159, vivify_2795
    new $P159, "Undef"
  vivify_2795:
    $P160 = $P152."new"($P158, $P159, "set_dispatchees 0PP" :named("pirop"))
.annotate 'line', 2178
    $P147."push"($P160)
.annotate 'line', 2183
    set $P146, $P3330
    unless_null $P146, vivify_2796
    new $P146, "Undef"
  vivify_2796:
    find_lex $P147, "$name"
    unless_null $P147, vivify_2797
    new $P147, "Undef"
  vivify_2797:
    set $P149, $P3329
    unless_null $P149, vivify_2798
    new $P149, "Undef"
  vivify_2798:
    $P146."symbol"($P147, "lexical" :named("scope"), 1 :named("proto"), $P149 :named("cholder"))
.annotate 'line', 2186
    find_lex $P146, "$past"
    unless_null $P146, vivify_2799
    new $P146, "Undef"
  vivify_2799:
    $P147 = $P146."pirflags"(":instanceof(\"DispatcherSub\")")
.annotate 'line', 2169
    .return ($P147)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3296"  :anon :subid("629_1334921493.34") :outer("628_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2117
    .const 'Sub' $P3306 = "630_1334921493.34" 
    capture_lex $P3306
.annotate 'line', 2120
    new $P139, "Undef"
    set $P3298, $P139
    .lex "$cholder", $P3298
.annotate 'line', 2121
    $P3300 = root_new ['parrot';'Hash']
    set $P3299, $P3300
    .lex "%sym", $P3299
.annotate 'line', 2119
    find_dynamic_lex $P142, "$*SCOPE"
    unless_null $P142, vivify_2800
    get_hll_global $P140, "GLOBAL"
    get_who $P141, $P140
    set $P142, $P141["$SCOPE"]
    unless_null $P142, vivify_2801
    die "Contextual $*SCOPE not found"
  vivify_2801:
  vivify_2800:
    set $S104, $P142
    iseq $I104, $S104, "our"
    unless $I104, if_3301_end
    die "our-scoped multis not yet implemented"
  if_3301_end:
.annotate 'line', 2117
    set $P140, $P3298
    unless_null $P140, vivify_2802
    new $P140, "Undef"
  vivify_2802:
.annotate 'line', 2121
    find_dynamic_lex $P142, "$*W"
    unless_null $P142, vivify_2803
    get_hll_global $P140, "GLOBAL"
    get_who $P141, $P140
    set $P142, $P141["$W"]
    unless_null $P142, vivify_2804
    die "Contextual $*W not found"
  vivify_2804:
  vivify_2803:
    $P143 = $P142."cur_lexpad"()
    find_lex $P144, "$name"
    unless_null $P144, vivify_2805
    new $P144, "Undef"
  vivify_2805:
    $P145 = $P143."symbol"($P144)
    set $P3299, $P145
.annotate 'line', 2122
    set $P3303, $P3299
    unless_null $P3303, vivify_2806
    $P3303 = root_new ['parrot';'Hash']
  vivify_2806:
    set $P140, $P3303["cholder"]
    unless_null $P140, vivify_2807
    new $P140, "Undef"
  vivify_2807:
    if $P140, if_3302
.annotate 'line', 2127
    .const 'Sub' $P3306 = "630_1334921493.34" 
    capture_lex $P3306
    $P3306()
    goto if_3302_end
  if_3302:
.annotate 'line', 2123
    set $P3304, $P3299
    unless_null $P3304, vivify_2836
    $P3304 = root_new ['parrot';'Hash']
  vivify_2836:
    set $P141, $P3304["cholder"]
    unless_null $P141, vivify_2837
    new $P141, "Undef"
  vivify_2837:
    set $P3298, $P141
  if_3302_end:
.annotate 'line', 2164
    set $P140, $P3298
    unless_null $P140, vivify_2838
    new $P140, "Undef"
  vivify_2838:
    find_lex $P141, "$past"
    unless_null $P141, vivify_2839
    new $P141, "Undef"
  vivify_2839:
    $P140."push"($P141)
.annotate 'line', 2167
    find_lex $P140, "$past"
    unless_null $P140, vivify_2840
    new $P140, "Undef"
  vivify_2840:
    $P141 = "attach_multi_signature_to_parrot_sub"($P140)
.annotate 'line', 2117
    .return ($P141)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3305"  :anon :subid("630_1334921493.34") :outer("629_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2127
    .const 'Sub' $P3313 = "631_1334921493.34" 
    capture_lex $P3313
.annotate 'line', 2134
    new $P141, "Undef"
    set $P3307, $P141
    .lex "$found_proto", $P3307
.annotate 'line', 2151
    new $P142, "Undef"
    set $P3308, $P142
    .lex "$BLOCK", $P3308
.annotate 'line', 2153
    new $P143, "Undef"
    set $P3309, $P143
    .lex "$dispatch_setup", $P3309
.annotate 'line', 2129
    find_lex $P3311, "%sym"
    unless_null $P3311, vivify_2808
    $P3311 = root_new ['parrot';'Hash']
  vivify_2808:
    set $P144, $P3311["proto"]
    unless_null $P144, vivify_2809
    new $P144, "Undef"
  vivify_2809:
    unless $P144, if_3310_end
.annotate 'line', 2132
    find_lex $P145, "$/"
    unless_null $P145, vivify_2810
    new $P145, "Undef"
  vivify_2810:
    $P146 = $P145."CURSOR"()
    $P146."panic"("Internal Error: Current scope has a proto, but no candidate list holder was set up. (This should never happen.)")
  if_3310_end:
.annotate 'line', 2127
    set $P144, $P3307
    unless_null $P144, vivify_2811
    new $P144, "Undef"
  vivify_2811:
.annotate 'line', 2135
    find_dynamic_lex $P147, "$*W"
    unless_null $P147, vivify_2812
    get_hll_global $P145, "GLOBAL"
    get_who $P146, $P145
    set $P147, $P146["$W"]
    unless_null $P147, vivify_2813
    die "Contextual $*W not found"
  vivify_2813:
  vivify_2812:
    $P149 = $P147."get_legacy_block_list"()
    defined $I104, $P149
    unless $I104, for_undef_2814
    iter $P144, $P149
    new $P152, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P152, loop3323_handler
    push_eh $P152
  loop3323_test:
    unless $P144, loop3323_done
    shift $P150, $P144
  loop3323_redo:
    .const 'Sub' $P3313 = "631_1334921493.34" 
    capture_lex $P3313
    $P3313($P150)
  loop3323_next:
    goto loop3323_test
  loop3323_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P153, exception, 'type'
    eq $P153, .CONTROL_LOOP_NEXT, loop3323_next
    eq $P153, .CONTROL_LOOP_REDO, loop3323_redo
  loop3323_done:
    pop_eh 
  for_undef_2814:
.annotate 'line', 2146
    set $P144, $P3307
    unless_null $P144, vivify_2823
    new $P144, "Undef"
  vivify_2823:
    if $P144, unless_3324_end
.annotate 'line', 2147
    find_lex $P145, "$/"
    unless_null $P145, vivify_2824
    new $P145, "Undef"
  vivify_2824:
    $P146 = $P145."CURSOR"()
    $P146."panic"("Sorry, no proto sub in scope, and auto-generation of protos is not yet implemented.")
  unless_3324_end:
.annotate 'line', 2151
    find_dynamic_lex $P146, "$*W"
    unless_null $P146, vivify_2825
    get_hll_global $P144, "GLOBAL"
    get_who $P145, $P144
    set $P146, $P145["$W"]
    unless_null $P146, vivify_2826
    die "Contextual $*W not found"
  vivify_2826:
  vivify_2825:
    $P147 = $P146."cur_lexpad"()
    set $P3308, $P147
.annotate 'line', 2152
    get_hll_global $P144, "GLOBAL"
    nqp_get_package_through_who $P145, $P144, "PAST"
    get_who $P146, $P145
    set $P147, $P146["Op"]
    $P149 = $P147."new"("list" :named("pasttype"))
    store_lex "$cholder", $P149
.annotate 'line', 2153
    get_hll_global $P144, "GLOBAL"
    nqp_get_package_through_who $P145, $P144, "PAST"
    get_who $P146, $P145
    set $P147, $P146["Op"]
.annotate 'line', 2155
    get_hll_global $P149, "GLOBAL"
    nqp_get_package_through_who $P150, $P149, "PAST"
    get_who $P151, $P150
    set $P152, $P151["Var"]
    find_lex $P153, "$name"
    unless_null $P153, vivify_2827
    new $P153, "Undef"
  vivify_2827:
    $P154 = $P152."new"($P153 :named("name"), "outer" :named("scope"))
    find_lex $P155, "$cholder"
    unless_null $P155, vivify_2828
    new $P155, "Undef"
  vivify_2828:
    $P156 = $P147."new"($P154, $P155, "create_dispatch_and_add_candidates PPP" :named("pirop"))
.annotate 'line', 2153
    set $P3309, $P156
.annotate 'line', 2158
    new $P144, "Float"
    assign $P144, 0
    set $I104, $P144
    set $P3325, $P3308
    unless_null $P3325, vivify_2829
    $P3325 = root_new ['parrot';'ResizablePMCArray']
  vivify_2829:
    set $P145, $P3325[$I104]
    unless_null $P145, vivify_2830
    new $P145, "Undef"
  vivify_2830:
    get_hll_global $P146, "GLOBAL"
    nqp_get_package_through_who $P147, $P146, "PAST"
    get_who $P149, $P147
    set $P150, $P149["Var"]
    find_lex $P151, "$name"
    unless_null $P151, vivify_2831
    new $P151, "Undef"
  vivify_2831:
    set $P152, $P3309
    unless_null $P152, vivify_2832
    new $P152, "Undef"
  vivify_2832:
    $P153 = $P150."new"($P151 :named("name"), 1 :named("isdecl"), 1 :named("directaccess"), $P152 :named("viviself"), "lexical" :named("scope"))
    $P145."push"($P153)
.annotate 'line', 2160
    set $P144, $P3308
    unless_null $P144, vivify_2833
    new $P144, "Undef"
  vivify_2833:
    find_lex $P145, "$name"
    unless_null $P145, vivify_2834
    new $P145, "Undef"
  vivify_2834:
    find_lex $P146, "$cholder"
    unless_null $P146, vivify_2835
    new $P146, "Undef"
  vivify_2835:
    $P147 = $P144."symbol"($P145, "lexical" :named("scope"), $P146 :named("cholder"))
.annotate 'line', 2127
    .return ($P147)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3312"  :anon :subid("631_1334921493.34") :outer("630_1334921493.34")
    .param pmc param_3316
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2136
    $P3315 = root_new ['parrot';'Hash']
    set $P3314, $P3315
    .lex "%sym", $P3314
    .lex "$_", param_3316
    find_lex $P151, "$_"
    unless_null $P151, vivify_2815
    new $P151, "Undef"
  vivify_2815:
    find_lex $P152, "$name"
    unless_null $P152, vivify_2816
    new $P152, "Undef"
  vivify_2816:
    $P153 = $P151."symbol"($P152)
    set $P3314, $P153
.annotate 'line', 2137
    set $P3319, $P3314
    unless_null $P3319, vivify_2817
    $P3319 = root_new ['parrot';'Hash']
  vivify_2817:
    set $P153, $P3319["proto"]
    unless_null $P153, vivify_2818
    new $P153, "Undef"
  vivify_2818:
    unless $P153, unless_3318
    set $P152, $P153
    goto unless_3318_end
  unless_3318:
    set $P3320, $P3314
    unless_null $P3320, vivify_2819
    $P3320 = root_new ['parrot';'Hash']
  vivify_2819:
    set $P154, $P3320["cholder"]
    unless_null $P154, vivify_2820
    new $P154, "Undef"
  vivify_2820:
    set $P152, $P154
  unless_3318_end:
    if $P152, if_3317
.annotate 'line', 2140
    set $P3322, $P3314
    unless_null $P3322, vivify_2821
    $P3322 = root_new ['parrot';'Hash']
  vivify_2821:
    if $P3322, if_3321
    set $P156, $P3322
    goto if_3321_end
  if_3321:
.annotate 'line', 2141
    find_lex $P157, "$/"
    unless_null $P157, vivify_2822
    new $P157, "Undef"
  vivify_2822:
    $P158 = $P157."CURSOR"()
    $P159 = $P158."panic"("Cannot declare a multi when an only is already in scope.")
.annotate 'line', 2140
    set $P156, $P159
  if_3321_end:
    set $P151, $P156
.annotate 'line', 2137
    goto if_3317_end
  if_3317:
.annotate 'line', 2138
    new $P155, "Float"
    assign $P155, 1
    store_lex "$found_proto", $P155
.annotate 'line', 2137
    set $P151, $P155
  if_3317_end:
.annotate 'line', 2135
    .return ($P151)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3347"  :anon :subid("634_1334921493.34") :outer("482_1334921493.34")
    .param pmc param_3349
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2224
    .lex "$_", param_3349
    find_lex $P126, "$_"
    unless_null $P126, vivify_2853
    new $P126, "Undef"
  vivify_2853:
    $P127 = $P126."ast"()
    find_lex $P128, "$/"
    unless_null $P128, vivify_2854
    new $P128, "Undef"
  vivify_2854:
    $P129 = $P127($P128)
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "method_def" :anon :subid("483_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3352
    .param pmc param_3353
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2231
    .const 'Sub' $P3382 = "636_1334921493.34" 
    capture_lex $P3382
    .const 'Sub' $P3365 = "635_1334921493.34" 
    capture_lex $P3365
    .lex "self", param_3352
    .lex "$/", param_3353
.annotate 'line', 2234
    new $P118, "Undef"
    set $P3354, $P118
    .lex "$past", $P3354
.annotate 'line', 2231
    set $P120, $P3354
    unless_null $P120, vivify_2856
    new $P120, "Undef"
  vivify_2856:
.annotate 'line', 2235
    set $P3356, param_3353
    unless_null $P3356, vivify_2857
    $P3356 = root_new ['parrot';'Hash']
  vivify_2857:
    set $P120, $P3356["onlystar"]
    unless_null $P120, vivify_2858
    new $P120, "Undef"
  vivify_2858:
    if $P120, if_3355
.annotate 'line', 2239
    set $P3357, param_3353
    unless_null $P3357, vivify_2859
    $P3357 = root_new ['parrot';'Hash']
  vivify_2859:
    set $P121, $P3357["blockoid"]
    unless_null $P121, vivify_2860
    new $P121, "Undef"
  vivify_2860:
    $P123 = $P121."ast"()
    set $P3354, $P123
.annotate 'line', 2240
    set $P121, $P3354
    unless_null $P121, vivify_2861
    new $P121, "Undef"
  vivify_2861:
    $P121."blocktype"("declaration")
.annotate 'line', 2241
    find_dynamic_lex $P124, "$*RETURN_USED"
    unless_null $P124, vivify_2862
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$RETURN_USED"]
    unless_null $P124, vivify_2863
    die "Contextual $*RETURN_USED not found"
  vivify_2863:
  vivify_2862:
    unless $P124, if_3358_end
.annotate 'line', 2242
    set $P125, $P3354
    unless_null $P125, vivify_2864
    new $P125, "Undef"
  vivify_2864:
    $P125."control"("return_pir")
  if_3358_end:
.annotate 'line', 2238
    goto if_3355_end
  if_3355:
.annotate 'line', 2236
    $P121 = "only_star_block"()
    set $P3354, $P121
  if_3355_end:
.annotate 'line', 2247
    set $P3360, $P3354
    unless_null $P3360, vivify_2865
    $P3360 = root_new ['parrot';'Hash']
  vivify_2865:
    set $P120, $P3360["signature_has_invocant"]
    unless_null $P120, vivify_2866
    new $P120, "Undef"
  vivify_2866:
    if $P120, unless_3359_end
.annotate 'line', 2248
    new $P121, "Float"
    assign $P121, 0
    set $I100, $P121
    set $P3361, $P3354
    unless_null $P3361, vivify_2867
    $P3361 = root_new ['parrot';'ResizablePMCArray']
  vivify_2867:
    set $P123, $P3361[$I100]
    unless_null $P123, vivify_2868
    new $P123, "Undef"
  vivify_2868:
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Var"]
.annotate 'line', 2250
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2869
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2870
    die "Contextual $*W not found"
  vivify_2870:
  vivify_2869:
    find_dynamic_lex $P134, "$*PACKAGE"
    unless_null $P134, vivify_2871
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$PACKAGE"]
    unless_null $P134, vivify_2872
    die "Contextual $*PACKAGE not found"
  vivify_2872:
  vivify_2871:
    $P135 = $P131."get_ref"($P134)
.annotate 'line', 2248
    $P136 = $P127."new"("self" :named("name"), "parameter" :named("scope"), 1 :named("directaccess"), $P135 :named("multitype"))
    $P123."unshift"($P136)
  unless_3359_end:
.annotate 'line', 2253
    set $P120, $P3354
    unless_null $P120, vivify_2873
    new $P120, "Undef"
  vivify_2873:
    $P120."symbol"("self", "lexical" :named("scope"))
.annotate 'line', 2256
    set $P3363, param_3353
    unless_null $P3363, vivify_2874
    $P3363 = root_new ['parrot';'Hash']
  vivify_2874:
    set $P120, $P3363["deflongname"]
    unless_null $P120, vivify_2875
    new $P120, "Undef"
  vivify_2875:
    unless $P120, if_3362_end
    .const 'Sub' $P3365 = "635_1334921493.34" 
    capture_lex $P3365
    $P3365()
  if_3362_end:
.annotate 'line', 2281
    set $P120, param_3353
    set $P121, $P3354
    unless_null $P121, vivify_2915
    new $P121, "Undef"
  vivify_2915:
    $P120."!make"($P121)
.annotate 'line', 2282
    set $P120, $P3354
    unless_null $P120, vivify_2916
    new $P120, "Undef"
  vivify_2916:
    set $P3377, $P3354
    unless_null $P3377, vivify_2917
    $P3377 = root_new ['parrot';'Hash']
    set $P3354, $P3377
  vivify_2917:
    set $P3377["block_past"], $P120
.annotate 'line', 2283
    set $P3379, param_3353
    unless_null $P3379, vivify_2918
    $P3379 = root_new ['parrot';'Hash']
  vivify_2918:
    set $P121, $P3379["trait"]
    unless_null $P121, vivify_2919
    new $P121, "Undef"
  vivify_2919:
    if $P121, if_3378
    set $P120, $P121
    goto if_3378_end
  if_3378:
.annotate 'line', 2284
    set $P3380, param_3353
    unless_null $P3380, vivify_2920
    $P3380 = root_new ['parrot';'Hash']
  vivify_2920:
    set $P124, $P3380["trait"]
    unless_null $P124, vivify_2921
    new $P124, "Undef"
  vivify_2921:
    defined $I100, $P124
    unless $I100, for_undef_2922
    iter $P123, $P124
    new $P126, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P126, loop3384_handler
    push_eh $P126
  loop3384_test:
    unless $P123, loop3384_done
    shift $P125, $P123
  loop3384_redo:
    .const 'Sub' $P3382 = "636_1334921493.34" 
    capture_lex $P3382
    $P3382($P125)
  loop3384_next:
    goto loop3384_test
  loop3384_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P127, exception, 'type'
    eq $P127, .CONTROL_LOOP_NEXT, loop3384_next
    eq $P127, .CONTROL_LOOP_REDO, loop3384_redo
  loop3384_done:
    pop_eh 
  for_undef_2922:
.annotate 'line', 2283
    set $P120, $P123
  if_3378_end:
.annotate 'line', 2231
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3364"  :anon :subid("635_1334921493.34") :outer("483_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2258
    new $P121, "Undef"
    set $P3366, $P121
    .lex "$name", $P3366
.annotate 'line', 2262
    new $P123, "Undef"
    set $P3367, $P123
    .lex "$meta_meth", $P3367
.annotate 'line', 2263
    new $P124, "Undef"
    set $P3368, $P124
    .lex "$is_dispatcher", $P3368
.annotate 'line', 2264
    new $P125, "Undef"
    set $P3369, $P125
    .lex "$code", $P3369
.annotate 'line', 2258
    find_lex $P3370, "$/"
    unless_null $P3370, vivify_2876
    $P3370 = root_new ['parrot';'Hash']
  vivify_2876:
    set $P126, $P3370["private"]
    unless_null $P126, vivify_2877
    new $P126, "Undef"
  vivify_2877:
    set $S100, $P126
    new $P127, 'String'
    set $P127, $S100
    new $P128, "Float"
    assign $P128, 0
    set $I100, $P128
    find_lex $P3371, "$/"
    unless_null $P3371, vivify_2878
    $P3371 = root_new ['parrot';'Hash']
  vivify_2878:
    set $P3372, $P3371["deflongname"]
    unless_null $P3372, vivify_2879
    $P3372 = root_new ['parrot';'ResizablePMCArray']
  vivify_2879:
    set $P129, $P3372[$I100]
    unless_null $P129, vivify_2880
    new $P129, "Undef"
  vivify_2880:
    $P131 = $P129."ast"()
    set $S101, $P131
    concat $P132, $P127, $S101
    set $P3366, $P132
.annotate 'line', 2259
    find_lex $P126, "$past"
    unless_null $P126, vivify_2881
    new $P126, "Undef"
  vivify_2881:
    set $P127, $P3366
    unless_null $P127, vivify_2882
    new $P127, "Undef"
  vivify_2882:
    $P126."name"($P127)
.annotate 'line', 2262
    find_dynamic_lex $P129, "$*MULTINESS"
    unless_null $P129, vivify_2883
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$MULTINESS"]
    unless_null $P129, vivify_2884
    die "Contextual $*MULTINESS not found"
  vivify_2884:
  vivify_2883:
    set $S100, $P129
    iseq $I100, $S100, "multi"
    if $I100, if_3373
    new $P132, "String"
    assign $P132, "add_method"
    set $P126, $P132
    goto if_3373_end
  if_3373:
    new $P131, "String"
    assign $P131, "add_multi_method"
    set $P126, $P131
  if_3373_end:
    set $P3367, $P126
.annotate 'line', 2263
    find_dynamic_lex $P128, "$*MULTINESS"
    unless_null $P128, vivify_2885
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$MULTINESS"]
    unless_null $P128, vivify_2886
    die "Contextual $*MULTINESS not found"
  vivify_2886:
  vivify_2885:
    set $S100, $P128
    iseq $I100, $S100, "proto"
    new $P129, 'Integer'
    set $P129, $I100
    set $P3368, $P129
.annotate 'line', 2264
    find_dynamic_lex $P128, "$*W"
    unless_null $P128, vivify_2887
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$W"]
    unless_null $P128, vivify_2888
    die "Contextual $*W not found"
  vivify_2888:
  vivify_2887:
    find_lex $P129, "$past"
    unless_null $P129, vivify_2889
    new $P129, "Undef"
  vivify_2889:
    set $P131, $P3366
    unless_null $P131, vivify_2890
    new $P131, "Undef"
  vivify_2890:
    set $P132, $P3368
    unless_null $P132, vivify_2891
    new $P132, "Undef"
  vivify_2891:
    $P133 = $P128."create_code"($P129, $P131, $P132)
    set $P3369, $P133
.annotate 'line', 2265
    find_dynamic_lex $P128, "$*MULTINESS"
    unless_null $P128, vivify_2892
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$MULTINESS"]
    unless_null $P128, vivify_2893
    die "Contextual $*MULTINESS not found"
  vivify_2893:
  vivify_2892:
    set $S100, $P128
    iseq $I100, $S100, "multi"
    unless $I100, if_3374_end
    set $P129, $P3369
    unless_null $P129, vivify_2894
    new $P129, "Undef"
  vivify_2894:
    find_lex $P131, "$past"
    unless_null $P131, vivify_2895
    new $P131, "Undef"
  vivify_2895:
    "attach_multi_signature"($P129, $P131)
  if_3374_end:
.annotate 'line', 2266
    find_dynamic_lex $P128, "$*W"
    unless_null $P128, vivify_2896
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$W"]
    unless_null $P128, vivify_2897
    die "Contextual $*W not found"
  vivify_2897:
  vivify_2896:
    find_dynamic_lex $P132, "$*PACKAGE"
    unless_null $P132, vivify_2898
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$PACKAGE"]
    unless_null $P132, vivify_2899
    die "Contextual $*PACKAGE not found"
  vivify_2899:
  vivify_2898:
    set $P133, $P3367
    unless_null $P133, vivify_2900
    new $P133, "Undef"
  vivify_2900:
    set $P134, $P3366
    unless_null $P134, vivify_2901
    new $P134, "Undef"
  vivify_2901:
    set $P135, $P3369
    unless_null $P135, vivify_2902
    new $P135, "Undef"
  vivify_2902:
    $P128."pkg_add_method"($P132, $P133, $P134, $P135)
.annotate 'line', 2269
    find_dynamic_lex $P129, "$*SCOPE"
    unless_null $P129, vivify_2903
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$SCOPE"]
    unless_null $P129, vivify_2904
    die "Contextual $*SCOPE not found"
  vivify_2904:
  vivify_2903:
    set $S100, $P129
    iseq $I100, $S100, "our"
    if $I100, if_3375
.annotate 'line', 2272
    find_lex $P132, "$past"
    unless_null $P132, vivify_2905
    new $P132, "Undef"
  vivify_2905:
    $P133 = $P132."pirflags"()
    if $P133, if_3376
.annotate 'line', 2275
    find_lex $P134, "$past"
    unless_null $P134, vivify_2906
    new $P134, "Undef"
  vivify_2906:
    $P135 = $P134."pirflags"(":anon")
.annotate 'line', 2274
    set $P131, $P135
.annotate 'line', 2272
    goto if_3376_end
  if_3376:
.annotate 'line', 2273
    find_lex $P134, "$past"
    unless_null $P134, vivify_2907
    new $P134, "Undef"
  vivify_2907:
    find_lex $P135, "$past"
    unless_null $P135, vivify_2908
    new $P135, "Undef"
  vivify_2908:
    $P136 = $P135."pirflags"()
    set $S101, $P136
    new $P137, 'String'
    set $P137, $S101
    concat $P138, $P137, ":anon"
    $P140 = $P134."pirflags"($P138)
.annotate 'line', 2272
    set $P131, $P140
  if_3376_end:
.annotate 'line', 2271
    set $P126, $P131
.annotate 'line', 2269
    goto if_3375_end
  if_3375:
.annotate 'line', 2270
    find_dynamic_lex $P133, "$*W"
    unless_null $P133, vivify_2909
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$W"]
    unless_null $P133, vivify_2910
    die "Contextual $*W not found"
  vivify_2910:
  vivify_2909:
    find_dynamic_lex $P136, "$*PACKAGE"
    unless_null $P136, vivify_2911
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$PACKAGE"]
    unless_null $P136, vivify_2912
    die "Contextual $*PACKAGE not found"
  vivify_2912:
  vivify_2911:
    set $P137, $P3366
    unless_null $P137, vivify_2913
    new $P137, "Undef"
  vivify_2913:
    find_lex $P138, "$past"
    unless_null $P138, vivify_2914
    new $P138, "Undef"
  vivify_2914:
    $P139 = $P133."install_package_routine"($P136, $P137, $P138)
.annotate 'line', 2269
    set $P126, $P139
  if_3375_end:
.annotate 'line', 2256
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3381"  :anon :subid("636_1334921493.34") :outer("483_1334921493.34")
    .param pmc param_3383
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2284
    .lex "$_", param_3383
    find_lex $P126, "$_"
    unless_null $P126, vivify_2923
    new $P126, "Undef"
  vivify_2923:
    $P127 = $P126."ast"()
    find_lex $P128, "$/"
    unless_null $P128, vivify_2924
    new $P128, "Undef"
  vivify_2924:
    $P129 = $P127($P128)
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "signature" :anon :subid("484_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3386
    .param pmc param_3387
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2326
    .const 'Sub' $P3401 = "638_1334921493.34" 
    capture_lex $P3401
    .const 'Sub' $P3394 = "637_1334921493.34" 
    capture_lex $P3394
    .lex "self", param_3386
    .lex "$/", param_3387
.annotate 'line', 2327
    new $P118, "Undef"
    set $P3388, $P118
    .lex "$BLOCK", $P3388
.annotate 'line', 2328
    new $P120, "Undef"
    set $P3389, $P120
    .lex "$BLOCKINIT", $P3389
.annotate 'line', 2327
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_2925
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_2926
    die "Contextual $*W not found"
  vivify_2926:
  vivify_2925:
    $P125 = $P124."cur_lexpad"()
    set $P3388, $P125
.annotate 'line', 2328
    new $P121, "Float"
    assign $P121, 0
    set $I100, $P121
    set $P3390, $P3388
    unless_null $P3390, vivify_2927
    $P3390 = root_new ['parrot';'ResizablePMCArray']
  vivify_2927:
    set $P123, $P3390[$I100]
    unless_null $P123, vivify_2928
    new $P123, "Undef"
  vivify_2928:
    set $P3389, $P123
.annotate 'line', 2329
    set $P3392, param_3387
    unless_null $P3392, vivify_2929
    $P3392 = root_new ['parrot';'Hash']
  vivify_2929:
    set $P121, $P3392["invocant"]
    unless_null $P121, vivify_2930
    new $P121, "Undef"
  vivify_2930:
    unless $P121, if_3391_end
    .const 'Sub' $P3394 = "637_1334921493.34" 
    capture_lex $P3394
    $P3394()
  if_3391_end:
.annotate 'line', 2338
    set $P3399, param_3387
    unless_null $P3399, vivify_2939
    $P3399 = root_new ['parrot';'Hash']
  vivify_2939:
    set $P123, $P3399["parameter"]
    unless_null $P123, vivify_2940
    new $P123, "Undef"
  vivify_2940:
    defined $I100, $P123
    unless $I100, for_undef_2941
    iter $P121, $P123
    new $P125, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P125, loop3403_handler
    push_eh $P125
  loop3403_test:
    unless $P121, loop3403_done
    shift $P124, $P121
  loop3403_redo:
    .const 'Sub' $P3401 = "638_1334921493.34" 
    capture_lex $P3401
    $P3401($P124)
  loop3403_next:
    goto loop3403_test
  loop3403_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P126, exception, 'type'
    eq $P126, .CONTROL_LOOP_NEXT, loop3403_next
    eq $P126, .CONTROL_LOOP_REDO, loop3403_redo
  loop3403_done:
    pop_eh 
  for_undef_2941:
.annotate 'line', 2326
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3393"  :anon :subid("637_1334921493.34") :outer("484_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2330
    new $P123, "Undef"
    set $P3395, $P123
    .lex "$inv", $P3395
    new $P124, "Float"
    assign $P124, 0
    set $I100, $P124
    find_lex $P3396, "$/"
    unless_null $P3396, vivify_2931
    $P3396 = root_new ['parrot';'Hash']
  vivify_2931:
    set $P3397, $P3396["invocant"]
    unless_null $P3397, vivify_2932
    $P3397 = root_new ['parrot';'ResizablePMCArray']
  vivify_2932:
    set $P125, $P3397[$I100]
    unless_null $P125, vivify_2933
    new $P125, "Undef"
  vivify_2933:
    $P126 = $P125."ast"()
    set $P3395, $P126
.annotate 'line', 2331
    find_lex $P124, "$BLOCKINIT"
    unless_null $P124, vivify_2934
    new $P124, "Undef"
  vivify_2934:
    set $P125, $P3395
    unless_null $P125, vivify_2935
    new $P125, "Undef"
  vivify_2935:
    $P124."push"($P125)
.annotate 'line', 2332
    find_lex $P124, "$BLOCKINIT"
    unless_null $P124, vivify_2936
    new $P124, "Undef"
  vivify_2936:
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
.annotate 'line', 2334
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Var"]
    set $P134, $P3395
    unless_null $P134, vivify_2937
    new $P134, "Undef"
  vivify_2937:
    $P135 = $P134."name"()
    $P136 = $P133."new"("lexical" :named("scope"), $P135 :named("name"))
.annotate 'line', 2332
    $P137 = $P128."new"("self" :named("name"), "lexical" :named("scope"), 1 :named("isdecl"), 1 :named("directaccess"), $P136 :named("viviself"))
    $P124."push"($P137)
.annotate 'line', 2336
    new $P124, "Float"
    assign $P124, 1
    find_lex $P3398, "$BLOCK"
    unless_null $P3398, vivify_2938
    $P3398 = root_new ['parrot';'Hash']
    store_lex "$BLOCK", $P3398
  vivify_2938:
    set $P3398["signature_has_invocant"], $P124
.annotate 'line', 2329
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3400"  :anon :subid("638_1334921493.34") :outer("484_1334921493.34")
    .param pmc param_3402
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2338
    .lex "$_", param_3402
    find_lex $P125, "$BLOCKINIT"
    unless_null $P125, vivify_2942
    new $P125, "Undef"
  vivify_2942:
    find_lex $P126, "$_"
    unless_null $P126, vivify_2943
    new $P126, "Undef"
  vivify_2943:
    $P127 = $P126."ast"()
    $P128 = $P125."push"($P127)
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "parameter" :anon :subid("485_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3405
    .param pmc param_3406
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2341
    .lex "self", param_3405
    .lex "$/", param_3406
.annotate 'line', 2342
    new $P118, "Undef"
    set $P3407, $P118
    .lex "$quant", $P3407
.annotate 'line', 2343
    new $P120, "Undef"
    set $P3408, $P120
    .lex "$past", $P3408
.annotate 'line', 2342
    set $P3409, param_3406
    unless_null $P3409, vivify_2944
    $P3409 = root_new ['parrot';'Hash']
  vivify_2944:
    set $P121, $P3409["quant"]
    unless_null $P121, vivify_2945
    new $P121, "Undef"
  vivify_2945:
    set $P3407, $P121
.annotate 'line', 2341
    set $P121, $P3408
    unless_null $P121, vivify_2946
    new $P121, "Undef"
  vivify_2946:
.annotate 'line', 2344
    set $P3411, param_3406
    unless_null $P3411, vivify_2947
    $P3411 = root_new ['parrot';'Hash']
  vivify_2947:
    set $P121, $P3411["named_param"]
    unless_null $P121, vivify_2948
    new $P121, "Undef"
  vivify_2948:
    if $P121, if_3410
.annotate 'line', 2351
    set $P3417, param_3406
    unless_null $P3417, vivify_2949
    $P3417 = root_new ['parrot';'Hash']
  vivify_2949:
    set $P123, $P3417["param_var"]
    unless_null $P123, vivify_2950
    new $P123, "Undef"
  vivify_2950:
    $P124 = $P123."ast"()
    set $P3408, $P124
.annotate 'line', 2352
    set $P123, $P3407
    unless_null $P123, vivify_2951
    new $P123, "Undef"
  vivify_2951:
    set $S100, $P123
    iseq $I100, $S100, "*"
    if $I100, if_3418
.annotate 'line', 2356
    set $P124, $P3407
    unless_null $P124, vivify_2952
    new $P124, "Undef"
  vivify_2952:
    set $S101, $P124
    iseq $I101, $S101, "?"
    unless $I101, if_3421_end
.annotate 'line', 2357
    set $P125, $P3408
    unless_null $P125, vivify_2953
    new $P125, "Undef"
  vivify_2953:
    set $P3422, param_3406
    unless_null $P3422, vivify_2954
    $P3422 = root_new ['parrot';'Hash']
  vivify_2954:
    set $P3423, $P3422["param_var"]
    unless_null $P3423, vivify_2955
    $P3423 = root_new ['parrot';'Hash']
  vivify_2955:
    set $P126, $P3423["sigil"]
    unless_null $P126, vivify_2956
    new $P126, "Undef"
  vivify_2956:
    $P127 = "vivitype"($P126)
    $P125."viviself"($P127)
  if_3421_end:
.annotate 'line', 2356
    goto if_3418_end
  if_3418:
.annotate 'line', 2353
    set $P124, $P3408
    unless_null $P124, vivify_2957
    new $P124, "Undef"
  vivify_2957:
    $P124."slurpy"(1)
.annotate 'line', 2354
    set $P124, $P3408
    unless_null $P124, vivify_2958
    new $P124, "Undef"
  vivify_2958:
    set $P3419, param_3406
    unless_null $P3419, vivify_2959
    $P3419 = root_new ['parrot';'Hash']
  vivify_2959:
    set $P3420, $P3419["param_var"]
    unless_null $P3420, vivify_2960
    $P3420 = root_new ['parrot';'Hash']
  vivify_2960:
    set $P125, $P3420["sigil"]
    unless_null $P125, vivify_2961
    new $P125, "Undef"
  vivify_2961:
    set $S101, $P125
    iseq $I101, $S101, "%"
    $P124."named"($I101)
  if_3418_end:
.annotate 'line', 2350
    goto if_3410_end
  if_3410:
.annotate 'line', 2345
    set $P3412, param_3406
    unless_null $P3412, vivify_2962
    $P3412 = root_new ['parrot';'Hash']
  vivify_2962:
    set $P123, $P3412["named_param"]
    unless_null $P123, vivify_2963
    new $P123, "Undef"
  vivify_2963:
    $P124 = $P123."ast"()
    set $P3408, $P124
.annotate 'line', 2346
    set $P123, $P3407
    unless_null $P123, vivify_2964
    new $P123, "Undef"
  vivify_2964:
    set $S100, $P123
    isne $I100, $S100, "!"
    unless $I100, if_3413_end
.annotate 'line', 2347
    set $P124, $P3408
    unless_null $P124, vivify_2965
    new $P124, "Undef"
  vivify_2965:
    set $P3414, param_3406
    unless_null $P3414, vivify_2966
    $P3414 = root_new ['parrot';'Hash']
  vivify_2966:
    set $P3415, $P3414["named_param"]
    unless_null $P3415, vivify_2967
    $P3415 = root_new ['parrot';'Hash']
  vivify_2967:
    set $P3416, $P3415["param_var"]
    unless_null $P3416, vivify_2968
    $P3416 = root_new ['parrot';'Hash']
  vivify_2968:
    set $P125, $P3416["sigil"]
    unless_null $P125, vivify_2969
    new $P125, "Undef"
  vivify_2969:
    $P126 = "vivitype"($P125)
    $P124."viviself"($P126)
  if_3413_end:
  if_3410_end:
.annotate 'line', 2360
    set $P3425, param_3406
    unless_null $P3425, vivify_2970
    $P3425 = root_new ['parrot';'Hash']
  vivify_2970:
    set $P121, $P3425["default_value"]
    unless_null $P121, vivify_2971
    new $P121, "Undef"
  vivify_2971:
    unless $P121, if_3424_end
.annotate 'line', 2361
    set $P123, $P3407
    unless_null $P123, vivify_2972
    new $P123, "Undef"
  vivify_2972:
    set $S100, $P123
    iseq $I100, $S100, "*"
    unless $I100, if_3426_end
.annotate 'line', 2362
    set $P124, param_3406
    unless_null $P124, vivify_2973
    new $P124, "Undef"
  vivify_2973:
    $P125 = $P124."CURSOR"()
    $P125."panic"("Can't put default on slurpy parameter")
  if_3426_end:
.annotate 'line', 2364
    set $P123, $P3407
    unless_null $P123, vivify_2974
    new $P123, "Undef"
  vivify_2974:
    set $S100, $P123
    iseq $I100, $S100, "!"
    unless $I100, if_3427_end
.annotate 'line', 2365
    set $P124, param_3406
    unless_null $P124, vivify_2975
    new $P124, "Undef"
  vivify_2975:
    $P125 = $P124."CURSOR"()
    $P125."panic"("Can't put default on required parameter")
  if_3427_end:
.annotate 'line', 2367
    set $P123, $P3408
    unless_null $P123, vivify_2976
    new $P123, "Undef"
  vivify_2976:
    new $P124, "Float"
    assign $P124, 0
    set $I100, $P124
    set $P3428, param_3406
    unless_null $P3428, vivify_2977
    $P3428 = root_new ['parrot';'Hash']
  vivify_2977:
    set $P3429, $P3428["default_value"]
    unless_null $P3429, vivify_2978
    $P3429 = root_new ['parrot';'ResizablePMCArray']
  vivify_2978:
    set $P3430, $P3429[$I100]
    unless_null $P3430, vivify_2979
    $P3430 = root_new ['parrot';'Hash']
  vivify_2979:
    set $P125, $P3430["EXPR"]
    unless_null $P125, vivify_2980
    new $P125, "Undef"
  vivify_2980:
    $P126 = $P125."ast"()
    $P123."viviself"($P126)
  if_3424_end:
.annotate 'line', 2369
    set $P121, $P3408
    unless_null $P121, vivify_2981
    new $P121, "Undef"
  vivify_2981:
    $P123 = $P121."viviself"()
    if $P123, unless_3431_end
    find_dynamic_lex $P126, "$*W"
    unless_null $P126, vivify_2982
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$W"]
    unless_null $P126, vivify_2983
    die "Contextual $*W not found"
  vivify_2983:
  vivify_2982:
    $P127 = $P126."cur_lexpad"()
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2984
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2985
    die "Contextual $*W not found"
  vivify_2985:
  vivify_2984:
    $P132 = $P131."cur_lexpad"()
    $P133 = $P132."arity"()
    set $N100, $P133
    new $P134, 'Float'
    set $P134, $N100
    add $P135, $P134, 1
    $P127."arity"($P135)
  unless_3431_end:
.annotate 'line', 2373
    set $P3433, param_3406
    unless_null $P3433, vivify_2986
    $P3433 = root_new ['parrot';'Hash']
  vivify_2986:
    set $P121, $P3433["typename"]
    unless_null $P121, vivify_2987
    new $P121, "Undef"
  vivify_2987:
    unless $P121, if_3432_end
.annotate 'line', 2374
    set $P123, $P3408
    unless_null $P123, vivify_2988
    new $P123, "Undef"
  vivify_2988:
    new $P124, "Float"
    assign $P124, 0
    set $I100, $P124
    set $P3434, param_3406
    unless_null $P3434, vivify_2989
    $P3434 = root_new ['parrot';'Hash']
  vivify_2989:
    set $P3435, $P3434["typename"]
    unless_null $P3435, vivify_2990
    $P3435 = root_new ['parrot';'ResizablePMCArray']
  vivify_2990:
    set $P125, $P3435[$I100]
    unless_null $P125, vivify_2991
    new $P125, "Undef"
  vivify_2991:
    $P126 = $P125."ast"()
    $P123."multitype"($P126)
  if_3432_end:
.annotate 'line', 2378
    set $P3437, param_3406
    unless_null $P3437, vivify_2992
    $P3437 = root_new ['parrot';'Hash']
  vivify_2992:
    set $P121, $P3437["definedness"]
    unless_null $P121, vivify_2993
    new $P121, "Undef"
  vivify_2993:
    unless $P121, if_3436_end
.annotate 'line', 2379
    new $P123, "Float"
    assign $P123, 0
    set $I100, $P123
    set $P3438, param_3406
    unless_null $P3438, vivify_2994
    $P3438 = root_new ['parrot';'Hash']
  vivify_2994:
    set $P3439, $P3438["definedness"]
    unless_null $P3439, vivify_2995
    $P3439 = root_new ['parrot';'ResizablePMCArray']
  vivify_2995:
    set $P124, $P3439[$I100]
    unless_null $P124, vivify_2996
    new $P124, "Undef"
  vivify_2996:
    set $S100, $P124
    new $P125, 'String'
    set $P125, $S100
    set $P3440, $P3408
    unless_null $P3440, vivify_2997
    $P3440 = root_new ['parrot';'Hash']
    set $P3408, $P3440
  vivify_2997:
    set $P3440["definedness"], $P125
  if_3436_end:
.annotate 'line', 2382
    set $P121, param_3406
    set $P123, $P3408
    unless_null $P123, vivify_2998
    new $P123, "Undef"
  vivify_2998:
    $P124 = $P121."!make"($P123)
.annotate 'line', 2341
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "param_var" :anon :subid("486_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3442
    .param pmc param_3443
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2385
    .lex "self", param_3442
    .lex "$/", param_3443
.annotate 'line', 2386
    new $P118, "Undef"
    set $P3444, $P118
    .lex "$name", $P3444
.annotate 'line', 2387
    new $P120, "Undef"
    set $P3445, $P120
    .lex "$past", $P3445
.annotate 'line', 2386
    set $P121, param_3443
    unless_null $P121, vivify_2999
    new $P121, "Undef"
  vivify_2999:
    set $S100, $P121
    new $P123, 'String'
    set $P123, $S100
    set $P3444, $P123
.annotate 'line', 2387
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Var"]
    set $P126, $P3444
    unless_null $P126, vivify_3000
    new $P126, "Undef"
  vivify_3000:
    set $P127, param_3443
    unless_null $P127, vivify_3001
    new $P127, "Undef"
  vivify_3001:
    $P128 = $P125."new"($P126 :named("name"), "parameter" :named("scope"), 1 :named("isdecl"), 1 :named("directaccess"), $P127 :named("node"))
    set $P3445, $P128
.annotate 'line', 2389
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_3002
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_3003
    die "Contextual $*W not found"
  vivify_3003:
  vivify_3002:
    $P125 = $P124."cur_lexpad"()
    set $P126, $P3444
    unless_null $P126, vivify_3004
    new $P126, "Undef"
  vivify_3004:
    $P125."symbol"($P126, "lexical" :named("scope"))
.annotate 'line', 2390
    set $P121, param_3443
    set $P123, $P3445
    unless_null $P123, vivify_3005
    new $P123, "Undef"
  vivify_3005:
    $P124 = $P121."!make"($P123)
.annotate 'line', 2385
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "named_param" :anon :subid("487_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3447
    .param pmc param_3448
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2393
    .lex "self", param_3447
    .lex "$/", param_3448
.annotate 'line', 2394
    new $P118, "Undef"
    set $P3449, $P118
    .lex "$past", $P3449
    set $P3450, param_3448
    unless_null $P3450, vivify_3006
    $P3450 = root_new ['parrot';'Hash']
  vivify_3006:
    set $P120, $P3450["param_var"]
    unless_null $P120, vivify_3007
    new $P120, "Undef"
  vivify_3007:
    $P121 = $P120."ast"()
    set $P3449, $P121
.annotate 'line', 2395
    set $P120, $P3449
    unless_null $P120, vivify_3008
    new $P120, "Undef"
  vivify_3008:
    set $P3451, param_3448
    unless_null $P3451, vivify_3009
    $P3451 = root_new ['parrot';'Hash']
  vivify_3009:
    set $P3452, $P3451["param_var"]
    unless_null $P3452, vivify_3010
    $P3452 = root_new ['parrot';'Hash']
  vivify_3010:
    set $P121, $P3452["name"]
    unless_null $P121, vivify_3011
    new $P121, "Undef"
  vivify_3011:
    set $S100, $P121
    $P120."named"($S100)
.annotate 'line', 2396
    set $P120, param_3448
    set $P121, $P3449
    unless_null $P121, vivify_3012
    new $P121, "Undef"
  vivify_3012:
    $P123 = $P120."!make"($P121)
.annotate 'line', 2393
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "typename" :anon :subid("488_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3454
    .param pmc param_3455
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2399
    .const 'Sub' $P3460 = "639_1334921493.34" 
    capture_lex $P3460
    .lex "self", param_3454
    .lex "$/", param_3455
.annotate 'line', 2403
    $P3457 = root_new ['parrot';'ResizablePMCArray']
    set $P3456, $P3457
    .lex "@name", $P3456
.annotate 'line', 2404
    new $P118, "Undef"
    set $P3458, $P118
    .lex "$found", $P3458
.annotate 'line', 2403
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "HLL"
    get_who $P123, $P121
    set $P124, $P123["Compiler"]
    set $P125, param_3455
    unless_null $P125, vivify_3013
    new $P125, "Undef"
  vivify_3013:
    set $S100, $P125
    $P126 = $P124."parse_name"($S100)
    set $P3456, $P126
.annotate 'line', 2404
    new $P120, "Float"
    assign $P120, 0
    set $P3458, $P120
.annotate 'line', 2405
    .const 'Sub' $P3460 = "639_1334921493.34" 
    capture_lex $P3460
    $P3460()
.annotate 'line', 2410
    set $P121, $P3458
    unless_null $P121, vivify_3020
    new $P121, "Undef"
  vivify_3020:
    unless $P121, unless_3470
    set $P120, $P121
    goto unless_3470_end
  unless_3470:
.annotate 'line', 2411
    set $P123, param_3455
    unless_null $P123, vivify_3021
    new $P123, "Undef"
  vivify_3021:
    $P124 = $P123."CURSOR"()
    new $P125, "String"
    assign $P125, "Use of undeclared type '"
    set $P126, param_3455
    unless_null $P126, vivify_3022
    new $P126, "Undef"
  vivify_3022:
    set $S100, $P126
    concat $P127, $P125, $S100
    concat $P128, $P127, "'"
    $P129 = $P124."panic"($P128)
.annotate 'line', 2410
    set $P120, $P129
  unless_3470_end:
.annotate 'line', 2399
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3459"  :anon :subid("639_1334921493.34") :outer("488_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2405
    new $P3465, 'ExceptionHandler'
    set_label $P3465, control_3464
    $P3465."handle_types_except"(.CONTROL_ALL)
    push_eh $P3465
.annotate 'line', 2406
    new $P120, "Undef"
    set $P3461, $P120
    .lex "$sym", $P3461
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_3014
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_3015
    die "Contextual $*W not found"
  vivify_3015:
  vivify_3014:
    find_lex $P3462, "@name"
    unless_null $P3462, vivify_3016
    $P3462 = root_new ['parrot';'ResizablePMCArray']
  vivify_3016:
    $P125 = $P124."find_sym"($P3462)
    set $P3461, $P125
.annotate 'line', 2407
    find_dynamic_lex $P121, "$/"
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_3017
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_3018
    die "Contextual $*W not found"
  vivify_3018:
  vivify_3017:
    set $P126, $P3461
    unless_null $P126, vivify_3019
    new $P126, "Undef"
  vivify_3019:
    $P127 = $P125."get_ref"($P126)
    $P121."!make"($P127)
.annotate 'line', 2408
    new $P121, "Float"
    assign $P121, 1
    store_lex "$found", $P121
.annotate 'line', 2405
    pop_eh 
    goto skip_handler_3463
  control_3464:
    peek_exception $P3466
    .local pmc exception 
    .get_results (exception) 
    new $P3468, 'Integer'
    set $P3468, 1
    set exception["handled"], $P3468
    set $I3469, exception["handled"]
    eq $I3469, 1, handled_3467
    rethrow exception
  handled_3467:
    finalize $P3466
    .return (exception)
  skip_handler_3463:
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "trait" :anon :subid("489_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3472
    .param pmc param_3473
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2415
    .lex "self", param_3472
    .lex "$/", param_3473
.annotate 'line', 2416
    set $P118, param_3473
    set $P3474, param_3473
    unless_null $P3474, vivify_3023
    $P3474 = root_new ['parrot';'Hash']
  vivify_3023:
    set $P120, $P3474["trait_mod"]
    unless_null $P120, vivify_3024
    new $P120, "Undef"
  vivify_3024:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
.annotate 'line', 2415
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "trait_mod:sym<is>" :anon :subid("490_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3476
    .param pmc param_3477
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2419
    .const 'Sub' $P3496 = "642_1334921493.34" 
    capture_lex $P3496
    .const 'Sub' $P3481 = "640_1334921493.34" 
    capture_lex $P3481
    .lex "self", param_3476
    .lex "$/", param_3477
.annotate 'line', 2420
    set $P3479, param_3477
    unless_null $P3479, vivify_3025
    $P3479 = root_new ['parrot';'Hash']
  vivify_3025:
    set $P120, $P3479["longname"]
    unless_null $P120, vivify_3026
    new $P120, "Undef"
  vivify_3026:
    set $S100, $P120
    iseq $I100, $S100, "parrot_vtable"
    if $I100, if_3478
.annotate 'line', 2433
    set $P3494, param_3477
    unless_null $P3494, vivify_3027
    $P3494 = root_new ['parrot';'Hash']
  vivify_3027:
    set $P129, $P3494["longname"]
    unless_null $P129, vivify_3028
    new $P129, "Undef"
  vivify_3028:
    set $S101, $P129
    iseq $I101, $S101, "parrot_vtable_handler"
    if $I101, if_3493
.annotate 'line', 2444
    set $P3509, param_3477
    unless_null $P3509, vivify_3029
    $P3509 = root_new ['parrot';'Hash']
  vivify_3029:
    set $P137, $P3509["longname"]
    unless_null $P137, vivify_3030
    new $P137, "Undef"
  vivify_3030:
    set $S102, $P137
    iseq $I102, $S102, "pirflags"
    if $I102, if_3508
.annotate 'line', 2448
    set $P138, param_3477
    unless_null $P138, vivify_3031
    new $P138, "Undef"
  vivify_3031:
    $P139 = $P138."CURSOR"()
    new $P141, 'String'
    set $P141, "Trait '"
    set $P3510, param_3477
    unless_null $P3510, vivify_3032
    $P3510 = root_new ['parrot';'Hash']
  vivify_3032:
    set $P142, $P3510["longname"]
    unless_null $P142, vivify_3033
    new $P142, "Undef"
  vivify_3033:
    concat $P143, $P141, $P142
    concat $P144, $P143, "' not implemented"
    $P145 = $P139."panic"($P144)
.annotate 'line', 2447
    set $P136, $P145
.annotate 'line', 2444
    goto if_3508_end
  if_3508:
.annotate 'line', 2445
    set $P138, param_3477
    unless_null $P138, vivify_3034
    new $P138, "Undef"
  vivify_3034:
    $P139 = $P138."CURSOR"()
    $P140 = $P139."panic"("Trait 'pirflags' no longer supported; use 'is vtable'")
.annotate 'line', 2444
    set $P136, $P140
  if_3508_end:
    set $P128, $P136
.annotate 'line', 2433
    goto if_3493_end
  if_3493:
    .const 'Sub' $P3496 = "642_1334921493.34" 
    capture_lex $P3496
    $P134 = $P3496()
    set $P128, $P134
  if_3493_end:
    set $P118, $P128
.annotate 'line', 2420
    goto if_3478_end
  if_3478:
    .const 'Sub' $P3481 = "640_1334921493.34" 
    capture_lex $P3481
    $P126 = $P3481()
    set $P118, $P126
  if_3478_end:
.annotate 'line', 2419
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3495"  :anon :subid("642_1334921493.34") :outer("490_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2433
    .const 'Sub' $P3504 = "643_1334921493.34" 
    capture_lex $P3504
.annotate 'line', 2435
    new $P131, "Undef"
    set $P3497, $P131
    .lex "$cpast", $P3497
.annotate 'line', 2438
    new $P132, "Undef"
    set $P3498, $P132
    .lex "$name", $P3498
.annotate 'line', 2439
    new $P133, "Undef"
    set $P3499, $P133
    .lex "$package", $P3499
.annotate 'line', 2435
    new $P134, "Float"
    assign $P134, 0
    set $I102, $P134
    find_lex $P3500, "$/"
    unless_null $P3500, vivify_3035
    $P3500 = root_new ['parrot';'Hash']
  vivify_3035:
    set $P3501, $P3500["circumfix"]
    unless_null $P3501, vivify_3036
    $P3501 = root_new ['parrot';'ResizablePMCArray']
  vivify_3036:
    set $P135, $P3501[$I102]
    unless_null $P135, vivify_3037
    new $P135, "Undef"
  vivify_3037:
    $P136 = $P135."ast"()
    set $P3497, $P136
.annotate 'line', 2437
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Val"]
    set $P138, $P3497
    unless_null $P138, vivify_3038
    new $P138, "Undef"
  vivify_3038:
    $P139 = $P137."ACCEPTS"($P138)
    if $P139, unless_3502_end
.annotate 'line', 2436
    find_lex $P140, "$/"
    unless_null $P140, vivify_3039
    new $P140, "Undef"
  vivify_3039:
    $P141 = $P140."CURSOR"()
    $P141."panic"("Trait 'parrot_vtable_handler' requires constant scalar argument")
  unless_3502_end:
.annotate 'line', 2438
    set $P134, $P3497
    unless_null $P134, vivify_3040
    new $P134, "Undef"
  vivify_3040:
    $P135 = $P134."value"()
    set $P3498, $P135
.annotate 'line', 2439
    find_dynamic_lex $P136, "$*PACKAGE"
    unless_null $P136, vivify_3041
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$PACKAGE"]
    unless_null $P136, vivify_3042
    die "Contextual $*PACKAGE not found"
  vivify_3042:
  vivify_3041:
    set $P3499, $P136
.annotate 'line', 2440
    find_dynamic_lex $P134, "$/"
    .const 'Sub' $P3504 = "643_1334921493.34" 
    newclosure $P3507, $P3504
    $P135 = $P134."!make"($P3507)
.annotate 'line', 2433
    .return ($P135)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3503"  :anon :subid("643_1334921493.34") :outer("642_1334921493.34")
    .param pmc param_3505
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2440
    .lex "$match", param_3505
.annotate 'line', 2441
    find_dynamic_lex $P137, "$*W"
    unless_null $P137, vivify_3043
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$W"]
    unless_null $P137, vivify_3044
    die "Contextual $*W not found"
  vivify_3044:
  vivify_3043:
    find_lex $P138, "$package"
    unless_null $P138, vivify_3045
    new $P138, "Undef"
  vivify_3045:
    find_lex $P139, "$name"
    unless_null $P139, vivify_3046
    new $P139, "Undef"
  vivify_3046:
    set $P3506, param_3505
    unless_null $P3506, vivify_3047
    $P3506 = root_new ['parrot';'Hash']
  vivify_3047:
    set $P140, $P3506["variable"]
    unless_null $P140, vivify_3048
    new $P140, "Undef"
  vivify_3048:
    set $S102, $P140
    $P141 = $P137."pkg_add_parrot_vtable_handler_mapping"($P138, $P139, $S102)
.annotate 'line', 2440
    .return ($P141)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3480"  :anon :subid("640_1334921493.34") :outer("490_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2420
    .const 'Sub' $P3490 = "641_1334921493.34" 
    capture_lex $P3490
.annotate 'line', 2422
    new $P121, "Undef"
    set $P3482, $P121
    .lex "$cpast", $P3482
.annotate 'line', 2425
    new $P123, "Undef"
    set $P3483, $P123
    .lex "$name", $P3483
.annotate 'line', 2426
    new $P124, "Undef"
    set $P3484, $P124
    .lex "$package", $P3484
.annotate 'line', 2427
    new $P125, "Undef"
    set $P3485, $P125
    .lex "$is_dispatcher", $P3485
.annotate 'line', 2422
    new $P126, "Float"
    assign $P126, 0
    set $I101, $P126
    find_lex $P3486, "$/"
    unless_null $P3486, vivify_3049
    $P3486 = root_new ['parrot';'Hash']
  vivify_3049:
    set $P3487, $P3486["circumfix"]
    unless_null $P3487, vivify_3050
    $P3487 = root_new ['parrot';'ResizablePMCArray']
  vivify_3050:
    set $P127, $P3487[$I101]
    unless_null $P127, vivify_3051
    new $P127, "Undef"
  vivify_3051:
    $P128 = $P127."ast"()
    set $P3482, $P128
.annotate 'line', 2424
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Val"]
    set $P131, $P3482
    unless_null $P131, vivify_3052
    new $P131, "Undef"
  vivify_3052:
    $P132 = $P129."ACCEPTS"($P131)
    if $P132, unless_3488_end
.annotate 'line', 2423
    find_lex $P133, "$/"
    unless_null $P133, vivify_3053
    new $P133, "Undef"
  vivify_3053:
    $P134 = $P133."CURSOR"()
    $P134."panic"("Trait 'parrot_vtable' requires constant scalar argument")
  unless_3488_end:
.annotate 'line', 2425
    set $P126, $P3482
    unless_null $P126, vivify_3054
    new $P126, "Undef"
  vivify_3054:
    $P127 = $P126."value"()
    set $P3483, $P127
.annotate 'line', 2426
    find_dynamic_lex $P128, "$*PACKAGE"
    unless_null $P128, vivify_3055
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$PACKAGE"]
    unless_null $P128, vivify_3056
    die "Contextual $*PACKAGE not found"
  vivify_3056:
  vivify_3055:
    set $P3484, $P128
.annotate 'line', 2427
    find_dynamic_lex $P128, "$*SCOPE"
    unless_null $P128, vivify_3057
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$SCOPE"]
    unless_null $P128, vivify_3058
    die "Contextual $*SCOPE not found"
  vivify_3058:
  vivify_3057:
    set $S101, $P128
    iseq $I101, $S101, "proto"
    new $P129, 'Integer'
    set $P129, $I101
    set $P3485, $P129
.annotate 'line', 2428
    find_dynamic_lex $P126, "$/"
    .const 'Sub' $P3490 = "641_1334921493.34" 
    newclosure $P3492, $P3490
    $P127 = $P126."!make"($P3492)
.annotate 'line', 2420
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3489"  :anon :subid("641_1334921493.34") :outer("640_1334921493.34")
    .param pmc param_3491
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2428
    .lex "$match", param_3491
.annotate 'line', 2429
    find_dynamic_lex $P129, "$*W"
    unless_null $P129, vivify_3059
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$W"]
    unless_null $P129, vivify_3060
    die "Contextual $*W not found"
  vivify_3060:
  vivify_3059:
    find_lex $P131, "$package"
    unless_null $P131, vivify_3061
    new $P131, "Undef"
  vivify_3061:
    find_lex $P132, "$name"
    unless_null $P132, vivify_3062
    new $P132, "Undef"
  vivify_3062:
.annotate 'line', 2430
    find_dynamic_lex $P135, "$*W"
    unless_null $P135, vivify_3063
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$W"]
    unless_null $P135, vivify_3064
    die "Contextual $*W not found"
  vivify_3064:
  vivify_3063:
    set $P136, param_3491
    unless_null $P136, vivify_3065
    new $P136, "Undef"
  vivify_3065:
    $P137 = $P136."ast"()
    set $P138, $P137["block_past"]
    unless_null $P138, vivify_3066
    new $P138, "Undef"
  vivify_3066:
    find_lex $P139, "$name"
    unless_null $P139, vivify_3067
    new $P139, "Undef"
  vivify_3067:
    find_lex $P140, "$is_dispatcher"
    unless_null $P140, vivify_3068
    new $P140, "Undef"
  vivify_3068:
    $P141 = $P135."create_code"($P138, $P139, $P140)
    $P142 = $P129."pkg_add_method"($P131, "add_parrot_vtable_mapping", $P132, $P141)
.annotate 'line', 2428
    .return ($P142)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "regex_declarator" :anon :subid("491_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3514
    .param pmc param_3515
    .param pmc param_3516 :optional
    .param int has_param_3516 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2452
    .const 'Sub' $P3545 = "646_1334921493.34" 
    capture_lex $P3545
    .const 'Sub' $P3531 = "645_1334921493.34" 
    capture_lex $P3531
    .const 'Sub' $P3526 = "644_1334921493.34" 
    capture_lex $P3526
    new $P3513, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P3513, control_3512
    push_eh $P3513
    .lex "self", param_3514
    .lex "$/", param_3515
    if has_param_3516, optparam_3069
    new $P118, "Undef"
    set param_3516, $P118
  optparam_3069:
    .lex "$key", param_3516
.annotate 'line', 2453
    $P3518 = root_new ['parrot';'ResizablePMCArray']
    set $P3517, $P3518
    .lex "@MODIFIERS", $P3517
.annotate 'line', 2454
    new $P120, "Undef"
    set $P3519, $P120
    .lex "$name", $P3519
.annotate 'line', 2455
    new $P121, "Undef"
    set $P3520, $P121
    .lex "$past", $P3520
.annotate 'line', 2453
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "Regex"
    nqp_get_package_through_who $P125, $P124, "P6Regex"
    nqp_get_package_through_who $P126, $P125, "Actions"
    get_who $P127, $P126
    set $P3521, $P127["@MODIFIERS"]
    unless_null $P3521, vivify_3070
    $P3521 = root_new ['parrot';'ResizablePMCArray']
  vivify_3070:
    set $P3517, $P3521
.annotate 'line', 2454
    set $P3522, param_3515
    unless_null $P3522, vivify_3071
    $P3522 = root_new ['parrot';'Hash']
  vivify_3071:
    set $P123, $P3522["deflongname"]
    unless_null $P123, vivify_3072
    new $P123, "Undef"
  vivify_3072:
    $P124 = $P123."ast"()
    set $S100, $P124
    new $P125, 'String'
    set $P125, $S100
    set $P3519, $P125
.annotate 'line', 2452
    set $P123, $P3520
    unless_null $P123, vivify_3073
    new $P123, "Undef"
  vivify_3073:
.annotate 'line', 2456
    set $P3524, param_3515
    unless_null $P3524, vivify_3074
    $P3524 = root_new ['parrot';'Hash']
  vivify_3074:
    set $P123, $P3524["proto"]
    unless_null $P123, vivify_3075
    new $P123, "Undef"
  vivify_3075:
    if $P123, if_3523
.annotate 'line', 2486
    set $P124, param_3516
    unless_null $P124, vivify_3076
    new $P124, "Undef"
  vivify_3076:
    set $S100, $P124
    iseq $I100, $S100, "open"
    if $I100, if_3529
.annotate 'line', 2496
    .const 'Sub' $P3545 = "646_1334921493.34" 
    capture_lex $P3545
    $P3545()
    goto if_3529_end
  if_3529:
.annotate 'line', 2486
    .const 'Sub' $P3531 = "645_1334921493.34" 
    capture_lex $P3531
    $P3531()
  if_3529_end:
    goto if_3523_end
  if_3523:
.annotate 'line', 2458
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Stmts"]
.annotate 'line', 2459
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Block"]
    set $P133, $P3519
    unless_null $P133, vivify_3133
    new $P133, "Undef"
  vivify_3133:
.annotate 'line', 2460
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Op"]
.annotate 'line', 2461
    get_hll_global $P138, "GLOBAL"
    nqp_get_package_through_who $P139, $P138, "PAST"
    get_who $P140, $P139
    set $P141, $P140["Var"]
    $P142 = $P141."new"("self" :named("name"), "parameter" :named("scope"))
    set $P143, $P3519
    unless_null $P143, vivify_3134
    new $P143, "Undef"
  vivify_3134:
    $P144 = $P137."new"($P142, $P143, "!protoregex" :named("name"), "callmethod" :named("pasttype"))
.annotate 'line', 2460
    set $P145, param_3515
    unless_null $P145, vivify_3135
    new $P145, "Undef"
  vivify_3135:
    $P146 = $P132."new"($P144, $P133 :named("name"), "declaration" :named("blocktype"), 0 :named("lexical"), $P145 :named("node"))
.annotate 'line', 2470
    get_hll_global $P147, "GLOBAL"
    nqp_get_package_through_who $P149, $P147, "PAST"
    get_who $P150, $P149
    set $P151, $P150["Block"]
    new $P152, "String"
    assign $P152, "!PREFIX__"
    set $P153, $P3519
    unless_null $P153, vivify_3136
    new $P153, "Undef"
  vivify_3136:
    concat $P154, $P152, $P153
.annotate 'line', 2471
    get_hll_global $P155, "GLOBAL"
    nqp_get_package_through_who $P156, $P155, "PAST"
    get_who $P157, $P156
    set $P158, $P157["Op"]
.annotate 'line', 2472
    get_hll_global $P159, "GLOBAL"
    nqp_get_package_through_who $P160, $P159, "PAST"
    get_who $P161, $P160
    set $P162, $P161["Var"]
    $P163 = $P162."new"("self" :named("name"), "parameter" :named("scope"))
    set $P164, $P3519
    unless_null $P164, vivify_3137
    new $P164, "Undef"
  vivify_3137:
    $P165 = $P158."new"($P163, $P164, "!PREFIX__!protoregex" :named("name"), "callmethod" :named("pasttype"))
.annotate 'line', 2471
    set $P166, param_3515
    unless_null $P166, vivify_3138
    new $P166, "Undef"
  vivify_3138:
    $P167 = $P151."new"($P165, $P154 :named("name"), "declaration" :named("blocktype"), 0 :named("lexical"), $P166 :named("node"))
.annotate 'line', 2470
    $P168 = $P127."new"($P146, $P167)
.annotate 'line', 2458
    set $P3520, $P168
.annotate 'line', 2482
    set $P125, $P3520
    unless_null $P125, vivify_3139
    new $P125, "Undef"
  vivify_3139:
    $P126 = $P125."list"()
    defined $I100, $P126
    unless $I100, for_undef_3140
    iter $P124, $P126
    new $P128, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P128, loop3528_handler
    push_eh $P128
  loop3528_test:
    unless $P124, loop3528_done
    shift $P127, $P124
  loop3528_redo:
    .const 'Sub' $P3526 = "644_1334921493.34" 
    capture_lex $P3526
    $P3526($P127)
  loop3528_next:
    goto loop3528_test
  loop3528_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P129, exception, 'type'
    eq $P129, .CONTROL_LOOP_NEXT, loop3528_next
    eq $P129, .CONTROL_LOOP_REDO, loop3528_redo
  loop3528_done:
    pop_eh 
  for_undef_3140:
  if_3523_end:
.annotate 'line', 2527
    set $P123, param_3515
    set $P124, $P3520
    unless_null $P124, vivify_3150
    new $P124, "Undef"
  vivify_3150:
    $P125 = $P123."!make"($P124)
.annotate 'line', 2452
    .return ($P125)
  control_3512:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P123, exception, "payload"
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3544"  :anon :subid("646_1334921493.34") :outer("491_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2496
    .const 'Sub' $P3552 = "647_1334921493.34" 
    capture_lex $P3552
.annotate 'line', 2497
    new $P125, "Undef"
    set $P3546, $P125
    .lex "$regex", $P3546
.annotate 'line', 2500
    new $P126, "Undef"
    set $P3547, $P126
    .lex "$prefix_meth", $P3547
.annotate 'line', 2498
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "Regex"
    nqp_get_package_through_who $P129, $P128, "P6Regex"
    nqp_get_package_through_who $P131, $P129, "Actions"
    get_who $P132, $P131
    set $P133, $P132["buildsub"]
    find_lex $P3548, "$/"
    unless_null $P3548, vivify_3077
    $P3548 = root_new ['parrot';'Hash']
  vivify_3077:
    set $P134, $P3548["p6regex"]
    unless_null $P134, vivify_3078
    new $P134, "Undef"
  vivify_3078:
    $P135 = $P134."ast"()
    find_dynamic_lex $P138, "$*W"
    unless_null $P138, vivify_3079
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$W"]
    unless_null $P138, vivify_3080
    die "Contextual $*W not found"
  vivify_3080:
  vivify_3079:
    $P139 = $P138."pop_lexpad"()
    $P140 = $P133($P135, $P139)
    set $P3546, $P140
.annotate 'line', 2499
    set $P127, $P3546
    unless_null $P127, vivify_3081
    new $P127, "Undef"
  vivify_3081:
    find_lex $P128, "$name"
    unless_null $P128, vivify_3082
    new $P128, "Undef"
  vivify_3082:
    $P127."name"($P128)
.annotate 'line', 2496
    set $P127, $P3547
    unless_null $P127, vivify_3083
    new $P127, "Undef"
  vivify_3083:
.annotate 'line', 2502
    find_dynamic_lex $P131, "$*PKGDECL"
    unless_null $P131, vivify_3084
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$PKGDECL"]
    unless_null $P131, vivify_3085
    die "Contextual $*PKGDECL not found"
  vivify_3085:
  vivify_3084:
    if $P131, if_3550
    set $P127, $P131
    goto if_3550_end
  if_3550:
    find_dynamic_lex $P134, "$*PACKAGE"
    unless_null $P134, vivify_3086
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$PACKAGE"]
    unless_null $P134, vivify_3087
    die "Contextual $*PACKAGE not found"
  vivify_3087:
  vivify_3086:
    get_how $P135, $P134
    can $I101, $P135, "add_method"
    new $P127, 'Integer'
    set $P127, $I101
  if_3550_end:
    unless $P127, if_3549_end
    .const 'Sub' $P3552 = "647_1334921493.34" 
    capture_lex $P3552
    $P3552()
  if_3549_end:
.annotate 'line', 2517
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Op"]
.annotate 'line', 2519
    new $P132, "ResizablePMCArray"
    push $P132, "Regex"
    push $P132, "Method"
    find_lex $P133, "$/"
    unless_null $P133, vivify_3110
    new $P133, "Undef"
  vivify_3110:
    $P134 = "lexical_package_lookup"($P132, $P133)
    set $P135, $P3546
    unless_null $P135, vivify_3111
    new $P135, "Undef"
  vivify_3111:
    $P136 = $P131."new"($P134, $P135, "callmethod" :named("pasttype"), "new" :named("name"))
.annotate 'line', 2517
    store_lex "$past", $P136
.annotate 'line', 2522
    set $P128, $P3547
    unless_null $P128, vivify_3112
    new $P128, "Undef"
  vivify_3112:
    if $P128, if_3557
    set $P137, $P3546
    unless_null $P137, vivify_3113
    new $P137, "Undef"
  vivify_3113:
    set $P127, $P137
    goto if_3557_end
  if_3557:
.annotate 'line', 2523
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Stmts"]
    set $P134, $P3546
    unless_null $P134, vivify_3114
    new $P134, "Undef"
  vivify_3114:
    set $P135, $P3547
    unless_null $P135, vivify_3115
    new $P135, "Undef"
  vivify_3115:
    $P136 = $P133."new"($P134, $P135)
    set $P127, $P136
  if_3557_end:
.annotate 'line', 2522
    find_lex $P3558, "$past"
    unless_null $P3558, vivify_3116
    $P3558 = root_new ['parrot';'Hash']
    store_lex "$past", $P3558
  vivify_3116:
    set $P3558["sink"], $P127
.annotate 'line', 2525
    find_lex $P3559, "@MODIFIERS"
    unless_null $P3559, vivify_3117
    $P3559 = root_new ['parrot';'ResizablePMCArray']
  vivify_3117:
    $P127 = $P3559."shift"()
.annotate 'line', 2496
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3551"  :anon :subid("647_1334921493.34") :outer("646_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2507
    $P3554 = root_new ['parrot';'ResizablePMCArray']
    set $P3553, $P3554
    .lex "@prefixes", $P3553
.annotate 'line', 2504
    find_dynamic_lex $P138, "$*W"
    unless_null $P138, vivify_3088
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$W"]
    unless_null $P138, vivify_3089
    die "Contextual $*W not found"
  vivify_3089:
  vivify_3088:
    find_dynamic_lex $P141, "$*PACKAGE"
    unless_null $P141, vivify_3090
    get_hll_global $P139, "GLOBAL"
    get_who $P140, $P139
    set $P141, $P140["$PACKAGE"]
    unless_null $P141, vivify_3091
    die "Contextual $*PACKAGE not found"
  vivify_3091:
  vivify_3090:
    find_lex $P142, "$name"
    unless_null $P142, vivify_3092
    new $P142, "Undef"
  vivify_3092:
    find_dynamic_lex $P145, "$*W"
    unless_null $P145, vivify_3093
    get_hll_global $P143, "GLOBAL"
    get_who $P144, $P143
    set $P145, $P144["$W"]
    unless_null $P145, vivify_3094
    die "Contextual $*W not found"
  vivify_3094:
  vivify_3093:
    find_lex $P146, "$regex"
    unless_null $P146, vivify_3095
    new $P146, "Undef"
  vivify_3095:
    find_lex $P147, "$name"
    unless_null $P147, vivify_3096
    new $P147, "Undef"
  vivify_3096:
    $P149 = $P145."create_code"($P146, $P147, 0)
    $P138."pkg_add_method"($P141, "add_method", $P142, $P149)
.annotate 'line', 2507
    find_lex $P3555, "$/"
    unless_null $P3555, vivify_3097
    $P3555 = root_new ['parrot';'Hash']
  vivify_3097:
    set $P136, $P3555["p6regex"]
    unless_null $P136, vivify_3098
    new $P136, "Undef"
  vivify_3098:
    $P137 = $P136."ast"()
    $P138 = $P137."prefix_list"()
    set $P3553, $P138
.annotate 'line', 2508
    get_hll_global $P136, "GLOBAL"
    nqp_get_package_through_who $P137, $P136, "PAST"
    get_who $P138, $P137
    set $P139, $P138["Block"]
.annotate 'line', 2509
    new $P140, "String"
    assign $P140, "!PREFIX__"
    find_lex $P141, "$name"
    unless_null $P141, vivify_3099
    new $P141, "Undef"
  vivify_3099:
    concat $P142, $P140, $P141
.annotate 'line', 2510
    get_hll_global $P143, "GLOBAL"
    nqp_get_package_through_who $P144, $P143, "PAST"
    get_who $P145, $P144
    set $P146, $P145["Op"]
    set $P3556, $P3553
    unless_null $P3556, vivify_3100
    $P3556 = root_new ['parrot';'ResizablePMCArray']
  vivify_3100:
    $P147 = $P146."new"($P3556 :flat, "list" :named("pasttype"))
    $P149 = $P139."new"($P147, $P142 :named("name"), "method" :named("blocktype"))
.annotate 'line', 2508
    store_lex "$prefix_meth", $P149
.annotate 'line', 2512
    find_dynamic_lex $P138, "$*W"
    unless_null $P138, vivify_3101
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$W"]
    unless_null $P138, vivify_3102
    die "Contextual $*W not found"
  vivify_3102:
  vivify_3101:
    find_dynamic_lex $P141, "$*PACKAGE"
    unless_null $P141, vivify_3103
    get_hll_global $P139, "GLOBAL"
    get_who $P140, $P139
    set $P141, $P140["$PACKAGE"]
    unless_null $P141, vivify_3104
    die "Contextual $*PACKAGE not found"
  vivify_3104:
  vivify_3103:
    find_lex $P142, "$prefix_meth"
    unless_null $P142, vivify_3105
    new $P142, "Undef"
  vivify_3105:
    $P143 = $P142."name"()
.annotate 'line', 2513
    find_dynamic_lex $P146, "$*W"
    unless_null $P146, vivify_3106
    get_hll_global $P144, "GLOBAL"
    get_who $P145, $P144
    set $P146, $P145["$W"]
    unless_null $P146, vivify_3107
    die "Contextual $*W not found"
  vivify_3107:
  vivify_3106:
    find_lex $P147, "$prefix_meth"
    unless_null $P147, vivify_3108
    new $P147, "Undef"
  vivify_3108:
    find_lex $P149, "$prefix_meth"
    unless_null $P149, vivify_3109
    new $P149, "Undef"
  vivify_3109:
    $P150 = $P149."name"()
    $P151 = $P146."create_code"($P147, $P150, 0)
    $P152 = $P138."pkg_add_method"($P141, "add_method", $P143, $P151)
.annotate 'line', 2502
    .return ($P152)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3530"  :anon :subid("645_1334921493.34") :outer("491_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2487
    $P3533 = root_new ['parrot';'Hash']
    set $P3532, $P3533
    .lex "%h", $P3532
.annotate 'line', 2486
    set $P3534, $P3532
    unless_null $P3534, vivify_3118
    $P3534 = root_new ['parrot';'Hash']
  vivify_3118:
.annotate 'line', 2488
    find_lex $P3536, "$/"
    unless_null $P3536, vivify_3119
    $P3536 = root_new ['parrot';'Hash']
  vivify_3119:
    set $P125, $P3536["sym"]
    unless_null $P125, vivify_3120
    new $P125, "Undef"
  vivify_3120:
    set $S101, $P125
    iseq $I101, $S101, "token"
    unless $I101, if_3535_end
    new $P126, "Float"
    assign $P126, 1
    set $P3537, $P3532
    unless_null $P3537, vivify_3121
    $P3537 = root_new ['parrot';'Hash']
    set $P3532, $P3537
  vivify_3121:
    set $P3537["r"], $P126
  if_3535_end:
.annotate 'line', 2489
    find_lex $P3539, "$/"
    unless_null $P3539, vivify_3122
    $P3539 = root_new ['parrot';'Hash']
  vivify_3122:
    set $P125, $P3539["sym"]
    unless_null $P125, vivify_3123
    new $P125, "Undef"
  vivify_3123:
    set $S101, $P125
    iseq $I101, $S101, "rule"
    unless $I101, if_3538_end
    new $P126, "Float"
    assign $P126, 1
    set $P3540, $P3532
    unless_null $P3540, vivify_3124
    $P3540 = root_new ['parrot';'Hash']
    set $P3532, $P3540
  vivify_3124:
    set $P3540["r"], $P126
    new $P126, "Float"
    assign $P126, 1
    set $P3541, $P3532
    unless_null $P3541, vivify_3125
    $P3541 = root_new ['parrot';'Hash']
    set $P3532, $P3541
  vivify_3125:
    set $P3541["s"], $P126
  if_3538_end:
.annotate 'line', 2490
    find_lex $P3542, "@MODIFIERS"
    unless_null $P3542, vivify_3126
    $P3542 = root_new ['parrot';'ResizablePMCArray']
  vivify_3126:
    set $P3543, $P3532
    unless_null $P3543, vivify_3127
    $P3543 = root_new ['parrot';'Hash']
  vivify_3127:
    $P3542."unshift"($P3543)
.annotate 'line', 2491
    find_lex $P125, "$name"
    unless_null $P125, vivify_3128
    new $P125, "Undef"
  vivify_3128:
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "Regex"
    nqp_get_package_through_who $P128, $P127, "P6Regex"
    nqp_get_package_through_who $P129, $P128, "Actions"
    get_who $P131, $P129
    set $P131["$REGEXNAME"], $P125
.annotate 'line', 2492
    find_dynamic_lex $P127, "$*W"
    unless_null $P127, vivify_3129
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$W"]
    unless_null $P127, vivify_3130
    die "Contextual $*W not found"
  vivify_3130:
  vivify_3129:
    $P128 = $P127."cur_lexpad"()
    $P128."symbol"(unicode:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2493
    find_dynamic_lex $P127, "$*W"
    unless_null $P127, vivify_3131
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$W"]
    unless_null $P127, vivify_3132
    die "Contextual $*W not found"
  vivify_3132:
  vivify_3131:
    $P128 = $P127."cur_lexpad"()
    $P128."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2494
    new $P125, "Exception"
    set $P125['type'], .CONTROL_RETURN
    new $P126, "Float"
    assign $P126, 0
    setattribute $P125, 'payload', $P126
    throw $P125
.annotate 'line', 2486
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3525"  :anon :subid("644_1334921493.34") :outer("491_1334921493.34")
    .param pmc param_3527
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2482
    .lex "$_", param_3527
.annotate 'line', 2483
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_3141
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_3142
    die "Contextual $*W not found"
  vivify_3142:
  vivify_3141:
    find_dynamic_lex $P134, "$*PACKAGE"
    unless_null $P134, vivify_3143
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$PACKAGE"]
    unless_null $P134, vivify_3144
    die "Contextual $*PACKAGE not found"
  vivify_3144:
  vivify_3143:
    find_lex $P135, "$_"
    unless_null $P135, vivify_3145
    new $P135, "Undef"
  vivify_3145:
    $P136 = $P135."name"()
    find_dynamic_lex $P139, "$*W"
    unless_null $P139, vivify_3146
    get_hll_global $P137, "GLOBAL"
    get_who $P138, $P137
    set $P139, $P138["$W"]
    unless_null $P139, vivify_3147
    die "Contextual $*W not found"
  vivify_3147:
  vivify_3146:
    find_lex $P140, "$_"
    unless_null $P140, vivify_3148
    new $P140, "Undef"
  vivify_3148:
    find_lex $P141, "$_"
    unless_null $P141, vivify_3149
    new $P141, "Undef"
  vivify_3149:
    $P142 = $P141."name"()
    $P143 = $P139."create_code"($P140, $P142, 0)
    $P144 = $P131."pkg_add_method"($P134, "add_method", $P136, $P143)
.annotate 'line', 2482
    .return ($P144)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "dotty" :anon :subid("492_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3561
    .param pmc param_3562
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2531
    .lex "self", param_3561
    .lex "$/", param_3562
.annotate 'line', 2532
    new $P118, "Undef"
    set $P3563, $P118
    .lex "$past", $P3563
    set $P3565, param_3562
    unless_null $P3565, vivify_3151
    $P3565 = root_new ['parrot';'Hash']
  vivify_3151:
    set $P121, $P3565["args"]
    unless_null $P121, vivify_3152
    new $P121, "Undef"
  vivify_3152:
    if $P121, if_3564
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Op"]
    set $P131, param_3562
    unless_null $P131, vivify_3153
    new $P131, "Undef"
  vivify_3153:
    $P132 = $P129."new"($P131 :named("node"))
    set $P120, $P132
    goto if_3564_end
  if_3564:
    new $P123, "Float"
    assign $P123, 0
    set $I100, $P123
    set $P3566, param_3562
    unless_null $P3566, vivify_3154
    $P3566 = root_new ['parrot';'Hash']
  vivify_3154:
    set $P3567, $P3566["args"]
    unless_null $P3567, vivify_3155
    $P3567 = root_new ['parrot';'ResizablePMCArray']
  vivify_3155:
    set $P124, $P3567[$I100]
    unless_null $P124, vivify_3156
    new $P124, "Undef"
  vivify_3156:
    $P125 = $P124."ast"()
    set $P120, $P125
  if_3564_end:
    set $P3563, $P120
.annotate 'line', 2533
    set $P3569, param_3562
    unless_null $P3569, vivify_3157
    $P3569 = root_new ['parrot';'Hash']
  vivify_3157:
    set $P120, $P3569["quote"]
    unless_null $P120, vivify_3158
    new $P120, "Undef"
  vivify_3158:
    if $P120, if_3568
.annotate 'line', 2537
    set $P3572, param_3562
    unless_null $P3572, vivify_3159
    $P3572 = root_new ['parrot';'Hash']
  vivify_3159:
    set $P121, $P3572["longname"]
    unless_null $P121, vivify_3160
    new $P121, "Undef"
  vivify_3160:
    set $S100, $P121
    iseq $I100, $S100, "HOW"
    if $I100, if_3571
.annotate 'line', 2540
    set $P3574, param_3562
    unless_null $P3574, vivify_3161
    $P3574 = root_new ['parrot';'Hash']
  vivify_3161:
    set $P123, $P3574["longname"]
    unless_null $P123, vivify_3162
    new $P123, "Undef"
  vivify_3162:
    set $S101, $P123
    iseq $I101, $S101, "WHAT"
    if $I101, if_3573
.annotate 'line', 2543
    set $P3576, param_3562
    unless_null $P3576, vivify_3163
    $P3576 = root_new ['parrot';'Hash']
  vivify_3163:
    set $P124, $P3576["longname"]
    unless_null $P124, vivify_3164
    new $P124, "Undef"
  vivify_3164:
    set $S102, $P124
    iseq $I102, $S102, "WHO"
    if $I102, if_3575
.annotate 'line', 2546
    set $P3578, param_3562
    unless_null $P3578, vivify_3165
    $P3578 = root_new ['parrot';'Hash']
  vivify_3165:
    set $P125, $P3578["longname"]
    unless_null $P125, vivify_3166
    new $P125, "Undef"
  vivify_3166:
    set $S103, $P125
    iseq $I103, $S103, "REPR"
    if $I103, if_3577
.annotate 'line', 2550
    set $P126, $P3563
    unless_null $P126, vivify_3167
    new $P126, "Undef"
  vivify_3167:
    set $P3579, param_3562
    unless_null $P3579, vivify_3168
    $P3579 = root_new ['parrot';'Hash']
  vivify_3168:
    set $P127, $P3579["longname"]
    unless_null $P127, vivify_3169
    new $P127, "Undef"
  vivify_3169:
    set $S104, $P127
    $P126."name"($S104)
.annotate 'line', 2551
    set $P126, $P3563
    unless_null $P126, vivify_3170
    new $P126, "Undef"
  vivify_3170:
    $P126."pasttype"("callmethod")
.annotate 'line', 2549
    goto if_3577_end
  if_3577:
.annotate 'line', 2547
    set $P126, $P3563
    unless_null $P126, vivify_3171
    new $P126, "Undef"
  vivify_3171:
    $P126."pirop"("repr_name SP")
  if_3577_end:
.annotate 'line', 2546
    goto if_3575_end
  if_3575:
.annotate 'line', 2544
    set $P125, $P3563
    unless_null $P125, vivify_3172
    new $P125, "Undef"
  vivify_3172:
    $P125."pirop"("get_who PP")
  if_3575_end:
.annotate 'line', 2543
    goto if_3573_end
  if_3573:
.annotate 'line', 2541
    set $P124, $P3563
    unless_null $P124, vivify_3173
    new $P124, "Undef"
  vivify_3173:
    $P124."pirop"("get_what PP")
  if_3573_end:
.annotate 'line', 2540
    goto if_3571_end
  if_3571:
.annotate 'line', 2538
    set $P123, $P3563
    unless_null $P123, vivify_3174
    new $P123, "Undef"
  vivify_3174:
    $P123."pirop"("get_how PP")
  if_3571_end:
.annotate 'line', 2537
    goto if_3568_end
  if_3568:
.annotate 'line', 2534
    set $P121, $P3563
    unless_null $P121, vivify_3175
    new $P121, "Undef"
  vivify_3175:
    set $P3570, param_3562
    unless_null $P3570, vivify_3176
    $P3570 = root_new ['parrot';'Hash']
  vivify_3176:
    set $P123, $P3570["quote"]
    unless_null $P123, vivify_3177
    new $P123, "Undef"
  vivify_3177:
    $P124 = $P123."ast"()
    $P121."name"($P124)
.annotate 'line', 2535
    set $P121, $P3563
    unless_null $P121, vivify_3178
    new $P121, "Undef"
  vivify_3178:
    $P121."pasttype"("callmethod")
  if_3568_end:
.annotate 'line', 2553
    set $P120, param_3562
    set $P121, $P3563
    unless_null $P121, vivify_3179
    new $P121, "Undef"
  vivify_3179:
    $P123 = $P120."!make"($P121)
.annotate 'line', 2531
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<self>" :anon :subid("493_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3581
    .param pmc param_3582
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2558
    .lex "self", param_3581
    .lex "$/", param_3582
.annotate 'line', 2559
    set $P118, param_3582
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
.annotate 'line', 2560
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
    $P129 = $P128."new"("self" :named("name"))
    $P131 = $P124."new"($P129, "nqp_decontainerize PP" :named("pirop"))
.annotate 'line', 2559
    $P132 = $P118."!make"($P131)
.annotate 'line', 2558
    .return ($P132)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<identifier>" :anon :subid("494_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3584
    .param pmc param_3585
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2563
    .lex "self", param_3584
    .lex "$/", param_3585
.annotate 'line', 2564
    new $P118, "Undef"
    set $P3586, $P118
    .lex "$past", $P3586
    set $P3587, param_3585
    unless_null $P3587, vivify_3180
    $P3587 = root_new ['parrot';'Hash']
  vivify_3180:
    set $P120, $P3587["args"]
    unless_null $P120, vivify_3181
    new $P120, "Undef"
  vivify_3181:
    $P121 = $P120."ast"()
    set $P3586, $P121
.annotate 'line', 2565
    set $P120, $P3586
    unless_null $P120, vivify_3182
    new $P120, "Undef"
  vivify_3182:
    set $P3588, param_3585
    unless_null $P3588, vivify_3183
    $P3588 = root_new ['parrot';'Hash']
  vivify_3183:
    set $P121, $P3588["deflongname"]
    unless_null $P121, vivify_3184
    new $P121, "Undef"
  vivify_3184:
    set $S100, $P121
    $P120."name"($S100)
.annotate 'line', 2566
    set $P120, param_3585
    set $P121, $P3586
    unless_null $P121, vivify_3185
    new $P121, "Undef"
  vivify_3185:
    $P123 = $P120."!make"($P121)
.annotate 'line', 2563
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<name>" :anon :subid("495_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3590
    .param pmc param_3591
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2569
    .const 'Sub' $P3598 = "648_1334921493.34" 
    capture_lex $P3598
    .lex "self", param_3590
    .lex "$/", param_3591
.annotate 'line', 2571
    new $P118, "Undef"
    set $P3592, $P118
    .lex "$var", $P3592
.annotate 'line', 2581
    new $P120, "Undef"
    set $P3593, $P120
    .lex "$past", $P3593
.annotate 'line', 2569
    set $P121, $P3592
    unless_null $P121, vivify_3186
    new $P121, "Undef"
  vivify_3186:
.annotate 'line', 2572
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_3187
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_3188
    die "Contextual $*W not found"
  vivify_3188:
  vivify_3187:
    set $P3595, param_3591
    unless_null $P3595, vivify_3189
    $P3595 = root_new ['parrot';'Hash']
  vivify_3189:
    set $P125, $P3595["name"]
    unless_null $P125, vivify_3190
    new $P125, "Undef"
  vivify_3190:
    set $S100, $P125
    $P126 = $P124."is_lexical"($S100)
    if $P126, if_3594
.annotate 'line', 2575
    .const 'Sub' $P3598 = "648_1334921493.34" 
    capture_lex $P3598
    $P3598()
    goto if_3594_end
  if_3594:
.annotate 'line', 2573
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Var"]
    set $P3596, param_3591
    unless_null $P3596, vivify_3196
    $P3596 = root_new ['parrot';'Hash']
  vivify_3196:
    set $P132, $P3596["name"]
    unless_null $P132, vivify_3197
    new $P132, "Undef"
  vivify_3197:
    set $S101, $P132
    $P133 = $P131."new"($S101 :named("name"), "lexical" :named("scope"))
    set $P3592, $P133
  if_3594_end:
.annotate 'line', 2581
    set $P121, $P3592
    unless_null $P121, vivify_3198
    new $P121, "Undef"
  vivify_3198:
    set $P3593, $P121
.annotate 'line', 2582
    set $P3605, param_3591
    unless_null $P3605, vivify_3199
    $P3605 = root_new ['parrot';'Hash']
  vivify_3199:
    set $P121, $P3605["args"]
    unless_null $P121, vivify_3200
    new $P121, "Undef"
  vivify_3200:
    unless $P121, if_3604_end
.annotate 'line', 2583
    new $P123, "Float"
    assign $P123, 0
    set $I100, $P123
    set $P3606, param_3591
    unless_null $P3606, vivify_3201
    $P3606 = root_new ['parrot';'Hash']
  vivify_3201:
    set $P3607, $P3606["args"]
    unless_null $P3607, vivify_3202
    $P3607 = root_new ['parrot';'ResizablePMCArray']
  vivify_3202:
    set $P124, $P3607[$I100]
    unless_null $P124, vivify_3203
    new $P124, "Undef"
  vivify_3203:
    $P125 = $P124."ast"()
    set $P3593, $P125
.annotate 'line', 2584
    set $P123, $P3593
    unless_null $P123, vivify_3204
    new $P123, "Undef"
  vivify_3204:
    set $P124, $P3592
    unless_null $P124, vivify_3205
    new $P124, "Undef"
  vivify_3205:
    $P123."unshift"($P124)
  if_3604_end:
.annotate 'line', 2586
    set $P121, param_3591
    set $P123, $P3593
    unless_null $P123, vivify_3206
    new $P123, "Undef"
  vivify_3206:
    $P124 = $P121."!make"($P123)
.annotate 'line', 2569
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3597"  :anon :subid("648_1334921493.34") :outer("495_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2576
    $P3600 = root_new ['parrot';'ResizablePMCArray']
    set $P3599, $P3600
    .lex "@ns", $P3599
    find_lex $P3601, "$/"
    unless_null $P3601, vivify_3191
    $P3601 = root_new ['parrot';'Hash']
  vivify_3191:
    set $P3602, $P3601["name"]
    unless_null $P3602, vivify_3192
    $P3602 = root_new ['parrot';'Hash']
  vivify_3192:
    set $P127, $P3602["identifier"]
    unless_null $P127, vivify_3193
    new $P127, "Undef"
  vivify_3193:
    clone $P128, $P127
    set $P3599, $P128
.annotate 'line', 2577
    set $P3603, $P3599
    unless_null $P3603, vivify_3194
    $P3603 = root_new ['parrot';'ResizablePMCArray']
  vivify_3194:
    find_lex $P127, "$/"
    unless_null $P127, vivify_3195
    new $P127, "Undef"
  vivify_3195:
    $P128 = "lexical_package_lookup"($P3603, $P127)
    store_lex "$var", $P128
.annotate 'line', 2575
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<pir::op>" :anon :subid("496_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3609
    .param pmc param_3610
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2589
    .lex "self", param_3609
    .lex "$/", param_3610
.annotate 'line', 2590
    new $P118, "Undef"
    set $P3611, $P118
    .lex "$past", $P3611
.annotate 'line', 2591
    new $P120, "Undef"
    set $P3612, $P120
    .lex "$pirop", $P3612
.annotate 'line', 2590
    set $P3614, param_3610
    unless_null $P3614, vivify_3207
    $P3614 = root_new ['parrot';'Hash']
  vivify_3207:
    set $P123, $P3614["args"]
    unless_null $P123, vivify_3208
    new $P123, "Undef"
  vivify_3208:
    if $P123, if_3613
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Op"]
    set $P132, param_3610
    unless_null $P132, vivify_3209
    new $P132, "Undef"
  vivify_3209:
    $P133 = $P131."new"($P132 :named("node"))
    set $P121, $P133
    goto if_3613_end
  if_3613:
    new $P124, "Float"
    assign $P124, 0
    set $I100, $P124
    set $P3615, param_3610
    unless_null $P3615, vivify_3210
    $P3615 = root_new ['parrot';'Hash']
  vivify_3210:
    set $P3616, $P3615["args"]
    unless_null $P3616, vivify_3211
    $P3616 = root_new ['parrot';'ResizablePMCArray']
  vivify_3211:
    set $P125, $P3616[$I100]
    unless_null $P125, vivify_3212
    new $P125, "Undef"
  vivify_3212:
    $P126 = $P125."ast"()
    set $P121, $P126
  if_3613_end:
    set $P3611, $P121
.annotate 'line', 2591
    set $P3617, param_3610
    unless_null $P3617, vivify_3213
    $P3617 = root_new ['parrot';'Hash']
  vivify_3213:
    set $P121, $P3617["op"]
    unless_null $P121, vivify_3214
    new $P121, "Undef"
  vivify_3214:
    set $S100, $P121
    new $P123, 'String'
    set $P123, $S100
    set $P3612, $P123
.annotate 'line', 2592
    set $P121, $P3612
    unless_null $P121, vivify_3215
    new $P121, "Undef"
  vivify_3215:
    set $S100, $P121
    split $P123, "__", $S100
    join $S101, " ", $P123
    new $P124, 'String'
    set $P124, $S101
    set $P3612, $P124
.annotate 'line', 2593
    set $P121, $P3611
    unless_null $P121, vivify_3216
    new $P121, "Undef"
  vivify_3216:
    set $P123, $P3612
    unless_null $P123, vivify_3217
    new $P123, "Undef"
  vivify_3217:
    $P121."pirop"($P123)
.annotate 'line', 2594
    set $P121, $P3611
    unless_null $P121, vivify_3218
    new $P121, "Undef"
  vivify_3218:
    $P121."pasttype"("pirop")
.annotate 'line', 2595
    set $P121, param_3610
    set $P123, $P3611
    unless_null $P123, vivify_3219
    new $P123, "Undef"
  vivify_3219:
    $P124 = $P121."!make"($P123)
.annotate 'line', 2589
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<pir::const>" :anon :subid("497_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3619
    .param pmc param_3620
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2598
    .lex "self", param_3619
    .lex "$/", param_3620
.annotate 'line', 2599
    set $P118, param_3620
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Val"]
    set $P3621, param_3620
    unless_null $P3621, vivify_3220
    $P3621 = root_new ['parrot';'Hash']
  vivify_3220:
    set $P125, $P3621["const"]
    unless_null $P125, vivify_3221
    new $P125, "Undef"
  vivify_3221:
    set $S100, $P125
    set $P126, param_3620
    unless_null $P126, vivify_3222
    new $P126, "Undef"
  vivify_3222:
    $P127 = $P124."new"($S100 :named("value"), "!macro_const" :named("returns"), $P126 :named("node"))
    $P128 = $P118."!make"($P127)
.annotate 'line', 2598
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<nqp::op>" :anon :subid("498_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3623
    .param pmc param_3624
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2602
    .lex "self", param_3623
    .lex "$/", param_3624
.annotate 'line', 2603
    new $P118, "Undef"
    set $P3625, $P118
    .lex "$op", $P3625
.annotate 'line', 2604
    new $P120, "Undef"
    set $P3626, $P120
    .lex "$args", $P3626
.annotate 'line', 2605
    new $P121, "Undef"
    set $P3627, $P121
    .lex "$past", $P3627
.annotate 'line', 2603
    set $P3628, param_3624
    unless_null $P3628, vivify_3223
    $P3628 = root_new ['parrot';'Hash']
  vivify_3223:
    set $P123, $P3628["op"]
    unless_null $P123, vivify_3224
    new $P123, "Undef"
  vivify_3224:
    set $S100, $P123
    new $P124, 'String'
    set $P124, $S100
    set $P3625, $P124
.annotate 'line', 2604
    set $P3630, param_3624
    unless_null $P3630, vivify_3225
    $P3630 = root_new ['parrot';'Hash']
  vivify_3225:
    set $P124, $P3630["args"]
    unless_null $P124, vivify_3226
    new $P124, "Undef"
  vivify_3226:
    if $P124, if_3629
    new $P129, "ResizablePMCArray"
    set $P123, $P129
    goto if_3629_end
  if_3629:
    new $P125, "Float"
    assign $P125, 0
    set $I100, $P125
    set $P3631, param_3624
    unless_null $P3631, vivify_3227
    $P3631 = root_new ['parrot';'Hash']
  vivify_3227:
    set $P3632, $P3631["args"]
    unless_null $P3632, vivify_3228
    $P3632 = root_new ['parrot';'ResizablePMCArray']
  vivify_3228:
    set $P126, $P3632[$I100]
    unless_null $P126, vivify_3229
    new $P126, "Undef"
  vivify_3229:
    $P127 = $P126."ast"()
    $P128 = $P127."list"()
    set $P123, $P128
  if_3629_end:
    set $P3626, $P123
.annotate 'line', 2605
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Node"]
    set $P127, $P3626
    unless_null $P127, vivify_3230
    new $P127, "Undef"
  vivify_3230:
    set $P128, $P3625
    unless_null $P128, vivify_3231
    new $P128, "Undef"
  vivify_3231:
    set $P129, param_3624
    unless_null $P129, vivify_3232
    new $P129, "Undef"
  vivify_3232:
    $P131 = $P126."map_node"($P127 :flat, "nqp" :named("map"), $P128 :named("op"), $P129 :named("node"))
    set $P3627, $P131
.annotate 'line', 2608
    set $P123, $P3627
    unless_null $P123, vivify_3233
    new $P123, "Undef"
  vivify_3233:
    defined $I100, $P123
    if $I100, unless_3633_end
.annotate 'line', 2609
    set $P124, param_3624
    unless_null $P124, vivify_3234
    new $P124, "Undef"
  vivify_3234:
    $P125 = $P124."CURSOR"()
    new $P126, 'String'
    set $P126, "Unrecognized nqp:: opcode 'nqp::"
    set $P127, $P3625
    unless_null $P127, vivify_3235
    new $P127, "Undef"
  vivify_3235:
    concat $P128, $P126, $P127
    concat $P129, $P128, "'"
    $P125."panic"($P129)
  unless_3633_end:
.annotate 'line', 2610
    set $P123, param_3624
    set $P124, $P3627
    unless_null $P124, vivify_3236
    new $P124, "Undef"
  vivify_3236:
    $P125 = $P123."!make"($P124)
.annotate 'line', 2602
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<onlystar>" :anon :subid("499_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3635
    .param pmc param_3636
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2613
    .lex "self", param_3635
    .lex "$/", param_3636
.annotate 'line', 2614
    set $P118, param_3636
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
    $P125 = $P124."new"("multi_dispatch_over_lexical_candidates P" :named("pirop"))
    $P126 = $P118."!make"($P125)
.annotate 'line', 2613
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "args" :anon :subid("500_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3638
    .param pmc param_3639
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2619
    .lex "self", param_3638
    .lex "$/", param_3639
    set $P118, param_3639
    set $P3640, param_3639
    unless_null $P3640, vivify_3237
    $P3640 = root_new ['parrot';'Hash']
  vivify_3237:
    set $P120, $P3640["arglist"]
    unless_null $P120, vivify_3238
    new $P120, "Undef"
  vivify_3238:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "arglist" :anon :subid("501_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3642
    .param pmc param_3643
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2621
    .const 'Sub' $P3650 = "649_1334921493.34" 
    capture_lex $P3650
    .lex "self", param_3642
    .lex "$/", param_3643
.annotate 'line', 2622
    new $P118, "Undef"
    set $P3644, $P118
    .lex "$past", $P3644
.annotate 'line', 2630
    new $P120, "Undef"
    set $P3645, $P120
    .lex "$i", $P3645
.annotate 'line', 2631
    new $P121, "Undef"
    set $P3646, $P121
    .lex "$n", $P3646
.annotate 'line', 2622
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Op"]
    set $P127, param_3643
    unless_null $P127, vivify_3239
    new $P127, "Undef"
  vivify_3239:
    $P128 = $P126."new"("call" :named("pasttype"), $P127 :named("node"))
    set $P3644, $P128
.annotate 'line', 2623
    set $P3648, param_3643
    unless_null $P3648, vivify_3240
    $P3648 = root_new ['parrot';'Hash']
  vivify_3240:
    set $P123, $P3648["EXPR"]
    unless_null $P123, vivify_3241
    new $P123, "Undef"
  vivify_3241:
    unless $P123, if_3647_end
    .const 'Sub' $P3650 = "649_1334921493.34" 
    capture_lex $P3650
    $P3650()
  if_3647_end:
.annotate 'line', 2630
    new $P123, "Float"
    assign $P123, 0
    set $P3645, $P123
.annotate 'line', 2631
    set $P123, $P3644
    unless_null $P123, vivify_3252
    new $P123, "Undef"
  vivify_3252:
    $P124 = $P123."list"()
    set $N100, $P124
    new $P125, 'Float'
    set $P125, $N100
    set $P3646, $P125
.annotate 'line', 2632
    new $P125, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P125, loop3671_handler
    push_eh $P125
  loop3671_test:
    set $P123, $P3645
    unless_null $P123, vivify_3253
    new $P123, "Undef"
  vivify_3253:
    set $N100, $P123
    set $P124, $P3646
    unless_null $P124, vivify_3254
    new $P124, "Undef"
  vivify_3254:
    set $N101, $P124
    islt $I100, $N100, $N101
    unless $I100, loop3671_done
  loop3671_redo:
.annotate 'line', 2633
    set $P125, $P3645
    unless_null $P125, vivify_3255
    new $P125, "Undef"
  vivify_3255:
    set $I101, $P125
    set $P3660, $P3644
    unless_null $P3660, vivify_3256
    $P3660 = root_new ['parrot';'ResizablePMCArray']
  vivify_3256:
    set $P126, $P3660[$I101]
    unless_null $P126, vivify_3257
    new $P126, "Undef"
  vivify_3257:
    $S100 = $P126."name"()
    iseq $I102, $S100, "&prefix:<|>"
    unless $I102, if_3659_end
.annotate 'line', 2634
    new $P127, "Float"
    assign $P127, 0
    set $I103, $P127
    set $P128, $P3645
    unless_null $P128, vivify_3258
    new $P128, "Undef"
  vivify_3258:
    set $I104, $P128
    set $P3661, $P3644
    unless_null $P3661, vivify_3259
    $P3661 = root_new ['parrot';'ResizablePMCArray']
  vivify_3259:
    set $P3662, $P3661[$I104]
    unless_null $P3662, vivify_3260
    $P3662 = root_new ['parrot';'ResizablePMCArray']
  vivify_3260:
    set $P129, $P3662[$I103]
    unless_null $P129, vivify_3261
    new $P129, "Undef"
  vivify_3261:
    set $P131, $P3645
    unless_null $P131, vivify_3262
    new $P131, "Undef"
  vivify_3262:
    set $I105, $P131
    set $P3663, $P3644
    unless_null $P3663, vivify_3263
    $P3663 = root_new ['parrot';'ResizablePMCArray']
    set $P3644, $P3663
  vivify_3263:
    set $P3663[$I105], $P129
.annotate 'line', 2635
    set $P127, $P3645
    unless_null $P127, vivify_3264
    new $P127, "Undef"
  vivify_3264:
    set $I103, $P127
    set $P3664, $P3644
    unless_null $P3664, vivify_3265
    $P3664 = root_new ['parrot';'ResizablePMCArray']
  vivify_3265:
    set $P128, $P3664[$I103]
    unless_null $P128, vivify_3266
    new $P128, "Undef"
  vivify_3266:
    $P128."flat"(1)
.annotate 'line', 2636
    set $P128, $P3645
    unless_null $P128, vivify_3267
    new $P128, "Undef"
  vivify_3267:
    set $I103, $P128
    set $P3667, $P3644
    unless_null $P3667, vivify_3268
    $P3667 = root_new ['parrot';'ResizablePMCArray']
  vivify_3268:
    set $P129, $P3667[$I103]
    unless_null $P129, vivify_3269
    new $P129, "Undef"
  vivify_3269:
    get_hll_global $P131, "GLOBAL"
    nqp_get_package_through_who $P132, $P131, "PAST"
    get_who $P133, $P132
    set $P134, $P133["Val"]
    $P135 = $P129."isa"($P134)
    if $P135, if_3666
    set $P127, $P135
    goto if_3666_end
  if_3666:
.annotate 'line', 2637
    set $P136, $P3645
    unless_null $P136, vivify_3270
    new $P136, "Undef"
  vivify_3270:
    set $I104, $P136
    set $P3668, $P3644
    unless_null $P3668, vivify_3271
    $P3668 = root_new ['parrot';'ResizablePMCArray']
  vivify_3271:
    set $P137, $P3668[$I104]
    unless_null $P137, vivify_3272
    new $P137, "Undef"
  vivify_3272:
    $S101 = $P137."name"()
    new $P138, "Float"
    assign $P138, 0
    set $I105, $P138
    new $P139, "Float"
    assign $P139, 1
    set $I106, $P139
    substr $S102, $S101, $I105, $I106
    iseq $I107, $S102, "%"
    new $P127, 'Integer'
    set $P127, $I107
  if_3666_end:
    unless $P127, if_3665_end
.annotate 'line', 2638
    set $P140, $P3645
    unless_null $P140, vivify_3273
    new $P140, "Undef"
  vivify_3273:
    set $I108, $P140
    set $P3669, $P3644
    unless_null $P3669, vivify_3274
    $P3669 = root_new ['parrot';'ResizablePMCArray']
  vivify_3274:
    set $P141, $P3669[$I108]
    unless_null $P141, vivify_3275
    new $P141, "Undef"
  vivify_3275:
    $P141."named"(1)
  if_3665_end:
  if_3659_end:
.annotate 'line', 2632
    set $P125, $P3645
    unless_null $P125, vivify_3276
    new $P125, "Undef"
  vivify_3276:
    clone $P3670, $P125
    inc $P125
  loop3671_next:
    goto loop3671_test
  loop3671_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P126, exception, 'type'
    eq $P126, .CONTROL_LOOP_NEXT, loop3671_next
    eq $P126, .CONTROL_LOOP_REDO, loop3671_redo
  loop3671_done:
    pop_eh 
.annotate 'line', 2643
    set $P123, param_3643
    set $P124, $P3644
    unless_null $P124, vivify_3277
    new $P124, "Undef"
  vivify_3277:
    $P125 = $P123."!make"($P124)
.annotate 'line', 2621
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3649"  :anon :subid("649_1334921493.34") :outer("501_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2623
    .const 'Sub' $P3656 = "650_1334921493.34" 
    capture_lex $P3656
.annotate 'line', 2624
    new $P124, "Undef"
    set $P3651, $P124
    .lex "$expr", $P3651
    find_lex $P3652, "$/"
    unless_null $P3652, vivify_3242
    $P3652 = root_new ['parrot';'Hash']
  vivify_3242:
    set $P125, $P3652["EXPR"]
    unless_null $P125, vivify_3243
    new $P125, "Undef"
  vivify_3243:
    $P126 = $P125."ast"()
    set $P3651, $P126
.annotate 'line', 2625
    set $P127, $P3651
    unless_null $P127, vivify_3244
    new $P127, "Undef"
  vivify_3244:
    $S100 = $P127."name"()
    iseq $I100, $S100, "&infix:<,>"
    if $I100, if_3654
    new $P126, 'Integer'
    set $P126, $I100
    goto if_3654_end
  if_3654:
    set $P128, $P3651
    unless_null $P128, vivify_3245
    new $P128, "Undef"
  vivify_3245:
    $P129 = $P128."named"()
    isfalse $I101, $P129
    new $P126, 'Integer'
    set $P126, $I101
  if_3654_end:
    if $P126, if_3653
.annotate 'line', 2628
    find_lex $P132, "$past"
    unless_null $P132, vivify_3246
    new $P132, "Undef"
  vivify_3246:
    set $P133, $P3651
    unless_null $P133, vivify_3247
    new $P133, "Undef"
  vivify_3247:
    $P134 = $P132."push"($P133)
    set $P125, $P134
.annotate 'line', 2625
    goto if_3653_end
  if_3653:
.annotate 'line', 2626
    set $P132, $P3651
    unless_null $P132, vivify_3248
    new $P132, "Undef"
  vivify_3248:
    $P133 = $P132."list"()
    defined $I102, $P133
    unless $I102, for_undef_3249
    iter $P131, $P133
    new $P135, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P135, loop3658_handler
    push_eh $P135
  loop3658_test:
    unless $P131, loop3658_done
    shift $P134, $P131
  loop3658_redo:
    .const 'Sub' $P3656 = "650_1334921493.34" 
    capture_lex $P3656
    $P3656($P134)
  loop3658_next:
    goto loop3658_test
  loop3658_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P136, exception, 'type'
    eq $P136, .CONTROL_LOOP_NEXT, loop3658_next
    eq $P136, .CONTROL_LOOP_REDO, loop3658_redo
  loop3658_done:
    pop_eh 
  for_undef_3249:
.annotate 'line', 2625
    set $P125, $P131
  if_3653_end:
.annotate 'line', 2623
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3655"  :anon :subid("650_1334921493.34") :outer("649_1334921493.34")
    .param pmc param_3657
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2626
    .lex "$_", param_3657
    find_lex $P135, "$past"
    unless_null $P135, vivify_3250
    new $P135, "Undef"
  vivify_3250:
    find_lex $P136, "$_"
    unless_null $P136, vivify_3251
    new $P136, "Undef"
  vivify_3251:
    $P137 = $P135."push"($P136)
    .return ($P137)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<multi_declarator>" :anon :subid("502_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3673
    .param pmc param_3674
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2646
    .lex "self", param_3673
    .lex "$/", param_3674
    set $P118, param_3674
    set $P3675, param_3674
    unless_null $P3675, vivify_3278
    $P3675 = root_new ['parrot';'Hash']
  vivify_3278:
    set $P120, $P3675["multi_declarator"]
    unless_null $P120, vivify_3279
    new $P120, "Undef"
  vivify_3279:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<value>" :anon :subid("503_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3677
    .param pmc param_3678
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2648
    .lex "self", param_3677
    .lex "$/", param_3678
    set $P118, param_3678
    set $P3679, param_3678
    unless_null $P3679, vivify_3280
    $P3679 = root_new ['parrot';'Hash']
  vivify_3280:
    set $P120, $P3679["value"]
    unless_null $P120, vivify_3281
    new $P120, "Undef"
  vivify_3281:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<( )>" :anon :subid("504_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3681
    .param pmc param_3682
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2650
    .lex "self", param_3681
    .lex "$/", param_3682
.annotate 'line', 2651
    set $P118, param_3682
.annotate 'line', 2652
    set $P3684, param_3682
    unless_null $P3684, vivify_3282
    $P3684 = root_new ['parrot';'Hash']
  vivify_3282:
    set $P121, $P3684["EXPR"]
    unless_null $P121, vivify_3283
    new $P121, "Undef"
  vivify_3283:
    if $P121, if_3683
.annotate 'line', 2653
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Op"]
    set $P131, param_3682
    unless_null $P131, vivify_3284
    new $P131, "Undef"
  vivify_3284:
    $P132 = $P129."new"("list" :named("pasttype"), $P131 :named("node"))
    set $P120, $P132
.annotate 'line', 2652
    goto if_3683_end
  if_3683:
    new $P123, "Float"
    assign $P123, 0
    set $I100, $P123
    set $P3685, param_3682
    unless_null $P3685, vivify_3285
    $P3685 = root_new ['parrot';'Hash']
  vivify_3285:
    set $P3686, $P3685["EXPR"]
    unless_null $P3686, vivify_3286
    $P3686 = root_new ['parrot';'ResizablePMCArray']
  vivify_3286:
    set $P124, $P3686[$I100]
    unless_null $P124, vivify_3287
    new $P124, "Undef"
  vivify_3287:
    $P125 = $P124."ast"()
    set $P120, $P125
  if_3683_end:
    $P133 = $P118."!make"($P120)
.annotate 'line', 2650
    .return ($P133)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<[ ]>" :anon :subid("505_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3688
    .param pmc param_3689
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2656
    .lex "self", param_3688
    .lex "$/", param_3689
.annotate 'line', 2657
    new $P118, "Undef"
    set $P3690, $P118
    .lex "$past", $P3690
.annotate 'line', 2656
    set $P120, $P3690
    unless_null $P120, vivify_3288
    new $P120, "Undef"
  vivify_3288:
.annotate 'line', 2658
    set $P3692, param_3689
    unless_null $P3692, vivify_3289
    $P3692 = root_new ['parrot';'Hash']
  vivify_3289:
    set $P120, $P3692["EXPR"]
    unless_null $P120, vivify_3290
    new $P120, "Undef"
  vivify_3290:
    if $P120, if_3691
.annotate 'line', 2665
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Op"]
    $P126 = $P125."new"("list" :named("pasttype"))
    set $P3690, $P126
.annotate 'line', 2664
    goto if_3691_end
  if_3691:
.annotate 'line', 2659
    new $P121, "Float"
    assign $P121, 0
    set $I100, $P121
    set $P3693, param_3689
    unless_null $P3693, vivify_3291
    $P3693 = root_new ['parrot';'Hash']
  vivify_3291:
    set $P3694, $P3693["EXPR"]
    unless_null $P3694, vivify_3292
    $P3694 = root_new ['parrot';'ResizablePMCArray']
  vivify_3292:
    set $P123, $P3694[$I100]
    unless_null $P123, vivify_3293
    new $P123, "Undef"
  vivify_3293:
    $P124 = $P123."ast"()
    set $P3690, $P124
.annotate 'line', 2660
    set $P121, $P3690
    unless_null $P121, vivify_3294
    new $P121, "Undef"
  vivify_3294:
    $S100 = $P121."name"()
    isne $I100, $S100, "&infix:<,>"
    unless $I100, if_3695_end
.annotate 'line', 2661
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Op"]
    set $P127, $P3690
    unless_null $P127, vivify_3295
    new $P127, "Undef"
  vivify_3295:
    $P128 = $P126."new"($P127, "list" :named("pasttype"))
    set $P3690, $P128
  if_3695_end:
  if_3691_end:
.annotate 'line', 2667
    set $P120, $P3690
    unless_null $P120, vivify_3296
    new $P120, "Undef"
  vivify_3296:
    $P120."name"("&circumfix:<[ ]>")
.annotate 'line', 2668
    set $P120, param_3689
    set $P121, $P3690
    unless_null $P121, vivify_3297
    new $P121, "Undef"
  vivify_3297:
    $P123 = $P120."!make"($P121)
.annotate 'line', 2656
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<ang>" :anon :subid("506_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3697
    .param pmc param_3698
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2671
    .lex "self", param_3697
    .lex "$/", param_3698
    set $P118, param_3698
    set $P3699, param_3698
    unless_null $P3699, vivify_3298
    $P3699 = root_new ['parrot';'Hash']
  vivify_3298:
    set $P120, $P3699["quote_EXPR"]
    unless_null $P120, vivify_3299
    new $P120, "Undef"
  vivify_3299:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub unicode:"circumfix:sym<\x{ab} \x{bb}>" :anon :subid("507_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3701
    .param pmc param_3702
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2672
    .lex "self", param_3701
    .lex "$/", param_3702
    set $P118, param_3702
    set $P3703, param_3702
    unless_null $P3703, vivify_3300
    $P3703 = root_new ['parrot';'Hash']
  vivify_3300:
    set $P120, $P3703["quote_EXPR"]
    unless_null $P120, vivify_3301
    new $P120, "Undef"
  vivify_3301:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<{ }>" :anon :subid("508_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3705
    .param pmc param_3706
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2674
    .const 'Sub' $P3713 = "651_1334921493.34" 
    capture_lex $P3713
    .lex "self", param_3705
    .lex "$/", param_3706
.annotate 'line', 2675
    set $P3708, param_3706
    unless_null $P3708, vivify_3302
    $P3708 = root_new ['parrot';'Hash']
  vivify_3302:
    set $P3709, $P3708["pblock"]
    unless_null $P3709, vivify_3303
    $P3709 = root_new ['parrot';'Hash']
  vivify_3303:
    set $P3710, $P3709["blockoid"]
    unless_null $P3710, vivify_3304
    $P3710 = root_new ['parrot';'Hash']
  vivify_3304:
    set $P3711, $P3710["statementlist"]
    unless_null $P3711, vivify_3305
    $P3711 = root_new ['parrot';'Hash']
  vivify_3305:
    set $P120, $P3711["statement"]
    unless_null $P120, vivify_3306
    new $P120, "Undef"
  vivify_3306:
    set $N100, $P120
    set $N101, 0
    isgt $I100, $N100, $N101
    if $I100, if_3707
.annotate 'line', 2680
    set $P3718, param_3706
    unless_null $P3718, vivify_3307
    $P3718 = root_new ['parrot';'Hash']
  vivify_3307:
    set $P3719, $P3718["pblock"]
    unless_null $P3719, vivify_3308
    $P3719 = root_new ['parrot';'Hash']
  vivify_3308:
    set $P3720, $P3719["blockoid"]
    unless_null $P3720, vivify_3309
    $P3720 = root_new ['parrot';'Hash']
  vivify_3309:
    set $P126, $P3720["you_are_here"]
    unless_null $P126, vivify_3310
    new $P126, "Undef"
  vivify_3310:
    if $P126, if_3717
.annotate 'line', 2684
    set $P127, param_3706
    $P128 = "vivitype"("%")
    $P129 = $P127."!make"($P128)
.annotate 'line', 2683
    set $P124, $P129
.annotate 'line', 2680
    goto if_3717_end
  if_3717:
.annotate 'line', 2681
    set $P127, param_3706
    set $P3721, param_3706
    unless_null $P3721, vivify_3311
    $P3721 = root_new ['parrot';'Hash']
  vivify_3311:
    set $P128, $P3721["pblock"]
    unless_null $P128, vivify_3312
    new $P128, "Undef"
  vivify_3312:
    $P129 = $P128."ast"()
    $P131 = $P127."!make"($P129)
.annotate 'line', 2680
    set $P124, $P131
  if_3717_end:
    set $P118, $P124
.annotate 'line', 2675
    goto if_3707_end
  if_3707:
    .const 'Sub' $P3713 = "651_1334921493.34" 
    capture_lex $P3713
    $P123 = $P3713()
    set $P118, $P123
  if_3707_end:
.annotate 'line', 2674
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3712"  :anon :subid("651_1334921493.34") :outer("508_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2676
    new $P121, "Undef"
    set $P3714, $P121
    .lex "$past", $P3714
    find_lex $P3715, "$/"
    unless_null $P3715, vivify_3313
    $P3715 = root_new ['parrot';'Hash']
  vivify_3313:
    set $P123, $P3715["pblock"]
    unless_null $P123, vivify_3314
    new $P123, "Undef"
  vivify_3314:
    $P124 = $P123."ast"()
    set $P3714, $P124
.annotate 'line', 2677
    new $P123, "Float"
    assign $P123, 1
    set $P3716, $P3714
    unless_null $P3716, vivify_3315
    $P3716 = root_new ['parrot';'Hash']
    set $P3714, $P3716
  vivify_3315:
    set $P3716["bareblock"], $P123
.annotate 'line', 2678
    find_dynamic_lex $P123, "$/"
    set $P124, $P3714
    unless_null $P124, vivify_3316
    new $P124, "Undef"
  vivify_3316:
    $P125 = $P123."!make"($P124)
.annotate 'line', 2675
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<sigil>" :anon :subid("509_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3723
    .param pmc param_3724
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2688
    .lex "self", param_3723
    .lex "$/", param_3724
.annotate 'line', 2689
    new $P118, "Undef"
    set $P3725, $P118
    .lex "$name", $P3725
    set $P3727, param_3724
    unless_null $P3727, vivify_3317
    $P3727 = root_new ['parrot';'Hash']
  vivify_3317:
    set $P121, $P3727["sigil"]
    unless_null $P121, vivify_3318
    new $P121, "Undef"
  vivify_3318:
    set $S100, $P121
    iseq $I100, $S100, "@"
    if $I100, if_3726
.annotate 'line', 2690
    set $P3729, param_3724
    unless_null $P3729, vivify_3319
    $P3729 = root_new ['parrot';'Hash']
  vivify_3319:
    set $P125, $P3729["sigil"]
    unless_null $P125, vivify_3320
    new $P125, "Undef"
  vivify_3320:
    set $S101, $P125
    iseq $I101, $S101, "%"
    if $I101, if_3728
    new $P127, "String"
    assign $P127, "item"
    set $P124, $P127
    goto if_3728_end
  if_3728:
    new $P126, "String"
    assign $P126, "hash"
    set $P124, $P126
  if_3728_end:
    set $P120, $P124
.annotate 'line', 2689
    goto if_3726_end
  if_3726:
    new $P123, "String"
    assign $P123, "list"
    set $P120, $P123
  if_3726_end:
    set $P3725, $P120
.annotate 'line', 2692
    set $P120, param_3724
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Op"]
    set $P126, $P3725
    unless_null $P126, vivify_3321
    new $P126, "Undef"
  vivify_3321:
    set $P3730, param_3724
    unless_null $P3730, vivify_3322
    $P3730 = root_new ['parrot';'Hash']
  vivify_3322:
    set $P127, $P3730["semilist"]
    unless_null $P127, vivify_3323
    new $P127, "Undef"
  vivify_3323:
    $P128 = $P127."ast"()
    $P129 = $P125."new"($P128, "callmethod" :named("pasttype"), $P126 :named("name"))
    $P131 = $P120."!make"($P129)
.annotate 'line', 2688
    .return ($P131)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "semilist" :anon :subid("510_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3732
    .param pmc param_3733
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2695
    .lex "self", param_3732
    .lex "$/", param_3733
    set $P118, param_3733
    set $P3734, param_3733
    unless_null $P3734, vivify_3324
    $P3734 = root_new ['parrot';'Hash']
  vivify_3324:
    set $P120, $P3734["statement"]
    unless_null $P120, vivify_3325
    new $P120, "Undef"
  vivify_3325:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<[ ]>" :anon :subid("511_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3736
    .param pmc param_3737
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2697
    .lex "self", param_3736
    .lex "$/", param_3737
.annotate 'line', 2698
    set $P118, param_3737
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Var"]
    set $P3738, param_3737
    unless_null $P3738, vivify_3326
    $P3738 = root_new ['parrot';'Hash']
  vivify_3326:
    set $P125, $P3738["EXPR"]
    unless_null $P125, vivify_3327
    new $P125, "Undef"
  vivify_3327:
    $P126 = $P125."ast"()
.annotate 'line', 2700
    $P127 = "vivitype"("@")
.annotate 'line', 2698
    $P128 = $P124."new"($P126, "keyed_int" :named("scope"), "Undef" :named("viviself"), $P127 :named("vivibase"))
    $P129 = $P118."!make"($P128)
.annotate 'line', 2697
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<{ }>" :anon :subid("512_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3740
    .param pmc param_3741
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2703
    .lex "self", param_3740
    .lex "$/", param_3741
.annotate 'line', 2704
    set $P118, param_3741
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Var"]
    set $P3742, param_3741
    unless_null $P3742, vivify_3328
    $P3742 = root_new ['parrot';'Hash']
  vivify_3328:
    set $P125, $P3742["EXPR"]
    unless_null $P125, vivify_3329
    new $P125, "Undef"
  vivify_3329:
    $P126 = $P125."ast"()
.annotate 'line', 2706
    $P127 = "vivitype"("%")
.annotate 'line', 2704
    $P128 = $P124."new"($P126, "keyed" :named("scope"), "Undef" :named("viviself"), $P127 :named("vivibase"))
    $P129 = $P118."!make"($P128)
.annotate 'line', 2703
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<ang>" :anon :subid("513_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3744
    .param pmc param_3745
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2709
    .lex "self", param_3744
    .lex "$/", param_3745
.annotate 'line', 2710
    set $P118, param_3745
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Var"]
    set $P3746, param_3745
    unless_null $P3746, vivify_3330
    $P3746 = root_new ['parrot';'Hash']
  vivify_3330:
    set $P125, $P3746["quote_EXPR"]
    unless_null $P125, vivify_3331
    new $P125, "Undef"
  vivify_3331:
    $P126 = $P125."ast"()
.annotate 'line', 2712
    $P127 = "vivitype"("%")
.annotate 'line', 2710
    $P128 = $P124."new"($P126, "keyed" :named("scope"), "Undef" :named("viviself"), $P127 :named("vivibase"))
    $P129 = $P118."!make"($P128)
.annotate 'line', 2709
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<( )>" :anon :subid("514_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3748
    .param pmc param_3749
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2715
    .lex "self", param_3748
    .lex "$/", param_3749
.annotate 'line', 2716
    set $P118, param_3749
    set $P3750, param_3749
    unless_null $P3750, vivify_3332
    $P3750 = root_new ['parrot';'Hash']
  vivify_3332:
    set $P120, $P3750["arglist"]
    unless_null $P120, vivify_3333
    new $P120, "Undef"
  vivify_3333:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
.annotate 'line', 2715
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "value" :anon :subid("515_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3752
    .param pmc param_3753
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2719
    .lex "self", param_3752
    .lex "$/", param_3753
.annotate 'line', 2720
    set $P118, param_3753
    set $P3755, param_3753
    unless_null $P3755, vivify_3334
    $P3755 = root_new ['parrot';'Hash']
  vivify_3334:
    set $P121, $P3755["quote"]
    unless_null $P121, vivify_3335
    new $P121, "Undef"
  vivify_3335:
    if $P121, if_3754
    set $P3757, param_3753
    unless_null $P3757, vivify_3336
    $P3757 = root_new ['parrot';'Hash']
  vivify_3336:
    set $P125, $P3757["number"]
    unless_null $P125, vivify_3337
    new $P125, "Undef"
  vivify_3337:
    $P126 = $P125."ast"()
    set $P120, $P126
    goto if_3754_end
  if_3754:
    set $P3756, param_3753
    unless_null $P3756, vivify_3338
    $P3756 = root_new ['parrot';'Hash']
  vivify_3338:
    set $P123, $P3756["quote"]
    unless_null $P123, vivify_3339
    new $P123, "Undef"
  vivify_3339:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3754_end:
    $P127 = $P118."!make"($P120)
.annotate 'line', 2719
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "number" :anon :subid("516_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3759
    .param pmc param_3760
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2723
    .lex "self", param_3759
    .lex "$/", param_3760
.annotate 'line', 2724
    new $P118, "Undef"
    set $P3761, $P118
    .lex "$value", $P3761
    set $P3763, param_3760
    unless_null $P3763, vivify_3340
    $P3763 = root_new ['parrot';'Hash']
  vivify_3340:
    set $P121, $P3763["dec_number"]
    unless_null $P121, vivify_3341
    new $P121, "Undef"
  vivify_3341:
    if $P121, if_3762
    set $P3765, param_3760
    unless_null $P3765, vivify_3342
    $P3765 = root_new ['parrot';'Hash']
  vivify_3342:
    set $P125, $P3765["integer"]
    unless_null $P125, vivify_3343
    new $P125, "Undef"
  vivify_3343:
    $P126 = $P125."ast"()
    set $P120, $P126
    goto if_3762_end
  if_3762:
    set $P3764, param_3760
    unless_null $P3764, vivify_3344
    $P3764 = root_new ['parrot';'Hash']
  vivify_3344:
    set $P123, $P3764["dec_number"]
    unless_null $P123, vivify_3345
    new $P123, "Undef"
  vivify_3345:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3762_end:
    set $P3761, $P120
.annotate 'line', 2725
    set $P3767, param_3760
    unless_null $P3767, vivify_3346
    $P3767 = root_new ['parrot';'Hash']
  vivify_3346:
    set $P120, $P3767["sign"]
    unless_null $P120, vivify_3347
    new $P120, "Undef"
  vivify_3347:
    set $S100, $P120
    iseq $I100, $S100, "-"
    unless $I100, if_3766_end
    set $P121, $P3761
    unless_null $P121, vivify_3348
    new $P121, "Undef"
  vivify_3348:
    neg $P123, $P121
    set $P3761, $P123
  if_3766_end:
.annotate 'line', 2726
    set $P120, param_3760
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Val"]
    set $P126, $P3761
    unless_null $P126, vivify_3349
    new $P126, "Undef"
  vivify_3349:
    $P127 = $P125."new"($P126 :named("value"))
    $P128 = $P120."!make"($P127)
.annotate 'line', 2723
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<apos>" :anon :subid("517_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3769
    .param pmc param_3770
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2729
    .lex "self", param_3769
    .lex "$/", param_3770
    set $P118, param_3770
    set $P3771, param_3770
    unless_null $P3771, vivify_3350
    $P3771 = root_new ['parrot';'Hash']
  vivify_3350:
    set $P120, $P3771["quote_EXPR"]
    unless_null $P120, vivify_3351
    new $P120, "Undef"
  vivify_3351:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<dblq>" :anon :subid("518_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3773
    .param pmc param_3774
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2730
    .lex "self", param_3773
    .lex "$/", param_3774
    set $P118, param_3774
    set $P3775, param_3774
    unless_null $P3775, vivify_3352
    $P3775 = root_new ['parrot';'Hash']
  vivify_3352:
    set $P120, $P3775["quote_EXPR"]
    unless_null $P120, vivify_3353
    new $P120, "Undef"
  vivify_3353:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<qq>" :anon :subid("519_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3777
    .param pmc param_3778
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2731
    .lex "self", param_3777
    .lex "$/", param_3778
    set $P118, param_3778
    set $P3779, param_3778
    unless_null $P3779, vivify_3354
    $P3779 = root_new ['parrot';'Hash']
  vivify_3354:
    set $P120, $P3779["quote_EXPR"]
    unless_null $P120, vivify_3355
    new $P120, "Undef"
  vivify_3355:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<q>" :anon :subid("520_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3781
    .param pmc param_3782
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2732
    .lex "self", param_3781
    .lex "$/", param_3782
    set $P118, param_3782
    set $P3783, param_3782
    unless_null $P3783, vivify_3356
    $P3783 = root_new ['parrot';'Hash']
  vivify_3356:
    set $P120, $P3783["quote_EXPR"]
    unless_null $P120, vivify_3357
    new $P120, "Undef"
  vivify_3357:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<Q>" :anon :subid("521_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3785
    .param pmc param_3786
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2733
    .lex "self", param_3785
    .lex "$/", param_3786
    set $P118, param_3786
    set $P3787, param_3786
    unless_null $P3787, vivify_3358
    $P3787 = root_new ['parrot';'Hash']
  vivify_3358:
    set $P120, $P3787["quote_EXPR"]
    unless_null $P120, vivify_3359
    new $P120, "Undef"
  vivify_3359:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<Q:PIR>" :anon :subid("522_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3789
    .param pmc param_3790
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2734
    .lex "self", param_3789
    .lex "$/", param_3790
.annotate 'line', 2735
    set $P118, param_3790
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
    set $P3791, param_3790
    unless_null $P3791, vivify_3360
    $P3791 = root_new ['parrot';'Hash']
  vivify_3360:
    set $P125, $P3791["quote_EXPR"]
    unless_null $P125, vivify_3361
    new $P125, "Undef"
  vivify_3361:
    $P126 = $P125."ast"()
    $P127 = $P126."value"()
    set $P128, param_3790
    unless_null $P128, vivify_3362
    new $P128, "Undef"
  vivify_3362:
    $P129 = $P124."new"($P127 :named("inline"), "inline" :named("pasttype"), $P128 :named("node"))
    $P131 = $P118."!make"($P129)
.annotate 'line', 2734
    .return ($P131)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "quote:sym</ />" :anon :subid("523_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3795
    .param pmc param_3796
    .param pmc param_3797 :optional
    .param int has_param_3797 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2740
    new $P3794, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P3794, control_3793
    push_eh $P3794
    .lex "self", param_3795
    .lex "$/", param_3796
    if has_param_3797, optparam_3363
    new $P118, "Undef"
    set param_3797, $P118
  optparam_3363:
    .lex "$key", param_3797
.annotate 'line', 2747
    new $P120, "Undef"
    set $P3798, $P120
    .lex "$regex", $P3798
.annotate 'line', 2749
    new $P121, "Undef"
    set $P3799, $P121
    .lex "$past", $P3799
.annotate 'line', 2741
    set $P123, param_3797
    unless_null $P123, vivify_3364
    new $P123, "Undef"
  vivify_3364:
    set $S100, $P123
    iseq $I100, $S100, "open"
    unless $I100, if_3800_end
.annotate 'line', 2742
    null $P124
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "Regex"
    nqp_get_package_through_who $P127, $P126, "P6Regex"
    nqp_get_package_through_who $P128, $P127, "Actions"
    get_who $P129, $P128
    set $P129["$REGEXNAME"], $P124
.annotate 'line', 2743
    find_dynamic_lex $P126, "$*W"
    unless_null $P126, vivify_3365
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$W"]
    unless_null $P126, vivify_3366
    die "Contextual $*W not found"
  vivify_3366:
  vivify_3365:
    $P127 = $P126."cur_lexpad"()
    $P127."symbol"(unicode:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2744
    find_dynamic_lex $P126, "$*W"
    unless_null $P126, vivify_3367
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$W"]
    unless_null $P126, vivify_3368
    die "Contextual $*W not found"
  vivify_3368:
  vivify_3367:
    $P127 = $P126."cur_lexpad"()
    $P127."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2745
    new $P124, "Exception"
    set $P124['type'], .CONTROL_RETURN
    new $P125, "Float"
    assign $P125, 0
    setattribute $P124, 'payload', $P125
    throw $P124
  if_3800_end:
.annotate 'line', 2748
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "Regex"
    nqp_get_package_through_who $P125, $P124, "P6Regex"
    nqp_get_package_through_who $P126, $P125, "Actions"
    get_who $P127, $P126
    set $P128, $P127["buildsub"]
    set $P3801, param_3796
    unless_null $P3801, vivify_3369
    $P3801 = root_new ['parrot';'Hash']
  vivify_3369:
    set $P129, $P3801["p6regex"]
    unless_null $P129, vivify_3370
    new $P129, "Undef"
  vivify_3370:
    $P131 = $P129."ast"()
    find_dynamic_lex $P134, "$*W"
    unless_null $P134, vivify_3371
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$W"]
    unless_null $P134, vivify_3372
    die "Contextual $*W not found"
  vivify_3372:
  vivify_3371:
    $P135 = $P134."pop_lexpad"()
    $P136 = $P128($P131, $P135)
    set $P3798, $P136
.annotate 'line', 2750
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Op"]
.annotate 'line', 2752
    new $P127, "ResizablePMCArray"
    push $P127, "Regex"
    push $P127, "Regex"
    set $P128, param_3796
    unless_null $P128, vivify_3373
    new $P128, "Undef"
  vivify_3373:
    $P129 = "lexical_package_lookup"($P127, $P128)
    set $P131, $P3798
    unless_null $P131, vivify_3374
    new $P131, "Undef"
  vivify_3374:
    $P132 = $P126."new"($P129, $P131, "callmethod" :named("pasttype"), "new" :named("name"))
.annotate 'line', 2750
    set $P3799, $P132
.annotate 'line', 2756
    set $P123, $P3798
    unless_null $P123, vivify_3375
    new $P123, "Undef"
  vivify_3375:
    set $P3802, $P3799
    unless_null $P3802, vivify_3376
    $P3802 = root_new ['parrot';'Hash']
    set $P3799, $P3802
  vivify_3376:
    set $P3802["sink"], $P123
.annotate 'line', 2757
    set $P123, param_3796
    set $P124, $P3799
    unless_null $P124, vivify_3377
    new $P124, "Undef"
  vivify_3377:
    $P125 = $P123."!make"($P124)
.annotate 'line', 2740
    .return ($P125)
  control_3793:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P123, exception, "payload"
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote_escape:sym<$>" :anon :subid("524_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3804
    .param pmc param_3805
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2760
    .lex "self", param_3804
    .lex "$/", param_3805
    set $P118, param_3805
    set $P3806, param_3805
    unless_null $P3806, vivify_3378
    $P3806 = root_new ['parrot';'Hash']
  vivify_3378:
    set $P120, $P3806["variable"]
    unless_null $P120, vivify_3379
    new $P120, "Undef"
  vivify_3379:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote_escape:sym<{ }>" :anon :subid("525_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3808
    .param pmc param_3809
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2761
    .lex "self", param_3808
    .lex "$/", param_3809
.annotate 'line', 2762
    set $P118, param_3809
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
.annotate 'line', 2763
    set $P3810, param_3809
    unless_null $P3810, vivify_3380
    $P3810 = root_new ['parrot';'Hash']
  vivify_3380:
    set $P125, $P3810["block"]
    unless_null $P125, vivify_3381
    new $P125, "Undef"
  vivify_3381:
    $P126 = $P125."ast"()
    $P127 = "block_immediate"($P126)
    set $P128, param_3809
    unless_null $P128, vivify_3382
    new $P128, "Undef"
  vivify_3382:
    $P129 = $P124."new"($P127, "set S*" :named("pirop"), $P128 :named("node"))
.annotate 'line', 2762
    $P131 = $P118."!make"($P129)
.annotate 'line', 2761
    .return ($P131)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote_escape:sym<esc>" :anon :subid("526_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3812
    .param pmc param_3813
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2766
    .lex "self", param_3812
    .lex "$/", param_3813
    set $P118, param_3813
    $P120 = $P118."!make"("\e")
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postfix:sym<.>" :anon :subid("527_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3815
    .param pmc param_3816
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2770
    .lex "self", param_3815
    .lex "$/", param_3816
    set $P118, param_3816
    set $P3817, param_3816
    unless_null $P3817, vivify_3383
    $P3817 = root_new ['parrot';'Hash']
  vivify_3383:
    set $P120, $P3817["dotty"]
    unless_null $P120, vivify_3384
    new $P120, "Undef"
  vivify_3384:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postfix:sym<++>" :anon :subid("528_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3819
    .param pmc param_3820
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2772
    .lex "self", param_3819
    .lex "$/", param_3820
.annotate 'line', 2773
    set $P118, param_3820
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
.annotate 'line', 2774
    new $P125, "ResizablePMCArray"
    push $P125, "    clone %r, %0"
    push $P125, "    inc %0"
.annotate 'line', 2773
    $P126 = $P124."new"("postfix:<++>" :named("name"), $P125 :named("inline"), "inline" :named("pasttype"))
    $P127 = $P118."!make"($P126)
.annotate 'line', 2772
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postfix:sym<-->" :anon :subid("529_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3822
    .param pmc param_3823
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2778
    .lex "self", param_3822
    .lex "$/", param_3823
.annotate 'line', 2779
    set $P118, param_3823
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
.annotate 'line', 2780
    new $P125, "ResizablePMCArray"
    push $P125, "    clone %r, %0"
    push $P125, "    dec %0"
.annotate 'line', 2779
    $P126 = $P124."new"("postfix:<-->" :named("name"), $P125 :named("inline"), "inline" :named("pasttype"))
    $P127 = $P118."!make"($P126)
.annotate 'line', 2778
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "prefix:sym<make>" :anon :subid("530_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3825
    .param pmc param_3826
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2784
    .lex "self", param_3825
    .lex "$/", param_3826
.annotate 'line', 2785
    set $P118, param_3826
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
.annotate 'line', 2786
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
    $P129 = $P128."new"("$/" :named("name"), "contextual" :named("scope"))
    set $P131, param_3826
    unless_null $P131, vivify_3385
    new $P131, "Undef"
  vivify_3385:
    $P132 = $P124."new"($P129, "callmethod" :named("pasttype"), "!make" :named("name"), $P131 :named("node"))
.annotate 'line', 2785
    $P133 = $P118."!make"($P132)
.annotate 'line', 2784
    .return ($P133)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<next>" :anon :subid("531_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3828
    .param pmc param_3829
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2802
    .lex "self", param_3828
    .lex "$/", param_3829
    set $P118, param_3829
    unless_null $P118, vivify_3386
    new $P118, "Undef"
  vivify_3386:
    $P120 = "control"($P118, "CONTROL_LOOP_NEXT")
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<last>" :anon :subid("532_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3831
    .param pmc param_3832
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2803
    .lex "self", param_3831
    .lex "$/", param_3832
    set $P118, param_3832
    unless_null $P118, vivify_3387
    new $P118, "Undef"
  vivify_3387:
    $P120 = "control"($P118, "CONTROL_LOOP_LAST")
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<redo>" :anon :subid("533_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3834
    .param pmc param_3835
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2804
    .lex "self", param_3834
    .lex "$/", param_3835
    set $P118, param_3835
    unless_null $P118, vivify_3388
    new $P118, "Undef"
  vivify_3388:
    $P120 = "control"($P118, "CONTROL_LOOP_REDO")
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "infix:sym<~~>" :anon :subid("534_1334921493.34") :outer("591_1334921493.34")
    .param pmc param_3837
    .param pmc param_3838
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2806
    .lex "self", param_3837
    .lex "$/", param_3838
.annotate 'line', 2807
    set $P118, param_3838
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
    set $P125, param_3838
    unless_null $P125, vivify_3389
    new $P125, "Undef"
  vivify_3389:
    $P126 = $P124."new"("callmethod" :named("pasttype"), "ACCEPTS" :named("name"), $P125 :named("node"))
    $P127 = $P118."!make"($P126)
.annotate 'line', 2806
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "_block3839"  :subid("652_1334921493.34") :outer("542_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2860
    .const 'Sub' $P3869 = "541_1334921493.34" 
    capture_lex $P3869
    .const 'Sub' $P3865 = "540_1334921493.34" 
    capture_lex $P3865
    .const 'Sub' $P3860 = "539_1334921493.34" 
    capture_lex $P3860
    .const 'Sub' $P3856 = "538_1334921493.34" 
    capture_lex $P3856
    .const 'Sub' $P3852 = "537_1334921493.34" 
    capture_lex $P3852
    .const 'Sub' $P3848 = "536_1334921493.34" 
    capture_lex $P3848
    .const 'Sub' $P3843 = "535_1334921493.34" 
    capture_lex $P3843
    .lex "$?PACKAGE", $P3841
    .lex "$?CLASS", $P3842
.annotate 'line', 2894
    .const 'Sub' $P3869 = "541_1334921493.34" 
    newclosure $P3875, $P3869
.annotate 'line', 2860
    .return ($P3875)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "metachar:sym<:my>" :anon :subid("535_1334921493.34") :outer("652_1334921493.34")
    .param pmc param_3844
    .param pmc param_3845
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2862
    .lex "self", param_3844
    .lex "$/", param_3845
.annotate 'line', 2863
    new $P103, "Undef"
    set $P3846, $P103
    .lex "$past", $P3846
    set $P3847, param_3845
    unless_null $P3847, vivify_3390
    $P3847 = root_new ['parrot';'Hash']
  vivify_3390:
    set $P104, $P3847["statement"]
    unless_null $P104, vivify_3391
    new $P104, "Undef"
  vivify_3391:
    $P105 = $P104."ast"()
    set $P3846, $P105
.annotate 'line', 2864
    set $P104, param_3845
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Regex"]
    set $P109, $P3846
    unless_null $P109, vivify_3392
    new $P109, "Undef"
  vivify_3392:
    set $P110, param_3845
    unless_null $P110, vivify_3393
    new $P110, "Undef"
  vivify_3393:
    $P111 = $P108."new"($P109, "pastnode" :named("pasttype"), "declarative" :named("subtype"), $P110 :named("node"))
    $P112 = $P104."!make"($P111)
.annotate 'line', 2862
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "metachar:sym<{ }>" :anon :subid("536_1334921493.34") :outer("652_1334921493.34")
    .param pmc param_3849
    .param pmc param_3850
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2868
    .lex "self", param_3849
    .lex "$/", param_3850
.annotate 'line', 2869
    set $P103, param_3850
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "PAST"
    get_who $P106, $P105
    set $P107, $P106["Regex"]
    set $P3851, param_3850
    unless_null $P3851, vivify_3394
    $P3851 = root_new ['parrot';'Hash']
  vivify_3394:
    set $P108, $P3851["codeblock"]
    unless_null $P108, vivify_3395
    new $P108, "Undef"
  vivify_3395:
    $P109 = $P108."ast"()
    set $P110, param_3850
    unless_null $P110, vivify_3396
    new $P110, "Undef"
  vivify_3396:
    $P111 = $P107."new"($P109, "pastnode" :named("pasttype"), $P110 :named("node"))
    $P112 = $P103."!make"($P111)
.annotate 'line', 2868
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "metachar:sym<nqpvar>" :anon :subid("537_1334921493.34") :outer("652_1334921493.34")
    .param pmc param_3853
    .param pmc param_3854
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2873
    .lex "self", param_3853
    .lex "$/", param_3854
.annotate 'line', 2874
    set $P103, param_3854
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "PAST"
    get_who $P106, $P105
    set $P107, $P106["Regex"]
    set $P3855, param_3854
    unless_null $P3855, vivify_3397
    $P3855 = root_new ['parrot';'Hash']
  vivify_3397:
    set $P108, $P3855["var"]
    unless_null $P108, vivify_3398
    new $P108, "Undef"
  vivify_3398:
    $P109 = $P108."ast"()
    set $P110, param_3854
    unless_null $P110, vivify_3399
    new $P110, "Undef"
  vivify_3399:
    $P111 = $P107."new"("!INTERPOLATE", $P109, "subrule" :named("pasttype"), "method" :named("subtype"), $P110 :named("node"))
    $P112 = $P103."!make"($P111)
.annotate 'line', 2873
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "assertion:sym<{ }>" :anon :subid("538_1334921493.34") :outer("652_1334921493.34")
    .param pmc param_3857
    .param pmc param_3858
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2878
    .lex "self", param_3857
    .lex "$/", param_3858
.annotate 'line', 2879
    set $P103, param_3858
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "PAST"
    get_who $P106, $P105
    set $P107, $P106["Regex"]
    set $P3859, param_3858
    unless_null $P3859, vivify_3400
    $P3859 = root_new ['parrot';'Hash']
  vivify_3400:
    set $P108, $P3859["codeblock"]
    unless_null $P108, vivify_3401
    new $P108, "Undef"
  vivify_3401:
    $P109 = $P108."ast"()
    set $P110, param_3858
    unless_null $P110, vivify_3402
    new $P110, "Undef"
  vivify_3402:
    $P111 = $P107."new"("!INTERPOLATE_REGEX", $P109, "subrule" :named("pasttype"), "method" :named("subtype"), $P110 :named("node"))
    $P112 = $P103."!make"($P111)
.annotate 'line', 2878
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "assertion:sym<?{ }>" :anon :subid("539_1334921493.34") :outer("652_1334921493.34")
    .param pmc param_3861
    .param pmc param_3862
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2883
    .lex "self", param_3861
    .lex "$/", param_3862
.annotate 'line', 2884
    set $P103, param_3862
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "PAST"
    get_who $P106, $P105
    set $P107, $P106["Regex"]
    set $P3863, param_3862
    unless_null $P3863, vivify_3403
    $P3863 = root_new ['parrot';'Hash']
  vivify_3403:
    set $P108, $P3863["codeblock"]
    unless_null $P108, vivify_3404
    new $P108, "Undef"
  vivify_3404:
    $P109 = $P108."ast"()
.annotate 'line', 2885
    set $P3864, param_3862
    unless_null $P3864, vivify_3405
    $P3864 = root_new ['parrot';'Hash']
  vivify_3405:
    set $P110, $P3864["zw"]
    unless_null $P110, vivify_3406
    new $P110, "Undef"
  vivify_3406:
    set $S100, $P110
    iseq $I100, $S100, "!"
.annotate 'line', 2884
    set $P111, param_3862
    unless_null $P111, vivify_3407
    new $P111, "Undef"
  vivify_3407:
    $P112 = $P107."new"($P109, "zerowidth" :named("subtype"), $I100 :named("negate"), "pastnode" :named("pasttype"), $P111 :named("node"))
    $P113 = $P103."!make"($P112)
.annotate 'line', 2883
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "assertion:sym<var>" :anon :subid("540_1334921493.34") :outer("652_1334921493.34")
    .param pmc param_3866
    .param pmc param_3867
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2889
    .lex "self", param_3866
    .lex "$/", param_3867
.annotate 'line', 2890
    set $P103, param_3867
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "PAST"
    get_who $P106, $P105
    set $P107, $P106["Regex"]
    set $P3868, param_3867
    unless_null $P3868, vivify_3408
    $P3868 = root_new ['parrot';'Hash']
  vivify_3408:
    set $P108, $P3868["var"]
    unless_null $P108, vivify_3409
    new $P108, "Undef"
  vivify_3409:
    $P109 = $P108."ast"()
    set $P110, param_3867
    unless_null $P110, vivify_3410
    new $P110, "Undef"
  vivify_3410:
    $P111 = $P107."new"("!INTERPOLATE_REGEX", $P109, "subrule" :named("pasttype"), "method" :named("subtype"), $P110 :named("node"))
    $P112 = $P103."!make"($P111)
.annotate 'line', 2889
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "codeblock" :anon :subid("541_1334921493.34") :outer("652_1334921493.34")
    .param pmc param_3870
    .param pmc param_3871
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2894
    .lex "self", param_3870
    .lex "$/", param_3871
.annotate 'line', 2895
    new $P103, "Undef"
    set $P3872, $P103
    .lex "$block", $P3872
.annotate 'line', 2897
    new $P104, "Undef"
    set $P3873, $P104
    .lex "$past", $P3873
.annotate 'line', 2895
    set $P3874, param_3871
    unless_null $P3874, vivify_3411
    $P3874 = root_new ['parrot';'Hash']
  vivify_3411:
    set $P105, $P3874["block"]
    unless_null $P105, vivify_3412
    new $P105, "Undef"
  vivify_3412:
    $P106 = $P105."ast"()
    set $P3872, $P106
.annotate 'line', 2896
    set $P105, $P3872
    unless_null $P105, vivify_3413
    new $P105, "Undef"
  vivify_3413:
    $P105."blocktype"("immediate")
.annotate 'line', 2898
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Stmts"]
.annotate 'line', 2899
    get_hll_global $P109, "GLOBAL"
    nqp_get_package_through_who $P110, $P109, "PAST"
    get_who $P111, $P110
    set $P112, $P111["Op"]
.annotate 'line', 2900
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Var"]
    $P117 = $P116."new"("$/" :named("name"))
.annotate 'line', 2901
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P120, $P119
    set $P121, $P120["Op"]
.annotate 'line', 2902
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Var"]
    $P126 = $P125."new"(unicode:"$\x{a2}" :named("name"))
    $P127 = $P121."new"($P126, "MATCH" :named("name"), "callmethod" :named("pasttype"))
.annotate 'line', 2901
    $P128 = $P112."new"($P117, $P127, "bind_6model" :named("pasttype"))
.annotate 'line', 2899
    set $P129, $P3872
    unless_null $P129, vivify_3414
    new $P129, "Undef"
  vivify_3414:
    $P130 = $P108."new"($P128, $P129)
.annotate 'line', 2898
    set $P3873, $P130
.annotate 'line', 2910
    set $P105, param_3871
    set $P106, $P3873
    unless_null $P106, vivify_3415
    new $P106, "Undef"
  vivify_3415:
    $P107 = $P105."!make"($P106)
.annotate 'line', 2894
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Compiler"]
.sub "_block3876"  :subid("653_1334921493.34") :outer("542_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2915
    .lex "$?PACKAGE", $P3878
    .lex "$?CLASS", $P3879
    .return ()
.end


.HLL "nqp"

.namespace []
.sub "_block3882" :load :anon :subid("654_1334921493.34")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1
    .const '' $P3884 = "542_1334921493.34" 
    $P110 = $P3884()
    .return ($P110)
.end

