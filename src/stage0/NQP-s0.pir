.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'
.include 'libpaths.pasm'
.loadlib "nqp_group"
.loadlib "nqp_ops"
.loadlib "nqp_bigint_ops"
.loadlib "trans_ops"
.loadlib "io_ops"
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_372_1360426903.566") :anon :lex
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc _lex_param_0 :slurpy 
    .const 'Sub' $P5064 = 'cuid_371_1360426903.566' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_373_1360426903.566' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_375_1360426903.566' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_395_1360426903.566' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_414_1360426903.566' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_415_1360426903.566' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_416_1360426903.566' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_417_1360426903.566' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_418_1360426903.566' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_419_1360426903.566' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_420_1360426903.566' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_421_1360426903.566' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_422_1360426903.566' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_424_1360426903.566' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_499_1360426903.566' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_503_1360426903.566' 
    capture_lex $P5064 
    .lex "GLOBALish", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "EXPORT", $P103 
    .lex "$ops", $P104 
    .lex "$nqpcomp", $P105 
    .lex "@clo", $P106 
    .lex "&MAIN", $P107 
    .lex "&hll-config", $P108 
    .lex "@ARGS", _lex_param_0 
    .local pmc ctxsave 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P104, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P105, $P5002
    new $P5003, 'ResizablePMCArray'
    set $P106, $P5003
    .const 'Sub' $P5004 = 'cuid_371_1360426903.566' 
    capture_lex $P5004
    set $P107, $P5004
    .const 'Sub' $P5005 = 'cuid_373_1360426903.566' 
    capture_lex $P5005
    set $P108, $P5005
    find_dynamic_lex $P5006, "$*CTXSAVE"
    set ctxsave, $P5006
    isnull $I5001, ctxsave
    if $I5001 goto unless10_end11 
    can $I5002, ctxsave, "ctxsave"
    box $P5009, $I5002
    set $P5008, $P5009
    unless $I5002 goto if11_end13 
    $P5007 = ctxsave."ctxsave"()
    set $P5008, $P5007
  if11_end13:
  unless10_end11:
.annotate 'line', 1
    .const 'Sub' $P5010 = 'cuid_375_1360426903.566' 
    capture_lex $P5010
    $P5011 = $P5010()
    .const 'Sub' $P5012 = 'cuid_395_1360426903.566' 
    capture_lex $P5012
    $P5013 = $P5012()
    .const 'Sub' $P5014 = 'cuid_414_1360426903.566' 
    capture_lex $P5014
    $P5015 = $P5014()
.annotate 'line', 1471
    nqp_get_sc_object $P5019, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Compiler"]
    unless_null $P5016, fallback3791
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5016, $P5020
  fallback3791:
    $P5021 = $P5016."operations"()
    set $P104, $P5021
.annotate 'line', 1473
    .const 'Sub' $P5023 = 'cuid_415_1360426903.566' 
    capture_lex $P5023
    newclosure $P5022, $P5023
    $P104."add_hll_op"("nqp", "preinc", $P5022)
.annotate 'line', 1488
    .const 'Sub' $P5025 = 'cuid_416_1360426903.566' 
    capture_lex $P5025
    newclosure $P5024, $P5025
    $P104."add_hll_op"("nqp", "predec", $P5024)
.annotate 'line', 1503
    .const 'Sub' $P5027 = 'cuid_417_1360426903.566' 
    capture_lex $P5027
    newclosure $P5026, $P5027
    $P104."add_hll_op"("nqp", "postinc", $P5026)
.annotate 'line', 1527
    .const 'Sub' $P5029 = 'cuid_418_1360426903.566' 
    capture_lex $P5029
    newclosure $P5028, $P5029
    $P104."add_hll_op"("nqp", "postdec", $P5028)
.annotate 'line', 1551
    .const 'Sub' $P5031 = 'cuid_419_1360426903.566' 
    capture_lex $P5031
    newclosure $P5030, $P5031
    $P104."add_hll_op"("nqp", "numify", $P5030)
.annotate 'line', 1555
    .const 'Sub' $P5033 = 'cuid_420_1360426903.566' 
    capture_lex $P5033
    newclosure $P5032, $P5033
    $P104."add_hll_op"("nqp", "stringify", $P5032)
.annotate 'line', 1559
    .const 'Sub' $P5035 = 'cuid_421_1360426903.566' 
    capture_lex $P5035
    newclosure $P5034, $P5035
    $P104."add_hll_op"("nqp", "eqaddr", $P5034)
.annotate 'line', 1567
    .const 'Sub' $P5037 = 'cuid_422_1360426903.566' 
    capture_lex $P5037
    newclosure $P5036, $P5037
    $P104."add_hll_op"("nqp", "falsey", $P5036)
    .const 'Sub' $P5038 = 'cuid_424_1360426903.566' 
    capture_lex $P5038
    $P5039 = $P5038()
    .const 'Sub' $P5040 = 'cuid_499_1360426903.566' 
    capture_lex $P5040
    $P5041 = $P5040()
    .const 'Sub' $P5042 = 'cuid_503_1360426903.566' 
    capture_lex $P5042
    $P5043 = $P5042()
.annotate 'line', 3332
    nqp_get_sc_object $P5047, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5046, $P5047, "NQP"
    get_who $P5045, $P5046
    set $P5044, $P5045["Compiler"]
    unless_null $P5044, fallback5849
    nqp_get_sc_object $P5048, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5044, $P5048
  fallback5849:
    $P5049 = $P5044."new"()
    set $P105, $P5049
.annotate 'line', 3333
    $P105."language"("nqp")
.annotate 'line', 3334
    nqp_get_sc_object $P5053, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5052, $P5053, "NQP"
    get_who $P5051, $P5052
    set $P5050, $P5051["Grammar"]
    unless_null $P5050, fallback5850
    nqp_get_sc_object $P5054, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5050, $P5054
  fallback5850:
    $P105."parsegrammar"($P5050)
.annotate 'line', 3335
    nqp_get_sc_object $P5058, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5057, $P5058, "NQP"
    get_who $P5056, $P5057
    set $P5055, $P5056["Actions"]
    unless_null $P5055, fallback5851
    nqp_get_sc_object $P5059, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5055, $P5059
  fallback5851:
    $P105."parseactions"($P5055)
.annotate 'line', 3336
    $P5060 = $P105."config"()
    "&hll-config"($P5060)
.annotate 'line', 3339
    $P5061 = $P105."commandline_options"()
    set $P106, $P5061
.annotate 'line', 3340
    $P106."push"("parsetrace")
.annotate 'line', 3341
    $P106."push"("setting=s")
.annotate 'line', 3342
    $P106."push"("setting-path=s")
.annotate 'line', 3343
    $P106."push"("module-path=s")
.annotate 'line', 3344
    $P106."push"("vmlibs=s")
.annotate 'line', 3345
    $P106."push"("no-regex-lib")
.annotate 'line', 3346
    $P106."push"("old-regex-lib")
.annotate 'line', 3347
    $P106."push"("dynext=s")
.annotate 'line', 3348
    $P106."push"("stable-sc")
    unless _lex_param_0 goto if1774_end5853 
    .const 'Sub' $P5062 = "cuid_371_1360426903.566" 
    $P5063 = $P5062(_lex_param_0 :flat)
  if1774_end5853:
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "MAIN" :subid("cuid_371_1360426903.566") :anon :lex :outer("cuid_372_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3350
    .param pmc _lex_param_0 
    .lex "@ARGS", _lex_param_0 
.annotate 'line', 3352
    find_lex $P5001, "$nqpcomp"
    $P5001."command_line"(_lex_param_0, "utf8" :named("encoding"), "ascii iso-8859-1" :named("transcode"))
.annotate 'line', 3355
    find_lex $P5002, "$nqpcomp"
    $P5003 = $P5002."nqpevent"()
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "hll-config" :subid("cuid_373_1360426903.566") :anon :lex :outer("cuid_372_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3359
    .param pmc _lex_param_0 
    .lex "$config", _lex_param_0 
    box $P5001, "2013.01-128-gc4a988a"
    set _lex_param_0["version"], $P5001
    box $P5002, "2013-02-09T16:21:43Z"
    set _lex_param_0["build-date"], $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_375_1360426903.566") :anon :lex :outer("cuid_372_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 8
    .const 'Sub' $P5032 = 'cuid_1_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_2_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_3_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_4_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_5_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_6_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_7_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_8_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_9_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_10_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_11_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_17_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_18_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_19_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_20_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_21_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_22_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_23_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_24_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_25_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_26_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_27_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_28_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_29_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_30_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_31_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_32_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_33_1360426903.566' 
    capture_lex $P5032 
    .const 'Sub' $P5032 = 'cuid_34_1360426903.566' 
    capture_lex $P5032 
    .lex "$loader", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "$?CLASS", $P103 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_1_1360426903.566' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_2_1360426903.566' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_3_1360426903.566' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_4_1360426903.566' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_5_1360426903.566' 
    capture_lex $P5006
    get_hll_global $P5007, "ModuleLoader"
    set $P101, $P5007
    .const 'Sub' $P5008 = 'cuid_6_1360426903.566' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_7_1360426903.566' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_8_1360426903.566' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_9_1360426903.566' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_10_1360426903.566' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_11_1360426903.566' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_17_1360426903.566' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_18_1360426903.566' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_19_1360426903.566' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_20_1360426903.566' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_21_1360426903.566' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_22_1360426903.566' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_23_1360426903.566' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_24_1360426903.566' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_25_1360426903.566' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_26_1360426903.566' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_27_1360426903.566' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_28_1360426903.566' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_29_1360426903.566' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_30_1360426903.566' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_31_1360426903.566' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_32_1360426903.566' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_33_1360426903.566' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_34_1360426903.566' 
    capture_lex $P5031
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "BUILD" :subid("cuid_1_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 33
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :slurpy :named 
    .const 'Sub' $P5035 = 'cuid_374_1360426903.566' 
    capture_lex $P5035 
    .lex "self", _lex_param_0 
    .lex "%opts", _lex_param_1 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    new $P5003, 'ResizablePMCArray'
    repr_bind_attr_obj $P5001, $P5002, "@!BLOCKS", $P5003
    nqp_decontainerize $P5004, _lex_param_0
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    new $P5006, 'Hash'
    repr_bind_attr_obj $P5004, $P5005, "%!code_objects_to_fix_up", $P5006
    nqp_decontainerize $P5007, _lex_param_0
    nqp_get_sc_object $P5008, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    new $P5009, 'Hash'
    repr_bind_attr_obj $P5007, $P5008, "%!code_object_types", $P5009
    nqp_decontainerize $P5010, _lex_param_0
    nqp_get_sc_object $P5011, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    new $P5012, 'Hash'
    repr_bind_attr_obj $P5010, $P5011, "%!code_object_fixup_list", $P5012
    nqp_decontainerize $P5013, _lex_param_0
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    new $P5015, 'Hash'
    repr_bind_attr_obj $P5013, $P5014, "%!code_stub_sc_idx", $P5015
    nqp_decontainerize $P5016, _lex_param_0
    nqp_get_sc_object $P5017, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    new $P5018, 'ResizablePMCArray'
    repr_bind_attr_obj $P5016, $P5017, "@!clearup_tasks", $P5018
    find_dynamic_lex $P5021, "%*COMPILING"
    unless_null $P5021, fallback16
    nqp_get_sc_object $P5024, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["%COMPILING"]
    unless_null $P5022, fallback17
    nqp_get_sc_object $P5026, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5025, $P5026
    new $P5027, 'Hash'
    set $P5025["%COMPILING"], $P5027
    set $P5022, $P5027
  fallback17:
    unless_null $P5022, vivi_1318
    die "Contextual %*COMPILING not found"
    box $P5028, "Contextual %*COMPILING not found"
    set $P5022, $P5028
  vivi_1318:
    set $P5021, $P5022
  fallback16:
    set $P5020, $P5021["%?OPTIONS"]
    unless_null $P5020, fallback19
    nqp_get_sc_object $P5029, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5029
  fallback19:
    set $P5019, $P5020["dynext"]
    unless_null $P5019, fallback20
    nqp_get_sc_object $P5030, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5019, $P5030
  fallback20:
    defined $I5001, $P5019
    box $P5034, $I5001
    set $P5033, $P5034
    unless $I5001 goto if12_end15 
    .const 'Sub' $P5031 = 'cuid_374_1360426903.566' 
    capture_lex $P5031
    $P5032 = $P5031()
    set $P5033, $P5032
  if12_end15:
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_374_1360426903.566") :anon :lex :outer("cuid_1_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 41
    .lex "$dynext_path", $P101 
    .lex "@dynext_paths", $P102 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    find_dynamic_lex $P5005, "%*COMPILING"
    unless_null $P5005, fallback21
    nqp_get_sc_object $P5008, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["%COMPILING"]
    unless_null $P5006, fallback22
    nqp_get_sc_object $P5010, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5009, $P5010
    new $P5011, 'Hash'
    set $P5009["%COMPILING"], $P5011
    set $P5006, $P5011
  fallback22:
    unless_null $P5006, vivi_1423
    die "Contextual %*COMPILING not found"
    box $P5012, "Contextual %*COMPILING not found"
    set $P5006, $P5012
  vivi_1423:
    set $P5005, $P5006
  fallback21:
    set $P5004, $P5005["%?OPTIONS"]
    unless_null $P5004, fallback24
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5013
  fallback24:
    set $P5003, $P5004["dynext"]
    unless_null $P5003, fallback25
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5014
  fallback25:
    set $P101, $P5003
    getinterp $P5017
    set $P5016, $P5017[.IGLOBALS_LIB_PATHS]
    unless_null $P5016, fallback26
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5016, $P5018
  fallback26:
    set $P5015, $P5016[.PARROT_LIB_PATH_DYNEXT]
    unless_null $P5015, fallback27
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5015, $P5019
  fallback27:
    set $P102, $P5015
.annotate 'line', 45
    $P5020 = $P102."push"($P101)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "push_lexpad" :subid("cuid_2_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 50
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$pad", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 52
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Block"]
    unless_null $P5002, fallback28
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback28:
    nqp_get_sc_object $P5010, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback29
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5011
  fallback29:
    $P5012 = $P5007."new"()
    $P5013 = $P5002."new"($P5012, _lex_param_1 :named("node"))
    set $P101, $P5013
    nqp_decontainerize $P5014, _lex_param_0
    nqp_get_sc_object $P5015, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5016, $P5014, $P5015, "@!BLOCKS"
    set $N5001, $P5016
    unless $N5001 goto if15_end31 
.annotate 'line', 53
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    nqp_decontainerize $P5021, _lex_param_0
    nqp_get_sc_object $P5022, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5023, $P5021, $P5022, "@!BLOCKS"
    set $N5003, $P5023
    set $N5004, 1
    sub $N5002, $N5003, $N5004
    set $I5001, $N5002
    set $P5017, $P5020[$I5001]
    unless_null $P5017, fallback32
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5024
  fallback32:
    set $P101["outer"], $P5017
  if15_end31:
    nqp_decontainerize $P5025, _lex_param_0
    nqp_get_sc_object $P5026, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5027, $P5025, $P5026, "@!BLOCKS"
    nqp_decontainerize $P5028, _lex_param_0
    nqp_get_sc_object $P5029, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5030, $P5028, $P5029, "@!BLOCKS"
    set $N5005, $P5030
    set $I5002, $N5005
    set $P5027[$I5002], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pop_lexpad" :subid("cuid_3_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 61
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 62
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5003, $P5001, $P5002, "@!BLOCKS"
    $P5004 = $P5003."pop"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "cur_lexpad" :subid("cuid_4_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 66
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5007, $P5005, $P5006, "@!BLOCKS"
    set $N5002, $P5007
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    set $I5001, $N5001
    set $P5001, $P5004[$I5001]
    unless_null $P5001, fallback33
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5008
  fallback33:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "get_legacy_block_list" :subid("cuid_5_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 71
    .param pmc _lex_param_0 
    .lex "@x", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5005, $P5003, $P5004, "@!BLOCKS"
    repr_clone $P5002, $P5005
    set $P101, $P5002
.annotate 'line', 73
    $P101."reverse"()
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "load_setting" :subid("cuid_6_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 84
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5005 = 'cuid_376_1360426903.566' 
    capture_lex $P5005 
    .lex "self", _lex_param_0 
    .lex "$setting_name", _lex_param_1 
    root_new $P101, ['parrot';'Continuation']
    set_label $P101, lexotic_34
    .lex "RETURN", $P101
    set $S5001, _lex_param_1
    isne $I5001, $S5001, "NULL"
    box $P5004, $I5001
    set $P5003, $P5004
    unless $I5001 goto if16_end37 
    .const 'Sub' $P5001 = 'cuid_376_1360426903.566' 
    capture_lex $P5001
    $P5002 = $P5001()
    set $P5003, $P5002
  if16_end37:
    goto lexotic_35
  lexotic_34:
    .get_results ($P5003)
  lexotic_35:
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_376_1360426903.566") :anon :lex :outer("cuid_6_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 86
    .lex "$setting", $P101 
    .lex "$set_outer", $P102 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    find_dynamic_lex $P5004, "%*COMPILING"
    unless_null $P5004, fallback38
    nqp_get_sc_object $P5007, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["%COMPILING"]
    unless_null $P5005, fallback39
    nqp_get_sc_object $P5009, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%COMPILING"], $P5010
    set $P5005, $P5010
  fallback39:
    unless_null $P5005, vivi_1740
    die "Contextual %*COMPILING not found"
    box $P5011, "Contextual %*COMPILING not found"
    set $P5005, $P5011
  vivi_1740:
    set $P5004, $P5005
  fallback38:
    set $P5003, $P5004["%?OPTIONS"]
    unless_null $P5003, fallback41
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5012
  fallback41:
.annotate 'line', 91
    find_lex $P5013, "$loader"
    find_lex $P5014, "$setting_name"
    $P5015 = $P5013."load_setting"($P5014)
    set $P5003["outer_ctx"], $P5015
    set $P101, $P5015
.annotate 'line', 95
    nqp_get_sc_object $P5019, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["VM"]
    unless_null $P5016, fallback42
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5016, $P5020
  fallback42:
.annotate 'line', 96
    nqp_get_sc_object $P5024, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback43
    nqp_get_sc_object $P5025, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5021, $P5025
  fallback43:
.annotate 'line', 98
    nqp_get_sc_object $P5029, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["BVal"]
    unless_null $P5026, fallback44
    nqp_get_sc_object $P5030, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5026, $P5030
  fallback44:
    find_dynamic_lex $P5031, "$*UNIT"
    unless_null $P5031, fallback45
    nqp_get_sc_object $P5034, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$UNIT"]
    unless_null $P5032, fallback46
    nqp_get_sc_object $P5035, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5032, $P5035
  fallback46:
    unless_null $P5032, vivi_1847
    die "Contextual $*UNIT not found"
    box $P5036, "Contextual $*UNIT not found"
    set $P5032, $P5036
  vivi_1847:
    set $P5031, $P5032
  fallback45:
    $P5037 = $P5026."new"($P5031 :named("value"))
.annotate 'line', 99
    nqp_get_sc_object $P5041, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Op"]
    unless_null $P5038, fallback48
    nqp_get_sc_object $P5042, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5038, $P5042
  fallback48:
.annotate 'line', 101
    nqp_get_sc_object $P5046, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Op"]
    unless_null $P5043, fallback49
    nqp_get_sc_object $P5047, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5043, $P5047
  fallback49:
.annotate 'line', 103
    nqp_get_sc_object $P5051, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["SVal"]
    unless_null $P5048, fallback50
    nqp_get_sc_object $P5052, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5048, $P5052
  fallback50:
    $P5053 = $P5048."new"("ModuleLoader" :named("value"))
    $P5054 = $P5043."new"($P5053, "getcurhllsym" :named("op"))
.annotate 'line', 105
    nqp_get_sc_object $P5058, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5057, $P5058, "QAST"
    get_who $P5056, $P5057
    set $P5055, $P5056["SVal"]
    unless_null $P5055, fallback51
    nqp_get_sc_object $P5059, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5055, $P5059
  fallback51:
    find_lex $P5060, "$setting_name"
    $P5061 = $P5055."new"($P5060 :named("value"))
    $P5062 = $P5038."new"($P5054, $P5061, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5063 = $P5021."new"($P5037, $P5062, "callmethod" :named("op"), "set_outer_ctx" :named("name"))
.annotate 'line', 107
    nqp_get_sc_object $P5067, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["Op"]
    unless_null $P5064, fallback52
    nqp_get_sc_object $P5068, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5064, $P5068
  fallback52:
.annotate 'line', 109
    nqp_get_sc_object $P5072, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5071, $P5072, "QAST"
    get_who $P5070, $P5071
    set $P5069, $P5070["BVal"]
    unless_null $P5069, fallback53
    nqp_get_sc_object $P5073, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5069, $P5073
  fallback53:
    find_dynamic_lex $P5074, "$*UNIT"
    unless_null $P5074, fallback54
    nqp_get_sc_object $P5077, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["$UNIT"]
    unless_null $P5075, fallback55
    nqp_get_sc_object $P5078, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5075, $P5078
  fallback55:
    unless_null $P5075, vivi_1956
    die "Contextual $*UNIT not found"
    box $P5079, "Contextual $*UNIT not found"
    set $P5075, $P5079
  vivi_1956:
    set $P5074, $P5075
  fallback54:
    $P5080 = $P5069."new"($P5074 :named("value"))
.annotate 'line', 110
    nqp_get_sc_object $P5084, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5083, $P5084, "QAST"
    get_who $P5082, $P5083
    set $P5081, $P5082["Op"]
    unless_null $P5081, fallback57
    nqp_get_sc_object $P5085, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5081, $P5085
  fallback57:
.annotate 'line', 112
    nqp_get_sc_object $P5089, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5088, $P5089, "QAST"
    get_who $P5087, $P5088
    set $P5086, $P5087["Op"]
    unless_null $P5086, fallback58
    nqp_get_sc_object $P5090, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5086, $P5090
  fallback58:
.annotate 'line', 114
    nqp_get_sc_object $P5094, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5093, $P5094, "QAST"
    get_who $P5092, $P5093
    set $P5091, $P5092["SVal"]
    unless_null $P5091, fallback59
    nqp_get_sc_object $P5095, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5091, $P5095
  fallback59:
    $P5096 = $P5091."new"("ModuleLoader" :named("value"))
    $P5097 = $P5086."new"($P5096, "getcurhllsym" :named("op"))
.annotate 'line', 116
    nqp_get_sc_object $P5101, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5100, $P5101, "QAST"
    get_who $P5099, $P5100
    set $P5098, $P5099["SVal"]
    unless_null $P5098, fallback60
    nqp_get_sc_object $P5102, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5098, $P5102
  fallback60:
    find_lex $P5103, "$setting_name"
    $P5104 = $P5098."new"($P5103 :named("value"))
    $P5105 = $P5081."new"($P5097, $P5104, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5106 = $P5064."new"($P5080, $P5105, "forceouterctx" :named("op"))
    $P5107 = $P5016."new"($P5063 :named("parrot"), $P5106 :named("jvm"))
    set $P102, $P5107
.annotate 'line', 118
    find_lex $P5109, "self"
    nqp_decontainerize $P5108, $P5109
    $P5110 = $P5108."is_precompilation_mode"()
    unless $P5110 goto if20_else61 
.annotate 'line', 119
    find_lex $P5112, "self"
    nqp_decontainerize $P5111, $P5112
    nqp_get_sc_object $P5116, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5115, $P5116, "QAST"
    get_who $P5114, $P5115
    set $P5113, $P5114["Stmts"]
    unless_null $P5113, fallback63
    nqp_get_sc_object $P5117, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5113, $P5117
  fallback63:
.annotate 'line', 120
    nqp_get_sc_object $P5121, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5120, $P5121, "QAST"
    get_who $P5119, $P5120
    set $P5118, $P5119["Op"]
    unless_null $P5118, fallback64
    nqp_get_sc_object $P5122, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5118, $P5122
  fallback64:
.annotate 'line', 122
    nqp_get_sc_object $P5126, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5125, $P5126, "QAST"
    get_who $P5124, $P5125
    set $P5123, $P5124["VM"]
    unless_null $P5123, fallback65
    nqp_get_sc_object $P5127, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5123, $P5127
  fallback65:
.annotate 'line', 123
    nqp_get_sc_object $P5131, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5130, $P5131, "QAST"
    get_who $P5129, $P5130
    set $P5128, $P5129["SVal"]
    unless_null $P5128, fallback66
    nqp_get_sc_object $P5132, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5128, $P5132
  fallback66:
    $P5133 = $P5128."new"("ModuleLoader.pbc" :named("value"))
.annotate 'line', 124
    nqp_get_sc_object $P5137, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5136, $P5137, "QAST"
    get_who $P5135, $P5136
    set $P5134, $P5135["SVal"]
    unless_null $P5134, fallback67
    nqp_get_sc_object $P5138, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5134, $P5138
  fallback67:
    $P5139 = $P5134."new"("ModuleLoader.class" :named("value"))
    $P5140 = $P5123."new"($P5133 :named("parrot"), $P5139 :named("jvm"))
    $P5141 = $P5118."new"($P5140, "loadbytecode" :named("op"))
    $P5142 = $P5113."new"($P5141, $P102)
    $P5143 = $P5111."add_load_dependency_task"($P5142 :named("deserialize_past"))
    goto if20_end62
  if20_else61:
.annotate 'line', 129
.annotate 'line', 130
    find_lex $P5145, "self"
    nqp_decontainerize $P5144, $P5145
    $P5146 = $P5144."add_fixup_task"($P102 :named("fixup_past"))
  if20_end62:
    getattribute $P5148, $P101, "lex_pad"
    find_lex $P5147, "RETURN"
    $P5149 = $P5147($P5148)
    .return ($P5149) 
.end
.HLL "nqp"
.namespace []
.sub "load_module" :subid("cuid_7_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 139
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$module_name", _lex_param_1 
    .lex "$cur_GLOBALish", _lex_param_2 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_68
    .lex "RETURN", $P102
.annotate 'line', 141
    find_lex $P5002, "$loader"
    $P5003 = $P5002."load_module"(_lex_param_1, _lex_param_2)
    set $P101, $P5003
.annotate 'line', 144
    nqp_decontainerize $P5004, _lex_param_0
    $P5005 = $P5004."is_precompilation_mode"()
    unless $P5005 goto if21_end71 
.annotate 'line', 145
    nqp_decontainerize $P5006, _lex_param_0
    nqp_get_sc_object $P5010, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback72
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5011
  fallback72:
.annotate 'line', 146
    nqp_get_sc_object $P5015, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback73
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5016
  fallback73:
.annotate 'line', 148
    nqp_get_sc_object $P5020, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["VM"]
    unless_null $P5017, fallback74
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5021
  fallback74:
.annotate 'line', 149
    nqp_get_sc_object $P5025, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["SVal"]
    unless_null $P5022, fallback75
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5022, $P5026
  fallback75:
    $P5027 = $P5022."new"("ModuleLoader.pbc" :named("value"))
.annotate 'line', 150
    nqp_get_sc_object $P5031, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["SVal"]
    unless_null $P5028, fallback76
    nqp_get_sc_object $P5032, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5028, $P5032
  fallback76:
    $P5033 = $P5028."new"("ModuleLoader.class" :named("value"))
    $P5034 = $P5017."new"($P5027 :named("parrot"), $P5033 :named("jvm"))
    $P5035 = $P5012."new"($P5034, "loadbytecode" :named("op"))
.annotate 'line', 152
    nqp_get_sc_object $P5039, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback77
    nqp_get_sc_object $P5040, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5036, $P5040
  fallback77:
.annotate 'line', 154
    nqp_get_sc_object $P5044, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Op"]
    unless_null $P5041, fallback78
    nqp_get_sc_object $P5045, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5041, $P5045
  fallback78:
.annotate 'line', 156
    nqp_get_sc_object $P5049, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["SVal"]
    unless_null $P5046, fallback79
    nqp_get_sc_object $P5050, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5046, $P5050
  fallback79:
    $P5051 = $P5046."new"("ModuleLoader" :named("value"))
    $P5052 = $P5041."new"($P5051, "getcurhllsym" :named("op"))
.annotate 'line', 158
    nqp_get_sc_object $P5056, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["SVal"]
    unless_null $P5053, fallback80
    nqp_get_sc_object $P5057, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5053, $P5057
  fallback80:
    $P5058 = $P5053."new"(_lex_param_1 :named("value"))
    $P5059 = $P5036."new"($P5052, $P5058, "callmethod" :named("op"), "load_module" :named("name"))
    $P5060 = $P5007."new"($P5035, $P5059)
    $P5061 = $P5006."add_load_dependency_task"($P5060 :named("deserialize_past"))
  if21_end71:
    getattribute $P5063, $P101, "lex_pad"
    find_lex $P5062, "RETURN"
    $P5064 = $P5062($P5063)
    goto lexotic_69
  lexotic_68:
    .get_results ($P5064)
  lexotic_69:
    .return ($P5064) 
.end
.HLL "nqp"
.namespace []
.sub "import" :subid("cuid_8_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 165
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5009 = 'cuid_377_1360426903.566' 
    capture_lex $P5009 
    .lex "$target", $P101 
    .lex "self", _lex_param_0 
    .lex "$stash", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 166
    nqp_decontainerize $P5002, _lex_param_0
    $P5003 = $P5002."cur_lexpad"()
    set $P101, $P5003
    set $P5004, _lex_param_1
    iter $P5006, _lex_param_1
  for_next81:
    unless $P5006, for_done83
    shift $P5008, $P5006
  for_redo82:
    .const 'Sub' $P5007 = 'cuid_377_1360426903.566' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next81
  for_done83:
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_377_1360426903.566") :anon :lex :outer("cuid_8_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 167
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 168
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$target"
    $P5004 = _lex_param_0."key"()
    $P5005 = _lex_param_0."value"()
    $P5006 = $P5001."install_lexical_symbol"($P5003, $P5004, $P5005)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_symbol" :subid("cuid_9_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 174
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5012 = 'cuid_378_1360426903.566' 
    capture_lex $P5012 
    .lex "$name", $P101 
    .lex "$target", $P102 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "@sym", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    repr_clone $P5003, _lex_param_2
    set _lex_param_2, $P5003
.annotate 'line', 176
    $P5004 = _lex_param_2."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    set $P102, _lex_param_1
    set $P5006, _lex_param_2
    iter $P5008, _lex_param_2
  for_next84:
    unless $P5008, for_done86
    shift $P5010, $P5008
  for_redo85:
    .const 'Sub' $P5009 = 'cuid_378_1360426903.566' 
    capture_lex $P5009
    $P5006 = $P5009($P5010)
    goto for_next84
  for_done86:
    get_who $P5011, $P102
    set $S5002, $P101
    set $P5011[$S5002], _lex_param_3
    .return (_lex_param_3) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_378_1360426903.566") :anon :lex :outer("cuid_9_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 180
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$target"
    set $S5001, _lex_param_0
    nqp_get_package_through_who $P5001, $P5002, $S5001
    store_lex "$target", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "install_lexical_symbol" :subid("cuid_10_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 190
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 192
    _lex_param_1."symbol"(_lex_param_2, "lexical" :named("scope"), _lex_param_3 :named("value"))
.annotate 'line', 193
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback87
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5003
  fallback87:
    nqp_get_sc_object $P5007, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback88
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5008
  fallback88:
    $P5009 = $P5004."new"("lexical" :named("scope"), _lex_param_2 :named("name"), "var" :named("decl"))
    $P5002."push"($P5009)
.annotate 'line', 196
    nqp_get_sc_object $P5013, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback89
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5014
  fallback89:
.annotate 'line', 199
    nqp_get_sc_object $P5018, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["SVal"]
    unless_null $P5015, fallback90
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5015, $P5019
  fallback90:
    $P5020 = $P5015."new"(_lex_param_2 :named("value"))
.annotate 'line', 200
    nqp_get_sc_object $P5024, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["WVal"]
    unless_null $P5021, fallback91
    nqp_get_sc_object $P5025, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5021, $P5025
  fallback91:
    $P5026 = $P5021."new"(_lex_param_3 :named("value"))
    $P5027 = $P5010."new"(_lex_param_1, $P5020, $P5026, "setstaticlex" :named("op"))
    set $P101, $P5027
.annotate 'line', 202
    nqp_decontainerize $P5028, _lex_param_0
    $P5029 = $P5028."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_routine" :subid("cuid_11_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 207
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$past_block", _lex_param_3 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 208
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback92
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback92:
.annotate 'line', 210
    nqp_get_sc_object $P5010, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback93
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5011
  fallback93:
    nqp_get_sc_object $P5015, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["WVal"]
    unless_null $P5012, fallback94
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5016
  fallback94:
    $P5017 = $P5012."new"(_lex_param_1 :named("value"))
    $P5018 = $P5007."new"($P5017, "who" :named("op"))
.annotate 'line', 211
    nqp_get_sc_object $P5022, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["SVal"]
    unless_null $P5019, fallback95
    nqp_get_sc_object $P5023, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5019, $P5023
  fallback95:
    set $S5001, _lex_param_2
    $P5024 = $P5019."new"($S5001 :named("value"))
.annotate 'line', 212
    nqp_get_sc_object $P5028, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["BVal"]
    unless_null $P5025, fallback96
    nqp_get_sc_object $P5029, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5025, $P5029
  fallback96:
    $P5030 = $P5025."new"(_lex_param_3 :named("value"))
    $P5031 = $P5002."new"($P5018, $P5024, $P5030, "bindkey" :named("op"))
    set $P101, $P5031
.annotate 'line', 214
    nqp_decontainerize $P5032, _lex_param_0
    $P5033 = $P5032."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "create_code" :subid("cuid_17_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 219
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 :named("code_type_name") :optional 
    .param int haz_param_1 :opt_flag 
    .const 'Sub' $P5100 = 'cuid_12_1360426903.566' 
    capture_lex $P5100 
    .const 'Sub' $P5100 = 'cuid_382_1360426903.566' 
    capture_lex $P5100 
    .const 'Sub' $P5100 = 'cuid_383_1360426903.566' 
    capture_lex $P5100 
    .const 'Sub' $P5100 = 'cuid_384_1360426903.566' 
    capture_lex $P5100 
    if haz_param_1, default178
    box $P5099, "NQPRoutine"
    set _lex_param_4, $P5099
  default178:
    .lex "$code_type", $P101 
    .lex "$have_code_type", $P102 
    .lex "$stub_code", $P103 
    .lex "$code_obj", $P104 
    .lex "$fixups", $P105 
    .lex "$dummy", $P106 
    .lex "$code_ref_idx", $P107 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$is_dispatcher", _lex_param_3 
    .lex "$code_type_name", _lex_param_4 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P104, $P5004
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P105, $P5005
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P106, $P5006
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P107, $P5007
    root_new $P108, ['parrot';'Continuation']
    set_label $P108, lexotic_97
    .lex "RETURN", $P108
    box $P5008, 0
    set $P102, $P5008
    new $P5027, 'ExceptionHandler'
    set_label $P5027, catch_handler_25106
    $P5027.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5027
.annotate 'line', 223
.annotate 'line', 224
    nqp_decontainerize $P5009, _lex_param_0
    new $P5010, 'ResizablePMCArray'
    push $P5010, _lex_param_4
    $P5011 = $P5009."find_sym"($P5010)
    set $P101, $P5011
.annotate 'line', 225
    find_dynamic_lex $P5013, "$*PACKAGE"
    unless_null $P5013, fallback99
    nqp_get_sc_object $P5016, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$PACKAGE"]
    unless_null $P5014, fallback100
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5017
  fallback100:
    unless_null $P5014, vivi_22101
    die "Contextual $*PACKAGE not found"
    box $P5018, "Contextual $*PACKAGE not found"
    set $P5014, $P5018
  vivi_22101:
    set $P5013, $P5014
  fallback99:
    get_how $P5012, $P5013
    find_dynamic_lex $P5019, "$*PACKAGE"
    unless_null $P5019, fallback102
    nqp_get_sc_object $P5022, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$PACKAGE"]
    unless_null $P5020, fallback103
    nqp_get_sc_object $P5023, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5023
  fallback103:
    unless_null $P5020, vivi_23104
    die "Contextual $*PACKAGE not found"
    box $P5024, "Contextual $*PACKAGE not found"
    set $P5020, $P5024
  vivi_23104:
    set $P5019, $P5020
  fallback102:
    $P5025 = $P5012."name"($P5019)
    set $S5001, $P5025
    set $S5002, _lex_param_4
    isne $I5001, $S5001, $S5002
    box $P5026, $I5001
    set $P102, $P5026
    set $P5028, $P102
    pop_eh 
    goto skip_handler_24105
  catch_handler_25106:
    .get_results ($P5027) 
    set $I10001, 1
    set $P5027["handled"], $I10001
    nqp_get_sc_object $P10001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    finalize $P5027
    pop_upto_eh $P5027
    pop_eh 
    set $P5028, $P10001
    goto skip_handler_24105
  skip_handler_24105:
    .const 'Sub' $P5030 = 'cuid_12_1360426903.566' 
    capture_lex $P5030
    newclosure $P5029, $P5030
    set $P103, $P5029
    unless $P102 goto if29_end138 
.annotate 'line', 271
    repr_instance_of $P5031, $P101
    set $P104, $P5031
  if29_end138:
.annotate 'line', 276
    nqp_get_sc_object $P5035, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Stmts"]
    unless_null $P5032, fallback139
    nqp_get_sc_object $P5036, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5032, $P5036
  fallback139:
    $P5037 = $P5032."new"()
    set $P105, $P5037
    set $P5038, _lex_param_1["compile_time_dummy"]
    unless_null $P5038, fallback142
    nqp_get_sc_object $P5039, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5038, $P5039
  fallback142:
    defined $I5002, $P5038
    unless $I5002 goto if30_else140 
.annotate 'line', 279
    set $P5040, _lex_param_1["compile_time_dummy"]
    unless_null $P5040, fallback143
    nqp_get_sc_object $P5041, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5040, $P5041
  fallback143:
    set $P106, $P5040
    goto if30_end141
  if30_else140:
.annotate 'line', 282
    nqp_fresh_stub $P5042, $P103
    set $P106, $P5042
    set $S5003, _lex_param_2
    assign $P106, $S5003
    setprop $P106, "STATIC_CODE_REF", $P106
    setprop $P106, "COMPILER_STUB", $P106
.annotate 'line', 290
    nqp_decontainerize $P5043, _lex_param_0
    $P5044 = $P5043."add_root_code_ref"($P106, _lex_param_1)
    set $P107, $P5044
    nqp_decontainerize $P5045, _lex_param_0
    nqp_get_sc_object $P5046, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5047, $P5045, $P5046, "%!code_stub_sc_idx"
.annotate 'line', 291
    $P5048 = _lex_param_1."cuid"()
    set $S5004, $P5048
    set $P5047[$S5004], $P107
    set _lex_param_1["compile_time_dummy"], $P106
    set $P5060, $P102
    unless $P102 goto if31_end145 
.annotate 'line', 297
    nqp_decontainerize $P5049, _lex_param_0
    nqp_get_sc_object $P5050, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5051, $P5049, $P5050, "%!code_object_fixup_list"
.annotate 'line', 298
    $P5052 = _lex_param_1."cuid"()
    set $S5005, $P5052
    set $P5051[$S5005], $P105
.annotate 'line', 299
    nqp_decontainerize $P5053, _lex_param_0
    $P5054 = $P5053."is_precompilation_mode"()
    unless $P5054 goto if32_else146 
    .const 'Sub' $P5055 = 'cuid_382_1360426903.566' 
    capture_lex $P5055
    $P5056 = $P5055()
    set $P5059, $P5056
    goto if32_end147
  if32_else146:
    .const 'Sub' $P5057 = 'cuid_383_1360426903.566' 
    capture_lex $P5057
    $P5058 = $P5057()
    set $P5059, $P5058
  if32_end147:
    set $P5060, $P5059
  if31_end145:
  if30_end141:
.annotate 'line', 339
    nqp_decontainerize $P5061, _lex_param_0
    $P5061."add_fixup_task"($P105 :named("fixup_past"))
    unless $P102 goto if33_else158 
    .const 'Sub' $P5062 = 'cuid_384_1360426903.566' 
    capture_lex $P5062
    $P5063 = $P5062()
    set $P5098, $P5063
    goto if33_end159
  if33_else158:
.annotate 'line', 378
.annotate 'line', 381
    nqp_get_sc_object $P5067, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["VM"]
    unless_null $P5064, fallback173
    nqp_get_sc_object $P5068, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5064, $P5068
  fallback173:
.annotate 'line', 383
    nqp_get_sc_object $P5072, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5071, $P5072, "QAST"
    get_who $P5070, $P5071
    set $P5069, $P5070["VM"]
    unless_null $P5069, fallback174
    nqp_get_sc_object $P5073, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5069, $P5073
  fallback174:
.annotate 'line', 385
    nqp_get_sc_object $P5077, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5076, $P5077, "QAST"
    get_who $P5075, $P5076
    set $P5074, $P5075["SVal"]
    unless_null $P5074, fallback175
    nqp_get_sc_object $P5078, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5074, $P5078
  fallback175:
    nqp_decontainerize $P5079, _lex_param_0
    $P5080 = $P5079."handle"()
    $P5081 = $P5074."new"($P5080 :named("value"))
.annotate 'line', 386
    nqp_get_sc_object $P5085, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5084, $P5085, "QAST"
    get_who $P5083, $P5084
    set $P5082, $P5083["IVal"]
    unless_null $P5082, fallback176
    nqp_get_sc_object $P5086, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5082, $P5086
  fallback176:
    $P5087 = $P5082."new"($P107 :named("value"))
    $P5088 = $P5069."new"($P5081, $P5087, "nqp_get_sc_code_ref Psi" :named("pirop"))
.annotate 'line', 388
    nqp_get_sc_object $P5092, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5091, $P5092, "QAST"
    get_who $P5090, $P5091
    set $P5089, $P5090["BVal"]
    unless_null $P5089, fallback177
    nqp_get_sc_object $P5093, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5089, $P5093
  fallback177:
    $P5094 = $P5089."new"(_lex_param_1 :named("value"))
    $P5095 = $P5064."new"($P5088, $P5094, "assign vPP" :named("pirop"))
    $P105."push"($P5095)
    find_lex $P5096, "RETURN"
    $P5097 = $P5096($P106)
    set $P5098, $P5097
  if33_end159:
    goto lexotic_98
  lexotic_97:
    .get_results ($P5098)
  lexotic_98:
    .return ($P5098) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_12_1360426903.566") :anon :lex :outer("cuid_17_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 232
    .param pmc _lex_param_0 :slurpy 
    .param pmc _lex_param_1 :slurpy :named 
    .const 'Sub' $P5029 = 'cuid_381_1360426903.566' 
    capture_lex $P5029 
    .lex "$nqpcomp", $P101 
    .lex "$post", $P102 
    .lex "$pir", $P103 
    .lex "$compiled", $P104 
    .lex "$c", $P105 
    .lex "$i", $P106 
    .lex "@args", _lex_param_0 
    .lex "%named", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P104, $P5004
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P105, $P5005
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P106, $P5006
.annotate 'line', 234
    find_lex $P5007, "$past"
    find_lex $P5009, "self"
    nqp_decontainerize $P5008, $P5009
    $P5010 = $P5008."libs"()
    $P5007."unshift"($P5010)
    compreg $P5011, "nqp"
    set $P101, $P5011
.annotate 'line', 236
    nqp_get_sc_object $P5015, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["CompUnit"]
    unless_null $P5012, fallback107
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5016
  fallback107:
    find_lex $P5017, "$past"
    $P5018 = $P5012."new"($P5017, "nqp" :named("hll"))
    $P5019 = $P101."post"($P5018)
    set $P102, $P5019
.annotate 'line', 237
    $P5020 = $P101."pir"($P102)
    set $P103, $P5020
.annotate 'line', 238
    $P5021 = $P101."evalpmc"($P103)
    set $P104, $P5021
    elements $I5001, $P104
    box $P5022, $I5001
    set $P105, $P5022
    box $P5023, 0
    set $P106, $P5023
  while26_test108:
    set $N5001, $P106
    set $N5002, $P105
    islt $I5002, $N5001, $N5002
    box $P5027, $I5002
    set $P5026, $P5027
    unless $I5002 goto while26_done112 
  while26_redo110:
    .const 'Sub' $P5024 = 'cuid_381_1360426903.566' 
    capture_lex $P5024
    $P5025 = $P5024()
    set $P5026, $P5025
    goto while26_test108 
  while26_done112:
.annotate 'line', 266
    $P5028 = $P104(_lex_param_0 :flat, _lex_param_1 :flat :named)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_381_1360426903.566") :anon :lex :outer("cuid_12_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 243
    .const 'Sub' $P5015 = 'cuid_380_1360426903.566' 
    capture_lex $P5015 
    .lex "$subid", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 244
    find_lex $P5003, "$compiled"
    find_lex $P5004, "$i"
    set $I5001, $P5004
    set $P5002, $P5003[$I5001]
    unless_null $P5002, fallback113
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback113:
    $P5006 = $P5002."get_subid"()
    set $P101, $P5006
    find_lex $P5008, "self"
    nqp_decontainerize $P5007, $P5008
    nqp_get_sc_object $P5009, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5010, $P5007, $P5009, "%!code_objects_to_fix_up"
    set $S5001, $P101
    exists $I5002, $P5010[$S5001]
    unless $I5002 goto if27_end115 
    .const 'Sub' $P5011 = 'cuid_380_1360426903.566' 
    capture_lex $P5011
    $P5012 = $P5011()
  if27_end115:
    find_lex $P5013, "$i"
    set $N5002, $P5013
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5014, $N5001
    store_lex "$i", $P5014
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_380_1360426903.566") :anon :lex :outer("cuid_381_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 245
    .const 'Sub' $P5075 = 'cuid_379_1360426903.566' 
    capture_lex $P5075 
    .lex "$static", $P101 
    .lex "$fixup_stmts", $P102 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
.annotate 'line', 249
    find_lex $P5005, "self"
    nqp_decontainerize $P5004, $P5005
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5007, $P5004, $P5006, "%!code_objects_to_fix_up"
    find_lex $P5008, "$subid"
    set $S5001, $P5008
    set $P5003, $P5007[$S5001]
    unless_null $P5003, fallback116
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5009
  fallback116:
    $P5010 = $P5003."shift"()
    set $P101, $P5010
    find_lex $P5013, "self"
    nqp_decontainerize $P5012, $P5013
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5015, $P5012, $P5014, "%!code_object_types"
    find_lex $P5016, "$subid"
    set $S5002, $P5016
    set $P5011, $P5015[$S5002]
    unless_null $P5011, fallback117
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5017
  fallback117:
    find_lex $P5019, "$compiled"
    find_lex $P5020, "$i"
    set $I5001, $P5020
    set $P5018, $P5019[$I5001]
    unless_null $P5018, fallback118
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5018, $P5021
  fallback118:
    setattribute $P101, $P5011, "$!do", $P5018
    find_lex $P5024, "self"
    nqp_decontainerize $P5023, $P5024
    nqp_get_sc_object $P5025, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5026, $P5023, $P5025, "%!code_object_types"
    find_lex $P5027, "$subid"
    set $S5003, $P5027
    set $P5022, $P5026[$S5003]
    unless_null $P5022, fallback119
    nqp_get_sc_object $P5028, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5022, $P5028
  fallback119:
    null $P5029
    setattribute $P101, $P5022, "$!clone_callback", $P5029
    find_lex $P5035, "self"
    nqp_decontainerize $P5034, $P5035
    nqp_get_sc_object $P5036, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5037, $P5034, $P5036, "%!code_objects_to_fix_up"
    find_lex $P5038, "$subid"
    set $S5004, $P5038
    set $P5033, $P5037[$S5004]
    unless_null $P5033, fallback120
    nqp_get_sc_object $P5039, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5033, $P5039
  fallback120:
    set $P5030, $P5033
    iter $P5032, $P5033
  for_next124:
    unless $P5032, for_done126
    shift $P5041, $P5032
  for_redo125:
    .const 'Sub' $P5040 = 'cuid_379_1360426903.566' 
    capture_lex $P5040
    $P5030 = $P5040($P5041)
    goto for_next124
  for_done126:
    find_lex $P5043, "$compiled"
    find_lex $P5044, "$i"
    set $I5002, $P5044
    set $P5042, $P5043[$I5002]
    unless_null $P5042, fallback127
    nqp_get_sc_object $P5045, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5042, $P5045
  fallback127:
    find_lex $P5047, "$compiled"
    find_lex $P5048, "$i"
    set $I5003, $P5048
    set $P5046, $P5047[$I5003]
    unless_null $P5046, fallback128
    nqp_get_sc_object $P5049, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5046, $P5049
  fallback128:
    setprop $P5042, "STATIC_CODE_REF", $P5046
.annotate 'line', 257
    find_lex $P5051, "self"
    nqp_decontainerize $P5050, $P5051
    find_lex $P5054, "self"
    nqp_decontainerize $P5053, $P5054
    nqp_get_sc_object $P5055, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5056, $P5053, $P5055, "%!code_stub_sc_idx"
    find_lex $P5057, "$subid"
    set $S5005, $P5057
    set $P5052, $P5056[$S5005]
    unless_null $P5052, fallback129
    nqp_get_sc_object $P5058, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5052, $P5058
  fallback129:
    find_lex $P5060, "$compiled"
    find_lex $P5061, "$i"
    set $I5004, $P5061
    set $P5059, $P5060[$I5004]
    unless_null $P5059, fallback130
    nqp_get_sc_object $P5062, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5059, $P5062
  fallback130:
    $P5050."update_root_code_ref"($P5052, $P5059)
    find_lex $P5065, "self"
    nqp_decontainerize $P5064, $P5065
    nqp_get_sc_object $P5066, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5067, $P5064, $P5066, "%!code_object_fixup_list"
    find_lex $P5068, "$subid"
    set $S5006, $P5068
    set $P5063, $P5067[$S5006]
    unless_null $P5063, fallback131
    nqp_get_sc_object $P5069, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5063, $P5069
  fallback131:
    set $P102, $P5063
    new $P5073, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5073, while28_handlers135
    push_eh $P5073
  while28_test132:
    $P5070 = $P102."list"()
    set $N5001, $P5070
    box $P5074, $N5001
    set $P5072, $P5074
    unless $N5001 goto while28_done136 
  while28_redo134:
.annotate 'line', 261
    $P5071 = $P102."shift"()
    set $P5072, $P5071
    goto while28_test132 
  while28_handlers135:
    .get_results ($P5073)
    pop_upto_eh $P5073
    getattribute $P5073, $P5073, 'type'
    eq $P5073, .CONTROL_LOOP_NEXT, while28_test132
    eq $P5073, .CONTROL_LOOP_REDO, while28_redo134
  while28_done136:
    pop_eh 
    .return ($P5072) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_379_1360426903.566") :anon :lex :outer("cuid_380_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 252
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5005, $P5002, $P5004, "%!code_object_types"
    find_lex $P5006, "$subid"
    set $S5001, $P5006
    set $P5001, $P5005[$S5001]
    unless_null $P5001, fallback121
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5007
  fallback121:
    find_lex $P5010, "$compiled"
    find_lex $P5011, "$i"
    set $I5001, $P5011
    set $P5009, $P5010[$I5001]
    unless_null $P5009, fallback122
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5012
  fallback122:
    repr_clone $P5008, $P5009
    setattribute _lex_param_0, $P5001, "$!do", $P5008
    find_lex $P5015, "self"
    nqp_decontainerize $P5014, $P5015
    nqp_get_sc_object $P5016, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5017, $P5014, $P5016, "%!code_object_types"
    find_lex $P5018, "$subid"
    set $S5002, $P5018
    set $P5013, $P5017[$S5002]
    unless_null $P5013, fallback123
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5019
  fallback123:
    null $P5020
    setattribute _lex_param_0, $P5013, "$!clone_callback", $P5020
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_382_1360426903.566") :anon :lex :outer("cuid_17_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 299
    .const 'Sub' $P5012 = 'cuid_13_1360426903.566' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_14_1360426903.566' 
    capture_lex $P5012 
    .lex "$cb", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    .const 'Sub' $P5003 = 'cuid_13_1360426903.566' 
    capture_lex $P5003
    newclosure $P5002, $P5003
    set $P101, $P5002
    find_lex $P5004, "$code_obj"
    find_lex $P5005, "$code_type"
    setattribute $P5004, $P5005, "$!clone_callback", $P101
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!clearup_tasks"
    .const 'Sub' $P5011 = 'cuid_14_1360426903.566' 
    capture_lex $P5011
    newclosure $P5010, $P5011
    push $P5009, $P5010
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_13_1360426903.566") :anon :lex :outer("cuid_382_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 300
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$do", $P101 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 301
    find_lex $P5004, "self"
    nqp_decontainerize $P5003, $P5004
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5006, $P5003, $P5005, "%!code_objects_to_fix_up"
    find_lex $P5007, "$past"
    $P5008 = $P5007."cuid"()
    set $S5001, $P5008
    set $P5002, $P5006[$S5001]
    unless_null $P5002, fallback148
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5009
  fallback148:
    $P5002."push"(_lex_param_2)
    find_lex $P5010, "$code_type"
    null $P5011
    setattribute _lex_param_2, $P5010, "$!clone_callback", $P5011
    find_lex $P5013, "$code_type"
    getattribute $P5012, _lex_param_2, $P5013, "$!do"
    set $P101, $P5012
    setprop $P101, "COMPILER_STUB", $P101
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_14_1360426903.566") :anon :lex :outer("cuid_382_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 307

    find_lex $P5001, "$code_obj"
    find_lex $P5002, "$code_type"
    null $P5003
    setattribute $P5001, $P5002, "$!clone_callback", $P5003
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_383_1360426903.566") :anon :lex :outer("cuid_17_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 311
    .const 'Sub' $P5012 = 'cuid_15_1360426903.566' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_16_1360426903.566' 
    capture_lex $P5012 
    .lex "$cb", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    .const 'Sub' $P5003 = 'cuid_15_1360426903.566' 
    capture_lex $P5003
    newclosure $P5002, $P5003
    set $P101, $P5002
    find_lex $P5004, "$code_obj"
    find_lex $P5005, "$code_type"
    setattribute $P5004, $P5005, "$!clone_callback", $P101
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!clearup_tasks"
    .const 'Sub' $P5011 = 'cuid_16_1360426903.566' 
    capture_lex $P5011
    newclosure $P5010, $P5011
    push $P5009, $P5010
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_15_1360426903.566") :anon :lex :outer("cuid_383_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 312
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 314
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    $P5001."add_object"(_lex_param_2)
.annotate 'line', 315
    find_lex $P5003, "$fixups"
    nqp_get_sc_object $P5007, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Op"]
    unless_null $P5004, fallback149
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5008
  fallback149:
.annotate 'line', 317
    nqp_get_sc_object $P5012, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["WVal"]
    unless_null $P5009, fallback150
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5013
  fallback150:
    $P5014 = $P5009."new"(_lex_param_2 :named("value"))
.annotate 'line', 318
    nqp_get_sc_object $P5018, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["WVal"]
    unless_null $P5015, fallback151
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5015, $P5019
  fallback151:
    find_lex $P5020, "$code_type"
    $P5021 = $P5015."new"($P5020 :named("value"))
.annotate 'line', 319
    nqp_get_sc_object $P5025, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["SVal"]
    unless_null $P5022, fallback152
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5022, $P5026
  fallback152:
    $P5027 = $P5022."new"("$!do" :named("value"))
.annotate 'line', 320
    nqp_get_sc_object $P5031, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["VM"]
    unless_null $P5028, fallback153
    nqp_get_sc_object $P5032, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5028, $P5032
  fallback153:
.annotate 'line', 322
    nqp_get_sc_object $P5036, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Op"]
    unless_null $P5033, fallback154
    nqp_get_sc_object $P5037, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5033, $P5037
  fallback154:
    nqp_get_sc_object $P5041, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["BVal"]
    unless_null $P5038, fallback155
    nqp_get_sc_object $P5042, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5038, $P5042
  fallback155:
    find_lex $P5043, "$past"
    $P5044 = $P5038."new"($P5043 :named("value"))
    $P5045 = $P5033."new"($P5044, "clone" :named("op"))
.annotate 'line', 323
    nqp_get_sc_object $P5049, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["WVal"]
    unless_null $P5046, fallback156
    nqp_get_sc_object $P5050, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5046, $P5050
  fallback156:
    $P5051 = $P5046."new"(_lex_param_2 :named("value"))
    $P5052 = $P5028."new"($P5045, $P5051, "set_sub_code_object 0PP" :named("pirop"))
    $P5053 = $P5004."new"($P5014, $P5021, $P5027, $P5052, "bindattr" :named("op"))
    $P5003."push"($P5053)
.annotate 'line', 328
    find_lex $P5056, "self"
    nqp_decontainerize $P5055, $P5056
    nqp_get_sc_object $P5057, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5058, $P5055, $P5057, "%!code_objects_to_fix_up"
    find_lex $P5059, "$past"
    $P5060 = $P5059."cuid"()
    set $S5001, $P5060
    set $P5054, $P5058[$S5001]
    unless_null $P5054, fallback157
    nqp_get_sc_object $P5061, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5054, $P5061
  fallback157:
    $P5062 = $P5054."push"(_lex_param_2)
    .return ($P5062) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_16_1360426903.566") :anon :lex :outer("cuid_383_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 331

    find_lex $P5001, "$code_obj"
    find_lex $P5002, "$code_type"
    null $P5003
    setattribute $P5001, $P5002, "$!clone_callback", $P5003
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_384_1360426903.566") :anon :lex :outer("cuid_17_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 343
    .lex "$slot", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    find_lex $P5002, "$code_obj"
    find_lex $P5003, "$code_type"
    find_lex $P5004, "$dummy"
    setattribute $P5002, $P5003, "$!do", $P5004
    find_lex $P5005, "$is_dispatcher"
    unless $P5005 goto if34_end161 
    find_lex $P5006, "$code_obj"
    find_lex $P5007, "$code_type"
    new $P5008, 'ResizablePMCArray'
    setattribute $P5006, $P5007, "$!dispatchees", $P5008
  if34_end161:
.annotate 'line', 348
    find_lex $P5010, "self"
    nqp_decontainerize $P5009, $P5010
    find_lex $P5011, "$code_obj"
    $P5012 = $P5009."add_object"($P5011)
    set $P101, $P5012
.annotate 'line', 351
    find_lex $P5014, "self"
    nqp_decontainerize $P5013, $P5014
.annotate 'line', 352
    nqp_get_sc_object $P5018, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback162
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5015, $P5019
  fallback162:
.annotate 'line', 354
    nqp_get_sc_object $P5023, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["BVal"]
    unless_null $P5020, fallback163
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5024
  fallback163:
    find_lex $P5025, "$past"
    $P5026 = $P5020."new"($P5025 :named("value"))
.annotate 'line', 355
    nqp_get_sc_object $P5030, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["WVal"]
    unless_null $P5027, fallback164
    nqp_get_sc_object $P5031, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5027, $P5031
  fallback164:
    find_lex $P5032, "$code_obj"
    $P5033 = $P5027."new"($P5032 :named("value"))
    $P5034 = $P5015."new"($P5026, $P5033, "setcodeobj" :named("op"))
    $P5013."add_fixup_task"($P5034 :named("deserialize_past"))
.annotate 'line', 359
    find_lex $P5035, "$fixups"
    nqp_get_sc_object $P5039, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback165
    nqp_get_sc_object $P5040, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5036, $P5040
  fallback165:
.annotate 'line', 361
    nqp_get_sc_object $P5044, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["WVal"]
    unless_null $P5041, fallback166
    nqp_get_sc_object $P5045, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5041, $P5045
  fallback166:
    find_lex $P5046, "$code_obj"
    $P5047 = $P5041."new"($P5046 :named("value"))
.annotate 'line', 362
    nqp_get_sc_object $P5051, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["WVal"]
    unless_null $P5048, fallback167
    nqp_get_sc_object $P5052, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5048, $P5052
  fallback167:
    find_lex $P5053, "$code_type"
    $P5054 = $P5048."new"($P5053 :named("value"))
.annotate 'line', 363
    nqp_get_sc_object $P5058, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5057, $P5058, "QAST"
    get_who $P5056, $P5057
    set $P5055, $P5056["SVal"]
    unless_null $P5055, fallback168
    nqp_get_sc_object $P5059, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5055, $P5059
  fallback168:
    $P5060 = $P5055."new"("$!do" :named("value"))
.annotate 'line', 364
    nqp_get_sc_object $P5064, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["BVal"]
    unless_null $P5061, fallback169
    nqp_get_sc_object $P5065, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5061, $P5065
  fallback169:
    find_lex $P5066, "$past"
    $P5067 = $P5061."new"($P5066 :named("value"))
    $P5068 = $P5036."new"($P5047, $P5054, $P5060, $P5067, "bindattr" :named("op"))
    $P5035."push"($P5068)
.annotate 'line', 366
    find_lex $P5069, "$fixups"
    nqp_get_sc_object $P5073, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5072, $P5073, "QAST"
    get_who $P5071, $P5072
    set $P5070, $P5071["Op"]
    unless_null $P5070, fallback170
    nqp_get_sc_object $P5074, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5070, $P5074
  fallback170:
.annotate 'line', 368
    nqp_get_sc_object $P5078, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5077, $P5078, "QAST"
    get_who $P5076, $P5077
    set $P5075, $P5076["BVal"]
    unless_null $P5075, fallback171
    nqp_get_sc_object $P5079, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5075, $P5079
  fallback171:
    find_lex $P5080, "$past"
    $P5081 = $P5075."new"($P5080 :named("value"))
.annotate 'line', 369
    nqp_get_sc_object $P5085, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5084, $P5085, "QAST"
    get_who $P5083, $P5084
    set $P5082, $P5083["WVal"]
    unless_null $P5082, fallback172
    nqp_get_sc_object $P5086, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5082, $P5086
  fallback172:
    find_lex $P5087, "$code_obj"
    $P5088 = $P5082."new"($P5087 :named("value"))
    $P5089 = $P5070."new"($P5081, $P5088, "setcodeobj" :named("op"))
    $P5069."push"($P5089)
    find_lex $P5091, "self"
    nqp_decontainerize $P5090, $P5091
    nqp_get_sc_object $P5092, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5093, $P5090, $P5092, "%!code_objects_to_fix_up"
.annotate 'line', 373
    find_lex $P5094, "$past"
    $P5095 = $P5094."cuid"()
    set $S5001, $P5095
    new $P5096, 'ResizablePMCArray'
    find_lex $P5097, "$code_obj"
    push $P5096, $P5097
    set $P5093[$S5001], $P5096
    find_lex $P5099, "self"
    nqp_decontainerize $P5098, $P5099
    nqp_get_sc_object $P5100, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5101, $P5098, $P5100, "%!code_object_types"
.annotate 'line', 374
    find_lex $P5102, "$past"
    $P5103 = $P5102."cuid"()
    set $S5002, $P5103
    find_lex $P5104, "$code_type"
    set $P5101[$S5002], $P5104
    find_lex $P5105, "$code_obj"
    .return ($P5105) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_create_mo" :subid("cuid_18_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 396
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("name") :optional 
    .param int haz_param_2 :opt_flag 
    .param pmc _lex_param_3 :named("repr") :optional 
    .param int haz_param_3 :opt_flag 
    if haz_param_2, default185
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_2, $P5007
  default185:
    if haz_param_3, default186
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_3, $P5008
  default186:
    .lex "%args", $P101 
    .lex "$mo", $P102 
    .lex "self", _lex_param_0 
    .lex "$how", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$repr", _lex_param_3 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_179
    .lex "RETURN", $P103
    defined $I5001, _lex_param_2
    unless $I5001 goto if35_end182 
.annotate 'line', 399
    set $P101["name"], _lex_param_2
  if35_end182:
    defined $I5002, _lex_param_3
    unless $I5002 goto if36_end184 
.annotate 'line', 400
    set $P101["repr"], _lex_param_3
  if36_end184:
.annotate 'line', 401
    $P5003 = _lex_param_1."new_type"($P101 :flat :named)
    set $P102, $P5003
.annotate 'line', 402
    nqp_decontainerize $P5004, _lex_param_0
    $P5004."add_object"($P102)
    find_lex $P5005, "RETURN"
    $P5006 = $P5005($P102)
    goto lexotic_180
  lexotic_179:
    .get_results ($P5006)
  lexotic_180:
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_attribute" :subid("cuid_19_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 413
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "$attr", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_attr", _lex_param_2 
    .lex "%lit_args", _lex_param_3 
    .lex "%obj_args", _lex_param_4 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 414
    $P5002 = _lex_param_2."new"(_lex_param_3 :flat :named, _lex_param_4 :flat :named)
    set $P101, $P5002
.annotate 'line', 415
    get_how $P5003, _lex_param_1
    $P5003."add_attribute"(_lex_param_1, $P101)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_method" :subid("cuid_20_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 420
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$name", _lex_param_3 
    .lex "$code", _lex_param_4 
.annotate 'line', 421
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3, _lex_param_4)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "set_routine_signature" :subid("cuid_21_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 425
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$sig_type", $P101 
    .lex "$code_type", $P102 
    .lex "$sig_obj", $P103 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$types", _lex_param_2 
    .lex "$definednesses", _lex_param_3 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P103, $P5003
.annotate 'line', 426
    nqp_decontainerize $P5004, _lex_param_0
    new $P5005, 'ResizablePMCArray'
    box $P5006, "NQPSignature"
    push $P5005, $P5006
    $P5007 = $P5004."find_sym"($P5005)
    set $P101, $P5007
.annotate 'line', 427
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    box $P5010, "NQPRoutine"
    push $P5009, $P5010
    $P5011 = $P5008."find_sym"($P5009)
    set $P102, $P5011
    repr_instance_of $P5012, $P101
    set $P103, $P5012
    setattribute $P103, $P101, "$!types", _lex_param_2
    setattribute $P103, $P101, "$!definednesses", _lex_param_3
    setattribute _lex_param_1, $P102, "$!signature", $P103
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_set_body_block" :subid("cuid_22_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 435
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$body_code_obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$body_past", _lex_param_2 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 437
    nqp_decontainerize $P5002, _lex_param_0
    $P5003 = _lex_param_2."name"()
    $P5004 = $P5002."create_code"(_lex_param_2, $P5003, 0)
    set $P101, $P5004
.annotate 'line', 440
    get_how $P5005, _lex_param_1
    $P5006 = $P5005."set_body_block"(_lex_param_1, $P101)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parent_or_role" :subid("cuid_23_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 444
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$to_add", _lex_param_3 
.annotate 'line', 445
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parrot_vtable_handler_mapping" :subid("cuid_24_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 448
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$att_name", _lex_param_3 
.annotate 'line', 449
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."add_parrot_vtable_handler_mapping"(_lex_param_1, _lex_param_2, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_compose" :subid("cuid_25_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 453
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
.annotate 'line', 454
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."compose"(_lex_param_1)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "run_begin_block" :subid("cuid_26_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 458
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5040 = 'cuid_386_1360426903.566' 
    capture_lex $P5040 
    .lex "$wrapper", $P101 
    .lex "%seen", $P102 
    .lex "$i", $P103 
    .lex "$code", $P104 
    .lex "$old_global", $P105 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P104, $P5004
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P105, $P5005
    root_new $P106, ['parrot';'Continuation']
    set_label $P106, lexotic_187
    .lex "RETURN", $P106
.annotate 'line', 460
    nqp_get_sc_object $P5009, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback189
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5010
  fallback189:
.annotate 'line', 461
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Stmts"]
    unless_null $P5011, fallback190
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback190:
    $P5016 = $P5011."new"()
    $P5017 = $P5006."new"($P5016, _lex_param_1)
    set $P101, $P5017
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    set $N5001, $P5020
    box $P5021, $N5001
    set $P103, $P5021
  while37_test191:
    set $N5002, $P103
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5025, $I5001
    set $P5024, $P5025
    unless $I5001 goto while37_done195 
  while37_redo193:
    .const 'Sub' $P5022 = 'cuid_386_1360426903.566' 
    capture_lex $P5022
    $P5023 = $P5022()
    set $P5024, $P5023
    goto while37_test191 
  while37_done195:
.annotate 'line', 484
    nqp_decontainerize $P5026, _lex_param_0
    $P5027 = $P5026."create_code"($P101, "BEGIN block", 0)
    set $P104, $P5027
    new $P5029, 'ResizablePMCArray'
    get_hll_global $P5028, $P5029, "GLOBAL"
    set $P105, $P5028
    new $P5030, 'ResizablePMCArray'
    find_dynamic_lex $P5031, "$*GLOBALish"
    unless_null $P5031, fallback212
    nqp_get_sc_object $P5034, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$GLOBALish"]
    unless_null $P5032, fallback213
    nqp_get_sc_object $P5035, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5032, $P5035
  fallback213:
    unless_null $P5032, vivi_42214
    die "Contextual $*GLOBALish not found"
    box $P5036, "Contextual $*GLOBALish not found"
    set $P5032, $P5036
  vivi_42214:
    set $P5031, $P5032
  fallback212:
    set_hll_global $P5030, "GLOBAL", $P5031
.annotate 'line', 487
    $P104()
    new $P5037, 'ResizablePMCArray'
    set_hll_global $P5037, "GLOBAL", $P105
.annotate 'line', 492
    $P101."shift"()
    find_lex $P5038, "RETURN"
    $P5039 = $P5038($P101)
    goto lexotic_188
  lexotic_187:
    .get_results ($P5039)
  lexotic_188:
    .return ($P5039) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_386_1360426903.566") :anon :lex :outer("cuid_26_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 466
    .const 'Sub' $P5017 = 'cuid_385_1360426903.566' 
    capture_lex $P5017 
    .lex "%symbols", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 468
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback196
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5010
  fallback196:
    $P5011 = $P5004."symtable"()
    set $P101, $P5011
    set $P5012, $P101
    iter $P5014, $P101
  for_next209:
    unless $P5014, for_done211
    shift $P5016, $P5014
  for_redo210:
    .const 'Sub' $P5015 = 'cuid_385_1360426903.566' 
    capture_lex $P5015
    $P5012 = $P5015($P5016)
    goto for_next209
  for_done211:
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_385_1360426903.566") :anon :lex :outer("cuid_386_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 469
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "%seen"
.annotate 'line', 470
    $P5003 = _lex_param_0."key"()
    set $S5001, $P5003
    set $P5001, $P5002[$S5001]
    unless_null $P5001, fallback201
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5004
  fallback201:
    isfalse $I5001, $P5001
    set $I5003, $I5001
    unless $I5001 goto if39_end200 
    $P5005 = _lex_param_0."value"()
    exists $I5002, $P5005["value"]
    set $I5003, $I5002
  if39_end200:
    box $P5038, $I5003
    set $P5037, $P5038
    unless $I5003 goto if38_end198 
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_41208
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 471
.annotate 'line', 472
    find_lex $P5007, "$wrapper"
    set $P5006, $P5007[0]
    unless_null $P5006, fallback202
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5008
  fallback202:
    nqp_get_sc_object $P5012, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback203
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5013
  fallback203:
.annotate 'line', 474
    nqp_get_sc_object $P5017, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Var"]
    unless_null $P5014, fallback204
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5018
  fallback204:
    $P5019 = _lex_param_0."key"()
    $P5020 = $P5014."new"($P5019 :named("name"), "lexical" :named("scope"), "var" :named("isdecl"))
.annotate 'line', 475
    nqp_get_sc_object $P5024, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["WVal"]
    unless_null $P5021, fallback205
    nqp_get_sc_object $P5025, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5021, $P5025
  fallback205:
    $P5027 = _lex_param_0."value"()
    set $P5026, $P5027["value"]
    unless_null $P5026, fallback206
    nqp_get_sc_object $P5028, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5026, $P5028
  fallback206:
    $P5029 = $P5021."new"($P5026 :named("value"))
    $P5030 = $P5009."new"($P5020, $P5029, "bind" :named("op"))
    $P5031 = $P5006."push"($P5030)
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_40207
  catch_handler_41208:
    .get_results ($P5032) 
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10001
    goto skip_handler_40207
  skip_handler_40207:
    find_lex $P5034, "%seen"
.annotate 'line', 478
    $P5035 = _lex_param_0."key"()
    set $S5002, $P5035
    box $P5036, 1
    set $P5034[$S5002], $P5036
    set $P5037, $P5036
  if38_end198:
    .return ($P5037) 
.end
.HLL "nqp"
.namespace []
.sub "libs" :subid("cuid_27_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 497
    .param pmc _lex_param_0 
    .const 'Sub' $P5050 = 'cuid_387_1360426903.566' 
    capture_lex $P5050 
    .lex "@loadlibs", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    box $P5003, "nqp_group"
    push $P5002, $P5003
    box $P5004, "nqp_ops"
    push $P5002, $P5004
    box $P5005, "nqp_bigint_ops"
    push $P5002, $P5005
    box $P5006, "trans_ops"
    push $P5002, $P5006
    box $P5007, "io_ops"
    push $P5002, $P5007
    set $P101, $P5002
    find_dynamic_lex $P5010, "%*COMPILING"
    unless_null $P5010, fallback217
    nqp_get_sc_object $P5013, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["%COMPILING"]
    unless_null $P5011, fallback218
    nqp_get_sc_object $P5015, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5014, $P5015
    new $P5016, 'Hash'
    set $P5014["%COMPILING"], $P5016
    set $P5011, $P5016
  fallback218:
    unless_null $P5011, vivi_44219
    die "Contextual %*COMPILING not found"
    box $P5017, "Contextual %*COMPILING not found"
    set $P5011, $P5017
  vivi_44219:
    set $P5010, $P5011
  fallback217:
    set $P5009, $P5010["%?OPTIONS"]
    unless_null $P5009, fallback220
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5018
  fallback220:
    set $P5008, $P5009["vmlibs"]
    unless_null $P5008, fallback221
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5019
  fallback221:
    unless $P5008 goto if43_end216 
.annotate 'line', 500
    find_dynamic_lex $P5026, "%*COMPILING"
    unless_null $P5026, fallback222
    nqp_get_sc_object $P5029, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["%COMPILING"]
    unless_null $P5027, fallback223
    nqp_get_sc_object $P5031, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5030, $P5031
    new $P5032, 'Hash'
    set $P5030["%COMPILING"], $P5032
    set $P5027, $P5032
  fallback223:
    unless_null $P5027, vivi_45224
    die "Contextual %*COMPILING not found"
    box $P5033, "Contextual %*COMPILING not found"
    set $P5027, $P5033
  vivi_45224:
    set $P5026, $P5027
  fallback222:
    set $P5025, $P5026["%?OPTIONS"]
    unless_null $P5025, fallback225
    nqp_get_sc_object $P5034, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5025, $P5034
  fallback225:
    set $P5024, $P5025["vmlibs"]
    unless_null $P5024, fallback226
    nqp_get_sc_object $P5035, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5024, $P5035
  fallback226:
    set $S5001, $P5024
    split $P5023, ",", $S5001
    set $P5020, $P5023
    iter $P5022, $P5023
  for_next227:
    unless $P5022, for_done229
    shift $P5037, $P5022
  for_redo228:
    .const 'Sub' $P5036 = 'cuid_387_1360426903.566' 
    capture_lex $P5036
    $P5020 = $P5036($P5037)
    goto for_next227
  for_done229:
  if43_end216:
.annotate 'line', 505
    nqp_get_sc_object $P5041, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["VM"]
    unless_null $P5038, fallback230
    nqp_get_sc_object $P5042, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5038, $P5042
  fallback230:
.annotate 'line', 507
    nqp_get_sc_object $P5046, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Op"]
    unless_null $P5043, fallback231
    nqp_get_sc_object $P5047, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5043, $P5047
  fallback231:
    $P5048 = $P5043."new"("null" :named("op"))
    $P5049 = $P5038."new"($P101 :named("loadlibs"), $P5048 :named("jvm"))
    .return ($P5049) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_387_1360426903.566") :anon :lex :outer("cuid_27_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 501
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 502
    find_lex $P5001, "@loadlibs"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "add_initializations" :subid("cuid_28_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 511
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 512
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["VM"]
    unless_null $P5002, fallback232
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback232:
.annotate 'line', 513
    nqp_get_sc_object $P5010, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback233
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5011
  fallback233:
.annotate 'line', 514
    nqp_get_sc_object $P5015, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["VM"]
    unless_null $P5012, fallback234
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5016
  fallback234:
    $P5017 = $P5012."new"("nqp_dynop_setup v" :named("pirop"))
.annotate 'line', 515
    nqp_get_sc_object $P5021, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["VM"]
    unless_null $P5018, fallback235
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5018, $P5022
  fallback235:
    $P5023 = $P5018."new"("nqp_bigint_setup v" :named("pirop"))
.annotate 'line', 516
    nqp_get_sc_object $P5027, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback236
    nqp_get_sc_object $P5028, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5024, $P5028
  fallback236:
.annotate 'line', 518
    nqp_get_sc_object $P5032, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["VM"]
    unless_null $P5029, fallback237
    nqp_get_sc_object $P5033, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5029, $P5033
  fallback237:
    $P5034 = $P5029."new"("getinterp P" :named("pirop"))
.annotate 'line', 519
    nqp_get_sc_object $P5038, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["VM"]
    unless_null $P5035, fallback238
    nqp_get_sc_object $P5039, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5035, $P5039
  fallback238:
    nqp_get_sc_object $P5043, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["SVal"]
    unless_null $P5040, fallback239
    nqp_get_sc_object $P5044, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5040, $P5044
  fallback239:
    $P5045 = $P5040."new"("LexPad" :named("value"))
    $P5046 = $P5035."new"($P5045, "get_class Ps" :named("pirop"))
.annotate 'line', 520
    nqp_get_sc_object $P5050, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["VM"]
    unless_null $P5047, fallback240
    nqp_get_sc_object $P5051, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5047, $P5051
  fallback240:
    nqp_get_sc_object $P5055, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["SVal"]
    unless_null $P5052, fallback241
    nqp_get_sc_object $P5056, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5052, $P5056
  fallback241:
    $P5057 = $P5052."new"("NQPLexPad" :named("value"))
    $P5058 = $P5047."new"($P5057, "get_class Ps" :named("pirop"))
    $P5059 = $P5024."new"($P5034, $P5046, $P5058, "callmethod" :named("op"), "hll_map" :named("name"))
    $P5060 = $P5007."new"($P5017, $P5023, $P5059)
.annotate 'line', 522
    nqp_get_sc_object $P5064, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["Op"]
    unless_null $P5061, fallback242
    nqp_get_sc_object $P5065, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5061, $P5065
  fallback242:
    $P5066 = $P5061."new"("null" :named("op"))
    $P5067 = $P5002."new"($P5060 :named("parrot"), $P5066 :named("jvm"))
    $P5068 = $P5001."add_load_dependency_task"($P5067 :named("deserialize_past"))
    .return ($P5068) 
.end
.HLL "nqp"
.namespace []
.sub "cleanup" :subid("cuid_29_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 527
    .param pmc _lex_param_0 
    .const 'Sub' $P5009 = 'cuid_388_1360426903.566' 
    capture_lex $P5009 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5004, _lex_param_0
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5006, $P5004, $P5005, "@!clearup_tasks"
    set $P5001, $P5006
    iter $P5003, $P5006
  for_next243:
    unless $P5003, for_done245
    shift $P5008, $P5003
  for_redo244:
    .const 'Sub' $P5007 = 'cuid_388_1360426903.566' 
    capture_lex $P5007
    $P5001 = $P5007($P5008)
    goto for_next243
  for_done245:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_388_1360426903.566") :anon :lex :outer("cuid_29_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 528
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    $P5001 = _lex_param_0()
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "is_lexical" :subid("cuid_30_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 533
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 534
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "lexical")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_package" :subid("cuid_31_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 539
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 540
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "package")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_scope" :subid("cuid_32_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 545
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .const 'Sub' $P5011 = 'cuid_389_1360426903.566' 
    capture_lex $P5011 
    .lex "$i", $P101 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
    .lex "$wanted_scope", _lex_param_2 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_246
    .lex "RETURN", $P102
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    set $N5001, $P5004
    box $P5005, $N5001
    set $P101, $P5005
  while46_test248:
    set $N5002, $P101
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5009, $I5001
    set $P5008, $P5009
    unless $I5001 goto while46_done252 
  while46_redo250:
    .const 'Sub' $P5006 = 'cuid_389_1360426903.566' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5008, $P5007
    goto while46_test248 
  while46_done252:
    box $P5010, 0
    goto lexotic_247
  lexotic_246:
    .get_results ($P5010)
  lexotic_247:
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_389_1360426903.566") :anon :lex :outer("cuid_32_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 547
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 549
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback253
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5010
  fallback253:
    find_lex $P5011, "$name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5019, $N5004
    set $P5018, $P5019
    unless $N5004 goto if47_end255 
.annotate 'line', 550
    set $P5014, $P101["scope"]
    unless_null $P5014, fallback256
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5015
  fallback256:
    set $S5001, $P5014
    find_lex $P5016, "$wanted_scope"
    set $S5002, $P5016
    iseq $I5002, $S5001, $S5002
    find_lex $P5013, "RETURN"
    $P5017 = $P5013($I5002)
    set $P5018, $P5017
  if47_end255:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "known_sym" :subid("cuid_33_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 558
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$known", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "@name", _lex_param_2 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    box $P5002, 0
    set $P101, $P5002
    new $P5005, 'ExceptionHandler'
    set_label $P5005, catch_handler_49258
    $P5005.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5005
.annotate 'line', 560
.annotate 'line', 561
    nqp_decontainerize $P5003, _lex_param_0
    $P5003."find_sym"(_lex_param_2)
    box $P5004, 1
    set $P101, $P5004
    set $P5006, $P101
    pop_eh 
    goto skip_handler_48257
  catch_handler_49258:
    .get_results ($P5005) 
    set $I10001, 1
    set $P5005["handled"], $I10001
    nqp_get_sc_object $P10001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    finalize $P5005
    pop_upto_eh $P5005
    pop_eh 
    set $P5006, $P10001
    goto skip_handler_48257
  skip_handler_48257:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "find_sym" :subid("cuid_34_1360426903.566") :anon :lex :outer("cuid_375_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 570
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5018 = 'cuid_391_1360426903.566' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_393_1360426903.566' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_394_1360426903.566' 
    capture_lex $P5018 
    .lex "$result", $P101 
    .lex "self", _lex_param_0 
    .lex "@name", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_259
    .lex "RETURN", $P102
    set $N5001, _lex_param_1
    if $N5001 goto unless50_end262 
.annotate 'line', 572
    box $P5002, "Cannot look up empty name"
    die $P5002
  unless50_end262:
    set $N5002, _lex_param_1
    set $N5003, 1
    iseq $I5001, $N5002, $N5003
    unless $I5001 goto if51_end264 
    .const 'Sub' $P5003 = 'cuid_391_1360426903.566' 
    capture_lex $P5003
    $P5004 = $P5003()
  if51_end264:
    find_dynamic_lex $P5005, "$*GLOBALish"
    unless_null $P5005, fallback277
    nqp_get_sc_object $P5008, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$GLOBALish"]
    unless_null $P5006, fallback278
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5009
  fallback278:
    unless_null $P5006, vivi_55279
    die "Contextual $*GLOBALish not found"
    box $P5010, "Contextual $*GLOBALish not found"
    set $P5006, $P5010
  vivi_55279:
    set $P5005, $P5006
  fallback277:
    set $P101, $P5005
    set $N5004, _lex_param_1
    set $N5005, 2
    isge $I5002, $N5004, $N5005
    unless $I5002 goto if56_end281 
    .const 'Sub' $P5011 = 'cuid_393_1360426903.566' 
    capture_lex $P5011
    $P5012 = $P5011()
  if56_end281:
    set $P5013, _lex_param_1
    iter $P5015, _lex_param_1
  for_next297:
    unless $P5015, for_done299
    shift $P5017, $P5015
  for_redo298:
    .const 'Sub' $P5016 = 'cuid_394_1360426903.566' 
    capture_lex $P5016
    $P5013 = $P5016($P5017)
    goto for_next297
  for_done299:
    goto lexotic_260
  lexotic_259:
    .get_results ($P101)
  lexotic_260:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_391_1360426903.566") :anon :lex :outer("cuid_34_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 576
    .const 'Sub' $P5015 = 'cuid_390_1360426903.566' 
    capture_lex $P5015 
    .lex "$final_name", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback265
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5005
  fallback265:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
  while52_test266:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto while52_done270 
  while52_redo268:
    .const 'Sub' $P5011 = 'cuid_390_1360426903.566' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while52_test266 
  while52_done270:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_390_1360426903.566") :anon :lex :outer("cuid_391_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 579
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 581
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback271
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5010
  fallback271:
    find_lex $P5011, "$final_name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5021, $N5004
    set $P5020, $P5021
    unless $N5004 goto if53_end273 
.annotate 'line', 582
    exists $I5002, $P101["value"]
    unless $I5002 goto if54_else274 
.annotate 'line', 583
    set $P5014, $P101["value"]
    unless_null $P5014, fallback276
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5015
  fallback276:
    find_lex $P5013, "RETURN"
    $P5016 = $P5013($P5014)
    set $P5019, $P5016
    goto if54_end275
  if54_else274:
.annotate 'line', 586
    find_lex $P5017, "$final_name"
    set $S5002, $P5017
    concat $S5001, "No compile-time value for ", $S5002
    box $P5018, $S5001
    die $P5018
    set $P5019, $P5018
  if54_end275:
    set $P5020, $P5019
  if53_end273:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_393_1360426903.566") :anon :lex :outer("cuid_34_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 597
    .const 'Sub' $P5015 = 'cuid_392_1360426903.566' 
    capture_lex $P5015 
    .lex "$first", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback282
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5005
  fallback282:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
  while57_test283:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto while57_done287 
  while57_redo285:
    .const 'Sub' $P5011 = 'cuid_392_1360426903.566' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while57_test283 
  while57_done287:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_392_1360426903.566") :anon :lex :outer("cuid_393_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 600
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 602
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback288
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5010
  fallback288:
    find_lex $P5011, "$first"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5021, $N5004
    set $P5020, $P5021
    unless $N5004 goto if58_end290 
.annotate 'line', 603
    exists $I5002, $P101["value"]
    unless $I5002 goto if59_else291 
.annotate 'line', 604
    set $P5013, $P101["value"]
    unless_null $P5013, fallback293
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5014
  fallback293:
    store_lex "$result", $P5013
.annotate 'line', 606
    find_lex $P5015, "@name"
    $P5015."shift"()
    box $P5016, 0
    store_lex "$i", $P5016
    set $P5019, $P5016
    goto if59_end292
  if59_else291:
.annotate 'line', 609
    find_lex $P5017, "$first"
    set $S5002, $P5017
    concat $S5001, "No compile-time value for ", $S5002
    box $P5018, $S5001
    die $P5018
    set $P5019, $P5018
  if59_end292:
    set $P5020, $P5019
  if58_end290:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_394_1360426903.566") :anon :lex :outer("cuid_34_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 617
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$result"
    get_who $P5001, $P5002
    set $S5001, _lex_param_0
    exists $I5001, $P5001[$S5001]
    unless $I5001 goto if60_else294 
.annotate 'line', 618
    find_lex $P5005, "$result"
    get_who $P5004, $P5005
    set $S5002, _lex_param_0
    set $P5003, $P5004[$S5002]
    unless_null $P5003, fallback296
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5006
  fallback296:
    store_lex "$result", $P5003
    set $P5009, $P5003
    goto if60_end295
  if60_else294:
.annotate 'line', 621
    find_lex $P5007, "@name"
    join $S5004, "::", $P5007
    concat $S5003, "Could not locate compile-time value for symbol ", $S5004
    box $P5008, $S5003
    die $P5008
    set $P5009, $P5008
  if60_end295:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_395_1360426903.566") :anon :lex :outer("cuid_372_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 632
    .const 'Sub' $P5258 = 'cuid_35_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_36_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_37_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_38_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_39_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_40_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_41_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_43_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_45_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_46_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_47_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_49_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_50_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_51_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_52_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_53_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_54_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_55_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_56_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_57_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_58_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_59_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_60_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_61_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_62_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_63_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_64_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_65_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_67_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_68_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_69_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_70_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_71_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_72_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_73_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_74_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_75_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_76_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_77_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_78_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_79_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_80_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_81_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_82_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_83_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_84_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_85_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_86_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_87_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_88_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_89_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_90_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_93_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_94_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_95_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_96_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_97_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_98_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_99_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_100_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_101_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_102_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_103_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_104_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_105_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_106_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_107_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_108_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_109_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_110_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_111_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_112_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_113_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_114_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_115_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_116_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_117_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_118_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_119_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_120_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_121_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_122_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_123_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_124_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_125_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_126_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_127_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_128_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_129_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_131_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_132_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_133_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_134_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_135_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_136_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_137_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_138_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_139_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_140_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_141_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_142_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_143_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_144_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_145_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_146_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_147_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_148_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_149_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_150_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_151_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_152_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_153_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_154_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_155_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_156_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_157_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_158_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_159_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_160_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_161_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_162_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_163_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_164_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_165_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_166_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_167_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_168_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_169_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_170_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_171_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_172_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_173_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_174_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_175_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_176_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_177_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_178_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_179_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_180_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_181_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_182_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_183_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_184_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_185_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_186_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_187_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_188_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_189_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_190_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_191_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_192_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_193_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_194_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_195_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_196_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_197_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_198_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_199_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_200_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_201_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_202_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_203_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_204_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_205_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_206_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_207_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_208_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_209_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_210_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_211_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_212_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_213_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_214_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_215_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_216_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_217_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_218_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_219_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_220_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_222_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_224_1360426903.566' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_226_1360426903.566' 
    capture_lex $P5258 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
.annotate 'line', 1298
.annotate 'line', 1299
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "NQP"
    get_who $P5002, $P5003
    set $P5001, $P5002["Grammar"]
    unless_null $P5001, fallback300
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback300:
    $P5001."O"(":prec<y=>, :assoc<unary>", "%methodop")
.annotate 'line', 1300
    nqp_get_sc_object $P5009, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5008, $P5009, "NQP"
    get_who $P5007, $P5008
    set $P5006, $P5007["Grammar"]
    unless_null $P5006, fallback301
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5010
  fallback301:
    $P5006."O"(":prec<x=>, :assoc<unary>", "%autoincrement")
.annotate 'line', 1301
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5013, $P5014, "NQP"
    get_who $P5012, $P5013
    set $P5011, $P5012["Grammar"]
    unless_null $P5011, fallback302
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback302:
    $P5011."O"(":prec<w=>, :assoc<left>", "%exponentiation")
.annotate 'line', 1302
    nqp_get_sc_object $P5019, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5018, $P5019, "NQP"
    get_who $P5017, $P5018
    set $P5016, $P5017["Grammar"]
    unless_null $P5016, fallback303
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5016, $P5020
  fallback303:
    $P5016."O"(":prec<v=>, :assoc<unary>", "%symbolic_unary")
.annotate 'line', 1303
    nqp_get_sc_object $P5024, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5023, $P5024, "NQP"
    get_who $P5022, $P5023
    set $P5021, $P5022["Grammar"]
    unless_null $P5021, fallback304
    nqp_get_sc_object $P5025, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5021, $P5025
  fallback304:
    $P5021."O"(":prec<u=>, :assoc<left>", "%multiplicative")
.annotate 'line', 1304
    nqp_get_sc_object $P5029, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5028, $P5029, "NQP"
    get_who $P5027, $P5028
    set $P5026, $P5027["Grammar"]
    unless_null $P5026, fallback305
    nqp_get_sc_object $P5030, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5026, $P5030
  fallback305:
    $P5026."O"(":prec<t=>, :assoc<left>", "%additive")
.annotate 'line', 1305
    nqp_get_sc_object $P5034, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5033, $P5034, "NQP"
    get_who $P5032, $P5033
    set $P5031, $P5032["Grammar"]
    unless_null $P5031, fallback306
    nqp_get_sc_object $P5035, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5031, $P5035
  fallback306:
    $P5031."O"(":prec<r=>, :assoc<left>", "%concatenation")
.annotate 'line', 1306
    nqp_get_sc_object $P5039, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5038, $P5039, "NQP"
    get_who $P5037, $P5038
    set $P5036, $P5037["Grammar"]
    unless_null $P5036, fallback307
    nqp_get_sc_object $P5040, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5036, $P5040
  fallback307:
    $P5036."O"(":prec<m=>, :assoc<left>", "%relational")
.annotate 'line', 1307
    nqp_get_sc_object $P5044, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5043, $P5044, "NQP"
    get_who $P5042, $P5043
    set $P5041, $P5042["Grammar"]
    unless_null $P5041, fallback308
    nqp_get_sc_object $P5045, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5041, $P5045
  fallback308:
    $P5041."O"(":prec<l=>, :assoc<left>", "%tight_and")
.annotate 'line', 1308
    nqp_get_sc_object $P5049, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5048, $P5049, "NQP"
    get_who $P5047, $P5048
    set $P5046, $P5047["Grammar"]
    unless_null $P5046, fallback309
    nqp_get_sc_object $P5050, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5046, $P5050
  fallback309:
    $P5046."O"(":prec<k=>, :assoc<left>", "%tight_or")
.annotate 'line', 1309
    nqp_get_sc_object $P5054, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5053, $P5054, "NQP"
    get_who $P5052, $P5053
    set $P5051, $P5052["Grammar"]
    unless_null $P5051, fallback310
    nqp_get_sc_object $P5055, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5051, $P5055
  fallback310:
    $P5051."O"(":prec<j=>, :assoc<right>", "%conditional")
.annotate 'line', 1310
    nqp_get_sc_object $P5059, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5058, $P5059, "NQP"
    get_who $P5057, $P5058
    set $P5056, $P5057["Grammar"]
    unless_null $P5056, fallback311
    nqp_get_sc_object $P5060, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5056, $P5060
  fallback311:
    $P5056."O"(":prec<i=>, :assoc<right>", "%assignment")
.annotate 'line', 1311
    nqp_get_sc_object $P5064, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5063, $P5064, "NQP"
    get_who $P5062, $P5063
    set $P5061, $P5062["Grammar"]
    unless_null $P5061, fallback312
    nqp_get_sc_object $P5065, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5061, $P5065
  fallback312:
    $P5061."O"(":prec<g=>, :assoc<list>, :nextterm<nulltermish>", "%comma")
.annotate 'line', 1312
    nqp_get_sc_object $P5069, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5068, $P5069, "NQP"
    get_who $P5067, $P5068
    set $P5066, $P5067["Grammar"]
    unless_null $P5066, fallback313
    nqp_get_sc_object $P5070, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5066, $P5070
  fallback313:
    $P5066."O"(":prec<f=>, :assoc<list>", "%list_infix")
.annotate 'line', 1313
    nqp_get_sc_object $P5074, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5073, $P5074, "NQP"
    get_who $P5072, $P5073
    set $P5071, $P5072["Grammar"]
    unless_null $P5071, fallback314
    nqp_get_sc_object $P5075, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5071, $P5075
  fallback314:
    $P5071."O"(":prec<e=>, :assoc<unary>", "%list_prefix")
.annotate 'line', 632
    .const 'Sub' $P5076 = 'cuid_35_1360426903.566' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_36_1360426903.566' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_37_1360426903.566' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_38_1360426903.566' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_39_1360426903.566' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_40_1360426903.566' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_41_1360426903.566' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_43_1360426903.566' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_45_1360426903.566' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_46_1360426903.566' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_47_1360426903.566' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_49_1360426903.566' 
    capture_lex $P5087
    .const 'Sub' $P5088 = 'cuid_50_1360426903.566' 
    capture_lex $P5088
    .const 'Sub' $P5089 = 'cuid_51_1360426903.566' 
    capture_lex $P5089
    .const 'Sub' $P5090 = 'cuid_52_1360426903.566' 
    capture_lex $P5090
    .const 'Sub' $P5091 = 'cuid_53_1360426903.566' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_54_1360426903.566' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_55_1360426903.566' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_56_1360426903.566' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_57_1360426903.566' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_58_1360426903.566' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_59_1360426903.566' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_60_1360426903.566' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_61_1360426903.566' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_62_1360426903.566' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_63_1360426903.566' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_64_1360426903.566' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_65_1360426903.566' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_67_1360426903.566' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_68_1360426903.566' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_69_1360426903.566' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_70_1360426903.566' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_71_1360426903.566' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_72_1360426903.566' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_73_1360426903.566' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_74_1360426903.566' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_75_1360426903.566' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_76_1360426903.566' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_77_1360426903.566' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_78_1360426903.566' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_79_1360426903.566' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_80_1360426903.566' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_81_1360426903.566' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_82_1360426903.566' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_83_1360426903.566' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_84_1360426903.566' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_85_1360426903.566' 
    capture_lex $P5122
    .const 'Sub' $P5123 = 'cuid_86_1360426903.566' 
    capture_lex $P5123
    .const 'Sub' $P5124 = 'cuid_87_1360426903.566' 
    capture_lex $P5124
    .const 'Sub' $P5125 = 'cuid_88_1360426903.566' 
    capture_lex $P5125
    .const 'Sub' $P5126 = 'cuid_89_1360426903.566' 
    capture_lex $P5126
    .const 'Sub' $P5127 = 'cuid_90_1360426903.566' 
    capture_lex $P5127
    .const 'Sub' $P5128 = 'cuid_93_1360426903.566' 
    capture_lex $P5128
    .const 'Sub' $P5129 = 'cuid_94_1360426903.566' 
    capture_lex $P5129
    .const 'Sub' $P5130 = 'cuid_95_1360426903.566' 
    capture_lex $P5130
    .const 'Sub' $P5131 = 'cuid_96_1360426903.566' 
    capture_lex $P5131
    .const 'Sub' $P5132 = 'cuid_97_1360426903.566' 
    capture_lex $P5132
    .const 'Sub' $P5133 = 'cuid_98_1360426903.566' 
    capture_lex $P5133
    .const 'Sub' $P5134 = 'cuid_99_1360426903.566' 
    capture_lex $P5134
    .const 'Sub' $P5135 = 'cuid_100_1360426903.566' 
    capture_lex $P5135
    .const 'Sub' $P5136 = 'cuid_101_1360426903.566' 
    capture_lex $P5136
    .const 'Sub' $P5137 = 'cuid_102_1360426903.566' 
    capture_lex $P5137
    .const 'Sub' $P5138 = 'cuid_103_1360426903.566' 
    capture_lex $P5138
    .const 'Sub' $P5139 = 'cuid_104_1360426903.566' 
    capture_lex $P5139
    .const 'Sub' $P5140 = 'cuid_105_1360426903.566' 
    capture_lex $P5140
    .const 'Sub' $P5141 = 'cuid_106_1360426903.566' 
    capture_lex $P5141
    .const 'Sub' $P5142 = 'cuid_107_1360426903.566' 
    capture_lex $P5142
    .const 'Sub' $P5143 = 'cuid_108_1360426903.566' 
    capture_lex $P5143
    .const 'Sub' $P5144 = 'cuid_109_1360426903.566' 
    capture_lex $P5144
    .const 'Sub' $P5145 = 'cuid_110_1360426903.566' 
    capture_lex $P5145
    .const 'Sub' $P5146 = 'cuid_111_1360426903.566' 
    capture_lex $P5146
    .const 'Sub' $P5147 = 'cuid_112_1360426903.566' 
    capture_lex $P5147
    .const 'Sub' $P5148 = 'cuid_113_1360426903.566' 
    capture_lex $P5148
    .const 'Sub' $P5149 = 'cuid_114_1360426903.566' 
    capture_lex $P5149
    .const 'Sub' $P5150 = 'cuid_115_1360426903.566' 
    capture_lex $P5150
    .const 'Sub' $P5151 = 'cuid_116_1360426903.566' 
    capture_lex $P5151
    .const 'Sub' $P5152 = 'cuid_117_1360426903.566' 
    capture_lex $P5152
    .const 'Sub' $P5153 = 'cuid_118_1360426903.566' 
    capture_lex $P5153
    .const 'Sub' $P5154 = 'cuid_119_1360426903.566' 
    capture_lex $P5154
    .const 'Sub' $P5155 = 'cuid_120_1360426903.566' 
    capture_lex $P5155
    .const 'Sub' $P5156 = 'cuid_121_1360426903.566' 
    capture_lex $P5156
    .const 'Sub' $P5157 = 'cuid_122_1360426903.566' 
    capture_lex $P5157
    .const 'Sub' $P5158 = 'cuid_123_1360426903.566' 
    capture_lex $P5158
    .const 'Sub' $P5159 = 'cuid_124_1360426903.566' 
    capture_lex $P5159
    .const 'Sub' $P5160 = 'cuid_125_1360426903.566' 
    capture_lex $P5160
    .const 'Sub' $P5161 = 'cuid_126_1360426903.566' 
    capture_lex $P5161
    .const 'Sub' $P5162 = 'cuid_127_1360426903.566' 
    capture_lex $P5162
    .const 'Sub' $P5163 = 'cuid_128_1360426903.566' 
    capture_lex $P5163
    .const 'Sub' $P5164 = 'cuid_129_1360426903.566' 
    capture_lex $P5164
    .const 'Sub' $P5165 = 'cuid_131_1360426903.566' 
    capture_lex $P5165
    .const 'Sub' $P5166 = 'cuid_132_1360426903.566' 
    capture_lex $P5166
    .const 'Sub' $P5167 = 'cuid_133_1360426903.566' 
    capture_lex $P5167
    .const 'Sub' $P5168 = 'cuid_134_1360426903.566' 
    capture_lex $P5168
    .const 'Sub' $P5169 = 'cuid_135_1360426903.566' 
    capture_lex $P5169
    .const 'Sub' $P5170 = 'cuid_136_1360426903.566' 
    capture_lex $P5170
    .const 'Sub' $P5171 = 'cuid_137_1360426903.566' 
    capture_lex $P5171
    .const 'Sub' $P5172 = 'cuid_138_1360426903.566' 
    capture_lex $P5172
    .const 'Sub' $P5173 = 'cuid_139_1360426903.566' 
    capture_lex $P5173
    .const 'Sub' $P5174 = 'cuid_140_1360426903.566' 
    capture_lex $P5174
    .const 'Sub' $P5175 = 'cuid_141_1360426903.566' 
    capture_lex $P5175
    .const 'Sub' $P5176 = 'cuid_142_1360426903.566' 
    capture_lex $P5176
    .const 'Sub' $P5177 = 'cuid_143_1360426903.566' 
    capture_lex $P5177
    .const 'Sub' $P5178 = 'cuid_144_1360426903.566' 
    capture_lex $P5178
    .const 'Sub' $P5179 = 'cuid_145_1360426903.566' 
    capture_lex $P5179
    .const 'Sub' $P5180 = 'cuid_146_1360426903.566' 
    capture_lex $P5180
    .const 'Sub' $P5181 = 'cuid_147_1360426903.566' 
    capture_lex $P5181
    .const 'Sub' $P5182 = 'cuid_148_1360426903.566' 
    capture_lex $P5182
    .const 'Sub' $P5183 = 'cuid_149_1360426903.566' 
    capture_lex $P5183
    .const 'Sub' $P5184 = 'cuid_150_1360426903.566' 
    capture_lex $P5184
    .const 'Sub' $P5185 = 'cuid_151_1360426903.566' 
    capture_lex $P5185
    .const 'Sub' $P5186 = 'cuid_152_1360426903.566' 
    capture_lex $P5186
    .const 'Sub' $P5187 = 'cuid_153_1360426903.566' 
    capture_lex $P5187
    .const 'Sub' $P5188 = 'cuid_154_1360426903.566' 
    capture_lex $P5188
    .const 'Sub' $P5189 = 'cuid_155_1360426903.566' 
    capture_lex $P5189
    .const 'Sub' $P5190 = 'cuid_156_1360426903.566' 
    capture_lex $P5190
    .const 'Sub' $P5191 = 'cuid_157_1360426903.566' 
    capture_lex $P5191
    .const 'Sub' $P5192 = 'cuid_158_1360426903.566' 
    capture_lex $P5192
    .const 'Sub' $P5193 = 'cuid_159_1360426903.566' 
    capture_lex $P5193
    .const 'Sub' $P5194 = 'cuid_160_1360426903.566' 
    capture_lex $P5194
    .const 'Sub' $P5195 = 'cuid_161_1360426903.566' 
    capture_lex $P5195
    .const 'Sub' $P5196 = 'cuid_162_1360426903.566' 
    capture_lex $P5196
    .const 'Sub' $P5197 = 'cuid_163_1360426903.566' 
    capture_lex $P5197
    .const 'Sub' $P5198 = 'cuid_164_1360426903.566' 
    capture_lex $P5198
    .const 'Sub' $P5199 = 'cuid_165_1360426903.566' 
    capture_lex $P5199
    .const 'Sub' $P5200 = 'cuid_166_1360426903.566' 
    capture_lex $P5200
    .const 'Sub' $P5201 = 'cuid_167_1360426903.566' 
    capture_lex $P5201
    .const 'Sub' $P5202 = 'cuid_168_1360426903.566' 
    capture_lex $P5202
    .const 'Sub' $P5203 = 'cuid_169_1360426903.566' 
    capture_lex $P5203
    .const 'Sub' $P5204 = 'cuid_170_1360426903.566' 
    capture_lex $P5204
    .const 'Sub' $P5205 = 'cuid_171_1360426903.566' 
    capture_lex $P5205
    .const 'Sub' $P5206 = 'cuid_172_1360426903.566' 
    capture_lex $P5206
    .const 'Sub' $P5207 = 'cuid_173_1360426903.566' 
    capture_lex $P5207
    .const 'Sub' $P5208 = 'cuid_174_1360426903.566' 
    capture_lex $P5208
    .const 'Sub' $P5209 = 'cuid_175_1360426903.566' 
    capture_lex $P5209
    .const 'Sub' $P5210 = 'cuid_176_1360426903.566' 
    capture_lex $P5210
    .const 'Sub' $P5211 = 'cuid_177_1360426903.566' 
    capture_lex $P5211
    .const 'Sub' $P5212 = 'cuid_178_1360426903.566' 
    capture_lex $P5212
    .const 'Sub' $P5213 = 'cuid_179_1360426903.566' 
    capture_lex $P5213
    .const 'Sub' $P5214 = 'cuid_180_1360426903.566' 
    capture_lex $P5214
    .const 'Sub' $P5215 = 'cuid_181_1360426903.566' 
    capture_lex $P5215
    .const 'Sub' $P5216 = 'cuid_182_1360426903.566' 
    capture_lex $P5216
    .const 'Sub' $P5217 = 'cuid_183_1360426903.566' 
    capture_lex $P5217
    .const 'Sub' $P5218 = 'cuid_184_1360426903.566' 
    capture_lex $P5218
    .const 'Sub' $P5219 = 'cuid_185_1360426903.566' 
    capture_lex $P5219
    .const 'Sub' $P5220 = 'cuid_186_1360426903.566' 
    capture_lex $P5220
    .const 'Sub' $P5221 = 'cuid_187_1360426903.566' 
    capture_lex $P5221
    .const 'Sub' $P5222 = 'cuid_188_1360426903.566' 
    capture_lex $P5222
    .const 'Sub' $P5223 = 'cuid_189_1360426903.566' 
    capture_lex $P5223
    .const 'Sub' $P5224 = 'cuid_190_1360426903.566' 
    capture_lex $P5224
    .const 'Sub' $P5225 = 'cuid_191_1360426903.566' 
    capture_lex $P5225
    .const 'Sub' $P5226 = 'cuid_192_1360426903.566' 
    capture_lex $P5226
    .const 'Sub' $P5227 = 'cuid_193_1360426903.566' 
    capture_lex $P5227
    .const 'Sub' $P5228 = 'cuid_194_1360426903.566' 
    capture_lex $P5228
    .const 'Sub' $P5229 = 'cuid_195_1360426903.566' 
    capture_lex $P5229
    .const 'Sub' $P5230 = 'cuid_196_1360426903.566' 
    capture_lex $P5230
    .const 'Sub' $P5231 = 'cuid_197_1360426903.566' 
    capture_lex $P5231
    .const 'Sub' $P5232 = 'cuid_198_1360426903.566' 
    capture_lex $P5232
    .const 'Sub' $P5233 = 'cuid_199_1360426903.566' 
    capture_lex $P5233
    .const 'Sub' $P5234 = 'cuid_200_1360426903.566' 
    capture_lex $P5234
    .const 'Sub' $P5235 = 'cuid_201_1360426903.566' 
    capture_lex $P5235
    .const 'Sub' $P5236 = 'cuid_202_1360426903.566' 
    capture_lex $P5236
    .const 'Sub' $P5237 = 'cuid_203_1360426903.566' 
    capture_lex $P5237
    .const 'Sub' $P5238 = 'cuid_204_1360426903.566' 
    capture_lex $P5238
    .const 'Sub' $P5239 = 'cuid_205_1360426903.566' 
    capture_lex $P5239
    .const 'Sub' $P5240 = 'cuid_206_1360426903.566' 
    capture_lex $P5240
    .const 'Sub' $P5241 = 'cuid_207_1360426903.566' 
    capture_lex $P5241
    .const 'Sub' $P5242 = 'cuid_208_1360426903.566' 
    capture_lex $P5242
    .const 'Sub' $P5243 = 'cuid_209_1360426903.566' 
    capture_lex $P5243
    .const 'Sub' $P5244 = 'cuid_210_1360426903.566' 
    capture_lex $P5244
    .const 'Sub' $P5245 = 'cuid_211_1360426903.566' 
    capture_lex $P5245
    .const 'Sub' $P5246 = 'cuid_212_1360426903.566' 
    capture_lex $P5246
    .const 'Sub' $P5247 = 'cuid_213_1360426903.566' 
    capture_lex $P5247
    .const 'Sub' $P5248 = 'cuid_214_1360426903.566' 
    capture_lex $P5248
    .const 'Sub' $P5249 = 'cuid_215_1360426903.566' 
    capture_lex $P5249
    .const 'Sub' $P5250 = 'cuid_216_1360426903.566' 
    capture_lex $P5250
    .const 'Sub' $P5251 = 'cuid_217_1360426903.566' 
    capture_lex $P5251
    .const 'Sub' $P5252 = 'cuid_218_1360426903.566' 
    capture_lex $P5252
    .const 'Sub' $P5253 = 'cuid_219_1360426903.566' 
    capture_lex $P5253
    .const 'Sub' $P5254 = 'cuid_220_1360426903.566' 
    capture_lex $P5254
    .const 'Sub' $P5255 = 'cuid_222_1360426903.566' 
    capture_lex $P5255
    .const 'Sub' $P5256 = 'cuid_224_1360426903.566' 
    capture_lex $P5256
    .const 'Sub' $P5257 = 'cuid_226_1360426903.566' 
    capture_lex $P5257
    .return ($P5257) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_35_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 633
    .param pmc _lex_param_0 
    .lex "%*LANG", $P101 
    .lex "%*HOW", $P102 
    .lex "$file", $P103 
    .lex "$source_id", $P104 
    .lex "$*W", $P105 
    .lex "$*SCOPE", $P106 
    .lex "$*MULTINESS", $P107 
    .lex "$*PKGDECL", $P108 
    .lex "$*INVOCANT_OK", $P109 
    .lex "$*RETURN_USED", $P110 
    .lex "$*CONTROL_USED", $P111 
    .lex "%*HANDLERS", $P112 
    .lex "self", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P104, $P5004
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P105, $P5005
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P106, $P5006
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P107, $P5007
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P108, $P5008
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P109, $P5009
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P110, $P5010
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P111, $P5011
    new $P5012, 'Hash'
    set $P112, $P5012
    unless_null $P101, fallback318
    nqp_get_sc_object $P5022, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["%LANG"]
    unless_null $P5020, fallback319
    nqp_get_sc_object $P5024, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5023, $P5024
    new $P5025, 'Hash'
    set $P5023["%LANG"], $P5025
    set $P5020, $P5025
  fallback319:
    unless_null $P5020, vivi_62320
    die "Contextual %*LANG not found"
    box $P5026, "Contextual %*LANG not found"
    set $P5020, $P5026
  vivi_62320:
    set $P101, $P5020
  fallback318:
    nqp_get_sc_object $P5030, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5029, $P5030, "NQP"
    get_who $P5028, $P5029
    set $P5027, $P5028["Regex"]
    unless_null $P5027, fallback321
    nqp_get_sc_object $P5031, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5027, $P5031
  fallback321:
    set $P101["Regex"], $P5027
    unless_null $P101, fallback322
    nqp_get_sc_object $P5034, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%LANG"]
    unless_null $P5032, fallback323
    nqp_get_sc_object $P5036, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%LANG"], $P5037
    set $P5032, $P5037
  fallback323:
    unless_null $P5032, vivi_63324
    die "Contextual %*LANG not found"
    box $P5038, "Contextual %*LANG not found"
    set $P5032, $P5038
  vivi_63324:
    set $P101, $P5032
  fallback322:
    nqp_get_sc_object $P5042, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5041, $P5042, "NQP"
    get_who $P5040, $P5041
    set $P5039, $P5040["RegexActions"]
    unless_null $P5039, fallback325
    nqp_get_sc_object $P5043, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5039, $P5043
  fallback325:
    set $P101["Regex-actions"], $P5039
    unless_null $P101, fallback326
    nqp_get_sc_object $P5046, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["%LANG"]
    unless_null $P5044, fallback327
    nqp_get_sc_object $P5048, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5047, $P5048
    new $P5049, 'Hash'
    set $P5047["%LANG"], $P5049
    set $P5044, $P5049
  fallback327:
    unless_null $P5044, vivi_64328
    die "Contextual %*LANG not found"
    box $P5050, "Contextual %*LANG not found"
    set $P5044, $P5050
  vivi_64328:
    set $P101, $P5044
  fallback326:
    nqp_get_sc_object $P5054, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5053, $P5054, "NQP"
    get_who $P5052, $P5053
    set $P5051, $P5052["Grammar"]
    unless_null $P5051, fallback329
    nqp_get_sc_object $P5055, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5051, $P5055
  fallback329:
    set $P101["MAIN"], $P5051
    unless_null $P101, fallback330
    nqp_get_sc_object $P5058, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5057, $P5058
    set $P5056, $P5057["%LANG"]
    unless_null $P5056, fallback331
    nqp_get_sc_object $P5060, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5059, $P5060
    new $P5061, 'Hash'
    set $P5059["%LANG"], $P5061
    set $P5056, $P5061
  fallback331:
    unless_null $P5056, vivi_65332
    die "Contextual %*LANG not found"
    box $P5062, "Contextual %*LANG not found"
    set $P5056, $P5062
  vivi_65332:
    set $P101, $P5056
  fallback330:
    nqp_get_sc_object $P5066, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5065, $P5066, "NQP"
    get_who $P5064, $P5065
    set $P5063, $P5064["Actions"]
    unless_null $P5063, fallback333
    nqp_get_sc_object $P5067, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5063, $P5067
  fallback333:
    set $P101["MAIN-actions"], $P5063
    unless_null $P102, fallback337
    nqp_get_sc_object $P5077, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["%HOW"]
    unless_null $P5075, fallback338
    nqp_get_sc_object $P5079, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5078, $P5079
    new $P5080, 'Hash'
    set $P5078["%HOW"], $P5080
    set $P5075, $P5080
  fallback338:
    unless_null $P5075, vivi_67339
    die "Contextual %*HOW not found"
    box $P5081, "Contextual %*HOW not found"
    set $P5075, $P5081
  vivi_67339:
    set $P102, $P5075
  fallback337:
    get_knowhow $P5082
    set $P102["knowhow"], $P5082
    unless_null $P102, fallback340
    nqp_get_sc_object $P5085, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["%HOW"]
    unless_null $P5083, fallback341
    nqp_get_sc_object $P5087, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5086, $P5087
    new $P5088, 'Hash'
    set $P5086["%HOW"], $P5088
    set $P5083, $P5088
  fallback341:
    unless_null $P5083, vivi_68342
    die "Contextual %*HOW not found"
    box $P5089, "Contextual %*HOW not found"
    set $P5083, $P5089
  vivi_68342:
    set $P102, $P5083
  fallback340:
    get_knowhow_attribute $P5090
    set $P102["knowhow-attr"], $P5090
    find_caller_lex $P5091, "$?FILES"
    set $P103, $P5091
.annotate 'line', 652
    nqp_decontainerize $P5092, _lex_param_0
    $P5093 = $P5092."target"()
    set $S5003, $P5093
    nqp_sha1 $S5002, $S5003
    find_dynamic_lex $P5096, "%*COMPILING"
    unless_null $P5096, fallback345
    nqp_get_sc_object $P5099, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5098, $P5099
    set $P5097, $P5098["%COMPILING"]
    unless_null $P5097, fallback346
    nqp_get_sc_object $P5101, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5100, $P5101
    new $P5102, 'Hash'
    set $P5100["%COMPILING"], $P5102
    set $P5097, $P5102
  fallback346:
    unless_null $P5097, vivi_70347
    die "Contextual %*COMPILING not found"
    box $P5103, "Contextual %*COMPILING not found"
    set $P5097, $P5103
  vivi_70347:
    set $P5096, $P5097
  fallback345:
    set $P5095, $P5096["%?OPTIONS"]
    unless_null $P5095, fallback348
    nqp_get_sc_object $P5104, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5095, $P5104
  fallback348:
    set $P5094, $P5095["stable-sc"]
    unless_null $P5094, fallback349
    nqp_get_sc_object $P5105, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5094, $P5105
  fallback349:
    unless $P5094 goto if69_else343 
    set $S5006, ""
    goto if69_end344
  if69_else343:
    time $N5001
    set $S5005, $N5001
    concat $S5004, "-", $S5005
    set $S5006, $S5004
  if69_end344:
    concat $S5001, $S5002, $S5006
    box $P5106, $S5001
    set $P104, $P5106
    isnull $I5001, $P103
    unless $I5001 goto if71_else350 
.annotate 'line', 655
    nqp_get_sc_object $P5110, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5109, $P5110, "NQP"
    get_who $P5108, $P5109
    set $P5107, $P5108["World"]
    unless_null $P5107, fallback352
    nqp_get_sc_object $P5111, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5107, $P5111
  fallback352:
    $P5112 = $P5107."new"($P104 :named("handle"))
    set $P5119, $P5112
    goto if71_end351
  if71_else350:
.annotate 'line', 656
    nqp_get_sc_object $P5116, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5115, $P5116, "NQP"
    get_who $P5114, $P5115
    set $P5113, $P5114["World"]
    unless_null $P5113, fallback353
    nqp_get_sc_object $P5117, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5113, $P5117
  fallback353:
    $P5118 = $P5113."new"($P104 :named("handle"), $P103 :named("description"))
    set $P5119, $P5118
  if71_end351:
    set $P105, $P5119
    box $P5120, ""
    set $P106, $P5120
    box $P5121, ""
    set $P107, $P5121
    box $P5122, ""
    set $P108, $P5122
    box $P5123, 0
    set $P109, $P5123
    box $P5124, 0
    set $P110, $P5124
    box $P5125, 0
    set $P111, $P5125
.annotate 'line', 665
    nqp_decontainerize $P5133, _lex_param_0
    $P5134 = $P5133."comp_unit"()
    .return ($P5134) 
.end
.HLL "nqp"
.namespace []
.sub "identifier" :subid("cuid_36_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 670
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx73_tgt
    .local int rx73_pos
    .local int rx73_off
    .local int rx73_eos
    .local int rx73_rep
    .local pmc rx73_cur
    .local pmc rx73_curclass
    .local pmc rx73_bstack
    .local pmc rx73_cstack
    (rx73_cur, rx73_tgt, rx73_pos, rx73_curclass, rx73_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx73_cur
    length rx73_eos, rx73_tgt
    eq $I19, 1, rx73_restart359
    gt rx73_pos, rx73_eos, rx73_fail360
    repr_get_attr_int $I11, self, rx73_curclass, "$!from"
    ne $I11, -1, rxscan74_done366
    goto rxscan74_scan365
  rxscan74_loop364:
    inc rx73_pos
    gt rx73_pos, rx73_eos, rx73_fail360
    repr_bind_attr_int rx73_cur, rx73_curclass, "$!from", rx73_pos
  rxscan74_scan365:
    nqp_rxmark rx73_bstack, rxscan74_loop364, rx73_pos, 0
  rxscan74_done366:
    repr_bind_attr_int rx73_cur, rx73_curclass, "$!pos", rx73_pos
    $P11 = rx73_cur."ident"()
    repr_get_attr_int $I11, $P11, rx73_curclass, "$!pos"
    lt $I11, 0, rx73_fail360
    repr_get_attr_int rx73_pos, $P11, rx73_curclass, "$!pos"
    nqp_rxmark rx73_bstack, rxquantr76_done369, rx73_pos, 0
  rxquantr76_loop368:
  alt77_0371:
    nqp_rxmark rx73_bstack, alt77_1372, rx73_pos, 0
    add $I11, rx73_pos, 1
    gt $I11, rx73_eos, rx73_fail360
    substr $S10, rx73_tgt, rx73_pos, 1
    ne $S10, ucs4:"-", rx73_fail360
    add rx73_pos, 1
    goto alt77_end370
  alt77_1372:
    ge rx73_pos, rx73_eos, rx73_fail360
    substr $S11, rx73_tgt, rx73_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx73_fail360
    inc rx73_pos
  alt77_end370:
    repr_bind_attr_int rx73_cur, rx73_curclass, "$!pos", rx73_pos
    $P11 = rx73_cur."ident"()
    repr_get_attr_int $I11, $P11, rx73_curclass, "$!pos"
    lt $I11, 0, rx73_fail360
    repr_get_attr_int rx73_pos, $P11, rx73_curclass, "$!pos"
    nqp_rxpeek $I19, rx73_bstack, rxquantr76_done369
    inc $I19
    inc $I19
    set rx73_rep, rx73_bstack[$I19]
    nqp_rxcommit rx73_bstack, rxquantr76_done369
    inc rx73_rep
    nqp_rxmark rx73_bstack, rxquantr76_done369, rx73_pos, rx73_rep
    goto rxquantr76_loop368
  rxquantr76_done369:
    rx73_cur."!cursor_pass"(rx73_pos, "identifier", 'backtrack'=>1)
    .return (rx73_cur)
  rx73_restart359:
    repr_get_attr_obj rx73_cstack, rx73_cur, rx73_curclass, "$!cstack"
  rx73_fail360:
    unless rx73_bstack, rx73_done358
    pop $I19, rx73_bstack
    if_null rx73_cstack, rx73_cstack_done363
    unless rx73_cstack, rx73_cstack_done363
    dec $I19
    set $P11, rx73_cstack[$I19]
  rx73_cstack_done363:
    pop rx73_rep, rx73_bstack
    pop rx73_pos, rx73_bstack
    pop $I19, rx73_bstack
    lt rx73_pos, -1, rx73_done358
    lt rx73_pos, 0, rx73_fail360
    eq $I19, 0, rx73_fail360
    nqp_islist $I20, rx73_cstack
    unless $I20, rx73_jump361
    elements $I18, rx73_bstack
    le $I18, 0, rx73_cut362
    dec $I18
    set $I18, rx73_bstack[$I18]
  rx73_cut362:
    assign rx73_cstack, $I18
  rx73_jump361:
    jump $I19
  rx73_done358:
    rx73_cur."!cursor_fail"()
    .return (rx73_cur) 
.end
.HLL "nqp"
.namespace []
.sub "name" :subid("cuid_37_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 672
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx79_tgt
    .local int rx79_pos
    .local int rx79_off
    .local int rx79_eos
    .local int rx79_rep
    .local pmc rx79_cur
    .local pmc rx79_curclass
    .local pmc rx79_bstack
    .local pmc rx79_cstack
    (rx79_cur, rx79_tgt, rx79_pos, rx79_curclass, rx79_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx79_cur
    length rx79_eos, rx79_tgt
    eq $I19, 1, rx79_restart376
    gt rx79_pos, rx79_eos, rx79_fail377
    repr_get_attr_int $I11, self, rx79_curclass, "$!from"
    ne $I11, -1, rxscan80_done383
    goto rxscan80_scan382
  rxscan80_loop381:
    inc rx79_pos
    gt rx79_pos, rx79_eos, rx79_fail377
    repr_bind_attr_int rx79_cur, rx79_curclass, "$!from", rx79_pos
  rxscan80_scan382:
    nqp_rxmark rx79_bstack, rxscan80_loop381, rx79_pos, 0
  rxscan80_done383:
    repr_bind_attr_int rx79_cur, rx79_curclass, "$!pos", rx79_pos
    $P11 = rx79_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx79_curclass, "$!pos"
    lt $I11, 0, rx79_fail377
    nqp_rxmark rx79_bstack, rxsubrule81_pass384, -1, 0
  rxsubrule81_pass384:
    rx79_cstack = rx79_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx79_pos, $P11, rx79_curclass, "$!pos"
    nqp_rxmark rx79_bstack, rxquantr82_done386, rx79_pos, 0
  rxquantr82_loop385:
    add $I11, rx79_pos, 2
    gt $I11, rx79_eos, rx79_fail377
    substr $S10, rx79_tgt, rx79_pos, 2
    ne $S10, ucs4:"::", rx79_fail377
    add rx79_pos, 2
    repr_bind_attr_int rx79_cur, rx79_curclass, "$!pos", rx79_pos
    $P11 = rx79_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx79_curclass, "$!pos"
    lt $I11, 0, rx79_fail377
    nqp_rxmark rx79_bstack, rxsubrule83_pass387, -1, 0
  rxsubrule83_pass387:
    rx79_cstack = rx79_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx79_pos, $P11, rx79_curclass, "$!pos"
    nqp_rxpeek $I19, rx79_bstack, rxquantr82_done386
    inc $I19
    inc $I19
    set rx79_rep, rx79_bstack[$I19]
    nqp_rxcommit rx79_bstack, rxquantr82_done386
    inc rx79_rep
    nqp_rxmark rx79_bstack, rxquantr82_done386, rx79_pos, rx79_rep
    goto rxquantr82_loop385
  rxquantr82_done386:
    rx79_cur."!cursor_pass"(rx79_pos, "name", 'backtrack'=>1)
    .return (rx79_cur)
  rx79_restart376:
    repr_get_attr_obj rx79_cstack, rx79_cur, rx79_curclass, "$!cstack"
  rx79_fail377:
    unless rx79_bstack, rx79_done375
    pop $I19, rx79_bstack
    if_null rx79_cstack, rx79_cstack_done380
    unless rx79_cstack, rx79_cstack_done380
    dec $I19
    set $P11, rx79_cstack[$I19]
  rx79_cstack_done380:
    pop rx79_rep, rx79_bstack
    pop rx79_pos, rx79_bstack
    pop $I19, rx79_bstack
    lt rx79_pos, -1, rx79_done375
    lt rx79_pos, 0, rx79_fail377
    eq $I19, 0, rx79_fail377
    nqp_islist $I20, rx79_cstack
    unless $I20, rx79_jump378
    elements $I18, rx79_bstack
    le $I18, 0, rx79_cut379
    dec $I18
    set $I18, rx79_bstack[$I18]
  rx79_cut379:
    assign rx79_cstack, $I18
  rx79_jump378:
    jump $I19
  rx79_done375:
    rx79_cur."!cursor_fail"()
    .return (rx79_cur) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_38_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 674
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx84_tgt
    .local int rx84_pos
    .local int rx84_off
    .local int rx84_eos
    .local int rx84_rep
    .local pmc rx84_cur
    .local pmc rx84_curclass
    .local pmc rx84_bstack
    .local pmc rx84_cstack
    (rx84_cur, rx84_tgt, rx84_pos, rx84_curclass, rx84_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx84_cur
    length rx84_eos, rx84_tgt
    eq $I19, 1, rx84_restart390
    gt rx84_pos, rx84_eos, rx84_fail391
    repr_get_attr_int $I11, self, rx84_curclass, "$!from"
    ne $I11, -1, rxscan85_done397
    goto rxscan85_scan396
  rxscan85_loop395:
    inc rx84_pos
    gt rx84_pos, rx84_eos, rx84_fail391
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!from", rx84_pos
  rxscan85_scan396:
    nqp_rxmark rx84_bstack, rxscan85_loop395, rx84_pos, 0
  rxscan85_done397:
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail391
    nqp_rxmark rx84_bstack, rxsubrule86_pass398, -1, 0
  rxsubrule86_pass398:
    rx84_cstack = rx84_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx84_pos, $P11, rx84_curclass, "$!pos"
    nqp_rxmark rx84_bstack, rxquantr87_done400, rx84_pos, 0
  rxquantr87_loop399:
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail391
    goto rxsubrule88_pass401
  rxsubrule88_back402:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail391
  rxsubrule88_pass401:
    rx84_cstack = rx84_cur."!cursor_capture"($P11, "colonpair")
    set_addr $I11, rxsubrule88_back402
    push rx84_bstack, $I11
    push rx84_bstack, 0
    push rx84_bstack, rx84_pos
    elements $I11, rx84_cstack
    push rx84_bstack, $I11
    repr_get_attr_int rx84_pos, $P11, rx84_curclass, "$!pos"
    nqp_rxpeek $I19, rx84_bstack, rxquantr87_done400
    inc $I19
    inc $I19
    set rx84_rep, rx84_bstack[$I19]
    nqp_rxcommit rx84_bstack, rxquantr87_done400
    inc rx84_rep
  rxquantr87_done400:
    rx84_cur."!cursor_pass"(rx84_pos, "deflongname", 'backtrack'=>1)
    .return (rx84_cur)
  rx84_restart390:
    repr_get_attr_obj rx84_cstack, rx84_cur, rx84_curclass, "$!cstack"
  rx84_fail391:
    unless rx84_bstack, rx84_done389
    pop $I19, rx84_bstack
    if_null rx84_cstack, rx84_cstack_done394
    unless rx84_cstack, rx84_cstack_done394
    dec $I19
    set $P11, rx84_cstack[$I19]
  rx84_cstack_done394:
    pop rx84_rep, rx84_bstack
    pop rx84_pos, rx84_bstack
    pop $I19, rx84_bstack
    lt rx84_pos, -1, rx84_done389
    lt rx84_pos, 0, rx84_fail391
    eq $I19, 0, rx84_fail391
    nqp_islist $I20, rx84_cstack
    unless $I20, rx84_jump392
    elements $I18, rx84_bstack
    le $I18, 0, rx84_cut393
    dec $I18
    set $I18, rx84_bstack[$I18]
  rx84_cut393:
    assign rx84_cstack, $I18
  rx84_jump392:
    jump $I19
  rx84_done389:
    rx84_cur."!cursor_fail"()
    .return (rx84_cur) 
.end
.HLL "nqp"
.namespace []
.sub "ENDSTMT" :subid("cuid_39_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 678
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx89_tgt
    .local int rx89_pos
    .local int rx89_off
    .local int rx89_eos
    .local int rx89_rep
    .local pmc rx89_cur
    .local pmc rx89_curclass
    .local pmc rx89_bstack
    .local pmc rx89_cstack
    (rx89_cur, rx89_tgt, rx89_pos, rx89_curclass, rx89_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx89_cur
    length rx89_eos, rx89_tgt
    eq $I19, 1, rx89_restart405
    gt rx89_pos, rx89_eos, rx89_fail406
    repr_get_attr_int $I11, self, rx89_curclass, "$!from"
    ne $I11, -1, rxscan90_done412
    goto rxscan90_scan411
  rxscan90_loop410:
    inc rx89_pos
    gt rx89_pos, rx89_eos, rx89_fail406
    repr_bind_attr_int rx89_cur, rx89_curclass, "$!from", rx89_pos
  rxscan90_scan411:
    nqp_rxmark rx89_bstack, rxscan90_loop410, rx89_pos, 0
  rxscan90_done412:
    nqp_rxmark rx89_bstack, rxquantr91_done414, rx89_pos, 0
  rxquantr91_loop413:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt92_0416
    nqp_push_label $P11, alt92_1421
    nqp_rxmark rx89_bstack, alt92_end415, -1, 0
    rx89_cur."!alt"(rx89_pos, "alt_nfa__1_1360426904.792", $P11)
    goto rx89_fail406
  alt92_0416:
    nqp_rxmark rx89_bstack, rxquantr93_done418, rx89_pos, 0
  rxquantr93_loop417:
    ge rx89_pos, rx89_eos, rx89_fail406
    substr $S11, rx89_tgt, rx89_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx89_fail406
    inc rx89_pos
    nqp_rxpeek $I19, rx89_bstack, rxquantr93_done418
    inc $I19
    inc $I19
    set rx89_rep, rx89_bstack[$I19]
    nqp_rxcommit rx89_bstack, rxquantr93_done418
    inc rx89_rep
    nqp_rxmark rx89_bstack, rxquantr93_done418, rx89_pos, rx89_rep
    goto rxquantr93_loop417
  rxquantr93_done418:
    is_cclass $I11, .CCLASS_NEWLINE, rx89_tgt, rx89_pos
    if $I11, rxanchor94_done419
    ne rx89_pos, rx89_eos, rx89_fail406
    eq rx89_pos, 0, rxanchor94_done419
    sub $I11, rx89_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx89_tgt, $I11
    if $I11, rx89_fail406
  rxanchor94_done419:
    repr_bind_attr_int rx89_cur, rx89_curclass, "$!pos", rx89_pos
    $P11 = rx89_cur."ws"()
    repr_get_attr_int $I11, $P11, rx89_curclass, "$!pos"
    lt $I11, 0, rx89_fail406
    repr_get_attr_int rx89_pos, $P11, rx89_curclass, "$!pos"
    repr_bind_attr_int rx89_cur, rx89_curclass, "$!pos", rx89_pos
    $P11 = rx89_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx89_curclass, "$!pos"
    lt $I11, 0, rx89_fail406
    goto alt92_end415
  alt92_1421:
    nqp_rxmark rx89_bstack, rxquantr96_done423, rx89_pos, 0
  rxquantr96_loop422:
    repr_bind_attr_int rx89_cur, rx89_curclass, "$!pos", rx89_pos
    $P11 = rx89_cur."unv"()
    repr_get_attr_int $I11, $P11, rx89_curclass, "$!pos"
    lt $I11, 0, rx89_fail406
    goto rxsubrule97_pass424
  rxsubrule97_back425:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx89_curclass, "$!pos"
    lt $I11, 0, rx89_fail406
  rxsubrule97_pass424:
    rx89_cstack = rx89_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule97_back425
    push rx89_bstack, $I11
    push rx89_bstack, 0
    push rx89_bstack, rx89_pos
    elements $I11, rx89_cstack
    push rx89_bstack, $I11
    repr_get_attr_int rx89_pos, $P11, rx89_curclass, "$!pos"
    nqp_rxpeek $I19, rx89_bstack, rxquantr96_done423
    inc $I19
    inc $I19
    set rx89_rep, rx89_bstack[$I19]
    nqp_rxcommit rx89_bstack, rxquantr96_done423
    inc rx89_rep
  rxquantr96_done423:
    is_cclass $I11, .CCLASS_NEWLINE, rx89_tgt, rx89_pos
    if $I11, rxanchor98_done426
    ne rx89_pos, rx89_eos, rx89_fail406
    eq rx89_pos, 0, rxanchor98_done426
    sub $I11, rx89_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx89_tgt, $I11
    if $I11, rx89_fail406
  rxanchor98_done426:
    repr_bind_attr_int rx89_cur, rx89_curclass, "$!pos", rx89_pos
    $P11 = rx89_cur."ws"()
    repr_get_attr_int $I11, $P11, rx89_curclass, "$!pos"
    lt $I11, 0, rx89_fail406
    repr_get_attr_int rx89_pos, $P11, rx89_curclass, "$!pos"
    repr_bind_attr_int rx89_cur, rx89_curclass, "$!pos", rx89_pos
    $P11 = rx89_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx89_curclass, "$!pos"
    lt $I11, 0, rx89_fail406
    goto alt92_end415
  alt92_end415:
    nqp_rxpeek $I19, rx89_bstack, rxquantr91_done414
    inc $I19
    inc $I19
    set rx89_rep, rx89_bstack[$I19]
    nqp_rxcommit rx89_bstack, rxquantr91_done414
    inc rx89_rep
  rxquantr91_done414:
    rx89_cur."!cursor_pass"(rx89_pos, "ENDSTMT", 'backtrack'=>1)
    .return (rx89_cur)
  rx89_restart405:
    repr_get_attr_obj rx89_cstack, rx89_cur, rx89_curclass, "$!cstack"
  rx89_fail406:
    unless rx89_bstack, rx89_done404
    pop $I19, rx89_bstack
    if_null rx89_cstack, rx89_cstack_done409
    unless rx89_cstack, rx89_cstack_done409
    dec $I19
    set $P11, rx89_cstack[$I19]
  rx89_cstack_done409:
    pop rx89_rep, rx89_bstack
    pop rx89_pos, rx89_bstack
    pop $I19, rx89_bstack
    lt rx89_pos, -1, rx89_done404
    lt rx89_pos, 0, rx89_fail406
    eq $I19, 0, rx89_fail406
    nqp_islist $I20, rx89_cstack
    unless $I20, rx89_jump407
    elements $I18, rx89_bstack
    le $I18, 0, rx89_cut408
    dec $I18
    set $I18, rx89_bstack[$I18]
  rx89_cut408:
    assign rx89_cstack, $I18
  rx89_jump407:
    jump $I19
  rx89_done404:
    rx89_cur."!cursor_fail"()
    .return (rx89_cur) 
.end
.HLL "nqp"
.namespace []
.sub "ws" :subid("cuid_40_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 685
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx100_tgt
    .local int rx100_pos
    .local int rx100_off
    .local int rx100_eos
    .local int rx100_rep
    .local pmc rx100_cur
    .local pmc rx100_curclass
    .local pmc rx100_bstack
    .local pmc rx100_cstack
    (rx100_cur, rx100_tgt, rx100_pos, rx100_curclass, rx100_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx100_cur
    length rx100_eos, rx100_tgt
    eq $I19, 1, rx100_restart430
    gt rx100_pos, rx100_eos, rx100_fail431
    repr_get_attr_int $I11, self, rx100_curclass, "$!from"
    ne $I11, -1, rxscan101_done437
    goto rxscan101_scan436
  rxscan101_loop435:
    inc rx100_pos
    gt rx100_pos, rx100_eos, rx100_fail431
    repr_bind_attr_int rx100_cur, rx100_curclass, "$!from", rx100_pos
  rxscan101_scan436:
    nqp_rxmark rx100_bstack, rxscan101_loop435, rx100_pos, 0
  rxscan101_done437:
  alt102_0439:
    nqp_rxmark rx100_bstack, alt102_1440, rx100_pos, 0
    repr_bind_attr_int rx100_cur, rx100_curclass, "$!pos", rx100_pos
    $P11 = rx100_cur."MARKED"("ws")
    repr_get_attr_int $I11, $P11, rx100_curclass, "$!pos"
    lt $I11, 0, rx100_fail431
    goto alt102_end438
  alt102_1440:
    repr_bind_attr_int rx100_cur, rx100_curclass, "$!pos", rx100_pos
    $P11 = rx100_cur."ww"()
    repr_get_attr_int $I11, $P11, rx100_curclass, "$!pos"
    ge $I11, 0, rx100_fail431
    nqp_rxmark rx100_bstack, rxquantr103_done442, rx100_pos, 0
  rxquantr103_loop441:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt104_0444
    nqp_push_label $P11, alt104_1447
    nqp_push_label $P11, alt104_2450
    nqp_push_label $P11, alt104_3453
    nqp_rxmark rx100_bstack, alt104_end443, -1, 0
    rx100_cur."!alt"(rx100_pos, "alt_nfa__2_1360426904.808", $P11)
    goto rx100_fail431
  alt104_0444:
    nqp_rxmark rx100_bstack, rxquantr105_done446, -1, 0
  rxquantr105_loop445:
    ge rx100_pos, rx100_eos, rx100_fail431
    substr $S11, rx100_tgt, rx100_pos, 1
    index $I11, ucs4:"\n\x{b}\f\r\x{85}\u2028\u2029", $S11
    lt $I11, 0, rx100_fail431
    inc rx100_pos
    nqp_rxpeek $I19, rx100_bstack, rxquantr105_done446
    inc $I19
    inc $I19
    set rx100_rep, rx100_bstack[$I19]
    nqp_rxcommit rx100_bstack, rxquantr105_done446
    inc rx100_rep
    nqp_rxmark rx100_bstack, rxquantr105_done446, rx100_pos, rx100_rep
    goto rxquantr105_loop445
  rxquantr105_done446:
    goto alt104_end443
  alt104_1447:
    add $I11, rx100_pos, 1
    gt $I11, rx100_eos, rx100_fail431
    substr $S10, rx100_tgt, rx100_pos, 1
    ne $S10, ucs4:"#", rx100_fail431
    add rx100_pos, 1
    nqp_rxmark rx100_bstack, rxquantr106_done449, rx100_pos, 0
  rxquantr106_loop448:
    ge rx100_pos, rx100_eos, rx100_fail431
    is_cclass $I11, .CCLASS_NEWLINE, rx100_tgt, rx100_pos
    if $I11, rx100_fail431
    add rx100_pos, 1
    nqp_rxpeek $I19, rx100_bstack, rxquantr106_done449
    inc $I19
    inc $I19
    set rx100_rep, rx100_bstack[$I19]
    nqp_rxcommit rx100_bstack, rxquantr106_done449
    inc rx100_rep
    nqp_rxmark rx100_bstack, rxquantr106_done449, rx100_pos, rx100_rep
    goto rxquantr106_loop448
  rxquantr106_done449:
    goto alt104_end443
  alt104_2450:
    eq rx100_pos, 0, rxanchor107_done451
    ge rx100_pos, rx100_eos, rx100_fail431
    sub $I11, rx100_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx100_tgt, $I11
    unless $I11, rx100_fail431
  rxanchor107_done451:
    repr_bind_attr_int rx100_cur, rx100_curclass, "$!pos", rx100_pos
    $P11 = rx100_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx100_curclass, "$!pos"
    lt $I11, 0, rx100_fail431
    repr_get_attr_int rx100_pos, $P11, rx100_curclass, "$!pos"
    goto alt104_end443
  alt104_3453:
    nqp_rxmark rx100_bstack, rxquantr109_done455, -1, 0
  rxquantr109_loop454:
    ge rx100_pos, rx100_eos, rx100_fail431
    substr $S11, rx100_tgt, rx100_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx100_fail431
    inc rx100_pos
    nqp_rxpeek $I19, rx100_bstack, rxquantr109_done455
    inc $I19
    inc $I19
    set rx100_rep, rx100_bstack[$I19]
    nqp_rxcommit rx100_bstack, rxquantr109_done455
    inc rx100_rep
    nqp_rxmark rx100_bstack, rxquantr109_done455, rx100_pos, rx100_rep
    goto rxquantr109_loop454
  rxquantr109_done455:
    goto alt104_end443
  alt104_end443:
    nqp_rxpeek $I19, rx100_bstack, rxquantr103_done442
    inc $I19
    inc $I19
    set rx100_rep, rx100_bstack[$I19]
    nqp_rxcommit rx100_bstack, rxquantr103_done442
    inc rx100_rep
    nqp_rxmark rx100_bstack, rxquantr103_done442, rx100_pos, rx100_rep
    goto rxquantr103_loop441
  rxquantr103_done442:
    repr_bind_attr_int rx100_cur, rx100_curclass, "$!pos", rx100_pos
    $P11 = rx100_cur."MARKER"("ws")
    repr_get_attr_int $I11, $P11, rx100_curclass, "$!pos"
    lt $I11, 0, rx100_fail431
  alt102_end438:
    rx100_cur."!cursor_pass"(rx100_pos, "ws", 'backtrack'=>1)
    .return (rx100_cur)
  rx100_restart430:
    repr_get_attr_obj rx100_cstack, rx100_cur, rx100_curclass, "$!cstack"
  rx100_fail431:
    unless rx100_bstack, rx100_done429
    pop $I19, rx100_bstack
    if_null rx100_cstack, rx100_cstack_done434
    unless rx100_cstack, rx100_cstack_done434
    dec $I19
    set $P11, rx100_cstack[$I19]
  rx100_cstack_done434:
    pop rx100_rep, rx100_bstack
    pop rx100_pos, rx100_bstack
    pop $I19, rx100_bstack
    lt rx100_pos, -1, rx100_done429
    lt rx100_pos, 0, rx100_fail431
    eq $I19, 0, rx100_fail431
    nqp_islist $I20, rx100_cstack
    unless $I20, rx100_jump432
    elements $I18, rx100_bstack
    le $I18, 0, rx100_cut433
    dec $I18
    set $I18, rx100_bstack[$I18]
  rx100_cut433:
    assign rx100_cstack, $I18
  rx100_jump432:
    jump $I19
  rx100_done429:
    rx100_cur."!cursor_fail"()
    .return (rx100_cur) 
.end
.HLL "nqp"
.namespace []
.sub "unv" :subid("cuid_41_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 696
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_42_1360426903.566' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx110_tgt
    .local int rx110_pos
    .local int rx110_off
    .local int rx110_eos
    .local int rx110_rep
    .local pmc rx110_cur
    .local pmc rx110_curclass
    .local pmc rx110_bstack
    .local pmc rx110_cstack
    (rx110_cur, rx110_tgt, rx110_pos, rx110_curclass, rx110_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx110_cur
    length rx110_eos, rx110_tgt
    eq $I19, 1, rx110_restart458
    gt rx110_pos, rx110_eos, rx110_fail459
    repr_get_attr_int $I11, self, rx110_curclass, "$!from"
    ne $I11, -1, rxscan111_done465
    goto rxscan111_scan464
  rxscan111_loop463:
    inc rx110_pos
    gt rx110_pos, rx110_eos, rx110_fail459
    repr_bind_attr_int rx110_cur, rx110_curclass, "$!from", rx110_pos
  rxscan111_scan464:
    nqp_rxmark rx110_bstack, rxscan111_loop463, rx110_pos, 0
  rxscan111_done465:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt112_0467
    nqp_push_label $P11, alt112_1485
    nqp_push_label $P11, alt112_2490
    nqp_rxmark rx110_bstack, alt112_end466, -1, 0
    rx110_cur."!alt"(rx110_pos, "alt_nfa__4_1360426904.825", $P11)
    goto rx110_fail459
  alt112_0467:
    eq rx110_pos, 0, rxanchor113_done468
    ge rx110_pos, rx110_eos, rx110_fail459
    sub $I11, rx110_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx110_tgt, $I11
    unless $I11, rx110_fail459
  rxanchor113_done468:
    .const 'Sub' $P5001 = 'cuid_42_1360426903.566' 
    capture_lex $P5001
    repr_bind_attr_int rx110_cur, rx110_curclass, "$!pos", rx110_pos
    $P11 = rx110_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx110_curclass, "$!pos"
    lt $I11, 0, rx110_fail459
    repr_bind_attr_int rx110_cur, rx110_curclass, "$!pos", rx110_pos
    $P11 = rx110_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx110_curclass, "$!pos"
    lt $I11, 0, rx110_fail459
    repr_get_attr_int rx110_pos, $P11, rx110_curclass, "$!pos"
    goto alt112_end466
  alt112_1485:
    nqp_rxmark rx110_bstack, rxquantr119_done487, rx110_pos, 0
  rxquantr119_loop486:
    ge rx110_pos, rx110_eos, rx110_fail459
    substr $S11, rx110_tgt, rx110_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx110_fail459
    inc rx110_pos
    nqp_rxpeek $I19, rx110_bstack, rxquantr119_done487
    inc $I19
    inc $I19
    set rx110_rep, rx110_bstack[$I19]
    nqp_rxcommit rx110_bstack, rxquantr119_done487
    inc rx110_rep
    nqp_rxmark rx110_bstack, rxquantr119_done487, rx110_pos, rx110_rep
    goto rxquantr119_loop486
  rxquantr119_done487:
    add $I11, rx110_pos, 1
    gt $I11, rx110_eos, rx110_fail459
    substr $S10, rx110_tgt, rx110_pos, 1
    ne $S10, ucs4:"#", rx110_fail459
    add rx110_pos, 1
    nqp_rxmark rx110_bstack, rxquantr120_done489, rx110_pos, 0
  rxquantr120_loop488:
    ge rx110_pos, rx110_eos, rx110_fail459
    is_cclass $I11, .CCLASS_NEWLINE, rx110_tgt, rx110_pos
    if $I11, rx110_fail459
    add rx110_pos, 1
    nqp_rxpeek $I19, rx110_bstack, rxquantr120_done489
    inc $I19
    inc $I19
    set rx110_rep, rx110_bstack[$I19]
    nqp_rxcommit rx110_bstack, rxquantr120_done489
    inc rx110_rep
    nqp_rxmark rx110_bstack, rxquantr120_done489, rx110_pos, rx110_rep
    goto rxquantr120_loop488
  rxquantr120_done489:
    goto alt112_end466
  alt112_2490:
    nqp_rxmark rx110_bstack, rxquantr121_done492, -1, 0
  rxquantr121_loop491:
    ge rx110_pos, rx110_eos, rx110_fail459
    substr $S11, rx110_tgt, rx110_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx110_fail459
    inc rx110_pos
    nqp_rxpeek $I19, rx110_bstack, rxquantr121_done492
    inc $I19
    inc $I19
    set rx110_rep, rx110_bstack[$I19]
    nqp_rxcommit rx110_bstack, rxquantr121_done492
    inc rx110_rep
    nqp_rxmark rx110_bstack, rxquantr121_done492, rx110_pos, rx110_rep
    goto rxquantr121_loop491
  rxquantr121_done492:
    goto alt112_end466
  alt112_end466:
    nqp_rxcommit rx110_bstack, alt112_end466
    rx110_cur."!cursor_pass"(rx110_pos, "unv", 'backtrack'=>1)
    .return (rx110_cur)
  rx110_restart458:
    repr_get_attr_obj rx110_cstack, rx110_cur, rx110_curclass, "$!cstack"
  rx110_fail459:
    unless rx110_bstack, rx110_done457
    pop $I19, rx110_bstack
    if_null rx110_cstack, rx110_cstack_done462
    unless rx110_cstack, rx110_cstack_done462
    dec $I19
    set $P11, rx110_cstack[$I19]
  rx110_cstack_done462:
    pop rx110_rep, rx110_bstack
    pop rx110_pos, rx110_bstack
    pop $I19, rx110_bstack
    lt rx110_pos, -1, rx110_done457
    lt rx110_pos, 0, rx110_fail459
    eq $I19, 0, rx110_fail459
    nqp_islist $I20, rx110_cstack
    unless $I20, rx110_jump460
    elements $I18, rx110_bstack
    le $I18, 0, rx110_cut461
    dec $I18
    set $I18, rx110_bstack[$I18]
  rx110_cut461:
    assign rx110_cstack, $I18
  rx110_jump460:
    jump $I19
  rx110_done457:
    rx110_cur."!cursor_fail"()
    .return (rx110_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_42_1360426903.566") :anon :lex :outer("cuid_41_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx114_tgt
    .local int rx114_pos
    .local int rx114_off
    .local int rx114_eos
    .local int rx114_rep
    .local pmc rx114_cur
    .local pmc rx114_curclass
    .local pmc rx114_bstack
    .local pmc rx114_cstack
    (rx114_cur, rx114_tgt, rx114_pos, rx114_curclass, rx114_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx114_cur
    length rx114_eos, rx114_tgt
    eq $I19, 1, rx114_restart471
    gt rx114_pos, rx114_eos, rx114_fail472
    repr_get_attr_int $I11, self, rx114_curclass, "$!from"
    ne $I11, -1, rxscan115_done478
    goto rxscan115_scan477
  rxscan115_loop476:
    inc rx114_pos
    gt rx114_pos, rx114_eos, rx114_fail472
    repr_bind_attr_int rx114_cur, rx114_curclass, "$!from", rx114_pos
  rxscan115_scan477:
    nqp_rxmark rx114_bstack, rxscan115_loop476, rx114_pos, 0
  rxscan115_done478:
    nqp_rxmark rx114_bstack, rxquantr116_done480, rx114_pos, 0
  rxquantr116_loop479:
    ge rx114_pos, rx114_eos, rx114_fail472
    substr $S11, rx114_tgt, rx114_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx114_fail472
    inc rx114_pos
    nqp_rxpeek $I19, rx114_bstack, rxquantr116_done480
    inc $I19
    inc $I19
    set rx114_rep, rx114_bstack[$I19]
    nqp_rxcommit rx114_bstack, rxquantr116_done480
    inc rx114_rep
    nqp_rxmark rx114_bstack, rxquantr116_done480, rx114_pos, rx114_rep
    goto rxquantr116_loop479
  rxquantr116_done480:
    add $I11, rx114_pos, 1
    gt $I11, rx114_eos, rx114_fail472
    substr $S10, rx114_tgt, rx114_pos, 1
    ne $S10, ucs4:"=", rx114_fail472
    add rx114_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt117_0482
    nqp_push_label $P11, alt117_1483
    nqp_rxmark rx114_bstack, alt117_end481, -1, 0
    rx114_cur."!alt"(rx114_pos, "alt_nfa__3_1360426904.817", $P11)
    goto rx114_fail472
  alt117_0482:
    ge rx114_pos, rx114_eos, rx114_fail472
    is_cclass $I11, .CCLASS_WORD, rx114_tgt, rx114_pos
    unless $I11, rx114_fail472
    add rx114_pos, 1
    goto alt117_end481
  alt117_1483:
    add $I11, rx114_pos, 1
    gt $I11, rx114_eos, rx114_fail472
    substr $S10, rx114_tgt, rx114_pos, 1
    ne $S10, ucs4:"\\", rx114_fail472
    add rx114_pos, 1
    goto alt117_end481
  alt117_end481:
    nqp_rxcommit rx114_bstack, alt117_end481
    rx114_cur."!cursor_pass"(rx114_pos, 'backtrack'=>1)
    .return (rx114_cur)
  rx114_restart471:
    repr_get_attr_obj rx114_cstack, rx114_cur, rx114_curclass, "$!cstack"
  rx114_fail472:
    unless rx114_bstack, rx114_done470
    pop $I19, rx114_bstack
    if_null rx114_cstack, rx114_cstack_done475
    unless rx114_cstack, rx114_cstack_done475
    dec $I19
    set $P11, rx114_cstack[$I19]
  rx114_cstack_done475:
    pop rx114_rep, rx114_bstack
    pop rx114_pos, rx114_bstack
    pop $I19, rx114_bstack
    lt rx114_pos, -1, rx114_done470
    lt rx114_pos, 0, rx114_fail472
    eq $I19, 0, rx114_fail472
    nqp_islist $I20, rx114_cstack
    unless $I20, rx114_jump473
    elements $I18, rx114_bstack
    le $I18, 0, rx114_cut474
    dec $I18
    set $I18, rx114_bstack[$I18]
  rx114_cut474:
    assign rx114_cstack, $I18
  rx114_jump473:
    jump $I19
  rx114_done470:
    rx114_cur."!cursor_fail"()
    .return (rx114_cur) 
.end
.HLL "nqp"
.namespace []
.sub "pod_comment" :subid("cuid_43_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 705
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_44_1360426903.566' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx122_tgt
    .local int rx122_pos
    .local int rx122_off
    .local int rx122_eos
    .local int rx122_rep
    .local pmc rx122_cur
    .local pmc rx122_curclass
    .local pmc rx122_bstack
    .local pmc rx122_cstack
    (rx122_cur, rx122_tgt, rx122_pos, rx122_curclass, rx122_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx122_cur
    length rx122_eos, rx122_tgt
    eq $I19, 1, rx122_restart495
    gt rx122_pos, rx122_eos, rx122_fail496
    repr_get_attr_int $I11, self, rx122_curclass, "$!from"
    ne $I11, -1, rxscan123_done502
    goto rxscan123_scan501
  rxscan123_loop500:
    inc rx122_pos
    gt rx122_pos, rx122_eos, rx122_fail496
    repr_bind_attr_int rx122_cur, rx122_curclass, "$!from", rx122_pos
  rxscan123_scan501:
    nqp_rxmark rx122_bstack, rxscan123_loop500, rx122_pos, 0
  rxscan123_done502:
    eq rx122_pos, 0, rxanchor124_done503
    ge rx122_pos, rx122_eos, rx122_fail496
    sub $I11, rx122_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx122_tgt, $I11
    unless $I11, rx122_fail496
  rxanchor124_done503:
    nqp_rxmark rx122_bstack, rxquantr125_done505, rx122_pos, 0
  rxquantr125_loop504:
    ge rx122_pos, rx122_eos, rx122_fail496
    substr $S11, rx122_tgt, rx122_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx122_fail496
    inc rx122_pos
    nqp_rxpeek $I19, rx122_bstack, rxquantr125_done505
    inc $I19
    inc $I19
    set rx122_rep, rx122_bstack[$I19]
    nqp_rxcommit rx122_bstack, rxquantr125_done505
    inc rx122_rep
    nqp_rxmark rx122_bstack, rxquantr125_done505, rx122_pos, rx122_rep
    goto rxquantr125_loop504
  rxquantr125_done505:
    add $I11, rx122_pos, 1
    gt $I11, rx122_eos, rx122_fail496
    substr $S10, rx122_tgt, rx122_pos, 1
    ne $S10, ucs4:"=", rx122_fail496
    add rx122_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt126_0507
    nqp_push_label $P11, alt126_1526
    nqp_push_label $P11, alt126_2545
    nqp_push_label $P11, alt126_3567
    nqp_push_label $P11, alt126_4592
    nqp_rxmark rx122_bstack, alt126_end506, -1, 0
    rx122_cur."!alt"(rx122_pos, "alt_nfa__6_1360426904.905", $P11)
    goto rx122_fail496
  alt126_0507:
    add $I11, rx122_pos, 5
    gt $I11, rx122_eos, rx122_fail496
    substr $S10, rx122_tgt, rx122_pos, 5
    ne $S10, ucs4:"begin", rx122_fail496
    add rx122_pos, 5
    nqp_rxmark rx122_bstack, rxquantr127_done509, -1, 0
  rxquantr127_loop508:
    ge rx122_pos, rx122_eos, rx122_fail496
    substr $S11, rx122_tgt, rx122_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx122_fail496
    inc rx122_pos
    nqp_rxpeek $I19, rx122_bstack, rxquantr127_done509
    inc $I19
    inc $I19
    set rx122_rep, rx122_bstack[$I19]
    nqp_rxcommit rx122_bstack, rxquantr127_done509
    inc rx122_rep
    nqp_rxmark rx122_bstack, rxquantr127_done509, rx122_pos, rx122_rep
    goto rxquantr127_loop508
  rxquantr127_done509:
    add $I11, rx122_pos, 3
    gt $I11, rx122_eos, rx122_fail496
    substr $S10, rx122_tgt, rx122_pos, 3
    ne $S10, ucs4:"END", rx122_fail496
    add rx122_pos, 3
    le rx122_pos, 0, rx122_fail496
    is_cclass $I11, .CCLASS_WORD, rx122_tgt, rx122_pos
    if $I11, rx122_fail496
    sub $I11, rx122_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx122_tgt, $I11
    unless $I11, rx122_fail496
  alt129_0512:
    nqp_rxmark rx122_bstack, alt129_1523, rx122_pos, 0
    set rx122_rep, 0
    nqp_rxmark rx122_bstack, rxquantf130_loop513, rx122_pos, rx122_rep
    goto rxquantf130_done514
  rxquantf130_loop513:
    set $I12, rx122_rep
    ge rx122_pos, rx122_eos, rx122_fail496
    add rx122_pos, 1
    set rx122_rep, $I12
    inc rx122_rep
    nqp_rxmark rx122_bstack, rxquantf130_loop513, rx122_pos, rx122_rep
  rxquantf130_done514:
    ge rx122_pos, rx122_eos, rx122_fail496
    is_cclass $I11, .CCLASS_NEWLINE, rx122_tgt, rx122_pos
    unless $I11, rx122_fail496
    substr $S10, rx122_tgt, rx122_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx122_pos, $I11
    add rx122_pos, 1
    nqp_rxmark rx122_bstack, rxquantr131_done517, rx122_pos, 0
  rxquantr131_loop516:
    ge rx122_pos, rx122_eos, rx122_fail496
    substr $S11, rx122_tgt, rx122_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx122_fail496
    inc rx122_pos
    nqp_rxpeek $I19, rx122_bstack, rxquantr131_done517
    inc $I19
    inc $I19
    set rx122_rep, rx122_bstack[$I19]
    nqp_rxcommit rx122_bstack, rxquantr131_done517
    inc rx122_rep
    nqp_rxmark rx122_bstack, rxquantr131_done517, rx122_pos, rx122_rep
    goto rxquantr131_loop516
  rxquantr131_done517:
    add $I11, rx122_pos, 4
    gt $I11, rx122_eos, rx122_fail496
    substr $S10, rx122_tgt, rx122_pos, 4
    ne $S10, ucs4:"=end", rx122_fail496
    add rx122_pos, 4
    nqp_rxmark rx122_bstack, rxquantr132_done519, -1, 0
  rxquantr132_loop518:
    ge rx122_pos, rx122_eos, rx122_fail496
    substr $S11, rx122_tgt, rx122_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx122_fail496
    inc rx122_pos
    nqp_rxpeek $I19, rx122_bstack, rxquantr132_done519
    inc $I19
    inc $I19
    set rx122_rep, rx122_bstack[$I19]
    nqp_rxcommit rx122_bstack, rxquantr132_done519
    inc rx122_rep
    nqp_rxmark rx122_bstack, rxquantr132_done519, rx122_pos, rx122_rep
    goto rxquantr132_loop518
  rxquantr132_done519:
    add $I11, rx122_pos, 3
    gt $I11, rx122_eos, rx122_fail496
    substr $S10, rx122_tgt, rx122_pos, 3
    ne $S10, ucs4:"END", rx122_fail496
    add rx122_pos, 3
    le rx122_pos, 0, rx122_fail496
    is_cclass $I11, .CCLASS_WORD, rx122_tgt, rx122_pos
    if $I11, rx122_fail496
    sub $I11, rx122_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx122_tgt, $I11
    unless $I11, rx122_fail496
    nqp_rxmark rx122_bstack, rxquantr134_done522, rx122_pos, 0
  rxquantr134_loop521:
    ge rx122_pos, rx122_eos, rx122_fail496
    is_cclass $I11, .CCLASS_NEWLINE, rx122_tgt, rx122_pos
    if $I11, rx122_fail496
    add rx122_pos, 1
    nqp_rxpeek $I19, rx122_bstack, rxquantr134_done522
    inc $I19
    inc $I19
    set rx122_rep, rx122_bstack[$I19]
    nqp_rxcommit rx122_bstack, rxquantr134_done522
    inc rx122_rep
    nqp_rxmark rx122_bstack, rxquantr134_done522, rx122_pos, rx122_rep
    goto rxquantr134_loop521
  rxquantr134_done522:
    goto alt129_end511
  alt129_1523:
    nqp_rxmark rx122_bstack, rxquantr135_done525, rx122_pos, 0
  rxquantr135_loop524:
    ge rx122_pos, rx122_eos, rx122_fail496
    add rx122_pos, 1
    nqp_rxpeek $I19, rx122_bstack, rxquantr135_done525
    inc $I19
    inc $I19
    set rx122_rep, rx122_bstack[$I19]
    nqp_rxcommit rx122_bstack, rxquantr135_done525
    inc rx122_rep
    nqp_rxmark rx122_bstack, rxquantr135_done525, rx122_pos, rx122_rep
    goto rxquantr135_loop524
  rxquantr135_done525:
  alt129_end511:
    goto alt126_end506
  alt126_1526:
    add $I11, rx122_pos, 5
    gt $I11, rx122_eos, rx122_fail496
    substr $S10, rx122_tgt, rx122_pos, 5
    ne $S10, ucs4:"begin", rx122_fail496
    add rx122_pos, 5
    nqp_rxmark rx122_bstack, rxquantr136_done528, -1, 0
  rxquantr136_loop527:
    ge rx122_pos, rx122_eos, rx122_fail496
    substr $S11, rx122_tgt, rx122_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx122_fail496
    inc rx122_pos
    nqp_rxpeek $I19, rx122_bstack, rxquantr136_done528
    inc $I19
    inc $I19
    set rx122_rep, rx122_bstack[$I19]
    nqp_rxcommit rx122_bstack, rxquantr136_done528
    inc rx122_rep
    nqp_rxmark rx122_bstack, rxquantr136_done528, rx122_pos, rx122_rep
    goto rxquantr136_loop527
  rxquantr136_done528:
    repr_bind_attr_int rx122_cur, rx122_curclass, "$!pos", rx122_pos
    $P11 = rx122_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx122_curclass, "$!pos"
    lt $I11, 0, rx122_fail496
    nqp_rxmark rx122_bstack, rxsubrule137_pass529, -1, 0
  rxsubrule137_pass529:
    rx122_cstack = rx122_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx122_pos, $P11, rx122_curclass, "$!pos"
  alt138_0531:
    nqp_rxmark rx122_bstack, alt138_1543, rx122_pos, 0
    set rx122_rep, 0
    nqp_rxmark rx122_bstack, rxquantf139_loop532, rx122_pos, rx122_rep
    goto rxquantf139_done533
  rxquantf139_loop532:
    set $I12, rx122_rep
    ge rx122_pos, rx122_eos, rx122_fail496
    add rx122_pos, 1
    set rx122_rep, $I12
    inc rx122_rep
    nqp_rxmark rx122_bstack, rxquantf139_loop532, rx122_pos, rx122_rep
  rxquantf139_done533:
    ge rx122_pos, rx122_eos, rx122_fail496
    is_cclass $I11, .CCLASS_NEWLINE, rx122_tgt, rx122_pos
    unless $I11, rx122_fail496
    substr $S10, rx122_tgt, rx122_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx122_pos, $I11
    add rx122_pos, 1
    nqp_rxmark rx122_bstack, rxquantr140_done536, rx122_pos, 0
  rxquantr140_loop535:
    ge rx122_pos, rx122_eos, rx122_fail496
    substr $S11, rx122_tgt, rx122_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx122_fail496
    inc rx122_pos
    nqp_rxpeek $I19, rx122_bstack, rxquantr140_done536
    inc $I19
    inc $I19
    set rx122_rep, rx122_bstack[$I19]
    nqp_rxcommit rx122_bstack, rxquantr140_done536
    inc rx122_rep
    nqp_rxmark rx122_bstack, rxquantr140_done536, rx122_pos, rx122_rep
    goto rxquantr140_loop535
  rxquantr140_done536:
    add $I11, rx122_pos, 4
    gt $I11, rx122_eos, rx122_fail496
    substr $S10, rx122_tgt, rx122_pos, 4
    ne $S10, ucs4:"=end", rx122_fail496
    add rx122_pos, 4
    nqp_rxmark rx122_bstack, rxquantr141_done538, -1, 0
  rxquantr141_loop537:
    ge rx122_pos, rx122_eos, rx122_fail496
    substr $S11, rx122_tgt, rx122_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx122_fail496
    inc rx122_pos
    nqp_rxpeek $I19, rx122_bstack, rxquantr141_done538
    inc $I19
    inc $I19
    set rx122_rep, rx122_bstack[$I19]
    nqp_rxcommit rx122_bstack, rxquantr141_done538
    inc rx122_rep
    nqp_rxmark rx122_bstack, rxquantr141_done538, rx122_pos, rx122_rep
    goto rxquantr141_loop537
  rxquantr141_done538:
    repr_bind_attr_int rx122_cur, rx122_curclass, "$!pos", rx122_pos
    $P11 = rx122_cur."!BACKREF"("identifier")
    repr_get_attr_int $I11, $P11, rx122_curclass, "$!pos"
    lt $I11, 0, rx122_fail496
    repr_get_attr_int rx122_pos, $P11, rx122_curclass, "$!pos"
    le rx122_pos, 0, rx122_fail496
    is_cclass $I11, .CCLASS_WORD, rx122_tgt, rx122_pos
    if $I11, rx122_fail496
    sub $I11, rx122_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx122_tgt, $I11
    unless $I11, rx122_fail496
    nqp_rxmark rx122_bstack, rxquantr144_done542, rx122_pos, 0
  rxquantr144_loop541:
    ge rx122_pos, rx122_eos, rx122_fail496
    is_cclass $I11, .CCLASS_NEWLINE, rx122_tgt, rx122_pos
    if $I11, rx122_fail496
    add rx122_pos, 1
    nqp_rxpeek $I19, rx122_bstack, rxquantr144_done542
    inc $I19
    inc $I19
    set rx122_rep, rx122_bstack[$I19]
    nqp_rxcommit rx122_bstack, rxquantr144_done542
    inc rx122_rep
    nqp_rxmark rx122_bstack, rxquantr144_done542, rx122_pos, rx122_rep
    goto rxquantr144_loop541
  rxquantr144_done542:
    goto alt138_end530
  alt138_1543:
    repr_bind_attr_int rx122_cur, rx122_curclass, "$!pos", rx122_pos
    $P11 = rx122_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx122_curclass, "$!pos"
    lt $I11, 0, rx122_fail496
    repr_get_attr_int rx122_pos, $P11, rx122_curclass, "$!pos"
  alt138_end530:
    goto alt126_end506
  alt126_2545:
    add $I11, rx122_pos, 5
    gt $I11, rx122_eos, rx122_fail496
    substr $S10, rx122_tgt, rx122_pos, 5
    ne $S10, ucs4:"begin", rx122_fail496
    add rx122_pos, 5
    le rx122_pos, 0, rx122_fail496
    is_cclass $I11, .CCLASS_WORD, rx122_tgt, rx122_pos
    if $I11, rx122_fail496
    sub $I11, rx122_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx122_tgt, $I11
    unless $I11, rx122_fail496
    nqp_rxmark rx122_bstack, rxquantr147_done548, rx122_pos, 0
  rxquantr147_loop547:
    ge rx122_pos, rx122_eos, rx122_fail496
    substr $S11, rx122_tgt, rx122_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx122_fail496
    inc rx122_pos
    nqp_rxpeek $I19, rx122_bstack, rxquantr147_done548
    inc $I19
    inc $I19
    set rx122_rep, rx122_bstack[$I19]
    nqp_rxcommit rx122_bstack, rxquantr147_done548
    inc rx122_rep
    nqp_rxmark rx122_bstack, rxquantr147_done548, rx122_pos, rx122_rep
    goto rxquantr147_loop547
  rxquantr147_done548:
  alt148_0550:
    nqp_rxmark rx122_bstack, alt148_1552, rx122_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx122_tgt, rx122_pos
    if $I11, rxanchor149_done551
    ne rx122_pos, rx122_eos, rx122_fail496
    eq rx122_pos, 0, rxanchor149_done551
    sub $I11, rx122_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx122_tgt, $I11
    if $I11, rx122_fail496
  rxanchor149_done551:
    goto alt148_end549
  alt148_1552:
    nqp_rxmark rx122_bstack, alt148_2553, rx122_pos, 0
    add $I11, rx122_pos, 1
    gt $I11, rx122_eos, rx122_fail496
    substr $S10, rx122_tgt, rx122_pos, 1
    ne $S10, ucs4:"#", rx122_fail496
    add rx122_pos, 1
    goto alt148_end549
  alt148_2553:
    repr_bind_attr_int rx122_cur, rx122_curclass, "$!pos", rx122_pos
    $P11 = rx122_cur."panic"("Unrecognized token after =begin")
    repr_get_attr_int $I11, $P11, rx122_curclass, "$!pos"
    lt $I11, 0, rx122_fail496
    repr_get_attr_int rx122_pos, $P11, rx122_curclass, "$!pos"
  alt148_end549:
  alt151_0556:
    nqp_rxmark rx122_bstack, alt151_1565, rx122_pos, 0
    set rx122_rep, 0
    nqp_rxmark rx122_bstack, rxquantf152_loop557, rx122_pos, rx122_rep
    goto rxquantf152_done558
  rxquantf152_loop557:
    set $I12, rx122_rep
    ge rx122_pos, rx122_eos, rx122_fail496
    add rx122_pos, 1
    set rx122_rep, $I12
    inc rx122_rep
    nqp_rxmark rx122_bstack, rxquantf152_loop557, rx122_pos, rx122_rep
  rxquantf152_done558:
    ge rx122_pos, rx122_eos, rx122_fail496
    is_cclass $I11, .CCLASS_NEWLINE, rx122_tgt, rx122_pos
    unless $I11, rx122_fail496
    substr $S10, rx122_tgt, rx122_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx122_pos, $I11
    add rx122_pos, 1
    nqp_rxmark rx122_bstack, rxquantr153_done561, rx122_pos, 0
  rxquantr153_loop560:
    ge rx122_pos, rx122_eos, rx122_fail496
    substr $S11, rx122_tgt, rx122_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx122_fail496
    inc rx122_pos
    nqp_rxpeek $I19, rx122_bstack, rxquantr153_done561
    inc $I19
    inc $I19
    set rx122_rep, rx122_bstack[$I19]
    nqp_rxcommit rx122_bstack, rxquantr153_done561
    inc rx122_rep
    nqp_rxmark rx122_bstack, rxquantr153_done561, rx122_pos, rx122_rep
    goto rxquantr153_loop560
  rxquantr153_done561:
    add $I11, rx122_pos, 4
    gt $I11, rx122_eos, rx122_fail496
    substr $S10, rx122_tgt, rx122_pos, 4
    ne $S10, ucs4:"=end", rx122_fail496
    add rx122_pos, 4
    le rx122_pos, 0, rx122_fail496
    is_cclass $I11, .CCLASS_WORD, rx122_tgt, rx122_pos
    if $I11, rx122_fail496
    sub $I11, rx122_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx122_tgt, $I11
    unless $I11, rx122_fail496
    nqp_rxmark rx122_bstack, rxquantr155_done564, rx122_pos, 0
  rxquantr155_loop563:
    ge rx122_pos, rx122_eos, rx122_fail496
    is_cclass $I11, .CCLASS_NEWLINE, rx122_tgt, rx122_pos
    if $I11, rx122_fail496
    add rx122_pos, 1
    nqp_rxpeek $I19, rx122_bstack, rxquantr155_done564
    inc $I19
    inc $I19
    set rx122_rep, rx122_bstack[$I19]
    nqp_rxcommit rx122_bstack, rxquantr155_done564
    inc rx122_rep
    nqp_rxmark rx122_bstack, rxquantr155_done564, rx122_pos, rx122_rep
    goto rxquantr155_loop563
  rxquantr155_done564:
    goto alt151_end555
  alt151_1565:
    repr_bind_attr_int rx122_cur, rx122_curclass, "$!pos", rx122_pos
    $P11 = rx122_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx122_curclass, "$!pos"
    lt $I11, 0, rx122_fail496
    repr_get_attr_int rx122_pos, $P11, rx122_curclass, "$!pos"
  alt151_end555:
    goto alt126_end506
  alt126_3567:
    repr_bind_attr_int rx122_cur, rx122_curclass, "$!pos", rx122_pos
    $P11 = rx122_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx122_curclass, "$!pos"
    lt $I11, 0, rx122_fail496
    nqp_rxmark rx122_bstack, rxsubrule157_pass568, -1, 0
  rxsubrule157_pass568:
    rx122_cstack = rx122_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx122_pos, $P11, rx122_curclass, "$!pos"
    set rx122_rep, 0
    nqp_rxmark rx122_bstack, rxquantf158_loop569, rx122_pos, rx122_rep
    goto rxquantf158_done570
  rxquantf158_loop569:
    set $I12, rx122_rep
    ge rx122_pos, rx122_eos, rx122_fail496
    add rx122_pos, 1
    set rx122_rep, $I12
    inc rx122_rep
    nqp_rxmark rx122_bstack, rxquantf158_loop569, rx122_pos, rx122_rep
  rxquantf158_done570:
    eq rx122_pos, 0, rxanchor159_done572
    ge rx122_pos, rx122_eos, rx122_fail496
    sub $I11, rx122_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx122_tgt, $I11
    unless $I11, rx122_fail496
  rxanchor159_done572:
    .const 'Sub' $P5001 = 'cuid_44_1360426903.566' 
    capture_lex $P5001
    repr_bind_attr_int rx122_cur, rx122_curclass, "$!pos", rx122_pos
    $P11 = rx122_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx122_curclass, "$!pos"
    lt $I11, 0, rx122_fail496
    goto alt126_end506
  alt126_4592:
  alt167_0594:
    nqp_rxmark rx122_bstack, alt167_1595, rx122_pos, 0
    ge rx122_pos, rx122_eos, rx122_fail496
    is_cclass $I11, .CCLASS_WHITESPACE, rx122_tgt, rx122_pos
    unless $I11, rx122_fail496
    add rx122_pos, 1
    goto alt167_end593
  alt167_1595:
    repr_bind_attr_int rx122_cur, rx122_curclass, "$!pos", rx122_pos
    $P11 = rx122_cur."panic"("Illegal pod directive")
    repr_get_attr_int $I11, $P11, rx122_curclass, "$!pos"
    lt $I11, 0, rx122_fail496
    repr_get_attr_int rx122_pos, $P11, rx122_curclass, "$!pos"
  alt167_end593:
    nqp_rxmark rx122_bstack, rxquantr169_done598, rx122_pos, 0
  rxquantr169_loop597:
    ge rx122_pos, rx122_eos, rx122_fail496
    is_cclass $I11, .CCLASS_NEWLINE, rx122_tgt, rx122_pos
    if $I11, rx122_fail496
    add rx122_pos, 1
    nqp_rxpeek $I19, rx122_bstack, rxquantr169_done598
    inc $I19
    inc $I19
    set rx122_rep, rx122_bstack[$I19]
    nqp_rxcommit rx122_bstack, rxquantr169_done598
    inc rx122_rep
    nqp_rxmark rx122_bstack, rxquantr169_done598, rx122_pos, rx122_rep
    goto rxquantr169_loop597
  rxquantr169_done598:
    goto alt126_end506
  alt126_end506:
    nqp_rxcommit rx122_bstack, alt126_end506
    rx122_cur."!cursor_pass"(rx122_pos, "pod_comment", 'backtrack'=>1)
    .return (rx122_cur)
  rx122_restart495:
    repr_get_attr_obj rx122_cstack, rx122_cur, rx122_curclass, "$!cstack"
  rx122_fail496:
    unless rx122_bstack, rx122_done494
    pop $I19, rx122_bstack
    if_null rx122_cstack, rx122_cstack_done499
    unless rx122_cstack, rx122_cstack_done499
    dec $I19
    set $P11, rx122_cstack[$I19]
  rx122_cstack_done499:
    pop rx122_rep, rx122_bstack
    pop rx122_pos, rx122_bstack
    pop $I19, rx122_bstack
    lt rx122_pos, -1, rx122_done494
    lt rx122_pos, 0, rx122_fail496
    eq $I19, 0, rx122_fail496
    nqp_islist $I20, rx122_cstack
    unless $I20, rx122_jump497
    elements $I18, rx122_bstack
    le $I18, 0, rx122_cut498
    dec $I18
    set $I18, rx122_bstack[$I18]
  rx122_cut498:
    assign rx122_cstack, $I18
  rx122_jump497:
    jump $I19
  rx122_done494:
    rx122_cur."!cursor_fail"()
    .return (rx122_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_44_1360426903.566") :anon :lex :outer("cuid_43_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx160_tgt
    .local int rx160_pos
    .local int rx160_off
    .local int rx160_eos
    .local int rx160_rep
    .local pmc rx160_cur
    .local pmc rx160_curclass
    .local pmc rx160_bstack
    .local pmc rx160_cstack
    (rx160_cur, rx160_tgt, rx160_pos, rx160_curclass, rx160_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx160_cur
    length rx160_eos, rx160_tgt
    eq $I19, 1, rx160_restart575
    gt rx160_pos, rx160_eos, rx160_fail576
    repr_get_attr_int $I11, self, rx160_curclass, "$!from"
    ne $I11, -1, rxscan161_done582
    goto rxscan161_scan581
  rxscan161_loop580:
    inc rx160_pos
    gt rx160_pos, rx160_eos, rx160_fail576
    repr_bind_attr_int rx160_cur, rx160_curclass, "$!from", rx160_pos
  rxscan161_scan581:
    nqp_rxmark rx160_bstack, rxscan161_loop580, rx160_pos, 0
  rxscan161_done582:
    nqp_rxmark rx160_bstack, rxquantr162_done584, rx160_pos, 0
  rxquantr162_loop583:
    ge rx160_pos, rx160_eos, rx160_fail576
    substr $S11, rx160_tgt, rx160_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx160_fail576
    inc rx160_pos
    nqp_rxpeek $I19, rx160_bstack, rxquantr162_done584
    inc $I19
    inc $I19
    set rx160_rep, rx160_bstack[$I19]
    nqp_rxcommit rx160_bstack, rxquantr162_done584
    inc rx160_rep
    nqp_rxmark rx160_bstack, rxquantr162_done584, rx160_pos, rx160_rep
    goto rxquantr162_loop583
  rxquantr162_done584:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt163_0586
    nqp_push_label $P11, alt163_1591
    nqp_rxmark rx160_bstack, alt163_end585, -1, 0
    rx160_cur."!alt"(rx160_pos, "alt_nfa__5_1360426904.893", $P11)
    goto rx160_fail576
  alt163_0586:
    add $I11, rx160_pos, 1
    gt $I11, rx160_eos, rx160_fail576
    substr $S10, rx160_tgt, rx160_pos, 1
    ne $S10, ucs4:"=", rx160_fail576
    add rx160_pos, 1
    nqp_rxmark rx160_bstack, rxquantr164_done588, rx160_pos, 0
  rxquantr164_loop587:
    add $I11, rx160_pos, 3
    gt $I11, rx160_eos, rx160_fail576
    substr $S10, rx160_tgt, rx160_pos, 3
    ne $S10, ucs4:"cut", rx160_fail576
    add rx160_pos, 3
    le rx160_pos, 0, rx160_fail576
    is_cclass $I11, .CCLASS_WORD, rx160_tgt, rx160_pos
    if $I11, rx160_fail576
    sub $I11, rx160_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx160_tgt, $I11
    unless $I11, rx160_fail576
    repr_bind_attr_int rx160_cur, rx160_curclass, "$!pos", rx160_pos
    $P11 = rx160_cur."panic"("Obsolete pod format, please use =begin/=end instead")
    repr_get_attr_int $I11, $P11, rx160_curclass, "$!pos"
    lt $I11, 0, rx160_fail576
    repr_get_attr_int rx160_pos, $P11, rx160_curclass, "$!pos"
    nqp_rxpeek $I19, rx160_bstack, rxquantr164_done588
    inc $I19
    inc $I19
    set rx160_rep, rx160_bstack[$I19]
    nqp_rxcommit rx160_bstack, rxquantr164_done588
    inc rx160_rep
  rxquantr164_done588:
    goto alt163_end585
  alt163_1591:
    ge rx160_pos, rx160_eos, rx160_fail576
    is_cclass $I11, .CCLASS_NEWLINE, rx160_tgt, rx160_pos
    unless $I11, rx160_fail576
    substr $S10, rx160_tgt, rx160_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx160_pos, $I11
    add rx160_pos, 1
    goto alt163_end585
  alt163_end585:
    nqp_rxcommit rx160_bstack, alt163_end585
    rx160_cur."!cursor_pass"(rx160_pos, 'backtrack'=>1)
    .return (rx160_cur)
  rx160_restart575:
    repr_get_attr_obj rx160_cstack, rx160_cur, rx160_curclass, "$!cstack"
  rx160_fail576:
    unless rx160_bstack, rx160_done574
    pop $I19, rx160_bstack
    if_null rx160_cstack, rx160_cstack_done579
    unless rx160_cstack, rx160_cstack_done579
    dec $I19
    set $P11, rx160_cstack[$I19]
  rx160_cstack_done579:
    pop rx160_rep, rx160_bstack
    pop rx160_pos, rx160_bstack
    pop $I19, rx160_bstack
    lt rx160_pos, -1, rx160_done574
    lt rx160_pos, 0, rx160_fail576
    eq $I19, 0, rx160_fail576
    nqp_islist $I20, rx160_cstack
    unless $I20, rx160_jump577
    elements $I18, rx160_bstack
    le $I18, 0, rx160_cut578
    dec $I18
    set $I18, rx160_bstack[$I18]
  rx160_cut578:
    assign rx160_cstack, $I18
  rx160_jump577:
    jump $I19
  rx160_done574:
    rx160_cur."!cursor_fail"()
    .return (rx160_cur) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_45_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 736
    .param pmc _lex_param_0 
    .const 'Sub' $P5061 = 'cuid_396_1360426903.566' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_397_1360426903.566' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_399_1360426903.566' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_400_1360426903.566' 
    capture_lex $P5061 
    .lex "$*IN_DECL", $P101 
    .lex "$*HAS_YOU_ARE_HERE", $P102 
    .lex "$*MAIN_SUB", $P103 
    .lex "$*UNIT", $P104 
    .lex "$*GLOBALish", $P105 
    .lex "$*PACKAGE", $P106 
    .lex "$*EXPORT", $P107 
    .lex utf8:"$\x{a2}", $P108 
    .lex "$/", $P109 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P104, $P5004
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P105, $P5005
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P106, $P5006
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P107, $P5007
    set self, _lex_param_0
    .local string rx170_tgt
    .local int rx170_pos
    .local int rx170_off
    .local int rx170_eos
    .local int rx170_rep
    .local pmc rx170_cur
    .local pmc rx170_curclass
    .local pmc rx170_bstack
    .local pmc rx170_cstack
    (rx170_cur, rx170_tgt, rx170_pos, rx170_curclass, rx170_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx170_cur
    length rx170_eos, rx170_tgt
    eq $I19, 1, rx170_restart601
    gt rx170_pos, rx170_eos, rx170_fail602
    repr_get_attr_int $I11, self, rx170_curclass, "$!from"
    ne $I11, -1, rxscan171_done608
    goto rxscan171_scan607
  rxscan171_loop606:
    inc rx170_pos
    gt rx170_pos, rx170_eos, rx170_fail602
    repr_bind_attr_int rx170_cur, rx170_curclass, "$!from", rx170_pos
  rxscan171_scan607:
    nqp_rxmark rx170_bstack, rxscan171_loop606, rx170_pos, 0
  rxscan171_done608:
    repr_bind_attr_int rx170_cur, rx170_curclass, "$!pos", rx170_pos
    store_lex unicode:"$\x{a2}", rx170_cur
    box $P5008, ""
    set $P101, $P5008
    repr_bind_attr_int rx170_cur, rx170_curclass, "$!pos", rx170_pos
    store_lex unicode:"$\x{a2}", rx170_cur
    box $P5009, 0
    set $P102, $P5009
    repr_bind_attr_int rx170_cur, rx170_curclass, "$!pos", rx170_pos
    store_lex unicode:"$\x{a2}", rx170_cur
    unless_null $P103, fallback609
    nqp_get_sc_object $P5012, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$MAIN_SUB"]
    unless_null $P5010, fallback610
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5013
  fallback610:
    unless_null $P5010, vivi_172611
    die "Contextual $*MAIN_SUB not found"
    box $P5014, "Contextual $*MAIN_SUB not found"
    set $P5010, $P5014
  vivi_172611:
    set $P103, $P5010
  fallback609:
    repr_bind_attr_int rx170_cur, rx170_curclass, "$!pos", rx170_pos
    store_lex unicode:"$\x{a2}", rx170_cur
.annotate 'line', 741
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback612
    nqp_get_sc_object $P5018, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback613
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5016, $P5019
  fallback613:
    unless_null $P5016, vivi_173614
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_173614:
    set $P5015, $P5016
  fallback612:
    $P5021 = $P5015."push_lexpad"($P109)
    set $P104, $P5021
    repr_bind_attr_int rx170_cur, rx170_curclass, "$!pos", rx170_pos
    store_lex unicode:"$\x{a2}", rx170_cur
.annotate 'line', 745
    find_dynamic_lex $P5022, "$*W"
    unless_null $P5022, fallback615
    nqp_get_sc_object $P5025, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$W"]
    unless_null $P5023, fallback616
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5023, $P5026
  fallback616:
    unless_null $P5023, vivi_174617
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5023, $P5027
  vivi_174617:
    set $P5022, $P5023
  fallback615:
    find_dynamic_lex $P5029, "%*HOW"
    unless_null $P5029, fallback618
    nqp_get_sc_object $P5032, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["%HOW"]
    unless_null $P5030, fallback619
    nqp_get_sc_object $P5034, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5033, $P5034
    new $P5035, 'Hash'
    set $P5033["%HOW"], $P5035
    set $P5030, $P5035
  fallback619:
    unless_null $P5030, vivi_175620
    die "Contextual %*HOW not found"
    box $P5036, "Contextual %*HOW not found"
    set $P5030, $P5036
  vivi_175620:
    set $P5029, $P5030
  fallback618:
    set $P5028, $P5029["knowhow"]
    unless_null $P5028, fallback621
    nqp_get_sc_object $P5037, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5028, $P5037
  fallback621:
    $P5038 = $P5022."pkg_create_mo"($P5028, "GLOBALish" :named("name"))
    set $P105, $P5038
    repr_bind_attr_int rx170_cur, rx170_curclass, "$!pos", rx170_pos
    store_lex unicode:"$\x{a2}", rx170_cur
    $P5039 = $P108."MATCH"()
    set $P109, $P5039
    .const 'Sub' $P5040 = 'cuid_396_1360426903.566' 
    capture_lex $P5040
    $P5041 = $P5040()
    repr_bind_attr_int rx170_cur, rx170_curclass, "$!pos", rx170_pos
    store_lex unicode:"$\x{a2}", rx170_cur
    unless_null $P105, fallback637
    nqp_get_sc_object $P5044, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5043, $P5044
    set $P5042, $P5043["$GLOBALish"]
    unless_null $P5042, fallback638
    nqp_get_sc_object $P5045, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5042, $P5045
  fallback638:
    unless_null $P5042, vivi_181639
    die "Contextual $*GLOBALish not found"
    box $P5046, "Contextual $*GLOBALish not found"
    set $P5042, $P5046
  vivi_181639:
    set $P105, $P5042
  fallback637:
    set $P106, $P105
    repr_bind_attr_int rx170_cur, rx170_curclass, "$!pos", rx170_pos
    store_lex unicode:"$\x{a2}", rx170_cur
    $P5047 = $P108."MATCH"()
    set $P109, $P5047
    .const 'Sub' $P5048 = 'cuid_397_1360426903.566' 
    capture_lex $P5048
    $P5049 = $P5048()
    repr_bind_attr_int rx170_cur, rx170_curclass, "$!pos", rx170_pos
    store_lex unicode:"$\x{a2}", rx170_cur
    unless_null $P107, fallback649
    nqp_get_sc_object $P5052, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5051, $P5052
    set $P5050, $P5051["$EXPORT"]
    unless_null $P5050, fallback650
    nqp_get_sc_object $P5053, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5050, $P5053
  fallback650:
    unless_null $P5050, vivi_185651
    die "Contextual $*EXPORT not found"
    box $P5054, "Contextual $*EXPORT not found"
    set $P5050, $P5054
  vivi_185651:
    set $P107, $P5050
  fallback649:
    repr_bind_attr_int rx170_cur, rx170_curclass, "$!pos", rx170_pos
    store_lex unicode:"$\x{a2}", rx170_cur
    $P5055 = $P108."MATCH"()
    set $P109, $P5055
    .const 'Sub' $P5056 = 'cuid_399_1360426903.566' 
    capture_lex $P5056
    $P5057 = $P5056()
    repr_bind_attr_int rx170_cur, rx170_curclass, "$!pos", rx170_pos
    store_lex unicode:"$\x{a2}", rx170_cur
    $P5058 = $P108."MATCH"()
    set $P109, $P5058
    .const 'Sub' $P5059 = 'cuid_400_1360426903.566' 
    capture_lex $P5059
    $P5060 = $P5059()
    repr_bind_attr_int rx170_cur, rx170_curclass, "$!pos", rx170_pos
    $P11 = rx170_cur."outerctx"()
    repr_get_attr_int $I11, $P11, rx170_curclass, "$!pos"
    lt $I11, 0, rx170_fail602
    repr_get_attr_int rx170_pos, $P11, rx170_curclass, "$!pos"
    repr_bind_attr_int rx170_cur, rx170_curclass, "$!pos", rx170_pos
    $P11 = rx170_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx170_curclass, "$!pos"
    lt $I11, 0, rx170_fail602
    nqp_rxmark rx170_bstack, rxsubrule200_pass695, -1, 0
  rxsubrule200_pass695:
    rx170_cstack = rx170_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx170_pos, $P11, rx170_curclass, "$!pos"
  alt201_0697:
    nqp_rxmark rx170_bstack, alt201_1699, rx170_pos, 0
    lt rx170_pos, rx170_eos, rx170_fail602
    goto alt201_end696
  alt201_1699:
    repr_bind_attr_int rx170_cur, rx170_curclass, "$!pos", rx170_pos
    $P11 = rx170_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx170_curclass, "$!pos"
    lt $I11, 0, rx170_fail602
    repr_get_attr_int rx170_pos, $P11, rx170_curclass, "$!pos"
  alt201_end696:
    rx170_cur."!cursor_pass"(rx170_pos, "comp_unit", 'backtrack'=>1)
    .return (rx170_cur)
  rx170_restart601:
    repr_get_attr_obj rx170_cstack, rx170_cur, rx170_curclass, "$!cstack"
  rx170_fail602:
    unless rx170_bstack, rx170_done600
    pop $I19, rx170_bstack
    if_null rx170_cstack, rx170_cstack_done605
    unless rx170_cstack, rx170_cstack_done605
    dec $I19
    set $P11, rx170_cstack[$I19]
  rx170_cstack_done605:
    pop rx170_rep, rx170_bstack
    pop rx170_pos, rx170_bstack
    pop $I19, rx170_bstack
    lt rx170_pos, -1, rx170_done600
    lt rx170_pos, 0, rx170_fail602
    eq $I19, 0, rx170_fail602
    nqp_islist $I20, rx170_cstack
    unless $I20, rx170_jump603
    elements $I18, rx170_bstack
    le $I18, 0, rx170_cut604
    dec $I18
    set $I18, rx170_bstack[$I18]
  rx170_cut604:
    assign rx170_cstack, $I18
  rx170_jump603:
    jump $I19
  rx170_done600:
    rx170_cur."!cursor_fail"()
    .return (rx170_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_396_1360426903.566") :anon :lex :outer("cuid_45_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 746

.annotate 'line', 747
    find_dynamic_lex $P5002, "$*GLOBALish"
    unless_null $P5002, fallback622
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$GLOBALish"]
    unless_null $P5003, fallback623
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5006
  fallback623:
    unless_null $P5003, vivi_176624
    die "Contextual $*GLOBALish not found"
    box $P5007, "Contextual $*GLOBALish not found"
    set $P5003, $P5007
  vivi_176624:
    set $P5002, $P5003
  fallback622:
    get_how $P5001, $P5002
    find_dynamic_lex $P5008, "$*GLOBALish"
    unless_null $P5008, fallback625
    nqp_get_sc_object $P5011, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$GLOBALish"]
    unless_null $P5009, fallback626
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5012
  fallback626:
    unless_null $P5009, vivi_177627
    die "Contextual $*GLOBALish not found"
    box $P5013, "Contextual $*GLOBALish not found"
    set $P5009, $P5013
  vivi_177627:
    set $P5008, $P5009
  fallback625:
    $P5001."compose"($P5008)
.annotate 'line', 748
    find_dynamic_lex $P5014, "$*W"
    unless_null $P5014, fallback628
    nqp_get_sc_object $P5017, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["$W"]
    unless_null $P5015, fallback629
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5015, $P5018
  fallback629:
    unless_null $P5015, vivi_178630
    die "Contextual $*W not found"
    box $P5019, "Contextual $*W not found"
    set $P5015, $P5019
  vivi_178630:
    set $P5014, $P5015
  fallback628:
    find_dynamic_lex $P5020, "$*UNIT"
    unless_null $P5020, fallback631
    nqp_get_sc_object $P5023, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$UNIT"]
    unless_null $P5021, fallback632
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5021, $P5024
  fallback632:
    unless_null $P5021, vivi_179633
    die "Contextual $*UNIT not found"
    box $P5025, "Contextual $*UNIT not found"
    set $P5021, $P5025
  vivi_179633:
    set $P5020, $P5021
  fallback631:
    find_dynamic_lex $P5026, "$*GLOBALish"
    unless_null $P5026, fallback634
    nqp_get_sc_object $P5029, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$GLOBALish"]
    unless_null $P5027, fallback635
    nqp_get_sc_object $P5030, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5027, $P5030
  fallback635:
    unless_null $P5027, vivi_180636
    die "Contextual $*GLOBALish not found"
    box $P5031, "Contextual $*GLOBALish not found"
    set $P5027, $P5031
  vivi_180636:
    set $P5026, $P5027
  fallback634:
    $P5032 = $P5014."install_lexical_symbol"($P5020, "GLOBALish", $P5026)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_397_1360426903.566") :anon :lex :outer("cuid_45_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 753

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback640
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback641
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback641:
    unless_null $P5002, vivi_182642
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_182642:
    set $P5001, $P5002
  fallback640:
    find_dynamic_lex $P5007, "$*UNIT"
    unless_null $P5007, fallback643
    nqp_get_sc_object $P5010, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$UNIT"]
    unless_null $P5008, fallback644
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5011
  fallback644:
    unless_null $P5008, vivi_183645
    die "Contextual $*UNIT not found"
    box $P5012, "Contextual $*UNIT not found"
    set $P5008, $P5012
  vivi_183645:
    set $P5007, $P5008
  fallback643:
    find_dynamic_lex $P5013, "$*PACKAGE"
    unless_null $P5013, fallback646
    nqp_get_sc_object $P5016, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$PACKAGE"]
    unless_null $P5014, fallback647
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5017
  fallback647:
    unless_null $P5014, vivi_184648
    die "Contextual $*PACKAGE not found"
    box $P5018, "Contextual $*PACKAGE not found"
    set $P5014, $P5018
  vivi_184648:
    set $P5013, $P5014
  fallback646:
    $P5019 = $P5001."install_lexical_symbol"($P5007, "$?PACKAGE", $P5013)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_399_1360426903.566") :anon :lex :outer("cuid_45_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 757
    .const 'Sub' $P5017 = 'cuid_398_1360426903.566' 
    capture_lex $P5017 
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback654
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback655
    nqp_get_sc_object $P5008, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback655:
    unless_null $P5004, vivi_187656
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_187656:
    set $P5003, $P5004
  fallback654:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback657
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5011
  fallback657:
    set $P5001, $P5002["setting"]
    unless_null $P5001, fallback658
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5012
  fallback658:
    set $S5001, $P5001
    iseq $I5001, $S5001, "NULL"
    box $P5016, $I5001
    set $P5015, $P5016
    if $I5001 goto unless186_end653 
    .const 'Sub' $P5013 = 'cuid_398_1360426903.566' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  unless186_end653:
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_398_1360426903.566") :anon :lex :outer("cuid_399_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 758
    .lex "$DEFAULT", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 759
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback659
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback660
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5006
  fallback660:
    unless_null $P5003, vivi_188661
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_188661:
    set $P5002, $P5003
  fallback659:
    find_dynamic_lex $P5009, "%*HOW"
    unless_null $P5009, fallback662
    nqp_get_sc_object $P5012, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["%HOW"]
    unless_null $P5010, fallback663
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5013, $P5014
    new $P5015, 'Hash'
    set $P5013["%HOW"], $P5015
    set $P5010, $P5015
  fallback663:
    unless_null $P5010, vivi_189664
    die "Contextual %*HOW not found"
    box $P5016, "Contextual %*HOW not found"
    set $P5010, $P5016
  vivi_189664:
    set $P5009, $P5010
  fallback662:
    set $P5008, $P5009["knowhow"]
    unless_null $P5008, fallback665
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5017
  fallback665:
    $P5018 = $P5002."pkg_create_mo"($P5008, "EXPORT" :named("name"))
    store_dynamic_lex "$*EXPORT", $P5018
.annotate 'line', 760
    find_dynamic_lex $P5020, "$*EXPORT"
    unless_null $P5020, fallback666
    nqp_get_sc_object $P5023, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$EXPORT"]
    unless_null $P5021, fallback667
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5021, $P5024
  fallback667:
    unless_null $P5021, vivi_190668
    die "Contextual $*EXPORT not found"
    box $P5025, "Contextual $*EXPORT not found"
    set $P5021, $P5025
  vivi_190668:
    set $P5020, $P5021
  fallback666:
    get_how $P5019, $P5020
    find_dynamic_lex $P5026, "$*EXPORT"
    unless_null $P5026, fallback669
    nqp_get_sc_object $P5029, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$EXPORT"]
    unless_null $P5027, fallback670
    nqp_get_sc_object $P5030, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5027, $P5030
  fallback670:
    unless_null $P5027, vivi_191671
    die "Contextual $*EXPORT not found"
    box $P5031, "Contextual $*EXPORT not found"
    set $P5027, $P5031
  vivi_191671:
    set $P5026, $P5027
  fallback669:
    $P5019."compose"($P5026)
.annotate 'line', 761
    find_dynamic_lex $P5032, "$*W"
    unless_null $P5032, fallback672
    nqp_get_sc_object $P5035, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5034, $P5035
    set $P5033, $P5034["$W"]
    unless_null $P5033, fallback673
    nqp_get_sc_object $P5036, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5033, $P5036
  fallback673:
    unless_null $P5033, vivi_192674
    die "Contextual $*W not found"
    box $P5037, "Contextual $*W not found"
    set $P5033, $P5037
  vivi_192674:
    set $P5032, $P5033
  fallback672:
    find_dynamic_lex $P5038, "$*UNIT"
    unless_null $P5038, fallback675
    nqp_get_sc_object $P5041, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5040, $P5041
    set $P5039, $P5040["$UNIT"]
    unless_null $P5039, fallback676
    nqp_get_sc_object $P5042, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5039, $P5042
  fallback676:
    unless_null $P5039, vivi_193677
    die "Contextual $*UNIT not found"
    box $P5043, "Contextual $*UNIT not found"
    set $P5039, $P5043
  vivi_193677:
    set $P5038, $P5039
  fallback675:
    find_dynamic_lex $P5044, "$*EXPORT"
    unless_null $P5044, fallback678
    nqp_get_sc_object $P5047, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5046, $P5047
    set $P5045, $P5046["$EXPORT"]
    unless_null $P5045, fallback679
    nqp_get_sc_object $P5048, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5045, $P5048
  fallback679:
    unless_null $P5045, vivi_194680
    die "Contextual $*EXPORT not found"
    box $P5049, "Contextual $*EXPORT not found"
    set $P5045, $P5049
  vivi_194680:
    set $P5044, $P5045
  fallback678:
    $P5032."install_lexical_symbol"($P5038, "EXPORT", $P5044)
.annotate 'line', 762
    find_dynamic_lex $P5050, "$*W"
    unless_null $P5050, fallback681
    nqp_get_sc_object $P5053, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5052, $P5053
    set $P5051, $P5052["$W"]
    unless_null $P5051, fallback682
    nqp_get_sc_object $P5054, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5051, $P5054
  fallback682:
    unless_null $P5051, vivi_195683
    die "Contextual $*W not found"
    box $P5055, "Contextual $*W not found"
    set $P5051, $P5055
  vivi_195683:
    set $P5050, $P5051
  fallback681:
    find_dynamic_lex $P5057, "%*HOW"
    unless_null $P5057, fallback684
    nqp_get_sc_object $P5060, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["%HOW"]
    unless_null $P5058, fallback685
    nqp_get_sc_object $P5062, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5061, $P5062
    new $P5063, 'Hash'
    set $P5061["%HOW"], $P5063
    set $P5058, $P5063
  fallback685:
    unless_null $P5058, vivi_196686
    die "Contextual %*HOW not found"
    box $P5064, "Contextual %*HOW not found"
    set $P5058, $P5064
  vivi_196686:
    set $P5057, $P5058
  fallback684:
    set $P5056, $P5057["knowhow"]
    unless_null $P5056, fallback687
    nqp_get_sc_object $P5065, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5056, $P5065
  fallback687:
    $P5066 = $P5050."pkg_create_mo"($P5056, "DEFAULT" :named("name"))
    set $P101, $P5066
.annotate 'line', 763
    get_how $P5067, $P101
    $P5067."compose"($P101)
    find_dynamic_lex $P5069, "$*EXPORT"
    unless_null $P5069, fallback688
    nqp_get_sc_object $P5072, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5071, $P5072
    set $P5070, $P5071["$EXPORT"]
    unless_null $P5070, fallback689
    nqp_get_sc_object $P5073, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5070, $P5073
  fallback689:
    unless_null $P5070, vivi_197690
    die "Contextual $*EXPORT not found"
    box $P5074, "Contextual $*EXPORT not found"
    set $P5070, $P5074
  vivi_197690:
    set $P5069, $P5070
  fallback688:
    get_who $P5068, $P5069
    set $P5068["DEFAULT"], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_400_1360426903.566") :anon :lex :outer("cuid_45_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 768

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback691
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback692
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback692:
    unless_null $P5002, vivi_198693
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_198693:
    set $P5001, $P5002
  fallback691:
    $P5007 = $P5001."add_initializations"()
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_46_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 776
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx204_tgt
    .local int rx204_pos
    .local int rx204_off
    .local int rx204_eos
    .local int rx204_rep
    .local pmc rx204_cur
    .local pmc rx204_curclass
    .local pmc rx204_bstack
    .local pmc rx204_cstack
    (rx204_cur, rx204_tgt, rx204_pos, rx204_curclass, rx204_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx204_cur
    length rx204_eos, rx204_tgt
    eq $I19, 1, rx204_restart703
    gt rx204_pos, rx204_eos, rx204_fail704
    repr_get_attr_int $I11, self, rx204_curclass, "$!from"
    ne $I11, -1, rxscan205_done710
    goto rxscan205_scan709
  rxscan205_loop708:
    inc rx204_pos
    gt rx204_pos, rx204_eos, rx204_fail704
    repr_bind_attr_int rx204_cur, rx204_curclass, "$!from", rx204_pos
  rxscan205_scan709:
    nqp_rxmark rx204_bstack, rxscan205_loop708, rx204_pos, 0
  rxscan205_done710:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt206_0712
    nqp_push_label $P11, alt206_1716
    nqp_rxmark rx204_bstack, alt206_end711, -1, 0
    rx204_cur."!alt"(rx204_pos, "alt_nfa__7_1360426904.988", $P11)
    goto rx204_fail704
  alt206_0712:
    repr_bind_attr_int rx204_cur, rx204_curclass, "$!pos", rx204_pos
    $P11 = rx204_cur."ws"()
    repr_get_attr_int $I11, $P11, rx204_curclass, "$!pos"
    lt $I11, 0, rx204_fail704
    repr_get_attr_int rx204_pos, $P11, rx204_curclass, "$!pos"
    lt rx204_pos, rx204_eos, rx204_fail704
    repr_bind_attr_int rx204_cur, rx204_curclass, "$!pos", rx204_pos
    $P11 = rx204_cur."ws"()
    repr_get_attr_int $I11, $P11, rx204_curclass, "$!pos"
    lt $I11, 0, rx204_fail704
    repr_get_attr_int rx204_pos, $P11, rx204_curclass, "$!pos"
    goto alt206_end711
  alt206_1716:
    repr_bind_attr_int rx204_cur, rx204_curclass, "$!pos", rx204_pos
    $P11 = rx204_cur."ws"()
    repr_get_attr_int $I11, $P11, rx204_curclass, "$!pos"
    lt $I11, 0, rx204_fail704
    repr_get_attr_int rx204_pos, $P11, rx204_curclass, "$!pos"
    nqp_rxmark rx204_bstack, rxquantr211_done719, rx204_pos, 0
  rxquantr211_loop718:
    repr_bind_attr_int rx204_cur, rx204_curclass, "$!pos", rx204_pos
    $P11 = rx204_cur."statement"()
    repr_get_attr_int $I11, $P11, rx204_curclass, "$!pos"
    lt $I11, 0, rx204_fail704
    nqp_rxmark rx204_bstack, rxsubrule212_pass720, -1, 0
  rxsubrule212_pass720:
    rx204_cstack = rx204_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx204_pos, $P11, rx204_curclass, "$!pos"
    repr_bind_attr_int rx204_cur, rx204_curclass, "$!pos", rx204_pos
    $P11 = rx204_cur."eat_terminator"()
    repr_get_attr_int $I11, $P11, rx204_curclass, "$!pos"
    lt $I11, 0, rx204_fail704
    repr_get_attr_int rx204_pos, $P11, rx204_curclass, "$!pos"
    repr_bind_attr_int rx204_cur, rx204_curclass, "$!pos", rx204_pos
    $P11 = rx204_cur."ws"()
    repr_get_attr_int $I11, $P11, rx204_curclass, "$!pos"
    lt $I11, 0, rx204_fail704
    repr_get_attr_int rx204_pos, $P11, rx204_curclass, "$!pos"
    nqp_rxpeek $I19, rx204_bstack, rxquantr211_done719
    inc $I19
    inc $I19
    set rx204_rep, rx204_bstack[$I19]
    nqp_rxcommit rx204_bstack, rxquantr211_done719
    inc rx204_rep
    nqp_rxmark rx204_bstack, rxquantr211_done719, rx204_pos, rx204_rep
    goto rxquantr211_loop718
  rxquantr211_done719:
    repr_bind_attr_int rx204_cur, rx204_curclass, "$!pos", rx204_pos
    $P11 = rx204_cur."ws"()
    repr_get_attr_int $I11, $P11, rx204_curclass, "$!pos"
    lt $I11, 0, rx204_fail704
    repr_get_attr_int rx204_pos, $P11, rx204_curclass, "$!pos"
    goto alt206_end711
  alt206_end711:
    rx204_cur."!cursor_pass"(rx204_pos, "statementlist", 'backtrack'=>1)
    .return (rx204_cur)
  rx204_restart703:
    repr_get_attr_obj rx204_cstack, rx204_cur, rx204_curclass, "$!cstack"
  rx204_fail704:
    unless rx204_bstack, rx204_done702
    pop $I19, rx204_bstack
    if_null rx204_cstack, rx204_cstack_done707
    unless rx204_cstack, rx204_cstack_done707
    dec $I19
    set $P11, rx204_cstack[$I19]
  rx204_cstack_done707:
    pop rx204_rep, rx204_bstack
    pop rx204_pos, rx204_bstack
    pop $I19, rx204_bstack
    lt rx204_pos, -1, rx204_done702
    lt rx204_pos, 0, rx204_fail704
    eq $I19, 0, rx204_fail704
    nqp_islist $I20, rx204_cstack
    unless $I20, rx204_jump705
    elements $I18, rx204_bstack
    le $I18, 0, rx204_cut706
    dec $I18
    set $I18, rx204_bstack[$I18]
  rx204_cut706:
    assign rx204_cstack, $I18
  rx204_jump705:
    jump $I19
  rx204_done702:
    rx204_cur."!cursor_fail"()
    .return (rx204_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_47_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 781
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_48_1360426903.566' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx216_tgt
    .local int rx216_pos
    .local int rx216_off
    .local int rx216_eos
    .local int rx216_rep
    .local pmc rx216_cur
    .local pmc rx216_curclass
    .local pmc rx216_bstack
    .local pmc rx216_cstack
    (rx216_cur, rx216_tgt, rx216_pos, rx216_curclass, rx216_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx216_cur
    length rx216_eos, rx216_tgt
    eq $I19, 1, rx216_restart726
    gt rx216_pos, rx216_eos, rx216_fail727
    repr_get_attr_int $I11, self, rx216_curclass, "$!from"
    ne $I11, -1, rxscan217_done733
    goto rxscan217_scan732
  rxscan217_loop731:
    inc rx216_pos
    gt rx216_pos, rx216_eos, rx216_fail727
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!from", rx216_pos
  rxscan217_scan732:
    nqp_rxmark rx216_bstack, rxscan217_loop731, rx216_pos, 0
  rxscan217_done733:
    .const 'Sub' $P5001 = 'cuid_48_1360426903.566' 
    capture_lex $P5001
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!pos", rx216_pos
    $P11 = rx216_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx216_curclass, "$!pos"
    ge $I11, 0, rx216_fail727
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt223_0752
    nqp_push_label $P11, alt223_1754
    nqp_rxmark rx216_bstack, alt223_end751, -1, 0
    rx216_cur."!alt"(rx216_pos, "alt_nfa__9_1360426905.007", $P11)
    goto rx216_fail727
  alt223_0752:
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!pos", rx216_pos
    $P11 = rx216_cur."statement_control"()
    repr_get_attr_int $I11, $P11, rx216_curclass, "$!pos"
    lt $I11, 0, rx216_fail727
    nqp_rxmark rx216_bstack, rxsubrule224_pass753, -1, 0
  rxsubrule224_pass753:
    rx216_cstack = rx216_cur."!cursor_capture"($P11, "statement_control")
    repr_get_attr_int rx216_pos, $P11, rx216_curclass, "$!pos"
    goto alt223_end751
  alt223_1754:
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!pos", rx216_pos
    $P11 = rx216_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx216_curclass, "$!pos"
    lt $I11, 0, rx216_fail727
    nqp_rxmark rx216_bstack, rxsubrule225_pass755, -1, 0
  rxsubrule225_pass755:
    rx216_cstack = rx216_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx216_pos, $P11, rx216_curclass, "$!pos"
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!pos", rx216_pos
    $P11 = rx216_cur."ws"()
    repr_get_attr_int $I11, $P11, rx216_curclass, "$!pos"
    lt $I11, 0, rx216_fail727
    repr_get_attr_int rx216_pos, $P11, rx216_curclass, "$!pos"
    nqp_rxmark rx216_bstack, rxquantr227_done758, rx216_pos, 0
  rxquantr227_loop757:
  alt228_0760:
    nqp_rxmark rx216_bstack, alt228_1761, rx216_pos, 0
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!pos", rx216_pos
    $P11 = rx216_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx216_curclass, "$!pos"
    lt $I11, 0, rx216_fail727
    goto alt228_end759
  alt228_1761:
    nqp_rxmark rx216_bstack, alt228_2767, rx216_pos, 0
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!pos", rx216_pos
    $P11 = rx216_cur."statement_mod_cond"()
    repr_get_attr_int $I11, $P11, rx216_curclass, "$!pos"
    lt $I11, 0, rx216_fail727
    nqp_rxmark rx216_bstack, rxsubrule229_pass762, -1, 0
  rxsubrule229_pass762:
    rx216_cstack = rx216_cur."!cursor_capture"($P11, "statement_mod_cond")
    repr_get_attr_int rx216_pos, $P11, rx216_curclass, "$!pos"
    nqp_rxmark rx216_bstack, rxquantr230_done764, rx216_pos, 0
  rxquantr230_loop763:
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!pos", rx216_pos
    $P11 = rx216_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx216_curclass, "$!pos"
    lt $I11, 0, rx216_fail727
    goto rxsubrule231_pass765
  rxsubrule231_back766:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx216_curclass, "$!pos"
    lt $I11, 0, rx216_fail727
  rxsubrule231_pass765:
    rx216_cstack = rx216_cur."!cursor_capture"($P11, "statement_mod_loop")
    set_addr $I11, rxsubrule231_back766
    push rx216_bstack, $I11
    push rx216_bstack, 0
    push rx216_bstack, rx216_pos
    elements $I11, rx216_cstack
    push rx216_bstack, $I11
    repr_get_attr_int rx216_pos, $P11, rx216_curclass, "$!pos"
    nqp_rxpeek $I19, rx216_bstack, rxquantr230_done764
    inc $I19
    inc $I19
    set rx216_rep, rx216_bstack[$I19]
    nqp_rxcommit rx216_bstack, rxquantr230_done764
    inc rx216_rep
  rxquantr230_done764:
    goto alt228_end759
  alt228_2767:
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!pos", rx216_pos
    $P11 = rx216_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx216_curclass, "$!pos"
    lt $I11, 0, rx216_fail727
    nqp_rxmark rx216_bstack, rxsubrule232_pass768, -1, 0
  rxsubrule232_pass768:
    rx216_cstack = rx216_cur."!cursor_capture"($P11, "statement_mod_loop")
    repr_get_attr_int rx216_pos, $P11, rx216_curclass, "$!pos"
  alt228_end759:
    nqp_rxpeek $I19, rx216_bstack, rxquantr227_done758
    inc $I19
    inc $I19
    set rx216_rep, rx216_bstack[$I19]
    nqp_rxcommit rx216_bstack, rxquantr227_done758
    inc rx216_rep
  rxquantr227_done758:
    goto alt223_end751
  alt223_end751:
    nqp_rxcommit rx216_bstack, alt223_end751
    rx216_cur."!cursor_pass"(rx216_pos, "statement", 'backtrack'=>1)
    .return (rx216_cur)
  rx216_restart726:
    repr_get_attr_obj rx216_cstack, rx216_cur, rx216_curclass, "$!cstack"
  rx216_fail727:
    unless rx216_bstack, rx216_done725
    pop $I19, rx216_bstack
    if_null rx216_cstack, rx216_cstack_done730
    unless rx216_cstack, rx216_cstack_done730
    dec $I19
    set $P11, rx216_cstack[$I19]
  rx216_cstack_done730:
    pop rx216_rep, rx216_bstack
    pop rx216_pos, rx216_bstack
    pop $I19, rx216_bstack
    lt rx216_pos, -1, rx216_done725
    lt rx216_pos, 0, rx216_fail727
    eq $I19, 0, rx216_fail727
    nqp_islist $I20, rx216_cstack
    unless $I20, rx216_jump728
    elements $I18, rx216_bstack
    le $I18, 0, rx216_cut729
    dec $I18
    set $I18, rx216_bstack[$I18]
  rx216_cut729:
    assign rx216_cstack, $I18
  rx216_jump728:
    jump $I19
  rx216_done725:
    rx216_cur."!cursor_fail"()
    .return (rx216_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_48_1360426903.566") :anon :lex :outer("cuid_47_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx218_tgt
    .local int rx218_pos
    .local int rx218_off
    .local int rx218_eos
    .local int rx218_rep
    .local pmc rx218_cur
    .local pmc rx218_curclass
    .local pmc rx218_bstack
    .local pmc rx218_cstack
    (rx218_cur, rx218_tgt, rx218_pos, rx218_curclass, rx218_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx218_cur
    length rx218_eos, rx218_tgt
    eq $I19, 1, rx218_restart736
    gt rx218_pos, rx218_eos, rx218_fail737
    repr_get_attr_int $I11, self, rx218_curclass, "$!from"
    ne $I11, -1, rxscan219_done743
    goto rxscan219_scan742
  rxscan219_loop741:
    inc rx218_pos
    gt rx218_pos, rx218_eos, rx218_fail737
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!from", rx218_pos
  rxscan219_scan742:
    nqp_rxmark rx218_bstack, rxscan219_loop741, rx218_pos, 0
  rxscan219_done743:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt220_0745
    nqp_push_label $P11, alt220_1749
    nqp_rxmark rx218_bstack, alt220_end744, -1, 0
    rx218_cur."!alt"(rx218_pos, "alt_nfa__8_1360426904.994", $P11)
    goto rx218_fail737
  alt220_0745:
  alt221_0747:
    nqp_rxmark rx218_bstack, alt221_1748, rx218_pos, 0
    add $I11, rx218_pos, 1
    gt $I11, rx218_eos, rx218_fail737
    substr $S10, rx218_tgt, rx218_pos, 1
    ne $S10, ucs4:"]", rx218_fail737
    add rx218_pos, 1
    goto alt221_end746
  alt221_1748:
    ge rx218_pos, rx218_eos, rx218_fail737
    substr $S11, rx218_tgt, rx218_pos, 1
    index $I11, ucs4:")}", $S11
    lt $I11, 0, rx218_fail737
    inc rx218_pos
  alt221_end746:
    goto alt220_end744
  alt220_1749:
    lt rx218_pos, rx218_eos, rx218_fail737
    goto alt220_end744
  alt220_end744:
    rx218_cur."!cursor_pass"(rx218_pos, 'backtrack'=>1)
    .return (rx218_cur)
  rx218_restart736:
    repr_get_attr_obj rx218_cstack, rx218_cur, rx218_curclass, "$!cstack"
  rx218_fail737:
    unless rx218_bstack, rx218_done735
    pop $I19, rx218_bstack
    if_null rx218_cstack, rx218_cstack_done740
    unless rx218_cstack, rx218_cstack_done740
    dec $I19
    set $P11, rx218_cstack[$I19]
  rx218_cstack_done740:
    pop rx218_rep, rx218_bstack
    pop rx218_pos, rx218_bstack
    pop $I19, rx218_bstack
    lt rx218_pos, -1, rx218_done735
    lt rx218_pos, 0, rx218_fail737
    eq $I19, 0, rx218_fail737
    nqp_islist $I20, rx218_cstack
    unless $I20, rx218_jump738
    elements $I18, rx218_bstack
    le $I18, 0, rx218_cut739
    dec $I18
    set $I18, rx218_bstack[$I18]
  rx218_cut739:
    assign rx218_cstack, $I18
  rx218_jump738:
    jump $I19
  rx218_done735:
    rx218_cur."!cursor_fail"()
    .return (rx218_cur) 
.end
.HLL "nqp"
.namespace []
.sub "eat_terminator" :subid("cuid_49_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 794
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx233_tgt
    .local int rx233_pos
    .local int rx233_off
    .local int rx233_eos
    .local int rx233_rep
    .local pmc rx233_cur
    .local pmc rx233_curclass
    .local pmc rx233_bstack
    .local pmc rx233_cstack
    (rx233_cur, rx233_tgt, rx233_pos, rx233_curclass, rx233_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx233_cur
    length rx233_eos, rx233_tgt
    eq $I19, 1, rx233_restart771
    gt rx233_pos, rx233_eos, rx233_fail772
    repr_get_attr_int $I11, self, rx233_curclass, "$!from"
    ne $I11, -1, rxscan234_done778
    goto rxscan234_scan777
  rxscan234_loop776:
    inc rx233_pos
    gt rx233_pos, rx233_eos, rx233_fail772
    repr_bind_attr_int rx233_cur, rx233_curclass, "$!from", rx233_pos
  rxscan234_scan777:
    nqp_rxmark rx233_bstack, rxscan234_loop776, rx233_pos, 0
  rxscan234_done778:
  alt235_0780:
    nqp_rxmark rx233_bstack, alt235_1781, rx233_pos, 0
    add $I11, rx233_pos, 1
    gt $I11, rx233_eos, rx233_fail772
    substr $S10, rx233_tgt, rx233_pos, 1
    ne $S10, ucs4:";", rx233_fail772
    add rx233_pos, 1
    goto alt235_end779
  alt235_1781:
    nqp_rxmark rx233_bstack, alt235_2782, rx233_pos, 0
    repr_bind_attr_int rx233_cur, rx233_curclass, "$!pos", rx233_pos
    $P11 = rx233_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx233_curclass, "$!pos"
    lt $I11, 0, rx233_fail772
    goto alt235_end779
  alt235_2782:
    nqp_rxmark rx233_bstack, alt235_3783, rx233_pos, 0
    repr_bind_attr_int rx233_cur, rx233_curclass, "$!pos", rx233_pos
    $P11 = rx233_cur."terminator"()
    repr_get_attr_int $I11, $P11, rx233_curclass, "$!pos"
    lt $I11, 0, rx233_fail772
    goto alt235_end779
  alt235_3783:
    lt rx233_pos, rx233_eos, rx233_fail772
  alt235_end779:
    rx233_cur."!cursor_pass"(rx233_pos, "eat_terminator", 'backtrack'=>1)
    .return (rx233_cur)
  rx233_restart771:
    repr_get_attr_obj rx233_cstack, rx233_cur, rx233_curclass, "$!cstack"
  rx233_fail772:
    unless rx233_bstack, rx233_done770
    pop $I19, rx233_bstack
    if_null rx233_cstack, rx233_cstack_done775
    unless rx233_cstack, rx233_cstack_done775
    dec $I19
    set $P11, rx233_cstack[$I19]
  rx233_cstack_done775:
    pop rx233_rep, rx233_bstack
    pop rx233_pos, rx233_bstack
    pop $I19, rx233_bstack
    lt rx233_pos, -1, rx233_done770
    lt rx233_pos, 0, rx233_fail772
    eq $I19, 0, rx233_fail772
    nqp_islist $I20, rx233_cstack
    unless $I20, rx233_jump773
    elements $I18, rx233_bstack
    le $I18, 0, rx233_cut774
    dec $I18
    set $I18, rx233_bstack[$I18]
  rx233_cut774:
    assign rx233_cstack, $I18
  rx233_jump773:
    jump $I19
  rx233_done770:
    rx233_cur."!cursor_fail"()
    .return (rx233_cur) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_50_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 801
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx237_tgt
    .local int rx237_pos
    .local int rx237_off
    .local int rx237_eos
    .local int rx237_rep
    .local pmc rx237_cur
    .local pmc rx237_curclass
    .local pmc rx237_bstack
    .local pmc rx237_cstack
    (rx237_cur, rx237_tgt, rx237_pos, rx237_curclass, rx237_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx237_cur
    length rx237_eos, rx237_tgt
    eq $I19, 1, rx237_restart787
    gt rx237_pos, rx237_eos, rx237_fail788
    repr_get_attr_int $I11, self, rx237_curclass, "$!from"
    ne $I11, -1, rxscan238_done794
    goto rxscan238_scan793
  rxscan238_loop792:
    inc rx237_pos
    gt rx237_pos, rx237_eos, rx237_fail788
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!from", rx237_pos
  rxscan238_scan793:
    nqp_rxmark rx237_bstack, rxscan238_loop792, rx237_pos, 0
  rxscan238_done794:
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail788
    nqp_rxmark rx237_bstack, rxsubrule239_pass795, -1, 0
  rxsubrule239_pass795:
    rx237_cstack = rx237_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."ws"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail788
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail788
    nqp_rxmark rx237_bstack, rxsubrule241_pass797, -1, 0
  rxsubrule241_pass797:
    rx237_cstack = rx237_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    rx237_cur."!cursor_pass"(rx237_pos, "xblock", 'backtrack'=>1)
    .return (rx237_cur)
  rx237_restart787:
    repr_get_attr_obj rx237_cstack, rx237_cur, rx237_curclass, "$!cstack"
  rx237_fail788:
    unless rx237_bstack, rx237_done786
    pop $I19, rx237_bstack
    if_null rx237_cstack, rx237_cstack_done791
    unless rx237_cstack, rx237_cstack_done791
    dec $I19
    set $P11, rx237_cstack[$I19]
  rx237_cstack_done791:
    pop rx237_rep, rx237_bstack
    pop rx237_pos, rx237_bstack
    pop $I19, rx237_bstack
    lt rx237_pos, -1, rx237_done786
    lt rx237_pos, 0, rx237_fail788
    eq $I19, 0, rx237_fail788
    nqp_islist $I20, rx237_cstack
    unless $I20, rx237_jump789
    elements $I18, rx237_bstack
    le $I18, 0, rx237_cut790
    dec $I18
    set $I18, rx237_bstack[$I18]
  rx237_cut790:
    assign rx237_cstack, $I18
  rx237_jump789:
    jump $I19
  rx237_done786:
    rx237_cur."!cursor_fail"()
    .return (rx237_cur) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_51_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 805
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx242_tgt
    .local int rx242_pos
    .local int rx242_off
    .local int rx242_eos
    .local int rx242_rep
    .local pmc rx242_cur
    .local pmc rx242_curclass
    .local pmc rx242_bstack
    .local pmc rx242_cstack
    (rx242_cur, rx242_tgt, rx242_pos, rx242_curclass, rx242_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx242_cur
    length rx242_eos, rx242_tgt
    eq $I19, 1, rx242_restart800
    gt rx242_pos, rx242_eos, rx242_fail801
    repr_get_attr_int $I11, self, rx242_curclass, "$!from"
    ne $I11, -1, rxscan243_done807
    goto rxscan243_scan806
  rxscan243_loop805:
    inc rx242_pos
    gt rx242_pos, rx242_eos, rx242_fail801
    repr_bind_attr_int rx242_cur, rx242_curclass, "$!from", rx242_pos
  rxscan243_scan806:
    nqp_rxmark rx242_bstack, rxscan243_loop805, rx242_pos, 0
  rxscan243_done807:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt244_0809
    nqp_push_label $P11, alt244_1815
    nqp_push_label $P11, alt244_2818
    nqp_rxmark rx242_bstack, alt244_end808, -1, 0
    rx242_cur."!alt"(rx242_pos, "alt_nfa__10_1360426905.033", $P11)
    goto rx242_fail801
  alt244_0809:
    repr_bind_attr_int rx242_cur, rx242_curclass, "$!pos", rx242_pos
    $P11 = rx242_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx242_curclass, "$!pos"
    lt $I11, 0, rx242_fail801
    repr_get_attr_int rx242_pos, $P11, rx242_curclass, "$!pos"
    repr_bind_attr_int rx242_cur, rx242_curclass, "$!pos", rx242_pos
    $P11 = rx242_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx242_curclass, "$!pos"
    lt $I11, 0, rx242_fail801
    repr_get_attr_int rx242_pos, $P11, rx242_curclass, "$!pos"
    repr_bind_attr_int rx242_cur, rx242_curclass, "$!pos", rx242_pos
    $P11 = rx242_cur."signature"()
    repr_get_attr_int $I11, $P11, rx242_curclass, "$!pos"
    lt $I11, 0, rx242_fail801
    nqp_rxmark rx242_bstack, rxsubrule247_pass812, -1, 0
  rxsubrule247_pass812:
    rx242_cstack = rx242_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx242_pos, $P11, rx242_curclass, "$!pos"
    repr_bind_attr_int rx242_cur, rx242_curclass, "$!pos", rx242_pos
    $P11 = rx242_cur."ws"()
    repr_get_attr_int $I11, $P11, rx242_curclass, "$!pos"
    lt $I11, 0, rx242_fail801
    repr_get_attr_int rx242_pos, $P11, rx242_curclass, "$!pos"
    repr_bind_attr_int rx242_cur, rx242_curclass, "$!pos", rx242_pos
    $P11 = rx242_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx242_curclass, "$!pos"
    lt $I11, 0, rx242_fail801
    nqp_rxmark rx242_bstack, rxsubrule249_pass814, -1, 0
  rxsubrule249_pass814:
    rx242_cstack = rx242_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx242_pos, $P11, rx242_curclass, "$!pos"
    goto alt244_end808
  alt244_1815:
    ge rx242_pos, rx242_eos, rx242_fail801
    substr $S11, rx242_tgt, rx242_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx242_fail801
    repr_bind_attr_int rx242_cur, rx242_curclass, "$!pos", rx242_pos
    $P11 = rx242_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx242_curclass, "$!pos"
    lt $I11, 0, rx242_fail801
    repr_get_attr_int rx242_pos, $P11, rx242_curclass, "$!pos"
    repr_bind_attr_int rx242_cur, rx242_curclass, "$!pos", rx242_pos
    $P11 = rx242_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx242_curclass, "$!pos"
    lt $I11, 0, rx242_fail801
    nqp_rxmark rx242_bstack, rxsubrule251_pass817, -1, 0
  rxsubrule251_pass817:
    rx242_cstack = rx242_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx242_pos, $P11, rx242_curclass, "$!pos"
    goto alt244_end808
  alt244_2818:
    repr_bind_attr_int rx242_cur, rx242_curclass, "$!pos", rx242_pos
    $P11 = rx242_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx242_curclass, "$!pos"
    lt $I11, 0, rx242_fail801
    repr_get_attr_int rx242_pos, $P11, rx242_curclass, "$!pos"
    goto alt244_end808
  alt244_end808:
    rx242_cur."!cursor_pass"(rx242_pos, "pblock", 'backtrack'=>1)
    .return (rx242_cur)
  rx242_restart800:
    repr_get_attr_obj rx242_cstack, rx242_cur, rx242_curclass, "$!cstack"
  rx242_fail801:
    unless rx242_bstack, rx242_done799
    pop $I19, rx242_bstack
    if_null rx242_cstack, rx242_cstack_done804
    unless rx242_cstack, rx242_cstack_done804
    dec $I19
    set $P11, rx242_cstack[$I19]
  rx242_cstack_done804:
    pop rx242_rep, rx242_bstack
    pop rx242_pos, rx242_bstack
    pop $I19, rx242_bstack
    lt rx242_pos, -1, rx242_done799
    lt rx242_pos, 0, rx242_fail801
    eq $I19, 0, rx242_fail801
    nqp_islist $I20, rx242_cstack
    unless $I20, rx242_jump802
    elements $I18, rx242_bstack
    le $I18, 0, rx242_cut803
    dec $I18
    set $I18, rx242_bstack[$I18]
  rx242_cut803:
    assign rx242_cstack, $I18
  rx242_jump802:
    jump $I19
  rx242_done799:
    rx242_cur."!cursor_fail"()
    .return (rx242_cur) 
.end
.HLL "nqp"
.namespace []
.sub "lambda" :subid("cuid_52_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 816
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx253_tgt
    .local int rx253_pos
    .local int rx253_off
    .local int rx253_eos
    .local int rx253_rep
    .local pmc rx253_cur
    .local pmc rx253_curclass
    .local pmc rx253_bstack
    .local pmc rx253_cstack
    (rx253_cur, rx253_tgt, rx253_pos, rx253_curclass, rx253_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx253_cur
    length rx253_eos, rx253_tgt
    eq $I19, 1, rx253_restart822
    gt rx253_pos, rx253_eos, rx253_fail823
    repr_get_attr_int $I11, self, rx253_curclass, "$!from"
    ne $I11, -1, rxscan254_done829
    goto rxscan254_scan828
  rxscan254_loop827:
    inc rx253_pos
    gt rx253_pos, rx253_eos, rx253_fail823
    repr_bind_attr_int rx253_cur, rx253_curclass, "$!from", rx253_pos
  rxscan254_scan828:
    nqp_rxmark rx253_bstack, rxscan254_loop827, rx253_pos, 0
  rxscan254_done829:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt255_0831
    nqp_push_label $P11, alt255_1832
    nqp_rxmark rx253_bstack, alt255_end830, -1, 0
    rx253_cur."!alt"(rx253_pos, "alt_nfa__11_1360426905.039", $P11)
    goto rx253_fail823
  alt255_0831:
    add $I11, rx253_pos, 2
    gt $I11, rx253_eos, rx253_fail823
    substr $S10, rx253_tgt, rx253_pos, 2
    ne $S10, ucs4:"->", rx253_fail823
    add rx253_pos, 2
    goto alt255_end830
  alt255_1832:
    add $I11, rx253_pos, 3
    gt $I11, rx253_eos, rx253_fail823
    substr $S10, rx253_tgt, rx253_pos, 3
    ne $S10, ucs4:"<->", rx253_fail823
    add rx253_pos, 3
    goto alt255_end830
  alt255_end830:
    rx253_cur."!cursor_pass"(rx253_pos, "lambda", 'backtrack'=>1)
    .return (rx253_cur)
  rx253_restart822:
    repr_get_attr_obj rx253_cstack, rx253_cur, rx253_curclass, "$!cstack"
  rx253_fail823:
    unless rx253_bstack, rx253_done821
    pop $I19, rx253_bstack
    if_null rx253_cstack, rx253_cstack_done826
    unless rx253_cstack, rx253_cstack_done826
    dec $I19
    set $P11, rx253_cstack[$I19]
  rx253_cstack_done826:
    pop rx253_rep, rx253_bstack
    pop rx253_pos, rx253_bstack
    pop $I19, rx253_bstack
    lt rx253_pos, -1, rx253_done821
    lt rx253_pos, 0, rx253_fail823
    eq $I19, 0, rx253_fail823
    nqp_islist $I20, rx253_cstack
    unless $I20, rx253_jump824
    elements $I18, rx253_bstack
    le $I18, 0, rx253_cut825
    dec $I18
    set $I18, rx253_bstack[$I18]
  rx253_cut825:
    assign rx253_cstack, $I18
  rx253_jump824:
    jump $I19
  rx253_done821:
    rx253_cur."!cursor_fail"()
    .return (rx253_cur) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_53_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 818
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx256_tgt
    .local int rx256_pos
    .local int rx256_off
    .local int rx256_eos
    .local int rx256_rep
    .local pmc rx256_cur
    .local pmc rx256_curclass
    .local pmc rx256_bstack
    .local pmc rx256_cstack
    (rx256_cur, rx256_tgt, rx256_pos, rx256_curclass, rx256_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx256_cur
    length rx256_eos, rx256_tgt
    eq $I19, 1, rx256_restart835
    gt rx256_pos, rx256_eos, rx256_fail836
    repr_get_attr_int $I11, self, rx256_curclass, "$!from"
    ne $I11, -1, rxscan257_done842
    goto rxscan257_scan841
  rxscan257_loop840:
    inc rx256_pos
    gt rx256_pos, rx256_eos, rx256_fail836
    repr_bind_attr_int rx256_cur, rx256_curclass, "$!from", rx256_pos
  rxscan257_scan841:
    nqp_rxmark rx256_bstack, rxscan257_loop840, rx256_pos, 0
  rxscan257_done842:
  alt258_0844:
    nqp_rxmark rx256_bstack, alt258_1845, rx256_pos, 0
    ge rx256_pos, rx256_eos, rx256_fail836
    substr $S11, rx256_tgt, rx256_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx256_fail836
    goto alt258_end843
  alt258_1845:
    repr_bind_attr_int rx256_cur, rx256_curclass, "$!pos", rx256_pos
    $P11 = rx256_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx256_curclass, "$!pos"
    lt $I11, 0, rx256_fail836
    repr_get_attr_int rx256_pos, $P11, rx256_curclass, "$!pos"
  alt258_end843:
    repr_bind_attr_int rx256_cur, rx256_curclass, "$!pos", rx256_pos
    $P11 = rx256_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx256_curclass, "$!pos"
    lt $I11, 0, rx256_fail836
    repr_get_attr_int rx256_pos, $P11, rx256_curclass, "$!pos"
    repr_bind_attr_int rx256_cur, rx256_curclass, "$!pos", rx256_pos
    $P11 = rx256_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx256_curclass, "$!pos"
    lt $I11, 0, rx256_fail836
    nqp_rxmark rx256_bstack, rxsubrule261_pass848, -1, 0
  rxsubrule261_pass848:
    rx256_cstack = rx256_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx256_pos, $P11, rx256_curclass, "$!pos"
    rx256_cur."!cursor_pass"(rx256_pos, "block", 'backtrack'=>1)
    .return (rx256_cur)
  rx256_restart835:
    repr_get_attr_obj rx256_cstack, rx256_cur, rx256_curclass, "$!cstack"
  rx256_fail836:
    unless rx256_bstack, rx256_done834
    pop $I19, rx256_bstack
    if_null rx256_cstack, rx256_cstack_done839
    unless rx256_cstack, rx256_cstack_done839
    dec $I19
    set $P11, rx256_cstack[$I19]
  rx256_cstack_done839:
    pop rx256_rep, rx256_bstack
    pop rx256_pos, rx256_bstack
    pop $I19, rx256_bstack
    lt rx256_pos, -1, rx256_done834
    lt rx256_pos, 0, rx256_fail836
    eq $I19, 0, rx256_fail836
    nqp_islist $I20, rx256_cstack
    unless $I20, rx256_jump837
    elements $I18, rx256_bstack
    le $I18, 0, rx256_cut838
    dec $I18
    set $I18, rx256_bstack[$I18]
  rx256_cut838:
    assign rx256_cstack, $I18
  rx256_jump837:
    jump $I19
  rx256_done834:
    rx256_cur."!cursor_fail"()
    .return (rx256_cur) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_54_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 824
    .param pmc _lex_param_0 
    .lex "%*HANDLERS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx262_tgt
    .local int rx262_pos
    .local int rx262_off
    .local int rx262_eos
    .local int rx262_rep
    .local pmc rx262_cur
    .local pmc rx262_curclass
    .local pmc rx262_bstack
    .local pmc rx262_cstack
    (rx262_cur, rx262_tgt, rx262_pos, rx262_curclass, rx262_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx262_cur
    length rx262_eos, rx262_tgt
    eq $I19, 1, rx262_restart851
    gt rx262_pos, rx262_eos, rx262_fail852
    repr_get_attr_int $I11, self, rx262_curclass, "$!from"
    ne $I11, -1, rxscan263_done858
    goto rxscan263_scan857
  rxscan263_loop856:
    inc rx262_pos
    gt rx262_pos, rx262_eos, rx262_fail852
    repr_bind_attr_int rx262_cur, rx262_curclass, "$!from", rx262_pos
  rxscan263_scan857:
    nqp_rxmark rx262_bstack, rxscan263_loop856, rx262_pos, 0
  rxscan263_done858:
    repr_bind_attr_int rx262_cur, rx262_curclass, "$!pos", rx262_pos
    store_lex unicode:"$\x{a2}", rx262_cur
    unless_null $P101, fallback859
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback860
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback860:
    unless_null $P5002, vivi_264861
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_264861:
    set $P101, $P5002
  fallback859:
    repr_bind_attr_int rx262_cur, rx262_curclass, "$!pos", rx262_pos
    $P11 = rx262_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx262_curclass, "$!pos"
    lt $I11, 0, rx262_fail852
    repr_get_attr_int rx262_pos, $P11, rx262_curclass, "$!pos"
  alt266_0864:
    nqp_rxmark rx262_bstack, alt266_1866, rx262_pos, 0
    add $I11, rx262_pos, 14
    gt $I11, rx262_eos, rx262_fail852
    substr $S10, rx262_tgt, rx262_pos, 14
    ne $S10, ucs4:"{YOU_ARE_HERE}", rx262_fail852
    add rx262_pos, 14
    repr_bind_attr_int rx262_cur, rx262_curclass, "$!pos", rx262_pos
    $P11 = rx262_cur."you_are_here"()
    repr_get_attr_int $I11, $P11, rx262_curclass, "$!pos"
    lt $I11, 0, rx262_fail852
    nqp_rxmark rx262_bstack, rxsubrule267_pass865, -1, 0
  rxsubrule267_pass865:
    rx262_cstack = rx262_cur."!cursor_capture"($P11, "you_are_here")
    repr_get_attr_int rx262_pos, $P11, rx262_curclass, "$!pos"
    goto alt266_end863
  alt266_1866:
    add $I11, rx262_pos, 1
    gt $I11, rx262_eos, rx262_fail852
    substr $S10, rx262_tgt, rx262_pos, 1
    ne $S10, ucs4:"{", rx262_fail852
    add rx262_pos, 1
    repr_bind_attr_int rx262_cur, rx262_curclass, "$!pos", rx262_pos
    $P11 = rx262_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx262_curclass, "$!pos"
    lt $I11, 0, rx262_fail852
    nqp_rxmark rx262_bstack, rxsubrule268_pass867, -1, 0
  rxsubrule268_pass867:
    rx262_cstack = rx262_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx262_pos, $P11, rx262_curclass, "$!pos"
  alt269_0869:
    nqp_rxmark rx262_bstack, alt269_1870, rx262_pos, 0
    add $I11, rx262_pos, 1
    gt $I11, rx262_eos, rx262_fail852
    substr $S10, rx262_tgt, rx262_pos, 1
    ne $S10, ucs4:"}", rx262_fail852
    add rx262_pos, 1
    goto alt269_end868
  alt269_1870:
    repr_bind_attr_int rx262_cur, rx262_curclass, "$!pos", rx262_pos
    $P11 = rx262_cur."FAILGOAL"("'}'")
    repr_get_attr_int $I11, $P11, rx262_curclass, "$!pos"
    lt $I11, 0, rx262_fail852
    goto rxsubrule270_pass871
  rxsubrule270_back872:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx262_curclass, "$!pos"
    lt $I11, 0, rx262_fail852
  rxsubrule270_pass871:
    rx262_cstack = rx262_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule270_back872
    push rx262_bstack, $I11
    push rx262_bstack, 0
    push rx262_bstack, rx262_pos
    elements $I11, rx262_cstack
    push rx262_bstack, $I11
    repr_get_attr_int rx262_pos, $P11, rx262_curclass, "$!pos"
  alt269_end868:
  alt266_end863:
    repr_bind_attr_int rx262_cur, rx262_curclass, "$!pos", rx262_pos
    $P11 = rx262_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx262_curclass, "$!pos"
    lt $I11, 0, rx262_fail852
    rx262_cur."!cursor_pass"(rx262_pos, "blockoid", 'backtrack'=>1)
    .return (rx262_cur)
  rx262_restart851:
    repr_get_attr_obj rx262_cstack, rx262_cur, rx262_curclass, "$!cstack"
  rx262_fail852:
    unless rx262_bstack, rx262_done850
    pop $I19, rx262_bstack
    if_null rx262_cstack, rx262_cstack_done855
    unless rx262_cstack, rx262_cstack_done855
    dec $I19
    set $P11, rx262_cstack[$I19]
  rx262_cstack_done855:
    pop rx262_rep, rx262_bstack
    pop rx262_pos, rx262_bstack
    pop $I19, rx262_bstack
    lt rx262_pos, -1, rx262_done850
    lt rx262_pos, 0, rx262_fail852
    eq $I19, 0, rx262_fail852
    nqp_islist $I20, rx262_cstack
    unless $I20, rx262_jump853
    elements $I18, rx262_bstack
    le $I18, 0, rx262_cut854
    dec $I18
    set $I18, rx262_bstack[$I18]
  rx262_cut854:
    assign rx262_cstack, $I18
  rx262_jump853:
    jump $I19
  rx262_done850:
    rx262_cur."!cursor_fail"()
    .return (rx262_cur) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_55_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 834
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx271_tgt
    .local int rx271_pos
    .local int rx271_off
    .local int rx271_eos
    .local int rx271_rep
    .local pmc rx271_cur
    .local pmc rx271_curclass
    .local pmc rx271_bstack
    .local pmc rx271_cstack
    (rx271_cur, rx271_tgt, rx271_pos, rx271_curclass, rx271_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx271_cur
    length rx271_eos, rx271_tgt
    eq $I19, 1, rx271_restart875
    gt rx271_pos, rx271_eos, rx271_fail876
    repr_get_attr_int $I11, self, rx271_curclass, "$!from"
    ne $I11, -1, rxscan272_done882
    goto rxscan272_scan881
  rxscan272_loop880:
    inc rx271_pos
    gt rx271_pos, rx271_eos, rx271_fail876
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!from", rx271_pos
  rxscan272_scan881:
    nqp_rxmark rx271_bstack, rxscan272_loop880, rx271_pos, 0
  rxscan272_done882:
    rx271_cur."!cursor_pass"(rx271_pos, "newpad", 'backtrack'=>1)
    .return (rx271_cur)
  rx271_restart875:
    repr_get_attr_obj rx271_cstack, rx271_cur, rx271_curclass, "$!cstack"
  rx271_fail876:
    unless rx271_bstack, rx271_done874
    pop $I19, rx271_bstack
    if_null rx271_cstack, rx271_cstack_done879
    unless rx271_cstack, rx271_cstack_done879
    dec $I19
    set $P11, rx271_cstack[$I19]
  rx271_cstack_done879:
    pop rx271_rep, rx271_bstack
    pop rx271_pos, rx271_bstack
    pop $I19, rx271_bstack
    lt rx271_pos, -1, rx271_done874
    lt rx271_pos, 0, rx271_fail876
    eq $I19, 0, rx271_fail876
    nqp_islist $I20, rx271_cstack
    unless $I20, rx271_jump877
    elements $I18, rx271_bstack
    le $I18, 0, rx271_cut878
    dec $I18
    set $I18, rx271_bstack[$I18]
  rx271_cut878:
    assign rx271_cstack, $I18
  rx271_jump877:
    jump $I19
  rx271_done874:
    rx271_cur."!cursor_fail"()
    .return (rx271_cur) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_56_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 835
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx274_tgt
    .local int rx274_pos
    .local int rx274_off
    .local int rx274_eos
    .local int rx274_rep
    .local pmc rx274_cur
    .local pmc rx274_curclass
    .local pmc rx274_bstack
    .local pmc rx274_cstack
    (rx274_cur, rx274_tgt, rx274_pos, rx274_curclass, rx274_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx274_cur
    length rx274_eos, rx274_tgt
    eq $I19, 1, rx274_restart886
    gt rx274_pos, rx274_eos, rx274_fail887
    repr_get_attr_int $I11, self, rx274_curclass, "$!from"
    ne $I11, -1, rxscan275_done893
    goto rxscan275_scan892
  rxscan275_loop891:
    inc rx274_pos
    gt rx274_pos, rx274_eos, rx274_fail887
    repr_bind_attr_int rx274_cur, rx274_curclass, "$!from", rx274_pos
  rxscan275_scan892:
    nqp_rxmark rx274_bstack, rxscan275_loop891, rx274_pos, 0
  rxscan275_done893:
    rx274_cur."!cursor_pass"(rx274_pos, "outerctx", 'backtrack'=>1)
    .return (rx274_cur)
  rx274_restart886:
    repr_get_attr_obj rx274_cstack, rx274_cur, rx274_curclass, "$!cstack"
  rx274_fail887:
    unless rx274_bstack, rx274_done885
    pop $I19, rx274_bstack
    if_null rx274_cstack, rx274_cstack_done890
    unless rx274_cstack, rx274_cstack_done890
    dec $I19
    set $P11, rx274_cstack[$I19]
  rx274_cstack_done890:
    pop rx274_rep, rx274_bstack
    pop rx274_pos, rx274_bstack
    pop $I19, rx274_bstack
    lt rx274_pos, -1, rx274_done885
    lt rx274_pos, 0, rx274_fail887
    eq $I19, 0, rx274_fail887
    nqp_islist $I20, rx274_cstack
    unless $I20, rx274_jump888
    elements $I18, rx274_bstack
    le $I18, 0, rx274_cut889
    dec $I18
    set $I18, rx274_bstack[$I18]
  rx274_cut889:
    assign rx274_cstack, $I18
  rx274_jump888:
    jump $I19
  rx274_done885:
    rx274_cur."!cursor_fail"()
    .return (rx274_cur) 
.end
.HLL "nqp"
.namespace []
.sub "finishpad" :subid("cuid_57_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 836
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx277_tgt
    .local int rx277_pos
    .local int rx277_off
    .local int rx277_eos
    .local int rx277_rep
    .local pmc rx277_cur
    .local pmc rx277_curclass
    .local pmc rx277_bstack
    .local pmc rx277_cstack
    (rx277_cur, rx277_tgt, rx277_pos, rx277_curclass, rx277_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx277_cur
    length rx277_eos, rx277_tgt
    eq $I19, 1, rx277_restart897
    gt rx277_pos, rx277_eos, rx277_fail898
    repr_get_attr_int $I11, self, rx277_curclass, "$!from"
    ne $I11, -1, rxscan278_done904
    goto rxscan278_scan903
  rxscan278_loop902:
    inc rx277_pos
    gt rx277_pos, rx277_eos, rx277_fail898
    repr_bind_attr_int rx277_cur, rx277_curclass, "$!from", rx277_pos
  rxscan278_scan903:
    nqp_rxmark rx277_bstack, rxscan278_loop902, rx277_pos, 0
  rxscan278_done904:
    rx277_cur."!cursor_pass"(rx277_pos, "finishpad", 'backtrack'=>1)
    .return (rx277_cur)
  rx277_restart897:
    repr_get_attr_obj rx277_cstack, rx277_cur, rx277_curclass, "$!cstack"
  rx277_fail898:
    unless rx277_bstack, rx277_done896
    pop $I19, rx277_bstack
    if_null rx277_cstack, rx277_cstack_done901
    unless rx277_cstack, rx277_cstack_done901
    dec $I19
    set $P11, rx277_cstack[$I19]
  rx277_cstack_done901:
    pop rx277_rep, rx277_bstack
    pop rx277_pos, rx277_bstack
    pop $I19, rx277_bstack
    lt rx277_pos, -1, rx277_done896
    lt rx277_pos, 0, rx277_fail898
    eq $I19, 0, rx277_fail898
    nqp_islist $I20, rx277_cstack
    unless $I20, rx277_jump899
    elements $I18, rx277_bstack
    le $I18, 0, rx277_cut900
    dec $I18
    set $I18, rx277_bstack[$I18]
  rx277_cut900:
    assign rx277_cstack, $I18
  rx277_jump899:
    jump $I19
  rx277_done896:
    rx277_cur."!cursor_fail"()
    .return (rx277_cur) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_58_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 837
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx280_tgt
    .local int rx280_pos
    .local int rx280_off
    .local int rx280_eos
    .local int rx280_rep
    .local pmc rx280_cur
    .local pmc rx280_curclass
    .local pmc rx280_bstack
    .local pmc rx280_cstack
    (rx280_cur, rx280_tgt, rx280_pos, rx280_curclass, rx280_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx280_cur
    length rx280_eos, rx280_tgt
    eq $I19, 1, rx280_restart908
    gt rx280_pos, rx280_eos, rx280_fail909
    repr_get_attr_int $I11, self, rx280_curclass, "$!from"
    ne $I11, -1, rxscan281_done915
    goto rxscan281_scan914
  rxscan281_loop913:
    inc rx280_pos
    gt rx280_pos, rx280_eos, rx280_fail909
    repr_bind_attr_int rx280_cur, rx280_curclass, "$!from", rx280_pos
  rxscan281_scan914:
    nqp_rxmark rx280_bstack, rxscan281_loop913, rx280_pos, 0
  rxscan281_done915:
    rx280_cur."!cursor_pass"(rx280_pos, "you_are_here", 'backtrack'=>1)
    .return (rx280_cur)
  rx280_restart908:
    repr_get_attr_obj rx280_cstack, rx280_cur, rx280_curclass, "$!cstack"
  rx280_fail909:
    unless rx280_bstack, rx280_done907
    pop $I19, rx280_bstack
    if_null rx280_cstack, rx280_cstack_done912
    unless rx280_cstack, rx280_cstack_done912
    dec $I19
    set $P11, rx280_cstack[$I19]
  rx280_cstack_done912:
    pop rx280_rep, rx280_bstack
    pop rx280_pos, rx280_bstack
    pop $I19, rx280_bstack
    lt rx280_pos, -1, rx280_done907
    lt rx280_pos, 0, rx280_fail909
    eq $I19, 0, rx280_fail909
    nqp_islist $I20, rx280_cstack
    unless $I20, rx280_jump910
    elements $I18, rx280_bstack
    le $I18, 0, rx280_cut911
    dec $I18
    set $I18, rx280_bstack[$I18]
  rx280_cut911:
    assign rx280_cstack, $I18
  rx280_jump910:
    jump $I19
  rx280_done907:
    rx280_cur."!cursor_fail"()
    .return (rx280_cur) 
.end
.HLL "nqp"
.namespace []
.sub "terminator" :subid("cuid_59_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 839
    .param pmc self 
    $P5001 = self."!protoregex"("terminator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<;>" :subid("cuid_60_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 841
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx283_tgt
    .local int rx283_pos
    .local int rx283_off
    .local int rx283_eos
    .local int rx283_rep
    .local pmc rx283_cur
    .local pmc rx283_curclass
    .local pmc rx283_bstack
    .local pmc rx283_cstack
    (rx283_cur, rx283_tgt, rx283_pos, rx283_curclass, rx283_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx283_cur
    length rx283_eos, rx283_tgt
    eq $I19, 1, rx283_restart919
    gt rx283_pos, rx283_eos, rx283_fail920
    repr_get_attr_int $I11, self, rx283_curclass, "$!from"
    ne $I11, -1, rxscan284_done926
    goto rxscan284_scan925
  rxscan284_loop924:
    inc rx283_pos
    gt rx283_pos, rx283_eos, rx283_fail920
    repr_bind_attr_int rx283_cur, rx283_curclass, "$!from", rx283_pos
  rxscan284_scan925:
    nqp_rxmark rx283_bstack, rxscan284_loop924, rx283_pos, 0
  rxscan284_done926:
    ge rx283_pos, rx283_eos, rx283_fail920
    substr $S11, rx283_tgt, rx283_pos, 1
    index $I11, ucs4:";", $S11
    lt $I11, 0, rx283_fail920
    rx283_cur."!cursor_pass"(rx283_pos, "terminator:sym<;>", 'backtrack'=>1)
    .return (rx283_cur)
  rx283_restart919:
    repr_get_attr_obj rx283_cstack, rx283_cur, rx283_curclass, "$!cstack"
  rx283_fail920:
    unless rx283_bstack, rx283_done918
    pop $I19, rx283_bstack
    if_null rx283_cstack, rx283_cstack_done923
    unless rx283_cstack, rx283_cstack_done923
    dec $I19
    set $P11, rx283_cstack[$I19]
  rx283_cstack_done923:
    pop rx283_rep, rx283_bstack
    pop rx283_pos, rx283_bstack
    pop $I19, rx283_bstack
    lt rx283_pos, -1, rx283_done918
    lt rx283_pos, 0, rx283_fail920
    eq $I19, 0, rx283_fail920
    nqp_islist $I20, rx283_cstack
    unless $I20, rx283_jump921
    elements $I18, rx283_bstack
    le $I18, 0, rx283_cut922
    dec $I18
    set $I18, rx283_bstack[$I18]
  rx283_cut922:
    assign rx283_cstack, $I18
  rx283_jump921:
    jump $I19
  rx283_done918:
    rx283_cur."!cursor_fail"()
    .return (rx283_cur) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<}>" :subid("cuid_61_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 842
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx285_tgt
    .local int rx285_pos
    .local int rx285_off
    .local int rx285_eos
    .local int rx285_rep
    .local pmc rx285_cur
    .local pmc rx285_curclass
    .local pmc rx285_bstack
    .local pmc rx285_cstack
    (rx285_cur, rx285_tgt, rx285_pos, rx285_curclass, rx285_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx285_cur
    length rx285_eos, rx285_tgt
    eq $I19, 1, rx285_restart929
    gt rx285_pos, rx285_eos, rx285_fail930
    repr_get_attr_int $I11, self, rx285_curclass, "$!from"
    ne $I11, -1, rxscan286_done936
    goto rxscan286_scan935
  rxscan286_loop934:
    inc rx285_pos
    gt rx285_pos, rx285_eos, rx285_fail930
    repr_bind_attr_int rx285_cur, rx285_curclass, "$!from", rx285_pos
  rxscan286_scan935:
    nqp_rxmark rx285_bstack, rxscan286_loop934, rx285_pos, 0
  rxscan286_done936:
    ge rx285_pos, rx285_eos, rx285_fail930
    substr $S11, rx285_tgt, rx285_pos, 1
    index $I11, ucs4:"}", $S11
    lt $I11, 0, rx285_fail930
    rx285_cur."!cursor_pass"(rx285_pos, "terminator:sym<}>", 'backtrack'=>1)
    .return (rx285_cur)
  rx285_restart929:
    repr_get_attr_obj rx285_cstack, rx285_cur, rx285_curclass, "$!cstack"
  rx285_fail930:
    unless rx285_bstack, rx285_done928
    pop $I19, rx285_bstack
    if_null rx285_cstack, rx285_cstack_done933
    unless rx285_cstack, rx285_cstack_done933
    dec $I19
    set $P11, rx285_cstack[$I19]
  rx285_cstack_done933:
    pop rx285_rep, rx285_bstack
    pop rx285_pos, rx285_bstack
    pop $I19, rx285_bstack
    lt rx285_pos, -1, rx285_done928
    lt rx285_pos, 0, rx285_fail930
    eq $I19, 0, rx285_fail930
    nqp_islist $I20, rx285_cstack
    unless $I20, rx285_jump931
    elements $I18, rx285_bstack
    le $I18, 0, rx285_cut932
    dec $I18
    set $I18, rx285_bstack[$I18]
  rx285_cut932:
    assign rx285_cstack, $I18
  rx285_jump931:
    jump $I19
  rx285_done928:
    rx285_cur."!cursor_fail"()
    .return (rx285_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control" :subid("cuid_62_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 846
    .param pmc self 
    $P5001 = self."!protoregex"("statement_control")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_63_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 848
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx287_tgt
    .local int rx287_pos
    .local int rx287_off
    .local int rx287_eos
    .local int rx287_rep
    .local pmc rx287_cur
    .local pmc rx287_curclass
    .local pmc rx287_bstack
    .local pmc rx287_cstack
    (rx287_cur, rx287_tgt, rx287_pos, rx287_curclass, rx287_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx287_cur
    length rx287_eos, rx287_tgt
    eq $I19, 1, rx287_restart939
    gt rx287_pos, rx287_eos, rx287_fail940
    repr_get_attr_int $I11, self, rx287_curclass, "$!from"
    ne $I11, -1, rxscan288_done946
    goto rxscan288_scan945
  rxscan288_loop944:
    inc rx287_pos
    gt rx287_pos, rx287_eos, rx287_fail940
    repr_bind_attr_int rx287_cur, rx287_curclass, "$!from", rx287_pos
  rxscan288_scan945:
    nqp_rxmark rx287_bstack, rxscan288_loop944, rx287_pos, 0
  rxscan288_done946:
    nqp_rxmark rx287_bstack, rxcap289_fail948, rx287_pos, 0
    add $I11, rx287_pos, 3
    gt $I11, rx287_eos, rx287_fail940
    substr $S10, rx287_tgt, rx287_pos, 3
    ne $S10, ucs4:"use", rx287_fail940
    add rx287_pos, 3
    nqp_rxpeek $I19, rx287_bstack, rxcap289_fail948
    inc $I19
    set $I11, rx287_bstack[$I19]
    repr_bind_attr_int rx287_cur, rx287_curclass, "$!pos", rx287_pos
    $P11 = rx287_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx287_pos)
    rx287_cstack = rx287_cur."!cursor_capture"($P11, "sym")
    goto rxcap289_done947
  rxcap289_fail948:
    goto rx287_fail940
  rxcap289_done947:
    ge rx287_pos, rx287_eos, rx287_fail940
    is_cclass $I11, .CCLASS_WHITESPACE, rx287_tgt, rx287_pos
    unless $I11, rx287_fail940
    add rx287_pos, 1
    repr_bind_attr_int rx287_cur, rx287_curclass, "$!pos", rx287_pos
    $P11 = rx287_cur."ws"()
    repr_get_attr_int $I11, $P11, rx287_curclass, "$!pos"
    lt $I11, 0, rx287_fail940
    repr_get_attr_int rx287_pos, $P11, rx287_curclass, "$!pos"
    repr_bind_attr_int rx287_cur, rx287_curclass, "$!pos", rx287_pos
    $P11 = rx287_cur."name"()
    repr_get_attr_int $I11, $P11, rx287_curclass, "$!pos"
    lt $I11, 0, rx287_fail940
    nqp_rxmark rx287_bstack, rxsubrule291_pass950, -1, 0
  rxsubrule291_pass950:
    rx287_cstack = rx287_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx287_pos, $P11, rx287_curclass, "$!pos"
    repr_bind_attr_int rx287_cur, rx287_curclass, "$!pos", rx287_pos
    $P11 = rx287_cur."ws"()
    repr_get_attr_int $I11, $P11, rx287_curclass, "$!pos"
    lt $I11, 0, rx287_fail940
    repr_get_attr_int rx287_pos, $P11, rx287_curclass, "$!pos"
    rx287_cur."!cursor_pass"(rx287_pos, "statement_control:sym<use>", 'backtrack'=>1)
    .return (rx287_cur)
  rx287_restart939:
    repr_get_attr_obj rx287_cstack, rx287_cur, rx287_curclass, "$!cstack"
  rx287_fail940:
    unless rx287_bstack, rx287_done938
    pop $I19, rx287_bstack
    if_null rx287_cstack, rx287_cstack_done943
    unless rx287_cstack, rx287_cstack_done943
    dec $I19
    set $P11, rx287_cstack[$I19]
  rx287_cstack_done943:
    pop rx287_rep, rx287_bstack
    pop rx287_pos, rx287_bstack
    pop $I19, rx287_bstack
    lt rx287_pos, -1, rx287_done938
    lt rx287_pos, 0, rx287_fail940
    eq $I19, 0, rx287_fail940
    nqp_islist $I20, rx287_cstack
    unless $I20, rx287_jump941
    elements $I18, rx287_bstack
    le $I18, 0, rx287_cut942
    dec $I18
    set $I18, rx287_bstack[$I18]
  rx287_cut942:
    assign rx287_cstack, $I18
  rx287_jump941:
    jump $I19
  rx287_done938:
    rx287_cur."!cursor_fail"()
    .return (rx287_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_64_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 852
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx293_tgt
    .local int rx293_pos
    .local int rx293_off
    .local int rx293_eos
    .local int rx293_rep
    .local pmc rx293_cur
    .local pmc rx293_curclass
    .local pmc rx293_bstack
    .local pmc rx293_cstack
    (rx293_cur, rx293_tgt, rx293_pos, rx293_curclass, rx293_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx293_cur
    length rx293_eos, rx293_tgt
    eq $I19, 1, rx293_restart954
    gt rx293_pos, rx293_eos, rx293_fail955
    repr_get_attr_int $I11, self, rx293_curclass, "$!from"
    ne $I11, -1, rxscan294_done961
    goto rxscan294_scan960
  rxscan294_loop959:
    inc rx293_pos
    gt rx293_pos, rx293_eos, rx293_fail955
    repr_bind_attr_int rx293_cur, rx293_curclass, "$!from", rx293_pos
  rxscan294_scan960:
    nqp_rxmark rx293_bstack, rxscan294_loop959, rx293_pos, 0
  rxscan294_done961:
    nqp_rxmark rx293_bstack, rxcap295_fail963, rx293_pos, 0
    add $I11, rx293_pos, 2
    gt $I11, rx293_eos, rx293_fail955
    substr $S10, rx293_tgt, rx293_pos, 2
    ne $S10, ucs4:"if", rx293_fail955
    add rx293_pos, 2
    nqp_rxpeek $I19, rx293_bstack, rxcap295_fail963
    inc $I19
    set $I11, rx293_bstack[$I19]
    repr_bind_attr_int rx293_cur, rx293_curclass, "$!pos", rx293_pos
    $P11 = rx293_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx293_pos)
    rx293_cstack = rx293_cur."!cursor_capture"($P11, "sym")
    goto rxcap295_done962
  rxcap295_fail963:
    goto rx293_fail955
  rxcap295_done962:
    ge rx293_pos, rx293_eos, rx293_fail955
    is_cclass $I11, .CCLASS_WHITESPACE, rx293_tgt, rx293_pos
    unless $I11, rx293_fail955
    add rx293_pos, 1
    repr_bind_attr_int rx293_cur, rx293_curclass, "$!pos", rx293_pos
    $P11 = rx293_cur."ws"()
    repr_get_attr_int $I11, $P11, rx293_curclass, "$!pos"
    lt $I11, 0, rx293_fail955
    repr_get_attr_int rx293_pos, $P11, rx293_curclass, "$!pos"
    repr_bind_attr_int rx293_cur, rx293_curclass, "$!pos", rx293_pos
    $P11 = rx293_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx293_curclass, "$!pos"
    lt $I11, 0, rx293_fail955
    nqp_rxmark rx293_bstack, rxsubrule297_pass965, -1, 0
  rxsubrule297_pass965:
    rx293_cstack = rx293_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx293_pos, $P11, rx293_curclass, "$!pos"
    repr_bind_attr_int rx293_cur, rx293_curclass, "$!pos", rx293_pos
    $P11 = rx293_cur."ws"()
    repr_get_attr_int $I11, $P11, rx293_curclass, "$!pos"
    lt $I11, 0, rx293_fail955
    repr_get_attr_int rx293_pos, $P11, rx293_curclass, "$!pos"
    nqp_rxmark rx293_bstack, rxquantr299_done968, rx293_pos, 0
  rxquantr299_loop967:
    repr_bind_attr_int rx293_cur, rx293_curclass, "$!pos", rx293_pos
    $P11 = rx293_cur."ws"()
    repr_get_attr_int $I11, $P11, rx293_curclass, "$!pos"
    lt $I11, 0, rx293_fail955
    repr_get_attr_int rx293_pos, $P11, rx293_curclass, "$!pos"
    add $I11, rx293_pos, 5
    gt $I11, rx293_eos, rx293_fail955
    substr $S10, rx293_tgt, rx293_pos, 5
    ne $S10, ucs4:"elsif", rx293_fail955
    add rx293_pos, 5
    ge rx293_pos, rx293_eos, rx293_fail955
    is_cclass $I11, .CCLASS_WHITESPACE, rx293_tgt, rx293_pos
    unless $I11, rx293_fail955
    add rx293_pos, 1
    repr_bind_attr_int rx293_cur, rx293_curclass, "$!pos", rx293_pos
    $P11 = rx293_cur."ws"()
    repr_get_attr_int $I11, $P11, rx293_curclass, "$!pos"
    lt $I11, 0, rx293_fail955
    repr_get_attr_int rx293_pos, $P11, rx293_curclass, "$!pos"
    repr_bind_attr_int rx293_cur, rx293_curclass, "$!pos", rx293_pos
    $P11 = rx293_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx293_curclass, "$!pos"
    lt $I11, 0, rx293_fail955
    nqp_rxmark rx293_bstack, rxsubrule302_pass971, -1, 0
  rxsubrule302_pass971:
    rx293_cstack = rx293_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx293_pos, $P11, rx293_curclass, "$!pos"
    repr_bind_attr_int rx293_cur, rx293_curclass, "$!pos", rx293_pos
    $P11 = rx293_cur."ws"()
    repr_get_attr_int $I11, $P11, rx293_curclass, "$!pos"
    lt $I11, 0, rx293_fail955
    repr_get_attr_int rx293_pos, $P11, rx293_curclass, "$!pos"
    nqp_rxpeek $I19, rx293_bstack, rxquantr299_done968
    inc $I19
    inc $I19
    set rx293_rep, rx293_bstack[$I19]
    nqp_rxcommit rx293_bstack, rxquantr299_done968
    inc rx293_rep
    nqp_rxmark rx293_bstack, rxquantr299_done968, rx293_pos, rx293_rep
    goto rxquantr299_loop967
  rxquantr299_done968:
    repr_bind_attr_int rx293_cur, rx293_curclass, "$!pos", rx293_pos
    $P11 = rx293_cur."ws"()
    repr_get_attr_int $I11, $P11, rx293_curclass, "$!pos"
    lt $I11, 0, rx293_fail955
    repr_get_attr_int rx293_pos, $P11, rx293_curclass, "$!pos"
    nqp_rxmark rx293_bstack, rxquantr305_done975, rx293_pos, 0
  rxquantr305_loop974:
    repr_bind_attr_int rx293_cur, rx293_curclass, "$!pos", rx293_pos
    $P11 = rx293_cur."ws"()
    repr_get_attr_int $I11, $P11, rx293_curclass, "$!pos"
    lt $I11, 0, rx293_fail955
    repr_get_attr_int rx293_pos, $P11, rx293_curclass, "$!pos"
    add $I11, rx293_pos, 4
    gt $I11, rx293_eos, rx293_fail955
    substr $S10, rx293_tgt, rx293_pos, 4
    ne $S10, ucs4:"else", rx293_fail955
    add rx293_pos, 4
    ge rx293_pos, rx293_eos, rx293_fail955
    is_cclass $I11, .CCLASS_WHITESPACE, rx293_tgt, rx293_pos
    unless $I11, rx293_fail955
    add rx293_pos, 1
    repr_bind_attr_int rx293_cur, rx293_curclass, "$!pos", rx293_pos
    $P11 = rx293_cur."ws"()
    repr_get_attr_int $I11, $P11, rx293_curclass, "$!pos"
    lt $I11, 0, rx293_fail955
    repr_get_attr_int rx293_pos, $P11, rx293_curclass, "$!pos"
    repr_bind_attr_int rx293_cur, rx293_curclass, "$!pos", rx293_pos
    $P11 = rx293_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx293_curclass, "$!pos"
    lt $I11, 0, rx293_fail955
    nqp_rxmark rx293_bstack, rxsubrule308_pass978, -1, 0
  rxsubrule308_pass978:
    rx293_cstack = rx293_cur."!cursor_capture"($P11, "else")
    repr_get_attr_int rx293_pos, $P11, rx293_curclass, "$!pos"
    repr_bind_attr_int rx293_cur, rx293_curclass, "$!pos", rx293_pos
    $P11 = rx293_cur."ws"()
    repr_get_attr_int $I11, $P11, rx293_curclass, "$!pos"
    lt $I11, 0, rx293_fail955
    repr_get_attr_int rx293_pos, $P11, rx293_curclass, "$!pos"
    nqp_rxpeek $I19, rx293_bstack, rxquantr305_done975
    inc $I19
    inc $I19
    set rx293_rep, rx293_bstack[$I19]
    nqp_rxcommit rx293_bstack, rxquantr305_done975
    inc rx293_rep
  rxquantr305_done975:
    repr_bind_attr_int rx293_cur, rx293_curclass, "$!pos", rx293_pos
    $P11 = rx293_cur."ws"()
    repr_get_attr_int $I11, $P11, rx293_curclass, "$!pos"
    lt $I11, 0, rx293_fail955
    repr_get_attr_int rx293_pos, $P11, rx293_curclass, "$!pos"
    rx293_cur."!cursor_pass"(rx293_pos, "statement_control:sym<if>", 'backtrack'=>1)
    .return (rx293_cur)
  rx293_restart954:
    repr_get_attr_obj rx293_cstack, rx293_cur, rx293_curclass, "$!cstack"
  rx293_fail955:
    unless rx293_bstack, rx293_done953
    pop $I19, rx293_bstack
    if_null rx293_cstack, rx293_cstack_done958
    unless rx293_cstack, rx293_cstack_done958
    dec $I19
    set $P11, rx293_cstack[$I19]
  rx293_cstack_done958:
    pop rx293_rep, rx293_bstack
    pop rx293_pos, rx293_bstack
    pop $I19, rx293_bstack
    lt rx293_pos, -1, rx293_done953
    lt rx293_pos, 0, rx293_fail955
    eq $I19, 0, rx293_fail955
    nqp_islist $I20, rx293_cstack
    unless $I20, rx293_jump956
    elements $I18, rx293_bstack
    le $I18, 0, rx293_cut957
    dec $I18
    set $I18, rx293_bstack[$I18]
  rx293_cut957:
    assign rx293_cstack, $I18
  rx293_jump956:
    jump $I19
  rx293_done953:
    rx293_cur."!cursor_fail"()
    .return (rx293_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_65_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 859
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_66_1360426903.566' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx311_tgt
    .local int rx311_pos
    .local int rx311_off
    .local int rx311_eos
    .local int rx311_rep
    .local pmc rx311_cur
    .local pmc rx311_curclass
    .local pmc rx311_bstack
    .local pmc rx311_cstack
    (rx311_cur, rx311_tgt, rx311_pos, rx311_curclass, rx311_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx311_cur
    length rx311_eos, rx311_tgt
    eq $I19, 1, rx311_restart983
    gt rx311_pos, rx311_eos, rx311_fail984
    repr_get_attr_int $I11, self, rx311_curclass, "$!from"
    ne $I11, -1, rxscan312_done990
    goto rxscan312_scan989
  rxscan312_loop988:
    inc rx311_pos
    gt rx311_pos, rx311_eos, rx311_fail984
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!from", rx311_pos
  rxscan312_scan989:
    nqp_rxmark rx311_bstack, rxscan312_loop988, rx311_pos, 0
  rxscan312_done990:
    nqp_rxmark rx311_bstack, rxcap313_fail992, rx311_pos, 0
    add $I11, rx311_pos, 6
    gt $I11, rx311_eos, rx311_fail984
    substr $S10, rx311_tgt, rx311_pos, 6
    ne $S10, ucs4:"unless", rx311_fail984
    add rx311_pos, 6
    nqp_rxpeek $I19, rx311_bstack, rxcap313_fail992
    inc $I19
    set $I11, rx311_bstack[$I19]
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx311_pos)
    rx311_cstack = rx311_cur."!cursor_capture"($P11, "sym")
    goto rxcap313_done991
  rxcap313_fail992:
    goto rx311_fail984
  rxcap313_done991:
    ge rx311_pos, rx311_eos, rx311_fail984
    is_cclass $I11, .CCLASS_WHITESPACE, rx311_tgt, rx311_pos
    unless $I11, rx311_fail984
    add rx311_pos, 1
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail984
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail984
    nqp_rxmark rx311_bstack, rxsubrule315_pass994, -1, 0
  rxsubrule315_pass994:
    rx311_cstack = rx311_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail984
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
  alt317_0997:
    nqp_rxmark rx311_bstack, alt317_11010, rx311_pos, 0
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail984
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    .const 'Sub' $P5001 = 'cuid_66_1360426903.566' 
    capture_lex $P5001
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    ge $I11, 0, rx311_fail984
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail984
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    goto alt317_end996
  alt317_11010:
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail984
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."panic"("unless does not take \"else\", please rewrite using \"if\"")
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail984
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail984
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
  alt317_end996:
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail984
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    rx311_cur."!cursor_pass"(rx311_pos, "statement_control:sym<unless>", 'backtrack'=>1)
    .return (rx311_cur)
  rx311_restart983:
    repr_get_attr_obj rx311_cstack, rx311_cur, rx311_curclass, "$!cstack"
  rx311_fail984:
    unless rx311_bstack, rx311_done982
    pop $I19, rx311_bstack
    if_null rx311_cstack, rx311_cstack_done987
    unless rx311_cstack, rx311_cstack_done987
    dec $I19
    set $P11, rx311_cstack[$I19]
  rx311_cstack_done987:
    pop rx311_rep, rx311_bstack
    pop rx311_pos, rx311_bstack
    pop $I19, rx311_bstack
    lt rx311_pos, -1, rx311_done982
    lt rx311_pos, 0, rx311_fail984
    eq $I19, 0, rx311_fail984
    nqp_islist $I20, rx311_cstack
    unless $I20, rx311_jump985
    elements $I18, rx311_bstack
    le $I18, 0, rx311_cut986
    dec $I18
    set $I18, rx311_bstack[$I18]
  rx311_cut986:
    assign rx311_cstack, $I18
  rx311_jump985:
    jump $I19
  rx311_done982:
    rx311_cur."!cursor_fail"()
    .return (rx311_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_66_1360426903.566") :anon :lex :outer("cuid_65_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx319_tgt
    .local int rx319_pos
    .local int rx319_off
    .local int rx319_eos
    .local int rx319_rep
    .local pmc rx319_cur
    .local pmc rx319_curclass
    .local pmc rx319_bstack
    .local pmc rx319_cstack
    (rx319_cur, rx319_tgt, rx319_pos, rx319_curclass, rx319_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx319_cur
    length rx319_eos, rx319_tgt
    eq $I19, 1, rx319_restart1001
    gt rx319_pos, rx319_eos, rx319_fail1002
    repr_get_attr_int $I11, self, rx319_curclass, "$!from"
    ne $I11, -1, rxscan320_done1008
    goto rxscan320_scan1007
  rxscan320_loop1006:
    inc rx319_pos
    gt rx319_pos, rx319_eos, rx319_fail1002
    repr_bind_attr_int rx319_cur, rx319_curclass, "$!from", rx319_pos
  rxscan320_scan1007:
    nqp_rxmark rx319_bstack, rxscan320_loop1006, rx319_pos, 0
  rxscan320_done1008:
    add $I11, rx319_pos, 4
    gt $I11, rx319_eos, rx319_fail1002
    substr $S10, rx319_tgt, rx319_pos, 4
    ne $S10, ucs4:"else", rx319_fail1002
    add rx319_pos, 4
    rx319_cur."!cursor_pass"(rx319_pos, 'backtrack'=>1)
    .return (rx319_cur)
  rx319_restart1001:
    repr_get_attr_obj rx319_cstack, rx319_cur, rx319_curclass, "$!cstack"
  rx319_fail1002:
    unless rx319_bstack, rx319_done1000
    pop $I19, rx319_bstack
    if_null rx319_cstack, rx319_cstack_done1005
    unless rx319_cstack, rx319_cstack_done1005
    dec $I19
    set $P11, rx319_cstack[$I19]
  rx319_cstack_done1005:
    pop rx319_rep, rx319_bstack
    pop rx319_pos, rx319_bstack
    pop $I19, rx319_bstack
    lt rx319_pos, -1, rx319_done1000
    lt rx319_pos, 0, rx319_fail1002
    eq $I19, 0, rx319_fail1002
    nqp_islist $I20, rx319_cstack
    unless $I20, rx319_jump1003
    elements $I18, rx319_bstack
    le $I18, 0, rx319_cut1004
    dec $I18
    set $I18, rx319_bstack[$I18]
  rx319_cut1004:
    assign rx319_cstack, $I18
  rx319_jump1003:
    jump $I19
  rx319_done1000:
    rx319_cur."!cursor_fail"()
    .return (rx319_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_67_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 865
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx326_tgt
    .local int rx326_pos
    .local int rx326_off
    .local int rx326_eos
    .local int rx326_rep
    .local pmc rx326_cur
    .local pmc rx326_curclass
    .local pmc rx326_bstack
    .local pmc rx326_cstack
    (rx326_cur, rx326_tgt, rx326_pos, rx326_curclass, rx326_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx326_cur
    length rx326_eos, rx326_tgt
    eq $I19, 1, rx326_restart1017
    gt rx326_pos, rx326_eos, rx326_fail1018
    repr_get_attr_int $I11, self, rx326_curclass, "$!from"
    ne $I11, -1, rxscan327_done1024
    goto rxscan327_scan1023
  rxscan327_loop1022:
    inc rx326_pos
    gt rx326_pos, rx326_eos, rx326_fail1018
    repr_bind_attr_int rx326_cur, rx326_curclass, "$!from", rx326_pos
  rxscan327_scan1023:
    nqp_rxmark rx326_bstack, rxscan327_loop1022, rx326_pos, 0
  rxscan327_done1024:
    repr_bind_attr_int rx326_cur, rx326_curclass, "$!pos", rx326_pos
    store_lex unicode:"$\x{a2}", rx326_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx326_bstack, rxcap328_fail1026, rx326_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt329_01028
    nqp_push_label $P11, alt329_11029
    nqp_rxmark rx326_bstack, alt329_end1027, -1, 0
    rx326_cur."!alt"(rx326_pos, "alt_nfa__12_1360426905.133", $P11)
    goto rx326_fail1018
  alt329_01028:
    add $I11, rx326_pos, 5
    gt $I11, rx326_eos, rx326_fail1018
    substr $S10, rx326_tgt, rx326_pos, 5
    ne $S10, ucs4:"while", rx326_fail1018
    add rx326_pos, 5
    goto alt329_end1027
  alt329_11029:
    add $I11, rx326_pos, 5
    gt $I11, rx326_eos, rx326_fail1018
    substr $S10, rx326_tgt, rx326_pos, 5
    ne $S10, ucs4:"until", rx326_fail1018
    add rx326_pos, 5
    goto alt329_end1027
  alt329_end1027:
    nqp_rxcommit rx326_bstack, alt329_end1027
    nqp_rxpeek $I19, rx326_bstack, rxcap328_fail1026
    inc $I19
    set $I11, rx326_bstack[$I19]
    repr_bind_attr_int rx326_cur, rx326_curclass, "$!pos", rx326_pos
    $P11 = rx326_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx326_pos)
    rx326_cstack = rx326_cur."!cursor_capture"($P11, "sym")
    goto rxcap328_done1025
  rxcap328_fail1026:
    goto rx326_fail1018
  rxcap328_done1025:
    ge rx326_pos, rx326_eos, rx326_fail1018
    is_cclass $I11, .CCLASS_WHITESPACE, rx326_tgt, rx326_pos
    unless $I11, rx326_fail1018
    add rx326_pos, 1
    repr_bind_attr_int rx326_cur, rx326_curclass, "$!pos", rx326_pos
    $P11 = rx326_cur."ws"()
    repr_get_attr_int $I11, $P11, rx326_curclass, "$!pos"
    lt $I11, 0, rx326_fail1018
    repr_get_attr_int rx326_pos, $P11, rx326_curclass, "$!pos"
    repr_bind_attr_int rx326_cur, rx326_curclass, "$!pos", rx326_pos
    $P11 = rx326_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx326_curclass, "$!pos"
    lt $I11, 0, rx326_fail1018
    nqp_rxmark rx326_bstack, rxsubrule331_pass1031, -1, 0
  rxsubrule331_pass1031:
    rx326_cstack = rx326_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx326_pos, $P11, rx326_curclass, "$!pos"
    repr_bind_attr_int rx326_cur, rx326_curclass, "$!pos", rx326_pos
    $P11 = rx326_cur."ws"()
    repr_get_attr_int $I11, $P11, rx326_curclass, "$!pos"
    lt $I11, 0, rx326_fail1018
    repr_get_attr_int rx326_pos, $P11, rx326_curclass, "$!pos"
    rx326_cur."!cursor_pass"(rx326_pos, "statement_control:sym<while>", 'backtrack'=>1)
    .return (rx326_cur)
  rx326_restart1017:
    repr_get_attr_obj rx326_cstack, rx326_cur, rx326_curclass, "$!cstack"
  rx326_fail1018:
    unless rx326_bstack, rx326_done1016
    pop $I19, rx326_bstack
    if_null rx326_cstack, rx326_cstack_done1021
    unless rx326_cstack, rx326_cstack_done1021
    dec $I19
    set $P11, rx326_cstack[$I19]
  rx326_cstack_done1021:
    pop rx326_rep, rx326_bstack
    pop rx326_pos, rx326_bstack
    pop $I19, rx326_bstack
    lt rx326_pos, -1, rx326_done1016
    lt rx326_pos, 0, rx326_fail1018
    eq $I19, 0, rx326_fail1018
    nqp_islist $I20, rx326_cstack
    unless $I20, rx326_jump1019
    elements $I18, rx326_bstack
    le $I18, 0, rx326_cut1020
    dec $I18
    set $I18, rx326_bstack[$I18]
  rx326_cut1020:
    assign rx326_cstack, $I18
  rx326_jump1019:
    jump $I19
  rx326_done1016:
    rx326_cur."!cursor_fail"()
    .return (rx326_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_68_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 871
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx333_tgt
    .local int rx333_pos
    .local int rx333_off
    .local int rx333_eos
    .local int rx333_rep
    .local pmc rx333_cur
    .local pmc rx333_curclass
    .local pmc rx333_bstack
    .local pmc rx333_cstack
    (rx333_cur, rx333_tgt, rx333_pos, rx333_curclass, rx333_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx333_cur
    length rx333_eos, rx333_tgt
    eq $I19, 1, rx333_restart1035
    gt rx333_pos, rx333_eos, rx333_fail1036
    repr_get_attr_int $I11, self, rx333_curclass, "$!from"
    ne $I11, -1, rxscan334_done1042
    goto rxscan334_scan1041
  rxscan334_loop1040:
    inc rx333_pos
    gt rx333_pos, rx333_eos, rx333_fail1036
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!from", rx333_pos
  rxscan334_scan1041:
    nqp_rxmark rx333_bstack, rxscan334_loop1040, rx333_pos, 0
  rxscan334_done1042:
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!pos", rx333_pos
    store_lex unicode:"$\x{a2}", rx333_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx333_bstack, rxcap335_fail1044, rx333_pos, 0
    add $I11, rx333_pos, 6
    gt $I11, rx333_eos, rx333_fail1036
    substr $S10, rx333_tgt, rx333_pos, 6
    ne $S10, ucs4:"repeat", rx333_fail1036
    add rx333_pos, 6
    nqp_rxpeek $I19, rx333_bstack, rxcap335_fail1044
    inc $I19
    set $I11, rx333_bstack[$I19]
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!pos", rx333_pos
    $P11 = rx333_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx333_pos)
    rx333_cstack = rx333_cur."!cursor_capture"($P11, "sym")
    goto rxcap335_done1043
  rxcap335_fail1044:
    goto rx333_fail1036
  rxcap335_done1043:
    ge rx333_pos, rx333_eos, rx333_fail1036
    is_cclass $I11, .CCLASS_WHITESPACE, rx333_tgt, rx333_pos
    unless $I11, rx333_fail1036
    add rx333_pos, 1
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!pos", rx333_pos
    $P11 = rx333_cur."ws"()
    repr_get_attr_int $I11, $P11, rx333_curclass, "$!pos"
    lt $I11, 0, rx333_fail1036
    repr_get_attr_int rx333_pos, $P11, rx333_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt337_01047
    nqp_push_label $P11, alt337_11057
    nqp_rxmark rx333_bstack, alt337_end1046, -1, 0
    rx333_cur."!alt"(rx333_pos, "alt_nfa__15_1360426905.153", $P11)
    goto rx333_fail1036
  alt337_01047:
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!pos", rx333_pos
    $P11 = rx333_cur."ws"()
    repr_get_attr_int $I11, $P11, rx333_curclass, "$!pos"
    lt $I11, 0, rx333_fail1036
    repr_get_attr_int rx333_pos, $P11, rx333_curclass, "$!pos"
    nqp_rxmark rx333_bstack, rxcap339_fail1050, rx333_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt340_01052
    nqp_push_label $P11, alt340_11053
    nqp_rxmark rx333_bstack, alt340_end1051, -1, 0
    rx333_cur."!alt"(rx333_pos, "alt_nfa__13_1360426905.152", $P11)
    goto rx333_fail1036
  alt340_01052:
    add $I11, rx333_pos, 5
    gt $I11, rx333_eos, rx333_fail1036
    substr $S10, rx333_tgt, rx333_pos, 5
    ne $S10, ucs4:"while", rx333_fail1036
    add rx333_pos, 5
    goto alt340_end1051
  alt340_11053:
    add $I11, rx333_pos, 5
    gt $I11, rx333_eos, rx333_fail1036
    substr $S10, rx333_tgt, rx333_pos, 5
    ne $S10, ucs4:"until", rx333_fail1036
    add rx333_pos, 5
    goto alt340_end1051
  alt340_end1051:
    nqp_rxcommit rx333_bstack, alt340_end1051
    nqp_rxpeek $I19, rx333_bstack, rxcap339_fail1050
    inc $I19
    set $I11, rx333_bstack[$I19]
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!pos", rx333_pos
    $P11 = rx333_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx333_pos)
    rx333_cstack = rx333_cur."!cursor_capture"($P11, "wu")
    goto rxcap339_done1049
  rxcap339_fail1050:
    goto rx333_fail1036
  rxcap339_done1049:
    ge rx333_pos, rx333_eos, rx333_fail1036
    is_cclass $I11, .CCLASS_WHITESPACE, rx333_tgt, rx333_pos
    unless $I11, rx333_fail1036
    add rx333_pos, 1
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!pos", rx333_pos
    $P11 = rx333_cur."ws"()
    repr_get_attr_int $I11, $P11, rx333_curclass, "$!pos"
    lt $I11, 0, rx333_fail1036
    repr_get_attr_int rx333_pos, $P11, rx333_curclass, "$!pos"
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!pos", rx333_pos
    $P11 = rx333_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx333_curclass, "$!pos"
    lt $I11, 0, rx333_fail1036
    nqp_rxmark rx333_bstack, rxsubrule342_pass1055, -1, 0
  rxsubrule342_pass1055:
    rx333_cstack = rx333_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx333_pos, $P11, rx333_curclass, "$!pos"
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!pos", rx333_pos
    $P11 = rx333_cur."ws"()
    repr_get_attr_int $I11, $P11, rx333_curclass, "$!pos"
    lt $I11, 0, rx333_fail1036
    repr_get_attr_int rx333_pos, $P11, rx333_curclass, "$!pos"
    goto alt337_end1046
  alt337_11057:
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!pos", rx333_pos
    $P11 = rx333_cur."ws"()
    repr_get_attr_int $I11, $P11, rx333_curclass, "$!pos"
    lt $I11, 0, rx333_fail1036
    repr_get_attr_int rx333_pos, $P11, rx333_curclass, "$!pos"
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!pos", rx333_pos
    $P11 = rx333_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx333_curclass, "$!pos"
    lt $I11, 0, rx333_fail1036
    nqp_rxmark rx333_bstack, rxsubrule345_pass1059, -1, 0
  rxsubrule345_pass1059:
    rx333_cstack = rx333_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx333_pos, $P11, rx333_curclass, "$!pos"
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!pos", rx333_pos
    $P11 = rx333_cur."ws"()
    repr_get_attr_int $I11, $P11, rx333_curclass, "$!pos"
    lt $I11, 0, rx333_fail1036
    repr_get_attr_int rx333_pos, $P11, rx333_curclass, "$!pos"
    nqp_rxmark rx333_bstack, rxcap347_fail1062, rx333_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt348_01064
    nqp_push_label $P11, alt348_11065
    nqp_rxmark rx333_bstack, alt348_end1063, -1, 0
    rx333_cur."!alt"(rx333_pos, "alt_nfa__14_1360426905.153", $P11)
    goto rx333_fail1036
  alt348_01064:
    add $I11, rx333_pos, 5
    gt $I11, rx333_eos, rx333_fail1036
    substr $S10, rx333_tgt, rx333_pos, 5
    ne $S10, ucs4:"while", rx333_fail1036
    add rx333_pos, 5
    goto alt348_end1063
  alt348_11065:
    add $I11, rx333_pos, 5
    gt $I11, rx333_eos, rx333_fail1036
    substr $S10, rx333_tgt, rx333_pos, 5
    ne $S10, ucs4:"until", rx333_fail1036
    add rx333_pos, 5
    goto alt348_end1063
  alt348_end1063:
    nqp_rxcommit rx333_bstack, alt348_end1063
    nqp_rxpeek $I19, rx333_bstack, rxcap347_fail1062
    inc $I19
    set $I11, rx333_bstack[$I19]
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!pos", rx333_pos
    $P11 = rx333_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx333_pos)
    rx333_cstack = rx333_cur."!cursor_capture"($P11, "wu")
    goto rxcap347_done1061
  rxcap347_fail1062:
    goto rx333_fail1036
  rxcap347_done1061:
    ge rx333_pos, rx333_eos, rx333_fail1036
    is_cclass $I11, .CCLASS_WHITESPACE, rx333_tgt, rx333_pos
    unless $I11, rx333_fail1036
    add rx333_pos, 1
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!pos", rx333_pos
    $P11 = rx333_cur."ws"()
    repr_get_attr_int $I11, $P11, rx333_curclass, "$!pos"
    lt $I11, 0, rx333_fail1036
    repr_get_attr_int rx333_pos, $P11, rx333_curclass, "$!pos"
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!pos", rx333_pos
    $P11 = rx333_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx333_curclass, "$!pos"
    lt $I11, 0, rx333_fail1036
    nqp_rxmark rx333_bstack, rxsubrule350_pass1067, -1, 0
  rxsubrule350_pass1067:
    rx333_cstack = rx333_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx333_pos, $P11, rx333_curclass, "$!pos"
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!pos", rx333_pos
    $P11 = rx333_cur."ws"()
    repr_get_attr_int $I11, $P11, rx333_curclass, "$!pos"
    lt $I11, 0, rx333_fail1036
    repr_get_attr_int rx333_pos, $P11, rx333_curclass, "$!pos"
    goto alt337_end1046
  alt337_end1046:
    nqp_rxcommit rx333_bstack, alt337_end1046
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!pos", rx333_pos
    $P11 = rx333_cur."ws"()
    repr_get_attr_int $I11, $P11, rx333_curclass, "$!pos"
    lt $I11, 0, rx333_fail1036
    repr_get_attr_int rx333_pos, $P11, rx333_curclass, "$!pos"
    rx333_cur."!cursor_pass"(rx333_pos, "statement_control:sym<repeat>", 'backtrack'=>1)
    .return (rx333_cur)
  rx333_restart1035:
    repr_get_attr_obj rx333_cstack, rx333_cur, rx333_curclass, "$!cstack"
  rx333_fail1036:
    unless rx333_bstack, rx333_done1034
    pop $I19, rx333_bstack
    if_null rx333_cstack, rx333_cstack_done1039
    unless rx333_cstack, rx333_cstack_done1039
    dec $I19
    set $P11, rx333_cstack[$I19]
  rx333_cstack_done1039:
    pop rx333_rep, rx333_bstack
    pop rx333_pos, rx333_bstack
    pop $I19, rx333_bstack
    lt rx333_pos, -1, rx333_done1034
    lt rx333_pos, 0, rx333_fail1036
    eq $I19, 0, rx333_fail1036
    nqp_islist $I20, rx333_cstack
    unless $I20, rx333_jump1037
    elements $I18, rx333_bstack
    le $I18, 0, rx333_cut1038
    dec $I18
    set $I18, rx333_bstack[$I18]
  rx333_cut1038:
    assign rx333_cstack, $I18
  rx333_jump1037:
    jump $I19
  rx333_done1034:
    rx333_cur."!cursor_fail"()
    .return (rx333_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_69_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 880
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx353_tgt
    .local int rx353_pos
    .local int rx353_off
    .local int rx353_eos
    .local int rx353_rep
    .local pmc rx353_cur
    .local pmc rx353_curclass
    .local pmc rx353_bstack
    .local pmc rx353_cstack
    (rx353_cur, rx353_tgt, rx353_pos, rx353_curclass, rx353_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx353_cur
    length rx353_eos, rx353_tgt
    eq $I19, 1, rx353_restart1072
    gt rx353_pos, rx353_eos, rx353_fail1073
    repr_get_attr_int $I11, self, rx353_curclass, "$!from"
    ne $I11, -1, rxscan354_done1079
    goto rxscan354_scan1078
  rxscan354_loop1077:
    inc rx353_pos
    gt rx353_pos, rx353_eos, rx353_fail1073
    repr_bind_attr_int rx353_cur, rx353_curclass, "$!from", rx353_pos
  rxscan354_scan1078:
    nqp_rxmark rx353_bstack, rxscan354_loop1077, rx353_pos, 0
  rxscan354_done1079:
    repr_bind_attr_int rx353_cur, rx353_curclass, "$!pos", rx353_pos
    store_lex unicode:"$\x{a2}", rx353_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx353_bstack, rxcap355_fail1081, rx353_pos, 0
    add $I11, rx353_pos, 3
    gt $I11, rx353_eos, rx353_fail1073
    substr $S10, rx353_tgt, rx353_pos, 3
    ne $S10, ucs4:"for", rx353_fail1073
    add rx353_pos, 3
    nqp_rxpeek $I19, rx353_bstack, rxcap355_fail1081
    inc $I19
    set $I11, rx353_bstack[$I19]
    repr_bind_attr_int rx353_cur, rx353_curclass, "$!pos", rx353_pos
    $P11 = rx353_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx353_pos)
    rx353_cstack = rx353_cur."!cursor_capture"($P11, "sym")
    goto rxcap355_done1080
  rxcap355_fail1081:
    goto rx353_fail1073
  rxcap355_done1080:
    ge rx353_pos, rx353_eos, rx353_fail1073
    is_cclass $I11, .CCLASS_WHITESPACE, rx353_tgt, rx353_pos
    unless $I11, rx353_fail1073
    add rx353_pos, 1
    repr_bind_attr_int rx353_cur, rx353_curclass, "$!pos", rx353_pos
    $P11 = rx353_cur."ws"()
    repr_get_attr_int $I11, $P11, rx353_curclass, "$!pos"
    lt $I11, 0, rx353_fail1073
    repr_get_attr_int rx353_pos, $P11, rx353_curclass, "$!pos"
    repr_bind_attr_int rx353_cur, rx353_curclass, "$!pos", rx353_pos
    $P11 = rx353_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx353_curclass, "$!pos"
    lt $I11, 0, rx353_fail1073
    nqp_rxmark rx353_bstack, rxsubrule357_pass1083, -1, 0
  rxsubrule357_pass1083:
    rx353_cstack = rx353_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx353_pos, $P11, rx353_curclass, "$!pos"
    repr_bind_attr_int rx353_cur, rx353_curclass, "$!pos", rx353_pos
    $P11 = rx353_cur."ws"()
    repr_get_attr_int $I11, $P11, rx353_curclass, "$!pos"
    lt $I11, 0, rx353_fail1073
    repr_get_attr_int rx353_pos, $P11, rx353_curclass, "$!pos"
    rx353_cur."!cursor_pass"(rx353_pos, "statement_control:sym<for>", 'backtrack'=>1)
    .return (rx353_cur)
  rx353_restart1072:
    repr_get_attr_obj rx353_cstack, rx353_cur, rx353_curclass, "$!cstack"
  rx353_fail1073:
    unless rx353_bstack, rx353_done1071
    pop $I19, rx353_bstack
    if_null rx353_cstack, rx353_cstack_done1076
    unless rx353_cstack, rx353_cstack_done1076
    dec $I19
    set $P11, rx353_cstack[$I19]
  rx353_cstack_done1076:
    pop rx353_rep, rx353_bstack
    pop rx353_pos, rx353_bstack
    pop $I19, rx353_bstack
    lt rx353_pos, -1, rx353_done1071
    lt rx353_pos, 0, rx353_fail1073
    eq $I19, 0, rx353_fail1073
    nqp_islist $I20, rx353_cstack
    unless $I20, rx353_jump1074
    elements $I18, rx353_bstack
    le $I18, 0, rx353_cut1075
    dec $I18
    set $I18, rx353_bstack[$I18]
  rx353_cut1075:
    assign rx353_cstack, $I18
  rx353_jump1074:
    jump $I19
  rx353_done1071:
    rx353_cur."!cursor_fail"()
    .return (rx353_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_70_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 886
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx359_tgt
    .local int rx359_pos
    .local int rx359_off
    .local int rx359_eos
    .local int rx359_rep
    .local pmc rx359_cur
    .local pmc rx359_curclass
    .local pmc rx359_bstack
    .local pmc rx359_cstack
    (rx359_cur, rx359_tgt, rx359_pos, rx359_curclass, rx359_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx359_cur
    length rx359_eos, rx359_tgt
    eq $I19, 1, rx359_restart1087
    gt rx359_pos, rx359_eos, rx359_fail1088
    repr_get_attr_int $I11, self, rx359_curclass, "$!from"
    ne $I11, -1, rxscan360_done1094
    goto rxscan360_scan1093
  rxscan360_loop1092:
    inc rx359_pos
    gt rx359_pos, rx359_eos, rx359_fail1088
    repr_bind_attr_int rx359_cur, rx359_curclass, "$!from", rx359_pos
  rxscan360_scan1093:
    nqp_rxmark rx359_bstack, rxscan360_loop1092, rx359_pos, 0
  rxscan360_done1094:
    nqp_rxmark rx359_bstack, rxcap361_fail1096, rx359_pos, 0
    add $I11, rx359_pos, 5
    gt $I11, rx359_eos, rx359_fail1088
    substr $S10, rx359_tgt, rx359_pos, 5
    ne $S10, ucs4:"CATCH", rx359_fail1088
    add rx359_pos, 5
    nqp_rxpeek $I19, rx359_bstack, rxcap361_fail1096
    inc $I19
    set $I11, rx359_bstack[$I19]
    repr_bind_attr_int rx359_cur, rx359_curclass, "$!pos", rx359_pos
    $P11 = rx359_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx359_pos)
    rx359_cstack = rx359_cur."!cursor_capture"($P11, "sym")
    goto rxcap361_done1095
  rxcap361_fail1096:
    goto rx359_fail1088
  rxcap361_done1095:
    ge rx359_pos, rx359_eos, rx359_fail1088
    is_cclass $I11, .CCLASS_WHITESPACE, rx359_tgt, rx359_pos
    unless $I11, rx359_fail1088
    add rx359_pos, 1
    repr_bind_attr_int rx359_cur, rx359_curclass, "$!pos", rx359_pos
    $P11 = rx359_cur."ws"()
    repr_get_attr_int $I11, $P11, rx359_curclass, "$!pos"
    lt $I11, 0, rx359_fail1088
    repr_get_attr_int rx359_pos, $P11, rx359_curclass, "$!pos"
    repr_bind_attr_int rx359_cur, rx359_curclass, "$!pos", rx359_pos
    $P11 = rx359_cur."block"()
    repr_get_attr_int $I11, $P11, rx359_curclass, "$!pos"
    lt $I11, 0, rx359_fail1088
    nqp_rxmark rx359_bstack, rxsubrule363_pass1098, -1, 0
  rxsubrule363_pass1098:
    rx359_cstack = rx359_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx359_pos, $P11, rx359_curclass, "$!pos"
    repr_bind_attr_int rx359_cur, rx359_curclass, "$!pos", rx359_pos
    $P11 = rx359_cur."ws"()
    repr_get_attr_int $I11, $P11, rx359_curclass, "$!pos"
    lt $I11, 0, rx359_fail1088
    repr_get_attr_int rx359_pos, $P11, rx359_curclass, "$!pos"
    rx359_cur."!cursor_pass"(rx359_pos, "statement_control:sym<CATCH>", 'backtrack'=>1)
    .return (rx359_cur)
  rx359_restart1087:
    repr_get_attr_obj rx359_cstack, rx359_cur, rx359_curclass, "$!cstack"
  rx359_fail1088:
    unless rx359_bstack, rx359_done1086
    pop $I19, rx359_bstack
    if_null rx359_cstack, rx359_cstack_done1091
    unless rx359_cstack, rx359_cstack_done1091
    dec $I19
    set $P11, rx359_cstack[$I19]
  rx359_cstack_done1091:
    pop rx359_rep, rx359_bstack
    pop rx359_pos, rx359_bstack
    pop $I19, rx359_bstack
    lt rx359_pos, -1, rx359_done1086
    lt rx359_pos, 0, rx359_fail1088
    eq $I19, 0, rx359_fail1088
    nqp_islist $I20, rx359_cstack
    unless $I20, rx359_jump1089
    elements $I18, rx359_bstack
    le $I18, 0, rx359_cut1090
    dec $I18
    set $I18, rx359_bstack[$I18]
  rx359_cut1090:
    assign rx359_cstack, $I18
  rx359_jump1089:
    jump $I19
  rx359_done1086:
    rx359_cur."!cursor_fail"()
    .return (rx359_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_71_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 891
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx365_tgt
    .local int rx365_pos
    .local int rx365_off
    .local int rx365_eos
    .local int rx365_rep
    .local pmc rx365_cur
    .local pmc rx365_curclass
    .local pmc rx365_bstack
    .local pmc rx365_cstack
    (rx365_cur, rx365_tgt, rx365_pos, rx365_curclass, rx365_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx365_cur
    length rx365_eos, rx365_tgt
    eq $I19, 1, rx365_restart1102
    gt rx365_pos, rx365_eos, rx365_fail1103
    repr_get_attr_int $I11, self, rx365_curclass, "$!from"
    ne $I11, -1, rxscan366_done1109
    goto rxscan366_scan1108
  rxscan366_loop1107:
    inc rx365_pos
    gt rx365_pos, rx365_eos, rx365_fail1103
    repr_bind_attr_int rx365_cur, rx365_curclass, "$!from", rx365_pos
  rxscan366_scan1108:
    nqp_rxmark rx365_bstack, rxscan366_loop1107, rx365_pos, 0
  rxscan366_done1109:
    nqp_rxmark rx365_bstack, rxcap367_fail1111, rx365_pos, 0
    add $I11, rx365_pos, 7
    gt $I11, rx365_eos, rx365_fail1103
    substr $S10, rx365_tgt, rx365_pos, 7
    ne $S10, ucs4:"CONTROL", rx365_fail1103
    add rx365_pos, 7
    nqp_rxpeek $I19, rx365_bstack, rxcap367_fail1111
    inc $I19
    set $I11, rx365_bstack[$I19]
    repr_bind_attr_int rx365_cur, rx365_curclass, "$!pos", rx365_pos
    $P11 = rx365_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx365_pos)
    rx365_cstack = rx365_cur."!cursor_capture"($P11, "sym")
    goto rxcap367_done1110
  rxcap367_fail1111:
    goto rx365_fail1103
  rxcap367_done1110:
    ge rx365_pos, rx365_eos, rx365_fail1103
    is_cclass $I11, .CCLASS_WHITESPACE, rx365_tgt, rx365_pos
    unless $I11, rx365_fail1103
    add rx365_pos, 1
    repr_bind_attr_int rx365_cur, rx365_curclass, "$!pos", rx365_pos
    $P11 = rx365_cur."ws"()
    repr_get_attr_int $I11, $P11, rx365_curclass, "$!pos"
    lt $I11, 0, rx365_fail1103
    repr_get_attr_int rx365_pos, $P11, rx365_curclass, "$!pos"
    repr_bind_attr_int rx365_cur, rx365_curclass, "$!pos", rx365_pos
    $P11 = rx365_cur."block"()
    repr_get_attr_int $I11, $P11, rx365_curclass, "$!pos"
    lt $I11, 0, rx365_fail1103
    nqp_rxmark rx365_bstack, rxsubrule369_pass1113, -1, 0
  rxsubrule369_pass1113:
    rx365_cstack = rx365_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx365_pos, $P11, rx365_curclass, "$!pos"
    repr_bind_attr_int rx365_cur, rx365_curclass, "$!pos", rx365_pos
    $P11 = rx365_cur."ws"()
    repr_get_attr_int $I11, $P11, rx365_curclass, "$!pos"
    lt $I11, 0, rx365_fail1103
    repr_get_attr_int rx365_pos, $P11, rx365_curclass, "$!pos"
    rx365_cur."!cursor_pass"(rx365_pos, "statement_control:sym<CONTROL>", 'backtrack'=>1)
    .return (rx365_cur)
  rx365_restart1102:
    repr_get_attr_obj rx365_cstack, rx365_cur, rx365_curclass, "$!cstack"
  rx365_fail1103:
    unless rx365_bstack, rx365_done1101
    pop $I19, rx365_bstack
    if_null rx365_cstack, rx365_cstack_done1106
    unless rx365_cstack, rx365_cstack_done1106
    dec $I19
    set $P11, rx365_cstack[$I19]
  rx365_cstack_done1106:
    pop rx365_rep, rx365_bstack
    pop rx365_pos, rx365_bstack
    pop $I19, rx365_bstack
    lt rx365_pos, -1, rx365_done1101
    lt rx365_pos, 0, rx365_fail1103
    eq $I19, 0, rx365_fail1103
    nqp_islist $I20, rx365_cstack
    unless $I20, rx365_jump1104
    elements $I18, rx365_bstack
    le $I18, 0, rx365_cut1105
    dec $I18
    set $I18, rx365_bstack[$I18]
  rx365_cut1105:
    assign rx365_cstack, $I18
  rx365_jump1104:
    jump $I19
  rx365_done1101:
    rx365_cur."!cursor_fail"()
    .return (rx365_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix" :subid("cuid_72_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 896
    .param pmc self 
    $P5001 = self."!protoregex"("statement_prefix")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_73_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 897
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx371_tgt
    .local int rx371_pos
    .local int rx371_off
    .local int rx371_eos
    .local int rx371_rep
    .local pmc rx371_cur
    .local pmc rx371_curclass
    .local pmc rx371_bstack
    .local pmc rx371_cstack
    (rx371_cur, rx371_tgt, rx371_pos, rx371_curclass, rx371_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx371_cur
    length rx371_eos, rx371_tgt
    eq $I19, 1, rx371_restart1117
    gt rx371_pos, rx371_eos, rx371_fail1118
    repr_get_attr_int $I11, self, rx371_curclass, "$!from"
    ne $I11, -1, rxscan372_done1124
    goto rxscan372_scan1123
  rxscan372_loop1122:
    inc rx371_pos
    gt rx371_pos, rx371_eos, rx371_fail1118
    repr_bind_attr_int rx371_cur, rx371_curclass, "$!from", rx371_pos
  rxscan372_scan1123:
    nqp_rxmark rx371_bstack, rxscan372_loop1122, rx371_pos, 0
  rxscan372_done1124:
    nqp_rxmark rx371_bstack, rxcap373_fail1126, rx371_pos, 0
    add $I11, rx371_pos, 5
    gt $I11, rx371_eos, rx371_fail1118
    substr $S10, rx371_tgt, rx371_pos, 5
    ne $S10, ucs4:"BEGIN", rx371_fail1118
    add rx371_pos, 5
    nqp_rxpeek $I19, rx371_bstack, rxcap373_fail1126
    inc $I19
    set $I11, rx371_bstack[$I19]
    repr_bind_attr_int rx371_cur, rx371_curclass, "$!pos", rx371_pos
    $P11 = rx371_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx371_pos)
    rx371_cstack = rx371_cur."!cursor_capture"($P11, "sym")
    goto rxcap373_done1125
  rxcap373_fail1126:
    goto rx371_fail1118
  rxcap373_done1125:
    repr_bind_attr_int rx371_cur, rx371_curclass, "$!pos", rx371_pos
    $P11 = rx371_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx371_curclass, "$!pos"
    lt $I11, 0, rx371_fail1118
    nqp_rxmark rx371_bstack, rxsubrule374_pass1127, -1, 0
  rxsubrule374_pass1127:
    rx371_cstack = rx371_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx371_pos, $P11, rx371_curclass, "$!pos"
    rx371_cur."!cursor_pass"(rx371_pos, "statement_prefix:sym<BEGIN>", 'backtrack'=>1)
    .return (rx371_cur)
  rx371_restart1117:
    repr_get_attr_obj rx371_cstack, rx371_cur, rx371_curclass, "$!cstack"
  rx371_fail1118:
    unless rx371_bstack, rx371_done1116
    pop $I19, rx371_bstack
    if_null rx371_cstack, rx371_cstack_done1121
    unless rx371_cstack, rx371_cstack_done1121
    dec $I19
    set $P11, rx371_cstack[$I19]
  rx371_cstack_done1121:
    pop rx371_rep, rx371_bstack
    pop rx371_pos, rx371_bstack
    pop $I19, rx371_bstack
    lt rx371_pos, -1, rx371_done1116
    lt rx371_pos, 0, rx371_fail1118
    eq $I19, 0, rx371_fail1118
    nqp_islist $I20, rx371_cstack
    unless $I20, rx371_jump1119
    elements $I18, rx371_bstack
    le $I18, 0, rx371_cut1120
    dec $I18
    set $I18, rx371_bstack[$I18]
  rx371_cut1120:
    assign rx371_cstack, $I18
  rx371_jump1119:
    jump $I19
  rx371_done1116:
    rx371_cur."!cursor_fail"()
    .return (rx371_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_74_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 898
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx375_tgt
    .local int rx375_pos
    .local int rx375_off
    .local int rx375_eos
    .local int rx375_rep
    .local pmc rx375_cur
    .local pmc rx375_curclass
    .local pmc rx375_bstack
    .local pmc rx375_cstack
    (rx375_cur, rx375_tgt, rx375_pos, rx375_curclass, rx375_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx375_cur
    length rx375_eos, rx375_tgt
    eq $I19, 1, rx375_restart1130
    gt rx375_pos, rx375_eos, rx375_fail1131
    repr_get_attr_int $I11, self, rx375_curclass, "$!from"
    ne $I11, -1, rxscan376_done1137
    goto rxscan376_scan1136
  rxscan376_loop1135:
    inc rx375_pos
    gt rx375_pos, rx375_eos, rx375_fail1131
    repr_bind_attr_int rx375_cur, rx375_curclass, "$!from", rx375_pos
  rxscan376_scan1136:
    nqp_rxmark rx375_bstack, rxscan376_loop1135, rx375_pos, 0
  rxscan376_done1137:
    nqp_rxmark rx375_bstack, rxcap377_fail1139, rx375_pos, 0
    add $I11, rx375_pos, 4
    gt $I11, rx375_eos, rx375_fail1131
    substr $S10, rx375_tgt, rx375_pos, 4
    ne $S10, ucs4:"INIT", rx375_fail1131
    add rx375_pos, 4
    nqp_rxpeek $I19, rx375_bstack, rxcap377_fail1139
    inc $I19
    set $I11, rx375_bstack[$I19]
    repr_bind_attr_int rx375_cur, rx375_curclass, "$!pos", rx375_pos
    $P11 = rx375_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx375_pos)
    rx375_cstack = rx375_cur."!cursor_capture"($P11, "sym")
    goto rxcap377_done1138
  rxcap377_fail1139:
    goto rx375_fail1131
  rxcap377_done1138:
    repr_bind_attr_int rx375_cur, rx375_curclass, "$!pos", rx375_pos
    $P11 = rx375_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx375_curclass, "$!pos"
    lt $I11, 0, rx375_fail1131
    nqp_rxmark rx375_bstack, rxsubrule378_pass1140, -1, 0
  rxsubrule378_pass1140:
    rx375_cstack = rx375_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx375_pos, $P11, rx375_curclass, "$!pos"
    rx375_cur."!cursor_pass"(rx375_pos, "statement_prefix:sym<INIT>", 'backtrack'=>1)
    .return (rx375_cur)
  rx375_restart1130:
    repr_get_attr_obj rx375_cstack, rx375_cur, rx375_curclass, "$!cstack"
  rx375_fail1131:
    unless rx375_bstack, rx375_done1129
    pop $I19, rx375_bstack
    if_null rx375_cstack, rx375_cstack_done1134
    unless rx375_cstack, rx375_cstack_done1134
    dec $I19
    set $P11, rx375_cstack[$I19]
  rx375_cstack_done1134:
    pop rx375_rep, rx375_bstack
    pop rx375_pos, rx375_bstack
    pop $I19, rx375_bstack
    lt rx375_pos, -1, rx375_done1129
    lt rx375_pos, 0, rx375_fail1131
    eq $I19, 0, rx375_fail1131
    nqp_islist $I20, rx375_cstack
    unless $I20, rx375_jump1132
    elements $I18, rx375_bstack
    le $I18, 0, rx375_cut1133
    dec $I18
    set $I18, rx375_bstack[$I18]
  rx375_cut1133:
    assign rx375_cstack, $I18
  rx375_jump1132:
    jump $I19
  rx375_done1129:
    rx375_cur."!cursor_fail"()
    .return (rx375_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_75_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 900
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx379_tgt
    .local int rx379_pos
    .local int rx379_off
    .local int rx379_eos
    .local int rx379_rep
    .local pmc rx379_cur
    .local pmc rx379_curclass
    .local pmc rx379_bstack
    .local pmc rx379_cstack
    (rx379_cur, rx379_tgt, rx379_pos, rx379_curclass, rx379_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx379_cur
    length rx379_eos, rx379_tgt
    eq $I19, 1, rx379_restart1143
    gt rx379_pos, rx379_eos, rx379_fail1144
    repr_get_attr_int $I11, self, rx379_curclass, "$!from"
    ne $I11, -1, rxscan380_done1150
    goto rxscan380_scan1149
  rxscan380_loop1148:
    inc rx379_pos
    gt rx379_pos, rx379_eos, rx379_fail1144
    repr_bind_attr_int rx379_cur, rx379_curclass, "$!from", rx379_pos
  rxscan380_scan1149:
    nqp_rxmark rx379_bstack, rxscan380_loop1148, rx379_pos, 0
  rxscan380_done1150:
    nqp_rxmark rx379_bstack, rxcap381_fail1152, rx379_pos, 0
    add $I11, rx379_pos, 3
    gt $I11, rx379_eos, rx379_fail1144
    substr $S10, rx379_tgt, rx379_pos, 3
    ne $S10, ucs4:"try", rx379_fail1144
    add rx379_pos, 3
    nqp_rxpeek $I19, rx379_bstack, rxcap381_fail1152
    inc $I19
    set $I11, rx379_bstack[$I19]
    repr_bind_attr_int rx379_cur, rx379_curclass, "$!pos", rx379_pos
    $P11 = rx379_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx379_pos)
    rx379_cstack = rx379_cur."!cursor_capture"($P11, "sym")
    goto rxcap381_done1151
  rxcap381_fail1152:
    goto rx379_fail1144
  rxcap381_done1151:
    repr_bind_attr_int rx379_cur, rx379_curclass, "$!pos", rx379_pos
    $P11 = rx379_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx379_curclass, "$!pos"
    lt $I11, 0, rx379_fail1144
    nqp_rxmark rx379_bstack, rxsubrule382_pass1153, -1, 0
  rxsubrule382_pass1153:
    rx379_cstack = rx379_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx379_pos, $P11, rx379_curclass, "$!pos"
    rx379_cur."!cursor_pass"(rx379_pos, "statement_prefix:sym<try>", 'backtrack'=>1)
    .return (rx379_cur)
  rx379_restart1143:
    repr_get_attr_obj rx379_cstack, rx379_cur, rx379_curclass, "$!cstack"
  rx379_fail1144:
    unless rx379_bstack, rx379_done1142
    pop $I19, rx379_bstack
    if_null rx379_cstack, rx379_cstack_done1147
    unless rx379_cstack, rx379_cstack_done1147
    dec $I19
    set $P11, rx379_cstack[$I19]
  rx379_cstack_done1147:
    pop rx379_rep, rx379_bstack
    pop rx379_pos, rx379_bstack
    pop $I19, rx379_bstack
    lt rx379_pos, -1, rx379_done1142
    lt rx379_pos, 0, rx379_fail1144
    eq $I19, 0, rx379_fail1144
    nqp_islist $I20, rx379_cstack
    unless $I20, rx379_jump1145
    elements $I18, rx379_bstack
    le $I18, 0, rx379_cut1146
    dec $I18
    set $I18, rx379_bstack[$I18]
  rx379_cut1146:
    assign rx379_cstack, $I18
  rx379_jump1145:
    jump $I19
  rx379_done1142:
    rx379_cur."!cursor_fail"()
    .return (rx379_cur) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_76_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 905
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx383_tgt
    .local int rx383_pos
    .local int rx383_off
    .local int rx383_eos
    .local int rx383_rep
    .local pmc rx383_cur
    .local pmc rx383_curclass
    .local pmc rx383_bstack
    .local pmc rx383_cstack
    (rx383_cur, rx383_tgt, rx383_pos, rx383_curclass, rx383_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx383_cur
    length rx383_eos, rx383_tgt
    eq $I19, 1, rx383_restart1156
    gt rx383_pos, rx383_eos, rx383_fail1157
    repr_get_attr_int $I11, self, rx383_curclass, "$!from"
    ne $I11, -1, rxscan384_done1163
    goto rxscan384_scan1162
  rxscan384_loop1161:
    inc rx383_pos
    gt rx383_pos, rx383_eos, rx383_fail1157
    repr_bind_attr_int rx383_cur, rx383_curclass, "$!from", rx383_pos
  rxscan384_scan1162:
    nqp_rxmark rx383_bstack, rxscan384_loop1161, rx383_pos, 0
  rxscan384_done1163:
    ge rx383_pos, rx383_eos, rx383_fail1157
    is_cclass $I11, .CCLASS_WHITESPACE, rx383_tgt, rx383_pos
    unless $I11, rx383_fail1157
    add rx383_pos, 1
    repr_bind_attr_int rx383_cur, rx383_curclass, "$!pos", rx383_pos
    $P11 = rx383_cur."ws"()
    repr_get_attr_int $I11, $P11, rx383_curclass, "$!pos"
    lt $I11, 0, rx383_fail1157
    repr_get_attr_int rx383_pos, $P11, rx383_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt386_01166
    nqp_push_label $P11, alt386_11168
    nqp_rxmark rx383_bstack, alt386_end1165, -1, 0
    rx383_cur."!alt"(rx383_pos, "alt_nfa__16_1360426905.2", $P11)
    goto rx383_fail1157
  alt386_01166:
    ge rx383_pos, rx383_eos, rx383_fail1157
    substr $S11, rx383_tgt, rx383_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx383_fail1157
    repr_bind_attr_int rx383_cur, rx383_curclass, "$!pos", rx383_pos
    $P11 = rx383_cur."block"()
    repr_get_attr_int $I11, $P11, rx383_curclass, "$!pos"
    lt $I11, 0, rx383_fail1157
    nqp_rxmark rx383_bstack, rxsubrule387_pass1167, -1, 0
  rxsubrule387_pass1167:
    rx383_cstack = rx383_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx383_pos, $P11, rx383_curclass, "$!pos"
    goto alt386_end1165
  alt386_11168:
    repr_bind_attr_int rx383_cur, rx383_curclass, "$!pos", rx383_pos
    $P11 = rx383_cur."statement"()
    repr_get_attr_int $I11, $P11, rx383_curclass, "$!pos"
    lt $I11, 0, rx383_fail1157
    nqp_rxmark rx383_bstack, rxsubrule388_pass1169, -1, 0
  rxsubrule388_pass1169:
    rx383_cstack = rx383_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx383_pos, $P11, rx383_curclass, "$!pos"
    goto alt386_end1165
  alt386_end1165:
    nqp_rxcommit rx383_bstack, alt386_end1165
    rx383_cur."!cursor_pass"(rx383_pos, "blorst", 'backtrack'=>1)
    .return (rx383_cur)
  rx383_restart1156:
    repr_get_attr_obj rx383_cstack, rx383_cur, rx383_curclass, "$!cstack"
  rx383_fail1157:
    unless rx383_bstack, rx383_done1155
    pop $I19, rx383_bstack
    if_null rx383_cstack, rx383_cstack_done1160
    unless rx383_cstack, rx383_cstack_done1160
    dec $I19
    set $P11, rx383_cstack[$I19]
  rx383_cstack_done1160:
    pop rx383_rep, rx383_bstack
    pop rx383_pos, rx383_bstack
    pop $I19, rx383_bstack
    lt rx383_pos, -1, rx383_done1155
    lt rx383_pos, 0, rx383_fail1157
    eq $I19, 0, rx383_fail1157
    nqp_islist $I20, rx383_cstack
    unless $I20, rx383_jump1158
    elements $I18, rx383_bstack
    le $I18, 0, rx383_cut1159
    dec $I18
    set $I18, rx383_bstack[$I18]
  rx383_cut1159:
    assign rx383_cstack, $I18
  rx383_jump1158:
    jump $I19
  rx383_done1155:
    rx383_cur."!cursor_fail"()
    .return (rx383_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond" :subid("cuid_77_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 911
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_cond")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_78_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 913
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx389_tgt
    .local int rx389_pos
    .local int rx389_off
    .local int rx389_eos
    .local int rx389_rep
    .local pmc rx389_cur
    .local pmc rx389_curclass
    .local pmc rx389_bstack
    .local pmc rx389_cstack
    (rx389_cur, rx389_tgt, rx389_pos, rx389_curclass, rx389_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx389_cur
    length rx389_eos, rx389_tgt
    eq $I19, 1, rx389_restart1172
    gt rx389_pos, rx389_eos, rx389_fail1173
    repr_get_attr_int $I11, self, rx389_curclass, "$!from"
    ne $I11, -1, rxscan390_done1179
    goto rxscan390_scan1178
  rxscan390_loop1177:
    inc rx389_pos
    gt rx389_pos, rx389_eos, rx389_fail1173
    repr_bind_attr_int rx389_cur, rx389_curclass, "$!from", rx389_pos
  rxscan390_scan1178:
    nqp_rxmark rx389_bstack, rxscan390_loop1177, rx389_pos, 0
  rxscan390_done1179:
    nqp_rxmark rx389_bstack, rxcap391_fail1181, rx389_pos, 0
    add $I11, rx389_pos, 2
    gt $I11, rx389_eos, rx389_fail1173
    substr $S10, rx389_tgt, rx389_pos, 2
    ne $S10, ucs4:"if", rx389_fail1173
    add rx389_pos, 2
    nqp_rxpeek $I19, rx389_bstack, rxcap391_fail1181
    inc $I19
    set $I11, rx389_bstack[$I19]
    repr_bind_attr_int rx389_cur, rx389_curclass, "$!pos", rx389_pos
    $P11 = rx389_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx389_pos)
    rx389_cstack = rx389_cur."!cursor_capture"($P11, "sym")
    goto rxcap391_done1180
  rxcap391_fail1181:
    goto rx389_fail1173
  rxcap391_done1180:
    repr_bind_attr_int rx389_cur, rx389_curclass, "$!pos", rx389_pos
    $P11 = rx389_cur."ws"()
    repr_get_attr_int $I11, $P11, rx389_curclass, "$!pos"
    lt $I11, 0, rx389_fail1173
    repr_get_attr_int rx389_pos, $P11, rx389_curclass, "$!pos"
    repr_bind_attr_int rx389_cur, rx389_curclass, "$!pos", rx389_pos
    $P11 = rx389_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx389_curclass, "$!pos"
    lt $I11, 0, rx389_fail1173
    nqp_rxmark rx389_bstack, rxsubrule393_pass1183, -1, 0
  rxsubrule393_pass1183:
    rx389_cstack = rx389_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx389_pos, $P11, rx389_curclass, "$!pos"
    repr_bind_attr_int rx389_cur, rx389_curclass, "$!pos", rx389_pos
    $P11 = rx389_cur."ws"()
    repr_get_attr_int $I11, $P11, rx389_curclass, "$!pos"
    lt $I11, 0, rx389_fail1173
    repr_get_attr_int rx389_pos, $P11, rx389_curclass, "$!pos"
    rx389_cur."!cursor_pass"(rx389_pos, "statement_mod_cond:sym<if>", 'backtrack'=>1)
    .return (rx389_cur)
  rx389_restart1172:
    repr_get_attr_obj rx389_cstack, rx389_cur, rx389_curclass, "$!cstack"
  rx389_fail1173:
    unless rx389_bstack, rx389_done1171
    pop $I19, rx389_bstack
    if_null rx389_cstack, rx389_cstack_done1176
    unless rx389_cstack, rx389_cstack_done1176
    dec $I19
    set $P11, rx389_cstack[$I19]
  rx389_cstack_done1176:
    pop rx389_rep, rx389_bstack
    pop rx389_pos, rx389_bstack
    pop $I19, rx389_bstack
    lt rx389_pos, -1, rx389_done1171
    lt rx389_pos, 0, rx389_fail1173
    eq $I19, 0, rx389_fail1173
    nqp_islist $I20, rx389_cstack
    unless $I20, rx389_jump1174
    elements $I18, rx389_bstack
    le $I18, 0, rx389_cut1175
    dec $I18
    set $I18, rx389_bstack[$I18]
  rx389_cut1175:
    assign rx389_cstack, $I18
  rx389_jump1174:
    jump $I19
  rx389_done1171:
    rx389_cur."!cursor_fail"()
    .return (rx389_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_79_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 914
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx395_tgt
    .local int rx395_pos
    .local int rx395_off
    .local int rx395_eos
    .local int rx395_rep
    .local pmc rx395_cur
    .local pmc rx395_curclass
    .local pmc rx395_bstack
    .local pmc rx395_cstack
    (rx395_cur, rx395_tgt, rx395_pos, rx395_curclass, rx395_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx395_cur
    length rx395_eos, rx395_tgt
    eq $I19, 1, rx395_restart1187
    gt rx395_pos, rx395_eos, rx395_fail1188
    repr_get_attr_int $I11, self, rx395_curclass, "$!from"
    ne $I11, -1, rxscan396_done1194
    goto rxscan396_scan1193
  rxscan396_loop1192:
    inc rx395_pos
    gt rx395_pos, rx395_eos, rx395_fail1188
    repr_bind_attr_int rx395_cur, rx395_curclass, "$!from", rx395_pos
  rxscan396_scan1193:
    nqp_rxmark rx395_bstack, rxscan396_loop1192, rx395_pos, 0
  rxscan396_done1194:
    nqp_rxmark rx395_bstack, rxcap397_fail1196, rx395_pos, 0
    add $I11, rx395_pos, 6
    gt $I11, rx395_eos, rx395_fail1188
    substr $S10, rx395_tgt, rx395_pos, 6
    ne $S10, ucs4:"unless", rx395_fail1188
    add rx395_pos, 6
    nqp_rxpeek $I19, rx395_bstack, rxcap397_fail1196
    inc $I19
    set $I11, rx395_bstack[$I19]
    repr_bind_attr_int rx395_cur, rx395_curclass, "$!pos", rx395_pos
    $P11 = rx395_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx395_pos)
    rx395_cstack = rx395_cur."!cursor_capture"($P11, "sym")
    goto rxcap397_done1195
  rxcap397_fail1196:
    goto rx395_fail1188
  rxcap397_done1195:
    repr_bind_attr_int rx395_cur, rx395_curclass, "$!pos", rx395_pos
    $P11 = rx395_cur."ws"()
    repr_get_attr_int $I11, $P11, rx395_curclass, "$!pos"
    lt $I11, 0, rx395_fail1188
    repr_get_attr_int rx395_pos, $P11, rx395_curclass, "$!pos"
    repr_bind_attr_int rx395_cur, rx395_curclass, "$!pos", rx395_pos
    $P11 = rx395_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx395_curclass, "$!pos"
    lt $I11, 0, rx395_fail1188
    nqp_rxmark rx395_bstack, rxsubrule399_pass1198, -1, 0
  rxsubrule399_pass1198:
    rx395_cstack = rx395_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx395_pos, $P11, rx395_curclass, "$!pos"
    repr_bind_attr_int rx395_cur, rx395_curclass, "$!pos", rx395_pos
    $P11 = rx395_cur."ws"()
    repr_get_attr_int $I11, $P11, rx395_curclass, "$!pos"
    lt $I11, 0, rx395_fail1188
    repr_get_attr_int rx395_pos, $P11, rx395_curclass, "$!pos"
    rx395_cur."!cursor_pass"(rx395_pos, "statement_mod_cond:sym<unless>", 'backtrack'=>1)
    .return (rx395_cur)
  rx395_restart1187:
    repr_get_attr_obj rx395_cstack, rx395_cur, rx395_curclass, "$!cstack"
  rx395_fail1188:
    unless rx395_bstack, rx395_done1186
    pop $I19, rx395_bstack
    if_null rx395_cstack, rx395_cstack_done1191
    unless rx395_cstack, rx395_cstack_done1191
    dec $I19
    set $P11, rx395_cstack[$I19]
  rx395_cstack_done1191:
    pop rx395_rep, rx395_bstack
    pop rx395_pos, rx395_bstack
    pop $I19, rx395_bstack
    lt rx395_pos, -1, rx395_done1186
    lt rx395_pos, 0, rx395_fail1188
    eq $I19, 0, rx395_fail1188
    nqp_islist $I20, rx395_cstack
    unless $I20, rx395_jump1189
    elements $I18, rx395_bstack
    le $I18, 0, rx395_cut1190
    dec $I18
    set $I18, rx395_bstack[$I18]
  rx395_cut1190:
    assign rx395_cstack, $I18
  rx395_jump1189:
    jump $I19
  rx395_done1186:
    rx395_cur."!cursor_fail"()
    .return (rx395_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop" :subid("cuid_80_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 916
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_loop")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_81_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 918
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx401_tgt
    .local int rx401_pos
    .local int rx401_off
    .local int rx401_eos
    .local int rx401_rep
    .local pmc rx401_cur
    .local pmc rx401_curclass
    .local pmc rx401_bstack
    .local pmc rx401_cstack
    (rx401_cur, rx401_tgt, rx401_pos, rx401_curclass, rx401_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx401_cur
    length rx401_eos, rx401_tgt
    eq $I19, 1, rx401_restart1202
    gt rx401_pos, rx401_eos, rx401_fail1203
    repr_get_attr_int $I11, self, rx401_curclass, "$!from"
    ne $I11, -1, rxscan402_done1209
    goto rxscan402_scan1208
  rxscan402_loop1207:
    inc rx401_pos
    gt rx401_pos, rx401_eos, rx401_fail1203
    repr_bind_attr_int rx401_cur, rx401_curclass, "$!from", rx401_pos
  rxscan402_scan1208:
    nqp_rxmark rx401_bstack, rxscan402_loop1207, rx401_pos, 0
  rxscan402_done1209:
    nqp_rxmark rx401_bstack, rxcap403_fail1211, rx401_pos, 0
    add $I11, rx401_pos, 5
    gt $I11, rx401_eos, rx401_fail1203
    substr $S10, rx401_tgt, rx401_pos, 5
    ne $S10, ucs4:"while", rx401_fail1203
    add rx401_pos, 5
    nqp_rxpeek $I19, rx401_bstack, rxcap403_fail1211
    inc $I19
    set $I11, rx401_bstack[$I19]
    repr_bind_attr_int rx401_cur, rx401_curclass, "$!pos", rx401_pos
    $P11 = rx401_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx401_pos)
    rx401_cstack = rx401_cur."!cursor_capture"($P11, "sym")
    goto rxcap403_done1210
  rxcap403_fail1211:
    goto rx401_fail1203
  rxcap403_done1210:
    repr_bind_attr_int rx401_cur, rx401_curclass, "$!pos", rx401_pos
    $P11 = rx401_cur."ws"()
    repr_get_attr_int $I11, $P11, rx401_curclass, "$!pos"
    lt $I11, 0, rx401_fail1203
    repr_get_attr_int rx401_pos, $P11, rx401_curclass, "$!pos"
    repr_bind_attr_int rx401_cur, rx401_curclass, "$!pos", rx401_pos
    $P11 = rx401_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx401_curclass, "$!pos"
    lt $I11, 0, rx401_fail1203
    nqp_rxmark rx401_bstack, rxsubrule405_pass1213, -1, 0
  rxsubrule405_pass1213:
    rx401_cstack = rx401_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx401_pos, $P11, rx401_curclass, "$!pos"
    repr_bind_attr_int rx401_cur, rx401_curclass, "$!pos", rx401_pos
    $P11 = rx401_cur."ws"()
    repr_get_attr_int $I11, $P11, rx401_curclass, "$!pos"
    lt $I11, 0, rx401_fail1203
    repr_get_attr_int rx401_pos, $P11, rx401_curclass, "$!pos"
    rx401_cur."!cursor_pass"(rx401_pos, "statement_mod_loop:sym<while>", 'backtrack'=>1)
    .return (rx401_cur)
  rx401_restart1202:
    repr_get_attr_obj rx401_cstack, rx401_cur, rx401_curclass, "$!cstack"
  rx401_fail1203:
    unless rx401_bstack, rx401_done1201
    pop $I19, rx401_bstack
    if_null rx401_cstack, rx401_cstack_done1206
    unless rx401_cstack, rx401_cstack_done1206
    dec $I19
    set $P11, rx401_cstack[$I19]
  rx401_cstack_done1206:
    pop rx401_rep, rx401_bstack
    pop rx401_pos, rx401_bstack
    pop $I19, rx401_bstack
    lt rx401_pos, -1, rx401_done1201
    lt rx401_pos, 0, rx401_fail1203
    eq $I19, 0, rx401_fail1203
    nqp_islist $I20, rx401_cstack
    unless $I20, rx401_jump1204
    elements $I18, rx401_bstack
    le $I18, 0, rx401_cut1205
    dec $I18
    set $I18, rx401_bstack[$I18]
  rx401_cut1205:
    assign rx401_cstack, $I18
  rx401_jump1204:
    jump $I19
  rx401_done1201:
    rx401_cur."!cursor_fail"()
    .return (rx401_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_82_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 919
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx407_tgt
    .local int rx407_pos
    .local int rx407_off
    .local int rx407_eos
    .local int rx407_rep
    .local pmc rx407_cur
    .local pmc rx407_curclass
    .local pmc rx407_bstack
    .local pmc rx407_cstack
    (rx407_cur, rx407_tgt, rx407_pos, rx407_curclass, rx407_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx407_cur
    length rx407_eos, rx407_tgt
    eq $I19, 1, rx407_restart1217
    gt rx407_pos, rx407_eos, rx407_fail1218
    repr_get_attr_int $I11, self, rx407_curclass, "$!from"
    ne $I11, -1, rxscan408_done1224
    goto rxscan408_scan1223
  rxscan408_loop1222:
    inc rx407_pos
    gt rx407_pos, rx407_eos, rx407_fail1218
    repr_bind_attr_int rx407_cur, rx407_curclass, "$!from", rx407_pos
  rxscan408_scan1223:
    nqp_rxmark rx407_bstack, rxscan408_loop1222, rx407_pos, 0
  rxscan408_done1224:
    nqp_rxmark rx407_bstack, rxcap409_fail1226, rx407_pos, 0
    add $I11, rx407_pos, 5
    gt $I11, rx407_eos, rx407_fail1218
    substr $S10, rx407_tgt, rx407_pos, 5
    ne $S10, ucs4:"until", rx407_fail1218
    add rx407_pos, 5
    nqp_rxpeek $I19, rx407_bstack, rxcap409_fail1226
    inc $I19
    set $I11, rx407_bstack[$I19]
    repr_bind_attr_int rx407_cur, rx407_curclass, "$!pos", rx407_pos
    $P11 = rx407_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx407_pos)
    rx407_cstack = rx407_cur."!cursor_capture"($P11, "sym")
    goto rxcap409_done1225
  rxcap409_fail1226:
    goto rx407_fail1218
  rxcap409_done1225:
    repr_bind_attr_int rx407_cur, rx407_curclass, "$!pos", rx407_pos
    $P11 = rx407_cur."ws"()
    repr_get_attr_int $I11, $P11, rx407_curclass, "$!pos"
    lt $I11, 0, rx407_fail1218
    repr_get_attr_int rx407_pos, $P11, rx407_curclass, "$!pos"
    repr_bind_attr_int rx407_cur, rx407_curclass, "$!pos", rx407_pos
    $P11 = rx407_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx407_curclass, "$!pos"
    lt $I11, 0, rx407_fail1218
    nqp_rxmark rx407_bstack, rxsubrule411_pass1228, -1, 0
  rxsubrule411_pass1228:
    rx407_cstack = rx407_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx407_pos, $P11, rx407_curclass, "$!pos"
    repr_bind_attr_int rx407_cur, rx407_curclass, "$!pos", rx407_pos
    $P11 = rx407_cur."ws"()
    repr_get_attr_int $I11, $P11, rx407_curclass, "$!pos"
    lt $I11, 0, rx407_fail1218
    repr_get_attr_int rx407_pos, $P11, rx407_curclass, "$!pos"
    rx407_cur."!cursor_pass"(rx407_pos, "statement_mod_loop:sym<until>", 'backtrack'=>1)
    .return (rx407_cur)
  rx407_restart1217:
    repr_get_attr_obj rx407_cstack, rx407_cur, rx407_curclass, "$!cstack"
  rx407_fail1218:
    unless rx407_bstack, rx407_done1216
    pop $I19, rx407_bstack
    if_null rx407_cstack, rx407_cstack_done1221
    unless rx407_cstack, rx407_cstack_done1221
    dec $I19
    set $P11, rx407_cstack[$I19]
  rx407_cstack_done1221:
    pop rx407_rep, rx407_bstack
    pop rx407_pos, rx407_bstack
    pop $I19, rx407_bstack
    lt rx407_pos, -1, rx407_done1216
    lt rx407_pos, 0, rx407_fail1218
    eq $I19, 0, rx407_fail1218
    nqp_islist $I20, rx407_cstack
    unless $I20, rx407_jump1219
    elements $I18, rx407_bstack
    le $I18, 0, rx407_cut1220
    dec $I18
    set $I18, rx407_bstack[$I18]
  rx407_cut1220:
    assign rx407_cstack, $I18
  rx407_jump1219:
    jump $I19
  rx407_done1216:
    rx407_cur."!cursor_fail"()
    .return (rx407_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<for>" :subid("cuid_83_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 920
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx413_tgt
    .local int rx413_pos
    .local int rx413_off
    .local int rx413_eos
    .local int rx413_rep
    .local pmc rx413_cur
    .local pmc rx413_curclass
    .local pmc rx413_bstack
    .local pmc rx413_cstack
    (rx413_cur, rx413_tgt, rx413_pos, rx413_curclass, rx413_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx413_cur
    length rx413_eos, rx413_tgt
    eq $I19, 1, rx413_restart1232
    gt rx413_pos, rx413_eos, rx413_fail1233
    repr_get_attr_int $I11, self, rx413_curclass, "$!from"
    ne $I11, -1, rxscan414_done1239
    goto rxscan414_scan1238
  rxscan414_loop1237:
    inc rx413_pos
    gt rx413_pos, rx413_eos, rx413_fail1233
    repr_bind_attr_int rx413_cur, rx413_curclass, "$!from", rx413_pos
  rxscan414_scan1238:
    nqp_rxmark rx413_bstack, rxscan414_loop1237, rx413_pos, 0
  rxscan414_done1239:
    nqp_rxmark rx413_bstack, rxcap415_fail1241, rx413_pos, 0
    add $I11, rx413_pos, 3
    gt $I11, rx413_eos, rx413_fail1233
    substr $S10, rx413_tgt, rx413_pos, 3
    ne $S10, ucs4:"for", rx413_fail1233
    add rx413_pos, 3
    nqp_rxpeek $I19, rx413_bstack, rxcap415_fail1241
    inc $I19
    set $I11, rx413_bstack[$I19]
    repr_bind_attr_int rx413_cur, rx413_curclass, "$!pos", rx413_pos
    $P11 = rx413_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx413_pos)
    rx413_cstack = rx413_cur."!cursor_capture"($P11, "sym")
    goto rxcap415_done1240
  rxcap415_fail1241:
    goto rx413_fail1233
  rxcap415_done1240:
    repr_bind_attr_int rx413_cur, rx413_curclass, "$!pos", rx413_pos
    $P11 = rx413_cur."ws"()
    repr_get_attr_int $I11, $P11, rx413_curclass, "$!pos"
    lt $I11, 0, rx413_fail1233
    repr_get_attr_int rx413_pos, $P11, rx413_curclass, "$!pos"
    repr_bind_attr_int rx413_cur, rx413_curclass, "$!pos", rx413_pos
    $P11 = rx413_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx413_curclass, "$!pos"
    lt $I11, 0, rx413_fail1233
    nqp_rxmark rx413_bstack, rxsubrule417_pass1243, -1, 0
  rxsubrule417_pass1243:
    rx413_cstack = rx413_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx413_pos, $P11, rx413_curclass, "$!pos"
    repr_bind_attr_int rx413_cur, rx413_curclass, "$!pos", rx413_pos
    $P11 = rx413_cur."ws"()
    repr_get_attr_int $I11, $P11, rx413_curclass, "$!pos"
    lt $I11, 0, rx413_fail1233
    repr_get_attr_int rx413_pos, $P11, rx413_curclass, "$!pos"
    rx413_cur."!cursor_pass"(rx413_pos, "statement_mod_loop:sym<for>", 'backtrack'=>1)
    .return (rx413_cur)
  rx413_restart1232:
    repr_get_attr_obj rx413_cstack, rx413_cur, rx413_curclass, "$!cstack"
  rx413_fail1233:
    unless rx413_bstack, rx413_done1231
    pop $I19, rx413_bstack
    if_null rx413_cstack, rx413_cstack_done1236
    unless rx413_cstack, rx413_cstack_done1236
    dec $I19
    set $P11, rx413_cstack[$I19]
  rx413_cstack_done1236:
    pop rx413_rep, rx413_bstack
    pop rx413_pos, rx413_bstack
    pop $I19, rx413_bstack
    lt rx413_pos, -1, rx413_done1231
    lt rx413_pos, 0, rx413_fail1233
    eq $I19, 0, rx413_fail1233
    nqp_islist $I20, rx413_cstack
    unless $I20, rx413_jump1234
    elements $I18, rx413_bstack
    le $I18, 0, rx413_cut1235
    dec $I18
    set $I18, rx413_bstack[$I18]
  rx413_cut1235:
    assign rx413_cstack, $I18
  rx413_jump1234:
    jump $I19
  rx413_done1231:
    rx413_cur."!cursor_fail"()
    .return (rx413_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_84_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 924
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx419_tgt
    .local int rx419_pos
    .local int rx419_off
    .local int rx419_eos
    .local int rx419_rep
    .local pmc rx419_cur
    .local pmc rx419_curclass
    .local pmc rx419_bstack
    .local pmc rx419_cstack
    (rx419_cur, rx419_tgt, rx419_pos, rx419_curclass, rx419_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx419_cur
    length rx419_eos, rx419_tgt
    eq $I19, 1, rx419_restart1247
    gt rx419_pos, rx419_eos, rx419_fail1248
    repr_get_attr_int $I11, self, rx419_curclass, "$!from"
    ne $I11, -1, rxscan420_done1254
    goto rxscan420_scan1253
  rxscan420_loop1252:
    inc rx419_pos
    gt rx419_pos, rx419_eos, rx419_fail1248
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!from", rx419_pos
  rxscan420_scan1253:
    nqp_rxmark rx419_bstack, rxscan420_loop1252, rx419_pos, 0
  rxscan420_done1254:
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!pos", rx419_pos
    $P11 = rx419_cur."fatarrow"()
    repr_get_attr_int $I11, $P11, rx419_curclass, "$!pos"
    lt $I11, 0, rx419_fail1248
    nqp_rxmark rx419_bstack, rxsubrule421_pass1255, -1, 0
  rxsubrule421_pass1255:
    rx419_cstack = rx419_cur."!cursor_capture"($P11, "fatarrow")
    repr_get_attr_int rx419_pos, $P11, rx419_curclass, "$!pos"
    rx419_cur."!cursor_pass"(rx419_pos, "term:sym<fatarrow>", 'backtrack'=>1)
    .return (rx419_cur)
  rx419_restart1247:
    repr_get_attr_obj rx419_cstack, rx419_cur, rx419_curclass, "$!cstack"
  rx419_fail1248:
    unless rx419_bstack, rx419_done1246
    pop $I19, rx419_bstack
    if_null rx419_cstack, rx419_cstack_done1251
    unless rx419_cstack, rx419_cstack_done1251
    dec $I19
    set $P11, rx419_cstack[$I19]
  rx419_cstack_done1251:
    pop rx419_rep, rx419_bstack
    pop rx419_pos, rx419_bstack
    pop $I19, rx419_bstack
    lt rx419_pos, -1, rx419_done1246
    lt rx419_pos, 0, rx419_fail1248
    eq $I19, 0, rx419_fail1248
    nqp_islist $I20, rx419_cstack
    unless $I20, rx419_jump1249
    elements $I18, rx419_bstack
    le $I18, 0, rx419_cut1250
    dec $I18
    set $I18, rx419_bstack[$I18]
  rx419_cut1250:
    assign rx419_cstack, $I18
  rx419_jump1249:
    jump $I19
  rx419_done1246:
    rx419_cur."!cursor_fail"()
    .return (rx419_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_85_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 925
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx422_tgt
    .local int rx422_pos
    .local int rx422_off
    .local int rx422_eos
    .local int rx422_rep
    .local pmc rx422_cur
    .local pmc rx422_curclass
    .local pmc rx422_bstack
    .local pmc rx422_cstack
    (rx422_cur, rx422_tgt, rx422_pos, rx422_curclass, rx422_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx422_cur
    length rx422_eos, rx422_tgt
    eq $I19, 1, rx422_restart1258
    gt rx422_pos, rx422_eos, rx422_fail1259
    repr_get_attr_int $I11, self, rx422_curclass, "$!from"
    ne $I11, -1, rxscan423_done1265
    goto rxscan423_scan1264
  rxscan423_loop1263:
    inc rx422_pos
    gt rx422_pos, rx422_eos, rx422_fail1259
    repr_bind_attr_int rx422_cur, rx422_curclass, "$!from", rx422_pos
  rxscan423_scan1264:
    nqp_rxmark rx422_bstack, rxscan423_loop1263, rx422_pos, 0
  rxscan423_done1265:
    repr_bind_attr_int rx422_cur, rx422_curclass, "$!pos", rx422_pos
    $P11 = rx422_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx422_curclass, "$!pos"
    lt $I11, 0, rx422_fail1259
    nqp_rxmark rx422_bstack, rxsubrule424_pass1266, -1, 0
  rxsubrule424_pass1266:
    rx422_cstack = rx422_cur."!cursor_capture"($P11, "colonpair")
    repr_get_attr_int rx422_pos, $P11, rx422_curclass, "$!pos"
    rx422_cur."!cursor_pass"(rx422_pos, "term:sym<colonpair>", 'backtrack'=>1)
    .return (rx422_cur)
  rx422_restart1258:
    repr_get_attr_obj rx422_cstack, rx422_cur, rx422_curclass, "$!cstack"
  rx422_fail1259:
    unless rx422_bstack, rx422_done1257
    pop $I19, rx422_bstack
    if_null rx422_cstack, rx422_cstack_done1262
    unless rx422_cstack, rx422_cstack_done1262
    dec $I19
    set $P11, rx422_cstack[$I19]
  rx422_cstack_done1262:
    pop rx422_rep, rx422_bstack
    pop rx422_pos, rx422_bstack
    pop $I19, rx422_bstack
    lt rx422_pos, -1, rx422_done1257
    lt rx422_pos, 0, rx422_fail1259
    eq $I19, 0, rx422_fail1259
    nqp_islist $I20, rx422_cstack
    unless $I20, rx422_jump1260
    elements $I18, rx422_bstack
    le $I18, 0, rx422_cut1261
    dec $I18
    set $I18, rx422_bstack[$I18]
  rx422_cut1261:
    assign rx422_cstack, $I18
  rx422_jump1260:
    jump $I19
  rx422_done1257:
    rx422_cur."!cursor_fail"()
    .return (rx422_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_86_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 926
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx425_tgt
    .local int rx425_pos
    .local int rx425_off
    .local int rx425_eos
    .local int rx425_rep
    .local pmc rx425_cur
    .local pmc rx425_curclass
    .local pmc rx425_bstack
    .local pmc rx425_cstack
    (rx425_cur, rx425_tgt, rx425_pos, rx425_curclass, rx425_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx425_cur
    length rx425_eos, rx425_tgt
    eq $I19, 1, rx425_restart1269
    gt rx425_pos, rx425_eos, rx425_fail1270
    repr_get_attr_int $I11, self, rx425_curclass, "$!from"
    ne $I11, -1, rxscan426_done1276
    goto rxscan426_scan1275
  rxscan426_loop1274:
    inc rx425_pos
    gt rx425_pos, rx425_eos, rx425_fail1270
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!from", rx425_pos
  rxscan426_scan1275:
    nqp_rxmark rx425_bstack, rxscan426_loop1274, rx425_pos, 0
  rxscan426_done1276:
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!pos", rx425_pos
    $P11 = rx425_cur."variable"()
    repr_get_attr_int $I11, $P11, rx425_curclass, "$!pos"
    lt $I11, 0, rx425_fail1270
    nqp_rxmark rx425_bstack, rxsubrule427_pass1277, -1, 0
  rxsubrule427_pass1277:
    rx425_cstack = rx425_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx425_pos, $P11, rx425_curclass, "$!pos"
    rx425_cur."!cursor_pass"(rx425_pos, "term:sym<variable>", 'backtrack'=>1)
    .return (rx425_cur)
  rx425_restart1269:
    repr_get_attr_obj rx425_cstack, rx425_cur, rx425_curclass, "$!cstack"
  rx425_fail1270:
    unless rx425_bstack, rx425_done1268
    pop $I19, rx425_bstack
    if_null rx425_cstack, rx425_cstack_done1273
    unless rx425_cstack, rx425_cstack_done1273
    dec $I19
    set $P11, rx425_cstack[$I19]
  rx425_cstack_done1273:
    pop rx425_rep, rx425_bstack
    pop rx425_pos, rx425_bstack
    pop $I19, rx425_bstack
    lt rx425_pos, -1, rx425_done1268
    lt rx425_pos, 0, rx425_fail1270
    eq $I19, 0, rx425_fail1270
    nqp_islist $I20, rx425_cstack
    unless $I20, rx425_jump1271
    elements $I18, rx425_bstack
    le $I18, 0, rx425_cut1272
    dec $I18
    set $I18, rx425_bstack[$I18]
  rx425_cut1272:
    assign rx425_cstack, $I18
  rx425_jump1271:
    jump $I19
  rx425_done1268:
    rx425_cur."!cursor_fail"()
    .return (rx425_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_87_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 927
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx428_tgt
    .local int rx428_pos
    .local int rx428_off
    .local int rx428_eos
    .local int rx428_rep
    .local pmc rx428_cur
    .local pmc rx428_curclass
    .local pmc rx428_bstack
    .local pmc rx428_cstack
    (rx428_cur, rx428_tgt, rx428_pos, rx428_curclass, rx428_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx428_cur
    length rx428_eos, rx428_tgt
    eq $I19, 1, rx428_restart1280
    gt rx428_pos, rx428_eos, rx428_fail1281
    repr_get_attr_int $I11, self, rx428_curclass, "$!from"
    ne $I11, -1, rxscan429_done1287
    goto rxscan429_scan1286
  rxscan429_loop1285:
    inc rx428_pos
    gt rx428_pos, rx428_eos, rx428_fail1281
    repr_bind_attr_int rx428_cur, rx428_curclass, "$!from", rx428_pos
  rxscan429_scan1286:
    nqp_rxmark rx428_bstack, rxscan429_loop1285, rx428_pos, 0
  rxscan429_done1287:
    repr_bind_attr_int rx428_cur, rx428_curclass, "$!pos", rx428_pos
    $P11 = rx428_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx428_curclass, "$!pos"
    lt $I11, 0, rx428_fail1281
    nqp_rxmark rx428_bstack, rxsubrule430_pass1288, -1, 0
  rxsubrule430_pass1288:
    rx428_cstack = rx428_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx428_pos, $P11, rx428_curclass, "$!pos"
    rx428_cur."!cursor_pass"(rx428_pos, "term:sym<package_declarator>", 'backtrack'=>1)
    .return (rx428_cur)
  rx428_restart1280:
    repr_get_attr_obj rx428_cstack, rx428_cur, rx428_curclass, "$!cstack"
  rx428_fail1281:
    unless rx428_bstack, rx428_done1279
    pop $I19, rx428_bstack
    if_null rx428_cstack, rx428_cstack_done1284
    unless rx428_cstack, rx428_cstack_done1284
    dec $I19
    set $P11, rx428_cstack[$I19]
  rx428_cstack_done1284:
    pop rx428_rep, rx428_bstack
    pop rx428_pos, rx428_bstack
    pop $I19, rx428_bstack
    lt rx428_pos, -1, rx428_done1279
    lt rx428_pos, 0, rx428_fail1281
    eq $I19, 0, rx428_fail1281
    nqp_islist $I20, rx428_cstack
    unless $I20, rx428_jump1282
    elements $I18, rx428_bstack
    le $I18, 0, rx428_cut1283
    dec $I18
    set $I18, rx428_bstack[$I18]
  rx428_cut1283:
    assign rx428_cstack, $I18
  rx428_jump1282:
    jump $I19
  rx428_done1279:
    rx428_cur."!cursor_fail"()
    .return (rx428_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_88_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 928
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx431_tgt
    .local int rx431_pos
    .local int rx431_off
    .local int rx431_eos
    .local int rx431_rep
    .local pmc rx431_cur
    .local pmc rx431_curclass
    .local pmc rx431_bstack
    .local pmc rx431_cstack
    (rx431_cur, rx431_tgt, rx431_pos, rx431_curclass, rx431_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx431_cur
    length rx431_eos, rx431_tgt
    eq $I19, 1, rx431_restart1291
    gt rx431_pos, rx431_eos, rx431_fail1292
    repr_get_attr_int $I11, self, rx431_curclass, "$!from"
    ne $I11, -1, rxscan432_done1298
    goto rxscan432_scan1297
  rxscan432_loop1296:
    inc rx431_pos
    gt rx431_pos, rx431_eos, rx431_fail1292
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!from", rx431_pos
  rxscan432_scan1297:
    nqp_rxmark rx431_bstack, rxscan432_loop1296, rx431_pos, 0
  rxscan432_done1298:
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."scope_declarator"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail1292
    nqp_rxmark rx431_bstack, rxsubrule433_pass1299, -1, 0
  rxsubrule433_pass1299:
    rx431_cstack = rx431_cur."!cursor_capture"($P11, "scope_declarator")
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    rx431_cur."!cursor_pass"(rx431_pos, "term:sym<scope_declarator>", 'backtrack'=>1)
    .return (rx431_cur)
  rx431_restart1291:
    repr_get_attr_obj rx431_cstack, rx431_cur, rx431_curclass, "$!cstack"
  rx431_fail1292:
    unless rx431_bstack, rx431_done1290
    pop $I19, rx431_bstack
    if_null rx431_cstack, rx431_cstack_done1295
    unless rx431_cstack, rx431_cstack_done1295
    dec $I19
    set $P11, rx431_cstack[$I19]
  rx431_cstack_done1295:
    pop rx431_rep, rx431_bstack
    pop rx431_pos, rx431_bstack
    pop $I19, rx431_bstack
    lt rx431_pos, -1, rx431_done1290
    lt rx431_pos, 0, rx431_fail1292
    eq $I19, 0, rx431_fail1292
    nqp_islist $I20, rx431_cstack
    unless $I20, rx431_jump1293
    elements $I18, rx431_bstack
    le $I18, 0, rx431_cut1294
    dec $I18
    set $I18, rx431_bstack[$I18]
  rx431_cut1294:
    assign rx431_cstack, $I18
  rx431_jump1293:
    jump $I19
  rx431_done1290:
    rx431_cur."!cursor_fail"()
    .return (rx431_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_89_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 929
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx434_tgt
    .local int rx434_pos
    .local int rx434_off
    .local int rx434_eos
    .local int rx434_rep
    .local pmc rx434_cur
    .local pmc rx434_curclass
    .local pmc rx434_bstack
    .local pmc rx434_cstack
    (rx434_cur, rx434_tgt, rx434_pos, rx434_curclass, rx434_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx434_cur
    length rx434_eos, rx434_tgt
    eq $I19, 1, rx434_restart1302
    gt rx434_pos, rx434_eos, rx434_fail1303
    repr_get_attr_int $I11, self, rx434_curclass, "$!from"
    ne $I11, -1, rxscan435_done1309
    goto rxscan435_scan1308
  rxscan435_loop1307:
    inc rx434_pos
    gt rx434_pos, rx434_eos, rx434_fail1303
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!from", rx434_pos
  rxscan435_scan1308:
    nqp_rxmark rx434_bstack, rxscan435_loop1307, rx434_pos, 0
  rxscan435_done1309:
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1303
    nqp_rxmark rx434_bstack, rxsubrule436_pass1310, -1, 0
  rxsubrule436_pass1310:
    rx434_cstack = rx434_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx434_pos, $P11, rx434_curclass, "$!pos"
    rx434_cur."!cursor_pass"(rx434_pos, "term:sym<routine_declarator>", 'backtrack'=>1)
    .return (rx434_cur)
  rx434_restart1302:
    repr_get_attr_obj rx434_cstack, rx434_cur, rx434_curclass, "$!cstack"
  rx434_fail1303:
    unless rx434_bstack, rx434_done1301
    pop $I19, rx434_bstack
    if_null rx434_cstack, rx434_cstack_done1306
    unless rx434_cstack, rx434_cstack_done1306
    dec $I19
    set $P11, rx434_cstack[$I19]
  rx434_cstack_done1306:
    pop rx434_rep, rx434_bstack
    pop rx434_pos, rx434_bstack
    pop $I19, rx434_bstack
    lt rx434_pos, -1, rx434_done1301
    lt rx434_pos, 0, rx434_fail1303
    eq $I19, 0, rx434_fail1303
    nqp_islist $I20, rx434_cstack
    unless $I20, rx434_jump1304
    elements $I18, rx434_bstack
    le $I18, 0, rx434_cut1305
    dec $I18
    set $I18, rx434_bstack[$I18]
  rx434_cut1305:
    assign rx434_cstack, $I18
  rx434_jump1304:
    jump $I19
  rx434_done1301:
    rx434_cur."!cursor_fail"()
    .return (rx434_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_90_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 930
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_91_1360426903.566' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_92_1360426903.566' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx437_tgt
    .local int rx437_pos
    .local int rx437_off
    .local int rx437_eos
    .local int rx437_rep
    .local pmc rx437_cur
    .local pmc rx437_curclass
    .local pmc rx437_bstack
    .local pmc rx437_cstack
    (rx437_cur, rx437_tgt, rx437_pos, rx437_curclass, rx437_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx437_cur
    length rx437_eos, rx437_tgt
    eq $I19, 1, rx437_restart1313
    gt rx437_pos, rx437_eos, rx437_fail1314
    repr_get_attr_int $I11, self, rx437_curclass, "$!from"
    ne $I11, -1, rxscan438_done1320
    goto rxscan438_scan1319
  rxscan438_loop1318:
    inc rx437_pos
    gt rx437_pos, rx437_eos, rx437_fail1314
    repr_bind_attr_int rx437_cur, rx437_curclass, "$!from", rx437_pos
  rxscan438_scan1319:
    nqp_rxmark rx437_bstack, rxscan438_loop1318, rx437_pos, 0
  rxscan438_done1320:
    .const 'Sub' $P5001 = 'cuid_91_1360426903.566' 
    capture_lex $P5001
    repr_bind_attr_int rx437_cur, rx437_curclass, "$!pos", rx437_pos
    $P11 = rx437_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx437_curclass, "$!pos"
    lt $I11, 0, rx437_fail1314
    .const 'Sub' $P5002 = 'cuid_92_1360426903.566' 
    capture_lex $P5002
    repr_bind_attr_int rx437_cur, rx437_curclass, "$!pos", rx437_pos
    $P11 = rx437_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx437_curclass, "$!pos"
    ge $I11, 0, rx437_fail1314
    repr_bind_attr_int rx437_cur, rx437_curclass, "$!pos", rx437_pos
    $P11 = rx437_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx437_curclass, "$!pos"
    lt $I11, 0, rx437_fail1314
    nqp_rxmark rx437_bstack, rxsubrule446_pass1350, -1, 0
  rxsubrule446_pass1350:
    rx437_cstack = rx437_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx437_pos, $P11, rx437_curclass, "$!pos"
    rx437_cur."!cursor_pass"(rx437_pos, "term:sym<multi_declarator>", 'backtrack'=>1)
    .return (rx437_cur)
  rx437_restart1313:
    repr_get_attr_obj rx437_cstack, rx437_cur, rx437_curclass, "$!cstack"
  rx437_fail1314:
    unless rx437_bstack, rx437_done1312
    pop $I19, rx437_bstack
    if_null rx437_cstack, rx437_cstack_done1317
    unless rx437_cstack, rx437_cstack_done1317
    dec $I19
    set $P11, rx437_cstack[$I19]
  rx437_cstack_done1317:
    pop rx437_rep, rx437_bstack
    pop rx437_pos, rx437_bstack
    pop $I19, rx437_bstack
    lt rx437_pos, -1, rx437_done1312
    lt rx437_pos, 0, rx437_fail1314
    eq $I19, 0, rx437_fail1314
    nqp_islist $I20, rx437_cstack
    unless $I20, rx437_jump1315
    elements $I18, rx437_bstack
    le $I18, 0, rx437_cut1316
    dec $I18
    set $I18, rx437_bstack[$I18]
  rx437_cut1316:
    assign rx437_cstack, $I18
  rx437_jump1315:
    jump $I19
  rx437_done1312:
    rx437_cur."!cursor_fail"()
    .return (rx437_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_91_1360426903.566") :anon :lex :outer("cuid_90_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx439_tgt
    .local int rx439_pos
    .local int rx439_off
    .local int rx439_eos
    .local int rx439_rep
    .local pmc rx439_cur
    .local pmc rx439_curclass
    .local pmc rx439_bstack
    .local pmc rx439_cstack
    (rx439_cur, rx439_tgt, rx439_pos, rx439_curclass, rx439_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx439_cur
    length rx439_eos, rx439_tgt
    eq $I19, 1, rx439_restart1323
    gt rx439_pos, rx439_eos, rx439_fail1324
    repr_get_attr_int $I11, self, rx439_curclass, "$!from"
    ne $I11, -1, rxscan440_done1330
    goto rxscan440_scan1329
  rxscan440_loop1328:
    inc rx439_pos
    gt rx439_pos, rx439_eos, rx439_fail1324
    repr_bind_attr_int rx439_cur, rx439_curclass, "$!from", rx439_pos
  rxscan440_scan1329:
    nqp_rxmark rx439_bstack, rxscan440_loop1328, rx439_pos, 0
  rxscan440_done1330:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt441_01332
    nqp_push_label $P11, alt441_11333
    nqp_push_label $P11, alt441_21334
    nqp_rxmark rx439_bstack, alt441_end1331, -1, 0
    rx439_cur."!alt"(rx439_pos, "alt_nfa__17_1360426905.268", $P11)
    goto rx439_fail1324
  alt441_01332:
    add $I11, rx439_pos, 5
    gt $I11, rx439_eos, rx439_fail1324
    substr $S10, rx439_tgt, rx439_pos, 5
    ne $S10, ucs4:"multi", rx439_fail1324
    add rx439_pos, 5
    goto alt441_end1331
  alt441_11333:
    add $I11, rx439_pos, 5
    gt $I11, rx439_eos, rx439_fail1324
    substr $S10, rx439_tgt, rx439_pos, 5
    ne $S10, ucs4:"proto", rx439_fail1324
    add rx439_pos, 5
    goto alt441_end1331
  alt441_21334:
    add $I11, rx439_pos, 4
    gt $I11, rx439_eos, rx439_fail1324
    substr $S10, rx439_tgt, rx439_pos, 4
    ne $S10, ucs4:"only", rx439_fail1324
    add rx439_pos, 4
    goto alt441_end1331
  alt441_end1331:
    rx439_cur."!cursor_pass"(rx439_pos, 'backtrack'=>1)
    .return (rx439_cur)
  rx439_restart1323:
    repr_get_attr_obj rx439_cstack, rx439_cur, rx439_curclass, "$!cstack"
  rx439_fail1324:
    unless rx439_bstack, rx439_done1322
    pop $I19, rx439_bstack
    if_null rx439_cstack, rx439_cstack_done1327
    unless rx439_cstack, rx439_cstack_done1327
    dec $I19
    set $P11, rx439_cstack[$I19]
  rx439_cstack_done1327:
    pop rx439_rep, rx439_bstack
    pop rx439_pos, rx439_bstack
    pop $I19, rx439_bstack
    lt rx439_pos, -1, rx439_done1322
    lt rx439_pos, 0, rx439_fail1324
    eq $I19, 0, rx439_fail1324
    nqp_islist $I20, rx439_cstack
    unless $I20, rx439_jump1325
    elements $I18, rx439_bstack
    le $I18, 0, rx439_cut1326
    dec $I18
    set $I18, rx439_bstack[$I18]
  rx439_cut1326:
    assign rx439_cstack, $I18
  rx439_jump1325:
    jump $I19
  rx439_done1322:
    rx439_cur."!cursor_fail"()
    .return (rx439_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_92_1360426903.566") :anon :lex :outer("cuid_90_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx442_tgt
    .local int rx442_pos
    .local int rx442_off
    .local int rx442_eos
    .local int rx442_rep
    .local pmc rx442_cur
    .local pmc rx442_curclass
    .local pmc rx442_bstack
    .local pmc rx442_cstack
    (rx442_cur, rx442_tgt, rx442_pos, rx442_curclass, rx442_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx442_cur
    length rx442_eos, rx442_tgt
    eq $I19, 1, rx442_restart1337
    gt rx442_pos, rx442_eos, rx442_fail1338
    repr_get_attr_int $I11, self, rx442_curclass, "$!from"
    ne $I11, -1, rxscan443_done1344
    goto rxscan443_scan1343
  rxscan443_loop1342:
    inc rx442_pos
    gt rx442_pos, rx442_eos, rx442_fail1338
    repr_bind_attr_int rx442_cur, rx442_curclass, "$!from", rx442_pos
  rxscan443_scan1343:
    nqp_rxmark rx442_bstack, rxscan443_loop1342, rx442_pos, 0
  rxscan443_done1344:
    add $I11, rx442_pos, 5
    gt $I11, rx442_eos, rx442_fail1338
    substr $S10, rx442_tgt, rx442_pos, 5
    ne $S10, ucs4:"proto", rx442_fail1338
    add rx442_pos, 5
    repr_bind_attr_int rx442_cur, rx442_curclass, "$!pos", rx442_pos
    $P11 = rx442_cur."ws"()
    repr_get_attr_int $I11, $P11, rx442_curclass, "$!pos"
    lt $I11, 0, rx442_fail1338
    repr_get_attr_int rx442_pos, $P11, rx442_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt445_01347
    nqp_push_label $P11, alt445_11348
    nqp_push_label $P11, alt445_21349
    nqp_rxmark rx442_bstack, alt445_end1346, -1, 0
    rx442_cur."!alt"(rx442_pos, "alt_nfa__18_1360426905.276", $P11)
    goto rx442_fail1338
  alt445_01347:
    add $I11, rx442_pos, 5
    gt $I11, rx442_eos, rx442_fail1338
    substr $S10, rx442_tgt, rx442_pos, 5
    ne $S10, ucs4:"regex", rx442_fail1338
    add rx442_pos, 5
    goto alt445_end1346
  alt445_11348:
    add $I11, rx442_pos, 5
    gt $I11, rx442_eos, rx442_fail1338
    substr $S10, rx442_tgt, rx442_pos, 5
    ne $S10, ucs4:"token", rx442_fail1338
    add rx442_pos, 5
    goto alt445_end1346
  alt445_21349:
    add $I11, rx442_pos, 4
    gt $I11, rx442_eos, rx442_fail1338
    substr $S10, rx442_tgt, rx442_pos, 4
    ne $S10, ucs4:"rule", rx442_fail1338
    add rx442_pos, 4
    goto alt445_end1346
  alt445_end1346:
    nqp_rxcommit rx442_bstack, alt445_end1346
    rx442_cur."!cursor_pass"(rx442_pos, 'backtrack'=>1)
    .return (rx442_cur)
  rx442_restart1337:
    repr_get_attr_obj rx442_cstack, rx442_cur, rx442_curclass, "$!cstack"
  rx442_fail1338:
    unless rx442_bstack, rx442_done1336
    pop $I19, rx442_bstack
    if_null rx442_cstack, rx442_cstack_done1341
    unless rx442_cstack, rx442_cstack_done1341
    dec $I19
    set $P11, rx442_cstack[$I19]
  rx442_cstack_done1341:
    pop rx442_rep, rx442_bstack
    pop rx442_pos, rx442_bstack
    pop $I19, rx442_bstack
    lt rx442_pos, -1, rx442_done1336
    lt rx442_pos, 0, rx442_fail1338
    eq $I19, 0, rx442_fail1338
    nqp_islist $I20, rx442_cstack
    unless $I20, rx442_jump1339
    elements $I18, rx442_bstack
    le $I18, 0, rx442_cut1340
    dec $I18
    set $I18, rx442_bstack[$I18]
  rx442_cut1340:
    assign rx442_cstack, $I18
  rx442_jump1339:
    jump $I19
  rx442_done1336:
    rx442_cur."!cursor_fail"()
    .return (rx442_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_93_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 935
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx447_tgt
    .local int rx447_pos
    .local int rx447_off
    .local int rx447_eos
    .local int rx447_rep
    .local pmc rx447_cur
    .local pmc rx447_curclass
    .local pmc rx447_bstack
    .local pmc rx447_cstack
    (rx447_cur, rx447_tgt, rx447_pos, rx447_curclass, rx447_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx447_cur
    length rx447_eos, rx447_tgt
    eq $I19, 1, rx447_restart1353
    gt rx447_pos, rx447_eos, rx447_fail1354
    repr_get_attr_int $I11, self, rx447_curclass, "$!from"
    ne $I11, -1, rxscan448_done1360
    goto rxscan448_scan1359
  rxscan448_loop1358:
    inc rx447_pos
    gt rx447_pos, rx447_eos, rx447_fail1354
    repr_bind_attr_int rx447_cur, rx447_curclass, "$!from", rx447_pos
  rxscan448_scan1359:
    nqp_rxmark rx447_bstack, rxscan448_loop1358, rx447_pos, 0
  rxscan448_done1360:
    repr_bind_attr_int rx447_cur, rx447_curclass, "$!pos", rx447_pos
    $P11 = rx447_cur."regex_declarator"()
    repr_get_attr_int $I11, $P11, rx447_curclass, "$!pos"
    lt $I11, 0, rx447_fail1354
    nqp_rxmark rx447_bstack, rxsubrule449_pass1361, -1, 0
  rxsubrule449_pass1361:
    rx447_cstack = rx447_cur."!cursor_capture"($P11, "regex_declarator")
    repr_get_attr_int rx447_pos, $P11, rx447_curclass, "$!pos"
    rx447_cur."!cursor_pass"(rx447_pos, "term:sym<regex_declarator>", 'backtrack'=>1)
    .return (rx447_cur)
  rx447_restart1353:
    repr_get_attr_obj rx447_cstack, rx447_cur, rx447_curclass, "$!cstack"
  rx447_fail1354:
    unless rx447_bstack, rx447_done1352
    pop $I19, rx447_bstack
    if_null rx447_cstack, rx447_cstack_done1357
    unless rx447_cstack, rx447_cstack_done1357
    dec $I19
    set $P11, rx447_cstack[$I19]
  rx447_cstack_done1357:
    pop rx447_rep, rx447_bstack
    pop rx447_pos, rx447_bstack
    pop $I19, rx447_bstack
    lt rx447_pos, -1, rx447_done1352
    lt rx447_pos, 0, rx447_fail1354
    eq $I19, 0, rx447_fail1354
    nqp_islist $I20, rx447_cstack
    unless $I20, rx447_jump1355
    elements $I18, rx447_bstack
    le $I18, 0, rx447_cut1356
    dec $I18
    set $I18, rx447_bstack[$I18]
  rx447_cut1356:
    assign rx447_cstack, $I18
  rx447_jump1355:
    jump $I19
  rx447_done1352:
    rx447_cur."!cursor_fail"()
    .return (rx447_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_94_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 936
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx450_tgt
    .local int rx450_pos
    .local int rx450_off
    .local int rx450_eos
    .local int rx450_rep
    .local pmc rx450_cur
    .local pmc rx450_curclass
    .local pmc rx450_bstack
    .local pmc rx450_cstack
    (rx450_cur, rx450_tgt, rx450_pos, rx450_curclass, rx450_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx450_cur
    length rx450_eos, rx450_tgt
    eq $I19, 1, rx450_restart1364
    gt rx450_pos, rx450_eos, rx450_fail1365
    repr_get_attr_int $I11, self, rx450_curclass, "$!from"
    ne $I11, -1, rxscan451_done1371
    goto rxscan451_scan1370
  rxscan451_loop1369:
    inc rx450_pos
    gt rx450_pos, rx450_eos, rx450_fail1365
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!from", rx450_pos
  rxscan451_scan1370:
    nqp_rxmark rx450_bstack, rxscan451_loop1369, rx450_pos, 0
  rxscan451_done1371:
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!pos", rx450_pos
    $P11 = rx450_cur."statement_prefix"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1365
    nqp_rxmark rx450_bstack, rxsubrule452_pass1372, -1, 0
  rxsubrule452_pass1372:
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "statement_prefix")
    repr_get_attr_int rx450_pos, $P11, rx450_curclass, "$!pos"
    rx450_cur."!cursor_pass"(rx450_pos, "term:sym<statement_prefix>", 'backtrack'=>1)
    .return (rx450_cur)
  rx450_restart1364:
    repr_get_attr_obj rx450_cstack, rx450_cur, rx450_curclass, "$!cstack"
  rx450_fail1365:
    unless rx450_bstack, rx450_done1363
    pop $I19, rx450_bstack
    if_null rx450_cstack, rx450_cstack_done1368
    unless rx450_cstack, rx450_cstack_done1368
    dec $I19
    set $P11, rx450_cstack[$I19]
  rx450_cstack_done1368:
    pop rx450_rep, rx450_bstack
    pop rx450_pos, rx450_bstack
    pop $I19, rx450_bstack
    lt rx450_pos, -1, rx450_done1363
    lt rx450_pos, 0, rx450_fail1365
    eq $I19, 0, rx450_fail1365
    nqp_islist $I20, rx450_cstack
    unless $I20, rx450_jump1366
    elements $I18, rx450_bstack
    le $I18, 0, rx450_cut1367
    dec $I18
    set $I18, rx450_bstack[$I18]
  rx450_cut1367:
    assign rx450_cstack, $I18
  rx450_jump1366:
    jump $I19
  rx450_done1363:
    rx450_cur."!cursor_fail"()
    .return (rx450_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_95_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 937
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx453_tgt
    .local int rx453_pos
    .local int rx453_off
    .local int rx453_eos
    .local int rx453_rep
    .local pmc rx453_cur
    .local pmc rx453_curclass
    .local pmc rx453_bstack
    .local pmc rx453_cstack
    (rx453_cur, rx453_tgt, rx453_pos, rx453_curclass, rx453_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx453_cur
    length rx453_eos, rx453_tgt
    eq $I19, 1, rx453_restart1375
    gt rx453_pos, rx453_eos, rx453_fail1376
    repr_get_attr_int $I11, self, rx453_curclass, "$!from"
    ne $I11, -1, rxscan454_done1382
    goto rxscan454_scan1381
  rxscan454_loop1380:
    inc rx453_pos
    gt rx453_pos, rx453_eos, rx453_fail1376
    repr_bind_attr_int rx453_cur, rx453_curclass, "$!from", rx453_pos
  rxscan454_scan1381:
    nqp_rxmark rx453_bstack, rxscan454_loop1380, rx453_pos, 0
  rxscan454_done1382:
    repr_bind_attr_int rx453_cur, rx453_curclass, "$!pos", rx453_pos
    $P11 = rx453_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx453_curclass, "$!pos"
    lt $I11, 0, rx453_fail1376
    repr_bind_attr_int rx453_cur, rx453_curclass, "$!pos", rx453_pos
    $P11 = rx453_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx453_curclass, "$!pos"
    lt $I11, 0, rx453_fail1376
    nqp_rxmark rx453_bstack, rxsubrule455_pass1383, -1, 0
  rxsubrule455_pass1383:
    rx453_cstack = rx453_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx453_pos, $P11, rx453_curclass, "$!pos"
    rx453_cur."!cursor_pass"(rx453_pos, "term:sym<lambda>", 'backtrack'=>1)
    .return (rx453_cur)
  rx453_restart1375:
    repr_get_attr_obj rx453_cstack, rx453_cur, rx453_curclass, "$!cstack"
  rx453_fail1376:
    unless rx453_bstack, rx453_done1374
    pop $I19, rx453_bstack
    if_null rx453_cstack, rx453_cstack_done1379
    unless rx453_cstack, rx453_cstack_done1379
    dec $I19
    set $P11, rx453_cstack[$I19]
  rx453_cstack_done1379:
    pop rx453_rep, rx453_bstack
    pop rx453_pos, rx453_bstack
    pop $I19, rx453_bstack
    lt rx453_pos, -1, rx453_done1374
    lt rx453_pos, 0, rx453_fail1376
    eq $I19, 0, rx453_fail1376
    nqp_islist $I20, rx453_cstack
    unless $I20, rx453_jump1377
    elements $I18, rx453_bstack
    le $I18, 0, rx453_cut1378
    dec $I18
    set $I18, rx453_bstack[$I18]
  rx453_cut1378:
    assign rx453_cstack, $I18
  rx453_jump1377:
    jump $I19
  rx453_done1374:
    rx453_cur."!cursor_fail"()
    .return (rx453_cur) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_96_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 939
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx456_tgt
    .local int rx456_pos
    .local int rx456_off
    .local int rx456_eos
    .local int rx456_rep
    .local pmc rx456_cur
    .local pmc rx456_curclass
    .local pmc rx456_bstack
    .local pmc rx456_cstack
    (rx456_cur, rx456_tgt, rx456_pos, rx456_curclass, rx456_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx456_cur
    length rx456_eos, rx456_tgt
    eq $I19, 1, rx456_restart1386
    gt rx456_pos, rx456_eos, rx456_fail1387
    repr_get_attr_int $I11, self, rx456_curclass, "$!from"
    ne $I11, -1, rxscan457_done1393
    goto rxscan457_scan1392
  rxscan457_loop1391:
    inc rx456_pos
    gt rx456_pos, rx456_eos, rx456_fail1387
    repr_bind_attr_int rx456_cur, rx456_curclass, "$!from", rx456_pos
  rxscan457_scan1392:
    nqp_rxmark rx456_bstack, rxscan457_loop1391, rx456_pos, 0
  rxscan457_done1393:
    repr_bind_attr_int rx456_cur, rx456_curclass, "$!pos", rx456_pos
    $P11 = rx456_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx456_curclass, "$!pos"
    lt $I11, 0, rx456_fail1387
    nqp_rxmark rx456_bstack, rxsubrule458_pass1394, -1, 0
  rxsubrule458_pass1394:
    rx456_cstack = rx456_cur."!cursor_capture"($P11, "key")
    repr_get_attr_int rx456_pos, $P11, rx456_curclass, "$!pos"
    nqp_rxmark rx456_bstack, rxquantr459_done1396, rx456_pos, 0
  rxquantr459_loop1395:
    ge rx456_pos, rx456_eos, rx456_fail1387
    substr $S11, rx456_tgt, rx456_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx456_fail1387
    inc rx456_pos
    nqp_rxpeek $I19, rx456_bstack, rxquantr459_done1396
    inc $I19
    inc $I19
    set rx456_rep, rx456_bstack[$I19]
    nqp_rxcommit rx456_bstack, rxquantr459_done1396
    inc rx456_rep
    nqp_rxmark rx456_bstack, rxquantr459_done1396, rx456_pos, rx456_rep
    goto rxquantr459_loop1395
  rxquantr459_done1396:
    add $I11, rx456_pos, 2
    gt $I11, rx456_eos, rx456_fail1387
    substr $S10, rx456_tgt, rx456_pos, 2
    ne $S10, ucs4:"=>", rx456_fail1387
    add rx456_pos, 2
    repr_bind_attr_int rx456_cur, rx456_curclass, "$!pos", rx456_pos
    $P11 = rx456_cur."ws"()
    repr_get_attr_int $I11, $P11, rx456_curclass, "$!pos"
    lt $I11, 0, rx456_fail1387
    repr_get_attr_int rx456_pos, $P11, rx456_curclass, "$!pos"
    repr_bind_attr_int rx456_cur, rx456_curclass, "$!pos", rx456_pos
    $P11 = rx456_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx456_curclass, "$!pos"
    lt $I11, 0, rx456_fail1387
    nqp_rxmark rx456_bstack, rxsubrule461_pass1398, -1, 0
  rxsubrule461_pass1398:
    rx456_cstack = rx456_cur."!cursor_capture"($P11, "val")
    repr_get_attr_int rx456_pos, $P11, rx456_curclass, "$!pos"
    rx456_cur."!cursor_pass"(rx456_pos, "fatarrow", 'backtrack'=>1)
    .return (rx456_cur)
  rx456_restart1386:
    repr_get_attr_obj rx456_cstack, rx456_cur, rx456_curclass, "$!cstack"
  rx456_fail1387:
    unless rx456_bstack, rx456_done1385
    pop $I19, rx456_bstack
    if_null rx456_cstack, rx456_cstack_done1390
    unless rx456_cstack, rx456_cstack_done1390
    dec $I19
    set $P11, rx456_cstack[$I19]
  rx456_cstack_done1390:
    pop rx456_rep, rx456_bstack
    pop rx456_pos, rx456_bstack
    pop $I19, rx456_bstack
    lt rx456_pos, -1, rx456_done1385
    lt rx456_pos, 0, rx456_fail1387
    eq $I19, 0, rx456_fail1387
    nqp_islist $I20, rx456_cstack
    unless $I20, rx456_jump1388
    elements $I18, rx456_bstack
    le $I18, 0, rx456_cut1389
    dec $I18
    set $I18, rx456_bstack[$I18]
  rx456_cut1389:
    assign rx456_cstack, $I18
  rx456_jump1388:
    jump $I19
  rx456_done1385:
    rx456_cur."!cursor_fail"()
    .return (rx456_cur) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_97_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 943
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx462_tgt
    .local int rx462_pos
    .local int rx462_off
    .local int rx462_eos
    .local int rx462_rep
    .local pmc rx462_cur
    .local pmc rx462_curclass
    .local pmc rx462_bstack
    .local pmc rx462_cstack
    (rx462_cur, rx462_tgt, rx462_pos, rx462_curclass, rx462_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx462_cur
    length rx462_eos, rx462_tgt
    eq $I19, 1, rx462_restart1401
    gt rx462_pos, rx462_eos, rx462_fail1402
    repr_get_attr_int $I11, self, rx462_curclass, "$!from"
    ne $I11, -1, rxscan463_done1408
    goto rxscan463_scan1407
  rxscan463_loop1406:
    inc rx462_pos
    gt rx462_pos, rx462_eos, rx462_fail1402
    repr_bind_attr_int rx462_cur, rx462_curclass, "$!from", rx462_pos
  rxscan463_scan1407:
    nqp_rxmark rx462_bstack, rxscan463_loop1406, rx462_pos, 0
  rxscan463_done1408:
    add $I11, rx462_pos, 1
    gt $I11, rx462_eos, rx462_fail1402
    substr $S10, rx462_tgt, rx462_pos, 1
    ne $S10, ucs4:":", rx462_fail1402
    add rx462_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt464_01410
    nqp_push_label $P11, alt464_11414
    nqp_push_label $P11, alt464_21420
    nqp_push_label $P11, alt464_31422
    nqp_rxmark rx462_bstack, alt464_end1409, -1, 0
    rx462_cur."!alt"(rx462_pos, "alt_nfa__19_1360426905.313", $P11)
    goto rx462_fail1402
  alt464_01410:
    nqp_rxmark rx462_bstack, rxcap465_fail1412, rx462_pos, 0
    add $I11, rx462_pos, 1
    gt $I11, rx462_eos, rx462_fail1402
    substr $S10, rx462_tgt, rx462_pos, 1
    ne $S10, ucs4:"!", rx462_fail1402
    add rx462_pos, 1
    nqp_rxpeek $I19, rx462_bstack, rxcap465_fail1412
    inc $I19
    set $I11, rx462_bstack[$I19]
    repr_bind_attr_int rx462_cur, rx462_curclass, "$!pos", rx462_pos
    $P11 = rx462_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx462_pos)
    rx462_cstack = rx462_cur."!cursor_capture"($P11, "not")
    goto rxcap465_done1411
  rxcap465_fail1412:
    goto rx462_fail1402
  rxcap465_done1411:
    repr_bind_attr_int rx462_cur, rx462_curclass, "$!pos", rx462_pos
    $P11 = rx462_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx462_curclass, "$!pos"
    lt $I11, 0, rx462_fail1402
    nqp_rxmark rx462_bstack, rxsubrule466_pass1413, -1, 0
  rxsubrule466_pass1413:
    rx462_cstack = rx462_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx462_pos, $P11, rx462_curclass, "$!pos"
    goto alt464_end1409
  alt464_11414:
    repr_bind_attr_int rx462_cur, rx462_curclass, "$!pos", rx462_pos
    $P11 = rx462_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx462_curclass, "$!pos"
    lt $I11, 0, rx462_fail1402
    nqp_rxmark rx462_bstack, rxsubrule467_pass1415, -1, 0
  rxsubrule467_pass1415:
    rx462_cstack = rx462_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx462_pos, $P11, rx462_curclass, "$!pos"
    nqp_rxmark rx462_bstack, rxquantr468_done1417, rx462_pos, 0
  rxquantr468_loop1416:
    repr_bind_attr_int rx462_cur, rx462_curclass, "$!pos", rx462_pos
    $P11 = rx462_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx462_curclass, "$!pos"
    lt $I11, 0, rx462_fail1402
    goto rxsubrule469_pass1418
  rxsubrule469_back1419:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx462_curclass, "$!pos"
    lt $I11, 0, rx462_fail1402
  rxsubrule469_pass1418:
    rx462_cstack = rx462_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule469_back1419
    push rx462_bstack, $I11
    push rx462_bstack, 0
    push rx462_bstack, rx462_pos
    elements $I11, rx462_cstack
    push rx462_bstack, $I11
    repr_get_attr_int rx462_pos, $P11, rx462_curclass, "$!pos"
    nqp_rxpeek $I19, rx462_bstack, rxquantr468_done1417
    inc $I19
    inc $I19
    set rx462_rep, rx462_bstack[$I19]
    nqp_rxcommit rx462_bstack, rxquantr468_done1417
    inc rx462_rep
  rxquantr468_done1417:
    goto alt464_end1409
  alt464_21420:
    repr_bind_attr_int rx462_cur, rx462_curclass, "$!pos", rx462_pos
    $P11 = rx462_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx462_curclass, "$!pos"
    lt $I11, 0, rx462_fail1402
    nqp_rxmark rx462_bstack, rxsubrule470_pass1421, -1, 0
  rxsubrule470_pass1421:
    rx462_cstack = rx462_cur."!cursor_capture"($P11, "circumfix")
    repr_get_attr_int rx462_pos, $P11, rx462_curclass, "$!pos"
    goto alt464_end1409
  alt464_31422:
    repr_bind_attr_int rx462_cur, rx462_curclass, "$!pos", rx462_pos
    $P11 = rx462_cur."variable"()
    repr_get_attr_int $I11, $P11, rx462_curclass, "$!pos"
    lt $I11, 0, rx462_fail1402
    nqp_rxmark rx462_bstack, rxsubrule471_pass1423, -1, 0
  rxsubrule471_pass1423:
    rx462_cstack = rx462_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx462_pos, $P11, rx462_curclass, "$!pos"
    goto alt464_end1409
  alt464_end1409:
    nqp_rxcommit rx462_bstack, alt464_end1409
    rx462_cur."!cursor_pass"(rx462_pos, "colonpair", 'backtrack'=>1)
    .return (rx462_cur)
  rx462_restart1401:
    repr_get_attr_obj rx462_cstack, rx462_cur, rx462_curclass, "$!cstack"
  rx462_fail1402:
    unless rx462_bstack, rx462_done1400
    pop $I19, rx462_bstack
    if_null rx462_cstack, rx462_cstack_done1405
    unless rx462_cstack, rx462_cstack_done1405
    dec $I19
    set $P11, rx462_cstack[$I19]
  rx462_cstack_done1405:
    pop rx462_rep, rx462_bstack
    pop rx462_pos, rx462_bstack
    pop $I19, rx462_bstack
    lt rx462_pos, -1, rx462_done1400
    lt rx462_pos, 0, rx462_fail1402
    eq $I19, 0, rx462_fail1402
    nqp_islist $I20, rx462_cstack
    unless $I20, rx462_jump1403
    elements $I18, rx462_bstack
    le $I18, 0, rx462_cut1404
    dec $I18
    set $I18, rx462_bstack[$I18]
  rx462_cut1404:
    assign rx462_cstack, $I18
  rx462_jump1403:
    jump $I19
  rx462_done1400:
    rx462_cur."!cursor_fail"()
    .return (rx462_cur) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_98_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 953
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx472_tgt
    .local int rx472_pos
    .local int rx472_off
    .local int rx472_eos
    .local int rx472_rep
    .local pmc rx472_cur
    .local pmc rx472_curclass
    .local pmc rx472_bstack
    .local pmc rx472_cstack
    (rx472_cur, rx472_tgt, rx472_pos, rx472_curclass, rx472_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx472_cur
    length rx472_eos, rx472_tgt
    eq $I19, 1, rx472_restart1426
    gt rx472_pos, rx472_eos, rx472_fail1427
    repr_get_attr_int $I11, self, rx472_curclass, "$!from"
    ne $I11, -1, rxscan473_done1433
    goto rxscan473_scan1432
  rxscan473_loop1431:
    inc rx472_pos
    gt rx472_pos, rx472_eos, rx472_fail1427
    repr_bind_attr_int rx472_cur, rx472_curclass, "$!from", rx472_pos
  rxscan473_scan1432:
    nqp_rxmark rx472_bstack, rxscan473_loop1431, rx472_pos, 0
  rxscan473_done1433:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt474_01435
    nqp_push_label $P11, alt474_11442
    nqp_push_label $P11, alt474_21445
    nqp_push_label $P11, alt474_31453
    nqp_rxmark rx472_bstack, alt474_end1434, -1, 0
    rx472_cur."!alt"(rx472_pos, "alt_nfa__20_1360426905.331", $P11)
    goto rx472_fail1427
  alt474_01435:
    repr_bind_attr_int rx472_cur, rx472_curclass, "$!pos", rx472_pos
    $P11 = rx472_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx472_curclass, "$!pos"
    lt $I11, 0, rx472_fail1427
    nqp_rxmark rx472_bstack, rxsubrule475_pass1436, -1, 0
  rxsubrule475_pass1436:
    rx472_cstack = rx472_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx472_pos, $P11, rx472_curclass, "$!pos"
    nqp_rxmark rx472_bstack, rxquantr476_done1438, rx472_pos, 0
  rxquantr476_loop1437:
    repr_bind_attr_int rx472_cur, rx472_curclass, "$!pos", rx472_pos
    $P11 = rx472_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx472_curclass, "$!pos"
    lt $I11, 0, rx472_fail1427
    goto rxsubrule477_pass1439
  rxsubrule477_back1440:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx472_curclass, "$!pos"
    lt $I11, 0, rx472_fail1427
  rxsubrule477_pass1439:
    rx472_cstack = rx472_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule477_back1440
    push rx472_bstack, $I11
    push rx472_bstack, 0
    push rx472_bstack, rx472_pos
    elements $I11, rx472_cstack
    push rx472_bstack, $I11
    repr_get_attr_int rx472_pos, $P11, rx472_curclass, "$!pos"
    nqp_rxpeek $I19, rx472_bstack, rxquantr476_done1438
    inc $I19
    inc $I19
    set rx472_rep, rx472_bstack[$I19]
    nqp_rxcommit rx472_bstack, rxquantr476_done1438
    inc rx472_rep
  rxquantr476_done1438:
    repr_bind_attr_int rx472_cur, rx472_curclass, "$!pos", rx472_pos
    $P11 = rx472_cur."name"()
    repr_get_attr_int $I11, $P11, rx472_curclass, "$!pos"
    lt $I11, 0, rx472_fail1427
    nqp_rxmark rx472_bstack, rxsubrule478_pass1441, -1, 0
  rxsubrule478_pass1441:
    rx472_cstack = rx472_cur."!cursor_capture"($P11, "desigilname")
    repr_get_attr_int rx472_pos, $P11, rx472_curclass, "$!pos"
    goto alt474_end1434
  alt474_11442:
    repr_bind_attr_int rx472_cur, rx472_curclass, "$!pos", rx472_pos
    $P11 = rx472_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx472_curclass, "$!pos"
    lt $I11, 0, rx472_fail1427
    nqp_rxmark rx472_bstack, rxsubrule479_pass1443, -1, 0
  rxsubrule479_pass1443:
    rx472_cstack = rx472_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx472_pos, $P11, rx472_curclass, "$!pos"
    ge rx472_pos, rx472_eos, rx472_fail1427
    substr $S11, rx472_tgt, rx472_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx472_fail1427
    repr_bind_attr_int rx472_cur, rx472_curclass, "$!pos", rx472_pos
    $P11 = rx472_cur."postcircumfix"()
    repr_get_attr_int $I11, $P11, rx472_curclass, "$!pos"
    lt $I11, 0, rx472_fail1427
    nqp_rxmark rx472_bstack, rxsubrule480_pass1444, -1, 0
  rxsubrule480_pass1444:
    rx472_cstack = rx472_cur."!cursor_capture"($P11, "postcircumfix")
    repr_get_attr_int rx472_pos, $P11, rx472_curclass, "$!pos"
    goto alt474_end1434
  alt474_21445:
    repr_bind_attr_int rx472_cur, rx472_curclass, "$!pos", rx472_pos
    $P11 = rx472_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx472_curclass, "$!pos"
    lt $I11, 0, rx472_fail1427
    nqp_rxmark rx472_bstack, rxsubrule481_pass1446, -1, 0
  rxsubrule481_pass1446:
    rx472_cstack = rx472_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx472_pos, $P11, rx472_curclass, "$!pos"
    add $I11, rx472_pos, 1
    gt $I11, rx472_eos, rx472_fail1427
    substr $S10, rx472_tgt, rx472_pos, 1
    ne $S10, ucs4:"(", rx472_fail1427
    add rx472_pos, 1
    repr_bind_attr_int rx472_cur, rx472_curclass, "$!pos", rx472_pos
    $P11 = rx472_cur."semilist"()
    repr_get_attr_int $I11, $P11, rx472_curclass, "$!pos"
    lt $I11, 0, rx472_fail1427
    nqp_rxmark rx472_bstack, rxsubrule482_pass1447, -1, 0
  rxsubrule482_pass1447:
    rx472_cstack = rx472_cur."!cursor_capture"($P11, "semilist")
    repr_get_attr_int rx472_pos, $P11, rx472_curclass, "$!pos"
  alt483_01449:
    nqp_rxmark rx472_bstack, alt483_11450, rx472_pos, 0
    add $I11, rx472_pos, 1
    gt $I11, rx472_eos, rx472_fail1427
    substr $S10, rx472_tgt, rx472_pos, 1
    ne $S10, ucs4:")", rx472_fail1427
    add rx472_pos, 1
    goto alt483_end1448
  alt483_11450:
    repr_bind_attr_int rx472_cur, rx472_curclass, "$!pos", rx472_pos
    $P11 = rx472_cur."FAILGOAL"("')'")
    repr_get_attr_int $I11, $P11, rx472_curclass, "$!pos"
    lt $I11, 0, rx472_fail1427
    goto rxsubrule484_pass1451
  rxsubrule484_back1452:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx472_curclass, "$!pos"
    lt $I11, 0, rx472_fail1427
  rxsubrule484_pass1451:
    rx472_cstack = rx472_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule484_back1452
    push rx472_bstack, $I11
    push rx472_bstack, 0
    push rx472_bstack, rx472_pos
    elements $I11, rx472_cstack
    push rx472_bstack, $I11
    repr_get_attr_int rx472_pos, $P11, rx472_curclass, "$!pos"
  alt483_end1448:
    goto alt474_end1434
  alt474_31453:
    nqp_rxmark rx472_bstack, rxcap485_fail1455, rx472_pos, 0
    add $I11, rx472_pos, 1
    gt $I11, rx472_eos, rx472_fail1427
    substr $S10, rx472_tgt, rx472_pos, 1
    ne $S10, ucs4:"$", rx472_fail1427
    add rx472_pos, 1
    nqp_rxpeek $I19, rx472_bstack, rxcap485_fail1455
    inc $I19
    set $I11, rx472_bstack[$I19]
    repr_bind_attr_int rx472_cur, rx472_curclass, "$!pos", rx472_pos
    $P11 = rx472_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx472_pos)
    rx472_cstack = rx472_cur."!cursor_capture"($P11, "sigil")
    goto rxcap485_done1454
  rxcap485_fail1455:
    goto rx472_fail1427
  rxcap485_done1454:
    nqp_rxmark rx472_bstack, rxcap486_fail1457, rx472_pos, 0
    ge rx472_pos, rx472_eos, rx472_fail1427
    substr $S11, rx472_tgt, rx472_pos, 1
    index $I11, ucs4:"/_!", $S11
    lt $I11, 0, rx472_fail1427
    inc rx472_pos
    nqp_rxpeek $I19, rx472_bstack, rxcap486_fail1457
    inc $I19
    set $I11, rx472_bstack[$I19]
    repr_bind_attr_int rx472_cur, rx472_curclass, "$!pos", rx472_pos
    $P11 = rx472_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx472_pos)
    rx472_cstack = rx472_cur."!cursor_capture"($P11, "desigilname")
    goto rxcap486_done1456
  rxcap486_fail1457:
    goto rx472_fail1427
  rxcap486_done1456:
    goto alt474_end1434
  alt474_end1434:
    rx472_cur."!cursor_pass"(rx472_pos, "variable", 'backtrack'=>1)
    .return (rx472_cur)
  rx472_restart1426:
    repr_get_attr_obj rx472_cstack, rx472_cur, rx472_curclass, "$!cstack"
  rx472_fail1427:
    unless rx472_bstack, rx472_done1425
    pop $I19, rx472_bstack
    if_null rx472_cstack, rx472_cstack_done1430
    unless rx472_cstack, rx472_cstack_done1430
    dec $I19
    set $P11, rx472_cstack[$I19]
  rx472_cstack_done1430:
    pop rx472_rep, rx472_bstack
    pop rx472_pos, rx472_bstack
    pop $I19, rx472_bstack
    lt rx472_pos, -1, rx472_done1425
    lt rx472_pos, 0, rx472_fail1427
    eq $I19, 0, rx472_fail1427
    nqp_islist $I20, rx472_cstack
    unless $I20, rx472_jump1428
    elements $I18, rx472_bstack
    le $I18, 0, rx472_cut1429
    dec $I18
    set $I18, rx472_bstack[$I18]
  rx472_cut1429:
    assign rx472_cstack, $I18
  rx472_jump1428:
    jump $I19
  rx472_done1425:
    rx472_cur."!cursor_fail"()
    .return (rx472_cur) 
.end
.HLL "nqp"
.namespace []
.sub "sigil" :subid("cuid_99_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 960
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx487_tgt
    .local int rx487_pos
    .local int rx487_off
    .local int rx487_eos
    .local int rx487_rep
    .local pmc rx487_cur
    .local pmc rx487_curclass
    .local pmc rx487_bstack
    .local pmc rx487_cstack
    (rx487_cur, rx487_tgt, rx487_pos, rx487_curclass, rx487_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx487_cur
    length rx487_eos, rx487_tgt
    eq $I19, 1, rx487_restart1460
    gt rx487_pos, rx487_eos, rx487_fail1461
    repr_get_attr_int $I11, self, rx487_curclass, "$!from"
    ne $I11, -1, rxscan488_done1467
    goto rxscan488_scan1466
  rxscan488_loop1465:
    inc rx487_pos
    gt rx487_pos, rx487_eos, rx487_fail1461
    repr_bind_attr_int rx487_cur, rx487_curclass, "$!from", rx487_pos
  rxscan488_scan1466:
    nqp_rxmark rx487_bstack, rxscan488_loop1465, rx487_pos, 0
  rxscan488_done1467:
    ge rx487_pos, rx487_eos, rx487_fail1461
    substr $S11, rx487_tgt, rx487_pos, 1
    index $I11, ucs4:"$@%&", $S11
    lt $I11, 0, rx487_fail1461
    inc rx487_pos
    rx487_cur."!cursor_pass"(rx487_pos, "sigil", 'backtrack'=>1)
    .return (rx487_cur)
  rx487_restart1460:
    repr_get_attr_obj rx487_cstack, rx487_cur, rx487_curclass, "$!cstack"
  rx487_fail1461:
    unless rx487_bstack, rx487_done1459
    pop $I19, rx487_bstack
    if_null rx487_cstack, rx487_cstack_done1464
    unless rx487_cstack, rx487_cstack_done1464
    dec $I19
    set $P11, rx487_cstack[$I19]
  rx487_cstack_done1464:
    pop rx487_rep, rx487_bstack
    pop rx487_pos, rx487_bstack
    pop $I19, rx487_bstack
    lt rx487_pos, -1, rx487_done1459
    lt rx487_pos, 0, rx487_fail1461
    eq $I19, 0, rx487_fail1461
    nqp_islist $I20, rx487_cstack
    unless $I20, rx487_jump1462
    elements $I18, rx487_bstack
    le $I18, 0, rx487_cut1463
    dec $I18
    set $I18, rx487_bstack[$I18]
  rx487_cut1463:
    assign rx487_cstack, $I18
  rx487_jump1462:
    jump $I19
  rx487_done1459:
    rx487_cur."!cursor_fail"()
    .return (rx487_cur) 
.end
.HLL "nqp"
.namespace []
.sub "twigil" :subid("cuid_100_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 962
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx489_tgt
    .local int rx489_pos
    .local int rx489_off
    .local int rx489_eos
    .local int rx489_rep
    .local pmc rx489_cur
    .local pmc rx489_curclass
    .local pmc rx489_bstack
    .local pmc rx489_cstack
    (rx489_cur, rx489_tgt, rx489_pos, rx489_curclass, rx489_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx489_cur
    length rx489_eos, rx489_tgt
    eq $I19, 1, rx489_restart1470
    gt rx489_pos, rx489_eos, rx489_fail1471
    repr_get_attr_int $I11, self, rx489_curclass, "$!from"
    ne $I11, -1, rxscan490_done1477
    goto rxscan490_scan1476
  rxscan490_loop1475:
    inc rx489_pos
    gt rx489_pos, rx489_eos, rx489_fail1471
    repr_bind_attr_int rx489_cur, rx489_curclass, "$!from", rx489_pos
  rxscan490_scan1476:
    nqp_rxmark rx489_bstack, rxscan490_loop1475, rx489_pos, 0
  rxscan490_done1477:
    ge rx489_pos, rx489_eos, rx489_fail1471
    substr $S11, rx489_tgt, rx489_pos, 1
    index $I11, ucs4:"*!?", $S11
    lt $I11, 0, rx489_fail1471
    inc rx489_pos
    rx489_cur."!cursor_pass"(rx489_pos, "twigil", 'backtrack'=>1)
    .return (rx489_cur)
  rx489_restart1470:
    repr_get_attr_obj rx489_cstack, rx489_cur, rx489_curclass, "$!cstack"
  rx489_fail1471:
    unless rx489_bstack, rx489_done1469
    pop $I19, rx489_bstack
    if_null rx489_cstack, rx489_cstack_done1474
    unless rx489_cstack, rx489_cstack_done1474
    dec $I19
    set $P11, rx489_cstack[$I19]
  rx489_cstack_done1474:
    pop rx489_rep, rx489_bstack
    pop rx489_pos, rx489_bstack
    pop $I19, rx489_bstack
    lt rx489_pos, -1, rx489_done1469
    lt rx489_pos, 0, rx489_fail1471
    eq $I19, 0, rx489_fail1471
    nqp_islist $I20, rx489_cstack
    unless $I20, rx489_jump1472
    elements $I18, rx489_bstack
    le $I18, 0, rx489_cut1473
    dec $I18
    set $I18, rx489_bstack[$I18]
  rx489_cut1473:
    assign rx489_cstack, $I18
  rx489_jump1472:
    jump $I19
  rx489_done1469:
    rx489_cur."!cursor_fail"()
    .return (rx489_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator" :subid("cuid_101_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 964
    .param pmc self 
    $P5001 = self."!protoregex"("package_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_102_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 965
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx491_tgt
    .local int rx491_pos
    .local int rx491_off
    .local int rx491_eos
    .local int rx491_rep
    .local pmc rx491_cur
    .local pmc rx491_curclass
    .local pmc rx491_bstack
    .local pmc rx491_cstack
    (rx491_cur, rx491_tgt, rx491_pos, rx491_curclass, rx491_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx491_cur
    length rx491_eos, rx491_tgt
    eq $I19, 1, rx491_restart1480
    gt rx491_pos, rx491_eos, rx491_fail1481
    repr_get_attr_int $I11, self, rx491_curclass, "$!from"
    ne $I11, -1, rxscan492_done1487
    goto rxscan492_scan1486
  rxscan492_loop1485:
    inc rx491_pos
    gt rx491_pos, rx491_eos, rx491_fail1481
    repr_bind_attr_int rx491_cur, rx491_curclass, "$!from", rx491_pos
  rxscan492_scan1486:
    nqp_rxmark rx491_bstack, rxscan492_loop1485, rx491_pos, 0
  rxscan492_done1487:
    repr_bind_attr_int rx491_cur, rx491_curclass, "$!pos", rx491_pos
    store_lex unicode:"$\x{a2}", rx491_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1488
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1489
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5007
  fallback1489:
    unless_null $P5004, vivi_4931490
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4931490:
    set $P5003, $P5004
  fallback1488:
    set $P101, $P5003
    repr_bind_attr_int rx491_cur, rx491_curclass, "$!pos", rx491_pos
    store_lex unicode:"$\x{a2}", rx491_cur
    box $P5009, "module"
    set $P102, $P5009
    nqp_rxmark rx491_bstack, rxcap494_fail1492, rx491_pos, 0
    add $I11, rx491_pos, 6
    gt $I11, rx491_eos, rx491_fail1481
    substr $S10, rx491_tgt, rx491_pos, 6
    ne $S10, ucs4:"module", rx491_fail1481
    add rx491_pos, 6
    nqp_rxpeek $I19, rx491_bstack, rxcap494_fail1492
    inc $I19
    set $I11, rx491_bstack[$I19]
    repr_bind_attr_int rx491_cur, rx491_curclass, "$!pos", rx491_pos
    $P11 = rx491_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx491_pos)
    rx491_cstack = rx491_cur."!cursor_capture"($P11, "sym")
    goto rxcap494_done1491
  rxcap494_fail1492:
    goto rx491_fail1481
  rxcap494_done1491:
    repr_bind_attr_int rx491_cur, rx491_curclass, "$!pos", rx491_pos
    $P11 = rx491_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx491_curclass, "$!pos"
    lt $I11, 0, rx491_fail1481
    nqp_rxmark rx491_bstack, rxsubrule495_pass1493, -1, 0
  rxsubrule495_pass1493:
    rx491_cstack = rx491_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx491_pos, $P11, rx491_curclass, "$!pos"
    rx491_cur."!cursor_pass"(rx491_pos, "package_declarator:sym<module>", 'backtrack'=>1)
    .return (rx491_cur)
  rx491_restart1480:
    repr_get_attr_obj rx491_cstack, rx491_cur, rx491_curclass, "$!cstack"
  rx491_fail1481:
    unless rx491_bstack, rx491_done1479
    pop $I19, rx491_bstack
    if_null rx491_cstack, rx491_cstack_done1484
    unless rx491_cstack, rx491_cstack_done1484
    dec $I19
    set $P11, rx491_cstack[$I19]
  rx491_cstack_done1484:
    pop rx491_rep, rx491_bstack
    pop rx491_pos, rx491_bstack
    pop $I19, rx491_bstack
    lt rx491_pos, -1, rx491_done1479
    lt rx491_pos, 0, rx491_fail1481
    eq $I19, 0, rx491_fail1481
    nqp_islist $I20, rx491_cstack
    unless $I20, rx491_jump1482
    elements $I18, rx491_bstack
    le $I18, 0, rx491_cut1483
    dec $I18
    set $I18, rx491_bstack[$I18]
  rx491_cut1483:
    assign rx491_cstack, $I18
  rx491_jump1482:
    jump $I19
  rx491_done1479:
    rx491_cur."!cursor_fail"()
    .return (rx491_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_103_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 970
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx496_tgt
    .local int rx496_pos
    .local int rx496_off
    .local int rx496_eos
    .local int rx496_rep
    .local pmc rx496_cur
    .local pmc rx496_curclass
    .local pmc rx496_bstack
    .local pmc rx496_cstack
    (rx496_cur, rx496_tgt, rx496_pos, rx496_curclass, rx496_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx496_cur
    length rx496_eos, rx496_tgt
    eq $I19, 1, rx496_restart1496
    gt rx496_pos, rx496_eos, rx496_fail1497
    repr_get_attr_int $I11, self, rx496_curclass, "$!from"
    ne $I11, -1, rxscan497_done1503
    goto rxscan497_scan1502
  rxscan497_loop1501:
    inc rx496_pos
    gt rx496_pos, rx496_eos, rx496_fail1497
    repr_bind_attr_int rx496_cur, rx496_curclass, "$!from", rx496_pos
  rxscan497_scan1502:
    nqp_rxmark rx496_bstack, rxscan497_loop1501, rx496_pos, 0
  rxscan497_done1503:
    repr_bind_attr_int rx496_cur, rx496_curclass, "$!pos", rx496_pos
    store_lex unicode:"$\x{a2}", rx496_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1504
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1505
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5007
  fallback1505:
    unless_null $P5004, vivi_4981506
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4981506:
    set $P5003, $P5004
  fallback1504:
    set $P101, $P5003
    repr_bind_attr_int rx496_cur, rx496_curclass, "$!pos", rx496_pos
    store_lex unicode:"$\x{a2}", rx496_cur
    box $P5009, "knowhow"
    set $P102, $P5009
    nqp_rxmark rx496_bstack, rxcap499_fail1508, rx496_pos, 0
    add $I11, rx496_pos, 7
    gt $I11, rx496_eos, rx496_fail1497
    substr $S10, rx496_tgt, rx496_pos, 7
    ne $S10, ucs4:"knowhow", rx496_fail1497
    add rx496_pos, 7
    nqp_rxpeek $I19, rx496_bstack, rxcap499_fail1508
    inc $I19
    set $I11, rx496_bstack[$I19]
    repr_bind_attr_int rx496_cur, rx496_curclass, "$!pos", rx496_pos
    $P11 = rx496_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx496_pos)
    rx496_cstack = rx496_cur."!cursor_capture"($P11, "sym")
    goto rxcap499_done1507
  rxcap499_fail1508:
    goto rx496_fail1497
  rxcap499_done1507:
    repr_bind_attr_int rx496_cur, rx496_curclass, "$!pos", rx496_pos
    $P11 = rx496_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx496_curclass, "$!pos"
    lt $I11, 0, rx496_fail1497
    nqp_rxmark rx496_bstack, rxsubrule500_pass1509, -1, 0
  rxsubrule500_pass1509:
    rx496_cstack = rx496_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx496_pos, $P11, rx496_curclass, "$!pos"
    rx496_cur."!cursor_pass"(rx496_pos, "package_declarator:sym<knowhow>", 'backtrack'=>1)
    .return (rx496_cur)
  rx496_restart1496:
    repr_get_attr_obj rx496_cstack, rx496_cur, rx496_curclass, "$!cstack"
  rx496_fail1497:
    unless rx496_bstack, rx496_done1495
    pop $I19, rx496_bstack
    if_null rx496_cstack, rx496_cstack_done1500
    unless rx496_cstack, rx496_cstack_done1500
    dec $I19
    set $P11, rx496_cstack[$I19]
  rx496_cstack_done1500:
    pop rx496_rep, rx496_bstack
    pop rx496_pos, rx496_bstack
    pop $I19, rx496_bstack
    lt rx496_pos, -1, rx496_done1495
    lt rx496_pos, 0, rx496_fail1497
    eq $I19, 0, rx496_fail1497
    nqp_islist $I20, rx496_cstack
    unless $I20, rx496_jump1498
    elements $I18, rx496_bstack
    le $I18, 0, rx496_cut1499
    dec $I18
    set $I18, rx496_bstack[$I18]
  rx496_cut1499:
    assign rx496_cstack, $I18
  rx496_jump1498:
    jump $I19
  rx496_done1495:
    rx496_cur."!cursor_fail"()
    .return (rx496_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_104_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 975
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx501_tgt
    .local int rx501_pos
    .local int rx501_off
    .local int rx501_eos
    .local int rx501_rep
    .local pmc rx501_cur
    .local pmc rx501_curclass
    .local pmc rx501_bstack
    .local pmc rx501_cstack
    (rx501_cur, rx501_tgt, rx501_pos, rx501_curclass, rx501_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx501_cur
    length rx501_eos, rx501_tgt
    eq $I19, 1, rx501_restart1512
    gt rx501_pos, rx501_eos, rx501_fail1513
    repr_get_attr_int $I11, self, rx501_curclass, "$!from"
    ne $I11, -1, rxscan502_done1519
    goto rxscan502_scan1518
  rxscan502_loop1517:
    inc rx501_pos
    gt rx501_pos, rx501_eos, rx501_fail1513
    repr_bind_attr_int rx501_cur, rx501_curclass, "$!from", rx501_pos
  rxscan502_scan1518:
    nqp_rxmark rx501_bstack, rxscan502_loop1517, rx501_pos, 0
  rxscan502_done1519:
    repr_bind_attr_int rx501_cur, rx501_curclass, "$!pos", rx501_pos
    store_lex unicode:"$\x{a2}", rx501_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1520
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1521
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5007
  fallback1521:
    unless_null $P5004, vivi_5031522
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5031522:
    set $P5003, $P5004
  fallback1520:
    set $P101, $P5003
    repr_bind_attr_int rx501_cur, rx501_curclass, "$!pos", rx501_pos
    store_lex unicode:"$\x{a2}", rx501_cur
    box $P5009, "class"
    set $P102, $P5009
    nqp_rxmark rx501_bstack, rxcap504_fail1524, rx501_pos, 0
    add $I11, rx501_pos, 5
    gt $I11, rx501_eos, rx501_fail1513
    substr $S10, rx501_tgt, rx501_pos, 5
    ne $S10, ucs4:"class", rx501_fail1513
    add rx501_pos, 5
    nqp_rxpeek $I19, rx501_bstack, rxcap504_fail1524
    inc $I19
    set $I11, rx501_bstack[$I19]
    repr_bind_attr_int rx501_cur, rx501_curclass, "$!pos", rx501_pos
    $P11 = rx501_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx501_pos)
    rx501_cstack = rx501_cur."!cursor_capture"($P11, "sym")
    goto rxcap504_done1523
  rxcap504_fail1524:
    goto rx501_fail1513
  rxcap504_done1523:
    repr_bind_attr_int rx501_cur, rx501_curclass, "$!pos", rx501_pos
    $P11 = rx501_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx501_curclass, "$!pos"
    lt $I11, 0, rx501_fail1513
    nqp_rxmark rx501_bstack, rxsubrule505_pass1525, -1, 0
  rxsubrule505_pass1525:
    rx501_cstack = rx501_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx501_pos, $P11, rx501_curclass, "$!pos"
    rx501_cur."!cursor_pass"(rx501_pos, "package_declarator:sym<class>", 'backtrack'=>1)
    .return (rx501_cur)
  rx501_restart1512:
    repr_get_attr_obj rx501_cstack, rx501_cur, rx501_curclass, "$!cstack"
  rx501_fail1513:
    unless rx501_bstack, rx501_done1511
    pop $I19, rx501_bstack
    if_null rx501_cstack, rx501_cstack_done1516
    unless rx501_cstack, rx501_cstack_done1516
    dec $I19
    set $P11, rx501_cstack[$I19]
  rx501_cstack_done1516:
    pop rx501_rep, rx501_bstack
    pop rx501_pos, rx501_bstack
    pop $I19, rx501_bstack
    lt rx501_pos, -1, rx501_done1511
    lt rx501_pos, 0, rx501_fail1513
    eq $I19, 0, rx501_fail1513
    nqp_islist $I20, rx501_cstack
    unless $I20, rx501_jump1514
    elements $I18, rx501_bstack
    le $I18, 0, rx501_cut1515
    dec $I18
    set $I18, rx501_bstack[$I18]
  rx501_cut1515:
    assign rx501_cstack, $I18
  rx501_jump1514:
    jump $I19
  rx501_done1511:
    rx501_cur."!cursor_fail"()
    .return (rx501_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_105_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 980
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx506_tgt
    .local int rx506_pos
    .local int rx506_off
    .local int rx506_eos
    .local int rx506_rep
    .local pmc rx506_cur
    .local pmc rx506_curclass
    .local pmc rx506_bstack
    .local pmc rx506_cstack
    (rx506_cur, rx506_tgt, rx506_pos, rx506_curclass, rx506_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx506_cur
    length rx506_eos, rx506_tgt
    eq $I19, 1, rx506_restart1528
    gt rx506_pos, rx506_eos, rx506_fail1529
    repr_get_attr_int $I11, self, rx506_curclass, "$!from"
    ne $I11, -1, rxscan507_done1535
    goto rxscan507_scan1534
  rxscan507_loop1533:
    inc rx506_pos
    gt rx506_pos, rx506_eos, rx506_fail1529
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!from", rx506_pos
  rxscan507_scan1534:
    nqp_rxmark rx506_bstack, rxscan507_loop1533, rx506_pos, 0
  rxscan507_done1535:
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    store_lex unicode:"$\x{a2}", rx506_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1536
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1537
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5007
  fallback1537:
    unless_null $P5004, vivi_5081538
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5081538:
    set $P5003, $P5004
  fallback1536:
    set $P101, $P5003
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    store_lex unicode:"$\x{a2}", rx506_cur
    box $P5009, "grammar"
    set $P102, $P5009
    nqp_rxmark rx506_bstack, rxcap509_fail1540, rx506_pos, 0
    add $I11, rx506_pos, 7
    gt $I11, rx506_eos, rx506_fail1529
    substr $S10, rx506_tgt, rx506_pos, 7
    ne $S10, ucs4:"grammar", rx506_fail1529
    add rx506_pos, 7
    nqp_rxpeek $I19, rx506_bstack, rxcap509_fail1540
    inc $I19
    set $I11, rx506_bstack[$I19]
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx506_pos)
    rx506_cstack = rx506_cur."!cursor_capture"($P11, "sym")
    goto rxcap509_done1539
  rxcap509_fail1540:
    goto rx506_fail1529
  rxcap509_done1539:
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1529
    nqp_rxmark rx506_bstack, rxsubrule510_pass1541, -1, 0
  rxsubrule510_pass1541:
    rx506_cstack = rx506_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    rx506_cur."!cursor_pass"(rx506_pos, "package_declarator:sym<grammar>", 'backtrack'=>1)
    .return (rx506_cur)
  rx506_restart1528:
    repr_get_attr_obj rx506_cstack, rx506_cur, rx506_curclass, "$!cstack"
  rx506_fail1529:
    unless rx506_bstack, rx506_done1527
    pop $I19, rx506_bstack
    if_null rx506_cstack, rx506_cstack_done1532
    unless rx506_cstack, rx506_cstack_done1532
    dec $I19
    set $P11, rx506_cstack[$I19]
  rx506_cstack_done1532:
    pop rx506_rep, rx506_bstack
    pop rx506_pos, rx506_bstack
    pop $I19, rx506_bstack
    lt rx506_pos, -1, rx506_done1527
    lt rx506_pos, 0, rx506_fail1529
    eq $I19, 0, rx506_fail1529
    nqp_islist $I20, rx506_cstack
    unless $I20, rx506_jump1530
    elements $I18, rx506_bstack
    le $I18, 0, rx506_cut1531
    dec $I18
    set $I18, rx506_bstack[$I18]
  rx506_cut1531:
    assign rx506_cstack, $I18
  rx506_jump1530:
    jump $I19
  rx506_done1527:
    rx506_cur."!cursor_fail"()
    .return (rx506_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_106_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 985
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx511_tgt
    .local int rx511_pos
    .local int rx511_off
    .local int rx511_eos
    .local int rx511_rep
    .local pmc rx511_cur
    .local pmc rx511_curclass
    .local pmc rx511_bstack
    .local pmc rx511_cstack
    (rx511_cur, rx511_tgt, rx511_pos, rx511_curclass, rx511_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx511_cur
    length rx511_eos, rx511_tgt
    eq $I19, 1, rx511_restart1544
    gt rx511_pos, rx511_eos, rx511_fail1545
    repr_get_attr_int $I11, self, rx511_curclass, "$!from"
    ne $I11, -1, rxscan512_done1551
    goto rxscan512_scan1550
  rxscan512_loop1549:
    inc rx511_pos
    gt rx511_pos, rx511_eos, rx511_fail1545
    repr_bind_attr_int rx511_cur, rx511_curclass, "$!from", rx511_pos
  rxscan512_scan1550:
    nqp_rxmark rx511_bstack, rxscan512_loop1549, rx511_pos, 0
  rxscan512_done1551:
    repr_bind_attr_int rx511_cur, rx511_curclass, "$!pos", rx511_pos
    store_lex unicode:"$\x{a2}", rx511_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1552
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1553
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5007
  fallback1553:
    unless_null $P5004, vivi_5131554
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5131554:
    set $P5003, $P5004
  fallback1552:
    set $P101, $P5003
    repr_bind_attr_int rx511_cur, rx511_curclass, "$!pos", rx511_pos
    store_lex unicode:"$\x{a2}", rx511_cur
    box $P5009, "role"
    set $P102, $P5009
    nqp_rxmark rx511_bstack, rxcap514_fail1556, rx511_pos, 0
    add $I11, rx511_pos, 4
    gt $I11, rx511_eos, rx511_fail1545
    substr $S10, rx511_tgt, rx511_pos, 4
    ne $S10, ucs4:"role", rx511_fail1545
    add rx511_pos, 4
    nqp_rxpeek $I19, rx511_bstack, rxcap514_fail1556
    inc $I19
    set $I11, rx511_bstack[$I19]
    repr_bind_attr_int rx511_cur, rx511_curclass, "$!pos", rx511_pos
    $P11 = rx511_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx511_pos)
    rx511_cstack = rx511_cur."!cursor_capture"($P11, "sym")
    goto rxcap514_done1555
  rxcap514_fail1556:
    goto rx511_fail1545
  rxcap514_done1555:
    repr_bind_attr_int rx511_cur, rx511_curclass, "$!pos", rx511_pos
    $P11 = rx511_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx511_curclass, "$!pos"
    lt $I11, 0, rx511_fail1545
    nqp_rxmark rx511_bstack, rxsubrule515_pass1557, -1, 0
  rxsubrule515_pass1557:
    rx511_cstack = rx511_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx511_pos, $P11, rx511_curclass, "$!pos"
    rx511_cur."!cursor_pass"(rx511_pos, "package_declarator:sym<role>", 'backtrack'=>1)
    .return (rx511_cur)
  rx511_restart1544:
    repr_get_attr_obj rx511_cstack, rx511_cur, rx511_curclass, "$!cstack"
  rx511_fail1545:
    unless rx511_bstack, rx511_done1543
    pop $I19, rx511_bstack
    if_null rx511_cstack, rx511_cstack_done1548
    unless rx511_cstack, rx511_cstack_done1548
    dec $I19
    set $P11, rx511_cstack[$I19]
  rx511_cstack_done1548:
    pop rx511_rep, rx511_bstack
    pop rx511_pos, rx511_bstack
    pop $I19, rx511_bstack
    lt rx511_pos, -1, rx511_done1543
    lt rx511_pos, 0, rx511_fail1545
    eq $I19, 0, rx511_fail1545
    nqp_islist $I20, rx511_cstack
    unless $I20, rx511_jump1546
    elements $I18, rx511_bstack
    le $I18, 0, rx511_cut1547
    dec $I18
    set $I18, rx511_bstack[$I18]
  rx511_cut1547:
    assign rx511_cstack, $I18
  rx511_jump1546:
    jump $I19
  rx511_done1543:
    rx511_cur."!cursor_fail"()
    .return (rx511_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_107_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 990
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx516_tgt
    .local int rx516_pos
    .local int rx516_off
    .local int rx516_eos
    .local int rx516_rep
    .local pmc rx516_cur
    .local pmc rx516_curclass
    .local pmc rx516_bstack
    .local pmc rx516_cstack
    (rx516_cur, rx516_tgt, rx516_pos, rx516_curclass, rx516_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx516_cur
    length rx516_eos, rx516_tgt
    eq $I19, 1, rx516_restart1560
    gt rx516_pos, rx516_eos, rx516_fail1561
    repr_get_attr_int $I11, self, rx516_curclass, "$!from"
    ne $I11, -1, rxscan517_done1567
    goto rxscan517_scan1566
  rxscan517_loop1565:
    inc rx516_pos
    gt rx516_pos, rx516_eos, rx516_fail1561
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!from", rx516_pos
  rxscan517_scan1566:
    nqp_rxmark rx516_bstack, rxscan517_loop1565, rx516_pos, 0
  rxscan517_done1567:
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    store_lex unicode:"$\x{a2}", rx516_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1568
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1569
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5007
  fallback1569:
    unless_null $P5004, vivi_5181570
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5181570:
    set $P5003, $P5004
  fallback1568:
    set $P101, $P5003
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    store_lex unicode:"$\x{a2}", rx516_cur
    box $P5009, "native"
    set $P102, $P5009
    nqp_rxmark rx516_bstack, rxcap519_fail1572, rx516_pos, 0
    add $I11, rx516_pos, 6
    gt $I11, rx516_eos, rx516_fail1561
    substr $S10, rx516_tgt, rx516_pos, 6
    ne $S10, ucs4:"native", rx516_fail1561
    add rx516_pos, 6
    nqp_rxpeek $I19, rx516_bstack, rxcap519_fail1572
    inc $I19
    set $I11, rx516_bstack[$I19]
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    $P11 = rx516_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx516_pos)
    rx516_cstack = rx516_cur."!cursor_capture"($P11, "sym")
    goto rxcap519_done1571
  rxcap519_fail1572:
    goto rx516_fail1561
  rxcap519_done1571:
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    $P11 = rx516_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx516_curclass, "$!pos"
    lt $I11, 0, rx516_fail1561
    nqp_rxmark rx516_bstack, rxsubrule520_pass1573, -1, 0
  rxsubrule520_pass1573:
    rx516_cstack = rx516_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx516_pos, $P11, rx516_curclass, "$!pos"
    rx516_cur."!cursor_pass"(rx516_pos, "package_declarator:sym<native>", 'backtrack'=>1)
    .return (rx516_cur)
  rx516_restart1560:
    repr_get_attr_obj rx516_cstack, rx516_cur, rx516_curclass, "$!cstack"
  rx516_fail1561:
    unless rx516_bstack, rx516_done1559
    pop $I19, rx516_bstack
    if_null rx516_cstack, rx516_cstack_done1564
    unless rx516_cstack, rx516_cstack_done1564
    dec $I19
    set $P11, rx516_cstack[$I19]
  rx516_cstack_done1564:
    pop rx516_rep, rx516_bstack
    pop rx516_pos, rx516_bstack
    pop $I19, rx516_bstack
    lt rx516_pos, -1, rx516_done1559
    lt rx516_pos, 0, rx516_fail1561
    eq $I19, 0, rx516_fail1561
    nqp_islist $I20, rx516_cstack
    unless $I20, rx516_jump1562
    elements $I18, rx516_bstack
    le $I18, 0, rx516_cut1563
    dec $I18
    set $I18, rx516_bstack[$I18]
  rx516_cut1563:
    assign rx516_cstack, $I18
  rx516_jump1562:
    jump $I19
  rx516_done1559:
    rx516_cur."!cursor_fail"()
    .return (rx516_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_108_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 995
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx521_tgt
    .local int rx521_pos
    .local int rx521_off
    .local int rx521_eos
    .local int rx521_rep
    .local pmc rx521_cur
    .local pmc rx521_curclass
    .local pmc rx521_bstack
    .local pmc rx521_cstack
    (rx521_cur, rx521_tgt, rx521_pos, rx521_curclass, rx521_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx521_cur
    length rx521_eos, rx521_tgt
    eq $I19, 1, rx521_restart1576
    gt rx521_pos, rx521_eos, rx521_fail1577
    repr_get_attr_int $I11, self, rx521_curclass, "$!from"
    ne $I11, -1, rxscan522_done1583
    goto rxscan522_scan1582
  rxscan522_loop1581:
    inc rx521_pos
    gt rx521_pos, rx521_eos, rx521_fail1577
    repr_bind_attr_int rx521_cur, rx521_curclass, "$!from", rx521_pos
  rxscan522_scan1582:
    nqp_rxmark rx521_bstack, rxscan522_loop1581, rx521_pos, 0
  rxscan522_done1583:
    repr_bind_attr_int rx521_cur, rx521_curclass, "$!pos", rx521_pos
    store_lex unicode:"$\x{a2}", rx521_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1584
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1585
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5007
  fallback1585:
    unless_null $P5004, vivi_5231586
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5231586:
    set $P5003, $P5004
  fallback1584:
    set $P101, $P5003
    repr_bind_attr_int rx521_cur, rx521_curclass, "$!pos", rx521_pos
    store_lex unicode:"$\x{a2}", rx521_cur
    box $P5009, "stub"
    set $P102, $P5009
    nqp_rxmark rx521_bstack, rxcap524_fail1588, rx521_pos, 0
    add $I11, rx521_pos, 4
    gt $I11, rx521_eos, rx521_fail1577
    substr $S10, rx521_tgt, rx521_pos, 4
    ne $S10, ucs4:"stub", rx521_fail1577
    add rx521_pos, 4
    nqp_rxpeek $I19, rx521_bstack, rxcap524_fail1588
    inc $I19
    set $I11, rx521_bstack[$I19]
    repr_bind_attr_int rx521_cur, rx521_curclass, "$!pos", rx521_pos
    $P11 = rx521_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx521_pos)
    rx521_cstack = rx521_cur."!cursor_capture"($P11, "sym")
    goto rxcap524_done1587
  rxcap524_fail1588:
    goto rx521_fail1577
  rxcap524_done1587:
    repr_bind_attr_int rx521_cur, rx521_curclass, "$!pos", rx521_pos
    $P11 = rx521_cur."ws"()
    repr_get_attr_int $I11, $P11, rx521_curclass, "$!pos"
    lt $I11, 0, rx521_fail1577
    repr_get_attr_int rx521_pos, $P11, rx521_curclass, "$!pos"
    repr_bind_attr_int rx521_cur, rx521_curclass, "$!pos", rx521_pos
    $P11 = rx521_cur."name"()
    repr_get_attr_int $I11, $P11, rx521_curclass, "$!pos"
    lt $I11, 0, rx521_fail1577
    nqp_rxmark rx521_bstack, rxsubrule526_pass1590, -1, 0
  rxsubrule526_pass1590:
    rx521_cstack = rx521_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx521_pos, $P11, rx521_curclass, "$!pos"
    repr_bind_attr_int rx521_cur, rx521_curclass, "$!pos", rx521_pos
    $P11 = rx521_cur."ws"()
    repr_get_attr_int $I11, $P11, rx521_curclass, "$!pos"
    lt $I11, 0, rx521_fail1577
    repr_get_attr_int rx521_pos, $P11, rx521_curclass, "$!pos"
    add $I11, rx521_pos, 9
    gt $I11, rx521_eos, rx521_fail1577
    substr $S10, rx521_tgt, rx521_pos, 9
    ne $S10, ucs4:"metaclass", rx521_fail1577
    add rx521_pos, 9
    repr_bind_attr_int rx521_cur, rx521_curclass, "$!pos", rx521_pos
    $P11 = rx521_cur."ws"()
    repr_get_attr_int $I11, $P11, rx521_curclass, "$!pos"
    lt $I11, 0, rx521_fail1577
    repr_get_attr_int rx521_pos, $P11, rx521_curclass, "$!pos"
    repr_bind_attr_int rx521_cur, rx521_curclass, "$!pos", rx521_pos
    $P11 = rx521_cur."name"()
    repr_get_attr_int $I11, $P11, rx521_curclass, "$!pos"
    lt $I11, 0, rx521_fail1577
    nqp_rxmark rx521_bstack, rxsubrule529_pass1593, -1, 0
  rxsubrule529_pass1593:
    rx521_cstack = rx521_cur."!cursor_capture"($P11, "metaclass")
    repr_get_attr_int rx521_pos, $P11, rx521_curclass, "$!pos"
    repr_bind_attr_int rx521_cur, rx521_curclass, "$!pos", rx521_pos
    $P11 = rx521_cur."ws"()
    repr_get_attr_int $I11, $P11, rx521_curclass, "$!pos"
    lt $I11, 0, rx521_fail1577
    repr_get_attr_int rx521_pos, $P11, rx521_curclass, "$!pos"
    add $I11, rx521_pos, 1
    gt $I11, rx521_eos, rx521_fail1577
    substr $S10, rx521_tgt, rx521_pos, 1
    ne $S10, ucs4:"{", rx521_fail1577
    add rx521_pos, 1
    repr_bind_attr_int rx521_cur, rx521_curclass, "$!pos", rx521_pos
    $P11 = rx521_cur."ws"()
    repr_get_attr_int $I11, $P11, rx521_curclass, "$!pos"
    lt $I11, 0, rx521_fail1577
    repr_get_attr_int rx521_pos, $P11, rx521_curclass, "$!pos"
    add $I11, rx521_pos, 3
    gt $I11, rx521_eos, rx521_fail1577
    substr $S10, rx521_tgt, rx521_pos, 3
    ne $S10, ucs4:"...", rx521_fail1577
    add rx521_pos, 3
    repr_bind_attr_int rx521_cur, rx521_curclass, "$!pos", rx521_pos
    $P11 = rx521_cur."ws"()
    repr_get_attr_int $I11, $P11, rx521_curclass, "$!pos"
    lt $I11, 0, rx521_fail1577
    repr_get_attr_int rx521_pos, $P11, rx521_curclass, "$!pos"
    add $I11, rx521_pos, 1
    gt $I11, rx521_eos, rx521_fail1577
    substr $S10, rx521_tgt, rx521_pos, 1
    ne $S10, ucs4:"}", rx521_fail1577
    add rx521_pos, 1
    repr_bind_attr_int rx521_cur, rx521_curclass, "$!pos", rx521_pos
    $P11 = rx521_cur."ws"()
    repr_get_attr_int $I11, $P11, rx521_curclass, "$!pos"
    lt $I11, 0, rx521_fail1577
    repr_get_attr_int rx521_pos, $P11, rx521_curclass, "$!pos"
    rx521_cur."!cursor_pass"(rx521_pos, "package_declarator:sym<stub>", 'backtrack'=>1)
    .return (rx521_cur)
  rx521_restart1576:
    repr_get_attr_obj rx521_cstack, rx521_cur, rx521_curclass, "$!cstack"
  rx521_fail1577:
    unless rx521_bstack, rx521_done1575
    pop $I19, rx521_bstack
    if_null rx521_cstack, rx521_cstack_done1580
    unless rx521_cstack, rx521_cstack_done1580
    dec $I19
    set $P11, rx521_cstack[$I19]
  rx521_cstack_done1580:
    pop rx521_rep, rx521_bstack
    pop rx521_pos, rx521_bstack
    pop $I19, rx521_bstack
    lt rx521_pos, -1, rx521_done1575
    lt rx521_pos, 0, rx521_fail1577
    eq $I19, 0, rx521_fail1577
    nqp_islist $I20, rx521_cstack
    unless $I20, rx521_jump1578
    elements $I18, rx521_bstack
    le $I18, 0, rx521_cut1579
    dec $I18
    set $I18, rx521_bstack[$I18]
  rx521_cut1579:
    assign rx521_cstack, $I18
  rx521_jump1578:
    jump $I19
  rx521_done1575:
    rx521_cur."!cursor_fail"()
    .return (rx521_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_109_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1003
    .param pmc _lex_param_0 
    .const 'Sub' $P5021 = 'cuid_401_1360426903.566' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_402_1360426903.566' 
    capture_lex $P5021 
    .lex "$*PACKAGE", $P101 
    .lex "$OUTER", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx534_tgt
    .local int rx534_pos
    .local int rx534_off
    .local int rx534_eos
    .local int rx534_rep
    .local pmc rx534_cur
    .local pmc rx534_curclass
    .local pmc rx534_bstack
    .local pmc rx534_cstack
    (rx534_cur, rx534_tgt, rx534_pos, rx534_curclass, rx534_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx534_cur
    length rx534_eos, rx534_tgt
    eq $I19, 1, rx534_restart1600
    gt rx534_pos, rx534_eos, rx534_fail1601
    repr_get_attr_int $I11, self, rx534_curclass, "$!from"
    ne $I11, -1, rxscan535_done1607
    goto rxscan535_scan1606
  rxscan535_loop1605:
    inc rx534_pos
    gt rx534_pos, rx534_eos, rx534_fail1601
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!from", rx534_pos
  rxscan535_scan1606:
    nqp_rxmark rx534_bstack, rxscan535_loop1605, rx534_pos, 0
  rxscan535_done1607:
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    store_lex unicode:"$\x{a2}", rx534_cur
    unless_null $P101, fallback1609
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$PACKAGE"]
    unless_null $P5003, fallback1610
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5006
  fallback1610:
    unless_null $P5003, vivi_5371611
    die "Contextual $*PACKAGE not found"
    box $P5007, "Contextual $*PACKAGE not found"
    set $P5003, $P5007
  vivi_5371611:
    set $P101, $P5003
  fallback1609:
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    store_lex unicode:"$\x{a2}", rx534_cur
.annotate 'line', 1005
    find_dynamic_lex $P5008, "$*W"
    unless_null $P5008, fallback1613
    nqp_get_sc_object $P5011, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$W"]
    unless_null $P5009, fallback1614
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5012
  fallback1614:
    unless_null $P5009, vivi_5391615
    die "Contextual $*W not found"
    box $P5013, "Contextual $*W not found"
    set $P5009, $P5013
  vivi_5391615:
    set $P5008, $P5009
  fallback1613:
    $P5014 = $P5008."cur_lexpad"()
    set $P102, $P5014
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."name"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    nqp_rxmark rx534_bstack, rxsubrule541_pass1617, -1, 0
  rxsubrule541_pass1617:
    rx534_cstack = rx534_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    nqp_rxmark rx534_bstack, rxquantr545_done1622, rx534_pos, 0
  rxquantr545_loop1621:
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    store_lex unicode:"$\x{a2}", rx534_cur
    $P5015 = $P103."MATCH"()
    set $P104, $P5015
    .const 'Sub' $P5016 = 'cuid_401_1360426903.566' 
    capture_lex $P5016
    $P5017 = $P5016()
    unless $P5017, rx534_fail1601
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    add $I11, rx534_pos, 1
    gt $I11, rx534_eos, rx534_fail1601
    substr $S10, rx534_tgt, rx534_pos, 1
    ne $S10, ucs4:"[", rx534_fail1601
    add rx534_pos, 1
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."role_params"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    nqp_rxmark rx534_bstack, rxsubrule550_pass1629, -1, 0
  rxsubrule550_pass1629:
    rx534_cstack = rx534_cur."!cursor_capture"($P11, "role_params")
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
  alt551_01631:
    nqp_rxmark rx534_bstack, alt551_11632, rx534_pos, 0
    add $I11, rx534_pos, 1
    gt $I11, rx534_eos, rx534_fail1601
    substr $S10, rx534_tgt, rx534_pos, 1
    ne $S10, ucs4:"]", rx534_fail1601
    add rx534_pos, 1
    goto alt551_end1630
  alt551_11632:
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."FAILGOAL"("']'")
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    goto rxsubrule552_pass1633
  rxsubrule552_back1634:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
  rxsubrule552_pass1633:
    rx534_cstack = rx534_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule552_back1634
    push rx534_bstack, $I11
    push rx534_bstack, 0
    push rx534_bstack, rx534_pos
    elements $I11, rx534_cstack
    push rx534_bstack, $I11
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
  alt551_end1630:
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    nqp_rxpeek $I19, rx534_bstack, rxquantr545_done1622
    inc $I19
    inc $I19
    set rx534_rep, rx534_bstack[$I19]
    nqp_rxcommit rx534_bstack, rxquantr545_done1622
    inc rx534_rep
  rxquantr545_done1622:
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    nqp_rxmark rx534_bstack, rxquantr555_done1638, rx534_pos, 0
  rxquantr555_loop1637:
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    add $I11, rx534_pos, 2
    gt $I11, rx534_eos, rx534_fail1601
    substr $S10, rx534_tgt, rx534_pos, 2
    ne $S10, ucs4:"is", rx534_fail1601
    add rx534_pos, 2
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    add $I11, rx534_pos, 5
    gt $I11, rx534_eos, rx534_fail1601
    substr $S10, rx534_tgt, rx534_pos, 5
    ne $S10, ucs4:"repr(", rx534_fail1601
    add rx534_pos, 5
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    nqp_rxmark rx534_bstack, rxsubrule559_pass1642, -1, 0
  rxsubrule559_pass1642:
    rx534_cstack = rx534_cur."!cursor_capture"($P11, "repr")
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    add $I11, rx534_pos, 1
    gt $I11, rx534_eos, rx534_fail1601
    substr $S10, rx534_tgt, rx534_pos, 1
    ne $S10, ucs4:")", rx534_fail1601
    add rx534_pos, 1
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    nqp_rxpeek $I19, rx534_bstack, rxquantr555_done1638
    inc $I19
    inc $I19
    set rx534_rep, rx534_bstack[$I19]
    nqp_rxcommit rx534_bstack, rxquantr555_done1638
    inc rx534_rep
  rxquantr555_done1638:
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    store_lex unicode:"$\x{a2}", rx534_cur
    $P5018 = $P103."MATCH"()
    set $P104, $P5018
    .const 'Sub' $P5019 = 'cuid_402_1360426903.566' 
    capture_lex $P5019
    $P5020 = $P5019()
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    nqp_rxmark rx534_bstack, rxquantr584_done1732, rx534_pos, 0
  rxquantr584_loop1731:
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    nqp_rxmark rx534_bstack, rxcap586_fail1735, rx534_pos, 0
    add $I11, rx534_pos, 9
    gt $I11, rx534_eos, rx534_fail1601
    substr $S10, rx534_tgt, rx534_pos, 9
    ne $S10, ucs4:"is export", rx534_fail1601
    add rx534_pos, 9
    nqp_rxpeek $I19, rx534_bstack, rxcap586_fail1735
    inc $I19
    set $I11, rx534_bstack[$I19]
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx534_pos)
    rx534_cstack = rx534_cur."!cursor_capture"($P11, "export")
    goto rxcap586_done1734
  rxcap586_fail1735:
    goto rx534_fail1601
  rxcap586_done1734:
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    nqp_rxpeek $I19, rx534_bstack, rxquantr584_done1732
    inc $I19
    inc $I19
    set rx534_rep, rx534_bstack[$I19]
    nqp_rxcommit rx534_bstack, rxquantr584_done1732
    inc rx534_rep
  rxquantr584_done1732:
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    nqp_rxmark rx534_bstack, rxquantr589_done1739, rx534_pos, 0
  rxquantr589_loop1738:
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    add $I11, rx534_pos, 2
    gt $I11, rx534_eos, rx534_fail1601
    substr $S10, rx534_tgt, rx534_pos, 2
    ne $S10, ucs4:"is", rx534_fail1601
    add rx534_pos, 2
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."name"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    nqp_rxmark rx534_bstack, rxsubrule592_pass1742, -1, 0
  rxsubrule592_pass1742:
    rx534_cstack = rx534_cur."!cursor_capture"($P11, "parent")
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    nqp_rxpeek $I19, rx534_bstack, rxquantr589_done1739
    inc $I19
    inc $I19
    set rx534_rep, rx534_bstack[$I19]
    nqp_rxcommit rx534_bstack, rxquantr589_done1739
    inc rx534_rep
  rxquantr589_done1739:
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    nqp_rxmark rx534_bstack, rxquantr595_done1746, rx534_pos, 0
  rxquantr595_loop1745:
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    add $I11, rx534_pos, 4
    gt $I11, rx534_eos, rx534_fail1601
    substr $S10, rx534_tgt, rx534_pos, 4
    ne $S10, ucs4:"does", rx534_fail1601
    add rx534_pos, 4
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."name"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    nqp_rxmark rx534_bstack, rxsubrule598_pass1749, -1, 0
  rxsubrule598_pass1749:
    rx534_cstack = rx534_cur."!cursor_capture"($P11, "role")
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    nqp_rxpeek $I19, rx534_bstack, rxquantr595_done1746
    inc $I19
    inc $I19
    set rx534_rep, rx534_bstack[$I19]
    nqp_rxcommit rx534_bstack, rxquantr595_done1746
    inc rx534_rep
    nqp_rxmark rx534_bstack, rxquantr595_done1746, rx534_pos, rx534_rep
    goto rxquantr595_loop1745
  rxquantr595_done1746:
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
  alt601_01753:
    nqp_rxmark rx534_bstack, alt601_11768, rx534_pos, 0
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    add $I11, rx534_pos, 1
    gt $I11, rx534_eos, rx534_fail1601
    substr $S10, rx534_tgt, rx534_pos, 1
    ne $S10, ucs4:";", rx534_fail1601
    add rx534_pos, 1
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    nqp_rxmark rx534_bstack, rxsubrule604_pass1756, -1, 0
  rxsubrule604_pass1756:
    rx534_cstack = rx534_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
  alt606_01759:
    nqp_rxmark rx534_bstack, alt606_11763, rx534_pos, 0
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    lt rx534_pos, rx534_eos, rx534_fail1601
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    goto alt606_end1758
  alt606_11763:
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
  alt606_end1758:
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    goto alt601_end1752
  alt601_11768:
    nqp_rxmark rx534_bstack, alt601_21773, rx534_pos, 0
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    ge rx534_pos, rx534_eos, rx534_fail1601
    substr $S11, rx534_tgt, rx534_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx534_fail1601
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    nqp_rxmark rx534_bstack, rxsubrule616_pass1771, -1, 0
  rxsubrule616_pass1771:
    rx534_cstack = rx534_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    goto alt601_end1752
  alt601_21773:
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."panic"("Malformed package declaration")
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
  alt601_end1752:
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."ws"()
    repr_get_attr_int $I11, $P11, rx534_curclass, "$!pos"
    lt $I11, 0, rx534_fail1601
    repr_get_attr_int rx534_pos, $P11, rx534_curclass, "$!pos"
    rx534_cur."!cursor_pass"(rx534_pos, "package_def", 'backtrack'=>1)
    .return (rx534_cur)
  rx534_restart1600:
    repr_get_attr_obj rx534_cstack, rx534_cur, rx534_curclass, "$!cstack"
  rx534_fail1601:
    unless rx534_bstack, rx534_done1599
    pop $I19, rx534_bstack
    if_null rx534_cstack, rx534_cstack_done1604
    unless rx534_cstack, rx534_cstack_done1604
    dec $I19
    set $P11, rx534_cstack[$I19]
  rx534_cstack_done1604:
    pop rx534_rep, rx534_bstack
    pop rx534_pos, rx534_bstack
    pop $I19, rx534_bstack
    lt rx534_pos, -1, rx534_done1599
    lt rx534_pos, 0, rx534_fail1601
    eq $I19, 0, rx534_fail1601
    nqp_islist $I20, rx534_cstack
    unless $I20, rx534_jump1602
    elements $I18, rx534_bstack
    le $I18, 0, rx534_cut1603
    dec $I18
    set $I18, rx534_bstack[$I18]
  rx534_cut1603:
    assign rx534_cstack, $I18
  rx534_jump1602:
    jump $I19
  rx534_done1599:
    rx534_cur."!cursor_fail"()
    .return (rx534_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_401_1360426903.566") :anon :lex :outer("cuid_109_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1009

    find_dynamic_lex $P5001, "$*PKGDECL"
    unless_null $P5001, fallback1624
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$PKGDECL"]
    unless_null $P5002, fallback1625
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback1625:
    unless_null $P5002, vivi_5471626
    die "Contextual $*PKGDECL not found"
    box $P5006, "Contextual $*PKGDECL not found"
    set $P5002, $P5006
  vivi_5471626:
    set $P5001, $P5002
  fallback1624:
    set $S5001, $P5001
    iseq $I5001, $S5001, "role"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_402_1360426903.566") :anon :lex :outer("cuid_109_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1012
    .lex "%args", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback1646
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5004
  fallback1646:
    set $P5002, $P5003["name"]
    unless_null $P5002, fallback1647
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback1647:
    set $S5001, $P5002
    box $P5006, $S5001
    set $P101["name"], $P5006
    find_lex $P5008, "$/"
    unless_null $P5008, fallback1650
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5009
  fallback1650:
    set $P5007, $P5008["repr"]
    unless_null $P5007, fallback1651
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5010
  fallback1651:
    unless $P5007 goto if563_end1649 
.annotate 'line', 1017
    find_lex $P5016, "$/"
    unless_null $P5016, fallback1652
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5016, $P5017
  fallback1652:
    set $P5015, $P5016["repr"]
    unless_null $P5015, fallback1653
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5015, $P5018
  fallback1653:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback1654
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5019
  fallback1654:
    set $P5013, $P5014["quote_delimited"]
    unless_null $P5013, fallback1655
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5020
  fallback1655:
    set $P5012, $P5013["quote_atom"]
    unless_null $P5012, fallback1656
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5021
  fallback1656:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback1657
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5022
  fallback1657:
    set $S5002, $P5011
    box $P5023, $S5002
    set $P101["repr"], $P5023
  if563_end1649:
.annotate 'line', 1020
    find_dynamic_lex $P5024, "$*W"
    unless_null $P5024, fallback1658
    nqp_get_sc_object $P5027, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["$W"]
    unless_null $P5025, fallback1659
    nqp_get_sc_object $P5028, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5025, $P5028
  fallback1659:
    unless_null $P5025, vivi_5641660
    die "Contextual $*W not found"
    box $P5029, "Contextual $*W not found"
    set $P5025, $P5029
  vivi_5641660:
    set $P5024, $P5025
  fallback1658:
    find_dynamic_lex $P5031, "%*HOW"
    unless_null $P5031, fallback1661
    nqp_get_sc_object $P5034, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%HOW"]
    unless_null $P5032, fallback1662
    nqp_get_sc_object $P5036, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%HOW"], $P5037
    set $P5032, $P5037
  fallback1662:
    unless_null $P5032, vivi_5651663
    die "Contextual %*HOW not found"
    box $P5038, "Contextual %*HOW not found"
    set $P5032, $P5038
  vivi_5651663:
    set $P5031, $P5032
  fallback1661:
    find_dynamic_lex $P5039, "$*PKGDECL"
    unless_null $P5039, fallback1664
    nqp_get_sc_object $P5042, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5041, $P5042
    set $P5040, $P5041["$PKGDECL"]
    unless_null $P5040, fallback1665
    nqp_get_sc_object $P5043, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5040, $P5043
  fallback1665:
    unless_null $P5040, vivi_5661666
    die "Contextual $*PKGDECL not found"
    box $P5044, "Contextual $*PKGDECL not found"
    set $P5040, $P5044
  vivi_5661666:
    set $P5039, $P5040
  fallback1664:
    set $S5003, $P5039
    set $P5030, $P5031[$S5003]
    unless_null $P5030, fallback1667
    nqp_get_sc_object $P5045, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5030, $P5045
  fallback1667:
    $P5046 = $P5024."pkg_create_mo"($P5030, $P101 :flat :named)
    store_dynamic_lex "$*PACKAGE", $P5046
    find_dynamic_lex $P5047, "$*SCOPE"
    unless_null $P5047, fallback1672
    nqp_get_sc_object $P5050, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$SCOPE"]
    unless_null $P5048, fallback1673
    nqp_get_sc_object $P5051, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5048, $P5051
  fallback1673:
    unless_null $P5048, vivi_5691674
    die "Contextual $*SCOPE not found"
    box $P5052, "Contextual $*SCOPE not found"
    set $P5048, $P5052
  vivi_5691674:
    set $P5047, $P5048
  fallback1672:
    set $S5004, $P5047
    iseq $I5001, $S5004, "our"
    set $I5003, $I5001
    if $I5001 goto unless568_end1671 
    find_dynamic_lex $P5053, "$*SCOPE"
    unless_null $P5053, fallback1675
    nqp_get_sc_object $P5056, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$SCOPE"]
    unless_null $P5054, fallback1676
    nqp_get_sc_object $P5057, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5054, $P5057
  fallback1676:
    unless_null $P5054, vivi_5701677
    die "Contextual $*SCOPE not found"
    box $P5058, "Contextual $*SCOPE not found"
    set $P5054, $P5058
  vivi_5701677:
    set $P5053, $P5054
  fallback1675:
    set $S5005, $P5053
    iseq $I5002, $S5005, ""
    set $I5003, $I5002
  unless568_end1671:
    unless $I5003 goto if567_else1668 
.annotate 'line', 1023
.annotate 'line', 1024
    find_dynamic_lex $P5059, "$*W"
    unless_null $P5059, fallback1678
    nqp_get_sc_object $P5062, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$W"]
    unless_null $P5060, fallback1679
    nqp_get_sc_object $P5063, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5060, $P5063
  fallback1679:
    unless_null $P5060, vivi_5711680
    die "Contextual $*W not found"
    box $P5064, "Contextual $*W not found"
    set $P5060, $P5064
  vivi_5711680:
    set $P5059, $P5060
  fallback1678:
    find_dynamic_lex $P5065, "$*OUTERPACKAGE"
    unless_null $P5065, fallback1681
    nqp_get_sc_object $P5068, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$OUTERPACKAGE"]
    unless_null $P5066, fallback1682
    nqp_get_sc_object $P5069, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5066, $P5069
  fallback1682:
    unless_null $P5066, vivi_5721683
    die "Contextual $*OUTERPACKAGE not found"
    box $P5070, "Contextual $*OUTERPACKAGE not found"
    set $P5066, $P5070
  vivi_5721683:
    set $P5065, $P5066
  fallback1681:
    find_lex $P5073, "$/"
    unless_null $P5073, fallback1684
    nqp_get_sc_object $P5074, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5073, $P5074
  fallback1684:
    set $P5072, $P5073["name"]
    unless_null $P5072, fallback1685
    nqp_get_sc_object $P5075, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5072, $P5075
  fallback1685:
    set $P5071, $P5072["identifier"]
    unless_null $P5071, fallback1686
    nqp_get_sc_object $P5076, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5071, $P5076
  fallback1686:
    find_dynamic_lex $P5077, "$*PACKAGE"
    unless_null $P5077, fallback1687
    nqp_get_sc_object $P5080, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5079, $P5080
    set $P5078, $P5079["$PACKAGE"]
    unless_null $P5078, fallback1688
    nqp_get_sc_object $P5081, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5078, $P5081
  fallback1688:
    unless_null $P5078, vivi_5731689
    die "Contextual $*PACKAGE not found"
    box $P5082, "Contextual $*PACKAGE not found"
    set $P5078, $P5082
  vivi_5731689:
    set $P5077, $P5078
  fallback1687:
    $P5059."install_package_symbol"($P5065, $P5071, $P5077)
    find_lex $P5085, "$/"
    unless_null $P5085, fallback1692
    nqp_get_sc_object $P5086, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5085, $P5086
  fallback1692:
    set $P5084, $P5085["name"]
    unless_null $P5084, fallback1693
    nqp_get_sc_object $P5087, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5084, $P5087
  fallback1693:
    set $P5083, $P5084["identifier"]
    unless_null $P5083, fallback1694
    nqp_get_sc_object $P5088, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5083, $P5088
  fallback1694:
    set $N5001, $P5083
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5112, $I5004
    set $P5111, $P5112
    unless $I5004 goto if574_end1691 
.annotate 'line', 1025
.annotate 'line', 1026
    find_dynamic_lex $P5089, "$*W"
    unless_null $P5089, fallback1695
    nqp_get_sc_object $P5092, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5091, $P5092
    set $P5090, $P5091["$W"]
    unless_null $P5090, fallback1696
    nqp_get_sc_object $P5093, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5090, $P5093
  fallback1696:
    unless_null $P5090, vivi_5751697
    die "Contextual $*W not found"
    box $P5094, "Contextual $*W not found"
    set $P5090, $P5094
  vivi_5751697:
    set $P5089, $P5090
  fallback1695:
    find_lex $P5095, "$OUTER"
    find_lex $P5099, "$/"
    unless_null $P5099, fallback1698
    nqp_get_sc_object $P5100, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5099, $P5100
  fallback1698:
    set $P5098, $P5099["name"]
    unless_null $P5098, fallback1699
    nqp_get_sc_object $P5101, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5098, $P5101
  fallback1699:
    set $P5097, $P5098["identifier"]
    unless_null $P5097, fallback1700
    nqp_get_sc_object $P5102, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5097, $P5102
  fallback1700:
    set $P5096, $P5097[0]
    unless_null $P5096, fallback1701
    nqp_get_sc_object $P5103, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5096, $P5103
  fallback1701:
    find_dynamic_lex $P5104, "$*PACKAGE"
    unless_null $P5104, fallback1702
    nqp_get_sc_object $P5107, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$PACKAGE"]
    unless_null $P5105, fallback1703
    nqp_get_sc_object $P5108, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5105, $P5108
  fallback1703:
    unless_null $P5105, vivi_5761704
    die "Contextual $*PACKAGE not found"
    box $P5109, "Contextual $*PACKAGE not found"
    set $P5105, $P5109
  vivi_5761704:
    set $P5104, $P5105
  fallback1702:
    $P5110 = $P5089."install_lexical_symbol"($P5095, $P5096, $P5104)
    set $P5111, $P5110
  if574_end1691:
    set $P5163, $P5111
    goto if567_end1669
  if567_else1668:
    find_dynamic_lex $P5113, "$*SCOPE"
    unless_null $P5113, fallback1707
    nqp_get_sc_object $P5116, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5115, $P5116
    set $P5114, $P5115["$SCOPE"]
    unless_null $P5114, fallback1708
    nqp_get_sc_object $P5117, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5114, $P5117
  fallback1708:
    unless_null $P5114, vivi_5781709
    die "Contextual $*SCOPE not found"
    box $P5118, "Contextual $*SCOPE not found"
    set $P5114, $P5118
  vivi_5781709:
    set $P5113, $P5114
  fallback1707:
    set $S5006, $P5113
    iseq $I5005, $S5006, "my"
    unless $I5005 goto if577_else1705 
.annotate 'line', 1029
    find_lex $P5121, "$/"
    unless_null $P5121, fallback1712
    nqp_get_sc_object $P5122, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5121, $P5122
  fallback1712:
    set $P5120, $P5121["name"]
    unless_null $P5120, fallback1713
    nqp_get_sc_object $P5123, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5120, $P5123
  fallback1713:
    set $P5119, $P5120["identifier"]
    unless_null $P5119, fallback1714
    nqp_get_sc_object $P5124, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5119, $P5124
  fallback1714:
    set $N5003, $P5119
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    unless $I5006 goto if579_end1711 
.annotate 'line', 1030
.annotate 'line', 1031
    find_lex $P5126, "$/"
    unless_null $P5126, fallback1715
    nqp_get_sc_object $P5127, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5126, $P5127
  fallback1715:
    set $P5125, $P5126["name"]
    unless_null $P5125, fallback1716
    nqp_get_sc_object $P5128, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5125, $P5128
  fallback1716:
    $P5129 = $P5125."CURSOR"()
    $P5130 = $P5129."panic"("A my scoped package cannot have a multi-part name yet")
  if579_end1711:
.annotate 'line', 1033
    find_dynamic_lex $P5131, "$*W"
    unless_null $P5131, fallback1717
    nqp_get_sc_object $P5134, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5133, $P5134
    set $P5132, $P5133["$W"]
    unless_null $P5132, fallback1718
    nqp_get_sc_object $P5135, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5132, $P5135
  fallback1718:
    unless_null $P5132, vivi_5801719
    die "Contextual $*W not found"
    box $P5136, "Contextual $*W not found"
    set $P5132, $P5136
  vivi_5801719:
    set $P5131, $P5132
  fallback1717:
    find_lex $P5137, "$OUTER"
    find_lex $P5141, "$/"
    unless_null $P5141, fallback1720
    nqp_get_sc_object $P5142, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5141, $P5142
  fallback1720:
    set $P5140, $P5141["name"]
    unless_null $P5140, fallback1721
    nqp_get_sc_object $P5143, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5140, $P5143
  fallback1721:
    set $P5139, $P5140["identifier"]
    unless_null $P5139, fallback1722
    nqp_get_sc_object $P5144, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5139, $P5144
  fallback1722:
    set $P5138, $P5139[0]
    unless_null $P5138, fallback1723
    nqp_get_sc_object $P5145, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5138, $P5145
  fallback1723:
    find_dynamic_lex $P5146, "$*PACKAGE"
    unless_null $P5146, fallback1724
    nqp_get_sc_object $P5149, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5148, $P5149
    set $P5147, $P5148["$PACKAGE"]
    unless_null $P5147, fallback1725
    nqp_get_sc_object $P5150, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5147, $P5150
  fallback1725:
    unless_null $P5147, vivi_5811726
    die "Contextual $*PACKAGE not found"
    box $P5151, "Contextual $*PACKAGE not found"
    set $P5147, $P5151
  vivi_5811726:
    set $P5146, $P5147
  fallback1724:
    $P5152 = $P5131."install_lexical_symbol"($P5137, $P5138, $P5146)
    set $P5162, $P5152
    goto if577_end1706
  if577_else1705:
.annotate 'line', 1035
.annotate 'line', 1036
    find_lex $P5153, "$/"
    $P5154 = $P5153."CURSOR"()
    find_dynamic_lex $P5155, "$*SCOPE"
    unless_null $P5155, fallback1727
    nqp_get_sc_object $P5158, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5157, $P5158
    set $P5156, $P5157["$SCOPE"]
    unless_null $P5156, fallback1728
    nqp_get_sc_object $P5159, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5156, $P5159
  fallback1728:
    unless_null $P5156, vivi_5821729
    die "Contextual $*SCOPE not found"
    box $P5160, "Contextual $*SCOPE not found"
    set $P5156, $P5160
  vivi_5821729:
    set $P5155, $P5156
  fallback1727:
    set $S5008, $P5155
    concat $S5007, $S5008, " scoped packages are not supported"
    $P5161 = $P5154."panic"($S5007)
    set $P5162, $P5161
  if577_end1706:
    set $P5163, $P5162
  if567_end1669:
    .return ($P5163) 
.end
.HLL "nqp"
.namespace []
.sub "role_params" :subid("cuid_110_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1050
    .param pmc _lex_param_0 
    .lex "$*SCOPE", $P101 
    .lex "$*IN_DECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx622_tgt
    .local int rx622_pos
    .local int rx622_off
    .local int rx622_eos
    .local int rx622_rep
    .local pmc rx622_cur
    .local pmc rx622_curclass
    .local pmc rx622_bstack
    .local pmc rx622_cstack
    (rx622_cur, rx622_tgt, rx622_pos, rx622_curclass, rx622_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx622_cur
    length rx622_eos, rx622_tgt
    eq $I19, 1, rx622_restart1780
    gt rx622_pos, rx622_eos, rx622_fail1781
    repr_get_attr_int $I11, self, rx622_curclass, "$!from"
    ne $I11, -1, rxscan623_done1787
    goto rxscan623_scan1786
  rxscan623_loop1785:
    inc rx622_pos
    gt rx622_pos, rx622_eos, rx622_fail1781
    repr_bind_attr_int rx622_cur, rx622_curclass, "$!from", rx622_pos
  rxscan623_scan1786:
    nqp_rxmark rx622_bstack, rxscan623_loop1785, rx622_pos, 0
  rxscan623_done1787:
    repr_bind_attr_int rx622_cur, rx622_curclass, "$!pos", rx622_pos
    $P11 = rx622_cur."ws"()
    repr_get_attr_int $I11, $P11, rx622_curclass, "$!pos"
    lt $I11, 0, rx622_fail1781
    repr_get_attr_int rx622_pos, $P11, rx622_curclass, "$!pos"
    repr_bind_attr_int rx622_cur, rx622_curclass, "$!pos", rx622_pos
    store_lex unicode:"$\x{a2}", rx622_cur
    box $P5003, "my"
    set $P101, $P5003
    repr_bind_attr_int rx622_cur, rx622_curclass, "$!pos", rx622_pos
    $P11 = rx622_cur."ws"()
    repr_get_attr_int $I11, $P11, rx622_curclass, "$!pos"
    lt $I11, 0, rx622_fail1781
    repr_get_attr_int rx622_pos, $P11, rx622_curclass, "$!pos"
    repr_bind_attr_int rx622_cur, rx622_curclass, "$!pos", rx622_pos
    store_lex unicode:"$\x{a2}", rx622_cur
    box $P5004, "variable"
    set $P102, $P5004
    repr_bind_attr_int rx622_cur, rx622_curclass, "$!pos", rx622_pos
    $P11 = rx622_cur."ws"()
    repr_get_attr_int $I11, $P11, rx622_curclass, "$!pos"
    lt $I11, 0, rx622_fail1781
    repr_get_attr_int rx622_pos, $P11, rx622_curclass, "$!pos"
    nqp_rxmark rx622_bstack, rxquantr627_done1792, -1, 0
  rxquantr627_loop1791:
    repr_bind_attr_int rx622_cur, rx622_curclass, "$!pos", rx622_pos
    $P11 = rx622_cur."ws"()
    repr_get_attr_int $I11, $P11, rx622_curclass, "$!pos"
    lt $I11, 0, rx622_fail1781
    repr_get_attr_int rx622_pos, $P11, rx622_curclass, "$!pos"
    repr_bind_attr_int rx622_cur, rx622_curclass, "$!pos", rx622_pos
    $P11 = rx622_cur."variable"()
    repr_get_attr_int $I11, $P11, rx622_curclass, "$!pos"
    lt $I11, 0, rx622_fail1781
    nqp_rxmark rx622_bstack, rxsubrule629_pass1794, -1, 0
  rxsubrule629_pass1794:
    rx622_cstack = rx622_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx622_pos, $P11, rx622_curclass, "$!pos"
    repr_bind_attr_int rx622_cur, rx622_curclass, "$!pos", rx622_pos
    $P11 = rx622_cur."ws"()
    repr_get_attr_int $I11, $P11, rx622_curclass, "$!pos"
    lt $I11, 0, rx622_fail1781
    repr_get_attr_int rx622_pos, $P11, rx622_curclass, "$!pos"
    nqp_rxpeek $I19, rx622_bstack, rxquantr627_done1792
    inc $I19
    inc $I19
    set rx622_rep, rx622_bstack[$I19]
    nqp_rxcommit rx622_bstack, rxquantr627_done1792
    inc rx622_rep
    nqp_rxmark rx622_bstack, rxquantr627_done1792, rx622_pos, rx622_rep
    repr_bind_attr_int rx622_cur, rx622_curclass, "$!pos", rx622_pos
    $P11 = rx622_cur."ws"()
    repr_get_attr_int $I11, $P11, rx622_curclass, "$!pos"
    lt $I11, 0, rx622_fail1781
    repr_get_attr_int rx622_pos, $P11, rx622_curclass, "$!pos"
    add $I11, rx622_pos, 1
    gt $I11, rx622_eos, rx622_fail1781
    substr $S10, rx622_tgt, rx622_pos, 1
    ne $S10, ucs4:",", rx622_fail1781
    add rx622_pos, 1
    repr_bind_attr_int rx622_cur, rx622_curclass, "$!pos", rx622_pos
    $P11 = rx622_cur."ws"()
    repr_get_attr_int $I11, $P11, rx622_curclass, "$!pos"
    lt $I11, 0, rx622_fail1781
    repr_get_attr_int rx622_pos, $P11, rx622_curclass, "$!pos"
    goto rxquantr627_loop1791
  rxquantr627_done1792:
    repr_bind_attr_int rx622_cur, rx622_curclass, "$!pos", rx622_pos
    $P11 = rx622_cur."ws"()
    repr_get_attr_int $I11, $P11, rx622_curclass, "$!pos"
    lt $I11, 0, rx622_fail1781
    repr_get_attr_int rx622_pos, $P11, rx622_curclass, "$!pos"
    rx622_cur."!cursor_pass"(rx622_pos, "role_params", 'backtrack'=>1)
    .return (rx622_cur)
  rx622_restart1780:
    repr_get_attr_obj rx622_cstack, rx622_cur, rx622_curclass, "$!cstack"
  rx622_fail1781:
    unless rx622_bstack, rx622_done1779
    pop $I19, rx622_bstack
    if_null rx622_cstack, rx622_cstack_done1784
    unless rx622_cstack, rx622_cstack_done1784
    dec $I19
    set $P11, rx622_cstack[$I19]
  rx622_cstack_done1784:
    pop rx622_rep, rx622_bstack
    pop rx622_pos, rx622_bstack
    pop $I19, rx622_bstack
    lt rx622_pos, -1, rx622_done1779
    lt rx622_pos, 0, rx622_fail1781
    eq $I19, 0, rx622_fail1781
    nqp_islist $I20, rx622_cstack
    unless $I20, rx622_jump1782
    elements $I18, rx622_bstack
    le $I18, 0, rx622_cut1783
    dec $I18
    set $I18, rx622_bstack[$I18]
  rx622_cut1783:
    assign rx622_cstack, $I18
  rx622_jump1782:
    jump $I19
  rx622_done1779:
    rx622_cur."!cursor_fail"()
    .return (rx622_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator" :subid("cuid_111_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1056
    .param pmc self 
    $P5001 = self."!protoregex"("scope_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_112_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1057
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx634_tgt
    .local int rx634_pos
    .local int rx634_off
    .local int rx634_eos
    .local int rx634_rep
    .local pmc rx634_cur
    .local pmc rx634_curclass
    .local pmc rx634_bstack
    .local pmc rx634_cstack
    (rx634_cur, rx634_tgt, rx634_pos, rx634_curclass, rx634_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx634_cur
    length rx634_eos, rx634_tgt
    eq $I19, 1, rx634_restart1801
    gt rx634_pos, rx634_eos, rx634_fail1802
    repr_get_attr_int $I11, self, rx634_curclass, "$!from"
    ne $I11, -1, rxscan635_done1808
    goto rxscan635_scan1807
  rxscan635_loop1806:
    inc rx634_pos
    gt rx634_pos, rx634_eos, rx634_fail1802
    repr_bind_attr_int rx634_cur, rx634_curclass, "$!from", rx634_pos
  rxscan635_scan1807:
    nqp_rxmark rx634_bstack, rxscan635_loop1806, rx634_pos, 0
  rxscan635_done1808:
    nqp_rxmark rx634_bstack, rxcap636_fail1810, rx634_pos, 0
    add $I11, rx634_pos, 2
    gt $I11, rx634_eos, rx634_fail1802
    substr $S10, rx634_tgt, rx634_pos, 2
    ne $S10, ucs4:"my", rx634_fail1802
    add rx634_pos, 2
    nqp_rxpeek $I19, rx634_bstack, rxcap636_fail1810
    inc $I19
    set $I11, rx634_bstack[$I19]
    repr_bind_attr_int rx634_cur, rx634_curclass, "$!pos", rx634_pos
    $P11 = rx634_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx634_pos)
    rx634_cstack = rx634_cur."!cursor_capture"($P11, "sym")
    goto rxcap636_done1809
  rxcap636_fail1810:
    goto rx634_fail1802
  rxcap636_done1809:
    repr_bind_attr_int rx634_cur, rx634_curclass, "$!pos", rx634_pos
    $P11 = rx634_cur."scoped"("my")
    repr_get_attr_int $I11, $P11, rx634_curclass, "$!pos"
    lt $I11, 0, rx634_fail1802
    nqp_rxmark rx634_bstack, rxsubrule637_pass1811, -1, 0
  rxsubrule637_pass1811:
    rx634_cstack = rx634_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx634_pos, $P11, rx634_curclass, "$!pos"
    rx634_cur."!cursor_pass"(rx634_pos, "scope_declarator:sym<my>", 'backtrack'=>1)
    .return (rx634_cur)
  rx634_restart1801:
    repr_get_attr_obj rx634_cstack, rx634_cur, rx634_curclass, "$!cstack"
  rx634_fail1802:
    unless rx634_bstack, rx634_done1800
    pop $I19, rx634_bstack
    if_null rx634_cstack, rx634_cstack_done1805
    unless rx634_cstack, rx634_cstack_done1805
    dec $I19
    set $P11, rx634_cstack[$I19]
  rx634_cstack_done1805:
    pop rx634_rep, rx634_bstack
    pop rx634_pos, rx634_bstack
    pop $I19, rx634_bstack
    lt rx634_pos, -1, rx634_done1800
    lt rx634_pos, 0, rx634_fail1802
    eq $I19, 0, rx634_fail1802
    nqp_islist $I20, rx634_cstack
    unless $I20, rx634_jump1803
    elements $I18, rx634_bstack
    le $I18, 0, rx634_cut1804
    dec $I18
    set $I18, rx634_bstack[$I18]
  rx634_cut1804:
    assign rx634_cstack, $I18
  rx634_jump1803:
    jump $I19
  rx634_done1800:
    rx634_cur."!cursor_fail"()
    .return (rx634_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_113_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1058
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx638_tgt
    .local int rx638_pos
    .local int rx638_off
    .local int rx638_eos
    .local int rx638_rep
    .local pmc rx638_cur
    .local pmc rx638_curclass
    .local pmc rx638_bstack
    .local pmc rx638_cstack
    (rx638_cur, rx638_tgt, rx638_pos, rx638_curclass, rx638_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx638_cur
    length rx638_eos, rx638_tgt
    eq $I19, 1, rx638_restart1814
    gt rx638_pos, rx638_eos, rx638_fail1815
    repr_get_attr_int $I11, self, rx638_curclass, "$!from"
    ne $I11, -1, rxscan639_done1821
    goto rxscan639_scan1820
  rxscan639_loop1819:
    inc rx638_pos
    gt rx638_pos, rx638_eos, rx638_fail1815
    repr_bind_attr_int rx638_cur, rx638_curclass, "$!from", rx638_pos
  rxscan639_scan1820:
    nqp_rxmark rx638_bstack, rxscan639_loop1819, rx638_pos, 0
  rxscan639_done1821:
    nqp_rxmark rx638_bstack, rxcap640_fail1823, rx638_pos, 0
    add $I11, rx638_pos, 3
    gt $I11, rx638_eos, rx638_fail1815
    substr $S10, rx638_tgt, rx638_pos, 3
    ne $S10, ucs4:"our", rx638_fail1815
    add rx638_pos, 3
    nqp_rxpeek $I19, rx638_bstack, rxcap640_fail1823
    inc $I19
    set $I11, rx638_bstack[$I19]
    repr_bind_attr_int rx638_cur, rx638_curclass, "$!pos", rx638_pos
    $P11 = rx638_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx638_pos)
    rx638_cstack = rx638_cur."!cursor_capture"($P11, "sym")
    goto rxcap640_done1822
  rxcap640_fail1823:
    goto rx638_fail1815
  rxcap640_done1822:
    repr_bind_attr_int rx638_cur, rx638_curclass, "$!pos", rx638_pos
    $P11 = rx638_cur."scoped"("our")
    repr_get_attr_int $I11, $P11, rx638_curclass, "$!pos"
    lt $I11, 0, rx638_fail1815
    nqp_rxmark rx638_bstack, rxsubrule641_pass1824, -1, 0
  rxsubrule641_pass1824:
    rx638_cstack = rx638_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx638_pos, $P11, rx638_curclass, "$!pos"
    rx638_cur."!cursor_pass"(rx638_pos, "scope_declarator:sym<our>", 'backtrack'=>1)
    .return (rx638_cur)
  rx638_restart1814:
    repr_get_attr_obj rx638_cstack, rx638_cur, rx638_curclass, "$!cstack"
  rx638_fail1815:
    unless rx638_bstack, rx638_done1813
    pop $I19, rx638_bstack
    if_null rx638_cstack, rx638_cstack_done1818
    unless rx638_cstack, rx638_cstack_done1818
    dec $I19
    set $P11, rx638_cstack[$I19]
  rx638_cstack_done1818:
    pop rx638_rep, rx638_bstack
    pop rx638_pos, rx638_bstack
    pop $I19, rx638_bstack
    lt rx638_pos, -1, rx638_done1813
    lt rx638_pos, 0, rx638_fail1815
    eq $I19, 0, rx638_fail1815
    nqp_islist $I20, rx638_cstack
    unless $I20, rx638_jump1816
    elements $I18, rx638_bstack
    le $I18, 0, rx638_cut1817
    dec $I18
    set $I18, rx638_bstack[$I18]
  rx638_cut1817:
    assign rx638_cstack, $I18
  rx638_jump1816:
    jump $I19
  rx638_done1813:
    rx638_cur."!cursor_fail"()
    .return (rx638_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_114_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1059
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx642_tgt
    .local int rx642_pos
    .local int rx642_off
    .local int rx642_eos
    .local int rx642_rep
    .local pmc rx642_cur
    .local pmc rx642_curclass
    .local pmc rx642_bstack
    .local pmc rx642_cstack
    (rx642_cur, rx642_tgt, rx642_pos, rx642_curclass, rx642_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx642_cur
    length rx642_eos, rx642_tgt
    eq $I19, 1, rx642_restart1827
    gt rx642_pos, rx642_eos, rx642_fail1828
    repr_get_attr_int $I11, self, rx642_curclass, "$!from"
    ne $I11, -1, rxscan643_done1834
    goto rxscan643_scan1833
  rxscan643_loop1832:
    inc rx642_pos
    gt rx642_pos, rx642_eos, rx642_fail1828
    repr_bind_attr_int rx642_cur, rx642_curclass, "$!from", rx642_pos
  rxscan643_scan1833:
    nqp_rxmark rx642_bstack, rxscan643_loop1832, rx642_pos, 0
  rxscan643_done1834:
    nqp_rxmark rx642_bstack, rxcap644_fail1836, rx642_pos, 0
    add $I11, rx642_pos, 3
    gt $I11, rx642_eos, rx642_fail1828
    substr $S10, rx642_tgt, rx642_pos, 3
    ne $S10, ucs4:"has", rx642_fail1828
    add rx642_pos, 3
    nqp_rxpeek $I19, rx642_bstack, rxcap644_fail1836
    inc $I19
    set $I11, rx642_bstack[$I19]
    repr_bind_attr_int rx642_cur, rx642_curclass, "$!pos", rx642_pos
    $P11 = rx642_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx642_pos)
    rx642_cstack = rx642_cur."!cursor_capture"($P11, "sym")
    goto rxcap644_done1835
  rxcap644_fail1836:
    goto rx642_fail1828
  rxcap644_done1835:
    repr_bind_attr_int rx642_cur, rx642_curclass, "$!pos", rx642_pos
    $P11 = rx642_cur."scoped"("has")
    repr_get_attr_int $I11, $P11, rx642_curclass, "$!pos"
    lt $I11, 0, rx642_fail1828
    nqp_rxmark rx642_bstack, rxsubrule645_pass1837, -1, 0
  rxsubrule645_pass1837:
    rx642_cstack = rx642_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx642_pos, $P11, rx642_curclass, "$!pos"
    rx642_cur."!cursor_pass"(rx642_pos, "scope_declarator:sym<has>", 'backtrack'=>1)
    .return (rx642_cur)
  rx642_restart1827:
    repr_get_attr_obj rx642_cstack, rx642_cur, rx642_curclass, "$!cstack"
  rx642_fail1828:
    unless rx642_bstack, rx642_done1826
    pop $I19, rx642_bstack
    if_null rx642_cstack, rx642_cstack_done1831
    unless rx642_cstack, rx642_cstack_done1831
    dec $I19
    set $P11, rx642_cstack[$I19]
  rx642_cstack_done1831:
    pop rx642_rep, rx642_bstack
    pop rx642_pos, rx642_bstack
    pop $I19, rx642_bstack
    lt rx642_pos, -1, rx642_done1826
    lt rx642_pos, 0, rx642_fail1828
    eq $I19, 0, rx642_fail1828
    nqp_islist $I20, rx642_cstack
    unless $I20, rx642_jump1829
    elements $I18, rx642_bstack
    le $I18, 0, rx642_cut1830
    dec $I18
    set $I18, rx642_bstack[$I18]
  rx642_cut1830:
    assign rx642_cstack, $I18
  rx642_jump1829:
    jump $I19
  rx642_done1826:
    rx642_cur."!cursor_fail"()
    .return (rx642_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_115_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1061
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .lex "$*SCOPE", _lex_param_1 
    .local pmc self 
    set self, _lex_param_0
    .local string rx646_tgt
    .local int rx646_pos
    .local int rx646_off
    .local int rx646_eos
    .local int rx646_rep
    .local pmc rx646_cur
    .local pmc rx646_curclass
    .local pmc rx646_bstack
    .local pmc rx646_cstack
    (rx646_cur, rx646_tgt, rx646_pos, rx646_curclass, rx646_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx646_cur
    length rx646_eos, rx646_tgt
    eq $I19, 1, rx646_restart1840
    gt rx646_pos, rx646_eos, rx646_fail1841
    repr_get_attr_int $I11, self, rx646_curclass, "$!from"
    ne $I11, -1, rxscan647_done1847
    goto rxscan647_scan1846
  rxscan647_loop1845:
    inc rx646_pos
    gt rx646_pos, rx646_eos, rx646_fail1841
    repr_bind_attr_int rx646_cur, rx646_curclass, "$!from", rx646_pos
  rxscan647_scan1846:
    nqp_rxmark rx646_bstack, rxscan647_loop1845, rx646_pos, 0
  rxscan647_done1847:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt648_01849
    nqp_push_label $P11, alt648_11853
    nqp_push_label $P11, alt648_21857
    nqp_rxmark rx646_bstack, alt648_end1848, -1, 0
    rx646_cur."!alt"(rx646_pos, "alt_nfa__21_1360426905.67", $P11)
    goto rx646_fail1841
  alt648_01849:
    repr_bind_attr_int rx646_cur, rx646_curclass, "$!pos", rx646_pos
    $P11 = rx646_cur."ws"()
    repr_get_attr_int $I11, $P11, rx646_curclass, "$!pos"
    lt $I11, 0, rx646_fail1841
    repr_get_attr_int rx646_pos, $P11, rx646_curclass, "$!pos"
    repr_bind_attr_int rx646_cur, rx646_curclass, "$!pos", rx646_pos
    $P11 = rx646_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx646_curclass, "$!pos"
    lt $I11, 0, rx646_fail1841
    nqp_rxmark rx646_bstack, rxsubrule650_pass1851, -1, 0
  rxsubrule650_pass1851:
    rx646_cstack = rx646_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx646_pos, $P11, rx646_curclass, "$!pos"
    repr_bind_attr_int rx646_cur, rx646_curclass, "$!pos", rx646_pos
    $P11 = rx646_cur."ws"()
    repr_get_attr_int $I11, $P11, rx646_curclass, "$!pos"
    lt $I11, 0, rx646_fail1841
    repr_get_attr_int rx646_pos, $P11, rx646_curclass, "$!pos"
    goto alt648_end1848
  alt648_11853:
    repr_bind_attr_int rx646_cur, rx646_curclass, "$!pos", rx646_pos
    $P11 = rx646_cur."ws"()
    repr_get_attr_int $I11, $P11, rx646_curclass, "$!pos"
    lt $I11, 0, rx646_fail1841
    repr_get_attr_int rx646_pos, $P11, rx646_curclass, "$!pos"
    repr_bind_attr_int rx646_cur, rx646_curclass, "$!pos", rx646_pos
    $P11 = rx646_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx646_curclass, "$!pos"
    lt $I11, 0, rx646_fail1841
    nqp_rxmark rx646_bstack, rxsubrule653_pass1855, -1, 0
  rxsubrule653_pass1855:
    rx646_cstack = rx646_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx646_pos, $P11, rx646_curclass, "$!pos"
    repr_bind_attr_int rx646_cur, rx646_curclass, "$!pos", rx646_pos
    $P11 = rx646_cur."ws"()
    repr_get_attr_int $I11, $P11, rx646_curclass, "$!pos"
    lt $I11, 0, rx646_fail1841
    repr_get_attr_int rx646_pos, $P11, rx646_curclass, "$!pos"
    goto alt648_end1848
  alt648_21857:
    repr_bind_attr_int rx646_cur, rx646_curclass, "$!pos", rx646_pos
    $P11 = rx646_cur."ws"()
    repr_get_attr_int $I11, $P11, rx646_curclass, "$!pos"
    lt $I11, 0, rx646_fail1841
    repr_get_attr_int rx646_pos, $P11, rx646_curclass, "$!pos"
    repr_bind_attr_int rx646_cur, rx646_curclass, "$!pos", rx646_pos
    $P11 = rx646_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx646_curclass, "$!pos"
    lt $I11, 0, rx646_fail1841
    nqp_rxmark rx646_bstack, rxsubrule656_pass1859, -1, 0
  rxsubrule656_pass1859:
    rx646_cstack = rx646_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx646_pos, $P11, rx646_curclass, "$!pos"
    repr_bind_attr_int rx646_cur, rx646_curclass, "$!pos", rx646_pos
    $P11 = rx646_cur."ws"()
    repr_get_attr_int $I11, $P11, rx646_curclass, "$!pos"
    lt $I11, 0, rx646_fail1841
    repr_get_attr_int rx646_pos, $P11, rx646_curclass, "$!pos"
    goto alt648_end1848
  alt648_end1848:
    rx646_cur."!cursor_pass"(rx646_pos, "scoped", 'backtrack'=>1)
    .return (rx646_cur)
  rx646_restart1840:
    repr_get_attr_obj rx646_cstack, rx646_cur, rx646_curclass, "$!cstack"
  rx646_fail1841:
    unless rx646_bstack, rx646_done1839
    pop $I19, rx646_bstack
    if_null rx646_cstack, rx646_cstack_done1844
    unless rx646_cstack, rx646_cstack_done1844
    dec $I19
    set $P11, rx646_cstack[$I19]
  rx646_cstack_done1844:
    pop rx646_rep, rx646_bstack
    pop rx646_pos, rx646_bstack
    pop $I19, rx646_bstack
    lt rx646_pos, -1, rx646_done1839
    lt rx646_pos, 0, rx646_fail1841
    eq $I19, 0, rx646_fail1841
    nqp_islist $I20, rx646_cstack
    unless $I20, rx646_jump1842
    elements $I18, rx646_bstack
    le $I18, 0, rx646_cut1843
    dec $I18
    set $I18, rx646_bstack[$I18]
  rx646_cut1843:
    assign rx646_cstack, $I18
  rx646_jump1842:
    jump $I19
  rx646_done1839:
    rx646_cur."!cursor_fail"()
    .return (rx646_cur) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_116_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1067
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_403_1360426903.566' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx658_tgt
    .local int rx658_pos
    .local int rx658_off
    .local int rx658_eos
    .local int rx658_rep
    .local pmc rx658_cur
    .local pmc rx658_curclass
    .local pmc rx658_bstack
    .local pmc rx658_cstack
    (rx658_cur, rx658_tgt, rx658_pos, rx658_curclass, rx658_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx658_cur
    length rx658_eos, rx658_tgt
    eq $I19, 1, rx658_restart1863
    gt rx658_pos, rx658_eos, rx658_fail1864
    repr_get_attr_int $I11, self, rx658_curclass, "$!from"
    ne $I11, -1, rxscan659_done1870
    goto rxscan659_scan1869
  rxscan659_loop1868:
    inc rx658_pos
    gt rx658_pos, rx658_eos, rx658_fail1864
    repr_bind_attr_int rx658_cur, rx658_curclass, "$!from", rx658_pos
  rxscan659_scan1869:
    nqp_rxmark rx658_bstack, rxscan659_loop1868, rx658_pos, 0
  rxscan659_done1870:
    repr_bind_attr_int rx658_cur, rx658_curclass, "$!pos", rx658_pos
    $P11 = rx658_cur."name"()
    repr_get_attr_int $I11, $P11, rx658_curclass, "$!pos"
    lt $I11, 0, rx658_fail1864
    nqp_rxmark rx658_bstack, rxsubrule660_pass1871, -1, 0
  rxsubrule660_pass1871:
    rx658_cstack = rx658_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx658_pos, $P11, rx658_curclass, "$!pos"
    repr_bind_attr_int rx658_cur, rx658_curclass, "$!pos", rx658_pos
    store_lex unicode:"$\x{a2}", rx658_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_403_1360426903.566' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx658_fail1864
    rx658_cur."!cursor_pass"(rx658_pos, "typename", 'backtrack'=>1)
    .return (rx658_cur)
  rx658_restart1863:
    repr_get_attr_obj rx658_cstack, rx658_cur, rx658_curclass, "$!cstack"
  rx658_fail1864:
    unless rx658_bstack, rx658_done1862
    pop $I19, rx658_bstack
    if_null rx658_cstack, rx658_cstack_done1867
    unless rx658_cstack, rx658_cstack_done1867
    dec $I19
    set $P11, rx658_cstack[$I19]
  rx658_cstack_done1867:
    pop rx658_rep, rx658_bstack
    pop rx658_pos, rx658_bstack
    pop $I19, rx658_bstack
    lt rx658_pos, -1, rx658_done1862
    lt rx658_pos, 0, rx658_fail1864
    eq $I19, 0, rx658_fail1864
    nqp_islist $I20, rx658_cstack
    unless $I20, rx658_jump1865
    elements $I18, rx658_bstack
    le $I18, 0, rx658_cut1866
    dec $I18
    set $I18, rx658_bstack[$I18]
  rx658_cut1866:
    assign rx658_cstack, $I18
  rx658_jump1865:
    jump $I19
  rx658_done1862:
    rx658_cur."!cursor_fail"()
    .return (rx658_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_403_1360426903.566") :anon :lex :outer("cuid_116_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1069

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback1872
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback1873
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback1873:
    unless_null $P5002, vivi_6611874
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_6611874:
    set $P5001, $P5002
  fallback1872:
    find_lex $P5007, "$/"
    find_lex $P5010, "$/"
    unless_null $P5010, fallback1875
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5011
  fallback1875:
    set $P5009, $P5010["name"]
    unless_null $P5009, fallback1876
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5012
  fallback1876:
    set $P5008, $P5009["identifier"]
    unless_null $P5008, fallback1877
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5013
  fallback1877:
    $P5014 = $P5001."known_sym"($P5007, $P5008)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_117_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1072
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx662_tgt
    .local int rx662_pos
    .local int rx662_off
    .local int rx662_eos
    .local int rx662_rep
    .local pmc rx662_cur
    .local pmc rx662_curclass
    .local pmc rx662_bstack
    .local pmc rx662_cstack
    (rx662_cur, rx662_tgt, rx662_pos, rx662_curclass, rx662_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx662_cur
    length rx662_eos, rx662_tgt
    eq $I19, 1, rx662_restart1880
    gt rx662_pos, rx662_eos, rx662_fail1881
    repr_get_attr_int $I11, self, rx662_curclass, "$!from"
    ne $I11, -1, rxscan663_done1887
    goto rxscan663_scan1886
  rxscan663_loop1885:
    inc rx662_pos
    gt rx662_pos, rx662_eos, rx662_fail1881
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!from", rx662_pos
  rxscan663_scan1886:
    nqp_rxmark rx662_bstack, rxscan663_loop1885, rx662_pos, 0
  rxscan663_done1887:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt664_01889
    nqp_push_label $P11, alt664_11891
    nqp_rxmark rx662_bstack, alt664_end1888, -1, 0
    rx662_cur."!alt"(rx662_pos, "alt_nfa__22_1360426905.683", $P11)
    goto rx662_fail1881
  alt664_01889:
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    $P11 = rx662_cur."variable_declarator"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail1881
    nqp_rxmark rx662_bstack, rxsubrule665_pass1890, -1, 0
  rxsubrule665_pass1890:
    rx662_cstack = rx662_cur."!cursor_capture"($P11, "variable_declarator")
    repr_get_attr_int rx662_pos, $P11, rx662_curclass, "$!pos"
    goto alt664_end1888
  alt664_11891:
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    $P11 = rx662_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail1881
    nqp_rxmark rx662_bstack, rxsubrule666_pass1892, -1, 0
  rxsubrule666_pass1892:
    rx662_cstack = rx662_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx662_pos, $P11, rx662_curclass, "$!pos"
    goto alt664_end1888
  alt664_end1888:
    rx662_cur."!cursor_pass"(rx662_pos, "declarator", 'backtrack'=>1)
    .return (rx662_cur)
  rx662_restart1880:
    repr_get_attr_obj rx662_cstack, rx662_cur, rx662_curclass, "$!cstack"
  rx662_fail1881:
    unless rx662_bstack, rx662_done1879
    pop $I19, rx662_bstack
    if_null rx662_cstack, rx662_cstack_done1884
    unless rx662_cstack, rx662_cstack_done1884
    dec $I19
    set $P11, rx662_cstack[$I19]
  rx662_cstack_done1884:
    pop rx662_rep, rx662_bstack
    pop rx662_pos, rx662_bstack
    pop $I19, rx662_bstack
    lt rx662_pos, -1, rx662_done1879
    lt rx662_pos, 0, rx662_fail1881
    eq $I19, 0, rx662_fail1881
    nqp_islist $I20, rx662_cstack
    unless $I20, rx662_jump1882
    elements $I18, rx662_bstack
    le $I18, 0, rx662_cut1883
    dec $I18
    set $I18, rx662_bstack[$I18]
  rx662_cut1883:
    assign rx662_cstack, $I18
  rx662_jump1882:
    jump $I19
  rx662_done1879:
    rx662_cur."!cursor_fail"()
    .return (rx662_cur) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_118_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1077
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_404_1360426903.566' 
    capture_lex $P5006 
    .lex "$*IN_DECL", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx667_tgt
    .local int rx667_pos
    .local int rx667_off
    .local int rx667_eos
    .local int rx667_rep
    .local pmc rx667_cur
    .local pmc rx667_curclass
    .local pmc rx667_bstack
    .local pmc rx667_cstack
    (rx667_cur, rx667_tgt, rx667_pos, rx667_curclass, rx667_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx667_cur
    length rx667_eos, rx667_tgt
    eq $I19, 1, rx667_restart1895
    gt rx667_pos, rx667_eos, rx667_fail1896
    repr_get_attr_int $I11, self, rx667_curclass, "$!from"
    ne $I11, -1, rxscan668_done1902
    goto rxscan668_scan1901
  rxscan668_loop1900:
    inc rx667_pos
    gt rx667_pos, rx667_eos, rx667_fail1896
    repr_bind_attr_int rx667_cur, rx667_curclass, "$!from", rx667_pos
  rxscan668_scan1901:
    nqp_rxmark rx667_bstack, rxscan668_loop1900, rx667_pos, 0
  rxscan668_done1902:
    repr_bind_attr_int rx667_cur, rx667_curclass, "$!pos", rx667_pos
    $P11 = rx667_cur."ws"()
    repr_get_attr_int $I11, $P11, rx667_curclass, "$!pos"
    lt $I11, 0, rx667_fail1896
    repr_get_attr_int rx667_pos, $P11, rx667_curclass, "$!pos"
    nqp_rxmark rx667_bstack, rxquantr670_done1905, rx667_pos, 0
  rxquantr670_loop1904:
    repr_bind_attr_int rx667_cur, rx667_curclass, "$!pos", rx667_pos
    $P11 = rx667_cur."typename"()
    repr_get_attr_int $I11, $P11, rx667_curclass, "$!pos"
    lt $I11, 0, rx667_fail1896
    goto rxsubrule671_pass1906
  rxsubrule671_back1907:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx667_curclass, "$!pos"
    lt $I11, 0, rx667_fail1896
  rxsubrule671_pass1906:
    rx667_cstack = rx667_cur."!cursor_capture"($P11, "typename")
    set_addr $I11, rxsubrule671_back1907
    push rx667_bstack, $I11
    push rx667_bstack, 0
    push rx667_bstack, rx667_pos
    elements $I11, rx667_cstack
    push rx667_bstack, $I11
    repr_get_attr_int rx667_pos, $P11, rx667_curclass, "$!pos"
    nqp_rxpeek $I19, rx667_bstack, rxquantr670_done1905
    inc $I19
    inc $I19
    set rx667_rep, rx667_bstack[$I19]
    nqp_rxcommit rx667_bstack, rxquantr670_done1905
    inc rx667_rep
  rxquantr670_done1905:
    repr_bind_attr_int rx667_cur, rx667_curclass, "$!pos", rx667_pos
    $P11 = rx667_cur."ws"()
    repr_get_attr_int $I11, $P11, rx667_curclass, "$!pos"
    lt $I11, 0, rx667_fail1896
    repr_get_attr_int rx667_pos, $P11, rx667_curclass, "$!pos"
    repr_bind_attr_int rx667_cur, rx667_curclass, "$!pos", rx667_pos
    store_lex unicode:"$\x{a2}", rx667_cur
    box $P5002, "variable"
    set $P101, $P5002
    repr_bind_attr_int rx667_cur, rx667_curclass, "$!pos", rx667_pos
    $P11 = rx667_cur."ws"()
    repr_get_attr_int $I11, $P11, rx667_curclass, "$!pos"
    lt $I11, 0, rx667_fail1896
    repr_get_attr_int rx667_pos, $P11, rx667_curclass, "$!pos"
    repr_bind_attr_int rx667_cur, rx667_curclass, "$!pos", rx667_pos
    $P11 = rx667_cur."variable"()
    repr_get_attr_int $I11, $P11, rx667_curclass, "$!pos"
    lt $I11, 0, rx667_fail1896
    nqp_rxmark rx667_bstack, rxsubrule674_pass1910, -1, 0
  rxsubrule674_pass1910:
    rx667_cstack = rx667_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx667_pos, $P11, rx667_curclass, "$!pos"
    repr_bind_attr_int rx667_cur, rx667_curclass, "$!pos", rx667_pos
    $P11 = rx667_cur."ws"()
    repr_get_attr_int $I11, $P11, rx667_curclass, "$!pos"
    lt $I11, 0, rx667_fail1896
    repr_get_attr_int rx667_pos, $P11, rx667_curclass, "$!pos"
    repr_bind_attr_int rx667_cur, rx667_curclass, "$!pos", rx667_pos
    store_lex unicode:"$\x{a2}", rx667_cur
    $P5003 = $P102."MATCH"()
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_404_1360426903.566' 
    capture_lex $P5004
    $P5005 = $P5004()
    repr_bind_attr_int rx667_cur, rx667_curclass, "$!pos", rx667_pos
    $P11 = rx667_cur."ws"()
    repr_get_attr_int $I11, $P11, rx667_curclass, "$!pos"
    lt $I11, 0, rx667_fail1896
    repr_get_attr_int rx667_pos, $P11, rx667_curclass, "$!pos"
    nqp_rxmark rx667_bstack, rxquantr677_done1914, rx667_pos, 0
  rxquantr677_loop1913:
    repr_bind_attr_int rx667_cur, rx667_curclass, "$!pos", rx667_pos
    $P11 = rx667_cur."trait"()
    repr_get_attr_int $I11, $P11, rx667_curclass, "$!pos"
    lt $I11, 0, rx667_fail1896
    goto rxsubrule678_pass1915
  rxsubrule678_back1916:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx667_curclass, "$!pos"
    lt $I11, 0, rx667_fail1896
  rxsubrule678_pass1915:
    rx667_cstack = rx667_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule678_back1916
    push rx667_bstack, $I11
    push rx667_bstack, 0
    push rx667_bstack, rx667_pos
    elements $I11, rx667_cstack
    push rx667_bstack, $I11
    repr_get_attr_int rx667_pos, $P11, rx667_curclass, "$!pos"
    nqp_rxpeek $I19, rx667_bstack, rxquantr677_done1914
    inc $I19
    inc $I19
    set rx667_rep, rx667_bstack[$I19]
    nqp_rxcommit rx667_bstack, rxquantr677_done1914
    inc rx667_rep
    nqp_rxmark rx667_bstack, rxquantr677_done1914, rx667_pos, rx667_rep
    goto rxquantr677_loop1913
  rxquantr677_done1914:
    repr_bind_attr_int rx667_cur, rx667_curclass, "$!pos", rx667_pos
    $P11 = rx667_cur."ws"()
    repr_get_attr_int $I11, $P11, rx667_curclass, "$!pos"
    lt $I11, 0, rx667_fail1896
    repr_get_attr_int rx667_pos, $P11, rx667_curclass, "$!pos"
    rx667_cur."!cursor_pass"(rx667_pos, "variable_declarator", 'backtrack'=>1)
    .return (rx667_cur)
  rx667_restart1895:
    repr_get_attr_obj rx667_cstack, rx667_cur, rx667_curclass, "$!cstack"
  rx667_fail1896:
    unless rx667_bstack, rx667_done1894
    pop $I19, rx667_bstack
    if_null rx667_cstack, rx667_cstack_done1899
    unless rx667_cstack, rx667_cstack_done1899
    dec $I19
    set $P11, rx667_cstack[$I19]
  rx667_cstack_done1899:
    pop rx667_rep, rx667_bstack
    pop rx667_pos, rx667_bstack
    pop $I19, rx667_bstack
    lt rx667_pos, -1, rx667_done1894
    lt rx667_pos, 0, rx667_fail1896
    eq $I19, 0, rx667_fail1896
    nqp_islist $I20, rx667_cstack
    unless $I20, rx667_jump1897
    elements $I18, rx667_bstack
    le $I18, 0, rx667_cut1898
    dec $I18
    set $I18, rx667_bstack[$I18]
  rx667_cut1898:
    assign rx667_cstack, $I18
  rx667_jump1897:
    jump $I19
  rx667_done1894:
    rx667_cur."!cursor_fail"()
    .return (rx667_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_404_1360426903.566") :anon :lex :outer("cuid_118_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1081

    box $P5001, 0
    store_dynamic_lex "$*IN_DECL", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator" :subid("cuid_119_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1085
    .param pmc self 
    $P5001 = self."!protoregex"("routine_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_120_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1086
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx680_tgt
    .local int rx680_pos
    .local int rx680_off
    .local int rx680_eos
    .local int rx680_rep
    .local pmc rx680_cur
    .local pmc rx680_curclass
    .local pmc rx680_bstack
    .local pmc rx680_cstack
    (rx680_cur, rx680_tgt, rx680_pos, rx680_curclass, rx680_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx680_cur
    length rx680_eos, rx680_tgt
    eq $I19, 1, rx680_restart1920
    gt rx680_pos, rx680_eos, rx680_fail1921
    repr_get_attr_int $I11, self, rx680_curclass, "$!from"
    ne $I11, -1, rxscan681_done1927
    goto rxscan681_scan1926
  rxscan681_loop1925:
    inc rx680_pos
    gt rx680_pos, rx680_eos, rx680_fail1921
    repr_bind_attr_int rx680_cur, rx680_curclass, "$!from", rx680_pos
  rxscan681_scan1926:
    nqp_rxmark rx680_bstack, rxscan681_loop1925, rx680_pos, 0
  rxscan681_done1927:
    nqp_rxmark rx680_bstack, rxcap682_fail1929, rx680_pos, 0
    add $I11, rx680_pos, 3
    gt $I11, rx680_eos, rx680_fail1921
    substr $S10, rx680_tgt, rx680_pos, 3
    ne $S10, ucs4:"sub", rx680_fail1921
    add rx680_pos, 3
    nqp_rxpeek $I19, rx680_bstack, rxcap682_fail1929
    inc $I19
    set $I11, rx680_bstack[$I19]
    repr_bind_attr_int rx680_cur, rx680_curclass, "$!pos", rx680_pos
    $P11 = rx680_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx680_pos)
    rx680_cstack = rx680_cur."!cursor_capture"($P11, "sym")
    goto rxcap682_done1928
  rxcap682_fail1929:
    goto rx680_fail1921
  rxcap682_done1928:
    repr_bind_attr_int rx680_cur, rx680_curclass, "$!pos", rx680_pos
    $P11 = rx680_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx680_curclass, "$!pos"
    lt $I11, 0, rx680_fail1921
    nqp_rxmark rx680_bstack, rxsubrule683_pass1930, -1, 0
  rxsubrule683_pass1930:
    rx680_cstack = rx680_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx680_pos, $P11, rx680_curclass, "$!pos"
    rx680_cur."!cursor_pass"(rx680_pos, "routine_declarator:sym<sub>", 'backtrack'=>1)
    .return (rx680_cur)
  rx680_restart1920:
    repr_get_attr_obj rx680_cstack, rx680_cur, rx680_curclass, "$!cstack"
  rx680_fail1921:
    unless rx680_bstack, rx680_done1919
    pop $I19, rx680_bstack
    if_null rx680_cstack, rx680_cstack_done1924
    unless rx680_cstack, rx680_cstack_done1924
    dec $I19
    set $P11, rx680_cstack[$I19]
  rx680_cstack_done1924:
    pop rx680_rep, rx680_bstack
    pop rx680_pos, rx680_bstack
    pop $I19, rx680_bstack
    lt rx680_pos, -1, rx680_done1919
    lt rx680_pos, 0, rx680_fail1921
    eq $I19, 0, rx680_fail1921
    nqp_islist $I20, rx680_cstack
    unless $I20, rx680_jump1922
    elements $I18, rx680_bstack
    le $I18, 0, rx680_cut1923
    dec $I18
    set $I18, rx680_bstack[$I18]
  rx680_cut1923:
    assign rx680_cstack, $I18
  rx680_jump1922:
    jump $I19
  rx680_done1919:
    rx680_cur."!cursor_fail"()
    .return (rx680_cur) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_121_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1087
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx684_tgt
    .local int rx684_pos
    .local int rx684_off
    .local int rx684_eos
    .local int rx684_rep
    .local pmc rx684_cur
    .local pmc rx684_curclass
    .local pmc rx684_bstack
    .local pmc rx684_cstack
    (rx684_cur, rx684_tgt, rx684_pos, rx684_curclass, rx684_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx684_cur
    length rx684_eos, rx684_tgt
    eq $I19, 1, rx684_restart1933
    gt rx684_pos, rx684_eos, rx684_fail1934
    repr_get_attr_int $I11, self, rx684_curclass, "$!from"
    ne $I11, -1, rxscan685_done1940
    goto rxscan685_scan1939
  rxscan685_loop1938:
    inc rx684_pos
    gt rx684_pos, rx684_eos, rx684_fail1934
    repr_bind_attr_int rx684_cur, rx684_curclass, "$!from", rx684_pos
  rxscan685_scan1939:
    nqp_rxmark rx684_bstack, rxscan685_loop1938, rx684_pos, 0
  rxscan685_done1940:
    nqp_rxmark rx684_bstack, rxcap686_fail1942, rx684_pos, 0
    add $I11, rx684_pos, 6
    gt $I11, rx684_eos, rx684_fail1934
    substr $S10, rx684_tgt, rx684_pos, 6
    ne $S10, ucs4:"method", rx684_fail1934
    add rx684_pos, 6
    nqp_rxpeek $I19, rx684_bstack, rxcap686_fail1942
    inc $I19
    set $I11, rx684_bstack[$I19]
    repr_bind_attr_int rx684_cur, rx684_curclass, "$!pos", rx684_pos
    $P11 = rx684_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx684_pos)
    rx684_cstack = rx684_cur."!cursor_capture"($P11, "sym")
    goto rxcap686_done1941
  rxcap686_fail1942:
    goto rx684_fail1934
  rxcap686_done1941:
    repr_bind_attr_int rx684_cur, rx684_curclass, "$!pos", rx684_pos
    $P11 = rx684_cur."method_def"()
    repr_get_attr_int $I11, $P11, rx684_curclass, "$!pos"
    lt $I11, 0, rx684_fail1934
    nqp_rxmark rx684_bstack, rxsubrule687_pass1943, -1, 0
  rxsubrule687_pass1943:
    rx684_cstack = rx684_cur."!cursor_capture"($P11, "method_def")
    repr_get_attr_int rx684_pos, $P11, rx684_curclass, "$!pos"
    rx684_cur."!cursor_pass"(rx684_pos, "routine_declarator:sym<method>", 'backtrack'=>1)
    .return (rx684_cur)
  rx684_restart1933:
    repr_get_attr_obj rx684_cstack, rx684_cur, rx684_curclass, "$!cstack"
  rx684_fail1934:
    unless rx684_bstack, rx684_done1932
    pop $I19, rx684_bstack
    if_null rx684_cstack, rx684_cstack_done1937
    unless rx684_cstack, rx684_cstack_done1937
    dec $I19
    set $P11, rx684_cstack[$I19]
  rx684_cstack_done1937:
    pop rx684_rep, rx684_bstack
    pop rx684_pos, rx684_bstack
    pop $I19, rx684_bstack
    lt rx684_pos, -1, rx684_done1932
    lt rx684_pos, 0, rx684_fail1934
    eq $I19, 0, rx684_fail1934
    nqp_islist $I20, rx684_cstack
    unless $I20, rx684_jump1935
    elements $I18, rx684_bstack
    le $I18, 0, rx684_cut1936
    dec $I18
    set $I18, rx684_bstack[$I18]
  rx684_cut1936:
    assign rx684_cstack, $I18
  rx684_jump1935:
    jump $I19
  rx684_done1932:
    rx684_cur."!cursor_fail"()
    .return (rx684_cur) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_122_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1089
    .param pmc _lex_param_0 
    .lex "$*RETURN_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx688_tgt
    .local int rx688_pos
    .local int rx688_off
    .local int rx688_eos
    .local int rx688_rep
    .local pmc rx688_cur
    .local pmc rx688_curclass
    .local pmc rx688_bstack
    .local pmc rx688_cstack
    (rx688_cur, rx688_tgt, rx688_pos, rx688_curclass, rx688_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx688_cur
    length rx688_eos, rx688_tgt
    eq $I19, 1, rx688_restart1946
    gt rx688_pos, rx688_eos, rx688_fail1947
    repr_get_attr_int $I11, self, rx688_curclass, "$!from"
    ne $I11, -1, rxscan689_done1953
    goto rxscan689_scan1952
  rxscan689_loop1951:
    inc rx688_pos
    gt rx688_pos, rx688_eos, rx688_fail1947
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!from", rx688_pos
  rxscan689_scan1952:
    nqp_rxmark rx688_bstack, rxscan689_loop1951, rx688_pos, 0
  rxscan689_done1953:
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."ws"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    store_lex unicode:"$\x{a2}", rx688_cur
    box $P5002, 0
    set $P101, $P5002
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."ws"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
    nqp_rxmark rx688_bstack, rxquantr692_done1957, rx688_pos, 0
  rxquantr692_loop1956:
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."ws"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
    nqp_rxmark rx688_bstack, rxcap694_fail1960, rx688_pos, 0
    nqp_rxmark rx688_bstack, rxquantr695_done1962, rx688_pos, 0
  rxquantr695_loop1961:
    add $I11, rx688_pos, 1
    gt $I11, rx688_eos, rx688_fail1947
    substr $S10, rx688_tgt, rx688_pos, 1
    ne $S10, ucs4:"&", rx688_fail1947
    add rx688_pos, 1
    nqp_rxpeek $I19, rx688_bstack, rxquantr695_done1962
    inc $I19
    inc $I19
    set rx688_rep, rx688_bstack[$I19]
    nqp_rxcommit rx688_bstack, rxquantr695_done1962
    inc rx688_rep
  rxquantr695_done1962:
    nqp_rxpeek $I19, rx688_bstack, rxcap694_fail1960
    inc $I19
    set $I11, rx688_bstack[$I19]
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx688_pos)
    rx688_cstack = rx688_cur."!cursor_capture"($P11, "sigil")
    goto rxcap694_done1959
  rxcap694_fail1960:
    goto rx688_fail1947
  rxcap694_done1959:
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    nqp_rxmark rx688_bstack, rxsubrule696_pass1963, -1, 0
  rxsubrule696_pass1963:
    rx688_cstack = rx688_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."ws"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
    nqp_rxpeek $I19, rx688_bstack, rxquantr692_done1957
    inc $I19
    inc $I19
    set rx688_rep, rx688_bstack[$I19]
    nqp_rxcommit rx688_bstack, rxquantr692_done1957
    inc rx688_rep
  rxquantr692_done1957:
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."ws"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."ws"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
  alt701_01969:
    nqp_rxmark rx688_bstack, alt701_11975, rx688_pos, 0
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."ws"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
    add $I11, rx688_pos, 1
    gt $I11, rx688_eos, rx688_fail1947
    substr $S10, rx688_tgt, rx688_pos, 1
    ne $S10, ucs4:"(", rx688_fail1947
    add rx688_pos, 1
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."ws"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."signature"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    nqp_rxmark rx688_bstack, rxsubrule704_pass1972, -1, 0
  rxsubrule704_pass1972:
    rx688_cstack = rx688_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."ws"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
    add $I11, rx688_pos, 1
    gt $I11, rx688_eos, rx688_fail1947
    substr $S10, rx688_tgt, rx688_pos, 1
    ne $S10, ucs4:")", rx688_fail1947
    add rx688_pos, 1
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."ws"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
    goto alt701_end1968
  alt701_11975:
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."ws"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."ws"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
  alt701_end1968:
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."ws"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
    nqp_rxmark rx688_bstack, rxquantr711_done1981, rx688_pos, 0
  rxquantr711_loop1980:
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."trait"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    goto rxsubrule712_pass1982
  rxsubrule712_back1983:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
  rxsubrule712_pass1982:
    rx688_cstack = rx688_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule712_back1983
    push rx688_bstack, $I11
    push rx688_bstack, 0
    push rx688_bstack, rx688_pos
    elements $I11, rx688_cstack
    push rx688_bstack, $I11
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
    nqp_rxpeek $I19, rx688_bstack, rxquantr711_done1981
    inc $I19
    inc $I19
    set rx688_rep, rx688_bstack[$I19]
    nqp_rxcommit rx688_bstack, rxquantr711_done1981
    inc rx688_rep
    nqp_rxmark rx688_bstack, rxquantr711_done1981, rx688_pos, rx688_rep
    goto rxquantr711_loop1980
  rxquantr711_done1981:
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."ws"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt714_01986
    nqp_push_label $P11, alt714_11990
    nqp_rxmark rx688_bstack, alt714_end1985, -1, 0
    rx688_cur."!alt"(rx688_pos, "alt_nfa__23_1360426905.731", $P11)
    goto rx688_fail1947
  alt714_01986:
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."ws"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    nqp_rxmark rx688_bstack, rxsubrule716_pass1988, -1, 0
  rxsubrule716_pass1988:
    rx688_cstack = rx688_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."ws"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
    goto alt714_end1985
  alt714_11990:
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."ws"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    nqp_rxmark rx688_bstack, rxsubrule719_pass1992, -1, 0
  rxsubrule719_pass1992:
    rx688_cstack = rx688_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."ws"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
    goto alt714_end1985
  alt714_end1985:
    nqp_rxcommit rx688_bstack, alt714_end1985
    repr_bind_attr_int rx688_cur, rx688_curclass, "$!pos", rx688_pos
    $P11 = rx688_cur."ws"()
    repr_get_attr_int $I11, $P11, rx688_curclass, "$!pos"
    lt $I11, 0, rx688_fail1947
    repr_get_attr_int rx688_pos, $P11, rx688_curclass, "$!pos"
    rx688_cur."!cursor_pass"(rx688_pos, "routine_def", 'backtrack'=>1)
    .return (rx688_cur)
  rx688_restart1946:
    repr_get_attr_obj rx688_cstack, rx688_cur, rx688_curclass, "$!cstack"
  rx688_fail1947:
    unless rx688_bstack, rx688_done1945
    pop $I19, rx688_bstack
    if_null rx688_cstack, rx688_cstack_done1950
    unless rx688_cstack, rx688_cstack_done1950
    dec $I19
    set $P11, rx688_cstack[$I19]
  rx688_cstack_done1950:
    pop rx688_rep, rx688_bstack
    pop rx688_pos, rx688_bstack
    pop $I19, rx688_bstack
    lt rx688_pos, -1, rx688_done1945
    lt rx688_pos, 0, rx688_fail1947
    eq $I19, 0, rx688_fail1947
    nqp_islist $I20, rx688_cstack
    unless $I20, rx688_jump1948
    elements $I18, rx688_bstack
    le $I18, 0, rx688_cut1949
    dec $I18
    set $I18, rx688_bstack[$I18]
  rx688_cut1949:
    assign rx688_cstack, $I18
  rx688_jump1948:
    jump $I19
  rx688_done1945:
    rx688_cur."!cursor_fail"()
    .return (rx688_cur) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_123_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1102
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_405_1360426903.566' 
    capture_lex $P5008 
    .lex "$*RETURN_USED", $P101 
    .lex "$*INVOCANT_OK", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx722_tgt
    .local int rx722_pos
    .local int rx722_off
    .local int rx722_eos
    .local int rx722_rep
    .local pmc rx722_cur
    .local pmc rx722_curclass
    .local pmc rx722_bstack
    .local pmc rx722_cstack
    (rx722_cur, rx722_tgt, rx722_pos, rx722_curclass, rx722_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx722_cur
    length rx722_eos, rx722_tgt
    eq $I19, 1, rx722_restart1997
    gt rx722_pos, rx722_eos, rx722_fail1998
    repr_get_attr_int $I11, self, rx722_curclass, "$!from"
    ne $I11, -1, rxscan723_done2004
    goto rxscan723_scan2003
  rxscan723_loop2002:
    inc rx722_pos
    gt rx722_pos, rx722_eos, rx722_fail1998
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!from", rx722_pos
  rxscan723_scan2003:
    nqp_rxmark rx722_bstack, rxscan723_loop2002, rx722_pos, 0
  rxscan723_done2004:
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    store_lex unicode:"$\x{a2}", rx722_cur
    box $P5003, 0
    set $P101, $P5003
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    store_lex unicode:"$\x{a2}", rx722_cur
    box $P5004, 1
    set $P102, $P5004
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
  alt727_02009:
    nqp_rxmark rx722_bstack, alt727_12015, rx722_pos, 0
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    add $I11, rx722_pos, 3
    gt $I11, rx722_eos, rx722_fail1998
    substr $S10, rx722_tgt, rx722_pos, 3
    ne $S10, ucs4:"::(", rx722_fail1998
    add rx722_pos, 3
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."variable"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    nqp_rxmark rx722_bstack, rxsubrule730_pass2012, -1, 0
  rxsubrule730_pass2012:
    rx722_cstack = rx722_cur."!cursor_capture"($P11, "latename=variable")
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    add $I11, rx722_pos, 1
    gt $I11, rx722_eos, rx722_fail1998
    substr $S10, rx722_tgt, rx722_pos, 1
    ne $S10, ucs4:")", rx722_fail1998
    add rx722_pos, 1
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    goto alt727_end2008
  alt727_12015:
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    nqp_rxmark rx722_bstack, rxcap734_fail2018, rx722_pos, 0
    nqp_rxmark rx722_bstack, rxquantr735_done2020, rx722_pos, 0
  rxquantr735_loop2019:
    add $I11, rx722_pos, 1
    gt $I11, rx722_eos, rx722_fail1998
    substr $S10, rx722_tgt, rx722_pos, 1
    ne $S10, ucs4:"!", rx722_fail1998
    add rx722_pos, 1
    nqp_rxpeek $I19, rx722_bstack, rxquantr735_done2020
    inc $I19
    inc $I19
    set rx722_rep, rx722_bstack[$I19]
    nqp_rxcommit rx722_bstack, rxquantr735_done2020
    inc rx722_rep
  rxquantr735_done2020:
    nqp_rxpeek $I19, rx722_bstack, rxcap734_fail2018
    inc $I19
    set $I11, rx722_bstack[$I19]
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx722_pos)
    rx722_cstack = rx722_cur."!cursor_capture"($P11, "private")
    goto rxcap734_done2017
  rxcap734_fail2018:
    goto rx722_fail1998
  rxcap734_done2017:
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    nqp_rxmark rx722_bstack, rxquantr737_done2023, rx722_pos, 0
  rxquantr737_loop2022:
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    goto rxsubrule738_pass2024
  rxsubrule738_back2025:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
  rxsubrule738_pass2024:
    rx722_cstack = rx722_cur."!cursor_capture"($P11, "deflongname")
    set_addr $I11, rxsubrule738_back2025
    push rx722_bstack, $I11
    push rx722_bstack, 0
    push rx722_bstack, rx722_pos
    elements $I11, rx722_cstack
    push rx722_bstack, $I11
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    nqp_rxpeek $I19, rx722_bstack, rxquantr737_done2023
    inc $I19
    inc $I19
    set rx722_rep, rx722_bstack[$I19]
    nqp_rxcommit rx722_bstack, rxquantr737_done2023
    inc rx722_rep
  rxquantr737_done2023:
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
  alt727_end2008:
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
  alt743_02031:
    nqp_rxmark rx722_bstack, alt743_12037, rx722_pos, 0
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    add $I11, rx722_pos, 1
    gt $I11, rx722_eos, rx722_fail1998
    substr $S10, rx722_tgt, rx722_pos, 1
    ne $S10, ucs4:"(", rx722_fail1998
    add rx722_pos, 1
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."signature"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    nqp_rxmark rx722_bstack, rxsubrule746_pass2034, -1, 0
  rxsubrule746_pass2034:
    rx722_cstack = rx722_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    add $I11, rx722_pos, 1
    gt $I11, rx722_eos, rx722_fail1998
    substr $S10, rx722_tgt, rx722_pos, 1
    ne $S10, ucs4:")", rx722_fail1998
    add rx722_pos, 1
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    goto alt743_end2030
  alt743_12037:
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
  alt743_end2030:
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    store_lex unicode:"$\x{a2}", rx722_cur
    $P5005 = $P103."MATCH"()
    set $P104, $P5005
    .const 'Sub' $P5006 = 'cuid_405_1360426903.566' 
    capture_lex $P5006
    $P5007 = $P5006()
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    nqp_rxmark rx722_bstack, rxquantr754_done2044, rx722_pos, 0
  rxquantr754_loop2043:
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."trait"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    goto rxsubrule755_pass2045
  rxsubrule755_back2046:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
  rxsubrule755_pass2045:
    rx722_cstack = rx722_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule755_back2046
    push rx722_bstack, $I11
    push rx722_bstack, 0
    push rx722_bstack, rx722_pos
    elements $I11, rx722_cstack
    push rx722_bstack, $I11
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    nqp_rxpeek $I19, rx722_bstack, rxquantr754_done2044
    inc $I19
    inc $I19
    set rx722_rep, rx722_bstack[$I19]
    nqp_rxcommit rx722_bstack, rxquantr754_done2044
    inc rx722_rep
    nqp_rxmark rx722_bstack, rxquantr754_done2044, rx722_pos, rx722_rep
    goto rxquantr754_loop2043
  rxquantr754_done2044:
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt757_02049
    nqp_push_label $P11, alt757_12053
    nqp_rxmark rx722_bstack, alt757_end2048, -1, 0
    rx722_cur."!alt"(rx722_pos, "alt_nfa__24_1360426905.764", $P11)
    goto rx722_fail1998
  alt757_02049:
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    nqp_rxmark rx722_bstack, rxsubrule759_pass2051, -1, 0
  rxsubrule759_pass2051:
    rx722_cstack = rx722_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    goto alt757_end2048
  alt757_12053:
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    nqp_rxmark rx722_bstack, rxsubrule762_pass2055, -1, 0
  rxsubrule762_pass2055:
    rx722_cstack = rx722_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    goto alt757_end2048
  alt757_end2048:
    nqp_rxcommit rx722_bstack, alt757_end2048
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1998
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    rx722_cur."!cursor_pass"(rx722_pos, "method_def", 'backtrack'=>1)
    .return (rx722_cur)
  rx722_restart1997:
    repr_get_attr_obj rx722_cstack, rx722_cur, rx722_curclass, "$!cstack"
  rx722_fail1998:
    unless rx722_bstack, rx722_done1996
    pop $I19, rx722_bstack
    if_null rx722_cstack, rx722_cstack_done2001
    unless rx722_cstack, rx722_cstack_done2001
    dec $I19
    set $P11, rx722_cstack[$I19]
  rx722_cstack_done2001:
    pop rx722_rep, rx722_bstack
    pop rx722_pos, rx722_bstack
    pop $I19, rx722_bstack
    lt rx722_pos, -1, rx722_done1996
    lt rx722_pos, 0, rx722_fail1998
    eq $I19, 0, rx722_fail1998
    nqp_islist $I20, rx722_cstack
    unless $I20, rx722_jump1999
    elements $I18, rx722_bstack
    le $I18, 0, rx722_cut2000
    dec $I18
    set $I18, rx722_bstack[$I18]
  rx722_cut2000:
    assign rx722_cstack, $I18
  rx722_jump1999:
    jump $I19
  rx722_done1996:
    rx722_cur."!cursor_fail"()
    .return (rx722_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_405_1360426903.566") :anon :lex :outer("cuid_123_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1112

    box $P5001, 0
    store_dynamic_lex "$*INVOCANT_OK", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "onlystar" :subid("cuid_124_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1120
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_406_1360426903.566' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx765_tgt
    .local int rx765_pos
    .local int rx765_off
    .local int rx765_eos
    .local int rx765_rep
    .local pmc rx765_cur
    .local pmc rx765_curclass
    .local pmc rx765_bstack
    .local pmc rx765_cstack
    (rx765_cur, rx765_tgt, rx765_pos, rx765_curclass, rx765_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx765_cur
    length rx765_eos, rx765_tgt
    eq $I19, 1, rx765_restart2060
    gt rx765_pos, rx765_eos, rx765_fail2061
    repr_get_attr_int $I11, self, rx765_curclass, "$!from"
    ne $I11, -1, rxscan766_done2067
    goto rxscan766_scan2066
  rxscan766_loop2065:
    inc rx765_pos
    gt rx765_pos, rx765_eos, rx765_fail2061
    repr_bind_attr_int rx765_cur, rx765_curclass, "$!from", rx765_pos
  rxscan766_scan2066:
    nqp_rxmark rx765_bstack, rxscan766_loop2065, rx765_pos, 0
  rxscan766_done2067:
    repr_bind_attr_int rx765_cur, rx765_curclass, "$!pos", rx765_pos
    store_lex unicode:"$\x{a2}", rx765_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_406_1360426903.566' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx765_fail2061
    add $I11, rx765_pos, 1
    gt $I11, rx765_eos, rx765_fail2061
    substr $S10, rx765_tgt, rx765_pos, 1
    ne $S10, ucs4:"{", rx765_fail2061
    add rx765_pos, 1
    repr_bind_attr_int rx765_cur, rx765_curclass, "$!pos", rx765_pos
    $P11 = rx765_cur."ws"()
    repr_get_attr_int $I11, $P11, rx765_curclass, "$!pos"
    lt $I11, 0, rx765_fail2061
    repr_get_attr_int rx765_pos, $P11, rx765_curclass, "$!pos"
    add $I11, rx765_pos, 1
    gt $I11, rx765_eos, rx765_fail2061
    substr $S10, rx765_tgt, rx765_pos, 1
    ne $S10, ucs4:"*", rx765_fail2061
    add rx765_pos, 1
    repr_bind_attr_int rx765_cur, rx765_curclass, "$!pos", rx765_pos
    $P11 = rx765_cur."ws"()
    repr_get_attr_int $I11, $P11, rx765_curclass, "$!pos"
    lt $I11, 0, rx765_fail2061
    repr_get_attr_int rx765_pos, $P11, rx765_curclass, "$!pos"
    add $I11, rx765_pos, 1
    gt $I11, rx765_eos, rx765_fail2061
    substr $S10, rx765_tgt, rx765_pos, 1
    ne $S10, ucs4:"}", rx765_fail2061
    add rx765_pos, 1
    repr_bind_attr_int rx765_cur, rx765_curclass, "$!pos", rx765_pos
    $P11 = rx765_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx765_curclass, "$!pos"
    lt $I11, 0, rx765_fail2061
    repr_bind_attr_int rx765_cur, rx765_curclass, "$!pos", rx765_pos
    $P11 = rx765_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx765_curclass, "$!pos"
    lt $I11, 0, rx765_fail2061
    repr_get_attr_int rx765_pos, $P11, rx765_curclass, "$!pos"
    rx765_cur."!cursor_pass"(rx765_pos, "onlystar", 'backtrack'=>1)
    .return (rx765_cur)
  rx765_restart2060:
    repr_get_attr_obj rx765_cstack, rx765_cur, rx765_curclass, "$!cstack"
  rx765_fail2061:
    unless rx765_bstack, rx765_done2059
    pop $I19, rx765_bstack
    if_null rx765_cstack, rx765_cstack_done2064
    unless rx765_cstack, rx765_cstack_done2064
    dec $I19
    set $P11, rx765_cstack[$I19]
  rx765_cstack_done2064:
    pop rx765_rep, rx765_bstack
    pop rx765_pos, rx765_bstack
    pop $I19, rx765_bstack
    lt rx765_pos, -1, rx765_done2059
    lt rx765_pos, 0, rx765_fail2061
    eq $I19, 0, rx765_fail2061
    nqp_islist $I20, rx765_cstack
    unless $I20, rx765_jump2062
    elements $I18, rx765_bstack
    le $I18, 0, rx765_cut2063
    dec $I18
    set $I18, rx765_bstack[$I18]
  rx765_cut2063:
    assign rx765_cstack, $I18
  rx765_jump2062:
    jump $I19
  rx765_done2059:
    rx765_cur."!cursor_fail"()
    .return (rx765_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_406_1360426903.566") :anon :lex :outer("cuid_124_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1121

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback2068
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback2069
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback2069:
    unless_null $P5002, vivi_7672070
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_7672070:
    set $P5001, $P5002
  fallback2068:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator" :subid("cuid_125_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1127
    .param pmc self 
    $P5001 = self."!protoregex"("multi_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_126_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1128
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx771_tgt
    .local int rx771_pos
    .local int rx771_off
    .local int rx771_eos
    .local int rx771_rep
    .local pmc rx771_cur
    .local pmc rx771_curclass
    .local pmc rx771_bstack
    .local pmc rx771_cstack
    (rx771_cur, rx771_tgt, rx771_pos, rx771_curclass, rx771_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx771_cur
    length rx771_eos, rx771_tgt
    eq $I19, 1, rx771_restart2076
    gt rx771_pos, rx771_eos, rx771_fail2077
    repr_get_attr_int $I11, self, rx771_curclass, "$!from"
    ne $I11, -1, rxscan772_done2083
    goto rxscan772_scan2082
  rxscan772_loop2081:
    inc rx771_pos
    gt rx771_pos, rx771_eos, rx771_fail2077
    repr_bind_attr_int rx771_cur, rx771_curclass, "$!from", rx771_pos
  rxscan772_scan2082:
    nqp_rxmark rx771_bstack, rxscan772_loop2081, rx771_pos, 0
  rxscan772_done2083:
    repr_bind_attr_int rx771_cur, rx771_curclass, "$!pos", rx771_pos
    store_lex unicode:"$\x{a2}", rx771_cur
    box $P5002, "multi"
    set $P101, $P5002
    nqp_rxmark rx771_bstack, rxcap773_fail2085, rx771_pos, 0
    add $I11, rx771_pos, 5
    gt $I11, rx771_eos, rx771_fail2077
    substr $S10, rx771_tgt, rx771_pos, 5
    ne $S10, ucs4:"multi", rx771_fail2077
    add rx771_pos, 5
    nqp_rxpeek $I19, rx771_bstack, rxcap773_fail2085
    inc $I19
    set $I11, rx771_bstack[$I19]
    repr_bind_attr_int rx771_cur, rx771_curclass, "$!pos", rx771_pos
    $P11 = rx771_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx771_pos)
    rx771_cstack = rx771_cur."!cursor_capture"($P11, "sym")
    goto rxcap773_done2084
  rxcap773_fail2085:
    goto rx771_fail2077
  rxcap773_done2084:
    repr_bind_attr_int rx771_cur, rx771_curclass, "$!pos", rx771_pos
    $P11 = rx771_cur."ws"()
    repr_get_attr_int $I11, $P11, rx771_curclass, "$!pos"
    lt $I11, 0, rx771_fail2077
    repr_get_attr_int rx771_pos, $P11, rx771_curclass, "$!pos"
  alt775_02088:
    nqp_rxmark rx771_bstack, alt775_12090, rx771_pos, 0
    repr_bind_attr_int rx771_cur, rx771_curclass, "$!pos", rx771_pos
    $P11 = rx771_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx771_curclass, "$!pos"
    lt $I11, 0, rx771_fail2077
    nqp_rxmark rx771_bstack, rxsubrule776_pass2089, -1, 0
  rxsubrule776_pass2089:
    rx771_cstack = rx771_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx771_pos, $P11, rx771_curclass, "$!pos"
    goto alt775_end2087
  alt775_12090:
    nqp_rxmark rx771_bstack, alt775_22092, rx771_pos, 0
    repr_bind_attr_int rx771_cur, rx771_curclass, "$!pos", rx771_pos
    $P11 = rx771_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx771_curclass, "$!pos"
    lt $I11, 0, rx771_fail2077
    nqp_rxmark rx771_bstack, rxsubrule777_pass2091, -1, 0
  rxsubrule777_pass2091:
    rx771_cstack = rx771_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx771_pos, $P11, rx771_curclass, "$!pos"
    goto alt775_end2087
  alt775_22092:
    repr_bind_attr_int rx771_cur, rx771_curclass, "$!pos", rx771_pos
    $P11 = rx771_cur."panic"("Malformed multi")
    repr_get_attr_int $I11, $P11, rx771_curclass, "$!pos"
    lt $I11, 0, rx771_fail2077
    repr_get_attr_int rx771_pos, $P11, rx771_curclass, "$!pos"
  alt775_end2087:
    rx771_cur."!cursor_pass"(rx771_pos, "multi_declarator:sym<multi>", 'backtrack'=>1)
    .return (rx771_cur)
  rx771_restart2076:
    repr_get_attr_obj rx771_cstack, rx771_cur, rx771_curclass, "$!cstack"
  rx771_fail2077:
    unless rx771_bstack, rx771_done2075
    pop $I19, rx771_bstack
    if_null rx771_cstack, rx771_cstack_done2080
    unless rx771_cstack, rx771_cstack_done2080
    dec $I19
    set $P11, rx771_cstack[$I19]
  rx771_cstack_done2080:
    pop rx771_rep, rx771_bstack
    pop rx771_pos, rx771_bstack
    pop $I19, rx771_bstack
    lt rx771_pos, -1, rx771_done2075
    lt rx771_pos, 0, rx771_fail2077
    eq $I19, 0, rx771_fail2077
    nqp_islist $I20, rx771_cstack
    unless $I20, rx771_jump2078
    elements $I18, rx771_bstack
    le $I18, 0, rx771_cut2079
    dec $I18
    set $I18, rx771_bstack[$I18]
  rx771_cut2079:
    assign rx771_cstack, $I18
  rx771_jump2078:
    jump $I19
  rx771_done2075:
    rx771_cur."!cursor_fail"()
    .return (rx771_cur) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_127_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1133
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx779_tgt
    .local int rx779_pos
    .local int rx779_off
    .local int rx779_eos
    .local int rx779_rep
    .local pmc rx779_cur
    .local pmc rx779_curclass
    .local pmc rx779_bstack
    .local pmc rx779_cstack
    (rx779_cur, rx779_tgt, rx779_pos, rx779_curclass, rx779_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx779_cur
    length rx779_eos, rx779_tgt
    eq $I19, 1, rx779_restart2096
    gt rx779_pos, rx779_eos, rx779_fail2097
    repr_get_attr_int $I11, self, rx779_curclass, "$!from"
    ne $I11, -1, rxscan780_done2103
    goto rxscan780_scan2102
  rxscan780_loop2101:
    inc rx779_pos
    gt rx779_pos, rx779_eos, rx779_fail2097
    repr_bind_attr_int rx779_cur, rx779_curclass, "$!from", rx779_pos
  rxscan780_scan2102:
    nqp_rxmark rx779_bstack, rxscan780_loop2101, rx779_pos, 0
  rxscan780_done2103:
    repr_bind_attr_int rx779_cur, rx779_curclass, "$!pos", rx779_pos
    store_lex unicode:"$\x{a2}", rx779_cur
    box $P5002, "proto"
    set $P101, $P5002
    nqp_rxmark rx779_bstack, rxcap781_fail2105, rx779_pos, 0
    add $I11, rx779_pos, 5
    gt $I11, rx779_eos, rx779_fail2097
    substr $S10, rx779_tgt, rx779_pos, 5
    ne $S10, ucs4:"proto", rx779_fail2097
    add rx779_pos, 5
    nqp_rxpeek $I19, rx779_bstack, rxcap781_fail2105
    inc $I19
    set $I11, rx779_bstack[$I19]
    repr_bind_attr_int rx779_cur, rx779_curclass, "$!pos", rx779_pos
    $P11 = rx779_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx779_pos)
    rx779_cstack = rx779_cur."!cursor_capture"($P11, "sym")
    goto rxcap781_done2104
  rxcap781_fail2105:
    goto rx779_fail2097
  rxcap781_done2104:
    repr_bind_attr_int rx779_cur, rx779_curclass, "$!pos", rx779_pos
    $P11 = rx779_cur."ws"()
    repr_get_attr_int $I11, $P11, rx779_curclass, "$!pos"
    lt $I11, 0, rx779_fail2097
    repr_get_attr_int rx779_pos, $P11, rx779_curclass, "$!pos"
  alt783_02108:
    nqp_rxmark rx779_bstack, alt783_12110, rx779_pos, 0
    repr_bind_attr_int rx779_cur, rx779_curclass, "$!pos", rx779_pos
    $P11 = rx779_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx779_curclass, "$!pos"
    lt $I11, 0, rx779_fail2097
    nqp_rxmark rx779_bstack, rxsubrule784_pass2109, -1, 0
  rxsubrule784_pass2109:
    rx779_cstack = rx779_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx779_pos, $P11, rx779_curclass, "$!pos"
    goto alt783_end2107
  alt783_12110:
    nqp_rxmark rx779_bstack, alt783_22112, rx779_pos, 0
    repr_bind_attr_int rx779_cur, rx779_curclass, "$!pos", rx779_pos
    $P11 = rx779_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx779_curclass, "$!pos"
    lt $I11, 0, rx779_fail2097
    nqp_rxmark rx779_bstack, rxsubrule785_pass2111, -1, 0
  rxsubrule785_pass2111:
    rx779_cstack = rx779_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx779_pos, $P11, rx779_curclass, "$!pos"
    goto alt783_end2107
  alt783_22112:
    repr_bind_attr_int rx779_cur, rx779_curclass, "$!pos", rx779_pos
    $P11 = rx779_cur."panic"("Malformed proto")
    repr_get_attr_int $I11, $P11, rx779_curclass, "$!pos"
    lt $I11, 0, rx779_fail2097
    repr_get_attr_int rx779_pos, $P11, rx779_curclass, "$!pos"
  alt783_end2107:
    rx779_cur."!cursor_pass"(rx779_pos, "multi_declarator:sym<proto>", 'backtrack'=>1)
    .return (rx779_cur)
  rx779_restart2096:
    repr_get_attr_obj rx779_cstack, rx779_cur, rx779_curclass, "$!cstack"
  rx779_fail2097:
    unless rx779_bstack, rx779_done2095
    pop $I19, rx779_bstack
    if_null rx779_cstack, rx779_cstack_done2100
    unless rx779_cstack, rx779_cstack_done2100
    dec $I19
    set $P11, rx779_cstack[$I19]
  rx779_cstack_done2100:
    pop rx779_rep, rx779_bstack
    pop rx779_pos, rx779_bstack
    pop $I19, rx779_bstack
    lt rx779_pos, -1, rx779_done2095
    lt rx779_pos, 0, rx779_fail2097
    eq $I19, 0, rx779_fail2097
    nqp_islist $I20, rx779_cstack
    unless $I20, rx779_jump2098
    elements $I18, rx779_bstack
    le $I18, 0, rx779_cut2099
    dec $I18
    set $I18, rx779_bstack[$I18]
  rx779_cut2099:
    assign rx779_cstack, $I18
  rx779_jump2098:
    jump $I19
  rx779_done2095:
    rx779_cur."!cursor_fail"()
    .return (rx779_cur) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_128_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1138
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx787_tgt
    .local int rx787_pos
    .local int rx787_off
    .local int rx787_eos
    .local int rx787_rep
    .local pmc rx787_cur
    .local pmc rx787_curclass
    .local pmc rx787_bstack
    .local pmc rx787_cstack
    (rx787_cur, rx787_tgt, rx787_pos, rx787_curclass, rx787_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx787_cur
    length rx787_eos, rx787_tgt
    eq $I19, 1, rx787_restart2116
    gt rx787_pos, rx787_eos, rx787_fail2117
    repr_get_attr_int $I11, self, rx787_curclass, "$!from"
    ne $I11, -1, rxscan788_done2123
    goto rxscan788_scan2122
  rxscan788_loop2121:
    inc rx787_pos
    gt rx787_pos, rx787_eos, rx787_fail2117
    repr_bind_attr_int rx787_cur, rx787_curclass, "$!from", rx787_pos
  rxscan788_scan2122:
    nqp_rxmark rx787_bstack, rxscan788_loop2121, rx787_pos, 0
  rxscan788_done2123:
    repr_bind_attr_int rx787_cur, rx787_curclass, "$!pos", rx787_pos
    store_lex unicode:"$\x{a2}", rx787_cur
    box $P5002, ""
    set $P101, $P5002
    repr_bind_attr_int rx787_cur, rx787_curclass, "$!pos", rx787_pos
    $P11 = rx787_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx787_curclass, "$!pos"
    lt $I11, 0, rx787_fail2117
    nqp_rxmark rx787_bstack, rxsubrule789_pass2124, -1, 0
  rxsubrule789_pass2124:
    rx787_cstack = rx787_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx787_pos, $P11, rx787_curclass, "$!pos"
    rx787_cur."!cursor_pass"(rx787_pos, "multi_declarator:sym<null>", 'backtrack'=>1)
    .return (rx787_cur)
  rx787_restart2116:
    repr_get_attr_obj rx787_cstack, rx787_cur, rx787_curclass, "$!cstack"
  rx787_fail2117:
    unless rx787_bstack, rx787_done2115
    pop $I19, rx787_bstack
    if_null rx787_cstack, rx787_cstack_done2120
    unless rx787_cstack, rx787_cstack_done2120
    dec $I19
    set $P11, rx787_cstack[$I19]
  rx787_cstack_done2120:
    pop rx787_rep, rx787_bstack
    pop rx787_pos, rx787_bstack
    pop $I19, rx787_bstack
    lt rx787_pos, -1, rx787_done2115
    lt rx787_pos, 0, rx787_fail2117
    eq $I19, 0, rx787_fail2117
    nqp_islist $I20, rx787_cstack
    unless $I20, rx787_jump2118
    elements $I18, rx787_bstack
    le $I18, 0, rx787_cut2119
    dec $I18
    set $I18, rx787_bstack[$I18]
  rx787_cut2119:
    assign rx787_cstack, $I18
  rx787_jump2118:
    jump $I19
  rx787_done2115:
    rx787_cur."!cursor_fail"()
    .return (rx787_cur) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_129_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1143
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_407_1360426903.566' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_130_1360426903.566' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx790_tgt
    .local int rx790_pos
    .local int rx790_off
    .local int rx790_eos
    .local int rx790_rep
    .local pmc rx790_cur
    .local pmc rx790_curclass
    .local pmc rx790_bstack
    .local pmc rx790_cstack
    (rx790_cur, rx790_tgt, rx790_pos, rx790_curclass, rx790_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx790_cur
    length rx790_eos, rx790_tgt
    eq $I19, 1, rx790_restart2127
    gt rx790_pos, rx790_eos, rx790_fail2128
    repr_get_attr_int $I11, self, rx790_curclass, "$!from"
    ne $I11, -1, rxscan791_done2134
    goto rxscan791_scan2133
  rxscan791_loop2132:
    inc rx790_pos
    gt rx790_pos, rx790_eos, rx790_fail2128
    repr_bind_attr_int rx790_cur, rx790_curclass, "$!from", rx790_pos
  rxscan791_scan2133:
    nqp_rxmark rx790_bstack, rxscan791_loop2132, rx790_pos, 0
  rxscan791_done2134:
    nqp_rxmark rx790_bstack, rxquantr792_done2136, rx790_pos, 0
  rxquantr792_loop2135:
    repr_bind_attr_int rx790_cur, rx790_curclass, "$!pos", rx790_pos
    store_lex unicode:"$\x{a2}", rx790_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_407_1360426903.566' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx790_fail2128
    repr_bind_attr_int rx790_cur, rx790_curclass, "$!pos", rx790_pos
    $P11 = rx790_cur."ws"()
    repr_get_attr_int $I11, $P11, rx790_curclass, "$!pos"
    lt $I11, 0, rx790_fail2128
    repr_get_attr_int rx790_pos, $P11, rx790_curclass, "$!pos"
    repr_bind_attr_int rx790_cur, rx790_curclass, "$!pos", rx790_pos
    $P11 = rx790_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx790_curclass, "$!pos"
    lt $I11, 0, rx790_fail2128
    nqp_rxmark rx790_bstack, rxsubrule795_pass2141, -1, 0
  rxsubrule795_pass2141:
    rx790_cstack = rx790_cur."!cursor_capture"($P11, "invocant")
    repr_get_attr_int rx790_pos, $P11, rx790_curclass, "$!pos"
    repr_bind_attr_int rx790_cur, rx790_curclass, "$!pos", rx790_pos
    $P11 = rx790_cur."ws"()
    repr_get_attr_int $I11, $P11, rx790_curclass, "$!pos"
    lt $I11, 0, rx790_fail2128
    repr_get_attr_int rx790_pos, $P11, rx790_curclass, "$!pos"
    add $I11, rx790_pos, 1
    gt $I11, rx790_eos, rx790_fail2128
    substr $S10, rx790_tgt, rx790_pos, 1
    ne $S10, ucs4:":", rx790_fail2128
    add rx790_pos, 1
    nqp_rxpeek $I19, rx790_bstack, rxquantr792_done2136
    inc $I19
    inc $I19
    set rx790_rep, rx790_bstack[$I19]
    nqp_rxcommit rx790_bstack, rxquantr792_done2136
    inc rx790_rep
  rxquantr792_done2136:
    nqp_rxmark rx790_bstack, rxquantr797_done2144, rx790_pos, 0
  rxquantr797_loop2143:
    nqp_rxmark rx790_bstack, rxquantr798_done2146, rx790_pos, 0
  rxquantr798_loop2145:
    repr_bind_attr_int rx790_cur, rx790_curclass, "$!pos", rx790_pos
    $P11 = rx790_cur."ws"()
    repr_get_attr_int $I11, $P11, rx790_curclass, "$!pos"
    lt $I11, 0, rx790_fail2128
    repr_get_attr_int rx790_pos, $P11, rx790_curclass, "$!pos"
    repr_bind_attr_int rx790_cur, rx790_curclass, "$!pos", rx790_pos
    $P11 = rx790_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx790_curclass, "$!pos"
    lt $I11, 0, rx790_fail2128
    nqp_rxmark rx790_bstack, rxsubrule800_pass2148, -1, 0
  rxsubrule800_pass2148:
    rx790_cstack = rx790_cur."!cursor_capture"($P11, "parameter")
    repr_get_attr_int rx790_pos, $P11, rx790_curclass, "$!pos"
    repr_bind_attr_int rx790_cur, rx790_curclass, "$!pos", rx790_pos
    $P11 = rx790_cur."ws"()
    repr_get_attr_int $I11, $P11, rx790_curclass, "$!pos"
    lt $I11, 0, rx790_fail2128
    repr_get_attr_int rx790_pos, $P11, rx790_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt802_02151
    nqp_push_label $P11, alt802_12152
    nqp_rxmark rx790_bstack, alt802_end2150, -1, 0
    rx790_cur."!alt"(rx790_pos, "alt_nfa__26_1360426905.836", $P11)
    goto rx790_fail2128
  alt802_02151:
    add $I11, rx790_pos, 1
    gt $I11, rx790_eos, rx790_fail2128
    substr $S10, rx790_tgt, rx790_pos, 1
    ne $S10, ucs4:",", rx790_fail2128
    add rx790_pos, 1
    goto alt802_end2150
  alt802_12152:
    .const 'Sub' $P5004 = 'cuid_130_1360426903.566' 
    capture_lex $P5004
    repr_bind_attr_int rx790_cur, rx790_curclass, "$!pos", rx790_pos
    $P11 = rx790_cur."before"($P5004)
    repr_get_attr_int $I11, $P11, rx790_curclass, "$!pos"
    lt $I11, 0, rx790_fail2128
    nqp_rxmark rx790_bstack, rxsubrule807_pass2168, -1, 0
  rxsubrule807_pass2168:
    rx790_cstack = rx790_cur."!cursor_capture"($P11, "before")
    repr_get_attr_int rx790_pos, $P11, rx790_curclass, "$!pos"
    goto alt802_end2150
  alt802_end2150:
    nqp_rxcommit rx790_bstack, alt802_end2150
    nqp_rxpeek $I19, rx790_bstack, rxquantr798_done2146
    inc $I19
    inc $I19
    set rx790_rep, rx790_bstack[$I19]
    nqp_rxcommit rx790_bstack, rxquantr798_done2146
    inc rx790_rep
    nqp_rxmark rx790_bstack, rxquantr798_done2146, rx790_pos, rx790_rep
    goto rxquantr798_loop2145
  rxquantr798_done2146:
    nqp_rxpeek $I19, rx790_bstack, rxquantr797_done2144
    inc $I19
    inc $I19
    set rx790_rep, rx790_bstack[$I19]
    nqp_rxcommit rx790_bstack, rxquantr797_done2144
    inc rx790_rep
  rxquantr797_done2144:
    rx790_cur."!cursor_pass"(rx790_pos, "signature", 'backtrack'=>1)
    .return (rx790_cur)
  rx790_restart2127:
    repr_get_attr_obj rx790_cstack, rx790_cur, rx790_curclass, "$!cstack"
  rx790_fail2128:
    unless rx790_bstack, rx790_done2126
    pop $I19, rx790_bstack
    if_null rx790_cstack, rx790_cstack_done2131
    unless rx790_cstack, rx790_cstack_done2131
    dec $I19
    set $P11, rx790_cstack[$I19]
  rx790_cstack_done2131:
    pop rx790_rep, rx790_bstack
    pop rx790_pos, rx790_bstack
    pop $I19, rx790_bstack
    lt rx790_pos, -1, rx790_done2126
    lt rx790_pos, 0, rx790_fail2128
    eq $I19, 0, rx790_fail2128
    nqp_islist $I20, rx790_cstack
    unless $I20, rx790_jump2129
    elements $I18, rx790_bstack
    le $I18, 0, rx790_cut2130
    dec $I18
    set $I18, rx790_bstack[$I18]
  rx790_cut2130:
    assign rx790_cstack, $I18
  rx790_jump2129:
    jump $I19
  rx790_done2126:
    rx790_cur."!cursor_fail"()
    .return (rx790_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_407_1360426903.566") :anon :lex :outer("cuid_129_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1144

    find_dynamic_lex $P5001, "$*INVOCANT_OK"
    unless_null $P5001, fallback2137
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$INVOCANT_OK"]
    unless_null $P5002, fallback2138
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback2138:
    unless_null $P5002, vivi_7932139
    die "Contextual $*INVOCANT_OK not found"
    box $P5006, "Contextual $*INVOCANT_OK not found"
    set $P5002, $P5006
  vivi_7932139:
    set $P5001, $P5002
  fallback2137:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_130_1360426903.566") :anon :lex :outer("cuid_129_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx803_tgt
    .local int rx803_pos
    .local int rx803_off
    .local int rx803_eos
    .local int rx803_rep
    .local pmc rx803_cur
    .local pmc rx803_curclass
    .local pmc rx803_bstack
    .local pmc rx803_cstack
    (rx803_cur, rx803_tgt, rx803_pos, rx803_curclass, rx803_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx803_cur
    length rx803_eos, rx803_tgt
    eq $I19, 1, rx803_restart2155
    gt rx803_pos, rx803_eos, rx803_fail2156
    repr_get_attr_int $I11, self, rx803_curclass, "$!from"
    ne $I11, -1, rxscan804_done2162
    goto rxscan804_scan2161
  rxscan804_loop2160:
    inc rx803_pos
    gt rx803_pos, rx803_eos, rx803_fail2156
    repr_bind_attr_int rx803_cur, rx803_curclass, "$!from", rx803_pos
  rxscan804_scan2161:
    nqp_rxmark rx803_bstack, rxscan804_loop2160, rx803_pos, 0
  rxscan804_done2162:
    nqp_rxmark rx803_bstack, rxquantr805_done2164, rx803_pos, 0
  rxquantr805_loop2163:
    ge rx803_pos, rx803_eos, rx803_fail2156
    is_cclass $I11, .CCLASS_WHITESPACE, rx803_tgt, rx803_pos
    unless $I11, rx803_fail2156
    add rx803_pos, 1
    nqp_rxpeek $I19, rx803_bstack, rxquantr805_done2164
    inc $I19
    inc $I19
    set rx803_rep, rx803_bstack[$I19]
    nqp_rxcommit rx803_bstack, rxquantr805_done2164
    inc rx803_rep
    nqp_rxmark rx803_bstack, rxquantr805_done2164, rx803_pos, rx803_rep
    goto rxquantr805_loop2163
  rxquantr805_done2164:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt806_02166
    nqp_push_label $P11, alt806_12167
    nqp_rxmark rx803_bstack, alt806_end2165, -1, 0
    rx803_cur."!alt"(rx803_pos, "alt_nfa__25_1360426905.831", $P11)
    goto rx803_fail2156
  alt806_02166:
    add $I11, rx803_pos, 1
    gt $I11, rx803_eos, rx803_fail2156
    substr $S10, rx803_tgt, rx803_pos, 1
    ne $S10, ucs4:")", rx803_fail2156
    add rx803_pos, 1
    goto alt806_end2165
  alt806_12167:
    add $I11, rx803_pos, 1
    gt $I11, rx803_eos, rx803_fail2156
    substr $S10, rx803_tgt, rx803_pos, 1
    ne $S10, ucs4:"{", rx803_fail2156
    add rx803_pos, 1
    goto alt806_end2165
  alt806_end2165:
    nqp_rxcommit rx803_bstack, alt806_end2165
    rx803_cur."!cursor_pass"(rx803_pos, 'backtrack'=>1)
    .return (rx803_cur)
  rx803_restart2155:
    repr_get_attr_obj rx803_cstack, rx803_cur, rx803_curclass, "$!cstack"
  rx803_fail2156:
    unless rx803_bstack, rx803_done2154
    pop $I19, rx803_bstack
    if_null rx803_cstack, rx803_cstack_done2159
    unless rx803_cstack, rx803_cstack_done2159
    dec $I19
    set $P11, rx803_cstack[$I19]
  rx803_cstack_done2159:
    pop rx803_rep, rx803_bstack
    pop rx803_pos, rx803_bstack
    pop $I19, rx803_bstack
    lt rx803_pos, -1, rx803_done2154
    lt rx803_pos, 0, rx803_fail2156
    eq $I19, 0, rx803_fail2156
    nqp_islist $I20, rx803_cstack
    unless $I20, rx803_jump2157
    elements $I18, rx803_bstack
    le $I18, 0, rx803_cut2158
    dec $I18
    set $I18, rx803_bstack[$I18]
  rx803_cut2158:
    assign rx803_cstack, $I18
  rx803_jump2157:
    jump $I19
  rx803_done2154:
    rx803_cur."!cursor_fail"()
    .return (rx803_cur) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_131_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1148
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx808_tgt
    .local int rx808_pos
    .local int rx808_off
    .local int rx808_eos
    .local int rx808_rep
    .local pmc rx808_cur
    .local pmc rx808_curclass
    .local pmc rx808_bstack
    .local pmc rx808_cstack
    (rx808_cur, rx808_tgt, rx808_pos, rx808_curclass, rx808_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx808_cur
    length rx808_eos, rx808_tgt
    eq $I19, 1, rx808_restart2171
    gt rx808_pos, rx808_eos, rx808_fail2172
    repr_get_attr_int $I11, self, rx808_curclass, "$!from"
    ne $I11, -1, rxscan809_done2178
    goto rxscan809_scan2177
  rxscan809_loop2176:
    inc rx808_pos
    gt rx808_pos, rx808_eos, rx808_fail2172
    repr_bind_attr_int rx808_cur, rx808_curclass, "$!from", rx808_pos
  rxscan809_scan2177:
    nqp_rxmark rx808_bstack, rxscan809_loop2176, rx808_pos, 0
  rxscan809_done2178:
    nqp_rxmark rx808_bstack, rxquantr810_done2180, rx808_pos, 0
  rxquantr810_loop2179:
    repr_bind_attr_int rx808_cur, rx808_curclass, "$!pos", rx808_pos
    $P11 = rx808_cur."typename"()
    repr_get_attr_int $I11, $P11, rx808_curclass, "$!pos"
    lt $I11, 0, rx808_fail2172
    nqp_rxmark rx808_bstack, rxsubrule811_pass2181, -1, 0
  rxsubrule811_pass2181:
    rx808_cstack = rx808_cur."!cursor_capture"($P11, "typename")
    repr_get_attr_int rx808_pos, $P11, rx808_curclass, "$!pos"
    nqp_rxmark rx808_bstack, rxquantr812_done2183, rx808_pos, 0
  rxquantr812_loop2182:
    add $I11, rx808_pos, 1
    gt $I11, rx808_eos, rx808_fail2172
    substr $S10, rx808_tgt, rx808_pos, 1
    ne $S10, ucs4:":", rx808_fail2172
    add rx808_pos, 1
    nqp_rxmark rx808_bstack, rxcap813_fail2185, rx808_pos, 0
    ge rx808_pos, rx808_eos, rx808_fail2172
    substr $S11, rx808_tgt, rx808_pos, 1
    index $I11, ucs4:"_DU", $S11
    lt $I11, 0, rx808_fail2172
    inc rx808_pos
    nqp_rxpeek $I19, rx808_bstack, rxcap813_fail2185
    inc $I19
    set $I11, rx808_bstack[$I19]
    repr_bind_attr_int rx808_cur, rx808_curclass, "$!pos", rx808_pos
    $P11 = rx808_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx808_pos)
    rx808_cstack = rx808_cur."!cursor_capture"($P11, "definedness")
    goto rxcap813_done2184
  rxcap813_fail2185:
    goto rx808_fail2172
  rxcap813_done2184:
    nqp_rxpeek $I19, rx808_bstack, rxquantr812_done2183
    inc $I19
    inc $I19
    set rx808_rep, rx808_bstack[$I19]
    nqp_rxcommit rx808_bstack, rxquantr812_done2183
    inc rx808_rep
  rxquantr812_done2183:
    repr_bind_attr_int rx808_cur, rx808_curclass, "$!pos", rx808_pos
    $P11 = rx808_cur."ws"()
    repr_get_attr_int $I11, $P11, rx808_curclass, "$!pos"
    lt $I11, 0, rx808_fail2172
    repr_get_attr_int rx808_pos, $P11, rx808_curclass, "$!pos"
    nqp_rxpeek $I19, rx808_bstack, rxquantr810_done2180
    inc $I19
    inc $I19
    set rx808_rep, rx808_bstack[$I19]
    nqp_rxcommit rx808_bstack, rxquantr810_done2180
    inc rx808_rep
    nqp_rxmark rx808_bstack, rxquantr810_done2180, rx808_pos, rx808_rep
    goto rxquantr810_loop2179
  rxquantr810_done2180:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt815_02188
    nqp_push_label $P11, alt815_12192
    nqp_rxmark rx808_bstack, alt815_end2187, -1, 0
    rx808_cur."!alt"(rx808_pos, "alt_nfa__29_1360426905.859", $P11)
    goto rx808_fail2172
  alt815_02188:
    nqp_rxmark rx808_bstack, rxcap816_fail2190, rx808_pos, 0
    add $I11, rx808_pos, 1
    gt $I11, rx808_eos, rx808_fail2172
    substr $S10, rx808_tgt, rx808_pos, 1
    ne $S10, ucs4:"*", rx808_fail2172
    add rx808_pos, 1
    nqp_rxpeek $I19, rx808_bstack, rxcap816_fail2190
    inc $I19
    set $I11, rx808_bstack[$I19]
    repr_bind_attr_int rx808_cur, rx808_curclass, "$!pos", rx808_pos
    $P11 = rx808_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx808_pos)
    rx808_cstack = rx808_cur."!cursor_capture"($P11, "quant")
    goto rxcap816_done2189
  rxcap816_fail2190:
    goto rx808_fail2172
  rxcap816_done2189:
    repr_bind_attr_int rx808_cur, rx808_curclass, "$!pos", rx808_pos
    $P11 = rx808_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx808_curclass, "$!pos"
    lt $I11, 0, rx808_fail2172
    nqp_rxmark rx808_bstack, rxsubrule817_pass2191, -1, 0
  rxsubrule817_pass2191:
    rx808_cstack = rx808_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx808_pos, $P11, rx808_curclass, "$!pos"
    goto alt815_end2187
  alt815_12192:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt818_02194
    nqp_push_label $P11, alt818_12196
    nqp_rxmark rx808_bstack, alt818_end2193, -1, 0
    rx808_cur."!alt"(rx808_pos, "alt_nfa__27_1360426905.859", $P11)
    goto rx808_fail2172
  alt818_02194:
    repr_bind_attr_int rx808_cur, rx808_curclass, "$!pos", rx808_pos
    $P11 = rx808_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx808_curclass, "$!pos"
    lt $I11, 0, rx808_fail2172
    nqp_rxmark rx808_bstack, rxsubrule819_pass2195, -1, 0
  rxsubrule819_pass2195:
    rx808_cstack = rx808_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx808_pos, $P11, rx808_curclass, "$!pos"
    goto alt818_end2193
  alt818_12196:
    repr_bind_attr_int rx808_cur, rx808_curclass, "$!pos", rx808_pos
    $P11 = rx808_cur."named_param"()
    repr_get_attr_int $I11, $P11, rx808_curclass, "$!pos"
    lt $I11, 0, rx808_fail2172
    nqp_rxmark rx808_bstack, rxsubrule820_pass2197, -1, 0
  rxsubrule820_pass2197:
    rx808_cstack = rx808_cur."!cursor_capture"($P11, "named_param")
    repr_get_attr_int rx808_pos, $P11, rx808_curclass, "$!pos"
    goto alt818_end2193
  alt818_end2193:
    nqp_rxcommit rx808_bstack, alt818_end2193
    nqp_rxmark rx808_bstack, rxcap821_fail2199, rx808_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt822_02201
    nqp_push_label $P11, alt822_12202
    nqp_push_label $P11, alt822_22203
    nqp_rxmark rx808_bstack, alt822_end2200, -1, 0
    rx808_cur."!alt"(rx808_pos, "alt_nfa__28_1360426905.859", $P11)
    goto rx808_fail2172
  alt822_02201:
    add $I11, rx808_pos, 1
    gt $I11, rx808_eos, rx808_fail2172
    substr $S10, rx808_tgt, rx808_pos, 1
    ne $S10, ucs4:"?", rx808_fail2172
    add rx808_pos, 1
    goto alt822_end2200
  alt822_12202:
    add $I11, rx808_pos, 1
    gt $I11, rx808_eos, rx808_fail2172
    substr $S10, rx808_tgt, rx808_pos, 1
    ne $S10, ucs4:"!", rx808_fail2172
    add rx808_pos, 1
    goto alt822_end2200
  alt822_22203:
    goto alt822_end2200
  alt822_end2200:
    nqp_rxcommit rx808_bstack, alt822_end2200
    nqp_rxpeek $I19, rx808_bstack, rxcap821_fail2199
    inc $I19
    set $I11, rx808_bstack[$I19]
    repr_bind_attr_int rx808_cur, rx808_curclass, "$!pos", rx808_pos
    $P11 = rx808_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx808_pos)
    rx808_cstack = rx808_cur."!cursor_capture"($P11, "quant")
    goto rxcap821_done2198
  rxcap821_fail2199:
    goto rx808_fail2172
  rxcap821_done2198:
    goto alt815_end2187
  alt815_end2187:
    nqp_rxcommit rx808_bstack, alt815_end2187
    nqp_rxmark rx808_bstack, rxquantr824_done2206, rx808_pos, 0
  rxquantr824_loop2205:
    repr_bind_attr_int rx808_cur, rx808_curclass, "$!pos", rx808_pos
    $P11 = rx808_cur."default_value"()
    repr_get_attr_int $I11, $P11, rx808_curclass, "$!pos"
    lt $I11, 0, rx808_fail2172
    goto rxsubrule825_pass2207
  rxsubrule825_back2208:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx808_curclass, "$!pos"
    lt $I11, 0, rx808_fail2172
  rxsubrule825_pass2207:
    rx808_cstack = rx808_cur."!cursor_capture"($P11, "default_value")
    set_addr $I11, rxsubrule825_back2208
    push rx808_bstack, $I11
    push rx808_bstack, 0
    push rx808_bstack, rx808_pos
    elements $I11, rx808_cstack
    push rx808_bstack, $I11
    repr_get_attr_int rx808_pos, $P11, rx808_curclass, "$!pos"
    nqp_rxpeek $I19, rx808_bstack, rxquantr824_done2206
    inc $I19
    inc $I19
    set rx808_rep, rx808_bstack[$I19]
    nqp_rxcommit rx808_bstack, rxquantr824_done2206
    inc rx808_rep
  rxquantr824_done2206:
    rx808_cur."!cursor_pass"(rx808_pos, "parameter", 'backtrack'=>1)
    .return (rx808_cur)
  rx808_restart2171:
    repr_get_attr_obj rx808_cstack, rx808_cur, rx808_curclass, "$!cstack"
  rx808_fail2172:
    unless rx808_bstack, rx808_done2170
    pop $I19, rx808_bstack
    if_null rx808_cstack, rx808_cstack_done2175
    unless rx808_cstack, rx808_cstack_done2175
    dec $I19
    set $P11, rx808_cstack[$I19]
  rx808_cstack_done2175:
    pop rx808_rep, rx808_bstack
    pop rx808_pos, rx808_bstack
    pop $I19, rx808_bstack
    lt rx808_pos, -1, rx808_done2170
    lt rx808_pos, 0, rx808_fail2172
    eq $I19, 0, rx808_fail2172
    nqp_islist $I20, rx808_cstack
    unless $I20, rx808_jump2173
    elements $I18, rx808_bstack
    le $I18, 0, rx808_cut2174
    dec $I18
    set $I18, rx808_bstack[$I18]
  rx808_cut2174:
    assign rx808_cstack, $I18
  rx808_jump2173:
    jump $I19
  rx808_done2170:
    rx808_cur."!cursor_fail"()
    .return (rx808_cur) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_132_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1157
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx826_tgt
    .local int rx826_pos
    .local int rx826_off
    .local int rx826_eos
    .local int rx826_rep
    .local pmc rx826_cur
    .local pmc rx826_curclass
    .local pmc rx826_bstack
    .local pmc rx826_cstack
    (rx826_cur, rx826_tgt, rx826_pos, rx826_curclass, rx826_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx826_cur
    length rx826_eos, rx826_tgt
    eq $I19, 1, rx826_restart2211
    gt rx826_pos, rx826_eos, rx826_fail2212
    repr_get_attr_int $I11, self, rx826_curclass, "$!from"
    ne $I11, -1, rxscan827_done2218
    goto rxscan827_scan2217
  rxscan827_loop2216:
    inc rx826_pos
    gt rx826_pos, rx826_eos, rx826_fail2212
    repr_bind_attr_int rx826_cur, rx826_curclass, "$!from", rx826_pos
  rxscan827_scan2217:
    nqp_rxmark rx826_bstack, rxscan827_loop2216, rx826_pos, 0
  rxscan827_done2218:
    repr_bind_attr_int rx826_cur, rx826_curclass, "$!pos", rx826_pos
    $P11 = rx826_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx826_curclass, "$!pos"
    lt $I11, 0, rx826_fail2212
    nqp_rxmark rx826_bstack, rxsubrule828_pass2219, -1, 0
  rxsubrule828_pass2219:
    rx826_cstack = rx826_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx826_pos, $P11, rx826_curclass, "$!pos"
    nqp_rxmark rx826_bstack, rxquantr829_done2221, rx826_pos, 0
  rxquantr829_loop2220:
    repr_bind_attr_int rx826_cur, rx826_curclass, "$!pos", rx826_pos
    $P11 = rx826_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx826_curclass, "$!pos"
    lt $I11, 0, rx826_fail2212
    goto rxsubrule830_pass2222
  rxsubrule830_back2223:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx826_curclass, "$!pos"
    lt $I11, 0, rx826_fail2212
  rxsubrule830_pass2222:
    rx826_cstack = rx826_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule830_back2223
    push rx826_bstack, $I11
    push rx826_bstack, 0
    push rx826_bstack, rx826_pos
    elements $I11, rx826_cstack
    push rx826_bstack, $I11
    repr_get_attr_int rx826_pos, $P11, rx826_curclass, "$!pos"
    nqp_rxpeek $I19, rx826_bstack, rxquantr829_done2221
    inc $I19
    inc $I19
    set rx826_rep, rx826_bstack[$I19]
    nqp_rxcommit rx826_bstack, rxquantr829_done2221
    inc rx826_rep
  rxquantr829_done2221:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt831_02225
    nqp_push_label $P11, alt831_12227
    nqp_rxmark rx826_bstack, alt831_end2224, -1, 0
    rx826_cur."!alt"(rx826_pos, "alt_nfa__30_1360426905.869", $P11)
    goto rx826_fail2212
  alt831_02225:
    repr_bind_attr_int rx826_cur, rx826_curclass, "$!pos", rx826_pos
    $P11 = rx826_cur."ident"()
    repr_get_attr_int $I11, $P11, rx826_curclass, "$!pos"
    lt $I11, 0, rx826_fail2212
    nqp_rxmark rx826_bstack, rxsubrule832_pass2226, -1, 0
  rxsubrule832_pass2226:
    rx826_cstack = rx826_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx826_pos, $P11, rx826_curclass, "$!pos"
    goto alt831_end2224
  alt831_12227:
    nqp_rxmark rx826_bstack, rxcap833_fail2229, rx826_pos, 0
    ge rx826_pos, rx826_eos, rx826_fail2212
    substr $S11, rx826_tgt, rx826_pos, 1
    index $I11, ucs4:"/!", $S11
    lt $I11, 0, rx826_fail2212
    inc rx826_pos
    nqp_rxpeek $I19, rx826_bstack, rxcap833_fail2229
    inc $I19
    set $I11, rx826_bstack[$I19]
    repr_bind_attr_int rx826_cur, rx826_curclass, "$!pos", rx826_pos
    $P11 = rx826_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx826_pos)
    rx826_cstack = rx826_cur."!cursor_capture"($P11, "name")
    goto rxcap833_done2228
  rxcap833_fail2229:
    goto rx826_fail2212
  rxcap833_done2228:
    goto alt831_end2224
  alt831_end2224:
    nqp_rxcommit rx826_bstack, alt831_end2224
    rx826_cur."!cursor_pass"(rx826_pos, "param_var", 'backtrack'=>1)
    .return (rx826_cur)
  rx826_restart2211:
    repr_get_attr_obj rx826_cstack, rx826_cur, rx826_curclass, "$!cstack"
  rx826_fail2212:
    unless rx826_bstack, rx826_done2210
    pop $I19, rx826_bstack
    if_null rx826_cstack, rx826_cstack_done2215
    unless rx826_cstack, rx826_cstack_done2215
    dec $I19
    set $P11, rx826_cstack[$I19]
  rx826_cstack_done2215:
    pop rx826_rep, rx826_bstack
    pop rx826_pos, rx826_bstack
    pop $I19, rx826_bstack
    lt rx826_pos, -1, rx826_done2210
    lt rx826_pos, 0, rx826_fail2212
    eq $I19, 0, rx826_fail2212
    nqp_islist $I20, rx826_cstack
    unless $I20, rx826_jump2213
    elements $I18, rx826_bstack
    le $I18, 0, rx826_cut2214
    dec $I18
    set $I18, rx826_bstack[$I18]
  rx826_cut2214:
    assign rx826_cstack, $I18
  rx826_jump2213:
    jump $I19
  rx826_done2210:
    rx826_cur."!cursor_fail"()
    .return (rx826_cur) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_133_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1162
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx834_tgt
    .local int rx834_pos
    .local int rx834_off
    .local int rx834_eos
    .local int rx834_rep
    .local pmc rx834_cur
    .local pmc rx834_curclass
    .local pmc rx834_bstack
    .local pmc rx834_cstack
    (rx834_cur, rx834_tgt, rx834_pos, rx834_curclass, rx834_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx834_cur
    length rx834_eos, rx834_tgt
    eq $I19, 1, rx834_restart2232
    gt rx834_pos, rx834_eos, rx834_fail2233
    repr_get_attr_int $I11, self, rx834_curclass, "$!from"
    ne $I11, -1, rxscan835_done2239
    goto rxscan835_scan2238
  rxscan835_loop2237:
    inc rx834_pos
    gt rx834_pos, rx834_eos, rx834_fail2233
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!from", rx834_pos
  rxscan835_scan2238:
    nqp_rxmark rx834_bstack, rxscan835_loop2237, rx834_pos, 0
  rxscan835_done2239:
    add $I11, rx834_pos, 1
    gt $I11, rx834_eos, rx834_fail2233
    substr $S10, rx834_tgt, rx834_pos, 1
    ne $S10, ucs4:":", rx834_fail2233
    add rx834_pos, 1
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!pos", rx834_pos
    $P11 = rx834_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx834_curclass, "$!pos"
    lt $I11, 0, rx834_fail2233
    nqp_rxmark rx834_bstack, rxsubrule836_pass2240, -1, 0
  rxsubrule836_pass2240:
    rx834_cstack = rx834_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx834_pos, $P11, rx834_curclass, "$!pos"
    rx834_cur."!cursor_pass"(rx834_pos, "named_param", 'backtrack'=>1)
    .return (rx834_cur)
  rx834_restart2232:
    repr_get_attr_obj rx834_cstack, rx834_cur, rx834_curclass, "$!cstack"
  rx834_fail2233:
    unless rx834_bstack, rx834_done2231
    pop $I19, rx834_bstack
    if_null rx834_cstack, rx834_cstack_done2236
    unless rx834_cstack, rx834_cstack_done2236
    dec $I19
    set $P11, rx834_cstack[$I19]
  rx834_cstack_done2236:
    pop rx834_rep, rx834_bstack
    pop rx834_pos, rx834_bstack
    pop $I19, rx834_bstack
    lt rx834_pos, -1, rx834_done2231
    lt rx834_pos, 0, rx834_fail2233
    eq $I19, 0, rx834_fail2233
    nqp_islist $I20, rx834_cstack
    unless $I20, rx834_jump2234
    elements $I18, rx834_bstack
    le $I18, 0, rx834_cut2235
    dec $I18
    set $I18, rx834_bstack[$I18]
  rx834_cut2235:
    assign rx834_cstack, $I18
  rx834_jump2234:
    jump $I19
  rx834_done2231:
    rx834_cur."!cursor_fail"()
    .return (rx834_cur) 
.end
.HLL "nqp"
.namespace []
.sub "default_value" :subid("cuid_134_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1166
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx837_tgt
    .local int rx837_pos
    .local int rx837_off
    .local int rx837_eos
    .local int rx837_rep
    .local pmc rx837_cur
    .local pmc rx837_curclass
    .local pmc rx837_bstack
    .local pmc rx837_cstack
    (rx837_cur, rx837_tgt, rx837_pos, rx837_curclass, rx837_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx837_cur
    length rx837_eos, rx837_tgt
    eq $I19, 1, rx837_restart2243
    gt rx837_pos, rx837_eos, rx837_fail2244
    repr_get_attr_int $I11, self, rx837_curclass, "$!from"
    ne $I11, -1, rxscan838_done2250
    goto rxscan838_scan2249
  rxscan838_loop2248:
    inc rx837_pos
    gt rx837_pos, rx837_eos, rx837_fail2244
    repr_bind_attr_int rx837_cur, rx837_curclass, "$!from", rx837_pos
  rxscan838_scan2249:
    nqp_rxmark rx837_bstack, rxscan838_loop2248, rx837_pos, 0
  rxscan838_done2250:
    repr_bind_attr_int rx837_cur, rx837_curclass, "$!pos", rx837_pos
    $P11 = rx837_cur."ws"()
    repr_get_attr_int $I11, $P11, rx837_curclass, "$!pos"
    lt $I11, 0, rx837_fail2244
    repr_get_attr_int rx837_pos, $P11, rx837_curclass, "$!pos"
    add $I11, rx837_pos, 1
    gt $I11, rx837_eos, rx837_fail2244
    substr $S10, rx837_tgt, rx837_pos, 1
    ne $S10, ucs4:"=", rx837_fail2244
    add rx837_pos, 1
    repr_bind_attr_int rx837_cur, rx837_curclass, "$!pos", rx837_pos
    $P11 = rx837_cur."ws"()
    repr_get_attr_int $I11, $P11, rx837_curclass, "$!pos"
    lt $I11, 0, rx837_fail2244
    repr_get_attr_int rx837_pos, $P11, rx837_curclass, "$!pos"
    repr_bind_attr_int rx837_cur, rx837_curclass, "$!pos", rx837_pos
    $P11 = rx837_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx837_curclass, "$!pos"
    lt $I11, 0, rx837_fail2244
    nqp_rxmark rx837_bstack, rxsubrule841_pass2253, -1, 0
  rxsubrule841_pass2253:
    rx837_cstack = rx837_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx837_pos, $P11, rx837_curclass, "$!pos"
    repr_bind_attr_int rx837_cur, rx837_curclass, "$!pos", rx837_pos
    $P11 = rx837_cur."ws"()
    repr_get_attr_int $I11, $P11, rx837_curclass, "$!pos"
    lt $I11, 0, rx837_fail2244
    repr_get_attr_int rx837_pos, $P11, rx837_curclass, "$!pos"
    rx837_cur."!cursor_pass"(rx837_pos, "default_value", 'backtrack'=>1)
    .return (rx837_cur)
  rx837_restart2243:
    repr_get_attr_obj rx837_cstack, rx837_cur, rx837_curclass, "$!cstack"
  rx837_fail2244:
    unless rx837_bstack, rx837_done2242
    pop $I19, rx837_bstack
    if_null rx837_cstack, rx837_cstack_done2247
    unless rx837_cstack, rx837_cstack_done2247
    dec $I19
    set $P11, rx837_cstack[$I19]
  rx837_cstack_done2247:
    pop rx837_rep, rx837_bstack
    pop rx837_pos, rx837_bstack
    pop $I19, rx837_bstack
    lt rx837_pos, -1, rx837_done2242
    lt rx837_pos, 0, rx837_fail2244
    eq $I19, 0, rx837_fail2244
    nqp_islist $I20, rx837_cstack
    unless $I20, rx837_jump2245
    elements $I18, rx837_bstack
    le $I18, 0, rx837_cut2246
    dec $I18
    set $I18, rx837_bstack[$I18]
  rx837_cut2246:
    assign rx837_cstack, $I18
  rx837_jump2245:
    jump $I19
  rx837_done2242:
    rx837_cur."!cursor_fail"()
    .return (rx837_cur) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_135_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1168
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx843_tgt
    .local int rx843_pos
    .local int rx843_off
    .local int rx843_eos
    .local int rx843_rep
    .local pmc rx843_cur
    .local pmc rx843_curclass
    .local pmc rx843_bstack
    .local pmc rx843_cstack
    (rx843_cur, rx843_tgt, rx843_pos, rx843_curclass, rx843_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx843_cur
    length rx843_eos, rx843_tgt
    eq $I19, 1, rx843_restart2257
    gt rx843_pos, rx843_eos, rx843_fail2258
    repr_get_attr_int $I11, self, rx843_curclass, "$!from"
    ne $I11, -1, rxscan844_done2264
    goto rxscan844_scan2263
  rxscan844_loop2262:
    inc rx843_pos
    gt rx843_pos, rx843_eos, rx843_fail2258
    repr_bind_attr_int rx843_cur, rx843_curclass, "$!from", rx843_pos
  rxscan844_scan2263:
    nqp_rxmark rx843_bstack, rxscan844_loop2262, rx843_pos, 0
  rxscan844_done2264:
    repr_bind_attr_int rx843_cur, rx843_curclass, "$!pos", rx843_pos
    $P11 = rx843_cur."ws"()
    repr_get_attr_int $I11, $P11, rx843_curclass, "$!pos"
    lt $I11, 0, rx843_fail2258
    repr_get_attr_int rx843_pos, $P11, rx843_curclass, "$!pos"
    repr_bind_attr_int rx843_cur, rx843_curclass, "$!pos", rx843_pos
    $P11 = rx843_cur."trait_mod"()
    repr_get_attr_int $I11, $P11, rx843_curclass, "$!pos"
    lt $I11, 0, rx843_fail2258
    nqp_rxmark rx843_bstack, rxsubrule846_pass2266, -1, 0
  rxsubrule846_pass2266:
    rx843_cstack = rx843_cur."!cursor_capture"($P11, "trait_mod")
    repr_get_attr_int rx843_pos, $P11, rx843_curclass, "$!pos"
    repr_bind_attr_int rx843_cur, rx843_curclass, "$!pos", rx843_pos
    $P11 = rx843_cur."ws"()
    repr_get_attr_int $I11, $P11, rx843_curclass, "$!pos"
    lt $I11, 0, rx843_fail2258
    repr_get_attr_int rx843_pos, $P11, rx843_curclass, "$!pos"
    rx843_cur."!cursor_pass"(rx843_pos, "trait", 'backtrack'=>1)
    .return (rx843_cur)
  rx843_restart2257:
    repr_get_attr_obj rx843_cstack, rx843_cur, rx843_curclass, "$!cstack"
  rx843_fail2258:
    unless rx843_bstack, rx843_done2256
    pop $I19, rx843_bstack
    if_null rx843_cstack, rx843_cstack_done2261
    unless rx843_cstack, rx843_cstack_done2261
    dec $I19
    set $P11, rx843_cstack[$I19]
  rx843_cstack_done2261:
    pop rx843_rep, rx843_bstack
    pop rx843_pos, rx843_bstack
    pop $I19, rx843_bstack
    lt rx843_pos, -1, rx843_done2256
    lt rx843_pos, 0, rx843_fail2258
    eq $I19, 0, rx843_fail2258
    nqp_islist $I20, rx843_cstack
    unless $I20, rx843_jump2259
    elements $I18, rx843_bstack
    le $I18, 0, rx843_cut2260
    dec $I18
    set $I18, rx843_bstack[$I18]
  rx843_cut2260:
    assign rx843_cstack, $I18
  rx843_jump2259:
    jump $I19
  rx843_done2256:
    rx843_cur."!cursor_fail"()
    .return (rx843_cur) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod" :subid("cuid_136_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1170
    .param pmc self 
    $P5001 = self."!protoregex"("trait_mod")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_137_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1171
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx848_tgt
    .local int rx848_pos
    .local int rx848_off
    .local int rx848_eos
    .local int rx848_rep
    .local pmc rx848_cur
    .local pmc rx848_curclass
    .local pmc rx848_bstack
    .local pmc rx848_cstack
    (rx848_cur, rx848_tgt, rx848_pos, rx848_curclass, rx848_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx848_cur
    length rx848_eos, rx848_tgt
    eq $I19, 1, rx848_restart2270
    gt rx848_pos, rx848_eos, rx848_fail2271
    repr_get_attr_int $I11, self, rx848_curclass, "$!from"
    ne $I11, -1, rxscan849_done2277
    goto rxscan849_scan2276
  rxscan849_loop2275:
    inc rx848_pos
    gt rx848_pos, rx848_eos, rx848_fail2271
    repr_bind_attr_int rx848_cur, rx848_curclass, "$!from", rx848_pos
  rxscan849_scan2276:
    nqp_rxmark rx848_bstack, rxscan849_loop2275, rx848_pos, 0
  rxscan849_done2277:
    nqp_rxmark rx848_bstack, rxcap850_fail2279, rx848_pos, 0
    add $I11, rx848_pos, 2
    gt $I11, rx848_eos, rx848_fail2271
    substr $S10, rx848_tgt, rx848_pos, 2
    ne $S10, ucs4:"is", rx848_fail2271
    add rx848_pos, 2
    nqp_rxpeek $I19, rx848_bstack, rxcap850_fail2279
    inc $I19
    set $I11, rx848_bstack[$I19]
    repr_bind_attr_int rx848_cur, rx848_curclass, "$!pos", rx848_pos
    $P11 = rx848_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx848_pos)
    rx848_cstack = rx848_cur."!cursor_capture"($P11, "sym")
    goto rxcap850_done2278
  rxcap850_fail2279:
    goto rx848_fail2271
  rxcap850_done2278:
    repr_bind_attr_int rx848_cur, rx848_curclass, "$!pos", rx848_pos
    $P11 = rx848_cur."ws"()
    repr_get_attr_int $I11, $P11, rx848_curclass, "$!pos"
    lt $I11, 0, rx848_fail2271
    repr_get_attr_int rx848_pos, $P11, rx848_curclass, "$!pos"
    repr_bind_attr_int rx848_cur, rx848_curclass, "$!pos", rx848_pos
    $P11 = rx848_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx848_curclass, "$!pos"
    lt $I11, 0, rx848_fail2271
    nqp_rxmark rx848_bstack, rxsubrule852_pass2281, -1, 0
  rxsubrule852_pass2281:
    rx848_cstack = rx848_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx848_pos, $P11, rx848_curclass, "$!pos"
    nqp_rxmark rx848_bstack, rxquantr853_done2283, rx848_pos, 0
  rxquantr853_loop2282:
    repr_bind_attr_int rx848_cur, rx848_curclass, "$!pos", rx848_pos
    $P11 = rx848_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx848_curclass, "$!pos"
    lt $I11, 0, rx848_fail2271
    goto rxsubrule854_pass2284
  rxsubrule854_back2285:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx848_curclass, "$!pos"
    lt $I11, 0, rx848_fail2271
  rxsubrule854_pass2284:
    rx848_cstack = rx848_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule854_back2285
    push rx848_bstack, $I11
    push rx848_bstack, 0
    push rx848_bstack, rx848_pos
    elements $I11, rx848_cstack
    push rx848_bstack, $I11
    repr_get_attr_int rx848_pos, $P11, rx848_curclass, "$!pos"
    nqp_rxpeek $I19, rx848_bstack, rxquantr853_done2283
    inc $I19
    inc $I19
    set rx848_rep, rx848_bstack[$I19]
    nqp_rxcommit rx848_bstack, rxquantr853_done2283
    inc rx848_rep
  rxquantr853_done2283:
    repr_bind_attr_int rx848_cur, rx848_curclass, "$!pos", rx848_pos
    $P11 = rx848_cur."ws"()
    repr_get_attr_int $I11, $P11, rx848_curclass, "$!pos"
    lt $I11, 0, rx848_fail2271
    repr_get_attr_int rx848_pos, $P11, rx848_curclass, "$!pos"
    rx848_cur."!cursor_pass"(rx848_pos, "trait_mod:sym<is>", 'backtrack'=>1)
    .return (rx848_cur)
  rx848_restart2270:
    repr_get_attr_obj rx848_cstack, rx848_cur, rx848_curclass, "$!cstack"
  rx848_fail2271:
    unless rx848_bstack, rx848_done2269
    pop $I19, rx848_bstack
    if_null rx848_cstack, rx848_cstack_done2274
    unless rx848_cstack, rx848_cstack_done2274
    dec $I19
    set $P11, rx848_cstack[$I19]
  rx848_cstack_done2274:
    pop rx848_rep, rx848_bstack
    pop rx848_pos, rx848_bstack
    pop $I19, rx848_bstack
    lt rx848_pos, -1, rx848_done2269
    lt rx848_pos, 0, rx848_fail2271
    eq $I19, 0, rx848_fail2271
    nqp_islist $I20, rx848_cstack
    unless $I20, rx848_jump2272
    elements $I18, rx848_bstack
    le $I18, 0, rx848_cut2273
    dec $I18
    set $I18, rx848_bstack[$I18]
  rx848_cut2273:
    assign rx848_cstack, $I18
  rx848_jump2272:
    jump $I19
  rx848_done2269:
    rx848_cur."!cursor_fail"()
    .return (rx848_cur) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_138_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1173
    .param pmc _lex_param_0 
    .const 'Sub' $P5012 = 'cuid_408_1360426903.566' 
    capture_lex $P5012 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx856_tgt
    .local int rx856_pos
    .local int rx856_off
    .local int rx856_eos
    .local int rx856_rep
    .local pmc rx856_cur
    .local pmc rx856_curclass
    .local pmc rx856_bstack
    .local pmc rx856_cstack
    (rx856_cur, rx856_tgt, rx856_pos, rx856_curclass, rx856_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx856_cur
    length rx856_eos, rx856_tgt
    eq $I19, 1, rx856_restart2289
    gt rx856_pos, rx856_eos, rx856_fail2290
    repr_get_attr_int $I11, self, rx856_curclass, "$!from"
    ne $I11, -1, rxscan857_done2296
    goto rxscan857_scan2295
  rxscan857_loop2294:
    inc rx856_pos
    gt rx856_pos, rx856_eos, rx856_fail2290
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!from", rx856_pos
  rxscan857_scan2295:
    nqp_rxmark rx856_bstack, rxscan857_loop2294, rx856_pos, 0
  rxscan857_done2296:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt858_02298
    nqp_push_label $P11, alt858_12338
    nqp_rxmark rx856_bstack, alt858_end2297, -1, 0
    rx856_cur."!alt"(rx856_pos, "alt_nfa__33_1360426905.975", $P11)
    goto rx856_fail2290
  alt858_02298:
    nqp_rxmark rx856_bstack, rxcap859_fail2300, rx856_pos, 0
    add $I11, rx856_pos, 5
    gt $I11, rx856_eos, rx856_fail2290
    substr $S10, rx856_tgt, rx856_pos, 5
    ne $S10, ucs4:"proto", rx856_fail2290
    add rx856_pos, 5
    nqp_rxpeek $I19, rx856_bstack, rxcap859_fail2300
    inc $I19
    set $I11, rx856_bstack[$I19]
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx856_pos)
    rx856_cstack = rx856_cur."!cursor_capture"($P11, "proto")
    goto rxcap859_done2299
  rxcap859_fail2300:
    goto rx856_fail2290
  rxcap859_done2299:
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt861_02303
    nqp_push_label $P11, alt861_12304
    nqp_push_label $P11, alt861_22305
    nqp_rxmark rx856_bstack, alt861_end2302, -1, 0
    rx856_cur."!alt"(rx856_pos, "alt_nfa__31_1360426905.974", $P11)
    goto rx856_fail2290
  alt861_02303:
    add $I11, rx856_pos, 5
    gt $I11, rx856_eos, rx856_fail2290
    substr $S10, rx856_tgt, rx856_pos, 5
    ne $S10, ucs4:"regex", rx856_fail2290
    add rx856_pos, 5
    goto alt861_end2302
  alt861_12304:
    add $I11, rx856_pos, 5
    gt $I11, rx856_eos, rx856_fail2290
    substr $S10, rx856_tgt, rx856_pos, 5
    ne $S10, ucs4:"token", rx856_fail2290
    add rx856_pos, 5
    goto alt861_end2302
  alt861_22305:
    add $I11, rx856_pos, 4
    gt $I11, rx856_eos, rx856_fail2290
    substr $S10, rx856_tgt, rx856_pos, 4
    ne $S10, ucs4:"rule", rx856_fail2290
    add rx856_pos, 4
    goto alt861_end2302
  alt861_end2302:
    nqp_rxcommit rx856_bstack, alt861_end2302
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
  alt863_02308:
    nqp_rxmark rx856_bstack, alt863_12314, rx856_pos, 0
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    add $I11, rx856_pos, 3
    gt $I11, rx856_eos, rx856_fail2290
    substr $S10, rx856_tgt, rx856_pos, 3
    ne $S10, ucs4:"::(", rx856_fail2290
    add rx856_pos, 3
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."variable"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    nqp_rxmark rx856_bstack, rxsubrule866_pass2311, -1, 0
  rxsubrule866_pass2311:
    rx856_cstack = rx856_cur."!cursor_capture"($P11, "latename=variable")
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    add $I11, rx856_pos, 1
    gt $I11, rx856_eos, rx856_fail2290
    substr $S10, rx856_tgt, rx856_pos, 1
    ne $S10, ucs4:")", rx856_fail2290
    add rx856_pos, 1
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    goto alt863_end2307
  alt863_12314:
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    nqp_rxmark rx856_bstack, rxsubrule870_pass2316, -1, 0
  rxsubrule870_pass2316:
    rx856_cstack = rx856_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
  alt863_end2307:
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
  alt873_02320:
    nqp_rxmark rx856_bstack, alt873_12323, rx856_pos, 0
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    add $I11, rx856_pos, 3
    gt $I11, rx856_eos, rx856_fail2290
    substr $S10, rx856_tgt, rx856_pos, 3
    ne $S10, ucs4:"{*}", rx856_fail2290
    add rx856_pos, 3
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    goto alt873_end2319
  alt873_12323:
    nqp_rxmark rx856_bstack, alt873_22328, rx856_pos, 0
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    add $I11, rx856_pos, 1
    gt $I11, rx856_eos, rx856_fail2290
    substr $S10, rx856_tgt, rx856_pos, 1
    ne $S10, ucs4:"{", rx856_fail2290
    add rx856_pos, 1
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    add $I11, rx856_pos, 5
    gt $I11, rx856_eos, rx856_fail2290
    substr $S10, rx856_tgt, rx856_pos, 5
    ne $S10, ucs4:"<...>", rx856_fail2290
    add rx856_pos, 5
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    add $I11, rx856_pos, 1
    gt $I11, rx856_eos, rx856_fail2290
    substr $S10, rx856_tgt, rx856_pos, 1
    ne $S10, ucs4:"}", rx856_fail2290
    add rx856_pos, 1
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    goto alt873_end2319
  alt873_22328:
    nqp_rxmark rx856_bstack, alt873_32333, rx856_pos, 0
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    add $I11, rx856_pos, 1
    gt $I11, rx856_eos, rx856_fail2290
    substr $S10, rx856_tgt, rx856_pos, 1
    ne $S10, ucs4:"{", rx856_fail2290
    add rx856_pos, 1
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    add $I11, rx856_pos, 3
    gt $I11, rx856_eos, rx856_fail2290
    substr $S10, rx856_tgt, rx856_pos, 3
    ne $S10, ucs4:"<*>", rx856_fail2290
    add rx856_pos, 3
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    add $I11, rx856_pos, 1
    gt $I11, rx856_eos, rx856_fail2290
    substr $S10, rx856_tgt, rx856_pos, 1
    ne $S10, ucs4:"}", rx856_fail2290
    add rx856_pos, 1
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    goto alt873_end2319
  alt873_32333:
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."panic"("Proto regex body must be \\{*\\} (or <*> or <...>, which are deprecated)")
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
  alt873_end2319:
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    goto alt858_end2297
  alt858_12338:
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    nqp_rxmark rx856_bstack, rxcap889_fail2341, rx856_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt890_02343
    nqp_push_label $P11, alt890_12344
    nqp_push_label $P11, alt890_22345
    nqp_rxmark rx856_bstack, alt890_end2342, -1, 0
    rx856_cur."!alt"(rx856_pos, "alt_nfa__32_1360426905.975", $P11)
    goto rx856_fail2290
  alt890_02343:
    add $I11, rx856_pos, 5
    gt $I11, rx856_eos, rx856_fail2290
    substr $S10, rx856_tgt, rx856_pos, 5
    ne $S10, ucs4:"regex", rx856_fail2290
    add rx856_pos, 5
    goto alt890_end2342
  alt890_12344:
    add $I11, rx856_pos, 5
    gt $I11, rx856_eos, rx856_fail2290
    substr $S10, rx856_tgt, rx856_pos, 5
    ne $S10, ucs4:"token", rx856_fail2290
    add rx856_pos, 5
    goto alt890_end2342
  alt890_22345:
    add $I11, rx856_pos, 4
    gt $I11, rx856_eos, rx856_fail2290
    substr $S10, rx856_tgt, rx856_pos, 4
    ne $S10, ucs4:"rule", rx856_fail2290
    add rx856_pos, 4
    goto alt890_end2342
  alt890_end2342:
    nqp_rxcommit rx856_bstack, alt890_end2342
    nqp_rxpeek $I19, rx856_bstack, rxcap889_fail2341
    inc $I19
    set $I11, rx856_bstack[$I19]
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx856_pos)
    rx856_cstack = rx856_cur."!cursor_capture"($P11, "sym")
    goto rxcap889_done2340
  rxcap889_fail2341:
    goto rx856_fail2290
  rxcap889_done2340:
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
  alt893_02349:
    nqp_rxmark rx856_bstack, alt893_12355, rx856_pos, 0
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    add $I11, rx856_pos, 3
    gt $I11, rx856_eos, rx856_fail2290
    substr $S10, rx856_tgt, rx856_pos, 3
    ne $S10, ucs4:"::(", rx856_fail2290
    add rx856_pos, 3
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."variable"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    nqp_rxmark rx856_bstack, rxsubrule896_pass2352, -1, 0
  rxsubrule896_pass2352:
    rx856_cstack = rx856_cur."!cursor_capture"($P11, "latename=variable")
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    add $I11, rx856_pos, 1
    gt $I11, rx856_eos, rx856_fail2290
    substr $S10, rx856_tgt, rx856_pos, 1
    ne $S10, ucs4:")", rx856_fail2290
    add rx856_pos, 1
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    goto alt893_end2348
  alt893_12355:
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    nqp_rxmark rx856_bstack, rxsubrule900_pass2357, -1, 0
  rxsubrule900_pass2357:
    rx856_cstack = rx856_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
  alt893_end2348:
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    nqp_rxmark rx856_bstack, rxquantr905_done2363, rx856_pos, 0
  rxquantr905_loop2362:
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    add $I11, rx856_pos, 1
    gt $I11, rx856_eos, rx856_fail2290
    substr $S10, rx856_tgt, rx856_pos, 1
    ne $S10, ucs4:"(", rx856_fail2290
    add rx856_pos, 1
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."signature"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    nqp_rxmark rx856_bstack, rxsubrule908_pass2366, -1, 0
  rxsubrule908_pass2366:
    rx856_cstack = rx856_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    add $I11, rx856_pos, 1
    gt $I11, rx856_eos, rx856_fail2290
    substr $S10, rx856_tgt, rx856_pos, 1
    ne $S10, ucs4:")", rx856_fail2290
    add rx856_pos, 1
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    nqp_rxpeek $I19, rx856_bstack, rxquantr905_done2363
    inc $I19
    inc $I19
    set rx856_rep, rx856_bstack[$I19]
    nqp_rxcommit rx856_bstack, rxquantr905_done2363
    inc rx856_rep
  rxquantr905_done2363:
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    store_lex unicode:"$\x{a2}", rx856_cur
    unless_null $P101, fallback2370
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2371
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2371:
    unless_null $P5002, vivi_9122372
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_9122372:
    set $P101, $P5002
  fallback2370:
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    store_lex unicode:"$\x{a2}", rx856_cur
    $P5009 = $P102."MATCH"()
    set $P103, $P5009
    .const 'Sub' $P5010 = 'cuid_408_1360426903.566' 
    capture_lex $P5010
    $P5011 = $P5010()
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    add $I11, rx856_pos, 1
    gt $I11, rx856_eos, rx856_fail2290
    substr $S10, rx856_tgt, rx856_pos, 1
    ne $S10, ucs4:"{", rx856_fail2290
    add rx856_pos, 1
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    nqp_rxmark rx856_bstack, rxsubrule924_pass2413, -1, 0
  rxsubrule924_pass2413:
    rx856_cstack = rx856_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    add $I11, rx856_pos, 1
    gt $I11, rx856_eos, rx856_fail2290
    substr $S10, rx856_tgt, rx856_pos, 1
    ne $S10, ucs4:"}", rx856_fail2290
    add rx856_pos, 1
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."ws"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2290
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    goto alt858_end2297
  alt858_end2297:
    nqp_rxcommit rx856_bstack, alt858_end2297
    rx856_cur."!cursor_pass"(rx856_pos, "regex_declarator", 'backtrack'=>1)
    .return (rx856_cur)
  rx856_restart2289:
    repr_get_attr_obj rx856_cstack, rx856_cur, rx856_curclass, "$!cstack"
  rx856_fail2290:
    unless rx856_bstack, rx856_done2288
    pop $I19, rx856_bstack
    if_null rx856_cstack, rx856_cstack_done2293
    unless rx856_cstack, rx856_cstack_done2293
    dec $I19
    set $P11, rx856_cstack[$I19]
  rx856_cstack_done2293:
    pop rx856_rep, rx856_bstack
    pop rx856_pos, rx856_bstack
    pop $I19, rx856_bstack
    lt rx856_pos, -1, rx856_done2288
    lt rx856_pos, 0, rx856_fail2290
    eq $I19, 0, rx856_fail2290
    nqp_islist $I20, rx856_cstack
    unless $I20, rx856_jump2291
    elements $I18, rx856_bstack
    le $I18, 0, rx856_cut2292
    dec $I18
    set $I18, rx856_bstack[$I18]
  rx856_cut2292:
    assign rx856_cstack, $I18
  rx856_jump2291:
    jump $I19
  rx856_done2288:
    rx856_cur."!cursor_fail"()
    .return (rx856_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_408_1360426903.566") :anon :lex :outer("cuid_138_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1194

    find_dynamic_lex $P5001, "%*RX"
    unless_null $P5001, fallback2374
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2375
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2375:
    unless_null $P5002, vivi_9142376
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_9142376:
    set $P5001, $P5002
  fallback2374:
    find_lex $P5010, "$/"
    unless_null $P5010, fallback2377
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5011
  fallback2377:
    set $P5009, $P5010["sym"]
    unless_null $P5009, fallback2378
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5012
  fallback2378:
    set $S5001, $P5009
    iseq $I5001, $S5001, "rule"
    box $P5013, $I5001
    set $P5001["s"], $P5013
    find_dynamic_lex $P5014, "%*RX"
    unless_null $P5014, fallback2379
    nqp_get_sc_object $P5017, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["%RX"]
    unless_null $P5015, fallback2380
    nqp_get_sc_object $P5019, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%RX"], $P5020
    set $P5015, $P5020
  fallback2380:
    unless_null $P5015, vivi_9152381
    die "Contextual %*RX not found"
    box $P5021, "Contextual %*RX not found"
    set $P5015, $P5021
  vivi_9152381:
    set $P5014, $P5015
  fallback2379:
    find_lex $P5023, "$/"
    unless_null $P5023, fallback2384
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5023, $P5024
  fallback2384:
    set $P5022, $P5023["sym"]
    unless_null $P5022, fallback2385
    nqp_get_sc_object $P5025, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5022, $P5025
  fallback2385:
    set $S5002, $P5022
    iseq $I5002, $S5002, "token"
    set $I5004, $I5002
    if $I5002 goto unless916_end2383 
    find_lex $P5027, "$/"
    unless_null $P5027, fallback2386
    nqp_get_sc_object $P5028, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5027, $P5028
  fallback2386:
    set $P5026, $P5027["sym"]
    unless_null $P5026, fallback2387
    nqp_get_sc_object $P5029, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5026, $P5029
  fallback2387:
    set $S5003, $P5026
    iseq $I5003, $S5003, "rule"
    set $I5004, $I5003
  unless916_end2383:
    box $P5030, $I5004
    set $P5014["r"], $P5030
    find_dynamic_lex $P5031, "%*RX"
    unless_null $P5031, fallback2388
    nqp_get_sc_object $P5034, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%RX"]
    unless_null $P5032, fallback2389
    nqp_get_sc_object $P5036, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%RX"], $P5037
    set $P5032, $P5037
  fallback2389:
    unless_null $P5032, vivi_9172390
    die "Contextual %*RX not found"
    box $P5038, "Contextual %*RX not found"
    set $P5032, $P5038
  vivi_9172390:
    set $P5031, $P5032
  fallback2388:
    find_lex $P5040, "$/"
    unless_null $P5040, fallback2393
    nqp_get_sc_object $P5041, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5040, $P5041
  fallback2393:
    set $P5039, $P5040["deflongname"]
    unless_null $P5039, fallback2394
    nqp_get_sc_object $P5042, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5039, $P5042
  fallback2394:
    unless $P5039 goto if918_else2391 
.annotate 'line', 1197
    find_lex $P5044, "$/"
    unless_null $P5044, fallback2395
    nqp_get_sc_object $P5045, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5044, $P5045
  fallback2395:
    set $P5043, $P5044["deflongname"]
    unless_null $P5043, fallback2396
    nqp_get_sc_object $P5046, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5043, $P5046
  fallback2396:
    $P5047 = $P5043."ast"()
    set $P5052, $P5047
    goto if918_end2392
  if918_else2391:
    find_lex $P5049, "$/"
    unless_null $P5049, fallback2397
    nqp_get_sc_object $P5050, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5049, $P5050
  fallback2397:
    set $P5048, $P5049["latename"]
    unless_null $P5048, fallback2398
    nqp_get_sc_object $P5051, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5048, $P5051
  fallback2398:
    set $S5005, $P5048
    concat $S5004, "!!LATENAME!!", $S5005
    box $P5053, $S5004
    set $P5052, $P5053
  if918_end2392:
    set $P5031["name"], $P5052
    find_dynamic_lex $P5054, "%*RX"
    unless_null $P5054, fallback2399
    nqp_get_sc_object $P5057, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["%RX"]
    unless_null $P5055, fallback2400
    nqp_get_sc_object $P5059, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5058, $P5059
    new $P5060, 'Hash'
    set $P5058["%RX"], $P5060
    set $P5055, $P5060
  fallback2400:
    unless_null $P5055, vivi_9192401
    die "Contextual %*RX not found"
    box $P5061, "Contextual %*RX not found"
    set $P5055, $P5061
  vivi_9192401:
    set $P5054, $P5055
  fallback2399:
.annotate 'line', 1198
    find_dynamic_lex $P5062, "$*W"
    unless_null $P5062, fallback2402
    nqp_get_sc_object $P5065, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$W"]
    unless_null $P5063, fallback2403
    nqp_get_sc_object $P5066, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5063, $P5066
  fallback2403:
    unless_null $P5063, vivi_9202404
    die "Contextual $*W not found"
    box $P5067, "Contextual $*W not found"
    set $P5063, $P5067
  vivi_9202404:
    set $P5062, $P5063
  fallback2402:
    find_dynamic_lex $P5068, "$*W"
    unless_null $P5068, fallback2405
    nqp_get_sc_object $P5071, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5070, $P5071
    set $P5069, $P5070["$W"]
    unless_null $P5069, fallback2406
    nqp_get_sc_object $P5072, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5069, $P5072
  fallback2406:
    unless_null $P5069, vivi_9212407
    die "Contextual $*W not found"
    box $P5073, "Contextual $*W not found"
    set $P5069, $P5073
  vivi_9212407:
    set $P5068, $P5069
  fallback2405:
    $P5074 = $P5068."cur_lexpad"()
    find_dynamic_lex $P5076, "%*RX"
    unless_null $P5076, fallback2408
    nqp_get_sc_object $P5079, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5078, $P5079
    set $P5077, $P5078["%RX"]
    unless_null $P5077, fallback2409
    nqp_get_sc_object $P5081, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5080, $P5081
    new $P5082, 'Hash'
    set $P5080["%RX"], $P5082
    set $P5077, $P5082
  fallback2409:
    unless_null $P5077, vivi_9222410
    die "Contextual %*RX not found"
    box $P5083, "Contextual %*RX not found"
    set $P5077, $P5083
  vivi_9222410:
    set $P5076, $P5077
  fallback2408:
    set $P5075, $P5076["name"]
    unless_null $P5075, fallback2411
    nqp_get_sc_object $P5084, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5075, $P5084
  fallback2411:
    $P5085 = $P5062."create_code"($P5074, $P5075, 0, "NQPRegex" :named("code_type_name"))
    set $P5054["code"], $P5085
    .return ($P5085) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_139_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1204
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx926_tgt
    .local int rx926_pos
    .local int rx926_off
    .local int rx926_eos
    .local int rx926_rep
    .local pmc rx926_cur
    .local pmc rx926_curclass
    .local pmc rx926_bstack
    .local pmc rx926_cstack
    (rx926_cur, rx926_tgt, rx926_pos, rx926_curclass, rx926_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx926_cur
    length rx926_eos, rx926_tgt
    eq $I19, 1, rx926_restart2417
    gt rx926_pos, rx926_eos, rx926_fail2418
    repr_get_attr_int $I11, self, rx926_curclass, "$!from"
    ne $I11, -1, rxscan927_done2424
    goto rxscan927_scan2423
  rxscan927_loop2422:
    inc rx926_pos
    gt rx926_pos, rx926_eos, rx926_fail2418
    repr_bind_attr_int rx926_cur, rx926_curclass, "$!from", rx926_pos
  rxscan927_scan2423:
    nqp_rxmark rx926_bstack, rxscan927_loop2422, rx926_pos, 0
  rxscan927_done2424:
    add $I11, rx926_pos, 1
    gt $I11, rx926_eos, rx926_fail2418
    substr $S10, rx926_tgt, rx926_pos, 1
    ne $S10, ucs4:".", rx926_fail2418
    add rx926_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt928_02426
    nqp_push_label $P11, alt928_12428
    nqp_rxmark rx926_bstack, alt928_end2425, -1, 0
    rx926_cur."!alt"(rx926_pos, "alt_nfa__34_1360426905.997", $P11)
    goto rx926_fail2418
  alt928_02426:
    repr_bind_attr_int rx926_cur, rx926_curclass, "$!pos", rx926_pos
    $P11 = rx926_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx926_curclass, "$!pos"
    lt $I11, 0, rx926_fail2418
    nqp_rxmark rx926_bstack, rxsubrule929_pass2427, -1, 0
  rxsubrule929_pass2427:
    rx926_cstack = rx926_cur."!cursor_capture"($P11, "longname=deflongname")
    repr_get_attr_int rx926_pos, $P11, rx926_curclass, "$!pos"
    goto alt928_end2425
  alt928_12428:
    ge rx926_pos, rx926_eos, rx926_fail2418
    substr $S11, rx926_tgt, rx926_pos, 1
    index $I11, ucs4:"'\"", $S11
    lt $I11, 0, rx926_fail2418
    repr_bind_attr_int rx926_cur, rx926_curclass, "$!pos", rx926_pos
    $P11 = rx926_cur."quote"()
    repr_get_attr_int $I11, $P11, rx926_curclass, "$!pos"
    lt $I11, 0, rx926_fail2418
    nqp_rxmark rx926_bstack, rxsubrule930_pass2429, -1, 0
  rxsubrule930_pass2429:
    rx926_cstack = rx926_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx926_pos, $P11, rx926_curclass, "$!pos"
  alt931_02431:
    nqp_rxmark rx926_bstack, alt931_12432, rx926_pos, 0
    ge rx926_pos, rx926_eos, rx926_fail2418
    substr $S11, rx926_tgt, rx926_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx926_fail2418
    goto alt931_end2430
  alt931_12432:
    repr_bind_attr_int rx926_cur, rx926_curclass, "$!pos", rx926_pos
    $P11 = rx926_cur."panic"("Quoted method name requires parenthesized arguments")
    repr_get_attr_int $I11, $P11, rx926_curclass, "$!pos"
    lt $I11, 0, rx926_fail2418
    repr_get_attr_int rx926_pos, $P11, rx926_curclass, "$!pos"
  alt931_end2430:
    goto alt928_end2425
  alt928_end2425:
    nqp_rxcommit rx926_bstack, alt928_end2425
    nqp_rxmark rx926_bstack, rxquantr933_done2435, rx926_pos, 0
  rxquantr933_loop2434:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt934_02437
    nqp_push_label $P11, alt934_12439
    nqp_rxmark rx926_bstack, alt934_end2436, -1, 0
    rx926_cur."!alt"(rx926_pos, "alt_nfa__35_1360426905.997", $P11)
    goto rx926_fail2418
  alt934_02437:
    ge rx926_pos, rx926_eos, rx926_fail2418
    substr $S11, rx926_tgt, rx926_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx926_fail2418
    repr_bind_attr_int rx926_cur, rx926_curclass, "$!pos", rx926_pos
    $P11 = rx926_cur."args"()
    repr_get_attr_int $I11, $P11, rx926_curclass, "$!pos"
    lt $I11, 0, rx926_fail2418
    nqp_rxmark rx926_bstack, rxsubrule935_pass2438, -1, 0
  rxsubrule935_pass2438:
    rx926_cstack = rx926_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx926_pos, $P11, rx926_curclass, "$!pos"
    goto alt934_end2436
  alt934_12439:
    add $I11, rx926_pos, 1
    gt $I11, rx926_eos, rx926_fail2418
    substr $S10, rx926_tgt, rx926_pos, 1
    ne $S10, ucs4:":", rx926_fail2418
    add rx926_pos, 1
    ge rx926_pos, rx926_eos, rx926_fail2418
    is_cclass $I11, .CCLASS_WHITESPACE, rx926_tgt, rx926_pos
    unless $I11, rx926_fail2418
    add rx926_pos, 1
    repr_bind_attr_int rx926_cur, rx926_curclass, "$!pos", rx926_pos
    $P11 = rx926_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx926_curclass, "$!pos"
    lt $I11, 0, rx926_fail2418
    nqp_rxmark rx926_bstack, rxsubrule936_pass2440, -1, 0
  rxsubrule936_pass2440:
    rx926_cstack = rx926_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx926_pos, $P11, rx926_curclass, "$!pos"
    goto alt934_end2436
  alt934_end2436:
    nqp_rxpeek $I19, rx926_bstack, rxquantr933_done2435
    inc $I19
    inc $I19
    set rx926_rep, rx926_bstack[$I19]
    nqp_rxcommit rx926_bstack, rxquantr933_done2435
    inc rx926_rep
  rxquantr933_done2435:
    rx926_cur."!cursor_pass"(rx926_pos, "dotty", 'backtrack'=>1)
    .return (rx926_cur)
  rx926_restart2417:
    repr_get_attr_obj rx926_cstack, rx926_cur, rx926_curclass, "$!cstack"
  rx926_fail2418:
    unless rx926_bstack, rx926_done2416
    pop $I19, rx926_bstack
    if_null rx926_cstack, rx926_cstack_done2421
    unless rx926_cstack, rx926_cstack_done2421
    dec $I19
    set $P11, rx926_cstack[$I19]
  rx926_cstack_done2421:
    pop rx926_rep, rx926_bstack
    pop rx926_pos, rx926_bstack
    pop $I19, rx926_bstack
    lt rx926_pos, -1, rx926_done2416
    lt rx926_pos, 0, rx926_fail2418
    eq $I19, 0, rx926_fail2418
    nqp_islist $I20, rx926_cstack
    unless $I20, rx926_jump2419
    elements $I18, rx926_bstack
    le $I18, 0, rx926_cut2420
    dec $I18
    set $I18, rx926_bstack[$I18]
  rx926_cut2420:
    assign rx926_cstack, $I18
  rx926_jump2419:
    jump $I19
  rx926_done2416:
    rx926_cur."!cursor_fail"()
    .return (rx926_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_140_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1217
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx937_tgt
    .local int rx937_pos
    .local int rx937_off
    .local int rx937_eos
    .local int rx937_rep
    .local pmc rx937_cur
    .local pmc rx937_curclass
    .local pmc rx937_bstack
    .local pmc rx937_cstack
    (rx937_cur, rx937_tgt, rx937_pos, rx937_curclass, rx937_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx937_cur
    length rx937_eos, rx937_tgt
    eq $I19, 1, rx937_restart2443
    gt rx937_pos, rx937_eos, rx937_fail2444
    repr_get_attr_int $I11, self, rx937_curclass, "$!from"
    ne $I11, -1, rxscan938_done2450
    goto rxscan938_scan2449
  rxscan938_loop2448:
    inc rx937_pos
    gt rx937_pos, rx937_eos, rx937_fail2444
    repr_bind_attr_int rx937_cur, rx937_curclass, "$!from", rx937_pos
  rxscan938_scan2449:
    nqp_rxmark rx937_bstack, rxscan938_loop2448, rx937_pos, 0
  rxscan938_done2450:
    nqp_rxmark rx937_bstack, rxcap939_fail2452, rx937_pos, 0
    add $I11, rx937_pos, 4
    gt $I11, rx937_eos, rx937_fail2444
    substr $S10, rx937_tgt, rx937_pos, 4
    ne $S10, ucs4:"self", rx937_fail2444
    add rx937_pos, 4
    nqp_rxpeek $I19, rx937_bstack, rxcap939_fail2452
    inc $I19
    set $I11, rx937_bstack[$I19]
    repr_bind_attr_int rx937_cur, rx937_curclass, "$!pos", rx937_pos
    $P11 = rx937_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx937_pos)
    rx937_cstack = rx937_cur."!cursor_capture"($P11, "sym")
    goto rxcap939_done2451
  rxcap939_fail2452:
    goto rx937_fail2444
  rxcap939_done2451:
    le rx937_pos, 0, rx937_fail2444
    is_cclass $I11, .CCLASS_WORD, rx937_tgt, rx937_pos
    if $I11, rx937_fail2444
    sub $I11, rx937_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx937_tgt, $I11
    unless $I11, rx937_fail2444
    rx937_cur."!cursor_pass"(rx937_pos, "term:sym<self>", 'backtrack'=>1)
    .return (rx937_cur)
  rx937_restart2443:
    repr_get_attr_obj rx937_cstack, rx937_cur, rx937_curclass, "$!cstack"
  rx937_fail2444:
    unless rx937_bstack, rx937_done2442
    pop $I19, rx937_bstack
    if_null rx937_cstack, rx937_cstack_done2447
    unless rx937_cstack, rx937_cstack_done2447
    dec $I19
    set $P11, rx937_cstack[$I19]
  rx937_cstack_done2447:
    pop rx937_rep, rx937_bstack
    pop rx937_pos, rx937_bstack
    pop $I19, rx937_bstack
    lt rx937_pos, -1, rx937_done2442
    lt rx937_pos, 0, rx937_fail2444
    eq $I19, 0, rx937_fail2444
    nqp_islist $I20, rx937_cstack
    unless $I20, rx937_jump2445
    elements $I18, rx937_bstack
    le $I18, 0, rx937_cut2446
    dec $I18
    set $I18, rx937_bstack[$I18]
  rx937_cut2446:
    assign rx937_cstack, $I18
  rx937_jump2445:
    jump $I19
  rx937_done2442:
    rx937_cur."!cursor_fail"()
    .return (rx937_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_141_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1219
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx941_tgt
    .local int rx941_pos
    .local int rx941_off
    .local int rx941_eos
    .local int rx941_rep
    .local pmc rx941_cur
    .local pmc rx941_curclass
    .local pmc rx941_bstack
    .local pmc rx941_cstack
    (rx941_cur, rx941_tgt, rx941_pos, rx941_curclass, rx941_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx941_cur
    length rx941_eos, rx941_tgt
    eq $I19, 1, rx941_restart2456
    gt rx941_pos, rx941_eos, rx941_fail2457
    repr_get_attr_int $I11, self, rx941_curclass, "$!from"
    ne $I11, -1, rxscan942_done2463
    goto rxscan942_scan2462
  rxscan942_loop2461:
    inc rx941_pos
    gt rx941_pos, rx941_eos, rx941_fail2457
    repr_bind_attr_int rx941_cur, rx941_curclass, "$!from", rx941_pos
  rxscan942_scan2462:
    nqp_rxmark rx941_bstack, rxscan942_loop2461, rx941_pos, 0
  rxscan942_done2463:
    repr_bind_attr_int rx941_cur, rx941_curclass, "$!pos", rx941_pos
    $P11 = rx941_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx941_curclass, "$!pos"
    lt $I11, 0, rx941_fail2457
    nqp_rxmark rx941_bstack, rxsubrule943_pass2464, -1, 0
  rxsubrule943_pass2464:
    rx941_cstack = rx941_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx941_pos, $P11, rx941_curclass, "$!pos"
    ge rx941_pos, rx941_eos, rx941_fail2457
    substr $S11, rx941_tgt, rx941_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx941_fail2457
    repr_bind_attr_int rx941_cur, rx941_curclass, "$!pos", rx941_pos
    $P11 = rx941_cur."args"()
    repr_get_attr_int $I11, $P11, rx941_curclass, "$!pos"
    lt $I11, 0, rx941_fail2457
    nqp_rxmark rx941_bstack, rxsubrule944_pass2465, -1, 0
  rxsubrule944_pass2465:
    rx941_cstack = rx941_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx941_pos, $P11, rx941_curclass, "$!pos"
    rx941_cur."!cursor_pass"(rx941_pos, "term:sym<identifier>", 'backtrack'=>1)
    .return (rx941_cur)
  rx941_restart2456:
    repr_get_attr_obj rx941_cstack, rx941_cur, rx941_curclass, "$!cstack"
  rx941_fail2457:
    unless rx941_bstack, rx941_done2455
    pop $I19, rx941_bstack
    if_null rx941_cstack, rx941_cstack_done2460
    unless rx941_cstack, rx941_cstack_done2460
    dec $I19
    set $P11, rx941_cstack[$I19]
  rx941_cstack_done2460:
    pop rx941_rep, rx941_bstack
    pop rx941_pos, rx941_bstack
    pop $I19, rx941_bstack
    lt rx941_pos, -1, rx941_done2455
    lt rx941_pos, 0, rx941_fail2457
    eq $I19, 0, rx941_fail2457
    nqp_islist $I20, rx941_cstack
    unless $I20, rx941_jump2458
    elements $I18, rx941_bstack
    le $I18, 0, rx941_cut2459
    dec $I18
    set $I18, rx941_bstack[$I18]
  rx941_cut2459:
    assign rx941_cstack, $I18
  rx941_jump2458:
    jump $I19
  rx941_done2455:
    rx941_cur."!cursor_fail"()
    .return (rx941_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_142_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1223
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx945_tgt
    .local int rx945_pos
    .local int rx945_off
    .local int rx945_eos
    .local int rx945_rep
    .local pmc rx945_cur
    .local pmc rx945_curclass
    .local pmc rx945_bstack
    .local pmc rx945_cstack
    (rx945_cur, rx945_tgt, rx945_pos, rx945_curclass, rx945_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx945_cur
    length rx945_eos, rx945_tgt
    eq $I19, 1, rx945_restart2468
    gt rx945_pos, rx945_eos, rx945_fail2469
    repr_get_attr_int $I11, self, rx945_curclass, "$!from"
    ne $I11, -1, rxscan946_done2475
    goto rxscan946_scan2474
  rxscan946_loop2473:
    inc rx945_pos
    gt rx945_pos, rx945_eos, rx945_fail2469
    repr_bind_attr_int rx945_cur, rx945_curclass, "$!from", rx945_pos
  rxscan946_scan2474:
    nqp_rxmark rx945_bstack, rxscan946_loop2473, rx945_pos, 0
  rxscan946_done2475:
    repr_bind_attr_int rx945_cur, rx945_curclass, "$!pos", rx945_pos
    $P11 = rx945_cur."name"()
    repr_get_attr_int $I11, $P11, rx945_curclass, "$!pos"
    lt $I11, 0, rx945_fail2469
    nqp_rxmark rx945_bstack, rxsubrule947_pass2476, -1, 0
  rxsubrule947_pass2476:
    rx945_cstack = rx945_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx945_pos, $P11, rx945_curclass, "$!pos"
    nqp_rxmark rx945_bstack, rxquantr948_done2478, rx945_pos, 0
  rxquantr948_loop2477:
    repr_bind_attr_int rx945_cur, rx945_curclass, "$!pos", rx945_pos
    $P11 = rx945_cur."args"()
    repr_get_attr_int $I11, $P11, rx945_curclass, "$!pos"
    lt $I11, 0, rx945_fail2469
    goto rxsubrule949_pass2479
  rxsubrule949_back2480:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx945_curclass, "$!pos"
    lt $I11, 0, rx945_fail2469
  rxsubrule949_pass2479:
    rx945_cstack = rx945_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule949_back2480
    push rx945_bstack, $I11
    push rx945_bstack, 0
    push rx945_bstack, rx945_pos
    elements $I11, rx945_cstack
    push rx945_bstack, $I11
    repr_get_attr_int rx945_pos, $P11, rx945_curclass, "$!pos"
    nqp_rxpeek $I19, rx945_bstack, rxquantr948_done2478
    inc $I19
    inc $I19
    set rx945_rep, rx945_bstack[$I19]
    nqp_rxcommit rx945_bstack, rxquantr948_done2478
    inc rx945_rep
  rxquantr948_done2478:
    rx945_cur."!cursor_pass"(rx945_pos, "term:sym<name>", 'backtrack'=>1)
    .return (rx945_cur)
  rx945_restart2468:
    repr_get_attr_obj rx945_cstack, rx945_cur, rx945_curclass, "$!cstack"
  rx945_fail2469:
    unless rx945_bstack, rx945_done2467
    pop $I19, rx945_bstack
    if_null rx945_cstack, rx945_cstack_done2472
    unless rx945_cstack, rx945_cstack_done2472
    dec $I19
    set $P11, rx945_cstack[$I19]
  rx945_cstack_done2472:
    pop rx945_rep, rx945_bstack
    pop rx945_pos, rx945_bstack
    pop $I19, rx945_bstack
    lt rx945_pos, -1, rx945_done2467
    lt rx945_pos, 0, rx945_fail2469
    eq $I19, 0, rx945_fail2469
    nqp_islist $I20, rx945_cstack
    unless $I20, rx945_jump2470
    elements $I18, rx945_bstack
    le $I18, 0, rx945_cut2471
    dec $I18
    set $I18, rx945_bstack[$I18]
  rx945_cut2471:
    assign rx945_cstack, $I18
  rx945_jump2470:
    jump $I19
  rx945_done2467:
    rx945_cur."!cursor_fail"()
    .return (rx945_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_143_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1227
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx950_tgt
    .local int rx950_pos
    .local int rx950_off
    .local int rx950_eos
    .local int rx950_rep
    .local pmc rx950_cur
    .local pmc rx950_curclass
    .local pmc rx950_bstack
    .local pmc rx950_cstack
    (rx950_cur, rx950_tgt, rx950_pos, rx950_curclass, rx950_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx950_cur
    length rx950_eos, rx950_tgt
    eq $I19, 1, rx950_restart2483
    gt rx950_pos, rx950_eos, rx950_fail2484
    repr_get_attr_int $I11, self, rx950_curclass, "$!from"
    ne $I11, -1, rxscan951_done2490
    goto rxscan951_scan2489
  rxscan951_loop2488:
    inc rx950_pos
    gt rx950_pos, rx950_eos, rx950_fail2484
    repr_bind_attr_int rx950_cur, rx950_curclass, "$!from", rx950_pos
  rxscan951_scan2489:
    nqp_rxmark rx950_bstack, rxscan951_loop2488, rx950_pos, 0
  rxscan951_done2490:
    add $I11, rx950_pos, 5
    gt $I11, rx950_eos, rx950_fail2484
    substr $S10, rx950_tgt, rx950_pos, 5
    ne $S10, ucs4:"pir::", rx950_fail2484
    add rx950_pos, 5
    nqp_rxmark rx950_bstack, rxcap952_fail2492, rx950_pos, 0
    nqp_rxmark rx950_bstack, rxquantr953_done2494, -1, 0
  rxquantr953_loop2493:
    ge rx950_pos, rx950_eos, rx950_fail2484
    is_cclass $I11, .CCLASS_WORD, rx950_tgt, rx950_pos
    unless $I11, rx950_fail2484
    add rx950_pos, 1
    nqp_rxpeek $I19, rx950_bstack, rxquantr953_done2494
    inc $I19
    inc $I19
    set rx950_rep, rx950_bstack[$I19]
    nqp_rxcommit rx950_bstack, rxquantr953_done2494
    inc rx950_rep
    nqp_rxmark rx950_bstack, rxquantr953_done2494, rx950_pos, rx950_rep
    goto rxquantr953_loop2493
  rxquantr953_done2494:
    nqp_rxpeek $I19, rx950_bstack, rxcap952_fail2492
    inc $I19
    set $I11, rx950_bstack[$I19]
    repr_bind_attr_int rx950_cur, rx950_curclass, "$!pos", rx950_pos
    $P11 = rx950_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx950_pos)
    rx950_cstack = rx950_cur."!cursor_capture"($P11, "op")
    goto rxcap952_done2491
  rxcap952_fail2492:
    goto rx950_fail2484
  rxcap952_done2491:
    nqp_rxmark rx950_bstack, rxquantr954_done2496, rx950_pos, 0
  rxquantr954_loop2495:
    repr_bind_attr_int rx950_cur, rx950_curclass, "$!pos", rx950_pos
    $P11 = rx950_cur."args"()
    repr_get_attr_int $I11, $P11, rx950_curclass, "$!pos"
    lt $I11, 0, rx950_fail2484
    goto rxsubrule955_pass2497
  rxsubrule955_back2498:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx950_curclass, "$!pos"
    lt $I11, 0, rx950_fail2484
  rxsubrule955_pass2497:
    rx950_cstack = rx950_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule955_back2498
    push rx950_bstack, $I11
    push rx950_bstack, 0
    push rx950_bstack, rx950_pos
    elements $I11, rx950_cstack
    push rx950_bstack, $I11
    repr_get_attr_int rx950_pos, $P11, rx950_curclass, "$!pos"
    nqp_rxpeek $I19, rx950_bstack, rxquantr954_done2496
    inc $I19
    inc $I19
    set rx950_rep, rx950_bstack[$I19]
    nqp_rxcommit rx950_bstack, rxquantr954_done2496
    inc rx950_rep
  rxquantr954_done2496:
    rx950_cur."!cursor_pass"(rx950_pos, "term:sym<pir::op>", 'backtrack'=>1)
    .return (rx950_cur)
  rx950_restart2483:
    repr_get_attr_obj rx950_cstack, rx950_cur, rx950_curclass, "$!cstack"
  rx950_fail2484:
    unless rx950_bstack, rx950_done2482
    pop $I19, rx950_bstack
    if_null rx950_cstack, rx950_cstack_done2487
    unless rx950_cstack, rx950_cstack_done2487
    dec $I19
    set $P11, rx950_cstack[$I19]
  rx950_cstack_done2487:
    pop rx950_rep, rx950_bstack
    pop rx950_pos, rx950_bstack
    pop $I19, rx950_bstack
    lt rx950_pos, -1, rx950_done2482
    lt rx950_pos, 0, rx950_fail2484
    eq $I19, 0, rx950_fail2484
    nqp_islist $I20, rx950_cstack
    unless $I20, rx950_jump2485
    elements $I18, rx950_bstack
    le $I18, 0, rx950_cut2486
    dec $I18
    set $I18, rx950_bstack[$I18]
  rx950_cut2486:
    assign rx950_cstack, $I18
  rx950_jump2485:
    jump $I19
  rx950_done2482:
    rx950_cur."!cursor_fail"()
    .return (rx950_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_144_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1231
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx956_tgt
    .local int rx956_pos
    .local int rx956_off
    .local int rx956_eos
    .local int rx956_rep
    .local pmc rx956_cur
    .local pmc rx956_curclass
    .local pmc rx956_bstack
    .local pmc rx956_cstack
    (rx956_cur, rx956_tgt, rx956_pos, rx956_curclass, rx956_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx956_cur
    length rx956_eos, rx956_tgt
    eq $I19, 1, rx956_restart2501
    gt rx956_pos, rx956_eos, rx956_fail2502
    repr_get_attr_int $I11, self, rx956_curclass, "$!from"
    ne $I11, -1, rxscan957_done2508
    goto rxscan957_scan2507
  rxscan957_loop2506:
    inc rx956_pos
    gt rx956_pos, rx956_eos, rx956_fail2502
    repr_bind_attr_int rx956_cur, rx956_curclass, "$!from", rx956_pos
  rxscan957_scan2507:
    nqp_rxmark rx956_bstack, rxscan957_loop2506, rx956_pos, 0
  rxscan957_done2508:
    add $I11, rx956_pos, 12
    gt $I11, rx956_eos, rx956_fail2502
    substr $S10, rx956_tgt, rx956_pos, 12
    ne $S10, ucs4:"pir::const::", rx956_fail2502
    add rx956_pos, 12
    nqp_rxmark rx956_bstack, rxcap958_fail2510, rx956_pos, 0
    nqp_rxmark rx956_bstack, rxquantr959_done2512, -1, 0
  rxquantr959_loop2511:
    ge rx956_pos, rx956_eos, rx956_fail2502
    is_cclass $I11, .CCLASS_WORD, rx956_tgt, rx956_pos
    unless $I11, rx956_fail2502
    add rx956_pos, 1
    nqp_rxpeek $I19, rx956_bstack, rxquantr959_done2512
    inc $I19
    inc $I19
    set rx956_rep, rx956_bstack[$I19]
    nqp_rxcommit rx956_bstack, rxquantr959_done2512
    inc rx956_rep
    nqp_rxmark rx956_bstack, rxquantr959_done2512, rx956_pos, rx956_rep
    goto rxquantr959_loop2511
  rxquantr959_done2512:
    nqp_rxpeek $I19, rx956_bstack, rxcap958_fail2510
    inc $I19
    set $I11, rx956_bstack[$I19]
    repr_bind_attr_int rx956_cur, rx956_curclass, "$!pos", rx956_pos
    $P11 = rx956_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx956_pos)
    rx956_cstack = rx956_cur."!cursor_capture"($P11, "const")
    goto rxcap958_done2509
  rxcap958_fail2510:
    goto rx956_fail2502
  rxcap958_done2509:
    rx956_cur."!cursor_pass"(rx956_pos, "term:sym<pir::const>", 'backtrack'=>1)
    .return (rx956_cur)
  rx956_restart2501:
    repr_get_attr_obj rx956_cstack, rx956_cur, rx956_curclass, "$!cstack"
  rx956_fail2502:
    unless rx956_bstack, rx956_done2500
    pop $I19, rx956_bstack
    if_null rx956_cstack, rx956_cstack_done2505
    unless rx956_cstack, rx956_cstack_done2505
    dec $I19
    set $P11, rx956_cstack[$I19]
  rx956_cstack_done2505:
    pop rx956_rep, rx956_bstack
    pop rx956_pos, rx956_bstack
    pop $I19, rx956_bstack
    lt rx956_pos, -1, rx956_done2500
    lt rx956_pos, 0, rx956_fail2502
    eq $I19, 0, rx956_fail2502
    nqp_islist $I20, rx956_cstack
    unless $I20, rx956_jump2503
    elements $I18, rx956_bstack
    le $I18, 0, rx956_cut2504
    dec $I18
    set $I18, rx956_bstack[$I18]
  rx956_cut2504:
    assign rx956_cstack, $I18
  rx956_jump2503:
    jump $I19
  rx956_done2500:
    rx956_cur."!cursor_fail"()
    .return (rx956_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_145_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1235
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx960_tgt
    .local int rx960_pos
    .local int rx960_off
    .local int rx960_eos
    .local int rx960_rep
    .local pmc rx960_cur
    .local pmc rx960_curclass
    .local pmc rx960_bstack
    .local pmc rx960_cstack
    (rx960_cur, rx960_tgt, rx960_pos, rx960_curclass, rx960_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx960_cur
    length rx960_eos, rx960_tgt
    eq $I19, 1, rx960_restart2515
    gt rx960_pos, rx960_eos, rx960_fail2516
    repr_get_attr_int $I11, self, rx960_curclass, "$!from"
    ne $I11, -1, rxscan961_done2522
    goto rxscan961_scan2521
  rxscan961_loop2520:
    inc rx960_pos
    gt rx960_pos, rx960_eos, rx960_fail2516
    repr_bind_attr_int rx960_cur, rx960_curclass, "$!from", rx960_pos
  rxscan961_scan2521:
    nqp_rxmark rx960_bstack, rxscan961_loop2520, rx960_pos, 0
  rxscan961_done2522:
    add $I11, rx960_pos, 5
    gt $I11, rx960_eos, rx960_fail2516
    substr $S10, rx960_tgt, rx960_pos, 5
    ne $S10, ucs4:"nqp::", rx960_fail2516
    add rx960_pos, 5
    nqp_rxmark rx960_bstack, rxcap962_fail2524, rx960_pos, 0
    nqp_rxmark rx960_bstack, rxquantr963_done2526, -1, 0
  rxquantr963_loop2525:
    ge rx960_pos, rx960_eos, rx960_fail2516
    is_cclass $I11, .CCLASS_WORD, rx960_tgt, rx960_pos
    unless $I11, rx960_fail2516
    add rx960_pos, 1
    nqp_rxpeek $I19, rx960_bstack, rxquantr963_done2526
    inc $I19
    inc $I19
    set rx960_rep, rx960_bstack[$I19]
    nqp_rxcommit rx960_bstack, rxquantr963_done2526
    inc rx960_rep
    nqp_rxmark rx960_bstack, rxquantr963_done2526, rx960_pos, rx960_rep
    goto rxquantr963_loop2525
  rxquantr963_done2526:
    nqp_rxpeek $I19, rx960_bstack, rxcap962_fail2524
    inc $I19
    set $I11, rx960_bstack[$I19]
    repr_bind_attr_int rx960_cur, rx960_curclass, "$!pos", rx960_pos
    $P11 = rx960_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx960_pos)
    rx960_cstack = rx960_cur."!cursor_capture"($P11, "op")
    goto rxcap962_done2523
  rxcap962_fail2524:
    goto rx960_fail2516
  rxcap962_done2523:
    nqp_rxmark rx960_bstack, rxquantr964_done2528, rx960_pos, 0
  rxquantr964_loop2527:
    repr_bind_attr_int rx960_cur, rx960_curclass, "$!pos", rx960_pos
    $P11 = rx960_cur."args"()
    repr_get_attr_int $I11, $P11, rx960_curclass, "$!pos"
    lt $I11, 0, rx960_fail2516
    goto rxsubrule965_pass2529
  rxsubrule965_back2530:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx960_curclass, "$!pos"
    lt $I11, 0, rx960_fail2516
  rxsubrule965_pass2529:
    rx960_cstack = rx960_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule965_back2530
    push rx960_bstack, $I11
    push rx960_bstack, 0
    push rx960_bstack, rx960_pos
    elements $I11, rx960_cstack
    push rx960_bstack, $I11
    repr_get_attr_int rx960_pos, $P11, rx960_curclass, "$!pos"
    nqp_rxpeek $I19, rx960_bstack, rxquantr964_done2528
    inc $I19
    inc $I19
    set rx960_rep, rx960_bstack[$I19]
    nqp_rxcommit rx960_bstack, rxquantr964_done2528
    inc rx960_rep
  rxquantr964_done2528:
    rx960_cur."!cursor_pass"(rx960_pos, "term:sym<nqp::op>", 'backtrack'=>1)
    .return (rx960_cur)
  rx960_restart2515:
    repr_get_attr_obj rx960_cstack, rx960_cur, rx960_curclass, "$!cstack"
  rx960_fail2516:
    unless rx960_bstack, rx960_done2514
    pop $I19, rx960_bstack
    if_null rx960_cstack, rx960_cstack_done2519
    unless rx960_cstack, rx960_cstack_done2519
    dec $I19
    set $P11, rx960_cstack[$I19]
  rx960_cstack_done2519:
    pop rx960_rep, rx960_bstack
    pop rx960_pos, rx960_bstack
    pop $I19, rx960_bstack
    lt rx960_pos, -1, rx960_done2514
    lt rx960_pos, 0, rx960_fail2516
    eq $I19, 0, rx960_fail2516
    nqp_islist $I20, rx960_cstack
    unless $I20, rx960_jump2517
    elements $I18, rx960_bstack
    le $I18, 0, rx960_cut2518
    dec $I18
    set $I18, rx960_bstack[$I18]
  rx960_cut2518:
    assign rx960_cstack, $I18
  rx960_jump2517:
    jump $I19
  rx960_done2514:
    rx960_cur."!cursor_fail"()
    .return (rx960_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_146_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1239
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_409_1360426903.566' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx966_tgt
    .local int rx966_pos
    .local int rx966_off
    .local int rx966_eos
    .local int rx966_rep
    .local pmc rx966_cur
    .local pmc rx966_curclass
    .local pmc rx966_bstack
    .local pmc rx966_cstack
    (rx966_cur, rx966_tgt, rx966_pos, rx966_curclass, rx966_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx966_cur
    length rx966_eos, rx966_tgt
    eq $I19, 1, rx966_restart2533
    gt rx966_pos, rx966_eos, rx966_fail2534
    repr_get_attr_int $I11, self, rx966_curclass, "$!from"
    ne $I11, -1, rxscan967_done2540
    goto rxscan967_scan2539
  rxscan967_loop2538:
    inc rx966_pos
    gt rx966_pos, rx966_eos, rx966_fail2534
    repr_bind_attr_int rx966_cur, rx966_curclass, "$!from", rx966_pos
  rxscan967_scan2539:
    nqp_rxmark rx966_bstack, rxscan967_loop2538, rx966_pos, 0
  rxscan967_done2540:
    add $I11, rx966_pos, 3
    gt $I11, rx966_eos, rx966_fail2534
    substr $S10, rx966_tgt, rx966_pos, 3
    ne $S10, ucs4:"{*}", rx966_fail2534
    add rx966_pos, 3
    repr_bind_attr_int rx966_cur, rx966_curclass, "$!pos", rx966_pos
    $P11 = rx966_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx966_curclass, "$!pos"
    lt $I11, 0, rx966_fail2534
  alt968_02542:
    nqp_rxmark rx966_bstack, alt968_12546, rx966_pos, 0
    repr_bind_attr_int rx966_cur, rx966_curclass, "$!pos", rx966_pos
    store_lex unicode:"$\x{a2}", rx966_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_409_1360426903.566' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx966_fail2534
    goto alt968_end2541
  alt968_12546:
    repr_bind_attr_int rx966_cur, rx966_curclass, "$!pos", rx966_pos
    $P11 = rx966_cur."panic"("{*} may only appear in proto")
    repr_get_attr_int $I11, $P11, rx966_curclass, "$!pos"
    lt $I11, 0, rx966_fail2534
    repr_get_attr_int rx966_pos, $P11, rx966_curclass, "$!pos"
  alt968_end2541:
    rx966_cur."!cursor_pass"(rx966_pos, "term:sym<onlystar>", 'backtrack'=>1)
    .return (rx966_cur)
  rx966_restart2533:
    repr_get_attr_obj rx966_cstack, rx966_cur, rx966_curclass, "$!cstack"
  rx966_fail2534:
    unless rx966_bstack, rx966_done2532
    pop $I19, rx966_bstack
    if_null rx966_cstack, rx966_cstack_done2537
    unless rx966_cstack, rx966_cstack_done2537
    dec $I19
    set $P11, rx966_cstack[$I19]
  rx966_cstack_done2537:
    pop rx966_rep, rx966_bstack
    pop rx966_pos, rx966_bstack
    pop $I19, rx966_bstack
    lt rx966_pos, -1, rx966_done2532
    lt rx966_pos, 0, rx966_fail2534
    eq $I19, 0, rx966_fail2534
    nqp_islist $I20, rx966_cstack
    unless $I20, rx966_jump2535
    elements $I18, rx966_bstack
    le $I18, 0, rx966_cut2536
    dec $I18
    set $I18, rx966_bstack[$I18]
  rx966_cut2536:
    assign rx966_cstack, $I18
  rx966_jump2535:
    jump $I19
  rx966_done2532:
    rx966_cur."!cursor_fail"()
    .return (rx966_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_409_1360426903.566") :anon :lex :outer("cuid_146_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1241

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback2543
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback2544
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback2544:
    unless_null $P5002, vivi_9692545
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_9692545:
    set $P5001, $P5002
  fallback2543:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_147_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1244
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx971_tgt
    .local int rx971_pos
    .local int rx971_off
    .local int rx971_eos
    .local int rx971_rep
    .local pmc rx971_cur
    .local pmc rx971_curclass
    .local pmc rx971_bstack
    .local pmc rx971_cstack
    (rx971_cur, rx971_tgt, rx971_pos, rx971_curclass, rx971_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx971_cur
    length rx971_eos, rx971_tgt
    eq $I19, 1, rx971_restart2550
    gt rx971_pos, rx971_eos, rx971_fail2551
    repr_get_attr_int $I11, self, rx971_curclass, "$!from"
    ne $I11, -1, rxscan972_done2557
    goto rxscan972_scan2556
  rxscan972_loop2555:
    inc rx971_pos
    gt rx971_pos, rx971_eos, rx971_fail2551
    repr_bind_attr_int rx971_cur, rx971_curclass, "$!from", rx971_pos
  rxscan972_scan2556:
    nqp_rxmark rx971_bstack, rxscan972_loop2555, rx971_pos, 0
  rxscan972_done2557:
    add $I11, rx971_pos, 1
    gt $I11, rx971_eos, rx971_fail2551
    substr $S10, rx971_tgt, rx971_pos, 1
    ne $S10, ucs4:"(", rx971_fail2551
    add rx971_pos, 1
    repr_bind_attr_int rx971_cur, rx971_curclass, "$!pos", rx971_pos
    $P11 = rx971_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx971_curclass, "$!pos"
    lt $I11, 0, rx971_fail2551
    nqp_rxmark rx971_bstack, rxsubrule973_pass2558, -1, 0
  rxsubrule973_pass2558:
    rx971_cstack = rx971_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx971_pos, $P11, rx971_curclass, "$!pos"
    add $I11, rx971_pos, 1
    gt $I11, rx971_eos, rx971_fail2551
    substr $S10, rx971_tgt, rx971_pos, 1
    ne $S10, ucs4:")", rx971_fail2551
    add rx971_pos, 1
    rx971_cur."!cursor_pass"(rx971_pos, "args", 'backtrack'=>1)
    .return (rx971_cur)
  rx971_restart2550:
    repr_get_attr_obj rx971_cstack, rx971_cur, rx971_curclass, "$!cstack"
  rx971_fail2551:
    unless rx971_bstack, rx971_done2549
    pop $I19, rx971_bstack
    if_null rx971_cstack, rx971_cstack_done2554
    unless rx971_cstack, rx971_cstack_done2554
    dec $I19
    set $P11, rx971_cstack[$I19]
  rx971_cstack_done2554:
    pop rx971_rep, rx971_bstack
    pop rx971_pos, rx971_bstack
    pop $I19, rx971_bstack
    lt rx971_pos, -1, rx971_done2549
    lt rx971_pos, 0, rx971_fail2551
    eq $I19, 0, rx971_fail2551
    nqp_islist $I20, rx971_cstack
    unless $I20, rx971_jump2552
    elements $I18, rx971_bstack
    le $I18, 0, rx971_cut2553
    dec $I18
    set $I18, rx971_bstack[$I18]
  rx971_cut2553:
    assign rx971_cstack, $I18
  rx971_jump2552:
    jump $I19
  rx971_done2549:
    rx971_cur."!cursor_fail"()
    .return (rx971_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_148_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1248
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx974_tgt
    .local int rx974_pos
    .local int rx974_off
    .local int rx974_eos
    .local int rx974_rep
    .local pmc rx974_cur
    .local pmc rx974_curclass
    .local pmc rx974_bstack
    .local pmc rx974_cstack
    (rx974_cur, rx974_tgt, rx974_pos, rx974_curclass, rx974_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx974_cur
    length rx974_eos, rx974_tgt
    eq $I19, 1, rx974_restart2561
    gt rx974_pos, rx974_eos, rx974_fail2562
    repr_get_attr_int $I11, self, rx974_curclass, "$!from"
    ne $I11, -1, rxscan975_done2568
    goto rxscan975_scan2567
  rxscan975_loop2566:
    inc rx974_pos
    gt rx974_pos, rx974_eos, rx974_fail2562
    repr_bind_attr_int rx974_cur, rx974_curclass, "$!from", rx974_pos
  rxscan975_scan2567:
    nqp_rxmark rx974_bstack, rxscan975_loop2566, rx974_pos, 0
  rxscan975_done2568:
    repr_bind_attr_int rx974_cur, rx974_curclass, "$!pos", rx974_pos
    $P11 = rx974_cur."ws"()
    repr_get_attr_int $I11, $P11, rx974_curclass, "$!pos"
    lt $I11, 0, rx974_fail2562
    repr_get_attr_int rx974_pos, $P11, rx974_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt977_02571
    nqp_push_label $P11, alt977_12573
    nqp_rxmark rx974_bstack, alt977_end2570, -1, 0
    rx974_cur."!alt"(rx974_pos, "alt_nfa__36_1360426906.062", $P11)
    goto rx974_fail2562
  alt977_02571:
    repr_bind_attr_int rx974_cur, rx974_curclass, "$!pos", rx974_pos
    $P11 = rx974_cur."EXPR"("f=")
    repr_get_attr_int $I11, $P11, rx974_curclass, "$!pos"
    lt $I11, 0, rx974_fail2562
    nqp_rxmark rx974_bstack, rxsubrule978_pass2572, -1, 0
  rxsubrule978_pass2572:
    rx974_cstack = rx974_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx974_pos, $P11, rx974_curclass, "$!pos"
    goto alt977_end2570
  alt977_12573:
    goto alt977_end2570
  alt977_end2570:
    nqp_rxcommit rx974_bstack, alt977_end2570
    rx974_cur."!cursor_pass"(rx974_pos, "arglist", 'backtrack'=>1)
    .return (rx974_cur)
  rx974_restart2561:
    repr_get_attr_obj rx974_cstack, rx974_cur, rx974_curclass, "$!cstack"
  rx974_fail2562:
    unless rx974_bstack, rx974_done2560
    pop $I19, rx974_bstack
    if_null rx974_cstack, rx974_cstack_done2565
    unless rx974_cstack, rx974_cstack_done2565
    dec $I19
    set $P11, rx974_cstack[$I19]
  rx974_cstack_done2565:
    pop rx974_rep, rx974_bstack
    pop rx974_pos, rx974_bstack
    pop $I19, rx974_bstack
    lt rx974_pos, -1, rx974_done2560
    lt rx974_pos, 0, rx974_fail2562
    eq $I19, 0, rx974_fail2562
    nqp_islist $I20, rx974_cstack
    unless $I20, rx974_jump2563
    elements $I18, rx974_bstack
    le $I18, 0, rx974_cut2564
    dec $I18
    set $I18, rx974_bstack[$I18]
  rx974_cut2564:
    assign rx974_cstack, $I18
  rx974_jump2563:
    jump $I19
  rx974_done2560:
    rx974_cur."!cursor_fail"()
    .return (rx974_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_149_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1257
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx980_tgt
    .local int rx980_pos
    .local int rx980_off
    .local int rx980_eos
    .local int rx980_rep
    .local pmc rx980_cur
    .local pmc rx980_curclass
    .local pmc rx980_bstack
    .local pmc rx980_cstack
    (rx980_cur, rx980_tgt, rx980_pos, rx980_curclass, rx980_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx980_cur
    length rx980_eos, rx980_tgt
    eq $I19, 1, rx980_restart2577
    gt rx980_pos, rx980_eos, rx980_fail2578
    repr_get_attr_int $I11, self, rx980_curclass, "$!from"
    ne $I11, -1, rxscan981_done2584
    goto rxscan981_scan2583
  rxscan981_loop2582:
    inc rx980_pos
    gt rx980_pos, rx980_eos, rx980_fail2578
    repr_bind_attr_int rx980_cur, rx980_curclass, "$!from", rx980_pos
  rxscan981_scan2583:
    nqp_rxmark rx980_bstack, rxscan981_loop2582, rx980_pos, 0
  rxscan981_done2584:
    repr_bind_attr_int rx980_cur, rx980_curclass, "$!pos", rx980_pos
    $P11 = rx980_cur."value"()
    repr_get_attr_int $I11, $P11, rx980_curclass, "$!pos"
    lt $I11, 0, rx980_fail2578
    nqp_rxmark rx980_bstack, rxsubrule982_pass2585, -1, 0
  rxsubrule982_pass2585:
    rx980_cstack = rx980_cur."!cursor_capture"($P11, "value")
    repr_get_attr_int rx980_pos, $P11, rx980_curclass, "$!pos"
    rx980_cur."!cursor_pass"(rx980_pos, "term:sym<value>", 'backtrack'=>1)
    .return (rx980_cur)
  rx980_restart2577:
    repr_get_attr_obj rx980_cstack, rx980_cur, rx980_curclass, "$!cstack"
  rx980_fail2578:
    unless rx980_bstack, rx980_done2576
    pop $I19, rx980_bstack
    if_null rx980_cstack, rx980_cstack_done2581
    unless rx980_cstack, rx980_cstack_done2581
    dec $I19
    set $P11, rx980_cstack[$I19]
  rx980_cstack_done2581:
    pop rx980_rep, rx980_bstack
    pop rx980_pos, rx980_bstack
    pop $I19, rx980_bstack
    lt rx980_pos, -1, rx980_done2576
    lt rx980_pos, 0, rx980_fail2578
    eq $I19, 0, rx980_fail2578
    nqp_islist $I20, rx980_cstack
    unless $I20, rx980_jump2579
    elements $I18, rx980_bstack
    le $I18, 0, rx980_cut2580
    dec $I18
    set $I18, rx980_bstack[$I18]
  rx980_cut2580:
    assign rx980_cstack, $I18
  rx980_jump2579:
    jump $I19
  rx980_done2576:
    rx980_cur."!cursor_fail"()
    .return (rx980_cur) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_150_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1259
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx983_tgt
    .local int rx983_pos
    .local int rx983_off
    .local int rx983_eos
    .local int rx983_rep
    .local pmc rx983_cur
    .local pmc rx983_curclass
    .local pmc rx983_bstack
    .local pmc rx983_cstack
    (rx983_cur, rx983_tgt, rx983_pos, rx983_curclass, rx983_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx983_cur
    length rx983_eos, rx983_tgt
    eq $I19, 1, rx983_restart2588
    gt rx983_pos, rx983_eos, rx983_fail2589
    repr_get_attr_int $I11, self, rx983_curclass, "$!from"
    ne $I11, -1, rxscan984_done2595
    goto rxscan984_scan2594
  rxscan984_loop2593:
    inc rx983_pos
    gt rx983_pos, rx983_eos, rx983_fail2589
    repr_bind_attr_int rx983_cur, rx983_curclass, "$!from", rx983_pos
  rxscan984_scan2594:
    nqp_rxmark rx983_bstack, rxscan984_loop2593, rx983_pos, 0
  rxscan984_done2595:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt985_02597
    nqp_push_label $P11, alt985_12599
    nqp_rxmark rx983_bstack, alt985_end2596, -1, 0
    rx983_cur."!alt"(rx983_pos, "alt_nfa__37_1360426906.071", $P11)
    goto rx983_fail2589
  alt985_02597:
    repr_bind_attr_int rx983_cur, rx983_curclass, "$!pos", rx983_pos
    $P11 = rx983_cur."quote"()
    repr_get_attr_int $I11, $P11, rx983_curclass, "$!pos"
    lt $I11, 0, rx983_fail2589
    nqp_rxmark rx983_bstack, rxsubrule986_pass2598, -1, 0
  rxsubrule986_pass2598:
    rx983_cstack = rx983_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx983_pos, $P11, rx983_curclass, "$!pos"
    goto alt985_end2596
  alt985_12599:
    repr_bind_attr_int rx983_cur, rx983_curclass, "$!pos", rx983_pos
    $P11 = rx983_cur."number"()
    repr_get_attr_int $I11, $P11, rx983_curclass, "$!pos"
    lt $I11, 0, rx983_fail2589
    nqp_rxmark rx983_bstack, rxsubrule987_pass2600, -1, 0
  rxsubrule987_pass2600:
    rx983_cstack = rx983_cur."!cursor_capture"($P11, "number")
    repr_get_attr_int rx983_pos, $P11, rx983_curclass, "$!pos"
    goto alt985_end2596
  alt985_end2596:
    rx983_cur."!cursor_pass"(rx983_pos, "value", 'backtrack'=>1)
    .return (rx983_cur)
  rx983_restart2588:
    repr_get_attr_obj rx983_cstack, rx983_cur, rx983_curclass, "$!cstack"
  rx983_fail2589:
    unless rx983_bstack, rx983_done2587
    pop $I19, rx983_bstack
    if_null rx983_cstack, rx983_cstack_done2592
    unless rx983_cstack, rx983_cstack_done2592
    dec $I19
    set $P11, rx983_cstack[$I19]
  rx983_cstack_done2592:
    pop rx983_rep, rx983_bstack
    pop rx983_pos, rx983_bstack
    pop $I19, rx983_bstack
    lt rx983_pos, -1, rx983_done2587
    lt rx983_pos, 0, rx983_fail2589
    eq $I19, 0, rx983_fail2589
    nqp_islist $I20, rx983_cstack
    unless $I20, rx983_jump2590
    elements $I18, rx983_bstack
    le $I18, 0, rx983_cut2591
    dec $I18
    set $I18, rx983_bstack[$I18]
  rx983_cut2591:
    assign rx983_cstack, $I18
  rx983_jump2590:
    jump $I19
  rx983_done2587:
    rx983_cur."!cursor_fail"()
    .return (rx983_cur) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_151_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1264
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx988_tgt
    .local int rx988_pos
    .local int rx988_off
    .local int rx988_eos
    .local int rx988_rep
    .local pmc rx988_cur
    .local pmc rx988_curclass
    .local pmc rx988_bstack
    .local pmc rx988_cstack
    (rx988_cur, rx988_tgt, rx988_pos, rx988_curclass, rx988_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx988_cur
    length rx988_eos, rx988_tgt
    eq $I19, 1, rx988_restart2603
    gt rx988_pos, rx988_eos, rx988_fail2604
    repr_get_attr_int $I11, self, rx988_curclass, "$!from"
    ne $I11, -1, rxscan989_done2610
    goto rxscan989_scan2609
  rxscan989_loop2608:
    inc rx988_pos
    gt rx988_pos, rx988_eos, rx988_fail2604
    repr_bind_attr_int rx988_cur, rx988_curclass, "$!from", rx988_pos
  rxscan989_scan2609:
    nqp_rxmark rx988_bstack, rxscan989_loop2608, rx988_pos, 0
  rxscan989_done2610:
    nqp_rxmark rx988_bstack, rxcap990_fail2612, rx988_pos, 0
    nqp_rxmark rx988_bstack, rxquantr991_done2614, rx988_pos, 0
  rxquantr991_loop2613:
  alt992_02616:
    nqp_rxmark rx988_bstack, alt992_12617, rx988_pos, 0
    add $I11, rx988_pos, 1
    gt $I11, rx988_eos, rx988_fail2604
    substr $S10, rx988_tgt, rx988_pos, 1
    ne $S10, ucs4:"-", rx988_fail2604
    add rx988_pos, 1
    goto alt992_end2615
  alt992_12617:
    ge rx988_pos, rx988_eos, rx988_fail2604
    substr $S11, rx988_tgt, rx988_pos, 1
    index $I11, ucs4:"+", $S11
    lt $I11, 0, rx988_fail2604
    inc rx988_pos
  alt992_end2615:
    nqp_rxpeek $I19, rx988_bstack, rxquantr991_done2614
    inc $I19
    inc $I19
    set rx988_rep, rx988_bstack[$I19]
    nqp_rxcommit rx988_bstack, rxquantr991_done2614
    inc rx988_rep
  rxquantr991_done2614:
    nqp_rxpeek $I19, rx988_bstack, rxcap990_fail2612
    inc $I19
    set $I11, rx988_bstack[$I19]
    repr_bind_attr_int rx988_cur, rx988_curclass, "$!pos", rx988_pos
    $P11 = rx988_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx988_pos)
    rx988_cstack = rx988_cur."!cursor_capture"($P11, "sign")
    goto rxcap990_done2611
  rxcap990_fail2612:
    goto rx988_fail2604
  rxcap990_done2611:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt993_02619
    nqp_push_label $P11, alt993_12621
    nqp_rxmark rx988_bstack, alt993_end2618, -1, 0
    rx988_cur."!alt"(rx988_pos, "alt_nfa__38_1360426906.08", $P11)
    goto rx988_fail2604
  alt993_02619:
    repr_bind_attr_int rx988_cur, rx988_curclass, "$!pos", rx988_pos
    $P11 = rx988_cur."dec_number"()
    repr_get_attr_int $I11, $P11, rx988_curclass, "$!pos"
    lt $I11, 0, rx988_fail2604
    nqp_rxmark rx988_bstack, rxsubrule994_pass2620, -1, 0
  rxsubrule994_pass2620:
    rx988_cstack = rx988_cur."!cursor_capture"($P11, "dec_number")
    repr_get_attr_int rx988_pos, $P11, rx988_curclass, "$!pos"
    goto alt993_end2618
  alt993_12621:
    repr_bind_attr_int rx988_cur, rx988_curclass, "$!pos", rx988_pos
    $P11 = rx988_cur."integer"()
    repr_get_attr_int $I11, $P11, rx988_curclass, "$!pos"
    lt $I11, 0, rx988_fail2604
    nqp_rxmark rx988_bstack, rxsubrule995_pass2622, -1, 0
  rxsubrule995_pass2622:
    rx988_cstack = rx988_cur."!cursor_capture"($P11, "integer")
    repr_get_attr_int rx988_pos, $P11, rx988_curclass, "$!pos"
    goto alt993_end2618
  alt993_end2618:
    nqp_rxcommit rx988_bstack, alt993_end2618
    rx988_cur."!cursor_pass"(rx988_pos, "number", 'backtrack'=>1)
    .return (rx988_cur)
  rx988_restart2603:
    repr_get_attr_obj rx988_cstack, rx988_cur, rx988_curclass, "$!cstack"
  rx988_fail2604:
    unless rx988_bstack, rx988_done2602
    pop $I19, rx988_bstack
    if_null rx988_cstack, rx988_cstack_done2607
    unless rx988_cstack, rx988_cstack_done2607
    dec $I19
    set $P11, rx988_cstack[$I19]
  rx988_cstack_done2607:
    pop rx988_rep, rx988_bstack
    pop rx988_pos, rx988_bstack
    pop $I19, rx988_bstack
    lt rx988_pos, -1, rx988_done2602
    lt rx988_pos, 0, rx988_fail2604
    eq $I19, 0, rx988_fail2604
    nqp_islist $I20, rx988_cstack
    unless $I20, rx988_jump2605
    elements $I18, rx988_bstack
    le $I18, 0, rx988_cut2606
    dec $I18
    set $I18, rx988_bstack[$I18]
  rx988_cut2606:
    assign rx988_cstack, $I18
  rx988_jump2605:
    jump $I19
  rx988_done2602:
    rx988_cur."!cursor_fail"()
    .return (rx988_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote" :subid("cuid_152_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1269
    .param pmc self 
    $P5001 = self."!protoregex"("quote")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_153_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1270
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx996_tgt
    .local int rx996_pos
    .local int rx996_off
    .local int rx996_eos
    .local int rx996_rep
    .local pmc rx996_cur
    .local pmc rx996_curclass
    .local pmc rx996_bstack
    .local pmc rx996_cstack
    (rx996_cur, rx996_tgt, rx996_pos, rx996_curclass, rx996_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx996_cur
    length rx996_eos, rx996_tgt
    eq $I19, 1, rx996_restart2625
    gt rx996_pos, rx996_eos, rx996_fail2626
    repr_get_attr_int $I11, self, rx996_curclass, "$!from"
    ne $I11, -1, rxscan997_done2632
    goto rxscan997_scan2631
  rxscan997_loop2630:
    inc rx996_pos
    gt rx996_pos, rx996_eos, rx996_fail2626
    repr_bind_attr_int rx996_cur, rx996_curclass, "$!from", rx996_pos
  rxscan997_scan2631:
    nqp_rxmark rx996_bstack, rxscan997_loop2630, rx996_pos, 0
  rxscan997_done2632:
    ge rx996_pos, rx996_eos, rx996_fail2626
    substr $S11, rx996_tgt, rx996_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx996_fail2626
    repr_bind_attr_int rx996_cur, rx996_curclass, "$!pos", rx996_pos
    $P11 = rx996_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx996_curclass, "$!pos"
    lt $I11, 0, rx996_fail2626
    nqp_rxmark rx996_bstack, rxsubrule998_pass2633, -1, 0
  rxsubrule998_pass2633:
    rx996_cstack = rx996_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx996_pos, $P11, rx996_curclass, "$!pos"
    rx996_cur."!cursor_pass"(rx996_pos, "quote:sym<apos>", 'backtrack'=>1)
    .return (rx996_cur)
  rx996_restart2625:
    repr_get_attr_obj rx996_cstack, rx996_cur, rx996_curclass, "$!cstack"
  rx996_fail2626:
    unless rx996_bstack, rx996_done2624
    pop $I19, rx996_bstack
    if_null rx996_cstack, rx996_cstack_done2629
    unless rx996_cstack, rx996_cstack_done2629
    dec $I19
    set $P11, rx996_cstack[$I19]
  rx996_cstack_done2629:
    pop rx996_rep, rx996_bstack
    pop rx996_pos, rx996_bstack
    pop $I19, rx996_bstack
    lt rx996_pos, -1, rx996_done2624
    lt rx996_pos, 0, rx996_fail2626
    eq $I19, 0, rx996_fail2626
    nqp_islist $I20, rx996_cstack
    unless $I20, rx996_jump2627
    elements $I18, rx996_bstack
    le $I18, 0, rx996_cut2628
    dec $I18
    set $I18, rx996_bstack[$I18]
  rx996_cut2628:
    assign rx996_cstack, $I18
  rx996_jump2627:
    jump $I19
  rx996_done2624:
    rx996_cur."!cursor_fail"()
    .return (rx996_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_154_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1271
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx999_tgt
    .local int rx999_pos
    .local int rx999_off
    .local int rx999_eos
    .local int rx999_rep
    .local pmc rx999_cur
    .local pmc rx999_curclass
    .local pmc rx999_bstack
    .local pmc rx999_cstack
    (rx999_cur, rx999_tgt, rx999_pos, rx999_curclass, rx999_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx999_cur
    length rx999_eos, rx999_tgt
    eq $I19, 1, rx999_restart2636
    gt rx999_pos, rx999_eos, rx999_fail2637
    repr_get_attr_int $I11, self, rx999_curclass, "$!from"
    ne $I11, -1, rxscan1000_done2643
    goto rxscan1000_scan2642
  rxscan1000_loop2641:
    inc rx999_pos
    gt rx999_pos, rx999_eos, rx999_fail2637
    repr_bind_attr_int rx999_cur, rx999_curclass, "$!from", rx999_pos
  rxscan1000_scan2642:
    nqp_rxmark rx999_bstack, rxscan1000_loop2641, rx999_pos, 0
  rxscan1000_done2643:
    ge rx999_pos, rx999_eos, rx999_fail2637
    substr $S11, rx999_tgt, rx999_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx999_fail2637
    repr_bind_attr_int rx999_cur, rx999_curclass, "$!pos", rx999_pos
    $P11 = rx999_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx999_curclass, "$!pos"
    lt $I11, 0, rx999_fail2637
    nqp_rxmark rx999_bstack, rxsubrule1001_pass2644, -1, 0
  rxsubrule1001_pass2644:
    rx999_cstack = rx999_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx999_pos, $P11, rx999_curclass, "$!pos"
    rx999_cur."!cursor_pass"(rx999_pos, "quote:sym<dblq>", 'backtrack'=>1)
    .return (rx999_cur)
  rx999_restart2636:
    repr_get_attr_obj rx999_cstack, rx999_cur, rx999_curclass, "$!cstack"
  rx999_fail2637:
    unless rx999_bstack, rx999_done2635
    pop $I19, rx999_bstack
    if_null rx999_cstack, rx999_cstack_done2640
    unless rx999_cstack, rx999_cstack_done2640
    dec $I19
    set $P11, rx999_cstack[$I19]
  rx999_cstack_done2640:
    pop rx999_rep, rx999_bstack
    pop rx999_pos, rx999_bstack
    pop $I19, rx999_bstack
    lt rx999_pos, -1, rx999_done2635
    lt rx999_pos, 0, rx999_fail2637
    eq $I19, 0, rx999_fail2637
    nqp_islist $I20, rx999_cstack
    unless $I20, rx999_jump2638
    elements $I18, rx999_bstack
    le $I18, 0, rx999_cut2639
    dec $I18
    set $I18, rx999_bstack[$I18]
  rx999_cut2639:
    assign rx999_cstack, $I18
  rx999_jump2638:
    jump $I19
  rx999_done2635:
    rx999_cur."!cursor_fail"()
    .return (rx999_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_155_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1272
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1002_tgt
    .local int rx1002_pos
    .local int rx1002_off
    .local int rx1002_eos
    .local int rx1002_rep
    .local pmc rx1002_cur
    .local pmc rx1002_curclass
    .local pmc rx1002_bstack
    .local pmc rx1002_cstack
    (rx1002_cur, rx1002_tgt, rx1002_pos, rx1002_curclass, rx1002_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1002_cur
    length rx1002_eos, rx1002_tgt
    eq $I19, 1, rx1002_restart2647
    gt rx1002_pos, rx1002_eos, rx1002_fail2648
    repr_get_attr_int $I11, self, rx1002_curclass, "$!from"
    ne $I11, -1, rxscan1003_done2654
    goto rxscan1003_scan2653
  rxscan1003_loop2652:
    inc rx1002_pos
    gt rx1002_pos, rx1002_eos, rx1002_fail2648
    repr_bind_attr_int rx1002_cur, rx1002_curclass, "$!from", rx1002_pos
  rxscan1003_scan2653:
    nqp_rxmark rx1002_bstack, rxscan1003_loop2652, rx1002_pos, 0
  rxscan1003_done2654:
    nqp_rxmark rx1002_bstack, rxcap1004_fail2656, rx1002_pos, 0
    add $I11, rx1002_pos, 1
    gt $I11, rx1002_eos, rx1002_fail2648
    substr $S10, rx1002_tgt, rx1002_pos, 1
    ne $S10, ucs4:"q", rx1002_fail2648
    add rx1002_pos, 1
    nqp_rxpeek $I19, rx1002_bstack, rxcap1004_fail2656
    inc $I19
    set $I11, rx1002_bstack[$I19]
    repr_bind_attr_int rx1002_cur, rx1002_curclass, "$!pos", rx1002_pos
    $P11 = rx1002_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1002_pos)
    rx1002_cstack = rx1002_cur."!cursor_capture"($P11, "sym")
    goto rxcap1004_done2655
  rxcap1004_fail2656:
    goto rx1002_fail2648
  rxcap1004_done2655:
    le rx1002_pos, 0, rx1002_fail2648
    is_cclass $I11, .CCLASS_WORD, rx1002_tgt, rx1002_pos
    if $I11, rx1002_fail2648
    sub $I11, rx1002_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx1002_tgt, $I11
    unless $I11, rx1002_fail2648
    ge rx1002_pos, rx1002_eos, rx1002_fail2648
    substr $S11, rx1002_tgt, rx1002_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx1002_fail2648
    repr_bind_attr_int rx1002_cur, rx1002_curclass, "$!pos", rx1002_pos
    $P11 = rx1002_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1002_curclass, "$!pos"
    lt $I11, 0, rx1002_fail2648
    repr_get_attr_int rx1002_pos, $P11, rx1002_curclass, "$!pos"
    repr_bind_attr_int rx1002_cur, rx1002_curclass, "$!pos", rx1002_pos
    $P11 = rx1002_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx1002_curclass, "$!pos"
    lt $I11, 0, rx1002_fail2648
    nqp_rxmark rx1002_bstack, rxsubrule1007_pass2659, -1, 0
  rxsubrule1007_pass2659:
    rx1002_cstack = rx1002_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1002_pos, $P11, rx1002_curclass, "$!pos"
    rx1002_cur."!cursor_pass"(rx1002_pos, "quote:sym<q>", 'backtrack'=>1)
    .return (rx1002_cur)
  rx1002_restart2647:
    repr_get_attr_obj rx1002_cstack, rx1002_cur, rx1002_curclass, "$!cstack"
  rx1002_fail2648:
    unless rx1002_bstack, rx1002_done2646
    pop $I19, rx1002_bstack
    if_null rx1002_cstack, rx1002_cstack_done2651
    unless rx1002_cstack, rx1002_cstack_done2651
    dec $I19
    set $P11, rx1002_cstack[$I19]
  rx1002_cstack_done2651:
    pop rx1002_rep, rx1002_bstack
    pop rx1002_pos, rx1002_bstack
    pop $I19, rx1002_bstack
    lt rx1002_pos, -1, rx1002_done2646
    lt rx1002_pos, 0, rx1002_fail2648
    eq $I19, 0, rx1002_fail2648
    nqp_islist $I20, rx1002_cstack
    unless $I20, rx1002_jump2649
    elements $I18, rx1002_bstack
    le $I18, 0, rx1002_cut2650
    dec $I18
    set $I18, rx1002_bstack[$I18]
  rx1002_cut2650:
    assign rx1002_cstack, $I18
  rx1002_jump2649:
    jump $I19
  rx1002_done2646:
    rx1002_cur."!cursor_fail"()
    .return (rx1002_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_156_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1273
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1008_tgt
    .local int rx1008_pos
    .local int rx1008_off
    .local int rx1008_eos
    .local int rx1008_rep
    .local pmc rx1008_cur
    .local pmc rx1008_curclass
    .local pmc rx1008_bstack
    .local pmc rx1008_cstack
    (rx1008_cur, rx1008_tgt, rx1008_pos, rx1008_curclass, rx1008_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1008_cur
    length rx1008_eos, rx1008_tgt
    eq $I19, 1, rx1008_restart2662
    gt rx1008_pos, rx1008_eos, rx1008_fail2663
    repr_get_attr_int $I11, self, rx1008_curclass, "$!from"
    ne $I11, -1, rxscan1009_done2669
    goto rxscan1009_scan2668
  rxscan1009_loop2667:
    inc rx1008_pos
    gt rx1008_pos, rx1008_eos, rx1008_fail2663
    repr_bind_attr_int rx1008_cur, rx1008_curclass, "$!from", rx1008_pos
  rxscan1009_scan2668:
    nqp_rxmark rx1008_bstack, rxscan1009_loop2667, rx1008_pos, 0
  rxscan1009_done2669:
    nqp_rxmark rx1008_bstack, rxcap1010_fail2671, rx1008_pos, 0
    add $I11, rx1008_pos, 2
    gt $I11, rx1008_eos, rx1008_fail2663
    substr $S10, rx1008_tgt, rx1008_pos, 2
    ne $S10, ucs4:"qq", rx1008_fail2663
    add rx1008_pos, 2
    nqp_rxpeek $I19, rx1008_bstack, rxcap1010_fail2671
    inc $I19
    set $I11, rx1008_bstack[$I19]
    repr_bind_attr_int rx1008_cur, rx1008_curclass, "$!pos", rx1008_pos
    $P11 = rx1008_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1008_pos)
    rx1008_cstack = rx1008_cur."!cursor_capture"($P11, "sym")
    goto rxcap1010_done2670
  rxcap1010_fail2671:
    goto rx1008_fail2663
  rxcap1010_done2670:
    le rx1008_pos, 0, rx1008_fail2663
    is_cclass $I11, .CCLASS_WORD, rx1008_tgt, rx1008_pos
    if $I11, rx1008_fail2663
    sub $I11, rx1008_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx1008_tgt, $I11
    unless $I11, rx1008_fail2663
    ge rx1008_pos, rx1008_eos, rx1008_fail2663
    substr $S11, rx1008_tgt, rx1008_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx1008_fail2663
    repr_bind_attr_int rx1008_cur, rx1008_curclass, "$!pos", rx1008_pos
    $P11 = rx1008_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1008_curclass, "$!pos"
    lt $I11, 0, rx1008_fail2663
    repr_get_attr_int rx1008_pos, $P11, rx1008_curclass, "$!pos"
    repr_bind_attr_int rx1008_cur, rx1008_curclass, "$!pos", rx1008_pos
    $P11 = rx1008_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx1008_curclass, "$!pos"
    lt $I11, 0, rx1008_fail2663
    nqp_rxmark rx1008_bstack, rxsubrule1013_pass2674, -1, 0
  rxsubrule1013_pass2674:
    rx1008_cstack = rx1008_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1008_pos, $P11, rx1008_curclass, "$!pos"
    rx1008_cur."!cursor_pass"(rx1008_pos, "quote:sym<qq>", 'backtrack'=>1)
    .return (rx1008_cur)
  rx1008_restart2662:
    repr_get_attr_obj rx1008_cstack, rx1008_cur, rx1008_curclass, "$!cstack"
  rx1008_fail2663:
    unless rx1008_bstack, rx1008_done2661
    pop $I19, rx1008_bstack
    if_null rx1008_cstack, rx1008_cstack_done2666
    unless rx1008_cstack, rx1008_cstack_done2666
    dec $I19
    set $P11, rx1008_cstack[$I19]
  rx1008_cstack_done2666:
    pop rx1008_rep, rx1008_bstack
    pop rx1008_pos, rx1008_bstack
    pop $I19, rx1008_bstack
    lt rx1008_pos, -1, rx1008_done2661
    lt rx1008_pos, 0, rx1008_fail2663
    eq $I19, 0, rx1008_fail2663
    nqp_islist $I20, rx1008_cstack
    unless $I20, rx1008_jump2664
    elements $I18, rx1008_bstack
    le $I18, 0, rx1008_cut2665
    dec $I18
    set $I18, rx1008_bstack[$I18]
  rx1008_cut2665:
    assign rx1008_cstack, $I18
  rx1008_jump2664:
    jump $I19
  rx1008_done2661:
    rx1008_cur."!cursor_fail"()
    .return (rx1008_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_157_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1274
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1014_tgt
    .local int rx1014_pos
    .local int rx1014_off
    .local int rx1014_eos
    .local int rx1014_rep
    .local pmc rx1014_cur
    .local pmc rx1014_curclass
    .local pmc rx1014_bstack
    .local pmc rx1014_cstack
    (rx1014_cur, rx1014_tgt, rx1014_pos, rx1014_curclass, rx1014_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1014_cur
    length rx1014_eos, rx1014_tgt
    eq $I19, 1, rx1014_restart2677
    gt rx1014_pos, rx1014_eos, rx1014_fail2678
    repr_get_attr_int $I11, self, rx1014_curclass, "$!from"
    ne $I11, -1, rxscan1015_done2684
    goto rxscan1015_scan2683
  rxscan1015_loop2682:
    inc rx1014_pos
    gt rx1014_pos, rx1014_eos, rx1014_fail2678
    repr_bind_attr_int rx1014_cur, rx1014_curclass, "$!from", rx1014_pos
  rxscan1015_scan2683:
    nqp_rxmark rx1014_bstack, rxscan1015_loop2682, rx1014_pos, 0
  rxscan1015_done2684:
    nqp_rxmark rx1014_bstack, rxcap1016_fail2686, rx1014_pos, 0
    add $I11, rx1014_pos, 1
    gt $I11, rx1014_eos, rx1014_fail2678
    substr $S10, rx1014_tgt, rx1014_pos, 1
    ne $S10, ucs4:"Q", rx1014_fail2678
    add rx1014_pos, 1
    nqp_rxpeek $I19, rx1014_bstack, rxcap1016_fail2686
    inc $I19
    set $I11, rx1014_bstack[$I19]
    repr_bind_attr_int rx1014_cur, rx1014_curclass, "$!pos", rx1014_pos
    $P11 = rx1014_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1014_pos)
    rx1014_cstack = rx1014_cur."!cursor_capture"($P11, "sym")
    goto rxcap1016_done2685
  rxcap1016_fail2686:
    goto rx1014_fail2678
  rxcap1016_done2685:
    le rx1014_pos, 0, rx1014_fail2678
    is_cclass $I11, .CCLASS_WORD, rx1014_tgt, rx1014_pos
    if $I11, rx1014_fail2678
    sub $I11, rx1014_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx1014_tgt, $I11
    unless $I11, rx1014_fail2678
    ge rx1014_pos, rx1014_eos, rx1014_fail2678
    substr $S11, rx1014_tgt, rx1014_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx1014_fail2678
    repr_bind_attr_int rx1014_cur, rx1014_curclass, "$!pos", rx1014_pos
    $P11 = rx1014_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1014_curclass, "$!pos"
    lt $I11, 0, rx1014_fail2678
    repr_get_attr_int rx1014_pos, $P11, rx1014_curclass, "$!pos"
    repr_bind_attr_int rx1014_cur, rx1014_curclass, "$!pos", rx1014_pos
    $P11 = rx1014_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx1014_curclass, "$!pos"
    lt $I11, 0, rx1014_fail2678
    nqp_rxmark rx1014_bstack, rxsubrule1019_pass2689, -1, 0
  rxsubrule1019_pass2689:
    rx1014_cstack = rx1014_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1014_pos, $P11, rx1014_curclass, "$!pos"
    rx1014_cur."!cursor_pass"(rx1014_pos, "quote:sym<Q>", 'backtrack'=>1)
    .return (rx1014_cur)
  rx1014_restart2677:
    repr_get_attr_obj rx1014_cstack, rx1014_cur, rx1014_curclass, "$!cstack"
  rx1014_fail2678:
    unless rx1014_bstack, rx1014_done2676
    pop $I19, rx1014_bstack
    if_null rx1014_cstack, rx1014_cstack_done2681
    unless rx1014_cstack, rx1014_cstack_done2681
    dec $I19
    set $P11, rx1014_cstack[$I19]
  rx1014_cstack_done2681:
    pop rx1014_rep, rx1014_bstack
    pop rx1014_pos, rx1014_bstack
    pop $I19, rx1014_bstack
    lt rx1014_pos, -1, rx1014_done2676
    lt rx1014_pos, 0, rx1014_fail2678
    eq $I19, 0, rx1014_fail2678
    nqp_islist $I20, rx1014_cstack
    unless $I20, rx1014_jump2679
    elements $I18, rx1014_bstack
    le $I18, 0, rx1014_cut2680
    dec $I18
    set $I18, rx1014_bstack[$I18]
  rx1014_cut2680:
    assign rx1014_cstack, $I18
  rx1014_jump2679:
    jump $I19
  rx1014_done2676:
    rx1014_cur."!cursor_fail"()
    .return (rx1014_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_158_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1275
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1020_tgt
    .local int rx1020_pos
    .local int rx1020_off
    .local int rx1020_eos
    .local int rx1020_rep
    .local pmc rx1020_cur
    .local pmc rx1020_curclass
    .local pmc rx1020_bstack
    .local pmc rx1020_cstack
    (rx1020_cur, rx1020_tgt, rx1020_pos, rx1020_curclass, rx1020_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1020_cur
    length rx1020_eos, rx1020_tgt
    eq $I19, 1, rx1020_restart2692
    gt rx1020_pos, rx1020_eos, rx1020_fail2693
    repr_get_attr_int $I11, self, rx1020_curclass, "$!from"
    ne $I11, -1, rxscan1021_done2699
    goto rxscan1021_scan2698
  rxscan1021_loop2697:
    inc rx1020_pos
    gt rx1020_pos, rx1020_eos, rx1020_fail2693
    repr_bind_attr_int rx1020_cur, rx1020_curclass, "$!from", rx1020_pos
  rxscan1021_scan2698:
    nqp_rxmark rx1020_bstack, rxscan1021_loop2697, rx1020_pos, 0
  rxscan1021_done2699:
    nqp_rxmark rx1020_bstack, rxcap1022_fail2701, rx1020_pos, 0
    add $I11, rx1020_pos, 5
    gt $I11, rx1020_eos, rx1020_fail2693
    substr $S10, rx1020_tgt, rx1020_pos, 5
    ne $S10, ucs4:"Q:PIR", rx1020_fail2693
    add rx1020_pos, 5
    nqp_rxpeek $I19, rx1020_bstack, rxcap1022_fail2701
    inc $I19
    set $I11, rx1020_bstack[$I19]
    repr_bind_attr_int rx1020_cur, rx1020_curclass, "$!pos", rx1020_pos
    $P11 = rx1020_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1020_pos)
    rx1020_cstack = rx1020_cur."!cursor_capture"($P11, "sym")
    goto rxcap1022_done2700
  rxcap1022_fail2701:
    goto rx1020_fail2693
  rxcap1022_done2700:
    repr_bind_attr_int rx1020_cur, rx1020_curclass, "$!pos", rx1020_pos
    $P11 = rx1020_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1020_curclass, "$!pos"
    lt $I11, 0, rx1020_fail2693
    repr_get_attr_int rx1020_pos, $P11, rx1020_curclass, "$!pos"
    repr_bind_attr_int rx1020_cur, rx1020_curclass, "$!pos", rx1020_pos
    $P11 = rx1020_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx1020_curclass, "$!pos"
    lt $I11, 0, rx1020_fail2693
    nqp_rxmark rx1020_bstack, rxsubrule1024_pass2703, -1, 0
  rxsubrule1024_pass2703:
    rx1020_cstack = rx1020_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1020_pos, $P11, rx1020_curclass, "$!pos"
    rx1020_cur."!cursor_pass"(rx1020_pos, "quote:sym<Q:PIR>", 'backtrack'=>1)
    .return (rx1020_cur)
  rx1020_restart2692:
    repr_get_attr_obj rx1020_cstack, rx1020_cur, rx1020_curclass, "$!cstack"
  rx1020_fail2693:
    unless rx1020_bstack, rx1020_done2691
    pop $I19, rx1020_bstack
    if_null rx1020_cstack, rx1020_cstack_done2696
    unless rx1020_cstack, rx1020_cstack_done2696
    dec $I19
    set $P11, rx1020_cstack[$I19]
  rx1020_cstack_done2696:
    pop rx1020_rep, rx1020_bstack
    pop rx1020_pos, rx1020_bstack
    pop $I19, rx1020_bstack
    lt rx1020_pos, -1, rx1020_done2691
    lt rx1020_pos, 0, rx1020_fail2693
    eq $I19, 0, rx1020_fail2693
    nqp_islist $I20, rx1020_cstack
    unless $I20, rx1020_jump2694
    elements $I18, rx1020_bstack
    le $I18, 0, rx1020_cut2695
    dec $I18
    set $I18, rx1020_bstack[$I18]
  rx1020_cut2695:
    assign rx1020_cstack, $I18
  rx1020_jump2694:
    jump $I19
  rx1020_done2691:
    rx1020_cur."!cursor_fail"()
    .return (rx1020_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_159_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1276
    .param pmc _lex_param_0 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx1025_tgt
    .local int rx1025_pos
    .local int rx1025_off
    .local int rx1025_eos
    .local int rx1025_rep
    .local pmc rx1025_cur
    .local pmc rx1025_curclass
    .local pmc rx1025_bstack
    .local pmc rx1025_cstack
    (rx1025_cur, rx1025_tgt, rx1025_pos, rx1025_curclass, rx1025_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1025_cur
    length rx1025_eos, rx1025_tgt
    eq $I19, 1, rx1025_restart2706
    gt rx1025_pos, rx1025_eos, rx1025_fail2707
    repr_get_attr_int $I11, self, rx1025_curclass, "$!from"
    ne $I11, -1, rxscan1026_done2713
    goto rxscan1026_scan2712
  rxscan1026_loop2711:
    inc rx1025_pos
    gt rx1025_pos, rx1025_eos, rx1025_fail2707
    repr_bind_attr_int rx1025_cur, rx1025_curclass, "$!from", rx1025_pos
  rxscan1026_scan2712:
    nqp_rxmark rx1025_bstack, rxscan1026_loop2711, rx1025_pos, 0
  rxscan1026_done2713:
    add $I11, rx1025_pos, 1
    gt $I11, rx1025_eos, rx1025_fail2707
    substr $S10, rx1025_tgt, rx1025_pos, 1
    ne $S10, ucs4:"/", rx1025_fail2707
    add rx1025_pos, 1
    repr_bind_attr_int rx1025_cur, rx1025_curclass, "$!pos", rx1025_pos
    $P11 = rx1025_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx1025_curclass, "$!pos"
    lt $I11, 0, rx1025_fail2707
    repr_get_attr_int rx1025_pos, $P11, rx1025_curclass, "$!pos"
    repr_bind_attr_int rx1025_cur, rx1025_curclass, "$!pos", rx1025_pos
    store_lex unicode:"$\x{a2}", rx1025_cur
    unless_null $P101, fallback2715
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2716
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2716:
    unless_null $P5002, vivi_10282717
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_10282717:
    set $P101, $P5002
  fallback2715:
    repr_bind_attr_int rx1025_cur, rx1025_curclass, "$!pos", rx1025_pos
    $P11 = rx1025_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx1025_curclass, "$!pos"
    lt $I11, 0, rx1025_fail2707
    nqp_rxmark rx1025_bstack, rxsubrule1029_pass2718, -1, 0
  rxsubrule1029_pass2718:
    rx1025_cstack = rx1025_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx1025_pos, $P11, rx1025_curclass, "$!pos"
    add $I11, rx1025_pos, 1
    gt $I11, rx1025_eos, rx1025_fail2707
    substr $S10, rx1025_tgt, rx1025_pos, 1
    ne $S10, ucs4:"/", rx1025_fail2707
    add rx1025_pos, 1
    rx1025_cur."!cursor_pass"(rx1025_pos, "quote:sym</ />", 'backtrack'=>1)
    .return (rx1025_cur)
  rx1025_restart2706:
    repr_get_attr_obj rx1025_cstack, rx1025_cur, rx1025_curclass, "$!cstack"
  rx1025_fail2707:
    unless rx1025_bstack, rx1025_done2705
    pop $I19, rx1025_bstack
    if_null rx1025_cstack, rx1025_cstack_done2710
    unless rx1025_cstack, rx1025_cstack_done2710
    dec $I19
    set $P11, rx1025_cstack[$I19]
  rx1025_cstack_done2710:
    pop rx1025_rep, rx1025_bstack
    pop rx1025_pos, rx1025_bstack
    pop $I19, rx1025_bstack
    lt rx1025_pos, -1, rx1025_done2705
    lt rx1025_pos, 0, rx1025_fail2707
    eq $I19, 0, rx1025_fail2707
    nqp_islist $I20, rx1025_cstack
    unless $I20, rx1025_jump2708
    elements $I18, rx1025_bstack
    le $I18, 0, rx1025_cut2709
    dec $I18
    set $I18, rx1025_bstack[$I18]
  rx1025_cut2709:
    assign rx1025_cstack, $I18
  rx1025_jump2708:
    jump $I19
  rx1025_done2705:
    rx1025_cur."!cursor_fail"()
    .return (rx1025_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_160_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1284
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1030_tgt
    .local int rx1030_pos
    .local int rx1030_off
    .local int rx1030_eos
    .local int rx1030_rep
    .local pmc rx1030_cur
    .local pmc rx1030_curclass
    .local pmc rx1030_bstack
    .local pmc rx1030_cstack
    (rx1030_cur, rx1030_tgt, rx1030_pos, rx1030_curclass, rx1030_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1030_cur
    length rx1030_eos, rx1030_tgt
    eq $I19, 1, rx1030_restart2721
    gt rx1030_pos, rx1030_eos, rx1030_fail2722
    repr_get_attr_int $I11, self, rx1030_curclass, "$!from"
    ne $I11, -1, rxscan1031_done2728
    goto rxscan1031_scan2727
  rxscan1031_loop2726:
    inc rx1030_pos
    gt rx1030_pos, rx1030_eos, rx1030_fail2722
    repr_bind_attr_int rx1030_cur, rx1030_curclass, "$!from", rx1030_pos
  rxscan1031_scan2727:
    nqp_rxmark rx1030_bstack, rxscan1031_loop2726, rx1030_pos, 0
  rxscan1031_done2728:
    ge rx1030_pos, rx1030_eos, rx1030_fail2722
    substr $S11, rx1030_tgt, rx1030_pos, 1
    index $I11, ucs4:"$", $S11
    lt $I11, 0, rx1030_fail2722
    repr_bind_attr_int rx1030_cur, rx1030_curclass, "$!pos", rx1030_pos
    $P11 = rx1030_cur."quotemod_check"("s")
    repr_get_attr_int $I11, $P11, rx1030_curclass, "$!pos"
    lt $I11, 0, rx1030_fail2722
    repr_bind_attr_int rx1030_cur, rx1030_curclass, "$!pos", rx1030_pos
    $P11 = rx1030_cur."variable"()
    repr_get_attr_int $I11, $P11, rx1030_curclass, "$!pos"
    lt $I11, 0, rx1030_fail2722
    nqp_rxmark rx1030_bstack, rxsubrule1032_pass2729, -1, 0
  rxsubrule1032_pass2729:
    rx1030_cstack = rx1030_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx1030_pos, $P11, rx1030_curclass, "$!pos"
    rx1030_cur."!cursor_pass"(rx1030_pos, "quote_escape:sym<$>", 'backtrack'=>1)
    .return (rx1030_cur)
  rx1030_restart2721:
    repr_get_attr_obj rx1030_cstack, rx1030_cur, rx1030_curclass, "$!cstack"
  rx1030_fail2722:
    unless rx1030_bstack, rx1030_done2720
    pop $I19, rx1030_bstack
    if_null rx1030_cstack, rx1030_cstack_done2725
    unless rx1030_cstack, rx1030_cstack_done2725
    dec $I19
    set $P11, rx1030_cstack[$I19]
  rx1030_cstack_done2725:
    pop rx1030_rep, rx1030_bstack
    pop rx1030_pos, rx1030_bstack
    pop $I19, rx1030_bstack
    lt rx1030_pos, -1, rx1030_done2720
    lt rx1030_pos, 0, rx1030_fail2722
    eq $I19, 0, rx1030_fail2722
    nqp_islist $I20, rx1030_cstack
    unless $I20, rx1030_jump2723
    elements $I18, rx1030_bstack
    le $I18, 0, rx1030_cut2724
    dec $I18
    set $I18, rx1030_bstack[$I18]
  rx1030_cut2724:
    assign rx1030_cstack, $I18
  rx1030_jump2723:
    jump $I19
  rx1030_done2720:
    rx1030_cur."!cursor_fail"()
    .return (rx1030_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_161_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1285
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1033_tgt
    .local int rx1033_pos
    .local int rx1033_off
    .local int rx1033_eos
    .local int rx1033_rep
    .local pmc rx1033_cur
    .local pmc rx1033_curclass
    .local pmc rx1033_bstack
    .local pmc rx1033_cstack
    (rx1033_cur, rx1033_tgt, rx1033_pos, rx1033_curclass, rx1033_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1033_cur
    length rx1033_eos, rx1033_tgt
    eq $I19, 1, rx1033_restart2732
    gt rx1033_pos, rx1033_eos, rx1033_fail2733
    repr_get_attr_int $I11, self, rx1033_curclass, "$!from"
    ne $I11, -1, rxscan1034_done2739
    goto rxscan1034_scan2738
  rxscan1034_loop2737:
    inc rx1033_pos
    gt rx1033_pos, rx1033_eos, rx1033_fail2733
    repr_bind_attr_int rx1033_cur, rx1033_curclass, "$!from", rx1033_pos
  rxscan1034_scan2738:
    nqp_rxmark rx1033_bstack, rxscan1034_loop2737, rx1033_pos, 0
  rxscan1034_done2739:
    ge rx1033_pos, rx1033_eos, rx1033_fail2733
    substr $S11, rx1033_tgt, rx1033_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1033_fail2733
    repr_bind_attr_int rx1033_cur, rx1033_curclass, "$!pos", rx1033_pos
    $P11 = rx1033_cur."quotemod_check"("c")
    repr_get_attr_int $I11, $P11, rx1033_curclass, "$!pos"
    lt $I11, 0, rx1033_fail2733
    repr_bind_attr_int rx1033_cur, rx1033_curclass, "$!pos", rx1033_pos
    $P11 = rx1033_cur."block"()
    repr_get_attr_int $I11, $P11, rx1033_curclass, "$!pos"
    lt $I11, 0, rx1033_fail2733
    nqp_rxmark rx1033_bstack, rxsubrule1035_pass2740, -1, 0
  rxsubrule1035_pass2740:
    rx1033_cstack = rx1033_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx1033_pos, $P11, rx1033_curclass, "$!pos"
    rx1033_cur."!cursor_pass"(rx1033_pos, "quote_escape:sym<{ }>", 'backtrack'=>1)
    .return (rx1033_cur)
  rx1033_restart2732:
    repr_get_attr_obj rx1033_cstack, rx1033_cur, rx1033_curclass, "$!cstack"
  rx1033_fail2733:
    unless rx1033_bstack, rx1033_done2731
    pop $I19, rx1033_bstack
    if_null rx1033_cstack, rx1033_cstack_done2736
    unless rx1033_cstack, rx1033_cstack_done2736
    dec $I19
    set $P11, rx1033_cstack[$I19]
  rx1033_cstack_done2736:
    pop rx1033_rep, rx1033_bstack
    pop rx1033_pos, rx1033_bstack
    pop $I19, rx1033_bstack
    lt rx1033_pos, -1, rx1033_done2731
    lt rx1033_pos, 0, rx1033_fail2733
    eq $I19, 0, rx1033_fail2733
    nqp_islist $I20, rx1033_cstack
    unless $I20, rx1033_jump2734
    elements $I18, rx1033_bstack
    le $I18, 0, rx1033_cut2735
    dec $I18
    set $I18, rx1033_bstack[$I18]
  rx1033_cut2735:
    assign rx1033_cstack, $I18
  rx1033_jump2734:
    jump $I19
  rx1033_done2731:
    rx1033_cur."!cursor_fail"()
    .return (rx1033_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_162_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1286
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1036_tgt
    .local int rx1036_pos
    .local int rx1036_off
    .local int rx1036_eos
    .local int rx1036_rep
    .local pmc rx1036_cur
    .local pmc rx1036_curclass
    .local pmc rx1036_bstack
    .local pmc rx1036_cstack
    (rx1036_cur, rx1036_tgt, rx1036_pos, rx1036_curclass, rx1036_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1036_cur
    length rx1036_eos, rx1036_tgt
    eq $I19, 1, rx1036_restart2743
    gt rx1036_pos, rx1036_eos, rx1036_fail2744
    repr_get_attr_int $I11, self, rx1036_curclass, "$!from"
    ne $I11, -1, rxscan1037_done2750
    goto rxscan1037_scan2749
  rxscan1037_loop2748:
    inc rx1036_pos
    gt rx1036_pos, rx1036_eos, rx1036_fail2744
    repr_bind_attr_int rx1036_cur, rx1036_curclass, "$!from", rx1036_pos
  rxscan1037_scan2749:
    nqp_rxmark rx1036_bstack, rxscan1037_loop2748, rx1036_pos, 0
  rxscan1037_done2750:
    add $I11, rx1036_pos, 2
    gt $I11, rx1036_eos, rx1036_fail2744
    substr $S10, rx1036_tgt, rx1036_pos, 2
    ne $S10, ucs4:"\\e", rx1036_fail2744
    add rx1036_pos, 2
    repr_bind_attr_int rx1036_cur, rx1036_curclass, "$!pos", rx1036_pos
    $P11 = rx1036_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx1036_curclass, "$!pos"
    lt $I11, 0, rx1036_fail2744
    rx1036_cur."!cursor_pass"(rx1036_pos, "quote_escape:sym<esc>", 'backtrack'=>1)
    .return (rx1036_cur)
  rx1036_restart2743:
    repr_get_attr_obj rx1036_cstack, rx1036_cur, rx1036_curclass, "$!cstack"
  rx1036_fail2744:
    unless rx1036_bstack, rx1036_done2742
    pop $I19, rx1036_bstack
    if_null rx1036_cstack, rx1036_cstack_done2747
    unless rx1036_cstack, rx1036_cstack_done2747
    dec $I19
    set $P11, rx1036_cstack[$I19]
  rx1036_cstack_done2747:
    pop rx1036_rep, rx1036_bstack
    pop rx1036_pos, rx1036_bstack
    pop $I19, rx1036_bstack
    lt rx1036_pos, -1, rx1036_done2742
    lt rx1036_pos, 0, rx1036_fail2744
    eq $I19, 0, rx1036_fail2744
    nqp_islist $I20, rx1036_cstack
    unless $I20, rx1036_jump2745
    elements $I18, rx1036_bstack
    le $I18, 0, rx1036_cut2746
    dec $I18
    set $I18, rx1036_bstack[$I18]
  rx1036_cut2746:
    assign rx1036_cstack, $I18
  rx1036_jump2745:
    jump $I19
  rx1036_done2742:
    rx1036_cur."!cursor_fail"()
    .return (rx1036_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_163_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1288
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1038_tgt
    .local int rx1038_pos
    .local int rx1038_off
    .local int rx1038_eos
    .local int rx1038_rep
    .local pmc rx1038_cur
    .local pmc rx1038_curclass
    .local pmc rx1038_bstack
    .local pmc rx1038_cstack
    (rx1038_cur, rx1038_tgt, rx1038_pos, rx1038_curclass, rx1038_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1038_cur
    length rx1038_eos, rx1038_tgt
    eq $I19, 1, rx1038_restart2753
    gt rx1038_pos, rx1038_eos, rx1038_fail2754
    repr_get_attr_int $I11, self, rx1038_curclass, "$!from"
    ne $I11, -1, rxscan1039_done2760
    goto rxscan1039_scan2759
  rxscan1039_loop2758:
    inc rx1038_pos
    gt rx1038_pos, rx1038_eos, rx1038_fail2754
    repr_bind_attr_int rx1038_cur, rx1038_curclass, "$!from", rx1038_pos
  rxscan1039_scan2759:
    nqp_rxmark rx1038_bstack, rxscan1039_loop2758, rx1038_pos, 0
  rxscan1039_done2760:
    add $I11, rx1038_pos, 1
    gt $I11, rx1038_eos, rx1038_fail2754
    substr $S10, rx1038_tgt, rx1038_pos, 1
    ne $S10, ucs4:"(", rx1038_fail2754
    add rx1038_pos, 1
    repr_bind_attr_int rx1038_cur, rx1038_curclass, "$!pos", rx1038_pos
    $P11 = rx1038_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1038_curclass, "$!pos"
    lt $I11, 0, rx1038_fail2754
    repr_get_attr_int rx1038_pos, $P11, rx1038_curclass, "$!pos"
    nqp_rxmark rx1038_bstack, rxquantr1041_done2763, rx1038_pos, 0
  rxquantr1041_loop2762:
    repr_bind_attr_int rx1038_cur, rx1038_curclass, "$!pos", rx1038_pos
    $P11 = rx1038_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1038_curclass, "$!pos"
    lt $I11, 0, rx1038_fail2754
    goto rxsubrule1042_pass2764
  rxsubrule1042_back2765:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx1038_curclass, "$!pos"
    lt $I11, 0, rx1038_fail2754
  rxsubrule1042_pass2764:
    rx1038_cstack = rx1038_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule1042_back2765
    push rx1038_bstack, $I11
    push rx1038_bstack, 0
    push rx1038_bstack, rx1038_pos
    elements $I11, rx1038_cstack
    push rx1038_bstack, $I11
    repr_get_attr_int rx1038_pos, $P11, rx1038_curclass, "$!pos"
    nqp_rxpeek $I19, rx1038_bstack, rxquantr1041_done2763
    inc $I19
    inc $I19
    set rx1038_rep, rx1038_bstack[$I19]
    nqp_rxcommit rx1038_bstack, rxquantr1041_done2763
    inc rx1038_rep
  rxquantr1041_done2763:
    add $I11, rx1038_pos, 1
    gt $I11, rx1038_eos, rx1038_fail2754
    substr $S10, rx1038_tgt, rx1038_pos, 1
    ne $S10, ucs4:")", rx1038_fail2754
    add rx1038_pos, 1
    rx1038_cur."!cursor_pass"(rx1038_pos, "circumfix:sym<( )>", 'backtrack'=>1)
    .return (rx1038_cur)
  rx1038_restart2753:
    repr_get_attr_obj rx1038_cstack, rx1038_cur, rx1038_curclass, "$!cstack"
  rx1038_fail2754:
    unless rx1038_bstack, rx1038_done2752
    pop $I19, rx1038_bstack
    if_null rx1038_cstack, rx1038_cstack_done2757
    unless rx1038_cstack, rx1038_cstack_done2757
    dec $I19
    set $P11, rx1038_cstack[$I19]
  rx1038_cstack_done2757:
    pop rx1038_rep, rx1038_bstack
    pop rx1038_pos, rx1038_bstack
    pop $I19, rx1038_bstack
    lt rx1038_pos, -1, rx1038_done2752
    lt rx1038_pos, 0, rx1038_fail2754
    eq $I19, 0, rx1038_fail2754
    nqp_islist $I20, rx1038_cstack
    unless $I20, rx1038_jump2755
    elements $I18, rx1038_bstack
    le $I18, 0, rx1038_cut2756
    dec $I18
    set $I18, rx1038_bstack[$I18]
  rx1038_cut2756:
    assign rx1038_cstack, $I18
  rx1038_jump2755:
    jump $I19
  rx1038_done2752:
    rx1038_cur."!cursor_fail"()
    .return (rx1038_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_164_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1289
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1043_tgt
    .local int rx1043_pos
    .local int rx1043_off
    .local int rx1043_eos
    .local int rx1043_rep
    .local pmc rx1043_cur
    .local pmc rx1043_curclass
    .local pmc rx1043_bstack
    .local pmc rx1043_cstack
    (rx1043_cur, rx1043_tgt, rx1043_pos, rx1043_curclass, rx1043_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1043_cur
    length rx1043_eos, rx1043_tgt
    eq $I19, 1, rx1043_restart2768
    gt rx1043_pos, rx1043_eos, rx1043_fail2769
    repr_get_attr_int $I11, self, rx1043_curclass, "$!from"
    ne $I11, -1, rxscan1044_done2775
    goto rxscan1044_scan2774
  rxscan1044_loop2773:
    inc rx1043_pos
    gt rx1043_pos, rx1043_eos, rx1043_fail2769
    repr_bind_attr_int rx1043_cur, rx1043_curclass, "$!from", rx1043_pos
  rxscan1044_scan2774:
    nqp_rxmark rx1043_bstack, rxscan1044_loop2773, rx1043_pos, 0
  rxscan1044_done2775:
    add $I11, rx1043_pos, 1
    gt $I11, rx1043_eos, rx1043_fail2769
    substr $S10, rx1043_tgt, rx1043_pos, 1
    ne $S10, ucs4:"[", rx1043_fail2769
    add rx1043_pos, 1
    repr_bind_attr_int rx1043_cur, rx1043_curclass, "$!pos", rx1043_pos
    $P11 = rx1043_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1043_curclass, "$!pos"
    lt $I11, 0, rx1043_fail2769
    repr_get_attr_int rx1043_pos, $P11, rx1043_curclass, "$!pos"
    nqp_rxmark rx1043_bstack, rxquantr1046_done2778, rx1043_pos, 0
  rxquantr1046_loop2777:
    repr_bind_attr_int rx1043_cur, rx1043_curclass, "$!pos", rx1043_pos
    $P11 = rx1043_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1043_curclass, "$!pos"
    lt $I11, 0, rx1043_fail2769
    goto rxsubrule1047_pass2779
  rxsubrule1047_back2780:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx1043_curclass, "$!pos"
    lt $I11, 0, rx1043_fail2769
  rxsubrule1047_pass2779:
    rx1043_cstack = rx1043_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule1047_back2780
    push rx1043_bstack, $I11
    push rx1043_bstack, 0
    push rx1043_bstack, rx1043_pos
    elements $I11, rx1043_cstack
    push rx1043_bstack, $I11
    repr_get_attr_int rx1043_pos, $P11, rx1043_curclass, "$!pos"
    nqp_rxpeek $I19, rx1043_bstack, rxquantr1046_done2778
    inc $I19
    inc $I19
    set rx1043_rep, rx1043_bstack[$I19]
    nqp_rxcommit rx1043_bstack, rxquantr1046_done2778
    inc rx1043_rep
  rxquantr1046_done2778:
    add $I11, rx1043_pos, 1
    gt $I11, rx1043_eos, rx1043_fail2769
    substr $S10, rx1043_tgt, rx1043_pos, 1
    ne $S10, ucs4:"]", rx1043_fail2769
    add rx1043_pos, 1
    rx1043_cur."!cursor_pass"(rx1043_pos, "circumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx1043_cur)
  rx1043_restart2768:
    repr_get_attr_obj rx1043_cstack, rx1043_cur, rx1043_curclass, "$!cstack"
  rx1043_fail2769:
    unless rx1043_bstack, rx1043_done2767
    pop $I19, rx1043_bstack
    if_null rx1043_cstack, rx1043_cstack_done2772
    unless rx1043_cstack, rx1043_cstack_done2772
    dec $I19
    set $P11, rx1043_cstack[$I19]
  rx1043_cstack_done2772:
    pop rx1043_rep, rx1043_bstack
    pop rx1043_pos, rx1043_bstack
    pop $I19, rx1043_bstack
    lt rx1043_pos, -1, rx1043_done2767
    lt rx1043_pos, 0, rx1043_fail2769
    eq $I19, 0, rx1043_fail2769
    nqp_islist $I20, rx1043_cstack
    unless $I20, rx1043_jump2770
    elements $I18, rx1043_bstack
    le $I18, 0, rx1043_cut2771
    dec $I18
    set $I18, rx1043_bstack[$I18]
  rx1043_cut2771:
    assign rx1043_cstack, $I18
  rx1043_jump2770:
    jump $I19
  rx1043_done2767:
    rx1043_cur."!cursor_fail"()
    .return (rx1043_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_165_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1290
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1048_tgt
    .local int rx1048_pos
    .local int rx1048_off
    .local int rx1048_eos
    .local int rx1048_rep
    .local pmc rx1048_cur
    .local pmc rx1048_curclass
    .local pmc rx1048_bstack
    .local pmc rx1048_cstack
    (rx1048_cur, rx1048_tgt, rx1048_pos, rx1048_curclass, rx1048_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1048_cur
    length rx1048_eos, rx1048_tgt
    eq $I19, 1, rx1048_restart2783
    gt rx1048_pos, rx1048_eos, rx1048_fail2784
    repr_get_attr_int $I11, self, rx1048_curclass, "$!from"
    ne $I11, -1, rxscan1049_done2790
    goto rxscan1049_scan2789
  rxscan1049_loop2788:
    inc rx1048_pos
    gt rx1048_pos, rx1048_eos, rx1048_fail2784
    repr_bind_attr_int rx1048_cur, rx1048_curclass, "$!from", rx1048_pos
  rxscan1049_scan2789:
    nqp_rxmark rx1048_bstack, rxscan1049_loop2788, rx1048_pos, 0
  rxscan1049_done2790:
    ge rx1048_pos, rx1048_eos, rx1048_fail2784
    substr $S11, rx1048_tgt, rx1048_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx1048_fail2784
    repr_bind_attr_int rx1048_cur, rx1048_curclass, "$!pos", rx1048_pos
    $P11 = rx1048_cur."quote_EXPR"(":q", ":w")
    repr_get_attr_int $I11, $P11, rx1048_curclass, "$!pos"
    lt $I11, 0, rx1048_fail2784
    nqp_rxmark rx1048_bstack, rxsubrule1050_pass2791, -1, 0
  rxsubrule1050_pass2791:
    rx1048_cstack = rx1048_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1048_pos, $P11, rx1048_curclass, "$!pos"
    rx1048_cur."!cursor_pass"(rx1048_pos, "circumfix:sym<ang>", 'backtrack'=>1)
    .return (rx1048_cur)
  rx1048_restart2783:
    repr_get_attr_obj rx1048_cstack, rx1048_cur, rx1048_curclass, "$!cstack"
  rx1048_fail2784:
    unless rx1048_bstack, rx1048_done2782
    pop $I19, rx1048_bstack
    if_null rx1048_cstack, rx1048_cstack_done2787
    unless rx1048_cstack, rx1048_cstack_done2787
    dec $I19
    set $P11, rx1048_cstack[$I19]
  rx1048_cstack_done2787:
    pop rx1048_rep, rx1048_bstack
    pop rx1048_pos, rx1048_bstack
    pop $I19, rx1048_bstack
    lt rx1048_pos, -1, rx1048_done2782
    lt rx1048_pos, 0, rx1048_fail2784
    eq $I19, 0, rx1048_fail2784
    nqp_islist $I20, rx1048_cstack
    unless $I20, rx1048_jump2785
    elements $I18, rx1048_bstack
    le $I18, 0, rx1048_cut2786
    dec $I18
    set $I18, rx1048_bstack[$I18]
  rx1048_cut2786:
    assign rx1048_cstack, $I18
  rx1048_jump2785:
    jump $I19
  rx1048_done2782:
    rx1048_cur."!cursor_fail"()
    .return (rx1048_cur) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_166_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1291
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1051_tgt
    .local int rx1051_pos
    .local int rx1051_off
    .local int rx1051_eos
    .local int rx1051_rep
    .local pmc rx1051_cur
    .local pmc rx1051_curclass
    .local pmc rx1051_bstack
    .local pmc rx1051_cstack
    (rx1051_cur, rx1051_tgt, rx1051_pos, rx1051_curclass, rx1051_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1051_cur
    length rx1051_eos, rx1051_tgt
    eq $I19, 1, rx1051_restart2794
    gt rx1051_pos, rx1051_eos, rx1051_fail2795
    repr_get_attr_int $I11, self, rx1051_curclass, "$!from"
    ne $I11, -1, rxscan1052_done2801
    goto rxscan1052_scan2800
  rxscan1052_loop2799:
    inc rx1051_pos
    gt rx1051_pos, rx1051_eos, rx1051_fail2795
    repr_bind_attr_int rx1051_cur, rx1051_curclass, "$!from", rx1051_pos
  rxscan1052_scan2800:
    nqp_rxmark rx1051_bstack, rxscan1052_loop2799, rx1051_pos, 0
  rxscan1052_done2801:
    ge rx1051_pos, rx1051_eos, rx1051_fail2795
    substr $S11, rx1051_tgt, rx1051_pos, 1
    index $I11, ucs4:"\x{ab}", $S11
    lt $I11, 0, rx1051_fail2795
    repr_bind_attr_int rx1051_cur, rx1051_curclass, "$!pos", rx1051_pos
    $P11 = rx1051_cur."quote_EXPR"(":qq", ":w")
    repr_get_attr_int $I11, $P11, rx1051_curclass, "$!pos"
    lt $I11, 0, rx1051_fail2795
    nqp_rxmark rx1051_bstack, rxsubrule1053_pass2802, -1, 0
  rxsubrule1053_pass2802:
    rx1051_cstack = rx1051_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1051_pos, $P11, rx1051_curclass, "$!pos"
    rx1051_cur."!cursor_pass"(rx1051_pos, utf8:"circumfix:sym<\x{ab} \x{bb}>", 'backtrack'=>1)
    .return (rx1051_cur)
  rx1051_restart2794:
    repr_get_attr_obj rx1051_cstack, rx1051_cur, rx1051_curclass, "$!cstack"
  rx1051_fail2795:
    unless rx1051_bstack, rx1051_done2793
    pop $I19, rx1051_bstack
    if_null rx1051_cstack, rx1051_cstack_done2798
    unless rx1051_cstack, rx1051_cstack_done2798
    dec $I19
    set $P11, rx1051_cstack[$I19]
  rx1051_cstack_done2798:
    pop rx1051_rep, rx1051_bstack
    pop rx1051_pos, rx1051_bstack
    pop $I19, rx1051_bstack
    lt rx1051_pos, -1, rx1051_done2793
    lt rx1051_pos, 0, rx1051_fail2795
    eq $I19, 0, rx1051_fail2795
    nqp_islist $I20, rx1051_cstack
    unless $I20, rx1051_jump2796
    elements $I18, rx1051_bstack
    le $I18, 0, rx1051_cut2797
    dec $I18
    set $I18, rx1051_bstack[$I18]
  rx1051_cut2797:
    assign rx1051_cstack, $I18
  rx1051_jump2796:
    jump $I19
  rx1051_done2793:
    rx1051_cur."!cursor_fail"()
    .return (rx1051_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_167_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1292
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1054_tgt
    .local int rx1054_pos
    .local int rx1054_off
    .local int rx1054_eos
    .local int rx1054_rep
    .local pmc rx1054_cur
    .local pmc rx1054_curclass
    .local pmc rx1054_bstack
    .local pmc rx1054_cstack
    (rx1054_cur, rx1054_tgt, rx1054_pos, rx1054_curclass, rx1054_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1054_cur
    length rx1054_eos, rx1054_tgt
    eq $I19, 1, rx1054_restart2805
    gt rx1054_pos, rx1054_eos, rx1054_fail2806
    repr_get_attr_int $I11, self, rx1054_curclass, "$!from"
    ne $I11, -1, rxscan1055_done2812
    goto rxscan1055_scan2811
  rxscan1055_loop2810:
    inc rx1054_pos
    gt rx1054_pos, rx1054_eos, rx1054_fail2806
    repr_bind_attr_int rx1054_cur, rx1054_curclass, "$!from", rx1054_pos
  rxscan1055_scan2811:
    nqp_rxmark rx1054_bstack, rxscan1055_loop2810, rx1054_pos, 0
  rxscan1055_done2812:
    ge rx1054_pos, rx1054_eos, rx1054_fail2806
    substr $S11, rx1054_tgt, rx1054_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1054_fail2806
    repr_bind_attr_int rx1054_cur, rx1054_curclass, "$!pos", rx1054_pos
    $P11 = rx1054_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx1054_curclass, "$!pos"
    lt $I11, 0, rx1054_fail2806
    nqp_rxmark rx1054_bstack, rxsubrule1056_pass2813, -1, 0
  rxsubrule1056_pass2813:
    rx1054_cstack = rx1054_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx1054_pos, $P11, rx1054_curclass, "$!pos"
    rx1054_cur."!cursor_pass"(rx1054_pos, "circumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx1054_cur)
  rx1054_restart2805:
    repr_get_attr_obj rx1054_cstack, rx1054_cur, rx1054_curclass, "$!cstack"
  rx1054_fail2806:
    unless rx1054_bstack, rx1054_done2804
    pop $I19, rx1054_bstack
    if_null rx1054_cstack, rx1054_cstack_done2809
    unless rx1054_cstack, rx1054_cstack_done2809
    dec $I19
    set $P11, rx1054_cstack[$I19]
  rx1054_cstack_done2809:
    pop rx1054_rep, rx1054_bstack
    pop rx1054_pos, rx1054_bstack
    pop $I19, rx1054_bstack
    lt rx1054_pos, -1, rx1054_done2804
    lt rx1054_pos, 0, rx1054_fail2806
    eq $I19, 0, rx1054_fail2806
    nqp_islist $I20, rx1054_cstack
    unless $I20, rx1054_jump2807
    elements $I18, rx1054_bstack
    le $I18, 0, rx1054_cut2808
    dec $I18
    set $I18, rx1054_bstack[$I18]
  rx1054_cut2808:
    assign rx1054_cstack, $I18
  rx1054_jump2807:
    jump $I19
  rx1054_done2804:
    rx1054_cur."!cursor_fail"()
    .return (rx1054_cur) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_168_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1294
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1057_tgt
    .local int rx1057_pos
    .local int rx1057_off
    .local int rx1057_eos
    .local int rx1057_rep
    .local pmc rx1057_cur
    .local pmc rx1057_curclass
    .local pmc rx1057_bstack
    .local pmc rx1057_cstack
    (rx1057_cur, rx1057_tgt, rx1057_pos, rx1057_curclass, rx1057_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1057_cur
    length rx1057_eos, rx1057_tgt
    eq $I19, 1, rx1057_restart2816
    gt rx1057_pos, rx1057_eos, rx1057_fail2817
    repr_get_attr_int $I11, self, rx1057_curclass, "$!from"
    ne $I11, -1, rxscan1058_done2823
    goto rxscan1058_scan2822
  rxscan1058_loop2821:
    inc rx1057_pos
    gt rx1057_pos, rx1057_eos, rx1057_fail2817
    repr_bind_attr_int rx1057_cur, rx1057_curclass, "$!from", rx1057_pos
  rxscan1058_scan2822:
    nqp_rxmark rx1057_bstack, rxscan1058_loop2821, rx1057_pos, 0
  rxscan1058_done2823:
    repr_bind_attr_int rx1057_cur, rx1057_curclass, "$!pos", rx1057_pos
    $P11 = rx1057_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1057_curclass, "$!pos"
    lt $I11, 0, rx1057_fail2817
    repr_get_attr_int rx1057_pos, $P11, rx1057_curclass, "$!pos"
    repr_bind_attr_int rx1057_cur, rx1057_curclass, "$!pos", rx1057_pos
    $P11 = rx1057_cur."statement"()
    repr_get_attr_int $I11, $P11, rx1057_curclass, "$!pos"
    lt $I11, 0, rx1057_fail2817
    nqp_rxmark rx1057_bstack, rxsubrule1060_pass2825, -1, 0
  rxsubrule1060_pass2825:
    rx1057_cstack = rx1057_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx1057_pos, $P11, rx1057_curclass, "$!pos"
    repr_bind_attr_int rx1057_cur, rx1057_curclass, "$!pos", rx1057_pos
    $P11 = rx1057_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1057_curclass, "$!pos"
    lt $I11, 0, rx1057_fail2817
    repr_get_attr_int rx1057_pos, $P11, rx1057_curclass, "$!pos"
    rx1057_cur."!cursor_pass"(rx1057_pos, "semilist", 'backtrack'=>1)
    .return (rx1057_cur)
  rx1057_restart2816:
    repr_get_attr_obj rx1057_cstack, rx1057_cur, rx1057_curclass, "$!cstack"
  rx1057_fail2817:
    unless rx1057_bstack, rx1057_done2815
    pop $I19, rx1057_bstack
    if_null rx1057_cstack, rx1057_cstack_done2820
    unless rx1057_cstack, rx1057_cstack_done2820
    dec $I19
    set $P11, rx1057_cstack[$I19]
  rx1057_cstack_done2820:
    pop rx1057_rep, rx1057_bstack
    pop rx1057_pos, rx1057_bstack
    pop $I19, rx1057_bstack
    lt rx1057_pos, -1, rx1057_done2815
    lt rx1057_pos, 0, rx1057_fail2817
    eq $I19, 0, rx1057_fail2817
    nqp_islist $I20, rx1057_cstack
    unless $I20, rx1057_jump2818
    elements $I18, rx1057_bstack
    le $I18, 0, rx1057_cut2819
    dec $I18
    set $I18, rx1057_bstack[$I18]
  rx1057_cut2819:
    assign rx1057_cstack, $I18
  rx1057_jump2818:
    jump $I19
  rx1057_done2815:
    rx1057_cur."!cursor_fail"()
    .return (rx1057_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infixish" :subid("cuid_169_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1317
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1062_tgt
    .local int rx1062_pos
    .local int rx1062_off
    .local int rx1062_eos
    .local int rx1062_rep
    .local pmc rx1062_cur
    .local pmc rx1062_curclass
    .local pmc rx1062_bstack
    .local pmc rx1062_cstack
    (rx1062_cur, rx1062_tgt, rx1062_pos, rx1062_curclass, rx1062_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1062_cur
    length rx1062_eos, rx1062_tgt
    eq $I19, 1, rx1062_restart2829
    gt rx1062_pos, rx1062_eos, rx1062_fail2830
    repr_get_attr_int $I11, self, rx1062_curclass, "$!from"
    ne $I11, -1, rxscan1063_done2836
    goto rxscan1063_scan2835
  rxscan1063_loop2834:
    inc rx1062_pos
    gt rx1062_pos, rx1062_eos, rx1062_fail2830
    repr_bind_attr_int rx1062_cur, rx1062_curclass, "$!from", rx1062_pos
  rxscan1063_scan2835:
    nqp_rxmark rx1062_bstack, rxscan1063_loop2834, rx1062_pos, 0
  rxscan1063_done2836:
    repr_bind_attr_int rx1062_cur, rx1062_curclass, "$!pos", rx1062_pos
    $P11 = rx1062_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx1062_curclass, "$!pos"
    ge $I11, 0, rx1062_fail2830
    repr_bind_attr_int rx1062_cur, rx1062_curclass, "$!pos", rx1062_pos
    $P11 = rx1062_cur."infix"()
    repr_get_attr_int $I11, $P11, rx1062_curclass, "$!pos"
    lt $I11, 0, rx1062_fail2830
    nqp_rxmark rx1062_bstack, rxsubrule1064_pass2837, -1, 0
  rxsubrule1064_pass2837:
    rx1062_cstack = rx1062_cur."!cursor_capture"($P11, "OPER=infix")
    repr_get_attr_int rx1062_pos, $P11, rx1062_curclass, "$!pos"
    rx1062_cur."!cursor_pass"(rx1062_pos, "infixish", 'backtrack'=>1)
    .return (rx1062_cur)
  rx1062_restart2829:
    repr_get_attr_obj rx1062_cstack, rx1062_cur, rx1062_curclass, "$!cstack"
  rx1062_fail2830:
    unless rx1062_bstack, rx1062_done2828
    pop $I19, rx1062_bstack
    if_null rx1062_cstack, rx1062_cstack_done2833
    unless rx1062_cstack, rx1062_cstack_done2833
    dec $I19
    set $P11, rx1062_cstack[$I19]
  rx1062_cstack_done2833:
    pop rx1062_rep, rx1062_bstack
    pop rx1062_pos, rx1062_bstack
    pop $I19, rx1062_bstack
    lt rx1062_pos, -1, rx1062_done2828
    lt rx1062_pos, 0, rx1062_fail2830
    eq $I19, 0, rx1062_fail2830
    nqp_islist $I20, rx1062_cstack
    unless $I20, rx1062_jump2831
    elements $I18, rx1062_bstack
    le $I18, 0, rx1062_cut2832
    dec $I18
    set $I18, rx1062_bstack[$I18]
  rx1062_cut2832:
    assign rx1062_cstack, $I18
  rx1062_jump2831:
    jump $I19
  rx1062_done2828:
    rx1062_cur."!cursor_fail"()
    .return (rx1062_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infixstopper" :subid("cuid_170_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1318
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1065_tgt
    .local int rx1065_pos
    .local int rx1065_off
    .local int rx1065_eos
    .local int rx1065_rep
    .local pmc rx1065_cur
    .local pmc rx1065_curclass
    .local pmc rx1065_bstack
    .local pmc rx1065_cstack
    (rx1065_cur, rx1065_tgt, rx1065_pos, rx1065_curclass, rx1065_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1065_cur
    length rx1065_eos, rx1065_tgt
    eq $I19, 1, rx1065_restart2840
    gt rx1065_pos, rx1065_eos, rx1065_fail2841
    repr_get_attr_int $I11, self, rx1065_curclass, "$!from"
    ne $I11, -1, rxscan1066_done2847
    goto rxscan1066_scan2846
  rxscan1066_loop2845:
    inc rx1065_pos
    gt rx1065_pos, rx1065_eos, rx1065_fail2841
    repr_bind_attr_int rx1065_cur, rx1065_curclass, "$!from", rx1065_pos
  rxscan1066_scan2846:
    nqp_rxmark rx1065_bstack, rxscan1066_loop2845, rx1065_pos, 0
  rxscan1066_done2847:
    repr_bind_attr_int rx1065_cur, rx1065_curclass, "$!pos", rx1065_pos
    $P11 = rx1065_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx1065_curclass, "$!pos"
    lt $I11, 0, rx1065_fail2841
    rx1065_cur."!cursor_pass"(rx1065_pos, "infixstopper", 'backtrack'=>1)
    .return (rx1065_cur)
  rx1065_restart2840:
    repr_get_attr_obj rx1065_cstack, rx1065_cur, rx1065_curclass, "$!cstack"
  rx1065_fail2841:
    unless rx1065_bstack, rx1065_done2839
    pop $I19, rx1065_bstack
    if_null rx1065_cstack, rx1065_cstack_done2844
    unless rx1065_cstack, rx1065_cstack_done2844
    dec $I19
    set $P11, rx1065_cstack[$I19]
  rx1065_cstack_done2844:
    pop rx1065_rep, rx1065_bstack
    pop rx1065_pos, rx1065_bstack
    pop $I19, rx1065_bstack
    lt rx1065_pos, -1, rx1065_done2839
    lt rx1065_pos, 0, rx1065_fail2841
    eq $I19, 0, rx1065_fail2841
    nqp_islist $I20, rx1065_cstack
    unless $I20, rx1065_jump2842
    elements $I18, rx1065_bstack
    le $I18, 0, rx1065_cut2843
    dec $I18
    set $I18, rx1065_bstack[$I18]
  rx1065_cut2843:
    assign rx1065_cstack, $I18
  rx1065_jump2842:
    jump $I19
  rx1065_done2839:
    rx1065_cur."!cursor_fail"()
    .return (rx1065_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_171_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1320
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1067_tgt
    .local int rx1067_pos
    .local int rx1067_off
    .local int rx1067_eos
    .local int rx1067_rep
    .local pmc rx1067_cur
    .local pmc rx1067_curclass
    .local pmc rx1067_bstack
    .local pmc rx1067_cstack
    (rx1067_cur, rx1067_tgt, rx1067_pos, rx1067_curclass, rx1067_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1067_cur
    length rx1067_eos, rx1067_tgt
    eq $I19, 1, rx1067_restart2850
    gt rx1067_pos, rx1067_eos, rx1067_fail2851
    repr_get_attr_int $I11, self, rx1067_curclass, "$!from"
    ne $I11, -1, rxscan1068_done2857
    goto rxscan1068_scan2856
  rxscan1068_loop2855:
    inc rx1067_pos
    gt rx1067_pos, rx1067_eos, rx1067_fail2851
    repr_bind_attr_int rx1067_cur, rx1067_curclass, "$!from", rx1067_pos
  rxscan1068_scan2856:
    nqp_rxmark rx1067_bstack, rxscan1068_loop2855, rx1067_pos, 0
  rxscan1068_done2857:
    add $I11, rx1067_pos, 1
    gt $I11, rx1067_eos, rx1067_fail2851
    substr $S10, rx1067_tgt, rx1067_pos, 1
    ne $S10, ucs4:"[", rx1067_fail2851
    add rx1067_pos, 1
    repr_bind_attr_int rx1067_cur, rx1067_curclass, "$!pos", rx1067_pos
    $P11 = rx1067_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1067_curclass, "$!pos"
    lt $I11, 0, rx1067_fail2851
    repr_get_attr_int rx1067_pos, $P11, rx1067_curclass, "$!pos"
    repr_bind_attr_int rx1067_cur, rx1067_curclass, "$!pos", rx1067_pos
    $P11 = rx1067_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1067_curclass, "$!pos"
    lt $I11, 0, rx1067_fail2851
    nqp_rxmark rx1067_bstack, rxsubrule1070_pass2859, -1, 0
  rxsubrule1070_pass2859:
    rx1067_cstack = rx1067_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1067_pos, $P11, rx1067_curclass, "$!pos"
    add $I11, rx1067_pos, 1
    gt $I11, rx1067_eos, rx1067_fail2851
    substr $S10, rx1067_tgt, rx1067_pos, 1
    ne $S10, ucs4:"]", rx1067_fail2851
    add rx1067_pos, 1
    repr_bind_attr_int rx1067_cur, rx1067_curclass, "$!pos", rx1067_pos
    $P11 = rx1067_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1067_curclass, "$!pos"
    lt $I11, 0, rx1067_fail2851
    nqp_rxmark rx1067_bstack, rxsubrule1071_pass2860, -1, 0
  rxsubrule1071_pass2860:
    rx1067_cstack = rx1067_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1067_pos, $P11, rx1067_curclass, "$!pos"
    rx1067_cur."!cursor_pass"(rx1067_pos, "postcircumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx1067_cur)
  rx1067_restart2850:
    repr_get_attr_obj rx1067_cstack, rx1067_cur, rx1067_curclass, "$!cstack"
  rx1067_fail2851:
    unless rx1067_bstack, rx1067_done2849
    pop $I19, rx1067_bstack
    if_null rx1067_cstack, rx1067_cstack_done2854
    unless rx1067_cstack, rx1067_cstack_done2854
    dec $I19
    set $P11, rx1067_cstack[$I19]
  rx1067_cstack_done2854:
    pop rx1067_rep, rx1067_bstack
    pop rx1067_pos, rx1067_bstack
    pop $I19, rx1067_bstack
    lt rx1067_pos, -1, rx1067_done2849
    lt rx1067_pos, 0, rx1067_fail2851
    eq $I19, 0, rx1067_fail2851
    nqp_islist $I20, rx1067_cstack
    unless $I20, rx1067_jump2852
    elements $I18, rx1067_bstack
    le $I18, 0, rx1067_cut2853
    dec $I18
    set $I18, rx1067_bstack[$I18]
  rx1067_cut2853:
    assign rx1067_cstack, $I18
  rx1067_jump2852:
    jump $I19
  rx1067_done2849:
    rx1067_cur."!cursor_fail"()
    .return (rx1067_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_172_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1325
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1072_tgt
    .local int rx1072_pos
    .local int rx1072_off
    .local int rx1072_eos
    .local int rx1072_rep
    .local pmc rx1072_cur
    .local pmc rx1072_curclass
    .local pmc rx1072_bstack
    .local pmc rx1072_cstack
    (rx1072_cur, rx1072_tgt, rx1072_pos, rx1072_curclass, rx1072_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1072_cur
    length rx1072_eos, rx1072_tgt
    eq $I19, 1, rx1072_restart2863
    gt rx1072_pos, rx1072_eos, rx1072_fail2864
    repr_get_attr_int $I11, self, rx1072_curclass, "$!from"
    ne $I11, -1, rxscan1073_done2870
    goto rxscan1073_scan2869
  rxscan1073_loop2868:
    inc rx1072_pos
    gt rx1072_pos, rx1072_eos, rx1072_fail2864
    repr_bind_attr_int rx1072_cur, rx1072_curclass, "$!from", rx1072_pos
  rxscan1073_scan2869:
    nqp_rxmark rx1072_bstack, rxscan1073_loop2868, rx1072_pos, 0
  rxscan1073_done2870:
    add $I11, rx1072_pos, 1
    gt $I11, rx1072_eos, rx1072_fail2864
    substr $S10, rx1072_tgt, rx1072_pos, 1
    ne $S10, ucs4:"{", rx1072_fail2864
    add rx1072_pos, 1
    repr_bind_attr_int rx1072_cur, rx1072_curclass, "$!pos", rx1072_pos
    $P11 = rx1072_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1072_curclass, "$!pos"
    lt $I11, 0, rx1072_fail2864
    repr_get_attr_int rx1072_pos, $P11, rx1072_curclass, "$!pos"
    repr_bind_attr_int rx1072_cur, rx1072_curclass, "$!pos", rx1072_pos
    $P11 = rx1072_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1072_curclass, "$!pos"
    lt $I11, 0, rx1072_fail2864
    nqp_rxmark rx1072_bstack, rxsubrule1075_pass2872, -1, 0
  rxsubrule1075_pass2872:
    rx1072_cstack = rx1072_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1072_pos, $P11, rx1072_curclass, "$!pos"
    add $I11, rx1072_pos, 1
    gt $I11, rx1072_eos, rx1072_fail2864
    substr $S10, rx1072_tgt, rx1072_pos, 1
    ne $S10, ucs4:"}", rx1072_fail2864
    add rx1072_pos, 1
    repr_bind_attr_int rx1072_cur, rx1072_curclass, "$!pos", rx1072_pos
    $P11 = rx1072_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1072_curclass, "$!pos"
    lt $I11, 0, rx1072_fail2864
    nqp_rxmark rx1072_bstack, rxsubrule1076_pass2873, -1, 0
  rxsubrule1076_pass2873:
    rx1072_cstack = rx1072_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1072_pos, $P11, rx1072_curclass, "$!pos"
    rx1072_cur."!cursor_pass"(rx1072_pos, "postcircumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx1072_cur)
  rx1072_restart2863:
    repr_get_attr_obj rx1072_cstack, rx1072_cur, rx1072_curclass, "$!cstack"
  rx1072_fail2864:
    unless rx1072_bstack, rx1072_done2862
    pop $I19, rx1072_bstack
    if_null rx1072_cstack, rx1072_cstack_done2867
    unless rx1072_cstack, rx1072_cstack_done2867
    dec $I19
    set $P11, rx1072_cstack[$I19]
  rx1072_cstack_done2867:
    pop rx1072_rep, rx1072_bstack
    pop rx1072_pos, rx1072_bstack
    pop $I19, rx1072_bstack
    lt rx1072_pos, -1, rx1072_done2862
    lt rx1072_pos, 0, rx1072_fail2864
    eq $I19, 0, rx1072_fail2864
    nqp_islist $I20, rx1072_cstack
    unless $I20, rx1072_jump2865
    elements $I18, rx1072_bstack
    le $I18, 0, rx1072_cut2866
    dec $I18
    set $I18, rx1072_bstack[$I18]
  rx1072_cut2866:
    assign rx1072_cstack, $I18
  rx1072_jump2865:
    jump $I19
  rx1072_done2862:
    rx1072_cur."!cursor_fail"()
    .return (rx1072_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_173_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1330
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1077_tgt
    .local int rx1077_pos
    .local int rx1077_off
    .local int rx1077_eos
    .local int rx1077_rep
    .local pmc rx1077_cur
    .local pmc rx1077_curclass
    .local pmc rx1077_bstack
    .local pmc rx1077_cstack
    (rx1077_cur, rx1077_tgt, rx1077_pos, rx1077_curclass, rx1077_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1077_cur
    length rx1077_eos, rx1077_tgt
    eq $I19, 1, rx1077_restart2876
    gt rx1077_pos, rx1077_eos, rx1077_fail2877
    repr_get_attr_int $I11, self, rx1077_curclass, "$!from"
    ne $I11, -1, rxscan1078_done2883
    goto rxscan1078_scan2882
  rxscan1078_loop2881:
    inc rx1077_pos
    gt rx1077_pos, rx1077_eos, rx1077_fail2877
    repr_bind_attr_int rx1077_cur, rx1077_curclass, "$!from", rx1077_pos
  rxscan1078_scan2882:
    nqp_rxmark rx1077_bstack, rxscan1078_loop2881, rx1077_pos, 0
  rxscan1078_done2883:
    ge rx1077_pos, rx1077_eos, rx1077_fail2877
    substr $S11, rx1077_tgt, rx1077_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx1077_fail2877
    repr_bind_attr_int rx1077_cur, rx1077_curclass, "$!pos", rx1077_pos
    $P11 = rx1077_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx1077_curclass, "$!pos"
    lt $I11, 0, rx1077_fail2877
    nqp_rxmark rx1077_bstack, rxsubrule1079_pass2884, -1, 0
  rxsubrule1079_pass2884:
    rx1077_cstack = rx1077_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1077_pos, $P11, rx1077_curclass, "$!pos"
    repr_bind_attr_int rx1077_cur, rx1077_curclass, "$!pos", rx1077_pos
    $P11 = rx1077_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1077_curclass, "$!pos"
    lt $I11, 0, rx1077_fail2877
    nqp_rxmark rx1077_bstack, rxsubrule1080_pass2885, -1, 0
  rxsubrule1080_pass2885:
    rx1077_cstack = rx1077_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1077_pos, $P11, rx1077_curclass, "$!pos"
    rx1077_cur."!cursor_pass"(rx1077_pos, "postcircumfix:sym<ang>", 'backtrack'=>1)
    .return (rx1077_cur)
  rx1077_restart2876:
    repr_get_attr_obj rx1077_cstack, rx1077_cur, rx1077_curclass, "$!cstack"
  rx1077_fail2877:
    unless rx1077_bstack, rx1077_done2875
    pop $I19, rx1077_bstack
    if_null rx1077_cstack, rx1077_cstack_done2880
    unless rx1077_cstack, rx1077_cstack_done2880
    dec $I19
    set $P11, rx1077_cstack[$I19]
  rx1077_cstack_done2880:
    pop rx1077_rep, rx1077_bstack
    pop rx1077_pos, rx1077_bstack
    pop $I19, rx1077_bstack
    lt rx1077_pos, -1, rx1077_done2875
    lt rx1077_pos, 0, rx1077_fail2877
    eq $I19, 0, rx1077_fail2877
    nqp_islist $I20, rx1077_cstack
    unless $I20, rx1077_jump2878
    elements $I18, rx1077_bstack
    le $I18, 0, rx1077_cut2879
    dec $I18
    set $I18, rx1077_bstack[$I18]
  rx1077_cut2879:
    assign rx1077_cstack, $I18
  rx1077_jump2878:
    jump $I19
  rx1077_done2875:
    rx1077_cur."!cursor_fail"()
    .return (rx1077_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_174_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1335
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1081_tgt
    .local int rx1081_pos
    .local int rx1081_off
    .local int rx1081_eos
    .local int rx1081_rep
    .local pmc rx1081_cur
    .local pmc rx1081_curclass
    .local pmc rx1081_bstack
    .local pmc rx1081_cstack
    (rx1081_cur, rx1081_tgt, rx1081_pos, rx1081_curclass, rx1081_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1081_cur
    length rx1081_eos, rx1081_tgt
    eq $I19, 1, rx1081_restart2888
    gt rx1081_pos, rx1081_eos, rx1081_fail2889
    repr_get_attr_int $I11, self, rx1081_curclass, "$!from"
    ne $I11, -1, rxscan1082_done2895
    goto rxscan1082_scan2894
  rxscan1082_loop2893:
    inc rx1081_pos
    gt rx1081_pos, rx1081_eos, rx1081_fail2889
    repr_bind_attr_int rx1081_cur, rx1081_curclass, "$!from", rx1081_pos
  rxscan1082_scan2894:
    nqp_rxmark rx1081_bstack, rxscan1082_loop2893, rx1081_pos, 0
  rxscan1082_done2895:
    add $I11, rx1081_pos, 1
    gt $I11, rx1081_eos, rx1081_fail2889
    substr $S10, rx1081_tgt, rx1081_pos, 1
    ne $S10, ucs4:"(", rx1081_fail2889
    add rx1081_pos, 1
    repr_bind_attr_int rx1081_cur, rx1081_curclass, "$!pos", rx1081_pos
    $P11 = rx1081_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1081_curclass, "$!pos"
    lt $I11, 0, rx1081_fail2889
    repr_get_attr_int rx1081_pos, $P11, rx1081_curclass, "$!pos"
    repr_bind_attr_int rx1081_cur, rx1081_curclass, "$!pos", rx1081_pos
    $P11 = rx1081_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1081_curclass, "$!pos"
    lt $I11, 0, rx1081_fail2889
    nqp_rxmark rx1081_bstack, rxsubrule1084_pass2897, -1, 0
  rxsubrule1084_pass2897:
    rx1081_cstack = rx1081_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1081_pos, $P11, rx1081_curclass, "$!pos"
    add $I11, rx1081_pos, 1
    gt $I11, rx1081_eos, rx1081_fail2889
    substr $S10, rx1081_tgt, rx1081_pos, 1
    ne $S10, ucs4:")", rx1081_fail2889
    add rx1081_pos, 1
    repr_bind_attr_int rx1081_cur, rx1081_curclass, "$!pos", rx1081_pos
    $P11 = rx1081_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1081_curclass, "$!pos"
    lt $I11, 0, rx1081_fail2889
    nqp_rxmark rx1081_bstack, rxsubrule1085_pass2898, -1, 0
  rxsubrule1085_pass2898:
    rx1081_cstack = rx1081_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1081_pos, $P11, rx1081_curclass, "$!pos"
    rx1081_cur."!cursor_pass"(rx1081_pos, "postcircumfix:sym<( )>", 'backtrack'=>1)
    .return (rx1081_cur)
  rx1081_restart2888:
    repr_get_attr_obj rx1081_cstack, rx1081_cur, rx1081_curclass, "$!cstack"
  rx1081_fail2889:
    unless rx1081_bstack, rx1081_done2887
    pop $I19, rx1081_bstack
    if_null rx1081_cstack, rx1081_cstack_done2892
    unless rx1081_cstack, rx1081_cstack_done2892
    dec $I19
    set $P11, rx1081_cstack[$I19]
  rx1081_cstack_done2892:
    pop rx1081_rep, rx1081_bstack
    pop rx1081_pos, rx1081_bstack
    pop $I19, rx1081_bstack
    lt rx1081_pos, -1, rx1081_done2887
    lt rx1081_pos, 0, rx1081_fail2889
    eq $I19, 0, rx1081_fail2889
    nqp_islist $I20, rx1081_cstack
    unless $I20, rx1081_jump2890
    elements $I18, rx1081_bstack
    le $I18, 0, rx1081_cut2891
    dec $I18
    set $I18, rx1081_bstack[$I18]
  rx1081_cut2891:
    assign rx1081_cstack, $I18
  rx1081_jump2890:
    jump $I19
  rx1081_done2887:
    rx1081_cur."!cursor_fail"()
    .return (rx1081_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_175_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1340
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1086_tgt
    .local int rx1086_pos
    .local int rx1086_off
    .local int rx1086_eos
    .local int rx1086_rep
    .local pmc rx1086_cur
    .local pmc rx1086_curclass
    .local pmc rx1086_bstack
    .local pmc rx1086_cstack
    (rx1086_cur, rx1086_tgt, rx1086_pos, rx1086_curclass, rx1086_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1086_cur
    length rx1086_eos, rx1086_tgt
    eq $I19, 1, rx1086_restart2901
    gt rx1086_pos, rx1086_eos, rx1086_fail2902
    repr_get_attr_int $I11, self, rx1086_curclass, "$!from"
    ne $I11, -1, rxscan1087_done2908
    goto rxscan1087_scan2907
  rxscan1087_loop2906:
    inc rx1086_pos
    gt rx1086_pos, rx1086_eos, rx1086_fail2902
    repr_bind_attr_int rx1086_cur, rx1086_curclass, "$!from", rx1086_pos
  rxscan1087_scan2907:
    nqp_rxmark rx1086_bstack, rxscan1087_loop2906, rx1086_pos, 0
  rxscan1087_done2908:
    repr_bind_attr_int rx1086_cur, rx1086_curclass, "$!pos", rx1086_pos
    $P11 = rx1086_cur."dotty"()
    repr_get_attr_int $I11, $P11, rx1086_curclass, "$!pos"
    lt $I11, 0, rx1086_fail2902
    nqp_rxmark rx1086_bstack, rxsubrule1088_pass2909, -1, 0
  rxsubrule1088_pass2909:
    rx1086_cstack = rx1086_cur."!cursor_capture"($P11, "dotty")
    repr_get_attr_int rx1086_pos, $P11, rx1086_curclass, "$!pos"
    repr_bind_attr_int rx1086_cur, rx1086_curclass, "$!pos", rx1086_pos
    $P11 = rx1086_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1086_curclass, "$!pos"
    lt $I11, 0, rx1086_fail2902
    nqp_rxmark rx1086_bstack, rxsubrule1089_pass2910, -1, 0
  rxsubrule1089_pass2910:
    rx1086_cstack = rx1086_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1086_pos, $P11, rx1086_curclass, "$!pos"
    rx1086_cur."!cursor_pass"(rx1086_pos, "postfix:sym<.>", 'backtrack'=>1)
    .return (rx1086_cur)
  rx1086_restart2901:
    repr_get_attr_obj rx1086_cstack, rx1086_cur, rx1086_curclass, "$!cstack"
  rx1086_fail2902:
    unless rx1086_bstack, rx1086_done2900
    pop $I19, rx1086_bstack
    if_null rx1086_cstack, rx1086_cstack_done2905
    unless rx1086_cstack, rx1086_cstack_done2905
    dec $I19
    set $P11, rx1086_cstack[$I19]
  rx1086_cstack_done2905:
    pop rx1086_rep, rx1086_bstack
    pop rx1086_pos, rx1086_bstack
    pop $I19, rx1086_bstack
    lt rx1086_pos, -1, rx1086_done2900
    lt rx1086_pos, 0, rx1086_fail2902
    eq $I19, 0, rx1086_fail2902
    nqp_islist $I20, rx1086_cstack
    unless $I20, rx1086_jump2903
    elements $I18, rx1086_bstack
    le $I18, 0, rx1086_cut2904
    dec $I18
    set $I18, rx1086_bstack[$I18]
  rx1086_cut2904:
    assign rx1086_cstack, $I18
  rx1086_jump2903:
    jump $I19
  rx1086_done2900:
    rx1086_cur."!cursor_fail"()
    .return (rx1086_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<++>" :subid("cuid_176_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1342
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1090_tgt
    .local int rx1090_pos
    .local int rx1090_off
    .local int rx1090_eos
    .local int rx1090_rep
    .local pmc rx1090_cur
    .local pmc rx1090_curclass
    .local pmc rx1090_bstack
    .local pmc rx1090_cstack
    (rx1090_cur, rx1090_tgt, rx1090_pos, rx1090_curclass, rx1090_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1090_cur
    length rx1090_eos, rx1090_tgt
    eq $I19, 1, rx1090_restart2913
    gt rx1090_pos, rx1090_eos, rx1090_fail2914
    repr_get_attr_int $I11, self, rx1090_curclass, "$!from"
    ne $I11, -1, rxscan1091_done2920
    goto rxscan1091_scan2919
  rxscan1091_loop2918:
    inc rx1090_pos
    gt rx1090_pos, rx1090_eos, rx1090_fail2914
    repr_bind_attr_int rx1090_cur, rx1090_curclass, "$!from", rx1090_pos
  rxscan1091_scan2919:
    nqp_rxmark rx1090_bstack, rxscan1091_loop2918, rx1090_pos, 0
  rxscan1091_done2920:
    nqp_rxmark rx1090_bstack, rxcap1092_fail2922, rx1090_pos, 0
    add $I11, rx1090_pos, 2
    gt $I11, rx1090_eos, rx1090_fail2914
    substr $S10, rx1090_tgt, rx1090_pos, 2
    ne $S10, ucs4:"++", rx1090_fail2914
    add rx1090_pos, 2
    nqp_rxpeek $I19, rx1090_bstack, rxcap1092_fail2922
    inc $I19
    set $I11, rx1090_bstack[$I19]
    repr_bind_attr_int rx1090_cur, rx1090_curclass, "$!pos", rx1090_pos
    $P11 = rx1090_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1090_pos)
    rx1090_cstack = rx1090_cur."!cursor_capture"($P11, "sym")
    goto rxcap1092_done2921
  rxcap1092_fail2922:
    goto rx1090_fail2914
  rxcap1092_done2921:
    repr_bind_attr_int rx1090_cur, rx1090_curclass, "$!pos", rx1090_pos
    $P11 = rx1090_cur."O"("%autoincrement, :op<preinc>")
    repr_get_attr_int $I11, $P11, rx1090_curclass, "$!pos"
    lt $I11, 0, rx1090_fail2914
    nqp_rxmark rx1090_bstack, rxsubrule1093_pass2923, -1, 0
  rxsubrule1093_pass2923:
    rx1090_cstack = rx1090_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1090_pos, $P11, rx1090_curclass, "$!pos"
    rx1090_cur."!cursor_pass"(rx1090_pos, "prefix:sym<++>", 'backtrack'=>1)
    .return (rx1090_cur)
  rx1090_restart2913:
    repr_get_attr_obj rx1090_cstack, rx1090_cur, rx1090_curclass, "$!cstack"
  rx1090_fail2914:
    unless rx1090_bstack, rx1090_done2912
    pop $I19, rx1090_bstack
    if_null rx1090_cstack, rx1090_cstack_done2917
    unless rx1090_cstack, rx1090_cstack_done2917
    dec $I19
    set $P11, rx1090_cstack[$I19]
  rx1090_cstack_done2917:
    pop rx1090_rep, rx1090_bstack
    pop rx1090_pos, rx1090_bstack
    pop $I19, rx1090_bstack
    lt rx1090_pos, -1, rx1090_done2912
    lt rx1090_pos, 0, rx1090_fail2914
    eq $I19, 0, rx1090_fail2914
    nqp_islist $I20, rx1090_cstack
    unless $I20, rx1090_jump2915
    elements $I18, rx1090_bstack
    le $I18, 0, rx1090_cut2916
    dec $I18
    set $I18, rx1090_bstack[$I18]
  rx1090_cut2916:
    assign rx1090_cstack, $I18
  rx1090_jump2915:
    jump $I19
  rx1090_done2912:
    rx1090_cur."!cursor_fail"()
    .return (rx1090_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<-->" :subid("cuid_177_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1343
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1094_tgt
    .local int rx1094_pos
    .local int rx1094_off
    .local int rx1094_eos
    .local int rx1094_rep
    .local pmc rx1094_cur
    .local pmc rx1094_curclass
    .local pmc rx1094_bstack
    .local pmc rx1094_cstack
    (rx1094_cur, rx1094_tgt, rx1094_pos, rx1094_curclass, rx1094_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1094_cur
    length rx1094_eos, rx1094_tgt
    eq $I19, 1, rx1094_restart2926
    gt rx1094_pos, rx1094_eos, rx1094_fail2927
    repr_get_attr_int $I11, self, rx1094_curclass, "$!from"
    ne $I11, -1, rxscan1095_done2933
    goto rxscan1095_scan2932
  rxscan1095_loop2931:
    inc rx1094_pos
    gt rx1094_pos, rx1094_eos, rx1094_fail2927
    repr_bind_attr_int rx1094_cur, rx1094_curclass, "$!from", rx1094_pos
  rxscan1095_scan2932:
    nqp_rxmark rx1094_bstack, rxscan1095_loop2931, rx1094_pos, 0
  rxscan1095_done2933:
    nqp_rxmark rx1094_bstack, rxcap1096_fail2935, rx1094_pos, 0
    add $I11, rx1094_pos, 2
    gt $I11, rx1094_eos, rx1094_fail2927
    substr $S10, rx1094_tgt, rx1094_pos, 2
    ne $S10, ucs4:"--", rx1094_fail2927
    add rx1094_pos, 2
    nqp_rxpeek $I19, rx1094_bstack, rxcap1096_fail2935
    inc $I19
    set $I11, rx1094_bstack[$I19]
    repr_bind_attr_int rx1094_cur, rx1094_curclass, "$!pos", rx1094_pos
    $P11 = rx1094_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1094_pos)
    rx1094_cstack = rx1094_cur."!cursor_capture"($P11, "sym")
    goto rxcap1096_done2934
  rxcap1096_fail2935:
    goto rx1094_fail2927
  rxcap1096_done2934:
    repr_bind_attr_int rx1094_cur, rx1094_curclass, "$!pos", rx1094_pos
    $P11 = rx1094_cur."O"("%autoincrement, :op<predec>")
    repr_get_attr_int $I11, $P11, rx1094_curclass, "$!pos"
    lt $I11, 0, rx1094_fail2927
    nqp_rxmark rx1094_bstack, rxsubrule1097_pass2936, -1, 0
  rxsubrule1097_pass2936:
    rx1094_cstack = rx1094_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1094_pos, $P11, rx1094_curclass, "$!pos"
    rx1094_cur."!cursor_pass"(rx1094_pos, "prefix:sym<-->", 'backtrack'=>1)
    .return (rx1094_cur)
  rx1094_restart2926:
    repr_get_attr_obj rx1094_cstack, rx1094_cur, rx1094_curclass, "$!cstack"
  rx1094_fail2927:
    unless rx1094_bstack, rx1094_done2925
    pop $I19, rx1094_bstack
    if_null rx1094_cstack, rx1094_cstack_done2930
    unless rx1094_cstack, rx1094_cstack_done2930
    dec $I19
    set $P11, rx1094_cstack[$I19]
  rx1094_cstack_done2930:
    pop rx1094_rep, rx1094_bstack
    pop rx1094_pos, rx1094_bstack
    pop $I19, rx1094_bstack
    lt rx1094_pos, -1, rx1094_done2925
    lt rx1094_pos, 0, rx1094_fail2927
    eq $I19, 0, rx1094_fail2927
    nqp_islist $I20, rx1094_cstack
    unless $I20, rx1094_jump2928
    elements $I18, rx1094_bstack
    le $I18, 0, rx1094_cut2929
    dec $I18
    set $I18, rx1094_bstack[$I18]
  rx1094_cut2929:
    assign rx1094_cstack, $I18
  rx1094_jump2928:
    jump $I19
  rx1094_done2925:
    rx1094_cur."!cursor_fail"()
    .return (rx1094_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<++>" :subid("cuid_178_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1345
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1098_tgt
    .local int rx1098_pos
    .local int rx1098_off
    .local int rx1098_eos
    .local int rx1098_rep
    .local pmc rx1098_cur
    .local pmc rx1098_curclass
    .local pmc rx1098_bstack
    .local pmc rx1098_cstack
    (rx1098_cur, rx1098_tgt, rx1098_pos, rx1098_curclass, rx1098_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1098_cur
    length rx1098_eos, rx1098_tgt
    eq $I19, 1, rx1098_restart2939
    gt rx1098_pos, rx1098_eos, rx1098_fail2940
    repr_get_attr_int $I11, self, rx1098_curclass, "$!from"
    ne $I11, -1, rxscan1099_done2946
    goto rxscan1099_scan2945
  rxscan1099_loop2944:
    inc rx1098_pos
    gt rx1098_pos, rx1098_eos, rx1098_fail2940
    repr_bind_attr_int rx1098_cur, rx1098_curclass, "$!from", rx1098_pos
  rxscan1099_scan2945:
    nqp_rxmark rx1098_bstack, rxscan1099_loop2944, rx1098_pos, 0
  rxscan1099_done2946:
    nqp_rxmark rx1098_bstack, rxcap1100_fail2948, rx1098_pos, 0
    add $I11, rx1098_pos, 2
    gt $I11, rx1098_eos, rx1098_fail2940
    substr $S10, rx1098_tgt, rx1098_pos, 2
    ne $S10, ucs4:"++", rx1098_fail2940
    add rx1098_pos, 2
    nqp_rxpeek $I19, rx1098_bstack, rxcap1100_fail2948
    inc $I19
    set $I11, rx1098_bstack[$I19]
    repr_bind_attr_int rx1098_cur, rx1098_curclass, "$!pos", rx1098_pos
    $P11 = rx1098_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1098_pos)
    rx1098_cstack = rx1098_cur."!cursor_capture"($P11, "sym")
    goto rxcap1100_done2947
  rxcap1100_fail2948:
    goto rx1098_fail2940
  rxcap1100_done2947:
    repr_bind_attr_int rx1098_cur, rx1098_curclass, "$!pos", rx1098_pos
    $P11 = rx1098_cur."O"("%autoincrement, :op<postinc>")
    repr_get_attr_int $I11, $P11, rx1098_curclass, "$!pos"
    lt $I11, 0, rx1098_fail2940
    nqp_rxmark rx1098_bstack, rxsubrule1101_pass2949, -1, 0
  rxsubrule1101_pass2949:
    rx1098_cstack = rx1098_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1098_pos, $P11, rx1098_curclass, "$!pos"
    rx1098_cur."!cursor_pass"(rx1098_pos, "postfix:sym<++>", 'backtrack'=>1)
    .return (rx1098_cur)
  rx1098_restart2939:
    repr_get_attr_obj rx1098_cstack, rx1098_cur, rx1098_curclass, "$!cstack"
  rx1098_fail2940:
    unless rx1098_bstack, rx1098_done2938
    pop $I19, rx1098_bstack
    if_null rx1098_cstack, rx1098_cstack_done2943
    unless rx1098_cstack, rx1098_cstack_done2943
    dec $I19
    set $P11, rx1098_cstack[$I19]
  rx1098_cstack_done2943:
    pop rx1098_rep, rx1098_bstack
    pop rx1098_pos, rx1098_bstack
    pop $I19, rx1098_bstack
    lt rx1098_pos, -1, rx1098_done2938
    lt rx1098_pos, 0, rx1098_fail2940
    eq $I19, 0, rx1098_fail2940
    nqp_islist $I20, rx1098_cstack
    unless $I20, rx1098_jump2941
    elements $I18, rx1098_bstack
    le $I18, 0, rx1098_cut2942
    dec $I18
    set $I18, rx1098_bstack[$I18]
  rx1098_cut2942:
    assign rx1098_cstack, $I18
  rx1098_jump2941:
    jump $I19
  rx1098_done2938:
    rx1098_cur."!cursor_fail"()
    .return (rx1098_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<-->" :subid("cuid_179_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1346
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1102_tgt
    .local int rx1102_pos
    .local int rx1102_off
    .local int rx1102_eos
    .local int rx1102_rep
    .local pmc rx1102_cur
    .local pmc rx1102_curclass
    .local pmc rx1102_bstack
    .local pmc rx1102_cstack
    (rx1102_cur, rx1102_tgt, rx1102_pos, rx1102_curclass, rx1102_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1102_cur
    length rx1102_eos, rx1102_tgt
    eq $I19, 1, rx1102_restart2952
    gt rx1102_pos, rx1102_eos, rx1102_fail2953
    repr_get_attr_int $I11, self, rx1102_curclass, "$!from"
    ne $I11, -1, rxscan1103_done2959
    goto rxscan1103_scan2958
  rxscan1103_loop2957:
    inc rx1102_pos
    gt rx1102_pos, rx1102_eos, rx1102_fail2953
    repr_bind_attr_int rx1102_cur, rx1102_curclass, "$!from", rx1102_pos
  rxscan1103_scan2958:
    nqp_rxmark rx1102_bstack, rxscan1103_loop2957, rx1102_pos, 0
  rxscan1103_done2959:
    nqp_rxmark rx1102_bstack, rxcap1104_fail2961, rx1102_pos, 0
    add $I11, rx1102_pos, 2
    gt $I11, rx1102_eos, rx1102_fail2953
    substr $S10, rx1102_tgt, rx1102_pos, 2
    ne $S10, ucs4:"--", rx1102_fail2953
    add rx1102_pos, 2
    nqp_rxpeek $I19, rx1102_bstack, rxcap1104_fail2961
    inc $I19
    set $I11, rx1102_bstack[$I19]
    repr_bind_attr_int rx1102_cur, rx1102_curclass, "$!pos", rx1102_pos
    $P11 = rx1102_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1102_pos)
    rx1102_cstack = rx1102_cur."!cursor_capture"($P11, "sym")
    goto rxcap1104_done2960
  rxcap1104_fail2961:
    goto rx1102_fail2953
  rxcap1104_done2960:
    repr_bind_attr_int rx1102_cur, rx1102_curclass, "$!pos", rx1102_pos
    $P11 = rx1102_cur."O"("%autoincrement, :op<postdec>")
    repr_get_attr_int $I11, $P11, rx1102_curclass, "$!pos"
    lt $I11, 0, rx1102_fail2953
    nqp_rxmark rx1102_bstack, rxsubrule1105_pass2962, -1, 0
  rxsubrule1105_pass2962:
    rx1102_cstack = rx1102_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1102_pos, $P11, rx1102_curclass, "$!pos"
    rx1102_cur."!cursor_pass"(rx1102_pos, "postfix:sym<-->", 'backtrack'=>1)
    .return (rx1102_cur)
  rx1102_restart2952:
    repr_get_attr_obj rx1102_cstack, rx1102_cur, rx1102_curclass, "$!cstack"
  rx1102_fail2953:
    unless rx1102_bstack, rx1102_done2951
    pop $I19, rx1102_bstack
    if_null rx1102_cstack, rx1102_cstack_done2956
    unless rx1102_cstack, rx1102_cstack_done2956
    dec $I19
    set $P11, rx1102_cstack[$I19]
  rx1102_cstack_done2956:
    pop rx1102_rep, rx1102_bstack
    pop rx1102_pos, rx1102_bstack
    pop $I19, rx1102_bstack
    lt rx1102_pos, -1, rx1102_done2951
    lt rx1102_pos, 0, rx1102_fail2953
    eq $I19, 0, rx1102_fail2953
    nqp_islist $I20, rx1102_cstack
    unless $I20, rx1102_jump2954
    elements $I18, rx1102_bstack
    le $I18, 0, rx1102_cut2955
    dec $I18
    set $I18, rx1102_bstack[$I18]
  rx1102_cut2955:
    assign rx1102_cstack, $I18
  rx1102_jump2954:
    jump $I19
  rx1102_done2951:
    rx1102_cur."!cursor_fail"()
    .return (rx1102_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<**>" :subid("cuid_180_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1348
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1106_tgt
    .local int rx1106_pos
    .local int rx1106_off
    .local int rx1106_eos
    .local int rx1106_rep
    .local pmc rx1106_cur
    .local pmc rx1106_curclass
    .local pmc rx1106_bstack
    .local pmc rx1106_cstack
    (rx1106_cur, rx1106_tgt, rx1106_pos, rx1106_curclass, rx1106_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1106_cur
    length rx1106_eos, rx1106_tgt
    eq $I19, 1, rx1106_restart2965
    gt rx1106_pos, rx1106_eos, rx1106_fail2966
    repr_get_attr_int $I11, self, rx1106_curclass, "$!from"
    ne $I11, -1, rxscan1107_done2972
    goto rxscan1107_scan2971
  rxscan1107_loop2970:
    inc rx1106_pos
    gt rx1106_pos, rx1106_eos, rx1106_fail2966
    repr_bind_attr_int rx1106_cur, rx1106_curclass, "$!from", rx1106_pos
  rxscan1107_scan2971:
    nqp_rxmark rx1106_bstack, rxscan1107_loop2970, rx1106_pos, 0
  rxscan1107_done2972:
    nqp_rxmark rx1106_bstack, rxcap1108_fail2974, rx1106_pos, 0
    add $I11, rx1106_pos, 2
    gt $I11, rx1106_eos, rx1106_fail2966
    substr $S10, rx1106_tgt, rx1106_pos, 2
    ne $S10, ucs4:"**", rx1106_fail2966
    add rx1106_pos, 2
    nqp_rxpeek $I19, rx1106_bstack, rxcap1108_fail2974
    inc $I19
    set $I11, rx1106_bstack[$I19]
    repr_bind_attr_int rx1106_cur, rx1106_curclass, "$!pos", rx1106_pos
    $P11 = rx1106_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1106_pos)
    rx1106_cstack = rx1106_cur."!cursor_capture"($P11, "sym")
    goto rxcap1108_done2973
  rxcap1108_fail2974:
    goto rx1106_fail2966
  rxcap1108_done2973:
    repr_bind_attr_int rx1106_cur, rx1106_curclass, "$!pos", rx1106_pos
    $P11 = rx1106_cur."O"("%exponentiation, :op<pow_n>")
    repr_get_attr_int $I11, $P11, rx1106_curclass, "$!pos"
    lt $I11, 0, rx1106_fail2966
    nqp_rxmark rx1106_bstack, rxsubrule1109_pass2975, -1, 0
  rxsubrule1109_pass2975:
    rx1106_cstack = rx1106_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1106_pos, $P11, rx1106_curclass, "$!pos"
    rx1106_cur."!cursor_pass"(rx1106_pos, "infix:sym<**>", 'backtrack'=>1)
    .return (rx1106_cur)
  rx1106_restart2965:
    repr_get_attr_obj rx1106_cstack, rx1106_cur, rx1106_curclass, "$!cstack"
  rx1106_fail2966:
    unless rx1106_bstack, rx1106_done2964
    pop $I19, rx1106_bstack
    if_null rx1106_cstack, rx1106_cstack_done2969
    unless rx1106_cstack, rx1106_cstack_done2969
    dec $I19
    set $P11, rx1106_cstack[$I19]
  rx1106_cstack_done2969:
    pop rx1106_rep, rx1106_bstack
    pop rx1106_pos, rx1106_bstack
    pop $I19, rx1106_bstack
    lt rx1106_pos, -1, rx1106_done2964
    lt rx1106_pos, 0, rx1106_fail2966
    eq $I19, 0, rx1106_fail2966
    nqp_islist $I20, rx1106_cstack
    unless $I20, rx1106_jump2967
    elements $I18, rx1106_bstack
    le $I18, 0, rx1106_cut2968
    dec $I18
    set $I18, rx1106_bstack[$I18]
  rx1106_cut2968:
    assign rx1106_cstack, $I18
  rx1106_jump2967:
    jump $I19
  rx1106_done2964:
    rx1106_cur."!cursor_fail"()
    .return (rx1106_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<+>" :subid("cuid_181_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1350
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1110_tgt
    .local int rx1110_pos
    .local int rx1110_off
    .local int rx1110_eos
    .local int rx1110_rep
    .local pmc rx1110_cur
    .local pmc rx1110_curclass
    .local pmc rx1110_bstack
    .local pmc rx1110_cstack
    (rx1110_cur, rx1110_tgt, rx1110_pos, rx1110_curclass, rx1110_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1110_cur
    length rx1110_eos, rx1110_tgt
    eq $I19, 1, rx1110_restart2978
    gt rx1110_pos, rx1110_eos, rx1110_fail2979
    repr_get_attr_int $I11, self, rx1110_curclass, "$!from"
    ne $I11, -1, rxscan1111_done2985
    goto rxscan1111_scan2984
  rxscan1111_loop2983:
    inc rx1110_pos
    gt rx1110_pos, rx1110_eos, rx1110_fail2979
    repr_bind_attr_int rx1110_cur, rx1110_curclass, "$!from", rx1110_pos
  rxscan1111_scan2984:
    nqp_rxmark rx1110_bstack, rxscan1111_loop2983, rx1110_pos, 0
  rxscan1111_done2985:
    nqp_rxmark rx1110_bstack, rxcap1112_fail2987, rx1110_pos, 0
    add $I11, rx1110_pos, 1
    gt $I11, rx1110_eos, rx1110_fail2979
    substr $S10, rx1110_tgt, rx1110_pos, 1
    ne $S10, ucs4:"+", rx1110_fail2979
    add rx1110_pos, 1
    nqp_rxpeek $I19, rx1110_bstack, rxcap1112_fail2987
    inc $I19
    set $I11, rx1110_bstack[$I19]
    repr_bind_attr_int rx1110_cur, rx1110_curclass, "$!pos", rx1110_pos
    $P11 = rx1110_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1110_pos)
    rx1110_cstack = rx1110_cur."!cursor_capture"($P11, "sym")
    goto rxcap1112_done2986
  rxcap1112_fail2987:
    goto rx1110_fail2979
  rxcap1112_done2986:
    repr_bind_attr_int rx1110_cur, rx1110_curclass, "$!pos", rx1110_pos
    $P11 = rx1110_cur."O"("%symbolic_unary, :op<numify>")
    repr_get_attr_int $I11, $P11, rx1110_curclass, "$!pos"
    lt $I11, 0, rx1110_fail2979
    nqp_rxmark rx1110_bstack, rxsubrule1113_pass2988, -1, 0
  rxsubrule1113_pass2988:
    rx1110_cstack = rx1110_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1110_pos, $P11, rx1110_curclass, "$!pos"
    rx1110_cur."!cursor_pass"(rx1110_pos, "prefix:sym<+>", 'backtrack'=>1)
    .return (rx1110_cur)
  rx1110_restart2978:
    repr_get_attr_obj rx1110_cstack, rx1110_cur, rx1110_curclass, "$!cstack"
  rx1110_fail2979:
    unless rx1110_bstack, rx1110_done2977
    pop $I19, rx1110_bstack
    if_null rx1110_cstack, rx1110_cstack_done2982
    unless rx1110_cstack, rx1110_cstack_done2982
    dec $I19
    set $P11, rx1110_cstack[$I19]
  rx1110_cstack_done2982:
    pop rx1110_rep, rx1110_bstack
    pop rx1110_pos, rx1110_bstack
    pop $I19, rx1110_bstack
    lt rx1110_pos, -1, rx1110_done2977
    lt rx1110_pos, 0, rx1110_fail2979
    eq $I19, 0, rx1110_fail2979
    nqp_islist $I20, rx1110_cstack
    unless $I20, rx1110_jump2980
    elements $I18, rx1110_bstack
    le $I18, 0, rx1110_cut2981
    dec $I18
    set $I18, rx1110_bstack[$I18]
  rx1110_cut2981:
    assign rx1110_cstack, $I18
  rx1110_jump2980:
    jump $I19
  rx1110_done2977:
    rx1110_cur."!cursor_fail"()
    .return (rx1110_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<~>" :subid("cuid_182_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1351
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1114_tgt
    .local int rx1114_pos
    .local int rx1114_off
    .local int rx1114_eos
    .local int rx1114_rep
    .local pmc rx1114_cur
    .local pmc rx1114_curclass
    .local pmc rx1114_bstack
    .local pmc rx1114_cstack
    (rx1114_cur, rx1114_tgt, rx1114_pos, rx1114_curclass, rx1114_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1114_cur
    length rx1114_eos, rx1114_tgt
    eq $I19, 1, rx1114_restart2991
    gt rx1114_pos, rx1114_eos, rx1114_fail2992
    repr_get_attr_int $I11, self, rx1114_curclass, "$!from"
    ne $I11, -1, rxscan1115_done2998
    goto rxscan1115_scan2997
  rxscan1115_loop2996:
    inc rx1114_pos
    gt rx1114_pos, rx1114_eos, rx1114_fail2992
    repr_bind_attr_int rx1114_cur, rx1114_curclass, "$!from", rx1114_pos
  rxscan1115_scan2997:
    nqp_rxmark rx1114_bstack, rxscan1115_loop2996, rx1114_pos, 0
  rxscan1115_done2998:
    nqp_rxmark rx1114_bstack, rxcap1116_fail3000, rx1114_pos, 0
    add $I11, rx1114_pos, 1
    gt $I11, rx1114_eos, rx1114_fail2992
    substr $S10, rx1114_tgt, rx1114_pos, 1
    ne $S10, ucs4:"~", rx1114_fail2992
    add rx1114_pos, 1
    nqp_rxpeek $I19, rx1114_bstack, rxcap1116_fail3000
    inc $I19
    set $I11, rx1114_bstack[$I19]
    repr_bind_attr_int rx1114_cur, rx1114_curclass, "$!pos", rx1114_pos
    $P11 = rx1114_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1114_pos)
    rx1114_cstack = rx1114_cur."!cursor_capture"($P11, "sym")
    goto rxcap1116_done2999
  rxcap1116_fail3000:
    goto rx1114_fail2992
  rxcap1116_done2999:
    repr_bind_attr_int rx1114_cur, rx1114_curclass, "$!pos", rx1114_pos
    $P11 = rx1114_cur."O"("%symbolic_unary, :op<stringify>")
    repr_get_attr_int $I11, $P11, rx1114_curclass, "$!pos"
    lt $I11, 0, rx1114_fail2992
    nqp_rxmark rx1114_bstack, rxsubrule1117_pass3001, -1, 0
  rxsubrule1117_pass3001:
    rx1114_cstack = rx1114_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1114_pos, $P11, rx1114_curclass, "$!pos"
    rx1114_cur."!cursor_pass"(rx1114_pos, "prefix:sym<~>", 'backtrack'=>1)
    .return (rx1114_cur)
  rx1114_restart2991:
    repr_get_attr_obj rx1114_cstack, rx1114_cur, rx1114_curclass, "$!cstack"
  rx1114_fail2992:
    unless rx1114_bstack, rx1114_done2990
    pop $I19, rx1114_bstack
    if_null rx1114_cstack, rx1114_cstack_done2995
    unless rx1114_cstack, rx1114_cstack_done2995
    dec $I19
    set $P11, rx1114_cstack[$I19]
  rx1114_cstack_done2995:
    pop rx1114_rep, rx1114_bstack
    pop rx1114_pos, rx1114_bstack
    pop $I19, rx1114_bstack
    lt rx1114_pos, -1, rx1114_done2990
    lt rx1114_pos, 0, rx1114_fail2992
    eq $I19, 0, rx1114_fail2992
    nqp_islist $I20, rx1114_cstack
    unless $I20, rx1114_jump2993
    elements $I18, rx1114_bstack
    le $I18, 0, rx1114_cut2994
    dec $I18
    set $I18, rx1114_bstack[$I18]
  rx1114_cut2994:
    assign rx1114_cstack, $I18
  rx1114_jump2993:
    jump $I19
  rx1114_done2990:
    rx1114_cur."!cursor_fail"()
    .return (rx1114_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<->" :subid("cuid_183_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1352
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1118_tgt
    .local int rx1118_pos
    .local int rx1118_off
    .local int rx1118_eos
    .local int rx1118_rep
    .local pmc rx1118_cur
    .local pmc rx1118_curclass
    .local pmc rx1118_bstack
    .local pmc rx1118_cstack
    (rx1118_cur, rx1118_tgt, rx1118_pos, rx1118_curclass, rx1118_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1118_cur
    length rx1118_eos, rx1118_tgt
    eq $I19, 1, rx1118_restart3004
    gt rx1118_pos, rx1118_eos, rx1118_fail3005
    repr_get_attr_int $I11, self, rx1118_curclass, "$!from"
    ne $I11, -1, rxscan1119_done3011
    goto rxscan1119_scan3010
  rxscan1119_loop3009:
    inc rx1118_pos
    gt rx1118_pos, rx1118_eos, rx1118_fail3005
    repr_bind_attr_int rx1118_cur, rx1118_curclass, "$!from", rx1118_pos
  rxscan1119_scan3010:
    nqp_rxmark rx1118_bstack, rxscan1119_loop3009, rx1118_pos, 0
  rxscan1119_done3011:
    nqp_rxmark rx1118_bstack, rxcap1120_fail3013, rx1118_pos, 0
    add $I11, rx1118_pos, 1
    gt $I11, rx1118_eos, rx1118_fail3005
    substr $S10, rx1118_tgt, rx1118_pos, 1
    ne $S10, ucs4:"-", rx1118_fail3005
    add rx1118_pos, 1
    nqp_rxpeek $I19, rx1118_bstack, rxcap1120_fail3013
    inc $I19
    set $I11, rx1118_bstack[$I19]
    repr_bind_attr_int rx1118_cur, rx1118_curclass, "$!pos", rx1118_pos
    $P11 = rx1118_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1118_pos)
    rx1118_cstack = rx1118_cur."!cursor_capture"($P11, "sym")
    goto rxcap1120_done3012
  rxcap1120_fail3013:
    goto rx1118_fail3005
  rxcap1120_done3012:
    ge rx1118_pos, rx1118_eos, rx1118_fail3005
    substr $S11, rx1118_tgt, rx1118_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx1118_fail3005
    repr_bind_attr_int rx1118_cur, rx1118_curclass, "$!pos", rx1118_pos
    $P11 = rx1118_cur."number"()
    repr_get_attr_int $I11, $P11, rx1118_curclass, "$!pos"
    ge $I11, 0, rx1118_fail3005
    repr_bind_attr_int rx1118_cur, rx1118_curclass, "$!pos", rx1118_pos
    $P11 = rx1118_cur."O"("%symbolic_unary, :op<neg_n>")
    repr_get_attr_int $I11, $P11, rx1118_curclass, "$!pos"
    lt $I11, 0, rx1118_fail3005
    nqp_rxmark rx1118_bstack, rxsubrule1121_pass3014, -1, 0
  rxsubrule1121_pass3014:
    rx1118_cstack = rx1118_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1118_pos, $P11, rx1118_curclass, "$!pos"
    rx1118_cur."!cursor_pass"(rx1118_pos, "prefix:sym<->", 'backtrack'=>1)
    .return (rx1118_cur)
  rx1118_restart3004:
    repr_get_attr_obj rx1118_cstack, rx1118_cur, rx1118_curclass, "$!cstack"
  rx1118_fail3005:
    unless rx1118_bstack, rx1118_done3003
    pop $I19, rx1118_bstack
    if_null rx1118_cstack, rx1118_cstack_done3008
    unless rx1118_cstack, rx1118_cstack_done3008
    dec $I19
    set $P11, rx1118_cstack[$I19]
  rx1118_cstack_done3008:
    pop rx1118_rep, rx1118_bstack
    pop rx1118_pos, rx1118_bstack
    pop $I19, rx1118_bstack
    lt rx1118_pos, -1, rx1118_done3003
    lt rx1118_pos, 0, rx1118_fail3005
    eq $I19, 0, rx1118_fail3005
    nqp_islist $I20, rx1118_cstack
    unless $I20, rx1118_jump3006
    elements $I18, rx1118_bstack
    le $I18, 0, rx1118_cut3007
    dec $I18
    set $I18, rx1118_bstack[$I18]
  rx1118_cut3007:
    assign rx1118_cstack, $I18
  rx1118_jump3006:
    jump $I19
  rx1118_done3003:
    rx1118_cur."!cursor_fail"()
    .return (rx1118_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<?>" :subid("cuid_184_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1353
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1122_tgt
    .local int rx1122_pos
    .local int rx1122_off
    .local int rx1122_eos
    .local int rx1122_rep
    .local pmc rx1122_cur
    .local pmc rx1122_curclass
    .local pmc rx1122_bstack
    .local pmc rx1122_cstack
    (rx1122_cur, rx1122_tgt, rx1122_pos, rx1122_curclass, rx1122_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1122_cur
    length rx1122_eos, rx1122_tgt
    eq $I19, 1, rx1122_restart3017
    gt rx1122_pos, rx1122_eos, rx1122_fail3018
    repr_get_attr_int $I11, self, rx1122_curclass, "$!from"
    ne $I11, -1, rxscan1123_done3024
    goto rxscan1123_scan3023
  rxscan1123_loop3022:
    inc rx1122_pos
    gt rx1122_pos, rx1122_eos, rx1122_fail3018
    repr_bind_attr_int rx1122_cur, rx1122_curclass, "$!from", rx1122_pos
  rxscan1123_scan3023:
    nqp_rxmark rx1122_bstack, rxscan1123_loop3022, rx1122_pos, 0
  rxscan1123_done3024:
    nqp_rxmark rx1122_bstack, rxcap1124_fail3026, rx1122_pos, 0
    add $I11, rx1122_pos, 1
    gt $I11, rx1122_eos, rx1122_fail3018
    substr $S10, rx1122_tgt, rx1122_pos, 1
    ne $S10, ucs4:"?", rx1122_fail3018
    add rx1122_pos, 1
    nqp_rxpeek $I19, rx1122_bstack, rxcap1124_fail3026
    inc $I19
    set $I11, rx1122_bstack[$I19]
    repr_bind_attr_int rx1122_cur, rx1122_curclass, "$!pos", rx1122_pos
    $P11 = rx1122_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1122_pos)
    rx1122_cstack = rx1122_cur."!cursor_capture"($P11, "sym")
    goto rxcap1124_done3025
  rxcap1124_fail3026:
    goto rx1122_fail3018
  rxcap1124_done3025:
    repr_bind_attr_int rx1122_cur, rx1122_curclass, "$!pos", rx1122_pos
    $P11 = rx1122_cur."O"("%symbolic_unary, :op<istrue>")
    repr_get_attr_int $I11, $P11, rx1122_curclass, "$!pos"
    lt $I11, 0, rx1122_fail3018
    nqp_rxmark rx1122_bstack, rxsubrule1125_pass3027, -1, 0
  rxsubrule1125_pass3027:
    rx1122_cstack = rx1122_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1122_pos, $P11, rx1122_curclass, "$!pos"
    rx1122_cur."!cursor_pass"(rx1122_pos, "prefix:sym<?>", 'backtrack'=>1)
    .return (rx1122_cur)
  rx1122_restart3017:
    repr_get_attr_obj rx1122_cstack, rx1122_cur, rx1122_curclass, "$!cstack"
  rx1122_fail3018:
    unless rx1122_bstack, rx1122_done3016
    pop $I19, rx1122_bstack
    if_null rx1122_cstack, rx1122_cstack_done3021
    unless rx1122_cstack, rx1122_cstack_done3021
    dec $I19
    set $P11, rx1122_cstack[$I19]
  rx1122_cstack_done3021:
    pop rx1122_rep, rx1122_bstack
    pop rx1122_pos, rx1122_bstack
    pop $I19, rx1122_bstack
    lt rx1122_pos, -1, rx1122_done3016
    lt rx1122_pos, 0, rx1122_fail3018
    eq $I19, 0, rx1122_fail3018
    nqp_islist $I20, rx1122_cstack
    unless $I20, rx1122_jump3019
    elements $I18, rx1122_bstack
    le $I18, 0, rx1122_cut3020
    dec $I18
    set $I18, rx1122_bstack[$I18]
  rx1122_cut3020:
    assign rx1122_cstack, $I18
  rx1122_jump3019:
    jump $I19
  rx1122_done3016:
    rx1122_cur."!cursor_fail"()
    .return (rx1122_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<!>" :subid("cuid_185_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1354
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1126_tgt
    .local int rx1126_pos
    .local int rx1126_off
    .local int rx1126_eos
    .local int rx1126_rep
    .local pmc rx1126_cur
    .local pmc rx1126_curclass
    .local pmc rx1126_bstack
    .local pmc rx1126_cstack
    (rx1126_cur, rx1126_tgt, rx1126_pos, rx1126_curclass, rx1126_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1126_cur
    length rx1126_eos, rx1126_tgt
    eq $I19, 1, rx1126_restart3030
    gt rx1126_pos, rx1126_eos, rx1126_fail3031
    repr_get_attr_int $I11, self, rx1126_curclass, "$!from"
    ne $I11, -1, rxscan1127_done3037
    goto rxscan1127_scan3036
  rxscan1127_loop3035:
    inc rx1126_pos
    gt rx1126_pos, rx1126_eos, rx1126_fail3031
    repr_bind_attr_int rx1126_cur, rx1126_curclass, "$!from", rx1126_pos
  rxscan1127_scan3036:
    nqp_rxmark rx1126_bstack, rxscan1127_loop3035, rx1126_pos, 0
  rxscan1127_done3037:
    nqp_rxmark rx1126_bstack, rxcap1128_fail3039, rx1126_pos, 0
    add $I11, rx1126_pos, 1
    gt $I11, rx1126_eos, rx1126_fail3031
    substr $S10, rx1126_tgt, rx1126_pos, 1
    ne $S10, ucs4:"!", rx1126_fail3031
    add rx1126_pos, 1
    nqp_rxpeek $I19, rx1126_bstack, rxcap1128_fail3039
    inc $I19
    set $I11, rx1126_bstack[$I19]
    repr_bind_attr_int rx1126_cur, rx1126_curclass, "$!pos", rx1126_pos
    $P11 = rx1126_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1126_pos)
    rx1126_cstack = rx1126_cur."!cursor_capture"($P11, "sym")
    goto rxcap1128_done3038
  rxcap1128_fail3039:
    goto rx1126_fail3031
  rxcap1128_done3038:
    repr_bind_attr_int rx1126_cur, rx1126_curclass, "$!pos", rx1126_pos
    $P11 = rx1126_cur."O"("%symbolic_unary, :op<falsey>")
    repr_get_attr_int $I11, $P11, rx1126_curclass, "$!pos"
    lt $I11, 0, rx1126_fail3031
    nqp_rxmark rx1126_bstack, rxsubrule1129_pass3040, -1, 0
  rxsubrule1129_pass3040:
    rx1126_cstack = rx1126_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1126_pos, $P11, rx1126_curclass, "$!pos"
    rx1126_cur."!cursor_pass"(rx1126_pos, "prefix:sym<!>", 'backtrack'=>1)
    .return (rx1126_cur)
  rx1126_restart3030:
    repr_get_attr_obj rx1126_cstack, rx1126_cur, rx1126_curclass, "$!cstack"
  rx1126_fail3031:
    unless rx1126_bstack, rx1126_done3029
    pop $I19, rx1126_bstack
    if_null rx1126_cstack, rx1126_cstack_done3034
    unless rx1126_cstack, rx1126_cstack_done3034
    dec $I19
    set $P11, rx1126_cstack[$I19]
  rx1126_cstack_done3034:
    pop rx1126_rep, rx1126_bstack
    pop rx1126_pos, rx1126_bstack
    pop $I19, rx1126_bstack
    lt rx1126_pos, -1, rx1126_done3029
    lt rx1126_pos, 0, rx1126_fail3031
    eq $I19, 0, rx1126_fail3031
    nqp_islist $I20, rx1126_cstack
    unless $I20, rx1126_jump3032
    elements $I18, rx1126_bstack
    le $I18, 0, rx1126_cut3033
    dec $I18
    set $I18, rx1126_bstack[$I18]
  rx1126_cut3033:
    assign rx1126_cstack, $I18
  rx1126_jump3032:
    jump $I19
  rx1126_done3029:
    rx1126_cur."!cursor_fail"()
    .return (rx1126_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<|>" :subid("cuid_186_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1355
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1130_tgt
    .local int rx1130_pos
    .local int rx1130_off
    .local int rx1130_eos
    .local int rx1130_rep
    .local pmc rx1130_cur
    .local pmc rx1130_curclass
    .local pmc rx1130_bstack
    .local pmc rx1130_cstack
    (rx1130_cur, rx1130_tgt, rx1130_pos, rx1130_curclass, rx1130_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1130_cur
    length rx1130_eos, rx1130_tgt
    eq $I19, 1, rx1130_restart3043
    gt rx1130_pos, rx1130_eos, rx1130_fail3044
    repr_get_attr_int $I11, self, rx1130_curclass, "$!from"
    ne $I11, -1, rxscan1131_done3050
    goto rxscan1131_scan3049
  rxscan1131_loop3048:
    inc rx1130_pos
    gt rx1130_pos, rx1130_eos, rx1130_fail3044
    repr_bind_attr_int rx1130_cur, rx1130_curclass, "$!from", rx1130_pos
  rxscan1131_scan3049:
    nqp_rxmark rx1130_bstack, rxscan1131_loop3048, rx1130_pos, 0
  rxscan1131_done3050:
    nqp_rxmark rx1130_bstack, rxcap1132_fail3052, rx1130_pos, 0
    add $I11, rx1130_pos, 1
    gt $I11, rx1130_eos, rx1130_fail3044
    substr $S10, rx1130_tgt, rx1130_pos, 1
    ne $S10, ucs4:"|", rx1130_fail3044
    add rx1130_pos, 1
    nqp_rxpeek $I19, rx1130_bstack, rxcap1132_fail3052
    inc $I19
    set $I11, rx1130_bstack[$I19]
    repr_bind_attr_int rx1130_cur, rx1130_curclass, "$!pos", rx1130_pos
    $P11 = rx1130_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1130_pos)
    rx1130_cstack = rx1130_cur."!cursor_capture"($P11, "sym")
    goto rxcap1132_done3051
  rxcap1132_fail3052:
    goto rx1130_fail3044
  rxcap1132_done3051:
    repr_bind_attr_int rx1130_cur, rx1130_curclass, "$!pos", rx1130_pos
    $P11 = rx1130_cur."O"("%symbolic_unary")
    repr_get_attr_int $I11, $P11, rx1130_curclass, "$!pos"
    lt $I11, 0, rx1130_fail3044
    nqp_rxmark rx1130_bstack, rxsubrule1133_pass3053, -1, 0
  rxsubrule1133_pass3053:
    rx1130_cstack = rx1130_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1130_pos, $P11, rx1130_curclass, "$!pos"
    rx1130_cur."!cursor_pass"(rx1130_pos, "prefix:sym<|>", 'backtrack'=>1)
    .return (rx1130_cur)
  rx1130_restart3043:
    repr_get_attr_obj rx1130_cstack, rx1130_cur, rx1130_curclass, "$!cstack"
  rx1130_fail3044:
    unless rx1130_bstack, rx1130_done3042
    pop $I19, rx1130_bstack
    if_null rx1130_cstack, rx1130_cstack_done3047
    unless rx1130_cstack, rx1130_cstack_done3047
    dec $I19
    set $P11, rx1130_cstack[$I19]
  rx1130_cstack_done3047:
    pop rx1130_rep, rx1130_bstack
    pop rx1130_pos, rx1130_bstack
    pop $I19, rx1130_bstack
    lt rx1130_pos, -1, rx1130_done3042
    lt rx1130_pos, 0, rx1130_fail3044
    eq $I19, 0, rx1130_fail3044
    nqp_islist $I20, rx1130_cstack
    unless $I20, rx1130_jump3045
    elements $I18, rx1130_bstack
    le $I18, 0, rx1130_cut3046
    dec $I18
    set $I18, rx1130_bstack[$I18]
  rx1130_cut3046:
    assign rx1130_cstack, $I18
  rx1130_jump3045:
    jump $I19
  rx1130_done3042:
    rx1130_cur."!cursor_fail"()
    .return (rx1130_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<*>" :subid("cuid_187_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1357
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1134_tgt
    .local int rx1134_pos
    .local int rx1134_off
    .local int rx1134_eos
    .local int rx1134_rep
    .local pmc rx1134_cur
    .local pmc rx1134_curclass
    .local pmc rx1134_bstack
    .local pmc rx1134_cstack
    (rx1134_cur, rx1134_tgt, rx1134_pos, rx1134_curclass, rx1134_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1134_cur
    length rx1134_eos, rx1134_tgt
    eq $I19, 1, rx1134_restart3056
    gt rx1134_pos, rx1134_eos, rx1134_fail3057
    repr_get_attr_int $I11, self, rx1134_curclass, "$!from"
    ne $I11, -1, rxscan1135_done3063
    goto rxscan1135_scan3062
  rxscan1135_loop3061:
    inc rx1134_pos
    gt rx1134_pos, rx1134_eos, rx1134_fail3057
    repr_bind_attr_int rx1134_cur, rx1134_curclass, "$!from", rx1134_pos
  rxscan1135_scan3062:
    nqp_rxmark rx1134_bstack, rxscan1135_loop3061, rx1134_pos, 0
  rxscan1135_done3063:
    nqp_rxmark rx1134_bstack, rxcap1136_fail3065, rx1134_pos, 0
    add $I11, rx1134_pos, 1
    gt $I11, rx1134_eos, rx1134_fail3057
    substr $S10, rx1134_tgt, rx1134_pos, 1
    ne $S10, ucs4:"*", rx1134_fail3057
    add rx1134_pos, 1
    nqp_rxpeek $I19, rx1134_bstack, rxcap1136_fail3065
    inc $I19
    set $I11, rx1134_bstack[$I19]
    repr_bind_attr_int rx1134_cur, rx1134_curclass, "$!pos", rx1134_pos
    $P11 = rx1134_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1134_pos)
    rx1134_cstack = rx1134_cur."!cursor_capture"($P11, "sym")
    goto rxcap1136_done3064
  rxcap1136_fail3065:
    goto rx1134_fail3057
  rxcap1136_done3064:
    repr_bind_attr_int rx1134_cur, rx1134_curclass, "$!pos", rx1134_pos
    $P11 = rx1134_cur."O"("%multiplicative, :op<mul_n>")
    repr_get_attr_int $I11, $P11, rx1134_curclass, "$!pos"
    lt $I11, 0, rx1134_fail3057
    nqp_rxmark rx1134_bstack, rxsubrule1137_pass3066, -1, 0
  rxsubrule1137_pass3066:
    rx1134_cstack = rx1134_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1134_pos, $P11, rx1134_curclass, "$!pos"
    rx1134_cur."!cursor_pass"(rx1134_pos, "infix:sym<*>", 'backtrack'=>1)
    .return (rx1134_cur)
  rx1134_restart3056:
    repr_get_attr_obj rx1134_cstack, rx1134_cur, rx1134_curclass, "$!cstack"
  rx1134_fail3057:
    unless rx1134_bstack, rx1134_done3055
    pop $I19, rx1134_bstack
    if_null rx1134_cstack, rx1134_cstack_done3060
    unless rx1134_cstack, rx1134_cstack_done3060
    dec $I19
    set $P11, rx1134_cstack[$I19]
  rx1134_cstack_done3060:
    pop rx1134_rep, rx1134_bstack
    pop rx1134_pos, rx1134_bstack
    pop $I19, rx1134_bstack
    lt rx1134_pos, -1, rx1134_done3055
    lt rx1134_pos, 0, rx1134_fail3057
    eq $I19, 0, rx1134_fail3057
    nqp_islist $I20, rx1134_cstack
    unless $I20, rx1134_jump3058
    elements $I18, rx1134_bstack
    le $I18, 0, rx1134_cut3059
    dec $I18
    set $I18, rx1134_bstack[$I18]
  rx1134_cut3059:
    assign rx1134_cstack, $I18
  rx1134_jump3058:
    jump $I19
  rx1134_done3055:
    rx1134_cur."!cursor_fail"()
    .return (rx1134_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym</>" :subid("cuid_188_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1358
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1138_tgt
    .local int rx1138_pos
    .local int rx1138_off
    .local int rx1138_eos
    .local int rx1138_rep
    .local pmc rx1138_cur
    .local pmc rx1138_curclass
    .local pmc rx1138_bstack
    .local pmc rx1138_cstack
    (rx1138_cur, rx1138_tgt, rx1138_pos, rx1138_curclass, rx1138_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1138_cur
    length rx1138_eos, rx1138_tgt
    eq $I19, 1, rx1138_restart3069
    gt rx1138_pos, rx1138_eos, rx1138_fail3070
    repr_get_attr_int $I11, self, rx1138_curclass, "$!from"
    ne $I11, -1, rxscan1139_done3076
    goto rxscan1139_scan3075
  rxscan1139_loop3074:
    inc rx1138_pos
    gt rx1138_pos, rx1138_eos, rx1138_fail3070
    repr_bind_attr_int rx1138_cur, rx1138_curclass, "$!from", rx1138_pos
  rxscan1139_scan3075:
    nqp_rxmark rx1138_bstack, rxscan1139_loop3074, rx1138_pos, 0
  rxscan1139_done3076:
    nqp_rxmark rx1138_bstack, rxcap1140_fail3078, rx1138_pos, 0
    add $I11, rx1138_pos, 1
    gt $I11, rx1138_eos, rx1138_fail3070
    substr $S10, rx1138_tgt, rx1138_pos, 1
    ne $S10, ucs4:"/", rx1138_fail3070
    add rx1138_pos, 1
    nqp_rxpeek $I19, rx1138_bstack, rxcap1140_fail3078
    inc $I19
    set $I11, rx1138_bstack[$I19]
    repr_bind_attr_int rx1138_cur, rx1138_curclass, "$!pos", rx1138_pos
    $P11 = rx1138_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1138_pos)
    rx1138_cstack = rx1138_cur."!cursor_capture"($P11, "sym")
    goto rxcap1140_done3077
  rxcap1140_fail3078:
    goto rx1138_fail3070
  rxcap1140_done3077:
    repr_bind_attr_int rx1138_cur, rx1138_curclass, "$!pos", rx1138_pos
    $P11 = rx1138_cur."O"("%multiplicative, :op<div_n>")
    repr_get_attr_int $I11, $P11, rx1138_curclass, "$!pos"
    lt $I11, 0, rx1138_fail3070
    nqp_rxmark rx1138_bstack, rxsubrule1141_pass3079, -1, 0
  rxsubrule1141_pass3079:
    rx1138_cstack = rx1138_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1138_pos, $P11, rx1138_curclass, "$!pos"
    rx1138_cur."!cursor_pass"(rx1138_pos, "infix:sym</>", 'backtrack'=>1)
    .return (rx1138_cur)
  rx1138_restart3069:
    repr_get_attr_obj rx1138_cstack, rx1138_cur, rx1138_curclass, "$!cstack"
  rx1138_fail3070:
    unless rx1138_bstack, rx1138_done3068
    pop $I19, rx1138_bstack
    if_null rx1138_cstack, rx1138_cstack_done3073
    unless rx1138_cstack, rx1138_cstack_done3073
    dec $I19
    set $P11, rx1138_cstack[$I19]
  rx1138_cstack_done3073:
    pop rx1138_rep, rx1138_bstack
    pop rx1138_pos, rx1138_bstack
    pop $I19, rx1138_bstack
    lt rx1138_pos, -1, rx1138_done3068
    lt rx1138_pos, 0, rx1138_fail3070
    eq $I19, 0, rx1138_fail3070
    nqp_islist $I20, rx1138_cstack
    unless $I20, rx1138_jump3071
    elements $I18, rx1138_bstack
    le $I18, 0, rx1138_cut3072
    dec $I18
    set $I18, rx1138_bstack[$I18]
  rx1138_cut3072:
    assign rx1138_cstack, $I18
  rx1138_jump3071:
    jump $I19
  rx1138_done3068:
    rx1138_cur."!cursor_fail"()
    .return (rx1138_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<%>" :subid("cuid_189_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1359
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1142_tgt
    .local int rx1142_pos
    .local int rx1142_off
    .local int rx1142_eos
    .local int rx1142_rep
    .local pmc rx1142_cur
    .local pmc rx1142_curclass
    .local pmc rx1142_bstack
    .local pmc rx1142_cstack
    (rx1142_cur, rx1142_tgt, rx1142_pos, rx1142_curclass, rx1142_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1142_cur
    length rx1142_eos, rx1142_tgt
    eq $I19, 1, rx1142_restart3082
    gt rx1142_pos, rx1142_eos, rx1142_fail3083
    repr_get_attr_int $I11, self, rx1142_curclass, "$!from"
    ne $I11, -1, rxscan1143_done3089
    goto rxscan1143_scan3088
  rxscan1143_loop3087:
    inc rx1142_pos
    gt rx1142_pos, rx1142_eos, rx1142_fail3083
    repr_bind_attr_int rx1142_cur, rx1142_curclass, "$!from", rx1142_pos
  rxscan1143_scan3088:
    nqp_rxmark rx1142_bstack, rxscan1143_loop3087, rx1142_pos, 0
  rxscan1143_done3089:
    nqp_rxmark rx1142_bstack, rxcap1144_fail3091, rx1142_pos, 0
    add $I11, rx1142_pos, 1
    gt $I11, rx1142_eos, rx1142_fail3083
    substr $S10, rx1142_tgt, rx1142_pos, 1
    ne $S10, ucs4:"%", rx1142_fail3083
    add rx1142_pos, 1
    nqp_rxpeek $I19, rx1142_bstack, rxcap1144_fail3091
    inc $I19
    set $I11, rx1142_bstack[$I19]
    repr_bind_attr_int rx1142_cur, rx1142_curclass, "$!pos", rx1142_pos
    $P11 = rx1142_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1142_pos)
    rx1142_cstack = rx1142_cur."!cursor_capture"($P11, "sym")
    goto rxcap1144_done3090
  rxcap1144_fail3091:
    goto rx1142_fail3083
  rxcap1144_done3090:
    repr_bind_attr_int rx1142_cur, rx1142_curclass, "$!pos", rx1142_pos
    $P11 = rx1142_cur."O"("%multiplicative, :op<mod_n>")
    repr_get_attr_int $I11, $P11, rx1142_curclass, "$!pos"
    lt $I11, 0, rx1142_fail3083
    nqp_rxmark rx1142_bstack, rxsubrule1145_pass3092, -1, 0
  rxsubrule1145_pass3092:
    rx1142_cstack = rx1142_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1142_pos, $P11, rx1142_curclass, "$!pos"
    rx1142_cur."!cursor_pass"(rx1142_pos, "infix:sym<%>", 'backtrack'=>1)
    .return (rx1142_cur)
  rx1142_restart3082:
    repr_get_attr_obj rx1142_cstack, rx1142_cur, rx1142_curclass, "$!cstack"
  rx1142_fail3083:
    unless rx1142_bstack, rx1142_done3081
    pop $I19, rx1142_bstack
    if_null rx1142_cstack, rx1142_cstack_done3086
    unless rx1142_cstack, rx1142_cstack_done3086
    dec $I19
    set $P11, rx1142_cstack[$I19]
  rx1142_cstack_done3086:
    pop rx1142_rep, rx1142_bstack
    pop rx1142_pos, rx1142_bstack
    pop $I19, rx1142_bstack
    lt rx1142_pos, -1, rx1142_done3081
    lt rx1142_pos, 0, rx1142_fail3083
    eq $I19, 0, rx1142_fail3083
    nqp_islist $I20, rx1142_cstack
    unless $I20, rx1142_jump3084
    elements $I18, rx1142_bstack
    le $I18, 0, rx1142_cut3085
    dec $I18
    set $I18, rx1142_bstack[$I18]
  rx1142_cut3085:
    assign rx1142_cstack, $I18
  rx1142_jump3084:
    jump $I19
  rx1142_done3081:
    rx1142_cur."!cursor_fail"()
    .return (rx1142_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+&>" :subid("cuid_190_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1360
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1146_tgt
    .local int rx1146_pos
    .local int rx1146_off
    .local int rx1146_eos
    .local int rx1146_rep
    .local pmc rx1146_cur
    .local pmc rx1146_curclass
    .local pmc rx1146_bstack
    .local pmc rx1146_cstack
    (rx1146_cur, rx1146_tgt, rx1146_pos, rx1146_curclass, rx1146_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1146_cur
    length rx1146_eos, rx1146_tgt
    eq $I19, 1, rx1146_restart3095
    gt rx1146_pos, rx1146_eos, rx1146_fail3096
    repr_get_attr_int $I11, self, rx1146_curclass, "$!from"
    ne $I11, -1, rxscan1147_done3102
    goto rxscan1147_scan3101
  rxscan1147_loop3100:
    inc rx1146_pos
    gt rx1146_pos, rx1146_eos, rx1146_fail3096
    repr_bind_attr_int rx1146_cur, rx1146_curclass, "$!from", rx1146_pos
  rxscan1147_scan3101:
    nqp_rxmark rx1146_bstack, rxscan1147_loop3100, rx1146_pos, 0
  rxscan1147_done3102:
    nqp_rxmark rx1146_bstack, rxcap1148_fail3104, rx1146_pos, 0
    add $I11, rx1146_pos, 2
    gt $I11, rx1146_eos, rx1146_fail3096
    substr $S10, rx1146_tgt, rx1146_pos, 2
    ne $S10, ucs4:"+&", rx1146_fail3096
    add rx1146_pos, 2
    nqp_rxpeek $I19, rx1146_bstack, rxcap1148_fail3104
    inc $I19
    set $I11, rx1146_bstack[$I19]
    repr_bind_attr_int rx1146_cur, rx1146_curclass, "$!pos", rx1146_pos
    $P11 = rx1146_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1146_pos)
    rx1146_cstack = rx1146_cur."!cursor_capture"($P11, "sym")
    goto rxcap1148_done3103
  rxcap1148_fail3104:
    goto rx1146_fail3096
  rxcap1148_done3103:
    repr_bind_attr_int rx1146_cur, rx1146_curclass, "$!pos", rx1146_pos
    $P11 = rx1146_cur."O"("%multiplicative, :op<bitand_i>")
    repr_get_attr_int $I11, $P11, rx1146_curclass, "$!pos"
    lt $I11, 0, rx1146_fail3096
    nqp_rxmark rx1146_bstack, rxsubrule1149_pass3105, -1, 0
  rxsubrule1149_pass3105:
    rx1146_cstack = rx1146_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1146_pos, $P11, rx1146_curclass, "$!pos"
    rx1146_cur."!cursor_pass"(rx1146_pos, "infix:sym<+&>", 'backtrack'=>1)
    .return (rx1146_cur)
  rx1146_restart3095:
    repr_get_attr_obj rx1146_cstack, rx1146_cur, rx1146_curclass, "$!cstack"
  rx1146_fail3096:
    unless rx1146_bstack, rx1146_done3094
    pop $I19, rx1146_bstack
    if_null rx1146_cstack, rx1146_cstack_done3099
    unless rx1146_cstack, rx1146_cstack_done3099
    dec $I19
    set $P11, rx1146_cstack[$I19]
  rx1146_cstack_done3099:
    pop rx1146_rep, rx1146_bstack
    pop rx1146_pos, rx1146_bstack
    pop $I19, rx1146_bstack
    lt rx1146_pos, -1, rx1146_done3094
    lt rx1146_pos, 0, rx1146_fail3096
    eq $I19, 0, rx1146_fail3096
    nqp_islist $I20, rx1146_cstack
    unless $I20, rx1146_jump3097
    elements $I18, rx1146_bstack
    le $I18, 0, rx1146_cut3098
    dec $I18
    set $I18, rx1146_bstack[$I18]
  rx1146_cut3098:
    assign rx1146_cstack, $I18
  rx1146_jump3097:
    jump $I19
  rx1146_done3094:
    rx1146_cur."!cursor_fail"()
    .return (rx1146_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+>" :subid("cuid_191_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1362
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1150_tgt
    .local int rx1150_pos
    .local int rx1150_off
    .local int rx1150_eos
    .local int rx1150_rep
    .local pmc rx1150_cur
    .local pmc rx1150_curclass
    .local pmc rx1150_bstack
    .local pmc rx1150_cstack
    (rx1150_cur, rx1150_tgt, rx1150_pos, rx1150_curclass, rx1150_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1150_cur
    length rx1150_eos, rx1150_tgt
    eq $I19, 1, rx1150_restart3108
    gt rx1150_pos, rx1150_eos, rx1150_fail3109
    repr_get_attr_int $I11, self, rx1150_curclass, "$!from"
    ne $I11, -1, rxscan1151_done3115
    goto rxscan1151_scan3114
  rxscan1151_loop3113:
    inc rx1150_pos
    gt rx1150_pos, rx1150_eos, rx1150_fail3109
    repr_bind_attr_int rx1150_cur, rx1150_curclass, "$!from", rx1150_pos
  rxscan1151_scan3114:
    nqp_rxmark rx1150_bstack, rxscan1151_loop3113, rx1150_pos, 0
  rxscan1151_done3115:
    nqp_rxmark rx1150_bstack, rxcap1152_fail3117, rx1150_pos, 0
    add $I11, rx1150_pos, 1
    gt $I11, rx1150_eos, rx1150_fail3109
    substr $S10, rx1150_tgt, rx1150_pos, 1
    ne $S10, ucs4:"+", rx1150_fail3109
    add rx1150_pos, 1
    nqp_rxpeek $I19, rx1150_bstack, rxcap1152_fail3117
    inc $I19
    set $I11, rx1150_bstack[$I19]
    repr_bind_attr_int rx1150_cur, rx1150_curclass, "$!pos", rx1150_pos
    $P11 = rx1150_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1150_pos)
    rx1150_cstack = rx1150_cur."!cursor_capture"($P11, "sym")
    goto rxcap1152_done3116
  rxcap1152_fail3117:
    goto rx1150_fail3109
  rxcap1152_done3116:
    repr_bind_attr_int rx1150_cur, rx1150_curclass, "$!pos", rx1150_pos
    $P11 = rx1150_cur."O"("%additive, :op<add_n>")
    repr_get_attr_int $I11, $P11, rx1150_curclass, "$!pos"
    lt $I11, 0, rx1150_fail3109
    nqp_rxmark rx1150_bstack, rxsubrule1153_pass3118, -1, 0
  rxsubrule1153_pass3118:
    rx1150_cstack = rx1150_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1150_pos, $P11, rx1150_curclass, "$!pos"
    rx1150_cur."!cursor_pass"(rx1150_pos, "infix:sym<+>", 'backtrack'=>1)
    .return (rx1150_cur)
  rx1150_restart3108:
    repr_get_attr_obj rx1150_cstack, rx1150_cur, rx1150_curclass, "$!cstack"
  rx1150_fail3109:
    unless rx1150_bstack, rx1150_done3107
    pop $I19, rx1150_bstack
    if_null rx1150_cstack, rx1150_cstack_done3112
    unless rx1150_cstack, rx1150_cstack_done3112
    dec $I19
    set $P11, rx1150_cstack[$I19]
  rx1150_cstack_done3112:
    pop rx1150_rep, rx1150_bstack
    pop rx1150_pos, rx1150_bstack
    pop $I19, rx1150_bstack
    lt rx1150_pos, -1, rx1150_done3107
    lt rx1150_pos, 0, rx1150_fail3109
    eq $I19, 0, rx1150_fail3109
    nqp_islist $I20, rx1150_cstack
    unless $I20, rx1150_jump3110
    elements $I18, rx1150_bstack
    le $I18, 0, rx1150_cut3111
    dec $I18
    set $I18, rx1150_bstack[$I18]
  rx1150_cut3111:
    assign rx1150_cstack, $I18
  rx1150_jump3110:
    jump $I19
  rx1150_done3107:
    rx1150_cur."!cursor_fail"()
    .return (rx1150_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<->" :subid("cuid_192_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1363
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1154_tgt
    .local int rx1154_pos
    .local int rx1154_off
    .local int rx1154_eos
    .local int rx1154_rep
    .local pmc rx1154_cur
    .local pmc rx1154_curclass
    .local pmc rx1154_bstack
    .local pmc rx1154_cstack
    (rx1154_cur, rx1154_tgt, rx1154_pos, rx1154_curclass, rx1154_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1154_cur
    length rx1154_eos, rx1154_tgt
    eq $I19, 1, rx1154_restart3121
    gt rx1154_pos, rx1154_eos, rx1154_fail3122
    repr_get_attr_int $I11, self, rx1154_curclass, "$!from"
    ne $I11, -1, rxscan1155_done3128
    goto rxscan1155_scan3127
  rxscan1155_loop3126:
    inc rx1154_pos
    gt rx1154_pos, rx1154_eos, rx1154_fail3122
    repr_bind_attr_int rx1154_cur, rx1154_curclass, "$!from", rx1154_pos
  rxscan1155_scan3127:
    nqp_rxmark rx1154_bstack, rxscan1155_loop3126, rx1154_pos, 0
  rxscan1155_done3128:
    nqp_rxmark rx1154_bstack, rxcap1156_fail3130, rx1154_pos, 0
    add $I11, rx1154_pos, 1
    gt $I11, rx1154_eos, rx1154_fail3122
    substr $S10, rx1154_tgt, rx1154_pos, 1
    ne $S10, ucs4:"-", rx1154_fail3122
    add rx1154_pos, 1
    nqp_rxpeek $I19, rx1154_bstack, rxcap1156_fail3130
    inc $I19
    set $I11, rx1154_bstack[$I19]
    repr_bind_attr_int rx1154_cur, rx1154_curclass, "$!pos", rx1154_pos
    $P11 = rx1154_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1154_pos)
    rx1154_cstack = rx1154_cur."!cursor_capture"($P11, "sym")
    goto rxcap1156_done3129
  rxcap1156_fail3130:
    goto rx1154_fail3122
  rxcap1156_done3129:
    repr_bind_attr_int rx1154_cur, rx1154_curclass, "$!pos", rx1154_pos
    $P11 = rx1154_cur."O"("%additive, :op<sub_n>")
    repr_get_attr_int $I11, $P11, rx1154_curclass, "$!pos"
    lt $I11, 0, rx1154_fail3122
    nqp_rxmark rx1154_bstack, rxsubrule1157_pass3131, -1, 0
  rxsubrule1157_pass3131:
    rx1154_cstack = rx1154_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1154_pos, $P11, rx1154_curclass, "$!pos"
    rx1154_cur."!cursor_pass"(rx1154_pos, "infix:sym<->", 'backtrack'=>1)
    .return (rx1154_cur)
  rx1154_restart3121:
    repr_get_attr_obj rx1154_cstack, rx1154_cur, rx1154_curclass, "$!cstack"
  rx1154_fail3122:
    unless rx1154_bstack, rx1154_done3120
    pop $I19, rx1154_bstack
    if_null rx1154_cstack, rx1154_cstack_done3125
    unless rx1154_cstack, rx1154_cstack_done3125
    dec $I19
    set $P11, rx1154_cstack[$I19]
  rx1154_cstack_done3125:
    pop rx1154_rep, rx1154_bstack
    pop rx1154_pos, rx1154_bstack
    pop $I19, rx1154_bstack
    lt rx1154_pos, -1, rx1154_done3120
    lt rx1154_pos, 0, rx1154_fail3122
    eq $I19, 0, rx1154_fail3122
    nqp_islist $I20, rx1154_cstack
    unless $I20, rx1154_jump3123
    elements $I18, rx1154_bstack
    le $I18, 0, rx1154_cut3124
    dec $I18
    set $I18, rx1154_bstack[$I18]
  rx1154_cut3124:
    assign rx1154_cstack, $I18
  rx1154_jump3123:
    jump $I19
  rx1154_done3120:
    rx1154_cur."!cursor_fail"()
    .return (rx1154_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+|>" :subid("cuid_193_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1364
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1158_tgt
    .local int rx1158_pos
    .local int rx1158_off
    .local int rx1158_eos
    .local int rx1158_rep
    .local pmc rx1158_cur
    .local pmc rx1158_curclass
    .local pmc rx1158_bstack
    .local pmc rx1158_cstack
    (rx1158_cur, rx1158_tgt, rx1158_pos, rx1158_curclass, rx1158_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1158_cur
    length rx1158_eos, rx1158_tgt
    eq $I19, 1, rx1158_restart3134
    gt rx1158_pos, rx1158_eos, rx1158_fail3135
    repr_get_attr_int $I11, self, rx1158_curclass, "$!from"
    ne $I11, -1, rxscan1159_done3141
    goto rxscan1159_scan3140
  rxscan1159_loop3139:
    inc rx1158_pos
    gt rx1158_pos, rx1158_eos, rx1158_fail3135
    repr_bind_attr_int rx1158_cur, rx1158_curclass, "$!from", rx1158_pos
  rxscan1159_scan3140:
    nqp_rxmark rx1158_bstack, rxscan1159_loop3139, rx1158_pos, 0
  rxscan1159_done3141:
    nqp_rxmark rx1158_bstack, rxcap1160_fail3143, rx1158_pos, 0
    add $I11, rx1158_pos, 2
    gt $I11, rx1158_eos, rx1158_fail3135
    substr $S10, rx1158_tgt, rx1158_pos, 2
    ne $S10, ucs4:"+|", rx1158_fail3135
    add rx1158_pos, 2
    nqp_rxpeek $I19, rx1158_bstack, rxcap1160_fail3143
    inc $I19
    set $I11, rx1158_bstack[$I19]
    repr_bind_attr_int rx1158_cur, rx1158_curclass, "$!pos", rx1158_pos
    $P11 = rx1158_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1158_pos)
    rx1158_cstack = rx1158_cur."!cursor_capture"($P11, "sym")
    goto rxcap1160_done3142
  rxcap1160_fail3143:
    goto rx1158_fail3135
  rxcap1160_done3142:
    repr_bind_attr_int rx1158_cur, rx1158_curclass, "$!pos", rx1158_pos
    $P11 = rx1158_cur."O"("%additive, :op<bitor_i>")
    repr_get_attr_int $I11, $P11, rx1158_curclass, "$!pos"
    lt $I11, 0, rx1158_fail3135
    nqp_rxmark rx1158_bstack, rxsubrule1161_pass3144, -1, 0
  rxsubrule1161_pass3144:
    rx1158_cstack = rx1158_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1158_pos, $P11, rx1158_curclass, "$!pos"
    rx1158_cur."!cursor_pass"(rx1158_pos, "infix:sym<+|>", 'backtrack'=>1)
    .return (rx1158_cur)
  rx1158_restart3134:
    repr_get_attr_obj rx1158_cstack, rx1158_cur, rx1158_curclass, "$!cstack"
  rx1158_fail3135:
    unless rx1158_bstack, rx1158_done3133
    pop $I19, rx1158_bstack
    if_null rx1158_cstack, rx1158_cstack_done3138
    unless rx1158_cstack, rx1158_cstack_done3138
    dec $I19
    set $P11, rx1158_cstack[$I19]
  rx1158_cstack_done3138:
    pop rx1158_rep, rx1158_bstack
    pop rx1158_pos, rx1158_bstack
    pop $I19, rx1158_bstack
    lt rx1158_pos, -1, rx1158_done3133
    lt rx1158_pos, 0, rx1158_fail3135
    eq $I19, 0, rx1158_fail3135
    nqp_islist $I20, rx1158_cstack
    unless $I20, rx1158_jump3136
    elements $I18, rx1158_bstack
    le $I18, 0, rx1158_cut3137
    dec $I18
    set $I18, rx1158_bstack[$I18]
  rx1158_cut3137:
    assign rx1158_cstack, $I18
  rx1158_jump3136:
    jump $I19
  rx1158_done3133:
    rx1158_cur."!cursor_fail"()
    .return (rx1158_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+^>" :subid("cuid_194_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1365
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1162_tgt
    .local int rx1162_pos
    .local int rx1162_off
    .local int rx1162_eos
    .local int rx1162_rep
    .local pmc rx1162_cur
    .local pmc rx1162_curclass
    .local pmc rx1162_bstack
    .local pmc rx1162_cstack
    (rx1162_cur, rx1162_tgt, rx1162_pos, rx1162_curclass, rx1162_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1162_cur
    length rx1162_eos, rx1162_tgt
    eq $I19, 1, rx1162_restart3147
    gt rx1162_pos, rx1162_eos, rx1162_fail3148
    repr_get_attr_int $I11, self, rx1162_curclass, "$!from"
    ne $I11, -1, rxscan1163_done3154
    goto rxscan1163_scan3153
  rxscan1163_loop3152:
    inc rx1162_pos
    gt rx1162_pos, rx1162_eos, rx1162_fail3148
    repr_bind_attr_int rx1162_cur, rx1162_curclass, "$!from", rx1162_pos
  rxscan1163_scan3153:
    nqp_rxmark rx1162_bstack, rxscan1163_loop3152, rx1162_pos, 0
  rxscan1163_done3154:
    nqp_rxmark rx1162_bstack, rxcap1164_fail3156, rx1162_pos, 0
    add $I11, rx1162_pos, 2
    gt $I11, rx1162_eos, rx1162_fail3148
    substr $S10, rx1162_tgt, rx1162_pos, 2
    ne $S10, ucs4:"+^", rx1162_fail3148
    add rx1162_pos, 2
    nqp_rxpeek $I19, rx1162_bstack, rxcap1164_fail3156
    inc $I19
    set $I11, rx1162_bstack[$I19]
    repr_bind_attr_int rx1162_cur, rx1162_curclass, "$!pos", rx1162_pos
    $P11 = rx1162_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1162_pos)
    rx1162_cstack = rx1162_cur."!cursor_capture"($P11, "sym")
    goto rxcap1164_done3155
  rxcap1164_fail3156:
    goto rx1162_fail3148
  rxcap1164_done3155:
    repr_bind_attr_int rx1162_cur, rx1162_curclass, "$!pos", rx1162_pos
    $P11 = rx1162_cur."O"("%additive, :op<bitxor_i>")
    repr_get_attr_int $I11, $P11, rx1162_curclass, "$!pos"
    lt $I11, 0, rx1162_fail3148
    nqp_rxmark rx1162_bstack, rxsubrule1165_pass3157, -1, 0
  rxsubrule1165_pass3157:
    rx1162_cstack = rx1162_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1162_pos, $P11, rx1162_curclass, "$!pos"
    rx1162_cur."!cursor_pass"(rx1162_pos, "infix:sym<+^>", 'backtrack'=>1)
    .return (rx1162_cur)
  rx1162_restart3147:
    repr_get_attr_obj rx1162_cstack, rx1162_cur, rx1162_curclass, "$!cstack"
  rx1162_fail3148:
    unless rx1162_bstack, rx1162_done3146
    pop $I19, rx1162_bstack
    if_null rx1162_cstack, rx1162_cstack_done3151
    unless rx1162_cstack, rx1162_cstack_done3151
    dec $I19
    set $P11, rx1162_cstack[$I19]
  rx1162_cstack_done3151:
    pop rx1162_rep, rx1162_bstack
    pop rx1162_pos, rx1162_bstack
    pop $I19, rx1162_bstack
    lt rx1162_pos, -1, rx1162_done3146
    lt rx1162_pos, 0, rx1162_fail3148
    eq $I19, 0, rx1162_fail3148
    nqp_islist $I20, rx1162_cstack
    unless $I20, rx1162_jump3149
    elements $I18, rx1162_bstack
    le $I18, 0, rx1162_cut3150
    dec $I18
    set $I18, rx1162_bstack[$I18]
  rx1162_cut3150:
    assign rx1162_cstack, $I18
  rx1162_jump3149:
    jump $I19
  rx1162_done3146:
    rx1162_cur."!cursor_fail"()
    .return (rx1162_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~>" :subid("cuid_195_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1367
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1166_tgt
    .local int rx1166_pos
    .local int rx1166_off
    .local int rx1166_eos
    .local int rx1166_rep
    .local pmc rx1166_cur
    .local pmc rx1166_curclass
    .local pmc rx1166_bstack
    .local pmc rx1166_cstack
    (rx1166_cur, rx1166_tgt, rx1166_pos, rx1166_curclass, rx1166_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1166_cur
    length rx1166_eos, rx1166_tgt
    eq $I19, 1, rx1166_restart3160
    gt rx1166_pos, rx1166_eos, rx1166_fail3161
    repr_get_attr_int $I11, self, rx1166_curclass, "$!from"
    ne $I11, -1, rxscan1167_done3167
    goto rxscan1167_scan3166
  rxscan1167_loop3165:
    inc rx1166_pos
    gt rx1166_pos, rx1166_eos, rx1166_fail3161
    repr_bind_attr_int rx1166_cur, rx1166_curclass, "$!from", rx1166_pos
  rxscan1167_scan3166:
    nqp_rxmark rx1166_bstack, rxscan1167_loop3165, rx1166_pos, 0
  rxscan1167_done3167:
    nqp_rxmark rx1166_bstack, rxcap1168_fail3169, rx1166_pos, 0
    add $I11, rx1166_pos, 1
    gt $I11, rx1166_eos, rx1166_fail3161
    substr $S10, rx1166_tgt, rx1166_pos, 1
    ne $S10, ucs4:"~", rx1166_fail3161
    add rx1166_pos, 1
    nqp_rxpeek $I19, rx1166_bstack, rxcap1168_fail3169
    inc $I19
    set $I11, rx1166_bstack[$I19]
    repr_bind_attr_int rx1166_cur, rx1166_curclass, "$!pos", rx1166_pos
    $P11 = rx1166_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1166_pos)
    rx1166_cstack = rx1166_cur."!cursor_capture"($P11, "sym")
    goto rxcap1168_done3168
  rxcap1168_fail3169:
    goto rx1166_fail3161
  rxcap1168_done3168:
    repr_bind_attr_int rx1166_cur, rx1166_curclass, "$!pos", rx1166_pos
    $P11 = rx1166_cur."O"("%concatenation , :op<concat>")
    repr_get_attr_int $I11, $P11, rx1166_curclass, "$!pos"
    lt $I11, 0, rx1166_fail3161
    nqp_rxmark rx1166_bstack, rxsubrule1169_pass3170, -1, 0
  rxsubrule1169_pass3170:
    rx1166_cstack = rx1166_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1166_pos, $P11, rx1166_curclass, "$!pos"
    rx1166_cur."!cursor_pass"(rx1166_pos, "infix:sym<~>", 'backtrack'=>1)
    .return (rx1166_cur)
  rx1166_restart3160:
    repr_get_attr_obj rx1166_cstack, rx1166_cur, rx1166_curclass, "$!cstack"
  rx1166_fail3161:
    unless rx1166_bstack, rx1166_done3159
    pop $I19, rx1166_bstack
    if_null rx1166_cstack, rx1166_cstack_done3164
    unless rx1166_cstack, rx1166_cstack_done3164
    dec $I19
    set $P11, rx1166_cstack[$I19]
  rx1166_cstack_done3164:
    pop rx1166_rep, rx1166_bstack
    pop rx1166_pos, rx1166_bstack
    pop $I19, rx1166_bstack
    lt rx1166_pos, -1, rx1166_done3159
    lt rx1166_pos, 0, rx1166_fail3161
    eq $I19, 0, rx1166_fail3161
    nqp_islist $I20, rx1166_cstack
    unless $I20, rx1166_jump3162
    elements $I18, rx1166_bstack
    le $I18, 0, rx1166_cut3163
    dec $I18
    set $I18, rx1166_bstack[$I18]
  rx1166_cut3163:
    assign rx1166_cstack, $I18
  rx1166_jump3162:
    jump $I19
  rx1166_done3159:
    rx1166_cur."!cursor_fail"()
    .return (rx1166_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<==>" :subid("cuid_196_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1369
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1170_tgt
    .local int rx1170_pos
    .local int rx1170_off
    .local int rx1170_eos
    .local int rx1170_rep
    .local pmc rx1170_cur
    .local pmc rx1170_curclass
    .local pmc rx1170_bstack
    .local pmc rx1170_cstack
    (rx1170_cur, rx1170_tgt, rx1170_pos, rx1170_curclass, rx1170_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1170_cur
    length rx1170_eos, rx1170_tgt
    eq $I19, 1, rx1170_restart3173
    gt rx1170_pos, rx1170_eos, rx1170_fail3174
    repr_get_attr_int $I11, self, rx1170_curclass, "$!from"
    ne $I11, -1, rxscan1171_done3180
    goto rxscan1171_scan3179
  rxscan1171_loop3178:
    inc rx1170_pos
    gt rx1170_pos, rx1170_eos, rx1170_fail3174
    repr_bind_attr_int rx1170_cur, rx1170_curclass, "$!from", rx1170_pos
  rxscan1171_scan3179:
    nqp_rxmark rx1170_bstack, rxscan1171_loop3178, rx1170_pos, 0
  rxscan1171_done3180:
    nqp_rxmark rx1170_bstack, rxcap1172_fail3182, rx1170_pos, 0
    add $I11, rx1170_pos, 2
    gt $I11, rx1170_eos, rx1170_fail3174
    substr $S10, rx1170_tgt, rx1170_pos, 2
    ne $S10, ucs4:"==", rx1170_fail3174
    add rx1170_pos, 2
    nqp_rxpeek $I19, rx1170_bstack, rxcap1172_fail3182
    inc $I19
    set $I11, rx1170_bstack[$I19]
    repr_bind_attr_int rx1170_cur, rx1170_curclass, "$!pos", rx1170_pos
    $P11 = rx1170_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1170_pos)
    rx1170_cstack = rx1170_cur."!cursor_capture"($P11, "sym")
    goto rxcap1172_done3181
  rxcap1172_fail3182:
    goto rx1170_fail3174
  rxcap1172_done3181:
    repr_bind_attr_int rx1170_cur, rx1170_curclass, "$!pos", rx1170_pos
    $P11 = rx1170_cur."O"("%relational, :op<iseq_n>")
    repr_get_attr_int $I11, $P11, rx1170_curclass, "$!pos"
    lt $I11, 0, rx1170_fail3174
    nqp_rxmark rx1170_bstack, rxsubrule1173_pass3183, -1, 0
  rxsubrule1173_pass3183:
    rx1170_cstack = rx1170_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1170_pos, $P11, rx1170_curclass, "$!pos"
    rx1170_cur."!cursor_pass"(rx1170_pos, "infix:sym<==>", 'backtrack'=>1)
    .return (rx1170_cur)
  rx1170_restart3173:
    repr_get_attr_obj rx1170_cstack, rx1170_cur, rx1170_curclass, "$!cstack"
  rx1170_fail3174:
    unless rx1170_bstack, rx1170_done3172
    pop $I19, rx1170_bstack
    if_null rx1170_cstack, rx1170_cstack_done3177
    unless rx1170_cstack, rx1170_cstack_done3177
    dec $I19
    set $P11, rx1170_cstack[$I19]
  rx1170_cstack_done3177:
    pop rx1170_rep, rx1170_bstack
    pop rx1170_pos, rx1170_bstack
    pop $I19, rx1170_bstack
    lt rx1170_pos, -1, rx1170_done3172
    lt rx1170_pos, 0, rx1170_fail3174
    eq $I19, 0, rx1170_fail3174
    nqp_islist $I20, rx1170_cstack
    unless $I20, rx1170_jump3175
    elements $I18, rx1170_bstack
    le $I18, 0, rx1170_cut3176
    dec $I18
    set $I18, rx1170_bstack[$I18]
  rx1170_cut3176:
    assign rx1170_cstack, $I18
  rx1170_jump3175:
    jump $I19
  rx1170_done3172:
    rx1170_cur."!cursor_fail"()
    .return (rx1170_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<!=>" :subid("cuid_197_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1370
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1174_tgt
    .local int rx1174_pos
    .local int rx1174_off
    .local int rx1174_eos
    .local int rx1174_rep
    .local pmc rx1174_cur
    .local pmc rx1174_curclass
    .local pmc rx1174_bstack
    .local pmc rx1174_cstack
    (rx1174_cur, rx1174_tgt, rx1174_pos, rx1174_curclass, rx1174_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1174_cur
    length rx1174_eos, rx1174_tgt
    eq $I19, 1, rx1174_restart3186
    gt rx1174_pos, rx1174_eos, rx1174_fail3187
    repr_get_attr_int $I11, self, rx1174_curclass, "$!from"
    ne $I11, -1, rxscan1175_done3193
    goto rxscan1175_scan3192
  rxscan1175_loop3191:
    inc rx1174_pos
    gt rx1174_pos, rx1174_eos, rx1174_fail3187
    repr_bind_attr_int rx1174_cur, rx1174_curclass, "$!from", rx1174_pos
  rxscan1175_scan3192:
    nqp_rxmark rx1174_bstack, rxscan1175_loop3191, rx1174_pos, 0
  rxscan1175_done3193:
    nqp_rxmark rx1174_bstack, rxcap1176_fail3195, rx1174_pos, 0
    add $I11, rx1174_pos, 2
    gt $I11, rx1174_eos, rx1174_fail3187
    substr $S10, rx1174_tgt, rx1174_pos, 2
    ne $S10, ucs4:"!=", rx1174_fail3187
    add rx1174_pos, 2
    nqp_rxpeek $I19, rx1174_bstack, rxcap1176_fail3195
    inc $I19
    set $I11, rx1174_bstack[$I19]
    repr_bind_attr_int rx1174_cur, rx1174_curclass, "$!pos", rx1174_pos
    $P11 = rx1174_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1174_pos)
    rx1174_cstack = rx1174_cur."!cursor_capture"($P11, "sym")
    goto rxcap1176_done3194
  rxcap1176_fail3195:
    goto rx1174_fail3187
  rxcap1176_done3194:
    repr_bind_attr_int rx1174_cur, rx1174_curclass, "$!pos", rx1174_pos
    $P11 = rx1174_cur."O"("%relational, :op<isne_n>")
    repr_get_attr_int $I11, $P11, rx1174_curclass, "$!pos"
    lt $I11, 0, rx1174_fail3187
    nqp_rxmark rx1174_bstack, rxsubrule1177_pass3196, -1, 0
  rxsubrule1177_pass3196:
    rx1174_cstack = rx1174_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1174_pos, $P11, rx1174_curclass, "$!pos"
    rx1174_cur."!cursor_pass"(rx1174_pos, "infix:sym<!=>", 'backtrack'=>1)
    .return (rx1174_cur)
  rx1174_restart3186:
    repr_get_attr_obj rx1174_cstack, rx1174_cur, rx1174_curclass, "$!cstack"
  rx1174_fail3187:
    unless rx1174_bstack, rx1174_done3185
    pop $I19, rx1174_bstack
    if_null rx1174_cstack, rx1174_cstack_done3190
    unless rx1174_cstack, rx1174_cstack_done3190
    dec $I19
    set $P11, rx1174_cstack[$I19]
  rx1174_cstack_done3190:
    pop rx1174_rep, rx1174_bstack
    pop rx1174_pos, rx1174_bstack
    pop $I19, rx1174_bstack
    lt rx1174_pos, -1, rx1174_done3185
    lt rx1174_pos, 0, rx1174_fail3187
    eq $I19, 0, rx1174_fail3187
    nqp_islist $I20, rx1174_cstack
    unless $I20, rx1174_jump3188
    elements $I18, rx1174_bstack
    le $I18, 0, rx1174_cut3189
    dec $I18
    set $I18, rx1174_bstack[$I18]
  rx1174_cut3189:
    assign rx1174_cstack, $I18
  rx1174_jump3188:
    jump $I19
  rx1174_done3185:
    rx1174_cur."!cursor_fail"()
    .return (rx1174_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<=>" :subid("cuid_198_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1371
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1178_tgt
    .local int rx1178_pos
    .local int rx1178_off
    .local int rx1178_eos
    .local int rx1178_rep
    .local pmc rx1178_cur
    .local pmc rx1178_curclass
    .local pmc rx1178_bstack
    .local pmc rx1178_cstack
    (rx1178_cur, rx1178_tgt, rx1178_pos, rx1178_curclass, rx1178_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1178_cur
    length rx1178_eos, rx1178_tgt
    eq $I19, 1, rx1178_restart3199
    gt rx1178_pos, rx1178_eos, rx1178_fail3200
    repr_get_attr_int $I11, self, rx1178_curclass, "$!from"
    ne $I11, -1, rxscan1179_done3206
    goto rxscan1179_scan3205
  rxscan1179_loop3204:
    inc rx1178_pos
    gt rx1178_pos, rx1178_eos, rx1178_fail3200
    repr_bind_attr_int rx1178_cur, rx1178_curclass, "$!from", rx1178_pos
  rxscan1179_scan3205:
    nqp_rxmark rx1178_bstack, rxscan1179_loop3204, rx1178_pos, 0
  rxscan1179_done3206:
    nqp_rxmark rx1178_bstack, rxcap1180_fail3208, rx1178_pos, 0
    add $I11, rx1178_pos, 2
    gt $I11, rx1178_eos, rx1178_fail3200
    substr $S10, rx1178_tgt, rx1178_pos, 2
    ne $S10, ucs4:"<=", rx1178_fail3200
    add rx1178_pos, 2
    nqp_rxpeek $I19, rx1178_bstack, rxcap1180_fail3208
    inc $I19
    set $I11, rx1178_bstack[$I19]
    repr_bind_attr_int rx1178_cur, rx1178_curclass, "$!pos", rx1178_pos
    $P11 = rx1178_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1178_pos)
    rx1178_cstack = rx1178_cur."!cursor_capture"($P11, "sym")
    goto rxcap1180_done3207
  rxcap1180_fail3208:
    goto rx1178_fail3200
  rxcap1180_done3207:
    repr_bind_attr_int rx1178_cur, rx1178_curclass, "$!pos", rx1178_pos
    $P11 = rx1178_cur."O"("%relational, :op<isle_n>")
    repr_get_attr_int $I11, $P11, rx1178_curclass, "$!pos"
    lt $I11, 0, rx1178_fail3200
    nqp_rxmark rx1178_bstack, rxsubrule1181_pass3209, -1, 0
  rxsubrule1181_pass3209:
    rx1178_cstack = rx1178_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1178_pos, $P11, rx1178_curclass, "$!pos"
    rx1178_cur."!cursor_pass"(rx1178_pos, "infix:sym<<=>", 'backtrack'=>1)
    .return (rx1178_cur)
  rx1178_restart3199:
    repr_get_attr_obj rx1178_cstack, rx1178_cur, rx1178_curclass, "$!cstack"
  rx1178_fail3200:
    unless rx1178_bstack, rx1178_done3198
    pop $I19, rx1178_bstack
    if_null rx1178_cstack, rx1178_cstack_done3203
    unless rx1178_cstack, rx1178_cstack_done3203
    dec $I19
    set $P11, rx1178_cstack[$I19]
  rx1178_cstack_done3203:
    pop rx1178_rep, rx1178_bstack
    pop rx1178_pos, rx1178_bstack
    pop $I19, rx1178_bstack
    lt rx1178_pos, -1, rx1178_done3198
    lt rx1178_pos, 0, rx1178_fail3200
    eq $I19, 0, rx1178_fail3200
    nqp_islist $I20, rx1178_cstack
    unless $I20, rx1178_jump3201
    elements $I18, rx1178_bstack
    le $I18, 0, rx1178_cut3202
    dec $I18
    set $I18, rx1178_bstack[$I18]
  rx1178_cut3202:
    assign rx1178_cstack, $I18
  rx1178_jump3201:
    jump $I19
  rx1178_done3198:
    rx1178_cur."!cursor_fail"()
    .return (rx1178_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>=>" :subid("cuid_199_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1372
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1182_tgt
    .local int rx1182_pos
    .local int rx1182_off
    .local int rx1182_eos
    .local int rx1182_rep
    .local pmc rx1182_cur
    .local pmc rx1182_curclass
    .local pmc rx1182_bstack
    .local pmc rx1182_cstack
    (rx1182_cur, rx1182_tgt, rx1182_pos, rx1182_curclass, rx1182_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1182_cur
    length rx1182_eos, rx1182_tgt
    eq $I19, 1, rx1182_restart3212
    gt rx1182_pos, rx1182_eos, rx1182_fail3213
    repr_get_attr_int $I11, self, rx1182_curclass, "$!from"
    ne $I11, -1, rxscan1183_done3219
    goto rxscan1183_scan3218
  rxscan1183_loop3217:
    inc rx1182_pos
    gt rx1182_pos, rx1182_eos, rx1182_fail3213
    repr_bind_attr_int rx1182_cur, rx1182_curclass, "$!from", rx1182_pos
  rxscan1183_scan3218:
    nqp_rxmark rx1182_bstack, rxscan1183_loop3217, rx1182_pos, 0
  rxscan1183_done3219:
    nqp_rxmark rx1182_bstack, rxcap1184_fail3221, rx1182_pos, 0
    add $I11, rx1182_pos, 2
    gt $I11, rx1182_eos, rx1182_fail3213
    substr $S10, rx1182_tgt, rx1182_pos, 2
    ne $S10, ucs4:">=", rx1182_fail3213
    add rx1182_pos, 2
    nqp_rxpeek $I19, rx1182_bstack, rxcap1184_fail3221
    inc $I19
    set $I11, rx1182_bstack[$I19]
    repr_bind_attr_int rx1182_cur, rx1182_curclass, "$!pos", rx1182_pos
    $P11 = rx1182_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1182_pos)
    rx1182_cstack = rx1182_cur."!cursor_capture"($P11, "sym")
    goto rxcap1184_done3220
  rxcap1184_fail3221:
    goto rx1182_fail3213
  rxcap1184_done3220:
    repr_bind_attr_int rx1182_cur, rx1182_curclass, "$!pos", rx1182_pos
    $P11 = rx1182_cur."O"("%relational, :op<isge_n>")
    repr_get_attr_int $I11, $P11, rx1182_curclass, "$!pos"
    lt $I11, 0, rx1182_fail3213
    nqp_rxmark rx1182_bstack, rxsubrule1185_pass3222, -1, 0
  rxsubrule1185_pass3222:
    rx1182_cstack = rx1182_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1182_pos, $P11, rx1182_curclass, "$!pos"
    rx1182_cur."!cursor_pass"(rx1182_pos, "infix:sym<>=>", 'backtrack'=>1)
    .return (rx1182_cur)
  rx1182_restart3212:
    repr_get_attr_obj rx1182_cstack, rx1182_cur, rx1182_curclass, "$!cstack"
  rx1182_fail3213:
    unless rx1182_bstack, rx1182_done3211
    pop $I19, rx1182_bstack
    if_null rx1182_cstack, rx1182_cstack_done3216
    unless rx1182_cstack, rx1182_cstack_done3216
    dec $I19
    set $P11, rx1182_cstack[$I19]
  rx1182_cstack_done3216:
    pop rx1182_rep, rx1182_bstack
    pop rx1182_pos, rx1182_bstack
    pop $I19, rx1182_bstack
    lt rx1182_pos, -1, rx1182_done3211
    lt rx1182_pos, 0, rx1182_fail3213
    eq $I19, 0, rx1182_fail3213
    nqp_islist $I20, rx1182_cstack
    unless $I20, rx1182_jump3214
    elements $I18, rx1182_bstack
    le $I18, 0, rx1182_cut3215
    dec $I18
    set $I18, rx1182_bstack[$I18]
  rx1182_cut3215:
    assign rx1182_cstack, $I18
  rx1182_jump3214:
    jump $I19
  rx1182_done3211:
    rx1182_cur."!cursor_fail"()
    .return (rx1182_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<>" :subid("cuid_200_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1373
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1186_tgt
    .local int rx1186_pos
    .local int rx1186_off
    .local int rx1186_eos
    .local int rx1186_rep
    .local pmc rx1186_cur
    .local pmc rx1186_curclass
    .local pmc rx1186_bstack
    .local pmc rx1186_cstack
    (rx1186_cur, rx1186_tgt, rx1186_pos, rx1186_curclass, rx1186_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1186_cur
    length rx1186_eos, rx1186_tgt
    eq $I19, 1, rx1186_restart3225
    gt rx1186_pos, rx1186_eos, rx1186_fail3226
    repr_get_attr_int $I11, self, rx1186_curclass, "$!from"
    ne $I11, -1, rxscan1187_done3232
    goto rxscan1187_scan3231
  rxscan1187_loop3230:
    inc rx1186_pos
    gt rx1186_pos, rx1186_eos, rx1186_fail3226
    repr_bind_attr_int rx1186_cur, rx1186_curclass, "$!from", rx1186_pos
  rxscan1187_scan3231:
    nqp_rxmark rx1186_bstack, rxscan1187_loop3230, rx1186_pos, 0
  rxscan1187_done3232:
    nqp_rxmark rx1186_bstack, rxcap1188_fail3234, rx1186_pos, 0
    add $I11, rx1186_pos, 1
    gt $I11, rx1186_eos, rx1186_fail3226
    substr $S10, rx1186_tgt, rx1186_pos, 1
    ne $S10, ucs4:"<", rx1186_fail3226
    add rx1186_pos, 1
    nqp_rxpeek $I19, rx1186_bstack, rxcap1188_fail3234
    inc $I19
    set $I11, rx1186_bstack[$I19]
    repr_bind_attr_int rx1186_cur, rx1186_curclass, "$!pos", rx1186_pos
    $P11 = rx1186_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1186_pos)
    rx1186_cstack = rx1186_cur."!cursor_capture"($P11, "sym")
    goto rxcap1188_done3233
  rxcap1188_fail3234:
    goto rx1186_fail3226
  rxcap1188_done3233:
    repr_bind_attr_int rx1186_cur, rx1186_curclass, "$!pos", rx1186_pos
    $P11 = rx1186_cur."O"("%relational, :op<islt_n>")
    repr_get_attr_int $I11, $P11, rx1186_curclass, "$!pos"
    lt $I11, 0, rx1186_fail3226
    nqp_rxmark rx1186_bstack, rxsubrule1189_pass3235, -1, 0
  rxsubrule1189_pass3235:
    rx1186_cstack = rx1186_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1186_pos, $P11, rx1186_curclass, "$!pos"
    rx1186_cur."!cursor_pass"(rx1186_pos, "infix:sym<<>", 'backtrack'=>1)
    .return (rx1186_cur)
  rx1186_restart3225:
    repr_get_attr_obj rx1186_cstack, rx1186_cur, rx1186_curclass, "$!cstack"
  rx1186_fail3226:
    unless rx1186_bstack, rx1186_done3224
    pop $I19, rx1186_bstack
    if_null rx1186_cstack, rx1186_cstack_done3229
    unless rx1186_cstack, rx1186_cstack_done3229
    dec $I19
    set $P11, rx1186_cstack[$I19]
  rx1186_cstack_done3229:
    pop rx1186_rep, rx1186_bstack
    pop rx1186_pos, rx1186_bstack
    pop $I19, rx1186_bstack
    lt rx1186_pos, -1, rx1186_done3224
    lt rx1186_pos, 0, rx1186_fail3226
    eq $I19, 0, rx1186_fail3226
    nqp_islist $I20, rx1186_cstack
    unless $I20, rx1186_jump3227
    elements $I18, rx1186_bstack
    le $I18, 0, rx1186_cut3228
    dec $I18
    set $I18, rx1186_bstack[$I18]
  rx1186_cut3228:
    assign rx1186_cstack, $I18
  rx1186_jump3227:
    jump $I19
  rx1186_done3224:
    rx1186_cur."!cursor_fail"()
    .return (rx1186_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>>" :subid("cuid_201_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1374
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1190_tgt
    .local int rx1190_pos
    .local int rx1190_off
    .local int rx1190_eos
    .local int rx1190_rep
    .local pmc rx1190_cur
    .local pmc rx1190_curclass
    .local pmc rx1190_bstack
    .local pmc rx1190_cstack
    (rx1190_cur, rx1190_tgt, rx1190_pos, rx1190_curclass, rx1190_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1190_cur
    length rx1190_eos, rx1190_tgt
    eq $I19, 1, rx1190_restart3238
    gt rx1190_pos, rx1190_eos, rx1190_fail3239
    repr_get_attr_int $I11, self, rx1190_curclass, "$!from"
    ne $I11, -1, rxscan1191_done3245
    goto rxscan1191_scan3244
  rxscan1191_loop3243:
    inc rx1190_pos
    gt rx1190_pos, rx1190_eos, rx1190_fail3239
    repr_bind_attr_int rx1190_cur, rx1190_curclass, "$!from", rx1190_pos
  rxscan1191_scan3244:
    nqp_rxmark rx1190_bstack, rxscan1191_loop3243, rx1190_pos, 0
  rxscan1191_done3245:
    nqp_rxmark rx1190_bstack, rxcap1192_fail3247, rx1190_pos, 0
    add $I11, rx1190_pos, 1
    gt $I11, rx1190_eos, rx1190_fail3239
    substr $S10, rx1190_tgt, rx1190_pos, 1
    ne $S10, ucs4:">", rx1190_fail3239
    add rx1190_pos, 1
    nqp_rxpeek $I19, rx1190_bstack, rxcap1192_fail3247
    inc $I19
    set $I11, rx1190_bstack[$I19]
    repr_bind_attr_int rx1190_cur, rx1190_curclass, "$!pos", rx1190_pos
    $P11 = rx1190_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1190_pos)
    rx1190_cstack = rx1190_cur."!cursor_capture"($P11, "sym")
    goto rxcap1192_done3246
  rxcap1192_fail3247:
    goto rx1190_fail3239
  rxcap1192_done3246:
    repr_bind_attr_int rx1190_cur, rx1190_curclass, "$!pos", rx1190_pos
    $P11 = rx1190_cur."O"("%relational, :op<isgt_n>")
    repr_get_attr_int $I11, $P11, rx1190_curclass, "$!pos"
    lt $I11, 0, rx1190_fail3239
    nqp_rxmark rx1190_bstack, rxsubrule1193_pass3248, -1, 0
  rxsubrule1193_pass3248:
    rx1190_cstack = rx1190_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1190_pos, $P11, rx1190_curclass, "$!pos"
    rx1190_cur."!cursor_pass"(rx1190_pos, "infix:sym<>>", 'backtrack'=>1)
    .return (rx1190_cur)
  rx1190_restart3238:
    repr_get_attr_obj rx1190_cstack, rx1190_cur, rx1190_curclass, "$!cstack"
  rx1190_fail3239:
    unless rx1190_bstack, rx1190_done3237
    pop $I19, rx1190_bstack
    if_null rx1190_cstack, rx1190_cstack_done3242
    unless rx1190_cstack, rx1190_cstack_done3242
    dec $I19
    set $P11, rx1190_cstack[$I19]
  rx1190_cstack_done3242:
    pop rx1190_rep, rx1190_bstack
    pop rx1190_pos, rx1190_bstack
    pop $I19, rx1190_bstack
    lt rx1190_pos, -1, rx1190_done3237
    lt rx1190_pos, 0, rx1190_fail3239
    eq $I19, 0, rx1190_fail3239
    nqp_islist $I20, rx1190_cstack
    unless $I20, rx1190_jump3240
    elements $I18, rx1190_bstack
    le $I18, 0, rx1190_cut3241
    dec $I18
    set $I18, rx1190_bstack[$I18]
  rx1190_cut3241:
    assign rx1190_cstack, $I18
  rx1190_jump3240:
    jump $I19
  rx1190_done3237:
    rx1190_cur."!cursor_fail"()
    .return (rx1190_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<eq>" :subid("cuid_202_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1375
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1194_tgt
    .local int rx1194_pos
    .local int rx1194_off
    .local int rx1194_eos
    .local int rx1194_rep
    .local pmc rx1194_cur
    .local pmc rx1194_curclass
    .local pmc rx1194_bstack
    .local pmc rx1194_cstack
    (rx1194_cur, rx1194_tgt, rx1194_pos, rx1194_curclass, rx1194_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1194_cur
    length rx1194_eos, rx1194_tgt
    eq $I19, 1, rx1194_restart3251
    gt rx1194_pos, rx1194_eos, rx1194_fail3252
    repr_get_attr_int $I11, self, rx1194_curclass, "$!from"
    ne $I11, -1, rxscan1195_done3258
    goto rxscan1195_scan3257
  rxscan1195_loop3256:
    inc rx1194_pos
    gt rx1194_pos, rx1194_eos, rx1194_fail3252
    repr_bind_attr_int rx1194_cur, rx1194_curclass, "$!from", rx1194_pos
  rxscan1195_scan3257:
    nqp_rxmark rx1194_bstack, rxscan1195_loop3256, rx1194_pos, 0
  rxscan1195_done3258:
    nqp_rxmark rx1194_bstack, rxcap1196_fail3260, rx1194_pos, 0
    add $I11, rx1194_pos, 2
    gt $I11, rx1194_eos, rx1194_fail3252
    substr $S10, rx1194_tgt, rx1194_pos, 2
    ne $S10, ucs4:"eq", rx1194_fail3252
    add rx1194_pos, 2
    nqp_rxpeek $I19, rx1194_bstack, rxcap1196_fail3260
    inc $I19
    set $I11, rx1194_bstack[$I19]
    repr_bind_attr_int rx1194_cur, rx1194_curclass, "$!pos", rx1194_pos
    $P11 = rx1194_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1194_pos)
    rx1194_cstack = rx1194_cur."!cursor_capture"($P11, "sym")
    goto rxcap1196_done3259
  rxcap1196_fail3260:
    goto rx1194_fail3252
  rxcap1196_done3259:
    repr_bind_attr_int rx1194_cur, rx1194_curclass, "$!pos", rx1194_pos
    $P11 = rx1194_cur."O"("%relational, :op<iseq_s>")
    repr_get_attr_int $I11, $P11, rx1194_curclass, "$!pos"
    lt $I11, 0, rx1194_fail3252
    nqp_rxmark rx1194_bstack, rxsubrule1197_pass3261, -1, 0
  rxsubrule1197_pass3261:
    rx1194_cstack = rx1194_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1194_pos, $P11, rx1194_curclass, "$!pos"
    rx1194_cur."!cursor_pass"(rx1194_pos, "infix:sym<eq>", 'backtrack'=>1)
    .return (rx1194_cur)
  rx1194_restart3251:
    repr_get_attr_obj rx1194_cstack, rx1194_cur, rx1194_curclass, "$!cstack"
  rx1194_fail3252:
    unless rx1194_bstack, rx1194_done3250
    pop $I19, rx1194_bstack
    if_null rx1194_cstack, rx1194_cstack_done3255
    unless rx1194_cstack, rx1194_cstack_done3255
    dec $I19
    set $P11, rx1194_cstack[$I19]
  rx1194_cstack_done3255:
    pop rx1194_rep, rx1194_bstack
    pop rx1194_pos, rx1194_bstack
    pop $I19, rx1194_bstack
    lt rx1194_pos, -1, rx1194_done3250
    lt rx1194_pos, 0, rx1194_fail3252
    eq $I19, 0, rx1194_fail3252
    nqp_islist $I20, rx1194_cstack
    unless $I20, rx1194_jump3253
    elements $I18, rx1194_bstack
    le $I18, 0, rx1194_cut3254
    dec $I18
    set $I18, rx1194_bstack[$I18]
  rx1194_cut3254:
    assign rx1194_cstack, $I18
  rx1194_jump3253:
    jump $I19
  rx1194_done3250:
    rx1194_cur."!cursor_fail"()
    .return (rx1194_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ne>" :subid("cuid_203_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1376
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1198_tgt
    .local int rx1198_pos
    .local int rx1198_off
    .local int rx1198_eos
    .local int rx1198_rep
    .local pmc rx1198_cur
    .local pmc rx1198_curclass
    .local pmc rx1198_bstack
    .local pmc rx1198_cstack
    (rx1198_cur, rx1198_tgt, rx1198_pos, rx1198_curclass, rx1198_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1198_cur
    length rx1198_eos, rx1198_tgt
    eq $I19, 1, rx1198_restart3264
    gt rx1198_pos, rx1198_eos, rx1198_fail3265
    repr_get_attr_int $I11, self, rx1198_curclass, "$!from"
    ne $I11, -1, rxscan1199_done3271
    goto rxscan1199_scan3270
  rxscan1199_loop3269:
    inc rx1198_pos
    gt rx1198_pos, rx1198_eos, rx1198_fail3265
    repr_bind_attr_int rx1198_cur, rx1198_curclass, "$!from", rx1198_pos
  rxscan1199_scan3270:
    nqp_rxmark rx1198_bstack, rxscan1199_loop3269, rx1198_pos, 0
  rxscan1199_done3271:
    nqp_rxmark rx1198_bstack, rxcap1200_fail3273, rx1198_pos, 0
    add $I11, rx1198_pos, 2
    gt $I11, rx1198_eos, rx1198_fail3265
    substr $S10, rx1198_tgt, rx1198_pos, 2
    ne $S10, ucs4:"ne", rx1198_fail3265
    add rx1198_pos, 2
    nqp_rxpeek $I19, rx1198_bstack, rxcap1200_fail3273
    inc $I19
    set $I11, rx1198_bstack[$I19]
    repr_bind_attr_int rx1198_cur, rx1198_curclass, "$!pos", rx1198_pos
    $P11 = rx1198_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1198_pos)
    rx1198_cstack = rx1198_cur."!cursor_capture"($P11, "sym")
    goto rxcap1200_done3272
  rxcap1200_fail3273:
    goto rx1198_fail3265
  rxcap1200_done3272:
    repr_bind_attr_int rx1198_cur, rx1198_curclass, "$!pos", rx1198_pos
    $P11 = rx1198_cur."O"("%relational, :op<isne_s>")
    repr_get_attr_int $I11, $P11, rx1198_curclass, "$!pos"
    lt $I11, 0, rx1198_fail3265
    nqp_rxmark rx1198_bstack, rxsubrule1201_pass3274, -1, 0
  rxsubrule1201_pass3274:
    rx1198_cstack = rx1198_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1198_pos, $P11, rx1198_curclass, "$!pos"
    rx1198_cur."!cursor_pass"(rx1198_pos, "infix:sym<ne>", 'backtrack'=>1)
    .return (rx1198_cur)
  rx1198_restart3264:
    repr_get_attr_obj rx1198_cstack, rx1198_cur, rx1198_curclass, "$!cstack"
  rx1198_fail3265:
    unless rx1198_bstack, rx1198_done3263
    pop $I19, rx1198_bstack
    if_null rx1198_cstack, rx1198_cstack_done3268
    unless rx1198_cstack, rx1198_cstack_done3268
    dec $I19
    set $P11, rx1198_cstack[$I19]
  rx1198_cstack_done3268:
    pop rx1198_rep, rx1198_bstack
    pop rx1198_pos, rx1198_bstack
    pop $I19, rx1198_bstack
    lt rx1198_pos, -1, rx1198_done3263
    lt rx1198_pos, 0, rx1198_fail3265
    eq $I19, 0, rx1198_fail3265
    nqp_islist $I20, rx1198_cstack
    unless $I20, rx1198_jump3266
    elements $I18, rx1198_bstack
    le $I18, 0, rx1198_cut3267
    dec $I18
    set $I18, rx1198_bstack[$I18]
  rx1198_cut3267:
    assign rx1198_cstack, $I18
  rx1198_jump3266:
    jump $I19
  rx1198_done3263:
    rx1198_cur."!cursor_fail"()
    .return (rx1198_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<le>" :subid("cuid_204_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1377
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1202_tgt
    .local int rx1202_pos
    .local int rx1202_off
    .local int rx1202_eos
    .local int rx1202_rep
    .local pmc rx1202_cur
    .local pmc rx1202_curclass
    .local pmc rx1202_bstack
    .local pmc rx1202_cstack
    (rx1202_cur, rx1202_tgt, rx1202_pos, rx1202_curclass, rx1202_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1202_cur
    length rx1202_eos, rx1202_tgt
    eq $I19, 1, rx1202_restart3277
    gt rx1202_pos, rx1202_eos, rx1202_fail3278
    repr_get_attr_int $I11, self, rx1202_curclass, "$!from"
    ne $I11, -1, rxscan1203_done3284
    goto rxscan1203_scan3283
  rxscan1203_loop3282:
    inc rx1202_pos
    gt rx1202_pos, rx1202_eos, rx1202_fail3278
    repr_bind_attr_int rx1202_cur, rx1202_curclass, "$!from", rx1202_pos
  rxscan1203_scan3283:
    nqp_rxmark rx1202_bstack, rxscan1203_loop3282, rx1202_pos, 0
  rxscan1203_done3284:
    nqp_rxmark rx1202_bstack, rxcap1204_fail3286, rx1202_pos, 0
    add $I11, rx1202_pos, 2
    gt $I11, rx1202_eos, rx1202_fail3278
    substr $S10, rx1202_tgt, rx1202_pos, 2
    ne $S10, ucs4:"le", rx1202_fail3278
    add rx1202_pos, 2
    nqp_rxpeek $I19, rx1202_bstack, rxcap1204_fail3286
    inc $I19
    set $I11, rx1202_bstack[$I19]
    repr_bind_attr_int rx1202_cur, rx1202_curclass, "$!pos", rx1202_pos
    $P11 = rx1202_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1202_pos)
    rx1202_cstack = rx1202_cur."!cursor_capture"($P11, "sym")
    goto rxcap1204_done3285
  rxcap1204_fail3286:
    goto rx1202_fail3278
  rxcap1204_done3285:
    repr_bind_attr_int rx1202_cur, rx1202_curclass, "$!pos", rx1202_pos
    $P11 = rx1202_cur."O"("%relational, :op<isle_s>")
    repr_get_attr_int $I11, $P11, rx1202_curclass, "$!pos"
    lt $I11, 0, rx1202_fail3278
    nqp_rxmark rx1202_bstack, rxsubrule1205_pass3287, -1, 0
  rxsubrule1205_pass3287:
    rx1202_cstack = rx1202_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1202_pos, $P11, rx1202_curclass, "$!pos"
    rx1202_cur."!cursor_pass"(rx1202_pos, "infix:sym<le>", 'backtrack'=>1)
    .return (rx1202_cur)
  rx1202_restart3277:
    repr_get_attr_obj rx1202_cstack, rx1202_cur, rx1202_curclass, "$!cstack"
  rx1202_fail3278:
    unless rx1202_bstack, rx1202_done3276
    pop $I19, rx1202_bstack
    if_null rx1202_cstack, rx1202_cstack_done3281
    unless rx1202_cstack, rx1202_cstack_done3281
    dec $I19
    set $P11, rx1202_cstack[$I19]
  rx1202_cstack_done3281:
    pop rx1202_rep, rx1202_bstack
    pop rx1202_pos, rx1202_bstack
    pop $I19, rx1202_bstack
    lt rx1202_pos, -1, rx1202_done3276
    lt rx1202_pos, 0, rx1202_fail3278
    eq $I19, 0, rx1202_fail3278
    nqp_islist $I20, rx1202_cstack
    unless $I20, rx1202_jump3279
    elements $I18, rx1202_bstack
    le $I18, 0, rx1202_cut3280
    dec $I18
    set $I18, rx1202_bstack[$I18]
  rx1202_cut3280:
    assign rx1202_cstack, $I18
  rx1202_jump3279:
    jump $I19
  rx1202_done3276:
    rx1202_cur."!cursor_fail"()
    .return (rx1202_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ge>" :subid("cuid_205_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1378
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1206_tgt
    .local int rx1206_pos
    .local int rx1206_off
    .local int rx1206_eos
    .local int rx1206_rep
    .local pmc rx1206_cur
    .local pmc rx1206_curclass
    .local pmc rx1206_bstack
    .local pmc rx1206_cstack
    (rx1206_cur, rx1206_tgt, rx1206_pos, rx1206_curclass, rx1206_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1206_cur
    length rx1206_eos, rx1206_tgt
    eq $I19, 1, rx1206_restart3290
    gt rx1206_pos, rx1206_eos, rx1206_fail3291
    repr_get_attr_int $I11, self, rx1206_curclass, "$!from"
    ne $I11, -1, rxscan1207_done3297
    goto rxscan1207_scan3296
  rxscan1207_loop3295:
    inc rx1206_pos
    gt rx1206_pos, rx1206_eos, rx1206_fail3291
    repr_bind_attr_int rx1206_cur, rx1206_curclass, "$!from", rx1206_pos
  rxscan1207_scan3296:
    nqp_rxmark rx1206_bstack, rxscan1207_loop3295, rx1206_pos, 0
  rxscan1207_done3297:
    nqp_rxmark rx1206_bstack, rxcap1208_fail3299, rx1206_pos, 0
    add $I11, rx1206_pos, 2
    gt $I11, rx1206_eos, rx1206_fail3291
    substr $S10, rx1206_tgt, rx1206_pos, 2
    ne $S10, ucs4:"ge", rx1206_fail3291
    add rx1206_pos, 2
    nqp_rxpeek $I19, rx1206_bstack, rxcap1208_fail3299
    inc $I19
    set $I11, rx1206_bstack[$I19]
    repr_bind_attr_int rx1206_cur, rx1206_curclass, "$!pos", rx1206_pos
    $P11 = rx1206_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1206_pos)
    rx1206_cstack = rx1206_cur."!cursor_capture"($P11, "sym")
    goto rxcap1208_done3298
  rxcap1208_fail3299:
    goto rx1206_fail3291
  rxcap1208_done3298:
    repr_bind_attr_int rx1206_cur, rx1206_curclass, "$!pos", rx1206_pos
    $P11 = rx1206_cur."O"("%relational, :op<isge_s>")
    repr_get_attr_int $I11, $P11, rx1206_curclass, "$!pos"
    lt $I11, 0, rx1206_fail3291
    nqp_rxmark rx1206_bstack, rxsubrule1209_pass3300, -1, 0
  rxsubrule1209_pass3300:
    rx1206_cstack = rx1206_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1206_pos, $P11, rx1206_curclass, "$!pos"
    rx1206_cur."!cursor_pass"(rx1206_pos, "infix:sym<ge>", 'backtrack'=>1)
    .return (rx1206_cur)
  rx1206_restart3290:
    repr_get_attr_obj rx1206_cstack, rx1206_cur, rx1206_curclass, "$!cstack"
  rx1206_fail3291:
    unless rx1206_bstack, rx1206_done3289
    pop $I19, rx1206_bstack
    if_null rx1206_cstack, rx1206_cstack_done3294
    unless rx1206_cstack, rx1206_cstack_done3294
    dec $I19
    set $P11, rx1206_cstack[$I19]
  rx1206_cstack_done3294:
    pop rx1206_rep, rx1206_bstack
    pop rx1206_pos, rx1206_bstack
    pop $I19, rx1206_bstack
    lt rx1206_pos, -1, rx1206_done3289
    lt rx1206_pos, 0, rx1206_fail3291
    eq $I19, 0, rx1206_fail3291
    nqp_islist $I20, rx1206_cstack
    unless $I20, rx1206_jump3292
    elements $I18, rx1206_bstack
    le $I18, 0, rx1206_cut3293
    dec $I18
    set $I18, rx1206_bstack[$I18]
  rx1206_cut3293:
    assign rx1206_cstack, $I18
  rx1206_jump3292:
    jump $I19
  rx1206_done3289:
    rx1206_cur."!cursor_fail"()
    .return (rx1206_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<lt>" :subid("cuid_206_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1379
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1210_tgt
    .local int rx1210_pos
    .local int rx1210_off
    .local int rx1210_eos
    .local int rx1210_rep
    .local pmc rx1210_cur
    .local pmc rx1210_curclass
    .local pmc rx1210_bstack
    .local pmc rx1210_cstack
    (rx1210_cur, rx1210_tgt, rx1210_pos, rx1210_curclass, rx1210_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1210_cur
    length rx1210_eos, rx1210_tgt
    eq $I19, 1, rx1210_restart3303
    gt rx1210_pos, rx1210_eos, rx1210_fail3304
    repr_get_attr_int $I11, self, rx1210_curclass, "$!from"
    ne $I11, -1, rxscan1211_done3310
    goto rxscan1211_scan3309
  rxscan1211_loop3308:
    inc rx1210_pos
    gt rx1210_pos, rx1210_eos, rx1210_fail3304
    repr_bind_attr_int rx1210_cur, rx1210_curclass, "$!from", rx1210_pos
  rxscan1211_scan3309:
    nqp_rxmark rx1210_bstack, rxscan1211_loop3308, rx1210_pos, 0
  rxscan1211_done3310:
    nqp_rxmark rx1210_bstack, rxcap1212_fail3312, rx1210_pos, 0
    add $I11, rx1210_pos, 2
    gt $I11, rx1210_eos, rx1210_fail3304
    substr $S10, rx1210_tgt, rx1210_pos, 2
    ne $S10, ucs4:"lt", rx1210_fail3304
    add rx1210_pos, 2
    nqp_rxpeek $I19, rx1210_bstack, rxcap1212_fail3312
    inc $I19
    set $I11, rx1210_bstack[$I19]
    repr_bind_attr_int rx1210_cur, rx1210_curclass, "$!pos", rx1210_pos
    $P11 = rx1210_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1210_pos)
    rx1210_cstack = rx1210_cur."!cursor_capture"($P11, "sym")
    goto rxcap1212_done3311
  rxcap1212_fail3312:
    goto rx1210_fail3304
  rxcap1212_done3311:
    repr_bind_attr_int rx1210_cur, rx1210_curclass, "$!pos", rx1210_pos
    $P11 = rx1210_cur."O"("%relational, :op<islt_s>")
    repr_get_attr_int $I11, $P11, rx1210_curclass, "$!pos"
    lt $I11, 0, rx1210_fail3304
    nqp_rxmark rx1210_bstack, rxsubrule1213_pass3313, -1, 0
  rxsubrule1213_pass3313:
    rx1210_cstack = rx1210_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1210_pos, $P11, rx1210_curclass, "$!pos"
    rx1210_cur."!cursor_pass"(rx1210_pos, "infix:sym<lt>", 'backtrack'=>1)
    .return (rx1210_cur)
  rx1210_restart3303:
    repr_get_attr_obj rx1210_cstack, rx1210_cur, rx1210_curclass, "$!cstack"
  rx1210_fail3304:
    unless rx1210_bstack, rx1210_done3302
    pop $I19, rx1210_bstack
    if_null rx1210_cstack, rx1210_cstack_done3307
    unless rx1210_cstack, rx1210_cstack_done3307
    dec $I19
    set $P11, rx1210_cstack[$I19]
  rx1210_cstack_done3307:
    pop rx1210_rep, rx1210_bstack
    pop rx1210_pos, rx1210_bstack
    pop $I19, rx1210_bstack
    lt rx1210_pos, -1, rx1210_done3302
    lt rx1210_pos, 0, rx1210_fail3304
    eq $I19, 0, rx1210_fail3304
    nqp_islist $I20, rx1210_cstack
    unless $I20, rx1210_jump3305
    elements $I18, rx1210_bstack
    le $I18, 0, rx1210_cut3306
    dec $I18
    set $I18, rx1210_bstack[$I18]
  rx1210_cut3306:
    assign rx1210_cstack, $I18
  rx1210_jump3305:
    jump $I19
  rx1210_done3302:
    rx1210_cur."!cursor_fail"()
    .return (rx1210_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<gt>" :subid("cuid_207_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1380
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1214_tgt
    .local int rx1214_pos
    .local int rx1214_off
    .local int rx1214_eos
    .local int rx1214_rep
    .local pmc rx1214_cur
    .local pmc rx1214_curclass
    .local pmc rx1214_bstack
    .local pmc rx1214_cstack
    (rx1214_cur, rx1214_tgt, rx1214_pos, rx1214_curclass, rx1214_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1214_cur
    length rx1214_eos, rx1214_tgt
    eq $I19, 1, rx1214_restart3316
    gt rx1214_pos, rx1214_eos, rx1214_fail3317
    repr_get_attr_int $I11, self, rx1214_curclass, "$!from"
    ne $I11, -1, rxscan1215_done3323
    goto rxscan1215_scan3322
  rxscan1215_loop3321:
    inc rx1214_pos
    gt rx1214_pos, rx1214_eos, rx1214_fail3317
    repr_bind_attr_int rx1214_cur, rx1214_curclass, "$!from", rx1214_pos
  rxscan1215_scan3322:
    nqp_rxmark rx1214_bstack, rxscan1215_loop3321, rx1214_pos, 0
  rxscan1215_done3323:
    nqp_rxmark rx1214_bstack, rxcap1216_fail3325, rx1214_pos, 0
    add $I11, rx1214_pos, 2
    gt $I11, rx1214_eos, rx1214_fail3317
    substr $S10, rx1214_tgt, rx1214_pos, 2
    ne $S10, ucs4:"gt", rx1214_fail3317
    add rx1214_pos, 2
    nqp_rxpeek $I19, rx1214_bstack, rxcap1216_fail3325
    inc $I19
    set $I11, rx1214_bstack[$I19]
    repr_bind_attr_int rx1214_cur, rx1214_curclass, "$!pos", rx1214_pos
    $P11 = rx1214_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1214_pos)
    rx1214_cstack = rx1214_cur."!cursor_capture"($P11, "sym")
    goto rxcap1216_done3324
  rxcap1216_fail3325:
    goto rx1214_fail3317
  rxcap1216_done3324:
    repr_bind_attr_int rx1214_cur, rx1214_curclass, "$!pos", rx1214_pos
    $P11 = rx1214_cur."O"("%relational, :op<isgt_s>")
    repr_get_attr_int $I11, $P11, rx1214_curclass, "$!pos"
    lt $I11, 0, rx1214_fail3317
    nqp_rxmark rx1214_bstack, rxsubrule1217_pass3326, -1, 0
  rxsubrule1217_pass3326:
    rx1214_cstack = rx1214_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1214_pos, $P11, rx1214_curclass, "$!pos"
    rx1214_cur."!cursor_pass"(rx1214_pos, "infix:sym<gt>", 'backtrack'=>1)
    .return (rx1214_cur)
  rx1214_restart3316:
    repr_get_attr_obj rx1214_cstack, rx1214_cur, rx1214_curclass, "$!cstack"
  rx1214_fail3317:
    unless rx1214_bstack, rx1214_done3315
    pop $I19, rx1214_bstack
    if_null rx1214_cstack, rx1214_cstack_done3320
    unless rx1214_cstack, rx1214_cstack_done3320
    dec $I19
    set $P11, rx1214_cstack[$I19]
  rx1214_cstack_done3320:
    pop rx1214_rep, rx1214_bstack
    pop rx1214_pos, rx1214_bstack
    pop $I19, rx1214_bstack
    lt rx1214_pos, -1, rx1214_done3315
    lt rx1214_pos, 0, rx1214_fail3317
    eq $I19, 0, rx1214_fail3317
    nqp_islist $I20, rx1214_cstack
    unless $I20, rx1214_jump3318
    elements $I18, rx1214_bstack
    le $I18, 0, rx1214_cut3319
    dec $I18
    set $I18, rx1214_bstack[$I18]
  rx1214_cut3319:
    assign rx1214_cstack, $I18
  rx1214_jump3318:
    jump $I19
  rx1214_done3315:
    rx1214_cur."!cursor_fail"()
    .return (rx1214_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=:=>" :subid("cuid_208_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1381
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1218_tgt
    .local int rx1218_pos
    .local int rx1218_off
    .local int rx1218_eos
    .local int rx1218_rep
    .local pmc rx1218_cur
    .local pmc rx1218_curclass
    .local pmc rx1218_bstack
    .local pmc rx1218_cstack
    (rx1218_cur, rx1218_tgt, rx1218_pos, rx1218_curclass, rx1218_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1218_cur
    length rx1218_eos, rx1218_tgt
    eq $I19, 1, rx1218_restart3329
    gt rx1218_pos, rx1218_eos, rx1218_fail3330
    repr_get_attr_int $I11, self, rx1218_curclass, "$!from"
    ne $I11, -1, rxscan1219_done3336
    goto rxscan1219_scan3335
  rxscan1219_loop3334:
    inc rx1218_pos
    gt rx1218_pos, rx1218_eos, rx1218_fail3330
    repr_bind_attr_int rx1218_cur, rx1218_curclass, "$!from", rx1218_pos
  rxscan1219_scan3335:
    nqp_rxmark rx1218_bstack, rxscan1219_loop3334, rx1218_pos, 0
  rxscan1219_done3336:
    nqp_rxmark rx1218_bstack, rxcap1220_fail3338, rx1218_pos, 0
    add $I11, rx1218_pos, 3
    gt $I11, rx1218_eos, rx1218_fail3330
    substr $S10, rx1218_tgt, rx1218_pos, 3
    ne $S10, ucs4:"=:=", rx1218_fail3330
    add rx1218_pos, 3
    nqp_rxpeek $I19, rx1218_bstack, rxcap1220_fail3338
    inc $I19
    set $I11, rx1218_bstack[$I19]
    repr_bind_attr_int rx1218_cur, rx1218_curclass, "$!pos", rx1218_pos
    $P11 = rx1218_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1218_pos)
    rx1218_cstack = rx1218_cur."!cursor_capture"($P11, "sym")
    goto rxcap1220_done3337
  rxcap1220_fail3338:
    goto rx1218_fail3330
  rxcap1220_done3337:
    repr_bind_attr_int rx1218_cur, rx1218_curclass, "$!pos", rx1218_pos
    $P11 = rx1218_cur."O"("%relational, :op<eqaddr>")
    repr_get_attr_int $I11, $P11, rx1218_curclass, "$!pos"
    lt $I11, 0, rx1218_fail3330
    nqp_rxmark rx1218_bstack, rxsubrule1221_pass3339, -1, 0
  rxsubrule1221_pass3339:
    rx1218_cstack = rx1218_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1218_pos, $P11, rx1218_curclass, "$!pos"
    rx1218_cur."!cursor_pass"(rx1218_pos, "infix:sym<=:=>", 'backtrack'=>1)
    .return (rx1218_cur)
  rx1218_restart3329:
    repr_get_attr_obj rx1218_cstack, rx1218_cur, rx1218_curclass, "$!cstack"
  rx1218_fail3330:
    unless rx1218_bstack, rx1218_done3328
    pop $I19, rx1218_bstack
    if_null rx1218_cstack, rx1218_cstack_done3333
    unless rx1218_cstack, rx1218_cstack_done3333
    dec $I19
    set $P11, rx1218_cstack[$I19]
  rx1218_cstack_done3333:
    pop rx1218_rep, rx1218_bstack
    pop rx1218_pos, rx1218_bstack
    pop $I19, rx1218_bstack
    lt rx1218_pos, -1, rx1218_done3328
    lt rx1218_pos, 0, rx1218_fail3330
    eq $I19, 0, rx1218_fail3330
    nqp_islist $I20, rx1218_cstack
    unless $I20, rx1218_jump3331
    elements $I18, rx1218_bstack
    le $I18, 0, rx1218_cut3332
    dec $I18
    set $I18, rx1218_bstack[$I18]
  rx1218_cut3332:
    assign rx1218_cstack, $I18
  rx1218_jump3331:
    jump $I19
  rx1218_done3328:
    rx1218_cur."!cursor_fail"()
    .return (rx1218_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_209_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1382
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1222_tgt
    .local int rx1222_pos
    .local int rx1222_off
    .local int rx1222_eos
    .local int rx1222_rep
    .local pmc rx1222_cur
    .local pmc rx1222_curclass
    .local pmc rx1222_bstack
    .local pmc rx1222_cstack
    (rx1222_cur, rx1222_tgt, rx1222_pos, rx1222_curclass, rx1222_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1222_cur
    length rx1222_eos, rx1222_tgt
    eq $I19, 1, rx1222_restart3342
    gt rx1222_pos, rx1222_eos, rx1222_fail3343
    repr_get_attr_int $I11, self, rx1222_curclass, "$!from"
    ne $I11, -1, rxscan1223_done3349
    goto rxscan1223_scan3348
  rxscan1223_loop3347:
    inc rx1222_pos
    gt rx1222_pos, rx1222_eos, rx1222_fail3343
    repr_bind_attr_int rx1222_cur, rx1222_curclass, "$!from", rx1222_pos
  rxscan1223_scan3348:
    nqp_rxmark rx1222_bstack, rxscan1223_loop3347, rx1222_pos, 0
  rxscan1223_done3349:
    nqp_rxmark rx1222_bstack, rxcap1224_fail3351, rx1222_pos, 0
    add $I11, rx1222_pos, 2
    gt $I11, rx1222_eos, rx1222_fail3343
    substr $S10, rx1222_tgt, rx1222_pos, 2
    ne $S10, ucs4:"~~", rx1222_fail3343
    add rx1222_pos, 2
    nqp_rxpeek $I19, rx1222_bstack, rxcap1224_fail3351
    inc $I19
    set $I11, rx1222_bstack[$I19]
    repr_bind_attr_int rx1222_cur, rx1222_curclass, "$!pos", rx1222_pos
    $P11 = rx1222_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1222_pos)
    rx1222_cstack = rx1222_cur."!cursor_capture"($P11, "sym")
    goto rxcap1224_done3350
  rxcap1224_fail3351:
    goto rx1222_fail3343
  rxcap1224_done3350:
    repr_bind_attr_int rx1222_cur, rx1222_curclass, "$!pos", rx1222_pos
    $P11 = rx1222_cur."O"("%relational, :reducecheck<smartmatch>")
    repr_get_attr_int $I11, $P11, rx1222_curclass, "$!pos"
    lt $I11, 0, rx1222_fail3343
    nqp_rxmark rx1222_bstack, rxsubrule1225_pass3352, -1, 0
  rxsubrule1225_pass3352:
    rx1222_cstack = rx1222_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1222_pos, $P11, rx1222_curclass, "$!pos"
    rx1222_cur."!cursor_pass"(rx1222_pos, "infix:sym<~~>", 'backtrack'=>1)
    .return (rx1222_cur)
  rx1222_restart3342:
    repr_get_attr_obj rx1222_cstack, rx1222_cur, rx1222_curclass, "$!cstack"
  rx1222_fail3343:
    unless rx1222_bstack, rx1222_done3341
    pop $I19, rx1222_bstack
    if_null rx1222_cstack, rx1222_cstack_done3346
    unless rx1222_cstack, rx1222_cstack_done3346
    dec $I19
    set $P11, rx1222_cstack[$I19]
  rx1222_cstack_done3346:
    pop rx1222_rep, rx1222_bstack
    pop rx1222_pos, rx1222_bstack
    pop $I19, rx1222_bstack
    lt rx1222_pos, -1, rx1222_done3341
    lt rx1222_pos, 0, rx1222_fail3343
    eq $I19, 0, rx1222_fail3343
    nqp_islist $I20, rx1222_cstack
    unless $I20, rx1222_jump3344
    elements $I18, rx1222_bstack
    le $I18, 0, rx1222_cut3345
    dec $I18
    set $I18, rx1222_bstack[$I18]
  rx1222_cut3345:
    assign rx1222_cstack, $I18
  rx1222_jump3344:
    jump $I19
  rx1222_done3341:
    rx1222_cur."!cursor_fail"()
    .return (rx1222_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<&&>" :subid("cuid_210_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1384
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1226_tgt
    .local int rx1226_pos
    .local int rx1226_off
    .local int rx1226_eos
    .local int rx1226_rep
    .local pmc rx1226_cur
    .local pmc rx1226_curclass
    .local pmc rx1226_bstack
    .local pmc rx1226_cstack
    (rx1226_cur, rx1226_tgt, rx1226_pos, rx1226_curclass, rx1226_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1226_cur
    length rx1226_eos, rx1226_tgt
    eq $I19, 1, rx1226_restart3355
    gt rx1226_pos, rx1226_eos, rx1226_fail3356
    repr_get_attr_int $I11, self, rx1226_curclass, "$!from"
    ne $I11, -1, rxscan1227_done3362
    goto rxscan1227_scan3361
  rxscan1227_loop3360:
    inc rx1226_pos
    gt rx1226_pos, rx1226_eos, rx1226_fail3356
    repr_bind_attr_int rx1226_cur, rx1226_curclass, "$!from", rx1226_pos
  rxscan1227_scan3361:
    nqp_rxmark rx1226_bstack, rxscan1227_loop3360, rx1226_pos, 0
  rxscan1227_done3362:
    nqp_rxmark rx1226_bstack, rxcap1228_fail3364, rx1226_pos, 0
    add $I11, rx1226_pos, 2
    gt $I11, rx1226_eos, rx1226_fail3356
    substr $S10, rx1226_tgt, rx1226_pos, 2
    ne $S10, ucs4:"&&", rx1226_fail3356
    add rx1226_pos, 2
    nqp_rxpeek $I19, rx1226_bstack, rxcap1228_fail3364
    inc $I19
    set $I11, rx1226_bstack[$I19]
    repr_bind_attr_int rx1226_cur, rx1226_curclass, "$!pos", rx1226_pos
    $P11 = rx1226_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1226_pos)
    rx1226_cstack = rx1226_cur."!cursor_capture"($P11, "sym")
    goto rxcap1228_done3363
  rxcap1228_fail3364:
    goto rx1226_fail3356
  rxcap1228_done3363:
    repr_bind_attr_int rx1226_cur, rx1226_curclass, "$!pos", rx1226_pos
    $P11 = rx1226_cur."O"("%tight_and, :op<if>")
    repr_get_attr_int $I11, $P11, rx1226_curclass, "$!pos"
    lt $I11, 0, rx1226_fail3356
    nqp_rxmark rx1226_bstack, rxsubrule1229_pass3365, -1, 0
  rxsubrule1229_pass3365:
    rx1226_cstack = rx1226_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1226_pos, $P11, rx1226_curclass, "$!pos"
    rx1226_cur."!cursor_pass"(rx1226_pos, "infix:sym<&&>", 'backtrack'=>1)
    .return (rx1226_cur)
  rx1226_restart3355:
    repr_get_attr_obj rx1226_cstack, rx1226_cur, rx1226_curclass, "$!cstack"
  rx1226_fail3356:
    unless rx1226_bstack, rx1226_done3354
    pop $I19, rx1226_bstack
    if_null rx1226_cstack, rx1226_cstack_done3359
    unless rx1226_cstack, rx1226_cstack_done3359
    dec $I19
    set $P11, rx1226_cstack[$I19]
  rx1226_cstack_done3359:
    pop rx1226_rep, rx1226_bstack
    pop rx1226_pos, rx1226_bstack
    pop $I19, rx1226_bstack
    lt rx1226_pos, -1, rx1226_done3354
    lt rx1226_pos, 0, rx1226_fail3356
    eq $I19, 0, rx1226_fail3356
    nqp_islist $I20, rx1226_cstack
    unless $I20, rx1226_jump3357
    elements $I18, rx1226_bstack
    le $I18, 0, rx1226_cut3358
    dec $I18
    set $I18, rx1226_bstack[$I18]
  rx1226_cut3358:
    assign rx1226_cstack, $I18
  rx1226_jump3357:
    jump $I19
  rx1226_done3354:
    rx1226_cur."!cursor_fail"()
    .return (rx1226_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<||>" :subid("cuid_211_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1386
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1230_tgt
    .local int rx1230_pos
    .local int rx1230_off
    .local int rx1230_eos
    .local int rx1230_rep
    .local pmc rx1230_cur
    .local pmc rx1230_curclass
    .local pmc rx1230_bstack
    .local pmc rx1230_cstack
    (rx1230_cur, rx1230_tgt, rx1230_pos, rx1230_curclass, rx1230_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1230_cur
    length rx1230_eos, rx1230_tgt
    eq $I19, 1, rx1230_restart3368
    gt rx1230_pos, rx1230_eos, rx1230_fail3369
    repr_get_attr_int $I11, self, rx1230_curclass, "$!from"
    ne $I11, -1, rxscan1231_done3375
    goto rxscan1231_scan3374
  rxscan1231_loop3373:
    inc rx1230_pos
    gt rx1230_pos, rx1230_eos, rx1230_fail3369
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!from", rx1230_pos
  rxscan1231_scan3374:
    nqp_rxmark rx1230_bstack, rxscan1231_loop3373, rx1230_pos, 0
  rxscan1231_done3375:
    nqp_rxmark rx1230_bstack, rxcap1232_fail3377, rx1230_pos, 0
    add $I11, rx1230_pos, 2
    gt $I11, rx1230_eos, rx1230_fail3369
    substr $S10, rx1230_tgt, rx1230_pos, 2
    ne $S10, ucs4:"||", rx1230_fail3369
    add rx1230_pos, 2
    nqp_rxpeek $I19, rx1230_bstack, rxcap1232_fail3377
    inc $I19
    set $I11, rx1230_bstack[$I19]
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1230_pos)
    rx1230_cstack = rx1230_cur."!cursor_capture"($P11, "sym")
    goto rxcap1232_done3376
  rxcap1232_fail3377:
    goto rx1230_fail3369
  rxcap1232_done3376:
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."O"("%tight_or, :op<unless>")
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3369
    nqp_rxmark rx1230_bstack, rxsubrule1233_pass3378, -1, 0
  rxsubrule1233_pass3378:
    rx1230_cstack = rx1230_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1230_pos, $P11, rx1230_curclass, "$!pos"
    rx1230_cur."!cursor_pass"(rx1230_pos, "infix:sym<||>", 'backtrack'=>1)
    .return (rx1230_cur)
  rx1230_restart3368:
    repr_get_attr_obj rx1230_cstack, rx1230_cur, rx1230_curclass, "$!cstack"
  rx1230_fail3369:
    unless rx1230_bstack, rx1230_done3367
    pop $I19, rx1230_bstack
    if_null rx1230_cstack, rx1230_cstack_done3372
    unless rx1230_cstack, rx1230_cstack_done3372
    dec $I19
    set $P11, rx1230_cstack[$I19]
  rx1230_cstack_done3372:
    pop rx1230_rep, rx1230_bstack
    pop rx1230_pos, rx1230_bstack
    pop $I19, rx1230_bstack
    lt rx1230_pos, -1, rx1230_done3367
    lt rx1230_pos, 0, rx1230_fail3369
    eq $I19, 0, rx1230_fail3369
    nqp_islist $I20, rx1230_cstack
    unless $I20, rx1230_jump3370
    elements $I18, rx1230_bstack
    le $I18, 0, rx1230_cut3371
    dec $I18
    set $I18, rx1230_bstack[$I18]
  rx1230_cut3371:
    assign rx1230_cstack, $I18
  rx1230_jump3370:
    jump $I19
  rx1230_done3367:
    rx1230_cur."!cursor_fail"()
    .return (rx1230_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<//>" :subid("cuid_212_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1387
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1234_tgt
    .local int rx1234_pos
    .local int rx1234_off
    .local int rx1234_eos
    .local int rx1234_rep
    .local pmc rx1234_cur
    .local pmc rx1234_curclass
    .local pmc rx1234_bstack
    .local pmc rx1234_cstack
    (rx1234_cur, rx1234_tgt, rx1234_pos, rx1234_curclass, rx1234_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1234_cur
    length rx1234_eos, rx1234_tgt
    eq $I19, 1, rx1234_restart3381
    gt rx1234_pos, rx1234_eos, rx1234_fail3382
    repr_get_attr_int $I11, self, rx1234_curclass, "$!from"
    ne $I11, -1, rxscan1235_done3388
    goto rxscan1235_scan3387
  rxscan1235_loop3386:
    inc rx1234_pos
    gt rx1234_pos, rx1234_eos, rx1234_fail3382
    repr_bind_attr_int rx1234_cur, rx1234_curclass, "$!from", rx1234_pos
  rxscan1235_scan3387:
    nqp_rxmark rx1234_bstack, rxscan1235_loop3386, rx1234_pos, 0
  rxscan1235_done3388:
    nqp_rxmark rx1234_bstack, rxcap1236_fail3390, rx1234_pos, 0
    add $I11, rx1234_pos, 2
    gt $I11, rx1234_eos, rx1234_fail3382
    substr $S10, rx1234_tgt, rx1234_pos, 2
    ne $S10, ucs4:"//", rx1234_fail3382
    add rx1234_pos, 2
    nqp_rxpeek $I19, rx1234_bstack, rxcap1236_fail3390
    inc $I19
    set $I11, rx1234_bstack[$I19]
    repr_bind_attr_int rx1234_cur, rx1234_curclass, "$!pos", rx1234_pos
    $P11 = rx1234_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1234_pos)
    rx1234_cstack = rx1234_cur."!cursor_capture"($P11, "sym")
    goto rxcap1236_done3389
  rxcap1236_fail3390:
    goto rx1234_fail3382
  rxcap1236_done3389:
    repr_bind_attr_int rx1234_cur, rx1234_curclass, "$!pos", rx1234_pos
    $P11 = rx1234_cur."O"("%tight_or, :op<defor>")
    repr_get_attr_int $I11, $P11, rx1234_curclass, "$!pos"
    lt $I11, 0, rx1234_fail3382
    nqp_rxmark rx1234_bstack, rxsubrule1237_pass3391, -1, 0
  rxsubrule1237_pass3391:
    rx1234_cstack = rx1234_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1234_pos, $P11, rx1234_curclass, "$!pos"
    rx1234_cur."!cursor_pass"(rx1234_pos, "infix:sym<//>", 'backtrack'=>1)
    .return (rx1234_cur)
  rx1234_restart3381:
    repr_get_attr_obj rx1234_cstack, rx1234_cur, rx1234_curclass, "$!cstack"
  rx1234_fail3382:
    unless rx1234_bstack, rx1234_done3380
    pop $I19, rx1234_bstack
    if_null rx1234_cstack, rx1234_cstack_done3385
    unless rx1234_cstack, rx1234_cstack_done3385
    dec $I19
    set $P11, rx1234_cstack[$I19]
  rx1234_cstack_done3385:
    pop rx1234_rep, rx1234_bstack
    pop rx1234_pos, rx1234_bstack
    pop $I19, rx1234_bstack
    lt rx1234_pos, -1, rx1234_done3380
    lt rx1234_pos, 0, rx1234_fail3382
    eq $I19, 0, rx1234_fail3382
    nqp_islist $I20, rx1234_cstack
    unless $I20, rx1234_jump3383
    elements $I18, rx1234_bstack
    le $I18, 0, rx1234_cut3384
    dec $I18
    set $I18, rx1234_bstack[$I18]
  rx1234_cut3384:
    assign rx1234_cstack, $I18
  rx1234_jump3383:
    jump $I19
  rx1234_done3380:
    rx1234_cur."!cursor_fail"()
    .return (rx1234_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<?? !!>" :subid("cuid_213_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1389
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1238_tgt
    .local int rx1238_pos
    .local int rx1238_off
    .local int rx1238_eos
    .local int rx1238_rep
    .local pmc rx1238_cur
    .local pmc rx1238_curclass
    .local pmc rx1238_bstack
    .local pmc rx1238_cstack
    (rx1238_cur, rx1238_tgt, rx1238_pos, rx1238_curclass, rx1238_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1238_cur
    length rx1238_eos, rx1238_tgt
    eq $I19, 1, rx1238_restart3394
    gt rx1238_pos, rx1238_eos, rx1238_fail3395
    repr_get_attr_int $I11, self, rx1238_curclass, "$!from"
    ne $I11, -1, rxscan1239_done3401
    goto rxscan1239_scan3400
  rxscan1239_loop3399:
    inc rx1238_pos
    gt rx1238_pos, rx1238_eos, rx1238_fail3395
    repr_bind_attr_int rx1238_cur, rx1238_curclass, "$!from", rx1238_pos
  rxscan1239_scan3400:
    nqp_rxmark rx1238_bstack, rxscan1239_loop3399, rx1238_pos, 0
  rxscan1239_done3401:
    add $I11, rx1238_pos, 2
    gt $I11, rx1238_eos, rx1238_fail3395
    substr $S10, rx1238_tgt, rx1238_pos, 2
    ne $S10, ucs4:"??", rx1238_fail3395
    add rx1238_pos, 2
    repr_bind_attr_int rx1238_cur, rx1238_curclass, "$!pos", rx1238_pos
    $P11 = rx1238_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1238_curclass, "$!pos"
    lt $I11, 0, rx1238_fail3395
    repr_get_attr_int rx1238_pos, $P11, rx1238_curclass, "$!pos"
    repr_bind_attr_int rx1238_cur, rx1238_curclass, "$!pos", rx1238_pos
    $P11 = rx1238_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx1238_curclass, "$!pos"
    lt $I11, 0, rx1238_fail3395
    nqp_rxmark rx1238_bstack, rxsubrule1241_pass3403, -1, 0
  rxsubrule1241_pass3403:
    rx1238_cstack = rx1238_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1238_pos, $P11, rx1238_curclass, "$!pos"
    add $I11, rx1238_pos, 2
    gt $I11, rx1238_eos, rx1238_fail3395
    substr $S10, rx1238_tgt, rx1238_pos, 2
    ne $S10, ucs4:"!!", rx1238_fail3395
    add rx1238_pos, 2
    repr_bind_attr_int rx1238_cur, rx1238_curclass, "$!pos", rx1238_pos
    $P11 = rx1238_cur."O"("%conditional, :reducecheck<ternary>, :op<if>")
    repr_get_attr_int $I11, $P11, rx1238_curclass, "$!pos"
    lt $I11, 0, rx1238_fail3395
    nqp_rxmark rx1238_bstack, rxsubrule1242_pass3404, -1, 0
  rxsubrule1242_pass3404:
    rx1238_cstack = rx1238_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1238_pos, $P11, rx1238_curclass, "$!pos"
    rx1238_cur."!cursor_pass"(rx1238_pos, "infix:sym<?? !!>", 'backtrack'=>1)
    .return (rx1238_cur)
  rx1238_restart3394:
    repr_get_attr_obj rx1238_cstack, rx1238_cur, rx1238_curclass, "$!cstack"
  rx1238_fail3395:
    unless rx1238_bstack, rx1238_done3393
    pop $I19, rx1238_bstack
    if_null rx1238_cstack, rx1238_cstack_done3398
    unless rx1238_cstack, rx1238_cstack_done3398
    dec $I19
    set $P11, rx1238_cstack[$I19]
  rx1238_cstack_done3398:
    pop rx1238_rep, rx1238_bstack
    pop rx1238_pos, rx1238_bstack
    pop $I19, rx1238_bstack
    lt rx1238_pos, -1, rx1238_done3393
    lt rx1238_pos, 0, rx1238_fail3395
    eq $I19, 0, rx1238_fail3395
    nqp_islist $I20, rx1238_cstack
    unless $I20, rx1238_jump3396
    elements $I18, rx1238_bstack
    le $I18, 0, rx1238_cut3397
    dec $I18
    set $I18, rx1238_bstack[$I18]
  rx1238_cut3397:
    assign rx1238_cstack, $I18
  rx1238_jump3396:
    jump $I19
  rx1238_done3393:
    rx1238_cur."!cursor_fail"()
    .return (rx1238_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=>" :subid("cuid_214_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1397
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1243_tgt
    .local int rx1243_pos
    .local int rx1243_off
    .local int rx1243_eos
    .local int rx1243_rep
    .local pmc rx1243_cur
    .local pmc rx1243_curclass
    .local pmc rx1243_bstack
    .local pmc rx1243_cstack
    (rx1243_cur, rx1243_tgt, rx1243_pos, rx1243_curclass, rx1243_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1243_cur
    length rx1243_eos, rx1243_tgt
    eq $I19, 1, rx1243_restart3407
    gt rx1243_pos, rx1243_eos, rx1243_fail3408
    repr_get_attr_int $I11, self, rx1243_curclass, "$!from"
    ne $I11, -1, rxscan1244_done3414
    goto rxscan1244_scan3413
  rxscan1244_loop3412:
    inc rx1243_pos
    gt rx1243_pos, rx1243_eos, rx1243_fail3408
    repr_bind_attr_int rx1243_cur, rx1243_curclass, "$!from", rx1243_pos
  rxscan1244_scan3413:
    nqp_rxmark rx1243_bstack, rxscan1244_loop3412, rx1243_pos, 0
  rxscan1244_done3414:
    nqp_rxmark rx1243_bstack, rxcap1245_fail3416, rx1243_pos, 0
    add $I11, rx1243_pos, 1
    gt $I11, rx1243_eos, rx1243_fail3408
    substr $S10, rx1243_tgt, rx1243_pos, 1
    ne $S10, ucs4:"=", rx1243_fail3408
    add rx1243_pos, 1
    nqp_rxpeek $I19, rx1243_bstack, rxcap1245_fail3416
    inc $I19
    set $I11, rx1243_bstack[$I19]
    repr_bind_attr_int rx1243_cur, rx1243_curclass, "$!pos", rx1243_pos
    $P11 = rx1243_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1243_pos)
    rx1243_cstack = rx1243_cur."!cursor_capture"($P11, "sym")
    goto rxcap1245_done3415
  rxcap1245_fail3416:
    goto rx1243_fail3408
  rxcap1245_done3415:
    repr_bind_attr_int rx1243_cur, rx1243_curclass, "$!pos", rx1243_pos
    $P11 = rx1243_cur."panic"("Assignment (\"=\") not supported in NQP, use \":=\" instead")
    repr_get_attr_int $I11, $P11, rx1243_curclass, "$!pos"
    lt $I11, 0, rx1243_fail3408
    repr_get_attr_int rx1243_pos, $P11, rx1243_curclass, "$!pos"
    rx1243_cur."!cursor_pass"(rx1243_pos, "infix:sym<=>", 'backtrack'=>1)
    .return (rx1243_cur)
  rx1243_restart3407:
    repr_get_attr_obj rx1243_cstack, rx1243_cur, rx1243_curclass, "$!cstack"
  rx1243_fail3408:
    unless rx1243_bstack, rx1243_done3406
    pop $I19, rx1243_bstack
    if_null rx1243_cstack, rx1243_cstack_done3411
    unless rx1243_cstack, rx1243_cstack_done3411
    dec $I19
    set $P11, rx1243_cstack[$I19]
  rx1243_cstack_done3411:
    pop rx1243_rep, rx1243_bstack
    pop rx1243_pos, rx1243_bstack
    pop $I19, rx1243_bstack
    lt rx1243_pos, -1, rx1243_done3406
    lt rx1243_pos, 0, rx1243_fail3408
    eq $I19, 0, rx1243_fail3408
    nqp_islist $I20, rx1243_cstack
    unless $I20, rx1243_jump3409
    elements $I18, rx1243_bstack
    le $I18, 0, rx1243_cut3410
    dec $I18
    set $I18, rx1243_bstack[$I18]
  rx1243_cut3410:
    assign rx1243_cstack, $I18
  rx1243_jump3409:
    jump $I19
  rx1243_done3406:
    rx1243_cur."!cursor_fail"()
    .return (rx1243_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<:=>" :subid("cuid_215_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1400
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1247_tgt
    .local int rx1247_pos
    .local int rx1247_off
    .local int rx1247_eos
    .local int rx1247_rep
    .local pmc rx1247_cur
    .local pmc rx1247_curclass
    .local pmc rx1247_bstack
    .local pmc rx1247_cstack
    (rx1247_cur, rx1247_tgt, rx1247_pos, rx1247_curclass, rx1247_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1247_cur
    length rx1247_eos, rx1247_tgt
    eq $I19, 1, rx1247_restart3420
    gt rx1247_pos, rx1247_eos, rx1247_fail3421
    repr_get_attr_int $I11, self, rx1247_curclass, "$!from"
    ne $I11, -1, rxscan1248_done3427
    goto rxscan1248_scan3426
  rxscan1248_loop3425:
    inc rx1247_pos
    gt rx1247_pos, rx1247_eos, rx1247_fail3421
    repr_bind_attr_int rx1247_cur, rx1247_curclass, "$!from", rx1247_pos
  rxscan1248_scan3426:
    nqp_rxmark rx1247_bstack, rxscan1248_loop3425, rx1247_pos, 0
  rxscan1248_done3427:
    nqp_rxmark rx1247_bstack, rxcap1249_fail3429, rx1247_pos, 0
    add $I11, rx1247_pos, 2
    gt $I11, rx1247_eos, rx1247_fail3421
    substr $S10, rx1247_tgt, rx1247_pos, 2
    ne $S10, ucs4:":=", rx1247_fail3421
    add rx1247_pos, 2
    nqp_rxpeek $I19, rx1247_bstack, rxcap1249_fail3429
    inc $I19
    set $I11, rx1247_bstack[$I19]
    repr_bind_attr_int rx1247_cur, rx1247_curclass, "$!pos", rx1247_pos
    $P11 = rx1247_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1247_pos)
    rx1247_cstack = rx1247_cur."!cursor_capture"($P11, "sym")
    goto rxcap1249_done3428
  rxcap1249_fail3429:
    goto rx1247_fail3421
  rxcap1249_done3428:
    repr_bind_attr_int rx1247_cur, rx1247_curclass, "$!pos", rx1247_pos
    $P11 = rx1247_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1247_curclass, "$!pos"
    lt $I11, 0, rx1247_fail3421
    nqp_rxmark rx1247_bstack, rxsubrule1250_pass3430, -1, 0
  rxsubrule1250_pass3430:
    rx1247_cstack = rx1247_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1247_pos, $P11, rx1247_curclass, "$!pos"
    rx1247_cur."!cursor_pass"(rx1247_pos, "infix:sym<:=>", 'backtrack'=>1)
    .return (rx1247_cur)
  rx1247_restart3420:
    repr_get_attr_obj rx1247_cstack, rx1247_cur, rx1247_curclass, "$!cstack"
  rx1247_fail3421:
    unless rx1247_bstack, rx1247_done3419
    pop $I19, rx1247_bstack
    if_null rx1247_cstack, rx1247_cstack_done3424
    unless rx1247_cstack, rx1247_cstack_done3424
    dec $I19
    set $P11, rx1247_cstack[$I19]
  rx1247_cstack_done3424:
    pop rx1247_rep, rx1247_bstack
    pop rx1247_pos, rx1247_bstack
    pop $I19, rx1247_bstack
    lt rx1247_pos, -1, rx1247_done3419
    lt rx1247_pos, 0, rx1247_fail3421
    eq $I19, 0, rx1247_fail3421
    nqp_islist $I20, rx1247_cstack
    unless $I20, rx1247_jump3422
    elements $I18, rx1247_bstack
    le $I18, 0, rx1247_cut3423
    dec $I18
    set $I18, rx1247_bstack[$I18]
  rx1247_cut3423:
    assign rx1247_cstack, $I18
  rx1247_jump3422:
    jump $I19
  rx1247_done3419:
    rx1247_cur."!cursor_fail"()
    .return (rx1247_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<::=>" :subid("cuid_216_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1401
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1251_tgt
    .local int rx1251_pos
    .local int rx1251_off
    .local int rx1251_eos
    .local int rx1251_rep
    .local pmc rx1251_cur
    .local pmc rx1251_curclass
    .local pmc rx1251_bstack
    .local pmc rx1251_cstack
    (rx1251_cur, rx1251_tgt, rx1251_pos, rx1251_curclass, rx1251_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1251_cur
    length rx1251_eos, rx1251_tgt
    eq $I19, 1, rx1251_restart3433
    gt rx1251_pos, rx1251_eos, rx1251_fail3434
    repr_get_attr_int $I11, self, rx1251_curclass, "$!from"
    ne $I11, -1, rxscan1252_done3440
    goto rxscan1252_scan3439
  rxscan1252_loop3438:
    inc rx1251_pos
    gt rx1251_pos, rx1251_eos, rx1251_fail3434
    repr_bind_attr_int rx1251_cur, rx1251_curclass, "$!from", rx1251_pos
  rxscan1252_scan3439:
    nqp_rxmark rx1251_bstack, rxscan1252_loop3438, rx1251_pos, 0
  rxscan1252_done3440:
    nqp_rxmark rx1251_bstack, rxcap1253_fail3442, rx1251_pos, 0
    add $I11, rx1251_pos, 3
    gt $I11, rx1251_eos, rx1251_fail3434
    substr $S10, rx1251_tgt, rx1251_pos, 3
    ne $S10, ucs4:"::=", rx1251_fail3434
    add rx1251_pos, 3
    nqp_rxpeek $I19, rx1251_bstack, rxcap1253_fail3442
    inc $I19
    set $I11, rx1251_bstack[$I19]
    repr_bind_attr_int rx1251_cur, rx1251_curclass, "$!pos", rx1251_pos
    $P11 = rx1251_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1251_pos)
    rx1251_cstack = rx1251_cur."!cursor_capture"($P11, "sym")
    goto rxcap1253_done3441
  rxcap1253_fail3442:
    goto rx1251_fail3434
  rxcap1253_done3441:
    repr_bind_attr_int rx1251_cur, rx1251_curclass, "$!pos", rx1251_pos
    $P11 = rx1251_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1251_curclass, "$!pos"
    lt $I11, 0, rx1251_fail3434
    nqp_rxmark rx1251_bstack, rxsubrule1254_pass3443, -1, 0
  rxsubrule1254_pass3443:
    rx1251_cstack = rx1251_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1251_pos, $P11, rx1251_curclass, "$!pos"
    rx1251_cur."!cursor_pass"(rx1251_pos, "infix:sym<::=>", 'backtrack'=>1)
    .return (rx1251_cur)
  rx1251_restart3433:
    repr_get_attr_obj rx1251_cstack, rx1251_cur, rx1251_curclass, "$!cstack"
  rx1251_fail3434:
    unless rx1251_bstack, rx1251_done3432
    pop $I19, rx1251_bstack
    if_null rx1251_cstack, rx1251_cstack_done3437
    unless rx1251_cstack, rx1251_cstack_done3437
    dec $I19
    set $P11, rx1251_cstack[$I19]
  rx1251_cstack_done3437:
    pop rx1251_rep, rx1251_bstack
    pop rx1251_pos, rx1251_bstack
    pop $I19, rx1251_bstack
    lt rx1251_pos, -1, rx1251_done3432
    lt rx1251_pos, 0, rx1251_fail3434
    eq $I19, 0, rx1251_fail3434
    nqp_islist $I20, rx1251_cstack
    unless $I20, rx1251_jump3435
    elements $I18, rx1251_bstack
    le $I18, 0, rx1251_cut3436
    dec $I18
    set $I18, rx1251_bstack[$I18]
  rx1251_cut3436:
    assign rx1251_cstack, $I18
  rx1251_jump3435:
    jump $I19
  rx1251_done3432:
    rx1251_cur."!cursor_fail"()
    .return (rx1251_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<,>" :subid("cuid_217_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1403
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1255_tgt
    .local int rx1255_pos
    .local int rx1255_off
    .local int rx1255_eos
    .local int rx1255_rep
    .local pmc rx1255_cur
    .local pmc rx1255_curclass
    .local pmc rx1255_bstack
    .local pmc rx1255_cstack
    (rx1255_cur, rx1255_tgt, rx1255_pos, rx1255_curclass, rx1255_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1255_cur
    length rx1255_eos, rx1255_tgt
    eq $I19, 1, rx1255_restart3446
    gt rx1255_pos, rx1255_eos, rx1255_fail3447
    repr_get_attr_int $I11, self, rx1255_curclass, "$!from"
    ne $I11, -1, rxscan1256_done3453
    goto rxscan1256_scan3452
  rxscan1256_loop3451:
    inc rx1255_pos
    gt rx1255_pos, rx1255_eos, rx1255_fail3447
    repr_bind_attr_int rx1255_cur, rx1255_curclass, "$!from", rx1255_pos
  rxscan1256_scan3452:
    nqp_rxmark rx1255_bstack, rxscan1256_loop3451, rx1255_pos, 0
  rxscan1256_done3453:
    nqp_rxmark rx1255_bstack, rxcap1257_fail3455, rx1255_pos, 0
    add $I11, rx1255_pos, 1
    gt $I11, rx1255_eos, rx1255_fail3447
    substr $S10, rx1255_tgt, rx1255_pos, 1
    ne $S10, ucs4:",", rx1255_fail3447
    add rx1255_pos, 1
    nqp_rxpeek $I19, rx1255_bstack, rxcap1257_fail3455
    inc $I19
    set $I11, rx1255_bstack[$I19]
    repr_bind_attr_int rx1255_cur, rx1255_curclass, "$!pos", rx1255_pos
    $P11 = rx1255_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1255_pos)
    rx1255_cstack = rx1255_cur."!cursor_capture"($P11, "sym")
    goto rxcap1257_done3454
  rxcap1257_fail3455:
    goto rx1255_fail3447
  rxcap1257_done3454:
    repr_bind_attr_int rx1255_cur, rx1255_curclass, "$!pos", rx1255_pos
    $P11 = rx1255_cur."O"("%comma, :op<list>")
    repr_get_attr_int $I11, $P11, rx1255_curclass, "$!pos"
    lt $I11, 0, rx1255_fail3447
    nqp_rxmark rx1255_bstack, rxsubrule1258_pass3456, -1, 0
  rxsubrule1258_pass3456:
    rx1255_cstack = rx1255_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1255_pos, $P11, rx1255_curclass, "$!pos"
    rx1255_cur."!cursor_pass"(rx1255_pos, "infix:sym<,>", 'backtrack'=>1)
    .return (rx1255_cur)
  rx1255_restart3446:
    repr_get_attr_obj rx1255_cstack, rx1255_cur, rx1255_curclass, "$!cstack"
  rx1255_fail3447:
    unless rx1255_bstack, rx1255_done3445
    pop $I19, rx1255_bstack
    if_null rx1255_cstack, rx1255_cstack_done3450
    unless rx1255_cstack, rx1255_cstack_done3450
    dec $I19
    set $P11, rx1255_cstack[$I19]
  rx1255_cstack_done3450:
    pop rx1255_rep, rx1255_bstack
    pop rx1255_pos, rx1255_bstack
    pop $I19, rx1255_bstack
    lt rx1255_pos, -1, rx1255_done3445
    lt rx1255_pos, 0, rx1255_fail3447
    eq $I19, 0, rx1255_fail3447
    nqp_islist $I20, rx1255_cstack
    unless $I20, rx1255_jump3448
    elements $I18, rx1255_bstack
    le $I18, 0, rx1255_cut3449
    dec $I18
    set $I18, rx1255_bstack[$I18]
  rx1255_cut3449:
    assign rx1255_cstack, $I18
  rx1255_jump3448:
    jump $I19
  rx1255_done3445:
    rx1255_cur."!cursor_fail"()
    .return (rx1255_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_218_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1405
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_410_1360426903.566' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1259_tgt
    .local int rx1259_pos
    .local int rx1259_off
    .local int rx1259_eos
    .local int rx1259_rep
    .local pmc rx1259_cur
    .local pmc rx1259_curclass
    .local pmc rx1259_bstack
    .local pmc rx1259_cstack
    (rx1259_cur, rx1259_tgt, rx1259_pos, rx1259_curclass, rx1259_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1259_cur
    length rx1259_eos, rx1259_tgt
    eq $I19, 1, rx1259_restart3459
    gt rx1259_pos, rx1259_eos, rx1259_fail3460
    repr_get_attr_int $I11, self, rx1259_curclass, "$!from"
    ne $I11, -1, rxscan1260_done3466
    goto rxscan1260_scan3465
  rxscan1260_loop3464:
    inc rx1259_pos
    gt rx1259_pos, rx1259_eos, rx1259_fail3460
    repr_bind_attr_int rx1259_cur, rx1259_curclass, "$!from", rx1259_pos
  rxscan1260_scan3465:
    nqp_rxmark rx1259_bstack, rxscan1260_loop3464, rx1259_pos, 0
  rxscan1260_done3466:
    nqp_rxmark rx1259_bstack, rxcap1261_fail3468, rx1259_pos, 0
    add $I11, rx1259_pos, 6
    gt $I11, rx1259_eos, rx1259_fail3460
    substr $S10, rx1259_tgt, rx1259_pos, 6
    ne $S10, ucs4:"return", rx1259_fail3460
    add rx1259_pos, 6
    nqp_rxpeek $I19, rx1259_bstack, rxcap1261_fail3468
    inc $I19
    set $I11, rx1259_bstack[$I19]
    repr_bind_attr_int rx1259_cur, rx1259_curclass, "$!pos", rx1259_pos
    $P11 = rx1259_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1259_pos)
    rx1259_cstack = rx1259_cur."!cursor_capture"($P11, "sym")
    goto rxcap1261_done3467
  rxcap1261_fail3468:
    goto rx1259_fail3460
  rxcap1261_done3467:
    ge rx1259_pos, rx1259_eos, rx1259_fail3460
    is_cclass $I11, .CCLASS_WHITESPACE, rx1259_tgt, rx1259_pos
    unless $I11, rx1259_fail3460
    add rx1259_pos, 1
    repr_bind_attr_int rx1259_cur, rx1259_curclass, "$!pos", rx1259_pos
    $P11 = rx1259_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1259_curclass, "$!pos"
    lt $I11, 0, rx1259_fail3460
    nqp_rxmark rx1259_bstack, rxsubrule1262_pass3469, -1, 0
  rxsubrule1262_pass3469:
    rx1259_cstack = rx1259_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1259_pos, $P11, rx1259_curclass, "$!pos"
    repr_bind_attr_int rx1259_cur, rx1259_curclass, "$!pos", rx1259_pos
    store_lex unicode:"$\x{a2}", rx1259_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_410_1360426903.566' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1259_cur."!cursor_pass"(rx1259_pos, "prefix:sym<return>", 'backtrack'=>1)
    .return (rx1259_cur)
  rx1259_restart3459:
    repr_get_attr_obj rx1259_cstack, rx1259_cur, rx1259_curclass, "$!cstack"
  rx1259_fail3460:
    unless rx1259_bstack, rx1259_done3458
    pop $I19, rx1259_bstack
    if_null rx1259_cstack, rx1259_cstack_done3463
    unless rx1259_cstack, rx1259_cstack_done3463
    dec $I19
    set $P11, rx1259_cstack[$I19]
  rx1259_cstack_done3463:
    pop rx1259_rep, rx1259_bstack
    pop rx1259_pos, rx1259_bstack
    pop $I19, rx1259_bstack
    lt rx1259_pos, -1, rx1259_done3458
    lt rx1259_pos, 0, rx1259_fail3460
    eq $I19, 0, rx1259_fail3460
    nqp_islist $I20, rx1259_cstack
    unless $I20, rx1259_jump3461
    elements $I18, rx1259_bstack
    le $I18, 0, rx1259_cut3462
    dec $I18
    set $I18, rx1259_bstack[$I18]
  rx1259_cut3462:
    assign rx1259_cstack, $I18
  rx1259_jump3461:
    jump $I19
  rx1259_done3458:
    rx1259_cur."!cursor_fail"()
    .return (rx1259_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_410_1360426903.566") :anon :lex :outer("cuid_218_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1405

    box $P5001, 1
    store_dynamic_lex "$*RETURN_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_219_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1406
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1263_tgt
    .local int rx1263_pos
    .local int rx1263_off
    .local int rx1263_eos
    .local int rx1263_rep
    .local pmc rx1263_cur
    .local pmc rx1263_curclass
    .local pmc rx1263_bstack
    .local pmc rx1263_cstack
    (rx1263_cur, rx1263_tgt, rx1263_pos, rx1263_curclass, rx1263_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1263_cur
    length rx1263_eos, rx1263_tgt
    eq $I19, 1, rx1263_restart3472
    gt rx1263_pos, rx1263_eos, rx1263_fail3473
    repr_get_attr_int $I11, self, rx1263_curclass, "$!from"
    ne $I11, -1, rxscan1264_done3479
    goto rxscan1264_scan3478
  rxscan1264_loop3477:
    inc rx1263_pos
    gt rx1263_pos, rx1263_eos, rx1263_fail3473
    repr_bind_attr_int rx1263_cur, rx1263_curclass, "$!from", rx1263_pos
  rxscan1264_scan3478:
    nqp_rxmark rx1263_bstack, rxscan1264_loop3477, rx1263_pos, 0
  rxscan1264_done3479:
    nqp_rxmark rx1263_bstack, rxcap1265_fail3481, rx1263_pos, 0
    add $I11, rx1263_pos, 4
    gt $I11, rx1263_eos, rx1263_fail3473
    substr $S10, rx1263_tgt, rx1263_pos, 4
    ne $S10, ucs4:"make", rx1263_fail3473
    add rx1263_pos, 4
    nqp_rxpeek $I19, rx1263_bstack, rxcap1265_fail3481
    inc $I19
    set $I11, rx1263_bstack[$I19]
    repr_bind_attr_int rx1263_cur, rx1263_curclass, "$!pos", rx1263_pos
    $P11 = rx1263_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1263_pos)
    rx1263_cstack = rx1263_cur."!cursor_capture"($P11, "sym")
    goto rxcap1265_done3480
  rxcap1265_fail3481:
    goto rx1263_fail3473
  rxcap1265_done3480:
    ge rx1263_pos, rx1263_eos, rx1263_fail3473
    is_cclass $I11, .CCLASS_WHITESPACE, rx1263_tgt, rx1263_pos
    unless $I11, rx1263_fail3473
    add rx1263_pos, 1
    repr_bind_attr_int rx1263_cur, rx1263_curclass, "$!pos", rx1263_pos
    $P11 = rx1263_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1263_curclass, "$!pos"
    lt $I11, 0, rx1263_fail3473
    nqp_rxmark rx1263_bstack, rxsubrule1266_pass3482, -1, 0
  rxsubrule1266_pass3482:
    rx1263_cstack = rx1263_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1263_pos, $P11, rx1263_curclass, "$!pos"
    rx1263_cur."!cursor_pass"(rx1263_pos, "prefix:sym<make>", 'backtrack'=>1)
    .return (rx1263_cur)
  rx1263_restart3472:
    repr_get_attr_obj rx1263_cstack, rx1263_cur, rx1263_curclass, "$!cstack"
  rx1263_fail3473:
    unless rx1263_bstack, rx1263_done3471
    pop $I19, rx1263_bstack
    if_null rx1263_cstack, rx1263_cstack_done3476
    unless rx1263_cstack, rx1263_cstack_done3476
    dec $I19
    set $P11, rx1263_cstack[$I19]
  rx1263_cstack_done3476:
    pop rx1263_rep, rx1263_bstack
    pop rx1263_pos, rx1263_bstack
    pop $I19, rx1263_bstack
    lt rx1263_pos, -1, rx1263_done3471
    lt rx1263_pos, 0, rx1263_fail3473
    eq $I19, 0, rx1263_fail3473
    nqp_islist $I20, rx1263_cstack
    unless $I20, rx1263_jump3474
    elements $I18, rx1263_bstack
    le $I18, 0, rx1263_cut3475
    dec $I18
    set $I18, rx1263_bstack[$I18]
  rx1263_cut3475:
    assign rx1263_cstack, $I18
  rx1263_jump3474:
    jump $I19
  rx1263_done3471:
    rx1263_cur."!cursor_fail"()
    .return (rx1263_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_220_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1407
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_221_1360426903.566' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_411_1360426903.566' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1267_tgt
    .local int rx1267_pos
    .local int rx1267_off
    .local int rx1267_eos
    .local int rx1267_rep
    .local pmc rx1267_cur
    .local pmc rx1267_curclass
    .local pmc rx1267_bstack
    .local pmc rx1267_cstack
    (rx1267_cur, rx1267_tgt, rx1267_pos, rx1267_curclass, rx1267_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1267_cur
    length rx1267_eos, rx1267_tgt
    eq $I19, 1, rx1267_restart3485
    gt rx1267_pos, rx1267_eos, rx1267_fail3486
    repr_get_attr_int $I11, self, rx1267_curclass, "$!from"
    ne $I11, -1, rxscan1268_done3492
    goto rxscan1268_scan3491
  rxscan1268_loop3490:
    inc rx1267_pos
    gt rx1267_pos, rx1267_eos, rx1267_fail3486
    repr_bind_attr_int rx1267_cur, rx1267_curclass, "$!from", rx1267_pos
  rxscan1268_scan3491:
    nqp_rxmark rx1267_bstack, rxscan1268_loop3490, rx1267_pos, 0
  rxscan1268_done3492:
    nqp_rxmark rx1267_bstack, rxcap1269_fail3494, rx1267_pos, 0
    add $I11, rx1267_pos, 4
    gt $I11, rx1267_eos, rx1267_fail3486
    substr $S10, rx1267_tgt, rx1267_pos, 4
    ne $S10, ucs4:"last", rx1267_fail3486
    add rx1267_pos, 4
    nqp_rxpeek $I19, rx1267_bstack, rxcap1269_fail3494
    inc $I19
    set $I11, rx1267_bstack[$I19]
    repr_bind_attr_int rx1267_cur, rx1267_curclass, "$!pos", rx1267_pos
    $P11 = rx1267_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1267_pos)
    rx1267_cstack = rx1267_cur."!cursor_capture"($P11, "sym")
    goto rxcap1269_done3493
  rxcap1269_fail3494:
    goto rx1267_fail3486
  rxcap1269_done3493:
    .const 'Sub' $P5001 = 'cuid_221_1360426903.566' 
    capture_lex $P5001
    repr_bind_attr_int rx1267_cur, rx1267_curclass, "$!pos", rx1267_pos
    $P11 = rx1267_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1267_curclass, "$!pos"
    ge $I11, 0, rx1267_fail3486
    repr_bind_attr_int rx1267_cur, rx1267_curclass, "$!pos", rx1267_pos
    store_lex unicode:"$\x{a2}", rx1267_cur
    $P5002 = $P101."MATCH"()
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_411_1360426903.566' 
    capture_lex $P5003
    $P5004 = $P5003()
    rx1267_cur."!cursor_pass"(rx1267_pos, "term:sym<last>", 'backtrack'=>1)
    .return (rx1267_cur)
  rx1267_restart3485:
    repr_get_attr_obj rx1267_cstack, rx1267_cur, rx1267_curclass, "$!cstack"
  rx1267_fail3486:
    unless rx1267_bstack, rx1267_done3484
    pop $I19, rx1267_bstack
    if_null rx1267_cstack, rx1267_cstack_done3489
    unless rx1267_cstack, rx1267_cstack_done3489
    dec $I19
    set $P11, rx1267_cstack[$I19]
  rx1267_cstack_done3489:
    pop rx1267_rep, rx1267_bstack
    pop rx1267_pos, rx1267_bstack
    pop $I19, rx1267_bstack
    lt rx1267_pos, -1, rx1267_done3484
    lt rx1267_pos, 0, rx1267_fail3486
    eq $I19, 0, rx1267_fail3486
    nqp_islist $I20, rx1267_cstack
    unless $I20, rx1267_jump3487
    elements $I18, rx1267_bstack
    le $I18, 0, rx1267_cut3488
    dec $I18
    set $I18, rx1267_bstack[$I18]
  rx1267_cut3488:
    assign rx1267_cstack, $I18
  rx1267_jump3487:
    jump $I19
  rx1267_done3484:
    rx1267_cur."!cursor_fail"()
    .return (rx1267_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_221_1360426903.566") :anon :lex :outer("cuid_220_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1270_tgt
    .local int rx1270_pos
    .local int rx1270_off
    .local int rx1270_eos
    .local int rx1270_rep
    .local pmc rx1270_cur
    .local pmc rx1270_curclass
    .local pmc rx1270_bstack
    .local pmc rx1270_cstack
    (rx1270_cur, rx1270_tgt, rx1270_pos, rx1270_curclass, rx1270_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1270_cur
    length rx1270_eos, rx1270_tgt
    eq $I19, 1, rx1270_restart3497
    gt rx1270_pos, rx1270_eos, rx1270_fail3498
    repr_get_attr_int $I11, self, rx1270_curclass, "$!from"
    ne $I11, -1, rxscan1271_done3504
    goto rxscan1271_scan3503
  rxscan1271_loop3502:
    inc rx1270_pos
    gt rx1270_pos, rx1270_eos, rx1270_fail3498
    repr_bind_attr_int rx1270_cur, rx1270_curclass, "$!from", rx1270_pos
  rxscan1271_scan3503:
    nqp_rxmark rx1270_bstack, rxscan1271_loop3502, rx1270_pos, 0
  rxscan1271_done3504:
    repr_bind_attr_int rx1270_cur, rx1270_curclass, "$!pos", rx1270_pos
    $P11 = rx1270_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1270_curclass, "$!pos"
    lt $I11, 0, rx1270_fail3498
    nqp_rxmark rx1270_bstack, rxsubrule1272_pass3505, -1, 0
  rxsubrule1272_pass3505:
    rx1270_cstack = rx1270_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx1270_pos, $P11, rx1270_curclass, "$!pos"
    rx1270_cur."!cursor_pass"(rx1270_pos, 'backtrack'=>1)
    .return (rx1270_cur)
  rx1270_restart3497:
    repr_get_attr_obj rx1270_cstack, rx1270_cur, rx1270_curclass, "$!cstack"
  rx1270_fail3498:
    unless rx1270_bstack, rx1270_done3496
    pop $I19, rx1270_bstack
    if_null rx1270_cstack, rx1270_cstack_done3501
    unless rx1270_cstack, rx1270_cstack_done3501
    dec $I19
    set $P11, rx1270_cstack[$I19]
  rx1270_cstack_done3501:
    pop rx1270_rep, rx1270_bstack
    pop rx1270_pos, rx1270_bstack
    pop $I19, rx1270_bstack
    lt rx1270_pos, -1, rx1270_done3496
    lt rx1270_pos, 0, rx1270_fail3498
    eq $I19, 0, rx1270_fail3498
    nqp_islist $I20, rx1270_cstack
    unless $I20, rx1270_jump3499
    elements $I18, rx1270_bstack
    le $I18, 0, rx1270_cut3500
    dec $I18
    set $I18, rx1270_bstack[$I18]
  rx1270_cut3500:
    assign rx1270_cstack, $I18
  rx1270_jump3499:
    jump $I19
  rx1270_done3496:
    rx1270_cur."!cursor_fail"()
    .return (rx1270_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_411_1360426903.566") :anon :lex :outer("cuid_220_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1407

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_222_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1408
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_223_1360426903.566' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_412_1360426903.566' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1273_tgt
    .local int rx1273_pos
    .local int rx1273_off
    .local int rx1273_eos
    .local int rx1273_rep
    .local pmc rx1273_cur
    .local pmc rx1273_curclass
    .local pmc rx1273_bstack
    .local pmc rx1273_cstack
    (rx1273_cur, rx1273_tgt, rx1273_pos, rx1273_curclass, rx1273_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1273_cur
    length rx1273_eos, rx1273_tgt
    eq $I19, 1, rx1273_restart3508
    gt rx1273_pos, rx1273_eos, rx1273_fail3509
    repr_get_attr_int $I11, self, rx1273_curclass, "$!from"
    ne $I11, -1, rxscan1274_done3515
    goto rxscan1274_scan3514
  rxscan1274_loop3513:
    inc rx1273_pos
    gt rx1273_pos, rx1273_eos, rx1273_fail3509
    repr_bind_attr_int rx1273_cur, rx1273_curclass, "$!from", rx1273_pos
  rxscan1274_scan3514:
    nqp_rxmark rx1273_bstack, rxscan1274_loop3513, rx1273_pos, 0
  rxscan1274_done3515:
    nqp_rxmark rx1273_bstack, rxcap1275_fail3517, rx1273_pos, 0
    add $I11, rx1273_pos, 4
    gt $I11, rx1273_eos, rx1273_fail3509
    substr $S10, rx1273_tgt, rx1273_pos, 4
    ne $S10, ucs4:"next", rx1273_fail3509
    add rx1273_pos, 4
    nqp_rxpeek $I19, rx1273_bstack, rxcap1275_fail3517
    inc $I19
    set $I11, rx1273_bstack[$I19]
    repr_bind_attr_int rx1273_cur, rx1273_curclass, "$!pos", rx1273_pos
    $P11 = rx1273_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1273_pos)
    rx1273_cstack = rx1273_cur."!cursor_capture"($P11, "sym")
    goto rxcap1275_done3516
  rxcap1275_fail3517:
    goto rx1273_fail3509
  rxcap1275_done3516:
    .const 'Sub' $P5001 = 'cuid_223_1360426903.566' 
    capture_lex $P5001
    repr_bind_attr_int rx1273_cur, rx1273_curclass, "$!pos", rx1273_pos
    $P11 = rx1273_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1273_curclass, "$!pos"
    ge $I11, 0, rx1273_fail3509
    repr_bind_attr_int rx1273_cur, rx1273_curclass, "$!pos", rx1273_pos
    store_lex unicode:"$\x{a2}", rx1273_cur
    $P5002 = $P101."MATCH"()
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_412_1360426903.566' 
    capture_lex $P5003
    $P5004 = $P5003()
    rx1273_cur."!cursor_pass"(rx1273_pos, "term:sym<next>", 'backtrack'=>1)
    .return (rx1273_cur)
  rx1273_restart3508:
    repr_get_attr_obj rx1273_cstack, rx1273_cur, rx1273_curclass, "$!cstack"
  rx1273_fail3509:
    unless rx1273_bstack, rx1273_done3507
    pop $I19, rx1273_bstack
    if_null rx1273_cstack, rx1273_cstack_done3512
    unless rx1273_cstack, rx1273_cstack_done3512
    dec $I19
    set $P11, rx1273_cstack[$I19]
  rx1273_cstack_done3512:
    pop rx1273_rep, rx1273_bstack
    pop rx1273_pos, rx1273_bstack
    pop $I19, rx1273_bstack
    lt rx1273_pos, -1, rx1273_done3507
    lt rx1273_pos, 0, rx1273_fail3509
    eq $I19, 0, rx1273_fail3509
    nqp_islist $I20, rx1273_cstack
    unless $I20, rx1273_jump3510
    elements $I18, rx1273_bstack
    le $I18, 0, rx1273_cut3511
    dec $I18
    set $I18, rx1273_bstack[$I18]
  rx1273_cut3511:
    assign rx1273_cstack, $I18
  rx1273_jump3510:
    jump $I19
  rx1273_done3507:
    rx1273_cur."!cursor_fail"()
    .return (rx1273_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_223_1360426903.566") :anon :lex :outer("cuid_222_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1276_tgt
    .local int rx1276_pos
    .local int rx1276_off
    .local int rx1276_eos
    .local int rx1276_rep
    .local pmc rx1276_cur
    .local pmc rx1276_curclass
    .local pmc rx1276_bstack
    .local pmc rx1276_cstack
    (rx1276_cur, rx1276_tgt, rx1276_pos, rx1276_curclass, rx1276_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1276_cur
    length rx1276_eos, rx1276_tgt
    eq $I19, 1, rx1276_restart3520
    gt rx1276_pos, rx1276_eos, rx1276_fail3521
    repr_get_attr_int $I11, self, rx1276_curclass, "$!from"
    ne $I11, -1, rxscan1277_done3527
    goto rxscan1277_scan3526
  rxscan1277_loop3525:
    inc rx1276_pos
    gt rx1276_pos, rx1276_eos, rx1276_fail3521
    repr_bind_attr_int rx1276_cur, rx1276_curclass, "$!from", rx1276_pos
  rxscan1277_scan3526:
    nqp_rxmark rx1276_bstack, rxscan1277_loop3525, rx1276_pos, 0
  rxscan1277_done3527:
    repr_bind_attr_int rx1276_cur, rx1276_curclass, "$!pos", rx1276_pos
    $P11 = rx1276_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1276_curclass, "$!pos"
    lt $I11, 0, rx1276_fail3521
    nqp_rxmark rx1276_bstack, rxsubrule1278_pass3528, -1, 0
  rxsubrule1278_pass3528:
    rx1276_cstack = rx1276_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx1276_pos, $P11, rx1276_curclass, "$!pos"
    rx1276_cur."!cursor_pass"(rx1276_pos, 'backtrack'=>1)
    .return (rx1276_cur)
  rx1276_restart3520:
    repr_get_attr_obj rx1276_cstack, rx1276_cur, rx1276_curclass, "$!cstack"
  rx1276_fail3521:
    unless rx1276_bstack, rx1276_done3519
    pop $I19, rx1276_bstack
    if_null rx1276_cstack, rx1276_cstack_done3524
    unless rx1276_cstack, rx1276_cstack_done3524
    dec $I19
    set $P11, rx1276_cstack[$I19]
  rx1276_cstack_done3524:
    pop rx1276_rep, rx1276_bstack
    pop rx1276_pos, rx1276_bstack
    pop $I19, rx1276_bstack
    lt rx1276_pos, -1, rx1276_done3519
    lt rx1276_pos, 0, rx1276_fail3521
    eq $I19, 0, rx1276_fail3521
    nqp_islist $I20, rx1276_cstack
    unless $I20, rx1276_jump3522
    elements $I18, rx1276_bstack
    le $I18, 0, rx1276_cut3523
    dec $I18
    set $I18, rx1276_bstack[$I18]
  rx1276_cut3523:
    assign rx1276_cstack, $I18
  rx1276_jump3522:
    jump $I19
  rx1276_done3519:
    rx1276_cur."!cursor_fail"()
    .return (rx1276_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_412_1360426903.566") :anon :lex :outer("cuid_222_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1408

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_224_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1409
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_225_1360426903.566' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_413_1360426903.566' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1279_tgt
    .local int rx1279_pos
    .local int rx1279_off
    .local int rx1279_eos
    .local int rx1279_rep
    .local pmc rx1279_cur
    .local pmc rx1279_curclass
    .local pmc rx1279_bstack
    .local pmc rx1279_cstack
    (rx1279_cur, rx1279_tgt, rx1279_pos, rx1279_curclass, rx1279_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1279_cur
    length rx1279_eos, rx1279_tgt
    eq $I19, 1, rx1279_restart3531
    gt rx1279_pos, rx1279_eos, rx1279_fail3532
    repr_get_attr_int $I11, self, rx1279_curclass, "$!from"
    ne $I11, -1, rxscan1280_done3538
    goto rxscan1280_scan3537
  rxscan1280_loop3536:
    inc rx1279_pos
    gt rx1279_pos, rx1279_eos, rx1279_fail3532
    repr_bind_attr_int rx1279_cur, rx1279_curclass, "$!from", rx1279_pos
  rxscan1280_scan3537:
    nqp_rxmark rx1279_bstack, rxscan1280_loop3536, rx1279_pos, 0
  rxscan1280_done3538:
    nqp_rxmark rx1279_bstack, rxcap1281_fail3540, rx1279_pos, 0
    add $I11, rx1279_pos, 4
    gt $I11, rx1279_eos, rx1279_fail3532
    substr $S10, rx1279_tgt, rx1279_pos, 4
    ne $S10, ucs4:"redo", rx1279_fail3532
    add rx1279_pos, 4
    nqp_rxpeek $I19, rx1279_bstack, rxcap1281_fail3540
    inc $I19
    set $I11, rx1279_bstack[$I19]
    repr_bind_attr_int rx1279_cur, rx1279_curclass, "$!pos", rx1279_pos
    $P11 = rx1279_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1279_pos)
    rx1279_cstack = rx1279_cur."!cursor_capture"($P11, "sym")
    goto rxcap1281_done3539
  rxcap1281_fail3540:
    goto rx1279_fail3532
  rxcap1281_done3539:
    .const 'Sub' $P5001 = 'cuid_225_1360426903.566' 
    capture_lex $P5001
    repr_bind_attr_int rx1279_cur, rx1279_curclass, "$!pos", rx1279_pos
    $P11 = rx1279_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1279_curclass, "$!pos"
    ge $I11, 0, rx1279_fail3532
    repr_bind_attr_int rx1279_cur, rx1279_curclass, "$!pos", rx1279_pos
    store_lex unicode:"$\x{a2}", rx1279_cur
    $P5002 = $P101."MATCH"()
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_413_1360426903.566' 
    capture_lex $P5003
    $P5004 = $P5003()
    rx1279_cur."!cursor_pass"(rx1279_pos, "term:sym<redo>", 'backtrack'=>1)
    .return (rx1279_cur)
  rx1279_restart3531:
    repr_get_attr_obj rx1279_cstack, rx1279_cur, rx1279_curclass, "$!cstack"
  rx1279_fail3532:
    unless rx1279_bstack, rx1279_done3530
    pop $I19, rx1279_bstack
    if_null rx1279_cstack, rx1279_cstack_done3535
    unless rx1279_cstack, rx1279_cstack_done3535
    dec $I19
    set $P11, rx1279_cstack[$I19]
  rx1279_cstack_done3535:
    pop rx1279_rep, rx1279_bstack
    pop rx1279_pos, rx1279_bstack
    pop $I19, rx1279_bstack
    lt rx1279_pos, -1, rx1279_done3530
    lt rx1279_pos, 0, rx1279_fail3532
    eq $I19, 0, rx1279_fail3532
    nqp_islist $I20, rx1279_cstack
    unless $I20, rx1279_jump3533
    elements $I18, rx1279_bstack
    le $I18, 0, rx1279_cut3534
    dec $I18
    set $I18, rx1279_bstack[$I18]
  rx1279_cut3534:
    assign rx1279_cstack, $I18
  rx1279_jump3533:
    jump $I19
  rx1279_done3530:
    rx1279_cur."!cursor_fail"()
    .return (rx1279_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_225_1360426903.566") :anon :lex :outer("cuid_224_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1282_tgt
    .local int rx1282_pos
    .local int rx1282_off
    .local int rx1282_eos
    .local int rx1282_rep
    .local pmc rx1282_cur
    .local pmc rx1282_curclass
    .local pmc rx1282_bstack
    .local pmc rx1282_cstack
    (rx1282_cur, rx1282_tgt, rx1282_pos, rx1282_curclass, rx1282_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1282_cur
    length rx1282_eos, rx1282_tgt
    eq $I19, 1, rx1282_restart3543
    gt rx1282_pos, rx1282_eos, rx1282_fail3544
    repr_get_attr_int $I11, self, rx1282_curclass, "$!from"
    ne $I11, -1, rxscan1283_done3550
    goto rxscan1283_scan3549
  rxscan1283_loop3548:
    inc rx1282_pos
    gt rx1282_pos, rx1282_eos, rx1282_fail3544
    repr_bind_attr_int rx1282_cur, rx1282_curclass, "$!from", rx1282_pos
  rxscan1283_scan3549:
    nqp_rxmark rx1282_bstack, rxscan1283_loop3548, rx1282_pos, 0
  rxscan1283_done3550:
    repr_bind_attr_int rx1282_cur, rx1282_curclass, "$!pos", rx1282_pos
    $P11 = rx1282_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1282_curclass, "$!pos"
    lt $I11, 0, rx1282_fail3544
    nqp_rxmark rx1282_bstack, rxsubrule1284_pass3551, -1, 0
  rxsubrule1284_pass3551:
    rx1282_cstack = rx1282_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx1282_pos, $P11, rx1282_curclass, "$!pos"
    rx1282_cur."!cursor_pass"(rx1282_pos, 'backtrack'=>1)
    .return (rx1282_cur)
  rx1282_restart3543:
    repr_get_attr_obj rx1282_cstack, rx1282_cur, rx1282_curclass, "$!cstack"
  rx1282_fail3544:
    unless rx1282_bstack, rx1282_done3542
    pop $I19, rx1282_bstack
    if_null rx1282_cstack, rx1282_cstack_done3547
    unless rx1282_cstack, rx1282_cstack_done3547
    dec $I19
    set $P11, rx1282_cstack[$I19]
  rx1282_cstack_done3547:
    pop rx1282_rep, rx1282_bstack
    pop rx1282_pos, rx1282_bstack
    pop $I19, rx1282_bstack
    lt rx1282_pos, -1, rx1282_done3542
    lt rx1282_pos, 0, rx1282_fail3544
    eq $I19, 0, rx1282_fail3544
    nqp_islist $I20, rx1282_cstack
    unless $I20, rx1282_jump3545
    elements $I18, rx1282_bstack
    le $I18, 0, rx1282_cut3546
    dec $I18
    set $I18, rx1282_bstack[$I18]
  rx1282_cut3546:
    assign rx1282_cstack, $I18
  rx1282_jump3545:
    jump $I19
  rx1282_done3542:
    rx1282_cur."!cursor_fail"()
    .return (rx1282_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_413_1360426903.566") :anon :lex :outer("cuid_224_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1409

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "smartmatch" :subid("cuid_226_1360426903.566") :anon :lex :outer("cuid_395_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1411
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$t", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3552
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5003
  fallback3552:
    set $P101, $P5002
    set $P5004, _lex_param_1[1]
    unless_null $P5004, fallback3553
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5005
  fallback3553:
    set _lex_param_1[0], $P5004
    set _lex_param_1[1], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_414_1360426903.566") :anon :lex :outer("cuid_372_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1417
    .const 'Sub' $P5013 = 'cuid_227_1360426903.566' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_228_1360426903.566' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_230_1360426903.566' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_231_1360426903.566' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_233_1360426903.566' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_234_1360426903.566' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_237_1360426903.566' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_240_1360426903.566' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_242_1360426903.566' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_244_1360426903.566' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_245_1360426903.566' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_246_1360426903.566' 
    capture_lex $P5013 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_227_1360426903.566' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_228_1360426903.566' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_230_1360426903.566' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_231_1360426903.566' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_233_1360426903.566' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_234_1360426903.566' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_237_1360426903.566' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_240_1360426903.566' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_242_1360426903.566' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_244_1360426903.566' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_245_1360426903.566' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_246_1360426903.566' 
    capture_lex $P5012
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "rxstopper" :subid("cuid_227_1360426903.566") :anon :lex :outer("cuid_414_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1418
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1285_tgt
    .local int rx1285_pos
    .local int rx1285_off
    .local int rx1285_eos
    .local int rx1285_rep
    .local pmc rx1285_cur
    .local pmc rx1285_curclass
    .local pmc rx1285_bstack
    .local pmc rx1285_cstack
    (rx1285_cur, rx1285_tgt, rx1285_pos, rx1285_curclass, rx1285_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1285_cur
    length rx1285_eos, rx1285_tgt
    eq $I19, 1, rx1285_restart3556
    gt rx1285_pos, rx1285_eos, rx1285_fail3557
    repr_get_attr_int $I11, self, rx1285_curclass, "$!from"
    ne $I11, -1, rxscan1286_done3563
    goto rxscan1286_scan3562
  rxscan1286_loop3561:
    inc rx1285_pos
    gt rx1285_pos, rx1285_eos, rx1285_fail3557
    repr_bind_attr_int rx1285_cur, rx1285_curclass, "$!from", rx1285_pos
  rxscan1286_scan3562:
    nqp_rxmark rx1285_bstack, rxscan1286_loop3561, rx1285_pos, 0
  rxscan1286_done3563:
    ge rx1285_pos, rx1285_eos, rx1285_fail3557
    substr $S11, rx1285_tgt, rx1285_pos, 1
    index $I11, ucs4:"}/", $S11
    lt $I11, 0, rx1285_fail3557
    inc rx1285_pos
    rx1285_cur."!cursor_pass"(rx1285_pos, "rxstopper", 'backtrack'=>1)
    .return (rx1285_cur)
  rx1285_restart3556:
    repr_get_attr_obj rx1285_cstack, rx1285_cur, rx1285_curclass, "$!cstack"
  rx1285_fail3557:
    unless rx1285_bstack, rx1285_done3555
    pop $I19, rx1285_bstack
    if_null rx1285_cstack, rx1285_cstack_done3560
    unless rx1285_cstack, rx1285_cstack_done3560
    dec $I19
    set $P11, rx1285_cstack[$I19]
  rx1285_cstack_done3560:
    pop rx1285_rep, rx1285_bstack
    pop rx1285_pos, rx1285_bstack
    pop $I19, rx1285_bstack
    lt rx1285_pos, -1, rx1285_done3555
    lt rx1285_pos, 0, rx1285_fail3557
    eq $I19, 0, rx1285_fail3557
    nqp_islist $I20, rx1285_cstack
    unless $I20, rx1285_jump3558
    elements $I18, rx1285_bstack
    le $I18, 0, rx1285_cut3559
    dec $I18
    set $I18, rx1285_bstack[$I18]
  rx1285_cut3559:
    assign rx1285_cstack, $I18
  rx1285_jump3558:
    jump $I19
  rx1285_done3555:
    rx1285_cur."!cursor_fail"()
    .return (rx1285_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_228_1360426903.566") :anon :lex :outer("cuid_414_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1422
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_229_1360426903.566' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1287_tgt
    .local int rx1287_pos
    .local int rx1287_off
    .local int rx1287_eos
    .local int rx1287_rep
    .local pmc rx1287_cur
    .local pmc rx1287_curclass
    .local pmc rx1287_bstack
    .local pmc rx1287_cstack
    (rx1287_cur, rx1287_tgt, rx1287_pos, rx1287_curclass, rx1287_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1287_cur
    length rx1287_eos, rx1287_tgt
    eq $I19, 1, rx1287_restart3566
    gt rx1287_pos, rx1287_eos, rx1287_fail3567
    repr_get_attr_int $I11, self, rx1287_curclass, "$!from"
    ne $I11, -1, rxscan1288_done3573
    goto rxscan1288_scan3572
  rxscan1288_loop3571:
    inc rx1287_pos
    gt rx1287_pos, rx1287_eos, rx1287_fail3567
    repr_bind_attr_int rx1287_cur, rx1287_curclass, "$!from", rx1287_pos
  rxscan1288_scan3572:
    nqp_rxmark rx1287_bstack, rxscan1288_loop3571, rx1287_pos, 0
  rxscan1288_done3573:
    add $I11, rx1287_pos, 1
    gt $I11, rx1287_eos, rx1287_fail3567
    substr $S10, rx1287_tgt, rx1287_pos, 1
    ne $S10, ucs4:":", rx1287_fail3567
    add rx1287_pos, 1
    .const 'Sub' $P5001 = 'cuid_229_1360426903.566' 
    capture_lex $P5001
    repr_bind_attr_int rx1287_cur, rx1287_curclass, "$!pos", rx1287_pos
    $P11 = rx1287_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1287_curclass, "$!pos"
    lt $I11, 0, rx1287_fail3567
    repr_bind_attr_int rx1287_cur, rx1287_curclass, "$!pos", rx1287_pos
    $P11 = rx1287_cur."LANG"("MAIN", "statement")
    repr_get_attr_int $I11, $P11, rx1287_curclass, "$!pos"
    lt $I11, 0, rx1287_fail3567
    nqp_rxmark rx1287_bstack, rxsubrule1291_pass3584, -1, 0
  rxsubrule1291_pass3584:
    rx1287_cstack = rx1287_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx1287_pos, $P11, rx1287_curclass, "$!pos"
    repr_bind_attr_int rx1287_cur, rx1287_curclass, "$!pos", rx1287_pos
    $P11 = rx1287_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1287_curclass, "$!pos"
    lt $I11, 0, rx1287_fail3567
    repr_get_attr_int rx1287_pos, $P11, rx1287_curclass, "$!pos"
    add $I11, rx1287_pos, 1
    gt $I11, rx1287_eos, rx1287_fail3567
    substr $S10, rx1287_tgt, rx1287_pos, 1
    ne $S10, ucs4:";", rx1287_fail3567
    add rx1287_pos, 1
    rx1287_cur."!cursor_pass"(rx1287_pos, "metachar:sym<:my>", 'backtrack'=>1)
    .return (rx1287_cur)
  rx1287_restart3566:
    repr_get_attr_obj rx1287_cstack, rx1287_cur, rx1287_curclass, "$!cstack"
  rx1287_fail3567:
    unless rx1287_bstack, rx1287_done3565
    pop $I19, rx1287_bstack
    if_null rx1287_cstack, rx1287_cstack_done3570
    unless rx1287_cstack, rx1287_cstack_done3570
    dec $I19
    set $P11, rx1287_cstack[$I19]
  rx1287_cstack_done3570:
    pop rx1287_rep, rx1287_bstack
    pop rx1287_pos, rx1287_bstack
    pop $I19, rx1287_bstack
    lt rx1287_pos, -1, rx1287_done3565
    lt rx1287_pos, 0, rx1287_fail3567
    eq $I19, 0, rx1287_fail3567
    nqp_islist $I20, rx1287_cstack
    unless $I20, rx1287_jump3568
    elements $I18, rx1287_bstack
    le $I18, 0, rx1287_cut3569
    dec $I18
    set $I18, rx1287_bstack[$I18]
  rx1287_cut3569:
    assign rx1287_cstack, $I18
  rx1287_jump3568:
    jump $I19
  rx1287_done3565:
    rx1287_cur."!cursor_fail"()
    .return (rx1287_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_229_1360426903.566") :anon :lex :outer("cuid_228_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1289_tgt
    .local int rx1289_pos
    .local int rx1289_off
    .local int rx1289_eos
    .local int rx1289_rep
    .local pmc rx1289_cur
    .local pmc rx1289_curclass
    .local pmc rx1289_bstack
    .local pmc rx1289_cstack
    (rx1289_cur, rx1289_tgt, rx1289_pos, rx1289_curclass, rx1289_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1289_cur
    length rx1289_eos, rx1289_tgt
    eq $I19, 1, rx1289_restart3576
    gt rx1289_pos, rx1289_eos, rx1289_fail3577
    repr_get_attr_int $I11, self, rx1289_curclass, "$!from"
    ne $I11, -1, rxscan1290_done3583
    goto rxscan1290_scan3582
  rxscan1290_loop3581:
    inc rx1289_pos
    gt rx1289_pos, rx1289_eos, rx1289_fail3577
    repr_bind_attr_int rx1289_cur, rx1289_curclass, "$!from", rx1289_pos
  rxscan1290_scan3582:
    nqp_rxmark rx1289_bstack, rxscan1290_loop3581, rx1289_pos, 0
  rxscan1290_done3583:
    add $I11, rx1289_pos, 2
    gt $I11, rx1289_eos, rx1289_fail3577
    substr $S10, rx1289_tgt, rx1289_pos, 2
    ne $S10, ucs4:"my", rx1289_fail3577
    add rx1289_pos, 2
    rx1289_cur."!cursor_pass"(rx1289_pos, 'backtrack'=>1)
    .return (rx1289_cur)
  rx1289_restart3576:
    repr_get_attr_obj rx1289_cstack, rx1289_cur, rx1289_curclass, "$!cstack"
  rx1289_fail3577:
    unless rx1289_bstack, rx1289_done3575
    pop $I19, rx1289_bstack
    if_null rx1289_cstack, rx1289_cstack_done3580
    unless rx1289_cstack, rx1289_cstack_done3580
    dec $I19
    set $P11, rx1289_cstack[$I19]
  rx1289_cstack_done3580:
    pop rx1289_rep, rx1289_bstack
    pop rx1289_pos, rx1289_bstack
    pop $I19, rx1289_bstack
    lt rx1289_pos, -1, rx1289_done3575
    lt rx1289_pos, 0, rx1289_fail3577
    eq $I19, 0, rx1289_fail3577
    nqp_islist $I20, rx1289_cstack
    unless $I20, rx1289_jump3578
    elements $I18, rx1289_bstack
    le $I18, 0, rx1289_cut3579
    dec $I18
    set $I18, rx1289_bstack[$I18]
  rx1289_cut3579:
    assign rx1289_cstack, $I18
  rx1289_jump3578:
    jump $I19
  rx1289_done3575:
    rx1289_cur."!cursor_fail"()
    .return (rx1289_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_230_1360426903.566") :anon :lex :outer("cuid_414_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1426
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1293_tgt
    .local int rx1293_pos
    .local int rx1293_off
    .local int rx1293_eos
    .local int rx1293_rep
    .local pmc rx1293_cur
    .local pmc rx1293_curclass
    .local pmc rx1293_bstack
    .local pmc rx1293_cstack
    (rx1293_cur, rx1293_tgt, rx1293_pos, rx1293_curclass, rx1293_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1293_cur
    length rx1293_eos, rx1293_tgt
    eq $I19, 1, rx1293_restart3588
    gt rx1293_pos, rx1293_eos, rx1293_fail3589
    repr_get_attr_int $I11, self, rx1293_curclass, "$!from"
    ne $I11, -1, rxscan1294_done3595
    goto rxscan1294_scan3594
  rxscan1294_loop3593:
    inc rx1293_pos
    gt rx1293_pos, rx1293_eos, rx1293_fail3589
    repr_bind_attr_int rx1293_cur, rx1293_curclass, "$!from", rx1293_pos
  rxscan1294_scan3594:
    nqp_rxmark rx1293_bstack, rxscan1294_loop3593, rx1293_pos, 0
  rxscan1294_done3595:
    ge rx1293_pos, rx1293_eos, rx1293_fail3589
    substr $S11, rx1293_tgt, rx1293_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1293_fail3589
    repr_bind_attr_int rx1293_cur, rx1293_curclass, "$!pos", rx1293_pos
    $P11 = rx1293_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1293_curclass, "$!pos"
    lt $I11, 0, rx1293_fail3589
    nqp_rxmark rx1293_bstack, rxsubrule1295_pass3596, -1, 0
  rxsubrule1295_pass3596:
    rx1293_cstack = rx1293_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1293_pos, $P11, rx1293_curclass, "$!pos"
    rx1293_cur."!cursor_pass"(rx1293_pos, "metachar:sym<{ }>", 'backtrack'=>1)
    .return (rx1293_cur)
  rx1293_restart3588:
    repr_get_attr_obj rx1293_cstack, rx1293_cur, rx1293_curclass, "$!cstack"
  rx1293_fail3589:
    unless rx1293_bstack, rx1293_done3587
    pop $I19, rx1293_bstack
    if_null rx1293_cstack, rx1293_cstack_done3592
    unless rx1293_cstack, rx1293_cstack_done3592
    dec $I19
    set $P11, rx1293_cstack[$I19]
  rx1293_cstack_done3592:
    pop rx1293_rep, rx1293_bstack
    pop rx1293_pos, rx1293_bstack
    pop $I19, rx1293_bstack
    lt rx1293_pos, -1, rx1293_done3587
    lt rx1293_pos, 0, rx1293_fail3589
    eq $I19, 0, rx1293_fail3589
    nqp_islist $I20, rx1293_cstack
    unless $I20, rx1293_jump3590
    elements $I18, rx1293_bstack
    le $I18, 0, rx1293_cut3591
    dec $I18
    set $I18, rx1293_bstack[$I18]
  rx1293_cut3591:
    assign rx1293_cstack, $I18
  rx1293_jump3590:
    jump $I19
  rx1293_done3587:
    rx1293_cur."!cursor_fail"()
    .return (rx1293_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_231_1360426903.566") :anon :lex :outer("cuid_414_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1430
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_232_1360426903.566' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1296_tgt
    .local int rx1296_pos
    .local int rx1296_off
    .local int rx1296_eos
    .local int rx1296_rep
    .local pmc rx1296_cur
    .local pmc rx1296_curclass
    .local pmc rx1296_bstack
    .local pmc rx1296_cstack
    (rx1296_cur, rx1296_tgt, rx1296_pos, rx1296_curclass, rx1296_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1296_cur
    length rx1296_eos, rx1296_tgt
    eq $I19, 1, rx1296_restart3599
    gt rx1296_pos, rx1296_eos, rx1296_fail3600
    repr_get_attr_int $I11, self, rx1296_curclass, "$!from"
    ne $I11, -1, rxscan1297_done3606
    goto rxscan1297_scan3605
  rxscan1297_loop3604:
    inc rx1296_pos
    gt rx1296_pos, rx1296_eos, rx1296_fail3600
    repr_bind_attr_int rx1296_cur, rx1296_curclass, "$!from", rx1296_pos
  rxscan1297_scan3605:
    nqp_rxmark rx1296_bstack, rxscan1297_loop3604, rx1296_pos, 0
  rxscan1297_done3606:
    .const 'Sub' $P5001 = 'cuid_232_1360426903.566' 
    capture_lex $P5001
    repr_bind_attr_int rx1296_cur, rx1296_curclass, "$!pos", rx1296_pos
    $P11 = rx1296_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1296_curclass, "$!pos"
    lt $I11, 0, rx1296_fail3600
    repr_bind_attr_int rx1296_cur, rx1296_curclass, "$!pos", rx1296_pos
    $P11 = rx1296_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1296_curclass, "$!pos"
    lt $I11, 0, rx1296_fail3600
    nqp_rxmark rx1296_bstack, rxsubrule1302_pass3621, -1, 0
  rxsubrule1302_pass3621:
    rx1296_cstack = rx1296_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1296_pos, $P11, rx1296_curclass, "$!pos"
    rx1296_cur."!cursor_pass"(rx1296_pos, "metachar:sym<nqpvar>", 'backtrack'=>1)
    .return (rx1296_cur)
  rx1296_restart3599:
    repr_get_attr_obj rx1296_cstack, rx1296_cur, rx1296_curclass, "$!cstack"
  rx1296_fail3600:
    unless rx1296_bstack, rx1296_done3598
    pop $I19, rx1296_bstack
    if_null rx1296_cstack, rx1296_cstack_done3603
    unless rx1296_cstack, rx1296_cstack_done3603
    dec $I19
    set $P11, rx1296_cstack[$I19]
  rx1296_cstack_done3603:
    pop rx1296_rep, rx1296_bstack
    pop rx1296_pos, rx1296_bstack
    pop $I19, rx1296_bstack
    lt rx1296_pos, -1, rx1296_done3598
    lt rx1296_pos, 0, rx1296_fail3600
    eq $I19, 0, rx1296_fail3600
    nqp_islist $I20, rx1296_cstack
    unless $I20, rx1296_jump3601
    elements $I18, rx1296_bstack
    le $I18, 0, rx1296_cut3602
    dec $I18
    set $I18, rx1296_bstack[$I18]
  rx1296_cut3602:
    assign rx1296_cstack, $I18
  rx1296_jump3601:
    jump $I19
  rx1296_done3598:
    rx1296_cur."!cursor_fail"()
    .return (rx1296_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_232_1360426903.566") :anon :lex :outer("cuid_231_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1298_tgt
    .local int rx1298_pos
    .local int rx1298_off
    .local int rx1298_eos
    .local int rx1298_rep
    .local pmc rx1298_cur
    .local pmc rx1298_curclass
    .local pmc rx1298_bstack
    .local pmc rx1298_cstack
    (rx1298_cur, rx1298_tgt, rx1298_pos, rx1298_curclass, rx1298_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1298_cur
    length rx1298_eos, rx1298_tgt
    eq $I19, 1, rx1298_restart3609
    gt rx1298_pos, rx1298_eos, rx1298_fail3610
    repr_get_attr_int $I11, self, rx1298_curclass, "$!from"
    ne $I11, -1, rxscan1299_done3616
    goto rxscan1299_scan3615
  rxscan1299_loop3614:
    inc rx1298_pos
    gt rx1298_pos, rx1298_eos, rx1298_fail3610
    repr_bind_attr_int rx1298_cur, rx1298_curclass, "$!from", rx1298_pos
  rxscan1299_scan3615:
    nqp_rxmark rx1298_bstack, rxscan1299_loop3614, rx1298_pos, 0
  rxscan1299_done3616:
    repr_bind_attr_int rx1298_cur, rx1298_curclass, "$!pos", rx1298_pos
    $P11 = rx1298_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx1298_curclass, "$!pos"
    lt $I11, 0, rx1298_fail3610
    nqp_rxmark rx1298_bstack, rxsubrule1300_pass3617, -1, 0
  rxsubrule1300_pass3617:
    rx1298_cstack = rx1298_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx1298_pos, $P11, rx1298_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1301_03619
    nqp_push_label $P11, alt1301_13620
    nqp_rxmark rx1298_bstack, alt1301_end3618, -1, 0
    rx1298_cur."!alt"(rx1298_pos, "alt_nfa__39_1360426906.827", $P11)
    goto rx1298_fail3610
  alt1301_03619:
    ge rx1298_pos, rx1298_eos, rx1298_fail3610
    is_cclass $I11, .CCLASS_WORD, rx1298_tgt, rx1298_pos
    if $I11, rx1298_fail3610
    add rx1298_pos, 1
    ge rx1298_pos, rx1298_eos, rx1298_fail3610
    is_cclass $I11, .CCLASS_WORD, rx1298_tgt, rx1298_pos
    unless $I11, rx1298_fail3610
    add rx1298_pos, 1
    goto alt1301_end3618
  alt1301_13620:
    ge rx1298_pos, rx1298_eos, rx1298_fail3610
    is_cclass $I11, .CCLASS_WORD, rx1298_tgt, rx1298_pos
    unless $I11, rx1298_fail3610
    add rx1298_pos, 1
    goto alt1301_end3618
  alt1301_end3618:
    nqp_rxcommit rx1298_bstack, alt1301_end3618
    rx1298_cur."!cursor_pass"(rx1298_pos, 'backtrack'=>1)
    .return (rx1298_cur)
  rx1298_restart3609:
    repr_get_attr_obj rx1298_cstack, rx1298_cur, rx1298_curclass, "$!cstack"
  rx1298_fail3610:
    unless rx1298_bstack, rx1298_done3608
    pop $I19, rx1298_bstack
    if_null rx1298_cstack, rx1298_cstack_done3613
    unless rx1298_cstack, rx1298_cstack_done3613
    dec $I19
    set $P11, rx1298_cstack[$I19]
  rx1298_cstack_done3613:
    pop rx1298_rep, rx1298_bstack
    pop rx1298_pos, rx1298_bstack
    pop $I19, rx1298_bstack
    lt rx1298_pos, -1, rx1298_done3608
    lt rx1298_pos, 0, rx1298_fail3610
    eq $I19, 0, rx1298_fail3610
    nqp_islist $I20, rx1298_cstack
    unless $I20, rx1298_jump3611
    elements $I18, rx1298_bstack
    le $I18, 0, rx1298_cut3612
    dec $I18
    set $I18, rx1298_bstack[$I18]
  rx1298_cut3612:
    assign rx1298_cstack, $I18
  rx1298_jump3611:
    jump $I19
  rx1298_done3608:
    rx1298_cur."!cursor_fail"()
    .return (rx1298_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_233_1360426903.566") :anon :lex :outer("cuid_414_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1434
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1303_tgt
    .local int rx1303_pos
    .local int rx1303_off
    .local int rx1303_eos
    .local int rx1303_rep
    .local pmc rx1303_cur
    .local pmc rx1303_curclass
    .local pmc rx1303_bstack
    .local pmc rx1303_cstack
    (rx1303_cur, rx1303_tgt, rx1303_pos, rx1303_curclass, rx1303_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1303_cur
    length rx1303_eos, rx1303_tgt
    eq $I19, 1, rx1303_restart3624
    gt rx1303_pos, rx1303_eos, rx1303_fail3625
    repr_get_attr_int $I11, self, rx1303_curclass, "$!from"
    ne $I11, -1, rxscan1304_done3631
    goto rxscan1304_scan3630
  rxscan1304_loop3629:
    inc rx1303_pos
    gt rx1303_pos, rx1303_eos, rx1303_fail3625
    repr_bind_attr_int rx1303_cur, rx1303_curclass, "$!from", rx1303_pos
  rxscan1304_scan3630:
    nqp_rxmark rx1303_bstack, rxscan1304_loop3629, rx1303_pos, 0
  rxscan1304_done3631:
    ge rx1303_pos, rx1303_eos, rx1303_fail3625
    substr $S11, rx1303_tgt, rx1303_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1303_fail3625
    repr_bind_attr_int rx1303_cur, rx1303_curclass, "$!pos", rx1303_pos
    $P11 = rx1303_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1303_curclass, "$!pos"
    lt $I11, 0, rx1303_fail3625
    nqp_rxmark rx1303_bstack, rxsubrule1305_pass3632, -1, 0
  rxsubrule1305_pass3632:
    rx1303_cstack = rx1303_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1303_pos, $P11, rx1303_curclass, "$!pos"
    rx1303_cur."!cursor_pass"(rx1303_pos, "assertion:sym<{ }>", 'backtrack'=>1)
    .return (rx1303_cur)
  rx1303_restart3624:
    repr_get_attr_obj rx1303_cstack, rx1303_cur, rx1303_curclass, "$!cstack"
  rx1303_fail3625:
    unless rx1303_bstack, rx1303_done3623
    pop $I19, rx1303_bstack
    if_null rx1303_cstack, rx1303_cstack_done3628
    unless rx1303_cstack, rx1303_cstack_done3628
    dec $I19
    set $P11, rx1303_cstack[$I19]
  rx1303_cstack_done3628:
    pop rx1303_rep, rx1303_bstack
    pop rx1303_pos, rx1303_bstack
    pop $I19, rx1303_bstack
    lt rx1303_pos, -1, rx1303_done3623
    lt rx1303_pos, 0, rx1303_fail3625
    eq $I19, 0, rx1303_fail3625
    nqp_islist $I20, rx1303_cstack
    unless $I20, rx1303_jump3626
    elements $I18, rx1303_bstack
    le $I18, 0, rx1303_cut3627
    dec $I18
    set $I18, rx1303_bstack[$I18]
  rx1303_cut3627:
    assign rx1303_cstack, $I18
  rx1303_jump3626:
    jump $I19
  rx1303_done3623:
    rx1303_cur."!cursor_fail"()
    .return (rx1303_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_234_1360426903.566") :anon :lex :outer("cuid_414_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1438
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_235_1360426903.566' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_236_1360426903.566' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1306_tgt
    .local int rx1306_pos
    .local int rx1306_off
    .local int rx1306_eos
    .local int rx1306_rep
    .local pmc rx1306_cur
    .local pmc rx1306_curclass
    .local pmc rx1306_bstack
    .local pmc rx1306_cstack
    (rx1306_cur, rx1306_tgt, rx1306_pos, rx1306_curclass, rx1306_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1306_cur
    length rx1306_eos, rx1306_tgt
    eq $I19, 1, rx1306_restart3635
    gt rx1306_pos, rx1306_eos, rx1306_fail3636
    repr_get_attr_int $I11, self, rx1306_curclass, "$!from"
    ne $I11, -1, rxscan1307_done3642
    goto rxscan1307_scan3641
  rxscan1307_loop3640:
    inc rx1306_pos
    gt rx1306_pos, rx1306_eos, rx1306_fail3636
    repr_bind_attr_int rx1306_cur, rx1306_curclass, "$!from", rx1306_pos
  rxscan1307_scan3641:
    nqp_rxmark rx1306_bstack, rxscan1307_loop3640, rx1306_pos, 0
  rxscan1307_done3642:
    add $I11, rx1306_pos, 1
    gt $I11, rx1306_eos, rx1306_fail3636
    substr $S10, rx1306_tgt, rx1306_pos, 1
    ne $S10, ucs4:"?", rx1306_fail3636
    add rx1306_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1308_03644
    nqp_push_label $P11, alt1308_13655
    nqp_rxmark rx1306_bstack, alt1308_end3643, -1, 0
    rx1306_cur."!alt"(rx1306_pos, "alt_nfa__40_1360426906.849", $P11)
    goto rx1306_fail3636
  alt1308_03644:
    .const 'Sub' $P5001 = 'cuid_235_1360426903.566' 
    capture_lex $P5001
    repr_bind_attr_int rx1306_cur, rx1306_curclass, "$!pos", rx1306_pos
    $P11 = rx1306_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1306_curclass, "$!pos"
    lt $I11, 0, rx1306_fail3636
    goto alt1308_end3643
  alt1308_13655:
    .const 'Sub' $P5002 = 'cuid_236_1360426903.566' 
    capture_lex $P5002
    repr_bind_attr_int rx1306_cur, rx1306_curclass, "$!pos", rx1306_pos
    $P11 = rx1306_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1306_curclass, "$!pos"
    ge $I11, 0, rx1306_fail3636
    repr_bind_attr_int rx1306_cur, rx1306_curclass, "$!pos", rx1306_pos
    $P11 = rx1306_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1306_curclass, "$!pos"
    lt $I11, 0, rx1306_fail3636
    nqp_rxmark rx1306_bstack, rxsubrule1313_pass3666, -1, 0
  rxsubrule1313_pass3666:
    rx1306_cstack = rx1306_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1306_pos, $P11, rx1306_curclass, "$!pos"
    goto alt1308_end3643
  alt1308_end3643:
    nqp_rxcommit rx1306_bstack, alt1308_end3643
    rx1306_cur."!cursor_pass"(rx1306_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx1306_cur)
  rx1306_restart3635:
    repr_get_attr_obj rx1306_cstack, rx1306_cur, rx1306_curclass, "$!cstack"
  rx1306_fail3636:
    unless rx1306_bstack, rx1306_done3634
    pop $I19, rx1306_bstack
    if_null rx1306_cstack, rx1306_cstack_done3639
    unless rx1306_cstack, rx1306_cstack_done3639
    dec $I19
    set $P11, rx1306_cstack[$I19]
  rx1306_cstack_done3639:
    pop rx1306_rep, rx1306_bstack
    pop rx1306_pos, rx1306_bstack
    pop $I19, rx1306_bstack
    lt rx1306_pos, -1, rx1306_done3634
    lt rx1306_pos, 0, rx1306_fail3636
    eq $I19, 0, rx1306_fail3636
    nqp_islist $I20, rx1306_cstack
    unless $I20, rx1306_jump3637
    elements $I18, rx1306_bstack
    le $I18, 0, rx1306_cut3638
    dec $I18
    set $I18, rx1306_bstack[$I18]
  rx1306_cut3638:
    assign rx1306_cstack, $I18
  rx1306_jump3637:
    jump $I19
  rx1306_done3634:
    rx1306_cur."!cursor_fail"()
    .return (rx1306_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_235_1360426903.566") :anon :lex :outer("cuid_234_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1309_tgt
    .local int rx1309_pos
    .local int rx1309_off
    .local int rx1309_eos
    .local int rx1309_rep
    .local pmc rx1309_cur
    .local pmc rx1309_curclass
    .local pmc rx1309_bstack
    .local pmc rx1309_cstack
    (rx1309_cur, rx1309_tgt, rx1309_pos, rx1309_curclass, rx1309_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1309_cur
    length rx1309_eos, rx1309_tgt
    eq $I19, 1, rx1309_restart3647
    gt rx1309_pos, rx1309_eos, rx1309_fail3648
    repr_get_attr_int $I11, self, rx1309_curclass, "$!from"
    ne $I11, -1, rxscan1310_done3654
    goto rxscan1310_scan3653
  rxscan1310_loop3652:
    inc rx1309_pos
    gt rx1309_pos, rx1309_eos, rx1309_fail3648
    repr_bind_attr_int rx1309_cur, rx1309_curclass, "$!from", rx1309_pos
  rxscan1310_scan3653:
    nqp_rxmark rx1309_bstack, rxscan1310_loop3652, rx1309_pos, 0
  rxscan1310_done3654:
    add $I11, rx1309_pos, 1
    gt $I11, rx1309_eos, rx1309_fail3648
    substr $S10, rx1309_tgt, rx1309_pos, 1
    ne $S10, ucs4:">", rx1309_fail3648
    add rx1309_pos, 1
    rx1309_cur."!cursor_pass"(rx1309_pos, 'backtrack'=>1)
    .return (rx1309_cur)
  rx1309_restart3647:
    repr_get_attr_obj rx1309_cstack, rx1309_cur, rx1309_curclass, "$!cstack"
  rx1309_fail3648:
    unless rx1309_bstack, rx1309_done3646
    pop $I19, rx1309_bstack
    if_null rx1309_cstack, rx1309_cstack_done3651
    unless rx1309_cstack, rx1309_cstack_done3651
    dec $I19
    set $P11, rx1309_cstack[$I19]
  rx1309_cstack_done3651:
    pop rx1309_rep, rx1309_bstack
    pop rx1309_pos, rx1309_bstack
    pop $I19, rx1309_bstack
    lt rx1309_pos, -1, rx1309_done3646
    lt rx1309_pos, 0, rx1309_fail3648
    eq $I19, 0, rx1309_fail3648
    nqp_islist $I20, rx1309_cstack
    unless $I20, rx1309_jump3649
    elements $I18, rx1309_bstack
    le $I18, 0, rx1309_cut3650
    dec $I18
    set $I18, rx1309_bstack[$I18]
  rx1309_cut3650:
    assign rx1309_cstack, $I18
  rx1309_jump3649:
    jump $I19
  rx1309_done3646:
    rx1309_cur."!cursor_fail"()
    .return (rx1309_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_236_1360426903.566") :anon :lex :outer("cuid_234_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1311_tgt
    .local int rx1311_pos
    .local int rx1311_off
    .local int rx1311_eos
    .local int rx1311_rep
    .local pmc rx1311_cur
    .local pmc rx1311_curclass
    .local pmc rx1311_bstack
    .local pmc rx1311_cstack
    (rx1311_cur, rx1311_tgt, rx1311_pos, rx1311_curclass, rx1311_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1311_cur
    length rx1311_eos, rx1311_tgt
    eq $I19, 1, rx1311_restart3658
    gt rx1311_pos, rx1311_eos, rx1311_fail3659
    repr_get_attr_int $I11, self, rx1311_curclass, "$!from"
    ne $I11, -1, rxscan1312_done3665
    goto rxscan1312_scan3664
  rxscan1312_loop3663:
    inc rx1311_pos
    gt rx1311_pos, rx1311_eos, rx1311_fail3659
    repr_bind_attr_int rx1311_cur, rx1311_curclass, "$!from", rx1311_pos
  rxscan1312_scan3664:
    nqp_rxmark rx1311_bstack, rxscan1312_loop3663, rx1311_pos, 0
  rxscan1312_done3665:
    add $I11, rx1311_pos, 1
    gt $I11, rx1311_eos, rx1311_fail3659
    substr $S10, rx1311_tgt, rx1311_pos, 1
    ne $S10, ucs4:"{", rx1311_fail3659
    add rx1311_pos, 1
    rx1311_cur."!cursor_pass"(rx1311_pos, 'backtrack'=>1)
    .return (rx1311_cur)
  rx1311_restart3658:
    repr_get_attr_obj rx1311_cstack, rx1311_cur, rx1311_curclass, "$!cstack"
  rx1311_fail3659:
    unless rx1311_bstack, rx1311_done3657
    pop $I19, rx1311_bstack
    if_null rx1311_cstack, rx1311_cstack_done3662
    unless rx1311_cstack, rx1311_cstack_done3662
    dec $I19
    set $P11, rx1311_cstack[$I19]
  rx1311_cstack_done3662:
    pop rx1311_rep, rx1311_bstack
    pop rx1311_pos, rx1311_bstack
    pop $I19, rx1311_bstack
    lt rx1311_pos, -1, rx1311_done3657
    lt rx1311_pos, 0, rx1311_fail3659
    eq $I19, 0, rx1311_fail3659
    nqp_islist $I20, rx1311_cstack
    unless $I20, rx1311_jump3660
    elements $I18, rx1311_bstack
    le $I18, 0, rx1311_cut3661
    dec $I18
    set $I18, rx1311_bstack[$I18]
  rx1311_cut3661:
    assign rx1311_cstack, $I18
  rx1311_jump3660:
    jump $I19
  rx1311_done3657:
    rx1311_cur."!cursor_fail"()
    .return (rx1311_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_237_1360426903.566") :anon :lex :outer("cuid_414_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1439
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_238_1360426903.566' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_239_1360426903.566' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1314_tgt
    .local int rx1314_pos
    .local int rx1314_off
    .local int rx1314_eos
    .local int rx1314_rep
    .local pmc rx1314_cur
    .local pmc rx1314_curclass
    .local pmc rx1314_bstack
    .local pmc rx1314_cstack
    (rx1314_cur, rx1314_tgt, rx1314_pos, rx1314_curclass, rx1314_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1314_cur
    length rx1314_eos, rx1314_tgt
    eq $I19, 1, rx1314_restart3669
    gt rx1314_pos, rx1314_eos, rx1314_fail3670
    repr_get_attr_int $I11, self, rx1314_curclass, "$!from"
    ne $I11, -1, rxscan1315_done3676
    goto rxscan1315_scan3675
  rxscan1315_loop3674:
    inc rx1314_pos
    gt rx1314_pos, rx1314_eos, rx1314_fail3670
    repr_bind_attr_int rx1314_cur, rx1314_curclass, "$!from", rx1314_pos
  rxscan1315_scan3675:
    nqp_rxmark rx1314_bstack, rxscan1315_loop3674, rx1314_pos, 0
  rxscan1315_done3676:
    add $I11, rx1314_pos, 1
    gt $I11, rx1314_eos, rx1314_fail3670
    substr $S10, rx1314_tgt, rx1314_pos, 1
    ne $S10, ucs4:"!", rx1314_fail3670
    add rx1314_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1316_03678
    nqp_push_label $P11, alt1316_13689
    nqp_rxmark rx1314_bstack, alt1316_end3677, -1, 0
    rx1314_cur."!alt"(rx1314_pos, "alt_nfa__41_1360426906.862", $P11)
    goto rx1314_fail3670
  alt1316_03678:
    .const 'Sub' $P5001 = 'cuid_238_1360426903.566' 
    capture_lex $P5001
    repr_bind_attr_int rx1314_cur, rx1314_curclass, "$!pos", rx1314_pos
    $P11 = rx1314_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1314_curclass, "$!pos"
    lt $I11, 0, rx1314_fail3670
    goto alt1316_end3677
  alt1316_13689:
    .const 'Sub' $P5002 = 'cuid_239_1360426903.566' 
    capture_lex $P5002
    repr_bind_attr_int rx1314_cur, rx1314_curclass, "$!pos", rx1314_pos
    $P11 = rx1314_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1314_curclass, "$!pos"
    ge $I11, 0, rx1314_fail3670
    repr_bind_attr_int rx1314_cur, rx1314_curclass, "$!pos", rx1314_pos
    $P11 = rx1314_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1314_curclass, "$!pos"
    lt $I11, 0, rx1314_fail3670
    nqp_rxmark rx1314_bstack, rxsubrule1321_pass3700, -1, 0
  rxsubrule1321_pass3700:
    rx1314_cstack = rx1314_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1314_pos, $P11, rx1314_curclass, "$!pos"
    goto alt1316_end3677
  alt1316_end3677:
    nqp_rxcommit rx1314_bstack, alt1316_end3677
    rx1314_cur."!cursor_pass"(rx1314_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx1314_cur)
  rx1314_restart3669:
    repr_get_attr_obj rx1314_cstack, rx1314_cur, rx1314_curclass, "$!cstack"
  rx1314_fail3670:
    unless rx1314_bstack, rx1314_done3668
    pop $I19, rx1314_bstack
    if_null rx1314_cstack, rx1314_cstack_done3673
    unless rx1314_cstack, rx1314_cstack_done3673
    dec $I19
    set $P11, rx1314_cstack[$I19]
  rx1314_cstack_done3673:
    pop rx1314_rep, rx1314_bstack
    pop rx1314_pos, rx1314_bstack
    pop $I19, rx1314_bstack
    lt rx1314_pos, -1, rx1314_done3668
    lt rx1314_pos, 0, rx1314_fail3670
    eq $I19, 0, rx1314_fail3670
    nqp_islist $I20, rx1314_cstack
    unless $I20, rx1314_jump3671
    elements $I18, rx1314_bstack
    le $I18, 0, rx1314_cut3672
    dec $I18
    set $I18, rx1314_bstack[$I18]
  rx1314_cut3672:
    assign rx1314_cstack, $I18
  rx1314_jump3671:
    jump $I19
  rx1314_done3668:
    rx1314_cur."!cursor_fail"()
    .return (rx1314_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_238_1360426903.566") :anon :lex :outer("cuid_237_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1317_tgt
    .local int rx1317_pos
    .local int rx1317_off
    .local int rx1317_eos
    .local int rx1317_rep
    .local pmc rx1317_cur
    .local pmc rx1317_curclass
    .local pmc rx1317_bstack
    .local pmc rx1317_cstack
    (rx1317_cur, rx1317_tgt, rx1317_pos, rx1317_curclass, rx1317_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1317_cur
    length rx1317_eos, rx1317_tgt
    eq $I19, 1, rx1317_restart3681
    gt rx1317_pos, rx1317_eos, rx1317_fail3682
    repr_get_attr_int $I11, self, rx1317_curclass, "$!from"
    ne $I11, -1, rxscan1318_done3688
    goto rxscan1318_scan3687
  rxscan1318_loop3686:
    inc rx1317_pos
    gt rx1317_pos, rx1317_eos, rx1317_fail3682
    repr_bind_attr_int rx1317_cur, rx1317_curclass, "$!from", rx1317_pos
  rxscan1318_scan3687:
    nqp_rxmark rx1317_bstack, rxscan1318_loop3686, rx1317_pos, 0
  rxscan1318_done3688:
    add $I11, rx1317_pos, 1
    gt $I11, rx1317_eos, rx1317_fail3682
    substr $S10, rx1317_tgt, rx1317_pos, 1
    ne $S10, ucs4:">", rx1317_fail3682
    add rx1317_pos, 1
    rx1317_cur."!cursor_pass"(rx1317_pos, 'backtrack'=>1)
    .return (rx1317_cur)
  rx1317_restart3681:
    repr_get_attr_obj rx1317_cstack, rx1317_cur, rx1317_curclass, "$!cstack"
  rx1317_fail3682:
    unless rx1317_bstack, rx1317_done3680
    pop $I19, rx1317_bstack
    if_null rx1317_cstack, rx1317_cstack_done3685
    unless rx1317_cstack, rx1317_cstack_done3685
    dec $I19
    set $P11, rx1317_cstack[$I19]
  rx1317_cstack_done3685:
    pop rx1317_rep, rx1317_bstack
    pop rx1317_pos, rx1317_bstack
    pop $I19, rx1317_bstack
    lt rx1317_pos, -1, rx1317_done3680
    lt rx1317_pos, 0, rx1317_fail3682
    eq $I19, 0, rx1317_fail3682
    nqp_islist $I20, rx1317_cstack
    unless $I20, rx1317_jump3683
    elements $I18, rx1317_bstack
    le $I18, 0, rx1317_cut3684
    dec $I18
    set $I18, rx1317_bstack[$I18]
  rx1317_cut3684:
    assign rx1317_cstack, $I18
  rx1317_jump3683:
    jump $I19
  rx1317_done3680:
    rx1317_cur."!cursor_fail"()
    .return (rx1317_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_239_1360426903.566") :anon :lex :outer("cuid_237_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1319_tgt
    .local int rx1319_pos
    .local int rx1319_off
    .local int rx1319_eos
    .local int rx1319_rep
    .local pmc rx1319_cur
    .local pmc rx1319_curclass
    .local pmc rx1319_bstack
    .local pmc rx1319_cstack
    (rx1319_cur, rx1319_tgt, rx1319_pos, rx1319_curclass, rx1319_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1319_cur
    length rx1319_eos, rx1319_tgt
    eq $I19, 1, rx1319_restart3692
    gt rx1319_pos, rx1319_eos, rx1319_fail3693
    repr_get_attr_int $I11, self, rx1319_curclass, "$!from"
    ne $I11, -1, rxscan1320_done3699
    goto rxscan1320_scan3698
  rxscan1320_loop3697:
    inc rx1319_pos
    gt rx1319_pos, rx1319_eos, rx1319_fail3693
    repr_bind_attr_int rx1319_cur, rx1319_curclass, "$!from", rx1319_pos
  rxscan1320_scan3698:
    nqp_rxmark rx1319_bstack, rxscan1320_loop3697, rx1319_pos, 0
  rxscan1320_done3699:
    add $I11, rx1319_pos, 1
    gt $I11, rx1319_eos, rx1319_fail3693
    substr $S10, rx1319_tgt, rx1319_pos, 1
    ne $S10, ucs4:"{", rx1319_fail3693
    add rx1319_pos, 1
    rx1319_cur."!cursor_pass"(rx1319_pos, 'backtrack'=>1)
    .return (rx1319_cur)
  rx1319_restart3692:
    repr_get_attr_obj rx1319_cstack, rx1319_cur, rx1319_curclass, "$!cstack"
  rx1319_fail3693:
    unless rx1319_bstack, rx1319_done3691
    pop $I19, rx1319_bstack
    if_null rx1319_cstack, rx1319_cstack_done3696
    unless rx1319_cstack, rx1319_cstack_done3696
    dec $I19
    set $P11, rx1319_cstack[$I19]
  rx1319_cstack_done3696:
    pop rx1319_rep, rx1319_bstack
    pop rx1319_pos, rx1319_bstack
    pop $I19, rx1319_bstack
    lt rx1319_pos, -1, rx1319_done3691
    lt rx1319_pos, 0, rx1319_fail3693
    eq $I19, 0, rx1319_fail3693
    nqp_islist $I20, rx1319_cstack
    unless $I20, rx1319_jump3694
    elements $I18, rx1319_bstack
    le $I18, 0, rx1319_cut3695
    dec $I18
    set $I18, rx1319_bstack[$I18]
  rx1319_cut3695:
    assign rx1319_cstack, $I18
  rx1319_jump3694:
    jump $I19
  rx1319_done3691:
    rx1319_cur."!cursor_fail"()
    .return (rx1319_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_240_1360426903.566") :anon :lex :outer("cuid_414_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1441
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_241_1360426903.566' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1322_tgt
    .local int rx1322_pos
    .local int rx1322_off
    .local int rx1322_eos
    .local int rx1322_rep
    .local pmc rx1322_cur
    .local pmc rx1322_curclass
    .local pmc rx1322_bstack
    .local pmc rx1322_cstack
    (rx1322_cur, rx1322_tgt, rx1322_pos, rx1322_curclass, rx1322_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1322_cur
    length rx1322_eos, rx1322_tgt
    eq $I19, 1, rx1322_restart3703
    gt rx1322_pos, rx1322_eos, rx1322_fail3704
    repr_get_attr_int $I11, self, rx1322_curclass, "$!from"
    ne $I11, -1, rxscan1323_done3710
    goto rxscan1323_scan3709
  rxscan1323_loop3708:
    inc rx1322_pos
    gt rx1322_pos, rx1322_eos, rx1322_fail3704
    repr_bind_attr_int rx1322_cur, rx1322_curclass, "$!from", rx1322_pos
  rxscan1323_scan3709:
    nqp_rxmark rx1322_bstack, rxscan1323_loop3708, rx1322_pos, 0
  rxscan1323_done3710:
    nqp_rxmark rx1322_bstack, rxcap1324_fail3712, rx1322_pos, 0
    ge rx1322_pos, rx1322_eos, rx1322_fail3704
    substr $S11, rx1322_tgt, rx1322_pos, 1
    index $I11, ucs4:"?!", $S11
    lt $I11, 0, rx1322_fail3704
    inc rx1322_pos
    .const 'Sub' $P5001 = 'cuid_241_1360426903.566' 
    capture_lex $P5001
    repr_bind_attr_int rx1322_cur, rx1322_curclass, "$!pos", rx1322_pos
    $P11 = rx1322_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1322_curclass, "$!pos"
    lt $I11, 0, rx1322_fail3704
    nqp_rxpeek $I19, rx1322_bstack, rxcap1324_fail3712
    inc $I19
    set $I11, rx1322_bstack[$I19]
    repr_bind_attr_int rx1322_cur, rx1322_curclass, "$!pos", rx1322_pos
    $P11 = rx1322_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1322_pos)
    rx1322_cstack = rx1322_cur."!cursor_capture"($P11, "zw")
    goto rxcap1324_done3711
  rxcap1324_fail3712:
    goto rx1322_fail3704
  rxcap1324_done3711:
    repr_bind_attr_int rx1322_cur, rx1322_curclass, "$!pos", rx1322_pos
    $P11 = rx1322_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1322_curclass, "$!pos"
    lt $I11, 0, rx1322_fail3704
    nqp_rxmark rx1322_bstack, rxsubrule1327_pass3723, -1, 0
  rxsubrule1327_pass3723:
    rx1322_cstack = rx1322_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1322_pos, $P11, rx1322_curclass, "$!pos"
    rx1322_cur."!cursor_pass"(rx1322_pos, "assertion:sym<?{ }>", 'backtrack'=>1)
    .return (rx1322_cur)
  rx1322_restart3703:
    repr_get_attr_obj rx1322_cstack, rx1322_cur, rx1322_curclass, "$!cstack"
  rx1322_fail3704:
    unless rx1322_bstack, rx1322_done3702
    pop $I19, rx1322_bstack
    if_null rx1322_cstack, rx1322_cstack_done3707
    unless rx1322_cstack, rx1322_cstack_done3707
    dec $I19
    set $P11, rx1322_cstack[$I19]
  rx1322_cstack_done3707:
    pop rx1322_rep, rx1322_bstack
    pop rx1322_pos, rx1322_bstack
    pop $I19, rx1322_bstack
    lt rx1322_pos, -1, rx1322_done3702
    lt rx1322_pos, 0, rx1322_fail3704
    eq $I19, 0, rx1322_fail3704
    nqp_islist $I20, rx1322_cstack
    unless $I20, rx1322_jump3705
    elements $I18, rx1322_bstack
    le $I18, 0, rx1322_cut3706
    dec $I18
    set $I18, rx1322_bstack[$I18]
  rx1322_cut3706:
    assign rx1322_cstack, $I18
  rx1322_jump3705:
    jump $I19
  rx1322_done3702:
    rx1322_cur."!cursor_fail"()
    .return (rx1322_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_241_1360426903.566") :anon :lex :outer("cuid_240_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1325_tgt
    .local int rx1325_pos
    .local int rx1325_off
    .local int rx1325_eos
    .local int rx1325_rep
    .local pmc rx1325_cur
    .local pmc rx1325_curclass
    .local pmc rx1325_bstack
    .local pmc rx1325_cstack
    (rx1325_cur, rx1325_tgt, rx1325_pos, rx1325_curclass, rx1325_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1325_cur
    length rx1325_eos, rx1325_tgt
    eq $I19, 1, rx1325_restart3715
    gt rx1325_pos, rx1325_eos, rx1325_fail3716
    repr_get_attr_int $I11, self, rx1325_curclass, "$!from"
    ne $I11, -1, rxscan1326_done3722
    goto rxscan1326_scan3721
  rxscan1326_loop3720:
    inc rx1325_pos
    gt rx1325_pos, rx1325_eos, rx1325_fail3716
    repr_bind_attr_int rx1325_cur, rx1325_curclass, "$!from", rx1325_pos
  rxscan1326_scan3721:
    nqp_rxmark rx1325_bstack, rxscan1326_loop3720, rx1325_pos, 0
  rxscan1326_done3722:
    add $I11, rx1325_pos, 1
    gt $I11, rx1325_eos, rx1325_fail3716
    substr $S10, rx1325_tgt, rx1325_pos, 1
    ne $S10, ucs4:"{", rx1325_fail3716
    add rx1325_pos, 1
    rx1325_cur."!cursor_pass"(rx1325_pos, 'backtrack'=>1)
    .return (rx1325_cur)
  rx1325_restart3715:
    repr_get_attr_obj rx1325_cstack, rx1325_cur, rx1325_curclass, "$!cstack"
  rx1325_fail3716:
    unless rx1325_bstack, rx1325_done3714
    pop $I19, rx1325_bstack
    if_null rx1325_cstack, rx1325_cstack_done3719
    unless rx1325_cstack, rx1325_cstack_done3719
    dec $I19
    set $P11, rx1325_cstack[$I19]
  rx1325_cstack_done3719:
    pop rx1325_rep, rx1325_bstack
    pop rx1325_pos, rx1325_bstack
    pop $I19, rx1325_bstack
    lt rx1325_pos, -1, rx1325_done3714
    lt rx1325_pos, 0, rx1325_fail3716
    eq $I19, 0, rx1325_fail3716
    nqp_islist $I20, rx1325_cstack
    unless $I20, rx1325_jump3717
    elements $I18, rx1325_bstack
    le $I18, 0, rx1325_cut3718
    dec $I18
    set $I18, rx1325_bstack[$I18]
  rx1325_cut3718:
    assign rx1325_cstack, $I18
  rx1325_jump3717:
    jump $I19
  rx1325_done3714:
    rx1325_cur."!cursor_fail"()
    .return (rx1325_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_242_1360426903.566") :anon :lex :outer("cuid_414_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1445
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_243_1360426903.566' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1328_tgt
    .local int rx1328_pos
    .local int rx1328_off
    .local int rx1328_eos
    .local int rx1328_rep
    .local pmc rx1328_cur
    .local pmc rx1328_curclass
    .local pmc rx1328_bstack
    .local pmc rx1328_cstack
    (rx1328_cur, rx1328_tgt, rx1328_pos, rx1328_curclass, rx1328_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1328_cur
    length rx1328_eos, rx1328_tgt
    eq $I19, 1, rx1328_restart3726
    gt rx1328_pos, rx1328_eos, rx1328_fail3727
    repr_get_attr_int $I11, self, rx1328_curclass, "$!from"
    ne $I11, -1, rxscan1329_done3733
    goto rxscan1329_scan3732
  rxscan1329_loop3731:
    inc rx1328_pos
    gt rx1328_pos, rx1328_eos, rx1328_fail3727
    repr_bind_attr_int rx1328_cur, rx1328_curclass, "$!from", rx1328_pos
  rxscan1329_scan3732:
    nqp_rxmark rx1328_bstack, rxscan1329_loop3731, rx1328_pos, 0
  rxscan1329_done3733:
    repr_bind_attr_int rx1328_cur, rx1328_curclass, "$!pos", rx1328_pos
    $P11 = rx1328_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1328_curclass, "$!pos"
    lt $I11, 0, rx1328_fail3727
    nqp_rxmark rx1328_bstack, rxsubrule1330_pass3734, -1, 0
  rxsubrule1330_pass3734:
    rx1328_cstack = rx1328_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx1328_pos, $P11, rx1328_curclass, "$!pos"
    nqp_rxmark rx1328_bstack, rxquantr1331_done3736, rx1328_pos, 0
  rxquantr1331_loop3735:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1332_03738
    nqp_push_label $P11, alt1332_13749
    nqp_push_label $P11, alt1332_23751
    nqp_push_label $P11, alt1332_33753
    nqp_push_label $P11, alt1332_43755
    nqp_rxmark rx1328_bstack, alt1332_end3737, -1, 0
    rx1328_cur."!alt"(rx1328_pos, "alt_nfa__42_1360426906.893", $P11)
    goto rx1328_fail3727
  alt1332_03738:
    .const 'Sub' $P5001 = 'cuid_243_1360426903.566' 
    capture_lex $P5001
    repr_bind_attr_int rx1328_cur, rx1328_curclass, "$!pos", rx1328_pos
    $P11 = rx1328_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1328_curclass, "$!pos"
    lt $I11, 0, rx1328_fail3727
    goto alt1332_end3737
  alt1332_13749:
    add $I11, rx1328_pos, 1
    gt $I11, rx1328_eos, rx1328_fail3727
    substr $S10, rx1328_tgt, rx1328_pos, 1
    ne $S10, ucs4:"=", rx1328_fail3727
    add rx1328_pos, 1
    repr_bind_attr_int rx1328_cur, rx1328_curclass, "$!pos", rx1328_pos
    $P11 = rx1328_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1328_curclass, "$!pos"
    lt $I11, 0, rx1328_fail3727
    nqp_rxmark rx1328_bstack, rxsubrule1335_pass3750, -1, 0
  rxsubrule1335_pass3750:
    rx1328_cstack = rx1328_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1328_pos, $P11, rx1328_curclass, "$!pos"
    goto alt1332_end3737
  alt1332_23751:
    add $I11, rx1328_pos, 1
    gt $I11, rx1328_eos, rx1328_fail3727
    substr $S10, rx1328_tgt, rx1328_pos, 1
    ne $S10, ucs4:":", rx1328_fail3727
    add rx1328_pos, 1
    repr_bind_attr_int rx1328_cur, rx1328_curclass, "$!pos", rx1328_pos
    $P11 = rx1328_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1328_curclass, "$!pos"
    lt $I11, 0, rx1328_fail3727
    nqp_rxmark rx1328_bstack, rxsubrule1336_pass3752, -1, 0
  rxsubrule1336_pass3752:
    rx1328_cstack = rx1328_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1328_pos, $P11, rx1328_curclass, "$!pos"
    goto alt1332_end3737
  alt1332_33753:
    add $I11, rx1328_pos, 1
    gt $I11, rx1328_eos, rx1328_fail3727
    substr $S10, rx1328_tgt, rx1328_pos, 1
    ne $S10, ucs4:"(", rx1328_fail3727
    add rx1328_pos, 1
    repr_bind_attr_int rx1328_cur, rx1328_curclass, "$!pos", rx1328_pos
    $P11 = rx1328_cur."LANG"("MAIN", "arglist")
    repr_get_attr_int $I11, $P11, rx1328_curclass, "$!pos"
    lt $I11, 0, rx1328_fail3727
    nqp_rxmark rx1328_bstack, rxsubrule1337_pass3754, -1, 0
  rxsubrule1337_pass3754:
    rx1328_cstack = rx1328_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1328_pos, $P11, rx1328_curclass, "$!pos"
    add $I11, rx1328_pos, 1
    gt $I11, rx1328_eos, rx1328_fail3727
    substr $S10, rx1328_tgt, rx1328_pos, 1
    ne $S10, ucs4:")", rx1328_fail3727
    add rx1328_pos, 1
    goto alt1332_end3737
  alt1332_43755:
    repr_bind_attr_int rx1328_cur, rx1328_curclass, "$!pos", rx1328_pos
    $P11 = rx1328_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx1328_curclass, "$!pos"
    lt $I11, 0, rx1328_fail3727
    repr_get_attr_int rx1328_pos, $P11, rx1328_curclass, "$!pos"
    repr_bind_attr_int rx1328_cur, rx1328_curclass, "$!pos", rx1328_pos
    $P11 = rx1328_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx1328_curclass, "$!pos"
    lt $I11, 0, rx1328_fail3727
    nqp_rxmark rx1328_bstack, rxsubrule1339_pass3757, -1, 0
  rxsubrule1339_pass3757:
    rx1328_cstack = rx1328_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx1328_pos, $P11, rx1328_curclass, "$!pos"
    goto alt1332_end3737
  alt1332_end3737:
    nqp_rxpeek $I19, rx1328_bstack, rxquantr1331_done3736
    inc $I19
    inc $I19
    set rx1328_rep, rx1328_bstack[$I19]
    nqp_rxcommit rx1328_bstack, rxquantr1331_done3736
    inc rx1328_rep
  rxquantr1331_done3736:
    rx1328_cur."!cursor_pass"(rx1328_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx1328_cur)
  rx1328_restart3726:
    repr_get_attr_obj rx1328_cstack, rx1328_cur, rx1328_curclass, "$!cstack"
  rx1328_fail3727:
    unless rx1328_bstack, rx1328_done3725
    pop $I19, rx1328_bstack
    if_null rx1328_cstack, rx1328_cstack_done3730
    unless rx1328_cstack, rx1328_cstack_done3730
    dec $I19
    set $P11, rx1328_cstack[$I19]
  rx1328_cstack_done3730:
    pop rx1328_rep, rx1328_bstack
    pop rx1328_pos, rx1328_bstack
    pop $I19, rx1328_bstack
    lt rx1328_pos, -1, rx1328_done3725
    lt rx1328_pos, 0, rx1328_fail3727
    eq $I19, 0, rx1328_fail3727
    nqp_islist $I20, rx1328_cstack
    unless $I20, rx1328_jump3728
    elements $I18, rx1328_bstack
    le $I18, 0, rx1328_cut3729
    dec $I18
    set $I18, rx1328_bstack[$I18]
  rx1328_cut3729:
    assign rx1328_cstack, $I18
  rx1328_jump3728:
    jump $I19
  rx1328_done3725:
    rx1328_cur."!cursor_fail"()
    .return (rx1328_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_243_1360426903.566") :anon :lex :outer("cuid_242_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1333_tgt
    .local int rx1333_pos
    .local int rx1333_off
    .local int rx1333_eos
    .local int rx1333_rep
    .local pmc rx1333_cur
    .local pmc rx1333_curclass
    .local pmc rx1333_bstack
    .local pmc rx1333_cstack
    (rx1333_cur, rx1333_tgt, rx1333_pos, rx1333_curclass, rx1333_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1333_cur
    length rx1333_eos, rx1333_tgt
    eq $I19, 1, rx1333_restart3741
    gt rx1333_pos, rx1333_eos, rx1333_fail3742
    repr_get_attr_int $I11, self, rx1333_curclass, "$!from"
    ne $I11, -1, rxscan1334_done3748
    goto rxscan1334_scan3747
  rxscan1334_loop3746:
    inc rx1333_pos
    gt rx1333_pos, rx1333_eos, rx1333_fail3742
    repr_bind_attr_int rx1333_cur, rx1333_curclass, "$!from", rx1333_pos
  rxscan1334_scan3747:
    nqp_rxmark rx1333_bstack, rxscan1334_loop3746, rx1333_pos, 0
  rxscan1334_done3748:
    add $I11, rx1333_pos, 1
    gt $I11, rx1333_eos, rx1333_fail3742
    substr $S10, rx1333_tgt, rx1333_pos, 1
    ne $S10, ucs4:">", rx1333_fail3742
    add rx1333_pos, 1
    rx1333_cur."!cursor_pass"(rx1333_pos, 'backtrack'=>1)
    .return (rx1333_cur)
  rx1333_restart3741:
    repr_get_attr_obj rx1333_cstack, rx1333_cur, rx1333_curclass, "$!cstack"
  rx1333_fail3742:
    unless rx1333_bstack, rx1333_done3740
    pop $I19, rx1333_bstack
    if_null rx1333_cstack, rx1333_cstack_done3745
    unless rx1333_cstack, rx1333_cstack_done3745
    dec $I19
    set $P11, rx1333_cstack[$I19]
  rx1333_cstack_done3745:
    pop rx1333_rep, rx1333_bstack
    pop rx1333_pos, rx1333_bstack
    pop $I19, rx1333_bstack
    lt rx1333_pos, -1, rx1333_done3740
    lt rx1333_pos, 0, rx1333_fail3742
    eq $I19, 0, rx1333_fail3742
    nqp_islist $I20, rx1333_cstack
    unless $I20, rx1333_jump3743
    elements $I18, rx1333_bstack
    le $I18, 0, rx1333_cut3744
    dec $I18
    set $I18, rx1333_bstack[$I18]
  rx1333_cut3744:
    assign rx1333_cstack, $I18
  rx1333_jump3743:
    jump $I19
  rx1333_done3740:
    rx1333_cur."!cursor_fail"()
    .return (rx1333_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_244_1360426903.566") :anon :lex :outer("cuid_414_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1456
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1340_tgt
    .local int rx1340_pos
    .local int rx1340_off
    .local int rx1340_eos
    .local int rx1340_rep
    .local pmc rx1340_cur
    .local pmc rx1340_curclass
    .local pmc rx1340_bstack
    .local pmc rx1340_cstack
    (rx1340_cur, rx1340_tgt, rx1340_pos, rx1340_curclass, rx1340_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1340_cur
    length rx1340_eos, rx1340_tgt
    eq $I19, 1, rx1340_restart3760
    gt rx1340_pos, rx1340_eos, rx1340_fail3761
    repr_get_attr_int $I11, self, rx1340_curclass, "$!from"
    ne $I11, -1, rxscan1341_done3767
    goto rxscan1341_scan3766
  rxscan1341_loop3765:
    inc rx1340_pos
    gt rx1340_pos, rx1340_eos, rx1340_fail3761
    repr_bind_attr_int rx1340_cur, rx1340_curclass, "$!from", rx1340_pos
  rxscan1341_scan3766:
    nqp_rxmark rx1340_bstack, rxscan1341_loop3765, rx1340_pos, 0
  rxscan1341_done3767:
    ge rx1340_pos, rx1340_eos, rx1340_fail3761
    substr $S11, rx1340_tgt, rx1340_pos, 1
    index $I11, ucs4:"$@", $S11
    lt $I11, 0, rx1340_fail3761
    repr_bind_attr_int rx1340_cur, rx1340_curclass, "$!pos", rx1340_pos
    $P11 = rx1340_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1340_curclass, "$!pos"
    lt $I11, 0, rx1340_fail3761
    nqp_rxmark rx1340_bstack, rxsubrule1342_pass3768, -1, 0
  rxsubrule1342_pass3768:
    rx1340_cstack = rx1340_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1340_pos, $P11, rx1340_curclass, "$!pos"
    rx1340_cur."!cursor_pass"(rx1340_pos, "assertion:sym<var>", 'backtrack'=>1)
    .return (rx1340_cur)
  rx1340_restart3760:
    repr_get_attr_obj rx1340_cstack, rx1340_cur, rx1340_curclass, "$!cstack"
  rx1340_fail3761:
    unless rx1340_bstack, rx1340_done3759
    pop $I19, rx1340_bstack
    if_null rx1340_cstack, rx1340_cstack_done3764
    unless rx1340_cstack, rx1340_cstack_done3764
    dec $I19
    set $P11, rx1340_cstack[$I19]
  rx1340_cstack_done3764:
    pop rx1340_rep, rx1340_bstack
    pop rx1340_pos, rx1340_bstack
    pop $I19, rx1340_bstack
    lt rx1340_pos, -1, rx1340_done3759
    lt rx1340_pos, 0, rx1340_fail3761
    eq $I19, 0, rx1340_fail3761
    nqp_islist $I20, rx1340_cstack
    unless $I20, rx1340_jump3762
    elements $I18, rx1340_bstack
    le $I18, 0, rx1340_cut3763
    dec $I18
    set $I18, rx1340_bstack[$I18]
  rx1340_cut3763:
    assign rx1340_cstack, $I18
  rx1340_jump3762:
    jump $I19
  rx1340_done3759:
    rx1340_cur."!cursor_fail"()
    .return (rx1340_cur) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_245_1360426903.566") :anon :lex :outer("cuid_414_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1460
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1343_tgt
    .local int rx1343_pos
    .local int rx1343_off
    .local int rx1343_eos
    .local int rx1343_rep
    .local pmc rx1343_cur
    .local pmc rx1343_curclass
    .local pmc rx1343_bstack
    .local pmc rx1343_cstack
    (rx1343_cur, rx1343_tgt, rx1343_pos, rx1343_curclass, rx1343_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1343_cur
    length rx1343_eos, rx1343_tgt
    eq $I19, 1, rx1343_restart3771
    gt rx1343_pos, rx1343_eos, rx1343_fail3772
    repr_get_attr_int $I11, self, rx1343_curclass, "$!from"
    ne $I11, -1, rxscan1344_done3778
    goto rxscan1344_scan3777
  rxscan1344_loop3776:
    inc rx1343_pos
    gt rx1343_pos, rx1343_eos, rx1343_fail3772
    repr_bind_attr_int rx1343_cur, rx1343_curclass, "$!from", rx1343_pos
  rxscan1344_scan3777:
    nqp_rxmark rx1343_bstack, rxscan1344_loop3776, rx1343_pos, 0
  rxscan1344_done3778:
    repr_bind_attr_int rx1343_cur, rx1343_curclass, "$!pos", rx1343_pos
    $P11 = rx1343_cur."LANG"("MAIN", "pblock")
    repr_get_attr_int $I11, $P11, rx1343_curclass, "$!pos"
    lt $I11, 0, rx1343_fail3772
    nqp_rxmark rx1343_bstack, rxsubrule1345_pass3779, -1, 0
  rxsubrule1345_pass3779:
    rx1343_cstack = rx1343_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx1343_pos, $P11, rx1343_curclass, "$!pos"
    rx1343_cur."!cursor_pass"(rx1343_pos, "codeblock", 'backtrack'=>1)
    .return (rx1343_cur)
  rx1343_restart3771:
    repr_get_attr_obj rx1343_cstack, rx1343_cur, rx1343_curclass, "$!cstack"
  rx1343_fail3772:
    unless rx1343_bstack, rx1343_done3770
    pop $I19, rx1343_bstack
    if_null rx1343_cstack, rx1343_cstack_done3775
    unless rx1343_cstack, rx1343_cstack_done3775
    dec $I19
    set $P11, rx1343_cstack[$I19]
  rx1343_cstack_done3775:
    pop rx1343_rep, rx1343_bstack
    pop rx1343_pos, rx1343_bstack
    pop $I19, rx1343_bstack
    lt rx1343_pos, -1, rx1343_done3770
    lt rx1343_pos, 0, rx1343_fail3772
    eq $I19, 0, rx1343_fail3772
    nqp_islist $I20, rx1343_cstack
    unless $I20, rx1343_jump3773
    elements $I18, rx1343_bstack
    le $I18, 0, rx1343_cut3774
    dec $I18
    set $I18, rx1343_bstack[$I18]
  rx1343_cut3774:
    assign rx1343_cstack, $I18
  rx1343_jump3773:
    jump $I19
  rx1343_done3770:
    rx1343_cur."!cursor_fail"()
    .return (rx1343_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_246_1360426903.566") :anon :lex :outer("cuid_414_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1464
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1346_tgt
    .local int rx1346_pos
    .local int rx1346_off
    .local int rx1346_eos
    .local int rx1346_rep
    .local pmc rx1346_cur
    .local pmc rx1346_curclass
    .local pmc rx1346_bstack
    .local pmc rx1346_cstack
    (rx1346_cur, rx1346_tgt, rx1346_pos, rx1346_curclass, rx1346_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1346_cur
    length rx1346_eos, rx1346_tgt
    eq $I19, 1, rx1346_restart3782
    gt rx1346_pos, rx1346_eos, rx1346_fail3783
    repr_get_attr_int $I11, self, rx1346_curclass, "$!from"
    ne $I11, -1, rxscan1347_done3789
    goto rxscan1347_scan3788
  rxscan1347_loop3787:
    inc rx1346_pos
    gt rx1346_pos, rx1346_eos, rx1346_fail3783
    repr_bind_attr_int rx1346_cur, rx1346_curclass, "$!from", rx1346_pos
  rxscan1347_scan3788:
    nqp_rxmark rx1346_bstack, rxscan1347_loop3787, rx1346_pos, 0
  rxscan1347_done3789:
    repr_bind_attr_int rx1346_cur, rx1346_curclass, "$!pos", rx1346_pos
    $P11 = rx1346_cur."LANG"("MAIN", "quote_EXPR")
    repr_get_attr_int $I11, $P11, rx1346_curclass, "$!pos"
    lt $I11, 0, rx1346_fail3783
    nqp_rxmark rx1346_bstack, rxsubrule1348_pass3790, -1, 0
  rxsubrule1348_pass3790:
    rx1346_cstack = rx1346_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1346_pos, $P11, rx1346_curclass, "$!pos"
    rx1346_cur."!cursor_pass"(rx1346_pos, "arg", 'backtrack'=>1)
    .return (rx1346_cur)
  rx1346_restart3782:
    repr_get_attr_obj rx1346_cstack, rx1346_cur, rx1346_curclass, "$!cstack"
  rx1346_fail3783:
    unless rx1346_bstack, rx1346_done3781
    pop $I19, rx1346_bstack
    if_null rx1346_cstack, rx1346_cstack_done3786
    unless rx1346_cstack, rx1346_cstack_done3786
    dec $I19
    set $P11, rx1346_cstack[$I19]
  rx1346_cstack_done3786:
    pop rx1346_rep, rx1346_bstack
    pop rx1346_pos, rx1346_bstack
    pop $I19, rx1346_bstack
    lt rx1346_pos, -1, rx1346_done3781
    lt rx1346_pos, 0, rx1346_fail3783
    eq $I19, 0, rx1346_fail3783
    nqp_islist $I20, rx1346_cstack
    unless $I20, rx1346_jump3784
    elements $I18, rx1346_bstack
    le $I18, 0, rx1346_cut3785
    dec $I18
    set $I18, rx1346_bstack[$I18]
  rx1346_cut3785:
    assign rx1346_cstack, $I18
  rx1346_jump3784:
    jump $I19
  rx1346_done3781:
    rx1346_cur."!cursor_fail"()
    .return (rx1346_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_415_1360426903.566") :anon :lex :outer("cuid_372_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1473
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3792
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5003
  fallback3792:
    set $P101, $P5002
    nqp_get_sc_object $P5007, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3795
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5008
  fallback3795:
    type_check $I5001, $P101, $P5004
    if $I5001 goto unless1349_end3794 
.annotate 'line', 1475
    box $P5009, "Pre-increment can only work on a variable"
    die $P5009
  unless1349_end3794:
.annotate 'line', 1478
    nqp_get_sc_object $P5013, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback3796
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5014
  fallback3796:
.annotate 'line', 1481
    nqp_get_sc_object $P5018, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback3797
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5015, $P5019
  fallback3797:
.annotate 'line', 1484
    nqp_get_sc_object $P5023, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["IVal"]
    unless_null $P5020, fallback3798
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5024
  fallback3798:
    $P5025 = $P5020."new"(1 :named("value"))
    $P5026 = $P5015."new"($P101, $P5025, "add_n" :named("op"))
    $P5027 = $P5010."new"($P101, $P5026, "bind" :named("op"))
    $P5028 = _lex_param_0."as_post"($P5027)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_416_1360426903.566") :anon :lex :outer("cuid_372_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1488
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3799
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5003
  fallback3799:
    set $P101, $P5002
    nqp_get_sc_object $P5007, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3802
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5008
  fallback3802:
    type_check $I5001, $P101, $P5004
    if $I5001 goto unless1350_end3801 
.annotate 'line', 1490
    box $P5009, "Pre-decrement can only work on a variable"
    die $P5009
  unless1350_end3801:
.annotate 'line', 1493
    nqp_get_sc_object $P5013, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback3803
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5014
  fallback3803:
.annotate 'line', 1496
    nqp_get_sc_object $P5018, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback3804
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5015, $P5019
  fallback3804:
.annotate 'line', 1499
    nqp_get_sc_object $P5023, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["IVal"]
    unless_null $P5020, fallback3805
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5024
  fallback3805:
    $P5025 = $P5020."new"(1 :named("value"))
    $P5026 = $P5015."new"($P101, $P5025, "sub_n" :named("op"))
    $P5027 = $P5010."new"($P101, $P5026, "bind" :named("op"))
    $P5028 = _lex_param_0."as_post"($P5027)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_417_1360426903.566") :anon :lex :outer("cuid_372_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1503
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3806
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5004
  fallback3806:
    set $P101, $P5003
.annotate 'line', 1505
    nqp_get_sc_object $P5008, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3807
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5005, $P5009
  fallback3807:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3810
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback3810:
    type_check $I5001, $P101, $P5011
    if $I5001 goto unless1351_end3809 
.annotate 'line', 1506
    box $P5016, "Post-increment can only work on a variable"
    die $P5016
  unless1351_end3809:
.annotate 'line', 1509
    nqp_get_sc_object $P5020, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Stmt"]
    unless_null $P5017, fallback3811
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5021
  fallback3811:
.annotate 'line', 1511
    nqp_get_sc_object $P5025, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Op"]
    unless_null $P5022, fallback3812
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5022, $P5026
  fallback3812:
.annotate 'line', 1513
    nqp_get_sc_object $P5030, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback3813
    nqp_get_sc_object $P5031, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5027, $P5031
  fallback3813:
    $P5032 = $P101."returns"()
    $P5033 = $P5027."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"), $P5032 :named("returns"))
    $P5034 = $P5022."new"($P5033, $P101, "bind" :named("op"))
.annotate 'line', 1516
    nqp_get_sc_object $P5038, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Op"]
    unless_null $P5035, fallback3814
    nqp_get_sc_object $P5039, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5035, $P5039
  fallback3814:
.annotate 'line', 1519
    nqp_get_sc_object $P5043, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Op"]
    unless_null $P5040, fallback3815
    nqp_get_sc_object $P5044, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5040, $P5044
  fallback3815:
.annotate 'line', 1521
    nqp_get_sc_object $P5048, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["Var"]
    unless_null $P5045, fallback3816
    nqp_get_sc_object $P5049, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5045, $P5049
  fallback3816:
    $P5050 = $P101."returns"()
    $P5051 = $P5045."new"($P102 :named("name"), "local" :named("scope"), $P5050 :named("returns"))
.annotate 'line', 1522
    nqp_get_sc_object $P5055, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["IVal"]
    unless_null $P5052, fallback3817
    nqp_get_sc_object $P5056, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5052, $P5056
  fallback3817:
    $P5057 = $P5052."new"(1 :named("value"))
    $P5058 = $P5040."new"($P5051, $P5057, "add_n" :named("op"))
    $P5059 = $P5035."new"($P101, $P5058, "bind" :named("op"))
    $P5060 = $P5017."new"($P5034, $P5059, 0 :named("resultchild"))
    $P5061 = _lex_param_0."as_post"($P5060)
    .return ($P5061) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_418_1360426903.566") :anon :lex :outer("cuid_372_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1527
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3818
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5004
  fallback3818:
    set $P101, $P5003
.annotate 'line', 1529
    nqp_get_sc_object $P5008, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3819
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5005, $P5009
  fallback3819:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3822
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback3822:
    type_check $I5001, $P101, $P5011
    if $I5001 goto unless1352_end3821 
.annotate 'line', 1530
    box $P5016, "Post-decrement can only work on a variable"
    die $P5016
  unless1352_end3821:
.annotate 'line', 1533
    nqp_get_sc_object $P5020, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Stmt"]
    unless_null $P5017, fallback3823
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5021
  fallback3823:
.annotate 'line', 1535
    nqp_get_sc_object $P5025, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Op"]
    unless_null $P5022, fallback3824
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5022, $P5026
  fallback3824:
.annotate 'line', 1537
    nqp_get_sc_object $P5030, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback3825
    nqp_get_sc_object $P5031, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5027, $P5031
  fallback3825:
    $P5032 = $P5027."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"))
    $P5033 = $P5022."new"($P5032, $P101, "bind" :named("op"))
.annotate 'line', 1540
    nqp_get_sc_object $P5037, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback3826
    nqp_get_sc_object $P5038, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5034, $P5038
  fallback3826:
.annotate 'line', 1543
    nqp_get_sc_object $P5042, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["Op"]
    unless_null $P5039, fallback3827
    nqp_get_sc_object $P5043, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5039, $P5043
  fallback3827:
.annotate 'line', 1545
    nqp_get_sc_object $P5047, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["Var"]
    unless_null $P5044, fallback3828
    nqp_get_sc_object $P5048, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5044, $P5048
  fallback3828:
    $P5049 = $P5044."new"($P102 :named("name"), "local" :named("scope"))
.annotate 'line', 1546
    nqp_get_sc_object $P5053, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["IVal"]
    unless_null $P5050, fallback3829
    nqp_get_sc_object $P5054, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5050, $P5054
  fallback3829:
    $P5055 = $P5050."new"(1 :named("value"))
    $P5056 = $P5039."new"($P5049, $P5055, "sub_n" :named("op"))
    $P5057 = $P5034."new"($P101, $P5056, "bind" :named("op"))
    $P5058 = $P5017."new"($P5033, $P5057, 0 :named("resultchild"))
    $P5059 = _lex_param_0."as_post"($P5058)
    .return ($P5059) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_419_1360426903.566") :anon :lex :outer("cuid_372_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1551
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1552
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3830
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5002
  fallback3830:
    $P5003 = _lex_param_0."as_post"($P5001, "n" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_420_1360426903.566") :anon :lex :outer("cuid_372_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1555
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1556
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3831
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5002
  fallback3831:
    $P5003 = _lex_param_0."as_post"($P5001, "s" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_421_1360426903.566") :anon :lex :outer("cuid_372_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1559
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1560
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3832
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback3832:
.annotate 'line', 1562
    nqp_get_sc_object $P5009, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Op"]
    unless_null $P5006, fallback3833
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5010
  fallback3833:
    set $P5011, _lex_param_1[0]
    unless_null $P5011, fallback3834
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5012
  fallback3834:
    $P5013 = $P5006."new"($P5011, "where" :named("op"))
.annotate 'line', 1563
    nqp_get_sc_object $P5017, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Op"]
    unless_null $P5014, fallback3835
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5018
  fallback3835:
    set $P5019, _lex_param_1[1]
    unless_null $P5019, fallback3836
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5019, $P5020
  fallback3836:
    $P5021 = $P5014."new"($P5019, "where" :named("op"))
    $P5022 = $P5001."new"($P5013, $P5021, "iseq_i" :named("op"))
    $P5023 = _lex_param_0."as_post"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_422_1360426903.566") :anon :lex :outer("cuid_372_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1567
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$res", $P101 
    .lex "$ops", $P102 
    .lex "$arg_post", $P103 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P103, $P5003
.annotate 'line', 1568
    find_dynamic_lex $P5004, "$*REGALLOC"
    unless_null $P5004, fallback3837
    nqp_get_sc_object $P5007, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$REGALLOC"]
    unless_null $P5005, fallback3838
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5005, $P5008
  fallback3838:
    unless_null $P5005, vivi_13533839
    die "Contextual $*REGALLOC not found"
    box $P5009, "Contextual $*REGALLOC not found"
    set $P5005, $P5009
  vivi_13533839:
    set $P5004, $P5005
  fallback3837:
    $P5010 = $P5004."fresh_i"()
    set $P101, $P5010
.annotate 'line', 1569
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5013, $P5014, "PIRT"
    get_who $P5012, $P5013
    set $P5011, $P5012["Ops"]
    unless_null $P5011, fallback3840
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback3840:
    $P5016 = $P5011."new"($P101 :named("result"))
    set $P102, $P5016
.annotate 'line', 1570
    set $P5017, _lex_param_1[0]
    unless_null $P5017, fallback3841
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5018
  fallback3841:
    $P5019 = _lex_param_0."as_post"($P5017)
    set $P103, $P5019
.annotate 'line', 1571
    $P5020 = $P103."result"()
    $P5021 = _lex_param_0."infer_type"($P5020)
    set $S5002, $P5021
    downcase $S5001, $S5002
    iseq $I5001, $S5001, "i"
    unless $I5001 goto if1354_else3842 
.annotate 'line', 1572
    $P102."push"($P103)
.annotate 'line', 1573
    $P5022 = $P102."push_pirop"("not", $P101, $P103)
    goto if1354_end3843
  if1354_else3842:
.annotate 'line', 1575
.annotate 'line', 1576
    $P5023 = _lex_param_0."coerce"($P103, "P")
    set $P103, $P5023
.annotate 'line', 1577
    $P102."push"($P103)
.annotate 'line', 1578
    $P5024 = $P102."push_pirop"("isfalse", $P101, $P103)
  if1354_end3843:
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_424_1360426903.566") :anon :lex :outer("cuid_372_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1584
    .const 'Sub' $P5123 = 'cuid_423_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_427_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_430_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_431_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_434_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_436_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_437_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_438_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_440_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_441_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_446_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_247_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_248_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_249_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_250_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_251_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_252_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_253_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_254_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_255_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_256_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_257_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_258_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_259_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_260_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_261_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_262_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_263_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_264_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_265_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_266_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_267_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_268_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_269_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_270_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_271_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_272_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_273_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_274_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_275_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_276_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_277_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_278_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_279_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_280_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_281_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_282_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_283_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_284_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_285_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_286_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_287_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_288_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_289_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_290_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_291_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_292_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_293_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_294_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_295_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_296_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_297_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_298_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_299_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_300_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_301_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_302_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_303_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_304_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_305_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_306_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_307_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_308_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_309_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_310_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_311_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_312_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_313_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_314_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_315_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_316_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_317_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_318_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_319_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_320_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_321_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_322_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_323_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_324_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_325_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_326_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_327_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_328_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_329_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_330_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_331_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_332_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_333_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_334_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_335_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_336_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_337_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_338_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_339_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_340_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_341_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_342_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_343_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_344_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_345_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_346_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_347_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_348_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_349_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_350_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_351_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_352_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_353_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_354_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_355_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_356_1360426903.566' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_357_1360426903.566' 
    capture_lex $P5123 
    .lex "&xblock_immediate", $P101 
    .lex "&block_immediate", $P102 
    .lex "&default_for", $P103 
    .lex "&default_value_for_prim", $P104 
    .lex "&colonpair_str", $P105 
    .lex "&import_HOW_exports", $P106 
    .lex "&set_block_handler", $P107 
    .lex "&only_star_block", $P108 
    .lex "&attach_multi_signature", $P109 
    .lex "&wrap_return_handler", $P110 
    .lex "&lexical_package_lookup", $P111 
    .lex "$?PACKAGE", $P112 
    .lex "$?CLASS", $P113 
    .const 'Sub' $P5001 = 'cuid_423_1360426903.566' 
    capture_lex $P5001
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_427_1360426903.566' 
    capture_lex $P5002
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_430_1360426903.566' 
    capture_lex $P5003
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_431_1360426903.566' 
    capture_lex $P5004
    set $P104, $P5004
    .const 'Sub' $P5005 = 'cuid_434_1360426903.566' 
    capture_lex $P5005
    set $P105, $P5005
    .const 'Sub' $P5006 = 'cuid_436_1360426903.566' 
    capture_lex $P5006
    set $P106, $P5006
    .const 'Sub' $P5007 = 'cuid_437_1360426903.566' 
    capture_lex $P5007
    set $P107, $P5007
    .const 'Sub' $P5008 = 'cuid_438_1360426903.566' 
    capture_lex $P5008
    set $P108, $P5008
    .const 'Sub' $P5009 = 'cuid_440_1360426903.566' 
    capture_lex $P5009
    set $P109, $P5009
    .const 'Sub' $P5010 = 'cuid_441_1360426903.566' 
    capture_lex $P5010
    set $P110, $P5010
    .const 'Sub' $P5011 = 'cuid_446_1360426903.566' 
    capture_lex $P5011
    set $P111, $P5011
    .const 'Sub' $P5012 = 'cuid_247_1360426903.566' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_248_1360426903.566' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_249_1360426903.566' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_250_1360426903.566' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_251_1360426903.566' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_252_1360426903.566' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_253_1360426903.566' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_254_1360426903.566' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_255_1360426903.566' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_256_1360426903.566' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_257_1360426903.566' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_258_1360426903.566' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_259_1360426903.566' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_260_1360426903.566' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_261_1360426903.566' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_262_1360426903.566' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_263_1360426903.566' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_264_1360426903.566' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_265_1360426903.566' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_266_1360426903.566' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_267_1360426903.566' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_268_1360426903.566' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_269_1360426903.566' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_270_1360426903.566' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_271_1360426903.566' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_272_1360426903.566' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_273_1360426903.566' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_274_1360426903.566' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_275_1360426903.566' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_276_1360426903.566' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_277_1360426903.566' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_278_1360426903.566' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_279_1360426903.566' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_280_1360426903.566' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_281_1360426903.566' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_282_1360426903.566' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_283_1360426903.566' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_284_1360426903.566' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_285_1360426903.566' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_286_1360426903.566' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_287_1360426903.566' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_288_1360426903.566' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_289_1360426903.566' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_290_1360426903.566' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_291_1360426903.566' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_292_1360426903.566' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_293_1360426903.566' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_294_1360426903.566' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_295_1360426903.566' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_296_1360426903.566' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_297_1360426903.566' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_298_1360426903.566' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_299_1360426903.566' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_300_1360426903.566' 
    capture_lex $P5065
    .const 'Sub' $P5066 = 'cuid_301_1360426903.566' 
    capture_lex $P5066
    .const 'Sub' $P5067 = 'cuid_302_1360426903.566' 
    capture_lex $P5067
    .const 'Sub' $P5068 = 'cuid_303_1360426903.566' 
    capture_lex $P5068
    .const 'Sub' $P5069 = 'cuid_304_1360426903.566' 
    capture_lex $P5069
    .const 'Sub' $P5070 = 'cuid_305_1360426903.566' 
    capture_lex $P5070
    .const 'Sub' $P5071 = 'cuid_306_1360426903.566' 
    capture_lex $P5071
    .const 'Sub' $P5072 = 'cuid_307_1360426903.566' 
    capture_lex $P5072
    .const 'Sub' $P5073 = 'cuid_308_1360426903.566' 
    capture_lex $P5073
    .const 'Sub' $P5074 = 'cuid_309_1360426903.566' 
    capture_lex $P5074
    .const 'Sub' $P5075 = 'cuid_310_1360426903.566' 
    capture_lex $P5075
    .const 'Sub' $P5076 = 'cuid_311_1360426903.566' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_312_1360426903.566' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_313_1360426903.566' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_314_1360426903.566' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_315_1360426903.566' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_316_1360426903.566' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_317_1360426903.566' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_318_1360426903.566' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_319_1360426903.566' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_320_1360426903.566' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_321_1360426903.566' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_322_1360426903.566' 
    capture_lex $P5087
    .const 'Sub' $P5088 = 'cuid_323_1360426903.566' 
    capture_lex $P5088
    .const 'Sub' $P5089 = 'cuid_324_1360426903.566' 
    capture_lex $P5089
    .const 'Sub' $P5090 = 'cuid_325_1360426903.566' 
    capture_lex $P5090
    .const 'Sub' $P5091 = 'cuid_326_1360426903.566' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_327_1360426903.566' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_328_1360426903.566' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_329_1360426903.566' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_330_1360426903.566' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_331_1360426903.566' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_332_1360426903.566' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_333_1360426903.566' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_334_1360426903.566' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_335_1360426903.566' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_336_1360426903.566' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_337_1360426903.566' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_338_1360426903.566' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_339_1360426903.566' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_340_1360426903.566' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_341_1360426903.566' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_342_1360426903.566' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_343_1360426903.566' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_344_1360426903.566' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_345_1360426903.566' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_346_1360426903.566' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_347_1360426903.566' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_348_1360426903.566' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_349_1360426903.566' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_350_1360426903.566' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_351_1360426903.566' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_352_1360426903.566' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_353_1360426903.566' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_354_1360426903.566' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_355_1360426903.566' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_356_1360426903.566' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_357_1360426903.566' 
    capture_lex $P5122
    .return ($P111) 
.end
.HLL "nqp"
.namespace []
.sub "xblock_immediate" :subid("cuid_423_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1585
    .param pmc _lex_param_0 
    .lex "$xblock", _lex_param_0 
.annotate 'line', 1586
    set $P5001, _lex_param_0[1]
    unless_null $P5001, fallback3844
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5002
  fallback3844:
    $P5003 = "&block_immediate"($P5001)
    set _lex_param_0[1], $P5003
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "block_immediate" :subid("cuid_427_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1590
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_426_1360426903.566' 
    capture_lex $P5004 
    .lex "$block", _lex_param_0 
.annotate 'line', 1591
    _lex_param_0."blocktype"("immediate")
.annotate 'line', 1592
    $P5001 = _lex_param_0."symtable"()
    if $P5001 goto unless1355_end3846 
    .const 'Sub' $P5002 = 'cuid_426_1360426903.566' 
    capture_lex $P5002
    $P5003 = $P5002()
  unless1355_end3846:
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_426_1360426903.566") :anon :lex :outer("cuid_427_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1592
    .const 'Sub' $P5017 = 'cuid_425_1360426903.566' 
    capture_lex $P5017 
    .lex "$stmts", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 1593
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback3847
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback3847:
    find_lex $P5007, "$block"
    $P5008 = $P5007."node"()
    $P5009 = $P5002."new"($P5008 :named("node"))
    set $P101, $P5009
.annotate 'line', 1594
    find_lex $P5013, "$block"
    $P5014 = $P5013."list"()
    set $P5010, $P5014
    iter $P5012, $P5014
  for_next3848:
    unless $P5012, for_done3850
    shift $P5016, $P5012
  for_redo3849:
    .const 'Sub' $P5015 = 'cuid_425_1360426903.566' 
    capture_lex $P5015
    $P5010 = $P5015($P5016)
    goto for_next3848
  for_done3850:
    store_lex "$block", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_425_1360426903.566") :anon :lex :outer("cuid_426_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1594
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$stmts"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "default_for" :subid("cuid_430_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1600
    .param pmc _lex_param_0 
    .const 'Sub' $P5017 = 'cuid_429_1360426903.566' 
    capture_lex $P5017 
    .lex "$sigil", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1356_else3851 
.annotate 'line', 1601
.annotate 'line', 1602
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3853
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback3853:
    $P5006 = $P5001."new"("list" :named("op"))
    set $P5016, $P5006
    goto if1356_end3852
  if1356_else3851:
    set $S5002, _lex_param_0
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1357_else3854 
.annotate 'line', 1604
.annotate 'line', 1605
    nqp_get_sc_object $P5010, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback3856
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5011
  fallback3856:
    $P5012 = $P5007."new"("hash" :named("op"))
    set $P5015, $P5012
    goto if1357_end3855
  if1357_else3854:
    .const 'Sub' $P5013 = 'cuid_429_1360426903.566' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  if1357_end3855:
    set $P5016, $P5015
  if1356_end3852:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_429_1360426903.566") :anon :lex :outer("cuid_430_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1607
    .const 'Sub' $P5022 = 'cuid_428_1360426903.566' 
    capture_lex $P5022 
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_13623865
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 1609
    new $P5018, 'ExceptionHandler'
    set_label $P5018, catch_handler_13603862
    $P5018.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5018
.annotate 'line', 1610
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["WVal"]
    unless_null $P5002, fallback3857
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback3857:
    find_dynamic_lex $P5007, "$*W"
    unless_null $P5007, fallback3858
    nqp_get_sc_object $P5010, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$W"]
    unless_null $P5008, fallback3859
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5011
  fallback3859:
    unless_null $P5008, vivi_13583860
    die "Contextual $*W not found"
    box $P5012, "Contextual $*W not found"
    set $P5008, $P5012
  vivi_13583860:
    set $P5007, $P5008
  fallback3858:
    new $P5013, 'ResizablePMCArray'
    box $P5014, "NQPMu"
    push $P5013, $P5014
    $P5015 = $P5007."find_sym"($P5013)
    $P5016 = $P5002."new"($P5015 :named("value"))
    set $P101, $P5016
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5019, $P5017
    pop_eh 
    goto skip_handler_13593861
  catch_handler_13603862:
    .get_results ($P5018) 
    .const 'Sub' $P10001 = 'cuid_428_1360426903.566' 
    capture_lex $P10001
    $P10001($P5018)
    set $I10001, 1
    set $P5018["handled"], $I10001
    nqp_get_sc_object $P10002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    finalize $P5018
    pop_upto_eh $P5018
    pop_eh 
    set $P5019, $P10002
    goto skip_handler_13593861
  skip_handler_13593861:
    set $P5021, $P5019
    pop_eh 
    goto skip_handler_13613864
  catch_handler_13623865:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_13613864
  skip_handler_13613864:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_428_1360426903.566") :anon :lex :outer("cuid_429_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1611
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3863
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback3863:
    $P5006 = $P5001."new"("null" :named("op"))
    store_lex "$default", $P5006
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "default_value_for_prim" :subid("cuid_431_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1617
    .param pmc _lex_param_0 
    .lex "$prim", _lex_param_0 
    set $N5001, _lex_param_0
    set $N5002, 1
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if1363_else3866 
.annotate 'line', 1618
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["IVal"]
    unless_null $P5001, fallback3868
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback3868:
    $P5006 = $P5001."new"(0 :named("value"))
    set $P5020, $P5006
    goto if1363_end3867
  if1363_else3866:
    set $N5003, _lex_param_0
    set $N5004, 2
    iseq $I5002, $N5003, $N5004
    unless $I5002 goto if1364_else3869 
.annotate 'line', 1619
    nqp_get_sc_object $P5010, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["NVal"]
    unless_null $P5007, fallback3871
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5011
  fallback3871:
    $P5012 = $P5007."new"(0.0 :named("value"))
    set $P5019, $P5012
    goto if1364_end3870
  if1364_else3869:
.annotate 'line', 1620
    nqp_get_sc_object $P5016, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["SVal"]
    unless_null $P5013, fallback3872
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5017
  fallback3872:
    $P5018 = $P5013."new"("" :named("value"))
    set $P5019, $P5018
  if1364_end3870:
    set $P5020, $P5019
  if1363_end3867:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair_str" :subid("cuid_434_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1632
    .param pmc _lex_param_0 
    .const 'Sub' $P5010 = 'cuid_433_1360426903.566' 
    capture_lex $P5010 
    .lex "$ast", _lex_param_0 
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3875
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback3875:
    type_check $I5001, _lex_param_0, $P5001
    unless $I5001 goto if1365_else3873 
    .const 'Sub' $P5006 = 'cuid_433_1360426903.566' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5009, $P5007
    goto if1365_end3874
  if1365_else3873:
.annotate 'line', 1637
.annotate 'line', 1638
    $P5008 = _lex_param_0."value"()
    set $P5009, $P5008
  if1365_end3874:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_433_1360426903.566") :anon :lex :outer("cuid_434_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1633
    .const 'Sub' $P5009 = 'cuid_432_1360426903.566' 
    capture_lex $P5009 
    .lex "@parts", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 1635
    find_lex $P5005, "$ast"
    $P5006 = $P5005."list"()
    set $P5002, $P5006
    iter $P5004, $P5006
  for_next3876:
    unless $P5004, for_done3878
    shift $P5008, $P5004
  for_redo3877:
    .const 'Sub' $P5007 = 'cuid_432_1360426903.566' 
    capture_lex $P5007
    $P5002 = $P5007($P5008)
    goto for_next3876
  for_done3878:
    join $S5001, " ", $P101
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_432_1360426903.566") :anon :lex :outer("cuid_433_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1635
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "@parts"
    $P5002 = _lex_param_0."value"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "import_HOW_exports" :subid("cuid_436_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1825
    .param pmc _lex_param_0 
    .const 'Sub' $P5011 = 'cuid_435_1360426903.566' 
    capture_lex $P5011 
    .lex "$UNIT", _lex_param_0 
    exists $I5001, _lex_param_0["EXPORTHOW"]
    box $P5010, $I5001
    set $P5009, $P5010
    unless $I5001 goto if1366_end3880 
.annotate 'line', 1827
    set $P5005, _lex_param_0["EXPORTHOW"]
    unless_null $P5005, fallback3881
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5005, $P5006
  fallback3881:
    get_who $P5004, $P5005
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next3885:
    unless $P5003, for_done3887
    shift $P5008, $P5003
  for_redo3886:
    .const 'Sub' $P5007 = 'cuid_435_1360426903.566' 
    capture_lex $P5007
    $P5001 = $P5007($P5008)
    goto for_next3885
  for_done3887:
    set $P5009, $P5001
  if1366_end3880:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_435_1360426903.566") :anon :lex :outer("cuid_436_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1828
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_dynamic_lex $P5001, "%*HOW"
    unless_null $P5001, fallback3882
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HOW"]
    unless_null $P5002, fallback3883
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HOW"], $P5007
    set $P5002, $P5007
  fallback3883:
    unless_null $P5002, vivi_13673884
    die "Contextual %*HOW not found"
    box $P5008, "Contextual %*HOW not found"
    set $P5002, $P5008
  vivi_13673884:
    set $P5001, $P5002
  fallback3882:
.annotate 'line', 1829
    $P5009 = _lex_param_0."key"()
    set $S5001, $P5009
    $P5010 = _lex_param_0."value"()
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "set_block_handler" :subid("cuid_437_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1927
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$/", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$type", _lex_param_2 
    find_dynamic_lex $P5001, "%*HANDLERS"
    unless_null $P5001, fallback3890
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback3891
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback3891:
    unless_null $P5002, vivi_13693892
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_13693892:
    set $P5001, $P5002
  fallback3890:
    set $S5001, _lex_param_2
    exists $I5001, $P5001[$S5001]
    unless $I5001 goto if1368_end3889 
.annotate 'line', 1928
    set $S5004, _lex_param_2
    concat $S5003, "Duplicate ", $S5004
    concat $S5002, $S5003, " handler in block"
    box $P5009, $S5002
    die $P5009
  if1368_end3889:
.annotate 'line', 1931
    $P5010 = _lex_param_1."arity"()
    if $P5010 goto unless1370_end3894 
.annotate 'line', 1932
.annotate 'line', 1933
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback3895
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback3895:
.annotate 'line', 1934
    nqp_get_sc_object $P5019, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback3896
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5016, $P5020
  fallback3896:
    $P5021 = $P5016."new"("lexical" :named("scope"), "$!" :named("name"), "var" :named("decl"))
.annotate 'line', 1935
    nqp_get_sc_object $P5025, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Var"]
    unless_null $P5022, fallback3897
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5022, $P5026
  fallback3897:
    $P5027 = $P5022."new"("lexical" :named("scope"), "$_" :named("name"))
    $P5028 = $P5011."new"($P5021, $P5027, "bind" :named("op"))
    _lex_param_1."unshift"($P5028)
.annotate 'line', 1938
    nqp_get_sc_object $P5032, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Var"]
    unless_null $P5029, fallback3898
    nqp_get_sc_object $P5033, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5029, $P5033
  fallback3898:
    $P5034 = $P5029."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    _lex_param_1."unshift"($P5034)
.annotate 'line', 1939
    _lex_param_1."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1940
    _lex_param_1."symbol"("$!", "lexical" :named("scope"))
.annotate 'line', 1941
    $P5035 = _lex_param_1."arity"(1)
  unless1370_end3894:
.annotate 'line', 1943
    _lex_param_1."blocktype"("declaration")
    find_dynamic_lex $P5036, "%*HANDLERS"
    unless_null $P5036, fallback3899
    nqp_get_sc_object $P5039, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5038, $P5039
    set $P5037, $P5038["%HANDLERS"]
    unless_null $P5037, fallback3900
    nqp_get_sc_object $P5041, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5040, $P5041
    new $P5042, 'Hash'
    set $P5040["%HANDLERS"], $P5042
    set $P5037, $P5042
  fallback3900:
    unless_null $P5037, vivi_13713901
    die "Contextual %*HANDLERS not found"
    box $P5043, "Contextual %*HANDLERS not found"
    set $P5037, $P5043
  vivi_13713901:
    set $P5036, $P5037
  fallback3899:
    set $S5005, _lex_param_2
.annotate 'line', 1944
    nqp_get_sc_object $P5047, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["Stmts"]
    unless_null $P5044, fallback3902
    nqp_get_sc_object $P5048, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5044, $P5048
  fallback3902:
.annotate 'line', 1945
    nqp_get_sc_object $P5052, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Op"]
    unless_null $P5049, fallback3903
    nqp_get_sc_object $P5053, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5049, $P5053
  fallback3903:
.annotate 'line', 1947
    nqp_get_sc_object $P5057, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Op"]
    unless_null $P5054, fallback3904
    nqp_get_sc_object $P5058, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5054, $P5058
  fallback3904:
    $P5059 = $P5054."new"("exception" :named("op"))
    $P5060 = $P5049."new"(_lex_param_1, $P5059, "call" :named("op"))
.annotate 'line', 1949
    nqp_get_sc_object $P5064, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["Op"]
    unless_null $P5061, fallback3905
    nqp_get_sc_object $P5065, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5061, $P5065
  fallback3905:
.annotate 'line', 1951
    nqp_get_sc_object $P5069, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5068, $P5069, "QAST"
    get_who $P5067, $P5068
    set $P5066, $P5067["Op"]
    unless_null $P5066, fallback3906
    nqp_get_sc_object $P5070, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5066, $P5070
  fallback3906:
    $P5071 = $P5066."new"("exception" :named("op"))
.annotate 'line', 1952
    nqp_get_sc_object $P5075, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5074, $P5075, "QAST"
    get_who $P5073, $P5074
    set $P5072, $P5073["SVal"]
    unless_null $P5072, fallback3907
    nqp_get_sc_object $P5076, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5072, $P5076
  fallback3907:
    $P5077 = $P5072."new"("handled" :named("value"))
.annotate 'line', 1953
    nqp_get_sc_object $P5081, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5080, $P5081, "QAST"
    get_who $P5079, $P5080
    set $P5078, $P5079["IVal"]
    unless_null $P5078, fallback3908
    nqp_get_sc_object $P5082, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5078, $P5082
  fallback3908:
    $P5083 = $P5078."new"(1 :named("value"))
    $P5084 = $P5061."new"($P5071, $P5077, $P5083, "bindkey_i" :named("op"))
.annotate 'line', 1955
    $P5085 = "&default_for"("$")
    $P5086 = $P5044."new"($P5060, $P5084, $P5085)
    set $P5036[$S5005], $P5086
    .return ($P5086) 
.end
.HLL "nqp"
.namespace []
.sub "only_star_block" :subid("cuid_438_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2592
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 2593
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback3909
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback3910
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5006
  fallback3910:
    unless_null $P5003, vivi_13723911
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_13723911:
    set $P5002, $P5003
  fallback3909:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
.annotate 'line', 2594
    nqp_get_sc_object $P5012, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback3912
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5013
  fallback3912:
.annotate 'line', 2596
    nqp_get_sc_object $P5017, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Op"]
    unless_null $P5014, fallback3913
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5018
  fallback3913:
.annotate 'line', 2598
    nqp_get_sc_object $P5022, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["Op"]
    unless_null $P5019, fallback3914
    nqp_get_sc_object $P5023, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5019, $P5023
  fallback3914:
.annotate 'line', 2600
    nqp_get_sc_object $P5027, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Var"]
    unless_null $P5024, fallback3915
    nqp_get_sc_object $P5028, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5024, $P5028
  fallback3915:
.annotate 'line', 2602
    nqp_get_sc_object $P5032, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Op"]
    unless_null $P5029, fallback3916
    nqp_get_sc_object $P5033, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5029, $P5033
  fallback3916:
    nqp_get_sc_object $P5037, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback3917
    nqp_get_sc_object $P5038, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5034, $P5038
  fallback3917:
    $P5039 = $P5034."new"("curcode" :named("op"))
    $P5040 = $P5029."new"($P5039, "getcodeobj" :named("op"))
.annotate 'line', 2603
    nqp_get_sc_object $P5044, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["WVal"]
    unless_null $P5041, fallback3918
    nqp_get_sc_object $P5045, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5041, $P5045
  fallback3918:
    find_dynamic_lex $P5046, "$*W"
    unless_null $P5046, fallback3919
    nqp_get_sc_object $P5049, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5048, $P5049
    set $P5047, $P5048["$W"]
    unless_null $P5047, fallback3920
    nqp_get_sc_object $P5050, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5047, $P5050
  fallback3920:
    unless_null $P5047, vivi_13733921
    die "Contextual $*W not found"
    box $P5051, "Contextual $*W not found"
    set $P5047, $P5051
  vivi_13733921:
    set $P5046, $P5047
  fallback3919:
    new $P5052, 'ResizablePMCArray'
    box $P5053, "NQPRoutine"
    push $P5052, $P5053
    $P5054 = $P5046."find_sym"($P5052)
    $P5055 = $P5041."new"($P5054 :named("value"))
    $P5056 = $P5024."new"($P5040, $P5055, "$!dispatch_cache" :named("name"), "attribute" :named("scope"))
.annotate 'line', 2605
    nqp_get_sc_object $P5060, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5059, $P5060, "QAST"
    get_who $P5058, $P5059
    set $P5057, $P5058["Op"]
    unless_null $P5057, fallback3922
    nqp_get_sc_object $P5061, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5057, $P5061
  fallback3922:
    $P5062 = $P5057."new"("usecapture" :named("op"))
    $P5063 = $P5019."new"($P5056, $P5062, "multicachefind" :named("op"))
.annotate 'line', 2607
    nqp_get_sc_object $P5067, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["Op"]
    unless_null $P5064, fallback3923
    nqp_get_sc_object $P5068, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5064, $P5068
  fallback3923:
.annotate 'line', 2609
    nqp_get_sc_object $P5072, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5071, $P5072, "QAST"
    get_who $P5070, $P5071
    set $P5069, $P5070["Op"]
    unless_null $P5069, fallback3924
    nqp_get_sc_object $P5073, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5069, $P5073
  fallback3924:
    nqp_get_sc_object $P5077, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5076, $P5077, "QAST"
    get_who $P5075, $P5076
    set $P5074, $P5075["Op"]
    unless_null $P5074, fallback3925
    nqp_get_sc_object $P5078, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5074, $P5078
  fallback3925:
    $P5079 = $P5074."new"("curcode" :named("op"))
    $P5080 = $P5069."new"($P5079, "getcodeobj" :named("op"))
.annotate 'line', 2610
    nqp_get_sc_object $P5084, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5083, $P5084, "QAST"
    get_who $P5082, $P5083
    set $P5081, $P5082["Op"]
    unless_null $P5081, fallback3926
    nqp_get_sc_object $P5085, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5081, $P5085
  fallback3926:
    $P5086 = $P5081."new"("usecapture" :named("op"))
    $P5087 = $P5064."new"($P5080, $P5086, "callmethod" :named("op"), "dispatch" :named("name"))
    $P5088 = $P5014."new"($P5063, $P5087, "ifnull" :named("op"))
.annotate 'line', 2613
    nqp_get_sc_object $P5092, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5091, $P5092, "QAST"
    get_who $P5090, $P5091
    set $P5089, $P5090["Op"]
    unless_null $P5089, fallback3927
    nqp_get_sc_object $P5093, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5089, $P5093
  fallback3927:
    $P5094 = $P5089."new"("usecapture" :named("op"))
    $P5095 = $P5009."new"($P5088, $P5094, "invokewithcapture" :named("op"))
    $P101."push"($P5095)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "attach_multi_signature" :subid("cuid_440_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2618
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5020 = 'cuid_439_1360426903.566' 
    capture_lex $P5020 
    .lex "$types", $P101 
    .lex "$definednesses", $P102 
    .lex "$code_obj", _lex_param_0 
    .lex "$routine", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    new $P5003, 'ResizablePMCArray'
    set $P101, $P5003
    new $P5004, 'ResizablePMCArray'
    set $P102, $P5004
    set $P5008, _lex_param_1[0]
    unless_null $P5008, fallback3928
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5009
  fallback3928:
    $P5010 = $P5008."list"()
    set $P5005, $P5010
    iter $P5007, $P5010
  for_next3944:
    unless $P5007, for_done3946
    shift $P5012, $P5007
  for_redo3945:
    .const 'Sub' $P5011 = 'cuid_439_1360426903.566' 
    capture_lex $P5011
    $P5005 = $P5011($P5012)
    goto for_next3944
  for_done3946:
.annotate 'line', 2630
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback3947
    nqp_get_sc_object $P5016, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback3948
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5017
  fallback3948:
    unless_null $P5014, vivi_13803949
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_13803949:
    set $P5013, $P5014
  fallback3947:
    $P5019 = $P5013."set_routine_signature"(_lex_param_0, $P101, $P102)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_439_1360426903.566") :anon :lex :outer("cuid_440_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2621
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3935
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback3935:
    type_check $I5001, _lex_param_0, $P5001
    set $I5003, $I5001
    unless $I5001 goto if1376_end3934 
.annotate 'line', 2622
    $P5006 = _lex_param_0."decl"()
    set $S5001, $P5006
    iseq $I5002, $S5001, "param"
    set $I5003, $I5002
  if1376_end3934:
    set $I5005, $I5003
    unless $I5003 goto if1375_end3932 
    $P5007 = _lex_param_0."named"()
    isfalse $I5004, $P5007
    set $I5005, $I5004
  if1375_end3932:
    box $P5021, $I5005
    set $P5020, $P5021
    unless $I5005 goto if1374_end3930 
.annotate 'line', 2623
    find_lex $P5008, "$types"
    $P5009 = _lex_param_0."returns"()
    get_id $I5007, $P5009
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    get_id $I5008, $P5010
    iseq $I5006, $I5007, $I5008
    unless $I5006 goto if1377_else3936 
    null $P5011
    set $P5013, $P5011
    goto if1377_end3937
  if1377_else3936:
.annotate 'line', 2625
    $P5012 = _lex_param_0."returns"()
    set $P5013, $P5012
  if1377_end3937:
    $P5008."push"($P5013)
.annotate 'line', 2626
    find_lex $P5014, "$definednesses"
    set $P5015, _lex_param_0["definedness"]
    unless_null $P5015, fallback3940
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5015, $P5016
  fallback3940:
    set $S5002, $P5015
    iseq $I5009, $S5002, "D"
    unless $I5009 goto if1378_else3938 
    set $I5012, 1
    goto if1378_end3939
  if1378_else3938:
    set $P5017, _lex_param_0["definedness"]
    unless_null $P5017, fallback3943
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5018
  fallback3943:
    set $S5003, $P5017
    iseq $I5010, $S5003, "U"
    unless $I5010 goto if1379_else3941 
    set $I5011, 2
    goto if1379_end3942
  if1379_else3941:
    set $I5011, 0
  if1379_end3942:
    set $I5012, $I5011
  if1378_end3939:
    $P5019 = $P5014."push"($I5012)
    set $P5020, $P5019
  if1374_end3930:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "wrap_return_handler" :subid("cuid_441_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2633
    .param pmc _lex_param_0 
    .lex "$past", _lex_param_0 
.annotate 'line', 2634
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3950
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback3950:
    $P5006 = $P5001."new"(_lex_param_0, "lexotic" :named("op"), "RETURN" :named("name"))
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "lexical_package_lookup" :subid("cuid_446_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3132
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5072 = 'cuid_444_1360426903.566' 
    capture_lex $P5072 
    .lex "$final_name", $P101 
    .lex "$lookup", $P102 
    .lex "@name", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_3951
    .lex "RETURN", $P103
    set $N5001, _lex_param_0
    set $N5002, 0
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if1381_end3954 
.annotate 'line', 3134
    $P5003 = _lex_param_1."CURSOR"()
    $P5004 = $P5003."panic"("Cannot compile empty name")
  if1381_end3954:
.annotate 'line', 3138
    $P5005 = _lex_param_0."pop"()
    set $P101, $P5005
.annotate 'line', 3139
    nqp_get_sc_object $P5009, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["VarWithFallback"]
    unless_null $P5006, fallback3955
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5010
  fallback3955:
.annotate 'line', 3141
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback3956
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback3956:
    set $S5001, $P101
    $P5016 = $P5011."new"($S5001 :named("value"))
    $P5017 = $P5006."new"($P5016, "associative" :named("scope"))
    set $P102, $P5017
    set $N5003, _lex_param_0
    set $N5004, 0
    iseq $I5002, $N5003, $N5004
    unless $I5002 goto if1382_else3957 
.annotate 'line', 3146
.annotate 'line', 3147
    nqp_get_sc_object $P5021, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["Op"]
    unless_null $P5018, fallback3959
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5018, $P5022
  fallback3959:
.annotate 'line', 3149
    nqp_get_sc_object $P5026, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["Var"]
    unless_null $P5023, fallback3960
    nqp_get_sc_object $P5027, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5023, $P5027
  fallback3960:
    $P5028 = $P5023."new"("$?PACKAGE" :named("name"), "lexical" :named("scope"))
    $P5029 = $P5018."new"($P5028, "who" :named("op"))
    $P102."unshift"($P5029)
.annotate 'line', 3151
    nqp_get_sc_object $P5033, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["Op"]
    unless_null $P5030, fallback3961
    nqp_get_sc_object $P5034, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5030, $P5034
  fallback3961:
.annotate 'line', 3153
    nqp_get_sc_object $P5038, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Op"]
    unless_null $P5035, fallback3962
    nqp_get_sc_object $P5039, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5035, $P5039
  fallback3962:
.annotate 'line', 3155
    nqp_get_sc_object $P5043, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Op"]
    unless_null $P5040, fallback3963
    nqp_get_sc_object $P5044, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5040, $P5044
  fallback3963:
.annotate 'line', 3157
    nqp_get_sc_object $P5048, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["WVal"]
    unless_null $P5045, fallback3964
    nqp_get_sc_object $P5049, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5045, $P5049
  fallback3964:
    find_dynamic_lex $P5050, "$*GLOBALish"
    unless_null $P5050, fallback3965
    nqp_get_sc_object $P5053, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5052, $P5053
    set $P5051, $P5052["$GLOBALish"]
    unless_null $P5051, fallback3966
    nqp_get_sc_object $P5054, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5051, $P5054
  fallback3966:
    unless_null $P5051, vivi_13833967
    die "Contextual $*GLOBALish not found"
    box $P5055, "Contextual $*GLOBALish not found"
    set $P5051, $P5055
  vivi_13833967:
    set $P5050, $P5051
  fallback3965:
    $P5056 = $P5045."new"($P5050 :named("value"))
    $P5057 = $P5040."new"($P5056, "who" :named("op"))
.annotate 'line', 3159
    nqp_get_sc_object $P5061, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5060, $P5061, "QAST"
    get_who $P5059, $P5060
    set $P5058, $P5059["SVal"]
    unless_null $P5058, fallback3968
    nqp_get_sc_object $P5062, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5058, $P5062
  fallback3968:
    set $S5002, $P101
    $P5063 = $P5058."new"($S5002 :named("value"))
    $P5064 = $P5035."new"($P5057, $P5063, "atkey" :named("op"))
.annotate 'line', 3161
    set $S5004, $P101
    substr $S5003, $S5004, 0, 1
    $P5065 = "&default_for"($S5003)
    $P5066 = $P5030."new"($P5064, $P5065, "ifnull" :named("op"))
    $P5067 = $P102."fallback"($P5066)
    goto if1382_end3958
  if1382_else3957:
    .const 'Sub' $P5068 = 'cuid_444_1360426903.566' 
    capture_lex $P5068
    $P5069 = $P5068()
  if1382_end3958:
    find_lex $P5070, "RETURN"
    $P5071 = $P5070($P102)
    goto lexotic_3952
  lexotic_3951:
    .get_results ($P5071)
  lexotic_3952:
    .return ($P5071) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_444_1360426903.566") :anon :lex :outer("cuid_446_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3167
    .const 'Sub' $P5066 = 'cuid_443_1360426903.566' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_445_1360426903.566' 
    capture_lex $P5066 
    .lex "$path", $P101 
    .lex "$sigil", $P102 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
.annotate 'line', 3169
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback3971
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback3972
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5007
  fallback3972:
    unless_null $P5004, vivi_13853973
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_13853973:
    set $P5003, $P5004
  fallback3971:
    find_lex $P5010, "@name"
    set $P5009, $P5010[0]
    unless_null $P5009, fallback3974
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5011
  fallback3974:
    $P5012 = $P5003."is_lexical"($P5009)
    unless $P5012 goto if1384_else3969 
    .const 'Sub' $P5013 = 'cuid_443_1360426903.566' 
    capture_lex $P5013
    $P5014 = $P5013()
    goto if1384_end3970
  if1384_else3969:
.annotate 'line', 3178
.annotate 'line', 3179
    nqp_get_sc_object $P5018, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["WVal"]
    unless_null $P5015, fallback3982
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5015, $P5019
  fallback3982:
    find_dynamic_lex $P5020, "$*GLOBALish"
    unless_null $P5020, fallback3983
    nqp_get_sc_object $P5023, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$GLOBALish"]
    unless_null $P5021, fallback3984
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5021, $P5024
  fallback3984:
    unless_null $P5021, vivi_13893985
    die "Contextual $*GLOBALish not found"
    box $P5025, "Contextual $*GLOBALish not found"
    set $P5021, $P5025
  vivi_13893985:
    set $P5020, $P5021
  fallback3983:
    $P5026 = $P5015."new"($P5020 :named("value"))
    set $P101, $P5026
  if1384_end3970:
    find_lex $P5028, "@name"
    set $P5027, $P5028[0]
    unless_null $P5027, fallback3988
    nqp_get_sc_object $P5029, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5027, $P5029
  fallback3988:
    set $S5001, $P5027
    iseq $I5001, $S5001, "GLOBAL"
    unless $I5001 goto if1390_end3987 
.annotate 'line', 3181
.annotate 'line', 3182
    find_lex $P5030, "@name"
    $P5031 = $P5030."shift"()
  if1390_end3987:
    find_lex $P5035, "@name"
    set $P5032, $P5035
    iter $P5034, $P5035
  for_next3991:
    unless $P5034, for_done3993
    shift $P5037, $P5034
  for_redo3992:
    .const 'Sub' $P5036 = 'cuid_445_1360426903.566' 
    capture_lex $P5036
    $P5032 = $P5036($P5037)
    goto for_next3991
  for_done3993:
.annotate 'line', 3189
    find_lex $P5038, "$lookup"
    nqp_get_sc_object $P5042, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["Op"]
    unless_null $P5039, fallback3994
    nqp_get_sc_object $P5043, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5039, $P5043
  fallback3994:
    $P5044 = $P5039."new"($P101, "who" :named("op"))
    $P5038."unshift"($P5044)
    find_lex $P5045, "$final_name"
    set $S5003, $P5045
    substr $S5002, $S5003, 0, 1
    box $P5046, $S5002
    set $P102, $P5046
    set $S5004, $P102
    iseq $I5002, $S5004, "@"
    set $I5004, $I5002
    if $I5002 goto unless1392_end3998 
    set $S5005, $P102
    iseq $I5003, $S5005, "%"
    set $I5004, $I5003
  unless1392_end3998:
    unless $I5004 goto if1391_else3995 
.annotate 'line', 3191
.annotate 'line', 3192
    find_lex $P5047, "$lookup"
    nqp_get_sc_object $P5051, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Op"]
    unless_null $P5048, fallback3999
    nqp_get_sc_object $P5052, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5048, $P5052
  fallback3999:
    find_lex $P5054, "$lookup"
    set $P5053, $P5054[0]
    unless_null $P5053, fallback4000
    nqp_get_sc_object $P5055, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5053, $P5055
  fallback4000:
    find_lex $P5057, "$lookup"
    set $P5056, $P5057[1]
    unless_null $P5056, fallback4001
    nqp_get_sc_object $P5058, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5056, $P5058
  fallback4001:
.annotate 'line', 3196
    $P5059 = "&default_for"($P102)
    $P5060 = $P5048."new"($P5053, $P5056, $P5059, "bindkey" :named("op"))
    $P5061 = $P5047."fallback"($P5060)
    set $P5065, $P5061
    goto if1391_end3996
  if1391_else3995:
.annotate 'line', 3199
.annotate 'line', 3200
    find_lex $P5062, "$lookup"
    $P5063 = "&default_for"($P102)
    $P5064 = $P5062."fallback"($P5063)
    set $P5065, $P5064
  if1391_end3996:
    .return ($P5065) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_443_1360426903.566") :anon :lex :outer("cuid_444_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3170
    .const 'Sub' $P5021 = 'cuid_442_1360426903.566' 
    capture_lex $P5021 
    .lex "$first", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    new $P5019, 'ExceptionHandler'
    set_label $P5019, catch_handler_13883980
    $P5019.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5019
.annotate 'line', 3171
    find_lex $P5002, "@name"
    $P5003 = $P5002."shift"()
    set $P101, $P5003
.annotate 'line', 3172
    nqp_get_sc_object $P5007, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["WVal"]
    unless_null $P5004, fallback3975
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5008
  fallback3975:
    find_dynamic_lex $P5009, "$*W"
    unless_null $P5009, fallback3976
    nqp_get_sc_object $P5012, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$W"]
    unless_null $P5010, fallback3977
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5013
  fallback3977:
    unless_null $P5010, vivi_13863978
    die "Contextual $*W not found"
    box $P5014, "Contextual $*W not found"
    set $P5010, $P5014
  vivi_13863978:
    set $P5009, $P5010
  fallback3976:
    new $P5015, 'ResizablePMCArray'
    push $P5015, $P101
    $P5016 = $P5009."find_sym"($P5015)
    $P5017 = $P5004."new"($P5016 :named("value"))
    store_lex "$path", $P5017
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5018
    pop_eh 
    goto skip_handler_13873979
  catch_handler_13883980:
    .get_results ($P5019) 
    .const 'Sub' $P10001 = 'cuid_442_1360426903.566' 
    capture_lex $P10001
    $P10001($P5019)
    set $I10001, 1
    set $P5019["handled"], $I10001
    nqp_get_sc_object $P10002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    finalize $P5019
    pop_upto_eh $P5019
    pop_eh 
    set $P5020, $P10002
    goto skip_handler_13873979
  skip_handler_13873979:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_442_1360426903.566") :anon :lex :outer("cuid_443_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3173
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 3174
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3981
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback3981:
    find_lex $P5006, "$first"
    $P5007 = $P5001."new"($P5006 :named("name"), "lexical" :named("scope"))
    store_lex "$path", $P5007
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_445_1360426903.566") :anon :lex :outer("cuid_444_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3184
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 3185
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback3989
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback3989:
    find_lex $P5006, "$path"
.annotate 'line', 3187
    nqp_get_sc_object $P5010, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["SVal"]
    unless_null $P5007, fallback3990
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5011
  fallback3990:
    set $S5001, _lex_param_0
    $P5012 = $P5007."new"($S5001 :named("value"))
    $P5013 = $P5001."new"($P5006, $P5012, "nqp_get_package_through_who PPs" :named("pirop"))
    store_lex "$path", $P5013
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_247_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1623
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4002
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4002:
    set $P5001, _lex_param_1["comp_unit"]
    unless_null $P5001, fallback4003
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4003:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_248_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1625
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1626
    unless_null _lex_param_1, fallback4006
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4006:
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback4007
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4007:
    unless $P5001 goto if1393_else4004 
    unless_null _lex_param_1, fallback4008
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5005
  fallback4008:
    set $P5004, _lex_param_1["identifier"]
    unless_null $P5004, fallback4009
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5006
  fallback4009:
    set $S5006, $P5004
    concat $S5005, $S5006, ":"
.annotate 'line', 1627
    unless_null _lex_param_1, fallback4010
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5009
  fallback4010:
    set $P5008, _lex_param_1["colonpair"]
    unless_null $P5008, fallback4011
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5010
  fallback4011:
    set $P5007, $P5008[0]
    unless_null $P5007, fallback4012
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5011
  fallback4012:
    $P5012 = $P5007."ast"()
    $P5013 = $P5012."named"()
    set $S5007, $P5013
    concat $S5004, $S5005, $S5007
    concat $S5003, $S5004, "<"
.annotate 'line', 1628
    unless_null _lex_param_1, fallback4013
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5016
  fallback4013:
    set $P5015, _lex_param_1["colonpair"]
    unless_null $P5015, fallback4014
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5015, $P5017
  fallback4014:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback4015
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5018
  fallback4015:
    $P5019 = $P5014."ast"()
    $P5020 = "&colonpair_str"($P5019)
    set $S5008, $P5020
    concat $S5002, $S5003, $S5008
    concat $S5001, $S5002, ">"
    set $S5010, $S5001
    goto if1393_end4005
  if1393_else4004:
    set $S5009, _lex_param_1
    set $S5010, $S5009
  if1393_end4005:
    $P5021 = _lex_param_1."!make"($S5010)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_249_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1642
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$mainline", $P101 
    .lex "$unit", $P102 
    .lex "$compunit", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P103, $P5003
.annotate 'line', 1643
    unless_null _lex_param_1, fallback4016
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5005
  fallback4016:
    set $P5004, _lex_param_1["statementlist"]
    unless_null $P5004, fallback4017
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5006
  fallback4017:
    $P5007 = $P5004."ast"()
    set $P101, $P5007
.annotate 'line', 1644
    find_dynamic_lex $P5008, "$*W"
    unless_null $P5008, fallback4018
    nqp_get_sc_object $P5011, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$W"]
    unless_null $P5009, fallback4019
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5012
  fallback4019:
    unless_null $P5009, vivi_13944020
    die "Contextual $*W not found"
    box $P5013, "Contextual $*W not found"
    set $P5009, $P5013
  vivi_13944020:
    set $P5008, $P5009
  fallback4018:
    $P5014 = $P5008."pop_lexpad"()
    set $P102, $P5014
    find_dynamic_lex $P5015, "$*HAS_YOU_ARE_HERE"
    unless_null $P5015, fallback4023
    nqp_get_sc_object $P5018, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$HAS_YOU_ARE_HERE"]
    unless_null $P5016, fallback4024
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5016, $P5019
  fallback4024:
    unless_null $P5016, vivi_13964025
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5020, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5016, $P5020
  vivi_13964025:
    set $P5015, $P5016
  fallback4023:
    if $P5015 goto unless1395_end4022 
.annotate 'line', 1649
.annotate 'line', 1650
    nqp_decontainerize $P5021, _lex_param_0
    $P5022 = $P5021."CTXSAVE"()
    $P5023 = $P102."push"($P5022)
  unless1395_end4022:
.annotate 'line', 1657
    nqp_get_sc_object $P5027, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Var"]
    unless_null $P5024, fallback4026
    nqp_get_sc_object $P5028, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5024, $P5028
  fallback4026:
    $P5029 = $P5024."new"("lexical" :named("scope"), "@ARGS" :named("name"), "param" :named("decl"), 1 :named("slurpy"))
    $P102."unshift"($P5029)
    find_dynamic_lex $P5030, "$*MAIN_SUB"
    unless_null $P5030, fallback4029
    nqp_get_sc_object $P5033, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5032, $P5033
    set $P5031, $P5032["$MAIN_SUB"]
    unless_null $P5031, fallback4030
    nqp_get_sc_object $P5034, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5031, $P5034
  fallback4030:
    unless_null $P5031, vivi_13984031
    die "Contextual $*MAIN_SUB not found"
    box $P5035, "Contextual $*MAIN_SUB not found"
    set $P5031, $P5035
  vivi_13984031:
    set $P5030, $P5031
  fallback4029:
    unless $P5030 goto if1397_end4028 
.annotate 'line', 1658
.annotate 'line', 1659
    nqp_get_sc_object $P5039, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback4032
    nqp_get_sc_object $P5040, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5036, $P5040
  fallback4032:
.annotate 'line', 1661
    nqp_get_sc_object $P5044, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback4033
    nqp_get_sc_object $P5045, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5041, $P5045
  fallback4033:
    $P5046 = $P5041."new"("lexical" :named("scope"), "@ARGS" :named("name"))
.annotate 'line', 1662
    nqp_get_sc_object $P5050, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["Op"]
    unless_null $P5047, fallback4034
    nqp_get_sc_object $P5051, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5047, $P5051
  fallback4034:
.annotate 'line', 1663
    nqp_get_sc_object $P5055, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["BVal"]
    unless_null $P5052, fallback4035
    nqp_get_sc_object $P5056, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5052, $P5056
  fallback4035:
    find_dynamic_lex $P5057, "$*MAIN_SUB"
    unless_null $P5057, fallback4036
    nqp_get_sc_object $P5060, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["$MAIN_SUB"]
    unless_null $P5058, fallback4037
    nqp_get_sc_object $P5061, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5058, $P5061
  fallback4037:
    unless_null $P5058, vivi_13994038
    die "Contextual $*MAIN_SUB not found"
    box $P5062, "Contextual $*MAIN_SUB not found"
    set $P5058, $P5062
  vivi_13994038:
    set $P5057, $P5058
  fallback4036:
    $P5063 = $P5052."new"($P5057 :named("value"))
.annotate 'line', 1664
    nqp_get_sc_object $P5067, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["Var"]
    unless_null $P5064, fallback4039
    nqp_get_sc_object $P5068, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5064, $P5068
  fallback4039:
    $P5069 = $P5064."new"("lexical" :named("scope"), "@ARGS" :named("name"), 1 :named("flat"))
    $P5070 = $P5047."new"($P5063, $P5069, "call" :named("op"))
    $P5071 = $P5036."new"($P5046, $P5070, "if" :named("op"))
    $P5072 = $P101."push"($P5071)
  if1397_end4028:
.annotate 'line', 1670
    $P102."push"($P101)
.annotate 'line', 1673
    find_dynamic_lex $P5073, "$*W"
    unless_null $P5073, fallback4040
    nqp_get_sc_object $P5076, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5075, $P5076
    set $P5074, $P5075["$W"]
    unless_null $P5074, fallback4041
    nqp_get_sc_object $P5077, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5074, $P5077
  fallback4041:
    unless_null $P5074, vivi_14004042
    die "Contextual $*W not found"
    box $P5078, "Contextual $*W not found"
    set $P5074, $P5078
  vivi_14004042:
    set $P5073, $P5074
  fallback4040:
    $P5079 = $P5073."libs"()
    $P102."push"($P5079)
.annotate 'line', 1676
    nqp_get_sc_object $P5083, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["CompUnit"]
    unless_null $P5080, fallback4043
    nqp_get_sc_object $P5084, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5080, $P5084
  fallback4043:
.annotate 'line', 1680
    find_dynamic_lex $P5085, "$*W"
    unless_null $P5085, fallback4044
    nqp_get_sc_object $P5088, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5087, $P5088
    set $P5086, $P5087["$W"]
    unless_null $P5086, fallback4045
    nqp_get_sc_object $P5089, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5086, $P5089
  fallback4045:
    unless_null $P5086, vivi_14014046
    die "Contextual $*W not found"
    box $P5090, "Contextual $*W not found"
    set $P5086, $P5090
  vivi_14014046:
    set $P5085, $P5086
  fallback4044:
    $P5091 = $P5085."sc"()
.annotate 'line', 1681
    find_dynamic_lex $P5092, "$*W"
    unless_null $P5092, fallback4047
    nqp_get_sc_object $P5095, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5094, $P5095
    set $P5093, $P5094["$W"]
    unless_null $P5093, fallback4048
    nqp_get_sc_object $P5096, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5093, $P5096
  fallback4048:
    unless_null $P5093, vivi_14024049
    die "Contextual $*W not found"
    box $P5097, "Contextual $*W not found"
    set $P5093, $P5097
  vivi_14024049:
    set $P5092, $P5093
  fallback4047:
    $P5098 = $P5092."code_ref_blocks"()
.annotate 'line', 1682
    find_dynamic_lex $P5099, "$*W"
    unless_null $P5099, fallback4050
    nqp_get_sc_object $P5102, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5101, $P5102
    set $P5100, $P5101["$W"]
    unless_null $P5100, fallback4051
    nqp_get_sc_object $P5103, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5100, $P5103
  fallback4051:
    unless_null $P5100, vivi_14034052
    die "Contextual $*W not found"
    box $P5104, "Contextual $*W not found"
    set $P5100, $P5104
  vivi_14034052:
    set $P5099, $P5100
  fallback4050:
    $P5105 = $P5099."is_precompilation_mode"()
.annotate 'line', 1683
    find_dynamic_lex $P5106, "$*W"
    unless_null $P5106, fallback4053
    nqp_get_sc_object $P5109, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5108, $P5109
    set $P5107, $P5108["$W"]
    unless_null $P5107, fallback4054
    nqp_get_sc_object $P5110, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5107, $P5110
  fallback4054:
    unless_null $P5107, vivi_14044055
    die "Contextual $*W not found"
    box $P5111, "Contextual $*W not found"
    set $P5107, $P5111
  vivi_14044055:
    set $P5106, $P5107
  fallback4053:
    $P5112 = $P5106."load_dependency_tasks"()
.annotate 'line', 1684
    find_dynamic_lex $P5113, "$*W"
    unless_null $P5113, fallback4056
    nqp_get_sc_object $P5116, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5115, $P5116
    set $P5114, $P5115["$W"]
    unless_null $P5114, fallback4057
    nqp_get_sc_object $P5117, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5114, $P5117
  fallback4057:
    unless_null $P5114, vivi_14054058
    die "Contextual $*W not found"
    box $P5118, "Contextual $*W not found"
    set $P5114, $P5118
  vivi_14054058:
    set $P5113, $P5114
  fallback4056:
    $P5119 = $P5113."fixup_tasks"()
.annotate 'line', 1689
    nqp_get_sc_object $P5123, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5122, $P5123, "QAST"
    get_who $P5121, $P5122
    set $P5120, $P5121["Op"]
    unless_null $P5120, fallback4059
    nqp_get_sc_object $P5124, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5120, $P5124
  fallback4059:
.annotate 'line', 1691
    nqp_get_sc_object $P5128, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5127, $P5128, "QAST"
    get_who $P5126, $P5127
    set $P5125, $P5126["BVal"]
    unless_null $P5125, fallback4060
    nqp_get_sc_object $P5129, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5125, $P5129
  fallback4060:
    $P5130 = $P5125."new"($P102 :named("value"))
    $P5131 = $P5120."new"($P5130, "call" :named("op"))
.annotate 'line', 1696
    nqp_get_sc_object $P5135, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5134, $P5135, "QAST"
    get_who $P5133, $P5134
    set $P5132, $P5133["Stmts"]
    unless_null $P5132, fallback4061
    nqp_get_sc_object $P5136, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5132, $P5136
  fallback4061:
.annotate 'line', 1697
    nqp_get_sc_object $P5140, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5139, $P5140, "QAST"
    get_who $P5138, $P5139
    set $P5137, $P5138["Op"]
    unless_null $P5137, fallback4062
    nqp_get_sc_object $P5141, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5137, $P5141
  fallback4062:
.annotate 'line', 1699
    nqp_get_sc_object $P5145, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5144, $P5145, "QAST"
    get_who $P5143, $P5144
    set $P5142, $P5143["BVal"]
    unless_null $P5142, fallback4063
    nqp_get_sc_object $P5146, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5142, $P5146
  fallback4063:
    $P5147 = $P5142."new"($P102 :named("value"))
.annotate 'line', 1700
    nqp_get_sc_object $P5151, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5150, $P5151, "QAST"
    get_who $P5149, $P5150
    set $P5148, $P5149["Var"]
    unless_null $P5148, fallback4064
    nqp_get_sc_object $P5152, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5148, $P5152
  fallback4064:
    $P5153 = $P5148."new"("ARGS" :named("name"), "local" :named("scope"), "param" :named("decl"), 1 :named("slurpy"), 1 :named("flat"))
    $P5154 = $P5137."new"($P5147, $P5153, "call" :named("op"))
    $P5155 = $P5132."new"($P5154)
    $P5156 = $P5080."new"($P102, "nqp" :named("hll"), $P5091 :named("sc"), $P5098 :named("code_ref_blocks"), $P5105 :named("compilation_mode"), $P5112 :named("pre_deserialize"), $P5119 :named("post_deserialize"), $P5131 :named("load"), $P5155 :named("main"))
    set $P103, $P5156
.annotate 'line', 1709
    find_dynamic_lex $P5157, "$*W"
    unless_null $P5157, fallback4065
    nqp_get_sc_object $P5160, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5159, $P5160
    set $P5158, $P5159["$W"]
    unless_null $P5158, fallback4066
    nqp_get_sc_object $P5161, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5158, $P5161
  fallback4066:
    unless_null $P5158, vivi_14064067
    die "Contextual $*W not found"
    box $P5162, "Contextual $*W not found"
    set $P5158, $P5162
  vivi_14064067:
    set $P5157, $P5158
  fallback4065:
    $P5157."cleanup"()
.annotate 'line', 1711
    $P5163 = _lex_param_1."!make"($P103)
    .return ($P5163) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_250_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1714
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_447_1360426903.566' 
    capture_lex $P5022 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 1715
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback4068
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback4068:
    $P5007 = $P5002."new"(_lex_param_1 :named("node"))
    set $P101, $P5007
    unless_null _lex_param_1, fallback4071
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5009
  fallback4071:
    set $P5008, _lex_param_1["statement"]
    unless_null $P5008, fallback4072
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5010
  fallback4072:
    unless $P5008 goto if1407_else4069 
.annotate 'line', 1716
    unless_null _lex_param_1, fallback4073
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5015
  fallback4073:
    set $P5014, _lex_param_1["statement"]
    unless_null $P5014, fallback4074
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5016
  fallback4074:
    set $P5011, $P5014
    iter $P5013, $P5014
  for_next4087:
    unless $P5013, for_done4089
    shift $P5018, $P5013
  for_redo4088:
    .const 'Sub' $P5017 = 'cuid_447_1360426903.566' 
    capture_lex $P5017
    $P5011 = $P5017($P5018)
    goto for_next4087
  for_done4089:
    goto if1407_end4070
  if1407_else4069:
.annotate 'line', 1725
.annotate 'line', 1726
    $P5019 = "&default_for"("$")
    $P5020 = $P101."push"($P5019)
  if1407_end4070:
.annotate 'line', 1728
    $P5021 = _lex_param_1."!make"($P101)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_447_1360426903.566") :anon :lex :outer("cuid_250_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1717
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 1718
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
    set $P5003, $P101["sink"]
    unless_null $P5003, fallback4077
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5004
  fallback4077:
    defined $I5001, $P5003
    unless $I5001 goto if1408_end4076 
    set $P5005, $P101["sink"]
    unless_null $P5005, fallback4078
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5005, $P5006
  fallback4078:
    set $P101, $P5005
  if1408_end4076:
    set $P5007, $P101["bareblock"]
    unless_null $P5007, fallback4081
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5008
  fallback4081:
    unless $P5007 goto if1409_end4080 
.annotate 'line', 1720
    set $P5009, $P101[0]
    unless_null $P5009, fallback4082
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5010
  fallback4082:
    $P5011 = "&block_immediate"($P5009)
    set $P101, $P5011
  if1409_end4080:
    nqp_get_sc_object $P5015, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Node"]
    unless_null $P5012, fallback4085
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5016
  fallback4085:
    type_check $I5002, $P101, $P5012
    unless $I5002 goto if1410_end4084 
.annotate 'line', 1721
    nqp_get_sc_object $P5020, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Stmts"]
    unless_null $P5017, fallback4086
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5021
  fallback4086:
    $P5022 = $P5017."new"($P101)
    set $P101, $P5022
  if1410_end4084:
.annotate 'line', 1722
    find_lex $P5023, "$past"
    $P5024 = $P5023."push"($P101)
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_251_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1731
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_4 :opt_flag 
    .const 'Sub' $P5018 = 'cuid_448_1360426903.566' 
    capture_lex $P5018 
    if haz_param_4, default4126
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_2, $P5017
  default4126:
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    unless_null _lex_param_1, fallback4092
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5003
  fallback4092:
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback4093
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5004
  fallback4093:
    unless $P5002 goto if1411_else4090 
    .const 'Sub' $P5005 = 'cuid_448_1360426903.566' 
    capture_lex $P5005
    $P5006 = $P5005()
    goto if1411_end4091
  if1411_else4090:
    unless_null _lex_param_1, fallback4122
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5008
  fallback4122:
    set $P5007, _lex_param_1["statement_control"]
    unless_null $P5007, fallback4123
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5009
  fallback4123:
    unless $P5007 goto if1415_else4120 
.annotate 'line', 1754
    unless_null _lex_param_1, fallback4124
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5011
  fallback4124:
    set $P5010, _lex_param_1["statement_control"]
    unless_null $P5010, fallback4125
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5012
  fallback4125:
    $P5013 = $P5010."ast"()
    set $P101, $P5013
    set $P5015, $P101
    goto if1415_end4121
  if1415_else4120:
.annotate 'line', 1755
    box $P5014, 0
    set $P101, $P5014
    set $P5015, $P101
  if1415_end4121:
  if1411_end4091:
.annotate 'line', 1756
    $P5016 = _lex_param_1."!make"($P101)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_448_1360426903.566") :anon :lex :outer("cuid_251_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1733
    .lex "$mc", $P101 
    .lex "$ml", $P102 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    find_lex $P5005, "$/"
    unless_null $P5005, fallback4094
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5005, $P5006
  fallback4094:
    set $P5004, $P5005["statement_mod_cond"]
    unless_null $P5004, fallback4095
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5007
  fallback4095:
    set $P5003, $P5004[0]
    unless_null $P5003, fallback4096
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5008
  fallback4096:
    set $P101, $P5003
    find_lex $P5011, "$/"
    unless_null $P5011, fallback4097
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5012
  fallback4097:
    set $P5010, $P5011["statement_mod_loop"]
    unless_null $P5010, fallback4098
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5013
  fallback4098:
    set $P5009, $P5010[0]
    unless_null $P5009, fallback4099
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5014
  fallback4099:
    set $P102, $P5009
.annotate 'line', 1736
    find_lex $P5016, "$/"
    unless_null $P5016, fallback4100
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5016, $P5017
  fallback4100:
    set $P5015, $P5016["EXPR"]
    unless_null $P5015, fallback4101
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5015, $P5018
  fallback4101:
    $P5019 = $P5015."ast"()
    store_lex "$past", $P5019
    unless $P101 goto if1412_end4103 
.annotate 'line', 1737
.annotate 'line', 1738
    nqp_get_sc_object $P5023, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback4104
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5024
  fallback4104:
    set $P5025, $P101["cond"]
    unless_null $P5025, fallback4105
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5025, $P5026
  fallback4105:
    $P5027 = $P5025."ast"()
    find_lex $P5028, "$past"
    set $P5029, $P101["sym"]
    unless_null $P5029, fallback4106
    nqp_get_sc_object $P5030, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5029, $P5030
  fallback4106:
    set $S5001, $P5029
    find_lex $P5031, "$/"
    $P5032 = $P5020."new"($P5027, $P5028, $S5001 :named("op"), $P5031 :named("node"))
    store_lex "$past", $P5032
  if1412_end4103:
    set $P5077, $P102
    unless $P102 goto if1413_end4108 
.annotate 'line', 1740
    set $P5033, $P102["sym"]
    unless_null $P5033, fallback4111
    nqp_get_sc_object $P5034, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5033, $P5034
  fallback4111:
    set $S5002, $P5033
    iseq $I5001, $S5002, "for"
    unless $I5001 goto if1414_else4109 
.annotate 'line', 1741
.annotate 'line', 1742
    nqp_get_sc_object $P5038, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Block"]
    unless_null $P5035, fallback4112
    nqp_get_sc_object $P5039, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5035, $P5039
  fallback4112:
.annotate 'line', 1743
    nqp_get_sc_object $P5043, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Var"]
    unless_null $P5040, fallback4113
    nqp_get_sc_object $P5044, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5040, $P5044
  fallback4113:
    $P5045 = $P5040."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    find_lex $P5046, "$past"
    $P5047 = $P5035."new"($P5045, $P5046, "immediate" :named("blocktype"))
    store_lex "$past", $P5047
.annotate 'line', 1745
    find_lex $P5048, "$past"
    $P5048."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1746
    find_lex $P5049, "$past"
    $P5049."arity"(1)
.annotate 'line', 1747
    nqp_get_sc_object $P5053, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["Op"]
    unless_null $P5050, fallback4114
    nqp_get_sc_object $P5054, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5050, $P5054
  fallback4114:
    set $P5055, $P102["cond"]
    unless_null $P5055, fallback4115
    nqp_get_sc_object $P5056, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5055, $P5056
  fallback4115:
    $P5057 = $P5055."ast"()
    find_lex $P5058, "$past"
    set $P5059, $P102["sym"]
    unless_null $P5059, fallback4116
    nqp_get_sc_object $P5060, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5059, $P5060
  fallback4116:
    set $S5003, $P5059
    find_lex $P5061, "$/"
    $P5062 = $P5050."new"($P5057, $P5058, $S5003 :named("op"), $P5061 :named("node"))
    store_lex "$past", $P5062
    set $P5076, $P5062
    goto if1414_end4110
  if1414_else4109:
.annotate 'line', 1749
.annotate 'line', 1750
    nqp_get_sc_object $P5066, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5065, $P5066, "QAST"
    get_who $P5064, $P5065
    set $P5063, $P5064["Op"]
    unless_null $P5063, fallback4117
    nqp_get_sc_object $P5067, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5063, $P5067
  fallback4117:
    set $P5068, $P102["cond"]
    unless_null $P5068, fallback4118
    nqp_get_sc_object $P5069, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5068, $P5069
  fallback4118:
    $P5070 = $P5068."ast"()
    find_lex $P5071, "$past"
    set $P5072, $P102["sym"]
    unless_null $P5072, fallback4119
    nqp_get_sc_object $P5073, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5072, $P5073
  fallback4119:
    set $S5004, $P5072
    find_lex $P5074, "$/"
    $P5075 = $P5063."new"($P5070, $P5071, $S5004 :named("op"), $P5074 :named("node"))
    store_lex "$past", $P5075
    set $P5076, $P5075
  if1414_end4110:
    set $P5077, $P5076
  if1413_end4108:
    .return ($P5077) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_252_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1759
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1760
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback4127
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback4127:
    unless_null _lex_param_1, fallback4128
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5007
  fallback4128:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback4129
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5008
  fallback4129:
    $P5009 = $P5006."ast"()
    unless_null _lex_param_1, fallback4130
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5011
  fallback4130:
    set $P5010, _lex_param_1["pblock"]
    unless_null $P5010, fallback4131
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5012
  fallback4131:
    $P5013 = $P5010."ast"()
    $P5014 = $P5001."new"($P5009, $P5013, "if" :named("op"), _lex_param_1 :named("node"))
    $P5015 = _lex_param_1."!make"($P5014)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_253_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1763
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1764
    unless_null _lex_param_1, fallback4132
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4132:
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback4133
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4133:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_254_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1767
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1768
    unless_null _lex_param_1, fallback4134
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4134:
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback4135
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4135:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_255_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1771
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5029 = 'cuid_450_1360426903.566' 
    capture_lex $P5029 
    .lex "$BLOCK", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 1772
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4136
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4137
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5006
  fallback4137:
    unless_null $P5003, vivi_14164138
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_14164138:
    set $P5002, $P5003
  fallback4136:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
    unless_null _lex_param_1, fallback4141
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5010
  fallback4141:
    set $P5009, _lex_param_1["statementlist"]
    unless_null $P5009, fallback4142
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5011
  fallback4142:
    unless $P5009 goto if1417_else4139 
    .const 'Sub' $P5012 = 'cuid_450_1360426903.566' 
    capture_lex $P5012
    $P5013 = $P5012()
    set $P5028, $P5013
    goto if1417_end4140
  if1417_else4139:
.annotate 'line', 1787
    find_dynamic_lex $P5014, "$*HAS_YOU_ARE_HERE"
    unless_null $P5014, fallback4167
    nqp_get_sc_object $P5017, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["$HAS_YOU_ARE_HERE"]
    unless_null $P5015, fallback4168
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5015, $P5018
  fallback4168:
    unless_null $P5015, vivi_14254169
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5019, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5015, $P5019
  vivi_14254169:
    set $P5014, $P5015
  fallback4167:
    unless $P5014 goto if1424_end4166 
.annotate 'line', 1788
.annotate 'line', 1789
    $P5020 = _lex_param_1."CURSOR"()
    $P5021 = $P5020."panic"("{YOU_ARE_HERE} may only appear once in a setting")
  if1424_end4166:
    box $P5022, 1
    store_dynamic_lex "$*HAS_YOU_ARE_HERE", $P5022
.annotate 'line', 1792
    unless_null _lex_param_1, fallback4170
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5024
  fallback4170:
    set $P5023, _lex_param_1["you_are_here"]
    unless_null $P5023, fallback4171
    nqp_get_sc_object $P5025, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5023, $P5025
  fallback4171:
    $P5026 = $P5023."ast"()
    $P5027 = _lex_param_1."!make"($P5026)
    set $P5028, $P5027
  if1417_end4140:
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_450_1360426903.566") :anon :lex :outer("cuid_255_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1773
    .const 'Sub' $P5057 = 'cuid_449_1360426903.566' 
    capture_lex $P5057 
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 1774
    find_lex $P5003, "$/"
    unless_null $P5003, fallback4143
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5004
  fallback4143:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback4144
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback4144:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
    find_dynamic_lex $P5007, "%*HANDLERS"
    unless_null $P5007, fallback4147
    nqp_get_sc_object $P5010, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["%HANDLERS"]
    unless_null $P5008, fallback4148
    nqp_get_sc_object $P5012, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5011, $P5012
    new $P5013, 'Hash'
    set $P5011["%HANDLERS"], $P5013
    set $P5008, $P5013
  fallback4148:
    unless_null $P5008, vivi_14194149
    die "Contextual %*HANDLERS not found"
    box $P5014, "Contextual %*HANDLERS not found"
    set $P5008, $P5014
  vivi_14194149:
    set $P5007, $P5008
  fallback4147:
    unless $P5007 goto if1418_end4146 
.annotate 'line', 1775
.annotate 'line', 1776
    nqp_get_sc_object $P5018, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback4150
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5015, $P5019
  fallback4150:
    $P5020 = $P5015."new"($P101, "handle" :named("op"))
    set $P101, $P5020
    find_dynamic_lex $P5024, "%*HANDLERS"
    unless_null $P5024, fallback4151
    nqp_get_sc_object $P5027, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["%HANDLERS"]
    unless_null $P5025, fallback4152
    nqp_get_sc_object $P5029, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5028, $P5029
    new $P5030, 'Hash'
    set $P5028["%HANDLERS"], $P5030
    set $P5025, $P5030
  fallback4152:
    unless_null $P5025, vivi_14204153
    die "Contextual %*HANDLERS not found"
    box $P5031, "Contextual %*HANDLERS not found"
    set $P5025, $P5031
  vivi_14204153:
    set $P5024, $P5025
  fallback4151:
    set $P5021, $P5024
    iter $P5023, $P5024
  for_next4154:
    unless $P5023, for_done4156
    shift $P5033, $P5023
  for_redo4155:
    .const 'Sub' $P5032 = 'cuid_449_1360426903.566' 
    capture_lex $P5032
    $P5021 = $P5032($P5033)
    goto for_next4154
  for_done4156:
  if1418_end4146:
.annotate 'line', 1782
    find_lex $P5034, "$BLOCK"
    $P5034."push"($P101)
.annotate 'line', 1783
    find_lex $P5035, "$BLOCK"
    find_lex $P5036, "$/"
    $P5035."node"($P5036)
    find_dynamic_lex $P5037, "%*HANDLERS"
    unless_null $P5037, fallback4159
    nqp_get_sc_object $P5040, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["%HANDLERS"]
    unless_null $P5038, fallback4160
    nqp_get_sc_object $P5042, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5041, $P5042
    new $P5043, 'Hash'
    set $P5041["%HANDLERS"], $P5043
    set $P5038, $P5043
  fallback4160:
    unless_null $P5038, vivi_14224161
    die "Contextual %*HANDLERS not found"
    box $P5044, "Contextual %*HANDLERS not found"
    set $P5038, $P5044
  vivi_14224161:
    set $P5037, $P5038
  fallback4159:
    unless $P5037 goto if1421_end4158 
    find_lex $P5045, "$BLOCK"
    find_dynamic_lex $P5046, "%*HANDLERS"
    unless_null $P5046, fallback4162
    nqp_get_sc_object $P5049, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5048, $P5049
    set $P5047, $P5048["%HANDLERS"]
    unless_null $P5047, fallback4163
    nqp_get_sc_object $P5051, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5050, $P5051
    new $P5052, 'Hash'
    set $P5050["%HANDLERS"], $P5052
    set $P5047, $P5052
  fallback4163:
    unless_null $P5047, vivi_14234164
    die "Contextual %*HANDLERS not found"
    box $P5053, "Contextual %*HANDLERS not found"
    set $P5047, $P5053
  vivi_14234164:
    set $P5046, $P5047
  fallback4162:
    set $P5045["handlers"], $P5046
  if1421_end4158:
.annotate 'line', 1785
    find_dynamic_lex $P5054, "$/"
    find_lex $P5055, "$BLOCK"
    $P5056 = $P5054."!make"($P5055)
    .return ($P5056) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_449_1360426903.566") :anon :lex :outer("cuid_450_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1777
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1778
    find_lex $P5001, "$past"
    $P5002 = _lex_param_0."key"()
    $P5001."push"($P5002)
.annotate 'line', 1779
    find_lex $P5003, "$past"
    $P5004 = _lex_param_0."value"()
    $P5005 = $P5003."push"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_256_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1796
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1797
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4172
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4173
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback4173:
    unless_null $P5002, vivi_14264174
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_14264174:
    set $P5001, $P5002
  fallback4172:
    $P5007 = $P5001."push_lexpad"(_lex_param_1)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_257_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1800
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_451_1360426903.566' 
    capture_lex $P5024 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback4177
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback4178
    nqp_get_sc_object $P5008, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback4178:
    unless_null $P5004, vivi_14284179
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_14284179:
    set $P5003, $P5004
  fallback4177:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback4180
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5011
  fallback4180:
    set $P5001, $P5002["outer_ctx"]
    unless_null $P5001, fallback4181
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5012
  fallback4181:
    defined $I5001, $P5001
    if $I5001 goto unless1427_end4176 
    .const 'Sub' $P5013 = 'cuid_451_1360426903.566' 
    capture_lex $P5013
    $P5014 = $P5013()
  unless1427_end4176:
.annotate 'line', 1822
    nqp_decontainerize $P5015, _lex_param_0
    find_dynamic_lex $P5016, "$*W"
    unless_null $P5016, fallback4237
    nqp_get_sc_object $P5019, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["$W"]
    unless_null $P5017, fallback4238
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5020
  fallback4238:
    unless_null $P5017, vivi_14454239
    die "Contextual $*W not found"
    box $P5021, "Contextual $*W not found"
    set $P5017, $P5021
  vivi_14454239:
    set $P5016, $P5017
  fallback4237:
    $P5022 = $P5016."cur_lexpad"()
    $P5023 = $P5015."SET_BLOCK_OUTER_CTX"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_451_1360426903.566") :anon :lex :outer("cuid_257_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1801
    .lex "$SETTING", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 1804
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4182
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4183
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5006
  fallback4183:
    unless_null $P5003, vivi_14294184
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_14294184:
    set $P5002, $P5003
  fallback4182:
    find_dynamic_lex $P5011, "%*COMPILING"
    unless_null $P5011, fallback4186
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["%COMPILING"]
    unless_null $P5012, fallback4187
    nqp_get_sc_object $P5016, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5015, $P5016
    new $P5017, 'Hash'
    set $P5015["%COMPILING"], $P5017
    set $P5012, $P5017
  fallback4187:
    unless_null $P5012, vivi_14304188
    die "Contextual %*COMPILING not found"
    box $P5018, "Contextual %*COMPILING not found"
    set $P5012, $P5018
  vivi_14304188:
    set $P5011, $P5012
  fallback4186:
    set $P5010, $P5011["%?OPTIONS"]
    unless_null $P5010, fallback4189
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5019
  fallback4189:
    set $P5009, $P5010["setting"]
    unless_null $P5009, fallback4190
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5020
  fallback4190:
    set $P5008, $P5009
    defined $I5001, $P5008
    if $I5001, defor4185
    box $P5021, "NQPCORE"
    set $P5008, $P5021
  defor4185:
    $P5022 = $P5002."load_setting"($P5008)
    set $P101, $P5022
    find_dynamic_lex $P5025, "%*COMPILING"
    unless_null $P5025, fallback4193
    nqp_get_sc_object $P5028, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["%COMPILING"]
    unless_null $P5026, fallback4194
    nqp_get_sc_object $P5030, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5029, $P5030
    new $P5031, 'Hash'
    set $P5029["%COMPILING"], $P5031
    set $P5026, $P5031
  fallback4194:
    unless_null $P5026, vivi_14324195
    die "Contextual %*COMPILING not found"
    box $P5032, "Contextual %*COMPILING not found"
    set $P5026, $P5032
  vivi_14324195:
    set $P5025, $P5026
  fallback4193:
    set $P5024, $P5025["%?OPTIONS"]
    unless_null $P5024, fallback4196
    nqp_get_sc_object $P5033, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5024, $P5033
  fallback4196:
    set $P5023, $P5024["setting"]
    unless_null $P5023, fallback4197
    nqp_get_sc_object $P5034, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5023, $P5034
  fallback4197:
    set $S5001, $P5023
    iseq $I5002, $S5001, "NULL"
    box $P5112, $I5002
    set $P5111, $P5112
    if $I5002 goto unless1431_end4192 
.annotate 'line', 1809
.annotate 'line', 1810
    "&import_HOW_exports"($P101)
    find_dynamic_lex $P5037, "%*COMPILING"
    unless_null $P5037, fallback4200
    nqp_get_sc_object $P5040, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["%COMPILING"]
    unless_null $P5038, fallback4201
    nqp_get_sc_object $P5042, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5041, $P5042
    new $P5043, 'Hash'
    set $P5041["%COMPILING"], $P5043
    set $P5038, $P5043
  fallback4201:
    unless_null $P5038, vivi_14344202
    die "Contextual %*COMPILING not found"
    box $P5044, "Contextual %*COMPILING not found"
    set $P5038, $P5044
  vivi_14344202:
    set $P5037, $P5038
  fallback4200:
    set $P5036, $P5037["%?OPTIONS"]
    unless_null $P5036, fallback4203
    nqp_get_sc_object $P5045, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5036, $P5045
  fallback4203:
    set $P5035, $P5036["old-regex-lib"]
    unless_null $P5035, fallback4204
    nqp_get_sc_object $P5046, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5035, $P5046
  fallback4204:
    unless $P5035 goto if1433_end4199 
.annotate 'line', 1811
.annotate 'line', 1812
    find_dynamic_lex $P5047, "$*W"
    unless_null $P5047, fallback4205
    nqp_get_sc_object $P5050, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$W"]
    unless_null $P5048, fallback4206
    nqp_get_sc_object $P5051, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5048, $P5051
  fallback4206:
    unless_null $P5048, vivi_14354207
    die "Contextual $*W not found"
    box $P5052, "Contextual $*W not found"
    set $P5048, $P5052
  vivi_14354207:
    set $P5047, $P5048
  fallback4205:
    find_dynamic_lex $P5053, "$*GLOBALish"
    unless_null $P5053, fallback4208
    nqp_get_sc_object $P5056, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$GLOBALish"]
    unless_null $P5054, fallback4209
    nqp_get_sc_object $P5057, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5054, $P5057
  fallback4209:
    unless_null $P5054, vivi_14364210
    die "Contextual $*GLOBALish not found"
    box $P5058, "Contextual $*GLOBALish not found"
    set $P5054, $P5058
  vivi_14364210:
    set $P5053, $P5054
  fallback4208:
    $P5059 = $P5047."load_module"("NQPRegex", $P5053)
  if1433_end4199:
    find_dynamic_lex $P5062, "%*COMPILING"
    unless_null $P5062, fallback4213
    nqp_get_sc_object $P5065, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["%COMPILING"]
    unless_null $P5063, fallback4214
    nqp_get_sc_object $P5067, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5066, $P5067
    new $P5068, 'Hash'
    set $P5066["%COMPILING"], $P5068
    set $P5063, $P5068
  fallback4214:
    unless_null $P5063, vivi_14384215
    die "Contextual %*COMPILING not found"
    box $P5069, "Contextual %*COMPILING not found"
    set $P5063, $P5069
  vivi_14384215:
    set $P5062, $P5063
  fallback4213:
    set $P5061, $P5062["%?OPTIONS"]
    unless_null $P5061, fallback4216
    nqp_get_sc_object $P5070, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5061, $P5070
  fallback4216:
    set $P5060, $P5061["no-regex-lib"]
    unless_null $P5060, fallback4217
    nqp_get_sc_object $P5071, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5060, $P5071
  fallback4217:
    set $P5110, $P5060
    if $P5060 goto unless1437_end4212 
.annotate 'line', 1814
.annotate 'line', 1815
    find_dynamic_lex $P5072, "$*W"
    unless_null $P5072, fallback4218
    nqp_get_sc_object $P5075, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5074, $P5075
    set $P5073, $P5074["$W"]
    unless_null $P5073, fallback4219
    nqp_get_sc_object $P5076, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5073, $P5076
  fallback4219:
    unless_null $P5073, vivi_14394220
    die "Contextual $*W not found"
    box $P5077, "Contextual $*W not found"
    set $P5073, $P5077
  vivi_14394220:
    set $P5072, $P5073
  fallback4218:
    find_dynamic_lex $P5078, "$*GLOBALish"
    unless_null $P5078, fallback4221
    nqp_get_sc_object $P5081, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5080, $P5081
    set $P5079, $P5080["$GLOBALish"]
    unless_null $P5079, fallback4222
    nqp_get_sc_object $P5082, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5079, $P5082
  fallback4222:
    unless_null $P5079, vivi_14404223
    die "Contextual $*GLOBALish not found"
    box $P5083, "Contextual $*GLOBALish not found"
    set $P5079, $P5083
  vivi_14404223:
    set $P5078, $P5079
  fallback4221:
    $P5072."load_module"("QRegex", $P5078)
    find_dynamic_lex $P5086, "%*COMPILING"
    unless_null $P5086, fallback4226
    nqp_get_sc_object $P5089, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5088, $P5089
    set $P5087, $P5088["%COMPILING"]
    unless_null $P5087, fallback4227
    nqp_get_sc_object $P5091, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5090, $P5091
    new $P5092, 'Hash'
    set $P5090["%COMPILING"], $P5092
    set $P5087, $P5092
  fallback4227:
    unless_null $P5087, vivi_14424228
    die "Contextual %*COMPILING not found"
    box $P5093, "Contextual %*COMPILING not found"
    set $P5087, $P5093
  vivi_14424228:
    set $P5086, $P5087
  fallback4226:
    set $P5085, $P5086["%?OPTIONS"]
    unless_null $P5085, fallback4229
    nqp_get_sc_object $P5094, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5085, $P5094
  fallback4229:
    set $P5084, $P5085["old-regex-lib"]
    unless_null $P5084, fallback4230
    nqp_get_sc_object $P5095, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5084, $P5095
  fallback4230:
    set $P5109, $P5084
    if $P5084 goto unless1441_end4225 
.annotate 'line', 1816
.annotate 'line', 1817
    find_dynamic_lex $P5096, "$*W"
    unless_null $P5096, fallback4231
    nqp_get_sc_object $P5099, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5098, $P5099
    set $P5097, $P5098["$W"]
    unless_null $P5097, fallback4232
    nqp_get_sc_object $P5100, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5097, $P5100
  fallback4232:
    unless_null $P5097, vivi_14434233
    die "Contextual $*W not found"
    box $P5101, "Contextual $*W not found"
    set $P5097, $P5101
  vivi_14434233:
    set $P5096, $P5097
  fallback4231:
    find_dynamic_lex $P5102, "$*GLOBALish"
    unless_null $P5102, fallback4234
    nqp_get_sc_object $P5105, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5104, $P5105
    set $P5103, $P5104["$GLOBALish"]
    unless_null $P5103, fallback4235
    nqp_get_sc_object $P5106, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5103, $P5106
  fallback4235:
    unless_null $P5103, vivi_14444236
    die "Contextual $*GLOBALish not found"
    box $P5107, "Contextual $*GLOBALish not found"
    set $P5103, $P5107
  vivi_14444236:
    set $P5102, $P5103
  fallback4234:
    $P5108 = $P5096."load_module"("NQPP6QRegex", $P5102)
    set $P5109, $P5108
  unless1441_end4225:
    set $P5110, $P5109
  unless1437_end4212:
    set $P5111, $P5110
  unless1431_end4192:
    .return ($P5111) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_258_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1834
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1835
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."CTXSAVE"()
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_259_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1840
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 1841
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4240
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4241
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5006
  fallback4241:
    unless_null $P5003, vivi_14464242
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_14464242:
    set $P5002, $P5003
  fallback4240:
    unless_null _lex_param_1, fallback4243
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5009
  fallback4243:
    set $P5008, _lex_param_1["name"]
    unless_null $P5008, fallback4244
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5010
  fallback4244:
    set $S5001, $P5008
    find_dynamic_lex $P5011, "$*GLOBALish"
    unless_null $P5011, fallback4245
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$GLOBALish"]
    unless_null $P5012, fallback4246
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5015
  fallback4246:
    unless_null $P5012, vivi_14474247
    die "Contextual $*GLOBALish not found"
    box $P5016, "Contextual $*GLOBALish not found"
    set $P5012, $P5016
  vivi_14474247:
    set $P5011, $P5012
  fallback4245:
    $P5017 = $P5002."load_module"($S5001, $P5011)
    set $P101, $P5017
    defined $I5001, $P101
    unless $I5001 goto if1448_end4249 
.annotate 'line', 1842
    exists $I5002, $P101["EXPORT"]
    set $I5004, $I5002
    unless $I5002 goto if1450_end4253 
    set $P5019, $P101["EXPORT"]
    unless_null $P5019, fallback4254
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5019, $P5020
  fallback4254:
    get_who $P5018, $P5019
    exists $I5003, $P5018["DEFAULT"]
    set $I5004, $I5003
  if1450_end4253:
    unless $I5004 goto if1449_end4251 
.annotate 'line', 1843
    find_dynamic_lex $P5021, "$*W"
    unless_null $P5021, fallback4255
    nqp_get_sc_object $P5024, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["$W"]
    unless_null $P5022, fallback4256
    nqp_get_sc_object $P5025, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5022, $P5025
  fallback4256:
    unless_null $P5022, vivi_14514257
    die "Contextual $*W not found"
    box $P5026, "Contextual $*W not found"
    set $P5022, $P5026
  vivi_14514257:
    set $P5021, $P5022
  fallback4255:
    set $P5030, $P101["EXPORT"]
    unless_null $P5030, fallback4258
    nqp_get_sc_object $P5031, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5030, $P5031
  fallback4258:
    get_who $P5029, $P5030
    set $P5028, $P5029["DEFAULT"]
    unless_null $P5028, fallback4259
    nqp_get_sc_object $P5032, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5028, $P5032
  fallback4259:
    get_who $P5027, $P5028
    $P5033 = $P5021."import"($P5027)
  if1449_end4251:
.annotate 'line', 1846
    $P5034 = "&import_HOW_exports"($P101)
  if1448_end4249:
.annotate 'line', 1848
    nqp_get_sc_object $P5038, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Stmts"]
    unless_null $P5035, fallback4260
    nqp_get_sc_object $P5039, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5035, $P5039
  fallback4260:
    $P5040 = $P5035."new"()
    $P5041 = _lex_param_1."!make"($P5040)
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_260_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1851
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_452_1360426903.566' 
    capture_lex $P5030 
    .lex "$count", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback4261
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5004
  fallback4261:
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4262
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5005
  fallback4262:
    set $N5002, $P5003
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5006, $N5001
    set $P101, $P5006
.annotate 'line', 1853
    unless_null _lex_param_1, fallback4263
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5009
  fallback4263:
    set $P5008, _lex_param_1["xblock"]
    unless_null $P5008, fallback4264
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5010
  fallback4264:
    set $I5001, $P101
    set $P5007, $P5008[$I5001]
    unless_null $P5007, fallback4265
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5011
  fallback4265:
    $P5012 = $P5007."ast"()
    $P5013 = "&xblock_immediate"($P5012)
    set $P102, $P5013
    unless_null _lex_param_1, fallback4268
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5015
  fallback4268:
    set $P5014, _lex_param_1["else"]
    unless_null $P5014, fallback4269
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5016
  fallback4269:
    unless $P5014 goto if1452_end4267 
.annotate 'line', 1854
.annotate 'line', 1855
    unless_null _lex_param_1, fallback4270
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5019
  fallback4270:
    set $P5018, _lex_param_1["else"]
    unless_null $P5018, fallback4271
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5018, $P5020
  fallback4271:
    set $P5017, $P5018[0]
    unless_null $P5017, fallback4272
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5021
  fallback4272:
    $P5022 = $P5017."ast"()
    $P5023 = "&block_immediate"($P5022)
    $P5024 = $P102."push"($P5023)
  if1452_end4267:
  while1453_test4273:
    set $N5004, $P101
    set $N5005, 0
    isgt $I5002, $N5004, $N5005
    box $P5028, $I5002
    set $P5027, $P5028
    unless $I5002 goto while1453_done4277 
  while1453_redo4275:
    .const 'Sub' $P5025 = 'cuid_452_1360426903.566' 
    capture_lex $P5025
    $P5026 = $P5025()
    set $P5027, $P5026
    goto while1453_test4273 
  while1453_done4277:
.annotate 'line', 1864
    $P5029 = _lex_param_1."!make"($P102)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_452_1360426903.566") :anon :lex :outer("cuid_260_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1858
    .lex "$else", $P101 
    .local pmc tmp_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    find_lex $P5002, "$count"
    set tmp_1, $P5002
    set $N5002, tmp_1
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$count", $P5003
    find_lex $P5002, "$past"
    set $P101, $P5002
.annotate 'line', 1861
    find_lex $P5005, "$/"
    unless_null $P5005, fallback4278
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5005, $P5006
  fallback4278:
    set $P5004, $P5005["xblock"]
    unless_null $P5004, fallback4279
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5007
  fallback4279:
    find_lex $P5008, "$count"
    set $I5001, $P5008
    set $P5003, $P5004[$I5001]
    unless_null $P5003, fallback4280
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5009
  fallback4280:
    $P5010 = $P5003."ast"()
    $P5011 = "&xblock_immediate"($P5010)
    store_lex "$past", $P5011
.annotate 'line', 1862
    find_lex $P5012, "$past"
    $P5013 = $P5012."push"($P101)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_261_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1867
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 1868
    unless_null _lex_param_1, fallback4281
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5003
  fallback4281:
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4282
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5004
  fallback4282:
    $P5005 = $P5002."ast"()
    $P5006 = "&xblock_immediate"($P5005)
    set $P101, $P5006
.annotate 'line', 1869
    $P101."op"("unless")
.annotate 'line', 1870
    $P5007 = _lex_param_1."!make"($P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_262_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1873
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 1874
    unless_null _lex_param_1, fallback4283
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5003
  fallback4283:
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4284
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5004
  fallback4284:
    $P5005 = $P5002."ast"()
    $P5006 = "&xblock_immediate"($P5005)
    set $P101, $P5006
.annotate 'line', 1875
    unless_null _lex_param_1, fallback4285
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5008
  fallback4285:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback4286
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5009
  fallback4286:
    set $S5001, $P5007
    $P101."op"($S5001)
    find_dynamic_lex $P5010, "$*CONTROL_USED"
    unless_null $P5010, fallback4289
    nqp_get_sc_object $P5013, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$CONTROL_USED"]
    unless_null $P5011, fallback4290
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5014
  fallback4290:
    unless_null $P5011, vivi_14554291
    die "Contextual $*CONTROL_USED not found"
    box $P5015, "Contextual $*CONTROL_USED not found"
    set $P5011, $P5015
  vivi_14554291:
    set $P5010, $P5011
  fallback4289:
    if $P5010 goto unless1454_end4288 
.annotate 'line', 1876
.annotate 'line', 1877
    nqp_get_sc_object $P5019, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["IVal"]
    unless_null $P5016, fallback4292
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5016, $P5020
  fallback4292:
    $P5021 = $P5016."new"(1 :named("value"), "nohandler" :named("named"))
    $P5022 = $P101."push"($P5021)
  unless1454_end4288:
.annotate 'line', 1879
    $P5023 = _lex_param_1."!make"($P101)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_263_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1882
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback4293
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5004
  fallback4293:
    set $P5003, _lex_param_1["wu"]
    unless_null $P5003, fallback4294
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5005
  fallback4294:
    set $S5002, $P5003
    concat $S5001, "repeat_", $S5002
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback4297
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5008
  fallback4297:
    set $P5007, _lex_param_1["xblock"]
    unless_null $P5007, fallback4298
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5009
  fallback4298:
    unless $P5007 goto if1456_else4295 
.annotate 'line', 1885
.annotate 'line', 1886
    unless_null _lex_param_1, fallback4299
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5011
  fallback4299:
    set $P5010, _lex_param_1["xblock"]
    unless_null $P5010, fallback4300
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5012
  fallback4300:
    $P5013 = $P5010."ast"()
    $P5014 = "&xblock_immediate"($P5013)
    set $P102, $P5014
.annotate 'line', 1887
    $P5015 = $P102."op"($P101)
    goto if1456_end4296
  if1456_else4295:
.annotate 'line', 1889
.annotate 'line', 1890
    nqp_get_sc_object $P5019, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Op"]
    unless_null $P5016, fallback4301
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5016, $P5020
  fallback4301:
    unless_null _lex_param_1, fallback4302
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5022
  fallback4302:
    set $P5021, _lex_param_1["EXPR"]
    unless_null $P5021, fallback4303
    nqp_get_sc_object $P5023, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5021, $P5023
  fallback4303:
    $P5024 = $P5021."ast"()
    unless_null _lex_param_1, fallback4304
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5026
  fallback4304:
    set $P5025, _lex_param_1["pblock"]
    unless_null $P5025, fallback4305
    nqp_get_sc_object $P5027, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5025, $P5027
  fallback4305:
    $P5028 = $P5025."ast"()
    $P5029 = "&block_immediate"($P5028)
    $P5030 = $P5016."new"($P5024, $P5029, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P102, $P5030
  if1456_end4296:
    find_dynamic_lex $P5031, "$*CONTROL_USED"
    unless_null $P5031, fallback4308
    nqp_get_sc_object $P5034, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$CONTROL_USED"]
    unless_null $P5032, fallback4309
    nqp_get_sc_object $P5035, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5032, $P5035
  fallback4309:
    unless_null $P5032, vivi_14584310
    die "Contextual $*CONTROL_USED not found"
    box $P5036, "Contextual $*CONTROL_USED not found"
    set $P5032, $P5036
  vivi_14584310:
    set $P5031, $P5032
  fallback4308:
    if $P5031 goto unless1457_end4307 
.annotate 'line', 1893
.annotate 'line', 1894
    nqp_get_sc_object $P5040, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["IVal"]
    unless_null $P5037, fallback4311
    nqp_get_sc_object $P5041, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5037, $P5041
  fallback4311:
    $P5042 = $P5037."new"(1 :named("value"), "nohandler" :named("named"))
    $P5043 = $P102."push"($P5042)
  unless1457_end4307:
.annotate 'line', 1896
    $P5044 = _lex_param_1."!make"($P102)
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_264_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1899
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
.annotate 'line', 1900
    unless_null _lex_param_1, fallback4312
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5004
  fallback4312:
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4313
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5005
  fallback4313:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 1901
    $P101."op"("for")
    set $P5007, $P101[1]
    unless_null $P5007, fallback4314
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5008
  fallback4314:
    set $P102, $P5007
.annotate 'line', 1903
    $P5009 = $P102."arity"()
    if $P5009 goto unless1459_end4316 
.annotate 'line', 1904
    set $P5010, $P102[0]
    unless_null $P5010, fallback4317
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5011
  fallback4317:
    nqp_get_sc_object $P5015, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback4318
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5016
  fallback4318:
    $P5017 = $P5012."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5010."push"($P5017)
.annotate 'line', 1905
    $P102."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1906
    $P5018 = $P102."arity"(1)
  unless1459_end4316:
.annotate 'line', 1908
    $P102."blocktype"("immediate")
    find_dynamic_lex $P5019, "$*CONTROL_USED"
    unless_null $P5019, fallback4321
    nqp_get_sc_object $P5022, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$CONTROL_USED"]
    unless_null $P5020, fallback4322
    nqp_get_sc_object $P5023, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5023
  fallback4322:
    unless_null $P5020, vivi_14614323
    die "Contextual $*CONTROL_USED not found"
    box $P5024, "Contextual $*CONTROL_USED not found"
    set $P5020, $P5024
  vivi_14614323:
    set $P5019, $P5020
  fallback4321:
    if $P5019 goto unless1460_end4320 
.annotate 'line', 1909
.annotate 'line', 1910
    nqp_get_sc_object $P5028, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["IVal"]
    unless_null $P5025, fallback4324
    nqp_get_sc_object $P5029, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5025, $P5029
  fallback4324:
    $P5030 = $P5025."new"(1 :named("value"), "nohandler" :named("named"))
    $P5031 = $P101."push"($P5030)
  unless1460_end4320:
.annotate 'line', 1912
    $P5032 = _lex_param_1."!make"($P101)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_265_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1915
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 1916
    unless_null _lex_param_1, fallback4325
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5003
  fallback4325:
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4326
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5004
  fallback4326:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1917
    "&set_block_handler"(_lex_param_1, $P101, "CATCH")
.annotate 'line', 1918
    $P5006 = "&default_for"("$")
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_266_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1921
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 1922
    unless_null _lex_param_1, fallback4327
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5003
  fallback4327:
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4328
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5004
  fallback4328:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1923
    "&set_block_handler"(_lex_param_1, $P101, "CONTROL")
.annotate 'line', 1924
    $P5006 = "&default_for"("$")
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_267_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1958
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1959
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4329
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4330
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback4330:
    unless_null $P5002, vivi_14624331
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_14624331:
    set $P5001, $P5002
  fallback4329:
    unless_null _lex_param_1, fallback4332
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5008
  fallback4332:
    set $P5007, _lex_param_1["blorst"]
    unless_null $P5007, fallback4333
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5009
  fallback4333:
    $P5010 = $P5007."ast"()
    $P5011 = $P5001."run_begin_block"($P5010)
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_268_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1962
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1963
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4334
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4335
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback4335:
    unless_null $P5002, vivi_14634336
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_14634336:
    set $P5001, $P5002
  fallback4334:
    $P5007 = $P5001."cur_lexpad"()
    unless_null _lex_param_1, fallback4337
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5009
  fallback4337:
    set $P5008, _lex_param_1["blorst"]
    unless_null $P5008, fallback4338
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5010
  fallback4338:
    $P5011 = $P5008."ast"()
    $P5007."push"($P5011)
.annotate 'line', 1964
    nqp_get_sc_object $P5015, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Stmts"]
    unless_null $P5012, fallback4339
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5016
  fallback4339:
    $P5017 = $P5012."new"()
    $P5018 = _lex_param_1."!make"($P5017)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_269_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1967
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_4340
    .lex "RETURN", $P102
.annotate 'line', 1968
    unless_null _lex_param_1, fallback4342
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5003
  fallback4342:
    set $P5002, _lex_param_1["blorst"]
    unless_null $P5002, fallback4343
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5004
  fallback4343:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
    nqp_get_sc_object $P5009, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback4346
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5010
  fallback4346:
    type_check $I5001, $P101, $P5006
    unless $I5001 goto if1464_end4345 
.annotate 'line', 1969
    set $P5011, $P101["handlers"]
    unless_null $P5011, fallback4351
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5012
  fallback4351:
    set $P5015, $P5011
    unless $P5011 goto if1466_end4350 
    set $P5013, $P101["handlers"]
    unless_null $P5013, fallback4352
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5014
  fallback4352:
    exists $I5002, $P5013["CATCH"]
    box $P5016, $I5002
    set $P5015, $P5016
  if1466_end4350:
    unless $P5015 goto if1465_else4347 
.annotate 'line', 1970
.annotate 'line', 1971
    _lex_param_1."!make"($P101)
    find_lex $P5017, "RETURN"
    $P5018 = $P5017(1)
    set $P5020, $P5018
    goto if1465_end4348
  if1465_else4347:
.annotate 'line', 1974
.annotate 'line', 1975
    $P5019 = $P101."blocktype"("immediate")
    set $P5020, $P5019
  if1465_end4348:
  if1464_end4345:
.annotate 'line', 1978
    nqp_get_sc_object $P5024, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback4353
    nqp_get_sc_object $P5025, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5021, $P5025
  fallback4353:
.annotate 'line', 1982
    nqp_get_sc_object $P5029, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Stmts"]
    unless_null $P5026, fallback4354
    nqp_get_sc_object $P5030, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5026, $P5030
  fallback4354:
.annotate 'line', 1983
    nqp_get_sc_object $P5034, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Op"]
    unless_null $P5031, fallback4355
    nqp_get_sc_object $P5035, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5031, $P5035
  fallback4355:
.annotate 'line', 1985
    nqp_get_sc_object $P5039, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback4356
    nqp_get_sc_object $P5040, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5036, $P5040
  fallback4356:
    $P5041 = $P5036."new"("exception" :named("op"))
.annotate 'line', 1986
    nqp_get_sc_object $P5045, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["SVal"]
    unless_null $P5042, fallback4357
    nqp_get_sc_object $P5046, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5042, $P5046
  fallback4357:
    $P5047 = $P5042."new"("handled" :named("value"))
.annotate 'line', 1987
    nqp_get_sc_object $P5051, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["IVal"]
    unless_null $P5048, fallback4358
    nqp_get_sc_object $P5052, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5048, $P5052
  fallback4358:
    $P5053 = $P5048."new"(1 :named("value"))
    $P5054 = $P5031."new"($P5041, $P5047, $P5053, "bindkey_i" :named("op"))
.annotate 'line', 1989
    $P5055 = "&default_for"("$")
    $P5056 = $P5026."new"($P5054, $P5055)
    $P5057 = $P5021."new"($P101, "CATCH", $P5056, "handle" :named("op"))
    $P5058 = _lex_param_1."!make"($P5057)
    goto lexotic_4341
  lexotic_4340:
    .get_results ($P5058)
  lexotic_4341:
    .return ($P5058) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_270_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1993
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1994
    unless_null _lex_param_1, fallback4361
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4361:
    set $P5001, _lex_param_1["block"]
    unless_null $P5001, fallback4362
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4362:
    unless $P5001 goto if1467_else4359 
.annotate 'line', 1995
    unless_null _lex_param_1, fallback4363
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5005
  fallback4363:
    set $P5004, _lex_param_1["block"]
    unless_null $P5004, fallback4364
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5006
  fallback4364:
    $P5007 = $P5004."ast"()
    $P5008 = "&block_immediate"($P5007)
    set $P5013, $P5008
    goto if1467_end4360
  if1467_else4359:
.annotate 'line', 1996
    unless_null _lex_param_1, fallback4365
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5010
  fallback4365:
    set $P5009, _lex_param_1["statement"]
    unless_null $P5009, fallback4366
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5011
  fallback4366:
    $P5012 = $P5009."ast"()
    set $P5013, $P5012
  if1467_end4360:
    $P5014 = _lex_param_1."!make"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_271_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2001
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4367
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4367:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4368
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4368:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_272_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2002
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4369
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4369:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4370
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4370:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_273_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2004
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4371
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4371:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4372
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4372:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_274_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2005
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4373
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4373:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4374
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4374:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_275_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2009
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4375
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4375:
    set $P5001, _lex_param_1["fatarrow"]
    unless_null $P5001, fallback4376
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4376:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_276_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2010
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4377
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4377:
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback4378
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4378:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_277_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2011
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4379
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4379:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4380
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4380:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_278_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2012
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4381
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4381:
    set $P5001, _lex_param_1["package_declarator"]
    unless_null $P5001, fallback4382
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4382:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_279_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2013
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4383
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4383:
    set $P5001, _lex_param_1["scope_declarator"]
    unless_null $P5001, fallback4384
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4384:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_280_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2014
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4385
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4385:
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4386
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4386:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_281_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2015
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4387
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4387:
    set $P5001, _lex_param_1["regex_declarator"]
    unless_null $P5001, fallback4388
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4388:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_282_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2016
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4389
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4389:
    set $P5001, _lex_param_1["statement_prefix"]
    unless_null $P5001, fallback4390
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4390:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_283_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2017
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2018
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback4391
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback4391:
    unless_null _lex_param_1, fallback4392
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5007
  fallback4392:
    set $P5006, _lex_param_1["pblock"]
    unless_null $P5006, fallback4393
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5008
  fallback4393:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "takeclosure" :named("op"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_284_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2021
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 2022
    unless_null _lex_param_1, fallback4394
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5003
  fallback4394:
    set $P5002, _lex_param_1["val"]
    unless_null $P5002, fallback4395
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5004
  fallback4395:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2023
    unless_null _lex_param_1, fallback4396
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5007
  fallback4396:
    set $P5006, _lex_param_1["key"]
    unless_null $P5006, fallback4397
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5008
  fallback4397:
    $P5009 = $P5006."Str"()
    $P101."named"($P5009)
.annotate 'line', 2024
    $P5010 = _lex_param_1."!make"($P101)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_285_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2027
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5021 = 'cuid_453_1360426903.566' 
    capture_lex $P5021 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4400
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4400:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4401
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4401:
    unless $P5001 goto if1468_else4398 
.annotate 'line', 2028
.annotate 'line', 2029
    unless_null _lex_param_1, fallback4402
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5005
  fallback4402:
    set $P5004, _lex_param_1["variable"]
    unless_null $P5004, fallback4403
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5006
  fallback4403:
    $P5007 = $P5004."ast"()
    unless_null _lex_param_1, fallback4404
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5010
  fallback4404:
    set $P5009, _lex_param_1["variable"]
    unless_null $P5009, fallback4405
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5011
  fallback4405:
    set $P5008, $P5009["desigilname"]
    unless_null $P5008, fallback4406
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5012
  fallback4406:
    set $S5001, $P5008
    $P5007."named"($S5001)
.annotate 'line', 2030
    unless_null _lex_param_1, fallback4407
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5014
  fallback4407:
    set $P5013, _lex_param_1["variable"]
    unless_null $P5013, fallback4408
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5015
  fallback4408:
    $P5016 = $P5013."ast"()
    $P5017 = _lex_param_1."!make"($P5016)
    set $P5020, $P5017
    goto if1468_end4399
  if1468_else4398:
    .const 'Sub' $P5018 = 'cuid_453_1360426903.566' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5020, $P5019
  if1468_end4399:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_453_1360426903.566") :anon :lex :outer("cuid_285_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2031
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback4411
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5004
  fallback4411:
    set $P5002, $P5003["circumfix"]
    unless_null $P5002, fallback4412
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback4412:
    unless $P5002 goto if1469_else4409 
.annotate 'line', 2033
    find_lex $P5008, "$/"
    unless_null $P5008, fallback4413
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5009
  fallback4413:
    set $P5007, $P5008["circumfix"]
    unless_null $P5007, fallback4414
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5010
  fallback4414:
    set $P5006, $P5007[0]
    unless_null $P5006, fallback4415
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5011
  fallback4415:
    $P5012 = $P5006."ast"()
    set $P5023, $P5012
    goto if1469_end4410
  if1469_else4409:
.annotate 'line', 2034
    nqp_get_sc_object $P5016, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["IVal"]
    unless_null $P5013, fallback4416
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5017
  fallback4416:
    find_lex $P5019, "$/"
    unless_null $P5019, fallback4417
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5019, $P5020
  fallback4417:
    set $P5018, $P5019["not"]
    unless_null $P5018, fallback4418
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5018, $P5021
  fallback4418:
    isfalse $I5001, $P5018
    $P5022 = $P5013."new"($I5001 :named("value"))
    set $P5023, $P5022
  if1469_end4410:
    set $P101, $P5023
.annotate 'line', 2035
    find_lex $P5025, "$/"
    unless_null $P5025, fallback4419
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5025, $P5026
  fallback4419:
    set $P5024, $P5025["identifier"]
    unless_null $P5024, fallback4420
    nqp_get_sc_object $P5027, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5024, $P5027
  fallback4420:
    set $S5001, $P5024
    $P101."named"($S5001)
.annotate 'line', 2036
    find_dynamic_lex $P5028, "$/"
    $P5029 = $P5028."!make"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_286_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2040
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5020 = 'cuid_455_1360426903.566' 
    capture_lex $P5020 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    unless_null _lex_param_1, fallback4423
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5003
  fallback4423:
    set $P5002, _lex_param_1["postcircumfix"]
    unless_null $P5002, fallback4424
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5004
  fallback4424:
    unless $P5002 goto if1470_else4421 
.annotate 'line', 2042
.annotate 'line', 2043
    unless_null _lex_param_1, fallback4425
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5006
  fallback4425:
    set $P5005, _lex_param_1["postcircumfix"]
    unless_null $P5005, fallback4426
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5005, $P5007
  fallback4426:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
.annotate 'line', 2044
    nqp_get_sc_object $P5012, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["VarWithFallback"]
    unless_null $P5009, fallback4427
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5013
  fallback4427:
.annotate 'line', 2045
    $P5014 = "&default_for"("$")
    $P5015 = $P5009."new"("$/" :named("name"), "lexical" :named("scope"), $P5014 :named("fallback"))
    $P5016 = $P101."unshift"($P5015)
    goto if1470_end4422
  if1470_else4421:
    .const 'Sub' $P5017 = 'cuid_455_1360426903.566' 
    capture_lex $P5017
    $P5018 = $P5017()
  if1470_end4422:
.annotate 'line', 2126
    $P5019 = _lex_param_1."!make"($P101)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_455_1360426903.566") :anon :lex :outer("cuid_286_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2048
    .const 'Sub' $P5065 = 'cuid_454_1360426903.566' 
    capture_lex $P5065 
    .const 'Sub' $P5065 = 'cuid_458_1360426903.566' 
    capture_lex $P5065 
    .const 'Sub' $P5065 = 'cuid_459_1360426903.566' 
    capture_lex $P5065 
    .const 'Sub' $P5065 = 'cuid_460_1360426903.566' 
    capture_lex $P5065 
    .lex "@name", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 2049
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5004, $P5005, "NQP"
    get_who $P5003, $P5004
    set $P5002, $P5003["Compiler"]
    unless_null $P5002, fallback4428
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback4428:
    find_lex $P5007, "$/"
    set $S5001, $P5007
    $P5008 = $P5002."parse_name"($S5001)
    set $P101, $P5008
    set $N5001, $P101
    set $N5002, 1
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1471_else4429 
.annotate 'line', 2050
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4433
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5011
  fallback4433:
    set $P5009, $P5010["twigil"]
    unless_null $P5009, fallback4434
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5012
  fallback4434:
    unless $P5009 goto if1472_end4432 
.annotate 'line', 2051
.annotate 'line', 2052
    find_lex $P5013, "$/"
    $P5014 = $P5013."CURSOR"()
    $P5015 = $P5014."panic"("Twigil not allowed on multi-part name")
  if1472_end4432:
.annotate 'line', 2054
    find_lex $P5016, "$/"
    $P5017 = "&lexical_package_lookup"($P101, $P5016)
    store_lex "$past", $P5017
    set $P5064, $P5017
    goto if1471_end4430
  if1471_else4429:
    find_lex $P5020, "$/"
    unless_null $P5020, fallback4437
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5021
  fallback4437:
    set $P5019, $P5020["twigil"]
    unless_null $P5019, fallback4438
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5019, $P5022
  fallback4438:
    set $P5018, $P5019[0]
    unless_null $P5018, fallback4439
    nqp_get_sc_object $P5023, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5018, $P5023
  fallback4439:
    set $S5002, $P5018
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1473_else4435 
    .const 'Sub' $P5024 = 'cuid_454_1360426903.566' 
    capture_lex $P5024
    $P5025 = $P5024()
    set $P5063, $P5025
    goto if1473_end4436
  if1473_else4435:
    find_lex $P5028, "$/"
    unless_null $P5028, fallback4450
    nqp_get_sc_object $P5029, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5028, $P5029
  fallback4450:
    set $P5027, $P5028["twigil"]
    unless_null $P5027, fallback4451
    nqp_get_sc_object $P5030, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5027, $P5030
  fallback4451:
    set $P5026, $P5027[0]
    unless_null $P5026, fallback4452
    nqp_get_sc_object $P5031, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5026, $P5031
  fallback4452:
    set $S5003, $P5026
    iseq $I5003, $S5003, "!"
    unless $I5003 goto if1474_else4448 
    .const 'Sub' $P5032 = 'cuid_458_1360426903.566' 
    capture_lex $P5032
    $P5033 = $P5032()
    set $P5062, $P5033
    goto if1474_end4449
  if1474_else4448:
    find_lex $P5035, "$/"
    unless_null $P5035, fallback4492
    nqp_get_sc_object $P5036, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5035, $P5036
  fallback4492:
    set $P5034, $P5035["semilist"]
    unless_null $P5034, fallback4493
    nqp_get_sc_object $P5037, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5034, $P5037
  fallback4493:
    unless $P5034 goto if1486_else4490 
    .const 'Sub' $P5038 = 'cuid_459_1360426903.566' 
    capture_lex $P5038
    $P5039 = $P5038()
    set $P5061, $P5039
    goto if1486_end4491
  if1486_else4490:
.annotate 'line', 2111
    find_dynamic_lex $P5040, "$*W"
    unless_null $P5040, fallback4507
    nqp_get_sc_object $P5043, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5042, $P5043
    set $P5041, $P5042["$W"]
    unless_null $P5041, fallback4508
    nqp_get_sc_object $P5044, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5041, $P5044
  fallback4508:
    unless_null $P5041, vivi_14904509
    die "Contextual $*W not found"
    box $P5045, "Contextual $*W not found"
    set $P5041, $P5045
  vivi_14904509:
    set $P5040, $P5041
  fallback4507:
    set $P5046, $P101[0]
    unless_null $P5046, fallback4510
    nqp_get_sc_object $P5047, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5046, $P5047
  fallback4510:
    set $S5004, $P5046
    $P5048 = $P5040."is_package"($S5004)
    unless $P5048 goto if1489_else4505 
.annotate 'line', 2112
    find_lex $P5049, "$/"
    $P5050 = "&lexical_package_lookup"($P101, $P5049)
    store_lex "$past", $P5050
.annotate 'line', 2113
    find_lex $P5051, "$past"
    find_lex $P5053, "$/"
    unless_null $P5053, fallback4511
    nqp_get_sc_object $P5054, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5053, $P5054
  fallback4511:
    set $P5052, $P5053["sigil"]
    unless_null $P5052, fallback4512
    nqp_get_sc_object $P5055, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5052, $P5055
  fallback4512:
    $P5056 = "&default_for"($P5052)
    $P5057 = $P5051."fallback"($P5056)
    set $P5060, $P5057
    goto if1489_end4506
  if1489_else4505:
    .const 'Sub' $P5058 = 'cuid_460_1360426903.566' 
    capture_lex $P5058
    $P5059 = $P5058()
    set $P5060, $P5059
  if1489_end4506:
    set $P5061, $P5060
  if1486_end4491:
    set $P5062, $P5061
  if1474_end4449:
    set $P5063, $P5062
  if1473_end4436:
    set $P5064, $P5063
  if1471_end4430:
    .return ($P5064) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_454_1360426903.566") :anon :lex :outer("cuid_455_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2056
    .lex "$global_fallback", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 2057
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback4440
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback4440:
.annotate 'line', 2059
    new $P5007, 'ResizablePMCArray'
    box $P5008, "GLOBAL"
    push $P5007, $P5008
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4441
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5011
  fallback4441:
    set $P5009, $P5010["sigil"]
    unless_null $P5009, fallback4442
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5012
  fallback4442:
    set $S5002, $P5009
    find_lex $P5014, "$/"
    unless_null $P5014, fallback4443
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5015
  fallback4443:
    set $P5013, $P5014["desigilname"]
    unless_null $P5013, fallback4444
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5016
  fallback4444:
    set $S5003, $P5013
    concat $S5001, $S5002, $S5003
    box $P5017, $S5001
    push $P5007, $P5017
    find_lex $P5018, "$/"
    $P5019 = "&lexical_package_lookup"($P5007, $P5018)
.annotate 'line', 2060
    nqp_get_sc_object $P5023, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback4445
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5024
  fallback4445:
.annotate 'line', 2062
    nqp_get_sc_object $P5028, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["SVal"]
    unless_null $P5025, fallback4446
    nqp_get_sc_object $P5029, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5025, $P5029
  fallback4446:
    find_lex $P5030, "$/"
    set $S5006, $P5030
    concat $S5005, "Contextual ", $S5006
    concat $S5004, $S5005, " not found"
    $P5031 = $P5025."new"($S5004 :named("value"))
    $P5032 = $P5020."new"($P5031, "die_s" :named("op"))
    $P5033 = $P5002."new"($P5019, $P5032, "ifnull" :named("op"))
    set $P101, $P5033
.annotate 'line', 2064
    nqp_get_sc_object $P5037, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["VarWithFallback"]
    unless_null $P5034, fallback4447
    nqp_get_sc_object $P5038, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5034, $P5038
  fallback4447:
.annotate 'line', 2065
    find_lex $P5039, "@name"
    $P5040 = $P5039."pop"()
    set $S5007, $P5040
    $P5041 = $P5034."new"($S5007 :named("name"), "contextual" :named("scope"), $P101 :named("fallback"))
    store_lex "$past", $P5041
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_458_1360426903.566") :anon :lex :outer("cuid_455_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2069
    .const 'Sub' $P5064 = 'cuid_457_1360426903.566' 
    capture_lex $P5064 
    .lex "$name", $P101 
    .lex "$ch", $P102 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
.annotate 'line', 2070
    find_lex $P5003, "@name"
    $P5004 = $P5003."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    find_dynamic_lex $P5006, "$*PKGDECL"
    unless_null $P5006, fallback4455
    nqp_get_sc_object $P5009, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$PKGDECL"]
    unless_null $P5007, fallback4456
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5010
  fallback4456:
    unless_null $P5007, vivi_14764457
    die "Contextual $*PKGDECL not found"
    box $P5011, "Contextual $*PKGDECL not found"
    set $P5007, $P5011
  vivi_14764457:
    set $P5006, $P5007
  fallback4455:
    set $S5002, $P5006
    iseq $I5001, $S5002, "role"
    unless $I5001 goto if1475_else4453 
.annotate 'line', 2072
.annotate 'line', 2073
    nqp_get_sc_object $P5015, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback4458
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5016
  fallback4458:
    $P5017 = $P5012."new"("$?CLASS" :named("name"), "lexical" :named("scope"))
    set $P102, $P5017
.annotate 'line', 2074
    find_dynamic_lex $P5018, "$*PACKAGE"
    unless_null $P5018, fallback4459
    nqp_get_sc_object $P5021, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$PACKAGE"]
    unless_null $P5019, fallback4460
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5019, $P5022
  fallback4460:
    unless_null $P5019, vivi_14774461
    die "Contextual $*PACKAGE not found"
    box $P5023, "Contextual $*PACKAGE not found"
    set $P5019, $P5023
  vivi_14774461:
    set $P5018, $P5019
  fallback4459:
    $P5024 = $P102."set_compile_time_value"($P5018)
    goto if1475_end4454
  if1475_else4453:
.annotate 'line', 2076
.annotate 'line', 2077
    nqp_get_sc_object $P5028, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["WVal"]
    unless_null $P5025, fallback4462
    nqp_get_sc_object $P5029, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5025, $P5029
  fallback4462:
    find_dynamic_lex $P5030, "$*PACKAGE"
    unless_null $P5030, fallback4463
    nqp_get_sc_object $P5033, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5032, $P5033
    set $P5031, $P5032["$PACKAGE"]
    unless_null $P5031, fallback4464
    nqp_get_sc_object $P5034, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5031, $P5034
  fallback4464:
    unless_null $P5031, vivi_14784465
    die "Contextual $*PACKAGE not found"
    box $P5035, "Contextual $*PACKAGE not found"
    set $P5031, $P5035
  vivi_14784465:
    set $P5030, $P5031
  fallback4463:
    $P5036 = $P5025."new"($P5030 :named("value"))
    set $P102, $P5036
  if1475_end4454:
.annotate 'line', 2079
    nqp_get_sc_object $P5040, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Var"]
    unless_null $P5037, fallback4466
    nqp_get_sc_object $P5041, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5037, $P5041
  fallback4466:
.annotate 'line', 2081
    nqp_get_sc_object $P5045, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Op"]
    unless_null $P5042, fallback4467
    nqp_get_sc_object $P5046, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5042, $P5046
  fallback4467:
.annotate 'line', 2082
    nqp_get_sc_object $P5050, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["Var"]
    unless_null $P5047, fallback4468
    nqp_get_sc_object $P5051, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5047, $P5051
  fallback4468:
    $P5052 = $P5047."new"("self" :named("name"), "lexical" :named("scope"))
    $P5053 = $P5042."new"($P5052, "decont" :named("op"))
    $P5054 = $P5037."new"($P5053, $P102, $P101 :named("name"), "attribute" :named("scope"))
    store_lex "$past", $P5054
    find_dynamic_lex $P5055, "$*IN_DECL"
    unless_null $P5055, fallback4471
    nqp_get_sc_object $P5058, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5057, $P5058
    set $P5056, $P5057["$IN_DECL"]
    unless_null $P5056, fallback4472
    nqp_get_sc_object $P5059, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5056, $P5059
  fallback4472:
    unless_null $P5056, vivi_14804473
    die "Contextual $*IN_DECL not found"
    box $P5060, "Contextual $*IN_DECL not found"
    set $P5056, $P5060
  vivi_14804473:
    set $P5055, $P5056
  fallback4471:
    set $P5063, $P5055
    if $P5055 goto unless1479_end4470 
    .const 'Sub' $P5061 = 'cuid_457_1360426903.566' 
    capture_lex $P5061
    $P5062 = $P5061()
    set $P5063, $P5062
  unless1479_end4470:
    .return ($P5063) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_457_1360426903.566") :anon :lex :outer("cuid_458_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2087
    .const 'Sub' $P5032 = 'cuid_456_1360426903.566' 
    capture_lex $P5032 
    .lex "$attr", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 2089
    find_dynamic_lex $P5006, "$*PACKAGE"
    unless_null $P5006, fallback4474
    nqp_get_sc_object $P5009, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$PACKAGE"]
    unless_null $P5007, fallback4475
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5010
  fallback4475:
    unless_null $P5007, vivi_14814476
    die "Contextual $*PACKAGE not found"
    box $P5011, "Contextual $*PACKAGE not found"
    set $P5007, $P5011
  vivi_14814476:
    set $P5006, $P5007
  fallback4474:
    get_how $P5005, $P5006
    find_dynamic_lex $P5012, "$*PACKAGE"
    unless_null $P5012, fallback4477
    nqp_get_sc_object $P5015, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$PACKAGE"]
    unless_null $P5013, fallback4478
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5016
  fallback4478:
    unless_null $P5013, vivi_14824479
    die "Contextual $*PACKAGE not found"
    box $P5017, "Contextual $*PACKAGE not found"
    set $P5013, $P5017
  vivi_14824479:
    set $P5012, $P5013
  fallback4477:
    $P5018 = $P5005."attributes"($P5012, 1 :named("local"))
    set $P5002, $P5018
    iter $P5004, $P5018
    new $P5020, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5020, for_handlers4482
    push_eh $P5020
  for_next4483:
    unless $P5004, for_done4485
    shift $P5021, $P5004
  for_redo4484:
    .const 'Sub' $P5019 = 'cuid_456_1360426903.566' 
    capture_lex $P5019
    $P5002 = $P5019($P5021)
    goto for_next4483
  for_handlers4482:
    .get_results ($P5020)
    pop_upto_eh $P5020
    getattribute $P5020, $P5020, 'type'
    eq $P5020, .CONTROL_LOOP_NEXT, for_next4483
    eq $P5020, .CONTROL_LOOP_REDO, for_redo4484
  for_done4485:
    pop_eh 
    defined $I5001, $P101
    unless $I5001 goto if1484_else4486 
.annotate 'line', 2095
    can $I5002, $P101, "type"
    box $P5026, $I5002
    set $P5025, $P5026
    unless $I5002 goto if1485_end4489 
.annotate 'line', 2096
.annotate 'line', 2097
    find_lex $P5022, "$past"
    $P5023 = $P101."type"()
    $P5024 = $P5022."returns"($P5023)
    set $P5025, $P5024
  if1485_end4489:
    set $P5031, $P5025
    goto if1484_end4487
  if1484_else4486:
.annotate 'line', 2100
.annotate 'line', 2101
    find_lex $P5027, "$/"
    $P5028 = $P5027."CURSOR"()
    find_lex $P5029, "$name"
    set $S5003, $P5029
    concat $S5002, "Attribute '", $S5003
    concat $S5001, $S5002, "' not declared"
    $P5030 = $P5028."panic"($S5001)
    set $P5031, $P5030
  if1484_end4487:
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_456_1360426903.566") :anon :lex :outer("cuid_457_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2089
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2090
    $P5001 = _lex_param_0."name"()
    set $S5001, $P5001
    find_lex $P5002, "$name"
    set $S5002, $P5002
    iseq $I5001, $S5001, $S5002
    set $I5002, $I5001
    unless $I5001 goto if1483_end4481 
    store_lex "$attr", _lex_param_0
    die 0, .CONTROL_LOOP_LAST
    set $I5002, 0
  if1483_end4481:
    .return ($I5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_459_1360426903.566") :anon :lex :outer("cuid_455_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2105
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback4496
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5004
  fallback4496:
    set $P5002, $P5003["sigil"]
    unless_null $P5002, fallback4497
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback4497:
    set $S5001, $P5002
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1487_else4494 
    set $S5004, "list"
    goto if1487_end4495
  if1487_else4494:
    find_lex $P5007, "$/"
    unless_null $P5007, fallback4500
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5008
  fallback4500:
    set $P5006, $P5007["sigil"]
    unless_null $P5006, fallback4501
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5009
  fallback4501:
    set $S5002, $P5006
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1488_else4498 
    set $S5003, "hash"
    goto if1488_end4499
  if1488_else4498:
    set $S5003, "item"
  if1488_end4499:
    set $S5004, $S5003
  if1487_end4495:
    box $P5010, $S5004
    set $P101, $P5010
.annotate 'line', 2109
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback4502
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback4502:
    find_lex $P5017, "$/"
    unless_null $P5017, fallback4503
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5018
  fallback4503:
    set $P5016, $P5017["semilist"]
    unless_null $P5016, fallback4504
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5016, $P5019
  fallback4504:
    $P5020 = $P5016."ast"()
    $P5021 = $P5011."new"($P5020, "callmethod" :named("op"), $P101 :named("name"))
    store_lex "$past", $P5021
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_460_1360426903.566") :anon :lex :outer("cuid_455_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2115
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 2116
    find_lex $P5002, "@name"
    $P5003 = $P5002."pop"()
    set $S5001, $P5003
    box $P5004, $S5001
    set $P101, $P5004
    find_dynamic_lex $P5005, "$*IN_DECL"
    unless_null $P5005, fallback4525
    nqp_get_sc_object $P5008, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$IN_DECL"]
    unless_null $P5006, fallback4526
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5009
  fallback4526:
    unless_null $P5006, vivi_14974527
    die "Contextual $*IN_DECL not found"
    box $P5010, "Contextual $*IN_DECL not found"
    set $P5006, $P5010
  vivi_14974527:
    set $P5005, $P5006
  fallback4525:
    set $S5002, $P5005
    iseq $I5001, $S5002, "variable"
    set $I5003, $I5001
    if $I5001 goto unless1496_end4524 
    set $S5003, $P101
    iseq $I5002, $S5003, "$_"
    set $I5003, $I5002
  unless1496_end4524:
    set $I5005, $I5003
    if $I5003 goto unless1495_end4522 
    set $S5004, $P101
    iseq $I5004, $S5004, "$/"
    set $I5005, $I5004
  unless1495_end4522:
    set $I5007, $I5005
    if $I5005 goto unless1494_end4520 
    set $S5005, $P101
    iseq $I5006, $S5005, "$!"
    set $I5007, $I5006
  unless1494_end4520:
    set $I5009, $I5007
    if $I5007 goto unless1493_end4518 
    find_lex $P5013, "$/"
    unless_null $P5013, fallback4528
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5014
  fallback4528:
    set $P5012, $P5013["twigil"]
    unless_null $P5012, fallback4529
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5015
  fallback4529:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback4530
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5016
  fallback4530:
    set $S5006, $P5011
    iseq $I5008, $S5006, "?"
    set $I5009, $I5008
  unless1493_end4518:
    box $P5025, $I5009
    set $P5024, $P5025
    if $I5009 goto unless1492_end4516 
.annotate 'line', 2118
    find_dynamic_lex $P5017, "$*W"
    unless_null $P5017, fallback4531
    nqp_get_sc_object $P5020, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5019, $P5020
    set $P5018, $P5019["$W"]
    unless_null $P5018, fallback4532
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5018, $P5021
  fallback4532:
    unless_null $P5018, vivi_14984533
    die "Contextual $*W not found"
    box $P5022, "Contextual $*W not found"
    set $P5018, $P5022
  vivi_14984533:
    set $P5017, $P5018
  fallback4531:
    $P5023 = $P5017."is_lexical"($P101)
    set $P5024, $P5023
  unless1492_end4516:
    unless $P5024 goto if1491_else4513 
.annotate 'line', 2119
    nqp_get_sc_object $P5029, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback4534
    nqp_get_sc_object $P5030, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5026, $P5030
  fallback4534:
    $P5031 = $P5026."new"($P101 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5031
    set $P5035, $P5031
    goto if1491_end4514
  if1491_else4513:
.annotate 'line', 2121
.annotate 'line', 2122
    find_lex $P5032, "$/"
    $P5033 = $P5032."CURSOR"()
    set $S5009, $P101
    concat $S5008, "Use of undeclared variable '", $S5009
    concat $S5007, $S5008, "'"
    $P5034 = $P5033."panic"($S5007)
    set $P5035, $P5034
  if1491_end4514:
    .return ($P5035) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_287_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2129
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4535
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4535:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4536
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4536:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_288_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2130
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4537
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4537:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4538
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4538:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_289_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2131
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4539
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4539:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4540
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4540:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_290_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2132
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4541
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4541:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4542
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4542:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_291_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2133
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4543
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4543:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4544
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4544:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_292_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2134
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4545
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4545:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4546
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4546:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_293_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2136
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$HOW", $P101 
    .lex "$PACKAGE", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
.annotate 'line', 2139
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4547
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4548
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5007
  fallback4548:
    unless_null $P5004, vivi_14994549
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_14994549:
    set $P5003, $P5004
  fallback4547:
    unless_null _lex_param_1, fallback4550
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5011
  fallback4550:
    set $P5010, _lex_param_1["metaclass"]
    unless_null $P5010, fallback4551
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5012
  fallback4551:
    set $P5009, $P5010["identifier"]
    unless_null $P5009, fallback4552
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5013
  fallback4552:
    $P5014 = $P5003."find_sym"($P5009)
    set $P101, $P5014
.annotate 'line', 2140
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback4553
    nqp_get_sc_object $P5018, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback4554
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5016, $P5019
  fallback4554:
    unless_null $P5016, vivi_15004555
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_15004555:
    set $P5015, $P5016
  fallback4553:
    unless_null _lex_param_1, fallback4556
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5022
  fallback4556:
    set $P5021, _lex_param_1["name"]
    unless_null $P5021, fallback4557
    nqp_get_sc_object $P5023, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5021, $P5023
  fallback4557:
    set $S5001, $P5021
    $P5024 = $P5015."pkg_create_mo"($P101, $S5001 :named("name"))
    set $P102, $P5024
    find_dynamic_lex $P5025, "$*SCOPE"
    unless_null $P5025, fallback4562
    nqp_get_sc_object $P5028, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["$SCOPE"]
    unless_null $P5026, fallback4563
    nqp_get_sc_object $P5029, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5026, $P5029
  fallback4563:
    unless_null $P5026, vivi_15034564
    die "Contextual $*SCOPE not found"
    box $P5030, "Contextual $*SCOPE not found"
    set $P5026, $P5030
  vivi_15034564:
    set $P5025, $P5026
  fallback4562:
    set $S5002, $P5025
    iseq $I5001, $S5002, "our"
    set $I5003, $I5001
    if $I5001 goto unless1502_end4561 
    find_dynamic_lex $P5031, "$*SCOPE"
    unless_null $P5031, fallback4565
    nqp_get_sc_object $P5034, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$SCOPE"]
    unless_null $P5032, fallback4566
    nqp_get_sc_object $P5035, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5032, $P5035
  fallback4566:
    unless_null $P5032, vivi_15044567
    die "Contextual $*SCOPE not found"
    box $P5036, "Contextual $*SCOPE not found"
    set $P5032, $P5036
  vivi_15044567:
    set $P5031, $P5032
  fallback4565:
    set $S5003, $P5031
    iseq $I5002, $S5003, ""
    set $I5003, $I5002
  unless1502_end4561:
    unless $I5003 goto if1501_else4558 
.annotate 'line', 2143
.annotate 'line', 2144
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback4568
    nqp_get_sc_object $P5040, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback4569
    nqp_get_sc_object $P5041, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5038, $P5041
  fallback4569:
    unless_null $P5038, vivi_15054570
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_15054570:
    set $P5037, $P5038
  fallback4568:
    find_dynamic_lex $P5043, "$*OUTERPACKAGE"
    unless_null $P5043, fallback4571
    nqp_get_sc_object $P5046, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$OUTERPACKAGE"]
    unless_null $P5044, fallback4572
    nqp_get_sc_object $P5047, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5044, $P5047
  fallback4572:
    unless_null $P5044, vivi_15064573
    die "Contextual $*OUTERPACKAGE not found"
    box $P5048, "Contextual $*OUTERPACKAGE not found"
    set $P5044, $P5048
  vivi_15064573:
    set $P5043, $P5044
  fallback4571:
    unless_null _lex_param_1, fallback4574
    nqp_get_sc_object $P5051, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5051
  fallback4574:
    set $P5050, _lex_param_1["name"]
    unless_null $P5050, fallback4575
    nqp_get_sc_object $P5052, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5050, $P5052
  fallback4575:
    set $P5049, $P5050["identifier"]
    unless_null $P5049, fallback4576
    nqp_get_sc_object $P5053, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5049, $P5053
  fallback4576:
    $P5037."install_package_symbol"($P5043, $P5049, $P102)
    unless_null _lex_param_1, fallback4579
    nqp_get_sc_object $P5056, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5056
  fallback4579:
    set $P5055, _lex_param_1["name"]
    unless_null $P5055, fallback4580
    nqp_get_sc_object $P5057, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5055, $P5057
  fallback4580:
    set $P5054, $P5055["identifier"]
    unless_null $P5054, fallback4581
    nqp_get_sc_object $P5058, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5054, $P5058
  fallback4581:
    set $N5001, $P5054
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5081, $I5004
    set $P5080, $P5081
    unless $I5004 goto if1507_end4578 
.annotate 'line', 2145
.annotate 'line', 2146
    find_dynamic_lex $P5059, "$*W"
    unless_null $P5059, fallback4582
    nqp_get_sc_object $P5062, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$W"]
    unless_null $P5060, fallback4583
    nqp_get_sc_object $P5063, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5060, $P5063
  fallback4583:
    unless_null $P5060, vivi_15084584
    die "Contextual $*W not found"
    box $P5064, "Contextual $*W not found"
    set $P5060, $P5064
  vivi_15084584:
    set $P5059, $P5060
  fallback4582:
    find_dynamic_lex $P5065, "$*W"
    unless_null $P5065, fallback4585
    nqp_get_sc_object $P5068, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$W"]
    unless_null $P5066, fallback4586
    nqp_get_sc_object $P5069, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5066, $P5069
  fallback4586:
    unless_null $P5066, vivi_15094587
    die "Contextual $*W not found"
    box $P5070, "Contextual $*W not found"
    set $P5066, $P5070
  vivi_15094587:
    set $P5065, $P5066
  fallback4585:
    $P5071 = $P5065."cur_lexpad"()
    unless_null _lex_param_1, fallback4588
    nqp_get_sc_object $P5075, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5075
  fallback4588:
    set $P5074, _lex_param_1["name"]
    unless_null $P5074, fallback4589
    nqp_get_sc_object $P5076, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5074, $P5076
  fallback4589:
    set $P5073, $P5074["identifier"]
    unless_null $P5073, fallback4590
    nqp_get_sc_object $P5077, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5073, $P5077
  fallback4590:
    set $P5072, $P5073[0]
    unless_null $P5072, fallback4591
    nqp_get_sc_object $P5078, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5072, $P5078
  fallback4591:
    $P5079 = $P5059."install_lexical_symbol"($P5071, $P5072, $P102)
    set $P5080, $P5079
  if1507_end4578:
    goto if1501_end4559
  if1501_else4558:
    find_dynamic_lex $P5082, "$*SCOPE"
    unless_null $P5082, fallback4594
    nqp_get_sc_object $P5085, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["$SCOPE"]
    unless_null $P5083, fallback4595
    nqp_get_sc_object $P5086, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5083, $P5086
  fallback4595:
    unless_null $P5083, vivi_15114596
    die "Contextual $*SCOPE not found"
    box $P5087, "Contextual $*SCOPE not found"
    set $P5083, $P5087
  vivi_15114596:
    set $P5082, $P5083
  fallback4594:
    set $S5004, $P5082
    iseq $I5005, $S5004, "my"
    unless $I5005 goto if1510_else4592 
.annotate 'line', 2149
    unless_null _lex_param_1, fallback4599
    nqp_get_sc_object $P5090, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5090
  fallback4599:
    set $P5089, _lex_param_1["name"]
    unless_null $P5089, fallback4600
    nqp_get_sc_object $P5091, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5089, $P5091
  fallback4600:
    set $P5088, $P5089["identifier"]
    unless_null $P5088, fallback4601
    nqp_get_sc_object $P5092, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5088, $P5092
  fallback4601:
    set $N5003, $P5088
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    unless $I5006 goto if1512_end4598 
.annotate 'line', 2150
.annotate 'line', 2151
    unless_null _lex_param_1, fallback4602
    nqp_get_sc_object $P5094, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5094
  fallback4602:
    set $P5093, _lex_param_1["name"]
    unless_null $P5093, fallback4603
    nqp_get_sc_object $P5095, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5093, $P5095
  fallback4603:
    $P5096 = $P5093."CURSOR"()
    $P5097 = $P5096."panic"("A my scoped package cannot have a multi-part name yet")
  if1512_end4598:
.annotate 'line', 2153
    find_dynamic_lex $P5098, "$*W"
    unless_null $P5098, fallback4604
    nqp_get_sc_object $P5101, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5100, $P5101
    set $P5099, $P5100["$W"]
    unless_null $P5099, fallback4605
    nqp_get_sc_object $P5102, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5099, $P5102
  fallback4605:
    unless_null $P5099, vivi_15134606
    die "Contextual $*W not found"
    box $P5103, "Contextual $*W not found"
    set $P5099, $P5103
  vivi_15134606:
    set $P5098, $P5099
  fallback4604:
    find_dynamic_lex $P5104, "$*W"
    unless_null $P5104, fallback4607
    nqp_get_sc_object $P5107, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$W"]
    unless_null $P5105, fallback4608
    nqp_get_sc_object $P5108, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5105, $P5108
  fallback4608:
    unless_null $P5105, vivi_15144609
    die "Contextual $*W not found"
    box $P5109, "Contextual $*W not found"
    set $P5105, $P5109
  vivi_15144609:
    set $P5104, $P5105
  fallback4607:
    $P5110 = $P5104."cur_lexpad"()
    unless_null _lex_param_1, fallback4610
    nqp_get_sc_object $P5114, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5114
  fallback4610:
    set $P5113, _lex_param_1["name"]
    unless_null $P5113, fallback4611
    nqp_get_sc_object $P5115, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5113, $P5115
  fallback4611:
    set $P5112, $P5113["identifier"]
    unless_null $P5112, fallback4612
    nqp_get_sc_object $P5116, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5112, $P5116
  fallback4612:
    set $P5111, $P5112[0]
    unless_null $P5111, fallback4613
    nqp_get_sc_object $P5117, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5111, $P5117
  fallback4613:
    $P5118 = $P5098."install_lexical_symbol"($P5110, $P5111, $P102)
    set $P5127, $P5118
    goto if1510_end4593
  if1510_else4592:
.annotate 'line', 2155
.annotate 'line', 2156
    $P5119 = _lex_param_1."CURSOR"()
    find_dynamic_lex $P5120, "$*SCOPE"
    unless_null $P5120, fallback4614
    nqp_get_sc_object $P5123, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5122, $P5123
    set $P5121, $P5122["$SCOPE"]
    unless_null $P5121, fallback4615
    nqp_get_sc_object $P5124, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5121, $P5124
  fallback4615:
    unless_null $P5121, vivi_15154616
    die "Contextual $*SCOPE not found"
    box $P5125, "Contextual $*SCOPE not found"
    set $P5121, $P5125
  vivi_15154616:
    set $P5120, $P5121
  fallback4614:
    set $S5006, $P5120
    concat $S5005, $S5006, " scoped packages are not supported"
    $P5126 = $P5119."panic"($S5005)
    set $P5127, $P5126
  if1510_end4593:
  if1501_end4559:
.annotate 'line', 2159
    nqp_get_sc_object $P5131, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5130, $P5131, "QAST"
    get_who $P5129, $P5130
    set $P5128, $P5129["Stmts"]
    unless_null $P5128, fallback4617
    nqp_get_sc_object $P5132, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5128, $P5132
  fallback4617:
    $P5133 = $P5128."new"()
    $P5134 = _lex_param_1."!make"($P5133)
    .return ($P5134) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_294_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2162
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5149 = 'cuid_462_1360426903.566' 
    capture_lex $P5149 
    .const 'Sub' $P5149 = 'cuid_463_1360426903.566' 
    capture_lex $P5149 
    .const 'Sub' $P5149 = 'cuid_464_1360426903.566' 
    capture_lex $P5149 
    .const 'Sub' $P5149 = 'cuid_465_1360426903.566' 
    capture_lex $P5149 
    .lex "@ns", $P101 
    .lex "$name", $P102 
    .lex "$how", $P103 
    .lex "$past", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P104, $P5004
    unless_null _lex_param_1, fallback4618
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5008
  fallback4618:
    set $P5007, _lex_param_1["name"]
    unless_null $P5007, fallback4619
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5009
  fallback4619:
    set $P5006, $P5007["identifier"]
    unless_null $P5006, fallback4620
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5010
  fallback4620:
    repr_clone $P5005, $P5006
    set $P101, $P5005
.annotate 'line', 2165
    $P5011 = $P101."pop"()
    set $S5001, $P5011
    box $P5012, $S5001
    set $P102, $P5012
    find_dynamic_lex $P5014, "%*HOW"
    unless_null $P5014, fallback4621
    nqp_get_sc_object $P5017, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["%HOW"]
    unless_null $P5015, fallback4622
    nqp_get_sc_object $P5019, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%HOW"], $P5020
    set $P5015, $P5020
  fallback4622:
    unless_null $P5015, vivi_15164623
    die "Contextual %*HOW not found"
    box $P5021, "Contextual %*HOW not found"
    set $P5015, $P5021
  vivi_15164623:
    set $P5014, $P5015
  fallback4621:
    find_dynamic_lex $P5022, "$*PKGDECL"
    unless_null $P5022, fallback4624
    nqp_get_sc_object $P5025, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PKGDECL"]
    unless_null $P5023, fallback4625
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5023, $P5026
  fallback4625:
    unless_null $P5023, vivi_15174626
    die "Contextual $*PKGDECL not found"
    box $P5027, "Contextual $*PKGDECL not found"
    set $P5023, $P5027
  vivi_15174626:
    set $P5022, $P5023
  fallback4624:
    set $S5002, $P5022
    set $P5013, $P5014[$S5002]
    unless_null $P5013, fallback4627
    nqp_get_sc_object $P5028, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5028
  fallback4627:
    set $P103, $P5013
    unless_null _lex_param_1, fallback4630
    nqp_get_sc_object $P5030, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5030
  fallback4630:
    set $P5029, _lex_param_1["blockoid"]
    unless_null $P5029, fallback4631
    nqp_get_sc_object $P5031, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5029, $P5031
  fallback4631:
    unless $P5029 goto if1518_else4628 
.annotate 'line', 2170
.annotate 'line', 2171
    unless_null _lex_param_1, fallback4632
    nqp_get_sc_object $P5033, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5033
  fallback4632:
    set $P5032, _lex_param_1["blockoid"]
    unless_null $P5032, fallback4633
    nqp_get_sc_object $P5034, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5032, $P5034
  fallback4633:
    $P5035 = $P5032."ast"()
    set $P104, $P5035
    goto if1518_end4629
  if1518_else4628:
.annotate 'line', 2173
.annotate 'line', 2174
    find_dynamic_lex $P5036, "$*W"
    unless_null $P5036, fallback4634
    nqp_get_sc_object $P5039, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5038, $P5039
    set $P5037, $P5038["$W"]
    unless_null $P5037, fallback4635
    nqp_get_sc_object $P5040, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5037, $P5040
  fallback4635:
    unless_null $P5037, vivi_15194636
    die "Contextual $*W not found"
    box $P5041, "Contextual $*W not found"
    set $P5037, $P5041
  vivi_15194636:
    set $P5036, $P5037
  fallback4634:
    $P5042 = $P5036."pop_lexpad"()
    set $P104, $P5042
.annotate 'line', 2175
    unless_null _lex_param_1, fallback4637
    nqp_get_sc_object $P5044, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5044
  fallback4637:
    set $P5043, _lex_param_1["statementlist"]
    unless_null $P5043, fallback4638
    nqp_get_sc_object $P5045, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5043, $P5045
  fallback4638:
    $P5046 = $P5043."ast"()
    $P5047 = $P104."push"($P5046)
  if1518_end4629:
    can $I5001, $P103, "parametric"
    box $P5050, $I5001
    set $P5049, $P5050
    unless $I5001 goto if1521_end4642 
.annotate 'line', 2182
    $P5048 = $P103."parametric"($P103)
    set $P5049, $P5048
  if1521_end4642:
    unless $P5049 goto if1520_else4639 
    .const 'Sub' $P5051 = 'cuid_462_1360426903.566' 
    capture_lex $P5051
    $P5052 = $P5051()
    goto if1520_end4640
  if1520_else4639:
.annotate 'line', 2199
.annotate 'line', 2200
    $P104."blocktype"("immediate")
.annotate 'line', 2201
    find_dynamic_lex $P5053, "$*W"
    unless_null $P5053, fallback4675
    nqp_get_sc_object $P5056, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$W"]
    unless_null $P5054, fallback4676
    nqp_get_sc_object $P5057, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5054, $P5057
  fallback4676:
    unless_null $P5054, vivi_15294677
    die "Contextual $*W not found"
    box $P5058, "Contextual $*W not found"
    set $P5054, $P5058
  vivi_15294677:
    set $P5053, $P5054
  fallback4675:
    find_dynamic_lex $P5059, "$*PACKAGE"
    unless_null $P5059, fallback4678
    nqp_get_sc_object $P5062, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$PACKAGE"]
    unless_null $P5060, fallback4679
    nqp_get_sc_object $P5063, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5060, $P5063
  fallback4679:
    unless_null $P5060, vivi_15304680
    die "Contextual $*PACKAGE not found"
    box $P5064, "Contextual $*PACKAGE not found"
    set $P5060, $P5064
  vivi_15304680:
    set $P5059, $P5060
  fallback4678:
    $P5053."install_lexical_symbol"($P104, "$?PACKAGE", $P5059)
.annotate 'line', 2202
    find_dynamic_lex $P5065, "$*W"
    unless_null $P5065, fallback4681
    nqp_get_sc_object $P5068, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$W"]
    unless_null $P5066, fallback4682
    nqp_get_sc_object $P5069, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5066, $P5069
  fallback4682:
    unless_null $P5066, vivi_15314683
    die "Contextual $*W not found"
    box $P5070, "Contextual $*W not found"
    set $P5066, $P5070
  vivi_15314683:
    set $P5065, $P5066
  fallback4681:
    find_dynamic_lex $P5071, "$*PACKAGE"
    unless_null $P5071, fallback4684
    nqp_get_sc_object $P5074, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5073, $P5074
    set $P5072, $P5073["$PACKAGE"]
    unless_null $P5072, fallback4685
    nqp_get_sc_object $P5075, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5072, $P5075
  fallback4685:
    unless_null $P5072, vivi_15324686
    die "Contextual $*PACKAGE not found"
    box $P5076, "Contextual $*PACKAGE not found"
    set $P5072, $P5076
  vivi_15324686:
    set $P5071, $P5072
  fallback4684:
    $P5077 = $P5065."install_lexical_symbol"($P104, "$?CLASS", $P5071)
  if1520_end4640:
    unless_null _lex_param_1, fallback4689
    nqp_get_sc_object $P5079, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5079
  fallback4689:
    set $P5078, _lex_param_1["parent"]
    unless_null $P5078, fallback4690
    nqp_get_sc_object $P5080, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5078, $P5080
  fallback4690:
    unless $P5078 goto if1533_else4687 
    .const 'Sub' $P5081 = 'cuid_463_1360426903.566' 
    capture_lex $P5081
    $P5082 = $P5081()
    goto if1533_end4688
  if1533_else4687:
    can $I5002, $P103, "set_default_parent"
    box $P5086, $I5002
    set $P5085, $P5086
    unless $I5002 goto if1540_end4712 
    .const 'Sub' $P5083 = 'cuid_464_1360426903.566' 
    capture_lex $P5083
    $P5084 = $P5083()
    set $P5085, $P5084
  if1540_end4712:
  if1533_end4688:
    unless_null _lex_param_1, fallback4729
    nqp_get_sc_object $P5088, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5088
  fallback4729:
    set $P5087, _lex_param_1["role"]
    unless_null $P5087, fallback4730
    nqp_get_sc_object $P5089, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5087, $P5089
  fallback4730:
    unless $P5087 goto if1546_end4728 
.annotate 'line', 2227
    unless_null _lex_param_1, fallback4731
    nqp_get_sc_object $P5094, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5094
  fallback4731:
    set $P5093, _lex_param_1["role"]
    unless_null $P5093, fallback4732
    nqp_get_sc_object $P5095, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5093, $P5095
  fallback4732:
    set $P5090, $P5093
    iter $P5092, $P5093
  for_next4747:
    unless $P5092, for_done4749
    shift $P5097, $P5092
  for_redo4748:
    .const 'Sub' $P5096 = 'cuid_465_1360426903.566' 
    capture_lex $P5096
    $P5090 = $P5096($P5097)
    goto for_next4747
  for_done4749:
  if1546_end4728:
.annotate 'line', 2245
    find_dynamic_lex $P5098, "$*W"
    unless_null $P5098, fallback4750
    nqp_get_sc_object $P5101, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5100, $P5101
    set $P5099, $P5100["$W"]
    unless_null $P5099, fallback4751
    nqp_get_sc_object $P5102, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5099, $P5102
  fallback4751:
    unless_null $P5099, vivi_15534752
    die "Contextual $*W not found"
    box $P5103, "Contextual $*W not found"
    set $P5099, $P5103
  vivi_15534752:
    set $P5098, $P5099
  fallback4750:
    find_dynamic_lex $P5104, "$*PACKAGE"
    unless_null $P5104, fallback4753
    nqp_get_sc_object $P5107, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$PACKAGE"]
    unless_null $P5105, fallback4754
    nqp_get_sc_object $P5108, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5105, $P5108
  fallback4754:
    unless_null $P5105, vivi_15544755
    die "Contextual $*PACKAGE not found"
    box $P5109, "Contextual $*PACKAGE not found"
    set $P5105, $P5109
  vivi_15544755:
    set $P5104, $P5105
  fallback4753:
    $P5098."pkg_compose"($P5104)
    find_dynamic_lex $P5110, "$*PKGDECL"
    unless_null $P5110, fallback4760
    nqp_get_sc_object $P5113, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5112, $P5113
    set $P5111, $P5112["$PKGDECL"]
    unless_null $P5111, fallback4761
    nqp_get_sc_object $P5114, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5111, $P5114
  fallback4761:
    unless_null $P5111, vivi_15574762
    die "Contextual $*PKGDECL not found"
    box $P5115, "Contextual $*PKGDECL not found"
    set $P5111, $P5115
  vivi_15574762:
    set $P5110, $P5111
  fallback4760:
    set $S5003, $P5110
    iseq $I5003, $S5003, "grammar"
    set $I5005, $I5003
    unless $I5003 goto if1556_end4759 
    find_dynamic_lex $P5116, "$*PACKAGE"
    unless_null $P5116, fallback4763
    nqp_get_sc_object $P5119, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5118, $P5119
    set $P5117, $P5118["$PACKAGE"]
    unless_null $P5117, fallback4764
    nqp_get_sc_object $P5120, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5117, $P5120
  fallback4764:
    unless_null $P5117, vivi_15584765
    die "Contextual $*PACKAGE not found"
    box $P5121, "Contextual $*PACKAGE not found"
    set $P5117, $P5121
  vivi_15584765:
    set $P5116, $P5117
  fallback4763:
    can $I5004, $P5116, "!precompute_nfas"
    set $I5005, $I5004
  if1556_end4759:
    unless $I5005 goto if1555_end4757 
.annotate 'line', 2248
.annotate 'line', 2249
    find_dynamic_lex $P5122, "$*PACKAGE"
    unless_null $P5122, fallback4766
    nqp_get_sc_object $P5125, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5124, $P5125
    set $P5123, $P5124["$PACKAGE"]
    unless_null $P5123, fallback4767
    nqp_get_sc_object $P5126, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5123, $P5126
  fallback4767:
    unless_null $P5123, vivi_15594768
    die "Contextual $*PACKAGE not found"
    box $P5127, "Contextual $*PACKAGE not found"
    set $P5123, $P5127
  vivi_15594768:
    set $P5122, $P5123
  fallback4766:
    $P5128 = $P5122."!precompute_nfas"()
  if1555_end4757:
    unless_null _lex_param_1, fallback4771
    nqp_get_sc_object $P5130, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5130
  fallback4771:
    set $P5129, _lex_param_1["export"]
    unless_null $P5129, fallback4772
    nqp_get_sc_object $P5131, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5129, $P5131
  fallback4772:
    unless $P5129 goto if1560_end4770 
.annotate 'line', 2253
    find_dynamic_lex $P5135, "$*EXPORT"
    unless_null $P5135, fallback4773
    nqp_get_sc_object $P5138, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5137, $P5138
    set $P5136, $P5137["$EXPORT"]
    unless_null $P5136, fallback4774
    nqp_get_sc_object $P5139, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5136, $P5139
  fallback4774:
    unless_null $P5136, vivi_15614775
    die "Contextual $*EXPORT not found"
    box $P5140, "Contextual $*EXPORT not found"
    set $P5136, $P5140
  vivi_15614775:
    set $P5135, $P5136
  fallback4773:
    get_who $P5134, $P5135
    set $P5133, $P5134["DEFAULT"]
    unless_null $P5133, fallback4776
    nqp_get_sc_object $P5141, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5133, $P5141
  fallback4776:
    get_who $P5132, $P5133
    set $S5004, $P102
    find_dynamic_lex $P5142, "$*PACKAGE"
    unless_null $P5142, fallback4777
    nqp_get_sc_object $P5145, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5144, $P5145
    set $P5143, $P5144["$PACKAGE"]
    unless_null $P5143, fallback4778
    nqp_get_sc_object $P5146, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5143, $P5146
  fallback4778:
    unless_null $P5143, vivi_15624779
    die "Contextual $*PACKAGE not found"
    box $P5147, "Contextual $*PACKAGE not found"
    set $P5143, $P5147
  vivi_15624779:
    set $P5142, $P5143
  fallback4777:
    set $P5132[$S5004], $P5142
  if1560_end4770:
.annotate 'line', 2257
    $P5148 = _lex_param_1."!make"($P104)
    .return ($P5148) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_462_1360426903.566") :anon :lex :outer("cuid_294_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2182
    .const 'Sub' $P5081 = 'cuid_461_1360426903.566' 
    capture_lex $P5081 
    .lex "$params", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 2183
    find_lex $P5002, "$past"
    $P5002."blocktype"("declaration")
.annotate 'line', 2184
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5005, $P5006, "QAST"
    get_who $P5004, $P5005
    set $P5003, $P5004["Stmts"]
    unless_null $P5003, fallback4643
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5007
  fallback4643:
.annotate 'line', 2185
    nqp_get_sc_object $P5011, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["Var"]
    unless_null $P5008, fallback4644
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5012
  fallback4644:
    $P5013 = $P5008."new"("$?CLASS" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5014 = $P5003."new"($P5013)
    set $P101, $P5014
    find_lex $P5016, "$/"
    unless_null $P5016, fallback4647
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5016, $P5017
  fallback4647:
    set $P5015, $P5016["role_params"]
    unless_null $P5015, fallback4648
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5015, $P5018
  fallback4648:
    unless $P5015 goto if1522_end4646 
.annotate 'line', 2187
    find_lex $P5025, "$/"
    unless_null $P5025, fallback4649
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5025, $P5026
  fallback4649:
    set $P5024, $P5025["role_params"]
    unless_null $P5024, fallback4650
    nqp_get_sc_object $P5027, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5024, $P5027
  fallback4650:
    set $P5023, $P5024[0]
    unless_null $P5023, fallback4651
    nqp_get_sc_object $P5028, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5023, $P5028
  fallback4651:
    set $P5022, $P5023["variable"]
    unless_null $P5022, fallback4652
    nqp_get_sc_object $P5029, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5022, $P5029
  fallback4652:
    set $P5019, $P5022
    iter $P5021, $P5022
  for_next4653:
    unless $P5021, for_done4655
    shift $P5031, $P5021
  for_redo4654:
    .const 'Sub' $P5030 = 'cuid_461_1360426903.566' 
    capture_lex $P5030
    $P5019 = $P5030($P5031)
    goto for_next4653
  for_done4655:
  if1522_end4646:
.annotate 'line', 2192
    find_lex $P5032, "$past"
    $P5032."unshift"($P101)
.annotate 'line', 2193
    find_lex $P5033, "$past"
    nqp_get_sc_object $P5037, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback4656
    nqp_get_sc_object $P5038, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5034, $P5038
  fallback4656:
    $P5039 = $P5034."new"("curlexpad" :named("op"))
    $P5033."push"($P5039)
.annotate 'line', 2194
    find_lex $P5040, "$past"
    $P5040."symbol"("$?CLASS", "lexical" :named("scope"))
.annotate 'line', 2195
    find_dynamic_lex $P5041, "$*W"
    unless_null $P5041, fallback4657
    nqp_get_sc_object $P5044, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5043, $P5044
    set $P5042, $P5043["$W"]
    unless_null $P5042, fallback4658
    nqp_get_sc_object $P5045, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5042, $P5045
  fallback4658:
    unless_null $P5042, vivi_15234659
    die "Contextual $*W not found"
    box $P5046, "Contextual $*W not found"
    set $P5042, $P5046
  vivi_15234659:
    set $P5041, $P5042
  fallback4657:
    find_dynamic_lex $P5047, "$*PACKAGE"
    unless_null $P5047, fallback4660
    nqp_get_sc_object $P5050, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$PACKAGE"]
    unless_null $P5048, fallback4661
    nqp_get_sc_object $P5051, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5048, $P5051
  fallback4661:
    unless_null $P5048, vivi_15244662
    die "Contextual $*PACKAGE not found"
    box $P5052, "Contextual $*PACKAGE not found"
    set $P5048, $P5052
  vivi_15244662:
    set $P5047, $P5048
  fallback4660:
    find_lex $P5053, "$past"
    $P5041."pkg_set_body_block"($P5047, $P5053)
.annotate 'line', 2196
    find_dynamic_lex $P5054, "$*W"
    unless_null $P5054, fallback4663
    nqp_get_sc_object $P5057, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["$W"]
    unless_null $P5055, fallback4664
    nqp_get_sc_object $P5058, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5055, $P5058
  fallback4664:
    unless_null $P5055, vivi_15254665
    die "Contextual $*W not found"
    box $P5059, "Contextual $*W not found"
    set $P5055, $P5059
  vivi_15254665:
    set $P5054, $P5055
  fallback4663:
    find_lex $P5060, "$past"
    find_dynamic_lex $P5061, "$*PACKAGE"
    unless_null $P5061, fallback4666
    nqp_get_sc_object $P5064, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5063, $P5064
    set $P5062, $P5063["$PACKAGE"]
    unless_null $P5062, fallback4667
    nqp_get_sc_object $P5065, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5062, $P5065
  fallback4667:
    unless_null $P5062, vivi_15264668
    die "Contextual $*PACKAGE not found"
    box $P5066, "Contextual $*PACKAGE not found"
    set $P5062, $P5066
  vivi_15264668:
    set $P5061, $P5062
  fallback4666:
    $P5054."install_lexical_symbol"($P5060, "$?PACKAGE", $P5061)
.annotate 'line', 2197
    find_dynamic_lex $P5067, "$*W"
    unless_null $P5067, fallback4669
    nqp_get_sc_object $P5070, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5069, $P5070
    set $P5068, $P5069["$W"]
    unless_null $P5068, fallback4670
    nqp_get_sc_object $P5071, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5068, $P5071
  fallback4670:
    unless_null $P5068, vivi_15274671
    die "Contextual $*W not found"
    box $P5072, "Contextual $*W not found"
    set $P5068, $P5072
  vivi_15274671:
    set $P5067, $P5068
  fallback4669:
    find_lex $P5073, "$past"
    find_dynamic_lex $P5074, "$*PACKAGE"
    unless_null $P5074, fallback4672
    nqp_get_sc_object $P5077, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["$PACKAGE"]
    unless_null $P5075, fallback4673
    nqp_get_sc_object $P5078, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5075, $P5078
  fallback4673:
    unless_null $P5075, vivi_15284674
    die "Contextual $*PACKAGE not found"
    box $P5079, "Contextual $*PACKAGE not found"
    set $P5075, $P5079
  vivi_15284674:
    set $P5074, $P5075
  fallback4672:
    $P5080 = $P5067."install_lexical_symbol"($P5073, "$?ROLE", $P5074)
    .return ($P5080) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_461_1360426903.566") :anon :lex :outer("cuid_462_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2188
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2189
    find_lex $P5001, "$params"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_463_1360426903.566") :anon :lex :outer("cuid_294_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2206
    .lex "$parent", $P101 
    .lex "$parent_found", $P102 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_15364699
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 2209
.annotate 'line', 2210
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4691
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4692
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5007
  fallback4692:
    unless_null $P5004, vivi_15344693
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15344693:
    set $P5003, $P5004
  fallback4691:
    find_lex $P5013, "$/"
    unless_null $P5013, fallback4694
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5014
  fallback4694:
    set $P5012, $P5013["parent"]
    unless_null $P5012, fallback4695
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5015
  fallback4695:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback4696
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5016
  fallback4696:
    set $P5010, $P5011["identifier"]
    unless_null $P5010, fallback4697
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5017
  fallback4697:
    repr_clone $P5009, $P5010
    $P5018 = $P5003."find_sym"($P5009)
    set $P101, $P5018
    box $P5019, 1
    set $P102, $P5019
    set $P5021, $P102
    pop_eh 
    goto skip_handler_15354698
  catch_handler_15364699:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_15354698
  skip_handler_15354698:
    unless $P102 goto if1537_else4700 
.annotate 'line', 2213
.annotate 'line', 2214
    find_dynamic_lex $P5022, "$*W"
    unless_null $P5022, fallback4702
    nqp_get_sc_object $P5025, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$W"]
    unless_null $P5023, fallback4703
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5023, $P5026
  fallback4703:
    unless_null $P5023, vivi_15384704
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5023, $P5027
  vivi_15384704:
    set $P5022, $P5023
  fallback4702:
    find_dynamic_lex $P5028, "$*PACKAGE"
    unless_null $P5028, fallback4705
    nqp_get_sc_object $P5031, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["$PACKAGE"]
    unless_null $P5029, fallback4706
    nqp_get_sc_object $P5032, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5029, $P5032
  fallback4706:
    unless_null $P5029, vivi_15394707
    die "Contextual $*PACKAGE not found"
    box $P5033, "Contextual $*PACKAGE not found"
    set $P5029, $P5033
  vivi_15394707:
    set $P5028, $P5029
  fallback4705:
    $P5034 = $P5022."pkg_add_parent_or_role"($P5028, "add_parent", $P101)
    set $P5044, $P5034
    goto if1537_end4701
  if1537_else4700:
.annotate 'line', 2216
.annotate 'line', 2217
    find_lex $P5035, "$/"
    $P5036 = $P5035."CURSOR"()
    find_lex $P5039, "$/"
    unless_null $P5039, fallback4708
    nqp_get_sc_object $P5040, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5039, $P5040
  fallback4708:
    set $P5038, $P5039["parent"]
    unless_null $P5038, fallback4709
    nqp_get_sc_object $P5041, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5038, $P5041
  fallback4709:
    set $P5037, $P5038[0]
    unless_null $P5037, fallback4710
    nqp_get_sc_object $P5042, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5037, $P5042
  fallback4710:
    set $S5003, $P5037
    concat $S5002, "Could not find parent class '", $S5003
    concat $S5001, $S5002, "'"
    $P5043 = $P5036."panic"($S5001)
    set $P5044, $P5043
  if1537_end4701:
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_464_1360426903.566") :anon :lex :outer("cuid_294_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2220
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    find_dynamic_lex $P5002, "$*PKGDECL"
    unless_null $P5002, fallback4715
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$PKGDECL"]
    unless_null $P5003, fallback4716
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5006
  fallback4716:
    unless_null $P5003, vivi_15424717
    die "Contextual $*PKGDECL not found"
    box $P5007, "Contextual $*PKGDECL not found"
    set $P5003, $P5007
  vivi_15424717:
    set $P5002, $P5003
  fallback4715:
    set $S5001, $P5002
    iseq $I5001, $S5001, "grammar"
    unless $I5001 goto if1541_else4713 
    new $P5008, 'ResizablePMCArray'
    box $P5009, "NQPCursor"
    push $P5008, $P5009
    set $P5012, $P5008
    goto if1541_end4714
  if1541_else4713:
    new $P5010, 'ResizablePMCArray'
    box $P5011, "NQPMu"
    push $P5010, $P5011
    set $P5012, $P5010
  if1541_end4714:
    set $P101, $P5012
.annotate 'line', 2222
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback4718
    nqp_get_sc_object $P5016, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback4719
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5017
  fallback4719:
    unless_null $P5014, vivi_15434720
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_15434720:
    set $P5013, $P5014
  fallback4718:
    find_dynamic_lex $P5019, "$*PACKAGE"
    unless_null $P5019, fallback4721
    nqp_get_sc_object $P5022, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$PACKAGE"]
    unless_null $P5020, fallback4722
    nqp_get_sc_object $P5023, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5023
  fallback4722:
    unless_null $P5020, vivi_15444723
    die "Contextual $*PACKAGE not found"
    box $P5024, "Contextual $*PACKAGE not found"
    set $P5020, $P5024
  vivi_15444723:
    set $P5019, $P5020
  fallback4721:
.annotate 'line', 2223
    find_dynamic_lex $P5025, "$*W"
    unless_null $P5025, fallback4724
    nqp_get_sc_object $P5028, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["$W"]
    unless_null $P5026, fallback4725
    nqp_get_sc_object $P5029, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5026, $P5029
  fallback4725:
    unless_null $P5026, vivi_15454726
    die "Contextual $*W not found"
    box $P5030, "Contextual $*W not found"
    set $P5026, $P5030
  vivi_15454726:
    set $P5025, $P5026
  fallback4724:
    $P5031 = $P5025."find_sym"($P101)
    $P5032 = $P5013."pkg_add_parent_or_role"($P5019, "set_default_parent", $P5031)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_465_1360426903.566") :anon :lex :outer("cuid_294_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2228
    .param pmc _lex_param_0 
    .lex "$role", $P101 
    .lex "$role_found", $P102 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    new $P5014, 'ExceptionHandler'
    set_label $P5014, catch_handler_15494738
    $P5014.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5014
.annotate 'line', 2231
.annotate 'line', 2232
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4733
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4734
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5007
  fallback4734:
    unless_null $P5004, vivi_15474735
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15474735:
    set $P5003, $P5004
  fallback4733:
    set $P5010, _lex_param_0["identifier"]
    unless_null $P5010, fallback4736
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5011
  fallback4736:
    repr_clone $P5009, $P5010
    $P5012 = $P5003."find_sym"($P5009)
    set $P101, $P5012
    box $P5013, 1
    set $P102, $P5013
    set $P5015, $P102
    pop_eh 
    goto skip_handler_15484737
  catch_handler_15494738:
    .get_results ($P5014) 
    set $I10001, 1
    set $P5014["handled"], $I10001
    nqp_get_sc_object $P10001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    finalize $P5014
    pop_upto_eh $P5014
    pop_eh 
    set $P5015, $P10001
    goto skip_handler_15484737
  skip_handler_15484737:
    unless $P102 goto if1550_else4739 
.annotate 'line', 2235
.annotate 'line', 2236
    find_dynamic_lex $P5016, "$*W"
    unless_null $P5016, fallback4741
    nqp_get_sc_object $P5019, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["$W"]
    unless_null $P5017, fallback4742
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5020
  fallback4742:
    unless_null $P5017, vivi_15514743
    die "Contextual $*W not found"
    box $P5021, "Contextual $*W not found"
    set $P5017, $P5021
  vivi_15514743:
    set $P5016, $P5017
  fallback4741:
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback4744
    nqp_get_sc_object $P5025, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback4745
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5023, $P5026
  fallback4745:
    unless_null $P5023, vivi_15524746
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_15524746:
    set $P5022, $P5023
  fallback4744:
    $P5028 = $P5016."pkg_add_parent_or_role"($P5022, "add_role", $P101)
    set $P5032, $P5028
    goto if1550_end4740
  if1550_else4739:
.annotate 'line', 2238
.annotate 'line', 2239
    find_lex $P5029, "$/"
    $P5030 = $P5029."CURSOR"()
    set $S5003, _lex_param_0
    concat $S5002, "Could not find role '", $S5003
    concat $S5001, $S5002, "'"
    $P5031 = $P5030."panic"($S5001)
    set $P5032, $P5031
  if1550_end4740:
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "role_params" :subid("cuid_295_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2260
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5009 = 'cuid_466_1360426903.566' 
    capture_lex $P5009 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4780
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5005
  fallback4780:
    set $P5004, _lex_param_1["variable"]
    unless_null $P5004, fallback4781
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5006
  fallback4781:
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next4785:
    unless $P5003, for_done4787
    shift $P5008, $P5003
  for_redo4786:
    .const 'Sub' $P5007 = 'cuid_466_1360426903.566' 
    capture_lex $P5007
    $P5001 = $P5007($P5008)
    goto for_next4785
  for_done4787:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_466_1360426903.566") :anon :lex :outer("cuid_295_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2261
    .param pmc _lex_param_0 
    .lex "$var", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 2262
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
.annotate 'line', 2263
    $P101."scope"("lexical")
.annotate 'line', 2264
    $P101."decl"("param")
.annotate 'line', 2265
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4782
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4783
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5007
  fallback4783:
    unless_null $P5004, vivi_15634784
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15634784:
    set $P5003, $P5004
  fallback4782:
    $P5009 = $P5003."cur_lexpad"()
    $P5010 = $P101."name"()
    $P5011 = $P5009."symbol"($P5010, "lexical" :named("scope"))
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_296_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2269
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4788
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4788:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4789
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4789:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_297_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2270
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4790
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4790:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4791
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4791:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_298_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2271
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4792
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4792:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4793
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4793:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_299_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2273
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2274
    unless_null _lex_param_1, fallback4796
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4796:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4797
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4797:
    unless $P5001 goto if1564_else4794 
    unless_null _lex_param_1, fallback4798
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5005
  fallback4798:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4799
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5006
  fallback4799:
    $P5007 = $P5004."ast"()
    set $P5020, $P5007
    goto if1564_end4795
  if1564_else4794:
    unless_null _lex_param_1, fallback4802
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5009
  fallback4802:
    set $P5008, _lex_param_1["multi_declarator"]
    unless_null $P5008, fallback4803
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5010
  fallback4803:
    unless $P5008 goto if1565_else4800 
.annotate 'line', 2275
    unless_null _lex_param_1, fallback4804
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5012
  fallback4804:
    set $P5011, _lex_param_1["multi_declarator"]
    unless_null $P5011, fallback4805
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5013
  fallback4805:
    $P5014 = $P5011."ast"()
    set $P5019, $P5014
    goto if1565_end4801
  if1565_else4800:
.annotate 'line', 2276
    unless_null _lex_param_1, fallback4806
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5016
  fallback4806:
    set $P5015, _lex_param_1["package_declarator"]
    unless_null $P5015, fallback4807
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5015, $P5017
  fallback4807:
    $P5018 = $P5015."ast"()
    set $P5019, $P5018
  if1565_end4801:
    set $P5020, $P5019
  if1564_end4795:
    $P5021 = _lex_param_1."!make"($P5020)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_300_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2279
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2280
    unless_null _lex_param_1, fallback4810
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4810:
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4811
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4811:
    unless $P5001 goto if1566_else4808 
.annotate 'line', 2281
    unless_null _lex_param_1, fallback4812
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5005
  fallback4812:
    set $P5004, _lex_param_1["routine_declarator"]
    unless_null $P5004, fallback4813
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5006
  fallback4813:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1566_end4809
  if1566_else4808:
.annotate 'line', 2282
    unless_null _lex_param_1, fallback4814
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5009
  fallback4814:
    set $P5008, _lex_param_1["variable_declarator"]
    unless_null $P5008, fallback4815
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5010
  fallback4815:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1566_end4809:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_301_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2285
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4818
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4818:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4819
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4819:
    unless $P5001 goto if1567_else4816 
    unless_null _lex_param_1, fallback4820
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5005
  fallback4820:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4821
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5006
  fallback4821:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1567_end4817
  if1567_else4816:
    unless_null _lex_param_1, fallback4822
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5009
  fallback4822:
    set $P5008, _lex_param_1["routine_def"]
    unless_null $P5008, fallback4823
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5010
  fallback4823:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1567_end4817:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_302_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2286
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4826
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4826:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4827
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4827:
    unless $P5001 goto if1568_else4824 
    unless_null _lex_param_1, fallback4828
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5005
  fallback4828:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4829
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5006
  fallback4829:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1568_end4825
  if1568_else4824:
    unless_null _lex_param_1, fallback4830
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5009
  fallback4830:
    set $P5008, _lex_param_1["routine_def"]
    unless_null $P5008, fallback4831
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5010
  fallback4831:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1568_end4825:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_303_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2287
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4832
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4832:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4833
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4833:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_304_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2290
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5073 = 'cuid_467_1360426903.566' 
    capture_lex $P5073 
    .const 'Sub' $P5073 = 'cuid_469_1360426903.566' 
    capture_lex $P5073 
    .const 'Sub' $P5073 = 'cuid_470_1360426903.566' 
    capture_lex $P5073 
    .lex "$past", $P101 
    .lex "$sigil", $P102 
    .lex "$name", $P103 
    .lex "$BLOCK", $P104 
    .lex "$*DECLARAND_ATTR", $P105 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P104, $P5004
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P105, $P5005
.annotate 'line', 2291
    unless_null _lex_param_1, fallback4834
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5007
  fallback4834:
    set $P5006, _lex_param_1["variable"]
    unless_null $P5006, fallback4835
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5008
  fallback4835:
    $P5009 = $P5006."ast"()
    set $P101, $P5009
    unless_null _lex_param_1, fallback4836
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5012
  fallback4836:
    set $P5011, _lex_param_1["variable"]
    unless_null $P5011, fallback4837
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5013
  fallback4837:
    set $P5010, $P5011["sigil"]
    unless_null $P5010, fallback4838
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5014
  fallback4838:
    set $P102, $P5010
.annotate 'line', 2293
    $P5015 = $P101."name"()
    set $P103, $P5015
.annotate 'line', 2294
    find_dynamic_lex $P5016, "$*W"
    unless_null $P5016, fallback4839
    nqp_get_sc_object $P5019, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["$W"]
    unless_null $P5017, fallback4840
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5020
  fallback4840:
    unless_null $P5017, vivi_15694841
    die "Contextual $*W not found"
    box $P5021, "Contextual $*W not found"
    set $P5017, $P5021
  vivi_15694841:
    set $P5016, $P5017
  fallback4839:
    $P5022 = $P5016."cur_lexpad"()
    set $P104, $P5022
    set $P5029, $P103
    unless $P103 goto if1572_end4848 
.annotate 'line', 2296
    $P5028 = $P104."symbol"($P103)
    set $P5029, $P5028
  if1572_end4848:
    unless $P5029 goto if1571_end4846 
.annotate 'line', 2297
    $P5030 = _lex_param_1."CURSOR"()
    $P5031 = $P5030."panic"("Redeclaration of symbol ", $P103)
  if1571_end4846:
    find_dynamic_lex $P5032, "$*SCOPE"
    unless_null $P5032, fallback4851
    nqp_get_sc_object $P5035, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5034, $P5035
    set $P5033, $P5034["$SCOPE"]
    unless_null $P5033, fallback4852
    nqp_get_sc_object $P5036, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5033, $P5036
  fallback4852:
    unless_null $P5033, vivi_15744853
    die "Contextual $*SCOPE not found"
    box $P5037, "Contextual $*SCOPE not found"
    set $P5033, $P5037
  vivi_15744853:
    set $P5032, $P5033
  fallback4851:
    set $S5001, $P5032
    iseq $I5001, $S5001, "has"
    unless $I5001 goto if1573_else4849 
    .const 'Sub' $P5038 = 'cuid_467_1360426903.566' 
    capture_lex $P5038
    $P5039 = $P5038()
    goto if1573_end4850
  if1573_else4849:
    find_dynamic_lex $P5040, "$*SCOPE"
    unless_null $P5040, fallback4905
    nqp_get_sc_object $P5043, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5042, $P5043
    set $P5041, $P5042["$SCOPE"]
    unless_null $P5041, fallback4906
    nqp_get_sc_object $P5044, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5041, $P5044
  fallback4906:
    unless_null $P5041, vivi_15924907
    die "Contextual $*SCOPE not found"
    box $P5045, "Contextual $*SCOPE not found"
    set $P5041, $P5045
  vivi_15924907:
    set $P5040, $P5041
  fallback4905:
    set $S5002, $P5040
    iseq $I5002, $S5002, "our"
    unless $I5002 goto if1591_else4903 
.annotate 'line', 2327
    unless_null _lex_param_1, fallback4910
    nqp_get_sc_object $P5047, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5047
  fallback4910:
    set $P5046, _lex_param_1["typename"]
    unless_null $P5046, fallback4911
    nqp_get_sc_object $P5048, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5046, $P5048
  fallback4911:
    unless $P5046 goto if1593_end4909 
.annotate 'line', 2331
.annotate 'line', 2332
    $P5049 = _lex_param_1."CURSOR"()
    $P5050 = $P5049."panic"("Cannot put types on our-scoped variables")
  if1593_end4909:
    unless_null _lex_param_1, fallback4912
    nqp_get_sc_object $P5052, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5052
  fallback4912:
    set $P5051, _lex_param_1["variable"]
    unless_null $P5051, fallback4913
    nqp_get_sc_object $P5053, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5051, $P5053
  fallback4913:
    set $S5003, $P5051
    box $P5054, $S5003
    set $P103, $P5054
.annotate 'line', 2335
    new $P5055, 'ResizablePMCArray'
    push $P5055, $P103
    $P5056 = "&lexical_package_lookup"($P5055, _lex_param_1)
    set $P101, $P5056
.annotate 'line', 2336
    $P5057 = $P104."symbol"($P103, "package" :named("scope"))
    set $P5060, $P5057
    goto if1591_end4904
  if1591_else4903:
    .const 'Sub' $P5058 = 'cuid_469_1360426903.566' 
    capture_lex $P5058
    $P5059 = $P5058()
    set $P5060, $P5059
  if1591_end4904:
  if1573_end4850:
    unless_null _lex_param_1, fallback4933
    nqp_get_sc_object $P5062, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5062
  fallback4933:
    set $P5061, _lex_param_1["trait"]
    unless_null $P5061, fallback4934
    nqp_get_sc_object $P5063, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5061, $P5063
  fallback4934:
    unless $P5061 goto if1598_end4932 
.annotate 'line', 2365
    unless_null _lex_param_1, fallback4935
    nqp_get_sc_object $P5068, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5068
  fallback4935:
    set $P5067, _lex_param_1["trait"]
    unless_null $P5067, fallback4936
    nqp_get_sc_object $P5069, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5067, $P5069
  fallback4936:
    set $P5064, $P5067
    iter $P5066, $P5067
  for_next4937:
    unless $P5066, for_done4939
    shift $P5071, $P5066
  for_redo4938:
    .const 'Sub' $P5070 = 'cuid_470_1360426903.566' 
    capture_lex $P5070
    $P5064 = $P5070($P5071)
    goto for_next4937
  for_done4939:
  if1598_end4932:
.annotate 'line', 2369
    $P5072 = _lex_param_1."!make"($P101)
    .return ($P5072) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_467_1360426903.566") :anon :lex :outer("cuid_304_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2299
    .lex "%lit_args", $P101 
    .lex "%obj_args", $P102 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    find_dynamic_lex $P5003, "%*HOW"
    unless_null $P5003, fallback4856
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%HOW"]
    unless_null $P5004, fallback4857
    nqp_get_sc_object $P5008, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%HOW"], $P5009
    set $P5004, $P5009
  fallback4857:
    unless_null $P5004, vivi_15764858
    die "Contextual %*HOW not found"
    box $P5010, "Contextual %*HOW not found"
    set $P5004, $P5010
  vivi_15764858:
    set $P5003, $P5004
  fallback4856:
    find_dynamic_lex $P5011, "$*PKGDECL"
    unless_null $P5011, fallback4859
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$PKGDECL"]
    unless_null $P5012, fallback4860
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5015
  fallback4860:
    unless_null $P5012, vivi_15774861
    die "Contextual $*PKGDECL not found"
    box $P5016, "Contextual $*PKGDECL not found"
    set $P5012, $P5016
  vivi_15774861:
    set $P5011, $P5012
  fallback4859:
    set $S5002, $P5011
    concat $S5001, $S5002, "-attr"
    exists $I5001, $P5003[$S5001]
    if $I5001 goto unless1575_end4855 
.annotate 'line', 2301
.annotate 'line', 2302
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    find_dynamic_lex $P5019, "$*PKGDECL"
    unless_null $P5019, fallback4862
    nqp_get_sc_object $P5022, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$PKGDECL"]
    unless_null $P5020, fallback4863
    nqp_get_sc_object $P5023, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5023
  fallback4863:
    unless_null $P5020, vivi_15784864
    die "Contextual $*PKGDECL not found"
    box $P5024, "Contextual $*PKGDECL not found"
    set $P5020, $P5024
  vivi_15784864:
    set $P5019, $P5020
  fallback4862:
    set $S5004, $P5019
    concat $S5003, $S5004, " packages do not support attributes"
    $P5025 = $P5018."panic"($S5003)
  unless1575_end4855:
    find_lex $P5026, "$name"
    set $P101["name"], $P5026
    find_lex $P5028, "$/"
    unless_null $P5028, fallback4867
    nqp_get_sc_object $P5029, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5028, $P5029
  fallback4867:
    set $P5027, $P5028["typename"]
    unless_null $P5027, fallback4868
    nqp_get_sc_object $P5030, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5027, $P5030
  fallback4868:
    unless $P5027 goto if1579_end4866 
.annotate 'line', 2309
.annotate 'line', 2310
    find_dynamic_lex $P5031, "$*W"
    unless_null $P5031, fallback4869
    nqp_get_sc_object $P5034, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$W"]
    unless_null $P5032, fallback4870
    nqp_get_sc_object $P5035, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5032, $P5035
  fallback4870:
    unless_null $P5032, vivi_15804871
    die "Contextual $*W not found"
    box $P5036, "Contextual $*W not found"
    set $P5032, $P5036
  vivi_15804871:
    set $P5031, $P5032
  fallback4869:
    new $P5037, 'ResizablePMCArray'
    find_lex $P5040, "$/"
    unless_null $P5040, fallback4872
    nqp_get_sc_object $P5041, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5040, $P5041
  fallback4872:
    set $P5039, $P5040["typename"]
    unless_null $P5039, fallback4873
    nqp_get_sc_object $P5042, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5039, $P5042
  fallback4873:
    set $P5038, $P5039[0]
    unless_null $P5038, fallback4874
    nqp_get_sc_object $P5043, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5038, $P5043
  fallback4874:
    set $S5005, $P5038
    box $P5044, $S5005
    push $P5037, $P5044
    $P5045 = $P5031."find_sym"($P5037)
    set $P102["type"], $P5045
  if1579_end4866:
    find_lex $P5046, "$sigil"
    set $S5006, $P5046
    iseq $I5002, $S5006, "$"
    set $I5004, $I5002
    if $I5002 goto unless1582_end4878 
    find_lex $P5047, "$sigil"
    set $S5007, $P5047
    iseq $I5003, $S5007, "&"
    set $I5004, $I5003
  unless1582_end4878:
    unless $I5004 goto if1581_end4876 
.annotate 'line', 2312
    find_lex $P5049, "$/"
    unless_null $P5049, fallback4881
    nqp_get_sc_object $P5050, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5049, $P5050
  fallback4881:
    set $P5048, $P5049["typename"]
    unless_null $P5048, fallback4882
    nqp_get_sc_object $P5051, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5048, $P5051
  fallback4882:
    unless $P5048 goto if1583_else4879 
.annotate 'line', 2313
    set $P5052, $P102["type"]
    unless_null $P5052, fallback4883
    nqp_get_sc_object $P5053, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5052, $P5053
  fallback4883:
    set $P102["default"], $P5052
    set $P5065, $P5052
    goto if1583_end4880
  if1583_else4879:
.annotate 'line', 2316
    new $P5063, 'ExceptionHandler'
    set_label $P5063, catch_handler_15864888
    $P5063.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5063
.annotate 'line', 2317
    find_dynamic_lex $P5054, "$*W"
    unless_null $P5054, fallback4884
    nqp_get_sc_object $P5057, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["$W"]
    unless_null $P5055, fallback4885
    nqp_get_sc_object $P5058, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5055, $P5058
  fallback4885:
    unless_null $P5055, vivi_15844886
    die "Contextual $*W not found"
    box $P5059, "Contextual $*W not found"
    set $P5055, $P5059
  vivi_15844886:
    set $P5054, $P5055
  fallback4884:
    new $P5060, 'ResizablePMCArray'
    box $P5061, "NQPMu"
    push $P5060, $P5061
    $P5062 = $P5054."find_sym"($P5060)
    set $P102["default"], $P5062
    set $P5064, $P5062
    pop_eh 
    goto skip_handler_15854887
  catch_handler_15864888:
    .get_results ($P5063) 
    set $I10001, 1
    set $P5063["handled"], $I10001
    nqp_get_sc_object $P10001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    finalize $P5063
    pop_upto_eh $P5063
    pop_eh 
    set $P5064, $P10001
    goto skip_handler_15854887
  skip_handler_15854887:
    set $P5065, $P5064
  if1583_end4880:
  if1581_end4876:
.annotate 'line', 2322
    find_dynamic_lex $P5066, "$*W"
    unless_null $P5066, fallback4889
    nqp_get_sc_object $P5069, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5068, $P5069
    set $P5067, $P5068["$W"]
    unless_null $P5067, fallback4890
    nqp_get_sc_object $P5070, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5067, $P5070
  fallback4890:
    unless_null $P5067, vivi_15874891
    die "Contextual $*W not found"
    box $P5071, "Contextual $*W not found"
    set $P5067, $P5071
  vivi_15874891:
    set $P5066, $P5067
  fallback4889:
    find_dynamic_lex $P5072, "$*PACKAGE"
    unless_null $P5072, fallback4892
    nqp_get_sc_object $P5075, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5074, $P5075
    set $P5073, $P5074["$PACKAGE"]
    unless_null $P5073, fallback4893
    nqp_get_sc_object $P5076, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5073, $P5076
  fallback4893:
    unless_null $P5073, vivi_15884894
    die "Contextual $*PACKAGE not found"
    box $P5077, "Contextual $*PACKAGE not found"
    set $P5073, $P5077
  vivi_15884894:
    set $P5072, $P5073
  fallback4892:
    find_dynamic_lex $P5079, "%*HOW"
    unless_null $P5079, fallback4895
    nqp_get_sc_object $P5082, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5081, $P5082
    set $P5080, $P5081["%HOW"]
    unless_null $P5080, fallback4896
    nqp_get_sc_object $P5084, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5083, $P5084
    new $P5085, 'Hash'
    set $P5083["%HOW"], $P5085
    set $P5080, $P5085
  fallback4896:
    unless_null $P5080, vivi_15894897
    die "Contextual %*HOW not found"
    box $P5086, "Contextual %*HOW not found"
    set $P5080, $P5086
  vivi_15894897:
    set $P5079, $P5080
  fallback4895:
    find_dynamic_lex $P5087, "$*PKGDECL"
    unless_null $P5087, fallback4898
    nqp_get_sc_object $P5090, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5089, $P5090
    set $P5088, $P5089["$PKGDECL"]
    unless_null $P5088, fallback4899
    nqp_get_sc_object $P5091, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5088, $P5091
  fallback4899:
    unless_null $P5088, vivi_15904900
    die "Contextual $*PKGDECL not found"
    box $P5092, "Contextual $*PKGDECL not found"
    set $P5088, $P5092
  vivi_15904900:
    set $P5087, $P5088
  fallback4898:
    set $S5009, $P5087
    concat $S5008, $S5009, "-attr"
    set $P5078, $P5079[$S5008]
    unless_null $P5078, fallback4901
    nqp_get_sc_object $P5093, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5078, $P5093
  fallback4901:
    $P5094 = $P5066."pkg_add_attribute"($P5072, $P5078, $P101, $P102)
    store_dynamic_lex "$*DECLARAND_ATTR", $P5094
.annotate 'line', 2325
    nqp_get_sc_object $P5098, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5097, $P5098, "QAST"
    get_who $P5096, $P5097
    set $P5095, $P5096["Stmts"]
    unless_null $P5095, fallback4902
    nqp_get_sc_object $P5099, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5095, $P5099
  fallback4902:
    $P5100 = $P5095."new"()
    store_lex "$past", $P5100
    .return ($P5100) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_469_1360426903.566") :anon :lex :outer("cuid_304_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2338
    .const 'Sub' $P5054 = 'cuid_468_1360426903.566' 
    capture_lex $P5054 
    .lex "$type", $P101 
    .lex "$default", $P102 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4916
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5005
  fallback4916:
    set $P5003, $P5004["typename"]
    unless_null $P5003, fallback4917
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5006
  fallback4917:
    unless $P5003 goto if1594_else4914 
.annotate 'line', 2341
    find_lex $P5007, "$sigil"
    set $S5001, $P5007
    iseq $I5001, $S5001, "$"
    if $I5001 goto unless1595_end4919 
.annotate 'line', 2342
.annotate 'line', 2343
    find_lex $P5008, "$/"
    $P5009 = $P5008."CURSOR"()
    $P5010 = $P5009."panic"("Only typed scalars are currently supported in NQP")
  unless1595_end4919:
.annotate 'line', 2345
    find_dynamic_lex $P5011, "$*W"
    unless_null $P5011, fallback4920
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$W"]
    unless_null $P5012, fallback4921
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5015
  fallback4921:
    unless_null $P5012, vivi_15964922
    die "Contextual $*W not found"
    box $P5016, "Contextual $*W not found"
    set $P5012, $P5016
  vivi_15964922:
    set $P5011, $P5012
  fallback4920:
    new $P5017, 'ResizablePMCArray'
    find_lex $P5020, "$/"
    unless_null $P5020, fallback4923
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5021
  fallback4923:
    set $P5019, $P5020["typename"]
    unless_null $P5019, fallback4924
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5019, $P5022
  fallback4924:
    set $P5018, $P5019[0]
    unless_null $P5018, fallback4925
    nqp_get_sc_object $P5023, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5018, $P5023
  fallback4925:
    set $S5002, $P5018
    box $P5024, $S5002
    push $P5017, $P5024
    $P5025 = $P5011."find_sym"($P5017)
    set $P101, $P5025
    repr_get_primitive_type_spec $I5002, $P101
    unless $I5002 goto if1597_else4926 
    .const 'Sub' $P5026 = 'cuid_468_1360426903.566' 
    capture_lex $P5026
    $P5027 = $P5026($I5002)
    set $P5031, $P5027
    goto if1597_end4927
  if1597_else4926:
.annotate 'line', 2349
.annotate 'line', 2350
    find_lex $P5028, "$/"
    $P5029 = $P5028."CURSOR"()
    $P5030 = $P5029."panic"("Only native types are currently supported/checked")
    set $P5031, $P5030
  if1597_end4927:
    goto if1594_end4915
  if1594_else4914:
.annotate 'line', 2353
.annotate 'line', 2354
    find_lex $P5032, "$sigil"
    $P5033 = "&default_for"($P5032)
    set $P102, $P5033
  if1594_end4915:
.annotate 'line', 2356
    find_lex $P5035, "$BLOCK"
    set $P5034, $P5035[0]
    unless_null $P5034, fallback4928
    nqp_get_sc_object $P5036, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5034, $P5036
  fallback4928:
    nqp_get_sc_object $P5040, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Op"]
    unless_null $P5037, fallback4929
    nqp_get_sc_object $P5041, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5037, $P5041
  fallback4929:
    find_lex $P5042, "$/"
.annotate 'line', 2358
    nqp_get_sc_object $P5046, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Var"]
    unless_null $P5043, fallback4930
    nqp_get_sc_object $P5047, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5043, $P5047
  fallback4930:
    find_lex $P5048, "$name"
    $P5049 = $P5043."new"($P5048 :named("name"), "lexical" :named("scope"), "var" :named("decl"), $P101 :named("returns"))
    $P5050 = $P5037."new"($P5049, $P102, "bind" :named("op"), $P5042 :named("node"))
    $P5034."push"($P5050)
.annotate 'line', 2361
    find_lex $P5051, "$BLOCK"
    find_lex $P5052, "$name"
    $P5053 = $P5051."symbol"($P5052, "lexical" :named("scope"), $P101 :named("type"))
    .return ($P5053) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_468_1360426903.566") :anon :lex :outer("cuid_469_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2346
    .param pmc _lex_param_0 
    .lex "$prim_spec", _lex_param_0 
.annotate 'line', 2347
    $P5001 = "&default_value_for_prim"(_lex_param_0)
    store_lex "$default", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_470_1360426903.566") :anon :lex :outer("cuid_304_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2366
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_305_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2372
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4940
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4940:
    set $P5001, _lex_param_1["routine_def"]
    unless_null $P5001, fallback4941
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4941:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_306_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2373
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4942
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback4942:
    set $P5001, _lex_param_1["method_def"]
    unless_null $P5001, fallback4943
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback4943:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_307_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2375
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5060 = 'cuid_474_1360426903.566' 
    capture_lex $P5060 
    .const 'Sub' $P5060 = 'cuid_477_1360426903.566' 
    capture_lex $P5060 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "$lexpast", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P103, $P5003
    unless_null _lex_param_1, fallback4946
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5005
  fallback4946:
    set $P5004, _lex_param_1["onlystar"]
    unless_null $P5004, fallback4947
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5006
  fallback4947:
    unless $P5004 goto if1599_else4944 
.annotate 'line', 2379
.annotate 'line', 2380
    $P5007 = "&only_star_block"()
    set $P101, $P5007
    goto if1599_end4945
  if1599_else4944:
.annotate 'line', 2382
.annotate 'line', 2383
    unless_null _lex_param_1, fallback4948
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5009
  fallback4948:
    set $P5008, _lex_param_1["blockoid"]
    unless_null $P5008, fallback4949
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5010
  fallback4949:
    $P5011 = $P5008."ast"()
    set $P101, $P5011
.annotate 'line', 2384
    $P101."blocktype"("declaration")
    find_dynamic_lex $P5012, "$*RETURN_USED"
    unless_null $P5012, fallback4952
    nqp_get_sc_object $P5015, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$RETURN_USED"]
    unless_null $P5013, fallback4953
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5016
  fallback4953:
    unless_null $P5013, vivi_16014954
    die "Contextual $*RETURN_USED not found"
    box $P5017, "Contextual $*RETURN_USED not found"
    set $P5013, $P5017
  vivi_16014954:
    set $P5012, $P5013
  fallback4952:
    set $P5021, $P5012
    unless $P5012 goto if1600_end4951 
.annotate 'line', 2385
.annotate 'line', 2386
    set $P5018, $P101[1]
    unless_null $P5018, fallback4955
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5018, $P5019
  fallback4955:
    $P5020 = "&wrap_return_handler"($P5018)
    set $P101[1], $P5020
    set $P5021, $P5020
  if1600_end4951:
  if1599_end4945:
    set $P102, $P101
    unless_null _lex_param_1, fallback4958
    nqp_get_sc_object $P5023, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5023
  fallback4958:
    set $P5022, _lex_param_1["deflongname"]
    unless_null $P5022, fallback4959
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5022, $P5024
  fallback4959:
    unless $P5022 goto if1602_else4956 
    .const 'Sub' $P5025 = 'cuid_474_1360426903.566' 
    capture_lex $P5025
    $P5026 = $P5025()
    goto if1602_end4957
  if1602_else4956:
.annotate 'line', 2496
.annotate 'line', 2497
    find_dynamic_lex $P5027, "$*W"
    unless_null $P5027, fallback5080
    nqp_get_sc_object $P5030, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["$W"]
    unless_null $P5028, fallback5081
    nqp_get_sc_object $P5031, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5028, $P5031
  fallback5081:
    unless_null $P5028, vivi_16375082
    die "Contextual $*W not found"
    box $P5032, "Contextual $*W not found"
    set $P5028, $P5032
  vivi_16375082:
    set $P5027, $P5028
  fallback5080:
    $P5033 = $P5027."is_precompilation_mode"()
    set $P5041, $P5033
    unless $P5033 goto if1636_end5079 
.annotate 'line', 2498
    find_dynamic_lex $P5034, "$*W"
    unless_null $P5034, fallback5083
    nqp_get_sc_object $P5037, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5036, $P5037
    set $P5035, $P5036["$W"]
    unless_null $P5035, fallback5084
    nqp_get_sc_object $P5038, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5035, $P5038
  fallback5084:
    unless_null $P5035, vivi_16385085
    die "Contextual $*W not found"
    box $P5039, "Contextual $*W not found"
    set $P5035, $P5039
  vivi_16385085:
    set $P5034, $P5035
  fallback5083:
    $P5040 = $P5034."create_code"($P101, "<anon>", 0)
    set $P5041, $P5040
  if1636_end5079:
  if1602_end4957:
.annotate 'line', 2502
    nqp_get_sc_object $P5045, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Op"]
    unless_null $P5042, fallback5086
    nqp_get_sc_object $P5046, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5042, $P5046
  fallback5086:
    $P5047 = $P5042."new"($P101, "takeclosure" :named("op"))
    set $P103, $P5047
    set $P103["sink"], $P101
    set $P103["block_past"], $P102
.annotate 'line', 2505
    _lex_param_1."!make"($P103)
    unless_null _lex_param_1, fallback5089
    nqp_get_sc_object $P5049, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5049
  fallback5089:
    set $P5048, _lex_param_1["trait"]
    unless_null $P5048, fallback5090
    nqp_get_sc_object $P5050, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5048, $P5050
  fallback5090:
    set $P5059, $P5048
    unless $P5048 goto if1639_end5088 
.annotate 'line', 2508
    unless_null _lex_param_1, fallback5091
    nqp_get_sc_object $P5055, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5055
  fallback5091:
    set $P5054, _lex_param_1["trait"]
    unless_null $P5054, fallback5092
    nqp_get_sc_object $P5056, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5054, $P5056
  fallback5092:
    set $P5051, $P5054
    iter $P5053, $P5054
  for_next5093:
    unless $P5053, for_done5095
    shift $P5058, $P5053
  for_redo5094:
    .const 'Sub' $P5057 = 'cuid_477_1360426903.566' 
    capture_lex $P5057
    $P5051 = $P5057($P5058)
    goto for_next5093
  for_done5095:
    set $P5059, $P5051
  if1639_end5088:
    .return ($P5059) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_474_1360426903.566") :anon :lex :outer("cuid_307_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2391
    .const 'Sub' $P5078 = 'cuid_473_1360426903.566' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_475_1360426903.566' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_476_1360426903.566' 
    capture_lex $P5078 
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4960
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5005
  fallback4960:
    set $P5003, $P5004["sigil"]
    unless_null $P5003, fallback4961
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5006
  fallback4961:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback4962
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5007
  fallback4962:
    set $S5002, $P5002
.annotate 'line', 2392
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4963
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5011
  fallback4963:
    set $P5009, $P5010["deflongname"]
    unless_null $P5009, fallback4964
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5012
  fallback4964:
    set $P5008, $P5009[0]
    unless_null $P5008, fallback4965
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5013
  fallback4965:
    $P5014 = $P5008."ast"()
    set $S5003, $P5014
    concat $S5001, $S5002, $S5003
    box $P5015, $S5001
    set $P101, $P5015
.annotate 'line', 2393
    find_lex $P5016, "$past"
    $P5016."name"($P101)
    find_dynamic_lex $P5017, "$*SCOPE"
    unless_null $P5017, fallback4972
    nqp_get_sc_object $P5020, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5019, $P5020
    set $P5018, $P5019["$SCOPE"]
    unless_null $P5018, fallback4973
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5018, $P5021
  fallback4973:
    unless_null $P5018, vivi_16064974
    die "Contextual $*SCOPE not found"
    box $P5022, "Contextual $*SCOPE not found"
    set $P5018, $P5022
  vivi_16064974:
    set $P5017, $P5018
  fallback4972:
    set $S5004, $P5017
    iseq $I5001, $S5004, ""
    set $I5003, $I5001
    if $I5001 goto unless1605_end4971 
    find_dynamic_lex $P5023, "$*SCOPE"
    unless_null $P5023, fallback4975
    nqp_get_sc_object $P5026, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5025, $P5026
    set $P5024, $P5025["$SCOPE"]
    unless_null $P5024, fallback4976
    nqp_get_sc_object $P5027, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5024, $P5027
  fallback4976:
    unless_null $P5024, vivi_16074977
    die "Contextual $*SCOPE not found"
    box $P5028, "Contextual $*SCOPE not found"
    set $P5024, $P5028
  vivi_16074977:
    set $P5023, $P5024
  fallback4975:
    set $S5005, $P5023
    iseq $I5002, $S5005, "my"
    set $I5003, $I5002
  unless1605_end4971:
    set $I5005, $I5003
    if $I5003 goto unless1604_end4969 
    find_dynamic_lex $P5029, "$*SCOPE"
    unless_null $P5029, fallback4978
    nqp_get_sc_object $P5032, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["$SCOPE"]
    unless_null $P5030, fallback4979
    nqp_get_sc_object $P5033, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5030, $P5033
  fallback4979:
    unless_null $P5030, vivi_16084980
    die "Contextual $*SCOPE not found"
    box $P5034, "Contextual $*SCOPE not found"
    set $P5030, $P5034
  vivi_16084980:
    set $P5029, $P5030
  fallback4978:
    set $S5006, $P5029
    iseq $I5004, $S5006, "our"
    set $I5005, $I5004
  unless1604_end4969:
    unless $I5005 goto if1603_else4966 
.annotate 'line', 2394
    find_dynamic_lex $P5035, "$*MULTINESS"
    unless_null $P5035, fallback4983
    nqp_get_sc_object $P5038, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5037, $P5038
    set $P5036, $P5037["$MULTINESS"]
    unless_null $P5036, fallback4984
    nqp_get_sc_object $P5039, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5036, $P5039
  fallback4984:
    unless_null $P5036, vivi_16104985
    die "Contextual $*MULTINESS not found"
    box $P5040, "Contextual $*MULTINESS not found"
    set $P5036, $P5040
  vivi_16104985:
    set $P5035, $P5036
  fallback4983:
    set $S5007, $P5035
    iseq $I5006, $S5007, "multi"
    unless $I5006 goto if1609_else4981 
    .const 'Sub' $P5041 = 'cuid_473_1360426903.566' 
    capture_lex $P5041
    $P5042 = $P5041()
    goto if1609_end4982
  if1609_else4981:
    find_dynamic_lex $P5043, "$*MULTINESS"
    unless_null $P5043, fallback5021
    nqp_get_sc_object $P5046, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$MULTINESS"]
    unless_null $P5044, fallback5022
    nqp_get_sc_object $P5047, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5044, $P5047
  fallback5022:
    unless_null $P5044, vivi_16225023
    die "Contextual $*MULTINESS not found"
    box $P5048, "Contextual $*MULTINESS not found"
    set $P5044, $P5048
  vivi_16225023:
    set $P5043, $P5044
  fallback5021:
    set $S5008, $P5043
    iseq $I5007, $S5008, "proto"
    unless $I5007 goto if1621_else5019 
    .const 'Sub' $P5049 = 'cuid_475_1360426903.566' 
    capture_lex $P5049
    $P5050 = $P5049()
    set $P5053, $P5050
    goto if1621_end5020
  if1621_else5019:
    .const 'Sub' $P5051 = 'cuid_476_1360426903.566' 
    capture_lex $P5051
    $P5052 = $P5051()
    set $P5053, $P5052
  if1621_end5020:
  if1609_end4982:
.annotate 'line', 2485
    nqp_get_sc_object $P5057, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Var"]
    unless_null $P5054, fallback5067
    nqp_get_sc_object $P5058, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5054, $P5058
  fallback5067:
    set $S5010, $P101
    concat $S5009, "&", $S5010
    $P5059 = $P5054."new"($S5009 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5059
    goto if1603_end4967
  if1603_else4966:
.annotate 'line', 2487
.annotate 'line', 2488
    find_lex $P5060, "$/"
    $P5061 = $P5060."CURSOR"()
    find_dynamic_lex $P5062, "$*SCOPE"
    unless_null $P5062, fallback5068
    nqp_get_sc_object $P5065, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$SCOPE"]
    unless_null $P5063, fallback5069
    nqp_get_sc_object $P5066, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5063, $P5066
  fallback5069:
    unless_null $P5063, vivi_16325070
    die "Contextual $*SCOPE not found"
    box $P5067, "Contextual $*SCOPE not found"
    set $P5063, $P5067
  vivi_16325070:
    set $P5062, $P5063
  fallback5068:
    set $S5012, $P5062
    concat $S5011, $S5012, " scoped routines are not supported yet"
    $P5068 = $P5061."panic"($S5011)
  if1603_end4967:
    set $S5013, $P101
    iseq $I5008, $S5013, "MAIN"
    set $I5010, $I5008
    unless $I5008 goto if1634_end5074 
    find_dynamic_lex $P5069, "$*MULTINESS"
    unless_null $P5069, fallback5075
    nqp_get_sc_object $P5072, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5071, $P5072
    set $P5070, $P5071["$MULTINESS"]
    unless_null $P5070, fallback5076
    nqp_get_sc_object $P5073, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5070, $P5073
  fallback5076:
    unless_null $P5070, vivi_16355077
    die "Contextual $*MULTINESS not found"
    box $P5074, "Contextual $*MULTINESS not found"
    set $P5070, $P5074
  vivi_16355077:
    set $P5069, $P5070
  fallback5075:
    set $S5014, $P5069
    isne $I5009, $S5014, "multi"
    set $I5010, $I5009
  if1634_end5074:
    box $P5077, $I5010
    set $P5076, $P5077
    unless $I5010 goto if1633_end5072 
.annotate 'line', 2492
    find_lex $P5075, "$block"
    store_dynamic_lex "$*MAIN_SUB", $P5075
    set $P5076, $P5075
  if1633_end5072:
    .return ($P5076) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_473_1360426903.566") :anon :lex :outer("cuid_474_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2395
    .const 'Sub' $P5048 = 'cuid_472_1360426903.566' 
    capture_lex $P5048 
    .lex "$proto", $P101 
    .lex "%sym", $P102 
    .lex "$code", $P103 
    .lex "$BLOCK", $P104 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P104, $P5004
    find_dynamic_lex $P5005, "$*SCOPE"
    unless_null $P5005, fallback4988
    nqp_get_sc_object $P5008, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$SCOPE"]
    unless_null $P5006, fallback4989
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5009
  fallback4989:
    unless_null $P5006, vivi_16124990
    die "Contextual $*SCOPE not found"
    box $P5010, "Contextual $*SCOPE not found"
    set $P5006, $P5010
  vivi_16124990:
    set $P5005, $P5006
  fallback4988:
    set $S5001, $P5005
    iseq $I5001, $S5001, "our"
    unless $I5001 goto if1611_end4987 
.annotate 'line', 2397
    box $P5011, "a multi can not be our-scoped"
    die $P5011
  if1611_end4987:
.annotate 'line', 2399
    find_dynamic_lex $P5012, "$*W"
    unless_null $P5012, fallback4991
    nqp_get_sc_object $P5015, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$W"]
    unless_null $P5013, fallback4992
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5016
  fallback4992:
    unless_null $P5013, vivi_16134993
    die "Contextual $*W not found"
    box $P5017, "Contextual $*W not found"
    set $P5013, $P5017
  vivi_16134993:
    set $P5012, $P5013
  fallback4991:
    $P5018 = $P5012."cur_lexpad"()
    find_lex $P5019, "$name"
    set $S5003, $P5019
    concat $S5002, "&", $S5003
    $P5020 = $P5018."symbol"($S5002)
    set $P102, $P5020
    set $P5021, $P102["proto"]
    unless_null $P5021, fallback4996
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5021, $P5022
  fallback4996:
    unless $P5021 goto if1614_else4994 
.annotate 'line', 2400
    set $P5023, $P102["value"]
    unless_null $P5023, fallback4997
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5023, $P5024
  fallback4997:
    set $P101, $P5023
    goto if1614_end4995
  if1614_else4994:
    .const 'Sub' $P5025 = 'cuid_472_1360426903.566' 
    capture_lex $P5025
    $P5026 = $P5025()
  if1614_end4995:
.annotate 'line', 2429
    find_dynamic_lex $P5027, "$*W"
    unless_null $P5027, fallback5012
    nqp_get_sc_object $P5030, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["$W"]
    unless_null $P5028, fallback5013
    nqp_get_sc_object $P5031, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5028, $P5031
  fallback5013:
    unless_null $P5028, vivi_16195014
    die "Contextual $*W not found"
    box $P5032, "Contextual $*W not found"
    set $P5028, $P5032
  vivi_16195014:
    set $P5027, $P5028
  fallback5012:
    find_lex $P5033, "$past"
    find_lex $P5034, "$name"
    $P5035 = $P5027."create_code"($P5033, $P5034, 0)
    set $P103, $P5035
.annotate 'line', 2430
    find_lex $P5036, "$past"
    "&attach_multi_signature"($P103, $P5036)
.annotate 'line', 2433
    $P101."add_dispatchee"($P103)
.annotate 'line', 2436
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback5015
    nqp_get_sc_object $P5040, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback5016
    nqp_get_sc_object $P5041, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5038, $P5041
  fallback5016:
    unless_null $P5038, vivi_16205017
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_16205017:
    set $P5037, $P5038
  fallback5015:
    $P5043 = $P5037."cur_lexpad"()
    set $P104, $P5043
.annotate 'line', 2437
    set $P5044, $P104[0]
    unless_null $P5044, fallback5018
    nqp_get_sc_object $P5045, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5044, $P5045
  fallback5018:
    find_lex $P5046, "$past"
    $P5047 = $P5044."push"($P5046)
    .return ($P5047) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_472_1360426903.566") :anon :lex :outer("cuid_473_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2405
    .const 'Sub' $P5018 = 'cuid_471_1360426903.566' 
    capture_lex $P5018 
    .lex "$found_proto", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 2408
    find_dynamic_lex $P5005, "$*W"
    unless_null $P5005, fallback4998
    nqp_get_sc_object $P5008, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$W"]
    unless_null $P5006, fallback4999
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5009
  fallback4999:
    unless_null $P5006, vivi_16155000
    die "Contextual $*W not found"
    box $P5010, "Contextual $*W not found"
    set $P5006, $P5010
  vivi_16155000:
    set $P5005, $P5006
  fallback4998:
    $P5011 = $P5005."get_legacy_block_list"()
    set $P5002, $P5011
    iter $P5004, $P5011
  for_next5007:
    unless $P5004, for_done5009
    shift $P5013, $P5004
  for_redo5008:
    .const 'Sub' $P5012 = 'cuid_471_1360426903.566' 
    capture_lex $P5012
    $P5002 = $P5012($P5013)
    goto for_next5007
  for_done5009:
    if $P101 goto unless1618_end5011 
.annotate 'line', 2420
.annotate 'line', 2421
    find_lex $P5014, "$/"
    $P5015 = $P5014."CURSOR"()
    $P5016 = $P5015."panic"("Sorry, no proto sub in scope, and auto-generation of protos is not yet implemented.")
  unless1618_end5011:
    box $P5017, "Dispatcher derivation NYI"
    die $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_471_1360426903.566") :anon :lex :outer("cuid_472_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2408
    .param pmc _lex_param_0 
    .lex "%sym", $P101 
    .lex "$_", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 2409
    find_lex $P5002, "$name"
    set $S5002, $P5002
    concat $S5001, "&", $S5002
    $P5003 = _lex_param_0."symbol"($S5001)
    set $P101, $P5003
    set $P5004, $P101["proto"]
    unless_null $P5004, fallback5003
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5005
  fallback5003:
    unless $P5004 goto if1616_else5001 
.annotate 'line', 2410
    set $P5006, $P101["value"]
    unless_null $P5006, fallback5004
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5007
  fallback5004:
    store_lex "$proto", $P5006
    box $P5008, 1
    store_lex "$found_proto", $P5008
    set $P5013, $P5008
    goto if1616_end5002
  if1616_else5001:
    set $P5012, $P101
    unless $P101 goto if1617_end5006 
.annotate 'line', 2414
.annotate 'line', 2415
    find_lex $P5009, "$/"
    $P5010 = $P5009."CURSOR"()
    $P5011 = $P5010."panic"("Cannot declare a multi when an only is already in scope.")
    set $P5012, $P5011
  if1617_end5006:
    set $P5013, $P5012
  if1616_end5002:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_475_1360426903.566") :anon :lex :outer("cuid_474_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2439
    .lex "$code", $P101 
    .lex "$BLOCK", $P102 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    find_dynamic_lex $P5003, "$*SCOPE"
    unless_null $P5003, fallback5026
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$SCOPE"]
    unless_null $P5004, fallback5027
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5007
  fallback5027:
    unless_null $P5004, vivi_16245028
    die "Contextual $*SCOPE not found"
    box $P5008, "Contextual $*SCOPE not found"
    set $P5004, $P5008
  vivi_16245028:
    set $P5003, $P5004
  fallback5026:
    set $S5001, $P5003
    iseq $I5001, $S5001, "our"
    unless $I5001 goto if1623_end5025 
.annotate 'line', 2443
    box $P5009, "our-scoped protos not yet implemented"
    die $P5009
  if1623_end5025:
.annotate 'line', 2444
    find_dynamic_lex $P5010, "$*W"
    unless_null $P5010, fallback5029
    nqp_get_sc_object $P5013, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$W"]
    unless_null $P5011, fallback5030
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5014
  fallback5030:
    unless_null $P5011, vivi_16255031
    die "Contextual $*W not found"
    box $P5015, "Contextual $*W not found"
    set $P5011, $P5015
  vivi_16255031:
    set $P5010, $P5011
  fallback5029:
    find_lex $P5016, "$past"
    find_lex $P5017, "$name"
    $P5018 = $P5010."create_code"($P5016, $P5017, 1)
    set $P101, $P5018
.annotate 'line', 2445
    find_dynamic_lex $P5019, "$*W"
    unless_null $P5019, fallback5032
    nqp_get_sc_object $P5022, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$W"]
    unless_null $P5020, fallback5033
    nqp_get_sc_object $P5023, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5023
  fallback5033:
    unless_null $P5020, vivi_16265034
    die "Contextual $*W not found"
    box $P5024, "Contextual $*W not found"
    set $P5020, $P5024
  vivi_16265034:
    set $P5019, $P5020
  fallback5032:
    $P5025 = $P5019."cur_lexpad"()
    set $P102, $P5025
.annotate 'line', 2446
    set $P5026, $P102[0]
    unless_null $P5026, fallback5035
    nqp_get_sc_object $P5027, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5026, $P5027
  fallback5035:
    nqp_get_sc_object $P5031, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["Op"]
    unless_null $P5028, fallback5036
    nqp_get_sc_object $P5032, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5028, $P5032
  fallback5036:
.annotate 'line', 2448
    nqp_get_sc_object $P5036, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Var"]
    unless_null $P5033, fallback5037
    nqp_get_sc_object $P5037, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5033, $P5037
  fallback5037:
    find_lex $P5038, "$name"
    set $S5003, $P5038
    concat $S5002, "&", $S5003
    $P5039 = $P5033."new"($S5002 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5040, "$past"
    $P5041 = $P5028."new"($P5039, $P5040, "bind" :named("op"))
    $P5026."push"($P5041)
.annotate 'line', 2451
    find_lex $P5042, "$name"
    set $S5005, $P5042
    concat $S5004, "&", $S5005
    $P102."symbol"($S5004, "lexical" :named("scope"), 1 :named("proto"), $P101 :named("value"))
.annotate 'line', 2455
    find_lex $P5044, "$block"
    set $P5043, $P5044[0]
    unless_null $P5043, fallback5038
    nqp_get_sc_object $P5045, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5043, $P5045
  fallback5038:
    nqp_get_sc_object $P5049, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["Op"]
    unless_null $P5046, fallback5039
    nqp_get_sc_object $P5050, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5046, $P5050
  fallback5039:
.annotate 'line', 2457
    nqp_get_sc_object $P5054, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5053, $P5054, "QAST"
    get_who $P5052, $P5053
    set $P5051, $P5052["Var"]
    unless_null $P5051, fallback5040
    nqp_get_sc_object $P5055, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5051, $P5055
  fallback5040:
    $P5056 = $P5051."new"("CURRENT_DISPATCH_CAPTURE" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2458
    nqp_get_sc_object $P5060, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5059, $P5060, "QAST"
    get_who $P5058, $P5059
    set $P5057, $P5058["Op"]
    unless_null $P5057, fallback5041
    nqp_get_sc_object $P5061, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5057, $P5061
  fallback5041:
    $P5062 = $P5057."new"("savecapture" :named("op"))
    $P5063 = $P5046."new"($P5056, $P5062, "bind" :named("op"))
    $P5043."push"($P5063)
.annotate 'line', 2460
    find_lex $P5065, "$block"
    set $P5064, $P5065[0]
    unless_null $P5064, fallback5042
    nqp_get_sc_object $P5066, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5064, $P5066
  fallback5042:
    nqp_get_sc_object $P5070, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5069, $P5070, "QAST"
    get_who $P5068, $P5069
    set $P5067, $P5068["Op"]
    unless_null $P5067, fallback5043
    nqp_get_sc_object $P5071, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5067, $P5071
  fallback5043:
.annotate 'line', 2462
    nqp_get_sc_object $P5075, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5074, $P5075, "QAST"
    get_who $P5073, $P5074
    set $P5072, $P5073["Var"]
    unless_null $P5072, fallback5044
    nqp_get_sc_object $P5076, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5072, $P5076
  fallback5044:
    $P5077 = $P5072."new"("&*CURRENT_DISPATCHER" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2463
    nqp_get_sc_object $P5081, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5080, $P5081, "QAST"
    get_who $P5079, $P5080
    set $P5078, $P5079["Op"]
    unless_null $P5078, fallback5045
    nqp_get_sc_object $P5082, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5078, $P5082
  fallback5045:
    nqp_get_sc_object $P5086, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5085, $P5086, "QAST"
    get_who $P5084, $P5085
    set $P5083, $P5084["Op"]
    unless_null $P5083, fallback5046
    nqp_get_sc_object $P5087, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5083, $P5087
  fallback5046:
    $P5088 = $P5083."new"("curcode" :named("op"))
    $P5089 = $P5078."new"($P5088, "getcodeobj" :named("op"))
    $P5090 = $P5067."new"($P5077, $P5089, "bind" :named("op"))
    $P5091 = $P5064."push"($P5090)
    .return ($P5091) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_476_1360426903.566") :anon :lex :outer("cuid_474_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2466
    .lex "$BLOCK", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 2467
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback5047
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback5048
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5006
  fallback5048:
    unless_null $P5003, vivi_16275049
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_16275049:
    set $P5002, $P5003
  fallback5047:
    $P5008 = $P5002."cur_lexpad"()
    set $P101, $P5008
.annotate 'line', 2468
    set $P5009, $P101[0]
    unless_null $P5009, fallback5050
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5010
  fallback5050:
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5051
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback5051:
.annotate 'line', 2470
    nqp_get_sc_object $P5019, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback5052
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5016, $P5020
  fallback5052:
    find_lex $P5021, "$name"
    set $S5002, $P5021
    concat $S5001, "&", $S5002
    $P5022 = $P5016."new"($S5001 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5023, "$past"
    $P5024 = $P5011."new"($P5022, $P5023, "bind" :named("op"))
    $P5009."push"($P5024)
.annotate 'line', 2473
    find_lex $P5025, "$name"
    set $S5004, $P5025
    concat $S5003, "&", $S5004
    $P101."symbol"($S5003, "lexical" :named("scope"))
    find_dynamic_lex $P5026, "$*SCOPE"
    unless_null $P5026, fallback5055
    nqp_get_sc_object $P5029, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$SCOPE"]
    unless_null $P5027, fallback5056
    nqp_get_sc_object $P5030, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5027, $P5030
  fallback5056:
    unless_null $P5027, vivi_16295057
    die "Contextual $*SCOPE not found"
    box $P5031, "Contextual $*SCOPE not found"
    set $P5027, $P5031
  vivi_16295057:
    set $P5026, $P5027
  fallback5055:
    set $S5005, $P5026
    iseq $I5001, $S5005, "our"
    box $P5067, $I5001
    set $P5066, $P5067
    unless $I5001 goto if1628_end5054 
.annotate 'line', 2474
.annotate 'line', 2477
    find_dynamic_lex $P5032, "$*W"
    unless_null $P5032, fallback5058
    nqp_get_sc_object $P5035, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5034, $P5035
    set $P5033, $P5034["$W"]
    unless_null $P5033, fallback5059
    nqp_get_sc_object $P5036, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5033, $P5036
  fallback5059:
    unless_null $P5033, vivi_16305060
    die "Contextual $*W not found"
    box $P5037, "Contextual $*W not found"
    set $P5033, $P5037
  vivi_16305060:
    set $P5032, $P5033
  fallback5058:
    find_dynamic_lex $P5038, "$*PACKAGE"
    unless_null $P5038, fallback5061
    nqp_get_sc_object $P5041, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5040, $P5041
    set $P5039, $P5040["$PACKAGE"]
    unless_null $P5039, fallback5062
    nqp_get_sc_object $P5042, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5039, $P5042
  fallback5062:
    unless_null $P5039, vivi_16315063
    die "Contextual $*PACKAGE not found"
    box $P5043, "Contextual $*PACKAGE not found"
    set $P5039, $P5043
  vivi_16315063:
    set $P5038, $P5039
  fallback5061:
    find_lex $P5044, "$name"
    find_lex $P5045, "$past"
    $P5032."install_package_routine"($P5038, $P5044, $P5045)
.annotate 'line', 2478
    set $P5046, $P101[0]
    unless_null $P5046, fallback5064
    nqp_get_sc_object $P5047, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5046, $P5047
  fallback5064:
    nqp_get_sc_object $P5051, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Op"]
    unless_null $P5048, fallback5065
    nqp_get_sc_object $P5052, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5048, $P5052
  fallback5065:
.annotate 'line', 2480
    new $P5053, 'ResizablePMCArray'
    find_lex $P5054, "$name"
    push $P5053, $P5054
    find_lex $P5055, "$/"
    $P5056 = "&lexical_package_lookup"($P5053, $P5055)
.annotate 'line', 2481
    nqp_get_sc_object $P5060, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5059, $P5060, "QAST"
    get_who $P5058, $P5059
    set $P5057, $P5058["Var"]
    unless_null $P5057, fallback5066
    nqp_get_sc_object $P5061, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5057, $P5061
  fallback5066:
    find_lex $P5062, "$name"
    set $S5007, $P5062
    concat $S5006, "&", $S5007
    $P5063 = $P5057."new"($S5006 :named("name"), "lexical" :named("scope"))
    $P5064 = $P5048."new"($P5056, $P5063, "bind" :named("op"))
    $P5065 = $P5046."push"($P5064)
    set $P5066, $P5065
  if1628_end5054:
    .return ($P5066) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_477_1360426903.566") :anon :lex :outer("cuid_307_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2509
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_308_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2513
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5091 = 'cuid_478_1360426903.566' 
    capture_lex $P5091 
    .const 'Sub' $P5091 = 'cuid_479_1360426903.566' 
    capture_lex $P5091 
    .lex "$past", $P101 
    .lex "$name", $P102 
    .lex "$lexpast", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P103, $P5003
    unless_null _lex_param_1, fallback5098
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5005
  fallback5098:
    set $P5004, _lex_param_1["onlystar"]
    unless_null $P5004, fallback5099
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5006
  fallback5099:
    unless $P5004 goto if1640_else5096 
.annotate 'line', 2517
.annotate 'line', 2518
    $P5007 = "&only_star_block"()
    set $P101, $P5007
    goto if1640_end5097
  if1640_else5096:
.annotate 'line', 2520
.annotate 'line', 2521
    unless_null _lex_param_1, fallback5100
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5009
  fallback5100:
    set $P5008, _lex_param_1["blockoid"]
    unless_null $P5008, fallback5101
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5010
  fallback5101:
    $P5011 = $P5008."ast"()
    set $P101, $P5011
.annotate 'line', 2522
    $P101."blocktype"("declaration")
    find_dynamic_lex $P5012, "$*RETURN_USED"
    unless_null $P5012, fallback5104
    nqp_get_sc_object $P5015, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$RETURN_USED"]
    unless_null $P5013, fallback5105
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5016
  fallback5105:
    unless_null $P5013, vivi_16425106
    die "Contextual $*RETURN_USED not found"
    box $P5017, "Contextual $*RETURN_USED not found"
    set $P5013, $P5017
  vivi_16425106:
    set $P5012, $P5013
  fallback5104:
    set $P5021, $P5012
    unless $P5012 goto if1641_end5103 
.annotate 'line', 2523
.annotate 'line', 2524
    set $P5018, $P101[1]
    unless_null $P5018, fallback5107
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5018, $P5019
  fallback5107:
    $P5020 = "&wrap_return_handler"($P5018)
    set $P101[1], $P5020
    set $P5021, $P5020
  if1641_end5103:
  if1640_end5097:
    set $P5022, $P101["signature_has_invocant"]
    unless_null $P5022, fallback5110
    nqp_get_sc_object $P5023, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5022, $P5023
  fallback5110:
    if $P5022 goto unless1643_end5109 
.annotate 'line', 2529
.annotate 'line', 2530
    set $P5024, $P101[0]
    unless_null $P5024, fallback5111
    nqp_get_sc_object $P5025, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5024, $P5025
  fallback5111:
    nqp_get_sc_object $P5029, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5112
    nqp_get_sc_object $P5030, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5026, $P5030
  fallback5112:
    find_dynamic_lex $P5031, "$*PACKAGE"
    unless_null $P5031, fallback5113
    nqp_get_sc_object $P5034, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$PACKAGE"]
    unless_null $P5032, fallback5114
    nqp_get_sc_object $P5035, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5032, $P5035
  fallback5114:
    unless_null $P5032, vivi_16445115
    die "Contextual $*PACKAGE not found"
    box $P5036, "Contextual $*PACKAGE not found"
    set $P5032, $P5036
  vivi_16445115:
    set $P5031, $P5032
  fallback5113:
    $P5037 = $P5026."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"), $P5031 :named("returns"))
    $P5038 = $P5024."unshift"($P5037)
  unless1643_end5109:
.annotate 'line', 2535
    $P101."symbol"("self", "lexical" :named("scope"))
    box $P5039, ""
    set $P102, $P5039
    unless_null _lex_param_1, fallback5118
    nqp_get_sc_object $P5041, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5041
  fallback5118:
    set $P5040, _lex_param_1["deflongname"]
    unless_null $P5040, fallback5119
    nqp_get_sc_object $P5042, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5040, $P5042
  fallback5119:
    unless $P5040 goto if1645_else5116 
.annotate 'line', 2539
    unless_null _lex_param_1, fallback5120
    nqp_get_sc_object $P5044, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5044
  fallback5120:
    set $P5043, _lex_param_1["private"]
    unless_null $P5043, fallback5121
    nqp_get_sc_object $P5045, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5043, $P5045
  fallback5121:
    set $S5002, $P5043
.annotate 'line', 2540
    unless_null _lex_param_1, fallback5122
    nqp_get_sc_object $P5048, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5048
  fallback5122:
    set $P5047, _lex_param_1["deflongname"]
    unless_null $P5047, fallback5123
    nqp_get_sc_object $P5049, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5047, $P5049
  fallback5123:
    set $P5046, $P5047[0]
    unless_null $P5046, fallback5124
    nqp_get_sc_object $P5050, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5046, $P5050
  fallback5124:
    $P5051 = $P5046."ast"()
    set $S5003, $P5051
    concat $S5001, $S5002, $S5003
    box $P5052, $S5001
    set $P102, $P5052
    goto if1645_end5117
  if1645_else5116:
    unless_null _lex_param_1, fallback5127
    nqp_get_sc_object $P5054, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5054
  fallback5127:
    set $P5053, _lex_param_1["latename"]
    unless_null $P5053, fallback5128
    nqp_get_sc_object $P5055, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5053, $P5055
  fallback5128:
    set $P5068, $P5053
    unless $P5053 goto if1646_end5126 
.annotate 'line', 2542
    find_dynamic_lex $P5056, "$*PKGDECL"
    unless_null $P5056, fallback5131
    nqp_get_sc_object $P5059, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["$PKGDECL"]
    unless_null $P5057, fallback5132
    nqp_get_sc_object $P5060, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5057, $P5060
  fallback5132:
    unless_null $P5057, vivi_16485133
    die "Contextual $*PKGDECL not found"
    box $P5061, "Contextual $*PKGDECL not found"
    set $P5057, $P5061
  vivi_16485133:
    set $P5056, $P5057
  fallback5131:
    set $S5004, $P5056
    isne $I5001, $S5004, "role"
    unless $I5001 goto if1647_end5130 
.annotate 'line', 2543
.annotate 'line', 2544
    $P5062 = _lex_param_1."CURSOR"()
    $P5063 = $P5062."panic"("Late-bound method name only valid in role")
  if1647_end5130:
    unless_null _lex_param_1, fallback5134
    nqp_get_sc_object $P5065, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5065
  fallback5134:
    set $P5064, _lex_param_1["latename"]
    unless_null $P5064, fallback5135
    nqp_get_sc_object $P5066, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5064, $P5066
  fallback5135:
    set $S5006, $P5064
    concat $S5005, "!!LATENAME!!", $S5006
    box $P5067, $S5005
    set $P102, $P5067
    set $P5068, $P102
  if1646_end5126:
  if1645_end5117:
    set $S5007, $P102
    isne $I5002, $S5007, ""
    unless $I5002 goto if1649_end5137 
    .const 'Sub' $P5069 = 'cuid_478_1360426903.566' 
    capture_lex $P5069
    $P5070 = $P5069()
  if1649_end5137:
.annotate 'line', 2582
    nqp_get_sc_object $P5074, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5073, $P5074, "QAST"
    get_who $P5072, $P5073
    set $P5071, $P5072["Op"]
    unless_null $P5071, fallback5182
    nqp_get_sc_object $P5075, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5071, $P5075
  fallback5182:
    $P5076 = $P5071."new"($P101, "takeclosure" :named("op"))
    set $P103, $P5076
    set $P103["sink"], $P101
    set $P103["block_past"], $P101
    set $P5077, $P101["code_obj"]
    unless_null $P5077, fallback5183
    nqp_get_sc_object $P5078, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5077, $P5078
  fallback5183:
    set $P103["code_obj"], $P5077
.annotate 'line', 2586
    _lex_param_1."!make"($P103)
    unless_null _lex_param_1, fallback5186
    nqp_get_sc_object $P5080, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5080
  fallback5186:
    set $P5079, _lex_param_1["trait"]
    unless_null $P5079, fallback5187
    nqp_get_sc_object $P5081, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5079, $P5081
  fallback5187:
    set $P5090, $P5079
    unless $P5079 goto if1663_end5185 
.annotate 'line', 2587
    unless_null _lex_param_1, fallback5188
    nqp_get_sc_object $P5086, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5086
  fallback5188:
    set $P5085, _lex_param_1["trait"]
    unless_null $P5085, fallback5189
    nqp_get_sc_object $P5087, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5085, $P5087
  fallback5189:
    set $P5082, $P5085
    iter $P5084, $P5085
  for_next5190:
    unless $P5084, for_done5192
    shift $P5089, $P5084
  for_redo5191:
    .const 'Sub' $P5088 = 'cuid_479_1360426903.566' 
    capture_lex $P5088
    $P5082 = $P5088($P5089)
    goto for_next5190
  for_done5192:
    set $P5090, $P5082
  if1663_end5185:
    .return ($P5090) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_478_1360426903.566") :anon :lex :outer("cuid_308_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2548
    .lex "$meta_meth", $P101 
    .lex "$is_dispatcher", $P102 
    .lex "$code", $P103 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P103, $P5003
.annotate 'line', 2550
    find_lex $P5004, "$past"
    find_lex $P5005, "$name"
    $P5004."name"($P5005)
    find_dynamic_lex $P5006, "$*MULTINESS"
    unless_null $P5006, fallback5140
    nqp_get_sc_object $P5009, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$MULTINESS"]
    unless_null $P5007, fallback5141
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5010
  fallback5141:
    unless_null $P5007, vivi_16515142
    die "Contextual $*MULTINESS not found"
    box $P5011, "Contextual $*MULTINESS not found"
    set $P5007, $P5011
  vivi_16515142:
    set $P5006, $P5007
  fallback5140:
    set $S5001, $P5006
    iseq $I5001, $S5001, "multi"
    unless $I5001 goto if1650_else5138 
    set $S5002, "add_multi_method"
    goto if1650_end5139
  if1650_else5138:
    set $S5002, "add_method"
  if1650_end5139:
    box $P5012, $S5002
    set $P101, $P5012
    find_dynamic_lex $P5013, "$*MULTINESS"
    unless_null $P5013, fallback5143
    nqp_get_sc_object $P5016, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$MULTINESS"]
    unless_null $P5014, fallback5144
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5017
  fallback5144:
    unless_null $P5014, vivi_16525145
    die "Contextual $*MULTINESS not found"
    box $P5018, "Contextual $*MULTINESS not found"
    set $P5014, $P5018
  vivi_16525145:
    set $P5013, $P5014
  fallback5143:
    set $S5003, $P5013
    iseq $I5002, $S5003, "proto"
    box $P5019, $I5002
    set $P102, $P5019
.annotate 'line', 2555
    find_dynamic_lex $P5020, "$*W"
    unless_null $P5020, fallback5146
    nqp_get_sc_object $P5023, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$W"]
    unless_null $P5021, fallback5147
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5021, $P5024
  fallback5147:
    unless_null $P5021, vivi_16535148
    die "Contextual $*W not found"
    box $P5025, "Contextual $*W not found"
    set $P5021, $P5025
  vivi_16535148:
    set $P5020, $P5021
  fallback5146:
    find_lex $P5026, "$past"
    find_lex $P5027, "$name"
    $P5028 = $P5020."create_code"($P5026, $P5027, $P102)
    set $P103, $P5028
    find_dynamic_lex $P5029, "$*MULTINESS"
    unless_null $P5029, fallback5151
    nqp_get_sc_object $P5032, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["$MULTINESS"]
    unless_null $P5030, fallback5152
    nqp_get_sc_object $P5033, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5030, $P5033
  fallback5152:
    unless_null $P5030, vivi_16555153
    die "Contextual $*MULTINESS not found"
    box $P5034, "Contextual $*MULTINESS not found"
    set $P5030, $P5034
  vivi_16555153:
    set $P5029, $P5030
  fallback5151:
    set $S5004, $P5029
    iseq $I5003, $S5004, "multi"
    unless $I5003 goto if1654_end5150 
.annotate 'line', 2556
    find_lex $P5035, "$past"
    $P5036 = "&attach_multi_signature"($P103, $P5035)
  if1654_end5150:
.annotate 'line', 2557
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback5154
    nqp_get_sc_object $P5040, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback5155
    nqp_get_sc_object $P5041, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5038, $P5041
  fallback5155:
    unless_null $P5038, vivi_16565156
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_16565156:
    set $P5037, $P5038
  fallback5154:
    find_dynamic_lex $P5043, "$*PACKAGE"
    unless_null $P5043, fallback5157
    nqp_get_sc_object $P5046, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$PACKAGE"]
    unless_null $P5044, fallback5158
    nqp_get_sc_object $P5047, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5044, $P5047
  fallback5158:
    unless_null $P5044, vivi_16575159
    die "Contextual $*PACKAGE not found"
    box $P5048, "Contextual $*PACKAGE not found"
    set $P5044, $P5048
  vivi_16575159:
    set $P5043, $P5044
  fallback5157:
    find_lex $P5049, "$name"
    $P5037."pkg_add_method"($P5043, $P101, $P5049, $P103)
    find_lex $P5050, "$past"
    set $P5050["code_obj"], $P103
    find_dynamic_lex $P5051, "$*SCOPE"
    unless_null $P5051, fallback5162
    nqp_get_sc_object $P5054, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5053, $P5054
    set $P5052, $P5053["$SCOPE"]
    unless_null $P5052, fallback5163
    nqp_get_sc_object $P5055, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5052, $P5055
  fallback5163:
    unless_null $P5052, vivi_16595164
    die "Contextual $*SCOPE not found"
    box $P5056, "Contextual $*SCOPE not found"
    set $P5052, $P5056
  vivi_16595164:
    set $P5051, $P5052
  fallback5162:
    set $S5005, $P5051
    iseq $I5004, $S5005, "our"
    unless $I5004 goto if1658_end5161 
.annotate 'line', 2561
.annotate 'line', 2562
    find_dynamic_lex $P5057, "$*W"
    unless_null $P5057, fallback5165
    nqp_get_sc_object $P5060, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["$W"]
    unless_null $P5058, fallback5166
    nqp_get_sc_object $P5061, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5058, $P5061
  fallback5166:
    unless_null $P5058, vivi_16605167
    die "Contextual $*W not found"
    box $P5062, "Contextual $*W not found"
    set $P5058, $P5062
  vivi_16605167:
    set $P5057, $P5058
  fallback5165:
    find_dynamic_lex $P5063, "$*PACKAGE"
    unless_null $P5063, fallback5168
    nqp_get_sc_object $P5066, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5065, $P5066
    set $P5064, $P5065["$PACKAGE"]
    unless_null $P5064, fallback5169
    nqp_get_sc_object $P5067, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5064, $P5067
  fallback5169:
    unless_null $P5064, vivi_16615170
    die "Contextual $*PACKAGE not found"
    box $P5068, "Contextual $*PACKAGE not found"
    set $P5064, $P5068
  vivi_16615170:
    set $P5063, $P5064
  fallback5168:
    find_lex $P5069, "$name"
    find_lex $P5070, "$past"
    $P5071 = $P5057."install_package_routine"($P5063, $P5069, $P5070)
  if1658_end5161:
    set $P5121, $P102
    unless $P102 goto if1662_end5172 
.annotate 'line', 2567
.annotate 'line', 2568
    find_lex $P5073, "$past"
    set $P5072, $P5073[0]
    unless_null $P5072, fallback5173
    nqp_get_sc_object $P5074, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5072, $P5074
  fallback5173:
    nqp_get_sc_object $P5078, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5077, $P5078, "QAST"
    get_who $P5076, $P5077
    set $P5075, $P5076["Op"]
    unless_null $P5075, fallback5174
    nqp_get_sc_object $P5079, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5075, $P5079
  fallback5174:
.annotate 'line', 2570
    nqp_get_sc_object $P5083, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["Var"]
    unless_null $P5080, fallback5175
    nqp_get_sc_object $P5084, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5080, $P5084
  fallback5175:
    $P5085 = $P5080."new"("CURRENT_DISPATCH_CAPTURE" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2571
    nqp_get_sc_object $P5089, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5088, $P5089, "QAST"
    get_who $P5087, $P5088
    set $P5086, $P5087["Op"]
    unless_null $P5086, fallback5176
    nqp_get_sc_object $P5090, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5086, $P5090
  fallback5176:
    $P5091 = $P5086."new"("savecapture" :named("op"))
    $P5092 = $P5075."new"($P5085, $P5091, "bind" :named("op"))
    $P5072."push"($P5092)
.annotate 'line', 2573
    find_lex $P5094, "$past"
    set $P5093, $P5094[0]
    unless_null $P5093, fallback5177
    nqp_get_sc_object $P5095, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5093, $P5095
  fallback5177:
    nqp_get_sc_object $P5099, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5098, $P5099, "QAST"
    get_who $P5097, $P5098
    set $P5096, $P5097["Op"]
    unless_null $P5096, fallback5178
    nqp_get_sc_object $P5100, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5096, $P5100
  fallback5178:
.annotate 'line', 2575
    nqp_get_sc_object $P5104, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5103, $P5104, "QAST"
    get_who $P5102, $P5103
    set $P5101, $P5102["Var"]
    unless_null $P5101, fallback5179
    nqp_get_sc_object $P5105, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5101, $P5105
  fallback5179:
    $P5106 = $P5101."new"("&*CURRENT_DISPATCHER" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2576
    nqp_get_sc_object $P5110, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5109, $P5110, "QAST"
    get_who $P5108, $P5109
    set $P5107, $P5108["Op"]
    unless_null $P5107, fallback5180
    nqp_get_sc_object $P5111, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5107, $P5111
  fallback5180:
    nqp_get_sc_object $P5115, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5114, $P5115, "QAST"
    get_who $P5113, $P5114
    set $P5112, $P5113["Op"]
    unless_null $P5112, fallback5181
    nqp_get_sc_object $P5116, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5112, $P5116
  fallback5181:
    $P5117 = $P5112."new"("curcode" :named("op"))
    $P5118 = $P5107."new"($P5117, "getcodeobj" :named("op"))
    $P5119 = $P5096."new"($P5106, $P5118, "bind" :named("op"))
    $P5120 = $P5093."push"($P5119)
    set $P5121, $P5120
  if1662_end5172:
    .return ($P5121) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_479_1360426903.566") :anon :lex :outer("cuid_308_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2588
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_309_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2640
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5025 = 'cuid_480_1360426903.566' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_481_1360426903.566' 
    capture_lex $P5025 
    .lex "$BLOCK", $P101 
    .lex "$BLOCKINIT", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
.annotate 'line', 2641
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback5193
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback5194
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5007
  fallback5194:
    unless_null $P5004, vivi_16645195
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_16645195:
    set $P5003, $P5004
  fallback5193:
    $P5009 = $P5003."cur_lexpad"()
    set $P101, $P5009
    set $P5010, $P101[0]
    unless_null $P5010, fallback5196
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5011
  fallback5196:
    set $P102, $P5010
    unless_null _lex_param_1, fallback5199
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5013
  fallback5199:
    set $P5012, _lex_param_1["invocant"]
    unless_null $P5012, fallback5200
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5014
  fallback5200:
    unless $P5012 goto if1665_end5198 
    .const 'Sub' $P5015 = 'cuid_480_1360426903.566' 
    capture_lex $P5015
    $P5016 = $P5015()
  if1665_end5198:
    unless_null _lex_param_1, fallback5207
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5021
  fallback5207:
    set $P5020, _lex_param_1["parameter"]
    unless_null $P5020, fallback5208
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5022
  fallback5208:
    set $P5017, $P5020
    iter $P5019, $P5020
  for_next5209:
    unless $P5019, for_done5211
    shift $P5024, $P5019
  for_redo5210:
    .const 'Sub' $P5023 = 'cuid_481_1360426903.566' 
    capture_lex $P5023
    $P5017 = $P5023($P5024)
    goto for_next5209
  for_done5211:
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_480_1360426903.566") :anon :lex :outer("cuid_309_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2643
    .lex "$inv", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 2644
    find_lex $P5004, "$/"
    unless_null $P5004, fallback5201
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5005
  fallback5201:
    set $P5003, $P5004["invocant"]
    unless_null $P5003, fallback5202
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5006
  fallback5202:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback5203
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5007
  fallback5203:
    $P5008 = $P5002."ast"()
    set $P101, $P5008
.annotate 'line', 2645
    find_lex $P5009, "$BLOCKINIT"
    $P5009."push"($P101)
.annotate 'line', 2646
    find_lex $P5010, "$BLOCKINIT"
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5204
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback5204:
.annotate 'line', 2648
    nqp_get_sc_object $P5019, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback5205
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5016, $P5020
  fallback5205:
    $P5021 = $P5016."new"("self" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2649
    nqp_get_sc_object $P5025, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Var"]
    unless_null $P5022, fallback5206
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5022, $P5026
  fallback5206:
    $P5027 = $P101."name"()
    $P5028 = $P5022."new"("lexical" :named("scope"), $P5027 :named("name"))
    $P5029 = $P5011."new"($P5021, $P5028, "bind" :named("op"))
    $P5010."push"($P5029)
    find_lex $P5030, "$BLOCK"
    box $P5031, 1
    set $P5030["signature_has_invocant"], $P5031
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_481_1360426903.566") :anon :lex :outer("cuid_309_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2653
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$BLOCKINIT"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_310_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2656
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5092 = 'cuid_483_1360426903.566' 
    capture_lex $P5092 
    .lex "$quant", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback5212
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5004
  fallback5212:
    set $P5003, _lex_param_1["quant"]
    unless_null $P5003, fallback5213
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5005
  fallback5213:
    set $P101, $P5003
    unless_null _lex_param_1, fallback5216
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5007
  fallback5216:
    set $P5006, _lex_param_1["named_param"]
    unless_null $P5006, fallback5217
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5008
  fallback5217:
    unless $P5006 goto if1666_else5214 
.annotate 'line', 2659
.annotate 'line', 2660
    unless_null _lex_param_1, fallback5218
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5010
  fallback5218:
    set $P5009, _lex_param_1["named_param"]
    unless_null $P5009, fallback5219
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5011
  fallback5219:
    $P5012 = $P5009."ast"()
    set $P102, $P5012
    set $S5001, $P101
    isne $I5001, $S5001, "!"
    box $P5023, $I5001
    set $P5022, $P5023
    unless $I5001 goto if1667_end5221 
.annotate 'line', 2661
.annotate 'line', 2662
    unless_null _lex_param_1, fallback5222
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5016
  fallback5222:
    set $P5015, _lex_param_1["named_param"]
    unless_null $P5015, fallback5223
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5015, $P5017
  fallback5223:
    set $P5014, $P5015["param_var"]
    unless_null $P5014, fallback5224
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5018
  fallback5224:
    set $P5013, $P5014["sigil"]
    unless_null $P5013, fallback5225
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5019
  fallback5225:
    $P5020 = "&default_for"($P5013)
    $P5021 = $P102."default"($P5020)
    set $P5022, $P5021
  if1667_end5221:
    goto if1666_end5215
  if1666_else5214:
.annotate 'line', 2665
.annotate 'line', 2666
    unless_null _lex_param_1, fallback5226
    nqp_get_sc_object $P5025, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5025
  fallback5226:
    set $P5024, _lex_param_1["param_var"]
    unless_null $P5024, fallback5227
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5024, $P5026
  fallback5227:
    $P5027 = $P5024."ast"()
    set $P102, $P5027
    set $S5002, $P101
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1668_else5228 
.annotate 'line', 2667
.annotate 'line', 2668
    $P102."slurpy"(1)
.annotate 'line', 2669
    unless_null _lex_param_1, fallback5230
    nqp_get_sc_object $P5030, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5030
  fallback5230:
    set $P5029, _lex_param_1["param_var"]
    unless_null $P5029, fallback5231
    nqp_get_sc_object $P5031, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5029, $P5031
  fallback5231:
    set $P5028, $P5029["sigil"]
    unless_null $P5028, fallback5232
    nqp_get_sc_object $P5032, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5028, $P5032
  fallback5232:
    set $S5003, $P5028
    iseq $I5003, $S5003, "%"
    $P5033 = $P102."named"($I5003)
    set $P5043, $P5033
    goto if1668_end5229
  if1668_else5228:
    set $S5004, $P101
    iseq $I5004, $S5004, "?"
    box $P5042, $I5004
    set $P5041, $P5042
    unless $I5004 goto if1669_end5234 
.annotate 'line', 2671
.annotate 'line', 2672
    unless_null _lex_param_1, fallback5235
    nqp_get_sc_object $P5036, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5036
  fallback5235:
    set $P5035, _lex_param_1["param_var"]
    unless_null $P5035, fallback5236
    nqp_get_sc_object $P5037, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5035, $P5037
  fallback5236:
    set $P5034, $P5035["sigil"]
    unless_null $P5034, fallback5237
    nqp_get_sc_object $P5038, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5034, $P5038
  fallback5237:
    $P5039 = "&default_for"($P5034)
    $P5040 = $P102."default"($P5039)
    set $P5041, $P5040
  if1669_end5234:
    set $P5043, $P5041
  if1668_end5229:
  if1666_end5215:
    unless_null _lex_param_1, fallback5240
    nqp_get_sc_object $P5045, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5045
  fallback5240:
    set $P5044, _lex_param_1["default_value"]
    unless_null $P5044, fallback5241
    nqp_get_sc_object $P5046, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5044, $P5046
  fallback5241:
    unless $P5044 goto if1670_end5239 
.annotate 'line', 2675
    set $S5005, $P101
    iseq $I5005, $S5005, "*"
    unless $I5005 goto if1671_end5243 
.annotate 'line', 2676
.annotate 'line', 2677
    $P5047 = _lex_param_1."CURSOR"()
    $P5048 = $P5047."panic"("Can't put default on slurpy parameter")
  if1671_end5243:
    set $S5006, $P101
    iseq $I5006, $S5006, "!"
    unless $I5006 goto if1672_end5245 
.annotate 'line', 2679
.annotate 'line', 2680
    $P5049 = _lex_param_1."CURSOR"()
    $P5050 = $P5049."panic"("Can't put default on required parameter")
  if1672_end5245:
.annotate 'line', 2682
    unless_null _lex_param_1, fallback5246
    nqp_get_sc_object $P5054, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5054
  fallback5246:
    set $P5053, _lex_param_1["default_value"]
    unless_null $P5053, fallback5247
    nqp_get_sc_object $P5055, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5053, $P5055
  fallback5247:
    set $P5052, $P5053[0]
    unless_null $P5052, fallback5248
    nqp_get_sc_object $P5056, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5052, $P5056
  fallback5248:
    set $P5051, $P5052["EXPR"]
    unless_null $P5051, fallback5249
    nqp_get_sc_object $P5057, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5051, $P5057
  fallback5249:
    $P5058 = $P5051."ast"()
    $P5059 = $P102."default"($P5058)
  if1670_end5239:
.annotate 'line', 2684
    $P5060 = $P102."default"()
    if $P5060 goto unless1673_end5251 
    find_dynamic_lex $P5061, "$*W"
    unless_null $P5061, fallback5252
    nqp_get_sc_object $P5064, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5063, $P5064
    set $P5062, $P5063["$W"]
    unless_null $P5062, fallback5253
    nqp_get_sc_object $P5065, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5062, $P5065
  fallback5253:
    unless_null $P5062, vivi_16745254
    die "Contextual $*W not found"
    box $P5066, "Contextual $*W not found"
    set $P5062, $P5066
  vivi_16745254:
    set $P5061, $P5062
  fallback5252:
    $P5067 = $P5061."cur_lexpad"()
    find_dynamic_lex $P5068, "$*W"
    unless_null $P5068, fallback5255
    nqp_get_sc_object $P5071, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5070, $P5071
    set $P5069, $P5070["$W"]
    unless_null $P5069, fallback5256
    nqp_get_sc_object $P5072, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5069, $P5072
  fallback5256:
    unless_null $P5069, vivi_16755257
    die "Contextual $*W not found"
    box $P5073, "Contextual $*W not found"
    set $P5069, $P5073
  vivi_16755257:
    set $P5068, $P5069
  fallback5255:
    $P5074 = $P5068."cur_lexpad"()
    $P5075 = $P5074."arity"()
    set $N5002, $P5075
    set $N5003, 1
    add $N5001, $N5002, $N5003
    $P5076 = $P5067."arity"($N5001)
  unless1673_end5251:
    unless_null _lex_param_1, fallback5260
    nqp_get_sc_object $P5078, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5078
  fallback5260:
    set $P5077, _lex_param_1["typename"]
    unless_null $P5077, fallback5261
    nqp_get_sc_object $P5079, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5077, $P5079
  fallback5261:
    unless $P5077 goto if1676_end5259 
    .const 'Sub' $P5080 = 'cuid_483_1360426903.566' 
    capture_lex $P5080
    $P5081 = $P5080()
  if1676_end5259:
    unless_null _lex_param_1, fallback5278
    nqp_get_sc_object $P5083, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5083
  fallback5278:
    set $P5082, _lex_param_1["definedness"]
    unless_null $P5082, fallback5279
    nqp_get_sc_object $P5084, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5082, $P5084
  fallback5279:
    unless $P5082 goto if1681_end5277 
.annotate 'line', 2699
    unless_null _lex_param_1, fallback5280
    nqp_get_sc_object $P5087, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5087
  fallback5280:
    set $P5086, _lex_param_1["definedness"]
    unless_null $P5086, fallback5281
    nqp_get_sc_object $P5088, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5086, $P5088
  fallback5281:
    set $P5085, $P5086[0]
    unless_null $P5085, fallback5282
    nqp_get_sc_object $P5089, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5085, $P5089
  fallback5282:
    set $S5007, $P5085
    box $P5090, $S5007
    set $P102["definedness"], $P5090
  if1681_end5277:
.annotate 'line', 2703
    $P5091 = _lex_param_1."!make"($P102)
    .return ($P5091) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_483_1360426903.566") :anon :lex :outer("cuid_310_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2687
    .const 'Sub' $P5015 = 'cuid_482_1360426903.566' 
    capture_lex $P5015 
    .lex "$type", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 2688
    find_lex $P5004, "$/"
    unless_null $P5004, fallback5262
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5005
  fallback5262:
    set $P5003, $P5004["typename"]
    unless_null $P5003, fallback5263
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5006
  fallback5263:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback5264
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5007
  fallback5264:
    $P5008 = $P5002."ast"()
    $P5009 = $P5008."value"()
    set $P101, $P5009
.annotate 'line', 2689
    find_lex $P5010, "$past"
    $P5010."returns"($P101)
    repr_get_primitive_type_spec $I5001, $P101
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto if1677_end5266 
    .const 'Sub' $P5011 = 'cuid_482_1360426903.566' 
    capture_lex $P5011
    $P5012 = $P5011($P5014)
    set $P5013, $P5012
  if1677_end5266:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_482_1360426903.566") :anon :lex :outer("cuid_483_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2690
    .param pmc _lex_param_0 
    .lex "$prim", _lex_param_0 
.annotate 'line', 2691
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5267
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5268
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback5268:
    unless_null $P5002, vivi_16785269
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16785269:
    set $P5001, $P5002
  fallback5267:
    $P5007 = $P5001."cur_lexpad"()
    find_lex $P5008, "$past"
    $P5009 = $P5008."name"()
    find_lex $P5010, "$type"
    $P5007."symbol"($P5009, $P5010 :named("type"))
.annotate 'line', 2692
    find_lex $P5011, "$past"
    $P5012 = $P5011."default"()
    set $P5017, $P5012
    unless $P5012 goto if1680_end5273 
    find_lex $P5014, "$/"
    unless_null $P5014, fallback5274
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5015
  fallback5274:
    set $P5013, $P5014["default_value"]
    unless_null $P5013, fallback5275
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5016
  fallback5275:
    isfalse $I5001, $P5013
    box $P5018, $I5001
    set $P5017, $P5018
  if1680_end5273:
    set $P5022, $P5017
    unless $P5017 goto if1679_end5271 
.annotate 'line', 2693
    find_lex $P5019, "$past"
    $P5020 = "&default_value_for_prim"(_lex_param_0)
    $P5021 = $P5019."default"($P5020)
    set $P5022, $P5021
  if1679_end5271:
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_311_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2706
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    set $S5001, _lex_param_1
    box $P5003, $S5001
    set $P101, $P5003
.annotate 'line', 2708
    nqp_get_sc_object $P5007, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback5283
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5008
  fallback5283:
    $P5009 = $P5004."new"($P101 :named("name"), "lexical" :named("scope"), "param" :named("decl"), _lex_param_1 :named("node"))
    set $P102, $P5009
.annotate 'line', 2710
    find_dynamic_lex $P5010, "$*W"
    unless_null $P5010, fallback5284
    nqp_get_sc_object $P5013, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$W"]
    unless_null $P5011, fallback5285
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5014
  fallback5285:
    unless_null $P5011, vivi_16825286
    die "Contextual $*W not found"
    box $P5015, "Contextual $*W not found"
    set $P5011, $P5015
  vivi_16825286:
    set $P5010, $P5011
  fallback5284:
    $P5016 = $P5010."cur_lexpad"()
    $P5016."symbol"($P101, "lexical" :named("scope"))
.annotate 'line', 2711
    $P5017 = _lex_param_1."!make"($P102)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_312_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2714
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 2715
    unless_null _lex_param_1, fallback5287
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5003
  fallback5287:
    set $P5002, _lex_param_1["param_var"]
    unless_null $P5002, fallback5288
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5004
  fallback5288:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2716
    unless_null _lex_param_1, fallback5289
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5008
  fallback5289:
    set $P5007, _lex_param_1["param_var"]
    unless_null $P5007, fallback5290
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5009
  fallback5290:
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback5291
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5010
  fallback5291:
    set $S5001, $P5006
    $P101."named"($S5001)
.annotate 'line', 2717
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_313_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2720
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5017 = 'cuid_484_1360426903.566' 
    capture_lex $P5017 
    .lex "@name", $P101 
    .lex "$found", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
.annotate 'line', 2724
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5005, $P5006, "HLL"
    get_who $P5004, $P5005
    set $P5003, $P5004["Compiler"]
    unless_null $P5003, fallback5292
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5007
  fallback5292:
    set $S5001, _lex_param_1
    $P5008 = $P5003."parse_name"($S5001)
    set $P101, $P5008
    box $P5009, 0
    set $P102, $P5009
    new $P5012, 'ExceptionHandler'
    set_label $P5012, catch_handler_16855298
    $P5012.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5012
    .const 'Sub' $P5010 = 'cuid_484_1360426903.566' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5013, $P5011
    pop_eh 
    goto skip_handler_16845297
  catch_handler_16855298:
    .get_results ($P5012) 
    set $I10001, 1
    set $P5012["handled"], $I10001
    nqp_get_sc_object $P10001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    finalize $P5012
    pop_upto_eh $P5012
    pop_eh 
    set $P5013, $P10001
    goto skip_handler_16845297
  skip_handler_16845297:
    set $P5016, $P102
    if $P102 goto unless1686_end5300 
.annotate 'line', 2731
.annotate 'line', 2732
    $P5014 = _lex_param_1."CURSOR"()
    set $S5004, _lex_param_1
    concat $S5003, "Use of undeclared type '", $S5004
    concat $S5002, $S5003, "'"
    $P5015 = $P5014."panic"($S5002)
    set $P5016, $P5015
  unless1686_end5300:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_484_1360426903.566") :anon :lex :outer("cuid_313_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2726
    .lex "$sym", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 2727
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback5293
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback5294
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5006
  fallback5294:
    unless_null $P5003, vivi_16835295
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_16835295:
    set $P5002, $P5003
  fallback5293:
    find_lex $P5008, "@name"
    $P5009 = $P5002."find_sym"($P5008)
    set $P101, $P5009
.annotate 'line', 2728
    find_dynamic_lex $P5010, "$/"
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["WVal"]
    unless_null $P5011, fallback5296
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback5296:
    $P5016 = $P5011."new"($P101 :named("value"))
    $P5010."!make"($P5016)
    box $P5017, 1
    store_lex "$found", $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_314_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2736
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2737
    unless_null _lex_param_1, fallback5301
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback5301:
    set $P5001, _lex_param_1["trait_mod"]
    unless_null $P5001, fallback5302
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback5302:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_315_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2740
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5039 = 'cuid_486_1360426903.566' 
    capture_lex $P5039 
    .const 'Sub' $P5039 = 'cuid_488_1360426903.566' 
    capture_lex $P5039 
    .const 'Sub' $P5039 = 'cuid_489_1360426903.566' 
    capture_lex $P5039 
    .const 'Sub' $P5039 = 'cuid_490_1360426903.566' 
    capture_lex $P5039 
    .const 'Sub' $P5039 = 'cuid_491_1360426903.566' 
    capture_lex $P5039 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5305
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback5305:
    set $P5001, _lex_param_1["longname"]
    unless_null $P5001, fallback5306
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback5306:
    set $S5001, $P5001
    iseq $I5001, $S5001, "parrot_vtable"
    unless $I5001 goto if1687_else5303 
    .const 'Sub' $P5004 = 'cuid_486_1360426903.566' 
    capture_lex $P5004
    $P5005 = $P5004()
    set $P5038, $P5005
    goto if1687_end5304
  if1687_else5303:
    unless_null _lex_param_1, fallback5330
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5007
  fallback5330:
    set $P5006, _lex_param_1["longname"]
    unless_null $P5006, fallback5331
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5008
  fallback5331:
    set $S5002, $P5006
    iseq $I5002, $S5002, "parrot_vtable_handler"
    unless $I5002 goto if1693_else5328 
    .const 'Sub' $P5009 = 'cuid_488_1360426903.566' 
    capture_lex $P5009
    $P5010 = $P5009()
    set $P5037, $P5010
    goto if1693_end5329
  if1693_else5328:
    unless_null _lex_param_1, fallback5347
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5012
  fallback5347:
    set $P5011, _lex_param_1["longname"]
    unless_null $P5011, fallback5348
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5013
  fallback5348:
    set $S5003, $P5011
    iseq $I5003, $S5003, "positional_delegate"
    unless $I5003 goto if1697_else5345 
.annotate 'line', 2766
.annotate 'line', 2767
    .const 'Sub' $P5015 = 'cuid_489_1360426903.566' 
    capture_lex $P5015
    newclosure $P5014, $P5015
    $P5016 = _lex_param_1."!make"($P5014)
    set $P5036, $P5016
    goto if1697_end5346
  if1697_else5345:
    unless_null _lex_param_1, fallback5354
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5018
  fallback5354:
    set $P5017, _lex_param_1["longname"]
    unless_null $P5017, fallback5355
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5019
  fallback5355:
    set $S5004, $P5017
    iseq $I5004, $S5004, "associative_delegate"
    unless $I5004 goto if1699_else5352 
.annotate 'line', 2769
.annotate 'line', 2770
    .const 'Sub' $P5021 = 'cuid_490_1360426903.566' 
    capture_lex $P5021
    newclosure $P5020, $P5021
    $P5022 = _lex_param_1."!make"($P5020)
    set $P5035, $P5022
    goto if1699_end5353
  if1699_else5352:
    unless_null _lex_param_1, fallback5361
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5024
  fallback5361:
    set $P5023, _lex_param_1["longname"]
    unless_null $P5023, fallback5362
    nqp_get_sc_object $P5025, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5023, $P5025
  fallback5362:
    set $S5005, $P5023
    iseq $I5005, $S5005, "export"
    unless $I5005 goto if1701_else5359 
.annotate 'line', 2772
.annotate 'line', 2773
    .const 'Sub' $P5027 = 'cuid_491_1360426903.566' 
    capture_lex $P5027
    newclosure $P5026, $P5027
    $P5028 = _lex_param_1."!make"($P5026)
    set $P5034, $P5028
    goto if1701_end5360
  if1701_else5359:
.annotate 'line', 2780
.annotate 'line', 2781
    $P5029 = _lex_param_1."CURSOR"()
    unless_null _lex_param_1, fallback5374
    nqp_get_sc_object $P5031, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5031
  fallback5374:
    set $P5030, _lex_param_1["longname"]
    unless_null $P5030, fallback5375
    nqp_get_sc_object $P5032, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5030, $P5032
  fallback5375:
    set $S5008, $P5030
    concat $S5007, "Trait '", $S5008
    concat $S5006, $S5007, "' not implemented"
    $P5033 = $P5029."panic"($S5006)
    set $P5034, $P5033
  if1701_end5360:
    set $P5035, $P5034
  if1699_end5353:
    set $P5036, $P5035
  if1697_end5346:
    set $P5037, $P5036
  if1693_end5329:
    set $P5038, $P5037
  if1687_end5304:
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_486_1360426903.566") :anon :lex :outer("cuid_315_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2741
    .const 'Sub' $P5039 = 'cuid_485_1360426903.566' 
    capture_lex $P5039 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    .lex "$is_dispatcher", $P104 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P104, $P5004
.annotate 'line', 2743
    find_lex $P5007, "$/"
    unless_null $P5007, fallback5307
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5008
  fallback5307:
    set $P5006, $P5007["circumfix"]
    unless_null $P5006, fallback5308
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5009
  fallback5308:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5309
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5005, $P5010
  fallback5309:
    $P5011 = $P5005."ast"()
    set $P101, $P5011
.annotate 'line', 2745
    nqp_get_sc_object $P5015, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["SVal"]
    unless_null $P5012, fallback5312
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5016
  fallback5312:
    $P5017 = $P5012."ACCEPTS"($P101)
    if $P5017 goto unless1688_end5311 
.annotate 'line', 2744
    find_lex $P5018, "$/"
    $P5019 = $P5018."CURSOR"()
    $P5020 = $P5019."panic"("Trait 'parrot_vtable' requires constant scalar argument")
  unless1688_end5311:
.annotate 'line', 2746
    $P5021 = $P101."value"()
    set $P102, $P5021
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback5313
    nqp_get_sc_object $P5025, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback5314
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5023, $P5026
  fallback5314:
    unless_null $P5023, vivi_16895315
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_16895315:
    set $P5022, $P5023
  fallback5313:
    set $P103, $P5022
    find_dynamic_lex $P5028, "$*SCOPE"
    unless_null $P5028, fallback5316
    nqp_get_sc_object $P5031, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["$SCOPE"]
    unless_null $P5029, fallback5317
    nqp_get_sc_object $P5032, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5029, $P5032
  fallback5317:
    unless_null $P5029, vivi_16905318
    die "Contextual $*SCOPE not found"
    box $P5033, "Contextual $*SCOPE not found"
    set $P5029, $P5033
  vivi_16905318:
    set $P5028, $P5029
  fallback5316:
    set $S5001, $P5028
    iseq $I5001, $S5001, "proto"
    box $P5034, $I5001
    set $P104, $P5034
.annotate 'line', 2749
    find_dynamic_lex $P5035, "$/"
    .const 'Sub' $P5037 = 'cuid_485_1360426903.566' 
    capture_lex $P5037
    newclosure $P5036, $P5037
    $P5038 = $P5035."!make"($P5036)
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_485_1360426903.566") :anon :lex :outer("cuid_486_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2749
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2750
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5319
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5320
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback5320:
    unless_null $P5002, vivi_16915321
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16915321:
    set $P5001, $P5002
  fallback5319:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
.annotate 'line', 2751
    $P5011 = _lex_param_0."ast"()
    set $P5010, $P5011["code_obj"]
    unless_null $P5010, fallback5323
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5012
  fallback5323:
    set $P5009, $P5010
    defined $I5001, $P5009
    if $I5001, defor5322
.annotate 'line', 2752
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback5324
    nqp_get_sc_object $P5016, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback5325
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5017
  fallback5325:
    unless_null $P5014, vivi_16925326
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_16925326:
    set $P5013, $P5014
  fallback5324:
    $P5020 = _lex_param_0."ast"()
    set $P5019, $P5020["block_past"]
    unless_null $P5019, fallback5327
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5019, $P5021
  fallback5327:
    find_lex $P5022, "$name"
    find_lex $P5023, "$is_dispatcher"
    $P5024 = $P5013."create_code"($P5019, $P5022, $P5023)
    set $P5009, $P5024
  defor5322:
    $P5025 = $P5001."pkg_add_method"($P5007, "add_parrot_vtable_mapping", $P5008, $P5009)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_488_1360426903.566") :anon :lex :outer("cuid_315_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2755
    .const 'Sub' $P5031 = 'cuid_487_1360426903.566' 
    capture_lex $P5031 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P103, $P5003
.annotate 'line', 2757
    find_lex $P5006, "$/"
    unless_null $P5006, fallback5332
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5007
  fallback5332:
    set $P5005, $P5006["circumfix"]
    unless_null $P5005, fallback5333
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5005, $P5008
  fallback5333:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback5334
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5009
  fallback5334:
    $P5010 = $P5004."ast"()
    set $P101, $P5010
.annotate 'line', 2759
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5337
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback5337:
    $P5016 = $P5011."ACCEPTS"($P101)
    if $P5016 goto unless1694_end5336 
.annotate 'line', 2758
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    $P5019 = $P5018."panic"("Trait 'parrot_vtable_handler' requires constant scalar argument")
  unless1694_end5336:
.annotate 'line', 2760
    $P5020 = $P101."value"()
    set $P102, $P5020
    find_dynamic_lex $P5021, "$*PACKAGE"
    unless_null $P5021, fallback5338
    nqp_get_sc_object $P5024, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["$PACKAGE"]
    unless_null $P5022, fallback5339
    nqp_get_sc_object $P5025, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5022, $P5025
  fallback5339:
    unless_null $P5022, vivi_16955340
    die "Contextual $*PACKAGE not found"
    box $P5026, "Contextual $*PACKAGE not found"
    set $P5022, $P5026
  vivi_16955340:
    set $P5021, $P5022
  fallback5338:
    set $P103, $P5021
.annotate 'line', 2762
    find_dynamic_lex $P5027, "$/"
    .const 'Sub' $P5029 = 'cuid_487_1360426903.566' 
    capture_lex $P5029
    newclosure $P5028, $P5029
    $P5030 = $P5027."!make"($P5028)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_487_1360426903.566") :anon :lex :outer("cuid_488_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2762
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2763
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5341
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5342
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback5342:
    unless_null $P5002, vivi_16965343
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16965343:
    set $P5001, $P5002
  fallback5341:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
    set $P5009, _lex_param_0["variable"]
    unless_null $P5009, fallback5344
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5010
  fallback5344:
    set $S5001, $P5009
    $P5011 = $P5001."pkg_add_parrot_vtable_handler_mapping"($P5007, $P5008, $S5001)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_489_1360426903.566") :anon :lex :outer("cuid_315_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2767
    .param pmc _lex_param_0 
    .lex "$m", _lex_param_0 
    find_dynamic_lex $P5001, "$*DECLARAND_ATTR"
    unless_null $P5001, fallback5349
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$DECLARAND_ATTR"]
    unless_null $P5002, fallback5350
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback5350:
    unless_null $P5002, vivi_16985351
    die "Contextual $*DECLARAND_ATTR not found"
    box $P5006, "Contextual $*DECLARAND_ATTR not found"
    set $P5002, $P5006
  vivi_16985351:
    set $P5001, $P5002
  fallback5349:
    $P5007 = $P5001."set_positional_delegate"(1)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_490_1360426903.566") :anon :lex :outer("cuid_315_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2770
    .param pmc _lex_param_0 
    .lex "$m", _lex_param_0 
    find_dynamic_lex $P5001, "$*DECLARAND_ATTR"
    unless_null $P5001, fallback5356
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$DECLARAND_ATTR"]
    unless_null $P5002, fallback5357
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback5357:
    unless_null $P5002, vivi_17005358
    die "Contextual $*DECLARAND_ATTR not found"
    box $P5006, "Contextual $*DECLARAND_ATTR not found"
    set $P5002, $P5006
  vivi_17005358:
    set $P5001, $P5002
  fallback5356:
    $P5007 = $P5001."set_associative_delegate"(1)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_491_1360426903.566") :anon :lex :outer("cuid_315_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2773
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$name", $P102 
    .lex "$match", _lex_param_0 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
.annotate 'line', 2774
    $P5003 = _lex_param_0."ast"()
    set $P101, $P5003
.annotate 'line', 2775
    set $P5004, $P101["block_past"]
    unless_null $P5004, fallback5363
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5005
  fallback5363:
    $P5006 = $P5004."name"()
    set $P102, $P5006
    find_dynamic_lex $P5010, "$*EXPORT"
    unless_null $P5010, fallback5364
    nqp_get_sc_object $P5013, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$EXPORT"]
    unless_null $P5011, fallback5365
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5014
  fallback5365:
    unless_null $P5011, vivi_17025366
    die "Contextual $*EXPORT not found"
    box $P5015, "Contextual $*EXPORT not found"
    set $P5011, $P5015
  vivi_17025366:
    set $P5010, $P5011
  fallback5364:
    get_who $P5009, $P5010
    set $P5008, $P5009["DEFAULT"]
    unless_null $P5008, fallback5367
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5016
  fallback5367:
    get_who $P5007, $P5008
    set $S5002, $P102
    concat $S5001, "&", $S5002
    set $P5018, $P101["code_obj"]
    unless_null $P5018, fallback5369
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5018, $P5019
  fallback5369:
    set $P5017, $P5018
    defined $I5001, $P5017
    if $I5001, defor5368
.annotate 'line', 2777
    find_dynamic_lex $P5020, "$*W"
    unless_null $P5020, fallback5370
    nqp_get_sc_object $P5023, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$W"]
    unless_null $P5021, fallback5371
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5021, $P5024
  fallback5371:
    unless_null $P5021, vivi_17035372
    die "Contextual $*W not found"
    box $P5025, "Contextual $*W not found"
    set $P5021, $P5025
  vivi_17035372:
    set $P5020, $P5021
  fallback5370:
    set $P5026, $P101["block_past"]
    unless_null $P5026, fallback5373
    nqp_get_sc_object $P5027, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5026, $P5027
  fallback5373:
    $P5028 = $P5020."create_code"($P5026, $P102, 0)
    set $P5017, $P5028
  defor5368:
    set $P5007[$S5001], $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_316_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2785
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_5 :opt_flag 
    .const 'Sub' $P5074 = 'cuid_493_1360426903.566' 
    capture_lex $P5074 
    if haz_param_5, default5456
    nqp_get_sc_object $P5073, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_2, $P5073
  default5456:
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback5378
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5004
  fallback5378:
    set $P5003, _lex_param_1["deflongname"]
    unless_null $P5003, fallback5379
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5005
  fallback5379:
    unless $P5003 goto if1704_else5376 
.annotate 'line', 2787
.annotate 'line', 2788
    unless_null _lex_param_1, fallback5380
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5007
  fallback5380:
    set $P5006, _lex_param_1["deflongname"]
    unless_null $P5006, fallback5381
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5008
  fallback5381:
    $P5009 = $P5006."ast"()
    set $S5001, $P5009
    box $P5010, $S5001
    set $P101, $P5010
    goto if1704_end5377
  if1704_else5376:
.annotate 'line', 2790
    find_dynamic_lex $P5011, "$*PKGDECL"
    unless_null $P5011, fallback5384
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$PKGDECL"]
    unless_null $P5012, fallback5385
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5015
  fallback5385:
    unless_null $P5012, vivi_17065386
    die "Contextual $*PKGDECL not found"
    box $P5016, "Contextual $*PKGDECL not found"
    set $P5012, $P5016
  vivi_17065386:
    set $P5011, $P5012
  fallback5384:
    set $S5002, $P5011
    isne $I5001, $S5002, "role"
    unless $I5001 goto if1705_end5383 
.annotate 'line', 2791
.annotate 'line', 2792
    $P5017 = _lex_param_1."CURSOR"()
    $P5018 = $P5017."panic"("Late-bound method name only valid in role")
  if1705_end5383:
    unless_null _lex_param_1, fallback5387
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5020
  fallback5387:
    set $P5019, _lex_param_1["latename"]
    unless_null $P5019, fallback5388
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5019, $P5021
  fallback5388:
    set $S5004, $P5019
    concat $S5003, "!!LATENAME!!", $S5004
    box $P5022, $S5003
    set $P101, $P5022
  if1704_end5377:
    unless_null _lex_param_1, fallback5391
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5024
  fallback5391:
    set $P5023, _lex_param_1["proto"]
    unless_null $P5023, fallback5392
    nqp_get_sc_object $P5025, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5023, $P5025
  fallback5392:
    unless $P5023 goto if1707_else5389 
.annotate 'line', 2797
.annotate 'line', 2798
    nqp_get_sc_object $P5029, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Block"]
    unless_null $P5026, fallback5393
    nqp_get_sc_object $P5030, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5026, $P5030
  fallback5393:
.annotate 'line', 2800
    nqp_get_sc_object $P5034, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Op"]
    unless_null $P5031, fallback5394
    nqp_get_sc_object $P5035, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5031, $P5035
  fallback5394:
.annotate 'line', 2801
    nqp_get_sc_object $P5039, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Var"]
    unless_null $P5036, fallback5395
    nqp_get_sc_object $P5040, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5036, $P5040
  fallback5395:
    $P5041 = $P5036."new"("self" :named("name"), "local" :named("scope"), "param" :named("decl"))
.annotate 'line', 2802
    nqp_get_sc_object $P5045, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["SVal"]
    unless_null $P5042, fallback5396
    nqp_get_sc_object $P5046, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5042, $P5046
  fallback5396:
    $P5047 = $P5042."new"($P101 :named("value"))
    $P5048 = $P5031."new"($P5041, $P5047, "!protoregex" :named("name"), "callmethod" :named("op"))
    $P5049 = $P5026."new"($P5048, $P101 :named("name"), "declaration" :named("blocktype"), _lex_param_1 :named("node"))
    set $P102, $P5049
.annotate 'line', 2809
    find_dynamic_lex $P5050, "$*W"
    unless_null $P5050, fallback5397
    nqp_get_sc_object $P5053, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5052, $P5053
    set $P5051, $P5052["$W"]
    unless_null $P5051, fallback5398
    nqp_get_sc_object $P5054, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5051, $P5054
  fallback5398:
    unless_null $P5051, vivi_17085399
    die "Contextual $*W not found"
    box $P5055, "Contextual $*W not found"
    set $P5051, $P5055
  vivi_17085399:
    set $P5050, $P5051
  fallback5397:
    find_dynamic_lex $P5056, "$*PACKAGE"
    unless_null $P5056, fallback5400
    nqp_get_sc_object $P5059, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["$PACKAGE"]
    unless_null $P5057, fallback5401
    nqp_get_sc_object $P5060, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5057, $P5060
  fallback5401:
    unless_null $P5057, vivi_17095402
    die "Contextual $*PACKAGE not found"
    box $P5061, "Contextual $*PACKAGE not found"
    set $P5057, $P5061
  vivi_17095402:
    set $P5056, $P5057
  fallback5400:
.annotate 'line', 2810
    find_dynamic_lex $P5062, "$*W"
    unless_null $P5062, fallback5403
    nqp_get_sc_object $P5065, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$W"]
    unless_null $P5063, fallback5404
    nqp_get_sc_object $P5066, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5063, $P5066
  fallback5404:
    unless_null $P5063, vivi_17105405
    die "Contextual $*W not found"
    box $P5067, "Contextual $*W not found"
    set $P5063, $P5067
  vivi_17105405:
    set $P5062, $P5063
  fallback5403:
    $P5068 = $P5062."create_code"($P102, $P101, 0, "NQPRegex" :named("code_type_name"))
    $P5069 = $P5050."pkg_add_method"($P5056, "add_method", $P101, $P5068)
    goto if1707_end5390
  if1707_else5389:
    .const 'Sub' $P5070 = 'cuid_493_1360426903.566' 
    capture_lex $P5070
    $P5071 = $P5070()
  if1707_end5390:
.annotate 'line', 2849
    $P5072 = _lex_param_1."!make"($P102)
    .return ($P5072) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_493_1360426903.566") :anon :lex :outer("cuid_316_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2812
    .const 'Sub' $P5130 = 'cuid_492_1360426903.566' 
    capture_lex $P5130 
    .lex "$block", $P101 
    .lex "$code", $P102 
    .lex "$regex", $P103 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P103, $P5003
.annotate 'line', 2813
    find_dynamic_lex $P5004, "$*W"
    unless_null $P5004, fallback5406
    nqp_get_sc_object $P5007, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$W"]
    unless_null $P5005, fallback5407
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5005, $P5008
  fallback5407:
    unless_null $P5005, vivi_17115408
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5005, $P5009
  vivi_17115408:
    set $P5004, $P5005
  fallback5406:
    $P5010 = $P5004."pop_lexpad"()
    set $P101, $P5010
.annotate 'line', 2814
    set $P5011, $P101[0]
    unless_null $P5011, fallback5409
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5012
  fallback5409:
    nqp_get_sc_object $P5016, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback5410
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5017
  fallback5410:
    $P5018 = $P5013."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5011."unshift"($P5018)
.annotate 'line', 2815
    set $P5019, $P101[0]
    unless_null $P5019, fallback5411
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5019, $P5020
  fallback5411:
    nqp_get_sc_object $P5024, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5412
    nqp_get_sc_object $P5025, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5021, $P5025
  fallback5412:
.annotate 'line', 2817
    nqp_get_sc_object $P5029, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5413
    nqp_get_sc_object $P5030, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5026, $P5030
  fallback5413:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2818
    nqp_get_sc_object $P5035, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback5414
    nqp_get_sc_object $P5036, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5032, $P5036
  fallback5414:
    $P5037 = $P5032."new"("self" :named("name"), "lexical" :named("scope"))
    $P5038 = $P5021."new"($P5031, $P5037, "bind" :named("op"))
    $P5019."push"($P5038)
.annotate 'line', 2819
    set $P5039, $P101[0]
    unless_null $P5039, fallback5415
    nqp_get_sc_object $P5040, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5039, $P5040
  fallback5415:
    nqp_get_sc_object $P5044, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback5416
    nqp_get_sc_object $P5045, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5041, $P5045
  fallback5416:
    $P5046 = $P5041."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5039."push"($P5046)
.annotate 'line', 2820
    set $P5047, $P101[0]
    unless_null $P5047, fallback5417
    nqp_get_sc_object $P5048, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5047, $P5048
  fallback5417:
    nqp_get_sc_object $P5052, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Var"]
    unless_null $P5049, fallback5418
    nqp_get_sc_object $P5053, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5049, $P5053
  fallback5418:
    $P5054 = $P5049."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5047."push"($P5054)
.annotate 'line', 2821
    $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2822
    $P101."symbol"("$/", "lexical" :named("scope"))
    find_dynamic_lex $P5056, "%*RX"
    unless_null $P5056, fallback5419
    nqp_get_sc_object $P5059, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["%RX"]
    unless_null $P5057, fallback5420
    nqp_get_sc_object $P5061, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5060, $P5061
    new $P5062, 'Hash'
    set $P5060["%RX"], $P5062
    set $P5057, $P5062
  fallback5420:
    unless_null $P5057, vivi_17125421
    die "Contextual %*RX not found"
    box $P5063, "Contextual %*RX not found"
    set $P5057, $P5063
  vivi_17125421:
    set $P5056, $P5057
  fallback5419:
    set $P5055, $P5056["code"]
    unless_null $P5055, fallback5422
    nqp_get_sc_object $P5064, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5055, $P5064
  fallback5422:
    set $P102, $P5055
.annotate 'line', 2824
    find_dynamic_lex $P5066, "%*LANG"
    unless_null $P5066, fallback5423
    nqp_get_sc_object $P5069, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5068, $P5069
    set $P5067, $P5068["%LANG"]
    unless_null $P5067, fallback5424
    nqp_get_sc_object $P5071, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5070, $P5071
    new $P5072, 'Hash'
    set $P5070["%LANG"], $P5072
    set $P5067, $P5072
  fallback5424:
    unless_null $P5067, vivi_17135425
    die "Contextual %*LANG not found"
    box $P5073, "Contextual %*LANG not found"
    set $P5067, $P5073
  vivi_17135425:
    set $P5066, $P5067
  fallback5423:
    set $P5065, $P5066["Regex-actions"]
    unless_null $P5065, fallback5426
    nqp_get_sc_object $P5074, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5065, $P5074
  fallback5426:
    find_lex $P5076, "$/"
    unless_null $P5076, fallback5427
    nqp_get_sc_object $P5077, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5076, $P5077
  fallback5427:
    set $P5075, $P5076["p6regex"]
    unless_null $P5075, fallback5428
    nqp_get_sc_object $P5078, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5075, $P5078
  fallback5428:
    $P5079 = $P5075."ast"()
    $P5080 = $P5065."qbuildsub"($P5079, $P101, $P102 :named("code_obj"))
    set $P103, $P5080
.annotate 'line', 2825
    find_lex $P5081, "$name"
    $P103."name"($P5081)
    find_dynamic_lex $P5082, "$*PKGDECL"
    unless_null $P5082, fallback5433
    nqp_get_sc_object $P5085, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["$PKGDECL"]
    unless_null $P5083, fallback5434
    nqp_get_sc_object $P5086, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5083, $P5086
  fallback5434:
    unless_null $P5083, vivi_17165435
    die "Contextual $*PKGDECL not found"
    box $P5087, "Contextual $*PKGDECL not found"
    set $P5083, $P5087
  vivi_17165435:
    set $P5082, $P5083
  fallback5433:
    set $P5095, $P5082
    unless $P5082 goto if1715_end5432 
    find_dynamic_lex $P5089, "$*PACKAGE"
    unless_null $P5089, fallback5436
    nqp_get_sc_object $P5092, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5091, $P5092
    set $P5090, $P5091["$PACKAGE"]
    unless_null $P5090, fallback5437
    nqp_get_sc_object $P5093, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5090, $P5093
  fallback5437:
    unless_null $P5090, vivi_17175438
    die "Contextual $*PACKAGE not found"
    box $P5094, "Contextual $*PACKAGE not found"
    set $P5090, $P5094
  vivi_17175438:
    set $P5089, $P5090
  fallback5436:
    get_how $P5088, $P5089
    can $I5001, $P5088, "add_method"
    box $P5096, $I5001
    set $P5095, $P5096
  if1715_end5432:
    unless $P5095 goto if1714_end5430 
.annotate 'line', 2827
.annotate 'line', 2829
    find_dynamic_lex $P5097, "$*W"
    unless_null $P5097, fallback5439
    nqp_get_sc_object $P5100, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5099, $P5100
    set $P5098, $P5099["$W"]
    unless_null $P5098, fallback5440
    nqp_get_sc_object $P5101, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5098, $P5101
  fallback5440:
    unless_null $P5098, vivi_17185441
    die "Contextual $*W not found"
    box $P5102, "Contextual $*W not found"
    set $P5098, $P5102
  vivi_17185441:
    set $P5097, $P5098
  fallback5439:
    find_dynamic_lex $P5103, "$*PACKAGE"
    unless_null $P5103, fallback5442
    nqp_get_sc_object $P5106, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5105, $P5106
    set $P5104, $P5105["$PACKAGE"]
    unless_null $P5104, fallback5443
    nqp_get_sc_object $P5107, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5104, $P5107
  fallback5443:
    unless_null $P5104, vivi_17195444
    die "Contextual $*PACKAGE not found"
    box $P5108, "Contextual $*PACKAGE not found"
    set $P5104, $P5108
  vivi_17195444:
    set $P5103, $P5104
  fallback5442:
    find_lex $P5109, "$name"
    $P5110 = $P5097."pkg_add_method"($P5103, "add_method", $P5109, $P102)
  if1714_end5430:
    find_dynamic_lex $P5111, "$*PKGDECL"
    unless_null $P5111, fallback5447
    nqp_get_sc_object $P5114, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5113, $P5114
    set $P5112, $P5113["$PKGDECL"]
    unless_null $P5112, fallback5448
    nqp_get_sc_object $P5115, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5112, $P5115
  fallback5448:
    unless_null $P5112, vivi_17215449
    die "Contextual $*PKGDECL not found"
    box $P5116, "Contextual $*PKGDECL not found"
    set $P5112, $P5116
  vivi_17215449:
    set $P5111, $P5112
  fallback5447:
    set $S5001, $P5111
    iseq $I5002, $S5001, "role"
    unless $I5002 goto if1720_end5446 
    .const 'Sub' $P5117 = 'cuid_492_1360426903.566' 
    capture_lex $P5117
    $P5118 = $P5117()
  if1720_end5446:
.annotate 'line', 2843
    nqp_get_sc_object $P5122, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5121, $P5122, "QAST"
    get_who $P5120, $P5121
    set $P5119, $P5120["Op"]
    unless_null $P5119, fallback5455
    nqp_get_sc_object $P5123, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5119, $P5123
  fallback5455:
.annotate 'line', 2845
    new $P5124, 'ResizablePMCArray'
    box $P5125, "NQPRegexMethod"
    push $P5124, $P5125
    find_lex $P5126, "$/"
    $P5127 = "&lexical_package_lookup"($P5124, $P5126)
    $P5128 = $P5119."new"($P5127, $P103, "callmethod" :named("op"), "new" :named("name"))
    store_lex "$past", $P5128
    find_lex $P5129, "$past"
    set $P5129["sink"], $P103
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_492_1360426903.566") :anon :lex :outer("cuid_493_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2834
    .lex "$gen_nfa", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 2835
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5004, $P5005, "QRegex"
    get_who $P5003, $P5004
    set $P5002, $P5003["NFA"]
    unless_null $P5002, fallback5450
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback5450:
    $P5007 = $P5002."new"()
    set $P101, $P5007
.annotate 'line', 2836
    find_lex $P5009, "$/"
    unless_null $P5009, fallback5451
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5010
  fallback5451:
    set $P5008, $P5009["p6regex"]
    unless_null $P5008, fallback5452
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5011
  fallback5452:
    $P5012 = $P5008."ast"()
    $P101."addnode"($P5012, 1 :named("vars_as_generic"))
.annotate 'line', 2837
    $P5013 = $P101."generic"()
    set $P5016, $P5013
    unless $P5013 goto if1722_end5454 
.annotate 'line', 2838
    find_lex $P5014, "$code"
    $P5015 = $P5014."SET_GENERIC_NFA"($P101)
    set $P5016, $P5015
  if1722_end5454:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_317_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2853
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    unless_null _lex_param_1, fallback5459
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5003
  fallback5459:
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback5460
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5004
  fallback5460:
    unless $P5002 goto if1723_else5457 
.annotate 'line', 2854
    unless_null _lex_param_1, fallback5461
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5007
  fallback5461:
    set $P5006, _lex_param_1["args"]
    unless_null $P5006, fallback5462
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5008
  fallback5462:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5463
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5005, $P5009
  fallback5463:
    $P5010 = $P5005."ast"()
    set $P5017, $P5010
    goto if1723_end5458
  if1723_else5457:
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5464
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback5464:
    $P5016 = $P5011."new"(_lex_param_1 :named("node"))
    set $P5017, $P5016
  if1723_end5458:
    set $P101, $P5017
    unless_null _lex_param_1, fallback5467
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5019
  fallback5467:
    set $P5018, _lex_param_1["quote"]
    unless_null $P5018, fallback5468
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5018, $P5020
  fallback5468:
    unless $P5018 goto if1724_else5465 
.annotate 'line', 2855
.annotate 'line', 2856
    unless_null _lex_param_1, fallback5469
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5022
  fallback5469:
    set $P5021, _lex_param_1["quote"]
    unless_null $P5021, fallback5470
    nqp_get_sc_object $P5023, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5021, $P5023
  fallback5470:
    $P5024 = $P5021."ast"()
    $P101."unshift"($P5024)
.annotate 'line', 2857
    $P5025 = $P101."op"("callmethod")
    goto if1724_end5466
  if1724_else5465:
    unless_null _lex_param_1, fallback5473
    nqp_get_sc_object $P5027, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5027
  fallback5473:
    set $P5026, _lex_param_1["longname"]
    unless_null $P5026, fallback5474
    nqp_get_sc_object $P5028, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5026, $P5028
  fallback5474:
    set $S5001, $P5026
    iseq $I5001, $S5001, "HOW"
    unless $I5001 goto if1725_else5471 
.annotate 'line', 2859
.annotate 'line', 2860
    $P5029 = $P101."op"("how")
    set $P5049, $P5029
    goto if1725_end5472
  if1725_else5471:
    unless_null _lex_param_1, fallback5477
    nqp_get_sc_object $P5031, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5031
  fallback5477:
    set $P5030, _lex_param_1["longname"]
    unless_null $P5030, fallback5478
    nqp_get_sc_object $P5032, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5030, $P5032
  fallback5478:
    set $S5002, $P5030
    iseq $I5002, $S5002, "WHAT"
    unless $I5002 goto if1726_else5475 
.annotate 'line', 2862
.annotate 'line', 2863
    $P5033 = $P101."op"("what")
    set $P5048, $P5033
    goto if1726_end5476
  if1726_else5475:
    unless_null _lex_param_1, fallback5481
    nqp_get_sc_object $P5035, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5035
  fallback5481:
    set $P5034, _lex_param_1["longname"]
    unless_null $P5034, fallback5482
    nqp_get_sc_object $P5036, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5034, $P5036
  fallback5482:
    set $S5003, $P5034
    iseq $I5003, $S5003, "WHO"
    unless $I5003 goto if1727_else5479 
.annotate 'line', 2865
.annotate 'line', 2866
    $P5037 = $P101."op"("who")
    set $P5047, $P5037
    goto if1727_end5480
  if1727_else5479:
    unless_null _lex_param_1, fallback5485
    nqp_get_sc_object $P5039, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5039
  fallback5485:
    set $P5038, _lex_param_1["longname"]
    unless_null $P5038, fallback5486
    nqp_get_sc_object $P5040, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5038, $P5040
  fallback5486:
    set $S5004, $P5038
    iseq $I5004, $S5004, "REPR"
    unless $I5004 goto if1728_else5483 
.annotate 'line', 2868
.annotate 'line', 2869
    $P5041 = $P101."op"("reprname")
    set $P5046, $P5041
    goto if1728_end5484
  if1728_else5483:
.annotate 'line', 2871
.annotate 'line', 2872
    unless_null _lex_param_1, fallback5487
    nqp_get_sc_object $P5043, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5043
  fallback5487:
    set $P5042, _lex_param_1["longname"]
    unless_null $P5042, fallback5488
    nqp_get_sc_object $P5044, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5042, $P5044
  fallback5488:
    set $S5005, $P5042
    $P101."name"($S5005)
.annotate 'line', 2873
    $P5045 = $P101."op"("callmethod")
    set $P5046, $P5045
  if1728_end5484:
    set $P5047, $P5046
  if1727_end5480:
    set $P5048, $P5047
  if1726_end5476:
    set $P5049, $P5048
  if1725_end5472:
  if1724_end5466:
.annotate 'line', 2875
    $P5050 = _lex_param_1."!make"($P101)
    .return ($P5050) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_318_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2880
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2881
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5489
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback5489:
.annotate 'line', 2882
    nqp_get_sc_object $P5009, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5490
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5010
  fallback5490:
    $P5011 = $P5006."new"("self" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "decont" :named("op"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_319_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2885
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 2886
    unless_null _lex_param_1, fallback5491
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5003
  fallback5491:
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback5492
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5004
  fallback5492:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2887
    unless_null _lex_param_1, fallback5493
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5007
  fallback5493:
    set $P5006, _lex_param_1["deflongname"]
    unless_null $P5006, fallback5494
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5008
  fallback5494:
    set $S5002, $P5006
    concat $S5001, "&", $S5002
    $P101."name"($S5001)
.annotate 'line', 2888
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_320_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2891
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5049 = 'cuid_494_1360426903.566' 
    capture_lex $P5049 
    .const 'Sub' $P5049 = 'cuid_495_1360426903.566' 
    capture_lex $P5049 
    .lex "$var", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
.annotate 'line', 2894
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback5497
    nqp_get_sc_object $P5006, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback5498
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5007
  fallback5498:
    unless_null $P5004, vivi_17305499
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_17305499:
    set $P5003, $P5004
  fallback5497:
    unless_null _lex_param_1, fallback5500
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5010
  fallback5500:
    set $P5009, _lex_param_1["name"]
    unless_null $P5009, fallback5501
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5011
  fallback5501:
    set $S5001, $P5009
    $P5012 = $P5003."is_lexical"($S5001)
    unless $P5012 goto if1729_else5495 
    new $P5034, 'ExceptionHandler'
    set_label $P5034, catch_handler_17355514
    $P5034.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5034
.annotate 'line', 2895
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_17335509
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 2896
    nqp_get_sc_object $P5016, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["WVal"]
    unless_null $P5013, fallback5502
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5017
  fallback5502:
    find_dynamic_lex $P5018, "$*W"
    unless_null $P5018, fallback5503
    nqp_get_sc_object $P5021, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$W"]
    unless_null $P5019, fallback5504
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5019, $P5022
  fallback5504:
    unless_null $P5019, vivi_17315505
    die "Contextual $*W not found"
    box $P5023, "Contextual $*W not found"
    set $P5019, $P5023
  vivi_17315505:
    set $P5018, $P5019
  fallback5503:
    new $P5024, 'ResizablePMCArray'
    unless_null _lex_param_1, fallback5506
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5026
  fallback5506:
    set $P5025, _lex_param_1["name"]
    unless_null $P5025, fallback5507
    nqp_get_sc_object $P5027, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5025, $P5027
  fallback5507:
    set $S5002, $P5025
    box $P5028, $S5002
    push $P5024, $P5028
    $P5029 = $P5018."find_sym"($P5024)
    $P5030 = $P5013."new"($P5029 :named("value"))
    set $P101, $P5030
    nqp_get_sc_object $P5031, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_17325508
  catch_handler_17335509:
    .get_results ($P5032) 
    .const 'Sub' $P10001 = 'cuid_494_1360426903.566' 
    capture_lex $P10001
    $P10001($P5032)
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10002
    goto skip_handler_17325508
  skip_handler_17325508:
    set $P5035, $P5033
    pop_eh 
    goto skip_handler_17345513
  catch_handler_17355514:
    .get_results ($P5034) 
    set $I10001, 1
    set $P5034["handled"], $I10001
    nqp_get_sc_object $P10001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    finalize $P5034
    pop_upto_eh $P5034
    pop_eh 
    set $P5035, $P10001
    goto skip_handler_17345513
  skip_handler_17345513:
    goto if1729_end5496
  if1729_else5495:
    .const 'Sub' $P5036 = 'cuid_495_1360426903.566' 
    capture_lex $P5036
    $P5037 = $P5036()
  if1729_end5496:
    set $P102, $P101
    unless_null _lex_param_1, fallback5520
    nqp_get_sc_object $P5039, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5039
  fallback5520:
    set $P5038, _lex_param_1["args"]
    unless_null $P5038, fallback5521
    nqp_get_sc_object $P5040, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5038, $P5040
  fallback5521:
    unless $P5038 goto if1736_end5519 
.annotate 'line', 2909
.annotate 'line', 2910
    unless_null _lex_param_1, fallback5522
    nqp_get_sc_object $P5043, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5043
  fallback5522:
    set $P5042, _lex_param_1["args"]
    unless_null $P5042, fallback5523
    nqp_get_sc_object $P5044, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5042, $P5044
  fallback5523:
    set $P5041, $P5042[0]
    unless_null $P5041, fallback5524
    nqp_get_sc_object $P5045, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5041, $P5045
  fallback5524:
    $P5046 = $P5041."ast"()
    set $P102, $P5046
.annotate 'line', 2911
    $P5047 = $P102."unshift"($P101)
  if1736_end5519:
.annotate 'line', 2913
    $P5048 = _lex_param_1."!make"($P102)
    .return ($P5048) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_494_1360426903.566") :anon :lex :outer("cuid_320_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2897
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 2898
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback5510
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback5510:
    find_lex $P5007, "$/"
    unless_null $P5007, fallback5511
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5008
  fallback5511:
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback5512
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5009
  fallback5512:
    set $S5001, $P5006
    $P5010 = $P5001."new"($S5001 :named("name"), "lexical" :named("scope"))
    store_lex "$var", $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_495_1360426903.566") :anon :lex :outer("cuid_320_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2902
    .lex "@ns", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_lex $P5005, "$/"
    unless_null $P5005, fallback5515
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5005, $P5006
  fallback5515:
    set $P5004, $P5005["name"]
    unless_null $P5004, fallback5516
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5007
  fallback5516:
    set $P5003, $P5004["identifier"]
    unless_null $P5003, fallback5517
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5008
  fallback5517:
    repr_clone $P5002, $P5003
    set $P101, $P5002
.annotate 'line', 2904
    find_lex $P5009, "$/"
    $P5010 = "&lexical_package_lookup"($P101, $P5009)
    store_lex "$var", $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_321_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2916
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@args", $P101 
    .lex "$pirop", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback5527
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5004
  fallback5527:
    set $P5003, _lex_param_1["args"]
    unless_null $P5003, fallback5528
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5005
  fallback5528:
    unless $P5003 goto if1737_else5525 
.annotate 'line', 2917
    unless_null _lex_param_1, fallback5529
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5008
  fallback5529:
    set $P5007, _lex_param_1["args"]
    unless_null $P5007, fallback5530
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5009
  fallback5530:
    set $P5006, $P5007[0]
    unless_null $P5006, fallback5531
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5010
  fallback5531:
    $P5011 = $P5006."ast"()
    $P5012 = $P5011."list"()
    set $P5014, $P5012
    goto if1737_end5526
  if1737_else5525:
    new $P5013, 'ResizablePMCArray'
    set $P5014, $P5013
  if1737_end5526:
    set $P101, $P5014
    unless_null _lex_param_1, fallback5532
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5016
  fallback5532:
    set $P5015, _lex_param_1["op"]
    unless_null $P5015, fallback5533
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5015, $P5017
  fallback5533:
    set $S5001, $P5015
    box $P5018, $S5001
    set $P102, $P5018
    set $S5003, $P102
    split $P5019, "__", $S5003
    join $S5002, " ", $P5019
    box $P5020, $S5002
    set $P102, $P5020
.annotate 'line', 2920
    nqp_get_sc_object $P5024, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["VM"]
    unless_null $P5021, fallback5534
    nqp_get_sc_object $P5025, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5021, $P5025
  fallback5534:
    $P5026 = $P5021."new"($P101 :flat, $P102 :named("pirop"), _lex_param_1 :named("node"))
    $P5027 = _lex_param_1."!make"($P5026)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_322_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2923
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2924
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5535
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback5535:
    unless_null _lex_param_1, fallback5536
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5007
  fallback5536:
    set $P5006, _lex_param_1["const"]
    unless_null $P5006, fallback5537
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5008
  fallback5537:
    set $S5001, $P5006
    $P5009 = $P5001."new"($S5001 :named("pirconst"))
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_323_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2927
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "@args", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P103, $P5003
    unless_null _lex_param_1, fallback5538
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5005
  fallback5538:
    set $P5004, _lex_param_1["op"]
    unless_null $P5004, fallback5539
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5006
  fallback5539:
    set $S5001, $P5004
    box $P5007, $S5001
    set $P101, $P5007
    unless_null _lex_param_1, fallback5542
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5009
  fallback5542:
    set $P5008, _lex_param_1["args"]
    unless_null $P5008, fallback5543
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5010
  fallback5543:
    unless $P5008 goto if1738_else5540 
.annotate 'line', 2929
    unless_null _lex_param_1, fallback5544
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5013
  fallback5544:
    set $P5012, _lex_param_1["args"]
    unless_null $P5012, fallback5545
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5014
  fallback5545:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback5546
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback5546:
    $P5016 = $P5011."ast"()
    $P5017 = $P5016."list"()
    set $P5019, $P5017
    goto if1738_end5541
  if1738_else5540:
    new $P5018, 'ResizablePMCArray'
    set $P5019, $P5018
  if1738_end5541:
    set $P102, $P5019
.annotate 'line', 2930
    nqp_get_sc_object $P5023, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback5547
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5024
  fallback5547:
    $P5025 = $P5020."new"($P102 :flat, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P103, $P5025
.annotate 'line', 2931
    $P5026 = _lex_param_1."!make"($P103)
    .return ($P5026) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_324_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2934
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$dc_name", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 2935
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Node"]
    unless_null $P5002, fallback5548
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback5548:
    $P5007 = $P5002."unique"("dispatch_cap")
    set $P101, $P5007
.annotate 'line', 2936
    nqp_get_sc_object $P5011, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["Stmts"]
    unless_null $P5008, fallback5549
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5012
  fallback5549:
.annotate 'line', 2937
    nqp_get_sc_object $P5016, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Op"]
    unless_null $P5013, fallback5550
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5017
  fallback5550:
.annotate 'line', 2939
    nqp_get_sc_object $P5021, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["Var"]
    unless_null $P5018, fallback5551
    nqp_get_sc_object $P5022, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5018, $P5022
  fallback5551:
    $P5023 = $P5018."new"($P101 :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2940
    nqp_get_sc_object $P5027, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Var"]
    unless_null $P5024, fallback5552
    nqp_get_sc_object $P5028, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5024, $P5028
  fallback5552:
    $P5029 = $P5024."new"("CURRENT_DISPATCH_CAPTURE" :named("name"), "lexical" :named("scope"))
    $P5030 = $P5013."new"($P5023, $P5029, "bind" :named("op"))
.annotate 'line', 2942
    nqp_get_sc_object $P5034, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Op"]
    unless_null $P5031, fallback5553
    nqp_get_sc_object $P5035, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5031, $P5035
  fallback5553:
.annotate 'line', 2944
    nqp_get_sc_object $P5039, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback5554
    nqp_get_sc_object $P5040, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5036, $P5040
  fallback5554:
.annotate 'line', 2946
    nqp_get_sc_object $P5044, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Op"]
    unless_null $P5041, fallback5555
    nqp_get_sc_object $P5045, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5041, $P5045
  fallback5555:
.annotate 'line', 2948
    nqp_get_sc_object $P5049, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["Var"]
    unless_null $P5046, fallback5556
    nqp_get_sc_object $P5050, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5046, $P5050
  fallback5556:
.annotate 'line', 2950
    nqp_get_sc_object $P5054, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5053, $P5054, "QAST"
    get_who $P5052, $P5053
    set $P5051, $P5052["Var"]
    unless_null $P5051, fallback5557
    nqp_get_sc_object $P5055, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5051, $P5055
  fallback5557:
    $P5056 = $P5051."new"("&*CURRENT_DISPATCHER" :named("name"), "lexical" :named("scope"))
.annotate 'line', 2951
    nqp_get_sc_object $P5060, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5059, $P5060, "QAST"
    get_who $P5058, $P5059
    set $P5057, $P5058["WVal"]
    unless_null $P5057, fallback5558
    nqp_get_sc_object $P5061, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5057, $P5061
  fallback5558:
    find_dynamic_lex $P5062, "$*W"
    unless_null $P5062, fallback5559
    nqp_get_sc_object $P5065, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$W"]
    unless_null $P5063, fallback5560
    nqp_get_sc_object $P5066, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5063, $P5066
  fallback5560:
    unless_null $P5063, vivi_17395561
    die "Contextual $*W not found"
    box $P5067, "Contextual $*W not found"
    set $P5063, $P5067
  vivi_17395561:
    set $P5062, $P5063
  fallback5559:
    new $P5068, 'ResizablePMCArray'
    box $P5069, "NQPRoutine"
    push $P5068, $P5069
    $P5070 = $P5062."find_sym"($P5068)
    $P5071 = $P5057."new"($P5070 :named("value"))
    $P5072 = $P5046."new"($P5056, $P5071, "$!dispatch_cache" :named("name"), "attribute" :named("scope"))
.annotate 'line', 2953
    nqp_get_sc_object $P5076, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5075, $P5076, "QAST"
    get_who $P5074, $P5075
    set $P5073, $P5074["Var"]
    unless_null $P5073, fallback5562
    nqp_get_sc_object $P5077, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5073, $P5077
  fallback5562:
    $P5078 = $P5073."new"($P101 :named("name"), "local" :named("scope"))
    $P5079 = $P5041."new"($P5072, $P5078, "multicachefind" :named("op"))
.annotate 'line', 2955
    nqp_get_sc_object $P5083, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["Op"]
    unless_null $P5080, fallback5563
    nqp_get_sc_object $P5084, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5080, $P5084
  fallback5563:
.annotate 'line', 2957
    nqp_get_sc_object $P5088, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5087, $P5088, "QAST"
    get_who $P5086, $P5087
    set $P5085, $P5086["Var"]
    unless_null $P5085, fallback5564
    nqp_get_sc_object $P5089, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5085, $P5089
  fallback5564:
    $P5090 = $P5085."new"("&*CURRENT_DISPATCHER" :named("name"), "lexical" :named("scope"))
.annotate 'line', 2958
    nqp_get_sc_object $P5094, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5093, $P5094, "QAST"
    get_who $P5092, $P5093
    set $P5091, $P5092["Var"]
    unless_null $P5091, fallback5565
    nqp_get_sc_object $P5095, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5091, $P5095
  fallback5565:
    $P5096 = $P5091."new"($P101 :named("name"), "local" :named("scope"))
    $P5097 = $P5080."new"($P5090, $P5096, "callmethod" :named("op"), "dispatch" :named("name"))
    $P5098 = $P5036."new"($P5079, $P5097, "ifnull" :named("op"))
.annotate 'line', 2961
    nqp_get_sc_object $P5102, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5101, $P5102, "QAST"
    get_who $P5100, $P5101
    set $P5099, $P5100["Var"]
    unless_null $P5099, fallback5566
    nqp_get_sc_object $P5103, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5099, $P5103
  fallback5566:
    $P5104 = $P5099."new"($P101 :named("name"), "local" :named("scope"))
    $P5105 = $P5031."new"($P5098, $P5104, "invokewithcapture" :named("op"))
    $P5106 = $P5008."new"($P5030, $P5105)
    $P5107 = _lex_param_1."!make"($P5106)
    .return ($P5107) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_325_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2965
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5567
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback5567:
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5568
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback5568:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_326_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2967
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5052 = 'cuid_497_1360426903.566' 
    capture_lex $P5052 
    .lex "$past", $P101 
    .lex "$i", $P102 
    .lex "$n", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc tmp_2 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P103, $P5003
.annotate 'line', 2968
    nqp_get_sc_object $P5007, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Op"]
    unless_null $P5004, fallback5569
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5008
  fallback5569:
    $P5009 = $P5004."new"("call" :named("op"), _lex_param_1 :named("node"))
    set $P101, $P5009
    unless_null _lex_param_1, fallback5572
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5011
  fallback5572:
    set $P5010, _lex_param_1["EXPR"]
    unless_null $P5010, fallback5573
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5012
  fallback5573:
    unless $P5010 goto if1740_end5571 
    .const 'Sub' $P5013 = 'cuid_497_1360426903.566' 
    capture_lex $P5013
    $P5014 = $P5013()
  if1740_end5571:
    box $P5015, 0
    set $P102, $P5015
.annotate 'line', 2977
    $P5016 = $P101."list"()
    set $N5001, $P5016
    box $P5017, $N5001
    set $P103, $P5017
  while1744_test5586:
    set $N5002, $P102
    set $N5003, $P103
    islt $I5001, $N5002, $N5003
    box $P5050, $I5001
    set $P5049, $P5050
    unless $I5001 goto while1744_done5590 
  while1744_redo5588:
.annotate 'line', 2978
    set $I5003, $P102
    set $P5018, $P101[$I5003]
    unless_null $P5018, fallback5595
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5018, $P5019
  fallback5595:
    nqp_get_sc_object $P5023, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback5596
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5024
  fallback5596:
    type_check $I5002, $P5018, $P5020
    set $I5006, $I5002
    unless $I5002 goto if1746_end5594 
.annotate 'line', 2979
    set $I5005, $P102
    set $P5025, $P101[$I5005]
    unless_null $P5025, fallback5597
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5025, $P5026
  fallback5597:
    $P5027 = $P5025."name"()
    set $S5001, $P5027
    iseq $I5004, $S5001, "&prefix:<|>"
    set $I5006, $I5004
  if1746_end5594:
    unless $I5006 goto if1745_end5592 
    set $I5007, $P102
    set $I5008, $P102
    set $P5029, $P101[$I5008]
    unless_null $P5029, fallback5598
    nqp_get_sc_object $P5030, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5029, $P5030
  fallback5598:
    set $P5028, $P5029[0]
    unless_null $P5028, fallback5599
    nqp_get_sc_object $P5031, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5028, $P5031
  fallback5599:
    set $P101[$I5007], $P5028
.annotate 'line', 2981
    set $I5009, $P102
    set $P5032, $P101[$I5009]
    unless_null $P5032, fallback5600
    nqp_get_sc_object $P5033, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5032, $P5033
  fallback5600:
    $P5032."flat"(1)
    set $I5011, $P102
    set $P5034, $P101[$I5011]
    unless_null $P5034, fallback5605
    nqp_get_sc_object $P5035, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5034, $P5035
  fallback5605:
    nqp_get_sc_object $P5039, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Var"]
    unless_null $P5036, fallback5606
    nqp_get_sc_object $P5040, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5036, $P5040
  fallback5606:
    type_check $I5010, $P5034, $P5036
    set $I5014, $I5010
    unless $I5010 goto if1748_end5604 
.annotate 'line', 2983
    set $I5013, $P102
    set $P5041, $P101[$I5013]
    unless_null $P5041, fallback5607
    nqp_get_sc_object $P5042, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5041, $P5042
  fallback5607:
    $P5043 = $P5041."name"()
    set $S5003, $P5043
    substr $S5002, $S5003, 0, 1
    iseq $I5012, $S5002, "%"
    set $I5014, $I5012
  if1748_end5604:
    box $P5048, $I5014
    set $P5047, $P5048
    unless $I5014 goto if1747_end5602 
.annotate 'line', 2982
    set $I5015, $P102
    set $P5044, $P101[$I5015]
    unless_null $P5044, fallback5608
    nqp_get_sc_object $P5045, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5044, $P5045
  fallback5608:
    $P5046 = $P5044."named"(1)
    set $P5047, $P5046
  if1747_end5602:
  if1745_end5592:
    set tmp_2, $P102
    set $N5005, tmp_2
    set $N5006, 1
    add $N5004, $N5005, $N5006
    box $P5049, $N5004
    set $P102, $P5049
    set $P5049, tmp_2
    goto while1744_test5586 
  while1744_done5590:
.annotate 'line', 2987
    $P5051 = _lex_param_1."!make"($P101)
    .return ($P5051) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_497_1360426903.566") :anon :lex :outer("cuid_326_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2969
    .const 'Sub' $P5023 = 'cuid_496_1360426903.566' 
    capture_lex $P5023 
    .lex "$expr", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 2970
    find_lex $P5003, "$/"
    unless_null $P5003, fallback5574
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5004
  fallback5574:
    set $P5002, $P5003["EXPR"]
    unless_null $P5002, fallback5575
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5005
  fallback5575:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
    nqp_get_sc_object $P5010, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback5582
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5011
  fallback5582:
    type_check $I5001, $P101, $P5007
    set $I5003, $I5001
    unless $I5001 goto if1743_end5581 
.annotate 'line', 2971
    $P5012 = $P101."name"()
    set $S5001, $P5012
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1743_end5581:
    set $I5005, $I5003
    unless $I5003 goto if1742_end5579 
    $P5013 = $P101."named"()
    isfalse $I5004, $P5013
    set $I5005, $I5004
  if1742_end5579:
    unless $I5005 goto if1741_else5576 
.annotate 'line', 2972
    $P5017 = $P101."list"()
    set $P5014, $P5017
    iter $P5016, $P5017
  for_next5583:
    unless $P5016, for_done5585
    shift $P5019, $P5016
  for_redo5584:
    .const 'Sub' $P5018 = 'cuid_496_1360426903.566' 
    capture_lex $P5018
    $P5014 = $P5018($P5019)
    goto for_next5583
  for_done5585:
    set $P5022, $P5014
    goto if1741_end5577
  if1741_else5576:
.annotate 'line', 2974
    find_lex $P5020, "$past"
    $P5021 = $P5020."push"($P101)
    set $P5022, $P5021
  if1741_end5577:
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_496_1360426903.566") :anon :lex :outer("cuid_497_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2972
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$past"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_327_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2990
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5609
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback5609:
    set $P5001, _lex_param_1["multi_declarator"]
    unless_null $P5001, fallback5610
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback5610:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_328_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2992
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5611
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback5611:
    set $P5001, _lex_param_1["value"]
    unless_null $P5001, fallback5612
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback5612:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_329_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2994
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2995
    unless_null _lex_param_1, fallback5615
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback5615:
    set $P5001, _lex_param_1["EXPR"]
    unless_null $P5001, fallback5616
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback5616:
    unless $P5001 goto if1749_else5613 
.annotate 'line', 2996
    unless_null _lex_param_1, fallback5617
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5006
  fallback5617:
    set $P5005, _lex_param_1["EXPR"]
    unless_null $P5005, fallback5618
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5005, $P5007
  fallback5618:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback5619
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5008
  fallback5619:
    $P5009 = $P5004."ast"()
    set $P5016, $P5009
    goto if1749_end5614
  if1749_else5613:
.annotate 'line', 2997
    nqp_get_sc_object $P5013, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback5620
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5014
  fallback5620:
    $P5015 = $P5010."new"("list" :named("op"), _lex_param_1 :named("node"))
    set $P5016, $P5015
  if1749_end5614:
    $P5017 = _lex_param_1."!make"($P5016)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_330_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3000
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    unless_null _lex_param_1, fallback5623
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5003
  fallback5623:
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback5624
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5004
  fallback5624:
    unless $P5002 goto if1750_else5621 
.annotate 'line', 3002
.annotate 'line', 3003
    unless_null _lex_param_1, fallback5625
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5007
  fallback5625:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5626
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5008
  fallback5626:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5627
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5005, $P5009
  fallback5627:
    $P5010 = $P5005."ast"()
    set $P101, $P5010
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5632
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback5632:
    type_check $I5001, $P101, $P5011
    set $I5003, $I5001
    unless $I5001 goto if1752_end5631 
.annotate 'line', 3004
    $P5016 = $P101."name"()
    set $S5001, $P5016
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1752_end5631:
    box $P5024, $I5003
    set $P5023, $P5024
    if $I5003 goto unless1751_end5629 
.annotate 'line', 3005
    nqp_get_sc_object $P5020, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback5633
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5021
  fallback5633:
    $P5022 = $P5017."new"($P101, "list" :named("op"))
    set $P101, $P5022
    set $P5023, $P101
  unless1751_end5629:
    goto if1750_end5622
  if1750_else5621:
.annotate 'line', 3008
.annotate 'line', 3009
    nqp_get_sc_object $P5028, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Op"]
    unless_null $P5025, fallback5634
    nqp_get_sc_object $P5029, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5025, $P5029
  fallback5634:
    $P5030 = $P5025."new"("list" :named("op"))
    set $P101, $P5030
  if1750_end5622:
.annotate 'line', 3011
    $P101."name"("&circumfix:<[ ]>")
.annotate 'line', 3012
    $P5031 = _lex_param_1."!make"($P101)
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_331_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3015
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5635
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback5635:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5636
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback5636:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_332_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3016
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5637
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback5637:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5638
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback5638:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_333_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3018
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5028 = 'cuid_498_1360426903.566' 
    capture_lex $P5028 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5641
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5005
  fallback5641:
    set $P5004, _lex_param_1["pblock"]
    unless_null $P5004, fallback5642
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5006
  fallback5642:
    set $P5003, $P5004["blockoid"]
    unless_null $P5003, fallback5643
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5007
  fallback5643:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback5644
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5008
  fallback5644:
    set $P5001, $P5002["statement"]
    unless_null $P5001, fallback5645
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5009
  fallback5645:
    set $N5001, $P5001
    set $N5002, 0
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1753_else5639 
    .const 'Sub' $P5010 = 'cuid_498_1360426903.566' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5027, $P5011
    goto if1753_end5640
  if1753_else5639:
    unless_null _lex_param_1, fallback5651
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5015
  fallback5651:
    set $P5014, _lex_param_1["pblock"]
    unless_null $P5014, fallback5652
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5016
  fallback5652:
    set $P5013, $P5014["blockoid"]
    unless_null $P5013, fallback5653
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5017
  fallback5653:
    set $P5012, $P5013["you_are_here"]
    unless_null $P5012, fallback5654
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5018
  fallback5654:
    unless $P5012 goto if1754_else5649 
.annotate 'line', 3024
.annotate 'line', 3025
    unless_null _lex_param_1, fallback5655
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5020
  fallback5655:
    set $P5019, _lex_param_1["pblock"]
    unless_null $P5019, fallback5656
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5019, $P5021
  fallback5656:
    $P5022 = $P5019."ast"()
    $P5023 = _lex_param_1."!make"($P5022)
    set $P5026, $P5023
    goto if1754_end5650
  if1754_else5649:
.annotate 'line', 3027
.annotate 'line', 3028
    $P5024 = "&default_for"("%")
    $P5025 = _lex_param_1."!make"($P5024)
    set $P5026, $P5025
  if1754_end5650:
    set $P5027, $P5026
  if1753_end5640:
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_498_1360426903.566") :anon :lex :outer("cuid_333_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3019
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 3020
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback5646
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5006
  fallback5646:
    find_lex $P5008, "$/"
    unless_null $P5008, fallback5647
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5009
  fallback5647:
    set $P5007, $P5008["pblock"]
    unless_null $P5007, fallback5648
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5010
  fallback5648:
    $P5011 = $P5007."ast"()
    $P5012 = $P5002."new"($P5011, "takeclosure" :named("op"))
    set $P101, $P5012
    box $P5013, 1
    set $P101["bareblock"], $P5013
.annotate 'line', 3022
    find_dynamic_lex $P5014, "$/"
    $P5015 = $P5014."!make"($P101)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_334_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3032
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5657
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback5657:
    set $P5001, _lex_param_1["statement"]
    unless_null $P5001, fallback5658
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback5658:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_335_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3034
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3035
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5659
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback5659:
    unless_null _lex_param_1, fallback5660
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5007
  fallback5660:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5661
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5008
  fallback5661:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "positional" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_336_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3038
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3039
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5662
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback5662:
    unless_null _lex_param_1, fallback5663
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5007
  fallback5663:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5664
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5008
  fallback5664:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "associative" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_337_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3042
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3043
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5665
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback5665:
    unless_null _lex_param_1, fallback5666
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5007
  fallback5666:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5667
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5008
  fallback5667:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "associative" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_338_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3046
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3047
    unless_null _lex_param_1, fallback5668
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback5668:
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5669
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback5669:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_339_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3050
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3051
    unless_null _lex_param_1, fallback5672
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback5672:
    set $P5001, _lex_param_1["quote"]
    unless_null $P5001, fallback5673
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback5673:
    unless $P5001 goto if1755_else5670 
    unless_null _lex_param_1, fallback5674
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5005
  fallback5674:
    set $P5004, _lex_param_1["quote"]
    unless_null $P5004, fallback5675
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5004, $P5006
  fallback5675:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1755_end5671
  if1755_else5670:
    unless_null _lex_param_1, fallback5676
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5009
  fallback5676:
    set $P5008, _lex_param_1["number"]
    unless_null $P5008, fallback5677
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5008, $P5010
  fallback5677:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1755_end5671:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_340_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3054
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$value", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    unless_null _lex_param_1, fallback5680
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5003
  fallback5680:
    set $P5002, _lex_param_1["dec_number"]
    unless_null $P5002, fallback5681
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5004
  fallback5681:
    unless $P5002 goto if1756_else5678 
.annotate 'line', 3055
    unless_null _lex_param_1, fallback5682
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5006
  fallback5682:
    set $P5005, _lex_param_1["dec_number"]
    unless_null $P5005, fallback5683
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5005, $P5007
  fallback5683:
    $P5008 = $P5005."ast"()
    set $P5013, $P5008
    goto if1756_end5679
  if1756_else5678:
    unless_null _lex_param_1, fallback5684
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5010
  fallback5684:
    set $P5009, _lex_param_1["integer"]
    unless_null $P5009, fallback5685
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5009, $P5011
  fallback5685:
    $P5012 = $P5009."ast"()
    set $P5013, $P5012
  if1756_end5679:
    set $P101, $P5013
    unless_null _lex_param_1, fallback5688
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5015
  fallback5688:
    set $P5014, _lex_param_1["sign"]
    unless_null $P5014, fallback5689
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5016
  fallback5689:
    set $S5001, $P5014
    iseq $I5001, $S5001, "-"
    unless $I5001 goto if1757_end5687 
.annotate 'line', 3056
    set $N5002, $P101
    neg $N5001, $N5002
    box $P5017, $N5001
    set $P101, $P5017
  if1757_end5687:
.annotate 'line', 3057
    unless_null _lex_param_1, fallback5692
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5019
  fallback5692:
    set $P5018, _lex_param_1["dec_number"]
    unless_null $P5018, fallback5693
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5018, $P5020
  fallback5693:
    unless $P5018 goto if1758_else5690 
.annotate 'line', 3058
    nqp_get_sc_object $P5024, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["NVal"]
    unless_null $P5021, fallback5694
    nqp_get_sc_object $P5025, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5021, $P5025
  fallback5694:
    $P5026 = $P5021."new"($P101 :named("value"))
    set $P5033, $P5026
    goto if1758_end5691
  if1758_else5690:
.annotate 'line', 3059
    nqp_get_sc_object $P5030, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["IVal"]
    unless_null $P5027, fallback5695
    nqp_get_sc_object $P5031, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5027, $P5031
  fallback5695:
    $P5032 = $P5027."new"($P101 :named("value"))
    set $P5033, $P5032
  if1758_end5691:
    $P5034 = _lex_param_1."!make"($P5033)
    .return ($P5034) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_341_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3062
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5696
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback5696:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5697
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback5697:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_342_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3063
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5698
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback5698:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5699
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback5699:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_343_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3064
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5700
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback5700:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5701
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback5701:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_344_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3065
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5702
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback5702:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5703
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback5703:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_345_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3066
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5704
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback5704:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5705
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback5705:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_346_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3067
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3068
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5706
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback5706:
    unless_null _lex_param_1, fallback5707
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5007
  fallback5707:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5708
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5008
  fallback5708:
    $P5009 = $P5006."ast"()
    $P5010 = $P5009."value"()
    $P5011 = $P5001."new"($P5010 :named("pir"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_347_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3071
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$regex", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P103, $P5003
.annotate 'line', 3072
    find_dynamic_lex $P5004, "$*W"
    unless_null $P5004, fallback5709
    nqp_get_sc_object $P5007, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$W"]
    unless_null $P5005, fallback5710
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5005, $P5008
  fallback5710:
    unless_null $P5005, vivi_17595711
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5005, $P5009
  vivi_17595711:
    set $P5004, $P5005
  fallback5709:
    $P5010 = $P5004."pop_lexpad"()
    set $P101, $P5010
.annotate 'line', 3073
    set $P5011, $P101[0]
    unless_null $P5011, fallback5712
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5012
  fallback5712:
    nqp_get_sc_object $P5016, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback5713
    nqp_get_sc_object $P5017, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5013, $P5017
  fallback5713:
    $P5018 = $P5013."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5011."push"($P5018)
.annotate 'line', 3074
    set $P5019, $P101[0]
    unless_null $P5019, fallback5714
    nqp_get_sc_object $P5020, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5019, $P5020
  fallback5714:
    nqp_get_sc_object $P5024, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5715
    nqp_get_sc_object $P5025, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5021, $P5025
  fallback5715:
.annotate 'line', 3076
    nqp_get_sc_object $P5029, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5716
    nqp_get_sc_object $P5030, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5026, $P5030
  fallback5716:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 3077
    nqp_get_sc_object $P5035, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback5717
    nqp_get_sc_object $P5036, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5032, $P5036
  fallback5717:
    $P5037 = $P5032."new"("self" :named("name"), "lexical" :named("scope"))
    $P5038 = $P5021."new"($P5031, $P5037, "bind" :named("op"))
    $P5019."push"($P5038)
.annotate 'line', 3078
    set $P5039, $P101[0]
    unless_null $P5039, fallback5718
    nqp_get_sc_object $P5040, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5039, $P5040
  fallback5718:
    nqp_get_sc_object $P5044, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback5719
    nqp_get_sc_object $P5045, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5041, $P5045
  fallback5719:
    $P5046 = $P5041."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5039."push"($P5046)
.annotate 'line', 3079
    set $P5047, $P101[0]
    unless_null $P5047, fallback5720
    nqp_get_sc_object $P5048, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5047, $P5048
  fallback5720:
    nqp_get_sc_object $P5052, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Var"]
    unless_null $P5049, fallback5721
    nqp_get_sc_object $P5053, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5049, $P5053
  fallback5721:
    $P5054 = $P5049."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5047."push"($P5054)
.annotate 'line', 3080
    $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 3081
    $P101."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 3083
    find_dynamic_lex $P5056, "%*LANG"
    unless_null $P5056, fallback5722
    nqp_get_sc_object $P5059, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["%LANG"]
    unless_null $P5057, fallback5723
    nqp_get_sc_object $P5061, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5060, $P5061
    new $P5062, 'Hash'
    set $P5060["%LANG"], $P5062
    set $P5057, $P5062
  fallback5723:
    unless_null $P5057, vivi_17605724
    die "Contextual %*LANG not found"
    box $P5063, "Contextual %*LANG not found"
    set $P5057, $P5063
  vivi_17605724:
    set $P5056, $P5057
  fallback5722:
    set $P5055, $P5056["Regex-actions"]
    unless_null $P5055, fallback5725
    nqp_get_sc_object $P5064, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5055, $P5064
  fallback5725:
    unless_null _lex_param_1, fallback5726
    nqp_get_sc_object $P5066, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5066
  fallback5726:
    set $P5065, _lex_param_1["p6regex"]
    unless_null $P5065, fallback5727
    nqp_get_sc_object $P5067, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5065, $P5067
  fallback5727:
    $P5068 = $P5065."ast"()
    $P5069 = $P5055."qbuildsub"($P5068, $P101)
    set $P102, $P5069
.annotate 'line', 3084
    nqp_get_sc_object $P5073, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5072, $P5073, "QAST"
    get_who $P5071, $P5072
    set $P5070, $P5071["Op"]
    unless_null $P5070, fallback5728
    nqp_get_sc_object $P5074, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5070, $P5074
  fallback5728:
.annotate 'line', 3086
    new $P5075, 'ResizablePMCArray'
    box $P5076, "NQPRegex"
    push $P5075, $P5076
    $P5077 = "&lexical_package_lookup"($P5075, _lex_param_1)
    $P5078 = $P5070."new"($P5077, $P102, "callmethod" :named("op"), "new" :named("name"))
    set $P103, $P5078
    set $P103["sink"], $P102
.annotate 'line', 3091
    $P5079 = _lex_param_1."!make"($P103)
    .return ($P5079) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_348_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3094
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5729
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback5729:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback5730
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback5730:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_349_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3095
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3096
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5731
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback5731:
.annotate 'line', 3097
    unless_null _lex_param_1, fallback5732
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5007
  fallback5732:
    set $P5006, _lex_param_1["block"]
    unless_null $P5006, fallback5733
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5008
  fallback5733:
    $P5009 = $P5006."ast"()
    $P5010 = "&block_immediate"($P5009)
    $P5011 = $P5001."new"($P5010, "stringify" :named("op"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_350_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3100
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    $P5001 = _lex_param_1."!make"("\e")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_351_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3104
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5734
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback5734:
    set $P5001, _lex_param_1["dotty"]
    unless_null $P5001, fallback5735
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback5735:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_352_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3106
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3107
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5736
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback5736:
.annotate 'line', 3109
    nqp_get_sc_object $P5009, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5737
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5010
  fallback5737:
    $P5011 = $P5006."new"("RETURN" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "call" :named("op"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_353_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3113
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3114
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5738
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback5738:
.annotate 'line', 3115
    nqp_get_sc_object $P5009, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5739
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5010
  fallback5739:
    $P5011 = $P5006."new"("$/" :named("name"), "contextual" :named("scope"))
    $P5012 = $P5001."new"($P5011, "callmethod" :named("op"), "!make" :named("name"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_354_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3122
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5740
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback5740:
    $P5006 = $P5001."new"("control" :named("op"), "next" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_355_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3123
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5741
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback5741:
    $P5006 = $P5001."new"("control" :named("op"), "last" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_356_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3124
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5742
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback5742:
    $P5006 = $P5001."new"("control" :named("op"), "redo" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_357_1360426903.566") :anon :lex :outer("cuid_424_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3126
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3127
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5743
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback5743:
    $P5006 = $P5001."new"("callmethod" :named("op"), "ACCEPTS" :named("name"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_499_1360426903.566") :anon :lex :outer("cuid_372_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3208
    .const 'Sub' $P5014 = 'cuid_358_1360426903.566' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_359_1360426903.566' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_360_1360426903.566' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_361_1360426903.566' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_362_1360426903.566' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_363_1360426903.566' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_364_1360426903.566' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_365_1360426903.566' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_366_1360426903.566' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_367_1360426903.566' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_368_1360426903.566' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_369_1360426903.566' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_370_1360426903.566' 
    capture_lex $P5014 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_358_1360426903.566' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_359_1360426903.566' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_360_1360426903.566' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_361_1360426903.566' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_362_1360426903.566' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_363_1360426903.566' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_364_1360426903.566' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_365_1360426903.566' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_366_1360426903.566' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_367_1360426903.566' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_368_1360426903.566' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_369_1360426903.566' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_370_1360426903.566' 
    capture_lex $P5013
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_358_1360426903.566") :anon :lex :outer("cuid_499_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3210
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 3211
    unless_null _lex_param_1, fallback5744
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5003
  fallback5744:
    set $P5002, _lex_param_1["statement"]
    unless_null $P5002, fallback5745
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5002, $P5004
  fallback5745:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 3212
    nqp_get_sc_object $P5009, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Regex"]
    unless_null $P5006, fallback5746
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5010
  fallback5746:
    $P5011 = $P5006."new"($P101, "qastnode" :named("rxtype"), "declarative" :named("subtype"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_359_1360426903.566") :anon :lex :outer("cuid_499_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3216
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3217
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5747
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback5747:
    unless_null _lex_param_1, fallback5748
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5007
  fallback5748:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5749
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5008
  fallback5749:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_360_1360426903.566") :anon :lex :outer("cuid_499_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3221
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3222
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5750
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback5750:
    nqp_get_sc_object $P5009, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5751
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5010
  fallback5751:
.annotate 'line', 3223
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5752
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback5752:
    $P5016 = $P5011."new"("!INTERPOLATE" :named("value"))
.annotate 'line', 3224
    unless_null _lex_param_1, fallback5753
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5018
  fallback5753:
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5754
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5019
  fallback5754:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_361_1360426903.566") :anon :lex :outer("cuid_499_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3228
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3229
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5755
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback5755:
    nqp_get_sc_object $P5009, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5756
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5010
  fallback5756:
.annotate 'line', 3230
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5757
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback5757:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3231
    unless_null _lex_param_1, fallback5758
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5018
  fallback5758:
    set $P5017, _lex_param_1["codeblock"]
    unless_null $P5017, fallback5759
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5019
  fallback5759:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_362_1360426903.566") :anon :lex :outer("cuid_499_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3235
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3236
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5760
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback5760:
    unless_null _lex_param_1, fallback5761
    nqp_get_sc_object $P5007, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5007
  fallback5761:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5762
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5008
  fallback5762:
    $P5009 = $P5006."ast"()
    unless_null _lex_param_1, fallback5763
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5011
  fallback5763:
    set $P5010, _lex_param_1["zw"]
    unless_null $P5010, fallback5764
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5012
  fallback5764:
    set $S5001, $P5010
    iseq $I5001, $S5001, "!"
    $P5013 = $P5001."new"($P5009, "zerowidth" :named("subtype"), $I5001 :named("negate"), "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5014 = _lex_param_1."!make"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_363_1360426903.566") :anon :lex :outer("cuid_499_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3241
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3242
    nqp_get_sc_object $P5004, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5765
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5005
  fallback5765:
    nqp_get_sc_object $P5009, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5766
    nqp_get_sc_object $P5010, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5006, $P5010
  fallback5766:
.annotate 'line', 3243
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5767
    nqp_get_sc_object $P5015, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5015
  fallback5767:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3244
    unless_null _lex_param_1, fallback5768
    nqp_get_sc_object $P5018, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5018
  fallback5768:
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5769
    nqp_get_sc_object $P5019, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5019
  fallback5769:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_364_1360426903.566") :anon :lex :outer("cuid_499_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3248
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
.annotate 'line', 3249
    unless_null _lex_param_1, fallback5770
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5004
  fallback5770:
    set $P5003, _lex_param_1["block"]
    unless_null $P5003, fallback5771
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5005
  fallback5771:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 3250
    $P101."blocktype"("immediate")
.annotate 'line', 3252
    nqp_get_sc_object $P5010, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback5772
    nqp_get_sc_object $P5011, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5011
  fallback5772:
.annotate 'line', 3253
    nqp_get_sc_object $P5015, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback5773
    nqp_get_sc_object $P5016, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5012, $P5016
  fallback5773:
.annotate 'line', 3255
    nqp_get_sc_object $P5020, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Var"]
    unless_null $P5017, fallback5774
    nqp_get_sc_object $P5021, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5021
  fallback5774:
    $P5022 = $P5017."new"("$/" :named("name"), "contextual" :named("scope"))
.annotate 'line', 3256
    nqp_get_sc_object $P5026, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["Op"]
    unless_null $P5023, fallback5775
    nqp_get_sc_object $P5027, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5023, $P5027
  fallback5775:
.annotate 'line', 3257
    nqp_get_sc_object $P5031, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["Var"]
    unless_null $P5028, fallback5776
    nqp_get_sc_object $P5032, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5028, $P5032
  fallback5776:
    $P5033 = $P5028."new"(utf8:"$\x{a2}" :named("name"), "contextual" :named("scope"))
    $P5034 = $P5023."new"($P5033, "MATCH" :named("name"), "callmethod" :named("op"))
    $P5035 = $P5012."new"($P5022, $P5034, "bind" :named("op"))
    $P5036 = $P5007."new"($P5035, $P101)
    set $P102, $P5036
.annotate 'line', 3264
    $P5037 = _lex_param_1."!make"($P102)
    .return ($P5037) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_365_1360426903.566") :anon :lex :outer("cuid_499_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3267
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5085 = 'cuid_500_1360426903.566' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_501_1360426903.566' 
    capture_lex $P5085 
    .lex "$name", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback5777
    nqp_get_sc_object $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5004
  fallback5777:
    set $P5003, _lex_param_1["longname"]
    unless_null $P5003, fallback5778
    nqp_get_sc_object $P5005, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5005
  fallback5778:
    set $S5001, $P5003
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback5781
    nqp_get_sc_object $P5008, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5008
  fallback5781:
    set $P5007, _lex_param_1["assertion"]
    unless_null $P5007, fallback5782
    nqp_get_sc_object $P5009, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5007, $P5009
  fallback5782:
    unless $P5007 goto if1761_else5779 
.annotate 'line', 3270
.annotate 'line', 3271
    unless_null _lex_param_1, fallback5783
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5012
  fallback5783:
    set $P5011, _lex_param_1["assertion"]
    unless_null $P5011, fallback5784
    nqp_get_sc_object $P5013, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5011, $P5013
  fallback5784:
    set $P5010, $P5011[0]
    unless_null $P5010, fallback5785
    nqp_get_sc_object $P5014, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5010, $P5014
  fallback5785:
    $P5015 = $P5010."ast"()
    set $P102, $P5015
.annotate 'line', 3272
    nqp_decontainerize $P5016, _lex_param_0
    $P5017 = $P5016."subrule_alias"($P102, $P101)
    goto if1761_end5780
  if1761_else5779:
    set $S5002, $P101
    iseq $I5001, $S5002, "sym"
    unless $I5001 goto if1762_else5786 
    .const 'Sub' $P5018 = 'cuid_500_1360426903.566' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5083, $P5019
    goto if1762_end5787
  if1762_else5786:
.annotate 'line', 3282
.annotate 'line', 3283
    nqp_get_sc_object $P5023, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Regex"]
    unless_null $P5020, fallback5804
    nqp_get_sc_object $P5024, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5020, $P5024
  fallback5804:
.annotate 'line', 3285
    nqp_get_sc_object $P5028, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Node"]
    unless_null $P5025, fallback5805
    nqp_get_sc_object $P5029, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5025, $P5029
  fallback5805:
    nqp_get_sc_object $P5033, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["SVal"]
    unless_null $P5030, fallback5806
    nqp_get_sc_object $P5034, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5030, $P5034
  fallback5806:
    $P5035 = $P5030."new"($P101 :named("value"))
    $P5036 = $P5025."new"($P5035)
    $P5037 = $P5020."new"($P5036, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"), $P101 :named("name"))
    set $P102, $P5037
    unless_null _lex_param_1, fallback5809
    nqp_get_sc_object $P5039, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5039
  fallback5809:
    set $P5038, _lex_param_1["arglist"]
    unless_null $P5038, fallback5810
    nqp_get_sc_object $P5040, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5038, $P5040
  fallback5810:
    unless $P5038 goto if1767_else5807 
.annotate 'line', 3286
.annotate 'line', 3287
    unless_null _lex_param_1, fallback5811
    nqp_get_sc_object $P5046, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5046
  fallback5811:
    set $P5045, _lex_param_1["arglist"]
    unless_null $P5045, fallback5812
    nqp_get_sc_object $P5047, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5045, $P5047
  fallback5812:
    set $P5044, $P5045[0]
    unless_null $P5044, fallback5813
    nqp_get_sc_object $P5048, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5044, $P5048
  fallback5813:
    $P5049 = $P5044."ast"()
    $P5050 = $P5049."list"()
    set $P5041, $P5050
    iter $P5043, $P5050
  for_next5815:
    unless $P5043, for_done5817
    shift $P5052, $P5043
  for_redo5816:
    .const 'Sub' $P5051 = 'cuid_501_1360426903.566' 
    capture_lex $P5051
    $P5041 = $P5051($P5052)
    goto for_next5815
  for_done5817:
    set $P5082, $P5041
    goto if1767_end5808
  if1767_else5807:
    unless_null _lex_param_1, fallback5820
    nqp_get_sc_object $P5054, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5054
  fallback5820:
    set $P5053, _lex_param_1["nibbler"]
    unless_null $P5053, fallback5821
    nqp_get_sc_object $P5055, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5053, $P5055
  fallback5821:
    set $P5081, $P5053
    unless $P5053 goto if1768_end5819 
.annotate 'line', 3289
    set $S5003, $P101
    iseq $I5002, $S5003, "after"
    unless $I5002 goto if1769_else5822 
.annotate 'line', 3291
    set $P5056, $P102[0]
    unless_null $P5056, fallback5824
    nqp_get_sc_object $P5057, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5056, $P5057
  fallback5824:
    nqp_decontainerize $P5058, _lex_param_0
    nqp_decontainerize $P5059, _lex_param_0
    unless_null _lex_param_1, fallback5825
    nqp_get_sc_object $P5062, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5062
  fallback5825:
    set $P5061, _lex_param_1["nibbler"]
    unless_null $P5061, fallback5826
    nqp_get_sc_object $P5063, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5061, $P5063
  fallback5826:
    set $P5060, $P5061[0]
    unless_null $P5060, fallback5827
    nqp_get_sc_object $P5064, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5060, $P5064
  fallback5827:
    $P5065 = $P5060."ast"()
    $P5066 = $P5059."flip_ast"($P5065)
    $P5067 = $P5058."qbuildsub"($P5066, 1 :named("anon"), 1 :named("addself"))
    $P5068 = $P5056."push"($P5067)
    set $P5080, $P5068
    goto if1769_end5823
  if1769_else5822:
.annotate 'line', 3292
    set $P5069, $P102[0]
    unless_null $P5069, fallback5828
    nqp_get_sc_object $P5070, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5069, $P5070
  fallback5828:
    nqp_decontainerize $P5071, _lex_param_0
    unless_null _lex_param_1, fallback5829
    nqp_get_sc_object $P5074, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5074
  fallback5829:
    set $P5073, _lex_param_1["nibbler"]
    unless_null $P5073, fallback5830
    nqp_get_sc_object $P5075, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5073, $P5075
  fallback5830:
    set $P5072, $P5073[0]
    unless_null $P5072, fallback5831
    nqp_get_sc_object $P5076, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5072, $P5076
  fallback5831:
    $P5077 = $P5072."ast"()
    $P5078 = $P5071."qbuildsub"($P5077, 1 :named("anon"), 1 :named("addself"))
    $P5079 = $P5069."push"($P5078)
    set $P5080, $P5079
  if1769_end5823:
    set $P5081, $P5080
  if1768_end5819:
    set $P5082, $P5081
  if1767_end5808:
    set $P5083, $P5082
  if1762_end5787:
  if1761_end5780:
.annotate 'line', 3295
    $P5084 = _lex_param_1."!make"($P102)
    .return ($P5084) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_500_1360426903.566") :anon :lex :outer("cuid_365_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3274
    .lex "$loc", $P101 
    .lex "$rxname", $P102 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P102, $P5002
    find_dynamic_lex $P5004, "%*RX"
    unless_null $P5004, fallback5788
    nqp_get_sc_object $P5007, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["%RX"]
    unless_null $P5005, fallback5789
    nqp_get_sc_object $P5009, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%RX"], $P5010
    set $P5005, $P5010
  fallback5789:
    unless_null $P5005, vivi_17635790
    die "Contextual %*RX not found"
    box $P5011, "Contextual %*RX not found"
    set $P5005, $P5011
  vivi_17635790:
    set $P5004, $P5005
  fallback5788:
    set $P5003, $P5004["name"]
    unless_null $P5003, fallback5791
    nqp_get_sc_object $P5012, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5012
  fallback5791:
    set $S5001, $P5003
    index $I5001, $S5001, ":sym<", 0
    box $P5013, $I5001
    set $P101, $P5013
    set $N5001, $P101
    set $N5002, 0
    islt $I5002, $N5001, $N5002
    unless $I5002 goto if1764_end5793 
    find_dynamic_lex $P5015, "%*RX"
    unless_null $P5015, fallback5794
    nqp_get_sc_object $P5018, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["%RX"]
    unless_null $P5016, fallback5795
    nqp_get_sc_object $P5020, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5019, $P5020
    new $P5021, 'Hash'
    set $P5019["%RX"], $P5021
    set $P5016, $P5021
  fallback5795:
    unless_null $P5016, vivi_17655796
    die "Contextual %*RX not found"
    box $P5022, "Contextual %*RX not found"
    set $P5016, $P5022
  vivi_17655796:
    set $P5015, $P5016
  fallback5794:
    set $P5014, $P5015["name"]
    unless_null $P5014, fallback5797
    nqp_get_sc_object $P5023, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5014, $P5023
  fallback5797:
    set $S5002, $P5014
    index $I5003, $S5002, utf8:":sym\x{ab}", 0
    box $P5024, $I5003
    set $P101, $P5024
  if1764_end5793:
    find_dynamic_lex $P5026, "%*RX"
    unless_null $P5026, fallback5798
    nqp_get_sc_object $P5029, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["%RX"]
    unless_null $P5027, fallback5799
    nqp_get_sc_object $P5031, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5030, $P5031
    new $P5032, 'Hash'
    set $P5030["%RX"], $P5032
    set $P5027, $P5032
  fallback5799:
    unless_null $P5027, vivi_17665800
    die "Contextual %*RX not found"
    box $P5033, "Contextual %*RX not found"
    set $P5027, $P5033
  vivi_17665800:
    set $P5026, $P5027
  fallback5798:
    set $P5025, $P5026["name"]
    unless_null $P5025, fallback5801
    nqp_get_sc_object $P5034, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5025, $P5034
  fallback5801:
    set $S5005, $P5025
    set $N5004, $P101
    set $N5005, 5
    add $N5003, $N5004, $N5005
    set $I5004, $N5003
    substr $S5004, $S5005, $I5004
    chopn $S5003, $S5004, 1
    box $P5035, $S5003
    set $P102, $P5035
.annotate 'line', 3279
    nqp_get_sc_object $P5039, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Regex"]
    unless_null $P5036, fallback5802
    nqp_get_sc_object $P5040, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5036, $P5040
  fallback5802:
    find_lex $P5041, "$/"
.annotate 'line', 3280
    nqp_get_sc_object $P5045, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Regex"]
    unless_null $P5042, fallback5803
    nqp_get_sc_object $P5046, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5042, $P5046
  fallback5803:
    find_lex $P5047, "$/"
    $P5048 = $P5042."new"($P102, "literal" :named("rxtype"), $P5047 :named("node"))
    $P5049 = $P5036."new"($P5048, "sym" :named("name"), "subcapture" :named("rxtype"), $P5041 :named("node"))
    store_lex "$qast", $P5049
    .return ($P5049) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_501_1360426903.566") :anon :lex :outer("cuid_365_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3287
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$qast"
    set $P5001, $P5002[0]
    unless_null $P5001, fallback5814
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback5814:
    $P5004 = $P5001."push"(_lex_param_0)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_366_1360426903.566") :anon :lex :outer("cuid_499_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3298
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3299
    unless_null _lex_param_1, fallback5832
    nqp_get_sc_object $P5002, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set _lex_param_1, $P5002
  fallback5832:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5833
    nqp_get_sc_object $P5003, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5001, $P5003
  fallback5833:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "create_regex_code_object" :subid("cuid_367_1360426903.566") :anon :lex :outer("cuid_499_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3302
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$code", $P101 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P101, $P5001
.annotate 'line', 3303
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback5834
    nqp_get_sc_object $P5005, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback5835
    nqp_get_sc_object $P5006, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5003, $P5006
  fallback5835:
    unless_null $P5003, vivi_17705836
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_17705836:
    set $P5002, $P5003
  fallback5834:
    $P5008 = $P5002."create_code"(_lex_param_1, "", 0, "NQPRegex" :named("code_type_name"))
    set $P101, $P5008
    find_dynamic_lex $P5009, "%*RX"
    unless_null $P5009, fallback5839
    nqp_get_sc_object $P5012, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["%RX"]
    unless_null $P5010, fallback5840
    nqp_get_sc_object $P5014, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5013, $P5014
    new $P5015, 'Hash'
    set $P5013["%RX"], $P5015
    set $P5010, $P5015
  fallback5840:
    unless_null $P5010, vivi_17725841
    die "Contextual %*RX not found"
    box $P5016, "Contextual %*RX not found"
    set $P5010, $P5016
  vivi_17725841:
    set $P5009, $P5010
  fallback5839:
    exists $I5001, $P5009["code"]
    unless $I5001 goto if1771_end5838 
.annotate 'line', 3304
.annotate 'line', 3305
    find_dynamic_lex $P5018, "%*RX"
    unless_null $P5018, fallback5842
    nqp_get_sc_object $P5021, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["%RX"]
    unless_null $P5019, fallback5843
    nqp_get_sc_object $P5023, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    get_who $P5022, $P5023
    new $P5024, 'Hash'
    set $P5022["%RX"], $P5024
    set $P5019, $P5024
  fallback5843:
    unless_null $P5019, vivi_17735844
    die "Contextual %*RX not found"
    box $P5025, "Contextual %*RX not found"
    set $P5019, $P5025
  vivi_17735844:
    set $P5018, $P5019
  fallback5842:
    set $P5017, $P5018["code"]
    unless_null $P5017, fallback5845
    nqp_get_sc_object $P5026, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    set $P5017, $P5026
  fallback5845:
    $P5027 = $P5017."ADD_NESTED_CODE"($P101)
  if1771_end5838:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_nfa" :subid("cuid_368_1360426903.566") :anon :lex :outer("cuid_499_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3310
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$nfa", _lex_param_3 
.annotate 'line', 3311
    $P5001 = _lex_param_3."save"()
    $P5002 = _lex_param_1."SET_NFA"($P5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_caps" :subid("cuid_369_1360426903.566") :anon :lex :outer("cuid_499_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3314
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "%caps", _lex_param_3 
.annotate 'line', 3315
    $P5001 = _lex_param_1."SET_CAPS"(_lex_param_3)
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_alt_nfa" :subid("cuid_370_1360426903.566") :anon :lex :outer("cuid_499_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3318
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .const 'Sub' $P5008 = 'cuid_502_1360426903.566' 
    capture_lex $P5008 
    .lex "@saved", $P101 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$key", _lex_param_3 
    .lex "@alternatives", _lex_param_4 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    set $P5002, _lex_param_4
    iter $P5004, _lex_param_4
  for_next5846:
    unless $P5004, for_done5848
    shift $P5006, $P5004
  for_redo5847:
    .const 'Sub' $P5005 = 'cuid_502_1360426903.566' 
    capture_lex $P5005
    $P5002 = $P5005($P5006)
    goto for_next5846
  for_done5848:
.annotate 'line', 3323
    $P5007 = _lex_param_1."SET_ALT_NFA"(_lex_param_3, $P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_502_1360426903.566") :anon :lex :outer("cuid_370_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3320
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 3321
    find_lex $P5001, "@saved"
    $P5002 = _lex_param_0."save"(1 :named("non_empty"))
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_503_1360426903.566") :anon :lex :outer("cuid_372_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3328
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    nqp_get_sc_object $P5001, "A0448A713E129C5014098791B22223D02364857B-1360426875.54", 25
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_505_1360426903.566") :load :init
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P5001 = 'cuid_504_1360426903.566' 
    capture_lex $P5001 
    .local pmc cur_sc 
    .local pmc conflicts 
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P5001
    get_class $P5002, "LexPad"
    get_class $P5003, "NQPLexPad"
    $P5004 = $P5001."hll_map"($P5002, $P5003)
    load_bytecode "ModuleLoader.pbc"
    .const 'Sub' $P5001 = "cuid_372_1360426903.566" 
    get_hll_global $P5002, "ModuleLoader"
    $P5003 = $P5002."load_setting"("NQPCORE")
    $P5004 = $P5001."set_outer_ctx"($P5003)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QAST")
    nqp_create_sc $P5001, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595"
    set cur_sc, $P5001
    $P5002 = cur_sc."set_description"("src\\stage2\\gen\\NQP.pm")
    new $P5003, 'ResizablePMCArray'
    set conflicts, $P5003
    new $P5004, 'ResizableStringArray'
    null $S5001
    push $P5004, $S5001
    push $P5004, "P6opaque"
    push $P5004, "QAST"
    push $P5004, "QRegex"
    push $P5004, "NQPCursorRole"
    push $P5004, "5AB04DFAFFF209D71179F6DD66C39F5290FAF9C0-1360426879.021"
    push $P5004, "src\\stage2\\QRegex.nqp"
    push $P5004, "NQPMatch"
    push $P5004, "NQPCursor"
    push $P5004, "NQPRegexMethod"
    push $P5004, "NQPRegex"
    push $P5004, "HLL"
    push $P5004, "PIRT"
    push $P5004, "NQP"
    push $P5004, "DEFAULT"
    push $P5004, "CREATE"
    push $P5004, "A0448A713E129C5014098791B22223D02364857B-1360426875.54"
    push $P5004, "src\\stage2\\NQPCORE.setting"
    push $P5004, "bless"
    push $P5004, "BUILDALL"
    push $P5004, "new"
    push $P5004, "Str"
    push $P5004, "Numeric"
    push $P5004, "Int"
    push $P5004, "at_pos"
    push $P5004, "at_key"
    push $P5004, "defined"
    push $P5004, "ACCEPTS"
    push $P5004, "isa"
    push $P5004, "__dump"
    push $P5004, "BUILD"
    push $P5004, "slot_for_object"
    push $P5004, "72EB0CEEE110B04F66601526175C9117F069D82E-1360426882.856"
    push $P5004, "src\\stage2\\gen\\NQPHLL.pm"
    push $P5004, "add_object"
    push $P5004, "add_root_code_ref"
    push $P5004, "update_root_code_ref"
    push $P5004, "is_precompilation_mode"
    push $P5004, "add_load_dependency_task"
    push $P5004, "add_fixup_task"
    push $P5004, "sc"
    push $P5004, "handle"
    push $P5004, "code_ref_blocks"
    push $P5004, "load_dependency_tasks"
    push $P5004, "fixup_tasks"
    push $P5004, "push_lexpad"
    push $P5004, "pop_lexpad"
    push $P5004, "cur_lexpad"
    push $P5004, "get_legacy_block_list"
    push $P5004, "load_setting"
    push $P5004, "load_module"
    push $P5004, "import"
    push $P5004, "install_package_symbol"
    push $P5004, "install_lexical_symbol"
    push $P5004, "install_package_routine"
    push $P5004, "create_code"
    push $P5004, "pkg_create_mo"
    push $P5004, "pkg_add_attribute"
    push $P5004, "pkg_add_method"
    push $P5004, "set_routine_signature"
    push $P5004, "pkg_set_body_block"
    push $P5004, "pkg_add_parent_or_role"
    push $P5004, "pkg_add_parrot_vtable_handler_mapping"
    push $P5004, "pkg_compose"
    push $P5004, "run_begin_block"
    push $P5004, "libs"
    push $P5004, "add_initializations"
    push $P5004, "cleanup"
    push $P5004, "is_lexical"
    push $P5004, "is_package"
    push $P5004, "is_scope"
    push $P5004, "known_sym"
    push $P5004, "find_sym"
    push $P5004, "$!sc"
    push $P5004, "$!handle"
    push $P5004, "$!precomp_mode"
    push $P5004, "$!num_code_refs"
    push $P5004, "$!code_ref_blocks"
    push $P5004, "@!load_dependency_tasks"
    push $P5004, "@!fixup_tasks"
    push $P5004, "%!addr_to_slot"
    push $P5004, "@!BLOCKS"
    push $P5004, "%!code_objects_to_fix_up"
    push $P5004, "%!code_object_types"
    push $P5004, "%!code_object_fixup_list"
    push $P5004, "%!code_stub_sc_idx"
    push $P5004, "@!clearup_tasks"
    push $P5004, "MATCH"
    push $P5004, "Bool"
    push $P5004, "parse"
    push $P5004, "!INTERPOLATE"
    push $P5004, "!INTERPOLATE_REGEX"
    push $P5004, "orig"
    push $P5004, "target"
    push $P5004, "from"
    push $P5004, "pos"
    push $P5004, "CAPHASH"
    push $P5004, "!cursor_init"
    push $P5004, "!cursor_start"
    push $P5004, "!cursor_start_subcapture"
    push $P5004, "!cursor_capture"
    push $P5004, "!cursor_push_cstack"
    push $P5004, "!cursor_pass"
    push $P5004, "!cursor_fail"
    push $P5004, "!cursor_pos"
    push $P5004, "!cursor_next"
    push $P5004, "!cursor_more"
    push $P5004, "!reduce"
    push $P5004, "!reduce_with_match"
    push $P5004, "!shared"
    push $P5004, "!protoregex"
    push $P5004, "!protoregex_nfa"
    push $P5004, "!protoregex_table"
    push $P5004, "!alt"
    push $P5004, "!alt_nfa"
    push $P5004, "!precompute_nfas"
    push $P5004, "!dba"
    push $P5004, "!highwater"
    push $P5004, "!highexpect"
    push $P5004, "!fresh_highexpect"
    push $P5004, "!set_highexpect"
    push $P5004, "!clear_highwater"
    push $P5004, "!BACKREF"
    push $P5004, "!LITERAL"
    push $P5004, "at"
    push $P5004, "before"
    push $P5004, "after"
    push $P5004, "ws"
    push $P5004, "ww"
    push $P5004, "wb"
    push $P5004, "ident"
    push $P5004, "alpha"
    push $P5004, "alnum"
    push $P5004, "upper"
    push $P5004, "lower"
    push $P5004, "digit"
    push $P5004, "xdigit"
    push $P5004, "space"
    push $P5004, "blank"
    push $P5004, "cntrl"
    push $P5004, "punct"
    push $P5004, "FAILGOAL"
    push $P5004, "throw_unrecog_backslash_seq"
    push $P5004, "termish"
    push $P5004, "term"
    push $P5004, "infix"
    push $P5004, "prefix"
    push $P5004, "postfix"
    push $P5004, "circumfix"
    push $P5004, "postcircumfix"
    push $P5004, "term:sym<circumfix>"
    push $P5004, "infixish"
    push $P5004, "prefixish"
    push $P5004, "postfixish"
    push $P5004, "nullterm"
    push $P5004, "nullterm_alt"
    push $P5004, "nulltermish"
    push $P5004, "quote_delimited"
    push $P5004, "quote_atom"
    push $P5004, "decint"
    push $P5004, "decints"
    push $P5004, "hexint"
    push $P5004, "hexints"
    push $P5004, "octint"
    push $P5004, "octints"
    push $P5004, "binint"
    push $P5004, "binints"
    push $P5004, "integer"
    push $P5004, "dec_number"
    push $P5004, "escale"
    push $P5004, "quote_escape"
    push $P5004, "quote_escape:sym<backslash>"
    push $P5004, "quote_escape:sym<stopper>"
    push $P5004, "quote_escape:sym<bs>"
    push $P5004, "quote_escape:sym<nl>"
    push $P5004, "quote_escape:sym<cr>"
    push $P5004, "quote_escape:sym<tab>"
    push $P5004, "quote_escape:sym<ff>"
    push $P5004, "quote_escape:sym<esc>"
    push $P5004, "quote_escape:sym<hex>"
    push $P5004, "quote_escape:sym<oct>"
    push $P5004, "quote_escape:sym<chr>"
    push $P5004, "quote_escape:sym<0>"
    push $P5004, "quote_escape:sym<misc>"
    push $P5004, "charname"
    push $P5004, "charnames"
    push $P5004, "charspec"
    push $P5004, "O"
    push $P5004, "panic"
    push $P5004, "peek_delimiters"
    push $P5004, "quote_EXPR"
    push $P5004, "quotemod_check"
    push $P5004, "starter"
    push $P5004, "stopper"
    push $P5004, "split_words"
    push $P5004, "EXPR"
    push $P5004, "EXPR_reduce"
    push $P5004, "EXPR_nonassoc"
    push $P5004, "ternary"
    push $P5004, "MARKER"
    push $P5004, "MARKED"
    push $P5004, "LANG"
    push $P5004, "TOP"
    push $P5004, "identifier"
    push $P5004, "name"
    push $P5004, "deflongname"
    push $P5004, "ENDSTMT"
    push $P5004, "unv"
    push $P5004, "pod_comment"
    push $P5004, "comp_unit"
    push $P5004, "statementlist"
    push $P5004, "statement"
    push $P5004, "eat_terminator"
    push $P5004, "xblock"
    push $P5004, "pblock"
    push $P5004, "lambda"
    push $P5004, "block"
    push $P5004, "blockoid"
    push $P5004, "newpad"
    push $P5004, "outerctx"
    push $P5004, "finishpad"
    push $P5004, "you_are_here"
    push $P5004, "terminator"
    push $P5004, "terminator:sym<;>"
    push $P5004, "terminator:sym<}>"
    push $P5004, "statement_control"
    push $P5004, "statement_control:sym<use>"
    push $P5004, "statement_control:sym<if>"
    push $P5004, "statement_control:sym<unless>"
    push $P5004, "statement_control:sym<while>"
    push $P5004, "statement_control:sym<repeat>"
    push $P5004, "statement_control:sym<for>"
    push $P5004, "statement_control:sym<CATCH>"
    push $P5004, "statement_control:sym<CONTROL>"
    push $P5004, "statement_prefix"
    push $P5004, "statement_prefix:sym<BEGIN>"
    push $P5004, "statement_prefix:sym<INIT>"
    push $P5004, "statement_prefix:sym<try>"
    push $P5004, "blorst"
    push $P5004, "statement_mod_cond"
    push $P5004, "statement_mod_cond:sym<if>"
    push $P5004, "statement_mod_cond:sym<unless>"
    push $P5004, "statement_mod_loop"
    push $P5004, "statement_mod_loop:sym<while>"
    push $P5004, "statement_mod_loop:sym<until>"
    push $P5004, "statement_mod_loop:sym<for>"
    push $P5004, "term:sym<fatarrow>"
    push $P5004, "term:sym<colonpair>"
    push $P5004, "term:sym<variable>"
    push $P5004, "term:sym<package_declarator>"
    push $P5004, "term:sym<scope_declarator>"
    push $P5004, "term:sym<routine_declarator>"
    push $P5004, "term:sym<multi_declarator>"
    push $P5004, "term:sym<regex_declarator>"
    push $P5004, "term:sym<statement_prefix>"
    push $P5004, "term:sym<lambda>"
    push $P5004, "fatarrow"
    push $P5004, "colonpair"
    push $P5004, "variable"
    push $P5004, "sigil"
    push $P5004, "twigil"
    push $P5004, "package_declarator"
    push $P5004, "package_declarator:sym<module>"
    push $P5004, "package_declarator:sym<knowhow>"
    push $P5004, "package_declarator:sym<class>"
    push $P5004, "package_declarator:sym<grammar>"
    push $P5004, "package_declarator:sym<role>"
    push $P5004, "package_declarator:sym<native>"
    push $P5004, "package_declarator:sym<stub>"
    push $P5004, "package_def"
    push $P5004, "role_params"
    push $P5004, "scope_declarator"
    push $P5004, "scope_declarator:sym<my>"
    push $P5004, "scope_declarator:sym<our>"
    push $P5004, "scope_declarator:sym<has>"
    push $P5004, "scoped"
    push $P5004, "typename"
    push $P5004, "declarator"
    push $P5004, "variable_declarator"
    push $P5004, "routine_declarator"
    push $P5004, "routine_declarator:sym<sub>"
    push $P5004, "routine_declarator:sym<method>"
    push $P5004, "routine_def"
    push $P5004, "method_def"
    push $P5004, "onlystar"
    push $P5004, "multi_declarator"
    push $P5004, "multi_declarator:sym<multi>"
    push $P5004, "multi_declarator:sym<proto>"
    push $P5004, "multi_declarator:sym<null>"
    push $P5004, "signature"
    push $P5004, "parameter"
    push $P5004, "param_var"
    push $P5004, "named_param"
    push $P5004, "default_value"
    push $P5004, "trait"
    push $P5004, "trait_mod"
    push $P5004, "trait_mod:sym<is>"
    push $P5004, "regex_declarator"
    push $P5004, "dotty"
    push $P5004, "term:sym<self>"
    push $P5004, "term:sym<identifier>"
    push $P5004, "term:sym<name>"
    push $P5004, "term:sym<pir::op>"
    push $P5004, "term:sym<pir::const>"
    push $P5004, "term:sym<nqp::op>"
    push $P5004, "term:sym<onlystar>"
    push $P5004, "args"
    push $P5004, "arglist"
    push $P5004, "term:sym<value>"
    push $P5004, "value"
    push $P5004, "number"
    push $P5004, "quote"
    push $P5004, "quote:sym<apos>"
    push $P5004, "quote:sym<dblq>"
    push $P5004, "quote:sym<q>"
    push $P5004, "quote:sym<qq>"
    push $P5004, "quote:sym<Q>"
    push $P5004, "quote:sym<Q:PIR>"
    push $P5004, "quote:sym</ />"
    push $P5004, "quote_escape:sym<$>"
    push $P5004, "quote_escape:sym<{ }>"
    push $P5004, "circumfix:sym<( )>"
    push $P5004, "circumfix:sym<[ ]>"
    push $P5004, "circumfix:sym<ang>"
    push $P5004, utf8:"circumfix:sym<\x{ab} \x{bb}>"
    push $P5004, "circumfix:sym<{ }>"
    push $P5004, "semilist"
    push $P5004, "infixstopper"
    push $P5004, "postcircumfix:sym<[ ]>"
    push $P5004, "postcircumfix:sym<{ }>"
    push $P5004, "postcircumfix:sym<ang>"
    push $P5004, "postcircumfix:sym<( )>"
    push $P5004, "postfix:sym<.>"
    push $P5004, "prefix:sym<++>"
    push $P5004, "prefix:sym<-->"
    push $P5004, "postfix:sym<++>"
    push $P5004, "postfix:sym<-->"
    push $P5004, "infix:sym<**>"
    push $P5004, "prefix:sym<+>"
    push $P5004, "prefix:sym<~>"
    push $P5004, "prefix:sym<->"
    push $P5004, "prefix:sym<?>"
    push $P5004, "prefix:sym<!>"
    push $P5004, "prefix:sym<|>"
    push $P5004, "infix:sym<*>"
    push $P5004, "infix:sym</>"
    push $P5004, "infix:sym<%>"
    push $P5004, "infix:sym<+&>"
    push $P5004, "infix:sym<+>"
    push $P5004, "infix:sym<->"
    push $P5004, "infix:sym<+|>"
    push $P5004, "infix:sym<+^>"
    push $P5004, "infix:sym<~>"
    push $P5004, "infix:sym<==>"
    push $P5004, "infix:sym<!=>"
    push $P5004, "infix:sym<<=>"
    push $P5004, "infix:sym<>=>"
    push $P5004, "infix:sym<<>"
    push $P5004, "infix:sym<>>"
    push $P5004, "infix:sym<eq>"
    push $P5004, "infix:sym<ne>"
    push $P5004, "infix:sym<le>"
    push $P5004, "infix:sym<ge>"
    push $P5004, "infix:sym<lt>"
    push $P5004, "infix:sym<gt>"
    push $P5004, "infix:sym<=:=>"
    push $P5004, "infix:sym<~~>"
    push $P5004, "infix:sym<&&>"
    push $P5004, "infix:sym<||>"
    push $P5004, "infix:sym<//>"
    push $P5004, "infix:sym<?? !!>"
    push $P5004, "infix:sym<=>"
    push $P5004, "infix:sym<:=>"
    push $P5004, "infix:sym<::=>"
    push $P5004, "infix:sym<,>"
    push $P5004, "prefix:sym<return>"
    push $P5004, "prefix:sym<make>"
    push $P5004, "term:sym<last>"
    push $P5004, "term:sym<next>"
    push $P5004, "term:sym<redo>"
    push $P5004, "smartmatch"
    push $P5004, "$!shared"
    push $P5004, "$!from"
    push $P5004, "$!pos"
    push $P5004, "$!match"
    push $P5004, "$!name"
    push $P5004, "$!bstack"
    push $P5004, "$!cstack"
    push $P5004, "$!regexsub"
    push $P5004, "$!restart"
    push $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360426899.592"
    push $P5004, "src\\stage2\\gen\\NQPP6QRegex.pm"
    push $P5004, "obs"
    push $P5004, "throw_unrecognized_metachar"
    push $P5004, "throw_null_pattern"
    push $P5004, "normspace"
    push $P5004, "arg"
    push $P5004, "nibbler"
    push $P5004, "rxstopper"
    push $P5004, "termaltseq"
    push $P5004, "termconjseq"
    push $P5004, "termalt"
    push $P5004, "termconj"
    push $P5004, "quantified_atom"
    push $P5004, "separator"
    push $P5004, "atom"
    push $P5004, "quantifier"
    push $P5004, "quantifier:sym<*>"
    push $P5004, "quantifier:sym<+>"
    push $P5004, "quantifier:sym<?>"
    push $P5004, "quantifier:sym<{N,M}>"
    push $P5004, "quantifier:sym<**>"
    push $P5004, "backmod"
    push $P5004, "metachar"
    push $P5004, "metachar:sym<ws>"
    push $P5004, "metachar:sym<[ ]>"
    push $P5004, "metachar:sym<( )>"
    push $P5004, "metachar:sym<'>"
    push $P5004, "metachar:sym<\">"
    push $P5004, "metachar:sym<.>"
    push $P5004, "metachar:sym<^>"
    push $P5004, "metachar:sym<^^>"
    push $P5004, "metachar:sym<$>"
    push $P5004, "metachar:sym<$$>"
    push $P5004, "metachar:sym<:::>"
    push $P5004, "metachar:sym<::>"
    push $P5004, "metachar:sym<lwb>"
    push $P5004, "metachar:sym<rwb>"
    push $P5004, "metachar:sym<from>"
    push $P5004, "metachar:sym<to>"
    push $P5004, "metachar:sym<bs>"
    push $P5004, "metachar:sym<mod>"
    push $P5004, "metachar:sym<quantifier>"
    push $P5004, "metachar:sym<~>"
    push $P5004, "metachar:sym<{*}>"
    push $P5004, "metachar:sym<assert>"
    push $P5004, "metachar:sym<var>"
    push $P5004, "backslash"
    push $P5004, "backslash:sym<s>"
    push $P5004, "backslash:sym<b>"
    push $P5004, "backslash:sym<e>"
    push $P5004, "backslash:sym<f>"
    push $P5004, "backslash:sym<h>"
    push $P5004, "backslash:sym<r>"
    push $P5004, "backslash:sym<t>"
    push $P5004, "backslash:sym<v>"
    push $P5004, "backslash:sym<o>"
    push $P5004, "backslash:sym<x>"
    push $P5004, "backslash:sym<c>"
    push $P5004, "backslash:sym<A>"
    push $P5004, "backslash:sym<z>"
    push $P5004, "backslash:sym<Z>"
    push $P5004, "backslash:sym<Q>"
    push $P5004, "backslash:sym<unrec>"
    push $P5004, "backslash:sym<misc>"
    push $P5004, "assertion"
    push $P5004, "assertion:sym<?>"
    push $P5004, "assertion:sym<!>"
    push $P5004, "assertion:sym<|>"
    push $P5004, "assertion:sym<method>"
    push $P5004, "assertion:sym<name>"
    push $P5004, "assertion:sym<[>"
    push $P5004, "cclass_elem"
    push $P5004, "mod_internal"
    push $P5004, "mod_ident"
    push $P5004, "mod_ident:sym<ignorecase>"
    push $P5004, "mod_ident:sym<ratchet>"
    push $P5004, "mod_ident:sym<sigspace>"
    push $P5004, "mod_ident:sym<dba>"
    push $P5004, "mod_ident:sym<oops>"
    push $P5004, "metachar:sym<:my>"
    push $P5004, "metachar:sym<{ }>"
    push $P5004, "metachar:sym<nqpvar>"
    push $P5004, "assertion:sym<{ }>"
    push $P5004, "assertion:sym<?{ }>"
    push $P5004, "assertion:sym<var>"
    push $P5004, "codeblock"
    push $P5004, "ints_to_string"
    push $P5004, "CTXSAVE"
    push $P5004, "SET_BLOCK_OUTER_CTX"
    push $P5004, "qbuildsub"
    push $P5004, "alt_nfas"
    push $P5004, "subrule_alias"
    push $P5004, "flip_ast"
    push $P5004, "create_regex_code_object"
    push $P5004, "store_regex_caps"
    push $P5004, "store_regex_nfa"
    push $P5004, "store_regex_alt_nfa"
    push $P5004, "language"
    push $P5004, "compiler"
    push $P5004, "config"
    push $P5004, "autoprint"
    push $P5004, "interactive"
    push $P5004, "interactive_result"
    push $P5004, "interactive_exception"
    push $P5004, "eval"
    push $P5004, "ctxsave"
    push $P5004, "stages"
    push $P5004, "parsegrammar"
    push $P5004, "parseactions"
    push $P5004, "interactive_banner"
    push $P5004, "interactive_prompt"
    push $P5004, "compiler_progname"
    push $P5004, "commandline_options"
    push $P5004, "command_line"
    push $P5004, "command_eval"
    push $P5004, "process_args"
    push $P5004, "evalfiles"
    push $P5004, "compile"
    push $P5004, "start"
    push $P5004, "past"
    push $P5004, "post"
    push $P5004, "pirbegin"
    push $P5004, "pir"
    push $P5004, "evalpmc"
    push $P5004, "dumper"
    push $P5004, "usage"
    push $P5004, "version"
    push $P5004, "show-config"
    push $P5004, "verbose-config"
    push $P5004, "vmstat"
    push $P5004, "nqpevent"
    push $P5004, "removestage"
    push $P5004, "addstage"
    push $P5004, "parse_name"
    push $P5004, "lineof"
    push $P5004, "user-progname"
    push $P5004, "cli-options"
    push $P5004, "cli-arguments"
    push $P5004, "@!stages"
    push $P5004, "$!parsegrammar"
    push $P5004, "$!parseactions"
    push $P5004, "@!cmdoptions"
    push $P5004, "$!usage"
    push $P5004, "$!compiler_progname"
    push $P5004, "$!language"
    push $P5004, "%!config"
    push $P5004, "$!user_progname"
    push $P5004, "@!cli-arguments"
    push $P5004, "%!cli-options"
    push $P5004, ""
    push $P5004, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5004, "alt_nfa__1_1360426904.792"
    push $P5004, "alt_nfa__2_1360426904.808"
    push $P5004, utf8:"\n\x{b}\f\r\x{85}\u2028\u2029"
    push $P5004, "alt_nfa__4_1360426904.825"
    push $P5004, "alt_nfa__3_1360426904.817"
    push $P5004, "alt_nfa__6_1360426904.905"
    push $P5004, "alt_nfa__5_1360426904.893"
    push $P5004, "alt_nfa__7_1360426904.988"
    push $P5004, "alt_nfa__9_1360426905.007"
    push $P5004, "alt_nfa__8_1360426904.994"
    push $P5004, "{"
    push $P5004, "alt_nfa__10_1360426905.033"
    push $P5004, "alt_nfa__11_1360426905.039"
    push $P5004, ";"
    push $P5004, "}"
    push $P5004, "sym"
    push $P5004, "else"
    push $P5004, "alt_nfa__12_1360426905.133"
    push $P5004, "wu"
    push $P5004, "alt_nfa__13_1360426905.152"
    push $P5004, "alt_nfa__14_1360426905.153"
    push $P5004, "alt_nfa__15_1360426905.153"
    push $P5004, "alt_nfa__16_1360426905.2"
    push $P5004, "cond"
    push $P5004, "alt_nfa__17_1360426905.268"
    push $P5004, "alt_nfa__18_1360426905.276"
    push $P5004, "key"
    push $P5004, "val"
    push $P5004, "not"
    push $P5004, "alt_nfa__19_1360426905.313"
    push $P5004, "desigilname"
    push $P5004, "<"
    push $P5004, "/_!"
    push $P5004, "alt_nfa__20_1360426905.331"
    push $P5004, "$@%&"
    push $P5004, "*!?"
    push $P5004, "metaclass"
    push $P5004, "repr"
    push $P5004, "export"
    push $P5004, "parent"
    push $P5004, "role"
    push $P5004, "alt_nfa__21_1360426905.67"
    push $P5004, "alt_nfa__22_1360426905.683"
    push $P5004, "alt_nfa__23_1360426905.731"
    push $P5004, "latename"
    push $P5004, "private"
    push $P5004, "alt_nfa__24_1360426905.764"
    push $P5004, "invocant"
    push $P5004, "alt_nfa__26_1360426905.836"
    push $P5004, "alt_nfa__25_1360426905.831"
    push $P5004, "definedness"
    push $P5004, "quant"
    push $P5004, "_DU"
    push $P5004, "alt_nfa__27_1360426905.859"
    push $P5004, "alt_nfa__28_1360426905.859"
    push $P5004, "alt_nfa__29_1360426905.859"
    push $P5004, "/!"
    push $P5004, "alt_nfa__30_1360426905.869"
    push $P5004, "longname"
    push $P5004, "proto"
    push $P5004, "p6regex"
    push $P5004, "alt_nfa__31_1360426905.974"
    push $P5004, "alt_nfa__32_1360426905.975"
    push $P5004, "alt_nfa__33_1360426905.975"
    push $P5004, "'\""
    push $P5004, "("
    push $P5004, "alt_nfa__34_1360426905.997"
    push $P5004, "alt_nfa__35_1360426905.997"
    push $P5004, "op"
    push $P5004, "const"
    push $P5004, "alt_nfa__36_1360426906.062"
    push $P5004, "alt_nfa__37_1360426906.071"
    push $P5004, "sign"
    push $P5004, "alt_nfa__38_1360426906.08"
    push $P5004, "'"
    push $P5004, "\""
    push $P5004, "$"
    push $P5004, utf8:"\x{ab}"
    push $P5004, "OPER"
    push $P5004, ">"
    push $P5004, "}/"
    push $P5004, "var"
    push $P5004, "alt_nfa__39_1360426906.827"
    push $P5004, "alt_nfa__40_1360426906.849"
    push $P5004, "alt_nfa__41_1360426906.862"
    push $P5004, "zw"
    push $P5004, "?!"
    push $P5004, "alt_nfa__42_1360426906.893"
    push $P5004, "$@"
    push $P5004, "__6MODEL_CORE__"
    push $P5004, "GLOBALish"
    push $P5004, "EXPORT"
    push $P5004, "46A27B8E73DBD8EFB3FE1AA531DA4577B21729DD-1360426872.168"
    push $P5004, "src\\stage2\\gen\\nqp-mo.pm"
    push $P5004, "NQP::World"
    push $P5004, "NQP::Grammar"
    push $P5004, "alt_nfa__1_1360426882.957"
    push $P5004, "alt_nfa__2_1360426882.986"
    push $P5004, "alt_nfa__3_1360426883.049"
    push $P5004, "alt_nfa__4_1360426883.049"
    push $P5004, "alt_nfa__5_1360426883.067"
    push $P5004, "alt_nfa__6_1360426883.137"
    push $P5004, "alt_nfa__7_1360426883.149"
    push $P5004, "alt_nfa__8_1360426883.184"
    push $P5004, "alt_nfa__9_1360426883.221"
    push $P5004, "shared"
    push $P5004, "match"
    push $P5004, "bstack"
    push $P5004, "cstack"
    push $P5004, "regexsub"
    push $P5004, "restart"
    push $P5004, "NQP::Regex"
    push $P5004, "alt_nfa__1_1360426899.713"
    push $P5004, "alt_nfa__2_1360426899.719"
    push $P5004, "alt_nfa__3_1360426899.742"
    push $P5004, "alt_nfa__4_1360426899.803"
    push $P5004, "alt_nfa__5_1360426899.819"
    push $P5004, "alt_nfa__6_1360426899.872"
    push $P5004, "alt_nfa__7_1360426899.896"
    push $P5004, "alt_nfa__8_1360426899.914"
    push $P5004, "alt_nfa__9_1360426899.98"
    push $P5004, "alt_nfa__10_1360426900.048"
    push $P5004, "alt_nfa__11_1360426900.055"
    push $P5004, "alt_nfa__12_1360426900.135"
    push $P5004, "alt_nfa__13_1360426900.192"
    push $P5004, "alt_nfa__14_1360426900.203"
    push $P5004, "alt_nfa__15_1360426900.267"
    push $P5004, "alt_nfa__16_1360426900.278"
    push $P5004, "alt_nfa__17_1360426900.309"
    push $P5004, "alt_nfa__18_1360426900.317"
    push $P5004, "alt_nfa__19_1360426900.377"
    push $P5004, "alt_nfa__20_1360426900.377"
    push $P5004, "alt_nfa__21_1360426900.377"
    push $P5004, "alt_nfa__23_1360426900.404"
    push $P5004, "alt_nfa__24_1360426900.405"
    push $P5004, "alt_nfa__22_1360426900.384"
    push $P5004, "NQP::Actions"
    push $P5004, "NQP::RegexActions"
    push $P5004, "NQP::Compiler"
    push $P5004, "CompileTimeValue"
    push $P5004, "A30E853E22E2B1259976A8228F13C253B666CE13-1360426877.356"
    push $P5004, "src\\stage2\\QASTNode.nqp"
    push $P5004, "SpecialArg"
    push $P5004, "Node"
    push $P5004, "Regex"
    push $P5004, "IVal"
    push $P5004, "NVal"
    push $P5004, "SVal"
    push $P5004, "BVal"
    push $P5004, "WVal"
    push $P5004, "Want"
    push $P5004, "Var"
    push $P5004, "VarWithFallback"
    push $P5004, "Op"
    push $P5004, "VM"
    push $P5004, "Stmts"
    push $P5004, "Stmt"
    push $P5004, "Block"
    push $P5004, "Unquote"
    push $P5004, "CompUnit"
    push $P5004, "InlinePlaceholder"
    push $P5004, "Operations"
    push $P5004, "39F39657838AC815989B5881161D3952D9694BB1-1360426887.497"
    push $P5004, "src\\stage2\\QAST.nqp"
    push $P5004, "Compiler"
    push $P5004, "NFA"
    push $P5004, "P6Regex"
    push $P5004, "Grammar"
    push $P5004, "Actions"
    push $P5004, "CommandLine"
    push $P5004, "World"
    push $P5004, "CallResult"
    push $P5004, "Sub"
    push $P5004, "Ops"
    push $P5004, "Label"
    push $P5004, "RegexActions"
    push $P5004, "Ee"
    push $P5004, "01"
    push $P5004, "01234567"
    push $P5004, "0123456789abcdefABCDEF"
    push $P5004, "?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    push $P5004, "dDnNsSwW"
    push $P5004, "bB"
    push $P5004, "eE"
    push $P5004, "fF"
    push $P5004, "hH"
    push $P5004, "rR"
    push $P5004, "tT"
    push $P5004, "vV"
    push $P5004, "oO"
    push $P5004, "xX"
    push $P5004, "cC"
    push $P5004, "&|~"
    .const 'Sub' $P5005 = 'cuid_504_1360426903.566' 
    capture_lex $P5005
    $P5006 = $P5005()
    nqp_deserialize_sc "", cur_sc, $P5004, $P5006, conflicts
    unless conflicts goto if1775_end5855 
    die "Repossession conflicts occurred during deserialization"
  if1775_end5855:
    .const "LexInfo" $P5001 = "cuid_372_1360426903.566"
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    $P5001."set_static_lexpad_value"("GLOBALish", $P5002)
    .const "LexInfo" $P5003 = "cuid_372_1360426903.566"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_372_1360426903.566"
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 0
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_372_1360426903.566"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_372_1360426903.566"
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 1
    $P5001."set_static_lexpad_value"("EXPORT", $P5002)
    .const "LexInfo" $P5003 = "cuid_372_1360426903.566"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_1_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 4
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_2_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 5
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_3_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 6
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_4_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 7
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_5_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 8
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_6_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 9
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_7_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 10
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_8_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 11
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_9_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 12
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_10_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 13
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_11_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 14
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_12_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 15
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_13_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 16
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_14_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 17
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_15_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 18
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_16_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 19
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_17_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 20
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_18_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 21
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_19_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 22
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_20_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 23
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_21_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 24
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_22_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 25
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_23_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 26
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_24_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 27
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_25_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 28
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_26_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 29
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_27_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 30
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_28_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 31
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_29_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 32
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_30_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 33
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_31_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 34
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_32_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 35
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_33_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 36
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_34_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 37
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_375_1360426903.566"
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_375_1360426903.566"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_375_1360426903.566"
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 3
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_375_1360426903.566"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_35_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 39
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_36_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 40
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_37_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 41
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_38_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 42
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_39_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 43
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_40_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 44
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_41_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 45
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_42_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 46
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_43_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 47
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_44_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 48
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_45_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 49
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_46_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 50
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_47_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 51
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_48_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 52
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_49_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 53
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_50_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 54
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_51_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 55
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_52_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 56
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_53_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 57
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_54_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 58
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_55_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 59
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_56_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 60
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_57_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 61
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_58_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 62
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_59_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 63
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_60_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 64
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_61_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 65
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_62_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 66
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_63_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 67
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_64_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 68
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_65_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 69
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_66_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 70
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_67_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 71
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_68_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 72
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_69_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 73
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_70_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 74
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_71_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 75
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_72_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 76
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_73_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 77
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_74_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 78
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_75_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 79
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_76_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 80
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_77_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 81
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_78_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 82
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_79_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 83
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_80_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 84
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_81_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 85
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_82_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 86
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_83_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 87
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_84_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 88
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_85_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 89
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_86_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 90
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_87_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 91
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_88_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 92
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_89_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 93
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_90_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 94
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_91_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 95
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_92_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 96
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_93_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 97
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_94_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 98
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_95_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 99
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_96_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 100
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_97_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 101
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_98_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 102
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_99_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 103
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_100_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 104
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_101_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 105
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_102_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 106
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_103_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 107
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_104_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 108
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_105_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 109
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_106_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 110
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_107_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 111
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_108_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 112
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_109_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 113
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_110_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 114
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_111_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 115
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_112_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 116
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_113_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 117
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_114_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 118
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_115_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 119
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_116_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 120
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_117_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 121
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_118_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 122
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_119_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 123
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_120_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 124
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_121_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 125
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_122_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 126
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_123_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 127
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_124_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 128
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_125_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 129
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_126_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 130
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_127_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 131
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_128_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 132
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_129_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 133
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_130_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 134
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_131_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 135
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_132_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 136
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_133_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 137
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_134_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 138
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_135_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 139
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_136_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 140
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_137_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 141
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_138_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 142
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_139_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 143
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_140_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 144
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_141_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 145
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_142_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 146
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_143_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 147
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_144_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 148
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_145_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 149
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_146_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 150
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_147_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 151
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_148_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 152
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_149_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 153
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_150_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 154
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_151_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 155
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_152_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 156
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_153_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 157
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_154_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 158
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_155_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 159
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_156_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 160
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_157_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 161
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_158_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 162
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_159_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 163
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_160_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 164
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_161_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 165
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_162_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 166
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_163_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 167
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_164_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 168
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_165_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 169
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_166_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 170
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_167_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 171
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_168_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 172
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_169_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 173
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_170_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 174
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_171_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 175
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_172_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 176
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_173_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 177
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_174_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 178
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_175_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 179
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_176_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 180
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_177_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 181
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_178_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 182
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_179_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 183
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_180_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 184
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_181_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 185
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_182_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 186
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_183_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 187
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_184_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 188
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_185_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 189
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_186_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 190
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_187_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 191
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_188_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 192
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_189_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 193
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_190_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 194
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_191_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 195
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_192_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 196
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_193_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 197
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_194_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 198
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_195_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 199
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_196_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 200
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_197_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 201
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_198_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 202
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_199_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 203
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_200_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 204
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_201_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 205
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_202_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 206
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_203_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 207
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_204_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 208
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_205_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 209
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_206_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 210
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_207_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 211
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_208_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 212
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_209_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 213
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_210_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 214
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_211_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 215
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_212_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 216
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_213_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 217
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_214_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 218
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_215_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 219
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_216_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 220
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_217_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 221
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_218_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 222
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_219_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 223
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_220_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 224
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_221_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 225
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_222_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 226
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_223_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 227
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_224_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 228
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_225_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 229
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_226_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 230
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_395_1360426903.566"
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 38
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_395_1360426903.566"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_395_1360426903.566"
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 38
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_395_1360426903.566"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_227_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 232
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_228_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 233
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_229_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 234
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_230_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 235
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_231_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 236
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_232_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 237
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_233_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 238
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_234_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 239
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_235_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 240
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_236_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 241
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_237_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 242
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_238_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 243
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_239_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 244
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_240_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 245
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_241_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 246
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_242_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 247
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_243_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 248
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_244_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 249
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_245_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 250
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_246_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 251
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_414_1360426903.566"
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 231
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_414_1360426903.566"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_414_1360426903.566"
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 231
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_414_1360426903.566"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_247_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 253
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_248_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 254
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_249_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 255
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_250_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 256
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_251_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 257
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_252_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 258
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_253_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 259
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_254_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 260
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_255_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 261
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_256_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 262
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_257_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 263
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_258_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 264
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_259_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 265
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_260_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 266
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_261_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 267
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_262_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 268
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_263_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 269
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_264_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 270
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_265_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 271
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_266_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 272
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_267_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 273
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_268_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 274
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_269_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 275
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_270_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 276
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_271_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 277
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_272_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 278
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_273_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 279
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_274_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 280
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_275_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 281
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_276_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 282
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_277_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 283
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_278_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 284
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_279_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 285
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_280_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 286
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_281_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 287
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_282_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 288
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_283_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 289
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_284_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 290
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_285_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 291
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_286_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 292
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_287_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 293
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_288_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 294
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_289_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 295
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_290_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 296
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_291_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 297
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_292_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 298
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_293_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 299
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_294_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 300
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_295_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 301
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_296_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 302
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_297_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 303
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_298_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 304
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_299_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 305
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_300_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 306
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_301_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 307
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_302_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 308
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_303_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 309
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_304_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 310
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_305_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 311
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_306_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 312
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_307_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 313
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_308_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 314
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_309_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 315
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_310_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 316
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_311_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 317
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_312_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 318
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_313_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 319
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_314_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 320
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_315_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 321
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_316_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 322
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_317_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 323
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_318_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 324
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_319_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 325
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_320_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 326
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_321_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 327
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_322_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 328
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_323_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 329
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_324_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 330
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_325_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 331
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_326_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 332
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_327_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 333
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_328_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 334
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_329_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 335
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_330_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 336
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_331_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 337
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_332_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 338
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_333_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 339
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_334_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 340
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_335_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 341
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_336_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 342
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_337_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 343
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_338_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 344
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_339_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 345
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_340_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 346
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_341_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 347
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_342_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 348
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_343_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 349
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_344_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 350
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_345_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 351
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_346_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 352
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_347_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 353
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_348_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 354
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_349_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 355
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_350_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 356
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_351_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 357
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_352_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 358
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_353_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 359
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_354_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 360
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_355_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 361
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_356_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 362
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_357_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 363
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_424_1360426903.566"
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 252
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_424_1360426903.566"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_424_1360426903.566"
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 252
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_424_1360426903.566"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_358_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 365
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_359_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 366
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_360_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 367
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_361_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 368
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_362_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 369
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_363_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 370
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_364_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 371
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_365_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 372
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_366_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 373
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_367_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 374
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_368_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 375
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_369_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 376
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_370_1360426903.566" 
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 377
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_499_1360426903.566"
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 364
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_499_1360426903.566"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_499_1360426903.566"
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 364
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_499_1360426903.566"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_503_1360426903.566"
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 378
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_503_1360426903.566"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_503_1360426903.566"
    nqp_get_sc_object $P5002, "A682506E16EE1FC691578F1001CB9162BCF3AA8C-1360426903.595", 378
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_503_1360426903.566"
    $P5004 = $P5003."finish_static_lexpad"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_504_1360426903.566") :anon :lex :outer("cuid_505_1360426903.566")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    .const 'Sub' $P5002 = "cuid_1_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_2_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_3_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_4_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_5_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_6_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_7_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_8_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_9_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_10_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_11_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_12_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_13_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_14_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_15_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_16_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_17_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_18_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_19_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_20_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_21_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_22_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_23_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_24_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_25_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_26_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_27_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_28_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_29_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_30_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_31_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_32_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_33_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_34_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_35_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_36_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_37_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_38_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_39_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_40_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_41_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_42_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_43_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_44_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_45_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_46_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_47_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_48_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_49_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_50_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_51_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_52_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_53_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_54_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_55_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_56_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_57_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_58_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_59_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_60_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_61_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_62_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_63_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_64_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_65_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_66_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_67_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_68_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_69_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_70_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_71_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_72_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_73_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_74_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_75_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_76_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_77_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_78_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_79_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_80_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_81_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_82_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_83_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_84_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_85_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_86_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_87_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_88_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_89_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_90_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_91_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_92_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_93_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_94_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_95_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_96_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_97_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_98_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_99_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_100_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_101_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_102_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_103_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_104_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_105_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_106_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_107_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_108_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_109_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_110_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_111_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_112_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_113_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_114_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_115_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_116_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_117_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_118_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_119_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_120_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_121_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_122_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_123_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_124_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_125_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_126_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_127_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_128_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_129_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_130_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_131_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_132_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_133_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_134_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_135_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_136_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_137_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_138_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_139_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_140_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_141_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_142_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_143_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_144_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_145_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_146_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_147_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_148_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_149_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_150_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_151_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_152_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_153_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_154_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_155_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_156_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_157_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_158_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_159_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_160_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_161_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_162_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_163_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_164_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_165_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_166_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_167_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_168_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_169_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_170_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_171_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_172_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_173_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_174_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_175_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_176_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_177_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_178_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_179_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_180_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_181_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_182_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_183_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_184_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_185_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_186_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_187_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_188_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_189_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_190_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_191_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_192_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_193_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_194_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_195_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_196_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_197_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_198_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_199_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_200_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_201_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_202_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_203_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_204_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_205_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_206_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_207_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_208_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_209_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_210_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_211_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_212_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_213_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_214_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_215_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_216_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_217_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_218_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_219_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_220_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_221_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_222_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_223_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_224_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_225_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_226_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_227_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_228_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_229_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_230_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_231_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_232_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_233_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_234_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_235_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_236_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_237_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_238_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_239_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_240_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_241_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_242_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_243_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_244_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_245_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_246_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_247_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_248_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_249_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_250_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_251_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_252_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_253_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_254_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_255_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_256_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_257_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_258_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_259_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_260_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_261_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_262_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_263_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_264_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_265_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_266_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_267_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_268_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_269_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_270_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_271_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_272_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_273_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_274_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_275_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_276_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_277_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_278_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_279_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_280_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_281_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_282_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_283_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_284_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_285_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_286_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_287_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_288_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_289_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_290_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_291_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_292_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_293_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_294_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_295_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_296_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_297_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_298_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_299_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_300_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_301_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_302_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_303_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_304_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_305_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_306_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_307_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_308_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_309_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_310_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_311_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_312_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_313_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_314_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_315_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_316_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_317_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_318_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_319_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_320_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_321_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_322_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_323_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_324_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_325_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_326_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_327_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_328_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_329_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_330_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_331_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_332_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_333_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_334_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_335_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_336_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_337_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_338_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_339_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_340_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_341_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_342_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_343_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_344_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_345_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_346_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_347_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_348_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_349_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_350_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_351_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_352_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_353_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_354_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_355_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_356_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_357_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_358_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_359_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_360_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_361_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_362_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_363_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_364_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_365_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_366_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_367_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_368_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_369_1360426903.566" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_370_1360426903.566" 
    push $P5001, $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_506_1360426903.566") :load
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P5001 = "cuid_372_1360426903.566" 
    $P5002 = $P5001()
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_507_1360426903.566") :main
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc ARGS :slurpy 
    .const 'Sub' $P5001 = "cuid_372_1360426903.566" 
    $P5002 = $P5001(ARGS :flat)
    .return ($P5002) 
.end